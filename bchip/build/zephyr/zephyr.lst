
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c200 <_vector_start>:
    c200:	20008180 	.word	0x20008180
    c204:	00022a29 	.word	0x00022a29
    c208:	00038029 	.word	0x00038029
    c20c:	000229fd 	.word	0x000229fd
    c210:	000229fd 	.word	0x000229fd
    c214:	000229fd 	.word	0x000229fd
    c218:	000229fd 	.word	0x000229fd
	...
    c22c:	000223b1 	.word	0x000223b1
    c230:	000229fd 	.word	0x000229fd
    c234:	00000000 	.word	0x00000000
    c238:	0002235d 	.word	0x0002235d
    c23c:	000229fd 	.word	0x000229fd

0000c240 <_irq_vector_table>:
    c240:	00022469 00039e11 00022469 00022469     i$......i$..i$..
    c250:	00022469 00022469 00022469 00022469     i$..i$..i$..i$..
    c260:	00039dd9 00022469 00022469 00039df7     ....i$..i$......
    c270:	00022469 00022469 00022469 00022469     i$..i$..i$..i$..
    c280:	00022469 00022469 00022469 00022469     i$..i$..i$..i$..
    c290:	00022469 00022469 00022469 00022469     i$..i$..i$..i$..
    c2a0:	00022469 00022469 00022469 00022469     i$..i$..i$..i$..
    c2b0:	00022469 00022469 00022469 00022469     i$..i$..i$..i$..
    c2c0:	00022469 00022469 00022469 00022469     i$..i$..i$..i$..
    c2d0:	00022469 00022469 00022469 00022469     i$..i$..i$..i$..
    c2e0:	00022469 00022469 00022469 00022469     i$..i$..i$..i$..
    c2f0:	00022469 00022469 00022469 00022469     i$..i$..i$..i$..

Disassembly of section text:

0000c300 <memchr>:
    c300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c304:	2a10      	cmp	r2, #16
    c306:	db2b      	blt.n	c360 <memchr+0x60>
    c308:	f010 0f07 	tst.w	r0, #7
    c30c:	d008      	beq.n	c320 <memchr+0x20>
    c30e:	f810 3b01 	ldrb.w	r3, [r0], #1
    c312:	3a01      	subs	r2, #1
    c314:	428b      	cmp	r3, r1
    c316:	d02d      	beq.n	c374 <memchr+0x74>
    c318:	f010 0f07 	tst.w	r0, #7
    c31c:	b342      	cbz	r2, c370 <memchr+0x70>
    c31e:	d1f6      	bne.n	c30e <memchr+0xe>
    c320:	b4f0      	push	{r4, r5, r6, r7}
    c322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    c32a:	f022 0407 	bic.w	r4, r2, #7
    c32e:	f07f 0700 	mvns.w	r7, #0
    c332:	2300      	movs	r3, #0
    c334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    c338:	3c08      	subs	r4, #8
    c33a:	ea85 0501 	eor.w	r5, r5, r1
    c33e:	ea86 0601 	eor.w	r6, r6, r1
    c342:	fa85 f547 	uadd8	r5, r5, r7
    c346:	faa3 f587 	sel	r5, r3, r7
    c34a:	fa86 f647 	uadd8	r6, r6, r7
    c34e:	faa5 f687 	sel	r6, r5, r7
    c352:	b98e      	cbnz	r6, c378 <memchr+0x78>
    c354:	d1ee      	bne.n	c334 <memchr+0x34>
    c356:	bcf0      	pop	{r4, r5, r6, r7}
    c358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c35c:	f002 0207 	and.w	r2, r2, #7
    c360:	b132      	cbz	r2, c370 <memchr+0x70>
    c362:	f810 3b01 	ldrb.w	r3, [r0], #1
    c366:	3a01      	subs	r2, #1
    c368:	ea83 0301 	eor.w	r3, r3, r1
    c36c:	b113      	cbz	r3, c374 <memchr+0x74>
    c36e:	d1f8      	bne.n	c362 <memchr+0x62>
    c370:	2000      	movs	r0, #0
    c372:	4770      	bx	lr
    c374:	3801      	subs	r0, #1
    c376:	4770      	bx	lr
    c378:	2d00      	cmp	r5, #0
    c37a:	bf06      	itte	eq
    c37c:	4635      	moveq	r5, r6
    c37e:	3803      	subeq	r0, #3
    c380:	3807      	subne	r0, #7
    c382:	f015 0f01 	tst.w	r5, #1
    c386:	d107      	bne.n	c398 <memchr+0x98>
    c388:	3001      	adds	r0, #1
    c38a:	f415 7f80 	tst.w	r5, #256	; 0x100
    c38e:	bf02      	ittt	eq
    c390:	3001      	addeq	r0, #1
    c392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    c396:	3001      	addeq	r0, #1
    c398:	bcf0      	pop	{r4, r5, r6, r7}
    c39a:	3801      	subs	r0, #1
    c39c:	4770      	bx	lr
    c39e:	bf00      	nop

0000c3a0 <__aeabi_drsub>:
    c3a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c3a4:	e002      	b.n	c3ac <__adddf3>
    c3a6:	bf00      	nop

0000c3a8 <__aeabi_dsub>:
    c3a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c3ac <__adddf3>:
    c3ac:	b530      	push	{r4, r5, lr}
    c3ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c3b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c3b6:	ea94 0f05 	teq	r4, r5
    c3ba:	bf08      	it	eq
    c3bc:	ea90 0f02 	teqeq	r0, r2
    c3c0:	bf1f      	itttt	ne
    c3c2:	ea54 0c00 	orrsne.w	ip, r4, r0
    c3c6:	ea55 0c02 	orrsne.w	ip, r5, r2
    c3ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c3ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c3d2:	f000 80e2 	beq.w	c59a <__adddf3+0x1ee>
    c3d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c3da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c3de:	bfb8      	it	lt
    c3e0:	426d      	neglt	r5, r5
    c3e2:	dd0c      	ble.n	c3fe <__adddf3+0x52>
    c3e4:	442c      	add	r4, r5
    c3e6:	ea80 0202 	eor.w	r2, r0, r2
    c3ea:	ea81 0303 	eor.w	r3, r1, r3
    c3ee:	ea82 0000 	eor.w	r0, r2, r0
    c3f2:	ea83 0101 	eor.w	r1, r3, r1
    c3f6:	ea80 0202 	eor.w	r2, r0, r2
    c3fa:	ea81 0303 	eor.w	r3, r1, r3
    c3fe:	2d36      	cmp	r5, #54	; 0x36
    c400:	bf88      	it	hi
    c402:	bd30      	pophi	{r4, r5, pc}
    c404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c408:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c40c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c414:	d002      	beq.n	c41c <__adddf3+0x70>
    c416:	4240      	negs	r0, r0
    c418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c41c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c420:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c428:	d002      	beq.n	c430 <__adddf3+0x84>
    c42a:	4252      	negs	r2, r2
    c42c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c430:	ea94 0f05 	teq	r4, r5
    c434:	f000 80a7 	beq.w	c586 <__adddf3+0x1da>
    c438:	f1a4 0401 	sub.w	r4, r4, #1
    c43c:	f1d5 0e20 	rsbs	lr, r5, #32
    c440:	db0d      	blt.n	c45e <__adddf3+0xb2>
    c442:	fa02 fc0e 	lsl.w	ip, r2, lr
    c446:	fa22 f205 	lsr.w	r2, r2, r5
    c44a:	1880      	adds	r0, r0, r2
    c44c:	f141 0100 	adc.w	r1, r1, #0
    c450:	fa03 f20e 	lsl.w	r2, r3, lr
    c454:	1880      	adds	r0, r0, r2
    c456:	fa43 f305 	asr.w	r3, r3, r5
    c45a:	4159      	adcs	r1, r3
    c45c:	e00e      	b.n	c47c <__adddf3+0xd0>
    c45e:	f1a5 0520 	sub.w	r5, r5, #32
    c462:	f10e 0e20 	add.w	lr, lr, #32
    c466:	2a01      	cmp	r2, #1
    c468:	fa03 fc0e 	lsl.w	ip, r3, lr
    c46c:	bf28      	it	cs
    c46e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c472:	fa43 f305 	asr.w	r3, r3, r5
    c476:	18c0      	adds	r0, r0, r3
    c478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c47c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c480:	d507      	bpl.n	c492 <__adddf3+0xe6>
    c482:	f04f 0e00 	mov.w	lr, #0
    c486:	f1dc 0c00 	rsbs	ip, ip, #0
    c48a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c48e:	eb6e 0101 	sbc.w	r1, lr, r1
    c492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c496:	d31b      	bcc.n	c4d0 <__adddf3+0x124>
    c498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c49c:	d30c      	bcc.n	c4b8 <__adddf3+0x10c>
    c49e:	0849      	lsrs	r1, r1, #1
    c4a0:	ea5f 0030 	movs.w	r0, r0, rrx
    c4a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c4a8:	f104 0401 	add.w	r4, r4, #1
    c4ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c4b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c4b4:	f080 809a 	bcs.w	c5ec <__adddf3+0x240>
    c4b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c4bc:	bf08      	it	eq
    c4be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c4c2:	f150 0000 	adcs.w	r0, r0, #0
    c4c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c4ca:	ea41 0105 	orr.w	r1, r1, r5
    c4ce:	bd30      	pop	{r4, r5, pc}
    c4d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c4d4:	4140      	adcs	r0, r0
    c4d6:	eb41 0101 	adc.w	r1, r1, r1
    c4da:	3c01      	subs	r4, #1
    c4dc:	bf28      	it	cs
    c4de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c4e2:	d2e9      	bcs.n	c4b8 <__adddf3+0x10c>
    c4e4:	f091 0f00 	teq	r1, #0
    c4e8:	bf04      	itt	eq
    c4ea:	4601      	moveq	r1, r0
    c4ec:	2000      	moveq	r0, #0
    c4ee:	fab1 f381 	clz	r3, r1
    c4f2:	bf08      	it	eq
    c4f4:	3320      	addeq	r3, #32
    c4f6:	f1a3 030b 	sub.w	r3, r3, #11
    c4fa:	f1b3 0220 	subs.w	r2, r3, #32
    c4fe:	da0c      	bge.n	c51a <__adddf3+0x16e>
    c500:	320c      	adds	r2, #12
    c502:	dd08      	ble.n	c516 <__adddf3+0x16a>
    c504:	f102 0c14 	add.w	ip, r2, #20
    c508:	f1c2 020c 	rsb	r2, r2, #12
    c50c:	fa01 f00c 	lsl.w	r0, r1, ip
    c510:	fa21 f102 	lsr.w	r1, r1, r2
    c514:	e00c      	b.n	c530 <__adddf3+0x184>
    c516:	f102 0214 	add.w	r2, r2, #20
    c51a:	bfd8      	it	le
    c51c:	f1c2 0c20 	rsble	ip, r2, #32
    c520:	fa01 f102 	lsl.w	r1, r1, r2
    c524:	fa20 fc0c 	lsr.w	ip, r0, ip
    c528:	bfdc      	itt	le
    c52a:	ea41 010c 	orrle.w	r1, r1, ip
    c52e:	4090      	lslle	r0, r2
    c530:	1ae4      	subs	r4, r4, r3
    c532:	bfa2      	ittt	ge
    c534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c538:	4329      	orrge	r1, r5
    c53a:	bd30      	popge	{r4, r5, pc}
    c53c:	ea6f 0404 	mvn.w	r4, r4
    c540:	3c1f      	subs	r4, #31
    c542:	da1c      	bge.n	c57e <__adddf3+0x1d2>
    c544:	340c      	adds	r4, #12
    c546:	dc0e      	bgt.n	c566 <__adddf3+0x1ba>
    c548:	f104 0414 	add.w	r4, r4, #20
    c54c:	f1c4 0220 	rsb	r2, r4, #32
    c550:	fa20 f004 	lsr.w	r0, r0, r4
    c554:	fa01 f302 	lsl.w	r3, r1, r2
    c558:	ea40 0003 	orr.w	r0, r0, r3
    c55c:	fa21 f304 	lsr.w	r3, r1, r4
    c560:	ea45 0103 	orr.w	r1, r5, r3
    c564:	bd30      	pop	{r4, r5, pc}
    c566:	f1c4 040c 	rsb	r4, r4, #12
    c56a:	f1c4 0220 	rsb	r2, r4, #32
    c56e:	fa20 f002 	lsr.w	r0, r0, r2
    c572:	fa01 f304 	lsl.w	r3, r1, r4
    c576:	ea40 0003 	orr.w	r0, r0, r3
    c57a:	4629      	mov	r1, r5
    c57c:	bd30      	pop	{r4, r5, pc}
    c57e:	fa21 f004 	lsr.w	r0, r1, r4
    c582:	4629      	mov	r1, r5
    c584:	bd30      	pop	{r4, r5, pc}
    c586:	f094 0f00 	teq	r4, #0
    c58a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c58e:	bf06      	itte	eq
    c590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c594:	3401      	addeq	r4, #1
    c596:	3d01      	subne	r5, #1
    c598:	e74e      	b.n	c438 <__adddf3+0x8c>
    c59a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c59e:	bf18      	it	ne
    c5a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c5a4:	d029      	beq.n	c5fa <__adddf3+0x24e>
    c5a6:	ea94 0f05 	teq	r4, r5
    c5aa:	bf08      	it	eq
    c5ac:	ea90 0f02 	teqeq	r0, r2
    c5b0:	d005      	beq.n	c5be <__adddf3+0x212>
    c5b2:	ea54 0c00 	orrs.w	ip, r4, r0
    c5b6:	bf04      	itt	eq
    c5b8:	4619      	moveq	r1, r3
    c5ba:	4610      	moveq	r0, r2
    c5bc:	bd30      	pop	{r4, r5, pc}
    c5be:	ea91 0f03 	teq	r1, r3
    c5c2:	bf1e      	ittt	ne
    c5c4:	2100      	movne	r1, #0
    c5c6:	2000      	movne	r0, #0
    c5c8:	bd30      	popne	{r4, r5, pc}
    c5ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c5ce:	d105      	bne.n	c5dc <__adddf3+0x230>
    c5d0:	0040      	lsls	r0, r0, #1
    c5d2:	4149      	adcs	r1, r1
    c5d4:	bf28      	it	cs
    c5d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c5da:	bd30      	pop	{r4, r5, pc}
    c5dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c5e0:	bf3c      	itt	cc
    c5e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c5e6:	bd30      	popcc	{r4, r5, pc}
    c5e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c5ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c5f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c5f4:	f04f 0000 	mov.w	r0, #0
    c5f8:	bd30      	pop	{r4, r5, pc}
    c5fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c5fe:	bf1a      	itte	ne
    c600:	4619      	movne	r1, r3
    c602:	4610      	movne	r0, r2
    c604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c608:	bf1c      	itt	ne
    c60a:	460b      	movne	r3, r1
    c60c:	4602      	movne	r2, r0
    c60e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c612:	bf06      	itte	eq
    c614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c618:	ea91 0f03 	teqeq	r1, r3
    c61c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c620:	bd30      	pop	{r4, r5, pc}
    c622:	bf00      	nop

0000c624 <__aeabi_ui2d>:
    c624:	f090 0f00 	teq	r0, #0
    c628:	bf04      	itt	eq
    c62a:	2100      	moveq	r1, #0
    c62c:	4770      	bxeq	lr
    c62e:	b530      	push	{r4, r5, lr}
    c630:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c634:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c638:	f04f 0500 	mov.w	r5, #0
    c63c:	f04f 0100 	mov.w	r1, #0
    c640:	e750      	b.n	c4e4 <__adddf3+0x138>
    c642:	bf00      	nop

0000c644 <__aeabi_i2d>:
    c644:	f090 0f00 	teq	r0, #0
    c648:	bf04      	itt	eq
    c64a:	2100      	moveq	r1, #0
    c64c:	4770      	bxeq	lr
    c64e:	b530      	push	{r4, r5, lr}
    c650:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c654:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c65c:	bf48      	it	mi
    c65e:	4240      	negmi	r0, r0
    c660:	f04f 0100 	mov.w	r1, #0
    c664:	e73e      	b.n	c4e4 <__adddf3+0x138>
    c666:	bf00      	nop

0000c668 <__aeabi_f2d>:
    c668:	0042      	lsls	r2, r0, #1
    c66a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c66e:	ea4f 0131 	mov.w	r1, r1, rrx
    c672:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c676:	bf1f      	itttt	ne
    c678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c67c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c684:	4770      	bxne	lr
    c686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c68a:	bf08      	it	eq
    c68c:	4770      	bxeq	lr
    c68e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c692:	bf04      	itt	eq
    c694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c698:	4770      	bxeq	lr
    c69a:	b530      	push	{r4, r5, lr}
    c69c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c6a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c6a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c6a8:	e71c      	b.n	c4e4 <__adddf3+0x138>
    c6aa:	bf00      	nop

0000c6ac <__aeabi_ul2d>:
    c6ac:	ea50 0201 	orrs.w	r2, r0, r1
    c6b0:	bf08      	it	eq
    c6b2:	4770      	bxeq	lr
    c6b4:	b530      	push	{r4, r5, lr}
    c6b6:	f04f 0500 	mov.w	r5, #0
    c6ba:	e00a      	b.n	c6d2 <__aeabi_l2d+0x16>

0000c6bc <__aeabi_l2d>:
    c6bc:	ea50 0201 	orrs.w	r2, r0, r1
    c6c0:	bf08      	it	eq
    c6c2:	4770      	bxeq	lr
    c6c4:	b530      	push	{r4, r5, lr}
    c6c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c6ca:	d502      	bpl.n	c6d2 <__aeabi_l2d+0x16>
    c6cc:	4240      	negs	r0, r0
    c6ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c6d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c6d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c6da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c6de:	f43f aed8 	beq.w	c492 <__adddf3+0xe6>
    c6e2:	f04f 0203 	mov.w	r2, #3
    c6e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c6ea:	bf18      	it	ne
    c6ec:	3203      	addne	r2, #3
    c6ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c6f2:	bf18      	it	ne
    c6f4:	3203      	addne	r2, #3
    c6f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c6fa:	f1c2 0320 	rsb	r3, r2, #32
    c6fe:	fa00 fc03 	lsl.w	ip, r0, r3
    c702:	fa20 f002 	lsr.w	r0, r0, r2
    c706:	fa01 fe03 	lsl.w	lr, r1, r3
    c70a:	ea40 000e 	orr.w	r0, r0, lr
    c70e:	fa21 f102 	lsr.w	r1, r1, r2
    c712:	4414      	add	r4, r2
    c714:	e6bd      	b.n	c492 <__adddf3+0xe6>
    c716:	bf00      	nop

0000c718 <__aeabi_dmul>:
    c718:	b570      	push	{r4, r5, r6, lr}
    c71a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c71e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c726:	bf1d      	ittte	ne
    c728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c72c:	ea94 0f0c 	teqne	r4, ip
    c730:	ea95 0f0c 	teqne	r5, ip
    c734:	f000 f8de 	bleq	c8f4 <__aeabi_dmul+0x1dc>
    c738:	442c      	add	r4, r5
    c73a:	ea81 0603 	eor.w	r6, r1, r3
    c73e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c74a:	bf18      	it	ne
    c74c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c758:	d038      	beq.n	c7cc <__aeabi_dmul+0xb4>
    c75a:	fba0 ce02 	umull	ip, lr, r0, r2
    c75e:	f04f 0500 	mov.w	r5, #0
    c762:	fbe1 e502 	umlal	lr, r5, r1, r2
    c766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c76a:	fbe0 e503 	umlal	lr, r5, r0, r3
    c76e:	f04f 0600 	mov.w	r6, #0
    c772:	fbe1 5603 	umlal	r5, r6, r1, r3
    c776:	f09c 0f00 	teq	ip, #0
    c77a:	bf18      	it	ne
    c77c:	f04e 0e01 	orrne.w	lr, lr, #1
    c780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c78c:	d204      	bcs.n	c798 <__aeabi_dmul+0x80>
    c78e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c792:	416d      	adcs	r5, r5
    c794:	eb46 0606 	adc.w	r6, r6, r6
    c798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c79c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c7a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c7a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c7a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c7ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c7b0:	bf88      	it	hi
    c7b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c7b6:	d81e      	bhi.n	c7f6 <__aeabi_dmul+0xde>
    c7b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c7bc:	bf08      	it	eq
    c7be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c7c2:	f150 0000 	adcs.w	r0, r0, #0
    c7c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c7ca:	bd70      	pop	{r4, r5, r6, pc}
    c7cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c7d0:	ea46 0101 	orr.w	r1, r6, r1
    c7d4:	ea40 0002 	orr.w	r0, r0, r2
    c7d8:	ea81 0103 	eor.w	r1, r1, r3
    c7dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c7e0:	bfc2      	ittt	gt
    c7e2:	ebd4 050c 	rsbsgt	r5, r4, ip
    c7e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c7ea:	bd70      	popgt	{r4, r5, r6, pc}
    c7ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c7f0:	f04f 0e00 	mov.w	lr, #0
    c7f4:	3c01      	subs	r4, #1
    c7f6:	f300 80ab 	bgt.w	c950 <__aeabi_dmul+0x238>
    c7fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c7fe:	bfde      	ittt	le
    c800:	2000      	movle	r0, #0
    c802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c806:	bd70      	pople	{r4, r5, r6, pc}
    c808:	f1c4 0400 	rsb	r4, r4, #0
    c80c:	3c20      	subs	r4, #32
    c80e:	da35      	bge.n	c87c <__aeabi_dmul+0x164>
    c810:	340c      	adds	r4, #12
    c812:	dc1b      	bgt.n	c84c <__aeabi_dmul+0x134>
    c814:	f104 0414 	add.w	r4, r4, #20
    c818:	f1c4 0520 	rsb	r5, r4, #32
    c81c:	fa00 f305 	lsl.w	r3, r0, r5
    c820:	fa20 f004 	lsr.w	r0, r0, r4
    c824:	fa01 f205 	lsl.w	r2, r1, r5
    c828:	ea40 0002 	orr.w	r0, r0, r2
    c82c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c838:	fa21 f604 	lsr.w	r6, r1, r4
    c83c:	eb42 0106 	adc.w	r1, r2, r6
    c840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c844:	bf08      	it	eq
    c846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c84a:	bd70      	pop	{r4, r5, r6, pc}
    c84c:	f1c4 040c 	rsb	r4, r4, #12
    c850:	f1c4 0520 	rsb	r5, r4, #32
    c854:	fa00 f304 	lsl.w	r3, r0, r4
    c858:	fa20 f005 	lsr.w	r0, r0, r5
    c85c:	fa01 f204 	lsl.w	r2, r1, r4
    c860:	ea40 0002 	orr.w	r0, r0, r2
    c864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c86c:	f141 0100 	adc.w	r1, r1, #0
    c870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c874:	bf08      	it	eq
    c876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c87a:	bd70      	pop	{r4, r5, r6, pc}
    c87c:	f1c4 0520 	rsb	r5, r4, #32
    c880:	fa00 f205 	lsl.w	r2, r0, r5
    c884:	ea4e 0e02 	orr.w	lr, lr, r2
    c888:	fa20 f304 	lsr.w	r3, r0, r4
    c88c:	fa01 f205 	lsl.w	r2, r1, r5
    c890:	ea43 0302 	orr.w	r3, r3, r2
    c894:	fa21 f004 	lsr.w	r0, r1, r4
    c898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c89c:	fa21 f204 	lsr.w	r2, r1, r4
    c8a0:	ea20 0002 	bic.w	r0, r0, r2
    c8a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c8a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c8ac:	bf08      	it	eq
    c8ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c8b2:	bd70      	pop	{r4, r5, r6, pc}
    c8b4:	f094 0f00 	teq	r4, #0
    c8b8:	d10f      	bne.n	c8da <__aeabi_dmul+0x1c2>
    c8ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c8be:	0040      	lsls	r0, r0, #1
    c8c0:	eb41 0101 	adc.w	r1, r1, r1
    c8c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c8c8:	bf08      	it	eq
    c8ca:	3c01      	subeq	r4, #1
    c8cc:	d0f7      	beq.n	c8be <__aeabi_dmul+0x1a6>
    c8ce:	ea41 0106 	orr.w	r1, r1, r6
    c8d2:	f095 0f00 	teq	r5, #0
    c8d6:	bf18      	it	ne
    c8d8:	4770      	bxne	lr
    c8da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c8de:	0052      	lsls	r2, r2, #1
    c8e0:	eb43 0303 	adc.w	r3, r3, r3
    c8e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c8e8:	bf08      	it	eq
    c8ea:	3d01      	subeq	r5, #1
    c8ec:	d0f7      	beq.n	c8de <__aeabi_dmul+0x1c6>
    c8ee:	ea43 0306 	orr.w	r3, r3, r6
    c8f2:	4770      	bx	lr
    c8f4:	ea94 0f0c 	teq	r4, ip
    c8f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c8fc:	bf18      	it	ne
    c8fe:	ea95 0f0c 	teqne	r5, ip
    c902:	d00c      	beq.n	c91e <__aeabi_dmul+0x206>
    c904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c908:	bf18      	it	ne
    c90a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c90e:	d1d1      	bne.n	c8b4 <__aeabi_dmul+0x19c>
    c910:	ea81 0103 	eor.w	r1, r1, r3
    c914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c918:	f04f 0000 	mov.w	r0, #0
    c91c:	bd70      	pop	{r4, r5, r6, pc}
    c91e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c922:	bf06      	itte	eq
    c924:	4610      	moveq	r0, r2
    c926:	4619      	moveq	r1, r3
    c928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c92c:	d019      	beq.n	c962 <__aeabi_dmul+0x24a>
    c92e:	ea94 0f0c 	teq	r4, ip
    c932:	d102      	bne.n	c93a <__aeabi_dmul+0x222>
    c934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c938:	d113      	bne.n	c962 <__aeabi_dmul+0x24a>
    c93a:	ea95 0f0c 	teq	r5, ip
    c93e:	d105      	bne.n	c94c <__aeabi_dmul+0x234>
    c940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c944:	bf1c      	itt	ne
    c946:	4610      	movne	r0, r2
    c948:	4619      	movne	r1, r3
    c94a:	d10a      	bne.n	c962 <__aeabi_dmul+0x24a>
    c94c:	ea81 0103 	eor.w	r1, r1, r3
    c950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c95c:	f04f 0000 	mov.w	r0, #0
    c960:	bd70      	pop	{r4, r5, r6, pc}
    c962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c96a:	bd70      	pop	{r4, r5, r6, pc}

0000c96c <__aeabi_ddiv>:
    c96c:	b570      	push	{r4, r5, r6, lr}
    c96e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c97a:	bf1d      	ittte	ne
    c97c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c980:	ea94 0f0c 	teqne	r4, ip
    c984:	ea95 0f0c 	teqne	r5, ip
    c988:	f000 f8a7 	bleq	cada <__aeabi_ddiv+0x16e>
    c98c:	eba4 0405 	sub.w	r4, r4, r5
    c990:	ea81 0e03 	eor.w	lr, r1, r3
    c994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c998:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c99c:	f000 8088 	beq.w	cab0 <__aeabi_ddiv+0x144>
    c9a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c9a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c9a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c9ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c9b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c9b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c9b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c9bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c9c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c9c4:	429d      	cmp	r5, r3
    c9c6:	bf08      	it	eq
    c9c8:	4296      	cmpeq	r6, r2
    c9ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c9ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c9d2:	d202      	bcs.n	c9da <__aeabi_ddiv+0x6e>
    c9d4:	085b      	lsrs	r3, r3, #1
    c9d6:	ea4f 0232 	mov.w	r2, r2, rrx
    c9da:	1ab6      	subs	r6, r6, r2
    c9dc:	eb65 0503 	sbc.w	r5, r5, r3
    c9e0:	085b      	lsrs	r3, r3, #1
    c9e2:	ea4f 0232 	mov.w	r2, r2, rrx
    c9e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c9ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c9ee:	ebb6 0e02 	subs.w	lr, r6, r2
    c9f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    c9f6:	bf22      	ittt	cs
    c9f8:	1ab6      	subcs	r6, r6, r2
    c9fa:	4675      	movcs	r5, lr
    c9fc:	ea40 000c 	orrcs.w	r0, r0, ip
    ca00:	085b      	lsrs	r3, r3, #1
    ca02:	ea4f 0232 	mov.w	r2, r2, rrx
    ca06:	ebb6 0e02 	subs.w	lr, r6, r2
    ca0a:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca0e:	bf22      	ittt	cs
    ca10:	1ab6      	subcs	r6, r6, r2
    ca12:	4675      	movcs	r5, lr
    ca14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    ca18:	085b      	lsrs	r3, r3, #1
    ca1a:	ea4f 0232 	mov.w	r2, r2, rrx
    ca1e:	ebb6 0e02 	subs.w	lr, r6, r2
    ca22:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca26:	bf22      	ittt	cs
    ca28:	1ab6      	subcs	r6, r6, r2
    ca2a:	4675      	movcs	r5, lr
    ca2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    ca30:	085b      	lsrs	r3, r3, #1
    ca32:	ea4f 0232 	mov.w	r2, r2, rrx
    ca36:	ebb6 0e02 	subs.w	lr, r6, r2
    ca3a:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca3e:	bf22      	ittt	cs
    ca40:	1ab6      	subcs	r6, r6, r2
    ca42:	4675      	movcs	r5, lr
    ca44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ca48:	ea55 0e06 	orrs.w	lr, r5, r6
    ca4c:	d018      	beq.n	ca80 <__aeabi_ddiv+0x114>
    ca4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    ca52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    ca56:	ea4f 1606 	mov.w	r6, r6, lsl #4
    ca5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    ca5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    ca62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    ca66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    ca6a:	d1c0      	bne.n	c9ee <__aeabi_ddiv+0x82>
    ca6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ca70:	d10b      	bne.n	ca8a <__aeabi_ddiv+0x11e>
    ca72:	ea41 0100 	orr.w	r1, r1, r0
    ca76:	f04f 0000 	mov.w	r0, #0
    ca7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    ca7e:	e7b6      	b.n	c9ee <__aeabi_ddiv+0x82>
    ca80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ca84:	bf04      	itt	eq
    ca86:	4301      	orreq	r1, r0
    ca88:	2000      	moveq	r0, #0
    ca8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ca8e:	bf88      	it	hi
    ca90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ca94:	f63f aeaf 	bhi.w	c7f6 <__aeabi_dmul+0xde>
    ca98:	ebb5 0c03 	subs.w	ip, r5, r3
    ca9c:	bf04      	itt	eq
    ca9e:	ebb6 0c02 	subseq.w	ip, r6, r2
    caa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    caa6:	f150 0000 	adcs.w	r0, r0, #0
    caaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    caae:	bd70      	pop	{r4, r5, r6, pc}
    cab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    cab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    cab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    cabc:	bfc2      	ittt	gt
    cabe:	ebd4 050c 	rsbsgt	r5, r4, ip
    cac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cac6:	bd70      	popgt	{r4, r5, r6, pc}
    cac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cacc:	f04f 0e00 	mov.w	lr, #0
    cad0:	3c01      	subs	r4, #1
    cad2:	e690      	b.n	c7f6 <__aeabi_dmul+0xde>
    cad4:	ea45 0e06 	orr.w	lr, r5, r6
    cad8:	e68d      	b.n	c7f6 <__aeabi_dmul+0xde>
    cada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cade:	ea94 0f0c 	teq	r4, ip
    cae2:	bf08      	it	eq
    cae4:	ea95 0f0c 	teqeq	r5, ip
    cae8:	f43f af3b 	beq.w	c962 <__aeabi_dmul+0x24a>
    caec:	ea94 0f0c 	teq	r4, ip
    caf0:	d10a      	bne.n	cb08 <__aeabi_ddiv+0x19c>
    caf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    caf6:	f47f af34 	bne.w	c962 <__aeabi_dmul+0x24a>
    cafa:	ea95 0f0c 	teq	r5, ip
    cafe:	f47f af25 	bne.w	c94c <__aeabi_dmul+0x234>
    cb02:	4610      	mov	r0, r2
    cb04:	4619      	mov	r1, r3
    cb06:	e72c      	b.n	c962 <__aeabi_dmul+0x24a>
    cb08:	ea95 0f0c 	teq	r5, ip
    cb0c:	d106      	bne.n	cb1c <__aeabi_ddiv+0x1b0>
    cb0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cb12:	f43f aefd 	beq.w	c910 <__aeabi_dmul+0x1f8>
    cb16:	4610      	mov	r0, r2
    cb18:	4619      	mov	r1, r3
    cb1a:	e722      	b.n	c962 <__aeabi_dmul+0x24a>
    cb1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cb20:	bf18      	it	ne
    cb22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cb26:	f47f aec5 	bne.w	c8b4 <__aeabi_dmul+0x19c>
    cb2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    cb2e:	f47f af0d 	bne.w	c94c <__aeabi_dmul+0x234>
    cb32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    cb36:	f47f aeeb 	bne.w	c910 <__aeabi_dmul+0x1f8>
    cb3a:	e712      	b.n	c962 <__aeabi_dmul+0x24a>

0000cb3c <__aeabi_uldivmod>:
    cb3c:	b953      	cbnz	r3, cb54 <__aeabi_uldivmod+0x18>
    cb3e:	b94a      	cbnz	r2, cb54 <__aeabi_uldivmod+0x18>
    cb40:	2900      	cmp	r1, #0
    cb42:	bf08      	it	eq
    cb44:	2800      	cmpeq	r0, #0
    cb46:	bf1c      	itt	ne
    cb48:	f04f 31ff 	movne.w	r1, #4294967295
    cb4c:	f04f 30ff 	movne.w	r0, #4294967295
    cb50:	f000 b96c 	b.w	ce2c <__aeabi_idiv0>
    cb54:	f1ad 0c08 	sub.w	ip, sp, #8
    cb58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cb5c:	f000 f806 	bl	cb6c <__udivmoddi4>
    cb60:	f8dd e004 	ldr.w	lr, [sp, #4]
    cb64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb68:	b004      	add	sp, #16
    cb6a:	4770      	bx	lr

0000cb6c <__udivmoddi4>:
    cb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb70:	9e08      	ldr	r6, [sp, #32]
    cb72:	460d      	mov	r5, r1
    cb74:	4604      	mov	r4, r0
    cb76:	468e      	mov	lr, r1
    cb78:	2b00      	cmp	r3, #0
    cb7a:	f040 8082 	bne.w	cc82 <__udivmoddi4+0x116>
    cb7e:	428a      	cmp	r2, r1
    cb80:	4617      	mov	r7, r2
    cb82:	d946      	bls.n	cc12 <__udivmoddi4+0xa6>
    cb84:	fab2 f282 	clz	r2, r2
    cb88:	b14a      	cbz	r2, cb9e <__udivmoddi4+0x32>
    cb8a:	f1c2 0120 	rsb	r1, r2, #32
    cb8e:	fa05 f302 	lsl.w	r3, r5, r2
    cb92:	fa20 f101 	lsr.w	r1, r0, r1
    cb96:	4097      	lsls	r7, r2
    cb98:	ea41 0e03 	orr.w	lr, r1, r3
    cb9c:	4094      	lsls	r4, r2
    cb9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
    cba2:	0c23      	lsrs	r3, r4, #16
    cba4:	fbbe fcf8 	udiv	ip, lr, r8
    cba8:	b2b9      	uxth	r1, r7
    cbaa:	fb08 ee1c 	mls	lr, r8, ip, lr
    cbae:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    cbb2:	fb0c f001 	mul.w	r0, ip, r1
    cbb6:	4298      	cmp	r0, r3
    cbb8:	d90a      	bls.n	cbd0 <__udivmoddi4+0x64>
    cbba:	18fb      	adds	r3, r7, r3
    cbbc:	f10c 35ff 	add.w	r5, ip, #4294967295
    cbc0:	f080 8116 	bcs.w	cdf0 <__udivmoddi4+0x284>
    cbc4:	4298      	cmp	r0, r3
    cbc6:	f240 8113 	bls.w	cdf0 <__udivmoddi4+0x284>
    cbca:	f1ac 0c02 	sub.w	ip, ip, #2
    cbce:	443b      	add	r3, r7
    cbd0:	1a1b      	subs	r3, r3, r0
    cbd2:	b2a4      	uxth	r4, r4
    cbd4:	fbb3 f0f8 	udiv	r0, r3, r8
    cbd8:	fb08 3310 	mls	r3, r8, r0, r3
    cbdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cbe0:	fb00 f101 	mul.w	r1, r0, r1
    cbe4:	42a1      	cmp	r1, r4
    cbe6:	d909      	bls.n	cbfc <__udivmoddi4+0x90>
    cbe8:	193c      	adds	r4, r7, r4
    cbea:	f100 33ff 	add.w	r3, r0, #4294967295
    cbee:	f080 8101 	bcs.w	cdf4 <__udivmoddi4+0x288>
    cbf2:	42a1      	cmp	r1, r4
    cbf4:	f240 80fe 	bls.w	cdf4 <__udivmoddi4+0x288>
    cbf8:	3802      	subs	r0, #2
    cbfa:	443c      	add	r4, r7
    cbfc:	1a64      	subs	r4, r4, r1
    cbfe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cc02:	2100      	movs	r1, #0
    cc04:	b11e      	cbz	r6, cc0e <__udivmoddi4+0xa2>
    cc06:	40d4      	lsrs	r4, r2
    cc08:	2300      	movs	r3, #0
    cc0a:	e9c6 4300 	strd	r4, r3, [r6]
    cc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc12:	b902      	cbnz	r2, cc16 <__udivmoddi4+0xaa>
    cc14:	deff      	udf	#255	; 0xff
    cc16:	fab2 f282 	clz	r2, r2
    cc1a:	2a00      	cmp	r2, #0
    cc1c:	d14f      	bne.n	ccbe <__udivmoddi4+0x152>
    cc1e:	1bcb      	subs	r3, r1, r7
    cc20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cc24:	fa1f f887 	uxth.w	r8, r7
    cc28:	2101      	movs	r1, #1
    cc2a:	fbb3 fcfe 	udiv	ip, r3, lr
    cc2e:	0c25      	lsrs	r5, r4, #16
    cc30:	fb0e 331c 	mls	r3, lr, ip, r3
    cc34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    cc38:	fb08 f30c 	mul.w	r3, r8, ip
    cc3c:	42ab      	cmp	r3, r5
    cc3e:	d907      	bls.n	cc50 <__udivmoddi4+0xe4>
    cc40:	197d      	adds	r5, r7, r5
    cc42:	f10c 30ff 	add.w	r0, ip, #4294967295
    cc46:	d202      	bcs.n	cc4e <__udivmoddi4+0xe2>
    cc48:	42ab      	cmp	r3, r5
    cc4a:	f200 80e7 	bhi.w	ce1c <__udivmoddi4+0x2b0>
    cc4e:	4684      	mov	ip, r0
    cc50:	1aed      	subs	r5, r5, r3
    cc52:	b2a3      	uxth	r3, r4
    cc54:	fbb5 f0fe 	udiv	r0, r5, lr
    cc58:	fb0e 5510 	mls	r5, lr, r0, r5
    cc5c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    cc60:	fb08 f800 	mul.w	r8, r8, r0
    cc64:	45a0      	cmp	r8, r4
    cc66:	d907      	bls.n	cc78 <__udivmoddi4+0x10c>
    cc68:	193c      	adds	r4, r7, r4
    cc6a:	f100 33ff 	add.w	r3, r0, #4294967295
    cc6e:	d202      	bcs.n	cc76 <__udivmoddi4+0x10a>
    cc70:	45a0      	cmp	r8, r4
    cc72:	f200 80d7 	bhi.w	ce24 <__udivmoddi4+0x2b8>
    cc76:	4618      	mov	r0, r3
    cc78:	eba4 0408 	sub.w	r4, r4, r8
    cc7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cc80:	e7c0      	b.n	cc04 <__udivmoddi4+0x98>
    cc82:	428b      	cmp	r3, r1
    cc84:	d908      	bls.n	cc98 <__udivmoddi4+0x12c>
    cc86:	2e00      	cmp	r6, #0
    cc88:	f000 80af 	beq.w	cdea <__udivmoddi4+0x27e>
    cc8c:	2100      	movs	r1, #0
    cc8e:	e9c6 0500 	strd	r0, r5, [r6]
    cc92:	4608      	mov	r0, r1
    cc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc98:	fab3 f183 	clz	r1, r3
    cc9c:	2900      	cmp	r1, #0
    cc9e:	d14b      	bne.n	cd38 <__udivmoddi4+0x1cc>
    cca0:	42ab      	cmp	r3, r5
    cca2:	d302      	bcc.n	ccaa <__udivmoddi4+0x13e>
    cca4:	4282      	cmp	r2, r0
    cca6:	f200 80b7 	bhi.w	ce18 <__udivmoddi4+0x2ac>
    ccaa:	1a84      	subs	r4, r0, r2
    ccac:	eb65 0303 	sbc.w	r3, r5, r3
    ccb0:	2001      	movs	r0, #1
    ccb2:	469e      	mov	lr, r3
    ccb4:	2e00      	cmp	r6, #0
    ccb6:	d0aa      	beq.n	cc0e <__udivmoddi4+0xa2>
    ccb8:	e9c6 4e00 	strd	r4, lr, [r6]
    ccbc:	e7a7      	b.n	cc0e <__udivmoddi4+0xa2>
    ccbe:	f1c2 0c20 	rsb	ip, r2, #32
    ccc2:	fa01 f302 	lsl.w	r3, r1, r2
    ccc6:	4097      	lsls	r7, r2
    ccc8:	fa20 f00c 	lsr.w	r0, r0, ip
    cccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    ccd0:	fa21 fc0c 	lsr.w	ip, r1, ip
    ccd4:	4318      	orrs	r0, r3
    ccd6:	fbbc f1fe 	udiv	r1, ip, lr
    ccda:	0c05      	lsrs	r5, r0, #16
    ccdc:	fb0e cc11 	mls	ip, lr, r1, ip
    cce0:	fa1f f887 	uxth.w	r8, r7
    cce4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    cce8:	fb01 f308 	mul.w	r3, r1, r8
    ccec:	42ab      	cmp	r3, r5
    ccee:	fa04 f402 	lsl.w	r4, r4, r2
    ccf2:	d909      	bls.n	cd08 <__udivmoddi4+0x19c>
    ccf4:	197d      	adds	r5, r7, r5
    ccf6:	f101 3cff 	add.w	ip, r1, #4294967295
    ccfa:	f080 808b 	bcs.w	ce14 <__udivmoddi4+0x2a8>
    ccfe:	42ab      	cmp	r3, r5
    cd00:	f240 8088 	bls.w	ce14 <__udivmoddi4+0x2a8>
    cd04:	3902      	subs	r1, #2
    cd06:	443d      	add	r5, r7
    cd08:	1aeb      	subs	r3, r5, r3
    cd0a:	b285      	uxth	r5, r0
    cd0c:	fbb3 f0fe 	udiv	r0, r3, lr
    cd10:	fb0e 3310 	mls	r3, lr, r0, r3
    cd14:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    cd18:	fb00 f308 	mul.w	r3, r0, r8
    cd1c:	42ab      	cmp	r3, r5
    cd1e:	d907      	bls.n	cd30 <__udivmoddi4+0x1c4>
    cd20:	197d      	adds	r5, r7, r5
    cd22:	f100 3cff 	add.w	ip, r0, #4294967295
    cd26:	d271      	bcs.n	ce0c <__udivmoddi4+0x2a0>
    cd28:	42ab      	cmp	r3, r5
    cd2a:	d96f      	bls.n	ce0c <__udivmoddi4+0x2a0>
    cd2c:	3802      	subs	r0, #2
    cd2e:	443d      	add	r5, r7
    cd30:	1aeb      	subs	r3, r5, r3
    cd32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    cd36:	e778      	b.n	cc2a <__udivmoddi4+0xbe>
    cd38:	f1c1 0c20 	rsb	ip, r1, #32
    cd3c:	408b      	lsls	r3, r1
    cd3e:	fa22 f70c 	lsr.w	r7, r2, ip
    cd42:	431f      	orrs	r7, r3
    cd44:	fa20 f40c 	lsr.w	r4, r0, ip
    cd48:	fa05 f301 	lsl.w	r3, r5, r1
    cd4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cd50:	fa25 f50c 	lsr.w	r5, r5, ip
    cd54:	431c      	orrs	r4, r3
    cd56:	0c23      	lsrs	r3, r4, #16
    cd58:	fbb5 f9fe 	udiv	r9, r5, lr
    cd5c:	fa1f f887 	uxth.w	r8, r7
    cd60:	fb0e 5519 	mls	r5, lr, r9, r5
    cd64:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    cd68:	fb09 fa08 	mul.w	sl, r9, r8
    cd6c:	45aa      	cmp	sl, r5
    cd6e:	fa02 f201 	lsl.w	r2, r2, r1
    cd72:	fa00 f301 	lsl.w	r3, r0, r1
    cd76:	d908      	bls.n	cd8a <__udivmoddi4+0x21e>
    cd78:	197d      	adds	r5, r7, r5
    cd7a:	f109 30ff 	add.w	r0, r9, #4294967295
    cd7e:	d247      	bcs.n	ce10 <__udivmoddi4+0x2a4>
    cd80:	45aa      	cmp	sl, r5
    cd82:	d945      	bls.n	ce10 <__udivmoddi4+0x2a4>
    cd84:	f1a9 0902 	sub.w	r9, r9, #2
    cd88:	443d      	add	r5, r7
    cd8a:	eba5 050a 	sub.w	r5, r5, sl
    cd8e:	b2a4      	uxth	r4, r4
    cd90:	fbb5 f0fe 	udiv	r0, r5, lr
    cd94:	fb0e 5510 	mls	r5, lr, r0, r5
    cd98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    cd9c:	fb00 f808 	mul.w	r8, r0, r8
    cda0:	45a0      	cmp	r8, r4
    cda2:	d907      	bls.n	cdb4 <__udivmoddi4+0x248>
    cda4:	193c      	adds	r4, r7, r4
    cda6:	f100 35ff 	add.w	r5, r0, #4294967295
    cdaa:	d22d      	bcs.n	ce08 <__udivmoddi4+0x29c>
    cdac:	45a0      	cmp	r8, r4
    cdae:	d92b      	bls.n	ce08 <__udivmoddi4+0x29c>
    cdb0:	3802      	subs	r0, #2
    cdb2:	443c      	add	r4, r7
    cdb4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    cdb8:	eba4 0408 	sub.w	r4, r4, r8
    cdbc:	fba0 8902 	umull	r8, r9, r0, r2
    cdc0:	454c      	cmp	r4, r9
    cdc2:	46c6      	mov	lr, r8
    cdc4:	464d      	mov	r5, r9
    cdc6:	d319      	bcc.n	cdfc <__udivmoddi4+0x290>
    cdc8:	d016      	beq.n	cdf8 <__udivmoddi4+0x28c>
    cdca:	b15e      	cbz	r6, cde4 <__udivmoddi4+0x278>
    cdcc:	ebb3 020e 	subs.w	r2, r3, lr
    cdd0:	eb64 0405 	sbc.w	r4, r4, r5
    cdd4:	fa04 fc0c 	lsl.w	ip, r4, ip
    cdd8:	40ca      	lsrs	r2, r1
    cdda:	ea4c 0202 	orr.w	r2, ip, r2
    cdde:	40cc      	lsrs	r4, r1
    cde0:	e9c6 2400 	strd	r2, r4, [r6]
    cde4:	2100      	movs	r1, #0
    cde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cdea:	4631      	mov	r1, r6
    cdec:	4630      	mov	r0, r6
    cdee:	e70e      	b.n	cc0e <__udivmoddi4+0xa2>
    cdf0:	46ac      	mov	ip, r5
    cdf2:	e6ed      	b.n	cbd0 <__udivmoddi4+0x64>
    cdf4:	4618      	mov	r0, r3
    cdf6:	e701      	b.n	cbfc <__udivmoddi4+0x90>
    cdf8:	4543      	cmp	r3, r8
    cdfa:	d2e6      	bcs.n	cdca <__udivmoddi4+0x25e>
    cdfc:	ebb8 0e02 	subs.w	lr, r8, r2
    ce00:	eb69 0507 	sbc.w	r5, r9, r7
    ce04:	3801      	subs	r0, #1
    ce06:	e7e0      	b.n	cdca <__udivmoddi4+0x25e>
    ce08:	4628      	mov	r0, r5
    ce0a:	e7d3      	b.n	cdb4 <__udivmoddi4+0x248>
    ce0c:	4660      	mov	r0, ip
    ce0e:	e78f      	b.n	cd30 <__udivmoddi4+0x1c4>
    ce10:	4681      	mov	r9, r0
    ce12:	e7ba      	b.n	cd8a <__udivmoddi4+0x21e>
    ce14:	4661      	mov	r1, ip
    ce16:	e777      	b.n	cd08 <__udivmoddi4+0x19c>
    ce18:	4608      	mov	r0, r1
    ce1a:	e74b      	b.n	ccb4 <__udivmoddi4+0x148>
    ce1c:	f1ac 0c02 	sub.w	ip, ip, #2
    ce20:	443d      	add	r5, r7
    ce22:	e715      	b.n	cc50 <__udivmoddi4+0xe4>
    ce24:	3802      	subs	r0, #2
    ce26:	443c      	add	r4, r7
    ce28:	e726      	b.n	cc78 <__udivmoddi4+0x10c>
    ce2a:	bf00      	nop

0000ce2c <__aeabi_idiv0>:
    ce2c:	4770      	bx	lr
    ce2e:	bf00      	nop

0000ce30 <__gedf2>:
    ce30:	f04f 3cff 	mov.w	ip, #4294967295
    ce34:	e006      	b.n	ce44 <__cmpdf2+0x4>
    ce36:	bf00      	nop

0000ce38 <__ledf2>:
    ce38:	f04f 0c01 	mov.w	ip, #1
    ce3c:	e002      	b.n	ce44 <__cmpdf2+0x4>
    ce3e:	bf00      	nop

0000ce40 <__cmpdf2>:
    ce40:	f04f 0c01 	mov.w	ip, #1
    ce44:	f84d cd04 	str.w	ip, [sp, #-4]!
    ce48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ce4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ce50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ce54:	bf18      	it	ne
    ce56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    ce5a:	d01b      	beq.n	ce94 <__cmpdf2+0x54>
    ce5c:	b001      	add	sp, #4
    ce5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    ce62:	bf0c      	ite	eq
    ce64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    ce68:	ea91 0f03 	teqne	r1, r3
    ce6c:	bf02      	ittt	eq
    ce6e:	ea90 0f02 	teqeq	r0, r2
    ce72:	2000      	moveq	r0, #0
    ce74:	4770      	bxeq	lr
    ce76:	f110 0f00 	cmn.w	r0, #0
    ce7a:	ea91 0f03 	teq	r1, r3
    ce7e:	bf58      	it	pl
    ce80:	4299      	cmppl	r1, r3
    ce82:	bf08      	it	eq
    ce84:	4290      	cmpeq	r0, r2
    ce86:	bf2c      	ite	cs
    ce88:	17d8      	asrcs	r0, r3, #31
    ce8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    ce8e:	f040 0001 	orr.w	r0, r0, #1
    ce92:	4770      	bx	lr
    ce94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ce98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ce9c:	d102      	bne.n	cea4 <__cmpdf2+0x64>
    ce9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cea2:	d107      	bne.n	ceb4 <__cmpdf2+0x74>
    cea4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cea8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ceac:	d1d6      	bne.n	ce5c <__cmpdf2+0x1c>
    ceae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    ceb2:	d0d3      	beq.n	ce5c <__cmpdf2+0x1c>
    ceb4:	f85d 0b04 	ldr.w	r0, [sp], #4
    ceb8:	4770      	bx	lr
    ceba:	bf00      	nop

0000cebc <__aeabi_cdrcmple>:
    cebc:	4684      	mov	ip, r0
    cebe:	4610      	mov	r0, r2
    cec0:	4662      	mov	r2, ip
    cec2:	468c      	mov	ip, r1
    cec4:	4619      	mov	r1, r3
    cec6:	4663      	mov	r3, ip
    cec8:	e000      	b.n	cecc <__aeabi_cdcmpeq>
    ceca:	bf00      	nop

0000cecc <__aeabi_cdcmpeq>:
    cecc:	b501      	push	{r0, lr}
    cece:	f7ff ffb7 	bl	ce40 <__cmpdf2>
    ced2:	2800      	cmp	r0, #0
    ced4:	bf48      	it	mi
    ced6:	f110 0f00 	cmnmi.w	r0, #0
    ceda:	bd01      	pop	{r0, pc}

0000cedc <__aeabi_dcmpeq>:
    cedc:	f84d ed08 	str.w	lr, [sp, #-8]!
    cee0:	f7ff fff4 	bl	cecc <__aeabi_cdcmpeq>
    cee4:	bf0c      	ite	eq
    cee6:	2001      	moveq	r0, #1
    cee8:	2000      	movne	r0, #0
    ceea:	f85d fb08 	ldr.w	pc, [sp], #8
    ceee:	bf00      	nop

0000cef0 <__aeabi_dcmplt>:
    cef0:	f84d ed08 	str.w	lr, [sp, #-8]!
    cef4:	f7ff ffea 	bl	cecc <__aeabi_cdcmpeq>
    cef8:	bf34      	ite	cc
    cefa:	2001      	movcc	r0, #1
    cefc:	2000      	movcs	r0, #0
    cefe:	f85d fb08 	ldr.w	pc, [sp], #8
    cf02:	bf00      	nop

0000cf04 <__aeabi_dcmple>:
    cf04:	f84d ed08 	str.w	lr, [sp, #-8]!
    cf08:	f7ff ffe0 	bl	cecc <__aeabi_cdcmpeq>
    cf0c:	bf94      	ite	ls
    cf0e:	2001      	movls	r0, #1
    cf10:	2000      	movhi	r0, #0
    cf12:	f85d fb08 	ldr.w	pc, [sp], #8
    cf16:	bf00      	nop

0000cf18 <__aeabi_dcmpge>:
    cf18:	f84d ed08 	str.w	lr, [sp, #-8]!
    cf1c:	f7ff ffce 	bl	cebc <__aeabi_cdrcmple>
    cf20:	bf94      	ite	ls
    cf22:	2001      	movls	r0, #1
    cf24:	2000      	movhi	r0, #0
    cf26:	f85d fb08 	ldr.w	pc, [sp], #8
    cf2a:	bf00      	nop

0000cf2c <__aeabi_dcmpgt>:
    cf2c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cf30:	f7ff ffc4 	bl	cebc <__aeabi_cdrcmple>
    cf34:	bf34      	ite	cc
    cf36:	2001      	movcc	r0, #1
    cf38:	2000      	movcs	r0, #0
    cf3a:	f85d fb08 	ldr.w	pc, [sp], #8
    cf3e:	bf00      	nop

0000cf40 <__aeabi_dcmpun>:
    cf40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cf44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cf48:	d102      	bne.n	cf50 <__aeabi_dcmpun+0x10>
    cf4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cf4e:	d10a      	bne.n	cf66 <__aeabi_dcmpun+0x26>
    cf50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cf54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cf58:	d102      	bne.n	cf60 <__aeabi_dcmpun+0x20>
    cf5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cf5e:	d102      	bne.n	cf66 <__aeabi_dcmpun+0x26>
    cf60:	f04f 0000 	mov.w	r0, #0
    cf64:	4770      	bx	lr
    cf66:	f04f 0001 	mov.w	r0, #1
    cf6a:	4770      	bx	lr

0000cf6c <__aeabi_d2iz>:
    cf6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    cf70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    cf74:	d215      	bcs.n	cfa2 <__aeabi_d2iz+0x36>
    cf76:	d511      	bpl.n	cf9c <__aeabi_d2iz+0x30>
    cf78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    cf7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cf80:	d912      	bls.n	cfa8 <__aeabi_d2iz+0x3c>
    cf82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cf86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cf8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cf8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cf92:	fa23 f002 	lsr.w	r0, r3, r2
    cf96:	bf18      	it	ne
    cf98:	4240      	negne	r0, r0
    cf9a:	4770      	bx	lr
    cf9c:	f04f 0000 	mov.w	r0, #0
    cfa0:	4770      	bx	lr
    cfa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    cfa6:	d105      	bne.n	cfb4 <__aeabi_d2iz+0x48>
    cfa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    cfac:	bf08      	it	eq
    cfae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    cfb2:	4770      	bx	lr
    cfb4:	f04f 0000 	mov.w	r0, #0
    cfb8:	4770      	bx	lr
    cfba:	bf00      	nop

0000cfbc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cfbe:	4615      	mov	r5, r2
    cfc0:	4a0a      	ldr	r2, [pc, #40]	; (cfec <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    cfc2:	461c      	mov	r4, r3
    cfc4:	6856      	ldr	r6, [r2, #4]
    cfc6:	b12e      	cbz	r6, cfd4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    cfc8:	b001      	add	sp, #4
    cfca:	462a      	mov	r2, r5
    cfcc:	46b4      	mov	ip, r6
    cfce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    cfd2:	4760      	bx	ip
    cfd4:	2000      	movs	r0, #0
    cfd6:	f88d 0000 	strb.w	r0, [sp]
    cfda:	4668      	mov	r0, sp
    cfdc:	f00b f9ec 	bl	183b8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    cfe0:	f89d 0000 	ldrb.w	r0, [sp]
    cfe4:	1a28      	subs	r0, r5, r0
    cfe6:	7020      	strb	r0, [r4, #0]
    cfe8:	2000      	movs	r0, #0
    cfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cfec:	20000000 	.word	0x20000000
    cff0:	2800      	cmp	r0, #0
    cff2:	d019      	beq.n	d028 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6c>
    cff4:	7803      	ldrb	r3, [r0, #0]
    cff6:	4913      	ldr	r1, [pc, #76]	; (d044 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x88>)
    cff8:	4a13      	ldr	r2, [pc, #76]	; (d048 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x8c>)
    cffa:	b113      	cbz	r3, d002 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x46>
    cffc:	2b01      	cmp	r3, #1
    cffe:	d00e      	beq.n	d01e <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x62>
    d000:	e011      	b.n	d026 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    d002:	7903      	ldrb	r3, [r0, #4]
    d004:	2b01      	cmp	r3, #1
    d006:	d000      	beq.n	d00a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x4e>
    d008:	b96b      	cbnz	r3, d026 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    d00a:	7943      	ldrb	r3, [r0, #5]
    d00c:	b10b      	cbz	r3, d012 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x56>
    d00e:	2b01      	cmp	r3, #1
    d010:	d109      	bne.n	d026 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    d012:	6883      	ldr	r3, [r0, #8]
    d014:	3b64      	subs	r3, #100	; 0x64
    d016:	428b      	cmp	r3, r1
    d018:	d205      	bcs.n	d026 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    d01a:	68c0      	ldr	r0, [r0, #12]
    d01c:	e00e      	b.n	d03c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x80>
    d01e:	7903      	ldrb	r3, [r0, #4]
    d020:	2b01      	cmp	r3, #1
    d022:	d002      	beq.n	d02a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6e>
    d024:	b10b      	cbz	r3, d02a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6e>
    d026:	2000      	movs	r0, #0
    d028:	4770      	bx	lr
    d02a:	7943      	ldrb	r3, [r0, #5]
    d02c:	b10b      	cbz	r3, d032 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x76>
    d02e:	2b01      	cmp	r3, #1
    d030:	d1f9      	bne.n	d026 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    d032:	68c3      	ldr	r3, [r0, #12]
    d034:	3b64      	subs	r3, #100	; 0x64
    d036:	428b      	cmp	r3, r1
    d038:	d2f5      	bcs.n	d026 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    d03a:	6880      	ldr	r0, [r0, #8]
    d03c:	4290      	cmp	r0, r2
    d03e:	d8f2      	bhi.n	d026 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    d040:	2001      	movs	r0, #1
    d042:	4770      	bx	lr
    d044:	0001863d 	.word	0x0001863d
    d048:	07a11fff 	.word	0x07a11fff
    d04c:	b510      	push	{r4, lr}
    d04e:	4c05      	ldr	r4, [pc, #20]	; (d064 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0xa8>)
    d050:	6820      	ldr	r0, [r4, #0]
    d052:	b110      	cbz	r0, d05a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x9e>
    d054:	4780      	blx	r0
    d056:	2000      	movs	r0, #0
    d058:	6020      	str	r0, [r4, #0]
    d05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d05e:	f001 bfd5 	b.w	f00c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    d062:	0000      	.short	0x0000
    d064:	20000008 	.word	0x20000008

0000d068 <mpsl_timeslot_session_open>:
    d068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d06c:	460e      	mov	r6, r1
    d06e:	0005      	movs	r5, r0
    d070:	d004      	beq.n	d07c <mpsl_timeslot_session_open+0x14>
    d072:	f000 f845 	bl	d100 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d076:	4607      	mov	r7, r0
    d078:	2400      	movs	r4, #0
    d07a:	e00a      	b.n	d092 <mpsl_timeslot_session_open+0x2a>
    d07c:	f06f 0015 	mvn.w	r0, #21
    d080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d084:	4620      	mov	r0, r4
    d086:	f000 f841 	bl	d10c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d08a:	7880      	ldrb	r0, [r0, #2]
    d08c:	b138      	cbz	r0, d09e <mpsl_timeslot_session_open+0x36>
    d08e:	1c64      	adds	r4, r4, #1
    d090:	b2e4      	uxtb	r4, r4
    d092:	42bc      	cmp	r4, r7
    d094:	d3f6      	bcc.n	d084 <mpsl_timeslot_session_open+0x1c>
    d096:	bf00      	nop
    d098:	f06f 000b 	mvn.w	r0, #11
    d09c:	e7f0      	b.n	d080 <mpsl_timeslot_session_open+0x18>
    d09e:	4627      	mov	r7, r4
    d0a0:	2cff      	cmp	r4, #255	; 0xff
    d0a2:	d0f9      	beq.n	d098 <mpsl_timeslot_session_open+0x30>
    d0a4:	4620      	mov	r0, r4
    d0a6:	f000 f831 	bl	d10c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d0aa:	4604      	mov	r4, r0
    d0ac:	f00b fb27 	bl	186fe <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    d0b0:	7127      	strb	r7, [r4, #4]
    d0b2:	4621      	mov	r1, r4
    d0b4:	4807      	ldr	r0, [pc, #28]	; (d0d4 <mpsl_timeslot_session_open+0x6c>)
    d0b6:	f001 ff81 	bl	efbc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    d0ba:	70e0      	strb	r0, [r4, #3]
    d0bc:	2820      	cmp	r0, #32
    d0be:	d005      	beq.n	d0cc <mpsl_timeslot_session_open+0x64>
    d0c0:	2001      	movs	r0, #1
    d0c2:	60a5      	str	r5, [r4, #8]
    d0c4:	70a0      	strb	r0, [r4, #2]
    d0c6:	7037      	strb	r7, [r6, #0]
    d0c8:	2000      	movs	r0, #0
    d0ca:	e7d9      	b.n	d080 <mpsl_timeslot_session_open+0x18>
    d0cc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d0d0:	e7d6      	b.n	d080 <mpsl_timeslot_session_open+0x18>
    d0d2:	0000      	.short	0x0000
    d0d4:	0001845f 	.word	0x0001845f

0000d0d8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    d0d8:	b510      	push	{r4, lr}
    d0da:	0782      	lsls	r2, r0, #30
    d0dc:	d002      	beq.n	d0e4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    d0de:	f06f 000d 	mvn.w	r0, #13
    d0e2:	bd10      	pop	{r4, pc}
    d0e4:	4a05      	ldr	r2, [pc, #20]	; (d0fc <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    d0e6:	7011      	strb	r1, [r2, #0]
    d0e8:	6050      	str	r0, [r2, #4]
    d0ea:	b128      	cbz	r0, d0f8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    d0ec:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    d0f0:	008a      	lsls	r2, r1, #2
    d0f2:	2100      	movs	r1, #0
    d0f4:	f00b fd89 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0f8:	2000      	movs	r0, #0
    d0fa:	bd10      	pop	{r4, pc}
    d0fc:	2000000c 	.word	0x2000000c

0000d100 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    d100:	4801      	ldr	r0, [pc, #4]	; (d108 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    d102:	7800      	ldrb	r0, [r0, #0]
    d104:	4770      	bx	lr
    d106:	0000      	.short	0x0000
    d108:	2000000c 	.word	0x2000000c

0000d10c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    d10c:	4905      	ldr	r1, [pc, #20]	; (d124 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    d10e:	780a      	ldrb	r2, [r1, #0]
    d110:	4290      	cmp	r0, r2
    d112:	d301      	bcc.n	d118 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    d114:	2000      	movs	r0, #0
    d116:	4770      	bx	lr
    d118:	6849      	ldr	r1, [r1, #4]
    d11a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    d11e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    d122:	4770      	bx	lr
    d124:	2000000c 	.word	0x2000000c
    d128:	b570      	push	{r4, r5, r6, lr}
    d12a:	4605      	mov	r5, r0
    d12c:	2a20      	cmp	r2, #32
    d12e:	d027      	beq.n	d180 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    d130:	4819      	ldr	r0, [pc, #100]	; (d198 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    d132:	4c1a      	ldr	r4, [pc, #104]	; (d19c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    d134:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    d138:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    d13c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d140:	2920      	cmp	r1, #32
    d142:	d022      	beq.n	d18a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    d144:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    d148:	7840      	ldrb	r0, [r0, #1]
    d14a:	784c      	ldrb	r4, [r1, #1]
    d14c:	7048      	strb	r0, [r1, #1]
    d14e:	4620      	mov	r0, r4
    d150:	4601      	mov	r1, r0
    d152:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    d156:	4291      	cmp	r1, r2
    d158:	7005      	strb	r5, [r0, #0]
    d15a:	7840      	ldrb	r0, [r0, #1]
    d15c:	d1f8      	bne.n	d150 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    d15e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    d162:	2a20      	cmp	r2, #32
    d164:	bf1a      	itte	ne
    d166:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    d16a:	7054      	strbne	r4, [r2, #1]
    d16c:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    d170:	2220      	movs	r2, #32
    d172:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    d176:	f88c 2001 	strb.w	r2, [ip, #1]
    d17a:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    d17e:	bd70      	pop	{r4, r5, r6, pc}
    d180:	f240 217e 	movw	r1, #638	; 0x27e
    d184:	2070      	movs	r0, #112	; 0x70
    d186:	f003 f999 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d18a:	f893 4020 	ldrb.w	r4, [r3, #32]
    d18e:	7840      	ldrb	r0, [r0, #1]
    d190:	f883 0020 	strb.w	r0, [r3, #32]
    d194:	e7db      	b.n	d14e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    d196:	0000      	.short	0x0000
    d198:	20001284 	.word	0x20001284
    d19c:	20001304 	.word	0x20001304
    d1a0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1a4:	b085      	sub	sp, #20
    d1a6:	4615      	mov	r5, r2
    d1a8:	460c      	mov	r4, r1
    d1aa:	f002 f8ef 	bl	f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d1ae:	4428      	add	r0, r5
    d1b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d1b4:	9002      	str	r0, [sp, #8]
    d1b6:	6821      	ldr	r1, [r4, #0]
    d1b8:	1a08      	subs	r0, r1, r0
    d1ba:	0200      	lsls	r0, r0, #8
    d1bc:	17c1      	asrs	r1, r0, #31
    d1be:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d1c2:	1200      	asrs	r0, r0, #8
    d1c4:	2800      	cmp	r0, #0
    d1c6:	f300 80d5 	bgt.w	d374 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    d1ca:	48ac      	ldr	r0, [pc, #688]	; (d47c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    d1cc:	9f08      	ldr	r7, [sp, #32]
    d1ce:	4eac      	ldr	r6, [pc, #688]	; (d480 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    d1d0:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    d1d4:	9003      	str	r0, [sp, #12]
    d1d6:	f890 5020 	ldrb.w	r5, [r0, #32]
    d1da:	2020      	movs	r0, #32
    d1dc:	46e9      	mov	r9, sp
    d1de:	f10d 0804 	add.w	r8, sp, #4
    d1e2:	f88d 0000 	strb.w	r0, [sp]
    d1e6:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    d1ea:	2d20      	cmp	r5, #32
    d1ec:	bf18      	it	ne
    d1ee:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    d1f2:	d025      	beq.n	d240 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    d1f4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    d1f8:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    d1fc:	6822      	ldr	r2, [r4, #0]
    d1fe:	68c1      	ldr	r1, [r0, #12]
    d200:	1a51      	subs	r1, r2, r1
    d202:	0209      	lsls	r1, r1, #8
    d204:	17ca      	asrs	r2, r1, #31
    d206:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d20a:	3008      	adds	r0, #8
    d20c:	1209      	asrs	r1, r1, #8
    d20e:	d417      	bmi.n	d240 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    d210:	8961      	ldrh	r1, [r4, #10]
    d212:	b171      	cbz	r1, d232 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    d214:	8941      	ldrh	r1, [r0, #10]
    d216:	b961      	cbnz	r1, d232 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    d218:	f000 fdb4 	bl	dd84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d21c:	f002 f8b6 	bl	f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d220:	6821      	ldr	r1, [r4, #0]
    d222:	1a08      	subs	r0, r1, r0
    d224:	0200      	lsls	r0, r0, #8
    d226:	17c1      	asrs	r1, r0, #31
    d228:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d22c:	1200      	asrs	r0, r0, #8
    d22e:	2833      	cmp	r0, #51	; 0x33
    d230:	db06      	blt.n	d240 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    d232:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d236:	f889 5000 	strb.w	r5, [r9]
    d23a:	7845      	ldrb	r5, [r0, #1]
    d23c:	2d20      	cmp	r5, #32
    d23e:	d1d9      	bne.n	d1f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    d240:	f899 0000 	ldrb.w	r0, [r9]
    d244:	f888 0000 	strb.w	r0, [r8]
    d248:	46a1      	mov	r9, r4
    d24a:	2d20      	cmp	r5, #32
    d24c:	bf1c      	itt	ne
    d24e:	488d      	ldrne	r0, [pc, #564]	; (d484 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    d250:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    d254:	f000 810e 	beq.w	d474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d258:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    d25c:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    d260:	f8d9 2004 	ldr.w	r2, [r9, #4]
    d264:	f8da 1008 	ldr.w	r1, [sl, #8]
    d268:	4648      	mov	r0, r9
    d26a:	1a89      	subs	r1, r1, r2
    d26c:	0209      	lsls	r1, r1, #8
    d26e:	17ca      	asrs	r2, r1, #31
    d270:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d274:	f10a 0708 	add.w	r7, sl, #8
    d278:	1209      	asrs	r1, r1, #8
    d27a:	d415      	bmi.n	d2a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    d27c:	8979      	ldrh	r1, [r7, #10]
    d27e:	2900      	cmp	r1, #0
    d280:	f000 80f8 	beq.w	d474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d284:	8941      	ldrh	r1, [r0, #10]
    d286:	2900      	cmp	r1, #0
    d288:	f040 80f4 	bne.w	d474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d28c:	f000 fd7a 	bl	dd84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d290:	f002 f87c 	bl	f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d294:	6839      	ldr	r1, [r7, #0]
    d296:	1a08      	subs	r0, r1, r0
    d298:	0200      	lsls	r0, r0, #8
    d29a:	17c1      	asrs	r1, r0, #31
    d29c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d2a0:	1200      	asrs	r0, r0, #8
    d2a2:	2833      	cmp	r0, #51	; 0x33
    d2a4:	f280 80e6 	bge.w	d474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d2a8:	f888 5000 	strb.w	r5, [r8]
    d2ac:	f89a 1014 	ldrb.w	r1, [sl, #20]
    d2b0:	f899 000c 	ldrb.w	r0, [r9, #12]
    d2b4:	4281      	cmp	r1, r0
    d2b6:	d906      	bls.n	d2c6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    d2b8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d2bc:	7845      	ldrb	r5, [r0, #1]
    d2be:	2d20      	cmp	r5, #32
    d2c0:	d1ca      	bne.n	d258 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    d2c2:	f000 b8d7 	b.w	d474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d2c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    d2ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d2ce:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    d2d2:	8a68      	ldrh	r0, [r5, #18]
    d2d4:	68ef      	ldr	r7, [r5, #12]
    d2d6:	2800      	cmp	r0, #0
    d2d8:	d143      	bne.n	d362 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    d2da:	8960      	ldrh	r0, [r4, #10]
    d2dc:	b3e8      	cbz	r0, d35a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    d2de:	68a8      	ldr	r0, [r5, #8]
    d2e0:	f00b faab 	bl	1883a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    d2e4:	8a69      	ldrh	r1, [r5, #18]
    d2e6:	7c2a      	ldrb	r2, [r5, #16]
    d2e8:	4b67      	ldr	r3, [pc, #412]	; (d488 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    d2ea:	4411      	add	r1, r2
    d2ec:	1c49      	adds	r1, r1, #1
    d2ee:	1842      	adds	r2, r0, r1
    d2f0:	4298      	cmp	r0, r3
    d2f2:	d904      	bls.n	d2fe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    d2f4:	f240 6109 	movw	r1, #1545	; 0x609
    d2f8:	2070      	movs	r0, #112	; 0x70
    d2fa:	f003 f8df 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d2fe:	4863      	ldr	r0, [pc, #396]	; (d48c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    d300:	4281      	cmp	r1, r0
    d302:	dd04      	ble.n	d30e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    d304:	f240 610a 	movw	r1, #1546	; 0x60a
    d308:	2070      	movs	r0, #112	; 0x70
    d30a:	f003 f8d7 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d30e:	4860      	ldr	r0, [pc, #384]	; (d490 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    d310:	4281      	cmp	r1, r0
    d312:	da04      	bge.n	d31e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    d314:	f240 610b 	movw	r1, #1547	; 0x60b
    d318:	2070      	movs	r0, #112	; 0x70
    d31a:	f003 f8cf 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d31e:	485d      	ldr	r0, [pc, #372]	; (d494 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    d320:	4290      	cmp	r0, r2
    d322:	bfdc      	itt	le
    d324:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    d328:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    d32c:	dd05      	ble.n	d33a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    d32e:	2a00      	cmp	r2, #0
    d330:	bfbc      	itt	lt
    d332:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    d336:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    d33a:	4610      	mov	r0, r2
    d33c:	f002 f826 	bl	f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d340:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    d344:	1a78      	subs	r0, r7, r1
    d346:	0200      	lsls	r0, r0, #8
    d348:	17c2      	asrs	r2, r0, #31
    d34a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    d34e:	1200      	asrs	r0, r0, #8
    d350:	2833      	cmp	r0, #51	; 0x33
    d352:	bfb8      	it	lt
    d354:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    d358:	e000      	b.n	d35c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    d35a:	e002      	b.n	d362 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    d35c:	bfb8      	it	lt
    d35e:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    d362:	9802      	ldr	r0, [sp, #8]
    d364:	1a38      	subs	r0, r7, r0
    d366:	0200      	lsls	r0, r0, #8
    d368:	17c1      	asrs	r1, r0, #31
    d36a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d36e:	1200      	asrs	r0, r0, #8
    d370:	2800      	cmp	r0, #0
    d372:	dd03      	ble.n	d37c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    d374:	b009      	add	sp, #36	; 0x24
    d376:	2000      	movs	r0, #0
    d378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d37c:	e9d4 1000 	ldrd	r1, r0, [r4]
    d380:	1a40      	subs	r0, r0, r1
    d382:	4438      	add	r0, r7
    d384:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    d388:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d38c:	e9c4 1000 	strd	r1, r0, [r4]
    d390:	9803      	ldr	r0, [sp, #12]
    d392:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d396:	466f      	mov	r7, sp
    d398:	f890 5020 	ldrb.w	r5, [r0, #32]
    d39c:	2020      	movs	r0, #32
    d39e:	f10d 0a04 	add.w	sl, sp, #4
    d3a2:	f88d 0000 	strb.w	r0, [sp]
    d3a6:	2d20      	cmp	r5, #32
    d3a8:	bf1c      	itt	ne
    d3aa:	4836      	ldrne	r0, [pc, #216]	; (d484 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    d3ac:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    d3b0:	d025      	beq.n	d3fe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    d3b2:	bf00      	nop
    d3b4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    d3b8:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    d3bc:	6822      	ldr	r2, [r4, #0]
    d3be:	68c1      	ldr	r1, [r0, #12]
    d3c0:	1a51      	subs	r1, r2, r1
    d3c2:	0209      	lsls	r1, r1, #8
    d3c4:	17ca      	asrs	r2, r1, #31
    d3c6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d3ca:	3008      	adds	r0, #8
    d3cc:	1209      	asrs	r1, r1, #8
    d3ce:	d416      	bmi.n	d3fe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    d3d0:	8961      	ldrh	r1, [r4, #10]
    d3d2:	b171      	cbz	r1, d3f2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    d3d4:	8941      	ldrh	r1, [r0, #10]
    d3d6:	b961      	cbnz	r1, d3f2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    d3d8:	f000 fcd4 	bl	dd84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d3dc:	f001 ffd6 	bl	f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d3e0:	6821      	ldr	r1, [r4, #0]
    d3e2:	1a08      	subs	r0, r1, r0
    d3e4:	0200      	lsls	r0, r0, #8
    d3e6:	17c1      	asrs	r1, r0, #31
    d3e8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d3ec:	1200      	asrs	r0, r0, #8
    d3ee:	2833      	cmp	r0, #51	; 0x33
    d3f0:	db05      	blt.n	d3fe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    d3f2:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    d3f6:	703d      	strb	r5, [r7, #0]
    d3f8:	7845      	ldrb	r5, [r0, #1]
    d3fa:	2d20      	cmp	r5, #32
    d3fc:	d1da      	bne.n	d3b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    d3fe:	7838      	ldrb	r0, [r7, #0]
    d400:	f88a 0000 	strb.w	r0, [sl]
    d404:	4627      	mov	r7, r4
    d406:	2d20      	cmp	r5, #32
    d408:	bf1c      	itt	ne
    d40a:	481e      	ldrne	r0, [pc, #120]	; (d484 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    d40c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    d410:	d030      	beq.n	d474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d412:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    d416:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    d41a:	6879      	ldr	r1, [r7, #4]
    d41c:	f8d9 2008 	ldr.w	r2, [r9, #8]
    d420:	4638      	mov	r0, r7
    d422:	1a51      	subs	r1, r2, r1
    d424:	0209      	lsls	r1, r1, #8
    d426:	17ca      	asrs	r2, r1, #31
    d428:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d42c:	f109 0808 	add.w	r8, r9, #8
    d430:	1209      	asrs	r1, r1, #8
    d432:	d412      	bmi.n	d45a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    d434:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    d438:	b1e1      	cbz	r1, d474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d43a:	8941      	ldrh	r1, [r0, #10]
    d43c:	b9d1      	cbnz	r1, d474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d43e:	f000 fca1 	bl	dd84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d442:	f001 ffa3 	bl	f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d446:	f8d8 1000 	ldr.w	r1, [r8]
    d44a:	1a08      	subs	r0, r1, r0
    d44c:	0200      	lsls	r0, r0, #8
    d44e:	17c1      	asrs	r1, r0, #31
    d450:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d454:	1200      	asrs	r0, r0, #8
    d456:	2833      	cmp	r0, #51	; 0x33
    d458:	da0c      	bge.n	d474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d45a:	f88a 5000 	strb.w	r5, [sl]
    d45e:	f899 0014 	ldrb.w	r0, [r9, #20]
    d462:	7b39      	ldrb	r1, [r7, #12]
    d464:	4288      	cmp	r0, r1
    d466:	f67f af2e 	bls.w	d2c6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    d46a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d46e:	7845      	ldrb	r5, [r0, #1]
    d470:	2d20      	cmp	r5, #32
    d472:	d1ce      	bne.n	d412 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    d474:	b009      	add	sp, #36	; 0x24
    d476:	2001      	movs	r0, #1
    d478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d47c:	20001304 	.word	0x20001304
    d480:	20000f84 	.word	0x20000f84
    d484:	20001284 	.word	0x20001284
    d488:	1e847fff 	.word	0x1e847fff
    d48c:	07a12000 	.word	0x07a12000
    d490:	f85ee000 	.word	0xf85ee000
    d494:	1e848000 	.word	0x1e848000
    d498:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d49c:	4604      	mov	r4, r0
    d49e:	483c      	ldr	r0, [pc, #240]	; (d590 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    d4a0:	460e      	mov	r6, r1
    d4a2:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    d4a6:	4f3b      	ldr	r7, [pc, #236]	; (d594 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    d4a8:	f890 5020 	ldrb.w	r5, [r0, #32]
    d4ac:	2020      	movs	r0, #32
    d4ae:	4698      	mov	r8, r3
    d4b0:	4692      	mov	sl, r2
    d4b2:	7010      	strb	r0, [r2, #0]
    d4b4:	f507 7940 	add.w	r9, r7, #768	; 0x300
    d4b8:	2d20      	cmp	r5, #32
    d4ba:	bf18      	it	ne
    d4bc:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    d4c0:	d028      	beq.n	d514 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    d4c2:	bf00      	nop
    d4c4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    d4c8:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    d4cc:	f100 0108 	add.w	r1, r0, #8
    d4d0:	68c0      	ldr	r0, [r0, #12]
    d4d2:	6822      	ldr	r2, [r4, #0]
    d4d4:	1a10      	subs	r0, r2, r0
    d4d6:	0200      	lsls	r0, r0, #8
    d4d8:	17c2      	asrs	r2, r0, #31
    d4da:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    d4de:	1200      	asrs	r0, r0, #8
    d4e0:	d418      	bmi.n	d514 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    d4e2:	8960      	ldrh	r0, [r4, #10]
    d4e4:	b178      	cbz	r0, d506 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    d4e6:	8948      	ldrh	r0, [r1, #10]
    d4e8:	b968      	cbnz	r0, d506 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    d4ea:	4608      	mov	r0, r1
    d4ec:	f000 fc4a 	bl	dd84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d4f0:	f001 ff4c 	bl	f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d4f4:	6821      	ldr	r1, [r4, #0]
    d4f6:	1a08      	subs	r0, r1, r0
    d4f8:	0200      	lsls	r0, r0, #8
    d4fa:	17c1      	asrs	r1, r0, #31
    d4fc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d500:	1200      	asrs	r0, r0, #8
    d502:	2833      	cmp	r0, #51	; 0x33
    d504:	db06      	blt.n	d514 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    d506:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d50a:	f88a 5000 	strb.w	r5, [sl]
    d50e:	7845      	ldrb	r5, [r0, #1]
    d510:	2d20      	cmp	r5, #32
    d512:	d1d7      	bne.n	d4c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    d514:	f89a 0000 	ldrb.w	r0, [sl]
    d518:	f888 0000 	strb.w	r0, [r8]
    d51c:	2d20      	cmp	r5, #32
    d51e:	bf18      	it	ne
    d520:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    d524:	d030      	beq.n	d588 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d526:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    d52a:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    d52e:	6861      	ldr	r1, [r4, #4]
    d530:	f8d9 2008 	ldr.w	r2, [r9, #8]
    d534:	4620      	mov	r0, r4
    d536:	1a51      	subs	r1, r2, r1
    d538:	0209      	lsls	r1, r1, #8
    d53a:	17ca      	asrs	r2, r1, #31
    d53c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d540:	f109 0608 	add.w	r6, r9, #8
    d544:	1209      	asrs	r1, r1, #8
    d546:	d410      	bmi.n	d56a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    d548:	8971      	ldrh	r1, [r6, #10]
    d54a:	b1e9      	cbz	r1, d588 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d54c:	8941      	ldrh	r1, [r0, #10]
    d54e:	b9d9      	cbnz	r1, d588 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d550:	f000 fc18 	bl	dd84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d554:	f001 ff1a 	bl	f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d558:	6831      	ldr	r1, [r6, #0]
    d55a:	1a08      	subs	r0, r1, r0
    d55c:	0200      	lsls	r0, r0, #8
    d55e:	17c1      	asrs	r1, r0, #31
    d560:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d564:	1200      	asrs	r0, r0, #8
    d566:	2833      	cmp	r0, #51	; 0x33
    d568:	da0e      	bge.n	d588 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d56a:	f888 5000 	strb.w	r5, [r8]
    d56e:	f899 0014 	ldrb.w	r0, [r9, #20]
    d572:	7b21      	ldrb	r1, [r4, #12]
    d574:	4288      	cmp	r0, r1
    d576:	d802      	bhi.n	d57e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    d578:	2000      	movs	r0, #0
    d57a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    d57e:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    d582:	7845      	ldrb	r5, [r0, #1]
    d584:	2d20      	cmp	r5, #32
    d586:	d1ce      	bne.n	d526 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    d588:	2001      	movs	r0, #1
    d58a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    d58e:	0000      	.short	0x0000
    d590:	20001304 	.word	0x20001304
    d594:	20000f84 	.word	0x20000f84
    d598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d59c:	b098      	sub	sp, #96	; 0x60
    d59e:	4616      	mov	r6, r2
    d5a0:	460d      	mov	r5, r1
    d5a2:	f04f 0800 	mov.w	r8, #0
    d5a6:	f04f 0b01 	mov.w	fp, #1
    d5aa:	f002 f971 	bl	f890 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    d5ae:	4604      	mov	r4, r0
    d5b0:	2d01      	cmp	r5, #1
    d5b2:	bf18      	it	ne
    d5b4:	2d02      	cmpne	r5, #2
    d5b6:	d005      	beq.n	d5c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b8>
    d5b8:	f640 1194 	movw	r1, #2452	; 0x994
    d5bc:	f04f 0070 	mov.w	r0, #112	; 0x70
    d5c0:	f002 ff7c 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d5c4:	49f9      	ldr	r1, [pc, #996]	; (d9ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a0>)
    d5c6:	2001      	movs	r0, #1
    d5c8:	6008      	str	r0, [r1, #0]
    d5ca:	49f9      	ldr	r1, [pc, #996]	; (d9b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a4>)
    d5cc:	6889      	ldr	r1, [r1, #8]
    d5ce:	6008      	str	r0, [r1, #0]
    d5d0:	2000      	movs	r0, #0
    d5d2:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    d5d6:	900c      	str	r0, [sp, #48]	; 0x30
    d5d8:	1e40      	subs	r0, r0, #1
    d5da:	900e      	str	r0, [sp, #56]	; 0x38
    d5dc:	49f5      	ldr	r1, [pc, #980]	; (d9b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>)
    d5de:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    d5e2:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    d5e6:	3308      	adds	r3, #8
    d5e8:	af0f      	add	r7, sp, #60	; 0x3c
    d5ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d5ec:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    d5f0:	a80f      	add	r0, sp, #60	; 0x3c
    d5f2:	f000 fbc7 	bl	dd84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d5f6:	900d      	str	r0, [sp, #52]	; 0x34
    d5f8:	48ee      	ldr	r0, [pc, #952]	; (d9b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>)
    d5fa:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    d5fe:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    d602:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    d606:	f1b9 0f00 	cmp.w	r9, #0
    d60a:	bf14      	ite	ne
    d60c:	f04f 0a01 	movne.w	sl, #1
    d610:	f04f 0a00 	moveq.w	sl, #0
    d614:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d616:	9014      	str	r0, [sp, #80]	; 0x50
    d618:	f1ba 0f00 	cmp.w	sl, #0
    d61c:	d009      	beq.n	d632 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    d61e:	48e6      	ldr	r0, [pc, #920]	; (d9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d620:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    d624:	b928      	cbnz	r0, d632 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    d626:	f002 fed1 	bl	103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    d62a:	2800      	cmp	r0, #0
    d62c:	bf08      	it	eq
    d62e:	2701      	moveq	r7, #1
    d630:	d000      	beq.n	d634 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    d632:	2700      	movs	r7, #0
    d634:	48e1      	ldr	r0, [pc, #900]	; (d9bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    d636:	2200      	movs	r2, #0
    d638:	9215      	str	r2, [sp, #84]	; 0x54
    d63a:	7800      	ldrb	r0, [r0, #0]
    d63c:	4616      	mov	r6, r2
    d63e:	2801      	cmp	r0, #1
    d640:	bf18      	it	ne
    d642:	2803      	cmpne	r0, #3
    d644:	d140      	bne.n	d6c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    d646:	48dd      	ldr	r0, [pc, #884]	; (d9bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    d648:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    d64c:	eba8 0009 	sub.w	r0, r8, r9
    d650:	9015      	str	r0, [sp, #84]	; 0x54
    d652:	45c8      	cmp	r8, r9
    d654:	d938      	bls.n	d6c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    d656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d658:	ea6f 0108 	mvn.w	r1, r8
    d65c:	f8df e360 	ldr.w	lr, [pc, #864]	; d9c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>
    d660:	1858      	adds	r0, r3, r1
    d662:	f10d 0c0c 	add.w	ip, sp, #12
    d666:	aa17      	add	r2, sp, #92	; 0x5c
    d668:	4573      	cmp	r3, lr
    d66a:	d904      	bls.n	d676 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x56a>
    d66c:	f240 6109 	movw	r1, #1545	; 0x609
    d670:	2070      	movs	r0, #112	; 0x70
    d672:	f002 ff23 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d676:	4bd3      	ldr	r3, [pc, #844]	; (d9c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    d678:	4299      	cmp	r1, r3
    d67a:	dd04      	ble.n	d686 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x57a>
    d67c:	f240 610a 	movw	r1, #1546	; 0x60a
    d680:	2070      	movs	r0, #112	; 0x70
    d682:	f002 ff1b 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d686:	4bd0      	ldr	r3, [pc, #832]	; (d9c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    d688:	4299      	cmp	r1, r3
    d68a:	da04      	bge.n	d696 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x58a>
    d68c:	f240 610b 	movw	r1, #1547	; 0x60b
    d690:	2070      	movs	r0, #112	; 0x70
    d692:	f002 ff13 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d696:	49cd      	ldr	r1, [pc, #820]	; (d9cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>)
    d698:	4281      	cmp	r1, r0
    d69a:	bfdc      	itt	le
    d69c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    d6a0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    d6a4:	dd05      	ble.n	d6b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a6>
    d6a6:	2800      	cmp	r0, #0
    d6a8:	bfbc      	itt	lt
    d6aa:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    d6ae:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    d6b2:	4661      	mov	r1, ip
    d6b4:	f001 fe86 	bl	f3c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    d6b8:	9803      	ldr	r0, [sp, #12]
    d6ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d6bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d6c0:	9003      	str	r0, [sp, #12]
    d6c2:	1a08      	subs	r0, r1, r0
    d6c4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    d6c8:	2f00      	cmp	r7, #0
    d6ca:	bf18      	it	ne
    d6cc:	2632      	movne	r6, #50	; 0x32
    d6ce:	d104      	bne.n	d6da <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ce>
    d6d0:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d6d4:	2800      	cmp	r0, #0
    d6d6:	bf18      	it	ne
    d6d8:	2602      	movne	r6, #2
    d6da:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d6de:	d008      	beq.n	d6f2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e6>
    d6e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d6e2:	1b00      	subs	r0, r0, r4
    d6e4:	0200      	lsls	r0, r0, #8
    d6e6:	17c1      	asrs	r1, r0, #31
    d6e8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d6ec:	1200      	asrs	r0, r0, #8
    d6ee:	2801      	cmp	r0, #1
    d6f0:	da02      	bge.n	d6f8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ec>
    d6f2:	2004      	movs	r0, #4
    d6f4:	9918      	ldr	r1, [sp, #96]	; 0x60
    d6f6:	e00b      	b.n	d710 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x604>
    d6f8:	b147      	cbz	r7, d70c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    d6fa:	48af      	ldr	r0, [pc, #700]	; (d9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d6fc:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    d700:	b120      	cbz	r0, d70c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    d702:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d706:	1c06      	adds	r6, r0, #0
    d708:	bf18      	it	ne
    d70a:	2602      	movne	r6, #2
    d70c:	4621      	mov	r1, r4
    d70e:	2001      	movs	r0, #1
    d710:	f1b9 0f00 	cmp.w	r9, #0
    d714:	d002      	beq.n	d71c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x610>
    d716:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d718:	2b1e      	cmp	r3, #30
    d71a:	da02      	bge.n	d722 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x616>
    d71c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    d720:	b113      	cbz	r3, d728 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x61c>
    d722:	f04f 0b00 	mov.w	fp, #0
    d726:	1e40      	subs	r0, r0, #1
    d728:	1983      	adds	r3, r0, r6
    d72a:	48a4      	ldr	r0, [pc, #656]	; (d9bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    d72c:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    d730:	7800      	ldrb	r0, [r0, #0]
    d732:	9015      	str	r0, [sp, #84]	; 0x54
    d734:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d736:	1a80      	subs	r0, r0, r2
    d738:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    d73c:	ebac 0001 	sub.w	r0, ip, r1
    d740:	0200      	lsls	r0, r0, #8
    d742:	17c6      	asrs	r6, r0, #31
    d744:	eb00 6016 	add.w	r0, r0, r6, lsr #24
    d748:	1200      	asrs	r0, r0, #8
    d74a:	4298      	cmp	r0, r3
    d74c:	db18      	blt.n	d780 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x674>
    d74e:	2a00      	cmp	r2, #0
    d750:	bf18      	it	ne
    d752:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    d756:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    d758:	9705      	str	r7, [sp, #20]
    d75a:	2700      	movs	r7, #0
    d75c:	f001 ff90 	bl	f680 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    d760:	1a30      	subs	r0, r6, r0
    d762:	0200      	lsls	r0, r0, #8
    d764:	17c1      	asrs	r1, r0, #31
    d766:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d76a:	1200      	asrs	r0, r0, #8
    d76c:	283e      	cmp	r0, #62	; 0x3e
    d76e:	da3f      	bge.n	d7f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6e4>
    d770:	2d01      	cmp	r5, #1
    d772:	d020      	beq.n	d7b6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6aa>
    d774:	1e70      	subs	r0, r6, #1
    d776:	9905      	ldr	r1, [sp, #20]
    d778:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d77c:	b319      	cbz	r1, d7c6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ba>
    d77e:	e02d      	b.n	d7dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    d780:	b182      	cbz	r2, d7a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    d782:	f1be 0f00 	cmp.w	lr, #0
    d786:	bf04      	itt	eq
    d788:	9815      	ldreq	r0, [sp, #84]	; 0x54
    d78a:	2803      	cmpeq	r0, #3
    d78c:	d00a      	beq.n	d7a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    d78e:	b927      	cbnz	r7, d79a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x68e>
    d790:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d794:	2800      	cmp	r0, #0
    d796:	bf18      	it	ne
    d798:	1e9b      	subne	r3, r3, #2
    d79a:	2200      	movs	r2, #0
    d79c:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    d7a0:	4690      	mov	r8, r2
    d7a2:	e7c7      	b.n	d734 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    d7a4:	bb07      	cbnz	r7, d7e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d7a6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d7aa:	b1e8      	cbz	r0, d7e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d7ac:	2000      	movs	r0, #0
    d7ae:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    d7b2:	1e9b      	subs	r3, r3, #2
    d7b4:	e7be      	b.n	d734 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    d7b6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d7ba:	d120      	bne.n	d7fe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    d7bc:	f640 110d 	movw	r1, #2317	; 0x90d
    d7c0:	2070      	movs	r0, #112	; 0x70
    d7c2:	f002 fe7b 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d7c6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d7ca:	d007      	beq.n	d7dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    d7cc:	1a21      	subs	r1, r4, r0
    d7ce:	0209      	lsls	r1, r1, #8
    d7d0:	17ca      	asrs	r2, r1, #31
    d7d2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d7d6:	1209      	asrs	r1, r1, #8
    d7d8:	2904      	cmp	r1, #4
    d7da:	dd03      	ble.n	d7e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d8>
    d7dc:	4604      	mov	r4, r0
    d7de:	f001 ff55 	bl	f68c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    d7e2:	e00c      	b.n	d7fe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    d7e4:	2900      	cmp	r1, #0
    d7e6:	dd0a      	ble.n	d7fe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    d7e8:	b01b      	add	sp, #108	; 0x6c
    d7ea:	2000      	movs	r0, #0
    d7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7f0:	1e70      	subs	r0, r6, #1
    d7f2:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    d7f6:	4620      	mov	r0, r4
    d7f8:	f001 ff48 	bl	f68c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    d7fc:	4657      	mov	r7, sl
    d7fe:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d802:	d024      	beq.n	d84e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x742>
    d804:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d806:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d808:	1b00      	subs	r0, r0, r4
    d80a:	1b1b      	subs	r3, r3, r4
    d80c:	4a70      	ldr	r2, [pc, #448]	; (d9d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c4>)
    d80e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d812:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d816:	4583      	cmp	fp, r0
    d818:	bf98      	it	ls
    d81a:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    d81e:	d2e3      	bcs.n	d7e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d820:	429a      	cmp	r2, r3
    d822:	d3e1      	bcc.n	d7e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d824:	4620      	mov	r0, r4
    d826:	f00b f808 	bl	1883a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    d82a:	4965      	ldr	r1, [pc, #404]	; (d9c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    d82c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d82e:	1c4b      	adds	r3, r1, #1
    d830:	1a16      	subs	r6, r2, r0
    d832:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    d836:	bf24      	itt	cs
    d838:	eba0 0c02 	subcs.w	ip, r0, r2
    d83c:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    d840:	d310      	bcc.n	d864 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    d842:	42b1      	cmp	r1, r6
    d844:	d208      	bcs.n	d858 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    d846:	1a08      	subs	r0, r1, r0
    d848:	4410      	add	r0, r2
    d84a:	1c46      	adds	r6, r0, #1
    d84c:	e00a      	b.n	d864 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    d84e:	f640 212d 	movw	r1, #2605	; 0xa2d
    d852:	2070      	movs	r0, #112	; 0x70
    d854:	f002 fe32 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d858:	4561      	cmp	r1, ip
    d85a:	d22c      	bcs.n	d8b6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7aa>
    d85c:	1a89      	subs	r1, r1, r2
    d85e:	4408      	add	r0, r1
    d860:	1c40      	adds	r0, r0, #1
    d862:	4246      	negs	r6, r0
    d864:	4854      	ldr	r0, [pc, #336]	; (d9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d866:	7f80      	ldrb	r0, [r0, #30]
    d868:	b350      	cbz	r0, d8c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b4>
    d86a:	4628      	mov	r0, r5
    d86c:	4645      	mov	r5, r8
    d86e:	f04f 0b00 	mov.w	fp, #0
    d872:	46d8      	mov	r8, fp
    d874:	2801      	cmp	r0, #1
    d876:	d005      	beq.n	d884 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x778>
    d878:	2002      	movs	r0, #2
    d87a:	f002 f95f 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d87e:	2001      	movs	r0, #1
    d880:	f002 f95c 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d884:	45a9      	cmp	r9, r5
    d886:	d227      	bcs.n	d8d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7cc>
    d888:	eba6 0105 	sub.w	r1, r6, r5
    d88c:	f04f 0301 	mov.w	r3, #1
    d890:	f04f 0203 	mov.w	r2, #3
    d894:	f04f 0002 	mov.w	r0, #2
    d898:	f002 f87c 	bl	f994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d89c:	2800      	cmp	r0, #0
    d89e:	bf08      	it	eq
    d8a0:	f04f 0801 	moveq.w	r8, #1
    d8a4:	f1b9 0f00 	cmp.w	r9, #0
    d8a8:	d030      	beq.n	d90c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d8aa:	2301      	movs	r3, #1
    d8ac:	eba6 0109 	sub.w	r1, r6, r9
    d8b0:	2203      	movs	r2, #3
    d8b2:	4618      	mov	r0, r3
    d8b4:	e01e      	b.n	d8f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e8>
    d8b6:	f640 310c 	movw	r1, #2828	; 0xb0c
    d8ba:	2070      	movs	r0, #112	; 0x70
    d8bc:	f002 fdfe 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d8c0:	45c1      	cmp	r9, r8
    d8c2:	bf34      	ite	cc
    d8c4:	4640      	movcc	r0, r8
    d8c6:	4648      	movcs	r0, r9
    d8c8:	4458      	add	r0, fp
    d8ca:	42b0      	cmp	r0, r6
    d8cc:	dbcd      	blt.n	d86a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75e>
    d8ce:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    d8d2:	2070      	movs	r0, #112	; 0x70
    d8d4:	f002 fdf2 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d8d8:	d910      	bls.n	d8fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f0>
    d8da:	2301      	movs	r3, #1
    d8dc:	eba6 0109 	sub.w	r1, r6, r9
    d8e0:	2203      	movs	r2, #3
    d8e2:	4618      	mov	r0, r3
    d8e4:	f002 f856 	bl	f994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d8e8:	b328      	cbz	r0, d936 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    d8ea:	b17d      	cbz	r5, d90c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d8ec:	1b71      	subs	r1, r6, r5
    d8ee:	2301      	movs	r3, #1
    d8f0:	2203      	movs	r2, #3
    d8f2:	2002      	movs	r0, #2
    d8f4:	f002 f84e 	bl	f994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d8f8:	b1e8      	cbz	r0, d936 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    d8fa:	e007      	b.n	d90c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d8fc:	ea55 0009 	orrs.w	r0, r5, r9
    d900:	d004      	beq.n	d90c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d902:	f640 1177 	movw	r1, #2423	; 0x977
    d906:	2070      	movs	r0, #112	; 0x70
    d908:	f002 fdd8 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d90c:	2301      	movs	r3, #1
    d90e:	2203      	movs	r2, #3
    d910:	4631      	mov	r1, r6
    d912:	2000      	movs	r0, #0
    d914:	f002 f83e 	bl	f994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d918:	b168      	cbz	r0, d936 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    d91a:	2501      	movs	r5, #1
    d91c:	f1b8 0f00 	cmp.w	r8, #0
    d920:	d003      	beq.n	d92a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x81e>
    d922:	9814      	ldr	r0, [sp, #80]	; 0x50
    d924:	900f      	str	r0, [sp, #60]	; 0x3c
    d926:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    d92a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; d9d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c8>
    d92e:	f1ba 0f00 	cmp.w	sl, #0
    d932:	d10e      	bne.n	d952 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x846>
    d934:	e009      	b.n	d94a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x83e>
    d936:	2002      	movs	r0, #2
    d938:	f002 f900 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d93c:	2001      	movs	r0, #1
    d93e:	f002 f8fd 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d942:	b01b      	add	sp, #108	; 0x6c
    d944:	2000      	movs	r0, #0
    d946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d94a:	481b      	ldr	r0, [pc, #108]	; (d9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d94c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    d950:	b100      	cbz	r0, d954 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x848>
    d952:	b34f      	cbz	r7, d9a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89c>
    d954:	f8df a060 	ldr.w	sl, [pc, #96]	; d9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>
    d958:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    d95c:	b118      	cbz	r0, d966 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x85a>
    d95e:	f002 fbdf 	bl	10120 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    d962:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    d966:	b307      	cbz	r7, d9aa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89e>
    d968:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    d96c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    d970:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    d974:	f8c8 0000 	str.w	r0, [r8]
    d978:	2300      	movs	r3, #0
    d97a:	2203      	movs	r2, #3
    d97c:	2005      	movs	r0, #5
    d97e:	f002 f809 	bl	f994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d982:	b368      	cbz	r0, d9e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d4>
    d984:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    d988:	2005      	movs	r0, #5
    d98a:	f002 f9bd 	bl	fd08 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    d98e:	4912      	ldr	r1, [pc, #72]	; (d9d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8cc>)
    d990:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    d994:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    d998:	4910      	ldr	r1, [pc, #64]	; (d9dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d0>)
    d99a:	12e0      	asrs	r0, r4, #11
    d99c:	6008      	str	r0, [r1, #0]
    d99e:	4c06      	ldr	r4, [pc, #24]	; (d9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d9a0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    d9a4:	b3e8      	cbz	r0, da22 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x916>
    d9a6:	e030      	b.n	da0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    d9a8:	e01b      	b.n	d9e2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d6>
    d9aa:	e01f      	b.n	d9ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e0>
    d9ac:	40000508 	.word	0x40000508
    d9b0:	20000014 	.word	0x20000014
    d9b4:	20000f84 	.word	0x20000f84
    d9b8:	20001304 	.word	0x20001304
    d9bc:	20000016 	.word	0x20000016
    d9c0:	1e847fff 	.word	0x1e847fff
    d9c4:	07a12000 	.word	0x07a12000
    d9c8:	f85ee000 	.word	0xf85ee000
    d9cc:	1e848000 	.word	0x1e848000
    d9d0:	003fffff 	.word	0x003fffff
    d9d4:	4001f508 	.word	0x4001f508
    d9d8:	4001f098 	.word	0x4001f098
    d9dc:	4001f504 	.word	0x4001f504
    d9e0:	e025      	b.n	da2e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x922>
    d9e2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; da9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x990>
    d9e6:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    d9ea:	b1c8      	cbz	r0, da20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x914>
    d9ec:	4c2b      	ldr	r4, [pc, #172]	; (da9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x990>)
    d9ee:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    d9f2:	b150      	cbz	r0, da0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    d9f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    d9f8:	f8c8 0000 	str.w	r0, [r8]
    d9fc:	2005      	movs	r0, #5
    d9fe:	f002 f89d 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    da02:	f002 fbf5 	bl	101f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    da06:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    da0a:	eba6 0009 	sub.w	r0, r6, r9
    da0e:	f1a0 0119 	sub.w	r1, r0, #25
    da12:	2900      	cmp	r1, #0
    da14:	dc15      	bgt.n	da42 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x936>
    da16:	f640 2171 	movw	r1, #2673	; 0xa71
    da1a:	2070      	movs	r0, #112	; 0x70
    da1c:	f002 fd4e 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    da20:	e000      	b.n	da24 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x918>
    da22:	e009      	b.n	da38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x92c>
    da24:	f002 fb98 	bl	10158 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    da28:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    da2c:	e79b      	b.n	d966 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x85a>
    da2e:	f240 313e 	movw	r1, #830	; 0x33e
    da32:	2070      	movs	r0, #112	; 0x70
    da34:	f002 fd42 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    da38:	f002 fbcc 	bl	101d4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    da3c:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    da40:	e7e3      	b.n	da0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    da42:	2203      	movs	r2, #3
    da44:	2301      	movs	r3, #1
    da46:	4610      	mov	r0, r2
    da48:	f001 ffa4 	bl	f994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    da4c:	b308      	cbz	r0, da92 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x986>
    da4e:	4814      	ldr	r0, [pc, #80]	; (daa0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x994>)
    da50:	6880      	ldr	r0, [r0, #8]
    da52:	f8c0 b000 	str.w	fp, [r0]
    da56:	4813      	ldr	r0, [pc, #76]	; (daa4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x998>)
    da58:	f8c0 b000 	str.w	fp, [r0]
    da5c:	ac0c      	add	r4, sp, #48	; 0x30
    da5e:	4812      	ldr	r0, [pc, #72]	; (daa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x99c>)
    da60:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    da64:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    da68:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    da6c:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    da70:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    da74:	ac10      	add	r4, sp, #64	; 0x40
    da76:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    da7a:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    da7e:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    da82:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    da86:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    da8a:	b01b      	add	sp, #108	; 0x6c
    da8c:	2001      	movs	r0, #1
    da8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da92:	f640 2179 	movw	r1, #2681	; 0xa79
    da96:	2070      	movs	r0, #112	; 0x70
    da98:	f002 fd10 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    da9c:	20001304 	.word	0x20001304
    daa0:	20000014 	.word	0x20000014
    daa4:	40000508 	.word	0x40000508
    daa8:	20000f84 	.word	0x20000f84
    daac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dab0:	4606      	mov	r6, r0
    dab2:	b083      	sub	sp, #12
    dab4:	7808      	ldrb	r0, [r1, #0]
    dab6:	7390      	strb	r0, [r2, #14]
    dab8:	7acf      	ldrb	r7, [r1, #11]
    daba:	7357      	strb	r7, [r2, #13]
    dabc:	7a88      	ldrb	r0, [r1, #10]
    dabe:	7310      	strb	r0, [r2, #12]
    dac0:	8908      	ldrh	r0, [r1, #8]
    dac2:	4614      	mov	r4, r2
    dac4:	8150      	strh	r0, [r2, #10]
    dac6:	460d      	mov	r5, r1
    dac8:	780a      	ldrb	r2, [r1, #0]
    daca:	495f      	ldr	r1, [pc, #380]	; (dc48 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb3c>)
    dacc:	4699      	mov	r9, r3
    dace:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    dad2:	424b      	negs	r3, r1
    dad4:	f1ac 0801 	sub.w	r8, ip, #1
    dad8:	b15a      	cbz	r2, daf2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9e6>
    dada:	43c0      	mvns	r0, r0
    dadc:	f8d5 8004 	ldr.w	r8, [r5, #4]
    dae0:	f104 0208 	add.w	r2, r4, #8
    dae4:	4288      	cmp	r0, r1
    dae6:	dd3d      	ble.n	db64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa58>
    dae8:	f240 610a 	movw	r1, #1546	; 0x60a
    daec:	2070      	movs	r0, #112	; 0x70
    daee:	f002 fce5 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    daf2:	68ee      	ldr	r6, [r5, #12]
    daf4:	686d      	ldr	r5, [r5, #4]
    daf6:	ea6f 0900 	mvn.w	r9, r0
    dafa:	f104 0208 	add.w	r2, r4, #8
    dafe:	eb06 0009 	add.w	r0, r6, r9
    db02:	4546      	cmp	r6, r8
    db04:	d904      	bls.n	db10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa04>
    db06:	f240 6109 	movw	r1, #1545	; 0x609
    db0a:	2070      	movs	r0, #112	; 0x70
    db0c:	f002 fcd6 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    db10:	4589      	cmp	r9, r1
    db12:	dce9      	bgt.n	dae8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9dc>
    db14:	4599      	cmp	r9, r3
    db16:	db28      	blt.n	db6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa5e>
    db18:	4584      	cmp	ip, r0
    db1a:	bfdc      	itt	le
    db1c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    db20:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    db24:	dd05      	ble.n	db32 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa26>
    db26:	2800      	cmp	r0, #0
    db28:	bfbc      	itt	lt
    db2a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    db2e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    db32:	4621      	mov	r1, r4
    db34:	f001 fc46 	bl	f3c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    db38:	6820      	ldr	r0, [r4, #0]
    db3a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    db3e:	1970      	adds	r0, r6, r5
    db40:	1c40      	adds	r0, r0, #1
    db42:	6021      	str	r1, [r4, #0]
    db44:	2f00      	cmp	r7, #0
    db46:	bf08      	it	eq
    db48:	307a      	addeq	r0, #122	; 0x7a
    db4a:	d003      	beq.n	db54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa48>
    db4c:	2f01      	cmp	r7, #1
    db4e:	bf08      	it	eq
    db50:	3048      	addeq	r0, #72	; 0x48
    db52:	d12d      	bne.n	dbb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaa4>
    db54:	f001 fc1a 	bl	f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    db58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    db5c:	6060      	str	r0, [r4, #4]
    db5e:	b003      	add	sp, #12
    db60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    db64:	4601      	mov	r1, r0
    db66:	4298      	cmp	r0, r3
    db68:	da04      	bge.n	db74 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa68>
    db6a:	f240 610b 	movw	r1, #1547	; 0x60b
    db6e:	2070      	movs	r0, #112	; 0x70
    db70:	f002 fca4 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    db74:	4584      	cmp	ip, r0
    db76:	bfdc      	itt	le
    db78:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    db7c:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    db80:	dd05      	ble.n	db8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa82>
    db82:	2800      	cmp	r0, #0
    db84:	bfbc      	itt	lt
    db86:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    db8a:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    db8e:	4621      	mov	r1, r4
    db90:	f001 fc18 	bl	f3c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    db94:	6820      	ldr	r0, [r4, #0]
    db96:	2f00      	cmp	r7, #0
    db98:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    db9c:	f108 0001 	add.w	r0, r8, #1
    dba0:	6021      	str	r1, [r4, #0]
    dba2:	bf08      	it	eq
    dba4:	307a      	addeq	r0, #122	; 0x7a
    dba6:	d008      	beq.n	dbba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaae>
    dba8:	2f01      	cmp	r7, #1
    dbaa:	bf08      	it	eq
    dbac:	3048      	addeq	r0, #72	; 0x48
    dbae:	d004      	beq.n	dbba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaae>
    dbb0:	f240 61b1 	movw	r1, #1713	; 0x6b1
    dbb4:	2070      	movs	r0, #112	; 0x70
    dbb6:	f002 fc81 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dbba:	f001 fbe7 	bl	f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    dbbe:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    dbc2:	6061      	str	r1, [r4, #4]
    dbc4:	8960      	ldrh	r0, [r4, #10]
    dbc6:	aa01      	add	r2, sp, #4
    dbc8:	4669      	mov	r1, sp
    dbca:	f001 fbfb 	bl	f3c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    dbce:	481f      	ldr	r0, [pc, #124]	; (dc4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb40>)
    dbd0:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    dbd4:	2920      	cmp	r1, #32
    dbd6:	d023      	beq.n	dc20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb14>
    dbd8:	6900      	ldr	r0, [r0, #16]
    dbda:	1d40      	adds	r0, r0, #5
    dbdc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dbe0:	e9d4 2100 	ldrd	r2, r1, [r4]
    dbe4:	1a89      	subs	r1, r1, r2
    dbe6:	6020      	str	r0, [r4, #0]
    dbe8:	4408      	add	r0, r1
    dbea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dbee:	6060      	str	r0, [r4, #4]
    dbf0:	464b      	mov	r3, r9
    dbf2:	4632      	mov	r2, r6
    dbf4:	4621      	mov	r1, r4
    dbf6:	68e8      	ldr	r0, [r5, #12]
    dbf8:	f7ff fad2 	bl	d1a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    dbfc:	2800      	cmp	r0, #0
    dbfe:	bf1c      	itt	ne
    dc00:	b003      	addne	sp, #12
    dc02:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dc06:	e9d4 1000 	ldrd	r1, r0, [r4]
    dc0a:	1a40      	subs	r0, r0, r1
    dc0c:	4430      	add	r0, r6
    dc0e:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    dc12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dc16:	e9c4 1000 	strd	r1, r0, [r4]
    dc1a:	b003      	add	sp, #12
    dc1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dc20:	8960      	ldrh	r0, [r4, #10]
    dc22:	f106 0709 	add.w	r7, r6, #9
    dc26:	b120      	cbz	r0, dc32 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb26>
    dc28:	f002 fbd0 	bl	103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    dc2c:	2800      	cmp	r0, #0
    dc2e:	bf08      	it	eq
    dc30:	3732      	addeq	r7, #50	; 0x32
    dc32:	4807      	ldr	r0, [pc, #28]	; (dc50 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb44>)
    dc34:	7841      	ldrb	r1, [r0, #1]
    dc36:	9800      	ldr	r0, [sp, #0]
    dc38:	4281      	cmp	r1, r0
    dc3a:	bf84      	itt	hi
    dc3c:	1a08      	subhi	r0, r1, r0
    dc3e:	4407      	addhi	r7, r0
    dc40:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    dc44:	e7cc      	b.n	dbe0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xad4>
    dc46:	0000      	.short	0x0000
    dc48:	07a12000 	.word	0x07a12000
    dc4c:	20001304 	.word	0x20001304
    dc50:	20000016 	.word	0x20000016
    dc54:	b510      	push	{r4, lr}
    dc56:	4c15      	ldr	r4, [pc, #84]	; (dcac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xba0>)
    dc58:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    dc5c:	2820      	cmp	r0, #32
    dc5e:	bf18      	it	ne
    dc60:	bd10      	popne	{r4, pc}
    dc62:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    dc66:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    dc6a:	f890 1020 	ldrb.w	r1, [r0, #32]
    dc6e:	2920      	cmp	r1, #32
    dc70:	d017      	beq.n	dca2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb96>
    dc72:	f8df c03c 	ldr.w	ip, [pc, #60]	; dcb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xba4>
    dc76:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    dc7a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    dc7e:	785b      	ldrb	r3, [r3, #1]
    dc80:	f880 3020 	strb.w	r3, [r0, #32]
    dc84:	2301      	movs	r3, #1
    dc86:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    dc8a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    dc8e:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    dc92:	2002      	movs	r0, #2
    dc94:	f000 f8b0 	bl	ddf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    dc98:	2000      	movs	r0, #0
    dc9a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    dc9e:	77a0      	strb	r0, [r4, #30]
    dca0:	bd10      	pop	{r4, pc}
    dca2:	f240 318b 	movw	r1, #907	; 0x38b
    dca6:	2070      	movs	r0, #112	; 0x70
    dca8:	f002 fc08 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dcac:	20001304 	.word	0x20001304
    dcb0:	20001284 	.word	0x20001284
    dcb4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    dcb8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dd74 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc68>
    dcbc:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    dcc0:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    dcc4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    dcc8:	2c20      	cmp	r4, #32
    dcca:	bf08      	it	eq
    dccc:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    dcd0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; dd78 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc6c>
    dcd4:	f8df a0a4 	ldr.w	sl, [pc, #164]	; dd7c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc70>
    dcd8:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    dcdc:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    dce0:	2607      	movs	r6, #7
    dce2:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    dce6:	2801      	cmp	r0, #1
    dce8:	d00e      	beq.n	dd08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    dcea:	2804      	cmp	r0, #4
    dcec:	bf08      	it	eq
    dcee:	2602      	moveq	r6, #2
    dcf0:	d00a      	beq.n	dd08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    dcf2:	2805      	cmp	r0, #5
    dcf4:	bf0c      	ite	eq
    dcf6:	2603      	moveq	r6, #3
    dcf8:	2806      	cmpne	r0, #6
    dcfa:	d005      	beq.n	dd08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    dcfc:	f640 01d9 	movw	r1, #2265	; 0x8d9
    dd00:	f04f 0070 	mov.w	r0, #112	; 0x70
    dd04:	f002 fbda 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dd08:	f1bb 0f00 	cmp.w	fp, #0
    dd0c:	bf18      	it	ne
    dd0e:	f3af 8000 	nopne.w
    dd12:	f3ef 8010 	mrs	r0, PRIMASK
    dd16:	b672      	cpsid	i
    dd18:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    dd1c:	784a      	ldrb	r2, [r1, #1]
    dd1e:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    dd22:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    dd26:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    dd2a:	42a2      	cmp	r2, r4
    dd2c:	bf04      	itt	eq
    dd2e:	2220      	moveq	r2, #32
    dd30:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    dd34:	b1b8      	cbz	r0, dd66 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc5a>
    dd36:	462a      	mov	r2, r5
    dd38:	4621      	mov	r1, r4
    dd3a:	2001      	movs	r0, #1
    dd3c:	f000 f85c 	bl	ddf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    dd40:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dd44:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    dd48:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    dd4c:	6840      	ldr	r0, [r0, #4]
    dd4e:	4631      	mov	r1, r6
    dd50:	4790      	blx	r2
    dd52:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    dd56:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    dd5a:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    dd5e:	2c20      	cmp	r4, #32
    dd60:	d1bc      	bne.n	dcdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbd0>
    dd62:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    dd66:	4806      	ldr	r0, [pc, #24]	; (dd80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc74>)
    dd68:	2800      	cmp	r0, #0
    dd6a:	bf18      	it	ne
    dd6c:	f3af 8000 	nopne.w
    dd70:	b662      	cpsie	i
    dd72:	e7e0      	b.n	dd36 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc2a>
    dd74:	20001304 	.word	0x20001304
    dd78:	00000000 	.word	0x00000000
    dd7c:	20001284 	.word	0x20001284
    dd80:	00000000 	.word	0x00000000
    dd84:	b510      	push	{r4, lr}
    dd86:	4604      	mov	r4, r0
    dd88:	6800      	ldr	r0, [r0, #0]
    dd8a:	f00a fd56 	bl	1883a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    dd8e:	4602      	mov	r2, r0
    dd90:	8960      	ldrh	r0, [r4, #10]
    dd92:	7a21      	ldrb	r1, [r4, #8]
    dd94:	4b14      	ldr	r3, [pc, #80]	; (dde8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcdc>)
    dd96:	4408      	add	r0, r1
    dd98:	1c41      	adds	r1, r0, #1
    dd9a:	1850      	adds	r0, r2, r1
    dd9c:	429a      	cmp	r2, r3
    dd9e:	d904      	bls.n	ddaa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc9e>
    dda0:	f240 6109 	movw	r1, #1545	; 0x609
    dda4:	2070      	movs	r0, #112	; 0x70
    dda6:	f002 fb89 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ddaa:	4a10      	ldr	r2, [pc, #64]	; (ddec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce0>)
    ddac:	4291      	cmp	r1, r2
    ddae:	dd04      	ble.n	ddba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcae>
    ddb0:	f240 610a 	movw	r1, #1546	; 0x60a
    ddb4:	2070      	movs	r0, #112	; 0x70
    ddb6:	f002 fb81 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ddba:	4a0d      	ldr	r2, [pc, #52]	; (ddf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce4>)
    ddbc:	4291      	cmp	r1, r2
    ddbe:	da04      	bge.n	ddca <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcbe>
    ddc0:	f240 610b 	movw	r1, #1547	; 0x60b
    ddc4:	2070      	movs	r0, #112	; 0x70
    ddc6:	f002 fb79 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ddca:	490a      	ldr	r1, [pc, #40]	; (ddf4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce8>)
    ddcc:	4281      	cmp	r1, r0
    ddce:	bfde      	ittt	le
    ddd0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    ddd4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    ddd8:	bd10      	pople	{r4, pc}
    ddda:	2800      	cmp	r0, #0
    dddc:	bfbc      	itt	lt
    ddde:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    dde2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    dde6:	bd10      	pop	{r4, pc}
    dde8:	1e847fff 	.word	0x1e847fff
    ddec:	07a12000 	.word	0x07a12000
    ddf0:	f85ee000 	.word	0xf85ee000
    ddf4:	1e848000 	.word	0x1e848000
    ddf8:	f8df c054 	ldr.w	ip, [pc, #84]	; de50 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd44>
    ddfc:	b510      	push	{r4, lr}
    ddfe:	2300      	movs	r3, #0
    de00:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    de04:	2807      	cmp	r0, #7
    de06:	d21e      	bcs.n	de46 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd3a>
    de08:	e8df f000 	tbb	[pc, r0]
    de0c:	05050505 	.word	0x05050505
    de10:	00040404 	.word	0x00040404
    de14:	2301      	movs	r3, #1
    de16:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    de1a:	2b00      	cmp	r3, #0
    de1c:	bf08      	it	eq
    de1e:	bd10      	popeq	{r4, pc}
    de20:	480c      	ldr	r0, [pc, #48]	; (de54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd48>)
    de22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    de26:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    de2a:	2820      	cmp	r0, #32
    de2c:	bf0e      	itee	eq
    de2e:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    de32:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    de36:	7041      	strbne	r1, [r0, #1]
    de38:	2020      	movs	r0, #32
    de3a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    de3e:	7058      	strb	r0, [r3, #1]
    de40:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    de44:	bd10      	pop	{r4, pc}
    de46:	f44f 7115 	mov.w	r1, #596	; 0x254
    de4a:	2070      	movs	r0, #112	; 0x70
    de4c:	f002 fb36 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    de50:	20001284 	.word	0x20001284
    de54:	20001304 	.word	0x20001304
    de58:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de5c:	b083      	sub	sp, #12
    de5e:	485c      	ldr	r0, [pc, #368]	; (dfd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    de60:	9904      	ldr	r1, [sp, #16]
    de62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    de66:	9001      	str	r0, [sp, #4]
    de68:	f890 4020 	ldrb.w	r4, [r0, #32]
    de6c:	9803      	ldr	r0, [sp, #12]
    de6e:	4625      	mov	r5, r4
    de70:	2801      	cmp	r0, #1
    de72:	bf18      	it	ne
    de74:	2802      	cmpne	r0, #2
    de76:	d005      	beq.n	de84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd78>
    de78:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    de7c:	f04f 0070 	mov.w	r0, #112	; 0x70
    de80:	f002 fb1c 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    de84:	2700      	movs	r7, #0
    de86:	2d20      	cmp	r5, #32
    de88:	d04a      	beq.n	df20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe14>
    de8a:	4851      	ldr	r0, [pc, #324]	; (dfd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    de8c:	9100      	str	r1, [sp, #0]
    de8e:	2600      	movs	r6, #0
    de90:	7f80      	ldrb	r0, [r0, #30]
    de92:	2800      	cmp	r0, #0
    de94:	bf08      	it	eq
    de96:	2602      	moveq	r6, #2
    de98:	f001 fbf2 	bl	f680 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    de9c:	f8df a138 	ldr.w	sl, [pc, #312]	; dfd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xecc>
    dea0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dea4:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    dea8:	f8df 9128 	ldr.w	r9, [pc, #296]	; dfd4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec8>
    deac:	688a      	ldr	r2, [r1, #8]
    deae:	68c9      	ldr	r1, [r1, #12]
    deb0:	1a12      	subs	r2, r2, r0
    deb2:	1a09      	subs	r1, r1, r0
    deb4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    deb8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    debc:	4296      	cmp	r6, r2
    debe:	bf98      	it	ls
    dec0:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    dec4:	d201      	bcs.n	deca <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdbe>
    dec6:	4589      	cmp	r9, r1
    dec8:	d228      	bcs.n	df1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe10>
    deca:	4a44      	ldr	r2, [pc, #272]	; (dfdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed0>)
    decc:	9900      	ldr	r1, [sp, #0]
    dece:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    ded2:	4622      	mov	r2, r4
    ded4:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    ded8:	784c      	ldrb	r4, [r1, #1]
    deda:	2c20      	cmp	r4, #32
    dedc:	d016      	beq.n	df0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe00>
    dede:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dee2:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    dee6:	f8dc 8008 	ldr.w	r8, [ip, #8]
    deea:	f8dc c00c 	ldr.w	ip, [ip, #12]
    deee:	eba8 0800 	sub.w	r8, r8, r0
    def2:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    def6:	ebac 0100 	sub.w	r1, ip, r0
    defa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    defe:	4546      	cmp	r6, r8
    df00:	bf98      	it	ls
    df02:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    df06:	d2e4      	bcs.n	ded2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc6>
    df08:	4589      	cmp	r9, r1
    df0a:	d3e2      	bcc.n	ded2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc6>
    df0c:	2a20      	cmp	r2, #32
    df0e:	d005      	beq.n	df1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe10>
    df10:	2120      	movs	r1, #32
    df12:	2004      	movs	r0, #4
    df14:	9b00      	ldr	r3, [sp, #0]
    df16:	f7ff f907 	bl	d128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    df1a:	4604      	mov	r4, r0
    df1c:	42ac      	cmp	r4, r5
    df1e:	d115      	bne.n	df4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe40>
    df20:	482f      	ldr	r0, [pc, #188]	; (dfe0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed4>)
    df22:	2800      	cmp	r0, #0
    df24:	bf18      	it	ne
    df26:	f3af 8000 	nopne.w
    df2a:	f001 fba9 	bl	f680 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    df2e:	4c28      	ldr	r4, [pc, #160]	; (dfd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    df30:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    df34:	2920      	cmp	r1, #32
    df36:	d00d      	beq.n	df54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe48>
    df38:	68e1      	ldr	r1, [r4, #12]
    df3a:	1c82      	adds	r2, r0, #2
    df3c:	1a51      	subs	r1, r2, r1
    df3e:	0209      	lsls	r1, r1, #8
    df40:	17ca      	asrs	r2, r1, #31
    df42:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    df46:	1209      	asrs	r1, r1, #8
    df48:	2900      	cmp	r1, #0
    df4a:	dd03      	ble.n	df54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe48>
    df4c:	b005      	add	sp, #20
    df4e:	2000      	movs	r0, #0
    df50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df54:	2d20      	cmp	r5, #32
    df56:	d00d      	beq.n	df74 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe68>
    df58:	462a      	mov	r2, r5
    df5a:	9903      	ldr	r1, [sp, #12]
    df5c:	f7ff fb1c 	bl	d598 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    df60:	b358      	cbz	r0, dfba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xeae>
    df62:	9801      	ldr	r0, [sp, #4]
    df64:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    df68:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    df6c:	b005      	add	sp, #20
    df6e:	2001      	movs	r0, #1
    df70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df74:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    df78:	b118      	cbz	r0, df82 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe76>
    df7a:	f002 f8d1 	bl	10120 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    df7e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    df82:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    df86:	b150      	cbz	r0, df9e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe92>
    df88:	4916      	ldr	r1, [pc, #88]	; (dfe4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed8>)
    df8a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    df8e:	6008      	str	r0, [r1, #0]
    df90:	2005      	movs	r0, #5
    df92:	f001 fdd3 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    df96:	f002 f92b 	bl	101f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    df9a:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    df9e:	2004      	movs	r0, #4
    dfa0:	f001 fdcc 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    dfa4:	f001 fe38 	bl	fc18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    dfa8:	2020      	movs	r0, #32
    dfaa:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    dfae:	480e      	ldr	r0, [pc, #56]	; (dfe8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xedc>)
    dfb0:	6880      	ldr	r0, [r0, #8]
    dfb2:	6007      	str	r7, [r0, #0]
    dfb4:	480d      	ldr	r0, [pc, #52]	; (dfec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xee0>)
    dfb6:	6007      	str	r7, [r0, #0]
    dfb8:	e7d8      	b.n	df6c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe60>
    dfba:	462a      	mov	r2, r5
    dfbc:	2120      	movs	r1, #32
    dfbe:	2004      	movs	r0, #4
    dfc0:	9b04      	ldr	r3, [sp, #16]
    dfc2:	f7ff f8b1 	bl	d128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    dfc6:	b005      	add	sp, #20
    dfc8:	2000      	movs	r0, #0
    dfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfce:	0000      	.short	0x0000
    dfd0:	20001304 	.word	0x20001304
    dfd4:	003fffff 	.word	0x003fffff
    dfd8:	20000f84 	.word	0x20000f84
    dfdc:	20001284 	.word	0x20001284
    dfe0:	00000000 	.word	0x00000000
    dfe4:	4001f508 	.word	0x4001f508
    dfe8:	20000014 	.word	0x20000014
    dfec:	40000508 	.word	0x40000508

0000dff0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    dff0:	4906      	ldr	r1, [pc, #24]	; (e00c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    dff2:	b510      	push	{r4, lr}
    dff4:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    dff8:	2a20      	cmp	r2, #32
    dffa:	bf1c      	itt	ne
    dffc:	7788      	strbne	r0, [r1, #30]
    dffe:	bd10      	popne	{r4, pc}
    e000:	f240 31ea 	movw	r1, #1002	; 0x3ea
    e004:	2070      	movs	r0, #112	; 0x70
    e006:	f002 fa59 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e00a:	0000      	.short	0x0000
    e00c:	20001304 	.word	0x20001304

0000e010 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    e010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e014:	4e5b      	ldr	r6, [pc, #364]	; (e184 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    e016:	4681      	mov	r9, r0
    e018:	b085      	sub	sp, #20
    e01a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    e01e:	468a      	mov	sl, r1
    e020:	2820      	cmp	r0, #32
    e022:	d04d      	beq.n	e0c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    e024:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    e028:	f106 040c 	add.w	r4, r6, #12
    e02c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e030:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    e034:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    e038:	2020      	movs	r0, #32
    e03a:	f88d 0000 	strb.w	r0, [sp]
    e03e:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    e042:	aa03      	add	r2, sp, #12
    e044:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    e048:	a901      	add	r1, sp, #4
    e04a:	f890 5020 	ldrb.w	r5, [r0, #32]
    e04e:	6930      	ldr	r0, [r6, #16]
    e050:	9002      	str	r0, [sp, #8]
    e052:	6830      	ldr	r0, [r6, #0]
    e054:	4448      	add	r0, r9
    e056:	f001 f9b5 	bl	f3c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    e05a:	68f8      	ldr	r0, [r7, #12]
    e05c:	9901      	ldr	r1, [sp, #4]
    e05e:	4a4a      	ldr	r2, [pc, #296]	; (e188 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    e060:	4408      	add	r0, r1
    e062:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    e066:	4291      	cmp	r1, r2
    e068:	d82f      	bhi.n	e0ca <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    e06a:	68b9      	ldr	r1, [r7, #8]
    e06c:	1a41      	subs	r1, r0, r1
    e06e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e072:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    e076:	d228      	bcs.n	e0ca <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    e078:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e07c:	6060      	str	r0, [r4, #4]
    e07e:	4630      	mov	r0, r6
    e080:	f884 a00c 	strb.w	sl, [r4, #12]
    e084:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    e088:	46ea      	mov	sl, sp
    e08a:	2d20      	cmp	r5, #32
    e08c:	bf1c      	itt	ne
    e08e:	493f      	ldrne	r1, [pc, #252]	; (e18c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    e090:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    e094:	d03c      	beq.n	e110 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    e096:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    e09a:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    e09e:	6860      	ldr	r0, [r4, #4]
    e0a0:	68ba      	ldr	r2, [r7, #8]
    e0a2:	4621      	mov	r1, r4
    e0a4:	1a10      	subs	r0, r2, r0
    e0a6:	0200      	lsls	r0, r0, #8
    e0a8:	17c2      	asrs	r2, r0, #31
    e0aa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    e0ae:	f107 0608 	add.w	r6, r7, #8
    e0b2:	1200      	asrs	r0, r0, #8
    e0b4:	d41b      	bmi.n	e0ee <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    e0b6:	8970      	ldrh	r0, [r6, #10]
    e0b8:	b350      	cbz	r0, e110 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    e0ba:	8948      	ldrh	r0, [r1, #10]
    e0bc:	b148      	cbz	r0, e0d2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    e0be:	e027      	b.n	e110 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    e0c0:	f640 317b 	movw	r1, #2939	; 0xb7b
    e0c4:	2070      	movs	r0, #112	; 0x70
    e0c6:	f002 f9f9 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e0ca:	b005      	add	sp, #20
    e0cc:	2001      	movs	r0, #1
    e0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0d2:	4620      	mov	r0, r4
    e0d4:	f7ff fe56 	bl	dd84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    e0d8:	f001 f958 	bl	f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    e0dc:	6831      	ldr	r1, [r6, #0]
    e0de:	1a08      	subs	r0, r1, r0
    e0e0:	0200      	lsls	r0, r0, #8
    e0e2:	17c1      	asrs	r1, r0, #31
    e0e4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    e0e8:	1200      	asrs	r0, r0, #8
    e0ea:	2833      	cmp	r0, #51	; 0x33
    e0ec:	da10      	bge.n	e110 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    e0ee:	f88a 5000 	strb.w	r5, [sl]
    e0f2:	7d39      	ldrb	r1, [r7, #20]
    e0f4:	7b20      	ldrb	r0, [r4, #12]
    e0f6:	4281      	cmp	r1, r0
    e0f8:	d805      	bhi.n	e106 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    e0fa:	9802      	ldr	r0, [sp, #8]
    e0fc:	6060      	str	r0, [r4, #4]
    e0fe:	b005      	add	sp, #20
    e100:	2002      	movs	r0, #2
    e102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e106:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    e10a:	7845      	ldrb	r5, [r0, #1]
    e10c:	2d20      	cmp	r5, #32
    e10e:	d1c2      	bne.n	e096 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    e110:	2005      	movs	r0, #5
    e112:	f001 fd13 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    e116:	4c1b      	ldr	r4, [pc, #108]	; (e184 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    e118:	f04f 30ff 	mov.w	r0, #4294967295
    e11c:	60a0      	str	r0, [r4, #8]
    e11e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e122:	f89d 2000 	ldrb.w	r2, [sp]
    e126:	2120      	movs	r1, #32
    e128:	2a20      	cmp	r2, #32
    e12a:	bf13      	iteet	ne
    e12c:	2005      	movne	r0, #5
    e12e:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    e132:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    e136:	f7fe fff7 	blne	d128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    e13a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    e13e:	4913      	ldr	r1, [pc, #76]	; (e18c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    e140:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    e144:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    e148:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    e14c:	7048      	strb	r0, [r1, #1]
    e14e:	6820      	ldr	r0, [r4, #0]
    e150:	4448      	add	r0, r9
    e152:	6020      	str	r0, [r4, #0]
    e154:	2001      	movs	r0, #1
    e156:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    e15a:	7e60      	ldrb	r0, [r4, #25]
    e15c:	2801      	cmp	r0, #1
    e15e:	d105      	bne.n	e16c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    e160:	6920      	ldr	r0, [r4, #16]
    e162:	1e40      	subs	r0, r0, #1
    e164:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e168:	f001 fb2e 	bl	f7c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    e16c:	f89d 0000 	ldrb.w	r0, [sp]
    e170:	2820      	cmp	r0, #32
    e172:	d003      	beq.n	e17c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    e174:	4806      	ldr	r0, [pc, #24]	; (e190 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    e176:	7840      	ldrb	r0, [r0, #1]
    e178:	f002 fa70 	bl	1065c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    e17c:	b005      	add	sp, #20
    e17e:	2000      	movs	r0, #0
    e180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e184:	20001304 	.word	0x20001304
    e188:	07a11f9b 	.word	0x07a11f9b
    e18c:	20001284 	.word	0x20001284
    e190:	20000014 	.word	0x20000014

0000e194 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    e194:	4806      	ldr	r0, [pc, #24]	; (e1b0 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    e196:	b510      	push	{r4, lr}
    e198:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    e19c:	2920      	cmp	r1, #32
    e19e:	bf1c      	itt	ne
    e1a0:	7e00      	ldrbne	r0, [r0, #24]
    e1a2:	bd10      	popne	{r4, pc}
    e1a4:	f640 3174 	movw	r1, #2932	; 0xb74
    e1a8:	2070      	movs	r0, #112	; 0x70
    e1aa:	f002 f987 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e1ae:	0000      	.short	0x0000
    e1b0:	20001304 	.word	0x20001304

0000e1b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    e1b4:	4602      	mov	r2, r0
    e1b6:	4b14      	ldr	r3, [pc, #80]	; (e208 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    e1b8:	b510      	push	{r4, lr}
    e1ba:	4408      	add	r0, r1
    e1bc:	429a      	cmp	r2, r3
    e1be:	d904      	bls.n	e1ca <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    e1c0:	f240 6109 	movw	r1, #1545	; 0x609
    e1c4:	2070      	movs	r0, #112	; 0x70
    e1c6:	f002 f979 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e1ca:	4a10      	ldr	r2, [pc, #64]	; (e20c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    e1cc:	4291      	cmp	r1, r2
    e1ce:	dd04      	ble.n	e1da <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    e1d0:	f240 610a 	movw	r1, #1546	; 0x60a
    e1d4:	2070      	movs	r0, #112	; 0x70
    e1d6:	f002 f971 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e1da:	4a0d      	ldr	r2, [pc, #52]	; (e210 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    e1dc:	4291      	cmp	r1, r2
    e1de:	da04      	bge.n	e1ea <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    e1e0:	f240 610b 	movw	r1, #1547	; 0x60b
    e1e4:	2070      	movs	r0, #112	; 0x70
    e1e6:	f002 f969 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e1ea:	490a      	ldr	r1, [pc, #40]	; (e214 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    e1ec:	4281      	cmp	r1, r0
    e1ee:	bfde      	ittt	le
    e1f0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    e1f4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    e1f8:	bd10      	pople	{r4, pc}
    e1fa:	2800      	cmp	r0, #0
    e1fc:	bfbc      	itt	lt
    e1fe:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    e202:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    e206:	bd10      	pop	{r4, pc}
    e208:	1e847fff 	.word	0x1e847fff
    e20c:	07a12000 	.word	0x07a12000
    e210:	f85ee000 	.word	0xf85ee000
    e214:	1e848000 	.word	0x1e848000

0000e218 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    e218:	4a10      	ldr	r2, [pc, #64]	; (e25c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    e21a:	1a0b      	subs	r3, r1, r0
    e21c:	f102 0c01 	add.w	ip, r2, #1
    e220:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    e224:	bf3c      	itt	cc
    e226:	4618      	movcc	r0, r3
    e228:	4770      	bxcc	lr
    e22a:	b510      	push	{r4, lr}
    e22c:	1a44      	subs	r4, r0, r1
    e22e:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    e232:	bf3c      	itt	cc
    e234:	4618      	movcc	r0, r3
    e236:	bd10      	popcc	{r4, pc}
    e238:	429a      	cmp	r2, r3
    e23a:	d203      	bcs.n	e244 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    e23c:	1a10      	subs	r0, r2, r0
    e23e:	4408      	add	r0, r1
    e240:	1c40      	adds	r0, r0, #1
    e242:	bd10      	pop	{r4, pc}
    e244:	42a2      	cmp	r2, r4
    e246:	d204      	bcs.n	e252 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    e248:	1a51      	subs	r1, r2, r1
    e24a:	4408      	add	r0, r1
    e24c:	1c40      	adds	r0, r0, #1
    e24e:	4240      	negs	r0, r0
    e250:	bd10      	pop	{r4, pc}
    e252:	f640 310c 	movw	r1, #2828	; 0xb0c
    e256:	2070      	movs	r0, #112	; 0x70
    e258:	f002 f930 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e25c:	1e847fff 	.word	0x1e847fff

0000e260 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    e260:	4907      	ldr	r1, [pc, #28]	; (e280 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    e262:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    e266:	4282      	cmp	r2, r0
    e268:	bf04      	itt	eq
    e26a:	6848      	ldreq	r0, [r1, #4]
    e26c:	4770      	bxeq	lr
    e26e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e272:	4904      	ldr	r1, [pc, #16]	; (e284 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    e274:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    e278:	3008      	adds	r0, #8
    e27a:	f7ff bd83 	b.w	dd84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    e27e:	0000      	.short	0x0000
    e280:	20001304 	.word	0x20001304
    e284:	20000f84 	.word	0x20000f84

0000e288 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    e288:	490e      	ldr	r1, [pc, #56]	; (e2c4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    e28a:	b510      	push	{r4, lr}
    e28c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    e290:	2820      	cmp	r0, #32
    e292:	d012      	beq.n	e2ba <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    e294:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    e298:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    e29c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e2a0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    e2a4:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    e2a8:	6840      	ldr	r0, [r0, #4]
    e2aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e2ae:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    e2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2b6:	2104      	movs	r1, #4
    e2b8:	4710      	bx	r2
    e2ba:	f640 01bc 	movw	r1, #2236	; 0x8bc
    e2be:	2070      	movs	r0, #112	; 0x70
    e2c0:	f002 f8fc 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e2c4:	20001304 	.word	0x20001304

0000e2c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    e2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2ca:	4d6d      	ldr	r5, [pc, #436]	; (e480 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    e2cc:	496d      	ldr	r1, [pc, #436]	; (e484 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    e2ce:	2601      	movs	r6, #1
    e2d0:	f505 7460 	add.w	r4, r5, #896	; 0x380
    e2d4:	2808      	cmp	r0, #8
    e2d6:	d273      	bcs.n	e3c0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    e2d8:	e8df f000 	tbb	[pc, r0]
    e2dc:	af9d6704 	.word	0xaf9d6704
    e2e0:	b9b444cd 	.word	0xb9b444cd
    e2e4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    e2e8:	b918      	cbnz	r0, e2f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    e2ea:	f001 ff35 	bl	10158 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    e2ee:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    e2f2:	8ae0      	ldrh	r0, [r4, #22]
    e2f4:	b110      	cbz	r0, e2fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    e2f6:	f002 f869 	bl	103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e2fa:	b188      	cbz	r0, e320 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    e2fc:	f7ff fcaa 	bl	dc54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e300:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    e304:	68a1      	ldr	r1, [r4, #8]
    e306:	f1b1 3fff 	cmp.w	r1, #4294967295
    e30a:	d005      	beq.n	e318 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    e30c:	2301      	movs	r3, #1
    e30e:	2203      	movs	r2, #3
    e310:	2005      	movs	r0, #5
    e312:	f001 fb3f 	bl	f994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    e316:	b140      	cbz	r0, e32a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    e318:	7e60      	ldrb	r0, [r4, #25]
    e31a:	2801      	cmp	r0, #1
    e31c:	d110      	bne.n	e340 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    e31e:	e009      	b.n	e334 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    e320:	f44f 6107 	mov.w	r1, #2160	; 0x870
    e324:	2070      	movs	r0, #112	; 0x70
    e326:	f002 f8c9 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e32a:	f640 0175 	movw	r1, #2165	; 0x875
    e32e:	2070      	movs	r0, #112	; 0x70
    e330:	f002 f8c4 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e334:	6920      	ldr	r0, [r4, #16]
    e336:	1e40      	subs	r0, r0, #1
    e338:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e33c:	f001 fa44 	bl	f7c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    e340:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e344:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e348:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e34c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e350:	6840      	ldr	r0, [r0, #4]
    e352:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e356:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e35a:	b001      	add	sp, #4
    e35c:	2101      	movs	r1, #1
    e35e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e362:	4710      	bx	r2
    e364:	f7ff fc76 	bl	dc54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e368:	f04f 30ff 	mov.w	r0, #4294967295
    e36c:	60a0      	str	r0, [r4, #8]
    e36e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    e372:	f88d 0000 	strb.w	r0, [sp]
    e376:	f89d 0000 	ldrb.w	r0, [sp]
    e37a:	b188      	cbz	r0, e3a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    e37c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e380:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e384:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e388:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e38c:	6840      	ldr	r0, [r0, #4]
    e38e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e392:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e396:	b001      	add	sp, #4
    e398:	2106      	movs	r1, #6
    e39a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e39e:	4710      	bx	r2
    e3a0:	f640 0186 	movw	r1, #2182	; 0x886
    e3a4:	2070      	movs	r0, #112	; 0x70
    e3a6:	f002 f889 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e3aa:	f7ff fc53 	bl	dc54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e3ae:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    e3b2:	f002 f80b 	bl	103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e3b6:	b120      	cbz	r0, e3c2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    e3b8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    e3bc:	b130      	cbz	r0, e3cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    e3be:	e009      	b.n	e3d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    e3c0:	e059      	b.n	e476 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    e3c2:	f640 0196 	movw	r1, #2198	; 0x896
    e3c6:	2070      	movs	r0, #112	; 0x70
    e3c8:	f002 f878 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e3cc:	f001 fec4 	bl	10158 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    e3d0:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    e3d4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    e3d8:	b158      	cbz	r0, e3f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    e3da:	492b      	ldr	r1, [pc, #172]	; (e488 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    e3dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    e3e0:	6008      	str	r0, [r1, #0]
    e3e2:	2005      	movs	r0, #5
    e3e4:	f001 fbaa 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    e3e8:	f001 ff02 	bl	101f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    e3ec:	2000      	movs	r0, #0
    e3ee:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    e3f2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e3f6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e3fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e3fe:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e402:	6840      	ldr	r0, [r0, #4]
    e404:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e408:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e40c:	b001      	add	sp, #4
    e40e:	2100      	movs	r1, #0
    e410:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e414:	4710      	bx	r2
    e416:	f001 fc49 	bl	fcac <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    e41a:	8ae0      	ldrh	r0, [r4, #22]
    e41c:	b110      	cbz	r0, e424 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    e41e:	f001 ffd5 	bl	103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e422:	b128      	cbz	r0, e430 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    e424:	4819      	ldr	r0, [pc, #100]	; (e48c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    e426:	7800      	ldrb	r0, [r0, #0]
    e428:	2803      	cmp	r0, #3
    e42a:	bf08      	it	eq
    e42c:	7766      	strbeq	r6, [r4, #29]
    e42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e430:	f640 01a1 	movw	r1, #2209	; 0x8a1
    e434:	2070      	movs	r0, #112	; 0x70
    e436:	f002 f841 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e43a:	4815      	ldr	r0, [pc, #84]	; (e490 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    e43c:	6006      	str	r6, [r0, #0]
    e43e:	6888      	ldr	r0, [r1, #8]
    e440:	6006      	str	r6, [r0, #0]
    e442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e444:	7808      	ldrb	r0, [r1, #0]
    e446:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e44a:	f002 b907 	b.w	1065c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    e44e:	f7ff fc01 	bl	dc54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e452:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e456:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e45a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e45e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e462:	6840      	ldr	r0, [r0, #4]
    e464:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e468:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e46c:	b001      	add	sp, #4
    e46e:	2105      	movs	r1, #5
    e470:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e474:	4710      	bx	r2
    e476:	f640 01b4 	movw	r1, #2228	; 0x8b4
    e47a:	2070      	movs	r0, #112	; 0x70
    e47c:	f002 f81e 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e480:	20000f84 	.word	0x20000f84
    e484:	20000014 	.word	0x20000014
    e488:	4001f508 	.word	0x4001f508
    e48c:	20000016 	.word	0x20000016
    e490:	40000508 	.word	0x40000508

0000e494 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    e494:	4803      	ldr	r0, [pc, #12]	; (e4a4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    e496:	b510      	push	{r4, lr}
    e498:	7840      	ldrb	r0, [r0, #1]
    e49a:	f00a f9ce 	bl	1883a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    e49e:	b280      	uxth	r0, r0
    e4a0:	bd10      	pop	{r4, pc}
    e4a2:	0000      	.short	0x0000
    e4a4:	20000016 	.word	0x20000016

0000e4a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    e4a8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4ac:	4682      	mov	sl, r0
    e4ae:	48dc      	ldr	r0, [pc, #880]	; (e820 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    e4b0:	b08b      	sub	sp, #44	; 0x2c
    e4b2:	6800      	ldr	r0, [r0, #0]
    e4b4:	4ddb      	ldr	r5, [pc, #876]	; (e824 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    e4b6:	05c0      	lsls	r0, r0, #23
    e4b8:	0dc0      	lsrs	r0, r0, #23
    e4ba:	d00e      	beq.n	e4da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    e4bc:	3810      	subs	r0, #16
    e4be:	b240      	sxtb	r0, r0
    e4c0:	2800      	cmp	r0, #0
    e4c2:	bfb8      	it	lt
    e4c4:	f000 000f 	andlt.w	r0, r0, #15
    e4c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e4cc:	bfac      	ite	ge
    e4ce:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    e4d2:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    e4d6:	0940      	lsrs	r0, r0, #5
    e4d8:	d00d      	beq.n	e4f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    e4da:	980c      	ldr	r0, [sp, #48]	; 0x30
    e4dc:	f04f 0b00 	mov.w	fp, #0
    e4e0:	7800      	ldrb	r0, [r0, #0]
    e4e2:	2800      	cmp	r0, #0
    e4e4:	bf18      	it	ne
    e4e6:	2801      	cmpne	r0, #1
    e4e8:	d018      	beq.n	e51c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    e4ea:	f240 714f 	movw	r1, #1871	; 0x74f
    e4ee:	f04f 0070 	mov.w	r0, #112	; 0x70
    e4f2:	f001 ffe3 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e4f6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    e4fa:	f04f 0b01 	mov.w	fp, #1
    e4fe:	2820      	cmp	r0, #32
    e500:	d007      	beq.n	e512 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    e502:	980c      	ldr	r0, [sp, #48]	; 0x30
    e504:	7800      	ldrb	r0, [r0, #0]
    e506:	b148      	cbz	r0, e51c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    e508:	f240 714b 	movw	r1, #1867	; 0x74b
    e50c:	2070      	movs	r0, #112	; 0x70
    e50e:	f001 ffd5 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e512:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    e516:	2070      	movs	r0, #112	; 0x70
    e518:	f001 ffd0 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e51c:	4cc2      	ldr	r4, [pc, #776]	; (e828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    e51e:	b124      	cbz	r4, e52a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    e520:	2100      	movs	r1, #0
    e522:	f240 7052 	movw	r0, #1874	; 0x752
    e526:	f3af 8000 	nop.w
    e52a:	49c0      	ldr	r1, [pc, #768]	; (e82c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    e52c:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    e530:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    e534:	f04f 0801 	mov.w	r8, #1
    e538:	9000      	str	r0, [sp, #0]
    e53a:	b124      	cbz	r4, e546 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    e53c:	2100      	movs	r1, #0
    e53e:	f240 705a 	movw	r0, #1882	; 0x75a
    e542:	f3af 8000 	nop.w
    e546:	f1b8 0f00 	cmp.w	r8, #0
    e54a:	d009      	beq.n	e560 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    e54c:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    e550:	f04f 0900 	mov.w	r9, #0
    e554:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    e558:	f1bb 0f00 	cmp.w	fp, #0
    e55c:	d007      	beq.n	e56e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    e55e:	e032      	b.n	e5c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    e560:	48b3      	ldr	r0, [pc, #716]	; (e830 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    e562:	2800      	cmp	r0, #0
    e564:	bf18      	it	ne
    e566:	f3af 8000 	nopne.w
    e56a:	b662      	cpsie	i
    e56c:	e7ee      	b.n	e54c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    e56e:	4637      	mov	r7, r6
    e570:	2001      	movs	r0, #1
    e572:	ea20 0607 	bic.w	r6, r0, r7
    e576:	48af      	ldr	r0, [pc, #700]	; (e834 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    e578:	2240      	movs	r2, #64	; 0x40
    e57a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    e57e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    e582:	f00a fac8 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e586:	b124      	cbz	r4, e592 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    e588:	2100      	movs	r1, #0
    e58a:	f240 50cd 	movw	r0, #1485	; 0x5cd
    e58e:	f3af 8000 	nop.w
    e592:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    e596:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    e59a:	6a09      	ldr	r1, [r1, #32]
    e59c:	6201      	str	r1, [r0, #32]
    e59e:	b124      	cbz	r4, e5aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    e5a0:	2100      	movs	r1, #0
    e5a2:	f240 50d1 	movw	r0, #1489	; 0x5d1
    e5a6:	f3af 8000 	nop.w
    e5aa:	b124      	cbz	r4, e5b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    e5ac:	2100      	movs	r1, #0
    e5ae:	f240 7064 	movw	r0, #1892	; 0x764
    e5b2:	f3af 8000 	nop.w
    e5b6:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    e5ba:	f88d 0004 	strb.w	r0, [sp, #4]
    e5be:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e5c2:	2800      	cmp	r0, #0
    e5c4:	d1b9      	bne.n	e53a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e5c6:	b124      	cbz	r4, e5d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    e5c8:	2100      	movs	r1, #0
    e5ca:	f240 706e 	movw	r0, #1902	; 0x76e
    e5ce:	f3af 8000 	nop.w
    e5d2:	f001 f855 	bl	f680 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    e5d6:	4680      	mov	r8, r0
    e5d8:	4633      	mov	r3, r6
    e5da:	aa06      	add	r2, sp, #24
    e5dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    e5de:	f7ff fa65 	bl	daac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9a0>
    e5e2:	b124      	cbz	r4, e5ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    e5e4:	2100      	movs	r1, #0
    e5e6:	f240 7075 	movw	r0, #1909	; 0x775
    e5ea:	f3af 8000 	nop.w
    e5ee:	4991      	ldr	r1, [pc, #580]	; (e834 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    e5f0:	a806      	add	r0, sp, #24
    e5f2:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    e5f6:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    e5fa:	2901      	cmp	r1, #1
    e5fc:	bf18      	it	ne
    e5fe:	2902      	cmpne	r1, #2
    e600:	d13c      	bne.n	e67c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    e602:	9906      	ldr	r1, [sp, #24]
    e604:	9b07      	ldr	r3, [sp, #28]
    e606:	eba1 0108 	sub.w	r1, r1, r8
    e60a:	4a8b      	ldr	r2, [pc, #556]	; (e838 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    e60c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e610:	eba3 0308 	sub.w	r3, r3, r8
    e614:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    e618:	2902      	cmp	r1, #2
    e61a:	d371      	bcc.n	e700 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e61c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    e620:	d26e      	bcs.n	e700 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e622:	429a      	cmp	r2, r3
    e624:	d36c      	bcc.n	e700 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e626:	f04f 0901 	mov.w	r9, #1
    e62a:	ab01      	add	r3, sp, #4
    e62c:	aa05      	add	r2, sp, #20
    e62e:	4631      	mov	r1, r6
    e630:	f7fe ff32 	bl	d498 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    e634:	2800      	cmp	r0, #0
    e636:	d06b      	beq.n	e710 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    e638:	f89d 1014 	ldrb.w	r1, [sp, #20]
    e63c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    e640:	4633      	mov	r3, r6
    e642:	428a      	cmp	r2, r1
    e644:	d068      	beq.n	e718 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    e646:	2005      	movs	r0, #5
    e648:	f7fe fd6e 	bl	d128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    e64c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    e650:	7048      	strb	r0, [r1, #1]
    e652:	f89d 0014 	ldrb.w	r0, [sp, #20]
    e656:	2820      	cmp	r0, #32
    e658:	bf03      	ittte	eq
    e65a:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    e65e:	f880 a020 	strbeq.w	sl, [r0, #32]
    e662:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    e666:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    e66a:	bf18      	it	ne
    e66c:	f880 a001 	strbne.w	sl, [r0, #1]
    e670:	4632      	mov	r2, r6
    e672:	4651      	mov	r1, sl
    e674:	f05f 0003 	movs.w	r0, #3
    e678:	f7ff fbbe 	bl	ddf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    e67c:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    e680:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    e684:	f88d 0004 	strb.w	r0, [sp, #4]
    e688:	f89d 7004 	ldrb.w	r7, [sp, #4]
    e68c:	b124      	cbz	r4, e698 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    e68e:	2100      	movs	r1, #0
    e690:	f240 707c 	movw	r0, #1916	; 0x77c
    e694:	f3af 8000 	nop.w
    e698:	4868      	ldr	r0, [pc, #416]	; (e83c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    e69a:	2800      	cmp	r0, #0
    e69c:	bf18      	it	ne
    e69e:	f3af 8000 	nopne.w
    e6a2:	f3ef 8810 	mrs	r8, PRIMASK
    e6a6:	b672      	cpsid	i
    e6a8:	b124      	cbz	r4, e6b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    e6aa:	2100      	movs	r1, #0
    e6ac:	f240 7082 	movw	r0, #1922	; 0x782
    e6b0:	f3af 8000 	nop.w
    e6b4:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    e6b8:	f88d 0004 	strb.w	r0, [sp, #4]
    e6bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e6c0:	2800      	cmp	r0, #0
    e6c2:	f47f af3a 	bne.w	e53a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e6c6:	b124      	cbz	r4, e6d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    e6c8:	2100      	movs	r1, #0
    e6ca:	f240 708a 	movw	r0, #1930	; 0x78a
    e6ce:	f3af 8000 	nop.w
    e6d2:	f10d 0e18 	add.w	lr, sp, #24
    e6d6:	9800      	ldr	r0, [sp, #0]
    e6d8:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    e6dc:	f100 0008 	add.w	r0, r0, #8
    e6e0:	f1b9 0f00 	cmp.w	r9, #0
    e6e4:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    e6e8:	d044      	beq.n	e774 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    e6ea:	b124      	cbz	r4, e6f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    e6ec:	2100      	movs	r1, #0
    e6ee:	f240 7097 	movw	r0, #1943	; 0x797
    e6f2:	f3af 8000 	nop.w
    e6f6:	f1bb 0f00 	cmp.w	fp, #0
    e6fa:	d12c      	bne.n	e756 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e6fc:	e016      	b.n	e72c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    e6fe:	e7ff      	b.n	e700 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e700:	4632      	mov	r2, r6
    e702:	4651      	mov	r1, sl
    e704:	2004      	movs	r0, #4
    e706:	f7ff fb77 	bl	ddf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    e70a:	f04f 0901 	mov.w	r9, #1
    e70e:	e7b5      	b.n	e67c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    e710:	4632      	mov	r2, r6
    e712:	4651      	mov	r1, sl
    e714:	2004      	movs	r0, #4
    e716:	e7af      	b.n	e678 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    e718:	2920      	cmp	r1, #32
    e71a:	bf19      	ittee	ne
    e71c:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    e720:	7840      	ldrbne	r0, [r0, #1]
    e722:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    e726:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    e72a:	e78f      	b.n	e64c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    e72c:	b19f      	cbz	r7, e756 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e72e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    e732:	2820      	cmp	r0, #32
    e734:	d10f      	bne.n	e756 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e736:	b124      	cbz	r4, e742 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    e738:	2100      	movs	r1, #0
    e73a:	f240 709c 	movw	r0, #1948	; 0x79c
    e73e:	f3af 8000 	nop.w
    e742:	4631      	mov	r1, r6
    e744:	2002      	movs	r0, #2
    e746:	f7ff fb87 	bl	de58 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    e74a:	b920      	cbnz	r0, e756 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e74c:	980c      	ldr	r0, [sp, #48]	; 0x30
    e74e:	7800      	ldrb	r0, [r0, #0]
    e750:	b3f0      	cbz	r0, e7d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    e752:	2801      	cmp	r0, #1
    e754:	d04c      	beq.n	e7f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    e756:	b124      	cbz	r4, e762 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    e758:	2100      	movs	r1, #0
    e75a:	f240 70b9 	movw	r0, #1977	; 0x7b9
    e75e:	f3af 8000 	nop.w
    e762:	f1bb 0f00 	cmp.w	fp, #0
    e766:	bf18      	it	ne
    e768:	2001      	movne	r0, #1
    e76a:	d04a      	beq.n	e802 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    e76c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    e770:	f04f 0901 	mov.w	r9, #1
    e774:	b124      	cbz	r4, e780 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    e776:	2100      	movs	r1, #0
    e778:	f240 70ca 	movw	r0, #1994	; 0x7ca
    e77c:	f3af 8000 	nop.w
    e780:	f1b8 0f00 	cmp.w	r8, #0
    e784:	d045      	beq.n	e812 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    e786:	b124      	cbz	r4, e792 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    e788:	2100      	movs	r1, #0
    e78a:	f240 70ce 	movw	r0, #1998	; 0x7ce
    e78e:	f3af 8000 	nop.w
    e792:	f1b9 0f00 	cmp.w	r9, #0
    e796:	d011      	beq.n	e7bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    e798:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    e79c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    e7a0:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    e7a4:	2820      	cmp	r0, #32
    e7a6:	d009      	beq.n	e7bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    e7a8:	b124      	cbz	r4, e7b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    e7aa:	2100      	movs	r1, #0
    e7ac:	f240 70d5 	movw	r0, #2005	; 0x7d5
    e7b0:	f3af 8000 	nop.w
    e7b4:	4822      	ldr	r0, [pc, #136]	; (e840 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    e7b6:	7840      	ldrb	r0, [r0, #1]
    e7b8:	f001 ff50 	bl	1065c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    e7bc:	b124      	cbz	r4, e7c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    e7be:	2100      	movs	r1, #0
    e7c0:	f240 70da 	movw	r0, #2010	; 0x7da
    e7c4:	f3af 8000 	nop.w
    e7c8:	b00d      	add	sp, #52	; 0x34
    e7ca:	4648      	mov	r0, r9
    e7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7d0:	e7ff      	b.n	e7d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    e7d2:	b124      	cbz	r4, e7de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    e7d4:	2100      	movs	r1, #0
    e7d6:	f240 70a4 	movw	r0, #1956	; 0x7a4
    e7da:	f3af 8000 	nop.w
    e7de:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    e7e2:	4651      	mov	r1, sl
    e7e4:	2004      	movs	r0, #4
    e7e6:	f7ff fb07 	bl	ddf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    e7ea:	f04f 0901 	mov.w	r9, #1
    e7ee:	e7c1      	b.n	e774 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    e7f0:	2c00      	cmp	r4, #0
    e7f2:	f43f aea2 	beq.w	e53a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e7f6:	2100      	movs	r1, #0
    e7f8:	f240 70af 	movw	r0, #1967	; 0x7af
    e7fc:	f3af 8000 	nop.w
    e800:	e69b      	b.n	e53a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e802:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    e806:	2001      	movs	r0, #1
    e808:	ea20 0101 	bic.w	r1, r0, r1
    e80c:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    e810:	e7ac      	b.n	e76c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    e812:	4807      	ldr	r0, [pc, #28]	; (e830 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    e814:	2800      	cmp	r0, #0
    e816:	bf18      	it	ne
    e818:	f3af 8000 	nopne.w
    e81c:	b662      	cpsie	i
    e81e:	e7b2      	b.n	e786 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    e820:	e000ed04 	.word	0xe000ed04
    e824:	20001304 	.word	0x20001304
    e828:	00000000 	.word	0x00000000
    e82c:	20000f84 	.word	0x20000f84
    e830:	00000000 	.word	0x00000000
    e834:	20001284 	.word	0x20001284
    e838:	003fffff 	.word	0x003fffff
    e83c:	00000000 	.word	0x00000000
    e840:	20000014 	.word	0x20000014

0000e844 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    e844:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e848:	48a5      	ldr	r0, [pc, #660]	; (eae0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    e84a:	b08c      	sub	sp, #48	; 0x30
    e84c:	6800      	ldr	r0, [r0, #0]
    e84e:	05c0      	lsls	r0, r0, #23
    e850:	0dc0      	lsrs	r0, r0, #23
    e852:	d011      	beq.n	e878 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    e854:	3810      	subs	r0, #16
    e856:	b240      	sxtb	r0, r0
    e858:	2800      	cmp	r0, #0
    e85a:	bfb8      	it	lt
    e85c:	f000 000f 	andlt.w	r0, r0, #15
    e860:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e864:	bfac      	ite	ge
    e866:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    e86a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    e86e:	0940      	lsrs	r0, r0, #5
    e870:	bf08      	it	eq
    e872:	f04f 0901 	moveq.w	r9, #1
    e876:	d001      	beq.n	e87c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    e878:	f04f 0900 	mov.w	r9, #0
    e87c:	980c      	ldr	r0, [sp, #48]	; 0x30
    e87e:	7800      	ldrb	r0, [r0, #0]
    e880:	2800      	cmp	r0, #0
    e882:	f04f 0000 	mov.w	r0, #0
    e886:	bf1c      	itt	ne
    e888:	b00d      	addne	sp, #52	; 0x34
    e88a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e88e:	f8df a254 	ldr.w	sl, [pc, #596]	; eae4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    e892:	4d95      	ldr	r5, [pc, #596]	; (eae8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    e894:	4c95      	ldr	r4, [pc, #596]	; (eaec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    e896:	f04f 0b00 	mov.w	fp, #0
    e89a:	900b      	str	r0, [sp, #44]	; 0x2c
    e89c:	b125      	cbz	r5, e8a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    e89e:	2100      	movs	r1, #0
    e8a0:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    e8a4:	f3af 8000 	nop.w
    e8a8:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    e8ac:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    e8b0:	f04f 0800 	mov.w	r8, #0
    e8b4:	b125      	cbz	r5, e8c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    e8b6:	2100      	movs	r1, #0
    e8b8:	f240 605d 	movw	r0, #1629	; 0x65d
    e8bc:	f3af 8000 	nop.w
    e8c0:	f1b9 0f00 	cmp.w	r9, #0
    e8c4:	d11d      	bne.n	e902 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    e8c6:	4637      	mov	r7, r6
    e8c8:	2001      	movs	r0, #1
    e8ca:	ea20 0607 	bic.w	r6, r0, r7
    e8ce:	4888      	ldr	r0, [pc, #544]	; (eaf0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    e8d0:	2240      	movs	r2, #64	; 0x40
    e8d2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    e8d6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    e8da:	f00a f91c 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e8de:	b125      	cbz	r5, e8ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    e8e0:	2100      	movs	r1, #0
    e8e2:	f240 50cd 	movw	r0, #1485	; 0x5cd
    e8e6:	f3af 8000 	nop.w
    e8ea:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    e8ee:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    e8f2:	6a09      	ldr	r1, [r1, #32]
    e8f4:	6201      	str	r1, [r0, #32]
    e8f6:	b125      	cbz	r5, e902 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    e8f8:	2100      	movs	r1, #0
    e8fa:	f240 50d1 	movw	r0, #1489	; 0x5d1
    e8fe:	f3af 8000 	nop.w
    e902:	b125      	cbz	r5, e90e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    e904:	2100      	movs	r1, #0
    e906:	f240 6065 	movw	r0, #1637	; 0x665
    e90a:	f3af 8000 	nop.w
    e90e:	f000 feb7 	bl	f680 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    e912:	4607      	mov	r7, r0
    e914:	4633      	mov	r3, r6
    e916:	466a      	mov	r2, sp
    e918:	990c      	ldr	r1, [sp, #48]	; 0x30
    e91a:	f7ff f8c7 	bl	daac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9a0>
    e91e:	b125      	cbz	r5, e92a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    e920:	2100      	movs	r1, #0
    e922:	f240 606b 	movw	r0, #1643	; 0x66b
    e926:	f3af 8000 	nop.w
    e92a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e92e:	2820      	cmp	r0, #32
    e930:	d014      	beq.n	e95c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    e932:	6920      	ldr	r0, [r4, #16]
    e934:	9900      	ldr	r1, [sp, #0]
    e936:	1a09      	subs	r1, r1, r0
    e938:	0209      	lsls	r1, r1, #8
    e93a:	17ca      	asrs	r2, r1, #31
    e93c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    e940:	1209      	asrs	r1, r1, #8
    e942:	d50b      	bpl.n	e95c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    e944:	e9dd 2100 	ldrd	r2, r1, [sp]
    e948:	1a89      	subs	r1, r1, r2
    e94a:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    e94e:	4408      	add	r0, r1
    e950:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e954:	e9cd 2000 	strd	r2, r0, [sp]
    e958:	f04f 0801 	mov.w	r8, #1
    e95c:	b14d      	cbz	r5, e972 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    e95e:	2100      	movs	r1, #0
    e960:	f240 6075 	movw	r0, #1653	; 0x675
    e964:	f3af 8000 	nop.w
    e968:	2100      	movs	r1, #0
    e96a:	f240 607b 	movw	r0, #1659	; 0x67b
    e96e:	f3af 8000 	nop.w
    e972:	9800      	ldr	r0, [sp, #0]
    e974:	9901      	ldr	r1, [sp, #4]
    e976:	1bc0      	subs	r0, r0, r7
    e978:	1bc9      	subs	r1, r1, r7
    e97a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e97e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e982:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    e986:	d205      	bcs.n	e994 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    e988:	458a      	cmp	sl, r1
    e98a:	d303      	bcc.n	e994 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    e98c:	f1b9 0f00 	cmp.w	r9, #0
    e990:	d10c      	bne.n	e9ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    e992:	e003      	b.n	e99c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    e994:	f1b9 0f00 	cmp.w	r9, #0
    e998:	d038      	beq.n	ea0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    e99a:	e094      	b.n	eac6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    e99c:	4633      	mov	r3, r6
    e99e:	463a      	mov	r2, r7
    e9a0:	4669      	mov	r1, sp
    e9a2:	4854      	ldr	r0, [pc, #336]	; (eaf4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    e9a4:	f7fe fbfc 	bl	d1a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    e9a8:	ea48 0800 	orr.w	r8, r8, r0
    e9ac:	f1b8 0f00 	cmp.w	r8, #0
    e9b0:	d022      	beq.n	e9f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    e9b2:	9800      	ldr	r0, [sp, #0]
    e9b4:	f009 ff41 	bl	1883a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    e9b8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    e9bc:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e9c0:	4b4d      	ldr	r3, [pc, #308]	; (eaf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    e9c2:	4411      	add	r1, r2
    e9c4:	1c49      	adds	r1, r1, #1
    e9c6:	1842      	adds	r2, r0, r1
    e9c8:	4298      	cmp	r0, r3
    e9ca:	d841      	bhi.n	ea50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    e9cc:	4849      	ldr	r0, [pc, #292]	; (eaf4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    e9ce:	4281      	cmp	r1, r0
    e9d0:	dc5a      	bgt.n	ea88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    e9d2:	4240      	negs	r0, r0
    e9d4:	4281      	cmp	r1, r0
    e9d6:	db5f      	blt.n	ea98 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    e9d8:	1c58      	adds	r0, r3, #1
    e9da:	4290      	cmp	r0, r2
    e9dc:	bfdc      	itt	le
    e9de:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    e9e2:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    e9e6:	dd05      	ble.n	e9f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    e9e8:	2a00      	cmp	r2, #0
    e9ea:	bfbc      	itt	lt
    e9ec:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    e9f0:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    e9f4:	980c      	ldr	r0, [sp, #48]	; 0x30
    e9f6:	60c2      	str	r2, [r0, #12]
    e9f8:	2001      	movs	r0, #1
    e9fa:	900b      	str	r0, [sp, #44]	; 0x2c
    e9fc:	2d00      	cmp	r5, #0
    e9fe:	d062      	beq.n	eac6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    ea00:	2100      	movs	r1, #0
    ea02:	f240 608e 	movw	r0, #1678	; 0x68e
    ea06:	f3af 8000 	nop.w
    ea0a:	e05c      	b.n	eac6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    ea0c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    ea10:	aa08      	add	r2, sp, #32
    ea12:	a907      	add	r1, sp, #28
    ea14:	f000 fcd6 	bl	f3c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ea18:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    ea1c:	2820      	cmp	r0, #32
    ea1e:	d01c      	beq.n	ea5a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    ea20:	6920      	ldr	r0, [r4, #16]
    ea22:	1d40      	adds	r0, r0, #5
    ea24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ea28:	e9dd 2100 	ldrd	r2, r1, [sp]
    ea2c:	1a89      	subs	r1, r1, r2
    ea2e:	4401      	add	r1, r0
    ea30:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ea34:	e9cd 0100 	strd	r0, r1, [sp]
    ea38:	f009 feff 	bl	1883a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ea3c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    ea40:	f89d 2008 	ldrb.w	r2, [sp, #8]
    ea44:	4b2c      	ldr	r3, [pc, #176]	; (eaf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    ea46:	4411      	add	r1, r2
    ea48:	1c4a      	adds	r2, r1, #1
    ea4a:	1881      	adds	r1, r0, r2
    ea4c:	4298      	cmp	r0, r3
    ea4e:	d918      	bls.n	ea82 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    ea50:	f240 6109 	movw	r1, #1545	; 0x609
    ea54:	2070      	movs	r0, #112	; 0x70
    ea56:	f001 fd31 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ea5a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    ea5e:	f107 0609 	add.w	r6, r7, #9
    ea62:	b120      	cbz	r0, ea6e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    ea64:	f001 fcb2 	bl	103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    ea68:	2800      	cmp	r0, #0
    ea6a:	bf08      	it	eq
    ea6c:	3632      	addeq	r6, #50	; 0x32
    ea6e:	4823      	ldr	r0, [pc, #140]	; (eafc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    ea70:	7841      	ldrb	r1, [r0, #1]
    ea72:	9807      	ldr	r0, [sp, #28]
    ea74:	4281      	cmp	r1, r0
    ea76:	bf84      	itt	hi
    ea78:	1a08      	subhi	r0, r1, r0
    ea7a:	4406      	addhi	r6, r0
    ea7c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    ea80:	e7d2      	b.n	ea28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    ea82:	481c      	ldr	r0, [pc, #112]	; (eaf4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    ea84:	4282      	cmp	r2, r0
    ea86:	dd04      	ble.n	ea92 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    ea88:	f240 610a 	movw	r1, #1546	; 0x60a
    ea8c:	2070      	movs	r0, #112	; 0x70
    ea8e:	f001 fd15 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ea92:	481b      	ldr	r0, [pc, #108]	; (eb00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    ea94:	4282      	cmp	r2, r0
    ea96:	da04      	bge.n	eaa2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    ea98:	f240 610b 	movw	r1, #1547	; 0x60b
    ea9c:	2070      	movs	r0, #112	; 0x70
    ea9e:	f001 fd0d 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    eaa2:	4818      	ldr	r0, [pc, #96]	; (eb04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    eaa4:	4288      	cmp	r0, r1
    eaa6:	bfdc      	itt	le
    eaa8:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    eaac:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    eab0:	dd05      	ble.n	eabe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    eab2:	2900      	cmp	r1, #0
    eab4:	bfbc      	itt	lt
    eab6:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    eaba:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    eabe:	980c      	ldr	r0, [sp, #48]	; 0x30
    eac0:	60c1      	str	r1, [r0, #12]
    eac2:	2001      	movs	r0, #1
    eac4:	900b      	str	r0, [sp, #44]	; 0x2c
    eac6:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    eaca:	f88d 0010 	strb.w	r0, [sp, #16]
    eace:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ead2:	2800      	cmp	r0, #0
    ead4:	f47f aee2 	bne.w	e89c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    ead8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eada:	b00d      	add	sp, #52	; 0x34
    eadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eae0:	e000ed04 	.word	0xe000ed04
    eae4:	003fffff 	.word	0x003fffff
    eae8:	00000000 	.word	0x00000000
    eaec:	20001304 	.word	0x20001304
    eaf0:	20001284 	.word	0x20001284
    eaf4:	07a12000 	.word	0x07a12000
    eaf8:	1e847fff 	.word	0x1e847fff
    eafc:	20000016 	.word	0x20000016
    eb00:	f85ee000 	.word	0xf85ee000
    eb04:	1e848000 	.word	0x1e848000

0000eb08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    eb08:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb0c:	4d88      	ldr	r5, [pc, #544]	; (ed30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    eb0e:	b08c      	sub	sp, #48	; 0x30
    eb10:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    eb14:	2000      	movs	r0, #0
    eb16:	9009      	str	r0, [sp, #36]	; 0x24
    eb18:	2001      	movs	r0, #1
    eb1a:	4c86      	ldr	r4, [pc, #536]	; (ed34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    eb1c:	f04f 0900 	mov.w	r9, #0
    eb20:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    eb24:	4680      	mov	r8, r0
    eb26:	9008      	str	r0, [sp, #32]
    eb28:	b124      	cbz	r4, eb34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    eb2a:	2100      	movs	r1, #0
    eb2c:	f240 70e9 	movw	r0, #2025	; 0x7e9
    eb30:	f3af 8000 	nop.w
    eb34:	9808      	ldr	r0, [sp, #32]
    eb36:	2800      	cmp	r0, #0
    eb38:	d037      	beq.n	ebaa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    eb3a:	bf00      	nop
    eb3c:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    eb40:	b124      	cbz	r4, eb4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    eb42:	2100      	movs	r1, #0
    eb44:	f240 70ee 	movw	r0, #2030	; 0x7ee
    eb48:	f3af 8000 	nop.w
    eb4c:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    eb50:	2240      	movs	r2, #64	; 0x40
    eb52:	ea28 060a 	bic.w	r6, r8, sl
    eb56:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    eb5a:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    eb5e:	4683      	mov	fp, r0
    eb60:	f009 ffd9 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb64:	b124      	cbz	r4, eb70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    eb66:	2100      	movs	r1, #0
    eb68:	f240 50cd 	movw	r0, #1485	; 0x5cd
    eb6c:	f3af 8000 	nop.w
    eb70:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    eb74:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    eb78:	9000      	str	r0, [sp, #0]
    eb7a:	6a09      	ldr	r1, [r1, #32]
    eb7c:	6201      	str	r1, [r0, #32]
    eb7e:	b124      	cbz	r4, eb8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    eb80:	2100      	movs	r1, #0
    eb82:	f240 50d1 	movw	r0, #1489	; 0x5d1
    eb86:	f3af 8000 	nop.w
    eb8a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    eb8e:	f88d 0008 	strb.w	r0, [sp, #8]
    eb92:	f89d 0008 	ldrb.w	r0, [sp, #8]
    eb96:	b178      	cbz	r0, ebb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    eb98:	2c00      	cmp	r4, #0
    eb9a:	bf1c      	itt	ne
    eb9c:	2100      	movne	r1, #0
    eb9e:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    eba2:	d0c1      	beq.n	eb28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    eba4:	f3af 8000 	nop.w
    eba8:	e7be      	b.n	eb28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    ebaa:	4863      	ldr	r0, [pc, #396]	; (ed38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    ebac:	2800      	cmp	r0, #0
    ebae:	bf18      	it	ne
    ebb0:	f3af 8000 	nopne.w
    ebb4:	b662      	cpsie	i
    ebb6:	e7c1      	b.n	eb3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    ebb8:	b124      	cbz	r4, ebc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    ebba:	2100      	movs	r1, #0
    ebbc:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    ebc0:	f3af 8000 	nop.w
    ebc4:	980c      	ldr	r0, [sp, #48]	; 0x30
    ebc6:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    ebca:	2803      	cmp	r0, #3
    ebcc:	d172      	bne.n	ecb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    ebce:	f8dd a000 	ldr.w	sl, [sp]
    ebd2:	f8cd a018 	str.w	sl, [sp, #24]
    ebd6:	990c      	ldr	r1, [sp, #48]	; 0x30
    ebd8:	f89a 0020 	ldrb.w	r0, [sl, #32]
    ebdc:	4288      	cmp	r0, r1
    ebde:	bf14      	ite	ne
    ebe0:	f04f 0b00 	movne.w	fp, #0
    ebe4:	f04f 0b01 	moveq.w	fp, #1
    ebe8:	f10a 0c20 	add.w	ip, sl, #32
    ebec:	4686      	mov	lr, r0
    ebee:	2220      	movs	r2, #32
    ebf0:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    ebf4:	e003      	b.n	ebfe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    ebf6:	4602      	mov	r2, r0
    ebf8:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    ebfc:	7840      	ldrb	r0, [r0, #1]
    ebfe:	4288      	cmp	r0, r1
    ec00:	d002      	beq.n	ec08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    ec02:	2820      	cmp	r0, #32
    ec04:	d00a      	beq.n	ec1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    ec06:	e7f6      	b.n	ebf6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    ec08:	2820      	cmp	r0, #32
    ec0a:	d007      	beq.n	ec1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    ec0c:	4586      	cmp	lr, r0
    ec0e:	d107      	bne.n	ec20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    ec10:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    ec14:	7840      	ldrb	r0, [r0, #1]
    ec16:	f88c 0000 	strb.w	r0, [ip]
    ec1a:	e007      	b.n	ec2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    ec1c:	4648      	mov	r0, r9
    ec1e:	e00c      	b.n	ec3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    ec20:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ec24:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    ec28:	7840      	ldrb	r0, [r0, #1]
    ec2a:	7048      	strb	r0, [r1, #1]
    ec2c:	b124      	cbz	r4, ec38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    ec2e:	2100      	movs	r1, #0
    ec30:	f240 5037 	movw	r0, #1335	; 0x537
    ec34:	f3af 8000 	nop.w
    ec38:	4640      	mov	r0, r8
    ec3a:	ea10 0f0b 	tst.w	r0, fp
    ec3e:	bf18      	it	ne
    ec40:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    ec44:	2800      	cmp	r0, #0
    ec46:	d052      	beq.n	ecee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ec48:	b124      	cbz	r4, ec54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    ec4a:	2100      	movs	r1, #0
    ec4c:	f240 70fd 	movw	r0, #2045	; 0x7fd
    ec50:	f3af 8000 	nop.w
    ec54:	4632      	mov	r2, r6
    ec56:	2001      	movs	r0, #1
    ec58:	990c      	ldr	r1, [sp, #48]	; 0x30
    ec5a:	f7ff f8cd 	bl	ddf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    ec5e:	9806      	ldr	r0, [sp, #24]
    ec60:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    ec64:	f88d 0008 	strb.w	r0, [sp, #8]
    ec68:	f89d a008 	ldrb.w	sl, [sp, #8]
    ec6c:	b124      	cbz	r4, ec78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    ec6e:	2100      	movs	r1, #0
    ec70:	f640 0008 	movw	r0, #2056	; 0x808
    ec74:	f3af 8000 	nop.w
    ec78:	4830      	ldr	r0, [pc, #192]	; (ed3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    ec7a:	2800      	cmp	r0, #0
    ec7c:	bf18      	it	ne
    ec7e:	f3af 8000 	nopne.w
    ec82:	f3ef 8010 	mrs	r0, PRIMASK
    ec86:	b672      	cpsid	i
    ec88:	9008      	str	r0, [sp, #32]
    ec8a:	b124      	cbz	r4, ec96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    ec8c:	2100      	movs	r1, #0
    ec8e:	f640 000d 	movw	r0, #2061	; 0x80d
    ec92:	f3af 8000 	nop.w
    ec96:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    ec9a:	f88d 0008 	strb.w	r0, [sp, #8]
    ec9e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    eca2:	b140      	cbz	r0, ecb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    eca4:	2c00      	cmp	r4, #0
    eca6:	bf1c      	itt	ne
    eca8:	2100      	movne	r1, #0
    ecaa:	f640 0011 	movwne	r0, #2065	; 0x811
    ecae:	f43f af3b 	beq.w	eb28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    ecb2:	e777      	b.n	eba4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    ecb4:	e01b      	b.n	ecee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ecb6:	f1ba 0f00 	cmp.w	sl, #0
    ecba:	d008      	beq.n	ecce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    ecbc:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    ecc0:	2820      	cmp	r0, #32
    ecc2:	d104      	bne.n	ecce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    ecc4:	4631      	mov	r1, r6
    ecc6:	2002      	movs	r0, #2
    ecc8:	f7ff f8c6 	bl	de58 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    eccc:	b308      	cbz	r0, ed12 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    ecce:	b124      	cbz	r4, ecda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    ecd0:	2100      	movs	r1, #0
    ecd2:	f640 0025 	movw	r0, #2085	; 0x825
    ecd6:	f3af 8000 	nop.w
    ecda:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    ecde:	ea28 0000 	bic.w	r0, r8, r0
    ece2:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    ece6:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    ecea:	2001      	movs	r0, #1
    ecec:	9009      	str	r0, [sp, #36]	; 0x24
    ecee:	b124      	cbz	r4, ecfa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    ecf0:	2100      	movs	r1, #0
    ecf2:	f640 002e 	movw	r0, #2094	; 0x82e
    ecf6:	f3af 8000 	nop.w
    ecfa:	9808      	ldr	r0, [sp, #32]
    ecfc:	b188      	cbz	r0, ed22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    ecfe:	b124      	cbz	r4, ed0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    ed00:	2100      	movs	r1, #0
    ed02:	f640 0032 	movw	r0, #2098	; 0x832
    ed06:	f3af 8000 	nop.w
    ed0a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ed0c:	b00d      	add	sp, #52	; 0x34
    ed0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed12:	2c00      	cmp	r4, #0
    ed14:	d0f1      	beq.n	ecfa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    ed16:	2100      	movs	r1, #0
    ed18:	f44f 6002 	mov.w	r0, #2080	; 0x820
    ed1c:	f3af 8000 	nop.w
    ed20:	e7e6      	b.n	ecf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    ed22:	4805      	ldr	r0, [pc, #20]	; (ed38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    ed24:	2800      	cmp	r0, #0
    ed26:	bf18      	it	ne
    ed28:	f3af 8000 	nopne.w
    ed2c:	b662      	cpsie	i
    ed2e:	e7e6      	b.n	ecfe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    ed30:	20001304 	.word	0x20001304
	...

0000ed40 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    ed40:	2820      	cmp	r0, #32
    ed42:	bf24      	itt	cs
    ed44:	2000      	movcs	r0, #0
    ed46:	4770      	bxcs	lr
    ed48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ed4c:	4b03      	ldr	r3, [pc, #12]	; (ed5c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    ed4e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    ed52:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    ed56:	6042      	str	r2, [r0, #4]
    ed58:	2001      	movs	r0, #1
    ed5a:	4770      	bx	lr
    ed5c:	20000f84 	.word	0x20000f84

0000ed60 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    ed60:	b510      	push	{r4, lr}
    ed62:	2820      	cmp	r0, #32
    ed64:	d211      	bcs.n	ed8a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ed66:	490e      	ldr	r1, [pc, #56]	; (eda0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    ed68:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    ed6c:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    ed70:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    ed74:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    ed78:	b13b      	cbz	r3, ed8a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ed7a:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    ed7e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    ed82:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    ed86:	2a01      	cmp	r2, #1
    ed88:	d001      	beq.n	ed8e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    ed8a:	2000      	movs	r0, #0
    ed8c:	bd10      	pop	{r4, pc}
    ed8e:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    ed92:	4601      	mov	r1, r0
    ed94:	2000      	movs	r0, #0
    ed96:	f7ff f82f 	bl	ddf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    ed9a:	2001      	movs	r0, #1
    ed9c:	bd10      	pop	{r4, pc}
    ed9e:	0000      	.short	0x0000
    eda0:	20001304 	.word	0x20001304

0000eda4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    eda4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eda8:	4e80      	ldr	r6, [pc, #512]	; (efac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    edaa:	4680      	mov	r8, r0
    edac:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    edb0:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    edb4:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    edb8:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    edbc:	2800      	cmp	r0, #0
    edbe:	d068      	beq.n	ee92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    edc0:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    edc4:	4d7a      	ldr	r5, [pc, #488]	; (efb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    edc6:	b125      	cbz	r5, edd2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    edc8:	2100      	movs	r1, #0
    edca:	f640 30c1 	movw	r0, #3009	; 0xbc1
    edce:	f3af 8000 	nop.w
    edd2:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    edd6:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    edda:	2801      	cmp	r0, #1
    eddc:	d018      	beq.n	ee10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    edde:	b2c0      	uxtb	r0, r0
    ede0:	2804      	cmp	r0, #4
    ede2:	bf1c      	itt	ne
    ede4:	2805      	cmpne	r0, #5
    ede6:	2806      	cmpne	r0, #6
    ede8:	d058      	beq.n	ee9c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    edea:	b12d      	cbz	r5, edf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    edec:	f04f 0100 	mov.w	r1, #0
    edf0:	f640 30cd 	movw	r0, #3021	; 0xbcd
    edf4:	f3af 8000 	nop.w
    edf8:	f001 fc86 	bl	10708 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    edfc:	b125      	cbz	r5, ee08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    edfe:	2100      	movs	r1, #0
    ee00:	f640 30d1 	movw	r0, #3025	; 0xbd1
    ee04:	f3af 8000 	nop.w
    ee08:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ee0c:	2801      	cmp	r0, #1
    ee0e:	d1e6      	bne.n	edde <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ee10:	2401      	movs	r4, #1
    ee12:	b125      	cbz	r5, ee1e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ee14:	2100      	movs	r1, #0
    ee16:	f640 30d8 	movw	r0, #3032	; 0xbd8
    ee1a:	f3af 8000 	nop.w
    ee1e:	2c00      	cmp	r4, #0
    ee20:	d042      	beq.n	eea8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    ee22:	2000      	movs	r0, #0
    ee24:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    ee28:	b125      	cbz	r5, ee34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ee2a:	2100      	movs	r1, #0
    ee2c:	f640 30dd 	movw	r0, #3037	; 0xbdd
    ee30:	f3af 8000 	nop.w
    ee34:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    ee38:	2001      	movs	r0, #1
    ee3a:	ea20 090b 	bic.w	r9, r0, fp
    ee3e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    ee42:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    ee46:	2240      	movs	r2, #64	; 0x40
    ee48:	f009 fe65 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ee4c:	b125      	cbz	r5, ee58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    ee4e:	2100      	movs	r1, #0
    ee50:	f240 50cd 	movw	r0, #1485	; 0x5cd
    ee54:	f3af 8000 	nop.w
    ee58:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    ee5c:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    ee60:	6a00      	ldr	r0, [r0, #32]
    ee62:	f8ca 0020 	str.w	r0, [sl, #32]
    ee66:	b125      	cbz	r5, ee72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    ee68:	2100      	movs	r1, #0
    ee6a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    ee6e:	f3af 8000 	nop.w
    ee72:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    ee76:	f88d 0000 	strb.w	r0, [sp]
    ee7a:	f89d 0000 	ldrb.w	r0, [sp]
    ee7e:	b1d0      	cbz	r0, eeb6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    ee80:	2d00      	cmp	r5, #0
    ee82:	bf1c      	itt	ne
    ee84:	2100      	movne	r1, #0
    ee86:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    ee8a:	d0c2      	beq.n	ee12 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ee8c:	f3af 8000 	nop.w
    ee90:	e7bf      	b.n	ee12 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ee92:	f640 31b8 	movw	r1, #3000	; 0xbb8
    ee96:	2070      	movs	r0, #112	; 0x70
    ee98:	f001 fb10 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ee9c:	464a      	mov	r2, r9
    ee9e:	4641      	mov	r1, r8
    eea0:	2001      	movs	r0, #1
    eea2:	f7fe ffa9 	bl	ddf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    eea6:	e7a9      	b.n	edfc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    eea8:	4842      	ldr	r0, [pc, #264]	; (efb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    eeaa:	2800      	cmp	r0, #0
    eeac:	bf18      	it	ne
    eeae:	f3af 8000 	nopne.w
    eeb2:	b662      	cpsie	i
    eeb4:	e7b5      	b.n	ee22 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    eeb6:	b125      	cbz	r5, eec2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    eeb8:	2100      	movs	r1, #0
    eeba:	f640 30e7 	movw	r0, #3047	; 0xbe7
    eebe:	f3af 8000 	nop.w
    eec2:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    eec6:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    eeca:	4614      	mov	r4, r2
    eecc:	f04f 0b20 	mov.w	fp, #32
    eed0:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    eed4:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    eed8:	e003      	b.n	eee2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    eeda:	46a3      	mov	fp, r4
    eedc:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    eee0:	785c      	ldrb	r4, [r3, #1]
    eee2:	4544      	cmp	r4, r8
    eee4:	d002      	beq.n	eeec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    eee6:	2c20      	cmp	r4, #32
    eee8:	d02b      	beq.n	ef42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    eeea:	e7f6      	b.n	eeda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    eeec:	2c20      	cmp	r4, #32
    eeee:	d028      	beq.n	ef42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    eef0:	42a2      	cmp	r2, r4
    eef2:	d104      	bne.n	eefe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    eef4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    eef8:	7840      	ldrb	r0, [r0, #1]
    eefa:	7008      	strb	r0, [r1, #0]
    eefc:	e005      	b.n	ef0a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    eefe:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    ef02:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    ef06:	7849      	ldrb	r1, [r1, #1]
    ef08:	7041      	strb	r1, [r0, #1]
    ef0a:	f1ba 0f00 	cmp.w	sl, #0
    ef0e:	d011      	beq.n	ef34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    ef10:	b125      	cbz	r5, ef1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    ef12:	2100      	movs	r1, #0
    ef14:	f240 502f 	movw	r0, #1327	; 0x52f
    ef18:	f3af 8000 	nop.w
    ef1c:	f89a 0000 	ldrb.w	r0, [sl]
    ef20:	42a0      	cmp	r0, r4
    ef22:	d107      	bne.n	ef34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    ef24:	b125      	cbz	r5, ef30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    ef26:	2100      	movs	r1, #0
    ef28:	f240 5032 	movw	r0, #1330	; 0x532
    ef2c:	f3af 8000 	nop.w
    ef30:	f88a b000 	strb.w	fp, [sl]
    ef34:	b15d      	cbz	r5, ef4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    ef36:	2100      	movs	r1, #0
    ef38:	f240 5037 	movw	r0, #1335	; 0x537
    ef3c:	f3af 8000 	nop.w
    ef40:	e000      	b.n	ef44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    ef42:	b125      	cbz	r5, ef4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    ef44:	2100      	movs	r1, #0
    ef46:	f640 30eb 	movw	r0, #3051	; 0xbeb
    ef4a:	f3af 8000 	nop.w
    ef4e:	481a      	ldr	r0, [pc, #104]	; (efb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    ef50:	2800      	cmp	r0, #0
    ef52:	bf18      	it	ne
    ef54:	f3af 8000 	nopne.w
    ef58:	f3ef 8410 	mrs	r4, PRIMASK
    ef5c:	b672      	cpsid	i
    ef5e:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    ef62:	f88d 0000 	strb.w	r0, [sp]
    ef66:	f89d 0000 	ldrb.w	r0, [sp]
    ef6a:	b138      	cbz	r0, ef7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    ef6c:	2d00      	cmp	r5, #0
    ef6e:	bf1c      	itt	ne
    ef70:	2100      	movne	r1, #0
    ef72:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    ef76:	f43f af4c 	beq.w	ee12 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ef7a:	e787      	b.n	ee8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    ef7c:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    ef80:	2001      	movs	r0, #1
    ef82:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    ef86:	b154      	cbz	r4, ef9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    ef88:	2d00      	cmp	r5, #0
    ef8a:	bf08      	it	eq
    ef8c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef90:	2100      	movs	r1, #0
    ef92:	f640 30fe 	movw	r0, #3070	; 0xbfe
    ef96:	f3af 8000 	nop.w
    ef9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef9e:	4805      	ldr	r0, [pc, #20]	; (efb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    efa0:	2800      	cmp	r0, #0
    efa2:	bf18      	it	ne
    efa4:	f3af 8000 	nopne.w
    efa8:	b662      	cpsie	i
    efaa:	e7ed      	b.n	ef88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    efac:	20001304 	.word	0x20001304
	...

0000efbc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    efbc:	b570      	push	{r4, r5, r6, lr}
    efbe:	460d      	mov	r5, r1
    efc0:	4606      	mov	r6, r0
    efc2:	f001 f9f1 	bl	103a8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    efc6:	480f      	ldr	r0, [pc, #60]	; (f004 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    efc8:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    efcc:	2400      	movs	r4, #0
    efce:	3880      	subs	r0, #128	; 0x80
    efd0:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    efd4:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    efd8:	b129      	cbz	r1, efe6 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    efda:	1c61      	adds	r1, r4, #1
    efdc:	b2cc      	uxtb	r4, r1
    efde:	2c20      	cmp	r4, #32
    efe0:	d3f8      	bcc.n	efd4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    efe2:	2020      	movs	r0, #32
    efe4:	bd70      	pop	{r4, r5, r6, pc}
    efe6:	4808      	ldr	r0, [pc, #32]	; (f008 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    efe8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    efec:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    eff0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    eff4:	4621      	mov	r1, r4
    eff6:	6045      	str	r5, [r0, #4]
    eff8:	2001      	movs	r0, #1
    effa:	f7fe fefd 	bl	ddf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    effe:	4620      	mov	r0, r4
    f000:	bd70      	pop	{r4, r5, r6, pc}
    f002:	0000      	.short	0x0000
    f004:	20001304 	.word	0x20001304
    f008:	20000f84 	.word	0x20000f84

0000f00c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    f00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f010:	b083      	sub	sp, #12
    f012:	f000 fb35 	bl	f680 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    f016:	4605      	mov	r5, r0
    f018:	f000 fdfe 	bl	fc18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    f01c:	4c67      	ldr	r4, [pc, #412]	; (f1bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    f01e:	68a0      	ldr	r0, [r4, #8]
    f020:	f1b0 3fff 	cmp.w	r0, #4294967295
    f024:	bf1c      	itt	ne
    f026:	f04f 30ff 	movne.w	r0, #4294967295
    f02a:	60a0      	strne	r0, [r4, #8]
    f02c:	7fa0      	ldrb	r0, [r4, #30]
    f02e:	f8df b190 	ldr.w	fp, [pc, #400]	; f1c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    f032:	b9a8      	cbnz	r0, f060 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    f034:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    f038:	1a08      	subs	r0, r1, r0
    f03a:	0200      	lsls	r0, r0, #8
    f03c:	17c1      	asrs	r1, r0, #31
    f03e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    f042:	1200      	asrs	r0, r0, #8
    f044:	f44f 710c 	mov.w	r1, #560	; 0x230
    f048:	f009 fc24 	bl	18894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f04c:	6921      	ldr	r1, [r4, #16]
    f04e:	4408      	add	r0, r1
    f050:	1a28      	subs	r0, r5, r0
    f052:	0200      	lsls	r0, r0, #8
    f054:	17c1      	asrs	r1, r0, #31
    f056:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    f05a:	1200      	asrs	r0, r0, #8
    f05c:	0fc0      	lsrs	r0, r0, #31
    f05e:	d013      	beq.n	f088 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    f060:	7e60      	ldrb	r0, [r4, #25]
    f062:	b328      	cbz	r0, f0b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    f064:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    f068:	f88d 0000 	strb.w	r0, [sp]
    f06c:	f89d 0000 	ldrb.w	r0, [sp]
    f070:	b1f0      	cbz	r0, f0b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    f072:	f000 fc13 	bl	f89c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    f076:	bf00      	nop
    f078:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    f07c:	b1f0      	cbz	r0, f0bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    f07e:	f240 4147 	movw	r1, #1095	; 0x447
    f082:	2070      	movs	r0, #112	; 0x70
    f084:	f001 fa1a 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f088:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    f08c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    f090:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f094:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    f098:	6840      	ldr	r0, [r0, #4]
    f09a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f09e:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    f0a2:	2108      	movs	r1, #8
    f0a4:	4790      	blx	r2
    f0a6:	f44f 6186 	mov.w	r1, #1072	; 0x430
    f0aa:	2070      	movs	r0, #112	; 0x70
    f0ac:	f001 fa06 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f0b0:	1ce8      	adds	r0, r5, #3
    f0b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f0b6:	f000 fae9 	bl	f68c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    f0ba:	e7dd      	b.n	f078 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    f0bc:	f04f 0a01 	mov.w	sl, #1
    f0c0:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    f0c4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    f0c8:	2820      	cmp	r0, #32
    f0ca:	d024      	beq.n	f116 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    f0cc:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    f0d0:	2020      	movs	r0, #32
    f0d2:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    f0d6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    f0da:	2600      	movs	r6, #0
    f0dc:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    f0e0:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    f0e4:	4837      	ldr	r0, [pc, #220]	; (f1c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    f0e6:	6026      	str	r6, [r4, #0]
    f0e8:	7800      	ldrb	r0, [r0, #0]
    f0ea:	2802      	cmp	r0, #2
    f0ec:	bf16      	itet	ne
    f0ee:	2803      	cmpne	r0, #3
    f0f0:	2001      	moveq	r0, #1
    f0f2:	2000      	movne	r0, #0
    f0f4:	7720      	strb	r0, [r4, #28]
    f0f6:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    f0fa:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    f0fe:	f899 0020 	ldrb.w	r0, [r9, #32]
    f102:	2820      	cmp	r0, #32
    f104:	d031      	beq.n	f16a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    f106:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f10a:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    f10e:	7d81      	ldrb	r1, [r0, #22]
    f110:	2901      	cmp	r1, #1
    f112:	d005      	beq.n	f120 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    f114:	e029      	b.n	f16a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    f116:	f240 414a 	movw	r1, #1098	; 0x44a
    f11a:	2070      	movs	r0, #112	; 0x70
    f11c:	f001 f9ce 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f120:	46ab      	mov	fp, r5
    f122:	f100 0508 	add.w	r5, r0, #8
    f126:	8a40      	ldrh	r0, [r0, #18]
    f128:	aa01      	add	r2, sp, #4
    f12a:	4669      	mov	r1, sp
    f12c:	f000 f94a 	bl	f3c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    f130:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    f134:	2820      	cmp	r0, #32
    f136:	d004      	beq.n	f142 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    f138:	6920      	ldr	r0, [r4, #16]
    f13a:	1d40      	adds	r0, r0, #5
    f13c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f140:	e00b      	b.n	f15a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    f142:	8968      	ldrh	r0, [r5, #10]
    f144:	f10b 0b09 	add.w	fp, fp, #9
    f148:	b128      	cbz	r0, f156 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    f14a:	f001 f93f 	bl	103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    f14e:	2800      	cmp	r0, #0
    f150:	bf08      	it	eq
    f152:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    f156:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    f15a:	e9d5 2100 	ldrd	r2, r1, [r5]
    f15e:	1a89      	subs	r1, r1, r2
    f160:	6028      	str	r0, [r5, #0]
    f162:	4408      	add	r0, r1
    f164:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f168:	6068      	str	r0, [r5, #4]
    f16a:	4639      	mov	r1, r7
    f16c:	2001      	movs	r0, #1
    f16e:	f7fe fe73 	bl	de58 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    f172:	2800      	cmp	r0, #0
    f174:	d0f9      	beq.n	f16a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    f176:	4814      	ldr	r0, [pc, #80]	; (f1c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    f178:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    f17c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    f180:	2802      	cmp	r0, #2
    f182:	d104      	bne.n	f18e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    f184:	463a      	mov	r2, r7
    f186:	4641      	mov	r1, r8
    f188:	2006      	movs	r0, #6
    f18a:	f7fe fe35 	bl	ddf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    f18e:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    f192:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    f196:	2820      	cmp	r0, #32
    f198:	d003      	beq.n	f1a2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    f19a:	480c      	ldr	r0, [pc, #48]	; (f1cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    f19c:	7840      	ldrb	r0, [r0, #1]
    f19e:	f001 fa5d 	bl	1065c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    f1a2:	7f20      	ldrb	r0, [r4, #28]
    f1a4:	2800      	cmp	r0, #0
    f1a6:	bf04      	itt	eq
    f1a8:	b003      	addeq	sp, #12
    f1aa:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1ae:	f000 fd7d 	bl	fcac <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    f1b2:	7726      	strb	r6, [r4, #28]
    f1b4:	7766      	strb	r6, [r4, #29]
    f1b6:	b003      	add	sp, #12
    f1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1bc:	20001304 	.word	0x20001304
    f1c0:	20000f84 	.word	0x20000f84
    f1c4:	20000016 	.word	0x20000016
    f1c8:	20001284 	.word	0x20001284
    f1cc:	20000014 	.word	0x20000014

0000f1d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    f1d0:	b510      	push	{r4, lr}
    f1d2:	4c32      	ldr	r4, [pc, #200]	; (f29c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    f1d4:	b082      	sub	sp, #8
    f1d6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    f1da:	2920      	cmp	r1, #32
    f1dc:	d008      	beq.n	f1f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    f1de:	68a1      	ldr	r1, [r4, #8]
    f1e0:	f1b1 3fff 	cmp.w	r1, #4294967295
    f1e4:	d009      	beq.n	f1fa <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    f1e6:	f640 21e9 	movw	r1, #2793	; 0xae9
    f1ea:	2070      	movs	r0, #112	; 0x70
    f1ec:	f001 f966 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f1f0:	f640 21e8 	movw	r1, #2792	; 0xae8
    f1f4:	2070      	movs	r0, #112	; 0x70
    f1f6:	f001 f961 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f1fa:	6862      	ldr	r2, [r4, #4]
    f1fc:	4601      	mov	r1, r0
    f1fe:	4b28      	ldr	r3, [pc, #160]	; (f2a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    f200:	1850      	adds	r0, r2, r1
    f202:	429a      	cmp	r2, r3
    f204:	d904      	bls.n	f210 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    f206:	f240 6109 	movw	r1, #1545	; 0x609
    f20a:	2070      	movs	r0, #112	; 0x70
    f20c:	f001 f956 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f210:	4a24      	ldr	r2, [pc, #144]	; (f2a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    f212:	4291      	cmp	r1, r2
    f214:	dd04      	ble.n	f220 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    f216:	f240 610a 	movw	r1, #1546	; 0x60a
    f21a:	2070      	movs	r0, #112	; 0x70
    f21c:	f001 f94e 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f220:	4a21      	ldr	r2, [pc, #132]	; (f2a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    f222:	4291      	cmp	r1, r2
    f224:	da04      	bge.n	f230 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    f226:	f240 610b 	movw	r1, #1547	; 0x60b
    f22a:	2070      	movs	r0, #112	; 0x70
    f22c:	f001 f946 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f230:	491e      	ldr	r1, [pc, #120]	; (f2ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    f232:	4281      	cmp	r1, r0
    f234:	bfdc      	itt	le
    f236:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    f23a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    f23e:	dd05      	ble.n	f24c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    f240:	2800      	cmp	r0, #0
    f242:	bfbc      	itt	lt
    f244:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    f248:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    f24c:	aa01      	add	r2, sp, #4
    f24e:	4669      	mov	r1, sp
    f250:	f000 f8b8 	bl	f3c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    f254:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f258:	280f      	cmp	r0, #15
    f25a:	bf8c      	ite	hi
    f25c:	2001      	movhi	r0, #1
    f25e:	2000      	movls	r0, #0
    f260:	9900      	ldr	r1, [sp, #0]
    f262:	4408      	add	r0, r1
    f264:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    f268:	60a1      	str	r1, [r4, #8]
    f26a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    f26e:	f88d 0000 	strb.w	r0, [sp]
    f272:	f89d 0000 	ldrb.w	r0, [sp]
    f276:	2800      	cmp	r0, #0
    f278:	bf04      	itt	eq
    f27a:	b002      	addeq	sp, #8
    f27c:	bd10      	popeq	{r4, pc}
    f27e:	2301      	movs	r3, #1
    f280:	2203      	movs	r2, #3
    f282:	2005      	movs	r0, #5
    f284:	f000 fb86 	bl	f994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    f288:	2800      	cmp	r0, #0
    f28a:	bf1c      	itt	ne
    f28c:	b002      	addne	sp, #8
    f28e:	bd10      	popne	{r4, pc}
    f290:	f640 21f1 	movw	r1, #2801	; 0xaf1
    f294:	2070      	movs	r0, #112	; 0x70
    f296:	f001 f911 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f29a:	0000      	.short	0x0000
    f29c:	20001304 	.word	0x20001304
    f2a0:	1e847fff 	.word	0x1e847fff
    f2a4:	07a12000 	.word	0x07a12000
    f2a8:	f85ee000 	.word	0xf85ee000
    f2ac:	1e848000 	.word	0x1e848000

0000f2b0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    f2b0:	b570      	push	{r4, r5, r6, lr}
    f2b2:	4c1e      	ldr	r4, [pc, #120]	; (f32c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    f2b4:	2120      	movs	r1, #32
    f2b6:	f884 1020 	strb.w	r1, [r4, #32]
    f2ba:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    f2be:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    f2c2:	2000      	movs	r0, #0
    f2c4:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    f2c8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    f2cc:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    f2d0:	1e42      	subs	r2, r0, #1
    f2d2:	60a2      	str	r2, [r4, #8]
    f2d4:	6020      	str	r0, [r4, #0]
    f2d6:	77a0      	strb	r0, [r4, #30]
    f2d8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    f2dc:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    f2e0:	7720      	strb	r0, [r4, #28]
    f2e2:	7760      	strb	r0, [r4, #29]
    f2e4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    f2e8:	4911      	ldr	r1, [pc, #68]	; (f330 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    f2ea:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    f2ee:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    f2f2:	7008      	strb	r0, [r1, #0]
    f2f4:	7048      	strb	r0, [r1, #1]
    f2f6:	8048      	strh	r0, [r1, #2]
    f2f8:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    f2fc:	2210      	movs	r2, #16
    f2fe:	7088      	strb	r0, [r1, #2]
    f300:	f801 0f04 	strb.w	r0, [r1, #4]!
    f304:	1e52      	subs	r2, r2, #1
    f306:	d1fa      	bne.n	f2fe <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    f308:	4d0a      	ldr	r5, [pc, #40]	; (f334 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    f30a:	2601      	movs	r6, #1
    f30c:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    f310:	20ff      	movs	r0, #255	; 0xff
    f312:	7028      	strb	r0, [r5, #0]
    f314:	4808      	ldr	r0, [pc, #32]	; (f338 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    f316:	f001 f983 	bl	10620 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    f31a:	7068      	strb	r0, [r5, #1]
    f31c:	f001 f9de 	bl	106dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    f320:	60a8      	str	r0, [r5, #8]
    f322:	f000 fd0b 	bl	fd3c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    f326:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    f32a:	bd70      	pop	{r4, r5, r6, pc}
    f32c:	20001304 	.word	0x20001304
    f330:	20000016 	.word	0x20000016
    f334:	20000014 	.word	0x20000014
    f338:	0000dcb5 	.word	0x0000dcb5

0000f33c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    f33c:	b570      	push	{r4, r5, r6, lr}
    f33e:	4604      	mov	r4, r0
    f340:	4615      	mov	r5, r2
    f342:	4608      	mov	r0, r1
    f344:	f009 fa79 	bl	1883a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    f348:	4a0f      	ldr	r2, [pc, #60]	; (f388 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    f34a:	1b01      	subs	r1, r0, r4
    f34c:	1c53      	adds	r3, r2, #1
    f34e:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    f352:	bf24      	itt	cs
    f354:	eba4 0c00 	subcs.w	ip, r4, r0
    f358:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    f35c:	d30b      	bcc.n	f376 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    f35e:	428a      	cmp	r2, r1
    f360:	d203      	bcs.n	f36a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    f362:	1b11      	subs	r1, r2, r4
    f364:	4408      	add	r0, r1
    f366:	1c41      	adds	r1, r0, #1
    f368:	e005      	b.n	f376 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    f36a:	4562      	cmp	r2, ip
    f36c:	d207      	bcs.n	f37e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    f36e:	1a10      	subs	r0, r2, r0
    f370:	4420      	add	r0, r4
    f372:	1c40      	adds	r0, r0, #1
    f374:	4241      	negs	r1, r0
    f376:	f101 000f 	add.w	r0, r1, #15
    f37a:	1a28      	subs	r0, r5, r0
    f37c:	bd70      	pop	{r4, r5, r6, pc}
    f37e:	f640 310c 	movw	r1, #2828	; 0xb0c
    f382:	2070      	movs	r0, #112	; 0x70
    f384:	f001 f89a 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f388:	1e847fff 	.word	0x1e847fff

0000f38c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    f38c:	0b41      	lsrs	r1, r0, #13
    f38e:	f248 6237 	movw	r2, #34359	; 0x8637
    f392:	4351      	muls	r1, r2
    f394:	0c0a      	lsrs	r2, r1, #16
    f396:	4b09      	ldr	r3, [pc, #36]	; (f3bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    f398:	0251      	lsls	r1, r2, #9
    f39a:	fb02 0203 	mla	r2, r2, r3, r0
    f39e:	4808      	ldr	r0, [pc, #32]	; (f3c0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    f3a0:	4350      	muls	r0, r2
    f3a2:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    f3a6:	306e      	adds	r0, #110	; 0x6e
    f3a8:	0d40      	lsrs	r0, r0, #21
    f3aa:	425b      	negs	r3, r3
    f3ac:	fb10 f303 	smulbb	r3, r0, r3
    f3b0:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    f3b4:	bf88      	it	hi
    f3b6:	1c49      	addhi	r1, r1, #1
    f3b8:	4408      	add	r0, r1
    f3ba:	4770      	bx	lr
    f3bc:	ffffc2f7 	.word	0xffffc2f7
    f3c0:	00010c6f 	.word	0x00010c6f

0000f3c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    f3c4:	0b43      	lsrs	r3, r0, #13
    f3c6:	f248 6c37 	movw	ip, #34359	; 0x8637
    f3ca:	fb03 f30c 	mul.w	r3, r3, ip
    f3ce:	b430      	push	{r4, r5}
    f3d0:	0c1b      	lsrs	r3, r3, #16
    f3d2:	f8df c044 	ldr.w	ip, [pc, #68]	; f418 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    f3d6:	025c      	lsls	r4, r3, #9
    f3d8:	fb03 030c 	mla	r3, r3, ip, r0
    f3dc:	480f      	ldr	r0, [pc, #60]	; (f41c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    f3de:	4358      	muls	r0, r3
    f3e0:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    f3e4:	eb04 000c 	add.w	r0, r4, ip
    f3e8:	f643 5409 	movw	r4, #15625	; 0x3d09
    f3ec:	fb1c f404 	smulbb	r4, ip, r4
    f3f0:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    f3f4:	f643 5508 	movw	r5, #15624	; 0x3d08
    f3f8:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    f3fc:	442c      	add	r4, r5
    f3fe:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    f402:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    f406:	bf84      	itt	hi
    f408:	f04f 0c00 	movhi.w	ip, #0
    f40c:	1c40      	addhi	r0, r0, #1
    f40e:	6008      	str	r0, [r1, #0]
    f410:	f882 c000 	strb.w	ip, [r2]
    f414:	bc30      	pop	{r4, r5}
    f416:	4770      	bx	lr
    f418:	ffffc2f7 	.word	0xffffc2f7
    f41c:	00010c6f 	.word	0x00010c6f

0000f420 <MPSL_IRQ_RTC0_Handler>:
    f420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f424:	4c36      	ldr	r4, [pc, #216]	; (f500 <MPSL_IRQ_RTC0_Handler+0xe0>)
    f426:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f42a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    f42e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    f432:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    f436:	f04f 0500 	mov.w	r5, #0
    f43a:	d019      	beq.n	f470 <MPSL_IRQ_RTC0_Handler+0x50>
    f43c:	4831      	ldr	r0, [pc, #196]	; (f504 <MPSL_IRQ_RTC0_Handler+0xe4>)
    f43e:	6800      	ldr	r0, [r0, #0]
    f440:	b1b0      	cbz	r0, f470 <MPSL_IRQ_RTC0_Handler+0x50>
    f442:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    f446:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    f44a:	482f      	ldr	r0, [pc, #188]	; (f508 <MPSL_IRQ_RTC0_Handler+0xe8>)
    f44c:	6800      	ldr	r0, [r0, #0]
    f44e:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    f452:	1a40      	subs	r0, r0, r1
    f454:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f458:	2802      	cmp	r0, #2
    f45a:	d302      	bcc.n	f462 <MPSL_IRQ_RTC0_Handler+0x42>
    f45c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f460:	d306      	bcc.n	f470 <MPSL_IRQ_RTC0_Handler+0x50>
    f462:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    f466:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    f46a:	2004      	movs	r0, #4
    f46c:	f7fe ff2c 	bl	e2c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f470:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f474:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    f478:	d019      	beq.n	f4ae <MPSL_IRQ_RTC0_Handler+0x8e>
    f47a:	4824      	ldr	r0, [pc, #144]	; (f50c <MPSL_IRQ_RTC0_Handler+0xec>)
    f47c:	6800      	ldr	r0, [r0, #0]
    f47e:	b1b0      	cbz	r0, f4ae <MPSL_IRQ_RTC0_Handler+0x8e>
    f480:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    f484:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    f488:	4821      	ldr	r0, [pc, #132]	; (f510 <MPSL_IRQ_RTC0_Handler+0xf0>)
    f48a:	6800      	ldr	r0, [r0, #0]
    f48c:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    f490:	1a40      	subs	r0, r0, r1
    f492:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f496:	2802      	cmp	r0, #2
    f498:	d302      	bcc.n	f4a0 <MPSL_IRQ_RTC0_Handler+0x80>
    f49a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f49e:	d306      	bcc.n	f4ae <MPSL_IRQ_RTC0_Handler+0x8e>
    f4a0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    f4a4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    f4a8:	2005      	movs	r0, #5
    f4aa:	f7fe ff0d 	bl	e2c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f4ae:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f4b2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    f4b6:	bf08      	it	eq
    f4b8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f4bc:	4815      	ldr	r0, [pc, #84]	; (f514 <MPSL_IRQ_RTC0_Handler+0xf4>)
    f4be:	6800      	ldr	r0, [r0, #0]
    f4c0:	2800      	cmp	r0, #0
    f4c2:	bf08      	it	eq
    f4c4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f4c8:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    f4cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    f4d0:	4811      	ldr	r0, [pc, #68]	; (f518 <MPSL_IRQ_RTC0_Handler+0xf8>)
    f4d2:	6800      	ldr	r0, [r0, #0]
    f4d4:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    f4d8:	1a40      	subs	r0, r0, r1
    f4da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f4de:	2802      	cmp	r0, #2
    f4e0:	d304      	bcc.n	f4ec <MPSL_IRQ_RTC0_Handler+0xcc>
    f4e2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f4e6:	bf38      	it	cc
    f4e8:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    f4ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    f4f0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    f4f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f4f8:	2006      	movs	r0, #6
    f4fa:	f7fe bee5 	b.w	e2c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f4fe:	0000      	.short	0x0000
    f500:	4000b000 	.word	0x4000b000
    f504:	4000b140 	.word	0x4000b140
    f508:	4000b540 	.word	0x4000b540
    f50c:	4000b144 	.word	0x4000b144
    f510:	4000b544 	.word	0x4000b544
    f514:	4000b148 	.word	0x4000b148
    f518:	4000b548 	.word	0x4000b548

0000f51c <MPSL_IRQ_TIMER0_Handler>:
    f51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f520:	4d38      	ldr	r5, [pc, #224]	; (f604 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    f522:	7828      	ldrb	r0, [r5, #0]
    f524:	2804      	cmp	r0, #4
    f526:	d068      	beq.n	f5fa <MPSL_IRQ_TIMER0_Handler+0xde>
    f528:	1ce8      	adds	r0, r5, #3
    f52a:	2201      	movs	r2, #1
    f52c:	7801      	ldrb	r1, [r0, #0]
    f52e:	b159      	cbz	r1, f548 <MPSL_IRQ_TIMER0_Handler+0x2c>
    f530:	2901      	cmp	r1, #1
    f532:	bf08      	it	eq
    f534:	706a      	strbeq	r2, [r5, #1]
    f536:	d002      	beq.n	f53e <MPSL_IRQ_TIMER0_Handler+0x22>
    f538:	7869      	ldrb	r1, [r5, #1]
    f53a:	2900      	cmp	r1, #0
    f53c:	d058      	beq.n	f5f0 <MPSL_IRQ_TIMER0_Handler+0xd4>
    f53e:	2102      	movs	r1, #2
    f540:	7001      	strb	r1, [r0, #0]
    f542:	7840      	ldrb	r0, [r0, #1]
    f544:	f000 fafa 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f548:	4c2f      	ldr	r4, [pc, #188]	; (f608 <MPSL_IRQ_TIMER0_Handler+0xec>)
    f54a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f54e:	f04f 0800 	mov.w	r8, #0
    f552:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    f556:	f44f 7780 	mov.w	r7, #256	; 0x100
    f55a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    f55e:	d00a      	beq.n	f576 <MPSL_IRQ_TIMER0_Handler+0x5a>
    f560:	482a      	ldr	r0, [pc, #168]	; (f60c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    f562:	6800      	ldr	r0, [r0, #0]
    f564:	b138      	cbz	r0, f576 <MPSL_IRQ_TIMER0_Handler+0x5a>
    f566:	2003      	movs	r0, #3
    f568:	f000 fae8 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f56c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f570:	2003      	movs	r0, #3
    f572:	f7fe fea9 	bl	e2c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f576:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f57a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    f57e:	d00a      	beq.n	f596 <MPSL_IRQ_TIMER0_Handler+0x7a>
    f580:	4823      	ldr	r0, [pc, #140]	; (f610 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    f582:	6800      	ldr	r0, [r0, #0]
    f584:	b138      	cbz	r0, f596 <MPSL_IRQ_TIMER0_Handler+0x7a>
    f586:	2002      	movs	r0, #2
    f588:	f000 fad8 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f58c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f590:	2002      	movs	r0, #2
    f592:	f7fe fe99 	bl	e2c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f596:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f59a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    f59e:	d00a      	beq.n	f5b6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    f5a0:	481c      	ldr	r0, [pc, #112]	; (f614 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    f5a2:	6800      	ldr	r0, [r0, #0]
    f5a4:	b138      	cbz	r0, f5b6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    f5a6:	2001      	movs	r0, #1
    f5a8:	f000 fac8 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f5ac:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f5b0:	2001      	movs	r0, #1
    f5b2:	f7fe fe89 	bl	e2c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f5b6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f5ba:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    f5be:	bf08      	it	eq
    f5c0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5c4:	4814      	ldr	r0, [pc, #80]	; (f618 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    f5c6:	6800      	ldr	r0, [r0, #0]
    f5c8:	2800      	cmp	r0, #0
    f5ca:	bf08      	it	eq
    f5cc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5d0:	2000      	movs	r0, #0
    f5d2:	f000 fab3 	bl	fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f5d6:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f5da:	2004      	movs	r0, #4
    f5dc:	7028      	strb	r0, [r5, #0]
    f5de:	f8c5 8008 	str.w	r8, [r5, #8]
    f5e2:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    f5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f5ea:	2000      	movs	r0, #0
    f5ec:	f7fe be6c 	b.w	e2c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f5f0:	f240 316a 	movw	r1, #874	; 0x36a
    f5f4:	206c      	movs	r0, #108	; 0x6c
    f5f6:	f000 ff61 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f5fe:	2007      	movs	r0, #7
    f600:	f7fe be62 	b.w	e2c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f604:	20000020 	.word	0x20000020
    f608:	40008000 	.word	0x40008000
    f60c:	4000814c 	.word	0x4000814c
    f610:	40008148 	.word	0x40008148
    f614:	40008144 	.word	0x40008144
    f618:	40008140 	.word	0x40008140
    f61c:	2201      	movs	r2, #1
    f61e:	0211      	lsls	r1, r2, #8
    f620:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f624:	2000      	movs	r0, #0
    f626:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    f62a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    f62e:	f3bf 8f4f 	dsb	sy
    f632:	f3bf 8f6f 	isb	sy
    f636:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    f63a:	490e      	ldr	r1, [pc, #56]	; (f674 <MPSL_IRQ_TIMER0_Handler+0x158>)
    f63c:	f841 2f04 	str.w	r2, [r1, #4]!
    f640:	1e43      	subs	r3, r0, #1
    f642:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    f646:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    f64a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    f64e:	4b0a      	ldr	r3, [pc, #40]	; (f678 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    f650:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    f654:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    f658:	1d1b      	adds	r3, r3, #4
    f65a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    f65e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    f662:	1d1b      	adds	r3, r3, #4
    f664:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    f668:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    f66c:	60ca      	str	r2, [r1, #12]
    f66e:	4903      	ldr	r1, [pc, #12]	; (f67c <MPSL_IRQ_TIMER0_Handler+0x160>)
    f670:	7048      	strb	r0, [r1, #1]
    f672:	4770      	bx	lr
    f674:	40008000 	.word	0x40008000
    f678:	40008004 	.word	0x40008004
    f67c:	20000020 	.word	0x20000020

0000f680 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    f680:	4801      	ldr	r0, [pc, #4]	; (f688 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    f682:	6800      	ldr	r0, [r0, #0]
    f684:	4770      	bx	lr
    f686:	0000      	.short	0x0000
    f688:	4000b504 	.word	0x4000b504

0000f68c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    f68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f690:	4e47      	ldr	r6, [pc, #284]	; (f7b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    f692:	4605      	mov	r5, r0
    f694:	1ef7      	subs	r7, r6, #3
    f696:	7832      	ldrb	r2, [r6, #0]
    f698:	68f9      	ldr	r1, [r7, #12]
    f69a:	2a01      	cmp	r2, #1
    f69c:	bf04      	itt	eq
    f69e:	42a9      	cmpeq	r1, r5
    f6a0:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f6a4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    f6a8:	4b42      	ldr	r3, [pc, #264]	; (f7b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    f6aa:	6018      	str	r0, [r3, #0]
    f6ac:	4842      	ldr	r0, [pc, #264]	; (f7b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    f6ae:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    f6b2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    f6b6:	f100 0304 	add.w	r3, r0, #4
    f6ba:	f04f 0400 	mov.w	r4, #0
    f6be:	2a00      	cmp	r2, #0
    f6c0:	d061      	beq.n	f786 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    f6c2:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    f6c6:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    f6ca:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    f6ce:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    f6d2:	4b3a      	ldr	r3, [pc, #232]	; (f7bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    f6d4:	681b      	ldr	r3, [r3, #0]
    f6d6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    f6da:	f04f 0801 	mov.w	r8, #1
    f6de:	2b00      	cmp	r3, #0
    f6e0:	bf04      	itt	eq
    f6e2:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    f6e6:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    f6ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f6ee:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    f6f2:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    f6f6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    f6fa:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    f6fe:	1aeb      	subs	r3, r5, r3
    f700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f704:	2b02      	cmp	r3, #2
    f706:	d34b      	bcc.n	f7a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    f708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    f70c:	d248      	bcs.n	f7a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    f70e:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    f712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f716:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    f71a:	b132      	cbz	r2, f72a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    f71c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    f720:	1a8a      	subs	r2, r1, r2
    f722:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    f726:	2a02      	cmp	r2, #2
    f728:	d3f8      	bcc.n	f71c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    f72a:	f8c7 8008 	str.w	r8, [r7, #8]
    f72e:	703c      	strb	r4, [r7, #0]
    f730:	f7ff ff74 	bl	f61c <MPSL_IRQ_TIMER0_Handler+0x100>
    f734:	4822      	ldr	r0, [pc, #136]	; (f7c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    f736:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    f73a:	f364 0101 	bfi	r1, r4, #0, #2
    f73e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    f742:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    f746:	2102      	movs	r1, #2
    f748:	f361 0201 	bfi	r2, r1, #0, #2
    f74c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    f750:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    f754:	2104      	movs	r1, #4
    f756:	f361 0203 	bfi	r2, r1, #0, #4
    f75a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    f75e:	f8c0 800c 	str.w	r8, [r0, #12]
    f762:	68b9      	ldr	r1, [r7, #8]
    f764:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    f768:	1580      	asrs	r0, r0, #22
    f76a:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    f76e:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    f772:	4914      	ldr	r1, [pc, #80]	; (f7c4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    f774:	05c0      	lsls	r0, r0, #23
    f776:	6008      	str	r0, [r1, #0]
    f778:	2004      	movs	r0, #4
    f77a:	60fd      	str	r5, [r7, #12]
    f77c:	7070      	strb	r0, [r6, #1]
    f77e:	f886 8000 	strb.w	r8, [r6]
    f782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f786:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    f78a:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    f78e:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    f792:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    f796:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    f79a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    f79e:	e798      	b.n	f6d2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    f7a0:	2100      	movs	r1, #0
    f7a2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    f7a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    f7aa:	206c      	movs	r0, #108	; 0x6c
    f7ac:	f000 fe86 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f7b0:	20000023 	.word	0x20000023
    f7b4:	4001f508 	.word	0x4001f508
    f7b8:	4000b000 	.word	0x4000b000
    f7bc:	4000b148 	.word	0x4000b148
    f7c0:	40008000 	.word	0x40008000
    f7c4:	4001f504 	.word	0x4001f504

0000f7c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    f7c8:	b570      	push	{r4, r5, r6, lr}
    f7ca:	4c2c      	ldr	r4, [pc, #176]	; (f87c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    f7cc:	68e2      	ldr	r2, [r4, #12]
    f7ce:	4282      	cmp	r2, r0
    f7d0:	bf14      	ite	ne
    f7d2:	2101      	movne	r1, #1
    f7d4:	2100      	moveq	r1, #0
    f7d6:	f8df c0a8 	ldr.w	ip, [pc, #168]	; f880 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    f7da:	f89c 5000 	ldrb.w	r5, [ip]
    f7de:	2d02      	cmp	r5, #2
    f7e0:	d002      	beq.n	f7e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    f7e2:	2900      	cmp	r1, #0
    f7e4:	d037      	beq.n	f856 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    f7e6:	e002      	b.n	f7ee <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    f7e8:	2900      	cmp	r1, #0
    f7ea:	bf08      	it	eq
    f7ec:	bd70      	popeq	{r4, r5, r6, pc}
    f7ee:	7861      	ldrb	r1, [r4, #1]
    f7f0:	b381      	cbz	r1, f854 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    f7f2:	4b24      	ldr	r3, [pc, #144]	; (f884 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    f7f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    f7f8:	6019      	str	r1, [r3, #0]
    f7fa:	138b      	asrs	r3, r1, #14
    f7fc:	4922      	ldr	r1, [pc, #136]	; (f888 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    f7fe:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    f802:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    f806:	2300      	movs	r3, #0
    f808:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    f80c:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    f810:	1ac3      	subs	r3, r0, r3
    f812:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f816:	2b02      	cmp	r3, #2
    f818:	d327      	bcc.n	f86a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    f81a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    f81e:	d224      	bcs.n	f86a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    f820:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    f824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f828:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    f82c:	b13d      	cbz	r5, f83e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    f82e:	bf00      	nop
    f830:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    f834:	1ad3      	subs	r3, r2, r3
    f836:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f83a:	2b02      	cmp	r3, #2
    f83c:	d3f8      	bcc.n	f830 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    f83e:	4b13      	ldr	r3, [pc, #76]	; (f88c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    f840:	2102      	movs	r1, #2
    f842:	074a      	lsls	r2, r1, #29
    f844:	601a      	str	r2, [r3, #0]
    f846:	60e0      	str	r0, [r4, #12]
    f848:	2004      	movs	r0, #4
    f84a:	f88c 0001 	strb.w	r0, [ip, #1]
    f84e:	f88c 1000 	strb.w	r1, [ip]
    f852:	bd70      	pop	{r4, r5, r6, pc}
    f854:	e004      	b.n	f860 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    f856:	f240 2102 	movw	r1, #514	; 0x202
    f85a:	206c      	movs	r0, #108	; 0x6c
    f85c:	f000 fe2e 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f860:	f240 2106 	movw	r1, #518	; 0x206
    f864:	206c      	movs	r0, #108	; 0x6c
    f866:	f000 fe29 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f86a:	2000      	movs	r0, #0
    f86c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    f870:	f240 2112 	movw	r1, #530	; 0x212
    f874:	206c      	movs	r0, #108	; 0x6c
    f876:	f000 fe21 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f87a:	0000      	.short	0x0000
    f87c:	20000020 	.word	0x20000020
    f880:	20000023 	.word	0x20000023
    f884:	4001f508 	.word	0x4001f508
    f888:	4000b000 	.word	0x4000b000
    f88c:	4001f504 	.word	0x4001f504

0000f890 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    f890:	4801      	ldr	r0, [pc, #4]	; (f898 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    f892:	68c0      	ldr	r0, [r0, #12]
    f894:	4770      	bx	lr
    f896:	0000      	.short	0x0000
    f898:	20000020 	.word	0x20000020

0000f89c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    f89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8a0:	4936      	ldr	r1, [pc, #216]	; (f97c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    f8a2:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    f8a6:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    f8aa:	4d35      	ldr	r5, [pc, #212]	; (f980 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    f8ac:	1d0b      	adds	r3, r1, #4
    f8ae:	2200      	movs	r2, #0
    f8b0:	7828      	ldrb	r0, [r5, #0]
    f8b2:	b168      	cbz	r0, f8d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    f8b4:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    f8b8:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    f8bc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    f8c0:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    f8c4:	4b2f      	ldr	r3, [pc, #188]	; (f984 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    f8c6:	681b      	ldr	r3, [r3, #0]
    f8c8:	f04f 0c01 	mov.w	ip, #1
    f8cc:	b99b      	cbnz	r3, f8f6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    f8ce:	e00c      	b.n	f8ea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    f8d0:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    f8d4:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    f8d8:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    f8dc:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    f8e0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    f8e4:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    f8e8:	e7ec      	b.n	f8c4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    f8ea:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    f8ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
    f8f2:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    f8f6:	2802      	cmp	r0, #2
    f8f8:	d004      	beq.n	f904 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    f8fa:	f240 211e 	movw	r1, #542	; 0x21e
    f8fe:	206c      	movs	r0, #108	; 0x6c
    f900:	f000 fddc 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f904:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    f908:	4c1f      	ldr	r4, [pc, #124]	; (f988 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    f90a:	1cc0      	adds	r0, r0, #3
    f90c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f910:	68e3      	ldr	r3, [r4, #12]
    f912:	4e1e      	ldr	r6, [pc, #120]	; (f98c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    f914:	4298      	cmp	r0, r3
    f916:	d00c      	beq.n	f932 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    f918:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    f91c:	1bdf      	subs	r7, r3, r7
    f91e:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    f922:	2f04      	cmp	r7, #4
    f924:	d305      	bcc.n	f932 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    f926:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    f92a:	d202      	bcs.n	f932 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    f92c:	f7ff feae 	bl	f68c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    f930:	e01f      	b.n	f972 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    f932:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    f936:	1a18      	subs	r0, r3, r0
    f938:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f93c:	2802      	cmp	r0, #2
    f93e:	d315      	bcc.n	f96c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    f940:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f944:	d212      	bcs.n	f96c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    f946:	4912      	ldr	r1, [pc, #72]	; (f990 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    f948:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f94c:	6008      	str	r0, [r1, #0]
    f94e:	f8c4 c008 	str.w	ip, [r4, #8]
    f952:	7022      	strb	r2, [r4, #0]
    f954:	f8c6 c004 	str.w	ip, [r6, #4]
    f958:	f8c6 c00c 	str.w	ip, [r6, #12]
    f95c:	0040      	lsls	r0, r0, #1
    f95e:	1f09      	subs	r1, r1, #4
    f960:	6008      	str	r0, [r1, #0]
    f962:	2004      	movs	r0, #4
    f964:	7068      	strb	r0, [r5, #1]
    f966:	f885 c000 	strb.w	ip, [r5]
    f96a:	e002      	b.n	f972 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    f96c:	f8c4 c008 	str.w	ip, [r4, #8]
    f970:	7022      	strb	r2, [r4, #0]
    f972:	68a0      	ldr	r0, [r4, #8]
    f974:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    f978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f97c:	4000b000 	.word	0x4000b000
    f980:	20000023 	.word	0x20000023
    f984:	4000b148 	.word	0x4000b148
    f988:	20000020 	.word	0x20000020
    f98c:	40008000 	.word	0x40008000
    f990:	4001f508 	.word	0x4001f508

0000f994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    f994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f998:	f8df c190 	ldr.w	ip, [pc, #400]	; fb2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    f99c:	2600      	movs	r6, #0
    f99e:	2701      	movs	r7, #1
    f9a0:	f89c 4000 	ldrb.w	r4, [ip]
    f9a4:	f89c c001 	ldrb.w	ip, [ip, #1]
    f9a8:	f44f 75a0 	mov.w	r5, #320	; 0x140
    f9ac:	2807      	cmp	r0, #7
    f9ae:	d27b      	bcs.n	faa8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    f9b0:	e8df f000 	tbb	[pc, r0]
    f9b4:	04040404 	.word	0x04040404
    f9b8:	006c6c6c 	.word	0x006c6c6c
    f9bc:	f8df 8170 	ldr.w	r8, [pc, #368]	; fb30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    f9c0:	f8d8 900c 	ldr.w	r9, [r8, #12]
    f9c4:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    f9c8:	bf04      	itt	eq
    f9ca:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    f9ce:	f1b8 0f00 	cmpeq.w	r8, #0
    f9d2:	d002      	beq.n	f9da <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    f9d4:	2c02      	cmp	r4, #2
    f9d6:	d005      	beq.n	f9e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    f9d8:	e02c      	b.n	fa34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    f9da:	f240 2151 	movw	r1, #593	; 0x251
    f9de:	206c      	movs	r0, #108	; 0x6c
    f9e0:	f000 fd6c 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f9e4:	f1ac 0804 	sub.w	r8, ip, #4
    f9e8:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    f9ec:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    f9f0:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    f9f4:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    f9f8:	2500      	movs	r5, #0
    f9fa:	2c01      	cmp	r4, #1
    f9fc:	d002      	beq.n	fa04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    f9fe:	2c02      	cmp	r4, #2
    fa00:	d00b      	beq.n	fa1a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    fa02:	e014      	b.n	fa2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    fa04:	f1bc 0f04 	cmp.w	ip, #4
    fa08:	bf24      	itt	cs
    fa0a:	f8d8 9000 	ldrcs.w	r9, [r8]
    fa0e:	f1b9 0f00 	cmpcs.w	r9, #0
    fa12:	bf08      	it	eq
    fa14:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    fa18:	e009      	b.n	fa2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    fa1a:	f1bc 0f04 	cmp.w	ip, #4
    fa1e:	bf24      	itt	cs
    fa20:	f8d8 9000 	ldrcs.w	r9, [r8]
    fa24:	f1b9 0f00 	cmpcs.w	r9, #0
    fa28:	bf08      	it	eq
    fa2a:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    fa2e:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    fa32:	d1e1      	bne.n	f9f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    fa34:	4c3f      	ldr	r4, [pc, #252]	; (fb34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    fa36:	f100 0c10 	add.w	ip, r0, #16
    fa3a:	fa07 fc0c 	lsl.w	ip, r7, ip
    fa3e:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    fa42:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    fa46:	b1c2      	cbz	r2, fa7a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    fa48:	f04f 0840 	mov.w	r8, #64	; 0x40
    fa4c:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    fa50:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    fa54:	44a0      	add	r8, r4
    fa56:	f8c8 7000 	str.w	r7, [r8]
    fa5a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    fa5e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    fa62:	eba1 0000 	sub.w	r0, r1, r0
    fa66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fa6a:	4282      	cmp	r2, r0
    fa6c:	bf98      	it	ls
    fa6e:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    fa72:	bf28      	it	cs
    fa74:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    fa78:	d250      	bcs.n	fb1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    fa7a:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    fa7e:	2b01      	cmp	r3, #1
    fa80:	bf08      	it	eq
    fa82:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    fa86:	2001      	movs	r0, #1
    fa88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fa8c:	b134      	cbz	r4, fa9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    fa8e:	4584      	cmp	ip, r0
    fa90:	d104      	bne.n	fa9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    fa92:	f44f 711d 	mov.w	r1, #628	; 0x274
    fa96:	206c      	movs	r0, #108	; 0x6c
    fa98:	f000 fd10 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fa9c:	f1a0 0c04 	sub.w	ip, r0, #4
    faa0:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    faa4:	2b01      	cmp	r3, #1
    faa6:	e000      	b.n	faaa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    faa8:	e03b      	b.n	fb22 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    faaa:	bf0c      	ite	eq
    faac:	f04f 0801 	moveq.w	r8, #1
    fab0:	f04f 0800 	movne.w	r8, #0
    fab4:	2c03      	cmp	r4, #3
    fab6:	d304      	bcc.n	fac2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    fab8:	f240 114d 	movw	r1, #333	; 0x14d
    fabc:	206c      	movs	r0, #108	; 0x6c
    fabe:	f000 fcfd 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fac2:	f8df c074 	ldr.w	ip, [pc, #116]	; fb38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    fac6:	f104 0310 	add.w	r3, r4, #16
    faca:	fa07 f303 	lsl.w	r3, r7, r3
    face:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    fad2:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    fad6:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    fada:	f84c 6004 	str.w	r6, [ip, r4]
    fade:	1f00      	subs	r0, r0, #4
    fae0:	b2c0      	uxtb	r0, r0
    fae2:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    fae6:	b16a      	cbz	r2, fb04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    fae8:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    faec:	1b0c      	subs	r4, r1, r4
    faee:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    faf2:	42a2      	cmp	r2, r4
    faf4:	bf98      	it	ls
    faf6:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    fafa:	bf24      	itt	cs
    fafc:	2100      	movcs	r1, #0
    fafe:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    fb02:	d20b      	bcs.n	fb1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    fb04:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    fb08:	f1b8 0f00 	cmp.w	r8, #0
    fb0c:	bf18      	it	ne
    fb0e:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    fb12:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    fb16:	2001      	movs	r0, #1
    fb18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fb1c:	2000      	movs	r0, #0
    fb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fb22:	f240 2179 	movw	r1, #633	; 0x279
    fb26:	206c      	movs	r0, #108	; 0x6c
    fb28:	f000 fcc8 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fb2c:	20000023 	.word	0x20000023
    fb30:	20000020 	.word	0x20000020
    fb34:	40008000 	.word	0x40008000
    fb38:	4000b000 	.word	0x4000b000

0000fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    fb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fb40:	2600      	movs	r6, #0
    fb42:	f44f 77a0 	mov.w	r7, #320	; 0x140
    fb46:	f04f 0801 	mov.w	r8, #1
    fb4a:	2807      	cmp	r0, #7
    fb4c:	d251      	bcs.n	fbf2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    fb4e:	e8df f000 	tbb	[pc, r0]
    fb52:	0404      	.short	0x0404
    fb54:	19190404 	.word	0x19190404
    fb58:	0019      	.short	0x0019
    fb5a:	f100 0110 	add.w	r1, r0, #16
    fb5e:	fa08 f201 	lsl.w	r2, r8, r1
    fb62:	4926      	ldr	r1, [pc, #152]	; (fbfc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    fb64:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    fb68:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    fb6c:	2200      	movs	r2, #0
    fb6e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    fb72:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    fb76:	508e      	str	r6, [r1, r2]
    fb78:	4921      	ldr	r1, [pc, #132]	; (fc00 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    fb7a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    fb7e:	9000      	str	r0, [sp, #0]
    fb80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fb84:	4d1f      	ldr	r5, [pc, #124]	; (fc04 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    fb86:	1f01      	subs	r1, r0, #4
    fb88:	b2cc      	uxtb	r4, r1
    fb8a:	7829      	ldrb	r1, [r5, #0]
    fb8c:	b179      	cbz	r1, fbae <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    fb8e:	786a      	ldrb	r2, [r5, #1]
    fb90:	4282      	cmp	r2, r0
    fb92:	d10c      	bne.n	fbae <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    fb94:	4a1c      	ldr	r2, [pc, #112]	; (fc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    fb96:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    fb9a:	6010      	str	r0, [r2, #0]
    fb9c:	2901      	cmp	r1, #1
    fb9e:	bf08      	it	eq
    fba0:	f7ff fd3c 	bleq	f61c <MPSL_IRQ_TIMER0_Handler+0x100>
    fba4:	702e      	strb	r6, [r5, #0]
    fba6:	4919      	ldr	r1, [pc, #100]	; (fc0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    fba8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    fbac:	60c8      	str	r0, [r1, #12]
    fbae:	f104 0010 	add.w	r0, r4, #16
    fbb2:	fa08 f100 	lsl.w	r1, r8, r0
    fbb6:	4816      	ldr	r0, [pc, #88]	; (fc10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    fbb8:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    fbbc:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    fbc0:	00a1      	lsls	r1, r4, #2
    fbc2:	4401      	add	r1, r0
    fbc4:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    fbc8:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    fbcc:	1a89      	subs	r1, r1, r2
    fbce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    fbd2:	2902      	cmp	r1, #2
    fbd4:	d307      	bcc.n	fbe6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    fbd6:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    fbda:	2100      	movs	r1, #0
    fbdc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    fbe0:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    fbe4:	5046      	str	r6, [r0, r1]
    fbe6:	480b      	ldr	r0, [pc, #44]	; (fc14 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    fbe8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    fbec:	9000      	str	r0, [sp, #0]
    fbee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fbf2:	f240 21f1 	movw	r1, #753	; 0x2f1
    fbf6:	206c      	movs	r0, #108	; 0x6c
    fbf8:	f000 fc60 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fbfc:	40008000 	.word	0x40008000
    fc00:	40008140 	.word	0x40008140
    fc04:	20000023 	.word	0x20000023
    fc08:	4001f508 	.word	0x4001f508
    fc0c:	20000020 	.word	0x20000020
    fc10:	4000b000 	.word	0x4000b000
    fc14:	4000b140 	.word	0x4000b140

0000fc18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    fc18:	4920      	ldr	r1, [pc, #128]	; (fc9c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    fc1a:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    fc1e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    fc22:	481f      	ldr	r0, [pc, #124]	; (fca0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    fc24:	1d0a      	adds	r2, r1, #4
    fc26:	7803      	ldrb	r3, [r0, #0]
    fc28:	2000      	movs	r0, #0
    fc2a:	b15b      	cbz	r3, fc44 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    fc2c:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    fc30:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    fc34:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fc38:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    fc3c:	4919      	ldr	r1, [pc, #100]	; (fca4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    fc3e:	6809      	ldr	r1, [r1, #0]
    fc40:	b999      	cbnz	r1, fc6a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    fc42:	e00c      	b.n	fc5e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    fc44:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    fc48:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    fc4c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    fc50:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    fc54:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fc58:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    fc5c:	e7ee      	b.n	fc3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    fc5e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fc62:	f44f 6100 	mov.w	r1, #2048	; 0x800
    fc66:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    fc6a:	490f      	ldr	r1, [pc, #60]	; (fca8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    fc6c:	f04f 32ff 	mov.w	r2, #4294967295
    fc70:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    fc74:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    fc78:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    fc7c:	1d0a      	adds	r2, r1, #4
    fc7e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fc82:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    fc86:	1d12      	adds	r2, r2, #4
    fc88:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fc8c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    fc90:	1d12      	adds	r2, r2, #4
    fc92:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fc96:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    fc9a:	4770      	bx	lr
    fc9c:	4000b000 	.word	0x4000b000
    fca0:	20000023 	.word	0x20000023
    fca4:	4000b148 	.word	0x4000b148
    fca8:	40008000 	.word	0x40008000

0000fcac <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    fcac:	4808      	ldr	r0, [pc, #32]	; (fcd0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    fcae:	f990 0002 	ldrsb.w	r0, [r0, #2]
    fcb2:	2800      	cmp	r0, #0
    fcb4:	bfb8      	it	lt
    fcb6:	4770      	bxlt	lr
    fcb8:	f000 011f 	and.w	r1, r0, #31
    fcbc:	2201      	movs	r2, #1
    fcbe:	fa02 f101 	lsl.w	r1, r2, r1
    fcc2:	0940      	lsrs	r0, r0, #5
    fcc4:	0080      	lsls	r0, r0, #2
    fcc6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fcca:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    fcce:	4770      	bx	lr
    fcd0:	20000020 	.word	0x20000020

0000fcd4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    fcd4:	b510      	push	{r4, lr}
    fcd6:	2807      	cmp	r0, #7
    fcd8:	d20d      	bcs.n	fcf6 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    fcda:	e8df f000 	tbb	[pc, r0]
    fcde:	0404      	.short	0x0404
    fce0:	06060404 	.word	0x06060404
    fce4:	0006      	.short	0x0006
    fce6:	4906      	ldr	r1, [pc, #24]	; (fd00 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    fce8:	e002      	b.n	fcf0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    fcea:	1f00      	subs	r0, r0, #4
    fcec:	4905      	ldr	r1, [pc, #20]	; (fd04 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    fcee:	b2c0      	uxtb	r0, r0
    fcf0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    fcf4:	bd10      	pop	{r4, pc}
    fcf6:	f240 219d 	movw	r1, #669	; 0x29d
    fcfa:	206c      	movs	r0, #108	; 0x6c
    fcfc:	f000 fbde 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fd00:	40008140 	.word	0x40008140
    fd04:	4000b140 	.word	0x4000b140

0000fd08 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    fd08:	b510      	push	{r4, lr}
    fd0a:	2807      	cmp	r0, #7
    fd0c:	d20d      	bcs.n	fd2a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    fd0e:	e8df f000 	tbb	[pc, r0]
    fd12:	0404      	.short	0x0404
    fd14:	06060404 	.word	0x06060404
    fd18:	0006      	.short	0x0006
    fd1a:	4906      	ldr	r1, [pc, #24]	; (fd34 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    fd1c:	e002      	b.n	fd24 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    fd1e:	1f00      	subs	r0, r0, #4
    fd20:	4905      	ldr	r1, [pc, #20]	; (fd38 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    fd22:	b2c0      	uxtb	r0, r0
    fd24:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    fd28:	bd10      	pop	{r4, pc}
    fd2a:	f240 219d 	movw	r1, #669	; 0x29d
    fd2e:	206c      	movs	r0, #108	; 0x6c
    fd30:	f000 fbc4 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fd34:	40008140 	.word	0x40008140
    fd38:	4000b140 	.word	0x4000b140

0000fd3c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    fd3c:	b510      	push	{r4, lr}
    fd3e:	481c      	ldr	r0, [pc, #112]	; (fdb0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    fd40:	2400      	movs	r4, #0
    fd42:	2104      	movs	r1, #4
    fd44:	7004      	strb	r4, [r0, #0]
    fd46:	1ec0      	subs	r0, r0, #3
    fd48:	7001      	strb	r1, [r0, #0]
    fd4a:	0589      	lsls	r1, r1, #22
    fd4c:	60c1      	str	r1, [r0, #12]
    fd4e:	f7ff fc65 	bl	f61c <MPSL_IRQ_TIMER0_Handler+0x100>
    fd52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fd56:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fd5a:	f04f 0c01 	mov.w	ip, #1
    fd5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    fd62:	f3bf 8f4f 	dsb	sy
    fd66:	f3bf 8f6f 	isb	sy
    fd6a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    fd6e:	4811      	ldr	r0, [pc, #68]	; (fdb4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    fd70:	f8c0 c004 	str.w	ip, [r0, #4]
    fd74:	f8c0 c008 	str.w	ip, [r0, #8]
    fd78:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    fd7c:	2900      	cmp	r1, #0
    fd7e:	d1fb      	bne.n	fd78 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    fd80:	1e49      	subs	r1, r1, #1
    fd82:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    fd86:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    fd8a:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    fd8e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    fd92:	4909      	ldr	r1, [pc, #36]	; (fdb8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    fd94:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    fd98:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    fd9c:	1d09      	adds	r1, r1, #4
    fd9e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    fda2:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    fda6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    fdaa:	f8c0 c000 	str.w	ip, [r0]
    fdae:	bd10      	pop	{r4, pc}
    fdb0:	20000023 	.word	0x20000023
    fdb4:	4000b000 	.word	0x4000b000
    fdb8:	4000b004 	.word	0x4000b004

0000fdbc <MPSL_IRQ_CLOCK_Handler>:
    fdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdc0:	4c16      	ldr	r4, [pc, #88]	; (fe1c <MPSL_IRQ_CLOCK_Handler+0x60>)
    fdc2:	7a60      	ldrb	r0, [r4, #9]
    fdc4:	2800      	cmp	r0, #0
    fdc6:	d027      	beq.n	fe18 <MPSL_IRQ_CLOCK_Handler+0x5c>
    fdc8:	f44f 7180 	mov.w	r1, #256	; 0x100
    fdcc:	058d      	lsls	r5, r1, #22
    fdce:	4628      	mov	r0, r5
    fdd0:	f008 fd84 	bl	188dc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    fdd4:	4680      	mov	r8, r0
    fdd6:	f44f 7182 	mov.w	r1, #260	; 0x104
    fdda:	4628      	mov	r0, r5
    fddc:	f008 fd7e 	bl	188dc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    fde0:	2600      	movs	r6, #0
    fde2:	4607      	mov	r7, r0
    fde4:	f1b8 0f00 	cmp.w	r8, #0
    fde8:	d009      	beq.n	fdfe <MPSL_IRQ_CLOCK_Handler+0x42>
    fdea:	2001      	movs	r0, #1
    fdec:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    fdf0:	7920      	ldrb	r0, [r4, #4]
    fdf2:	b120      	cbz	r0, fdfe <MPSL_IRQ_CLOCK_Handler+0x42>
    fdf4:	7126      	strb	r6, [r4, #4]
    fdf6:	69e0      	ldr	r0, [r4, #28]
    fdf8:	b108      	cbz	r0, fdfe <MPSL_IRQ_CLOCK_Handler+0x42>
    fdfa:	4780      	blx	r0
    fdfc:	61e6      	str	r6, [r4, #28]
    fdfe:	b137      	cbz	r7, fe0e <MPSL_IRQ_CLOCK_Handler+0x52>
    fe00:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    fe04:	2002      	movs	r0, #2
    fe06:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    fe0a:	f000 fa8b 	bl	10324 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    fe0e:	4640      	mov	r0, r8
    fe10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fe14:	f000 b85a 	b.w	fecc <MPSL_IRQ_CLOCK_Handler+0x110>
    fe18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe1c:	20000030 	.word	0x20000030
    fe20:	b510      	push	{r4, lr}
    fe22:	f008 fe05 	bl	18a30 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    fe26:	b930      	cbnz	r0, fe36 <MPSL_IRQ_CLOCK_Handler+0x7a>
    fe28:	f008 fe23 	bl	18a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fe2c:	b918      	cbnz	r0, fe36 <MPSL_IRQ_CLOCK_Handler+0x7a>
    fe2e:	f008 fe56 	bl	18ade <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fe32:	2800      	cmp	r0, #0
    fe34:	d002      	beq.n	fe3c <MPSL_IRQ_CLOCK_Handler+0x80>
    fe36:	4902      	ldr	r1, [pc, #8]	; (fe40 <MPSL_IRQ_CLOCK_Handler+0x84>)
    fe38:	2002      	movs	r0, #2
    fe3a:	6008      	str	r0, [r1, #0]
    fe3c:	bd10      	pop	{r4, pc}
    fe3e:	0000      	.short	0x0000
    fe40:	40000c34 	.word	0x40000c34
    fe44:	b570      	push	{r4, r5, r6, lr}
    fe46:	f000 f987 	bl	10158 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    fe4a:	f000 fabf 	bl	103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    fe4e:	4c09      	ldr	r4, [pc, #36]	; (fe74 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    fe50:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    fe54:	b130      	cbz	r0, fe64 <MPSL_IRQ_CLOCK_Handler+0xa8>
    fe56:	f7ff ffe3 	bl	fe20 <MPSL_IRQ_CLOCK_Handler+0x64>
    fe5a:	2001      	movs	r0, #1
    fe5c:	6128      	str	r0, [r5, #16]
    fe5e:	2004      	movs	r0, #4
    fe60:	72a0      	strb	r0, [r4, #10]
    fe62:	e004      	b.n	fe6e <MPSL_IRQ_CLOCK_Handler+0xb2>
    fe64:	2003      	movs	r0, #3
    fe66:	72a0      	strb	r0, [r4, #10]
    fe68:	2001      	movs	r0, #1
    fe6a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    fe6e:	2000      	movs	r0, #0
    fe70:	71e0      	strb	r0, [r4, #7]
    fe72:	bd70      	pop	{r4, r5, r6, pc}
    fe74:	20000030 	.word	0x20000030
    fe78:	b570      	push	{r4, r5, r6, lr}
    fe7a:	4c13      	ldr	r4, [pc, #76]	; (fec8 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    fe7c:	79a0      	ldrb	r0, [r4, #6]
    fe7e:	b1f0      	cbz	r0, febe <MPSL_IRQ_CLOCK_Handler+0x102>
    fe80:	2801      	cmp	r0, #1
    fe82:	d003      	beq.n	fe8c <MPSL_IRQ_CLOCK_Handler+0xd0>
    fe84:	79e1      	ldrb	r1, [r4, #7]
    fe86:	1e40      	subs	r0, r0, #1
    fe88:	4281      	cmp	r1, r0
    fe8a:	da18      	bge.n	febe <MPSL_IRQ_CLOCK_Handler+0x102>
    fe8c:	f000 fa9e 	bl	103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    fe90:	4605      	mov	r5, r0
    fe92:	f000 fb83 	bl	1059c <mpsl_temperature_get>
    fe96:	79a1      	ldrb	r1, [r4, #6]
    fe98:	2901      	cmp	r1, #1
    fe9a:	d902      	bls.n	fea2 <MPSL_IRQ_CLOCK_Handler+0xe6>
    fe9c:	79e1      	ldrb	r1, [r4, #7]
    fe9e:	1c49      	adds	r1, r1, #1
    fea0:	71e1      	strb	r1, [r4, #7]
    fea2:	b10d      	cbz	r5, fea8 <MPSL_IRQ_CLOCK_Handler+0xec>
    fea4:	6961      	ldr	r1, [r4, #20]
    fea6:	e000      	b.n	feaa <MPSL_IRQ_CLOCK_Handler+0xee>
    fea8:	6921      	ldr	r1, [r4, #16]
    feaa:	1a41      	subs	r1, r0, r1
    feac:	2902      	cmp	r1, #2
    feae:	da02      	bge.n	feb6 <MPSL_IRQ_CLOCK_Handler+0xfa>
    feb0:	f111 0f02 	cmn.w	r1, #2
    feb4:	dc07      	bgt.n	fec6 <MPSL_IRQ_CLOCK_Handler+0x10a>
    feb6:	b10d      	cbz	r5, febc <MPSL_IRQ_CLOCK_Handler+0x100>
    feb8:	6160      	str	r0, [r4, #20]
    feba:	e000      	b.n	febe <MPSL_IRQ_CLOCK_Handler+0x102>
    febc:	6120      	str	r0, [r4, #16]
    febe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fec2:	f7ff bfbf 	b.w	fe44 <MPSL_IRQ_CLOCK_Handler+0x88>
    fec6:	bd70      	pop	{r4, r5, r6, pc}
    fec8:	20000030 	.word	0x20000030
    fecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fed0:	4606      	mov	r6, r0
    fed2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    fed6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    feda:	4628      	mov	r0, r5
    fedc:	f008 fcfe 	bl	188dc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    fee0:	4680      	mov	r8, r0
    fee2:	f44f 7188 	mov.w	r1, #272	; 0x110
    fee6:	4628      	mov	r0, r5
    fee8:	f008 fcf8 	bl	188dc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    feec:	4c27      	ldr	r4, [pc, #156]	; (ff8c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    feee:	4682      	mov	sl, r0
    fef0:	7827      	ldrb	r7, [r4, #0]
    fef2:	f104 0008 	add.w	r0, r4, #8
    fef6:	f008 fd65 	bl	189c4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    fefa:	b110      	cbz	r0, ff02 <MPSL_IRQ_CLOCK_Handler+0x146>
    fefc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    ff00:	e016      	b.n	ff30 <MPSL_IRQ_CLOCK_Handler+0x174>
    ff02:	f04f 0901 	mov.w	r9, #1
    ff06:	b146      	cbz	r6, ff1a <MPSL_IRQ_CLOCK_Handler+0x15e>
    ff08:	7aa0      	ldrb	r0, [r4, #10]
    ff0a:	2803      	cmp	r0, #3
    ff0c:	d105      	bne.n	ff1a <MPSL_IRQ_CLOCK_Handler+0x15e>
    ff0e:	2004      	movs	r0, #4
    ff10:	72a0      	strb	r0, [r4, #10]
    ff12:	f7ff ff85 	bl	fe20 <MPSL_IRQ_CLOCK_Handler+0x64>
    ff16:	f8c5 9010 	str.w	r9, [r5, #16]
    ff1a:	2600      	movs	r6, #0
    ff1c:	f1b8 0f00 	cmp.w	r8, #0
    ff20:	d018      	beq.n	ff54 <MPSL_IRQ_CLOCK_Handler+0x198>
    ff22:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    ff26:	7aa0      	ldrb	r0, [r4, #10]
    ff28:	2804      	cmp	r0, #4
    ff2a:	d004      	beq.n	ff36 <MPSL_IRQ_CLOCK_Handler+0x17a>
    ff2c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    ff30:	206d      	movs	r0, #109	; 0x6d
    ff32:	f000 fac3 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ff36:	f008 fd7b 	bl	18a30 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    ff3a:	b928      	cbnz	r0, ff48 <MPSL_IRQ_CLOCK_Handler+0x18c>
    ff3c:	f008 fd99 	bl	18a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ff40:	b910      	cbnz	r0, ff48 <MPSL_IRQ_CLOCK_Handler+0x18c>
    ff42:	f008 fdcc 	bl	18ade <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ff46:	b108      	cbz	r0, ff4c <MPSL_IRQ_CLOCK_Handler+0x190>
    ff48:	4811      	ldr	r0, [pc, #68]	; (ff90 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    ff4a:	6006      	str	r6, [r0, #0]
    ff4c:	2002      	movs	r0, #2
    ff4e:	72a0      	strb	r0, [r4, #10]
    ff50:	f000 f8e6 	bl	10120 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    ff54:	f1ba 0f00 	cmp.w	sl, #0
    ff58:	d008      	beq.n	ff6c <MPSL_IRQ_CLOCK_Handler+0x1b0>
    ff5a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    ff5e:	7aa0      	ldrb	r0, [r4, #10]
    ff60:	2802      	cmp	r0, #2
    ff62:	d101      	bne.n	ff68 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    ff64:	f7ff ff88 	bl	fe78 <MPSL_IRQ_CLOCK_Handler+0xbc>
    ff68:	f8c5 9014 	str.w	r9, [r5, #20]
    ff6c:	b13f      	cbz	r7, ff7e <MPSL_IRQ_CLOCK_Handler+0x1c2>
    ff6e:	7026      	strb	r6, [r4, #0]
    ff70:	7aa0      	ldrb	r0, [r4, #10]
    ff72:	2802      	cmp	r0, #2
    ff74:	d101      	bne.n	ff7a <MPSL_IRQ_CLOCK_Handler+0x1be>
    ff76:	f7ff ff65 	bl	fe44 <MPSL_IRQ_CLOCK_Handler+0x88>
    ff7a:	f000 f8d1 	bl	10120 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    ff7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ff82:	4802      	ldr	r0, [pc, #8]	; (ff8c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    ff84:	3008      	adds	r0, #8
    ff86:	f008 bd34 	b.w	189f2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    ff8a:	0000      	.short	0x0000
    ff8c:	20000030 	.word	0x20000030
    ff90:	40000c34 	.word	0x40000c34
    ff94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ff98:	4c5c      	ldr	r4, [pc, #368]	; (1010c <MPSL_IRQ_CLOCK_Handler+0x350>)
    ff9a:	f04f 0800 	mov.w	r8, #0
    ff9e:	4606      	mov	r6, r0
    ffa0:	f8c4 8018 	str.w	r8, [r4, #24]
    ffa4:	7843      	ldrb	r3, [r0, #1]
    ffa6:	7882      	ldrb	r2, [r0, #2]
    ffa8:	7800      	ldrb	r0, [r0, #0]
    ffaa:	72e0      	strb	r0, [r4, #11]
    ffac:	7163      	strb	r3, [r4, #5]
    ffae:	2701      	movs	r7, #1
    ffb0:	71a2      	strb	r2, [r4, #6]
    ffb2:	07bd      	lsls	r5, r7, #30
    ffb4:	f884 8007 	strb.w	r8, [r4, #7]
    ffb8:	2805      	cmp	r0, #5
    ffba:	d224      	bcs.n	10006 <MPSL_IRQ_CLOCK_Handler+0x24a>
    ffbc:	e8df f000 	tbb	[pc, r0]
    ffc0:	1f05030f 	.word	0x1f05030f
    ffc4:	0021      	.short	0x0021
    ffc6:	61a7      	str	r7, [r4, #24]
    ffc8:	e009      	b.n	ffde <MPSL_IRQ_CLOCK_Handler+0x222>
    ffca:	f000 f8c5 	bl	10158 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    ffce:	2101      	movs	r1, #1
    ffd0:	4628      	mov	r0, r5
    ffd2:	f008 fc88 	bl	188e6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    ffd6:	2800      	cmp	r0, #0
    ffd8:	d0f9      	beq.n	ffce <MPSL_IRQ_CLOCK_Handler+0x212>
    ffda:	2002      	movs	r0, #2
    ffdc:	61a0      	str	r0, [r4, #24]
    ffde:	f008 fcae 	bl	1893e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    ffe2:	b1b0      	cbz	r0, 10012 <MPSL_IRQ_CLOCK_Handler+0x256>
    ffe4:	f000 fa0c 	bl	10400 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    ffe8:	7e21      	ldrb	r1, [r4, #24]
    ffea:	f001 0103 	and.w	r1, r1, #3
    ffee:	4288      	cmp	r0, r1
    fff0:	d10f      	bne.n	10012 <MPSL_IRQ_CLOCK_Handler+0x256>
    fff2:	79b0      	ldrb	r0, [r6, #6]
    fff4:	b150      	cbz	r0, 1000c <MPSL_IRQ_CLOCK_Handler+0x250>
    fff6:	2002      	movs	r0, #2
    fff8:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    fffc:	e06a      	b.n	100d4 <MPSL_IRQ_CLOCK_Handler+0x318>
    fffe:	4844      	ldr	r0, [pc, #272]	; (10110 <MPSL_IRQ_CLOCK_Handler+0x354>)
   10000:	e7ec      	b.n	ffdc <MPSL_IRQ_CLOCK_Handler+0x220>
   10002:	4844      	ldr	r0, [pc, #272]	; (10114 <MPSL_IRQ_CLOCK_Handler+0x358>)
   10004:	e7ea      	b.n	ffdc <MPSL_IRQ_CLOCK_Handler+0x220>
   10006:	f240 312d 	movw	r1, #813	; 0x32d
   1000a:	e049      	b.n	100a0 <MPSL_IRQ_CLOCK_Handler+0x2e4>
   1000c:	f000 f9cc 	bl	103a8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
   10010:	e060      	b.n	100d4 <MPSL_IRQ_CLOCK_Handler+0x318>
   10012:	60ef      	str	r7, [r5, #12]
   10014:	f44f 7a82 	mov.w	sl, #260	; 0x104
   10018:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
   1001c:	69a0      	ldr	r0, [r4, #24]
   1001e:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
   10022:	f008 fcf1 	bl	18a08 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10026:	b940      	cbnz	r0, 1003a <MPSL_IRQ_CLOCK_Handler+0x27e>
   10028:	f008 fcf8 	bl	18a1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1002c:	b928      	cbnz	r0, 1003a <MPSL_IRQ_CLOCK_Handler+0x27e>
   1002e:	f008 fd0c 	bl	18a4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   10032:	b910      	cbnz	r0, 1003a <MPSL_IRQ_CLOCK_Handler+0x27e>
   10034:	f008 fd1d 	bl	18a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10038:	b138      	cbz	r0, 1004a <MPSL_IRQ_CLOCK_Handler+0x28e>
   1003a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1003e:	4836      	ldr	r0, [pc, #216]	; (10118 <MPSL_IRQ_CLOCK_Handler+0x35c>)
   10040:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
   10044:	f3c1 3142 	ubfx	r1, r1, #13, #3
   10048:	6001      	str	r1, [r0, #0]
   1004a:	f008 fcdd 	bl	18a08 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   1004e:	b940      	cbnz	r0, 10062 <MPSL_IRQ_CLOCK_Handler+0x2a6>
   10050:	f008 fce4 	bl	18a1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10054:	b928      	cbnz	r0, 10062 <MPSL_IRQ_CLOCK_Handler+0x2a6>
   10056:	f008 fcf8 	bl	18a4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1005a:	b910      	cbnz	r0, 10062 <MPSL_IRQ_CLOCK_Handler+0x2a6>
   1005c:	f008 fd09 	bl	18a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10060:	b110      	cbz	r0, 10068 <MPSL_IRQ_CLOCK_Handler+0x2ac>
   10062:	482d      	ldr	r0, [pc, #180]	; (10118 <MPSL_IRQ_CLOCK_Handler+0x35c>)
   10064:	3010      	adds	r0, #16
   10066:	6007      	str	r7, [r0, #0]
   10068:	60af      	str	r7, [r5, #8]
   1006a:	2002      	movs	r0, #2
   1006c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   10070:	79b0      	ldrb	r0, [r6, #6]
   10072:	bb78      	cbnz	r0, 100d4 <MPSL_IRQ_CLOCK_Handler+0x318>
   10074:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   10078:	f010 0f02 	tst.w	r0, #2
   1007c:	d00e      	beq.n	1009c <MPSL_IRQ_CLOCK_Handler+0x2e0>
   1007e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1011c <MPSL_IRQ_CLOCK_Handler+0x360>
   10082:	f8d9 1000 	ldr.w	r1, [r9]
   10086:	43c9      	mvns	r1, r1
   10088:	f341 1700 	sbfx	r7, r1, #4, #1
   1008c:	f8d9 1000 	ldr.w	r1, [r9]
   10090:	f041 0110 	orr.w	r1, r1, #16
   10094:	f8c9 1000 	str.w	r1, [r9]
   10098:	1c7f      	adds	r7, r7, #1
   1009a:	e007      	b.n	100ac <MPSL_IRQ_CLOCK_Handler+0x2f0>
   1009c:	f240 21ee 	movw	r1, #750	; 0x2ee
   100a0:	206d      	movs	r0, #109	; 0x6d
   100a2:	f000 fa0b 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   100a6:	bf00      	nop
   100a8:	f000 fb2e 	bl	10708 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   100ac:	4651      	mov	r1, sl
   100ae:	4628      	mov	r0, r5
   100b0:	f008 fc14 	bl	188dc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
   100b4:	2800      	cmp	r0, #0
   100b6:	d0f7      	beq.n	100a8 <MPSL_IRQ_CLOCK_Handler+0x2ec>
   100b8:	f000 f976 	bl	103a8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
   100bc:	b92f      	cbnz	r7, 100ca <MPSL_IRQ_CLOCK_Handler+0x30e>
   100be:	f8d9 1000 	ldr.w	r1, [r9]
   100c2:	f021 0110 	bic.w	r1, r1, #16
   100c6:	f8c9 1000 	str.w	r1, [r9]
   100ca:	2002      	movs	r0, #2
   100cc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   100d0:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
   100d4:	79a0      	ldrb	r0, [r4, #6]
   100d6:	b170      	cbz	r0, 100f6 <MPSL_IRQ_CLOCK_Handler+0x33a>
   100d8:	7830      	ldrb	r0, [r6, #0]
   100da:	b960      	cbnz	r0, 100f6 <MPSL_IRQ_CLOCK_Handler+0x33a>
   100dc:	f000 f976 	bl	103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   100e0:	4606      	mov	r6, r0
   100e2:	f000 fa5b 	bl	1059c <mpsl_temperature_get>
   100e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   100ea:	b116      	cbz	r6, 100f2 <MPSL_IRQ_CLOCK_Handler+0x336>
   100ec:	e9c4 2004 	strd	r2, r0, [r4, #16]
   100f0:	e001      	b.n	100f6 <MPSL_IRQ_CLOCK_Handler+0x33a>
   100f2:	e9c4 0204 	strd	r0, r2, [r4, #16]
   100f6:	2101      	movs	r1, #1
   100f8:	4628      	mov	r0, r5
   100fa:	f008 fbf4 	bl	188e6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
   100fe:	b108      	cbz	r0, 10104 <MPSL_IRQ_CLOCK_Handler+0x348>
   10100:	f000 f95e 	bl	103c0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
   10104:	f884 800a 	strb.w	r8, [r4, #10]
   10108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1010c:	20000030 	.word	0x20000030
   10110:	00020001 	.word	0x00020001
   10114:	00030001 	.word	0x00030001
   10118:	4000053c 	.word	0x4000053c
   1011c:	e000ed10 	.word	0xe000ed10

00010120 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
   10120:	b510      	push	{r4, lr}
   10122:	f3ef 8410 	mrs	r4, PRIMASK
   10126:	b672      	cpsid	i
   10128:	480a      	ldr	r0, [pc, #40]	; (10154 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
   1012a:	7841      	ldrb	r1, [r0, #1]
   1012c:	b129      	cbz	r1, 1013a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
   1012e:	7841      	ldrb	r1, [r0, #1]
   10130:	1e49      	subs	r1, r1, #1
   10132:	7041      	strb	r1, [r0, #1]
   10134:	7841      	ldrb	r1, [r0, #1]
   10136:	b129      	cbz	r1, 10144 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
   10138:	e008      	b.n	1014c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
   1013a:	f240 110d 	movw	r1, #269	; 0x10d
   1013e:	206d      	movs	r0, #109	; 0x6d
   10140:	f000 f9bc 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10144:	7880      	ldrb	r0, [r0, #2]
   10146:	b908      	cbnz	r0, 1014c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
   10148:	f000 f94e 	bl	103e8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
   1014c:	2c00      	cmp	r4, #0
   1014e:	d100      	bne.n	10152 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
   10150:	b662      	cpsie	i
   10152:	bd10      	pop	{r4, pc}
   10154:	20000030 	.word	0x20000030

00010158 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
   10158:	b510      	push	{r4, lr}
   1015a:	f3ef 8410 	mrs	r4, PRIMASK
   1015e:	b672      	cpsid	i
   10160:	4806      	ldr	r0, [pc, #24]	; (1017c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
   10162:	7841      	ldrb	r1, [r0, #1]
   10164:	1c49      	adds	r1, r1, #1
   10166:	7041      	strb	r1, [r0, #1]
   10168:	7840      	ldrb	r0, [r0, #1]
   1016a:	2801      	cmp	r0, #1
   1016c:	d101      	bne.n	10172 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
   1016e:	f008 fbd1 	bl	18914 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
   10172:	2c00      	cmp	r4, #0
   10174:	d100      	bne.n	10178 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
   10176:	b662      	cpsie	i
   10178:	bd10      	pop	{r4, pc}
   1017a:	0000      	.short	0x0000
   1017c:	20000030 	.word	0x20000030

00010180 <mpsl_clock_hfclk_release>:
   10180:	4805      	ldr	r0, [pc, #20]	; (10198 <mpsl_clock_hfclk_release+0x18>)
   10182:	b510      	push	{r4, lr}
   10184:	78c1      	ldrb	r1, [r0, #3]
   10186:	b121      	cbz	r1, 10192 <mpsl_clock_hfclk_release+0x12>
   10188:	2100      	movs	r1, #0
   1018a:	7101      	strb	r1, [r0, #4]
   1018c:	70c1      	strb	r1, [r0, #3]
   1018e:	f7ff ffc7 	bl	10120 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   10192:	2000      	movs	r0, #0
   10194:	bd10      	pop	{r4, pc}
   10196:	0000      	.short	0x0000
   10198:	20000030 	.word	0x20000030

0001019c <mpsl_clock_hfclk_request>:
   1019c:	b570      	push	{r4, r5, r6, lr}
   1019e:	4c0c      	ldr	r4, [pc, #48]	; (101d0 <mpsl_clock_hfclk_request+0x34>)
   101a0:	78e1      	ldrb	r1, [r4, #3]
   101a2:	b961      	cbnz	r1, 101be <mpsl_clock_hfclk_request+0x22>
   101a4:	2501      	movs	r5, #1
   101a6:	70e5      	strb	r5, [r4, #3]
   101a8:	61e0      	str	r0, [r4, #28]
   101aa:	f7ff ffd5 	bl	10158 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   101ae:	f000 f90d 	bl	103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   101b2:	b130      	cbz	r0, 101c2 <mpsl_clock_hfclk_request+0x26>
   101b4:	69e0      	ldr	r0, [r4, #28]
   101b6:	b110      	cbz	r0, 101be <mpsl_clock_hfclk_request+0x22>
   101b8:	4780      	blx	r0
   101ba:	2000      	movs	r0, #0
   101bc:	61e0      	str	r0, [r4, #28]
   101be:	2000      	movs	r0, #0
   101c0:	bd70      	pop	{r4, r5, r6, pc}
   101c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   101c6:	7125      	strb	r5, [r4, #4]
   101c8:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
   101cc:	e7f7      	b.n	101be <mpsl_clock_hfclk_request+0x22>
   101ce:	0000      	.short	0x0000
   101d0:	20000030 	.word	0x20000030

000101d4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
   101d4:	f3ef 8010 	mrs	r0, PRIMASK
   101d8:	b672      	cpsid	i
   101da:	4904      	ldr	r1, [pc, #16]	; (101ec <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
   101dc:	788a      	ldrb	r2, [r1, #2]
   101de:	1c52      	adds	r2, r2, #1
   101e0:	708a      	strb	r2, [r1, #2]
   101e2:	2800      	cmp	r0, #0
   101e4:	d100      	bne.n	101e8 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
   101e6:	b662      	cpsie	i
   101e8:	4770      	bx	lr
   101ea:	0000      	.short	0x0000
   101ec:	20000030 	.word	0x20000030

000101f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
   101f0:	b510      	push	{r4, lr}
   101f2:	f3ef 8410 	mrs	r4, PRIMASK
   101f6:	b672      	cpsid	i
   101f8:	480a      	ldr	r0, [pc, #40]	; (10224 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
   101fa:	7881      	ldrb	r1, [r0, #2]
   101fc:	b129      	cbz	r1, 1020a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
   101fe:	7881      	ldrb	r1, [r0, #2]
   10200:	1e49      	subs	r1, r1, #1
   10202:	7081      	strb	r1, [r0, #2]
   10204:	7841      	ldrb	r1, [r0, #1]
   10206:	b129      	cbz	r1, 10214 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
   10208:	e008      	b.n	1021c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
   1020a:	f240 1125 	movw	r1, #293	; 0x125
   1020e:	206d      	movs	r0, #109	; 0x6d
   10210:	f000 f954 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10214:	7880      	ldrb	r0, [r0, #2]
   10216:	b908      	cbnz	r0, 1021c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
   10218:	f000 f8e6 	bl	103e8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
   1021c:	2c00      	cmp	r4, #0
   1021e:	d100      	bne.n	10222 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
   10220:	b662      	cpsie	i
   10222:	bd10      	pop	{r4, pc}
   10224:	20000030 	.word	0x20000030

00010228 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
   10228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1022c:	0004      	movs	r4, r0
   1022e:	f06f 0015 	mvn.w	r0, #21
   10232:	d03c      	beq.n	102ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   10234:	7821      	ldrb	r1, [r4, #0]
   10236:	2904      	cmp	r1, #4
   10238:	d839      	bhi.n	102ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   1023a:	2900      	cmp	r1, #0
   1023c:	7861      	ldrb	r1, [r4, #1]
   1023e:	d038      	beq.n	102b2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
   10240:	2900      	cmp	r1, #0
   10242:	d134      	bne.n	102ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   10244:	78a1      	ldrb	r1, [r4, #2]
   10246:	2900      	cmp	r1, #0
   10248:	d131      	bne.n	102ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   1024a:	2000      	movs	r0, #0
   1024c:	f008 fb11 	bl	18872 <MPSL_IRQ_RADIO_Handler+0x1e>
   10250:	2000      	movs	r0, #0
   10252:	f008 fb01 	bl	18858 <MPSL_IRQ_RADIO_Handler+0x4>
   10256:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   1025a:	f04f 31ff 	mov.w	r1, #4294967295
   1025e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
   10262:	2600      	movs	r6, #0
   10264:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
   10268:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
   1026c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
   10270:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
   10274:	4f14      	ldr	r7, [pc, #80]	; (102c8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
   10276:	707e      	strb	r6, [r7, #1]
   10278:	88a0      	ldrh	r0, [r4, #4]
   1027a:	81b8      	strh	r0, [r7, #12]
   1027c:	f008 fb41 	bl	18902 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
   10280:	2501      	movs	r5, #1
   10282:	b108      	cbz	r0, 10288 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
   10284:	70fd      	strb	r5, [r7, #3]
   10286:	707d      	strb	r5, [r7, #1]
   10288:	2101      	movs	r1, #1
   1028a:	4640      	mov	r0, r8
   1028c:	f008 fb2b 	bl	188e6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
   10290:	b108      	cbz	r0, 10296 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
   10292:	f000 f895 	bl	103c0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
   10296:	4620      	mov	r0, r4
   10298:	f7ff fe7c 	bl	ff94 <MPSL_IRQ_CLOCK_Handler+0x1d8>
   1029c:	727d      	strb	r5, [r7, #9]
   1029e:	2000      	movs	r0, #0
   102a0:	f008 fada 	bl	18858 <MPSL_IRQ_RADIO_Handler+0x4>
   102a4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   102a8:	4630      	mov	r0, r6
   102aa:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
   102ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102b2:	2900      	cmp	r1, #0
   102b4:	d0fb      	beq.n	102ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   102b6:	2920      	cmp	r1, #32
   102b8:	d8f9      	bhi.n	102ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   102ba:	78a1      	ldrb	r1, [r4, #2]
   102bc:	2921      	cmp	r1, #33	; 0x21
   102be:	d8f6      	bhi.n	102ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   102c0:	2901      	cmp	r1, #1
   102c2:	d1c2      	bne.n	1024a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
   102c4:	e7f3      	b.n	102ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   102c6:	0000      	.short	0x0000
   102c8:	20000030 	.word	0x20000030

000102cc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
   102cc:	4801      	ldr	r0, [pc, #4]	; (102d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
   102ce:	8980      	ldrh	r0, [r0, #12]
   102d0:	4770      	bx	lr
   102d2:	0000      	.short	0x0000
   102d4:	20000030 	.word	0x20000030

000102d8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
   102d8:	b510      	push	{r4, lr}
   102da:	480d      	ldr	r0, [pc, #52]	; (10310 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   102dc:	f008 fb72 	bl	189c4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   102e0:	490b      	ldr	r1, [pc, #44]	; (10310 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   102e2:	3908      	subs	r1, #8
   102e4:	b148      	cbz	r0, 102fa <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
   102e6:	2001      	movs	r0, #1
   102e8:	7008      	strb	r0, [r1, #0]
   102ea:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   102ee:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   102f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102f6:	f7ff bf2f 	b.w	10158 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   102fa:	7a88      	ldrb	r0, [r1, #10]
   102fc:	2802      	cmp	r0, #2
   102fe:	d101      	bne.n	10304 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
   10300:	f7ff fda0 	bl	fe44 <MPSL_IRQ_CLOCK_Handler+0x88>
   10304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10308:	4801      	ldr	r0, [pc, #4]	; (10310 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   1030a:	f008 bb72 	b.w	189f2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   1030e:	0000      	.short	0x0000
   10310:	20000038 	.word	0x20000038

00010314 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
   10314:	4802      	ldr	r0, [pc, #8]	; (10320 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
   10316:	7a80      	ldrb	r0, [r0, #10]
   10318:	2800      	cmp	r0, #0
   1031a:	d000      	beq.n	1031e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
   1031c:	2001      	movs	r0, #1
   1031e:	4770      	bx	lr
   10320:	20000030 	.word	0x20000030

00010324 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
   10324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10326:	4d1f      	ldr	r5, [pc, #124]	; (103a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   10328:	7ae8      	ldrb	r0, [r5, #11]
   1032a:	2800      	cmp	r0, #0
   1032c:	d10f      	bne.n	1034e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   1032e:	7e28      	ldrb	r0, [r5, #24]
   10330:	f000 0003 	and.w	r0, r0, #3
   10334:	f008 faf3 	bl	1891e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   10338:	2800      	cmp	r0, #0
   1033a:	d008      	beq.n	1034e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   1033c:	f3ef 8110 	mrs	r1, PRIMASK
   10340:	b672      	cpsid	i
   10342:	f7ff ffe7 	bl	10314 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
   10346:	b118      	cbz	r0, 10350 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
   10348:	2900      	cmp	r1, #0
   1034a:	d100      	bne.n	1034e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   1034c:	b662      	cpsie	i
   1034e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10350:	2601      	movs	r6, #1
   10352:	72ae      	strb	r6, [r5, #10]
   10354:	b901      	cbnz	r1, 10358 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
   10356:	b662      	cpsie	i
   10358:	2018      	movs	r0, #24
   1035a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1035e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   10362:	61a6      	str	r6, [r4, #24]
   10364:	f44f 7020 	mov.w	r0, #640	; 0x280
   10368:	f8ad 0000 	strh.w	r0, [sp]
   1036c:	f8bd 0000 	ldrh.w	r0, [sp]
   10370:	1e41      	subs	r1, r0, #1
   10372:	f8ad 1000 	strh.w	r1, [sp]
   10376:	d2f9      	bcs.n	1036c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
   10378:	2700      	movs	r7, #0
   1037a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
   1037e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   10382:	4808      	ldr	r0, [pc, #32]	; (103a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   10384:	3008      	adds	r0, #8
   10386:	f008 fb30 	bl	189ea <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   1038a:	702f      	strb	r7, [r5, #0]
   1038c:	f7ff fd5a 	bl	fe44 <MPSL_IRQ_CLOCK_Handler+0x88>
   10390:	6166      	str	r6, [r4, #20]
   10392:	7968      	ldrb	r0, [r5, #5]
   10394:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   10398:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   1039c:	2018      	movs	r0, #24
   1039e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   103a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   103a4:	20000030 	.word	0x20000030

000103a8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
   103a8:	b510      	push	{r4, lr}
   103aa:	4c04      	ldr	r4, [pc, #16]	; (103bc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
   103ac:	7e20      	ldrb	r0, [r4, #24]
   103ae:	f000 0003 	and.w	r0, r0, #3
   103b2:	f008 fab4 	bl	1891e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   103b6:	2800      	cmp	r0, #0
   103b8:	d0f8      	beq.n	103ac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
   103ba:	bd10      	pop	{r4, pc}
   103bc:	20000030 	.word	0x20000030

000103c0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
   103c0:	4901      	ldr	r1, [pc, #4]	; (103c8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
   103c2:	2001      	movs	r0, #1
   103c4:	7008      	strb	r0, [r1, #0]
   103c6:	4770      	bx	lr
   103c8:	20000294 	.word	0x20000294

000103cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
   103cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   103d0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   103d4:	b918      	cbnz	r0, 103de <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
   103d6:	4803      	ldr	r0, [pc, #12]	; (103e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
   103d8:	7800      	ldrb	r0, [r0, #0]
   103da:	2800      	cmp	r0, #0
   103dc:	d000      	beq.n	103e0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
   103de:	2001      	movs	r0, #1
   103e0:	4770      	bx	lr
   103e2:	0000      	.short	0x0000
   103e4:	20000294 	.word	0x20000294

000103e8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
   103e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   103ec:	2101      	movs	r1, #1
   103ee:	6041      	str	r1, [r0, #4]
   103f0:	2100      	movs	r1, #0
   103f2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   103f6:	4801      	ldr	r0, [pc, #4]	; (103fc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
   103f8:	7001      	strb	r1, [r0, #0]
   103fa:	4770      	bx	lr
   103fc:	20000294 	.word	0x20000294

00010400 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
   10400:	4802      	ldr	r0, [pc, #8]	; (1040c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
   10402:	6800      	ldr	r0, [r0, #0]
   10404:	f000 0003 	and.w	r0, r0, #3
   10408:	4770      	bx	lr
   1040a:	0000      	.short	0x0000
   1040c:	4000041c 	.word	0x4000041c
   10410:	b510      	push	{r4, lr}
   10412:	b131      	cbz	r1, 10422 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
   10414:	2901      	cmp	r1, #1
   10416:	d007      	beq.n	10428 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
   10418:	f240 3102 	movw	r1, #770	; 0x302
   1041c:	a005      	add	r0, pc, #20	; (adr r0, 10434 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
   1041e:	f000 f821 	bl	10464 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
   10422:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
   10426:	e001      	b.n	1042c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
   10428:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
   1042c:	f000 0001 	and.w	r0, r0, #1
   10430:	bd10      	pop	{r4, pc}
   10432:	0000      	.short	0x0000
   10434:	5f66726e 	.word	0x5f66726e
   10438:	636f6c63 	.word	0x636f6c63
   1043c:	00682e6b 	.word	0x00682e6b
   10440:	f3bf 8f4f 	dsb	sy
   10444:	4805      	ldr	r0, [pc, #20]	; (1045c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
   10446:	6801      	ldr	r1, [r0, #0]
   10448:	4a05      	ldr	r2, [pc, #20]	; (10460 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
   1044a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   1044e:	4311      	orrs	r1, r2
   10450:	6001      	str	r1, [r0, #0]
   10452:	f3bf 8f4f 	dsb	sy
   10456:	bf00      	nop
   10458:	e7fd      	b.n	10456 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
   1045a:	0000      	.short	0x0000
   1045c:	e000ed0c 	.word	0xe000ed0c
   10460:	05fa0004 	.word	0x05fa0004

00010464 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
   10464:	b672      	cpsid	i
   10466:	4a03      	ldr	r2, [pc, #12]	; (10474 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
   10468:	6852      	ldr	r2, [r2, #4]
   1046a:	b102      	cbz	r2, 1046e <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
   1046c:	4790      	blx	r2
   1046e:	f7ff ffe7 	bl	10440 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   10472:	0000      	.short	0x0000
   10474:	20000050 	.word	0x20000050
   10478:	4806      	ldr	r0, [pc, #24]	; (10494 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
   1047a:	b510      	push	{r4, lr}
   1047c:	2100      	movs	r1, #0
   1047e:	6001      	str	r1, [r0, #0]
   10480:	2101      	movs	r1, #1
   10482:	6001      	str	r1, [r0, #0]
   10484:	4608      	mov	r0, r1
   10486:	f008 fa71 	bl	1896c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   1048a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1048e:	2001      	movs	r0, #1
   10490:	f008 ba5f 	b.w	18952 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   10494:	40001ffc 	.word	0x40001ffc
   10498:	4807      	ldr	r0, [pc, #28]	; (104b8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
   1049a:	b510      	push	{r4, lr}
   1049c:	2101      	movs	r1, #1
   1049e:	6041      	str	r1, [r0, #4]
   104a0:	1e89      	subs	r1, r1, #2
   104a2:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
   104a6:	200c      	movs	r0, #12
   104a8:	f008 fa60 	bl	1896c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   104ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104b0:	200c      	movs	r0, #12
   104b2:	f008 ba4e 	b.w	18952 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   104b6:	0000      	.short	0x0000
   104b8:	4000c000 	.word	0x4000c000

000104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
   104bc:	b50e      	push	{r1, r2, r3, lr}
   104be:	b672      	cpsid	i
   104c0:	4a0f      	ldr	r2, [pc, #60]	; (10500 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
   104c2:	6855      	ldr	r5, [r2, #4]
   104c4:	b1d5      	cbz	r5, 104fc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
   104c6:	2200      	movs	r2, #0
   104c8:	4603      	mov	r3, r0
   104ca:	466e      	mov	r6, sp
   104cc:	240a      	movs	r4, #10
   104ce:	e003      	b.n	104d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
   104d0:	fbb0 f0f4 	udiv	r0, r0, r4
   104d4:	1c52      	adds	r2, r2, #1
   104d6:	b2d2      	uxtb	r2, r2
   104d8:	2800      	cmp	r0, #0
   104da:	d1f9      	bne.n	104d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
   104dc:	54b0      	strb	r0, [r6, r2]
   104de:	e009      	b.n	104f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
   104e0:	fbb3 f0f4 	udiv	r0, r3, r4
   104e4:	fb04 3010 	mls	r0, r4, r0, r3
   104e8:	fbb3 f3f4 	udiv	r3, r3, r4
   104ec:	1e52      	subs	r2, r2, #1
   104ee:	b2d2      	uxtb	r2, r2
   104f0:	3030      	adds	r0, #48	; 0x30
   104f2:	54b0      	strb	r0, [r6, r2]
   104f4:	2a00      	cmp	r2, #0
   104f6:	d1f3      	bne.n	104e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
   104f8:	4630      	mov	r0, r6
   104fa:	47a8      	blx	r5
   104fc:	f7ff ffa0 	bl	10440 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   10500:	20000050 	.word	0x20000050

00010504 <mpsl_init>:
   10504:	b570      	push	{r4, r5, r6, lr}
   10506:	4c17      	ldr	r4, [pc, #92]	; (10564 <mpsl_init+0x60>)
   10508:	4606      	mov	r6, r0
   1050a:	460d      	mov	r5, r1
   1050c:	7860      	ldrb	r0, [r4, #1]
   1050e:	b110      	cbz	r0, 10516 <mpsl_init+0x12>
   10510:	f04f 30ff 	mov.w	r0, #4294967295
   10514:	bd70      	pop	{r4, r5, r6, pc}
   10516:	b906      	cbnz	r6, 1051a <mpsl_init+0x16>
   10518:	4e13      	ldr	r6, [pc, #76]	; (10568 <mpsl_init+0x64>)
   1051a:	6062      	str	r2, [r4, #4]
   1051c:	7025      	strb	r5, [r4, #0]
   1051e:	f7ff ffab 	bl	10478 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
   10522:	f7ff ffb9 	bl	10498 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
   10526:	4630      	mov	r0, r6
   10528:	f7ff fe7e 	bl	10228 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
   1052c:	0006      	movs	r6, r0
   1052e:	d1f1      	bne.n	10514 <mpsl_init+0x10>
   10530:	f7fe febe 	bl	f2b0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
   10534:	f7ff fef6 	bl	10324 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
   10538:	f008 f8e6 	bl	18708 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
   1053c:	4628      	mov	r0, r5
   1053e:	f008 fa08 	bl	18952 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   10542:	2001      	movs	r0, #1
   10544:	2d00      	cmp	r5, #0
   10546:	db09      	blt.n	1055c <mpsl_init+0x58>
   10548:	f005 011f 	and.w	r1, r5, #31
   1054c:	fa00 f101 	lsl.w	r1, r0, r1
   10550:	096a      	lsrs	r2, r5, #5
   10552:	0092      	lsls	r2, r2, #2
   10554:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
   10558:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   1055c:	7060      	strb	r0, [r4, #1]
   1055e:	4630      	mov	r0, r6
   10560:	bd70      	pop	{r4, r5, r6, pc}
   10562:	0000      	.short	0x0000
   10564:	20000050 	.word	0x20000050
   10568:	0001898e 	.word	0x0001898e

0001056c <mpsl_is_initialized>:
   1056c:	4801      	ldr	r0, [pc, #4]	; (10574 <mpsl_is_initialized+0x8>)
   1056e:	7840      	ldrb	r0, [r0, #1]
   10570:	4770      	bx	lr
   10572:	0000      	.short	0x0000
   10574:	20000050 	.word	0x20000050

00010578 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
   10578:	4807      	ldr	r0, [pc, #28]	; (10598 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
   1057a:	f990 0000 	ldrsb.w	r0, [r0]
   1057e:	2800      	cmp	r0, #0
   10580:	db09      	blt.n	10596 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
   10582:	f000 021f 	and.w	r2, r0, #31
   10586:	2101      	movs	r1, #1
   10588:	4091      	lsls	r1, r2
   1058a:	0940      	lsrs	r0, r0, #5
   1058c:	0080      	lsls	r0, r0, #2
   1058e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10592:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   10596:	4770      	bx	lr
   10598:	20000050 	.word	0x20000050

0001059c <mpsl_temperature_get>:
   1059c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105a0:	2601      	movs	r6, #1
   105a2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   105a6:	0331      	lsls	r1, r6, #12
   105a8:	f04f 0800 	mov.w	r8, #0
   105ac:	4640      	mov	r0, r8
   105ae:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
   105b2:	f3bf 8f4f 	dsb	sy
   105b6:	f3bf 8f6f 	isb	sy
   105ba:	4c16      	ldr	r4, [pc, #88]	; (10614 <mpsl_temperature_get+0x78>)
   105bc:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   105c0:	200c      	movs	r0, #12
   105c2:	f008 f9f2 	bl	189aa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   105c6:	4d14      	ldr	r5, [pc, #80]	; (10618 <mpsl_temperature_get+0x7c>)
   105c8:	6828      	ldr	r0, [r5, #0]
   105ca:	43c0      	mvns	r0, r0
   105cc:	f340 1700 	sbfx	r7, r0, #4, #1
   105d0:	6828      	ldr	r0, [r5, #0]
   105d2:	f040 0010 	orr.w	r0, r0, #16
   105d6:	6028      	str	r0, [r5, #0]
   105d8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   105dc:	6026      	str	r6, [r4, #0]
   105de:	1c7f      	adds	r7, r7, #1
   105e0:	e002      	b.n	105e8 <mpsl_temperature_get+0x4c>
   105e2:	bf00      	nop
   105e4:	f000 f890 	bl	10708 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   105e8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   105ec:	2800      	cmp	r0, #0
   105ee:	d0f9      	beq.n	105e4 <mpsl_temperature_get+0x48>
   105f0:	b91f      	cbnz	r7, 105fa <mpsl_temperature_get+0x5e>
   105f2:	6828      	ldr	r0, [r5, #0]
   105f4:	f020 0010 	bic.w	r0, r0, #16
   105f8:	6028      	str	r0, [r5, #0]
   105fa:	4808      	ldr	r0, [pc, #32]	; (1061c <mpsl_temperature_get+0x80>)
   105fc:	6805      	ldr	r5, [r0, #0]
   105fe:	6066      	str	r6, [r4, #4]
   10600:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
   10604:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   10608:	200c      	movs	r0, #12
   1060a:	f008 f9ce 	bl	189aa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   1060e:	4628      	mov	r0, r5
   10610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10614:	4000c000 	.word	0x4000c000
   10618:	e000ed10 	.word	0xe000ed10
   1061c:	4000c508 	.word	0x4000c508

00010620 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
   10620:	b510      	push	{r4, lr}
   10622:	4602      	mov	r2, r0
   10624:	2005      	movs	r0, #5
   10626:	490c      	ldr	r1, [pc, #48]	; (10658 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
   10628:	e004      	b.n	10634 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
   1062a:	bf00      	nop
   1062c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
   10630:	791b      	ldrb	r3, [r3, #4]
   10632:	b133      	cbz	r3, 10642 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
   10634:	1e40      	subs	r0, r0, #1
   10636:	b2c0      	uxtb	r0, r0
   10638:	d2f8      	bcs.n	1062c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
   1063a:	2148      	movs	r1, #72	; 0x48
   1063c:	2069      	movs	r0, #105	; 0x69
   1063e:	f7ff ff3d 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10642:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
   10646:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1064a:	2200      	movs	r2, #0
   1064c:	714a      	strb	r2, [r1, #5]
   1064e:	718a      	strb	r2, [r1, #6]
   10650:	2201      	movs	r2, #1
   10652:	710a      	strb	r2, [r1, #4]
   10654:	bd10      	pop	{r4, pc}
   10656:	0000      	.short	0x0000
   10658:	20001338 	.word	0x20001338

0001065c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
   1065c:	b510      	push	{r4, lr}
   1065e:	2805      	cmp	r0, #5
   10660:	d301      	bcc.n	10666 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
   10662:	2158      	movs	r1, #88	; 0x58
   10664:	e006      	b.n	10674 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
   10666:	490a      	ldr	r1, [pc, #40]	; (10690 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
   10668:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   1066c:	7901      	ldrb	r1, [r0, #4]
   1066e:	2901      	cmp	r1, #1
   10670:	d003      	beq.n	1067a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
   10672:	2159      	movs	r1, #89	; 0x59
   10674:	2069      	movs	r0, #105	; 0x69
   10676:	f7ff ff21 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1067a:	7941      	ldrb	r1, [r0, #5]
   1067c:	7982      	ldrb	r2, [r0, #6]
   1067e:	1c49      	adds	r1, r1, #1
   10680:	b2c9      	uxtb	r1, r1
   10682:	428a      	cmp	r2, r1
   10684:	d000      	beq.n	10688 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
   10686:	7141      	strb	r1, [r0, #5]
   10688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1068c:	f7ff bf74 	b.w	10578 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
   10690:	20001338 	.word	0x20001338

00010694 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
   10694:	b570      	push	{r4, r5, r6, lr}
   10696:	2505      	movs	r5, #5
   10698:	4e0e      	ldr	r6, [pc, #56]	; (106d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
   1069a:	4c0f      	ldr	r4, [pc, #60]	; (106d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
   1069c:	e016      	b.n	106cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   1069e:	7821      	ldrb	r1, [r4, #0]
   106a0:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   106a4:	7902      	ldrb	r2, [r0, #4]
   106a6:	2a01      	cmp	r2, #1
   106a8:	d108      	bne.n	106bc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   106aa:	7942      	ldrb	r2, [r0, #5]
   106ac:	7983      	ldrb	r3, [r0, #6]
   106ae:	429a      	cmp	r2, r3
   106b0:	d004      	beq.n	106bc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   106b2:	7942      	ldrb	r2, [r0, #5]
   106b4:	7182      	strb	r2, [r0, #6]
   106b6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   106ba:	4780      	blx	r0
   106bc:	7820      	ldrb	r0, [r4, #0]
   106be:	1c40      	adds	r0, r0, #1
   106c0:	b2c0      	uxtb	r0, r0
   106c2:	7020      	strb	r0, [r4, #0]
   106c4:	2805      	cmp	r0, #5
   106c6:	d301      	bcc.n	106cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   106c8:	2000      	movs	r0, #0
   106ca:	7020      	strb	r0, [r4, #0]
   106cc:	1e6d      	subs	r5, r5, #1
   106ce:	b2ed      	uxtb	r5, r5
   106d0:	d2e5      	bcs.n	1069e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
   106d2:	bd70      	pop	{r4, r5, r6, pc}
   106d4:	20001338 	.word	0x20001338
   106d8:	20000295 	.word	0x20000295

000106dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
   106dc:	b500      	push	{lr}
   106de:	f008 f993 	bl	18a08 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   106e2:	b940      	cbnz	r0, 106f6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   106e4:	f008 f99a 	bl	18a1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   106e8:	b928      	cbnz	r0, 106f6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   106ea:	f008 f9ae 	bl	18a4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   106ee:	b910      	cbnz	r0, 106f6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   106f0:	f008 f9bf 	bl	18a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   106f4:	b108      	cbz	r0, 106fa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
   106f6:	4802      	ldr	r0, [pc, #8]	; (10700 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
   106f8:	bd00      	pop	{pc}
   106fa:	4802      	ldr	r0, [pc, #8]	; (10704 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
   106fc:	bd00      	pop	{pc}
   106fe:	0000      	.short	0x0000
   10700:	4000050c 	.word	0x4000050c
   10704:	4001e700 	.word	0x4001e700

00010708 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10708:	b510      	push	{r4, lr}
   1070a:	f008 f9b2 	bl	18a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1070e:	b330      	cbz	r0, 1075e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
   10710:	f3ef 8010 	mrs	r0, PRIMASK
   10714:	b1c8      	cbz	r0, 1074a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
   10716:	2100      	movs	r1, #0
   10718:	b672      	cpsid	i
   1071a:	4812      	ldr	r0, [pc, #72]	; (10764 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
   1071c:	6802      	ldr	r2, [r0, #0]
   1071e:	6803      	ldr	r3, [r0, #0]
   10720:	f3c2 1200 	ubfx	r2, r2, #4, #1
   10724:	f043 0310 	orr.w	r3, r3, #16
   10728:	6003      	str	r3, [r0, #0]
   1072a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1072e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   10732:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   10736:	431c      	orrs	r4, r3
   10738:	d000      	beq.n	1073c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
   1073a:	bf40      	sev
   1073c:	bf20      	wfe
   1073e:	bf00      	nop
   10740:	bf00      	nop
   10742:	bf00      	nop
   10744:	bf00      	nop
   10746:	b112      	cbz	r2, 1074e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
   10748:	e005      	b.n	10756 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
   1074a:	2101      	movs	r1, #1
   1074c:	e7e4      	b.n	10718 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
   1074e:	6802      	ldr	r2, [r0, #0]
   10750:	f022 0210 	bic.w	r2, r2, #16
   10754:	6002      	str	r2, [r0, #0]
   10756:	2900      	cmp	r1, #0
   10758:	d000      	beq.n	1075c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
   1075a:	b662      	cpsie	i
   1075c:	bd10      	pop	{r4, pc}
   1075e:	bf20      	wfe
   10760:	bd10      	pop	{r4, pc}
   10762:	0000      	.short	0x0000
   10764:	e000ed10 	.word	0xe000ed10

00010768 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
   10768:	00018ce3 00018cff 00018ced 00018cf9     ................
   10778:	00018ce7 00018ce1 00018cdf 00018d05     ................
   10788:	00018cf3 00018cd9 00018cd1 00018cd5     ................
   10798:	00018ccb                                ....

0001079c <mpsl_fem_disable>:
   1079c:	4801      	ldr	r0, [pc, #4]	; (107a4 <mpsl_fem_disable+0x8>)
   1079e:	6800      	ldr	r0, [r0, #0]
   107a0:	6800      	ldr	r0, [r0, #0]
   107a2:	4700      	bx	r0
   107a4:	20000058 	.word	0x20000058

000107a8 <mpsl_fem_lna_configuration_clear>:
   107a8:	4801      	ldr	r0, [pc, #4]	; (107b0 <mpsl_fem_lna_configuration_clear+0x8>)
   107aa:	6800      	ldr	r0, [r0, #0]
   107ac:	6900      	ldr	r0, [r0, #16]
   107ae:	4700      	bx	r0
   107b0:	20000058 	.word	0x20000058

000107b4 <mpsl_fem_lna_configuration_set>:
   107b4:	4a01      	ldr	r2, [pc, #4]	; (107bc <mpsl_fem_lna_configuration_set+0x8>)
   107b6:	6812      	ldr	r2, [r2, #0]
   107b8:	6892      	ldr	r2, [r2, #8]
   107ba:	4710      	bx	r2
   107bc:	20000058 	.word	0x20000058

000107c0 <mpsl_fem_pa_configuration_clear>:
   107c0:	4801      	ldr	r0, [pc, #4]	; (107c8 <mpsl_fem_pa_configuration_clear+0x8>)
   107c2:	6800      	ldr	r0, [r0, #0]
   107c4:	68c0      	ldr	r0, [r0, #12]
   107c6:	4700      	bx	r0
   107c8:	20000058 	.word	0x20000058

000107cc <mpsl_fem_pa_configuration_set>:
   107cc:	4a01      	ldr	r2, [pc, #4]	; (107d4 <mpsl_fem_pa_configuration_set+0x8>)
   107ce:	6812      	ldr	r2, [r2, #0]
   107d0:	6852      	ldr	r2, [r2, #4]
   107d2:	4710      	bx	r2
   107d4:	20000058 	.word	0x20000058

000107d8 <mpsl_fem_pa_is_configured>:
   107d8:	4901      	ldr	r1, [pc, #4]	; (107e0 <mpsl_fem_pa_is_configured+0x8>)
   107da:	6809      	ldr	r1, [r1, #0]
   107dc:	6a09      	ldr	r1, [r1, #32]
   107de:	4708      	bx	r1
   107e0:	20000058 	.word	0x20000058

000107e4 <mpsl_fem_device_config_254_apply_get>:
   107e4:	4801      	ldr	r0, [pc, #4]	; (107ec <mpsl_fem_device_config_254_apply_get+0x8>)
   107e6:	7800      	ldrb	r0, [r0, #0]
   107e8:	4770      	bx	lr
   107ea:	0000      	.short	0x0000
   107ec:	20000296 	.word	0x20000296
   107f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   107f2:	4c17      	ldr	r4, [pc, #92]	; (10850 <mpsl_fem_device_config_254_apply_get+0x6c>)
   107f4:	7a20      	ldrb	r0, [r4, #8]
   107f6:	2802      	cmp	r0, #2
   107f8:	d200      	bcs.n	107fc <mpsl_fem_device_config_254_apply_get+0x18>
   107fa:	2002      	movs	r0, #2
   107fc:	f88d 0001 	strb.w	r0, [sp, #1]
   10800:	79e0      	ldrb	r0, [r4, #7]
   10802:	2803      	cmp	r0, #3
   10804:	d200      	bcs.n	10808 <mpsl_fem_device_config_254_apply_get+0x24>
   10806:	2003      	movs	r0, #3
   10808:	f88d 0000 	strb.w	r0, [sp]
   1080c:	79a0      	ldrb	r0, [r4, #6]
   1080e:	f8ad 0004 	strh.w	r0, [sp, #4]
   10812:	7960      	ldrb	r0, [r4, #5]
   10814:	f8ad 0002 	strh.w	r0, [sp, #2]
   10818:	4668      	mov	r0, sp
   1081a:	f006 f95b 	bl	16ad4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
   1081e:	b108      	cbz	r0, 10824 <mpsl_fem_device_config_254_apply_get+0x40>
   10820:	2184      	movs	r1, #132	; 0x84
   10822:	e010      	b.n	10846 <mpsl_fem_device_config_254_apply_get+0x62>
   10824:	68e0      	ldr	r0, [r4, #12]
   10826:	9002      	str	r0, [sp, #8]
   10828:	a802      	add	r0, sp, #8
   1082a:	f006 f969 	bl	16b00 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
   1082e:	b108      	cbz	r0, 10834 <mpsl_fem_device_config_254_apply_get+0x50>
   10830:	2188      	movs	r1, #136	; 0x88
   10832:	e008      	b.n	10846 <mpsl_fem_device_config_254_apply_get+0x62>
   10834:	4807      	ldr	r0, [pc, #28]	; (10854 <mpsl_fem_device_config_254_apply_get+0x70>)
   10836:	6800      	ldr	r0, [r0, #0]
   10838:	9003      	str	r0, [sp, #12]
   1083a:	a803      	add	r0, sp, #12
   1083c:	f00b fb36 	bl	1beac <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   10840:	2800      	cmp	r0, #0
   10842:	d003      	beq.n	1084c <mpsl_fem_device_config_254_apply_get+0x68>
   10844:	218c      	movs	r1, #140	; 0x8c
   10846:	2003      	movs	r0, #3
   10848:	f000 f8e4 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1084c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
   1084e:	0000      	.short	0x0000
   10850:	20001360 	.word	0x20001360
   10854:	00010afc 	.word	0x00010afc

00010858 <sdc_build_revision_get>:
   10858:	b510      	push	{r4, lr}
   1085a:	b128      	cbz	r0, 10868 <sdc_build_revision_get+0x10>
   1085c:	2214      	movs	r2, #20
   1085e:	4904      	ldr	r1, [pc, #16]	; (10870 <sdc_build_revision_get+0x18>)
   10860:	f008 f959 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10864:	2000      	movs	r0, #0
   10866:	bd10      	pop	{r4, pc}
   10868:	f06f 0015 	mvn.w	r0, #21
   1086c:	bd10      	pop	{r4, pc}
   1086e:	0000      	.short	0x0000
   10870:	00010b18 	.word	0x00010b18

00010874 <sdc_cfg_set>:
   10874:	b570      	push	{r4, r5, r6, lr}
   10876:	0003      	movs	r3, r0
   10878:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   1087c:	d103      	bne.n	10886 <sdc_cfg_set+0x12>
   1087e:	4c29      	ldr	r4, [pc, #164]	; (10924 <sdc_cfg_set+0xb0>)
   10880:	7863      	ldrb	r3, [r4, #1]
   10882:	b10b      	cbz	r3, 10888 <sdc_cfg_set+0x14>
   10884:	1180      	asrs	r0, r0, #6
   10886:	bd70      	pop	{r4, r5, r6, pc}
   10888:	b309      	cbz	r1, 108ce <sdc_cfg_set+0x5a>
   1088a:	f06f 0515 	mvn.w	r5, #21
   1088e:	b37a      	cbz	r2, 108f0 <sdc_cfg_set+0x7c>
   10890:	4b25      	ldr	r3, [pc, #148]	; (10928 <sdc_cfg_set+0xb4>)
   10892:	290c      	cmp	r1, #12
   10894:	d241      	bcs.n	1091a <sdc_cfg_set+0xa6>
   10896:	e8df f001 	tbb	[pc, r1]
   1089a:	0640      	.short	0x0640
   1089c:	13100c09 	.word	0x13100c09
   108a0:	2616231b 	.word	0x2616231b
   108a4:	312c      	.short	0x312c
   108a6:	7810      	ldrb	r0, [r2, #0]
   108a8:	7018      	strb	r0, [r3, #0]
   108aa:	e02b      	b.n	10904 <sdc_cfg_set+0x90>
   108ac:	7810      	ldrb	r0, [r2, #0]
   108ae:	7058      	strb	r0, [r3, #1]
   108b0:	e028      	b.n	10904 <sdc_cfg_set+0x90>
   108b2:	6810      	ldr	r0, [r2, #0]
   108b4:	f8c3 0005 	str.w	r0, [r3, #5]
   108b8:	e024      	b.n	10904 <sdc_cfg_set+0x90>
   108ba:	6810      	ldr	r0, [r2, #0]
   108bc:	60d8      	str	r0, [r3, #12]
   108be:	e021      	b.n	10904 <sdc_cfg_set+0x90>
   108c0:	7810      	ldrb	r0, [r2, #0]
   108c2:	7098      	strb	r0, [r3, #2]
   108c4:	e01e      	b.n	10904 <sdc_cfg_set+0x90>
   108c6:	7811      	ldrb	r1, [r2, #0]
   108c8:	2900      	cmp	r1, #0
   108ca:	d1dc      	bne.n	10886 <sdc_cfg_set+0x12>
   108cc:	70d9      	strb	r1, [r3, #3]
   108ce:	e019      	b.n	10904 <sdc_cfg_set+0x90>
   108d0:	78e0      	ldrb	r0, [r4, #3]
   108d2:	b110      	cbz	r0, 108da <sdc_cfg_set+0x66>
   108d4:	7810      	ldrb	r0, [r2, #0]
   108d6:	2802      	cmp	r0, #2
   108d8:	d31f      	bcc.n	1091a <sdc_cfg_set+0xa6>
   108da:	7810      	ldrb	r0, [r2, #0]
   108dc:	7418      	strb	r0, [r3, #16]
   108de:	e011      	b.n	10904 <sdc_cfg_set+0x90>
   108e0:	8810      	ldrh	r0, [r2, #0]
   108e2:	8258      	strh	r0, [r3, #18]
   108e4:	e00e      	b.n	10904 <sdc_cfg_set+0x90>
   108e6:	7811      	ldrb	r1, [r2, #0]
   108e8:	2900      	cmp	r1, #0
   108ea:	d1cc      	bne.n	10886 <sdc_cfg_set+0x12>
   108ec:	7119      	strb	r1, [r3, #4]
   108ee:	e009      	b.n	10904 <sdc_cfg_set+0x90>
   108f0:	e013      	b.n	1091a <sdc_cfg_set+0xa6>
   108f2:	7810      	ldrb	r0, [r2, #0]
   108f4:	2802      	cmp	r0, #2
   108f6:	d310      	bcc.n	1091a <sdc_cfg_set+0xa6>
   108f8:	7518      	strb	r0, [r3, #20]
   108fa:	e003      	b.n	10904 <sdc_cfg_set+0x90>
   108fc:	7811      	ldrb	r1, [r2, #0]
   108fe:	2900      	cmp	r1, #0
   10900:	d1c1      	bne.n	10886 <sdc_cfg_set+0x12>
   10902:	7559      	strb	r1, [r3, #21]
   10904:	2201      	movs	r2, #1
   10906:	4908      	ldr	r1, [pc, #32]	; (10928 <sdc_cfg_set+0xb4>)
   10908:	2000      	movs	r0, #0
   1090a:	f008 f9fd 	bl	18d08 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
   1090e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   10912:	db04      	blt.n	1091e <sdc_cfg_set+0xaa>
   10914:	f06f 000b 	mvn.w	r0, #11
   10918:	bd70      	pop	{r4, r5, r6, pc}
   1091a:	4628      	mov	r0, r5
   1091c:	bd70      	pop	{r4, r5, r6, pc}
   1091e:	2101      	movs	r1, #1
   10920:	70a1      	strb	r1, [r4, #2]
   10922:	bd70      	pop	{r4, r5, r6, pc}
   10924:	2000005c 	.word	0x2000005c
   10928:	20001360 	.word	0x20001360

0001092c <sdc_enable>:
   1092c:	b570      	push	{r4, r5, r6, lr}
   1092e:	460c      	mov	r4, r1
   10930:	0005      	movs	r5, r0
   10932:	d019      	beq.n	10968 <sdc_enable+0x3c>
   10934:	b1c4      	cbz	r4, 10968 <sdc_enable+0x3c>
   10936:	f000 f915 	bl	10b64 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
   1093a:	b1c0      	cbz	r0, 1096e <sdc_enable+0x42>
   1093c:	4628      	mov	r0, r5
   1093e:	f7ff fe6f 	bl	10620 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   10942:	4d0c      	ldr	r5, [pc, #48]	; (10974 <sdc_enable+0x48>)
   10944:	2200      	movs	r2, #0
   10946:	490c      	ldr	r1, [pc, #48]	; (10978 <sdc_enable+0x4c>)
   10948:	7028      	strb	r0, [r5, #0]
   1094a:	4620      	mov	r0, r4
   1094c:	f008 f9dc 	bl	18d08 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
   10950:	f00b ff15 	bl	1c77e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
   10954:	2100      	movs	r1, #0
   10956:	7828      	ldrb	r0, [r5, #0]
   10958:	f006 fb12 	bl	16f80 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
   1095c:	f7ff ff48 	bl	107f0 <mpsl_fem_device_config_254_apply_get+0xc>
   10960:	2001      	movs	r0, #1
   10962:	7068      	strb	r0, [r5, #1]
   10964:	2000      	movs	r0, #0
   10966:	bd70      	pop	{r4, r5, r6, pc}
   10968:	f06f 0015 	mvn.w	r0, #21
   1096c:	bd70      	pop	{r4, r5, r6, pc}
   1096e:	f04f 30ff 	mov.w	r0, #4294967295
   10972:	bd70      	pop	{r4, r5, r6, pc}
   10974:	2000005c 	.word	0x2000005c
   10978:	20001360 	.word	0x20001360

0001097c <sdc_init>:
   1097c:	b530      	push	{r4, r5, lr}
   1097e:	b087      	sub	sp, #28
   10980:	0005      	movs	r5, r0
   10982:	d00c      	beq.n	1099e <sdc_init+0x22>
   10984:	f7ff fdf2 	bl	1056c <mpsl_is_initialized>
   10988:	f04f 34ff 	mov.w	r4, #4294967295
   1098c:	b120      	cbz	r0, 10998 <sdc_init+0x1c>
   1098e:	f7ff fc9d 	bl	102cc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10992:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   10996:	d905      	bls.n	109a4 <sdc_init+0x28>
   10998:	4620      	mov	r0, r4
   1099a:	b007      	add	sp, #28
   1099c:	bd30      	pop	{r4, r5, pc}
   1099e:	f06f 0015 	mvn.w	r0, #21
   109a2:	e7fa      	b.n	1099a <sdc_init+0x1e>
   109a4:	4c15      	ldr	r4, [pc, #84]	; (109fc <sdc_init+0x80>)
   109a6:	4816      	ldr	r0, [pc, #88]	; (10a00 <sdc_init+0x84>)
   109a8:	6065      	str	r5, [r4, #4]
   109aa:	f000 f9eb 	bl	10d84 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
   109ae:	2000      	movs	r0, #0
   109b0:	7060      	strb	r0, [r4, #1]
   109b2:	70a0      	strb	r0, [r4, #2]
   109b4:	70e0      	strb	r0, [r4, #3]
   109b6:	4601      	mov	r1, r0
   109b8:	2218      	movs	r2, #24
   109ba:	4668      	mov	r0, sp
   109bc:	f008 f925 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   109c0:	2218      	movs	r2, #24
   109c2:	4910      	ldr	r1, [pc, #64]	; (10a04 <sdc_init+0x88>)
   109c4:	4668      	mov	r0, sp
   109c6:	f008 f8a6 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   109ca:	2218      	movs	r2, #24
   109cc:	4669      	mov	r1, sp
   109ce:	480e      	ldr	r0, [pc, #56]	; (10a08 <sdc_init+0x8c>)
   109d0:	f008 f8a1 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   109d4:	f3ef 8410 	mrs	r4, PRIMASK
   109d8:	b672      	cpsid	i
   109da:	480c      	ldr	r0, [pc, #48]	; (10a0c <sdc_init+0x90>)
   109dc:	f06f 010c 	mvn.w	r1, #12
   109e0:	f000 fd9e 	bl	11520 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
   109e4:	480a      	ldr	r0, [pc, #40]	; (10a10 <sdc_init+0x94>)
   109e6:	f000 fe6b 	bl	116c0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
   109ea:	b118      	cbz	r0, 109f4 <sdc_init+0x78>
   109ec:	219a      	movs	r1, #154	; 0x9a
   109ee:	2003      	movs	r0, #3
   109f0:	f000 f810 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   109f4:	b904      	cbnz	r4, 109f8 <sdc_init+0x7c>
   109f6:	b662      	cpsie	i
   109f8:	2000      	movs	r0, #0
   109fa:	e7ce      	b.n	1099a <sdc_init+0x1e>
   109fc:	2000005c 	.word	0x2000005c
   10a00:	000107f1 	.word	0x000107f1
   10a04:	00010b00 	.word	0x00010b00
   10a08:	20001360 	.word	0x20001360
   10a0c:	4000c000 	.word	0x4000c000
   10a10:	00010b91 	.word	0x00010b91

00010a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
   10a14:	b50e      	push	{r1, r2, r3, lr}
   10a16:	b672      	cpsid	i
   10a18:	4a15      	ldr	r2, [pc, #84]	; (10a70 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
   10a1a:	6855      	ldr	r5, [r2, #4]
   10a1c:	b1d5      	cbz	r5, 10a54 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
   10a1e:	2200      	movs	r2, #0
   10a20:	4603      	mov	r3, r0
   10a22:	466e      	mov	r6, sp
   10a24:	240a      	movs	r4, #10
   10a26:	e003      	b.n	10a30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
   10a28:	fbb0 f0f4 	udiv	r0, r0, r4
   10a2c:	1c52      	adds	r2, r2, #1
   10a2e:	b2d2      	uxtb	r2, r2
   10a30:	2800      	cmp	r0, #0
   10a32:	d1f9      	bne.n	10a28 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
   10a34:	54b0      	strb	r0, [r6, r2]
   10a36:	e009      	b.n	10a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
   10a38:	fbb3 f0f4 	udiv	r0, r3, r4
   10a3c:	fb04 3010 	mls	r0, r4, r0, r3
   10a40:	fbb3 f3f4 	udiv	r3, r3, r4
   10a44:	1e52      	subs	r2, r2, #1
   10a46:	b2d2      	uxtb	r2, r2
   10a48:	3030      	adds	r0, #48	; 0x30
   10a4a:	54b0      	strb	r0, [r6, r2]
   10a4c:	2a00      	cmp	r2, #0
   10a4e:	d1f3      	bne.n	10a38 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
   10a50:	4630      	mov	r0, r6
   10a52:	47a8      	blx	r5
   10a54:	f3bf 8f4f 	dsb	sy
   10a58:	4806      	ldr	r0, [pc, #24]	; (10a74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
   10a5a:	6801      	ldr	r1, [r0, #0]
   10a5c:	4a06      	ldr	r2, [pc, #24]	; (10a78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
   10a5e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   10a62:	4311      	orrs	r1, r2
   10a64:	6001      	str	r1, [r0, #0]
   10a66:	f3bf 8f4f 	dsb	sy
   10a6a:	bf00      	nop
   10a6c:	e7fd      	b.n	10a6a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
   10a6e:	0000      	.short	0x0000
   10a70:	2000005c 	.word	0x2000005c
   10a74:	e000ed0c 	.word	0xe000ed0c
   10a78:	05fa0004 	.word	0x05fa0004

00010a7c <sdc_support_adv>:
   10a7c:	4806      	ldr	r0, [pc, #24]	; (10a98 <sdc_support_adv+0x1c>)
   10a7e:	b510      	push	{r4, lr}
   10a80:	7881      	ldrb	r1, [r0, #2]
   10a82:	7840      	ldrb	r0, [r0, #1]
   10a84:	4301      	orrs	r1, r0
   10a86:	d002      	beq.n	10a8e <sdc_support_adv+0x12>
   10a88:	f04f 30ff 	mov.w	r0, #4294967295
   10a8c:	bd10      	pop	{r4, pc}
   10a8e:	f006 fa97 	bl	16fc0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
   10a92:	2000      	movs	r0, #0
   10a94:	bd10      	pop	{r4, pc}
   10a96:	0000      	.short	0x0000
   10a98:	2000005c 	.word	0x2000005c

00010a9c <sdc_support_dle>:
   10a9c:	4806      	ldr	r0, [pc, #24]	; (10ab8 <sdc_support_dle+0x1c>)
   10a9e:	b510      	push	{r4, lr}
   10aa0:	7881      	ldrb	r1, [r0, #2]
   10aa2:	7840      	ldrb	r0, [r0, #1]
   10aa4:	4301      	orrs	r1, r0
   10aa6:	d002      	beq.n	10aae <sdc_support_dle+0x12>
   10aa8:	f04f 30ff 	mov.w	r0, #4294967295
   10aac:	bd10      	pop	{r4, pc}
   10aae:	f006 f83f 	bl	16b30 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
   10ab2:	2000      	movs	r0, #0
   10ab4:	bd10      	pop	{r4, pc}
   10ab6:	0000      	.short	0x0000
   10ab8:	2000005c 	.word	0x2000005c

00010abc <sdc_support_le_2m_phy>:
   10abc:	4806      	ldr	r0, [pc, #24]	; (10ad8 <sdc_support_le_2m_phy+0x1c>)
   10abe:	b510      	push	{r4, lr}
   10ac0:	7881      	ldrb	r1, [r0, #2]
   10ac2:	7840      	ldrb	r0, [r0, #1]
   10ac4:	4301      	orrs	r1, r0
   10ac6:	d002      	beq.n	10ace <sdc_support_le_2m_phy+0x12>
   10ac8:	f04f 30ff 	mov.w	r0, #4294967295
   10acc:	bd10      	pop	{r4, pc}
   10ace:	f00b fbbd 	bl	1c24c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
   10ad2:	2000      	movs	r0, #0
   10ad4:	bd10      	pop	{r4, pc}
   10ad6:	0000      	.short	0x0000
   10ad8:	2000005c 	.word	0x2000005c

00010adc <sdc_support_slave>:
   10adc:	4806      	ldr	r0, [pc, #24]	; (10af8 <sdc_support_slave+0x1c>)
   10ade:	b510      	push	{r4, lr}
   10ae0:	7881      	ldrb	r1, [r0, #2]
   10ae2:	7840      	ldrb	r0, [r0, #1]
   10ae4:	4301      	orrs	r1, r0
   10ae6:	d002      	beq.n	10aee <sdc_support_slave+0x12>
   10ae8:	f04f 30ff 	mov.w	r0, #4294967295
   10aec:	bd10      	pop	{r4, pc}
   10aee:	f006 fa79 	bl	16fe4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
   10af2:	2000      	movs	r0, #0
   10af4:	bd10      	pop	{r4, pc}
   10af6:	0000      	.short	0x0000
   10af8:	2000005c 	.word	0x2000005c
   10afc:	00000001 	.word	0x00000001
   10b00:	00010101 	.word	0x00010101
   10b04:	031b1b00 	.word	0x031b1b00
   10b08:	00000002 	.word	0x00000002
   10b0c:	00001d4c 	.word	0x00001d4c
   10b10:	001f0003 	.word	0x001f0003
   10b14:	00000000 	.word	0x00000000
   10b18:	66c5e70e 	.word	0x66c5e70e
   10b1c:	ac3c1867 	.word	0xac3c1867
   10b20:	81ccd2b3 	.word	0x81ccd2b3
   10b24:	c0f1dca3 	.word	0xc0f1dca3
   10b28:	220236c0 	.word	0x220236c0

00010b2c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
   10b2c:	4a05      	ldr	r2, [pc, #20]	; (10b44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
   10b2e:	b510      	push	{r4, lr}
   10b30:	6852      	ldr	r2, [r2, #4]
   10b32:	b112      	cbz	r2, 10b3a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
   10b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10b38:	4710      	bx	r2
   10b3a:	2183      	movs	r1, #131	; 0x83
   10b3c:	2004      	movs	r0, #4
   10b3e:	f7ff ff69 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b42:	0000      	.short	0x0000
   10b44:	20001378 	.word	0x20001378

00010b48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
   10b48:	4a05      	ldr	r2, [pc, #20]	; (10b60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
   10b4a:	b510      	push	{r4, lr}
   10b4c:	6892      	ldr	r2, [r2, #8]
   10b4e:	b112      	cbz	r2, 10b56 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
   10b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10b54:	4710      	bx	r2
   10b56:	2189      	movs	r1, #137	; 0x89
   10b58:	2004      	movs	r0, #4
   10b5a:	f7ff ff5b 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b5e:	0000      	.short	0x0000
   10b60:	20001378 	.word	0x20001378

00010b64 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
   10b64:	4805      	ldr	r0, [pc, #20]	; (10b7c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
   10b66:	6801      	ldr	r1, [r0, #0]
   10b68:	b129      	cbz	r1, 10b76 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   10b6a:	6841      	ldr	r1, [r0, #4]
   10b6c:	b119      	cbz	r1, 10b76 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   10b6e:	6880      	ldr	r0, [r0, #8]
   10b70:	b108      	cbz	r0, 10b76 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   10b72:	2001      	movs	r0, #1
   10b74:	4770      	bx	lr
   10b76:	2000      	movs	r0, #0
   10b78:	4770      	bx	lr
   10b7a:	0000      	.short	0x0000
   10b7c:	20001378 	.word	0x20001378

00010b80 <sdc_rand_source_register>:
   10b80:	4902      	ldr	r1, [pc, #8]	; (10b8c <sdc_rand_source_register+0xc>)
   10b82:	c80d      	ldmia	r0, {r0, r2, r3}
   10b84:	e881 000d 	stmia.w	r1, {r0, r2, r3}
   10b88:	2000      	movs	r0, #0
   10b8a:	4770      	bx	lr
   10b8c:	20001378 	.word	0x20001378

00010b90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
   10b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b92:	4c12      	ldr	r4, [pc, #72]	; (10bdc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
   10b94:	2600      	movs	r6, #0
   10b96:	6825      	ldr	r5, [r4, #0]
   10b98:	e011      	b.n	10bbe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
   10b9a:	9800      	ldr	r0, [sp, #0]
   10b9c:	2802      	cmp	r0, #2
   10b9e:	d002      	beq.n	10ba6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
   10ba0:	2803      	cmp	r0, #3
   10ba2:	d10c      	bne.n	10bbe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
   10ba4:	e006      	b.n	10bb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
   10ba6:	6820      	ldr	r0, [r4, #0]
   10ba8:	b110      	cbz	r0, 10bb0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
   10baa:	2000      	movs	r0, #0
   10bac:	6026      	str	r6, [r4, #0]
   10bae:	e005      	b.n	10bbc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
   10bb0:	2128      	movs	r1, #40	; 0x28
   10bb2:	e00c      	b.n	10bce <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
   10bb4:	6820      	ldr	r0, [r4, #0]
   10bb6:	b168      	cbz	r0, 10bd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
   10bb8:	2001      	movs	r0, #1
   10bba:	6026      	str	r6, [r4, #0]
   10bbc:	47a8      	blx	r5
   10bbe:	4668      	mov	r0, sp
   10bc0:	f000 fd50 	bl	11664 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
   10bc4:	2800      	cmp	r0, #0
   10bc6:	d0e8      	beq.n	10b9a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
   10bc8:	2805      	cmp	r0, #5
   10bca:	d005      	beq.n	10bd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
   10bcc:	2135      	movs	r1, #53	; 0x35
   10bce:	2004      	movs	r0, #4
   10bd0:	f7ff ff20 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10bd4:	212d      	movs	r1, #45	; 0x2d
   10bd6:	e7fa      	b.n	10bce <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
   10bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10bda:	0000      	.short	0x0000
   10bdc:	20000064 	.word	0x20000064
   10be0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10be2:	4c1f      	ldr	r4, [pc, #124]	; (10c60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
   10be4:	4605      	mov	r5, r0
   10be6:	7820      	ldrb	r0, [r4, #0]
   10be8:	b140      	cbz	r0, 10bfc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
   10bea:	78a2      	ldrb	r2, [r4, #2]
   10bec:	1c61      	adds	r1, r4, #1
   10bee:	4628      	mov	r0, r5
   10bf0:	1c92      	adds	r2, r2, #2
   10bf2:	f007 ff90 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10bf6:	2000      	movs	r0, #0
   10bf8:	7020      	strb	r0, [r4, #0]
   10bfa:	e021      	b.n	10c40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
   10bfc:	4819      	ldr	r0, [pc, #100]	; (10c64 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
   10bfe:	f002 f837 	bl	12c70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
   10c02:	2800      	cmp	r0, #0
   10c04:	d01d      	beq.n	10c42 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
   10c06:	4c17      	ldr	r4, [pc, #92]	; (10c64 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
   10c08:	7820      	ldrb	r0, [r4, #0]
   10c0a:	2811      	cmp	r0, #17
   10c0c:	d104      	bne.n	10c18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
   10c0e:	210a      	movs	r1, #10
   10c10:	203e      	movs	r0, #62	; 0x3e
   10c12:	f008 f901 	bl	18e18 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
   10c16:	b118      	cbz	r0, 10c20 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
   10c18:	7820      	ldrb	r0, [r4, #0]
   10c1a:	2808      	cmp	r0, #8
   10c1c:	d005      	beq.n	10c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
   10c1e:	e009      	b.n	10c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
   10c20:	4910      	ldr	r1, [pc, #64]	; (10c64 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
   10c22:	4628      	mov	r0, r5
   10c24:	f008 fb00 	bl	19228 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
   10c28:	e00a      	b.n	10c40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
   10c2a:	2105      	movs	r1, #5
   10c2c:	203e      	movs	r0, #62	; 0x3e
   10c2e:	f008 f8f3 	bl	18e18 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
   10c32:	b138      	cbz	r0, 10c44 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
   10c34:	490b      	ldr	r1, [pc, #44]	; (10c64 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
   10c36:	4628      	mov	r0, r5
   10c38:	f008 f94c 	bl	18ed4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
   10c3c:	2800      	cmp	r0, #0
   10c3e:	d000      	beq.n	10c42 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
   10c40:	2001      	movs	r0, #1
   10c42:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10c44:	88a0      	ldrh	r0, [r4, #4]
   10c46:	f8ad 0000 	strh.w	r0, [sp]
   10c4a:	a901      	add	r1, sp, #4
   10c4c:	4668      	mov	r0, sp
   10c4e:	f008 fc09 	bl	19464 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   10c52:	2800      	cmp	r0, #0
   10c54:	d0f5      	beq.n	10c42 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
   10c56:	219b      	movs	r1, #155	; 0x9b
   10c58:	2008      	movs	r0, #8
   10c5a:	f7ff fedb 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10c5e:	0000      	.short	0x0000
   10c60:	20001516 	.word	0x20001516
   10c64:	20001414 	.word	0x20001414
   10c68:	b570      	push	{r4, r5, r6, lr}
   10c6a:	780a      	ldrb	r2, [r1, #0]
   10c6c:	7082      	strb	r2, [r0, #2]
   10c6e:	b33a      	cbz	r2, 10cc0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
   10c70:	2a01      	cmp	r2, #1
   10c72:	d825      	bhi.n	10cc0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
   10c74:	2313      	movs	r3, #19
   10c76:	7003      	strb	r3, [r0, #0]
   10c78:	2300      	movs	r3, #0
   10c7a:	e00a      	b.n	10c92 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
   10c7c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   10c80:	eb00 0543 	add.w	r5, r0, r3, lsl #1
   10c84:	78a6      	ldrb	r6, [r4, #2]
   10c86:	70ee      	strb	r6, [r5, #3]
   10c88:	8864      	ldrh	r4, [r4, #2]
   10c8a:	0a24      	lsrs	r4, r4, #8
   10c8c:	1c5b      	adds	r3, r3, #1
   10c8e:	712c      	strb	r4, [r5, #4]
   10c90:	b2db      	uxtb	r3, r3
   10c92:	4293      	cmp	r3, r2
   10c94:	d3f2      	bcc.n	10c7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
   10c96:	2300      	movs	r3, #0
   10c98:	e00b      	b.n	10cb2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
   10c9a:	bf00      	nop
   10c9c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
   10ca0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
   10ca4:	792e      	ldrb	r6, [r5, #4]
   10ca6:	7166      	strb	r6, [r4, #5]
   10ca8:	88ad      	ldrh	r5, [r5, #4]
   10caa:	0a2d      	lsrs	r5, r5, #8
   10cac:	1c5b      	adds	r3, r3, #1
   10cae:	71a5      	strb	r5, [r4, #6]
   10cb0:	b2db      	uxtb	r3, r3
   10cb2:	4293      	cmp	r3, r2
   10cb4:	d3f2      	bcc.n	10c9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
   10cb6:	2101      	movs	r1, #1
   10cb8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   10cbc:	b2c0      	uxtb	r0, r0
   10cbe:	bd70      	pop	{r4, r5, r6, pc}
   10cc0:	2000      	movs	r0, #0
   10cc2:	bd70      	pop	{r4, r5, r6, pc}

00010cc4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
   10cc4:	2101      	movs	r1, #1
   10cc6:	4a0c      	ldr	r2, [pc, #48]	; (10cf8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
   10cc8:	2840      	cmp	r0, #64	; 0x40
   10cca:	d20c      	bcs.n	10ce6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
   10ccc:	2820      	cmp	r0, #32
   10cce:	d803      	bhi.n	10cd8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
   10cd0:	1e40      	subs	r0, r0, #1
   10cd2:	4081      	lsls	r1, r0
   10cd4:	6810      	ldr	r0, [r2, #0]
   10cd6:	e002      	b.n	10cde <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
   10cd8:	3821      	subs	r0, #33	; 0x21
   10cda:	4081      	lsls	r1, r0
   10cdc:	6850      	ldr	r0, [r2, #4]
   10cde:	4201      	tst	r1, r0
   10ce0:	d107      	bne.n	10cf2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
   10ce2:	2000      	movs	r0, #0
   10ce4:	4770      	bx	lr
   10ce6:	28ff      	cmp	r0, #255	; 0xff
   10ce8:	d003      	beq.n	10cf2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
   10cea:	3840      	subs	r0, #64	; 0x40
   10cec:	4081      	lsls	r1, r0
   10cee:	6890      	ldr	r0, [r2, #8]
   10cf0:	e7f5      	b.n	10cde <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
   10cf2:	2001      	movs	r0, #1
   10cf4:	4770      	bx	lr
   10cf6:	0000      	.short	0x0000
   10cf8:	20000068 	.word	0x20000068

00010cfc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
   10cfc:	2101      	movs	r1, #1
   10cfe:	1e40      	subs	r0, r0, #1
   10d00:	4081      	lsls	r1, r0
   10d02:	4804      	ldr	r0, [pc, #16]	; (10d14 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
   10d04:	68c0      	ldr	r0, [r0, #12]
   10d06:	4201      	tst	r1, r0
   10d08:	d001      	beq.n	10d0e <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
   10d0a:	2001      	movs	r0, #1
   10d0c:	4770      	bx	lr
   10d0e:	2000      	movs	r0, #0
   10d10:	4770      	bx	lr
   10d12:	0000      	.short	0x0000
   10d14:	20000068 	.word	0x20000068

00010d18 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
   10d18:	4901      	ldr	r1, [pc, #4]	; (10d20 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
   10d1a:	6800      	ldr	r0, [r0, #0]
   10d1c:	60c8      	str	r0, [r1, #12]
   10d1e:	4770      	bx	lr
   10d20:	20000068 	.word	0x20000068

00010d24 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
   10d24:	4904      	ldr	r1, [pc, #16]	; (10d38 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
   10d26:	6802      	ldr	r2, [r0, #0]
   10d28:	6840      	ldr	r0, [r0, #4]
   10d2a:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
   10d2e:	600a      	str	r2, [r1, #0]
   10d30:	4a02      	ldr	r2, [pc, #8]	; (10d3c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
   10d32:	4310      	orrs	r0, r2
   10d34:	6048      	str	r0, [r1, #4]
   10d36:	4770      	bx	lr
   10d38:	20000068 	.word	0x20000068
   10d3c:	024007f8 	.word	0x024007f8

00010d40 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
   10d40:	4901      	ldr	r1, [pc, #4]	; (10d48 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
   10d42:	6800      	ldr	r0, [r0, #0]
   10d44:	6088      	str	r0, [r1, #8]
   10d46:	4770      	bx	lr
   10d48:	20000068 	.word	0x20000068

00010d4c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
   10d4c:	4805      	ldr	r0, [pc, #20]	; (10d64 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
   10d4e:	f04f 31ff 	mov.w	r1, #4294967295
   10d52:	6001      	str	r1, [r0, #0]
   10d54:	0cc9      	lsrs	r1, r1, #19
   10d56:	6041      	str	r1, [r0, #4]
   10d58:	2100      	movs	r1, #0
   10d5a:	6081      	str	r1, [r0, #8]
   10d5c:	211f      	movs	r1, #31
   10d5e:	60c1      	str	r1, [r0, #12]
   10d60:	4770      	bx	lr
   10d62:	0000      	.short	0x0000
   10d64:	20000068 	.word	0x20000068

00010d68 <sdc_hci_cmd_cb_reset>:
   10d68:	b510      	push	{r4, lr}
   10d6a:	f7ff ffef 	bl	10d4c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
   10d6e:	f00b f9e1 	bl	1c134 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
   10d72:	4604      	mov	r4, r0
   10d74:	4802      	ldr	r0, [pc, #8]	; (10d80 <sdc_hci_cmd_cb_reset+0x18>)
   10d76:	6800      	ldr	r0, [r0, #0]
   10d78:	b100      	cbz	r0, 10d7c <sdc_hci_cmd_cb_reset+0x14>
   10d7a:	4780      	blx	r0
   10d7c:	4620      	mov	r0, r4
   10d7e:	bd10      	pop	{r4, pc}
   10d80:	20000078 	.word	0x20000078

00010d84 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
   10d84:	4901      	ldr	r1, [pc, #4]	; (10d8c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
   10d86:	6008      	str	r0, [r1, #0]
   10d88:	4770      	bx	lr
   10d8a:	0000      	.short	0x0000
   10d8c:	20000078 	.word	0x20000078

00010d90 <sdc_hci_cmd_vs_zephyr_read_version_info>:
   10d90:	2102      	movs	r1, #2
   10d92:	8001      	strh	r1, [r0, #0]
   10d94:	8041      	strh	r1, [r0, #2]
   10d96:	2100      	movs	r1, #0
   10d98:	7101      	strb	r1, [r0, #4]
   10d9a:	210e      	movs	r1, #14
   10d9c:	7141      	strb	r1, [r0, #5]
   10d9e:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
   10da2:	80c1      	strh	r1, [r0, #6]
   10da4:	4901      	ldr	r1, [pc, #4]	; (10dac <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
   10da6:	6081      	str	r1, [r0, #8]
   10da8:	2000      	movs	r0, #0
   10daa:	4770      	bx	lr
   10dac:	3c186766 	.word	0x3c186766

00010db0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
   10db0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10db2:	4604      	mov	r4, r0
   10db4:	4669      	mov	r1, sp
   10db6:	f008 feb3 	bl	19b20 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10dba:	b170      	cbz	r0, 10dda <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
   10dbc:	f240 215a 	movw	r1, #602	; 0x25a
   10dc0:	e008      	b.n	10dd4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
   10dc2:	bf00      	nop
   10dc4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   10dc8:	4621      	mov	r1, r4
   10dca:	f000 f8ab 	bl	10f24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10dce:	b120      	cbz	r0, 10dda <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
   10dd0:	f240 215f 	movw	r1, #607	; 0x25f
   10dd4:	2017      	movs	r0, #23
   10dd6:	f7ff fe1d 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10dda:	4668      	mov	r0, sp
   10ddc:	f000 f852 	bl	10e84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10de0:	2800      	cmp	r0, #0
   10de2:	d0ef      	beq.n	10dc4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
   10de4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00010de8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
   10de8:	b510      	push	{r4, lr}
   10dea:	2802      	cmp	r0, #2
   10dec:	d304      	bcc.n	10df8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
   10dee:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   10df2:	2017      	movs	r0, #23
   10df4:	f7ff fe0e 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10df8:	4901      	ldr	r1, [pc, #4]	; (10e00 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
   10dfa:	5c08      	ldrb	r0, [r1, r0]
   10dfc:	bd10      	pop	{r4, pc}
   10dfe:	0000      	.short	0x0000
   10e00:	20001384 	.word	0x20001384

00010e04 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
   10e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e06:	0005      	movs	r5, r0
   10e08:	9500      	str	r5, [sp, #0]
   10e0a:	d010      	beq.n	10e2e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
   10e0c:	2600      	movs	r6, #0
   10e0e:	7808      	ldrb	r0, [r1, #0]
   10e10:	7849      	ldrb	r1, [r1, #1]
   10e12:	4604      	mov	r4, r0
   10e14:	42a1      	cmp	r1, r4
   10e16:	d900      	bls.n	10e1a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
   10e18:	460c      	mov	r4, r1
   10e1a:	1cea      	adds	r2, r5, #3
   10e1c:	f022 0203 	bic.w	r2, r2, #3
   10e20:	42aa      	cmp	r2, r5
   10e22:	d006      	beq.n	10e32 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
   10e24:	f240 1179 	movw	r1, #377	; 0x179
   10e28:	2017      	movs	r0, #23
   10e2a:	f7ff fdf3 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10e2e:	2601      	movs	r6, #1
   10e30:	e7ed      	b.n	10e0e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
   10e32:	4f13      	ldr	r7, [pc, #76]	; (10e80 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
   10e34:	7038      	strb	r0, [r7, #0]
   10e36:	7079      	strb	r1, [r7, #1]
   10e38:	4631      	mov	r1, r6
   10e3a:	4668      	mov	r0, sp
   10e3c:	f000 f8ee 	bl	1101c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
   10e40:	2100      	movs	r1, #0
   10e42:	460b      	mov	r3, r1
   10e44:	9800      	ldr	r0, [sp, #0]
   10e46:	1cc0      	adds	r0, r0, #3
   10e48:	f020 0003 	bic.w	r0, r0, #3
   10e4c:	9000      	str	r0, [sp, #0]
   10e4e:	b96e      	cbnz	r6, 10e6c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
   10e50:	eb07 0281 	add.w	r2, r7, r1, lsl #2
   10e54:	60d0      	str	r0, [r2, #12]
   10e56:	2000      	movs	r0, #0
   10e58:	e006      	b.n	10e68 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
   10e5a:	bf00      	nop
   10e5c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
   10e60:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
   10e64:	1c40      	adds	r0, r0, #1
   10e66:	b2c0      	uxtb	r0, r0
   10e68:	42a0      	cmp	r0, r4
   10e6a:	d3f7      	bcc.n	10e5c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
   10e6c:	9800      	ldr	r0, [sp, #0]
   10e6e:	1c49      	adds	r1, r1, #1
   10e70:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   10e74:	b2c9      	uxtb	r1, r1
   10e76:	9000      	str	r0, [sp, #0]
   10e78:	2902      	cmp	r1, #2
   10e7a:	d3e3      	bcc.n	10e44 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
   10e7c:	1b40      	subs	r0, r0, r5
   10e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10e80:	20001384 	.word	0x20001384

00010e84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
   10e84:	b570      	push	{r4, r5, r6, lr}
   10e86:	4604      	mov	r4, r0
   10e88:	f008 ffc3 	bl	19e12 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   10e8c:	b108      	cbz	r0, 10e92 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
   10e8e:	2010      	movs	r0, #16
   10e90:	bd70      	pop	{r4, r5, r6, pc}
   10e92:	7825      	ldrb	r5, [r4, #0]
   10e94:	f000 f8fe 	bl	11094 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
   10e98:	4602      	mov	r2, r0
   10e9a:	480c      	ldr	r0, [pc, #48]	; (10ecc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
   10e9c:	8861      	ldrh	r1, [r4, #2]
   10e9e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   10ea2:	e00e      	b.n	10ec2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
   10ea4:	68c3      	ldr	r3, [r0, #12]
   10ea6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   10eaa:	b143      	cbz	r3, 10ebe <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
   10eac:	1c4a      	adds	r2, r1, #1
   10eae:	8062      	strh	r2, [r4, #2]
   10eb0:	80a1      	strh	r1, [r4, #4]
   10eb2:	68c0      	ldr	r0, [r0, #12]
   10eb4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   10eb8:	60a0      	str	r0, [r4, #8]
   10eba:	2000      	movs	r0, #0
   10ebc:	bd70      	pop	{r4, r5, r6, pc}
   10ebe:	1c49      	adds	r1, r1, #1
   10ec0:	b289      	uxth	r1, r1
   10ec2:	4291      	cmp	r1, r2
   10ec4:	d3ee      	bcc.n	10ea4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
   10ec6:	8061      	strh	r1, [r4, #2]
   10ec8:	2005      	movs	r0, #5
   10eca:	bd70      	pop	{r4, r5, r6, pc}
   10ecc:	20001384 	.word	0x20001384

00010ed0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
   10ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ed4:	b121      	cbz	r1, 10ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
   10ed6:	2901      	cmp	r1, #1
   10ed8:	d002      	beq.n	10ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
   10eda:	2000      	movs	r0, #0
   10edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ee0:	4c0f      	ldr	r4, [pc, #60]	; (10f20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
   10ee2:	2700      	movs	r7, #0
   10ee4:	463b      	mov	r3, r7
   10ee6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   10eea:	eb04 0581 	add.w	r5, r4, r1, lsl #2
   10eee:	f814 c001 	ldrb.w	ip, [r4, r1]
   10ef2:	e00a      	b.n	10f0a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
   10ef4:	19dc      	adds	r4, r3, r7
   10ef6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
   10efa:	b2a4      	uxth	r4, r4
   10efc:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
   10f00:	f1be 0f00 	cmp.w	lr, #0
   10f04:	d004      	beq.n	10f10 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
   10f06:	1c5b      	adds	r3, r3, #1
   10f08:	b29b      	uxth	r3, r3
   10f0a:	459c      	cmp	ip, r3
   10f0c:	d8f2      	bhi.n	10ef4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
   10f0e:	4634      	mov	r4, r6
   10f10:	8004      	strh	r4, [r0, #0]
   10f12:	4620      	mov	r0, r4
   10f14:	42b4      	cmp	r4, r6
   10f16:	d0e0      	beq.n	10eda <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
   10f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10f1c:	f000 b834 	b.w	10f88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
   10f20:	20001384 	.word	0x20001384

00010f24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
   10f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f28:	4606      	mov	r6, r0
   10f2a:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   10f2e:	460c      	mov	r4, r1
   10f30:	f243 0702 	movw	r7, #12290	; 0x3002
   10f34:	38ff      	subs	r0, #255	; 0xff
   10f36:	d020      	beq.n	10f7a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
   10f38:	2c02      	cmp	r4, #2
   10f3a:	d302      	bcc.n	10f42 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
   10f3c:	2007      	movs	r0, #7
   10f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f42:	4630      	mov	r0, r6
   10f44:	f000 f85a 	bl	10ffc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
   10f48:	0005      	movs	r5, r0
   10f4a:	d016      	beq.n	10f7a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
   10f4c:	480c      	ldr	r0, [pc, #48]	; (10f80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
   10f4e:	4629      	mov	r1, r5
   10f50:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
   10f54:	4630      	mov	r0, r6
   10f56:	4790      	blx	r2
   10f58:	480a      	ldr	r0, [pc, #40]	; (10f84 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
   10f5a:	2100      	movs	r1, #0
   10f5c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
   10f60:	68f8      	ldr	r0, [r7, #12]
   10f62:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
   10f66:	4620      	mov	r0, r4
   10f68:	f000 f88a 	bl	11080 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
   10f6c:	4602      	mov	r2, r0
   10f6e:	4629      	mov	r1, r5
   10f70:	6878      	ldr	r0, [r7, #4]
   10f72:	f008 fdb4 	bl	19ade <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
   10f76:	2000      	movs	r0, #0
   10f78:	e7e1      	b.n	10f3e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
   10f7a:	4638      	mov	r0, r7
   10f7c:	e7df      	b.n	10f3e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
   10f7e:	0000      	.short	0x0000
   10f80:	000110b4 	.word	0x000110b4
   10f84:	20001384 	.word	0x20001384
   10f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f8c:	4690      	mov	r8, r2
   10f8e:	460d      	mov	r5, r1
   10f90:	4607      	mov	r7, r0
   10f92:	f008 fdd6 	bl	19b42 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
   10f96:	b148      	cbz	r0, 10fac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
   10f98:	4816      	ldr	r0, [pc, #88]	; (10ff4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
   10f9a:	eb00 0685 	add.w	r6, r0, r5, lsl #2
   10f9e:	68f0      	ldr	r0, [r6, #12]
   10fa0:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
   10fa4:	b128      	cbz	r0, 10fb2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
   10fa6:	f44f 719d 	mov.w	r1, #314	; 0x13a
   10faa:	e015      	b.n	10fd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
   10fac:	f240 1139 	movw	r1, #313	; 0x139
   10fb0:	e012      	b.n	10fd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
   10fb2:	6870      	ldr	r0, [r6, #4]
   10fb4:	2800      	cmp	r0, #0
   10fb6:	d01a      	beq.n	10fee <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
   10fb8:	4628      	mov	r0, r5
   10fba:	f000 f861 	bl	11080 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
   10fbe:	4601      	mov	r1, r0
   10fc0:	6870      	ldr	r0, [r6, #4]
   10fc2:	f008 fd3e 	bl	19a42 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
   10fc6:	0004      	movs	r4, r0
   10fc8:	d010      	beq.n	10fec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
   10fca:	68f0      	ldr	r0, [r6, #12]
   10fcc:	2d02      	cmp	r5, #2
   10fce:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
   10fd2:	d304      	bcc.n	10fde <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
   10fd4:	f240 1145 	movw	r1, #325	; 0x145
   10fd8:	2017      	movs	r0, #23
   10fda:	f7ff fd1b 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10fde:	4806      	ldr	r0, [pc, #24]	; (10ff8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
   10fe0:	4642      	mov	r2, r8
   10fe2:	4621      	mov	r1, r4
   10fe4:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
   10fe8:	4638      	mov	r0, r7
   10fea:	4798      	blx	r3
   10fec:	4620      	mov	r0, r4
   10fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ff2:	0000      	.short	0x0000
   10ff4:	20001384 	.word	0x20001384
   10ff8:	000110ac 	.word	0x000110ac
   10ffc:	b570      	push	{r4, r5, r6, lr}
   10ffe:	460c      	mov	r4, r1
   11000:	4605      	mov	r5, r0
   11002:	f008 fd9e 	bl	19b42 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
   11006:	2800      	cmp	r0, #0
   11008:	d005      	beq.n	11016 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
   1100a:	4803      	ldr	r0, [pc, #12]	; (11018 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
   1100c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   11010:	68c0      	ldr	r0, [r0, #12]
   11012:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
   11016:	bd70      	pop	{r4, r5, r6, pc}
   11018:	20001384 	.word	0x20001384
   1101c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11020:	4e16      	ldr	r6, [pc, #88]	; (1107c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
   11022:	4688      	mov	r8, r1
   11024:	4605      	mov	r5, r0
   11026:	2400      	movs	r4, #0
   11028:	6828      	ldr	r0, [r5, #0]
   1102a:	1cc0      	adds	r0, r0, #3
   1102c:	f020 0003 	bic.w	r0, r0, #3
   11030:	6028      	str	r0, [r5, #0]
   11032:	4620      	mov	r0, r4
   11034:	f000 f824 	bl	11080 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
   11038:	5d31      	ldrb	r1, [r6, r4]
   1103a:	4348      	muls	r0, r1
   1103c:	f1b8 0f00 	cmp.w	r8, #0
   11040:	d001      	beq.n	11046 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
   11042:	2200      	movs	r2, #0
   11044:	e000      	b.n	11048 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
   11046:	682a      	ldr	r2, [r5, #0]
   11048:	4601      	mov	r1, r0
   1104a:	9200      	str	r2, [sp, #0]
   1104c:	b132      	cbz	r2, 1105c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
   1104e:	2700      	movs	r7, #0
   11050:	ea4f 000d 	mov.w	r0, sp
   11054:	f008 fd22 	bl	19a9c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   11058:	b11f      	cbz	r7, 11062 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
   1105a:	e006      	b.n	1106a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
   1105c:	2701      	movs	r7, #1
   1105e:	2000      	movs	r0, #0
   11060:	e7f8      	b.n	11054 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
   11062:	eb06 0184 	add.w	r1, r6, r4, lsl #2
   11066:	9a00      	ldr	r2, [sp, #0]
   11068:	604a      	str	r2, [r1, #4]
   1106a:	6829      	ldr	r1, [r5, #0]
   1106c:	1c64      	adds	r4, r4, #1
   1106e:	4408      	add	r0, r1
   11070:	b2e4      	uxtb	r4, r4
   11072:	6028      	str	r0, [r5, #0]
   11074:	2c02      	cmp	r4, #2
   11076:	d3d7      	bcc.n	11028 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
   11078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1107c:	20001384 	.word	0x20001384
   11080:	4903      	ldr	r1, [pc, #12]	; (11090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
   11082:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   11086:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   1108a:	1cc0      	adds	r0, r0, #3
   1108c:	4008      	ands	r0, r1
   1108e:	4770      	bx	lr
   11090:	000110a8 	.word	0x000110a8
   11094:	4903      	ldr	r1, [pc, #12]	; (110a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
   11096:	7808      	ldrb	r0, [r1, #0]
   11098:	7849      	ldrb	r1, [r1, #1]
   1109a:	4288      	cmp	r0, r1
   1109c:	d200      	bcs.n	110a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
   1109e:	4608      	mov	r0, r1
   110a0:	4770      	bx	lr
   110a2:	0000      	.short	0x0000
   110a4:	20001384 	.word	0x20001384
   110a8:	00d40218 	.word	0x00d40218
   110ac:	00019b57 	.word	0x00019b57
   110b0:	00019b57 	.word	0x00019b57
   110b4:	0001b717 	.word	0x0001b717
   110b8:	0001ab05 	.word	0x0001ab05

000110bc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
   110bc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110c0:	4c26      	ldr	r4, [pc, #152]	; (1115c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
   110c2:	4680      	mov	r8, r0
   110c4:	b081      	sub	sp, #4
   110c6:	6820      	ldr	r0, [r4, #0]
   110c8:	469a      	mov	sl, r3
   110ca:	4693      	mov	fp, r2
   110cc:	b158      	cbz	r0, 110e6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
   110ce:	7a02      	ldrb	r2, [r0, #8]
   110d0:	4542      	cmp	r2, r8
   110d2:	d903      	bls.n	110dc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
   110d4:	6841      	ldr	r1, [r0, #4]
   110d6:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
   110da:	b140      	cbz	r0, 110ee <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
   110dc:	f243 0002 	movw	r0, #12290	; 0x3002
   110e0:	b005      	add	sp, #20
   110e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110e6:	21a5      	movs	r1, #165	; 0xa5
   110e8:	2018      	movs	r0, #24
   110ea:	f7ff fc93 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   110ee:	4619      	mov	r1, r3
   110f0:	9802      	ldr	r0, [sp, #8]
   110f2:	f008 fd48 	bl	19b86 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
   110f6:	b286      	uxth	r6, r0
   110f8:	4658      	mov	r0, fp
   110fa:	990e      	ldr	r1, [sp, #56]	; 0x38
   110fc:	f008 fd3a 	bl	19b74 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
   11100:	b285      	uxth	r5, r0
   11102:	1970      	adds	r0, r6, r5
   11104:	1d00      	adds	r0, r0, #4
   11106:	b287      	uxth	r7, r0
   11108:	6820      	ldr	r0, [r4, #0]
   1110a:	46a1      	mov	r9, r4
   1110c:	4639      	mov	r1, r7
   1110e:	6800      	ldr	r0, [r0, #0]
   11110:	f008 fc97 	bl	19a42 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
   11114:	0004      	movs	r4, r0
   11116:	d01f      	beq.n	11158 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
   11118:	8067      	strh	r7, [r4, #2]
   1111a:	8025      	strh	r5, [r4, #0]
   1111c:	4629      	mov	r1, r5
   1111e:	1d20      	adds	r0, r4, #4
   11120:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   11122:	4607      	mov	r7, r0
   11124:	465a      	mov	r2, fp
   11126:	2301      	movs	r3, #1
   11128:	9500      	str	r5, [sp, #0]
   1112a:	f008 fbea 	bl	19902 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   1112e:	8820      	ldrh	r0, [r4, #0]
   11130:	4631      	mov	r1, r6
   11132:	4438      	add	r0, r7
   11134:	2301      	movs	r3, #1
   11136:	9a02      	ldr	r2, [sp, #8]
   11138:	f8cd a000 	str.w	sl, [sp]
   1113c:	f008 fbe1 	bl	19902 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   11140:	8820      	ldrh	r0, [r4, #0]
   11142:	19c1      	adds	r1, r0, r7
   11144:	4638      	mov	r0, r7
   11146:	f008 fc0d 	bl	19964 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
   1114a:	f8d9 0000 	ldr.w	r0, [r9]
   1114e:	6841      	ldr	r1, [r0, #4]
   11150:	2000      	movs	r0, #0
   11152:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
   11156:	e7c3      	b.n	110e0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
   11158:	2004      	movs	r0, #4
   1115a:	e7c1      	b.n	110e0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
   1115c:	2000007c 	.word	0x2000007c

00011160 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
   11160:	b570      	push	{r4, r5, r6, lr}
   11162:	4c14      	ldr	r4, [pc, #80]	; (111b4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
   11164:	6823      	ldr	r3, [r4, #0]
   11166:	b18b      	cbz	r3, 1118c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
   11168:	7a19      	ldrb	r1, [r3, #8]
   1116a:	4281      	cmp	r1, r0
   1116c:	d912      	bls.n	11194 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
   1116e:	685a      	ldr	r2, [r3, #4]
   11170:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   11174:	b171      	cbz	r1, 11194 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
   11176:	2500      	movs	r5, #0
   11178:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   1117c:	884a      	ldrh	r2, [r1, #2]
   1117e:	6818      	ldr	r0, [r3, #0]
   11180:	f008 fcad 	bl	19ade <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
   11184:	6821      	ldr	r1, [r4, #0]
   11186:	2000      	movs	r0, #0
   11188:	7a0a      	ldrb	r2, [r1, #8]
   1118a:	e00c      	b.n	111a6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
   1118c:	21c8      	movs	r1, #200	; 0xc8
   1118e:	2018      	movs	r0, #24
   11190:	f7ff fc40 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11194:	f243 0002 	movw	r0, #12290	; 0x3002
   11198:	bd70      	pop	{r4, r5, r6, pc}
   1119a:	684b      	ldr	r3, [r1, #4]
   1119c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   111a0:	b933      	cbnz	r3, 111b0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
   111a2:	1c40      	adds	r0, r0, #1
   111a4:	b2c0      	uxtb	r0, r0
   111a6:	4282      	cmp	r2, r0
   111a8:	d8f7      	bhi.n	1119a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
   111aa:	6808      	ldr	r0, [r1, #0]
   111ac:	f008 fc8c 	bl	19ac8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
   111b0:	2000      	movs	r0, #0
   111b2:	bd70      	pop	{r4, r5, r6, pc}
   111b4:	2000007c 	.word	0x2000007c

000111b8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
   111b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111bc:	460d      	mov	r5, r1
   111be:	0004      	movs	r4, r0
   111c0:	4690      	mov	r8, r2
   111c2:	f04f 0600 	mov.w	r6, #0
   111c6:	d009      	beq.n	111dc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
   111c8:	2700      	movs	r7, #0
   111ca:	1ce0      	adds	r0, r4, #3
   111cc:	f020 0003 	bic.w	r0, r0, #3
   111d0:	42a0      	cmp	r0, r4
   111d2:	d005      	beq.n	111e0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
   111d4:	2186      	movs	r1, #134	; 0x86
   111d6:	2018      	movs	r0, #24
   111d8:	f7ff fc1c 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   111dc:	2701      	movs	r7, #1
   111de:	e7f4      	b.n	111ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
   111e0:	b1cd      	cbz	r5, 11216 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
   111e2:	4611      	mov	r1, r2
   111e4:	2000      	movs	r0, #0
   111e6:	f008 fc59 	bl	19a9c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   111ea:	300c      	adds	r0, #12
   111ec:	eb00 0685 	add.w	r6, r0, r5, lsl #2
   111f0:	b98f      	cbnz	r7, 11216 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
   111f2:	4f0a      	ldr	r7, [pc, #40]	; (1121c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
   111f4:	f104 000c 	add.w	r0, r4, #12
   111f8:	00aa      	lsls	r2, r5, #2
   111fa:	603c      	str	r4, [r7, #0]
   111fc:	7225      	strb	r5, [r4, #8]
   111fe:	6060      	str	r0, [r4, #4]
   11200:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   11204:	6020      	str	r0, [r4, #0]
   11206:	2100      	movs	r1, #0
   11208:	6860      	ldr	r0, [r4, #4]
   1120a:	f007 fcfe 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1120e:	4641      	mov	r1, r8
   11210:	6838      	ldr	r0, [r7, #0]
   11212:	f008 fc43 	bl	19a9c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   11216:	4630      	mov	r0, r6
   11218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1121c:	2000007c 	.word	0x2000007c

00011220 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
   11220:	b570      	push	{r4, r5, r6, lr}
   11222:	4d08      	ldr	r5, [pc, #32]	; (11244 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
   11224:	6828      	ldr	r0, [r5, #0]
   11226:	2800      	cmp	r0, #0
   11228:	d00a      	beq.n	11240 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
   1122a:	2400      	movs	r4, #0
   1122c:	e004      	b.n	11238 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
   1122e:	4620      	mov	r0, r4
   11230:	f7ff ff96 	bl	11160 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   11234:	1c64      	adds	r4, r4, #1
   11236:	b2e4      	uxtb	r4, r4
   11238:	6828      	ldr	r0, [r5, #0]
   1123a:	7a00      	ldrb	r0, [r0, #8]
   1123c:	42a0      	cmp	r0, r4
   1123e:	d8f6      	bhi.n	1122e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
   11240:	bd70      	pop	{r4, r5, r6, pc}
   11242:	0000      	.short	0x0000
   11244:	2000007c 	.word	0x2000007c

00011248 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
   11248:	4909      	ldr	r1, [pc, #36]	; (11270 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
   1124a:	b510      	push	{r4, lr}
   1124c:	4602      	mov	r2, r0
   1124e:	6809      	ldr	r1, [r1, #0]
   11250:	2000      	movs	r0, #0
   11252:	b149      	cbz	r1, 11268 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
   11254:	7a0b      	ldrb	r3, [r1, #8]
   11256:	4293      	cmp	r3, r2
   11258:	d905      	bls.n	11266 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
   1125a:	6849      	ldr	r1, [r1, #4]
   1125c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   11260:	2900      	cmp	r1, #0
   11262:	d000      	beq.n	11266 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
   11264:	1d08      	adds	r0, r1, #4
   11266:	bd10      	pop	{r4, pc}
   11268:	21ee      	movs	r1, #238	; 0xee
   1126a:	2018      	movs	r0, #24
   1126c:	f7ff fbd2 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11270:	2000007c 	.word	0x2000007c

00011274 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
   11274:	490a      	ldr	r1, [pc, #40]	; (112a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
   11276:	b510      	push	{r4, lr}
   11278:	4602      	mov	r2, r0
   1127a:	6809      	ldr	r1, [r1, #0]
   1127c:	2000      	movs	r0, #0
   1127e:	b159      	cbz	r1, 11298 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
   11280:	7a0b      	ldrb	r3, [r1, #8]
   11282:	4293      	cmp	r3, r2
   11284:	d907      	bls.n	11296 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
   11286:	6849      	ldr	r1, [r1, #4]
   11288:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1128c:	2900      	cmp	r1, #0
   1128e:	d002      	beq.n	11296 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
   11290:	f831 0b04 	ldrh.w	r0, [r1], #4
   11294:	4408      	add	r0, r1
   11296:	bd10      	pop	{r4, pc}
   11298:	21fc      	movs	r1, #252	; 0xfc
   1129a:	2018      	movs	r0, #24
   1129c:	f7ff fbba 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   112a0:	2000007c 	.word	0x2000007c
   112a4:	b570      	push	{r4, r5, r6, lr}
   112a6:	4b1e      	ldr	r3, [pc, #120]	; (11320 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
   112a8:	6845      	ldr	r5, [r0, #4]
   112aa:	4604      	mov	r4, r0
   112ac:	2200      	movs	r2, #0
   112ae:	b1a1      	cbz	r1, 112da <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
   112b0:	2001      	movs	r0, #1
   112b2:	7060      	strb	r0, [r4, #1]
   112b4:	8858      	ldrh	r0, [r3, #2]
   112b6:	0881      	lsrs	r1, r0, #2
   112b8:	f05f 0000 	movs.w	r0, #0
   112bc:	eb04 0340 	add.w	r3, r4, r0, lsl #1
   112c0:	eb04 0680 	add.w	r6, r4, r0, lsl #2
   112c4:	831a      	strh	r2, [r3, #24]
   112c6:	8419      	strh	r1, [r3, #32]
   112c8:	fb00 5301 	mla	r3, r0, r1, r5
   112cc:	6073      	str	r3, [r6, #4]
   112ce:	1823      	adds	r3, r4, r0
   112d0:	1c40      	adds	r0, r0, #1
   112d2:	751a      	strb	r2, [r3, #20]
   112d4:	2804      	cmp	r0, #4
   112d6:	d3f1      	bcc.n	112bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
   112d8:	bd70      	pop	{r4, r5, r6, pc}
   112da:	7062      	strb	r2, [r4, #1]
   112dc:	f05f 0000 	movs.w	r0, #0
   112e0:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   112e4:	830a      	strh	r2, [r1, #24]
   112e6:	840a      	strh	r2, [r1, #32]
   112e8:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   112ec:	604a      	str	r2, [r1, #4]
   112ee:	1821      	adds	r1, r4, r0
   112f0:	1c40      	adds	r0, r0, #1
   112f2:	750a      	strb	r2, [r1, #20]
   112f4:	2804      	cmp	r0, #4
   112f6:	d3f3      	bcc.n	112e0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
   112f8:	8858      	ldrh	r0, [r3, #2]
   112fa:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
   112fe:	d201      	bcs.n	11304 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
   11300:	0846      	lsrs	r6, r0, #1
   11302:	e000      	b.n	11306 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
   11304:	26ff      	movs	r6, #255	; 0xff
   11306:	f008 fcb1 	bl	19c6c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
   1130a:	6065      	str	r5, [r4, #4]
   1130c:	8420      	strh	r0, [r4, #32]
   1130e:	1829      	adds	r1, r5, r0
   11310:	60a1      	str	r1, [r4, #8]
   11312:	8466      	strh	r6, [r4, #34]	; 0x22
   11314:	60e5      	str	r5, [r4, #12]
   11316:	84a0      	strh	r0, [r4, #36]	; 0x24
   11318:	6121      	str	r1, [r4, #16]
   1131a:	84e6      	strh	r6, [r4, #38]	; 0x26
   1131c:	bd70      	pop	{r4, r5, r6, pc}
   1131e:	0000      	.short	0x0000
   11320:	20000080 	.word	0x20000080

00011324 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
   11324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11328:	b170      	cbz	r0, 11348 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
   1132a:	2500      	movs	r5, #0
   1132c:	4411      	add	r1, r2
   1132e:	b2cc      	uxtb	r4, r1
   11330:	4e24      	ldr	r6, [pc, #144]	; (113c4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
   11332:	1cc1      	adds	r1, r0, #3
   11334:	2700      	movs	r7, #0
   11336:	f021 0103 	bic.w	r1, r1, #3
   1133a:	7034      	strb	r4, [r6, #0]
   1133c:	4281      	cmp	r1, r0
   1133e:	d005      	beq.n	1134c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
   11340:	214e      	movs	r1, #78	; 0x4e
   11342:	2009      	movs	r0, #9
   11344:	f7ff fb66 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11348:	2501      	movs	r5, #1
   1134a:	e7ef      	b.n	1132c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
   1134c:	2b1f      	cmp	r3, #31
   1134e:	d804      	bhi.n	1135a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
   11350:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11354:	ea01 0183 	and.w	r1, r1, r3, lsl #2
   11358:	e009      	b.n	1136e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
   1135a:	0059      	lsls	r1, r3, #1
   1135c:	2bff      	cmp	r3, #255	; 0xff
   1135e:	d90b      	bls.n	11378 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
   11360:	f103 02ff 	add.w	r2, r3, #255	; 0xff
   11364:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   11368:	d200      	bcs.n	1136c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
   1136a:	4611      	mov	r1, r2
   1136c:	b289      	uxth	r1, r1
   1136e:	1cc9      	adds	r1, r1, #3
   11370:	f021 0303 	bic.w	r3, r1, #3
   11374:	b135      	cbz	r5, 11384 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
   11376:	e007      	b.n	11388 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
   11378:	227c      	movs	r2, #124	; 0x7c
   1137a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   1137e:	d3f5      	bcc.n	1136c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
   11380:	217c      	movs	r1, #124	; 0x7c
   11382:	e7f3      	b.n	1136c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
   11384:	6070      	str	r0, [r6, #4]
   11386:	8073      	strh	r3, [r6, #2]
   11388:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   1138c:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
   11390:	2100      	movs	r1, #0
   11392:	6876      	ldr	r6, [r6, #4]
   11394:	f04f 0c01 	mov.w	ip, #1
   11398:	e00d      	b.n	113b6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
   1139a:	b94d      	cbnz	r5, 113b0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
   1139c:	eb01 0781 	add.w	r7, r1, r1, lsl #2
   113a0:	eb00 0e02 	add.w	lr, r0, r2
   113a4:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
   113a8:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
   113ac:	f8c7 e004 	str.w	lr, [r7, #4]
   113b0:	1c49      	adds	r1, r1, #1
   113b2:	441a      	add	r2, r3
   113b4:	b2c9      	uxtb	r1, r1
   113b6:	42a1      	cmp	r1, r4
   113b8:	d3ef      	bcc.n	1139a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
   113ba:	1dd2      	adds	r2, r2, #7
   113bc:	f022 0007 	bic.w	r0, r2, #7
   113c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113c4:	20000080 	.word	0x20000080

000113c8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
   113c8:	b570      	push	{r4, r5, r6, lr}
   113ca:	4a10      	ldr	r2, [pc, #64]	; (1140c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
   113cc:	2000      	movs	r0, #0
   113ce:	6851      	ldr	r1, [r2, #4]
   113d0:	7812      	ldrb	r2, [r2, #0]
   113d2:	e014      	b.n	113fe <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
   113d4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   113d8:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
   113dc:	b16b      	cbz	r3, 113fa <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
   113de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   113e2:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
   113e6:	d00c      	beq.n	11402 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
   113e8:	2500      	movs	r5, #0
   113ea:	70a5      	strb	r5, [r4, #2]
   113ec:	2101      	movs	r1, #1
   113ee:	4620      	mov	r0, r4
   113f0:	f7ff ff58 	bl	112a4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
   113f4:	7025      	strb	r5, [r4, #0]
   113f6:	4620      	mov	r0, r4
   113f8:	bd70      	pop	{r4, r5, r6, pc}
   113fa:	1c40      	adds	r0, r0, #1
   113fc:	b2c0      	uxtb	r0, r0
   113fe:	4290      	cmp	r0, r2
   11400:	d3e8      	bcc.n	113d4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
   11402:	21a9      	movs	r1, #169	; 0xa9
   11404:	2009      	movs	r0, #9
   11406:	f7ff fb05 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1140a:	0000      	.short	0x0000
   1140c:	20000080 	.word	0x20000080

00011410 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
   11410:	4804      	ldr	r0, [pc, #16]	; (11424 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
   11412:	b510      	push	{r4, lr}
   11414:	8840      	ldrh	r0, [r0, #2]
   11416:	0884      	lsrs	r4, r0, #2
   11418:	f008 fc28 	bl	19c6c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
   1141c:	4284      	cmp	r4, r0
   1141e:	d300      	bcc.n	11422 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
   11420:	4620      	mov	r0, r4
   11422:	bd10      	pop	{r4, pc}
   11424:	20000080 	.word	0x20000080
   11428:	4909      	ldr	r1, [pc, #36]	; (11450 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
   1142a:	b510      	push	{r4, lr}
   1142c:	4807      	ldr	r0, [pc, #28]	; (1144c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
   1142e:	6008      	str	r0, [r1, #0]
   11430:	4b08      	ldr	r3, [pc, #32]	; (11454 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
   11432:	2011      	movs	r0, #17
   11434:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
   11438:	2200      	movs	r2, #0
   1143a:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
   1143e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   11442:	1c40      	adds	r0, r0, #1
   11444:	b2c0      	uxtb	r0, r0
   11446:	2814      	cmp	r0, #20
   11448:	d3f4      	bcc.n	11434 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
   1144a:	bd10      	pop	{r4, pc}
   1144c:	fffe0000 	.word	0xfffe0000
   11450:	4001f508 	.word	0x4001f508
   11454:	4001f000 	.word	0x4001f000
   11458:	b570      	push	{r4, r5, r6, lr}
   1145a:	2420      	movs	r4, #32
   1145c:	2100      	movs	r1, #0
   1145e:	2301      	movs	r3, #1
   11460:	fa20 f201 	lsr.w	r2, r0, r1
   11464:	07d2      	lsls	r2, r2, #31
   11466:	d020      	beq.n	114aa <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
   11468:	b24a      	sxtb	r2, r1
   1146a:	2a00      	cmp	r2, #0
   1146c:	db10      	blt.n	11490 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
   1146e:	bf00      	nop
   11470:	ea4f 1652 	mov.w	r6, r2, lsr #5
   11474:	ea4f 0686 	mov.w	r6, r6, lsl #2
   11478:	f002 051f 	and.w	r5, r2, #31
   1147c:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
   11480:	fa03 f505 	lsl.w	r5, r3, r5
   11484:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
   11488:	f3bf 8f4f 	dsb	sy
   1148c:	f3bf 8f6f 	isb	sy
   11490:	db0b      	blt.n	114aa <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
   11492:	f002 051f 	and.w	r5, r2, #31
   11496:	ea4f 1252 	mov.w	r2, r2, lsr #5
   1149a:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1149e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
   114a2:	fa03 f505 	lsl.w	r5, r3, r5
   114a6:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
   114aa:	f101 0101 	add.w	r1, r1, #1
   114ae:	42a1      	cmp	r1, r4
   114b0:	d3d6      	bcc.n	11460 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
   114b2:	bd70      	pop	{r4, r5, r6, pc}
   114b4:	b570      	push	{r4, r5, r6, lr}
   114b6:	0042      	lsls	r2, r0, #1
   114b8:	f04f 0100 	mov.w	r1, #0
   114bc:	d501      	bpl.n	114c2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
   114be:	4a14      	ldr	r2, [pc, #80]	; (11510 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
   114c0:	6011      	str	r1, [r2, #0]
   114c2:	f3c0 3280 	ubfx	r2, r0, #14, #1
   114c6:	f3c0 33c0 	ubfx	r3, r0, #15, #1
   114ca:	429a      	cmp	r2, r3
   114cc:	d003      	beq.n	114d6 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
   114ce:	2169      	movs	r1, #105	; 0x69
   114d0:	201b      	movs	r0, #27
   114d2:	f7ff fa9f 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   114d6:	f410 4f40 	tst.w	r0, #49152	; 0xc000
   114da:	d014      	beq.n	11506 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
   114dc:	4a0d      	ldr	r2, [pc, #52]	; (11514 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
   114de:	2001      	movs	r0, #1
   114e0:	6050      	str	r0, [r2, #4]
   114e2:	1e83      	subs	r3, r0, #2
   114e4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   114e8:	4a0b      	ldr	r2, [pc, #44]	; (11518 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
   114ea:	6090      	str	r0, [r2, #8]
   114ec:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   114f0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   114f4:	4c09      	ldr	r4, [pc, #36]	; (1151c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
   114f6:	6021      	str	r1, [r4, #0]
   114f8:	1d25      	adds	r5, r4, #4
   114fa:	6028      	str	r0, [r5, #0]
   114fc:	6090      	str	r0, [r2, #8]
   114fe:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   11502:	6021      	str	r1, [r4, #0]
   11504:	6028      	str	r0, [r5, #0]
   11506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1150a:	f7ff bf8d 	b.w	11428 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
   1150e:	0000      	.short	0x0000
   11510:	4001e504 	.word	0x4001e504
   11514:	4000e000 	.word	0x4000e000
   11518:	4000f000 	.word	0x4000f000
   1151c:	4000f500 	.word	0x4000f500

00011520 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
   11520:	b570      	push	{r4, r5, r6, lr}
   11522:	4c0a      	ldr	r4, [pc, #40]	; (1154c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
   11524:	460d      	mov	r5, r1
   11526:	6020      	str	r0, [r4, #0]
   11528:	f7ff ffc4 	bl	114b4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
   1152c:	6820      	ldr	r0, [r4, #0]
   1152e:	f7ff ff93 	bl	11458 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
   11532:	f000 f883 	bl	1163c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
   11536:	f7ff ff77 	bl	11428 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
   1153a:	f008 fc5f 	bl	19dfc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
   1153e:	4628      	mov	r0, r5
   11540:	f000 f8b6 	bl	116b0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
   11544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11548:	f000 b8ce 	b.w	116e8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
   1154c:	20000088 	.word	0x20000088

00011550 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
   11550:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11554:	4c36      	ldr	r4, [pc, #216]	; (11630 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
   11556:	b082      	sub	sp, #8
   11558:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
   1155c:	2601      	movs	r6, #1
   1155e:	4835      	ldr	r0, [pc, #212]	; (11634 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
   11560:	f007 fa30 	bl	189c4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   11564:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 11634 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
   11568:	b920      	cbnz	r0, 11574 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
   1156a:	2600      	movs	r6, #0
   1156c:	f109 0001 	add.w	r0, r9, #1
   11570:	f007 fa3f 	bl	189f2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   11574:	f44f 7580 	mov.w	r5, #256	; 0x100
   11578:	f04f 0800 	mov.w	r8, #0
   1157c:	1d2f      	adds	r7, r5, #4
   1157e:	2101      	movs	r1, #1
   11580:	6061      	str	r1, [r4, #4]
   11582:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   11586:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   1158a:	9802      	ldr	r0, [sp, #8]
   1158c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
   11590:	6021      	str	r1, [r4, #0]
   11592:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 11638 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
   11596:	e01c      	b.n	115d2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
   11598:	f8da 0000 	ldr.w	r0, [sl]
   1159c:	06c0      	lsls	r0, r0, #27
   1159e:	d518      	bpl.n	115d2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
   115a0:	200e      	movs	r0, #14
   115a2:	f008 fc17 	bl	19dd4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
   115a6:	f3ef 8010 	mrs	r0, PRIMASK
   115aa:	9000      	str	r0, [sp, #0]
   115ac:	b672      	cpsid	i
   115ae:	2103      	movs	r1, #3
   115b0:	4620      	mov	r0, r4
   115b2:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
   115b6:	4629      	mov	r1, r5
   115b8:	f008 fc19 	bl	19dee <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   115bc:	b930      	cbnz	r0, 115cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
   115be:	4639      	mov	r1, r7
   115c0:	4620      	mov	r0, r4
   115c2:	f008 fc14 	bl	19dee <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   115c6:	b908      	cbnz	r0, 115cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
   115c8:	f7ff f89e 	bl	10708 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   115cc:	9800      	ldr	r0, [sp, #0]
   115ce:	b900      	cbnz	r0, 115d2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
   115d0:	b662      	cpsie	i
   115d2:	4629      	mov	r1, r5
   115d4:	4620      	mov	r0, r4
   115d6:	f008 fc0a 	bl	19dee <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   115da:	b928      	cbnz	r0, 115e8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
   115dc:	4639      	mov	r1, r7
   115de:	4620      	mov	r0, r4
   115e0:	f008 fc05 	bl	19dee <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   115e4:	2800      	cmp	r0, #0
   115e6:	d0d7      	beq.n	11598 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
   115e8:	4639      	mov	r1, r7
   115ea:	4620      	mov	r0, r4
   115ec:	f008 fbff 	bl	19dee <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   115f0:	2800      	cmp	r0, #0
   115f2:	d1c4      	bne.n	1157e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
   115f4:	b136      	cbz	r6, 11604 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
   115f6:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
   115fa:	f109 0001 	add.w	r0, r9, #1
   115fe:	f007 f9e1 	bl	189c4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   11602:	e012      	b.n	1162a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
   11604:	f109 0001 	add.w	r0, r9, #1
   11608:	f007 f9dc 	bl	189c4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   1160c:	2800      	cmp	r0, #0
   1160e:	d1ad      	bne.n	1156c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
   11610:	2003      	movs	r0, #3
   11612:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   11616:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   1161a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   1161e:	200e      	movs	r0, #14
   11620:	f008 fbd8 	bl	19dd4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
   11624:	4803      	ldr	r0, [pc, #12]	; (11634 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
   11626:	f007 f9e4 	bl	189f2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   1162a:	2000      	movs	r0, #0
   1162c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11630:	4000e000 	.word	0x4000e000
   11634:	20000297 	.word	0x20000297
   11638:	e000ed10 	.word	0xe000ed10

0001163c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
   1163c:	b510      	push	{r4, lr}
   1163e:	4808      	ldr	r0, [pc, #32]	; (11660 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
   11640:	f007 f9d3 	bl	189ea <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   11644:	b108      	cbz	r0, 1164a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
   11646:	2125      	movs	r1, #37	; 0x25
   11648:	e006      	b.n	11658 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
   1164a:	4805      	ldr	r0, [pc, #20]	; (11660 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
   1164c:	1c40      	adds	r0, r0, #1
   1164e:	f007 f9cc 	bl	189ea <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   11652:	2800      	cmp	r0, #0
   11654:	d003      	beq.n	1165e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
   11656:	2129      	movs	r1, #41	; 0x29
   11658:	201d      	movs	r0, #29
   1165a:	f7ff f9db 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1165e:	bd10      	pop	{r4, pc}
   11660:	20000297 	.word	0x20000297

00011664 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
   11664:	b570      	push	{r4, r5, r6, lr}
   11666:	4911      	ldr	r1, [pc, #68]	; (116ac <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
   11668:	680a      	ldr	r2, [r1, #0]
   1166a:	b1ea      	cbz	r2, 116a8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
   1166c:	2300      	movs	r3, #0
   1166e:	461d      	mov	r5, r3
   11670:	2401      	movs	r4, #1
   11672:	684a      	ldr	r2, [r1, #4]
   11674:	1c52      	adds	r2, r2, #1
   11676:	604a      	str	r2, [r1, #4]
   11678:	2a09      	cmp	r2, #9
   1167a:	d300      	bcc.n	1167e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
   1167c:	604d      	str	r5, [r1, #4]
   1167e:	790e      	ldrb	r6, [r1, #4]
   11680:	fa04 f206 	lsl.w	r2, r4, r6
   11684:	680e      	ldr	r6, [r1, #0]
   11686:	4216      	tst	r6, r2
   11688:	d00b      	beq.n	116a2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
   1168a:	f3ef 8310 	mrs	r3, PRIMASK
   1168e:	b672      	cpsid	i
   11690:	680c      	ldr	r4, [r1, #0]
   11692:	4394      	bics	r4, r2
   11694:	600c      	str	r4, [r1, #0]
   11696:	b903      	cbnz	r3, 1169a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
   11698:	b662      	cpsie	i
   1169a:	6849      	ldr	r1, [r1, #4]
   1169c:	6001      	str	r1, [r0, #0]
   1169e:	2000      	movs	r0, #0
   116a0:	bd70      	pop	{r4, r5, r6, pc}
   116a2:	1c5b      	adds	r3, r3, #1
   116a4:	2b09      	cmp	r3, #9
   116a6:	d3e4      	bcc.n	11672 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
   116a8:	2005      	movs	r0, #5
   116aa:	bd70      	pop	{r4, r5, r6, pc}
   116ac:	2000008c 	.word	0x2000008c

000116b0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
   116b0:	4802      	ldr	r0, [pc, #8]	; (116bc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
   116b2:	2100      	movs	r1, #0
   116b4:	6001      	str	r1, [r0, #0]
   116b6:	6041      	str	r1, [r0, #4]
   116b8:	4770      	bx	lr
   116ba:	0000      	.short	0x0000
   116bc:	2000008c 	.word	0x2000008c

000116c0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
   116c0:	b510      	push	{r4, lr}
   116c2:	4c08      	ldr	r4, [pc, #32]	; (116e4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
   116c4:	7861      	ldrb	r1, [r4, #1]
   116c6:	b109      	cbz	r1, 116cc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
   116c8:	200f      	movs	r0, #15
   116ca:	bd10      	pop	{r4, pc}
   116cc:	f7fe ffa8 	bl	10620 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   116d0:	7020      	strb	r0, [r4, #0]
   116d2:	28ff      	cmp	r0, #255	; 0xff
   116d4:	d001      	beq.n	116da <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
   116d6:	2000      	movs	r0, #0
   116d8:	bd10      	pop	{r4, pc}
   116da:	2176      	movs	r1, #118	; 0x76
   116dc:	201f      	movs	r0, #31
   116de:	f7ff f999 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   116e2:	0000      	.short	0x0000
   116e4:	20000094 	.word	0x20000094

000116e8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
   116e8:	4901      	ldr	r1, [pc, #4]	; (116f0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
   116ea:	2000      	movs	r0, #0
   116ec:	7048      	strb	r0, [r1, #1]
   116ee:	4770      	bx	lr
   116f0:	20000094 	.word	0x20000094

000116f4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
   116f4:	4806      	ldr	r0, [pc, #24]	; (11710 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
   116f6:	4a07      	ldr	r2, [pc, #28]	; (11714 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
   116f8:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   116fa:	8852      	ldrh	r2, [r2, #2]
   116fc:	4291      	cmp	r1, r2
   116fe:	d104      	bne.n	1170a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
   11700:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
   11704:	b108      	cbz	r0, 1170a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
   11706:	2000      	movs	r0, #0
   11708:	4770      	bx	lr
   1170a:	2001      	movs	r0, #1
   1170c:	4770      	bx	lr
   1170e:	0000      	.short	0x0000
   11710:	20001618 	.word	0x20001618
   11714:	2000027c 	.word	0x2000027c

00011718 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
   11718:	4901      	ldr	r1, [pc, #4]	; (11720 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
   1171a:	8048      	strh	r0, [r1, #2]
   1171c:	4770      	bx	lr
   1171e:	0000      	.short	0x0000
   11720:	2000027c 	.word	0x2000027c

00011724 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
   11724:	4808      	ldr	r0, [pc, #32]	; (11748 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
   11726:	4a09      	ldr	r2, [pc, #36]	; (1174c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
   11728:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   1172a:	8852      	ldrh	r2, [r2, #2]
   1172c:	4291      	cmp	r1, r2
   1172e:	d109      	bne.n	11744 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
   11730:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11734:	8481      	strh	r1, [r0, #36]	; 0x24
   11736:	f810 1f22 	ldrb.w	r1, [r0, #34]!
   1173a:	b119      	cbz	r1, 11744 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
   1173c:	2100      	movs	r1, #0
   1173e:	7001      	strb	r1, [r0, #0]
   11740:	2001      	movs	r0, #1
   11742:	4770      	bx	lr
   11744:	2000      	movs	r0, #0
   11746:	4770      	bx	lr
   11748:	20001618 	.word	0x20001618
   1174c:	2000027c 	.word	0x2000027c

00011750 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
   11750:	4807      	ldr	r0, [pc, #28]	; (11770 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
   11752:	f810 1f22 	ldrb.w	r1, [r0, #34]!
   11756:	2901      	cmp	r1, #1
   11758:	d007      	beq.n	1176a <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
   1175a:	2101      	movs	r1, #1
   1175c:	7001      	strb	r1, [r0, #0]
   1175e:	4805      	ldr	r0, [pc, #20]	; (11774 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
   11760:	4903      	ldr	r1, [pc, #12]	; (11770 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
   11762:	8800      	ldrh	r0, [r0, #0]
   11764:	8488      	strh	r0, [r1, #36]	; 0x24
   11766:	2001      	movs	r0, #1
   11768:	4770      	bx	lr
   1176a:	2000      	movs	r0, #0
   1176c:	4770      	bx	lr
   1176e:	0000      	.short	0x0000
   11770:	20001618 	.word	0x20001618
   11774:	2000027c 	.word	0x2000027c

00011778 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
   11778:	4906      	ldr	r1, [pc, #24]	; (11794 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
   1177a:	4b07      	ldr	r3, [pc, #28]	; (11798 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
   1177c:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   1177e:	885b      	ldrh	r3, [r3, #2]
   11780:	429a      	cmp	r2, r3
   11782:	d105      	bne.n	11790 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
   11784:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
   11788:	b112      	cbz	r2, 11790 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
   1178a:	6001      	str	r1, [r0, #0]
   1178c:	2001      	movs	r0, #1
   1178e:	4770      	bx	lr
   11790:	2000      	movs	r0, #0
   11792:	4770      	bx	lr
   11794:	20001618 	.word	0x20001618
   11798:	2000027c 	.word	0x2000027c

0001179c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
   1179c:	4909      	ldr	r1, [pc, #36]	; (117c4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
   1179e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   117a0:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
   117a4:	3bff      	subs	r3, #255	; 0xff
   117a6:	d002      	beq.n	117ae <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
   117a8:	2100      	movs	r1, #0
   117aa:	6001      	str	r1, [r0, #0]
   117ac:	e007      	b.n	117be <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
   117ae:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
   117b2:	4904      	ldr	r1, [pc, #16]	; (117c4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
   117b4:	2a01      	cmp	r2, #1
   117b6:	d002      	beq.n	117be <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
   117b8:	6001      	str	r1, [r0, #0]
   117ba:	2001      	movs	r0, #1
   117bc:	4770      	bx	lr
   117be:	2000      	movs	r0, #0
   117c0:	4770      	bx	lr
   117c2:	0000      	.short	0x0000
   117c4:	20001618 	.word	0x20001618

000117c8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
   117c8:	4901      	ldr	r1, [pc, #4]	; (117d0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
   117ca:	8008      	strh	r0, [r1, #0]
   117cc:	4770      	bx	lr
   117ce:	0000      	.short	0x0000
   117d0:	2000027c 	.word	0x2000027c

000117d4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
   117d4:	4905      	ldr	r1, [pc, #20]	; (117ec <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
   117d6:	2000      	movs	r0, #0
   117d8:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
   117dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   117e0:	8488      	strh	r0, [r1, #36]	; 0x24
   117e2:	4903      	ldr	r1, [pc, #12]	; (117f0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
   117e4:	8008      	strh	r0, [r1, #0]
   117e6:	8048      	strh	r0, [r1, #2]
   117e8:	4770      	bx	lr
   117ea:	0000      	.short	0x0000
   117ec:	20001618 	.word	0x20001618
   117f0:	2000027c 	.word	0x2000027c
   117f4:	4905      	ldr	r1, [pc, #20]	; (1180c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
   117f6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   117f8:	4282      	cmp	r2, r0
   117fa:	d105      	bne.n	11808 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
   117fc:	2000      	movs	r0, #0
   117fe:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
   11802:	f64f 70ff 	movw	r0, #65535	; 0xffff
   11806:	8488      	strh	r0, [r1, #36]	; 0x24
   11808:	4770      	bx	lr
   1180a:	0000      	.short	0x0000
   1180c:	20001618 	.word	0x20001618

00011810 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
   11810:	4a0a      	ldr	r2, [pc, #40]	; (1183c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
   11812:	b110      	cbz	r0, 1181a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
   11814:	2801      	cmp	r0, #1
   11816:	d007      	beq.n	11828 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
   11818:	e00e      	b.n	11838 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   1181a:	7850      	ldrb	r0, [r2, #1]
   1181c:	b160      	cbz	r0, 11838 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   1181e:	f8d2 0002 	ldr.w	r0, [r2, #2]
   11822:	6008      	str	r0, [r1, #0]
   11824:	88d0      	ldrh	r0, [r2, #6]
   11826:	e004      	b.n	11832 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
   11828:	7810      	ldrb	r0, [r2, #0]
   1182a:	b128      	cbz	r0, 11838 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   1182c:	6890      	ldr	r0, [r2, #8]
   1182e:	6008      	str	r0, [r1, #0]
   11830:	8990      	ldrh	r0, [r2, #12]
   11832:	8088      	strh	r0, [r1, #4]
   11834:	2001      	movs	r0, #1
   11836:	4770      	bx	lr
   11838:	2000      	movs	r0, #0
   1183a:	4770      	bx	lr
   1183c:	20000299 	.word	0x20000299

00011840 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
   11840:	4a08      	ldr	r2, [pc, #32]	; (11864 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
   11842:	2301      	movs	r3, #1
   11844:	b138      	cbz	r0, 11856 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
   11846:	2801      	cmp	r0, #1
   11848:	d104      	bne.n	11854 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
   1184a:	7013      	strb	r3, [r2, #0]
   1184c:	6808      	ldr	r0, [r1, #0]
   1184e:	6090      	str	r0, [r2, #8]
   11850:	8888      	ldrh	r0, [r1, #4]
   11852:	8190      	strh	r0, [r2, #12]
   11854:	4770      	bx	lr
   11856:	7053      	strb	r3, [r2, #1]
   11858:	6808      	ldr	r0, [r1, #0]
   1185a:	f8c2 0002 	str.w	r0, [r2, #2]
   1185e:	8888      	ldrh	r0, [r1, #4]
   11860:	80d0      	strh	r0, [r2, #6]
   11862:	4770      	bx	lr
   11864:	20000299 	.word	0x20000299

00011868 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
   11868:	4906      	ldr	r1, [pc, #24]	; (11884 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
   1186a:	b110      	cbz	r0, 11872 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
   1186c:	2801      	cmp	r0, #1
   1186e:	d002      	beq.n	11876 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
   11870:	e005      	b.n	1187e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
   11872:	7848      	ldrb	r0, [r1, #1]
   11874:	e000      	b.n	11878 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
   11876:	7808      	ldrb	r0, [r1, #0]
   11878:	b108      	cbz	r0, 1187e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
   1187a:	2001      	movs	r0, #1
   1187c:	4770      	bx	lr
   1187e:	2000      	movs	r0, #0
   11880:	4770      	bx	lr
   11882:	0000      	.short	0x0000
   11884:	20000299 	.word	0x20000299

00011888 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
   11888:	4901      	ldr	r1, [pc, #4]	; (11890 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
   1188a:	7448      	strb	r0, [r1, #17]
   1188c:	4770      	bx	lr
   1188e:	0000      	.short	0x0000
   11890:	20000f72 	.word	0x20000f72

00011894 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
   11894:	4801      	ldr	r0, [pc, #4]	; (1189c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
   11896:	78c0      	ldrb	r0, [r0, #3]
   11898:	4770      	bx	lr
   1189a:	0000      	.short	0x0000
   1189c:	200000b0 	.word	0x200000b0

000118a0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
   118a0:	4801      	ldr	r0, [pc, #4]	; (118a8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
   118a2:	7900      	ldrb	r0, [r0, #4]
   118a4:	4770      	bx	lr
   118a6:	0000      	.short	0x0000
   118a8:	200000b0 	.word	0x200000b0

000118ac <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
   118ac:	b578      	push	{r3, r4, r5, r6, lr}
   118ae:	4913      	ldr	r1, [pc, #76]	; (118fc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
   118b0:	7c4a      	ldrb	r2, [r1, #17]
   118b2:	b30a      	cbz	r2, 118f8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
   118b4:	7c0a      	ldrb	r2, [r1, #16]
   118b6:	f88d 2000 	strb.w	r2, [sp]
   118ba:	9a00      	ldr	r2, [sp, #0]
   118bc:	9200      	str	r2, [sp, #0]
   118be:	f89d 2000 	ldrb.w	r2, [sp]
   118c2:	b1ca      	cbz	r2, 118f8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
   118c4:	2300      	movs	r3, #0
   118c6:	f101 0210 	add.w	r2, r1, #16
   118ca:	241a      	movs	r4, #26
   118cc:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
   118d0:	7c0e      	ldrb	r6, [r1, #16]
   118d2:	f88d 6000 	strb.w	r6, [sp]
   118d6:	9e00      	ldr	r6, [sp, #0]
   118d8:	9600      	str	r6, [sp, #0]
   118da:	f89d 6000 	ldrb.w	r6, [sp]
   118de:	b14e      	cbz	r6, 118f4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
   118e0:	7013      	strb	r3, [r2, #0]
   118e2:	7043      	strb	r3, [r0, #1]
   118e4:	7004      	strb	r4, [r0, #0]
   118e6:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
   118ea:	6046      	str	r6, [r0, #4]
   118ec:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
   118f0:	6086      	str	r6, [r0, #8]
   118f2:	e7ed      	b.n	118d0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
   118f4:	2001      	movs	r0, #1
   118f6:	bd78      	pop	{r3, r4, r5, r6, pc}
   118f8:	2000      	movs	r0, #0
   118fa:	bd78      	pop	{r3, r4, r5, r6, pc}
   118fc:	20000f72 	.word	0x20000f72

00011900 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
   11900:	b510      	push	{r4, lr}
   11902:	4604      	mov	r4, r0
   11904:	f000 f956 	bl	11bb4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   11908:	b118      	cbz	r0, 11912 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
   1190a:	21bd      	movs	r1, #189	; 0xbd
   1190c:	2027      	movs	r0, #39	; 0x27
   1190e:	f7ff f881 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11912:	4803      	ldr	r0, [pc, #12]	; (11920 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
   11914:	2101      	movs	r1, #1
   11916:	f008 fe39 	bl	1a58c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   1191a:	4802      	ldr	r0, [pc, #8]	; (11924 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
   1191c:	62c4      	str	r4, [r0, #44]	; 0x2c
   1191e:	bd10      	pop	{r4, pc}
   11920:	20000f50 	.word	0x20000f50
   11924:	200000b0 	.word	0x200000b0

00011928 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
   11928:	4901      	ldr	r1, [pc, #4]	; (11930 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
   1192a:	2001      	movs	r0, #1
   1192c:	7188      	strb	r0, [r1, #6]
   1192e:	4770      	bx	lr
   11930:	200000b0 	.word	0x200000b0

00011934 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
   11934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11938:	4d5f      	ldr	r5, [pc, #380]	; (11ab8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
   1193a:	9c08      	ldr	r4, [sp, #32]
   1193c:	782e      	ldrb	r6, [r5, #0]
   1193e:	2e00      	cmp	r6, #0
   11940:	d16b      	bne.n	11a1a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
   11942:	2a00      	cmp	r2, #0
   11944:	d069      	beq.n	11a1a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
   11946:	2b00      	cmp	r3, #0
   11948:	d067      	beq.n	11a1a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
   1194a:	2c00      	cmp	r4, #0
   1194c:	d065      	beq.n	11a1a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
   1194e:	f105 0614 	add.w	r6, r5, #20
   11952:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
   11956:	e886 001c 	stmia.w	r6, {r2, r3, r4}
   1195a:	2700      	movs	r7, #0
   1195c:	71af      	strb	r7, [r5, #6]
   1195e:	716f      	strb	r7, [r5, #5]
   11960:	70ef      	strb	r7, [r5, #3]
   11962:	70af      	strb	r7, [r5, #2]
   11964:	712f      	strb	r7, [r5, #4]
   11966:	81af      	strh	r7, [r5, #12]
   11968:	81ef      	strh	r7, [r5, #14]
   1196a:	f000 f95b 	bl	11c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   1196e:	4606      	mov	r6, r0
   11970:	f000 f952 	bl	11c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   11974:	4604      	mov	r4, r0
   11976:	f006 f825 	bl	179c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
   1197a:	f005 fcb9 	bl	172f0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   1197e:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
   11982:	f006 f8a5 	bl	17ad0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
   11986:	f104 0018 	add.w	r0, r4, #24
   1198a:	f006 f97f 	bl	17c8c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
   1198e:	6920      	ldr	r0, [r4, #16]
   11990:	f006 f972 	bl	17c78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
   11994:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
   11998:	f006 f996 	bl	17cc8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   1199c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   119a0:	6840      	ldr	r0, [r0, #4]
   119a2:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
   119a6:	b108      	cbz	r0, 119ac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
   119a8:	f005 ff56 	bl	17858 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
   119ac:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
   119b0:	2001      	movs	r0, #1
   119b2:	f005 fe81 	bl	176b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   119b6:	2800      	cmp	r0, #0
   119b8:	d076      	beq.n	11aa8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>
   119ba:	4840      	ldr	r0, [pc, #256]	; (11abc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
   119bc:	f005 fef8 	bl	177b0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
   119c0:	8820      	ldrh	r0, [r4, #0]
   119c2:	f7ff fc57 	bl	11274 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   119c6:	6328      	str	r0, [r5, #48]	; 0x30
   119c8:	8820      	ldrh	r0, [r4, #0]
   119ca:	f7ff fc3d 	bl	11248 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   119ce:	f106 0160 	add.w	r1, r6, #96	; 0x60
   119d2:	6368      	str	r0, [r5, #52]	; 0x34
   119d4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 11ac0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
   119d8:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
   119dc:	f109 0808 	add.w	r8, r9, #8
   119e0:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
   119e4:	6f31      	ldr	r1, [r6, #112]	; 0x70
   119e6:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
   119ea:	6f71      	ldr	r1, [r6, #116]	; 0x74
   119ec:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
   119f0:	f000 f98a 	bl	11d08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
   119f4:	4601      	mov	r1, r0
   119f6:	8f20      	ldrh	r0, [r4, #56]	; 0x38
   119f8:	46ba      	mov	sl, r7
   119fa:	f008 fb5f 	bl	1a0bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   119fe:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   11a00:	4281      	cmp	r1, r0
   11a02:	d200      	bcs.n	11a06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
   11a04:	4608      	mov	r0, r1
   11a06:	7228      	strb	r0, [r5, #8]
   11a08:	46a8      	mov	r8, r5
   11a0a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
   11a0e:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
   11a10:	7cf7      	ldrb	r7, [r6, #19]
   11a12:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
   11a14:	2908      	cmp	r1, #8
   11a16:	d104      	bne.n	11a22 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
   11a18:	e002      	b.n	11a20 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
   11a1a:	f44f 718a 	mov.w	r1, #276	; 0x114
   11a1e:	e047      	b.n	11ab0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
   11a20:	2104      	movs	r1, #4
   11a22:	f008 fb4b 	bl	1a0bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11a26:	b90f      	cbnz	r7, 11a2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
   11a28:	1d00      	adds	r0, r0, #4
   11a2a:	b280      	uxth	r0, r0
   11a2c:	4285      	cmp	r5, r0
   11a2e:	d200      	bcs.n	11a32 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
   11a30:	4628      	mov	r0, r5
   11a32:	b2c5      	uxtb	r5, r0
   11a34:	f888 5009 	strb.w	r5, [r8, #9]
   11a38:	7cf1      	ldrb	r1, [r6, #19]
   11a3a:	2900      	cmp	r1, #0
   11a3c:	d002      	beq.n	11a44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
   11a3e:	bf00      	nop
   11a40:	f04f 0104 	mov.w	r1, #4
   11a44:	4429      	add	r1, r5
   11a46:	f888 1007 	strb.w	r1, [r8, #7]
   11a4a:	4657      	mov	r7, sl
   11a4c:	d016      	beq.n	11a7c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x148>
   11a4e:	481c      	ldr	r0, [pc, #112]	; (11ac0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
   11a50:	f04f 0101 	mov.w	r1, #1
   11a54:	f100 0008 	add.w	r0, r0, #8
   11a58:	7601      	strb	r1, [r0, #24]
   11a5a:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
   11a5e:	e9c0 1204 	strd	r1, r2, [r0, #16]
   11a62:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   11a66:	f008 fa2f 	bl	19ec8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
   11a6a:	4915      	ldr	r1, [pc, #84]	; (11ac0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
   11a6c:	4603      	mov	r3, r0
   11a6e:	462a      	mov	r2, r5
   11a70:	3108      	adds	r1, #8
   11a72:	2001      	movs	r0, #1
   11a74:	f005 fc86 	bl	17384 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
   11a78:	f005 fcba 	bl	173f0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
   11a7c:	2001      	movs	r0, #1
   11a7e:	f000 fb73 	bl	12168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
   11a82:	4810      	ldr	r0, [pc, #64]	; (11ac4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
   11a84:	6800      	ldr	r0, [r0, #0]
   11a86:	2803      	cmp	r0, #3
   11a88:	d010      	beq.n	11aac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
   11a8a:	280b      	cmp	r0, #11
   11a8c:	d00e      	beq.n	11aac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
   11a8e:	4648      	mov	r0, r9
   11a90:	f840 7f52 	str.w	r7, [r0, #82]!
   11a94:	6047      	str	r7, [r0, #4]
   11a96:	480a      	ldr	r0, [pc, #40]	; (11ac0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
   11a98:	88b1      	ldrh	r1, [r6, #4]
   11a9a:	3052      	adds	r0, #82	; 0x52
   11a9c:	8041      	strh	r1, [r0, #2]
   11a9e:	8821      	ldrh	r1, [r4, #0]
   11aa0:	8001      	strh	r1, [r0, #0]
   11aa2:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
   11aa6:	7101      	strb	r1, [r0, #4]
   11aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11aac:	f240 11c1 	movw	r1, #449	; 0x1c1
   11ab0:	2027      	movs	r0, #39	; 0x27
   11ab2:	f7fe ffaf 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11ab6:	0000      	.short	0x0000
   11ab8:	200000b0 	.word	0x200000b0
   11abc:	0001236c 	.word	0x0001236c
   11ac0:	20000f20 	.word	0x20000f20
   11ac4:	40001550 	.word	0x40001550

00011ac8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
   11ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11acc:	4605      	mov	r5, r0
   11ace:	f000 f8a9 	bl	11c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11ad2:	4e33      	ldr	r6, [pc, #204]	; (11ba0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
   11ad4:	4604      	mov	r4, r0
   11ad6:	6a70      	ldr	r0, [r6, #36]	; 0x24
   11ad8:	7847      	ldrb	r7, [r0, #1]
   11ada:	b10d      	cbz	r5, 11ae0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
   11adc:	2d01      	cmp	r5, #1
   11ade:	d103      	bne.n	11ae8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
   11ae0:	6b71      	ldr	r1, [r6, #52]	; 0x34
   11ae2:	f007 f971 	bl	18dc8 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
   11ae6:	7070      	strb	r0, [r6, #1]
   11ae8:	7870      	ldrb	r0, [r6, #1]
   11aea:	f04f 0800 	mov.w	r8, #0
   11aee:	f04f 0901 	mov.w	r9, #1
   11af2:	b150      	cbz	r0, 11b0a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
   11af4:	2801      	cmp	r0, #1
   11af6:	d01a      	beq.n	11b2e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
   11af8:	2802      	cmp	r0, #2
   11afa:	d034      	beq.n	11b66 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
   11afc:	2803      	cmp	r0, #3
   11afe:	d048      	beq.n	11b92 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
   11b00:	f240 4115 	movw	r1, #1045	; 0x415
   11b04:	2027      	movs	r0, #39	; 0x27
   11b06:	f7fe ff85 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11b0a:	2d01      	cmp	r5, #1
   11b0c:	d032      	beq.n	11b74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
   11b0e:	f000 f8e7 	bl	11ce0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
   11b12:	4639      	mov	r1, r7
   11b14:	2201      	movs	r2, #1
   11b16:	6b70      	ldr	r0, [r6, #52]	; 0x34
   11b18:	f007 fd7d 	bl	19616 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
   11b1c:	e028      	b.n	11b70 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
   11b1e:	bf00      	nop
   11b20:	f884 8008 	strb.w	r8, [r4, #8]
   11b24:	e031      	b.n	11b8a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
   11b26:	bf00      	nop
   11b28:	f884 9008 	strb.w	r9, [r4, #8]
   11b2c:	e02d      	b.n	11b8a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
   11b2e:	2d01      	cmp	r5, #1
   11b30:	d008      	beq.n	11b44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
   11b32:	f000 f8d5 	bl	11ce0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
   11b36:	4639      	mov	r1, r7
   11b38:	2200      	movs	r2, #0
   11b3a:	6b70      	ldr	r0, [r6, #52]	; 0x34
   11b3c:	f007 fd6b 	bl	19616 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
   11b40:	2d02      	cmp	r5, #2
   11b42:	d00b      	beq.n	11b5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   11b44:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
   11b48:	1c40      	adds	r0, r0, #1
   11b4a:	f141 0100 	adc.w	r1, r1, #0
   11b4e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
   11b52:	7a20      	ldrb	r0, [r4, #8]
   11b54:	2801      	cmp	r0, #1
   11b56:	d003      	beq.n	11b60 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
   11b58:	f884 9008 	strb.w	r9, [r4, #8]
   11b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11b60:	f884 8008 	strb.w	r8, [r4, #8]
   11b64:	e7fa      	b.n	11b5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   11b66:	2d01      	cmp	r5, #1
   11b68:	d004      	beq.n	11b74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
   11b6a:	6b70      	ldr	r0, [r6, #52]	; 0x34
   11b6c:	f007 ff64 	bl	19a38 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
   11b70:	2d02      	cmp	r5, #2
   11b72:	d0f3      	beq.n	11b5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   11b74:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
   11b78:	1c40      	adds	r0, r0, #1
   11b7a:	f141 0100 	adc.w	r1, r1, #0
   11b7e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
   11b82:	7a20      	ldrb	r0, [r4, #8]
   11b84:	2801      	cmp	r0, #1
   11b86:	d1cf      	bne.n	11b28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
   11b88:	e7ca      	b.n	11b20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
   11b8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11b8e:	f001 b8cd 	b.w	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   11b92:	2d01      	cmp	r5, #1
   11b94:	d0e2      	beq.n	11b5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   11b96:	6b70      	ldr	r0, [r6, #52]	; 0x34
   11b98:	f007 ff4e 	bl	19a38 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
   11b9c:	e7f5      	b.n	11b8a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
   11b9e:	0000      	.short	0x0000
   11ba0:	200000b0 	.word	0x200000b0

00011ba4 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
   11ba4:	4802      	ldr	r0, [pc, #8]	; (11bb0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
   11ba6:	89c0      	ldrh	r0, [r0, #14]
   11ba8:	f3c0 2080 	ubfx	r0, r0, #10, #1
   11bac:	4770      	bx	lr
   11bae:	0000      	.short	0x0000
   11bb0:	200000b0 	.word	0x200000b0

00011bb4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
   11bb4:	4804      	ldr	r0, [pc, #16]	; (11bc8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
   11bb6:	7800      	ldrb	r0, [r0, #0]
   11bb8:	b108      	cbz	r0, 11bbe <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
   11bba:	200c      	movs	r0, #12
   11bbc:	4770      	bx	lr
   11bbe:	4903      	ldr	r1, [pc, #12]	; (11bcc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
   11bc0:	2000      	movs	r0, #0
   11bc2:	7448      	strb	r0, [r1, #17]
   11bc4:	4770      	bx	lr
   11bc6:	0000      	.short	0x0000
   11bc8:	200000b0 	.word	0x200000b0
   11bcc:	20000f72 	.word	0x20000f72

00011bd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
   11bd0:	480c      	ldr	r0, [pc, #48]	; (11c04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
   11bd2:	b510      	push	{r4, lr}
   11bd4:	7801      	ldrb	r1, [r0, #0]
   11bd6:	b149      	cbz	r1, 11bec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
   11bd8:	f100 0138 	add.w	r1, r0, #56	; 0x38
   11bdc:	7800      	ldrb	r0, [r0, #0]
   11bde:	2802      	cmp	r0, #2
   11be0:	d008      	beq.n	11bf4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
   11be2:	f240 11dd 	movw	r1, #477	; 0x1dd
   11be6:	2027      	movs	r0, #39	; 0x27
   11be8:	f7fe ff14 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11bf0:	f000 b9d8 	b.w	11fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   11bf4:	6848      	ldr	r0, [r1, #4]
   11bf6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
   11bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11bfe:	f005 bddf 	b.w	177c0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
   11c02:	0000      	.short	0x0000
   11c04:	200000b0 	.word	0x200000b0
   11c08:	4a02      	ldr	r2, [pc, #8]	; (11c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
   11c0a:	8993      	ldrh	r3, [r2, #12]
   11c0c:	4303      	orrs	r3, r0
   11c0e:	8193      	strh	r3, [r2, #12]
   11c10:	6952      	ldr	r2, [r2, #20]
   11c12:	4710      	bx	r2
   11c14:	200000b0 	.word	0x200000b0
   11c18:	4801      	ldr	r0, [pc, #4]	; (11c20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
   11c1a:	6840      	ldr	r0, [r0, #4]
   11c1c:	4770      	bx	lr
   11c1e:	0000      	.short	0x0000
   11c20:	200000e8 	.word	0x200000e8
   11c24:	4801      	ldr	r0, [pc, #4]	; (11c2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
   11c26:	6840      	ldr	r0, [r0, #4]
   11c28:	3070      	adds	r0, #112	; 0x70
   11c2a:	4770      	bx	lr
   11c2c:	200000e8 	.word	0x200000e8
   11c30:	4a01      	ldr	r2, [pc, #4]	; (11c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
   11c32:	2100      	movs	r1, #0
   11c34:	6952      	ldr	r2, [r2, #20]
   11c36:	4710      	bx	r2
   11c38:	200000b0 	.word	0x200000b0
   11c3c:	b570      	push	{r4, r5, r6, lr}
   11c3e:	f7ff fff1 	bl	11c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11c42:	4604      	mov	r4, r0
   11c44:	f7ff ffe8 	bl	11c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   11c48:	4605      	mov	r5, r0
   11c4a:	4621      	mov	r1, r4
   11c4c:	f008 fab9 	bl	1a1c2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
   11c50:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   11c54:	2901      	cmp	r1, #1
   11c56:	d114      	bne.n	11c82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
   11c58:	2800      	cmp	r0, #0
   11c5a:	d012      	beq.n	11c82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
   11c5c:	4809      	ldr	r0, [pc, #36]	; (11c84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
   11c5e:	6842      	ldr	r2, [r0, #4]
   11c60:	8828      	ldrh	r0, [r5, #0]
   11c62:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
   11c66:	7a60      	ldrb	r0, [r4, #9]
   11c68:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
   11c6c:	7aa0      	ldrb	r0, [r4, #10]
   11c6e:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
   11c72:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
   11c76:	2001      	movs	r0, #1
   11c78:	7010      	strb	r0, [r2, #0]
   11c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11c7e:	f001 b855 	b.w	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   11c82:	bd70      	pop	{r4, r5, r6, pc}
   11c84:	200000e8 	.word	0x200000e8
   11c88:	b570      	push	{r4, r5, r6, lr}
   11c8a:	4605      	mov	r5, r0
   11c8c:	2901      	cmp	r1, #1
   11c8e:	d818      	bhi.n	11cc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
   11c90:	4c12      	ldr	r4, [pc, #72]	; (11cdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
   11c92:	69a1      	ldr	r1, [r4, #24]
   11c94:	4788      	blx	r1
   11c96:	b1a0      	cbz	r0, 11cc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
   11c98:	7960      	ldrb	r0, [r4, #5]
   11c9a:	b990      	cbnz	r0, 11cc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
   11c9c:	b9e5      	cbnz	r5, 11cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
   11c9e:	f104 0010 	add.w	r0, r4, #16
   11ca2:	7801      	ldrb	r1, [r0, #0]
   11ca4:	06c8      	lsls	r0, r1, #27
   11ca6:	d405      	bmi.n	11cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
   11ca8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   11caa:	7800      	ldrb	r0, [r0, #0]
   11cac:	06c0      	lsls	r0, r0, #27
   11cae:	d401      	bmi.n	11cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
   11cb0:	2001      	movs	r0, #1
   11cb2:	e000      	b.n	11cb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
   11cb4:	2000      	movs	r0, #0
   11cb6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   11cb8:	b92a      	cbnz	r2, 11cc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
   11cba:	8962      	ldrh	r2, [r4, #10]
   11cbc:	b11a      	cbz	r2, 11cc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
   11cbe:	06c9      	lsls	r1, r1, #27
   11cc0:	d401      	bmi.n	11cc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
   11cc2:	2001      	movs	r0, #1
   11cc4:	bd70      	pop	{r4, r5, r6, pc}
   11cc6:	89a1      	ldrh	r1, [r4, #12]
   11cc8:	078a      	lsls	r2, r1, #30
   11cca:	d503      	bpl.n	11cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
   11ccc:	6a22      	ldr	r2, [r4, #32]
   11cce:	78d2      	ldrb	r2, [r2, #3]
   11cd0:	2a02      	cmp	r2, #2
   11cd2:	d001      	beq.n	11cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
   11cd4:	4308      	orrs	r0, r1
   11cd6:	d1f4      	bne.n	11cc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
   11cd8:	2000      	movs	r0, #0
   11cda:	bd70      	pop	{r4, r5, r6, pc}
   11cdc:	200000b0 	.word	0x200000b0
   11ce0:	b510      	push	{r4, lr}
   11ce2:	4c08      	ldr	r4, [pc, #32]	; (11d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
   11ce4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11ce6:	b138      	cbz	r0, 11cf8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
   11ce8:	8962      	ldrh	r2, [r4, #10]
   11cea:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11cec:	1cd2      	adds	r2, r2, #3
   11cee:	f006 ff12 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11cf2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11cf4:	6260      	str	r0, [r4, #36]	; 0x24
   11cf6:	bd10      	pop	{r4, pc}
   11cf8:	f240 415b 	movw	r1, #1115	; 0x45b
   11cfc:	2027      	movs	r0, #39	; 0x27
   11cfe:	f7fe fe89 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11d02:	0000      	.short	0x0000
   11d04:	200000b0 	.word	0x200000b0
   11d08:	b510      	push	{r4, lr}
   11d0a:	f7ff ff85 	bl	11c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   11d0e:	4604      	mov	r4, r0
   11d10:	f7ff ff88 	bl	11c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11d14:	4601      	mov	r1, r0
   11d16:	7b42      	ldrb	r2, [r0, #13]
   11d18:	4815      	ldr	r0, [pc, #84]	; (11d70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
   11d1a:	2a24      	cmp	r2, #36	; 0x24
   11d1c:	d00e      	beq.n	11d3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
   11d1e:	7b89      	ldrb	r1, [r1, #14]
   11d20:	2924      	cmp	r1, #36	; 0x24
   11d22:	d00b      	beq.n	11d3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
   11d24:	2a1f      	cmp	r2, #31
   11d26:	d00d      	beq.n	11d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
   11d28:	2a20      	cmp	r2, #32
   11d2a:	d00b      	beq.n	11d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
   11d2c:	2922      	cmp	r1, #34	; 0x22
   11d2e:	d00f      	beq.n	11d50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
   11d30:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   11d34:	2804      	cmp	r0, #4
   11d36:	d100      	bne.n	11d3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
   11d38:	2008      	movs	r0, #8
   11d3a:	bd10      	pop	{r4, pc}
   11d3c:	6840      	ldr	r0, [r0, #4]
   11d3e:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
   11d42:	e00e      	b.n	11d62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
   11d44:	2922      	cmp	r1, #34	; 0x22
   11d46:	d003      	beq.n	11d50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
   11d48:	6840      	ldr	r0, [r0, #4]
   11d4a:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
   11d4e:	e005      	b.n	11d5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
   11d50:	6841      	ldr	r1, [r0, #4]
   11d52:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
   11d56:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
   11d5a:	4008      	ands	r0, r1
   11d5c:	f008 f8aa 	bl	19eb4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
   11d60:	4601      	mov	r1, r0
   11d62:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   11d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11d6a:	f008 b8bb 	b.w	19ee4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
   11d6e:	0000      	.short	0x0000
   11d70:	200000e8 	.word	0x200000e8
   11d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11d78:	4688      	mov	r8, r1
   11d7a:	4607      	mov	r7, r0
   11d7c:	f7ff ff52 	bl	11c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11d80:	4c57      	ldr	r4, [pc, #348]	; (11ee0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
   11d82:	2600      	movs	r6, #0
   11d84:	4605      	mov	r5, r0
   11d86:	f88d 6000 	strb.w	r6, [sp]
   11d8a:	7820      	ldrb	r0, [r4, #0]
   11d8c:	2802      	cmp	r0, #2
   11d8e:	d004      	beq.n	11d9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
   11d90:	f240 41ba 	movw	r1, #1210	; 0x4ba
   11d94:	2027      	movs	r0, #39	; 0x27
   11d96:	f7fe fe3d 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11d9a:	7ba0      	ldrb	r0, [r4, #14]
   11d9c:	0640      	lsls	r0, r0, #25
   11d9e:	d406      	bmi.n	11dae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
   11da0:	2040      	movs	r0, #64	; 0x40
   11da2:	f7ff ff45 	bl	11c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11da6:	89e0      	ldrh	r0, [r4, #14]
   11da8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   11dac:	81e0      	strh	r0, [r4, #14]
   11dae:	7ce8      	ldrb	r0, [r5, #19]
   11db0:	b3c7      	cbz	r7, 11e24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
   11db2:	f005 fb4d 	bl	17450 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
   11db6:	f005 fb31 	bl	1741c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
   11dba:	b968      	cbnz	r0, 11dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
   11dbc:	7ce8      	ldrb	r0, [r5, #19]
   11dbe:	b158      	cbz	r0, 11dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
   11dc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11dc2:	7841      	ldrb	r1, [r0, #1]
   11dc4:	b141      	cbz	r1, 11dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
   11dc6:	7800      	ldrb	r0, [r0, #0]
   11dc8:	7a29      	ldrb	r1, [r5, #8]
   11dca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   11dce:	4288      	cmp	r0, r1
   11dd0:	d102      	bne.n	11dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
   11dd2:	2001      	movs	r0, #1
   11dd4:	70a0      	strb	r0, [r4, #2]
   11dd6:	e063      	b.n	11ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
   11dd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11dda:	7841      	ldrb	r1, [r0, #1]
   11ddc:	8161      	strh	r1, [r4, #10]
   11dde:	b121      	cbz	r1, 11dea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
   11de0:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11de2:	f007 fdf6 	bl	199d2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
   11de6:	62a0      	str	r0, [r4, #40]	; 0x28
   11de8:	e000      	b.n	11dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
   11dea:	62a6      	str	r6, [r4, #40]	; 0x28
   11dec:	89e0      	ldrh	r0, [r4, #14]
   11dee:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   11df2:	81e0      	strh	r0, [r4, #14]
   11df4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11df6:	79e9      	ldrb	r1, [r5, #7]
   11df8:	7800      	ldrb	r0, [r0, #0]
   11dfa:	f3c0 0080 	ubfx	r0, r0, #2, #1
   11dfe:	4288      	cmp	r0, r1
   11e00:	d005      	beq.n	11e0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
   11e02:	f000 f963 	bl	120cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
   11e06:	89e0      	ldrh	r0, [r4, #14]
   11e08:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   11e0c:	81e0      	strh	r0, [r4, #14]
   11e0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11e10:	7a29      	ldrb	r1, [r5, #8]
   11e12:	7800      	ldrb	r0, [r0, #0]
   11e14:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   11e18:	4288      	cmp	r0, r1
   11e1a:	d10e      	bne.n	11e3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
   11e1c:	4668      	mov	r0, sp
   11e1e:	f000 f917 	bl	12050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
   11e22:	e00a      	b.n	11e3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
   11e24:	e7ff      	b.n	11e26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
   11e26:	b108      	cbz	r0, 11e2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
   11e28:	f005 fb0c 	bl	17444 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
   11e2c:	78e0      	ldrb	r0, [r4, #3]
   11e2e:	1c40      	adds	r0, r0, #1
   11e30:	70e0      	strb	r0, [r4, #3]
   11e32:	89e0      	ldrh	r0, [r4, #14]
   11e34:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   11e38:	81e0      	strh	r0, [r4, #14]
   11e3a:	7ca8      	ldrb	r0, [r5, #18]
   11e3c:	b198      	cbz	r0, 11e66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
   11e3e:	f7ff feeb 	bl	11c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   11e42:	4928      	ldr	r1, [pc, #160]	; (11ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
   11e44:	760e      	strb	r6, [r1, #24]
   11e46:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
   11e4a:	e9c1 2304 	strd	r2, r3, [r1, #16]
   11e4e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   11e52:	f008 f839 	bl	19ec8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
   11e56:	4603      	mov	r3, r0
   11e58:	22fb      	movs	r2, #251	; 0xfb
   11e5a:	4922      	ldr	r1, [pc, #136]	; (11ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
   11e5c:	2000      	movs	r0, #0
   11e5e:	f005 fa91 	bl	17384 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
   11e62:	f005 fac5 	bl	173f0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
   11e66:	4d1f      	ldr	r5, [pc, #124]	; (11ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
   11e68:	354a      	adds	r5, #74	; 0x4a
   11e6a:	f1b8 0f00 	cmp.w	r8, #0
   11e6e:	d104      	bne.n	11e7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
   11e70:	78e1      	ldrb	r1, [r4, #3]
   11e72:	2001      	movs	r0, #1
   11e74:	f7ff ff08 	bl	11c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
   11e78:	b1b0      	cbz	r0, 11ea8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
   11e7a:	f005 fed9 	bl	17c30 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
   11e7e:	f89d 0000 	ldrb.w	r0, [sp]
   11e82:	b110      	cbz	r0, 11e8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
   11e84:	2000      	movs	r0, #0
   11e86:	f7ff fe1f 	bl	11ac8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   11e8a:	b137      	cbz	r7, 11e9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
   11e8c:	70e6      	strb	r6, [r4, #3]
   11e8e:	7968      	ldrb	r0, [r5, #5]
   11e90:	1c40      	adds	r0, r0, #1
   11e92:	7168      	strb	r0, [r5, #5]
   11e94:	f7ff fed2 	bl	11c3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11e98:	e002      	b.n	11ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
   11e9a:	79a8      	ldrb	r0, [r5, #6]
   11e9c:	1c40      	adds	r0, r0, #1
   11e9e:	71a8      	strb	r0, [r5, #6]
   11ea0:	f000 f880 	bl	11fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   11ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11ea8:	f89d 0000 	ldrb.w	r0, [sp]
   11eac:	b110      	cbz	r0, 11eb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
   11eae:	2001      	movs	r0, #1
   11eb0:	f7ff fe0a 	bl	11ac8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   11eb4:	2000      	movs	r0, #0
   11eb6:	f000 f995 	bl	121e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
   11eba:	f89d 0000 	ldrb.w	r0, [sp]
   11ebe:	b110      	cbz	r0, 11ec6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
   11ec0:	2002      	movs	r0, #2
   11ec2:	f7ff fe01 	bl	11ac8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   11ec6:	b137      	cbz	r7, 11ed6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
   11ec8:	70e6      	strb	r6, [r4, #3]
   11eca:	7968      	ldrb	r0, [r5, #5]
   11ecc:	1c40      	adds	r0, r0, #1
   11ece:	7168      	strb	r0, [r5, #5]
   11ed0:	f7ff feb4 	bl	11c3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11ed4:	e7e6      	b.n	11ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
   11ed6:	79a8      	ldrb	r0, [r5, #6]
   11ed8:	1c40      	adds	r0, r0, #1
   11eda:	71a8      	strb	r0, [r5, #6]
   11edc:	e7e2      	b.n	11ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
   11ede:	0000      	.short	0x0000
   11ee0:	200000b0 	.word	0x200000b0
   11ee4:	20000f28 	.word	0x20000f28
   11ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11eec:	460f      	mov	r7, r1
   11eee:	4680      	mov	r8, r0
   11ef0:	f7ff fe98 	bl	11c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11ef4:	4d29      	ldr	r5, [pc, #164]	; (11f9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
   11ef6:	4604      	mov	r4, r0
   11ef8:	7828      	ldrb	r0, [r5, #0]
   11efa:	2801      	cmp	r0, #1
   11efc:	d004      	beq.n	11f08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
   11efe:	f240 416a 	movw	r1, #1130	; 0x46a
   11f02:	2027      	movs	r0, #39	; 0x27
   11f04:	f7fe fd86 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11f08:	7861      	ldrb	r1, [r4, #1]
   11f0a:	2000      	movs	r0, #0
   11f0c:	2601      	movs	r6, #1
   11f0e:	b129      	cbz	r1, 11f1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
   11f10:	7060      	strb	r0, [r4, #1]
   11f12:	2100      	movs	r1, #0
   11f14:	2004      	movs	r0, #4
   11f16:	f7ff fe77 	bl	11c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   11f1a:	70e6      	strb	r6, [r4, #3]
   11f1c:	6a29      	ldr	r1, [r5, #32]
   11f1e:	7808      	ldrb	r0, [r1, #0]
   11f20:	43c0      	mvns	r0, r0
   11f22:	0780      	lsls	r0, r0, #30
   11f24:	d109      	bne.n	11f3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
   11f26:	79a0      	ldrb	r0, [r4, #6]
   11f28:	bb88      	cbnz	r0, 11f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
   11f2a:	2002      	movs	r0, #2
   11f2c:	f7ff fe6c 	bl	11c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   11f30:	6a28      	ldr	r0, [r5, #32]
   11f32:	7800      	ldrb	r0, [r0, #0]
   11f34:	43c0      	mvns	r0, r0
   11f36:	0780      	lsls	r0, r0, #30
   11f38:	d029      	beq.n	11f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
   11f3a:	6a28      	ldr	r0, [r5, #32]
   11f3c:	7840      	ldrb	r0, [r0, #1]
   11f3e:	b110      	cbz	r0, 11f46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
   11f40:	2002      	movs	r0, #2
   11f42:	71a0      	strb	r0, [r4, #6]
   11f44:	e000      	b.n	11f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
   11f46:	71a6      	strb	r6, [r4, #6]
   11f48:	7ce0      	ldrb	r0, [r4, #19]
   11f4a:	b1a0      	cbz	r0, 11f76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
   11f4c:	f7ff fe64 	bl	11c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   11f50:	4913      	ldr	r1, [pc, #76]	; (11fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
   11f52:	7a6d      	ldrb	r5, [r5, #9]
   11f54:	760e      	strb	r6, [r1, #24]
   11f56:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
   11f5a:	e9c1 2304 	strd	r2, r3, [r1, #16]
   11f5e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   11f62:	f007 ffb1 	bl	19ec8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
   11f66:	4603      	mov	r3, r0
   11f68:	462a      	mov	r2, r5
   11f6a:	490d      	ldr	r1, [pc, #52]	; (11fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
   11f6c:	2001      	movs	r0, #1
   11f6e:	f005 fa09 	bl	17384 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
   11f72:	f005 fa3d 	bl	173f0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
   11f76:	ea37 0708 	bics.w	r7, r7, r8
   11f7a:	d004      	beq.n	11f86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
   11f7c:	2100      	movs	r1, #0
   11f7e:	4608      	mov	r0, r1
   11f80:	f7ff fe82 	bl	11c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
   11f84:	b128      	cbz	r0, 11f92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
   11f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11f8a:	f000 b80b 	b.w	11fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   11f8e:	2003      	movs	r0, #3
   11f90:	e7d7      	b.n	11f42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
   11f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11f96:	2000      	movs	r0, #0
   11f98:	f000 b8e6 	b.w	12168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
   11f9c:	200000b0 	.word	0x200000b0
   11fa0:	20000f28 	.word	0x20000f28
   11fa4:	b510      	push	{r4, lr}
   11fa6:	f005 faeb 	bl	17580 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   11faa:	f005 f9a1 	bl	172f0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   11fae:	4c0d      	ldr	r4, [pc, #52]	; (11fe4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
   11fb0:	89e0      	ldrh	r0, [r4, #14]
   11fb2:	f7ff fe3d 	bl	11c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11fb6:	69e2      	ldr	r2, [r4, #28]
   11fb8:	7961      	ldrb	r1, [r4, #5]
   11fba:	78a0      	ldrb	r0, [r4, #2]
   11fbc:	4790      	blx	r2
   11fbe:	480a      	ldr	r0, [pc, #40]	; (11fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
   11fc0:	7c40      	ldrb	r0, [r0, #17]
   11fc2:	b158      	cbz	r0, 11fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
   11fc4:	4808      	ldr	r0, [pc, #32]	; (11fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
   11fc6:	3852      	subs	r0, #82	; 0x52
   11fc8:	f850 1f52 	ldr.w	r1, [r0, #82]!
   11fcc:	6081      	str	r1, [r0, #8]
   11fce:	6841      	ldr	r1, [r0, #4]
   11fd0:	60c1      	str	r1, [r0, #12]
   11fd2:	4805      	ldr	r0, [pc, #20]	; (11fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
   11fd4:	2101      	movs	r1, #1
   11fd6:	7401      	strb	r1, [r0, #16]
   11fd8:	f000 fea8 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   11fdc:	2000      	movs	r0, #0
   11fde:	7020      	strb	r0, [r4, #0]
   11fe0:	bd10      	pop	{r4, pc}
   11fe2:	0000      	.short	0x0000
   11fe4:	200000b0 	.word	0x200000b0
   11fe8:	20000f72 	.word	0x20000f72
   11fec:	4808      	ldr	r0, [pc, #32]	; (12010 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
   11fee:	b510      	push	{r4, lr}
   11ff0:	7800      	ldrb	r0, [r0, #0]
   11ff2:	2802      	cmp	r0, #2
   11ff4:	d004      	beq.n	12000 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
   11ff6:	f240 2111 	movw	r1, #529	; 0x211
   11ffa:	2027      	movs	r0, #39	; 0x27
   11ffc:	f7fe fd0a 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12000:	4904      	ldr	r1, [pc, #16]	; (12014 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
   12002:	2001      	movs	r0, #1
   12004:	71c8      	strb	r0, [r1, #7]
   12006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1200a:	f7ff bfcb 	b.w	11fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   1200e:	0000      	.short	0x0000
   12010:	200000b0 	.word	0x200000b0
   12014:	20000f72 	.word	0x20000f72
   12018:	b430      	push	{r4, r5}
   1201a:	4b0c      	ldr	r3, [pc, #48]	; (1204c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
   1201c:	b942      	cbnz	r2, 12030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
   1201e:	79da      	ldrb	r2, [r3, #7]
   12020:	2aff      	cmp	r2, #255	; 0xff
   12022:	d105      	bne.n	12030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
   12024:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
   12028:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
   1202c:	42a2      	cmp	r2, r4
   1202e:	d00b      	beq.n	12048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
   12030:	b131      	cbz	r1, 12040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
   12032:	79da      	ldrb	r2, [r3, #7]
   12034:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
   12038:	bc30      	pop	{r4, r5}
   1203a:	4610      	mov	r0, r2
   1203c:	f005 be30 	b.w	17ca0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
   12040:	22ff      	movs	r2, #255	; 0xff
   12042:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
   12046:	e7f7      	b.n	12038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
   12048:	bc30      	pop	{r4, r5}
   1204a:	4770      	bx	lr
   1204c:	200000b0 	.word	0x200000b0
   12050:	b570      	push	{r4, r5, r6, lr}
   12052:	4606      	mov	r6, r0
   12054:	f7ff fde6 	bl	11c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   12058:	4a1b      	ldr	r2, [pc, #108]	; (120c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
   1205a:	4604      	mov	r4, r0
   1205c:	2501      	movs	r5, #1
   1205e:	6a51      	ldr	r1, [r2, #36]	; 0x24
   12060:	7808      	ldrb	r0, [r1, #0]
   12062:	f000 0003 	and.w	r0, r0, #3
   12066:	2801      	cmp	r0, #1
   12068:	d00c      	beq.n	12084 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
   1206a:	2802      	cmp	r0, #2
   1206c:	d00a      	beq.n	12084 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
   1206e:	2803      	cmp	r0, #3
   12070:	d121      	bne.n	120b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
   12072:	7065      	strb	r5, [r4, #1]
   12074:	89d0      	ldrh	r0, [r2, #14]
   12076:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
   1207a:	81d0      	strh	r0, [r2, #14]
   1207c:	2001      	movs	r0, #1
   1207e:	f7ff fdc3 	bl	11c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   12082:	e018      	b.n	120b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
   12084:	7848      	ldrb	r0, [r1, #1]
   12086:	b1b0      	cbz	r0, 120b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
   12088:	89d1      	ldrh	r1, [r2, #14]
   1208a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   1208e:	81d1      	strh	r1, [r2, #14]
   12090:	6a91      	ldr	r1, [r2, #40]	; 0x28
   12092:	2900      	cmp	r1, #0
   12094:	d009      	beq.n	120aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
   12096:	28fb      	cmp	r0, #251	; 0xfb
   12098:	d808      	bhi.n	120ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
   1209a:	7990      	ldrb	r0, [r2, #6]
   1209c:	b120      	cbz	r0, 120a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
   1209e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   120a2:	2020      	movs	r0, #32
   120a4:	f7ff bdc4 	b.w	11c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   120a8:	7035      	strb	r5, [r6, #0]
   120aa:	bd70      	pop	{r4, r5, r6, pc}
   120ac:	7950      	ldrb	r0, [r2, #5]
   120ae:	f040 0010 	orr.w	r0, r0, #16
   120b2:	7150      	strb	r0, [r2, #5]
   120b4:	bd70      	pop	{r4, r5, r6, pc}
   120b6:	7a20      	ldrb	r0, [r4, #8]
   120b8:	2801      	cmp	r0, #1
   120ba:	d001      	beq.n	120c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
   120bc:	7225      	strb	r5, [r4, #8]
   120be:	bd70      	pop	{r4, r5, r6, pc}
   120c0:	2000      	movs	r0, #0
   120c2:	7220      	strb	r0, [r4, #8]
   120c4:	bd70      	pop	{r4, r5, r6, pc}
   120c6:	0000      	.short	0x0000
   120c8:	200000b0 	.word	0x200000b0
   120cc:	b570      	push	{r4, r5, r6, lr}
   120ce:	f7ff fda9 	bl	11c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   120d2:	4604      	mov	r4, r0
   120d4:	7980      	ldrb	r0, [r0, #6]
   120d6:	2800      	cmp	r0, #0
   120d8:	d02e      	beq.n	12138 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
   120da:	2802      	cmp	r0, #2
   120dc:	d10d      	bne.n	120fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
   120de:	481c      	ldr	r0, [pc, #112]	; (12150 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
   120e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
   120e2:	f007 fa71 	bl	195c8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
   120e6:	b340      	cbz	r0, 1213a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
   120e8:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
   120ec:	1c40      	adds	r0, r0, #1
   120ee:	f141 0100 	adc.w	r1, r1, #0
   120f2:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
   120f6:	f000 fe19 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   120fa:	2500      	movs	r5, #0
   120fc:	71a5      	strb	r5, [r4, #6]
   120fe:	78e0      	ldrb	r0, [r4, #3]
   12100:	b120      	cbz	r0, 1210c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
   12102:	70e5      	strb	r5, [r4, #3]
   12104:	2100      	movs	r1, #0
   12106:	2010      	movs	r0, #16
   12108:	f7ff fd7e 	bl	11c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   1210c:	78a0      	ldrb	r0, [r4, #2]
   1210e:	b170      	cbz	r0, 1212e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
   12110:	70a5      	strb	r5, [r4, #2]
   12112:	f7ff fb07 	bl	11724 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
   12116:	b198      	cbz	r0, 12140 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
   12118:	2100      	movs	r1, #0
   1211a:	2008      	movs	r0, #8
   1211c:	f7ff fd74 	bl	11c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   12120:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
   12124:	1c40      	adds	r0, r0, #1
   12126:	f141 0100 	adc.w	r1, r1, #0
   1212a:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
   1212e:	79e0      	ldrb	r0, [r4, #7]
   12130:	2801      	cmp	r0, #1
   12132:	d00a      	beq.n	1214a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
   12134:	2001      	movs	r0, #1
   12136:	71e0      	strb	r0, [r4, #7]
   12138:	bd70      	pop	{r4, r5, r6, pc}
   1213a:	f44f 716c 	mov.w	r1, #944	; 0x3b0
   1213e:	e001      	b.n	12144 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
   12140:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   12144:	2027      	movs	r0, #39	; 0x27
   12146:	f7fe fc65 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1214a:	71e5      	strb	r5, [r4, #7]
   1214c:	bd70      	pop	{r4, r5, r6, pc}
   1214e:	0000      	.short	0x0000
   12150:	200000b0 	.word	0x200000b0
   12154:	4803      	ldr	r0, [pc, #12]	; (12164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
   12156:	7800      	ldrb	r0, [r0, #0]
   12158:	2800      	cmp	r0, #0
   1215a:	d001      	beq.n	12160 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
   1215c:	f7ff bf22 	b.w	11fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   12160:	4770      	bx	lr
   12162:	0000      	.short	0x0000
   12164:	200000b0 	.word	0x200000b0
   12168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1216c:	4606      	mov	r6, r0
   1216e:	f7ff fd53 	bl	11c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   12172:	4680      	mov	r8, r0
   12174:	f7ff fd56 	bl	11c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   12178:	4c17      	ldr	r4, [pc, #92]	; (121d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
   1217a:	4605      	mov	r5, r0
   1217c:	4632      	mov	r2, r6
   1217e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12180:	6260      	str	r0, [r4, #36]	; 0x24
   12182:	2101      	movs	r1, #1
   12184:	4640      	mov	r0, r8
   12186:	f7ff ff47 	bl	12018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
   1218a:	7ce8      	ldrb	r0, [r5, #19]
   1218c:	2700      	movs	r7, #0
   1218e:	b180      	cbz	r0, 121b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
   12190:	4812      	ldr	r0, [pc, #72]	; (121dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
   12192:	f005 fca3 	bl	17adc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   12196:	4812      	ldr	r0, [pc, #72]	; (121e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
   12198:	2101      	movs	r1, #1
   1219a:	7601      	strb	r1, [r0, #24]
   1219c:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
   121a0:	e9c0 1204 	strd	r1, r2, [r0, #16]
   121a4:	490d      	ldr	r1, [pc, #52]	; (121dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
   121a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   121a8:	f005 f874 	bl	17294 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
   121ac:	f005 f886 	bl	172bc <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
   121b0:	e004      	b.n	121bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
   121b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   121b4:	f005 fc92 	bl	17adc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   121b8:	f005 f89a 	bl	172f0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   121bc:	b916      	cbnz	r6, 121c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
   121be:	4638      	mov	r0, r7
   121c0:	f005 fb22 	bl	17808 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   121c4:	2100      	movs	r1, #0
   121c6:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
   121ca:	4608      	mov	r0, r1
   121cc:	f005 fd12 	bl	17bf4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   121d0:	2002      	movs	r0, #2
   121d2:	7020      	strb	r0, [r4, #0]
   121d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   121d8:	200000b0 	.word	0x200000b0
   121dc:	20000e20 	.word	0x20000e20
   121e0:	20000f28 	.word	0x20000f28
   121e4:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   121e8:	4604      	mov	r4, r0
   121ea:	f7ff fd1b 	bl	11c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   121ee:	4605      	mov	r5, r0
   121f0:	f7ff fd12 	bl	11c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   121f4:	4606      	mov	r6, r0
   121f6:	f8df 9168 	ldr.w	r9, [pc, #360]	; 12360 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
   121fa:	4622      	mov	r2, r4
   121fc:	2100      	movs	r1, #0
   121fe:	f7ff ff0b 	bl	12018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
   12202:	79a8      	ldrb	r0, [r5, #6]
   12204:	2701      	movs	r7, #1
   12206:	f04f 0800 	mov.w	r8, #0
   1220a:	f1a9 0420 	sub.w	r4, r9, #32
   1220e:	b140      	cbz	r0, 12222 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
   12210:	2801      	cmp	r0, #1
   12212:	d01f      	beq.n	12254 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
   12214:	2802      	cmp	r0, #2
   12216:	d030      	beq.n	1227a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
   12218:	2803      	cmp	r0, #3
   1221a:	d03c      	beq.n	12296 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
   1221c:	f240 21ae 	movw	r1, #686	; 0x2ae
   12220:	e058      	b.n	122d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
   12222:	7a20      	ldrb	r0, [r4, #8]
   12224:	2150      	movs	r1, #80	; 0x50
   12226:	f8ad 0004 	strh.w	r0, [sp, #4]
   1222a:	5388      	strh	r0, [r1, r6]
   1222c:	4648      	mov	r0, r9
   1222e:	f7ff faa3 	bl	11778 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
   12232:	b128      	cbz	r0, 12240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
   12234:	2080      	movs	r0, #128	; 0x80
   12236:	6a21      	ldr	r1, [r4, #32]
   12238:	f7ff fce6 	bl	11c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   1223c:	70af      	strb	r7, [r5, #2]
   1223e:	e02e      	b.n	1229e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
   12240:	466a      	mov	r2, sp
   12242:	a901      	add	r1, sp, #4
   12244:	6b20      	ldr	r0, [r4, #48]	; 0x30
   12246:	f007 fe57 	bl	19ef8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
   1224a:	6220      	str	r0, [r4, #32]
   1224c:	b110      	cbz	r0, 12254 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
   1224e:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
   12252:	b111      	cbz	r1, 1225a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
   12254:	4843      	ldr	r0, [pc, #268]	; (12364 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
   12256:	6220      	str	r0, [r4, #32]
   12258:	e021      	b.n	1229e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
   1225a:	f89d 1000 	ldrb.w	r1, [sp]
   1225e:	b931      	cbnz	r1, 1226e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
   12260:	f8a0 8000 	strh.w	r8, [r0]
   12264:	f880 8002 	strb.w	r8, [r0, #2]
   12268:	2101      	movs	r1, #1
   1226a:	f008 f98f 	bl	1a58c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   1226e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   12272:	6a20      	ldr	r0, [r4, #32]
   12274:	f008 f94e 	bl	1a514 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
   12278:	e011      	b.n	1229e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
   1227a:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
   1227e:	f8ad 0004 	strh.w	r0, [sp, #4]
   12282:	466a      	mov	r2, sp
   12284:	a901      	add	r1, sp, #4
   12286:	6b20      	ldr	r0, [r4, #48]	; 0x30
   12288:	f007 fe36 	bl	19ef8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
   1228c:	6220      	str	r0, [r4, #32]
   1228e:	b930      	cbnz	r0, 1229e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
   12290:	f240 219f 	movw	r1, #671	; 0x29f
   12294:	e01e      	b.n	122d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
   12296:	4648      	mov	r0, r9
   12298:	f7ff fa6e 	bl	11778 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
   1229c:	b1c0      	cbz	r0, 122d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
   1229e:	6a20      	ldr	r0, [r4, #32]
   122a0:	2308      	movs	r3, #8
   122a2:	7801      	ldrb	r1, [r0, #0]
   122a4:	f021 0108 	bic.w	r1, r1, #8
   122a8:	7001      	strb	r1, [r0, #0]
   122aa:	79ea      	ldrb	r2, [r5, #7]
   122ac:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
   122b0:	4311      	orrs	r1, r2
   122b2:	f021 0104 	bic.w	r1, r1, #4
   122b6:	7001      	strb	r1, [r0, #0]
   122b8:	7a2a      	ldrb	r2, [r5, #8]
   122ba:	2304      	movs	r3, #4
   122bc:	ea03 0282 	and.w	r2, r3, r2, lsl #2
   122c0:	4311      	orrs	r1, r2
   122c2:	f021 0110 	bic.w	r1, r1, #16
   122c6:	7001      	strb	r1, [r0, #0]
   122c8:	43c9      	mvns	r1, r1
   122ca:	0789      	lsls	r1, r1, #30
   122cc:	d005      	beq.n	122da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
   122ce:	e007      	b.n	122e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
   122d0:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   122d4:	2027      	movs	r0, #39	; 0x27
   122d6:	f7fe fb9d 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   122da:	78c0      	ldrb	r0, [r0, #3]
   122dc:	2802      	cmp	r0, #2
   122de:	d00f      	beq.n	12300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
   122e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
   122e2:	f007 fa99 	bl	19818 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
   122e6:	b108      	cbz	r0, 122ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
   122e8:	2101      	movs	r1, #1
   122ea:	e00a      	b.n	12302 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
   122ec:	6a20      	ldr	r0, [r4, #32]
   122ee:	7800      	ldrb	r0, [r0, #0]
   122f0:	43c0      	mvns	r0, r0
   122f2:	0780      	lsls	r0, r0, #30
   122f4:	d004      	beq.n	12300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
   122f6:	f7ff f9fd 	bl	116f4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
   122fa:	f080 0101 	eor.w	r1, r0, #1
   122fe:	e000      	b.n	12302 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
   12300:	2100      	movs	r1, #0
   12302:	6a20      	ldr	r0, [r4, #32]
   12304:	7802      	ldrb	r2, [r0, #0]
   12306:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   1230a:	7001      	strb	r1, [r0, #0]
   1230c:	7ca9      	ldrb	r1, [r5, #18]
   1230e:	b199      	cbz	r1, 12338 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
   12310:	7841      	ldrb	r1, [r0, #1]
   12312:	b189      	cbz	r1, 12338 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
   12314:	4814      	ldr	r0, [pc, #80]	; (12368 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
   12316:	f005 fbe1 	bl	17adc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   1231a:	4812      	ldr	r0, [pc, #72]	; (12364 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
   1231c:	3828      	subs	r0, #40	; 0x28
   1231e:	f880 8018 	strb.w	r8, [r0, #24]
   12322:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
   12326:	e9c0 1204 	strd	r1, r2, [r0, #16]
   1232a:	480f      	ldr	r0, [pc, #60]	; (12368 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
   1232c:	6a21      	ldr	r1, [r4, #32]
   1232e:	f004 ffb1 	bl	17294 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
   12332:	f004 fffb 	bl	1732c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
   12336:	e003      	b.n	12340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
   12338:	f005 fbd0 	bl	17adc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   1233c:	f004 ffd8 	bl	172f0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   12340:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
   12344:	2101      	movs	r1, #1
   12346:	2000      	movs	r0, #0
   12348:	f005 fc54 	bl	17bf4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   1234c:	7127      	strb	r7, [r4, #4]
   1234e:	6a20      	ldr	r0, [r4, #32]
   12350:	8801      	ldrh	r1, [r0, #0]
   12352:	8221      	strh	r1, [r4, #16]
   12354:	7880      	ldrb	r0, [r0, #2]
   12356:	74a0      	strb	r0, [r4, #18]
   12358:	7027      	strb	r7, [r4, #0]
   1235a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
   1235e:	0000      	.short	0x0000
   12360:	200000d0 	.word	0x200000d0
   12364:	20000f50 	.word	0x20000f50
   12368:	20000e20 	.word	0x20000e20
   1236c:	00011fed 	.word	0x00011fed
   12370:	00011d75 	.word	0x00011d75
   12374:	00011ee9 	.word	0x00011ee9
   12378:	00012155 	.word	0x00012155

0001237c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
   1237c:	4800      	ldr	r0, [pc, #0]	; (12380 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
   1237e:	4770      	bx	lr
   12380:	20001811 	.word	0x20001811

00012384 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
   12384:	4904      	ldr	r1, [pc, #16]	; (12398 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
   12386:	788a      	ldrb	r2, [r1, #2]
   12388:	4282      	cmp	r2, r0
   1238a:	d903      	bls.n	12394 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
   1238c:	4408      	add	r0, r1
   1238e:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
   12392:	4770      	bx	lr
   12394:	2000      	movs	r0, #0
   12396:	4770      	bx	lr
   12398:	2000163e 	.word	0x2000163e

0001239c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
   1239c:	4904      	ldr	r1, [pc, #16]	; (123b0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
   1239e:	788a      	ldrb	r2, [r1, #2]
   123a0:	4282      	cmp	r2, r0
   123a2:	d903      	bls.n	123ac <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
   123a4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   123a8:	3083      	adds	r0, #131	; 0x83
   123aa:	4770      	bx	lr
   123ac:	2000      	movs	r0, #0
   123ae:	4770      	bx	lr
   123b0:	2000163e 	.word	0x2000163e

000123b4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
   123b4:	4a05      	ldr	r2, [pc, #20]	; (123cc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
   123b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   123ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   123be:	6802      	ldr	r2, [r0, #0]
   123c0:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
   123c4:	8880      	ldrh	r0, [r0, #4]
   123c6:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
   123ca:	4770      	bx	lr
   123cc:	2000163e 	.word	0x2000163e

000123d0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
   123d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123d4:	460e      	mov	r6, r1
   123d6:	4607      	mov	r7, r0
   123d8:	4615      	mov	r5, r2
   123da:	2106      	movs	r1, #6
   123dc:	4630      	mov	r0, r6
   123de:	f007 ff7a 	bl	1a2d6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   123e2:	4c0d      	ldr	r4, [pc, #52]	; (12418 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
   123e4:	b160      	cbz	r0, 12400 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
   123e6:	2000      	movs	r0, #0
   123e8:	e004      	b.n	123f4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
   123ea:	1821      	adds	r1, r4, r0
   123ec:	1c40      	adds	r0, r0, #1
   123ee:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
   123f2:	b2c0      	uxtb	r0, r0
   123f4:	78a1      	ldrb	r1, [r4, #2]
   123f6:	4281      	cmp	r1, r0
   123f8:	d8f7      	bhi.n	123ea <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
   123fa:	2001      	movs	r0, #1
   123fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12400:	4631      	mov	r1, r6
   12402:	4638      	mov	r0, r7
   12404:	f007 fd87 	bl	19f16 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   12408:	2808      	cmp	r0, #8
   1240a:	d003      	beq.n	12414 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
   1240c:	4420      	add	r0, r4
   1240e:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
   12412:	e7f2      	b.n	123fa <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
   12414:	2000      	movs	r0, #0
   12416:	e7f1      	b.n	123fc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
   12418:	2000163e 	.word	0x2000163e

0001241c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
   1241c:	4904      	ldr	r1, [pc, #16]	; (12430 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
   1241e:	788a      	ldrb	r2, [r1, #2]
   12420:	4282      	cmp	r2, r0
   12422:	d903      	bls.n	1242c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
   12424:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   12428:	1cc0      	adds	r0, r0, #3
   1242a:	4770      	bx	lr
   1242c:	2000      	movs	r0, #0
   1242e:	4770      	bx	lr
   12430:	2000163e 	.word	0x2000163e

00012434 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
   12434:	b510      	push	{r4, lr}
   12436:	f240 12d3 	movw	r2, #467	; 0x1d3
   1243a:	2100      	movs	r1, #0
   1243c:	4808      	ldr	r0, [pc, #32]	; (12460 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
   1243e:	f006 fbe4 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   12442:	2208      	movs	r2, #8
   12444:	21ff      	movs	r1, #255	; 0xff
   12446:	4807      	ldr	r0, [pc, #28]	; (12464 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
   12448:	f006 fbdf 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1244c:	4805      	ldr	r0, [pc, #20]	; (12464 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
   1244e:	2100      	movs	r1, #0
   12450:	1f00      	subs	r0, r0, #4
   12452:	7001      	strb	r1, [r0, #0]
   12454:	7041      	strb	r1, [r0, #1]
   12456:	f44f 7161 	mov.w	r1, #900	; 0x384
   1245a:	8041      	strh	r1, [r0, #2]
   1245c:	bd10      	pop	{r4, pc}
   1245e:	0000      	.short	0x0000
   12460:	2000163e 	.word	0x2000163e
   12464:	20000284 	.word	0x20000284

00012468 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
   12468:	4901      	ldr	r1, [pc, #4]	; (12470 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
   1246a:	7008      	strb	r0, [r1, #0]
   1246c:	4770      	bx	lr
   1246e:	0000      	.short	0x0000
   12470:	20000280 	.word	0x20000280

00012474 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
   12474:	4801      	ldr	r0, [pc, #4]	; (1247c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
   12476:	7800      	ldrb	r0, [r0, #0]
   12478:	4770      	bx	lr
   1247a:	0000      	.short	0x0000
   1247c:	20000280 	.word	0x20000280

00012480 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
   12480:	4b0b      	ldr	r3, [pc, #44]	; (124b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
   12482:	b510      	push	{r4, lr}
   12484:	789c      	ldrb	r4, [r3, #2]
   12486:	4284      	cmp	r4, r0
   12488:	d90f      	bls.n	124aa <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
   1248a:	4418      	add	r0, r3
   1248c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
   12490:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   12494:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
   12498:	700b      	strb	r3, [r1, #0]
   1249a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
   1249e:	6011      	str	r1, [r2, #0]
   124a0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
   124a4:	8090      	strh	r0, [r2, #4]
   124a6:	2001      	movs	r0, #1
   124a8:	bd10      	pop	{r4, pc}
   124aa:	2000      	movs	r0, #0
   124ac:	bd10      	pop	{r4, pc}
   124ae:	0000      	.short	0x0000
   124b0:	2000163e 	.word	0x2000163e

000124b4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
   124b4:	4907      	ldr	r1, [pc, #28]	; (124d4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
   124b6:	788a      	ldrb	r2, [r1, #2]
   124b8:	4282      	cmp	r2, r0
   124ba:	d909      	bls.n	124d0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
   124bc:	4408      	add	r0, r1
   124be:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
   124c2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   124c6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
   124ca:	f000 0001 	and.w	r0, r0, #1
   124ce:	4770      	bx	lr
   124d0:	2000      	movs	r0, #0
   124d2:	4770      	bx	lr
   124d4:	2000163e 	.word	0x2000163e

000124d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
   124d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   124dc:	4698      	mov	r8, r3
   124de:	4691      	mov	r9, r2
   124e0:	460c      	mov	r4, r1
   124e2:	4605      	mov	r5, r0
   124e4:	f000 f936 	bl	12754 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   124e8:	4606      	mov	r6, r0
   124ea:	2810      	cmp	r0, #16
   124ec:	d006      	beq.n	124fc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
   124ee:	f000 f901 	bl	126f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   124f2:	2810      	cmp	r0, #16
   124f4:	d002      	beq.n	124fc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
   124f6:	2012      	movs	r0, #18
   124f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   124fc:	4f18      	ldr	r7, [pc, #96]	; (12560 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
   124fe:	78b8      	ldrb	r0, [r7, #2]
   12500:	2808      	cmp	r0, #8
   12502:	d22a      	bcs.n	1255a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
   12504:	2e10      	cmp	r6, #16
   12506:	d105      	bne.n	12514 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
   12508:	2200      	movs	r2, #0
   1250a:	4621      	mov	r1, r4
   1250c:	4628      	mov	r0, r5
   1250e:	f000 f905 	bl	1271c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
   12512:	4606      	mov	r6, r0
   12514:	78bc      	ldrb	r4, [r7, #2]
   12516:	2210      	movs	r2, #16
   12518:	1c60      	adds	r0, r4, #1
   1251a:	70b8      	strb	r0, [r7, #2]
   1251c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   12520:	1ce8      	adds	r0, r5, #3
   12522:	4649      	mov	r1, r9
   12524:	f007 fe40 	bl	1a1a8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   12528:	f105 0083 	add.w	r0, r5, #131	; 0x83
   1252c:	2210      	movs	r2, #16
   1252e:	4641      	mov	r1, r8
   12530:	f007 fe3a 	bl	1a1a8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   12534:	2110      	movs	r1, #16
   12536:	4640      	mov	r0, r8
   12538:	f007 fecd 	bl	1a2d6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   1253c:	443c      	add	r4, r7
   1253e:	2110      	movs	r1, #16
   12540:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
   12544:	4648      	mov	r0, r9
   12546:	f504 7496 	add.w	r4, r4, #300	; 0x12c
   1254a:	f007 fec4 	bl	1a2d6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   1254e:	77e0      	strb	r0, [r4, #31]
   12550:	f804 6c29 	strb.w	r6, [r4, #-41]
   12554:	2000      	movs	r0, #0
   12556:	73e0      	strb	r0, [r4, #15]
   12558:	e7ce      	b.n	124f8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
   1255a:	2007      	movs	r0, #7
   1255c:	e7cc      	b.n	124f8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
   1255e:	0000      	.short	0x0000
   12560:	2000163e 	.word	0x2000163e

00012564 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
   12564:	4806      	ldr	r0, [pc, #24]	; (12580 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
   12566:	b510      	push	{r4, lr}
   12568:	7880      	ldrb	r0, [r0, #2]
   1256a:	1e40      	subs	r0, r0, #1
   1256c:	b244      	sxtb	r4, r0
   1256e:	e004      	b.n	1257a <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
   12570:	b2e0      	uxtb	r0, r4
   12572:	f000 f937 	bl	127e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
   12576:	1e64      	subs	r4, r4, #1
   12578:	b264      	sxtb	r4, r4
   1257a:	2c00      	cmp	r4, #0
   1257c:	daf8      	bge.n	12570 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
   1257e:	bd10      	pop	{r4, pc}
   12580:	2000163e 	.word	0x2000163e

00012584 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
   12584:	4801      	ldr	r0, [pc, #4]	; (1258c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
   12586:	8840      	ldrh	r0, [r0, #2]
   12588:	4770      	bx	lr
   1258a:	0000      	.short	0x0000
   1258c:	20000280 	.word	0x20000280

00012590 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
   12590:	b138      	cbz	r0, 125a2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
   12592:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
   12596:	4288      	cmp	r0, r1
   12598:	d803      	bhi.n	125a2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
   1259a:	4903      	ldr	r1, [pc, #12]	; (125a8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
   1259c:	8048      	strh	r0, [r1, #2]
   1259e:	2001      	movs	r0, #1
   125a0:	4770      	bx	lr
   125a2:	2000      	movs	r0, #0
   125a4:	4770      	bx	lr
   125a6:	0000      	.short	0x0000
   125a8:	20000280 	.word	0x20000280

000125ac <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
   125ac:	4905      	ldr	r1, [pc, #20]	; (125c4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
   125ae:	788a      	ldrb	r2, [r1, #2]
   125b0:	4282      	cmp	r2, r0
   125b2:	d903      	bls.n	125bc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
   125b4:	4408      	add	r0, r1
   125b6:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
   125ba:	b108      	cbz	r0, 125c0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
   125bc:	2000      	movs	r0, #0
   125be:	4770      	bx	lr
   125c0:	2001      	movs	r0, #1
   125c2:	4770      	bx	lr
   125c4:	2000163e 	.word	0x2000163e

000125c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
   125c8:	b570      	push	{r4, r5, r6, lr}
   125ca:	460d      	mov	r5, r1
   125cc:	4606      	mov	r6, r0
   125ce:	f000 f8c1 	bl	12754 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   125d2:	4c10      	ldr	r4, [pc, #64]	; (12614 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
   125d4:	2810      	cmp	r0, #16
   125d6:	d007      	beq.n	125e8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
   125d8:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
   125dc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
   125e0:	07c9      	lsls	r1, r1, #31
   125e2:	d001      	beq.n	125e8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
   125e4:	2001      	movs	r0, #1
   125e6:	bd70      	pop	{r4, r5, r6, pc}
   125e8:	7861      	ldrb	r1, [r4, #1]
   125ea:	2908      	cmp	r1, #8
   125ec:	d210      	bcs.n	12610 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
   125ee:	2810      	cmp	r0, #16
   125f0:	d008      	beq.n	12604 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
   125f2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   125f6:	2101      	movs	r1, #1
   125f8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
   125fc:	7860      	ldrb	r0, [r4, #1]
   125fe:	1c40      	adds	r0, r0, #1
   12600:	7060      	strb	r0, [r4, #1]
   12602:	e7ef      	b.n	125e4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
   12604:	2201      	movs	r2, #1
   12606:	4629      	mov	r1, r5
   12608:	4630      	mov	r0, r6
   1260a:	f000 f887 	bl	1271c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
   1260e:	e7f5      	b.n	125fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
   12610:	2000      	movs	r0, #0
   12612:	bd70      	pop	{r4, r5, r6, pc}
   12614:	2000163e 	.word	0x2000163e

00012618 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
   12618:	b570      	push	{r4, r5, r6, lr}
   1261a:	4d0b      	ldr	r5, [pc, #44]	; (12648 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
   1261c:	7828      	ldrb	r0, [r5, #0]
   1261e:	1e40      	subs	r0, r0, #1
   12620:	b244      	sxtb	r4, r0
   12622:	e00a      	b.n	1263a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
   12624:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   12628:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
   1262c:	07c0      	lsls	r0, r0, #31
   1262e:	d002      	beq.n	12636 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
   12630:	b2e0      	uxtb	r0, r4
   12632:	f000 f91f 	bl	12874 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
   12636:	1e64      	subs	r4, r4, #1
   12638:	b264      	sxtb	r4, r4
   1263a:	2c00      	cmp	r4, #0
   1263c:	daf2      	bge.n	12624 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
   1263e:	4903      	ldr	r1, [pc, #12]	; (1264c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
   12640:	2000      	movs	r0, #0
   12642:	7048      	strb	r0, [r1, #1]
   12644:	bd70      	pop	{r4, r5, r6, pc}
   12646:	0000      	.short	0x0000
   12648:	2000163e 	.word	0x2000163e
   1264c:	20000280 	.word	0x20000280

00012650 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
   12650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12654:	2400      	movs	r4, #0
   12656:	4625      	mov	r5, r4
   12658:	4e18      	ldr	r6, [pc, #96]	; (126bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
   1265a:	e029      	b.n	126b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
   1265c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
   12660:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
   12664:	07c0      	lsls	r0, r0, #31
   12666:	d021      	beq.n	126ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
   12668:	4628      	mov	r0, r5
   1266a:	f000 f843 	bl	126f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   1266e:	4603      	mov	r3, r0
   12670:	f7ff fed4 	bl	1241c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   12674:	4601      	mov	r1, r0
   12676:	2000      	movs	r0, #0
   12678:	2b10      	cmp	r3, #16
   1267a:	d009      	beq.n	12690 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
   1267c:	18f2      	adds	r2, r6, r3
   1267e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
   12682:	f1bc 0f01 	cmp.w	ip, #1
   12686:	d002      	beq.n	1268e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
   12688:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
   1268c:	b102      	cbz	r2, 12690 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
   1268e:	2001      	movs	r0, #1
   12690:	1e40      	subs	r0, r0, #1
   12692:	4201      	tst	r1, r0
   12694:	d10a      	bne.n	126ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
   12696:	480a      	ldr	r0, [pc, #40]	; (126c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
   12698:	f507 71aa 	add.w	r1, r7, #340	; 0x154
   1269c:	5503      	strb	r3, [r0, r4]
   1269e:	4620      	mov	r0, r4
   126a0:	1c64      	adds	r4, r4, #1
   126a2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
   126a6:	b2e4      	uxtb	r4, r4
   126a8:	f005 fbcc 	bl	17e44 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
   126ac:	1c6d      	adds	r5, r5, #1
   126ae:	b2ed      	uxtb	r5, r5
   126b0:	7830      	ldrb	r0, [r6, #0]
   126b2:	42a8      	cmp	r0, r5
   126b4:	d8d2      	bhi.n	1265c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
   126b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   126ba:	0000      	.short	0x0000
   126bc:	2000163e 	.word	0x2000163e
   126c0:	20000284 	.word	0x20000284
   126c4:	4602      	mov	r2, r0
   126c6:	4809      	ldr	r0, [pc, #36]	; (126ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
   126c8:	b510      	push	{r4, lr}
   126ca:	7800      	ldrb	r0, [r0, #0]
   126cc:	460b      	mov	r3, r1
   126ce:	b158      	cbz	r0, 126e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
   126d0:	4807      	ldr	r0, [pc, #28]	; (126f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
   126d2:	7881      	ldrb	r1, [r0, #2]
   126d4:	b141      	cbz	r1, 126e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
   126d6:	b10b      	cbz	r3, 126dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
   126d8:	1cc0      	adds	r0, r0, #3
   126da:	e001      	b.n	126e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
   126dc:	4804      	ldr	r0, [pc, #16]	; (126f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
   126de:	3083      	adds	r0, #131	; 0x83
   126e0:	f004 fcfa 	bl	170d8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
   126e4:	2001      	movs	r0, #1
   126e6:	bd10      	pop	{r4, pc}
   126e8:	2000      	movs	r0, #0
   126ea:	bd10      	pop	{r4, pc}
   126ec:	20000280 	.word	0x20000280
   126f0:	2000163e 	.word	0x2000163e
   126f4:	4908      	ldr	r1, [pc, #32]	; (12718 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
   126f6:	b510      	push	{r4, lr}
   126f8:	4603      	mov	r3, r0
   126fa:	2000      	movs	r0, #0
   126fc:	788a      	ldrb	r2, [r1, #2]
   126fe:	e006      	b.n	1270e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
   12700:	180c      	adds	r4, r1, r0
   12702:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
   12706:	429c      	cmp	r4, r3
   12708:	d004      	beq.n	12714 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
   1270a:	1c40      	adds	r0, r0, #1
   1270c:	b2c0      	uxtb	r0, r0
   1270e:	4282      	cmp	r2, r0
   12710:	d8f6      	bhi.n	12700 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
   12712:	2010      	movs	r0, #16
   12714:	bd10      	pop	{r4, pc}
   12716:	0000      	.short	0x0000
   12718:	2000163e 	.word	0x2000163e
   1271c:	b570      	push	{r4, r5, r6, lr}
   1271e:	4b0c      	ldr	r3, [pc, #48]	; (12750 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
   12720:	4604      	mov	r4, r0
   12722:	7818      	ldrb	r0, [r3, #0]
   12724:	1c45      	adds	r5, r0, #1
   12726:	701d      	strb	r5, [r3, #0]
   12728:	2810      	cmp	r0, #16
   1272a:	d303      	bcc.n	12734 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
   1272c:	2146      	movs	r1, #70	; 0x46
   1272e:	2028      	movs	r0, #40	; 0x28
   12730:	f7fe f970 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12734:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   12738:	680d      	ldr	r5, [r1, #0]
   1273a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
   1273e:	8889      	ldrh	r1, [r1, #4]
   12740:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
   12744:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
   12748:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
   1274c:	bd70      	pop	{r4, r5, r6, pc}
   1274e:	0000      	.short	0x0000
   12750:	2000163e 	.word	0x2000163e
   12754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12758:	460f      	mov	r7, r1
   1275a:	4606      	mov	r6, r0
   1275c:	2400      	movs	r4, #0
   1275e:	4d0d      	ldr	r5, [pc, #52]	; (12794 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
   12760:	e00f      	b.n	12782 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
   12762:	bf00      	nop
   12764:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   12768:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
   1276c:	42b1      	cmp	r1, r6
   1276e:	d106      	bne.n	1277e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
   12770:	2206      	movs	r2, #6
   12772:	4639      	mov	r1, r7
   12774:	f500 70aa 	add.w	r0, r0, #340	; 0x154
   12778:	f006 f9bb 	bl	18af2 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   1277c:	b138      	cbz	r0, 1278e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
   1277e:	1c64      	adds	r4, r4, #1
   12780:	b2e4      	uxtb	r4, r4
   12782:	7828      	ldrb	r0, [r5, #0]
   12784:	42a0      	cmp	r0, r4
   12786:	d8ed      	bhi.n	12764 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
   12788:	2010      	movs	r0, #16
   1278a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1278e:	4620      	mov	r0, r4
   12790:	e7fb      	b.n	1278a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
   12792:	0000      	.short	0x0000
   12794:	2000163e 	.word	0x2000163e
   12798:	b570      	push	{r4, r5, r6, lr}
   1279a:	4605      	mov	r5, r0
   1279c:	f7ff ffaa 	bl	126f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   127a0:	2810      	cmp	r0, #16
   127a2:	d11c      	bne.n	127de <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
   127a4:	4c0e      	ldr	r4, [pc, #56]	; (127e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
   127a6:	7820      	ldrb	r0, [r4, #0]
   127a8:	1e40      	subs	r0, r0, #1
   127aa:	b2c0      	uxtb	r0, r0
   127ac:	7020      	strb	r0, [r4, #0]
   127ae:	42a8      	cmp	r0, r5
   127b0:	d015      	beq.n	127de <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
   127b2:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
   127b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   127ba:	f502 7080 	add.w	r0, r2, #256	; 0x100
   127be:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
   127c2:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
   127c6:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
   127ca:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
   127ce:	7820      	ldrb	r0, [r4, #0]
   127d0:	f7ff ff90 	bl	126f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   127d4:	2810      	cmp	r0, #16
   127d6:	d002      	beq.n	127de <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
   127d8:	4420      	add	r0, r4
   127da:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
   127de:	bd70      	pop	{r4, r5, r6, pc}
   127e0:	2000163e 	.word	0x2000163e
   127e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127e8:	4c21      	ldr	r4, [pc, #132]	; (12870 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
   127ea:	4606      	mov	r6, r0
   127ec:	19a7      	adds	r7, r4, r6
   127ee:	78a0      	ldrb	r0, [r4, #2]
   127f0:	1e40      	subs	r0, r0, #1
   127f2:	b2c5      	uxtb	r5, r0
   127f4:	70a5      	strb	r5, [r4, #2]
   127f6:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
   127fa:	42ae      	cmp	r6, r5
   127fc:	d02a      	beq.n	12854 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
   127fe:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
   12802:	eb04 1906 	add.w	r9, r4, r6, lsl #4
   12806:	f10a 0103 	add.w	r1, sl, #3
   1280a:	f109 0003 	add.w	r0, r9, #3
   1280e:	2210      	movs	r2, #16
   12810:	f006 f981 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   12814:	f10a 0183 	add.w	r1, sl, #131	; 0x83
   12818:	f109 0083 	add.w	r0, r9, #131	; 0x83
   1281c:	2210      	movs	r2, #16
   1281e:	f006 f97a 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   12822:	1960      	adds	r0, r4, r5
   12824:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   12828:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
   1282c:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
   12830:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   12834:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   12838:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   1283c:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
   12840:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
   12844:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
   12848:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
   1284c:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
   12850:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
   12854:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
   12858:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
   1285c:	07c0      	lsls	r0, r0, #31
   1285e:	d104      	bne.n	1286a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
   12860:	4640      	mov	r0, r8
   12862:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12866:	f7ff bf97 	b.w	12798 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
   1286a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1286e:	0000      	.short	0x0000
   12870:	2000163e 	.word	0x2000163e
   12874:	4905      	ldr	r1, [pc, #20]	; (1288c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
   12876:	784a      	ldrb	r2, [r1, #1]
   12878:	1e52      	subs	r2, r2, #1
   1287a:	704a      	strb	r2, [r1, #1]
   1287c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   12880:	2200      	movs	r2, #0
   12882:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
   12886:	f7ff bf87 	b.w	12798 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
   1288a:	0000      	.short	0x0000
   1288c:	2000163e 	.word	0x2000163e

00012890 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
   12890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12894:	4604      	mov	r4, r0
   12896:	f100 0570 	add.w	r5, r0, #112	; 0x70
   1289a:	f04f 0901 	mov.w	r9, #1
   1289e:	b171      	cbz	r1, 128be <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
   128a0:	f104 0786 	add.w	r7, r4, #134	; 0x86
   128a4:	1e7e      	subs	r6, r7, #1
   128a6:	2901      	cmp	r1, #1
   128a8:	d021      	beq.n	128ee <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
   128aa:	2902      	cmp	r1, #2
   128ac:	d046      	beq.n	1293c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
   128ae:	2903      	cmp	r1, #3
   128b0:	d11b      	bne.n	128ea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
   128b2:	4639      	mov	r1, r7
   128b4:	4630      	mov	r0, r6
   128b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   128ba:	f007 bd3c 	b.w	1a336 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   128be:	f44f 7206 	mov.w	r2, #536	; 0x218
   128c2:	2100      	movs	r1, #0
   128c4:	f006 f9a1 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   128c8:	f004 fbdc 	bl	17084 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   128cc:	f644 112b 	movw	r1, #18731	; 0x492b
   128d0:	4008      	ands	r0, r1
   128d2:	f885 9015 	strb.w	r9, [r5, #21]
   128d6:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
   128da:	0a00      	lsrs	r0, r0, #8
   128dc:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
   128e0:	20fe      	movs	r0, #254	; 0xfe
   128e2:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
   128e6:	207f      	movs	r0, #127	; 0x7f
   128e8:	7268      	strb	r0, [r5, #9]
   128ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   128ee:	f04f 0800 	mov.w	r8, #0
   128f2:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
   128f6:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   128fa:	68e1      	ldr	r1, [r4, #12]
   128fc:	4814      	ldr	r0, [pc, #80]	; (12950 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
   128fe:	460a      	mov	r2, r1
   12900:	4408      	add	r0, r1
   12902:	fbb0 f0f1 	udiv	r0, r0, r1
   12906:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
   1290a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   1290e:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
   12912:	8ae3      	ldrh	r3, [r4, #22]
   12914:	4628      	mov	r0, r5
   12916:	f000 f81d 	bl	12954 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
   1291a:	4639      	mov	r1, r7
   1291c:	4630      	mov	r0, r6
   1291e:	f007 fd0a 	bl	1a336 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   12922:	f006 f8c2 	bl	18aaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   12926:	b118      	cbz	r0, 12930 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
   12928:	6920      	ldr	r0, [r4, #16]
   1292a:	f000 fb65 	bl	12ff8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
   1292e:	b110      	cbz	r0, 12936 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
   12930:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
   12934:	e7d9      	b.n	128ea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
   12936:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
   1293a:	e7d6      	b.n	128ea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
   1293c:	68c1      	ldr	r1, [r0, #12]
   1293e:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
   12942:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
   12946:	4628      	mov	r0, r5
   12948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1294c:	f000 b802 	b.w	12954 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
   12950:	01c9c37f 	.word	0x01c9c37f
   12954:	b530      	push	{r4, r5, lr}
   12956:	2400      	movs	r4, #0
   12958:	8684      	strh	r4, [r0, #52]	; 0x34
   1295a:	8f04      	ldrh	r4, [r0, #56]	; 0x38
   1295c:	4d13      	ldr	r5, [pc, #76]	; (129ac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
   1295e:	434c      	muls	r4, r1
   12960:	fbb4 f4f2 	udiv	r4, r4, r2
   12964:	8704      	strh	r4, [r0, #56]	; 0x38
   12966:	f242 7410 	movw	r4, #10000	; 0x2710
   1296a:	4363      	muls	r3, r4
   1296c:	fbb3 f3f2 	udiv	r3, r3, r2
   12970:	1c5b      	adds	r3, r3, #1
   12972:	b29b      	uxth	r3, r3
   12974:	fb03 f402 	mul.w	r4, r3, r2
   12978:	86c3      	strh	r3, [r0, #54]	; 0x36
   1297a:	42ac      	cmp	r4, r5
   1297c:	d901      	bls.n	12982 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
   1297e:	1e5b      	subs	r3, r3, #1
   12980:	86c3      	strh	r3, [r0, #54]	; 0x36
   12982:	4b0b      	ldr	r3, [pc, #44]	; (129b0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
   12984:	f240 2471 	movw	r4, #625	; 0x271
   12988:	fbb3 f3f2 	udiv	r3, r3, r2
   1298c:	1c5b      	adds	r3, r3, #1
   1298e:	8783      	strh	r3, [r0, #60]	; 0x3c
   12990:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   12992:	4363      	muls	r3, r4
   12994:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   12998:	1e5b      	subs	r3, r3, #1
   1299a:	fbb3 f3f2 	udiv	r3, r3, r2
   1299e:	62c3      	str	r3, [r0, #44]	; 0x2c
   129a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   129a2:	434b      	muls	r3, r1
   129a4:	fbb3 f1f2 	udiv	r1, r3, r2
   129a8:	6281      	str	r1, [r0, #40]	; 0x28
   129aa:	bd30      	pop	{r4, r5, pc}
   129ac:	01e84800 	.word	0x01e84800
   129b0:	02625a00 	.word	0x02625a00

000129b4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
   129b4:	b570      	push	{r4, r5, r6, lr}
   129b6:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
   129ba:	b28b      	uxth	r3, r1
   129bc:	7ac5      	ldrb	r5, [r0, #11]
   129be:	ea83 0102 	eor.w	r1, r3, r2
   129c2:	2200      	movs	r2, #0
   129c4:	b2cc      	uxtb	r4, r1
   129c6:	0a09      	lsrs	r1, r1, #8
   129c8:	fa94 f4a4 	rbit	r4, r4
   129cc:	fa91 f1a1 	rbit	r1, r1
   129d0:	0e24      	lsrs	r4, r4, #24
   129d2:	0e09      	lsrs	r1, r1, #24
   129d4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
   129d8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
   129dc:	1c52      	adds	r2, r2, #1
   129de:	4419      	add	r1, r3
   129e0:	b2d2      	uxtb	r2, r2
   129e2:	b289      	uxth	r1, r1
   129e4:	2a03      	cmp	r2, #3
   129e6:	d3ed      	bcc.n	129c4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
   129e8:	4059      	eors	r1, r3
   129ea:	2225      	movs	r2, #37	; 0x25
   129ec:	fbb1 f3f2 	udiv	r3, r1, r2
   129f0:	fb02 1213 	mls	r2, r2, r3, r1
   129f4:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
   129f8:	f002 0607 	and.w	r6, r2, #7
   129fc:	785b      	ldrb	r3, [r3, #1]
   129fe:	2401      	movs	r4, #1
   12a00:	fa04 f606 	lsl.w	r6, r4, r6
   12a04:	4233      	tst	r3, r6
   12a06:	d001      	beq.n	12a0c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
   12a08:	4610      	mov	r0, r2
   12a0a:	bd70      	pop	{r4, r5, r6, pc}
   12a0c:	434d      	muls	r5, r1
   12a0e:	0c29      	lsrs	r1, r5, #16
   12a10:	1c49      	adds	r1, r1, #1
   12a12:	b2c9      	uxtb	r1, r1
   12a14:	2200      	movs	r2, #0
   12a16:	1885      	adds	r5, r0, r2
   12a18:	79ab      	ldrb	r3, [r5, #6]
   12a1a:	428b      	cmp	r3, r1
   12a1c:	d312      	bcc.n	12a44 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
   12a1e:	f895 5001 	ldrb.w	r5, [r5, #1]
   12a22:	2300      	movs	r3, #0
   12a24:	fa04 f603 	lsl.w	r6, r4, r3
   12a28:	4235      	tst	r5, r6
   12a2a:	d001      	beq.n	12a30 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
   12a2c:	1e49      	subs	r1, r1, #1
   12a2e:	b2c9      	uxtb	r1, r1
   12a30:	b121      	cbz	r1, 12a3c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
   12a32:	1c5b      	adds	r3, r3, #1
   12a34:	b2db      	uxtb	r3, r3
   12a36:	2b08      	cmp	r3, #8
   12a38:	d3f4      	bcc.n	12a24 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
   12a3a:	e005      	b.n	12a48 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
   12a3c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   12a40:	b2c0      	uxtb	r0, r0
   12a42:	bd70      	pop	{r4, r5, r6, pc}
   12a44:	1ac9      	subs	r1, r1, r3
   12a46:	b2c9      	uxtb	r1, r1
   12a48:	1c52      	adds	r2, r2, #1
   12a4a:	b2d2      	uxtb	r2, r2
   12a4c:	2a05      	cmp	r2, #5
   12a4e:	d3e2      	bcc.n	12a16 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
   12a50:	f240 110d 	movw	r1, #269	; 0x10d
   12a54:	2046      	movs	r0, #70	; 0x46
   12a56:	f7fd ffdd 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12a5a:	0000      	movs	r0, r0
   12a5c:	b570      	push	{r4, r5, r6, lr}
   12a5e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
   12a62:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   12a66:	2401      	movs	r4, #1
   12a68:	fb03 2101 	mla	r1, r3, r1, r2
   12a6c:	2225      	movs	r2, #37	; 0x25
   12a6e:	fbb1 f3f2 	udiv	r3, r1, r2
   12a72:	fb02 1113 	mls	r1, r2, r3, r1
   12a76:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
   12a7a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
   12a7e:	f001 0307 	and.w	r3, r1, #7
   12a82:	7d92      	ldrb	r2, [r2, #22]
   12a84:	fa04 f303 	lsl.w	r3, r4, r3
   12a88:	421a      	tst	r2, r3
   12a8a:	d003      	beq.n	12a94 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
   12a8c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
   12a90:	2000      	movs	r0, #0
   12a92:	bd70      	pop	{r4, r5, r6, pc}
   12a94:	f890 2020 	ldrb.w	r2, [r0, #32]
   12a98:	fbb1 f3f2 	udiv	r3, r1, r2
   12a9c:	fb02 1113 	mls	r1, r2, r3, r1
   12aa0:	1c49      	adds	r1, r1, #1
   12aa2:	b2c9      	uxtb	r1, r1
   12aa4:	2300      	movs	r3, #0
   12aa6:	18c5      	adds	r5, r0, r3
   12aa8:	7eea      	ldrb	r2, [r5, #27]
   12aaa:	428a      	cmp	r2, r1
   12aac:	d311      	bcc.n	12ad2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
   12aae:	f895 5016 	ldrb.w	r5, [r5, #22]
   12ab2:	2200      	movs	r2, #0
   12ab4:	fa04 f602 	lsl.w	r6, r4, r2
   12ab8:	4235      	tst	r5, r6
   12aba:	d001      	beq.n	12ac0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
   12abc:	1e49      	subs	r1, r1, #1
   12abe:	b2c9      	uxtb	r1, r1
   12ac0:	b121      	cbz	r1, 12acc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
   12ac2:	1c52      	adds	r2, r2, #1
   12ac4:	b2d2      	uxtb	r2, r2
   12ac6:	2a08      	cmp	r2, #8
   12ac8:	d3f4      	bcc.n	12ab4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
   12aca:	e004      	b.n	12ad6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
   12acc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   12ad0:	e7dc      	b.n	12a8c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
   12ad2:	1a89      	subs	r1, r1, r2
   12ad4:	b2c9      	uxtb	r1, r1
   12ad6:	1c5b      	adds	r3, r3, #1
   12ad8:	b2db      	uxtb	r3, r3
   12ada:	2b05      	cmp	r3, #5
   12adc:	d3e3      	bcc.n	12aa6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
   12ade:	201f      	movs	r0, #31
   12ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

00012ae4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
   12ae4:	7841      	ldrb	r1, [r0, #1]
   12ae6:	b141      	cbz	r1, 12afa <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
   12ae8:	78c0      	ldrb	r0, [r0, #3]
   12aea:	2819      	cmp	r0, #25
   12aec:	d203      	bcs.n	12af6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
   12aee:	4a04      	ldr	r2, [pc, #16]	; (12b00 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
   12af0:	5c10      	ldrb	r0, [r2, r0]
   12af2:	4288      	cmp	r0, r1
   12af4:	d101      	bne.n	12afa <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
   12af6:	2001      	movs	r0, #1
   12af8:	4770      	bx	lr
   12afa:	2000      	movs	r0, #0
   12afc:	4770      	bx	lr
   12afe:	0000      	.short	0x0000
   12b00:	0001c9ec 	.word	0x0001c9ec

00012b04 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
   12b04:	b50c      	push	{r2, r3, lr}
   12b06:	a20b      	add	r2, pc, #44	; (adr r2, 12b34 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
   12b08:	e9d2 1200 	ldrd	r1, r2, [r2]
   12b0c:	e9cd 1200 	strd	r1, r2, [sp]
   12b10:	7901      	ldrb	r1, [r0, #4]
   12b12:	7940      	ldrb	r0, [r0, #5]
   12b14:	f001 0207 	and.w	r2, r1, #7
   12b18:	4669      	mov	r1, sp
   12b1a:	f81d 2002 	ldrb.w	r2, [sp, r2]
   12b1e:	2a01      	cmp	r2, #1
   12b20:	d804      	bhi.n	12b2c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
   12b22:	f000 0007 	and.w	r0, r0, #7
   12b26:	5c08      	ldrb	r0, [r1, r0]
   12b28:	2801      	cmp	r0, #1
   12b2a:	d901      	bls.n	12b30 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
   12b2c:	2000      	movs	r0, #0
   12b2e:	bd0c      	pop	{r2, r3, pc}
   12b30:	2001      	movs	r0, #1
   12b32:	bd0c      	pop	{r2, r3, pc}
   12b34:	02010100 	.word	0x02010100
   12b38:	03020201 	.word	0x03020201

00012b3c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
   12b3c:	b510      	push	{r4, lr}
   12b3e:	2201      	movs	r2, #1
   12b40:	70c1      	strb	r1, [r0, #3]
   12b42:	2919      	cmp	r1, #25
   12b44:	d202      	bcs.n	12b4c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
   12b46:	4a06      	ldr	r2, [pc, #24]	; (12b60 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
   12b48:	5c52      	ldrb	r2, [r2, r1]
   12b4a:	e006      	b.n	12b5a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
   12b4c:	29ff      	cmp	r1, #255	; 0xff
   12b4e:	d004      	beq.n	12b5a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
   12b50:	f240 31d5 	movw	r1, #981	; 0x3d5
   12b54:	202a      	movs	r0, #42	; 0x2a
   12b56:	f7fd ff5d 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12b5a:	7042      	strb	r2, [r0, #1]
   12b5c:	bd10      	pop	{r4, pc}
   12b5e:	0000      	.short	0x0000
   12b60:	0001c9ec 	.word	0x0001c9ec

00012b64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
   12b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12b68:	4c12      	ldr	r4, [pc, #72]	; (12bb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
   12b6a:	4607      	mov	r7, r0
   12b6c:	460e      	mov	r6, r1
   12b6e:	7da0      	ldrb	r0, [r4, #22]
   12b70:	b110      	cbz	r0, 12b78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
   12b72:	8b20      	ldrh	r0, [r4, #24]
   12b74:	2800      	cmp	r0, #0
   12b76:	d012      	beq.n	12b9e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
   12b78:	480e      	ldr	r0, [pc, #56]	; (12bb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
   12b7a:	3014      	adds	r0, #20
   12b7c:	4680      	mov	r8, r0
   12b7e:	f007 fd84 	bl	1a68a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
   12b82:	b9a8      	cbnz	r0, 12bb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
   12b84:	8aa5      	ldrh	r5, [r4, #20]
   12b86:	8aa0      	ldrh	r0, [r4, #20]
   12b88:	4632      	mov	r2, r6
   12b8a:	4639      	mov	r1, r7
   12b8c:	f007 fdc1 	bl	1a712 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
   12b90:	b138      	cbz	r0, 12ba2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
   12b92:	7da0      	ldrb	r0, [r4, #22]
   12b94:	b110      	cbz	r0, 12b9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
   12b96:	8b20      	ldrh	r0, [r4, #24]
   12b98:	1e40      	subs	r0, r0, #1
   12b9a:	8320      	strh	r0, [r4, #24]
   12b9c:	2001      	movs	r0, #1
   12b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ba2:	4640      	mov	r0, r8
   12ba4:	f007 fd71 	bl	1a68a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
   12ba8:	b910      	cbnz	r0, 12bb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
   12baa:	8aa0      	ldrh	r0, [r4, #20]
   12bac:	42a8      	cmp	r0, r5
   12bae:	d1ea      	bne.n	12b86 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
   12bb0:	2000      	movs	r0, #0
   12bb2:	e7f4      	b.n	12b9e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
   12bb4:	20001398 	.word	0x20001398
   12bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   12bbc:	468a      	mov	sl, r1
   12bbe:	4699      	mov	r9, r3
   12bc0:	4615      	mov	r5, r2
   12bc2:	4604      	mov	r4, r0
   12bc4:	a901      	add	r1, sp, #4
   12bc6:	f007 f9e9 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12bca:	bbe0      	cbnz	r0, 12c46 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
   12bcc:	9f02      	ldr	r7, [sp, #8]
   12bce:	f04f 0800 	mov.w	r8, #0
   12bd2:	3770      	adds	r7, #112	; 0x70
   12bd4:	b18d      	cbz	r5, 12bfa <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
   12bd6:	4620      	mov	r0, r4
   12bd8:	f7fe fb4c 	bl	11274 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   12bdc:	0004      	movs	r4, r0
   12bde:	d00f      	beq.n	12c00 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
   12be0:	4629      	mov	r1, r5
   12be2:	f006 fdeb 	bl	197bc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
   12be6:	0006      	movs	r6, r0
   12be8:	d003      	beq.n	12bf2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
   12bea:	481d      	ldr	r0, [pc, #116]	; (12c60 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
   12bec:	8840      	ldrh	r0, [r0, #2]
   12bee:	42a8      	cmp	r0, r5
   12bf0:	d208      	bcs.n	12c04 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
   12bf2:	2000      	movs	r0, #0
   12bf4:	b004      	add	sp, #16
   12bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12bfa:	2001      	movs	r0, #1
   12bfc:	7538      	strb	r0, [r7, #20]
   12bfe:	e029      	b.n	12c54 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
   12c00:	216e      	movs	r1, #110	; 0x6e
   12c02:	e02a      	b.n	12c5a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
   12c04:	4620      	mov	r0, r4
   12c06:	4631      	mov	r1, r6
   12c08:	aa03      	add	r2, sp, #12
   12c0a:	f006 fdd0 	bl	197ae <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
   12c0e:	9803      	ldr	r0, [sp, #12]
   12c10:	f8a0 8000 	strh.w	r8, [r0]
   12c14:	f880 8002 	strb.w	r8, [r0, #2]
   12c18:	7d39      	ldrb	r1, [r7, #20]
   12c1a:	b109      	cbz	r1, 12c20 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
   12c1c:	f04f 0a02 	mov.w	sl, #2
   12c20:	4651      	mov	r1, sl
   12c22:	f007 fcb3 	bl	1a58c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   12c26:	4631      	mov	r1, r6
   12c28:	2603      	movs	r6, #3
   12c2a:	4620      	mov	r0, r4
   12c2c:	464a      	mov	r2, r9
   12c2e:	462b      	mov	r3, r5
   12c30:	9600      	str	r6, [sp, #0]
   12c32:	f006 fca2 	bl	1957a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
   12c36:	4620      	mov	r0, r4
   12c38:	4629      	mov	r1, r5
   12c3a:	f006 fd5c 	bl	196f6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
   12c3e:	b158      	cbz	r0, 12c58 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
   12c40:	4644      	mov	r4, r8
   12c42:	a801      	add	r0, sp, #4
   12c44:	e000      	b.n	12c48 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
   12c46:	e005      	b.n	12c54 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
   12c48:	f007 fd40 	bl	1a6cc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   12c4c:	9802      	ldr	r0, [sp, #8]
   12c4e:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
   12c52:	753c      	strb	r4, [r7, #20]
   12c54:	2001      	movs	r0, #1
   12c56:	e7cd      	b.n	12bf4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
   12c58:	2184      	movs	r1, #132	; 0x84
   12c5a:	202b      	movs	r0, #43	; 0x2b
   12c5c:	f7fd feda 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12c60:	20001398 	.word	0x20001398

00012c64 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
   12c64:	4901      	ldr	r1, [pc, #4]	; (12c6c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
   12c66:	2001      	movs	r0, #1
   12c68:	7008      	strb	r0, [r1, #0]
   12c6a:	4770      	bx	lr
   12c6c:	2000028d 	.word	0x2000028d

00012c70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
   12c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c74:	0006      	movs	r6, r0
   12c76:	d00a      	beq.n	12c8e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
   12c78:	4825      	ldr	r0, [pc, #148]	; (12d10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
   12c7a:	7801      	ldrb	r1, [r0, #0]
   12c7c:	b151      	cbz	r1, 12c94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
   12c7e:	2100      	movs	r1, #0
   12c80:	7071      	strb	r1, [r6, #1]
   12c82:	2203      	movs	r2, #3
   12c84:	7032      	strb	r2, [r6, #0]
   12c86:	2201      	movs	r2, #1
   12c88:	7132      	strb	r2, [r6, #4]
   12c8a:	7001      	strb	r1, [r0, #0]
   12c8c:	e03a      	b.n	12d04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
   12c8e:	f240 21da 	movw	r1, #730	; 0x2da
   12c92:	e009      	b.n	12ca8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
   12c94:	4c1e      	ldr	r4, [pc, #120]	; (12d10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
   12c96:	1ce4      	adds	r4, r4, #3
   12c98:	7820      	ldrb	r0, [r4, #0]
   12c9a:	b940      	cbnz	r0, 12cae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
   12c9c:	1ca0      	adds	r0, r4, #2
   12c9e:	f007 fd81 	bl	1a7a4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
   12ca2:	b120      	cbz	r0, 12cae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
   12ca4:	f240 21e9 	movw	r1, #745	; 0x2e9
   12ca8:	2010      	movs	r0, #16
   12caa:	f7fd feb3 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12cae:	f8b4 8002 	ldrh.w	r8, [r4, #2]
   12cb2:	2000      	movs	r0, #0
   12cb4:	f7fe f898 	bl	10de8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   12cb8:	4f16      	ldr	r7, [pc, #88]	; (12d14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
   12cba:	4605      	mov	r5, r0
   12cbc:	6838      	ldr	r0, [r7, #0]
   12cbe:	b160      	cbz	r0, 12cda <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
   12cc0:	8860      	ldrh	r0, [r4, #2]
   12cc2:	42a8      	cmp	r0, r5
   12cc4:	d309      	bcc.n	12cda <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
   12cc6:	1b40      	subs	r0, r0, r5
   12cc8:	b2c0      	uxtb	r0, r0
   12cca:	2101      	movs	r1, #1
   12ccc:	f006 ff1e 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   12cd0:	b158      	cbz	r0, 12cea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
   12cd2:	4631      	mov	r1, r6
   12cd4:	f000 f84e 	bl	12d74 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
   12cd8:	e006      	b.n	12ce8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
   12cda:	480f      	ldr	r0, [pc, #60]	; (12d18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
   12cdc:	6800      	ldr	r0, [r0, #0]
   12cde:	b120      	cbz	r0, 12cea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
   12ce0:	8860      	ldrh	r0, [r4, #2]
   12ce2:	4631      	mov	r1, r6
   12ce4:	f000 f8de 	bl	12ea4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
   12ce8:	b960      	cbnz	r0, 12d04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
   12cea:	1ca0      	adds	r0, r4, #2
   12cec:	f007 fd5a 	bl	1a7a4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
   12cf0:	b910      	cbnz	r0, 12cf8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
   12cf2:	8861      	ldrh	r1, [r4, #2]
   12cf4:	4541      	cmp	r1, r8
   12cf6:	d1e1      	bne.n	12cbc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
   12cf8:	4808      	ldr	r0, [pc, #32]	; (12d1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
   12cfa:	6801      	ldr	r1, [r0, #0]
   12cfc:	b129      	cbz	r1, 12d0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
   12cfe:	4630      	mov	r0, r6
   12d00:	4788      	blx	r1
   12d02:	b110      	cbz	r0, 12d0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
   12d04:	2001      	movs	r0, #1
   12d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d0a:	2000      	movs	r0, #0
   12d0c:	e7fb      	b.n	12d06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
   12d0e:	0000      	.short	0x0000
   12d10:	2000028d 	.word	0x2000028d
   12d14:	200000f0 	.word	0x200000f0
   12d18:	200000f4 	.word	0x200000f4
   12d1c:	200000f8 	.word	0x200000f8

00012d20 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
   12d20:	4901      	ldr	r1, [pc, #4]	; (12d28 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
   12d22:	7008      	strb	r0, [r1, #0]
   12d24:	f000 b95c 	b.w	12fe0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
   12d28:	2000028c 	.word	0x2000028c

00012d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
   12d2c:	4801      	ldr	r0, [pc, #4]	; (12d34 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
   12d2e:	7800      	ldrb	r0, [r0, #0]
   12d30:	f7fd bc94 	b.w	1065c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   12d34:	2000028c 	.word	0x2000028c

00012d38 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
   12d38:	4902      	ldr	r1, [pc, #8]	; (12d44 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
   12d3a:	4801      	ldr	r0, [pc, #4]	; (12d40 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
   12d3c:	6008      	str	r0, [r1, #0]
   12d3e:	4770      	bx	lr
   12d40:	0001314d 	.word	0x0001314d
   12d44:	200000f0 	.word	0x200000f0

00012d48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
   12d48:	4905      	ldr	r1, [pc, #20]	; (12d60 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
   12d4a:	4804      	ldr	r0, [pc, #16]	; (12d5c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
   12d4c:	6008      	str	r0, [r1, #0]
   12d4e:	4906      	ldr	r1, [pc, #24]	; (12d68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
   12d50:	4804      	ldr	r0, [pc, #16]	; (12d64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
   12d52:	6008      	str	r0, [r1, #0]
   12d54:	4906      	ldr	r1, [pc, #24]	; (12d70 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
   12d56:	4805      	ldr	r0, [pc, #20]	; (12d6c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
   12d58:	6008      	str	r0, [r1, #0]
   12d5a:	4770      	bx	lr
   12d5c:	0001314d 	.word	0x0001314d
   12d60:	200000f0 	.word	0x200000f0
   12d64:	00014811 	.word	0x00014811
   12d68:	200000f4 	.word	0x200000f4
   12d6c:	000118ad 	.word	0x000118ad
   12d70:	200000f8 	.word	0x200000f8
   12d74:	b570      	push	{r4, r5, r6, lr}
   12d76:	0005      	movs	r5, r0
   12d78:	460c      	mov	r4, r1
   12d7a:	d02e      	beq.n	12dda <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
   12d7c:	4818      	ldr	r0, [pc, #96]	; (12de0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
   12d7e:	6802      	ldr	r2, [r0, #0]
   12d80:	b35a      	cbz	r2, 12dda <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
   12d82:	4628      	mov	r0, r5
   12d84:	4790      	blx	r2
   12d86:	b340      	cbz	r0, 12dda <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
   12d88:	7820      	ldrb	r0, [r4, #0]
   12d8a:	2811      	cmp	r0, #17
   12d8c:	d002      	beq.n	12d94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
   12d8e:	2814      	cmp	r0, #20
   12d90:	d003      	beq.n	12d9a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
   12d92:	e020      	b.n	12dd6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12d94:	7920      	ldrb	r0, [r4, #4]
   12d96:	b1f0      	cbz	r0, 12dd6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12d98:	e00a      	b.n	12db0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
   12d9a:	7920      	ldrb	r0, [r4, #4]
   12d9c:	b120      	cbz	r0, 12da8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
   12d9e:	4628      	mov	r0, r5
   12da0:	f007 ff14 	bl	1abcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   12da4:	b120      	cbz	r0, 12db0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
   12da6:	e016      	b.n	12dd6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12da8:	490e      	ldr	r1, [pc, #56]	; (12de4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
   12daa:	2000      	movs	r0, #0
   12dac:	7008      	strb	r0, [r1, #0]
   12dae:	e012      	b.n	12dd6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12db0:	88e4      	ldrh	r4, [r4, #6]
   12db2:	2100      	movs	r1, #0
   12db4:	4620      	mov	r0, r4
   12db6:	f006 fea9 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   12dba:	b160      	cbz	r0, 12dd6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12dbc:	8800      	ldrh	r0, [r0, #0]
   12dbe:	f007 f82d 	bl	19e1c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   12dc2:	2100      	movs	r1, #0
   12dc4:	4620      	mov	r0, r4
   12dc6:	f7fe f8ad 	bl	10f24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   12dca:	b120      	cbz	r0, 12dd6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12dcc:	f240 1171 	movw	r1, #369	; 0x171
   12dd0:	2010      	movs	r0, #16
   12dd2:	f7fd fe1f 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12dd6:	2001      	movs	r0, #1
   12dd8:	bd70      	pop	{r4, r5, r6, pc}
   12dda:	2000      	movs	r0, #0
   12ddc:	bd70      	pop	{r4, r5, r6, pc}
   12dde:	0000      	.short	0x0000
   12de0:	200000f0 	.word	0x200000f0
   12de4:	20000290 	.word	0x20000290
   12de8:	b510      	push	{r4, lr}
   12dea:	492d      	ldr	r1, [pc, #180]	; (12ea0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
   12dec:	b086      	sub	sp, #24
   12dee:	7c8a      	ldrb	r2, [r1, #18]
   12df0:	7801      	ldrb	r1, [r0, #0]
   12df2:	07d3      	lsls	r3, r2, #31
   12df4:	d101      	bne.n	12dfa <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
   12df6:	2919      	cmp	r1, #25
   12df8:	d004      	beq.n	12e04 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
   12dfa:	2918      	cmp	r1, #24
   12dfc:	d01f      	beq.n	12e3e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
   12dfe:	2912      	cmp	r1, #18
   12e00:	d046      	beq.n	12e90 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
   12e02:	e04a      	b.n	12e9a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
   12e04:	8880      	ldrh	r0, [r0, #4]
   12e06:	f8ad 0000 	strh.w	r0, [sp]
   12e0a:	a902      	add	r1, sp, #8
   12e0c:	f007 f8c6 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12e10:	b110      	cbz	r0, 12e18 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
   12e12:	f44f 71c4 	mov.w	r1, #392	; 0x188
   12e16:	e035      	b.n	12e84 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
   12e18:	9803      	ldr	r0, [sp, #12]
   12e1a:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   12e1e:	f88d 1002 	strb.w	r1, [sp, #2]
   12e22:	7841      	ldrb	r1, [r0, #1]
   12e24:	f88d 1003 	strb.w	r1, [sp, #3]
   12e28:	8840      	ldrh	r0, [r0, #2]
   12e2a:	f8ad 0004 	strh.w	r0, [sp, #4]
   12e2e:	2102      	movs	r1, #2
   12e30:	4668      	mov	r0, sp
   12e32:	f009 f9a6 	bl	1c182 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   12e36:	b340      	cbz	r0, 12e8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
   12e38:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   12e3c:	e022      	b.n	12e84 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
   12e3e:	0791      	lsls	r1, r2, #30
   12e40:	d42b      	bmi.n	12e9a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
   12e42:	8884      	ldrh	r4, [r0, #4]
   12e44:	a903      	add	r1, sp, #12
   12e46:	4620      	mov	r0, r4
   12e48:	f008 ffba 	bl	1bdc0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
   12e4c:	b110      	cbz	r0, 12e54 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
   12e4e:	f240 11a5 	movw	r1, #421	; 0x1a5
   12e52:	e017      	b.n	12e84 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
   12e54:	f8ad 4000 	strh.w	r4, [sp]
   12e58:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   12e5c:	f8ad 0002 	strh.w	r0, [sp, #2]
   12e60:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   12e64:	f8ad 0004 	strh.w	r0, [sp, #4]
   12e68:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   12e6c:	f8ad 0006 	strh.w	r0, [sp, #6]
   12e70:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   12e74:	f8ad 0008 	strh.w	r0, [sp, #8]
   12e78:	4668      	mov	r0, sp
   12e7a:	f009 f81f 	bl	1bebc <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
   12e7e:	b120      	cbz	r0, 12e8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
   12e80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   12e84:	2010      	movs	r0, #16
   12e86:	f7fd fdc5 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12e8a:	2001      	movs	r0, #1
   12e8c:	b006      	add	sp, #24
   12e8e:	bd10      	pop	{r4, pc}
   12e90:	0751      	lsls	r1, r2, #29
   12e92:	d402      	bmi.n	12e9a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
   12e94:	7b80      	ldrb	r0, [r0, #14]
   12e96:	07c0      	lsls	r0, r0, #31
   12e98:	d0f7      	beq.n	12e8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
   12e9a:	2000      	movs	r0, #0
   12e9c:	e7f6      	b.n	12e8c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
   12e9e:	0000      	.short	0x0000
   12ea0:	20001398 	.word	0x20001398
   12ea4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ea8:	b087      	sub	sp, #28
   12eaa:	460c      	mov	r4, r1
   12eac:	a902      	add	r1, sp, #8
   12eae:	9807      	ldr	r0, [sp, #28]
   12eb0:	f007 f874 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12eb4:	2800      	cmp	r0, #0
   12eb6:	d17d      	bne.n	12fb4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
   12eb8:	f8df 9120 	ldr.w	r9, [pc, #288]	; 12fdc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x294>
   12ebc:	f04f 0a01 	mov.w	sl, #1
   12ec0:	4680      	mov	r8, r0
   12ec2:	9803      	ldr	r0, [sp, #12]
   12ec4:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
   12ec8:	2800      	cmp	r0, #0
   12eca:	d00c      	beq.n	12ee6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
   12ecc:	f8d9 2000 	ldr.w	r2, [r9]
   12ed0:	b162      	cbz	r2, 12eec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
   12ed2:	4621      	mov	r1, r4
   12ed4:	9807      	ldr	r0, [sp, #28]
   12ed6:	4790      	blx	r2
   12ed8:	b140      	cbz	r0, 12eec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
   12eda:	4620      	mov	r0, r4
   12edc:	f7ff ff84 	bl	12de8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
   12ee0:	2800      	cmp	r0, #0
   12ee2:	d1ee      	bne.n	12ec2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x17a>
   12ee4:	2001      	movs	r0, #1
   12ee6:	b009      	add	sp, #36	; 0x24
   12ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12eec:	9d03      	ldr	r5, [sp, #12]
   12eee:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
   12ef2:	3570      	adds	r5, #112	; 0x70
   12ef4:	b950      	cbnz	r0, 12f0c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
   12ef6:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
   12efa:	f88d 0004 	strb.w	r0, [sp, #4]
   12efe:	9801      	ldr	r0, [sp, #4]
   12f00:	9001      	str	r0, [sp, #4]
   12f02:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12f06:	b108      	cbz	r0, 12f0c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
   12f08:	2001      	movs	r0, #1
   12f0a:	e000      	b.n	12f0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c6>
   12f0c:	2000      	movs	r0, #0
   12f0e:	4683      	mov	fp, r0
   12f10:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
   12f14:	b1c0      	cbz	r0, 12f48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
   12f16:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
   12f1a:	0780      	lsls	r0, r0, #30
   12f1c:	d514      	bpl.n	12f48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
   12f1e:	f884 8001 	strb.w	r8, [r4, #1]
   12f22:	f884 a000 	strb.w	sl, [r4]
   12f26:	f884 8004 	strb.w	r8, [r4, #4]
   12f2a:	9907      	ldr	r1, [sp, #28]
   12f2c:	f8a4 1005 	strh.w	r1, [r4, #5]
   12f30:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
   12f34:	71e1      	strb	r1, [r4, #7]
   12f36:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
   12f3a:	8121      	strh	r1, [r4, #8]
   12f3c:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
   12f40:	8161      	strh	r1, [r4, #10]
   12f42:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
   12f46:	e7c8      	b.n	12eda <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
   12f48:	9807      	ldr	r0, [sp, #28]
   12f4a:	f7fe f993 	bl	11274 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   12f4e:	0007      	movs	r7, r0
   12f50:	d00d      	beq.n	12f6e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x226>
   12f52:	f006 fbf4 	bl	1973e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
   12f56:	0006      	movs	r6, r0
   12f58:	d015      	beq.n	12f86 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23e>
   12f5a:	f884 8001 	strb.w	r8, [r4, #1]
   12f5e:	200d      	movs	r0, #13
   12f60:	7020      	strb	r0, [r4, #0]
   12f62:	9807      	ldr	r0, [sp, #28]
   12f64:	80e0      	strh	r0, [r4, #6]
   12f66:	8126      	strh	r6, [r4, #8]
   12f68:	f884 a004 	strb.w	sl, [r4, #4]
   12f6c:	e007      	b.n	12f7e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
   12f6e:	f240 2133 	movw	r1, #563	; 0x233
   12f72:	e02d      	b.n	12fd0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>
   12f74:	2100      	movs	r1, #0
   12f76:	4638      	mov	r0, r7
   12f78:	460a      	mov	r2, r1
   12f7a:	f006 fcf6 	bl	1996a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
   12f7e:	1e76      	subs	r6, r6, #1
   12f80:	b2b6      	uxth	r6, r6
   12f82:	d2f7      	bcs.n	12f74 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>
   12f84:	e7a9      	b.n	12eda <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
   12f86:	9807      	ldr	r0, [sp, #28]
   12f88:	f7fe f95e 	bl	11248 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   12f8c:	b1f0      	cbz	r0, 12fcc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x284>
   12f8e:	f1bb 0f00 	cmp.w	fp, #0
   12f92:	d020      	beq.n	12fd6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
   12f94:	f006 fb08 	bl	195a8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   12f98:	b160      	cbz	r0, 12fb4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
   12f9a:	9807      	ldr	r0, [sp, #28]
   12f9c:	f006 ff3e 	bl	19e1c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   12fa0:	2100      	movs	r1, #0
   12fa2:	9807      	ldr	r0, [sp, #28]
   12fa4:	f7fd ffbe 	bl	10f24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   12fa8:	f884 8001 	strb.w	r8, [r4, #1]
   12fac:	210a      	movs	r1, #10
   12fae:	4640      	mov	r0, r8
   12fb0:	7021      	strb	r1, [r4, #0]
   12fb2:	e000      	b.n	12fb6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26e>
   12fb4:	e00f      	b.n	12fd6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
   12fb6:	f884 8004 	strb.w	r8, [r4, #4]
   12fba:	9907      	ldr	r1, [sp, #28]
   12fbc:	f8a4 1005 	strh.w	r1, [r4, #5]
   12fc0:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
   12fc4:	71e1      	strb	r1, [r4, #7]
   12fc6:	3524      	adds	r5, #36	; 0x24
   12fc8:	7028      	strb	r0, [r5, #0]
   12fca:	e786      	b.n	12eda <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
   12fcc:	f240 2151 	movw	r1, #593	; 0x251
   12fd0:	2010      	movs	r0, #16
   12fd2:	f7fd fd1f 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12fd6:	2000      	movs	r0, #0
   12fd8:	e785      	b.n	12ee6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
   12fda:	0000      	.short	0x0000
   12fdc:	200000f4 	.word	0x200000f4
   12fe0:	4804      	ldr	r0, [pc, #16]	; (12ff4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2ac>)
   12fe2:	2100      	movs	r1, #0
   12fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12fe8:	7001      	strb	r1, [r0, #0]
   12fea:	8042      	strh	r2, [r0, #2]
   12fec:	1f00      	subs	r0, r0, #4
   12fee:	f8a0 1001 	strh.w	r1, [r0, #1]
   12ff2:	4770      	bx	lr
   12ff4:	20000290 	.word	0x20000290

00012ff8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
   12ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ffa:	f06f 021f 	mvn.w	r2, #31
   12ffe:	0c01      	lsrs	r1, r0, #16
   13000:	ea02 2690 	and.w	r6, r2, r0, lsr #10
   13004:	251f      	movs	r5, #31
   13006:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
   1300a:	3854      	subs	r0, #84	; 0x54
   1300c:	d00d      	beq.n	1302a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   1300e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
   13012:	3855      	subs	r0, #85	; 0x55
   13014:	d009      	beq.n	1302a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   13016:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
   1301a:	38aa      	subs	r0, #170	; 0xaa
   1301c:	d005      	beq.n	1302a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   1301e:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
   13022:	38aa      	subs	r0, #170	; 0xaa
   13024:	d001      	beq.n	1302a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   13026:	2001      	movs	r0, #1
   13028:	e000      	b.n	1302c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
   1302a:	2000      	movs	r0, #0
   1302c:	2200      	movs	r2, #0
   1302e:	4613      	mov	r3, r2
   13030:	ea4f 0402 	mov.w	r4, r2
   13034:	ea82 0701 	eor.w	r7, r2, r1
   13038:	43ff      	mvns	r7, r7
   1303a:	431f      	orrs	r7, r3
   1303c:	1c7f      	adds	r7, r7, #1
   1303e:	d00f      	beq.n	13060 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
   13040:	f006 0701 	and.w	r7, r6, #1
   13044:	0852      	lsrs	r2, r2, #1
   13046:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
   1304a:	f005 0701 	and.w	r7, r5, #1
   1304e:	085b      	lsrs	r3, r3, #1
   13050:	0876      	lsrs	r6, r6, #1
   13052:	086d      	lsrs	r5, r5, #1
   13054:	1c64      	adds	r4, r4, #1
   13056:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
   1305a:	2c16      	cmp	r4, #22
   1305c:	d3ea      	bcc.n	13034 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
   1305e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13060:	2000      	movs	r0, #0
   13062:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013064 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
   13064:	b510      	push	{r4, lr}
   13066:	e9d0 2100 	ldrd	r2, r1, [r0]
   1306a:	4b09      	ldr	r3, [pc, #36]	; (13090 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
   1306c:	4c09      	ldr	r4, [pc, #36]	; (13094 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
   1306e:	4353      	muls	r3, r2
   13070:	4354      	muls	r4, r2
   13072:	4051      	eors	r1, r2
   13074:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
   13078:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
   1307c:	ea4f 41f1 	mov.w	r1, r1, ror #19
   13080:	e9c0 2100 	strd	r2, r1, [r0]
   13084:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
   13088:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1308c:	4618      	mov	r0, r3
   1308e:	bd10      	pop	{r4, pc}
   13090:	c6ef3760 	.word	0xc6ef3760
   13094:	9e3779bb 	.word	0x9e3779bb

00013098 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
   13098:	b570      	push	{r4, r5, r6, lr}
   1309a:	4604      	mov	r4, r0
   1309c:	7c00      	ldrb	r0, [r0, #16]
   1309e:	b300      	cbz	r0, 130e2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
   130a0:	2802      	cmp	r0, #2
   130a2:	d01e      	beq.n	130e2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
   130a4:	f05f 0001 	movs.w	r0, #1
   130a8:	f104 0149 	add.w	r1, r4, #73	; 0x49
   130ac:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
   130b0:	460d      	mov	r5, r1
   130b2:	b1c0      	cbz	r0, 130e6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
   130b4:	7de0      	ldrb	r0, [r4, #23]
   130b6:	b1f0      	cbz	r0, 130f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
   130b8:	f8d4 0011 	ldr.w	r0, [r4, #17]
   130bc:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
   130c0:	f8b4 0015 	ldrh.w	r0, [r4, #21]
   130c4:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
   130c8:	7c20      	ldrb	r0, [r4, #16]
   130ca:	f007 fce2 	bl	1aa92 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
   130ce:	7620      	strb	r0, [r4, #24]
   130d0:	2008      	movs	r0, #8
   130d2:	7660      	strb	r0, [r4, #25]
   130d4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   130d8:	4629      	mov	r1, r5
   130da:	f007 fcc6 	bl	1aa6a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
   130de:	b9a8      	cbnz	r0, 1310c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
   130e0:	e00e      	b.n	13100 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
   130e2:	2000      	movs	r0, #0
   130e4:	e7e0      	b.n	130a8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
   130e6:	2000      	movs	r0, #0
   130e8:	f7fe fb92 	bl	11810 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   130ec:	2800      	cmp	r0, #0
   130ee:	d1eb      	bne.n	130c8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
   130f0:	f240 41aa 	movw	r1, #1194	; 0x4aa
   130f4:	e001      	b.n	130fa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
   130f6:	f240 41ae 	movw	r1, #1198	; 0x4ae
   130fa:	202d      	movs	r0, #45	; 0x2d
   130fc:	f7fd fc8a 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13100:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   13104:	4629      	mov	r1, r5
   13106:	f007 fcb9 	bl	1aa7c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
   1310a:	b100      	cbz	r0, 1310e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
   1310c:	2001      	movs	r0, #1
   1310e:	76a0      	strb	r0, [r4, #26]
   13110:	7e20      	ldrb	r0, [r4, #24]
   13112:	b130      	cbz	r0, 13122 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
   13114:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
   13118:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1311c:	f006 fefb 	bl	19f16 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   13120:	7660      	strb	r0, [r4, #25]
   13122:	2500      	movs	r5, #0
   13124:	6425      	str	r5, [r4, #64]	; 0x40
   13126:	f005 fb81 	bl	1882c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   1312a:	6460      	str	r0, [r4, #68]	; 0x44
   1312c:	2100      	movs	r1, #0
   1312e:	4620      	mov	r0, r4
   13130:	f007 fdce 	bl	1acd0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
   13134:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
   13138:	78a0      	ldrb	r0, [r4, #2]
   1313a:	0740      	lsls	r0, r0, #29
   1313c:	d505      	bpl.n	1314a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
   1313e:	4620      	mov	r0, r4
   13140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13144:	2100      	movs	r1, #0
   13146:	f000 bdff 	b.w	13d48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
   1314a:	bd70      	pop	{r4, r5, r6, pc}

0001314c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
   1314c:	b508      	push	{r3, lr}
   1314e:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
   13152:	f88d 2000 	strb.w	r2, [sp]
   13156:	9a00      	ldr	r2, [sp, #0]
   13158:	9200      	str	r2, [sp, #0]
   1315a:	f89d 3000 	ldrb.w	r3, [sp]
   1315e:	2200      	movs	r2, #0
   13160:	b163      	cbz	r3, 1317c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
   13162:	704a      	strb	r2, [r1, #1]
   13164:	2317      	movs	r3, #23
   13166:	700b      	strb	r3, [r1, #0]
   13168:	f850 3f95 	ldr.w	r3, [r0, #149]!
   1316c:	604b      	str	r3, [r1, #4]
   1316e:	6843      	ldr	r3, [r0, #4]
   13170:	608b      	str	r3, [r1, #8]
   13172:	7a03      	ldrb	r3, [r0, #8]
   13174:	730b      	strb	r3, [r1, #12]
   13176:	f800 2c01 	strb.w	r2, [r0, #-1]
   1317a:	e03b      	b.n	131f4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
   1317c:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
   13180:	f88d 3000 	strb.w	r3, [sp]
   13184:	9b00      	ldr	r3, [sp, #0]
   13186:	9300      	str	r3, [sp, #0]
   13188:	f89d 3000 	ldrb.w	r3, [sp]
   1318c:	b143      	cbz	r3, 131a0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
   1318e:	704a      	strb	r2, [r1, #1]
   13190:	2305      	movs	r3, #5
   13192:	700b      	strb	r3, [r1, #0]
   13194:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   13198:	604b      	str	r3, [r1, #4]
   1319a:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
   1319e:	e029      	b.n	131f4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
   131a0:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   131a4:	f88d 3000 	strb.w	r3, [sp]
   131a8:	9b00      	ldr	r3, [sp, #0]
   131aa:	9300      	str	r3, [sp, #0]
   131ac:	f89d 3000 	ldrb.w	r3, [sp]
   131b0:	b11b      	cbz	r3, 131ba <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
   131b2:	bf00      	nop
   131b4:	f007 fd63 	bl	1ac7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
   131b8:	e01c      	b.n	131f4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
   131ba:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
   131be:	f88d 3000 	strb.w	r3, [sp]
   131c2:	9b00      	ldr	r3, [sp, #0]
   131c4:	9300      	str	r3, [sp, #0]
   131c6:	f89d 3000 	ldrb.w	r3, [sp]
   131ca:	b1ab      	cbz	r3, 131f8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
   131cc:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   131d0:	f88d 3000 	strb.w	r3, [sp]
   131d4:	9b00      	ldr	r3, [sp, #0]
   131d6:	9300      	str	r3, [sp, #0]
   131d8:	f89d 3000 	ldrb.w	r3, [sp]
   131dc:	2b00      	cmp	r3, #0
   131de:	d1e9      	bne.n	131b4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
   131e0:	704a      	strb	r2, [r1, #1]
   131e2:	2314      	movs	r3, #20
   131e4:	700b      	strb	r3, [r1, #0]
   131e6:	f850 3f88 	ldr.w	r3, [r0, #136]!
   131ea:	604b      	str	r3, [r1, #4]
   131ec:	8883      	ldrh	r3, [r0, #4]
   131ee:	810b      	strh	r3, [r1, #8]
   131f0:	f800 2c02 	strb.w	r2, [r0, #-2]
   131f4:	2001      	movs	r0, #1
   131f6:	bd08      	pop	{r3, pc}
   131f8:	2000      	movs	r0, #0
   131fa:	bd08      	pop	{r3, pc}

000131fc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
   131fc:	b530      	push	{r4, r5, lr}
   131fe:	460c      	mov	r4, r1
   13200:	b08d      	sub	sp, #52	; 0x34
   13202:	4605      	mov	r5, r0
   13204:	4601      	mov	r1, r0
   13206:	2220      	movs	r2, #32
   13208:	a802      	add	r0, sp, #8
   1320a:	f005 fc84 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1320e:	a80a      	add	r0, sp, #40	; 0x28
   13210:	f007 fe0b 	bl	1ae2a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
   13214:	7aa0      	ldrb	r0, [r4, #10]
   13216:	f88d 0018 	strb.w	r0, [sp, #24]
   1321a:	7820      	ldrb	r0, [r4, #0]
   1321c:	f88d 0008 	strb.w	r0, [sp, #8]
   13220:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   13224:	f8ad 0000 	strh.w	r0, [sp]
   13228:	f89d 0000 	ldrb.w	r0, [sp]
   1322c:	f000 0101 	and.w	r1, r0, #1
   13230:	f3c0 0240 	ubfx	r2, r0, #1, #1
   13234:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
   13238:	f3c0 0280 	ubfx	r2, r0, #2, #1
   1323c:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
   13240:	f3c0 02c0 	ubfx	r2, r0, #3, #1
   13244:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
   13248:	f3c0 1200 	ubfx	r2, r0, #4, #1
   1324c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   13250:	f3c0 1240 	ubfx	r2, r0, #5, #1
   13254:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
   13258:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1325c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
   13260:	f8ad 000a 	strh.w	r0, [sp, #10]
   13264:	7d20      	ldrb	r0, [r4, #20]
   13266:	2801      	cmp	r0, #1
   13268:	d006      	beq.n	13278 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
   1326a:	2802      	cmp	r0, #2
   1326c:	d004      	beq.n	13278 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
   1326e:	f240 2175 	movw	r1, #629	; 0x275
   13272:	2006      	movs	r0, #6
   13274:	f7fd fbce 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13278:	f88d 000c 	strb.w	r0, [sp, #12]
   1327c:	7a61      	ldrb	r1, [r4, #9]
   1327e:	a80a      	add	r0, sp, #40	; 0x28
   13280:	f007 fdba 	bl	1adf8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
   13284:	7d20      	ldrb	r0, [r4, #20]
   13286:	2101      	movs	r1, #1
   13288:	2802      	cmp	r0, #2
   1328a:	d102      	bne.n	13292 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
   1328c:	7d60      	ldrb	r0, [r4, #21]
   1328e:	1c40      	adds	r0, r0, #1
   13290:	b2c1      	uxtb	r1, r0
   13292:	7ea0      	ldrb	r0, [r4, #26]
   13294:	1c40      	adds	r0, r0, #1
   13296:	b2c2      	uxtb	r2, r0
   13298:	a80a      	add	r0, sp, #40	; 0x28
   1329a:	f007 fd74 	bl	1ad86 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
   1329e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   132a2:	0700      	lsls	r0, r0, #28
   132a4:	d501      	bpl.n	132aa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
   132a6:	2000      	movs	r0, #0
   132a8:	e020      	b.n	132ec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
   132aa:	a80a      	add	r0, sp, #40	; 0x28
   132ac:	f007 fd7d 	bl	1adaa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   132b0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   132b4:	2228      	movs	r2, #40	; 0x28
   132b6:	f000 fded 	bl	13e94 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
   132ba:	f240 2171 	movw	r1, #625	; 0x271
   132be:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
   132c2:	fbb0 f0f1 	udiv	r0, r0, r1
   132c6:	4348      	muls	r0, r1
   132c8:	f8d4 1002 	ldr.w	r1, [r4, #2]
   132cc:	f240 2371 	movw	r3, #625	; 0x271
   132d0:	0a0a      	lsrs	r2, r1, #8
   132d2:	f240 2171 	movw	r1, #625	; 0x271
   132d6:	434a      	muls	r2, r1
   132d8:	f8d4 1005 	ldr.w	r1, [r4, #5]
   132dc:	0a09      	lsrs	r1, r1, #8
   132de:	4359      	muls	r1, r3
   132e0:	4290      	cmp	r0, r2
   132e2:	d801      	bhi.n	132e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
   132e4:	9204      	str	r2, [sp, #16]
   132e6:	e004      	b.n	132f2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
   132e8:	4288      	cmp	r0, r1
   132ea:	d801      	bhi.n	132f0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
   132ec:	9004      	str	r0, [sp, #16]
   132ee:	e000      	b.n	132f2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
   132f0:	9104      	str	r1, [sp, #16]
   132f2:	7ca0      	ldrb	r0, [r4, #18]
   132f4:	f88d 0017 	strb.w	r0, [sp, #23]
   132f8:	7e20      	ldrb	r0, [r4, #24]
   132fa:	2801      	cmp	r0, #1
   132fc:	d000      	beq.n	13300 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
   132fe:	2000      	movs	r0, #0
   13300:	f88d 0014 	strb.w	r0, [sp, #20]
   13304:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   13306:	f006 fcbf 	bl	19c88 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
   1330a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   1330c:	f006 fd5f 	bl	19dce <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
   13310:	2220      	movs	r2, #32
   13312:	a902      	add	r1, sp, #8
   13314:	4628      	mov	r0, r5
   13316:	f005 fbfe 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1331a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1331c:	6228      	str	r0, [r5, #32]
   1331e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   13322:	84a8      	strh	r0, [r5, #36]	; 0x24
   13324:	7ae0      	ldrb	r0, [r4, #11]
   13326:	b168      	cbz	r0, 13344 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
   13328:	2802      	cmp	r0, #2
   1332a:	d00b      	beq.n	13344 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
   1332c:	f05f 0001 	movs.w	r0, #1
   13330:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
   13334:	68e0      	ldr	r0, [r4, #12]
   13336:	6528      	str	r0, [r5, #80]	; 0x50
   13338:	8a20      	ldrh	r0, [r4, #16]
   1333a:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
   1333e:	b00d      	add	sp, #52	; 0x34
   13340:	2000      	movs	r0, #0
   13342:	bd30      	pop	{r4, r5, pc}
   13344:	2000      	movs	r0, #0
   13346:	e7f3      	b.n	13330 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00013348 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
   13348:	4a0a      	ldr	r2, [pc, #40]	; (13374 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
   1334a:	b510      	push	{r4, lr}
   1334c:	2100      	movs	r1, #0
   1334e:	7011      	strb	r1, [r2, #0]
   13350:	4c09      	ldr	r4, [pc, #36]	; (13378 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
   13352:	6060      	str	r0, [r4, #4]
   13354:	f000 f822 	bl	1339c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   13358:	b110      	cbz	r0, 13360 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
   1335a:	f240 312a 	movw	r1, #810	; 0x32a
   1335e:	e004      	b.n	1336a <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
   13360:	68a0      	ldr	r0, [r4, #8]
   13362:	2800      	cmp	r0, #0
   13364:	d104      	bne.n	13370 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
   13366:	f240 312d 	movw	r1, #813	; 0x32d
   1336a:	202d      	movs	r0, #45	; 0x2d
   1336c:	f7fd fb52 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13370:	bd10      	pop	{r4, pc}
   13372:	0000      	.short	0x0000
   13374:	200013b4 	.word	0x200013b4
   13378:	200000fc 	.word	0x200000fc

0001337c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
   1337c:	4902      	ldr	r1, [pc, #8]	; (13388 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
   1337e:	4801      	ldr	r0, [pc, #4]	; (13384 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
   13380:	6088      	str	r0, [r1, #8]
   13382:	4770      	bx	lr
   13384:	00013e7c 	.word	0x00013e7c
   13388:	200000fc 	.word	0x200000fc

0001338c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
   1338c:	4902      	ldr	r1, [pc, #8]	; (13398 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
   1338e:	6008      	str	r0, [r1, #0]
   13390:	6889      	ldr	r1, [r1, #8]
   13392:	6809      	ldr	r1, [r1, #0]
   13394:	4708      	bx	r1
   13396:	0000      	.short	0x0000
   13398:	200000fc 	.word	0x200000fc

0001339c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
   1339c:	4808      	ldr	r0, [pc, #32]	; (133c0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
   1339e:	b510      	push	{r4, lr}
   133a0:	7800      	ldrb	r0, [r0, #0]
   133a2:	b110      	cbz	r0, 133aa <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
   133a4:	240c      	movs	r4, #12
   133a6:	4620      	mov	r0, r4
   133a8:	bd10      	pop	{r4, pc}
   133aa:	2400      	movs	r4, #0
   133ac:	2218      	movs	r2, #24
   133ae:	4621      	mov	r1, r4
   133b0:	4803      	ldr	r0, [pc, #12]	; (133c0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
   133b2:	f005 fc2a 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   133b6:	f004 f8c3 	bl	17540 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   133ba:	f003 fea5 	bl	17108 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   133be:	e7f2      	b.n	133a6 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
   133c0:	200013b4 	.word	0x200013b4

000133c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
   133c4:	4904      	ldr	r1, [pc, #16]	; (133d8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
   133c6:	b510      	push	{r4, lr}
   133c8:	7809      	ldrb	r1, [r1, #0]
   133ca:	2901      	cmp	r1, #1
   133cc:	d101      	bne.n	133d2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
   133ce:	f000 fb81 	bl	13ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   133d2:	2000      	movs	r0, #0
   133d4:	bd10      	pop	{r4, pc}
   133d6:	0000      	.short	0x0000
   133d8:	200013b4 	.word	0x200013b4

000133dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
   133dc:	4902      	ldr	r1, [pc, #8]	; (133e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
   133de:	4801      	ldr	r0, [pc, #4]	; (133e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
   133e0:	6008      	str	r0, [r1, #0]
   133e2:	4770      	bx	lr
   133e4:	00013c21 	.word	0x00013c21
   133e8:	20000108 	.word	0x20000108
   133ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133f0:	000f      	movs	r7, r1
   133f2:	4604      	mov	r4, r0
   133f4:	d023      	beq.n	1343e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
   133f6:	f104 0020 	add.w	r0, r4, #32
   133fa:	4605      	mov	r5, r0
   133fc:	f007 fcfe 	bl	1adfc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   13400:	b9b0      	cbnz	r0, 13430 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
   13402:	78a0      	ldrb	r0, [r4, #2]
   13404:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   13408:	b350      	cbz	r0, 13460 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
   1340a:	4628      	mov	r0, r5
   1340c:	f007 fccd 	bl	1adaa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   13410:	4606      	mov	r6, r0
   13412:	4628      	mov	r0, r5
   13414:	f007 fcf2 	bl	1adfc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   13418:	1a30      	subs	r0, r6, r0
   1341a:	b2c0      	uxtb	r0, r0
   1341c:	f007 fd43 	bl	1aea6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
   13420:	4601      	mov	r1, r0
   13422:	4835      	ldr	r0, [pc, #212]	; (134f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
   13424:	6842      	ldr	r2, [r0, #4]
   13426:	4411      	add	r1, r2
   13428:	6041      	str	r1, [r0, #4]
   1342a:	4628      	mov	r0, r5
   1342c:	f007 fd04 	bl	1ae38 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   13430:	4628      	mov	r0, r5
   13432:	f007 fcc6 	bl	1adc2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   13436:	4601      	mov	r1, r0
   13438:	4620      	mov	r0, r4
   1343a:	f007 fc85 	bl	1ad48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
   1343e:	4d2f      	ldr	r5, [pc, #188]	; (134fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
   13440:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
   13444:	2100      	movs	r1, #0
   13446:	6868      	ldr	r0, [r5, #4]
   13448:	8001      	strh	r1, [r0, #0]
   1344a:	f007 fc93 	bl	1ad74 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
   1344e:	8860      	ldrh	r0, [r4, #2]
   13450:	2813      	cmp	r0, #19
   13452:	d013      	beq.n	1347c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
   13454:	dc09      	bgt.n	1346a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
   13456:	2810      	cmp	r0, #16
   13458:	d036      	beq.n	134c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
   1345a:	2812      	cmp	r0, #18
   1345c:	d109      	bne.n	13472 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
   1345e:	e031      	b.n	134c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
   13460:	4620      	mov	r0, r4
   13462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13466:	f000 bb35 	b.w	13ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   1346a:	2815      	cmp	r0, #21
   1346c:	d00f      	beq.n	1348e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
   1346e:	281d      	cmp	r0, #29
   13470:	d00d      	beq.n	1348e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
   13472:	f240 616c 	movw	r1, #1644	; 0x66c
   13476:	202d      	movs	r0, #45	; 0x2d
   13478:	f7fd facc 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1347c:	2100      	movs	r1, #0
   1347e:	6868      	ldr	r0, [r5, #4]
   13480:	f007 f8bc 	bl	1a5fc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
   13484:	2101      	movs	r1, #1
   13486:	6868      	ldr	r0, [r5, #4]
   13488:	f007 fc74 	bl	1ad74 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
   1348c:	e020      	b.n	134d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
   1348e:	2101      	movs	r1, #1
   13490:	6868      	ldr	r0, [r5, #4]
   13492:	f007 f8b3 	bl	1a5fc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
   13496:	2101      	movs	r1, #1
   13498:	6868      	ldr	r0, [r5, #4]
   1349a:	f007 fc6b 	bl	1ad74 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
   1349e:	b136      	cbz	r6, 134ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
   134a0:	f104 0157 	add.w	r1, r4, #87	; 0x57
   134a4:	6868      	ldr	r0, [r5, #4]
   134a6:	f007 f8c4 	bl	1a632 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
   134aa:	2101      	movs	r1, #1
   134ac:	e006      	b.n	134bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
   134ae:	f104 0150 	add.w	r1, r4, #80	; 0x50
   134b2:	6868      	ldr	r0, [r5, #4]
   134b4:	f007 f8bd 	bl	1a632 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
   134b8:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
   134bc:	6868      	ldr	r0, [r5, #4]
   134be:	f007 f8be 	bl	1a63e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
   134c2:	e005      	b.n	134d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
   134c4:	2106      	movs	r1, #6
   134c6:	e000      	b.n	134ca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
   134c8:	2102      	movs	r1, #2
   134ca:	6868      	ldr	r0, [r5, #4]
   134cc:	f007 f896 	bl	1a5fc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
   134d0:	4620      	mov	r0, r4
   134d2:	f000 fcaf 	bl	13e34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
   134d6:	8860      	ldrh	r0, [r4, #2]
   134d8:	281d      	cmp	r0, #29
   134da:	d006      	beq.n	134ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
   134dc:	2815      	cmp	r0, #21
   134de:	d004      	beq.n	134ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
   134e0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   134e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   134e4:	6868      	ldr	r0, [r5, #4]
   134e6:	f007 f879 	bl	1a5dc <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
   134ea:	4639      	mov	r1, r7
   134ec:	4620      	mov	r0, r4
   134ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   134f2:	f000 b9e5 	b.w	138c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
   134f6:	0000      	.short	0x0000
   134f8:	200013b4 	.word	0x200013b4
   134fc:	200000fc 	.word	0x200000fc
   13500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13504:	4d2e      	ldr	r5, [pc, #184]	; (135c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
   13506:	4607      	mov	r7, r0
   13508:	7828      	ldrb	r0, [r5, #0]
   1350a:	2802      	cmp	r0, #2
   1350c:	d005      	beq.n	1351a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
   1350e:	7828      	ldrb	r0, [r5, #0]
   13510:	2803      	cmp	r0, #3
   13512:	d002      	beq.n	1351a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
   13514:	f640 41f7 	movw	r1, #3319	; 0xcf7
   13518:	e029      	b.n	1356e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
   1351a:	4c2a      	ldr	r4, [pc, #168]	; (135c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
   1351c:	6820      	ldr	r0, [r4, #0]
   1351e:	7b01      	ldrb	r1, [r0, #12]
   13520:	b109      	cbz	r1, 13526 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
   13522:	f007 fc1c 	bl	1ad5e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
   13526:	6860      	ldr	r0, [r4, #4]
   13528:	f04f 0800 	mov.w	r8, #0
   1352c:	7802      	ldrb	r2, [r0, #0]
   1352e:	f002 060f 	and.w	r6, r2, #15
   13532:	b357      	cbz	r7, 1358a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
   13534:	6821      	ldr	r1, [r4, #0]
   13536:	f101 0349 	add.w	r3, r1, #73	; 0x49
   1353a:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
   1353e:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
   13542:	d122      	bne.n	1358a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
   13544:	2206      	movs	r2, #6
   13546:	4619      	mov	r1, r3
   13548:	3009      	adds	r0, #9
   1354a:	f005 fad2 	bl	18af2 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   1354e:	b9e0      	cbnz	r0, 1358a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
   13550:	4641      	mov	r1, r8
   13552:	6860      	ldr	r0, [r4, #4]
   13554:	f007 f832 	bl	1a5bc <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
   13558:	b1b8      	cbz	r0, 1358a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
   1355a:	782a      	ldrb	r2, [r5, #0]
   1355c:	6820      	ldr	r0, [r4, #0]
   1355e:	4631      	mov	r1, r6
   13560:	2a02      	cmp	r2, #2
   13562:	d007      	beq.n	13574 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
   13564:	782a      	ldrb	r2, [r5, #0]
   13566:	2a03      	cmp	r2, #3
   13568:	d004      	beq.n	13574 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
   1356a:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
   1356e:	202d      	movs	r0, #45	; 0x2d
   13570:	f7fd fa50 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13574:	68a2      	ldr	r2, [r4, #8]
   13576:	782b      	ldrb	r3, [r5, #0]
   13578:	6952      	ldr	r2, [r2, #20]
   1357a:	f06f 0607 	mvn.w	r6, #7
   1357e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   13582:	58d2      	ldr	r2, [r2, r3]
   13584:	4790      	blx	r2
   13586:	4606      	mov	r6, r0
   13588:	e000      	b.n	1358c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
   1358a:	2601      	movs	r6, #1
   1358c:	7ba8      	ldrb	r0, [r5, #14]
   1358e:	b118      	cbz	r0, 13598 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
   13590:	f003 ffd6 	bl	17540 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   13594:	f003 fdb8 	bl	17108 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   13598:	2e00      	cmp	r6, #0
   1359a:	d00f      	beq.n	135bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
   1359c:	6820      	ldr	r0, [r4, #0]
   1359e:	f007 fc98 	bl	1aed2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   135a2:	b130      	cbz	r0, 135b2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
   135a4:	f003 ffec 	bl	17580 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   135a8:	68a0      	ldr	r0, [r4, #8]
   135aa:	6880      	ldr	r0, [r0, #8]
   135ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   135b0:	4700      	bx	r0
   135b2:	6820      	ldr	r0, [r4, #0]
   135b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   135b8:	f000 ba8c 	b.w	13ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   135bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   135c0:	200013b4 	.word	0x200013b4
   135c4:	200000fc 	.word	0x200000fc
   135c8:	b510      	push	{r4, lr}
   135ca:	2903      	cmp	r1, #3
   135cc:	d002      	beq.n	135d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
   135ce:	2905      	cmp	r1, #5
   135d0:	d10a      	bne.n	135e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
   135d2:	e002      	b.n	135da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
   135d4:	f000 fb7e 	bl	13cd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
   135d8:	e003      	b.n	135e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
   135da:	4904      	ldr	r1, [pc, #16]	; (135ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
   135dc:	6809      	ldr	r1, [r1, #0]
   135de:	b109      	cbz	r1, 135e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
   135e0:	4788      	blx	r1
   135e2:	b108      	cbz	r0, 135e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
   135e4:	2000      	movs	r0, #0
   135e6:	bd10      	pop	{r4, pc}
   135e8:	2001      	movs	r0, #1
   135ea:	bd10      	pop	{r4, pc}
   135ec:	20000108 	.word	0x20000108
   135f0:	4a09      	ldr	r2, [pc, #36]	; (13618 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
   135f2:	0003      	movs	r3, r0
   135f4:	6810      	ldr	r0, [r2, #0]
   135f6:	d001      	beq.n	135fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
   135f8:	f000 ba6c 	b.w	13ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   135fc:	2900      	cmp	r1, #0
   135fe:	d009      	beq.n	13614 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
   13600:	6891      	ldr	r1, [r2, #8]
   13602:	4a06      	ldr	r2, [pc, #24]	; (1361c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
   13604:	6909      	ldr	r1, [r1, #16]
   13606:	7812      	ldrb	r2, [r2, #0]
   13608:	f06f 030f 	mvn.w	r3, #15
   1360c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   13610:	5889      	ldr	r1, [r1, r2]
   13612:	4708      	bx	r1
   13614:	4770      	bx	lr
   13616:	0000      	.short	0x0000
   13618:	200000fc 	.word	0x200000fc
   1361c:	200013b4 	.word	0x200013b4
   13620:	b570      	push	{r4, r5, r6, lr}
   13622:	4604      	mov	r4, r0
   13624:	8840      	ldrh	r0, [r0, #2]
   13626:	2810      	cmp	r0, #16
   13628:	d019      	beq.n	1365e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
   1362a:	4d10      	ldr	r5, [pc, #64]	; (1366c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
   1362c:	7ba8      	ldrb	r0, [r5, #14]
   1362e:	b120      	cbz	r0, 1363a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
   13630:	f003 fd8a 	bl	17148 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
   13634:	2040      	movs	r0, #64	; 0x40
   13636:	f003 ff91 	bl	1755c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
   1363a:	480d      	ldr	r0, [pc, #52]	; (13670 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
   1363c:	6840      	ldr	r0, [r0, #4]
   1363e:	f004 fa4d 	bl	17adc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   13642:	78a0      	ldrb	r0, [r4, #2]
   13644:	0740      	lsls	r0, r0, #29
   13646:	d404      	bmi.n	13652 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
   13648:	2100      	movs	r1, #0
   1364a:	7922      	ldrb	r2, [r4, #4]
   1364c:	4608      	mov	r0, r1
   1364e:	f004 fad1 	bl	17bf4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   13652:	2000      	movs	r0, #0
   13654:	f004 f8d8 	bl	17808 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   13658:	2002      	movs	r0, #2
   1365a:	7028      	strb	r0, [r5, #0]
   1365c:	bd70      	pop	{r4, r5, r6, pc}
   1365e:	4620      	mov	r0, r4
   13660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13664:	2101      	movs	r1, #1
   13666:	f7ff bec1 	b.w	133ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
   1366a:	0000      	.short	0x0000
   1366c:	200013b4 	.word	0x200013b4
   13670:	200000fc 	.word	0x200000fc
   13674:	b510      	push	{r4, lr}
   13676:	4c12      	ldr	r4, [pc, #72]	; (136c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
   13678:	6820      	ldr	r0, [r4, #0]
   1367a:	f000 f825 	bl	136c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
   1367e:	6820      	ldr	r0, [r4, #0]
   13680:	f007 fc27 	bl	1aed2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   13684:	2800      	cmp	r0, #0
   13686:	6820      	ldr	r0, [r4, #0]
   13688:	d00b      	beq.n	136a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
   1368a:	490e      	ldr	r1, [pc, #56]	; (136c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
   1368c:	780a      	ldrb	r2, [r1, #0]
   1368e:	2a02      	cmp	r2, #2
   13690:	d00b      	beq.n	136aa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
   13692:	780a      	ldrb	r2, [r1, #0]
   13694:	2a03      	cmp	r2, #3
   13696:	d008      	beq.n	136aa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
   13698:	f640 31fe 	movw	r1, #3070	; 0xbfe
   1369c:	202d      	movs	r0, #45	; 0x2d
   1369e:	f7fd f9b9 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   136a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   136a6:	f000 ba15 	b.w	13ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   136aa:	68a2      	ldr	r2, [r4, #8]
   136ac:	7809      	ldrb	r1, [r1, #0]
   136ae:	68d2      	ldr	r2, [r2, #12]
   136b0:	f06f 0307 	mvn.w	r3, #7
   136b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   136b8:	5851      	ldr	r1, [r2, r1]
   136ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   136be:	4708      	bx	r1
   136c0:	200000fc 	.word	0x200000fc
   136c4:	200013b4 	.word	0x200013b4
   136c8:	b510      	push	{r4, lr}
   136ca:	7b01      	ldrb	r1, [r0, #12]
   136cc:	b109      	cbz	r1, 136d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
   136ce:	f007 fb46 	bl	1ad5e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
   136d2:	4805      	ldr	r0, [pc, #20]	; (136e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
   136d4:	7b80      	ldrb	r0, [r0, #14]
   136d6:	2800      	cmp	r0, #0
   136d8:	d005      	beq.n	136e6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
   136da:	f003 ff31 	bl	17540 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   136de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   136e2:	f003 bd11 	b.w	17108 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   136e6:	bd10      	pop	{r4, pc}
   136e8:	200013b4 	.word	0x200013b4

000136ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
   136ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   136f0:	4d58      	ldr	r5, [pc, #352]	; (13854 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
   136f2:	4604      	mov	r4, r0
   136f4:	b088      	sub	sp, #32
   136f6:	7828      	ldrb	r0, [r5, #0]
   136f8:	bbf0      	cbnz	r0, 13778 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
   136fa:	7820      	ldrb	r0, [r4, #0]
   136fc:	28ff      	cmp	r0, #255	; 0xff
   136fe:	d03c      	beq.n	1377a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
   13700:	2600      	movs	r6, #0
   13702:	81ae      	strh	r6, [r5, #12]
   13704:	606e      	str	r6, [r5, #4]
   13706:	706e      	strb	r6, [r5, #1]
   13708:	70ae      	strb	r6, [r5, #2]
   1370a:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
   1370e:	4b52      	ldr	r3, [pc, #328]	; (13858 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
   13710:	f8df 8148 	ldr.w	r8, [pc, #328]	; 1385c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
   13714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13716:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1371a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1371e:	6840      	ldr	r0, [r0, #4]
   13720:	9003      	str	r0, [sp, #12]
   13722:	4668      	mov	r0, sp
   13724:	f004 f844 	bl	177b0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
   13728:	f004 f94c 	bl	179c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
   1372c:	f004 fbb8 	bl	17ea0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
   13730:	f003 ff06 	bl	17540 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   13734:	f003 fce8 	bl	17108 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   13738:	4849      	ldr	r0, [pc, #292]	; (13860 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
   1373a:	f004 fa9d 	bl	17c78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
   1373e:	4846      	ldr	r0, [pc, #280]	; (13858 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
   13740:	1f00      	subs	r0, r0, #4
   13742:	f004 faa3 	bl	17c8c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
   13746:	f104 0020 	add.w	r0, r4, #32
   1374a:	4607      	mov	r7, r0
   1374c:	f007 fb74 	bl	1ae38 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   13750:	4638      	mov	r0, r7
   13752:	f007 fb36 	bl	1adc2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   13756:	4601      	mov	r1, r0
   13758:	4620      	mov	r0, r4
   1375a:	f007 faf5 	bl	1ad48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
   1375e:	f994 000e 	ldrsb.w	r0, [r4, #14]
   13762:	f004 f9b5 	bl	17ad0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
   13766:	7921      	ldrb	r1, [r4, #4]
   13768:	2000      	movs	r0, #0
   1376a:	f003 ffa5 	bl	176b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   1376e:	60a8      	str	r0, [r5, #8]
   13770:	b138      	cbz	r0, 13782 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
   13772:	7ea0      	ldrb	r0, [r4, #26]
   13774:	b968      	cbnz	r0, 13792 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
   13776:	e007      	b.n	13788 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
   13778:	e7ff      	b.n	1377a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
   1377a:	200c      	movs	r0, #12
   1377c:	b008      	add	sp, #32
   1377e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13782:	2001      	movs	r0, #1
   13784:	7028      	strb	r0, [r5, #0]
   13786:	e062      	b.n	1384e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
   13788:	7e20      	ldrb	r0, [r4, #24]
   1378a:	b910      	cbnz	r0, 13792 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
   1378c:	78a0      	ldrb	r0, [r4, #2]
   1378e:	0740      	lsls	r0, r0, #29
   13790:	d529      	bpl.n	137e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
   13792:	f005 f84b 	bl	1882c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   13796:	4682      	mov	sl, r0
   13798:	4651      	mov	r1, sl
   1379a:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1379c:	f7fa fd3c 	bl	e218 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   137a0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 13864 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
   137a4:	4607      	mov	r7, r0
   137a6:	fb90 f1f9 	sdiv	r1, r0, r9
   137aa:	fb09 7011 	mls	r0, r9, r1, r7
   137ae:	4241      	negs	r1, r0
   137b0:	4650      	mov	r0, sl
   137b2:	f7fa fcff 	bl	e1b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   137b6:	6460      	str	r0, [r4, #68]	; 0x44
   137b8:	fb97 f0f9 	sdiv	r0, r7, r9
   137bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   137be:	4408      	add	r0, r1
   137c0:	6420      	str	r0, [r4, #64]	; 0x40
   137c2:	f7fe fedf 	bl	12584 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
   137c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
   137c8:	4288      	cmp	r0, r1
   137ca:	d80c      	bhi.n	137e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
   137cc:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
   137d0:	2101      	movs	r1, #1
   137d2:	4620      	mov	r0, r4
   137d4:	f007 fa7c 	bl	1acd0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
   137d8:	78a0      	ldrb	r0, [r4, #2]
   137da:	0740      	lsls	r0, r0, #29
   137dc:	d503      	bpl.n	137e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
   137de:	2101      	movs	r1, #1
   137e0:	4620      	mov	r0, r4
   137e2:	f000 fab1 	bl	13d48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
   137e6:	f104 0130 	add.w	r1, r4, #48	; 0x30
   137ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   137ec:	f006 fabe 	bl	19d6c <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
   137f0:	f104 0138 	add.w	r1, r4, #56	; 0x38
   137f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   137f6:	f006 fabc 	bl	19d72 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
   137fa:	f7fe ff29 	bl	12650 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
   137fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
   13802:	1cc0      	adds	r0, r0, #3
   13804:	f006 fb7a 	bl	19efc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
   13808:	73a8      	strb	r0, [r5, #14]
   1380a:	78a0      	ldrb	r0, [r4, #2]
   1380c:	07c0      	lsls	r0, r0, #31
   1380e:	d01e      	beq.n	1384e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
   13810:	a904      	add	r1, sp, #16
   13812:	2000      	movs	r0, #0
   13814:	f006 f984 	bl	19b20 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   13818:	b120      	cbz	r0, 13824 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x138>
   1381a:	f640 11c9 	movw	r1, #2505	; 0x9c9
   1381e:	202d      	movs	r0, #45	; 0x2d
   13820:	f7fd f8f8 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13824:	20ff      	movs	r0, #255	; 0xff
   13826:	73e8      	strb	r0, [r5, #15]
   13828:	e00c      	b.n	13844 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
   1382a:	9806      	ldr	r0, [sp, #24]
   1382c:	69e1      	ldr	r1, [r4, #28]
   1382e:	4281      	cmp	r1, r0
   13830:	d008      	beq.n	13844 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
   13832:	7881      	ldrb	r1, [r0, #2]
   13834:	73e9      	strb	r1, [r5, #15]
   13836:	f8d0 1003 	ldr.w	r1, [r0, #3]
   1383a:	6129      	str	r1, [r5, #16]
   1383c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   13840:	82a8      	strh	r0, [r5, #20]
   13842:	e004      	b.n	1384e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
   13844:	a804      	add	r0, sp, #16
   13846:	f7fd fb1d 	bl	10e84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1384a:	2800      	cmp	r0, #0
   1384c:	d0ed      	beq.n	1382a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
   1384e:	2000      	movs	r0, #0
   13850:	e794      	b.n	1377c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
   13852:	0000      	.short	0x0000
   13854:	200013b4 	.word	0x200013b4
   13858:	00013e5c 	.word	0x00013e5c
   1385c:	200000fc 	.word	0x200000fc
   13860:	8e89bed6 	.word	0x8e89bed6
   13864:	000f4240 	.word	0x000f4240
   13868:	b510      	push	{r4, lr}
   1386a:	4604      	mov	r4, r0
   1386c:	f7ff ff3e 	bl	136ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
   13870:	2800      	cmp	r0, #0
   13872:	d108      	bne.n	13886 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
   13874:	4804      	ldr	r0, [pc, #16]	; (13888 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
   13876:	7800      	ldrb	r0, [r0, #0]
   13878:	2801      	cmp	r0, #1
   1387a:	d003      	beq.n	13884 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
   1387c:	2100      	movs	r1, #0
   1387e:	4620      	mov	r0, r4
   13880:	f7ff fdb4 	bl	133ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
   13884:	2000      	movs	r0, #0
   13886:	bd10      	pop	{r4, pc}
   13888:	200013b4 	.word	0x200013b4
   1388c:	480a      	ldr	r0, [pc, #40]	; (138b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
   1388e:	b510      	push	{r4, lr}
   13890:	490a      	ldr	r1, [pc, #40]	; (138bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
   13892:	6804      	ldr	r4, [r0, #0]
   13894:	7808      	ldrb	r0, [r1, #0]
   13896:	2800      	cmp	r0, #0
   13898:	d00d      	beq.n	138b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
   1389a:	7808      	ldrb	r0, [r1, #0]
   1389c:	2802      	cmp	r0, #2
   1389e:	d002      	beq.n	138a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
   138a0:	7808      	ldrb	r0, [r1, #0]
   138a2:	2803      	cmp	r0, #3
   138a4:	d102      	bne.n	138ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
   138a6:	4620      	mov	r0, r4
   138a8:	f7ff ff0e 	bl	136c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
   138ac:	4620      	mov	r0, r4
   138ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   138b2:	f000 b90f 	b.w	13ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   138b6:	bd10      	pop	{r4, pc}
   138b8:	200000fc 	.word	0x200000fc
   138bc:	200013b4 	.word	0x200013b4
   138c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138c4:	4604      	mov	r4, r0
   138c6:	4827      	ldr	r0, [pc, #156]	; (13964 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
   138c8:	460d      	mov	r5, r1
   138ca:	6840      	ldr	r0, [r0, #4]
   138cc:	f004 f906 	bl	17adc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   138d0:	4e25      	ldr	r6, [pc, #148]	; (13968 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
   138d2:	2004      	movs	r0, #4
   138d4:	7030      	strb	r0, [r6, #0]
   138d6:	b325      	cbz	r5, 13922 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
   138d8:	8860      	ldrh	r0, [r4, #2]
   138da:	2810      	cmp	r0, #16
   138dc:	d02a      	beq.n	13934 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
   138de:	f104 0020 	add.w	r0, r4, #32
   138e2:	4680      	mov	r8, r0
   138e4:	68b5      	ldr	r5, [r6, #8]
   138e6:	f007 fa60 	bl	1adaa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   138ea:	4607      	mov	r7, r0
   138ec:	4640      	mov	r0, r8
   138ee:	f007 fa85 	bl	1adfc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   138f2:	1a38      	subs	r0, r7, r0
   138f4:	1e40      	subs	r0, r0, #1
   138f6:	b2c0      	uxtb	r0, r0
   138f8:	8861      	ldrh	r1, [r4, #2]
   138fa:	2228      	movs	r2, #40	; 0x28
   138fc:	f000 faea 	bl	13ed4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
   13900:	4405      	add	r5, r0
   13902:	78a0      	ldrb	r0, [r4, #2]
   13904:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   13908:	b130      	cbz	r0, 13918 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
   1390a:	6870      	ldr	r0, [r6, #4]
   1390c:	4405      	add	r5, r0
   1390e:	f007 face 	bl	1aeae <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
   13912:	4428      	add	r0, r5
   13914:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
   13918:	7922      	ldrb	r2, [r4, #4]
   1391a:	4629      	mov	r1, r5
   1391c:	2000      	movs	r0, #0
   1391e:	f004 f8ed 	bl	17afc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   13922:	8860      	ldrh	r0, [r4, #2]
   13924:	2813      	cmp	r0, #19
   13926:	d013      	beq.n	13950 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
   13928:	dc09      	bgt.n	1393e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
   1392a:	2810      	cmp	r0, #16
   1392c:	d017      	beq.n	1395e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
   1392e:	2812      	cmp	r0, #18
   13930:	d109      	bne.n	13946 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
   13932:	e00d      	b.n	13950 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
   13934:	7921      	ldrb	r1, [r4, #4]
   13936:	2000      	movs	r0, #0
   13938:	f003 fe72 	bl	17620 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
   1393c:	e7f1      	b.n	13922 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
   1393e:	2815      	cmp	r0, #21
   13940:	d006      	beq.n	13950 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
   13942:	281d      	cmp	r0, #29
   13944:	d004      	beq.n	13950 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
   13946:	f640 5185 	movw	r1, #3461	; 0xd85
   1394a:	202d      	movs	r0, #45	; 0x2d
   1394c:	f7fd f862 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13950:	7922      	ldrb	r2, [r4, #4]
   13952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13956:	2101      	movs	r1, #1
   13958:	2000      	movs	r0, #0
   1395a:	f004 b94b 	b.w	17bf4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   1395e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13962:	0000      	.short	0x0000
   13964:	200000fc 	.word	0x200000fc
   13968:	200013b4 	.word	0x200013b4
   1396c:	b510      	push	{r4, lr}
   1396e:	4604      	mov	r4, r0
   13970:	7800      	ldrb	r0, [r0, #0]
   13972:	460b      	mov	r3, r1
   13974:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
   13978:	29ff      	cmp	r1, #255	; 0xff
   1397a:	d010      	beq.n	1399e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
   1397c:	f104 0297 	add.w	r2, r4, #151	; 0x97
   13980:	1e51      	subs	r1, r2, #1
   13982:	4618      	mov	r0, r3
   13984:	f7fe fd7c 	bl	12480 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   13988:	b130      	cbz	r0, 13998 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
   1398a:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
   1398e:	f040 0002 	orr.w	r0, r0, #2
   13992:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
   13996:	e011      	b.n	139bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
   13998:	f640 71bc 	movw	r1, #4028	; 0xfbc
   1399c:	e020      	b.n	139e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
   1399e:	4812      	ldr	r0, [pc, #72]	; (139e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>)
   139a0:	6840      	ldr	r0, [r0, #4]
   139a2:	7801      	ldrb	r1, [r0, #0]
   139a4:	f3c1 1180 	ubfx	r1, r1, #6, #1
   139a8:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
   139ac:	f8d0 1003 	ldr.w	r1, [r0, #3]
   139b0:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
   139b4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   139b8:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
   139bc:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   139c0:	287f      	cmp	r0, #127	; 0x7f
   139c2:	d00b      	beq.n	139dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f0>
   139c4:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
   139c8:	207f      	movs	r0, #127	; 0x7f
   139ca:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   139ce:	347e      	adds	r4, #126	; 0x7e
   139d0:	2001      	movs	r0, #1
   139d2:	75a0      	strb	r0, [r4, #22]
   139d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   139d8:	f7ff b9a8 	b.w	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   139dc:	f640 6137 	movw	r1, #3639	; 0xe37
   139e0:	202d      	movs	r0, #45	; 0x2d
   139e2:	f7fd f817 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   139e6:	0000      	.short	0x0000
   139e8:	200000fc 	.word	0x200000fc
   139ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   139f0:	4690      	mov	r8, r2
   139f2:	460e      	mov	r6, r1
   139f4:	4604      	mov	r4, r0
   139f6:	2903      	cmp	r1, #3
   139f8:	d004      	beq.n	13a04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
   139fa:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
   139fe:	b108      	cbz	r0, 13a04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
   13a00:	2001      	movs	r0, #1
   13a02:	e000      	b.n	13a06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
   13a04:	2000      	movs	r0, #0
   13a06:	4681      	mov	r9, r0
   13a08:	f003 fdb4 	bl	17574 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
   13a0c:	4605      	mov	r5, r0
   13a0e:	2e03      	cmp	r6, #3
   13a10:	d003      	beq.n	13a1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32e>
   13a12:	2701      	movs	r7, #1
   13a14:	2e05      	cmp	r6, #5
   13a16:	d005      	beq.n	13a24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
   13a18:	e008      	b.n	13a2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
   13a1a:	78a0      	ldrb	r0, [r4, #2]
   13a1c:	2702      	movs	r7, #2
   13a1e:	f3c0 0040 	ubfx	r0, r0, #1, #1
   13a22:	e001      	b.n	13a28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
   13a24:	78a0      	ldrb	r0, [r4, #2]
   13a26:	07c0      	lsls	r0, r0, #31
   13a28:	2800      	cmp	r0, #0
   13a2a:	d04a      	beq.n	13ac2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
   13a2c:	f1b9 0f00 	cmp.w	r9, #0
   13a30:	d146      	bne.n	13ac0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
   13a32:	4826      	ldr	r0, [pc, #152]	; (13acc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e0>)
   13a34:	7b80      	ldrb	r0, [r0, #14]
   13a36:	b140      	cbz	r0, 13a4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
   13a38:	f006 fa63 	bl	19f02 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
   13a3c:	f888 0000 	strb.w	r0, [r8]
   13a40:	28ff      	cmp	r0, #255	; 0xff
   13a42:	d002      	beq.n	13a4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
   13a44:	f7fe fd36 	bl	124b4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
   13a48:	4305      	orrs	r5, r0
   13a4a:	4e21      	ldr	r6, [pc, #132]	; (13ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
   13a4c:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
   13a50:	6870      	ldr	r0, [r6, #4]
   13a52:	7801      	ldrb	r1, [r0, #0]
   13a54:	f3c1 1180 	ubfx	r1, r1, #6, #1
   13a58:	4291      	cmp	r1, r2
   13a5a:	d106      	bne.n	13a6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
   13a5c:	2206      	movs	r2, #6
   13a5e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   13a62:	1cc0      	adds	r0, r0, #3
   13a64:	f005 f845 	bl	18af2 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   13a68:	b130      	cbz	r0, 13a78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
   13a6a:	2000      	movs	r0, #0
   13a6c:	f898 1000 	ldrb.w	r1, [r8]
   13a70:	29ff      	cmp	r1, #255	; 0xff
   13a72:	d007      	beq.n	13a84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x398>
   13a74:	b9a8      	cbnz	r0, 13aa2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
   13a76:	e001      	b.n	13a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
   13a78:	2001      	movs	r0, #1
   13a7a:	e7f7      	b.n	13a6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x380>
   13a7c:	7e60      	ldrb	r0, [r4, #25]
   13a7e:	4288      	cmp	r0, r1
   13a80:	d00f      	beq.n	13aa2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
   13a82:	e008      	b.n	13a96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
   13a84:	b138      	cbz	r0, 13a96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
   13a86:	6871      	ldr	r1, [r6, #4]
   13a88:	f811 0b03 	ldrb.w	r0, [r1], #3
   13a8c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13a90:	f007 f8dc 	bl	1ac4c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
   13a94:	b128      	cbz	r0, 13aa2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
   13a96:	2000      	movs	r0, #0
   13a98:	78a1      	ldrb	r1, [r4, #2]
   13a9a:	0749      	lsls	r1, r1, #29
   13a9c:	d503      	bpl.n	13aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
   13a9e:	b990      	cbnz	r0, 13ac6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
   13aa0:	e00e      	b.n	13ac0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
   13aa2:	2001      	movs	r0, #1
   13aa4:	e7f8      	b.n	13a98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
   13aa6:	b975      	cbnz	r5, 13ac6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
   13aa8:	7be0      	ldrb	r0, [r4, #15]
   13aaa:	b108      	cbz	r0, 13ab0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
   13aac:	42b8      	cmp	r0, r7
   13aae:	d107      	bne.n	13ac0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
   13ab0:	6871      	ldr	r1, [r6, #4]
   13ab2:	f811 0b03 	ldrb.w	r0, [r1], #3
   13ab6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13aba:	f007 f8c7 	bl	1ac4c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
   13abe:	b110      	cbz	r0, 13ac6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
   13ac0:	2000      	movs	r0, #0
   13ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13ac6:	2001      	movs	r0, #1
   13ac8:	e7fb      	b.n	13ac2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
   13aca:	0000      	.short	0x0000
   13acc:	200013b4 	.word	0x200013b4
   13ad0:	200000fc 	.word	0x200000fc
   13ad4:	b570      	push	{r4, r5, r6, lr}
   13ad6:	4604      	mov	r4, r0
   13ad8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   13ada:	4d13      	ldr	r5, [pc, #76]	; (13b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>)
   13adc:	1c40      	adds	r0, r0, #1
   13ade:	62a0      	str	r0, [r4, #40]	; 0x28
   13ae0:	7ba8      	ldrb	r0, [r5, #14]
   13ae2:	2600      	movs	r6, #0
   13ae4:	b120      	cbz	r0, 13af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
   13ae6:	f003 fd2b 	bl	17540 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   13aea:	f003 fb0d 	bl	17108 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   13aee:	73ae      	strb	r6, [r5, #14]
   13af0:	702e      	strb	r6, [r5, #0]
   13af2:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
   13af6:	b108      	cbz	r0, 13afc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>
   13af8:	2101      	movs	r1, #1
   13afa:	e00f      	b.n	13b1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
   13afc:	7b60      	ldrb	r0, [r4, #13]
   13afe:	b160      	cbz	r0, 13b1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
   13b00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   13b02:	4288      	cmp	r0, r1
   13b04:	d809      	bhi.n	13b1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
   13b06:	2101      	movs	r1, #1
   13b08:	4620      	mov	r0, r4
   13b0a:	f007 f9f7 	bl	1aefc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   13b0e:	78a0      	ldrb	r0, [r4, #2]
   13b10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13b14:	07c0      	lsls	r0, r0, #31
   13b16:	f7ff b909 	b.w	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   13b1a:	2100      	movs	r1, #0
   13b1c:	4620      	mov	r0, r4
   13b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13b22:	f007 b9eb 	b.w	1aefc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   13b26:	0000      	.short	0x0000
   13b28:	200013b4 	.word	0x200013b4
   13b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13b30:	4604      	mov	r4, r0
   13b32:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
   13b36:	4617      	mov	r7, r2
   13b38:	460d      	mov	r5, r1
   13b3a:	f88d 0000 	strb.w	r0, [sp]
   13b3e:	9800      	ldr	r0, [sp, #0]
   13b40:	9000      	str	r0, [sp, #0]
   13b42:	f89d 0000 	ldrb.w	r0, [sp]
   13b46:	b110      	cbz	r0, 13b4e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x462>
   13b48:	f640 4132 	movw	r1, #3122	; 0xc32
   13b4c:	e054      	b.n	13bf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
   13b4e:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   13b52:	8828      	ldrh	r0, [r5, #0]
   13b54:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
   13b58:	2b00      	cmp	r3, #0
   13b5a:	d15d      	bne.n	13c18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
   13b5c:	68e8      	ldr	r0, [r5, #12]
   13b5e:	f006 fa2e 	bl	19fbe <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   13b62:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
   13b66:	8aa8      	ldrh	r0, [r5, #20]
   13b68:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
   13b6c:	8ae8      	ldrh	r0, [r5, #22]
   13b6e:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
   13b72:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
   13b76:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
   13b7a:	7e21      	ldrb	r1, [r4, #24]
   13b7c:	f104 0849 	add.w	r8, r4, #73	; 0x49
   13b80:	2600      	movs	r6, #0
   13b82:	b129      	cbz	r1, 13b90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a4>
   13b84:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   13b88:	4641      	mov	r1, r8
   13b8a:	f006 ff77 	bl	1aa7c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
   13b8e:	b940      	cbnz	r0, 13ba2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b6>
   13b90:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
   13b94:	b170      	cbz	r0, 13bb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
   13b96:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   13b9a:	4641      	mov	r1, r8
   13b9c:	f006 ff65 	bl	1aa6a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
   13ba0:	b140      	cbz	r0, 13bb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
   13ba2:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
   13ba6:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
   13baa:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
   13bae:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
   13bb2:	e003      	b.n	13bbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
   13bb4:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
   13bb8:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
   13bbc:	4817      	ldr	r0, [pc, #92]	; (13c1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>)
   13bbe:	2fff      	cmp	r7, #255	; 0xff
   13bc0:	6840      	ldr	r0, [r0, #4]
   13bc2:	7801      	ldrb	r1, [r0, #0]
   13bc4:	f3c1 1180 	ubfx	r1, r1, #6, #1
   13bc8:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
   13bcc:	f850 1f03 	ldr.w	r1, [r0, #3]!
   13bd0:	d015      	beq.n	13bfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x512>
   13bd2:	67a1      	str	r1, [r4, #120]	; 0x78
   13bd4:	8880      	ldrh	r0, [r0, #4]
   13bd6:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
   13bda:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   13bde:	1e51      	subs	r1, r2, #1
   13be0:	4638      	mov	r0, r7
   13be2:	f7fe fc4d 	bl	12480 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   13be6:	b128      	cbz	r0, 13bf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
   13be8:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
   13bec:	f040 0002 	orr.w	r0, r0, #2
   13bf0:	7020      	strb	r0, [r4, #0]
   13bf2:	e00a      	b.n	13c0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
   13bf4:	f640 4153 	movw	r1, #3155	; 0xc53
   13bf8:	202d      	movs	r0, #45	; 0x2d
   13bfa:	f7fc ff0b 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13bfe:	f844 1f6c 	str.w	r1, [r4, #108]!
   13c02:	8880      	ldrh	r0, [r0, #4]
   13c04:	80a0      	strh	r0, [r4, #4]
   13c06:	60e6      	str	r6, [r4, #12]
   13c08:	8226      	strh	r6, [r4, #16]
   13c0a:	8828      	ldrh	r0, [r5, #0]
   13c0c:	f7fd fb1c 	bl	11248 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   13c10:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13c14:	f005 be61 	b.w	198da <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
   13c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13c1c:	200000fc 	.word	0x200000fc
   13c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13c24:	4604      	mov	r4, r0
   13c26:	20ff      	movs	r0, #255	; 0xff
   13c28:	f88d 0000 	strb.w	r0, [sp]
   13c2c:	2601      	movs	r6, #1
   13c2e:	466a      	mov	r2, sp
   13c30:	2105      	movs	r1, #5
   13c32:	4620      	mov	r0, r4
   13c34:	f7ff feda 	bl	139ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
   13c38:	b3e8      	cbz	r0, 13cb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
   13c3a:	4d24      	ldr	r5, [pc, #144]	; (13ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
   13c3c:	4f24      	ldr	r7, [pc, #144]	; (13cd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
   13c3e:	46b0      	mov	r8, r6
   13c40:	6868      	ldr	r0, [r5, #4]
   13c42:	7bfa      	ldrb	r2, [r7, #15]
   13c44:	f04f 0900 	mov.w	r9, #0
   13c48:	7801      	ldrb	r1, [r0, #0]
   13c4a:	f3c1 1180 	ubfx	r1, r1, #6, #1
   13c4e:	4291      	cmp	r1, r2
   13c50:	d106      	bne.n	13c60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
   13c52:	2206      	movs	r2, #6
   13c54:	f107 0110 	add.w	r1, r7, #16
   13c58:	1cc0      	adds	r0, r0, #3
   13c5a:	f004 ff4a 	bl	18af2 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   13c5e:	b350      	cbz	r0, 13cb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
   13c60:	686a      	ldr	r2, [r5, #4]
   13c62:	69e0      	ldr	r0, [r4, #28]
   13c64:	7812      	ldrb	r2, [r2, #0]
   13c66:	f810 1f85 	ldrb.w	r1, [r0, #133]!
   13c6a:	f3c2 1240 	ubfx	r2, r2, #5, #1
   13c6e:	4011      	ands	r1, r2
   13c70:	7001      	strb	r1, [r0, #0]
   13c72:	2201      	movs	r2, #1
   13c74:	4620      	mov	r0, r4
   13c76:	69e1      	ldr	r1, [r4, #28]
   13c78:	f000 f894 	bl	13da4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>
   13c7c:	2300      	movs	r3, #0
   13c7e:	f89d 2000 	ldrb.w	r2, [sp]
   13c82:	4620      	mov	r0, r4
   13c84:	69e1      	ldr	r1, [r4, #28]
   13c86:	f7ff ff51 	bl	13b2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
   13c8a:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
   13c8e:	f7ff f84d 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   13c92:	f887 9000 	strb.w	r9, [r7]
   13c96:	2200      	movs	r2, #0
   13c98:	4621      	mov	r1, r4
   13c9a:	69e0      	ldr	r0, [r4, #28]
   13c9c:	f000 fa58 	bl	14150 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
   13ca0:	6868      	ldr	r0, [r5, #4]
   13ca2:	69e1      	ldr	r1, [r4, #28]
   13ca4:	f8d0 2003 	ldr.w	r2, [r0, #3]
   13ca8:	f841 2f03 	str.w	r2, [r1, #3]!
   13cac:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   13cb0:	808a      	strh	r2, [r1, #4]
   13cb2:	7800      	ldrb	r0, [r0, #0]
   13cb4:	e000      	b.n	13cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
   13cb6:	e004      	b.n	13cc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d6>
   13cb8:	69e1      	ldr	r1, [r4, #28]
   13cba:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13cbe:	7088      	strb	r0, [r1, #2]
   13cc0:	e000      	b.n	13cc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
   13cc2:	2600      	movs	r6, #0
   13cc4:	4630      	mov	r0, r6
   13cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13cca:	0000      	.short	0x0000
   13ccc:	200000fc 	.word	0x200000fc
   13cd0:	200013b4 	.word	0x200013b4
   13cd4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   13cd6:	4604      	mov	r4, r0
   13cd8:	20ff      	movs	r0, #255	; 0xff
   13cda:	f88d 0000 	strb.w	r0, [sp]
   13cde:	2501      	movs	r5, #1
   13ce0:	466a      	mov	r2, sp
   13ce2:	2103      	movs	r1, #3
   13ce4:	4620      	mov	r0, r4
   13ce6:	f7ff fe81 	bl	139ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
   13cea:	b328      	cbz	r0, 13d38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
   13cec:	7b20      	ldrb	r0, [r4, #12]
   13cee:	b168      	cbz	r0, 13d0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
   13cf0:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
   13cf4:	f88d 0004 	strb.w	r0, [sp, #4]
   13cf8:	9801      	ldr	r0, [sp, #4]
   13cfa:	9001      	str	r0, [sp, #4]
   13cfc:	f89d 0004 	ldrb.w	r0, [sp, #4]
   13d00:	b920      	cbnz	r0, 13d0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
   13d02:	f89d 1000 	ldrb.w	r1, [sp]
   13d06:	4620      	mov	r0, r4
   13d08:	f7ff fe30 	bl	1396c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
   13d0c:	4e0c      	ldr	r6, [pc, #48]	; (13d40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
   13d0e:	2100      	movs	r1, #0
   13d10:	6870      	ldr	r0, [r6, #4]
   13d12:	8001      	strh	r1, [r0, #0]
   13d14:	2104      	movs	r1, #4
   13d16:	f006 fc71 	bl	1a5fc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
   13d1a:	4620      	mov	r0, r4
   13d1c:	f000 f88a 	bl	13e34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
   13d20:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   13d22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   13d24:	6870      	ldr	r0, [r6, #4]
   13d26:	f006 fca0 	bl	1a66a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
   13d2a:	4906      	ldr	r1, [pc, #24]	; (13d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
   13d2c:	2005      	movs	r0, #5
   13d2e:	7008      	strb	r0, [r1, #0]
   13d30:	6870      	ldr	r0, [r6, #4]
   13d32:	f003 fed3 	bl	17adc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   13d36:	e000      	b.n	13d3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64e>
   13d38:	2500      	movs	r5, #0
   13d3a:	4628      	mov	r0, r5
   13d3c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   13d3e:	0000      	.short	0x0000
   13d40:	200000fc 	.word	0x200000fc
   13d44:	200013b4 	.word	0x200013b4
   13d48:	b570      	push	{r4, r5, r6, lr}
   13d4a:	4604      	mov	r4, r0
   13d4c:	460e      	mov	r6, r1
   13d4e:	7e40      	ldrb	r0, [r0, #25]
   13d50:	f7fe fb64 	bl	1241c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   13d54:	0005      	movs	r5, r0
   13d56:	d019      	beq.n	13d8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
   13d58:	2110      	movs	r1, #16
   13d5a:	f006 fabc 	bl	1a2d6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   13d5e:	2800      	cmp	r0, #0
   13d60:	d114      	bne.n	13d8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
   13d62:	2001      	movs	r0, #1
   13d64:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
   13d68:	f104 0157 	add.w	r1, r4, #87	; 0x57
   13d6c:	4632      	mov	r2, r6
   13d6e:	460c      	mov	r4, r1
   13d70:	4628      	mov	r0, r5
   13d72:	f006 f868 	bl	19e46 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   13d76:	4621      	mov	r1, r4
   13d78:	4c05      	ldr	r4, [pc, #20]	; (13d90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
   13d7a:	6860      	ldr	r0, [r4, #4]
   13d7c:	f006 fc59 	bl	1a632 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
   13d80:	6860      	ldr	r0, [r4, #4]
   13d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13d86:	2101      	movs	r1, #1
   13d88:	f006 bc59 	b.w	1a63e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
   13d8c:	bd70      	pop	{r4, r5, r6, pc}
   13d8e:	0000      	.short	0x0000
   13d90:	200000fc 	.word	0x200000fc
   13d94:	4802      	ldr	r0, [pc, #8]	; (13da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
   13d96:	2101      	movs	r1, #1
   13d98:	6800      	ldr	r0, [r0, #0]
   13d9a:	f7ff bb27 	b.w	133ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
   13d9e:	0000      	.short	0x0000
   13da0:	200000fc 	.word	0x200000fc
   13da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13da8:	4e21      	ldr	r6, [pc, #132]	; (13e30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>)
   13daa:	4680      	mov	r8, r0
   13dac:	460c      	mov	r4, r1
   13dae:	6870      	ldr	r0, [r6, #4]
   13db0:	4615      	mov	r5, r2
   13db2:	f850 1f0f 	ldr.w	r1, [r0, #15]!
   13db6:	6121      	str	r1, [r4, #16]
   13db8:	8881      	ldrh	r1, [r0, #4]
   13dba:	8321      	strh	r1, [r4, #24]
   13dbc:	7981      	ldrb	r1, [r0, #6]
   13dbe:	76a1      	strb	r1, [r4, #26]
   13dc0:	8940      	ldrh	r0, [r0, #10]
   13dc2:	f006 f8f8 	bl	19fb6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   13dc6:	4607      	mov	r7, r0
   13dc8:	60e0      	str	r0, [r4, #12]
   13dca:	6870      	ldr	r0, [r6, #4]
   13dcc:	4639      	mov	r1, r7
   13dce:	7d80      	ldrb	r0, [r0, #22]
   13dd0:	f006 fa7c 	bl	1a2cc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   13dd4:	83a0      	strh	r0, [r4, #28]
   13dd6:	6870      	ldr	r0, [r6, #4]
   13dd8:	4639      	mov	r1, r7
   13dda:	f8b0 0017 	ldrh.w	r0, [r0, #23]
   13dde:	f006 fa71 	bl	1a2c4 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   13de2:	6220      	str	r0, [r4, #32]
   13de4:	6870      	ldr	r0, [r6, #4]
   13de6:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
   13dea:	82a1      	strh	r1, [r4, #20]
   13dec:	8841      	ldrh	r1, [r0, #2]
   13dee:	82e1      	strh	r1, [r4, #22]
   13df0:	6841      	ldr	r1, [r0, #4]
   13df2:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
   13df6:	7a01      	ldrb	r1, [r0, #8]
   13df8:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
   13dfc:	7a41      	ldrb	r1, [r0, #9]
   13dfe:	f001 011f 	and.w	r1, r1, #31
   13e02:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
   13e06:	7a40      	ldrb	r0, [r0, #9]
   13e08:	0940      	lsrs	r0, r0, #5
   13e0a:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
   13e0e:	f104 0062 	add.w	r0, r4, #98	; 0x62
   13e12:	7205      	strb	r5, [r0, #8]
   13e14:	7245      	strb	r5, [r0, #9]
   13e16:	2101      	movs	r1, #1
   13e18:	7281      	strb	r1, [r0, #10]
   13e1a:	2100      	movs	r1, #0
   13e1c:	3836      	subs	r0, #54	; 0x36
   13e1e:	f006 fd98 	bl	1a952 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
   13e22:	f898 000e 	ldrb.w	r0, [r8, #14]
   13e26:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
   13e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e2e:	0000      	.short	0x0000
   13e30:	200000fc 	.word	0x200000fc
   13e34:	b570      	push	{r4, r5, r6, lr}
   13e36:	4d07      	ldr	r5, [pc, #28]	; (13e54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x768>)
   13e38:	4604      	mov	r4, r0
   13e3a:	f100 0149 	add.w	r1, r0, #73	; 0x49
   13e3e:	6868      	ldr	r0, [r5, #4]
   13e40:	f006 fc04 	bl	1a64c <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
   13e44:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   13e48:	6868      	ldr	r0, [r5, #4]
   13e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13e4e:	f006 bc03 	b.w	1a658 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
   13e52:	0000      	.short	0x0000
   13e54:	200000fc 	.word	0x200000fc
   13e58:	00555555 	.word	0x00555555
   13e5c:	00013675 	.word	0x00013675
   13e60:	00013501 	.word	0x00013501
   13e64:	000135f1 	.word	0x000135f1
   13e68:	00000000 	.word	0x00000000
   13e6c:	000135c9 	.word	0x000135c9
   13e70:	00013621 	.word	0x00013621
   13e74:	0001ac73 	.word	0x0001ac73
   13e78:	0001ac79 	.word	0x0001ac79
   13e7c:	00013869 	.word	0x00013869
   13e80:	0001388d 	.word	0x0001388d
   13e84:	00013d95 	.word	0x00013d95
   13e88:	00013e78 	.word	0x00013e78
   13e8c:	00013e70 	.word	0x00013e70
   13e90:	00013e6c 	.word	0x00013e6c

00013e94 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
   13e94:	b510      	push	{r4, lr}
   13e96:	1e42      	subs	r2, r0, #1
   13e98:	2a02      	cmp	r2, #2
   13e9a:	d901      	bls.n	13ea0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
   13e9c:	21ca      	movs	r1, #202	; 0xca
   13e9e:	e009      	b.n	13eb4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
   13ea0:	1e40      	subs	r0, r0, #1
   13ea2:	2910      	cmp	r1, #16
   13ea4:	d009      	beq.n	13eba <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
   13ea6:	2912      	cmp	r1, #18
   13ea8:	d00c      	beq.n	13ec4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
   13eaa:	2913      	cmp	r1, #19
   13eac:	d00a      	beq.n	13ec4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
   13eae:	2915      	cmp	r1, #21
   13eb0:	d005      	beq.n	13ebe <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
   13eb2:	21d8      	movs	r1, #216	; 0xd8
   13eb4:	202f      	movs	r0, #47	; 0x2f
   13eb6:	f7fc fdad 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13eba:	4905      	ldr	r1, [pc, #20]	; (13ed0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
   13ebc:	e004      	b.n	13ec8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
   13ebe:	4904      	ldr	r1, [pc, #16]	; (13ed0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
   13ec0:	1d89      	adds	r1, r1, #6
   13ec2:	e001      	b.n	13ec8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
   13ec4:	4902      	ldr	r1, [pc, #8]	; (13ed0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
   13ec6:	1f89      	subs	r1, r1, #6
   13ec8:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   13ecc:	bd10      	pop	{r4, pc}
   13ece:	0000      	.short	0x0000
   13ed0:	0001aec6 	.word	0x0001aec6

00013ed4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
   13ed4:	1e42      	subs	r2, r0, #1
   13ed6:	b510      	push	{r4, lr}
   13ed8:	b2d2      	uxtb	r2, r2
   13eda:	2a01      	cmp	r2, #1
   13edc:	d903      	bls.n	13ee6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
   13ede:	291d      	cmp	r1, #29
   13ee0:	d001      	beq.n	13ee6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
   13ee2:	21ee      	movs	r1, #238	; 0xee
   13ee4:	e00d      	b.n	13f02 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
   13ee6:	2913      	cmp	r1, #19
   13ee8:	d013      	beq.n	13f12 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
   13eea:	dc04      	bgt.n	13ef6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
   13eec:	2910      	cmp	r1, #16
   13eee:	d00b      	beq.n	13f08 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
   13ef0:	2912      	cmp	r1, #18
   13ef2:	d104      	bne.n	13efe <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
   13ef4:	e00d      	b.n	13f12 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
   13ef6:	2915      	cmp	r1, #21
   13ef8:	d008      	beq.n	13f0c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
   13efa:	291d      	cmp	r1, #29
   13efc:	d00e      	beq.n	13f1c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
   13efe:	f44f 7181 	mov.w	r1, #258	; 0x102
   13f02:	202f      	movs	r0, #47	; 0x2f
   13f04:	f7fc fd86 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13f08:	4807      	ldr	r0, [pc, #28]	; (13f28 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
   13f0a:	e004      	b.n	13f16 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
   13f0c:	4806      	ldr	r0, [pc, #24]	; (13f28 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
   13f0e:	3008      	adds	r0, #8
   13f10:	e001      	b.n	13f16 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
   13f12:	4805      	ldr	r0, [pc, #20]	; (13f28 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
   13f14:	1d00      	adds	r0, r0, #4
   13f16:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   13f1a:	bd10      	pop	{r4, pc}
   13f1c:	f240 315a 	movw	r1, #858	; 0x35a
   13f20:	fb10 f001 	smulbb	r0, r0, r1
   13f24:	bd10      	pop	{r4, pc}
   13f26:	0000      	.short	0x0000
   13f28:	0001aeb4 	.word	0x0001aeb4

00013f2c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
   13f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f30:	4604      	mov	r4, r0
   13f32:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   13f36:	4615      	mov	r5, r2
   13f38:	460f      	mov	r7, r1
   13f3a:	2800      	cmp	r0, #0
   13f3c:	d157      	bne.n	13fee <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
   13f3e:	4621      	mov	r1, r4
   13f40:	4841      	ldr	r0, [pc, #260]	; (14048 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
   13f42:	f7fb f83b 	bl	efbc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
   13f46:	4606      	mov	r6, r0
   13f48:	2820      	cmp	r0, #32
   13f4a:	d050      	beq.n	13fee <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
   13f4c:	2234      	movs	r2, #52	; 0x34
   13f4e:	2100      	movs	r1, #0
   13f50:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   13f54:	f004 fe59 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   13f58:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
   13f5c:	2601      	movs	r6, #1
   13f5e:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
   13f62:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
   13f66:	b13f      	cbz	r7, 13f78 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
   13f68:	2000      	movs	r0, #0
   13f6a:	f000 fbf9 	bl	14760 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
   13f6e:	f000 0007 	and.w	r0, r0, #7
   13f72:	1c40      	adds	r0, r0, #1
   13f74:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
   13f78:	4620      	mov	r0, r4
   13f7a:	f007 f984 	bl	1b286 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
   13f7e:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
   13f82:	2003      	movs	r0, #3
   13f84:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
   13f88:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
   13f8c:	2700      	movs	r7, #0
   13f8e:	f804 7fb8 	strb.w	r7, [r4, #184]!
   13f92:	f7fa fa7f 	bl	e494 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
   13f96:	8921      	ldrh	r1, [r4, #8]
   13f98:	3cb8      	subs	r4, #184	; 0xb8
   13f9a:	4288      	cmp	r0, r1
   13f9c:	d800      	bhi.n	13fa0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
   13f9e:	4608      	mov	r0, r1
   13fa0:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
   13fa4:	fa1f f880 	uxth.w	r8, r0
   13fa8:	4620      	mov	r0, r4
   13faa:	f006 fe0f 	bl	1abcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   13fae:	b308      	cbz	r0, 13ff4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
   13fb0:	f008 fbcb 	bl	1c74a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   13fb4:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
   13fb8:	b281      	uxth	r1, r0
   13fba:	4628      	mov	r0, r5
   13fbc:	f004 fc6a 	bl	18894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   13fc0:	4428      	add	r0, r5
   13fc2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   13fc6:	34a4      	adds	r4, #164	; 0xa4
   13fc8:	f004 fc30 	bl	1882c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   13fcc:	4641      	mov	r1, r8
   13fce:	f7fa f8f1 	bl	e1b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   13fd2:	6220      	str	r0, [r4, #32]
   13fd4:	f804 7c03 	strb.w	r7, [r4, #-3]
   13fd8:	7126      	strb	r6, [r4, #4]
   13fda:	2001      	movs	r0, #1
   13fdc:	f006 ff63 	bl	1aea6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
   13fe0:	f200 1009 	addw	r0, r0, #265	; 0x109
   13fe4:	1a28      	subs	r0, r5, r0
   13fe6:	62a7      	str	r7, [r4, #40]	; 0x28
   13fe8:	60a0      	str	r0, [r4, #8]
   13fea:	3ca4      	subs	r4, #164	; 0xa4
   13fec:	e017      	b.n	1401e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
   13fee:	200c      	movs	r0, #12
   13ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ff4:	4620      	mov	r0, r4
   13ff6:	f007 f899 	bl	1b12c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   13ffa:	f844 0fbc 	str.w	r0, [r4, #188]!
   13ffe:	f804 6c1b 	strb.w	r6, [r4, #-27]
   14002:	f004 fc13 	bl	1882c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   14006:	4606      	mov	r6, r0
   14008:	2000      	movs	r0, #0
   1400a:	f007 f9e8 	bl	1b3de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
   1400e:	eb00 0108 	add.w	r1, r0, r8
   14012:	4630      	mov	r0, r6
   14014:	f7fa f8ce 	bl	e1b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   14018:	6125      	str	r5, [r4, #16]
   1401a:	60a0      	str	r0, [r4, #8]
   1401c:	3cbc      	subs	r4, #188	; 0xbc
   1401e:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
   14022:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
   14026:	f007 f92c 	bl	1b282 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
   1402a:	b138      	cbz	r0, 1403c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
   1402c:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
   14030:	2100      	movs	r1, #0
   14032:	4620      	mov	r0, r4
   14034:	f006 fdec 	bl	1ac10 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   14038:	2000      	movs	r0, #0
   1403a:	e7d9      	b.n	13ff0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
   1403c:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
   14040:	2030      	movs	r0, #48	; 0x30
   14042:	f7fc fce7 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14046:	0000      	.short	0x0000
   14048:	0001b3f3 	.word	0x0001b3f3

0001404c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
   1404c:	4808      	ldr	r0, [pc, #32]	; (14070 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
   1404e:	b510      	push	{r4, lr}
   14050:	2100      	movs	r1, #0
   14052:	7001      	strb	r1, [r0, #0]
   14054:	2201      	movs	r2, #1
   14056:	7082      	strb	r2, [r0, #2]
   14058:	7041      	strb	r1, [r0, #1]
   1405a:	3018      	adds	r0, #24
   1405c:	f006 fcf8 	bl	1aa50 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
   14060:	4803      	ldr	r0, [pc, #12]	; (14070 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
   14062:	3020      	adds	r0, #32
   14064:	f006 fcf4 	bl	1aa50 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
   14068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1406c:	f006 bf86 	b.w	1af7c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   14070:	2000010c 	.word	0x2000010c

00014074 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
   14074:	4901      	ldr	r1, [pc, #4]	; (1407c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
   14076:	7008      	strb	r0, [r1, #0]
   14078:	4770      	bx	lr
   1407a:	0000      	.short	0x0000
   1407c:	2000010c 	.word	0x2000010c

00014080 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
   14080:	4905      	ldr	r1, [pc, #20]	; (14098 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
   14082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14086:	fbb1 f1f2 	udiv	r1, r1, r2
   1408a:	b510      	push	{r4, lr}
   1408c:	f201 2191 	addw	r1, r1, #657	; 0x291
   14090:	f006 fc78 	bl	1a984 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
   14094:	b280      	uxth	r0, r0
   14096:	bd10      	pop	{r4, pc}
   14098:	0001527d 	.word	0x0001527d

0001409c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
   1409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   140a0:	4c10      	ldr	r4, [pc, #64]	; (140e4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
   140a2:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
   140a6:	f003 fc17 	bl	178d8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   140aa:	4606      	mov	r6, r0
   140ac:	7820      	ldrb	r0, [r4, #0]
   140ae:	b128      	cbz	r0, 140bc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
   140b0:	4632      	mov	r2, r6
   140b2:	4639      	mov	r1, r7
   140b4:	4628      	mov	r0, r5
   140b6:	f005 ff88 	bl	19fca <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
   140ba:	4605      	mov	r5, r0
   140bc:	6860      	ldr	r0, [r4, #4]
   140be:	4285      	cmp	r5, r0
   140c0:	d005      	beq.n	140ce <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
   140c2:	68e1      	ldr	r1, [r4, #12]
   140c4:	1a28      	subs	r0, r5, r0
   140c6:	4408      	add	r0, r1
   140c8:	60e0      	str	r0, [r4, #12]
   140ca:	f7fb f881 	bl	f1d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   140ce:	6065      	str	r5, [r4, #4]
   140d0:	42ae      	cmp	r6, r5
   140d2:	d801      	bhi.n	140d8 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
   140d4:	7860      	ldrb	r0, [r4, #1]
   140d6:	b110      	cbz	r0, 140de <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
   140d8:	2000      	movs	r0, #0
   140da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   140de:	2001      	movs	r0, #1
   140e0:	e7fb      	b.n	140da <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
   140e2:	0000      	.short	0x0000
   140e4:	2000010c 	.word	0x2000010c

000140e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
   140e8:	b510      	push	{r4, lr}
   140ea:	4604      	mov	r4, r0
   140ec:	2905      	cmp	r1, #5
   140ee:	d227      	bcs.n	14140 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
   140f0:	e8df f001 	tbb	[pc, r1]
   140f4:	0e030b05 	.word	0x0e030b05
   140f8:	000f      	.short	0x000f
   140fa:	2100      	movs	r1, #0
   140fc:	e000      	b.n	14100 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
   140fe:	2101      	movs	r1, #1
   14100:	4620      	mov	r0, r4
   14102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14106:	f000 b8f5 	b.w	142f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
   1410a:	2003      	movs	r0, #3
   1410c:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
   14110:	bd10      	pop	{r4, pc}
   14112:	f003 fc1d 	bl	17950 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
   14116:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
   1411a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   1411e:	f008 fbad 	bl	1c87c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   14122:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
   14126:	1a09      	subs	r1, r1, r0
   14128:	4808      	ldr	r0, [pc, #32]	; (1414c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64>)
   1412a:	6842      	ldr	r2, [r0, #4]
   1412c:	440a      	add	r2, r1
   1412e:	6042      	str	r2, [r0, #4]
   14130:	6882      	ldr	r2, [r0, #8]
   14132:	4411      	add	r1, r2
   14134:	6081      	str	r1, [r0, #8]
   14136:	4620      	mov	r0, r4
   14138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1413c:	f007 b834 	b.w	1b1a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fe>
   14140:	f240 7151 	movw	r1, #1873	; 0x751
   14144:	2030      	movs	r0, #48	; 0x30
   14146:	f7fc fc65 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1414a:	0000      	.short	0x0000
   1414c:	2000010c 	.word	0x2000010c

00014150 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
   14150:	b570      	push	{r4, r5, r6, lr}
   14152:	460c      	mov	r4, r1
   14154:	4605      	mov	r5, r0
   14156:	b112      	cbz	r2, 1415e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
   14158:	f240 717b 	movw	r1, #1915	; 0x77b
   1415c:	e010      	b.n	14180 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
   1415e:	f003 fbbb 	bl	178d8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   14162:	4601      	mov	r1, r0
   14164:	2200      	movs	r2, #0
   14166:	4620      	mov	r0, r4
   14168:	f007 f8ef 	bl	1b34a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
   1416c:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
   14170:	462a      	mov	r2, r5
   14172:	4905      	ldr	r1, [pc, #20]	; (14188 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
   14174:	f7fa fde4 	bl	ed40 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
   14178:	2800      	cmp	r0, #0
   1417a:	d104      	bne.n	14186 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
   1417c:	f240 7164 	movw	r1, #1892	; 0x764
   14180:	2030      	movs	r0, #48	; 0x30
   14182:	f7fc fc47 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14186:	bd70      	pop	{r4, r5, r6, pc}
   14188:	0001b493 	.word	0x0001b493
   1418c:	b510      	push	{r4, lr}
   1418e:	280c      	cmp	r0, #12
   14190:	d304      	bcc.n	1419c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
   14192:	f240 3116 	movw	r1, #790	; 0x316
   14196:	2006      	movs	r0, #6
   14198:	f7fc fc3c 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1419c:	4901      	ldr	r1, [pc, #4]	; (141a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
   1419e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   141a2:	bd10      	pop	{r4, pc}
   141a4:	0001b68c 	.word	0x0001b68c
   141a8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   141aa:	4c18      	ldr	r4, [pc, #96]	; (1420c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
   141ac:	2001      	movs	r0, #1
   141ae:	7060      	strb	r0, [r4, #1]
   141b0:	f64f 75ff 	movw	r5, #65535	; 0xffff
   141b4:	e00b      	b.n	141ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
   141b6:	2100      	movs	r1, #0
   141b8:	f005 fca8 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   141bc:	0006      	movs	r6, r0
   141be:	d010      	beq.n	141e2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
   141c0:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
   141c4:	f7fa fdee 	bl	eda4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   141c8:	4630      	mov	r0, r6
   141ca:	f007 f8b1 	bl	1b330 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
   141ce:	4669      	mov	r1, sp
   141d0:	2000      	movs	r0, #0
   141d2:	f005 fca5 	bl	19b20 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   141d6:	b180      	cbz	r0, 141fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
   141d8:	f44f 7187 	mov.w	r1, #270	; 0x10e
   141dc:	2030      	movs	r0, #48	; 0x30
   141de:	f7fc fc19 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   141e2:	f44f 7197 	mov.w	r1, #302	; 0x12e
   141e6:	e7f9      	b.n	141dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
   141e8:	9802      	ldr	r0, [sp, #8]
   141ea:	b130      	cbz	r0, 141fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
   141ec:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
   141f0:	b119      	cbz	r1, 141fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
   141f2:	8800      	ldrh	r0, [r0, #0]
   141f4:	42a8      	cmp	r0, r5
   141f6:	d1de      	bne.n	141b6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
   141f8:	e004      	b.n	14204 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
   141fa:	4668      	mov	r0, sp
   141fc:	f7fc fe42 	bl	10e84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   14200:	2800      	cmp	r0, #0
   14202:	d0f1      	beq.n	141e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
   14204:	2000      	movs	r0, #0
   14206:	7060      	strb	r0, [r4, #1]
   14208:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1420a:	0000      	.short	0x0000
   1420c:	2000010c 	.word	0x2000010c
   14210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14214:	4604      	mov	r4, r0
   14216:	4836      	ldr	r0, [pc, #216]	; (142f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
   14218:	461e      	mov	r6, r3
   1421a:	4690      	mov	r8, r2
   1421c:	7880      	ldrb	r0, [r0, #2]
   1421e:	4689      	mov	r9, r1
   14220:	2500      	movs	r5, #0
   14222:	b368      	cbz	r0, 14280 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
   14224:	f7fc f876 	bl	10314 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
   14228:	b350      	cbz	r0, 14280 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
   1422a:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
   1422e:	2802      	cmp	r0, #2
   14230:	d326      	bcc.n	14280 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
   14232:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   14236:	2802      	cmp	r0, #2
   14238:	d022      	beq.n	14280 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
   1423a:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
   1423e:	b9f8      	cbnz	r0, 14280 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
   14240:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
   14244:	f7ff ffa2 	bl	1418c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   14248:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   1424c:	b281      	uxth	r1, r0
   1424e:	8031      	strh	r1, [r6, #0]
   14250:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   14254:	2700      	movs	r7, #0
   14256:	2801      	cmp	r0, #1
   14258:	d015      	beq.n	14286 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
   1425a:	68e0      	ldr	r0, [r4, #12]
   1425c:	f004 fb1a 	bl	18894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   14260:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
   14264:	b280      	uxth	r0, r0
   14266:	4442      	add	r2, r8
   14268:	eba2 0109 	sub.w	r1, r2, r9
   1426c:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
   14270:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
   14274:	1a82      	subs	r2, r0, r2
   14276:	fb01 7502 	mla	r5, r1, r2, r7
   1427a:	2001      	movs	r0, #1
   1427c:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
   14280:	4628      	mov	r0, r5
   14282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14286:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
   1428a:	2803      	cmp	r0, #3
   1428c:	d02c      	beq.n	142e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
   1428e:	2101      	movs	r1, #1
   14290:	2000      	movs	r0, #0
   14292:	f005 ff54 	bl	1a13e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
   14296:	6a21      	ldr	r1, [r4, #32]
   14298:	1847      	adds	r7, r0, r1
   1429a:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   1429e:	8831      	ldrh	r1, [r6, #0]
   142a0:	34d0      	adds	r4, #208	; 0xd0
   142a2:	f004 faf7 	bl	18894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   142a6:	6da2      	ldr	r2, [r4, #88]	; 0x58
   142a8:	6e21      	ldr	r1, [r4, #96]	; 0x60
   142aa:	1a82      	subs	r2, r0, r2
   142ac:	fb01 5502 	mla	r5, r1, r2, r5
   142b0:	65a0      	str	r0, [r4, #88]	; 0x58
   142b2:	8831      	ldrh	r1, [r6, #0]
   142b4:	4638      	mov	r0, r7
   142b6:	f004 faed 	bl	18894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   142ba:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   142bc:	66a0      	str	r0, [r4, #104]	; 0x68
   142be:	1a41      	subs	r1, r0, r1
   142c0:	440d      	add	r5, r1
   142c2:	8831      	ldrh	r1, [r6, #0]
   142c4:	f854 0cc4 	ldr.w	r0, [r4, #-196]
   142c8:	f004 fae4 	bl	18894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   142cc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   142ce:	4442      	add	r2, r8
   142d0:	eba2 0109 	sub.w	r1, r2, r9
   142d4:	6e22      	ldr	r2, [r4, #96]	; 0x60
   142d6:	1a89      	subs	r1, r1, r2
   142d8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   142da:	1e49      	subs	r1, r1, #1
   142dc:	1a82      	subs	r2, r0, r2
   142de:	fb01 5502 	mla	r5, r1, r2, r5
   142e2:	66e0      	str	r0, [r4, #108]	; 0x6c
   142e4:	3cd0      	subs	r4, #208	; 0xd0
   142e6:	e7c8      	b.n	1427a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
   142e8:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   142ec:	e7d3      	b.n	14296 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
   142ee:	0000      	.short	0x0000
   142f0:	2000010c 	.word	0x2000010c
   142f4:	b538      	push	{r3, r4, r5, lr}
   142f6:	2500      	movs	r5, #0
   142f8:	4604      	mov	r4, r0
   142fa:	2901      	cmp	r1, #1
   142fc:	d102      	bne.n	14304 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
   142fe:	4811      	ldr	r0, [pc, #68]	; (14344 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
   14300:	7840      	ldrb	r0, [r0, #1]
   14302:	b178      	cbz	r0, 14324 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
   14304:	2004      	movs	r0, #4
   14306:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
   1430a:	bf00      	nop
   1430c:	f006 ff45 	bl	1b19a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
   14310:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
   14314:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
   14318:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
   1431c:	f504 7495 	add.w	r4, r4, #298	; 0x12a
   14320:	77e5      	strb	r5, [r4, #31]
   14322:	bd38      	pop	{r3, r4, r5, pc}
   14324:	9500      	str	r5, [sp, #0]
   14326:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
   1432a:	2301      	movs	r3, #1
   1432c:	2200      	movs	r2, #0
   1432e:	4620      	mov	r0, r4
   14330:	f000 f80a 	bl	14348 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
   14334:	2800      	cmp	r0, #0
   14336:	d0e9      	beq.n	1430c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
   14338:	f240 61c9 	movw	r1, #1737	; 0x6c9
   1433c:	2030      	movs	r0, #48	; 0x30
   1433e:	f7fc fb69 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14342:	0000      	.short	0x0000
   14344:	2000010c 	.word	0x2000010c
   14348:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1434c:	4604      	mov	r4, r0
   1434e:	b085      	sub	sp, #20
   14350:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   14354:	469a      	mov	sl, r3
   14356:	e9cd 3000 	strd	r3, r0, [sp]
   1435a:	460f      	mov	r7, r1
   1435c:	f008 f9f5 	bl	1c74a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   14360:	4605      	mov	r5, r0
   14362:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
   14366:	f7ff ff11 	bl	1418c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   1436a:	4428      	add	r0, r5
   1436c:	f8ad 0008 	strh.w	r0, [sp, #8]
   14370:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
   14374:	280d      	cmp	r0, #13
   14376:	d004      	beq.n	14382 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
   14378:	2000      	movs	r0, #0
   1437a:	9003      	str	r0, [sp, #12]
   1437c:	9807      	ldr	r0, [sp, #28]
   1437e:	b110      	cbz	r0, 14386 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
   14380:	e02e      	b.n	143e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
   14382:	2001      	movs	r0, #1
   14384:	e7f9      	b.n	1437a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
   14386:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   1438a:	2803      	cmp	r0, #3
   1438c:	d128      	bne.n	143e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
   1438e:	9803      	ldr	r0, [sp, #12]
   14390:	b330      	cbz	r0, 143e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
   14392:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
   14396:	42b8      	cmp	r0, r7
   14398:	d122      	bne.n	143e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
   1439a:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   1439e:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   143a2:	68e0      	ldr	r0, [r4, #12]
   143a4:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   143a8:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
   143ac:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
   143b0:	4408      	add	r0, r1
   143b2:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
   143b6:	4620      	mov	r0, r4
   143b8:	f007 f97e 	bl	1b6b8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
   143bc:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
   143c0:	6220      	str	r0, [r4, #32]
   143c2:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
   143c6:	83a0      	strh	r0, [r4, #28]
   143c8:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
   143cc:	60e0      	str	r0, [r4, #12]
   143ce:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
   143d2:	82a0      	strh	r0, [r4, #20]
   143d4:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
   143d8:	82e0      	strh	r0, [r4, #22]
   143da:	2002      	movs	r0, #2
   143dc:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
   143e0:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
   143e4:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
   143e8:	1a38      	subs	r0, r7, r0
   143ea:	fa0f f980 	sxth.w	r9, r0
   143ee:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
   143f2:	1a38      	subs	r0, r7, r0
   143f4:	fa0f f880 	sxth.w	r8, r0
   143f8:	f1b8 0f00 	cmp.w	r8, #0
   143fc:	da06      	bge.n	1440c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
   143fe:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
   14402:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
   14406:	2001      	movs	r0, #1
   14408:	46c8      	mov	r8, r9
   1440a:	9000      	str	r0, [sp, #0]
   1440c:	ab02      	add	r3, sp, #8
   1440e:	464a      	mov	r2, r9
   14410:	4641      	mov	r1, r8
   14412:	4620      	mov	r0, r4
   14414:	f7ff fefc 	bl	14210 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
   14418:	9004      	str	r0, [sp, #16]
   1441a:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   1441e:	f8df b33c 	ldr.w	fp, [pc, #828]	; 1475c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
   14422:	b140      	cbz	r0, 14436 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
   14424:	2801      	cmp	r0, #1
   14426:	d07d      	beq.n	14524 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
   14428:	2802      	cmp	r0, #2
   1442a:	d052      	beq.n	144d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
   1442c:	2803      	cmp	r0, #3
   1442e:	d07a      	beq.n	14526 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
   14430:	f240 514d 	movw	r1, #1357	; 0x54d
   14434:	e18e      	b.n	14754 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
   14436:	2101      	movs	r1, #1
   14438:	2000      	movs	r0, #0
   1443a:	f005 fe80 	bl	1a13e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
   1443e:	4606      	mov	r6, r0
   14440:	6a20      	ldr	r0, [r4, #32]
   14442:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   14446:	4430      	add	r0, r6
   14448:	f004 fa24 	bl	18894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   1444c:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
   14450:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   14454:	68e0      	ldr	r0, [r4, #12]
   14456:	f004 fa1d 	bl	18894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   1445a:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
   1445e:	a901      	add	r1, sp, #4
   14460:	4668      	mov	r0, sp
   14462:	f003 f99d 	bl	177a0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
   14466:	e9dd 1200 	ldrd	r1, r2, [sp]
   1446a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
   1446e:	f7fa ff65 	bl	f33c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
   14472:	4681      	mov	r9, r0
   14474:	4620      	mov	r0, r4
   14476:	f006 fe82 	bl	1b17e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
   1447a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   1447e:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
   14482:	f008 fa09 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   14486:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   1448a:	4401      	add	r1, r0
   1448c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   14490:	fbb1 f0f0 	udiv	r0, r1, r0
   14494:	6a21      	ldr	r1, [r4, #32]
   14496:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   1449a:	4431      	add	r1, r6
   1449c:	1a08      	subs	r0, r1, r0
   1449e:	1a81      	subs	r1, r0, r2
   144a0:	4441      	add	r1, r8
   144a2:	3920      	subs	r1, #32
   144a4:	eba1 0609 	sub.w	r6, r1, r9
   144a8:	0050      	lsls	r0, r2, #1
   144aa:	8ba1      	ldrh	r1, [r4, #28]
   144ac:	3060      	adds	r0, #96	; 0x60
   144ae:	4401      	add	r1, r0
   144b0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   144b4:	f006 fed3 	bl	1b25e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
   144b8:	3022      	adds	r0, #34	; 0x22
   144ba:	f8cb 0010 	str.w	r0, [fp, #16]
   144be:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
   144c2:	4659      	mov	r1, fp
   144c4:	1a30      	subs	r0, r6, r0
   144c6:	f5b0 7fda 	cmp.w	r0, #436	; 0x1b4
   144ca:	d859      	bhi.n	14580 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
   144cc:	f240 41e6 	movw	r1, #1254	; 0x4e6
   144d0:	e140      	b.n	14754 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
   144d2:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   144d6:	6a20      	ldr	r0, [r4, #32]
   144d8:	4408      	add	r0, r1
   144da:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   144de:	f004 f9d9 	bl	18894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   144e2:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
   144e6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   144ea:	68e0      	ldr	r0, [r4, #12]
   144ec:	f004 f9d2 	bl	18894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   144f0:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
   144f4:	4620      	mov	r0, r4
   144f6:	f006 fe42 	bl	1b17e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
   144fa:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
   144fe:	bb10      	cbnz	r0, 14546 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
   14500:	f1ba 0f00 	cmp.w	sl, #0
   14504:	d01f      	beq.n	14546 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
   14506:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
   1450a:	4640      	mov	r0, r8
   1450c:	f008 f9c4 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   14510:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   14514:	4401      	add	r1, r0
   14516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1451a:	fbb1 f0f0 	udiv	r0, r1, r0
   1451e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   14522:	e001      	b.n	14528 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
   14524:	e02d      	b.n	14582 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
   14526:	e049      	b.n	145bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
   14528:	4408      	add	r0, r1
   1452a:	6a22      	ldr	r2, [r4, #32]
   1452c:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   14530:	4411      	add	r1, r2
   14532:	1a0e      	subs	r6, r1, r0
   14534:	4640      	mov	r0, r8
   14536:	f008 f9a1 	bl	1c87c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1453a:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
   1453e:	1a08      	subs	r0, r1, r0
   14540:	4406      	add	r6, r0
   14542:	3e20      	subs	r6, #32
   14544:	e006      	b.n	14554 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
   14546:	6a21      	ldr	r1, [r4, #32]
   14548:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   1454c:	4408      	add	r0, r1
   1454e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   14552:	1a46      	subs	r6, r0, r1
   14554:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   14558:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
   1455c:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
   14560:	fb01 0002 	mla	r0, r1, r2, r0
   14564:	0040      	lsls	r0, r0, #1
   14566:	8ba1      	ldrh	r1, [r4, #28]
   14568:	3060      	adds	r0, #96	; 0x60
   1456a:	4401      	add	r1, r0
   1456c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   14570:	f006 fe75 	bl	1b25e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
   14574:	f8cb 0010 	str.w	r0, [fp, #16]
   14578:	2001      	movs	r0, #1
   1457a:	4659      	mov	r1, fp
   1457c:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
   14580:	e062      	b.n	14648 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
   14582:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
   14586:	68e0      	ldr	r0, [r4, #12]
   14588:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
   1458c:	1a86      	subs	r6, r0, r2
   1458e:	eb01 0009 	add.w	r0, r1, r9
   14592:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
   14596:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
   1459a:	1a40      	subs	r0, r0, r1
   1459c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   145a0:	1e40      	subs	r0, r0, #1
   145a2:	fb0c 3101 	mla	r1, ip, r1, r3
   145a6:	fb00 1002 	mla	r0, r0, r2, r1
   145aa:	0040      	lsls	r0, r0, #1
   145ac:	8ba1      	ldrh	r1, [r4, #28]
   145ae:	3060      	adds	r0, #96	; 0x60
   145b0:	4401      	add	r1, r0
   145b2:	fb06 f608 	mul.w	r6, r6, r8
   145b6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   145ba:	e040      	b.n	1463e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
   145bc:	68e0      	ldr	r0, [r4, #12]
   145be:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   145c2:	fb00 f008 	mul.w	r0, r0, r8
   145c6:	fb08 0611 	mls	r6, r8, r1, r0
   145ca:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
   145ce:	2824      	cmp	r0, #36	; 0x24
   145d0:	d003      	beq.n	145da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
   145d2:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
   145d6:	2824      	cmp	r0, #36	; 0x24
   145d8:	d109      	bne.n	145ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
   145da:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
   145de:	1a38      	subs	r0, r7, r0
   145e0:	b200      	sxth	r0, r0
   145e2:	2800      	cmp	r0, #0
   145e4:	db03      	blt.n	145ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
   145e6:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
   145ea:	b100      	cbz	r0, 145ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
   145ec:	9001      	str	r0, [sp, #4]
   145ee:	9800      	ldr	r0, [sp, #0]
   145f0:	b1d8      	cbz	r0, 1462a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
   145f2:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
   145f6:	b9c0      	cbnz	r0, 1462a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
   145f8:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
   145fc:	2800      	cmp	r0, #0
   145fe:	d07d      	beq.n	146fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
   14600:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   14604:	f008 f948 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   14608:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   1460c:	4401      	add	r1, r0
   1460e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   14612:	fbb1 f0f0 	udiv	r0, r1, r0
   14616:	1a36      	subs	r6, r6, r0
   14618:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   1461c:	f008 f92e 	bl	1c87c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   14620:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
   14624:	1a08      	subs	r0, r1, r0
   14626:	4406      	add	r6, r0
   14628:	3e20      	subs	r6, #32
   1462a:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
   1462e:	eb01 0009 	add.w	r0, r1, r9
   14632:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   14636:	4348      	muls	r0, r1
   14638:	0041      	lsls	r1, r0, #1
   1463a:	3160      	adds	r1, #96	; 0x60
   1463c:	9801      	ldr	r0, [sp, #4]
   1463e:	f006 fe0e 	bl	1b25e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
   14642:	4659      	mov	r1, fp
   14644:	f8cb 0010 	str.w	r0, [fp, #16]
   14648:	9804      	ldr	r0, [sp, #16]
   1464a:	6909      	ldr	r1, [r1, #16]
   1464c:	1a33      	subs	r3, r6, r0
   1464e:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
   14652:	68e0      	ldr	r0, [r4, #12]
   14654:	1b80      	subs	r0, r0, r6
   14656:	f2a0 2043 	subw	r0, r0, #579	; 0x243
   1465a:	f8cb 0014 	str.w	r0, [fp, #20]
   1465e:	4281      	cmp	r1, r0
   14660:	d800      	bhi.n	14664 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
   14662:	4608      	mov	r0, r1
   14664:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   14668:	2000      	movs	r0, #0
   1466a:	7028      	strb	r0, [r5, #0]
   1466c:	2064      	movs	r0, #100	; 0x64
   1466e:	8128      	strh	r0, [r5, #8]
   14670:	4619      	mov	r1, r3
   14672:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
   14676:	f7f9 fd9d 	bl	e1b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1467a:	60e8      	str	r0, [r5, #12]
   1467c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14680:	f006 f951 	bl	1a926 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   14684:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   14688:	4408      	add	r0, r1
   1468a:	6068      	str	r0, [r5, #4]
   1468c:	68e8      	ldr	r0, [r5, #12]
   1468e:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
   14692:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
   14696:	2001      	movs	r0, #1
   14698:	72a8      	strb	r0, [r5, #10]
   1469a:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
   1469e:	1bc9      	subs	r1, r1, r7
   146a0:	b209      	sxth	r1, r1
   146a2:	2900      	cmp	r1, #0
   146a4:	dd01      	ble.n	146aa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
   146a6:	2103      	movs	r1, #3
   146a8:	72a9      	strb	r1, [r5, #10]
   146aa:	9903      	ldr	r1, [sp, #12]
   146ac:	b339      	cbz	r1, 146fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
   146ae:	f1ba 0f00 	cmp.w	sl, #0
   146b2:	d01f      	beq.n	146f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
   146b4:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   146b8:	b38a      	cbz	r2, 1471e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ce>
   146ba:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
   146be:	bf00      	nop
   146c0:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
   146c4:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   146c8:	1c49      	adds	r1, r1, #1
   146ca:	434b      	muls	r3, r1
   146cc:	4293      	cmp	r3, r2
   146ce:	d211      	bcs.n	146f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
   146d0:	7aa9      	ldrb	r1, [r5, #10]
   146d2:	1e49      	subs	r1, r1, #1
   146d4:	2900      	cmp	r1, #0
   146d6:	dd0d      	ble.n	146f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
   146d8:	72a8      	strb	r0, [r5, #10]
   146da:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
   146de:	1c40      	adds	r0, r0, #1
   146e0:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
   146e4:	2001      	movs	r0, #1
   146e6:	f000 f83b 	bl	14760 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
   146ea:	f000 0007 	and.w	r0, r0, #7
   146ee:	1c40      	adds	r0, r0, #1
   146f0:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
   146f4:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
   146f8:	4629      	mov	r1, r5
   146fa:	e001      	b.n	14700 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
   146fc:	e00c      	b.n	14718 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
   146fe:	e00f      	b.n	14720 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
   14700:	f006 fdbf 	bl	1b282 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
   14704:	b320      	cbz	r0, 14750 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
   14706:	9807      	ldr	r0, [sp, #28]
   14708:	f080 0001 	eor.w	r0, r0, #1
   1470c:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
   14710:	2000      	movs	r0, #0
   14712:	b009      	add	sp, #36	; 0x24
   14714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14718:	f44f 61a7 	mov.w	r1, #1336	; 0x538
   1471c:	e01a      	b.n	14754 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
   1471e:	e015      	b.n	1474c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
   14720:	f1ba 0f00 	cmp.w	sl, #0
   14724:	d1c6      	bne.n	146b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
   14726:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   1472a:	2800      	cmp	r0, #0
   1472c:	d0e2      	beq.n	146f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
   1472e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   14732:	68e0      	ldr	r0, [r4, #12]
   14734:	1a41      	subs	r1, r0, r1
   14736:	4628      	mov	r0, r5
   14738:	f005 fd13 	bl	1a162 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   1473c:	0400      	lsls	r0, r0, #16
   1473e:	0c00      	lsrs	r0, r0, #16
   14740:	d0d8      	beq.n	146f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
   14742:	9912      	ldr	r1, [sp, #72]	; 0x48
   14744:	b101      	cbz	r1, 14748 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
   14746:	8008      	strh	r0, [r1, #0]
   14748:	2001      	movs	r0, #1
   1474a:	e7e2      	b.n	14712 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
   1474c:	2100      	movs	r1, #0
   1474e:	e7b7      	b.n	146c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
   14750:	f240 5197 	movw	r1, #1431	; 0x597
   14754:	2030      	movs	r0, #48	; 0x30
   14756:	f7fc f95d 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1475a:	0000      	.short	0x0000
   1475c:	2000010c 	.word	0x2000010c
   14760:	b108      	cbz	r0, 14766 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
   14762:	4803      	ldr	r0, [pc, #12]	; (14770 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
   14764:	e001      	b.n	1476a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61a>
   14766:	4802      	ldr	r0, [pc, #8]	; (14770 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
   14768:	3008      	adds	r0, #8
   1476a:	f7fe bc7b 	b.w	13064 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
   1476e:	0000      	.short	0x0000
   14770:	20000124 	.word	0x20000124
   14774:	b570      	push	{r4, r5, r6, lr}
   14776:	4604      	mov	r4, r0
   14778:	f7f9 fe8c 	bl	e494 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
   1477c:	2864      	cmp	r0, #100	; 0x64
   1477e:	d901      	bls.n	14784 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x634>
   14780:	4605      	mov	r5, r0
   14782:	e000      	b.n	14786 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x636>
   14784:	2564      	movs	r5, #100	; 0x64
   14786:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   1478a:	2128      	movs	r1, #40	; 0x28
   1478c:	f006 fc68 	bl	1b060 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
   14790:	4428      	add	r0, r5
   14792:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   14796:	f200 203d 	addw	r0, r0, #573	; 0x23d
   1479a:	180e      	adds	r6, r1, r0
   1479c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   147a0:	2128      	movs	r1, #40	; 0x28
   147a2:	f006 fc5d 	bl	1b060 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
   147a6:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
   147aa:	4620      	mov	r0, r4
   147ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   147ae:	f006 f859 	bl	1a864 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
   147b2:	4605      	mov	r5, r0
   147b4:	4632      	mov	r2, r6
   147b6:	4620      	mov	r0, r4
   147b8:	68e1      	ldr	r1, [r4, #12]
   147ba:	f006 f853 	bl	1a864 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
   147be:	4907      	ldr	r1, [pc, #28]	; (147dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>)
   147c0:	4285      	cmp	r5, r0
   147c2:	6088      	str	r0, [r1, #8]
   147c4:	d200      	bcs.n	147c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x678>
   147c6:	4628      	mov	r0, r5
   147c8:	6048      	str	r0, [r1, #4]
   147ca:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   147ce:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
   147d2:	60c8      	str	r0, [r1, #12]
   147d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   147d8:	f7fa bcfa 	b.w	f1d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   147dc:	2000010c 	.word	0x2000010c

000147e0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
   147e0:	4806      	ldr	r0, [pc, #24]	; (147fc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
   147e2:	4905      	ldr	r1, [pc, #20]	; (147f8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
   147e4:	6501      	str	r1, [r0, #80]	; 0x50
   147e6:	4906      	ldr	r1, [pc, #24]	; (14800 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
   147e8:	6541      	str	r1, [r0, #84]	; 0x54
   147ea:	4807      	ldr	r0, [pc, #28]	; (14808 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
   147ec:	4905      	ldr	r1, [pc, #20]	; (14804 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
   147ee:	6501      	str	r1, [r0, #80]	; 0x50
   147f0:	4906      	ldr	r1, [pc, #24]	; (1480c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
   147f2:	6541      	str	r1, [r0, #84]	; 0x54
   147f4:	4770      	bx	lr
   147f6:	0000      	.short	0x0000
   147f8:	00015d41 	.word	0x00015d41
   147fc:	20000148 	.word	0x20000148
   14800:	00015e1d 	.word	0x00015e1d
   14804:	00016499 	.word	0x00016499
   14808:	200001ac 	.word	0x200001ac
   1480c:	000164c9 	.word	0x000164c9

00014810 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
   14810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14812:	460d      	mov	r5, r1
   14814:	4607      	mov	r7, r0
   14816:	2100      	movs	r1, #0
   14818:	f005 f978 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1481c:	1e04      	subs	r4, r0, #0
   1481e:	d04f      	beq.n	148c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
   14820:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
   14824:	2800      	cmp	r0, #0
   14826:	d04b      	beq.n	148c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
   14828:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
   1482c:	f88d 0000 	strb.w	r0, [sp]
   14830:	9800      	ldr	r0, [sp, #0]
   14832:	9000      	str	r0, [sp, #0]
   14834:	f89d 0000 	ldrb.w	r0, [sp]
   14838:	2600      	movs	r6, #0
   1483a:	b1d8      	cbz	r0, 14874 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
   1483c:	706e      	strb	r6, [r5, #1]
   1483e:	2007      	movs	r0, #7
   14840:	7028      	strb	r0, [r5, #0]
   14842:	e00b      	b.n	1485c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
   14844:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
   14848:	84a6      	strh	r6, [r4, #36]	; 0x24
   1484a:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
   1484e:	6068      	str	r0, [r5, #4]
   14850:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
   14854:	60a8      	str	r0, [r5, #8]
   14856:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
   1485a:	81a8      	strh	r0, [r5, #12]
   1485c:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
   14860:	f88d 0000 	strb.w	r0, [sp]
   14864:	9800      	ldr	r0, [sp, #0]
   14866:	9000      	str	r0, [sp, #0]
   14868:	f89d 0000 	ldrb.w	r0, [sp]
   1486c:	2800      	cmp	r0, #0
   1486e:	d1e9      	bne.n	14844 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
   14870:	712e      	strb	r6, [r5, #4]
   14872:	e10b      	b.n	14a8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   14874:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   14878:	b3a0      	cbz	r0, 148e4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
   1487a:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   1487e:	280b      	cmp	r0, #11
   14880:	d016      	beq.n	148b0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
   14882:	280c      	cmp	r0, #12
   14884:	d004      	beq.n	14890 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
   14886:	f640 21ee 	movw	r1, #2798	; 0xaee
   1488a:	2031      	movs	r0, #49	; 0x31
   1488c:	f7fc f8c2 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14890:	8820      	ldrh	r0, [r4, #0]
   14892:	f7fc fcd9 	bl	11248 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   14896:	4607      	mov	r7, r0
   14898:	f004 fffe 	bl	19898 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   1489c:	b978      	cbnz	r0, 148be <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
   1489e:	706e      	strb	r6, [r5, #1]
   148a0:	200c      	movs	r0, #12
   148a2:	7028      	strb	r0, [r5, #0]
   148a4:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
   148a8:	7128      	strb	r0, [r5, #4]
   148aa:	8820      	ldrh	r0, [r4, #0]
   148ac:	80e8      	strh	r0, [r5, #6]
   148ae:	e013      	b.n	148d8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
   148b0:	8820      	ldrh	r0, [r4, #0]
   148b2:	f7fc fcc9 	bl	11248 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   148b6:	4607      	mov	r7, r0
   148b8:	f004 ffee 	bl	19898 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   148bc:	b108      	cbz	r0, 148c2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
   148be:	2000      	movs	r0, #0
   148c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   148c2:	706e      	strb	r6, [r5, #1]
   148c4:	200b      	movs	r0, #11
   148c6:	7028      	strb	r0, [r5, #0]
   148c8:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
   148cc:	7128      	strb	r0, [r5, #4]
   148ce:	8820      	ldrh	r0, [r4, #0]
   148d0:	80e8      	strh	r0, [r5, #6]
   148d2:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
   148d6:	7228      	strb	r0, [r5, #8]
   148d8:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
   148dc:	4638      	mov	r0, r7
   148de:	f004 fff6 	bl	198ce <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   148e2:	e0d3      	b.n	14a8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   148e4:	e7ff      	b.n	148e6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
   148e6:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
   148ea:	f88d 0000 	strb.w	r0, [sp]
   148ee:	9800      	ldr	r0, [sp, #0]
   148f0:	9000      	str	r0, [sp, #0]
   148f2:	f89d 0000 	ldrb.w	r0, [sp]
   148f6:	b130      	cbz	r0, 14906 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
   148f8:	706e      	strb	r6, [r5, #1]
   148fa:	200e      	movs	r0, #14
   148fc:	7028      	strb	r0, [r5, #0]
   148fe:	80af      	strh	r7, [r5, #4]
   14900:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
   14904:	e0c2      	b.n	14a8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   14906:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
   1490a:	f88d 0000 	strb.w	r0, [sp]
   1490e:	9800      	ldr	r0, [sp, #0]
   14910:	9000      	str	r0, [sp, #0]
   14912:	f89d 0000 	ldrb.w	r0, [sp]
   14916:	b198      	cbz	r0, 14940 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
   14918:	706e      	strb	r6, [r5, #1]
   1491a:	2008      	movs	r0, #8
   1491c:	7028      	strb	r0, [r5, #0]
   1491e:	8820      	ldrh	r0, [r4, #0]
   14920:	80a8      	strh	r0, [r5, #4]
   14922:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   14926:	f8c5 1006 	str.w	r1, [r5, #6]
   1492a:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
   1492e:	f8c5 100a 	str.w	r1, [r5, #10]
   14932:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
   14936:	81e8      	strh	r0, [r5, #14]
   14938:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
   1493c:	7026      	strb	r6, [r4, #0]
   1493e:	e0a5      	b.n	14a8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   14940:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
   14944:	f88d 0000 	strb.w	r0, [sp]
   14948:	9800      	ldr	r0, [sp, #0]
   1494a:	9000      	str	r0, [sp, #0]
   1494c:	f89d 0000 	ldrb.w	r0, [sp]
   14950:	b1a0      	cbz	r0, 1497c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
   14952:	706e      	strb	r6, [r5, #1]
   14954:	2016      	movs	r0, #22
   14956:	7028      	strb	r0, [r5, #0]
   14958:	e005      	b.n	14966 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
   1495a:	bf00      	nop
   1495c:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
   14960:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
   14964:	6068      	str	r0, [r5, #4]
   14966:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
   1496a:	f88d 0000 	strb.w	r0, [sp]
   1496e:	9800      	ldr	r0, [sp, #0]
   14970:	9000      	str	r0, [sp, #0]
   14972:	f89d 0000 	ldrb.w	r0, [sp]
   14976:	2800      	cmp	r0, #0
   14978:	d1f0      	bne.n	1495c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
   1497a:	e087      	b.n	14a8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   1497c:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
   14980:	f88d 0000 	strb.w	r0, [sp]
   14984:	9800      	ldr	r0, [sp, #0]
   14986:	9000      	str	r0, [sp, #0]
   14988:	f89d 0000 	ldrb.w	r0, [sp]
   1498c:	b170      	cbz	r0, 149ac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
   1498e:	706e      	strb	r6, [r5, #1]
   14990:	2006      	movs	r0, #6
   14992:	7028      	strb	r0, [r5, #0]
   14994:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
   14998:	6068      	str	r0, [r5, #4]
   1499a:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
   1499e:	60a8      	str	r0, [r5, #8]
   149a0:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
   149a4:	60e8      	str	r0, [r5, #12]
   149a6:	f504 7403 	add.w	r4, r4, #524	; 0x20c
   149aa:	e03a      	b.n	14a22 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
   149ac:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
   149b0:	f88d 0000 	strb.w	r0, [sp]
   149b4:	9800      	ldr	r0, [sp, #0]
   149b6:	9000      	str	r0, [sp, #0]
   149b8:	f89d 0000 	ldrb.w	r0, [sp]
   149bc:	b1d0      	cbz	r0, 149f4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
   149be:	706e      	strb	r6, [r5, #1]
   149c0:	2012      	movs	r0, #18
   149c2:	7028      	strb	r0, [r5, #0]
   149c4:	e00b      	b.n	149de <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
   149c6:	bf00      	nop
   149c8:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
   149cc:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
   149d0:	6068      	str	r0, [r5, #4]
   149d2:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   149d6:	60a8      	str	r0, [r5, #8]
   149d8:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
   149dc:	60e8      	str	r0, [r5, #12]
   149de:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
   149e2:	f88d 0000 	strb.w	r0, [sp]
   149e6:	9800      	ldr	r0, [sp, #0]
   149e8:	9000      	str	r0, [sp, #0]
   149ea:	f89d 0000 	ldrb.w	r0, [sp]
   149ee:	2800      	cmp	r0, #0
   149f0:	d1ea      	bne.n	149c8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
   149f2:	e04b      	b.n	14a8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   149f4:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
   149f8:	f88d 0000 	strb.w	r0, [sp]
   149fc:	9800      	ldr	r0, [sp, #0]
   149fe:	9000      	str	r0, [sp, #0]
   14a00:	f89d 0000 	ldrb.w	r0, [sp]
   14a04:	b180      	cbz	r0, 14a28 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
   14a06:	706e      	strb	r6, [r5, #1]
   14a08:	2018      	movs	r0, #24
   14a0a:	7028      	strb	r0, [r5, #0]
   14a0c:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
   14a10:	6068      	str	r0, [r5, #4]
   14a12:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
   14a16:	60a8      	str	r0, [r5, #8]
   14a18:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
   14a1c:	81a8      	strh	r0, [r5, #12]
   14a1e:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
   14a22:	f804 6c02 	strb.w	r6, [r4, #-2]
   14a26:	e031      	b.n	14a8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   14a28:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
   14a2c:	f88d 0000 	strb.w	r0, [sp]
   14a30:	9800      	ldr	r0, [sp, #0]
   14a32:	9000      	str	r0, [sp, #0]
   14a34:	f89d 0000 	ldrb.w	r0, [sp]
   14a38:	b138      	cbz	r0, 14a4a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
   14a3a:	2019      	movs	r0, #25
   14a3c:	7028      	strb	r0, [r5, #0]
   14a3e:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
   14a42:	6068      	str	r0, [r5, #4]
   14a44:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
   14a48:	e020      	b.n	14a8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   14a4a:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
   14a4e:	f88d 0000 	strb.w	r0, [sp]
   14a52:	9800      	ldr	r0, [sp, #0]
   14a54:	9000      	str	r0, [sp, #0]
   14a56:	f89d 0000 	ldrb.w	r0, [sp]
   14a5a:	2800      	cmp	r0, #0
   14a5c:	f43f af30 	beq.w	148c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
   14a60:	706e      	strb	r6, [r5, #1]
   14a62:	2013      	movs	r0, #19
   14a64:	7028      	strb	r0, [r5, #0]
   14a66:	e007      	b.n	14a78 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
   14a68:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
   14a6c:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
   14a70:	6068      	str	r0, [r5, #4]
   14a72:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
   14a76:	8128      	strh	r0, [r5, #8]
   14a78:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
   14a7c:	f88d 0000 	strb.w	r0, [sp]
   14a80:	9800      	ldr	r0, [sp, #0]
   14a82:	9000      	str	r0, [sp, #0]
   14a84:	f89d 0000 	ldrb.w	r0, [sp]
   14a88:	2800      	cmp	r0, #0
   14a8a:	d1ed      	bne.n	14a68 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
   14a8c:	2001      	movs	r0, #1
   14a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014a90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
   14a90:	481b      	ldr	r0, [pc, #108]	; (14b00 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
   14a92:	491a      	ldr	r1, [pc, #104]	; (14afc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
   14a94:	6081      	str	r1, [r0, #8]
   14a96:	491b      	ldr	r1, [pc, #108]	; (14b04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
   14a98:	6041      	str	r1, [r0, #4]
   14a9a:	491b      	ldr	r1, [pc, #108]	; (14b08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
   14a9c:	6001      	str	r1, [r0, #0]
   14a9e:	491b      	ldr	r1, [pc, #108]	; (14b0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
   14aa0:	6281      	str	r1, [r0, #40]	; 0x28
   14aa2:	491b      	ldr	r1, [pc, #108]	; (14b10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
   14aa4:	62c1      	str	r1, [r0, #44]	; 0x2c
   14aa6:	491b      	ldr	r1, [pc, #108]	; (14b14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
   14aa8:	60c1      	str	r1, [r0, #12]
   14aaa:	491b      	ldr	r1, [pc, #108]	; (14b18 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
   14aac:	6181      	str	r1, [r0, #24]
   14aae:	491b      	ldr	r1, [pc, #108]	; (14b1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
   14ab0:	6301      	str	r1, [r0, #48]	; 0x30
   14ab2:	491b      	ldr	r1, [pc, #108]	; (14b20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
   14ab4:	6201      	str	r1, [r0, #32]
   14ab6:	491b      	ldr	r1, [pc, #108]	; (14b24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
   14ab8:	64c1      	str	r1, [r0, #76]	; 0x4c
   14aba:	491b      	ldr	r1, [pc, #108]	; (14b28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
   14abc:	6481      	str	r1, [r0, #72]	; 0x48
   14abe:	491b      	ldr	r1, [pc, #108]	; (14b2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
   14ac0:	6441      	str	r1, [r0, #68]	; 0x44
   14ac2:	491b      	ldr	r1, [pc, #108]	; (14b30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
   14ac4:	6341      	str	r1, [r0, #52]	; 0x34
   14ac6:	491b      	ldr	r1, [pc, #108]	; (14b34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
   14ac8:	61c1      	str	r1, [r0, #28]
   14aca:	481c      	ldr	r0, [pc, #112]	; (14b3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
   14acc:	491a      	ldr	r1, [pc, #104]	; (14b38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
   14ace:	6081      	str	r1, [r0, #8]
   14ad0:	491b      	ldr	r1, [pc, #108]	; (14b40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
   14ad2:	61c1      	str	r1, [r0, #28]
   14ad4:	491b      	ldr	r1, [pc, #108]	; (14b44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
   14ad6:	6241      	str	r1, [r0, #36]	; 0x24
   14ad8:	491b      	ldr	r1, [pc, #108]	; (14b48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
   14ada:	62c1      	str	r1, [r0, #44]	; 0x2c
   14adc:	491b      	ldr	r1, [pc, #108]	; (14b4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
   14ade:	6101      	str	r1, [r0, #16]
   14ae0:	491b      	ldr	r1, [pc, #108]	; (14b50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
   14ae2:	6141      	str	r1, [r0, #20]
   14ae4:	491b      	ldr	r1, [pc, #108]	; (14b54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
   14ae6:	6441      	str	r1, [r0, #68]	; 0x44
   14ae8:	6341      	str	r1, [r0, #52]	; 0x34
   14aea:	491b      	ldr	r1, [pc, #108]	; (14b58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
   14aec:	6181      	str	r1, [r0, #24]
   14aee:	491b      	ldr	r1, [pc, #108]	; (14b5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
   14af0:	6301      	str	r1, [r0, #48]	; 0x30
   14af2:	491b      	ldr	r1, [pc, #108]	; (14b60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
   14af4:	6481      	str	r1, [r0, #72]	; 0x48
   14af6:	491b      	ldr	r1, [pc, #108]	; (14b64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
   14af8:	64c1      	str	r1, [r0, #76]	; 0x4c
   14afa:	4770      	bx	lr
   14afc:	000161cd 	.word	0x000161cd
   14b00:	20000148 	.word	0x20000148
   14b04:	00015b09 	.word	0x00015b09
   14b08:	00015b65 	.word	0x00015b65
   14b0c:	00015ee5 	.word	0x00015ee5
   14b10:	00015f29 	.word	0x00015f29
   14b14:	00015c11 	.word	0x00015c11
   14b18:	000161a5 	.word	0x000161a5
   14b1c:	000162e9 	.word	0x000162e9
   14b20:	00015cbd 	.word	0x00015cbd
   14b24:	00015eb9 	.word	0x00015eb9
   14b28:	00015e8d 	.word	0x00015e8d
   14b2c:	00016165 	.word	0x00016165
   14b30:	00016195 	.word	0x00016195
   14b34:	00016201 	.word	0x00016201
   14b38:	00016681 	.word	0x00016681
   14b3c:	200001ac 	.word	0x200001ac
   14b40:	000166a9 	.word	0x000166a9
   14b44:	00016469 	.word	0x00016469
   14b48:	00016541 	.word	0x00016541
   14b4c:	0001643d 	.word	0x0001643d
   14b50:	000165e9 	.word	0x000165e9
   14b54:	000165c5 	.word	0x000165c5
   14b58:	0001660d 	.word	0x0001660d
   14b5c:	00016701 	.word	0x00016701
   14b60:	000164f9 	.word	0x000164f9
   14b64:	00016529 	.word	0x00016529

00014b68 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
   14b68:	4806      	ldr	r0, [pc, #24]	; (14b84 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
   14b6a:	4905      	ldr	r1, [pc, #20]	; (14b80 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
   14b6c:	6581      	str	r1, [r0, #88]	; 0x58
   14b6e:	4906      	ldr	r1, [pc, #24]	; (14b88 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
   14b70:	6601      	str	r1, [r0, #96]	; 0x60
   14b72:	4807      	ldr	r0, [pc, #28]	; (14b90 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
   14b74:	4905      	ldr	r1, [pc, #20]	; (14b8c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
   14b76:	6581      	str	r1, [r0, #88]	; 0x58
   14b78:	4906      	ldr	r1, [pc, #24]	; (14b94 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
   14b7a:	65c1      	str	r1, [r0, #92]	; 0x5c
   14b7c:	4770      	bx	lr
   14b7e:	0000      	.short	0x0000
   14b80:	00015f49 	.word	0x00015f49
   14b84:	20000148 	.word	0x20000148
   14b88:	00016021 	.word	0x00016021
   14b8c:	0001656d 	.word	0x0001656d
   14b90:	200001ac 	.word	0x200001ac
   14b94:	0001659d 	.word	0x0001659d

00014b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
   14b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14b9c:	2601      	movs	r6, #1
   14b9e:	4c7c      	ldr	r4, [pc, #496]	; (14d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
   14ba0:	2500      	movs	r5, #0
   14ba2:	f366 0107 	bfi	r1, r6, #0, #8
   14ba6:	8065      	strh	r5, [r4, #2]
   14ba8:	7065      	strb	r5, [r4, #1]
   14baa:	7025      	strb	r5, [r4, #0]
   14bac:	60a0      	str	r0, [r4, #8]
   14bae:	4689      	mov	r9, r1
   14bb0:	4680      	mov	r8, r0
   14bb2:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
   14bb6:	8800      	ldrh	r0, [r0, #0]
   14bb8:	f7fc fb5c 	bl	11274 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   14bbc:	b180      	cbz	r0, 14be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
   14bbe:	68a0      	ldr	r0, [r4, #8]
   14bc0:	8800      	ldrh	r0, [r0, #0]
   14bc2:	f7fc fe01 	bl	117c8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
   14bc6:	68a0      	ldr	r0, [r4, #8]
   14bc8:	8800      	ldrh	r0, [r0, #0]
   14bca:	f7fc fda5 	bl	11718 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
   14bce:	68a0      	ldr	r0, [r4, #8]
   14bd0:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
   14bd4:	b1c9      	cbz	r1, 14c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
   14bd6:	3070      	adds	r0, #112	; 0x70
   14bd8:	f006 fdb2 	bl	1b740 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   14bdc:	b118      	cbz	r0, 14be6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
   14bde:	e014      	b.n	14c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
   14be0:	f640 31c9 	movw	r1, #3017	; 0xbc9
   14be4:	e06b      	b.n	14cbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126>
   14be6:	68a0      	ldr	r0, [r4, #8]
   14be8:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
   14bec:	f88d 1000 	strb.w	r1, [sp]
   14bf0:	9900      	ldr	r1, [sp, #0]
   14bf2:	9100      	str	r1, [sp, #0]
   14bf4:	f89d 1000 	ldrb.w	r1, [sp]
   14bf8:	b139      	cbz	r1, 14c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
   14bfa:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   14bfe:	2301      	movs	r3, #1
   14c00:	4619      	mov	r1, r3
   14c02:	3070      	adds	r0, #112	; 0x70
   14c04:	f005 f9f4 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14c08:	b180      	cbz	r0, 14c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
   14c0a:	68a0      	ldr	r0, [r4, #8]
   14c0c:	3070      	adds	r0, #112	; 0x70
   14c0e:	f006 fd97 	bl	1b740 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   14c12:	b128      	cbz	r0, 14c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
   14c14:	68a0      	ldr	r0, [r4, #8]
   14c16:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
   14c1a:	bf00      	nop
   14c1c:	f000 fbb0 	bl	15380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
   14c20:	68a0      	ldr	r0, [r4, #8]
   14c22:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
   14c26:	b189      	cbz	r1, 14c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
   14c28:	80a5      	strh	r5, [r4, #4]
   14c2a:	e01e      	b.n	14c6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
   14c2c:	68a0      	ldr	r0, [r4, #8]
   14c2e:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
   14c32:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
   14c36:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
   14c3a:	2100      	movs	r1, #0
   14c3c:	2002      	movs	r0, #2
   14c3e:	f000 fe41 	bl	158c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   14c42:	68a0      	ldr	r0, [r4, #8]
   14c44:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
   14c48:	2002      	movs	r0, #2
   14c4a:	e7e7      	b.n	14c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
   14c4c:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
   14c50:	f88d 1000 	strb.w	r1, [sp]
   14c54:	9900      	ldr	r1, [sp, #0]
   14c56:	9100      	str	r1, [sp, #0]
   14c58:	f89d 1000 	ldrb.w	r1, [sp]
   14c5c:	b919      	cbnz	r1, 14c66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
   14c5e:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   14c60:	8a82      	ldrh	r2, [r0, #20]
   14c62:	4291      	cmp	r1, r2
   14c64:	d800      	bhi.n	14c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
   14c66:	8a81      	ldrh	r1, [r0, #20]
   14c68:	80a1      	strh	r1, [r4, #4]
   14c6a:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
   14c6e:	1e49      	subs	r1, r1, #1
   14c70:	b28f      	uxth	r7, r1
   14c72:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   14c76:	4439      	add	r1, r7
   14c78:	f820 195c 	strh.w	r1, [r0], #-92
   14c7c:	8801      	ldrh	r1, [r0, #0]
   14c7e:	4439      	add	r1, r7
   14c80:	8001      	strh	r1, [r0, #0]
   14c82:	f001 fd6b 	bl	1675c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
   14c86:	b120      	cbz	r0, 14c92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfa>
   14c88:	68a0      	ldr	r0, [r4, #8]
   14c8a:	f850 1f98 	ldr.w	r1, [r0, #152]!
   14c8e:	4439      	add	r1, r7
   14c90:	6001      	str	r1, [r0, #0]
   14c92:	68a1      	ldr	r1, [r4, #8]
   14c94:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
   14c98:	2801      	cmp	r0, #1
   14c9a:	d802      	bhi.n	14ca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a>
   14c9c:	1c40      	adds	r0, r0, #1
   14c9e:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
   14ca2:	b10f      	cbz	r7, 14ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x110>
   14ca4:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
   14ca8:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
   14cac:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
   14cb0:	f101 0070 	add.w	r0, r1, #112	; 0x70
   14cb4:	f005 fb1e 	bl	1a2f4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
   14cb8:	b120      	cbz	r0, 14cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c>
   14cba:	f640 410d 	movw	r1, #3085	; 0xc0d
   14cbe:	2031      	movs	r0, #49	; 0x31
   14cc0:	f7fb fea8 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14cc4:	68a0      	ldr	r0, [r4, #8]
   14cc6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   14cca:	290b      	cmp	r1, #11
   14ccc:	d001      	beq.n	14cd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a>
   14cce:	290c      	cmp	r1, #12
   14cd0:	d118      	bne.n	14d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
   14cd2:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
   14cd6:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
   14cda:	1ad2      	subs	r2, r2, r3
   14cdc:	b212      	sxth	r2, r2
   14cde:	2a00      	cmp	r2, #0
   14ce0:	db10      	blt.n	14d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
   14ce2:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
   14ce6:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
   14cea:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
   14cee:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
   14cf2:	2103      	movs	r1, #3
   14cf4:	f7fd fdcc 	bl	12890 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   14cf8:	68a0      	ldr	r0, [r4, #8]
   14cfa:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
   14cfe:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
   14d02:	e026      	b.n	14d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   14d04:	2924      	cmp	r1, #36	; 0x24
   14d06:	d111      	bne.n	14d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
   14d08:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
   14d0c:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
   14d10:	1a89      	subs	r1, r1, r2
   14d12:	b209      	sxth	r1, r1
   14d14:	2900      	cmp	r1, #0
   14d16:	db09      	blt.n	14d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
   14d18:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
   14d1c:	f000 fe82 	bl	15a24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
   14d20:	2800      	cmp	r0, #0
   14d22:	68a0      	ldr	r0, [r4, #8]
   14d24:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
   14d28:	d029      	beq.n	14d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
   14d2a:	e012      	b.n	14d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   14d2c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   14d30:	2924      	cmp	r1, #36	; 0x24
   14d32:	d001      	beq.n	14d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
   14d34:	2925      	cmp	r1, #37	; 0x25
   14d36:	d10c      	bne.n	14d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   14d38:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
   14d3c:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
   14d40:	1a89      	subs	r1, r1, r2
   14d42:	b209      	sxth	r1, r1
   14d44:	2900      	cmp	r1, #0
   14d46:	db04      	blt.n	14d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   14d48:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
   14d4c:	f000 fe6a 	bl	15a24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
   14d50:	b1a8      	cbz	r0, 14d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
   14d52:	4810      	ldr	r0, [pc, #64]	; (14d94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
   14d54:	9000      	str	r0, [sp, #0]
   14d56:	4b10      	ldr	r3, [pc, #64]	; (14d98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
   14d58:	4a10      	ldr	r2, [pc, #64]	; (14d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>)
   14d5a:	4641      	mov	r1, r8
   14d5c:	4648      	mov	r0, r9
   14d5e:	f7fc fde9 	bl	11934 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
   14d62:	68a0      	ldr	r0, [r4, #8]
   14d64:	2301      	movs	r3, #1
   14d66:	2105      	movs	r1, #5
   14d68:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   14d6c:	3070      	adds	r0, #112	; 0x70
   14d6e:	f005 f93f 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14d72:	2800      	cmp	r0, #0
   14d74:	d009      	beq.n	14d8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
   14d76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14d7a:	f7fc bdd5 	b.w	11928 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
   14d7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14d82:	2100      	movs	r1, #0
   14d84:	4608      	mov	r0, r1
   14d86:	f000 bbd5 	b.w	15534 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
   14d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14d8e:	0000      	.short	0x0000
   14d90:	20000134 	.word	0x20000134
   14d94:	00015535 	.word	0x00015535
   14d98:	00015039 	.word	0x00015039
   14d9c:	00015971 	.word	0x00015971
   14da0:	b570      	push	{r4, r5, r6, lr}
   14da2:	4c0f      	ldr	r4, [pc, #60]	; (14de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>)
   14da4:	68a5      	ldr	r5, [r4, #8]
   14da6:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
   14daa:	2920      	cmp	r1, #32
   14dac:	d002      	beq.n	14db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
   14dae:	2926      	cmp	r1, #38	; 0x26
   14db0:	d003      	beq.n	14dba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
   14db2:	e011      	b.n	14dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
   14db4:	f000 fe84 	bl	15ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   14db8:	e008      	b.n	14dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x234>
   14dba:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
   14dbe:	2301      	movs	r3, #1
   14dc0:	210b      	movs	r1, #11
   14dc2:	f105 0070 	add.w	r0, r5, #112	; 0x70
   14dc6:	f005 f913 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14dca:	b138      	cbz	r0, 14ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>
   14dcc:	68a1      	ldr	r1, [r4, #8]
   14dce:	2000      	movs	r0, #0
   14dd0:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   14dd4:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
   14dd8:	2000      	movs	r0, #0
   14dda:	bd70      	pop	{r4, r5, r6, pc}
   14ddc:	202a      	movs	r0, #42	; 0x2a
   14dde:	e7e9      	b.n	14db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
   14de0:	20000134 	.word	0x20000134
   14de4:	4804      	ldr	r0, [pc, #16]	; (14df8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>)
   14de6:	2100      	movs	r1, #0
   14de8:	6880      	ldr	r0, [r0, #8]
   14dea:	f820 1fb0 	strh.w	r1, [r0, #176]!
   14dee:	7881      	ldrb	r1, [r0, #2]
   14df0:	1c49      	adds	r1, r1, #1
   14df2:	7081      	strb	r1, [r0, #2]
   14df4:	4770      	bx	lr
   14df6:	0000      	.short	0x0000
   14df8:	20000134 	.word	0x20000134
   14dfc:	4807      	ldr	r0, [pc, #28]	; (14e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>)
   14dfe:	b510      	push	{r4, lr}
   14e00:	6881      	ldr	r1, [r0, #8]
   14e02:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
   14e06:	1e40      	subs	r0, r0, #1
   14e08:	b240      	sxtb	r0, r0
   14e0a:	7008      	strb	r0, [r1, #0]
   14e0c:	2800      	cmp	r0, #0
   14e0e:	da04      	bge.n	14e1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x282>
   14e10:	f44f 71c9 	mov.w	r1, #402	; 0x192
   14e14:	2031      	movs	r0, #49	; 0x31
   14e16:	f7fb fdfd 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14e1a:	bd10      	pop	{r4, pc}
   14e1c:	20000134 	.word	0x20000134
   14e20:	491a      	ldr	r1, [pc, #104]	; (14e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f4>)
   14e22:	b508      	push	{r3, lr}
   14e24:	6889      	ldr	r1, [r1, #8]
   14e26:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
   14e2a:	b1b8      	cbz	r0, 14e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
   14e2c:	2a10      	cmp	r2, #16
   14e2e:	d006      	beq.n	14e3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2a6>
   14e30:	2a14      	cmp	r2, #20
   14e32:	d007      	beq.n	14e44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
   14e34:	2a15      	cmp	r2, #21
   14e36:	d008      	beq.n	14e4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
   14e38:	2a1b      	cmp	r2, #27
   14e3a:	d122      	bne.n	14e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
   14e3c:	e008      	b.n	14e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>
   14e3e:	2101      	movs	r1, #1
   14e40:	200b      	movs	r0, #11
   14e42:	e007      	b.n	14e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
   14e44:	f001 faac 	bl	163a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1808>
   14e48:	e006      	b.n	14e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
   14e4a:	f000 fd59 	bl	15900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
   14e4e:	e003      	b.n	14e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
   14e50:	2101      	movs	r1, #1
   14e52:	2006      	movs	r0, #6
   14e54:	f000 fd36 	bl	158c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   14e58:	2001      	movs	r0, #1
   14e5a:	bd08      	pop	{r3, pc}
   14e5c:	2a21      	cmp	r2, #33	; 0x21
   14e5e:	d110      	bne.n	14e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
   14e60:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
   14e64:	2802      	cmp	r0, #2
   14e66:	d00e      	beq.n	14e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
   14e68:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
   14e6c:	2801      	cmp	r0, #1
   14e6e:	d108      	bne.n	14e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
   14e70:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
   14e74:	f88d 0000 	strb.w	r0, [sp]
   14e78:	9800      	ldr	r0, [sp, #0]
   14e7a:	9000      	str	r0, [sp, #0]
   14e7c:	f89d 0000 	ldrb.w	r0, [sp]
   14e80:	b108      	cbz	r0, 14e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
   14e82:	2000      	movs	r0, #0
   14e84:	bd08      	pop	{r3, pc}
   14e86:	2101      	movs	r1, #1
   14e88:	2017      	movs	r0, #23
   14e8a:	e7e3      	b.n	14e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
   14e8c:	20000134 	.word	0x20000134
   14e90:	b538      	push	{r3, r4, r5, lr}
   14e92:	2800      	cmp	r0, #0
   14e94:	d16b      	bne.n	14f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
   14e96:	4c37      	ldr	r4, [pc, #220]	; (14f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3dc>)
   14e98:	68a0      	ldr	r0, [r4, #8]
   14e9a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   14e9e:	07ca      	lsls	r2, r1, #31
   14ea0:	d002      	beq.n	14ea8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x310>
   14ea2:	2101      	movs	r1, #1
   14ea4:	2009      	movs	r0, #9
   14ea6:	e05b      	b.n	14f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
   14ea8:	078a      	lsls	r2, r1, #30
   14eaa:	d50a      	bpl.n	14ec2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32a>
   14eac:	2101      	movs	r1, #1
   14eae:	200c      	movs	r0, #12
   14eb0:	f000 fd08 	bl	158c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   14eb4:	68a0      	ldr	r0, [r4, #8]
   14eb6:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
   14eba:	f041 0101 	orr.w	r1, r1, #1
   14ebe:	7001      	strb	r1, [r0, #0]
   14ec0:	e050      	b.n	14f64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
   14ec2:	074a      	lsls	r2, r1, #29
   14ec4:	d502      	bpl.n	14ecc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x334>
   14ec6:	2101      	movs	r1, #1
   14ec8:	2013      	movs	r0, #19
   14eca:	e049      	b.n	14f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
   14ecc:	070a      	lsls	r2, r1, #28
   14ece:	d505      	bpl.n	14edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
   14ed0:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
   14ed4:	7141      	strb	r1, [r0, #5]
   14ed6:	2101      	movs	r1, #1
   14ed8:	2007      	movs	r0, #7
   14eda:	e041      	b.n	14f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
   14edc:	f011 0f30 	tst.w	r1, #48	; 0x30
   14ee0:	d045      	beq.n	14f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
   14ee2:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
   14ee6:	f88d 1000 	strb.w	r1, [sp]
   14eea:	9900      	ldr	r1, [sp, #0]
   14eec:	9100      	str	r1, [sp, #0]
   14eee:	f89d 1000 	ldrb.w	r1, [sp]
   14ef2:	bbc9      	cbnz	r1, 14f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
   14ef4:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
   14ef8:	f88d 1000 	strb.w	r1, [sp]
   14efc:	9900      	ldr	r1, [sp, #0]
   14efe:	9100      	str	r1, [sp, #0]
   14f00:	f89d 1000 	ldrb.w	r1, [sp]
   14f04:	b1c9      	cbz	r1, 14f3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a2>
   14f06:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   14f0a:	2924      	cmp	r1, #36	; 0x24
   14f0c:	d02d      	beq.n	14f6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
   14f0e:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   14f12:	2924      	cmp	r1, #36	; 0x24
   14f14:	d029      	beq.n	14f6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
   14f16:	2300      	movs	r3, #0
   14f18:	f500 72cb 	add.w	r2, r0, #406	; 0x196
   14f1c:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
   14f20:	f005 fc92 	bl	1a848 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   14f24:	68a0      	ldr	r0, [r4, #8]
   14f26:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   14f2a:	f021 0120 	bic.w	r1, r1, #32
   14f2e:	f041 0110 	orr.w	r1, r1, #16
   14f32:	7001      	strb	r1, [r0, #0]
   14f34:	2100      	movs	r1, #0
   14f36:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
   14f3a:	68a0      	ldr	r0, [r4, #8]
   14f3c:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   14f40:	06c9      	lsls	r1, r1, #27
   14f42:	d514      	bpl.n	14f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
   14f44:	f005 fc9b 	bl	1a87e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   14f48:	f000 f910 	bl	1516c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
   14f4c:	68a1      	ldr	r1, [r4, #8]
   14f4e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   14f52:	8bc2      	ldrh	r2, [r0, #30]
   14f54:	f821 2fee 	strh.w	r2, [r1, #238]!
   14f58:	8c40      	ldrh	r0, [r0, #34]	; 0x22
   14f5a:	8048      	strh	r0, [r1, #2]
   14f5c:	2101      	movs	r1, #1
   14f5e:	2015      	movs	r0, #21
   14f60:	f000 fcb0 	bl	158c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   14f64:	2001      	movs	r0, #1
   14f66:	bd38      	pop	{r3, r4, r5, pc}
   14f68:	e001      	b.n	14f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
   14f6a:	2301      	movs	r3, #1
   14f6c:	e7d4      	b.n	14f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
   14f6e:	2000      	movs	r0, #0
   14f70:	e7f9      	b.n	14f66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ce>
   14f72:	0000      	.short	0x0000
   14f74:	20000134 	.word	0x20000134
   14f78:	b570      	push	{r4, r5, r6, lr}
   14f7a:	460d      	mov	r5, r1
   14f7c:	4606      	mov	r6, r0
   14f7e:	f005 faa5 	bl	1a4cc <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
   14f82:	4604      	mov	r4, r0
   14f84:	4630      	mov	r0, r6
   14f86:	f005 faad 	bl	1a4e4 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
   14f8a:	4629      	mov	r1, r5
   14f8c:	f000 f81e 	bl	14fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>
   14f90:	b1b8      	cbz	r0, 14fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
   14f92:	4620      	mov	r0, r4
   14f94:	f005 f8c5 	bl	1a122 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   14f98:	0001      	movs	r1, r0
   14f9a:	d00d      	beq.n	14fb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
   14f9c:	480a      	ldr	r0, [pc, #40]	; (14fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>)
   14f9e:	6880      	ldr	r0, [r0, #8]
   14fa0:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
   14fa4:	428a      	cmp	r2, r1
   14fa6:	d007      	beq.n	14fb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
   14fa8:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
   14fac:	2901      	cmp	r1, #1
   14fae:	d005      	beq.n	14fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x424>
   14fb0:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
   14fb4:	4220      	tst	r0, r4
   14fb6:	d004      	beq.n	14fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
   14fb8:	2001      	movs	r0, #1
   14fba:	bd70      	pop	{r4, r5, r6, pc}
   14fbc:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
   14fc0:	e7f8      	b.n	14fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
   14fc2:	2000      	movs	r0, #0
   14fc4:	bd70      	pop	{r4, r5, r6, pc}
   14fc6:	0000      	.short	0x0000
   14fc8:	20000134 	.word	0x20000134
   14fcc:	b570      	push	{r4, r5, r6, lr}
   14fce:	460d      	mov	r5, r1
   14fd0:	4604      	mov	r4, r0
   14fd2:	f005 f8a6 	bl	1a122 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   14fd6:	b350      	cbz	r0, 1502e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
   14fd8:	4916      	ldr	r1, [pc, #88]	; (15034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>)
   14fda:	6889      	ldr	r1, [r1, #8]
   14fdc:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
   14fe0:	4282      	cmp	r2, r0
   14fe2:	d024      	beq.n	1502e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
   14fe4:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
   14fe8:	2b01      	cmp	r3, #1
   14fea:	d005      	beq.n	14ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
   14fec:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
   14ff0:	4223      	tst	r3, r4
   14ff2:	d013      	beq.n	1501c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
   14ff4:	b11d      	cbz	r5, 14ffe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
   14ff6:	e01a      	b.n	1502e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
   14ff8:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
   14ffc:	e7f8      	b.n	14ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
   14ffe:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
   15002:	4221      	tst	r1, r4
   15004:	d113      	bne.n	1502e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
   15006:	b15a      	cbz	r2, 15020 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
   15008:	2a04      	cmp	r2, #4
   1500a:	d00e      	beq.n	1502a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
   1500c:	2804      	cmp	r0, #4
   1500e:	d00c      	beq.n	1502a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
   15010:	2a08      	cmp	r2, #8
   15012:	d00a      	beq.n	1502a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
   15014:	2808      	cmp	r0, #8
   15016:	d008      	beq.n	1502a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
   15018:	4282      	cmp	r2, r0
   1501a:	d908      	bls.n	1502e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
   1501c:	2000      	movs	r0, #0
   1501e:	bd70      	pop	{r4, r5, r6, pc}
   15020:	f240 1155 	movw	r1, #341	; 0x155
   15024:	2006      	movs	r0, #6
   15026:	f7fb fcf5 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1502a:	4282      	cmp	r2, r0
   1502c:	d3f6      	bcc.n	1501c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
   1502e:	2001      	movs	r0, #1
   15030:	bd70      	pop	{r4, r5, r6, pc}
   15032:	0000      	.short	0x0000
   15034:	20000134 	.word	0x20000134
   15038:	490c      	ldr	r1, [pc, #48]	; (1506c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d4>)
   1503a:	4602      	mov	r2, r0
   1503c:	7848      	ldrb	r0, [r1, #1]
   1503e:	b998      	cbnz	r0, 15068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
   15040:	4608      	mov	r0, r1
   15042:	6880      	ldr	r0, [r0, #8]
   15044:	b142      	cbz	r2, 15058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>
   15046:	7889      	ldrb	r1, [r1, #2]
   15048:	0709      	lsls	r1, r1, #28
   1504a:	d503      	bpl.n	15054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
   1504c:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
   15050:	2808      	cmp	r0, #8
   15052:	d009      	beq.n	15068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
   15054:	2001      	movs	r0, #1
   15056:	4770      	bx	lr
   15058:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   1505c:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   1505e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   15060:	428a      	cmp	r2, r1
   15062:	d801      	bhi.n	15068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
   15064:	f7ff b81a 	b.w	1409c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
   15068:	2000      	movs	r0, #0
   1506a:	4770      	bx	lr
   1506c:	20000134 	.word	0x20000134
   15070:	b538      	push	{r3, r4, r5, lr}
   15072:	4c3d      	ldr	r4, [pc, #244]	; (15168 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>)
   15074:	4605      	mov	r5, r0
   15076:	68a0      	ldr	r0, [r4, #8]
   15078:	3070      	adds	r0, #112	; 0x70
   1507a:	f006 fb61 	bl	1b740 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   1507e:	2800      	cmp	r0, #0
   15080:	d170      	bne.n	15164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   15082:	2d00      	cmp	r5, #0
   15084:	d16e      	bne.n	15164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   15086:	68a0      	ldr	r0, [r4, #8]
   15088:	2301      	movs	r3, #1
   1508a:	4619      	mov	r1, r3
   1508c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   15090:	3070      	adds	r0, #112	; 0x70
   15092:	f004 ffad 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15096:	2800      	cmp	r0, #0
   15098:	d164      	bne.n	15164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   1509a:	68a0      	ldr	r0, [r4, #8]
   1509c:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
   150a0:	f88d 1000 	strb.w	r1, [sp]
   150a4:	9900      	ldr	r1, [sp, #0]
   150a6:	9100      	str	r1, [sp, #0]
   150a8:	f89d 1000 	ldrb.w	r1, [sp]
   150ac:	b149      	cbz	r1, 150c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
   150ae:	2100      	movs	r1, #0
   150b0:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
   150b4:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
   150b8:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
   150bc:	2100      	movs	r1, #0
   150be:	2002      	movs	r0, #2
   150c0:	e045      	b.n	1514e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
   150c2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   150c6:	2301      	movs	r3, #1
   150c8:	2104      	movs	r1, #4
   150ca:	3070      	adds	r0, #112	; 0x70
   150cc:	f004 ff90 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   150d0:	4605      	mov	r5, r0
   150d2:	f7ff fedd 	bl	14e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
   150d6:	2800      	cmp	r0, #0
   150d8:	d144      	bne.n	15164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   150da:	4628      	mov	r0, r5
   150dc:	f7ff fea0 	bl	14e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
   150e0:	2800      	cmp	r0, #0
   150e2:	d13f      	bne.n	15164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   150e4:	68a0      	ldr	r0, [r4, #8]
   150e6:	2301      	movs	r3, #1
   150e8:	2100      	movs	r1, #0
   150ea:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   150ee:	3070      	adds	r0, #112	; 0x70
   150f0:	f004 ff7e 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   150f4:	b178      	cbz	r0, 15116 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
   150f6:	68a0      	ldr	r0, [r4, #8]
   150f8:	2301      	movs	r3, #1
   150fa:	2104      	movs	r1, #4
   150fc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15100:	3070      	adds	r0, #112	; 0x70
   15102:	f004 ff75 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15106:	b930      	cbnz	r0, 15116 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
   15108:	68a0      	ldr	r0, [r4, #8]
   1510a:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
   1510e:	b110      	cbz	r0, 15116 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
   15110:	2100      	movs	r1, #0
   15112:	2012      	movs	r0, #18
   15114:	e01b      	b.n	1514e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
   15116:	68a0      	ldr	r0, [r4, #8]
   15118:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   1511c:	290a      	cmp	r1, #10
   1511e:	d01a      	beq.n	15156 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
   15120:	2d00      	cmp	r5, #0
   15122:	d11f      	bne.n	15164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   15124:	f000 fb1a 	bl	1575c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
   15128:	2800      	cmp	r0, #0
   1512a:	d11b      	bne.n	15164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   1512c:	68a0      	ldr	r0, [r4, #8]
   1512e:	2301      	movs	r3, #1
   15130:	2100      	movs	r1, #0
   15132:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   15136:	3070      	adds	r0, #112	; 0x70
   15138:	f004 ff5a 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1513c:	2800      	cmp	r0, #0
   1513e:	d011      	beq.n	15164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   15140:	68a0      	ldr	r0, [r4, #8]
   15142:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
   15146:	2800      	cmp	r0, #0
   15148:	d00c      	beq.n	15164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   1514a:	2100      	movs	r1, #0
   1514c:	20ff      	movs	r0, #255	; 0xff
   1514e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15152:	f000 bbb7 	b.w	158c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   15156:	f810 1fea 	ldrb.w	r1, [r0, #234]!
   1515a:	7101      	strb	r1, [r0, #4]
   1515c:	2100      	movs	r1, #0
   1515e:	2007      	movs	r0, #7
   15160:	e7f5      	b.n	1514e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
   15162:	e7ff      	b.n	15164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   15164:	bd38      	pop	{r3, r4, r5, pc}
   15166:	0000      	.short	0x0000
   15168:	20000134 	.word	0x20000134
   1516c:	480a      	ldr	r0, [pc, #40]	; (15198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>)
   1516e:	b510      	push	{r4, lr}
   15170:	6881      	ldr	r1, [r0, #8]
   15172:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
   15176:	2801      	cmp	r0, #1
   15178:	d009      	beq.n	1518e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f6>
   1517a:	8808      	ldrh	r0, [r1, #0]
   1517c:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
   15180:	312c      	adds	r1, #44	; 0x2c
   15182:	f005 fb3d 	bl	1a800 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   15186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1518a:	f7fd bdcf 	b.w	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1518e:	2002      	movs	r0, #2
   15190:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
   15194:	bd10      	pop	{r4, pc}
   15196:	0000      	.short	0x0000
   15198:	20000134 	.word	0x20000134
   1519c:	b570      	push	{r4, r5, r6, lr}
   1519e:	4c25      	ldr	r4, [pc, #148]	; (15234 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
   151a0:	0005      	movs	r5, r0
   151a2:	d12f      	bne.n	15204 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
   151a4:	f000 f8a4 	bl	152f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
   151a8:	f000 f848 	bl	1523c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
   151ac:	0005      	movs	r5, r0
   151ae:	d129      	bne.n	15204 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
   151b0:	8860      	ldrh	r0, [r4, #2]
   151b2:	0741      	lsls	r1, r0, #29
   151b4:	d506      	bpl.n	151c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
   151b6:	68a1      	ldr	r1, [r4, #8]
   151b8:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
   151bc:	2907      	cmp	r1, #7
   151be:	d101      	bne.n	151c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
   151c0:	2101      	movs	r1, #1
   151c2:	7021      	strb	r1, [r4, #0]
   151c4:	0780      	lsls	r0, r0, #30
   151c6:	d512      	bpl.n	151ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
   151c8:	68e0      	ldr	r0, [r4, #12]
   151ca:	78c0      	ldrb	r0, [r0, #3]
   151cc:	2819      	cmp	r0, #25
   151ce:	d205      	bcs.n	151dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
   151d0:	4919      	ldr	r1, [pc, #100]	; (15238 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
   151d2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   151d6:	b109      	cbz	r1, 151dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
   151d8:	4788      	blx	r1
   151da:	e008      	b.n	151ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
   151dc:	28ff      	cmp	r0, #255	; 0xff
   151de:	d004      	beq.n	151ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
   151e0:	f240 714d 	movw	r1, #1869	; 0x74d
   151e4:	2031      	movs	r0, #49	; 0x31
   151e6:	f7fb fc15 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   151ea:	f001 f91b 	bl	16424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
   151ee:	78a0      	ldrb	r0, [r4, #2]
   151f0:	06c0      	lsls	r0, r0, #27
   151f2:	d507      	bpl.n	15204 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
   151f4:	68a0      	ldr	r0, [r4, #8]
   151f6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   151fa:	290b      	cmp	r1, #11
   151fc:	d102      	bne.n	15204 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
   151fe:	210c      	movs	r1, #12
   15200:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   15204:	7860      	ldrb	r0, [r4, #1]
   15206:	0700      	lsls	r0, r0, #28
   15208:	d511      	bpl.n	1522e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
   1520a:	68a0      	ldr	r0, [r4, #8]
   1520c:	2301      	movs	r3, #1
   1520e:	2105      	movs	r1, #5
   15210:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15214:	3070      	adds	r0, #112	; 0x70
   15216:	f004 feeb 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1521a:	b128      	cbz	r0, 15228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x690>
   1521c:	68a1      	ldr	r1, [r4, #8]
   1521e:	2508      	movs	r5, #8
   15220:	2000      	movs	r0, #0
   15222:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
   15226:	e002      	b.n	1522e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
   15228:	2000      	movs	r0, #0
   1522a:	f7fc fc4d 	bl	11ac8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   1522e:	4628      	mov	r0, r5
   15230:	bd70      	pop	{r4, r5, r6, pc}
   15232:	0000      	.short	0x0000
   15234:	20000134 	.word	0x20000134
   15238:	200001ac 	.word	0x200001ac
   1523c:	b570      	push	{r4, r5, r6, lr}
   1523e:	4c2a      	ldr	r4, [pc, #168]	; (152e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
   15240:	2000      	movs	r0, #0
   15242:	78a1      	ldrb	r1, [r4, #2]
   15244:	07c9      	lsls	r1, r1, #31
   15246:	d015      	beq.n	15274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6dc>
   15248:	6920      	ldr	r0, [r4, #16]
   1524a:	2301      	movs	r3, #1
   1524c:	2105      	movs	r1, #5
   1524e:	78c5      	ldrb	r5, [r0, #3]
   15250:	68a0      	ldr	r0, [r4, #8]
   15252:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15256:	3070      	adds	r0, #112	; 0x70
   15258:	f004 feca 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1525c:	b158      	cbz	r0, 15276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
   1525e:	1ead      	subs	r5, r5, #2
   15260:	2d0a      	cmp	r5, #10
   15262:	d206      	bcs.n	15272 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
   15264:	e8df f005 	tbb	[pc, r5]
   15268:	05050707 	.word	0x05050707
   1526c:	05050707 	.word	0x05050707
   15270:	0707      	.short	0x0707
   15272:	2008      	movs	r0, #8
   15274:	bd70      	pop	{r4, r5, r6, pc}
   15276:	6920      	ldr	r0, [r4, #16]
   15278:	f7fd fc34 	bl	12ae4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
   1527c:	b138      	cbz	r0, 1528e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f6>
   1527e:	6920      	ldr	r0, [r4, #16]
   15280:	78c5      	ldrb	r5, [r0, #3]
   15282:	b145      	cbz	r5, 15296 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
   15284:	2d01      	cmp	r5, #1
   15286:	d006      	beq.n	15296 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
   15288:	2d16      	cmp	r5, #22
   1528a:	d118      	bne.n	152be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
   1528c:	e003      	b.n	15296 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
   1528e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15292:	f000 bd3d 	b.w	15d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   15296:	68a0      	ldr	r0, [r4, #8]
   15298:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
   1529c:	f004 fef6 	bl	1a08c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   152a0:	b168      	cbz	r0, 152be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
   152a2:	68a1      	ldr	r1, [r4, #8]
   152a4:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
   152a8:	281f      	cmp	r0, #31
   152aa:	d008      	beq.n	152be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
   152ac:	2820      	cmp	r0, #32
   152ae:	d003      	beq.n	152b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x720>
   152b0:	2d16      	cmp	r5, #22
   152b2:	d00c      	beq.n	152ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
   152b4:	2002      	movs	r0, #2
   152b6:	bd70      	pop	{r4, r5, r6, pc}
   152b8:	2026      	movs	r0, #38	; 0x26
   152ba:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   152be:	2d19      	cmp	r5, #25
   152c0:	d207      	bcs.n	152d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
   152c2:	480a      	ldr	r0, [pc, #40]	; (152ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
   152c4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
   152c8:	b118      	cbz	r0, 152d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
   152ca:	4780      	blx	r0
   152cc:	e003      	b.n	152d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
   152ce:	2020      	movs	r0, #32
   152d0:	bd70      	pop	{r4, r5, r6, pc}
   152d2:	f000 fd1d 	bl	15d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   152d6:	68a2      	ldr	r2, [r4, #8]
   152d8:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
   152dc:	1c49      	adds	r1, r1, #1
   152de:	f143 0300 	adc.w	r3, r3, #0
   152e2:	e9c2 1300 	strd	r1, r3, [r2]
   152e6:	bd70      	pop	{r4, r5, r6, pc}
   152e8:	20000134 	.word	0x20000134
   152ec:	20000148 	.word	0x20000148
   152f0:	b570      	push	{r4, r5, r6, lr}
   152f2:	4c22      	ldr	r4, [pc, #136]	; (1537c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
   152f4:	78a0      	ldrb	r0, [r4, #2]
   152f6:	0700      	lsls	r0, r0, #28
   152f8:	d53e      	bpl.n	15378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
   152fa:	68a0      	ldr	r0, [r4, #8]
   152fc:	3070      	adds	r0, #112	; 0x70
   152fe:	f006 fa1f 	bl	1b740 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   15302:	b148      	cbz	r0, 15318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
   15304:	68a0      	ldr	r0, [r4, #8]
   15306:	21fe      	movs	r1, #254	; 0xfe
   15308:	2500      	movs	r5, #0
   1530a:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
   1530e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   15312:	2919      	cmp	r1, #25
   15314:	d10c      	bne.n	15330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
   15316:	e004      	b.n	15322 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
   15318:	f240 7157 	movw	r1, #1879	; 0x757
   1531c:	2031      	movs	r0, #49	; 0x31
   1531e:	f7fb fb79 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15322:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
   15326:	f7ff fd69 	bl	14dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   1532a:	68a0      	ldr	r0, [r4, #8]
   1532c:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
   15330:	68a0      	ldr	r0, [r4, #8]
   15332:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   15336:	291f      	cmp	r1, #31
   15338:	d002      	beq.n	15340 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
   1533a:	2927      	cmp	r1, #39	; 0x27
   1533c:	d113      	bne.n	15366 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
   1533e:	e00b      	b.n	15358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
   15340:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   15344:	f004 fea2 	bl	1a08c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   15348:	b108      	cbz	r0, 1534e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
   1534a:	2026      	movs	r0, #38	; 0x26
   1534c:	e000      	b.n	15350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
   1534e:	2020      	movs	r0, #32
   15350:	68a1      	ldr	r1, [r4, #8]
   15352:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   15356:	e006      	b.n	15366 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
   15358:	2101      	movs	r1, #1
   1535a:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
   1535e:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
   15362:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
   15366:	68a0      	ldr	r0, [r4, #8]
   15368:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
   1536c:	2908      	cmp	r1, #8
   1536e:	d103      	bne.n	15378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
   15370:	2102      	movs	r1, #2
   15372:	7021      	strb	r1, [r4, #0]
   15374:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
   15378:	bd70      	pop	{r4, r5, r6, pc}
   1537a:	0000      	.short	0x0000
   1537c:	20000134 	.word	0x20000134
   15380:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   15382:	4605      	mov	r5, r0
   15384:	4668      	mov	r0, sp
   15386:	f7fc fa09 	bl	1179c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
   1538a:	b318      	cbz	r0, 153d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
   1538c:	2222      	movs	r2, #34	; 0x22
   1538e:	2100      	movs	r1, #0
   15390:	9800      	ldr	r0, [sp, #0]
   15392:	f003 fc3a 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   15396:	2103      	movs	r1, #3
   15398:	9800      	ldr	r0, [sp, #0]
   1539a:	f005 f8f7 	bl	1a58c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   1539e:	9800      	ldr	r0, [sp, #0]
   153a0:	7801      	ldrb	r1, [r0, #0]
   153a2:	f021 0110 	bic.w	r1, r1, #16
   153a6:	7001      	strb	r1, [r0, #0]
   153a8:	4629      	mov	r1, r5
   153aa:	f7fd fbc7 	bl	12b3c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
   153ae:	2100      	movs	r1, #0
   153b0:	4c5f      	ldr	r4, [pc, #380]	; (15530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>)
   153b2:	f644 162f 	movw	r6, #18735	; 0x492f
   153b6:	2d0e      	cmp	r5, #14
   153b8:	d07e      	beq.n	154b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
   153ba:	dc0e      	bgt.n	153da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
   153bc:	f1a5 0502 	sub.w	r5, r5, #2
   153c0:	2d0c      	cmp	r5, #12
   153c2:	d21c      	bcs.n	153fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
   153c4:	e8df f005 	tbb	[pc, r5]
   153c8:	aa491b1e 	.word	0xaa491b1e
   153cc:	551b1eaa 	.word	0x551b1eaa
   153d0:	3034aa1b 	.word	0x3034aa1b
   153d4:	f640 1187 	movw	r1, #2439	; 0x987
   153d8:	e0a6      	b.n	15528 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
   153da:	2d15      	cmp	r5, #21
   153dc:	d05c      	beq.n	15498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
   153de:	dc08      	bgt.n	153f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
   153e0:	2d11      	cmp	r5, #17
   153e2:	d014      	beq.n	1540e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x876>
   153e4:	2d12      	cmp	r5, #18
   153e6:	d01e      	beq.n	15426 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
   153e8:	2d13      	cmp	r5, #19
   153ea:	d01c      	beq.n	15426 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
   153ec:	2d14      	cmp	r5, #20
   153ee:	d106      	bne.n	153fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
   153f0:	e052      	b.n	15498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
   153f2:	2d16      	cmp	r5, #22
   153f4:	d027      	beq.n	15446 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ae>
   153f6:	2d17      	cmp	r5, #23
   153f8:	d069      	beq.n	154ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x936>
   153fa:	2dff      	cmp	r5, #255	; 0xff
   153fc:	d072      	beq.n	154e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
   153fe:	f640 11fd 	movw	r1, #2557	; 0x9fd
   15402:	e091      	b.n	15528 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
   15404:	68a1      	ldr	r1, [r4, #8]
   15406:	9800      	ldr	r0, [sp, #0]
   15408:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
   1540c:	e00e      	b.n	1542c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x894>
   1540e:	68a0      	ldr	r0, [r4, #8]
   15410:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
   15414:	9800      	ldr	r0, [sp, #0]
   15416:	f005 f895 	bl	1a544 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
   1541a:	68a0      	ldr	r0, [r4, #8]
   1541c:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
   15420:	9800      	ldr	r0, [sp, #0]
   15422:	f005 f891 	bl	1a548 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
   15426:	e079      	b.n	1551c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   15428:	9800      	ldr	r0, [sp, #0]
   1542a:	2106      	movs	r1, #6
   1542c:	7101      	strb	r1, [r0, #4]
   1542e:	e075      	b.n	1551c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   15430:	9800      	ldr	r0, [sp, #0]
   15432:	220b      	movs	r2, #11
   15434:	7102      	strb	r2, [r0, #4]
   15436:	2259      	movs	r2, #89	; 0x59
   15438:	7142      	strb	r2, [r0, #5]
   1543a:	7181      	strb	r1, [r0, #6]
   1543c:	21fe      	movs	r1, #254	; 0xfe
   1543e:	71c1      	strb	r1, [r0, #7]
   15440:	2112      	movs	r1, #18
   15442:	7201      	strb	r1, [r0, #8]
   15444:	e06a      	b.n	1551c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   15446:	9800      	ldr	r0, [sp, #0]
   15448:	f8d4 1008 	ldr.w	r1, [r4, #8]
   1544c:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
   15450:	7102      	strb	r2, [r0, #4]
   15452:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
   15456:	7141      	strb	r1, [r0, #5]
   15458:	e060      	b.n	1551c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   1545a:	68a1      	ldr	r1, [r4, #8]
   1545c:	9800      	ldr	r0, [sp, #0]
   1545e:	f501 718c 	add.w	r1, r1, #280	; 0x118
   15462:	f005 f884 	bl	1a56e <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
   15466:	68a1      	ldr	r1, [r4, #8]
   15468:	9800      	ldr	r0, [sp, #0]
   1546a:	31e4      	adds	r1, #228	; 0xe4
   1546c:	f005 f87c 	bl	1a568 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
   15470:	e054      	b.n	1551c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   15472:	9101      	str	r1, [sp, #4]
   15474:	9102      	str	r1, [sp, #8]
   15476:	f001 fe05 	bl	17084 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1547a:	68a1      	ldr	r1, [r4, #8]
   1547c:	4030      	ands	r0, r6
   1547e:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
   15482:	4001      	ands	r1, r0
   15484:	f88d 1004 	strb.w	r1, [sp, #4]
   15488:	0a00      	lsrs	r0, r0, #8
   1548a:	f88d 0005 	strb.w	r0, [sp, #5]
   1548e:	a901      	add	r1, sp, #4
   15490:	9800      	ldr	r0, [sp, #0]
   15492:	f005 f876 	bl	1a582 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
   15496:	e041      	b.n	1551c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   15498:	68a0      	ldr	r0, [r4, #8]
   1549a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
   1549e:	9800      	ldr	r0, [sp, #0]
   154a0:	f005 f87c 	bl	1a59c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
   154a4:	68a0      	ldr	r0, [r4, #8]
   154a6:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
   154aa:	9800      	ldr	r0, [sp, #0]
   154ac:	f005 f87a 	bl	1a5a4 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
   154b0:	68a0      	ldr	r0, [r4, #8]
   154b2:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
   154b6:	e000      	b.n	154ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
   154b8:	e015      	b.n	154e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
   154ba:	9800      	ldr	r0, [sp, #0]
   154bc:	f005 f876 	bl	1a5ac <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
   154c0:	68a0      	ldr	r0, [r4, #8]
   154c2:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
   154c6:	9800      	ldr	r0, [sp, #0]
   154c8:	f005 f874 	bl	1a5b4 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
   154cc:	e026      	b.n	1551c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   154ce:	68a1      	ldr	r1, [r4, #8]
   154d0:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
   154d4:	2801      	cmp	r0, #1
   154d6:	9800      	ldr	r0, [sp, #0]
   154d8:	d0b8      	beq.n	1544c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8b4>
   154da:	f811 2f66 	ldrb.w	r2, [r1, #102]!
   154de:	7102      	strb	r2, [r0, #4]
   154e0:	7849      	ldrb	r1, [r1, #1]
   154e2:	e7b8      	b.n	15456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
   154e4:	e012      	b.n	1550c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x974>
   154e6:	9101      	str	r1, [sp, #4]
   154e8:	9102      	str	r1, [sp, #8]
   154ea:	f001 fdcb 	bl	17084 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   154ee:	68a1      	ldr	r1, [r4, #8]
   154f0:	4030      	ands	r0, r6
   154f2:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
   154f6:	4001      	ands	r1, r0
   154f8:	f88d 1004 	strb.w	r1, [sp, #4]
   154fc:	0a00      	lsrs	r0, r0, #8
   154fe:	f88d 0005 	strb.w	r0, [sp, #5]
   15502:	a901      	add	r1, sp, #4
   15504:	9800      	ldr	r0, [sp, #0]
   15506:	f005 f837 	bl	1a578 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
   1550a:	e007      	b.n	1551c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   1550c:	68a0      	ldr	r0, [r4, #8]
   1550e:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
   15512:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
   15516:	9800      	ldr	r0, [sp, #0]
   15518:	f005 f818 	bl	1a54c <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
   1551c:	f7fc f918 	bl	11750 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
   15520:	2800      	cmp	r0, #0
   15522:	d104      	bne.n	1552e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
   15524:	f640 2101 	movw	r1, #2561	; 0xa01
   15528:	2031      	movs	r0, #49	; 0x31
   1552a:	f7fb fa73 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1552e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   15530:	20000134 	.word	0x20000134
   15534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15538:	4c87      	ldr	r4, [pc, #540]	; (15758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
   1553a:	4682      	mov	sl, r0
   1553c:	4689      	mov	r9, r1
   1553e:	68a0      	ldr	r0, [r4, #8]
   15540:	8800      	ldrh	r0, [r0, #0]
   15542:	f7fb fe97 	bl	11274 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   15546:	0006      	movs	r6, r0
   15548:	d00a      	beq.n	15560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c8>
   1554a:	8860      	ldrh	r0, [r4, #2]
   1554c:	f04f 0500 	mov.w	r5, #0
   15550:	05c0      	lsls	r0, r0, #23
   15552:	68a0      	ldr	r0, [r4, #8]
   15554:	d509      	bpl.n	1556a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
   15556:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
   1555a:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
   1555e:	e008      	b.n	15572 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9da>
   15560:	f640 51a7 	movw	r1, #3495	; 0xda7
   15564:	2031      	movs	r0, #49	; 0x31
   15566:	f7fb fa55 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1556a:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
   1556e:	1c49      	adds	r1, r1, #1
   15570:	8001      	strh	r1, [r0, #0]
   15572:	f001 f8f3 	bl	1675c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
   15576:	f04f 0801 	mov.w	r8, #1
   1557a:	b320      	cbz	r0, 155c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
   1557c:	8860      	ldrh	r0, [r4, #2]
   1557e:	0500      	lsls	r0, r0, #20
   15580:	d506      	bpl.n	15590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
   15582:	68a0      	ldr	r0, [r4, #8]
   15584:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
   15588:	b111      	cbz	r1, 15590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
   1558a:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
   1558e:	e01a      	b.n	155c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
   15590:	68a0      	ldr	r0, [r4, #8]
   15592:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   15596:	1c49      	adds	r1, r1, #1
   15598:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
   1559c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   155a0:	428b      	cmp	r3, r1
   155a2:	d301      	bcc.n	155a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
   155a4:	1a5a      	subs	r2, r3, r1
   155a6:	e000      	b.n	155aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa12>
   155a8:	2200      	movs	r2, #0
   155aa:	88a7      	ldrh	r7, [r4, #4]
   155ac:	1d7f      	adds	r7, r7, #5
   155ae:	42ba      	cmp	r2, r7
   155b0:	d801      	bhi.n	155b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
   155b2:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
   155b6:	4299      	cmp	r1, r3
   155b8:	d305      	bcc.n	155c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
   155ba:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
   155be:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
   155c2:	f7fd fbb3 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   155c6:	8860      	ldrh	r0, [r4, #2]
   155c8:	f04f 0702 	mov.w	r7, #2
   155cc:	f410 7f40 	tst.w	r0, #768	; 0x300
   155d0:	d00e      	beq.n	155f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
   155d2:	68a0      	ldr	r0, [r4, #8]
   155d4:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
   155d8:	b111      	cbz	r1, 155e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa48>
   155da:	2903      	cmp	r1, #3
   155dc:	d108      	bne.n	155f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
   155de:	e002      	b.n	155e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4e>
   155e0:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
   155e4:	e001      	b.n	155ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa52>
   155e6:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
   155ea:	2101      	movs	r1, #1
   155ec:	f7fe fd7c 	bl	140e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   155f0:	68a0      	ldr	r0, [r4, #8]
   155f2:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
   155f6:	2901      	cmp	r1, #1
   155f8:	d104      	bne.n	15604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
   155fa:	8861      	ldrh	r1, [r4, #2]
   155fc:	0549      	lsls	r1, r1, #21
   155fe:	d501      	bpl.n	15604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
   15600:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
   15604:	f1ba 0f00 	cmp.w	sl, #0
   15608:	d176      	bne.n	156f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
   1560a:	78a1      	ldrb	r1, [r4, #2]
   1560c:	0649      	lsls	r1, r1, #25
   1560e:	d502      	bpl.n	15616 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
   15610:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
   15614:	e004      	b.n	15620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa88>
   15616:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
   1561a:	1c49      	adds	r1, r1, #1
   1561c:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
   15620:	4648      	mov	r0, r9
   15622:	f7ff fdbb 	bl	1519c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x604>
   15626:	ea40 0009 	orr.w	r0, r0, r9
   1562a:	4681      	mov	r9, r0
   1562c:	f7ff fd20 	bl	15070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
   15630:	68a7      	ldr	r7, [r4, #8]
   15632:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
   15636:	1c40      	adds	r0, r0, #1
   15638:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
   1563c:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
   15640:	b128      	cbz	r0, 1564e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab6>
   15642:	f7fc faaf 	bl	11ba4 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
   15646:	b1b0      	cbz	r0, 15676 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
   15648:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
   1564c:	e013      	b.n	15676 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
   1564e:	f7fc f927 	bl	118a0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
   15652:	b108      	cbz	r0, 15658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac0>
   15654:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
   15658:	f7fc f91c 	bl	11894 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
   1565c:	b158      	cbz	r0, 15676 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
   1565e:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
   15662:	1c40      	adds	r0, r0, #1
   15664:	b2c0      	uxtb	r0, r0
   15666:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
   1566a:	2802      	cmp	r0, #2
   1566c:	d903      	bls.n	15676 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
   1566e:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
   15672:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
   15676:	68a0      	ldr	r0, [r4, #8]
   15678:	2301      	movs	r3, #1
   1567a:	2100      	movs	r1, #0
   1567c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15680:	3070      	adds	r0, #112	; 0x70
   15682:	f004 fcb5 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15686:	b920      	cbnz	r0, 15692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafa>
   15688:	68a0      	ldr	r0, [r4, #8]
   1568a:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   1568e:	280c      	cmp	r0, #12
   15690:	d15e      	bne.n	15750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
   15692:	68a0      	ldr	r0, [r4, #8]
   15694:	2301      	movs	r3, #1
   15696:	2100      	movs	r1, #0
   15698:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   1569c:	3070      	adds	r0, #112	; 0x70
   1569e:	f004 fca7 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   156a2:	b350      	cbz	r0, 156fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   156a4:	68a0      	ldr	r0, [r4, #8]
   156a6:	2301      	movs	r3, #1
   156a8:	2100      	movs	r1, #0
   156aa:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   156ae:	3070      	adds	r0, #112	; 0x70
   156b0:	f004 fc9e 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   156b4:	b308      	cbz	r0, 156fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   156b6:	68a0      	ldr	r0, [r4, #8]
   156b8:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
   156bc:	2902      	cmp	r1, #2
   156be:	d147      	bne.n	15750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
   156c0:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
   156c4:	b9c8      	cbnz	r0, 156fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   156c6:	4630      	mov	r0, r6
   156c8:	f003 ff6e 	bl	195a8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   156cc:	b1a8      	cbz	r0, 156fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   156ce:	68a0      	ldr	r0, [r4, #8]
   156d0:	3070      	adds	r0, #112	; 0x70
   156d2:	f006 f835 	bl	1b740 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   156d6:	b980      	cbnz	r0, 156fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   156d8:	68a1      	ldr	r1, [r4, #8]
   156da:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
   156de:	2801      	cmp	r0, #1
   156e0:	d936      	bls.n	15750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
   156e2:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
   156e6:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
   156ea:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
   156ee:	1e93      	subs	r3, r2, #2
   156f0:	4298      	cmp	r0, r3
   156f2:	db03      	blt.n	156fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
   156f4:	2001      	movs	r0, #1
   156f6:	e004      	b.n	15702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
   156f8:	e01c      	b.n	15734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
   156fa:	e029      	b.n	15750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
   156fc:	1a10      	subs	r0, r2, r0
   156fe:	1e40      	subs	r0, r0, #1
   15700:	b280      	uxth	r0, r0
   15702:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
   15706:	88a3      	ldrh	r3, [r4, #4]
   15708:	429a      	cmp	r2, r3
   1570a:	d301      	bcc.n	15710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb78>
   1570c:	2201      	movs	r2, #1
   1570e:	e002      	b.n	15716 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
   15710:	1a9a      	subs	r2, r3, r2
   15712:	1c52      	adds	r2, r2, #1
   15714:	b292      	uxth	r2, r2
   15716:	4290      	cmp	r0, r2
   15718:	d900      	bls.n	1571c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
   1571a:	4610      	mov	r0, r2
   1571c:	2801      	cmp	r0, #1
   1571e:	d101      	bne.n	15724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8c>
   15720:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
   15724:	68a1      	ldr	r1, [r4, #8]
   15726:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
   1572a:	4410      	add	r0, r2
   1572c:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
   15730:	f001 f8de 	bl	168f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d58>
   15734:	78a0      	ldrb	r0, [r4, #2]
   15736:	464a      	mov	r2, r9
   15738:	f3c0 1180 	ubfx	r1, r0, #6, #1
   1573c:	4650      	mov	r0, sl
   1573e:	f001 f821 	bl	16784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bec>
   15742:	68a0      	ldr	r0, [r4, #8]
   15744:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
   15748:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1574c:	f7fb bfea 	b.w	11724 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
   15750:	2001      	movs	r0, #1
   15752:	68a1      	ldr	r1, [r4, #8]
   15754:	e7e4      	b.n	15720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
   15756:	0000      	.short	0x0000
   15758:	20000134 	.word	0x20000134
   1575c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1575e:	4c58      	ldr	r4, [pc, #352]	; (158c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd28>)
   15760:	2301      	movs	r3, #1
   15762:	2100      	movs	r1, #0
   15764:	68a0      	ldr	r0, [r4, #8]
   15766:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   1576a:	3070      	adds	r0, #112	; 0x70
   1576c:	f004 fc40 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15770:	2800      	cmp	r0, #0
   15772:	d07d      	beq.n	15870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
   15774:	68a0      	ldr	r0, [r4, #8]
   15776:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
   1577a:	2500      	movs	r5, #0
   1577c:	b139      	cbz	r1, 1578e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
   1577e:	2100      	movs	r1, #0
   15780:	200e      	movs	r0, #14
   15782:	f000 f89f 	bl	158c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   15786:	68a0      	ldr	r0, [r4, #8]
   15788:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
   1578c:	e095      	b.n	158ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
   1578e:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
   15792:	b119      	cbz	r1, 1579c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
   15794:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   15798:	0789      	lsls	r1, r1, #30
   1579a:	d016      	beq.n	157ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
   1579c:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
   157a0:	f88d 1004 	strb.w	r1, [sp, #4]
   157a4:	9901      	ldr	r1, [sp, #4]
   157a6:	9101      	str	r1, [sp, #4]
   157a8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   157ac:	b141      	cbz	r1, 157c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
   157ae:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
   157b2:	f88d 1000 	strb.w	r1, [sp]
   157b6:	9900      	ldr	r1, [sp, #0]
   157b8:	9100      	str	r1, [sp, #0]
   157ba:	f89d 1000 	ldrb.w	r1, [sp]
   157be:	b189      	cbz	r1, 157e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
   157c0:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
   157c4:	2901      	cmp	r1, #1
   157c6:	d02f      	beq.n	15828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
   157c8:	e071      	b.n	158ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
   157ca:	2100      	movs	r1, #0
   157cc:	200c      	movs	r0, #12
   157ce:	f000 f879 	bl	158c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   157d2:	68a0      	ldr	r0, [r4, #8]
   157d4:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
   157d8:	f041 0101 	orr.w	r1, r1, #1
   157dc:	7001      	strb	r1, [r0, #0]
   157de:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
   157e2:	e06a      	b.n	158ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
   157e4:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   157e8:	2924      	cmp	r1, #36	; 0x24
   157ea:	d01b      	beq.n	15824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
   157ec:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   157f0:	2924      	cmp	r1, #36	; 0x24
   157f2:	d017      	beq.n	15824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
   157f4:	f05f 0300 	movs.w	r3, #0
   157f8:	f500 72cb 	add.w	r2, r0, #406	; 0x196
   157fc:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
   15800:	f005 f822 	bl	1a848 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   15804:	68a0      	ldr	r0, [r4, #8]
   15806:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
   1580a:	2100      	movs	r1, #0
   1580c:	2014      	movs	r0, #20
   1580e:	f000 f859 	bl	158c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   15812:	68a1      	ldr	r1, [r4, #8]
   15814:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   15818:	8bc2      	ldrh	r2, [r0, #30]
   1581a:	f821 2fee 	strh.w	r2, [r1, #238]!
   1581e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
   15820:	8048      	strh	r0, [r1, #2]
   15822:	e04a      	b.n	158ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
   15824:	2301      	movs	r3, #1
   15826:	e7e7      	b.n	157f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
   15828:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
   1582c:	f88d 1000 	strb.w	r1, [sp]
   15830:	9900      	ldr	r1, [sp, #0]
   15832:	9100      	str	r1, [sp, #0]
   15834:	f89d 1000 	ldrb.w	r1, [sp]
   15838:	bb31      	cbnz	r1, 15888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
   1583a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   1583e:	2301      	movs	r3, #1
   15840:	210b      	movs	r1, #11
   15842:	3070      	adds	r0, #112	; 0x70
   15844:	f004 fbd4 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15848:	b9f0      	cbnz	r0, 15888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
   1584a:	68a0      	ldr	r0, [r4, #8]
   1584c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   15850:	f005 ff7e 	bl	1b750 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
   15854:	4605      	mov	r5, r0
   15856:	68a0      	ldr	r0, [r4, #8]
   15858:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   1585c:	f005 ff78 	bl	1b750 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
   15860:	4606      	mov	r6, r0
   15862:	68a0      	ldr	r0, [r4, #8]
   15864:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
   15868:	4628      	mov	r0, r5
   1586a:	f005 ff7c 	bl	1b766 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
   1586e:	e000      	b.n	15872 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcda>
   15870:	e01e      	b.n	158b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   15872:	b150      	cbz	r0, 1588a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
   15874:	68a0      	ldr	r0, [r4, #8]
   15876:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
   1587a:	4630      	mov	r0, r6
   1587c:	f005 ff73 	bl	1b766 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
   15880:	b118      	cbz	r0, 1588a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
   15882:	2000      	movs	r0, #0
   15884:	f000 f91c 	bl	15ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   15888:	e011      	b.n	158ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
   1588a:	68a0      	ldr	r0, [r4, #8]
   1588c:	2301      	movs	r3, #1
   1588e:	2103      	movs	r1, #3
   15890:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15894:	3070      	adds	r0, #112	; 0x70
   15896:	f004 fbab 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1589a:	b940      	cbnz	r0, 158ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
   1589c:	68a0      	ldr	r0, [r4, #8]
   1589e:	2301      	movs	r3, #1
   158a0:	2102      	movs	r1, #2
   158a2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   158a6:	3070      	adds	r0, #112	; 0x70
   158a8:	f004 fba2 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   158ac:	b108      	cbz	r0, 158b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
   158ae:	2000      	movs	r0, #0
   158b0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   158b2:	2100      	movs	r1, #0
   158b4:	2016      	movs	r0, #22
   158b6:	f000 f805 	bl	158c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   158ba:	2001      	movs	r0, #1
   158bc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   158be:	0000      	.short	0x0000
   158c0:	20000134 	.word	0x20000134
   158c4:	b570      	push	{r4, r5, r6, lr}
   158c6:	4c0d      	ldr	r4, [pc, #52]	; (158fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd64>)
   158c8:	4606      	mov	r6, r0
   158ca:	460d      	mov	r5, r1
   158cc:	68a0      	ldr	r0, [r4, #8]
   158ce:	3070      	adds	r0, #112	; 0x70
   158d0:	f005 ff36 	bl	1b740 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   158d4:	b120      	cbz	r0, 158e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>
   158d6:	f640 2114 	movw	r1, #2580	; 0xa14
   158da:	2031      	movs	r0, #49	; 0x31
   158dc:	f7fb f89a 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   158e0:	68a2      	ldr	r2, [r4, #8]
   158e2:	2000      	movs	r0, #0
   158e4:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
   158e8:	b115      	cbz	r5, 158f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd58>
   158ea:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
   158ee:	bd70      	pop	{r4, r5, r6, pc}
   158f0:	f822 0faa 	strh.w	r0, [r2, #170]!
   158f4:	2001      	movs	r0, #1
   158f6:	7110      	strb	r0, [r2, #4]
   158f8:	bd70      	pop	{r4, r5, r6, pc}
   158fa:	0000      	.short	0x0000
   158fc:	20000134 	.word	0x20000134
   15900:	b570      	push	{r4, r5, r6, lr}
   15902:	4d1a      	ldr	r5, [pc, #104]	; (1596c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
   15904:	2600      	movs	r6, #0
   15906:	68ac      	ldr	r4, [r5, #8]
   15908:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
   1590c:	2801      	cmp	r0, #1
   1590e:	d00a      	beq.n	15926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8e>
   15910:	2802      	cmp	r0, #2
   15912:	d129      	bne.n	15968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
   15914:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
   15918:	2106      	movs	r1, #6
   1591a:	b1a0      	cbz	r0, 15946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
   1591c:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
   15920:	2101      	movs	r1, #1
   15922:	2002      	movs	r0, #2
   15924:	e01b      	b.n	1595e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
   15926:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   1592a:	2800      	cmp	r0, #0
   1592c:	d11c      	bne.n	15968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
   1592e:	2200      	movs	r2, #0
   15930:	f504 70be 	add.w	r0, r4, #380	; 0x17c
   15934:	f504 7188 	add.w	r1, r4, #272	; 0x110
   15938:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   1593c:	f004 fb10 	bl	19f60 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   15940:	2101      	movs	r1, #1
   15942:	2005      	movs	r0, #5
   15944:	e00b      	b.n	1595e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
   15946:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
   1594a:	0740      	lsls	r0, r0, #29
   1594c:	d505      	bpl.n	1595a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
   1594e:	2011      	movs	r0, #17
   15950:	2203      	movs	r2, #3
   15952:	f804 2fee 	strb.w	r2, [r4, #238]!
   15956:	7061      	strb	r1, [r4, #1]
   15958:	e000      	b.n	1595c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
   1595a:	200d      	movs	r0, #13
   1595c:	2101      	movs	r1, #1
   1595e:	f7ff ffb1 	bl	158c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   15962:	68a8      	ldr	r0, [r5, #8]
   15964:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
   15968:	bd70      	pop	{r4, r5, r6, pc}
   1596a:	0000      	.short	0x0000
   1596c:	20000134 	.word	0x20000134
   15970:	b570      	push	{r4, r5, r6, lr}
   15972:	4a2b      	ldr	r2, [pc, #172]	; (15a20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
   15974:	4603      	mov	r3, r0
   15976:	8850      	ldrh	r0, [r2, #2]
   15978:	4318      	orrs	r0, r3
   1597a:	8050      	strh	r0, [r2, #2]
   1597c:	4610      	mov	r0, r2
   1597e:	2b40      	cmp	r3, #64	; 0x40
   15980:	6880      	ldr	r0, [r0, #8]
   15982:	d00d      	beq.n	159a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>
   15984:	079e      	lsls	r6, r3, #30
   15986:	f04f 0500 	mov.w	r5, #0
   1598a:	f04f 0401 	mov.w	r4, #1
   1598e:	ea4f 76c3 	mov.w	r6, r3, lsl #31
   15992:	d50c      	bpl.n	159ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
   15994:	b14e      	cbz	r6, 159aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
   15996:	f640 5114 	movw	r1, #3348	; 0xd14
   1599a:	2031      	movs	r0, #49	; 0x31
   1599c:	f7fb f83a 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   159a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   159a4:	2104      	movs	r1, #4
   159a6:	f7fe bb9f 	b.w	140e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   159aa:	60d1      	str	r1, [r2, #12]
   159ac:	e01c      	b.n	159e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe50>
   159ae:	b1c6      	cbz	r6, 159e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
   159b0:	6111      	str	r1, [r2, #16]
   159b2:	78c9      	ldrb	r1, [r1, #3]
   159b4:	2906      	cmp	r1, #6
   159b6:	d002      	beq.n	159be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
   159b8:	290b      	cmp	r1, #11
   159ba:	d112      	bne.n	159e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
   159bc:	e009      	b.n	159d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3a>
   159be:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   159c2:	2917      	cmp	r1, #23
   159c4:	d10d      	bne.n	159e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
   159c6:	2100      	movs	r1, #0
   159c8:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
   159cc:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
   159d0:	e007      	b.n	159e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
   159d2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   159d6:	2911      	cmp	r1, #17
   159d8:	d103      	bne.n	159e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
   159da:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
   159de:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
   159e2:	0799      	lsls	r1, r3, #30
   159e4:	d516      	bpl.n	15a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
   159e6:	68d1      	ldr	r1, [r2, #12]
   159e8:	78c9      	ldrb	r1, [r1, #3]
   159ea:	2905      	cmp	r1, #5
   159ec:	d002      	beq.n	159f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
   159ee:	290b      	cmp	r1, #11
   159f0:	d110      	bne.n	15a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
   159f2:	e009      	b.n	15a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
   159f4:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   159f8:	2915      	cmp	r1, #21
   159fa:	d10b      	bne.n	15a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
   159fc:	2100      	movs	r1, #0
   159fe:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
   15a02:	f800 4c45 	strb.w	r4, [r0, #-69]
   15a06:	e005      	b.n	15a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
   15a08:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   15a0c:	2910      	cmp	r1, #16
   15a0e:	d101      	bne.n	15a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
   15a10:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
   15a14:	0698      	lsls	r0, r3, #26
   15a16:	d501      	bpl.n	15a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
   15a18:	2008      	movs	r0, #8
   15a1a:	7050      	strb	r0, [r2, #1]
   15a1c:	bd70      	pop	{r4, r5, r6, pc}
   15a1e:	0000      	.short	0x0000
   15a20:	20000134 	.word	0x20000134
   15a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a28:	4c24      	ldr	r4, [pc, #144]	; (15abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf24>)
   15a2a:	2501      	movs	r5, #1
   15a2c:	68a2      	ldr	r2, [r4, #8]
   15a2e:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
   15a32:	b108      	cbz	r0, 15a38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
   15a34:	2701      	movs	r7, #1
   15a36:	e000      	b.n	15a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
   15a38:	2700      	movs	r7, #0
   15a3a:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
   15a3e:	b109      	cbz	r1, 15a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
   15a40:	2601      	movs	r6, #1
   15a42:	e000      	b.n	15a46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
   15a44:	2600      	movs	r6, #0
   15a46:	b90f      	cbnz	r7, 15a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
   15a48:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
   15a4c:	b90e      	cbnz	r6, 15a52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
   15a4e:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
   15a52:	f102 0362 	add.w	r3, r2, #98	; 0x62
   15a56:	7218      	strb	r0, [r3, #8]
   15a58:	7259      	strb	r1, [r3, #9]
   15a5a:	2001      	movs	r0, #1
   15a5c:	7298      	strb	r0, [r3, #10]
   15a5e:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
   15a62:	2801      	cmp	r0, #1
   15a64:	d001      	beq.n	15a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
   15a66:	b907      	cbnz	r7, 15a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
   15a68:	b116      	cbz	r6, 15a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed8>
   15a6a:	2000      	movs	r0, #0
   15a6c:	f000 f828 	bl	15ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   15a70:	68a0      	ldr	r0, [r4, #8]
   15a72:	302c      	adds	r0, #44	; 0x2c
   15a74:	f004 ff57 	bl	1a926 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   15a78:	4606      	mov	r6, r0
   15a7a:	68a0      	ldr	r0, [r4, #8]
   15a7c:	f004 feff 	bl	1a87e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   15a80:	b1c0      	cbz	r0, 15ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
   15a82:	68a0      	ldr	r0, [r4, #8]
   15a84:	302c      	adds	r0, #44	; 0x2c
   15a86:	f004 ff4e 	bl	1a926 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   15a8a:	68a1      	ldr	r1, [r4, #8]
   15a8c:	4607      	mov	r7, r0
   15a8e:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
   15a92:	8808      	ldrh	r0, [r1, #0]
   15a94:	312c      	adds	r1, #44	; 0x2c
   15a96:	f004 feb3 	bl	1a800 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   15a9a:	42be      	cmp	r6, r7
   15a9c:	d20a      	bcs.n	15ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
   15a9e:	f7f8 fb79 	bl	e194 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
   15aa2:	4601      	mov	r1, r0
   15aa4:	1bb8      	subs	r0, r7, r6
   15aa6:	2865      	cmp	r0, #101	; 0x65
   15aa8:	d200      	bcs.n	15aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
   15aaa:	2065      	movs	r0, #101	; 0x65
   15aac:	f7f8 fab0 	bl	e010 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   15ab0:	b100      	cbz	r0, 15ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
   15ab2:	2500      	movs	r5, #0
   15ab4:	4628      	mov	r0, r5
   15ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15aba:	0000      	.short	0x0000
   15abc:	20000134 	.word	0x20000134
   15ac0:	b510      	push	{r4, lr}
   15ac2:	4c10      	ldr	r4, [pc, #64]	; (15b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>)
   15ac4:	68a1      	ldr	r1, [r4, #8]
   15ac6:	880a      	ldrh	r2, [r1, #0]
   15ac8:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
   15acc:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
   15ad0:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
   15ad4:	f005 fe3c 	bl	1b750 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
   15ad8:	68a1      	ldr	r1, [r4, #8]
   15ada:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
   15ade:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
   15ae2:	f005 fe35 	bl	1b750 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
   15ae6:	68a2      	ldr	r2, [r4, #8]
   15ae8:	f202 2102 	addw	r1, r2, #514	; 0x202
   15aec:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
   15af0:	2001      	movs	r0, #1
   15af2:	7008      	strb	r0, [r1, #0]
   15af4:	2000      	movs	r0, #0
   15af6:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
   15afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15afe:	f7fd b915 	b.w	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   15b02:	0000      	.short	0x0000
   15b04:	20000134 	.word	0x20000134
   15b08:	b510      	push	{r4, lr}
   15b0a:	4c15      	ldr	r4, [pc, #84]	; (15b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc8>)
   15b0c:	2301      	movs	r3, #1
   15b0e:	2100      	movs	r1, #0
   15b10:	68a0      	ldr	r0, [r4, #8]
   15b12:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15b16:	3070      	adds	r0, #112	; 0x70
   15b18:	f004 fa6a 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15b1c:	b190      	cbz	r0, 15b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>
   15b1e:	6920      	ldr	r0, [r4, #16]
   15b20:	f004 fcad 	bl	1a47e <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
   15b24:	68a1      	ldr	r1, [r4, #8]
   15b26:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
   15b2a:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
   15b2e:	f005 fe28 	bl	1b782 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
   15b32:	b148      	cbz	r0, 15b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
   15b34:	68a0      	ldr	r0, [r4, #8]
   15b36:	2128      	movs	r1, #40	; 0x28
   15b38:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
   15b3c:	3076      	adds	r0, #118	; 0x76
   15b3e:	2101      	movs	r1, #1
   15b40:	7781      	strb	r1, [r0, #30]
   15b42:	e00b      	b.n	15b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
   15b44:	2001      	movs	r0, #1
   15b46:	bd10      	pop	{r4, pc}
   15b48:	68a1      	ldr	r1, [r4, #8]
   15b4a:	6920      	ldr	r0, [r4, #16]
   15b4c:	f501 71cb 	add.w	r1, r1, #406	; 0x196
   15b50:	f004 fc90 	bl	1a474 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
   15b54:	68a1      	ldr	r1, [r4, #8]
   15b56:	200b      	movs	r0, #11
   15b58:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   15b5c:	2000      	movs	r0, #0
   15b5e:	bd10      	pop	{r4, pc}
   15b60:	20000134 	.word	0x20000134
   15b64:	b570      	push	{r4, r5, r6, lr}
   15b66:	4c29      	ldr	r4, [pc, #164]	; (15c0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1074>)
   15b68:	2301      	movs	r3, #1
   15b6a:	2100      	movs	r1, #0
   15b6c:	68a0      	ldr	r0, [r4, #8]
   15b6e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15b72:	3070      	adds	r0, #112	; 0x70
   15b74:	f004 fa3c 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15b78:	b1b8      	cbz	r0, 15baa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1012>
   15b7a:	2100      	movs	r1, #0
   15b7c:	6920      	ldr	r0, [r4, #16]
   15b7e:	f004 fc51 	bl	1a424 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
   15b82:	b1a0      	cbz	r0, 15bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1016>
   15b84:	6920      	ldr	r0, [r4, #16]
   15b86:	68a1      	ldr	r1, [r4, #8]
   15b88:	f8b0 000d 	ldrh.w	r0, [r0, #13]
   15b8c:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
   15b90:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
   15b94:	f005 fdf5 	bl	1b782 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
   15b98:	b168      	cbz	r0, 15bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101e>
   15b9a:	68a0      	ldr	r0, [r4, #8]
   15b9c:	2128      	movs	r1, #40	; 0x28
   15b9e:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
   15ba2:	3076      	adds	r0, #118	; 0x76
   15ba4:	2101      	movs	r1, #1
   15ba6:	7781      	strb	r1, [r0, #30]
   15ba8:	e02e      	b.n	15c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1070>
   15baa:	2001      	movs	r0, #1
   15bac:	bd70      	pop	{r4, r5, r6, pc}
   15bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15bb2:	f000 b8ad 	b.w	15d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   15bb6:	6920      	ldr	r0, [r4, #16]
   15bb8:	f004 fc64 	bl	1a484 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
   15bbc:	f004 f9fb 	bl	19fb6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   15bc0:	4605      	mov	r5, r0
   15bc2:	68a0      	ldr	r0, [r4, #8]
   15bc4:	4629      	mov	r1, r5
   15bc6:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
   15bca:	6920      	ldr	r0, [r4, #16]
   15bcc:	7900      	ldrb	r0, [r0, #4]
   15bce:	f004 fb7d 	bl	1a2cc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   15bd2:	68a1      	ldr	r1, [r4, #8]
   15bd4:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
   15bd8:	6920      	ldr	r0, [r4, #16]
   15bda:	4629      	mov	r1, r5
   15bdc:	f8b0 0005 	ldrh.w	r0, [r0, #5]
   15be0:	f004 fb70 	bl	1a2c4 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   15be4:	68a1      	ldr	r1, [r4, #8]
   15be6:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
   15bea:	6920      	ldr	r0, [r4, #16]
   15bec:	f004 fc4d 	bl	1a48a <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
   15bf0:	68a1      	ldr	r1, [r4, #8]
   15bf2:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
   15bf6:	6920      	ldr	r0, [r4, #16]
   15bf8:	f004 fc4a 	bl	1a490 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
   15bfc:	68a1      	ldr	r1, [r4, #8]
   15bfe:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
   15c02:	200d      	movs	r0, #13
   15c04:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   15c08:	2000      	movs	r0, #0
   15c0a:	bd70      	pop	{r4, r5, r6, pc}
   15c0c:	20000134 	.word	0x20000134
   15c10:	b538      	push	{r3, r4, r5, lr}
   15c12:	4c29      	ldr	r4, [pc, #164]	; (15cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1120>)
   15c14:	2301      	movs	r3, #1
   15c16:	2100      	movs	r1, #0
   15c18:	68a0      	ldr	r0, [r4, #8]
   15c1a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15c1e:	3070      	adds	r0, #112	; 0x70
   15c20:	f004 f9e6 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15c24:	b970      	cbnz	r0, 15c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
   15c26:	68a0      	ldr	r0, [r4, #8]
   15c28:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15c2c:	2a12      	cmp	r2, #18
   15c2e:	d009      	beq.n	15c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
   15c30:	2301      	movs	r3, #1
   15c32:	2105      	movs	r1, #5
   15c34:	3070      	adds	r0, #112	; 0x70
   15c36:	f004 f9db 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15c3a:	b108      	cbz	r0, 15c40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a8>
   15c3c:	2008      	movs	r0, #8
   15c3e:	bd38      	pop	{r3, r4, r5, pc}
   15c40:	2001      	movs	r0, #1
   15c42:	bd38      	pop	{r3, r4, r5, pc}
   15c44:	68a0      	ldr	r0, [r4, #8]
   15c46:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   15c4a:	b908      	cbnz	r0, 15c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>
   15c4c:	f7ff f8ca 	bl	14de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15c50:	68a1      	ldr	r1, [r4, #8]
   15c52:	6920      	ldr	r0, [r4, #16]
   15c54:	f501 7188 	add.w	r1, r1, #272	; 0x110
   15c58:	f004 fc29 	bl	1a4ae <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
   15c5c:	68a1      	ldr	r1, [r4, #8]
   15c5e:	6920      	ldr	r0, [r4, #16]
   15c60:	31e0      	adds	r1, #224	; 0xe0
   15c62:	f004 fc1b 	bl	1a49c <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
   15c66:	68a1      	ldr	r1, [r4, #8]
   15c68:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
   15c6c:	f88d 0000 	strb.w	r0, [sp]
   15c70:	9800      	ldr	r0, [sp, #0]
   15c72:	9000      	str	r0, [sp, #0]
   15c74:	f89d 0000 	ldrb.w	r0, [sp]
   15c78:	b120      	cbz	r0, 15c84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
   15c7a:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   15c7e:	2031      	movs	r0, #49	; 0x31
   15c80:	f7fa fec8 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15c84:	8808      	ldrh	r0, [r1, #0]
   15c86:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
   15c8a:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
   15c8e:	6920      	ldr	r0, [r4, #16]
   15c90:	f004 fc08 	bl	1a4a4 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
   15c94:	68a1      	ldr	r1, [r4, #8]
   15c96:	6920      	ldr	r0, [r4, #16]
   15c98:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
   15c9c:	f004 fbfb 	bl	1a496 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
   15ca0:	68a0      	ldr	r0, [r4, #8]
   15ca2:	4601      	mov	r1, r0
   15ca4:	2201      	movs	r2, #1
   15ca6:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
   15caa:	2014      	movs	r0, #20
   15cac:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   15cb0:	f7fd f83c 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   15cb4:	2000      	movs	r0, #0
   15cb6:	bd38      	pop	{r3, r4, r5, pc}
   15cb8:	20000134 	.word	0x20000134
   15cbc:	b51c      	push	{r2, r3, r4, lr}
   15cbe:	4c13      	ldr	r4, [pc, #76]	; (15d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>)
   15cc0:	68a0      	ldr	r0, [r4, #8]
   15cc2:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
   15cc6:	07c0      	lsls	r0, r0, #31
   15cc8:	d001      	beq.n	15cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1136>
   15cca:	2001      	movs	r0, #1
   15ccc:	bd1c      	pop	{r2, r3, r4, pc}
   15cce:	4669      	mov	r1, sp
   15cd0:	6920      	ldr	r0, [r4, #16]
   15cd2:	f004 fbf2 	bl	1a4ba <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
   15cd6:	f001 f9d5 	bl	17084 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   15cda:	f644 112f 	movw	r1, #18735	; 0x492f
   15cde:	4008      	ands	r0, r1
   15ce0:	f89d 2000 	ldrb.w	r2, [sp]
   15ce4:	68a1      	ldr	r1, [r4, #8]
   15ce6:	4002      	ands	r2, r0
   15ce8:	f801 2fbc 	strb.w	r2, [r1, #188]!
   15cec:	f89d 2001 	ldrb.w	r2, [sp, #1]
   15cf0:	ea02 2010 	and.w	r0, r2, r0, lsr #8
   15cf4:	7048      	strb	r0, [r1, #1]
   15cf6:	f7ff f875 	bl	14de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15cfa:	68a0      	ldr	r0, [r4, #8]
   15cfc:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   15d00:	f041 0101 	orr.w	r1, r1, #1
   15d04:	7001      	strb	r1, [r0, #0]
   15d06:	2000      	movs	r0, #0
   15d08:	bd1c      	pop	{r2, r3, r4, pc}
   15d0a:	0000      	.short	0x0000
   15d0c:	20000134 	.word	0x20000134
   15d10:	4a0a      	ldr	r2, [pc, #40]	; (15d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
   15d12:	b510      	push	{r4, lr}
   15d14:	6890      	ldr	r0, [r2, #8]
   15d16:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   15d1a:	070b      	lsls	r3, r1, #28
   15d1c:	d501      	bpl.n	15d22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118a>
   15d1e:	2001      	movs	r0, #1
   15d20:	bd10      	pop	{r4, pc}
   15d22:	f041 0108 	orr.w	r1, r1, #8
   15d26:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
   15d2a:	6911      	ldr	r1, [r2, #16]
   15d2c:	78c9      	ldrb	r1, [r1, #3]
   15d2e:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
   15d32:	f7ff f857 	bl	14de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15d36:	2000      	movs	r0, #0
   15d38:	bd10      	pop	{r4, pc}
   15d3a:	0000      	.short	0x0000
   15d3c:	20000134 	.word	0x20000134
   15d40:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   15d44:	4c34      	ldr	r4, [pc, #208]	; (15e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1280>)
   15d46:	68a0      	ldr	r0, [r4, #8]
   15d48:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
   15d4c:	f010 0f30 	tst.w	r0, #48	; 0x30
   15d50:	d002      	beq.n	15d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
   15d52:	2001      	movs	r0, #1
   15d54:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   15d58:	6920      	ldr	r0, [r4, #16]
   15d5a:	f004 fbc9 	bl	1a4f0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
   15d5e:	b318      	cbz	r0, 15da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
   15d60:	6920      	ldr	r0, [r4, #16]
   15d62:	f004 fbb7 	bl	1a4d4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
   15d66:	4607      	mov	r7, r0
   15d68:	6920      	ldr	r0, [r4, #16]
   15d6a:	f004 fbb7 	bl	1a4dc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
   15d6e:	4606      	mov	r6, r0
   15d70:	6920      	ldr	r0, [r4, #16]
   15d72:	f004 fbad 	bl	1a4d0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
   15d76:	4605      	mov	r5, r0
   15d78:	6920      	ldr	r0, [r4, #16]
   15d7a:	f004 fbad 	bl	1a4d8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
   15d7e:	4601      	mov	r1, r0
   15d80:	9700      	str	r7, [sp, #0]
   15d82:	68a0      	ldr	r0, [r4, #8]
   15d84:	4633      	mov	r3, r6
   15d86:	462a      	mov	r2, r5
   15d88:	302c      	adds	r0, #44	; 0x2c
   15d8a:	f004 fe06 	bl	1a99a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   15d8e:	78a0      	ldrb	r0, [r4, #2]
   15d90:	0780      	lsls	r0, r0, #30
   15d92:	d503      	bpl.n	15d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>
   15d94:	68e0      	ldr	r0, [r4, #12]
   15d96:	78c0      	ldrb	r0, [r0, #3]
   15d98:	2814      	cmp	r0, #20
   15d9a:	d009      	beq.n	15db0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
   15d9c:	68a0      	ldr	r0, [r4, #8]
   15d9e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
   15da2:	281c      	cmp	r0, #28
   15da4:	d004      	beq.n	15db0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
   15da6:	e007      	b.n	15db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1220>
   15da8:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   15dac:	f7ff bfb0 	b.w	15d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   15db0:	68a1      	ldr	r1, [r4, #8]
   15db2:	2001      	movs	r0, #1
   15db4:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
   15db8:	68a1      	ldr	r1, [r4, #8]
   15dba:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
   15dbe:	2801      	cmp	r0, #1
   15dc0:	d011      	beq.n	15de6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
   15dc2:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
   15dc6:	f88d 0004 	strb.w	r0, [sp, #4]
   15dca:	9801      	ldr	r0, [sp, #4]
   15dcc:	9001      	str	r0, [sp, #4]
   15dce:	f89d 0004 	ldrb.w	r0, [sp, #4]
   15dd2:	b940      	cbnz	r0, 15de6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
   15dd4:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
   15dd8:	f88d 0000 	strb.w	r0, [sp]
   15ddc:	9800      	ldr	r0, [sp, #0]
   15dde:	9000      	str	r0, [sp, #0]
   15de0:	f89d 0000 	ldrb.w	r0, [sp]
   15de4:	b128      	cbz	r0, 15df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125a>
   15de6:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
   15dea:	f040 0010 	orr.w	r0, r0, #16
   15dee:	7008      	strb	r0, [r1, #0]
   15df0:	e00d      	b.n	15e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1276>
   15df2:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
   15df6:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
   15dfa:	f040 0020 	orr.w	r0, r0, #32
   15dfe:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
   15e02:	f831 0b2c 	ldrh.w	r0, [r1], #44
   15e06:	f004 fdcf 	bl	1a9a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
   15e0a:	f7fc ff8f 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   15e0e:	f7fe ffe9 	bl	14de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15e12:	2000      	movs	r0, #0
   15e14:	e79e      	b.n	15d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
   15e16:	0000      	.short	0x0000
   15e18:	20000134 	.word	0x20000134
   15e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e1e:	4c1a      	ldr	r4, [pc, #104]	; (15e88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>)
   15e20:	2301      	movs	r3, #1
   15e22:	210a      	movs	r1, #10
   15e24:	68a0      	ldr	r0, [r4, #8]
   15e26:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   15e2a:	3070      	adds	r0, #112	; 0x70
   15e2c:	f004 f8e0 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15e30:	b338      	cbz	r0, 15e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ea>
   15e32:	6920      	ldr	r0, [r4, #16]
   15e34:	f004 fb5c 	bl	1a4f0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
   15e38:	b1c8      	cbz	r0, 15e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d6>
   15e3a:	6920      	ldr	r0, [r4, #16]
   15e3c:	f004 fb4a 	bl	1a4d4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
   15e40:	4607      	mov	r7, r0
   15e42:	6920      	ldr	r0, [r4, #16]
   15e44:	f004 fb4a 	bl	1a4dc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
   15e48:	4606      	mov	r6, r0
   15e4a:	6920      	ldr	r0, [r4, #16]
   15e4c:	f004 fb40 	bl	1a4d0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
   15e50:	4605      	mov	r5, r0
   15e52:	6920      	ldr	r0, [r4, #16]
   15e54:	f004 fb40 	bl	1a4d8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
   15e58:	4601      	mov	r1, r0
   15e5a:	9700      	str	r7, [sp, #0]
   15e5c:	68a0      	ldr	r0, [r4, #8]
   15e5e:	4633      	mov	r3, r6
   15e60:	462a      	mov	r2, r5
   15e62:	302c      	adds	r0, #44	; 0x2c
   15e64:	f004 fd99 	bl	1a99a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   15e68:	68a0      	ldr	r0, [r4, #8]
   15e6a:	f004 fd08 	bl	1a87e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   15e6e:	68a1      	ldr	r1, [r4, #8]
   15e70:	2000      	movs	r0, #0
   15e72:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
   15e76:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   15e7a:	f7ff f977 	bl	1516c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
   15e7e:	2000      	movs	r0, #0
   15e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e82:	2001      	movs	r0, #1
   15e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e86:	0000      	.short	0x0000
   15e88:	20000134 	.word	0x20000134
   15e8c:	b510      	push	{r4, lr}
   15e8e:	4c09      	ldr	r4, [pc, #36]	; (15eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x131c>)
   15e90:	68a0      	ldr	r0, [r4, #8]
   15e92:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
   15e96:	0740      	lsls	r0, r0, #29
   15e98:	d501      	bpl.n	15e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1306>
   15e9a:	2001      	movs	r0, #1
   15e9c:	bd10      	pop	{r4, pc}
   15e9e:	f7fe ffa1 	bl	14de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15ea2:	68a0      	ldr	r0, [r4, #8]
   15ea4:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   15ea8:	f041 0104 	orr.w	r1, r1, #4
   15eac:	7001      	strb	r1, [r0, #0]
   15eae:	2000      	movs	r0, #0
   15eb0:	bd10      	pop	{r4, pc}
   15eb2:	0000      	.short	0x0000
   15eb4:	20000134 	.word	0x20000134
   15eb8:	b510      	push	{r4, lr}
   15eba:	4c09      	ldr	r4, [pc, #36]	; (15ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>)
   15ebc:	2301      	movs	r3, #1
   15ebe:	2109      	movs	r1, #9
   15ec0:	68a0      	ldr	r0, [r4, #8]
   15ec2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   15ec6:	3070      	adds	r0, #112	; 0x70
   15ec8:	f004 f892 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15ecc:	2800      	cmp	r0, #0
   15ece:	d006      	beq.n	15ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
   15ed0:	68a1      	ldr	r1, [r4, #8]
   15ed2:	2000      	movs	r0, #0
   15ed4:	f801 0fa2 	strb.w	r0, [r1, #162]!
   15ed8:	7308      	strb	r0, [r1, #12]
   15eda:	f801 0c25 	strb.w	r0, [r1, #-37]
   15ede:	bd10      	pop	{r4, pc}
   15ee0:	20000134 	.word	0x20000134
   15ee4:	b510      	push	{r4, lr}
   15ee6:	4c0f      	ldr	r4, [pc, #60]	; (15f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>)
   15ee8:	2301      	movs	r3, #1
   15eea:	2100      	movs	r1, #0
   15eec:	68a0      	ldr	r0, [r4, #8]
   15eee:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15ef2:	3070      	adds	r0, #112	; 0x70
   15ef4:	f004 f87c 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15ef8:	b138      	cbz	r0, 15f0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
   15efa:	f7fe ff73 	bl	14de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15efe:	68a1      	ldr	r1, [r4, #8]
   15f00:	2010      	movs	r0, #16
   15f02:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   15f06:	2000      	movs	r0, #0
   15f08:	bd10      	pop	{r4, pc}
   15f0a:	68a0      	ldr	r0, [r4, #8]
   15f0c:	2301      	movs	r3, #1
   15f0e:	2105      	movs	r1, #5
   15f10:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15f14:	3070      	adds	r0, #112	; 0x70
   15f16:	f004 f86b 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15f1a:	b108      	cbz	r0, 15f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
   15f1c:	2008      	movs	r0, #8
   15f1e:	bd10      	pop	{r4, pc}
   15f20:	2001      	movs	r0, #1
   15f22:	bd10      	pop	{r4, pc}
   15f24:	20000134 	.word	0x20000134
   15f28:	4806      	ldr	r0, [pc, #24]	; (15f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ac>)
   15f2a:	6880      	ldr	r0, [r0, #8]
   15f2c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   15f30:	2911      	cmp	r1, #17
   15f32:	d001      	beq.n	15f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a0>
   15f34:	2002      	movs	r0, #2
   15f36:	4770      	bx	lr
   15f38:	2112      	movs	r1, #18
   15f3a:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   15f3e:	2000      	movs	r0, #0
   15f40:	4770      	bx	lr
   15f42:	0000      	.short	0x0000
   15f44:	20000134 	.word	0x20000134
   15f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f4a:	4c34      	ldr	r4, [pc, #208]	; (1601c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
   15f4c:	2301      	movs	r3, #1
   15f4e:	210b      	movs	r1, #11
   15f50:	68a0      	ldr	r0, [r4, #8]
   15f52:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15f56:	3070      	adds	r0, #112	; 0x70
   15f58:	f004 f84a 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15f5c:	bb78      	cbnz	r0, 15fbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1426>
   15f5e:	68a0      	ldr	r0, [r4, #8]
   15f60:	2301      	movs	r3, #1
   15f62:	2100      	movs	r1, #0
   15f64:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15f68:	3070      	adds	r0, #112	; 0x70
   15f6a:	f004 f841 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15f6e:	b320      	cbz	r0, 15fba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1422>
   15f70:	68a0      	ldr	r0, [r4, #8]
   15f72:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
   15f76:	2824      	cmp	r0, #36	; 0x24
   15f78:	d022      	beq.n	15fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
   15f7a:	6920      	ldr	r0, [r4, #16]
   15f7c:	f004 fad4 	bl	1a528 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
   15f80:	b300      	cbz	r0, 15fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142c>
   15f82:	68a0      	ldr	r0, [r4, #8]
   15f84:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
   15f88:	f041 0104 	orr.w	r1, r1, #4
   15f8c:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
   15f90:	6921      	ldr	r1, [r4, #16]
   15f92:	794a      	ldrb	r2, [r1, #5]
   15f94:	f002 0207 	and.w	r2, r2, #7
   15f98:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
   15f9c:	7909      	ldrb	r1, [r1, #4]
   15f9e:	f001 0107 	and.w	r1, r1, #7
   15fa2:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
   15fa6:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
   15faa:	f88d 3000 	strb.w	r3, [sp]
   15fae:	9b00      	ldr	r3, [sp, #0]
   15fb0:	9300      	str	r3, [sp, #0]
   15fb2:	f89d 3000 	ldrb.w	r3, [sp]
   15fb6:	bb43      	cbnz	r3, 1600a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
   15fb8:	e008      	b.n	15fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
   15fba:	2001      	movs	r0, #1
   15fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15fbe:	e7ff      	b.n	15fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
   15fc0:	2020      	movs	r0, #32
   15fc2:	e7fb      	b.n	15fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
   15fc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15fc8:	f7ff bea2 	b.w	15d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   15fcc:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   15fd0:	2b01      	cmp	r3, #1
   15fd2:	d01a      	beq.n	1600a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
   15fd4:	f100 036a 	add.w	r3, r0, #106	; 0x6a
   15fd8:	2501      	movs	r5, #1
   15fda:	785e      	ldrb	r6, [r3, #1]
   15fdc:	428e      	cmp	r6, r1
   15fde:	d106      	bne.n	15fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
   15fe0:	7819      	ldrb	r1, [r3, #0]
   15fe2:	4291      	cmp	r1, r2
   15fe4:	d103      	bne.n	15fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
   15fe6:	2102      	movs	r1, #2
   15fe8:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
   15fec:	e00d      	b.n	1600a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
   15fee:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
   15ff2:	8802      	ldrh	r2, [r0, #0]
   15ff4:	f821 2902 	strh.w	r2, [r1], #-2
   15ff8:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
   15ffc:	710a      	strb	r2, [r1, #4]
   15ffe:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
   16002:	7148      	strb	r0, [r1, #5]
   16004:	700d      	strb	r5, [r1, #0]
   16006:	f7fc fe91 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1600a:	68a1      	ldr	r1, [r4, #8]
   1600c:	2021      	movs	r0, #33	; 0x21
   1600e:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   16012:	f7fe fee7 	bl	14de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   16016:	2000      	movs	r0, #0
   16018:	e7d0      	b.n	15fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
   1601a:	0000      	.short	0x0000
   1601c:	20000134 	.word	0x20000134
   16020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16024:	4c4e      	ldr	r4, [pc, #312]	; (16160 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
   16026:	68a0      	ldr	r0, [r4, #8]
   16028:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   1602c:	2920      	cmp	r1, #32
   1602e:	d009      	beq.n	16044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ac>
   16030:	f05f 0700 	movs.w	r7, #0
   16034:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   16038:	2922      	cmp	r1, #34	; 0x22
   1603a:	d005      	beq.n	16048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b0>
   1603c:	b387      	cbz	r7, 160a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1508>
   1603e:	f100 057d 	add.w	r5, r0, #125	; 0x7d
   16042:	e003      	b.n	1604c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
   16044:	2701      	movs	r7, #1
   16046:	e7f5      	b.n	16034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
   16048:	f100 057e 	add.w	r5, r0, #126	; 0x7e
   1604c:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
   16050:	f041 0104 	orr.w	r1, r1, #4
   16054:	7001      	strb	r1, [r0, #0]
   16056:	6920      	ldr	r0, [r4, #16]
   16058:	f7fc fd54 	bl	12b04 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
   1605c:	f04f 0801 	mov.w	r8, #1
   16060:	2600      	movs	r6, #0
   16062:	b308      	cbz	r0, 160a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
   16064:	4639      	mov	r1, r7
   16066:	6920      	ldr	r0, [r4, #16]
   16068:	f7fe ff86 	bl	14f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e0>
   1606c:	b1e0      	cbz	r0, 160a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
   1606e:	466a      	mov	r2, sp
   16070:	6921      	ldr	r1, [r4, #16]
   16072:	68a0      	ldr	r0, [r4, #8]
   16074:	f004 f8e0 	bl	1a238 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
   16078:	b388      	cbz	r0, 160de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
   1607a:	6920      	ldr	r0, [r4, #16]
   1607c:	f004 fa30 	bl	1a4e0 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
   16080:	68a1      	ldr	r1, [r4, #8]
   16082:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
   16086:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
   1608a:	f005 fb7a 	bl	1b782 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
   1608e:	b338      	cbz	r0, 160e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1548>
   16090:	68a0      	ldr	r0, [r4, #8]
   16092:	2128      	movs	r1, #40	; 0x28
   16094:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
   16098:	3076      	adds	r0, #118	; 0x76
   1609a:	f880 801e 	strb.w	r8, [r0, #30]
   1609e:	e053      	b.n	16148 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
   160a0:	e7ff      	b.n	160a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
   160a2:	2002      	movs	r0, #2
   160a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   160a8:	68a0      	ldr	r0, [r4, #8]
   160aa:	f04f 0900 	mov.w	r9, #0
   160ae:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
   160b2:	2901      	cmp	r1, #1
   160b4:	d015      	beq.n	160e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
   160b6:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
   160ba:	b1f7      	cbz	r7, 160fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
   160bc:	6920      	ldr	r0, [r4, #16]
   160be:	68a1      	ldr	r1, [r4, #8]
   160c0:	78c0      	ldrb	r0, [r0, #3]
   160c2:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
   160c6:	fa08 f200 	lsl.w	r2, r8, r0
   160ca:	f3c2 6000 	ubfx	r0, r2, #24, #1
   160ce:	b160      	cbz	r0, 160ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1552>
   160d0:	200a      	movs	r0, #10
   160d2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   160d6:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
   160da:	b9a0      	cbnz	r0, 16106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156e>
   160dc:	e008      	b.n	160f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
   160de:	e014      	b.n	1610a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
   160e0:	e027      	b.n	16132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x159a>
   160e2:	201e      	movs	r0, #30
   160e4:	f7ff fcec 	bl	15ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   160e8:	e7e7      	b.n	160ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1522>
   160ea:	f240 31cb 	movw	r1, #971	; 0x3cb
   160ee:	e001      	b.n	160f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155c>
   160f0:	f240 31d3 	movw	r1, #979	; 0x3d3
   160f4:	2031      	movs	r0, #49	; 0x31
   160f6:	f7fa fc8d 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   160fa:	702e      	strb	r6, [r5, #0]
   160fc:	f7fe fe7e 	bl	14dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   16100:	f7ff fe06 	bl	15d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   16104:	4681      	mov	r9, r0
   16106:	4648      	mov	r0, r9
   16108:	e7cc      	b.n	160a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
   1610a:	68a0      	ldr	r0, [r4, #8]
   1610c:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
   16110:	2901      	cmp	r1, #1
   16112:	d009      	beq.n	16128 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1590>
   16114:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
   16118:	68a0      	ldr	r0, [r4, #8]
   1611a:	f100 017e 	add.w	r1, r0, #126	; 0x7e
   1611e:	428d      	cmp	r5, r1
   16120:	d112      	bne.n	16148 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
   16122:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
   16126:	e00f      	b.n	16148 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
   16128:	2000      	movs	r0, #0
   1612a:	f7ff fcc9 	bl	15ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   1612e:	702e      	strb	r6, [r5, #0]
   16130:	e7f2      	b.n	16118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1580>
   16132:	68a0      	ldr	r0, [r4, #8]
   16134:	f89d 1000 	ldrb.w	r1, [sp]
   16138:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
   1613c:	f89d 1001 	ldrb.w	r1, [sp, #1]
   16140:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
   16144:	2024      	movs	r0, #36	; 0x24
   16146:	7028      	strb	r0, [r5, #0]
   16148:	68a0      	ldr	r0, [r4, #8]
   1614a:	f100 017e 	add.w	r1, r0, #126	; 0x7e
   1614e:	428d      	cmp	r5, r1
   16150:	d102      	bne.n	16158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
   16152:	f7fe fe53 	bl	14dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   16156:	e001      	b.n	1615c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
   16158:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
   1615c:	2000      	movs	r0, #0
   1615e:	e7a1      	b.n	160a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
   16160:	20000134 	.word	0x20000134
   16164:	b510      	push	{r4, lr}
   16166:	4c0a      	ldr	r4, [pc, #40]	; (16190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
   16168:	68a0      	ldr	r0, [r4, #8]
   1616a:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
   1616e:	f041 0104 	orr.w	r1, r1, #4
   16172:	7001      	strb	r1, [r0, #0]
   16174:	6920      	ldr	r0, [r4, #16]
   16176:	f004 f9e1 	bl	1a53c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
   1617a:	2816      	cmp	r0, #22
   1617c:	d001      	beq.n	16182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
   1617e:	2000      	movs	r0, #0
   16180:	bd10      	pop	{r4, pc}
   16182:	6920      	ldr	r0, [r4, #16]
   16184:	f004 f9dc 	bl	1a540 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
   16188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1618c:	f7fe be08 	b.w	14da0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
   16190:	20000134 	.word	0x20000134
   16194:	4802      	ldr	r0, [pc, #8]	; (161a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1608>)
   16196:	6900      	ldr	r0, [r0, #16]
   16198:	7900      	ldrb	r0, [r0, #4]
   1619a:	f7fe be01 	b.w	14da0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
   1619e:	0000      	.short	0x0000
   161a0:	20000134 	.word	0x20000134
   161a4:	b510      	push	{r4, lr}
   161a6:	4c08      	ldr	r4, [pc, #32]	; (161c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>)
   161a8:	68a0      	ldr	r0, [r4, #8]
   161aa:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   161ae:	2817      	cmp	r0, #23
   161b0:	d001      	beq.n	161b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161e>
   161b2:	2002      	movs	r0, #2
   161b4:	bd10      	pop	{r4, pc}
   161b6:	f7fe fe21 	bl	14dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   161ba:	68a1      	ldr	r1, [r4, #8]
   161bc:	201b      	movs	r0, #27
   161be:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   161c2:	2000      	movs	r0, #0
   161c4:	bd10      	pop	{r4, pc}
   161c6:	0000      	.short	0x0000
   161c8:	20000134 	.word	0x20000134
   161cc:	b510      	push	{r4, lr}
   161ce:	4c0b      	ldr	r4, [pc, #44]	; (161fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
   161d0:	2301      	movs	r3, #1
   161d2:	4619      	mov	r1, r3
   161d4:	68a0      	ldr	r0, [r4, #8]
   161d6:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   161da:	3070      	adds	r0, #112	; 0x70
   161dc:	f003 ff08 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   161e0:	b108      	cbz	r0, 161e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164e>
   161e2:	2000      	movs	r0, #0
   161e4:	bd10      	pop	{r4, pc}
   161e6:	6920      	ldr	r0, [r4, #16]
   161e8:	f004 f97e 	bl	1a4e8 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
   161ec:	68a1      	ldr	r1, [r4, #8]
   161ee:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
   161f2:	2007      	movs	r0, #7
   161f4:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
   161f8:	e7f3      	b.n	161e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164a>
   161fa:	0000      	.short	0x0000
   161fc:	20000134 	.word	0x20000134
   16200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16204:	4d37      	ldr	r5, [pc, #220]	; (162e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
   16206:	2600      	movs	r6, #0
   16208:	4628      	mov	r0, r5
   1620a:	68a9      	ldr	r1, [r5, #8]
   1620c:	6900      	ldr	r0, [r0, #16]
   1620e:	2701      	movs	r7, #1
   16210:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
   16214:	7900      	ldrb	r0, [r0, #4]
   16216:	2b0e      	cmp	r3, #14
   16218:	d101      	bne.n	1621e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1686>
   1621a:	2812      	cmp	r0, #18
   1621c:	d006      	beq.n	1622c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
   1621e:	4a31      	ldr	r2, [pc, #196]	; (162e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
   16220:	2400      	movs	r4, #0
   16222:	6892      	ldr	r2, [r2, #8]
   16224:	32bc      	adds	r2, #188	; 0xbc
   16226:	2b1c      	cmp	r3, #28
   16228:	d004      	beq.n	16234 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169c>
   1622a:	e005      	b.n	16238 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a0>
   1622c:	f7ff fe44 	bl	15eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1320>
   16230:	4606      	mov	r6, r0
   16232:	e053      	b.n	162dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   16234:	2814      	cmp	r0, #20
   16236:	d002      	beq.n	1623e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a6>
   16238:	2b04      	cmp	r3, #4
   1623a:	d00b      	beq.n	16254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
   1623c:	e00c      	b.n	16258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c0>
   1623e:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
   16242:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
   16246:	2105      	movs	r1, #5
   16248:	4610      	mov	r0, r2
   1624a:	f005 fa2b 	bl	1b6a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
   1624e:	f7fe ff8d 	bl	1516c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
   16252:	e043      	b.n	162dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   16254:	280e      	cmp	r0, #14
   16256:	d002      	beq.n	1625e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c6>
   16258:	2b20      	cmp	r3, #32
   1625a:	d00f      	beq.n	1627c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
   1625c:	e010      	b.n	16280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e8>
   1625e:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
   16262:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
   16266:	8808      	ldrh	r0, [r1, #0]
   16268:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
   1626c:	201a      	movs	r0, #26
   1626e:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
   16272:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
   16276:	f7fc fd59 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1627a:	e02f      	b.n	162dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   1627c:	2816      	cmp	r0, #22
   1627e:	d006      	beq.n	1628e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
   16280:	2b26      	cmp	r3, #38	; 0x26
   16282:	d101      	bne.n	16288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f0>
   16284:	2816      	cmp	r0, #22
   16286:	d002      	beq.n	1628e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
   16288:	2817      	cmp	r0, #23
   1628a:	d014      	beq.n	162b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171e>
   1628c:	e026      	b.n	162dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   1628e:	f801 4f7d 	strb.w	r4, [r1, #125]!
   16292:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
   16296:	7848      	ldrb	r0, [r1, #1]
   16298:	2821      	cmp	r0, #33	; 0x21
   1629a:	d01f      	beq.n	162dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   1629c:	2108      	movs	r1, #8
   1629e:	4610      	mov	r0, r2
   162a0:	f005 fa00 	bl	1b6a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
   162a4:	68a8      	ldr	r0, [r5, #8]
   162a6:	210b      	movs	r1, #11
   162a8:	30bc      	adds	r0, #188	; 0xbc
   162aa:	f005 f9fb 	bl	1b6a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
   162ae:	201a      	movs	r0, #26
   162b0:	f7ff fc06 	bl	15ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   162b4:	e012      	b.n	162dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   162b6:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
   162ba:	2822      	cmp	r0, #34	; 0x22
   162bc:	d10e      	bne.n	162dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   162be:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
   162c2:	f7fe fd9b 	bl	14dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   162c6:	68a8      	ldr	r0, [r5, #8]
   162c8:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
   162cc:	2801      	cmp	r0, #1
   162ce:	d102      	bne.n	162d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173e>
   162d0:	2000      	movs	r0, #0
   162d2:	f7ff fbf5 	bl	15ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   162d6:	68a8      	ldr	r0, [r5, #8]
   162d8:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
   162dc:	4630      	mov	r0, r6
   162de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   162e2:	0000      	.short	0x0000
   162e4:	20000134 	.word	0x20000134
   162e8:	b570      	push	{r4, r5, r6, lr}
   162ea:	4c2c      	ldr	r4, [pc, #176]	; (1639c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>)
   162ec:	68a0      	ldr	r0, [r4, #8]
   162ee:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   162f2:	0789      	lsls	r1, r1, #30
   162f4:	d507      	bpl.n	16306 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176e>
   162f6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   162fa:	2301      	movs	r3, #1
   162fc:	2108      	movs	r1, #8
   162fe:	3070      	adds	r0, #112	; 0x70
   16300:	f003 fe76 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16304:	b1e8      	cbz	r0, 16342 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17aa>
   16306:	68a0      	ldr	r0, [r4, #8]
   16308:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
   1630c:	0780      	lsls	r0, r0, #30
   1630e:	d412      	bmi.n	16336 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x179e>
   16310:	6920      	ldr	r0, [r4, #16]
   16312:	f004 f8eb 	bl	1a4ec <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
   16316:	68a1      	ldr	r1, [r4, #8]
   16318:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
   1631c:	6920      	ldr	r0, [r4, #16]
   1631e:	f830 2f05 	ldrh.w	r2, [r0, #5]!
   16322:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
   16326:	8840      	ldrh	r0, [r0, #2]
   16328:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
   1632c:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
   16330:	f040 0002 	orr.w	r0, r0, #2
   16334:	7008      	strb	r0, [r1, #0]
   16336:	68a0      	ldr	r0, [r4, #8]
   16338:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   1633c:	07c9      	lsls	r1, r1, #31
   1633e:	d002      	beq.n	16346 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
   16340:	e010      	b.n	16364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17cc>
   16342:	2001      	movs	r0, #1
   16344:	bd70      	pop	{r4, r5, r6, pc}
   16346:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   1634a:	078a      	lsls	r2, r1, #30
   1634c:	d504      	bpl.n	16358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
   1634e:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   16352:	2031      	movs	r0, #49	; 0x31
   16354:	f7fa fb5e 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16358:	f041 0102 	orr.w	r1, r1, #2
   1635c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
   16360:	f7fe fd40 	bl	14de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   16364:	68a0      	ldr	r0, [r4, #8]
   16366:	2500      	movs	r5, #0
   16368:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   1636c:	2906      	cmp	r1, #6
   1636e:	d105      	bne.n	1637c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17e4>
   16370:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
   16374:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
   16378:	f7fc fcd8 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1637c:	68a0      	ldr	r0, [r4, #8]
   1637e:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
   16382:	b149      	cbz	r1, 16398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
   16384:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
   16388:	f7fc fcd0 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1638c:	68a0      	ldr	r0, [r4, #8]
   1638e:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   16392:	b909      	cbnz	r1, 16398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
   16394:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
   16398:	2000      	movs	r0, #0
   1639a:	bd70      	pop	{r4, r5, r6, pc}
   1639c:	20000134 	.word	0x20000134
   163a0:	b510      	push	{r4, lr}
   163a2:	4c1f      	ldr	r4, [pc, #124]	; (16420 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1888>)
   163a4:	68a3      	ldr	r3, [r4, #8]
   163a6:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
   163aa:	2808      	cmp	r0, #8
   163ac:	d20e      	bcs.n	163cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
   163ae:	f100 0208 	add.w	r2, r0, #8
   163b2:	f1c0 0008 	rsb	r0, r0, #8
   163b6:	b2c1      	uxtb	r1, r0
   163b8:	1898      	adds	r0, r3, r2
   163ba:	f500 7088 	add.w	r0, r0, #272	; 0x110
   163be:	f7fa fbb5 	bl	10b2c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   163c2:	68a1      	ldr	r1, [r4, #8]
   163c4:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
   163c8:	4410      	add	r0, r2
   163ca:	7008      	strb	r0, [r1, #0]
   163cc:	68a3      	ldr	r3, [r4, #8]
   163ce:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
   163d2:	3808      	subs	r0, #8
   163d4:	2804      	cmp	r0, #4
   163d6:	d20c      	bcs.n	163f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x185a>
   163d8:	1d02      	adds	r2, r0, #4
   163da:	f1c0 0004 	rsb	r0, r0, #4
   163de:	b2c1      	uxtb	r1, r0
   163e0:	1898      	adds	r0, r3, r2
   163e2:	30e0      	adds	r0, #224	; 0xe0
   163e4:	f7fa fba2 	bl	10b2c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   163e8:	68a1      	ldr	r1, [r4, #8]
   163ea:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
   163ee:	4410      	add	r0, r2
   163f0:	7008      	strb	r0, [r1, #0]
   163f2:	68a0      	ldr	r0, [r4, #8]
   163f4:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
   163f8:	290c      	cmp	r1, #12
   163fa:	d30f      	bcc.n	1641c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1884>
   163fc:	d005      	beq.n	1640a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1872>
   163fe:	f240 71bf 	movw	r1, #1983	; 0x7bf
   16402:	f04f 0031 	mov.w	r0, #49	; 0x31
   16406:	f7fa fb05 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1640a:	2100      	movs	r1, #0
   1640c:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
   16410:	2101      	movs	r1, #1
   16412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16416:	2004      	movs	r0, #4
   16418:	f7ff ba54 	b.w	158c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   1641c:	bd10      	pop	{r4, pc}
   1641e:	0000      	.short	0x0000
   16420:	20000134 	.word	0x20000134
   16424:	4804      	ldr	r0, [pc, #16]	; (16438 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a0>)
   16426:	2127      	movs	r1, #39	; 0x27
   16428:	6880      	ldr	r0, [r0, #8]
   1642a:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
   1642e:	2100      	movs	r1, #0
   16430:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
   16434:	4770      	bx	lr
   16436:	0000      	.short	0x0000
   16438:	20000134 	.word	0x20000134
   1643c:	4809      	ldr	r0, [pc, #36]	; (16464 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18cc>)
   1643e:	b510      	push	{r4, lr}
   16440:	6880      	ldr	r0, [r0, #8]
   16442:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   16446:	2914      	cmp	r1, #20
   16448:	d004      	beq.n	16454 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
   1644a:	f240 619a 	movw	r1, #1690	; 0x69a
   1644e:	2031      	movs	r0, #49	; 0x31
   16450:	f7fa fae0 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16454:	2101      	movs	r1, #1
   16456:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
   1645a:	2115      	movs	r1, #21
   1645c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   16460:	bd10      	pop	{r4, pc}
   16462:	0000      	.short	0x0000
   16464:	20000134 	.word	0x20000134
   16468:	b510      	push	{r4, lr}
   1646a:	4c0a      	ldr	r4, [pc, #40]	; (16494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fc>)
   1646c:	68a0      	ldr	r0, [r4, #8]
   1646e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
   16472:	07c0      	lsls	r0, r0, #31
   16474:	d008      	beq.n	16488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
   16476:	f7fe fcc1 	bl	14dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   1647a:	68a0      	ldr	r0, [r4, #8]
   1647c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   16480:	f021 0101 	bic.w	r1, r1, #1
   16484:	7001      	strb	r1, [r0, #0]
   16486:	bd10      	pop	{r4, pc}
   16488:	f240 6183 	movw	r1, #1667	; 0x683
   1648c:	2031      	movs	r0, #49	; 0x31
   1648e:	f7fa fac1 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16492:	0000      	.short	0x0000
   16494:	20000134 	.word	0x20000134
   16498:	b510      	push	{r4, lr}
   1649a:	4c0a      	ldr	r4, [pc, #40]	; (164c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192c>)
   1649c:	2301      	movs	r3, #1
   1649e:	2100      	movs	r1, #0
   164a0:	68a0      	ldr	r0, [r4, #8]
   164a2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   164a6:	3070      	adds	r0, #112	; 0x70
   164a8:	f003 fda2 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   164ac:	b120      	cbz	r0, 164b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
   164ae:	68a1      	ldr	r1, [r4, #8]
   164b0:	201c      	movs	r0, #28
   164b2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   164b6:	bd10      	pop	{r4, pc}
   164b8:	f44f 61e1 	mov.w	r1, #1800	; 0x708
   164bc:	2031      	movs	r0, #49	; 0x31
   164be:	f7fa faa9 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   164c2:	0000      	.short	0x0000
   164c4:	20000134 	.word	0x20000134
   164c8:	480a      	ldr	r0, [pc, #40]	; (164f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195c>)
   164ca:	b510      	push	{r4, lr}
   164cc:	6880      	ldr	r0, [r0, #8]
   164ce:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   164d2:	f3c1 1201 	ubfx	r2, r1, #4, #2
   164d6:	2a01      	cmp	r2, #1
   164d8:	d004      	beq.n	164e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
   164da:	f240 710f 	movw	r1, #1807	; 0x70f
   164de:	2031      	movs	r0, #49	; 0x31
   164e0:	f7fa fa98 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   164e4:	f021 0110 	bic.w	r1, r1, #16
   164e8:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
   164ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   164f0:	f7fe bc84 	b.w	14dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   164f4:	20000134 	.word	0x20000134
   164f8:	b510      	push	{r4, lr}
   164fa:	4c0a      	ldr	r4, [pc, #40]	; (16524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>)
   164fc:	2301      	movs	r3, #1
   164fe:	2100      	movs	r1, #0
   16500:	68a0      	ldr	r0, [r4, #8]
   16502:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   16506:	3070      	adds	r0, #112	; 0x70
   16508:	f003 fd72 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1650c:	b120      	cbz	r0, 16518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1980>
   1650e:	68a1      	ldr	r1, [r4, #8]
   16510:	200e      	movs	r0, #14
   16512:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   16516:	bd10      	pop	{r4, pc}
   16518:	f240 61fb 	movw	r1, #1787	; 0x6fb
   1651c:	2031      	movs	r0, #49	; 0x31
   1651e:	f7fa fa79 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16522:	0000      	.short	0x0000
   16524:	20000134 	.word	0x20000134
   16528:	4804      	ldr	r0, [pc, #16]	; (1653c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a4>)
   1652a:	6880      	ldr	r0, [r0, #8]
   1652c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   16530:	f021 0104 	bic.w	r1, r1, #4
   16534:	7001      	strb	r1, [r0, #0]
   16536:	f7fe bc61 	b.w	14dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   1653a:	0000      	.short	0x0000
   1653c:	20000134 	.word	0x20000134
   16540:	4809      	ldr	r0, [pc, #36]	; (16568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d0>)
   16542:	b510      	push	{r4, lr}
   16544:	6880      	ldr	r0, [r0, #8]
   16546:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   1654a:	2910      	cmp	r1, #16
   1654c:	d004      	beq.n	16558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>
   1654e:	f240 6192 	movw	r1, #1682	; 0x692
   16552:	2031      	movs	r0, #49	; 0x31
   16554:	f7fa fa5e 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16558:	2101      	movs	r1, #1
   1655a:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
   1655e:	2111      	movs	r1, #17
   16560:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   16564:	bd10      	pop	{r4, pc}
   16566:	0000      	.short	0x0000
   16568:	20000134 	.word	0x20000134
   1656c:	b510      	push	{r4, lr}
   1656e:	4c0a      	ldr	r4, [pc, #40]	; (16598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>)
   16570:	2301      	movs	r3, #1
   16572:	2100      	movs	r1, #0
   16574:	68a0      	ldr	r0, [r4, #8]
   16576:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   1657a:	3070      	adds	r0, #112	; 0x70
   1657c:	f003 fd38 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16580:	b120      	cbz	r0, 1658c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
   16582:	68a1      	ldr	r1, [r4, #8]
   16584:	201f      	movs	r0, #31
   16586:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   1658a:	bd10      	pop	{r4, pc}
   1658c:	f240 711b 	movw	r1, #1819	; 0x71b
   16590:	2031      	movs	r0, #49	; 0x31
   16592:	f7fa fa3f 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16596:	0000      	.short	0x0000
   16598:	20000134 	.word	0x20000134
   1659c:	4808      	ldr	r0, [pc, #32]	; (165c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a28>)
   1659e:	b510      	push	{r4, lr}
   165a0:	6880      	ldr	r0, [r0, #8]
   165a2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   165a6:	2921      	cmp	r1, #33	; 0x21
   165a8:	d005      	beq.n	165b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
   165aa:	b121      	cbz	r1, 165b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
   165ac:	f240 7122 	movw	r1, #1826	; 0x722
   165b0:	2031      	movs	r0, #49	; 0x31
   165b2:	f7fa fa2f 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   165b6:	2122      	movs	r1, #34	; 0x22
   165b8:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   165bc:	bd10      	pop	{r4, pc}
   165be:	0000      	.short	0x0000
   165c0:	20000134 	.word	0x20000134
   165c4:	4807      	ldr	r0, [pc, #28]	; (165e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4c>)
   165c6:	b510      	push	{r4, lr}
   165c8:	6880      	ldr	r0, [r0, #8]
   165ca:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   165ce:	2915      	cmp	r1, #21
   165d0:	d004      	beq.n	165dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a44>
   165d2:	f240 61a7 	movw	r1, #1703	; 0x6a7
   165d6:	2031      	movs	r0, #49	; 0x31
   165d8:	f7fa fa1c 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   165dc:	2119      	movs	r1, #25
   165de:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   165e2:	bd10      	pop	{r4, pc}
   165e4:	20000134 	.word	0x20000134
   165e8:	4807      	ldr	r0, [pc, #28]	; (16608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a70>)
   165ea:	b510      	push	{r4, lr}
   165ec:	6880      	ldr	r0, [r0, #8]
   165ee:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   165f2:	2915      	cmp	r1, #21
   165f4:	d004      	beq.n	16600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a68>
   165f6:	f240 61a1 	movw	r1, #1697	; 0x6a1
   165fa:	2031      	movs	r0, #49	; 0x31
   165fc:	f7fa fa0a 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16600:	2117      	movs	r1, #23
   16602:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   16606:	bd10      	pop	{r4, pc}
   16608:	20000134 	.word	0x20000134
   1660c:	b570      	push	{r4, r5, r6, lr}
   1660e:	4d1b      	ldr	r5, [pc, #108]	; (1667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>)
   16610:	68a8      	ldr	r0, [r5, #8]
   16612:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   16616:	291b      	cmp	r1, #27
   16618:	d002      	beq.n	16620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
   1661a:	f240 61c1 	movw	r1, #1729	; 0x6c1
   1661e:	e007      	b.n	16630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
   16620:	2400      	movs	r4, #0
   16622:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
   16626:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
   1662a:	b121      	cbz	r1, 16636 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9e>
   1662c:	f240 61c5 	movw	r1, #1733	; 0x6c5
   16630:	2031      	movs	r0, #49	; 0x31
   16632:	f7fa f9ef 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16636:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
   1663a:	b141      	cbz	r1, 1664e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab6>
   1663c:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
   16640:	8801      	ldrh	r1, [r0, #0]
   16642:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
   16646:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
   1664a:	210c      	movs	r1, #12
   1664c:	e008      	b.n	16660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac8>
   1664e:	8801      	ldrh	r1, [r0, #0]
   16650:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
   16654:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
   16658:	2101      	movs	r1, #1
   1665a:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
   1665e:	210b      	movs	r1, #11
   16660:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
   16664:	8800      	ldrh	r0, [r0, #0]
   16666:	f7fa fdef 	bl	11248 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1666a:	f003 f936 	bl	198da <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
   1666e:	f7fc fb5d 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   16672:	68a8      	ldr	r0, [r5, #8]
   16674:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
   16678:	bd70      	pop	{r4, r5, r6, pc}
   1667a:	0000      	.short	0x0000
   1667c:	20000134 	.word	0x20000134
   16680:	b510      	push	{r4, lr}
   16682:	4c08      	ldr	r4, [pc, #32]	; (166a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0c>)
   16684:	2301      	movs	r3, #1
   16686:	4619      	mov	r1, r3
   16688:	68a0      	ldr	r0, [r4, #8]
   1668a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   1668e:	3070      	adds	r0, #112	; 0x70
   16690:	f003 fcae 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16694:	2800      	cmp	r0, #0
   16696:	d103      	bne.n	166a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b08>
   16698:	68a1      	ldr	r1, [r4, #8]
   1669a:	2008      	movs	r0, #8
   1669c:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
   166a0:	bd10      	pop	{r4, pc}
   166a2:	0000      	.short	0x0000
   166a4:	20000134 	.word	0x20000134
   166a8:	4814      	ldr	r0, [pc, #80]	; (166fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>)
   166aa:	b510      	push	{r4, lr}
   166ac:	68c1      	ldr	r1, [r0, #12]
   166ae:	6880      	ldr	r0, [r0, #8]
   166b0:	7909      	ldrb	r1, [r1, #4]
   166b2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   166b6:	2a0a      	cmp	r2, #10
   166b8:	d109      	bne.n	166ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
   166ba:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
   166be:	428a      	cmp	r2, r1
   166c0:	d105      	bne.n	166ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
   166c2:	2100      	movs	r1, #0
   166c4:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
   166c8:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
   166cc:	bd10      	pop	{r4, pc}
   166ce:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
   166d2:	0713      	lsls	r3, r2, #28
   166d4:	d507      	bpl.n	166e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4e>
   166d6:	f022 0108 	bic.w	r1, r2, #8
   166da:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
   166de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   166e2:	f7fe bb8b 	b.w	14dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   166e6:	29ff      	cmp	r1, #255	; 0xff
   166e8:	d004      	beq.n	166f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b5c>
   166ea:	f240 617d 	movw	r1, #1661	; 0x67d
   166ee:	2031      	movs	r0, #49	; 0x31
   166f0:	f7fa f990 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   166f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   166f8:	f7ff be94 	b.w	16424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
   166fc:	20000134 	.word	0x20000134
   16700:	b510      	push	{r4, lr}
   16702:	4c15      	ldr	r4, [pc, #84]	; (16758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc0>)
   16704:	68a0      	ldr	r0, [r4, #8]
   16706:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   1670a:	0789      	lsls	r1, r1, #30
   1670c:	d411      	bmi.n	16732 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9a>
   1670e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   16712:	2301      	movs	r3, #1
   16714:	2100      	movs	r1, #0
   16716:	3070      	adds	r0, #112	; 0x70
   16718:	f003 fc6a 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1671c:	b120      	cbz	r0, 16728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b90>
   1671e:	68a1      	ldr	r1, [r4, #8]
   16720:	2006      	movs	r0, #6
   16722:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   16726:	e009      	b.n	1673c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
   16728:	f240 61e7 	movw	r1, #1767	; 0x6e7
   1672c:	2031      	movs	r0, #49	; 0x31
   1672e:	f7fa f971 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16732:	2100      	movs	r1, #0
   16734:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
   16738:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
   1673c:	68a0      	ldr	r0, [r4, #8]
   1673e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
   16742:	0780      	lsls	r0, r0, #30
   16744:	d507      	bpl.n	16756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
   16746:	f7fe fb59 	bl	14dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   1674a:	68a0      	ldr	r0, [r4, #8]
   1674c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   16750:	f021 0102 	bic.w	r1, r1, #2
   16754:	7001      	strb	r1, [r0, #0]
   16756:	bd10      	pop	{r4, pc}
   16758:	20000134 	.word	0x20000134
   1675c:	4808      	ldr	r0, [pc, #32]	; (16780 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
   1675e:	b510      	push	{r4, lr}
   16760:	6880      	ldr	r0, [r0, #8]
   16762:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
   16766:	b941      	cbnz	r1, 1677a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be2>
   16768:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   1676c:	2301      	movs	r3, #1
   1676e:	2106      	movs	r1, #6
   16770:	3070      	adds	r0, #112	; 0x70
   16772:	f003 fc3d 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16776:	2800      	cmp	r0, #0
   16778:	d000      	beq.n	1677c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be4>
   1677a:	2001      	movs	r0, #1
   1677c:	bd10      	pop	{r4, pc}
   1677e:	0000      	.short	0x0000
   16780:	20000134 	.word	0x20000134
   16784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16786:	4c59      	ldr	r4, [pc, #356]	; (168ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d54>)
   16788:	4606      	mov	r6, r0
   1678a:	4615      	mov	r5, r2
   1678c:	68a0      	ldr	r0, [r4, #8]
   1678e:	b109      	cbz	r1, 16794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
   16790:	2100      	movs	r1, #0
   16792:	e004      	b.n	1679e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c06>
   16794:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
   16798:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
   1679c:	4411      	add	r1, r2
   1679e:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
   167a2:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
   167a6:	f88d 1000 	strb.w	r1, [sp]
   167aa:	9900      	ldr	r1, [sp, #0]
   167ac:	9100      	str	r1, [sp, #0]
   167ae:	f89d 1000 	ldrb.w	r1, [sp]
   167b2:	b939      	cbnz	r1, 167c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
   167b4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   167b8:	2301      	movs	r3, #1
   167ba:	4619      	mov	r1, r3
   167bc:	3070      	adds	r0, #112	; 0x70
   167be:	f003 fc17 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   167c2:	b130      	cbz	r0, 167d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3a>
   167c4:	68a0      	ldr	r0, [r4, #8]
   167c6:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
   167ca:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   167ce:	4411      	add	r1, r2
   167d0:	8001      	strh	r1, [r0, #0]
   167d2:	68a0      	ldr	r0, [r4, #8]
   167d4:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
   167d8:	b132      	cbz	r2, 167e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c50>
   167da:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   167de:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
   167e2:	4419      	add	r1, r3
   167e4:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
   167e8:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
   167ec:	2b00      	cmp	r3, #0
   167ee:	dd06      	ble.n	167fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c66>
   167f0:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
   167f4:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
   167f8:	4439      	add	r1, r7
   167fa:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
   167fe:	2101      	movs	r1, #1
   16800:	273d      	movs	r7, #61	; 0x3d
   16802:	b116      	cbz	r6, 1680a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
   16804:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
   16808:	e012      	b.n	16830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
   1680a:	7824      	ldrb	r4, [r4, #0]
   1680c:	2c02      	cmp	r4, #2
   1680e:	d009      	beq.n	16824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c8c>
   16810:	2c01      	cmp	r4, #1
   16812:	d011      	beq.n	16838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca0>
   16814:	b33d      	cbz	r5, 16866 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cce>
   16816:	f100 0294 	add.w	r2, r0, #148	; 0x94
   1681a:	7011      	strb	r1, [r2, #0]
   1681c:	06e9      	lsls	r1, r5, #27
   1681e:	d50e      	bpl.n	1683e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca6>
   16820:	211e      	movs	r1, #30
   16822:	e018      	b.n	16856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
   16824:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
   16828:	2a06      	cmp	r2, #6
   1682a:	d044      	beq.n	168b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
   1682c:	2216      	movs	r2, #22
   1682e:	e042      	b.n	168b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
   16830:	f100 0294 	add.w	r2, r0, #148	; 0x94
   16834:	7011      	strb	r1, [r2, #0]
   16836:	e047      	b.n	168c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
   16838:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
   1683c:	e03b      	b.n	168b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
   1683e:	0729      	lsls	r1, r5, #28
   16840:	d502      	bpl.n	16848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb0>
   16842:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
   16846:	e03f      	b.n	168c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
   16848:	06a9      	lsls	r1, r5, #26
   1684a:	d501      	bpl.n	16850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb8>
   1684c:	2123      	movs	r1, #35	; 0x23
   1684e:	e002      	b.n	16856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
   16850:	07a9      	lsls	r1, r5, #30
   16852:	d003      	beq.n	1685c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>
   16854:	212a      	movs	r1, #42	; 0x2a
   16856:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
   1685a:	e035      	b.n	168c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
   1685c:	f640 41c1 	movw	r1, #3265	; 0xcc1
   16860:	2031      	movs	r0, #49	; 0x31
   16862:	f7fa f8d7 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16866:	b12a      	cbz	r2, 16874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cdc>
   16868:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
   1686c:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
   16870:	42a2      	cmp	r2, r4
   16872:	d216      	bcs.n	168a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
   16874:	2b00      	cmp	r3, #0
   16876:	dd05      	ble.n	16884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>
   16878:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
   1687c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   16880:	429a      	cmp	r2, r3
   16882:	d20e      	bcs.n	168a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
   16884:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
   16888:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
   1688c:	4293      	cmp	r3, r2
   1688e:	d30a      	bcc.n	168a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
   16890:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
   16894:	f88d 3000 	strb.w	r3, [sp]
   16898:	9b00      	ldr	r3, [sp, #0]
   1689a:	9300      	str	r3, [sp, #0]
   1689c:	f89d 3000 	ldrb.w	r3, [sp]
   168a0:	b10b      	cbz	r3, 168a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
   168a2:	2222      	movs	r2, #34	; 0x22
   168a4:	e007      	b.n	168b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
   168a6:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
   168aa:	b13b      	cbz	r3, 168bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d24>
   168ac:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   168b0:	4293      	cmp	r3, r2
   168b2:	d309      	bcc.n	168c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
   168b4:	2208      	movs	r2, #8
   168b6:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
   168ba:	e7b9      	b.n	16830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
   168bc:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
   168c0:	2a06      	cmp	r2, #6
   168c2:	d301      	bcc.n	168c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
   168c4:	223e      	movs	r2, #62	; 0x3e
   168c6:	e7f6      	b.n	168b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
   168c8:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
   168cc:	f88d 1000 	strb.w	r1, [sp]
   168d0:	9900      	ldr	r1, [sp, #0]
   168d2:	9100      	str	r1, [sp, #0]
   168d4:	f89d 1000 	ldrb.w	r1, [sp]
   168d8:	b119      	cbz	r1, 168e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4a>
   168da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   168de:	f004 bf20 	b.w	1b722 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   168e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   168e6:	2100      	movs	r1, #0
   168e8:	f7fd bbfe 	b.w	140e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   168ec:	20000134 	.word	0x20000134
   168f0:	b570      	push	{r4, r5, r6, lr}
   168f2:	4d2d      	ldr	r5, [pc, #180]	; (169a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e10>)
   168f4:	68a8      	ldr	r0, [r5, #8]
   168f6:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
   168fa:	b151      	cbz	r1, 16912 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
   168fc:	2901      	cmp	r1, #1
   168fe:	d008      	beq.n	16912 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
   16900:	2902      	cmp	r1, #2
   16902:	d009      	beq.n	16918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
   16904:	2903      	cmp	r1, #3
   16906:	d007      	beq.n	16918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
   16908:	f640 217f 	movw	r1, #2687	; 0xa7f
   1690c:	2031      	movs	r0, #49	; 0x31
   1690e:	f7fa f881 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16912:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
   16916:	e035      	b.n	16984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dec>
   16918:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
   1691c:	2908      	cmp	r1, #8
   1691e:	d034      	beq.n	1698a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
   16920:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
   16924:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
   16928:	2400      	movs	r4, #0
   1692a:	1c8b      	adds	r3, r1, #2
   1692c:	429a      	cmp	r2, r3
   1692e:	d306      	bcc.n	1693e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
   16930:	1a51      	subs	r1, r2, r1
   16932:	1e89      	subs	r1, r1, #2
   16934:	040c      	lsls	r4, r1, #16
   16936:	0c24      	lsrs	r4, r4, #16
   16938:	d001      	beq.n	1693e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
   1693a:	1e64      	subs	r4, r4, #1
   1693c:	b2a4      	uxth	r4, r4
   1693e:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
   16942:	b139      	cbz	r1, 16954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbc>
   16944:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   16948:	2301      	movs	r3, #1
   1694a:	2109      	movs	r1, #9
   1694c:	3070      	adds	r0, #112	; 0x70
   1694e:	f003 fb4f 	bl	19ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16952:	b330      	cbz	r0, 169a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0a>
   16954:	f7ff ff02 	bl	1675c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
   16958:	b168      	cbz	r0, 16976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
   1695a:	68a9      	ldr	r1, [r5, #8]
   1695c:	2000      	movs	r0, #0
   1695e:	3198      	adds	r1, #152	; 0x98
   16960:	c906      	ldmia	r1, {r1, r2}
   16962:	1c8b      	adds	r3, r1, #2
   16964:	429a      	cmp	r2, r3
   16966:	d303      	bcc.n	16970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
   16968:	1a50      	subs	r0, r2, r1
   1696a:	1e80      	subs	r0, r0, #2
   1696c:	d000      	beq.n	16970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
   1696e:	1e40      	subs	r0, r0, #1
   16970:	42a0      	cmp	r0, r4
   16972:	d200      	bcs.n	16976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
   16974:	b284      	uxth	r4, r0
   16976:	b10c      	cbz	r4, 1697c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
   16978:	1e64      	subs	r4, r4, #1
   1697a:	b2a4      	uxth	r4, r4
   1697c:	68a8      	ldr	r0, [r5, #8]
   1697e:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
   16982:	4421      	add	r1, r4
   16984:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
   16988:	bd70      	pop	{r4, r5, r6, pc}
   1698a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
   1698e:	2903      	cmp	r1, #3
   16990:	d3bf      	bcc.n	16912 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
   16992:	f830 1f74 	ldrh.w	r1, [r0, #116]!
   16996:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   16998:	4411      	add	r1, r2
   1699a:	1c49      	adds	r1, r1, #1
   1699c:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
   169a0:	bd70      	pop	{r4, r5, r6, pc}
   169a2:	2400      	movs	r4, #0
   169a4:	e7ea      	b.n	1697c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
   169a6:	0000      	.short	0x0000
   169a8:	20000134 	.word	0x20000134

000169ac <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
   169ac:	4903      	ldr	r1, [pc, #12]	; (169bc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
   169ae:	884a      	ldrh	r2, [r1, #2]
   169b0:	8002      	strh	r2, [r0, #0]
   169b2:	7809      	ldrb	r1, [r1, #0]
   169b4:	7081      	strb	r1, [r0, #2]
   169b6:	2000      	movs	r0, #0
   169b8:	4770      	bx	lr
   169ba:	0000      	.short	0x0000
   169bc:	20001398 	.word	0x20001398

000169c0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   169c0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   169c2:	460c      	mov	r4, r1
   169c4:	4605      	mov	r5, r0
   169c6:	8800      	ldrh	r0, [r0, #0]
   169c8:	4669      	mov	r1, sp
   169ca:	f003 fae7 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   169ce:	0001      	movs	r1, r0
   169d0:	f04f 0000 	mov.w	r0, #0
   169d4:	d005      	beq.n	169e2 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
   169d6:	f8c4 0002 	str.w	r0, [r4, #2]
   169da:	71a0      	strb	r0, [r4, #6]
   169dc:	8020      	strh	r0, [r4, #0]
   169de:	2002      	movs	r0, #2
   169e0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   169e2:	9901      	ldr	r1, [sp, #4]
   169e4:	f111 0170 	adds.w	r1, r1, #112	; 0x70
   169e8:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
   169ec:	f8d1 2016 	ldr.w	r2, [r1, #22]
   169f0:	f8c4 2002 	str.w	r2, [r4, #2]
   169f4:	7e8a      	ldrb	r2, [r1, #26]
   169f6:	71a2      	strb	r2, [r4, #6]
   169f8:	882a      	ldrh	r2, [r5, #0]
   169fa:	8022      	strh	r2, [r4, #0]
   169fc:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
   16a00:	f88d 2008 	strb.w	r2, [sp, #8]
   16a04:	9a02      	ldr	r2, [sp, #8]
   16a06:	9202      	str	r2, [sp, #8]
   16a08:	f89d 2008 	ldrb.w	r2, [sp, #8]
   16a0c:	2a00      	cmp	r2, #0
   16a0e:	d1eb      	bne.n	169e8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
   16a10:	2000      	movs	r0, #0
   16a12:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00016a14 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   16a14:	b51c      	push	{r2, r3, r4, lr}
   16a16:	8800      	ldrh	r0, [r0, #0]
   16a18:	4669      	mov	r1, sp
   16a1a:	f003 fabf 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   16a1e:	2800      	cmp	r0, #0
   16a20:	d10b      	bne.n	16a3a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
   16a22:	480b      	ldr	r0, [pc, #44]	; (16a50 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
   16a24:	7800      	ldrb	r0, [r0, #0]
   16a26:	b188      	cbz	r0, 16a4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
   16a28:	9801      	ldr	r0, [sp, #4]
   16a2a:	f005 fd98 	bl	1c55e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   16a2e:	b128      	cbz	r0, 16a3c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
   16a30:	9801      	ldr	r0, [sp, #4]
   16a32:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
   16a36:	b118      	cbz	r0, 16a40 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
   16a38:	203a      	movs	r0, #58	; 0x3a
   16a3a:	bd1c      	pop	{r2, r3, r4, pc}
   16a3c:	2002      	movs	r0, #2
   16a3e:	bd1c      	pop	{r2, r3, r4, pc}
   16a40:	9901      	ldr	r1, [sp, #4]
   16a42:	2001      	movs	r0, #1
   16a44:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
   16a48:	2000      	movs	r0, #0
   16a4a:	bd1c      	pop	{r2, r3, r4, pc}
   16a4c:	2011      	movs	r0, #17
   16a4e:	bd1c      	pop	{r2, r3, r4, pc}
   16a50:	20000210 	.word	0x20000210

00016a54 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
   16a54:	b510      	push	{r4, lr}
   16a56:	4604      	mov	r4, r0
   16a58:	f005 fd78 	bl	1c54c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   16a5c:	b130      	cbz	r0, 16a6c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
   16a5e:	4804      	ldr	r0, [pc, #16]	; (16a70 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
   16a60:	8881      	ldrh	r1, [r0, #4]
   16a62:	8021      	strh	r1, [r4, #0]
   16a64:	88c0      	ldrh	r0, [r0, #6]
   16a66:	8060      	strh	r0, [r4, #2]
   16a68:	2000      	movs	r0, #0
   16a6a:	bd10      	pop	{r4, pc}
   16a6c:	2001      	movs	r0, #1
   16a6e:	bd10      	pop	{r4, pc}
   16a70:	20000218 	.word	0x20000218

00016a74 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
   16a74:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   16a76:	4605      	mov	r5, r0
   16a78:	f000 fb04 	bl	17084 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   16a7c:	f3c0 2000 	ubfx	r0, r0, #8, #1
   16a80:	b310      	cbz	r0, 16ac8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
   16a82:	2400      	movs	r4, #0
   16a84:	a802      	add	r0, sp, #8
   16a86:	f88d 4004 	strb.w	r4, [sp, #4]
   16a8a:	f88d 4008 	strb.w	r4, [sp, #8]
   16a8e:	9000      	str	r0, [sp, #0]
   16a90:	78aa      	ldrb	r2, [r5, #2]
   16a92:	7869      	ldrb	r1, [r5, #1]
   16a94:	7828      	ldrb	r0, [r5, #0]
   16a96:	ab01      	add	r3, sp, #4
   16a98:	f005 fdb9 	bl	1c60e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
   16a9c:	2800      	cmp	r0, #0
   16a9e:	d112      	bne.n	16ac6 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
   16aa0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   16aa4:	f005 fcba 	bl	1c41c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   16aa8:	b180      	cbz	r0, 16acc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
   16aaa:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16aae:	f005 fcb5 	bl	1c41c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   16ab2:	b158      	cbz	r0, 16acc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
   16ab4:	4806      	ldr	r0, [pc, #24]	; (16ad0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
   16ab6:	f89d 1004 	ldrb.w	r1, [sp, #4]
   16aba:	7381      	strb	r1, [r0, #14]
   16abc:	f89d 1008 	ldrb.w	r1, [sp, #8]
   16ac0:	73c1      	strb	r1, [r0, #15]
   16ac2:	8204      	strh	r4, [r0, #16]
   16ac4:	2000      	movs	r0, #0
   16ac6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   16ac8:	2001      	movs	r0, #1
   16aca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   16acc:	2011      	movs	r0, #17
   16ace:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   16ad0:	20001398 	.word	0x20001398

00016ad4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
   16ad4:	7801      	ldrb	r1, [r0, #0]
   16ad6:	b171      	cbz	r1, 16af6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   16ad8:	7841      	ldrb	r1, [r0, #1]
   16ada:	b161      	cbz	r1, 16af6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   16adc:	8841      	ldrh	r1, [r0, #2]
   16ade:	291b      	cmp	r1, #27
   16ae0:	d309      	bcc.n	16af6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   16ae2:	8881      	ldrh	r1, [r0, #4]
   16ae4:	291b      	cmp	r1, #27
   16ae6:	d306      	bcc.n	16af6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   16ae8:	4904      	ldr	r1, [pc, #16]	; (16afc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
   16aea:	6802      	ldr	r2, [r0, #0]
   16aec:	600a      	str	r2, [r1, #0]
   16aee:	8880      	ldrh	r0, [r0, #4]
   16af0:	8088      	strh	r0, [r1, #4]
   16af2:	2000      	movs	r0, #0
   16af4:	4770      	bx	lr
   16af6:	2012      	movs	r0, #18
   16af8:	4770      	bx	lr
   16afa:	0000      	.short	0x0000
   16afc:	20001398 	.word	0x20001398

00016b00 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
   16b00:	6800      	ldr	r0, [r0, #0]
   16b02:	f240 41e2 	movw	r1, #1250	; 0x4e2
   16b06:	4288      	cmp	r0, r1
   16b08:	d303      	bcc.n	16b12 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
   16b0a:	4903      	ldr	r1, [pc, #12]	; (16b18 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
   16b0c:	6088      	str	r0, [r1, #8]
   16b0e:	2000      	movs	r0, #0
   16b10:	4770      	bx	lr
   16b12:	2012      	movs	r0, #18
   16b14:	4770      	bx	lr
   16b16:	0000      	.short	0x0000
   16b18:	20001398 	.word	0x20001398

00016b1c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
   16b1c:	4a03      	ldr	r2, [pc, #12]	; (16b2c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
   16b1e:	e9d2 1200 	ldrd	r1, r2, [r2]
   16b22:	6001      	str	r1, [r0, #0]
   16b24:	6042      	str	r2, [r0, #4]
   16b26:	2000      	movs	r0, #0
   16b28:	4770      	bx	lr
   16b2a:	0000      	.short	0x0000
   16b2c:	00016f60 	.word	0x00016f60

00016b30 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
   16b30:	b510      	push	{r4, lr}
   16b32:	2005      	movs	r0, #5
   16b34:	f000 fa9c 	bl	17070 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   16b38:	f7fd fe52 	bl	147e0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
   16b3c:	4902      	ldr	r1, [pc, #8]	; (16b48 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
   16b3e:	4801      	ldr	r0, [pc, #4]	; (16b44 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
   16b40:	6048      	str	r0, [r1, #4]
   16b42:	bd10      	pop	{r4, pc}
   16b44:	00016ba1 	.word	0x00016ba1
   16b48:	20000210 	.word	0x20000210

00016b4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   16b4c:	b510      	push	{r4, lr}
   16b4e:	f003 f979 	bl	19e44 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   16b52:	f7fb fc6f 	bl	12434 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   16b56:	f000 faa5 	bl	170a4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   16b5a:	f003 fe21 	bl	1a7a0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   16b5e:	480e      	ldr	r0, [pc, #56]	; (16b98 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
   16b60:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16b64:	4b0d      	ldr	r3, [pc, #52]	; (16b9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
   16b66:	8281      	strh	r1, [r0, #20]
   16b68:	2100      	movs	r1, #0
   16b6a:	7581      	strb	r1, [r0, #22]
   16b6c:	8301      	strh	r1, [r0, #24]
   16b6e:	221b      	movs	r2, #27
   16b70:	801a      	strh	r2, [r3, #0]
   16b72:	f44f 74a4 	mov.w	r4, #328	; 0x148
   16b76:	805c      	strh	r4, [r3, #2]
   16b78:	809a      	strh	r2, [r3, #4]
   16b7a:	80dc      	strh	r4, [r3, #6]
   16b7c:	7381      	strb	r1, [r0, #14]
   16b7e:	73c1      	strb	r1, [r0, #15]
   16b80:	2303      	movs	r3, #3
   16b82:	7003      	strb	r3, [r0, #0]
   16b84:	2302      	movs	r3, #2
   16b86:	7043      	strb	r3, [r0, #1]
   16b88:	8042      	strh	r2, [r0, #2]
   16b8a:	8082      	strh	r2, [r0, #4]
   16b8c:	f640 62a6 	movw	r2, #3750	; 0xea6
   16b90:	6082      	str	r2, [r0, #8]
   16b92:	7481      	strb	r1, [r0, #18]
   16b94:	7301      	strb	r1, [r0, #12]
   16b96:	bd10      	pop	{r4, pc}
   16b98:	20001398 	.word	0x20001398
   16b9c:	20000218 	.word	0x20000218
   16ba0:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ba4:	4692      	mov	sl, r2
   16ba6:	460f      	mov	r7, r1
   16ba8:	4681      	mov	r9, r0
   16baa:	f005 fccf 	bl	1c54c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   16bae:	2800      	cmp	r0, #0
   16bb0:	d063      	beq.n	16c7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
   16bb2:	4933      	ldr	r1, [pc, #204]	; (16c80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
   16bb4:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
   16bb8:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
   16bbc:	8808      	ldrh	r0, [r1, #0]
   16bbe:	4290      	cmp	r0, r2
   16bc0:	d300      	bcc.n	16bc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
   16bc2:	4610      	mov	r0, r2
   16bc4:	4680      	mov	r8, r0
   16bc6:	8888      	ldrh	r0, [r1, #4]
   16bc8:	42b0      	cmp	r0, r6
   16bca:	d200      	bcs.n	16bce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
   16bcc:	4606      	mov	r6, r0
   16bce:	884c      	ldrh	r4, [r1, #2]
   16bd0:	f640 0048 	movw	r0, #2120	; 0x848
   16bd4:	4284      	cmp	r4, r0
   16bd6:	d300      	bcc.n	16bda <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
   16bd8:	4604      	mov	r4, r0
   16bda:	88cd      	ldrh	r5, [r1, #6]
   16bdc:	4285      	cmp	r5, r0
   16bde:	d300      	bcc.n	16be2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
   16be0:	4605      	mov	r5, r0
   16be2:	4284      	cmp	r4, r0
   16be4:	d300      	bcc.n	16be8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
   16be6:	4604      	mov	r4, r0
   16be8:	f44f 71a4 	mov.w	r1, #328	; 0x148
   16bec:	2e1b      	cmp	r6, #27
   16bee:	d001      	beq.n	16bf4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
   16bf0:	428d      	cmp	r5, r1
   16bf2:	d104      	bne.n	16bfe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
   16bf4:	f1b8 0f1b 	cmp.w	r8, #27
   16bf8:	d03f      	beq.n	16c7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
   16bfa:	428c      	cmp	r4, r1
   16bfc:	d03d      	beq.n	16c7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
   16bfe:	466a      	mov	r2, sp
   16c00:	4651      	mov	r1, sl
   16c02:	4648      	mov	r0, r9
   16c04:	f005 fc2d 	bl	1c462 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   16c08:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   16c0c:	4641      	mov	r1, r8
   16c0e:	4540      	cmp	r0, r8
   16c10:	d900      	bls.n	16c14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
   16c12:	4608      	mov	r0, r1
   16c14:	80f8      	strh	r0, [r7, #6]
   16c16:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   16c1a:	42a1      	cmp	r1, r4
   16c1c:	d800      	bhi.n	16c20 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
   16c1e:	460c      	mov	r4, r1
   16c20:	813c      	strh	r4, [r7, #8]
   16c22:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   16c26:	42b1      	cmp	r1, r6
   16c28:	d800      	bhi.n	16c2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
   16c2a:	460e      	mov	r6, r1
   16c2c:	807e      	strh	r6, [r7, #2]
   16c2e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   16c32:	42a9      	cmp	r1, r5
   16c34:	d900      	bls.n	16c38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
   16c36:	4629      	mov	r1, r5
   16c38:	80b9      	strh	r1, [r7, #4]
   16c3a:	2201      	movs	r2, #1
   16c3c:	703a      	strb	r2, [r7, #0]
   16c3e:	381b      	subs	r0, #27
   16c40:	28e0      	cmp	r0, #224	; 0xe0
   16c42:	d902      	bls.n	16c4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
   16c44:	f44f 6148 	mov.w	r1, #3200	; 0xc80
   16c48:	e014      	b.n	16c74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
   16c4a:	3e1b      	subs	r6, #27
   16c4c:	2ee0      	cmp	r6, #224	; 0xe0
   16c4e:	d902      	bls.n	16c56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
   16c50:	f640 4182 	movw	r1, #3202	; 0xc82
   16c54:	e00e      	b.n	16c74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
   16c56:	f44f 60e0 	mov.w	r0, #1792	; 0x700
   16c5a:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
   16c5e:	4284      	cmp	r4, r0
   16c60:	d902      	bls.n	16c68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
   16c62:	f640 4184 	movw	r1, #3204	; 0xc84
   16c66:	e005      	b.n	16c74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
   16c68:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
   16c6c:	4281      	cmp	r1, r0
   16c6e:	d904      	bls.n	16c7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
   16c70:	f640 4186 	movw	r1, #3206	; 0xc86
   16c74:	2039      	movs	r0, #57	; 0x39
   16c76:	f7f9 fecd 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16c7a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c7e:	0000      	.short	0x0000
   16c80:	20000218 	.word	0x20000218

00016c84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
   16c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c88:	b088      	sub	sp, #32
   16c8a:	460c      	mov	r4, r1
   16c8c:	4606      	mov	r6, r0
   16c8e:	f003 ffaa 	bl	1abe6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   16c92:	b198      	cbz	r0, 16cbc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
   16c94:	4630      	mov	r0, r6
   16c96:	f003 ff99 	bl	1abcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   16c9a:	b130      	cbz	r0, 16caa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
   16c9c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   16ca0:	2012      	movs	r0, #18
   16ca2:	2900      	cmp	r1, #0
   16ca4:	d00b      	beq.n	16cbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16ca6:	2980      	cmp	r1, #128	; 0x80
   16ca8:	d809      	bhi.n	16cbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16caa:	4630      	mov	r0, r6
   16cac:	f003 ff7d 	bl	1abaa <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
   16cb0:	b140      	cbz	r0, 16cc4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   16cb2:	4630      	mov	r0, r6
   16cb4:	f003 fef5 	bl	1aaa2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
   16cb8:	b130      	cbz	r0, 16cc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
   16cba:	e009      	b.n	16cd0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
   16cbc:	2042      	movs	r0, #66	; 0x42
   16cbe:	b008      	add	sp, #32
   16cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16cc4:	200c      	movs	r0, #12
   16cc6:	e7fa      	b.n	16cbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16cc8:	4630      	mov	r0, r6
   16cca:	f003 ff79 	bl	1abc0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
   16cce:	b3a8      	cbz	r0, 16d3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
   16cd0:	4630      	mov	r0, r6
   16cd2:	f004 f950 	bl	1af76 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   16cd6:	2800      	cmp	r0, #0
   16cd8:	d1f4      	bne.n	16cc4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   16cda:	4630      	mov	r0, r6
   16cdc:	f003 fefc 	bl	1aad8 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
   16ce0:	2800      	cmp	r0, #0
   16ce2:	d1ef      	bne.n	16cc4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   16ce4:	4630      	mov	r0, r6
   16ce6:	f7fc f9d7 	bl	13098 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
   16cea:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   16cee:	f242 7110 	movw	r1, #10000	; 0x2710
   16cf2:	fb00 f801 	mul.w	r8, r0, r1
   16cf6:	78e1      	ldrb	r1, [r4, #3]
   16cf8:	4630      	mov	r0, r6
   16cfa:	f003 ff4d 	bl	1ab98 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
   16cfe:	4630      	mov	r0, r6
   16d00:	f003 ff60 	bl	1abc4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   16d04:	b1e8      	cbz	r0, 16d42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
   16d06:	2200      	movs	r2, #0
   16d08:	4611      	mov	r1, r2
   16d0a:	a801      	add	r0, sp, #4
   16d0c:	f7fa f8e0 	bl	10ed0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
   16d10:	0004      	movs	r4, r0
   16d12:	d06a      	beq.n	16dea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
   16d14:	2100      	movs	r1, #0
   16d16:	f7fb fdbb 	bl	12890 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   16d1a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   16d1e:	8020      	strh	r0, [r4, #0]
   16d20:	4621      	mov	r1, r4
   16d22:	4630      	mov	r0, r6
   16d24:	f003 ff72 	bl	1ac0c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
   16d28:	f005 fc10 	bl	1c54c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   16d2c:	4d3a      	ldr	r5, [pc, #232]	; (16e18 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
   16d2e:	2800      	cmp	r0, #0
   16d30:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   16d34:	d00f      	beq.n	16d56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
   16d36:	886a      	ldrh	r2, [r5, #2]
   16d38:	88a9      	ldrh	r1, [r5, #4]
   16d3a:	e00e      	b.n	16d5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
   16d3c:	e7ff      	b.n	16d3e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
   16d3e:	2012      	movs	r0, #18
   16d40:	e7bd      	b.n	16cbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16d42:	4642      	mov	r2, r8
   16d44:	2100      	movs	r1, #0
   16d46:	4630      	mov	r0, r6
   16d48:	f7fd f8f0 	bl	13f2c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
   16d4c:	2800      	cmp	r0, #0
   16d4e:	d0b6      	beq.n	16cbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16d50:	f241 414c 	movw	r1, #5196	; 0x144c
   16d54:	e053      	b.n	16dfe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
   16d56:	221b      	movs	r2, #27
   16d58:	4611      	mov	r1, r2
   16d5a:	84c2      	strh	r2, [r0, #38]	; 0x26
   16d5c:	8501      	strh	r1, [r0, #40]	; 0x28
   16d5e:	68a8      	ldr	r0, [r5, #8]
   16d60:	62e0      	str	r0, [r4, #44]	; 0x2c
   16d62:	f641 574c 	movw	r7, #7500	; 0x1d4c
   16d66:	4630      	mov	r0, r6
   16d68:	f003 ff34 	bl	1abd4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   16d6c:	b910      	cbnz	r0, 16d74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
   16d6e:	4630      	mov	r0, r6
   16d70:	f003 ff4a 	bl	1ac08 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
   16d74:	60e7      	str	r7, [r4, #12]
   16d76:	8821      	ldrh	r1, [r4, #0]
   16d78:	f8ad 1008 	strh.w	r1, [sp, #8]
   16d7c:	7ba9      	ldrb	r1, [r5, #14]
   16d7e:	f88d 100a 	strb.w	r1, [sp, #10]
   16d82:	7be9      	ldrb	r1, [r5, #15]
   16d84:	f88d 100b 	strb.w	r1, [sp, #11]
   16d88:	8a29      	ldrh	r1, [r5, #16]
   16d8a:	f8ad 100c 	strh.w	r1, [sp, #12]
   16d8e:	a905      	add	r1, sp, #20
   16d90:	9100      	str	r1, [sp, #0]
   16d92:	2001      	movs	r0, #1
   16d94:	ab04      	add	r3, sp, #16
   16d96:	aa02      	add	r2, sp, #8
   16d98:	4621      	mov	r1, r4
   16d9a:	f005 fb98 	bl	1c4ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
   16d9e:	b140      	cbz	r0, 16db2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
   16da0:	2100      	movs	r1, #0
   16da2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   16da6:	f7fa f8bd 	bl	10f24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   16daa:	b1f0      	cbz	r0, 16dea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
   16dac:	f241 4198 	movw	r1, #5272	; 0x1498
   16db0:	e025      	b.n	16dfe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
   16db2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   16db6:	f88d 0018 	strb.w	r0, [sp, #24]
   16dba:	f89d 0014 	ldrb.w	r0, [sp, #20]
   16dbe:	f88d 0019 	strb.w	r0, [sp, #25]
   16dc2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   16dc6:	f8ad 001a 	strh.w	r0, [sp, #26]
   16dca:	a906      	add	r1, sp, #24
   16dcc:	4620      	mov	r0, r4
   16dce:	f003 f9a4 	bl	1a11a <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   16dd2:	7868      	ldrb	r0, [r5, #1]
   16dd4:	9000      	str	r0, [sp, #0]
   16dd6:	782b      	ldrb	r3, [r5, #0]
   16dd8:	88aa      	ldrh	r2, [r5, #4]
   16dda:	8869      	ldrh	r1, [r5, #2]
   16ddc:	8820      	ldrh	r0, [r4, #0]
   16dde:	f7fa f96d 	bl	110bc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
   16de2:	b120      	cbz	r0, 16dee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
   16de4:	f241 41a3 	movw	r1, #5283	; 0x14a3
   16de8:	e009      	b.n	16dfe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
   16dea:	2009      	movs	r0, #9
   16dec:	e767      	b.n	16cbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16dee:	4642      	mov	r2, r8
   16df0:	4621      	mov	r1, r4
   16df2:	4630      	mov	r0, r6
   16df4:	f7fd f89a 	bl	13f2c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
   16df8:	b120      	cbz	r0, 16e04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
   16dfa:	f241 41a5 	movw	r1, #5285	; 0x14a5
   16dfe:	2039      	movs	r0, #57	; 0x39
   16e00:	f7f9 fe08 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16e04:	4805      	ldr	r0, [pc, #20]	; (16e1c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
   16e06:	6843      	ldr	r3, [r0, #4]
   16e08:	b123      	cbz	r3, 16e14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
   16e0a:	2200      	movs	r2, #0
   16e0c:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
   16e10:	4620      	mov	r0, r4
   16e12:	4798      	blx	r3
   16e14:	2000      	movs	r0, #0
   16e16:	e752      	b.n	16cbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16e18:	20001398 	.word	0x20001398
   16e1c:	20000210 	.word	0x20000210
   16e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e24:	b088      	sub	sp, #32
   16e26:	4604      	mov	r4, r0
   16e28:	8800      	ldrh	r0, [r0, #0]
   16e2a:	a906      	add	r1, sp, #24
   16e2c:	f003 f8b6 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   16e30:	2800      	cmp	r0, #0
   16e32:	d147      	bne.n	16ec4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16e34:	9807      	ldr	r0, [sp, #28]
   16e36:	2700      	movs	r7, #0
   16e38:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
   16e3c:	f88d 1008 	strb.w	r1, [sp, #8]
   16e40:	9902      	ldr	r1, [sp, #8]
   16e42:	9102      	str	r1, [sp, #8]
   16e44:	f89d 1008 	ldrb.w	r1, [sp, #8]
   16e48:	f88d 100c 	strb.w	r1, [sp, #12]
   16e4c:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   16e50:	3070      	adds	r0, #112	; 0x70
   16e52:	0689      	lsls	r1, r1, #26
   16e54:	d502      	bpl.n	16e5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
   16e56:	f89d 100c 	ldrb.w	r1, [sp, #12]
   16e5a:	b149      	cbz	r1, 16e70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
   16e5c:	f05f 0100 	movs.w	r1, #0
   16e60:	f88d 1004 	strb.w	r1, [sp, #4]
   16e64:	2105      	movs	r1, #5
   16e66:	304c      	adds	r0, #76	; 0x4c
   16e68:	f004 fc97 	bl	1b79a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   16e6c:	b110      	cbz	r0, 16e74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
   16e6e:	e004      	b.n	16e7a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
   16e70:	2101      	movs	r1, #1
   16e72:	e7f5      	b.n	16e60 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
   16e74:	f89d 0004 	ldrb.w	r0, [sp, #4]
   16e78:	b318      	cbz	r0, 16ec2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
   16e7a:	8921      	ldrh	r1, [r4, #8]
   16e7c:	88e0      	ldrh	r0, [r4, #6]
   16e7e:	f005 fae2 	bl	1c446 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   16e82:	2800      	cmp	r0, #0
   16e84:	d11e      	bne.n	16ec4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16e86:	88a1      	ldrh	r1, [r4, #4]
   16e88:	8860      	ldrh	r0, [r4, #2]
   16e8a:	f005 fadc 	bl	1c446 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   16e8e:	2800      	cmp	r0, #0
   16e90:	d118      	bne.n	16ec4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16e92:	8921      	ldrh	r1, [r4, #8]
   16e94:	88e0      	ldrh	r0, [r4, #6]
   16e96:	f005 facc 	bl	1c432 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   16e9a:	2800      	cmp	r0, #0
   16e9c:	d112      	bne.n	16ec4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16e9e:	88a1      	ldrh	r1, [r4, #4]
   16ea0:	8860      	ldrh	r0, [r4, #2]
   16ea2:	f005 fac6 	bl	1c432 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   16ea6:	0006      	movs	r6, r0
   16ea8:	d10c      	bne.n	16ec4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16eaa:	9807      	ldr	r0, [sp, #28]
   16eac:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
   16eb0:	f04f 0801 	mov.w	r8, #1
   16eb4:	f885 8001 	strb.w	r8, [r5, #1]
   16eb8:	f89d 100c 	ldrb.w	r1, [sp, #12]
   16ebc:	b129      	cbz	r1, 16eca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
   16ebe:	263a      	movs	r6, #58	; 0x3a
   16ec0:	e02f      	b.n	16f22 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
   16ec2:	201a      	movs	r0, #26
   16ec4:	b008      	add	sp, #32
   16ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16eca:	4639      	mov	r1, r7
   16ecc:	aa03      	add	r2, sp, #12
   16ece:	f005 fac8 	bl	1c462 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   16ed2:	8861      	ldrh	r1, [r4, #2]
   16ed4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   16ed8:	4281      	cmp	r1, r0
   16eda:	d200      	bcs.n	16ede <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
   16edc:	4608      	mov	r0, r1
   16ede:	80e8      	strh	r0, [r5, #6]
   16ee0:	88a1      	ldrh	r1, [r4, #4]
   16ee2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   16ee6:	4281      	cmp	r1, r0
   16ee8:	d200      	bcs.n	16eec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
   16eea:	4608      	mov	r0, r1
   16eec:	8128      	strh	r0, [r5, #8]
   16eee:	88e2      	ldrh	r2, [r4, #6]
   16ef0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   16ef4:	428a      	cmp	r2, r1
   16ef6:	d200      	bcs.n	16efa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
   16ef8:	4611      	mov	r1, r2
   16efa:	8069      	strh	r1, [r5, #2]
   16efc:	8922      	ldrh	r2, [r4, #8]
   16efe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   16f02:	428a      	cmp	r2, r1
   16f04:	d200      	bcs.n	16f08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
   16f06:	4611      	mov	r1, r2
   16f08:	f640 0248 	movw	r2, #2120	; 0x848
   16f0c:	80a9      	strh	r1, [r5, #4]
   16f0e:	4291      	cmp	r1, r2
   16f10:	d300      	bcc.n	16f14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
   16f12:	4611      	mov	r1, r2
   16f14:	80a9      	strh	r1, [r5, #4]
   16f16:	4290      	cmp	r0, r2
   16f18:	d200      	bcs.n	16f1c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
   16f1a:	4602      	mov	r2, r0
   16f1c:	812a      	strh	r2, [r5, #8]
   16f1e:	f885 8000 	strb.w	r8, [r5]
   16f22:	706f      	strb	r7, [r5, #1]
   16f24:	4630      	mov	r0, r6
   16f26:	e7cd      	b.n	16ec4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16f28:	b510      	push	{r4, lr}
   16f2a:	4604      	mov	r4, r0
   16f2c:	88c1      	ldrh	r1, [r0, #6]
   16f2e:	8880      	ldrh	r0, [r0, #4]
   16f30:	f005 fa89 	bl	1c446 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   16f34:	2800      	cmp	r0, #0
   16f36:	d10f      	bne.n	16f58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
   16f38:	8861      	ldrh	r1, [r4, #2]
   16f3a:	8820      	ldrh	r0, [r4, #0]
   16f3c:	f005 fa83 	bl	1c446 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   16f40:	2800      	cmp	r0, #0
   16f42:	d109      	bne.n	16f58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
   16f44:	4805      	ldr	r0, [pc, #20]	; (16f5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
   16f46:	88a1      	ldrh	r1, [r4, #4]
   16f48:	8081      	strh	r1, [r0, #4]
   16f4a:	8821      	ldrh	r1, [r4, #0]
   16f4c:	8001      	strh	r1, [r0, #0]
   16f4e:	88e1      	ldrh	r1, [r4, #6]
   16f50:	80c1      	strh	r1, [r0, #6]
   16f52:	8861      	ldrh	r1, [r4, #2]
   16f54:	8041      	strh	r1, [r0, #2]
   16f56:	2000      	movs	r0, #0
   16f58:	bd10      	pop	{r4, pc}
   16f5a:	0000      	.short	0x0000
   16f5c:	20000218 	.word	0x20000218
   16f60:	0b12fe0b 	.word	0x0b12fe0b
   16f64:	12fe0059 	.word	0x12fe0059
   16f68:	05060708 	.word	0x05060708
   16f6c:	00020304 	.word	0x00020304
   16f70:	f0f4f8fc 	.word	0xf0f4f8fc
   16f74:	0304d8ec 	.word	0x0304d8ec
   16f78:	f4f8fc00 	.word	0xf4f8fc00
   16f7c:	00d8ecf0 	.word	0x00d8ecf0

00016f80 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
   16f80:	b510      	push	{r4, lr}
   16f82:	f7fb fecd 	bl	12d20 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
   16f86:	4804      	ldr	r0, [pc, #16]	; (16f98 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
   16f88:	6840      	ldr	r0, [r0, #4]
   16f8a:	f005 fbb8 	bl	1c6fe <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   16f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16f92:	f005 b8f4 	b.w	1c17e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
   16f96:	0000      	.short	0x0000
   16f98:	20000220 	.word	0x20000220

00016f9c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
   16f9c:	b510      	push	{r4, lr}
   16f9e:	4c07      	ldr	r4, [pc, #28]	; (16fbc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
   16fa0:	68a0      	ldr	r0, [r4, #8]
   16fa2:	f005 fbac 	bl	1c6fe <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   16fa6:	68e0      	ldr	r0, [r4, #12]
   16fa8:	f005 fba9 	bl	1c6fe <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   16fac:	f002 ff4a 	bl	19e44 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   16fb0:	f7fb fa40 	bl	12434 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   16fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16fb8:	f7ff bdc8 	b.w	16b4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
   16fbc:	20000220 	.word	0x20000220

00016fc0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
   16fc0:	b500      	push	{lr}
   16fc2:	4905      	ldr	r1, [pc, #20]	; (16fd8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
   16fc4:	4805      	ldr	r0, [pc, #20]	; (16fdc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
   16fc6:	f005 fb7b 	bl	1c6c0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   16fca:	4804      	ldr	r0, [pc, #16]	; (16fdc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
   16fcc:	4904      	ldr	r1, [pc, #16]	; (16fe0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
   16fce:	1d00      	adds	r0, r0, #4
   16fd0:	f85d eb04 	ldr.w	lr, [sp], #4
   16fd4:	f005 bb74 	b.w	1c6c0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   16fd8:	20000230 	.word	0x20000230
   16fdc:	20000224 	.word	0x20000224
   16fe0:	20000238 	.word	0x20000238

00016fe4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
   16fe4:	b500      	push	{lr}
   16fe6:	4908      	ldr	r1, [pc, #32]	; (17008 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
   16fe8:	4808      	ldr	r0, [pc, #32]	; (1700c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   16fea:	f005 fb69 	bl	1c6c0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   16fee:	4807      	ldr	r0, [pc, #28]	; (1700c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   16ff0:	4907      	ldr	r1, [pc, #28]	; (17010 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
   16ff2:	1d00      	adds	r0, r0, #4
   16ff4:	f005 fb64 	bl	1c6c0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   16ff8:	4804      	ldr	r0, [pc, #16]	; (1700c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   16ffa:	4906      	ldr	r1, [pc, #24]	; (17014 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
   16ffc:	3008      	adds	r0, #8
   16ffe:	f85d eb04 	ldr.w	lr, [sp], #4
   17002:	f005 bb5d 	b.w	1c6c0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   17006:	0000      	.short	0x0000
   17008:	20000248 	.word	0x20000248
   1700c:	20000224 	.word	0x20000224
   17010:	20000250 	.word	0x20000250
   17014:	20000240 	.word	0x20000240

00017018 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
   17018:	4801      	ldr	r0, [pc, #4]	; (17020 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
   1701a:	7800      	ldrb	r0, [r0, #0]
   1701c:	4770      	bx	lr
   1701e:	0000      	.short	0x0000
   17020:	20000220 	.word	0x20000220
   17024:	b510      	push	{r4, lr}
   17026:	f7fc f9a9 	bl	1337c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
   1702a:	f7fd f80f 	bl	1404c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
   1702e:	4803      	ldr	r0, [pc, #12]	; (1703c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
   17030:	f7fc f98a 	bl	13348 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
   17034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17038:	f7fb be7e 	b.w	12d38 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
   1703c:	20001821 	.word	0x20001821
   17040:	4909      	ldr	r1, [pc, #36]	; (17068 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
   17042:	b510      	push	{r4, lr}
   17044:	2001      	movs	r0, #1
   17046:	7008      	strb	r0, [r1, #0]
   17048:	f7fc f9c8 	bl	133dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
   1704c:	f7fd fd20 	bl	14a90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
   17050:	f002 fee6 	bl	19e20 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
   17054:	4805      	ldr	r0, [pc, #20]	; (1706c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
   17056:	f7fa fc53 	bl	11900 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
   1705a:	2000      	movs	r0, #0
   1705c:	f7f9 fea8 	bl	10db0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   17060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17064:	f7fb be70 	b.w	12d48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
   17068:	20000220 	.word	0x20000220
   1706c:	20001821 	.word	0x20001821

00017070 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
   17070:	2101      	movs	r1, #1
   17072:	4081      	lsls	r1, r0
   17074:	4802      	ldr	r0, [pc, #8]	; (17080 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
   17076:	6802      	ldr	r2, [r0, #0]
   17078:	4311      	orrs	r1, r2
   1707a:	6001      	str	r1, [r0, #0]
   1707c:	4770      	bx	lr
   1707e:	0000      	.short	0x0000
   17080:	20000258 	.word	0x20000258

00017084 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
   17084:	4801      	ldr	r0, [pc, #4]	; (1708c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
   17086:	6800      	ldr	r0, [r0, #0]
   17088:	4770      	bx	lr
   1708a:	0000      	.short	0x0000
   1708c:	20000258 	.word	0x20000258

00017090 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
   17090:	4803      	ldr	r0, [pc, #12]	; (170a0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
   17092:	8800      	ldrh	r0, [r0, #0]
   17094:	f3c0 2000 	ubfx	r0, r0, #8, #1
   17098:	0040      	lsls	r0, r0, #1
   1709a:	1c40      	adds	r0, r0, #1
   1709c:	4770      	bx	lr
   1709e:	0000      	.short	0x0000
   170a0:	20000258 	.word	0x20000258

000170a4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
   170a4:	b510      	push	{r4, lr}
   170a6:	f7f9 f911 	bl	102cc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   170aa:	2200      	movs	r2, #0
   170ac:	4b08      	ldr	r3, [pc, #32]	; (170d0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
   170ae:	4611      	mov	r1, r2
   170b0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
   170b4:	4284      	cmp	r4, r0
   170b6:	d303      	bcc.n	170c0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
   170b8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   170bc:	7882      	ldrb	r2, [r0, #2]
   170be:	e003      	b.n	170c8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
   170c0:	1c49      	adds	r1, r1, #1
   170c2:	b2c9      	uxtb	r1, r1
   170c4:	290c      	cmp	r1, #12
   170c6:	d3f3      	bcc.n	170b0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
   170c8:	4802      	ldr	r0, [pc, #8]	; (170d4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
   170ca:	7002      	strb	r2, [r0, #0]
   170cc:	bd10      	pop	{r4, pc}
   170ce:	0000      	.short	0x0000
   170d0:	0001c74e 	.word	0x0001c74e
   170d4:	200002a7 	.word	0x200002a7

000170d8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
   170d8:	b570      	push	{r4, r5, r6, lr}
   170da:	4605      	mov	r5, r0
   170dc:	4616      	mov	r6, r2
   170de:	460c      	mov	r4, r1
   170e0:	2002      	movs	r0, #2
   170e2:	f000 f9f9 	bl	174d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   170e6:	4906      	ldr	r1, [pc, #24]	; (17100 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
   170e8:	2001      	movs	r0, #1
   170ea:	1ef6      	subs	r6, r6, #3
   170ec:	7008      	strb	r0, [r1, #0]
   170ee:	4805      	ldr	r0, [pc, #20]	; (17104 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
   170f0:	6006      	str	r6, [r0, #0]
   170f2:	4804      	ldr	r0, [pc, #16]	; (17104 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
   170f4:	3808      	subs	r0, #8
   170f6:	6005      	str	r5, [r0, #0]
   170f8:	1f00      	subs	r0, r0, #4
   170fa:	6004      	str	r4, [r0, #0]
   170fc:	bd70      	pop	{r4, r5, r6, pc}
   170fe:	0000      	.short	0x0000
   17100:	200002a8 	.word	0x200002a8
   17104:	4000f510 	.word	0x4000f510

00017108 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
   17108:	b510      	push	{r4, lr}
   1710a:	4c0c      	ldr	r4, [pc, #48]	; (1713c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
   1710c:	7820      	ldrb	r0, [r4, #0]
   1710e:	b180      	cbz	r0, 17132 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
   17110:	490b      	ldr	r1, [pc, #44]	; (17140 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
   17112:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   17116:	6008      	str	r0, [r1, #0]
   17118:	f000 f86a 	bl	171f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
   1711c:	2100      	movs	r1, #0
   1711e:	b120      	cbz	r0, 1712a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
   17120:	2001      	movs	r0, #1
   17122:	7060      	strb	r0, [r4, #1]
   17124:	4807      	ldr	r0, [pc, #28]	; (17144 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
   17126:	6800      	ldr	r0, [r0, #0]
   17128:	e001      	b.n	1712e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
   1712a:	7061      	strb	r1, [r4, #1]
   1712c:	2010      	movs	r0, #16
   1712e:	70a0      	strb	r0, [r4, #2]
   17130:	7021      	strb	r1, [r4, #0]
   17132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17136:	2000      	movs	r0, #0
   17138:	f000 b9ce 	b.w	174d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   1713c:	200002a8 	.word	0x200002a8
   17140:	4001f508 	.word	0x4001f508
   17144:	4000f400 	.word	0x4000f400

00017148 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
   17148:	b510      	push	{r4, lr}
   1714a:	2002      	movs	r0, #2
   1714c:	f000 f9c4 	bl	174d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   17150:	4904      	ldr	r1, [pc, #16]	; (17164 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
   17152:	2001      	movs	r0, #1
   17154:	7008      	strb	r0, [r1, #0]
   17156:	f000 f859 	bl	1720c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
   1715a:	4903      	ldr	r1, [pc, #12]	; (17168 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
   1715c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   17160:	6008      	str	r0, [r1, #0]
   17162:	bd10      	pop	{r4, pc}
   17164:	200002a8 	.word	0x200002a8
   17168:	4001f504 	.word	0x4001f504

0001716c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
   1716c:	4803      	ldr	r0, [pc, #12]	; (1717c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
   1716e:	2100      	movs	r1, #0
   17170:	7001      	strb	r1, [r0, #0]
   17172:	7041      	strb	r1, [r0, #1]
   17174:	2110      	movs	r1, #16
   17176:	7081      	strb	r1, [r0, #2]
   17178:	4770      	bx	lr
   1717a:	0000      	.short	0x0000
   1717c:	200002a8 	.word	0x200002a8

00017180 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
   17180:	4807      	ldr	r0, [pc, #28]	; (171a0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
   17182:	b510      	push	{r4, lr}
   17184:	7801      	ldrb	r1, [r0, #0]
   17186:	b141      	cbz	r1, 1719a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
   17188:	f000 f832 	bl	171f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
   1718c:	b118      	cbz	r0, 17196 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
   1718e:	4805      	ldr	r0, [pc, #20]	; (171a4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
   17190:	6800      	ldr	r0, [r0, #0]
   17192:	b2c0      	uxtb	r0, r0
   17194:	bd10      	pop	{r4, pc}
   17196:	2010      	movs	r0, #16
   17198:	bd10      	pop	{r4, pc}
   1719a:	7880      	ldrb	r0, [r0, #2]
   1719c:	bd10      	pop	{r4, pc}
   1719e:	0000      	.short	0x0000
   171a0:	200002a8 	.word	0x200002a8
   171a4:	4000f400 	.word	0x4000f400

000171a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
   171a8:	4808      	ldr	r0, [pc, #32]	; (171cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
   171aa:	b510      	push	{r4, lr}
   171ac:	7801      	ldrb	r1, [r0, #0]
   171ae:	b159      	cbz	r1, 171c8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
   171b0:	4807      	ldr	r0, [pc, #28]	; (171d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
   171b2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   171b6:	b128      	cbz	r0, 171c4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
   171b8:	f000 f80c 	bl	171d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
   171bc:	2800      	cmp	r0, #0
   171be:	d000      	beq.n	171c2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
   171c0:	2001      	movs	r0, #1
   171c2:	bd10      	pop	{r4, pc}
   171c4:	2002      	movs	r0, #2
   171c6:	bd10      	pop	{r4, pc}
   171c8:	7840      	ldrb	r0, [r0, #1]
   171ca:	bd10      	pop	{r4, pc}
   171cc:	200002a8 	.word	0x200002a8
   171d0:	4000f000 	.word	0x4000f000
   171d4:	4805      	ldr	r0, [pc, #20]	; (171ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
   171d6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   171da:	b111      	cbz	r1, 171e2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
   171dc:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
   171e0:	b108      	cbz	r0, 171e6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
   171e2:	2000      	movs	r0, #0
   171e4:	4770      	bx	lr
   171e6:	2001      	movs	r0, #1
   171e8:	4770      	bx	lr
   171ea:	0000      	.short	0x0000
   171ec:	4000f000 	.word	0x4000f000
   171f0:	4805      	ldr	r0, [pc, #20]	; (17208 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
   171f2:	b510      	push	{r4, lr}
   171f4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   171f8:	b120      	cbz	r0, 17204 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
   171fa:	f7ff ffeb 	bl	171d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
   171fe:	b108      	cbz	r0, 17204 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
   17200:	2001      	movs	r0, #1
   17202:	bd10      	pop	{r4, pc}
   17204:	2000      	movs	r0, #0
   17206:	bd10      	pop	{r4, pc}
   17208:	4000f000 	.word	0x4000f000
   1720c:	4804      	ldr	r0, [pc, #16]	; (17220 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
   1720e:	2100      	movs	r1, #0
   17210:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   17214:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   17218:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   1721c:	4770      	bx	lr
   1721e:	0000      	.short	0x0000
   17220:	4000f000 	.word	0x4000f000

00017224 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
   17224:	4a08      	ldr	r2, [pc, #32]	; (17248 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
   17226:	b510      	push	{r4, lr}
   17228:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1722c:	4907      	ldr	r1, [pc, #28]	; (1724c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
   1722e:	4610      	mov	r0, r2
   17230:	f7f9 fac0 	bl	107b4 <mpsl_fem_lna_configuration_set>
   17234:	2800      	cmp	r0, #0
   17236:	d005      	beq.n	17244 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
   17238:	1c40      	adds	r0, r0, #1
   1723a:	d003      	beq.n	17244 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
   1723c:	217d      	movs	r1, #125	; 0x7d
   1723e:	2040      	movs	r0, #64	; 0x40
   17240:	f7f9 fbe8 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17244:	bd10      	pop	{r4, pc}
   17246:	0000      	.short	0x0000
   17248:	2000025c 	.word	0x2000025c
   1724c:	0001727c 	.word	0x0001727c

00017250 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
   17250:	4a08      	ldr	r2, [pc, #32]	; (17274 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
   17252:	b510      	push	{r4, lr}
   17254:	e9c2 0102 	strd	r0, r1, [r2, #8]
   17258:	4907      	ldr	r1, [pc, #28]	; (17278 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
   1725a:	4610      	mov	r0, r2
   1725c:	f7f9 fab6 	bl	107cc <mpsl_fem_pa_configuration_set>
   17260:	2800      	cmp	r0, #0
   17262:	d005      	beq.n	17270 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
   17264:	1c40      	adds	r0, r0, #1
   17266:	d003      	beq.n	17270 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
   17268:	2172      	movs	r1, #114	; 0x72
   1726a:	2040      	movs	r0, #64	; 0x40
   1726c:	f7f9 fbd2 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17270:	bd10      	pop	{r4, pc}
   17272:	0000      	.short	0x0000
   17274:	2000025c 	.word	0x2000025c
   17278:	0001727c 	.word	0x0001727c
   1727c:	00000001 	.word	0x00000001
   17280:	40001110 	.word	0x40001110
	...

00017294 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
   17294:	4a07      	ldr	r2, [pc, #28]	; (172b4 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
   17296:	b510      	push	{r4, lr}
   17298:	7853      	ldrb	r3, [r2, #1]
   1729a:	b133      	cbz	r3, 172aa <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
   1729c:	4b06      	ldr	r3, [pc, #24]	; (172b8 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
   1729e:	6019      	str	r1, [r3, #0]
   172a0:	1d19      	adds	r1, r3, #4
   172a2:	6008      	str	r0, [r1, #0]
   172a4:	2001      	movs	r0, #1
   172a6:	7090      	strb	r0, [r2, #2]
   172a8:	bd10      	pop	{r4, pc}
   172aa:	21ba      	movs	r1, #186	; 0xba
   172ac:	203c      	movs	r0, #60	; 0x3c
   172ae:	f7f9 fbb1 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   172b2:	0000      	.short	0x0000
   172b4:	200002ab 	.word	0x200002ab
   172b8:	4000f50c 	.word	0x4000f50c

000172bc <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
   172bc:	4809      	ldr	r0, [pc, #36]	; (172e4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
   172be:	b510      	push	{r4, lr}
   172c0:	7801      	ldrb	r1, [r0, #0]
   172c2:	b151      	cbz	r1, 172da <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
   172c4:	7880      	ldrb	r0, [r0, #2]
   172c6:	b140      	cbz	r0, 172da <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
   172c8:	4907      	ldr	r1, [pc, #28]	; (172e8 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
   172ca:	2000      	movs	r0, #0
   172cc:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   172d0:	4906      	ldr	r1, [pc, #24]	; (172ec <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
   172d2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   172d6:	6008      	str	r0, [r1, #0]
   172d8:	bd10      	pop	{r4, pc}
   172da:	21e1      	movs	r1, #225	; 0xe1
   172dc:	203c      	movs	r0, #60	; 0x3c
   172de:	f7f9 fb99 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   172e2:	0000      	.short	0x0000
   172e4:	200002ab 	.word	0x200002ab
   172e8:	4000f000 	.word	0x4000f000
   172ec:	4001f504 	.word	0x4001f504

000172f0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
   172f0:	b570      	push	{r4, r5, r6, lr}
   172f2:	4c0b      	ldr	r4, [pc, #44]	; (17320 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
   172f4:	2500      	movs	r5, #0
   172f6:	7820      	ldrb	r0, [r4, #0]
   172f8:	b158      	cbz	r0, 17312 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
   172fa:	f000 f8e5 	bl	174c8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
   172fe:	4809      	ldr	r0, [pc, #36]	; (17324 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
   17300:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
   17304:	b118      	cbz	r0, 1730e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
   17306:	4808      	ldr	r0, [pc, #32]	; (17328 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
   17308:	6800      	ldr	r0, [r0, #0]
   1730a:	70e0      	strb	r0, [r4, #3]
   1730c:	e000      	b.n	17310 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
   1730e:	70e5      	strb	r5, [r4, #3]
   17310:	7025      	strb	r5, [r4, #0]
   17312:	2000      	movs	r0, #0
   17314:	f000 f8e0 	bl	174d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   17318:	7065      	strb	r5, [r4, #1]
   1731a:	70a5      	strb	r5, [r4, #2]
   1731c:	bd70      	pop	{r4, r5, r6, pc}
   1731e:	0000      	.short	0x0000
   17320:	200002ab 	.word	0x200002ab
   17324:	4000f000 	.word	0x4000f000
   17328:	4000f400 	.word	0x4000f400

0001732c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
   1732c:	480d      	ldr	r0, [pc, #52]	; (17364 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
   1732e:	b510      	push	{r4, lr}
   17330:	7801      	ldrb	r1, [r0, #0]
   17332:	b191      	cbz	r1, 1735a <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
   17334:	7880      	ldrb	r0, [r0, #2]
   17336:	b180      	cbz	r0, 1735a <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
   17338:	490b      	ldr	r1, [pc, #44]	; (17368 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
   1733a:	2000      	movs	r0, #0
   1733c:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   17340:	4a0a      	ldr	r2, [pc, #40]	; (1736c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
   17342:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17346:	6010      	str	r0, [r2, #0]
   17348:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   1734c:	2a01      	cmp	r2, #1
   1734e:	d103      	bne.n	17358 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
   17350:	604a      	str	r2, [r1, #4]
   17352:	4906      	ldr	r1, [pc, #24]	; (1736c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
   17354:	1d09      	adds	r1, r1, #4
   17356:	6008      	str	r0, [r1, #0]
   17358:	bd10      	pop	{r4, pc}
   1735a:	21d1      	movs	r1, #209	; 0xd1
   1735c:	203c      	movs	r0, #60	; 0x3c
   1735e:	f7f9 fb59 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17362:	0000      	.short	0x0000
   17364:	200002ab 	.word	0x200002ab
   17368:	4000f000 	.word	0x4000f000
   1736c:	4001f504 	.word	0x4001f504

00017370 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
   17370:	4803      	ldr	r0, [pc, #12]	; (17380 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
   17372:	2100      	movs	r1, #0
   17374:	7001      	strb	r1, [r0, #0]
   17376:	7041      	strb	r1, [r0, #1]
   17378:	7081      	strb	r1, [r0, #2]
   1737a:	70c1      	strb	r1, [r0, #3]
   1737c:	4770      	bx	lr
   1737e:	0000      	.short	0x0000
   17380:	200002ab 	.word	0x200002ab

00017384 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
   17384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17388:	4605      	mov	r5, r0
   1738a:	461c      	mov	r4, r3
   1738c:	4690      	mov	r8, r2
   1738e:	460f      	mov	r7, r1
   17390:	2001      	movs	r0, #1
   17392:	f000 f8a1 	bl	174d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   17396:	4e12      	ldr	r6, [pc, #72]	; (173e0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
   17398:	4812      	ldr	r0, [pc, #72]	; (173e4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
   1739a:	7134      	strb	r4, [r6, #4]
   1739c:	6007      	str	r7, [r0, #0]
   1739e:	4911      	ldr	r1, [pc, #68]	; (173e4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
   173a0:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   173a4:	1f09      	subs	r1, r1, #4
   173a6:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   173aa:	6008      	str	r0, [r1, #0]
   173ac:	f001 fb61 	bl	18a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   173b0:	b938      	cbnz	r0, 173c2 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
   173b2:	480c      	ldr	r0, [pc, #48]	; (173e4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
   173b4:	3010      	adds	r0, #16
   173b6:	6801      	ldr	r1, [r0, #0]
   173b8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   173bc:	ea41 0108 	orr.w	r1, r1, r8
   173c0:	6001      	str	r1, [r0, #0]
   173c2:	f000 f881 	bl	174c8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
   173c6:	b93d      	cbnz	r5, 173d8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
   173c8:	4808      	ldr	r0, [pc, #32]	; (173ec <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
   173ca:	4a07      	ldr	r2, [pc, #28]	; (173e8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
   173cc:	4906      	ldr	r1, [pc, #24]	; (173e8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
   173ce:	3afc      	subs	r2, #252	; 0xfc
   173d0:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
   173d4:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
   173d8:	2001      	movs	r0, #1
   173da:	7070      	strb	r0, [r6, #1]
   173dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   173e0:	200002ab 	.word	0x200002ab
   173e4:	4000f508 	.word	0x4000f508
   173e8:	4000f100 	.word	0x4000f100
   173ec:	4001f088 	.word	0x4001f088

000173f0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
   173f0:	4808      	ldr	r0, [pc, #32]	; (17414 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
   173f2:	b510      	push	{r4, lr}
   173f4:	7841      	ldrb	r1, [r0, #1]
   173f6:	b149      	cbz	r1, 1740c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
   173f8:	2101      	movs	r1, #1
   173fa:	7001      	strb	r1, [r0, #0]
   173fc:	4806      	ldr	r0, [pc, #24]	; (17418 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
   173fe:	2200      	movs	r2, #0
   17400:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
   17404:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   17408:	6001      	str	r1, [r0, #0]
   1740a:	bd10      	pop	{r4, pc}
   1740c:	21c5      	movs	r1, #197	; 0xc5
   1740e:	203c      	movs	r0, #60	; 0x3c
   17410:	f7f9 fb00 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17414:	200002ab 	.word	0x200002ab
   17418:	4000f000 	.word	0x4000f000

0001741c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
   1741c:	4806      	ldr	r0, [pc, #24]	; (17438 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
   1741e:	7801      	ldrb	r1, [r0, #0]
   17420:	b141      	cbz	r1, 17434 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
   17422:	4806      	ldr	r0, [pc, #24]	; (1743c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
   17424:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
   17428:	2800      	cmp	r0, #0
   1742a:	d002      	beq.n	17432 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
   1742c:	4804      	ldr	r0, [pc, #16]	; (17440 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
   1742e:	6800      	ldr	r0, [r0, #0]
   17430:	b2c0      	uxtb	r0, r0
   17432:	4770      	bx	lr
   17434:	78c0      	ldrb	r0, [r0, #3]
   17436:	4770      	bx	lr
   17438:	200002ab 	.word	0x200002ab
   1743c:	4000f000 	.word	0x4000f000
   17440:	4000f400 	.word	0x4000f400

00017444 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
   17444:	4901      	ldr	r1, [pc, #4]	; (1744c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
   17446:	2001      	movs	r0, #1
   17448:	6088      	str	r0, [r1, #8]
   1744a:	4770      	bx	lr
   1744c:	4000f000 	.word	0x4000f000

00017450 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
   17450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17454:	2800      	cmp	r0, #0
   17456:	d02e      	beq.n	174b6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
   17458:	4818      	ldr	r0, [pc, #96]	; (174bc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
   1745a:	7800      	ldrb	r0, [r0, #0]
   1745c:	b1b0      	cbz	r0, 1748c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
   1745e:	4d18      	ldr	r5, [pc, #96]	; (174c0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
   17460:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   17464:	2800      	cmp	r0, #0
   17466:	d126      	bne.n	174b6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
   17468:	2702      	movs	r7, #2
   1746a:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
   1746e:	4c15      	ldr	r4, [pc, #84]	; (174c4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
   17470:	6820      	ldr	r0, [r4, #0]
   17472:	43c0      	mvns	r0, r0
   17474:	f340 1600 	sbfx	r6, r0, #4, #1
   17478:	6820      	ldr	r0, [r4, #0]
   1747a:	f040 0010 	orr.w	r0, r0, #16
   1747e:	6020      	str	r0, [r4, #0]
   17480:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   17484:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
   17488:	1c76      	adds	r6, r6, #1
   1748a:	e009      	b.n	174a0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
   1748c:	f240 1153 	movw	r1, #339	; 0x153
   17490:	203c      	movs	r0, #60	; 0x3c
   17492:	f7f9 fabf 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17496:	bf00      	nop
   17498:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
   1749c:	f7f9 f934 	bl	10708 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   174a0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   174a4:	2800      	cmp	r0, #0
   174a6:	d0f7      	beq.n	17498 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
   174a8:	b91e      	cbnz	r6, 174b2 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
   174aa:	6820      	ldr	r0, [r4, #0]
   174ac:	f020 0010 	bic.w	r0, r0, #16
   174b0:	6020      	str	r0, [r4, #0]
   174b2:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
   174b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   174ba:	0000      	.short	0x0000
   174bc:	200002ab 	.word	0x200002ab
   174c0:	4000f000 	.word	0x4000f000
   174c4:	e000ed10 	.word	0xe000ed10
   174c8:	4902      	ldr	r1, [pc, #8]	; (174d4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
   174ca:	4801      	ldr	r0, [pc, #4]	; (174d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
   174cc:	6008      	str	r0, [r1, #0]
   174ce:	4770      	bx	lr
   174d0:	02020000 	.word	0x02020000
   174d4:	4001f508 	.word	0x4001f508

000174d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
   174d8:	b510      	push	{r4, lr}
   174da:	4604      	mov	r4, r0
   174dc:	f000 f822 	bl	17524 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   174e0:	2c00      	cmp	r4, #0
   174e2:	d017      	beq.n	17514 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
   174e4:	4a0c      	ldr	r2, [pc, #48]	; (17518 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
   174e6:	480c      	ldr	r0, [pc, #48]	; (17518 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
   174e8:	490c      	ldr	r1, [pc, #48]	; (1751c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
   174ea:	3214      	adds	r2, #20
   174ec:	4b0c      	ldr	r3, [pc, #48]	; (17520 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
   174ee:	2c01      	cmp	r4, #1
   174f0:	d005      	beq.n	174fe <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
   174f2:	2c02      	cmp	r4, #2
   174f4:	d008      	beq.n	17508 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
   174f6:	2183      	movs	r1, #131	; 0x83
   174f8:	203d      	movs	r0, #61	; 0x3d
   174fa:	f7f9 fa8b 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   174fe:	2402      	movs	r4, #2
   17500:	6004      	str	r4, [r0, #0]
   17502:	6011      	str	r1, [r2, #0]
   17504:	0620      	lsls	r0, r4, #24
   17506:	e004      	b.n	17512 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
   17508:	2403      	movs	r4, #3
   1750a:	6004      	str	r4, [r0, #0]
   1750c:	6011      	str	r1, [r2, #0]
   1750e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   17512:	6018      	str	r0, [r3, #0]
   17514:	bd10      	pop	{r4, pc}
   17516:	0000      	.short	0x0000
   17518:	4000f500 	.word	0x4000f500
   1751c:	20001923 	.word	0x20001923
   17520:	4001f504 	.word	0x4001f504
   17524:	4804      	ldr	r0, [pc, #16]	; (17538 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
   17526:	2100      	movs	r1, #0
   17528:	6001      	str	r1, [r0, #0]
   1752a:	6001      	str	r1, [r0, #0]
   1752c:	4903      	ldr	r1, [pc, #12]	; (1753c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
   1752e:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
   17532:	6008      	str	r0, [r1, #0]
   17534:	4770      	bx	lr
   17536:	0000      	.short	0x0000
   17538:	4000f500 	.word	0x4000f500
   1753c:	4001f508 	.word	0x4001f508

00017540 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
   17540:	4805      	ldr	r0, [pc, #20]	; (17558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
   17542:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   17546:	f021 0140 	bic.w	r1, r1, #64	; 0x40
   1754a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   1754e:	2100      	movs	r1, #0
   17550:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
   17554:	4770      	bx	lr
   17556:	0000      	.short	0x0000
   17558:	40001000 	.word	0x40001000

0001755c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
   1755c:	4904      	ldr	r1, [pc, #16]	; (17570 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
   1755e:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
   17562:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
   17566:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1756a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1756e:	4770      	bx	lr
   17570:	40001000 	.word	0x40001000

00017574 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
   17574:	4801      	ldr	r0, [pc, #4]	; (1757c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
   17576:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
   1757a:	4770      	bx	lr
   1757c:	200013dc 	.word	0x200013dc

00017580 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
   17580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17582:	4c23      	ldr	r4, [pc, #140]	; (17610 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
   17584:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   17588:	f010 0f10 	tst.w	r0, #16
   1758c:	d001      	beq.n	17592 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
   1758e:	2701      	movs	r7, #1
   17590:	e000      	b.n	17594 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
   17592:	2700      	movs	r7, #0
   17594:	2010      	movs	r0, #16
   17596:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   1759a:	2002      	movs	r0, #2
   1759c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   175a0:	481c      	ldr	r0, [pc, #112]	; (17614 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
   175a2:	2500      	movs	r5, #0
   175a4:	491d      	ldr	r1, [pc, #116]	; (1761c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
   175a6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
   175aa:	481b      	ldr	r0, [pc, #108]	; (17618 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
   175ac:	6008      	str	r0, [r1, #0]
   175ae:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   175b2:	f44f 7688 	mov.w	r6, #272	; 0x110
   175b6:	f010 0fff 	tst.w	r0, #255	; 0xff
   175ba:	d018      	beq.n	175ee <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
   175bc:	20ff      	movs	r0, #255	; 0xff
   175be:	f88d 0000 	strb.w	r0, [sp]
   175c2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   175c6:	2001      	movs	r0, #1
   175c8:	6120      	str	r0, [r4, #16]
   175ca:	e004      	b.n	175d6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
   175cc:	f89d 0000 	ldrb.w	r0, [sp]
   175d0:	1e40      	subs	r0, r0, #1
   175d2:	f88d 0000 	strb.w	r0, [sp]
   175d6:	f89d 0000 	ldrb.w	r0, [sp]
   175da:	b128      	cbz	r0, 175e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
   175dc:	4631      	mov	r1, r6
   175de:	4620      	mov	r0, r4
   175e0:	f005 f984 	bl	1c8ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   175e4:	2800      	cmp	r0, #0
   175e6:	d0f1      	beq.n	175cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
   175e8:	f89d 0000 	ldrb.w	r0, [sp]
   175ec:	b158      	cbz	r0, 17606 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
   175ee:	f000 fcdb 	bl	17fa8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
   175f2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   175f6:	f000 fe57 	bl	182a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   175fa:	2f00      	cmp	r7, #0
   175fc:	d002      	beq.n	17604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
   175fe:	2010      	movs	r0, #16
   17600:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   17604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17606:	f240 718f 	movw	r1, #1935	; 0x78f
   1760a:	203e      	movs	r0, #62	; 0x3e
   1760c:	f7f9 fa02 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17610:	40001000 	.word	0x40001000
   17614:	200013dc 	.word	0x200013dc
   17618:	0c0e0000 	.word	0x0c0e0000
   1761c:	4001f508 	.word	0x4001f508

00017620 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
   17620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17624:	4d20      	ldr	r5, [pc, #128]	; (176a8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
   17626:	4607      	mov	r7, r0
   17628:	4688      	mov	r8, r1
   1762a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
   1762e:	07c1      	lsls	r1, r0, #31
   17630:	d018      	beq.n	17664 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
   17632:	4a1e      	ldr	r2, [pc, #120]	; (176ac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
   17634:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
   17638:	6011      	str	r1, [r2, #0]
   1763a:	4c1d      	ldr	r4, [pc, #116]	; (176b0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
   1763c:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
   17640:	f041 0101 	orr.w	r1, r1, #1
   17644:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   17648:	f040 0002 	orr.w	r0, r0, #2
   1764c:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
   17650:	4640      	mov	r0, r8
   17652:	f000 fe8d 	bl	18370 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   17656:	f000 fc45 	bl	17ee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
   1765a:	2601      	movs	r6, #1
   1765c:	b13f      	cbz	r7, 1766e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
   1765e:	2f01      	cmp	r7, #1
   17660:	d00e      	beq.n	17680 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
   17662:	e016      	b.n	17692 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
   17664:	f240 611a 	movw	r1, #1562	; 0x61a
   17668:	203e      	movs	r0, #62	; 0x3e
   1766a:	f7f9 f9d3 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1766e:	4640      	mov	r0, r8
   17670:	f000 fc68 	bl	17f44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   17674:	4640      	mov	r0, r8
   17676:	f000 fc19 	bl	17eac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   1767a:	726e      	strb	r6, [r5, #9]
   1767c:	6026      	str	r6, [r4, #0]
   1767e:	e008      	b.n	17692 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
   17680:	f000 fc88 	bl	17f94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   17684:	f000 fdd6 	bl	18234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   17688:	2002      	movs	r0, #2
   1768a:	7268      	strb	r0, [r5, #9]
   1768c:	f000 fcfa 	bl	18084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
   17690:	6066      	str	r6, [r4, #4]
   17692:	4808      	ldr	r0, [pc, #32]	; (176b4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
   17694:	64c6      	str	r6, [r0, #76]	; 0x4c
   17696:	4807      	ldr	r0, [pc, #28]	; (176b4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
   17698:	300c      	adds	r0, #12
   1769a:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
   1769e:	4638      	mov	r0, r7
   176a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   176a4:	f005 b90a 	b.w	1c8bc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
   176a8:	200013dc 	.word	0x200013dc
   176ac:	4001f504 	.word	0x4001f504
   176b0:	40001000 	.word	0x40001000
   176b4:	40008000 	.word	0x40008000

000176b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
   176b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   176bc:	4d35      	ldr	r5, [pc, #212]	; (17794 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
   176be:	4606      	mov	r6, r0
   176c0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
   176c4:	4689      	mov	r9, r1
   176c6:	6028      	str	r0, [r5, #0]
   176c8:	4c33      	ldr	r4, [pc, #204]	; (17798 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
   176ca:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
   176ce:	f040 0002 	orr.w	r0, r0, #2
   176d2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
   176d6:	4608      	mov	r0, r1
   176d8:	f000 fe4a 	bl	18370 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   176dc:	f000 fc02 	bl	17ee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
   176e0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1779c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
   176e4:	2700      	movs	r7, #0
   176e6:	b116      	cbz	r6, 176ee <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
   176e8:	2e01      	cmp	r6, #1
   176ea:	d027      	beq.n	1773c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
   176ec:	e03f      	b.n	1776e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
   176ee:	4648      	mov	r0, r9
   176f0:	f000 fc28 	bl	17f44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   176f4:	79e0      	ldrb	r0, [r4, #7]
   176f6:	2801      	cmp	r0, #1
   176f8:	d105      	bne.n	17706 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
   176fa:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
   176fe:	f041 0108 	orr.w	r1, r1, #8
   17702:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
   17706:	4648      	mov	r0, r9
   17708:	f000 fbd0 	bl	17eac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   1770c:	2001      	movs	r0, #1
   1770e:	7260      	strb	r0, [r4, #9]
   17710:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   17712:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   17716:	62a0      	str	r0, [r4, #40]	; 0x28
   17718:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1771c:	6028      	str	r0, [r5, #0]
   1771e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   17722:	f1b9 0f02 	cmp.w	r9, #2
   17726:	d007      	beq.n	17738 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
   17728:	f640 0034 	movw	r0, #2100	; 0x834
   1772c:	f649 72ec 	movw	r2, #40940	; 0x9fec
   17730:	4410      	add	r0, r2
   17732:	fbb0 f7f1 	udiv	r7, r0, r1
   17736:	e01a      	b.n	1776e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
   17738:	4608      	mov	r0, r1
   1773a:	e7f7      	b.n	1772c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
   1773c:	f000 fc2a 	bl	17f94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   17740:	f000 fd78 	bl	18234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   17744:	79e0      	ldrb	r0, [r4, #7]
   17746:	2801      	cmp	r0, #1
   17748:	d105      	bne.n	17756 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
   1774a:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
   1774e:	f041 0104 	orr.w	r1, r1, #4
   17752:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
   17756:	2002      	movs	r0, #2
   17758:	7260      	strb	r0, [r4, #9]
   1775a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1775c:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
   17760:	62a0      	str	r0, [r4, #40]	; 0x28
   17762:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   17766:	6028      	str	r0, [r5, #0]
   17768:	2729      	movs	r7, #41	; 0x29
   1776a:	f000 fc8b 	bl	18084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
   1776e:	f000 fc75 	bl	1805c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   17772:	f001 f855 	bl	18820 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
   17776:	6800      	ldr	r0, [r0, #0]
   17778:	2801      	cmp	r0, #1
   1777a:	d006      	beq.n	1778a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
   1777c:	2100      	movs	r1, #0
   1777e:	4630      	mov	r0, r6
   17780:	f005 f89c 	bl	1c8bc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
   17784:	4638      	mov	r0, r7
   17786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1778a:	f7ff fef9 	bl	17580 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   1778e:	2000      	movs	r0, #0
   17790:	e7f9      	b.n	17786 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
   17792:	0000      	.short	0x0000
   17794:	4001f504 	.word	0x4001f504
   17798:	200013dc 	.word	0x200013dc
   1779c:	40001000 	.word	0x40001000

000177a0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
   177a0:	4a02      	ldr	r2, [pc, #8]	; (177ac <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
   177a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   177a4:	6003      	str	r3, [r0, #0]
   177a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
   177a8:	6008      	str	r0, [r1, #0]
   177aa:	4770      	bx	lr
   177ac:	200013dc 	.word	0x200013dc

000177b0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
   177b0:	b510      	push	{r4, lr}
   177b2:	c81d      	ldmia	r0, {r0, r2, r3, r4}
   177b4:	4901      	ldr	r1, [pc, #4]	; (177bc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
   177b6:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
   177ba:	bd10      	pop	{r4, pc}
   177bc:	200013cc 	.word	0x200013cc

000177c0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
   177c0:	490f      	ldr	r1, [pc, #60]	; (17800 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
   177c2:	b510      	push	{r4, lr}
   177c4:	69ca      	ldr	r2, [r1, #28]
   177c6:	4282      	cmp	r2, r0
   177c8:	d302      	bcc.n	177d0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
   177ca:	f640 010a 	movw	r1, #2058	; 0x80a
   177ce:	e00b      	b.n	177e8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
   177d0:	2201      	movs	r2, #1
   177d2:	730a      	strb	r2, [r1, #12]
   177d4:	6108      	str	r0, [r1, #16]
   177d6:	490b      	ldr	r1, [pc, #44]	; (17804 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
   177d8:	644a      	str	r2, [r1, #68]	; 0x44
   177da:	1d0a      	adds	r2, r1, #4
   177dc:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
   177e0:	4283      	cmp	r3, r0
   177e2:	d304      	bcc.n	177ee <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
   177e4:	f640 0113 	movw	r1, #2067	; 0x813
   177e8:	203e      	movs	r0, #62	; 0x3e
   177ea:	f7f9 f913 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   177ee:	2300      	movs	r3, #0
   177f0:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
   177f4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   177f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   177fc:	f000 bd28 	b.w	18250 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
   17800:	200013dc 	.word	0x200013dc
   17804:	40008000 	.word	0x40008000

00017808 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
   17808:	b570      	push	{r4, r5, r6, lr}
   1780a:	4c11      	ldr	r4, [pc, #68]	; (17850 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
   1780c:	4606      	mov	r6, r0
   1780e:	2002      	movs	r0, #2
   17810:	7320      	strb	r0, [r4, #12]
   17812:	2596      	movs	r5, #150	; 0x96
   17814:	f000 f86e 	bl	178f4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
   17818:	4602      	mov	r2, r0
   1781a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   1781e:	f894 1020 	ldrb.w	r1, [r4, #32]
   17822:	2801      	cmp	r0, #1
   17824:	d00f      	beq.n	17846 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
   17826:	4628      	mov	r0, r5
   17828:	f005 f86a 	bl	1c900 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
   1782c:	6120      	str	r0, [r4, #16]
   1782e:	4809      	ldr	r0, [pc, #36]	; (17854 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
   17830:	2100      	movs	r1, #0
   17832:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   17836:	6921      	ldr	r1, [r4, #16]
   17838:	69e0      	ldr	r0, [r4, #28]
   1783a:	4408      	add	r0, r1
   1783c:	4905      	ldr	r1, [pc, #20]	; (17854 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
   1783e:	1d09      	adds	r1, r1, #4
   17840:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   17844:	bd70      	pop	{r4, r5, r6, pc}
   17846:	4633      	mov	r3, r6
   17848:	4628      	mov	r0, r5
   1784a:	f005 f875 	bl	1c938 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
   1784e:	e7ed      	b.n	1782c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
   17850:	200013dc 	.word	0x200013dc
   17854:	40008000 	.word	0x40008000

00017858 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
   17858:	b510      	push	{r4, lr}
   1785a:	f001 f926 	bl	18aaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   1785e:	2800      	cmp	r0, #0
   17860:	d006      	beq.n	17870 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
   17862:	4804      	ldr	r0, [pc, #16]	; (17874 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
   17864:	6801      	ldr	r1, [r0, #0]
   17866:	f021 0101 	bic.w	r1, r1, #1
   1786a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   1786e:	6001      	str	r1, [r0, #0]
   17870:	bd10      	pop	{r4, pc}
   17872:	0000      	.short	0x0000
   17874:	40001774 	.word	0x40001774

00017878 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
   17878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1787c:	2238      	movs	r2, #56	; 0x38
   1787e:	2100      	movs	r1, #0
   17880:	4813      	ldr	r0, [pc, #76]	; (178d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
   17882:	f001 f9c2 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   17886:	f000 fd0f 	bl	182a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   1788a:	f001 f8c7 	bl	18a1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1788e:	4d11      	ldr	r5, [pc, #68]	; (178d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   17890:	4e10      	ldr	r6, [pc, #64]	; (178d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   17892:	2400      	movs	r4, #0
   17894:	4f0f      	ldr	r7, [pc, #60]	; (178d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   17896:	3508      	adds	r5, #8
   17898:	3610      	adds	r6, #16
   1789a:	b928      	cbnz	r0, 178a8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
   1789c:	f001 f8d5 	bl	18a4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   178a0:	b910      	cbnz	r0, 178a8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
   178a2:	f001 f8dc 	bl	18a5e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   178a6:	b108      	cbz	r0, 178ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
   178a8:	2224      	movs	r2, #36	; 0x24
   178aa:	e006      	b.n	178ba <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
   178ac:	f001 f917 	bl	18ade <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   178b0:	b910      	cbnz	r0, 178b8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
   178b2:	f001 f90a 	bl	18aca <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   178b6:	b140      	cbz	r0, 178ca <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
   178b8:	2240      	movs	r2, #64	; 0x40
   178ba:	21ff      	movs	r1, #255	; 0xff
   178bc:	4638      	mov	r0, r7
   178be:	f001 f9a4 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   178c2:	602c      	str	r4, [r5, #0]
   178c4:	6034      	str	r4, [r6, #0]
   178c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178ca:	2238      	movs	r2, #56	; 0x38
   178cc:	e7f5      	b.n	178ba <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
   178ce:	0000      	.short	0x0000
   178d0:	200013dc 	.word	0x200013dc
   178d4:	40000e00 	.word	0x40000e00

000178d8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
   178d8:	4805      	ldr	r0, [pc, #20]	; (178f0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
   178da:	b510      	push	{r4, lr}
   178dc:	69c0      	ldr	r0, [r0, #28]
   178de:	2800      	cmp	r0, #0
   178e0:	d104      	bne.n	178ec <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
   178e2:	f240 11fb 	movw	r1, #507	; 0x1fb
   178e6:	203e      	movs	r0, #62	; 0x3e
   178e8:	f7f9 f894 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   178ec:	bd10      	pop	{r4, pc}
   178ee:	0000      	.short	0x0000
   178f0:	200013dc 	.word	0x200013dc

000178f4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
   178f4:	4814      	ldr	r0, [pc, #80]	; (17948 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
   178f6:	b510      	push	{r4, lr}
   178f8:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
   178fc:	7a40      	ldrb	r0, [r0, #9]
   178fe:	b141      	cbz	r1, 17912 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
   17900:	2902      	cmp	r1, #2
   17902:	d00b      	beq.n	1791c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
   17904:	2802      	cmp	r0, #2
   17906:	d009      	beq.n	1791c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
   17908:	2901      	cmp	r1, #1
   1790a:	d00b      	beq.n	17924 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
   1790c:	2801      	cmp	r0, #1
   1790e:	d009      	beq.n	17924 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
   17910:	e016      	b.n	17940 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
   17912:	2800      	cmp	r0, #0
   17914:	d1f6      	bne.n	17904 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
   17916:	f240 117d 	movw	r1, #381	; 0x17d
   1791a:	e00e      	b.n	1793a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
   1791c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17920:	f000 bc38 	b.w	18194 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
   17924:	4809      	ldr	r0, [pc, #36]	; (1794c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
   17926:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
   1792a:	f000 000f 	and.w	r0, r0, #15
   1792e:	2803      	cmp	r0, #3
   17930:	d006      	beq.n	17940 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
   17932:	2804      	cmp	r0, #4
   17934:	d006      	beq.n	17944 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
   17936:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   1793a:	203e      	movs	r0, #62	; 0x3e
   1793c:	f7f9 f86a 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17940:	2001      	movs	r0, #1
   17942:	bd10      	pop	{r4, pc}
   17944:	2002      	movs	r0, #2
   17946:	bd10      	pop	{r4, pc}
   17948:	200013dc 	.word	0x200013dc
   1794c:	40001000 	.word	0x40001000

00017950 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
   17950:	4805      	ldr	r0, [pc, #20]	; (17968 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
   17952:	b510      	push	{r4, lr}
   17954:	6980      	ldr	r0, [r0, #24]
   17956:	2800      	cmp	r0, #0
   17958:	d104      	bne.n	17964 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
   1795a:	f240 11f5 	movw	r1, #501	; 0x1f5
   1795e:	203e      	movs	r0, #62	; 0x3e
   17960:	f7f9 f858 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17964:	bd10      	pop	{r4, pc}
   17966:	0000      	.short	0x0000
   17968:	200013dc 	.word	0x200013dc

0001796c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
   1796c:	b510      	push	{r4, lr}
   1796e:	f000 fc7d 	bl	1826c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
   17972:	f7ff fe05 	bl	17580 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   17976:	f004 ff37 	bl	1c7e8 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
   1797a:	480f      	ldr	r0, [pc, #60]	; (179b8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
   1797c:	4a0f      	ldr	r2, [pc, #60]	; (179bc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
   1797e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   17980:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
   17984:	6011      	str	r1, [r2, #0]
   17986:	2400      	movs	r4, #0
   17988:	6284      	str	r4, [r0, #40]	; 0x28
   1798a:	7304      	strb	r4, [r0, #12]
   1798c:	61c4      	str	r4, [r0, #28]
   1798e:	6184      	str	r4, [r0, #24]
   17990:	f000 fc6c 	bl	1826c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
   17994:	480a      	ldr	r0, [pc, #40]	; (179c0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
   17996:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
   1799a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
   1799e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
   179a2:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
   179a6:	2001      	movs	r0, #1
   179a8:	f004 ff57 	bl	1c85a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
   179ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   179b0:	2001      	movs	r0, #1
   179b2:	f004 bf45 	b.w	1c840 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
   179b6:	0000      	.short	0x0000
   179b8:	200013dc 	.word	0x200013dc
   179bc:	4001f508 	.word	0x4001f508
   179c0:	40008000 	.word	0x40008000

000179c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
   179c4:	b570      	push	{r4, r5, r6, lr}
   179c6:	2001      	movs	r0, #1
   179c8:	f004 ff47 	bl	1c85a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
   179cc:	4c37      	ldr	r4, [pc, #220]	; (17aac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
   179ce:	2000      	movs	r0, #0
   179d0:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
   179d4:	2001      	movs	r0, #1
   179d6:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
   179da:	f001 f856 	bl	18a8a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   179de:	4d34      	ldr	r5, [pc, #208]	; (17ab0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   179e0:	b118      	cbz	r0, 179ea <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
   179e2:	6828      	ldr	r0, [r5, #0]
   179e4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   179e8:	6028      	str	r0, [r5, #0]
   179ea:	f001 f842 	bl	18a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   179ee:	b128      	cbz	r0, 179fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
   179f0:	6828      	ldr	r0, [r5, #0]
   179f2:	4930      	ldr	r1, [pc, #192]	; (17ab4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
   179f4:	f020 0069 	bic.w	r0, r0, #105	; 0x69
   179f8:	4308      	orrs	r0, r1
   179fa:	6028      	str	r0, [r5, #0]
   179fc:	f001 f855 	bl	18aaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   17a00:	b138      	cbz	r0, 17a12 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
   17a02:	482b      	ldr	r0, [pc, #172]	; (17ab0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   17a04:	1d00      	adds	r0, r0, #4
   17a06:	6801      	ldr	r1, [r0, #0]
   17a08:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
   17a0c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
   17a10:	6001      	str	r1, [r0, #0]
   17a12:	4927      	ldr	r1, [pc, #156]	; (17ab0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   17a14:	4828      	ldr	r0, [pc, #160]	; (17ab8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
   17a16:	313c      	adds	r1, #60	; 0x3c
   17a18:	6008      	str	r0, [r1, #0]
   17a1a:	f7f8 fee3 	bl	107e4 <mpsl_fem_device_config_254_apply_get>
   17a1e:	b140      	cbz	r0, 17a32 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
   17a20:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   17a24:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
   17a28:	1c41      	adds	r1, r0, #1
   17a2a:	d002      	beq.n	17a32 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
   17a2c:	4920      	ldr	r1, [pc, #128]	; (17ab0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   17a2e:	3110      	adds	r1, #16
   17a30:	6008      	str	r0, [r1, #0]
   17a32:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   17a36:	6e00      	ldr	r0, [r0, #96]	; 0x60
   17a38:	1c41      	adds	r1, r0, #1
   17a3a:	d004      	beq.n	17a46 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
   17a3c:	491f      	ldr	r1, [pc, #124]	; (17abc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
   17a3e:	680a      	ldr	r2, [r1, #0]
   17a40:	f360 4217 	bfi	r2, r0, #16, #8
   17a44:	600a      	str	r2, [r1, #0]
   17a46:	f240 1103 	movw	r1, #259	; 0x103
   17a4a:	f240 605b 	movw	r0, #1627	; 0x65b
   17a4e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
   17a52:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   17a56:	2001      	movs	r0, #1
   17a58:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
   17a5c:	f000 fc88 	bl	18370 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   17a60:	f240 1001 	movw	r0, #257	; 0x101
   17a64:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
   17a68:	2002      	movs	r0, #2
   17a6a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   17a6e:	4915      	ldr	r1, [pc, #84]	; (17ac4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
   17a70:	4813      	ldr	r0, [pc, #76]	; (17ac0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
   17a72:	6008      	str	r0, [r1, #0]
   17a74:	4914      	ldr	r1, [pc, #80]	; (17ac8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
   17a76:	2000      	movs	r0, #0
   17a78:	4d14      	ldr	r5, [pc, #80]	; (17acc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
   17a7a:	8608      	strh	r0, [r1, #48]	; 0x30
   17a7c:	3110      	adds	r1, #16
   17a7e:	61c8      	str	r0, [r1, #28]
   17a80:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
   17a84:	7028      	strb	r0, [r5, #0]
   17a86:	2001      	movs	r0, #1
   17a88:	f004 feda 	bl	1c840 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
   17a8c:	2010      	movs	r0, #16
   17a8e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   17a92:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   17a96:	2002      	movs	r0, #2
   17a98:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   17a9c:	6868      	ldr	r0, [r5, #4]
   17a9e:	2800      	cmp	r0, #0
   17aa0:	d002      	beq.n	17aa8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
   17aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17aa6:	4700      	bx	r0
   17aa8:	bd70      	pop	{r4, r5, r6, pc}
   17aaa:	0000      	.short	0x0000
   17aac:	40001000 	.word	0x40001000
   17ab0:	4000173c 	.word	0x4000173c
   17ab4:	80000096 	.word	0x80000096
   17ab8:	8900002c 	.word	0x8900002c
   17abc:	4000158c 	.word	0x4000158c
   17ac0:	0c0e0000 	.word	0x0c0e0000
   17ac4:	4001f508 	.word	0x4001f508
   17ac8:	200013cc 	.word	0x200013cc
   17acc:	20000274 	.word	0x20000274

00017ad0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
   17ad0:	4901      	ldr	r1, [pc, #4]	; (17ad8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
   17ad2:	7508      	strb	r0, [r1, #20]
   17ad4:	4770      	bx	lr
   17ad6:	0000      	.short	0x0000
   17ad8:	200013dc 	.word	0x200013dc

00017adc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
   17adc:	4905      	ldr	r1, [pc, #20]	; (17af4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
   17ade:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   17ae2:	4805      	ldr	r0, [pc, #20]	; (17af8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
   17ae4:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
   17ae8:	f041 0101 	orr.w	r1, r1, #1
   17aec:	7001      	strb	r1, [r0, #0]
   17aee:	f000 ba7b 	b.w	17fe8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
   17af2:	0000      	.short	0x0000
   17af4:	40001000 	.word	0x40001000
   17af8:	200013dc 	.word	0x200013dc

00017afc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
   17afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17b00:	4e36      	ldr	r6, [pc, #216]	; (17bdc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
   17b02:	4607      	mov	r7, r0
   17b04:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
   17b08:	4689      	mov	r9, r1
   17b0a:	4614      	mov	r4, r2
   17b0c:	6030      	str	r0, [r6, #0]
   17b0e:	4610      	mov	r0, r2
   17b10:	f000 fc2e 	bl	18370 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   17b14:	f000 f9e6 	bl	17ee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
   17b18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 17be0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
   17b1c:	4d31      	ldr	r5, [pc, #196]	; (17be4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
   17b1e:	f04f 0801 	mov.w	r8, #1
   17b22:	b127      	cbz	r7, 17b2e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
   17b24:	2f01      	cmp	r7, #1
   17b26:	d01d      	beq.n	17b64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
   17b28:	f240 710f 	movw	r1, #1807	; 0x70f
   17b2c:	e04c      	b.n	17bc8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
   17b2e:	4620      	mov	r0, r4
   17b30:	f000 fa08 	bl	17f44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   17b34:	4620      	mov	r0, r4
   17b36:	f000 f9b9 	bl	17eac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   17b3a:	2c02      	cmp	r4, #2
   17b3c:	d00f      	beq.n	17b5e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
   17b3e:	f640 0034 	movw	r0, #2100	; 0x834
   17b42:	bf00      	nop
   17b44:	f649 51f8 	movw	r1, #40440	; 0x9df8
   17b48:	4401      	add	r1, r0
   17b4a:	4648      	mov	r0, r9
   17b4c:	f000 fbb4 	bl	182b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
   17b50:	4604      	mov	r4, r0
   17b52:	4650      	mov	r0, sl
   17b54:	f000 fb9c 	bl	18290 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
   17b58:	f885 8009 	strb.w	r8, [r5, #9]
   17b5c:	e014      	b.n	17b88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
   17b5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   17b62:	e7ef      	b.n	17b44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
   17b64:	f000 fa16 	bl	17f94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   17b68:	f000 fb64 	bl	18234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   17b6c:	f000 fa8a 	bl	18084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
   17b70:	f649 71ba 	movw	r1, #40890	; 0x9fba
   17b74:	4648      	mov	r0, r9
   17b76:	f000 fb9f 	bl	182b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
   17b7a:	4604      	mov	r4, r0
   17b7c:	4818      	ldr	r0, [pc, #96]	; (17be0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
   17b7e:	1d00      	adds	r0, r0, #4
   17b80:	f000 fb86 	bl	18290 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
   17b84:	2002      	movs	r0, #2
   17b86:	7268      	strb	r0, [r5, #9]
   17b88:	f8df 905c 	ldr.w	r9, [pc, #92]	; 17be8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
   17b8c:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
   17b90:	4917      	ldr	r1, [pc, #92]	; (17bf0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
   17b92:	4816      	ldr	r0, [pc, #88]	; (17bec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
   17b94:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
   17b98:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   17b9a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
   17b9e:	62a8      	str	r0, [r5, #40]	; 0x28
   17ba0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   17ba4:	6030      	str	r0, [r6, #0]
   17ba6:	2010      	movs	r0, #16
   17ba8:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
   17bac:	03c0      	lsls	r0, r0, #15
   17bae:	6030      	str	r0, [r6, #0]
   17bb0:	f000 fa54 	bl	1805c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   17bb4:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
   17bb8:	480b      	ldr	r0, [pc, #44]	; (17be8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
   17bba:	300c      	adds	r0, #12
   17bbc:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   17bc0:	42a0      	cmp	r0, r4
   17bc2:	d304      	bcc.n	17bce <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
   17bc4:	f240 7136 	movw	r1, #1846	; 0x736
   17bc8:	203e      	movs	r0, #62	; 0x3e
   17bca:	f7f8 ff23 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17bce:	4621      	mov	r1, r4
   17bd0:	4638      	mov	r0, r7
   17bd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17bd6:	f004 be71 	b.w	1c8bc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
   17bda:	0000      	.short	0x0000
   17bdc:	4001f504 	.word	0x4001f504
   17be0:	40001000 	.word	0x40001000
   17be4:	200013dc 	.word	0x200013dc
   17be8:	40008000 	.word	0x40008000
   17bec:	40008140 	.word	0x40008140
   17bf0:	4001f098 	.word	0x4001f098

00017bf4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
   17bf4:	4b0d      	ldr	r3, [pc, #52]	; (17c2c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
   17bf6:	b510      	push	{r4, lr}
   17bf8:	71d8      	strb	r0, [r3, #7]
   17bfa:	729a      	strb	r2, [r3, #10]
   17bfc:	b151      	cbz	r1, 17c14 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
   17bfe:	2002      	movs	r0, #2
   17c00:	7218      	strb	r0, [r3, #8]
   17c02:	2801      	cmp	r0, #1
   17c04:	d008      	beq.n	17c18 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
   17c06:	2802      	cmp	r0, #2
   17c08:	d00f      	beq.n	17c2a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
   17c0a:	f640 1112 	movw	r1, #2322	; 0x912
   17c0e:	203e      	movs	r0, #62	; 0x3e
   17c10:	f7f8 ff00 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17c14:	2001      	movs	r0, #1
   17c16:	e7f3      	b.n	17c00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
   17c18:	7a58      	ldrb	r0, [r3, #9]
   17c1a:	2802      	cmp	r0, #2
   17c1c:	d105      	bne.n	17c2a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
   17c1e:	f000 f9b9 	bl	17f94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   17c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17c26:	f000 bb05 	b.w	18234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   17c2a:	bd10      	pop	{r4, pc}
   17c2c:	200013dc 	.word	0x200013dc

00017c30 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
   17c30:	4902      	ldr	r1, [pc, #8]	; (17c3c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
   17c32:	2000      	movs	r0, #0
   17c34:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   17c38:	4770      	bx	lr
   17c3a:	0000      	.short	0x0000
   17c3c:	40008000 	.word	0x40008000

00017c40 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
   17c40:	b538      	push	{r3, r4, r5, lr}
   17c42:	4c0b      	ldr	r4, [pc, #44]	; (17c70 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
   17c44:	4605      	mov	r5, r0
   17c46:	f44f 718e 	mov.w	r1, #284	; 0x11c
   17c4a:	4620      	mov	r0, r4
   17c4c:	f004 fe4e 	bl	1c8ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   17c50:	2800      	cmp	r0, #0
   17c52:	d00c      	beq.n	17c6e <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
   17c54:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   17c58:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   17c5c:	4240      	negs	r0, r0
   17c5e:	7028      	strb	r0, [r5, #0]
   17c60:	2000      	movs	r0, #0
   17c62:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   17c66:	4803      	ldr	r0, [pc, #12]	; (17c74 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
   17c68:	6800      	ldr	r0, [r0, #0]
   17c6a:	9000      	str	r0, [sp, #0]
   17c6c:	2001      	movs	r0, #1
   17c6e:	bd38      	pop	{r3, r4, r5, pc}
   17c70:	40001000 	.word	0x40001000
   17c74:	4000111c 	.word	0x4000111c

00017c78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
   17c78:	4903      	ldr	r1, [pc, #12]	; (17c88 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
   17c7a:	0e02      	lsrs	r2, r0, #24
   17c7c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
   17c80:	0200      	lsls	r0, r0, #8
   17c82:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
   17c86:	4770      	bx	lr
   17c88:	40001000 	.word	0x40001000

00017c8c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
   17c8c:	6800      	ldr	r0, [r0, #0]
   17c8e:	4903      	ldr	r1, [pc, #12]	; (17c9c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
   17c90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17c94:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
   17c98:	4770      	bx	lr
   17c9a:	0000      	.short	0x0000
   17c9c:	40001000 	.word	0x40001000

00017ca0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
   17ca0:	b510      	push	{r4, lr}
   17ca2:	f000 fb41 	bl	18328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   17ca6:	4807      	ldr	r0, [pc, #28]	; (17cc4 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
   17ca8:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   17cac:	b2c0      	uxtb	r0, r0
   17cae:	2803      	cmp	r0, #3
   17cb0:	d001      	beq.n	17cb6 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
   17cb2:	280b      	cmp	r0, #11
   17cb4:	d104      	bne.n	17cc0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
   17cb6:	f44f 7121 	mov.w	r1, #644	; 0x284
   17cba:	203e      	movs	r0, #62	; 0x3e
   17cbc:	f7f8 feaa 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17cc0:	bd10      	pop	{r4, pc}
   17cc2:	0000      	.short	0x0000
   17cc4:	40001000 	.word	0x40001000

00017cc8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
   17cc8:	4901      	ldr	r1, [pc, #4]	; (17cd0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
   17cca:	7548      	strb	r0, [r1, #21]
   17ccc:	4770      	bx	lr
   17cce:	0000      	.short	0x0000
   17cd0:	200013dc 	.word	0x200013dc

00017cd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
   17cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17cd8:	4853      	ldr	r0, [pc, #332]	; (17e28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
   17cda:	f04f 0a01 	mov.w	sl, #1
   17cde:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
   17ce2:	4851      	ldr	r0, [pc, #324]	; (17e28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
   17ce4:	300c      	adds	r0, #12
   17ce6:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
   17cea:	4850      	ldr	r0, [pc, #320]	; (17e2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
   17cec:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
   17cf0:	4c4f      	ldr	r4, [pc, #316]	; (17e30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
   17cf2:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
   17cf6:	f000 f957 	bl	17fa8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
   17cfa:	494e      	ldr	r1, [pc, #312]	; (17e34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
   17cfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   17cfe:	6008      	str	r0, [r1, #0]
   17d00:	f8df 9134 	ldr.w	r9, [pc, #308]	; 17e38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
   17d04:	2600      	movs	r6, #0
   17d06:	62a6      	str	r6, [r4, #40]	; 0x28
   17d08:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
   17d0c:	f240 121d 	movw	r2, #285	; 0x11d
   17d10:	4391      	bics	r1, r2
   17d12:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
   17d16:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   17d1a:	f000 f9c5 	bl	180a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
   17d1e:	4605      	mov	r5, r0
   17d20:	4841      	ldr	r0, [pc, #260]	; (17e28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
   17d22:	3008      	adds	r0, #8
   17d24:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   17d28:	61e0      	str	r0, [r4, #28]
   17d2a:	f7ff fde3 	bl	178f4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
   17d2e:	f884 0020 	strb.w	r0, [r4, #32]
   17d32:	7a60      	ldrb	r0, [r4, #9]
   17d34:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
   17d38:	61a6      	str	r6, [r4, #24]
   17d3a:	4e40      	ldr	r6, [pc, #256]	; (17e3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
   17d3c:	07a8      	lsls	r0, r5, #30
   17d3e:	d502      	bpl.n	17d46 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
   17d40:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
   17d44:	61a0      	str	r0, [r4, #24]
   17d46:	0728      	lsls	r0, r5, #28
   17d48:	d502      	bpl.n	17d50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
   17d4a:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
   17d4e:	61a0      	str	r0, [r4, #24]
   17d50:	f04f 0800 	mov.w	r8, #0
   17d54:	4639      	mov	r1, r7
   17d56:	4628      	mov	r0, r5
   17d58:	f000 fa32 	bl	181c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
   17d5c:	b918      	cbnz	r0, 17d66 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
   17d5e:	f8c9 a010 	str.w	sl, [r9, #16]
   17d62:	f04f 0801 	mov.w	r8, #1
   17d66:	4f32      	ldr	r7, [pc, #200]	; (17e30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
   17d68:	07e8      	lsls	r0, r5, #31
   17d6a:	f1a7 0710 	sub.w	r7, r7, #16
   17d6e:	d002      	beq.n	17d76 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
   17d70:	6838      	ldr	r0, [r7, #0]
   17d72:	4780      	blx	r0
   17d74:	e031      	b.n	17dda <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
   17d76:	07a8      	lsls	r0, r5, #30
   17d78:	d526      	bpl.n	17dc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
   17d7a:	0768      	lsls	r0, r5, #29
   17d7c:	d41e      	bmi.n	17dbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17d7e:	f000 fe94 	bl	18aaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   17d82:	b9d8      	cbnz	r0, 17dbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17d84:	f000 fe81 	bl	18a8a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   17d88:	b9c0      	cbnz	r0, 17dbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17d8a:	482d      	ldr	r0, [pc, #180]	; (17e40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
   17d8c:	6800      	ldr	r0, [r0, #0]
   17d8e:	f3c0 5c42 	ubfx	ip, r0, #21, #3
   17d92:	f3c0 6100 	ubfx	r1, r0, #24, #1
   17d96:	f000 030f 	and.w	r3, r0, #15
   17d9a:	f3c0 1203 	ubfx	r2, r0, #4, #4
   17d9e:	f3c0 2003 	ubfx	r0, r0, #8, #4
   17da2:	b159      	cbz	r1, 17dbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17da4:	b10b      	cbz	r3, 17daa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
   17da6:	b102      	cbz	r2, 17daa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
   17da8:	b940      	cbnz	r0, 17dbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17daa:	4825      	ldr	r0, [pc, #148]	; (17e40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
   17dac:	1d00      	adds	r0, r0, #4
   17dae:	6800      	ldr	r0, [r0, #0]
   17db0:	b120      	cbz	r0, 17dbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17db2:	f1bc 0f03 	cmp.w	ip, #3
   17db6:	d201      	bcs.n	17dbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17db8:	f045 0504 	orr.w	r5, r5, #4
   17dbc:	f345 0080 	sbfx	r0, r5, #2, #1
   17dc0:	4641      	mov	r1, r8
   17dc2:	1c40      	adds	r0, r0, #1
   17dc4:	687a      	ldr	r2, [r7, #4]
   17dc6:	e007      	b.n	17dd8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
   17dc8:	f015 0f28 	tst.w	r5, #40	; 0x28
   17dcc:	d005      	beq.n	17dda <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
   17dce:	f345 1140 	sbfx	r1, r5, #5, #1
   17dd2:	68ba      	ldr	r2, [r7, #8]
   17dd4:	4640      	mov	r0, r8
   17dd6:	1c49      	adds	r1, r1, #1
   17dd8:	4790      	blx	r2
   17dda:	06e8      	lsls	r0, r5, #27
   17ddc:	d501      	bpl.n	17de2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
   17dde:	68f8      	ldr	r0, [r7, #12]
   17de0:	4780      	blx	r0
   17de2:	7a60      	ldrb	r0, [r4, #9]
   17de4:	2802      	cmp	r0, #2
   17de6:	d11c      	bne.n	17e22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
   17de8:	7b20      	ldrb	r0, [r4, #12]
   17dea:	2800      	cmp	r0, #0
   17dec:	d019      	beq.n	17e22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
   17dee:	2802      	cmp	r0, #2
   17df0:	d004      	beq.n	17dfc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
   17df2:	2801      	cmp	r0, #1
   17df4:	d006      	beq.n	17e04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
   17df6:	f640 21e1 	movw	r1, #2785	; 0xae1
   17dfa:	e009      	b.n	17e10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
   17dfc:	6921      	ldr	r1, [r4, #16]
   17dfe:	69e0      	ldr	r0, [r4, #28]
   17e00:	4408      	add	r0, r1
   17e02:	e008      	b.n	17e16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
   17e04:	69e1      	ldr	r1, [r4, #28]
   17e06:	6920      	ldr	r0, [r4, #16]
   17e08:	4288      	cmp	r0, r1
   17e0a:	d804      	bhi.n	17e16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
   17e0c:	f640 21e2 	movw	r1, #2786	; 0xae2
   17e10:	203e      	movs	r0, #62	; 0x3e
   17e12:	f7f8 fdff 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17e16:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
   17e1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17e1e:	f000 ba17 	b.w	18250 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
   17e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17e26:	0000      	.short	0x0000
   17e28:	40008000 	.word	0x40008000
   17e2c:	4000b000 	.word	0x4000b000
   17e30:	200013dc 	.word	0x200013dc
   17e34:	4001f508 	.word	0x4001f508
   17e38:	40001000 	.word	0x40001000
   17e3c:	40008004 	.word	0x40008004
   17e40:	40001450 	.word	0x40001450

00017e44 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
   17e44:	b570      	push	{r4, r5, r6, lr}
   17e46:	4b15      	ldr	r3, [pc, #84]	; (17e9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
   17e48:	888c      	ldrh	r4, [r1, #4]
   17e4a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
   17e4e:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
   17e52:	780c      	ldrb	r4, [r1, #0]
   17e54:	f8d1 1001 	ldr.w	r1, [r1, #1]
   17e58:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
   17e5c:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
   17e60:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
   17e64:	2101      	movs	r1, #1
   17e66:	4081      	lsls	r1, r0
   17e68:	430c      	orrs	r4, r1
   17e6a:	b2e4      	uxtb	r4, r4
   17e6c:	b132      	cbz	r2, 17e7c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
   17e6e:	2a01      	cmp	r2, #1
   17e70:	d00a      	beq.n	17e88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
   17e72:	f240 41ac 	movw	r1, #1196	; 0x4ac
   17e76:	203e      	movs	r0, #62	; 0x3e
   17e78:	f7f8 fdcc 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17e7c:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
   17e80:	f3c0 2007 	ubfx	r0, r0, #8, #8
   17e84:	4388      	bics	r0, r1
   17e86:	e004      	b.n	17e92 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
   17e88:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
   17e8c:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
   17e90:	b2c0      	uxtb	r0, r0
   17e92:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   17e96:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   17e9a:	bd70      	pop	{r4, r5, r6, pc}
   17e9c:	40001000 	.word	0x40001000

00017ea0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
   17ea0:	4901      	ldr	r1, [pc, #4]	; (17ea8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
   17ea2:	2001      	movs	r0, #1
   17ea4:	7008      	strb	r0, [r1, #0]
   17ea6:	4770      	bx	lr
   17ea8:	20000274 	.word	0x20000274
   17eac:	b510      	push	{r4, lr}
   17eae:	4604      	mov	r4, r0
   17eb0:	f000 fdfb 	bl	18aaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   17eb4:	2800      	cmp	r0, #0
   17eb6:	d00e      	beq.n	17ed6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
   17eb8:	4a09      	ldr	r2, [pc, #36]	; (17ee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
   17eba:	6811      	ldr	r1, [r2, #0]
   17ebc:	0650      	lsls	r0, r2, #25
   17ebe:	2c02      	cmp	r4, #2
   17ec0:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
   17ec4:	d008      	beq.n	17ed8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
   17ec6:	f3c0 2006 	ubfx	r0, r0, #8, #7
   17eca:	bf00      	nop
   17ecc:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
   17ed0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   17ed4:	6010      	str	r0, [r2, #0]
   17ed6:	bd10      	pop	{r4, pc}
   17ed8:	f3c0 6006 	ubfx	r0, r0, #24, #7
   17edc:	e7f6      	b.n	17ecc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
   17ede:	0000      	.short	0x0000
   17ee0:	40001588 	.word	0x40001588
   17ee4:	4815      	ldr	r0, [pc, #84]	; (17f3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
   17ee6:	7d41      	ldrb	r1, [r0, #21]
   17ee8:	2925      	cmp	r1, #37	; 0x25
   17eea:	d00a      	beq.n	17f02 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
   17eec:	2926      	cmp	r1, #38	; 0x26
   17eee:	d00b      	beq.n	17f08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
   17ef0:	2927      	cmp	r1, #39	; 0x27
   17ef2:	d00c      	beq.n	17f0e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
   17ef4:	7d40      	ldrb	r0, [r0, #21]
   17ef6:	0040      	lsls	r0, r0, #1
   17ef8:	290a      	cmp	r1, #10
   17efa:	d80b      	bhi.n	17f14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
   17efc:	f600 1064 	addw	r0, r0, #2404	; 0x964
   17f00:	e00a      	b.n	17f18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
   17f02:	f640 1062 	movw	r0, #2402	; 0x962
   17f06:	e00f      	b.n	17f28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   17f08:	f640 107a 	movw	r0, #2426	; 0x97a
   17f0c:	e00c      	b.n	17f28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   17f0e:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
   17f12:	e009      	b.n	17f28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   17f14:	f600 1066 	addw	r0, r0, #2406	; 0x966
   17f18:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   17f1c:	d204      	bcs.n	17f28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   17f1e:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
   17f22:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   17f26:	e001      	b.n	17f2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
   17f28:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
   17f2c:	4a04      	ldr	r2, [pc, #16]	; (17f40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
   17f2e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
   17f32:	f001 007f 	and.w	r0, r1, #127	; 0x7f
   17f36:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
   17f3a:	4770      	bx	lr
   17f3c:	200013dc 	.word	0x200013dc
   17f40:	40001000 	.word	0x40001000
   17f44:	4912      	ldr	r1, [pc, #72]	; (17f90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
   17f46:	b508      	push	{r3, lr}
   17f48:	f991 2014 	ldrsb.w	r2, [r1, #20]
   17f4c:	7d49      	ldrb	r1, [r1, #21]
   17f4e:	2801      	cmp	r0, #1
   17f50:	d00a      	beq.n	17f68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
   17f52:	2802      	cmp	r0, #2
   17f54:	d00a      	beq.n	17f6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
   17f56:	2804      	cmp	r0, #4
   17f58:	d00a      	beq.n	17f70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
   17f5a:	2808      	cmp	r0, #8
   17f5c:	d00a      	beq.n	17f74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
   17f5e:	f240 31ed 	movw	r1, #1005	; 0x3ed
   17f62:	2006      	movs	r0, #6
   17f64:	f7f8 fd56 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17f68:	2000      	movs	r0, #0
   17f6a:	e004      	b.n	17f76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
   17f6c:	2001      	movs	r0, #1
   17f6e:	e002      	b.n	17f76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
   17f70:	2003      	movs	r0, #3
   17f72:	e000      	b.n	17f76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
   17f74:	2002      	movs	r0, #2
   17f76:	466b      	mov	r3, sp
   17f78:	f7f5 f820 	bl	cfbc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
   17f7c:	b118      	cbz	r0, 17f86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
   17f7e:	f240 41de 	movw	r1, #1246	; 0x4de
   17f82:	203e      	movs	r0, #62	; 0x3e
   17f84:	e7ee      	b.n	17f64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
   17f86:	f99d 0000 	ldrsb.w	r0, [sp]
   17f8a:	f000 f9eb 	bl	18364 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   17f8e:	bd08      	pop	{r3, pc}
   17f90:	200013dc 	.word	0x200013dc
   17f94:	4803      	ldr	r0, [pc, #12]	; (17fa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
   17f96:	7a01      	ldrb	r1, [r0, #8]
   17f98:	2901      	cmp	r1, #1
   17f9a:	d102      	bne.n	17fa2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
   17f9c:	7a80      	ldrb	r0, [r0, #10]
   17f9e:	f7ff bfd1 	b.w	17f44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   17fa2:	4770      	bx	lr
   17fa4:	200013dc 	.word	0x200013dc
   17fa8:	4805      	ldr	r0, [pc, #20]	; (17fc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
   17faa:	7a40      	ldrb	r0, [r0, #9]
   17fac:	2801      	cmp	r0, #1
   17fae:	d003      	beq.n	17fb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
   17fb0:	2802      	cmp	r0, #2
   17fb2:	d103      	bne.n	17fbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
   17fb4:	f004 bc00 	b.w	1c7b8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
   17fb8:	f004 bc0a 	b.w	1c7d0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
   17fbc:	4770      	bx	lr
   17fbe:	0000      	.short	0x0000
   17fc0:	200013dc 	.word	0x200013dc
   17fc4:	4807      	ldr	r0, [pc, #28]	; (17fe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
   17fc6:	2100      	movs	r1, #0
   17fc8:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   17fcc:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
   17fd0:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
   17fd4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   17fd8:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   17fdc:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
   17fe0:	4770      	bx	lr
   17fe2:	0000      	.short	0x0000
   17fe4:	40001000 	.word	0x40001000
   17fe8:	4818      	ldr	r0, [pc, #96]	; (1804c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
   17fea:	b510      	push	{r4, lr}
   17fec:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
   17ff0:	07c1      	lsls	r1, r0, #31
   17ff2:	d029      	beq.n	18048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   17ff4:	0781      	lsls	r1, r0, #30
   17ff6:	d514      	bpl.n	18022 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
   17ff8:	4815      	ldr	r0, [pc, #84]	; (18050 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
   17ffa:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   17ffe:	f041 0101 	orr.w	r1, r1, #1
   18002:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   18006:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   1800a:	b2c0      	uxtb	r0, r0
   1800c:	280b      	cmp	r0, #11
   1800e:	d005      	beq.n	1801c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
   18010:	280a      	cmp	r0, #10
   18012:	d003      	beq.n	1801c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
   18014:	2803      	cmp	r0, #3
   18016:	d001      	beq.n	1801c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
   18018:	2802      	cmp	r0, #2
   1801a:	d115      	bne.n	18048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   1801c:	f240 510f 	movw	r1, #1295	; 0x50f
   18020:	e00f      	b.n	18042 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
   18022:	0740      	lsls	r0, r0, #29
   18024:	d510      	bpl.n	18048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   18026:	480a      	ldr	r0, [pc, #40]	; (18050 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
   18028:	490a      	ldr	r1, [pc, #40]	; (18054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
   1802a:	3008      	adds	r0, #8
   1802c:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   18030:	f44f 71a0 	mov.w	r1, #320	; 0x140
   18034:	4808      	ldr	r0, [pc, #32]	; (18058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
   18036:	f004 fc5e 	bl	1c8f6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
   1803a:	2800      	cmp	r0, #0
   1803c:	d004      	beq.n	18048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   1803e:	f240 5117 	movw	r1, #1303	; 0x517
   18042:	203e      	movs	r0, #62	; 0x3e
   18044:	f7f8 fce6 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18048:	bd10      	pop	{r4, pc}
   1804a:	0000      	.short	0x0000
   1804c:	200013dc 	.word	0x200013dc
   18050:	40001000 	.word	0x40001000
   18054:	4001f098 	.word	0x4001f098
   18058:	40008000 	.word	0x40008000
   1805c:	4808      	ldr	r0, [pc, #32]	; (18080 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
   1805e:	4601      	mov	r1, r0
   18060:	79c2      	ldrb	r2, [r0, #7]
   18062:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
   18066:	b112      	cbz	r2, 1806e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
   18068:	2a01      	cmp	r2, #1
   1806a:	d003      	beq.n	18074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
   1806c:	e006      	b.n	1807c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
   1806e:	f041 0102 	orr.w	r1, r1, #2
   18072:	e001      	b.n	18078 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
   18074:	f041 0104 	orr.w	r1, r1, #4
   18078:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
   1807c:	f7ff bfb4 	b.w	17fe8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
   18080:	200013dc 	.word	0x200013dc
   18084:	b510      	push	{r4, lr}
   18086:	f000 fd10 	bl	18aaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   1808a:	2800      	cmp	r0, #0
   1808c:	d108      	bne.n	180a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
   1808e:	f000 fcfc 	bl	18a8a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   18092:	2800      	cmp	r0, #0
   18094:	d104      	bne.n	180a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
   18096:	4803      	ldr	r0, [pc, #12]	; (180a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
   18098:	6801      	ldr	r1, [r0, #0]
   1809a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
   1809e:	6001      	str	r1, [r0, #0]
   180a0:	bd10      	pop	{r4, pc}
   180a2:	0000      	.short	0x0000
   180a4:	40001568 	.word	0x40001568
   180a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   180ac:	4d35      	ldr	r5, [pc, #212]	; (18184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
   180ae:	2400      	movs	r4, #0
   180b0:	7b28      	ldrb	r0, [r5, #12]
   180b2:	b138      	cbz	r0, 180c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
   180b4:	f44f 71a2 	mov.w	r1, #324	; 0x144
   180b8:	4833      	ldr	r0, [pc, #204]	; (18188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
   180ba:	f004 fc1c 	bl	1c8f6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
   180be:	b108      	cbz	r0, 180c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
   180c0:	2601      	movs	r6, #1
   180c2:	e000      	b.n	180c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
   180c4:	2600      	movs	r6, #0
   180c6:	7a68      	ldrb	r0, [r5, #9]
   180c8:	4f30      	ldr	r7, [pc, #192]	; (1818c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
   180ca:	f44f 7186 	mov.w	r1, #268	; 0x10c
   180ce:	2801      	cmp	r0, #1
   180d0:	d002      	beq.n	180d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
   180d2:	2802      	cmp	r0, #2
   180d4:	d008      	beq.n	180e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
   180d6:	e018      	b.n	1810a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
   180d8:	4638      	mov	r0, r7
   180da:	f004 fc07 	bl	1c8ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   180de:	b108      	cbz	r0, 180e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
   180e0:	2408      	movs	r4, #8
   180e2:	e012      	b.n	1810a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
   180e4:	2400      	movs	r4, #0
   180e6:	e010      	b.n	1810a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
   180e8:	4638      	mov	r0, r7
   180ea:	f004 fbff 	bl	1c8ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   180ee:	b100      	cbz	r0, 180f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
   180f0:	2002      	movs	r0, #2
   180f2:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
   180f6:	43c9      	mvns	r1, r1
   180f8:	f341 0100 	sbfx	r1, r1, #0, #1
   180fc:	1c49      	adds	r1, r1, #1
   180fe:	d001      	beq.n	18104 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
   18100:	2400      	movs	r4, #0
   18102:	e000      	b.n	18106 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
   18104:	2404      	movs	r4, #4
   18106:	4304      	orrs	r4, r0
   18108:	4334      	orrs	r4, r6
   1810a:	f014 0f0b 	tst.w	r4, #11
   1810e:	d107      	bne.n	18120 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
   18110:	f44f 7188 	mov.w	r1, #272	; 0x110
   18114:	4638      	mov	r0, r7
   18116:	f004 fbe9 	bl	1c8ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   1811a:	b100      	cbz	r0, 1811e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
   1811c:	2010      	movs	r0, #16
   1811e:	4304      	orrs	r4, r0
   18120:	481b      	ldr	r0, [pc, #108]	; (18190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
   18122:	7800      	ldrb	r0, [r0, #0]
   18124:	b1f8      	cbz	r0, 18166 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
   18126:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
   1812a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   1812e:	d007      	beq.n	18140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
   18130:	f44f 718a 	mov.w	r1, #276	; 0x114
   18134:	4638      	mov	r0, r7
   18136:	f004 fbd9 	bl	1c8ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   1813a:	b108      	cbz	r0, 18140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
   1813c:	2001      	movs	r0, #1
   1813e:	e000      	b.n	18142 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
   18140:	2000      	movs	r0, #0
   18142:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
   18146:	b13e      	cbz	r6, 18158 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
   18148:	f44f 718c 	mov.w	r1, #280	; 0x118
   1814c:	4638      	mov	r0, r7
   1814e:	f004 fbcd 	bl	1c8ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   18152:	b108      	cbz	r0, 18158 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
   18154:	2001      	movs	r0, #1
   18156:	e000      	b.n	1815a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
   18158:	2000      	movs	r0, #0
   1815a:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
   1815e:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
   18162:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
   18166:	f7ff ff2d 	bl	17fc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
   1816a:	06e0      	lsls	r0, r4, #27
   1816c:	d506      	bpl.n	1817c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
   1816e:	0720      	lsls	r0, r4, #28
   18170:	d404      	bmi.n	1817c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
   18172:	7a68      	ldrb	r0, [r5, #9]
   18174:	2801      	cmp	r0, #1
   18176:	d101      	bne.n	1817c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
   18178:	f044 0420 	orr.w	r4, r4, #32
   1817c:	4620      	mov	r0, r4
   1817e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18182:	0000      	.short	0x0000
   18184:	200013dc 	.word	0x200013dc
   18188:	40008000 	.word	0x40008000
   1818c:	40001000 	.word	0x40001000
   18190:	20000274 	.word	0x20000274
   18194:	4809      	ldr	r0, [pc, #36]	; (181bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
   18196:	b510      	push	{r4, lr}
   18198:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
   1819c:	f000 000f 	and.w	r0, r0, #15
   181a0:	2803      	cmp	r0, #3
   181a2:	d006      	beq.n	181b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
   181a4:	2804      	cmp	r0, #4
   181a6:	d006      	beq.n	181b6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
   181a8:	f240 11dd 	movw	r1, #477	; 0x1dd
   181ac:	203e      	movs	r0, #62	; 0x3e
   181ae:	f7f8 fc31 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   181b2:	2001      	movs	r0, #1
   181b4:	bd10      	pop	{r4, pc}
   181b6:	2002      	movs	r0, #2
   181b8:	bd10      	pop	{r4, pc}
   181ba:	0000      	.short	0x0000
   181bc:	40001000 	.word	0x40001000
   181c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181c4:	4c19      	ldr	r4, [pc, #100]	; (1822c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
   181c6:	460d      	mov	r5, r1
   181c8:	7a21      	ldrb	r1, [r4, #8]
   181ca:	b129      	cbz	r1, 181d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
   181cc:	f010 0f11 	tst.w	r0, #17
   181d0:	d00b      	beq.n	181ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
   181d2:	f7ff f9d5 	bl	17580 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   181d6:	e027      	b.n	18228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
   181d8:	4915      	ldr	r1, [pc, #84]	; (18230 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
   181da:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
   181de:	6008      	str	r0, [r1, #0]
   181e0:	f000 f862 	bl	182a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   181e4:	2000      	movs	r0, #0
   181e6:	7320      	strb	r0, [r4, #12]
   181e8:	e01e      	b.n	18228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
   181ea:	2901      	cmp	r1, #1
   181ec:	d001      	beq.n	181f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
   181ee:	2601      	movs	r6, #1
   181f0:	e000      	b.n	181f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
   181f2:	2600      	movs	r6, #0
   181f4:	79e0      	ldrb	r0, [r4, #7]
   181f6:	2801      	cmp	r0, #1
   181f8:	d00e      	beq.n	18218 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
   181fa:	2700      	movs	r7, #0
   181fc:	f000 f854 	bl	182a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   18200:	2196      	movs	r1, #150	; 0x96
   18202:	4630      	mov	r0, r6
   18204:	f000 f866 	bl	182d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
   18208:	4601      	mov	r1, r0
   1820a:	b14f      	cbz	r7, 18220 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
   1820c:	353b      	adds	r5, #59	; 0x3b
   1820e:	428d      	cmp	r5, r1
   18210:	d904      	bls.n	1821c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
   18212:	2000      	movs	r0, #0
   18214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18218:	2701      	movs	r7, #1
   1821a:	e7ef      	b.n	181fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
   1821c:	2001      	movs	r0, #1
   1821e:	71e0      	strb	r0, [r4, #7]
   18220:	7aa2      	ldrb	r2, [r4, #10]
   18222:	4630      	mov	r0, r6
   18224:	f7ff fc6a 	bl	17afc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   18228:	2001      	movs	r0, #1
   1822a:	e7f3      	b.n	18214 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
   1822c:	200013dc 	.word	0x200013dc
   18230:	4001f508 	.word	0x4001f508
   18234:	4805      	ldr	r0, [pc, #20]	; (1824c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
   18236:	2100      	movs	r1, #0
   18238:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
   1823c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   18240:	f441 7188 	orr.w	r1, r1, #272	; 0x110
   18244:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   18248:	4770      	bx	lr
   1824a:	0000      	.short	0x0000
   1824c:	40001000 	.word	0x40001000
   18250:	4804      	ldr	r0, [pc, #16]	; (18264 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
   18252:	6a81      	ldr	r1, [r0, #40]	; 0x28
   18254:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
   18258:	6281      	str	r1, [r0, #40]	; 0x28
   1825a:	4903      	ldr	r1, [pc, #12]	; (18268 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
   1825c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   18260:	6008      	str	r0, [r1, #0]
   18262:	4770      	bx	lr
   18264:	200013dc 	.word	0x200013dc
   18268:	4001f504 	.word	0x4001f504
   1826c:	4a07      	ldr	r2, [pc, #28]	; (1828c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
   1826e:	2000      	movs	r0, #0
   18270:	3208      	adds	r2, #8
   18272:	4906      	ldr	r1, [pc, #24]	; (1828c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
   18274:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   18278:	1d0a      	adds	r2, r1, #4
   1827a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   1827e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   18282:	4902      	ldr	r1, [pc, #8]	; (1828c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
   18284:	310c      	adds	r1, #12
   18286:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   1828a:	4770      	bx	lr
   1828c:	40008000 	.word	0x40008000
   18290:	4903      	ldr	r1, [pc, #12]	; (182a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
   18292:	79c9      	ldrb	r1, [r1, #7]
   18294:	2900      	cmp	r1, #0
   18296:	d102      	bne.n	1829e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
   18298:	4902      	ldr	r1, [pc, #8]	; (182a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
   1829a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   1829e:	4770      	bx	lr
   182a0:	200013dc 	.word	0x200013dc
   182a4:	4001f098 	.word	0x4001f098
   182a8:	4802      	ldr	r0, [pc, #8]	; (182b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
   182aa:	2100      	movs	r1, #0
   182ac:	71c1      	strb	r1, [r0, #7]
   182ae:	7201      	strb	r1, [r0, #8]
   182b0:	7241      	strb	r1, [r0, #9]
   182b2:	4770      	bx	lr
   182b4:	200013dc 	.word	0x200013dc
   182b8:	4a05      	ldr	r2, [pc, #20]	; (182d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
   182ba:	79d2      	ldrb	r2, [r2, #7]
   182bc:	2a01      	cmp	r2, #1
   182be:	d006      	beq.n	182ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
   182c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   182c4:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
   182c8:	fbb1 f1f2 	udiv	r1, r1, r2
   182cc:	1a40      	subs	r0, r0, r1
   182ce:	4770      	bx	lr
   182d0:	200013dc 	.word	0x200013dc
   182d4:	b570      	push	{r4, r5, r6, lr}
   182d6:	4c13      	ldr	r4, [pc, #76]	; (18324 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
   182d8:	4603      	mov	r3, r0
   182da:	460d      	mov	r5, r1
   182dc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   182e0:	2000      	movs	r0, #0
   182e2:	b15a      	cbz	r2, 182fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
   182e4:	4621      	mov	r1, r4
   182e6:	f891 1020 	ldrb.w	r1, [r1, #32]
   182ea:	b163      	cbz	r3, 18306 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
   182ec:	2b01      	cmp	r3, #1
   182ee:	d111      	bne.n	18314 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
   182f0:	2a01      	cmp	r2, #1
   182f2:	4628      	mov	r0, r5
   182f4:	d012      	beq.n	1831c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
   182f6:	f004 fb43 	bl	1c980 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
   182fa:	e009      	b.n	18310 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
   182fc:	f240 7152 	movw	r1, #1874	; 0x752
   18300:	203e      	movs	r0, #62	; 0x3e
   18302:	f7f8 fb87 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18306:	2a01      	cmp	r2, #1
   18308:	4628      	mov	r0, r5
   1830a:	d004      	beq.n	18316 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
   1830c:	f004 fb46 	bl	1c99c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
   18310:	69e1      	ldr	r1, [r4, #28]
   18312:	4408      	add	r0, r1
   18314:	bd70      	pop	{r4, r5, r6, pc}
   18316:	f004 fb5b 	bl	1c9d0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
   1831a:	e7f9      	b.n	18310 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
   1831c:	f004 fb49 	bl	1c9b2 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
   18320:	e7f6      	b.n	18310 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
   18322:	0000      	.short	0x0000
   18324:	200013dc 	.word	0x200013dc
   18328:	b510      	push	{r4, lr}
   1832a:	2200      	movs	r2, #0
   1832c:	2901      	cmp	r1, #1
   1832e:	d008      	beq.n	18342 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
   18330:	2902      	cmp	r1, #2
   18332:	d004      	beq.n	1833e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
   18334:	f240 2163 	movw	r1, #611	; 0x263
   18338:	203e      	movs	r0, #62	; 0x3e
   1833a:	f7f8 fb6b 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1833e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   18342:	4905      	ldr	r1, [pc, #20]	; (18358 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
   18344:	430a      	orrs	r2, r1
   18346:	4905      	ldr	r1, [pc, #20]	; (1835c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
   18348:	600a      	str	r2, [r1, #0]
   1834a:	4905      	ldr	r1, [pc, #20]	; (18360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
   1834c:	4308      	orrs	r0, r1
   1834e:	4903      	ldr	r1, [pc, #12]	; (1835c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
   18350:	1d09      	adds	r1, r1, #4
   18352:	6008      	str	r0, [r1, #0]
   18354:	bd10      	pop	{r4, pc}
   18356:	0000      	.short	0x0000
   18358:	00100108 	.word	0x00100108
   1835c:	40001514 	.word	0x40001514
   18360:	02030000 	.word	0x02030000

00018364 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
   18364:	4901      	ldr	r1, [pc, #4]	; (1836c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
   18366:	b2c0      	uxtb	r0, r0
   18368:	6008      	str	r0, [r1, #0]
   1836a:	4770      	bx	lr
   1836c:	4000150c 	.word	0x4000150c

00018370 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
   18370:	b510      	push	{r4, lr}
   18372:	4907      	ldr	r1, [pc, #28]	; (18390 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
   18374:	2801      	cmp	r0, #1
   18376:	d005      	beq.n	18384 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
   18378:	2802      	cmp	r0, #2
   1837a:	d005      	beq.n	18388 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
   1837c:	218b      	movs	r1, #139	; 0x8b
   1837e:	203f      	movs	r0, #63	; 0x3f
   18380:	f7f8 fb48 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18384:	2003      	movs	r0, #3
   18386:	e000      	b.n	1838a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
   18388:	2004      	movs	r0, #4
   1838a:	6008      	str	r0, [r1, #0]
   1838c:	bd10      	pop	{r4, pc}
   1838e:	0000      	.short	0x0000
   18390:	40001510 	.word	0x40001510

00018394 <strcmp>:
   18394:	f810 2b01 	ldrb.w	r2, [r0], #1
   18398:	f811 3b01 	ldrb.w	r3, [r1], #1
   1839c:	2a01      	cmp	r2, #1
   1839e:	bf28      	it	cs
   183a0:	429a      	cmpcs	r2, r3
   183a2:	d0f7      	beq.n	18394 <strcmp>
   183a4:	1ad0      	subs	r0, r2, r3
   183a6:	4770      	bx	lr

000183a8 <strlen>:
   183a8:	4603      	mov	r3, r0
   183aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   183ae:	2a00      	cmp	r2, #0
   183b0:	d1fb      	bne.n	183aa <strlen+0x2>
   183b2:	1a18      	subs	r0, r3, r0
   183b4:	3801      	subs	r0, #1
   183b6:	4770      	bx	lr

000183b8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
   183b8:	4770      	bx	lr
   183ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183be:	000d      	movs	r5, r1
   183c0:	4604      	mov	r4, r0
   183c2:	f04f 0602 	mov.w	r6, #2
   183c6:	f04f 0701 	mov.w	r7, #1
   183ca:	d008      	beq.n	183de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x26>
   183cc:	7828      	ldrb	r0, [r5, #0]
   183ce:	b1d0      	cbz	r0, 18406 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
   183d0:	2801      	cmp	r0, #1
   183d2:	d007      	beq.n	183e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c>
   183d4:	2802      	cmp	r0, #2
   183d6:	d014      	beq.n	18402 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   183d8:	2803      	cmp	r0, #3
   183da:	d13b      	bne.n	18454 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
   183dc:	e016      	b.n	1840c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x54>
   183de:	f880 7020 	strb.w	r7, [r0, #32]
   183e2:	e00e      	b.n	18402 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   183e4:	6868      	ldr	r0, [r5, #4]
   183e6:	28c8      	cmp	r0, #200	; 0xc8
   183e8:	d303      	bcc.n	183f2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3a>
   183ea:	2104      	movs	r1, #4
   183ec:	f7f5 fe10 	bl	e010 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   183f0:	b108      	cbz	r0, 183f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3e>
   183f2:	2600      	movs	r6, #0
   183f4:	e007      	b.n	18406 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
   183f6:	4620      	mov	r0, r4
   183f8:	6869      	ldr	r1, [r5, #4]
   183fa:	f000 f92a 	bl	18652 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
   183fe:	2601      	movs	r6, #1
   18400:	e001      	b.n	18406 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
   18402:	f7f4 fe23 	bl	d04c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x90>
   18406:	4630      	mov	r0, r6
   18408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1840c:	7820      	ldrb	r0, [r4, #0]
   1840e:	2800      	cmp	r0, #0
   18410:	d1f7      	bne.n	18402 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   18412:	6868      	ldr	r0, [r5, #4]
   18414:	f7f4 fdec 	bl	cff0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x34>
   18418:	b1e0      	cbz	r0, 18454 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
   1841a:	6869      	ldr	r1, [r5, #4]
   1841c:	7808      	ldrb	r0, [r1, #0]
   1841e:	b128      	cbz	r0, 1842c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x74>
   18420:	78a0      	ldrb	r0, [r4, #2]
   18422:	2805      	cmp	r0, #5
   18424:	d007      	beq.n	18436 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x7e>
   18426:	f240 1179 	movw	r1, #377	; 0x179
   1842a:	e010      	b.n	1844e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x96>
   1842c:	4620      	mov	r0, r4
   1842e:	f000 f918 	bl	18662 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
   18432:	7067      	strb	r7, [r4, #1]
   18434:	e7e5      	b.n	18402 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   18436:	4620      	mov	r0, r4
   18438:	f000 f92b 	bl	18692 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
   1843c:	78e0      	ldrb	r0, [r4, #3]
   1843e:	f104 010c 	add.w	r1, r4, #12
   18442:	f000 f80a 	bl	1845a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
   18446:	2800      	cmp	r0, #0
   18448:	d1db      	bne.n	18402 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   1844a:	f240 117b 	movw	r1, #379	; 0x17b
   1844e:	206a      	movs	r0, #106	; 0x6a
   18450:	f7f8 f834 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   18454:	f884 7020 	strb.w	r7, [r4, #32]
   18458:	e7d3      	b.n	18402 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   1845a:	f7f6 b825 	b.w	e4a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   1845e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18462:	460d      	mov	r5, r1
   18464:	0004      	movs	r4, r0
   18466:	d00b      	beq.n	18480 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xc8>
   18468:	7926      	ldrb	r6, [r4, #4]
   1846a:	2700      	movs	r7, #0
   1846c:	2002      	movs	r0, #2
   1846e:	2d09      	cmp	r5, #9
   18470:	d27b      	bcs.n	1856a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b2>
   18472:	e8df f005 	tbb	[pc, r5]
   18476:	1008      	.short	0x1008
   18478:	645b2e2e 	.word	0x645b2e2e
   1847c:	0086977c 	.word	0x0086977c
   18480:	f240 1193 	movw	r1, #403	; 0x193
   18484:	e0e2      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18486:	78a0      	ldrb	r0, [r4, #2]
   18488:	2804      	cmp	r0, #4
   1848a:	d06f      	beq.n	1856c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b4>
   1848c:	2803      	cmp	r0, #3
   1848e:	d0fc      	beq.n	1848a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xd2>
   18490:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   18494:	e0da      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18496:	78a0      	ldrb	r0, [r4, #2]
   18498:	2804      	cmp	r0, #4
   1849a:	d004      	beq.n	184a6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
   1849c:	2803      	cmp	r0, #3
   1849e:	d002      	beq.n	184a6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
   184a0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
   184a4:	e0d2      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   184a6:	2005      	movs	r0, #5
   184a8:	70a0      	strb	r0, [r4, #2]
   184aa:	f884 7020 	strb.w	r7, [r4, #32]
   184ae:	7820      	ldrb	r0, [r4, #0]
   184b0:	bb80      	cbnz	r0, 18514 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15c>
   184b2:	2100      	movs	r1, #0
   184b4:	4620      	mov	r0, r4
   184b6:	f000 f8cc 	bl	18652 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
   184ba:	7b20      	ldrb	r0, [r4, #12]
   184bc:	2801      	cmp	r0, #1
   184be:	d004      	beq.n	184ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x112>
   184c0:	69a0      	ldr	r0, [r4, #24]
   184c2:	61e0      	str	r0, [r4, #28]
   184c4:	2100      	movs	r1, #0
   184c6:	68a2      	ldr	r2, [r4, #8]
   184c8:	e041      	b.n	1854e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   184ca:	78e0      	ldrb	r0, [r4, #3]
   184cc:	f7f5 fec8 	bl	e260 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
   184d0:	e7f7      	b.n	184c2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x10a>
   184d2:	78a1      	ldrb	r1, [r4, #2]
   184d4:	2904      	cmp	r1, #4
   184d6:	d004      	beq.n	184e2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
   184d8:	2903      	cmp	r1, #3
   184da:	d002      	beq.n	184e2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
   184dc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   184e0:	e0b4      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   184e2:	7822      	ldrb	r2, [r4, #0]
   184e4:	b122      	cbz	r2, 184f0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x138>
   184e6:	4621      	mov	r1, r4
   184e8:	4630      	mov	r0, r6
   184ea:	f000 f8ee 	bl	186ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
   184ee:	e0a4      	b.n	1863a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
   184f0:	2904      	cmp	r1, #4
   184f2:	d000      	beq.n	184f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x13e>
   184f4:	2001      	movs	r0, #1
   184f6:	70a0      	strb	r0, [r4, #2]
   184f8:	68a2      	ldr	r2, [r4, #8]
   184fa:	2d02      	cmp	r5, #2
   184fc:	d00b      	beq.n	18516 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15e>
   184fe:	2106      	movs	r1, #6
   18500:	4630      	mov	r0, r6
   18502:	4790      	blx	r2
   18504:	2800      	cmp	r0, #0
   18506:	d06b      	beq.n	185e0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
   18508:	7800      	ldrb	r0, [r0, #0]
   1850a:	2800      	cmp	r0, #0
   1850c:	d068      	beq.n	185e0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
   1850e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
   18512:	e09b      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18514:	e031      	b.n	1857a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
   18516:	2105      	movs	r1, #5
   18518:	4630      	mov	r0, r6
   1851a:	4790      	blx	r2
   1851c:	2800      	cmp	r0, #0
   1851e:	d071      	beq.n	18604 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   18520:	7800      	ldrb	r0, [r0, #0]
   18522:	2800      	cmp	r0, #0
   18524:	d06e      	beq.n	18604 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   18526:	f240 11d5 	movw	r1, #469	; 0x1d5
   1852a:	e08f      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1852c:	78a0      	ldrb	r0, [r4, #2]
   1852e:	2805      	cmp	r0, #5
   18530:	d002      	beq.n	18538 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x180>
   18532:	f240 11e1 	movw	r1, #481	; 0x1e1
   18536:	e089      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18538:	2102      	movs	r1, #2
   1853a:	68a2      	ldr	r2, [r4, #8]
   1853c:	e007      	b.n	1854e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   1853e:	78a0      	ldrb	r0, [r4, #2]
   18540:	2805      	cmp	r0, #5
   18542:	d002      	beq.n	1854a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x192>
   18544:	f240 11e7 	movw	r1, #487	; 0x1e7
   18548:	e080      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1854a:	68a2      	ldr	r2, [r4, #8]
   1854c:	2101      	movs	r1, #1
   1854e:	4630      	mov	r0, r6
   18550:	4790      	blx	r2
   18552:	4601      	mov	r1, r0
   18554:	4620      	mov	r0, r4
   18556:	f7ff ff30 	bl	183ba <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
   1855a:	2802      	cmp	r0, #2
   1855c:	d06d      	beq.n	1863a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
   1855e:	b3f0      	cbz	r0, 185de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x226>
   18560:	2801      	cmp	r0, #1
   18562:	d064      	beq.n	1862e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x276>
   18564:	f240 2127 	movw	r1, #551	; 0x227
   18568:	e070      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1856a:	e05d      	b.n	18628 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x270>
   1856c:	e067      	b.n	1863e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x286>
   1856e:	78a0      	ldrb	r0, [r4, #2]
   18570:	2805      	cmp	r0, #5
   18572:	d002      	beq.n	1857a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
   18574:	f240 11ed 	movw	r1, #493	; 0x1ed
   18578:	e068      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1857a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1857e:	f7f4 bd65 	b.w	d04c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x90>
   18582:	78a0      	ldrb	r0, [r4, #2]
   18584:	2805      	cmp	r0, #5
   18586:	d002      	beq.n	1858e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1d6>
   18588:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   1858c:	e05e      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1858e:	68a2      	ldr	r2, [r4, #8]
   18590:	210a      	movs	r1, #10
   18592:	4630      	mov	r0, r6
   18594:	4790      	blx	r2
   18596:	4601      	mov	r1, r0
   18598:	4620      	mov	r0, r4
   1859a:	f7ff ff0e 	bl	183ba <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
   1859e:	f240 11f5 	movw	r1, #501	; 0x1f5
   185a2:	e053      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   185a4:	78a1      	ldrb	r1, [r4, #2]
   185a6:	2905      	cmp	r1, #5
   185a8:	d006      	beq.n	185b8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
   185aa:	7862      	ldrb	r2, [r4, #1]
   185ac:	b10a      	cbz	r2, 185b2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1fa>
   185ae:	2903      	cmp	r1, #3
   185b0:	d002      	beq.n	185b8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
   185b2:	f240 11f9 	movw	r1, #505	; 0x1f9
   185b6:	e049      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   185b8:	7821      	ldrb	r1, [r4, #0]
   185ba:	b129      	cbz	r1, 185c8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x210>
   185bc:	4621      	mov	r1, r4
   185be:	4630      	mov	r0, r6
   185c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   185c4:	f000 b881 	b.w	186ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
   185c8:	f894 1020 	ldrb.w	r1, [r4, #32]
   185cc:	b189      	cbz	r1, 185f2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x23a>
   185ce:	f884 7020 	strb.w	r7, [r4, #32]
   185d2:	70a0      	strb	r0, [r4, #2]
   185d4:	68a2      	ldr	r2, [r4, #8]
   185d6:	2108      	movs	r1, #8
   185d8:	4630      	mov	r0, r6
   185da:	4790      	blx	r2
   185dc:	e001      	b.n	185e2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x22a>
   185de:	e029      	b.n	18634 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x27c>
   185e0:	e02b      	b.n	1863a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
   185e2:	2800      	cmp	r0, #0
   185e4:	d00e      	beq.n	18604 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   185e6:	7800      	ldrb	r0, [r0, #0]
   185e8:	2800      	cmp	r0, #0
   185ea:	d00b      	beq.n	18604 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   185ec:	f240 2105 	movw	r1, #517	; 0x205
   185f0:	e02c      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   185f2:	7861      	ldrb	r1, [r4, #1]
   185f4:	b159      	cbz	r1, 1860e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x256>
   185f6:	78e0      	ldrb	r0, [r4, #3]
   185f8:	f104 010c 	add.w	r1, r4, #12
   185fc:	f7ff ff2d 	bl	1845a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
   18600:	b110      	cbz	r0, 18608 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x250>
   18602:	7067      	strb	r7, [r4, #1]
   18604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18608:	f240 2109 	movw	r1, #521	; 0x209
   1860c:	e01e      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1860e:	70a0      	strb	r0, [r4, #2]
   18610:	68a2      	ldr	r2, [r4, #8]
   18612:	2107      	movs	r1, #7
   18614:	4630      	mov	r0, r6
   18616:	4790      	blx	r2
   18618:	2800      	cmp	r0, #0
   1861a:	d0f3      	beq.n	18604 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   1861c:	7800      	ldrb	r0, [r0, #0]
   1861e:	2800      	cmp	r0, #0
   18620:	d0f0      	beq.n	18604 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   18622:	f240 2111 	movw	r1, #529	; 0x211
   18626:	e011      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18628:	f240 2116 	movw	r1, #534	; 0x216
   1862c:	e00e      	b.n	1864c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1862e:	2104      	movs	r1, #4
   18630:	68a2      	ldr	r2, [r4, #8]
   18632:	e78c      	b.n	1854e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   18634:	2103      	movs	r1, #3
   18636:	68a2      	ldr	r2, [r4, #8]
   18638:	e789      	b.n	1854e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   1863a:	2d00      	cmp	r5, #0
   1863c:	d1e2      	bne.n	18604 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   1863e:	f000 f8f2 	bl	18826 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
   18642:	6800      	ldr	r0, [r0, #0]
   18644:	2800      	cmp	r0, #0
   18646:	d0dd      	beq.n	18604 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   18648:	f240 2131 	movw	r1, #561	; 0x231
   1864c:	206a      	movs	r0, #106	; 0x6a
   1864e:	f7f7 ff35 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   18652:	4602      	mov	r2, r0
   18654:	7b03      	ldrb	r3, [r0, #12]
   18656:	6900      	ldr	r0, [r0, #16]
   18658:	4408      	add	r0, r1
   1865a:	6110      	str	r0, [r2, #16]
   1865c:	3859      	subs	r0, #89	; 0x59
   1865e:	f7f6 bdb7 	b.w	f1d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   18662:	2201      	movs	r2, #1
   18664:	7302      	strb	r2, [r0, #12]
   18666:	2200      	movs	r2, #0
   18668:	75c2      	strb	r2, [r0, #23]
   1866a:	790a      	ldrb	r2, [r1, #4]
   1866c:	b16a      	cbz	r2, 1868a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
   1866e:	2200      	movs	r2, #0
   18670:	8282      	strh	r2, [r0, #20]
   18672:	794a      	ldrb	r2, [r1, #5]
   18674:	b15a      	cbz	r2, 1868e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d6>
   18676:	2204      	movs	r2, #4
   18678:	7582      	strb	r2, [r0, #22]
   1867a:	688a      	ldr	r2, [r1, #8]
   1867c:	326a      	adds	r2, #106	; 0x6a
   1867e:	6102      	str	r2, [r0, #16]
   18680:	68c9      	ldr	r1, [r1, #12]
   18682:	6181      	str	r1, [r0, #24]
   18684:	2103      	movs	r1, #3
   18686:	7081      	strb	r1, [r0, #2]
   18688:	4770      	bx	lr
   1868a:	222b      	movs	r2, #43	; 0x2b
   1868c:	e7f0      	b.n	18670 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2b8>
   1868e:	2203      	movs	r2, #3
   18690:	e7f2      	b.n	18678 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c0>
   18692:	b510      	push	{r4, lr}
   18694:	4604      	mov	r4, r0
   18696:	2000      	movs	r0, #0
   18698:	7320      	strb	r0, [r4, #12]
   1869a:	75e0      	strb	r0, [r4, #23]
   1869c:	7908      	ldrb	r0, [r1, #4]
   1869e:	b180      	cbz	r0, 186c2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30a>
   186a0:	2000      	movs	r0, #0
   186a2:	82a0      	strh	r0, [r4, #20]
   186a4:	7948      	ldrb	r0, [r1, #5]
   186a6:	b170      	cbz	r0, 186c6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30e>
   186a8:	2004      	movs	r0, #4
   186aa:	75a0      	strb	r0, [r4, #22]
   186ac:	68c8      	ldr	r0, [r1, #12]
   186ae:	306a      	adds	r0, #106	; 0x6a
   186b0:	6120      	str	r0, [r4, #16]
   186b2:	6889      	ldr	r1, [r1, #8]
   186b4:	69e0      	ldr	r0, [r4, #28]
   186b6:	f7f5 fd7d 	bl	e1b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   186ba:	61a0      	str	r0, [r4, #24]
   186bc:	2004      	movs	r0, #4
   186be:	70a0      	strb	r0, [r4, #2]
   186c0:	bd10      	pop	{r4, pc}
   186c2:	202b      	movs	r0, #43	; 0x2b
   186c4:	e7ed      	b.n	186a2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2ea>
   186c6:	2003      	movs	r0, #3
   186c8:	e7ef      	b.n	186aa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2f2>
   186ca:	b570      	push	{r4, r5, r6, lr}
   186cc:	4605      	mov	r5, r0
   186ce:	460c      	mov	r4, r1
   186d0:	78c8      	ldrb	r0, [r1, #3]
   186d2:	f7f6 fb45 	bl	ed60 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   186d6:	b178      	cbz	r0, 186f8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x340>
   186d8:	4620      	mov	r0, r4
   186da:	f000 f810 	bl	186fe <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
   186de:	68a2      	ldr	r2, [r4, #8]
   186e0:	2109      	movs	r1, #9
   186e2:	4628      	mov	r0, r5
   186e4:	4790      	blx	r2
   186e6:	2800      	cmp	r0, #0
   186e8:	d008      	beq.n	186fc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
   186ea:	7800      	ldrb	r0, [r0, #0]
   186ec:	2800      	cmp	r0, #0
   186ee:	d005      	beq.n	186fc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
   186f0:	21db      	movs	r1, #219	; 0xdb
   186f2:	206a      	movs	r0, #106	; 0x6a
   186f4:	f7f7 fee2 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   186f8:	21d7      	movs	r1, #215	; 0xd7
   186fa:	e7fa      	b.n	186f2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x33a>
   186fc:	bd70      	pop	{r4, r5, r6, pc}
   186fe:	2100      	movs	r1, #0
   18700:	7081      	strb	r1, [r0, #2]
   18702:	7001      	strb	r1, [r0, #0]
   18704:	7041      	strb	r1, [r0, #1]
   18706:	4770      	bx	lr

00018708 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   18708:	b570      	push	{r4, r5, r6, lr}
   1870a:	f7f4 fcf9 	bl	d100 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   1870e:	4605      	mov	r5, r0
   18710:	2400      	movs	r4, #0
   18712:	e006      	b.n	18722 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   18714:	4620      	mov	r0, r4
   18716:	f7f4 fcf9 	bl	d10c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   1871a:	f7ff fff0 	bl	186fe <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
   1871e:	1c64      	adds	r4, r4, #1
   18720:	b2e4      	uxtb	r4, r4
   18722:	42ac      	cmp	r4, r5
   18724:	d3f6      	bcc.n	18714 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   18726:	bd70      	pop	{r4, r5, r6, pc}

00018728 <mpsl_timeslot_request>:
   18728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1872c:	460d      	mov	r5, r1
   1872e:	f7f4 fced 	bl	d10c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   18732:	0004      	movs	r4, r0
   18734:	d007      	beq.n	18746 <mpsl_timeslot_request+0x1e>
   18736:	78a0      	ldrb	r0, [r4, #2]
   18738:	f06f 0622 	mvn.w	r6, #34	; 0x22
   1873c:	2801      	cmp	r0, #1
   1873e:	d006      	beq.n	1874e <mpsl_timeslot_request+0x26>
   18740:	2802      	cmp	r0, #2
   18742:	d110      	bne.n	18766 <mpsl_timeslot_request+0x3e>
   18744:	e003      	b.n	1874e <mpsl_timeslot_request+0x26>
   18746:	f06f 0001 	mvn.w	r0, #1
   1874a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1874e:	f06f 0715 	mvn.w	r7, #21
   18752:	b155      	cbz	r5, 1876a <mpsl_timeslot_request+0x42>
   18754:	4628      	mov	r0, r5
   18756:	f7f4 fc4b 	bl	cff0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x34>
   1875a:	b130      	cbz	r0, 1876a <mpsl_timeslot_request+0x42>
   1875c:	7828      	ldrb	r0, [r5, #0]
   1875e:	b130      	cbz	r0, 1876e <mpsl_timeslot_request+0x46>
   18760:	78a0      	ldrb	r0, [r4, #2]
   18762:	2802      	cmp	r0, #2
   18764:	d008      	beq.n	18778 <mpsl_timeslot_request+0x50>
   18766:	4630      	mov	r0, r6
   18768:	e7ef      	b.n	1874a <mpsl_timeslot_request+0x22>
   1876a:	4638      	mov	r0, r7
   1876c:	e7ed      	b.n	1874a <mpsl_timeslot_request+0x22>
   1876e:	4629      	mov	r1, r5
   18770:	4620      	mov	r0, r4
   18772:	f7ff ff76 	bl	18662 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
   18776:	e003      	b.n	18780 <mpsl_timeslot_request+0x58>
   18778:	4629      	mov	r1, r5
   1877a:	4620      	mov	r0, r4
   1877c:	f7ff ff89 	bl	18692 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
   18780:	78e0      	ldrb	r0, [r4, #3]
   18782:	f104 010c 	add.w	r1, r4, #12
   18786:	f7ff fe68 	bl	1845a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
   1878a:	b108      	cbz	r0, 18790 <mpsl_timeslot_request+0x68>
   1878c:	2000      	movs	r0, #0
   1878e:	e7dc      	b.n	1874a <mpsl_timeslot_request+0x22>
   18790:	f44f 712b 	mov.w	r1, #684	; 0x2ac
   18794:	206a      	movs	r0, #106	; 0x6a
   18796:	f7f7 fe91 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0001879a <mpsl_timeslot_session_close>:
   1879a:	b510      	push	{r4, lr}
   1879c:	4604      	mov	r4, r0
   1879e:	f7f4 fcb5 	bl	d10c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   187a2:	0001      	movs	r1, r0
   187a4:	d004      	beq.n	187b0 <mpsl_timeslot_session_close+0x16>
   187a6:	7808      	ldrb	r0, [r1, #0]
   187a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
   187ac:	b968      	cbnz	r0, 187ca <mpsl_timeslot_session_close+0x30>
   187ae:	e002      	b.n	187b6 <mpsl_timeslot_session_close+0x1c>
   187b0:	f06f 0001 	mvn.w	r0, #1
   187b4:	bd10      	pop	{r4, pc}
   187b6:	7888      	ldrb	r0, [r1, #2]
   187b8:	b138      	cbz	r0, 187ca <mpsl_timeslot_session_close+0x30>
   187ba:	2802      	cmp	r0, #2
   187bc:	d007      	beq.n	187ce <mpsl_timeslot_session_close+0x34>
   187be:	2801      	cmp	r0, #1
   187c0:	d005      	beq.n	187ce <mpsl_timeslot_session_close+0x34>
   187c2:	2001      	movs	r0, #1
   187c4:	7008      	strb	r0, [r1, #0]
   187c6:	2000      	movs	r0, #0
   187c8:	bd10      	pop	{r4, pc}
   187ca:	4610      	mov	r0, r2
   187cc:	bd10      	pop	{r4, pc}
   187ce:	4620      	mov	r0, r4
   187d0:	f7ff ff7b 	bl	186ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
   187d4:	e7f7      	b.n	187c6 <mpsl_timeslot_session_close+0x2c>

000187d6 <mpsl_timeslot_session_count_set>:
   187d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187da:	460e      	mov	r6, r1
   187dc:	4607      	mov	r7, r0
   187de:	f7f4 fc8f 	bl	d100 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   187e2:	4605      	mov	r5, r0
   187e4:	2400      	movs	r4, #0
   187e6:	e00a      	b.n	187fe <mpsl_timeslot_session_count_set+0x28>
   187e8:	4620      	mov	r0, r4
   187ea:	f7f4 fc8f 	bl	d10c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   187ee:	7880      	ldrb	r0, [r0, #2]
   187f0:	b118      	cbz	r0, 187fa <mpsl_timeslot_session_count_set+0x24>
   187f2:	f04f 30ff 	mov.w	r0, #4294967295
   187f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   187fa:	1c64      	adds	r4, r4, #1
   187fc:	b2e4      	uxtb	r4, r4
   187fe:	42ac      	cmp	r4, r5
   18800:	d3f2      	bcc.n	187e8 <mpsl_timeslot_session_count_set+0x12>
   18802:	2e08      	cmp	r6, #8
   18804:	d902      	bls.n	1880c <mpsl_timeslot_session_count_set+0x36>
   18806:	f06f 0015 	mvn.w	r0, #21
   1880a:	e7f4      	b.n	187f6 <mpsl_timeslot_session_count_set+0x20>
   1880c:	b117      	cbz	r7, 18814 <mpsl_timeslot_session_count_set+0x3e>
   1880e:	4631      	mov	r1, r6
   18810:	4638      	mov	r0, r7
   18812:	e001      	b.n	18818 <mpsl_timeslot_session_count_set+0x42>
   18814:	2100      	movs	r1, #0
   18816:	4608      	mov	r0, r1
   18818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1881c:	f7f4 bc5c 	b.w	d0d8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

00018820 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
   18820:	2000      	movs	r0, #0
   18822:	f7f7 ba71 	b.w	fd08 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

00018826 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
   18826:	2000      	movs	r0, #0
   18828:	f7f7 ba54 	b.w	fcd4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0001882c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
   1882c:	b510      	push	{r4, lr}
   1882e:	f7f6 ff27 	bl	f680 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   18832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18836:	f000 b800 	b.w	1883a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0001883a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   1883a:	0a41      	lsrs	r1, r0, #9
   1883c:	f643 5209 	movw	r2, #15625	; 0x3d09
   18840:	4351      	muls	r1, r2
   18842:	f3c0 0008 	ubfx	r0, r0, #0, #9
   18846:	fb10 f002 	smulbb	r0, r0, r2
   1884a:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1884e:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   18852:	4770      	bx	lr

00018854 <MPSL_IRQ_RADIO_Handler>:
   18854:	f7f5 bd18 	b.w	e288 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
   18858:	2800      	cmp	r0, #0
   1885a:	db09      	blt.n	18870 <MPSL_IRQ_RADIO_Handler+0x1c>
   1885c:	f000 021f 	and.w	r2, r0, #31
   18860:	2101      	movs	r1, #1
   18862:	4091      	lsls	r1, r2
   18864:	0940      	lsrs	r0, r0, #5
   18866:	0080      	lsls	r0, r0, #2
   18868:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1886c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   18870:	4770      	bx	lr
   18872:	2800      	cmp	r0, #0
   18874:	db0d      	blt.n	18892 <MPSL_IRQ_RADIO_Handler+0x3e>
   18876:	f000 021f 	and.w	r2, r0, #31
   1887a:	2101      	movs	r1, #1
   1887c:	4091      	lsls	r1, r2
   1887e:	0940      	lsrs	r0, r0, #5
   18880:	0080      	lsls	r0, r0, #2
   18882:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   18886:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1888a:	f3bf 8f4f 	dsb	sy
   1888e:	f3bf 8f6f 	isb	sy
   18892:	4770      	bx	lr

00018894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
   18894:	b570      	push	{r4, r5, r6, lr}
   18896:	4602      	mov	r2, r0
   18898:	2000      	movs	r0, #0
   1889a:	2900      	cmp	r1, #0
   1889c:	d01d      	beq.n	188da <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
   1889e:	fba2 0101 	umull	r0, r1, r2, r1
   188a2:	0a40      	lsrs	r0, r0, #9
   188a4:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
   188a8:	0a49      	lsrs	r1, r1, #9
   188aa:	1c40      	adds	r0, r0, #1
   188ac:	f141 0100 	adc.w	r1, r1, #0
   188b0:	f240 72a1 	movw	r2, #1953	; 0x7a1
   188b4:	1883      	adds	r3, r0, r2
   188b6:	f141 0100 	adc.w	r1, r1, #0
   188ba:	1c5b      	adds	r3, r3, #1
   188bc:	f141 0400 	adc.w	r4, r1, #0
   188c0:	2100      	movs	r1, #0
   188c2:	f1d3 33ff 	rsbs	r3, r3, #4294967295
   188c6:	41a1      	sbcs	r1, r4
   188c8:	d203      	bcs.n	188d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
   188ca:	2171      	movs	r1, #113	; 0x71
   188cc:	206d      	movs	r0, #109	; 0x6d
   188ce:	f7f7 fdf5 	bl	104bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   188d2:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
   188d6:	fbb0 f0f2 	udiv	r0, r0, r2
   188da:	bd70      	pop	{r4, r5, r6, pc}
   188dc:	5840      	ldr	r0, [r0, r1]
   188de:	2800      	cmp	r0, #0
   188e0:	d000      	beq.n	188e4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
   188e2:	2001      	movs	r0, #1
   188e4:	4770      	bx	lr
   188e6:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   188ea:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   188ee:	f002 0201 	and.w	r2, r2, #1
   188f2:	03c0      	lsls	r0, r0, #15
   188f4:	d503      	bpl.n	188fe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
   188f6:	428a      	cmp	r2, r1
   188f8:	d101      	bne.n	188fe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
   188fa:	2001      	movs	r0, #1
   188fc:	4770      	bx	lr
   188fe:	2000      	movs	r0, #0
   18900:	4770      	bx	lr

00018902 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   18902:	b510      	push	{r4, lr}
   18904:	2101      	movs	r1, #1
   18906:	0788      	lsls	r0, r1, #30
   18908:	f7f7 fd82 	bl	10410 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1890c:	2800      	cmp	r0, #0
   1890e:	d000      	beq.n	18912 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   18910:	2001      	movs	r0, #1
   18912:	bd10      	pop	{r4, pc}

00018914 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   18914:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   18918:	2101      	movs	r1, #1
   1891a:	6001      	str	r1, [r0, #0]
   1891c:	4770      	bx	lr

0001891e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   1891e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   18922:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   18926:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   1892a:	f002 0203 	and.w	r2, r2, #3
   1892e:	03c9      	lsls	r1, r1, #15
   18930:	d503      	bpl.n	1893a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   18932:	4282      	cmp	r2, r0
   18934:	d101      	bne.n	1893a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   18936:	2001      	movs	r0, #1
   18938:	4770      	bx	lr
   1893a:	2000      	movs	r0, #0
   1893c:	4770      	bx	lr

0001893e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   1893e:	b510      	push	{r4, lr}
   18940:	2100      	movs	r1, #0
   18942:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   18946:	f7f7 fd63 	bl	10410 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1894a:	2800      	cmp	r0, #0
   1894c:	d000      	beq.n	18950 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   1894e:	2001      	movs	r0, #1
   18950:	bd10      	pop	{r4, pc}
   18952:	2800      	cmp	r0, #0
   18954:	db09      	blt.n	1896a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   18956:	f000 021f 	and.w	r2, r0, #31
   1895a:	2101      	movs	r1, #1
   1895c:	4091      	lsls	r1, r2
   1895e:	0940      	lsrs	r0, r0, #5
   18960:	0080      	lsls	r0, r0, #2
   18962:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   18966:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1896a:	4770      	bx	lr
   1896c:	2800      	cmp	r0, #0
   1896e:	db0d      	blt.n	1898c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   18970:	f000 021f 	and.w	r2, r0, #31
   18974:	2101      	movs	r1, #1
   18976:	4091      	lsls	r1, r2
   18978:	0940      	lsrs	r0, r0, #5
   1897a:	0080      	lsls	r0, r0, #2
   1897c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   18980:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   18984:	f3bf 8f4f 	dsb	sy
   18988:	f3bf 8f6f 	isb	sy
   1898c:	4770      	bx	lr
   1898e:	1000      	.short	0x1000
   18990:	00fa0002 	.word	0x00fa0002
   18994:	57230000 	.word	0x57230000
   18998:	31232462 	.word	0x31232462
   1899c:	ee74578f 	.word	0xee74578f
   189a0:	c0882fd1 	.word	0xc0882fd1
   189a4:	a2f74594 	.word	0xa2f74594
   189a8:	36f9      	.short	0x36f9
   189aa:	2800      	cmp	r0, #0
   189ac:	db09      	blt.n	189c2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   189ae:	f000 021f 	and.w	r2, r0, #31
   189b2:	2101      	movs	r1, #1
   189b4:	4091      	lsls	r1, r2
   189b6:	0940      	lsrs	r0, r0, #5
   189b8:	0080      	lsls	r0, r0, #2
   189ba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   189be:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   189c2:	4770      	bx	lr

000189c4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   189c4:	f3ef 8110 	mrs	r1, PRIMASK
   189c8:	b672      	cpsid	i
   189ca:	7802      	ldrb	r2, [r0, #0]
   189cc:	2a01      	cmp	r2, #1
   189ce:	d001      	beq.n	189d4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   189d0:	2201      	movs	r2, #1
   189d2:	e000      	b.n	189d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   189d4:	2200      	movs	r2, #0
   189d6:	2301      	movs	r3, #1
   189d8:	7003      	strb	r3, [r0, #0]
   189da:	b901      	cbnz	r1, 189de <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   189dc:	b662      	cpsie	i
   189de:	b10a      	cbz	r2, 189e4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   189e0:	2000      	movs	r0, #0
   189e2:	4770      	bx	lr
   189e4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   189e8:	4770      	bx	lr

000189ea <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   189ea:	2100      	movs	r1, #0
   189ec:	7001      	strb	r1, [r0, #0]
   189ee:	4608      	mov	r0, r1
   189f0:	4770      	bx	lr

000189f2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   189f2:	f3ef 8110 	mrs	r1, PRIMASK
   189f6:	b672      	cpsid	i
   189f8:	2200      	movs	r2, #0
   189fa:	7002      	strb	r2, [r0, #0]
   189fc:	b901      	cbnz	r1, 18a00 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   189fe:	b662      	cpsie	i
   18a00:	2000      	movs	r0, #0
   18a02:	4770      	bx	lr

00018a04 <mpsl_low_priority_process>:
   18a04:	f7f7 be46 	b.w	10694 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00018a08 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   18a08:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18a0c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   18a10:	280f      	cmp	r0, #15
   18a12:	d001      	beq.n	18a18 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   18a14:	2000      	movs	r0, #0
   18a16:	4770      	bx	lr
   18a18:	2001      	movs	r0, #1
   18a1a:	4770      	bx	lr

00018a1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   18a1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18a20:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   18a24:	280a      	cmp	r0, #10
   18a26:	d001      	beq.n	18a2c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   18a28:	2000      	movs	r0, #0
   18a2a:	4770      	bx	lr
   18a2c:	2001      	movs	r0, #1
   18a2e:	4770      	bx	lr

00018a30 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   18a30:	b500      	push	{lr}
   18a32:	f7ff fff3 	bl	18a1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   18a36:	b120      	cbz	r0, 18a42 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   18a38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18a3c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   18a40:	b108      	cbz	r0, 18a46 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   18a42:	2000      	movs	r0, #0
   18a44:	bd00      	pop	{pc}
   18a46:	2001      	movs	r0, #1
   18a48:	bd00      	pop	{pc}

00018a4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   18a4a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18a4e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   18a52:	280e      	cmp	r0, #14
   18a54:	d001      	beq.n	18a5a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   18a56:	2000      	movs	r0, #0
   18a58:	4770      	bx	lr
   18a5a:	2001      	movs	r0, #1
   18a5c:	4770      	bx	lr

00018a5e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   18a5e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18a62:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   18a66:	2810      	cmp	r0, #16
   18a68:	d001      	beq.n	18a6e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   18a6a:	2000      	movs	r0, #0
   18a6c:	4770      	bx	lr
   18a6e:	2001      	movs	r0, #1
   18a70:	4770      	bx	lr

00018a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   18a72:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18a76:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   18a7a:	2806      	cmp	r0, #6
   18a7c:	d003      	beq.n	18a86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   18a7e:	1c40      	adds	r0, r0, #1
   18a80:	d001      	beq.n	18a86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   18a82:	2000      	movs	r0, #0
   18a84:	4770      	bx	lr
   18a86:	2001      	movs	r0, #1
   18a88:	4770      	bx	lr

00018a8a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   18a8a:	b500      	push	{lr}
   18a8c:	f7ff fff1 	bl	18a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   18a90:	b148      	cbz	r0, 18aa6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   18a92:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18a96:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   18a9a:	2806      	cmp	r0, #6
   18a9c:	d303      	bcc.n	18aa6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   18a9e:	1c40      	adds	r0, r0, #1
   18aa0:	d001      	beq.n	18aa6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   18aa2:	2001      	movs	r0, #1
   18aa4:	bd00      	pop	{pc}
   18aa6:	2000      	movs	r0, #0
   18aa8:	bd00      	pop	{pc}

00018aaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   18aaa:	b500      	push	{lr}
   18aac:	f7ff ffe1 	bl	18a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   18ab0:	b138      	cbz	r0, 18ac2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   18ab2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18ab6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   18aba:	2806      	cmp	r0, #6
   18abc:	d303      	bcc.n	18ac6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   18abe:	1c40      	adds	r0, r0, #1
   18ac0:	d001      	beq.n	18ac6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   18ac2:	2000      	movs	r0, #0
   18ac4:	bd00      	pop	{pc}
   18ac6:	2001      	movs	r0, #1
   18ac8:	bd00      	pop	{pc}

00018aca <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   18aca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18ace:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   18ad2:	280d      	cmp	r0, #13
   18ad4:	d001      	beq.n	18ada <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   18ad6:	2000      	movs	r0, #0
   18ad8:	4770      	bx	lr
   18ada:	2001      	movs	r0, #1
   18adc:	4770      	bx	lr

00018ade <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   18ade:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18ae2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   18ae6:	2808      	cmp	r0, #8
   18ae8:	d001      	beq.n	18aee <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   18aea:	2000      	movs	r0, #0
   18aec:	4770      	bx	lr
   18aee:	2001      	movs	r0, #1
   18af0:	4770      	bx	lr

00018af2 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   18af2:	2a00      	cmp	r2, #0
   18af4:	bf04      	itt	eq
   18af6:	2000      	moveq	r0, #0
   18af8:	4770      	bxeq	lr
   18afa:	1e52      	subs	r2, r2, #1
   18afc:	d007      	beq.n	18b0e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   18afe:	7803      	ldrb	r3, [r0, #0]
   18b00:	f891 c000 	ldrb.w	ip, [r1]
   18b04:	4563      	cmp	r3, ip
   18b06:	bf04      	itt	eq
   18b08:	1c40      	addeq	r0, r0, #1
   18b0a:	1c49      	addeq	r1, r1, #1
   18b0c:	d0f5      	beq.n	18afa <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   18b0e:	7800      	ldrb	r0, [r0, #0]
   18b10:	7809      	ldrb	r1, [r1, #0]
   18b12:	1a40      	subs	r0, r0, r1
   18b14:	4770      	bx	lr

00018b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   18b16:	b4f0      	push	{r4, r5, r6, r7}
   18b18:	ea80 0c01 	eor.w	ip, r0, r1
   18b1c:	4603      	mov	r3, r0
   18b1e:	f01c 0f03 	tst.w	ip, #3
   18b22:	d13c      	bne.n	18b9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   18b24:	f013 0f03 	tst.w	r3, #3
   18b28:	d00b      	beq.n	18b42 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   18b2a:	2a00      	cmp	r2, #0
   18b2c:	bf04      	itt	eq
   18b2e:	bcf0      	popeq	{r4, r5, r6, r7}
   18b30:	4770      	bxeq	lr
   18b32:	f811 cb01 	ldrb.w	ip, [r1], #1
   18b36:	f803 cb01 	strb.w	ip, [r3], #1
   18b3a:	1e52      	subs	r2, r2, #1
   18b3c:	f013 0f03 	tst.w	r3, #3
   18b40:	d1f3      	bne.n	18b2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   18b42:	2a03      	cmp	r2, #3
   18b44:	d94f      	bls.n	18be6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   18b46:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18b4a:	d24c      	bcs.n	18be6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   18b4c:	f1c2 0c00 	rsb	ip, r2, #0
   18b50:	ea4f 74ec 	mov.w	r4, ip, asr #31
   18b54:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   18b58:	ea4f 0cac 	mov.w	ip, ip, asr #2
   18b5c:	f1cc 0c00 	rsb	ip, ip, #0
   18b60:	f1bc 0f00 	cmp.w	ip, #0
   18b64:	dd1b      	ble.n	18b9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   18b66:	1f0d      	subs	r5, r1, #4
   18b68:	1f1c      	subs	r4, r3, #4
   18b6a:	f01c 0f01 	tst.w	ip, #1
   18b6e:	d003      	beq.n	18b78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   18b70:	f855 6f04 	ldr.w	r6, [r5, #4]!
   18b74:	f844 6f04 	str.w	r6, [r4, #4]!
   18b78:	ea5f 066c 	movs.w	r6, ip, asr #1
   18b7c:	d007      	beq.n	18b8e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   18b7e:	686f      	ldr	r7, [r5, #4]
   18b80:	6067      	str	r7, [r4, #4]
   18b82:	f855 7f08 	ldr.w	r7, [r5, #8]!
   18b86:	f844 7f08 	str.w	r7, [r4, #8]!
   18b8a:	1e76      	subs	r6, r6, #1
   18b8c:	d1f7      	bne.n	18b7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   18b8e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   18b92:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   18b96:	f1cc 0c00 	rsb	ip, ip, #0
   18b9a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   18b9e:	2a00      	cmp	r2, #0
   18ba0:	bf04      	itt	eq
   18ba2:	bcf0      	popeq	{r4, r5, r6, r7}
   18ba4:	4770      	bxeq	lr
   18ba6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18baa:	d226      	bcs.n	18bfa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   18bac:	2a00      	cmp	r2, #0
   18bae:	bfdc      	itt	le
   18bb0:	bcf0      	pople	{r4, r5, r6, r7}
   18bb2:	4770      	bxle	lr
   18bb4:	1e49      	subs	r1, r1, #1
   18bb6:	1e5b      	subs	r3, r3, #1
   18bb8:	f012 0f01 	tst.w	r2, #1
   18bbc:	d003      	beq.n	18bc6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   18bbe:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   18bc2:	f803 cf01 	strb.w	ip, [r3, #1]!
   18bc6:	1052      	asrs	r2, r2, #1
   18bc8:	bf04      	itt	eq
   18bca:	bcf0      	popeq	{r4, r5, r6, r7}
   18bcc:	4770      	bxeq	lr
   18bce:	f891 c001 	ldrb.w	ip, [r1, #1]
   18bd2:	f883 c001 	strb.w	ip, [r3, #1]
   18bd6:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   18bda:	f803 cf02 	strb.w	ip, [r3, #2]!
   18bde:	1e52      	subs	r2, r2, #1
   18be0:	d1f5      	bne.n	18bce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   18be2:	bcf0      	pop	{r4, r5, r6, r7}
   18be4:	4770      	bx	lr
   18be6:	2a04      	cmp	r2, #4
   18be8:	d3d9      	bcc.n	18b9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   18bea:	f851 cb04 	ldr.w	ip, [r1], #4
   18bee:	1f12      	subs	r2, r2, #4
   18bf0:	f843 cb04 	str.w	ip, [r3], #4
   18bf4:	2a04      	cmp	r2, #4
   18bf6:	d2f8      	bcs.n	18bea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   18bf8:	e7d1      	b.n	18b9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   18bfa:	f811 cb01 	ldrb.w	ip, [r1], #1
   18bfe:	f803 cb01 	strb.w	ip, [r3], #1
   18c02:	1e52      	subs	r2, r2, #1
   18c04:	d1f9      	bne.n	18bfa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   18c06:	bcf0      	pop	{r4, r5, r6, r7}
   18c08:	4770      	bx	lr

00018c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   18c0a:	b470      	push	{r4, r5, r6}
   18c0c:	4603      	mov	r3, r0
   18c0e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   18c12:	f010 0f03 	tst.w	r0, #3
   18c16:	d009      	beq.n	18c2c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   18c18:	2a00      	cmp	r2, #0
   18c1a:	bf04      	itt	eq
   18c1c:	bc70      	popeq	{r4, r5, r6}
   18c1e:	4770      	bxeq	lr
   18c20:	f803 cb01 	strb.w	ip, [r3], #1
   18c24:	1e52      	subs	r2, r2, #1
   18c26:	f013 0f03 	tst.w	r3, #3
   18c2a:	d1f5      	bne.n	18c18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   18c2c:	b2c9      	uxtb	r1, r1
   18c2e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   18c32:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   18c36:	2a03      	cmp	r2, #3
   18c38:	d939      	bls.n	18cae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   18c3a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18c3e:	d236      	bcs.n	18cae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   18c40:	4251      	negs	r1, r2
   18c42:	17cc      	asrs	r4, r1, #31
   18c44:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   18c48:	1089      	asrs	r1, r1, #2
   18c4a:	424e      	negs	r6, r1
   18c4c:	2e00      	cmp	r6, #0
   18c4e:	dd11      	ble.n	18c74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   18c50:	1f19      	subs	r1, r3, #4
   18c52:	f016 0f01 	tst.w	r6, #1
   18c56:	bf18      	it	ne
   18c58:	f841 5f04 	strne.w	r5, [r1, #4]!
   18c5c:	1074      	asrs	r4, r6, #1
   18c5e:	d004      	beq.n	18c6a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   18c60:	604d      	str	r5, [r1, #4]
   18c62:	f841 5f08 	str.w	r5, [r1, #8]!
   18c66:	1e64      	subs	r4, r4, #1
   18c68:	d1fa      	bne.n	18c60 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   18c6a:	4271      	negs	r1, r6
   18c6c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   18c70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   18c74:	2a00      	cmp	r2, #0
   18c76:	bf04      	itt	eq
   18c78:	bc70      	popeq	{r4, r5, r6}
   18c7a:	4770      	bxeq	lr
   18c7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18c80:	d21d      	bcs.n	18cbe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   18c82:	2a00      	cmp	r2, #0
   18c84:	bfdc      	itt	le
   18c86:	bc70      	pople	{r4, r5, r6}
   18c88:	4770      	bxle	lr
   18c8a:	1e59      	subs	r1, r3, #1
   18c8c:	f012 0f01 	tst.w	r2, #1
   18c90:	bf18      	it	ne
   18c92:	f801 cf01 	strbne.w	ip, [r1, #1]!
   18c96:	1052      	asrs	r2, r2, #1
   18c98:	bf04      	itt	eq
   18c9a:	bc70      	popeq	{r4, r5, r6}
   18c9c:	4770      	bxeq	lr
   18c9e:	f881 c001 	strb.w	ip, [r1, #1]
   18ca2:	f801 cf02 	strb.w	ip, [r1, #2]!
   18ca6:	1e52      	subs	r2, r2, #1
   18ca8:	d1f9      	bne.n	18c9e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   18caa:	bc70      	pop	{r4, r5, r6}
   18cac:	4770      	bx	lr
   18cae:	2a04      	cmp	r2, #4
   18cb0:	d3e0      	bcc.n	18c74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   18cb2:	1f12      	subs	r2, r2, #4
   18cb4:	f843 5b04 	str.w	r5, [r3], #4
   18cb8:	2a04      	cmp	r2, #4
   18cba:	d2fa      	bcs.n	18cb2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   18cbc:	e7da      	b.n	18c74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   18cbe:	f803 cb01 	strb.w	ip, [r3], #1
   18cc2:	1e52      	subs	r2, r2, #1
   18cc4:	d1fb      	bne.n	18cbe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   18cc6:	bc70      	pop	{r4, r5, r6}
   18cc8:	4770      	bx	lr
   18cca:	f04f 30ff 	mov.w	r0, #4294967295
   18cce:	4770      	bx	lr
   18cd0:	2000      	movs	r0, #0
   18cd2:	4770      	bx	lr
   18cd4:	2000      	movs	r0, #0
   18cd6:	4770      	bx	lr
   18cd8:	f04f 30ff 	mov.w	r0, #4294967295
   18cdc:	4770      	bx	lr
   18cde:	4770      	bx	lr
   18ce0:	4770      	bx	lr
   18ce2:	2000      	movs	r0, #0
   18ce4:	4770      	bx	lr
   18ce6:	f04f 30ff 	mov.w	r0, #4294967295
   18cea:	4770      	bx	lr
   18cec:	f04f 30ff 	mov.w	r0, #4294967295
   18cf0:	4770      	bx	lr
   18cf2:	2100      	movs	r1, #0
   18cf4:	7001      	strb	r1, [r0, #0]
   18cf6:	4770      	bx	lr
   18cf8:	f04f 30ff 	mov.w	r0, #4294967295
   18cfc:	4770      	bx	lr
   18cfe:	f04f 30ff 	mov.w	r0, #4294967295
   18d02:	4770      	bx	lr
   18d04:	2000      	movs	r0, #0
   18d06:	4770      	bx	lr
   18d08:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   18d0c:	4605      	mov	r5, r0
   18d0e:	f100 0003 	add.w	r0, r0, #3
   18d12:	f020 0003 	bic.w	r0, r0, #3
   18d16:	460c      	mov	r4, r1
   18d18:	9000      	str	r0, [sp, #0]
   18d1a:	7849      	ldrb	r1, [r1, #1]
   18d1c:	f88d 1004 	strb.w	r1, [sp, #4]
   18d20:	78a1      	ldrb	r1, [r4, #2]
   18d22:	0016      	movs	r6, r2
   18d24:	f88d 1005 	strb.w	r1, [sp, #5]
   18d28:	d000      	beq.n	18d2c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
   18d2a:	2000      	movs	r0, #0
   18d2c:	a901      	add	r1, sp, #4
   18d2e:	f7f8 f869 	bl	10e04 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
   18d32:	9900      	ldr	r1, [sp, #0]
   18d34:	4408      	add	r0, r1
   18d36:	9000      	str	r0, [sp, #0]
   18d38:	78a1      	ldrb	r1, [r4, #2]
   18d3a:	b141      	cbz	r1, 18d4e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
   18d3c:	8a63      	ldrh	r3, [r4, #18]
   18d3e:	78e2      	ldrb	r2, [r4, #3]
   18d40:	b106      	cbz	r6, 18d44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
   18d42:	2000      	movs	r0, #0
   18d44:	f7f8 faee 	bl	11324 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
   18d48:	9900      	ldr	r1, [sp, #0]
   18d4a:	4408      	add	r0, r1
   18d4c:	9000      	str	r0, [sp, #0]
   18d4e:	4632      	mov	r2, r6
   18d50:	4621      	mov	r1, r4
   18d52:	4668      	mov	r0, sp
   18d54:	f000 f808 	bl	18d68 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
   18d58:	9800      	ldr	r0, [sp, #0]
   18d5a:	1dc0      	adds	r0, r0, #7
   18d5c:	f020 0007 	bic.w	r0, r0, #7
   18d60:	9000      	str	r0, [sp, #0]
   18d62:	1b40      	subs	r0, r0, r5
   18d64:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   18d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18d6c:	4606      	mov	r6, r0
   18d6e:	460c      	mov	r4, r1
   18d70:	7808      	ldrb	r0, [r1, #0]
   18d72:	7849      	ldrb	r1, [r1, #1]
   18d74:	2700      	movs	r7, #0
   18d76:	4408      	add	r0, r1
   18d78:	4691      	mov	r9, r2
   18d7a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
   18d7e:	463d      	mov	r5, r7
   18d80:	e00e      	b.n	18da0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
   18d82:	7a23      	ldrb	r3, [r4, #8]
   18d84:	2b02      	cmp	r3, #2
   18d86:	d200      	bcs.n	18d8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
   18d88:	2302      	movs	r3, #2
   18d8a:	79e2      	ldrb	r2, [r4, #7]
   18d8c:	2a03      	cmp	r2, #3
   18d8e:	d200      	bcs.n	18d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
   18d90:	2203      	movs	r2, #3
   18d92:	79a1      	ldrb	r1, [r4, #6]
   18d94:	7960      	ldrb	r0, [r4, #5]
   18d96:	f000 fedf 	bl	19b58 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
   18d9a:	1c6d      	adds	r5, r5, #1
   18d9c:	4407      	add	r7, r0
   18d9e:	b2ed      	uxtb	r5, r5
   18da0:	4545      	cmp	r5, r8
   18da2:	d3ee      	bcc.n	18d82 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
   18da4:	6830      	ldr	r0, [r6, #0]
   18da6:	1cc0      	adds	r0, r0, #3
   18da8:	f020 0003 	bic.w	r0, r0, #3
   18dac:	6030      	str	r0, [r6, #0]
   18dae:	f1b9 0f00 	cmp.w	r9, #0
   18db2:	d000      	beq.n	18db6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
   18db4:	2000      	movs	r0, #0
   18db6:	463a      	mov	r2, r7
   18db8:	4641      	mov	r1, r8
   18dba:	f7f8 f9fd 	bl	111b8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
   18dbe:	6831      	ldr	r1, [r6, #0]
   18dc0:	4408      	add	r0, r1
   18dc2:	6030      	str	r0, [r6, #0]
   18dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00018dc8 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
   18dc8:	2000      	movs	r0, #0
   18dca:	4770      	bx	lr

00018dcc <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
   18dcc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   18dce:	4604      	mov	r4, r0
   18dd0:	1d01      	adds	r1, r0, #4
   18dd2:	4668      	mov	r0, sp
   18dd4:	f7f9 fec6 	bl	12b64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
   18dd8:	2800      	cmp	r0, #0
   18dda:	d004      	beq.n	18de6 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
   18ddc:	4669      	mov	r1, sp
   18dde:	4620      	mov	r0, r4
   18de0:	f000 f848 	bl	18e74 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
   18de4:	2001      	movs	r0, #1
   18de6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00018de8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
   18de8:	b50e      	push	{r1, r2, r3, lr}
   18dea:	4601      	mov	r1, r0
   18dec:	4668      	mov	r0, sp
   18dee:	f000 f827 	bl	18e40 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
   18df2:	4668      	mov	r0, sp
   18df4:	f001 fc76 	bl	1a6e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
   18df8:	bd0e      	pop	{r1, r2, r3, pc}

00018dfa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
   18dfa:	b510      	push	{r4, lr}
   18dfc:	4604      	mov	r4, r0
   18dfe:	4620      	mov	r0, r4
   18e00:	f7f7 feee 	bl	10be0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
   18e04:	2800      	cmp	r0, #0
   18e06:	d006      	beq.n	18e16 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
   18e08:	78a1      	ldrb	r1, [r4, #2]
   18e0a:	7820      	ldrb	r0, [r4, #0]
   18e0c:	f000 f804 	bl	18e18 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
   18e10:	2800      	cmp	r0, #0
   18e12:	d0f4      	beq.n	18dfe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
   18e14:	2001      	movs	r0, #1
   18e16:	bd10      	pop	{r4, pc}
   18e18:	b570      	push	{r4, r5, r6, lr}
   18e1a:	460c      	mov	r4, r1
   18e1c:	4605      	mov	r5, r0
   18e1e:	f7f7 ff51 	bl	10cc4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
   18e22:	2800      	cmp	r0, #0
   18e24:	d002      	beq.n	18e2c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
   18e26:	2d3e      	cmp	r5, #62	; 0x3e
   18e28:	d001      	beq.n	18e2e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
   18e2a:	2001      	movs	r0, #1
   18e2c:	bd70      	pop	{r4, r5, r6, pc}
   18e2e:	2c12      	cmp	r4, #18
   18e30:	d004      	beq.n	18e3c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
   18e32:	4620      	mov	r0, r4
   18e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18e38:	f7f7 bf60 	b.w	10cfc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   18e3c:	2000      	movs	r0, #0
   18e3e:	bd70      	pop	{r4, r5, r6, pc}

00018e40 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
   18e40:	880a      	ldrh	r2, [r1, #0]
   18e42:	f3c2 020b 	ubfx	r2, r2, #0, #12
   18e46:	8002      	strh	r2, [r0, #0]
   18e48:	884a      	ldrh	r2, [r1, #2]
   18e4a:	8042      	strh	r2, [r0, #2]
   18e4c:	784a      	ldrb	r2, [r1, #1]
   18e4e:	0993      	lsrs	r3, r2, #6
   18e50:	2200      	movs	r2, #0
   18e52:	7142      	strb	r2, [r0, #5]
   18e54:	784b      	ldrb	r3, [r1, #1]
   18e56:	f3c3 1301 	ubfx	r3, r3, #4, #2
   18e5a:	b11b      	cbz	r3, 18e64 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   18e5c:	2b01      	cmp	r3, #1
   18e5e:	d005      	beq.n	18e6c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
   18e60:	2b02      	cmp	r3, #2
   18e62:	d005      	beq.n	18e70 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
   18e64:	7102      	strb	r2, [r0, #4]
   18e66:	1d09      	adds	r1, r1, #4
   18e68:	6081      	str	r1, [r0, #8]
   18e6a:	4770      	bx	lr
   18e6c:	2201      	movs	r2, #1
   18e6e:	e7f9      	b.n	18e64 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   18e70:	2202      	movs	r2, #2
   18e72:	e7f7      	b.n	18e64 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

00018e74 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
   18e74:	b510      	push	{r4, lr}
   18e76:	460c      	mov	r4, r1
   18e78:	7809      	ldrb	r1, [r1, #0]
   18e7a:	7001      	strb	r1, [r0, #0]
   18e7c:	7841      	ldrb	r1, [r0, #1]
   18e7e:	f021 010f 	bic.w	r1, r1, #15
   18e82:	7041      	strb	r1, [r0, #1]
   18e84:	8822      	ldrh	r2, [r4, #0]
   18e86:	f3c2 2203 	ubfx	r2, r2, #8, #4
   18e8a:	4311      	orrs	r1, r2
   18e8c:	7041      	strb	r1, [r0, #1]
   18e8e:	78a2      	ldrb	r2, [r4, #2]
   18e90:	7082      	strb	r2, [r0, #2]
   18e92:	8862      	ldrh	r2, [r4, #2]
   18e94:	f021 0130 	bic.w	r1, r1, #48	; 0x30
   18e98:	0a12      	lsrs	r2, r2, #8
   18e9a:	70c2      	strb	r2, [r0, #3]
   18e9c:	7041      	strb	r1, [r0, #1]
   18e9e:	7922      	ldrb	r2, [r4, #4]
   18ea0:	f002 0203 	and.w	r2, r2, #3
   18ea4:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   18ea8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   18eac:	7041      	strb	r1, [r0, #1]
   18eae:	7962      	ldrb	r2, [r4, #5]
   18eb0:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
   18eb4:	7041      	strb	r1, [r0, #1]
   18eb6:	68a1      	ldr	r1, [r4, #8]
   18eb8:	1d02      	adds	r2, r0, #4
   18eba:	4291      	cmp	r1, r2
   18ebc:	d006      	beq.n	18ecc <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
   18ebe:	8862      	ldrh	r2, [r4, #2]
   18ec0:	2afb      	cmp	r2, #251	; 0xfb
   18ec2:	d300      	bcc.n	18ec6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
   18ec4:	22fb      	movs	r2, #251	; 0xfb
   18ec6:	1d00      	adds	r0, r0, #4
   18ec8:	f7ff fe25 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   18ecc:	78a0      	ldrb	r0, [r4, #2]
   18ece:	1d00      	adds	r0, r0, #4
   18ed0:	b2c0      	uxtb	r0, r0
   18ed2:	bd10      	pop	{r4, pc}

00018ed4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
   18ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ed8:	4604      	mov	r4, r0
   18eda:	780f      	ldrb	r7, [r1, #0]
   18edc:	2000      	movs	r0, #0
   18ede:	250c      	movs	r5, #12
   18ee0:	2605      	movs	r6, #5
   18ee2:	223e      	movs	r2, #62	; 0x3e
   18ee4:	23ff      	movs	r3, #255	; 0xff
   18ee6:	2f1b      	cmp	r7, #27
   18ee8:	d27d      	bcs.n	18fe6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
   18eea:	e8df f007 	tbb	[pc, r7]
   18eee:	0eea      	.short	0x0eea
   18ef0:	632d2725 	.word	0x632d2725
   18ef4:	af9b816d 	.word	0xaf9b816d
   18ef8:	e2c7bcb1 	.word	0xe2c7bcb1
   18efc:	31eaeaf4 	.word	0x31eaeaf4
   18f00:	f1fdd5d2 	.word	0xf1fdd5d2
   18f04:	edeeeff0 	.word	0xedeeeff0
   18f08:	00ec      	.short	0x00ec
   18f0a:	7025      	strb	r5, [r4, #0]
   18f0c:	7908      	ldrb	r0, [r1, #4]
   18f0e:	70a0      	strb	r0, [r4, #2]
   18f10:	7948      	ldrb	r0, [r1, #5]
   18f12:	70e0      	strb	r0, [r4, #3]
   18f14:	f8b1 0005 	ldrh.w	r0, [r1, #5]
   18f18:	0a00      	lsrs	r0, r0, #8
   18f1a:	7120      	strb	r0, [r4, #4]
   18f1c:	79c8      	ldrb	r0, [r1, #7]
   18f1e:	7160      	strb	r0, [r4, #5]
   18f20:	7a08      	ldrb	r0, [r1, #8]
   18f22:	71a0      	strb	r0, [r4, #6]
   18f24:	8908      	ldrh	r0, [r1, #8]
   18f26:	0a00      	lsrs	r0, r0, #8
   18f28:	71e0      	strb	r0, [r4, #7]
   18f2a:	7a88      	ldrb	r0, [r1, #10]
   18f2c:	7220      	strb	r0, [r4, #8]
   18f2e:	8948      	ldrh	r0, [r1, #10]
   18f30:	0a00      	lsrs	r0, r0, #8
   18f32:	7260      	strb	r0, [r4, #9]
   18f34:	2008      	movs	r0, #8
   18f36:	e0c2      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18f38:	2010      	movs	r0, #16
   18f3a:	e000      	b.n	18f3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
   18f3c:	201a      	movs	r0, #26
   18f3e:	7020      	strb	r0, [r4, #0]
   18f40:	7908      	ldrb	r0, [r1, #4]
   18f42:	70a0      	strb	r0, [r4, #2]
   18f44:	2001      	movs	r0, #1
   18f46:	e0ba      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18f48:	4620      	mov	r0, r4
   18f4a:	f000 f946 	bl	191da <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
   18f4e:	e0b4      	b.n	190ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
   18f50:	7022      	strb	r2, [r4, #0]
   18f52:	200a      	movs	r0, #10
   18f54:	70a0      	strb	r0, [r4, #2]
   18f56:	f811 0f04 	ldrb.w	r0, [r1, #4]!
   18f5a:	70e0      	strb	r0, [r4, #3]
   18f5c:	7888      	ldrb	r0, [r1, #2]
   18f5e:	7120      	strb	r0, [r4, #4]
   18f60:	8848      	ldrh	r0, [r1, #2]
   18f62:	0a00      	lsrs	r0, r0, #8
   18f64:	7160      	strb	r0, [r4, #5]
   18f66:	7908      	ldrb	r0, [r1, #4]
   18f68:	71a0      	strb	r0, [r4, #6]
   18f6a:	7948      	ldrb	r0, [r1, #5]
   18f6c:	71e0      	strb	r0, [r4, #7]
   18f6e:	f8d1 0006 	ldr.w	r0, [r1, #6]
   18f72:	60a0      	str	r0, [r4, #8]
   18f74:	8948      	ldrh	r0, [r1, #10]
   18f76:	81a0      	strh	r0, [r4, #12]
   18f78:	68c8      	ldr	r0, [r1, #12]
   18f7a:	f8c4 000e 	str.w	r0, [r4, #14]
   18f7e:	8a08      	ldrh	r0, [r1, #16]
   18f80:	8260      	strh	r0, [r4, #18]
   18f82:	f8d1 0012 	ldr.w	r0, [r1, #18]
   18f86:	6160      	str	r0, [r4, #20]
   18f88:	8ac8      	ldrh	r0, [r1, #22]
   18f8a:	8320      	strh	r0, [r4, #24]
   18f8c:	7e08      	ldrb	r0, [r1, #24]
   18f8e:	76a0      	strb	r0, [r4, #26]
   18f90:	8b08      	ldrh	r0, [r1, #24]
   18f92:	0a00      	lsrs	r0, r0, #8
   18f94:	76e0      	strb	r0, [r4, #27]
   18f96:	7e88      	ldrb	r0, [r1, #26]
   18f98:	7720      	strb	r0, [r4, #28]
   18f9a:	8b48      	ldrh	r0, [r1, #26]
   18f9c:	0a00      	lsrs	r0, r0, #8
   18f9e:	7760      	strb	r0, [r4, #29]
   18fa0:	7f08      	ldrb	r0, [r1, #28]
   18fa2:	77a0      	strb	r0, [r4, #30]
   18fa4:	8b88      	ldrh	r0, [r1, #28]
   18fa6:	0a00      	lsrs	r0, r0, #8
   18fa8:	77e0      	strb	r0, [r4, #31]
   18faa:	7f88      	ldrb	r0, [r1, #30]
   18fac:	f884 0020 	strb.w	r0, [r4, #32]
   18fb0:	201f      	movs	r0, #31
   18fb2:	e084      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18fb4:	7022      	strb	r2, [r4, #0]
   18fb6:	2014      	movs	r0, #20
   18fb8:	70a0      	strb	r0, [r4, #2]
   18fba:	7908      	ldrb	r0, [r1, #4]
   18fbc:	70e0      	strb	r0, [r4, #3]
   18fbe:	8888      	ldrh	r0, [r1, #4]
   18fc0:	0a00      	lsrs	r0, r0, #8
   18fc2:	7120      	strb	r0, [r4, #4]
   18fc4:	7988      	ldrb	r0, [r1, #6]
   18fc6:	e0a7      	b.n	19118 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
   18fc8:	7022      	strb	r2, [r4, #0]
   18fca:	2004      	movs	r0, #4
   18fcc:	70a0      	strb	r0, [r4, #2]
   18fce:	7908      	ldrb	r0, [r1, #4]
   18fd0:	70e0      	strb	r0, [r4, #3]
   18fd2:	7988      	ldrb	r0, [r1, #6]
   18fd4:	7120      	strb	r0, [r4, #4]
   18fd6:	88c8      	ldrh	r0, [r1, #6]
   18fd8:	0a00      	lsrs	r0, r0, #8
   18fda:	7160      	strb	r0, [r4, #5]
   18fdc:	6888      	ldr	r0, [r1, #8]
   18fde:	f8c4 0006 	str.w	r0, [r4, #6]
   18fe2:	68c8      	ldr	r0, [r1, #12]
   18fe4:	e000      	b.n	18fe8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
   18fe6:	e06c      	b.n	190c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
   18fe8:	f8c4 000a 	str.w	r0, [r4, #10]
   18fec:	200c      	movs	r0, #12
   18fee:	e066      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18ff0:	7022      	strb	r2, [r4, #0]
   18ff2:	2003      	movs	r0, #3
   18ff4:	70a0      	strb	r0, [r4, #2]
   18ff6:	7908      	ldrb	r0, [r1, #4]
   18ff8:	70e0      	strb	r0, [r4, #3]
   18ffa:	7988      	ldrb	r0, [r1, #6]
   18ffc:	7120      	strb	r0, [r4, #4]
   18ffe:	88c8      	ldrh	r0, [r1, #6]
   19000:	0a00      	lsrs	r0, r0, #8
   19002:	7160      	strb	r0, [r4, #5]
   19004:	7a08      	ldrb	r0, [r1, #8]
   19006:	71a0      	strb	r0, [r4, #6]
   19008:	8908      	ldrh	r0, [r1, #8]
   1900a:	0a00      	lsrs	r0, r0, #8
   1900c:	71e0      	strb	r0, [r4, #7]
   1900e:	7a88      	ldrb	r0, [r1, #10]
   19010:	7220      	strb	r0, [r4, #8]
   19012:	8948      	ldrh	r0, [r1, #10]
   19014:	0a00      	lsrs	r0, r0, #8
   19016:	7260      	strb	r0, [r4, #9]
   19018:	7b08      	ldrb	r0, [r1, #12]
   1901a:	72a0      	strb	r0, [r4, #10]
   1901c:	8988      	ldrh	r0, [r1, #12]
   1901e:	0a00      	lsrs	r0, r0, #8
   19020:	72e0      	strb	r0, [r4, #11]
   19022:	e0d8      	b.n	191d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
   19024:	7022      	strb	r2, [r4, #0]
   19026:	70a6      	strb	r6, [r4, #2]
   19028:	7908      	ldrb	r0, [r1, #4]
   1902a:	70e0      	strb	r0, [r4, #3]
   1902c:	8888      	ldrh	r0, [r1, #4]
   1902e:	0a00      	lsrs	r0, r0, #8
   19030:	7120      	strb	r0, [r4, #4]
   19032:	f8d1 0006 	ldr.w	r0, [r1, #6]
   19036:	f8c4 0005 	str.w	r0, [r4, #5]
   1903a:	f8d1 000a 	ldr.w	r0, [r1, #10]
   1903e:	f8c4 0009 	str.w	r0, [r4, #9]
   19042:	89c8      	ldrh	r0, [r1, #14]
   19044:	f8a4 000d 	strh.w	r0, [r4, #13]
   19048:	200d      	movs	r0, #13
   1904a:	e038      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   1904c:	2011      	movs	r0, #17
   1904e:	e043      	b.n	190d8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
   19050:	7026      	strb	r6, [r4, #0]
   19052:	7908      	ldrb	r0, [r1, #4]
   19054:	70a0      	strb	r0, [r4, #2]
   19056:	7948      	ldrb	r0, [r1, #5]
   19058:	70e0      	strb	r0, [r4, #3]
   1905a:	f8b1 0005 	ldrh.w	r0, [r1, #5]
   1905e:	0a00      	lsrs	r0, r0, #8
   19060:	7120      	strb	r0, [r4, #4]
   19062:	79c8      	ldrb	r0, [r1, #7]
   19064:	e058      	b.n	19118 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
   19066:	2008      	movs	r0, #8
   19068:	7020      	strb	r0, [r4, #0]
   1906a:	7908      	ldrb	r0, [r1, #4]
   1906c:	70a0      	strb	r0, [r4, #2]
   1906e:	7988      	ldrb	r0, [r1, #6]
   19070:	70e0      	strb	r0, [r4, #3]
   19072:	88c8      	ldrh	r0, [r1, #6]
   19074:	0a00      	lsrs	r0, r0, #8
   19076:	7120      	strb	r0, [r4, #4]
   19078:	7a08      	ldrb	r0, [r1, #8]
   1907a:	e04d      	b.n	19118 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
   1907c:	2030      	movs	r0, #48	; 0x30
   1907e:	7020      	strb	r0, [r4, #0]
   19080:	7908      	ldrb	r0, [r1, #4]
   19082:	70a0      	strb	r0, [r4, #2]
   19084:	7988      	ldrb	r0, [r1, #6]
   19086:	70e0      	strb	r0, [r4, #3]
   19088:	88c8      	ldrh	r0, [r1, #6]
   1908a:	0a00      	lsrs	r0, r0, #8
   1908c:	7120      	strb	r0, [r4, #4]
   1908e:	2003      	movs	r0, #3
   19090:	e015      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   19092:	7022      	strb	r2, [r4, #0]
   19094:	2007      	movs	r0, #7
   19096:	e044      	b.n	19122 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
   19098:	7022      	strb	r2, [r4, #0]
   1909a:	70a5      	strb	r5, [r4, #2]
   1909c:	7908      	ldrb	r0, [r1, #4]
   1909e:	70e0      	strb	r0, [r4, #3]
   190a0:	7988      	ldrb	r0, [r1, #6]
   190a2:	7120      	strb	r0, [r4, #4]
   190a4:	88c8      	ldrh	r0, [r1, #6]
   190a6:	0a00      	lsrs	r0, r0, #8
   190a8:	7160      	strb	r0, [r4, #5]
   190aa:	7a08      	ldrb	r0, [r1, #8]
   190ac:	71a0      	strb	r0, [r4, #6]
   190ae:	7a48      	ldrb	r0, [r1, #9]
   190b0:	e027      	b.n	19102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
   190b2:	4620      	mov	r0, r4
   190b4:	1d09      	adds	r1, r1, #4
   190b6:	f7f7 fdd7 	bl	10c68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
   190ba:	2800      	cmp	r0, #0
   190bc:	d001      	beq.n	190c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
   190be:	7060      	strb	r0, [r4, #1]
   190c0:	1c80      	adds	r0, r0, #2
   190c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   190c6:	e073      	b.n	191b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
   190c8:	e047      	b.n	1915a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
   190ca:	e028      	b.n	1911e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
   190cc:	e053      	b.n	19176 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
   190ce:	e061      	b.n	19194 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
   190d0:	e01a      	b.n	19108 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
   190d2:	e009      	b.n	190e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
   190d4:	e7ff      	b.n	190d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
   190d6:	2057      	movs	r0, #87	; 0x57
   190d8:	7020      	strb	r0, [r4, #0]
   190da:	7908      	ldrb	r0, [r1, #4]
   190dc:	70a0      	strb	r0, [r4, #2]
   190de:	8888      	ldrh	r0, [r1, #4]
   190e0:	0a00      	lsrs	r0, r0, #8
   190e2:	70e0      	strb	r0, [r4, #3]
   190e4:	2002      	movs	r0, #2
   190e6:	e7ea      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   190e8:	7022      	strb	r2, [r4, #0]
   190ea:	2012      	movs	r0, #18
   190ec:	70a0      	strb	r0, [r4, #2]
   190ee:	7908      	ldrb	r0, [r1, #4]
   190f0:	70e0      	strb	r0, [r4, #3]
   190f2:	7948      	ldrb	r0, [r1, #5]
   190f4:	7120      	strb	r0, [r4, #4]
   190f6:	7988      	ldrb	r0, [r1, #6]
   190f8:	7160      	strb	r0, [r4, #5]
   190fa:	88c8      	ldrh	r0, [r1, #6]
   190fc:	0a00      	lsrs	r0, r0, #8
   190fe:	71a0      	strb	r0, [r4, #6]
   19100:	7a08      	ldrb	r0, [r1, #8]
   19102:	71e0      	strb	r0, [r4, #7]
   19104:	2006      	movs	r0, #6
   19106:	e7da      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   19108:	7023      	strb	r3, [r4, #0]
   1910a:	20a1      	movs	r0, #161	; 0xa1
   1910c:	70a0      	strb	r0, [r4, #2]
   1910e:	7908      	ldrb	r0, [r1, #4]
   19110:	70e0      	strb	r0, [r4, #3]
   19112:	7948      	ldrb	r0, [r1, #5]
   19114:	7120      	strb	r0, [r4, #4]
   19116:	2000      	movs	r0, #0
   19118:	7160      	strb	r0, [r4, #5]
   1911a:	2004      	movs	r0, #4
   1911c:	e7cf      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   1911e:	7023      	strb	r3, [r4, #0]
   19120:	20a2      	movs	r0, #162	; 0xa2
   19122:	70a0      	strb	r0, [r4, #2]
   19124:	7908      	ldrb	r0, [r1, #4]
   19126:	70e0      	strb	r0, [r4, #3]
   19128:	8888      	ldrh	r0, [r1, #4]
   1912a:	0a00      	lsrs	r0, r0, #8
   1912c:	7120      	strb	r0, [r4, #4]
   1912e:	7988      	ldrb	r0, [r1, #6]
   19130:	7160      	strb	r0, [r4, #5]
   19132:	88c8      	ldrh	r0, [r1, #6]
   19134:	0a00      	lsrs	r0, r0, #8
   19136:	71a0      	strb	r0, [r4, #6]
   19138:	7a08      	ldrb	r0, [r1, #8]
   1913a:	71e0      	strb	r0, [r4, #7]
   1913c:	8908      	ldrh	r0, [r1, #8]
   1913e:	0a00      	lsrs	r0, r0, #8
   19140:	7220      	strb	r0, [r4, #8]
   19142:	7a88      	ldrb	r0, [r1, #10]
   19144:	7260      	strb	r0, [r4, #9]
   19146:	8948      	ldrh	r0, [r1, #10]
   19148:	0a00      	lsrs	r0, r0, #8
   1914a:	72a0      	strb	r0, [r4, #10]
   1914c:	7b08      	ldrb	r0, [r1, #12]
   1914e:	72e0      	strb	r0, [r4, #11]
   19150:	8988      	ldrh	r0, [r1, #12]
   19152:	0a00      	lsrs	r0, r0, #8
   19154:	7320      	strb	r0, [r4, #12]
   19156:	200b      	movs	r0, #11
   19158:	e7b1      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   1915a:	7023      	strb	r3, [r4, #0]
   1915c:	20a3      	movs	r0, #163	; 0xa3
   1915e:	70a0      	strb	r0, [r4, #2]
   19160:	7908      	ldrb	r0, [r1, #4]
   19162:	70e0      	strb	r0, [r4, #3]
   19164:	8888      	ldrh	r0, [r1, #4]
   19166:	0a00      	lsrs	r0, r0, #8
   19168:	7120      	strb	r0, [r4, #4]
   1916a:	7988      	ldrb	r0, [r1, #6]
   1916c:	7160      	strb	r0, [r4, #5]
   1916e:	79c8      	ldrb	r0, [r1, #7]
   19170:	71a0      	strb	r0, [r4, #6]
   19172:	2005      	movs	r0, #5
   19174:	e7a3      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   19176:	7022      	strb	r2, [r4, #0]
   19178:	2013      	movs	r0, #19
   1917a:	70a0      	strb	r0, [r4, #2]
   1917c:	7908      	ldrb	r0, [r1, #4]
   1917e:	70e0      	strb	r0, [r4, #3]
   19180:	7948      	ldrb	r0, [r1, #5]
   19182:	7120      	strb	r0, [r4, #4]
   19184:	f8d1 0006 	ldr.w	r0, [r1, #6]
   19188:	f8c4 0005 	str.w	r0, [r4, #5]
   1918c:	8948      	ldrh	r0, [r1, #10]
   1918e:	f8a4 0009 	strh.w	r0, [r4, #9]
   19192:	e020      	b.n	191d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
   19194:	7023      	strb	r3, [r4, #0]
   19196:	20a4      	movs	r0, #164	; 0xa4
   19198:	70a0      	strb	r0, [r4, #2]
   1919a:	7908      	ldrb	r0, [r1, #4]
   1919c:	70e0      	strb	r0, [r4, #3]
   1919e:	8888      	ldrh	r0, [r1, #4]
   191a0:	0a00      	lsrs	r0, r0, #8
   191a2:	7120      	strb	r0, [r4, #4]
   191a4:	7988      	ldrb	r0, [r1, #6]
   191a6:	7160      	strb	r0, [r4, #5]
   191a8:	79c8      	ldrb	r0, [r1, #7]
   191aa:	71a0      	strb	r0, [r4, #6]
   191ac:	2007      	movs	r0, #7
   191ae:	e786      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   191b0:	7023      	strb	r3, [r4, #0]
   191b2:	2080      	movs	r0, #128	; 0x80
   191b4:	70a0      	strb	r0, [r4, #2]
   191b6:	888a      	ldrh	r2, [r1, #4]
   191b8:	f8a4 2003 	strh.w	r2, [r4, #3]
   191bc:	88ca      	ldrh	r2, [r1, #6]
   191be:	f8a4 2005 	strh.w	r2, [r4, #5]
   191c2:	7a0a      	ldrb	r2, [r1, #8]
   191c4:	71e2      	strb	r2, [r4, #7]
   191c6:	7a4a      	ldrb	r2, [r1, #9]
   191c8:	8122      	strh	r2, [r4, #8]
   191ca:	7a8a      	ldrb	r2, [r1, #10]
   191cc:	72a2      	strb	r2, [r4, #10]
   191ce:	7ac9      	ldrb	r1, [r1, #11]
   191d0:	f001 0101 	and.w	r1, r1, #1
   191d4:	72e1      	strb	r1, [r4, #11]
   191d6:	200a      	movs	r0, #10
   191d8:	e771      	b.n	190be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

000191da <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
   191da:	223e      	movs	r2, #62	; 0x3e
   191dc:	7002      	strb	r2, [r0, #0]
   191de:	2201      	movs	r2, #1
   191e0:	7082      	strb	r2, [r0, #2]
   191e2:	790a      	ldrb	r2, [r1, #4]
   191e4:	70c2      	strb	r2, [r0, #3]
   191e6:	798a      	ldrb	r2, [r1, #6]
   191e8:	7102      	strb	r2, [r0, #4]
   191ea:	88ca      	ldrh	r2, [r1, #6]
   191ec:	0a12      	lsrs	r2, r2, #8
   191ee:	7142      	strb	r2, [r0, #5]
   191f0:	7a0a      	ldrb	r2, [r1, #8]
   191f2:	7182      	strb	r2, [r0, #6]
   191f4:	7a4a      	ldrb	r2, [r1, #9]
   191f6:	71c2      	strb	r2, [r0, #7]
   191f8:	f8d1 200a 	ldr.w	r2, [r1, #10]
   191fc:	6082      	str	r2, [r0, #8]
   191fe:	89ca      	ldrh	r2, [r1, #14]
   19200:	8182      	strh	r2, [r0, #12]
   19202:	7c0a      	ldrb	r2, [r1, #16]
   19204:	7382      	strb	r2, [r0, #14]
   19206:	8a0a      	ldrh	r2, [r1, #16]
   19208:	0a12      	lsrs	r2, r2, #8
   1920a:	73c2      	strb	r2, [r0, #15]
   1920c:	7c8a      	ldrb	r2, [r1, #18]
   1920e:	7402      	strb	r2, [r0, #16]
   19210:	8a4a      	ldrh	r2, [r1, #18]
   19212:	0a12      	lsrs	r2, r2, #8
   19214:	7442      	strb	r2, [r0, #17]
   19216:	7d0a      	ldrb	r2, [r1, #20]
   19218:	7482      	strb	r2, [r0, #18]
   1921a:	8a8a      	ldrh	r2, [r1, #20]
   1921c:	0a12      	lsrs	r2, r2, #8
   1921e:	74c2      	strb	r2, [r0, #19]
   19220:	7d89      	ldrb	r1, [r1, #22]
   19222:	7501      	strb	r1, [r0, #20]
   19224:	2013      	movs	r0, #19
   19226:	4770      	bx	lr

00019228 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
   19228:	223e      	movs	r2, #62	; 0x3e
   1922a:	7002      	strb	r2, [r0, #0]
   1922c:	2201      	movs	r2, #1
   1922e:	7082      	strb	r2, [r0, #2]
   19230:	f811 2f04 	ldrb.w	r2, [r1, #4]!
   19234:	70c2      	strb	r2, [r0, #3]
   19236:	788a      	ldrb	r2, [r1, #2]
   19238:	7102      	strb	r2, [r0, #4]
   1923a:	884a      	ldrh	r2, [r1, #2]
   1923c:	0a12      	lsrs	r2, r2, #8
   1923e:	7142      	strb	r2, [r0, #5]
   19240:	790a      	ldrb	r2, [r1, #4]
   19242:	7182      	strb	r2, [r0, #6]
   19244:	794a      	ldrb	r2, [r1, #5]
   19246:	71c2      	strb	r2, [r0, #7]
   19248:	f8d1 2006 	ldr.w	r2, [r1, #6]
   1924c:	6082      	str	r2, [r0, #8]
   1924e:	894a      	ldrh	r2, [r1, #10]
   19250:	8182      	strh	r2, [r0, #12]
   19252:	7e0a      	ldrb	r2, [r1, #24]
   19254:	7382      	strb	r2, [r0, #14]
   19256:	8b0a      	ldrh	r2, [r1, #24]
   19258:	0a12      	lsrs	r2, r2, #8
   1925a:	73c2      	strb	r2, [r0, #15]
   1925c:	7e8a      	ldrb	r2, [r1, #26]
   1925e:	7402      	strb	r2, [r0, #16]
   19260:	8b4a      	ldrh	r2, [r1, #26]
   19262:	0a12      	lsrs	r2, r2, #8
   19264:	7442      	strb	r2, [r0, #17]
   19266:	7f0a      	ldrb	r2, [r1, #28]
   19268:	7482      	strb	r2, [r0, #18]
   1926a:	8b8a      	ldrh	r2, [r1, #28]
   1926c:	0a12      	lsrs	r2, r2, #8
   1926e:	74c2      	strb	r2, [r0, #19]
   19270:	7f89      	ldrb	r1, [r1, #30]
   19272:	7501      	strb	r1, [r0, #20]
   19274:	2113      	movs	r1, #19
   19276:	7041      	strb	r1, [r0, #1]
   19278:	4608      	mov	r0, r1
   1927a:	4770      	bx	lr

0001927c <sdc_hci_data_get>:
   1927c:	b510      	push	{r4, lr}
   1927e:	b120      	cbz	r0, 1928a <sdc_hci_data_get+0xe>
   19280:	f7ff fda4 	bl	18dcc <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
   19284:	b120      	cbz	r0, 19290 <sdc_hci_data_get+0x14>
   19286:	2000      	movs	r0, #0
   19288:	bd10      	pop	{r4, pc}
   1928a:	f06f 0015 	mvn.w	r0, #21
   1928e:	bd10      	pop	{r4, pc}
   19290:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19294:	bd10      	pop	{r4, pc}

00019296 <sdc_hci_data_put>:
   19296:	b510      	push	{r4, lr}
   19298:	f06f 0415 	mvn.w	r4, #21
   1929c:	b120      	cbz	r0, 192a8 <sdc_hci_data_put+0x12>
   1929e:	f7ff fda3 	bl	18de8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
   192a2:	b108      	cbz	r0, 192a8 <sdc_hci_data_put+0x12>
   192a4:	2000      	movs	r0, #0
   192a6:	bd10      	pop	{r4, pc}
   192a8:	4620      	mov	r0, r4
   192aa:	bd10      	pop	{r4, pc}

000192ac <sdc_hci_evt_get>:
   192ac:	b510      	push	{r4, lr}
   192ae:	b120      	cbz	r0, 192ba <sdc_hci_evt_get+0xe>
   192b0:	f7ff fda3 	bl	18dfa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
   192b4:	b120      	cbz	r0, 192c0 <sdc_hci_evt_get+0x14>
   192b6:	2000      	movs	r0, #0
   192b8:	bd10      	pop	{r4, pc}
   192ba:	f06f 0015 	mvn.w	r0, #21
   192be:	bd10      	pop	{r4, pc}
   192c0:	f06f 0022 	mvn.w	r0, #34	; 0x22
   192c4:	bd10      	pop	{r4, pc}

000192c6 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
   192c6:	f002 beda 	b.w	1c07e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

000192ca <sdc_hci_cmd_cb_read_transmit_power_level>:
   192ca:	f002 bf1c 	b.w	1c106 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

000192ce <sdc_hci_cmd_cb_set_event_mask>:
   192ce:	b510      	push	{r4, lr}
   192d0:	f7f7 fd28 	bl	10d24 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
   192d4:	2000      	movs	r0, #0
   192d6:	bd10      	pop	{r4, pc}

000192d8 <sdc_hci_cmd_cb_set_event_mask_page_2>:
   192d8:	b510      	push	{r4, lr}
   192da:	f7f7 fd31 	bl	10d40 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
   192de:	2000      	movs	r0, #0
   192e0:	bd10      	pop	{r4, pc}

000192e2 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
   192e2:	f002 bf2c 	b.w	1c13e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

000192e6 <sdc_hci_cmd_vs_conn_event_extend>:
   192e6:	b508      	push	{r3, lr}
   192e8:	7800      	ldrb	r0, [r0, #0]
   192ea:	f88d 0000 	strb.w	r0, [sp]
   192ee:	4668      	mov	r0, sp
   192f0:	f002 fddc 	bl	1beac <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   192f4:	bd08      	pop	{r3, pc}

000192f6 <sdc_hci_cmd_vs_conn_update>:
   192f6:	2001      	movs	r0, #1
   192f8:	4770      	bx	lr

000192fa <sdc_hci_cmd_vs_event_length_set>:
   192fa:	f7fd bc01 	b.w	16b00 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

000192fe <sdc_hci_cmd_vs_llpm_mode_set>:
   192fe:	2001      	movs	r0, #1
   19300:	4770      	bx	lr

00019302 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
   19302:	7800      	ldrb	r0, [r0, #0]
   19304:	b100      	cbz	r0, 19308 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
   19306:	2001      	movs	r0, #1
   19308:	f002 bd55 	b.w	1bdb6 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0001930c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
   1930c:	b570      	push	{r4, r5, r6, lr}
   1930e:	4605      	mov	r5, r0
   19310:	2210      	movs	r2, #16
   19312:	2100      	movs	r1, #0
   19314:	f7ff fc79 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   19318:	2210      	movs	r2, #16
   1931a:	2100      	movs	r1, #0
   1931c:	f105 0010 	add.w	r0, r5, #16
   19320:	f7ff fc73 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   19324:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   19328:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   1932c:	1c40      	adds	r0, r0, #1
   1932e:	d10b      	bne.n	19348 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   19330:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   19334:	1c40      	adds	r0, r0, #1
   19336:	d107      	bne.n	19348 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   19338:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   1933c:	1c40      	adds	r0, r0, #1
   1933e:	d103      	bne.n	19348 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   19340:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   19344:	1c40      	adds	r0, r0, #1
   19346:	d00b      	beq.n	19360 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
   19348:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   1934c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   19350:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   19354:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   19358:	612a      	str	r2, [r5, #16]
   1935a:	6168      	str	r0, [r5, #20]
   1935c:	61a9      	str	r1, [r5, #24]
   1935e:	61eb      	str	r3, [r5, #28]
   19360:	2000      	movs	r0, #0
   19362:	f7f8 fa81 	bl	11868 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   19366:	b918      	cbnz	r0, 19370 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
   19368:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1936c:	07c0      	lsls	r0, r0, #31
   1936e:	d118      	bne.n	193a2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   19370:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   19374:	1c40      	adds	r0, r0, #1
   19376:	d10b      	bne.n	19390 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   19378:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1937c:	1c40      	adds	r0, r0, #1
   1937e:	d107      	bne.n	19390 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   19380:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   19384:	1c40      	adds	r0, r0, #1
   19386:	d103      	bne.n	19390 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   19388:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1938c:	1c40      	adds	r0, r0, #1
   1938e:	d008      	beq.n	193a2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   19390:	f854 0f90 	ldr.w	r0, [r4, #144]!
   19394:	6861      	ldr	r1, [r4, #4]
   19396:	68a2      	ldr	r2, [r4, #8]
   19398:	68e3      	ldr	r3, [r4, #12]
   1939a:	6028      	str	r0, [r5, #0]
   1939c:	6069      	str	r1, [r5, #4]
   1939e:	60aa      	str	r2, [r5, #8]
   193a0:	60eb      	str	r3, [r5, #12]
   193a2:	2000      	movs	r0, #0
   193a4:	bd70      	pop	{r4, r5, r6, pc}

000193a6 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
   193a6:	b538      	push	{r3, r4, r5, lr}
   193a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   193ac:	4604      	mov	r4, r0
   193ae:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   193b2:	1c40      	adds	r0, r0, #1
   193b4:	d105      	bne.n	193c2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
   193b6:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   193ba:	43c0      	mvns	r0, r0
   193bc:	0400      	lsls	r0, r0, #16
   193be:	0c00      	lsrs	r0, r0, #16
   193c0:	d03e      	beq.n	19440 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   193c2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
   193c6:	07c0      	lsls	r0, r0, #31
   193c8:	d03a      	beq.n	19440 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   193ca:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   193ce:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
   193d2:	f8ad 1000 	strh.w	r1, [sp]
   193d6:	f8c4 0001 	str.w	r0, [r4, #1]
   193da:	f8bd 0000 	ldrh.w	r0, [sp]
   193de:	f8a4 0005 	strh.w	r0, [r4, #5]
   193e2:	79a0      	ldrb	r0, [r4, #6]
   193e4:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   193e8:	71a0      	strb	r0, [r4, #6]
   193ea:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
   193ee:	1c40      	adds	r0, r0, #1
   193f0:	d00f      	beq.n	19412 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   193f2:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
   193f6:	1c40      	adds	r0, r0, #1
   193f8:	d00b      	beq.n	19412 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   193fa:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
   193fe:	1c40      	adds	r0, r0, #1
   19400:	d007      	beq.n	19412 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   19402:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   19406:	1c40      	adds	r0, r0, #1
   19408:	d003      	beq.n	19412 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1940a:	2000      	movs	r0, #0
   1940c:	f7f8 fa2c 	bl	11868 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   19410:	b140      	cbz	r0, 19424 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
   19412:	2210      	movs	r2, #16
   19414:	2100      	movs	r1, #0
   19416:	1de0      	adds	r0, r4, #7
   19418:	f7ff fbf7 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1941c:	2001      	movs	r0, #1
   1941e:	7020      	strb	r0, [r4, #0]
   19420:	2000      	movs	r0, #0
   19422:	bd38      	pop	{r3, r4, r5, pc}
   19424:	f855 2f90 	ldr.w	r2, [r5, #144]!
   19428:	6869      	ldr	r1, [r5, #4]
   1942a:	68a8      	ldr	r0, [r5, #8]
   1942c:	68eb      	ldr	r3, [r5, #12]
   1942e:	f8c4 2007 	str.w	r2, [r4, #7]
   19432:	f8c4 100b 	str.w	r1, [r4, #11]
   19436:	f8c4 000f 	str.w	r0, [r4, #15]
   1943a:	f8c4 3013 	str.w	r3, [r4, #19]
   1943e:	e7ed      	b.n	1941c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
   19440:	2000      	movs	r0, #0
   19442:	e7ec      	b.n	1941e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

00019444 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
   19444:	f002 bd24 	b.w	1be90 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

00019448 <sdc_hci_cmd_ip_read_bd_addr>:
   19448:	f002 be2a 	b.w	1c0a0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0001944c <sdc_hci_cmd_ip_read_local_version_information>:
   1944c:	f7fd bb66 	b.w	16b1c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00019450 <sdc_hci_cmd_le_add_device_to_resolving_list>:
   19450:	f002 ba08 	b.w	1b864 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

00019454 <sdc_hci_cmd_le_add_device_to_white_list>:
   19454:	f002 ba21 	b.w	1b89a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00019458 <sdc_hci_cmd_le_clear_resolving_list>:
   19458:	f002 ba36 	b.w	1b8c8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0001945c <sdc_hci_cmd_le_clear_white_list>:
   1945c:	f002 ba41 	b.w	1b8e2 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00019460 <sdc_hci_cmd_le_encrypt>:
   19460:	f002 ba49 	b.w	1b8f6 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00019464 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
   19464:	8802      	ldrh	r2, [r0, #0]
   19466:	800a      	strh	r2, [r1, #0]
   19468:	f002 ba4e 	b.w	1b908 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0001946c <sdc_hci_cmd_le_long_term_key_request_reply>:
   1946c:	8802      	ldrh	r2, [r0, #0]
   1946e:	800a      	strh	r2, [r1, #0]
   19470:	f002 ba63 	b.w	1b93a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

00019474 <sdc_hci_cmd_le_rand>:
   19474:	f002 ba8b 	b.w	1b98e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00019478 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
   19478:	f002 ba8f 	b.w	1b99a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0001947c <sdc_hci_cmd_le_read_buffer_size>:
   1947c:	f7fd ba96 	b.w	169ac <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00019480 <sdc_hci_cmd_le_read_channel_map>:
   19480:	f7fd ba9e 	b.w	169c0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

00019484 <sdc_hci_cmd_le_read_max_data_length>:
   19484:	f002 ba92 	b.w	1b9ac <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

00019488 <sdc_hci_cmd_le_read_phy>:
   19488:	f002 baa0 	b.w	1b9cc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0001948c <sdc_hci_cmd_le_read_remote_features>:
   1948c:	f7fd bac2 	b.w	16a14 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

00019490 <sdc_hci_cmd_le_read_resolving_list_size>:
   19490:	f002 bac7 	b.w	1ba22 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

00019494 <sdc_hci_cmd_le_read_suggested_default_data_length>:
   19494:	f7fd bade 	b.w	16a54 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

00019498 <sdc_hci_cmd_le_read_transmit_power>:
   19498:	f002 bac7 	b.w	1ba2a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0001949c <sdc_hci_cmd_le_read_white_list_size>:
   1949c:	f002 bace 	b.w	1ba3c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

000194a0 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
   194a0:	f002 bad0 	b.w	1ba44 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

000194a4 <sdc_hci_cmd_le_remove_device_from_white_list>:
   194a4:	f002 bae7 	b.w	1ba76 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

000194a8 <sdc_hci_cmd_le_set_address_resolution_enable>:
   194a8:	f002 bafa 	b.w	1baa0 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

000194ac <sdc_hci_cmd_le_set_adv_data>:
   194ac:	f002 bb06 	b.w	1babc <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

000194b0 <sdc_hci_cmd_le_set_adv_enable>:
   194b0:	f002 bb19 	b.w	1bae6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

000194b4 <sdc_hci_cmd_le_set_adv_params>:
   194b4:	f002 bb4a 	b.w	1bb4c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

000194b8 <sdc_hci_cmd_le_set_data_length>:
   194b8:	f002 bbdd 	b.w	1bc76 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

000194bc <sdc_hci_cmd_le_set_default_phy>:
   194bc:	f7fd bada 	b.w	16a74 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

000194c0 <sdc_hci_cmd_le_set_event_mask>:
   194c0:	b510      	push	{r4, lr}
   194c2:	f7f7 fc29 	bl	10d18 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
   194c6:	2000      	movs	r0, #0
   194c8:	bd10      	pop	{r4, pc}

000194ca <sdc_hci_cmd_le_set_phy>:
   194ca:	f002 bbfb 	b.w	1bcc4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

000194ce <sdc_hci_cmd_le_set_privacy_mode>:
   194ce:	f002 bc19 	b.w	1bd04 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

000194d2 <sdc_hci_cmd_le_set_random_address>:
   194d2:	f002 bc2d 	b.w	1bd30 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

000194d6 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
   194d6:	f002 bc39 	b.w	1bd4c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

000194da <sdc_hci_cmd_le_set_scan_response_data>:
   194da:	f002 bc40 	b.w	1bd5e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

000194de <sdc_hci_cmd_le_write_suggested_default_data_length>:
   194de:	f002 bc53 	b.w	1bd88 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

000194e2 <sdc_hci_cmd_lc_disconnect>:
   194e2:	f002 b96b 	b.w	1b7bc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

000194e6 <sdc_hci_cmd_lc_read_remote_version_information>:
   194e6:	f002 bde7 	b.w	1c0b8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
   194ea:	b570      	push	{r4, r5, r6, lr}
   194ec:	880b      	ldrh	r3, [r1, #0]
   194ee:	7f04      	ldrb	r4, [r0, #28]
   194f0:	f100 0524 	add.w	r5, r0, #36	; 0x24
   194f4:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
   194f8:	8802      	ldrh	r2, [r0, #0]
   194fa:	4435      	add	r5, r6
   194fc:	1da4      	adds	r4, r4, #6
   194fe:	882d      	ldrh	r5, [r5, #0]
   19500:	4422      	add	r2, r4
   19502:	b292      	uxth	r2, r2
   19504:	4425      	add	r5, r4
   19506:	1e54      	subs	r4, r2, #1
   19508:	442c      	add	r4, r5
   1950a:	fb94 f4f2 	sdiv	r4, r4, r2
   1950e:	fb02 6204 	mla	r2, r2, r4, r6
   19512:	8840      	ldrh	r0, [r0, #2]
   19514:	b292      	uxth	r2, r2
   19516:	4290      	cmp	r0, r2
   19518:	d903      	bls.n	19522 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
   1951a:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
   1951e:	4310      	orrs	r0, r2
   19520:	e002      	b.n	19528 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
   19522:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   19526:	4398      	bics	r0, r3
   19528:	8008      	strh	r0, [r1, #0]
   1952a:	bd70      	pop	{r4, r5, r6, pc}
   1952c:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   19530:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   19534:	429a      	cmp	r2, r3
   19536:	d107      	bne.n	19548 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
   19538:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
   1953c:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
   19540:	4288      	cmp	r0, r1
   19542:	d001      	beq.n	19548 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
   19544:	2001      	movs	r0, #1
   19546:	4770      	bx	lr
   19548:	2000      	movs	r0, #0
   1954a:	4770      	bx	lr

0001954c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
   1954c:	b570      	push	{r4, r5, r6, lr}
   1954e:	7f00      	ldrb	r0, [r0, #28]
   19550:	461c      	mov	r4, r3
   19552:	1d80      	adds	r0, r0, #6
   19554:	4408      	add	r0, r1
   19556:	4613      	mov	r3, r2
   19558:	8809      	ldrh	r1, [r1, #0]
   1955a:	9a04      	ldr	r2, [sp, #16]
   1955c:	1cc9      	adds	r1, r1, #3
   1955e:	b289      	uxth	r1, r1
   19560:	1915      	adds	r5, r2, r4
   19562:	1ec0      	subs	r0, r0, #3
   19564:	428d      	cmp	r5, r1
   19566:	d805      	bhi.n	19574 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
   19568:	1881      	adds	r1, r0, r2
   1956a:	4622      	mov	r2, r4
   1956c:	4618      	mov	r0, r3
   1956e:	f7ff fad2 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19572:	e000      	b.n	19576 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
   19574:	2400      	movs	r4, #0
   19576:	4620      	mov	r0, r4
   19578:	bd70      	pop	{r4, r5, r6, pc}

0001957a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
   1957a:	b570      	push	{r4, r5, r6, lr}
   1957c:	7f00      	ldrb	r0, [r0, #28]
   1957e:	461c      	mov	r4, r3
   19580:	1d80      	adds	r0, r0, #6
   19582:	4408      	add	r0, r1
   19584:	4613      	mov	r3, r2
   19586:	8809      	ldrh	r1, [r1, #0]
   19588:	9a04      	ldr	r2, [sp, #16]
   1958a:	1cc9      	adds	r1, r1, #3
   1958c:	b289      	uxth	r1, r1
   1958e:	1915      	adds	r5, r2, r4
   19590:	1ec0      	subs	r0, r0, #3
   19592:	428d      	cmp	r5, r1
   19594:	d805      	bhi.n	195a2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
   19596:	4410      	add	r0, r2
   19598:	4622      	mov	r2, r4
   1959a:	4619      	mov	r1, r3
   1959c:	f7ff fabb 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   195a0:	e000      	b.n	195a4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
   195a2:	2400      	movs	r4, #0
   195a4:	4620      	mov	r0, r4
   195a6:	bd70      	pop	{r4, r5, r6, pc}

000195a8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
   195a8:	8881      	ldrh	r1, [r0, #4]
   195aa:	88c0      	ldrh	r0, [r0, #6]
   195ac:	4288      	cmp	r0, r1
   195ae:	d101      	bne.n	195b4 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
   195b0:	2001      	movs	r0, #1
   195b2:	4770      	bx	lr
   195b4:	2000      	movs	r0, #0
   195b6:	4770      	bx	lr

000195b8 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
   195b8:	8881      	ldrh	r1, [r0, #4]
   195ba:	8900      	ldrh	r0, [r0, #8]
   195bc:	4288      	cmp	r0, r1
   195be:	d101      	bne.n	195c4 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
   195c0:	2001      	movs	r0, #1
   195c2:	4770      	bx	lr
   195c4:	2000      	movs	r0, #0
   195c6:	4770      	bx	lr

000195c8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
   195c8:	b570      	push	{r4, r5, r6, lr}
   195ca:	4604      	mov	r4, r0
   195cc:	f100 0124 	add.w	r1, r0, #36	; 0x24
   195d0:	8880      	ldrh	r0, [r0, #4]
   195d2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   195d6:	4401      	add	r1, r0
   195d8:	8a20      	ldrh	r0, [r4, #16]
   195da:	2800      	cmp	r0, #0
   195dc:	d01a      	beq.n	19614 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
   195de:	89a2      	ldrh	r2, [r4, #12]
   195e0:	2500      	movs	r5, #0
   195e2:	4410      	add	r0, r2
   195e4:	b280      	uxth	r0, r0
   195e6:	81a0      	strh	r0, [r4, #12]
   195e8:	880a      	ldrh	r2, [r1, #0]
   195ea:	4290      	cmp	r0, r2
   195ec:	d905      	bls.n	195fa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
   195ee:	f240 1163 	movw	r1, #355	; 0x163
   195f2:	f04f 0014 	mov.w	r0, #20
   195f6:	f7f7 fa0d 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   195fa:	d109      	bne.n	19610 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
   195fc:	69a0      	ldr	r0, [r4, #24]
   195fe:	b108      	cbz	r0, 19604 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
   19600:	7f40      	ldrb	r0, [r0, #29]
   19602:	7088      	strb	r0, [r1, #2]
   19604:	f104 0104 	add.w	r1, r4, #4
   19608:	4620      	mov	r0, r4
   1960a:	f7ff ff6e 	bl	194ea <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1960e:	81a5      	strh	r5, [r4, #12]
   19610:	8225      	strh	r5, [r4, #16]
   19612:	2001      	movs	r0, #1
   19614:	bd70      	pop	{r4, r5, r6, pc}

00019616 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
   19616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19618:	4604      	mov	r4, r0
   1961a:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1961e:	88c0      	ldrh	r0, [r0, #6]
   19620:	460e      	mov	r6, r1
   19622:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   19626:	8a60      	ldrh	r0, [r4, #18]
   19628:	19d9      	adds	r1, r3, r7
   1962a:	b108      	cbz	r0, 19630 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
   1962c:	42b0      	cmp	r0, r6
   1962e:	d201      	bcs.n	19634 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
   19630:	2000      	movs	r0, #0
   19632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19634:	89e0      	ldrh	r0, [r4, #14]
   19636:	2500      	movs	r5, #0
   19638:	b140      	cbz	r0, 1964c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
   1963a:	f8b1 c000 	ldrh.w	ip, [r1]
   1963e:	4560      	cmp	r0, ip
   19640:	d008      	beq.n	19654 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
   19642:	f240 214b 	movw	r1, #587	; 0x24b
   19646:	2014      	movs	r0, #20
   19648:	f7f7 f9e4 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1964c:	7f60      	ldrb	r0, [r4, #29]
   1964e:	7088      	strb	r0, [r1, #2]
   19650:	800d      	strh	r5, [r1, #0]
   19652:	e00e      	b.n	19672 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
   19654:	f894 c01c 	ldrb.w	ip, [r4, #28]
   19658:	4418      	add	r0, r3
   1965a:	f10c 0c06 	add.w	ip, ip, #6
   1965e:	44bc      	add	ip, r7
   19660:	4460      	add	r0, ip
   19662:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   19666:	f820 cc03 	strh.w	ip, [r0, #-3]
   1966a:	f894 c020 	ldrb.w	ip, [r4, #32]
   1966e:	f800 cc01 	strb.w	ip, [r0, #-1]
   19672:	89e0      	ldrh	r0, [r4, #14]
   19674:	4430      	add	r0, r6
   19676:	81e0      	strh	r0, [r4, #14]
   19678:	8808      	ldrh	r0, [r1, #0]
   1967a:	4430      	add	r0, r6
   1967c:	8008      	strh	r0, [r1, #0]
   1967e:	b19a      	cbz	r2, 196a8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
   19680:	1da1      	adds	r1, r4, #6
   19682:	4620      	mov	r0, r4
   19684:	f7ff ff31 	bl	194ea <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   19688:	81e5      	strh	r5, [r4, #14]
   1968a:	7f60      	ldrb	r0, [r4, #29]
   1968c:	1c40      	adds	r0, r0, #1
   1968e:	7760      	strb	r0, [r4, #29]
   19690:	7da0      	ldrb	r0, [r4, #22]
   19692:	f88d 0000 	strb.w	r0, [sp]
   19696:	9800      	ldr	r0, [sp, #0]
   19698:	9000      	str	r0, [sp, #0]
   1969a:	f89d 0000 	ldrb.w	r0, [sp]
   1969e:	b178      	cbz	r0, 196c0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
   196a0:	88e0      	ldrh	r0, [r4, #6]
   196a2:	82a0      	strh	r0, [r4, #20]
   196a4:	75a5      	strb	r5, [r4, #22]
   196a6:	e00b      	b.n	196c0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
   196a8:	7f20      	ldrb	r0, [r4, #28]
   196aa:	89e1      	ldrh	r1, [r4, #14]
   196ac:	1d80      	adds	r0, r0, #6
   196ae:	4438      	add	r0, r7
   196b0:	4419      	add	r1, r3
   196b2:	4408      	add	r0, r1
   196b4:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
   196b8:	83e1      	strh	r1, [r4, #30]
   196ba:	7880      	ldrb	r0, [r0, #2]
   196bc:	f884 0020 	strb.w	r0, [r4, #32]
   196c0:	8265      	strh	r5, [r4, #18]
   196c2:	2001      	movs	r0, #1
   196c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000196c6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
   196c6:	b510      	push	{r4, lr}
   196c8:	4604      	mov	r4, r0
   196ca:	88c0      	ldrh	r0, [r0, #6]
   196cc:	88a1      	ldrh	r1, [r4, #4]
   196ce:	4281      	cmp	r1, r0
   196d0:	d007      	beq.n	196e2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
   196d2:	89a0      	ldrh	r0, [r4, #12]
   196d4:	b928      	cbnz	r0, 196e2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
   196d6:	8a20      	ldrh	r0, [r4, #16]
   196d8:	b918      	cbnz	r0, 196e2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
   196da:	88a0      	ldrh	r0, [r4, #4]
   196dc:	8aa1      	ldrh	r1, [r4, #20]
   196de:	4288      	cmp	r0, r1
   196e0:	d101      	bne.n	196e6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
   196e2:	2000      	movs	r0, #0
   196e4:	bd10      	pop	{r4, pc}
   196e6:	1d21      	adds	r1, r4, #4
   196e8:	4620      	mov	r0, r4
   196ea:	f7ff fefe 	bl	194ea <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   196ee:	2000      	movs	r0, #0
   196f0:	8220      	strh	r0, [r4, #16]
   196f2:	2001      	movs	r0, #1
   196f4:	bd10      	pop	{r4, pc}

000196f6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
   196f6:	b510      	push	{r4, lr}
   196f8:	4604      	mov	r4, r0
   196fa:	f100 0224 	add.w	r2, r0, #36	; 0x24
   196fe:	88c0      	ldrh	r0, [r0, #6]
   19700:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   19704:	4402      	add	r2, r0
   19706:	8820      	ldrh	r0, [r4, #0]
   19708:	2845      	cmp	r0, #69	; 0x45
   1970a:	d200      	bcs.n	1970e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
   1970c:	2045      	movs	r0, #69	; 0x45
   1970e:	4288      	cmp	r0, r1
   19710:	d204      	bcs.n	1971c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
   19712:	f240 1119 	movw	r1, #281	; 0x119
   19716:	2014      	movs	r0, #20
   19718:	f7f7 f97c 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1971c:	7de0      	ldrb	r0, [r4, #23]
   1971e:	2800      	cmp	r0, #0
   19720:	d003      	beq.n	1972a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
   19722:	8810      	ldrh	r0, [r2, #0]
   19724:	4288      	cmp	r0, r1
   19726:	d201      	bcs.n	1972c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
   19728:	2000      	movs	r0, #0
   1972a:	bd10      	pop	{r4, pc}
   1972c:	8011      	strh	r1, [r2, #0]
   1972e:	1da1      	adds	r1, r4, #6
   19730:	4620      	mov	r0, r4
   19732:	f7ff feda 	bl	194ea <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   19736:	2000      	movs	r0, #0
   19738:	75e0      	strb	r0, [r4, #23]
   1973a:	2001      	movs	r0, #1
   1973c:	bd10      	pop	{r4, pc}

0001973e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
   1973e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19742:	8941      	ldrh	r1, [r0, #10]
   19744:	8886      	ldrh	r6, [r0, #4]
   19746:	4604      	mov	r4, r0
   19748:	2500      	movs	r5, #0
   1974a:	f100 070a 	add.w	r7, r0, #10
   1974e:	e006      	b.n	1975e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
   19750:	4639      	mov	r1, r7
   19752:	4620      	mov	r0, r4
   19754:	f7ff fec9 	bl	194ea <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   19758:	1c6d      	adds	r5, r5, #1
   1975a:	8961      	ldrh	r1, [r4, #10]
   1975c:	b2ad      	uxth	r5, r5
   1975e:	42b1      	cmp	r1, r6
   19760:	d1f6      	bne.n	19750 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
   19762:	4628      	mov	r0, r5
   19764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019768 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
   19768:	b530      	push	{r4, r5, lr}
   1976a:	88c4      	ldrh	r4, [r0, #6]
   1976c:	8881      	ldrh	r1, [r0, #4]
   1976e:	f100 0224 	add.w	r2, r0, #36	; 0x24
   19772:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   19776:	4413      	add	r3, r2
   19778:	8882      	ldrh	r2, [r0, #4]
   1977a:	8a85      	ldrh	r5, [r0, #20]
   1977c:	42aa      	cmp	r2, r5
   1977e:	d012      	beq.n	197a6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
   19780:	42a1      	cmp	r1, r4
   19782:	d010      	beq.n	197a6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
   19784:	8981      	ldrh	r1, [r0, #12]
   19786:	b971      	cbnz	r1, 197a6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
   19788:	6982      	ldr	r2, [r0, #24]
   1978a:	b172      	cbz	r2, 197aa <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   1978c:	4610      	mov	r0, r2
   1978e:	f7ff ff13 	bl	195b8 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
   19792:	b950      	cbnz	r0, 197aa <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   19794:	8910      	ldrh	r0, [r2, #8]
   19796:	3224      	adds	r2, #36	; 0x24
   19798:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   1979c:	4410      	add	r0, r2
   1979e:	7899      	ldrb	r1, [r3, #2]
   197a0:	7880      	ldrb	r0, [r0, #2]
   197a2:	4288      	cmp	r0, r1
   197a4:	d101      	bne.n	197aa <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   197a6:	2000      	movs	r0, #0
   197a8:	bd30      	pop	{r4, r5, pc}
   197aa:	4618      	mov	r0, r3
   197ac:	bd30      	pop	{r4, r5, pc}

000197ae <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
   197ae:	7f00      	ldrb	r0, [r0, #28]
   197b0:	1d80      	adds	r0, r0, #6
   197b2:	4408      	add	r0, r1
   197b4:	1ec0      	subs	r0, r0, #3
   197b6:	6010      	str	r0, [r2, #0]
   197b8:	8808      	ldrh	r0, [r1, #0]
   197ba:	4770      	bx	lr

000197bc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
   197bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   197c0:	460e      	mov	r6, r1
   197c2:	88c1      	ldrh	r1, [r0, #6]
   197c4:	8902      	ldrh	r2, [r0, #8]
   197c6:	4604      	mov	r4, r0
   197c8:	f100 0824 	add.w	r8, r0, #36	; 0x24
   197cc:	8800      	ldrh	r0, [r0, #0]
   197ce:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
   197d2:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
   197d6:	2845      	cmp	r0, #69	; 0x45
   197d8:	d200      	bcs.n	197dc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
   197da:	2045      	movs	r0, #69	; 0x45
   197dc:	42b0      	cmp	r0, r6
   197de:	d203      	bcs.n	197e8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
   197e0:	21db      	movs	r1, #219	; 0xdb
   197e2:	2014      	movs	r0, #20
   197e4:	f7f7 f916 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   197e8:	4610      	mov	r0, r2
   197ea:	f7ff fe9f 	bl	1952c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
   197ee:	b110      	cbz	r0, 197f6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
   197f0:	2000      	movs	r0, #0
   197f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   197f6:	42af      	cmp	r7, r5
   197f8:	d908      	bls.n	1980c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
   197fa:	7f21      	ldrb	r1, [r4, #28]
   197fc:	1b78      	subs	r0, r7, r5
   197fe:	1a40      	subs	r0, r0, r1
   19800:	1f80      	subs	r0, r0, #6
   19802:	4286      	cmp	r6, r0
   19804:	dd02      	ble.n	1980c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
   19806:	2000      	movs	r0, #0
   19808:	75e0      	strb	r0, [r4, #23]
   1980a:	e7f1      	b.n	197f0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
   1980c:	eb08 0005 	add.w	r0, r8, r5
   19810:	2101      	movs	r1, #1
   19812:	8006      	strh	r6, [r0, #0]
   19814:	75e1      	strb	r1, [r4, #23]
   19816:	e7ec      	b.n	197f2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

00019818 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
   19818:	b538      	push	{r3, r4, r5, lr}
   1981a:	88c4      	ldrh	r4, [r0, #6]
   1981c:	8881      	ldrh	r1, [r0, #4]
   1981e:	f100 0224 	add.w	r2, r0, #36	; 0x24
   19822:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   19826:	441a      	add	r2, r3
   19828:	42a1      	cmp	r1, r4
   1982a:	d010      	beq.n	1984e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
   1982c:	8983      	ldrh	r3, [r0, #12]
   1982e:	8a05      	ldrh	r5, [r0, #16]
   19830:	8812      	ldrh	r2, [r2, #0]
   19832:	442b      	add	r3, r5
   19834:	4293      	cmp	r3, r2
   19836:	d308      	bcc.n	1984a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
   19838:	f8ad 1000 	strh.w	r1, [sp]
   1983c:	4669      	mov	r1, sp
   1983e:	f7ff fe54 	bl	194ea <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   19842:	f8bd 0000 	ldrh.w	r0, [sp]
   19846:	42a0      	cmp	r0, r4
   19848:	d001      	beq.n	1984e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
   1984a:	2001      	movs	r0, #1
   1984c:	bd38      	pop	{r3, r4, r5, pc}
   1984e:	2000      	movs	r0, #0
   19850:	bd38      	pop	{r3, r4, r5, pc}

00019852 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
   19852:	b570      	push	{r4, r5, r6, lr}
   19854:	88c6      	ldrh	r6, [r0, #6]
   19856:	8885      	ldrh	r5, [r0, #4]
   19858:	4603      	mov	r3, r0
   1985a:	f100 0424 	add.w	r4, r0, #36	; 0x24
   1985e:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
   19862:	4420      	add	r0, r4
   19864:	42b5      	cmp	r5, r6
   19866:	d102      	bne.n	1986e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
   19868:	2000      	movs	r0, #0
   1986a:	8218      	strh	r0, [r3, #16]
   1986c:	bd70      	pop	{r4, r5, r6, pc}
   1986e:	8804      	ldrh	r4, [r0, #0]
   19870:	899d      	ldrh	r5, [r3, #12]
   19872:	7f1e      	ldrb	r6, [r3, #28]
   19874:	1b64      	subs	r4, r4, r5
   19876:	4435      	add	r5, r6
   19878:	4428      	add	r0, r5
   1987a:	880d      	ldrh	r5, [r1, #0]
   1987c:	b2a4      	uxth	r4, r4
   1987e:	1cc0      	adds	r0, r0, #3
   19880:	42a5      	cmp	r5, r4
   19882:	d900      	bls.n	19886 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
   19884:	800c      	strh	r4, [r1, #0]
   19886:	899c      	ldrh	r4, [r3, #12]
   19888:	b124      	cbz	r4, 19894 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
   1988a:	2400      	movs	r4, #0
   1988c:	7014      	strb	r4, [r2, #0]
   1988e:	8809      	ldrh	r1, [r1, #0]
   19890:	8219      	strh	r1, [r3, #16]
   19892:	bd70      	pop	{r4, r5, r6, pc}
   19894:	2401      	movs	r4, #1
   19896:	e7f9      	b.n	1988c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

00019898 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
   19898:	b508      	push	{r3, lr}
   1989a:	8a81      	ldrh	r1, [r0, #20]
   1989c:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
   198a0:	3aff      	subs	r2, #255	; 0xff
   198a2:	d008      	beq.n	198b6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
   198a4:	7d82      	ldrb	r2, [r0, #22]
   198a6:	f88d 2000 	strb.w	r2, [sp]
   198aa:	9a00      	ldr	r2, [sp, #0]
   198ac:	9200      	str	r2, [sp, #0]
   198ae:	f89d 2000 	ldrb.w	r2, [sp]
   198b2:	b952      	cbnz	r2, 198ca <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
   198b4:	e004      	b.n	198c0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
   198b6:	f44f 7162 	mov.w	r1, #904	; 0x388
   198ba:	2014      	movs	r0, #20
   198bc:	f7f7 f8aa 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   198c0:	8880      	ldrh	r0, [r0, #4]
   198c2:	4281      	cmp	r1, r0
   198c4:	d101      	bne.n	198ca <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
   198c6:	2000      	movs	r0, #0
   198c8:	bd08      	pop	{r3, pc}
   198ca:	2001      	movs	r0, #1
   198cc:	bd08      	pop	{r3, pc}

000198ce <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
   198ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
   198d2:	8281      	strh	r1, [r0, #20]
   198d4:	2100      	movs	r1, #0
   198d6:	7581      	strb	r1, [r0, #22]
   198d8:	4770      	bx	lr

000198da <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
   198da:	b510      	push	{r4, lr}
   198dc:	8a81      	ldrh	r1, [r0, #20]
   198de:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
   198e2:	3aff      	subs	r2, #255	; 0xff
   198e4:	d004      	beq.n	198f0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
   198e6:	f44f 7159 	mov.w	r1, #868	; 0x364
   198ea:	2014      	movs	r0, #20
   198ec:	f7f7 f892 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   198f0:	88c1      	ldrh	r1, [r0, #6]
   198f2:	8281      	strh	r1, [r0, #20]
   198f4:	89c1      	ldrh	r1, [r0, #14]
   198f6:	b109      	cbz	r1, 198fc <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
   198f8:	2101      	movs	r1, #1
   198fa:	e000      	b.n	198fe <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
   198fc:	2100      	movs	r1, #0
   198fe:	7581      	strb	r1, [r0, #22]
   19900:	bd10      	pop	{r4, pc}

00019902 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
   19902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19906:	461d      	mov	r5, r3
   19908:	4616      	mov	r6, r2
   1990a:	9f06      	ldr	r7, [sp, #24]
   1990c:	460b      	mov	r3, r1
   1990e:	4604      	mov	r4, r0
   19910:	463a      	mov	r2, r7
   19912:	4629      	mov	r1, r5
   19914:	4630      	mov	r0, r6
   19916:	f000 f84f 	bl	199b8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1991a:	4283      	cmp	r3, r0
   1991c:	d201      	bcs.n	19922 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
   1991e:	21a8      	movs	r1, #168	; 0xa8
   19920:	e018      	b.n	19954 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
   19922:	1ce0      	adds	r0, r4, #3
   19924:	f020 0103 	bic.w	r1, r0, #3
   19928:	4620      	mov	r0, r4
   1992a:	42a1      	cmp	r1, r4
   1992c:	d001      	beq.n	19932 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
   1992e:	21a9      	movs	r1, #169	; 0xa9
   19930:	e010      	b.n	19954 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
   19932:	2224      	movs	r2, #36	; 0x24
   19934:	2100      	movs	r1, #0
   19936:	f7ff f968 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1993a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1993e:	82a0      	strh	r0, [r4, #20]
   19940:	19a8      	adds	r0, r5, r6
   19942:	1d80      	adds	r0, r0, #6
   19944:	4378      	muls	r0, r7
   19946:	b280      	uxth	r0, r0
   19948:	7725      	strb	r5, [r4, #28]
   1994a:	8060      	strh	r0, [r4, #2]
   1994c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   19950:	d903      	bls.n	1995a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
   19952:	21af      	movs	r1, #175	; 0xaf
   19954:	2014      	movs	r0, #20
   19956:	f7f7 f85d 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1995a:	8026      	strh	r6, [r4, #0]
   1995c:	2000      	movs	r0, #0
   1995e:	7760      	strb	r0, [r4, #29]
   19960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019964 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
   19964:	6181      	str	r1, [r0, #24]
   19966:	6188      	str	r0, [r1, #24]
   19968:	4770      	bx	lr

0001996a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
   1996a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1996e:	460b      	mov	r3, r1
   19970:	4604      	mov	r4, r0
   19972:	f100 0124 	add.w	r1, r0, #36	; 0x24
   19976:	8905      	ldrh	r5, [r0, #8]
   19978:	8946      	ldrh	r6, [r0, #10]
   1997a:	8880      	ldrh	r0, [r0, #4]
   1997c:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
   19980:	4439      	add	r1, r7
   19982:	460f      	mov	r7, r1
   19984:	4285      	cmp	r5, r0
   19986:	d102      	bne.n	1998e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
   19988:	2000      	movs	r0, #0
   1998a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1998e:	b10a      	cbz	r2, 19994 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
   19990:	1cc8      	adds	r0, r1, #3
   19992:	6010      	str	r0, [r2, #0]
   19994:	b123      	cbz	r3, 199a0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
   19996:	7f22      	ldrb	r2, [r4, #28]
   19998:	1cf9      	adds	r1, r7, #3
   1999a:	4618      	mov	r0, r3
   1999c:	f7ff f8bb 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   199a0:	883f      	ldrh	r7, [r7, #0]
   199a2:	f104 0108 	add.w	r1, r4, #8
   199a6:	4620      	mov	r0, r4
   199a8:	f7ff fd9f 	bl	194ea <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   199ac:	42b5      	cmp	r5, r6
   199ae:	d101      	bne.n	199b4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
   199b0:	8920      	ldrh	r0, [r4, #8]
   199b2:	8160      	strh	r0, [r4, #10]
   199b4:	4638      	mov	r0, r7
   199b6:	e7e8      	b.n	1998a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

000199b8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
   199b8:	4401      	add	r1, r0
   199ba:	1d89      	adds	r1, r1, #6
   199bc:	4351      	muls	r1, r2
   199be:	b28a      	uxth	r2, r1
   199c0:	2100      	movs	r1, #0
   199c2:	2845      	cmp	r0, #69	; 0x45
   199c4:	d201      	bcs.n	199ca <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
   199c6:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
   199ca:	3224      	adds	r2, #36	; 0x24
   199cc:	1850      	adds	r0, r2, r1
   199ce:	b280      	uxth	r0, r0
   199d0:	4770      	bx	lr

000199d2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
   199d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   199d6:	4688      	mov	r8, r1
   199d8:	88c1      	ldrh	r1, [r0, #6]
   199da:	4604      	mov	r4, r0
   199dc:	8900      	ldrh	r0, [r0, #8]
   199de:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
   199e2:	f104 0524 	add.w	r5, r4, #36	; 0x24
   199e6:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   199ea:	eb05 0906 	add.w	r9, r5, r6
   199ee:	f7ff fd9d 	bl	1952c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
   199f2:	2200      	movs	r2, #0
   199f4:	b998      	cbnz	r0, 19a1e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
   199f6:	8820      	ldrh	r0, [r4, #0]
   199f8:	2845      	cmp	r0, #69	; 0x45
   199fa:	d200      	bcs.n	199fe <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
   199fc:	2045      	movs	r0, #69	; 0x45
   199fe:	42b7      	cmp	r7, r6
   19a00:	d906      	bls.n	19a10 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   19a02:	7f23      	ldrb	r3, [r4, #28]
   19a04:	1bb9      	subs	r1, r7, r6
   19a06:	1ac9      	subs	r1, r1, r3
   19a08:	1f89      	subs	r1, r1, #6
   19a0a:	4281      	cmp	r1, r0
   19a0c:	da00      	bge.n	19a10 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   19a0e:	4608      	mov	r0, r1
   19a10:	89e1      	ldrh	r1, [r4, #14]
   19a12:	b111      	cbz	r1, 19a1a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
   19a14:	f8b9 3000 	ldrh.w	r3, [r9]
   19a18:	1ac0      	subs	r0, r0, r3
   19a1a:	4540      	cmp	r0, r8
   19a1c:	da03      	bge.n	19a26 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
   19a1e:	8262      	strh	r2, [r4, #18]
   19a20:	2000      	movs	r0, #0
   19a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19a26:	7f20      	ldrb	r0, [r4, #28]
   19a28:	4429      	add	r1, r5
   19a2a:	1d80      	adds	r0, r0, #6
   19a2c:	4430      	add	r0, r6
   19a2e:	4408      	add	r0, r1
   19a30:	f8a4 8012 	strh.w	r8, [r4, #18]
   19a34:	1ec0      	subs	r0, r0, #3
   19a36:	e7f4      	b.n	19a22 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

00019a38 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
   19a38:	2100      	movs	r1, #0
   19a3a:	81c1      	strh	r1, [r0, #14]
   19a3c:	8241      	strh	r1, [r0, #18]
   19a3e:	7581      	strb	r1, [r0, #22]
   19a40:	4770      	bx	lr

00019a42 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
   19a42:	b570      	push	{r4, r5, r6, lr}
   19a44:	2300      	movs	r3, #0
   19a46:	2908      	cmp	r1, #8
   19a48:	d204      	bcs.n	19a54 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
   19a4a:	f240 11cb 	movw	r1, #459	; 0x1cb
   19a4e:	2015      	movs	r0, #21
   19a50:	f7f6 ffe0 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19a54:	6802      	ldr	r2, [r0, #0]
   19a56:	b90a      	cbnz	r2, 19a5c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
   19a58:	e01e      	b.n	19a98 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   19a5a:	4610      	mov	r0, r2
   19a5c:	6802      	ldr	r2, [r0, #0]
   19a5e:	8893      	ldrh	r3, [r2, #4]
   19a60:	428b      	cmp	r3, r1
   19a62:	d002      	beq.n	19a6a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
   19a64:	6813      	ldr	r3, [r2, #0]
   19a66:	2b00      	cmp	r3, #0
   19a68:	d1f7      	bne.n	19a5a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
   19a6a:	8894      	ldrh	r4, [r2, #4]
   19a6c:	4613      	mov	r3, r2
   19a6e:	428c      	cmp	r4, r1
   19a70:	d101      	bne.n	19a76 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
   19a72:	6811      	ldr	r1, [r2, #0]
   19a74:	e00d      	b.n	19a92 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
   19a76:	f101 0508 	add.w	r5, r1, #8
   19a7a:	b2ae      	uxth	r6, r5
   19a7c:	2500      	movs	r5, #0
   19a7e:	42b4      	cmp	r4, r6
   19a80:	d309      	bcc.n	19a96 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
   19a82:	1a64      	subs	r4, r4, r1
   19a84:	4411      	add	r1, r2
   19a86:	600d      	str	r5, [r1, #0]
   19a88:	808c      	strh	r4, [r1, #4]
   19a8a:	6802      	ldr	r2, [r0, #0]
   19a8c:	6812      	ldr	r2, [r2, #0]
   19a8e:	6002      	str	r2, [r0, #0]
   19a90:	600a      	str	r2, [r1, #0]
   19a92:	6001      	str	r1, [r0, #0]
   19a94:	e000      	b.n	19a98 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   19a96:	2300      	movs	r3, #0
   19a98:	4618      	mov	r0, r3
   19a9a:	bd70      	pop	{r4, r5, r6, pc}

00019a9c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   19a9c:	b510      	push	{r4, lr}
   19a9e:	000c      	movs	r4, r1
   19aa0:	d006      	beq.n	19ab0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
   19aa2:	2c08      	cmp	r4, #8
   19aa4:	d209      	bcs.n	19aba <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
   19aa6:	f240 1195 	movw	r1, #405	; 0x195
   19aaa:	2015      	movs	r0, #21
   19aac:	f7f6 ffb2 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19ab0:	b108      	cbz	r0, 19ab6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   19ab2:	2100      	movs	r1, #0
   19ab4:	6001      	str	r1, [r0, #0]
   19ab6:	2000      	movs	r0, #0
   19ab8:	bd10      	pop	{r4, pc}
   19aba:	b118      	cbz	r0, 19ac4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
   19abc:	b2a1      	uxth	r1, r4
   19abe:	6800      	ldr	r0, [r0, #0]
   19ac0:	f000 f814 	bl	19aec <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   19ac4:	1d20      	adds	r0, r4, #4
   19ac6:	bd10      	pop	{r4, pc}

00019ac8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   19ac8:	2100      	movs	r1, #0
   19aca:	6802      	ldr	r2, [r0, #0]
   19acc:	e003      	b.n	19ad6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   19ace:	8893      	ldrh	r3, [r2, #4]
   19ad0:	6812      	ldr	r2, [r2, #0]
   19ad2:	4419      	add	r1, r3
   19ad4:	b289      	uxth	r1, r1
   19ad6:	2a00      	cmp	r2, #0
   19ad8:	d1f9      	bne.n	19ace <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   19ada:	f000 b807 	b.w	19aec <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

00019ade <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   19ade:	2300      	movs	r3, #0
   19ae0:	600b      	str	r3, [r1, #0]
   19ae2:	808a      	strh	r2, [r1, #4]
   19ae4:	6802      	ldr	r2, [r0, #0]
   19ae6:	600a      	str	r2, [r1, #0]
   19ae8:	6001      	str	r1, [r0, #0]
   19aea:	4770      	bx	lr
   19aec:	2300      	movs	r3, #0
   19aee:	6043      	str	r3, [r0, #4]
   19af0:	1d02      	adds	r2, r0, #4
   19af2:	8101      	strh	r1, [r0, #8]
   19af4:	6002      	str	r2, [r0, #0]
   19af6:	4770      	bx	lr

00019af8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
   19af8:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
   19afc:	3bff      	subs	r3, #255	; 0xff
   19afe:	d001      	beq.n	19b04 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
   19b00:	2902      	cmp	r1, #2
   19b02:	d301      	bcc.n	19b08 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
   19b04:	2000      	movs	r0, #0
   19b06:	4770      	bx	lr
   19b08:	f7f7 ba3e 	b.w	10f88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

00019b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   19b0c:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   19b10:	3aff      	subs	r2, #255	; 0xff
   19b12:	d001      	beq.n	19b18 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
   19b14:	2902      	cmp	r1, #2
   19b16:	d301      	bcc.n	19b1c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
   19b18:	2000      	movs	r0, #0
   19b1a:	4770      	bx	lr
   19b1c:	f7f7 ba6e 	b.w	10ffc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

00019b20 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
   19b20:	b570      	push	{r4, r5, r6, lr}
   19b22:	4605      	mov	r5, r0
   19b24:	460c      	mov	r4, r1
   19b26:	4608      	mov	r0, r1
   19b28:	f000 f973 	bl	19e12 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   19b2c:	b108      	cbz	r0, 19b32 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
   19b2e:	2010      	movs	r0, #16
   19b30:	bd70      	pop	{r4, r5, r6, pc}
   19b32:	2d02      	cmp	r5, #2
   19b34:	d301      	bcc.n	19b3a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
   19b36:	2007      	movs	r0, #7
   19b38:	bd70      	pop	{r4, r5, r6, pc}
   19b3a:	7025      	strb	r5, [r4, #0]
   19b3c:	2000      	movs	r0, #0
   19b3e:	8060      	strh	r0, [r4, #2]
   19b40:	bd70      	pop	{r4, r5, r6, pc}
   19b42:	b510      	push	{r4, lr}
   19b44:	4604      	mov	r4, r0
   19b46:	f7f7 faa5 	bl	11094 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
   19b4a:	42a0      	cmp	r0, r4
   19b4c:	d901      	bls.n	19b52 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
   19b4e:	2001      	movs	r0, #1
   19b50:	bd10      	pop	{r4, pc}
   19b52:	2000      	movs	r0, #0
   19b54:	bd10      	pop	{r4, pc}
   19b56:	4770      	bx	lr

00019b58 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   19b58:	b570      	push	{r4, r5, r6, lr}
   19b5a:	460e      	mov	r6, r1
   19b5c:	461d      	mov	r5, r3
   19b5e:	4611      	mov	r1, r2
   19b60:	f000 f811 	bl	19b86 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
   19b64:	4604      	mov	r4, r0
   19b66:	4629      	mov	r1, r5
   19b68:	4630      	mov	r0, r6
   19b6a:	f000 f803 	bl	19b74 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
   19b6e:	4420      	add	r0, r4
   19b70:	1d00      	adds	r0, r0, #4
   19b72:	bd70      	pop	{r4, r5, r6, pc}
   19b74:	b510      	push	{r4, lr}
   19b76:	460a      	mov	r2, r1
   19b78:	2101      	movs	r1, #1
   19b7a:	f7ff ff1d 	bl	199b8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   19b7e:	1cc0      	adds	r0, r0, #3
   19b80:	f020 0003 	bic.w	r0, r0, #3
   19b84:	bd10      	pop	{r4, pc}
   19b86:	b510      	push	{r4, lr}
   19b88:	460a      	mov	r2, r1
   19b8a:	2101      	movs	r1, #1
   19b8c:	f7ff ff14 	bl	199b8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   19b90:	1cc0      	adds	r0, r0, #3
   19b92:	f020 0003 	bic.w	r0, r0, #3
   19b96:	bd10      	pop	{r4, pc}
   19b98:	b109      	cbz	r1, 19b9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
   19b9a:	2100      	movs	r1, #0
   19b9c:	e000      	b.n	19ba0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
   19b9e:	2102      	movs	r1, #2
   19ba0:	1843      	adds	r3, r0, r1
   19ba2:	7d1a      	ldrb	r2, [r3, #20]
   19ba4:	2a02      	cmp	r2, #2
   19ba6:	d008      	beq.n	19bba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
   19ba8:	7d5b      	ldrb	r3, [r3, #21]
   19baa:	2b02      	cmp	r3, #2
   19bac:	d009      	beq.n	19bc2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
   19bae:	2a03      	cmp	r2, #3
   19bb0:	d003      	beq.n	19bba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
   19bb2:	2b03      	cmp	r3, #3
   19bb4:	d005      	beq.n	19bc2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
   19bb6:	2000      	movs	r0, #0
   19bb8:	4770      	bx	lr
   19bba:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   19bbe:	8b00      	ldrh	r0, [r0, #24]
   19bc0:	4770      	bx	lr
   19bc2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   19bc6:	8b40      	ldrh	r0, [r0, #26]
   19bc8:	4770      	bx	lr
   19bca:	b109      	cbz	r1, 19bd0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
   19bcc:	2100      	movs	r1, #0
   19bce:	e000      	b.n	19bd2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   19bd0:	2102      	movs	r1, #2
   19bd2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   19bd6:	8b01      	ldrh	r1, [r0, #24]
   19bd8:	b911      	cbnz	r1, 19be0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
   19bda:	8b40      	ldrh	r0, [r0, #26]
   19bdc:	2800      	cmp	r0, #0
   19bde:	d000      	beq.n	19be2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
   19be0:	2001      	movs	r0, #1
   19be2:	4770      	bx	lr
   19be4:	b538      	push	{r3, r4, r5, lr}
   19be6:	7883      	ldrb	r3, [r0, #2]
   19be8:	f88d 3000 	strb.w	r3, [sp]
   19bec:	9b00      	ldr	r3, [sp, #0]
   19bee:	9300      	str	r3, [sp, #0]
   19bf0:	f89d 3000 	ldrb.w	r3, [sp]
   19bf4:	b953      	cbnz	r3, 19c0c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
   19bf6:	b10a      	cbz	r2, 19bfc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
   19bf8:	2300      	movs	r3, #0
   19bfa:	e000      	b.n	19bfe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
   19bfc:	2302      	movs	r3, #2
   19bfe:	18c2      	adds	r2, r0, r3
   19c00:	7d14      	ldrb	r4, [r2, #20]
   19c02:	2c02      	cmp	r4, #2
   19c04:	d004      	beq.n	19c10 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
   19c06:	7d52      	ldrb	r2, [r2, #21]
   19c08:	2a02      	cmp	r2, #2
   19c0a:	d004      	beq.n	19c16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
   19c0c:	2000      	movs	r0, #0
   19c0e:	bd38      	pop	{r3, r4, r5, pc}
   19c10:	461a      	mov	r2, r3
   19c12:	1c5b      	adds	r3, r3, #1
   19c14:	e000      	b.n	19c18 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
   19c16:	1c5a      	adds	r2, r3, #1
   19c18:	b181      	cbz	r1, 19c3c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
   19c1a:	18c5      	adds	r5, r0, r3
   19c1c:	2400      	movs	r4, #0
   19c1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   19c22:	752c      	strb	r4, [r5, #20]
   19c24:	831c      	strh	r4, [r3, #24]
   19c26:	2303      	movs	r3, #3
   19c28:	1884      	adds	r4, r0, r2
   19c2a:	7523      	strb	r3, [r4, #20]
   19c2c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   19c30:	eb00 0042 	add.w	r0, r0, r2, lsl #1
   19c34:	685b      	ldr	r3, [r3, #4]
   19c36:	600b      	str	r3, [r1, #0]
   19c38:	8b00      	ldrh	r0, [r0, #24]
   19c3a:	8088      	strh	r0, [r1, #4]
   19c3c:	2001      	movs	r0, #1
   19c3e:	bd38      	pop	{r3, r4, r5, pc}
   19c40:	b510      	push	{r4, lr}
   19c42:	b109      	cbz	r1, 19c48 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
   19c44:	2100      	movs	r1, #0
   19c46:	e000      	b.n	19c4a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
   19c48:	2102      	movs	r1, #2
   19c4a:	1843      	adds	r3, r0, r1
   19c4c:	7d1c      	ldrb	r4, [r3, #20]
   19c4e:	4294      	cmp	r4, r2
   19c50:	d103      	bne.n	19c5a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
   19c52:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   19c56:	8b00      	ldrh	r0, [r0, #24]
   19c58:	bd10      	pop	{r4, pc}
   19c5a:	7d5b      	ldrb	r3, [r3, #21]
   19c5c:	4293      	cmp	r3, r2
   19c5e:	d103      	bne.n	19c68 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
   19c60:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   19c64:	8b40      	ldrh	r0, [r0, #26]
   19c66:	bd10      	pop	{r4, pc}
   19c68:	2000      	movs	r0, #0
   19c6a:	bd10      	pop	{r4, pc}
   19c6c:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
   19c70:	d201      	bcs.n	19c76 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
   19c72:	0841      	lsrs	r1, r0, #1
   19c74:	e000      	b.n	19c78 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
   19c76:	21ff      	movs	r1, #255	; 0xff
   19c78:	1a40      	subs	r0, r0, r1
   19c7a:	f240 6172 	movw	r1, #1650	; 0x672
   19c7e:	4288      	cmp	r0, r1
   19c80:	db00      	blt.n	19c84 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
   19c82:	4608      	mov	r0, r1
   19c84:	b280      	uxth	r0, r0
   19c86:	4770      	bx	lr

00019c88 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
   19c88:	2101      	movs	r1, #1
   19c8a:	f7ff bf85 	b.w	19b98 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

00019c8e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
   19c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c92:	4606      	mov	r6, r0
   19c94:	f342 0780 	sbfx	r7, r2, #2, #1
   19c98:	7848      	ldrb	r0, [r1, #1]
   19c9a:	460c      	mov	r4, r1
   19c9c:	f022 0504 	bic.w	r5, r2, #4
   19ca0:	1c7f      	adds	r7, r7, #1
   19ca2:	b100      	cbz	r0, 19ca6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
   19ca4:	b90d      	cbnz	r5, 19caa <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
   19ca6:	4328      	orrs	r0, r5
   19ca8:	d104      	bne.n	19cb4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
   19caa:	b145      	cbz	r5, 19cbe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
   19cac:	2100      	movs	r1, #0
   19cae:	4620      	mov	r0, r4
   19cb0:	f7f7 faf8 	bl	112a4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
   19cb4:	2101      	movs	r1, #1
   19cb6:	70a1      	strb	r1, [r4, #2]
   19cb8:	b11f      	cbz	r7, 19cc2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
   19cba:	2000      	movs	r0, #0
   19cbc:	e002      	b.n	19cc4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
   19cbe:	2101      	movs	r1, #1
   19cc0:	e7f5      	b.n	19cae <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
   19cc2:	2002      	movs	r0, #2
   19cc4:	1822      	adds	r2, r4, r0
   19cc6:	7d12      	ldrb	r2, [r2, #20]
   19cc8:	2a03      	cmp	r2, #3
   19cca:	d102      	bne.n	19cd2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
   19ccc:	2d02      	cmp	r5, #2
   19cce:	d000      	beq.n	19cd2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
   19cd0:	1c40      	adds	r0, r0, #1
   19cd2:	1822      	adds	r2, r4, r0
   19cd4:	7511      	strb	r1, [r2, #20]
   19cd6:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   19cda:	2200      	movs	r2, #0
   19cdc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   19ce0:	830a      	strh	r2, [r1, #24]
   19ce2:	6840      	ldr	r0, [r0, #4]
   19ce4:	70a2      	strb	r2, [r4, #2]
   19ce6:	4631      	mov	r1, r6
   19ce8:	f362 010f 	bfi	r1, r2, #0, #16
   19cec:	e9c6 0100 	strd	r0, r1, [r6]
   19cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019cf4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
   19cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19cf8:	461e      	mov	r6, r3
   19cfa:	4613      	mov	r3, r2
   19cfc:	4604      	mov	r4, r0
   19cfe:	b109      	cbz	r1, 19d04 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
   19d00:	2000      	movs	r0, #0
   19d02:	e000      	b.n	19d06 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
   19d04:	2002      	movs	r0, #2
   19d06:	2101      	movs	r1, #1
   19d08:	70a1      	strb	r1, [r4, #2]
   19d0a:	1821      	adds	r1, r4, r0
   19d0c:	7d0a      	ldrb	r2, [r1, #20]
   19d0e:	2a01      	cmp	r2, #1
   19d10:	d003      	beq.n	19d1a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
   19d12:	7d49      	ldrb	r1, [r1, #21]
   19d14:	2901      	cmp	r1, #1
   19d16:	d10c      	bne.n	19d32 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
   19d18:	1c40      	adds	r0, r0, #1
   19d1a:	eb04 0540 	add.w	r5, r4, r0, lsl #1
   19d1e:	2700      	movs	r7, #0
   19d20:	8b29      	ldrh	r1, [r5, #24]
   19d22:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   19d26:	198a      	adds	r2, r1, r6
   19d28:	4562      	cmp	r2, ip
   19d2a:	d905      	bls.n	19d38 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
   19d2c:	4420      	add	r0, r4
   19d2e:	832f      	strh	r7, [r5, #24]
   19d30:	7507      	strb	r7, [r0, #20]
   19d32:	2000      	movs	r0, #0
   19d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d38:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   19d3c:	4632      	mov	r2, r6
   19d3e:	6840      	ldr	r0, [r0, #4]
   19d40:	4408      	add	r0, r1
   19d42:	4619      	mov	r1, r3
   19d44:	f7fe fee7 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19d48:	8b28      	ldrh	r0, [r5, #24]
   19d4a:	4430      	add	r0, r6
   19d4c:	8328      	strh	r0, [r5, #24]
   19d4e:	70a7      	strb	r7, [r4, #2]
   19d50:	2001      	movs	r0, #1
   19d52:	e7ef      	b.n	19d34 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

00019d54 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
   19d54:	2202      	movs	r2, #2
   19d56:	2100      	movs	r1, #0
   19d58:	f7ff bf72 	b.w	19c40 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

00019d5c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
   19d5c:	b510      	push	{r4, lr}
   19d5e:	2101      	movs	r1, #1
   19d60:	f7ff ff33 	bl	19bca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
   19d64:	2800      	cmp	r0, #0
   19d66:	d000      	beq.n	19d6a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
   19d68:	2001      	movs	r0, #1
   19d6a:	bd10      	pop	{r4, pc}

00019d6c <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
   19d6c:	2201      	movs	r2, #1
   19d6e:	f7ff bf39 	b.w	19be4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

00019d72 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
   19d72:	2200      	movs	r2, #0
   19d74:	f7ff bf36 	b.w	19be4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

00019d78 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
   19d78:	b570      	push	{r4, r5, r6, lr}
   19d7a:	b109      	cbz	r1, 19d80 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
   19d7c:	2300      	movs	r3, #0
   19d7e:	e000      	b.n	19d82 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
   19d80:	2302      	movs	r3, #2
   19d82:	2101      	movs	r1, #1
   19d84:	7081      	strb	r1, [r0, #2]
   19d86:	18c1      	adds	r1, r0, r3
   19d88:	2402      	movs	r4, #2
   19d8a:	7d0d      	ldrb	r5, [r1, #20]
   19d8c:	2d01      	cmp	r5, #1
   19d8e:	d007      	beq.n	19da0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
   19d90:	7d4d      	ldrb	r5, [r1, #21]
   19d92:	2d01      	cmp	r5, #1
   19d94:	d009      	beq.n	19daa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
   19d96:	f44f 718b 	mov.w	r1, #278	; 0x116
   19d9a:	2009      	movs	r0, #9
   19d9c:	f7f6 fe3a 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19da0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   19da4:	831a      	strh	r2, [r3, #24]
   19da6:	750c      	strb	r4, [r1, #20]
   19da8:	e003      	b.n	19db2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
   19daa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   19dae:	835a      	strh	r2, [r3, #26]
   19db0:	754c      	strb	r4, [r1, #21]
   19db2:	2100      	movs	r1, #0
   19db4:	7081      	strb	r1, [r0, #2]
   19db6:	bd70      	pop	{r4, r5, r6, pc}

00019db8 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
   19db8:	2101      	movs	r1, #1
   19dba:	7001      	strb	r1, [r0, #0]
   19dbc:	4770      	bx	lr

00019dbe <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
   19dbe:	2201      	movs	r2, #1
   19dc0:	4611      	mov	r1, r2
   19dc2:	f7ff bf3d 	b.w	19c40 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

00019dc6 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
   19dc6:	2201      	movs	r2, #1
   19dc8:	2100      	movs	r1, #0
   19dca:	f7ff bf39 	b.w	19c40 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

00019dce <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
   19dce:	2100      	movs	r1, #0
   19dd0:	f7ff bee2 	b.w	19b98 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
   19dd4:	2800      	cmp	r0, #0
   19dd6:	db09      	blt.n	19dec <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
   19dd8:	f000 021f 	and.w	r2, r0, #31
   19ddc:	2101      	movs	r1, #1
   19dde:	4091      	lsls	r1, r2
   19de0:	0940      	lsrs	r0, r0, #5
   19de2:	0080      	lsls	r0, r0, #2
   19de4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   19de8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   19dec:	4770      	bx	lr
   19dee:	5840      	ldr	r0, [r0, r1]
   19df0:	2800      	cmp	r0, #0
   19df2:	d000      	beq.n	19df6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x28>
   19df4:	2001      	movs	r0, #1
   19df6:	4770      	bx	lr

00019df8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   19df8:	f7f7 bbaa 	b.w	11550 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

00019dfc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
   19dfc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   19e00:	2000      	movs	r0, #0
   19e02:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
   19e06:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   19e0a:	2001      	movs	r0, #1
   19e0c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   19e10:	4770      	bx	lr

00019e12 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
   19e12:	b108      	cbz	r0, 19e18 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
   19e14:	2000      	movs	r0, #0
   19e16:	4770      	bx	lr
   19e18:	2001      	movs	r0, #1
   19e1a:	4770      	bx	lr

00019e1c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
   19e1c:	f7f7 bcea 	b.w	117f4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

00019e20 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
   19e20:	f7f7 bcd8 	b.w	117d4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

00019e24 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   19e24:	b510      	push	{r4, lr}
   19e26:	2900      	cmp	r1, #0
   19e28:	4604      	mov	r4, r0
   19e2a:	f04f 0106 	mov.w	r1, #6
   19e2e:	d002      	beq.n	19e36 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   19e30:	f7f6 fe7c 	bl	10b2c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   19e34:	e001      	b.n	19e3a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   19e36:	f7f6 fe87 	bl	10b48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   19e3a:	7960      	ldrb	r0, [r4, #5]
   19e3c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   19e40:	7160      	strb	r0, [r4, #5]
   19e42:	bd10      	pop	{r4, pc}

00019e44 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
   19e44:	4770      	bx	lr

00019e46 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   19e46:	b530      	push	{r4, r5, lr}
   19e48:	460c      	mov	r4, r1
   19e4a:	4605      	mov	r5, r0
   19e4c:	b08d      	sub	sp, #52	; 0x34
   19e4e:	f04f 0103 	mov.w	r1, #3
   19e52:	f104 0003 	add.w	r0, r4, #3
   19e56:	b112      	cbz	r2, 19e5e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   19e58:	f7f6 fe68 	bl	10b2c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   19e5c:	e001      	b.n	19e62 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   19e5e:	f7f6 fe73 	bl	10b48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   19e62:	7960      	ldrb	r0, [r4, #5]
   19e64:	220d      	movs	r2, #13
   19e66:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   19e6a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   19e6e:	7160      	strb	r0, [r4, #5]
   19e70:	2100      	movs	r1, #0
   19e72:	a804      	add	r0, sp, #16
   19e74:	f7fe fec9 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   19e78:	78e0      	ldrb	r0, [r4, #3]
   19e7a:	f88d 001f 	strb.w	r0, [sp, #31]
   19e7e:	7920      	ldrb	r0, [r4, #4]
   19e80:	f88d 001e 	strb.w	r0, [sp, #30]
   19e84:	7960      	ldrb	r0, [r4, #5]
   19e86:	f88d 001d 	strb.w	r0, [sp, #29]
   19e8a:	2210      	movs	r2, #16
   19e8c:	4629      	mov	r1, r5
   19e8e:	4668      	mov	r0, sp
   19e90:	f7fe fe41 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19e94:	4668      	mov	r0, sp
   19e96:	f7ff ffaf 	bl	19df8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   19e9a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   19e9e:	7020      	strb	r0, [r4, #0]
   19ea0:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   19ea4:	7060      	strb	r0, [r4, #1]
   19ea6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   19eaa:	70a0      	strb	r0, [r4, #2]
   19eac:	b00d      	add	sp, #52	; 0x34
   19eae:	bd30      	pop	{r4, r5, pc}

00019eb0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
   19eb0:	f7f8 b878 	b.w	11fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   19eb4:	07c1      	lsls	r1, r0, #31
   19eb6:	d001      	beq.n	19ebc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
   19eb8:	2001      	movs	r0, #1
   19eba:	4770      	bx	lr
   19ebc:	0780      	lsls	r0, r0, #30
   19ebe:	d501      	bpl.n	19ec4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
   19ec0:	2002      	movs	r0, #2
   19ec2:	4770      	bx	lr
   19ec4:	2000      	movs	r0, #0
   19ec6:	4770      	bx	lr
   19ec8:	b510      	push	{r4, lr}
   19eca:	2801      	cmp	r0, #1
   19ecc:	d008      	beq.n	19ee0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
   19ece:	2802      	cmp	r0, #2
   19ed0:	d004      	beq.n	19edc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
   19ed2:	f240 31ad 	movw	r1, #941	; 0x3ad
   19ed6:	2006      	movs	r0, #6
   19ed8:	f7f6 fd9c 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19edc:	2001      	movs	r0, #1
   19ede:	bd10      	pop	{r4, pc}
   19ee0:	2000      	movs	r0, #0
   19ee2:	bd10      	pop	{r4, pc}
   19ee4:	2900      	cmp	r1, #0
   19ee6:	d004      	beq.n	19ef2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
   19ee8:	2801      	cmp	r0, #1
   19eea:	d003      	beq.n	19ef4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
   19eec:	2901      	cmp	r1, #1
   19eee:	d001      	beq.n	19ef4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
   19ef0:	2002      	movs	r0, #2
   19ef2:	4770      	bx	lr
   19ef4:	2001      	movs	r0, #1
   19ef6:	4770      	bx	lr
   19ef8:	f7ff bcab 	b.w	19852 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

00019efc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
   19efc:	2101      	movs	r1, #1
   19efe:	f7f8 bbe1 	b.w	126c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

00019f02 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   19f02:	b510      	push	{r4, lr}
   19f04:	f002 fc46 	bl	1c794 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   19f08:	b118      	cbz	r0, 19f12 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
   19f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19f0e:	f7fd b937 	b.w	17180 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
   19f12:	20ff      	movs	r0, #255	; 0xff
   19f14:	bd10      	pop	{r4, pc}

00019f16 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
   19f16:	b510      	push	{r4, lr}
   19f18:	f7f8 fc1c 	bl	12754 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   19f1c:	2810      	cmp	r0, #16
   19f1e:	d003      	beq.n	19f28 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
   19f20:	f7f8 fbe8 	bl	126f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   19f24:	2810      	cmp	r0, #16
   19f26:	d100      	bne.n	19f2a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
   19f28:	2008      	movs	r0, #8
   19f2a:	bd10      	pop	{r4, pc}

00019f2c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
   19f2c:	b510      	push	{r4, lr}
   19f2e:	f7f8 fc11 	bl	12754 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   19f32:	2810      	cmp	r0, #16
   19f34:	d007      	beq.n	19f46 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
   19f36:	f7f8 fbdd 	bl	126f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   19f3a:	2810      	cmp	r0, #16
   19f3c:	d003      	beq.n	19f46 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
   19f3e:	f7f8 fc51 	bl	127e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
   19f42:	2001      	movs	r0, #1
   19f44:	bd10      	pop	{r4, pc}
   19f46:	2000      	movs	r0, #0
   19f48:	bd10      	pop	{r4, pc}

00019f4a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
   19f4a:	b510      	push	{r4, lr}
   19f4c:	f7f8 fc02 	bl	12754 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   19f50:	2810      	cmp	r0, #16
   19f52:	d003      	beq.n	19f5c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
   19f54:	f7f8 fc8e 	bl	12874 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
   19f58:	2001      	movs	r0, #1
   19f5a:	bd10      	pop	{r4, pc}
   19f5c:	2000      	movs	r0, #0
   19f5e:	bd10      	pop	{r4, pc}

00019f60 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
   19f60:	b570      	push	{r4, r5, r6, lr}
   19f62:	460e      	mov	r6, r1
   19f64:	b08c      	sub	sp, #48	; 0x30
   19f66:	4614      	mov	r4, r2
   19f68:	4601      	mov	r1, r0
   19f6a:	461d      	mov	r5, r3
   19f6c:	2210      	movs	r2, #16
   19f6e:	4668      	mov	r0, sp
   19f70:	f000 f91a 	bl	1a1a8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   19f74:	2210      	movs	r2, #16
   19f76:	4631      	mov	r1, r6
   19f78:	a804      	add	r0, sp, #16
   19f7a:	f000 f915 	bl	1a1a8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   19f7e:	4668      	mov	r0, sp
   19f80:	f7ff ff3a 	bl	19df8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   19f84:	a908      	add	r1, sp, #32
   19f86:	f04f 0210 	mov.w	r2, #16
   19f8a:	4628      	mov	r0, r5
   19f8c:	b11c      	cbz	r4, 19f96 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
   19f8e:	f000 f90b 	bl	1a1a8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   19f92:	b00c      	add	sp, #48	; 0x30
   19f94:	bd70      	pop	{r4, r5, r6, pc}
   19f96:	f7fe fdbe 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19f9a:	e7fa      	b.n	19f92 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

00019f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   19f9c:	b510      	push	{r4, lr}
   19f9e:	460c      	mov	r4, r1
   19fa0:	2100      	movs	r1, #0
   19fa2:	f7ff fdb3 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   19fa6:	6060      	str	r0, [r4, #4]
   19fa8:	b118      	cbz	r0, 19fb2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
   19faa:	2001      	movs	r0, #1
   19fac:	7020      	strb	r0, [r4, #0]
   19fae:	2000      	movs	r0, #0
   19fb0:	bd10      	pop	{r4, pc}
   19fb2:	2002      	movs	r0, #2
   19fb4:	bd10      	pop	{r4, pc}

00019fb6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   19fb6:	f240 41e2 	movw	r1, #1250	; 0x4e2
   19fba:	4348      	muls	r0, r1
   19fbc:	4770      	bx	lr

00019fbe <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   19fbe:	f240 41e2 	movw	r1, #1250	; 0x4e2
   19fc2:	fbb0 f0f1 	udiv	r0, r0, r1
   19fc6:	b280      	uxth	r0, r0
   19fc8:	4770      	bx	lr

00019fca <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
   19fca:	b570      	push	{r4, r5, r6, lr}
   19fcc:	4604      	mov	r4, r0
   19fce:	4290      	cmp	r0, r2
   19fd0:	d20b      	bcs.n	19fea <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
   19fd2:	1b10      	subs	r0, r2, r4
   19fd4:	2865      	cmp	r0, #101	; 0x65
   19fd6:	d200      	bcs.n	19fda <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
   19fd8:	2065      	movs	r0, #101	; 0x65
   19fda:	1825      	adds	r5, r4, r0
   19fdc:	428d      	cmp	r5, r1
   19fde:	d803      	bhi.n	19fe8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
   19fe0:	2104      	movs	r1, #4
   19fe2:	f7f4 f815 	bl	e010 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   19fe6:	b108      	cbz	r0, 19fec <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
   19fe8:	4620      	mov	r0, r4
   19fea:	bd70      	pop	{r4, r5, r6, pc}
   19fec:	4628      	mov	r0, r5
   19fee:	bd70      	pop	{r4, r5, r6, pc}

00019ff0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   19ff0:	b510      	push	{r4, lr}
   19ff2:	f1a2 030f 	sub.w	r3, r2, #15
   19ff6:	290c      	cmp	r1, #12
   19ff8:	d244      	bcs.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19ffa:	e8df f001 	tbb	[pc, r1]
   19ffe:	0806      	.short	0x0806
   1a000:	1815120d 	.word	0x1815120d
   1a004:	4127241c 	.word	0x4127241c
   1a008:	312a      	.short	0x312a
   1a00a:	b3c2      	cbz	r2, 1a07e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
   1a00c:	e03a      	b.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a00e:	2a07      	cmp	r2, #7
   1a010:	d03a      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a012:	2a08      	cmp	r2, #8
   1a014:	d038      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a016:	e035      	b.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a018:	2a0c      	cmp	r2, #12
   1a01a:	d035      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a01c:	2a0b      	cmp	r2, #11
   1a01e:	d033      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a020:	e030      	b.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a022:	2a0d      	cmp	r2, #13
   1a024:	d030      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a026:	e02d      	b.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a028:	2b0c      	cmp	r3, #12
   1a02a:	d92d      	bls.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a02c:	e02a      	b.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a02e:	3a10      	subs	r2, #16
   1a030:	2a0b      	cmp	r2, #11
   1a032:	d929      	bls.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a034:	e026      	b.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a036:	2b03      	cmp	r3, #3
   1a038:	d926      	bls.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a03a:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
   1a03e:	b308      	cbz	r0, 1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a040:	2a1b      	cmp	r2, #27
   1a042:	d921      	bls.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a044:	e01e      	b.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a046:	2a04      	cmp	r2, #4
   1a048:	d01e      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a04a:	e01b      	b.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a04c:	2a06      	cmp	r2, #6
   1a04e:	d01b      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a050:	e018      	b.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a052:	2a1c      	cmp	r2, #28
   1a054:	d018      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a056:	2a1d      	cmp	r2, #29
   1a058:	d016      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a05a:	2a1e      	cmp	r2, #30
   1a05c:	d014      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a05e:	e011      	b.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a060:	2a1f      	cmp	r2, #31
   1a062:	d011      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a064:	2a20      	cmp	r2, #32
   1a066:	d00f      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a068:	2a21      	cmp	r2, #33	; 0x21
   1a06a:	d00d      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a06c:	2a22      	cmp	r2, #34	; 0x22
   1a06e:	d00b      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a070:	2a23      	cmp	r2, #35	; 0x23
   1a072:	d009      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a074:	2a24      	cmp	r2, #36	; 0x24
   1a076:	d007      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a078:	2a26      	cmp	r2, #38	; 0x26
   1a07a:	d005      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a07c:	e002      	b.n	1a084 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   1a07e:	e003      	b.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a080:	2a0e      	cmp	r2, #14
   1a082:	d001      	beq.n	1a088 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   1a084:	2000      	movs	r0, #0
   1a086:	bd10      	pop	{r4, pc}
   1a088:	2001      	movs	r0, #1
   1a08a:	bd10      	pop	{r4, pc}

0001a08c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   1a08c:	280c      	cmp	r0, #12
   1a08e:	d013      	beq.n	1a0b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1a090:	280b      	cmp	r0, #11
   1a092:	d011      	beq.n	1a0b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1a094:	280d      	cmp	r0, #13
   1a096:	d00f      	beq.n	1a0b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1a098:	281f      	cmp	r0, #31
   1a09a:	d00d      	beq.n	1a0b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1a09c:	2820      	cmp	r0, #32
   1a09e:	d00b      	beq.n	1a0b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1a0a0:	2821      	cmp	r0, #33	; 0x21
   1a0a2:	d009      	beq.n	1a0b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1a0a4:	2822      	cmp	r0, #34	; 0x22
   1a0a6:	d007      	beq.n	1a0b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1a0a8:	2823      	cmp	r0, #35	; 0x23
   1a0aa:	d005      	beq.n	1a0b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1a0ac:	2824      	cmp	r0, #36	; 0x24
   1a0ae:	d003      	beq.n	1a0b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1a0b0:	2826      	cmp	r0, #38	; 0x26
   1a0b2:	d001      	beq.n	1a0b8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1a0b4:	2000      	movs	r0, #0
   1a0b6:	4770      	bx	lr
   1a0b8:	2001      	movs	r0, #1
   1a0ba:	4770      	bx	lr

0001a0bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   1a0bc:	f011 0f0c 	tst.w	r1, #12
   1a0c0:	d016      	beq.n	1a0f0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
   1a0c2:	074a      	lsls	r2, r1, #29
   1a0c4:	f44f 7116 	mov.w	r1, #600	; 0x258
   1a0c8:	2a00      	cmp	r2, #0
   1a0ca:	da02      	bge.n	1a0d2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
   1a0cc:	f04f 0210 	mov.w	r2, #16
   1a0d0:	e001      	b.n	1a0d6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
   1a0d2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a0d6:	da01      	bge.n	1a0dc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
   1a0d8:	f04f 0196 	mov.w	r1, #150	; 0x96
   1a0dc:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   1a0e0:	eba0 0301 	sub.w	r3, r0, r1
   1a0e4:	4288      	cmp	r0, r1
   1a0e6:	d910      	bls.n	1a10a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
   1a0e8:	fb93 f0f2 	sdiv	r0, r3, r2
   1a0ec:	b280      	uxth	r0, r0
   1a0ee:	4770      	bx	lr
   1a0f0:	2902      	cmp	r1, #2
   1a0f2:	d002      	beq.n	1a0fa <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
   1a0f4:	2870      	cmp	r0, #112	; 0x70
   1a0f6:	d80a      	bhi.n	1a10e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
   1a0f8:	e007      	b.n	1a10a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
   1a0fa:	283c      	cmp	r0, #60	; 0x3c
   1a0fc:	d905      	bls.n	1a10a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
   1a0fe:	383c      	subs	r0, #60	; 0x3c
   1a100:	17c1      	asrs	r1, r0, #31
   1a102:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   1a106:	1080      	asrs	r0, r0, #2
   1a108:	e7f0      	b.n	1a0ec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
   1a10a:	2000      	movs	r0, #0
   1a10c:	e7ee      	b.n	1a0ec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
   1a10e:	3870      	subs	r0, #112	; 0x70
   1a110:	17c1      	asrs	r1, r0, #31
   1a112:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   1a116:	10c0      	asrs	r0, r0, #3
   1a118:	e7e8      	b.n	1a0ec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0001a11a <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   1a11a:	6809      	ldr	r1, [r1, #0]
   1a11c:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
   1a120:	4770      	bx	lr

0001a122 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
   1a122:	07c1      	lsls	r1, r0, #31
   1a124:	d001      	beq.n	1a12a <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
   1a126:	2001      	movs	r0, #1
   1a128:	4770      	bx	lr
   1a12a:	0781      	lsls	r1, r0, #30
   1a12c:	d501      	bpl.n	1a132 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
   1a12e:	2002      	movs	r0, #2
   1a130:	4770      	bx	lr
   1a132:	0740      	lsls	r0, r0, #29
   1a134:	d501      	bpl.n	1a13a <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
   1a136:	2008      	movs	r0, #8
   1a138:	4770      	bx	lr
   1a13a:	2000      	movs	r0, #0
   1a13c:	4770      	bx	lr

0001a13e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   1a13e:	b510      	push	{r4, lr}
   1a140:	f640 12c4 	movw	r2, #2500	; 0x9c4
   1a144:	2901      	cmp	r1, #1
   1a146:	d006      	beq.n	1a156 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
   1a148:	2902      	cmp	r1, #2
   1a14a:	d005      	beq.n	1a158 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
   1a14c:	f240 31b1 	movw	r1, #945	; 0x3b1
   1a150:	2029      	movs	r0, #41	; 0x29
   1a152:	f7f6 fc5f 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a156:	b108      	cbz	r0, 1a15c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
   1a158:	4610      	mov	r0, r2
   1a15a:	bd10      	pop	{r4, pc}
   1a15c:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1a160:	bd10      	pop	{r4, pc}

0001a162 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   1a162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a166:	460c      	mov	r4, r1
   1a168:	4605      	mov	r5, r0
   1a16a:	68c6      	ldr	r6, [r0, #12]
   1a16c:	f7f4 fb6a 	bl	e844 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   1a170:	b198      	cbz	r0, 1a19a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
   1a172:	b1bc      	cbz	r4, 1a1a4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   1a174:	4630      	mov	r0, r6
   1a176:	68e9      	ldr	r1, [r5, #12]
   1a178:	f7f4 f84e 	bl	e218 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1a17c:	2800      	cmp	r0, #0
   1a17e:	dd11      	ble.n	1a1a4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   1a180:	4420      	add	r0, r4
   1a182:	1e40      	subs	r0, r0, #1
   1a184:	fbb0 f7f4 	udiv	r7, r0, r4
   1a188:	fb07 f104 	mul.w	r1, r7, r4
   1a18c:	4630      	mov	r0, r6
   1a18e:	f7f4 f811 	bl	e1b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1a192:	60e8      	str	r0, [r5, #12]
   1a194:	4638      	mov	r0, r7
   1a196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a19a:	f240 2136 	movw	r1, #566	; 0x236
   1a19e:	2029      	movs	r0, #41	; 0x29
   1a1a0:	f7f6 fc38 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a1a4:	2000      	movs	r0, #0
   1a1a6:	e7f6      	b.n	1a196 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0001a1a8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
   1a1a8:	b530      	push	{r4, r5, lr}
   1a1aa:	4613      	mov	r3, r2
   1a1ac:	e006      	b.n	1a1bc <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
   1a1ae:	18cc      	adds	r4, r1, r3
   1a1b0:	1ad5      	subs	r5, r2, r3
   1a1b2:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   1a1b6:	1e5b      	subs	r3, r3, #1
   1a1b8:	5544      	strb	r4, [r0, r5]
   1a1ba:	b2db      	uxtb	r3, r3
   1a1bc:	2b00      	cmp	r3, #0
   1a1be:	d1f6      	bne.n	1a1ae <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
   1a1c0:	bd30      	pop	{r4, r5, pc}

0001a1c2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
   1a1c2:	b538      	push	{r3, r4, r5, lr}
   1a1c4:	4605      	mov	r5, r0
   1a1c6:	460c      	mov	r4, r1
   1a1c8:	4668      	mov	r0, sp
   1a1ca:	f7fd fd39 	bl	17c40 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   1a1ce:	b310      	cbz	r0, 1a216 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
   1a1d0:	f99d 0000 	ldrsb.w	r0, [sp]
   1a1d4:	7260      	strb	r0, [r4, #9]
   1a1d6:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   1a1da:	72a1      	strb	r1, [r4, #10]
   1a1dc:	f994 100b 	ldrsb.w	r1, [r4, #11]
   1a1e0:	2200      	movs	r2, #0
   1a1e2:	1a41      	subs	r1, r0, r1
   1a1e4:	d500      	bpl.n	1a1e8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
   1a1e6:	4249      	negs	r1, r1
   1a1e8:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   1a1ec:	428b      	cmp	r3, r1
   1a1ee:	dc10      	bgt.n	1a212 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   1a1f0:	2bff      	cmp	r3, #255	; 0xff
   1a1f2:	d00e      	beq.n	1a212 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   1a1f4:	7b21      	ldrb	r1, [r4, #12]
   1a1f6:	1c49      	adds	r1, r1, #1
   1a1f8:	b2c9      	uxtb	r1, r1
   1a1fa:	7321      	strb	r1, [r4, #12]
   1a1fc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1a200:	4299      	cmp	r1, r3
   1a202:	d802      	bhi.n	1a20a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
   1a204:	7ae1      	ldrb	r1, [r4, #11]
   1a206:	297f      	cmp	r1, #127	; 0x7f
   1a208:	d103      	bne.n	1a212 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   1a20a:	72e0      	strb	r0, [r4, #11]
   1a20c:	2000      	movs	r0, #0
   1a20e:	7320      	strb	r0, [r4, #12]
   1a210:	2201      	movs	r2, #1
   1a212:	4610      	mov	r0, r2
   1a214:	bd38      	pop	{r3, r4, r5, pc}
   1a216:	207f      	movs	r0, #127	; 0x7f
   1a218:	7260      	strb	r0, [r4, #9]
   1a21a:	2000      	movs	r0, #0
   1a21c:	bd38      	pop	{r3, r4, r5, pc}

0001a21e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   1a21e:	2300      	movs	r3, #0
   1a220:	6283      	str	r3, [r0, #40]	; 0x28
   1a222:	8602      	strh	r2, [r0, #48]	; 0x30
   1a224:	f240 2371 	movw	r3, #625	; 0x271
   1a228:	435a      	muls	r2, r3
   1a22a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1a22e:	1e52      	subs	r2, r2, #1
   1a230:	fbb2 f1f1 	udiv	r1, r2, r1
   1a234:	62c1      	str	r1, [r0, #44]	; 0x2c
   1a236:	4770      	bx	lr

0001a238 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
   1a238:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   1a23c:	4607      	mov	r7, r0
   1a23e:	4690      	mov	r8, r2
   1a240:	468b      	mov	fp, r1
   1a242:	2601      	movs	r6, #1
   1a244:	4608      	mov	r0, r1
   1a246:	f000 f941 	bl	1a4cc <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
   1a24a:	4682      	mov	sl, r0
   1a24c:	4658      	mov	r0, fp
   1a24e:	f000 f949 	bl	1a4e4 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
   1a252:	4681      	mov	r9, r0
   1a254:	f7ff ff65 	bl	1a122 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   1a258:	4604      	mov	r4, r0
   1a25a:	4650      	mov	r0, sl
   1a25c:	f7ff ff61 	bl	1a122 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   1a260:	4605      	mov	r5, r0
   1a262:	ea54 0005 	orrs.w	r0, r4, r5
   1a266:	d100      	bne.n	1a26a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
   1a268:	2600      	movs	r6, #0
   1a26a:	f7fc ff11 	bl	17090 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1a26e:	ea10 0f09 	tst.w	r0, r9
   1a272:	d100      	bne.n	1a276 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
   1a274:	2400      	movs	r4, #0
   1a276:	f7fc ff0b 	bl	17090 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1a27a:	ea10 0f0a 	tst.w	r0, sl
   1a27e:	d100      	bne.n	1a282 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
   1a280:	2500      	movs	r5, #0
   1a282:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
   1a286:	42a0      	cmp	r0, r4
   1a288:	d100      	bne.n	1a28c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
   1a28a:	2400      	movs	r4, #0
   1a28c:	f888 4000 	strb.w	r4, [r8]
   1a290:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
   1a294:	42a8      	cmp	r0, r5
   1a296:	d100      	bne.n	1a29a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
   1a298:	2500      	movs	r5, #0
   1a29a:	f888 5001 	strb.w	r5, [r8, #1]
   1a29e:	b974      	cbnz	r4, 1a2be <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
   1a2a0:	b96d      	cbnz	r5, 1a2be <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
   1a2a2:	4658      	mov	r0, fp
   1a2a4:	f000 f91c 	bl	1a4e0 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
   1a2a8:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
   1a2ac:	1a40      	subs	r0, r0, r1
   1a2ae:	b200      	sxth	r0, r0
   1a2b0:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   1a2b4:	4288      	cmp	r0, r1
   1a2b6:	dc01      	bgt.n	1a2bc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
   1a2b8:	2800      	cmp	r0, #0
   1a2ba:	dc00      	bgt.n	1a2be <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
   1a2bc:	2600      	movs	r6, #0
   1a2be:	4630      	mov	r0, r6
   1a2c0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0001a2c4 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   1a2c4:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1a2c8:	4348      	muls	r0, r1
   1a2ca:	4770      	bx	lr

0001a2cc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   1a2cc:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1a2d0:	fb10 f001 	smulbb	r0, r0, r1
   1a2d4:	4770      	bx	lr

0001a2d6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
   1a2d6:	b510      	push	{r4, lr}
   1a2d8:	2300      	movs	r3, #0
   1a2da:	461a      	mov	r2, r3
   1a2dc:	e003      	b.n	1a2e6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
   1a2de:	5c84      	ldrb	r4, [r0, r2]
   1a2e0:	4323      	orrs	r3, r4
   1a2e2:	1c52      	adds	r2, r2, #1
   1a2e4:	b2d2      	uxtb	r2, r2
   1a2e6:	428a      	cmp	r2, r1
   1a2e8:	d3f9      	bcc.n	1a2de <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
   1a2ea:	b10b      	cbz	r3, 1a2f0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
   1a2ec:	2000      	movs	r0, #0
   1a2ee:	bd10      	pop	{r4, pc}
   1a2f0:	2001      	movs	r0, #1
   1a2f2:	bd10      	pop	{r4, pc}

0001a2f4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
   1a2f4:	b510      	push	{r4, lr}
   1a2f6:	4604      	mov	r4, r0
   1a2f8:	f890 0020 	ldrb.w	r0, [r0, #32]
   1a2fc:	b108      	cbz	r0, 1a302 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
   1a2fe:	2825      	cmp	r0, #37	; 0x25
   1a300:	d901      	bls.n	1a306 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
   1a302:	2012      	movs	r0, #18
   1a304:	bd10      	pop	{r4, pc}
   1a306:	b12a      	cbz	r2, 1a314 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
   1a308:	7d60      	ldrb	r0, [r4, #21]
   1a30a:	b128      	cbz	r0, 1a318 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
   1a30c:	2801      	cmp	r0, #1
   1a30e:	d009      	beq.n	1a324 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
   1a310:	201f      	movs	r0, #31
   1a312:	bd10      	pop	{r4, pc}
   1a314:	2000      	movs	r0, #0
   1a316:	bd10      	pop	{r4, pc}
   1a318:	4620      	mov	r0, r4
   1a31a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a31e:	4611      	mov	r1, r2
   1a320:	f7f8 bb9c 	b.w	12a5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
   1a324:	88a2      	ldrh	r2, [r4, #4]
   1a326:	6909      	ldr	r1, [r1, #16]
   1a328:	f104 0015 	add.w	r0, r4, #21
   1a32c:	f7f8 fb42 	bl	129b4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   1a330:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
   1a334:	e7ee      	b.n	1a314 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0001a336 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
   1a336:	b530      	push	{r4, r5, lr}
   1a338:	1c42      	adds	r2, r0, #1
   1a33a:	428a      	cmp	r2, r1
   1a33c:	d004      	beq.n	1a348 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
   1a33e:	680a      	ldr	r2, [r1, #0]
   1a340:	f8c0 2001 	str.w	r2, [r0, #1]
   1a344:	7909      	ldrb	r1, [r1, #4]
   1a346:	7141      	strb	r1, [r0, #5]
   1a348:	7941      	ldrb	r1, [r0, #5]
   1a34a:	f001 011f 	and.w	r1, r1, #31
   1a34e:	7141      	strb	r1, [r0, #5]
   1a350:	2100      	movs	r1, #0
   1a352:	72c1      	strb	r1, [r0, #11]
   1a354:	1843      	adds	r3, r0, r1
   1a356:	1c49      	adds	r1, r1, #1
   1a358:	785c      	ldrb	r4, [r3, #1]
   1a35a:	b2c9      	uxtb	r1, r1
   1a35c:	f004 0201 	and.w	r2, r4, #1
   1a360:	0864      	lsrs	r4, r4, #1
   1a362:	f004 0501 	and.w	r5, r4, #1
   1a366:	4415      	add	r5, r2
   1a368:	0862      	lsrs	r2, r4, #1
   1a36a:	f002 0401 	and.w	r4, r2, #1
   1a36e:	442c      	add	r4, r5
   1a370:	0852      	lsrs	r2, r2, #1
   1a372:	f002 0501 	and.w	r5, r2, #1
   1a376:	442c      	add	r4, r5
   1a378:	0852      	lsrs	r2, r2, #1
   1a37a:	f002 0501 	and.w	r5, r2, #1
   1a37e:	442c      	add	r4, r5
   1a380:	0852      	lsrs	r2, r2, #1
   1a382:	f002 0501 	and.w	r5, r2, #1
   1a386:	442c      	add	r4, r5
   1a388:	0852      	lsrs	r2, r2, #1
   1a38a:	f002 0501 	and.w	r5, r2, #1
   1a38e:	442c      	add	r4, r5
   1a390:	eb04 0252 	add.w	r2, r4, r2, lsr #1
   1a394:	719a      	strb	r2, [r3, #6]
   1a396:	7ac3      	ldrb	r3, [r0, #11]
   1a398:	2905      	cmp	r1, #5
   1a39a:	441a      	add	r2, r3
   1a39c:	72c2      	strb	r2, [r0, #11]
   1a39e:	d3d9      	bcc.n	1a354 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
   1a3a0:	bd30      	pop	{r4, r5, pc}
   1a3a2:	b570      	push	{r4, r5, r6, lr}
   1a3a4:	f8d0 201f 	ldr.w	r2, [r0, #31]
   1a3a8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   1a3ac:	f012 0fff 	tst.w	r2, #255	; 0xff
   1a3b0:	f023 031f 	bic.w	r3, r3, #31
   1a3b4:	d108      	bne.n	1a3c8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
   1a3b6:	f3c2 2407 	ubfx	r4, r2, #8, #8
   1a3ba:	b92c      	cbnz	r4, 1a3c8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
   1a3bc:	f3c2 4407 	ubfx	r4, r2, #16, #8
   1a3c0:	b914      	cbnz	r4, 1a3c8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
   1a3c2:	0e12      	lsrs	r2, r2, #24
   1a3c4:	d100      	bne.n	1a3c8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
   1a3c6:	b35b      	cbz	r3, 1a420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a3c8:	f8b0 2019 	ldrh.w	r2, [r0, #25]
   1a3cc:	f8b0 501b 	ldrh.w	r5, [r0, #27]
   1a3d0:	f8b0 4017 	ldrh.w	r4, [r0, #23]
   1a3d4:	7d83      	ldrb	r3, [r0, #22]
   1a3d6:	b141      	cbz	r1, 1a3ea <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
   1a3d8:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
   1a3dc:	d905      	bls.n	1a3ea <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
   1a3de:	f640 5107 	movw	r1, #3335	; 0xd07
   1a3e2:	428a      	cmp	r2, r1
   1a3e4:	d801      	bhi.n	1a3ea <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
   1a3e6:	2101      	movs	r1, #1
   1a3e8:	e000      	b.n	1a3ec <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
   1a3ea:	2100      	movs	r1, #0
   1a3ec:	7846      	ldrb	r6, [r0, #1]
   1a3ee:	2e22      	cmp	r6, #34	; 0x22
   1a3f0:	d116      	bne.n	1a420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a3f2:	b959      	cbnz	r1, 1a40c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
   1a3f4:	1f91      	subs	r1, r2, #6
   1a3f6:	f640 467a 	movw	r6, #3194	; 0xc7a
   1a3fa:	42b1      	cmp	r1, r6
   1a3fc:	d810      	bhi.n	1a420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a3fe:	b17b      	cbz	r3, 1a420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a400:	2b08      	cmp	r3, #8
   1a402:	d80d      	bhi.n	1a420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a404:	4293      	cmp	r3, r2
   1a406:	d20b      	bcs.n	1a420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a408:	4294      	cmp	r4, r2
   1a40a:	d809      	bhi.n	1a420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a40c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   1a410:	d206      	bcs.n	1a420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a412:	f8b0 001d 	ldrh.w	r0, [r0, #29]
   1a416:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1a41a:	d801      	bhi.n	1a420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a41c:	2001      	movs	r0, #1
   1a41e:	bd70      	pop	{r4, r5, r6, pc}
   1a420:	2000      	movs	r0, #0
   1a422:	bd70      	pop	{r4, r5, r6, pc}

0001a424 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
   1a424:	b570      	push	{r4, r5, r6, lr}
   1a426:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   1a42a:	f8b0 5009 	ldrh.w	r5, [r0, #9]
   1a42e:	f830 4f05 	ldrh.w	r4, [r0, #5]!
   1a432:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   1a436:	88c0      	ldrh	r0, [r0, #6]
   1a438:	b131      	cbz	r1, 1a448 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
   1a43a:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
   1a43e:	d903      	bls.n	1a448 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
   1a440:	f640 5107 	movw	r1, #3335	; 0xd07
   1a444:	428a      	cmp	r2, r1
   1a446:	d90b      	bls.n	1a460 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
   1a448:	1f91      	subs	r1, r2, #6
   1a44a:	f640 467a 	movw	r6, #3194	; 0xc7a
   1a44e:	42b1      	cmp	r1, r6
   1a450:	d80e      	bhi.n	1a470 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a452:	b16b      	cbz	r3, 1a470 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a454:	2b08      	cmp	r3, #8
   1a456:	d80b      	bhi.n	1a470 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a458:	4293      	cmp	r3, r2
   1a45a:	d209      	bcs.n	1a470 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a45c:	4294      	cmp	r4, r2
   1a45e:	d807      	bhi.n	1a470 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a460:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   1a464:	d204      	bcs.n	1a470 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a466:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1a46a:	d801      	bhi.n	1a470 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a46c:	2001      	movs	r0, #1
   1a46e:	bd70      	pop	{r4, r5, r6, pc}
   1a470:	2000      	movs	r0, #0
   1a472:	bd70      	pop	{r4, r5, r6, pc}

0001a474 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
   1a474:	6842      	ldr	r2, [r0, #4]
   1a476:	600a      	str	r2, [r1, #0]
   1a478:	7a00      	ldrb	r0, [r0, #8]
   1a47a:	7108      	strb	r0, [r1, #4]
   1a47c:	4770      	bx	lr

0001a47e <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
   1a47e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   1a482:	4770      	bx	lr

0001a484 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
   1a484:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   1a488:	4770      	bx	lr

0001a48a <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
   1a48a:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   1a48e:	4770      	bx	lr

0001a490 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
   1a490:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   1a494:	4770      	bx	lr

0001a496 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
   1a496:	8980      	ldrh	r0, [r0, #12]
   1a498:	8008      	strh	r0, [r1, #0]
   1a49a:	4770      	bx	lr

0001a49c <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
   1a49c:	f8d0 0016 	ldr.w	r0, [r0, #22]
   1a4a0:	6008      	str	r0, [r1, #0]
   1a4a2:	4770      	bx	lr

0001a4a4 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
   1a4a4:	6842      	ldr	r2, [r0, #4]
   1a4a6:	600a      	str	r2, [r1, #0]
   1a4a8:	6880      	ldr	r0, [r0, #8]
   1a4aa:	6048      	str	r0, [r1, #4]
   1a4ac:	4770      	bx	lr

0001a4ae <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
   1a4ae:	f850 2f0e 	ldr.w	r2, [r0, #14]!
   1a4b2:	600a      	str	r2, [r1, #0]
   1a4b4:	6840      	ldr	r0, [r0, #4]
   1a4b6:	6048      	str	r0, [r1, #4]
   1a4b8:	4770      	bx	lr

0001a4ba <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
   1a4ba:	6842      	ldr	r2, [r0, #4]
   1a4bc:	600a      	str	r2, [r1, #0]
   1a4be:	6880      	ldr	r0, [r0, #8]
   1a4c0:	6048      	str	r0, [r1, #4]
   1a4c2:	4770      	bx	lr

0001a4c4 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
   1a4c4:	7800      	ldrb	r0, [r0, #0]
   1a4c6:	f000 0003 	and.w	r0, r0, #3
   1a4ca:	4770      	bx	lr

0001a4cc <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
   1a4cc:	7900      	ldrb	r0, [r0, #4]
   1a4ce:	4770      	bx	lr

0001a4d0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
   1a4d0:	8880      	ldrh	r0, [r0, #4]
   1a4d2:	4770      	bx	lr

0001a4d4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
   1a4d4:	88c0      	ldrh	r0, [r0, #6]
   1a4d6:	4770      	bx	lr

0001a4d8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
   1a4d8:	8900      	ldrh	r0, [r0, #8]
   1a4da:	4770      	bx	lr

0001a4dc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
   1a4dc:	8940      	ldrh	r0, [r0, #10]
   1a4de:	4770      	bx	lr

0001a4e0 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
   1a4e0:	88c0      	ldrh	r0, [r0, #6]
   1a4e2:	4770      	bx	lr

0001a4e4 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
   1a4e4:	7940      	ldrb	r0, [r0, #5]
   1a4e6:	4770      	bx	lr

0001a4e8 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
   1a4e8:	7900      	ldrb	r0, [r0, #4]
   1a4ea:	4770      	bx	lr

0001a4ec <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
   1a4ec:	7900      	ldrb	r0, [r0, #4]
   1a4ee:	4770      	bx	lr

0001a4f0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
   1a4f0:	8901      	ldrh	r1, [r0, #8]
   1a4f2:	291b      	cmp	r1, #27
   1a4f4:	d30c      	bcc.n	1a510 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1a4f6:	8941      	ldrh	r1, [r0, #10]
   1a4f8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a4fc:	4291      	cmp	r1, r2
   1a4fe:	d307      	bcc.n	1a510 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1a500:	8881      	ldrh	r1, [r0, #4]
   1a502:	291b      	cmp	r1, #27
   1a504:	d304      	bcc.n	1a510 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1a506:	88c0      	ldrh	r0, [r0, #6]
   1a508:	4290      	cmp	r0, r2
   1a50a:	d301      	bcc.n	1a510 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1a50c:	2001      	movs	r0, #1
   1a50e:	4770      	bx	lr
   1a510:	2000      	movs	r0, #0
   1a512:	4770      	bx	lr

0001a514 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
   1a514:	b510      	push	{r4, lr}
   1a516:	29fb      	cmp	r1, #251	; 0xfb
   1a518:	d904      	bls.n	1a524 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
   1a51a:	f44f 61af 	mov.w	r1, #1400	; 0x578
   1a51e:	202a      	movs	r0, #42	; 0x2a
   1a520:	f7f6 fa78 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a524:	7041      	strb	r1, [r0, #1]
   1a526:	bd10      	pop	{r4, pc}

0001a528 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
   1a528:	7901      	ldrb	r1, [r0, #4]
   1a52a:	0749      	lsls	r1, r1, #29
   1a52c:	d004      	beq.n	1a538 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
   1a52e:	7940      	ldrb	r0, [r0, #5]
   1a530:	0740      	lsls	r0, r0, #29
   1a532:	d001      	beq.n	1a538 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
   1a534:	2001      	movs	r0, #1
   1a536:	4770      	bx	lr
   1a538:	2000      	movs	r0, #0
   1a53a:	4770      	bx	lr

0001a53c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
   1a53c:	7900      	ldrb	r0, [r0, #4]
   1a53e:	4770      	bx	lr

0001a540 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
   1a540:	7940      	ldrb	r0, [r0, #5]
   1a542:	4770      	bx	lr

0001a544 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
   1a544:	7101      	strb	r1, [r0, #4]
   1a546:	4770      	bx	lr

0001a548 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
   1a548:	7141      	strb	r1, [r0, #5]
   1a54a:	4770      	bx	lr

0001a54c <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
   1a54c:	b510      	push	{r4, lr}
   1a54e:	2a1b      	cmp	r2, #27
   1a550:	d904      	bls.n	1a55c <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
   1a552:	f240 31df 	movw	r1, #991	; 0x3df
   1a556:	202a      	movs	r0, #42	; 0x2a
   1a558:	f7f6 fa5c 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a55c:	7042      	strb	r2, [r0, #1]
   1a55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a562:	1cc0      	adds	r0, r0, #3
   1a564:	f7fe bad7 	b.w	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0001a568 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
   1a568:	6809      	ldr	r1, [r1, #0]
   1a56a:	60c1      	str	r1, [r0, #12]
   1a56c:	4770      	bx	lr

0001a56e <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
   1a56e:	680a      	ldr	r2, [r1, #0]
   1a570:	6042      	str	r2, [r0, #4]
   1a572:	6849      	ldr	r1, [r1, #4]
   1a574:	6081      	str	r1, [r0, #8]
   1a576:	4770      	bx	lr

0001a578 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
   1a578:	680a      	ldr	r2, [r1, #0]
   1a57a:	6042      	str	r2, [r0, #4]
   1a57c:	6849      	ldr	r1, [r1, #4]
   1a57e:	6081      	str	r1, [r0, #8]
   1a580:	4770      	bx	lr

0001a582 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
   1a582:	680a      	ldr	r2, [r1, #0]
   1a584:	6042      	str	r2, [r0, #4]
   1a586:	6849      	ldr	r1, [r1, #4]
   1a588:	6081      	str	r1, [r0, #8]
   1a58a:	4770      	bx	lr

0001a58c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
   1a58c:	7802      	ldrb	r2, [r0, #0]
   1a58e:	f001 0103 	and.w	r1, r1, #3
   1a592:	f022 0203 	bic.w	r2, r2, #3
   1a596:	430a      	orrs	r2, r1
   1a598:	7002      	strb	r2, [r0, #0]
   1a59a:	4770      	bx	lr

0001a59c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
   1a59c:	7101      	strb	r1, [r0, #4]
   1a59e:	0a09      	lsrs	r1, r1, #8
   1a5a0:	7141      	strb	r1, [r0, #5]
   1a5a2:	4770      	bx	lr

0001a5a4 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
   1a5a4:	7181      	strb	r1, [r0, #6]
   1a5a6:	0a09      	lsrs	r1, r1, #8
   1a5a8:	71c1      	strb	r1, [r0, #7]
   1a5aa:	4770      	bx	lr

0001a5ac <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
   1a5ac:	7201      	strb	r1, [r0, #8]
   1a5ae:	0a09      	lsrs	r1, r1, #8
   1a5b0:	7241      	strb	r1, [r0, #9]
   1a5b2:	4770      	bx	lr

0001a5b4 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
   1a5b4:	7281      	strb	r1, [r0, #10]
   1a5b6:	0a09      	lsrs	r1, r1, #8
   1a5b8:	72c1      	strb	r1, [r0, #11]
   1a5ba:	4770      	bx	lr

0001a5bc <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
   1a5bc:	7802      	ldrb	r2, [r0, #0]
   1a5be:	f002 020f 	and.w	r2, r2, #15
   1a5c2:	2a03      	cmp	r2, #3
   1a5c4:	d003      	beq.n	1a5ce <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
   1a5c6:	2a05      	cmp	r2, #5
   1a5c8:	d104      	bne.n	1a5d4 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
   1a5ca:	f7ff beea 	b.w	1a3a2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
   1a5ce:	7840      	ldrb	r0, [r0, #1]
   1a5d0:	280c      	cmp	r0, #12
   1a5d2:	d001      	beq.n	1a5d8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
   1a5d4:	2000      	movs	r0, #0
   1a5d6:	4770      	bx	lr
   1a5d8:	2001      	movs	r0, #1
   1a5da:	4770      	bx	lr

0001a5dc <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
   1a5dc:	b570      	push	{r4, r5, r6, lr}
   1a5de:	4614      	mov	r4, r2
   1a5e0:	4605      	mov	r5, r0
   1a5e2:	2a1f      	cmp	r2, #31
   1a5e4:	d903      	bls.n	1a5ee <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
   1a5e6:	21b2      	movs	r1, #178	; 0xb2
   1a5e8:	202a      	movs	r0, #42	; 0x2a
   1a5ea:	f7f6 fa13 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a5ee:	f105 0009 	add.w	r0, r5, #9
   1a5f2:	f7fe fa90 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1a5f6:	1da4      	adds	r4, r4, #6
   1a5f8:	706c      	strb	r4, [r5, #1]
   1a5fa:	bd70      	pop	{r4, r5, r6, pc}

0001a5fc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
   1a5fc:	b510      	push	{r4, lr}
   1a5fe:	7802      	ldrb	r2, [r0, #0]
   1a600:	f001 030f 	and.w	r3, r1, #15
   1a604:	f022 020f 	bic.w	r2, r2, #15
   1a608:	431a      	orrs	r2, r3
   1a60a:	7002      	strb	r2, [r0, #0]
   1a60c:	2907      	cmp	r1, #7
   1a60e:	d20c      	bcs.n	1a62a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
   1a610:	e8df f001 	tbb	[pc, r1]
   1a614:	06040604 	.word	0x06040604
   1a618:	00040804 	.word	0x00040804
   1a61c:	2106      	movs	r1, #6
   1a61e:	e002      	b.n	1a626 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
   1a620:	210c      	movs	r1, #12
   1a622:	e000      	b.n	1a626 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
   1a624:	2122      	movs	r1, #34	; 0x22
   1a626:	7041      	strb	r1, [r0, #1]
   1a628:	bd10      	pop	{r4, pc}
   1a62a:	216e      	movs	r1, #110	; 0x6e
   1a62c:	202a      	movs	r0, #42	; 0x2a
   1a62e:	f7f6 f9f1 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001a632 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
   1a632:	680a      	ldr	r2, [r1, #0]
   1a634:	f840 2f09 	str.w	r2, [r0, #9]!
   1a638:	8889      	ldrh	r1, [r1, #4]
   1a63a:	8081      	strh	r1, [r0, #4]
   1a63c:	4770      	bx	lr

0001a63e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
   1a63e:	7802      	ldrb	r2, [r0, #0]
   1a640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1a644:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   1a648:	7002      	strb	r2, [r0, #0]
   1a64a:	4770      	bx	lr

0001a64c <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
   1a64c:	680a      	ldr	r2, [r1, #0]
   1a64e:	f840 2f03 	str.w	r2, [r0, #3]!
   1a652:	8889      	ldrh	r1, [r1, #4]
   1a654:	8081      	strh	r1, [r0, #4]
   1a656:	4770      	bx	lr

0001a658 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
   1a658:	7802      	ldrb	r2, [r0, #0]
   1a65a:	2340      	movs	r3, #64	; 0x40
   1a65c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1a660:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   1a664:	430a      	orrs	r2, r1
   1a666:	7002      	strb	r2, [r0, #0]
   1a668:	4770      	bx	lr

0001a66a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
   1a66a:	b570      	push	{r4, r5, r6, lr}
   1a66c:	4614      	mov	r4, r2
   1a66e:	4605      	mov	r5, r0
   1a670:	2a1f      	cmp	r2, #31
   1a672:	d903      	bls.n	1a67c <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
   1a674:	21d4      	movs	r1, #212	; 0xd4
   1a676:	202a      	movs	r0, #42	; 0x2a
   1a678:	f7f6 f9cc 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a67c:	f105 0009 	add.w	r0, r5, #9
   1a680:	f7fe fa49 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1a684:	1da4      	adds	r4, r4, #6
   1a686:	706c      	strb	r4, [r5, #1]
   1a688:	bd70      	pop	{r4, r5, r6, pc}

0001a68a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
   1a68a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1a68e:	4604      	mov	r4, r0
   1a690:	2000      	movs	r0, #0
   1a692:	f7f6 fba9 	bl	10de8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1a696:	2600      	movs	r6, #0
   1a698:	4605      	mov	r5, r0
   1a69a:	4637      	mov	r7, r6
   1a69c:	e00e      	b.n	1a6bc <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
   1a69e:	8820      	ldrh	r0, [r4, #0]
   1a6a0:	1c40      	adds	r0, r0, #1
   1a6a2:	b280      	uxth	r0, r0
   1a6a4:	8020      	strh	r0, [r4, #0]
   1a6a6:	42a8      	cmp	r0, r5
   1a6a8:	d300      	bcc.n	1a6ac <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
   1a6aa:	8027      	strh	r7, [r4, #0]
   1a6ac:	8820      	ldrh	r0, [r4, #0]
   1a6ae:	4669      	mov	r1, sp
   1a6b0:	f7ff fc74 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1a6b4:	2800      	cmp	r0, #0
   1a6b6:	d007      	beq.n	1a6c8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
   1a6b8:	1c76      	adds	r6, r6, #1
   1a6ba:	b2f6      	uxtb	r6, r6
   1a6bc:	42ae      	cmp	r6, r5
   1a6be:	d3ee      	bcc.n	1a69e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
   1a6c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a6c4:	8020      	strh	r0, [r4, #0]
   1a6c6:	2012      	movs	r0, #18
   1a6c8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0001a6cc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   1a6cc:	6841      	ldr	r1, [r0, #4]
   1a6ce:	2200      	movs	r2, #0
   1a6d0:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
   1a6d4:	2b00      	cmp	r3, #0
   1a6d6:	d004      	beq.n	1a6e2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
   1a6d8:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
   1a6dc:	6840      	ldr	r0, [r0, #4]
   1a6de:	f000 bc64 	b.w	1afaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   1a6e2:	4770      	bx	lr

0001a6e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
   1a6e4:	b510      	push	{r4, lr}
   1a6e6:	7901      	ldrb	r1, [r0, #4]
   1a6e8:	b119      	cbz	r1, 1a6f2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
   1a6ea:	2901      	cmp	r1, #1
   1a6ec:	d006      	beq.n	1a6fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
   1a6ee:	2000      	movs	r0, #0
   1a6f0:	bd10      	pop	{r4, pc}
   1a6f2:	8842      	ldrh	r2, [r0, #2]
   1a6f4:	6883      	ldr	r3, [r0, #8]
   1a6f6:	8800      	ldrh	r0, [r0, #0]
   1a6f8:	2102      	movs	r1, #2
   1a6fa:	e003      	b.n	1a704 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
   1a6fc:	8842      	ldrh	r2, [r0, #2]
   1a6fe:	6883      	ldr	r3, [r0, #8]
   1a700:	8800      	ldrh	r0, [r0, #0]
   1a702:	2101      	movs	r1, #1
   1a704:	f7f8 fa58 	bl	12bb8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
   1a708:	b908      	cbnz	r0, 1a70e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
   1a70a:	f7f8 faab 	bl	12c64 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
   1a70e:	2001      	movs	r0, #1
   1a710:	bd10      	pop	{r4, pc}
   1a712:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1a716:	460e      	mov	r6, r1
   1a718:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
   1a71c:	4617      	mov	r7, r2
   1a71e:	39ff      	subs	r1, #255	; 0xff
   1a720:	d014      	beq.n	1a74c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
   1a722:	8030      	strh	r0, [r6, #0]
   1a724:	2100      	movs	r1, #0
   1a726:	7171      	strb	r1, [r6, #5]
   1a728:	f7f6 fd8e 	bl	11248 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1a72c:	4604      	mov	r4, r0
   1a72e:	f7ff f81b 	bl	19768 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
   1a732:	0005      	movs	r5, r0
   1a734:	d00a      	beq.n	1a74c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
   1a736:	4620      	mov	r0, r4
   1a738:	4629      	mov	r1, r5
   1a73a:	aa01      	add	r2, sp, #4
   1a73c:	f7ff f837 	bl	197ae <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
   1a740:	8070      	strh	r0, [r6, #2]
   1a742:	b130      	cbz	r0, 1a752 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
   1a744:	28fb      	cmp	r0, #251	; 0xfb
   1a746:	d906      	bls.n	1a756 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
   1a748:	21ae      	movs	r1, #174	; 0xae
   1a74a:	e026      	b.n	1a79a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1a74c:	2000      	movs	r0, #0
   1a74e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1a752:	21ad      	movs	r1, #173	; 0xad
   1a754:	e021      	b.n	1a79a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1a756:	9801      	ldr	r0, [sp, #4]
   1a758:	f7ff feb4 	bl	1a4c4 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
   1a75c:	2801      	cmp	r0, #1
   1a75e:	d003      	beq.n	1a768 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
   1a760:	2802      	cmp	r0, #2
   1a762:	d001      	beq.n	1a768 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
   1a764:	21bd      	movs	r1, #189	; 0xbd
   1a766:	e018      	b.n	1a79a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1a768:	7130      	strb	r0, [r6, #4]
   1a76a:	4629      	mov	r1, r5
   1a76c:	8873      	ldrh	r3, [r6, #2]
   1a76e:	2503      	movs	r5, #3
   1a770:	4620      	mov	r0, r4
   1a772:	463a      	mov	r2, r7
   1a774:	9500      	str	r5, [sp, #0]
   1a776:	f7fe fee9 	bl	1954c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
   1a77a:	4620      	mov	r0, r4
   1a77c:	60b7      	str	r7, [r6, #8]
   1a77e:	f7fe ffa2 	bl	196c6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
   1a782:	b138      	cbz	r0, 1a794 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
   1a784:	2100      	movs	r1, #0
   1a786:	4620      	mov	r0, r4
   1a788:	460a      	mov	r2, r1
   1a78a:	f7ff f8ee 	bl	1996a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
   1a78e:	b118      	cbz	r0, 1a798 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
   1a790:	2001      	movs	r0, #1
   1a792:	e7dc      	b.n	1a74e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
   1a794:	21cd      	movs	r1, #205	; 0xcd
   1a796:	e000      	b.n	1a79a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1a798:	21d2      	movs	r1, #210	; 0xd2
   1a79a:	202b      	movs	r0, #43	; 0x2b
   1a79c:	f7f6 f93a 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001a7a0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
   1a7a0:	f7f8 bc1e 	b.w	12fe0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
   1a7a4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1a7a8:	4604      	mov	r4, r0
   1a7aa:	2000      	movs	r0, #0
   1a7ac:	f7f6 fb1c 	bl	10de8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1a7b0:	4605      	mov	r5, r0
   1a7b2:	2001      	movs	r0, #1
   1a7b4:	f7f6 fb18 	bl	10de8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1a7b8:	4428      	add	r0, r5
   1a7ba:	2600      	movs	r6, #0
   1a7bc:	b2c7      	uxtb	r7, r0
   1a7be:	46b0      	mov	r8, r6
   1a7c0:	e017      	b.n	1a7f2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
   1a7c2:	8820      	ldrh	r0, [r4, #0]
   1a7c4:	1c40      	adds	r0, r0, #1
   1a7c6:	b280      	uxth	r0, r0
   1a7c8:	8020      	strh	r0, [r4, #0]
   1a7ca:	42b8      	cmp	r0, r7
   1a7cc:	d302      	bcc.n	1a7d4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
   1a7ce:	4640      	mov	r0, r8
   1a7d0:	f8a4 8000 	strh.w	r8, [r4]
   1a7d4:	b280      	uxth	r0, r0
   1a7d6:	42a8      	cmp	r0, r5
   1a7d8:	d304      	bcc.n	1a7e4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
   1a7da:	42b8      	cmp	r0, r7
   1a7dc:	d202      	bcs.n	1a7e4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
   1a7de:	2000      	movs	r0, #0
   1a7e0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1a7e4:	4669      	mov	r1, sp
   1a7e6:	f7ff fbd9 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1a7ea:	2800      	cmp	r0, #0
   1a7ec:	d0f8      	beq.n	1a7e0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
   1a7ee:	1c76      	adds	r6, r6, #1
   1a7f0:	b2f6      	uxtb	r6, r6
   1a7f2:	42be      	cmp	r6, r7
   1a7f4:	d3e5      	bcc.n	1a7c2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
   1a7f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a7fa:	8020      	strh	r0, [r4, #0]
   1a7fc:	2012      	movs	r0, #18
   1a7fe:	e7ef      	b.n	1a7e0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0001a800 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   1a800:	b570      	push	{r4, r5, r6, lr}
   1a802:	8050      	strh	r0, [r2, #2]
   1a804:	890c      	ldrh	r4, [r1, #8]
   1a806:	8094      	strh	r4, [r2, #4]
   1a808:	898b      	ldrh	r3, [r1, #12]
   1a80a:	80d3      	strh	r3, [r2, #6]
   1a80c:	8948      	ldrh	r0, [r1, #10]
   1a80e:	8110      	strh	r0, [r2, #8]
   1a810:	89cd      	ldrh	r5, [r1, #14]
   1a812:	8155      	strh	r5, [r2, #10]
   1a814:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
   1a816:	42ae      	cmp	r6, r5
   1a818:	d108      	bne.n	1a82c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   1a81a:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
   1a81c:	4285      	cmp	r5, r0
   1a81e:	d105      	bne.n	1a82c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   1a820:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
   1a822:	429d      	cmp	r5, r3
   1a824:	d102      	bne.n	1a82c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   1a826:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
   1a828:	42a3      	cmp	r3, r4
   1a82a:	d001      	beq.n	1a830 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
   1a82c:	2301      	movs	r3, #1
   1a82e:	e000      	b.n	1a832 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
   1a830:	2300      	movs	r3, #0
   1a832:	7313      	strb	r3, [r2, #12]
   1a834:	8548      	strh	r0, [r1, #42]	; 0x2a
   1a836:	8950      	ldrh	r0, [r2, #10]
   1a838:	85c8      	strh	r0, [r1, #46]	; 0x2e
   1a83a:	8890      	ldrh	r0, [r2, #4]
   1a83c:	8588      	strh	r0, [r1, #44]	; 0x2c
   1a83e:	88d0      	ldrh	r0, [r2, #6]
   1a840:	8608      	strh	r0, [r1, #48]	; 0x30
   1a842:	2001      	movs	r0, #1
   1a844:	7010      	strb	r0, [r2, #0]
   1a846:	bd70      	pop	{r4, r5, r6, pc}

0001a848 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
   1a848:	b510      	push	{r4, lr}
   1a84a:	888c      	ldrh	r4, [r1, #4]
   1a84c:	890a      	ldrh	r2, [r1, #8]
   1a84e:	884b      	ldrh	r3, [r1, #2]
   1a850:	88c9      	ldrh	r1, [r1, #6]
   1a852:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
   1a856:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
   1a85a:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
   1a85e:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
   1a862:	bd10      	pop	{r4, pc}

0001a864 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   1a864:	b570      	push	{r4, r5, r6, lr}
   1a866:	4615      	mov	r5, r2
   1a868:	460c      	mov	r4, r1
   1a86a:	f000 f8c7 	bl	1a9fc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
   1a86e:	3096      	adds	r0, #150	; 0x96
   1a870:	4428      	add	r0, r5
   1a872:	42a0      	cmp	r0, r4
   1a874:	d801      	bhi.n	1a87a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
   1a876:	1a20      	subs	r0, r4, r0
   1a878:	bd70      	pop	{r4, r5, r6, pc}
   1a87a:	2000      	movs	r0, #0
   1a87c:	bd70      	pop	{r4, r5, r6, pc}

0001a87e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   1a87e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a882:	4604      	mov	r4, r0
   1a884:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
   1a886:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
   1a888:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
   1a88c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   1a890:	4285      	cmp	r5, r0
   1a892:	d300      	bcc.n	1a896 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
   1a894:	4605      	mov	r5, r0
   1a896:	4620      	mov	r0, r4
   1a898:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
   1a89c:	f000 f89e 	bl	1a9dc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
   1a8a0:	4601      	mov	r1, r0
   1a8a2:	86e5      	strh	r5, [r4, #54]	; 0x36
   1a8a4:	8761      	strh	r1, [r4, #58]	; 0x3a
   1a8a6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   1a8a8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1a8ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   1a8ae:	4680      	mov	r8, r0
   1a8b0:	42aa      	cmp	r2, r5
   1a8b2:	d200      	bcs.n	1a8b6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
   1a8b4:	462a      	mov	r2, r5
   1a8b6:	428b      	cmp	r3, r1
   1a8b8:	d200      	bcs.n	1a8bc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
   1a8ba:	460b      	mov	r3, r1
   1a8bc:	8202      	strh	r2, [r0, #16]
   1a8be:	f8a8 3012 	strh.w	r3, [r8, #18]
   1a8c2:	42bd      	cmp	r5, r7
   1a8c4:	d101      	bne.n	1a8ca <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
   1a8c6:	42b1      	cmp	r1, r6
   1a8c8:	d001      	beq.n	1a8ce <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
   1a8ca:	2001      	movs	r0, #1
   1a8cc:	e000      	b.n	1a8d0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
   1a8ce:	2000      	movs	r0, #0
   1a8d0:	4681      	mov	r9, r0
   1a8d2:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
   1a8d6:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
   1a8da:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
   1a8dc:	8f26      	ldrh	r6, [r4, #56]	; 0x38
   1a8de:	4285      	cmp	r5, r0
   1a8e0:	d300      	bcc.n	1a8e4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
   1a8e2:	4605      	mov	r5, r0
   1a8e4:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
   1a8e8:	4620      	mov	r0, r4
   1a8ea:	f000 f87f 	bl	1a9ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
   1a8ee:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   1a8f2:	2902      	cmp	r1, #2
   1a8f4:	d108      	bne.n	1a908 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
   1a8f6:	42af      	cmp	r7, r5
   1a8f8:	d200      	bcs.n	1a8fc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
   1a8fa:	463d      	mov	r5, r7
   1a8fc:	4286      	cmp	r6, r0
   1a8fe:	d200      	bcs.n	1a902 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
   1a900:	4630      	mov	r0, r6
   1a902:	2100      	movs	r1, #0
   1a904:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   1a908:	f8a8 5008 	strh.w	r5, [r8, #8]
   1a90c:	f8a8 000c 	strh.w	r0, [r8, #12]
   1a910:	42bd      	cmp	r5, r7
   1a912:	d101      	bne.n	1a918 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
   1a914:	42b0      	cmp	r0, r6
   1a916:	d001      	beq.n	1a91c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
   1a918:	2001      	movs	r0, #1
   1a91a:	e000      	b.n	1a91e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
   1a91c:	2000      	movs	r0, #0
   1a91e:	ea40 0009 	orr.w	r0, r0, r9
   1a922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a926 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
   1a926:	6840      	ldr	r0, [r0, #4]
   1a928:	4770      	bx	lr

0001a92a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   1a92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a92e:	4616      	mov	r6, r2
   1a930:	460f      	mov	r7, r1
   1a932:	4604      	mov	r4, r0
   1a934:	f000 f862 	bl	1a9fc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
   1a938:	4605      	mov	r5, r0
   1a93a:	463a      	mov	r2, r7
   1a93c:	68e1      	ldr	r1, [r4, #12]
   1a93e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1a940:	f000 f847 	bl	1a9d2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
   1a944:	19a9      	adds	r1, r5, r6
   1a946:	4281      	cmp	r1, r0
   1a948:	d300      	bcc.n	1a94c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
   1a94a:	4608      	mov	r0, r1
   1a94c:	6320      	str	r0, [r4, #48]	; 0x30
   1a94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a952 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   1a952:	221b      	movs	r2, #27
   1a954:	8402      	strh	r2, [r0, #32]
   1a956:	8382      	strh	r2, [r0, #28]
   1a958:	82c2      	strh	r2, [r0, #22]
   1a95a:	8282      	strh	r2, [r0, #20]
   1a95c:	8142      	strh	r2, [r0, #10]
   1a95e:	8202      	strh	r2, [r0, #16]
   1a960:	8102      	strh	r2, [r0, #8]
   1a962:	8542      	strh	r2, [r0, #42]	; 0x2a
   1a964:	8582      	strh	r2, [r0, #44]	; 0x2c
   1a966:	8482      	strh	r2, [r0, #36]	; 0x24
   1a968:	2900      	cmp	r1, #0
   1a96a:	d10a      	bne.n	1a982 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
   1a96c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1a970:	8441      	strh	r1, [r0, #34]	; 0x22
   1a972:	83c1      	strh	r1, [r0, #30]
   1a974:	8341      	strh	r1, [r0, #26]
   1a976:	8301      	strh	r1, [r0, #24]
   1a978:	81c1      	strh	r1, [r0, #14]
   1a97a:	8241      	strh	r1, [r0, #18]
   1a97c:	8181      	strh	r1, [r0, #12]
   1a97e:	85c1      	strh	r1, [r0, #46]	; 0x2e
   1a980:	8601      	strh	r1, [r0, #48]	; 0x30
   1a982:	4770      	bx	lr

0001a984 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   1a984:	6800      	ldr	r0, [r0, #0]
   1a986:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   1a98a:	4290      	cmp	r0, r2
   1a98c:	d903      	bls.n	1a996 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
   1a98e:	1a40      	subs	r0, r0, r1
   1a990:	389c      	subs	r0, #156	; 0x9c
   1a992:	0840      	lsrs	r0, r0, #1
   1a994:	4770      	bx	lr
   1a996:	2000      	movs	r0, #0
   1a998:	4770      	bx	lr

0001a99a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   1a99a:	b510      	push	{r4, lr}
   1a99c:	9c02      	ldr	r4, [sp, #8]
   1a99e:	8281      	strh	r1, [r0, #20]
   1a9a0:	82c2      	strh	r2, [r0, #22]
   1a9a2:	8303      	strh	r3, [r0, #24]
   1a9a4:	8344      	strh	r4, [r0, #26]
   1a9a6:	bd10      	pop	{r4, pc}

0001a9a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   1a9a8:	8050      	strh	r0, [r2, #2]
   1a9aa:	8a88      	ldrh	r0, [r1, #20]
   1a9ac:	8090      	strh	r0, [r2, #4]
   1a9ae:	8ac8      	ldrh	r0, [r1, #22]
   1a9b0:	80d0      	strh	r0, [r2, #6]
   1a9b2:	8b08      	ldrh	r0, [r1, #24]
   1a9b4:	8110      	strh	r0, [r2, #8]
   1a9b6:	8b48      	ldrh	r0, [r1, #26]
   1a9b8:	8150      	strh	r0, [r2, #10]
   1a9ba:	2001      	movs	r0, #1
   1a9bc:	7010      	strb	r0, [r2, #0]
   1a9be:	4770      	bx	lr
   1a9c0:	2902      	cmp	r1, #2
   1a9c2:	d003      	beq.n	1a9cc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
   1a9c4:	00c0      	lsls	r0, r0, #3
   1a9c6:	3070      	adds	r0, #112	; 0x70
   1a9c8:	b280      	uxth	r0, r0
   1a9ca:	4770      	bx	lr
   1a9cc:	0080      	lsls	r0, r0, #2
   1a9ce:	303c      	adds	r0, #60	; 0x3c
   1a9d0:	e7fa      	b.n	1a9c8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
   1a9d2:	4288      	cmp	r0, r1
   1a9d4:	d300      	bcc.n	1a9d8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
   1a9d6:	4608      	mov	r0, r1
   1a9d8:	1a80      	subs	r0, r0, r2
   1a9da:	4770      	bx	lr
   1a9dc:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
   1a9e0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
   1a9e4:	4281      	cmp	r1, r0
   1a9e6:	d200      	bcs.n	1a9ea <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
   1a9e8:	4608      	mov	r0, r1
   1a9ea:	4770      	bx	lr
   1a9ec:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   1a9f0:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
   1a9f4:	4281      	cmp	r1, r0
   1a9f6:	d200      	bcs.n	1a9fa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
   1a9f8:	4608      	mov	r0, r1
   1a9fa:	4770      	bx	lr
   1a9fc:	2196      	movs	r1, #150	; 0x96
   1a9fe:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
   1aa02:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
   1aa06:	f000 b800 	b.w	1aa0a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
   1aa0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa0e:	460d      	mov	r5, r1
   1aa10:	4606      	mov	r6, r0
   1aa12:	4698      	mov	r8, r3
   1aa14:	4617      	mov	r7, r2
   1aa16:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   1aa18:	4611      	mov	r1, r2
   1aa1a:	f7ff ffd1 	bl	1a9c0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
   1aa1e:	4604      	mov	r4, r0
   1aa20:	4639      	mov	r1, r7
   1aa22:	4630      	mov	r0, r6
   1aa24:	f7ff ffe2 	bl	1a9ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
   1aa28:	42a0      	cmp	r0, r4
   1aa2a:	d200      	bcs.n	1aa2e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
   1aa2c:	4604      	mov	r4, r0
   1aa2e:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
   1aa30:	4641      	mov	r1, r8
   1aa32:	f7ff ffc5 	bl	1a9c0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
   1aa36:	4607      	mov	r7, r0
   1aa38:	4641      	mov	r1, r8
   1aa3a:	4630      	mov	r0, r6
   1aa3c:	f7ff ffce 	bl	1a9dc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
   1aa40:	42b8      	cmp	r0, r7
   1aa42:	d300      	bcc.n	1aa46 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
   1aa44:	4638      	mov	r0, r7
   1aa46:	4420      	add	r0, r4
   1aa48:	4428      	add	r0, r5
   1aa4a:	1d80      	adds	r0, r0, #6
   1aa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001aa50 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
   1aa50:	b510      	push	{r4, lr}
   1aa52:	4604      	mov	r4, r0
   1aa54:	2108      	movs	r1, #8
   1aa56:	4620      	mov	r0, r4
   1aa58:	f7f6 f876 	bl	10b48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1aa5c:	6820      	ldr	r0, [r4, #0]
   1aa5e:	2800      	cmp	r0, #0
   1aa60:	d102      	bne.n	1aa68 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
   1aa62:	6860      	ldr	r0, [r4, #4]
   1aa64:	2800      	cmp	r0, #0
   1aa66:	d0f5      	beq.n	1aa54 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
   1aa68:	bd10      	pop	{r4, pc}
   1aa6a:	2801      	cmp	r0, #1
   1aa6c:	d102      	bne.n	1aa74 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
   1aa6e:	7948      	ldrb	r0, [r1, #5]
   1aa70:	0980      	lsrs	r0, r0, #6
   1aa72:	d001      	beq.n	1aa78 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
   1aa74:	2000      	movs	r0, #0
   1aa76:	4770      	bx	lr
   1aa78:	2001      	movs	r0, #1
   1aa7a:	4770      	bx	lr
   1aa7c:	2801      	cmp	r0, #1
   1aa7e:	d106      	bne.n	1aa8e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
   1aa80:	7948      	ldrb	r0, [r1, #5]
   1aa82:	2101      	movs	r1, #1
   1aa84:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
   1aa88:	d101      	bne.n	1aa8e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
   1aa8a:	2001      	movs	r0, #1
   1aa8c:	4770      	bx	lr
   1aa8e:	2000      	movs	r0, #0
   1aa90:	4770      	bx	lr
   1aa92:	2802      	cmp	r0, #2
   1aa94:	d003      	beq.n	1aa9e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
   1aa96:	2803      	cmp	r0, #3
   1aa98:	d001      	beq.n	1aa9e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
   1aa9a:	2000      	movs	r0, #0
   1aa9c:	4770      	bx	lr
   1aa9e:	2001      	movs	r0, #1
   1aaa0:	4770      	bx	lr

0001aaa2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
   1aaa2:	b510      	push	{r4, lr}
   1aaa4:	4604      	mov	r4, r0
   1aaa6:	7c00      	ldrb	r0, [r0, #16]
   1aaa8:	f7ff fff3 	bl	1aa92 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
   1aaac:	b148      	cbz	r0, 1aac2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
   1aaae:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
   1aab2:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1aab6:	f7ff fa2e 	bl	19f16 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   1aaba:	2808      	cmp	r0, #8
   1aabc:	d001      	beq.n	1aac2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
   1aabe:	2001      	movs	r0, #1
   1aac0:	bd10      	pop	{r4, pc}
   1aac2:	7c20      	ldrb	r0, [r4, #16]
   1aac4:	b118      	cbz	r0, 1aace <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
   1aac6:	2802      	cmp	r0, #2
   1aac8:	d001      	beq.n	1aace <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
   1aaca:	7de0      	ldrb	r0, [r4, #23]
   1aacc:	bd10      	pop	{r4, pc}
   1aace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1aad2:	2000      	movs	r0, #0
   1aad4:	f7f6 bec8 	b.w	11868 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0001aad8 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
   1aad8:	b508      	push	{r3, lr}
   1aada:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
   1aade:	f88d 1000 	strb.w	r1, [sp]
   1aae2:	9900      	ldr	r1, [sp, #0]
   1aae4:	9100      	str	r1, [sp, #0]
   1aae6:	f89d 1000 	ldrb.w	r1, [sp]
   1aaea:	b109      	cbz	r1, 1aaf0 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
   1aaec:	2001      	movs	r0, #1
   1aaee:	bd08      	pop	{r3, pc}
   1aaf0:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   1aaf4:	f88d 0000 	strb.w	r0, [sp]
   1aaf8:	9800      	ldr	r0, [sp, #0]
   1aafa:	9000      	str	r0, [sp, #0]
   1aafc:	f89d 0000 	ldrb.w	r0, [sp]
   1ab00:	2000      	movs	r0, #0
   1ab02:	bd08      	pop	{r3, pc}

0001ab04 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
   1ab04:	20ff      	movs	r0, #255	; 0xff
   1ab06:	7008      	strb	r0, [r1, #0]
   1ab08:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   1ab0a:	f7ff b955 	b.w	19db8 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0001ab0e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
   1ab0e:	b51c      	push	{r2, r3, r4, lr}
   1ab10:	4604      	mov	r4, r0
   1ab12:	22d4      	movs	r2, #212	; 0xd4
   1ab14:	2100      	movs	r1, #0
   1ab16:	f7fe f878 	bl	18c0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1ab1a:	20ff      	movs	r0, #255	; 0xff
   1ab1c:	7020      	strb	r0, [r4, #0]
   1ab1e:	207f      	movs	r0, #127	; 0x7f
   1ab20:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   1ab24:	2013      	movs	r0, #19
   1ab26:	8060      	strh	r0, [r4, #2]
   1ab28:	f7f6 fc4e 	bl	113c8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
   1ab2c:	4601      	mov	r1, r0
   1ab2e:	62e0      	str	r0, [r4, #44]	; 0x2c
   1ab30:	2200      	movs	r2, #0
   1ab32:	4668      	mov	r0, sp
   1ab34:	f7ff f8ab 	bl	19c8e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1ab38:	2200      	movs	r2, #0
   1ab3a:	2101      	movs	r1, #1
   1ab3c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1ab3e:	f7ff f91b 	bl	19d78 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1ab42:	2204      	movs	r2, #4
   1ab44:	4668      	mov	r0, sp
   1ab46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1ab48:	f7ff f8a1 	bl	19c8e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1ab4c:	2200      	movs	r2, #0
   1ab4e:	4611      	mov	r1, r2
   1ab50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1ab52:	f7ff f911 	bl	19d78 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1ab56:	2000      	movs	r0, #0
   1ab58:	73a0      	strb	r0, [r4, #14]
   1ab5a:	f104 0020 	add.w	r0, r4, #32
   1ab5e:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
   1ab62:	f000 b962 	b.w	1ae2a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0001ab66 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
   1ab66:	7880      	ldrb	r0, [r0, #2]
   1ab68:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1ab6c:	b108      	cbz	r0, 1ab72 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
   1ab6e:	2000      	movs	r0, #0
   1ab70:	4770      	bx	lr
   1ab72:	201f      	movs	r0, #31
   1ab74:	4770      	bx	lr

0001ab76 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
   1ab76:	f7f8 bfad 	b.w	13ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>

0001ab7a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
   1ab7a:	6880      	ldr	r0, [r0, #8]
   1ab7c:	4770      	bx	lr

0001ab7e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
   1ab7e:	2001      	movs	r0, #1
   1ab80:	4770      	bx	lr

0001ab82 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
   1ab82:	b510      	push	{r4, lr}
   1ab84:	4604      	mov	r4, r0
   1ab86:	3020      	adds	r0, #32
   1ab88:	f000 f90f 	bl	1adaa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   1ab8c:	8861      	ldrh	r1, [r4, #2]
   1ab8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ab92:	2228      	movs	r2, #40	; 0x28
   1ab94:	f7f9 b97e 	b.w	13e94 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0001ab98 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
   1ab98:	2200      	movs	r2, #0
   1ab9a:	6282      	str	r2, [r0, #40]	; 0x28
   1ab9c:	8843      	ldrh	r3, [r0, #2]
   1ab9e:	2b1d      	cmp	r3, #29
   1aba0:	d001      	beq.n	1aba6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
   1aba2:	7341      	strb	r1, [r0, #13]
   1aba4:	4770      	bx	lr
   1aba6:	7342      	strb	r2, [r0, #13]
   1aba8:	4770      	bx	lr

0001abaa <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
   1abaa:	b510      	push	{r4, lr}
   1abac:	2400      	movs	r4, #0
   1abae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1abb0:	f7ff f8d0 	bl	19d54 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
   1abb4:	b100      	cbz	r0, 1abb8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
   1abb6:	2001      	movs	r0, #1
   1abb8:	4384      	bics	r4, r0
   1abba:	f084 0001 	eor.w	r0, r4, #1
   1abbe:	bd10      	pop	{r4, pc}

0001abc0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
   1abc0:	2000      	movs	r0, #0
   1abc2:	4770      	bx	lr

0001abc4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
   1abc4:	7880      	ldrb	r0, [r0, #2]
   1abc6:	f000 0001 	and.w	r0, r0, #1
   1abca:	4770      	bx	lr

0001abcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
   1abcc:	7880      	ldrb	r0, [r0, #2]
   1abce:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1abd2:	4770      	bx	lr

0001abd4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
   1abd4:	2001      	movs	r0, #1
   1abd6:	4770      	bx	lr

0001abd8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
   1abd8:	7880      	ldrb	r0, [r0, #2]
   1abda:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1abde:	4770      	bx	lr

0001abe0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
   1abe0:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1abe4:	4770      	bx	lr

0001abe6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
   1abe6:	7800      	ldrb	r0, [r0, #0]
   1abe8:	28ff      	cmp	r0, #255	; 0xff
   1abea:	d001      	beq.n	1abf0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
   1abec:	2001      	movs	r0, #1
   1abee:	4770      	bx	lr
   1abf0:	2000      	movs	r0, #0
   1abf2:	4770      	bx	lr

0001abf4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
   1abf4:	680a      	ldr	r2, [r1, #0]
   1abf6:	f840 2f11 	str.w	r2, [r0, #17]!
   1abfa:	8889      	ldrh	r1, [r1, #4]
   1abfc:	8081      	strh	r1, [r0, #4]
   1abfe:	2101      	movs	r1, #1
   1ac00:	7181      	strb	r1, [r0, #6]
   1ac02:	4770      	bx	lr

0001ac04 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
   1ac04:	7b00      	ldrb	r0, [r0, #12]
   1ac06:	4770      	bx	lr

0001ac08 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
   1ac08:	2001      	movs	r0, #1
   1ac0a:	4770      	bx	lr

0001ac0c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
   1ac0c:	61c1      	str	r1, [r0, #28]
   1ac0e:	4770      	bx	lr

0001ac10 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
   1ac10:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
   1ac14:	4770      	bx	lr

0001ac16 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
   1ac16:	b570      	push	{r4, r5, r6, lr}
   1ac18:	4604      	mov	r4, r0
   1ac1a:	7880      	ldrb	r0, [r0, #2]
   1ac1c:	2501      	movs	r5, #1
   1ac1e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1ac22:	b138      	cbz	r0, 1ac34 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
   1ac24:	233c      	movs	r3, #60	; 0x3c
   1ac26:	22ff      	movs	r2, #255	; 0xff
   1ac28:	4620      	mov	r0, r4
   1ac2a:	69e1      	ldr	r1, [r4, #28]
   1ac2c:	f7f8 ff7e 	bl	13b2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
   1ac30:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
   1ac34:	78a0      	ldrb	r0, [r4, #2]
   1ac36:	07c0      	lsls	r0, r0, #31
   1ac38:	f7f8 f878 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1ac3c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
   1ac40:	bd70      	pop	{r4, r5, r6, pc}

0001ac42 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
   1ac42:	7bc0      	ldrb	r0, [r0, #15]
   1ac44:	2800      	cmp	r0, #0
   1ac46:	d000      	beq.n	1ac4a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
   1ac48:	2001      	movs	r0, #1
   1ac4a:	4770      	bx	lr
   1ac4c:	b510      	push	{r4, lr}
   1ac4e:	f7ff f962 	bl	19f16 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   1ac52:	4604      	mov	r4, r0
   1ac54:	f7f7 fcaa 	bl	125ac <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
   1ac58:	b138      	cbz	r0, 1ac6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
   1ac5a:	4620      	mov	r0, r4
   1ac5c:	f7f7 fbde 	bl	1241c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   1ac60:	b118      	cbz	r0, 1ac6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
   1ac62:	2110      	movs	r1, #16
   1ac64:	f7ff fb37 	bl	1a2d6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   1ac68:	b108      	cbz	r0, 1ac6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
   1ac6a:	2000      	movs	r0, #0
   1ac6c:	bd10      	pop	{r4, pc}
   1ac6e:	2001      	movs	r0, #1
   1ac70:	bd10      	pop	{r4, pc}
   1ac72:	2101      	movs	r1, #1
   1ac74:	f7f8 bbba 	b.w	133ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
   1ac78:	2101      	movs	r1, #1
   1ac7a:	f7f8 bbb7 	b.w	133ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
   1ac7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac82:	4604      	mov	r4, r0
   1ac84:	2700      	movs	r7, #0
   1ac86:	704f      	strb	r7, [r1, #1]
   1ac88:	2011      	movs	r0, #17
   1ac8a:	460d      	mov	r5, r1
   1ac8c:	7008      	strb	r0, [r1, #0]
   1ac8e:	2220      	movs	r2, #32
   1ac90:	f104 0166 	add.w	r1, r4, #102	; 0x66
   1ac94:	1d28      	adds	r0, r5, #4
   1ac96:	f7fd ff3e 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1ac9a:	2601      	movs	r6, #1
   1ac9c:	722e      	strb	r6, [r5, #8]
   1ac9e:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
   1aca2:	7928      	ldrb	r0, [r5, #4]
   1aca4:	2800      	cmp	r0, #0
   1aca6:	d111      	bne.n	1accc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
   1aca8:	88e8      	ldrh	r0, [r5, #6]
   1acaa:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
   1acae:	69e0      	ldr	r0, [r4, #28]
   1acb0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   1acb4:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
   1acb8:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
   1acbc:	8800      	ldrh	r0, [r0, #0]
   1acbe:	f7f6 fac3 	bl	11248 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1acc2:	f7fe fe04 	bl	198ce <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   1acc6:	69e0      	ldr	r0, [r4, #28]
   1acc8:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
   1accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1acd4:	4604      	mov	r4, r0
   1acd6:	460f      	mov	r7, r1
   1acd8:	7e40      	ldrb	r0, [r0, #25]
   1acda:	f7f7 fb5f 	bl	1239c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
   1acde:	4606      	mov	r6, r0
   1ace0:	7e20      	ldrb	r0, [r4, #24]
   1ace2:	f104 0549 	add.w	r5, r4, #73	; 0x49
   1ace6:	b120      	cbz	r0, 1acf2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
   1ace8:	b11e      	cbz	r6, 1acf2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
   1acea:	7e60      	ldrb	r0, [r4, #25]
   1acec:	f7f7 fb4a 	bl	12384 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
   1acf0:	b1a0      	cbz	r0, 1ad1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
   1acf2:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
   1acf6:	2800      	cmp	r0, #0
   1acf8:	d024      	beq.n	1ad44 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
   1acfa:	7ea0      	ldrb	r0, [r4, #26]
   1acfc:	2800      	cmp	r0, #0
   1acfe:	d021      	beq.n	1ad44 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
   1ad00:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1ad04:	4629      	mov	r1, r5
   1ad06:	f7ff feb9 	bl	1aa7c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
   1ad0a:	b1a8      	cbz	r0, 1ad38 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
   1ad0c:	f7f7 fb36 	bl	1237c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
   1ad10:	463a      	mov	r2, r7
   1ad12:	4629      	mov	r1, r5
   1ad14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ad18:	f7ff b895 	b.w	19e46 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   1ad1c:	2001      	movs	r0, #1
   1ad1e:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
   1ad22:	463a      	mov	r2, r7
   1ad24:	4629      	mov	r1, r5
   1ad26:	4630      	mov	r0, r6
   1ad28:	f7ff f88d 	bl	19e46 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   1ad2c:	7e61      	ldrb	r1, [r4, #25]
   1ad2e:	4628      	mov	r0, r5
   1ad30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ad34:	f7f7 bb3e 	b.w	123b4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
   1ad38:	4639      	mov	r1, r7
   1ad3a:	4628      	mov	r0, r5
   1ad3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ad40:	f7ff b870 	b.w	19e24 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
   1ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad48:	b510      	push	{r4, lr}
   1ad4a:	4604      	mov	r4, r0
   1ad4c:	4608      	mov	r0, r1
   1ad4e:	f7fc ffbb 	bl	17cc8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   1ad52:	7921      	ldrb	r1, [r4, #4]
   1ad54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad58:	2025      	movs	r0, #37	; 0x25
   1ad5a:	f001 bdad 	b.w	1c8b8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
   1ad5e:	b510      	push	{r4, lr}
   1ad60:	4604      	mov	r4, r0
   1ad62:	3026      	adds	r0, #38	; 0x26
   1ad64:	f7fc ff6c 	bl	17c40 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   1ad68:	2800      	cmp	r0, #0
   1ad6a:	d102      	bne.n	1ad72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
   1ad6c:	207f      	movs	r0, #127	; 0x7f
   1ad6e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   1ad72:	bd10      	pop	{r4, pc}
   1ad74:	7802      	ldrb	r2, [r0, #0]
   1ad76:	2320      	movs	r3, #32
   1ad78:	f022 0220 	bic.w	r2, r2, #32
   1ad7c:	ea03 1141 	and.w	r1, r3, r1, lsl #5
   1ad80:	430a      	orrs	r2, r1
   1ad82:	7002      	strb	r2, [r0, #0]
   1ad84:	4770      	bx	lr

0001ad86 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   1ad86:	b570      	push	{r4, r5, r6, lr}
   1ad88:	7001      	strb	r1, [r0, #0]
   1ad8a:	7042      	strb	r2, [r0, #1]
   1ad8c:	4614      	mov	r4, r2
   1ad8e:	460d      	mov	r5, r1
   1ad90:	7880      	ldrb	r0, [r0, #2]
   1ad92:	f000 f87f 	bl	1ae94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   1ad96:	fb10 f005 	smulbb	r0, r0, r5
   1ad9a:	4360      	muls	r0, r4
   1ad9c:	28ff      	cmp	r0, #255	; 0xff
   1ad9e:	d303      	bcc.n	1ada8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
   1ada0:	215c      	movs	r1, #92	; 0x5c
   1ada2:	202e      	movs	r0, #46	; 0x2e
   1ada4:	f7f5 fe36 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ada8:	bd70      	pop	{r4, r5, r6, pc}

0001adaa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   1adaa:	b510      	push	{r4, lr}
   1adac:	4604      	mov	r4, r0
   1adae:	7880      	ldrb	r0, [r0, #2]
   1adb0:	f000 f870 	bl	1ae94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   1adb4:	7861      	ldrb	r1, [r4, #1]
   1adb6:	7822      	ldrb	r2, [r4, #0]
   1adb8:	fb11 f102 	smulbb	r1, r1, r2
   1adbc:	4348      	muls	r0, r1
   1adbe:	b2c0      	uxtb	r0, r0
   1adc0:	bd10      	pop	{r4, pc}

0001adc2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   1adc2:	b510      	push	{r4, lr}
   1adc4:	4604      	mov	r4, r0
   1adc6:	f000 f84d 	bl	1ae64 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
   1adca:	7961      	ldrb	r1, [r4, #5]
   1adcc:	1c49      	adds	r1, r1, #1
   1adce:	b2c9      	uxtb	r1, r1
   1add0:	7161      	strb	r1, [r4, #5]
   1add2:	7862      	ldrb	r2, [r4, #1]
   1add4:	4291      	cmp	r1, r2
   1add6:	d10b      	bne.n	1adf0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
   1add8:	2200      	movs	r2, #0
   1adda:	7162      	strb	r2, [r4, #5]
   1addc:	78e1      	ldrb	r1, [r4, #3]
   1adde:	4301      	orrs	r1, r0
   1ade0:	70e1      	strb	r1, [r4, #3]
   1ade2:	78a3      	ldrb	r3, [r4, #2]
   1ade4:	4299      	cmp	r1, r3
   1ade6:	d103      	bne.n	1adf0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
   1ade8:	70e2      	strb	r2, [r4, #3]
   1adea:	7921      	ldrb	r1, [r4, #4]
   1adec:	1c49      	adds	r1, r1, #1
   1adee:	7121      	strb	r1, [r4, #4]
   1adf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1adf4:	f000 b825 	b.w	1ae42 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0001adf8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   1adf8:	7081      	strb	r1, [r0, #2]
   1adfa:	4770      	bx	lr

0001adfc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   1adfc:	b570      	push	{r4, r5, r6, lr}
   1adfe:	4604      	mov	r4, r0
   1ae00:	7880      	ldrb	r0, [r0, #2]
   1ae02:	f000 f847 	bl	1ae94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   1ae06:	7861      	ldrb	r1, [r4, #1]
   1ae08:	fb11 f500 	smulbb	r5, r1, r0
   1ae0c:	78e0      	ldrb	r0, [r4, #3]
   1ae0e:	f000 f841 	bl	1ae94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   1ae12:	7861      	ldrb	r1, [r4, #1]
   1ae14:	7962      	ldrb	r2, [r4, #5]
   1ae16:	fb10 2001 	smlabb	r0, r0, r1, r2
   1ae1a:	7821      	ldrb	r1, [r4, #0]
   1ae1c:	7922      	ldrb	r2, [r4, #4]
   1ae1e:	1a89      	subs	r1, r1, r2
   1ae20:	fb11 f105 	smulbb	r1, r1, r5
   1ae24:	1a08      	subs	r0, r1, r0
   1ae26:	b2c0      	uxtb	r0, r0
   1ae28:	bd70      	pop	{r4, r5, r6, pc}

0001ae2a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   1ae2a:	2100      	movs	r1, #0
   1ae2c:	6001      	str	r1, [r0, #0]
   1ae2e:	8081      	strh	r1, [r0, #4]
   1ae30:	2101      	movs	r1, #1
   1ae32:	7041      	strb	r1, [r0, #1]
   1ae34:	7001      	strb	r1, [r0, #0]
   1ae36:	4770      	bx	lr

0001ae38 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   1ae38:	2100      	movs	r1, #0
   1ae3a:	70c1      	strb	r1, [r0, #3]
   1ae3c:	7141      	strb	r1, [r0, #5]
   1ae3e:	7101      	strb	r1, [r0, #4]
   1ae40:	4770      	bx	lr
   1ae42:	b510      	push	{r4, lr}
   1ae44:	2801      	cmp	r0, #1
   1ae46:	d007      	beq.n	1ae58 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
   1ae48:	2802      	cmp	r0, #2
   1ae4a:	d007      	beq.n	1ae5c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
   1ae4c:	2804      	cmp	r0, #4
   1ae4e:	d007      	beq.n	1ae60 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
   1ae50:	2139      	movs	r1, #57	; 0x39
   1ae52:	202e      	movs	r0, #46	; 0x2e
   1ae54:	f7f5 fdde 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ae58:	2025      	movs	r0, #37	; 0x25
   1ae5a:	bd10      	pop	{r4, pc}
   1ae5c:	2026      	movs	r0, #38	; 0x26
   1ae5e:	bd10      	pop	{r4, pc}
   1ae60:	2027      	movs	r0, #39	; 0x27
   1ae62:	bd10      	pop	{r4, pc}
   1ae64:	4601      	mov	r1, r0
   1ae66:	2000      	movs	r0, #0
   1ae68:	788a      	ldrb	r2, [r1, #2]
   1ae6a:	07d3      	lsls	r3, r2, #31
   1ae6c:	d002      	beq.n	1ae74 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
   1ae6e:	78cb      	ldrb	r3, [r1, #3]
   1ae70:	07db      	lsls	r3, r3, #31
   1ae72:	d006      	beq.n	1ae82 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
   1ae74:	0793      	lsls	r3, r2, #30
   1ae76:	d506      	bpl.n	1ae86 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
   1ae78:	78cb      	ldrb	r3, [r1, #3]
   1ae7a:	079b      	lsls	r3, r3, #30
   1ae7c:	d403      	bmi.n	1ae86 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
   1ae7e:	2002      	movs	r0, #2
   1ae80:	4770      	bx	lr
   1ae82:	2001      	movs	r0, #1
   1ae84:	4770      	bx	lr
   1ae86:	0752      	lsls	r2, r2, #29
   1ae88:	d5fc      	bpl.n	1ae84 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
   1ae8a:	78c9      	ldrb	r1, [r1, #3]
   1ae8c:	0749      	lsls	r1, r1, #29
   1ae8e:	d4f9      	bmi.n	1ae84 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
   1ae90:	2004      	movs	r0, #4
   1ae92:	4770      	bx	lr
   1ae94:	f3c0 0180 	ubfx	r1, r0, #2, #1
   1ae98:	f3c0 0240 	ubfx	r2, r0, #1, #1
   1ae9c:	4411      	add	r1, r2
   1ae9e:	f000 0001 	and.w	r0, r0, #1
   1aea2:	4408      	add	r0, r1
   1aea4:	4770      	bx	lr

0001aea6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   1aea6:	f240 315a 	movw	r1, #858	; 0x35a
   1aeaa:	4348      	muls	r0, r1
   1aeac:	4770      	bx	lr

0001aeae <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   1aeae:	f240 20ef 	movw	r0, #751	; 0x2ef
   1aeb2:	4770      	bx	lr
   1aeb4:	041c020e 	.word	0x041c020e
   1aeb8:	0c600630 	.word	0x0c600630
   1aebc:	06b4035a 	.word	0x06b4035a
   1aec0:	0bf505c5 	.word	0x0bf505c5
   1aec4:	01a31225 	.word	0x01a31225
   1aec8:	05bf03b1 	.word	0x05bf03b1
   1aecc:	064902ef 	.word	0x064902ef
   1aed0:	09a3      	.short	0x09a3

0001aed2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
   1aed2:	b510      	push	{r4, lr}
   1aed4:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
   1aed8:	b109      	cbz	r1, 1aede <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
   1aeda:	2000      	movs	r0, #0
   1aedc:	bd10      	pop	{r4, pc}
   1aede:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   1aee2:	b949      	cbnz	r1, 1aef8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
   1aee4:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
   1aee8:	b131      	cbz	r1, 1aef8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
   1aeea:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   1aeee:	428a      	cmp	r2, r1
   1aef0:	d902      	bls.n	1aef8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
   1aef2:	f7ff fe90 	bl	1ac16 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   1aef6:	e7f0      	b.n	1aeda <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
   1aef8:	2001      	movs	r0, #1
   1aefa:	bd10      	pop	{r4, pc}

0001aefc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
   1aefc:	b510      	push	{r4, lr}
   1aefe:	b131      	cbz	r1, 1af0e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
   1af00:	2901      	cmp	r1, #1
   1af02:	d008      	beq.n	1af16 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
   1af04:	f240 718b 	movw	r1, #1931	; 0x78b
   1af08:	2030      	movs	r0, #48	; 0x30
   1af0a:	f7f5 fd83 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1af0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1af12:	f000 b9d4 	b.w	1b2be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x314>
   1af16:	2100      	movs	r1, #0
   1af18:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
   1af1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1af20:	f000 b93b 	b.w	1b19a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>

0001af24 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
   1af24:	b510      	push	{r4, lr}
   1af26:	4604      	mov	r4, r0
   1af28:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   1af2c:	2800      	cmp	r0, #0
   1af2e:	d019      	beq.n	1af64 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
   1af30:	2001      	movs	r0, #1
   1af32:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
   1af36:	4601      	mov	r1, r0
   1af38:	4620      	mov	r0, r4
   1af3a:	f7ff fe69 	bl	1ac10 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   1af3e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
   1af42:	b170      	cbz	r0, 1af62 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
   1af44:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
   1af48:	f7f3 fdde 	bl	eb08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   1af4c:	7820      	ldrb	r0, [r4, #0]
   1af4e:	f7f3 ff29 	bl	eda4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   1af52:	f814 09a0 	ldrb.w	r0, [r4], #-160
   1af56:	f7f3 ff03 	bl	ed60 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   1af5a:	b120      	cbz	r0, 1af66 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
   1af5c:	2000      	movs	r0, #0
   1af5e:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
   1af62:	2000      	movs	r0, #0
   1af64:	bd10      	pop	{r4, pc}
   1af66:	f240 2103 	movw	r1, #515	; 0x203
   1af6a:	2030      	movs	r0, #48	; 0x30
   1af6c:	f7f5 fd52 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001af70 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
   1af70:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1af74:	4770      	bx	lr

0001af76 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
   1af76:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   1af7a:	4770      	bx	lr

0001af7c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
   1af7c:	b50e      	push	{r1, r2, r3, lr}
   1af7e:	4669      	mov	r1, sp
   1af80:	2001      	movs	r0, #1
   1af82:	f7fe fdcd 	bl	19b20 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1af86:	b138      	cbz	r0, 1af98 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
   1af88:	f44f 71a1 	mov.w	r1, #322	; 0x142
   1af8c:	2030      	movs	r0, #48	; 0x30
   1af8e:	f7f5 fd41 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1af92:	9802      	ldr	r0, [sp, #8]
   1af94:	f7ff ffc6 	bl	1af24 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   1af98:	4668      	mov	r0, sp
   1af9a:	f7f5 ff73 	bl	10e84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1af9e:	2800      	cmp	r0, #0
   1afa0:	d0f7      	beq.n	1af92 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
   1afa2:	f7f9 f901 	bl	141a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
   1afa6:	2000      	movs	r0, #0
   1afa8:	bd0e      	pop	{r1, r2, r3, pc}

0001afaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
   1afaa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1afac:	4604      	mov	r4, r0
   1afae:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
   1afb2:	2800      	cmp	r0, #0
   1afb4:	d153      	bne.n	1b05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1afb6:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   1afba:	2803      	cmp	r0, #3
   1afbc:	d14f      	bne.n	1b05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1afbe:	f7fd fc35 	bl	1882c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   1afc2:	4601      	mov	r1, r0
   1afc4:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
   1afc8:	f7f3 f926 	bl	e218 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1afcc:	2800      	cmp	r0, #0
   1afce:	dd46      	ble.n	1b05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1afd0:	68e1      	ldr	r1, [r4, #12]
   1afd2:	b111      	cbz	r1, 1afda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
   1afd4:	fbb0 f0f1 	udiv	r0, r0, r1
   1afd8:	e000      	b.n	1afdc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
   1afda:	2000      	movs	r0, #0
   1afdc:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
   1afe0:	1c40      	adds	r0, r0, #1
   1afe2:	4408      	add	r0, r1
   1afe4:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
   1afe8:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
   1afec:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
   1aff0:	1a08      	subs	r0, r1, r0
   1aff2:	b200      	sxth	r0, r0
   1aff4:	2800      	cmp	r0, #0
   1aff6:	dd32      	ble.n	1b05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1aff8:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
   1affc:	f7f3 fd84 	bl	eb08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   1b000:	2800      	cmp	r0, #0
   1b002:	d02c      	beq.n	1b05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1b004:	2001      	movs	r0, #1
   1b006:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
   1b00a:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
   1b00e:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
   1b012:	ae01      	add	r6, sp, #4
   1b014:	1a40      	subs	r0, r0, r1
   1b016:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
   1b01a:	1e40      	subs	r0, r0, #1
   1b01c:	4408      	add	r0, r1
   1b01e:	b285      	uxth	r5, r0
   1b020:	e017      	b.n	1b052 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
   1b022:	9600      	str	r6, [sp, #0]
   1b024:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
   1b028:	2300      	movs	r3, #0
   1b02a:	2201      	movs	r2, #1
   1b02c:	4620      	mov	r0, r4
   1b02e:	f7f9 f98b 	bl	14348 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
   1b032:	2800      	cmp	r0, #0
   1b034:	d013      	beq.n	1b05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1b036:	2801      	cmp	r0, #1
   1b038:	d004      	beq.n	1b044 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
   1b03a:	f240 6101 	movw	r1, #1537	; 0x601
   1b03e:	2030      	movs	r0, #48	; 0x30
   1b040:	f7f5 fce8 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b044:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
   1b048:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1b04c:	4408      	add	r0, r1
   1b04e:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
   1b052:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
   1b056:	1a28      	subs	r0, r5, r0
   1b058:	b200      	sxth	r0, r0
   1b05a:	2800      	cmp	r0, #0
   1b05c:	dae1      	bge.n	1b022 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
   1b05e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1b060:	2000      	movs	r0, #0
   1b062:	4770      	bx	lr
   1b064:	b570      	push	{r4, r5, r6, lr}
   1b066:	4604      	mov	r4, r0
   1b068:	2601      	movs	r6, #1
   1b06a:	f000 f90c 	bl	1b286 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
   1b06e:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
   1b072:	2000      	movs	r0, #0
   1b074:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
   1b078:	2001      	movs	r0, #1
   1b07a:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
   1b07e:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
   1b082:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
   1b086:	b160      	cbz	r0, 1b0a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xf8>
   1b088:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b08c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   1b090:	f7f3 f890 	bl	e1b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1b094:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1b098:	2100      	movs	r1, #0
   1b09a:	4628      	mov	r0, r5
   1b09c:	f7ff f861 	bl	1a162 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   1b0a0:	e00f      	b.n	1b0c2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x118>
   1b0a2:	4620      	mov	r0, r4
   1b0a4:	f7ff fd69 	bl	1ab7a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   1b0a8:	4606      	mov	r6, r0
   1b0aa:	4631      	mov	r1, r6
   1b0ac:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   1b0b0:	f7f3 f880 	bl	e1b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1b0b4:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1b0b8:	4631      	mov	r1, r6
   1b0ba:	4628      	mov	r0, r5
   1b0bc:	f7ff f851 	bl	1a162 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   1b0c0:	1c46      	adds	r6, r0, #1
   1b0c2:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   1b0c6:	1c41      	adds	r1, r0, #1
   1b0c8:	290a      	cmp	r1, #10
   1b0ca:	d202      	bcs.n	1b0d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x128>
   1b0cc:	4430      	add	r0, r6
   1b0ce:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
   1b0d2:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1b0d6:	b130      	cbz	r0, 1b0e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
   1b0d8:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   1b0dc:	1c40      	adds	r0, r0, #1
   1b0de:	280a      	cmp	r0, #10
   1b0e0:	d301      	bcc.n	1b0e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
   1b0e2:	2002      	movs	r0, #2
   1b0e4:	e000      	b.n	1b0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13e>
   1b0e6:	2003      	movs	r0, #3
   1b0e8:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
   1b0ec:	2100      	movs	r1, #0
   1b0ee:	4620      	mov	r0, r4
   1b0f0:	f000 f822 	bl	1b138 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
   1b0f4:	b120      	cbz	r0, 1b100 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
   1b0f6:	4620      	mov	r0, r4
   1b0f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b0fc:	f000 b80d 	b.w	1b11a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
   1b100:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
   1b104:	4629      	mov	r1, r5
   1b106:	f000 f8bc 	bl	1b282 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
   1b10a:	2800      	cmp	r0, #0
   1b10c:	d104      	bne.n	1b118 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
   1b10e:	f240 61a2 	movw	r1, #1698	; 0x6a2
   1b112:	2030      	movs	r0, #48	; 0x30
   1b114:	f7f5 fc7e 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b118:	bd70      	pop	{r4, r5, r6, pc}
   1b11a:	b510      	push	{r4, lr}
   1b11c:	4604      	mov	r4, r0
   1b11e:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
   1b122:	f7f3 fe1d 	bl	ed60 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   1b126:	2000      	movs	r0, #0
   1b128:	7520      	strb	r0, [r4, #20]
   1b12a:	bd10      	pop	{r4, pc}
   1b12c:	b510      	push	{r4, lr}
   1b12e:	f7ff fd28 	bl	1ab82 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   1b132:	f200 1009 	addw	r0, r0, #265	; 0x109
   1b136:	bd10      	pop	{r4, pc}
   1b138:	b570      	push	{r4, r5, r6, lr}
   1b13a:	4604      	mov	r4, r0
   1b13c:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
   1b140:	460d      	mov	r5, r1
   1b142:	b108      	cbz	r0, 1b148 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19e>
   1b144:	2001      	movs	r0, #1
   1b146:	bd70      	pop	{r4, r5, r6, pc}
   1b148:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   1b14c:	b1a8      	cbz	r0, 1b17a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
   1b14e:	4620      	mov	r0, r4
   1b150:	f7ff fd13 	bl	1ab7a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   1b154:	4405      	add	r5, r0
   1b156:	4620      	mov	r0, r4
   1b158:	f7ff ffe8 	bl	1b12c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   1b15c:	1941      	adds	r1, r0, r5
   1b15e:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   1b162:	4288      	cmp	r0, r1
   1b164:	d206      	bcs.n	1b174 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ca>
   1b166:	2001      	movs	r0, #1
   1b168:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
   1b16c:	4620      	mov	r0, r4
   1b16e:	f7ff fd52 	bl	1ac16 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   1b172:	e7e7      	b.n	1b144 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19a>
   1b174:	1b40      	subs	r0, r0, r5
   1b176:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
   1b17a:	2000      	movs	r0, #0
   1b17c:	bd70      	pop	{r4, r5, r6, pc}
   1b17e:	b510      	push	{r4, lr}
   1b180:	4604      	mov	r4, r0
   1b182:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   1b186:	f000 f9e8 	bl	1b55a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
   1b18a:	4602      	mov	r2, r0
   1b18c:	4620      	mov	r0, r4
   1b18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b192:	f240 111b 	movw	r1, #283	; 0x11b
   1b196:	f7ff bbc8 	b.w	1a92a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   1b19a:	b510      	push	{r4, lr}
   1b19c:	f7fc fbe6 	bl	1796c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   1b1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b1a4:	f7f3 bf32 	b.w	f00c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   1b1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b1ac:	4604      	mov	r4, r0
   1b1ae:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   1b1b2:	2800      	cmp	r0, #0
   1b1b4:	d051      	beq.n	1b25a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
   1b1b6:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   1b1ba:	2803      	cmp	r0, #3
   1b1bc:	d14d      	bne.n	1b25a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
   1b1be:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
   1b1c2:	f001 fac2 	bl	1c74a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   1b1c6:	4605      	mov	r5, r0
   1b1c8:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
   1b1cc:	f7f8 ffde 	bl	1418c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   1b1d0:	4428      	add	r0, r5
   1b1d2:	b286      	uxth	r6, r0
   1b1d4:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
   1b1d8:	f7f8 ffd8 	bl	1418c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   1b1dc:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   1b1e0:	fa1f f880 	uxth.w	r8, r0
   1b1e4:	4648      	mov	r0, r9
   1b1e6:	f001 fb49 	bl	1c87c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1b1ea:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
   1b1ee:	1a0d      	subs	r5, r1, r0
   1b1f0:	4648      	mov	r0, r9
   1b1f2:	f001 fb51 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1b1f6:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   1b1fa:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1b1fe:	fbb0 f0fa 	udiv	r0, r0, sl
   1b202:	1a2d      	subs	r5, r5, r0
   1b204:	4648      	mov	r0, r9
   1b206:	f001 fb39 	bl	1c87c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1b20a:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   1b20e:	1a0f      	subs	r7, r1, r0
   1b210:	4648      	mov	r0, r9
   1b212:	f001 fb41 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1b216:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   1b21a:	4401      	add	r1, r0
   1b21c:	fbb1 f0fa 	udiv	r0, r1, sl
   1b220:	1a39      	subs	r1, r7, r0
   1b222:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
   1b226:	4370      	muls	r0, r6
   1b228:	fbb0 f2f8 	udiv	r2, r0, r8
   1b22c:	2029      	movs	r0, #41	; 0x29
   1b22e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
   1b232:	3260      	adds	r2, #96	; 0x60
   1b234:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
   1b238:	eb00 0052 	add.w	r0, r0, r2, lsr #1
   1b23c:	42a9      	cmp	r1, r5
   1b23e:	d801      	bhi.n	1b244 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29a>
   1b240:	4285      	cmp	r5, r0
   1b242:	d901      	bls.n	1b248 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29e>
   1b244:	f7f5 f848 	bl	102d8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
   1b248:	4631      	mov	r1, r6
   1b24a:	68e0      	ldr	r0, [r4, #12]
   1b24c:	f7fd fb22 	bl	18894 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   1b250:	2100      	movs	r1, #0
   1b252:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
   1b256:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
   1b25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b25e:	b570      	push	{r4, r5, r6, lr}
   1b260:	460c      	mov	r4, r1
   1b262:	4605      	mov	r5, r0
   1b264:	f001 fb18 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1b268:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   1b26c:	4408      	add	r0, r1
   1b26e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b272:	fbb0 f6f1 	udiv	r6, r0, r1
   1b276:	4628      	mov	r0, r5
   1b278:	f001 fb00 	bl	1c87c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1b27c:	4430      	add	r0, r6
   1b27e:	4420      	add	r0, r4
   1b280:	bd70      	pop	{r4, r5, r6, pc}
   1b282:	f7f3 b911 	b.w	e4a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   1b286:	b510      	push	{r4, lr}
   1b288:	4604      	mov	r4, r0
   1b28a:	f7ff fca3 	bl	1abd4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1b28e:	b1a0      	cbz	r0, 1b2ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
   1b290:	4620      	mov	r0, r4
   1b292:	f7ff fc97 	bl	1abc4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1b296:	b918      	cbnz	r0, 1b2a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
   1b298:	4620      	mov	r0, r4
   1b29a:	f7ff fc9d 	bl	1abd8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1b29e:	b120      	cbz	r0, 1b2aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
   1b2a0:	2449      	movs	r4, #73	; 0x49
   1b2a2:	f001 fab7 	bl	1c814 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
   1b2a6:	b928      	cbnz	r0, 1b2b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
   1b2a8:	e001      	b.n	1b2ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
   1b2aa:	2442      	movs	r4, #66	; 0x42
   1b2ac:	e7f9      	b.n	1b2a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f8>
   1b2ae:	f001 faa7 	bl	1c800 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
   1b2b2:	b100      	cbz	r0, 1b2b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
   1b2b4:	1de4      	adds	r4, r4, #7
   1b2b6:	4620      	mov	r0, r4
   1b2b8:	bd10      	pop	{r4, pc}
   1b2ba:	206b      	movs	r0, #107	; 0x6b
   1b2bc:	bd10      	pop	{r4, pc}
   1b2be:	b570      	push	{r4, r5, r6, lr}
   1b2c0:	4604      	mov	r4, r0
   1b2c2:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
   1b2c6:	2500      	movs	r5, #0
   1b2c8:	b118      	cbz	r0, 1b2d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
   1b2ca:	2001      	movs	r0, #1
   1b2cc:	f000 f887 	bl	1b3de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
   1b2d0:	4605      	mov	r5, r0
   1b2d2:	4620      	mov	r0, r4
   1b2d4:	f7ff fc51 	bl	1ab7a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   1b2d8:	1941      	adds	r1, r0, r5
   1b2da:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   1b2de:	34b8      	adds	r4, #184	; 0xb8
   1b2e0:	f7f2 ff68 	bl	e1b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1b2e4:	2600      	movs	r6, #0
   1b2e6:	60e0      	str	r0, [r4, #12]
   1b2e8:	f804 6b0b 	strb.w	r6, [r4], #11
   1b2ec:	2001      	movs	r0, #1
   1b2ee:	f804 0901 	strb.w	r0, [r4], #-1
   1b2f2:	2003      	movs	r0, #3
   1b2f4:	f804 09c2 	strb.w	r0, [r4], #-194
   1b2f8:	4620      	mov	r0, r4
   1b2fa:	f7ff ffc4 	bl	1b286 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
   1b2fe:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
   1b302:	4629      	mov	r1, r5
   1b304:	4620      	mov	r0, r4
   1b306:	f7ff ff17 	bl	1b138 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
   1b30a:	b930      	cbnz	r0, 1b31a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x370>
   1b30c:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
   1b310:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
   1b314:	f7ff ffb5 	bl	1b282 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
   1b318:	b128      	cbz	r0, 1b326 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
   1b31a:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
   1b31e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b322:	f7ff bf3a 	b.w	1b19a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
   1b326:	f240 61eb 	movw	r1, #1771	; 0x6eb
   1b32a:	2030      	movs	r0, #48	; 0x30
   1b32c:	f7f5 fb72 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b330:	b510      	push	{r4, lr}
   1b332:	4604      	mov	r4, r0
   1b334:	2000      	movs	r0, #0
   1b336:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
   1b33a:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
   1b33e:	f7f3 fd0f 	bl	ed60 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   1b342:	2020      	movs	r0, #32
   1b344:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
   1b348:	bd10      	pop	{r4, pc}
   1b34a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b34e:	2500      	movs	r5, #0
   1b350:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
   1b354:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
   1b358:	4688      	mov	r8, r1
   1b35a:	4604      	mov	r4, r0
   1b35c:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
   1b360:	2701      	movs	r7, #1
   1b362:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
   1b366:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1b36a:	4639      	mov	r1, r7
   1b36c:	34a0      	adds	r4, #160	; 0xa0
   1b36e:	f7f7 fa8f 	bl	12890 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   1b372:	6860      	ldr	r0, [r4, #4]
   1b374:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
   1b378:	6861      	ldr	r1, [r4, #4]
   1b37a:	7820      	ldrb	r0, [r4, #0]
   1b37c:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   1b380:	6861      	ldr	r1, [r4, #4]
   1b382:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
   1b386:	6860      	ldr	r0, [r4, #4]
   1b388:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
   1b38c:	6864      	ldr	r4, [r4, #4]
   1b38e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
   1b392:	2300      	movs	r3, #0
   1b394:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
   1b398:	461a      	mov	r2, r3
   1b39a:	4619      	mov	r1, r3
   1b39c:	4620      	mov	r0, r4
   1b39e:	9500      	str	r5, [sp, #0]
   1b3a0:	f7f8 ffd2 	bl	14348 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
   1b3a4:	b120      	cbz	r0, 1b3b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
   1b3a6:	f240 2117 	movw	r1, #535	; 0x217
   1b3aa:	2030      	movs	r0, #48	; 0x30
   1b3ac:	f7f5 fb32 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b3b0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
   1b3b4:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
   1b3b8:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
   1b3bc:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
   1b3c0:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
   1b3c4:	f504 7498 	add.w	r4, r4, #304	; 0x130
   1b3c8:	7665      	strb	r5, [r4, #25]
   1b3ca:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
   1b3ce:	1e40      	subs	r0, r0, #1
   1b3d0:	f824 0cbc 	strh.w	r0, [r4, #-188]
   1b3d4:	86e5      	strh	r5, [r4, #54]	; 0x36
   1b3d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b3da:	f7ff bede 	b.w	1b19a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
   1b3de:	b510      	push	{r4, lr}
   1b3e0:	f7f9 f9be 	bl	14760 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
   1b3e4:	f242 7110 	movw	r1, #10000	; 0x2710
   1b3e8:	fbb0 f2f1 	udiv	r2, r0, r1
   1b3ec:	fb01 0012 	mls	r0, r1, r2, r0
   1b3f0:	bd10      	pop	{r4, pc}
   1b3f2:	b570      	push	{r4, r5, r6, lr}
   1b3f4:	b140      	cbz	r0, 1b408 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45e>
   1b3f6:	2909      	cmp	r1, #9
   1b3f8:	d248      	bcs.n	1b48c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e2>
   1b3fa:	e8df f001 	tbb	[pc, r1]
   1b3fe:	1507      	.short	0x1507
   1b400:	47373b3b 	.word	0x47373b3b
   1b404:	00433f29 	.word	0x00433f29
   1b408:	21cd      	movs	r1, #205	; 0xcd
   1b40a:	e03c      	b.n	1b486 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   1b40c:	4604      	mov	r4, r0
   1b40e:	f7f7 ffbd 	bl	1338c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   1b412:	b110      	cbz	r0, 1b41a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x470>
   1b414:	f240 2175 	movw	r1, #629	; 0x275
   1b418:	e035      	b.n	1b486 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   1b41a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b422:	38f8      	subs	r0, #248	; 0xf8
   1b424:	f7f3 bed4 	b.w	f1d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   1b428:	4605      	mov	r5, r0
   1b42a:	f7ff fbcf 	bl	1abcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   1b42e:	b9a8      	cbnz	r0, 1b45c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4b2>
   1b430:	4628      	mov	r0, r5
   1b432:	f7ff fe7b 	bl	1b12c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   1b436:	4604      	mov	r4, r0
   1b438:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1b43c:	42a0      	cmp	r0, r4
   1b43e:	d20b      	bcs.n	1b458 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
   1b440:	1a20      	subs	r0, r4, r0
   1b442:	2104      	movs	r1, #4
   1b444:	f7f2 fde4 	bl	e010 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   1b448:	b130      	cbz	r0, 1b458 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
   1b44a:	4628      	mov	r0, r5
   1b44c:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
   1b450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b454:	f7ff bb8f 	b.w	1ab76 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   1b458:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
   1b45c:	4628      	mov	r0, r5
   1b45e:	f7f7 ffb1 	bl	133c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   1b462:	2800      	cmp	r0, #0
   1b464:	d014      	beq.n	1b490 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e6>
   1b466:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   1b46a:	e00c      	b.n	1b486 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   1b46c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b470:	f7fc bc30 	b.w	17cd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   1b474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b478:	f7ff bdf4 	b.w	1b064 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
   1b47c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b480:	f7ff be4b 	b.w	1b11a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
   1b484:	21ed      	movs	r1, #237	; 0xed
   1b486:	2030      	movs	r0, #48	; 0x30
   1b488:	f7f5 fac4 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b48c:	21f1      	movs	r1, #241	; 0xf1
   1b48e:	e7fa      	b.n	1b486 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   1b490:	bd70      	pop	{r4, r5, r6, pc}
   1b492:	b510      	push	{r4, lr}
   1b494:	0004      	movs	r4, r0
   1b496:	d008      	beq.n	1b4aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x500>
   1b498:	2909      	cmp	r1, #9
   1b49a:	d25c      	bcs.n	1b556 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ac>
   1b49c:	e8df f001 	tbb	[pc, r1]
   1b4a0:	3e3e3607 	.word	0x3e3e3607
   1b4a4:	4a435b3a 	.word	0x4a435b3a
   1b4a8:	0057      	.short	0x0057
   1b4aa:	2196      	movs	r1, #150	; 0x96
   1b4ac:	e050      	b.n	1b550 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
   1b4ae:	2100      	movs	r1, #0
   1b4b0:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
   1b4b4:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
   1b4b8:	4620      	mov	r0, r4
   1b4ba:	b189      	cbz	r1, 1b4e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x536>
   1b4bc:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
   1b4c0:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
   1b4c4:	428a      	cmp	r2, r1
   1b4c6:	d106      	bne.n	1b4d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52c>
   1b4c8:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
   1b4cc:	1a51      	subs	r1, r2, r1
   1b4ce:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
   1b4d2:	4611      	mov	r1, r2
   1b4d4:	e00d      	b.n	1b4f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
   1b4d6:	1a51      	subs	r1, r2, r1
   1b4d8:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
   1b4dc:	b291      	uxth	r1, r2
   1b4de:	e008      	b.n	1b4f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
   1b4e0:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
   1b4e4:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
   1b4e8:	1a89      	subs	r1, r1, r2
   1b4ea:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
   1b4ee:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
   1b4f2:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
   1b4f6:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
   1b4fa:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
   1b4fe:	f7f9 fb4b 	bl	14b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   1b502:	4620      	mov	r0, r4
   1b504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b508:	f7f9 b934 	b.w	14774 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
   1b50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b510:	f000 b905 	b.w	1b71e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   1b514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b518:	f7fc bbdc 	b.w	17cd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   1b51c:	4620      	mov	r0, r4
   1b51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b522:	f000 b827 	b.w	1b574 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ca>
   1b526:	2001      	movs	r0, #1
   1b528:	f7f2 fd62 	bl	dff0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   1b52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b530:	f7fe bcbe 	b.w	19eb0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
   1b534:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   1b538:	2804      	cmp	r0, #4
   1b53a:	d001      	beq.n	1b540 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
   1b53c:	21b8      	movs	r1, #184	; 0xb8
   1b53e:	e007      	b.n	1b550 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
   1b540:	4620      	mov	r0, r4
   1b542:	f7ff fef5 	bl	1b330 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
   1b546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b54a:	f7f7 bbef 	b.w	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1b54e:	21c1      	movs	r1, #193	; 0xc1
   1b550:	2030      	movs	r0, #48	; 0x30
   1b552:	f7f5 fa5f 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b556:	21c5      	movs	r1, #197	; 0xc5
   1b558:	e7fa      	b.n	1b550 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
   1b55a:	b510      	push	{r4, lr}
   1b55c:	f001 f99c 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1b560:	f64d 7141 	movw	r1, #57153	; 0xdf41
   1b564:	4408      	add	r0, r1
   1b566:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b56a:	fbb0 f0f1 	udiv	r0, r0, r1
   1b56e:	f500 70bb 	add.w	r0, r0, #374	; 0x176
   1b572:	bd10      	pop	{r4, pc}
   1b574:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1b576:	4604      	mov	r4, r0
   1b578:	f7fd f958 	bl	1882c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   1b57c:	4601      	mov	r1, r0
   1b57e:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
   1b582:	f7f2 fe49 	bl	e218 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1b586:	68e1      	ldr	r1, [r4, #12]
   1b588:	b111      	cbz	r1, 1b590 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e6>
   1b58a:	fbb0 f0f1 	udiv	r0, r0, r1
   1b58e:	e000      	b.n	1b592 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e8>
   1b590:	2000      	movs	r0, #0
   1b592:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
   1b596:	290d      	cmp	r1, #13
   1b598:	d00c      	beq.n	1b5b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x60a>
   1b59a:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
   1b59e:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
   1b5a2:	1813      	adds	r3, r2, r0
   1b5a4:	1acb      	subs	r3, r1, r3
   1b5a6:	b21b      	sxth	r3, r3
   1b5a8:	2b00      	cmp	r3, #0
   1b5aa:	db06      	blt.n	1b5ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x610>
   1b5ac:	1c49      	adds	r1, r1, #1
   1b5ae:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
   1b5b2:	e006      	b.n	1b5c2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x618>
   1b5b4:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
   1b5b8:	e012      	b.n	1b5e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
   1b5ba:	1c40      	adds	r0, r0, #1
   1b5bc:	4410      	add	r0, r2
   1b5be:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
   1b5c2:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
   1b5c6:	f88d 0000 	strb.w	r0, [sp]
   1b5ca:	9800      	ldr	r0, [sp, #0]
   1b5cc:	9000      	str	r0, [sp, #0]
   1b5ce:	f89d 0000 	ldrb.w	r0, [sp]
   1b5d2:	b940      	cbnz	r0, 1b5e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
   1b5d4:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
   1b5d8:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
   1b5dc:	4288      	cmp	r0, r1
   1b5de:	d102      	bne.n	1b5e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
   1b5e0:	1c40      	adds	r0, r0, #1
   1b5e2:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
   1b5e6:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
   1b5ea:	1c40      	adds	r0, r0, #1
   1b5ec:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
   1b5f0:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
   1b5f4:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
   1b5f8:	1a40      	subs	r0, r0, r1
   1b5fa:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
   1b5fe:	1e40      	subs	r0, r0, #1
   1b600:	4408      	add	r0, r1
   1b602:	b285      	uxth	r5, r0
   1b604:	e026      	b.n	1b654 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
   1b606:	a801      	add	r0, sp, #4
   1b608:	2300      	movs	r3, #0
   1b60a:	9000      	str	r0, [sp, #0]
   1b60c:	461a      	mov	r2, r3
   1b60e:	4620      	mov	r0, r4
   1b610:	f7f8 fe9a 	bl	14348 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
   1b614:	2800      	cmp	r0, #0
   1b616:	d038      	beq.n	1b68a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6e0>
   1b618:	2801      	cmp	r0, #1
   1b61a:	d004      	beq.n	1b626 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x67c>
   1b61c:	f240 614e 	movw	r1, #1614	; 0x64e
   1b620:	2030      	movs	r0, #48	; 0x30
   1b622:	f7f5 f9f7 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b626:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
   1b62a:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
   1b62e:	1a42      	subs	r2, r0, r1
   1b630:	b212      	sxth	r2, r2
   1b632:	2a00      	cmp	r2, #0
   1b634:	da09      	bge.n	1b64a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
   1b636:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1b63a:	4402      	add	r2, r0
   1b63c:	1aaa      	subs	r2, r5, r2
   1b63e:	b212      	sxth	r2, r2
   1b640:	2a00      	cmp	r2, #0
   1b642:	da02      	bge.n	1b64a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
   1b644:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
   1b648:	e004      	b.n	1b654 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
   1b64a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1b64e:	4408      	add	r0, r1
   1b650:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
   1b654:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
   1b658:	1a68      	subs	r0, r5, r1
   1b65a:	b200      	sxth	r0, r0
   1b65c:	2800      	cmp	r0, #0
   1b65e:	dad2      	bge.n	1b606 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65c>
   1b660:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
   1b664:	b178      	cbz	r0, 1b686 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6dc>
   1b666:	2008      	movs	r0, #8
   1b668:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
   1b66c:	2001      	movs	r0, #1
   1b66e:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
   1b672:	4620      	mov	r0, r4
   1b674:	f000 f855 	bl	1b722 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   1b678:	4620      	mov	r0, r4
   1b67a:	f7ff fe59 	bl	1b330 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
   1b67e:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   1b682:	f7f7 bb53 	b.w	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1b686:	203e      	movs	r0, #62	; 0x3e
   1b688:	e7ee      	b.n	1b668 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6be>
   1b68a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1b68c:	00fa01f4 	.word	0x00fa01f4
   1b690:	00640096 	.word	0x00640096
   1b694:	0032004b 	.word	0x0032004b
   1b698:	0014001e 	.word	0x0014001e
   1b69c:	0005000a 	.word	0x0005000a
   1b6a0:	00010002 	.word	0x00010002
   1b6a4:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   1b6a8:	f001 0307 	and.w	r3, r1, #7
   1b6ac:	7802      	ldrb	r2, [r0, #0]
   1b6ae:	2101      	movs	r1, #1
   1b6b0:	4099      	lsls	r1, r3
   1b6b2:	438a      	bics	r2, r1
   1b6b4:	7002      	strb	r2, [r0, #0]
   1b6b6:	4770      	bx	lr

0001b6b8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   1b6b8:	b510      	push	{r4, lr}
   1b6ba:	4604      	mov	r4, r0
   1b6bc:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
   1b6c0:	68e1      	ldr	r1, [r4, #12]
   1b6c2:	4288      	cmp	r0, r1
   1b6c4:	d109      	bne.n	1b6da <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   1b6c6:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
   1b6ca:	8aa2      	ldrh	r2, [r4, #20]
   1b6cc:	4291      	cmp	r1, r2
   1b6ce:	d104      	bne.n	1b6da <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   1b6d0:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
   1b6d4:	8ae2      	ldrh	r2, [r4, #22]
   1b6d6:	4291      	cmp	r1, r2
   1b6d8:	d013      	beq.n	1b702 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
   1b6da:	8821      	ldrh	r1, [r4, #0]
   1b6dc:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
   1b6e0:	f7fe fc6d 	bl	19fbe <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   1b6e4:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
   1b6e8:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
   1b6ec:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
   1b6f0:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
   1b6f4:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
   1b6f8:	2001      	movs	r0, #1
   1b6fa:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
   1b6fe:	f7f7 fb15 	bl	12d2c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1b702:	2102      	movs	r1, #2
   1b704:	4620      	mov	r0, r4
   1b706:	f7f7 f8c3 	bl	12890 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   1b70a:	2000      	movs	r0, #0
   1b70c:	f804 0f7e 	strb.w	r0, [r4, #126]!
   1b710:	2003      	movs	r0, #3
   1b712:	70e0      	strb	r0, [r4, #3]
   1b714:	bd10      	pop	{r4, pc}

0001b716 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   1b716:	f7f5 bd23 	b.w	11160 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0001b71a <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   1b71a:	2000      	movs	r0, #0
   1b71c:	4770      	bx	lr

0001b71e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   1b71e:	f7f6 ba57 	b.w	11bd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0001b722 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   1b722:	2100      	movs	r1, #0
   1b724:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
   1b728:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   1b72c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
   1b730:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
   1b734:	b109      	cbz	r1, 1b73a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
   1b736:	2102      	movs	r1, #2
   1b738:	e000      	b.n	1b73c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   1b73a:	2103      	movs	r1, #3
   1b73c:	f7f8 bcd4 	b.w	140e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   1b740:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
   1b744:	28fe      	cmp	r0, #254	; 0xfe
   1b746:	d001      	beq.n	1b74c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
   1b748:	2001      	movs	r0, #1
   1b74a:	4770      	bx	lr
   1b74c:	2000      	movs	r0, #0
   1b74e:	4770      	bx	lr
   1b750:	b510      	push	{r4, lr}
   1b752:	2801      	cmp	r0, #1
   1b754:	d006      	beq.n	1b764 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   1b756:	2802      	cmp	r0, #2
   1b758:	d004      	beq.n	1b764 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   1b75a:	f240 2163 	movw	r1, #611	; 0x263
   1b75e:	2006      	movs	r0, #6
   1b760:	f7f5 f958 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b764:	bd10      	pop	{r4, pc}
   1b766:	2801      	cmp	r0, #1
   1b768:	d002      	beq.n	1b770 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
   1b76a:	2802      	cmp	r0, #2
   1b76c:	d105      	bne.n	1b77a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   1b76e:	e002      	b.n	1b776 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
   1b770:	2901      	cmp	r1, #1
   1b772:	d004      	beq.n	1b77e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   1b774:	e001      	b.n	1b77a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   1b776:	2902      	cmp	r1, #2
   1b778:	d001      	beq.n	1b77e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   1b77a:	2000      	movs	r0, #0
   1b77c:	4770      	bx	lr
   1b77e:	2001      	movs	r0, #1
   1b780:	4770      	bx	lr
   1b782:	1a40      	subs	r0, r0, r1
   1b784:	b200      	sxth	r0, r0
   1b786:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   1b78a:	4288      	cmp	r0, r1
   1b78c:	dc01      	bgt.n	1b792 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
   1b78e:	2800      	cmp	r0, #0
   1b790:	dc01      	bgt.n	1b796 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
   1b792:	2001      	movs	r0, #1
   1b794:	4770      	bx	lr
   1b796:	2000      	movs	r0, #0
   1b798:	4770      	bx	lr
   1b79a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   1b79e:	f001 0107 	and.w	r1, r1, #7
   1b7a2:	7800      	ldrb	r0, [r0, #0]
   1b7a4:	2201      	movs	r2, #1
   1b7a6:	408a      	lsls	r2, r1
   1b7a8:	4010      	ands	r0, r2
   1b7aa:	40c8      	lsrs	r0, r1
   1b7ac:	4770      	bx	lr
   1b7ae:	b118      	cbz	r0, 1b7b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
   1b7b0:	2802      	cmp	r0, #2
   1b7b2:	d001      	beq.n	1b7b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
   1b7b4:	2001      	movs	r0, #1
   1b7b6:	4770      	bx	lr
   1b7b8:	2000      	movs	r0, #0
   1b7ba:	4770      	bx	lr

0001b7bc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   1b7bc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1b7be:	7881      	ldrb	r1, [r0, #2]
   1b7c0:	4604      	mov	r4, r0
   1b7c2:	291a      	cmp	r1, #26
   1b7c4:	d025      	beq.n	1b812 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   1b7c6:	dc0e      	bgt.n	1b7e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
   1b7c8:	2916      	cmp	r1, #22
   1b7ca:	d22d      	bcs.n	1b828 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1b7cc:	e8df f001 	tbb	[pc, r1]
   1b7d0:	2c2c2c2c 	.word	0x2c2c2c2c
   1b7d4:	2c2c212c 	.word	0x2c2c212c
   1b7d8:	2c2c2c2c 	.word	0x2c2c2c2c
   1b7dc:	2c2c2c2c 	.word	0x2c2c2c2c
   1b7e0:	212c2c2c 	.word	0x212c2c2c
   1b7e4:	2121      	.short	0x2121
   1b7e6:	292a      	cmp	r1, #42	; 0x2a
   1b7e8:	d01e      	beq.n	1b828 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1b7ea:	dc0b      	bgt.n	1b804 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   1b7ec:	f1a1 011e 	sub.w	r1, r1, #30
   1b7f0:	290c      	cmp	r1, #12
   1b7f2:	d219      	bcs.n	1b828 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1b7f4:	e8df f001 	tbb	[pc, r1]
   1b7f8:	18181818 	.word	0x18181818
   1b7fc:	18181818 	.word	0x18181818
   1b800:	0d181818 	.word	0x0d181818
   1b804:	393a      	subs	r1, #58	; 0x3a
   1b806:	2904      	cmp	r1, #4
   1b808:	d20e      	bcs.n	1b828 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1b80a:	e8df f001 	tbb	[pc, r1]
   1b80e:	020d      	.short	0x020d
   1b810:	020d      	.short	0x020d
   1b812:	8820      	ldrh	r0, [r4, #0]
   1b814:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   1b818:	d206      	bcs.n	1b828 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1b81a:	2701      	movs	r7, #1
   1b81c:	4669      	mov	r1, sp
   1b81e:	f7fe fbbd 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1b822:	b118      	cbz	r0, 1b82c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   1b824:	2002      	movs	r0, #2
   1b826:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1b828:	2012      	movs	r0, #18
   1b82a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1b82c:	9d01      	ldr	r5, [sp, #4]
   1b82e:	4668      	mov	r0, sp
   1b830:	462e      	mov	r6, r5
   1b832:	f505 75bc 	add.w	r5, r5, #376	; 0x178
   1b836:	f206 1679 	addw	r6, r6, #377	; 0x179
   1b83a:	f000 fe8d 	bl	1c558 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
   1b83e:	b138      	cbz	r0, 1b850 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
   1b840:	7828      	ldrb	r0, [r5, #0]
   1b842:	f88d 0008 	strb.w	r0, [sp, #8]
   1b846:	9802      	ldr	r0, [sp, #8]
   1b848:	9002      	str	r0, [sp, #8]
   1b84a:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1b84e:	b108      	cbz	r0, 1b854 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
   1b850:	200c      	movs	r0, #12
   1b852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1b854:	702f      	strb	r7, [r5, #0]
   1b856:	78a0      	ldrb	r0, [r4, #2]
   1b858:	7030      	strb	r0, [r6, #0]
   1b85a:	4668      	mov	r0, sp
   1b85c:	f7fe ff36 	bl	1a6cc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   1b860:	2000      	movs	r0, #0
   1b862:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0001b864 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   1b864:	b510      	push	{r4, lr}
   1b866:	4604      	mov	r4, r0
   1b868:	7800      	ldrb	r0, [r0, #0]
   1b86a:	b118      	cbz	r0, 1b874 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   1b86c:	2801      	cmp	r0, #1
   1b86e:	d001      	beq.n	1b874 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   1b870:	2012      	movs	r0, #18
   1b872:	bd10      	pop	{r4, pc}
   1b874:	f000 fe9e 	bl	1c5b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1b878:	b120      	cbz	r0, 1b884 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1b87a:	f7f6 fdfb 	bl	12474 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1b87e:	b108      	cbz	r0, 1b884 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1b880:	200c      	movs	r0, #12
   1b882:	bd10      	pop	{r4, pc}
   1b884:	7820      	ldrb	r0, [r4, #0]
   1b886:	f7ff ff92 	bl	1b7ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   1b88a:	1de2      	adds	r2, r4, #7
   1b88c:	f104 0317 	add.w	r3, r4, #23
   1b890:	1c61      	adds	r1, r4, #1
   1b892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b896:	f7f6 be1f 	b.w	124d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0001b89a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   1b89a:	b510      	push	{r4, lr}
   1b89c:	4604      	mov	r4, r0
   1b89e:	f000 fef2 	bl	1c686 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
   1b8a2:	b108      	cbz	r0, 1b8a8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   1b8a4:	200c      	movs	r0, #12
   1b8a6:	bd10      	pop	{r4, pc}
   1b8a8:	7820      	ldrb	r0, [r4, #0]
   1b8aa:	b118      	cbz	r0, 1b8b4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   1b8ac:	2801      	cmp	r0, #1
   1b8ae:	d001      	beq.n	1b8b4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   1b8b0:	2012      	movs	r0, #18
   1b8b2:	bd10      	pop	{r4, pc}
   1b8b4:	f7ff ff7b 	bl	1b7ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   1b8b8:	1c61      	adds	r1, r4, #1
   1b8ba:	f7f6 fe85 	bl	125c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   1b8be:	b108      	cbz	r0, 1b8c4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   1b8c0:	2000      	movs	r0, #0
   1b8c2:	bd10      	pop	{r4, pc}
   1b8c4:	2007      	movs	r0, #7
   1b8c6:	bd10      	pop	{r4, pc}

0001b8c8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   1b8c8:	b510      	push	{r4, lr}
   1b8ca:	f000 fe73 	bl	1c5b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1b8ce:	b120      	cbz	r0, 1b8da <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   1b8d0:	f7f6 fdd0 	bl	12474 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1b8d4:	b108      	cbz	r0, 1b8da <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   1b8d6:	200c      	movs	r0, #12
   1b8d8:	bd10      	pop	{r4, pc}
   1b8da:	f7f6 fe43 	bl	12564 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   1b8de:	2000      	movs	r0, #0
   1b8e0:	bd10      	pop	{r4, pc}

0001b8e2 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   1b8e2:	b510      	push	{r4, lr}
   1b8e4:	f000 fecf 	bl	1c686 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
   1b8e8:	b108      	cbz	r0, 1b8ee <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   1b8ea:	200c      	movs	r0, #12
   1b8ec:	bd10      	pop	{r4, pc}
   1b8ee:	f7f6 fe93 	bl	12618 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   1b8f2:	2000      	movs	r0, #0
   1b8f4:	bd10      	pop	{r4, pc}

0001b8f6 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   1b8f6:	b510      	push	{r4, lr}
   1b8f8:	460b      	mov	r3, r1
   1b8fa:	2201      	movs	r2, #1
   1b8fc:	f100 0110 	add.w	r1, r0, #16
   1b900:	f7fe fb2e 	bl	19f60 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   1b904:	2000      	movs	r0, #0
   1b906:	bd10      	pop	{r4, pc}

0001b908 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   1b908:	b510      	push	{r4, lr}
   1b90a:	8800      	ldrh	r0, [r0, #0]
   1b90c:	2100      	movs	r1, #0
   1b90e:	f7fe f8fd 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1b912:	b118      	cbz	r0, 1b91c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   1b914:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
   1b918:	b111      	cbz	r1, 1b920 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   1b91a:	e007      	b.n	1b92c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   1b91c:	2002      	movs	r0, #2
   1b91e:	bd10      	pop	{r4, pc}
   1b920:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   1b924:	2914      	cmp	r1, #20
   1b926:	d003      	beq.n	1b930 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   1b928:	2915      	cmp	r1, #21
   1b92a:	d001      	beq.n	1b930 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   1b92c:	200c      	movs	r0, #12
   1b92e:	bd10      	pop	{r4, pc}
   1b930:	2102      	movs	r1, #2
   1b932:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
   1b936:	2000      	movs	r0, #0
   1b938:	bd10      	pop	{r4, pc}

0001b93a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   1b93a:	b538      	push	{r3, r4, r5, lr}
   1b93c:	4605      	mov	r5, r0
   1b93e:	8800      	ldrh	r0, [r0, #0]
   1b940:	2100      	movs	r1, #0
   1b942:	f7fe f8e3 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1b946:	0004      	movs	r4, r0
   1b948:	d003      	beq.n	1b952 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   1b94a:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
   1b94e:	b110      	cbz	r0, 1b956 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   1b950:	e010      	b.n	1b974 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
   1b952:	2002      	movs	r0, #2
   1b954:	bd38      	pop	{r3, r4, r5, pc}
   1b956:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
   1b95a:	2814      	cmp	r0, #20
   1b95c:	d001      	beq.n	1b962 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   1b95e:	2815      	cmp	r0, #21
   1b960:	d108      	bne.n	1b974 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
   1b962:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
   1b966:	f88d 0000 	strb.w	r0, [sp]
   1b96a:	9800      	ldr	r0, [sp, #0]
   1b96c:	9000      	str	r0, [sp, #0]
   1b96e:	f89d 0000 	ldrb.w	r0, [sp]
   1b972:	b108      	cbz	r0, 1b978 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
   1b974:	200c      	movs	r0, #12
   1b976:	bd38      	pop	{r3, r4, r5, pc}
   1b978:	2210      	movs	r2, #16
   1b97a:	1ca9      	adds	r1, r5, #2
   1b97c:	f504 70be 	add.w	r0, r4, #380	; 0x17c
   1b980:	f7fd f8c9 	bl	18b16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1b984:	2001      	movs	r0, #1
   1b986:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
   1b98a:	2000      	movs	r0, #0
   1b98c:	bd38      	pop	{r3, r4, r5, pc}

0001b98e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   1b98e:	b510      	push	{r4, lr}
   1b990:	2108      	movs	r1, #8
   1b992:	f7f5 f8d9 	bl	10b48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1b996:	2000      	movs	r0, #0
   1b998:	bd10      	pop	{r4, pc}

0001b99a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   1b99a:	b510      	push	{r4, lr}
   1b99c:	4604      	mov	r4, r0
   1b99e:	f000 fdf2 	bl	1c586 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1b9a2:	f7ff f91d 	bl	1abe0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1b9a6:	7020      	strb	r0, [r4, #0]
   1b9a8:	2000      	movs	r0, #0
   1b9aa:	bd10      	pop	{r4, pc}

0001b9ac <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   1b9ac:	b510      	push	{r4, lr}
   1b9ae:	4604      	mov	r4, r0
   1b9b0:	f000 fdcc 	bl	1c54c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1b9b4:	b140      	cbz	r0, 1b9c8 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
   1b9b6:	20fb      	movs	r0, #251	; 0xfb
   1b9b8:	8020      	strh	r0, [r4, #0]
   1b9ba:	f640 0148 	movw	r1, #2120	; 0x848
   1b9be:	8061      	strh	r1, [r4, #2]
   1b9c0:	80a0      	strh	r0, [r4, #4]
   1b9c2:	80e1      	strh	r1, [r4, #6]
   1b9c4:	2000      	movs	r0, #0
   1b9c6:	bd10      	pop	{r4, pc}
   1b9c8:	2001      	movs	r0, #1
   1b9ca:	bd10      	pop	{r4, pc}

0001b9cc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
   1b9cc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1b9ce:	460d      	mov	r5, r1
   1b9d0:	4606      	mov	r6, r0
   1b9d2:	f7fb fb57 	bl	17084 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1b9d6:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1b9da:	b300      	cbz	r0, 1ba1e <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
   1b9dc:	8830      	ldrh	r0, [r6, #0]
   1b9de:	4669      	mov	r1, sp
   1b9e0:	f7fe fadc 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1b9e4:	2800      	cmp	r0, #0
   1b9e6:	d119      	bne.n	1ba1c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
   1b9e8:	9c01      	ldr	r4, [sp, #4]
   1b9ea:	2700      	movs	r7, #0
   1b9ec:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
   1b9f0:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
   1b9f4:	f000 fc46 	bl	1c284 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
   1b9f8:	70a8      	strb	r0, [r5, #2]
   1b9fa:	7860      	ldrb	r0, [r4, #1]
   1b9fc:	f000 fc42 	bl	1c284 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
   1ba00:	70e8      	strb	r0, [r5, #3]
   1ba02:	78a0      	ldrb	r0, [r4, #2]
   1ba04:	f88d 0008 	strb.w	r0, [sp, #8]
   1ba08:	9802      	ldr	r0, [sp, #8]
   1ba0a:	9002      	str	r0, [sp, #8]
   1ba0c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1ba10:	3c6a      	subs	r4, #106	; 0x6a
   1ba12:	2800      	cmp	r0, #0
   1ba14:	d1ea      	bne.n	1b9ec <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
   1ba16:	8830      	ldrh	r0, [r6, #0]
   1ba18:	8028      	strh	r0, [r5, #0]
   1ba1a:	2000      	movs	r0, #0
   1ba1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1ba1e:	2001      	movs	r0, #1
   1ba20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0001ba22 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   1ba22:	2108      	movs	r1, #8
   1ba24:	7001      	strb	r1, [r0, #0]
   1ba26:	2000      	movs	r0, #0
   1ba28:	4770      	bx	lr

0001ba2a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   1ba2a:	b510      	push	{r4, lr}
   1ba2c:	4604      	mov	r4, r0
   1ba2e:	20d8      	movs	r0, #216	; 0xd8
   1ba30:	7020      	strb	r0, [r4, #0]
   1ba32:	f000 fd6c 	bl	1c50e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
   1ba36:	7060      	strb	r0, [r4, #1]
   1ba38:	2000      	movs	r0, #0
   1ba3a:	bd10      	pop	{r4, pc}

0001ba3c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   1ba3c:	2108      	movs	r1, #8
   1ba3e:	7001      	strb	r1, [r0, #0]
   1ba40:	2000      	movs	r0, #0
   1ba42:	4770      	bx	lr

0001ba44 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   1ba44:	b510      	push	{r4, lr}
   1ba46:	4604      	mov	r4, r0
   1ba48:	7800      	ldrb	r0, [r0, #0]
   1ba4a:	b108      	cbz	r0, 1ba50 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   1ba4c:	2801      	cmp	r0, #1
   1ba4e:	d110      	bne.n	1ba72 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   1ba50:	f000 fdb0 	bl	1c5b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1ba54:	b120      	cbz	r0, 1ba60 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   1ba56:	f7f6 fd0d 	bl	12474 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1ba5a:	b108      	cbz	r0, 1ba60 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   1ba5c:	200c      	movs	r0, #12
   1ba5e:	bd10      	pop	{r4, pc}
   1ba60:	7820      	ldrb	r0, [r4, #0]
   1ba62:	f7ff fea4 	bl	1b7ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   1ba66:	1c61      	adds	r1, r4, #1
   1ba68:	f7fe fa60 	bl	19f2c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   1ba6c:	b108      	cbz	r0, 1ba72 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   1ba6e:	2000      	movs	r0, #0
   1ba70:	bd10      	pop	{r4, pc}
   1ba72:	2012      	movs	r0, #18
   1ba74:	bd10      	pop	{r4, pc}

0001ba76 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   1ba76:	b510      	push	{r4, lr}
   1ba78:	4604      	mov	r4, r0
   1ba7a:	f000 fe04 	bl	1c686 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
   1ba7e:	b108      	cbz	r0, 1ba84 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   1ba80:	200c      	movs	r0, #12
   1ba82:	bd10      	pop	{r4, pc}
   1ba84:	7820      	ldrb	r0, [r4, #0]
   1ba86:	b108      	cbz	r0, 1ba8c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   1ba88:	2801      	cmp	r0, #1
   1ba8a:	d107      	bne.n	1ba9c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   1ba8c:	f7ff fe8f 	bl	1b7ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   1ba90:	1c61      	adds	r1, r4, #1
   1ba92:	f7fe fa5a 	bl	19f4a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   1ba96:	b108      	cbz	r0, 1ba9c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   1ba98:	2000      	movs	r0, #0
   1ba9a:	bd10      	pop	{r4, pc}
   1ba9c:	2012      	movs	r0, #18
   1ba9e:	bd10      	pop	{r4, pc}

0001baa0 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   1baa0:	b510      	push	{r4, lr}
   1baa2:	4604      	mov	r4, r0
   1baa4:	f000 fd86 	bl	1c5b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1baa8:	b108      	cbz	r0, 1baae <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   1baaa:	200c      	movs	r0, #12
   1baac:	bd10      	pop	{r4, pc}
   1baae:	7820      	ldrb	r0, [r4, #0]
   1bab0:	f000 0001 	and.w	r0, r0, #1
   1bab4:	f7f6 fcd8 	bl	12468 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   1bab8:	2000      	movs	r0, #0
   1baba:	bd10      	pop	{r4, pc}

0001babc <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   1babc:	b51c      	push	{r2, r3, r4, lr}
   1babe:	4604      	mov	r4, r0
   1bac0:	f000 fd61 	bl	1c586 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1bac4:	2000      	movs	r0, #0
   1bac6:	f88d 0002 	strb.w	r0, [sp, #2]
   1baca:	2103      	movs	r1, #3
   1bacc:	f88d 1001 	strb.w	r1, [sp, #1]
   1bad0:	f814 1b01 	ldrb.w	r1, [r4], #1
   1bad4:	f88d 1003 	strb.w	r1, [sp, #3]
   1bad8:	f88d 0000 	strb.w	r0, [sp]
   1badc:	4668      	mov	r0, sp
   1bade:	9401      	str	r4, [sp, #4]
   1bae0:	f000 f9f8 	bl	1bed4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   1bae4:	bd1c      	pop	{r2, r3, r4, pc}

0001bae6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   1bae6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1bae8:	4605      	mov	r5, r0
   1baea:	f000 fd4c 	bl	1c586 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1baee:	4606      	mov	r6, r0
   1baf0:	7828      	ldrb	r0, [r5, #0]
   1baf2:	2400      	movs	r4, #0
   1baf4:	b160      	cbz	r0, 1bb10 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   1baf6:	f88d 4000 	strb.w	r4, [sp]
   1bafa:	2001      	movs	r0, #1
   1bafc:	f10d 0101 	add.w	r1, sp, #1
   1bb00:	f7f5 fe86 	bl	11810 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1bb04:	b120      	cbz	r0, 1bb10 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   1bb06:	4668      	mov	r0, sp
   1bb08:	f000 f897 	bl	1bc3a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   1bb0c:	2800      	cmp	r0, #0
   1bb0e:	d112      	bne.n	1bb36 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   1bb10:	f88d 400c 	strb.w	r4, [sp, #12]
   1bb14:	4630      	mov	r0, r6
   1bb16:	f7ff f859 	bl	1abcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   1bb1a:	b118      	cbz	r0, 1bb24 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   1bb1c:	2080      	movs	r0, #128	; 0x80
   1bb1e:	f8ad 000d 	strh.w	r0, [sp, #13]
   1bb22:	e001      	b.n	1bb28 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   1bb24:	f8ad 400d 	strh.w	r4, [sp, #13]
   1bb28:	f88d 400f 	strb.w	r4, [sp, #15]
   1bb2c:	7828      	ldrb	r0, [r5, #0]
   1bb2e:	2801      	cmp	r0, #1
   1bb30:	d003      	beq.n	1bb3a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   1bb32:	b138      	cbz	r0, 1bb44 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   1bb34:	2012      	movs	r0, #18
   1bb36:	b004      	add	sp, #16
   1bb38:	bd70      	pop	{r4, r5, r6, pc}
   1bb3a:	a903      	add	r1, sp, #12
   1bb3c:	4630      	mov	r0, r6
   1bb3e:	f7fb f8a1 	bl	16c84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   1bb42:	e7f8      	b.n	1bb36 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   1bb44:	4630      	mov	r0, r6
   1bb46:	f000 fd3c 	bl	1c5c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
   1bb4a:	e7f4      	b.n	1bb36 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0001bb4c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   1bb4c:	b530      	push	{r4, r5, lr}
   1bb4e:	b08b      	sub	sp, #44	; 0x2c
   1bb50:	4604      	mov	r4, r0
   1bb52:	f000 fd18 	bl	1c586 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1bb56:	4602      	mov	r2, r0
   1bb58:	7920      	ldrb	r0, [r4, #4]
   1bb5a:	2804      	cmp	r0, #4
   1bb5c:	d803      	bhi.n	1bb66 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   1bb5e:	8860      	ldrh	r0, [r4, #2]
   1bb60:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   1bb64:	d902      	bls.n	1bb6c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   1bb66:	2012      	movs	r0, #18
   1bb68:	b00b      	add	sp, #44	; 0x2c
   1bb6a:	bd30      	pop	{r4, r5, pc}
   1bb6c:	2500      	movs	r5, #0
   1bb6e:	f88d 5004 	strb.w	r5, [sp, #4]
   1bb72:	7921      	ldrb	r1, [r4, #4]
   1bb74:	9500      	str	r5, [sp, #0]
   1bb76:	f89d 0000 	ldrb.w	r0, [sp]
   1bb7a:	2905      	cmp	r1, #5
   1bb7c:	f040 0010 	orr.w	r0, r0, #16
   1bb80:	f88d 0000 	strb.w	r0, [sp]
   1bb84:	d254      	bcs.n	1bc30 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   1bb86:	e8df f001 	tbb	[pc, r1]
   1bb8a:	0803      	.short	0x0803
   1bb8c:	000b1105 	.word	0x000b1105
   1bb90:	f040 0001 	orr.w	r0, r0, #1
   1bb94:	f040 0002 	orr.w	r0, r0, #2
   1bb98:	e006      	b.n	1bba8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   1bb9a:	f040 0009 	orr.w	r0, r0, #9
   1bb9e:	e001      	b.n	1bba4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   1bba0:	f040 0001 	orr.w	r0, r0, #1
   1bba4:	f040 0004 	orr.w	r0, r0, #4
   1bba8:	f88d 0000 	strb.w	r0, [sp]
   1bbac:	f8bd 0000 	ldrh.w	r0, [sp]
   1bbb0:	9000      	str	r0, [sp, #0]
   1bbb2:	f8bd 0000 	ldrh.w	r0, [sp]
   1bbb6:	f8ad 0005 	strh.w	r0, [sp, #5]
   1bbba:	8821      	ldrh	r1, [r4, #0]
   1bbbc:	f8dd 0006 	ldr.w	r0, [sp, #6]
   1bbc0:	f361 201f 	bfi	r0, r1, #8, #24
   1bbc4:	f8cd 0006 	str.w	r0, [sp, #6]
   1bbc8:	8861      	ldrh	r1, [r4, #2]
   1bbca:	f8dd 0009 	ldr.w	r0, [sp, #9]
   1bbce:	f361 201f 	bfi	r0, r1, #8, #24
   1bbd2:	f8cd 0009 	str.w	r0, [sp, #9]
   1bbd6:	7b60      	ldrb	r0, [r4, #13]
   1bbd8:	f88d 000d 	strb.w	r0, [sp, #13]
   1bbdc:	7960      	ldrb	r0, [r4, #5]
   1bbde:	f88d 000e 	strb.w	r0, [sp, #14]
   1bbe2:	79a0      	ldrb	r0, [r4, #6]
   1bbe4:	f88d 000f 	strb.w	r0, [sp, #15]
   1bbe8:	f8d4 0007 	ldr.w	r0, [r4, #7]
   1bbec:	9004      	str	r0, [sp, #16]
   1bbee:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   1bbf2:	f8ad 0014 	strh.w	r0, [sp, #20]
   1bbf6:	7ba0      	ldrb	r0, [r4, #14]
   1bbf8:	f88d 0016 	strb.w	r0, [sp, #22]
   1bbfc:	207f      	movs	r0, #127	; 0x7f
   1bbfe:	f88d 0017 	strb.w	r0, [sp, #23]
   1bc02:	2001      	movs	r0, #1
   1bc04:	f88d 0018 	strb.w	r0, [sp, #24]
   1bc08:	f88d 5019 	strb.w	r5, [sp, #25]
   1bc0c:	f88d 001a 	strb.w	r0, [sp, #26]
   1bc10:	f88d 501b 	strb.w	r5, [sp, #27]
   1bc14:	4610      	mov	r0, r2
   1bc16:	f7fe fff5 	bl	1ac04 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   1bc1a:	f88d 001c 	strb.w	r0, [sp, #28]
   1bc1e:	f88d 501d 	strb.w	r5, [sp, #29]
   1bc22:	f88d 501e 	strb.w	r5, [sp, #30]
   1bc26:	a909      	add	r1, sp, #36	; 0x24
   1bc28:	a801      	add	r0, sp, #4
   1bc2a:	f000 f8de 	bl	1bdea <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   1bc2e:	e79b      	b.n	1bb68 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   1bc30:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
   1bc34:	2039      	movs	r0, #57	; 0x39
   1bc36:	f7f4 feed 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001bc3a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   1bc3a:	b570      	push	{r4, r5, r6, lr}
   1bc3c:	4604      	mov	r4, r0
   1bc3e:	7800      	ldrb	r0, [r0, #0]
   1bc40:	2101      	movs	r1, #1
   1bc42:	f7fd ff63 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1bc46:	0005      	movs	r5, r0
   1bc48:	d007      	beq.n	1bc5a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   1bc4a:	f7ff f994 	bl	1af76 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1bc4e:	b160      	cbz	r0, 1bc6a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   1bc50:	4628      	mov	r0, r5
   1bc52:	f7fe ffc1 	bl	1abd8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1bc56:	b110      	cbz	r0, 1bc5e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   1bc58:	e005      	b.n	1bc66 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   1bc5a:	2042      	movs	r0, #66	; 0x42
   1bc5c:	bd70      	pop	{r4, r5, r6, pc}
   1bc5e:	4628      	mov	r0, r5
   1bc60:	f7fe ffb0 	bl	1abc4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1bc64:	b108      	cbz	r0, 1bc6a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   1bc66:	200c      	movs	r0, #12
   1bc68:	bd70      	pop	{r4, r5, r6, pc}
   1bc6a:	1c61      	adds	r1, r4, #1
   1bc6c:	4628      	mov	r0, r5
   1bc6e:	f7fe ffc1 	bl	1abf4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   1bc72:	2000      	movs	r0, #0
   1bc74:	bd70      	pop	{r4, r5, r6, pc}

0001bc76 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   1bc76:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1bc78:	460d      	mov	r5, r1
   1bc7a:	4604      	mov	r4, r0
   1bc7c:	f000 fc66 	bl	1c54c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1bc80:	b130      	cbz	r0, 1bc90 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   1bc82:	88a2      	ldrh	r2, [r4, #4]
   1bc84:	f244 2090 	movw	r0, #17040	; 0x4290
   1bc88:	4282      	cmp	r2, r0
   1bc8a:	d903      	bls.n	1bc94 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   1bc8c:	2012      	movs	r0, #18
   1bc8e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1bc90:	2001      	movs	r0, #1
   1bc92:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1bc94:	f640 0048 	movw	r0, #2120	; 0x848
   1bc98:	4282      	cmp	r2, r0
   1bc9a:	d300      	bcc.n	1bc9e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   1bc9c:	4602      	mov	r2, r0
   1bc9e:	8820      	ldrh	r0, [r4, #0]
   1bca0:	f8ad 0000 	strh.w	r0, [sp]
   1bca4:	8860      	ldrh	r0, [r4, #2]
   1bca6:	f8ad 0002 	strh.w	r0, [sp, #2]
   1bcaa:	f8ad 2004 	strh.w	r2, [sp, #4]
   1bcae:	8860      	ldrh	r0, [r4, #2]
   1bcb0:	f8ad 0006 	strh.w	r0, [sp, #6]
   1bcb4:	f8ad 2008 	strh.w	r2, [sp, #8]
   1bcb8:	8820      	ldrh	r0, [r4, #0]
   1bcba:	8028      	strh	r0, [r5, #0]
   1bcbc:	4668      	mov	r0, sp
   1bcbe:	f7fb f8af 	bl	16e20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
   1bcc2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001bcc4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   1bcc4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1bcc6:	4604      	mov	r4, r0
   1bcc8:	f7fb f9dc 	bl	17084 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1bccc:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1bcd0:	b1b0      	cbz	r0, 1bd00 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
   1bcd2:	f10d 0007 	add.w	r0, sp, #7
   1bcd6:	9000      	str	r0, [sp, #0]
   1bcd8:	7922      	ldrb	r2, [r4, #4]
   1bcda:	78e1      	ldrb	r1, [r4, #3]
   1bcdc:	78a0      	ldrb	r0, [r4, #2]
   1bcde:	f10d 0306 	add.w	r3, sp, #6
   1bce2:	f000 fc94 	bl	1c60e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
   1bce6:	2800      	cmp	r0, #0
   1bce8:	d109      	bne.n	1bcfe <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
   1bcea:	8820      	ldrh	r0, [r4, #0]
   1bcec:	f8ad 0004 	strh.w	r0, [sp, #4]
   1bcf0:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   1bcf4:	f8ad 0008 	strh.w	r0, [sp, #8]
   1bcf8:	a801      	add	r0, sp, #4
   1bcfa:	f000 f9a6 	bl	1c04a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   1bcfe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1bd00:	2001      	movs	r0, #1
   1bd02:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001bd04 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   1bd04:	b510      	push	{r4, lr}
   1bd06:	4604      	mov	r4, r0
   1bd08:	f000 fc54 	bl	1c5b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1bd0c:	b120      	cbz	r0, 1bd18 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   1bd0e:	f7f6 fbb1 	bl	12474 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1bd12:	b108      	cbz	r0, 1bd18 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   1bd14:	200c      	movs	r0, #12
   1bd16:	bd10      	pop	{r4, pc}
   1bd18:	7820      	ldrb	r0, [r4, #0]
   1bd1a:	f7ff fd48 	bl	1b7ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   1bd1e:	79e2      	ldrb	r2, [r4, #7]
   1bd20:	1c61      	adds	r1, r4, #1
   1bd22:	f7f6 fb55 	bl	123d0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   1bd26:	b108      	cbz	r0, 1bd2c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   1bd28:	2000      	movs	r0, #0
   1bd2a:	bd10      	pop	{r4, pc}
   1bd2c:	2002      	movs	r0, #2
   1bd2e:	bd10      	pop	{r4, pc}

0001bd30 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   1bd30:	b510      	push	{r4, lr}
   1bd32:	4604      	mov	r4, r0
   1bd34:	2001      	movs	r0, #1
   1bd36:	f000 fac8 	bl	1c2ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   1bd3a:	b128      	cbz	r0, 1bd48 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   1bd3c:	4621      	mov	r1, r4
   1bd3e:	2001      	movs	r0, #1
   1bd40:	f7f5 fd7e 	bl	11840 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1bd44:	2000      	movs	r0, #0
   1bd46:	bd10      	pop	{r4, pc}
   1bd48:	200c      	movs	r0, #12
   1bd4a:	bd10      	pop	{r4, pc}

0001bd4c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   1bd4c:	b510      	push	{r4, lr}
   1bd4e:	8800      	ldrh	r0, [r0, #0]
   1bd50:	f7f6 fc1e 	bl	12590 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   1bd54:	b108      	cbz	r0, 1bd5a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   1bd56:	2000      	movs	r0, #0
   1bd58:	bd10      	pop	{r4, pc}
   1bd5a:	2030      	movs	r0, #48	; 0x30
   1bd5c:	bd10      	pop	{r4, pc}

0001bd5e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   1bd5e:	b51c      	push	{r2, r3, r4, lr}
   1bd60:	4604      	mov	r4, r0
   1bd62:	f000 fc10 	bl	1c586 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1bd66:	2000      	movs	r0, #0
   1bd68:	f88d 0000 	strb.w	r0, [sp]
   1bd6c:	f88d 0002 	strb.w	r0, [sp, #2]
   1bd70:	2003      	movs	r0, #3
   1bd72:	f88d 0001 	strb.w	r0, [sp, #1]
   1bd76:	f814 0b01 	ldrb.w	r0, [r4], #1
   1bd7a:	f88d 0003 	strb.w	r0, [sp, #3]
   1bd7e:	4668      	mov	r0, sp
   1bd80:	9401      	str	r4, [sp, #4]
   1bd82:	f000 f910 	bl	1bfa6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   1bd86:	bd1c      	pop	{r2, r3, r4, pc}

0001bd88 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   1bd88:	b51c      	push	{r2, r3, r4, lr}
   1bd8a:	4604      	mov	r4, r0
   1bd8c:	f000 fbde 	bl	1c54c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1bd90:	b178      	cbz	r0, 1bdb2 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   1bd92:	8820      	ldrh	r0, [r4, #0]
   1bd94:	f8ad 0000 	strh.w	r0, [sp]
   1bd98:	8860      	ldrh	r0, [r4, #2]
   1bd9a:	f8ad 0002 	strh.w	r0, [sp, #2]
   1bd9e:	8820      	ldrh	r0, [r4, #0]
   1bda0:	f8ad 0004 	strh.w	r0, [sp, #4]
   1bda4:	8860      	ldrh	r0, [r4, #2]
   1bda6:	f8ad 0006 	strh.w	r0, [sp, #6]
   1bdaa:	4668      	mov	r0, sp
   1bdac:	f7fb f8bc 	bl	16f28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
   1bdb0:	bd1c      	pop	{r2, r3, r4, pc}
   1bdb2:	2001      	movs	r0, #1
   1bdb4:	bd1c      	pop	{r2, r3, r4, pc}

0001bdb6 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   1bdb6:	b510      	push	{r4, lr}
   1bdb8:	f7f5 fd66 	bl	11888 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   1bdbc:	2000      	movs	r0, #0
   1bdbe:	bd10      	pop	{r4, pc}

0001bdc0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   1bdc0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1bdc2:	460c      	mov	r4, r1
   1bdc4:	4605      	mov	r5, r0
   1bdc6:	f000 fbc1 	bl	1c54c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1bdca:	b160      	cbz	r0, 1bde6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
   1bdcc:	4669      	mov	r1, sp
   1bdce:	4628      	mov	r0, r5
   1bdd0:	f7fe f8e4 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1bdd4:	2800      	cmp	r0, #0
   1bdd6:	d105      	bne.n	1bde4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
   1bdd8:	2100      	movs	r1, #0
   1bdda:	4622      	mov	r2, r4
   1bddc:	9801      	ldr	r0, [sp, #4]
   1bdde:	f000 fb40 	bl	1c462 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   1bde2:	2000      	movs	r0, #0
   1bde4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1bde6:	2001      	movs	r0, #1
   1bde8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001bdea <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   1bdea:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1bdee:	460f      	mov	r7, r1
   1bdf0:	4605      	mov	r5, r0
   1bdf2:	7806      	ldrb	r6, [r0, #0]
   1bdf4:	f000 fac5 	bl	1c382 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
   1bdf8:	2800      	cmp	r0, #0
   1bdfa:	d10a      	bne.n	1be12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1bdfc:	4628      	mov	r0, r5
   1bdfe:	f000 fa9a 	bl	1c336 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
   1be02:	2800      	cmp	r0, #0
   1be04:	d105      	bne.n	1be12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1be06:	2001      	movs	r0, #1
   1be08:	f7f4 ffee 	bl	10de8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1be0c:	4286      	cmp	r6, r0
   1be0e:	d302      	bcc.n	1be16 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
   1be10:	2007      	movs	r0, #7
   1be12:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1be16:	2101      	movs	r1, #1
   1be18:	4630      	mov	r0, r6
   1be1a:	f7fd fe77 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1be1e:	0004      	movs	r4, r0
   1be20:	d004      	beq.n	1be2c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
   1be22:	f7ff f8a8 	bl	1af76 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1be26:	b150      	cbz	r0, 1be3e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
   1be28:	200c      	movs	r0, #12
   1be2a:	e7f2      	b.n	1be12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1be2c:	2200      	movs	r2, #0
   1be2e:	2101      	movs	r1, #1
   1be30:	4630      	mov	r0, r6
   1be32:	f7fd fe61 	bl	19af8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   1be36:	0004      	movs	r4, r0
   1be38:	d00f      	beq.n	1be5a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
   1be3a:	f7fe fe68 	bl	1ab0e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   1be3e:	4620      	mov	r0, r4
   1be40:	f7fe fece 	bl	1abe0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1be44:	7038      	strb	r0, [r7, #0]
   1be46:	74e8      	strb	r0, [r5, #19]
   1be48:	4629      	mov	r1, r5
   1be4a:	4620      	mov	r0, r4
   1be4c:	f7f7 f9d6 	bl	131fc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   1be50:	4606      	mov	r6, r0
   1be52:	7e68      	ldrb	r0, [r5, #25]
   1be54:	b1d0      	cbz	r0, 1be8c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   1be56:	b12e      	cbz	r6, 1be64 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
   1be58:	e018      	b.n	1be8c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   1be5a:	f241 212d 	movw	r1, #4653	; 0x122d
   1be5e:	2039      	movs	r0, #57	; 0x39
   1be60:	f7f4 fdd8 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1be64:	2200      	movs	r2, #0
   1be66:	4668      	mov	r0, sp
   1be68:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1be6a:	f7fd ff10 	bl	19c8e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1be6e:	2200      	movs	r2, #0
   1be70:	2101      	movs	r1, #1
   1be72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1be74:	f7fd ff80 	bl	19d78 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1be78:	2204      	movs	r2, #4
   1be7a:	4668      	mov	r0, sp
   1be7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1be7e:	f7fd ff06 	bl	19c8e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1be82:	2200      	movs	r2, #0
   1be84:	4611      	mov	r1, r2
   1be86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1be88:	f7fd ff76 	bl	19d78 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1be8c:	4630      	mov	r0, r6
   1be8e:	e7c0      	b.n	1be12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0001be90 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   1be90:	b510      	push	{r4, lr}
   1be92:	4604      	mov	r4, r0
   1be94:	2000      	movs	r0, #0
   1be96:	f000 fa18 	bl	1c2ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   1be9a:	b128      	cbz	r0, 1bea8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   1be9c:	4621      	mov	r1, r4
   1be9e:	2000      	movs	r0, #0
   1bea0:	f7f5 fcce 	bl	11840 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1bea4:	2000      	movs	r0, #0
   1bea6:	bd10      	pop	{r4, pc}
   1bea8:	200c      	movs	r0, #12
   1beaa:	bd10      	pop	{r4, pc}

0001beac <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1beac:	b510      	push	{r4, lr}
   1beae:	7800      	ldrb	r0, [r0, #0]
   1beb0:	f000 0001 	and.w	r0, r0, #1
   1beb4:	f7f8 f8de 	bl	14074 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   1beb8:	2000      	movs	r0, #0
   1beba:	bd10      	pop	{r4, pc}

0001bebc <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1bebc:	b510      	push	{r4, lr}
   1bebe:	4604      	mov	r4, r0
   1bec0:	f000 fb44 	bl	1c54c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1bec4:	b120      	cbz	r0, 1bed0 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   1bec6:	4620      	mov	r0, r4
   1bec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1becc:	f7fa bfa8 	b.w	16e20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
   1bed0:	2001      	movs	r0, #1
   1bed2:	bd10      	pop	{r4, pc}

0001bed4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   1bed4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1bed8:	4606      	mov	r6, r0
   1beda:	7845      	ldrb	r5, [r0, #1]
   1bedc:	7800      	ldrb	r0, [r0, #0]
   1bede:	2101      	movs	r1, #1
   1bee0:	f7fd fe14 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1bee4:	0004      	movs	r4, r0
   1bee6:	d01e      	beq.n	1bf26 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   1bee8:	f7fe fe3d 	bl	1ab66 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   1beec:	78f1      	ldrb	r1, [r6, #3]
   1beee:	4281      	cmp	r1, r0
   1bef0:	d800      	bhi.n	1bef4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   1bef2:	4608      	mov	r0, r1
   1bef4:	4607      	mov	r7, r0
   1bef6:	2d04      	cmp	r5, #4
   1bef8:	d018      	beq.n	1bf2c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   1befa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1befc:	f7fd ff5f 	bl	19dbe <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1bf00:	4438      	add	r0, r7
   1bf02:	b281      	uxth	r1, r0
   1bf04:	4620      	mov	r0, r4
   1bf06:	2201      	movs	r2, #1
   1bf08:	f000 f9f1 	bl	1c2ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   1bf0c:	2800      	cmp	r0, #0
   1bf0e:	d10b      	bne.n	1bf28 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1bf10:	2d03      	cmp	r5, #3
   1bf12:	d000      	beq.n	1bf16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   1bf14:	b1df      	cbz	r7, 1bf4e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1bf16:	4620      	mov	r0, r4
   1bf18:	f7fe fe5c 	bl	1abd4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1bf1c:	7871      	ldrb	r1, [r6, #1]
   1bf1e:	2903      	cmp	r1, #3
   1bf20:	d010      	beq.n	1bf44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   1bf22:	b9a0      	cbnz	r0, 1bf4e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1bf24:	e004      	b.n	1bf30 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   1bf26:	2042      	movs	r0, #66	; 0x42
   1bf28:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1bf2c:	b97f      	cbnz	r7, 1bf4e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1bf2e:	e7f2      	b.n	1bf16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   1bf30:	2904      	cmp	r1, #4
   1bf32:	d107      	bne.n	1bf44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   1bf34:	4620      	mov	r0, r4
   1bf36:	f7ff f81e 	bl	1af76 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1bf3a:	b140      	cbz	r0, 1bf4e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1bf3c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1bf3e:	f7fd ff0d 	bl	19d5c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   1bf42:	b120      	cbz	r0, 1bf4e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1bf44:	2d01      	cmp	r5, #1
   1bf46:	d004      	beq.n	1bf52 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1bf48:	2d03      	cmp	r5, #3
   1bf4a:	d002      	beq.n	1bf52 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1bf4c:	e00e      	b.n	1bf6c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   1bf4e:	2012      	movs	r0, #18
   1bf50:	e7ea      	b.n	1bf28 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1bf52:	4620      	mov	r0, r4
   1bf54:	f7fe fe3e 	bl	1abd4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1bf58:	b108      	cbz	r0, 1bf5e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   1bf5a:	2200      	movs	r2, #0
   1bf5c:	e002      	b.n	1bf64 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   1bf5e:	2d01      	cmp	r5, #1
   1bf60:	d013      	beq.n	1bf8a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   1bf62:	2201      	movs	r2, #1
   1bf64:	4668      	mov	r0, sp
   1bf66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1bf68:	f7fd fe91 	bl	19c8e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1bf6c:	2d04      	cmp	r5, #4
   1bf6e:	d018      	beq.n	1bfa2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1bf70:	6872      	ldr	r2, [r6, #4]
   1bf72:	463b      	mov	r3, r7
   1bf74:	2101      	movs	r1, #1
   1bf76:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1bf78:	f7fd febc 	bl	19cf4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1bf7c:	b138      	cbz	r0, 1bf8e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   1bf7e:	7870      	ldrb	r0, [r6, #1]
   1bf80:	2802      	cmp	r0, #2
   1bf82:	d006      	beq.n	1bf92 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1bf84:	2803      	cmp	r0, #3
   1bf86:	d004      	beq.n	1bf92 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1bf88:	e00b      	b.n	1bfa2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1bf8a:	2202      	movs	r2, #2
   1bf8c:	e7ea      	b.n	1bf64 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   1bf8e:	2007      	movs	r0, #7
   1bf90:	e7ca      	b.n	1bf28 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1bf92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1bf94:	f7fd ff13 	bl	19dbe <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1bf98:	4602      	mov	r2, r0
   1bf9a:	2101      	movs	r1, #1
   1bf9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1bf9e:	f7fd feeb 	bl	19d78 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1bfa2:	2000      	movs	r0, #0
   1bfa4:	e7c0      	b.n	1bf28 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0001bfa6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   1bfa6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1bfaa:	4607      	mov	r7, r0
   1bfac:	7845      	ldrb	r5, [r0, #1]
   1bfae:	78c6      	ldrb	r6, [r0, #3]
   1bfb0:	7800      	ldrb	r0, [r0, #0]
   1bfb2:	2101      	movs	r1, #1
   1bfb4:	f7fd fdaa 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1bfb8:	0004      	movs	r4, r0
   1bfba:	d003      	beq.n	1bfc4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   1bfbc:	f7fe fe0c 	bl	1abd8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1bfc0:	b118      	cbz	r0, 1bfca <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   1bfc2:	e003      	b.n	1bfcc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   1bfc4:	2042      	movs	r0, #66	; 0x42
   1bfc6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1bfca:	2600      	movs	r6, #0
   1bfcc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1bfce:	f7fd fefa 	bl	19dc6 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   1bfd2:	4430      	add	r0, r6
   1bfd4:	b281      	uxth	r1, r0
   1bfd6:	4688      	mov	r8, r1
   1bfd8:	4620      	mov	r0, r4
   1bfda:	2201      	movs	r2, #1
   1bfdc:	f000 f987 	bl	1c2ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   1bfe0:	2800      	cmp	r0, #0
   1bfe2:	d1f0      	bne.n	1bfc6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1bfe4:	2d04      	cmp	r5, #4
   1bfe6:	d008      	beq.n	1bffa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1bfe8:	2d03      	cmp	r5, #3
   1bfea:	d00a      	beq.n	1c002 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   1bfec:	b12e      	cbz	r6, 1bffa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1bfee:	4620      	mov	r0, r4
   1bff0:	f7fe ffc1 	bl	1af76 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1bff4:	b118      	cbz	r0, 1bffe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   1bff6:	200c      	movs	r0, #12
   1bff8:	e7e5      	b.n	1bfc6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1bffa:	2012      	movs	r0, #18
   1bffc:	e7e3      	b.n	1bfc6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1bffe:	2d01      	cmp	r5, #1
   1c000:	d10c      	bne.n	1c01c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   1c002:	4620      	mov	r0, r4
   1c004:	f7fe fde6 	bl	1abd4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1c008:	b108      	cbz	r0, 1c00e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   1c00a:	2204      	movs	r2, #4
   1c00c:	e002      	b.n	1c014 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1c00e:	2d01      	cmp	r5, #1
   1c010:	d010      	beq.n	1c034 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   1c012:	2205      	movs	r2, #5
   1c014:	4668      	mov	r0, sp
   1c016:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1c018:	f7fd fe39 	bl	19c8e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1c01c:	687a      	ldr	r2, [r7, #4]
   1c01e:	4633      	mov	r3, r6
   1c020:	2100      	movs	r1, #0
   1c022:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1c024:	f7fd fe66 	bl	19cf4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1c028:	b130      	cbz	r0, 1c038 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   1c02a:	2d02      	cmp	r5, #2
   1c02c:	d006      	beq.n	1c03c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   1c02e:	2d03      	cmp	r5, #3
   1c030:	d004      	beq.n	1c03c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   1c032:	e008      	b.n	1c046 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   1c034:	2206      	movs	r2, #6
   1c036:	e7ed      	b.n	1c014 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1c038:	2007      	movs	r0, #7
   1c03a:	e7c4      	b.n	1bfc6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1c03c:	4642      	mov	r2, r8
   1c03e:	2100      	movs	r1, #0
   1c040:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1c042:	f7fd fe99 	bl	19d78 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1c046:	2000      	movs	r0, #0
   1c048:	e7bd      	b.n	1bfc6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0001c04a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   1c04a:	b510      	push	{r4, lr}
   1c04c:	4604      	mov	r4, r0
   1c04e:	8880      	ldrh	r0, [r0, #4]
   1c050:	b128      	cbz	r0, 1c05e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1c052:	2801      	cmp	r0, #1
   1c054:	d003      	beq.n	1c05e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1c056:	2802      	cmp	r0, #2
   1c058:	d001      	beq.n	1c05e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1c05a:	2012      	movs	r0, #18
   1c05c:	bd10      	pop	{r4, pc}
   1c05e:	78e0      	ldrb	r0, [r4, #3]
   1c060:	f000 f9dc 	bl	1c41c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   1c064:	b148      	cbz	r0, 1c07a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1c066:	78a0      	ldrb	r0, [r4, #2]
   1c068:	f000 f9d8 	bl	1c41c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   1c06c:	b128      	cbz	r0, 1c07a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1c06e:	4620      	mov	r0, r4
   1c070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c074:	2101      	movs	r1, #1
   1c076:	f000 b884 	b.w	1c182 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1c07a:	2011      	movs	r0, #17
   1c07c:	bd10      	pop	{r4, pc}

0001c07e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   1c07e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1c080:	460c      	mov	r4, r1
   1c082:	4605      	mov	r5, r0
   1c084:	8800      	ldrh	r0, [r0, #0]
   1c086:	4669      	mov	r1, sp
   1c088:	f7fd ff88 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c08c:	2800      	cmp	r0, #0
   1c08e:	d106      	bne.n	1c09e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   1c090:	9801      	ldr	r0, [sp, #4]
   1c092:	8829      	ldrh	r1, [r5, #0]
   1c094:	8021      	strh	r1, [r4, #0]
   1c096:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
   1c09a:	8060      	strh	r0, [r4, #2]
   1c09c:	2000      	movs	r0, #0
   1c09e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001c0a0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   1c0a0:	b510      	push	{r4, lr}
   1c0a2:	4604      	mov	r4, r0
   1c0a4:	4601      	mov	r1, r0
   1c0a6:	2000      	movs	r0, #0
   1c0a8:	f7f5 fbb2 	bl	11810 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1c0ac:	b910      	cbnz	r0, 1c0b4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   1c0ae:	2000      	movs	r0, #0
   1c0b0:	6020      	str	r0, [r4, #0]
   1c0b2:	80a0      	strh	r0, [r4, #4]
   1c0b4:	2000      	movs	r0, #0
   1c0b6:	bd10      	pop	{r4, pc}

0001c0b8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   1c0b8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1c0ba:	8800      	ldrh	r0, [r0, #0]
   1c0bc:	4669      	mov	r1, sp
   1c0be:	f7fd ff6d 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c0c2:	b958      	cbnz	r0, 1c0dc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   1c0c4:	4668      	mov	r0, sp
   1c0c6:	f000 fa47 	bl	1c558 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
   1c0ca:	b138      	cbz	r0, 1c0dc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   1c0cc:	9c01      	ldr	r4, [sp, #4]
   1c0ce:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   1c0d2:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
   1c0d6:	3470      	adds	r4, #112	; 0x70
   1c0d8:	b929      	cbnz	r1, 1c0e6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
   1c0da:	e001      	b.n	1c0e0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   1c0dc:	2002      	movs	r0, #2
   1c0de:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1c0e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1c0e4:	b109      	cbz	r1, 1c0ea <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
   1c0e6:	203a      	movs	r0, #58	; 0x3a
   1c0e8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1c0ea:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
   1c0ee:	f04f 0501 	mov.w	r5, #1
   1c0f2:	0789      	lsls	r1, r1, #30
   1c0f4:	d103      	bne.n	1c0fe <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
   1c0f6:	7005      	strb	r5, [r0, #0]
   1c0f8:	4668      	mov	r0, sp
   1c0fa:	f7fe fae7 	bl	1a6cc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   1c0fe:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
   1c102:	2000      	movs	r0, #0
   1c104:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001c106 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1c106:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1c108:	460c      	mov	r4, r1
   1c10a:	4605      	mov	r5, r0
   1c10c:	8800      	ldrh	r0, [r0, #0]
   1c10e:	4669      	mov	r1, sp
   1c110:	f7fd ff44 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c114:	b108      	cbz	r0, 1c11a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1c116:	2002      	movs	r0, #2
   1c118:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1c11a:	78a8      	ldrb	r0, [r5, #2]
   1c11c:	b130      	cbz	r0, 1c12c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   1c11e:	f000 f9f6 	bl	1c50e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
   1c122:	70a0      	strb	r0, [r4, #2]
   1c124:	8828      	ldrh	r0, [r5, #0]
   1c126:	8020      	strh	r0, [r4, #0]
   1c128:	2000      	movs	r0, #0
   1c12a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1c12c:	9801      	ldr	r0, [sp, #4]
   1c12e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   1c132:	e7f6      	b.n	1c122 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001c134 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1c134:	b510      	push	{r4, lr}
   1c136:	f7fa ff31 	bl	16f9c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1c13a:	2000      	movs	r0, #0
   1c13c:	bd10      	pop	{r4, pc}

0001c13e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   1c13e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1c142:	4604      	mov	r4, r0
   1c144:	8840      	ldrh	r0, [r0, #2]
   1c146:	460d      	mov	r5, r1
   1c148:	b1b8      	cbz	r0, 1c17a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   1c14a:	8820      	ldrh	r0, [r4, #0]
   1c14c:	4669      	mov	r1, sp
   1c14e:	f7fd ff25 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c152:	2800      	cmp	r0, #0
   1c154:	d10f      	bne.n	1c176 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1c156:	8820      	ldrh	r0, [r4, #0]
   1c158:	8028      	strh	r0, [r5, #0]
   1c15a:	9e01      	ldr	r6, [sp, #4]
   1c15c:	f106 050c 	add.w	r5, r6, #12
   1c160:	3670      	adds	r6, #112	; 0x70
   1c162:	682f      	ldr	r7, [r5, #0]
   1c164:	8862      	ldrh	r2, [r4, #2]
   1c166:	4639      	mov	r1, r7
   1c168:	4630      	mov	r0, r6
   1c16a:	f7fe f858 	bl	1a21e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   1c16e:	6828      	ldr	r0, [r5, #0]
   1c170:	42b8      	cmp	r0, r7
   1c172:	d1f6      	bne.n	1c162 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1c174:	2000      	movs	r0, #0
   1c176:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1c17a:	2012      	movs	r0, #18
   1c17c:	e7fb      	b.n	1c176 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0001c17e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   1c17e:	f7fa bce5 	b.w	16b4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0001c182 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   1c182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c186:	b086      	sub	sp, #24
   1c188:	468a      	mov	sl, r1
   1c18a:	4606      	mov	r6, r0
   1c18c:	8800      	ldrh	r0, [r0, #0]
   1c18e:	a901      	add	r1, sp, #4
   1c190:	f7fd ff04 	bl	19f9c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c194:	2800      	cmp	r0, #0
   1c196:	d138      	bne.n	1c20a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
   1c198:	9802      	ldr	r0, [sp, #8]
   1c19a:	f04f 0800 	mov.w	r8, #0
   1c19e:	4601      	mov	r1, r0
   1c1a0:	4689      	mov	r9, r1
   1c1a2:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
   1c1a6:	f88d 1000 	strb.w	r1, [sp]
   1c1aa:	9900      	ldr	r1, [sp, #0]
   1c1ac:	9100      	str	r1, [sp, #0]
   1c1ae:	f89d 5000 	ldrb.w	r5, [sp]
   1c1b2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   1c1b6:	3070      	adds	r0, #112	; 0x70
   1c1b8:	2921      	cmp	r1, #33	; 0x21
   1c1ba:	d100      	bne.n	1c1be <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
   1c1bc:	b13d      	cbz	r5, 1c1ce <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   1c1be:	2400      	movs	r4, #0
   1c1c0:	304c      	adds	r0, #76	; 0x4c
   1c1c2:	2108      	movs	r1, #8
   1c1c4:	4607      	mov	r7, r0
   1c1c6:	f7ff fae8 	bl	1b79a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   1c1ca:	b110      	cbz	r0, 1c1d2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
   1c1cc:	e007      	b.n	1c1de <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   1c1ce:	2401      	movs	r4, #1
   1c1d0:	e7f6      	b.n	1c1c0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
   1c1d2:	210b      	movs	r1, #11
   1c1d4:	4638      	mov	r0, r7
   1c1d6:	f7ff fae0 	bl	1b79a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   1c1da:	b900      	cbnz	r0, 1c1de <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   1c1dc:	b1a4      	cbz	r4, 1c208 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
   1c1de:	a804      	add	r0, sp, #16
   1c1e0:	9000      	str	r0, [sp, #0]
   1c1e2:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1c1e6:	ab03      	add	r3, sp, #12
   1c1e8:	4632      	mov	r2, r6
   1c1ea:	4649      	mov	r1, r9
   1c1ec:	f000 f96f 	bl	1c4ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
   1c1f0:	0007      	movs	r7, r0
   1c1f2:	d10a      	bne.n	1c20a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
   1c1f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1c1f8:	9c02      	ldr	r4, [sp, #8]
   1c1fa:	b148      	cbz	r0, 1c210 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1c1fc:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
   1c200:	2001      	movs	r0, #1
   1c202:	7060      	strb	r0, [r4, #1]
   1c204:	b94d      	cbnz	r5, 1c21a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   1c206:	e006      	b.n	1c216 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   1c208:	201a      	movs	r0, #26
   1c20a:	b006      	add	sp, #24
   1c20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c210:	f504 7497 	add.w	r4, r4, #302	; 0x12e
   1c214:	e7f4      	b.n	1c200 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
   1c216:	7820      	ldrb	r0, [r4, #0]
   1c218:	b108      	cbz	r0, 1c21e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   1c21a:	273a      	movs	r7, #58	; 0x3a
   1c21c:	e012      	b.n	1c244 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   1c21e:	f884 a000 	strb.w	sl, [r4]
   1c222:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1c226:	70a0      	strb	r0, [r4, #2]
   1c228:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1c22c:	70e1      	strb	r1, [r4, #3]
   1c22e:	f88d 0000 	strb.w	r0, [sp]
   1c232:	f88d 1001 	strb.w	r1, [sp, #1]
   1c236:	88b0      	ldrh	r0, [r6, #4]
   1c238:	f8ad 0002 	strh.w	r0, [sp, #2]
   1c23c:	4669      	mov	r1, sp
   1c23e:	4648      	mov	r0, r9
   1c240:	f7fd ff6b 	bl	1a11a <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1c244:	f884 8001 	strb.w	r8, [r4, #1]
   1c248:	4638      	mov	r0, r7
   1c24a:	e7de      	b.n	1c20a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0001c24c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   1c24c:	b510      	push	{r4, lr}
   1c24e:	2008      	movs	r0, #8
   1c250:	f7fa ff0e 	bl	17070 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   1c254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c258:	f7f8 bc86 	b.w	14b68 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   1c25c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1c260:	4288      	cmp	r0, r1
   1c262:	d303      	bcc.n	1c26c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
   1c264:	f640 0148 	movw	r1, #2120	; 0x848
   1c268:	4288      	cmp	r0, r1
   1c26a:	d300      	bcc.n	1c26e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
   1c26c:	4608      	mov	r0, r1
   1c26e:	4770      	bx	lr
   1c270:	07c1      	lsls	r1, r0, #31
   1c272:	d001      	beq.n	1c278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
   1c274:	2001      	movs	r0, #1
   1c276:	4770      	bx	lr
   1c278:	0780      	lsls	r0, r0, #30
   1c27a:	d501      	bpl.n	1c280 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
   1c27c:	2002      	movs	r0, #2
   1c27e:	4770      	bx	lr
   1c280:	2000      	movs	r0, #0
   1c282:	4770      	bx	lr
   1c284:	b510      	push	{r4, lr}
   1c286:	2801      	cmp	r0, #1
   1c288:	d006      	beq.n	1c298 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   1c28a:	2802      	cmp	r0, #2
   1c28c:	d004      	beq.n	1c298 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   1c28e:	f240 2163 	movw	r1, #611	; 0x263
   1c292:	2006      	movs	r0, #6
   1c294:	f7f4 fbbe 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c298:	bd10      	pop	{r4, pc}
   1c29a:	b50e      	push	{r1, r2, r3, lr}
   1c29c:	4669      	mov	r1, sp
   1c29e:	2001      	movs	r0, #1
   1c2a0:	f7fd fc3e 	bl	19b20 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1c2a4:	b150      	cbz	r0, 1c2bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   1c2a6:	f240 114f 	movw	r1, #335	; 0x14f
   1c2aa:	2039      	movs	r0, #57	; 0x39
   1c2ac:	f7f4 fbb2 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c2b0:	9802      	ldr	r0, [sp, #8]
   1c2b2:	f7fe fe60 	bl	1af76 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1c2b6:	b108      	cbz	r0, 1c2bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   1c2b8:	2001      	movs	r0, #1
   1c2ba:	bd0e      	pop	{r1, r2, r3, pc}
   1c2bc:	4668      	mov	r0, sp
   1c2be:	f7f4 fde1 	bl	10e84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1c2c2:	2800      	cmp	r0, #0
   1c2c4:	d0f4      	beq.n	1c2b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
   1c2c6:	2000      	movs	r0, #0
   1c2c8:	bd0e      	pop	{r1, r2, r3, pc}
   1c2ca:	b510      	push	{r4, lr}
   1c2cc:	f7ff ffe5 	bl	1c29a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   1c2d0:	b158      	cbz	r0, 1c2ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   1c2d2:	f000 f958 	bl	1c586 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1c2d6:	4604      	mov	r4, r0
   1c2d8:	f7fe fc7e 	bl	1abd8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1c2dc:	b918      	cbnz	r0, 1c2e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
   1c2de:	4620      	mov	r0, r4
   1c2e0:	f7fe fc70 	bl	1abc4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1c2e4:	b108      	cbz	r0, 1c2ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   1c2e6:	2000      	movs	r0, #0
   1c2e8:	bd10      	pop	{r4, pc}
   1c2ea:	2001      	movs	r0, #1
   1c2ec:	bd10      	pop	{r4, pc}
   1c2ee:	b570      	push	{r4, r5, r6, lr}
   1c2f0:	460c      	mov	r4, r1
   1c2f2:	4605      	mov	r5, r0
   1c2f4:	b112      	cbz	r2, 1c2fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
   1c2f6:	291f      	cmp	r1, #31
   1c2f8:	d80c      	bhi.n	1c314 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
   1c2fa:	e016      	b.n	1c32a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
   1c2fc:	f7f5 f888 	bl	11410 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1c300:	42a0      	cmp	r0, r4
   1c302:	d201      	bcs.n	1c308 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
   1c304:	2007      	movs	r0, #7
   1c306:	bd70      	pop	{r4, r5, r6, pc}
   1c308:	4628      	mov	r0, r5
   1c30a:	f7fe fc63 	bl	1abd4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1c30e:	b118      	cbz	r0, 1c318 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   1c310:	2c1f      	cmp	r4, #31
   1c312:	d901      	bls.n	1c318 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   1c314:	2012      	movs	r0, #18
   1c316:	bd70      	pop	{r4, r5, r6, pc}
   1c318:	4628      	mov	r0, r5
   1c31a:	f7fe fc64 	bl	1abe6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1c31e:	b130      	cbz	r0, 1c32e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
   1c320:	4621      	mov	r1, r4
   1c322:	4628      	mov	r0, r5
   1c324:	f7fe fc2b 	bl	1ab7e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1c328:	b118      	cbz	r0, 1c332 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
   1c32a:	2000      	movs	r0, #0
   1c32c:	bd70      	pop	{r4, r5, r6, pc}
   1c32e:	2042      	movs	r0, #66	; 0x42
   1c330:	bd70      	pop	{r4, r5, r6, pc}
   1c332:	2045      	movs	r0, #69	; 0x45
   1c334:	bd70      	pop	{r4, r5, r6, pc}
   1c336:	b510      	push	{r4, lr}
   1c338:	4604      	mov	r4, r0
   1c33a:	7840      	ldrb	r0, [r0, #1]
   1c33c:	06c1      	lsls	r1, r0, #27
   1c33e:	d51c      	bpl.n	1c37a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   1c340:	07c0      	lsls	r0, r0, #31
   1c342:	d00b      	beq.n	1c35c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1c344:	f7fa fe68 	bl	17018 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   1c348:	b1b8      	cbz	r0, 1c37a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   1c34a:	7860      	ldrb	r0, [r4, #1]
   1c34c:	06c1      	lsls	r1, r0, #27
   1c34e:	d405      	bmi.n	1c35c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1c350:	0700      	lsls	r0, r0, #28
   1c352:	d503      	bpl.n	1c35c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1c354:	7d20      	ldrb	r0, [r4, #20]
   1c356:	2802      	cmp	r0, #2
   1c358:	d10f      	bne.n	1c37a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   1c35a:	e010      	b.n	1c37e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   1c35c:	7d20      	ldrb	r0, [r4, #20]
   1c35e:	2802      	cmp	r0, #2
   1c360:	d001      	beq.n	1c366 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
   1c362:	7ea0      	ldrb	r0, [r4, #26]
   1c364:	b948      	cbnz	r0, 1c37a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   1c366:	7860      	ldrb	r0, [r4, #1]
   1c368:	0700      	lsls	r0, r0, #28
   1c36a:	d408      	bmi.n	1c37e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   1c36c:	f8d4 0005 	ldr.w	r0, [r4, #5]
   1c370:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1c374:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1c378:	d201      	bcs.n	1c37e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   1c37a:	2011      	movs	r0, #17
   1c37c:	bd10      	pop	{r4, pc}
   1c37e:	2000      	movs	r0, #0
   1c380:	bd10      	pop	{r4, pc}
   1c382:	b538      	push	{r3, r4, r5, lr}
   1c384:	4604      	mov	r4, r0
   1c386:	7800      	ldrb	r0, [r0, #0]
   1c388:	28ef      	cmp	r0, #239	; 0xef
   1c38a:	d843      	bhi.n	1c414 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c38c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1c390:	f8ad 0000 	strh.w	r0, [sp]
   1c394:	9800      	ldr	r0, [sp, #0]
   1c396:	f000 f951 	bl	1c63c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
   1c39a:	b3a0      	cbz	r0, 1c406 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   1c39c:	7861      	ldrb	r1, [r4, #1]
   1c39e:	0708      	lsls	r0, r1, #28
   1c3a0:	d40b      	bmi.n	1c3ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
   1c3a2:	f8d4 0002 	ldr.w	r0, [r4, #2]
   1c3a6:	f8d4 3005 	ldr.w	r3, [r4, #5]
   1c3aa:	0a02      	lsrs	r2, r0, #8
   1c3ac:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   1c3b0:	d830      	bhi.n	1c414 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c3b2:	2220      	movs	r2, #32
   1c3b4:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   1c3b8:	d82c      	bhi.n	1c414 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c3ba:	7a60      	ldrb	r0, [r4, #9]
   1c3bc:	b318      	cbz	r0, 1c406 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   1c3be:	2807      	cmp	r0, #7
   1c3c0:	d828      	bhi.n	1c414 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c3c2:	7aa0      	ldrb	r0, [r4, #10]
   1c3c4:	b128      	cbz	r0, 1c3d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   1c3c6:	2801      	cmp	r0, #1
   1c3c8:	d003      	beq.n	1c3d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   1c3ca:	2802      	cmp	r0, #2
   1c3cc:	d001      	beq.n	1c3d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   1c3ce:	2803      	cmp	r0, #3
   1c3d0:	d120      	bne.n	1c414 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c3d2:	074a      	lsls	r2, r1, #29
   1c3d4:	d403      	bmi.n	1c3de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   1c3d6:	2802      	cmp	r0, #2
   1c3d8:	d001      	beq.n	1c3de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   1c3da:	2803      	cmp	r0, #3
   1c3dc:	d105      	bne.n	1c3ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
   1c3de:	7ae0      	ldrb	r0, [r4, #11]
   1c3e0:	b108      	cbz	r0, 1c3e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
   1c3e2:	2801      	cmp	r0, #1
   1c3e4:	d116      	bne.n	1c414 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c3e6:	0748      	lsls	r0, r1, #29
   1c3e8:	d407      	bmi.n	1c3fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1c3ea:	7ca0      	ldrb	r0, [r4, #18]
   1c3ec:	b128      	cbz	r0, 1c3fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1c3ee:	2801      	cmp	r0, #1
   1c3f0:	d003      	beq.n	1c3fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1c3f2:	2802      	cmp	r0, #2
   1c3f4:	d001      	beq.n	1c3fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1c3f6:	2803      	cmp	r0, #3
   1c3f8:	d10c      	bne.n	1c414 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c3fa:	06c8      	lsls	r0, r1, #27
   1c3fc:	7d20      	ldrb	r0, [r4, #20]
   1c3fe:	d503      	bpl.n	1c408 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
   1c400:	2801      	cmp	r0, #1
   1c402:	d107      	bne.n	1c414 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c404:	e002      	b.n	1c40c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
   1c406:	e005      	b.n	1c414 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c408:	2802      	cmp	r0, #2
   1c40a:	d003      	beq.n	1c414 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c40c:	7e20      	ldrb	r0, [r4, #24]
   1c40e:	b118      	cbz	r0, 1c418 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   1c410:	2801      	cmp	r0, #1
   1c412:	d001      	beq.n	1c418 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   1c414:	2012      	movs	r0, #18
   1c416:	bd38      	pop	{r3, r4, r5, pc}
   1c418:	2000      	movs	r0, #0
   1c41a:	bd38      	pop	{r3, r4, r5, pc}
   1c41c:	b510      	push	{r4, lr}
   1c41e:	0004      	movs	r4, r0
   1c420:	d005      	beq.n	1c42e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   1c422:	f7fa fe35 	bl	17090 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1c426:	4384      	bics	r4, r0
   1c428:	d001      	beq.n	1c42e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   1c42a:	2000      	movs	r0, #0
   1c42c:	bd10      	pop	{r4, pc}
   1c42e:	2001      	movs	r0, #1
   1c430:	bd10      	pop	{r4, pc}
   1c432:	28fb      	cmp	r0, #251	; 0xfb
   1c434:	d803      	bhi.n	1c43e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
   1c436:	f640 0048 	movw	r0, #2120	; 0x848
   1c43a:	4281      	cmp	r1, r0
   1c43c:	d901      	bls.n	1c442 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
   1c43e:	2011      	movs	r0, #17
   1c440:	4770      	bx	lr
   1c442:	2000      	movs	r0, #0
   1c444:	4770      	bx	lr
   1c446:	381b      	subs	r0, #27
   1c448:	28e1      	cmp	r0, #225	; 0xe1
   1c44a:	d206      	bcs.n	1c45a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   1c44c:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   1c450:	d303      	bcc.n	1c45a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   1c452:	f244 2090 	movw	r0, #17040	; 0x4290
   1c456:	4281      	cmp	r1, r0
   1c458:	d901      	bls.n	1c45e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
   1c45a:	2012      	movs	r0, #18
   1c45c:	4770      	bx	lr
   1c45e:	2000      	movs	r0, #0
   1c460:	4770      	bx	lr
   1c462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c466:	4606      	mov	r6, r0
   1c468:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   1c46c:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   1c470:	4615      	mov	r5, r2
   1c472:	302c      	adds	r0, #44	; 0x2c
   1c474:	f7f7 fe04 	bl	14080 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   1c478:	4680      	mov	r8, r0
   1c47a:	2102      	movs	r1, #2
   1c47c:	f7fd fe1e 	bl	1a0bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1c480:	4287      	cmp	r7, r0
   1c482:	d200      	bcs.n	1c486 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
   1c484:	4638      	mov	r0, r7
   1c486:	4607      	mov	r7, r0
   1c488:	2102      	movs	r1, #2
   1c48a:	4640      	mov	r0, r8
   1c48c:	f7fd fe16 	bl	1a0bc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1c490:	4284      	cmp	r4, r0
   1c492:	d200      	bcs.n	1c496 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
   1c494:	4620      	mov	r0, r4
   1c496:	8831      	ldrh	r1, [r6, #0]
   1c498:	8029      	strh	r1, [r5, #0]
   1c49a:	2f1b      	cmp	r7, #27
   1c49c:	d913      	bls.n	1c4c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
   1c49e:	2ffb      	cmp	r7, #251	; 0xfb
   1c4a0:	d300      	bcc.n	1c4a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   1c4a2:	27fb      	movs	r7, #251	; 0xfb
   1c4a4:	806f      	strh	r7, [r5, #2]
   1c4a6:	281b      	cmp	r0, #27
   1c4a8:	d90f      	bls.n	1c4ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
   1c4aa:	28fb      	cmp	r0, #251	; 0xfb
   1c4ac:	d300      	bcc.n	1c4b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   1c4ae:	20fb      	movs	r0, #251	; 0xfb
   1c4b0:	80e8      	strh	r0, [r5, #6]
   1c4b2:	4640      	mov	r0, r8
   1c4b4:	f7ff fed2 	bl	1c25c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   1c4b8:	80a8      	strh	r0, [r5, #4]
   1c4ba:	4640      	mov	r0, r8
   1c4bc:	f7ff fece 	bl	1c25c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   1c4c0:	8128      	strh	r0, [r5, #8]
   1c4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c4c6:	271b      	movs	r7, #27
   1c4c8:	e7ec      	b.n	1c4a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   1c4ca:	201b      	movs	r0, #27
   1c4cc:	e7f0      	b.n	1c4b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   1c4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c4d2:	7890      	ldrb	r0, [r2, #2]
   1c4d4:	9e06      	ldr	r6, [sp, #24]
   1c4d6:	461d      	mov	r5, r3
   1c4d8:	4614      	mov	r4, r2
   1c4da:	b908      	cbnz	r0, 1c4e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
   1c4dc:	f7fa fdd8 	bl	17090 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1c4e0:	78e4      	ldrb	r4, [r4, #3]
   1c4e2:	4607      	mov	r7, r0
   1c4e4:	b914      	cbnz	r4, 1c4ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
   1c4e6:	f7fa fdd3 	bl	17090 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1c4ea:	4604      	mov	r4, r0
   1c4ec:	b16f      	cbz	r7, 1c50a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1c4ee:	b164      	cbz	r4, 1c50a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1c4f0:	4638      	mov	r0, r7
   1c4f2:	f7ff febd 	bl	1c270 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   1c4f6:	4620      	mov	r0, r4
   1c4f8:	f7ff feba 	bl	1c270 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   1c4fc:	b12f      	cbz	r7, 1c50a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1c4fe:	b124      	cbz	r4, 1c50a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1c500:	702f      	strb	r7, [r5, #0]
   1c502:	7034      	strb	r4, [r6, #0]
   1c504:	2000      	movs	r0, #0
   1c506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c50a:	2009      	movs	r0, #9
   1c50c:	e7fb      	b.n	1c506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
   1c50e:	b510      	push	{r4, lr}
   1c510:	f7fc faa5 	bl	18a5e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1c514:	b928      	cbnz	r0, 1c522 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   1c516:	f7fc fad8 	bl	18aca <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   1c51a:	b910      	cbnz	r0, 1c522 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   1c51c:	f7fc fadf 	bl	18ade <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1c520:	b108      	cbz	r0, 1c526 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
   1c522:	2008      	movs	r0, #8
   1c524:	bd10      	pop	{r4, pc}
   1c526:	f7fc fa6f 	bl	18a08 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   1c52a:	b940      	cbnz	r0, 1c53e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   1c52c:	f7fc fa76 	bl	18a1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1c530:	b928      	cbnz	r0, 1c53e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   1c532:	f7fc fa8a 	bl	18a4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1c536:	b910      	cbnz	r0, 1c53e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   1c538:	f7fc fa9b 	bl	18a72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1c53c:	b108      	cbz	r0, 1c542 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
   1c53e:	2004      	movs	r0, #4
   1c540:	bd10      	pop	{r4, pc}
   1c542:	f240 519c 	movw	r1, #1436	; 0x59c
   1c546:	2039      	movs	r0, #57	; 0x39
   1c548:	f7f4 fa64 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c54c:	b510      	push	{r4, lr}
   1c54e:	f7fa fd99 	bl	17084 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1c552:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1c556:	bd10      	pop	{r4, pc}
   1c558:	6840      	ldr	r0, [r0, #4]
   1c55a:	f000 b800 	b.w	1c55e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   1c55e:	b508      	push	{r3, lr}
   1c560:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
   1c564:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   1c568:	f88d 0000 	strb.w	r0, [sp]
   1c56c:	9800      	ldr	r0, [sp, #0]
   1c56e:	9000      	str	r0, [sp, #0]
   1c570:	f89d 0000 	ldrb.w	r0, [sp]
   1c574:	1e40      	subs	r0, r0, #1
   1c576:	4208      	tst	r0, r1
   1c578:	d003      	beq.n	1c582 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
   1c57a:	2904      	cmp	r1, #4
   1c57c:	d001      	beq.n	1c582 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
   1c57e:	2001      	movs	r0, #1
   1c580:	bd08      	pop	{r3, pc}
   1c582:	2000      	movs	r0, #0
   1c584:	bd08      	pop	{r3, pc}
   1c586:	b510      	push	{r4, lr}
   1c588:	2101      	movs	r1, #1
   1c58a:	2000      	movs	r0, #0
   1c58c:	f7fd fabe 	bl	19b0c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1c590:	0004      	movs	r4, r0
   1c592:	d108      	bne.n	1c5a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35a>
   1c594:	2200      	movs	r2, #0
   1c596:	2101      	movs	r1, #1
   1c598:	4610      	mov	r0, r2
   1c59a:	f7fd faad 	bl	19af8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   1c59e:	0004      	movs	r4, r0
   1c5a0:	d003      	beq.n	1c5aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35e>
   1c5a2:	f7fe fab4 	bl	1ab0e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   1c5a6:	4620      	mov	r0, r4
   1c5a8:	bd10      	pop	{r4, pc}
   1c5aa:	f240 2135 	movw	r1, #565	; 0x235
   1c5ae:	2039      	movs	r0, #57	; 0x39
   1c5b0:	f7f4 fa30 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c5b4:	b510      	push	{r4, lr}
   1c5b6:	f7ff fe70 	bl	1c29a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   1c5ba:	2800      	cmp	r0, #0
   1c5bc:	d000      	beq.n	1c5c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x374>
   1c5be:	2001      	movs	r0, #1
   1c5c0:	bd10      	pop	{r4, pc}
   1c5c2:	b570      	push	{r4, r5, r6, lr}
   1c5c4:	4605      	mov	r5, r0
   1c5c6:	f7fe fb0e 	bl	1abe6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1c5ca:	b170      	cbz	r0, 1c5ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
   1c5cc:	4628      	mov	r0, r5
   1c5ce:	f7fe fcd2 	bl	1af76 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1c5d2:	2800      	cmp	r0, #0
   1c5d4:	d008      	beq.n	1c5e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
   1c5d6:	4628      	mov	r0, r5
   1c5d8:	f7fe fcca 	bl	1af70 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   1c5dc:	4604      	mov	r4, r0
   1c5de:	4628      	mov	r0, r5
   1c5e0:	f7fe fca0 	bl	1af24 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   1c5e4:	b118      	cbz	r0, 1c5ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
   1c5e6:	200c      	movs	r0, #12
   1c5e8:	bd70      	pop	{r4, r5, r6, pc}
   1c5ea:	2042      	movs	r0, #66	; 0x42
   1c5ec:	bd70      	pop	{r4, r5, r6, pc}
   1c5ee:	b164      	cbz	r4, 1c60a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   1c5f0:	8820      	ldrh	r0, [r4, #0]
   1c5f2:	f7fd fc13 	bl	19e1c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1c5f6:	8820      	ldrh	r0, [r4, #0]
   1c5f8:	2100      	movs	r1, #0
   1c5fa:	f7f4 fc93 	bl	10f24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1c5fe:	b120      	cbz	r0, 1c60a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   1c600:	f241 41ca 	movw	r1, #5322	; 0x14ca
   1c604:	2039      	movs	r0, #57	; 0x39
   1c606:	f7f4 fa05 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c60a:	2000      	movs	r0, #0
   1c60c:	bd70      	pop	{r4, r5, r6, pc}
   1c60e:	b530      	push	{r4, r5, lr}
   1c610:	f340 0400 	sbfx	r4, r0, #0, #1
   1c614:	f340 0040 	sbfx	r0, r0, #1, #1
   1c618:	1c40      	adds	r0, r0, #1
   1c61a:	9d03      	ldr	r5, [sp, #12]
   1c61c:	1c64      	adds	r4, r4, #1
   1c61e:	d000      	beq.n	1c622 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
   1c620:	b119      	cbz	r1, 1c62a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   1c622:	b100      	cbz	r0, 1c626 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   1c624:	b10a      	cbz	r2, 1c62a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   1c626:	b91c      	cbnz	r4, 1c630 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
   1c628:	e001      	b.n	1c62e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
   1c62a:	2011      	movs	r0, #17
   1c62c:	bd30      	pop	{r4, r5, pc}
   1c62e:	2100      	movs	r1, #0
   1c630:	7019      	strb	r1, [r3, #0]
   1c632:	b900      	cbnz	r0, 1c636 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
   1c634:	2200      	movs	r2, #0
   1c636:	702a      	strb	r2, [r5, #0]
   1c638:	2000      	movs	r0, #0
   1c63a:	bd30      	pop	{r4, r5, pc}
   1c63c:	b2c0      	uxtb	r0, r0
   1c63e:	06c1      	lsls	r1, r0, #27
   1c640:	d40c      	bmi.n	1c65c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
   1c642:	0681      	lsls	r1, r0, #26
   1c644:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   1c648:	d503      	bpl.n	1c652 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
   1c64a:	b9d1      	cbnz	r1, 1c682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c64c:	0781      	lsls	r1, r0, #30
   1c64e:	d418      	bmi.n	1c682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c650:	e001      	b.n	1c656 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
   1c652:	2900      	cmp	r1, #0
   1c654:	d1fa      	bne.n	1c64c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
   1c656:	0700      	lsls	r0, r0, #28
   1c658:	d413      	bmi.n	1c682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c65a:	e010      	b.n	1c67e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   1c65c:	0641      	lsls	r1, r0, #25
   1c65e:	d410      	bmi.n	1c682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c660:	0681      	lsls	r1, r0, #26
   1c662:	d40e      	bmi.n	1c682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c664:	07c1      	lsls	r1, r0, #31
   1c666:	ea4f 7180 	mov.w	r1, r0, lsl #30
   1c66a:	d004      	beq.n	1c676 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   1c66c:	2900      	cmp	r1, #0
   1c66e:	db02      	blt.n	1c676 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   1c670:	0740      	lsls	r0, r0, #29
   1c672:	d404      	bmi.n	1c67e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   1c674:	e005      	b.n	1c682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c676:	0701      	lsls	r1, r0, #28
   1c678:	d403      	bmi.n	1c682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c67a:	0740      	lsls	r0, r0, #29
   1c67c:	d401      	bmi.n	1c682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c67e:	2001      	movs	r0, #1
   1c680:	4770      	bx	lr
   1c682:	2000      	movs	r0, #0
   1c684:	4770      	bx	lr
   1c686:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1c688:	4669      	mov	r1, sp
   1c68a:	2001      	movs	r0, #1
   1c68c:	f7fd fa48 	bl	19b20 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1c690:	b178      	cbz	r0, 1c6b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   1c692:	f240 116d 	movw	r1, #365	; 0x16d
   1c696:	2039      	movs	r0, #57	; 0x39
   1c698:	f7f4 f9bc 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c69c:	9c02      	ldr	r4, [sp, #8]
   1c69e:	4620      	mov	r0, r4
   1c6a0:	f7fe fc69 	bl	1af76 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1c6a4:	b128      	cbz	r0, 1c6b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   1c6a6:	4620      	mov	r0, r4
   1c6a8:	f7fe facb 	bl	1ac42 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   1c6ac:	b108      	cbz	r0, 1c6b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   1c6ae:	2001      	movs	r0, #1
   1c6b0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1c6b2:	4668      	mov	r0, sp
   1c6b4:	f7f4 fbe6 	bl	10e84 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1c6b8:	2800      	cmp	r0, #0
   1c6ba:	d0ef      	beq.n	1c69c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
   1c6bc:	2000      	movs	r0, #0
   1c6be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001c6c0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   1c6c0:	6802      	ldr	r2, [r0, #0]
   1c6c2:	b912      	cbnz	r2, 1c6ca <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   1c6c4:	6001      	str	r1, [r0, #0]
   1c6c6:	4770      	bx	lr
   1c6c8:	4602      	mov	r2, r0
   1c6ca:	6850      	ldr	r0, [r2, #4]
   1c6cc:	b108      	cbz	r0, 1c6d2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   1c6ce:	428a      	cmp	r2, r1
   1c6d0:	d1fa      	bne.n	1c6c8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   1c6d2:	428a      	cmp	r2, r1
   1c6d4:	d0f7      	beq.n	1c6c6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   1c6d6:	6051      	str	r1, [r2, #4]
   1c6d8:	4770      	bx	lr
   1c6da:	b510      	push	{r4, lr}
   1c6dc:	f7fe fc4e 	bl	1af7c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   1c6e0:	b108      	cbz	r0, 1c6e6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   1c6e2:	21d9      	movs	r1, #217	; 0xd9
   1c6e4:	e003      	b.n	1c6ee <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
   1c6e6:	f7f6 fe59 	bl	1339c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1c6ea:	b118      	cbz	r0, 1c6f4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
   1c6ec:	21de      	movs	r1, #222	; 0xde
   1c6ee:	2001      	movs	r0, #1
   1c6f0:	f7f4 f990 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c6f8:	2001      	movs	r0, #1
   1c6fa:	f7f4 bb59 	b.w	10db0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1c6fe:	b510      	push	{r4, lr}
   1c700:	4604      	mov	r4, r0
   1c702:	e002      	b.n	1c70a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
   1c704:	6820      	ldr	r0, [r4, #0]
   1c706:	4780      	blx	r0
   1c708:	6864      	ldr	r4, [r4, #4]
   1c70a:	2c00      	cmp	r4, #0
   1c70c:	d1fa      	bne.n	1c704 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
   1c70e:	bd10      	pop	{r4, pc}
   1c710:	b510      	push	{r4, lr}
   1c712:	2000      	movs	r0, #0
   1c714:	f7f4 fb4c 	bl	10db0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1c718:	f7f4 fd82 	bl	11220 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1c71c:	f7f5 f85a 	bl	117d4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1c720:	f7f5 fa48 	bl	11bb4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   1c724:	2800      	cmp	r0, #0
   1c726:	d003      	beq.n	1c730 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
   1c728:	21b8      	movs	r1, #184	; 0xb8
   1c72a:	2001      	movs	r0, #1
   1c72c:	f7f4 f972 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c730:	bd10      	pop	{r4, pc}
   1c732:	b510      	push	{r4, lr}
   1c734:	f7ff ffd1 	bl	1c6da <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
   1c738:	f7fe ffef 	bl	1b71a <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   1c73c:	2800      	cmp	r0, #0
   1c73e:	d003      	beq.n	1c748 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
   1c740:	21f5      	movs	r1, #245	; 0xf5
   1c742:	2001      	movs	r0, #1
   1c744:	f7f4 f966 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c748:	bd10      	pop	{r4, pc}

0001c74a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   1c74a:	f7f3 bdbf 	b.w	102cc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   1c74e:	0001      	.short	0x0001
   1c750:	0002000b 	.word	0x0002000b
   1c754:	0005000a 	.word	0x0005000a
   1c758:	000a0009 	.word	0x000a0009
   1c75c:	00140008 	.word	0x00140008
   1c760:	001e0007 	.word	0x001e0007
   1c764:	00320006 	.word	0x00320006
   1c768:	004b0005 	.word	0x004b0005
   1c76c:	00640004 	.word	0x00640004
   1c770:	00960003 	.word	0x00960003
   1c774:	00fa0002 	.word	0x00fa0002
   1c778:	01f40001 	.word	0x01f40001
	...

0001c77e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1c77e:	b510      	push	{r4, lr}
   1c780:	f7fb f87a 	bl	17878 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   1c784:	f000 f850 	bl	1c828 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1c788:	f7fa fcf0 	bl	1716c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1c78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c790:	f7fa bdee 	b.w	17370 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001c794 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1c794:	b510      	push	{r4, lr}
   1c796:	24c8      	movs	r4, #200	; 0xc8
   1c798:	1e64      	subs	r4, r4, #1
   1c79a:	b2e4      	uxtb	r4, r4
   1c79c:	f7fa fd04 	bl	171a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   1c7a0:	2802      	cmp	r0, #2
   1c7a2:	d003      	beq.n	1c7ac <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   1c7a4:	2801      	cmp	r0, #1
   1c7a6:	d000      	beq.n	1c7aa <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   1c7a8:	2000      	movs	r0, #0
   1c7aa:	bd10      	pop	{r4, pc}
   1c7ac:	2c00      	cmp	r4, #0
   1c7ae:	d1f3      	bne.n	1c798 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   1c7b0:	2193      	movs	r1, #147	; 0x93
   1c7b2:	203b      	movs	r0, #59	; 0x3b
   1c7b4:	f7f4 f92e 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001c7b8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   1c7b8:	b510      	push	{r4, lr}
   1c7ba:	f7f3 fff5 	bl	107a8 <mpsl_fem_lna_configuration_clear>
   1c7be:	2800      	cmp	r0, #0
   1c7c0:	d005      	beq.n	1c7ce <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   1c7c2:	1c40      	adds	r0, r0, #1
   1c7c4:	d003      	beq.n	1c7ce <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   1c7c6:	2150      	movs	r1, #80	; 0x50
   1c7c8:	2040      	movs	r0, #64	; 0x40
   1c7ca:	f7f4 f923 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c7ce:	bd10      	pop	{r4, pc}

0001c7d0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   1c7d0:	b510      	push	{r4, lr}
   1c7d2:	f7f3 fff5 	bl	107c0 <mpsl_fem_pa_configuration_clear>
   1c7d6:	2800      	cmp	r0, #0
   1c7d8:	d005      	beq.n	1c7e6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1c7da:	1c40      	adds	r0, r0, #1
   1c7dc:	d003      	beq.n	1c7e6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1c7de:	2149      	movs	r1, #73	; 0x49
   1c7e0:	2040      	movs	r0, #64	; 0x40
   1c7e2:	f7f4 f917 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c7e6:	bd10      	pop	{r4, pc}

0001c7e8 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   1c7e8:	b510      	push	{r4, lr}
   1c7ea:	f7f3 ffd7 	bl	1079c <mpsl_fem_disable>
   1c7ee:	2800      	cmp	r0, #0
   1c7f0:	d005      	beq.n	1c7fe <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   1c7f2:	1c40      	adds	r0, r0, #1
   1c7f4:	d003      	beq.n	1c7fe <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   1c7f6:	2157      	movs	r1, #87	; 0x57
   1c7f8:	2040      	movs	r0, #64	; 0x40
   1c7fa:	f7f4 f90b 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c7fe:	bd10      	pop	{r4, pc}

0001c800 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   1c800:	b510      	push	{r4, lr}
   1c802:	2100      	movs	r1, #0
   1c804:	4608      	mov	r0, r1
   1c806:	f7f3 ffd5 	bl	107b4 <mpsl_fem_lna_configuration_set>
   1c80a:	b108      	cbz	r0, 1c810 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   1c80c:	2000      	movs	r0, #0
   1c80e:	bd10      	pop	{r4, pc}
   1c810:	2001      	movs	r0, #1
   1c812:	bd10      	pop	{r4, pc}

0001c814 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   1c814:	b508      	push	{r3, lr}
   1c816:	4668      	mov	r0, sp
   1c818:	f7f3 ffde 	bl	107d8 <mpsl_fem_pa_is_configured>
   1c81c:	f89d 0000 	ldrb.w	r0, [sp]
   1c820:	2800      	cmp	r0, #0
   1c822:	d000      	beq.n	1c826 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   1c824:	2001      	movs	r0, #1
   1c826:	bd08      	pop	{r3, pc}

0001c828 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1c828:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1c82c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1c830:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1c834:	f3bf 8f4f 	dsb	sy
   1c838:	f3bf 8f6f 	isb	sy
   1c83c:	f7fa be72 	b.w	17524 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   1c840:	2800      	cmp	r0, #0
   1c842:	db09      	blt.n	1c858 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1c844:	f000 021f 	and.w	r2, r0, #31
   1c848:	2101      	movs	r1, #1
   1c84a:	4091      	lsls	r1, r2
   1c84c:	0940      	lsrs	r0, r0, #5
   1c84e:	0080      	lsls	r0, r0, #2
   1c850:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1c854:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1c858:	4770      	bx	lr
   1c85a:	2800      	cmp	r0, #0
   1c85c:	db0d      	blt.n	1c87a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   1c85e:	f000 021f 	and.w	r2, r0, #31
   1c862:	2101      	movs	r1, #1
   1c864:	4091      	lsls	r1, r2
   1c866:	0940      	lsrs	r0, r0, #5
   1c868:	0080      	lsls	r0, r0, #2
   1c86a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1c86e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1c872:	f3bf 8f4f 	dsb	sy
   1c876:	f3bf 8f6f 	isb	sy
   1c87a:	4770      	bx	lr

0001c87c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   1c87c:	b510      	push	{r4, lr}
   1c87e:	2801      	cmp	r0, #1
   1c880:	d006      	beq.n	1c890 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   1c882:	2802      	cmp	r0, #2
   1c884:	d006      	beq.n	1c894 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   1c886:	f640 3141 	movw	r1, #2881	; 0xb41
   1c88a:	203e      	movs	r0, #62	; 0x3e
   1c88c:	f7f4 f8c2 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c890:	2028      	movs	r0, #40	; 0x28
   1c892:	bd10      	pop	{r4, pc}
   1c894:	2018      	movs	r0, #24
   1c896:	bd10      	pop	{r4, pc}

0001c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   1c898:	b510      	push	{r4, lr}
   1c89a:	2801      	cmp	r0, #1
   1c89c:	d006      	beq.n	1c8ac <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   1c89e:	2802      	cmp	r0, #2
   1c8a0:	d007      	beq.n	1c8b2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   1c8a2:	f640 3155 	movw	r1, #2901	; 0xb55
   1c8a6:	203e      	movs	r0, #62	; 0x3e
   1c8a8:	f7f4 f8b4 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c8ac:	f641 6014 	movw	r0, #7700	; 0x1e14
   1c8b0:	bd10      	pop	{r4, pc}
   1c8b2:	f241 1030 	movw	r0, #4400	; 0x1130
   1c8b6:	bd10      	pop	{r4, pc}

0001c8b8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   1c8b8:	f7fb bd36 	b.w	18328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   1c8bc:	b510      	push	{r4, lr}
   1c8be:	460a      	mov	r2, r1
   1c8c0:	b130      	cbz	r0, 1c8d0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   1c8c2:	2801      	cmp	r0, #1
   1c8c4:	d00b      	beq.n	1c8de <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   1c8c6:	f240 6114 	movw	r1, #1556	; 0x614
   1c8ca:	203e      	movs	r0, #62	; 0x3e
   1c8cc:	f7f4 f8a2 	bl	10a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c8d4:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1c8d8:	4610      	mov	r0, r2
   1c8da:	f7fa bcb9 	b.w	17250 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   1c8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c8e2:	f102 0129 	add.w	r1, r2, #41	; 0x29
   1c8e6:	4610      	mov	r0, r2
   1c8e8:	f7fa bc9c 	b.w	17224 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
   1c8ec:	5840      	ldr	r0, [r0, r1]
   1c8ee:	2800      	cmp	r0, #0
   1c8f0:	d000      	beq.n	1c8f4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
   1c8f2:	2001      	movs	r0, #1
   1c8f4:	4770      	bx	lr
   1c8f6:	5840      	ldr	r0, [r0, r1]
   1c8f8:	2800      	cmp	r0, #0
   1c8fa:	d000      	beq.n	1c8fe <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
   1c8fc:	2001      	movs	r0, #1
   1c8fe:	4770      	bx	lr

0001c900 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   1c900:	b570      	push	{r4, r5, r6, lr}
   1c902:	4605      	mov	r5, r0
   1c904:	4614      	mov	r4, r2
   1c906:	4608      	mov	r0, r1
   1c908:	f7ff ffc6 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1c90c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   1c910:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   1c914:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   1c918:	4620      	mov	r0, r4
   1c91a:	f7ff ffbd 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1c91e:	4428      	add	r0, r5
   1c920:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1c924:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   1c928:	fbb0 f5f1 	udiv	r5, r0, r1
   1c92c:	4620      	mov	r0, r4
   1c92e:	f7ff ffa5 	bl	1c87c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1c932:	4428      	add	r0, r5
   1c934:	1d40      	adds	r0, r0, #5
   1c936:	bd70      	pop	{r4, r5, r6, pc}

0001c938 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   1c938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c93c:	4607      	mov	r7, r0
   1c93e:	461d      	mov	r5, r3
   1c940:	460e      	mov	r6, r1
   1c942:	4614      	mov	r4, r2
   1c944:	4610      	mov	r0, r2
   1c946:	f7ff ffa7 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1c94a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   1c94e:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   1c952:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1c956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1c95a:	2e02      	cmp	r6, #2
   1c95c:	d00e      	beq.n	1c97c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   1c95e:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1c962:	4411      	add	r1, r2
   1c964:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   1c968:	fbb1 f6f0 	udiv	r6, r1, r0
   1c96c:	4620      	mov	r0, r4
   1c96e:	f7ff ff85 	bl	1c87c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1c972:	4430      	add	r0, r6
   1c974:	4428      	add	r0, r5
   1c976:	1d40      	adds	r0, r0, #5
   1c978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c97c:	4602      	mov	r2, r0
   1c97e:	e7f0      	b.n	1c962 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0001c980 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1c980:	b510      	push	{r4, lr}
   1c982:	4604      	mov	r4, r0
   1c984:	4608      	mov	r0, r1
   1c986:	f7ff ff87 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1c98a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1c98e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1c992:	fbb0 f0f1 	udiv	r0, r0, r1
   1c996:	1a20      	subs	r0, r4, r0
   1c998:	1e80      	subs	r0, r0, #2
   1c99a:	bd10      	pop	{r4, pc}

0001c99c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1c99c:	b510      	push	{r4, lr}
   1c99e:	4604      	mov	r4, r0
   1c9a0:	4608      	mov	r0, r1
   1c9a2:	f7ff ff79 	bl	1c898 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1c9a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1c9aa:	fbb0 f0f1 	udiv	r0, r0, r1
   1c9ae:	1a20      	subs	r0, r4, r0
   1c9b0:	bd10      	pop	{r4, pc}

0001c9b2 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   1c9b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c9b6:	2902      	cmp	r1, #2
   1c9b8:	d008      	beq.n	1c9cc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   1c9ba:	f240 51dc 	movw	r1, #1500	; 0x5dc
   1c9be:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   1c9c2:	fbb1 f1f2 	udiv	r1, r1, r2
   1c9c6:	4408      	add	r0, r1
   1c9c8:	1e80      	subs	r0, r0, #2
   1c9ca:	4770      	bx	lr
   1c9cc:	4611      	mov	r1, r2
   1c9ce:	e7f6      	b.n	1c9be <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0001c9d0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   1c9d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c9d4:	2902      	cmp	r1, #2
   1c9d6:	d007      	beq.n	1c9e8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   1c9d8:	f240 51dc 	movw	r1, #1500	; 0x5dc
   1c9dc:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   1c9e0:	fbb1 f1f2 	udiv	r1, r1, r2
   1c9e4:	4408      	add	r0, r1
   1c9e6:	4770      	bx	lr
   1c9e8:	4611      	mov	r1, r2
   1c9ea:	e7f7      	b.n	1c9dc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   1c9ec:	1702080c 	.word	0x1702080c
   1c9f0:	0201010d 	.word	0x0201010d
   1c9f4:	01010909 	.word	0x01010909
   1c9f8:	18090206 	.word	0x18090206
   1c9fc:	01010318 	.word	0x01010318
   1ca00:	03030909 	.word	0x03030909
   1ca04:	00000005 	.word	0x00000005

0001ca08 <_dtoa_r>:
   1ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1ca0e:	b099      	sub	sp, #100	; 0x64
   1ca10:	4616      	mov	r6, r2
   1ca12:	461f      	mov	r7, r3
   1ca14:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1ca18:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
   1ca1c:	4605      	mov	r5, r0
   1ca1e:	b93c      	cbnz	r4, 1ca30 <_dtoa_r+0x28>
   1ca20:	2010      	movs	r0, #16
   1ca22:	f019 f85d 	bl	35ae0 <malloc>
   1ca26:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1ca2a:	6268      	str	r0, [r5, #36]	; 0x24
   1ca2c:	6004      	str	r4, [r0, #0]
   1ca2e:	60c4      	str	r4, [r0, #12]
   1ca30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ca32:	6819      	ldr	r1, [r3, #0]
   1ca34:	b151      	cbz	r1, 1ca4c <_dtoa_r+0x44>
   1ca36:	685a      	ldr	r2, [r3, #4]
   1ca38:	604a      	str	r2, [r1, #4]
   1ca3a:	2301      	movs	r3, #1
   1ca3c:	4093      	lsls	r3, r2
   1ca3e:	608b      	str	r3, [r1, #8]
   1ca40:	4628      	mov	r0, r5
   1ca42:	f01e f822 	bl	3aa8a <_Bfree>
   1ca46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ca48:	2200      	movs	r2, #0
   1ca4a:	601a      	str	r2, [r3, #0]
   1ca4c:	1e3b      	subs	r3, r7, #0
   1ca4e:	bfb9      	ittee	lt
   1ca50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1ca54:	9305      	strlt	r3, [sp, #20]
   1ca56:	2300      	movge	r3, #0
   1ca58:	f8c8 3000 	strge.w	r3, [r8]
   1ca5c:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1ca60:	4ba7      	ldr	r3, [pc, #668]	; (1cd00 <_dtoa_r+0x2f8>)
   1ca62:	bfbc      	itt	lt
   1ca64:	2201      	movlt	r2, #1
   1ca66:	f8c8 2000 	strlt.w	r2, [r8]
   1ca6a:	ea33 0309 	bics.w	r3, r3, r9
   1ca6e:	d119      	bne.n	1caa4 <_dtoa_r+0x9c>
   1ca70:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1ca72:	f242 730f 	movw	r3, #9999	; 0x270f
   1ca76:	6013      	str	r3, [r2, #0]
   1ca78:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1ca7c:	4333      	orrs	r3, r6
   1ca7e:	f000 856d 	beq.w	1d55c <_dtoa_r+0xb54>
   1ca82:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1ca84:	b953      	cbnz	r3, 1ca9c <_dtoa_r+0x94>
   1ca86:	4b9f      	ldr	r3, [pc, #636]	; (1cd04 <_dtoa_r+0x2fc>)
   1ca88:	e023      	b.n	1cad2 <_dtoa_r+0xca>
   1ca8a:	4b9f      	ldr	r3, [pc, #636]	; (1cd08 <_dtoa_r+0x300>)
   1ca8c:	9303      	str	r3, [sp, #12]
   1ca8e:	3308      	adds	r3, #8
   1ca90:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1ca92:	6013      	str	r3, [r2, #0]
   1ca94:	9803      	ldr	r0, [sp, #12]
   1ca96:	b019      	add	sp, #100	; 0x64
   1ca98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca9c:	4b99      	ldr	r3, [pc, #612]	; (1cd04 <_dtoa_r+0x2fc>)
   1ca9e:	9303      	str	r3, [sp, #12]
   1caa0:	3303      	adds	r3, #3
   1caa2:	e7f5      	b.n	1ca90 <_dtoa_r+0x88>
   1caa4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1caa8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   1caac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1cab0:	2200      	movs	r2, #0
   1cab2:	2300      	movs	r3, #0
   1cab4:	f7f0 fa12 	bl	cedc <__aeabi_dcmpeq>
   1cab8:	4680      	mov	r8, r0
   1caba:	b160      	cbz	r0, 1cad6 <_dtoa_r+0xce>
   1cabc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1cabe:	2301      	movs	r3, #1
   1cac0:	6013      	str	r3, [r2, #0]
   1cac2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1cac4:	2b00      	cmp	r3, #0
   1cac6:	f000 8546 	beq.w	1d556 <_dtoa_r+0xb4e>
   1caca:	4b90      	ldr	r3, [pc, #576]	; (1cd0c <_dtoa_r+0x304>)
   1cacc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1cace:	6013      	str	r3, [r2, #0]
   1cad0:	3b01      	subs	r3, #1
   1cad2:	9303      	str	r3, [sp, #12]
   1cad4:	e7de      	b.n	1ca94 <_dtoa_r+0x8c>
   1cad6:	ab16      	add	r3, sp, #88	; 0x58
   1cad8:	9301      	str	r3, [sp, #4]
   1cada:	ab17      	add	r3, sp, #92	; 0x5c
   1cadc:	9300      	str	r3, [sp, #0]
   1cade:	4628      	mov	r0, r5
   1cae0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   1cae4:	f01e fa09 	bl	3aefa <__d2b>
   1cae8:	f3c9 540a 	ubfx	r4, r9, #20, #11
   1caec:	4683      	mov	fp, r0
   1caee:	2c00      	cmp	r4, #0
   1caf0:	d07e      	beq.n	1cbf0 <_dtoa_r+0x1e8>
   1caf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1caf4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   1caf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1cafc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1cb00:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   1cb04:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   1cb08:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
   1cb0c:	4b80      	ldr	r3, [pc, #512]	; (1cd10 <_dtoa_r+0x308>)
   1cb0e:	2200      	movs	r2, #0
   1cb10:	f7ef fc4a 	bl	c3a8 <__aeabi_dsub>
   1cb14:	a374      	add	r3, pc, #464	; (adr r3, 1cce8 <_dtoa_r+0x2e0>)
   1cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cb1a:	f7ef fdfd 	bl	c718 <__aeabi_dmul>
   1cb1e:	a374      	add	r3, pc, #464	; (adr r3, 1ccf0 <_dtoa_r+0x2e8>)
   1cb20:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cb24:	f7ef fc42 	bl	c3ac <__adddf3>
   1cb28:	4606      	mov	r6, r0
   1cb2a:	4620      	mov	r0, r4
   1cb2c:	460f      	mov	r7, r1
   1cb2e:	f7ef fd89 	bl	c644 <__aeabi_i2d>
   1cb32:	a371      	add	r3, pc, #452	; (adr r3, 1ccf8 <_dtoa_r+0x2f0>)
   1cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cb38:	f7ef fdee 	bl	c718 <__aeabi_dmul>
   1cb3c:	4602      	mov	r2, r0
   1cb3e:	460b      	mov	r3, r1
   1cb40:	4630      	mov	r0, r6
   1cb42:	4639      	mov	r1, r7
   1cb44:	f7ef fc32 	bl	c3ac <__adddf3>
   1cb48:	4606      	mov	r6, r0
   1cb4a:	460f      	mov	r7, r1
   1cb4c:	f7f0 fa0e 	bl	cf6c <__aeabi_d2iz>
   1cb50:	2200      	movs	r2, #0
   1cb52:	4682      	mov	sl, r0
   1cb54:	2300      	movs	r3, #0
   1cb56:	4630      	mov	r0, r6
   1cb58:	4639      	mov	r1, r7
   1cb5a:	f7f0 f9c9 	bl	cef0 <__aeabi_dcmplt>
   1cb5e:	b148      	cbz	r0, 1cb74 <_dtoa_r+0x16c>
   1cb60:	4650      	mov	r0, sl
   1cb62:	f7ef fd6f 	bl	c644 <__aeabi_i2d>
   1cb66:	4632      	mov	r2, r6
   1cb68:	463b      	mov	r3, r7
   1cb6a:	f7f0 f9b7 	bl	cedc <__aeabi_dcmpeq>
   1cb6e:	b908      	cbnz	r0, 1cb74 <_dtoa_r+0x16c>
   1cb70:	f10a 3aff 	add.w	sl, sl, #4294967295
   1cb74:	f1ba 0f16 	cmp.w	sl, #22
   1cb78:	d857      	bhi.n	1cc2a <_dtoa_r+0x222>
   1cb7a:	4b66      	ldr	r3, [pc, #408]	; (1cd14 <_dtoa_r+0x30c>)
   1cb7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cb84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1cb88:	f7f0 f9b2 	bl	cef0 <__aeabi_dcmplt>
   1cb8c:	2800      	cmp	r0, #0
   1cb8e:	d04e      	beq.n	1cc2e <_dtoa_r+0x226>
   1cb90:	f10a 3aff 	add.w	sl, sl, #4294967295
   1cb94:	2300      	movs	r3, #0
   1cb96:	930f      	str	r3, [sp, #60]	; 0x3c
   1cb98:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1cb9a:	1b1c      	subs	r4, r3, r4
   1cb9c:	1e63      	subs	r3, r4, #1
   1cb9e:	9309      	str	r3, [sp, #36]	; 0x24
   1cba0:	bf45      	ittet	mi
   1cba2:	f1c4 0301 	rsbmi	r3, r4, #1
   1cba6:	9306      	strmi	r3, [sp, #24]
   1cba8:	2300      	movpl	r3, #0
   1cbaa:	2300      	movmi	r3, #0
   1cbac:	bf4c      	ite	mi
   1cbae:	9309      	strmi	r3, [sp, #36]	; 0x24
   1cbb0:	9306      	strpl	r3, [sp, #24]
   1cbb2:	f1ba 0f00 	cmp.w	sl, #0
   1cbb6:	db3c      	blt.n	1cc32 <_dtoa_r+0x22a>
   1cbb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cbba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   1cbbe:	4453      	add	r3, sl
   1cbc0:	9309      	str	r3, [sp, #36]	; 0x24
   1cbc2:	2300      	movs	r3, #0
   1cbc4:	930a      	str	r3, [sp, #40]	; 0x28
   1cbc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cbc8:	2b09      	cmp	r3, #9
   1cbca:	f200 80b5 	bhi.w	1cd38 <_dtoa_r+0x330>
   1cbce:	2b05      	cmp	r3, #5
   1cbd0:	bfc4      	itt	gt
   1cbd2:	3b04      	subgt	r3, #4
   1cbd4:	9322      	strgt	r3, [sp, #136]	; 0x88
   1cbd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cbd8:	f1a3 0302 	sub.w	r3, r3, #2
   1cbdc:	bfcc      	ite	gt
   1cbde:	2400      	movgt	r4, #0
   1cbe0:	2401      	movle	r4, #1
   1cbe2:	2b03      	cmp	r3, #3
   1cbe4:	f200 80b4 	bhi.w	1cd50 <_dtoa_r+0x348>
   1cbe8:	e8df f003 	tbb	[pc, r3]
   1cbec:	a47a982d 	.word	0xa47a982d
   1cbf0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
   1cbf4:	441c      	add	r4, r3
   1cbf6:	f204 4332 	addw	r3, r4, #1074	; 0x432
   1cbfa:	2b20      	cmp	r3, #32
   1cbfc:	bfc3      	ittte	gt
   1cbfe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   1cc02:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
   1cc06:	fa09 f303 	lslgt.w	r3, r9, r3
   1cc0a:	f1c3 0320 	rsble	r3, r3, #32
   1cc0e:	bfc6      	itte	gt
   1cc10:	fa26 f000 	lsrgt.w	r0, r6, r0
   1cc14:	4318      	orrgt	r0, r3
   1cc16:	fa06 f003 	lslle.w	r0, r6, r3
   1cc1a:	f7ef fd03 	bl	c624 <__aeabi_ui2d>
   1cc1e:	2301      	movs	r3, #1
   1cc20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   1cc24:	3c01      	subs	r4, #1
   1cc26:	9313      	str	r3, [sp, #76]	; 0x4c
   1cc28:	e770      	b.n	1cb0c <_dtoa_r+0x104>
   1cc2a:	2301      	movs	r3, #1
   1cc2c:	e7b3      	b.n	1cb96 <_dtoa_r+0x18e>
   1cc2e:	900f      	str	r0, [sp, #60]	; 0x3c
   1cc30:	e7b2      	b.n	1cb98 <_dtoa_r+0x190>
   1cc32:	9b06      	ldr	r3, [sp, #24]
   1cc34:	eba3 030a 	sub.w	r3, r3, sl
   1cc38:	9306      	str	r3, [sp, #24]
   1cc3a:	f1ca 0300 	rsb	r3, sl, #0
   1cc3e:	930a      	str	r3, [sp, #40]	; 0x28
   1cc40:	2300      	movs	r3, #0
   1cc42:	930e      	str	r3, [sp, #56]	; 0x38
   1cc44:	e7bf      	b.n	1cbc6 <_dtoa_r+0x1be>
   1cc46:	2300      	movs	r3, #0
   1cc48:	930b      	str	r3, [sp, #44]	; 0x2c
   1cc4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1cc4c:	2b00      	cmp	r3, #0
   1cc4e:	f300 8082 	bgt.w	1cd56 <_dtoa_r+0x34e>
   1cc52:	f04f 0901 	mov.w	r9, #1
   1cc56:	f8cd 9020 	str.w	r9, [sp, #32]
   1cc5a:	464b      	mov	r3, r9
   1cc5c:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1cc60:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   1cc62:	2200      	movs	r2, #0
   1cc64:	6072      	str	r2, [r6, #4]
   1cc66:	2204      	movs	r2, #4
   1cc68:	f102 0014 	add.w	r0, r2, #20
   1cc6c:	4298      	cmp	r0, r3
   1cc6e:	6871      	ldr	r1, [r6, #4]
   1cc70:	d977      	bls.n	1cd62 <_dtoa_r+0x35a>
   1cc72:	4628      	mov	r0, r5
   1cc74:	f01d fed5 	bl	3aa22 <_Balloc>
   1cc78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1cc7a:	6030      	str	r0, [r6, #0]
   1cc7c:	681b      	ldr	r3, [r3, #0]
   1cc7e:	9303      	str	r3, [sp, #12]
   1cc80:	9b08      	ldr	r3, [sp, #32]
   1cc82:	2b0e      	cmp	r3, #14
   1cc84:	f200 80ee 	bhi.w	1ce64 <_dtoa_r+0x45c>
   1cc88:	2c00      	cmp	r4, #0
   1cc8a:	f000 80eb 	beq.w	1ce64 <_dtoa_r+0x45c>
   1cc8e:	f1ba 0f00 	cmp.w	sl, #0
   1cc92:	dd7a      	ble.n	1cd8a <_dtoa_r+0x382>
   1cc94:	4a1f      	ldr	r2, [pc, #124]	; (1cd14 <_dtoa_r+0x30c>)
   1cc96:	f00a 030f 	and.w	r3, sl, #15
   1cc9a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1cc9e:	e9d3 3400 	ldrd	r3, r4, [r3]
   1cca2:	f41a 7f80 	tst.w	sl, #256	; 0x100
   1cca6:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   1ccaa:	ea4f 142a 	mov.w	r4, sl, asr #4
   1ccae:	d05c      	beq.n	1cd6a <_dtoa_r+0x362>
   1ccb0:	4b19      	ldr	r3, [pc, #100]	; (1cd18 <_dtoa_r+0x310>)
   1ccb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1ccb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1ccba:	f7ef fe57 	bl	c96c <__aeabi_ddiv>
   1ccbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ccc2:	f004 040f 	and.w	r4, r4, #15
   1ccc6:	2703      	movs	r7, #3
   1ccc8:	4e13      	ldr	r6, [pc, #76]	; (1cd18 <_dtoa_r+0x310>)
   1ccca:	2c00      	cmp	r4, #0
   1cccc:	d14f      	bne.n	1cd6e <_dtoa_r+0x366>
   1ccce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1ccd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ccd6:	f7ef fe49 	bl	c96c <__aeabi_ddiv>
   1ccda:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ccde:	e06e      	b.n	1cdbe <_dtoa_r+0x3b6>
   1cce0:	2301      	movs	r3, #1
   1cce2:	e7b1      	b.n	1cc48 <_dtoa_r+0x240>
   1cce4:	f3af 8000 	nop.w
   1cce8:	636f4361 	.word	0x636f4361
   1ccec:	3fd287a7 	.word	0x3fd287a7
   1ccf0:	8b60c8b3 	.word	0x8b60c8b3
   1ccf4:	3fc68a28 	.word	0x3fc68a28
   1ccf8:	509f79fb 	.word	0x509f79fb
   1ccfc:	3fd34413 	.word	0x3fd34413
   1cd00:	7ff00000 	.word	0x7ff00000
   1cd04:	00041c44 	.word	0x00041c44
   1cd08:	00041c3b 	.word	0x00041c3b
   1cd0c:	00041a5b 	.word	0x00041a5b
   1cd10:	3ff80000 	.word	0x3ff80000
   1cd14:	0003b670 	.word	0x0003b670
   1cd18:	0003b648 	.word	0x0003b648
   1cd1c:	2300      	movs	r3, #0
   1cd1e:	930b      	str	r3, [sp, #44]	; 0x2c
   1cd20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1cd22:	eb0a 0903 	add.w	r9, sl, r3
   1cd26:	f109 0301 	add.w	r3, r9, #1
   1cd2a:	2b01      	cmp	r3, #1
   1cd2c:	9308      	str	r3, [sp, #32]
   1cd2e:	bfb8      	it	lt
   1cd30:	2301      	movlt	r3, #1
   1cd32:	e795      	b.n	1cc60 <_dtoa_r+0x258>
   1cd34:	2301      	movs	r3, #1
   1cd36:	e7f2      	b.n	1cd1e <_dtoa_r+0x316>
   1cd38:	2401      	movs	r4, #1
   1cd3a:	2300      	movs	r3, #0
   1cd3c:	9322      	str	r3, [sp, #136]	; 0x88
   1cd3e:	940b      	str	r4, [sp, #44]	; 0x2c
   1cd40:	f04f 39ff 	mov.w	r9, #4294967295
   1cd44:	2200      	movs	r2, #0
   1cd46:	f8cd 9020 	str.w	r9, [sp, #32]
   1cd4a:	2312      	movs	r3, #18
   1cd4c:	9223      	str	r2, [sp, #140]	; 0x8c
   1cd4e:	e787      	b.n	1cc60 <_dtoa_r+0x258>
   1cd50:	2301      	movs	r3, #1
   1cd52:	930b      	str	r3, [sp, #44]	; 0x2c
   1cd54:	e7f4      	b.n	1cd40 <_dtoa_r+0x338>
   1cd56:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
   1cd5a:	f8cd 9020 	str.w	r9, [sp, #32]
   1cd5e:	464b      	mov	r3, r9
   1cd60:	e77e      	b.n	1cc60 <_dtoa_r+0x258>
   1cd62:	3101      	adds	r1, #1
   1cd64:	6071      	str	r1, [r6, #4]
   1cd66:	0052      	lsls	r2, r2, #1
   1cd68:	e77e      	b.n	1cc68 <_dtoa_r+0x260>
   1cd6a:	2702      	movs	r7, #2
   1cd6c:	e7ac      	b.n	1ccc8 <_dtoa_r+0x2c0>
   1cd6e:	07e1      	lsls	r1, r4, #31
   1cd70:	d508      	bpl.n	1cd84 <_dtoa_r+0x37c>
   1cd72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1cd76:	e9d6 2300 	ldrd	r2, r3, [r6]
   1cd7a:	f7ef fccd 	bl	c718 <__aeabi_dmul>
   1cd7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1cd82:	3701      	adds	r7, #1
   1cd84:	1064      	asrs	r4, r4, #1
   1cd86:	3608      	adds	r6, #8
   1cd88:	e79f      	b.n	1ccca <_dtoa_r+0x2c2>
   1cd8a:	f000 80a5 	beq.w	1ced8 <_dtoa_r+0x4d0>
   1cd8e:	f1ca 0400 	rsb	r4, sl, #0
   1cd92:	4ba4      	ldr	r3, [pc, #656]	; (1d024 <_dtoa_r+0x61c>)
   1cd94:	4ea4      	ldr	r6, [pc, #656]	; (1d028 <_dtoa_r+0x620>)
   1cd96:	f004 020f 	and.w	r2, r4, #15
   1cd9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cda2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1cda6:	f7ef fcb7 	bl	c718 <__aeabi_dmul>
   1cdaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1cdae:	1124      	asrs	r4, r4, #4
   1cdb0:	2300      	movs	r3, #0
   1cdb2:	2702      	movs	r7, #2
   1cdb4:	2c00      	cmp	r4, #0
   1cdb6:	f040 8084 	bne.w	1cec2 <_dtoa_r+0x4ba>
   1cdba:	2b00      	cmp	r3, #0
   1cdbc:	d18d      	bne.n	1ccda <_dtoa_r+0x2d2>
   1cdbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1cdc0:	2b00      	cmp	r3, #0
   1cdc2:	f000 808b 	beq.w	1cedc <_dtoa_r+0x4d4>
   1cdc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1cdca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   1cdce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1cdd2:	4b96      	ldr	r3, [pc, #600]	; (1d02c <_dtoa_r+0x624>)
   1cdd4:	2200      	movs	r2, #0
   1cdd6:	f7f0 f88b 	bl	cef0 <__aeabi_dcmplt>
   1cdda:	2800      	cmp	r0, #0
   1cddc:	d07e      	beq.n	1cedc <_dtoa_r+0x4d4>
   1cdde:	9b08      	ldr	r3, [sp, #32]
   1cde0:	2b00      	cmp	r3, #0
   1cde2:	d07b      	beq.n	1cedc <_dtoa_r+0x4d4>
   1cde4:	f1b9 0f00 	cmp.w	r9, #0
   1cde8:	dd38      	ble.n	1ce5c <_dtoa_r+0x454>
   1cdea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1cdee:	4b90      	ldr	r3, [pc, #576]	; (1d030 <_dtoa_r+0x628>)
   1cdf0:	2200      	movs	r2, #0
   1cdf2:	f7ef fc91 	bl	c718 <__aeabi_dmul>
   1cdf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1cdfa:	f10a 38ff 	add.w	r8, sl, #4294967295
   1cdfe:	3701      	adds	r7, #1
   1ce00:	464c      	mov	r4, r9
   1ce02:	4638      	mov	r0, r7
   1ce04:	f7ef fc1e 	bl	c644 <__aeabi_i2d>
   1ce08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ce0c:	f7ef fc84 	bl	c718 <__aeabi_dmul>
   1ce10:	4b88      	ldr	r3, [pc, #544]	; (1d034 <_dtoa_r+0x62c>)
   1ce12:	2200      	movs	r2, #0
   1ce14:	f7ef faca 	bl	c3ac <__adddf3>
   1ce18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   1ce1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1ce20:	9611      	str	r6, [sp, #68]	; 0x44
   1ce22:	2c00      	cmp	r4, #0
   1ce24:	d15d      	bne.n	1cee2 <_dtoa_r+0x4da>
   1ce26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ce2a:	4b83      	ldr	r3, [pc, #524]	; (1d038 <_dtoa_r+0x630>)
   1ce2c:	2200      	movs	r2, #0
   1ce2e:	f7ef fabb 	bl	c3a8 <__aeabi_dsub>
   1ce32:	4602      	mov	r2, r0
   1ce34:	460b      	mov	r3, r1
   1ce36:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ce3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1ce3c:	4633      	mov	r3, r6
   1ce3e:	f7f0 f875 	bl	cf2c <__aeabi_dcmpgt>
   1ce42:	2800      	cmp	r0, #0
   1ce44:	f040 8297 	bne.w	1d376 <_dtoa_r+0x96e>
   1ce48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ce4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1ce4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   1ce52:	f7f0 f84d 	bl	cef0 <__aeabi_dcmplt>
   1ce56:	2800      	cmp	r0, #0
   1ce58:	f040 828b 	bne.w	1d372 <_dtoa_r+0x96a>
   1ce5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   1ce60:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1ce64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ce66:	2b00      	cmp	r3, #0
   1ce68:	f2c0 8151 	blt.w	1d10e <_dtoa_r+0x706>
   1ce6c:	f1ba 0f0e 	cmp.w	sl, #14
   1ce70:	f300 814d 	bgt.w	1d10e <_dtoa_r+0x706>
   1ce74:	4b6b      	ldr	r3, [pc, #428]	; (1d024 <_dtoa_r+0x61c>)
   1ce76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1ce7a:	e9d3 3400 	ldrd	r3, r4, [r3]
   1ce7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
   1ce82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ce84:	2b00      	cmp	r3, #0
   1ce86:	f280 80db 	bge.w	1d040 <_dtoa_r+0x638>
   1ce8a:	9b08      	ldr	r3, [sp, #32]
   1ce8c:	2b00      	cmp	r3, #0
   1ce8e:	f300 80d7 	bgt.w	1d040 <_dtoa_r+0x638>
   1ce92:	f040 826d 	bne.w	1d370 <_dtoa_r+0x968>
   1ce96:	4b68      	ldr	r3, [pc, #416]	; (1d038 <_dtoa_r+0x630>)
   1ce98:	2200      	movs	r2, #0
   1ce9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ce9e:	f7ef fc3b 	bl	c718 <__aeabi_dmul>
   1cea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1cea6:	f7f0 f837 	bl	cf18 <__aeabi_dcmpge>
   1ceaa:	9c08      	ldr	r4, [sp, #32]
   1ceac:	4626      	mov	r6, r4
   1ceae:	2800      	cmp	r0, #0
   1ceb0:	f040 8243 	bne.w	1d33a <_dtoa_r+0x932>
   1ceb4:	9f03      	ldr	r7, [sp, #12]
   1ceb6:	2331      	movs	r3, #49	; 0x31
   1ceb8:	f807 3b01 	strb.w	r3, [r7], #1
   1cebc:	f10a 0a01 	add.w	sl, sl, #1
   1cec0:	e23f      	b.n	1d342 <_dtoa_r+0x93a>
   1cec2:	07e2      	lsls	r2, r4, #31
   1cec4:	d505      	bpl.n	1ced2 <_dtoa_r+0x4ca>
   1cec6:	e9d6 2300 	ldrd	r2, r3, [r6]
   1ceca:	f7ef fc25 	bl	c718 <__aeabi_dmul>
   1cece:	3701      	adds	r7, #1
   1ced0:	2301      	movs	r3, #1
   1ced2:	1064      	asrs	r4, r4, #1
   1ced4:	3608      	adds	r6, #8
   1ced6:	e76d      	b.n	1cdb4 <_dtoa_r+0x3ac>
   1ced8:	2702      	movs	r7, #2
   1ceda:	e770      	b.n	1cdbe <_dtoa_r+0x3b6>
   1cedc:	9c08      	ldr	r4, [sp, #32]
   1cede:	46d0      	mov	r8, sl
   1cee0:	e78f      	b.n	1ce02 <_dtoa_r+0x3fa>
   1cee2:	9903      	ldr	r1, [sp, #12]
   1cee4:	4b4f      	ldr	r3, [pc, #316]	; (1d024 <_dtoa_r+0x61c>)
   1cee6:	4421      	add	r1, r4
   1cee8:	9112      	str	r1, [sp, #72]	; 0x48
   1ceea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ceec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1cef0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   1cef4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1cef8:	2900      	cmp	r1, #0
   1cefa:	d046      	beq.n	1cf8a <_dtoa_r+0x582>
   1cefc:	494f      	ldr	r1, [pc, #316]	; (1d03c <_dtoa_r+0x634>)
   1cefe:	2000      	movs	r0, #0
   1cf00:	f7ef fd34 	bl	c96c <__aeabi_ddiv>
   1cf04:	463b      	mov	r3, r7
   1cf06:	4632      	mov	r2, r6
   1cf08:	f7ef fa4e 	bl	c3a8 <__aeabi_dsub>
   1cf0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1cf10:	9f03      	ldr	r7, [sp, #12]
   1cf12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1cf16:	f7f0 f829 	bl	cf6c <__aeabi_d2iz>
   1cf1a:	4604      	mov	r4, r0
   1cf1c:	f7ef fb92 	bl	c644 <__aeabi_i2d>
   1cf20:	4602      	mov	r2, r0
   1cf22:	460b      	mov	r3, r1
   1cf24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1cf28:	f7ef fa3e 	bl	c3a8 <__aeabi_dsub>
   1cf2c:	3430      	adds	r4, #48	; 0x30
   1cf2e:	4602      	mov	r2, r0
   1cf30:	460b      	mov	r3, r1
   1cf32:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1cf36:	f807 4b01 	strb.w	r4, [r7], #1
   1cf3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1cf3e:	f7ef ffd7 	bl	cef0 <__aeabi_dcmplt>
   1cf42:	2800      	cmp	r0, #0
   1cf44:	d165      	bne.n	1d012 <_dtoa_r+0x60a>
   1cf46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1cf4a:	4938      	ldr	r1, [pc, #224]	; (1d02c <_dtoa_r+0x624>)
   1cf4c:	2000      	movs	r0, #0
   1cf4e:	f7ef fa2b 	bl	c3a8 <__aeabi_dsub>
   1cf52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1cf56:	f7ef ffcb 	bl	cef0 <__aeabi_dcmplt>
   1cf5a:	2800      	cmp	r0, #0
   1cf5c:	f040 80b6 	bne.w	1d0cc <_dtoa_r+0x6c4>
   1cf60:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cf62:	429f      	cmp	r7, r3
   1cf64:	f43f af7a 	beq.w	1ce5c <_dtoa_r+0x454>
   1cf68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1cf6c:	4b30      	ldr	r3, [pc, #192]	; (1d030 <_dtoa_r+0x628>)
   1cf6e:	2200      	movs	r2, #0
   1cf70:	f7ef fbd2 	bl	c718 <__aeabi_dmul>
   1cf74:	4b2e      	ldr	r3, [pc, #184]	; (1d030 <_dtoa_r+0x628>)
   1cf76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1cf7a:	2200      	movs	r2, #0
   1cf7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1cf80:	f7ef fbca 	bl	c718 <__aeabi_dmul>
   1cf84:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1cf88:	e7c3      	b.n	1cf12 <_dtoa_r+0x50a>
   1cf8a:	4630      	mov	r0, r6
   1cf8c:	4639      	mov	r1, r7
   1cf8e:	f7ef fbc3 	bl	c718 <__aeabi_dmul>
   1cf92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1cf96:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cf98:	9c03      	ldr	r4, [sp, #12]
   1cf9a:	9314      	str	r3, [sp, #80]	; 0x50
   1cf9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1cfa0:	f7ef ffe4 	bl	cf6c <__aeabi_d2iz>
   1cfa4:	9015      	str	r0, [sp, #84]	; 0x54
   1cfa6:	f7ef fb4d 	bl	c644 <__aeabi_i2d>
   1cfaa:	4602      	mov	r2, r0
   1cfac:	460b      	mov	r3, r1
   1cfae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1cfb2:	f7ef f9f9 	bl	c3a8 <__aeabi_dsub>
   1cfb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1cfb8:	3330      	adds	r3, #48	; 0x30
   1cfba:	f804 3b01 	strb.w	r3, [r4], #1
   1cfbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cfc0:	429c      	cmp	r4, r3
   1cfc2:	4606      	mov	r6, r0
   1cfc4:	460f      	mov	r7, r1
   1cfc6:	f04f 0200 	mov.w	r2, #0
   1cfca:	d124      	bne.n	1d016 <_dtoa_r+0x60e>
   1cfcc:	4b1b      	ldr	r3, [pc, #108]	; (1d03c <_dtoa_r+0x634>)
   1cfce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1cfd2:	f7ef f9eb 	bl	c3ac <__adddf3>
   1cfd6:	4602      	mov	r2, r0
   1cfd8:	460b      	mov	r3, r1
   1cfda:	4630      	mov	r0, r6
   1cfdc:	4639      	mov	r1, r7
   1cfde:	f7ef ffa5 	bl	cf2c <__aeabi_dcmpgt>
   1cfe2:	2800      	cmp	r0, #0
   1cfe4:	d171      	bne.n	1d0ca <_dtoa_r+0x6c2>
   1cfe6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1cfea:	4914      	ldr	r1, [pc, #80]	; (1d03c <_dtoa_r+0x634>)
   1cfec:	2000      	movs	r0, #0
   1cfee:	f7ef f9db 	bl	c3a8 <__aeabi_dsub>
   1cff2:	4602      	mov	r2, r0
   1cff4:	460b      	mov	r3, r1
   1cff6:	4630      	mov	r0, r6
   1cff8:	4639      	mov	r1, r7
   1cffa:	f7ef ff79 	bl	cef0 <__aeabi_dcmplt>
   1cffe:	2800      	cmp	r0, #0
   1d000:	f43f af2c 	beq.w	1ce5c <_dtoa_r+0x454>
   1d004:	9f14      	ldr	r7, [sp, #80]	; 0x50
   1d006:	1e7b      	subs	r3, r7, #1
   1d008:	9314      	str	r3, [sp, #80]	; 0x50
   1d00a:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   1d00e:	2b30      	cmp	r3, #48	; 0x30
   1d010:	d0f8      	beq.n	1d004 <_dtoa_r+0x5fc>
   1d012:	46c2      	mov	sl, r8
   1d014:	e049      	b.n	1d0aa <_dtoa_r+0x6a2>
   1d016:	4b06      	ldr	r3, [pc, #24]	; (1d030 <_dtoa_r+0x628>)
   1d018:	f7ef fb7e 	bl	c718 <__aeabi_dmul>
   1d01c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1d020:	e7bc      	b.n	1cf9c <_dtoa_r+0x594>
   1d022:	bf00      	nop
   1d024:	0003b670 	.word	0x0003b670
   1d028:	0003b648 	.word	0x0003b648
   1d02c:	3ff00000 	.word	0x3ff00000
   1d030:	40240000 	.word	0x40240000
   1d034:	401c0000 	.word	0x401c0000
   1d038:	40140000 	.word	0x40140000
   1d03c:	3fe00000 	.word	0x3fe00000
   1d040:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1d044:	9f03      	ldr	r7, [sp, #12]
   1d046:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1d04a:	4640      	mov	r0, r8
   1d04c:	4649      	mov	r1, r9
   1d04e:	f7ef fc8d 	bl	c96c <__aeabi_ddiv>
   1d052:	f7ef ff8b 	bl	cf6c <__aeabi_d2iz>
   1d056:	4604      	mov	r4, r0
   1d058:	f7ef faf4 	bl	c644 <__aeabi_i2d>
   1d05c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1d060:	f7ef fb5a 	bl	c718 <__aeabi_dmul>
   1d064:	f104 0630 	add.w	r6, r4, #48	; 0x30
   1d068:	460b      	mov	r3, r1
   1d06a:	4602      	mov	r2, r0
   1d06c:	4649      	mov	r1, r9
   1d06e:	4640      	mov	r0, r8
   1d070:	f7ef f99a 	bl	c3a8 <__aeabi_dsub>
   1d074:	f807 6b01 	strb.w	r6, [r7], #1
   1d078:	9e03      	ldr	r6, [sp, #12]
   1d07a:	9b08      	ldr	r3, [sp, #32]
   1d07c:	1bbe      	subs	r6, r7, r6
   1d07e:	42b3      	cmp	r3, r6
   1d080:	d138      	bne.n	1d0f4 <_dtoa_r+0x6ec>
   1d082:	4602      	mov	r2, r0
   1d084:	460b      	mov	r3, r1
   1d086:	f7ef f991 	bl	c3ac <__adddf3>
   1d08a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1d08e:	4680      	mov	r8, r0
   1d090:	4689      	mov	r9, r1
   1d092:	f7ef ff4b 	bl	cf2c <__aeabi_dcmpgt>
   1d096:	bb58      	cbnz	r0, 1d0f0 <_dtoa_r+0x6e8>
   1d098:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1d09c:	4640      	mov	r0, r8
   1d09e:	4649      	mov	r1, r9
   1d0a0:	f7ef ff1c 	bl	cedc <__aeabi_dcmpeq>
   1d0a4:	b108      	cbz	r0, 1d0aa <_dtoa_r+0x6a2>
   1d0a6:	07e1      	lsls	r1, r4, #31
   1d0a8:	d422      	bmi.n	1d0f0 <_dtoa_r+0x6e8>
   1d0aa:	4628      	mov	r0, r5
   1d0ac:	4659      	mov	r1, fp
   1d0ae:	f01d fcec 	bl	3aa8a <_Bfree>
   1d0b2:	2300      	movs	r3, #0
   1d0b4:	703b      	strb	r3, [r7, #0]
   1d0b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1d0b8:	f10a 0001 	add.w	r0, sl, #1
   1d0bc:	6018      	str	r0, [r3, #0]
   1d0be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1d0c0:	2b00      	cmp	r3, #0
   1d0c2:	f43f ace7 	beq.w	1ca94 <_dtoa_r+0x8c>
   1d0c6:	601f      	str	r7, [r3, #0]
   1d0c8:	e4e4      	b.n	1ca94 <_dtoa_r+0x8c>
   1d0ca:	4627      	mov	r7, r4
   1d0cc:	463b      	mov	r3, r7
   1d0ce:	461f      	mov	r7, r3
   1d0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1d0d4:	2a39      	cmp	r2, #57	; 0x39
   1d0d6:	d107      	bne.n	1d0e8 <_dtoa_r+0x6e0>
   1d0d8:	9a03      	ldr	r2, [sp, #12]
   1d0da:	429a      	cmp	r2, r3
   1d0dc:	d1f7      	bne.n	1d0ce <_dtoa_r+0x6c6>
   1d0de:	9903      	ldr	r1, [sp, #12]
   1d0e0:	2230      	movs	r2, #48	; 0x30
   1d0e2:	f108 0801 	add.w	r8, r8, #1
   1d0e6:	700a      	strb	r2, [r1, #0]
   1d0e8:	781a      	ldrb	r2, [r3, #0]
   1d0ea:	3201      	adds	r2, #1
   1d0ec:	701a      	strb	r2, [r3, #0]
   1d0ee:	e790      	b.n	1d012 <_dtoa_r+0x60a>
   1d0f0:	46d0      	mov	r8, sl
   1d0f2:	e7eb      	b.n	1d0cc <_dtoa_r+0x6c4>
   1d0f4:	4ba1      	ldr	r3, [pc, #644]	; (1d37c <_dtoa_r+0x974>)
   1d0f6:	2200      	movs	r2, #0
   1d0f8:	f7ef fb0e 	bl	c718 <__aeabi_dmul>
   1d0fc:	2200      	movs	r2, #0
   1d0fe:	2300      	movs	r3, #0
   1d100:	4680      	mov	r8, r0
   1d102:	4689      	mov	r9, r1
   1d104:	f7ef feea 	bl	cedc <__aeabi_dcmpeq>
   1d108:	2800      	cmp	r0, #0
   1d10a:	d09c      	beq.n	1d046 <_dtoa_r+0x63e>
   1d10c:	e7cd      	b.n	1d0aa <_dtoa_r+0x6a2>
   1d10e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d110:	2a00      	cmp	r2, #0
   1d112:	f000 80cd 	beq.w	1d2b0 <_dtoa_r+0x8a8>
   1d116:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1d118:	2a01      	cmp	r2, #1
   1d11a:	f300 80af 	bgt.w	1d27c <_dtoa_r+0x874>
   1d11e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1d120:	2a00      	cmp	r2, #0
   1d122:	f000 80a7 	beq.w	1d274 <_dtoa_r+0x86c>
   1d126:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1d12a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1d12c:	9f06      	ldr	r7, [sp, #24]
   1d12e:	9a06      	ldr	r2, [sp, #24]
   1d130:	441a      	add	r2, r3
   1d132:	9206      	str	r2, [sp, #24]
   1d134:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d136:	2101      	movs	r1, #1
   1d138:	441a      	add	r2, r3
   1d13a:	4628      	mov	r0, r5
   1d13c:	9209      	str	r2, [sp, #36]	; 0x24
   1d13e:	f01d fd47 	bl	3abd0 <__i2b>
   1d142:	4606      	mov	r6, r0
   1d144:	2f00      	cmp	r7, #0
   1d146:	dd0c      	ble.n	1d162 <_dtoa_r+0x75a>
   1d148:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d14a:	2b00      	cmp	r3, #0
   1d14c:	dd09      	ble.n	1d162 <_dtoa_r+0x75a>
   1d14e:	42bb      	cmp	r3, r7
   1d150:	9a06      	ldr	r2, [sp, #24]
   1d152:	bfa8      	it	ge
   1d154:	463b      	movge	r3, r7
   1d156:	1ad2      	subs	r2, r2, r3
   1d158:	9206      	str	r2, [sp, #24]
   1d15a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d15c:	1aff      	subs	r7, r7, r3
   1d15e:	1ad3      	subs	r3, r2, r3
   1d160:	9309      	str	r3, [sp, #36]	; 0x24
   1d162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d164:	b1f3      	cbz	r3, 1d1a4 <_dtoa_r+0x79c>
   1d166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d168:	2b00      	cmp	r3, #0
   1d16a:	f000 80a5 	beq.w	1d2b8 <_dtoa_r+0x8b0>
   1d16e:	2c00      	cmp	r4, #0
   1d170:	dd10      	ble.n	1d194 <_dtoa_r+0x78c>
   1d172:	4631      	mov	r1, r6
   1d174:	4622      	mov	r2, r4
   1d176:	4628      	mov	r0, r5
   1d178:	f019 fd0a 	bl	36b90 <__pow5mult>
   1d17c:	465a      	mov	r2, fp
   1d17e:	4601      	mov	r1, r0
   1d180:	4606      	mov	r6, r0
   1d182:	4628      	mov	r0, r5
   1d184:	f01d fd2d 	bl	3abe2 <__multiply>
   1d188:	4659      	mov	r1, fp
   1d18a:	4680      	mov	r8, r0
   1d18c:	4628      	mov	r0, r5
   1d18e:	f01d fc7c 	bl	3aa8a <_Bfree>
   1d192:	46c3      	mov	fp, r8
   1d194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d196:	1b1a      	subs	r2, r3, r4
   1d198:	d004      	beq.n	1d1a4 <_dtoa_r+0x79c>
   1d19a:	4659      	mov	r1, fp
   1d19c:	4628      	mov	r0, r5
   1d19e:	f019 fcf7 	bl	36b90 <__pow5mult>
   1d1a2:	4683      	mov	fp, r0
   1d1a4:	2101      	movs	r1, #1
   1d1a6:	4628      	mov	r0, r5
   1d1a8:	f01d fd12 	bl	3abd0 <__i2b>
   1d1ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d1ae:	2b00      	cmp	r3, #0
   1d1b0:	4604      	mov	r4, r0
   1d1b2:	f340 8083 	ble.w	1d2bc <_dtoa_r+0x8b4>
   1d1b6:	461a      	mov	r2, r3
   1d1b8:	4601      	mov	r1, r0
   1d1ba:	4628      	mov	r0, r5
   1d1bc:	f019 fce8 	bl	36b90 <__pow5mult>
   1d1c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1d1c2:	2b01      	cmp	r3, #1
   1d1c4:	4604      	mov	r4, r0
   1d1c6:	dd7c      	ble.n	1d2c2 <_dtoa_r+0x8ba>
   1d1c8:	f04f 0800 	mov.w	r8, #0
   1d1cc:	6923      	ldr	r3, [r4, #16]
   1d1ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1d1d2:	6918      	ldr	r0, [r3, #16]
   1d1d4:	f01d fcae 	bl	3ab34 <__hi0bits>
   1d1d8:	f1c0 0020 	rsb	r0, r0, #32
   1d1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d1de:	4418      	add	r0, r3
   1d1e0:	f010 001f 	ands.w	r0, r0, #31
   1d1e4:	f000 808e 	beq.w	1d304 <_dtoa_r+0x8fc>
   1d1e8:	f1c0 0320 	rsb	r3, r0, #32
   1d1ec:	2b04      	cmp	r3, #4
   1d1ee:	f340 8087 	ble.w	1d300 <_dtoa_r+0x8f8>
   1d1f2:	f1c0 001c 	rsb	r0, r0, #28
   1d1f6:	9b06      	ldr	r3, [sp, #24]
   1d1f8:	4403      	add	r3, r0
   1d1fa:	9306      	str	r3, [sp, #24]
   1d1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d1fe:	4403      	add	r3, r0
   1d200:	4407      	add	r7, r0
   1d202:	9309      	str	r3, [sp, #36]	; 0x24
   1d204:	9b06      	ldr	r3, [sp, #24]
   1d206:	2b00      	cmp	r3, #0
   1d208:	dd05      	ble.n	1d216 <_dtoa_r+0x80e>
   1d20a:	4659      	mov	r1, fp
   1d20c:	461a      	mov	r2, r3
   1d20e:	4628      	mov	r0, r5
   1d210:	f01d fd83 	bl	3ad1a <__lshift>
   1d214:	4683      	mov	fp, r0
   1d216:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d218:	2b00      	cmp	r3, #0
   1d21a:	dd05      	ble.n	1d228 <_dtoa_r+0x820>
   1d21c:	4621      	mov	r1, r4
   1d21e:	461a      	mov	r2, r3
   1d220:	4628      	mov	r0, r5
   1d222:	f01d fd7a 	bl	3ad1a <__lshift>
   1d226:	4604      	mov	r4, r0
   1d228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d22a:	2b00      	cmp	r3, #0
   1d22c:	d06c      	beq.n	1d308 <_dtoa_r+0x900>
   1d22e:	4621      	mov	r1, r4
   1d230:	4658      	mov	r0, fp
   1d232:	f01d fdd1 	bl	3add8 <__mcmp>
   1d236:	2800      	cmp	r0, #0
   1d238:	da66      	bge.n	1d308 <_dtoa_r+0x900>
   1d23a:	2300      	movs	r3, #0
   1d23c:	4659      	mov	r1, fp
   1d23e:	220a      	movs	r2, #10
   1d240:	4628      	mov	r0, r5
   1d242:	f01d fc39 	bl	3aab8 <__multadd>
   1d246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d248:	f10a 3aff 	add.w	sl, sl, #4294967295
   1d24c:	4683      	mov	fp, r0
   1d24e:	2b00      	cmp	r3, #0
   1d250:	f000 818b 	beq.w	1d56a <_dtoa_r+0xb62>
   1d254:	4631      	mov	r1, r6
   1d256:	2300      	movs	r3, #0
   1d258:	220a      	movs	r2, #10
   1d25a:	4628      	mov	r0, r5
   1d25c:	f01d fc2c 	bl	3aab8 <__multadd>
   1d260:	f1b9 0f00 	cmp.w	r9, #0
   1d264:	4606      	mov	r6, r0
   1d266:	f300 8091 	bgt.w	1d38c <_dtoa_r+0x984>
   1d26a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1d26c:	2b02      	cmp	r3, #2
   1d26e:	f340 808d 	ble.w	1d38c <_dtoa_r+0x984>
   1d272:	e051      	b.n	1d318 <_dtoa_r+0x910>
   1d274:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1d27a:	e756      	b.n	1d12a <_dtoa_r+0x722>
   1d27c:	9b08      	ldr	r3, [sp, #32]
   1d27e:	1e5c      	subs	r4, r3, #1
   1d280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d282:	42a3      	cmp	r3, r4
   1d284:	bfbf      	itttt	lt
   1d286:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
   1d288:	940a      	strlt	r4, [sp, #40]	; 0x28
   1d28a:	1ae2      	sublt	r2, r4, r3
   1d28c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   1d28e:	bfb6      	itet	lt
   1d290:	189b      	addlt	r3, r3, r2
   1d292:	1b1c      	subge	r4, r3, r4
   1d294:	930e      	strlt	r3, [sp, #56]	; 0x38
   1d296:	9b08      	ldr	r3, [sp, #32]
   1d298:	bfb8      	it	lt
   1d29a:	2400      	movlt	r4, #0
   1d29c:	2b00      	cmp	r3, #0
   1d29e:	bfb9      	ittee	lt
   1d2a0:	9b06      	ldrlt	r3, [sp, #24]
   1d2a2:	9a08      	ldrlt	r2, [sp, #32]
   1d2a4:	9f06      	ldrge	r7, [sp, #24]
   1d2a6:	9b08      	ldrge	r3, [sp, #32]
   1d2a8:	bfbc      	itt	lt
   1d2aa:	1a9f      	sublt	r7, r3, r2
   1d2ac:	2300      	movlt	r3, #0
   1d2ae:	e73e      	b.n	1d12e <_dtoa_r+0x726>
   1d2b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1d2b2:	9f06      	ldr	r7, [sp, #24]
   1d2b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1d2b6:	e745      	b.n	1d144 <_dtoa_r+0x73c>
   1d2b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d2ba:	e76e      	b.n	1d19a <_dtoa_r+0x792>
   1d2bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1d2be:	2b01      	cmp	r3, #1
   1d2c0:	dc19      	bgt.n	1d2f6 <_dtoa_r+0x8ee>
   1d2c2:	9b04      	ldr	r3, [sp, #16]
   1d2c4:	b9bb      	cbnz	r3, 1d2f6 <_dtoa_r+0x8ee>
   1d2c6:	9b05      	ldr	r3, [sp, #20]
   1d2c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d2cc:	b99b      	cbnz	r3, 1d2f6 <_dtoa_r+0x8ee>
   1d2ce:	9b05      	ldr	r3, [sp, #20]
   1d2d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1d2d4:	0d1b      	lsrs	r3, r3, #20
   1d2d6:	051b      	lsls	r3, r3, #20
   1d2d8:	b183      	cbz	r3, 1d2fc <_dtoa_r+0x8f4>
   1d2da:	9b06      	ldr	r3, [sp, #24]
   1d2dc:	3301      	adds	r3, #1
   1d2de:	9306      	str	r3, [sp, #24]
   1d2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d2e2:	3301      	adds	r3, #1
   1d2e4:	9309      	str	r3, [sp, #36]	; 0x24
   1d2e6:	f04f 0801 	mov.w	r8, #1
   1d2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d2ec:	2b00      	cmp	r3, #0
   1d2ee:	f47f af6d 	bne.w	1d1cc <_dtoa_r+0x7c4>
   1d2f2:	2001      	movs	r0, #1
   1d2f4:	e772      	b.n	1d1dc <_dtoa_r+0x7d4>
   1d2f6:	f04f 0800 	mov.w	r8, #0
   1d2fa:	e7f6      	b.n	1d2ea <_dtoa_r+0x8e2>
   1d2fc:	4698      	mov	r8, r3
   1d2fe:	e7f4      	b.n	1d2ea <_dtoa_r+0x8e2>
   1d300:	d080      	beq.n	1d204 <_dtoa_r+0x7fc>
   1d302:	4618      	mov	r0, r3
   1d304:	301c      	adds	r0, #28
   1d306:	e776      	b.n	1d1f6 <_dtoa_r+0x7ee>
   1d308:	9b08      	ldr	r3, [sp, #32]
   1d30a:	2b00      	cmp	r3, #0
   1d30c:	dc38      	bgt.n	1d380 <_dtoa_r+0x978>
   1d30e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1d310:	2b02      	cmp	r3, #2
   1d312:	dd35      	ble.n	1d380 <_dtoa_r+0x978>
   1d314:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1d318:	f1b9 0f00 	cmp.w	r9, #0
   1d31c:	d10d      	bne.n	1d33a <_dtoa_r+0x932>
   1d31e:	4621      	mov	r1, r4
   1d320:	464b      	mov	r3, r9
   1d322:	2205      	movs	r2, #5
   1d324:	4628      	mov	r0, r5
   1d326:	f01d fbc7 	bl	3aab8 <__multadd>
   1d32a:	4601      	mov	r1, r0
   1d32c:	4604      	mov	r4, r0
   1d32e:	4658      	mov	r0, fp
   1d330:	f01d fd52 	bl	3add8 <__mcmp>
   1d334:	2800      	cmp	r0, #0
   1d336:	f73f adbd 	bgt.w	1ceb4 <_dtoa_r+0x4ac>
   1d33a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1d33c:	9f03      	ldr	r7, [sp, #12]
   1d33e:	ea6f 0a03 	mvn.w	sl, r3
   1d342:	f04f 0800 	mov.w	r8, #0
   1d346:	4621      	mov	r1, r4
   1d348:	4628      	mov	r0, r5
   1d34a:	f01d fb9e 	bl	3aa8a <_Bfree>
   1d34e:	2e00      	cmp	r6, #0
   1d350:	f43f aeab 	beq.w	1d0aa <_dtoa_r+0x6a2>
   1d354:	f1b8 0f00 	cmp.w	r8, #0
   1d358:	d005      	beq.n	1d366 <_dtoa_r+0x95e>
   1d35a:	45b0      	cmp	r8, r6
   1d35c:	d003      	beq.n	1d366 <_dtoa_r+0x95e>
   1d35e:	4641      	mov	r1, r8
   1d360:	4628      	mov	r0, r5
   1d362:	f01d fb92 	bl	3aa8a <_Bfree>
   1d366:	4631      	mov	r1, r6
   1d368:	4628      	mov	r0, r5
   1d36a:	f01d fb8e 	bl	3aa8a <_Bfree>
   1d36e:	e69c      	b.n	1d0aa <_dtoa_r+0x6a2>
   1d370:	2400      	movs	r4, #0
   1d372:	4626      	mov	r6, r4
   1d374:	e7e1      	b.n	1d33a <_dtoa_r+0x932>
   1d376:	46c2      	mov	sl, r8
   1d378:	4626      	mov	r6, r4
   1d37a:	e59b      	b.n	1ceb4 <_dtoa_r+0x4ac>
   1d37c:	40240000 	.word	0x40240000
   1d380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d382:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1d386:	2b00      	cmp	r3, #0
   1d388:	f000 80f6 	beq.w	1d578 <_dtoa_r+0xb70>
   1d38c:	2f00      	cmp	r7, #0
   1d38e:	dd05      	ble.n	1d39c <_dtoa_r+0x994>
   1d390:	4631      	mov	r1, r6
   1d392:	463a      	mov	r2, r7
   1d394:	4628      	mov	r0, r5
   1d396:	f01d fcc0 	bl	3ad1a <__lshift>
   1d39a:	4606      	mov	r6, r0
   1d39c:	f1b8 0f00 	cmp.w	r8, #0
   1d3a0:	d055      	beq.n	1d44e <_dtoa_r+0xa46>
   1d3a2:	6871      	ldr	r1, [r6, #4]
   1d3a4:	4628      	mov	r0, r5
   1d3a6:	f01d fb3c 	bl	3aa22 <_Balloc>
   1d3aa:	6932      	ldr	r2, [r6, #16]
   1d3ac:	3202      	adds	r2, #2
   1d3ae:	4607      	mov	r7, r0
   1d3b0:	0092      	lsls	r2, r2, #2
   1d3b2:	f106 010c 	add.w	r1, r6, #12
   1d3b6:	300c      	adds	r0, #12
   1d3b8:	f01d f8a3 	bl	3a502 <memcpy>
   1d3bc:	2201      	movs	r2, #1
   1d3be:	4639      	mov	r1, r7
   1d3c0:	4628      	mov	r0, r5
   1d3c2:	f01d fcaa 	bl	3ad1a <__lshift>
   1d3c6:	9b03      	ldr	r3, [sp, #12]
   1d3c8:	3301      	adds	r3, #1
   1d3ca:	9308      	str	r3, [sp, #32]
   1d3cc:	9b03      	ldr	r3, [sp, #12]
   1d3ce:	444b      	add	r3, r9
   1d3d0:	930a      	str	r3, [sp, #40]	; 0x28
   1d3d2:	9b04      	ldr	r3, [sp, #16]
   1d3d4:	f003 0301 	and.w	r3, r3, #1
   1d3d8:	46b0      	mov	r8, r6
   1d3da:	9309      	str	r3, [sp, #36]	; 0x24
   1d3dc:	4606      	mov	r6, r0
   1d3de:	9b08      	ldr	r3, [sp, #32]
   1d3e0:	4621      	mov	r1, r4
   1d3e2:	3b01      	subs	r3, #1
   1d3e4:	4658      	mov	r0, fp
   1d3e6:	9304      	str	r3, [sp, #16]
   1d3e8:	f01d fa37 	bl	3a85a <quorem>
   1d3ec:	4603      	mov	r3, r0
   1d3ee:	3330      	adds	r3, #48	; 0x30
   1d3f0:	9006      	str	r0, [sp, #24]
   1d3f2:	4641      	mov	r1, r8
   1d3f4:	4658      	mov	r0, fp
   1d3f6:	930b      	str	r3, [sp, #44]	; 0x2c
   1d3f8:	f01d fcee 	bl	3add8 <__mcmp>
   1d3fc:	4632      	mov	r2, r6
   1d3fe:	4681      	mov	r9, r0
   1d400:	4621      	mov	r1, r4
   1d402:	4628      	mov	r0, r5
   1d404:	f01d fd03 	bl	3ae0e <__mdiff>
   1d408:	68c2      	ldr	r2, [r0, #12]
   1d40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d40c:	4607      	mov	r7, r0
   1d40e:	bb02      	cbnz	r2, 1d452 <_dtoa_r+0xa4a>
   1d410:	4601      	mov	r1, r0
   1d412:	4658      	mov	r0, fp
   1d414:	f01d fce0 	bl	3add8 <__mcmp>
   1d418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d41a:	4602      	mov	r2, r0
   1d41c:	4639      	mov	r1, r7
   1d41e:	4628      	mov	r0, r5
   1d420:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
   1d424:	f01d fb31 	bl	3aa8a <_Bfree>
   1d428:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1d42a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d42c:	9f08      	ldr	r7, [sp, #32]
   1d42e:	ea43 0102 	orr.w	r1, r3, r2
   1d432:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d434:	430b      	orrs	r3, r1
   1d436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d438:	d10d      	bne.n	1d456 <_dtoa_r+0xa4e>
   1d43a:	2b39      	cmp	r3, #57	; 0x39
   1d43c:	d029      	beq.n	1d492 <_dtoa_r+0xa8a>
   1d43e:	f1b9 0f00 	cmp.w	r9, #0
   1d442:	dd01      	ble.n	1d448 <_dtoa_r+0xa40>
   1d444:	9b06      	ldr	r3, [sp, #24]
   1d446:	3331      	adds	r3, #49	; 0x31
   1d448:	9a04      	ldr	r2, [sp, #16]
   1d44a:	7013      	strb	r3, [r2, #0]
   1d44c:	e77b      	b.n	1d346 <_dtoa_r+0x93e>
   1d44e:	4630      	mov	r0, r6
   1d450:	e7b9      	b.n	1d3c6 <_dtoa_r+0x9be>
   1d452:	2201      	movs	r2, #1
   1d454:	e7e2      	b.n	1d41c <_dtoa_r+0xa14>
   1d456:	f1b9 0f00 	cmp.w	r9, #0
   1d45a:	db06      	blt.n	1d46a <_dtoa_r+0xa62>
   1d45c:	9922      	ldr	r1, [sp, #136]	; 0x88
   1d45e:	ea41 0909 	orr.w	r9, r1, r9
   1d462:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d464:	ea59 0101 	orrs.w	r1, r9, r1
   1d468:	d120      	bne.n	1d4ac <_dtoa_r+0xaa4>
   1d46a:	2a00      	cmp	r2, #0
   1d46c:	ddec      	ble.n	1d448 <_dtoa_r+0xa40>
   1d46e:	4659      	mov	r1, fp
   1d470:	2201      	movs	r2, #1
   1d472:	4628      	mov	r0, r5
   1d474:	9308      	str	r3, [sp, #32]
   1d476:	f01d fc50 	bl	3ad1a <__lshift>
   1d47a:	4621      	mov	r1, r4
   1d47c:	4683      	mov	fp, r0
   1d47e:	f01d fcab 	bl	3add8 <__mcmp>
   1d482:	2800      	cmp	r0, #0
   1d484:	9b08      	ldr	r3, [sp, #32]
   1d486:	dc02      	bgt.n	1d48e <_dtoa_r+0xa86>
   1d488:	d1de      	bne.n	1d448 <_dtoa_r+0xa40>
   1d48a:	07da      	lsls	r2, r3, #31
   1d48c:	d5dc      	bpl.n	1d448 <_dtoa_r+0xa40>
   1d48e:	2b39      	cmp	r3, #57	; 0x39
   1d490:	d1d8      	bne.n	1d444 <_dtoa_r+0xa3c>
   1d492:	9a04      	ldr	r2, [sp, #16]
   1d494:	2339      	movs	r3, #57	; 0x39
   1d496:	7013      	strb	r3, [r2, #0]
   1d498:	463b      	mov	r3, r7
   1d49a:	461f      	mov	r7, r3
   1d49c:	3b01      	subs	r3, #1
   1d49e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   1d4a2:	2a39      	cmp	r2, #57	; 0x39
   1d4a4:	d050      	beq.n	1d548 <_dtoa_r+0xb40>
   1d4a6:	3201      	adds	r2, #1
   1d4a8:	701a      	strb	r2, [r3, #0]
   1d4aa:	e74c      	b.n	1d346 <_dtoa_r+0x93e>
   1d4ac:	2a00      	cmp	r2, #0
   1d4ae:	dd03      	ble.n	1d4b8 <_dtoa_r+0xab0>
   1d4b0:	2b39      	cmp	r3, #57	; 0x39
   1d4b2:	d0ee      	beq.n	1d492 <_dtoa_r+0xa8a>
   1d4b4:	3301      	adds	r3, #1
   1d4b6:	e7c7      	b.n	1d448 <_dtoa_r+0xa40>
   1d4b8:	9a08      	ldr	r2, [sp, #32]
   1d4ba:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d4bc:	f802 3c01 	strb.w	r3, [r2, #-1]
   1d4c0:	428a      	cmp	r2, r1
   1d4c2:	d02a      	beq.n	1d51a <_dtoa_r+0xb12>
   1d4c4:	4659      	mov	r1, fp
   1d4c6:	2300      	movs	r3, #0
   1d4c8:	220a      	movs	r2, #10
   1d4ca:	4628      	mov	r0, r5
   1d4cc:	f01d faf4 	bl	3aab8 <__multadd>
   1d4d0:	45b0      	cmp	r8, r6
   1d4d2:	4683      	mov	fp, r0
   1d4d4:	f04f 0300 	mov.w	r3, #0
   1d4d8:	f04f 020a 	mov.w	r2, #10
   1d4dc:	4641      	mov	r1, r8
   1d4de:	4628      	mov	r0, r5
   1d4e0:	d107      	bne.n	1d4f2 <_dtoa_r+0xaea>
   1d4e2:	f01d fae9 	bl	3aab8 <__multadd>
   1d4e6:	4680      	mov	r8, r0
   1d4e8:	4606      	mov	r6, r0
   1d4ea:	9b08      	ldr	r3, [sp, #32]
   1d4ec:	3301      	adds	r3, #1
   1d4ee:	9308      	str	r3, [sp, #32]
   1d4f0:	e775      	b.n	1d3de <_dtoa_r+0x9d6>
   1d4f2:	f01d fae1 	bl	3aab8 <__multadd>
   1d4f6:	4631      	mov	r1, r6
   1d4f8:	4680      	mov	r8, r0
   1d4fa:	2300      	movs	r3, #0
   1d4fc:	220a      	movs	r2, #10
   1d4fe:	4628      	mov	r0, r5
   1d500:	f01d fada 	bl	3aab8 <__multadd>
   1d504:	4606      	mov	r6, r0
   1d506:	e7f0      	b.n	1d4ea <_dtoa_r+0xae2>
   1d508:	f1b9 0f00 	cmp.w	r9, #0
   1d50c:	9a03      	ldr	r2, [sp, #12]
   1d50e:	bfcc      	ite	gt
   1d510:	464f      	movgt	r7, r9
   1d512:	2701      	movle	r7, #1
   1d514:	4417      	add	r7, r2
   1d516:	f04f 0800 	mov.w	r8, #0
   1d51a:	4659      	mov	r1, fp
   1d51c:	2201      	movs	r2, #1
   1d51e:	4628      	mov	r0, r5
   1d520:	9308      	str	r3, [sp, #32]
   1d522:	f01d fbfa 	bl	3ad1a <__lshift>
   1d526:	4621      	mov	r1, r4
   1d528:	4683      	mov	fp, r0
   1d52a:	f01d fc55 	bl	3add8 <__mcmp>
   1d52e:	2800      	cmp	r0, #0
   1d530:	dcb2      	bgt.n	1d498 <_dtoa_r+0xa90>
   1d532:	d102      	bne.n	1d53a <_dtoa_r+0xb32>
   1d534:	9b08      	ldr	r3, [sp, #32]
   1d536:	07db      	lsls	r3, r3, #31
   1d538:	d4ae      	bmi.n	1d498 <_dtoa_r+0xa90>
   1d53a:	463b      	mov	r3, r7
   1d53c:	461f      	mov	r7, r3
   1d53e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1d542:	2a30      	cmp	r2, #48	; 0x30
   1d544:	d0fa      	beq.n	1d53c <_dtoa_r+0xb34>
   1d546:	e6fe      	b.n	1d346 <_dtoa_r+0x93e>
   1d548:	9a03      	ldr	r2, [sp, #12]
   1d54a:	429a      	cmp	r2, r3
   1d54c:	d1a5      	bne.n	1d49a <_dtoa_r+0xa92>
   1d54e:	f10a 0a01 	add.w	sl, sl, #1
   1d552:	2331      	movs	r3, #49	; 0x31
   1d554:	e779      	b.n	1d44a <_dtoa_r+0xa42>
   1d556:	4b13      	ldr	r3, [pc, #76]	; (1d5a4 <_dtoa_r+0xb9c>)
   1d558:	f7ff babb 	b.w	1cad2 <_dtoa_r+0xca>
   1d55c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1d55e:	2b00      	cmp	r3, #0
   1d560:	f47f aa93 	bne.w	1ca8a <_dtoa_r+0x82>
   1d564:	4b10      	ldr	r3, [pc, #64]	; (1d5a8 <_dtoa_r+0xba0>)
   1d566:	f7ff bab4 	b.w	1cad2 <_dtoa_r+0xca>
   1d56a:	f1b9 0f00 	cmp.w	r9, #0
   1d56e:	dc03      	bgt.n	1d578 <_dtoa_r+0xb70>
   1d570:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1d572:	2b02      	cmp	r3, #2
   1d574:	f73f aed0 	bgt.w	1d318 <_dtoa_r+0x910>
   1d578:	9f03      	ldr	r7, [sp, #12]
   1d57a:	4621      	mov	r1, r4
   1d57c:	4658      	mov	r0, fp
   1d57e:	f01d f96c 	bl	3a85a <quorem>
   1d582:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1d586:	f807 3b01 	strb.w	r3, [r7], #1
   1d58a:	9a03      	ldr	r2, [sp, #12]
   1d58c:	1aba      	subs	r2, r7, r2
   1d58e:	4591      	cmp	r9, r2
   1d590:	ddba      	ble.n	1d508 <_dtoa_r+0xb00>
   1d592:	4659      	mov	r1, fp
   1d594:	2300      	movs	r3, #0
   1d596:	220a      	movs	r2, #10
   1d598:	4628      	mov	r0, r5
   1d59a:	f01d fa8d 	bl	3aab8 <__multadd>
   1d59e:	4683      	mov	fp, r0
   1d5a0:	e7eb      	b.n	1d57a <_dtoa_r+0xb72>
   1d5a2:	bf00      	nop
   1d5a4:	00041a5a 	.word	0x00041a5a
   1d5a8:	00041c3b 	.word	0x00041c3b

0001d5ac <req_cb_flash_start>:
 *
 * @return 0 success
 * @return neg error
 */
static int req_cb_flash_start(uint8_t* p_req, uint16_t req_len, cmd_respond_t respond)
{
   1d5ac:	b508      	push	{r3, lr}
    LOG_DBG("%s", __func__);

    respond("ok", 2);
   1d5ae:	2102      	movs	r1, #2
   1d5b0:	4801      	ldr	r0, [pc, #4]	; (1d5b8 <req_cb_flash_start+0xc>)
   1d5b2:	4790      	blx	r2

    return 0;
}
   1d5b4:	2000      	movs	r0, #0
   1d5b6:	bd08      	pop	{r3, pc}
   1d5b8:	0003c04c 	.word	0x0003c04c

0001d5bc <rsp_cb_flash_done>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1d5bc:	4804      	ldr	r0, [pc, #16]	; (1d5d0 <rsp_cb_flash_done+0x14>)
   1d5be:	4b05      	ldr	r3, [pc, #20]	; (1d5d4 <rsp_cb_flash_done+0x18>)
    LOG_INF("Update of nRF91 Finished");
   1d5c0:	4905      	ldr	r1, [pc, #20]	; (1d5d8 <rsp_cb_flash_done+0x1c>)
   1d5c2:	1ac0      	subs	r0, r0, r3
   1d5c4:	08c0      	lsrs	r0, r0, #3
   1d5c6:	0180      	lsls	r0, r0, #6
   1d5c8:	f040 0003 	orr.w	r0, r0, #3
   1d5cc:	f019 bf60 	b.w	37490 <log_string_sync>
   1d5d0:	0003b4c8 	.word	0x0003b4c8
   1d5d4:	0003b448 	.word	0x0003b448
   1d5d8:	0003c04f 	.word	0x0003c04f

0001d5dc <req_dev_fwinfo52>:
{
   1d5dc:	b513      	push	{r0, r1, r4, lr}
   1d5de:	4b0a      	ldr	r3, [pc, #40]	; (1d608 <req_dev_fwinfo52+0x2c>)
   1d5e0:	480a      	ldr	r0, [pc, #40]	; (1d60c <req_dev_fwinfo52+0x30>)
    LOG_INF("In FW Info");
   1d5e2:	490b      	ldr	r1, [pc, #44]	; (1d610 <req_dev_fwinfo52+0x34>)
   1d5e4:	1ac0      	subs	r0, r0, r3
   1d5e6:	08c0      	lsrs	r0, r0, #3
   1d5e8:	0180      	lsls	r0, r0, #6
   1d5ea:	f040 0003 	orr.w	r0, r0, #3
{
   1d5ee:	4614      	mov	r4, r2
    LOG_INF("In FW Info");
   1d5f0:	f019 ff4e 	bl	37490 <log_string_sync>
    app_flash_get_DevInf(nrf52buffer,6);
   1d5f4:	2106      	movs	r1, #6
   1d5f6:	4668      	mov	r0, sp
   1d5f8:	f019 fc4f 	bl	36e9a <app_flash_get_DevInf>
    respond(nrf52buffer,6);
   1d5fc:	2106      	movs	r1, #6
   1d5fe:	4668      	mov	r0, sp
   1d600:	47a0      	blx	r4
}
   1d602:	2000      	movs	r0, #0
   1d604:	b002      	add	sp, #8
   1d606:	bd10      	pop	{r4, pc}
   1d608:	0003b448 	.word	0x0003b448
   1d60c:	0003b4c8 	.word	0x0003b4c8
   1d610:	0003c068 	.word	0x0003c068

0001d614 <req_cb_flash_read>:
{
   1d614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d616:	4604      	mov	r4, r0
   1d618:	4615      	mov	r5, r2
    uint32_t offset = sys_get_le32(&p_req[0]);
   1d61a:	f019 fb92 	bl	36d42 <sys_get_le32>
   1d61e:	4606      	mov	r6, r0
    uint32_t length = sys_get_le32(&p_req[4]);
   1d620:	1d20      	adds	r0, r4, #4
   1d622:	f019 fb8e 	bl	36d42 <sys_get_le32>
   1d626:	4c15      	ldr	r4, [pc, #84]	; (1d67c <req_cb_flash_read+0x68>)
    LOG_INF("read offset: %x, length: %d", offset, length);
   1d628:	4915      	ldr	r1, [pc, #84]	; (1d680 <req_cb_flash_read+0x6c>)
    uint32_t length = sys_get_le32(&p_req[4]);
   1d62a:	4607      	mov	r7, r0
   1d62c:	4815      	ldr	r0, [pc, #84]	; (1d684 <req_cb_flash_read+0x70>)
   1d62e:	1a24      	subs	r4, r4, r0
   1d630:	08e4      	lsrs	r4, r4, #3
    LOG_INF("read offset: %x, length: %d", offset, length);
   1d632:	01a4      	lsls	r4, r4, #6
   1d634:	f044 0003 	orr.w	r0, r4, #3
   1d638:	463b      	mov	r3, r7
   1d63a:	4632      	mov	r2, r6
   1d63c:	f019 ff28 	bl	37490 <log_string_sync>
    p_rsp = k_malloc(rsp_len);
   1d640:	b2b8      	uxth	r0, r7
   1d642:	f01c ff4b 	bl	3a4dc <k_malloc>
   1d646:	4604      	mov	r4, r0
    if (p_rsp != NULL) {
   1d648:	b190      	cbz	r0, 1d670 <req_cb_flash_read+0x5c>
        rc = app_flash_read(offset, p_rsp, length);
   1d64a:	4601      	mov	r1, r0
   1d64c:	463a      	mov	r2, r7
   1d64e:	4630      	mov	r0, r6
   1d650:	f019 fbf3 	bl	36e3a <app_flash_read>
        if (rc == 0) {
   1d654:	4606      	mov	r6, r0
   1d656:	b938      	cbnz	r0, 1d668 <req_cb_flash_read+0x54>
            respond(p_rsp, rsp_len);
   1d658:	b2b9      	uxth	r1, r7
   1d65a:	4620      	mov	r0, r4
   1d65c:	47a8      	blx	r5
            k_free(p_rsp);
   1d65e:	4620      	mov	r0, r4
   1d660:	f01c ff35 	bl	3a4ce <k_free>
}
   1d664:	4630      	mov	r0, r6
   1d666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            respond(NULL, 0);
   1d668:	2100      	movs	r1, #0
   1d66a:	4608      	mov	r0, r1
   1d66c:	47a8      	blx	r5
   1d66e:	e7f9      	b.n	1d664 <req_cb_flash_read+0x50>
        respond(NULL, 0);
   1d670:	4601      	mov	r1, r0
   1d672:	47a8      	blx	r5
        rc = -1;
   1d674:	f04f 36ff 	mov.w	r6, #4294967295
    return rc;
   1d678:	e7f4      	b.n	1d664 <req_cb_flash_read+0x50>
   1d67a:	bf00      	nop
   1d67c:	0003b4c8 	.word	0x0003b4c8
   1d680:	0003c073 	.word	0x0003c073
   1d684:	0003b448 	.word	0x0003b448

0001d688 <req_cb_flash_erase>:
{
   1d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d68a:	4605      	mov	r5, r0
   1d68c:	4614      	mov	r4, r2
    uint32_t offset = sys_get_le32(&p_req[0]);
   1d68e:	f019 fb58 	bl	36d42 <sys_get_le32>
   1d692:	4606      	mov	r6, r0
    uint32_t count = sys_get_le32(&p_req[4]);
   1d694:	1d28      	adds	r0, r5, #4
   1d696:	f019 fb54 	bl	36d42 <sys_get_le32>
    rc = app_flash_erase_page(offset, count);
   1d69a:	4601      	mov	r1, r0
    uint32_t count = sys_get_le32(&p_req[4]);
   1d69c:	4607      	mov	r7, r0
    rc = app_flash_erase_page(offset, count);
   1d69e:	4630      	mov	r0, r6
   1d6a0:	f019 fc24 	bl	36eec <app_flash_erase_page>
    if (rc == 0) {
   1d6a4:	4605      	mov	r5, r0
   1d6a6:	b980      	cbnz	r0, 1d6ca <req_cb_flash_erase+0x42>
        respond("ok", 2);
   1d6a8:	4809      	ldr	r0, [pc, #36]	; (1d6d0 <req_cb_flash_erase+0x48>)
   1d6aa:	2102      	movs	r1, #2
        respond(NULL, 0);
   1d6ac:	47a0      	blx	r4
   1d6ae:	4809      	ldr	r0, [pc, #36]	; (1d6d4 <req_cb_flash_erase+0x4c>)
   1d6b0:	4c09      	ldr	r4, [pc, #36]	; (1d6d8 <req_cb_flash_erase+0x50>)
    LOG_INF("erase offset: %x, count: %d", offset, count);
   1d6b2:	490a      	ldr	r1, [pc, #40]	; (1d6dc <req_cb_flash_erase+0x54>)
   1d6b4:	1a24      	subs	r4, r4, r0
   1d6b6:	08e4      	lsrs	r4, r4, #3
   1d6b8:	01a4      	lsls	r4, r4, #6
   1d6ba:	f044 0003 	orr.w	r0, r4, #3
   1d6be:	463b      	mov	r3, r7
   1d6c0:	4632      	mov	r2, r6
   1d6c2:	f019 fee5 	bl	37490 <log_string_sync>
}
   1d6c6:	4628      	mov	r0, r5
   1d6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        respond(NULL, 0);
   1d6ca:	2100      	movs	r1, #0
   1d6cc:	4608      	mov	r0, r1
   1d6ce:	e7ed      	b.n	1d6ac <req_cb_flash_erase+0x24>
   1d6d0:	0003c04c 	.word	0x0003c04c
   1d6d4:	0003b448 	.word	0x0003b448
   1d6d8:	0003b4c8 	.word	0x0003b4c8
   1d6dc:	0003c08f 	.word	0x0003c08f

0001d6e0 <req_cb_flash_crc>:
{
   1d6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d6e2:	4604      	mov	r4, r0
   1d6e4:	4615      	mov	r5, r2
    uint32_t offset = sys_get_le32(&p_req[0]);
   1d6e6:	f019 fb2c 	bl	36d42 <sys_get_le32>
   1d6ea:	4606      	mov	r6, r0
    uint32_t length = sys_get_le32(&p_req[4]);
   1d6ec:	1d20      	adds	r0, r4, #4
   1d6ee:	f019 fb28 	bl	36d42 <sys_get_le32>
   1d6f2:	4c10      	ldr	r4, [pc, #64]	; (1d734 <req_cb_flash_crc+0x54>)
    LOG_INF("crc offset: %x, length: %d", offset, length);
   1d6f4:	4910      	ldr	r1, [pc, #64]	; (1d738 <req_cb_flash_crc+0x58>)
    uint32_t length = sys_get_le32(&p_req[4]);
   1d6f6:	4607      	mov	r7, r0
   1d6f8:	4810      	ldr	r0, [pc, #64]	; (1d73c <req_cb_flash_crc+0x5c>)
   1d6fa:	1a24      	subs	r4, r4, r0
   1d6fc:	08e4      	lsrs	r4, r4, #3
    LOG_INF("crc offset: %x, length: %d", offset, length);
   1d6fe:	01a4      	lsls	r4, r4, #6
   1d700:	f044 0003 	orr.w	r0, r4, #3
   1d704:	463b      	mov	r3, r7
   1d706:	4632      	mov	r2, r6
   1d708:	f019 fec2 	bl	37490 <log_string_sync>
    rc = app_flash_crc(offset, length, &crc32);
   1d70c:	aa01      	add	r2, sp, #4
   1d70e:	4639      	mov	r1, r7
   1d710:	4630      	mov	r0, r6
   1d712:	f019 fc04 	bl	36f1e <app_flash_crc>
    if (rc == 0) {
   1d716:	4604      	mov	r4, r0
   1d718:	b948      	cbnz	r0, 1d72e <req_cb_flash_crc+0x4e>
        sys_put_le32(crc32, p_rsp);
   1d71a:	9801      	ldr	r0, [sp, #4]
   1d71c:	4669      	mov	r1, sp
   1d71e:	f019 fb07 	bl	36d30 <sys_put_le32>
        respond(p_rsp, rsp_len);
   1d722:	2104      	movs	r1, #4
   1d724:	4668      	mov	r0, sp
        respond(NULL, 0);
   1d726:	47a8      	blx	r5
}
   1d728:	4620      	mov	r0, r4
   1d72a:	b003      	add	sp, #12
   1d72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        respond(NULL, 0);
   1d72e:	2100      	movs	r1, #0
   1d730:	4608      	mov	r0, r1
   1d732:	e7f8      	b.n	1d726 <req_cb_flash_crc+0x46>
   1d734:	0003b4c8 	.word	0x0003b4c8
   1d738:	0003c0ab 	.word	0x0003c0ab
   1d73c:	0003b448 	.word	0x0003b448

0001d740 <req_cb_flash_write>:
{
   1d740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d744:	4607      	mov	r7, r0
   1d746:	4615      	mov	r5, r2
    uint32_t offset = sys_get_le32(&p_req[0]);
   1d748:	f019 fafb 	bl	36d42 <sys_get_le32>
   1d74c:	4606      	mov	r6, r0
    uint32_t length = sys_get_le32(&p_req[4]);
   1d74e:	1d38      	adds	r0, r7, #4
   1d750:	f019 faf7 	bl	36d42 <sys_get_le32>
   1d754:	4c0e      	ldr	r4, [pc, #56]	; (1d790 <req_cb_flash_write+0x50>)
    LOG_INF("write offset: %x, length: %d", offset, length);
   1d756:	490f      	ldr	r1, [pc, #60]	; (1d794 <req_cb_flash_write+0x54>)
    uint32_t length = sys_get_le32(&p_req[4]);
   1d758:	4680      	mov	r8, r0
   1d75a:	480f      	ldr	r0, [pc, #60]	; (1d798 <req_cb_flash_write+0x58>)
   1d75c:	1a24      	subs	r4, r4, r0
   1d75e:	08e4      	lsrs	r4, r4, #3
    LOG_INF("write offset: %x, length: %d", offset, length);
   1d760:	01a4      	lsls	r4, r4, #6
   1d762:	f044 0003 	orr.w	r0, r4, #3
   1d766:	4643      	mov	r3, r8
   1d768:	4632      	mov	r2, r6
   1d76a:	f019 fe91 	bl	37490 <log_string_sync>
    rc = app_flash_write(offset, p_data, length);
   1d76e:	4642      	mov	r2, r8
   1d770:	f107 0108 	add.w	r1, r7, #8
   1d774:	4630      	mov	r0, r6
   1d776:	f001 fb45 	bl	1ee04 <app_flash_write>
    if (rc == 0) {
   1d77a:	4604      	mov	r4, r0
   1d77c:	b928      	cbnz	r0, 1d78a <req_cb_flash_write+0x4a>
        respond("ok", 2);
   1d77e:	4807      	ldr	r0, [pc, #28]	; (1d79c <req_cb_flash_write+0x5c>)
   1d780:	2102      	movs	r1, #2
        respond(NULL, 0);
   1d782:	47a8      	blx	r5
}
   1d784:	4620      	mov	r0, r4
   1d786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        respond(NULL, 0);
   1d78a:	2100      	movs	r1, #0
   1d78c:	4608      	mov	r0, r1
   1d78e:	e7f8      	b.n	1d782 <req_cb_flash_write+0x42>
   1d790:	0003b4c8 	.word	0x0003b4c8
   1d794:	0003c0c6 	.word	0x0003c0c6
   1d798:	0003b448 	.word	0x0003b448
   1d79c:	0003c04c 	.word	0x0003c04c

0001d7a0 <dfu_file_ready.part.0>:
void dfu_file_ready(uint8_t cur_image_channel)
   1d7a0:	b508      	push	{r3, lr}
            cur_image_file_type = IMAGE_TYPE_NRF52;
   1d7a2:	4b0a      	ldr	r3, [pc, #40]	; (1d7cc <dfu_file_ready.part.0+0x2c>)
   1d7a4:	2200      	movs	r2, #0
            dk_set_leds(DK_LED4);
   1d7a6:	2003      	movs	r0, #3
            cur_image_file_type = IMAGE_TYPE_NRF52;
   1d7a8:	701a      	strb	r2, [r3, #0]
            dk_set_leds(DK_LED4);
   1d7aa:	f01c fb0c 	bl	39dc6 <dk_set_leds>
            k_work_submit(&wk_update_mcuboot_flag);
   1d7ae:	4808      	ldr	r0, [pc, #32]	; (1d7d0 <dfu_file_ready.part.0+0x30>)
   1d7b0:	f012 ff26 	bl	30600 <k_work_submit>
   1d7b4:	4b07      	ldr	r3, [pc, #28]	; (1d7d4 <dfu_file_ready.part.0+0x34>)
   1d7b6:	4808      	ldr	r0, [pc, #32]	; (1d7d8 <dfu_file_ready.part.0+0x38>)
            LOG_INF("Image received over Bluetooth Press Button 2 to do Reboot");
   1d7b8:	4908      	ldr	r1, [pc, #32]	; (1d7dc <dfu_file_ready.part.0+0x3c>)
   1d7ba:	1ac0      	subs	r0, r0, r3
   1d7bc:	08c0      	lsrs	r0, r0, #3
   1d7be:	0180      	lsls	r0, r0, #6
}
   1d7c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            LOG_INF("Image received over Bluetooth Press Button 2 to do Reboot");
   1d7c4:	f040 0003 	orr.w	r0, r0, #3
   1d7c8:	f019 be62 	b.w	37490 <log_string_sync>
   1d7cc:	2000375a 	.word	0x2000375a
   1d7d0:	20002218 	.word	0x20002218
   1d7d4:	0003b448 	.word	0x0003b448
   1d7d8:	0003b4c8 	.word	0x0003b4c8
   1d7dc:	0003c0e3 	.word	0x0003c0e3

0001d7e0 <req_cb_flash_done>:
   1d7e0:	b508      	push	{r3, lr}
   1d7e2:	2102      	movs	r1, #2
   1d7e4:	4801      	ldr	r0, [pc, #4]	; (1d7ec <req_cb_flash_done+0xc>)
   1d7e6:	4790      	blx	r2
   1d7e8:	2000      	movs	r0, #0
   1d7ea:	bd08      	pop	{r3, pc}
   1d7ec:	0003c04c 	.word	0x0003c04c

0001d7f0 <update_bluetooth_params>:
static int update_bluetooth_params(struct bt_le_conn_param *conn_param){
   1d7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    err = bt_conn_get_info(current_conn,current_info);
   1d7f2:	4f1f      	ldr	r7, [pc, #124]	; (1d870 <update_bluetooth_params+0x80>)
   1d7f4:	4c1f      	ldr	r4, [pc, #124]	; (1d874 <update_bluetooth_params+0x84>)
static int update_bluetooth_params(struct bt_le_conn_param *conn_param){
   1d7f6:	4606      	mov	r6, r0
    err = bt_conn_get_info(current_conn,current_info);
   1d7f8:	2100      	movs	r1, #0
   1d7fa:	6838      	ldr	r0, [r7, #0]
   1d7fc:	f008 fc04 	bl	26008 <bt_conn_get_info>
    if(err){
   1d800:	4b1d      	ldr	r3, [pc, #116]	; (1d878 <update_bluetooth_params+0x88>)
   1d802:	1ae4      	subs	r4, r4, r3
   1d804:	08e4      	lsrs	r4, r4, #3
   1d806:	4602      	mov	r2, r0
   1d808:	01a4      	lsls	r4, r4, #6
   1d80a:	b120      	cbz	r0, 1d816 <update_bluetooth_params+0x26>
        LOG_ERR("Couldnt obtain Connection Info %d",err);
   1d80c:	491b      	ldr	r1, [pc, #108]	; (1d87c <update_bluetooth_params+0x8c>)
   1d80e:	f044 0001 	orr.w	r0, r4, #1
   1d812:	f019 fe3d 	bl	37490 <log_string_sync>
    LOG_INF("Maximum Data RX Length: %d Tx Length %d",current_info->le.data_len->rx_max_len,current_info->le.data_len->tx_max_len);
   1d816:	2300      	movs	r3, #0
   1d818:	f044 0503 	orr.w	r5, r4, #3
   1d81c:	69da      	ldr	r2, [r3, #28]
   1d81e:	4918      	ldr	r1, [pc, #96]	; (1d880 <update_bluetooth_params+0x90>)
   1d820:	8813      	ldrh	r3, [r2, #0]
   1d822:	8892      	ldrh	r2, [r2, #4]
   1d824:	4628      	mov	r0, r5
   1d826:	f019 fe33 	bl	37490 <log_string_sync>
    LOG_INF("Try to Updated Connection parameters for better Tx Rate");
   1d82a:	4628      	mov	r0, r5
   1d82c:	4915      	ldr	r1, [pc, #84]	; (1d884 <update_bluetooth_params+0x94>)
   1d82e:	f019 fe2f 	bl	37490 <log_string_sync>
	err = bt_conn_le_param_update(current_conn, conn_param);
   1d832:	6838      	ldr	r0, [r7, #0]
   1d834:	4631      	mov	r1, r6
   1d836:	f01a ff89 	bl	3874c <bt_conn_le_param_update>
	if (err) {
   1d83a:	4605      	mov	r5, r0
   1d83c:	b130      	cbz	r0, 1d84c <update_bluetooth_params+0x5c>
		LOG_ERR(" Connection Param Update Error");
   1d83e:	4912      	ldr	r1, [pc, #72]	; (1d888 <update_bluetooth_params+0x98>)
   1d840:	f044 0001 	orr.w	r0, r4, #1
   1d844:	f019 fe24 	bl	37490 <log_string_sync>
}
   1d848:	4628      	mov	r0, r5
   1d84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   1d84c:	480f      	ldr	r0, [pc, #60]	; (1d88c <update_bluetooth_params+0x9c>)
   1d84e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d852:	2300      	movs	r3, #0
   1d854:	f012 fb78 	bl	2ff48 <z_impl_k_sem_take>
	if (err) {
   1d858:	4605      	mov	r5, r0
   1d85a:	b120      	cbz	r0, 1d866 <update_bluetooth_params+0x76>
		LOG_ERR("Connection Param Timeout");
   1d85c:	490c      	ldr	r1, [pc, #48]	; (1d890 <update_bluetooth_params+0xa0>)
   1d85e:	f044 0001 	orr.w	r0, r4, #1
   1d862:	f019 fe15 	bl	37490 <log_string_sync>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1d866:	4809      	ldr	r0, [pc, #36]	; (1d88c <update_bluetooth_params+0x9c>)
   1d868:	f012 fb2a 	bl	2fec0 <z_impl_k_sem_give>
}
   1d86c:	e7ec      	b.n	1d848 <update_bluetooth_params+0x58>
   1d86e:	bf00      	nop
   1d870:	200021ec 	.word	0x200021ec
   1d874:	0003b4c8 	.word	0x0003b4c8
   1d878:	0003b448 	.word	0x0003b448
   1d87c:	0003c11d 	.word	0x0003c11d
   1d880:	0003c13f 	.word	0x0003c13f
   1d884:	0003c167 	.word	0x0003c167
   1d888:	0003c19f 	.word	0x0003c19f
   1d88c:	20000c50 	.word	0x20000c50
   1d890:	0003c1be 	.word	0x0003c1be

0001d894 <ble_send_req>:
{
   1d894:	b507      	push	{r0, r1, r2, lr}
    return bt_nus_send(current_conn,data,len);
   1d896:	4b05      	ldr	r3, [pc, #20]	; (1d8ac <ble_send_req+0x18>)
    const uint8_t data[1] = {req};
   1d898:	f88d 0004 	strb.w	r0, [sp, #4]
    return bt_nus_send(current_conn,data,len);
   1d89c:	2201      	movs	r2, #1
   1d89e:	6818      	ldr	r0, [r3, #0]
   1d8a0:	a901      	add	r1, sp, #4
   1d8a2:	f004 faa7 	bl	21df4 <bt_nus_send>
}
   1d8a6:	b003      	add	sp, #12
   1d8a8:	f85d fb04 	ldr.w	pc, [sp], #4
   1d8ac:	200021ec 	.word	0x200021ec

0001d8b0 <rsp_cb_flash_erase>:
{
   1d8b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d8b2:	4b11      	ldr	r3, [pc, #68]	; (1d8f8 <rsp_cb_flash_erase+0x48>)
   1d8b4:	4c11      	ldr	r4, [pc, #68]	; (1d8fc <rsp_cb_flash_erase+0x4c>)
    LOG_INF("Erase Rsp");
   1d8b6:	4912      	ldr	r1, [pc, #72]	; (1d900 <rsp_cb_flash_erase+0x50>)
   1d8b8:	1ae4      	subs	r4, r4, r3
   1d8ba:	08e4      	lsrs	r4, r4, #3
   1d8bc:	01a4      	lsls	r4, r4, #6
{
   1d8be:	4605      	mov	r5, r0
    LOG_INF("Erase Rsp");
   1d8c0:	f044 0003 	orr.w	r0, r4, #3
   1d8c4:	f019 fde4 	bl	37490 <log_string_sync>
    uint8_t p_ok[] = CMD_RSP_OK;
   1d8c8:	f646 336f 	movw	r3, #27503	; 0x6b6f
    update_bluetooth_params(fast_bt_conn_param);
   1d8cc:	480d      	ldr	r0, [pc, #52]	; (1d904 <rsp_cb_flash_erase+0x54>)
    uint8_t p_ok[] = CMD_RSP_OK;
   1d8ce:	f8ad 3004 	strh.w	r3, [sp, #4]
    update_bluetooth_params(fast_bt_conn_param);
   1d8d2:	f7ff ff8d 	bl	1d7f0 <update_bluetooth_params>
    if (memcmp(p_rsp, p_ok, sizeof(p_ok)) == 0)
   1d8d6:	2202      	movs	r2, #2
   1d8d8:	a901      	add	r1, sp, #4
   1d8da:	4628      	mov	r0, r5
   1d8dc:	f01c fe03 	bl	3a4e6 <memcmp>
   1d8e0:	b920      	cbnz	r0, 1d8ec <rsp_cb_flash_erase+0x3c>
        ble_send_req(REQ_GET_IMG_DATA);
   1d8e2:	2002      	movs	r0, #2
   1d8e4:	f7ff ffd6 	bl	1d894 <ble_send_req>
}
   1d8e8:	b003      	add	sp, #12
   1d8ea:	bd30      	pop	{r4, r5, pc}
        LOG_ERR("Timeout");
   1d8ec:	4906      	ldr	r1, [pc, #24]	; (1d908 <rsp_cb_flash_erase+0x58>)
   1d8ee:	f044 0001 	orr.w	r0, r4, #1
   1d8f2:	f019 fdcd 	bl	37490 <log_string_sync>
}
   1d8f6:	e7f7      	b.n	1d8e8 <rsp_cb_flash_erase+0x38>
   1d8f8:	0003b448 	.word	0x0003b448
   1d8fc:	0003b4c8 	.word	0x0003b4c8
   1d900:	0003c1d7 	.word	0x0003c1d7
   1d904:	20000948 	.word	0x20000948
   1d908:	0003ee1f 	.word	0x0003ee1f

0001d90c <wk_self_info_handler>:
    if(m_available_size52 < cur_image_file_size){
   1d90c:	4b12      	ldr	r3, [pc, #72]	; (1d958 <wk_self_info_handler+0x4c>)
   1d90e:	4813      	ldr	r0, [pc, #76]	; (1d95c <wk_self_info_handler+0x50>)
   1d910:	681a      	ldr	r2, [r3, #0]
   1d912:	4b13      	ldr	r3, [pc, #76]	; (1d960 <wk_self_info_handler+0x54>)
static void wk_self_info_handler(struct k_work* unused){
   1d914:	b510      	push	{r4, lr}
   1d916:	4c13      	ldr	r4, [pc, #76]	; (1d964 <wk_self_info_handler+0x58>)
    if(m_available_size52 < cur_image_file_size){
   1d918:	681b      	ldr	r3, [r3, #0]
   1d91a:	1b00      	subs	r0, r0, r4
   1d91c:	08c0      	lsrs	r0, r0, #3
   1d91e:	429a      	cmp	r2, r3
   1d920:	ea4f 1080 	mov.w	r0, r0, lsl #6
   1d924:	d206      	bcs.n	1d934 <wk_self_info_handler+0x28>
}
   1d926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_ERR("Not enough Space for Image available Size: %x required Size: %x",m_available_size52,cur_image_file_size);
   1d92a:	490f      	ldr	r1, [pc, #60]	; (1d968 <wk_self_info_handler+0x5c>)
   1d92c:	f040 0001 	orr.w	r0, r0, #1
   1d930:	f019 bdae 	b.w	37490 <log_string_sync>
    LOG_INF("Erase Flash This might take a while");
   1d934:	f040 0403 	orr.w	r4, r0, #3
   1d938:	490c      	ldr	r1, [pc, #48]	; (1d96c <wk_self_info_handler+0x60>)
   1d93a:	4620      	mov	r0, r4
   1d93c:	f019 fda8 	bl	37490 <log_string_sync>
    update_bluetooth_params(fast_bt_conn_param);
   1d940:	480b      	ldr	r0, [pc, #44]	; (1d970 <wk_self_info_handler+0x64>)
   1d942:	f7ff ff55 	bl	1d7f0 <update_bluetooth_params>
    LOG_INF("Start Receiving Data Packages");
   1d946:	4620      	mov	r0, r4
   1d948:	490a      	ldr	r1, [pc, #40]	; (1d974 <wk_self_info_handler+0x68>)
   1d94a:	f019 fda1 	bl	37490 <log_string_sync>
}
   1d94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ble_send_req(REQ_GET_IMG_DATA);
   1d952:	2002      	movs	r0, #2
   1d954:	f7ff bf9e 	b.w	1d894 <ble_send_req>
   1d958:	200021f0 	.word	0x200021f0
   1d95c:	0003b4c8 	.word	0x0003b4c8
   1d960:	200021e4 	.word	0x200021e4
   1d964:	0003b448 	.word	0x0003b448
   1d968:	0003c2f0 	.word	0x0003c2f0
   1d96c:	0003c1e1 	.word	0x0003c1e1
   1d970:	20000948 	.word	0x20000948
   1d974:	0003c205 	.word	0x0003c205

0001d978 <wk_self_update_handler>:
static void wk_self_update_handler(struct k_work* unused){
   1d978:	b510      	push	{r4, lr}
    uint32_t offset = sys_get_le32(&m_cmd_buffer[0]);
   1d97a:	481f      	ldr	r0, [pc, #124]	; (1d9f8 <wk_self_update_handler+0x80>)
   1d97c:	f019 f9e1 	bl	36d42 <sys_get_le32>
   1d980:	4604      	mov	r4, r0
    uint32_t cur_bufferlen = sys_get_le32(&m_cmd_buffer[4]);
   1d982:	481e      	ldr	r0, [pc, #120]	; (1d9fc <wk_self_update_handler+0x84>)
   1d984:	f019 f9dd 	bl	36d42 <sys_get_le32>
    err = app_flash_write(offset,p_data,cur_bufferlen);
   1d988:	491d      	ldr	r1, [pc, #116]	; (1da00 <wk_self_update_handler+0x88>)
    uint32_t cur_bufferlen = sys_get_le32(&m_cmd_buffer[4]);
   1d98a:	4602      	mov	r2, r0
    err = app_flash_write(offset,p_data,cur_bufferlen);
   1d98c:	4620      	mov	r0, r4
   1d98e:	f001 fa39 	bl	1ee04 <app_flash_write>
    if(err < 0){
   1d992:	1e02      	subs	r2, r0, #0
   1d994:	da1c      	bge.n	1d9d0 <wk_self_update_handler+0x58>
        if(err == -EACCES)
   1d996:	f112 0f0d 	cmn.w	r2, #13
   1d99a:	d10b      	bne.n	1d9b4 <wk_self_update_handler+0x3c>
   1d99c:	4819      	ldr	r0, [pc, #100]	; (1da04 <wk_self_update_handler+0x8c>)
   1d99e:	4b1a      	ldr	r3, [pc, #104]	; (1da08 <wk_self_update_handler+0x90>)
        LOG_ERR("Problem bei Write %d",err);
   1d9a0:	491a      	ldr	r1, [pc, #104]	; (1da0c <wk_self_update_handler+0x94>)
   1d9a2:	1ac0      	subs	r0, r0, r3
   1d9a4:	08c0      	lsrs	r0, r0, #3
   1d9a6:	0180      	lsls	r0, r0, #6
}
   1d9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_ERR("Problem bei Write %d",err);
   1d9ac:	f040 0001 	orr.w	r0, r0, #1
   1d9b0:	f019 bd6e 	b.w	37490 <log_string_sync>
        if(err == -EINVAL){
   1d9b4:	3216      	adds	r2, #22
   1d9b6:	d118      	bne.n	1d9ea <wk_self_update_handler+0x72>
   1d9b8:	4812      	ldr	r0, [pc, #72]	; (1da04 <wk_self_update_handler+0x8c>)
   1d9ba:	4b13      	ldr	r3, [pc, #76]	; (1da08 <wk_self_update_handler+0x90>)
            LOG_ERR ("Invalid Argument");
   1d9bc:	4914      	ldr	r1, [pc, #80]	; (1da10 <wk_self_update_handler+0x98>)
   1d9be:	1ac0      	subs	r0, r0, r3
   1d9c0:	08c0      	lsrs	r0, r0, #3
   1d9c2:	0180      	lsls	r0, r0, #6
}
   1d9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            LOG_ERR ("Invalid Argument");
   1d9c8:	f040 0001 	orr.w	r0, r0, #1
   1d9cc:	f019 bd60 	b.w	37490 <log_string_sync>
    if (cur_img_offset == cur_image_file_size){
   1d9d0:	4c10      	ldr	r4, [pc, #64]	; (1da14 <wk_self_update_handler+0x9c>)
   1d9d2:	4b11      	ldr	r3, [pc, #68]	; (1da18 <wk_self_update_handler+0xa0>)
   1d9d4:	6822      	ldr	r2, [r4, #0]
   1d9d6:	681b      	ldr	r3, [r3, #0]
   1d9d8:	429a      	cmp	r2, r3
   1d9da:	d107      	bne.n	1d9ec <wk_self_update_handler+0x74>
        ble_send_req(REQ_TX_SUCCESS);
   1d9dc:	2007      	movs	r0, #7
   1d9de:	f7ff ff59 	bl	1d894 <ble_send_req>
    if (cur_image_channel == IMAGE_FROM_BLUETOOTH) {
   1d9e2:	f7ff fedd 	bl	1d7a0 <dfu_file_ready.part.0>
        cur_img_offset = 0;
   1d9e6:	2300      	movs	r3, #0
   1d9e8:	6023      	str	r3, [r4, #0]
}
   1d9ea:	bd10      	pop	{r4, pc}
   1d9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ble_send_req(REQ_GET_IMG_DATA);
   1d9f0:	2002      	movs	r0, #2
   1d9f2:	f7ff bf4f 	b.w	1d894 <ble_send_req>
   1d9f6:	bf00      	nop
   1d9f8:	2000375b 	.word	0x2000375b
   1d9fc:	2000375f 	.word	0x2000375f
   1da00:	20003763 	.word	0x20003763
   1da04:	0003b4c8 	.word	0x0003b4c8
   1da08:	0003b448 	.word	0x0003b448
   1da0c:	0003c223 	.word	0x0003c223
   1da10:	0003c238 	.word	0x0003c238
   1da14:	200021e8 	.word	0x200021e8
   1da18:	200021e4 	.word	0x200021e4

0001da1c <disconnect_from_Central>:
int disconnect_from_Central(){
   1da1c:	b510      	push	{r4, lr}
    ble_send_req(CUT_CONNECTION);
   1da1e:	20ff      	movs	r0, #255	; 0xff
   1da20:	f7ff ff38 	bl	1d894 <ble_send_req>
	return z_impl_k_sleep(timeout);
   1da24:	2100      	movs	r1, #0
   1da26:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1da2a:	f014 f941 	bl	31cb0 <z_impl_k_sleep>
    err = bt_conn_disconnect(current_conn,BT_HCI_ERR_REMOTE_POWER_OFF);
   1da2e:	4b0d      	ldr	r3, [pc, #52]	; (1da64 <disconnect_from_Central+0x48>)
   1da30:	2115      	movs	r1, #21
   1da32:	6818      	ldr	r0, [r3, #0]
   1da34:	f01a fe1a 	bl	3866c <bt_conn_disconnect>
    if(err){
   1da38:	4b0b      	ldr	r3, [pc, #44]	; (1da68 <disconnect_from_Central+0x4c>)
   1da3a:	4a0c      	ldr	r2, [pc, #48]	; (1da6c <disconnect_from_Central+0x50>)
   1da3c:	1a9b      	subs	r3, r3, r2
   1da3e:	08db      	lsrs	r3, r3, #3
   1da40:	4604      	mov	r4, r0
   1da42:	0198      	lsls	r0, r3, #6
   1da44:	b13c      	cbz	r4, 1da56 <disconnect_from_Central+0x3a>
        LOG_ERR("Couldnt Disconnect from BT Central Reason %d",err);
   1da46:	490a      	ldr	r1, [pc, #40]	; (1da70 <disconnect_from_Central+0x54>)
   1da48:	4622      	mov	r2, r4
   1da4a:	f040 0001 	orr.w	r0, r0, #1
   1da4e:	f019 fd1f 	bl	37490 <log_string_sync>
}
   1da52:	4620      	mov	r0, r4
   1da54:	bd10      	pop	{r4, pc}
    LOG_INF("Disconnected from BT Device, Still advertising");
   1da56:	4907      	ldr	r1, [pc, #28]	; (1da74 <disconnect_from_Central+0x58>)
   1da58:	f040 0003 	orr.w	r0, r0, #3
   1da5c:	f019 fd18 	bl	37490 <log_string_sync>
    return err;
   1da60:	e7f7      	b.n	1da52 <disconnect_from_Central+0x36>
   1da62:	bf00      	nop
   1da64:	200021ec 	.word	0x200021ec
   1da68:	0003b4c8 	.word	0x0003b4c8
   1da6c:	0003b448 	.word	0x0003b448
   1da70:	0003c249 	.word	0x0003c249
   1da74:	0003c276 	.word	0x0003c276

0001da78 <wk_update_mcuboot_flag_handler>:
{
   1da78:	b513      	push	{r0, r1, r4, lr}
    if (cur_image_file_type == IMAGE_TYPE_NRF52) {
   1da7a:	4b0f      	ldr	r3, [pc, #60]	; (1dab8 <wk_update_mcuboot_flag_handler+0x40>)
   1da7c:	781c      	ldrb	r4, [r3, #0]
   1da7e:	b97c      	cbnz	r4, 1daa0 <wk_update_mcuboot_flag_handler+0x28>
	    dfu_target_mcuboot_set_buf(dummybuf, 8);
   1da80:	2108      	movs	r1, #8
   1da82:	4668      	mov	r0, sp
   1da84:	f00f fd40 	bl	2d508 <dfu_target_mcuboot_set_buf>
        dfu_target_init(DFU_TARGET_IMAGE_TYPE_MCUBOOT, 0, dfu_target_cb_dummy); 
   1da88:	4a0c      	ldr	r2, [pc, #48]	; (1dabc <wk_update_mcuboot_flag_handler+0x44>)
   1da8a:	4621      	mov	r1, r4
   1da8c:	2001      	movs	r0, #1
   1da8e:	f00f fc65 	bl	2d35c <dfu_target_init>
        dfu_target_done(true);
   1da92:	2001      	movs	r0, #1
   1da94:	f00f fc8c 	bl	2d3b0 <dfu_target_done>
    disconnect_from_Central();
   1da98:	f7ff ffc0 	bl	1da1c <disconnect_from_Central>
}
   1da9c:	b002      	add	sp, #8
   1da9e:	bd10      	pop	{r4, pc}
   1daa0:	4b07      	ldr	r3, [pc, #28]	; (1dac0 <wk_update_mcuboot_flag_handler+0x48>)
   1daa2:	4808      	ldr	r0, [pc, #32]	; (1dac4 <wk_update_mcuboot_flag_handler+0x4c>)
        LOG_ERR("Inavlid image file type %c",cur_image_file_type);
   1daa4:	4908      	ldr	r1, [pc, #32]	; (1dac8 <wk_update_mcuboot_flag_handler+0x50>)
   1daa6:	1ac0      	subs	r0, r0, r3
   1daa8:	08c0      	lsrs	r0, r0, #3
   1daaa:	0180      	lsls	r0, r0, #6
   1daac:	4622      	mov	r2, r4
   1daae:	f040 0001 	orr.w	r0, r0, #1
   1dab2:	f019 fced 	bl	37490 <log_string_sync>
   1dab6:	e7ef      	b.n	1da98 <wk_update_mcuboot_flag_handler+0x20>
   1dab8:	2000375a 	.word	0x2000375a
   1dabc:	00036d59 	.word	0x00036d59
   1dac0:	0003b448 	.word	0x0003b448
   1dac4:	0003b4c8 	.word	0x0003b4c8
   1dac8:	0003c2a5 	.word	0x0003c2a5

0001dacc <send_deviceinfo>:
void send_deviceinfo(void){
   1dacc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    buf[0] = RSP_DEVINF;
   1dace:	2320      	movs	r3, #32
   1dad0:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = m_cur_majorfw91;
   1dad4:	4b12      	ldr	r3, [pc, #72]	; (1db20 <send_deviceinfo+0x54>)
   1dad6:	781b      	ldrb	r3, [r3, #0]
   1dad8:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = m_cur_minorfw91;
   1dadc:	4b11      	ldr	r3, [pc, #68]	; (1db24 <send_deviceinfo+0x58>)
   1dade:	781b      	ldrb	r3, [r3, #0]
   1dae0:	f88d 3002 	strb.w	r3, [sp, #2]
    buf[3] = m_cur_majorfw52;
   1dae4:	4b10      	ldr	r3, [pc, #64]	; (1db28 <send_deviceinfo+0x5c>)
   1dae6:	781b      	ldrb	r3, [r3, #0]
   1dae8:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = m_cur_minorfw52;
   1daec:	4b0f      	ldr	r3, [pc, #60]	; (1db2c <send_deviceinfo+0x60>)
   1daee:	781b      	ldrb	r3, [r3, #0]
   1daf0:	f88d 3004 	strb.w	r3, [sp, #4]
    sys_put_le32(m_available_size91,&buf[5]);
   1daf4:	4b0e      	ldr	r3, [pc, #56]	; (1db30 <send_deviceinfo+0x64>)
   1daf6:	f10d 0105 	add.w	r1, sp, #5
   1dafa:	6818      	ldr	r0, [r3, #0]
   1dafc:	f019 f918 	bl	36d30 <sys_put_le32>
    sys_put_le32(m_available_size52,&buf[9]);
   1db00:	4b0c      	ldr	r3, [pc, #48]	; (1db34 <send_deviceinfo+0x68>)
   1db02:	f10d 0109 	add.w	r1, sp, #9
   1db06:	6818      	ldr	r0, [r3, #0]
   1db08:	f019 f912 	bl	36d30 <sys_put_le32>
    bt_nus_send(current_conn,buf,13);
   1db0c:	4b0a      	ldr	r3, [pc, #40]	; (1db38 <send_deviceinfo+0x6c>)
   1db0e:	220d      	movs	r2, #13
   1db10:	6818      	ldr	r0, [r3, #0]
   1db12:	4669      	mov	r1, sp
   1db14:	f004 f96e 	bl	21df4 <bt_nus_send>
}
   1db18:	b005      	add	sp, #20
   1db1a:	f85d fb04 	ldr.w	pc, [sp], #4
   1db1e:	bf00      	nop
   1db20:	20003b64 	.word	0x20003b64
   1db24:	20003b66 	.word	0x20003b66
   1db28:	20003b63 	.word	0x20003b63
   1db2c:	20003b65 	.word	0x20003b65
   1db30:	200021f4 	.word	0x200021f4
   1db34:	200021f0 	.word	0x200021f0
   1db38:	200021ec 	.word	0x200021ec

0001db3c <rsp_dev_fwinfo91>:
{
   1db3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1db3e:	4604      	mov	r4, r0
    m_available_size91 = sys_get_le32(&p_rsp[4]);
   1db40:	3004      	adds	r0, #4
   1db42:	f019 f8fe 	bl	36d42 <sys_get_le32>
   1db46:	4d11      	ldr	r5, [pc, #68]	; (1db8c <rsp_dev_fwinfo91+0x50>)
    m_cur_majorfw91 = p_rsp[1];
   1db48:	4911      	ldr	r1, [pc, #68]	; (1db90 <rsp_dev_fwinfo91+0x54>)
   1db4a:	7863      	ldrb	r3, [r4, #1]
    m_available_size91 = sys_get_le32(&p_rsp[4]);
   1db4c:	6028      	str	r0, [r5, #0]
   1db4e:	4602      	mov	r2, r0
    m_cur_minorfw91 = p_rsp[0];
   1db50:	4810      	ldr	r0, [pc, #64]	; (1db94 <rsp_dev_fwinfo91+0x58>)
    m_cur_majorfw91 = p_rsp[1];
   1db52:	700b      	strb	r3, [r1, #0]
    m_cur_minorfw91 = p_rsp[0];
   1db54:	7821      	ldrb	r1, [r4, #0]
   1db56:	7001      	strb	r1, [r0, #0]
   1db58:	4c0f      	ldr	r4, [pc, #60]	; (1db98 <rsp_dev_fwinfo91+0x5c>)
   1db5a:	4810      	ldr	r0, [pc, #64]	; (1db9c <rsp_dev_fwinfo91+0x60>)
    LOG_INF("nRF91:Available Flashspace:%x FWNum%x.%x",m_available_size91,m_cur_majorfw91,m_cur_minorfw91);
   1db5c:	9100      	str	r1, [sp, #0]
   1db5e:	1a24      	subs	r4, r4, r0
   1db60:	08e4      	lsrs	r4, r4, #3
   1db62:	01a4      	lsls	r4, r4, #6
   1db64:	490e      	ldr	r1, [pc, #56]	; (1dba0 <rsp_dev_fwinfo91+0x64>)
   1db66:	f044 0003 	orr.w	r0, r4, #3
   1db6a:	f019 fc91 	bl	37490 <log_string_sync>
    if(m_available_size91 < cur_image_file_size){
   1db6e:	4b0d      	ldr	r3, [pc, #52]	; (1dba4 <rsp_dev_fwinfo91+0x68>)
   1db70:	682a      	ldr	r2, [r5, #0]
   1db72:	681b      	ldr	r3, [r3, #0]
   1db74:	429a      	cmp	r2, r3
   1db76:	d204      	bcs.n	1db82 <rsp_dev_fwinfo91+0x46>
        LOG_ERR("nRF91: Not enough Space for Image available Size: %x required Size: %x",m_available_size91,cur_image_file_size);
   1db78:	490b      	ldr	r1, [pc, #44]	; (1dba8 <rsp_dev_fwinfo91+0x6c>)
   1db7a:	f044 0001 	orr.w	r0, r4, #1
   1db7e:	f019 fc87 	bl	37490 <log_string_sync>
}
   1db82:	b003      	add	sp, #12
   1db84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    send_deviceinfo();
   1db88:	f7ff bfa0 	b.w	1dacc <send_deviceinfo>
   1db8c:	200021f4 	.word	0x200021f4
   1db90:	20003b64 	.word	0x20003b64
   1db94:	20003b66 	.word	0x20003b66
   1db98:	0003b4c8 	.word	0x0003b4c8
   1db9c:	0003b448 	.word	0x0003b448
   1dba0:	0003c2c0 	.word	0x0003c2c0
   1dba4:	200021e4 	.word	0x200021e4
   1dba8:	0003c2e9 	.word	0x0003c2e9

0001dbac <dfu_file_ready>:
    if (cur_image_channel == IMAGE_FROM_BLUETOOTH) {
   1dbac:	2803      	cmp	r0, #3
{
   1dbae:	b510      	push	{r4, lr}
   1dbb0:	4602      	mov	r2, r0
    if (cur_image_channel == IMAGE_FROM_BLUETOOTH) {
   1dbb2:	d103      	bne.n	1dbbc <dfu_file_ready+0x10>
}
   1dbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dbb8:	f7ff bdf2 	b.w	1d7a0 <dfu_file_ready.part.0>
    else if (cur_image_channel == IMAGE_FROM_SERIAL) {
   1dbbc:	4c0f      	ldr	r4, [pc, #60]	; (1dbfc <dfu_file_ready+0x50>)
   1dbbe:	4b10      	ldr	r3, [pc, #64]	; (1dc00 <dfu_file_ready+0x54>)
   1dbc0:	1ae4      	subs	r4, r4, r3
   1dbc2:	08e4      	lsrs	r4, r4, #3
   1dbc4:	2802      	cmp	r0, #2
   1dbc6:	ea4f 1484 	mov.w	r4, r4, lsl #6
   1dbca:	d10f      	bne.n	1dbec <dfu_file_ready+0x40>
            dk_set_leds(DK_LED4);
   1dbcc:	2003      	movs	r0, #3
   1dbce:	f01c f8fa 	bl	39dc6 <dk_set_leds>
            cur_image_file_type = IMAGE_TYPE_NRF52;
   1dbd2:	4b0c      	ldr	r3, [pc, #48]	; (1dc04 <dfu_file_ready+0x58>)
            k_work_submit(&wk_update_mcuboot_flag);
   1dbd4:	480c      	ldr	r0, [pc, #48]	; (1dc08 <dfu_file_ready+0x5c>)
            cur_image_file_type = IMAGE_TYPE_NRF52;
   1dbd6:	2200      	movs	r2, #0
   1dbd8:	701a      	strb	r2, [r3, #0]
            k_work_submit(&wk_update_mcuboot_flag);
   1dbda:	f012 fd11 	bl	30600 <k_work_submit>
            LOG_INF("Image received over Uart Press Button 2 to do Reboot");
   1dbde:	f044 0003 	orr.w	r0, r4, #3
   1dbe2:	490a      	ldr	r1, [pc, #40]	; (1dc0c <dfu_file_ready+0x60>)
}
   1dbe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            LOG_INF("Image received over Uart Press Button 2 to do Reboot");
   1dbe8:	f019 bc52 	b.w	37490 <log_string_sync>
        LOG_ERR("Invalid image channel %c",cur_image_channel);
   1dbec:	f044 0001 	orr.w	r0, r4, #1
   1dbf0:	4907      	ldr	r1, [pc, #28]	; (1dc10 <dfu_file_ready+0x64>)
}
   1dbf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_ERR("Invalid image channel %c",cur_image_channel);
   1dbf6:	f019 bc4b 	b.w	37490 <log_string_sync>
   1dbfa:	bf00      	nop
   1dbfc:	0003b4c8 	.word	0x0003b4c8
   1dc00:	0003b448 	.word	0x0003b448
   1dc04:	2000375a 	.word	0x2000375a
   1dc08:	20002218 	.word	0x20002218
   1dc0c:	0003c330 	.word	0x0003c330
   1dc10:	0003c365 	.word	0x0003c365

0001dc14 <nus_received_cb_handler>:
{   
   1dc14:	b5f0      	push	{r4, r5, r6, r7, lr}
    current_conn = conn; //Super Unsafe :D
   1dc16:	4b6f      	ldr	r3, [pc, #444]	; (1ddd4 <nus_received_cb_handler+0x1c0>)
   1dc18:	6018      	str	r0, [r3, #0]
    uint8_t  ble_data_flag = p_write_data[0];
   1dc1a:	4608      	mov	r0, r1
    uint16_t img_data_len = write_data_len - 1;
   1dc1c:	3a01      	subs	r2, #1
    uint8_t  ble_data_flag = p_write_data[0];
   1dc1e:	f810 3b01 	ldrb.w	r3, [r0], #1
    switch(ble_data_flag){
   1dc22:	2b08      	cmp	r3, #8
{   
   1dc24:	b085      	sub	sp, #20
   1dc26:	460d      	mov	r5, r1
    uint16_t img_data_len = write_data_len - 1;
   1dc28:	b294      	uxth	r4, r2
    switch(ble_data_flag){
   1dc2a:	d808      	bhi.n	1dc3e <nus_received_cb_handler+0x2a>
   1dc2c:	2b08      	cmp	r3, #8
   1dc2e:	d808      	bhi.n	1dc42 <nus_received_cb_handler+0x2e>
   1dc30:	e8df f003 	tbb	[pc, r3]
   1dc34:	07934109 	.word	0x07934109
   1dc38:	07070707 	.word	0x07070707
   1dc3c:	76          	.byte	0x76
   1dc3d:	00          	.byte	0x00
   1dc3e:	2bfe      	cmp	r3, #254	; 0xfe
   1dc40:	d079      	beq.n	1dd36 <nus_received_cb_handler+0x122>
}
   1dc42:	b005      	add	sp, #20
   1dc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc46:	4b64      	ldr	r3, [pc, #400]	; (1ddd8 <nus_received_cb_handler+0x1c4>)
   1dc48:	4864      	ldr	r0, [pc, #400]	; (1dddc <nus_received_cb_handler+0x1c8>)
    if(m_available_size52 == 0){
   1dc4a:	4d65      	ldr	r5, [pc, #404]	; (1dde0 <nus_received_cb_handler+0x1cc>)
            LOG_INF("In Start_DFU");
   1dc4c:	4965      	ldr	r1, [pc, #404]	; (1dde4 <nus_received_cb_handler+0x1d0>)
   1dc4e:	1ac0      	subs	r0, r0, r3
   1dc50:	08c0      	lsrs	r0, r0, #3
   1dc52:	0184      	lsls	r4, r0, #6
   1dc54:	f044 0603 	orr.w	r6, r4, #3
   1dc58:	4630      	mov	r0, r6
   1dc5a:	f019 fc19 	bl	37490 <log_string_sync>
    if(m_available_size52 == 0){
   1dc5e:	682b      	ldr	r3, [r5, #0]
   1dc60:	b9f3      	cbnz	r3, 1dca0 <nus_received_cb_handler+0x8c>
    err = app_flash_get_DevInf(nrf52buffer,6);  
   1dc62:	2106      	movs	r1, #6
   1dc64:	a802      	add	r0, sp, #8
   1dc66:	f019 f918 	bl	36e9a <app_flash_get_DevInf>
    if(err != 0){
   1dc6a:	4602      	mov	r2, r0
   1dc6c:	b118      	cbz	r0, 1dc76 <nus_received_cb_handler+0x62>
        LOG_INF("Error Dev Info get %d",err);
   1dc6e:	495e      	ldr	r1, [pc, #376]	; (1dde8 <nus_received_cb_handler+0x1d4>)
   1dc70:	4630      	mov	r0, r6
   1dc72:	f019 fc0d 	bl	37490 <log_string_sync>
    m_cur_majorfw52 = nrf52buffer[0];
   1dc76:	4b5d      	ldr	r3, [pc, #372]	; (1ddec <nus_received_cb_handler+0x1d8>)
   1dc78:	f89d 6008 	ldrb.w	r6, [sp, #8]
   1dc7c:	701e      	strb	r6, [r3, #0]
    m_cur_minorfw52 = nrf52buffer[1];
   1dc7e:	4b5c      	ldr	r3, [pc, #368]	; (1ddf0 <nus_received_cb_handler+0x1dc>)
   1dc80:	f89d 7009 	ldrb.w	r7, [sp, #9]
   1dc84:	701f      	strb	r7, [r3, #0]
    m_available_size52 = sys_get_le32(&nrf52buffer[2]);
   1dc86:	f10d 000a 	add.w	r0, sp, #10
   1dc8a:	f019 f85a 	bl	36d42 <sys_get_le32>
        LOG_INF("nRF52: Available Space %d FwVersion %x.%x \n",m_available_size52,m_cur_majorfw52,m_cur_minorfw52);
   1dc8e:	4959      	ldr	r1, [pc, #356]	; (1ddf4 <nus_received_cb_handler+0x1e0>)
    m_available_size52 = sys_get_le32(&nrf52buffer[2]);
   1dc90:	6028      	str	r0, [r5, #0]
   1dc92:	4602      	mov	r2, r0
        LOG_INF("nRF52: Available Space %d FwVersion %x.%x \n",m_available_size52,m_cur_majorfw52,m_cur_minorfw52);
   1dc94:	9700      	str	r7, [sp, #0]
   1dc96:	4633      	mov	r3, r6
   1dc98:	f044 0003 	orr.w	r0, r4, #3
   1dc9c:	f019 fbf8 	bl	37490 <log_string_sync>
    if(m_available_size91 == 0){
   1dca0:	4b55      	ldr	r3, [pc, #340]	; (1ddf8 <nus_received_cb_handler+0x1e4>)
   1dca2:	681a      	ldr	r2, [r3, #0]
   1dca4:	b922      	cbnz	r2, 1dcb0 <nus_received_cb_handler+0x9c>
        app_cmd_request(CMD_OP_DEVINF91,NULL,0);
   1dca6:	4611      	mov	r1, r2
   1dca8:	2002      	movs	r0, #2
   1dcaa:	f000 ffdd 	bl	1ec68 <app_cmd_request>
   1dcae:	e7c8      	b.n	1dc42 <nus_received_cb_handler+0x2e>
       send_deviceinfo(); 
   1dcb0:	f7ff ff0c 	bl	1dacc <send_deviceinfo>
   1dcb4:	e7c5      	b.n	1dc42 <nus_received_cb_handler+0x2e>
            cur_image_file_size = sys_get_le32(&p_img_data[0]);
   1dcb6:	f019 f844 	bl	36d42 <sys_get_le32>
   1dcba:	4e50      	ldr	r6, [pc, #320]	; (1ddfc <nus_received_cb_handler+0x1e8>)
            more_updates = p_img_data[img_data_len-1];
   1dcbc:	5d2b      	ldrb	r3, [r5, r4]
            cur_image_file_size = sys_get_le32(&p_img_data[0]);
   1dcbe:	6030      	str	r0, [r6, #0]
   1dcc0:	4602      	mov	r2, r0
   1dcc2:	4c46      	ldr	r4, [pc, #280]	; (1dddc <nus_received_cb_handler+0x1c8>)
   1dcc4:	4844      	ldr	r0, [pc, #272]	; (1ddd8 <nus_received_cb_handler+0x1c4>)
            more_updates = p_img_data[img_data_len-1];
   1dcc6:	4d4e      	ldr	r5, [pc, #312]	; (1de00 <nus_received_cb_handler+0x1ec>)
            LOG_INF("Image file size: %d Image Type Received: %x", cur_image_file_size,more_updates);
   1dcc8:	494e      	ldr	r1, [pc, #312]	; (1de04 <nus_received_cb_handler+0x1f0>)
            more_updates = p_img_data[img_data_len-1];
   1dcca:	702b      	strb	r3, [r5, #0]
   1dccc:	1a24      	subs	r4, r4, r0
   1dcce:	08e4      	lsrs	r4, r4, #3
            LOG_INF("Image file size: %d Image Type Received: %x", cur_image_file_size,more_updates);
   1dcd0:	01a4      	lsls	r4, r4, #6
   1dcd2:	f044 0003 	orr.w	r0, r4, #3
   1dcd6:	f019 fbdb 	bl	37490 <log_string_sync>
            if(more_updates == UPDATE_NRF91){
   1dcda:	782b      	ldrb	r3, [r5, #0]
   1dcdc:	2b01      	cmp	r3, #1
   1dcde:	d109      	bne.n	1dcf4 <nus_received_cb_handler+0xe0>
                cmd_request_flash_erase(0, CEIL_DIV(cur_image_file_size, 0x1000));
   1dce0:	6831      	ldr	r1, [r6, #0]
                cur_image_file_type = IMAGE_TYPE_NRF91;
   1dce2:	4a49      	ldr	r2, [pc, #292]	; (1de08 <nus_received_cb_handler+0x1f4>)
                cmd_request_flash_erase(0, CEIL_DIV(cur_image_file_size, 0x1000));
   1dce4:	f601 71ff 	addw	r1, r1, #4095	; 0xfff
   1dce8:	f3c1 310f 	ubfx	r1, r1, #12, #16
   1dcec:	2000      	movs	r0, #0
                cur_image_file_type = IMAGE_TYPE_NRF91;
   1dcee:	7013      	strb	r3, [r2, #0]
                cmd_request_flash_erase(0, CEIL_DIV(cur_image_file_size, 0x1000));
   1dcf0:	f019 f849 	bl	36d86 <cmd_request_flash_erase>
            if(more_updates == UPDATE_NRF52){
   1dcf4:	782b      	ldrb	r3, [r5, #0]
   1dcf6:	b923      	cbnz	r3, 1dd02 <nus_received_cb_handler+0xee>
                cur_image_file_type = IMAGE_TYPE_NRF52;
   1dcf8:	4a43      	ldr	r2, [pc, #268]	; (1de08 <nus_received_cb_handler+0x1f4>)
                k_work_submit(&wk_self_info); // Start Receiving in Function
   1dcfa:	4844      	ldr	r0, [pc, #272]	; (1de0c <nus_received_cb_handler+0x1f8>)
                cur_image_file_type = IMAGE_TYPE_NRF52;
   1dcfc:	7013      	strb	r3, [r2, #0]
                k_work_submit(&wk_self_info); // Start Receiving in Function
   1dcfe:	f012 fc7f 	bl	30600 <k_work_submit>
            if(more_updates == UPDATE_BOTH){
   1dd02:	782b      	ldrb	r3, [r5, #0]
   1dd04:	2b02      	cmp	r3, #2
   1dd06:	d19c      	bne.n	1dc42 <nus_received_cb_handler+0x2e>
                cmd_request_flash_erase(0, CEIL_DIV(cur_image_file_size, 0x1000));
   1dd08:	6831      	ldr	r1, [r6, #0]
                cur_image_file_type = IMAGE_TYPE_NRF91;
   1dd0a:	4b3f      	ldr	r3, [pc, #252]	; (1de08 <nus_received_cb_handler+0x1f4>)
                cmd_request_flash_erase(0, CEIL_DIV(cur_image_file_size, 0x1000));
   1dd0c:	f601 71ff 	addw	r1, r1, #4095	; 0xfff
                cur_image_file_type = IMAGE_TYPE_NRF91;
   1dd10:	2201      	movs	r2, #1
                cmd_request_flash_erase(0, CEIL_DIV(cur_image_file_size, 0x1000));
   1dd12:	f3c1 310f 	ubfx	r1, r1, #12, #16
   1dd16:	2000      	movs	r0, #0
                cur_image_file_type = IMAGE_TYPE_NRF91;
   1dd18:	701a      	strb	r2, [r3, #0]
                cmd_request_flash_erase(0, CEIL_DIV(cur_image_file_size, 0x1000));
   1dd1a:	f019 f834 	bl	36d86 <cmd_request_flash_erase>
   1dd1e:	e790      	b.n	1dc42 <nus_received_cb_handler+0x2e>
            buffer_len = 0;
   1dd20:	4a3b      	ldr	r2, [pc, #236]	; (1de10 <nus_received_cb_handler+0x1fc>)
   1dd22:	2300      	movs	r3, #0
   1dd24:	6013      	str	r3, [r2, #0]
            cur_img_offset = 0;
   1dd26:	4a3b      	ldr	r2, [pc, #236]	; (1de14 <nus_received_cb_handler+0x200>)
   1dd28:	6013      	str	r3, [r2, #0]
            cur_image_file_size = 0;
   1dd2a:	4a34      	ldr	r2, [pc, #208]	; (1ddfc <nus_received_cb_handler+0x1e8>)
            ble_send_req(RSP_START_SELF_UPDATE);
   1dd2c:	200a      	movs	r0, #10
            cur_image_file_size = 0;
   1dd2e:	6013      	str	r3, [r2, #0]
                ble_send_req(REQ_GET_IMG_DATA);
   1dd30:	f7ff fdb0 	bl	1d894 <ble_send_req>
}
   1dd34:	e785      	b.n	1dc42 <nus_received_cb_handler+0x2e>
   1dd36:	4b28      	ldr	r3, [pc, #160]	; (1ddd8 <nus_received_cb_handler+0x1c4>)
   1dd38:	4828      	ldr	r0, [pc, #160]	; (1dddc <nus_received_cb_handler+0x1c8>)
            LOG_INF("Done Updating Chips");
   1dd3a:	4937      	ldr	r1, [pc, #220]	; (1de18 <nus_received_cb_handler+0x204>)
   1dd3c:	1ac0      	subs	r0, r0, r3
   1dd3e:	08c0      	lsrs	r0, r0, #3
   1dd40:	0180      	lsls	r0, r0, #6
   1dd42:	f040 0003 	orr.w	r0, r0, #3
   1dd46:	f019 fba3 	bl	37490 <log_string_sync>
            buffer_len = 0;
   1dd4a:	4a31      	ldr	r2, [pc, #196]	; (1de10 <nus_received_cb_handler+0x1fc>)
   1dd4c:	2300      	movs	r3, #0
   1dd4e:	6013      	str	r3, [r2, #0]
            cur_img_offset = 0;
   1dd50:	4a30      	ldr	r2, [pc, #192]	; (1de14 <nus_received_cb_handler+0x200>)
   1dd52:	6013      	str	r3, [r2, #0]
            cur_image_file_size = 0;
   1dd54:	4a29      	ldr	r2, [pc, #164]	; (1ddfc <nus_received_cb_handler+0x1e8>)
   1dd56:	6013      	str	r3, [r2, #0]
            break;
   1dd58:	e773      	b.n	1dc42 <nus_received_cb_handler+0x2e>
            memcpy(&m_cmd_buffer[8 + buffer_len], p_img_data, img_data_len);
   1dd5a:	4f2d      	ldr	r7, [pc, #180]	; (1de10 <nus_received_cb_handler+0x1fc>)
   1dd5c:	4e2d      	ldr	r6, [pc, #180]	; (1de14 <nus_received_cb_handler+0x200>)
   1dd5e:	683d      	ldr	r5, [r7, #0]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1dd60:	4601      	mov	r1, r0
   1dd62:	482e      	ldr	r0, [pc, #184]	; (1de1c <nus_received_cb_handler+0x208>)
   1dd64:	4622      	mov	r2, r4
   1dd66:	4428      	add	r0, r5
   1dd68:	f01c fbcb 	bl	3a502 <memcpy>
            buffer_len += img_data_len;
   1dd6c:	192a      	adds	r2, r5, r4
            if (buffer_len == IMG_BLOCK_SIZE || buffer_len == cur_image_file_size - cur_img_offset){//IMG_BLOCK_SIZE 1024
   1dd6e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1dd72:	6830      	ldr	r0, [r6, #0]
   1dd74:	4d21      	ldr	r5, [pc, #132]	; (1ddfc <nus_received_cb_handler+0x1e8>)
            buffer_len += img_data_len;
   1dd76:	603a      	str	r2, [r7, #0]
            if (buffer_len == IMG_BLOCK_SIZE || buffer_len == cur_image_file_size - cur_img_offset){//IMG_BLOCK_SIZE 1024
   1dd78:	d003      	beq.n	1dd82 <nus_received_cb_handler+0x16e>
   1dd7a:	682b      	ldr	r3, [r5, #0]
   1dd7c:	1a1b      	subs	r3, r3, r0
   1dd7e:	429a      	cmp	r2, r3
   1dd80:	d125      	bne.n	1ddce <nus_received_cb_handler+0x1ba>
                sys_put_le32(cur_img_offset, &m_cmd_buffer[0]);
   1dd82:	4927      	ldr	r1, [pc, #156]	; (1de20 <nus_received_cb_handler+0x20c>)
   1dd84:	f018 ffd4 	bl	36d30 <sys_put_le32>
                sys_put_le32(buffer_len, &m_cmd_buffer[4]);
   1dd88:	4926      	ldr	r1, [pc, #152]	; (1de24 <nus_received_cb_handler+0x210>)
   1dd8a:	4610      	mov	r0, r2
   1dd8c:	f018 ffd0 	bl	36d30 <sys_put_le32>
                if(cur_image_file_type == IMAGE_TYPE_NRF91){
   1dd90:	4b1d      	ldr	r3, [pc, #116]	; (1de08 <nus_received_cb_handler+0x1f4>)
   1dd92:	781b      	ldrb	r3, [r3, #0]
   1dd94:	2b01      	cmp	r3, #1
   1dd96:	d116      	bne.n	1ddc6 <nus_received_cb_handler+0x1b2>
                    cmd_request_flash_write(m_cmd_buffer,buffer_len+8);
   1dd98:	3208      	adds	r2, #8
   1dd9a:	4821      	ldr	r0, [pc, #132]	; (1de20 <nus_received_cb_handler+0x20c>)
   1dd9c:	b291      	uxth	r1, r2
   1dd9e:	f018 ffed 	bl	36d7c <cmd_request_flash_write>
                cur_img_offset += buffer_len;
   1dda2:	6832      	ldr	r2, [r6, #0]
   1dda4:	683b      	ldr	r3, [r7, #0]
   1dda6:	480d      	ldr	r0, [pc, #52]	; (1dddc <nus_received_cb_handler+0x1c8>)
                LOG_INF("Send Bytes %d/%d", cur_img_offset, cur_image_file_size);
   1dda8:	491f      	ldr	r1, [pc, #124]	; (1de28 <nus_received_cb_handler+0x214>)
                cur_img_offset += buffer_len;
   1ddaa:	441a      	add	r2, r3
   1ddac:	4b0a      	ldr	r3, [pc, #40]	; (1ddd8 <nus_received_cb_handler+0x1c4>)
   1ddae:	6032      	str	r2, [r6, #0]
   1ddb0:	1ac0      	subs	r0, r0, r3
   1ddb2:	08c0      	lsrs	r0, r0, #3
                LOG_INF("Send Bytes %d/%d", cur_img_offset, cur_image_file_size);
   1ddb4:	0180      	lsls	r0, r0, #6
   1ddb6:	682b      	ldr	r3, [r5, #0]
   1ddb8:	f040 0003 	orr.w	r0, r0, #3
   1ddbc:	f019 fb68 	bl	37490 <log_string_sync>
                buffer_len = 0;
   1ddc0:	2300      	movs	r3, #0
   1ddc2:	603b      	str	r3, [r7, #0]
   1ddc4:	e73d      	b.n	1dc42 <nus_received_cb_handler+0x2e>
                    k_work_submit(&wk_self_update);
   1ddc6:	4819      	ldr	r0, [pc, #100]	; (1de2c <nus_received_cb_handler+0x218>)
   1ddc8:	f012 fc1a 	bl	30600 <k_work_submit>
   1ddcc:	e7e9      	b.n	1dda2 <nus_received_cb_handler+0x18e>
                ble_send_req(REQ_GET_IMG_DATA);
   1ddce:	2002      	movs	r0, #2
   1ddd0:	e7ae      	b.n	1dd30 <nus_received_cb_handler+0x11c>
   1ddd2:	bf00      	nop
   1ddd4:	200021ec 	.word	0x200021ec
   1ddd8:	0003b448 	.word	0x0003b448
   1dddc:	0003b4c8 	.word	0x0003b4c8
   1dde0:	200021f0 	.word	0x200021f0
   1dde4:	0003c37e 	.word	0x0003c37e
   1dde8:	0003c38b 	.word	0x0003c38b
   1ddec:	20003b63 	.word	0x20003b63
   1ddf0:	20003b65 	.word	0x20003b65
   1ddf4:	0003c3a1 	.word	0x0003c3a1
   1ddf8:	200021f4 	.word	0x200021f4
   1ddfc:	200021e4 	.word	0x200021e4
   1de00:	200009bc 	.word	0x200009bc
   1de04:	0003c3cd 	.word	0x0003c3cd
   1de08:	2000375a 	.word	0x2000375a
   1de0c:	200021f8 	.word	0x200021f8
   1de10:	200021e0 	.word	0x200021e0
   1de14:	200021e8 	.word	0x200021e8
   1de18:	0003c3f9 	.word	0x0003c3f9
   1de1c:	20003763 	.word	0x20003763
   1de20:	2000375b 	.word	0x2000375b
   1de24:	2000375f 	.word	0x2000375f
   1de28:	0003c40d 	.word	0x0003c40d
   1de2c:	20002208 	.word	0x20002208

0001de30 <cmd_request_flash_done>:
}

/**@brief Request to indicate image transferring done.
 */
uint32_t cmd_request_flash_done(void)
{
   1de30:	b507      	push	{r0, r1, r2, lr}
 

    uint8_t p_data[4];
    sys_put_le32(cur_image_file_size, &p_data[0]);
   1de32:	4b07      	ldr	r3, [pc, #28]	; (1de50 <cmd_request_flash_done+0x20>)
   1de34:	a901      	add	r1, sp, #4
   1de36:	6818      	ldr	r0, [r3, #0]
   1de38:	f018 ff7a 	bl	36d30 <sys_put_le32>

    return app_cmd_request(CMD_OP_FLASH_DONE_91, p_data, sizeof(p_data));
   1de3c:	2204      	movs	r2, #4
   1de3e:	eb0d 0102 	add.w	r1, sp, r2
   1de42:	2037      	movs	r0, #55	; 0x37
   1de44:	f000 ff10 	bl	1ec68 <app_cmd_request>
}
   1de48:	b003      	add	sp, #12
   1de4a:	f85d fb04 	ldr.w	pc, [sp], #4
   1de4e:	bf00      	nop
   1de50:	200021e4 	.word	0x200021e4

0001de54 <rsp_cb_flash_write>:
    if (cur_img_offset == cur_image_file_size)
   1de54:	4a0b      	ldr	r2, [pc, #44]	; (1de84 <rsp_cb_flash_write+0x30>)
   1de56:	490c      	ldr	r1, [pc, #48]	; (1de88 <rsp_cb_flash_write+0x34>)
{
   1de58:	b508      	push	{r3, lr}
    if (cur_img_offset == cur_image_file_size)
   1de5a:	6809      	ldr	r1, [r1, #0]
   1de5c:	6813      	ldr	r3, [r2, #0]
   1de5e:	428b      	cmp	r3, r1
   1de60:	d108      	bne.n	1de74 <rsp_cb_flash_write+0x20>
        cur_img_offset = 0;
   1de62:	2300      	movs	r3, #0
        ble_send_req(REQ_TX_SUCCESS);
   1de64:	2007      	movs	r0, #7
        cur_img_offset = 0;
   1de66:	6013      	str	r3, [r2, #0]
        ble_send_req(REQ_TX_SUCCESS);
   1de68:	f7ff fd14 	bl	1d894 <ble_send_req>
}
   1de6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        cmd_request_flash_done();
   1de70:	f7ff bfde 	b.w	1de30 <cmd_request_flash_done>
    else if (cur_img_offset > 0)
   1de74:	b123      	cbz	r3, 1de80 <rsp_cb_flash_write+0x2c>
}
   1de76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       ble_send_req(REQ_GET_IMG_DATA);
   1de7a:	2002      	movs	r0, #2
   1de7c:	f7ff bd0a 	b.w	1d894 <ble_send_req>
}
   1de80:	bd08      	pop	{r3, pc}
   1de82:	bf00      	nop
   1de84:	200021e8 	.word	0x200021e8
   1de88:	200021e4 	.word	0x200021e4

0001de8c <initalize_dfu_module>:

//Helper for init
void initalize_dfu_module(){
   1de8c:	b508      	push	{r3, lr}
    

    //Init Worker Items
    k_work_init(&wk_self_update,wk_self_update_handler);
   1de8e:	492c      	ldr	r1, [pc, #176]	; (1df40 <initalize_dfu_module+0xb4>)
   1de90:	482c      	ldr	r0, [pc, #176]	; (1df44 <initalize_dfu_module+0xb8>)
   1de92:	f012 fb29 	bl	304e8 <k_work_init>
    k_work_init(&wk_self_info,wk_self_info_handler);
   1de96:	492c      	ldr	r1, [pc, #176]	; (1df48 <initalize_dfu_module+0xbc>)
   1de98:	482c      	ldr	r0, [pc, #176]	; (1df4c <initalize_dfu_module+0xc0>)
   1de9a:	f012 fb25 	bl	304e8 <k_work_init>
    k_work_init(&wk_update_mcuboot_flag, wk_update_mcuboot_flag_handler);
   1de9e:	492c      	ldr	r1, [pc, #176]	; (1df50 <initalize_dfu_module+0xc4>)
   1dea0:	482c      	ldr	r0, [pc, #176]	; (1df54 <initalize_dfu_module+0xc8>)
   1dea2:	f012 fb21 	bl	304e8 <k_work_init>
    
    //Add Responses to Flash Commands From 91
    app_cmd_add(CMD_OP_FLASH_WRITE_91, NULL, rsp_cb_flash_write);
   1dea6:	4a2c      	ldr	r2, [pc, #176]	; (1df58 <initalize_dfu_module+0xcc>)
   1dea8:	2100      	movs	r1, #0
   1deaa:	2033      	movs	r0, #51	; 0x33
   1deac:	f000 fe92 	bl	1ebd4 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_ERASE_91, NULL, rsp_cb_flash_erase);
   1deb0:	4a2a      	ldr	r2, [pc, #168]	; (1df5c <initalize_dfu_module+0xd0>)
   1deb2:	2100      	movs	r1, #0
   1deb4:	2034      	movs	r0, #52	; 0x34
   1deb6:	f000 fe8d 	bl	1ebd4 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_DONE_91, NULL, rsp_cb_flash_done);
   1deba:	4a29      	ldr	r2, [pc, #164]	; (1df60 <initalize_dfu_module+0xd4>)
   1debc:	2100      	movs	r1, #0
   1debe:	2037      	movs	r0, #55	; 0x37
   1dec0:	f000 fe88 	bl	1ebd4 <app_cmd_add>

    app_cmd_add(CMD_OP_FLASH_READ_91, NULL, NULL);
   1dec4:	2200      	movs	r2, #0
   1dec6:	4611      	mov	r1, r2
   1dec8:	2032      	movs	r0, #50	; 0x32
   1deca:	f000 fe83 	bl	1ebd4 <app_cmd_add>

    app_cmd_add(CMD_OP_DEVINF91,NULL,rsp_dev_fwinfo91);
   1dece:	4a25      	ldr	r2, [pc, #148]	; (1df64 <initalize_dfu_module+0xd8>)
   1ded0:	2100      	movs	r1, #0
   1ded2:	2002      	movs	r0, #2
   1ded4:	f000 fe7e 	bl	1ebd4 <app_cmd_add>
    app_cmd_add(CMD_OP_DEVINF52,req_dev_fwinfo52,NULL);
   1ded8:	4923      	ldr	r1, [pc, #140]	; (1df68 <initalize_dfu_module+0xdc>)
   1deda:	2200      	movs	r2, #0
   1dedc:	2001      	movs	r0, #1
   1dede:	f000 fe79 	bl	1ebd4 <app_cmd_add>

    //Register flash related commands
    app_cmd_add(CMD_OP_FLASH_INFO_52,  req_cb_flash_info,NULL);
   1dee2:	4922      	ldr	r1, [pc, #136]	; (1df6c <initalize_dfu_module+0xe0>)
   1dee4:	2200      	movs	r2, #0
   1dee6:	2021      	movs	r0, #33	; 0x21
   1dee8:	f000 fe74 	bl	1ebd4 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_WRITE_52, req_cb_flash_write, NULL);
   1deec:	4920      	ldr	r1, [pc, #128]	; (1df70 <initalize_dfu_module+0xe4>)
   1deee:	2200      	movs	r2, #0
   1def0:	2023      	movs	r0, #35	; 0x23
   1def2:	f000 fe6f 	bl	1ebd4 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_ERASE_52, req_cb_flash_erase, NULL);
   1def6:	491f      	ldr	r1, [pc, #124]	; (1df74 <initalize_dfu_module+0xe8>)
   1def8:	2200      	movs	r2, #0
   1defa:	2024      	movs	r0, #36	; 0x24
   1defc:	f000 fe6a 	bl	1ebd4 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_DONE_52, req_cb_flash_done, NULL);
   1df00:	491d      	ldr	r1, [pc, #116]	; (1df78 <initalize_dfu_module+0xec>)
   1df02:	2200      	movs	r2, #0
   1df04:	2027      	movs	r0, #39	; 0x27
   1df06:	f000 fe65 	bl	1ebd4 <app_cmd_add>

    app_cmd_add(CMD_OP_FLASH_READ_52,  req_cb_flash_read, NULL);
   1df0a:	491c      	ldr	r1, [pc, #112]	; (1df7c <initalize_dfu_module+0xf0>)
   1df0c:	2200      	movs	r2, #0
   1df0e:	2022      	movs	r0, #34	; 0x22
   1df10:	f000 fe60 	bl	1ebd4 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_CRC_52,   req_cb_flash_crc, NULL);
   1df14:	491a      	ldr	r1, [pc, #104]	; (1df80 <initalize_dfu_module+0xf4>)
   1df16:	2200      	movs	r2, #0
   1df18:	2025      	movs	r0, #37	; 0x25
   1df1a:	f000 fe5b 	bl	1ebd4 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_START_52, req_cb_flash_start, NULL);
   1df1e:	4919      	ldr	r1, [pc, #100]	; (1df84 <initalize_dfu_module+0xf8>)
   1df20:	2200      	movs	r2, #0
   1df22:	2026      	movs	r0, #38	; 0x26
   1df24:	f000 fe56 	bl	1ebd4 <app_cmd_add>
   1df28:	4b17      	ldr	r3, [pc, #92]	; (1df88 <initalize_dfu_module+0xfc>)
   1df2a:	4818      	ldr	r0, [pc, #96]	; (1df8c <initalize_dfu_module+0x100>)

    LOG_INF("Initialized DFU Module");
   1df2c:	4918      	ldr	r1, [pc, #96]	; (1df90 <initalize_dfu_module+0x104>)
   1df2e:	1ac0      	subs	r0, r0, r3
   1df30:	08c0      	lsrs	r0, r0, #3
   1df32:	0180      	lsls	r0, r0, #6
}
   1df34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    LOG_INF("Initialized DFU Module");
   1df38:	f040 0003 	orr.w	r0, r0, #3
   1df3c:	f019 baa8 	b.w	37490 <log_string_sync>
   1df40:	0001d979 	.word	0x0001d979
   1df44:	20002208 	.word	0x20002208
   1df48:	0001d90d 	.word	0x0001d90d
   1df4c:	200021f8 	.word	0x200021f8
   1df50:	0001da79 	.word	0x0001da79
   1df54:	20002218 	.word	0x20002218
   1df58:	0001de55 	.word	0x0001de55
   1df5c:	0001d8b1 	.word	0x0001d8b1
   1df60:	0001d5bd 	.word	0x0001d5bd
   1df64:	0001db3d 	.word	0x0001db3d
   1df68:	0001d5dd 	.word	0x0001d5dd
   1df6c:	00036d5b 	.word	0x00036d5b
   1df70:	0001d741 	.word	0x0001d741
   1df74:	0001d689 	.word	0x0001d689
   1df78:	0001d7e1 	.word	0x0001d7e1
   1df7c:	0001d615 	.word	0x0001d615
   1df80:	0001d6e1 	.word	0x0001d6e1
   1df84:	0001d5ad 	.word	0x0001d5ad
   1df88:	0003b448 	.word	0x0003b448
   1df8c:	0003b4c8 	.word	0x0003b4c8
   1df90:	0003c41e 	.word	0x0003c41e

0001df94 <reset_memory_slab>:
   1df94:	4b15      	ldr	r3, [pc, #84]	; (1dfec <reset_memory_slab+0x58>)
   1df96:	4816      	ldr	r0, [pc, #88]	; (1dff0 <reset_memory_slab+0x5c>)
    return 0;
}

static void reset_memory_slab(){

    LOG_DBG("Reseting Memory Slab, Block Count %d",block_count);
   1df98:	4a16      	ldr	r2, [pc, #88]	; (1dff4 <reset_memory_slab+0x60>)
   1df9a:	4917      	ldr	r1, [pc, #92]	; (1dff8 <reset_memory_slab+0x64>)
   1df9c:	1ac0      	subs	r0, r0, r3
static void reset_memory_slab(){
   1df9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfa2:	08c0      	lsrs	r0, r0, #3
    LOG_DBG("Reseting Memory Slab, Block Count %d",block_count);
   1dfa4:	4e15      	ldr	r6, [pc, #84]	; (1dffc <reset_memory_slab+0x68>)
   1dfa6:	4c16      	ldr	r4, [pc, #88]	; (1e000 <reset_memory_slab+0x6c>)
   1dfa8:	7833      	ldrb	r3, [r6, #0]

            //Free Used Block
#if DBG_SHOW_BUFFER_LOGIK
            LOG_DBG("Free Slab , idx %d",i);
#endif
            k_mem_slab_free(&uart_slab, (void **)&(block_list[i].buffer_ptr));
   1dfaa:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1e008 <reset_memory_slab+0x74>
    LOG_DBG("Reseting Memory Slab, Block Count %d",block_count);
   1dfae:	0180      	lsls	r0, r0, #6
   1dfb0:	f040 0004 	orr.w	r0, r0, #4
   1dfb4:	f019 fa6c 	bl	37490 <log_string_sync>
    for(uint16_t i = 0; i < UART_RX_BUF_NUM ; i++){
   1dfb8:	2700      	movs	r7, #0

            //Reset All entrys
            block_list[i].buffer_ptr=NULL;
   1dfba:	463d      	mov	r5, r7
        if(block_list[i].buffer_ptr != NULL){
   1dfbc:	6823      	ldr	r3, [r4, #0]
   1dfbe:	b143      	cbz	r3, 1dfd2 <reset_memory_slab+0x3e>
            k_mem_slab_free(&uart_slab, (void **)&(block_list[i].buffer_ptr));
   1dfc0:	4621      	mov	r1, r4
   1dfc2:	4640      	mov	r0, r8
   1dfc4:	f011 fa58 	bl	2f478 <k_mem_slab_free>
            block_list[i].buffer_ptr=NULL;
   1dfc8:	6025      	str	r5, [r4, #0]
            block_list[i].in_use_app=0;
   1dfca:	7265      	strb	r5, [r4, #9]
            block_list[i].in_use_uart=0;
   1dfcc:	7225      	strb	r5, [r4, #8]
            block_list[i].rec_len=0;
   1dfce:	80e5      	strh	r5, [r4, #6]
            block_list[i].rec_offset=0;
   1dfd0:	80a5      	strh	r5, [r4, #4]
    for(uint16_t i = 0; i < UART_RX_BUF_NUM ; i++){
   1dfd2:	3701      	adds	r7, #1
   1dfd4:	2f04      	cmp	r7, #4
   1dfd6:	f104 040c 	add.w	r4, r4, #12
   1dfda:	d1ef      	bne.n	1dfbc <reset_memory_slab+0x28>
        }
    }
    block_count = 0;
   1dfdc:	2300      	movs	r3, #0
   1dfde:	7033      	strb	r3, [r6, #0]
    free_entry = -1;
   1dfe0:	4b08      	ldr	r3, [pc, #32]	; (1e004 <reset_memory_slab+0x70>)
   1dfe2:	22ff      	movs	r2, #255	; 0xff
   1dfe4:	701a      	strb	r2, [r3, #0]
}
   1dfe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dfea:	bf00      	nop
   1dfec:	0003b448 	.word	0x0003b448
   1dff0:	0003b578 	.word	0x0003b578
   1dff4:	0003c5d1 	.word	0x0003c5d1
   1dff8:	0003c440 	.word	0x0003c440
   1dffc:	20003b67 	.word	0x20003b67
   1e000:	20002228 	.word	0x20002228
   1e004:	200009bd 	.word	0x200009bd
   1e008:	20000b38 	.word	0x20000b38

0001e00c <get_buffer>:
static uint8_t* get_buffer(){
   1e00c:	b570      	push	{r4, r5, r6, lr}
    if(free_entry != OOB_INDX){
   1e00e:	4b16      	ldr	r3, [pc, #88]	; (1e068 <get_buffer+0x5c>)
   1e010:	4e16      	ldr	r6, [pc, #88]	; (1e06c <get_buffer+0x60>)
   1e012:	781d      	ldrb	r5, [r3, #0]
    err = k_mem_slab_alloc(&uart_slab, (void **)&(block_list[idx].buffer_ptr), K_NO_WAIT);
   1e014:	4c16      	ldr	r4, [pc, #88]	; (1e070 <get_buffer+0x64>)
   1e016:	4817      	ldr	r0, [pc, #92]	; (1e074 <get_buffer+0x68>)
    if(free_entry != OOB_INDX){
   1e018:	2d05      	cmp	r5, #5
        idx = block_count;
   1e01a:	bf0c      	ite	eq
   1e01c:	7835      	ldrbeq	r5, [r6, #0]
        free_entry = OOB_INDX;
   1e01e:	2205      	movne	r2, #5
    err = k_mem_slab_alloc(&uart_slab, (void **)&(block_list[idx].buffer_ptr), K_NO_WAIT);
   1e020:	eb05 0145 	add.w	r1, r5, r5, lsl #1
        free_entry = OOB_INDX;
   1e024:	bf18      	it	ne
   1e026:	701a      	strbne	r2, [r3, #0]
    err = k_mem_slab_alloc(&uart_slab, (void **)&(block_list[idx].buffer_ptr), K_NO_WAIT);
   1e028:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1e02c:	2200      	movs	r2, #0
   1e02e:	2300      	movs	r3, #0
   1e030:	f011 f9b6 	bl	2f3a0 <k_mem_slab_alloc>
	__ASSERT(err == 0, "Failed to alloc slab");
   1e034:	b170      	cbz	r0, 1e054 <get_buffer+0x48>
   1e036:	4910      	ldr	r1, [pc, #64]	; (1e078 <get_buffer+0x6c>)
   1e038:	4a10      	ldr	r2, [pc, #64]	; (1e07c <get_buffer+0x70>)
   1e03a:	4811      	ldr	r0, [pc, #68]	; (1e080 <get_buffer+0x74>)
   1e03c:	f240 1311 	movw	r3, #273	; 0x111
   1e040:	f019 f86b 	bl	3711a <printk>
   1e044:	480f      	ldr	r0, [pc, #60]	; (1e084 <get_buffer+0x78>)
   1e046:	f019 f868 	bl	3711a <printk>
   1e04a:	480c      	ldr	r0, [pc, #48]	; (1e07c <get_buffer+0x70>)
   1e04c:	f240 1111 	movw	r1, #273	; 0x111
   1e050:	f019 fa09 	bl	37466 <assert_post_action>
    block_count++;
   1e054:	7833      	ldrb	r3, [r6, #0]
   1e056:	3301      	adds	r3, #1
   1e058:	7033      	strb	r3, [r6, #0]
    block_list[idx].in_use_uart = 1;
   1e05a:	230c      	movs	r3, #12
   1e05c:	436b      	muls	r3, r5
   1e05e:	18e2      	adds	r2, r4, r3
   1e060:	2101      	movs	r1, #1
   1e062:	7211      	strb	r1, [r2, #8]
}
   1e064:	58e0      	ldr	r0, [r4, r3]
   1e066:	bd70      	pop	{r4, r5, r6, pc}
   1e068:	200009bd 	.word	0x200009bd
   1e06c:	20003b67 	.word	0x20003b67
   1e070:	20002228 	.word	0x20002228
   1e074:	20000b38 	.word	0x20000b38
   1e078:	0003c481 	.word	0x0003c481
   1e07c:	0003c469 	.word	0x0003c469
   1e080:	0003c48a 	.word	0x0003c48a
   1e084:	0003c4a7 	.word	0x0003c4a7

0001e088 <uart_callback>:
{
   1e088:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1e08c:	4614      	mov	r4, r2
    switch (evt->type) {
   1e08e:	780a      	ldrb	r2, [r1, #0]
{
   1e090:	460b      	mov	r3, r1
   1e092:	2a06      	cmp	r2, #6
   1e094:	d80a      	bhi.n	1e0ac <uart_callback+0x24>
   1e096:	e8df f002 	tbb	[pc, r2]
   1e09a:	0c04      	.short	0x0c04
   1e09c:	653f261d 	.word	0x653f261d
   1e0a0:	71          	.byte	0x71
   1e0a1:	00          	.byte	0x00
        if(m_tx_cb)
   1e0a2:	4b49      	ldr	r3, [pc, #292]	; (1e1c8 <uart_callback+0x140>)
   1e0a4:	681b      	ldr	r3, [r3, #0]
   1e0a6:	b10b      	cbz	r3, 1e0ac <uart_callback+0x24>
            m_tx_cb(evt->type);
   1e0a8:	2000      	movs	r0, #0
            m_tx_cb(-1);
   1e0aa:	4798      	blx	r3
}
   1e0ac:	b004      	add	sp, #16
   1e0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e0b2:	4b46      	ldr	r3, [pc, #280]	; (1e1cc <uart_callback+0x144>)
   1e0b4:	4846      	ldr	r0, [pc, #280]	; (1e1d0 <uart_callback+0x148>)
        LOG_ERR("Tx aborted");
   1e0b6:	4947      	ldr	r1, [pc, #284]	; (1e1d4 <uart_callback+0x14c>)
   1e0b8:	1ac0      	subs	r0, r0, r3
   1e0ba:	08c0      	lsrs	r0, r0, #3
   1e0bc:	0180      	lsls	r0, r0, #6
   1e0be:	f040 0001 	orr.w	r0, r0, #1
   1e0c2:	f019 f9e5 	bl	37490 <log_string_sync>
        if (m_tx_cb) {
   1e0c6:	4b40      	ldr	r3, [pc, #256]	; (1e1c8 <uart_callback+0x140>)
   1e0c8:	681b      	ldr	r3, [r3, #0]
   1e0ca:	2b00      	cmp	r3, #0
   1e0cc:	d0ee      	beq.n	1e0ac <uart_callback+0x24>
            m_tx_cb(-1);
   1e0ce:	f04f 30ff 	mov.w	r0, #4294967295
   1e0d2:	e7ea      	b.n	1e0aa <uart_callback+0x22>
        if (m_rx_cb)
   1e0d4:	4a40      	ldr	r2, [pc, #256]	; (1e1d8 <uart_callback+0x150>)
   1e0d6:	6814      	ldr	r4, [r2, #0]
   1e0d8:	2c00      	cmp	r4, #0
   1e0da:	d0e7      	beq.n	1e0ac <uart_callback+0x24>
            m_rx_cb(evt->data.rx.buf, evt->data.rx.len,evt->data.rx.offset);
   1e0dc:	891a      	ldrh	r2, [r3, #8]
   1e0de:	8999      	ldrh	r1, [r3, #12]
   1e0e0:	6858      	ldr	r0, [r3, #4]
   1e0e2:	47a0      	blx	r4
   1e0e4:	e7e2      	b.n	1e0ac <uart_callback+0x24>
		err = uart_rx_buf_rsp(uart, get_buffer(), UART_RX_LEN);
   1e0e6:	f7ff ff91 	bl	1e00c <get_buffer>
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
   1e0ea:	68a3      	ldr	r3, [r4, #8]
   1e0ec:	4601      	mov	r1, r0
   1e0ee:	691b      	ldr	r3, [r3, #16]
   1e0f0:	f44f 6282 	mov.w	r2, #1040	; 0x410
   1e0f4:	4620      	mov	r0, r4
   1e0f6:	4798      	blx	r3
		__ASSERT(err == 0, "Failed to provide new buffer");
   1e0f8:	2800      	cmp	r0, #0
   1e0fa:	d0d7      	beq.n	1e0ac <uart_callback+0x24>
   1e0fc:	4a37      	ldr	r2, [pc, #220]	; (1e1dc <uart_callback+0x154>)
   1e0fe:	4938      	ldr	r1, [pc, #224]	; (1e1e0 <uart_callback+0x158>)
   1e100:	4838      	ldr	r0, [pc, #224]	; (1e1e4 <uart_callback+0x15c>)
   1e102:	2362      	movs	r3, #98	; 0x62
   1e104:	f019 f809 	bl	3711a <printk>
   1e108:	4837      	ldr	r0, [pc, #220]	; (1e1e8 <uart_callback+0x160>)
   1e10a:	f019 f806 	bl	3711a <printk>
   1e10e:	4833      	ldr	r0, [pc, #204]	; (1e1dc <uart_callback+0x154>)
   1e110:	2162      	movs	r1, #98	; 0x62
   1e112:	f019 f9a8 	bl	37466 <assert_post_action>
   1e116:	e7c9      	b.n	1e0ac <uart_callback+0x24>
        release_buffer(evt->data.rx_buf.buf,0);
   1e118:	685a      	ldr	r2, [r3, #4]
        if(block_list[i].buffer_ptr == buff){
   1e11a:	4f34      	ldr	r7, [pc, #208]	; (1e1ec <uart_callback+0x164>)
   1e11c:	9203      	str	r2, [sp, #12]
        release_buffer(evt->data.rx_buf.buf,0);
   1e11e:	2300      	movs	r3, #0
        if(block_list[i].buffer_ptr == buff){
   1e120:	210c      	movs	r1, #12
   1e122:	fb01 f603 	mul.w	r6, r1, r3
   1e126:	fa5f f883 	uxtb.w	r8, r3
   1e12a:	59f0      	ldr	r0, [r6, r7]
   1e12c:	4282      	cmp	r2, r0
   1e12e:	d039      	beq.n	1e1a4 <uart_callback+0x11c>
    for(uint8_t i = 0; i < UART_RX_BUF_NUM ; i++){
   1e130:	3301      	adds	r3, #1
   1e132:	2b04      	cmp	r3, #4
   1e134:	d1f5      	bne.n	1e122 <uart_callback+0x9a>
   1e136:	4826      	ldr	r0, [pc, #152]	; (1e1d0 <uart_callback+0x148>)
   1e138:	4b24      	ldr	r3, [pc, #144]	; (1e1cc <uart_callback+0x144>)
        LOG_ERR("Buffer not in Registry");
   1e13a:	492d      	ldr	r1, [pc, #180]	; (1e1f0 <uart_callback+0x168>)
   1e13c:	1ac0      	subs	r0, r0, r3
   1e13e:	08c0      	lsrs	r0, r0, #3
   1e140:	0180      	lsls	r0, r0, #6
   1e142:	f040 0001 	orr.w	r0, r0, #1
   1e146:	e03b      	b.n	1e1c0 <uart_callback+0x138>
    k_mem_slab_free(&uart_slab, (void **)&buff);
   1e148:	482a      	ldr	r0, [pc, #168]	; (1e1f4 <uart_callback+0x16c>)
   1e14a:	a903      	add	r1, sp, #12
   1e14c:	f011 f994 	bl	2f478 <k_mem_slab_free>
    --block_count;
   1e150:	4a29      	ldr	r2, [pc, #164]	; (1e1f8 <uart_callback+0x170>)
    block_list[found_idx].buffer_ptr=NULL;
   1e152:	51bc      	str	r4, [r7, r6]
    --block_count;
   1e154:	7813      	ldrb	r3, [r2, #0]
    block_list[found_idx].rec_offset=0;
   1e156:	606c      	str	r4, [r5, #4]
    --block_count;
   1e158:	3b01      	subs	r3, #1
   1e15a:	7013      	strb	r3, [r2, #0]
    free_entry = found_idx;
   1e15c:	4b27      	ldr	r3, [pc, #156]	; (1e1fc <uart_callback+0x174>)
   1e15e:	f883 8000 	strb.w	r8, [r3]
        break;
   1e162:	e7a3      	b.n	1e0ac <uart_callback+0x24>
   1e164:	4b19      	ldr	r3, [pc, #100]	; (1e1cc <uart_callback+0x144>)
   1e166:	481a      	ldr	r0, [pc, #104]	; (1e1d0 <uart_callback+0x148>)
        LOG_DBG("UART_RX_DISABLED");
   1e168:	4a25      	ldr	r2, [pc, #148]	; (1e200 <uart_callback+0x178>)
   1e16a:	4926      	ldr	r1, [pc, #152]	; (1e204 <uart_callback+0x17c>)
   1e16c:	1ac0      	subs	r0, r0, r3
   1e16e:	08c0      	lsrs	r0, r0, #3
   1e170:	0180      	lsls	r0, r0, #6
   1e172:	f040 0004 	orr.w	r0, r0, #4
   1e176:	f019 f98b 	bl	37490 <log_string_sync>
   1e17a:	e797      	b.n	1e0ac <uart_callback+0x24>
   1e17c:	4b13      	ldr	r3, [pc, #76]	; (1e1cc <uart_callback+0x144>)
   1e17e:	4814      	ldr	r0, [pc, #80]	; (1e1d0 <uart_callback+0x148>)
        LOG_DBG("UART_RX_STOPPED");
   1e180:	4a1f      	ldr	r2, [pc, #124]	; (1e200 <uart_callback+0x178>)
   1e182:	4921      	ldr	r1, [pc, #132]	; (1e208 <uart_callback+0x180>)
   1e184:	1ac0      	subs	r0, r0, r3
   1e186:	08c0      	lsrs	r0, r0, #3
   1e188:	0180      	lsls	r0, r0, #6
   1e18a:	f040 0004 	orr.w	r0, r0, #4
   1e18e:	f019 f97f 	bl	37490 <log_string_sync>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1e192:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e196:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   1e198:	481c      	ldr	r0, [pc, #112]	; (1e20c <uart_callback+0x184>)
   1e19a:	e9cd 2300 	strd	r2, r3, [sp]
   1e19e:	f014 fae7 	bl	32770 <z_impl_k_timer_start>
}
   1e1a2:	e783      	b.n	1e0ac <uart_callback+0x24>
        block_list[found_idx].in_use_uart = 0;
   1e1a4:	19bd      	adds	r5, r7, r6
   1e1a6:	2300      	movs	r3, #0
    if(block_list[found_idx].in_use_app || block_list[found_idx].in_use_uart){ //If either is Activ
   1e1a8:	7a6c      	ldrb	r4, [r5, #9]
        block_list[found_idx].in_use_uart = 0;
   1e1aa:	722b      	strb	r3, [r5, #8]
    if(block_list[found_idx].in_use_app || block_list[found_idx].in_use_uart){ //If either is Activ
   1e1ac:	2c00      	cmp	r4, #0
   1e1ae:	d0cb      	beq.n	1e148 <uart_callback+0xc0>
   1e1b0:	4807      	ldr	r0, [pc, #28]	; (1e1d0 <uart_callback+0x148>)
   1e1b2:	4b06      	ldr	r3, [pc, #24]	; (1e1cc <uart_callback+0x144>)
        LOG_INF("Buffer Still in Use");
   1e1b4:	4916      	ldr	r1, [pc, #88]	; (1e210 <uart_callback+0x188>)
   1e1b6:	1ac0      	subs	r0, r0, r3
   1e1b8:	08c0      	lsrs	r0, r0, #3
   1e1ba:	0180      	lsls	r0, r0, #6
   1e1bc:	f040 0003 	orr.w	r0, r0, #3
        LOG_ERR("Buffer not in Registry");
   1e1c0:	f019 f966 	bl	37490 <log_string_sync>
        return -1;
   1e1c4:	e772      	b.n	1e0ac <uart_callback+0x24>
   1e1c6:	bf00      	nop
   1e1c8:	20002260 	.word	0x20002260
   1e1cc:	0003b448 	.word	0x0003b448
   1e1d0:	0003b578 	.word	0x0003b578
   1e1d4:	0003c4be 	.word	0x0003c4be
   1e1d8:	2000225c 	.word	0x2000225c
   1e1dc:	0003c469 	.word	0x0003c469
   1e1e0:	0003c481 	.word	0x0003c481
   1e1e4:	0003c48a 	.word	0x0003c48a
   1e1e8:	0003c4c9 	.word	0x0003c4c9
   1e1ec:	20002228 	.word	0x20002228
   1e1f0:	0003c525 	.word	0x0003c525
   1e1f4:	20000b38 	.word	0x20000b38
   1e1f8:	20003b67 	.word	0x20003b67
   1e1fc:	200009bd 	.word	0x200009bd
   1e200:	0003c5b9 	.word	0x0003c5b9
   1e204:	0003c4fc 	.word	0x0003c4fc
   1e208:	0003c511 	.word	0x0003c511
   1e20c:	20000a80 	.word	0x20000a80
   1e210:	0003c4e8 	.word	0x0003c4e8

0001e214 <uart_send>:
{
   1e214:	b538      	push	{r3, r4, r5, lr}
    if (m_device == NULL) {
   1e216:	4b10      	ldr	r3, [pc, #64]	; (1e258 <uart_send+0x44>)
{
   1e218:	4604      	mov	r4, r0
    if (m_device == NULL) {
   1e21a:	6818      	ldr	r0, [r3, #0]
{
   1e21c:	460a      	mov	r2, r1
    if (m_device == NULL) {
   1e21e:	b1b8      	cbz	r0, 1e250 <uart_send+0x3c>
    if (p_data != NULL && length != 0) {
   1e220:	b1b4      	cbz	r4, 1e250 <uart_send+0x3c>
   1e222:	b1a9      	cbz	r1, 1e250 <uart_send+0x3c>
	return api->tx(dev, buf, len, timeout);
   1e224:	6883      	ldr	r3, [r0, #8]
   1e226:	4621      	mov	r1, r4
   1e228:	685d      	ldr	r5, [r3, #4]
   1e22a:	f242 7310 	movw	r3, #10000	; 0x2710
   1e22e:	47a8      	blx	r5
        if (err < 0) {
   1e230:	1e04      	subs	r4, r0, #0
   1e232:	da0b      	bge.n	1e24c <uart_send+0x38>
   1e234:	4b09      	ldr	r3, [pc, #36]	; (1e25c <uart_send+0x48>)
   1e236:	480a      	ldr	r0, [pc, #40]	; (1e260 <uart_send+0x4c>)
            LOG_ERR("%s, err:%d", __func__, err);
   1e238:	4a0a      	ldr	r2, [pc, #40]	; (1e264 <uart_send+0x50>)
   1e23a:	490b      	ldr	r1, [pc, #44]	; (1e268 <uart_send+0x54>)
   1e23c:	1ac0      	subs	r0, r0, r3
   1e23e:	08c0      	lsrs	r0, r0, #3
   1e240:	0180      	lsls	r0, r0, #6
   1e242:	4623      	mov	r3, r4
   1e244:	f040 0001 	orr.w	r0, r0, #1
   1e248:	f019 f922 	bl	37490 <log_string_sync>
}
   1e24c:	4620      	mov	r0, r4
   1e24e:	bd38      	pop	{r3, r4, r5, pc}
        return err;
   1e250:	f04f 34ff 	mov.w	r4, #4294967295
   1e254:	e7fa      	b.n	1e24c <uart_send+0x38>
   1e256:	bf00      	nop
   1e258:	20002258 	.word	0x20002258
   1e25c:	0003b448 	.word	0x0003b448
   1e260:	0003b578 	.word	0x0003b578
   1e264:	0003c5c7 	.word	0x0003c5c7
   1e268:	0003c53c 	.word	0x0003c53c

0001e26c <uart_init>:
{
   1e26c:	b538      	push	{r3, r4, r5, lr}
   1e26e:	4602      	mov	r2, r0
    if (p_device == NULL) {
   1e270:	2800      	cmp	r0, #0
   1e272:	d045      	beq.n	1e300 <uart_init+0x94>
    m_rx_cb = NULL;
   1e274:	4c24      	ldr	r4, [pc, #144]	; (1e308 <uart_init+0x9c>)
    m_device = p_device;
   1e276:	4b25      	ldr	r3, [pc, #148]	; (1e30c <uart_init+0xa0>)
    m_rx_cb = NULL;
   1e278:	2100      	movs	r1, #0
   1e27a:	6021      	str	r1, [r4, #0]
    m_tx_cb = NULL;
   1e27c:	4c24      	ldr	r4, [pc, #144]	; (1e310 <uart_init+0xa4>)
    m_device = p_device;
   1e27e:	6018      	str	r0, [r3, #0]
    m_tx_cb = NULL;
   1e280:	6021      	str	r1, [r4, #0]
	if (api->callback_set == NULL) {
   1e282:	6881      	ldr	r1, [r0, #8]
   1e284:	680d      	ldr	r5, [r1, #0]
   1e286:	461c      	mov	r4, r3
   1e288:	2d00      	cmp	r5, #0
   1e28a:	d134      	bne.n	1e2f6 <uart_init+0x8a>
    __ASSERT(err == 0, "Failed to set callback");
   1e28c:	4921      	ldr	r1, [pc, #132]	; (1e314 <uart_init+0xa8>)
   1e28e:	4a22      	ldr	r2, [pc, #136]	; (1e318 <uart_init+0xac>)
   1e290:	4822      	ldr	r0, [pc, #136]	; (1e31c <uart_init+0xb0>)
   1e292:	23b2      	movs	r3, #178	; 0xb2
   1e294:	f018 ff41 	bl	3711a <printk>
   1e298:	4821      	ldr	r0, [pc, #132]	; (1e320 <uart_init+0xb4>)
   1e29a:	f018 ff3e 	bl	3711a <printk>
   1e29e:	481e      	ldr	r0, [pc, #120]	; (1e318 <uart_init+0xac>)
   1e2a0:	21b2      	movs	r1, #178	; 0xb2
   1e2a2:	f019 f8e0 	bl	37466 <assert_post_action>
{
   1e2a6:	2100      	movs	r1, #0
   1e2a8:	4b1e      	ldr	r3, [pc, #120]	; (1e324 <uart_init+0xb8>)
        block_list[i].buffer_ptr=NULL;
   1e2aa:	460a      	mov	r2, r1
    for(size_t i = 0; i < UART_RX_BUF_NUM ; i++){
   1e2ac:	3101      	adds	r1, #1
   1e2ae:	2904      	cmp	r1, #4
        block_list[i].buffer_ptr=NULL;
   1e2b0:	601a      	str	r2, [r3, #0]
        block_list[i].in_use_app=0;
   1e2b2:	725a      	strb	r2, [r3, #9]
        block_list[i].in_use_uart=0;
   1e2b4:	721a      	strb	r2, [r3, #8]
        block_list[i].rec_len=0;
   1e2b6:	80da      	strh	r2, [r3, #6]
        block_list[i].rec_offset=0;
   1e2b8:	809a      	strh	r2, [r3, #4]
    for(size_t i = 0; i < UART_RX_BUF_NUM ; i++){
   1e2ba:	f103 030c 	add.w	r3, r3, #12
   1e2be:	d1f5      	bne.n	1e2ac <uart_init+0x40>
    err = uart_rx_enable(m_device,get_buffer(),UART_RX_LEN, UART_RX_TIMEOUT_MS);
   1e2c0:	6824      	ldr	r4, [r4, #0]
   1e2c2:	f7ff fea3 	bl	1e00c <get_buffer>
   1e2c6:	4601      	mov	r1, r0
	return api->rx_enable(dev, buf, len, timeout);
   1e2c8:	68a3      	ldr	r3, [r4, #8]
   1e2ca:	f44f 6282 	mov.w	r2, #1040	; 0x410
   1e2ce:	68dd      	ldr	r5, [r3, #12]
   1e2d0:	4620      	mov	r0, r4
   1e2d2:	2314      	movs	r3, #20
   1e2d4:	47a8      	blx	r5
    __ASSERT(err == 0, "Failed to enable RX");
   1e2d6:	b168      	cbz	r0, 1e2f4 <uart_init+0x88>
   1e2d8:	4a0f      	ldr	r2, [pc, #60]	; (1e318 <uart_init+0xac>)
   1e2da:	490e      	ldr	r1, [pc, #56]	; (1e314 <uart_init+0xa8>)
   1e2dc:	480f      	ldr	r0, [pc, #60]	; (1e31c <uart_init+0xb0>)
   1e2de:	23c2      	movs	r3, #194	; 0xc2
   1e2e0:	f018 ff1b 	bl	3711a <printk>
   1e2e4:	4810      	ldr	r0, [pc, #64]	; (1e328 <uart_init+0xbc>)
   1e2e6:	f018 ff18 	bl	3711a <printk>
   1e2ea:	480b      	ldr	r0, [pc, #44]	; (1e318 <uart_init+0xac>)
   1e2ec:	21c2      	movs	r1, #194	; 0xc2
   1e2ee:	f019 f8ba 	bl	37466 <assert_post_action>
    return 0;
   1e2f2:	2000      	movs	r0, #0
}
   1e2f4:	bd38      	pop	{r3, r4, r5, pc}
	return api->callback_set(dev, callback, user_data);
   1e2f6:	490d      	ldr	r1, [pc, #52]	; (1e32c <uart_init+0xc0>)
   1e2f8:	47a8      	blx	r5
    __ASSERT(err == 0, "Failed to set callback");
   1e2fa:	2800      	cmp	r0, #0
   1e2fc:	d0d3      	beq.n	1e2a6 <uart_init+0x3a>
   1e2fe:	e7c5      	b.n	1e28c <uart_init+0x20>
        return -ENXIO;
   1e300:	f06f 0005 	mvn.w	r0, #5
   1e304:	e7f6      	b.n	1e2f4 <uart_init+0x88>
   1e306:	bf00      	nop
   1e308:	2000225c 	.word	0x2000225c
   1e30c:	20002258 	.word	0x20002258
   1e310:	20002260 	.word	0x20002260
   1e314:	0003c481 	.word	0x0003c481
   1e318:	0003c469 	.word	0x0003c469
   1e31c:	0003c48a 	.word	0x0003c48a
   1e320:	0003c547 	.word	0x0003c547
   1e324:	20002228 	.word	0x20002228
   1e328:	0003c560 	.word	0x0003c560
   1e32c:	0001e089 	.word	0x0001e089

0001e330 <uart_renable>:
int uart_renable(const struct device* p_device){
   1e330:	b538      	push	{r3, r4, r5, lr}
    if (p_device == NULL) {
   1e332:	4604      	mov	r4, r0
   1e334:	b960      	cbnz	r0, 1e350 <uart_renable+0x20>
   1e336:	4b22      	ldr	r3, [pc, #136]	; (1e3c0 <uart_renable+0x90>)
   1e338:	4822      	ldr	r0, [pc, #136]	; (1e3c4 <uart_renable+0x94>)
        LOG_ERR("UART must be Device");
   1e33a:	4923      	ldr	r1, [pc, #140]	; (1e3c8 <uart_renable+0x98>)
   1e33c:	1ac0      	subs	r0, r0, r3
   1e33e:	08c0      	lsrs	r0, r0, #3
   1e340:	0180      	lsls	r0, r0, #6
   1e342:	f040 0001 	orr.w	r0, r0, #1
   1e346:	f019 f8a3 	bl	37490 <log_string_sync>
        return -ENXIO;
   1e34a:	f06f 0005 	mvn.w	r0, #5
}
   1e34e:	bd38      	pop	{r3, r4, r5, pc}
    m_device = p_device;
   1e350:	4d1e      	ldr	r5, [pc, #120]	; (1e3cc <uart_renable+0x9c>)
   1e352:	6028      	str	r0, [r5, #0]
    reset_memory_slab();
   1e354:	f7ff fe1e 	bl	1df94 <reset_memory_slab>
	if (api->callback_set == NULL) {
   1e358:	68a3      	ldr	r3, [r4, #8]
   1e35a:	681b      	ldr	r3, [r3, #0]
   1e35c:	bb43      	cbnz	r3, 1e3b0 <uart_renable+0x80>
    __ASSERT(err == 0, "Failed to set callback");
   1e35e:	491c      	ldr	r1, [pc, #112]	; (1e3d0 <uart_renable+0xa0>)
   1e360:	4a1c      	ldr	r2, [pc, #112]	; (1e3d4 <uart_renable+0xa4>)
   1e362:	481d      	ldr	r0, [pc, #116]	; (1e3d8 <uart_renable+0xa8>)
   1e364:	23d5      	movs	r3, #213	; 0xd5
   1e366:	f018 fed8 	bl	3711a <printk>
   1e36a:	481c      	ldr	r0, [pc, #112]	; (1e3dc <uart_renable+0xac>)
   1e36c:	f018 fed5 	bl	3711a <printk>
   1e370:	4818      	ldr	r0, [pc, #96]	; (1e3d4 <uart_renable+0xa4>)
   1e372:	21d5      	movs	r1, #213	; 0xd5
   1e374:	f019 f877 	bl	37466 <assert_post_action>
        err = uart_rx_enable(m_device,get_buffer(),UART_RX_LEN, UART_RX_TIMEOUT_MS);
   1e378:	682c      	ldr	r4, [r5, #0]
   1e37a:	f7ff fe47 	bl	1e00c <get_buffer>
   1e37e:	4601      	mov	r1, r0
	return api->rx_enable(dev, buf, len, timeout);
   1e380:	68a3      	ldr	r3, [r4, #8]
   1e382:	f44f 6282 	mov.w	r2, #1040	; 0x410
   1e386:	68dd      	ldr	r5, [r3, #12]
   1e388:	4620      	mov	r0, r4
   1e38a:	2314      	movs	r3, #20
   1e38c:	47a8      	blx	r5
    __ASSERT(err == 0, "Failed to enable RX");
   1e38e:	2800      	cmp	r0, #0
   1e390:	d0dd      	beq.n	1e34e <uart_renable+0x1e>
   1e392:	4a10      	ldr	r2, [pc, #64]	; (1e3d4 <uart_renable+0xa4>)
   1e394:	490e      	ldr	r1, [pc, #56]	; (1e3d0 <uart_renable+0xa0>)
   1e396:	4810      	ldr	r0, [pc, #64]	; (1e3d8 <uart_renable+0xa8>)
   1e398:	23d8      	movs	r3, #216	; 0xd8
   1e39a:	f018 febe 	bl	3711a <printk>
   1e39e:	4810      	ldr	r0, [pc, #64]	; (1e3e0 <uart_renable+0xb0>)
   1e3a0:	f018 febb 	bl	3711a <printk>
   1e3a4:	480b      	ldr	r0, [pc, #44]	; (1e3d4 <uart_renable+0xa4>)
   1e3a6:	21d8      	movs	r1, #216	; 0xd8
   1e3a8:	f019 f85d 	bl	37466 <assert_post_action>
    return 0;
   1e3ac:	2000      	movs	r0, #0
   1e3ae:	e7ce      	b.n	1e34e <uart_renable+0x1e>
	return api->callback_set(dev, callback, user_data);
   1e3b0:	490c      	ldr	r1, [pc, #48]	; (1e3e4 <uart_renable+0xb4>)
   1e3b2:	4622      	mov	r2, r4
   1e3b4:	4620      	mov	r0, r4
   1e3b6:	4798      	blx	r3
    __ASSERT(err == 0, "Failed to set callback");
   1e3b8:	2800      	cmp	r0, #0
   1e3ba:	d0dd      	beq.n	1e378 <uart_renable+0x48>
   1e3bc:	e7cf      	b.n	1e35e <uart_renable+0x2e>
   1e3be:	bf00      	nop
   1e3c0:	0003b448 	.word	0x0003b448
   1e3c4:	0003b578 	.word	0x0003b578
   1e3c8:	0003c576 	.word	0x0003c576
   1e3cc:	20002258 	.word	0x20002258
   1e3d0:	0003c481 	.word	0x0003c481
   1e3d4:	0003c469 	.word	0x0003c469
   1e3d8:	0003c48a 	.word	0x0003c48a
   1e3dc:	0003c547 	.word	0x0003c547
   1e3e0:	0003c560 	.word	0x0003c560
   1e3e4:	0001e089 	.word	0x0001e089

0001e3e8 <update_expiry_function>:
void update_expiry_function(struct k_timer *timer_id){
   1e3e8:	b510      	push	{r4, lr}
   1e3ea:	4b0d      	ldr	r3, [pc, #52]	; (1e420 <update_expiry_function+0x38>)
   1e3ec:	4c0d      	ldr	r4, [pc, #52]	; (1e424 <update_expiry_function+0x3c>)
	LOG_INF("Reset Uart");
   1e3ee:	490e      	ldr	r1, [pc, #56]	; (1e428 <update_expiry_function+0x40>)
   1e3f0:	1ae4      	subs	r4, r4, r3
   1e3f2:	08e4      	lsrs	r4, r4, #3
   1e3f4:	01a4      	lsls	r4, r4, #6
   1e3f6:	f044 0003 	orr.w	r0, r4, #3
   1e3fa:	f019 f849 	bl	37490 <log_string_sync>
    err = uart_renable(m_device);
   1e3fe:	4b0b      	ldr	r3, [pc, #44]	; (1e42c <update_expiry_function+0x44>)
   1e400:	6818      	ldr	r0, [r3, #0]
   1e402:	f7ff ff95 	bl	1e330 <uart_renable>
    if(err != 0){
   1e406:	b130      	cbz	r0, 1e416 <update_expiry_function+0x2e>
        LOG_ERR("Hard Problem Enabling Uart");
   1e408:	f044 0001 	orr.w	r0, r4, #1
   1e40c:	4908      	ldr	r1, [pc, #32]	; (1e430 <update_expiry_function+0x48>)
}
   1e40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_ERR("Hard Problem Enabling Uart");
   1e412:	f019 b83d 	b.w	37490 <log_string_sync>
	z_impl_k_timer_stop(timer);
   1e416:	4807      	ldr	r0, [pc, #28]	; (1e434 <update_expiry_function+0x4c>)
}
   1e418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e41c:	f01b bff7 	b.w	3a40e <z_impl_k_timer_stop>
   1e420:	0003b448 	.word	0x0003b448
   1e424:	0003b578 	.word	0x0003b578
   1e428:	0003c58a 	.word	0x0003c58a
   1e42c:	20002258 	.word	0x20002258
   1e430:	0003c595 	.word	0x0003c595
   1e434:	20000a80 	.word	0x20000a80

0001e438 <uart_rx_cb_set>:
    m_rx_cb = cb;
   1e438:	4b01      	ldr	r3, [pc, #4]	; (1e440 <uart_rx_cb_set+0x8>)
   1e43a:	6018      	str	r0, [r3, #0]
}
   1e43c:	4770      	bx	lr
   1e43e:	bf00      	nop
   1e440:	2000225c 	.word	0x2000225c

0001e444 <uart_tx_cb_set>:
    m_tx_cb = cb;
   1e444:	4b01      	ldr	r3, [pc, #4]	; (1e44c <uart_tx_cb_set+0x8>)
   1e446:	6018      	str	r0, [r3, #0]
}
   1e448:	4770      	bx	lr
   1e44a:	bf00      	nop
   1e44c:	20002260 	.word	0x20002260

0001e450 <rsp_cb_ping>:
   1e450:	4805      	ldr	r0, [pc, #20]	; (1e468 <rsp_cb_ping+0x18>)
   1e452:	4b06      	ldr	r3, [pc, #24]	; (1e46c <rsp_cb_ping+0x1c>)
}

/**@brief Callback function for ping response. */
static void rsp_cb_ping(uint8_t* p_rsp, uint16_t rsp_len)
{
    LOG_INF("%s", __func__);
   1e454:	4a06      	ldr	r2, [pc, #24]	; (1e470 <rsp_cb_ping+0x20>)
   1e456:	4907      	ldr	r1, [pc, #28]	; (1e474 <rsp_cb_ping+0x24>)
   1e458:	1ac0      	subs	r0, r0, r3
   1e45a:	08c0      	lsrs	r0, r0, #3
   1e45c:	0180      	lsls	r0, r0, #6
   1e45e:	f040 0003 	orr.w	r0, r0, #3
   1e462:	f019 b815 	b.w	37490 <log_string_sync>
   1e466:	bf00      	nop
   1e468:	0003b4c0 	.word	0x0003b4c0
   1e46c:	0003b448 	.word	0x0003b448
   1e470:	0003c850 	.word	0x0003c850
   1e474:	0003c5e7 	.word	0x0003c5e7

0001e478 <req_cb_raw_data>:
}

/**@brief Callback function for raw_data request. */
static int req_cb_raw_data(uint8_t* p_req, uint16_t req_len, cmd_respond_t respond)
{
   1e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e47a:	4b11      	ldr	r3, [pc, #68]	; (1e4c0 <req_cb_raw_data+0x48>)
   1e47c:	4c11      	ldr	r4, [pc, #68]	; (1e4c4 <req_cb_raw_data+0x4c>)
   1e47e:	1ae4      	subs	r4, r4, r3
   1e480:	08e4      	lsrs	r4, r4, #3
    LOG_DBG("%s", __func__);
   1e482:	4b11      	ldr	r3, [pc, #68]	; (1e4c8 <req_cb_raw_data+0x50>)
   1e484:	01a4      	lsls	r4, r4, #6
{
   1e486:	460d      	mov	r5, r1
   1e488:	4607      	mov	r7, r0
   1e48a:	4616      	mov	r6, r2
    LOG_DBG("%s", __func__);
   1e48c:	490f      	ldr	r1, [pc, #60]	; (1e4cc <req_cb_raw_data+0x54>)
   1e48e:	461a      	mov	r2, r3
   1e490:	f044 0004 	orr.w	r0, r4, #4
   1e494:	f018 fffc 	bl	37490 <log_string_sync>
    char* rsp = "ok";

    // TODO: fill user function to handle raw data
    if (req_len > 0) {
   1e498:	b14d      	cbz	r5, 1e4ae <req_cb_raw_data+0x36>
        LOG_HEXDUMP_INF(p_req, MIN(req_len, 8), "raw data:");
   1e49a:	2d08      	cmp	r5, #8
   1e49c:	462b      	mov	r3, r5
   1e49e:	490c      	ldr	r1, [pc, #48]	; (1e4d0 <req_cb_raw_data+0x58>)
   1e4a0:	bf28      	it	cs
   1e4a2:	2308      	movcs	r3, #8
   1e4a4:	463a      	mov	r2, r7
   1e4a6:	f044 0003 	orr.w	r0, r4, #3
   1e4aa:	f001 ffe1 	bl	20470 <log_hexdump_sync>
    }

    respond(rsp, strlen(rsp));
   1e4ae:	4809      	ldr	r0, [pc, #36]	; (1e4d4 <req_cb_raw_data+0x5c>)
   1e4b0:	f7f9 ff7a 	bl	183a8 <strlen>
   1e4b4:	b281      	uxth	r1, r0
   1e4b6:	4807      	ldr	r0, [pc, #28]	; (1e4d4 <req_cb_raw_data+0x5c>)
   1e4b8:	47b0      	blx	r6

    return 0;
}
   1e4ba:	2000      	movs	r0, #0
   1e4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4be:	bf00      	nop
   1e4c0:	0003b448 	.word	0x0003b448
   1e4c4:	0003b4c0 	.word	0x0003b4c0
   1e4c8:	0003c85c 	.word	0x0003c85c
   1e4cc:	0003c5e3 	.word	0x0003c5e3
   1e4d0:	0003c5ea 	.word	0x0003c5ea
   1e4d4:	0003c04c 	.word	0x0003c04c

0001e4d8 <req_cb_ping>:
{
   1e4d8:	b538      	push	{r3, r4, r5, lr}
   1e4da:	480a      	ldr	r0, [pc, #40]	; (1e504 <req_cb_ping+0x2c>)
   1e4dc:	4b0a      	ldr	r3, [pc, #40]	; (1e508 <req_cb_ping+0x30>)
    respond(rsp, strlen(rsp));
   1e4de:	4d0b      	ldr	r5, [pc, #44]	; (1e50c <req_cb_ping+0x34>)
    LOG_INF("%s", __func__);
   1e4e0:	490b      	ldr	r1, [pc, #44]	; (1e510 <req_cb_ping+0x38>)
   1e4e2:	1ac0      	subs	r0, r0, r3
   1e4e4:	08c0      	lsrs	r0, r0, #3
   1e4e6:	0180      	lsls	r0, r0, #6
{
   1e4e8:	4614      	mov	r4, r2
    LOG_INF("%s", __func__);
   1e4ea:	f040 0003 	orr.w	r0, r0, #3
   1e4ee:	4a09      	ldr	r2, [pc, #36]	; (1e514 <req_cb_ping+0x3c>)
   1e4f0:	f018 ffce 	bl	37490 <log_string_sync>
    respond(rsp, strlen(rsp));
   1e4f4:	4628      	mov	r0, r5
   1e4f6:	f7f9 ff57 	bl	183a8 <strlen>
   1e4fa:	b281      	uxth	r1, r0
   1e4fc:	4628      	mov	r0, r5
   1e4fe:	47a0      	blx	r4
}
   1e500:	2000      	movs	r0, #0
   1e502:	bd38      	pop	{r3, r4, r5, pc}
   1e504:	0003b4c0 	.word	0x0003b4c0
   1e508:	0003b448 	.word	0x0003b448
   1e50c:	0003c04c 	.word	0x0003c04c
   1e510:	0003c5e7 	.word	0x0003c5e7
   1e514:	0003c844 	.word	0x0003c844

0001e518 <rsp_cb_raw_data>:

/**@brief Callback function for mtu_get response. */
static void rsp_cb_raw_data(uint8_t* p_rsp, uint16_t rsp_len)
{
   1e518:	b570      	push	{r4, r5, r6, lr}
   1e51a:	4b0e      	ldr	r3, [pc, #56]	; (1e554 <rsp_cb_raw_data+0x3c>)
   1e51c:	4c0e      	ldr	r4, [pc, #56]	; (1e558 <rsp_cb_raw_data+0x40>)
   1e51e:	1ae4      	subs	r4, r4, r3
   1e520:	08e4      	lsrs	r4, r4, #3
    LOG_DBG("%s", __func__);
   1e522:	4b0e      	ldr	r3, [pc, #56]	; (1e55c <rsp_cb_raw_data+0x44>)
   1e524:	01a4      	lsls	r4, r4, #6
{
   1e526:	460d      	mov	r5, r1
   1e528:	4606      	mov	r6, r0
    LOG_DBG("%s", __func__);
   1e52a:	490d      	ldr	r1, [pc, #52]	; (1e560 <rsp_cb_raw_data+0x48>)
   1e52c:	461a      	mov	r2, r3
   1e52e:	f044 0004 	orr.w	r0, r4, #4
   1e532:	f018 ffad 	bl	37490 <log_string_sync>

    if (rsp_len > 0) {
   1e536:	b15d      	cbz	r5, 1e550 <rsp_cb_raw_data+0x38>
        LOG_HEXDUMP_INF(p_rsp, MIN(rsp_len, 8), "raw data:");
   1e538:	2d08      	cmp	r5, #8
   1e53a:	462b      	mov	r3, r5
   1e53c:	4632      	mov	r2, r6
   1e53e:	f044 0003 	orr.w	r0, r4, #3
   1e542:	4908      	ldr	r1, [pc, #32]	; (1e564 <rsp_cb_raw_data+0x4c>)
    }
}
   1e544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        LOG_HEXDUMP_INF(p_rsp, MIN(rsp_len, 8), "raw data:");
   1e548:	bf28      	it	cs
   1e54a:	2308      	movcs	r3, #8
   1e54c:	f001 bf90 	b.w	20470 <log_hexdump_sync>
}
   1e550:	bd70      	pop	{r4, r5, r6, pc}
   1e552:	bf00      	nop
   1e554:	0003b448 	.word	0x0003b448
   1e558:	0003b4c0 	.word	0x0003b4c0
   1e55c:	0003c86c 	.word	0x0003c86c
   1e560:	0003c5e3 	.word	0x0003c5e3
   1e564:	0003c5ea 	.word	0x0003c5ea

0001e568 <state_set.constprop.0>:
static void state_set(cmd_context_t* p_cmd_ctx, cmd_state_t new_state)
   1e568:	b513      	push	{r0, r1, r4, lr}
   1e56a:	4b2f      	ldr	r3, [pc, #188]	; (1e628 <state_set.constprop.0+0xc0>)
   1e56c:	785c      	ldrb	r4, [r3, #1]
        if (mode_get(&m_cmd_ctx) != CMD_MODE_HOST) {
   1e56e:	781a      	ldrb	r2, [r3, #0]
   1e570:	2100      	movs	r1, #0
    if (old_state != new_state) {
   1e572:	42a0      	cmp	r0, r4
   1e574:	d107      	bne.n	1e586 <state_set.constprop.0+0x1e>
   1e576:	b101      	cbz	r1, 1e57a <state_set.constprop.0+0x12>
   1e578:	7058      	strb	r0, [r3, #1]
}
   1e57a:	b002      	add	sp, #8
   1e57c:	bd10      	pop	{r4, pc}
static void state_set(cmd_context_t* p_cmd_ctx, cmd_state_t new_state)
   1e57e:	4604      	mov	r4, r0
   1e580:	2101      	movs	r1, #1
   1e582:	2000      	movs	r0, #0
   1e584:	e7f5      	b.n	1e572 <state_set.constprop.0+0xa>
    switch (state) {
   1e586:	280b      	cmp	r0, #11
   1e588:	d8f6      	bhi.n	1e578 <state_set.constprop.0+0x10>
   1e58a:	a101      	add	r1, pc, #4	; (adr r1, 1e590 <state_set.constprop.0+0x28>)
   1e58c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   1e590:	0001e5c1 	.word	0x0001e5c1
   1e594:	0001e5cd 	.word	0x0001e5cd
   1e598:	0001e5d7 	.word	0x0001e5d7
   1e59c:	0001e607 	.word	0x0001e607
   1e5a0:	0001e615 	.word	0x0001e615
   1e5a4:	0001e579 	.word	0x0001e579
   1e5a8:	0001e57f 	.word	0x0001e57f
   1e5ac:	0001e579 	.word	0x0001e579
   1e5b0:	0001e5f1 	.word	0x0001e5f1
   1e5b4:	0001e57f 	.word	0x0001e57f
   1e5b8:	0001e57f 	.word	0x0001e57f
   1e5bc:	0001e61d 	.word	0x0001e61d
   1e5c0:	2100      	movs	r1, #0
   1e5c2:	7059      	strb	r1, [r3, #1]
    if (old_mode != new_mode) {
   1e5c4:	2a00      	cmp	r2, #0
   1e5c6:	d0d8      	beq.n	1e57a <state_set.constprop.0+0x12>
        p_cmd_ctx->mode = new_mode;
   1e5c8:	7019      	strb	r1, [r3, #0]
   1e5ca:	e7d6      	b.n	1e57a <state_set.constprop.0+0x12>
   1e5cc:	2101      	movs	r1, #1
    if (old_mode != new_mode) {
   1e5ce:	428a      	cmp	r2, r1
   1e5d0:	7059      	strb	r1, [r3, #1]
   1e5d2:	d1f9      	bne.n	1e5c8 <state_set.constprop.0+0x60>
   1e5d4:	e7d1      	b.n	1e57a <state_set.constprop.0+0x12>
   1e5d6:	2202      	movs	r2, #2
   1e5d8:	705a      	strb	r2, [r3, #1]
	z_impl_k_timer_start(timer, duration, period);
   1e5da:	2200      	movs	r2, #0
   1e5dc:	2300      	movs	r3, #0
   1e5de:	e9cd 2300 	strd	r2, r3, [sp]
   1e5e2:	4812      	ldr	r0, [pc, #72]	; (1e62c <state_set.constprop.0+0xc4>)
   1e5e4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1e5e8:	2300      	movs	r3, #0
   1e5ea:	f014 f8c1 	bl	32770 <z_impl_k_timer_start>
        break;
   1e5ee:	e7c4      	b.n	1e57a <state_set.constprop.0+0x12>
   1e5f0:	2208      	movs	r2, #8
   1e5f2:	705a      	strb	r2, [r3, #1]
	z_impl_k_timer_stop(timer);
   1e5f4:	480d      	ldr	r0, [pc, #52]	; (1e62c <state_set.constprop.0+0xc4>)
   1e5f6:	f01b ff0a 	bl	3a40e <z_impl_k_timer_stop>
        k_work_submit(&wk_proc_rsp);
   1e5fa:	480d      	ldr	r0, [pc, #52]	; (1e630 <state_set.constprop.0+0xc8>)
}
   1e5fc:	b002      	add	sp, #8
   1e5fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        k_work_submit(&wk_proc_req);
   1e602:	f011 bffd 	b.w	30600 <k_work_submit>
   1e606:	2103      	movs	r1, #3
    if (old_mode != new_mode) {
   1e608:	2a02      	cmp	r2, #2
   1e60a:	7059      	strb	r1, [r3, #1]
   1e60c:	d0b5      	beq.n	1e57a <state_set.constprop.0+0x12>
        p_cmd_ctx->mode = new_mode;
   1e60e:	2202      	movs	r2, #2
   1e610:	701a      	strb	r2, [r3, #0]
   1e612:	e7b2      	b.n	1e57a <state_set.constprop.0+0x12>
   1e614:	2204      	movs	r2, #4
        k_work_submit(&wk_proc_req);
   1e616:	4807      	ldr	r0, [pc, #28]	; (1e634 <state_set.constprop.0+0xcc>)
   1e618:	705a      	strb	r2, [r3, #1]
   1e61a:	e7ef      	b.n	1e5fc <state_set.constprop.0+0x94>
        if (mode_get(&m_cmd_ctx) != CMD_MODE_HOST) {
   1e61c:	2a01      	cmp	r2, #1
   1e61e:	d1ae      	bne.n	1e57e <state_set.constprop.0+0x16>
   1e620:	220b      	movs	r2, #11
   1e622:	705a      	strb	r2, [r3, #1]
}
   1e624:	e7a9      	b.n	1e57a <state_set.constprop.0+0x12>
   1e626:	bf00      	nop
   1e628:	20002354 	.word	0x20002354
   1e62c:	20000a48 	.word	0x20000a48
   1e630:	20002388 	.word	0x20002388
   1e634:	20002378 	.word	0x20002378

0001e638 <on_uart_tx_empty>:
    if (event == 0) {
   1e638:	b9a0      	cbnz	r0, 1e664 <on_uart_tx_empty+0x2c>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   1e63a:	4b0b      	ldr	r3, [pc, #44]	; (1e668 <on_uart_tx_empty+0x30>)
   1e63c:	781b      	ldrb	r3, [r3, #0]
   1e63e:	2b01      	cmp	r3, #1
   1e640:	d102      	bne.n	1e648 <on_uart_tx_empty+0x10>
        state_set(&m_cmd_ctx, CMD_STATE_REQ_SENT);
   1e642:	2002      	movs	r0, #2
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
   1e644:	f7ff bf90 	b.w	1e568 <state_set.constprop.0>
    else if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   1e648:	2b02      	cmp	r3, #2
   1e64a:	d101      	bne.n	1e650 <on_uart_tx_empty+0x18>
        state_set(&m_cmd_ctx, CMD_STATE_RSP_SENT);
   1e64c:	2006      	movs	r0, #6
   1e64e:	e7f9      	b.n	1e644 <on_uart_tx_empty+0xc>
   1e650:	4806      	ldr	r0, [pc, #24]	; (1e66c <on_uart_tx_empty+0x34>)
   1e652:	4b07      	ldr	r3, [pc, #28]	; (1e670 <on_uart_tx_empty+0x38>)
        LOG_ERR("Should not come here");
   1e654:	4907      	ldr	r1, [pc, #28]	; (1e674 <on_uart_tx_empty+0x3c>)
   1e656:	1ac0      	subs	r0, r0, r3
   1e658:	08c0      	lsrs	r0, r0, #3
   1e65a:	0180      	lsls	r0, r0, #6
   1e65c:	f040 0001 	orr.w	r0, r0, #1
   1e660:	f018 bf16 	b.w	37490 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
   1e664:	200a      	movs	r0, #10
   1e666:	e7ed      	b.n	1e644 <on_uart_tx_empty+0xc>
   1e668:	20002354 	.word	0x20002354
   1e66c:	0003b4c0 	.word	0x0003b4c0
   1e670:	0003b448 	.word	0x0003b448
   1e674:	0003c5f4 	.word	0x0003c5f4

0001e678 <cmd_send>:
{
   1e678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   1e67c:	4b1e      	ldr	r3, [pc, #120]	; (1e6f8 <cmd_send+0x80>)
   1e67e:	781b      	ldrb	r3, [r3, #0]
   1e680:	2b02      	cmp	r3, #2
{
   1e682:	4607      	mov	r7, r0
        state_set(&m_cmd_ctx, CMD_STATE_RSP_SENDING);
   1e684:	bf0c      	ite	eq
   1e686:	2005      	moveq	r0, #5
        state_set(&m_cmd_ctx, CMD_STATE_REQ_SENDING);
   1e688:	2001      	movne	r0, #1
   1e68a:	f7ff ff6d 	bl	1e568 <state_set.constprop.0>
    p_buff->length = 0;
   1e68e:	4b1b      	ldr	r3, [pc, #108]	; (1e6fc <cmd_send+0x84>)
    pdu_len = p_cmd->length;
   1e690:	893d      	ldrh	r5, [r7, #8]
    p_packet = p_buff->p_data;
   1e692:	681e      	ldr	r6, [r3, #0]
    p_buff->length = 0;
   1e694:	2200      	movs	r2, #0
   1e696:	605a      	str	r2, [r3, #4]
    p_packet[CMD_FMT_OFFSET_START] =
   1e698:	783b      	ldrb	r3, [r7, #0]
   1e69a:	46b0      	mov	r8, r6
   1e69c:	2b01      	cmp	r3, #1
   1e69e:	bf0c      	ite	eq
   1e6a0:	2369      	moveq	r3, #105	; 0x69
   1e6a2:	2342      	movne	r3, #66	; 0x42
    uint16_encode(CMD_FMT_SIZE_OPCODE + pdu_len,
   1e6a4:	b22c      	sxth	r4, r5
    p_packet[CMD_FMT_OFFSET_START] =
   1e6a6:	f808 3b01 	strb.w	r3, [r8], #1
    uint16_encode(CMD_FMT_SIZE_OPCODE + pdu_len,
   1e6aa:	1c63      	adds	r3, r4, #1
   1e6ac:	b21b      	sxth	r3, r3
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   1e6ae:	7073      	strb	r3, [r6, #1]
	dst[1] = val >> 8;
   1e6b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1e6b4:	70b3      	strb	r3, [r6, #2]
    p_packet[CMD_FMT_OFFSET_OPCODE] = p_cmd->op_code;
   1e6b6:	787b      	ldrb	r3, [r7, #1]
   1e6b8:	70f3      	strb	r3, [r6, #3]
    if (pdu_len > 0 && p_cmd->p_data != NULL) {
   1e6ba:	b12d      	cbz	r5, 1e6c8 <cmd_send+0x50>
   1e6bc:	6879      	ldr	r1, [r7, #4]
   1e6be:	b119      	cbz	r1, 1e6c8 <cmd_send+0x50>
   1e6c0:	462a      	mov	r2, r5
   1e6c2:	1d30      	adds	r0, r6, #4
   1e6c4:	f01b ff1d 	bl	3a502 <memcpy>
    crc16 = crc16_compute(&p_packet[CMD_FMT_OFFSET_LEN],
   1e6c8:	4641      	mov	r1, r8
   1e6ca:	1cea      	adds	r2, r5, #3
   1e6cc:	2000      	movs	r0, #0
   1e6ce:	f018 fc74 	bl	36fba <crc16_itu_t>
    uint16_encode(crc16, &p_packet[CMD_FMT_OFFSET_PDU + pdu_len]);
   1e6d2:	3504      	adds	r5, #4
   1e6d4:	1973      	adds	r3, r6, r5
	dst[0] = val;
   1e6d6:	5570      	strb	r0, [r6, r5]
    pkt_len = CMD_FMT_OFFSET_PDU + pdu_len + CMD_FMT_SIZE_CRC;
   1e6d8:	1da1      	adds	r1, r4, #6
	dst[1] = val >> 8;
   1e6da:	0a00      	lsrs	r0, r0, #8
   1e6dc:	7058      	strb	r0, [r3, #1]
   1e6de:	b289      	uxth	r1, r1
    p_buff->length = pkt_len;
   1e6e0:	4b06      	ldr	r3, [pc, #24]	; (1e6fc <cmd_send+0x84>)
    pkt_len = MIN(pkt_len, CMD_MAX_PACKET_LENGTH);
   1e6e2:	f5b1 6f82 	cmp.w	r1, #1040	; 0x410
   1e6e6:	bf28      	it	cs
   1e6e8:	f44f 6182 	movcs.w	r1, #1040	; 0x410
}
   1e6ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return uart_send(m_tx_buff.p_data, m_tx_buff.length);
   1e6f0:	6818      	ldr	r0, [r3, #0]
    p_buff->length = pkt_len;
   1e6f2:	8099      	strh	r1, [r3, #4]
    return uart_send(m_tx_buff.p_data, m_tx_buff.length);
   1e6f4:	f7ff bd8e 	b.w	1e214 <uart_send>
   1e6f8:	20002354 	.word	0x20002354
   1e6fc:	20002370 	.word	0x20002370

0001e700 <app_cmd_respond>:
{
   1e700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (state_get(&m_cmd_ctx) != CMD_STATE_REQ_RECEIVED &&
   1e702:	4b19      	ldr	r3, [pc, #100]	; (1e768 <app_cmd_respond+0x68>)
   1e704:	785a      	ldrb	r2, [r3, #1]
   1e706:	2a04      	cmp	r2, #4
   1e708:	d00e      	beq.n	1e728 <app_cmd_respond+0x28>
   1e70a:	2a02      	cmp	r2, #2
   1e70c:	d00c      	beq.n	1e728 <app_cmd_respond+0x28>
   1e70e:	4817      	ldr	r0, [pc, #92]	; (1e76c <app_cmd_respond+0x6c>)
   1e710:	4b17      	ldr	r3, [pc, #92]	; (1e770 <app_cmd_respond+0x70>)
        LOG_ERR("Invalid state for response:%d", state_get(&m_cmd_ctx));
   1e712:	4918      	ldr	r1, [pc, #96]	; (1e774 <app_cmd_respond+0x74>)
   1e714:	1ac0      	subs	r0, r0, r3
   1e716:	08c0      	lsrs	r0, r0, #3
   1e718:	0180      	lsls	r0, r0, #6
   1e71a:	f040 0001 	orr.w	r0, r0, #1
   1e71e:	f018 feb7 	bl	37490 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
   1e722:	f04f 30ff 	mov.w	r0, #4294967295
   1e726:	e00e      	b.n	1e746 <app_cmd_respond+0x46>
    if (p_buff == NULL || p_buff->p_data == NULL) {
   1e728:	4b13      	ldr	r3, [pc, #76]	; (1e778 <app_cmd_respond+0x78>)
   1e72a:	681b      	ldr	r3, [r3, #0]
   1e72c:	b173      	cbz	r3, 1e74c <app_cmd_respond+0x4c>
    *op_code = p_buff->p_data[CMD_FMT_OFFSET_OPCODE];
   1e72e:	78db      	ldrb	r3, [r3, #3]
    cmd.p_data = p_data;
   1e730:	9002      	str	r0, [sp, #8]
    cmd.type = X_CMD_TYPE_RESPONSE;
   1e732:	2201      	movs	r2, #1
    return cmd_send(&cmd);
   1e734:	a801      	add	r0, sp, #4
    cmd.type = X_CMD_TYPE_RESPONSE;
   1e736:	f88d 2004 	strb.w	r2, [sp, #4]
    cmd.op_code = op_code;
   1e73a:	f88d 3005 	strb.w	r3, [sp, #5]
    cmd.length = length;
   1e73e:	f8ad 100c 	strh.w	r1, [sp, #12]
    return cmd_send(&cmd);
   1e742:	f7ff ff99 	bl	1e678 <cmd_send>
}
   1e746:	b005      	add	sp, #20
   1e748:	f85d fb04 	ldr.w	pc, [sp], #4
   1e74c:	4b08      	ldr	r3, [pc, #32]	; (1e770 <app_cmd_respond+0x70>)
   1e74e:	4807      	ldr	r0, [pc, #28]	; (1e76c <app_cmd_respond+0x6c>)
        LOG_ERR("rx buffer is reset too early");
   1e750:	490a      	ldr	r1, [pc, #40]	; (1e77c <app_cmd_respond+0x7c>)
   1e752:	1ac0      	subs	r0, r0, r3
   1e754:	08c0      	lsrs	r0, r0, #3
   1e756:	0180      	lsls	r0, r0, #6
   1e758:	f040 0001 	orr.w	r0, r0, #1
   1e75c:	f018 fe98 	bl	37490 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
   1e760:	200a      	movs	r0, #10
   1e762:	f7ff ff01 	bl	1e568 <state_set.constprop.0>
   1e766:	e7dc      	b.n	1e722 <app_cmd_respond+0x22>
   1e768:	20002354 	.word	0x20002354
   1e76c:	0003b4c0 	.word	0x0003b4c0
   1e770:	0003b448 	.word	0x0003b448
   1e774:	0003c609 	.word	0x0003c609
   1e778:	20002368 	.word	0x20002368
   1e77c:	0003c627 	.word	0x0003c627

0001e780 <on_uart_rx_ready>:
{
   1e780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   1e784:	4c75      	ldr	r4, [pc, #468]	; (1e95c <on_uart_rx_ready+0x1dc>)
{
   1e786:	4688      	mov	r8, r1
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   1e788:	7821      	ldrb	r1, [r4, #0]
   1e78a:	2901      	cmp	r1, #1
{
   1e78c:	4603      	mov	r3, r0
   1e78e:	4626      	mov	r6, r4
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   1e790:	d110      	bne.n	1e7b4 <on_uart_rx_ready+0x34>
        if (m_cmd_ctx.state != CMD_STATE_REQ_SENT &&
   1e792:	7861      	ldrb	r1, [r4, #1]
   1e794:	2902      	cmp	r1, #2
   1e796:	d019      	beq.n	1e7cc <on_uart_rx_ready+0x4c>
   1e798:	2907      	cmp	r1, #7
   1e79a:	d017      	beq.n	1e7cc <on_uart_rx_ready+0x4c>
   1e79c:	4870      	ldr	r0, [pc, #448]	; (1e960 <on_uart_rx_ready+0x1e0>)
   1e79e:	4b71      	ldr	r3, [pc, #452]	; (1e964 <on_uart_rx_ready+0x1e4>)
            LOG_WRN("Invalid state for rx(host)");
   1e7a0:	4971      	ldr	r1, [pc, #452]	; (1e968 <on_uart_rx_ready+0x1e8>)
   1e7a2:	1ac0      	subs	r0, r0, r3
   1e7a4:	08c0      	lsrs	r0, r0, #3
   1e7a6:	0180      	lsls	r0, r0, #6
}
   1e7a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            LOG_WRN("Invalid state for rx(slave)");
   1e7ac:	f040 0002 	orr.w	r0, r0, #2
   1e7b0:	f018 be6e 	b.w	37490 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   1e7b4:	2902      	cmp	r1, #2
   1e7b6:	d109      	bne.n	1e7cc <on_uart_rx_ready+0x4c>
        if (m_cmd_ctx.state != CMD_STATE_REQ_RECEIVING) {
   1e7b8:	7861      	ldrb	r1, [r4, #1]
   1e7ba:	2903      	cmp	r1, #3
   1e7bc:	d006      	beq.n	1e7cc <on_uart_rx_ready+0x4c>
   1e7be:	4868      	ldr	r0, [pc, #416]	; (1e960 <on_uart_rx_ready+0x1e0>)
   1e7c0:	4b68      	ldr	r3, [pc, #416]	; (1e964 <on_uart_rx_ready+0x1e4>)
            LOG_WRN("Invalid state for rx(slave)");
   1e7c2:	496a      	ldr	r1, [pc, #424]	; (1e96c <on_uart_rx_ready+0x1ec>)
   1e7c4:	1ac0      	subs	r0, r0, r3
   1e7c6:	08c0      	lsrs	r0, r0, #3
   1e7c8:	0180      	lsls	r0, r0, #6
   1e7ca:	e7ed      	b.n	1e7a8 <on_uart_rx_ready+0x28>
    if (!rx_started) {
   1e7cc:	4d68      	ldr	r5, [pc, #416]	; (1e970 <on_uart_rx_ready+0x1f0>)
   1e7ce:	4c69      	ldr	r4, [pc, #420]	; (1e974 <on_uart_rx_ready+0x1f4>)
   1e7d0:	f895 9000 	ldrb.w	r9, [r5]
   1e7d4:	6820      	ldr	r0, [r4, #0]
   1e7d6:	4f68      	ldr	r7, [pc, #416]	; (1e978 <on_uart_rx_ready+0x1f8>)
   1e7d8:	1899      	adds	r1, r3, r2
   1e7da:	f1b9 0f00 	cmp.w	r9, #0
   1e7de:	d11a      	bne.n	1e816 <on_uart_rx_ready+0x96>
        rx_started = true;
   1e7e0:	2301      	movs	r3, #1
    p_buff->length = 0;
   1e7e2:	f8c4 9004 	str.w	r9, [r4, #4]
   1e7e6:	4642      	mov	r2, r8
        rx_started = true;
   1e7e8:	702b      	strb	r3, [r5, #0]
   1e7ea:	f01b fe8a 	bl	3a502 <memcpy>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   1e7ee:	7833      	ldrb	r3, [r6, #0]
        m_rx_buff.length = length;
   1e7f0:	f8a4 8004 	strh.w	r8, [r4, #4]
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   1e7f4:	2b01      	cmp	r3, #1
        state_set(&m_cmd_ctx, CMD_STATE_RSP_RECEIVING);
   1e7f6:	bf0c      	ite	eq
   1e7f8:	2007      	moveq	r0, #7
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVING);
   1e7fa:	2003      	movne	r0, #3
        cmd_len = 0;
   1e7fc:	f8a7 9000 	strh.w	r9, [r7]
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVING);
   1e800:	f7ff feb2 	bl	1e568 <state_set.constprop.0>
    if (cmd_len == 0) {
   1e804:	883b      	ldrh	r3, [r7, #0]
   1e806:	b17b      	cbz	r3, 1e828 <on_uart_rx_ready+0xa8>
    if (m_rx_buff.length < cmd_len) {
   1e808:	f8b4 c004 	ldrh.w	ip, [r4, #4]
   1e80c:	883b      	ldrh	r3, [r7, #0]
   1e80e:	4563      	cmp	r3, ip
   1e810:	d929      	bls.n	1e866 <on_uart_rx_ready+0xe6>
}
   1e812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy(&(m_rx_buff.p_data[m_rx_buff.length]), &(b_memory_block[offset]), length);//Copy Incoming Bytes
   1e816:	88a3      	ldrh	r3, [r4, #4]
   1e818:	4642      	mov	r2, r8
   1e81a:	4418      	add	r0, r3
   1e81c:	f01b fe71 	bl	3a502 <memcpy>
        m_rx_buff.length += length;
   1e820:	88a1      	ldrh	r1, [r4, #4]
   1e822:	4441      	add	r1, r8
   1e824:	80a1      	strh	r1, [r4, #4]
   1e826:	e7ed      	b.n	1e804 <on_uart_rx_ready+0x84>
    if (p_buff->length > CMD_FMT_SIZE_START + CMD_FMT_SIZE_LEN) {
   1e828:	88a3      	ldrh	r3, [r4, #4]
   1e82a:	2b03      	cmp	r3, #3
   1e82c:	d9f1      	bls.n	1e812 <on_uart_rx_ready+0x92>
    p_data = p_buff->p_data;
   1e82e:	6823      	ldr	r3, [r4, #0]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   1e830:	7899      	ldrb	r1, [r3, #2]
   1e832:	785a      	ldrb	r2, [r3, #1]
   1e834:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
        cmd_len = CMD_FMT_OFFSET_OPCODE + CMD_FMT_SIZE_CRC + len;
   1e838:	3205      	adds	r2, #5
   1e83a:	b292      	uxth	r2, r2
        if (cmd_len > CMD_MAX_PACKET_LENGTH) {
   1e83c:	f5b2 6f82 	cmp.w	r2, #1040	; 0x410
        cmd_len = cmd_len_get(&m_rx_buff);
   1e840:	803a      	strh	r2, [r7, #0]
        if (cmd_len > CMD_MAX_PACKET_LENGTH) {
   1e842:	d90c      	bls.n	1e85e <on_uart_rx_ready+0xde>
   1e844:	4b47      	ldr	r3, [pc, #284]	; (1e964 <on_uart_rx_ready+0x1e4>)
   1e846:	4846      	ldr	r0, [pc, #280]	; (1e960 <on_uart_rx_ready+0x1e0>)
            LOG_ERR("CMD_Len Larger than Packet Length %d",cmd_len);
   1e848:	494c      	ldr	r1, [pc, #304]	; (1e97c <on_uart_rx_ready+0x1fc>)
   1e84a:	1ac0      	subs	r0, r0, r3
   1e84c:	08c0      	lsrs	r0, r0, #3
   1e84e:	0180      	lsls	r0, r0, #6
   1e850:	f040 0001 	orr.w	r0, r0, #1
   1e854:	f018 fe1c 	bl	37490 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_RECEIVE);
   1e858:	200b      	movs	r0, #11
   1e85a:	f7ff fe85 	bl	1e568 <state_set.constprop.0>
        if (cmd_len == 0) {
   1e85e:	883b      	ldrh	r3, [r7, #0]
   1e860:	2b00      	cmp	r3, #0
   1e862:	d1d1      	bne.n	1e808 <on_uart_rx_ready+0x88>
   1e864:	e7d5      	b.n	1e812 <on_uart_rx_ready+0x92>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   1e866:	7837      	ldrb	r7, [r6, #0]
   1e868:	2f01      	cmp	r7, #1
   1e86a:	d123      	bne.n	1e8b4 <on_uart_rx_ready+0x134>
    if (p_buff == NULL || p_buff->p_data == NULL) {
   1e86c:	4b44      	ldr	r3, [pc, #272]	; (1e980 <on_uart_rx_ready+0x200>)
   1e86e:	6818      	ldr	r0, [r3, #0]
   1e870:	b100      	cbz	r0, 1e874 <on_uart_rx_ready+0xf4>
    *op_code = p_buff->p_data[CMD_FMT_OFFSET_OPCODE];
   1e872:	78c0      	ldrb	r0, [r0, #3]
    uint8_t* p_data = p_buff->p_data;
   1e874:	6821      	ldr	r1, [r4, #0]
    if (mode == CMD_MODE_HOST &&
   1e876:	2f01      	cmp	r7, #1
   1e878:	d11e      	bne.n	1e8b8 <on_uart_rx_ready+0x138>
   1e87a:	780b      	ldrb	r3, [r1, #0]
   1e87c:	2b69      	cmp	r3, #105	; 0x69
   1e87e:	d027      	beq.n	1e8d0 <on_uart_rx_ready+0x150>
   1e880:	4837      	ldr	r0, [pc, #220]	; (1e960 <on_uart_rx_ready+0x1e0>)
   1e882:	4b38      	ldr	r3, [pc, #224]	; (1e964 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: start(host)");
   1e884:	493f      	ldr	r1, [pc, #252]	; (1e984 <on_uart_rx_ready+0x204>)
   1e886:	1ac0      	subs	r0, r0, r3
   1e888:	08c0      	lsrs	r0, r0, #3
   1e88a:	0180      	lsls	r0, r0, #6
        LOG_ERR("Invalid cmd format: start(slave)");
   1e88c:	f040 0001 	orr.w	r0, r0, #1
   1e890:	f018 fdfe 	bl	37490 <log_string_sync>
   1e894:	4b33      	ldr	r3, [pc, #204]	; (1e964 <on_uart_rx_ready+0x1e4>)
   1e896:	4832      	ldr	r0, [pc, #200]	; (1e960 <on_uart_rx_ready+0x1e0>)
        LOG_ERR("Command has Invald Format");
   1e898:	493b      	ldr	r1, [pc, #236]	; (1e988 <on_uart_rx_ready+0x208>)
   1e89a:	1ac0      	subs	r0, r0, r3
   1e89c:	08c0      	lsrs	r0, r0, #3
   1e89e:	0180      	lsls	r0, r0, #6
   1e8a0:	f040 0001 	orr.w	r0, r0, #1
   1e8a4:	f018 fdf4 	bl	37490 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_RECEIVE);
   1e8a8:	200b      	movs	r0, #11
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVED);
   1e8aa:	f7ff fe5d 	bl	1e568 <state_set.constprop.0>
    rx_started = false;
   1e8ae:	2300      	movs	r3, #0
   1e8b0:	702b      	strb	r3, [r5, #0]
   1e8b2:	e7ae      	b.n	1e812 <on_uart_rx_ready+0x92>
    req_op_code = 0;
   1e8b4:	2000      	movs	r0, #0
   1e8b6:	e7dd      	b.n	1e874 <on_uart_rx_ready+0xf4>
    else if (mode == CMD_MODE_SLAVE &&
   1e8b8:	2f02      	cmp	r7, #2
   1e8ba:	d109      	bne.n	1e8d0 <on_uart_rx_ready+0x150>
   1e8bc:	780b      	ldrb	r3, [r1, #0]
   1e8be:	2b42      	cmp	r3, #66	; 0x42
   1e8c0:	d006      	beq.n	1e8d0 <on_uart_rx_ready+0x150>
   1e8c2:	4827      	ldr	r0, [pc, #156]	; (1e960 <on_uart_rx_ready+0x1e0>)
   1e8c4:	4b27      	ldr	r3, [pc, #156]	; (1e964 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: start(slave)");
   1e8c6:	4931      	ldr	r1, [pc, #196]	; (1e98c <on_uart_rx_ready+0x20c>)
   1e8c8:	1ac0      	subs	r0, r0, r3
   1e8ca:	08c0      	lsrs	r0, r0, #3
   1e8cc:	0180      	lsls	r0, r0, #6
   1e8ce:	e7dd      	b.n	1e88c <on_uart_rx_ready+0x10c>
   1e8d0:	788b      	ldrb	r3, [r1, #2]
   1e8d2:	784a      	ldrb	r2, [r1, #1]
   1e8d4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1e8d8:	b212      	sxth	r2, r2
        CMD_FMT_OFFSET_OPCODE + CMD_FMT_SIZE_CRC;
   1e8da:	1d53      	adds	r3, r2, #5
    cmd_len = uint16_decode(&p_data[CMD_FMT_OFFSET_LEN]) +
   1e8dc:	b29b      	uxth	r3, r3
    if (length != cmd_len) {
   1e8de:	459c      	cmp	ip, r3
   1e8e0:	d006      	beq.n	1e8f0 <on_uart_rx_ready+0x170>
   1e8e2:	481f      	ldr	r0, [pc, #124]	; (1e960 <on_uart_rx_ready+0x1e0>)
   1e8e4:	4b1f      	ldr	r3, [pc, #124]	; (1e964 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: length");
   1e8e6:	492a      	ldr	r1, [pc, #168]	; (1e990 <on_uart_rx_ready+0x210>)
   1e8e8:	1ac0      	subs	r0, r0, r3
   1e8ea:	08c0      	lsrs	r0, r0, #3
   1e8ec:	0180      	lsls	r0, r0, #6
   1e8ee:	e7cd      	b.n	1e88c <on_uart_rx_ready+0x10c>
    if (mode == CMD_MODE_HOST &&
   1e8f0:	2f01      	cmp	r7, #1
   1e8f2:	d109      	bne.n	1e908 <on_uart_rx_ready+0x188>
   1e8f4:	78cc      	ldrb	r4, [r1, #3]
   1e8f6:	4284      	cmp	r4, r0
   1e8f8:	d006      	beq.n	1e908 <on_uart_rx_ready+0x188>
   1e8fa:	4819      	ldr	r0, [pc, #100]	; (1e960 <on_uart_rx_ready+0x1e0>)
   1e8fc:	4b19      	ldr	r3, [pc, #100]	; (1e964 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: op code");
   1e8fe:	4925      	ldr	r1, [pc, #148]	; (1e994 <on_uart_rx_ready+0x214>)
   1e900:	1ac0      	subs	r0, r0, r3
   1e902:	08c0      	lsrs	r0, r0, #3
   1e904:	0180      	lsls	r0, r0, #6
   1e906:	e7c1      	b.n	1e88c <on_uart_rx_ready+0x10c>
    cmd_crc = uint16_decode(&p_data[cmd_len - CMD_FMT_SIZE_CRC]);
   1e908:	3b02      	subs	r3, #2
   1e90a:	18c8      	adds	r0, r1, r3
   1e90c:	5ccc      	ldrb	r4, [r1, r3]
   1e90e:	7840      	ldrb	r0, [r0, #1]
        cmd_len - CMD_FMT_SIZE_START - CMD_FMT_SIZE_CRC,
   1e910:	3202      	adds	r2, #2
   1e912:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    return crc16_compute(p_data, length) == crc_target;
   1e916:	b292      	uxth	r2, r2
   1e918:	3101      	adds	r1, #1
   1e91a:	2000      	movs	r0, #0
   1e91c:	f018 fb4d 	bl	36fba <crc16_itu_t>
    if (!crc_ok) {
   1e920:	4284      	cmp	r4, r0
   1e922:	d006      	beq.n	1e932 <on_uart_rx_ready+0x1b2>
   1e924:	480e      	ldr	r0, [pc, #56]	; (1e960 <on_uart_rx_ready+0x1e0>)
   1e926:	4b0f      	ldr	r3, [pc, #60]	; (1e964 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: crc");
   1e928:	491b      	ldr	r1, [pc, #108]	; (1e998 <on_uart_rx_ready+0x218>)
   1e92a:	1ac0      	subs	r0, r0, r3
   1e92c:	08c0      	lsrs	r0, r0, #3
   1e92e:	0180      	lsls	r0, r0, #6
   1e930:	e7ac      	b.n	1e88c <on_uart_rx_ready+0x10c>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   1e932:	7833      	ldrb	r3, [r6, #0]
   1e934:	2b01      	cmp	r3, #1
   1e936:	d101      	bne.n	1e93c <on_uart_rx_ready+0x1bc>
        state_set(&m_cmd_ctx, CMD_STATE_RSP_RECEIVED);
   1e938:	2008      	movs	r0, #8
   1e93a:	e7b6      	b.n	1e8aa <on_uart_rx_ready+0x12a>
    else if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   1e93c:	2b02      	cmp	r3, #2
   1e93e:	d101      	bne.n	1e944 <on_uart_rx_ready+0x1c4>
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVED);
   1e940:	2004      	movs	r0, #4
   1e942:	e7b2      	b.n	1e8aa <on_uart_rx_ready+0x12a>
   1e944:	4b07      	ldr	r3, [pc, #28]	; (1e964 <on_uart_rx_ready+0x1e4>)
   1e946:	4806      	ldr	r0, [pc, #24]	; (1e960 <on_uart_rx_ready+0x1e0>)
        LOG_WRN("Should not come here");
   1e948:	4914      	ldr	r1, [pc, #80]	; (1e99c <on_uart_rx_ready+0x21c>)
   1e94a:	1ac0      	subs	r0, r0, r3
   1e94c:	08c0      	lsrs	r0, r0, #3
   1e94e:	0180      	lsls	r0, r0, #6
   1e950:	f040 0002 	orr.w	r0, r0, #2
   1e954:	f018 fd9c 	bl	37490 <log_string_sync>
   1e958:	e7a9      	b.n	1e8ae <on_uart_rx_ready+0x12e>
   1e95a:	bf00      	nop
   1e95c:	20002354 	.word	0x20002354
   1e960:	0003b4c0 	.word	0x0003b4c0
   1e964:	0003b448 	.word	0x0003b448
   1e968:	0003c644 	.word	0x0003c644
   1e96c:	0003c65f 	.word	0x0003c65f
   1e970:	20003b68 	.word	0x20003b68
   1e974:	20002368 	.word	0x20002368
   1e978:	2000373c 	.word	0x2000373c
   1e97c:	0003c67b 	.word	0x0003c67b
   1e980:	20002370 	.word	0x20002370
   1e984:	0003c6a0 	.word	0x0003c6a0
   1e988:	0003c730 	.word	0x0003c730
   1e98c:	0003c6c0 	.word	0x0003c6c0
   1e990:	0003c6e1 	.word	0x0003c6e1
   1e994:	0003c6fc 	.word	0x0003c6fc
   1e998:	0003c718 	.word	0x0003c718
   1e99c:	0003c5f4 	.word	0x0003c5f4

0001e9a0 <cmd_cb_cnt>:
        if (m_cb_list[i].op_code == 0) {
   1e9a0:	4b05      	ldr	r3, [pc, #20]	; (1e9b8 <cmd_cb_cnt+0x18>)
    for (int i = 0; i < CMD_CB_LIST_LEN; i++) {
   1e9a2:	2000      	movs	r0, #0
        if (m_cb_list[i].op_code == 0) {
   1e9a4:	220c      	movs	r2, #12
   1e9a6:	fb02 f100 	mul.w	r1, r2, r0
   1e9aa:	5cc9      	ldrb	r1, [r1, r3]
   1e9ac:	b111      	cbz	r1, 1e9b4 <cmd_cb_cnt+0x14>
    for (int i = 0; i < CMD_CB_LIST_LEN; i++) {
   1e9ae:	3001      	adds	r0, #1
   1e9b0:	2814      	cmp	r0, #20
   1e9b2:	d1f8      	bne.n	1e9a6 <cmd_cb_cnt+0x6>
}
   1e9b4:	4770      	bx	lr
   1e9b6:	bf00      	nop
   1e9b8:	20002264 	.word	0x20002264

0001e9bc <cmd_cb_get>:
{
   1e9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e9be:	4605      	mov	r5, r0
   1e9c0:	460c      	mov	r4, r1
    count = cmd_cb_cnt();
   1e9c2:	f7ff ffed 	bl	1e9a0 <cmd_cb_cnt>
        if (m_cb_list[i].op_code == op_code) {
   1e9c6:	4b0c      	ldr	r3, [pc, #48]	; (1e9f8 <cmd_cb_get+0x3c>)
    for (int i = 0; i < count; i++) {
   1e9c8:	2200      	movs	r2, #0
        if (m_cb_list[i].op_code == op_code) {
   1e9ca:	260c      	movs	r6, #12
    for (int i = 0; i < count; i++) {
   1e9cc:	4282      	cmp	r2, r0
   1e9ce:	db02      	blt.n	1e9d6 <cmd_cb_get+0x1a>
    rc = -1;
   1e9d0:	f04f 30ff 	mov.w	r0, #4294967295
   1e9d4:	e00b      	b.n	1e9ee <cmd_cb_get+0x32>
        if (m_cb_list[i].op_code == op_code) {
   1e9d6:	fb06 f102 	mul.w	r1, r6, r2
   1e9da:	5ccf      	ldrb	r7, [r1, r3]
   1e9dc:	42af      	cmp	r7, r5
   1e9de:	d107      	bne.n	1e9f0 <cmd_cb_get+0x34>
            if (p_cmd_cb != NULL) {
   1e9e0:	b144      	cbz	r4, 1e9f4 <cmd_cb_get+0x38>
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
   1e9e2:	440b      	add	r3, r1
            rc = 0;
   1e9e4:	2000      	movs	r0, #0
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
   1e9e6:	685a      	ldr	r2, [r3, #4]
                p_cmd_cb->proc_rsp = m_cb_list[i].proc_rsp;
   1e9e8:	689b      	ldr	r3, [r3, #8]
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
   1e9ea:	6062      	str	r2, [r4, #4]
                p_cmd_cb->proc_rsp = m_cb_list[i].proc_rsp;
   1e9ec:	60a3      	str	r3, [r4, #8]
}
   1e9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (int i = 0; i < count; i++) {
   1e9f0:	3201      	adds	r2, #1
   1e9f2:	e7eb      	b.n	1e9cc <cmd_cb_get+0x10>
            rc = 0;
   1e9f4:	4620      	mov	r0, r4
    return rc;
   1e9f6:	e7fa      	b.n	1e9ee <cmd_cb_get+0x32>
   1e9f8:	20002264 	.word	0x20002264

0001e9fc <tmr_rsp_timeout_handler>:
{
   1e9fc:	b530      	push	{r4, r5, lr}
    err_code = buff_to_cmd(&m_tx_buff, &cmd);
   1e9fe:	4b1e      	ldr	r3, [pc, #120]	; (1ea78 <tmr_rsp_timeout_handler+0x7c>)
   1ea00:	681b      	ldr	r3, [r3, #0]
{
   1ea02:	b089      	sub	sp, #36	; 0x24
    if (p_buff->p_data == NULL || p_cmd == NULL) {
   1ea04:	b95b      	cbnz	r3, 1ea1e <tmr_rsp_timeout_handler+0x22>
   1ea06:	481d      	ldr	r0, [pc, #116]	; (1ea7c <tmr_rsp_timeout_handler+0x80>)
   1ea08:	4b1d      	ldr	r3, [pc, #116]	; (1ea80 <tmr_rsp_timeout_handler+0x84>)
        LOG_ERR("Buffer error");
   1ea0a:	491e      	ldr	r1, [pc, #120]	; (1ea84 <tmr_rsp_timeout_handler+0x88>)
   1ea0c:	1ac0      	subs	r0, r0, r3
   1ea0e:	08c0      	lsrs	r0, r0, #3
   1ea10:	0180      	lsls	r0, r0, #6
   1ea12:	f040 0001 	orr.w	r0, r0, #1
   1ea16:	f018 fd3b 	bl	37490 <log_string_sync>
}
   1ea1a:	b009      	add	sp, #36	; 0x24
   1ea1c:	bd30      	pop	{r4, r5, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
   1ea1e:	78dd      	ldrb	r5, [r3, #3]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
   1ea20:	a902      	add	r1, sp, #8
   1ea22:	4628      	mov	r0, r5
   1ea24:	f7ff ffca 	bl	1e9bc <cmd_cb_get>
    if (err_code == 0) {
   1ea28:	b9d0      	cbnz	r0, 1ea60 <tmr_rsp_timeout_handler+0x64>
        uint8_t p_rsp[] = CMD_RSP_TIMEOUT;
   1ea2a:	f646 7374 	movw	r3, #28532	; 0x6f74
   1ea2e:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (cmd_cb.proc_rsp) {
   1ea32:	9b04      	ldr	r3, [sp, #16]
   1ea34:	ac01      	add	r4, sp, #4
   1ea36:	b113      	cbz	r3, 1ea3e <tmr_rsp_timeout_handler+0x42>
            cmd_cb.proc_rsp(p_rsp, sizeof(p_rsp));
   1ea38:	2102      	movs	r1, #2
   1ea3a:	4620      	mov	r0, r4
   1ea3c:	4798      	blx	r3
        event.length = sizeof(p_rsp);
   1ea3e:	2302      	movs	r3, #2
   1ea40:	f8ad 301c 	strh.w	r3, [sp, #28]
        event.timeout = true;
   1ea44:	2301      	movs	r3, #1
   1ea46:	f88d 301e 	strb.w	r3, [sp, #30]
        m_event_cb(&event);
   1ea4a:	4b0f      	ldr	r3, [pc, #60]	; (1ea88 <tmr_rsp_timeout_handler+0x8c>)
        event.op_code = cmd.op_code;
   1ea4c:	f88d 5014 	strb.w	r5, [sp, #20]
        m_event_cb(&event);
   1ea50:	681b      	ldr	r3, [r3, #0]
        event.p_data = p_rsp;
   1ea52:	9406      	str	r4, [sp, #24]
        m_event_cb(&event);
   1ea54:	a805      	add	r0, sp, #20
   1ea56:	4798      	blx	r3
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
   1ea58:	2000      	movs	r0, #0
   1ea5a:	f7ff fd85 	bl	1e568 <state_set.constprop.0>
   1ea5e:	e7dc      	b.n	1ea1a <tmr_rsp_timeout_handler+0x1e>
   1ea60:	4b07      	ldr	r3, [pc, #28]	; (1ea80 <tmr_rsp_timeout_handler+0x84>)
   1ea62:	4806      	ldr	r0, [pc, #24]	; (1ea7c <tmr_rsp_timeout_handler+0x80>)
        LOG_ERR("op is unregisterd(wait rsp)");
   1ea64:	4909      	ldr	r1, [pc, #36]	; (1ea8c <tmr_rsp_timeout_handler+0x90>)
   1ea66:	1ac0      	subs	r0, r0, r3
   1ea68:	08c0      	lsrs	r0, r0, #3
   1ea6a:	0180      	lsls	r0, r0, #6
   1ea6c:	f040 0001 	orr.w	r0, r0, #1
   1ea70:	f018 fd0e 	bl	37490 <log_string_sync>
   1ea74:	e7f0      	b.n	1ea58 <tmr_rsp_timeout_handler+0x5c>
   1ea76:	bf00      	nop
   1ea78:	20002370 	.word	0x20002370
   1ea7c:	0003b4c0 	.word	0x0003b4c0
   1ea80:	0003b448 	.word	0x0003b448
   1ea84:	0003c74a 	.word	0x0003c74a
   1ea88:	20002364 	.word	0x20002364
   1ea8c:	0003c757 	.word	0x0003c757

0001ea90 <wk_proc_rsp_handler>:
{
   1ea90:	b5f0      	push	{r4, r5, r6, r7, lr}
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
   1ea92:	2000      	movs	r0, #0
{
   1ea94:	b087      	sub	sp, #28
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
   1ea96:	f7ff fd67 	bl	1e568 <state_set.constprop.0>
    err_code = buff_to_cmd(&m_rx_buff, &cmd);
   1ea9a:	4b1d      	ldr	r3, [pc, #116]	; (1eb10 <wk_proc_rsp_handler+0x80>)
   1ea9c:	681d      	ldr	r5, [r3, #0]
    if (p_buff->p_data == NULL || p_cmd == NULL) {
   1ea9e:	b95d      	cbnz	r5, 1eab8 <wk_proc_rsp_handler+0x28>
   1eaa0:	481c      	ldr	r0, [pc, #112]	; (1eb14 <wk_proc_rsp_handler+0x84>)
   1eaa2:	4b1d      	ldr	r3, [pc, #116]	; (1eb18 <wk_proc_rsp_handler+0x88>)
        LOG_ERR("Buffer error");
   1eaa4:	491d      	ldr	r1, [pc, #116]	; (1eb1c <wk_proc_rsp_handler+0x8c>)
   1eaa6:	1ac0      	subs	r0, r0, r3
   1eaa8:	08c0      	lsrs	r0, r0, #3
   1eaaa:	0180      	lsls	r0, r0, #6
   1eaac:	f040 0001 	orr.w	r0, r0, #1
   1eab0:	f018 fcee 	bl	37490 <log_string_sync>
}
   1eab4:	b007      	add	sp, #28
   1eab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
   1eab8:	78ee      	ldrb	r6, [r5, #3]
   1eaba:	78af      	ldrb	r7, [r5, #2]
   1eabc:	786c      	ldrb	r4, [r5, #1]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
   1eabe:	4669      	mov	r1, sp
   1eac0:	4630      	mov	r0, r6
   1eac2:	f7ff ff7b 	bl	1e9bc <cmd_cb_get>
    if (err_code == 0) {
   1eac6:	b9b0      	cbnz	r0, 1eaf6 <wk_proc_rsp_handler+0x66>
   1eac8:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
        if (cmd_cb.proc_rsp) {
   1eacc:	9b02      	ldr	r3, [sp, #8]
    p_cmd->length = op_pdu_len - CMD_FMT_SIZE_OPCODE;
   1eace:	3c01      	subs	r4, #1
   1ead0:	b2a4      	uxth	r4, r4
    p_cmd->p_data = &p_data[CMD_FMT_OFFSET_PDU];
   1ead2:	3504      	adds	r5, #4
        if (cmd_cb.proc_rsp) {
   1ead4:	b113      	cbz	r3, 1eadc <wk_proc_rsp_handler+0x4c>
            cmd_cb.proc_rsp(cmd.p_data, cmd.length);
   1ead6:	4621      	mov	r1, r4
   1ead8:	4628      	mov	r0, r5
   1eada:	4798      	blx	r3
        event.timeout = false;
   1eadc:	2300      	movs	r3, #0
   1eade:	f88d 3016 	strb.w	r3, [sp, #22]
        m_event_cb(&event);
   1eae2:	4b0f      	ldr	r3, [pc, #60]	; (1eb20 <wk_proc_rsp_handler+0x90>)
        event.op_code = cmd.op_code;
   1eae4:	f88d 600c 	strb.w	r6, [sp, #12]
        m_event_cb(&event);
   1eae8:	681b      	ldr	r3, [r3, #0]
        event.p_data = cmd.p_data;
   1eaea:	9504      	str	r5, [sp, #16]
        event.length = cmd.length;
   1eaec:	f8ad 4014 	strh.w	r4, [sp, #20]
        m_event_cb(&event);
   1eaf0:	a803      	add	r0, sp, #12
   1eaf2:	4798      	blx	r3
   1eaf4:	e7de      	b.n	1eab4 <wk_proc_rsp_handler+0x24>
   1eaf6:	4b08      	ldr	r3, [pc, #32]	; (1eb18 <wk_proc_rsp_handler+0x88>)
   1eaf8:	4806      	ldr	r0, [pc, #24]	; (1eb14 <wk_proc_rsp_handler+0x84>)
        LOG_ERR("op is unregisterd(proc rsp): %d", cmd.op_code);
   1eafa:	490a      	ldr	r1, [pc, #40]	; (1eb24 <wk_proc_rsp_handler+0x94>)
   1eafc:	1ac0      	subs	r0, r0, r3
   1eafe:	08c0      	lsrs	r0, r0, #3
   1eb00:	0180      	lsls	r0, r0, #6
   1eb02:	4632      	mov	r2, r6
   1eb04:	f040 0001 	orr.w	r0, r0, #1
   1eb08:	f018 fcc2 	bl	37490 <log_string_sync>
   1eb0c:	e7d2      	b.n	1eab4 <wk_proc_rsp_handler+0x24>
   1eb0e:	bf00      	nop
   1eb10:	20002368 	.word	0x20002368
   1eb14:	0003b4c0 	.word	0x0003b4c0
   1eb18:	0003b448 	.word	0x0003b448
   1eb1c:	0003c74a 	.word	0x0003c74a
   1eb20:	20002364 	.word	0x20002364
   1eb24:	0003c773 	.word	0x0003c773

0001eb28 <wk_proc_req_handler>:
{
   1eb28:	b5f0      	push	{r4, r5, r6, r7, lr}
    err_code = buff_to_cmd(&m_rx_buff, &cmd);
   1eb2a:	4b23      	ldr	r3, [pc, #140]	; (1ebb8 <wk_proc_req_handler+0x90>)
   1eb2c:	681d      	ldr	r5, [r3, #0]
{
   1eb2e:	b087      	sub	sp, #28
    if (p_buff->p_data == NULL || p_cmd == NULL) {
   1eb30:	b95d      	cbnz	r5, 1eb4a <wk_proc_req_handler+0x22>
   1eb32:	4822      	ldr	r0, [pc, #136]	; (1ebbc <wk_proc_req_handler+0x94>)
   1eb34:	4b22      	ldr	r3, [pc, #136]	; (1ebc0 <wk_proc_req_handler+0x98>)
        LOG_ERR("Buffer error");
   1eb36:	4923      	ldr	r1, [pc, #140]	; (1ebc4 <wk_proc_req_handler+0x9c>)
   1eb38:	1ac0      	subs	r0, r0, r3
   1eb3a:	08c0      	lsrs	r0, r0, #3
   1eb3c:	0180      	lsls	r0, r0, #6
   1eb3e:	f040 0001 	orr.w	r0, r0, #1
   1eb42:	f018 fca5 	bl	37490 <log_string_sync>
}
   1eb46:	b007      	add	sp, #28
   1eb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
   1eb4a:	78ee      	ldrb	r6, [r5, #3]
   1eb4c:	78af      	ldrb	r7, [r5, #2]
   1eb4e:	786c      	ldrb	r4, [r5, #1]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
   1eb50:	4669      	mov	r1, sp
   1eb52:	4630      	mov	r0, r6
   1eb54:	f7ff ff32 	bl	1e9bc <cmd_cb_get>
    if (err_code == 0) {
   1eb58:	b9d8      	cbnz	r0, 1eb92 <wk_proc_req_handler+0x6a>
   1eb5a:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
        if (cmd_cb.proc_req) {
   1eb5e:	9b01      	ldr	r3, [sp, #4]
    p_cmd->length = op_pdu_len - CMD_FMT_SIZE_OPCODE;
   1eb60:	3c01      	subs	r4, #1
   1eb62:	b2a4      	uxth	r4, r4
    p_cmd->p_data = &p_data[CMD_FMT_OFFSET_PDU];
   1eb64:	3504      	adds	r5, #4
        if (cmd_cb.proc_req) {
   1eb66:	b183      	cbz	r3, 1eb8a <wk_proc_req_handler+0x62>
            cmd_cb.proc_req(cmd.p_data, cmd.length, app_cmd_respond);
   1eb68:	4a17      	ldr	r2, [pc, #92]	; (1ebc8 <wk_proc_req_handler+0xa0>)
   1eb6a:	4621      	mov	r1, r4
   1eb6c:	4628      	mov	r0, r5
   1eb6e:	4798      	blx	r3
        event.timeout = false;
   1eb70:	2300      	movs	r3, #0
   1eb72:	f88d 3016 	strb.w	r3, [sp, #22]
        m_event_cb(&event);
   1eb76:	4b15      	ldr	r3, [pc, #84]	; (1ebcc <wk_proc_req_handler+0xa4>)
        event.op_code = cmd.op_code;
   1eb78:	f88d 600c 	strb.w	r6, [sp, #12]
        m_event_cb(&event);
   1eb7c:	681b      	ldr	r3, [r3, #0]
        event.p_data = cmd.p_data;
   1eb7e:	9504      	str	r5, [sp, #16]
        event.length = cmd.length;
   1eb80:	f8ad 4014 	strh.w	r4, [sp, #20]
        m_event_cb(&event);
   1eb84:	a803      	add	r0, sp, #12
   1eb86:	4798      	blx	r3
   1eb88:	e7dd      	b.n	1eb46 <wk_proc_req_handler+0x1e>
            app_cmd_respond(NULL, 0);
   1eb8a:	4619      	mov	r1, r3
   1eb8c:	f7ff fdb8 	bl	1e700 <app_cmd_respond>
   1eb90:	e7ee      	b.n	1eb70 <wk_proc_req_handler+0x48>
   1eb92:	4b0b      	ldr	r3, [pc, #44]	; (1ebc0 <wk_proc_req_handler+0x98>)
   1eb94:	4809      	ldr	r0, [pc, #36]	; (1ebbc <wk_proc_req_handler+0x94>)
        LOG_ERR("op is unregisterd(proc req)");
   1eb96:	490e      	ldr	r1, [pc, #56]	; (1ebd0 <wk_proc_req_handler+0xa8>)
   1eb98:	1ac0      	subs	r0, r0, r3
   1eb9a:	08c0      	lsrs	r0, r0, #3
   1eb9c:	0180      	lsls	r0, r0, #6
   1eb9e:	f040 0001 	orr.w	r0, r0, #1
   1eba2:	f018 fc75 	bl	37490 <log_string_sync>
        uint8_t p_rsp[] = CMD_RSP_UNREG;
   1eba6:	f247 2375 	movw	r3, #29301	; 0x7275
        app_cmd_respond(p_rsp, sizeof(p_rsp));
   1ebaa:	2102      	movs	r1, #2
   1ebac:	a803      	add	r0, sp, #12
        uint8_t p_rsp[] = CMD_RSP_UNREG;
   1ebae:	f8ad 300c 	strh.w	r3, [sp, #12]
        app_cmd_respond(p_rsp, sizeof(p_rsp));
   1ebb2:	f7ff fda5 	bl	1e700 <app_cmd_respond>
   1ebb6:	e7c6      	b.n	1eb46 <wk_proc_req_handler+0x1e>
   1ebb8:	20002368 	.word	0x20002368
   1ebbc:	0003b4c0 	.word	0x0003b4c0
   1ebc0:	0003b448 	.word	0x0003b448
   1ebc4:	0003c74a 	.word	0x0003c74a
   1ebc8:	0001e701 	.word	0x0001e701
   1ebcc:	20002364 	.word	0x20002364
   1ebd0:	0003c793 	.word	0x0003c793

0001ebd4 <app_cmd_add>:
{
   1ebd4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1ebd8:	4606      	mov	r6, r0
   1ebda:	4688      	mov	r8, r1
   1ebdc:	4617      	mov	r7, r2
    count = cmd_cb_cnt();
   1ebde:	f7ff fedf 	bl	1e9a0 <cmd_cb_cnt>
    if (count == CMD_CB_LIST_LEN) {
   1ebe2:	2814      	cmp	r0, #20
    count = cmd_cb_cnt();
   1ebe4:	4604      	mov	r4, r0
    if (count == CMD_CB_LIST_LEN) {
   1ebe6:	d10e      	bne.n	1ec06 <app_cmd_add+0x32>
   1ebe8:	4b1a      	ldr	r3, [pc, #104]	; (1ec54 <app_cmd_add+0x80>)
   1ebea:	481b      	ldr	r0, [pc, #108]	; (1ec58 <app_cmd_add+0x84>)
        LOG_ERR("Cmd list is full");
   1ebec:	491b      	ldr	r1, [pc, #108]	; (1ec5c <app_cmd_add+0x88>)
   1ebee:	1ac0      	subs	r0, r0, r3
   1ebf0:	08c0      	lsrs	r0, r0, #3
   1ebf2:	0180      	lsls	r0, r0, #6
   1ebf4:	f040 0001 	orr.w	r0, r0, #1
   1ebf8:	f018 fc4a 	bl	37490 <log_string_sync>
        return -1;
   1ebfc:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ec00:	b004      	add	sp, #16
   1ec02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (cmd_cb_get(op_code, NULL) == 0) {
   1ec06:	2100      	movs	r1, #0
   1ec08:	4630      	mov	r0, r6
   1ec0a:	f7ff fed7 	bl	1e9bc <cmd_cb_get>
   1ec0e:	b968      	cbnz	r0, 1ec2c <app_cmd_add+0x58>
   1ec10:	4810      	ldr	r0, [pc, #64]	; (1ec54 <app_cmd_add+0x80>)
   1ec12:	4b11      	ldr	r3, [pc, #68]	; (1ec58 <app_cmd_add+0x84>)
        LOG_WRN("This op code already exists %x",op_code);
   1ec14:	4912      	ldr	r1, [pc, #72]	; (1ec60 <app_cmd_add+0x8c>)
   1ec16:	1a1b      	subs	r3, r3, r0
   1ec18:	08db      	lsrs	r3, r3, #3
   1ec1a:	019b      	lsls	r3, r3, #6
   1ec1c:	f043 0002 	orr.w	r0, r3, #2
   1ec20:	4632      	mov	r2, r6
   1ec22:	f018 fc35 	bl	37490 <log_string_sync>
        return -2;
   1ec26:	f06f 0001 	mvn.w	r0, #1
   1ec2a:	e7e9      	b.n	1ec00 <app_cmd_add+0x2c>
    callback.proc_rsp = rsp_cb;
   1ec2c:	e9cd 8702 	strd	r8, r7, [sp, #8]
    memset(&callback, 0, sizeof(cmd_cb_t));
   1ec30:	2500      	movs	r5, #0
   1ec32:	4b0c      	ldr	r3, [pc, #48]	; (1ec64 <app_cmd_add+0x90>)
   1ec34:	f8ad 5005 	strh.w	r5, [sp, #5]
   1ec38:	200c      	movs	r0, #12
   1ec3a:	f88d 5007 	strb.w	r5, [sp, #7]
    callback.op_code = op_code;
   1ec3e:	f88d 6004 	strb.w	r6, [sp, #4]
   1ec42:	aa04      	add	r2, sp, #16
   1ec44:	fb00 3304 	mla	r3, r0, r4, r3
   1ec48:	e912 0007 	ldmdb	r2, {r0, r1, r2}
   1ec4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return 0;
   1ec50:	4628      	mov	r0, r5
   1ec52:	e7d5      	b.n	1ec00 <app_cmd_add+0x2c>
   1ec54:	0003b448 	.word	0x0003b448
   1ec58:	0003b4c0 	.word	0x0003b4c0
   1ec5c:	0003c7af 	.word	0x0003c7af
   1ec60:	0003c7c0 	.word	0x0003c7c0
   1ec64:	20002264 	.word	0x20002264

0001ec68 <app_cmd_request>:
{
   1ec68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (mode_get(&m_cmd_ctx) != CMD_MODE_IDLE) {
   1ec6a:	4c0f      	ldr	r4, [pc, #60]	; (1eca8 <app_cmd_request+0x40>)
   1ec6c:	7823      	ldrb	r3, [r4, #0]
   1ec6e:	b173      	cbz	r3, 1ec8e <app_cmd_request+0x26>
   1ec70:	4a0e      	ldr	r2, [pc, #56]	; (1ecac <app_cmd_request+0x44>)
   1ec72:	480f      	ldr	r0, [pc, #60]	; (1ecb0 <app_cmd_request+0x48>)
        LOG_ERR("%s, exit with %d", __func__, m_cmd_ctx.mode);
   1ec74:	490f      	ldr	r1, [pc, #60]	; (1ecb4 <app_cmd_request+0x4c>)
   1ec76:	1a80      	subs	r0, r0, r2
   1ec78:	08c0      	lsrs	r0, r0, #3
   1ec7a:	0180      	lsls	r0, r0, #6
   1ec7c:	f040 0001 	orr.w	r0, r0, #1
   1ec80:	4a0d      	ldr	r2, [pc, #52]	; (1ecb8 <app_cmd_request+0x50>)
   1ec82:	f018 fc05 	bl	37490 <log_string_sync>
        return -1;
   1ec86:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ec8a:	b004      	add	sp, #16
   1ec8c:	bd10      	pop	{r4, pc}
    app_cmd_t cmd =
   1ec8e:	f88d 3004 	strb.w	r3, [sp, #4]
   1ec92:	f88d 0005 	strb.w	r0, [sp, #5]
        p_cmd_ctx->mode = new_mode;
   1ec96:	2301      	movs	r3, #1
    return cmd_send(&cmd);
   1ec98:	a801      	add	r0, sp, #4
    app_cmd_t cmd =
   1ec9a:	9102      	str	r1, [sp, #8]
   1ec9c:	f8ad 200c 	strh.w	r2, [sp, #12]
        p_cmd_ctx->mode = new_mode;
   1eca0:	7023      	strb	r3, [r4, #0]
    return cmd_send(&cmd);
   1eca2:	f7ff fce9 	bl	1e678 <cmd_send>
   1eca6:	e7f0      	b.n	1ec8a <app_cmd_request+0x22>
   1eca8:	20002354 	.word	0x20002354
   1ecac:	0003b448 	.word	0x0003b448
   1ecb0:	0003b4c0 	.word	0x0003b4c0
   1ecb4:	0003c7df 	.word	0x0003c7df
   1ecb8:	0003c834 	.word	0x0003c834

0001ecbc <app_cmd_event_cb_register>:
    if (event_cb != NULL) {
   1ecbc:	b108      	cbz	r0, 1ecc2 <app_cmd_event_cb_register+0x6>
        m_event_cb = event_cb;
   1ecbe:	4b01      	ldr	r3, [pc, #4]	; (1ecc4 <app_cmd_event_cb_register+0x8>)
   1ecc0:	6018      	str	r0, [r3, #0]
}
   1ecc2:	4770      	bx	lr
   1ecc4:	20002364 	.word	0x20002364

0001ecc8 <app_cmd_init>:
{
   1ecc8:	b538      	push	{r3, r4, r5, lr}
    err = uart_init(p_device);
   1ecca:	f7ff facf 	bl	1e26c <uart_init>
    if (err != 0) {
   1ecce:	4d34      	ldr	r5, [pc, #208]	; (1eda0 <app_cmd_init+0xd8>)
   1ecd0:	4b34      	ldr	r3, [pc, #208]	; (1eda4 <app_cmd_init+0xdc>)
   1ecd2:	1aed      	subs	r5, r5, r3
   1ecd4:	08ed      	lsrs	r5, r5, #3
   1ecd6:	4604      	mov	r4, r0
   1ecd8:	01ad      	lsls	r5, r5, #6
   1ecda:	b140      	cbz	r0, 1ecee <app_cmd_init+0x26>
        LOG_ERR("UART device init failed");
   1ecdc:	4932      	ldr	r1, [pc, #200]	; (1eda8 <app_cmd_init+0xe0>)
   1ecde:	f045 0001 	orr.w	r0, r5, #1
   1ece2:	f018 fbd5 	bl	37490 <log_string_sync>
        return -ENXIO;
   1ece6:	f06f 0405 	mvn.w	r4, #5
}
   1ecea:	4620      	mov	r0, r4
   1ecec:	bd38      	pop	{r3, r4, r5, pc}
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
   1ecee:	f7ff fc3b 	bl	1e568 <state_set.constprop.0>
    memset(&m_cb_list, 0, sizeof(m_cb_list));
   1ecf2:	4621      	mov	r1, r4
   1ecf4:	22f0      	movs	r2, #240	; 0xf0
   1ecf6:	482d      	ldr	r0, [pc, #180]	; (1edac <app_cmd_init+0xe4>)
   1ecf8:	f01b fc3e 	bl	3a578 <memset>
    memset(&m_cmd_ctx.cmd, 0, sizeof(app_cmd_t));
   1ecfc:	4a2c      	ldr	r2, [pc, #176]	; (1edb0 <app_cmd_init+0xe8>)
    uart_rx_cb_set(on_uart_rx_ready);
   1ecfe:	482d      	ldr	r0, [pc, #180]	; (1edb4 <app_cmd_init+0xec>)
    memset(&m_cmd_ctx.cmd, 0, sizeof(app_cmd_t));
   1ed00:	60d4      	str	r4, [r2, #12]
   1ed02:	e9c2 4401 	strd	r4, r4, [r2, #4]
    uart_rx_cb_set(on_uart_rx_ready);
   1ed06:	f7ff fb97 	bl	1e438 <uart_rx_cb_set>
    uart_tx_cb_set(on_uart_tx_empty);
   1ed0a:	482b      	ldr	r0, [pc, #172]	; (1edb8 <app_cmd_init+0xf0>)
   1ed0c:	f7ff fb9a 	bl	1e444 <uart_tx_cb_set>
    m_event_cb = event_cb_dummy;
   1ed10:	4b2a      	ldr	r3, [pc, #168]	; (1edbc <app_cmd_init+0xf4>)
   1ed12:	4a2b      	ldr	r2, [pc, #172]	; (1edc0 <app_cmd_init+0xf8>)
   1ed14:	601a      	str	r2, [r3, #0]
    err = k_mem_slab_alloc(&cmd_rx_tx_pool, (void **)&(m_rx_buff.p_data), K_NO_WAIT);
   1ed16:	492b      	ldr	r1, [pc, #172]	; (1edc4 <app_cmd_init+0xfc>)
   1ed18:	482b      	ldr	r0, [pc, #172]	; (1edc8 <app_cmd_init+0x100>)
   1ed1a:	2200      	movs	r2, #0
   1ed1c:	2300      	movs	r3, #0
   1ed1e:	f010 fb3f 	bl	2f3a0 <k_mem_slab_alloc>
	__ASSERT(err == 0, "Failed to alloc slab");
   1ed22:	b170      	cbz	r0, 1ed42 <app_cmd_init+0x7a>
   1ed24:	4929      	ldr	r1, [pc, #164]	; (1edcc <app_cmd_init+0x104>)
   1ed26:	4a2a      	ldr	r2, [pc, #168]	; (1edd0 <app_cmd_init+0x108>)
   1ed28:	482a      	ldr	r0, [pc, #168]	; (1edd4 <app_cmd_init+0x10c>)
   1ed2a:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   1ed2e:	f018 f9f4 	bl	3711a <printk>
   1ed32:	4829      	ldr	r0, [pc, #164]	; (1edd8 <app_cmd_init+0x110>)
   1ed34:	f018 f9f1 	bl	3711a <printk>
   1ed38:	4825      	ldr	r0, [pc, #148]	; (1edd0 <app_cmd_init+0x108>)
   1ed3a:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   1ed3e:	f018 fb92 	bl	37466 <assert_post_action>
    err = k_mem_slab_alloc(&cmd_rx_tx_pool, (void **)&(m_tx_buff.p_data), K_NO_WAIT);
   1ed42:	4926      	ldr	r1, [pc, #152]	; (1eddc <app_cmd_init+0x114>)
   1ed44:	4820      	ldr	r0, [pc, #128]	; (1edc8 <app_cmd_init+0x100>)
   1ed46:	2200      	movs	r2, #0
   1ed48:	2300      	movs	r3, #0
   1ed4a:	f010 fb29 	bl	2f3a0 <k_mem_slab_alloc>
	__ASSERT(err == 0, "Failed to alloc slab");
   1ed4e:	b170      	cbz	r0, 1ed6e <app_cmd_init+0xa6>
   1ed50:	491e      	ldr	r1, [pc, #120]	; (1edcc <app_cmd_init+0x104>)
   1ed52:	4a1f      	ldr	r2, [pc, #124]	; (1edd0 <app_cmd_init+0x108>)
   1ed54:	481f      	ldr	r0, [pc, #124]	; (1edd4 <app_cmd_init+0x10c>)
   1ed56:	f240 33a7 	movw	r3, #935	; 0x3a7
   1ed5a:	f018 f9de 	bl	3711a <printk>
   1ed5e:	481e      	ldr	r0, [pc, #120]	; (1edd8 <app_cmd_init+0x110>)
   1ed60:	f018 f9db 	bl	3711a <printk>
   1ed64:	481a      	ldr	r0, [pc, #104]	; (1edd0 <app_cmd_init+0x108>)
   1ed66:	f240 31a7 	movw	r1, #935	; 0x3a7
   1ed6a:	f018 fb7c 	bl	37466 <assert_post_action>
    k_work_init(&wk_proc_req, wk_proc_req_handler);
   1ed6e:	491c      	ldr	r1, [pc, #112]	; (1ede0 <app_cmd_init+0x118>)
   1ed70:	481c      	ldr	r0, [pc, #112]	; (1ede4 <app_cmd_init+0x11c>)
   1ed72:	f011 fbb9 	bl	304e8 <k_work_init>
    k_work_init(&wk_proc_rsp, wk_proc_rsp_handler);
   1ed76:	491c      	ldr	r1, [pc, #112]	; (1ede8 <app_cmd_init+0x120>)
   1ed78:	481c      	ldr	r0, [pc, #112]	; (1edec <app_cmd_init+0x124>)
   1ed7a:	f011 fbb5 	bl	304e8 <k_work_init>
    app_cmd_add(CMD_OP_PING, req_cb_ping, rsp_cb_ping);
   1ed7e:	4a1c      	ldr	r2, [pc, #112]	; (1edf0 <app_cmd_init+0x128>)
   1ed80:	491c      	ldr	r1, [pc, #112]	; (1edf4 <app_cmd_init+0x12c>)
   1ed82:	2011      	movs	r0, #17
   1ed84:	f7ff ff26 	bl	1ebd4 <app_cmd_add>
    app_cmd_add(CMD_OP_RAW_DATA, req_cb_raw_data, rsp_cb_raw_data);
   1ed88:	4a1b      	ldr	r2, [pc, #108]	; (1edf8 <app_cmd_init+0x130>)
   1ed8a:	491c      	ldr	r1, [pc, #112]	; (1edfc <app_cmd_init+0x134>)
   1ed8c:	2012      	movs	r0, #18
   1ed8e:	f7ff ff21 	bl	1ebd4 <app_cmd_add>
    LOG_INF("Initialized SIMP Module");
   1ed92:	491b      	ldr	r1, [pc, #108]	; (1ee00 <app_cmd_init+0x138>)
   1ed94:	f045 0003 	orr.w	r0, r5, #3
   1ed98:	f018 fb7a 	bl	37490 <log_string_sync>
    return 0;
   1ed9c:	e7a5      	b.n	1ecea <app_cmd_init+0x22>
   1ed9e:	bf00      	nop
   1eda0:	0003b4c0 	.word	0x0003b4c0
   1eda4:	0003b448 	.word	0x0003b448
   1eda8:	0003c7f0 	.word	0x0003c7f0
   1edac:	20002264 	.word	0x20002264
   1edb0:	20002354 	.word	0x20002354
   1edb4:	0001e781 	.word	0x0001e781
   1edb8:	0001e639 	.word	0x0001e639
   1edbc:	20002364 	.word	0x20002364
   1edc0:	00036da9 	.word	0x00036da9
   1edc4:	20002368 	.word	0x20002368
   1edc8:	20000af8 	.word	0x20000af8
   1edcc:	0003c481 	.word	0x0003c481
   1edd0:	0003c808 	.word	0x0003c808
   1edd4:	0003c48a 	.word	0x0003c48a
   1edd8:	0003c4a7 	.word	0x0003c4a7
   1eddc:	20002370 	.word	0x20002370
   1ede0:	0001eb29 	.word	0x0001eb29
   1ede4:	20002378 	.word	0x20002378
   1ede8:	0001ea91 	.word	0x0001ea91
   1edec:	20002388 	.word	0x20002388
   1edf0:	0001e451 	.word	0x0001e451
   1edf4:	0001e4d9 	.word	0x0001e4d9
   1edf8:	0001e519 	.word	0x0001e519
   1edfc:	0001e479 	.word	0x0001e479
   1ee00:	0003c81c 	.word	0x0003c81c

0001ee04 <app_flash_write>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_write(uint32_t offset, uint8_t* p_data, uint32_t length)
{
   1ee04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	const struct flash_area* fa;
	uint8_t  p_last_word[4] = {0xFF, 0xFF, 0xFF, 0xFF};
   1ee08:	f04f 33ff 	mov.w	r3, #4294967295
{
   1ee0c:	4607      	mov	r7, r0
   1ee0e:	4688      	mov	r8, r1
	uint32_t word_align_len;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   1ee10:	2005      	movs	r0, #5
   1ee12:	4669      	mov	r1, sp
{
   1ee14:	4615      	mov	r5, r2
	uint8_t  p_last_word[4] = {0xFF, 0xFF, 0xFF, 0xFF};
   1ee16:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   1ee18:	f002 fa60 	bl	212dc <flash_area_open>
	if (rc) {
   1ee1c:	4604      	mov	r4, r0
   1ee1e:	b9c8      	cbnz	r0, 1ee54 <app_flash_write+0x50>
		return rc;
	}

	if (length % 4 != 0) {
   1ee20:	07ab      	lsls	r3, r5, #30
		word_align_len = length / 4 * 4;
   1ee22:	bf14      	ite	ne
   1ee24:	f025 0603 	bicne.w	r6, r5, #3
   1ee28:	462e      	moveq	r6, r5
	}
	else {
		word_align_len = length;
	}

	rc = flash_area_write(fa, offset, p_data, word_align_len);
   1ee2a:	9800      	ldr	r0, [sp, #0]
   1ee2c:	4633      	mov	r3, r6
   1ee2e:	4642      	mov	r2, r8
   1ee30:	4639      	mov	r1, r7
   1ee32:	f018 fd42 	bl	378ba <flash_area_write>
	if (rc != 0) {
   1ee36:	4604      	mov	r4, r0
   1ee38:	b180      	cbz	r0, 1ee5c <app_flash_write+0x58>
		if(rc == -EINVAL){
   1ee3a:	f110 0f16 	cmn.w	r0, #22
   1ee3e:	d109      	bne.n	1ee54 <app_flash_write+0x50>
   1ee40:	4814      	ldr	r0, [pc, #80]	; (1ee94 <app_flash_write+0x90>)
   1ee42:	4b15      	ldr	r3, [pc, #84]	; (1ee98 <app_flash_write+0x94>)
            LOG_ERR (" Invalid Argument for Write");
   1ee44:	4915      	ldr	r1, [pc, #84]	; (1ee9c <app_flash_write+0x98>)
   1ee46:	1ac0      	subs	r0, r0, r3
   1ee48:	08c0      	lsrs	r0, r0, #3
   1ee4a:	0180      	lsls	r0, r0, #6
   1ee4c:	f040 0001 	orr.w	r0, r0, #1
   1ee50:	f018 fb1e 	bl	37490 <log_string_sync>
	}

	flash_area_close(fa);

	return rc;
}
   1ee54:	4620      	mov	r0, r4
   1ee56:	b003      	add	sp, #12
   1ee58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (word_align_len < length) {
   1ee5c:	42b5      	cmp	r5, r6
   1ee5e:	d803      	bhi.n	1ee68 <app_flash_write+0x64>
	flash_area_close(fa);
   1ee60:	9800      	ldr	r0, [sp, #0]
   1ee62:	f018 fd0d 	bl	37880 <flash_area_close>
	return rc;
   1ee66:	e7f5      	b.n	1ee54 <app_flash_write+0x50>
		memcpy(p_last_word, &p_data[word_align_len], (length - word_align_len));
   1ee68:	2304      	movs	r3, #4
   1ee6a:	f8dd 9000 	ldr.w	r9, [sp]
   1ee6e:	1baa      	subs	r2, r5, r6
   1ee70:	eb08 0106 	add.w	r1, r8, r6
   1ee74:	eb0d 0003 	add.w	r0, sp, r3
   1ee78:	f01b fb51 	bl	3a51e <__memcpy_chk>
		rc = flash_area_write(fa, offset + word_align_len, p_last_word, 4);
   1ee7c:	2304      	movs	r3, #4
   1ee7e:	eb0d 0203 	add.w	r2, sp, r3
   1ee82:	19b9      	adds	r1, r7, r6
   1ee84:	4648      	mov	r0, r9
   1ee86:	f018 fd18 	bl	378ba <flash_area_write>
		if (rc) {
   1ee8a:	2800      	cmp	r0, #0
   1ee8c:	d0e8      	beq.n	1ee60 <app_flash_write+0x5c>
   1ee8e:	4604      	mov	r4, r0
   1ee90:	e7e0      	b.n	1ee54 <app_flash_write+0x50>
   1ee92:	bf00      	nop
   1ee94:	0003b450 	.word	0x0003b450
   1ee98:	0003b448 	.word	0x0003b448
   1ee9c:	0003c87c 	.word	0x0003c87c

0001eea0 <app_cmd_event_handler>:

/**@brief app_cmd request & response event handler.
 *		 Note, don't run long-time task here. 
 */
static void app_cmd_event_handler(cmd_event_t* p_event)
{
   1eea0:	b538      	push	{r3, r4, r5, lr}

	switch (p_event->op_code) {
   1eea2:	7803      	ldrb	r3, [r0, #0]
   1eea4:	2b21      	cmp	r3, #33	; 0x21
{
   1eea6:	4605      	mov	r5, r0
	switch (p_event->op_code) {
   1eea8:	d002      	beq.n	1eeb0 <app_cmd_event_handler+0x10>
   1eeaa:	2b27      	cmp	r3, #39	; 0x27
   1eeac:	d00c      	beq.n	1eec8 <app_cmd_event_handler+0x28>
		break;
	default:
		LOG_DBG("cmd op: 0x%02x", p_event->op_code);
		break;
	}
}
   1eeae:	bd38      	pop	{r3, r4, r5, pc}
   1eeb0:	4b15      	ldr	r3, [pc, #84]	; (1ef08 <app_cmd_event_handler+0x68>)
   1eeb2:	4816      	ldr	r0, [pc, #88]	; (1ef0c <app_cmd_event_handler+0x6c>)
		LOG_INF("Start to receive DFU image by UART");
   1eeb4:	4916      	ldr	r1, [pc, #88]	; (1ef10 <app_cmd_event_handler+0x70>)
   1eeb6:	1ac0      	subs	r0, r0, r3
   1eeb8:	08c0      	lsrs	r0, r0, #3
   1eeba:	0180      	lsls	r0, r0, #6
}
   1eebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_INF("Start to receive DFU image by UART");
   1eec0:	f040 0003 	orr.w	r0, r0, #3
   1eec4:	f018 bae4 	b.w	37490 <log_string_sync>
   1eec8:	4b0f      	ldr	r3, [pc, #60]	; (1ef08 <app_cmd_event_handler+0x68>)
   1eeca:	4c10      	ldr	r4, [pc, #64]	; (1ef0c <app_cmd_event_handler+0x6c>)
		LOG_INF("DFU image is received by UART");
   1eecc:	4911      	ldr	r1, [pc, #68]	; (1ef14 <app_cmd_event_handler+0x74>)
   1eece:	1ae4      	subs	r4, r4, r3
   1eed0:	08e4      	lsrs	r4, r4, #3
   1eed2:	01a4      	lsls	r4, r4, #6
   1eed4:	f044 0403 	orr.w	r4, r4, #3
   1eed8:	4620      	mov	r0, r4
   1eeda:	f018 fad9 	bl	37490 <log_string_sync>
		LOG_INF("File size is: %d", sys_get_le32(p_event->p_data));	
   1eede:	686b      	ldr	r3, [r5, #4]
   1eee0:	78d9      	ldrb	r1, [r3, #3]
   1eee2:	789a      	ldrb	r2, [r3, #2]
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1eee4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1eee8:	7859      	ldrb	r1, [r3, #1]
   1eeea:	781b      	ldrb	r3, [r3, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1eeec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1eef0:	4620      	mov	r0, r4
   1eef2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   1eef6:	4908      	ldr	r1, [pc, #32]	; (1ef18 <app_cmd_event_handler+0x78>)
   1eef8:	f018 faca 	bl	37490 <log_string_sync>
}
   1eefc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		dfu_file_ready(IMAGE_FROM_SERIAL);
   1ef00:	2002      	movs	r0, #2
   1ef02:	f7fe be53 	b.w	1dbac <dfu_file_ready>
   1ef06:	bf00      	nop
   1ef08:	0003b448 	.word	0x0003b448
   1ef0c:	0003b518 	.word	0x0003b518
   1ef10:	0003c8a2 	.word	0x0003c8a2
   1ef14:	0003c8c5 	.word	0x0003c8c5
   1ef18:	0003c8e3 	.word	0x0003c8e3

0001ef1c <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1ef1c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1ef1e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1ef20:	b08a      	sub	sp, #40	; 0x28
   1ef22:	4604      	mov	r4, r0
   1ef24:	460e      	mov	r6, r1
   1ef26:	ad07      	add	r5, sp, #28
   1ef28:	2b03      	cmp	r3, #3
   1ef2a:	d820      	bhi.n	1ef6e <bt_addr_le_to_str.constprop.0+0x52>
   1ef2c:	e8df f003 	tbb	[pc, r3]
   1ef30:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   1ef34:	4911      	ldr	r1, [pc, #68]	; (1ef7c <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   1ef36:	4628      	mov	r0, r5
   1ef38:	f01b fc61 	bl	3a7fe <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1ef3c:	7863      	ldrb	r3, [r4, #1]
   1ef3e:	9304      	str	r3, [sp, #16]
   1ef40:	78a3      	ldrb	r3, [r4, #2]
   1ef42:	9303      	str	r3, [sp, #12]
   1ef44:	78e3      	ldrb	r3, [r4, #3]
   1ef46:	9302      	str	r3, [sp, #8]
   1ef48:	7923      	ldrb	r3, [r4, #4]
   1ef4a:	9301      	str	r3, [sp, #4]
   1ef4c:	7963      	ldrb	r3, [r4, #5]
   1ef4e:	9300      	str	r3, [sp, #0]
   1ef50:	4a0b      	ldr	r2, [pc, #44]	; (1ef80 <bt_addr_le_to_str.constprop.0+0x64>)
   1ef52:	79a3      	ldrb	r3, [r4, #6]
   1ef54:	9505      	str	r5, [sp, #20]
   1ef56:	211e      	movs	r1, #30
   1ef58:	4630      	mov	r0, r6
   1ef5a:	f018 f8eb 	bl	37134 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   1ef5e:	b00a      	add	sp, #40	; 0x28
   1ef60:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   1ef62:	4908      	ldr	r1, [pc, #32]	; (1ef84 <bt_addr_le_to_str.constprop.0+0x68>)
   1ef64:	e7e7      	b.n	1ef36 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
   1ef66:	4908      	ldr	r1, [pc, #32]	; (1ef88 <bt_addr_le_to_str.constprop.0+0x6c>)
   1ef68:	e7e5      	b.n	1ef36 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
   1ef6a:	4908      	ldr	r1, [pc, #32]	; (1ef8c <bt_addr_le_to_str.constprop.0+0x70>)
   1ef6c:	e7e3      	b.n	1ef36 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1ef6e:	4a08      	ldr	r2, [pc, #32]	; (1ef90 <bt_addr_le_to_str.constprop.0+0x74>)
   1ef70:	210a      	movs	r1, #10
   1ef72:	4628      	mov	r0, r5
   1ef74:	f018 f8de 	bl	37134 <snprintk>
		break;
   1ef78:	e7e0      	b.n	1ef3c <bt_addr_le_to_str.constprop.0+0x20>
   1ef7a:	bf00      	nop
   1ef7c:	0003c8f4 	.word	0x0003c8f4
   1ef80:	0003c916 	.word	0x0003c916
   1ef84:	0003c8fb 	.word	0x0003c8fb
   1ef88:	0003c902 	.word	0x0003c902
   1ef8c:	0003c90c 	.word	0x0003c90c
   1ef90:	0003ede2 	.word	0x0003ede2

0001ef94 <connected>:
{
   1ef94:	b530      	push	{r4, r5, lr}
	if (err) {
   1ef96:	460a      	mov	r2, r1
{
   1ef98:	b095      	sub	sp, #84	; 0x54
   1ef9a:	4605      	mov	r5, r0
	if (err) {
   1ef9c:	b159      	cbz	r1, 1efb6 <connected+0x22>
   1ef9e:	4821      	ldr	r0, [pc, #132]	; (1f024 <connected+0x90>)
   1efa0:	4b21      	ldr	r3, [pc, #132]	; (1f028 <connected+0x94>)
		LOG_ERR("Connection failed (err %u)", err);
   1efa2:	4922      	ldr	r1, [pc, #136]	; (1f02c <connected+0x98>)
   1efa4:	1ac0      	subs	r0, r0, r3
   1efa6:	08c0      	lsrs	r0, r0, #3
   1efa8:	0180      	lsls	r0, r0, #6
   1efaa:	f040 0001 	orr.w	r0, r0, #1
   1efae:	f018 fa6f 	bl	37490 <log_string_sync>
}
   1efb2:	b015      	add	sp, #84	; 0x54
   1efb4:	bd30      	pop	{r4, r5, pc}
	}	else if(bt_conn_get_info(conn, &info)){
   1efb6:	a90c      	add	r1, sp, #48	; 0x30
   1efb8:	f007 f826 	bl	26008 <bt_conn_get_info>
   1efbc:	b118      	cbz	r0, 1efc6 <connected+0x32>
		printk("Could not parse connection info\n");
   1efbe:	481c      	ldr	r0, [pc, #112]	; (1f030 <connected+0x9c>)
   1efc0:	f018 f8ab 	bl	3711a <printk>
		return;
   1efc4:	e7f5      	b.n	1efb2 <connected+0x1e>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1efc6:	4628      	mov	r0, r5
   1efc8:	f019 fb96 	bl	386f8 <bt_conn_get_dst>
   1efcc:	a904      	add	r1, sp, #16
   1efce:	f7ff ffa5 	bl	1ef1c <bt_addr_le_to_str.constprop.0>
   1efd2:	4c14      	ldr	r4, [pc, #80]	; (1f024 <connected+0x90>)
   1efd4:	4b14      	ldr	r3, [pc, #80]	; (1f028 <connected+0x94>)
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   1efd6:	a804      	add	r0, sp, #16
   1efd8:	1ae4      	subs	r4, r4, r3
   1efda:	08e4      	lsrs	r4, r4, #3
   1efdc:	f018 fa6b 	bl	374b6 <z_log_strdup>
	LOG_INF("Connected %s", log_strdup(addr));
   1efe0:	01a4      	lsls	r4, r4, #6
   1efe2:	f044 0403 	orr.w	r4, r4, #3
   1efe6:	4602      	mov	r2, r0
   1efe8:	4912      	ldr	r1, [pc, #72]	; (1f034 <connected+0xa0>)
   1efea:	4620      	mov	r0, r4
   1efec:	f018 fa50 	bl	37490 <log_string_sync>
	LOG_INF("Connection established!		\n\
   1eff0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1eff4:	9302      	str	r3, [sp, #8]
   1eff6:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1effa:	9301      	str	r3, [sp, #4]
   1effc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   1f000:	490d      	ldr	r1, [pc, #52]	; (1f038 <connected+0xa4>)
   1f002:	9300      	str	r3, [sp, #0]
   1f004:	aa04      	add	r2, sp, #16
   1f006:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1f00a:	4620      	mov	r0, r4
   1f00c:	f018 fa40 	bl	37490 <log_string_sync>
	current_conn = bt_conn_ref(conn);
   1f010:	4628      	mov	r0, r5
   1f012:	f019 fae5 	bl	385e0 <bt_conn_ref>
   1f016:	4b09      	ldr	r3, [pc, #36]	; (1f03c <connected+0xa8>)
   1f018:	6018      	str	r0, [r3, #0]
	dk_set_led_on(CON_STATUS_LED);
   1f01a:	2001      	movs	r0, #1
   1f01c:	f01a fed6 	bl	39dcc <dk_set_led_on>
   1f020:	e7c7      	b.n	1efb2 <connected+0x1e>
   1f022:	bf00      	nop
   1f024:	0003b518 	.word	0x0003b518
   1f028:	0003b448 	.word	0x0003b448
   1f02c:	0003c939 	.word	0x0003c939
   1f030:	0003c954 	.word	0x0003c954
   1f034:	0003c975 	.word	0x0003c975
   1f038:	0003c982 	.word	0x0003c982
   1f03c:	20002398 	.word	0x20002398

0001f040 <disconnected>:
{
   1f040:	b530      	push	{r4, r5, lr}
   1f042:	b089      	sub	sp, #36	; 0x24
   1f044:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1f046:	f019 fb57 	bl	386f8 <bt_conn_get_dst>
   1f04a:	4669      	mov	r1, sp
   1f04c:	f7ff ff66 	bl	1ef1c <bt_addr_le_to_str.constprop.0>
   1f050:	4c0d      	ldr	r4, [pc, #52]	; (1f088 <disconnected+0x48>)
   1f052:	4b0e      	ldr	r3, [pc, #56]	; (1f08c <disconnected+0x4c>)
   1f054:	4668      	mov	r0, sp
   1f056:	1ae4      	subs	r4, r4, r3
   1f058:	08e4      	lsrs	r4, r4, #3
   1f05a:	f018 fa2c 	bl	374b6 <z_log_strdup>
	LOG_INF("Disconnected: %s (reason %u)", log_strdup(addr), reason);
   1f05e:	01a4      	lsls	r4, r4, #6
   1f060:	f044 0403 	orr.w	r4, r4, #3
   1f064:	4602      	mov	r2, r0
   1f066:	4620      	mov	r0, r4
	if (current_conn) {
   1f068:	4c09      	ldr	r4, [pc, #36]	; (1f090 <disconnected+0x50>)
	LOG_INF("Disconnected: %s (reason %u)", log_strdup(addr), reason);
   1f06a:	490a      	ldr	r1, [pc, #40]	; (1f094 <disconnected+0x54>)
   1f06c:	462b      	mov	r3, r5
   1f06e:	f018 fa0f 	bl	37490 <log_string_sync>
	if (current_conn) {
   1f072:	6820      	ldr	r0, [r4, #0]
   1f074:	b130      	cbz	r0, 1f084 <disconnected+0x44>
		bt_conn_unref(current_conn);
   1f076:	f006 fcb1 	bl	259dc <bt_conn_unref>
		current_conn = NULL;
   1f07a:	2300      	movs	r3, #0
		dk_set_led_off(CON_STATUS_LED);
   1f07c:	2001      	movs	r0, #1
		current_conn = NULL;
   1f07e:	6023      	str	r3, [r4, #0]
		dk_set_led_off(CON_STATUS_LED);
   1f080:	f01a fea7 	bl	39dd2 <dk_set_led_off>
}
   1f084:	b009      	add	sp, #36	; 0x24
   1f086:	bd30      	pop	{r4, r5, pc}
   1f088:	0003b518 	.word	0x0003b518
   1f08c:	0003b448 	.word	0x0003b448
   1f090:	20002398 	.word	0x20002398
   1f094:	0003ca23 	.word	0x0003ca23

0001f098 <le_param_updated>:
{
   1f098:	b510      	push	{r4, lr}
   1f09a:	b092      	sub	sp, #72	; 0x48
	if(bt_conn_get_info(conn, &info))
   1f09c:	a90a      	add	r1, sp, #40	; 0x28
{
   1f09e:	4604      	mov	r4, r0
	if(bt_conn_get_info(conn, &info))
   1f0a0:	f006 ffb2 	bl	26008 <bt_conn_get_info>
   1f0a4:	b120      	cbz	r0, 1f0b0 <le_param_updated+0x18>
		printk("Could not parse connection info\n");
   1f0a6:	480b      	ldr	r0, [pc, #44]	; (1f0d4 <le_param_updated+0x3c>)
   1f0a8:	f018 f837 	bl	3711a <printk>
}
   1f0ac:	b012      	add	sp, #72	; 0x48
   1f0ae:	bd10      	pop	{r4, pc}
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1f0b0:	4620      	mov	r0, r4
   1f0b2:	f019 fb21 	bl	386f8 <bt_conn_get_dst>
   1f0b6:	a902      	add	r1, sp, #8
   1f0b8:	f7ff ff30 	bl	1ef1c <bt_addr_le_to_str.constprop.0>
		printk("Connection parameters updated!	\n\
   1f0bc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1f0c0:	9300      	str	r3, [sp, #0]
   1f0c2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
   1f0c6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
   1f0ca:	4803      	ldr	r0, [pc, #12]	; (1f0d8 <le_param_updated+0x40>)
   1f0cc:	a902      	add	r1, sp, #8
   1f0ce:	f018 f824 	bl	3711a <printk>
}
   1f0d2:	e7eb      	b.n	1f0ac <le_param_updated+0x14>
   1f0d4:	0003c954 	.word	0x0003c954
   1f0d8:	0003ca40 	.word	0x0003ca40

0001f0dc <bt_ready>:
	LOG_INF("NRF91 is now Sleepy");
	//Todo Maybe remember that nrf91 is sleeping -> boolean
}

static void bt_ready(int err)
{
   1f0dc:	b530      	push	{r4, r5, lr}
   1f0de:	4b1c      	ldr	r3, [pc, #112]	; (1f150 <bt_ready+0x74>)
   1f0e0:	4c1c      	ldr	r4, [pc, #112]	; (1f154 <bt_ready+0x78>)
	LOG_INF("BT Host Stack enabled");
   1f0e2:	491d      	ldr	r1, [pc, #116]	; (1f158 <bt_ready+0x7c>)
   1f0e4:	1ae4      	subs	r4, r4, r3
   1f0e6:	08e4      	lsrs	r4, r4, #3
   1f0e8:	01a4      	lsls	r4, r4, #6
{
   1f0ea:	4605      	mov	r5, r0
   1f0ec:	b089      	sub	sp, #36	; 0x24
	LOG_INF("BT Host Stack enabled");
   1f0ee:	f044 0003 	orr.w	r0, r4, #3
   1f0f2:	f018 f9cd 	bl	37490 <log_string_sync>
	if (err) {
   1f0f6:	b125      	cbz	r5, 1f102 <bt_ready+0x26>
		printk("BLE init failed with error code %d\n", err);
   1f0f8:	4818      	ldr	r0, [pc, #96]	; (1f15c <bt_ready+0x80>)
   1f0fa:	4629      	mov	r1, r5
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
			      ARRAY_SIZE(sd));

	if (err) 
	{
		printk("Advertising failed to start (err %d)\n", err);
   1f0fc:	f018 f80d 	bl	3711a <printk>
		return;
   1f100:	e00e      	b.n	1f120 <bt_ready+0x44>
	bt_conn_cb_register(&conn_callbacks);
   1f102:	4817      	ldr	r0, [pc, #92]	; (1f160 <bt_ready+0x84>)
   1f104:	f006 fef6 	bl	25ef4 <bt_conn_cb_register>
		settings_load();
   1f108:	f018 fcb5 	bl	37a76 <settings_load>
	err = bt_nus_init(&nus_cb);// ->dfu_helper file
   1f10c:	4815      	ldr	r0, [pc, #84]	; (1f164 <bt_ready+0x88>)
   1f10e:	f002 fe65 	bl	21ddc <bt_nus_init>
	if (err) {
   1f112:	4602      	mov	r2, r0
   1f114:	b130      	cbz	r0, 1f124 <bt_ready+0x48>
		LOG_ERR("Failed to initialize UART service (err: %d)", err);
   1f116:	4914      	ldr	r1, [pc, #80]	; (1f168 <bt_ready+0x8c>)
   1f118:	f044 0001 	orr.w	r0, r4, #1
   1f11c:	f018 f9b8 	bl	37490 <log_string_sync>
	}

	k_sem_give(&ble_init_ok);
}
   1f120:	b009      	add	sp, #36	; 0x24
   1f122:	bd30      	pop	{r4, r5, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
   1f124:	4d11      	ldr	r5, [pc, #68]	; (1f16c <bt_ready+0x90>)
   1f126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f128:	ac03      	add	r4, sp, #12
   1f12a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f12c:	682b      	ldr	r3, [r5, #0]
   1f12e:	6023      	str	r3, [r4, #0]
   1f130:	2301      	movs	r3, #1
   1f132:	490f      	ldr	r1, [pc, #60]	; (1f170 <bt_ready+0x94>)
   1f134:	9300      	str	r3, [sp, #0]
   1f136:	2202      	movs	r2, #2
   1f138:	4b0e      	ldr	r3, [pc, #56]	; (1f174 <bt_ready+0x98>)
   1f13a:	a803      	add	r0, sp, #12
   1f13c:	f006 f8c4 	bl	252c8 <bt_le_adv_start>
	if (err) 
   1f140:	4601      	mov	r1, r0
   1f142:	b108      	cbz	r0, 1f148 <bt_ready+0x6c>
		printk("Advertising failed to start (err %d)\n", err);
   1f144:	480c      	ldr	r0, [pc, #48]	; (1f178 <bt_ready+0x9c>)
   1f146:	e7d9      	b.n	1f0fc <bt_ready+0x20>
	z_impl_k_sem_give(sem);
   1f148:	480c      	ldr	r0, [pc, #48]	; (1f17c <bt_ready+0xa0>)
   1f14a:	f010 feb9 	bl	2fec0 <z_impl_k_sem_give>
   1f14e:	e7e7      	b.n	1f120 <bt_ready+0x44>
   1f150:	0003b448 	.word	0x0003b448
   1f154:	0003b518 	.word	0x0003b518
   1f158:	0003cae3 	.word	0x0003cae3
   1f15c:	0003caf9 	.word	0x0003caf9
   1f160:	200004f8 	.word	0x200004f8
   1f164:	20000510 	.word	0x20000510
   1f168:	0003cb1d 	.word	0x0003cb1d
   1f16c:	0003b5d0 	.word	0x0003b5d0
   1f170:	0003b738 	.word	0x0003b738
   1f174:	0003b748 	.word	0x0003b748
   1f178:	0003cb49 	.word	0x0003cb49
   1f17c:	20000c38 	.word	0x20000c38

0001f180 <do_mcuboot_dfu>:


/**@brief Do mcuboot dfu for 52 */
void do_mcuboot_dfu(void)
{
   1f180:	b508      	push	{r3, lr}
   1f182:	4806      	ldr	r0, [pc, #24]	; (1f19c <do_mcuboot_dfu+0x1c>)
   1f184:	4b06      	ldr	r3, [pc, #24]	; (1f1a0 <do_mcuboot_dfu+0x20>)
	LOG_INF("Rebooting ....");
   1f186:	4907      	ldr	r1, [pc, #28]	; (1f1a4 <do_mcuboot_dfu+0x24>)
   1f188:	1ac0      	subs	r0, r0, r3
   1f18a:	08c0      	lsrs	r0, r0, #3
   1f18c:	0180      	lsls	r0, r0, #6
   1f18e:	f040 0003 	orr.w	r0, r0, #3
   1f192:	f018 f97d 	bl	37490 <log_string_sync>
	sys_reboot(SYS_REBOOT_WARM);
   1f196:	2000      	movs	r0, #0
   1f198:	f001 f928 	bl	203ec <sys_reboot>
   1f19c:	0003b518 	.word	0x0003b518
   1f1a0:	0003b448 	.word	0x0003b448
   1f1a4:	0003cb6f 	.word	0x0003cb6f

0001f1a8 <main>:
		do_mcuboot_dfu();
	}
}

void main(void)
{
   1f1a8:	b570      	push	{r4, r5, r6, lr}
   1f1aa:	4b2f      	ldr	r3, [pc, #188]	; (1f268 <main+0xc0>)
   1f1ac:	4c2f      	ldr	r4, [pc, #188]	; (1f26c <main+0xc4>)
	int err = 0;

#if UPDATE_APP
	LOG_INF("Cross DFU Demo(new)");
#else
	LOG_INF("Cross DFU Demo(ori)");
   1f1ae:	4930      	ldr	r1, [pc, #192]	; (1f270 <main+0xc8>)
   1f1b0:	1ae4      	subs	r4, r4, r3
   1f1b2:	08e4      	lsrs	r4, r4, #3
   1f1b4:	01a4      	lsls	r4, r4, #6
   1f1b6:	f044 0003 	orr.w	r0, r4, #3
   1f1ba:	f018 f969 	bl	37490 <log_string_sync>
#endif

	err = dk_leds_init();
   1f1be:	f00d f9df 	bl	2c580 <dk_leds_init>
	if (err) {
   1f1c2:	4602      	mov	r2, r0
   1f1c4:	b120      	cbz	r0, 1f1d0 <main+0x28>
		LOG_ERR("Cannot init LEDs (err: %d)", err);
   1f1c6:	492b      	ldr	r1, [pc, #172]	; (1f274 <main+0xcc>)
   1f1c8:	f044 0001 	orr.w	r0, r4, #1
   1f1cc:	f018 f960 	bl	37490 <log_string_sync>
	}
	err = dk_buttons_init(button_handel);
   1f1d0:	4829      	ldr	r0, [pc, #164]	; (1f278 <main+0xd0>)
   1f1d2:	f00d fa29 	bl	2c628 <dk_buttons_init>
	if (err) {
   1f1d6:	4602      	mov	r2, r0
   1f1d8:	b120      	cbz	r0, 1f1e4 <main+0x3c>
		LOG_ERR("Cannot init Buttons (err: %d)", err);
   1f1da:	4928      	ldr	r1, [pc, #160]	; (1f27c <main+0xd4>)
   1f1dc:	f044 0001 	orr.w	r0, r4, #1
   1f1e0:	f018 f956 	bl	37490 <log_string_sync>
	}

#if UPDATE_APP
	err = dk_set_led(DK_LED4,1);
#else
	err = dk_set_led(DK_LED3,1);
   1f1e4:	2101      	movs	r1, #1
   1f1e6:	2002      	movs	r0, #2
   1f1e8:	f00d fad2 	bl	2c790 <dk_set_led>
#endif
	if(err){
   1f1ec:	4602      	mov	r2, r0
   1f1ee:	b120      	cbz	r0, 1f1fa <main+0x52>
		LOG_ERR("Set Led err %d",err);
   1f1f0:	4923      	ldr	r1, [pc, #140]	; (1f280 <main+0xd8>)
   1f1f2:	f044 0001 	orr.w	r0, r4, #1
   1f1f6:	f018 f94b 	bl	37490 <log_string_sync>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1f1fa:	4822      	ldr	r0, [pc, #136]	; (1f284 <main+0xdc>)
	}

	uart = device_get_binding(UART_DEVICE_LABEL);
   1f1fc:	4e22      	ldr	r6, [pc, #136]	; (1f288 <main+0xe0>)
   1f1fe:	f00f fdff 	bl	2ee00 <z_impl_device_get_binding>
   1f202:	6030      	str	r0, [r6, #0]
	if (!uart) {
   1f204:	b930      	cbnz	r0, 1f214 <main+0x6c>
		LOG_ERR("Cant init Uart Component");
   1f206:	f044 0001 	orr.w	r0, r4, #1
   1f20a:	4920      	ldr	r1, [pc, #128]	; (1f28c <main+0xe4>)
	
	//Forever Loop :^)
	for (;;) {
		k_sleep(K_SECONDS(10));
	}
}
   1f20c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Cant init Uart Component");
   1f210:	f018 b93e 	b.w	37490 <log_string_sync>
	err = bt_enable(bt_ready);
   1f214:	481e      	ldr	r0, [pc, #120]	; (1f290 <main+0xe8>)
   1f216:	f005 fb85 	bl	24924 <bt_enable>
	if (err) {
   1f21a:	4605      	mov	r5, r0
   1f21c:	b108      	cbz	r0, 1f222 <main+0x7a>
		error();
   1f21e:	f017 feb6 	bl	36f8e <error>
	return z_impl_k_sem_take(sem, timeout);
   1f222:	f640 42cd 	movw	r2, #3277	; 0xccd
   1f226:	2300      	movs	r3, #0
   1f228:	481a      	ldr	r0, [pc, #104]	; (1f294 <main+0xec>)
   1f22a:	f010 fe8d 	bl	2ff48 <z_impl_k_sem_take>
	z_impl_k_sem_give(sem);
   1f22e:	4819      	ldr	r0, [pc, #100]	; (1f294 <main+0xec>)
   1f230:	f010 fe46 	bl	2fec0 <z_impl_k_sem_give>
	boot_write_img_confirmed();
   1f234:	f01a fa44 	bl	396c0 <boot_write_img_confirmed>
    app_cmd_init(uart);
   1f238:	6830      	ldr	r0, [r6, #0]
   1f23a:	f7ff fd45 	bl	1ecc8 <app_cmd_init>
	app_cmd_event_cb_register(app_cmd_event_handler);
   1f23e:	4816      	ldr	r0, [pc, #88]	; (1f298 <main+0xf0>)
   1f240:	f7ff fd3c 	bl	1ecbc <app_cmd_event_cb_register>
	app_cmd_add(CMD_OP_GO_TO_SLEEP,NULL,NULL);
   1f244:	4629      	mov	r1, r5
   1f246:	462a      	mov	r2, r5
   1f248:	20c0      	movs	r0, #192	; 0xc0
   1f24a:	f7ff fcc3 	bl	1ebd4 <app_cmd_add>
	initalize_dfu_module();
   1f24e:	f7fe fe1d 	bl	1de8c <initalize_dfu_module>
	LOG_INF("Init completed, Idling till Update or Connect");
   1f252:	4912      	ldr	r1, [pc, #72]	; (1f29c <main+0xf4>)
   1f254:	f044 0003 	orr.w	r0, r4, #3
   1f258:	f018 f91a 	bl	37490 <log_string_sync>
	return z_impl_k_sleep(timeout);
   1f25c:	2100      	movs	r1, #0
   1f25e:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   1f262:	f012 fd25 	bl	31cb0 <z_impl_k_sleep>
	for (;;) {
   1f266:	e7f9      	b.n	1f25c <main+0xb4>
   1f268:	0003b448 	.word	0x0003b448
   1f26c:	0003b518 	.word	0x0003b518
   1f270:	0003cb7e 	.word	0x0003cb7e
   1f274:	0003cb92 	.word	0x0003cb92
   1f278:	00036fa5 	.word	0x00036fa5
   1f27c:	0003cbad 	.word	0x0003cbad
   1f280:	0003cbcb 	.word	0x0003cbcb
   1f284:	0003cbda 	.word	0x0003cbda
   1f288:	2000239c 	.word	0x2000239c
   1f28c:	0003cbe1 	.word	0x0003cbe1
   1f290:	0001f0dd 	.word	0x0001f0dd
   1f294:	20000c38 	.word	0x20000c38
   1f298:	0001eea1 	.word	0x0001eea1
   1f29c:	0003cbfa 	.word	0x0003cbfa

0001f2a0 <crc32_ieee_update>:
{
	return crc32_ieee_update(0x0, data, len);
}

uint32_t crc32_ieee_update(uint32_t crc, const uint8_t *data, size_t len)
{
   1f2a0:	b530      	push	{r4, r5, lr}
	crc = ~crc;

	for (size_t i = 0; i < len; i++) {
		uint8_t byte = data[i];

		crc = (crc >> 4) ^ table[(crc ^ byte) & 0x0f];
   1f2a2:	4d0d      	ldr	r5, [pc, #52]	; (1f2d8 <crc32_ieee_update+0x38>)
	crc = ~crc;
   1f2a4:	43c0      	mvns	r0, r0
	for (size_t i = 0; i < len; i++) {
   1f2a6:	440a      	add	r2, r1
   1f2a8:	4291      	cmp	r1, r2
   1f2aa:	d101      	bne.n	1f2b0 <crc32_ieee_update+0x10>
		crc = (crc >> 4) ^ table[(crc ^ ((uint32_t)byte >> 4)) & 0x0f];
	}

	return (~crc);
}
   1f2ac:	43c0      	mvns	r0, r0
   1f2ae:	bd30      	pop	{r4, r5, pc}
		uint8_t byte = data[i];
   1f2b0:	f811 3b01 	ldrb.w	r3, [r1], #1
		crc = (crc >> 4) ^ table[(crc ^ byte) & 0x0f];
   1f2b4:	ea83 0400 	eor.w	r4, r3, r0
   1f2b8:	f004 040f 	and.w	r4, r4, #15
   1f2bc:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
   1f2c0:	ea84 1010 	eor.w	r0, r4, r0, lsr #4
		crc = (crc >> 4) ^ table[(crc ^ ((uint32_t)byte >> 4)) & 0x0f];
   1f2c4:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
   1f2c8:	f003 030f 	and.w	r3, r3, #15
   1f2cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   1f2d0:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
	for (size_t i = 0; i < len; i++) {
   1f2d4:	e7e8      	b.n	1f2a8 <crc32_ieee_update+0x8>
   1f2d6:	bf00      	nop
   1f2d8:	0003b750 	.word	0x0003b750

0001f2dc <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   1f2dc:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1f2de:	4c0a      	ldr	r4, [pc, #40]	; (1f308 <crc8_ccitt+0x2c>)
   1f2e0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   1f2e2:	4291      	cmp	r1, r2
   1f2e4:	d100      	bne.n	1f2e8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   1f2e6:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   1f2e8:	f811 3b01 	ldrb.w	r3, [r1], #1
   1f2ec:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1f2ee:	0903      	lsrs	r3, r0, #4
   1f2f0:	5ce3      	ldrb	r3, [r4, r3]
   1f2f2:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   1f2f6:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1f2f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1f2fc:	5ce0      	ldrb	r0, [r4, r3]
   1f2fe:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   1f302:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   1f304:	e7ed      	b.n	1f2e2 <crc8_ccitt+0x6>
   1f306:	bf00      	nop
   1f308:	0003cc33 	.word	0x0003cc33

0001f30c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f30c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   1f30e:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1f312:	2b02      	cmp	r3, #2
{
   1f314:	b570      	push	{r4, r5, r6, lr}
   1f316:	4604      	mov	r4, r0
   1f318:	460e      	mov	r6, r1
	notify->result = res;
   1f31a:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f31c:	d010      	beq.n	1f340 <sys_notify_finalize+0x34>
   1f31e:	2b03      	cmp	r3, #3
   1f320:	d004      	beq.n	1f32c <sys_notify_finalize+0x20>
   1f322:	2b01      	cmp	r3, #1
   1f324:	d10f      	bne.n	1f346 <sys_notify_finalize+0x3a>
   1f326:	2500      	movs	r5, #0
   1f328:	4628      	mov	r0, r5
   1f32a:	e001      	b.n	1f330 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f32c:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f32e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f330:	2300      	movs	r3, #0
   1f332:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f334:	b110      	cbz	r0, 1f33c <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1f336:	4631      	mov	r1, r6
   1f338:	f013 fe3c 	bl	32fb4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f33c:	4628      	mov	r0, r5
   1f33e:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   1f340:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1f342:	2500      	movs	r5, #0
		break;
   1f344:	e7f4      	b.n	1f330 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   1f346:	4a06      	ldr	r2, [pc, #24]	; (1f360 <sys_notify_finalize+0x54>)
   1f348:	4906      	ldr	r1, [pc, #24]	; (1f364 <sys_notify_finalize+0x58>)
   1f34a:	4807      	ldr	r0, [pc, #28]	; (1f368 <sys_notify_finalize+0x5c>)
   1f34c:	2345      	movs	r3, #69	; 0x45
   1f34e:	f017 fee4 	bl	3711a <printk>
   1f352:	4803      	ldr	r0, [pc, #12]	; (1f360 <sys_notify_finalize+0x54>)
   1f354:	2145      	movs	r1, #69	; 0x45
   1f356:	f018 f886 	bl	37466 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   1f35a:	2500      	movs	r5, #0
   1f35c:	e7e7      	b.n	1f32e <sys_notify_finalize+0x22>
   1f35e:	bf00      	nop
   1f360:	0003cc43 	.word	0x0003cc43
   1f364:	00041a5a 	.word	0x00041a5a
   1f368:	0003c48a 	.word	0x0003c48a

0001f36c <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
   1f36c:	4b01      	ldr	r3, [pc, #4]	; (1f374 <__printk_hook_install+0x8>)
   1f36e:	6018      	str	r0, [r3, #0]
}
   1f370:	4770      	bx	lr
   1f372:	bf00      	nop
   1f374:	2000051c 	.word	0x2000051c

0001f378 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1f378:	b530      	push	{r4, r5, lr}
   1f37a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   1f37c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   1f380:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1f382:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   1f384:	a901      	add	r1, sp, #4
   1f386:	4805      	ldr	r0, [pc, #20]	; (1f39c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   1f388:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   1f38a:	f000 fc97 	bl	1fcbc <cbvprintf>

	if (ctx.count < ctx.max) {
   1f38e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   1f392:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1f394:	bfb8      	it	lt
   1f396:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1f398:	b005      	add	sp, #20
   1f39a:	bd30      	pop	{r4, r5, pc}
   1f39c:	000370f5 	.word	0x000370f5

0001f3a0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f3a4:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   1f3a8:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1f3aa:	f019 0f08 	tst.w	r9, #8
{
   1f3ae:	4604      	mov	r4, r0
   1f3b0:	9203      	str	r2, [sp, #12]
	if (processing) {
   1f3b2:	d022      	beq.n	1f3fa <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
   1f3b4:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1f3b6:	bf0c      	ite	eq
   1f3b8:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1f3bc:	f049 0920 	orrne.w	r9, r9, #32
   1f3c0:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   1f3c4:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f3c6:	4620      	mov	r0, r4
   1f3c8:	f010 fa0a 	bl	2f7e0 <z_spin_unlock_valid>
   1f3cc:	b968      	cbnz	r0, 1f3ea <process_event+0x4a>
   1f3ce:	4a9f      	ldr	r2, [pc, #636]	; (1f64c <process_event+0x2ac>)
   1f3d0:	499f      	ldr	r1, [pc, #636]	; (1f650 <process_event+0x2b0>)
   1f3d2:	48a0      	ldr	r0, [pc, #640]	; (1f654 <process_event+0x2b4>)
   1f3d4:	23ac      	movs	r3, #172	; 0xac
   1f3d6:	f017 fea0 	bl	3711a <printk>
   1f3da:	489f      	ldr	r0, [pc, #636]	; (1f658 <process_event+0x2b8>)
   1f3dc:	4621      	mov	r1, r4
   1f3de:	f017 fe9c 	bl	3711a <printk>
   1f3e2:	489a      	ldr	r0, [pc, #616]	; (1f64c <process_event+0x2ac>)
   1f3e4:	21ac      	movs	r1, #172	; 0xac
   1f3e6:	f018 f83e 	bl	37466 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1f3ea:	9b03      	ldr	r3, [sp, #12]
   1f3ec:	f383 8811 	msr	BASEPRI, r3
   1f3f0:	f3bf 8f6f 	isb	sy
}
   1f3f4:	b005      	add	sp, #20
   1f3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   1f3fa:	4f98      	ldr	r7, [pc, #608]	; (1f65c <process_event+0x2bc>)
   1f3fc:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1f654 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f400:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1f404:	2902      	cmp	r1, #2
   1f406:	d106      	bne.n	1f416 <process_event+0x76>
			evt = process_recheck(mgr);
   1f408:	4620      	mov	r0, r4
   1f40a:	f017 fea0 	bl	3714e <process_recheck>
		if (evt == EVT_NOP) {
   1f40e:	2800      	cmp	r0, #0
   1f410:	d0d8      	beq.n	1f3c4 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
   1f412:	2801      	cmp	r0, #1
   1f414:	d168      	bne.n	1f4e8 <process_event+0x148>
			res = mgr->last_res;
   1f416:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f41a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   1f41c:	f1bb 0f00 	cmp.w	fp, #0
   1f420:	da0a      	bge.n	1f438 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1f422:	2600      	movs	r6, #0
		*clients = mgr->clients;
   1f424:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f426:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   1f42a:	e9c4 6600 	strd	r6, r6, [r4]
   1f42e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f432:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   1f434:	9601      	str	r6, [sp, #4]
   1f436:	e027      	b.n	1f488 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f438:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1f43c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1f43e:	2901      	cmp	r1, #1
   1f440:	d834      	bhi.n	1f4ac <process_event+0x10c>
	list->head = NULL;
   1f442:	2100      	movs	r1, #0
   1f444:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   1f448:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   1f44a:	6825      	ldr	r5, [r4, #0]
   1f44c:	b29b      	uxth	r3, r3
	list->tail = NULL;
   1f44e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1f452:	d10c      	bne.n	1f46e <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1f454:	428d      	cmp	r5, r1
   1f456:	462a      	mov	r2, r5
   1f458:	bf38      	it	cc
   1f45a:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1f45c:	b12a      	cbz	r2, 1f46a <process_event+0xca>
				mgr->refs += 1U;
   1f45e:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f460:	6812      	ldr	r2, [r2, #0]
   1f462:	3101      	adds	r1, #1
   1f464:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1f466:	2a00      	cmp	r2, #0
   1f468:	d1f8      	bne.n	1f45c <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f46a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f46e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1f470:	4620      	mov	r0, r4
   1f472:	f017 fe6c 	bl	3714e <process_recheck>
   1f476:	4606      	mov	r6, r0
   1f478:	2800      	cmp	r0, #0
   1f47a:	d0db      	beq.n	1f434 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1f47c:	8ba3      	ldrh	r3, [r4, #28]
   1f47e:	f043 0320 	orr.w	r3, r3, #32
   1f482:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   1f484:	2300      	movs	r3, #0
   1f486:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1f488:	8ba3      	ldrh	r3, [r4, #28]
   1f48a:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1f48e:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1f490:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
   1f492:	d003      	beq.n	1f49c <process_event+0xfc>
		if (do_monitors
   1f494:	68a2      	ldr	r2, [r4, #8]
   1f496:	2a00      	cmp	r2, #0
   1f498:	f040 80f0 	bne.w	1f67c <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
   1f49c:	b91d      	cbnz	r5, 1f4a6 <process_event+0x106>
		    || (transit != NULL)) {
   1f49e:	9a01      	ldr	r2, [sp, #4]
   1f4a0:	2a00      	cmp	r2, #0
   1f4a2:	f000 8136 	beq.w	1f712 <process_event+0x372>
   1f4a6:	f04f 0900 	mov.w	r9, #0
   1f4aa:	e0e9      	b.n	1f680 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1f4ac:	2a04      	cmp	r2, #4
   1f4ae:	d10e      	bne.n	1f4ce <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f4b0:	f023 0307 	bic.w	r3, r3, #7
   1f4b4:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f4b6:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1f4b8:	4620      	mov	r0, r4
   1f4ba:	f017 fe48 	bl	3714e <process_recheck>
   1f4be:	4605      	mov	r5, r0
   1f4c0:	b118      	cbz	r0, 1f4ca <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1f4c2:	f042 0220 	orr.w	r2, r2, #32
   1f4c6:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   1f4c8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1f4ca:	9501      	str	r5, [sp, #4]
   1f4cc:	e7dc      	b.n	1f488 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
   1f4ce:	4640      	mov	r0, r8
   1f4d0:	4963      	ldr	r1, [pc, #396]	; (1f660 <process_event+0x2c0>)
   1f4d2:	f240 131b 	movw	r3, #283	; 0x11b
   1f4d6:	463a      	mov	r2, r7
   1f4d8:	f017 fe1f 	bl	3711a <printk>
   1f4dc:	f240 111b 	movw	r1, #283	; 0x11b
   1f4e0:	4638      	mov	r0, r7
   1f4e2:	f017 ffc0 	bl	37466 <assert_post_action>
   1f4e6:	e7ef      	b.n	1f4c8 <process_event+0x128>
		} else if (evt == EVT_START) {
   1f4e8:	2803      	cmp	r0, #3
   1f4ea:	d135      	bne.n	1f558 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1f4ec:	f1b9 0f00 	cmp.w	r9, #0
   1f4f0:	d00b      	beq.n	1f50a <process_event+0x16a>
   1f4f2:	495c      	ldr	r1, [pc, #368]	; (1f664 <process_event+0x2c4>)
   1f4f4:	4640      	mov	r0, r8
   1f4f6:	f44f 73ab 	mov.w	r3, #342	; 0x156
   1f4fa:	463a      	mov	r2, r7
   1f4fc:	f017 fe0d 	bl	3711a <printk>
   1f500:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1f504:	4638      	mov	r0, r7
   1f506:	f017 ffae 	bl	37466 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1f50a:	6823      	ldr	r3, [r4, #0]
   1f50c:	b95b      	cbnz	r3, 1f526 <process_event+0x186>
   1f50e:	4956      	ldr	r1, [pc, #344]	; (1f668 <process_event+0x2c8>)
   1f510:	4640      	mov	r0, r8
   1f512:	f240 1357 	movw	r3, #343	; 0x157
   1f516:	463a      	mov	r2, r7
   1f518:	f017 fdff 	bl	3711a <printk>
   1f51c:	f240 1157 	movw	r1, #343	; 0x157
   1f520:	4638      	mov	r0, r7
   1f522:	f017 ffa0 	bl	37466 <assert_post_action>
			transit = mgr->transitions->start;
   1f526:	6923      	ldr	r3, [r4, #16]
   1f528:	681b      	ldr	r3, [r3, #0]
   1f52a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1f52c:	b95b      	cbnz	r3, 1f546 <process_event+0x1a6>
   1f52e:	494f      	ldr	r1, [pc, #316]	; (1f66c <process_event+0x2cc>)
   1f530:	4640      	mov	r0, r8
   1f532:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   1f536:	463a      	mov	r2, r7
   1f538:	f017 fdef 	bl	3711a <printk>
   1f53c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   1f540:	4638      	mov	r0, r7
   1f542:	f017 ff90 	bl	37466 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f546:	8ba3      	ldrh	r3, [r4, #28]
   1f548:	f023 0307 	bic.w	r3, r3, #7
   1f54c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f550:	83a3      	strh	r3, [r4, #28]
}
   1f552:	2500      	movs	r5, #0
		res = 0;
   1f554:	46ab      	mov	fp, r5
}
   1f556:	e797      	b.n	1f488 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
   1f558:	2804      	cmp	r0, #4
   1f55a:	d132      	bne.n	1f5c2 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   1f55c:	f1b9 0f02 	cmp.w	r9, #2
   1f560:	d00b      	beq.n	1f57a <process_event+0x1da>
   1f562:	4943      	ldr	r1, [pc, #268]	; (1f670 <process_event+0x2d0>)
   1f564:	4640      	mov	r0, r8
   1f566:	f240 135d 	movw	r3, #349	; 0x15d
   1f56a:	463a      	mov	r2, r7
   1f56c:	f017 fdd5 	bl	3711a <printk>
   1f570:	f240 115d 	movw	r1, #349	; 0x15d
   1f574:	4638      	mov	r0, r7
   1f576:	f017 ff76 	bl	37466 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1f57a:	8be3      	ldrh	r3, [r4, #30]
   1f57c:	b15b      	cbz	r3, 1f596 <process_event+0x1f6>
   1f57e:	493d      	ldr	r1, [pc, #244]	; (1f674 <process_event+0x2d4>)
   1f580:	4640      	mov	r0, r8
   1f582:	f44f 73af 	mov.w	r3, #350	; 0x15e
   1f586:	463a      	mov	r2, r7
   1f588:	f017 fdc7 	bl	3711a <printk>
   1f58c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1f590:	4638      	mov	r0, r7
   1f592:	f017 ff68 	bl	37466 <assert_post_action>
			transit = mgr->transitions->stop;
   1f596:	6923      	ldr	r3, [r4, #16]
   1f598:	685b      	ldr	r3, [r3, #4]
   1f59a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1f59c:	b95b      	cbnz	r3, 1f5b6 <process_event+0x216>
   1f59e:	4933      	ldr	r1, [pc, #204]	; (1f66c <process_event+0x2cc>)
   1f5a0:	4640      	mov	r0, r8
   1f5a2:	f240 1361 	movw	r3, #353	; 0x161
   1f5a6:	463a      	mov	r2, r7
   1f5a8:	f017 fdb7 	bl	3711a <printk>
   1f5ac:	f240 1161 	movw	r1, #353	; 0x161
   1f5b0:	4638      	mov	r0, r7
   1f5b2:	f017 ff58 	bl	37466 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f5b6:	8ba3      	ldrh	r3, [r4, #28]
   1f5b8:	f023 0307 	bic.w	r3, r3, #7
   1f5bc:	f043 0304 	orr.w	r3, r3, #4
   1f5c0:	e7c6      	b.n	1f550 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
   1f5c2:	2805      	cmp	r0, #5
   1f5c4:	d132      	bne.n	1f62c <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1f5c6:	f1b9 0f01 	cmp.w	r9, #1
   1f5ca:	d00b      	beq.n	1f5e4 <process_event+0x244>
   1f5cc:	492a      	ldr	r1, [pc, #168]	; (1f678 <process_event+0x2d8>)
   1f5ce:	4640      	mov	r0, r8
   1f5d0:	f44f 73b2 	mov.w	r3, #356	; 0x164
   1f5d4:	463a      	mov	r2, r7
   1f5d6:	f017 fda0 	bl	3711a <printk>
   1f5da:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1f5de:	4638      	mov	r0, r7
   1f5e0:	f017 ff41 	bl	37466 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1f5e4:	6823      	ldr	r3, [r4, #0]
   1f5e6:	b95b      	cbnz	r3, 1f600 <process_event+0x260>
   1f5e8:	491f      	ldr	r1, [pc, #124]	; (1f668 <process_event+0x2c8>)
   1f5ea:	4640      	mov	r0, r8
   1f5ec:	f240 1365 	movw	r3, #357	; 0x165
   1f5f0:	463a      	mov	r2, r7
   1f5f2:	f017 fd92 	bl	3711a <printk>
   1f5f6:	f240 1165 	movw	r1, #357	; 0x165
   1f5fa:	4638      	mov	r0, r7
   1f5fc:	f017 ff33 	bl	37466 <assert_post_action>
			transit = mgr->transitions->reset;
   1f600:	6923      	ldr	r3, [r4, #16]
   1f602:	689b      	ldr	r3, [r3, #8]
   1f604:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1f606:	b95b      	cbnz	r3, 1f620 <process_event+0x280>
   1f608:	4918      	ldr	r1, [pc, #96]	; (1f66c <process_event+0x2cc>)
   1f60a:	4640      	mov	r0, r8
   1f60c:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1f610:	463a      	mov	r2, r7
   1f612:	f017 fd82 	bl	3711a <printk>
   1f616:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1f61a:	4638      	mov	r0, r7
   1f61c:	f017 ff23 	bl	37466 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f620:	8ba3      	ldrh	r3, [r4, #28]
   1f622:	f023 0307 	bic.w	r3, r3, #7
   1f626:	f043 0305 	orr.w	r3, r3, #5
   1f62a:	e791      	b.n	1f550 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
   1f62c:	490c      	ldr	r1, [pc, #48]	; (1f660 <process_event+0x2c0>)
   1f62e:	f240 136b 	movw	r3, #363	; 0x16b
   1f632:	463a      	mov	r2, r7
   1f634:	4640      	mov	r0, r8
   1f636:	f017 fd70 	bl	3711a <printk>
   1f63a:	2500      	movs	r5, #0
   1f63c:	f240 116b 	movw	r1, #363	; 0x16b
   1f640:	4638      	mov	r0, r7
   1f642:	f017 ff10 	bl	37466 <assert_post_action>
		onoff_transition_fn transit = NULL;
   1f646:	9501      	str	r5, [sp, #4]
   1f648:	e784      	b.n	1f554 <process_event+0x1b4>
   1f64a:	bf00      	nop
   1f64c:	0003cd09 	.word	0x0003cd09
   1f650:	0003cd2f 	.word	0x0003cd2f
   1f654:	0003c48a 	.word	0x0003c48a
   1f658:	0003cd46 	.word	0x0003cd46
   1f65c:	0003cc66 	.word	0x0003cc66
   1f660:	00041a5a 	.word	0x00041a5a
   1f664:	0003cc88 	.word	0x0003cc88
   1f668:	0003cc94 	.word	0x0003cc94
   1f66c:	0003ccb7 	.word	0x0003ccb7
   1f670:	0003ccce 	.word	0x0003ccce
   1f674:	0003cce4 	.word	0x0003cce4
   1f678:	0003ccf3 	.word	0x0003ccf3
				   && !sys_slist_is_empty(&mgr->monitors);
   1f67c:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1f680:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   1f684:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
   1f688:	83a3      	strh	r3, [r4, #28]
   1f68a:	4650      	mov	r0, sl
   1f68c:	f010 f8a8 	bl	2f7e0 <z_spin_unlock_valid>
   1f690:	b968      	cbnz	r0, 1f6ae <process_event+0x30e>
   1f692:	4a3a      	ldr	r2, [pc, #232]	; (1f77c <process_event+0x3dc>)
   1f694:	493a      	ldr	r1, [pc, #232]	; (1f780 <process_event+0x3e0>)
   1f696:	23ac      	movs	r3, #172	; 0xac
   1f698:	4640      	mov	r0, r8
   1f69a:	f017 fd3e 	bl	3711a <printk>
   1f69e:	4839      	ldr	r0, [pc, #228]	; (1f784 <process_event+0x3e4>)
   1f6a0:	4651      	mov	r1, sl
   1f6a2:	f017 fd3a 	bl	3711a <printk>
   1f6a6:	4835      	ldr	r0, [pc, #212]	; (1f77c <process_event+0x3dc>)
   1f6a8:	21ac      	movs	r1, #172	; 0xac
   1f6aa:	f017 fedc 	bl	37466 <assert_post_action>
   1f6ae:	9b03      	ldr	r3, [sp, #12]
   1f6b0:	f383 8811 	msr	BASEPRI, r3
   1f6b4:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1f6b8:	f1b9 0f00 	cmp.w	r9, #0
   1f6bc:	d138      	bne.n	1f730 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
   1f6be:	2d00      	cmp	r5, #0
   1f6c0:	d14b      	bne.n	1f75a <process_event+0x3ba>
			if (transit != NULL) {
   1f6c2:	9b01      	ldr	r3, [sp, #4]
   1f6c4:	b113      	cbz	r3, 1f6cc <process_event+0x32c>
				transit(mgr, transition_complete);
   1f6c6:	4930      	ldr	r1, [pc, #192]	; (1f788 <process_event+0x3e8>)
   1f6c8:	4620      	mov	r0, r4
   1f6ca:	4798      	blx	r3
	__asm__ volatile(
   1f6cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f6d0:	f3ef 8b11 	mrs	fp, BASEPRI
   1f6d4:	f383 8812 	msr	BASEPRI_MAX, r3
   1f6d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f6dc:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   1f6de:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f6e2:	f010 f86f 	bl	2f7c4 <z_spin_lock_valid>
   1f6e6:	b968      	cbnz	r0, 1f704 <process_event+0x364>
   1f6e8:	4a24      	ldr	r2, [pc, #144]	; (1f77c <process_event+0x3dc>)
   1f6ea:	4928      	ldr	r1, [pc, #160]	; (1f78c <process_event+0x3ec>)
   1f6ec:	2381      	movs	r3, #129	; 0x81
   1f6ee:	4640      	mov	r0, r8
   1f6f0:	f017 fd13 	bl	3711a <printk>
   1f6f4:	4826      	ldr	r0, [pc, #152]	; (1f790 <process_event+0x3f0>)
   1f6f6:	4651      	mov	r1, sl
   1f6f8:	f017 fd0f 	bl	3711a <printk>
   1f6fc:	481f      	ldr	r0, [pc, #124]	; (1f77c <process_event+0x3dc>)
   1f6fe:	2181      	movs	r1, #129	; 0x81
   1f700:	f017 feb1 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f704:	4650      	mov	r0, sl
   1f706:	f010 f87b 	bl	2f800 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1f70a:	8ba3      	ldrh	r3, [r4, #28]
   1f70c:	f023 0308 	bic.w	r3, r3, #8
   1f710:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1f712:	8ba3      	ldrh	r3, [r4, #28]
   1f714:	06da      	lsls	r2, r3, #27
   1f716:	d528      	bpl.n	1f76a <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1f718:	f023 0310 	bic.w	r3, r3, #16
   1f71c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   1f71e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1f720:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   1f724:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1f728:	2900      	cmp	r1, #0
   1f72a:	f47f ae6b 	bne.w	1f404 <process_event+0x64>
out:
   1f72e:	e649      	b.n	1f3c4 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1f730:	68a1      	ldr	r1, [r4, #8]
   1f732:	2900      	cmp	r1, #0
   1f734:	d0c3      	beq.n	1f6be <process_event+0x31e>
	return node->next;
   1f736:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   1f738:	9a02      	ldr	r2, [sp, #8]
   1f73a:	2b00      	cmp	r3, #0
   1f73c:	bf38      	it	cc
   1f73e:	2300      	movcc	r3, #0
   1f740:	4699      	mov	r9, r3
   1f742:	684b      	ldr	r3, [r1, #4]
   1f744:	4620      	mov	r0, r4
   1f746:	461e      	mov	r6, r3
   1f748:	465b      	mov	r3, fp
   1f74a:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1f74c:	f1b9 0f00 	cmp.w	r9, #0
   1f750:	d0b5      	beq.n	1f6be <process_event+0x31e>
   1f752:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f756:	4649      	mov	r1, r9
   1f758:	e7ee      	b.n	1f738 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f75a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1f75c:	9a02      	ldr	r2, [sp, #8]
   1f75e:	682d      	ldr	r5, [r5, #0]
   1f760:	465b      	mov	r3, fp
   1f762:	4620      	mov	r0, r4
   1f764:	f017 fd0f 	bl	37186 <notify_one>
   1f768:	e7a9      	b.n	1f6be <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1f76a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1f76e:	bf1e      	ittt	ne
   1f770:	f023 0320 	bicne.w	r3, r3, #32
   1f774:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   1f776:	2102      	movne	r1, #2
   1f778:	e7d2      	b.n	1f720 <process_event+0x380>
   1f77a:	bf00      	nop
   1f77c:	0003cd09 	.word	0x0003cd09
   1f780:	0003cd2f 	.word	0x0003cd2f
   1f784:	0003cd46 	.word	0x0003cd46
   1f788:	0001f795 	.word	0x0001f795
   1f78c:	0003cd5b 	.word	0x0003cd5b
   1f790:	0003cd70 	.word	0x0003cd70

0001f794 <transition_complete>:
{
   1f794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f796:	4604      	mov	r4, r0
   1f798:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1f79a:	f100 0614 	add.w	r6, r0, #20
   1f79e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f7a2:	f3ef 8711 	mrs	r7, BASEPRI
   1f7a6:	f383 8812 	msr	BASEPRI_MAX, r3
   1f7aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f7ae:	4630      	mov	r0, r6
   1f7b0:	f010 f808 	bl	2f7c4 <z_spin_lock_valid>
   1f7b4:	b968      	cbnz	r0, 1f7d2 <transition_complete+0x3e>
   1f7b6:	4a0c      	ldr	r2, [pc, #48]	; (1f7e8 <transition_complete+0x54>)
   1f7b8:	490c      	ldr	r1, [pc, #48]	; (1f7ec <transition_complete+0x58>)
   1f7ba:	480d      	ldr	r0, [pc, #52]	; (1f7f0 <transition_complete+0x5c>)
   1f7bc:	2381      	movs	r3, #129	; 0x81
   1f7be:	f017 fcac 	bl	3711a <printk>
   1f7c2:	480c      	ldr	r0, [pc, #48]	; (1f7f4 <transition_complete+0x60>)
   1f7c4:	4631      	mov	r1, r6
   1f7c6:	f017 fca8 	bl	3711a <printk>
   1f7ca:	4807      	ldr	r0, [pc, #28]	; (1f7e8 <transition_complete+0x54>)
   1f7cc:	2181      	movs	r1, #129	; 0x81
   1f7ce:	f017 fe4a 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f7d2:	4630      	mov	r0, r6
   1f7d4:	f010 f814 	bl	2f800 <z_spin_lock_set_owner>
	mgr->last_res = res;
   1f7d8:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1f7da:	463a      	mov	r2, r7
   1f7dc:	4620      	mov	r0, r4
   1f7de:	2101      	movs	r1, #1
}
   1f7e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1f7e4:	f7ff bddc 	b.w	1f3a0 <process_event>
   1f7e8:	0003cd09 	.word	0x0003cd09
   1f7ec:	0003cd5b 	.word	0x0003cd5b
   1f7f0:	0003c48a 	.word	0x0003c48a
   1f7f4:	0003cd70 	.word	0x0003cd70

0001f7f8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1f7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f7fc:	4604      	mov	r4, r0
   1f7fe:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1f800:	f017 fcd7 	bl	371b2 <validate_args>

	if (rv < 0) {
   1f804:	1e05      	subs	r5, r0, #0
   1f806:	db5e      	blt.n	1f8c6 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1f808:	f104 0914 	add.w	r9, r4, #20
   1f80c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f810:	f3ef 8a11 	mrs	sl, BASEPRI
   1f814:	f383 8812 	msr	BASEPRI_MAX, r3
   1f818:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f81c:	4648      	mov	r0, r9
   1f81e:	f00f ffd1 	bl	2f7c4 <z_spin_lock_valid>
   1f822:	b968      	cbnz	r0, 1f840 <onoff_request+0x48>
   1f824:	4a38      	ldr	r2, [pc, #224]	; (1f908 <onoff_request+0x110>)
   1f826:	4939      	ldr	r1, [pc, #228]	; (1f90c <onoff_request+0x114>)
   1f828:	4839      	ldr	r0, [pc, #228]	; (1f910 <onoff_request+0x118>)
   1f82a:	2381      	movs	r3, #129	; 0x81
   1f82c:	f017 fc75 	bl	3711a <printk>
   1f830:	4838      	ldr	r0, [pc, #224]	; (1f914 <onoff_request+0x11c>)
   1f832:	4649      	mov	r1, r9
   1f834:	f017 fc71 	bl	3711a <printk>
   1f838:	4833      	ldr	r0, [pc, #204]	; (1f908 <onoff_request+0x110>)
   1f83a:	2181      	movs	r1, #129	; 0x81
   1f83c:	f017 fe13 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f840:	4648      	mov	r0, r9
   1f842:	f00f ffdd 	bl	2f800 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f846:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f848:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f84a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f84e:	428b      	cmp	r3, r1
   1f850:	f002 0607 	and.w	r6, r2, #7
   1f854:	d050      	beq.n	1f8f8 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1f856:	2e02      	cmp	r6, #2
   1f858:	d124      	bne.n	1f8a4 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1f85a:	3301      	adds	r3, #1
   1f85c:	83e3      	strh	r3, [r4, #30]
	rv = state;
   1f85e:	4635      	mov	r5, r6
		notify = true;
   1f860:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f864:	4648      	mov	r0, r9
   1f866:	f00f ffbb 	bl	2f7e0 <z_spin_unlock_valid>
   1f86a:	b968      	cbnz	r0, 1f888 <onoff_request+0x90>
   1f86c:	4a26      	ldr	r2, [pc, #152]	; (1f908 <onoff_request+0x110>)
   1f86e:	492a      	ldr	r1, [pc, #168]	; (1f918 <onoff_request+0x120>)
   1f870:	4827      	ldr	r0, [pc, #156]	; (1f910 <onoff_request+0x118>)
   1f872:	23ac      	movs	r3, #172	; 0xac
   1f874:	f017 fc51 	bl	3711a <printk>
   1f878:	4828      	ldr	r0, [pc, #160]	; (1f91c <onoff_request+0x124>)
   1f87a:	4649      	mov	r1, r9
   1f87c:	f017 fc4d 	bl	3711a <printk>
   1f880:	4821      	ldr	r0, [pc, #132]	; (1f908 <onoff_request+0x110>)
   1f882:	21ac      	movs	r1, #172	; 0xac
   1f884:	f017 fdef 	bl	37466 <assert_post_action>
	__asm__ volatile(
   1f888:	f38a 8811 	msr	BASEPRI, sl
   1f88c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1f890:	f1b8 0f00 	cmp.w	r8, #0
   1f894:	d017      	beq.n	1f8c6 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   1f896:	2300      	movs	r3, #0
   1f898:	4632      	mov	r2, r6
   1f89a:	4639      	mov	r1, r7
   1f89c:	4620      	mov	r0, r4
   1f89e:	f017 fc72 	bl	37186 <notify_one>
   1f8a2:	e010      	b.n	1f8c6 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   1f8a4:	0793      	lsls	r3, r2, #30
   1f8a6:	d001      	beq.n	1f8ac <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   1f8a8:	2e06      	cmp	r6, #6
   1f8aa:	d10f      	bne.n	1f8cc <onoff_request+0xd4>
	parent->next = child;
   1f8ac:	2300      	movs	r3, #0
   1f8ae:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   1f8b0:	6863      	ldr	r3, [r4, #4]
   1f8b2:	b9f3      	cbnz	r3, 1f8f2 <onoff_request+0xfa>
	list->head = node;
   1f8b4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   1f8b8:	4635      	mov	r5, r6
   1f8ba:	b9fe      	cbnz	r6, 1f8fc <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   1f8bc:	4652      	mov	r2, sl
   1f8be:	2102      	movs	r1, #2
   1f8c0:	4620      	mov	r0, r4
   1f8c2:	f7ff fd6d 	bl	1f3a0 <process_event>
		}
	}

	return rv;
}
   1f8c6:	4628      	mov	r0, r5
   1f8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   1f8cc:	2e05      	cmp	r6, #5
   1f8ce:	d018      	beq.n	1f902 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1f8d0:	2e01      	cmp	r6, #1
   1f8d2:	d00b      	beq.n	1f8ec <onoff_request+0xf4>
   1f8d4:	4912      	ldr	r1, [pc, #72]	; (1f920 <onoff_request+0x128>)
   1f8d6:	480e      	ldr	r0, [pc, #56]	; (1f910 <onoff_request+0x118>)
   1f8d8:	4a12      	ldr	r2, [pc, #72]	; (1f924 <onoff_request+0x12c>)
   1f8da:	f240 13c9 	movw	r3, #457	; 0x1c9
   1f8de:	f017 fc1c 	bl	3711a <printk>
   1f8e2:	4810      	ldr	r0, [pc, #64]	; (1f924 <onoff_request+0x12c>)
   1f8e4:	f240 11c9 	movw	r1, #457	; 0x1c9
   1f8e8:	f017 fdbd 	bl	37466 <assert_post_action>
		rv = -EIO;
   1f8ec:	f06f 0504 	mvn.w	r5, #4
   1f8f0:	e004      	b.n	1f8fc <onoff_request+0x104>
	parent->next = child;
   1f8f2:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1f8f4:	6067      	str	r7, [r4, #4]
}
   1f8f6:	e7df      	b.n	1f8b8 <onoff_request+0xc0>
		rv = -EAGAIN;
   1f8f8:	f06f 050a 	mvn.w	r5, #10
   1f8fc:	f04f 0800 	mov.w	r8, #0
   1f900:	e7b0      	b.n	1f864 <onoff_request+0x6c>
		rv = -ENOTSUP;
   1f902:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1f906:	e7f9      	b.n	1f8fc <onoff_request+0x104>
   1f908:	0003cd09 	.word	0x0003cd09
   1f90c:	0003cd5b 	.word	0x0003cd5b
   1f910:	0003c48a 	.word	0x0003c48a
   1f914:	0003cd70 	.word	0x0003cd70
   1f918:	0003cd2f 	.word	0x0003cd2f
   1f91c:	0003cd46 	.word	0x0003cd46
   1f920:	0003ccf3 	.word	0x0003ccf3
   1f924:	0003cc66 	.word	0x0003cc66

0001f928 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   1f928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   1f92a:	460d      	mov	r5, r1
   1f92c:	2900      	cmp	r1, #0
   1f92e:	d039      	beq.n	1f9a4 <sys_heap_free+0x7c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1f930:	6806      	ldr	r6, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f932:	1f0c      	subs	r4, r1, #4
   1f934:	1ba4      	subs	r4, r4, r6
   1f936:	08e7      	lsrs	r7, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1f938:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1f93c:	4434      	add	r4, r6
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1f93e:	78a3      	ldrb	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   1f940:	07db      	lsls	r3, r3, #31
   1f942:	d40d      	bmi.n	1f960 <sys_heap_free+0x38>
   1f944:	4a18      	ldr	r2, [pc, #96]	; (1f9a8 <sys_heap_free+0x80>)
   1f946:	4919      	ldr	r1, [pc, #100]	; (1f9ac <sys_heap_free+0x84>)
   1f948:	4819      	ldr	r0, [pc, #100]	; (1f9b0 <sys_heap_free+0x88>)
   1f94a:	23a3      	movs	r3, #163	; 0xa3
   1f94c:	f017 fbe5 	bl	3711a <printk>
   1f950:	4818      	ldr	r0, [pc, #96]	; (1f9b4 <sys_heap_free+0x8c>)
   1f952:	4629      	mov	r1, r5
   1f954:	f017 fbe1 	bl	3711a <printk>
   1f958:	4813      	ldr	r0, [pc, #76]	; (1f9a8 <sys_heap_free+0x80>)
   1f95a:	21a3      	movs	r1, #163	; 0xa3
   1f95c:	f017 fd83 	bl	37466 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   1f960:	4639      	mov	r1, r7
   1f962:	4630      	mov	r0, r6
   1f964:	f017 fc51 	bl	3720a <chunk_size>
   1f968:	4438      	add	r0, r7
		return ((uint16_t *)cmem)[f];
   1f96a:	f836 3030 	ldrh.w	r3, [r6, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1f96e:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   1f970:	4287      	cmp	r7, r0
   1f972:	d00d      	beq.n	1f990 <sys_heap_free+0x68>
   1f974:	4a0c      	ldr	r2, [pc, #48]	; (1f9a8 <sys_heap_free+0x80>)
   1f976:	4910      	ldr	r1, [pc, #64]	; (1f9b8 <sys_heap_free+0x90>)
   1f978:	480d      	ldr	r0, [pc, #52]	; (1f9b0 <sys_heap_free+0x88>)
   1f97a:	23ab      	movs	r3, #171	; 0xab
   1f97c:	f017 fbcd 	bl	3711a <printk>
   1f980:	480e      	ldr	r0, [pc, #56]	; (1f9bc <sys_heap_free+0x94>)
   1f982:	4629      	mov	r1, r5
   1f984:	f017 fbc9 	bl	3711a <printk>
   1f988:	4807      	ldr	r0, [pc, #28]	; (1f9a8 <sys_heap_free+0x80>)
   1f98a:	21ab      	movs	r1, #171	; 0xab
   1f98c:	f017 fd6b 	bl	37466 <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f990:	8863      	ldrh	r3, [r4, #2]
   1f992:	f023 0301 	bic.w	r3, r3, #1
   1f996:	8063      	strh	r3, [r4, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
   1f998:	4639      	mov	r1, r7
   1f99a:	4630      	mov	r0, r6
}
   1f99c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   1f9a0:	f017 bcf0 	b.w	37384 <free_chunk>
}
   1f9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f9a6:	bf00      	nop
   1f9a8:	0003cd88 	.word	0x0003cd88
   1f9ac:	0003cda9 	.word	0x0003cda9
   1f9b0:	0003c48a 	.word	0x0003c48a
   1f9b4:	0003cdba 	.word	0x0003cdba
   1f9b8:	0003cdf2 	.word	0x0003cdf2
   1f9bc:	0003ce18 	.word	0x0003ce18

0001f9c0 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1f9c0:	424b      	negs	r3, r1
{
   1f9c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   1f9c6:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   1f9ca:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   1f9ce:	6806      	ldr	r6, [r0, #0]
{
   1f9d0:	4614      	mov	r4, r2
	if (align != rew) {
   1f9d2:	d01f      	beq.n	1fa14 <sys_heap_aligned_alloc+0x54>
		return false;
   1f9d4:	2f04      	cmp	r7, #4
   1f9d6:	463d      	mov	r5, r7
   1f9d8:	46b9      	mov	r9, r7
   1f9da:	bf28      	it	cs
   1f9dc:	2504      	movcs	r5, #4
		align -= rew;
   1f9de:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   1f9e0:	f107 3aff 	add.w	sl, r7, #4294967295
   1f9e4:	ea1a 0f07 	tst.w	sl, r7
   1f9e8:	d00e      	beq.n	1fa08 <sys_heap_aligned_alloc+0x48>
   1f9ea:	4933      	ldr	r1, [pc, #204]	; (1fab8 <sys_heap_aligned_alloc+0xf8>)
   1f9ec:	4a33      	ldr	r2, [pc, #204]	; (1fabc <sys_heap_aligned_alloc+0xfc>)
   1f9ee:	4834      	ldr	r0, [pc, #208]	; (1fac0 <sys_heap_aligned_alloc+0x100>)
   1f9f0:	f240 1327 	movw	r3, #295	; 0x127
   1f9f4:	f017 fb91 	bl	3711a <printk>
   1f9f8:	4832      	ldr	r0, [pc, #200]	; (1fac4 <sys_heap_aligned_alloc+0x104>)
   1f9fa:	f017 fb8e 	bl	3711a <printk>
   1f9fe:	482f      	ldr	r0, [pc, #188]	; (1fabc <sys_heap_aligned_alloc+0xfc>)
   1fa00:	f240 1127 	movw	r1, #295	; 0x127
   1fa04:	f017 fd2f 	bl	37466 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   1fa08:	b97c      	cbnz	r4, 1fa2a <sys_heap_aligned_alloc+0x6a>
		return NULL;
   1fa0a:	f04f 0900 	mov.w	r9, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   1fa0e:	4648      	mov	r0, r9
   1fa10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   1fa14:	2904      	cmp	r1, #4
   1fa16:	d804      	bhi.n	1fa22 <sys_heap_aligned_alloc+0x62>
}
   1fa18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   1fa1c:	4611      	mov	r1, r2
   1fa1e:	f017 bce2 	b.w	373e6 <sys_heap_alloc>
		rew = 0;
   1fa22:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1fa26:	2504      	movs	r5, #4
   1fa28:	e7da      	b.n	1f9e0 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1fa2a:	68b3      	ldr	r3, [r6, #8]
   1fa2c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1fa30:	d9eb      	bls.n	1fa0a <sys_heap_aligned_alloc+0x4a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fa32:	f104 010b 	add.w	r1, r4, #11
   1fa36:	4439      	add	r1, r7
   1fa38:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1fa3a:	08c9      	lsrs	r1, r1, #3
   1fa3c:	4630      	mov	r0, r6
   1fa3e:	f017 fc3a 	bl	372b6 <alloc_chunk>
	if (c0 == 0) {
   1fa42:	4680      	mov	r8, r0
   1fa44:	2800      	cmp	r0, #0
   1fa46:	d0e0      	beq.n	1fa0a <sys_heap_aligned_alloc+0x4a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1fa48:	f109 0504 	add.w	r5, r9, #4
   1fa4c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1fa50:	4435      	add	r5, r6
   1fa52:	4455      	add	r5, sl
   1fa54:	427f      	negs	r7, r7
   1fa56:	402f      	ands	r7, r5
   1fa58:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fa5c:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fa5e:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fa62:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fa64:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fa66:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1fa6a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1fa6c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fa70:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1fa74:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1fa78:	d208      	bcs.n	1fa8c <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
   1fa7a:	4601      	mov	r1, r0
   1fa7c:	463a      	mov	r2, r7
   1fa7e:	4630      	mov	r0, r6
   1fa80:	f017 fc66 	bl	37350 <split_chunks>
		free_list_add(h, c0);
   1fa84:	4641      	mov	r1, r8
   1fa86:	4630      	mov	r0, r6
   1fa88:	f017 fbc4 	bl	37214 <free_list_add>
	return c + chunk_size(h, c);
   1fa8c:	4639      	mov	r1, r7
   1fa8e:	4630      	mov	r0, r6
   1fa90:	f017 fbbb 	bl	3720a <chunk_size>
   1fa94:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1fa96:	4284      	cmp	r4, r0
   1fa98:	d207      	bcs.n	1faaa <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1fa9a:	4630      	mov	r0, r6
   1fa9c:	4622      	mov	r2, r4
   1fa9e:	f017 fc57 	bl	37350 <split_chunks>
		free_list_add(h, c_end);
   1faa2:	4621      	mov	r1, r4
   1faa4:	4630      	mov	r0, r6
   1faa6:	f017 fbb5 	bl	37214 <free_list_add>
	void *cmem = &buf[c];
   1faaa:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1faae:	8873      	ldrh	r3, [r6, #2]
   1fab0:	f043 0301 	orr.w	r3, r3, #1
   1fab4:	8073      	strh	r3, [r6, #2]
   1fab6:	e7aa      	b.n	1fa0e <sys_heap_aligned_alloc+0x4e>
   1fab8:	0003ce54 	.word	0x0003ce54
   1fabc:	0003cd88 	.word	0x0003cd88
   1fac0:	0003c48a 	.word	0x0003c48a
   1fac4:	0003ce6f 	.word	0x0003ce6f

0001fac8 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1fac8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   1facc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fad0:	4606      	mov	r6, r0
   1fad2:	460d      	mov	r5, r1
   1fad4:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1fad6:	d369      	bcc.n	1fbac <sys_heap_init+0xe4>
   1fad8:	493d      	ldr	r1, [pc, #244]	; (1fbd0 <sys_heap_init+0x108>)
   1fada:	4a3e      	ldr	r2, [pc, #248]	; (1fbd4 <sys_heap_init+0x10c>)
   1fadc:	483e      	ldr	r0, [pc, #248]	; (1fbd8 <sys_heap_init+0x110>)
   1fade:	f240 13a5 	movw	r3, #421	; 0x1a5
   1fae2:	f017 fb1a 	bl	3711a <printk>
   1fae6:	483d      	ldr	r0, [pc, #244]	; (1fbdc <sys_heap_init+0x114>)
   1fae8:	f017 fb17 	bl	3711a <printk>
   1faec:	f240 11a5 	movw	r1, #421	; 0x1a5
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1faf0:	4838      	ldr	r0, [pc, #224]	; (1fbd4 <sys_heap_init+0x10c>)
   1faf2:	f017 fcb8 	bl	37466 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   1faf6:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1faf8:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fafa:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fafc:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fb00:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1fb04:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1fb06:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1fb08:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1fb0c:	d80e      	bhi.n	1fb2c <sys_heap_init+0x64>
   1fb0e:	4934      	ldr	r1, [pc, #208]	; (1fbe0 <sys_heap_init+0x118>)
   1fb10:	4a30      	ldr	r2, [pc, #192]	; (1fbd4 <sys_heap_init+0x10c>)
   1fb12:	4831      	ldr	r0, [pc, #196]	; (1fbd8 <sys_heap_init+0x110>)
   1fb14:	f240 13b5 	movw	r3, #437	; 0x1b5
   1fb18:	f017 faff 	bl	3711a <printk>
   1fb1c:	4831      	ldr	r0, [pc, #196]	; (1fbe4 <sys_heap_init+0x11c>)
   1fb1e:	f017 fafc 	bl	3711a <printk>
   1fb22:	482c      	ldr	r0, [pc, #176]	; (1fbd4 <sys_heap_init+0x10c>)
   1fb24:	f240 11b5 	movw	r1, #437	; 0x1b5
   1fb28:	f017 fc9d 	bl	37466 <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1fb2c:	fab7 f887 	clz	r8, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1fb30:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
   1fb34:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
   1fb38:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fb3a:	f108 0607 	add.w	r6, r8, #7
	h->avail_buckets = 0;
   1fb3e:	2300      	movs	r3, #0
   1fb40:	08f6      	lsrs	r6, r6, #3
   1fb42:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1fb44:	1c73      	adds	r3, r6, #1
   1fb46:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   1fb48:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1fb4a:	d90e      	bls.n	1fb6a <sys_heap_init+0xa2>
   1fb4c:	4926      	ldr	r1, [pc, #152]	; (1fbe8 <sys_heap_init+0x120>)
   1fb4e:	4a21      	ldr	r2, [pc, #132]	; (1fbd4 <sys_heap_init+0x10c>)
   1fb50:	4821      	ldr	r0, [pc, #132]	; (1fbd8 <sys_heap_init+0x110>)
   1fb52:	f240 13c5 	movw	r3, #453	; 0x1c5
   1fb56:	f017 fae0 	bl	3711a <printk>
   1fb5a:	4822      	ldr	r0, [pc, #136]	; (1fbe4 <sys_heap_init+0x11c>)
   1fb5c:	f017 fadd 	bl	3711a <printk>
   1fb60:	481c      	ldr	r0, [pc, #112]	; (1fbd4 <sys_heap_init+0x10c>)
   1fb62:	f240 11c5 	movw	r1, #453	; 0x1c5
   1fb66:	f017 fc7e 	bl	37466 <assert_post_action>
   1fb6a:	f104 0210 	add.w	r2, r4, #16
   1fb6e:	44a0      	add	r8, r4
   1fb70:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
   1fb72:	4590      	cmp	r8, r2
   1fb74:	d129      	bne.n	1fbca <sys_heap_init+0x102>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fb76:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fb78:	f042 0201 	orr.w	r2, r2, #1
   1fb7c:	8062      	strh	r2, [r4, #2]
		((uint16_t *)cmem)[f] = val;
   1fb7e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1fb82:	1bba      	subs	r2, r7, r6
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fb84:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
   1fb86:	8023      	strh	r3, [r4, #0]
   1fb88:	8048      	strh	r0, [r1, #2]
   1fb8a:	1961      	adds	r1, r4, r5
   1fb8c:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
   1fb90:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
   1fb94:	804b      	strh	r3, [r1, #2]
   1fb96:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fb98:	887b      	ldrh	r3, [r7, #2]
   1fb9a:	f043 0301 	orr.w	r3, r3, #1
   1fb9e:	807b      	strh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1fba0:	4631      	mov	r1, r6
   1fba2:	4620      	mov	r0, r4
}
   1fba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   1fba8:	f017 bb34 	b.w	37214 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1fbac:	2a04      	cmp	r2, #4
   1fbae:	d8a2      	bhi.n	1faf6 <sys_heap_init+0x2e>
   1fbb0:	490e      	ldr	r1, [pc, #56]	; (1fbec <sys_heap_init+0x124>)
   1fbb2:	4a08      	ldr	r2, [pc, #32]	; (1fbd4 <sys_heap_init+0x10c>)
   1fbb4:	4808      	ldr	r0, [pc, #32]	; (1fbd8 <sys_heap_init+0x110>)
   1fbb6:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1fbba:	f017 faae 	bl	3711a <printk>
   1fbbe:	4809      	ldr	r0, [pc, #36]	; (1fbe4 <sys_heap_init+0x11c>)
   1fbc0:	f017 faab 	bl	3711a <printk>
   1fbc4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   1fbc8:	e792      	b.n	1faf0 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
   1fbca:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1fbce:	e7d0      	b.n	1fb72 <sys_heap_init+0xaa>
   1fbd0:	0003ce8c 	.word	0x0003ce8c
   1fbd4:	0003cd88 	.word	0x0003cd88
   1fbd8:	0003c48a 	.word	0x0003c48a
   1fbdc:	0003cea2 	.word	0x0003cea2
   1fbe0:	0003cef3 	.word	0x0003cef3
   1fbe4:	0003ceda 	.word	0x0003ceda
   1fbe8:	0003cf1c 	.word	0x0003cf1c
   1fbec:	0003ceb9 	.word	0x0003ceb9

0001fbf0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   1fbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   1fbf2:	4e09      	ldr	r6, [pc, #36]	; (1fc18 <extract_decimal+0x28>)
   1fbf4:	6801      	ldr	r1, [r0, #0]
{
   1fbf6:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
   1fbf8:	270a      	movs	r7, #10
	size_t val = 0;
   1fbfa:	2000      	movs	r0, #0
   1fbfc:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
   1fbfe:	3101      	adds	r1, #1
   1fc00:	7823      	ldrb	r3, [r4, #0]
   1fc02:	5d9d      	ldrb	r5, [r3, r6]
   1fc04:	076d      	lsls	r5, r5, #29
   1fc06:	d401      	bmi.n	1fc0c <extract_decimal+0x1c>
	}
	*str = sp;
   1fc08:	6014      	str	r4, [r2, #0]
	return val;
}
   1fc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   1fc0c:	fb07 3300 	mla	r3, r7, r0, r3
   1fc10:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1fc14:	e7f2      	b.n	1fbfc <extract_decimal+0xc>
   1fc16:	bf00      	nop
   1fc18:	00041afc 	.word	0x00041afc

0001fc1c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   1fc1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc20:	4614      	mov	r4, r2
   1fc22:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1fc24:	78d3      	ldrb	r3, [r2, #3]
   1fc26:	4a24      	ldr	r2, [pc, #144]	; (1fcb8 <encode_uint+0x9c>)
   1fc28:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
   1fc2c:	2b6f      	cmp	r3, #111	; 0x6f
   1fc2e:	f00a 0203 	and.w	r2, sl, #3
{
   1fc32:	4606      	mov	r6, r0
   1fc34:	460f      	mov	r7, r1
   1fc36:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1fc38:	d02d      	beq.n	1fc96 <encode_uint+0x7a>
   1fc3a:	d828      	bhi.n	1fc8e <encode_uint+0x72>
		return 16;
   1fc3c:	2b58      	cmp	r3, #88	; 0x58
   1fc3e:	bf14      	ite	ne
   1fc40:	250a      	movne	r5, #10
   1fc42:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   1fc44:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   1fc48:	46aa      	mov	sl, r5
   1fc4a:	f04f 0b00 	mov.w	fp, #0
   1fc4e:	4652      	mov	r2, sl
   1fc50:	465b      	mov	r3, fp
   1fc52:	4630      	mov	r0, r6
   1fc54:	4639      	mov	r1, r7
   1fc56:	f7ec ff71 	bl	cb3c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fc5a:	2a09      	cmp	r2, #9
   1fc5c:	b2d3      	uxtb	r3, r2
   1fc5e:	d81f      	bhi.n	1fca0 <encode_uint+0x84>
   1fc60:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   1fc62:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fc64:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1fc66:	bf08      	it	eq
   1fc68:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fc6a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1fc6e:	d301      	bcc.n	1fc74 <encode_uint+0x58>
   1fc70:	45c8      	cmp	r8, r9
   1fc72:	d812      	bhi.n	1fc9a <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   1fc74:	7823      	ldrb	r3, [r4, #0]
   1fc76:	069b      	lsls	r3, r3, #26
   1fc78:	d505      	bpl.n	1fc86 <encode_uint+0x6a>
		if (radix == 8) {
   1fc7a:	2d08      	cmp	r5, #8
   1fc7c:	d116      	bne.n	1fcac <encode_uint+0x90>
			conv->altform_0 = true;
   1fc7e:	78a3      	ldrb	r3, [r4, #2]
   1fc80:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   1fc84:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   1fc86:	4640      	mov	r0, r8
   1fc88:	b003      	add	sp, #12
   1fc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1fc8e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1fc92:	2b70      	cmp	r3, #112	; 0x70
   1fc94:	e7d3      	b.n	1fc3e <encode_uint+0x22>
	switch (specifier) {
   1fc96:	2508      	movs	r5, #8
   1fc98:	e7d4      	b.n	1fc44 <encode_uint+0x28>
		value /= radix;
   1fc9a:	4606      	mov	r6, r0
   1fc9c:	460f      	mov	r7, r1
   1fc9e:	e7d6      	b.n	1fc4e <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fca0:	9a01      	ldr	r2, [sp, #4]
   1fca2:	2a01      	cmp	r2, #1
   1fca4:	bf0c      	ite	eq
   1fca6:	3337      	addeq	r3, #55	; 0x37
   1fca8:	3357      	addne	r3, #87	; 0x57
   1fcaa:	e7da      	b.n	1fc62 <encode_uint+0x46>
		} else if (radix == 16) {
   1fcac:	2d10      	cmp	r5, #16
   1fcae:	d1ea      	bne.n	1fc86 <encode_uint+0x6a>
			conv->altform_0c = true;
   1fcb0:	78a3      	ldrb	r3, [r4, #2]
   1fcb2:	f043 0310 	orr.w	r3, r3, #16
   1fcb6:	e7e5      	b.n	1fc84 <encode_uint+0x68>
   1fcb8:	00041afc 	.word	0x00041afc

0001fcbc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1fcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcc0:	4682      	mov	sl, r0
   1fcc2:	b093      	sub	sp, #76	; 0x4c
   1fcc4:	468b      	mov	fp, r1
   1fcc6:	4691      	mov	r9, r2
   1fcc8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1fcca:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1fccc:	f899 0000 	ldrb.w	r0, [r9]
   1fcd0:	b908      	cbnz	r0, 1fcd6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1fcd2:	4628      	mov	r0, r5
   1fcd4:	e33a      	b.n	2034c <cbvprintf+0x690>
		if (*fp != '%') {
   1fcd6:	f109 0301 	add.w	r3, r9, #1
   1fcda:	2825      	cmp	r0, #37	; 0x25
   1fcdc:	9302      	str	r3, [sp, #8]
   1fcde:	d006      	beq.n	1fcee <cbvprintf+0x32>
			OUTC('%');
   1fce0:	4659      	mov	r1, fp
   1fce2:	47d0      	blx	sl
   1fce4:	2800      	cmp	r0, #0
   1fce6:	f2c0 8331 	blt.w	2034c <cbvprintf+0x690>
   1fcea:	3501      	adds	r5, #1
			break;
   1fcec:	e1f1      	b.n	200d2 <cbvprintf+0x416>
		} state = {
   1fcee:	2218      	movs	r2, #24
   1fcf0:	2100      	movs	r1, #0
   1fcf2:	a80c      	add	r0, sp, #48	; 0x30
   1fcf4:	f01a fc40 	bl	3a578 <memset>
	if (*sp == '%') {
   1fcf8:	f899 3001 	ldrb.w	r3, [r9, #1]
   1fcfc:	2b25      	cmp	r3, #37	; 0x25
   1fcfe:	d059      	beq.n	1fdb4 <cbvprintf+0xf8>
   1fd00:	9a02      	ldr	r2, [sp, #8]
   1fd02:	4616      	mov	r6, r2
		switch (*sp) {
   1fd04:	f812 3b01 	ldrb.w	r3, [r2], #1
   1fd08:	2b2b      	cmp	r3, #43	; 0x2b
   1fd0a:	f000 808b 	beq.w	1fe24 <cbvprintf+0x168>
   1fd0e:	d879      	bhi.n	1fe04 <cbvprintf+0x148>
   1fd10:	2b20      	cmp	r3, #32
   1fd12:	f000 808c 	beq.w	1fe2e <cbvprintf+0x172>
   1fd16:	2b23      	cmp	r3, #35	; 0x23
   1fd18:	f000 808e 	beq.w	1fe38 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
   1fd1c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1fd20:	f003 0244 	and.w	r2, r3, #68	; 0x44
   1fd24:	2a44      	cmp	r2, #68	; 0x44
   1fd26:	d103      	bne.n	1fd30 <cbvprintf+0x74>
		conv->flag_zero = false;
   1fd28:	f36f 1386 	bfc	r3, #6, #1
   1fd2c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   1fd30:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1fd34:	9605      	str	r6, [sp, #20]
   1fd36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1fd3a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   1fd3e:	7833      	ldrb	r3, [r6, #0]
   1fd40:	2b2a      	cmp	r3, #42	; 0x2a
   1fd42:	d17e      	bne.n	1fe42 <cbvprintf+0x186>
		conv->width_star = true;
   1fd44:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1fd48:	f043 0301 	orr.w	r3, r3, #1
   1fd4c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   1fd50:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   1fd52:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   1fd54:	781a      	ldrb	r2, [r3, #0]
   1fd56:	2a2e      	cmp	r2, #46	; 0x2e
   1fd58:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1fd5c:	bf0c      	ite	eq
   1fd5e:	2101      	moveq	r1, #1
   1fd60:	2100      	movne	r1, #0
   1fd62:	f361 0241 	bfi	r2, r1, #1, #1
   1fd66:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   1fd6a:	d10b      	bne.n	1fd84 <cbvprintf+0xc8>
	++sp;
   1fd6c:	1c5a      	adds	r2, r3, #1
   1fd6e:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   1fd70:	785a      	ldrb	r2, [r3, #1]
   1fd72:	2a2a      	cmp	r2, #42	; 0x2a
   1fd74:	d17b      	bne.n	1fe6e <cbvprintf+0x1b2>
		conv->prec_star = true;
   1fd76:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1fd7a:	f042 0204 	orr.w	r2, r2, #4
   1fd7e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   1fd82:	3302      	adds	r3, #2
	switch (*sp) {
   1fd84:	4619      	mov	r1, r3
   1fd86:	f811 0b01 	ldrb.w	r0, [r1], #1
   1fd8a:	286c      	cmp	r0, #108	; 0x6c
   1fd8c:	f000 80b6 	beq.w	1fefc <cbvprintf+0x240>
   1fd90:	d87d      	bhi.n	1fe8e <cbvprintf+0x1d2>
   1fd92:	2868      	cmp	r0, #104	; 0x68
   1fd94:	f000 8084 	beq.w	1fea0 <cbvprintf+0x1e4>
   1fd98:	286a      	cmp	r0, #106	; 0x6a
   1fd9a:	f000 80b9 	beq.w	1ff10 <cbvprintf+0x254>
   1fd9e:	284c      	cmp	r0, #76	; 0x4c
   1fda0:	f000 80bd 	beq.w	1ff1e <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
   1fda4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1fda8:	f36f 02c6 	bfc	r2, #3, #4
   1fdac:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   1fdb0:	4619      	mov	r1, r3
   1fdb2:	e080      	b.n	1feb6 <cbvprintf+0x1fa>
		conv->specifier = *sp++;
   1fdb4:	f109 0202 	add.w	r2, r9, #2
   1fdb8:	9202      	str	r2, [sp, #8]
   1fdba:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   1fdbe:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1fdc2:	07d9      	lsls	r1, r3, #31
   1fdc4:	f140 8149 	bpl.w	2005a <cbvprintf+0x39e>
			width = va_arg(ap, int);
   1fdc8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   1fdcc:	f1b8 0f00 	cmp.w	r8, #0
   1fdd0:	da07      	bge.n	1fde2 <cbvprintf+0x126>
				conv->flag_dash = true;
   1fdd2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1fdd6:	f042 0204 	orr.w	r2, r2, #4
   1fdda:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   1fdde:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   1fde2:	075a      	lsls	r2, r3, #29
   1fde4:	f140 8142 	bpl.w	2006c <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
   1fde8:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   1fdec:	2f00      	cmp	r7, #0
   1fdee:	f280 8141 	bge.w	20074 <cbvprintf+0x3b8>
				conv->prec_present = false;
   1fdf2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1fdf6:	f36f 0341 	bfc	r3, #1, #1
   1fdfa:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   1fdfe:	f04f 37ff 	mov.w	r7, #4294967295
   1fe02:	e137      	b.n	20074 <cbvprintf+0x3b8>
		switch (*sp) {
   1fe04:	2b2d      	cmp	r3, #45	; 0x2d
   1fe06:	d006      	beq.n	1fe16 <cbvprintf+0x15a>
   1fe08:	2b30      	cmp	r3, #48	; 0x30
   1fe0a:	d187      	bne.n	1fd1c <cbvprintf+0x60>
			conv->flag_zero = true;
   1fe0c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1fe10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1fe14:	e003      	b.n	1fe1e <cbvprintf+0x162>
			conv->flag_dash = true;
   1fe16:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1fe1a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   1fe1e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   1fe22:	e76e      	b.n	1fd02 <cbvprintf+0x46>
			conv->flag_plus = true;
   1fe24:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1fe28:	f043 0308 	orr.w	r3, r3, #8
   1fe2c:	e7f7      	b.n	1fe1e <cbvprintf+0x162>
			conv->flag_space = true;
   1fe2e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1fe32:	f043 0310 	orr.w	r3, r3, #16
   1fe36:	e7f2      	b.n	1fe1e <cbvprintf+0x162>
			conv->flag_hash = true;
   1fe38:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1fe3c:	f043 0320 	orr.w	r3, r3, #32
   1fe40:	e7ed      	b.n	1fe1e <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
   1fe42:	a805      	add	r0, sp, #20
   1fe44:	f7ff fed4 	bl	1fbf0 <extract_decimal>
	if (sp != wp) {
   1fe48:	9b05      	ldr	r3, [sp, #20]
   1fe4a:	42b3      	cmp	r3, r6
   1fe4c:	d081      	beq.n	1fd52 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
   1fe4e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   1fe52:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   1fe54:	f3c1 0240 	ubfx	r2, r1, #1, #1
   1fe58:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   1fe5c:	0052      	lsls	r2, r2, #1
   1fe5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1fe62:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   1fe66:	430a      	orrs	r2, r1
   1fe68:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   1fe6c:	e771      	b.n	1fd52 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
   1fe6e:	a805      	add	r0, sp, #20
   1fe70:	f7ff febe 	bl	1fbf0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1fe74:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   1fe78:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   1fe7a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1fe7e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   1fe82:	f360 0341 	bfi	r3, r0, #1, #1
   1fe86:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   1fe8a:	9b05      	ldr	r3, [sp, #20]
   1fe8c:	e77a      	b.n	1fd84 <cbvprintf+0xc8>
	switch (*sp) {
   1fe8e:	2874      	cmp	r0, #116	; 0x74
   1fe90:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1fe94:	d040      	beq.n	1ff18 <cbvprintf+0x25c>
   1fe96:	287a      	cmp	r0, #122	; 0x7a
   1fe98:	d184      	bne.n	1fda4 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
   1fe9a:	4613      	mov	r3, r2
   1fe9c:	2206      	movs	r2, #6
   1fe9e:	e028      	b.n	1fef2 <cbvprintf+0x236>
		if (*++sp == 'h') {
   1fea0:	785a      	ldrb	r2, [r3, #1]
   1fea2:	2a68      	cmp	r2, #104	; 0x68
   1fea4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1fea8:	d121      	bne.n	1feee <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
   1feaa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1feac:	f361 02c6 	bfi	r2, r1, #3, #4
   1feb0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   1feb4:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1feb6:	460b      	mov	r3, r1
   1feb8:	f813 2b01 	ldrb.w	r2, [r3], #1
   1febc:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   1febe:	2a78      	cmp	r2, #120	; 0x78
   1fec0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
   1fec4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   1fec8:	f200 80bf 	bhi.w	2004a <cbvprintf+0x38e>
   1fecc:	2a57      	cmp	r2, #87	; 0x57
   1fece:	d833      	bhi.n	1ff38 <cbvprintf+0x27c>
   1fed0:	2a41      	cmp	r2, #65	; 0x41
   1fed2:	d003      	beq.n	1fedc <cbvprintf+0x220>
   1fed4:	3a45      	subs	r2, #69	; 0x45
   1fed6:	2a02      	cmp	r2, #2
   1fed8:	f200 80b7 	bhi.w	2004a <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
   1fedc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1fee0:	2204      	movs	r2, #4
   1fee2:	f362 0302 	bfi	r3, r2, #0, #3
   1fee6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   1feea:	2301      	movs	r3, #1
			break;
   1feec:	e084      	b.n	1fff8 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
   1feee:	4613      	mov	r3, r2
   1fef0:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1fef2:	f362 03c6 	bfi	r3, r2, #3, #4
   1fef6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1fefa:	e7dc      	b.n	1feb6 <cbvprintf+0x1fa>
		if (*++sp == 'l') {
   1fefc:	785a      	ldrb	r2, [r3, #1]
   1fefe:	2a6c      	cmp	r2, #108	; 0x6c
   1ff00:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1ff04:	d101      	bne.n	1ff0a <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
   1ff06:	2104      	movs	r1, #4
   1ff08:	e7d0      	b.n	1feac <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
   1ff0a:	4613      	mov	r3, r2
   1ff0c:	2203      	movs	r2, #3
   1ff0e:	e7f0      	b.n	1fef2 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
   1ff10:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1ff14:	2205      	movs	r2, #5
   1ff16:	e7ec      	b.n	1fef2 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
   1ff18:	4613      	mov	r3, r2
   1ff1a:	2207      	movs	r2, #7
   1ff1c:	e7e9      	b.n	1fef2 <cbvprintf+0x236>
		conv->unsupported = true;
   1ff1e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1ff22:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1ff26:	f023 0302 	bic.w	r3, r3, #2
   1ff2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1ff2e:	f043 0302 	orr.w	r3, r3, #2
   1ff32:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   1ff36:	e7be      	b.n	1feb6 <cbvprintf+0x1fa>
   1ff38:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   1ff3c:	2920      	cmp	r1, #32
   1ff3e:	f200 8084 	bhi.w	2004a <cbvprintf+0x38e>
   1ff42:	a001      	add	r0, pc, #4	; (adr r0, 1ff48 <cbvprintf+0x28c>)
   1ff44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1ff48:	0002000d 	.word	0x0002000d
   1ff4c:	0002004b 	.word	0x0002004b
   1ff50:	0002004b 	.word	0x0002004b
   1ff54:	0002004b 	.word	0x0002004b
   1ff58:	0002004b 	.word	0x0002004b
   1ff5c:	0002004b 	.word	0x0002004b
   1ff60:	0002004b 	.word	0x0002004b
   1ff64:	0002004b 	.word	0x0002004b
   1ff68:	0002004b 	.word	0x0002004b
   1ff6c:	0001fedd 	.word	0x0001fedd
   1ff70:	0002004b 	.word	0x0002004b
   1ff74:	0002000d 	.word	0x0002000d
   1ff78:	0001ffcd 	.word	0x0001ffcd
   1ff7c:	0001fedd 	.word	0x0001fedd
   1ff80:	0001fedd 	.word	0x0001fedd
   1ff84:	0001fedd 	.word	0x0001fedd
   1ff88:	0002004b 	.word	0x0002004b
   1ff8c:	0001ffcd 	.word	0x0001ffcd
   1ff90:	0002004b 	.word	0x0002004b
   1ff94:	0002004b 	.word	0x0002004b
   1ff98:	0002004b 	.word	0x0002004b
   1ff9c:	0002004b 	.word	0x0002004b
   1ffa0:	00020015 	.word	0x00020015
   1ffa4:	0002000d 	.word	0x0002000d
   1ffa8:	00020031 	.word	0x00020031
   1ffac:	0002004b 	.word	0x0002004b
   1ffb0:	0002004b 	.word	0x0002004b
   1ffb4:	00020031 	.word	0x00020031
   1ffb8:	0002004b 	.word	0x0002004b
   1ffbc:	0002000d 	.word	0x0002000d
   1ffc0:	0002004b 	.word	0x0002004b
   1ffc4:	0002004b 	.word	0x0002004b
   1ffc8:	0002000d 	.word	0x0002000d
		conv->specifier_cat = SPECIFIER_SINT;
   1ffcc:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   1ffd0:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1ffd2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1ffd6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1ffda:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1ffdc:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   1ffe0:	bf02      	ittt	eq
   1ffe2:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   1ffe6:	f041 0101 	orreq.w	r1, r1, #1
   1ffea:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   1ffee:	2a63      	cmp	r2, #99	; 0x63
   1fff0:	d131      	bne.n	20056 <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1fff2:	3b00      	subs	r3, #0
   1fff4:	bf18      	it	ne
   1fff6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1fff8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1fffc:	f3c2 0140 	ubfx	r1, r2, #1, #1
   20000:	430b      	orrs	r3, r1
   20002:	f363 0241 	bfi	r2, r3, #1, #1
   20006:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   2000a:	e6d8      	b.n	1fdbe <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
   2000c:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   20010:	2002      	movs	r0, #2
   20012:	e7de      	b.n	1ffd2 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
   20014:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   20018:	f003 0378 	and.w	r3, r3, #120	; 0x78
   2001c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   20020:	2103      	movs	r1, #3
   20022:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   20026:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   20028:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   2002c:	4143      	adcs	r3, r0
   2002e:	e7e3      	b.n	1fff8 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
   20030:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   20034:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   20036:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   2003a:	f361 0202 	bfi	r2, r1, #0, #3
   2003e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   20042:	bf14      	ite	ne
   20044:	2301      	movne	r3, #1
   20046:	2300      	moveq	r3, #0
   20048:	e7d6      	b.n	1fff8 <cbvprintf+0x33c>
		conv->invalid = true;
   2004a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   2004e:	f043 0301 	orr.w	r3, r3, #1
   20052:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   20056:	2300      	movs	r3, #0
   20058:	e7ce      	b.n	1fff8 <cbvprintf+0x33c>
		} else if (conv->width_present) {
   2005a:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   2005e:	2a00      	cmp	r2, #0
			width = conv->width_value;
   20060:	bfb4      	ite	lt
   20062:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
   20066:	f04f 38ff 	movge.w	r8, #4294967295
   2006a:	e6ba      	b.n	1fde2 <cbvprintf+0x126>
		} else if (conv->prec_present) {
   2006c:	079f      	lsls	r7, r3, #30
   2006e:	f57f aec6 	bpl.w	1fdfe <cbvprintf+0x142>
			precision = conv->prec_value;
   20072:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
   20074:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
   20078:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   2007a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   2007e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
   20082:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   20086:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   20088:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   2008c:	d137      	bne.n	200fe <cbvprintf+0x442>
			switch (length_mod) {
   2008e:	1ecb      	subs	r3, r1, #3
   20090:	2b04      	cmp	r3, #4
   20092:	d821      	bhi.n	200d8 <cbvprintf+0x41c>
   20094:	e8df f003 	tbb	[pc, r3]
   20098:	20070703 	.word	0x20070703
   2009c:	20          	.byte	0x20
   2009d:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   2009e:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   200a2:	17d3      	asrs	r3, r2, #31
   200a4:	e004      	b.n	200b0 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
   200a6:	3407      	adds	r4, #7
   200a8:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   200ac:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   200b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   200b4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   200b8:	f013 0603 	ands.w	r6, r3, #3
   200bc:	d055      	beq.n	2016a <cbvprintf+0x4ae>
			OUTS(sp, fp);
   200be:	9b02      	ldr	r3, [sp, #8]
   200c0:	464a      	mov	r2, r9
   200c2:	4659      	mov	r1, fp
   200c4:	4650      	mov	r0, sl
   200c6:	f017 f9b8 	bl	3743a <outs>
   200ca:	2800      	cmp	r0, #0
   200cc:	f2c0 813e 	blt.w	2034c <cbvprintf+0x690>
   200d0:	4405      	add	r5, r0
			OUTS(bps, bpe);
   200d2:	f8dd 9008 	ldr.w	r9, [sp, #8]
   200d6:	e5f9      	b.n	1fccc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   200d8:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   200dc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   200de:	ea4f 73e2 	mov.w	r3, r2, asr #31
   200e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   200e6:	d105      	bne.n	200f4 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
   200e8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   200ec:	930c      	str	r3, [sp, #48]	; 0x30
   200ee:	2300      	movs	r3, #0
   200f0:	930d      	str	r3, [sp, #52]	; 0x34
   200f2:	e7df      	b.n	200b4 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
   200f4:	2902      	cmp	r1, #2
   200f6:	d1dd      	bne.n	200b4 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
   200f8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   200fc:	e7d1      	b.n	200a2 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   200fe:	2b02      	cmp	r3, #2
   20100:	d123      	bne.n	2014a <cbvprintf+0x48e>
			switch (length_mod) {
   20102:	1ecb      	subs	r3, r1, #3
   20104:	2b04      	cmp	r3, #4
   20106:	d813      	bhi.n	20130 <cbvprintf+0x474>
   20108:	e8df f003 	tbb	[pc, r3]
   2010c:	120a0a03 	.word	0x120a0a03
   20110:	12          	.byte	0x12
   20111:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   20112:	6822      	ldr	r2, [r4, #0]
   20114:	920c      	str	r2, [sp, #48]	; 0x30
   20116:	2300      	movs	r3, #0
   20118:	1d20      	adds	r0, r4, #4
   2011a:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   2011c:	4604      	mov	r4, r0
   2011e:	e7c9      	b.n	200b4 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
   20120:	3407      	adds	r4, #7
   20122:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   20126:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   2012a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   2012e:	e7f5      	b.n	2011c <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
   20130:	f854 3b04 	ldr.w	r3, [r4], #4
   20134:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   20136:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   20138:	f04f 0300 	mov.w	r3, #0
   2013c:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   2013e:	d0d3      	beq.n	200e8 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
   20140:	2902      	cmp	r1, #2
   20142:	d1b7      	bne.n	200b4 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
   20144:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   20148:	e7d0      	b.n	200ec <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   2014a:	2b04      	cmp	r3, #4
   2014c:	d107      	bne.n	2015e <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
   2014e:	3407      	adds	r4, #7
   20150:	f024 0407 	bic.w	r4, r4, #7
   20154:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   20158:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   2015c:	e7aa      	b.n	200b4 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   2015e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   20160:	bf04      	itt	eq
   20162:	f854 3b04 	ldreq.w	r3, [r4], #4
   20166:	930c      	streq	r3, [sp, #48]	; 0x30
   20168:	e7a4      	b.n	200b4 <cbvprintf+0x3f8>
		switch (conv->specifier) {
   2016a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   2016e:	2878      	cmp	r0, #120	; 0x78
   20170:	d8af      	bhi.n	200d2 <cbvprintf+0x416>
   20172:	2862      	cmp	r0, #98	; 0x62
   20174:	d820      	bhi.n	201b8 <cbvprintf+0x4fc>
   20176:	2825      	cmp	r0, #37	; 0x25
   20178:	f43f adb2 	beq.w	1fce0 <cbvprintf+0x24>
   2017c:	2858      	cmp	r0, #88	; 0x58
   2017e:	d1a8      	bne.n	200d2 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
   20180:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   20184:	9300      	str	r3, [sp, #0]
   20186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   2018a:	ab06      	add	r3, sp, #24
   2018c:	aa0e      	add	r2, sp, #56	; 0x38
   2018e:	f7ff fd45 	bl	1fc1c <encode_uint>
   20192:	4681      	mov	r9, r0
			if (precision >= 0) {
   20194:	2f00      	cmp	r7, #0
   20196:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   2019a:	db0b      	blt.n	201b4 <cbvprintf+0x4f8>
				conv->flag_zero = false;
   2019c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   201a0:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   201a4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   201a8:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   201aa:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   201ae:	d901      	bls.n	201b4 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   201b0:	1aff      	subs	r7, r7, r3
   201b2:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   201b4:	4607      	mov	r7, r0
   201b6:	e03c      	b.n	20232 <cbvprintf+0x576>
   201b8:	3863      	subs	r0, #99	; 0x63
   201ba:	2815      	cmp	r0, #21
   201bc:	d889      	bhi.n	200d2 <cbvprintf+0x416>
   201be:	a201      	add	r2, pc, #4	; (adr r2, 201c4 <cbvprintf+0x508>)
   201c0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   201c4:	00020243 	.word	0x00020243
   201c8:	000202a5 	.word	0x000202a5
   201cc:	000200d3 	.word	0x000200d3
   201d0:	000200d3 	.word	0x000200d3
   201d4:	000200d3 	.word	0x000200d3
   201d8:	000200d3 	.word	0x000200d3
   201dc:	000202a5 	.word	0x000202a5
   201e0:	000200d3 	.word	0x000200d3
   201e4:	000200d3 	.word	0x000200d3
   201e8:	000200d3 	.word	0x000200d3
   201ec:	000200d3 	.word	0x000200d3
   201f0:	00020303 	.word	0x00020303
   201f4:	000202d1 	.word	0x000202d1
   201f8:	000202d5 	.word	0x000202d5
   201fc:	000200d3 	.word	0x000200d3
   20200:	000200d3 	.word	0x000200d3
   20204:	0002021d 	.word	0x0002021d
   20208:	000200d3 	.word	0x000200d3
   2020c:	000202d1 	.word	0x000202d1
   20210:	000200d3 	.word	0x000200d3
   20214:	000200d3 	.word	0x000200d3
   20218:	000202d1 	.word	0x000202d1
			if (precision >= 0) {
   2021c:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   2021e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   20222:	db0a      	blt.n	2023a <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   20224:	4639      	mov	r1, r7
   20226:	4648      	mov	r0, r9
   20228:	f01a fb03 	bl	3a832 <strnlen>
			bpe = bps + len;
   2022c:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   20230:	2600      	movs	r6, #0
		if (bps == NULL) {
   20232:	f1b9 0f00 	cmp.w	r9, #0
   20236:	d10c      	bne.n	20252 <cbvprintf+0x596>
   20238:	e74b      	b.n	200d2 <cbvprintf+0x416>
				len = strlen(bps);
   2023a:	4648      	mov	r0, r9
   2023c:	f7f8 f8b4 	bl	183a8 <strlen>
   20240:	e7f4      	b.n	2022c <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   20242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20244:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   20248:	2600      	movs	r6, #0
			bpe = buf + 1;
   2024a:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   2024e:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   20252:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   20256:	b106      	cbz	r6, 2025a <cbvprintf+0x59e>
			nj_len += 1U;
   20258:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   2025a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   2025e:	06d0      	lsls	r0, r2, #27
   20260:	d569      	bpl.n	20336 <cbvprintf+0x67a>
			nj_len += 2U;
   20262:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   20264:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   20266:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   20268:	bf48      	it	mi
   2026a:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   2026c:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   2026e:	bf48      	it	mi
   20270:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   20272:	f1b8 0f00 	cmp.w	r8, #0
   20276:	dd76      	ble.n	20366 <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   20278:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   2027c:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   20280:	f3c2 0380 	ubfx	r3, r2, #2, #1
   20284:	9303      	str	r3, [sp, #12]
   20286:	0753      	lsls	r3, r2, #29
   20288:	d46d      	bmi.n	20366 <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   2028a:	0650      	lsls	r0, r2, #25
   2028c:	d561      	bpl.n	20352 <cbvprintf+0x696>
					if (sign != 0) {
   2028e:	b13e      	cbz	r6, 202a0 <cbvprintf+0x5e4>
						OUTC(sign);
   20290:	4659      	mov	r1, fp
   20292:	4630      	mov	r0, r6
   20294:	47d0      	blx	sl
   20296:	2800      	cmp	r0, #0
   20298:	db58      	blt.n	2034c <cbvprintf+0x690>
						sign = 0;
   2029a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   2029c:	3501      	adds	r5, #1
						sign = 0;
   2029e:	461e      	mov	r6, r3
					pad = '0';
   202a0:	2330      	movs	r3, #48	; 0x30
   202a2:	e057      	b.n	20354 <cbvprintf+0x698>
			if (conv->flag_plus) {
   202a4:	071e      	lsls	r6, r3, #28
   202a6:	d411      	bmi.n	202cc <cbvprintf+0x610>
				sign = ' ';
   202a8:	f013 0610 	ands.w	r6, r3, #16
   202ac:	bf18      	it	ne
   202ae:	2620      	movne	r6, #32
			sint = value->sint;
   202b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   202b4:	2a00      	cmp	r2, #0
   202b6:	f173 0100 	sbcs.w	r1, r3, #0
   202ba:	f6bf af61 	bge.w	20180 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   202be:	4252      	negs	r2, r2
   202c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   202c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   202c8:	262d      	movs	r6, #45	; 0x2d
   202ca:	e759      	b.n	20180 <cbvprintf+0x4c4>
				sign = '+';
   202cc:	262b      	movs	r6, #43	; 0x2b
   202ce:	e7ef      	b.n	202b0 <cbvprintf+0x5f4>
		switch (conv->specifier) {
   202d0:	2600      	movs	r6, #0
   202d2:	e755      	b.n	20180 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   202d4:	980c      	ldr	r0, [sp, #48]	; 0x30
   202d6:	b348      	cbz	r0, 2032c <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   202d8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   202dc:	9300      	str	r3, [sp, #0]
   202de:	aa0e      	add	r2, sp, #56	; 0x38
   202e0:	ab06      	add	r3, sp, #24
   202e2:	2100      	movs	r1, #0
   202e4:	f7ff fc9a 	bl	1fc1c <encode_uint>
				conv->altform_0c = true;
   202e8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   202ec:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   202f0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   202f4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   202f8:	4681      	mov	r9, r0
				conv->altform_0c = true;
   202fa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   202fe:	2600      	movs	r6, #0
				goto prec_int_pad0;
   20300:	e748      	b.n	20194 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   20302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   20304:	2907      	cmp	r1, #7
   20306:	f63f aee4 	bhi.w	200d2 <cbvprintf+0x416>
   2030a:	e8df f001 	tbb	[pc, r1]
   2030e:	040d      	.short	0x040d
   20310:	08080d06 	.word	0x08080d06
   20314:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   20316:	701d      	strb	r5, [r3, #0]
		break;
   20318:	e6db      	b.n	200d2 <cbvprintf+0x416>
		*(short *)dp = (short)count;
   2031a:	801d      	strh	r5, [r3, #0]
		break;
   2031c:	e6d9      	b.n	200d2 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   2031e:	4628      	mov	r0, r5
   20320:	17e9      	asrs	r1, r5, #31
   20322:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   20326:	e6d4      	b.n	200d2 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   20328:	601d      	str	r5, [r3, #0]
		break;
   2032a:	e6d2      	b.n	200d2 <cbvprintf+0x416>
			bpe = bps + 5;
   2032c:	4f2e      	ldr	r7, [pc, #184]	; (203e8 <cbvprintf+0x72c>)
   2032e:	4606      	mov	r6, r0
			bps = "(nil)";
   20330:	f1a7 0905 	sub.w	r9, r7, #5
   20334:	e78d      	b.n	20252 <cbvprintf+0x596>
		} else if (conv->altform_0) {
   20336:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   20338:	bf48      	it	mi
   2033a:	3301      	addmi	r3, #1
   2033c:	e792      	b.n	20264 <cbvprintf+0x5a8>
					OUTC(pad);
   2033e:	4618      	mov	r0, r3
   20340:	4659      	mov	r1, fp
   20342:	9303      	str	r3, [sp, #12]
   20344:	47d0      	blx	sl
   20346:	2800      	cmp	r0, #0
   20348:	9b03      	ldr	r3, [sp, #12]
   2034a:	da04      	bge.n	20356 <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   2034c:	b013      	add	sp, #76	; 0x4c
   2034e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   20352:	2320      	movs	r3, #32
   20354:	4445      	add	r5, r8
   20356:	4642      	mov	r2, r8
				while (width-- > 0) {
   20358:	2a00      	cmp	r2, #0
   2035a:	eba5 0108 	sub.w	r1, r5, r8
   2035e:	f108 38ff 	add.w	r8, r8, #4294967295
   20362:	dcec      	bgt.n	2033e <cbvprintf+0x682>
   20364:	460d      	mov	r5, r1
		if (sign != 0) {
   20366:	b12e      	cbz	r6, 20374 <cbvprintf+0x6b8>
			OUTC(sign);
   20368:	4659      	mov	r1, fp
   2036a:	4630      	mov	r0, r6
   2036c:	47d0      	blx	sl
   2036e:	2800      	cmp	r0, #0
   20370:	dbec      	blt.n	2034c <cbvprintf+0x690>
   20372:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   20374:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   20378:	06d9      	lsls	r1, r3, #27
   2037a:	d401      	bmi.n	20380 <cbvprintf+0x6c4>
   2037c:	071a      	lsls	r2, r3, #28
   2037e:	d505      	bpl.n	2038c <cbvprintf+0x6d0>
				OUTC('0');
   20380:	4659      	mov	r1, fp
   20382:	2030      	movs	r0, #48	; 0x30
   20384:	47d0      	blx	sl
   20386:	2800      	cmp	r0, #0
   20388:	dbe0      	blt.n	2034c <cbvprintf+0x690>
   2038a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   2038c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   20390:	06db      	lsls	r3, r3, #27
   20392:	d506      	bpl.n	203a2 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   20394:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   20398:	4659      	mov	r1, fp
   2039a:	47d0      	blx	sl
   2039c:	2800      	cmp	r0, #0
   2039e:	dbd5      	blt.n	2034c <cbvprintf+0x690>
   203a0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   203a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   203a4:	442e      	add	r6, r5
   203a6:	1b73      	subs	r3, r6, r5
   203a8:	2b00      	cmp	r3, #0
   203aa:	dc15      	bgt.n	203d8 <cbvprintf+0x71c>
			OUTS(bps, bpe);
   203ac:	463b      	mov	r3, r7
   203ae:	464a      	mov	r2, r9
   203b0:	4659      	mov	r1, fp
   203b2:	4650      	mov	r0, sl
   203b4:	f017 f841 	bl	3743a <outs>
   203b8:	2800      	cmp	r0, #0
   203ba:	dbc7      	blt.n	2034c <cbvprintf+0x690>
   203bc:	4405      	add	r5, r0
		while (width > 0) {
   203be:	44a8      	add	r8, r5
   203c0:	eba8 0305 	sub.w	r3, r8, r5
   203c4:	2b00      	cmp	r3, #0
   203c6:	f77f ae84 	ble.w	200d2 <cbvprintf+0x416>
			OUTC(' ');
   203ca:	4659      	mov	r1, fp
   203cc:	2020      	movs	r0, #32
   203ce:	47d0      	blx	sl
   203d0:	2800      	cmp	r0, #0
   203d2:	dbbb      	blt.n	2034c <cbvprintf+0x690>
   203d4:	3501      	adds	r5, #1
			--width;
   203d6:	e7f3      	b.n	203c0 <cbvprintf+0x704>
				OUTC('0');
   203d8:	4659      	mov	r1, fp
   203da:	2030      	movs	r0, #48	; 0x30
   203dc:	47d0      	blx	sl
   203de:	2800      	cmp	r0, #0
   203e0:	dbb4      	blt.n	2034c <cbvprintf+0x690>
   203e2:	3501      	adds	r5, #1
   203e4:	e7df      	b.n	203a6 <cbvprintf+0x6ea>
   203e6:	bf00      	nop
   203e8:	0003cf4c 	.word	0x0003cf4c

000203ec <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   203ec:	b508      	push	{r3, lr}
	__asm__ volatile(
   203ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   203f2:	f3ef 8311 	mrs	r3, BASEPRI
   203f6:	f382 8812 	msr	BASEPRI_MAX, r2
   203fa:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   203fe:	f002 fdeb 	bl	22fd8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   20402:	4803      	ldr	r0, [pc, #12]	; (20410 <sys_reboot+0x24>)
   20404:	f016 fe89 	bl	3711a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   20408:	f001 fea6 	bl	22158 <arch_cpu_idle>
   2040c:	e7fc      	b.n	20408 <sys_reboot+0x1c>
   2040e:	bf00      	nop
   20410:	0003cf4d 	.word	0x0003cf4d

00020414 <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
   20414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (k_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
   20418:	4b12      	ldr	r3, [pc, #72]	; (20464 <log_generic+0x50>)
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   2041a:	4c13      	ldr	r4, [pc, #76]	; (20468 <log_generic+0x54>)
   2041c:	681b      	ldr	r3, [r3, #0]
   2041e:	4d13      	ldr	r5, [pc, #76]	; (2046c <log_generic+0x58>)
{
   20420:	b085      	sub	sp, #20
   20422:	4681      	mov	r9, r0
   20424:	468a      	mov	sl, r1
   20426:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
   20428:	4798      	blx	r3
   2042a:	1b2d      	subs	r5, r5, r4
   2042c:	4680      	mov	r8, r0
   2042e:	112d      	asrs	r5, r5, #4

		for (int i = 0; i < log_backend_count_get(); i++) {
   20430:	2600      	movs	r6, #0
   20432:	42b5      	cmp	r5, r6
   20434:	dc02      	bgt.n	2043c <log_generic+0x28>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
   20436:	b005      	add	sp, #20
   20438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend) && runtime_ok) {
   2043c:	4620      	mov	r0, r4
   2043e:	f017 f81a 	bl	37476 <log_backend_is_active>
   20442:	b160      	cbz	r0, 2045e <log_generic+0x4a>
	if (backend->api->put_sync_string) {
   20444:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
   20446:	9703      	str	r7, [sp, #12]
   20448:	f8d3 b008 	ldr.w	fp, [r3, #8]
   2044c:	f1bb 0f00 	cmp.w	fp, #0
   20450:	d005      	beq.n	2045e <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
   20452:	9700      	str	r7, [sp, #0]
   20454:	4653      	mov	r3, sl
   20456:	4642      	mov	r2, r8
   20458:	4649      	mov	r1, r9
   2045a:	4620      	mov	r0, r4
   2045c:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   2045e:	3601      	adds	r6, #1
   20460:	3410      	adds	r4, #16
   20462:	e7e6      	b.n	20432 <log_generic+0x1e>
   20464:	20000520 	.word	0x20000520
   20468:	0003b588 	.word	0x0003b588
   2046c:	0003b598 	.word	0x0003b598

00020470 <log_hexdump_sync>:
	va_end(ap);
}

void log_hexdump_sync(struct log_msg_ids src_level, const char *metadata,
		      const void *data, uint32_t len)
{
   20470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20474:	469a      	mov	sl, r3
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_hexdump(metadata, (const uint8_t *)data, len,
				     src_level);
	} else {
		struct log_backend const *backend;
		log_timestamp_t timestamp = timestamp_func();
   20476:	4b14      	ldr	r3, [pc, #80]	; (204c8 <log_hexdump_sync+0x58>)
	return __log_backends_end - __log_backends_start;
   20478:	4c14      	ldr	r4, [pc, #80]	; (204cc <log_hexdump_sync+0x5c>)
   2047a:	681b      	ldr	r3, [r3, #0]
{
   2047c:	b085      	sub	sp, #20
   2047e:	4607      	mov	r7, r0
   20480:	4688      	mov	r8, r1
   20482:	9203      	str	r2, [sp, #12]
		log_timestamp_t timestamp = timestamp_func();
   20484:	4798      	blx	r3
   20486:	4b12      	ldr	r3, [pc, #72]	; (204d0 <log_hexdump_sync+0x60>)
   20488:	1b1b      	subs	r3, r3, r4
   2048a:	4606      	mov	r6, r0
   2048c:	ea4f 1923 	mov.w	r9, r3, asr #4

		for (int i = 0; i < log_backend_count_get(); i++) {
   20490:	2500      	movs	r5, #0
   20492:	454d      	cmp	r5, r9
   20494:	db02      	blt.n	2049c <log_hexdump_sync+0x2c>
					backend, src_level, timestamp, metadata,
					(const uint8_t *)data, len);
			}
		}
	}
}
   20496:	b005      	add	sp, #20
   20498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend) && runtime_ok) {
   2049c:	4620      	mov	r0, r4
   2049e:	f016 ffea 	bl	37476 <log_backend_is_active>
   204a2:	b170      	cbz	r0, 204c2 <log_hexdump_sync+0x52>
	if (backend->api->put_sync_hexdump) {
   204a4:	6823      	ldr	r3, [r4, #0]
   204a6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
   204aa:	f1bb 0f00 	cmp.w	fp, #0
   204ae:	d008      	beq.n	204c2 <log_hexdump_sync+0x52>
		backend->api->put_sync_hexdump(backend, src_level, timestamp,
   204b0:	9b03      	ldr	r3, [sp, #12]
   204b2:	9300      	str	r3, [sp, #0]
   204b4:	f8cd a004 	str.w	sl, [sp, #4]
   204b8:	4643      	mov	r3, r8
   204ba:	4632      	mov	r2, r6
   204bc:	4639      	mov	r1, r7
   204be:	4620      	mov	r0, r4
   204c0:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   204c2:	3501      	adds	r5, #1
   204c4:	3410      	adds	r4, #16
   204c6:	e7e4      	b.n	20492 <log_hexdump_sync+0x22>
   204c8:	20000520 	.word	0x20000520
   204cc:	0003b588 	.word	0x0003b588
   204d0:	0003b598 	.word	0x0003b598

000204d4 <log_core_init>:
void log_core_init(void)
{
	uint32_t freq;
	log_timestamp_get_t _timestamp_func;

	panic_mode = false;
   204d4:	4a05      	ldr	r2, [pc, #20]	; (204ec <log_core_init+0x18>)
   204d6:	2300      	movs	r3, #0
   204d8:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   204da:	4a05      	ldr	r2, [pc, #20]	; (204f0 <log_core_init+0x1c>)
   204dc:	6013      	str	r3, [r2, #0]
{
	if (timestamp_getter == NULL) {
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
   204de:	4b05      	ldr	r3, [pc, #20]	; (204f4 <log_core_init+0x20>)
   204e0:	4a05      	ldr	r2, [pc, #20]	; (204f8 <log_core_init+0x24>)
   204e2:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   204e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   204e8:	f000 ba58 	b.w	2099c <log_output_timestamp_freq_set>
   204ec:	20003b6a 	.word	0x20003b6a
   204f0:	200023a0 	.word	0x200023a0
   204f4:	20000520 	.word	0x20000520
   204f8:	0003747d 	.word	0x0003747d

000204fc <log_init>:
	return __log_backends_end - __log_backends_start;
   204fc:	4b1a      	ldr	r3, [pc, #104]	; (20568 <log_init+0x6c>)
   204fe:	4a1b      	ldr	r2, [pc, #108]	; (2056c <log_init+0x70>)
   20500:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   20502:	2b9f      	cmp	r3, #159	; 0x9f
{
   20504:	b570      	push	{r4, r5, r6, lr}
   20506:	ea4f 1623 	mov.w	r6, r3, asr #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   2050a:	d90b      	bls.n	20524 <log_init+0x28>
   2050c:	4918      	ldr	r1, [pc, #96]	; (20570 <log_init+0x74>)
   2050e:	4819      	ldr	r0, [pc, #100]	; (20574 <log_init+0x78>)
   20510:	4a19      	ldr	r2, [pc, #100]	; (20578 <log_init+0x7c>)
   20512:	f240 234a 	movw	r3, #586	; 0x24a
   20516:	f016 fe00 	bl	3711a <printk>
   2051a:	4817      	ldr	r0, [pc, #92]	; (20578 <log_init+0x7c>)
   2051c:	f240 214a 	movw	r1, #586	; 0x24a
   20520:	f016 ffa1 	bl	37466 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20524:	f3bf 8f5b 	dmb	ish
   20528:	4b14      	ldr	r3, [pc, #80]	; (2057c <log_init+0x80>)
   2052a:	e853 5f00 	ldrex	r5, [r3]
   2052e:	1c6a      	adds	r2, r5, #1
   20530:	e843 2100 	strex	r1, r2, [r3]
   20534:	2900      	cmp	r1, #0
   20536:	d1f8      	bne.n	2052a <log_init+0x2e>
   20538:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   2053c:	b915      	cbnz	r5, 20544 <log_init+0x48>
   2053e:	4c0b      	ldr	r4, [pc, #44]	; (2056c <log_init+0x70>)
	for (i = 0; i < log_backend_count_get(); i++) {
   20540:	42b5      	cmp	r5, r6
   20542:	db00      	blt.n	20546 <log_init+0x4a>
}
   20544:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   20546:	7b23      	ldrb	r3, [r4, #12]
   20548:	b153      	cbz	r3, 20560 <log_init+0x64>
			if (backend->api->init != NULL) {
   2054a:	6823      	ldr	r3, [r4, #0]
   2054c:	699b      	ldr	r3, [r3, #24]
   2054e:	b10b      	cbz	r3, 20554 <log_init+0x58>
				backend->api->init(backend);
   20550:	4620      	mov	r0, r4
   20552:	4798      	blx	r3
			log_backend_enable(backend,
   20554:	6863      	ldr	r3, [r4, #4]
   20556:	2204      	movs	r2, #4
   20558:	6819      	ldr	r1, [r3, #0]
   2055a:	4620      	mov	r0, r4
   2055c:	f000 f844 	bl	205e8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   20560:	3501      	adds	r5, #1
   20562:	3410      	adds	r4, #16
   20564:	e7ec      	b.n	20540 <log_init+0x44>
   20566:	bf00      	nop
   20568:	0003b598 	.word	0x0003b598
   2056c:	0003b588 	.word	0x0003b588
   20570:	0003cfbb 	.word	0x0003cfbb
   20574:	0003c48a 	.word	0x0003c48a
   20578:	0003cf76 	.word	0x0003cf76
   2057c:	200023a4 	.word	0x200023a4

00020580 <z_impl_log_panic>:

	return 0;
}

void z_impl_log_panic(void)
{
   20580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct log_backend const *backend;

	if (panic_mode) {
   20582:	4f0c      	ldr	r7, [pc, #48]	; (205b4 <z_impl_log_panic+0x34>)
   20584:	783d      	ldrb	r5, [r7, #0]
   20586:	b94d      	cbnz	r5, 2059c <z_impl_log_panic+0x1c>
   20588:	4c0b      	ldr	r4, [pc, #44]	; (205b8 <z_impl_log_panic+0x38>)
   2058a:	4e0c      	ldr	r6, [pc, #48]	; (205bc <z_impl_log_panic+0x3c>)
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	log_init();
   2058c:	f7ff ffb6 	bl	204fc <log_init>
   20590:	1b36      	subs	r6, r6, r4
   20592:	1136      	asrs	r6, r6, #4

	for (int i = 0; i < log_backend_count_get(); i++) {
   20594:	42b5      	cmp	r5, r6
   20596:	db02      	blt.n	2059e <z_impl_log_panic+0x1e>
		/* Flush */
		while (log_process(false) == true) {
		}
	}

	panic_mode = true;
   20598:	2301      	movs	r3, #1
   2059a:	703b      	strb	r3, [r7, #0]
}
   2059c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   2059e:	4620      	mov	r0, r4
   205a0:	f016 ff69 	bl	37476 <log_backend_is_active>
   205a4:	b118      	cbz	r0, 205ae <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   205a6:	6823      	ldr	r3, [r4, #0]
   205a8:	4620      	mov	r0, r4
   205aa:	695b      	ldr	r3, [r3, #20]
   205ac:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   205ae:	3501      	adds	r5, #1
   205b0:	3410      	adds	r4, #16
   205b2:	e7ef      	b.n	20594 <z_impl_log_panic+0x14>
   205b4:	20003b6a 	.word	0x20003b6a
   205b8:	0003b588 	.word	0x0003b588
   205bc:	0003b598 	.word	0x0003b598

000205c0 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   205c0:	4b01      	ldr	r3, [pc, #4]	; (205c8 <z_log_notify_backend_enabled+0x8>)
   205c2:	2201      	movs	r2, #1
   205c4:	701a      	strb	r2, [r3, #0]
}
   205c6:	4770      	bx	lr
   205c8:	20003b69 	.word	0x20003b69

000205cc <log_source_name_get>:
   205cc:	4a04      	ldr	r2, [pc, #16]	; (205e0 <log_source_name_get+0x14>)
   205ce:	4b05      	ldr	r3, [pc, #20]	; (205e4 <log_source_name_get+0x18>)
   205d0:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   205d2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   205d6:	bf34      	ite	cc
   205d8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   205dc:	2000      	movcs	r0, #0
}
   205de:	4770      	bx	lr
   205e0:	0003b448 	.word	0x0003b448
   205e4:	0003b588 	.word	0x0003b588

000205e8 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   205e8:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   205ea:	4c0d      	ldr	r4, [pc, #52]	; (20620 <log_backend_enable+0x38>)
   205ec:	1b04      	subs	r4, r0, r4
   205ee:	1124      	asrs	r4, r4, #4
   205f0:	3401      	adds	r4, #1
{
   205f2:	4605      	mov	r5, r0
   205f4:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   205f6:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   205f8:	b948      	cbnz	r0, 2060e <log_backend_enable+0x26>
   205fa:	490a      	ldr	r1, [pc, #40]	; (20624 <log_backend_enable+0x3c>)
   205fc:	480a      	ldr	r0, [pc, #40]	; (20628 <log_backend_enable+0x40>)
   205fe:	4a0b      	ldr	r2, [pc, #44]	; (2062c <log_backend_enable+0x44>)
   20600:	23d1      	movs	r3, #209	; 0xd1
   20602:	f016 fd8a 	bl	3711a <printk>
   20606:	4809      	ldr	r0, [pc, #36]	; (2062c <log_backend_enable+0x44>)
   20608:	21d1      	movs	r1, #209	; 0xd1
   2060a:	f016 ff2c 	bl	37466 <assert_post_action>
	backend->cb->id = id;
   2060e:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   20610:	2201      	movs	r2, #1
	backend->cb->id = id;
   20612:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
   20614:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   20616:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   20618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
   2061c:	f7ff bfd0 	b.w	205c0 <z_log_notify_backend_enabled>
   20620:	0003b588 	.word	0x0003b588
   20624:	0003d06c 	.word	0x0003d06c
   20628:	0003c48a 	.word	0x0003c48a
   2062c:	0003d03b 	.word	0x0003d03b

00020630 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   20630:	b40e      	push	{r1, r2, r3}
   20632:	b503      	push	{r0, r1, lr}
   20634:	ab03      	add	r3, sp, #12
   20636:	4601      	mov	r1, r0
   20638:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   2063c:	4804      	ldr	r0, [pc, #16]	; (20650 <print_formatted+0x20>)
	va_start(args, fmt);
   2063e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   20640:	f7ff fb3c 	bl	1fcbc <cbvprintf>
	va_end(args);

	return length;
}
   20644:	b002      	add	sp, #8
   20646:	f85d eb04 	ldr.w	lr, [sp], #4
   2064a:	b003      	add	sp, #12
   2064c:	4770      	bx	lr
   2064e:	bf00      	nop
   20650:	000374bd 	.word	0x000374bd

00020654 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   20654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20658:	b087      	sub	sp, #28
   2065a:	461f      	mov	r7, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   2065c:	f001 0301 	and.w	r3, r1, #1
{
   20660:	9205      	str	r2, [sp, #20]
   20662:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   20666:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   2066a:	9304      	str	r3, [sp, #16]
{
   2066c:	4606      	mov	r6, r0
   2066e:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   20670:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   20674:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   20678:	f016 ff1e 	bl	374b8 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   2067c:	4602      	mov	r2, r0
   2067e:	2800      	cmp	r0, #0
   20680:	d044      	beq.n	2070c <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   20682:	4939      	ldr	r1, [pc, #228]	; (20768 <prefix_print+0x114>)
   20684:	4630      	mov	r0, r6
   20686:	f7ff ffd3 	bl	20630 <print_formatted>
   2068a:	4604      	mov	r4, r0
	}

	if (stamp) {
   2068c:	f1bb 0f00 	cmp.w	fp, #0
   20690:	d008      	beq.n	206a4 <prefix_print+0x50>
	if (!format) {
   20692:	f018 0f44 	tst.w	r8, #68	; 0x44
   20696:	d13b      	bne.n	20710 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   20698:	4934      	ldr	r1, [pc, #208]	; (2076c <prefix_print+0x118>)
   2069a:	463a      	mov	r2, r7
   2069c:	4630      	mov	r0, r6
   2069e:	f7ff ffc7 	bl	20630 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   206a2:	4404      	add	r4, r0
	if (color) {
   206a4:	9b04      	ldr	r3, [sp, #16]
   206a6:	b153      	cbz	r3, 206be <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   206a8:	4b31      	ldr	r3, [pc, #196]	; (20770 <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   206aa:	4932      	ldr	r1, [pc, #200]	; (20774 <prefix_print+0x120>)
		const char *log_color = start && (colors[level] != NULL) ?
   206ac:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   206b0:	4b31      	ldr	r3, [pc, #196]	; (20778 <prefix_print+0x124>)
   206b2:	4630      	mov	r0, r6
   206b4:	2a00      	cmp	r2, #0
   206b6:	bf08      	it	eq
   206b8:	461a      	moveq	r2, r3
   206ba:	f7ff ffb9 	bl	20630 <print_formatted>
	if (level_on) {
   206be:	b13d      	cbz	r5, 206d0 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   206c0:	4b2e      	ldr	r3, [pc, #184]	; (2077c <prefix_print+0x128>)
   206c2:	492f      	ldr	r1, [pc, #188]	; (20780 <prefix_print+0x12c>)
   206c4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   206c8:	4630      	mov	r0, r6
   206ca:	f7ff ffb1 	bl	20630 <print_formatted>
   206ce:	4605      	mov	r5, r0
	if (source_id >= 0) {
   206d0:	f1ba 0f00 	cmp.w	sl, #0
   206d4:	db16      	blt.n	20704 <prefix_print+0xb0>
		total += print_formatted(output,
   206d6:	9b05      	ldr	r3, [sp, #20]
   206d8:	2b00      	cmp	r3, #0
   206da:	d043      	beq.n	20764 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   206dc:	2301      	movs	r3, #1
   206de:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   206e2:	4b28      	ldr	r3, [pc, #160]	; (20784 <prefix_print+0x130>)
   206e4:	4f28      	ldr	r7, [pc, #160]	; (20788 <prefix_print+0x134>)
   206e6:	f019 0f10 	tst.w	r9, #16
   206ea:	bf18      	it	ne
   206ec:	461f      	movne	r7, r3
   206ee:	4651      	mov	r1, sl
   206f0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   206f4:	f7ff ff6a 	bl	205cc <log_source_name_get>
   206f8:	4639      	mov	r1, r7
   206fa:	4602      	mov	r2, r0
   206fc:	4630      	mov	r0, r6
   206fe:	f7ff ff97 	bl	20630 <print_formatted>
   20702:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   20704:	1928      	adds	r0, r5, r4
   20706:	b007      	add	sp, #28
   20708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   2070c:	4604      	mov	r4, r0
   2070e:	e7bd      	b.n	2068c <prefix_print+0x38>
	} else if (freq != 0U) {
   20710:	4b1e      	ldr	r3, [pc, #120]	; (2078c <prefix_print+0x138>)
   20712:	6818      	ldr	r0, [r3, #0]
   20714:	2800      	cmp	r0, #0
   20716:	d0c4      	beq.n	206a2 <prefix_print+0x4e>
		timestamp /= timestamp_div;
   20718:	4b1d      	ldr	r3, [pc, #116]	; (20790 <prefix_print+0x13c>)
   2071a:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   2071e:	6819      	ldr	r1, [r3, #0]
   20720:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   20724:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   20728:	fb00 7711 	mls	r7, r0, r1, r7
   2072c:	fbb1 f2fc 	udiv	r2, r1, ip
   20730:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   20734:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   20738:	434f      	muls	r7, r1
		mins = seconds / 60U;
   2073a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   2073e:	fbb7 f8f0 	udiv	r8, r7, r0
   20742:	fb00 7718 	mls	r7, r0, r8, r7
   20746:	434f      	muls	r7, r1
		mins = seconds / 60U;
   20748:	fbbc f3fe 	udiv	r3, ip, lr
			length = print_formatted(output,
   2074c:	fb0e c113 	mls	r1, lr, r3, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   20750:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   20754:	9100      	str	r1, [sp, #0]
   20756:	e9cd 8001 	strd	r8, r0, [sp, #4]
   2075a:	490e      	ldr	r1, [pc, #56]	; (20794 <prefix_print+0x140>)
   2075c:	4630      	mov	r0, r6
   2075e:	f7ff ff67 	bl	20630 <print_formatted>
   20762:	e79e      	b.n	206a2 <prefix_print+0x4e>
		total += print_formatted(output,
   20764:	4f08      	ldr	r7, [pc, #32]	; (20788 <prefix_print+0x134>)
   20766:	e7c2      	b.n	206ee <prefix_print+0x9a>
   20768:	0003d091 	.word	0x0003d091
   2076c:	0003d095 	.word	0x0003d095
   20770:	0003b790 	.word	0x0003b790
   20774:	0003c5e7 	.word	0x0003c5e7
   20778:	0003d083 	.word	0x0003d083
   2077c:	0003b7a4 	.word	0x0003b7a4
   20780:	0003d0ba 	.word	0x0003d0ba
   20784:	0003d08d 	.word	0x0003d08d
   20788:	0003d088 	.word	0x0003d088
   2078c:	200023a8 	.word	0x200023a8
   20790:	200023ac 	.word	0x200023ac
   20794:	0003d09e 	.word	0x0003d09e

00020798 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   20798:	b538      	push	{r3, r4, r5, lr}
   2079a:	460c      	mov	r4, r1
	if (color) {
   2079c:	07e1      	lsls	r1, r4, #31
{
   2079e:	4605      	mov	r5, r0
	if (color) {
   207a0:	d503      	bpl.n	207aa <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   207a2:	4a08      	ldr	r2, [pc, #32]	; (207c4 <postfix_print+0x2c>)
   207a4:	4908      	ldr	r1, [pc, #32]	; (207c8 <postfix_print+0x30>)
   207a6:	f7ff ff43 	bl	20630 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   207aa:	06e2      	lsls	r2, r4, #27
   207ac:	d408      	bmi.n	207c0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   207ae:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   207b0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   207b2:	bf4c      	ite	mi
   207b4:	4905      	ldrmi	r1, [pc, #20]	; (207cc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   207b6:	4906      	ldrpl	r1, [pc, #24]	; (207d0 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   207b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   207bc:	f7ff bf38 	b.w	20630 <print_formatted>
}
   207c0:	bd38      	pop	{r3, r4, r5, pc}
   207c2:	bf00      	nop
   207c4:	0003d083 	.word	0x0003d083
   207c8:	0003c5e7 	.word	0x0003c5e7
   207cc:	0003cae1 	.word	0x0003cae1
   207d0:	0003d0c0 	.word	0x0003d0c0

000207d4 <hexdump_line_print>:
{
   207d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   207d8:	461d      	mov	r5, r3
   207da:	9b08      	ldr	r3, [sp, #32]
   207dc:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   207de:	06da      	lsls	r2, r3, #27
{
   207e0:	4604      	mov	r4, r0
   207e2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   207e4:	d405      	bmi.n	207f2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   207e6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   207e8:	bf4c      	ite	mi
   207ea:	492b      	ldrmi	r1, [pc, #172]	; (20898 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   207ec:	492b      	ldrpl	r1, [pc, #172]	; (2089c <hexdump_line_print+0xc8>)
   207ee:	f7ff ff1f 	bl	20630 <print_formatted>
		print_formatted(output, " ");
   207f2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 208a4 <hexdump_line_print+0xd0>
{
   207f6:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   207fa:	45a8      	cmp	r8, r5
   207fc:	db2d      	blt.n	2085a <hexdump_line_print+0x86>
			print_formatted(output, "   ");
   207fe:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 208a8 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
   20802:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 208ac <hexdump_line_print+0xd8>
			print_formatted(output, " ");
   20806:	f8df a09c 	ldr.w	sl, [pc, #156]	; 208a4 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2080a:	2500      	movs	r5, #0
		if (i < length) {
   2080c:	42bd      	cmp	r5, r7
   2080e:	d232      	bcs.n	20876 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
   20810:	5d72      	ldrb	r2, [r6, r5]
   20812:	4649      	mov	r1, r9
   20814:	4620      	mov	r0, r4
   20816:	f7ff ff0b 	bl	20630 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2081a:	3501      	adds	r5, #1
   2081c:	2d10      	cmp	r5, #16
   2081e:	d123      	bne.n	20868 <hexdump_line_print+0x94>
	print_formatted(output, "|");
   20820:	491f      	ldr	r1, [pc, #124]	; (208a0 <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
   20822:	f8df 8080 	ldr.w	r8, [pc, #128]	; 208a4 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   20826:	f8df 9088 	ldr.w	r9, [pc, #136]	; 208b0 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
   2082a:	f8df a088 	ldr.w	sl, [pc, #136]	; 208b4 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
   2082e:	4620      	mov	r0, r4
   20830:	f7ff fefe 	bl	20630 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20834:	2500      	movs	r5, #0
		if (i < length) {
   20836:	42af      	cmp	r7, r5
   20838:	d929      	bls.n	2088e <hexdump_line_print+0xba>
			char c = (char)data[i];
   2083a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   2083c:	f812 3009 	ldrb.w	r3, [r2, r9]
   20840:	f013 0f97 	tst.w	r3, #151	; 0x97
   20844:	bf08      	it	eq
   20846:	222e      	moveq	r2, #46	; 0x2e
   20848:	4651      	mov	r1, sl
   2084a:	4620      	mov	r0, r4
   2084c:	f7ff fef0 	bl	20630 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20850:	3501      	adds	r5, #1
   20852:	2d10      	cmp	r5, #16
   20854:	d114      	bne.n	20880 <hexdump_line_print+0xac>
}
   20856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   2085a:	4649      	mov	r1, r9
   2085c:	4620      	mov	r0, r4
   2085e:	f7ff fee7 	bl	20630 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   20862:	f108 0801 	add.w	r8, r8, #1
   20866:	e7c8      	b.n	207fa <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   20868:	076a      	lsls	r2, r5, #29
   2086a:	d1cf      	bne.n	2080c <hexdump_line_print+0x38>
			print_formatted(output, " ");
   2086c:	4651      	mov	r1, sl
   2086e:	4620      	mov	r0, r4
   20870:	f7ff fede 	bl	20630 <print_formatted>
   20874:	e7ca      	b.n	2080c <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   20876:	4641      	mov	r1, r8
   20878:	4620      	mov	r0, r4
   2087a:	f7ff fed9 	bl	20630 <print_formatted>
   2087e:	e7cc      	b.n	2081a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   20880:	076b      	lsls	r3, r5, #29
   20882:	d1d8      	bne.n	20836 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   20884:	4641      	mov	r1, r8
   20886:	4620      	mov	r0, r4
   20888:	f7ff fed2 	bl	20630 <print_formatted>
   2088c:	e7d3      	b.n	20836 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   2088e:	4641      	mov	r1, r8
   20890:	4620      	mov	r0, r4
   20892:	f7ff fecd 	bl	20630 <print_formatted>
   20896:	e7db      	b.n	20850 <hexdump_line_print+0x7c>
   20898:	0003cae1 	.word	0x0003cae1
   2089c:	0003d0c0 	.word	0x0003d0c0
   208a0:	0003d0cd 	.word	0x0003d0cd
   208a4:	0003d0cb 	.word	0x0003d0cb
   208a8:	0003d0c9 	.word	0x0003d0c9
   208ac:	0003d0c3 	.word	0x0003d0c3
   208b0:	00041afc 	.word	0x00041afc
   208b4:	0003c2bd 	.word	0x0003c2bd

000208b8 <log_output_string>:
}

void log_output_string(const struct log_output *output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
   208b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   208bc:	f011 0607 	ands.w	r6, r1, #7
{
   208c0:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   208c4:	4605      	mov	r5, r0
   208c6:	461c      	mov	r4, r3
	if (!raw_string) {
   208c8:	d00b      	beq.n	208e2 <log_output_string+0x2a>
		prefix_print(output, flags, true, timestamp,
   208ca:	f3c1 1389 	ubfx	r3, r1, #6, #10
   208ce:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   208d2:	e9cd 6100 	strd	r6, r1, [sp]
   208d6:	9302      	str	r3, [sp, #8]
   208d8:	4639      	mov	r1, r7
   208da:	4613      	mov	r3, r2
   208dc:	2201      	movs	r2, #1
   208de:	f7ff feb9 	bl	20654 <prefix_print>
				level, domain_id, source_id);
	}

	length = cbvprintf(out_func, (void *)output, fmt, ap);
   208e2:	480f      	ldr	r0, [pc, #60]	; (20920 <log_output_string+0x68>)
   208e4:	4643      	mov	r3, r8
   208e6:	4622      	mov	r2, r4
   208e8:	4629      	mov	r1, r5
   208ea:	f7ff f9e7 	bl	1fcbc <cbvprintf>

	(void)length;

	if (raw_string) {
   208ee:	b98e      	cbnz	r6, 20914 <log_output_string+0x5c>
   208f0:	3c01      	subs	r4, #1
	while (*fmt != '\0') {
   208f2:	4633      	mov	r3, r6
   208f4:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   208f8:	2e00      	cmp	r6, #0
   208fa:	d1fa      	bne.n	208f2 <log_output_string+0x3a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   208fc:	2b0a      	cmp	r3, #10
   208fe:	d103      	bne.n	20908 <log_output_string+0x50>
			print_formatted(output, "\r");
   20900:	4908      	ldr	r1, [pc, #32]	; (20924 <log_output_string+0x6c>)
   20902:	4628      	mov	r0, r5
   20904:	f7ff fe94 	bl	20630 <print_formatted>
		}
	} else {
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   20908:	4628      	mov	r0, r5
}
   2090a:	b004      	add	sp, #16
   2090c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(output);
   20910:	f016 bded 	b.w	374ee <log_output_flush>
		postfix_print(output, flags, level);
   20914:	4632      	mov	r2, r6
   20916:	4639      	mov	r1, r7
   20918:	4628      	mov	r0, r5
   2091a:	f7ff ff3d 	bl	20798 <postfix_print>
   2091e:	e7f3      	b.n	20908 <log_output_string+0x50>
   20920:	000374bd 	.word	0x000374bd
   20924:	0003d10b 	.word	0x0003d10b

00020928 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
   20928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2092c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2092e:	4698      	mov	r8, r3
	uint32_t prefix_offset;
	uint8_t level = (uint8_t)src_level.level;
   20930:	f001 0907 	and.w	r9, r1, #7
		log_output_hexdump_syst_process(output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(output, flags, true, timestamp,
   20934:	f3c1 1389 	ubfx	r3, r1, #6, #10
   20938:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   2093c:	e9cd 9100 	strd	r9, r1, [sp]
   20940:	9302      	str	r3, [sp, #8]
   20942:	4631      	mov	r1, r6
   20944:	4613      	mov	r3, r2
   20946:	2201      	movs	r2, #1
{
   20948:	4604      	mov	r4, r0
   2094a:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
	prefix_offset = prefix_print(output, flags, true, timestamp,
   2094e:	f7ff fe81 	bl	20654 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(output, "%s", metadata);
   20952:	4911      	ldr	r1, [pc, #68]	; (20998 <log_output_hexdump+0x70>)
	prefix_offset = prefix_print(output, flags, true, timestamp,
   20954:	4682      	mov	sl, r0
	print_formatted(output, "%s", metadata);
   20956:	4642      	mov	r2, r8
   20958:	4620      	mov	r0, r4
   2095a:	f7ff fe69 	bl	20630 <print_formatted>

	while (length != 0U) {
   2095e:	b955      	cbnz	r5, 20976 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	}

	postfix_print(output, flags, level);
   20960:	4620      	mov	r0, r4
   20962:	464a      	mov	r2, r9
   20964:	4631      	mov	r1, r6
   20966:	f7ff ff17 	bl	20798 <postfix_print>
	log_output_flush(output);
   2096a:	4620      	mov	r0, r4
}
   2096c:	b004      	add	sp, #16
   2096e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
   20972:	f016 bdbc 	b.w	374ee <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   20976:	2d10      	cmp	r5, #16
   20978:	46a8      	mov	r8, r5
   2097a:	bf28      	it	cs
   2097c:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(output, data, part_len,
   20980:	4639      	mov	r1, r7
   20982:	9600      	str	r6, [sp, #0]
   20984:	4653      	mov	r3, sl
   20986:	4642      	mov	r2, r8
   20988:	4620      	mov	r0, r4
   2098a:	f7ff ff23 	bl	207d4 <hexdump_line_print>
		data += part_len;
   2098e:	4447      	add	r7, r8
		length -= part_len;
   20990:	eba5 0508 	sub.w	r5, r5, r8
   20994:	e7e3      	b.n	2095e <log_output_hexdump+0x36>
   20996:	bf00      	nop
   20998:	0003c5e7 	.word	0x0003c5e7

0002099c <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   2099c:	4a08      	ldr	r2, [pc, #32]	; (209c0 <log_output_timestamp_freq_set+0x24>)
{
   2099e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   209a0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   209a2:	4c08      	ldr	r4, [pc, #32]	; (209c4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   209a4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   209a6:	2100      	movs	r1, #0
   209a8:	42a0      	cmp	r0, r4
   209aa:	d804      	bhi.n	209b6 <log_output_timestamp_freq_set+0x1a>
   209ac:	b101      	cbz	r1, 209b0 <log_output_timestamp_freq_set+0x14>
   209ae:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   209b0:	4b05      	ldr	r3, [pc, #20]	; (209c8 <log_output_timestamp_freq_set+0x2c>)
   209b2:	6018      	str	r0, [r3, #0]
}
   209b4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   209b6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   209b8:	005b      	lsls	r3, r3, #1
   209ba:	2101      	movs	r1, #1
   209bc:	e7f4      	b.n	209a8 <log_output_timestamp_freq_set+0xc>
   209be:	bf00      	nop
   209c0:	200023ac 	.word	0x200023ac
   209c4:	000f4240 	.word	0x000f4240
   209c8:	200023a8 	.word	0x200023a8

000209cc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   209cc:	4b01      	ldr	r3, [pc, #4]	; (209d4 <log_backend_rtt_init+0x8>)
   209ce:	2201      	movs	r2, #1
   209d0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   209d2:	4770      	bx	lr
   209d4:	20003b6c 	.word	0x20003b6c

000209d8 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   209d8:	4b02      	ldr	r3, [pc, #8]	; (209e4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   209da:	4803      	ldr	r0, [pc, #12]	; (209e8 <panic+0x10>)
   209dc:	2201      	movs	r2, #1
   209de:	701a      	strb	r2, [r3, #0]
   209e0:	f016 bd85 	b.w	374ee <log_output_flush>
   209e4:	20003b6d 	.word	0x20003b6d
   209e8:	0003b7d4 	.word	0x0003b7d4

000209ec <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
   209ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(output, src_level, timestamp,
   209ee:	200f      	movs	r0, #15
   209f0:	9002      	str	r0, [sp, #8]
   209f2:	9807      	ldr	r0, [sp, #28]
   209f4:	9001      	str	r0, [sp, #4]
   209f6:	9806      	ldr	r0, [sp, #24]
   209f8:	9000      	str	r0, [sp, #0]
   209fa:	4803      	ldr	r0, [pc, #12]	; (20a08 <sync_hexdump+0x1c>)
   209fc:	f7ff ff94 	bl	20928 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_rtt, flag, src_level,
				     timestamp, metadata, data, length);
}
   20a00:	b005      	add	sp, #20
   20a02:	f85d fb04 	ldr.w	pc, [sp], #4
   20a06:	bf00      	nop
   20a08:	0003b7d4 	.word	0x0003b7d4

00020a0c <sync_string>:
{
   20a0c:	b507      	push	{r0, r1, r2, lr}
	log_output_string(output, src_level, timestamp, fmt, ap, flags);
   20a0e:	200f      	movs	r0, #15
   20a10:	9001      	str	r0, [sp, #4]
   20a12:	9804      	ldr	r0, [sp, #16]
   20a14:	9000      	str	r0, [sp, #0]
   20a16:	4803      	ldr	r0, [pc, #12]	; (20a24 <sync_string+0x18>)
   20a18:	f7ff ff4e 	bl	208b8 <log_output_string>
}
   20a1c:	b003      	add	sp, #12
   20a1e:	f85d fb04 	ldr.w	pc, [sp], #4
   20a22:	bf00      	nop
   20a24:	0003b7d4 	.word	0x0003b7d4

00020a28 <data_out_block_mode>:
{
   20a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a2a:	4d19      	ldr	r5, [pc, #100]	; (20a90 <data_out_block_mode+0x68>)
   20a2c:	4607      	mov	r7, r0
   20a2e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   20a30:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   20a32:	4632      	mov	r2, r6
   20a34:	4639      	mov	r1, r7
   20a36:	2000      	movs	r0, #0
   20a38:	f00e f938 	bl	2ecac <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
   20a3c:	b1c8      	cbz	r0, 20a72 <data_out_block_mode+0x4a>
	host_present = true;
   20a3e:	2301      	movs	r3, #1
   20a40:	702b      	strb	r3, [r5, #0]
	return panic_mode;
   20a42:	4b14      	ldr	r3, [pc, #80]	; (20a94 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
   20a44:	781b      	ldrb	r3, [r3, #0]
   20a46:	b92b      	cbnz	r3, 20a54 <data_out_block_mode+0x2c>
}
   20a48:	4630      	mov	r0, r6
   20a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
   20a4c:	b95c      	cbnz	r4, 20a66 <data_out_block_mode+0x3e>
		host_present = false;
   20a4e:	702c      	strb	r4, [r5, #0]
   20a50:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   20a54:	2000      	movs	r0, #0
   20a56:	f00e f9a9 	bl	2edac <SEGGER_RTT_HasDataUp>
   20a5a:	2800      	cmp	r0, #0
   20a5c:	d0f4      	beq.n	20a48 <data_out_block_mode+0x20>
   20a5e:	782b      	ldrb	r3, [r5, #0]
   20a60:	2b00      	cmp	r3, #0
   20a62:	d1f3      	bne.n	20a4c <data_out_block_mode+0x24>
   20a64:	e7f0      	b.n	20a48 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
   20a66:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
   20a68:	f241 3088 	movw	r0, #5000	; 0x1388
   20a6c:	f019 fc96 	bl	3a39c <z_impl_k_busy_wait>
}
   20a70:	e7f0      	b.n	20a54 <data_out_block_mode+0x2c>
		} else if (host_present) {
   20a72:	782b      	ldrb	r3, [r5, #0]
   20a74:	b113      	cbz	r3, 20a7c <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
   20a76:	3c01      	subs	r4, #1
   20a78:	d104      	bne.n	20a84 <data_out_block_mode+0x5c>
		host_present = false;
   20a7a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   20a7c:	782b      	ldrb	r3, [r5, #0]
   20a7e:	2b00      	cmp	r3, #0
   20a80:	d1d7      	bne.n	20a32 <data_out_block_mode+0xa>
   20a82:	e7e1      	b.n	20a48 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
   20a84:	f241 3088 	movw	r0, #5000	; 0x1388
   20a88:	f019 fc88 	bl	3a39c <z_impl_k_busy_wait>
}
   20a8c:	e7f6      	b.n	20a7c <data_out_block_mode+0x54>
   20a8e:	bf00      	nop
   20a90:	20003b6c 	.word	0x20003b6c
   20a94:	20003b6d 	.word	0x20003b6d

00020a98 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   20a98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20a9c:	460f      	mov	r7, r1
   20a9e:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20aa0:	2108      	movs	r1, #8
   20aa2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   20aa4:	f016 fded 	bl	37682 <nvs_al_size.isra.0>

	*addr -= ate_size;
   20aa8:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   20aaa:	4b13      	ldr	r3, [pc, #76]	; (20af8 <nvs_recover_last_ate+0x60>)
	*addr -= ate_size;
   20aac:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20aae:	4680      	mov	r8, r0
	*addr -= ate_size;
   20ab0:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   20ab2:	ea04 0503 	and.w	r5, r4, r3
		if (rc) {
			return rc;
		}
		if (nvs_ate_valid(fs, &end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
   20ab6:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
   20ab8:	42ac      	cmp	r4, r5
   20aba:	d803      	bhi.n	20ac4 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   20abc:	2000      	movs	r0, #0
}
   20abe:	b003      	add	sp, #12
   20ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20ac4:	2308      	movs	r3, #8
   20ac6:	466a      	mov	r2, sp
   20ac8:	4621      	mov	r1, r4
   20aca:	4630      	mov	r0, r6
   20acc:	f016 fd3b 	bl	37546 <nvs_flash_rd>
		if (rc) {
   20ad0:	2800      	cmp	r0, #0
   20ad2:	d1f4      	bne.n	20abe <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   20ad4:	4669      	mov	r1, sp
   20ad6:	4630      	mov	r0, r6
   20ad8:	f016 fddd 	bl	37696 <nvs_ate_valid>
   20adc:	b140      	cbz	r0, 20af0 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   20ade:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   20ae2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   20ae6:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   20ae8:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   20aec:	4413      	add	r3, r2
   20aee:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   20af0:	eba4 0408 	sub.w	r4, r4, r8
   20af4:	e7e0      	b.n	20ab8 <nvs_recover_last_ate+0x20>
   20af6:	bf00      	nop
   20af8:	ffff0000 	.word	0xffff0000

00020afc <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   20afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b00:	4604      	mov	r4, r0
   20b02:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20b04:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   20b06:	2108      	movs	r1, #8
   20b08:	f016 fdbb 	bl	37682 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   20b0c:	6863      	ldr	r3, [r4, #4]
   20b0e:	0c1b      	lsrs	r3, r3, #16
   20b10:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20b12:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   20b14:	a903      	add	r1, sp, #12
   20b16:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   20b18:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   20b1a:	f016 fdd6 	bl	376ca <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   20b1e:	9b03      	ldr	r3, [sp, #12]
   20b20:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20b22:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   20b24:	4419      	add	r1, r3
   20b26:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20b28:	4632      	mov	r2, r6
   20b2a:	2308      	movs	r3, #8
   20b2c:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   20b2e:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20b30:	f016 fd09 	bl	37546 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
   20b34:	1e02      	subs	r2, r0, #0
   20b36:	f2c0 80ab 	blt.w	20c90 <nvs_gc+0x194>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   20b3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20b3c:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   20b3e:	2300      	movs	r3, #0
		if (data8[i] != value) {
   20b40:	5cf1      	ldrb	r1, [r6, r3]
   20b42:	4291      	cmp	r1, r2
   20b44:	f040 8092 	bne.w	20c6c <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   20b48:	3301      	adds	r3, #1
   20b4a:	2b08      	cmp	r3, #8
   20b4c:	d1f8      	bne.n	20b40 <nvs_gc+0x44>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   20b4e:	68a0      	ldr	r0, [r4, #8]
   20b50:	6863      	ldr	r3, [r4, #4]
   20b52:	4428      	add	r0, r5
   20b54:	4283      	cmp	r3, r0
   20b56:	f080 8081 	bcs.w	20c5c <nvs_gc+0x160>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
   20b5a:	9903      	ldr	r1, [sp, #12]
   20b5c:	4620      	mov	r0, r4
   20b5e:	f016 fd50 	bl	37602 <nvs_flash_erase_sector>
   20b62:	4602      	mov	r2, r0
	if (rc) {
   20b64:	e094      	b.n	20c90 <nvs_gc+0x194>
		gc_addr &= ADDR_SECT_MASK;
   20b66:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
   20b68:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   20b6c:	0c1b      	lsrs	r3, r3, #16
   20b6e:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   20b70:	4413      	add	r3, r2
   20b72:	9304      	str	r3, [sp, #16]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   20b74:	f8df b120 	ldr.w	fp, [pc, #288]	; 20c98 <nvs_gc+0x19c>
		gc_prev_addr = gc_addr;
   20b78:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   20b7c:	aa08      	add	r2, sp, #32
   20b7e:	a904      	add	r1, sp, #16
   20b80:	4620      	mov	r0, r4
   20b82:	f016 fe26 	bl	377d2 <nvs_prev_ate>
		if (rc) {
   20b86:	4602      	mov	r2, r0
   20b88:	2800      	cmp	r0, #0
   20b8a:	f040 8081 	bne.w	20c90 <nvs_gc+0x194>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   20b8e:	a908      	add	r1, sp, #32
   20b90:	4620      	mov	r0, r4
   20b92:	f016 fd80 	bl	37696 <nvs_ate_valid>
   20b96:	2800      	cmp	r0, #0
   20b98:	d036      	beq.n	20c08 <nvs_gc+0x10c>
		wlk_addr = fs->ate_wra;
   20b9a:	6863      	ldr	r3, [r4, #4]
   20b9c:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   20b9e:	aa0a      	add	r2, sp, #40	; 0x28
   20ba0:	a905      	add	r1, sp, #20
   20ba2:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   20ba4:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   20ba6:	f016 fe14 	bl	377d2 <nvs_prev_ate>
			if (rc) {
   20baa:	4602      	mov	r2, r0
   20bac:	2800      	cmp	r0, #0
   20bae:	d16f      	bne.n	20c90 <nvs_gc+0x194>
			if ((wlk_ate.id == gc_ate.id) &&
   20bb0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   20bb4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   20bb8:	429a      	cmp	r2, r3
   20bba:	d028      	beq.n	20c0e <nvs_gc+0x112>
		} while (wlk_addr != fs->ate_wra);
   20bbc:	6862      	ldr	r2, [r4, #4]
   20bbe:	9b05      	ldr	r3, [sp, #20]
   20bc0:	429a      	cmp	r2, r3
   20bc2:	d1ec      	bne.n	20b9e <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   20bc4:	4556      	cmp	r6, sl
   20bc6:	d11f      	bne.n	20c08 <nvs_gc+0x10c>
   20bc8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   20bcc:	b1e3      	cbz	r3, 20c08 <nvs_gc+0x10c>
			data_addr += gc_ate.offset;
   20bce:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   20bd2:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
   20bd6:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   20bd8:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   20bda:	68a3      	ldr	r3, [r4, #8]
   20bdc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   20be0:	f016 fd46 	bl	37670 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   20be4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   20be6:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   20bea:	681e      	ldr	r6, [r3, #0]
   20bec:	4276      	negs	r6, r6
	block_size =
   20bee:	f006 0320 	and.w	r3, r6, #32
   20bf2:	9301      	str	r3, [sp, #4]
	while (len) {
   20bf4:	f1b8 0f00 	cmp.w	r8, #0
   20bf8:	d110      	bne.n	20c1c <nvs_gc+0x120>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   20bfa:	a908      	add	r1, sp, #32
   20bfc:	4620      	mov	r0, r4
   20bfe:	f016 fdc2 	bl	37786 <nvs_flash_ate_wrt>
			if (rc) {
   20c02:	4602      	mov	r2, r0
   20c04:	2800      	cmp	r0, #0
   20c06:	d143      	bne.n	20c90 <nvs_gc+0x194>
	} while (gc_prev_addr != stop_addr);
   20c08:	45ca      	cmp	sl, r9
   20c0a:	d1b5      	bne.n	20b78 <nvs_gc+0x7c>
gc_done:
   20c0c:	e79f      	b.n	20b4e <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   20c0e:	a90a      	add	r1, sp, #40	; 0x28
   20c10:	4620      	mov	r0, r4
   20c12:	f016 fd40 	bl	37696 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   20c16:	2800      	cmp	r0, #0
   20c18:	d0d0      	beq.n	20bbc <nvs_gc+0xc0>
   20c1a:	e7d3      	b.n	20bc4 <nvs_gc+0xc8>
		bytes_to_copy = MIN(block_size, len);
   20c1c:	9b01      	ldr	r3, [sp, #4]
   20c1e:	4543      	cmp	r3, r8
   20c20:	bf28      	it	cs
   20c22:	4643      	movcs	r3, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   20c24:	aa0c      	add	r2, sp, #48	; 0x30
   20c26:	4639      	mov	r1, r7
   20c28:	4620      	mov	r0, r4
		bytes_to_copy = MIN(block_size, len);
   20c2a:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   20c2c:	f016 fc8b 	bl	37546 <nvs_flash_rd>
		if (rc) {
   20c30:	4602      	mov	r2, r0
   20c32:	bb68      	cbnz	r0, 20c90 <nvs_gc+0x194>
	if (!len) {
   20c34:	b136      	cbz	r6, 20c44 <nvs_gc+0x148>
   20c36:	aa0c      	add	r2, sp, #48	; 0x30
   20c38:	68a1      	ldr	r1, [r4, #8]
   20c3a:	4633      	mov	r3, r6
   20c3c:	4620      	mov	r0, r4
   20c3e:	f016 fd6d 	bl	3771c <nvs_flash_al_wrt.part.0>
   20c42:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   20c44:	4631      	mov	r1, r6
   20c46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   20c48:	f016 fd1b 	bl	37682 <nvs_al_size.isra.0>
   20c4c:	68a1      	ldr	r1, [r4, #8]
   20c4e:	4401      	add	r1, r0
   20c50:	60a1      	str	r1, [r4, #8]
		if (rc) {
   20c52:	b9ea      	cbnz	r2, 20c90 <nvs_gc+0x194>
		len -= bytes_to_copy;
   20c54:	eba8 0806 	sub.w	r8, r8, r6
		addr += bytes_to_copy;
   20c58:	4437      	add	r7, r6
   20c5a:	e7cb      	b.n	20bf4 <nvs_gc+0xf8>
		rc = nvs_add_gc_done_ate(fs);
   20c5c:	4620      	mov	r0, r4
   20c5e:	f016 fda3 	bl	377a8 <nvs_add_gc_done_ate>
		if (rc) {
   20c62:	4602      	mov	r2, r0
   20c64:	2800      	cmp	r0, #0
   20c66:	f43f af78 	beq.w	20b5a <nvs_gc+0x5e>
   20c6a:	e011      	b.n	20c90 <nvs_gc+0x194>
	stop_addr = gc_addr - ate_size;
   20c6c:	9b04      	ldr	r3, [sp, #16]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   20c6e:	4631      	mov	r1, r6
   20c70:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   20c72:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   20c76:	f016 fd33 	bl	376e0 <nvs_close_ate_valid>
   20c7a:	2800      	cmp	r0, #0
   20c7c:	f47f af73 	bne.w	20b66 <nvs_gc+0x6a>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   20c80:	a904      	add	r1, sp, #16
   20c82:	4620      	mov	r0, r4
   20c84:	f7ff ff08 	bl	20a98 <nvs_recover_last_ate>
		if (rc) {
   20c88:	4602      	mov	r2, r0
   20c8a:	2800      	cmp	r0, #0
   20c8c:	f43f af72 	beq.w	20b74 <nvs_gc+0x78>
		return rc;
	}
	return 0;
}
   20c90:	4610      	mov	r0, r2
   20c92:	b015      	add	sp, #84	; 0x54
   20c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c98:	ffff0000 	.word	0xffff0000

00020c9c <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   20c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20ca0:	4604      	mov	r4, r0
   20ca2:	b088      	sub	sp, #32
   20ca4:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   20ca6:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   20caa:	4638      	mov	r0, r7
   20cac:	f019 faac 	bl	3a208 <z_impl_k_mutex_init>
   20cb0:	4628      	mov	r0, r5
   20cb2:	f00e f8a5 	bl	2ee00 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   20cb6:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   20cb8:	b978      	cbnz	r0, 20cda <nvs_init+0x3e>
   20cba:	4ba6      	ldr	r3, [pc, #664]	; (20f54 <nvs_init+0x2b8>)
   20cbc:	48a6      	ldr	r0, [pc, #664]	; (20f58 <nvs_init+0x2bc>)
		LOG_ERR("No valid flash device found");
   20cbe:	49a7      	ldr	r1, [pc, #668]	; (20f5c <nvs_init+0x2c0>)
   20cc0:	1ac0      	subs	r0, r0, r3
   20cc2:	08c0      	lsrs	r0, r0, #3
   20cc4:	0180      	lsls	r0, r0, #6
   20cc6:	f040 0001 	orr.w	r0, r0, #1
   20cca:	f016 fbe1 	bl	37490 <log_string_sync>
		return -ENXIO;
   20cce:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   20cd2:	4628      	mov	r0, r5
   20cd4:	b008      	add	sp, #32
   20cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   20cda:	6883      	ldr	r3, [r0, #8]
   20cdc:	691b      	ldr	r3, [r3, #16]
   20cde:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   20ce0:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   20ce2:	b960      	cbnz	r0, 20cfe <nvs_init+0x62>
   20ce4:	489c      	ldr	r0, [pc, #624]	; (20f58 <nvs_init+0x2bc>)
   20ce6:	4b9b      	ldr	r3, [pc, #620]	; (20f54 <nvs_init+0x2b8>)
		LOG_ERR("Could not obtain flash parameters");
   20ce8:	499d      	ldr	r1, [pc, #628]	; (20f60 <nvs_init+0x2c4>)
   20cea:	1ac0      	subs	r0, r0, r3
   20cec:	08c0      	lsrs	r0, r0, #3
   20cee:	0180      	lsls	r0, r0, #6
		LOG_ERR("Configuration error - sector count");
   20cf0:	f040 0001 	orr.w	r0, r0, #1
   20cf4:	f016 fbcc 	bl	37490 <log_string_sync>
		return -EINVAL;
   20cf8:	f06f 0515 	mvn.w	r5, #21
   20cfc:	e7e9      	b.n	20cd2 <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
   20cfe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   20d00:	6883      	ldr	r3, [r0, #8]
   20d02:	691b      	ldr	r3, [r3, #16]
   20d04:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   20d06:	6803      	ldr	r3, [r0, #0]
   20d08:	3b01      	subs	r3, #1
   20d0a:	2b1f      	cmp	r3, #31
   20d0c:	d906      	bls.n	20d1c <nvs_init+0x80>
   20d0e:	4892      	ldr	r0, [pc, #584]	; (20f58 <nvs_init+0x2bc>)
   20d10:	4b90      	ldr	r3, [pc, #576]	; (20f54 <nvs_init+0x2b8>)
		LOG_ERR("Unsupported write block size");
   20d12:	4994      	ldr	r1, [pc, #592]	; (20f64 <nvs_init+0x2c8>)
   20d14:	1ac0      	subs	r0, r0, r3
   20d16:	08c0      	lsrs	r0, r0, #3
   20d18:	0180      	lsls	r0, r0, #6
   20d1a:	e7e9      	b.n	20cf0 <nvs_init+0x54>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   20d1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   20d1e:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   20d20:	aa05      	add	r2, sp, #20
   20d22:	f018 fdea 	bl	398fa <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   20d26:	b130      	cbz	r0, 20d36 <nvs_init+0x9a>
   20d28:	488b      	ldr	r0, [pc, #556]	; (20f58 <nvs_init+0x2bc>)
   20d2a:	4b8a      	ldr	r3, [pc, #552]	; (20f54 <nvs_init+0x2b8>)
		LOG_ERR("Unable to get page info");
   20d2c:	498e      	ldr	r1, [pc, #568]	; (20f68 <nvs_init+0x2cc>)
   20d2e:	1ac0      	subs	r0, r0, r3
   20d30:	08c0      	lsrs	r0, r0, #3
   20d32:	0180      	lsls	r0, r0, #6
   20d34:	e7dc      	b.n	20cf0 <nvs_init+0x54>
	if (!fs->sector_size || fs->sector_size % info.size) {
   20d36:	89a3      	ldrh	r3, [r4, #12]
   20d38:	b12b      	cbz	r3, 20d46 <nvs_init+0xaa>
   20d3a:	9a06      	ldr	r2, [sp, #24]
   20d3c:	fbb3 f5f2 	udiv	r5, r3, r2
   20d40:	fb02 3515 	mls	r5, r2, r5, r3
   20d44:	b135      	cbz	r5, 20d54 <nvs_init+0xb8>
   20d46:	4884      	ldr	r0, [pc, #528]	; (20f58 <nvs_init+0x2bc>)
   20d48:	4b82      	ldr	r3, [pc, #520]	; (20f54 <nvs_init+0x2b8>)
		LOG_ERR("Invalid sector size");
   20d4a:	4988      	ldr	r1, [pc, #544]	; (20f6c <nvs_init+0x2d0>)
   20d4c:	1ac0      	subs	r0, r0, r3
   20d4e:	08c0      	lsrs	r0, r0, #3
   20d50:	0180      	lsls	r0, r0, #6
   20d52:	e7cd      	b.n	20cf0 <nvs_init+0x54>
	if (fs->sector_count < 2) {
   20d54:	89e3      	ldrh	r3, [r4, #14]
   20d56:	2b01      	cmp	r3, #1
   20d58:	d806      	bhi.n	20d68 <nvs_init+0xcc>
   20d5a:	487f      	ldr	r0, [pc, #508]	; (20f58 <nvs_init+0x2bc>)
   20d5c:	4b7d      	ldr	r3, [pc, #500]	; (20f54 <nvs_init+0x2b8>)
		LOG_ERR("Configuration error - sector count");
   20d5e:	4984      	ldr	r1, [pc, #528]	; (20f70 <nvs_init+0x2d4>)
   20d60:	1ac0      	subs	r0, r0, r3
   20d62:	08c0      	lsrs	r0, r0, #3
   20d64:	0180      	lsls	r0, r0, #6
   20d66:	e7c3      	b.n	20cf0 <nvs_init+0x54>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   20d68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   20d6a:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   20d6c:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   20d70:	f04f 32ff 	mov.w	r2, #4294967295
   20d74:	f04f 33ff 	mov.w	r3, #4294967295
   20d78:	4638      	mov	r0, r7
   20d7a:	f00e fd75 	bl	2f868 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20d7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   20d80:	2108      	movs	r1, #8
   20d82:	f016 fc7e 	bl	37682 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   20d86:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20d88:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   20d8a:	89e3      	ldrh	r3, [r4, #14]
   20d8c:	fa1f fa85 	uxth.w	sl, r5
   20d90:	4553      	cmp	r3, sl
   20d92:	d844      	bhi.n	20e1e <nvs_init+0x182>
	if (closed_sectors == fs->sector_count) {
   20d94:	89e3      	ldrh	r3, [r4, #14]
   20d96:	454b      	cmp	r3, r9
   20d98:	f000 80f0 	beq.w	20f7c <nvs_init+0x2e0>
	if (i == fs->sector_count) {
   20d9c:	459a      	cmp	sl, r3
   20d9e:	d10b      	bne.n	20db8 <nvs_init+0x11c>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   20da0:	9900      	ldr	r1, [sp, #0]
   20da2:	2308      	movs	r3, #8
   20da4:	4642      	mov	r2, r8
   20da6:	1b89      	subs	r1, r1, r6
   20da8:	4620      	mov	r0, r4
   20daa:	f016 fc04 	bl	375b6 <nvs_flash_cmp_const>
		if (!rc) {
   20dae:	b918      	cbnz	r0, 20db8 <nvs_init+0x11c>
			nvs_sector_advance(fs, &addr);
   20db0:	89e0      	ldrh	r0, [r4, #14]
   20db2:	4669      	mov	r1, sp
   20db4:	f016 fc89 	bl	376ca <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   20db8:	4669      	mov	r1, sp
   20dba:	4620      	mov	r0, r4
   20dbc:	f7ff fe6c 	bl	20a98 <nvs_recover_last_ate>
	if (rc) {
   20dc0:	4605      	mov	r5, r0
   20dc2:	2800      	cmp	r0, #0
   20dc4:	f040 80dc 	bne.w	20f80 <nvs_init+0x2e4>
	fs->ate_wra = addr;
   20dc8:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   20dca:	4a6a      	ldr	r2, [pc, #424]	; (20f74 <nvs_init+0x2d8>)
	fs->ate_wra = addr;
   20dcc:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   20dce:	4013      	ands	r3, r2
   20dd0:	60a3      	str	r3, [r4, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
   20dd2:	4691      	mov	r9, r2
	while (fs->ate_wra >= fs->data_wra) {
   20dd4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   20dd8:	4299      	cmp	r1, r3
   20dda:	d30e      	bcc.n	20dfa <nvs_init+0x15e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20ddc:	2308      	movs	r3, #8
   20dde:	aa01      	add	r2, sp, #4
   20de0:	4620      	mov	r0, r4
   20de2:	f016 fbb0 	bl	37546 <nvs_flash_rd>
		if (rc) {
   20de6:	b9c0      	cbnz	r0, 20e1a <nvs_init+0x17e>
   20de8:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   20dea:	f813 2b01 	ldrb.w	r2, [r3], #1
   20dee:	4590      	cmp	r8, r2
   20df0:	f040 8101 	bne.w	20ff6 <nvs_init+0x35a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   20df4:	3001      	adds	r0, #1
   20df6:	2808      	cmp	r0, #8
   20df8:	d1f7      	bne.n	20dea <nvs_init+0x14e>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   20dfa:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   20dfc:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   20dfe:	0c1b      	lsrs	r3, r3, #16
   20e00:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   20e02:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   20e04:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   20e06:	f016 fc60 	bl	376ca <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   20e0a:	89a3      	ldrh	r3, [r4, #12]
   20e0c:	9900      	ldr	r1, [sp, #0]
   20e0e:	4642      	mov	r2, r8
   20e10:	4620      	mov	r0, r4
   20e12:	f016 fbd0 	bl	375b6 <nvs_flash_cmp_const>
	if (rc < 0) {
   20e16:	2800      	cmp	r0, #0
   20e18:	da25      	bge.n	20e66 <nvs_init+0x1ca>
   20e1a:	4605      	mov	r5, r0
   20e1c:	e0b0      	b.n	20f80 <nvs_init+0x2e4>
		       (uint16_t)(fs->sector_size - ate_size);
   20e1e:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   20e20:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   20e22:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   20e24:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   20e28:	4642      	mov	r2, r8
   20e2a:	2308      	movs	r3, #8
   20e2c:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   20e2e:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   20e30:	f016 fbc1 	bl	375b6 <nvs_flash_cmp_const>
		if (rc) {
   20e34:	b178      	cbz	r0, 20e56 <nvs_init+0x1ba>
			nvs_sector_advance(fs, &addr);
   20e36:	89e0      	ldrh	r0, [r4, #14]
   20e38:	4669      	mov	r1, sp
   20e3a:	f016 fc46 	bl	376ca <nvs_sector_advance.isra.0>
			closed_sectors++;
   20e3e:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   20e42:	9900      	ldr	r1, [sp, #0]
   20e44:	2308      	movs	r3, #8
   20e46:	4642      	mov	r2, r8
   20e48:	4620      	mov	r0, r4
			closed_sectors++;
   20e4a:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   20e4e:	f016 fbb2 	bl	375b6 <nvs_flash_cmp_const>
			if (!rc) {
   20e52:	2800      	cmp	r0, #0
   20e54:	d09e      	beq.n	20d94 <nvs_init+0xf8>
	for (i = 0; i < fs->sector_count; i++) {
   20e56:	3501      	adds	r5, #1
   20e58:	e797      	b.n	20d8a <nvs_init+0xee>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   20e5a:	2a00      	cmp	r2, #0
   20e5c:	f000 80e3 	beq.w	21026 <nvs_init+0x38a>
				rc = -ESPIPE;
   20e60:	f06f 051c 	mvn.w	r5, #28
   20e64:	e08c      	b.n	20f80 <nvs_init+0x2e4>
	if (rc) {
   20e66:	d050      	beq.n	20f0a <nvs_init+0x26e>
		addr = fs->ate_wra + ate_size;
   20e68:	6863      	ldr	r3, [r4, #4]
   20e6a:	4433      	add	r3, r6
   20e6c:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   20e6e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   20e72:	9900      	ldr	r1, [sp, #0]
   20e74:	89a3      	ldrh	r3, [r4, #12]
   20e76:	b28a      	uxth	r2, r1
   20e78:	1b9b      	subs	r3, r3, r6
   20e7a:	429a      	cmp	r2, r3
   20e7c:	d320      	bcc.n	20ec0 <nvs_init+0x224>
   20e7e:	4b35      	ldr	r3, [pc, #212]	; (20f54 <nvs_init+0x2b8>)
   20e80:	4835      	ldr	r0, [pc, #212]	; (20f58 <nvs_init+0x2bc>)
		LOG_INF("No GC Done marker found: restarting gc");
   20e82:	493d      	ldr	r1, [pc, #244]	; (20f78 <nvs_init+0x2dc>)
   20e84:	1ac0      	subs	r0, r0, r3
   20e86:	08c0      	lsrs	r0, r0, #3
   20e88:	0180      	lsls	r0, r0, #6
   20e8a:	f040 0003 	orr.w	r0, r0, #3
   20e8e:	f016 faff 	bl	37490 <log_string_sync>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   20e92:	6861      	ldr	r1, [r4, #4]
   20e94:	4620      	mov	r0, r4
   20e96:	f016 fbb4 	bl	37602 <nvs_flash_erase_sector>
		if (rc) {
   20e9a:	2800      	cmp	r0, #0
   20e9c:	d1bd      	bne.n	20e1a <nvs_init+0x17e>
		fs->ate_wra &= ADDR_SECT_MASK;
   20e9e:	6862      	ldr	r2, [r4, #4]
   20ea0:	4934      	ldr	r1, [pc, #208]	; (20f74 <nvs_init+0x2d8>)
   20ea2:	ea02 0301 	and.w	r3, r2, r1
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   20ea6:	89a2      	ldrh	r2, [r4, #12]
   20ea8:	4413      	add	r3, r2
   20eaa:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   20eae:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   20eb0:	400b      	ands	r3, r1
   20eb2:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   20eb4:	4620      	mov	r0, r4
   20eb6:	f7ff fe21 	bl	20afc <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   20eba:	2800      	cmp	r0, #0
   20ebc:	d040      	beq.n	20f40 <nvs_init+0x2a4>
   20ebe:	e7ac      	b.n	20e1a <nvs_init+0x17e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20ec0:	2308      	movs	r3, #8
   20ec2:	aa03      	add	r2, sp, #12
   20ec4:	4620      	mov	r0, r4
   20ec6:	f016 fb3e 	bl	37546 <nvs_flash_rd>
			if (rc) {
   20eca:	2800      	cmp	r0, #0
   20ecc:	d1a5      	bne.n	20e1a <nvs_init+0x17e>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   20ece:	a903      	add	r1, sp, #12
   20ed0:	4620      	mov	r0, r4
   20ed2:	f016 fbe0 	bl	37696 <nvs_ate_valid>
   20ed6:	b138      	cbz	r0, 20ee8 <nvs_init+0x24c>
   20ed8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   20edc:	4543      	cmp	r3, r8
   20ede:	d103      	bne.n	20ee8 <nvs_init+0x24c>
			    (gc_done_ate.id == 0xffff) &&
   20ee0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   20ee4:	2b00      	cmp	r3, #0
   20ee6:	d06f      	beq.n	20fc8 <nvs_init+0x32c>
			addr += ate_size;
   20ee8:	9b00      	ldr	r3, [sp, #0]
   20eea:	4433      	add	r3, r6
   20eec:	9300      	str	r3, [sp, #0]
   20eee:	e7c0      	b.n	20e72 <nvs_init+0x1d6>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   20ef0:	1a5b      	subs	r3, r3, r1
   20ef2:	4642      	mov	r2, r8
   20ef4:	4620      	mov	r0, r4
   20ef6:	f016 fb5e 	bl	375b6 <nvs_flash_cmp_const>
		if (rc < 0) {
   20efa:	2800      	cmp	r0, #0
   20efc:	db8d      	blt.n	20e1a <nvs_init+0x17e>
		if (!rc) {
   20efe:	d008      	beq.n	20f12 <nvs_init+0x276>
		fs->data_wra += fs->flash_parameters->write_block_size;
   20f00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   20f02:	68a3      	ldr	r3, [r4, #8]
   20f04:	6812      	ldr	r2, [r2, #0]
   20f06:	4413      	add	r3, r2
   20f08:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   20f0a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   20f0e:	428b      	cmp	r3, r1
   20f10:	d8ee      	bhi.n	20ef0 <nvs_init+0x254>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   20f12:	6861      	ldr	r1, [r4, #4]
   20f14:	89a3      	ldrh	r3, [r4, #12]
   20f16:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   20f1a:	429a      	cmp	r2, r3
   20f1c:	d1cd      	bne.n	20eba <nvs_init+0x21e>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   20f1e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 20f74 <nvs_init+0x2d8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   20f22:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   20f24:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   20f28:	4293      	cmp	r3, r2
   20f2a:	d0c6      	beq.n	20eba <nvs_init+0x21e>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   20f2c:	4620      	mov	r0, r4
   20f2e:	f016 fb68 	bl	37602 <nvs_flash_erase_sector>
		if (rc) {
   20f32:	2800      	cmp	r0, #0
   20f34:	f47f af71 	bne.w	20e1a <nvs_init+0x17e>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   20f38:	6863      	ldr	r3, [r4, #4]
   20f3a:	ea03 0308 	and.w	r3, r3, r8
   20f3e:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   20f40:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   20f42:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   20f44:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   20f48:	42b3      	cmp	r3, r6
   20f4a:	d119      	bne.n	20f80 <nvs_init+0x2e4>
		rc = nvs_add_gc_done_ate(fs);
   20f4c:	4620      	mov	r0, r4
   20f4e:	f016 fc2b 	bl	377a8 <nvs_add_gc_done_ate>
   20f52:	e762      	b.n	20e1a <nvs_init+0x17e>
   20f54:	0003b448 	.word	0x0003b448
   20f58:	0003b508 	.word	0x0003b508
   20f5c:	0003d151 	.word	0x0003d151
   20f60:	0003d16d 	.word	0x0003d16d
   20f64:	0003d18f 	.word	0x0003d18f
   20f68:	0003d1ac 	.word	0x0003d1ac
   20f6c:	0003d1c4 	.word	0x0003d1c4
   20f70:	0003d1d8 	.word	0x0003d1d8
   20f74:	ffff0000 	.word	0xffff0000
   20f78:	0003d24a 	.word	0x0003d24a
		rc = -EDEADLK;
   20f7c:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   20f80:	4638      	mov	r0, r7
   20f82:	f00e fd71 	bl	2fa68 <z_impl_k_mutex_unlock>
	if (rc) {
   20f86:	2d00      	cmp	r5, #0
   20f88:	f47f aea3 	bne.w	20cd2 <nvs_init+0x36>
	fs->ready = true;
   20f8c:	2301      	movs	r3, #1
   20f8e:	7423      	strb	r3, [r4, #16]
   20f90:	4e27      	ldr	r6, [pc, #156]	; (21030 <nvs_init+0x394>)
   20f92:	4b28      	ldr	r3, [pc, #160]	; (21034 <nvs_init+0x398>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   20f94:	89e2      	ldrh	r2, [r4, #14]
   20f96:	4928      	ldr	r1, [pc, #160]	; (21038 <nvs_init+0x39c>)
   20f98:	1af6      	subs	r6, r6, r3
   20f9a:	08f6      	lsrs	r6, r6, #3
   20f9c:	01b6      	lsls	r6, r6, #6
   20f9e:	f046 0603 	orr.w	r6, r6, #3
   20fa2:	89a3      	ldrh	r3, [r4, #12]
   20fa4:	4630      	mov	r0, r6
   20fa6:	f016 fa73 	bl	37490 <log_string_sync>
	LOG_INF("alloc wra: %d, %x",
   20faa:	6862      	ldr	r2, [r4, #4]
   20fac:	4923      	ldr	r1, [pc, #140]	; (2103c <nvs_init+0x3a0>)
   20fae:	b293      	uxth	r3, r2
   20fb0:	4630      	mov	r0, r6
   20fb2:	0c12      	lsrs	r2, r2, #16
   20fb4:	f016 fa6c 	bl	37490 <log_string_sync>
	LOG_INF("data wra: %d, %x",
   20fb8:	68a2      	ldr	r2, [r4, #8]
   20fba:	4921      	ldr	r1, [pc, #132]	; (21040 <nvs_init+0x3a4>)
   20fbc:	b293      	uxth	r3, r2
   20fbe:	4630      	mov	r0, r6
   20fc0:	0c12      	lsrs	r2, r2, #16
   20fc2:	f016 fa65 	bl	37490 <log_string_sync>
	return 0;
   20fc6:	e684      	b.n	20cd2 <nvs_init+0x36>
   20fc8:	4b1a      	ldr	r3, [pc, #104]	; (21034 <nvs_init+0x398>)
   20fca:	4819      	ldr	r0, [pc, #100]	; (21030 <nvs_init+0x394>)
			LOG_INF("GC Done marker found");
   20fcc:	491d      	ldr	r1, [pc, #116]	; (21044 <nvs_init+0x3a8>)
   20fce:	1ac0      	subs	r0, r0, r3
   20fd0:	08c0      	lsrs	r0, r0, #3
   20fd2:	0180      	lsls	r0, r0, #6
   20fd4:	f040 0003 	orr.w	r0, r0, #3
   20fd8:	f016 fa5a 	bl	37490 <log_string_sync>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   20fdc:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   20fde:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   20fe0:	0c1b      	lsrs	r3, r3, #16
   20fe2:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   20fe4:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   20fe6:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   20fe8:	f016 fb6f 	bl	376ca <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   20fec:	9900      	ldr	r1, [sp, #0]
   20fee:	4620      	mov	r0, r4
   20ff0:	f016 fb07 	bl	37602 <nvs_flash_erase_sector>
			goto end;
   20ff4:	e761      	b.n	20eba <nvs_init+0x21e>
		if (nvs_ate_valid(fs, &last_ate)) {
   20ff6:	a901      	add	r1, sp, #4
   20ff8:	4620      	mov	r0, r4
   20ffa:	f016 fb4c 	bl	37696 <nvs_ate_valid>
   20ffe:	f8d4 a004 	ldr.w	sl, [r4, #4]
   21002:	b180      	cbz	r0, 21026 <nvs_init+0x38a>
			fs->data_wra = addr & ADDR_SECT_MASK;
   21004:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   21006:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   2100a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2100e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   21010:	ea03 0309 	and.w	r3, r3, r9
   21014:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   21016:	4411      	add	r1, r2
   21018:	f016 fb33 	bl	37682 <nvs_al_size.isra.0>
   2101c:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2101e:	4553      	cmp	r3, sl
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   21020:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   21022:	f43f af1a 	beq.w	20e5a <nvs_init+0x1be>
		fs->ate_wra -= ate_size;
   21026:	ebaa 0306 	sub.w	r3, sl, r6
   2102a:	6063      	str	r3, [r4, #4]
   2102c:	e6d2      	b.n	20dd4 <nvs_init+0x138>
   2102e:	bf00      	nop
   21030:	0003b508 	.word	0x0003b508
   21034:	0003b448 	.word	0x0003b448
   21038:	0003d1fb 	.word	0x0003d1fb
   2103c:	0003d212 	.word	0x0003d212
   21040:	0003d224 	.word	0x0003d224
   21044:	0003d235 	.word	0x0003d235

00021048 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   21048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2104c:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   2104e:	7c03      	ldrb	r3, [r0, #16]
{
   21050:	b089      	sub	sp, #36	; 0x24
   21052:	4604      	mov	r4, r0
   21054:	4689      	mov	r9, r1
   21056:	4690      	mov	r8, r2
	if (!fs->ready) {
   21058:	b97b      	cbnz	r3, 2107a <nvs_write+0x32>
   2105a:	4b68      	ldr	r3, [pc, #416]	; (211fc <nvs_write+0x1b4>)
   2105c:	4868      	ldr	r0, [pc, #416]	; (21200 <nvs_write+0x1b8>)
		LOG_ERR("NVS not initialized");
   2105e:	4969      	ldr	r1, [pc, #420]	; (21204 <nvs_write+0x1bc>)
   21060:	1ac0      	subs	r0, r0, r3
   21062:	08c0      	lsrs	r0, r0, #3
   21064:	0180      	lsls	r0, r0, #6
   21066:	f040 0001 	orr.w	r0, r0, #1
   2106a:	f016 fa11 	bl	37490 <log_string_sync>
		return -EACCES;
   2106e:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   21072:	4628      	mov	r0, r5
   21074:	b009      	add	sp, #36	; 0x24
   21076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2107a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2107c:	2108      	movs	r1, #8
   2107e:	4618      	mov	r0, r3
   21080:	f016 faff 	bl	37682 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   21084:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   21086:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   21088:	4618      	mov	r0, r3
   2108a:	f016 fafa 	bl	37682 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2108e:	89a3      	ldrh	r3, [r4, #12]
   21090:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   21094:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   21096:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   21098:	f200 80ab 	bhi.w	211f2 <nvs_write+0x1aa>
   2109c:	b116      	cbz	r6, 210a4 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
   2109e:	2a00      	cmp	r2, #0
   210a0:	f000 80a7 	beq.w	211f2 <nvs_write+0x1aa>
	wlk_addr = fs->ate_wra;
   210a4:	6863      	ldr	r3, [r4, #4]
   210a6:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   210a8:	aa04      	add	r2, sp, #16
   210aa:	a903      	add	r1, sp, #12
   210ac:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   210ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   210b2:	f016 fb8e 	bl	377d2 <nvs_prev_ate>
		if (rc) {
   210b6:	4605      	mov	r5, r0
   210b8:	2800      	cmp	r0, #0
   210ba:	d1da      	bne.n	21072 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   210bc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   210c0:	454b      	cmp	r3, r9
   210c2:	d005      	beq.n	210d0 <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
   210c4:	6862      	ldr	r2, [r4, #4]
   210c6:	9b03      	ldr	r3, [sp, #12]
   210c8:	429a      	cmp	r2, r3
   210ca:	d1ed      	bne.n	210a8 <nvs_write+0x60>
		if (len == 0) {
   210cc:	b9e6      	cbnz	r6, 21108 <nvs_write+0xc0>
   210ce:	e7d0      	b.n	21072 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   210d0:	a904      	add	r1, sp, #16
   210d2:	4620      	mov	r0, r4
   210d4:	f016 fadf 	bl	37696 <nvs_ate_valid>
   210d8:	2800      	cmp	r0, #0
   210da:	d0f3      	beq.n	210c4 <nvs_write+0x7c>
		if (len == 0) {
   210dc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   210e0:	b186      	cbz	r6, 21104 <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
   210e2:	429e      	cmp	r6, r3
   210e4:	d110      	bne.n	21108 <nvs_write+0xc0>
		rd_addr += wlk_ate.offset;
   210e6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   210ea:	ea4f 411b 	mov.w	r1, fp, lsr #16
   210ee:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   210f0:	4401      	add	r1, r0
   210f2:	4633      	mov	r3, r6
   210f4:	4642      	mov	r2, r8
   210f6:	4620      	mov	r0, r4
   210f8:	f016 fa33 	bl	37562 <nvs_flash_block_cmp>
			if (rc <= 0) {
   210fc:	2800      	cmp	r0, #0
   210fe:	dc03      	bgt.n	21108 <nvs_write+0xc0>
   21100:	4605      	mov	r5, r0
   21102:	e7b6      	b.n	21072 <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
   21104:	2b00      	cmp	r3, #0
   21106:	d0b4      	beq.n	21072 <nvs_write+0x2a>
	if (data_size) {
   21108:	2f00      	cmp	r7, #0
   2110a:	d13f      	bne.n	2118c <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   2110c:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   21110:	f04f 32ff 	mov.w	r2, #4294967295
   21114:	f04f 33ff 	mov.w	r3, #4294967295
   21118:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
   2111a:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 21208 <nvs_write+0x1c0>
   2111e:	f00e fba3 	bl	2f868 <z_impl_k_mutex_lock>
	gc_count = 0;
   21122:	2200      	movs	r2, #0
		if (gc_count == fs->sector_count) {
   21124:	89e3      	ldrh	r3, [r4, #14]
   21126:	429a      	cmp	r2, r3
   21128:	d060      	beq.n	211ec <nvs_write+0x1a4>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   2112a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   2112e:	1878      	adds	r0, r7, r1
   21130:	4283      	cmp	r3, r0
   21132:	d32e      	bcc.n	21192 <nvs_write+0x14a>
	entry.part = 0xff;
   21134:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   21136:	a806      	add	r0, sp, #24
	entry.id = id;
   21138:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2113c:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
   21140:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   21144:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   21148:	f016 fa92 	bl	37670 <nvs_ate_crc8_update>
	if (!len) {
   2114c:	b136      	cbz	r6, 2115c <nvs_write+0x114>
   2114e:	68a1      	ldr	r1, [r4, #8]
   21150:	4633      	mov	r3, r6
   21152:	4642      	mov	r2, r8
   21154:	4620      	mov	r0, r4
   21156:	f016 fae1 	bl	3771c <nvs_flash_al_wrt.part.0>
   2115a:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   2115c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2115e:	4631      	mov	r1, r6
   21160:	f016 fa8f 	bl	37682 <nvs_al_size.isra.0>
   21164:	68a3      	ldr	r3, [r4, #8]
   21166:	4403      	add	r3, r0
   21168:	60a3      	str	r3, [r4, #8]
	if (rc) {
   2116a:	2d00      	cmp	r5, #0
   2116c:	d144      	bne.n	211f8 <nvs_write+0x1b0>
	rc = nvs_flash_ate_wrt(fs, &entry);
   2116e:	a906      	add	r1, sp, #24
   21170:	4620      	mov	r0, r4
   21172:	f016 fb08 	bl	37786 <nvs_flash_ate_wrt>
	if (rc) {
   21176:	4605      	mov	r5, r0
   21178:	2800      	cmp	r0, #0
   2117a:	d13d      	bne.n	211f8 <nvs_write+0x1b0>
	rc = len;
   2117c:	4633      	mov	r3, r6
   2117e:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   21180:	4650      	mov	r0, sl
   21182:	f00e fc71 	bl	2fa68 <z_impl_k_mutex_unlock>
	return rc;
   21186:	9b01      	ldr	r3, [sp, #4]
   21188:	461d      	mov	r5, r3
   2118a:	e772      	b.n	21072 <nvs_write+0x2a>
		required_space = data_size + ate_size;
   2118c:	4457      	add	r7, sl
   2118e:	b2bf      	uxth	r7, r7
   21190:	e7bc      	b.n	2110c <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   21192:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   21194:	9201      	str	r2, [sp, #4]
   21196:	2108      	movs	r1, #8
   21198:	f016 fa73 	bl	37682 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   2119c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   211a0:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   211a4:	2100      	movs	r1, #0
   211a6:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   211aa:	1819      	adds	r1, r3, r0
   211ac:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   211b0:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   211b2:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   211b6:	440b      	add	r3, r1
   211b8:	1a18      	subs	r0, r3, r0
   211ba:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   211bc:	a806      	add	r0, sp, #24
   211be:	f016 fa57 	bl	37670 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   211c2:	a906      	add	r1, sp, #24
   211c4:	4620      	mov	r0, r4
   211c6:	f016 fade 	bl	37786 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   211ca:	89e0      	ldrh	r0, [r4, #14]
   211cc:	1d21      	adds	r1, r4, #4
   211ce:	f016 fa7c 	bl	376ca <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   211d2:	6863      	ldr	r3, [r4, #4]
   211d4:	ea03 030b 	and.w	r3, r3, fp
   211d8:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   211da:	4620      	mov	r0, r4
   211dc:	f7ff fc8e 	bl	20afc <nvs_gc>
		if (rc) {
   211e0:	4603      	mov	r3, r0
   211e2:	2800      	cmp	r0, #0
   211e4:	d1cb      	bne.n	2117e <nvs_write+0x136>
		gc_count++;
   211e6:	9a01      	ldr	r2, [sp, #4]
   211e8:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
   211ea:	e79b      	b.n	21124 <nvs_write+0xdc>
			rc = -ENOSPC;
   211ec:	f06f 031b 	mvn.w	r3, #27
   211f0:	e7c5      	b.n	2117e <nvs_write+0x136>
		return -EINVAL;
   211f2:	f06f 0515 	mvn.w	r5, #21
   211f6:	e73c      	b.n	21072 <nvs_write+0x2a>
			if (rc) {
   211f8:	462b      	mov	r3, r5
   211fa:	e7c0      	b.n	2117e <nvs_write+0x136>
   211fc:	0003b448 	.word	0x0003b448
   21200:	0003b508 	.word	0x0003b508
   21204:	0003d13d 	.word	0x0003d13d
   21208:	ffff0000 	.word	0xffff0000

0002120c <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   2120c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   21210:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   21212:	7c03      	ldrb	r3, [r0, #16]
{
   21214:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   21218:	4604      	mov	r4, r0
   2121a:	460f      	mov	r7, r1
   2121c:	4690      	mov	r8, r2
	if (!fs->ready) {
   2121e:	b973      	cbnz	r3, 2123e <nvs_read_hist+0x32>
   21220:	4b2b      	ldr	r3, [pc, #172]	; (212d0 <nvs_read_hist+0xc4>)
   21222:	482c      	ldr	r0, [pc, #176]	; (212d4 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
   21224:	492c      	ldr	r1, [pc, #176]	; (212d8 <nvs_read_hist+0xcc>)
   21226:	1ac0      	subs	r0, r0, r3
   21228:	08c0      	lsrs	r0, r0, #3
   2122a:	0180      	lsls	r0, r0, #6
   2122c:	f040 0001 	orr.w	r0, r0, #1
   21230:	f016 f92e 	bl	37490 <log_string_sync>
		return -EACCES;
   21234:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   21238:	b004      	add	sp, #16
   2123a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2123e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   21240:	2108      	movs	r1, #8
   21242:	f016 fa1e 	bl	37682 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   21246:	89a3      	ldrh	r3, [r4, #12]
   21248:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   2124c:	429e      	cmp	r6, r3
   2124e:	d83c      	bhi.n	212ca <nvs_read_hist+0xbe>
	wlk_addr = fs->ate_wra;
   21250:	6863      	ldr	r3, [r4, #4]
   21252:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   21254:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   21258:	aa02      	add	r2, sp, #8
   2125a:	a901      	add	r1, sp, #4
   2125c:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   2125e:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   21260:	f016 fab7 	bl	377d2 <nvs_prev_ate>
		if (rc) {
   21264:	2800      	cmp	r0, #0
   21266:	d1e7      	bne.n	21238 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   21268:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2126c:	42bb      	cmp	r3, r7
   2126e:	d108      	bne.n	21282 <nvs_read_hist+0x76>
   21270:	a902      	add	r1, sp, #8
   21272:	4620      	mov	r0, r4
   21274:	f016 fa0f 	bl	37696 <nvs_ate_valid>
   21278:	b118      	cbz	r0, 21282 <nvs_read_hist+0x76>
			cnt_his++;
   2127a:	f10a 0a01 	add.w	sl, sl, #1
   2127e:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   21282:	6862      	ldr	r2, [r4, #4]
   21284:	9b01      	ldr	r3, [sp, #4]
   21286:	429a      	cmp	r2, r3
   21288:	d018      	beq.n	212bc <nvs_read_hist+0xb0>
	while (cnt_his <= cnt) {
   2128a:	45d1      	cmp	r9, sl
   2128c:	d2e4      	bcs.n	21258 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   2128e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   21292:	b1bb      	cbz	r3, 212c4 <nvs_read_hist+0xb8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   21294:	45d1      	cmp	r9, sl
   21296:	d815      	bhi.n	212c4 <nvs_read_hist+0xb8>
	rd_addr += wlk_ate.offset;
   21298:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   2129c:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   2129e:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   212a0:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   212a4:	bf28      	it	cs
   212a6:	4633      	movcs	r3, r6
   212a8:	4642      	mov	r2, r8
   212aa:	4429      	add	r1, r5
   212ac:	4620      	mov	r0, r4
   212ae:	f016 f94a 	bl	37546 <nvs_flash_rd>
	if (rc) {
   212b2:	2800      	cmp	r0, #0
   212b4:	d1c0      	bne.n	21238 <nvs_read_hist+0x2c>
	return wlk_ate.len;
   212b6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   212ba:	e7bd      	b.n	21238 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   212bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   212c0:	42bb      	cmp	r3, r7
   212c2:	d0e4      	beq.n	2128e <nvs_read_hist+0x82>
		return -ENOENT;
   212c4:	f06f 0001 	mvn.w	r0, #1
   212c8:	e7b6      	b.n	21238 <nvs_read_hist+0x2c>
		return -EINVAL;
   212ca:	f06f 0015 	mvn.w	r0, #21
   212ce:	e7b3      	b.n	21238 <nvs_read_hist+0x2c>
   212d0:	0003b448 	.word	0x0003b448
   212d4:	0003b508 	.word	0x0003b508
   212d8:	0003d13d 	.word	0x0003d13d

000212dc <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   212dc:	4b0c      	ldr	r3, [pc, #48]	; (21310 <flash_area_open+0x34>)
   212de:	681b      	ldr	r3, [r3, #0]
{
   212e0:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   212e2:	b173      	cbz	r3, 21302 <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   212e4:	4a0b      	ldr	r2, [pc, #44]	; (21314 <flash_area_open+0x38>)
   212e6:	6815      	ldr	r5, [r2, #0]
   212e8:	2200      	movs	r2, #0
   212ea:	42aa      	cmp	r2, r5
   212ec:	db02      	blt.n	212f4 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   212ee:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   212f2:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   212f4:	461c      	mov	r4, r3
   212f6:	f813 6b10 	ldrb.w	r6, [r3], #16
   212fa:	4286      	cmp	r6, r0
   212fc:	d004      	beq.n	21308 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   212fe:	3201      	adds	r2, #1
   21300:	e7f3      	b.n	212ea <flash_area_open+0xe>
		return -EACCES;
   21302:	f06f 000c 	mvn.w	r0, #12
   21306:	e7f4      	b.n	212f2 <flash_area_open+0x16>
	*fap = area;
   21308:	600c      	str	r4, [r1, #0]
	return 0;
   2130a:	2000      	movs	r0, #0
   2130c:	e7f1      	b.n	212f2 <flash_area_open+0x16>
   2130e:	bf00      	nop
   21310:	2000055c 	.word	0x2000055c
   21314:	0003b8cc 	.word	0x0003b8cc

00021318 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   21318:	b570      	push	{r4, r5, r6, lr}
   2131a:	b088      	sub	sp, #32
   2131c:	4605      	mov	r5, r0
   2131e:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   21320:	b2c0      	uxtb	r0, r0
   21322:	4669      	mov	r1, sp
{
   21324:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   21326:	f7ff ffd9 	bl	212dc <flash_area_open>
	if (rc < 0 || fa == NULL) {
   2132a:	2800      	cmp	r0, #0
   2132c:	db1f      	blt.n	2136e <flash_area_get_sectors+0x56>
   2132e:	9b00      	ldr	r3, [sp, #0]
   21330:	b1eb      	cbz	r3, 2136e <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   21332:	685a      	ldr	r2, [r3, #4]
   21334:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   21336:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   21338:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   2133a:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
   2133c:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   2133e:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   21342:	2200      	movs	r2, #0
	cb_data->status = 0;
   21344:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   21348:	9205      	str	r2, [sp, #20]
   2134a:	f00d fd59 	bl	2ee00 <z_impl_device_get_binding>
   2134e:	4605      	mov	r5, r0
	flash_area_close(fa);
   21350:	9800      	ldr	r0, [sp, #0]
   21352:	f016 fa95 	bl	37880 <flash_area_close>
	if (flash_dev == NULL) {
   21356:	b16d      	cbz	r5, 21374 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   21358:	4628      	mov	r0, r5
   2135a:	4908      	ldr	r1, [pc, #32]	; (2137c <flash_area_get_sectors+0x64>)
   2135c:	aa01      	add	r2, sp, #4
   2135e:	f018 fad0 	bl	39902 <flash_page_foreach>
	if (cb_data->status == 0) {
   21362:	9807      	ldr	r0, [sp, #28]
   21364:	b908      	cbnz	r0, 2136a <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   21366:	9b05      	ldr	r3, [sp, #20]
   21368:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   2136a:	b008      	add	sp, #32
   2136c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2136e:	f06f 0015 	mvn.w	r0, #21
   21372:	e7fa      	b.n	2136a <flash_area_get_sectors+0x52>
		return -ENODEV;
   21374:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   21378:	e7f7      	b.n	2136a <flash_area_get_sectors+0x52>
   2137a:	bf00      	nop
   2137c:	000379a3 	.word	0x000379a3

00021380 <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   21380:	6842      	ldr	r2, [r0, #4]
   21382:	680b      	ldr	r3, [r1, #0]
   21384:	4293      	cmp	r3, r2
{
   21386:	b510      	push	{r4, lr}
   21388:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   2138a:	d90c      	bls.n	213a6 <find_flash_total_size+0x26>
   2138c:	4b08      	ldr	r3, [pc, #32]	; (213b0 <find_flash_total_size+0x30>)
   2138e:	4809      	ldr	r0, [pc, #36]	; (213b4 <find_flash_total_size+0x34>)
		LOG_ERR("Buffer size is bigger than page");
   21390:	4909      	ldr	r1, [pc, #36]	; (213b8 <find_flash_total_size+0x38>)
   21392:	1ac0      	subs	r0, r0, r3
   21394:	08c0      	lsrs	r0, r0, #3
   21396:	0180      	lsls	r0, r0, #6
   21398:	f040 0001 	orr.w	r0, r0, #1
   2139c:	f016 f878 	bl	37490 <log_string_sync>
		ctx->total_size = 0;
   213a0:	2000      	movs	r0, #0
   213a2:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   213a4:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   213a6:	684b      	ldr	r3, [r1, #4]
   213a8:	4413      	add	r3, r2
   213aa:	604b      	str	r3, [r1, #4]
	return true;
   213ac:	2001      	movs	r0, #1
   213ae:	e7f9      	b.n	213a4 <find_flash_total_size+0x24>
   213b0:	0003b448 	.word	0x0003b448
   213b4:	0003b448 	.word	0x0003b448
   213b8:	0003d278 	.word	0x0003d278

000213bc <stream_flash_erase_page>:
{
   213bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   213c0:	4605      	mov	r5, r0
   213c2:	b085      	sub	sp, #20
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   213c4:	68c0      	ldr	r0, [r0, #12]
   213c6:	aa01      	add	r2, sp, #4
   213c8:	f018 fa97 	bl	398fa <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   213cc:	4604      	mov	r4, r0
   213ce:	b170      	cbz	r0, 213ee <stream_flash_erase_page+0x32>
   213d0:	481b      	ldr	r0, [pc, #108]	; (21440 <stream_flash_erase_page+0x84>)
   213d2:	4b1c      	ldr	r3, [pc, #112]	; (21444 <stream_flash_erase_page+0x88>)
		LOG_ERR("Error %d while getting page info", rc);
   213d4:	491c      	ldr	r1, [pc, #112]	; (21448 <stream_flash_erase_page+0x8c>)
   213d6:	1ac0      	subs	r0, r0, r3
   213d8:	08c0      	lsrs	r0, r0, #3
   213da:	0180      	lsls	r0, r0, #6
   213dc:	4622      	mov	r2, r4
		LOG_ERR("Error %d while erasing page", rc);
   213de:	f040 0001 	orr.w	r0, r0, #1
   213e2:	f016 f855 	bl	37490 <log_string_sync>
}
   213e6:	4620      	mov	r0, r4
   213e8:	b005      	add	sp, #20
   213ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   213ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
   213f2:	6a2b      	ldr	r3, [r5, #32]
   213f4:	4543      	cmp	r3, r8
   213f6:	d0f6      	beq.n	213e6 <stream_flash_erase_page+0x2a>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   213f8:	68ee      	ldr	r6, [r5, #12]
   213fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
	const struct flash_driver_api *api =
   213fe:	68b7      	ldr	r7, [r6, #8]
	if (api->write_protection != NULL) {
   21400:	68fb      	ldr	r3, [r7, #12]
   21402:	b95b      	cbnz	r3, 2141c <stream_flash_erase_page+0x60>
	rc = api->erase(dev, offset, size);
   21404:	68bb      	ldr	r3, [r7, #8]
   21406:	464a      	mov	r2, r9
   21408:	4641      	mov	r1, r8
   2140a:	4630      	mov	r0, r6
   2140c:	4798      	blx	r3
	if (api->write_protection != NULL) {
   2140e:	68fb      	ldr	r3, [r7, #12]
	rc = api->erase(dev, offset, size);
   21410:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   21412:	b98b      	cbnz	r3, 21438 <stream_flash_erase_page+0x7c>
	if (rc != 0) {
   21414:	b944      	cbnz	r4, 21428 <stream_flash_erase_page+0x6c>
		ctx->last_erased_page_start_offset = page.start_offset;
   21416:	9b01      	ldr	r3, [sp, #4]
   21418:	622b      	str	r3, [r5, #32]
   2141a:	e7e4      	b.n	213e6 <stream_flash_erase_page+0x2a>
		rc = api->write_protection(dev, false);
   2141c:	4601      	mov	r1, r0
   2141e:	4630      	mov	r0, r6
   21420:	4798      	blx	r3
		if (rc) {
   21422:	4604      	mov	r4, r0
   21424:	2800      	cmp	r0, #0
   21426:	d0ed      	beq.n	21404 <stream_flash_erase_page+0x48>
   21428:	4805      	ldr	r0, [pc, #20]	; (21440 <stream_flash_erase_page+0x84>)
   2142a:	4b06      	ldr	r3, [pc, #24]	; (21444 <stream_flash_erase_page+0x88>)
		LOG_ERR("Error %d while erasing page", rc);
   2142c:	4907      	ldr	r1, [pc, #28]	; (2144c <stream_flash_erase_page+0x90>)
   2142e:	1ac0      	subs	r0, r0, r3
   21430:	08c0      	lsrs	r0, r0, #3
   21432:	0180      	lsls	r0, r0, #6
   21434:	4622      	mov	r2, r4
   21436:	e7d2      	b.n	213de <stream_flash_erase_page+0x22>
		(void) api->write_protection(dev, true);
   21438:	2101      	movs	r1, #1
   2143a:	4630      	mov	r0, r6
   2143c:	4798      	blx	r3
   2143e:	e7e9      	b.n	21414 <stream_flash_erase_page+0x58>
   21440:	0003b448 	.word	0x0003b448
   21444:	0003b448 	.word	0x0003b448
   21448:	0003d298 	.word	0x0003d298
   2144c:	0003d2b9 	.word	0x0003d2b9

00021450 <flash_sync>:
{
   21450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (ctx->buf_bytes == 0) {
   21454:	6884      	ldr	r4, [r0, #8]
{
   21456:	4605      	mov	r5, r0
	if (ctx->buf_bytes == 0) {
   21458:	b1a4      	cbz	r4, 21484 <flash_sync+0x34>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   2145a:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
   2145e:	3c01      	subs	r4, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   21460:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   21462:	19a1      	adds	r1, r4, r6
   21464:	f7ff ffaa 	bl	213bc <stream_flash_erase_page>
		if (rc < 0) {
   21468:	1e04      	subs	r4, r0, #0
   2146a:	da0e      	bge.n	2148a <flash_sync+0x3a>
   2146c:	4b45      	ldr	r3, [pc, #276]	; (21584 <flash_sync+0x134>)
   2146e:	4846      	ldr	r0, [pc, #280]	; (21588 <flash_sync+0x138>)
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   21470:	4946      	ldr	r1, [pc, #280]	; (2158c <flash_sync+0x13c>)
   21472:	1ac0      	subs	r0, r0, r3
   21474:	08c0      	lsrs	r0, r0, #3
   21476:	0180      	lsls	r0, r0, #6
   21478:	4633      	mov	r3, r6
   2147a:	4622      	mov	r2, r4
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   2147c:	f040 0001 	orr.w	r0, r0, #1
   21480:	f016 f806 	bl	37490 <log_string_sync>
}
   21484:	4620      	mov	r0, r4
   21486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fill_length = flash_get_write_block_size(ctx->fdev);
   2148a:	68e8      	ldr	r0, [r5, #12]
   2148c:	f016 faa7 	bl	379de <flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
   21490:	68aa      	ldr	r2, [r5, #8]
   21492:	fbb2 f4f0 	udiv	r4, r2, r0
   21496:	fb00 2414 	mls	r4, r0, r4, r2
   2149a:	b15c      	cbz	r4, 214b4 <flash_sync+0x64>
		fill_length -= ctx->buf_bytes % fill_length;
   2149c:	1b04      	subs	r4, r0, r4
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   2149e:	68e8      	ldr	r0, [r5, #12]
	return api->get_parameters(dev);
   214a0:	6883      	ldr	r3, [r0, #8]
   214a2:	691b      	ldr	r3, [r3, #16]
   214a4:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   214a6:	682f      	ldr	r7, [r5, #0]
   214a8:	68ab      	ldr	r3, [r5, #8]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   214aa:	7901      	ldrb	r1, [r0, #4]
   214ac:	4622      	mov	r2, r4
   214ae:	18f8      	adds	r0, r7, r3
   214b0:	f019 f862 	bl	3a578 <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   214b4:	68af      	ldr	r7, [r5, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   214b6:	f8d5 800c 	ldr.w	r8, [r5, #12]
   214ba:	f8d5 a000 	ldr.w	sl, [r5]
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   214be:	4427      	add	r7, r4
	const struct flash_driver_api *api =
   214c0:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (api->write_protection != NULL) {
   214c4:	f8d9 300c 	ldr.w	r3, [r9, #12]
   214c8:	b9ab      	cbnz	r3, 214f6 <flash_sync+0xa6>
	rc = api->write(dev, offset, data, len);
   214ca:	f8d9 4004 	ldr.w	r4, [r9, #4]
   214ce:	463b      	mov	r3, r7
   214d0:	4652      	mov	r2, sl
   214d2:	4631      	mov	r1, r6
   214d4:	4640      	mov	r0, r8
   214d6:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   214d8:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->write(dev, offset, data, len);
   214dc:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   214de:	b9cb      	cbnz	r3, 21514 <flash_sync+0xc4>
	if (rc != 0) {
   214e0:	b97c      	cbnz	r4, 21502 <flash_sync+0xb2>
	if (ctx->callback) {
   214e2:	69eb      	ldr	r3, [r5, #28]
   214e4:	2b00      	cmp	r3, #0
   214e6:	d135      	bne.n	21554 <flash_sync+0x104>
	ctx->bytes_written += ctx->buf_bytes;
   214e8:	692b      	ldr	r3, [r5, #16]
   214ea:	68aa      	ldr	r2, [r5, #8]
   214ec:	4413      	add	r3, r2
   214ee:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
   214f0:	2300      	movs	r3, #0
   214f2:	60ab      	str	r3, [r5, #8]
	return rc;
   214f4:	e7c6      	b.n	21484 <flash_sync+0x34>
		rc = api->write_protection(dev, false);
   214f6:	2100      	movs	r1, #0
   214f8:	4640      	mov	r0, r8
   214fa:	4798      	blx	r3
		if (rc) {
   214fc:	4604      	mov	r4, r0
   214fe:	2800      	cmp	r0, #0
   21500:	d0e3      	beq.n	214ca <flash_sync+0x7a>
   21502:	4b20      	ldr	r3, [pc, #128]	; (21584 <flash_sync+0x134>)
   21504:	4820      	ldr	r0, [pc, #128]	; (21588 <flash_sync+0x138>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   21506:	4922      	ldr	r1, [pc, #136]	; (21590 <flash_sync+0x140>)
   21508:	1ac0      	subs	r0, r0, r3
   2150a:	08c0      	lsrs	r0, r0, #3
   2150c:	0180      	lsls	r0, r0, #6
   2150e:	4633      	mov	r3, r6
   21510:	4622      	mov	r2, r4
   21512:	e7b3      	b.n	2147c <flash_sync+0x2c>
		(void) api->write_protection(dev, true);
   21514:	2101      	movs	r1, #1
   21516:	4640      	mov	r0, r8
   21518:	4798      	blx	r3
   2151a:	e7e1      	b.n	214e0 <flash_sync+0x90>
			ctx->buf[i] = ~ctx->buf[i];
   2151c:	5c53      	ldrb	r3, [r2, r1]
   2151e:	43db      	mvns	r3, r3
   21520:	5453      	strb	r3, [r2, r1]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21522:	3101      	adds	r1, #1
   21524:	68ab      	ldr	r3, [r5, #8]
   21526:	682a      	ldr	r2, [r5, #0]
   21528:	428b      	cmp	r3, r1
   2152a:	d8f7      	bhi.n	2151c <flash_sync+0xcc>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   2152c:	68e8      	ldr	r0, [r5, #12]
	return api->read(dev, offset, data, len);
   2152e:	6881      	ldr	r1, [r0, #8]
   21530:	680f      	ldr	r7, [r1, #0]
   21532:	4631      	mov	r1, r6
   21534:	47b8      	blx	r7
		if (rc != 0) {
   21536:	4607      	mov	r7, r0
   21538:	b170      	cbz	r0, 21558 <flash_sync+0x108>
   2153a:	4812      	ldr	r0, [pc, #72]	; (21584 <flash_sync+0x134>)
   2153c:	4b12      	ldr	r3, [pc, #72]	; (21588 <flash_sync+0x138>)
			LOG_ERR("flash read failed: %d", rc);
   2153e:	4915      	ldr	r1, [pc, #84]	; (21594 <flash_sync+0x144>)
   21540:	1a1b      	subs	r3, r3, r0
   21542:	08db      	lsrs	r3, r3, #3
   21544:	019b      	lsls	r3, r3, #6
   21546:	463a      	mov	r2, r7
   21548:	f043 0001 	orr.w	r0, r3, #1
   2154c:	f015 ffa0 	bl	37490 <log_string_sync>
			return rc;
   21550:	463c      	mov	r4, r7
   21552:	e797      	b.n	21484 <flash_sync+0x34>
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21554:	4621      	mov	r1, r4
   21556:	e7e5      	b.n	21524 <flash_sync+0xd4>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   21558:	4632      	mov	r2, r6
   2155a:	69eb      	ldr	r3, [r5, #28]
   2155c:	68a9      	ldr	r1, [r5, #8]
   2155e:	6828      	ldr	r0, [r5, #0]
   21560:	4798      	blx	r3
		if (rc != 0) {
   21562:	4606      	mov	r6, r0
   21564:	2800      	cmp	r0, #0
   21566:	d0bf      	beq.n	214e8 <flash_sync+0x98>
   21568:	4806      	ldr	r0, [pc, #24]	; (21584 <flash_sync+0x134>)
   2156a:	4b07      	ldr	r3, [pc, #28]	; (21588 <flash_sync+0x138>)
			LOG_ERR("callback failed: %d", rc);
   2156c:	490a      	ldr	r1, [pc, #40]	; (21598 <flash_sync+0x148>)
   2156e:	1a1b      	subs	r3, r3, r0
   21570:	08db      	lsrs	r3, r3, #3
   21572:	019b      	lsls	r3, r3, #6
   21574:	4632      	mov	r2, r6
   21576:	f043 0001 	orr.w	r0, r3, #1
   2157a:	f015 ff89 	bl	37490 <log_string_sync>
			return rc;
   2157e:	4634      	mov	r4, r6
   21580:	e780      	b.n	21484 <flash_sync+0x34>
   21582:	bf00      	nop
   21584:	0003b448 	.word	0x0003b448
   21588:	0003b448 	.word	0x0003b448
   2158c:	0003d2d5 	.word	0x0003d2d5
   21590:	0003d303 	.word	0x0003d303
   21594:	0003d327 	.word	0x0003d327
   21598:	0003d33d 	.word	0x0003d33d

0002159c <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   2159c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   215a0:	460d      	mov	r5, r1
   215a2:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   215a6:	4691      	mov	r9, r2
   215a8:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   215aa:	4604      	mov	r4, r0
   215ac:	b920      	cbnz	r0, 215b8 <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
   215ae:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   215b2:	b003      	add	sp, #12
   215b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   215b8:	2900      	cmp	r1, #0
   215ba:	d0f8      	beq.n	215ae <stream_flash_init+0x12>
   215bc:	2a00      	cmp	r2, #0
   215be:	d0f6      	beq.n	215ae <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   215c0:	9300      	str	r3, [sp, #0]
	if (buf_len % flash_get_write_block_size(fdev)) {
   215c2:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   215c4:	2300      	movs	r3, #0
   215c6:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   215c8:	f016 fa09 	bl	379de <flash_get_write_block_size>
   215cc:	fbb7 f3f0 	udiv	r3, r7, r0
   215d0:	fb03 7010 	mls	r0, r3, r0, r7
   215d4:	b150      	cbz	r0, 215ec <stream_flash_init+0x50>
   215d6:	481d      	ldr	r0, [pc, #116]	; (2164c <stream_flash_init+0xb0>)
   215d8:	4b1d      	ldr	r3, [pc, #116]	; (21650 <stream_flash_init+0xb4>)
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   215da:	491e      	ldr	r1, [pc, #120]	; (21654 <stream_flash_init+0xb8>)
   215dc:	1ac0      	subs	r0, r0, r3
   215de:	08c0      	lsrs	r0, r0, #3
   215e0:	0180      	lsls	r0, r0, #6
		LOG_ERR("Incorrect parameter");
   215e2:	f040 0001 	orr.w	r0, r0, #1
   215e6:	f015 ff53 	bl	37490 <log_string_sync>
   215ea:	e7e0      	b.n	215ae <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   215ec:	491a      	ldr	r1, [pc, #104]	; (21658 <stream_flash_init+0xbc>)
   215ee:	466a      	mov	r2, sp
   215f0:	4628      	mov	r0, r5
   215f2:	f018 f986 	bl	39902 <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   215f6:	9b01      	ldr	r3, [sp, #4]
   215f8:	2b00      	cmp	r3, #0
   215fa:	d0d8      	beq.n	215ae <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   215fc:	eb08 0206 	add.w	r2, r8, r6
   21600:	4293      	cmp	r3, r2
   21602:	d206      	bcs.n	21612 <stream_flash_init+0x76>
   21604:	4811      	ldr	r0, [pc, #68]	; (2164c <stream_flash_init+0xb0>)
   21606:	4b12      	ldr	r3, [pc, #72]	; (21650 <stream_flash_init+0xb4>)
		LOG_ERR("Incorrect parameter");
   21608:	4914      	ldr	r1, [pc, #80]	; (2165c <stream_flash_init+0xc0>)
   2160a:	1ac0      	subs	r0, r0, r3
   2160c:	08c0      	lsrs	r0, r0, #3
   2160e:	0180      	lsls	r0, r0, #6
   21610:	e7e7      	b.n	215e2 <stream_flash_init+0x46>
	    offset % flash_get_write_block_size(fdev)) {
   21612:	4628      	mov	r0, r5
   21614:	f016 f9e3 	bl	379de <flash_get_write_block_size>
   21618:	fbb8 f3f0 	udiv	r3, r8, r0
   2161c:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   21620:	2800      	cmp	r0, #0
   21622:	d1ef      	bne.n	21604 <stream_flash_init+0x68>
	ctx->buf_len = buf_len;
   21624:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   21628:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   2162a:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   2162c:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   2162e:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   21632:	b916      	cbnz	r6, 2163a <stream_flash_init+0x9e>
   21634:	9e01      	ldr	r6, [sp, #4]
   21636:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   2163a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2163c:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   2163e:	f04f 33ff 	mov.w	r3, #4294967295
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   21642:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   21644:	6223      	str	r3, [r4, #32]
	return 0;
   21646:	2000      	movs	r0, #0
   21648:	e7b3      	b.n	215b2 <stream_flash_init+0x16>
   2164a:	bf00      	nop
   2164c:	0003b448 	.word	0x0003b448
   21650:	0003b448 	.word	0x0003b448
   21654:	0003d351 	.word	0x0003d351
   21658:	00021381 	.word	0x00021381
   2165c:	0003d388 	.word	0x0003d388

00021660 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   21660:	4b10      	ldr	r3, [pc, #64]	; (216a4 <settings_save_one+0x44>)
{
   21662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   21666:	681c      	ldr	r4, [r3, #0]
{
   21668:	4605      	mov	r5, r0
   2166a:	460e      	mov	r6, r1
   2166c:	4617      	mov	r7, r2
	if (!cs) {
   2166e:	b1ac      	cbz	r4, 2169c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   21670:	f04f 32ff 	mov.w	r2, #4294967295
   21674:	f04f 33ff 	mov.w	r3, #4294967295
   21678:	480b      	ldr	r0, [pc, #44]	; (216a8 <settings_save_one+0x48>)
   2167a:	f00e f8f5 	bl	2f868 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   2167e:	6863      	ldr	r3, [r4, #4]
   21680:	4632      	mov	r2, r6
   21682:	f8d3 8008 	ldr.w	r8, [r3, #8]
   21686:	4629      	mov	r1, r5
   21688:	463b      	mov	r3, r7
   2168a:	4620      	mov	r0, r4
   2168c:	47c0      	blx	r8
   2168e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   21690:	4805      	ldr	r0, [pc, #20]	; (216a8 <settings_save_one+0x48>)
   21692:	f00e f9e9 	bl	2fa68 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   21696:	4620      	mov	r0, r4
   21698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   2169c:	f06f 0401 	mvn.w	r4, #1
   216a0:	e7f9      	b.n	21696 <settings_save_one+0x36>
   216a2:	bf00      	nop
   216a4:	200023cc 	.word	0x200023cc
   216a8:	20000c10 	.word	0x20000c10

000216ac <settings_src_register>:
	parent->next = child;
   216ac:	2300      	movs	r3, #0
   216ae:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   216b0:	4b04      	ldr	r3, [pc, #16]	; (216c4 <settings_src_register+0x18>)
   216b2:	685a      	ldr	r2, [r3, #4]
   216b4:	b912      	cbnz	r2, 216bc <settings_src_register+0x10>
	list->head = node;
   216b6:	e9c3 0000 	strd	r0, r0, [r3]
}
   216ba:	4770      	bx	lr
	parent->next = child;
   216bc:	6010      	str	r0, [r2, #0]
	list->tail = node;
   216be:	6058      	str	r0, [r3, #4]
}
   216c0:	4770      	bx	lr
   216c2:	bf00      	nop
   216c4:	200023c4 	.word	0x200023c4

000216c8 <settings_dst_register>:
	settings_save_dst = cs;
   216c8:	4b01      	ldr	r3, [pc, #4]	; (216d0 <settings_dst_register+0x8>)
   216ca:	6018      	str	r0, [r3, #0]
}
   216cc:	4770      	bx	lr
   216ce:	bf00      	nop
   216d0:	200023cc 	.word	0x200023cc

000216d4 <settings_load_subtree>:
{
   216d4:	b530      	push	{r4, r5, lr}
   216d6:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   216d8:	2300      	movs	r3, #0
{
   216da:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   216dc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   216e0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   216e2:	f04f 33ff 	mov.w	r3, #4294967295
   216e6:	480e      	ldr	r0, [pc, #56]	; (21720 <settings_load_subtree+0x4c>)
   216e8:	f04f 32ff 	mov.w	r2, #4294967295
   216ec:	f00e f8bc 	bl	2f868 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   216f0:	4b0c      	ldr	r3, [pc, #48]	; (21724 <settings_load_subtree+0x50>)
   216f2:	681c      	ldr	r4, [r3, #0]
   216f4:	2c00      	cmp	r4, #0
   216f6:	bf38      	it	cc
   216f8:	2400      	movcc	r4, #0
   216fa:	b13c      	cbz	r4, 2170c <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   216fc:	6863      	ldr	r3, [r4, #4]
   216fe:	4620      	mov	r0, r4
   21700:	681b      	ldr	r3, [r3, #0]
   21702:	a901      	add	r1, sp, #4
   21704:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21706:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   21708:	2c00      	cmp	r4, #0
   2170a:	d1f6      	bne.n	216fa <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   2170c:	4628      	mov	r0, r5
   2170e:	f000 f8f1 	bl	218f4 <settings_commit_subtree>
   21712:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   21714:	4802      	ldr	r0, [pc, #8]	; (21720 <settings_load_subtree+0x4c>)
   21716:	f00e f9a7 	bl	2fa68 <z_impl_k_mutex_unlock>
}
   2171a:	4620      	mov	r0, r4
   2171c:	b005      	add	sp, #20
   2171e:	bd30      	pop	{r4, r5, pc}
   21720:	20000c10 	.word	0x20000c10
   21724:	200023c4 	.word	0x200023c4

00021728 <settings_load_subtree_direct>:
{
   21728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   2172a:	e9cd 0101 	strd	r0, r1, [sp, #4]
   2172e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   21730:	f04f 33ff 	mov.w	r3, #4294967295
   21734:	480c      	ldr	r0, [pc, #48]	; (21768 <settings_load_subtree_direct+0x40>)
   21736:	f04f 32ff 	mov.w	r2, #4294967295
   2173a:	f00e f895 	bl	2f868 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2173e:	4b0b      	ldr	r3, [pc, #44]	; (2176c <settings_load_subtree_direct+0x44>)
   21740:	681c      	ldr	r4, [r3, #0]
   21742:	2c00      	cmp	r4, #0
   21744:	bf38      	it	cc
   21746:	2400      	movcc	r4, #0
   21748:	b13c      	cbz	r4, 2175a <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   2174a:	6863      	ldr	r3, [r4, #4]
   2174c:	4620      	mov	r0, r4
   2174e:	681b      	ldr	r3, [r3, #0]
   21750:	a901      	add	r1, sp, #4
   21752:	4798      	blx	r3
   21754:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   21756:	2c00      	cmp	r4, #0
   21758:	d1f6      	bne.n	21748 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
   2175a:	4803      	ldr	r0, [pc, #12]	; (21768 <settings_load_subtree_direct+0x40>)
   2175c:	f00e f984 	bl	2fa68 <z_impl_k_mutex_unlock>
}
   21760:	2000      	movs	r0, #0
   21762:	b004      	add	sp, #16
   21764:	bd10      	pop	{r4, pc}
   21766:	bf00      	nop
   21768:	20000c10 	.word	0x20000c10
   2176c:	200023c4 	.word	0x200023c4

00021770 <settings_store_init>:
	list->head = NULL;
   21770:	4b02      	ldr	r3, [pc, #8]	; (2177c <settings_store_init+0xc>)
   21772:	2200      	movs	r2, #0
	list->tail = NULL;
   21774:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   21778:	4770      	bx	lr
   2177a:	bf00      	nop
   2177c:	200023c4 	.word	0x200023c4

00021780 <settings_init>:
	list->head = NULL;
   21780:	4b02      	ldr	r3, [pc, #8]	; (2178c <settings_init+0xc>)
   21782:	2200      	movs	r2, #0
	list->tail = NULL;
   21784:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   21788:	f7ff bff2 	b.w	21770 <settings_store_init>
   2178c:	200023d0 	.word	0x200023d0

00021790 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   21790:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21794:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   21796:	460e      	mov	r6, r1
   21798:	b109      	cbz	r1, 2179e <settings_parse_and_lookup+0xe>
		*next = NULL;
   2179a:	2300      	movs	r3, #0
   2179c:	600b      	str	r3, [r1, #0]
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2179e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 21850 <settings_parse_and_lookup+0xc0>
   217a2:	4c26      	ldr	r4, [pc, #152]	; (2183c <settings_parse_and_lookup+0xac>)
   217a4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 21854 <settings_parse_and_lookup+0xc4>
   217a8:	2500      	movs	r5, #0
   217aa:	46c2      	mov	sl, r8
   217ac:	4544      	cmp	r4, r8
   217ae:	d90c      	bls.n	217ca <settings_parse_and_lookup+0x3a>
   217b0:	4923      	ldr	r1, [pc, #140]	; (21840 <settings_parse_and_lookup+0xb0>)
   217b2:	4824      	ldr	r0, [pc, #144]	; (21844 <settings_parse_and_lookup+0xb4>)
   217b4:	2394      	movs	r3, #148	; 0x94
   217b6:	464a      	mov	r2, r9
   217b8:	f015 fcaf 	bl	3711a <printk>
   217bc:	4822      	ldr	r0, [pc, #136]	; (21848 <settings_parse_and_lookup+0xb8>)
   217be:	f015 fcac 	bl	3711a <printk>
   217c2:	2194      	movs	r1, #148	; 0x94
   217c4:	4648      	mov	r0, r9
   217c6:	f015 fe4e 	bl	37466 <assert_post_action>
   217ca:	4554      	cmp	r4, sl
   217cc:	d308      	bcc.n	217e0 <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   217ce:	4b1f      	ldr	r3, [pc, #124]	; (2184c <settings_parse_and_lookup+0xbc>)
   217d0:	681c      	ldr	r4, [r3, #0]
   217d2:	b10c      	cbz	r4, 217d8 <settings_parse_and_lookup+0x48>
   217d4:	3c14      	subs	r4, #20
   217d6:	b9c4      	cbnz	r4, 2180a <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   217d8:	4628      	mov	r0, r5
   217da:	b002      	add	sp, #8
   217dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   217e0:	6821      	ldr	r1, [r4, #0]
   217e2:	aa01      	add	r2, sp, #4
   217e4:	4638      	mov	r0, r7
   217e6:	f016 f94d 	bl	37a84 <settings_name_steq>
   217ea:	b160      	cbz	r0, 21806 <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
   217ec:	b925      	cbnz	r5, 217f8 <settings_parse_and_lookup+0x68>
			if (next) {
   217ee:	b10e      	cbz	r6, 217f4 <settings_parse_and_lookup+0x64>
				*next = tmpnext;
   217f0:	9b01      	ldr	r3, [sp, #4]
   217f2:	6033      	str	r3, [r6, #0]
   217f4:	4625      	mov	r5, r4
   217f6:	e006      	b.n	21806 <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   217f8:	6829      	ldr	r1, [r5, #0]
   217fa:	6820      	ldr	r0, [r4, #0]
   217fc:	2200      	movs	r2, #0
   217fe:	f016 f941 	bl	37a84 <settings_name_steq>
   21802:	2800      	cmp	r0, #0
   21804:	d1f3      	bne.n	217ee <settings_parse_and_lookup+0x5e>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   21806:	3414      	adds	r4, #20
   21808:	e7d0      	b.n	217ac <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2180a:	6821      	ldr	r1, [r4, #0]
   2180c:	aa01      	add	r2, sp, #4
   2180e:	4638      	mov	r0, r7
   21810:	f016 f938 	bl	37a84 <settings_name_steq>
   21814:	b160      	cbz	r0, 21830 <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
   21816:	b925      	cbnz	r5, 21822 <settings_parse_and_lookup+0x92>
			if (next) {
   21818:	b10e      	cbz	r6, 2181e <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
   2181a:	9b01      	ldr	r3, [sp, #4]
   2181c:	6033      	str	r3, [r6, #0]
   2181e:	4625      	mov	r5, r4
   21820:	e006      	b.n	21830 <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   21822:	6829      	ldr	r1, [r5, #0]
   21824:	6820      	ldr	r0, [r4, #0]
   21826:	2200      	movs	r2, #0
   21828:	f016 f92c 	bl	37a84 <settings_name_steq>
   2182c:	2800      	cmp	r0, #0
   2182e:	d1f3      	bne.n	21818 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21830:	f114 0f14 	cmn.w	r4, #20
   21834:	d0d0      	beq.n	217d8 <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21836:	6964      	ldr	r4, [r4, #20]
   21838:	e7cb      	b.n	217d2 <settings_parse_and_lookup+0x42>
   2183a:	bf00      	nop
   2183c:	0003b3e4 	.word	0x0003b3e4
   21840:	0003d3db 	.word	0x0003d3db
   21844:	0003c48a 	.word	0x0003c48a
   21848:	0003d403 	.word	0x0003d403
   2184c:	200023d0 	.word	0x200023d0
   21850:	0003b448 	.word	0x0003b448
   21854:	0003d3a9 	.word	0x0003d3a9

00021858 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   21858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2185c:	b085      	sub	sp, #20
   2185e:	4605      	mov	r5, r0
   21860:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   21864:	9003      	str	r0, [sp, #12]
{
   21866:	460c      	mov	r4, r1
   21868:	4616      	mov	r6, r2
   2186a:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   2186c:	f1b8 0f00 	cmp.w	r8, #0
   21870:	d018      	beq.n	218a4 <settings_call_set_handler+0x4c>
   21872:	f8d8 1000 	ldr.w	r1, [r8]
   21876:	b181      	cbz	r1, 2189a <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   21878:	aa03      	add	r2, sp, #12
   2187a:	f016 f903 	bl	37a84 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   2187e:	b960      	cbnz	r0, 2189a <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   21880:	2000      	movs	r0, #0
   21882:	e007      	b.n	21894 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   21884:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21888:	9300      	str	r3, [sp, #0]
   2188a:	9803      	ldr	r0, [sp, #12]
   2188c:	463b      	mov	r3, r7
   2188e:	4632      	mov	r2, r6
   21890:	4621      	mov	r1, r4
   21892:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   21894:	b005      	add	sp, #20
   21896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   2189a:	f8d8 9004 	ldr.w	r9, [r8, #4]
   2189e:	f1b9 0f00 	cmp.w	r9, #0
   218a2:	d1ef      	bne.n	21884 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   218a4:	a903      	add	r1, sp, #12
   218a6:	4628      	mov	r0, r5
   218a8:	f7ff ff72 	bl	21790 <settings_parse_and_lookup>
		if (!ch) {
   218ac:	2800      	cmp	r0, #0
   218ae:	d0e7      	beq.n	21880 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   218b0:	f8d0 8008 	ldr.w	r8, [r0, #8]
   218b4:	9803      	ldr	r0, [sp, #12]
   218b6:	4632      	mov	r2, r6
   218b8:	463b      	mov	r3, r7
   218ba:	4621      	mov	r1, r4
   218bc:	47c0      	blx	r8
		if (rc != 0) {
   218be:	4606      	mov	r6, r0
   218c0:	2800      	cmp	r0, #0
   218c2:	d0dd      	beq.n	21880 <settings_call_set_handler+0x28>
   218c4:	4b08      	ldr	r3, [pc, #32]	; (218e8 <settings_call_set_handler+0x90>)
   218c6:	4c09      	ldr	r4, [pc, #36]	; (218ec <settings_call_set_handler+0x94>)
   218c8:	4628      	mov	r0, r5
   218ca:	1ae4      	subs	r4, r4, r3
   218cc:	08e4      	lsrs	r4, r4, #3
   218ce:	f015 fdf2 	bl	374b6 <z_log_strdup>
			LOG_ERR("set-value failure. key: %s error(%d)",
   218d2:	01a4      	lsls	r4, r4, #6
   218d4:	f044 0401 	orr.w	r4, r4, #1
   218d8:	4602      	mov	r2, r0
   218da:	4905      	ldr	r1, [pc, #20]	; (218f0 <settings_call_set_handler+0x98>)
   218dc:	4633      	mov	r3, r6
   218de:	4620      	mov	r0, r4
   218e0:	f015 fdd6 	bl	37490 <log_string_sync>
   218e4:	e7cc      	b.n	21880 <settings_call_set_handler+0x28>
   218e6:	bf00      	nop
   218e8:	0003b448 	.word	0x0003b448
   218ec:	0003b568 	.word	0x0003b568
   218f0:	0003d422 	.word	0x0003d422

000218f4 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   218f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   218f8:	4f23      	ldr	r7, [pc, #140]	; (21988 <settings_commit_subtree+0x94>)
   218fa:	4c24      	ldr	r4, [pc, #144]	; (2198c <settings_commit_subtree+0x98>)
   218fc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 219a0 <settings_commit_subtree+0xac>
{
   21900:	4606      	mov	r6, r0
	rc = 0;
   21902:	2500      	movs	r5, #0
   21904:	46b9      	mov	r9, r7
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   21906:	42bc      	cmp	r4, r7
   21908:	d90c      	bls.n	21924 <settings_commit_subtree+0x30>
   2190a:	4921      	ldr	r1, [pc, #132]	; (21990 <settings_commit_subtree+0x9c>)
   2190c:	4821      	ldr	r0, [pc, #132]	; (21994 <settings_commit_subtree+0xa0>)
   2190e:	23f4      	movs	r3, #244	; 0xf4
   21910:	4642      	mov	r2, r8
   21912:	f015 fc02 	bl	3711a <printk>
   21916:	4820      	ldr	r0, [pc, #128]	; (21998 <settings_commit_subtree+0xa4>)
   21918:	f015 fbff 	bl	3711a <printk>
   2191c:	21f4      	movs	r1, #244	; 0xf4
   2191e:	4640      	mov	r0, r8
   21920:	f015 fda1 	bl	37466 <assert_post_action>
   21924:	454c      	cmp	r4, r9
   21926:	d307      	bcc.n	21938 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   21928:	4b1c      	ldr	r3, [pc, #112]	; (2199c <settings_commit_subtree+0xa8>)
   2192a:	681c      	ldr	r4, [r3, #0]
   2192c:	b10c      	cbz	r4, 21932 <settings_commit_subtree+0x3e>
   2192e:	3c14      	subs	r4, #20
   21930:	b9a4      	cbnz	r4, 2195c <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   21932:	4628      	mov	r0, r5
   21934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   21938:	b91e      	cbnz	r6, 21942 <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   2193a:	68e3      	ldr	r3, [r4, #12]
   2193c:	b94b      	cbnz	r3, 21952 <settings_commit_subtree+0x5e>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2193e:	3414      	adds	r4, #20
   21940:	e7e1      	b.n	21906 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   21942:	6820      	ldr	r0, [r4, #0]
   21944:	2200      	movs	r2, #0
   21946:	4631      	mov	r1, r6
   21948:	f016 f89c 	bl	37a84 <settings_name_steq>
   2194c:	2800      	cmp	r0, #0
   2194e:	d1f4      	bne.n	2193a <settings_commit_subtree+0x46>
   21950:	e7f5      	b.n	2193e <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   21952:	4798      	blx	r3
				rc = rc2;
   21954:	2d00      	cmp	r5, #0
   21956:	bf08      	it	eq
   21958:	4605      	moveq	r5, r0
   2195a:	e7f0      	b.n	2193e <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2195c:	b936      	cbnz	r6, 2196c <settings_commit_subtree+0x78>
		if (ch->h_commit) {
   2195e:	68e3      	ldr	r3, [r4, #12]
   21960:	b963      	cbnz	r3, 2197c <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21962:	f114 0f14 	cmn.w	r4, #20
   21966:	d0e4      	beq.n	21932 <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21968:	6964      	ldr	r4, [r4, #20]
   2196a:	e7df      	b.n	2192c <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2196c:	6820      	ldr	r0, [r4, #0]
   2196e:	2200      	movs	r2, #0
   21970:	4631      	mov	r1, r6
   21972:	f016 f887 	bl	37a84 <settings_name_steq>
   21976:	2800      	cmp	r0, #0
   21978:	d1f1      	bne.n	2195e <settings_commit_subtree+0x6a>
   2197a:	e7f2      	b.n	21962 <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   2197c:	4798      	blx	r3
				rc = rc2;
   2197e:	2d00      	cmp	r5, #0
   21980:	bf08      	it	eq
   21982:	4605      	moveq	r5, r0
   21984:	e7ed      	b.n	21962 <settings_commit_subtree+0x6e>
   21986:	bf00      	nop
   21988:	0003b448 	.word	0x0003b448
   2198c:	0003b3e4 	.word	0x0003b3e4
   21990:	0003d3db 	.word	0x0003d3db
   21994:	0003c48a 	.word	0x0003c48a
   21998:	0003d403 	.word	0x0003d403
   2199c:	200023d0 	.word	0x200023d0
   219a0:	0003d3a9 	.word	0x0003d3a9

000219a4 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   219a4:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   219a6:	4c06      	ldr	r4, [pc, #24]	; (219c0 <settings_subsys_init+0x1c>)
   219a8:	7823      	ldrb	r3, [r4, #0]
   219aa:	b93b      	cbnz	r3, 219bc <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   219ac:	f7ff fee8 	bl	21780 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   219b0:	f000 f864 	bl	21a7c <settings_backend_init>

	if (!err) {
   219b4:	b908      	cbnz	r0, 219ba <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   219b6:	2301      	movs	r3, #1
   219b8:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   219ba:	bd10      	pop	{r4, pc}
		return 0;
   219bc:	2000      	movs	r0, #0
   219be:	e7fc      	b.n	219ba <settings_subsys_init+0x16>
   219c0:	20003b6e 	.word	0x20003b6e

000219c4 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   219c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   219c8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   219ca:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 21a78 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   219ce:	3401      	adds	r4, #1
{
   219d0:	b098      	sub	sp, #96	; 0x60
   219d2:	4680      	mov	r8, r0
   219d4:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   219d6:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   219d8:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   219dc:	1e65      	subs	r5, r4, #1
   219de:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   219e0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   219e4:	d045      	beq.n	21a72 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   219e6:	234a      	movs	r3, #74	; 0x4a
   219e8:	aa05      	add	r2, sp, #20
   219ea:	4629      	mov	r1, r5
   219ec:	4630      	mov	r0, r6
   219ee:	f015 ff40 	bl	37872 <nvs_read>
   219f2:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   219f6:	343f      	adds	r4, #63	; 0x3f
   219f8:	b2a4      	uxth	r4, r4
   219fa:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   219fc:	4621      	mov	r1, r4
   219fe:	2301      	movs	r3, #1
   21a00:	f10d 020b 	add.w	r2, sp, #11
   21a04:	4630      	mov	r0, r6
   21a06:	f015 ff34 	bl	37872 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   21a0a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   21a0c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   21a0e:	dc03      	bgt.n	21a18 <settings_nvs_load+0x54>
   21a10:	2800      	cmp	r0, #0
   21a12:	dc03      	bgt.n	21a1c <settings_nvs_load+0x58>
{
   21a14:	462c      	mov	r4, r5
   21a16:	e7e1      	b.n	219dc <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   21a18:	2800      	cmp	r0, #0
   21a1a:	dc16      	bgt.n	21a4a <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   21a1c:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   21a20:	42ab      	cmp	r3, r5
   21a22:	d109      	bne.n	21a38 <settings_nvs_load+0x74>
				cf->last_name_id--;
   21a24:	4642      	mov	r2, r8
   21a26:	1e6b      	subs	r3, r5, #1
   21a28:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   21a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   21a30:	2302      	movs	r3, #2
   21a32:	4630      	mov	r0, r6
   21a34:	f7ff fb08 	bl	21048 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   21a38:	4629      	mov	r1, r5
   21a3a:	4630      	mov	r0, r6
   21a3c:	f015 ff15 	bl	3786a <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   21a40:	4621      	mov	r1, r4
   21a42:	4630      	mov	r0, r6
   21a44:	f015 ff11 	bl	3786a <nvs_delete>
			continue;
   21a48:	e7e4      	b.n	21a14 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   21a4a:	ab18      	add	r3, sp, #96	; 0x60
   21a4c:	441f      	add	r7, r3
   21a4e:	2300      	movs	r3, #0
   21a50:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   21a54:	4652      	mov	r2, sl
   21a56:	f8cd 9000 	str.w	r9, [sp]
   21a5a:	ab03      	add	r3, sp, #12
   21a5c:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   21a5e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   21a60:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   21a64:	f7ff fef8 	bl	21858 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   21a68:	2800      	cmp	r0, #0
   21a6a:	d0d3      	beq.n	21a14 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   21a6c:	b018      	add	sp, #96	; 0x60
   21a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21a72:	2000      	movs	r0, #0
	return ret;
   21a74:	e7fa      	b.n	21a6c <settings_nvs_load+0xa8>
   21a76:	bf00      	nop
   21a78:	00037af7 	.word	0x00037af7

00021a7c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   21a7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   21a7e:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   21a80:	4669      	mov	r1, sp
   21a82:	2006      	movs	r0, #6
	uint32_t sector_cnt = 1;
   21a84:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   21a86:	f7ff fc29 	bl	212dc <flash_area_open>
	if (rc) {
   21a8a:	4604      	mov	r4, r0
   21a8c:	2800      	cmp	r0, #0
   21a8e:	d136      	bne.n	21afe <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   21a90:	aa02      	add	r2, sp, #8
   21a92:	a901      	add	r1, sp, #4
   21a94:	2006      	movs	r0, #6
   21a96:	f7ff fc3f 	bl	21318 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   21a9a:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   21a9e:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   21aa0:	d02d      	beq.n	21afe <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   21aa2:	b138      	cbz	r0, 21ab4 <settings_backend_init+0x38>
   21aa4:	340c      	adds	r4, #12
   21aa6:	d005      	beq.n	21ab4 <settings_backend_init+0x38>
		k_panic();
   21aa8:	4040      	eors	r0, r0
   21aaa:	f380 8811 	msr	BASEPRI, r0
   21aae:	f04f 0004 	mov.w	r0, #4
   21ab2:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   21ab4:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   21ab6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   21aba:	d223      	bcs.n	21b04 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   21abc:	9a00      	ldr	r2, [sp, #0]
   21abe:	2300      	movs	r3, #0
   21ac0:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   21ac2:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   21ac4:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   21ac6:	4285      	cmp	r5, r0
   21ac8:	b29c      	uxth	r4, r3
   21aca:	d303      	bcc.n	21ad4 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   21acc:	3301      	adds	r3, #1
   21ace:	2b08      	cmp	r3, #8
   21ad0:	d1f8      	bne.n	21ac4 <settings_backend_init+0x48>
   21ad2:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   21ad4:	4d0d      	ldr	r5, [pc, #52]	; (21b0c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   21ad6:	6853      	ldr	r3, [r2, #4]
   21ad8:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   21ada:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   21adc:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   21ade:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   21ae0:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   21ae2:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   21ae4:	f016 f89e 	bl	37c24 <settings_nvs_backend_init>
	if (rc) {
   21ae8:	4604      	mov	r4, r0
   21aea:	b940      	cbnz	r0, 21afe <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   21aec:	4e08      	ldr	r6, [pc, #32]	; (21b10 <settings_backend_init+0x94>)
   21aee:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   21af0:	4628      	mov	r0, r5
   21af2:	f7ff fddb 	bl	216ac <settings_src_register>
	settings_dst_register(&cf->cf_store);
   21af6:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   21af8:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   21afa:	f7ff fde5 	bl	216c8 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   21afe:	4620      	mov	r0, r4
   21b00:	b004      	add	sp, #16
   21b02:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   21b04:	f06f 0420 	mvn.w	r4, #32
   21b08:	e7f9      	b.n	21afe <settings_backend_init+0x82>
   21b0a:	bf00      	nop
   21b0c:	200023d8 	.word	0x200023d8
   21b10:	20000524 	.word	0x20000524

00021b14 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   21b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21b18:	4605      	mov	r5, r0
   21b1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b1e:	f3ef 8611 	mrs	r6, BASEPRI
   21b22:	f383 8812 	msr	BASEPRI_MAX, r3
   21b26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b2a:	4823      	ldr	r0, [pc, #140]	; (21bb8 <pm_state_notify+0xa4>)
   21b2c:	f00d fe4a 	bl	2f7c4 <z_spin_lock_valid>
   21b30:	b968      	cbnz	r0, 21b4e <pm_state_notify+0x3a>
   21b32:	4a22      	ldr	r2, [pc, #136]	; (21bbc <pm_state_notify+0xa8>)
   21b34:	4922      	ldr	r1, [pc, #136]	; (21bc0 <pm_state_notify+0xac>)
   21b36:	4823      	ldr	r0, [pc, #140]	; (21bc4 <pm_state_notify+0xb0>)
   21b38:	2381      	movs	r3, #129	; 0x81
   21b3a:	f015 faee 	bl	3711a <printk>
   21b3e:	491e      	ldr	r1, [pc, #120]	; (21bb8 <pm_state_notify+0xa4>)
   21b40:	4821      	ldr	r0, [pc, #132]	; (21bc8 <pm_state_notify+0xb4>)
   21b42:	f015 faea 	bl	3711a <printk>
   21b46:	481d      	ldr	r0, [pc, #116]	; (21bbc <pm_state_notify+0xa8>)
   21b48:	2181      	movs	r1, #129	; 0x81
   21b4a:	f015 fc8c 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   21b4e:	481a      	ldr	r0, [pc, #104]	; (21bb8 <pm_state_notify+0xa4>)
   21b50:	f00d fe56 	bl	2f800 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   21b54:	4b1d      	ldr	r3, [pc, #116]	; (21bcc <pm_state_notify+0xb8>)
   21b56:	681c      	ldr	r4, [r3, #0]
   21b58:	2c00      	cmp	r4, #0
   21b5a:	bf38      	it	cc
   21b5c:	2400      	movcc	r4, #0
   21b5e:	b19c      	cbz	r4, 21b88 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   21b60:	4f1b      	ldr	r7, [pc, #108]	; (21bd0 <pm_state_notify+0xbc>)
   21b62:	f8df 8078 	ldr.w	r8, [pc, #120]	; 21bdc <pm_state_notify+0xc8>
   21b66:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   21b6a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   21b6e:	2d00      	cmp	r5, #0
   21b70:	bf08      	it	eq
   21b72:	4613      	moveq	r3, r2
		if (callback) {
   21b74:	b12b      	cbz	r3, 21b82 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
   21b76:	f898 2014 	ldrb.w	r2, [r8, #20]
   21b7a:	fb09 f202 	mul.w	r2, r9, r2
   21b7e:	5cb8      	ldrb	r0, [r7, r2]
   21b80:	4798      	blx	r3
   21b82:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   21b84:	2c00      	cmp	r4, #0
   21b86:	d1f0      	bne.n	21b6a <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b88:	480b      	ldr	r0, [pc, #44]	; (21bb8 <pm_state_notify+0xa4>)
   21b8a:	f00d fe29 	bl	2f7e0 <z_spin_unlock_valid>
   21b8e:	b968      	cbnz	r0, 21bac <pm_state_notify+0x98>
   21b90:	4a0a      	ldr	r2, [pc, #40]	; (21bbc <pm_state_notify+0xa8>)
   21b92:	4910      	ldr	r1, [pc, #64]	; (21bd4 <pm_state_notify+0xc0>)
   21b94:	480b      	ldr	r0, [pc, #44]	; (21bc4 <pm_state_notify+0xb0>)
   21b96:	23ac      	movs	r3, #172	; 0xac
   21b98:	f015 fabf 	bl	3711a <printk>
   21b9c:	4906      	ldr	r1, [pc, #24]	; (21bb8 <pm_state_notify+0xa4>)
   21b9e:	480e      	ldr	r0, [pc, #56]	; (21bd8 <pm_state_notify+0xc4>)
   21ba0:	f015 fabb 	bl	3711a <printk>
   21ba4:	4805      	ldr	r0, [pc, #20]	; (21bbc <pm_state_notify+0xa8>)
   21ba6:	21ac      	movs	r1, #172	; 0xac
   21ba8:	f015 fc5d 	bl	37466 <assert_post_action>
	__asm__ volatile(
   21bac:	f386 8811 	msr	BASEPRI, r6
   21bb0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   21bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21bb8:	20002418 	.word	0x20002418
   21bbc:	0003cd09 	.word	0x0003cd09
   21bc0:	0003cd5b 	.word	0x0003cd5b
   21bc4:	0003c48a 	.word	0x0003c48a
   21bc8:	0003cd70 	.word	0x0003cd70
   21bcc:	2000241c 	.word	0x2000241c
   21bd0:	20002428 	.word	0x20002428
   21bd4:	0003cd2f 	.word	0x0003cd2f
   21bd8:	0003cd46 	.word	0x0003cd46
   21bdc:	20002d00 	.word	0x20002d00

00021be0 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   21be0:	f000 031f 	and.w	r3, r0, #31
   21be4:	2201      	movs	r2, #1
   21be6:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21be8:	4b0a      	ldr	r3, [pc, #40]	; (21c14 <atomic_test_and_set_bit.constprop.0+0x34>)
   21bea:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   21bee:	0940      	lsrs	r0, r0, #5
   21bf0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21bf4:	e850 3f00 	ldrex	r3, [r0]
   21bf8:	ea43 0102 	orr.w	r1, r3, r2
   21bfc:	e840 1c00 	strex	ip, r1, [r0]
   21c00:	f1bc 0f00 	cmp.w	ip, #0
   21c04:	d1f6      	bne.n	21bf4 <atomic_test_and_set_bit.constprop.0+0x14>
   21c06:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   21c0a:	421a      	tst	r2, r3
}
   21c0c:	bf14      	ite	ne
   21c0e:	2001      	movne	r0, #1
   21c10:	2000      	moveq	r0, #0
   21c12:	4770      	bx	lr
   21c14:	20002434 	.word	0x20002434

00021c18 <pm_system_resume>:

void pm_system_resume(void)
{
   21c18:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   21c1a:	4b1d      	ldr	r3, [pc, #116]	; (21c90 <pm_system_resume+0x78>)
   21c1c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21c1e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   21c22:	f005 031f 	and.w	r3, r5, #31
   21c26:	2201      	movs	r2, #1
   21c28:	409a      	lsls	r2, r3
   21c2a:	4b1a      	ldr	r3, [pc, #104]	; (21c94 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21c2c:	0969      	lsrs	r1, r5, #5
{
   21c2e:	b085      	sub	sp, #20
   21c30:	43d0      	mvns	r0, r2
   21c32:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   21c36:	e853 1f00 	ldrex	r1, [r3]
   21c3a:	ea01 0400 	and.w	r4, r1, r0
   21c3e:	e843 4c00 	strex	ip, r4, [r3]
   21c42:	f1bc 0f00 	cmp.w	ip, #0
   21c46:	d1f6      	bne.n	21c36 <pm_system_resume+0x1e>
   21c48:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   21c4c:	4211      	tst	r1, r2
   21c4e:	d017      	beq.n	21c80 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
   21c50:	4c11      	ldr	r4, [pc, #68]	; (21c98 <pm_system_resume+0x80>)
   21c52:	220c      	movs	r2, #12
   21c54:	fb02 4205 	mla	r2, r2, r5, r4
   21c58:	ca07      	ldmia	r2, {r0, r1, r2}
   21c5a:	ab01      	add	r3, sp, #4
   21c5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   21c60:	4a0e      	ldr	r2, [pc, #56]	; (21c9c <pm_system_resume+0x84>)
   21c62:	b17a      	cbz	r2, 21c84 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   21c64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   21c68:	f016 fa18 	bl	3809c <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   21c6c:	2000      	movs	r0, #0
   21c6e:	f7ff ff51 	bl	21b14 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   21c72:	230c      	movs	r3, #12
   21c74:	436b      	muls	r3, r5
   21c76:	2200      	movs	r2, #0
   21c78:	18e1      	adds	r1, r4, r3
   21c7a:	50e2      	str	r2, [r4, r3]
   21c7c:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   21c80:	b005      	add	sp, #20
   21c82:	bd30      	pop	{r4, r5, pc}
   21c84:	f382 8811 	msr	BASEPRI, r2
   21c88:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   21c8c:	e7ee      	b.n	21c6c <pm_system_resume+0x54>
   21c8e:	bf00      	nop
   21c90:	20002d00 	.word	0x20002d00
   21c94:	20002424 	.word	0x20002424
   21c98:	20002428 	.word	0x20002428
   21c9c:	0003809d 	.word	0x0003809d

00021ca0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   21ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   21ca4:	4b37      	ldr	r3, [pc, #220]	; (21d84 <pm_system_suspend+0xe4>)
   21ca6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 21d9c <pm_system_suspend+0xfc>
   21caa:	7d1c      	ldrb	r4, [r3, #20]
{
   21cac:	b088      	sub	sp, #32
   21cae:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   21cb0:	4620      	mov	r0, r4
   21cb2:	f7ff ff95 	bl	21be0 <atomic_test_and_set_bit.constprop.0>
   21cb6:	b960      	cbnz	r0, 21cd2 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   21cb8:	466e      	mov	r6, sp
   21cba:	463a      	mov	r2, r7
   21cbc:	4621      	mov	r1, r4
   21cbe:	4630      	mov	r0, r6
   21cc0:	f015 ffcc 	bl	37c5c <pm_policy_next_state>
   21cc4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   21cc8:	250c      	movs	r5, #12
   21cca:	fb05 8504 	mla	r5, r5, r4, r8
   21cce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   21cd2:	230c      	movs	r3, #12
   21cd4:	4363      	muls	r3, r4
   21cd6:	eb08 0203 	add.w	r2, r8, r3
   21cda:	f818 0003 	ldrb.w	r0, [r8, r3]
   21cde:	0965      	lsrs	r5, r4, #5
   21ce0:	f004 061f 	and.w	r6, r4, #31
   21ce4:	b3c8      	cbz	r0, 21d5a <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   21ce6:	1c7b      	adds	r3, r7, #1
   21ce8:	d00f      	beq.n	21d0a <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
   21cea:	f8d2 e008 	ldr.w	lr, [r2, #8]
   21cee:	4826      	ldr	r0, [pc, #152]	; (21d88 <pm_system_suspend+0xe8>)
   21cf0:	4a26      	ldr	r2, [pc, #152]	; (21d8c <pm_system_suspend+0xec>)
   21cf2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   21cf6:	2100      	movs	r1, #0
   21cf8:	2300      	movs	r3, #0
   21cfa:	fbec 010e 	umlal	r0, r1, ip, lr
   21cfe:	f7ea ff1d 	bl	cb3c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   21d02:	2101      	movs	r1, #1
   21d04:	1a38      	subs	r0, r7, r0
   21d06:	f010 fb13 	bl	32330 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   21d0a:	f00f f817 	bl	30d3c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   21d0e:	2001      	movs	r0, #1
   21d10:	f7ff ff00 	bl	21b14 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21d14:	f3bf 8f5b 	dmb	ish
   21d18:	4b1d      	ldr	r3, [pc, #116]	; (21d90 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   21d1a:	2201      	movs	r2, #1
   21d1c:	40b2      	lsls	r2, r6
   21d1e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   21d22:	e853 1f00 	ldrex	r1, [r3]
   21d26:	4311      	orrs	r1, r2
   21d28:	e843 1000 	strex	r0, r1, [r3]
   21d2c:	2800      	cmp	r0, #0
   21d2e:	d1f8      	bne.n	21d22 <pm_system_suspend+0x82>
   21d30:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   21d34:	230c      	movs	r3, #12
   21d36:	fb03 8404 	mla	r4, r3, r4, r8
   21d3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   21d3e:	ab05      	add	r3, sp, #20
   21d40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   21d44:	4a13      	ldr	r2, [pc, #76]	; (21d94 <pm_system_suspend+0xf4>)
   21d46:	b11a      	cbz	r2, 21d50 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
   21d48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   21d4c:	f016 f993 	bl	38076 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   21d50:	f7ff ff62 	bl	21c18 <pm_system_resume>
	k_sched_unlock();
   21d54:	f00f fd36 	bl	317c4 <k_sched_unlock>
	bool ret = true;
   21d58:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21d5a:	4a0f      	ldr	r2, [pc, #60]	; (21d98 <pm_system_suspend+0xf8>)
   21d5c:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   21d60:	2301      	movs	r3, #1
   21d62:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21d64:	43db      	mvns	r3, r3
   21d66:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   21d6a:	e855 2f00 	ldrex	r2, [r5]
   21d6e:	401a      	ands	r2, r3
   21d70:	e845 2100 	strex	r1, r2, [r5]
   21d74:	2900      	cmp	r1, #0
   21d76:	d1f8      	bne.n	21d6a <pm_system_suspend+0xca>
   21d78:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   21d7c:	b008      	add	sp, #32
   21d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21d82:	bf00      	nop
   21d84:	20002d00 	.word	0x20002d00
   21d88:	000f423f 	.word	0x000f423f
   21d8c:	000f4240 	.word	0x000f4240
   21d90:	20002424 	.word	0x20002424
   21d94:	00038077 	.word	0x00038077
   21d98:	20002434 	.word	0x20002434
   21d9c:	20002428 	.word	0x20002428

00021da0 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   21da0:	4b03      	ldr	r3, [pc, #12]	; (21db0 <nus_ccc_cfg_changed+0x10>)
   21da2:	689b      	ldr	r3, [r3, #8]
   21da4:	b11b      	cbz	r3, 21dae <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   21da6:	1e48      	subs	r0, r1, #1
   21da8:	bf18      	it	ne
   21daa:	2001      	movne	r0, #1
   21dac:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   21dae:	4770      	bx	lr
   21db0:	20002438 	.word	0x20002438

00021db4 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   21db4:	b510      	push	{r4, lr}
   21db6:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   21db8:	4b03      	ldr	r3, [pc, #12]	; (21dc8 <on_receive+0x14>)
   21dba:	681b      	ldr	r3, [r3, #0]
{
   21dbc:	4611      	mov	r1, r2
	if (nus_cb.received) {
   21dbe:	b10b      	cbz	r3, 21dc4 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   21dc0:	4622      	mov	r2, r4
   21dc2:	4798      	blx	r3
}
	return len;
}
   21dc4:	4620      	mov	r0, r4
   21dc6:	bd10      	pop	{r4, pc}
   21dc8:	20002438 	.word	0x20002438

00021dcc <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   21dcc:	4b02      	ldr	r3, [pc, #8]	; (21dd8 <on_sent+0xc>)
   21dce:	685b      	ldr	r3, [r3, #4]
   21dd0:	b103      	cbz	r3, 21dd4 <on_sent+0x8>
		nus_cb.sent(conn);
   21dd2:	4718      	bx	r3
	}
}
   21dd4:	4770      	bx	lr
   21dd6:	bf00      	nop
   21dd8:	20002438 	.word	0x20002438

00021ddc <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   21ddc:	b130      	cbz	r0, 21dec <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   21dde:	4b04      	ldr	r3, [pc, #16]	; (21df0 <bt_nus_init+0x14>)
   21de0:	6802      	ldr	r2, [r0, #0]
   21de2:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   21de4:	6842      	ldr	r2, [r0, #4]
   21de6:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   21de8:	6882      	ldr	r2, [r0, #8]
   21dea:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   21dec:	2000      	movs	r0, #0
   21dee:	4770      	bx	lr
   21df0:	20002438 	.word	0x20002438

00021df4 <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   21df4:	b570      	push	{r4, r5, r6, lr}
   21df6:	b086      	sub	sp, #24
   21df8:	460e      	mov	r6, r1
   21dfa:	4615      	mov	r5, r2
	struct bt_gatt_notify_params params = {0};
   21dfc:	2100      	movs	r1, #0
{
   21dfe:	4604      	mov	r4, r0
	struct bt_gatt_notify_params params = {0};
   21e00:	2218      	movs	r2, #24
   21e02:	4668      	mov	r0, sp
   21e04:	f018 fbb8 	bl	3a578 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   21e08:	490b      	ldr	r1, [pc, #44]	; (21e38 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   21e0a:	4b0c      	ldr	r3, [pc, #48]	; (21e3c <bt_nus_send+0x48>)
	params.len = len;
   21e0c:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.data = data;
   21e10:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.func = on_sent;
   21e14:	9304      	str	r3, [sp, #16]

	if (!conn) {
   21e16:	b92c      	cbnz	r4, 21e24 <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   21e18:	4669      	mov	r1, sp
   21e1a:	4620      	mov	r0, r4
   21e1c:	f006 fffe 	bl	28e1c <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   21e20:	b006      	add	sp, #24
   21e22:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   21e24:	2201      	movs	r2, #1
   21e26:	4620      	mov	r0, r4
   21e28:	f007 f994 	bl	29154 <bt_gatt_is_subscribed>
   21e2c:	2800      	cmp	r0, #0
   21e2e:	d1f3      	bne.n	21e18 <bt_nus_send+0x24>
		return -EINVAL;
   21e30:	f06f 0015 	mvn.w	r0, #21
   21e34:	e7f4      	b.n	21e20 <bt_nus_send+0x2c>
   21e36:	bf00      	nop
   21e38:	0003b80c 	.word	0x0003b80c
   21e3c:	00021dcd 	.word	0x00021dcd

00021e40 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   21e40:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   21e42:	4e26      	ldr	r6, [pc, #152]	; (21edc <tc_aes128_set_encrypt_key+0x9c>)
{
   21e44:	4607      	mov	r7, r0
   21e46:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   21e48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   21e4a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   21e4c:	ad01      	add	r5, sp, #4
   21e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   21e50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   21e54:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   21e58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   21e5c:	4638      	mov	r0, r7
   21e5e:	2f00      	cmp	r7, #0
   21e60:	d038      	beq.n	21ed4 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   21e62:	2c00      	cmp	r4, #0
   21e64:	d038      	beq.n	21ed8 <tc_aes128_set_encrypt_key+0x98>
   21e66:	1f38      	subs	r0, r7, #4
   21e68:	4621      	mov	r1, r4
   21e6a:	4602      	mov	r2, r0
   21e6c:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   21e6e:	784b      	ldrb	r3, [r1, #1]
   21e70:	780d      	ldrb	r5, [r1, #0]
   21e72:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   21e74:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   21e78:	78cd      	ldrb	r5, [r1, #3]
   21e7a:	432b      	orrs	r3, r5
   21e7c:	788d      	ldrb	r5, [r1, #2]
   21e7e:	3104      	adds	r1, #4
   21e80:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   21e84:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   21e86:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   21e8a:	d1f0      	bne.n	21e6e <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   21e8c:	4c14      	ldr	r4, [pc, #80]	; (21ee0 <tc_aes128_set_encrypt_key+0xa0>)
   21e8e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   21e90:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   21e92:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   21e94:	d116      	bne.n	21ec4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   21e96:	f3c3 4207 	ubfx	r2, r3, #16, #8
   21e9a:	5ca5      	ldrb	r5, [r4, r2]
   21e9c:	0e1a      	lsrs	r2, r3, #24
   21e9e:	5ca2      	ldrb	r2, [r4, r2]
   21ea0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   21ea4:	f3c3 2507 	ubfx	r5, r3, #8, #8
   21ea8:	b2db      	uxtb	r3, r3
   21eaa:	5d65      	ldrb	r5, [r4, r5]
   21eac:	5ce3      	ldrb	r3, [r4, r3]
   21eae:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   21eb2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   21eb6:	ad0c      	add	r5, sp, #48	; 0x30
   21eb8:	f021 0303 	bic.w	r3, r1, #3
   21ebc:	442b      	add	r3, r5
   21ebe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   21ec2:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   21ec4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   21ec8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   21eca:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   21ecc:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   21ece:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   21ed0:	d1de      	bne.n	21e90 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   21ed2:	2001      	movs	r0, #1
}
   21ed4:	b00d      	add	sp, #52	; 0x34
   21ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   21ed8:	4620      	mov	r0, r4
   21eda:	e7fb      	b.n	21ed4 <tc_aes128_set_encrypt_key+0x94>
   21edc:	0003b5e4 	.word	0x0003b5e4
   21ee0:	0003d464 	.word	0x0003d464

00021ee4 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   21ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21ee8:	4615      	mov	r5, r2
   21eea:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   21eec:	4606      	mov	r6, r0
   21eee:	2800      	cmp	r0, #0
   21ef0:	d058      	beq.n	21fa4 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   21ef2:	2900      	cmp	r1, #0
   21ef4:	d059      	beq.n	21faa <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   21ef6:	2a00      	cmp	r2, #0
   21ef8:	d059      	beq.n	21fae <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   21efa:	2310      	movs	r3, #16
   21efc:	460a      	mov	r2, r1
   21efe:	4668      	mov	r0, sp
   21f00:	4619      	mov	r1, r3
   21f02:	f015 feb0 	bl	37c66 <_copy>
	add_round_key(state, s->words);
   21f06:	4629      	mov	r1, r5
   21f08:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   21f0a:	4c2a      	ldr	r4, [pc, #168]	; (21fb4 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   21f0c:	f015 fec3 	bl	37c96 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   21f10:	f105 0710 	add.w	r7, r5, #16
   21f14:	46a1      	mov	r9, r4
   21f16:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   21f18:	46e8      	mov	r8, sp
{
   21f1a:	466a      	mov	r2, sp
   21f1c:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   21f1e:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   21f20:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   21f22:	5c61      	ldrb	r1, [r4, r1]
   21f24:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   21f28:	d1f9      	bne.n	21f1e <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   21f2a:	4668      	mov	r0, sp
   21f2c:	f015 fef8 	bl	37d20 <shift_rows>
	mult_row_column(t, s);
   21f30:	4669      	mov	r1, sp
   21f32:	a804      	add	r0, sp, #16
   21f34:	f015 ff2d 	bl	37d92 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   21f38:	a901      	add	r1, sp, #4
   21f3a:	a805      	add	r0, sp, #20
   21f3c:	f015 ff29 	bl	37d92 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   21f40:	a902      	add	r1, sp, #8
   21f42:	a806      	add	r0, sp, #24
   21f44:	f015 ff25 	bl	37d92 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   21f48:	a903      	add	r1, sp, #12
   21f4a:	a807      	add	r0, sp, #28
   21f4c:	f015 ff21 	bl	37d92 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   21f50:	2310      	movs	r3, #16
   21f52:	4619      	mov	r1, r3
   21f54:	eb0d 0203 	add.w	r2, sp, r3
   21f58:	4668      	mov	r0, sp
   21f5a:	f015 fe84 	bl	37c66 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   21f5e:	4639      	mov	r1, r7
   21f60:	4668      	mov	r0, sp
   21f62:	3710      	adds	r7, #16
   21f64:	f015 fe97 	bl	37c96 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   21f68:	42af      	cmp	r7, r5
   21f6a:	d1d5      	bne.n	21f18 <tc_aes_encrypt+0x34>
   21f6c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   21f6e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   21f72:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   21f74:	f819 3003 	ldrb.w	r3, [r9, r3]
   21f78:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   21f7c:	d1f7      	bne.n	21f6e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   21f7e:	4668      	mov	r0, sp
   21f80:	f015 fece 	bl	37d20 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   21f84:	4629      	mov	r1, r5
   21f86:	4668      	mov	r0, sp
   21f88:	f015 fe85 	bl	37c96 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   21f8c:	2310      	movs	r3, #16
   21f8e:	4619      	mov	r1, r3
   21f90:	466a      	mov	r2, sp
   21f92:	4630      	mov	r0, r6
   21f94:	f015 fe67 	bl	37c66 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   21f98:	4668      	mov	r0, sp
   21f9a:	2210      	movs	r2, #16
   21f9c:	4621      	mov	r1, r4
   21f9e:	f015 fe6f 	bl	37c80 <_set>

	return TC_CRYPTO_SUCCESS;
   21fa2:	2001      	movs	r0, #1
}
   21fa4:	b009      	add	sp, #36	; 0x24
   21fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   21faa:	4608      	mov	r0, r1
   21fac:	e7fa      	b.n	21fa4 <tc_aes_encrypt+0xc0>
   21fae:	4610      	mov	r0, r2
   21fb0:	e7f8      	b.n	21fa4 <tc_aes_encrypt+0xc0>
   21fb2:	bf00      	nop
   21fb4:	0003d464 	.word	0x0003d464

00021fb8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   21fb8:	4801      	ldr	r0, [pc, #4]	; (21fc0 <nrf_cc3xx_platform_abort_init+0x8>)
   21fba:	f011 b93f 	b.w	3323c <nrf_cc3xx_platform_set_abort>
   21fbe:	bf00      	nop
   21fc0:	0003b8d0 	.word	0x0003b8d0

00021fc4 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   21fc4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   21fc6:	b1d0      	cbz	r0, 21ffe <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   21fc8:	6843      	ldr	r3, [r0, #4]
   21fca:	2b04      	cmp	r3, #4
   21fcc:	d111      	bne.n	21ff2 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21fce:	2200      	movs	r2, #0
   21fd0:	6803      	ldr	r3, [r0, #0]
   21fd2:	f3bf 8f5b 	dmb	ish
   21fd6:	e853 1f00 	ldrex	r1, [r3]
   21fda:	2901      	cmp	r1, #1
   21fdc:	d103      	bne.n	21fe6 <mutex_unlock_platform+0x22>
   21fde:	e843 2000 	strex	r0, r2, [r3]
   21fe2:	2800      	cmp	r0, #0
   21fe4:	d1f7      	bne.n	21fd6 <mutex_unlock_platform+0x12>
   21fe6:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   21fea:	4807      	ldr	r0, [pc, #28]	; (22008 <mutex_unlock_platform+0x44>)
   21fec:	bf08      	it	eq
   21fee:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   21ff0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   21ff2:	b13b      	cbz	r3, 22004 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   21ff4:	6800      	ldr	r0, [r0, #0]
   21ff6:	f00d fd37 	bl	2fa68 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   21ffa:	2000      	movs	r0, #0
   21ffc:	e7f8      	b.n	21ff0 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   21ffe:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   22002:	e7f5      	b.n	21ff0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   22004:	4801      	ldr	r0, [pc, #4]	; (2200c <mutex_unlock_platform+0x48>)
   22006:	e7f3      	b.n	21ff0 <mutex_unlock_platform+0x2c>
   22008:	ffff8fe9 	.word	0xffff8fe9
   2200c:	ffff8fea 	.word	0xffff8fea

00022010 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   22010:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   22012:	4604      	mov	r4, r0
   22014:	b918      	cbnz	r0, 2201e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   22016:	4b0d      	ldr	r3, [pc, #52]	; (2204c <mutex_free_platform+0x3c>)
   22018:	480d      	ldr	r0, [pc, #52]	; (22050 <mutex_free_platform+0x40>)
   2201a:	685b      	ldr	r3, [r3, #4]
   2201c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   2201e:	6861      	ldr	r1, [r4, #4]
   22020:	2908      	cmp	r1, #8
   22022:	d00d      	beq.n	22040 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   22024:	f031 0304 	bics.w	r3, r1, #4
   22028:	d00a      	beq.n	22040 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   2202a:	f011 0102 	ands.w	r1, r1, #2
   2202e:	d008      	beq.n	22042 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   22030:	4808      	ldr	r0, [pc, #32]	; (22054 <mutex_free_platform+0x44>)
   22032:	4621      	mov	r1, r4
   22034:	f00d fa20 	bl	2f478 <k_mem_slab_free>
        mutex->mutex = NULL;
   22038:	2300      	movs	r3, #0
   2203a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   2203c:	2300      	movs	r3, #0
   2203e:	6063      	str	r3, [r4, #4]
}
   22040:	bd10      	pop	{r4, pc}
   22042:	6820      	ldr	r0, [r4, #0]
   22044:	2214      	movs	r2, #20
   22046:	f018 fa97 	bl	3a578 <memset>
   2204a:	e7f7      	b.n	2203c <mutex_free_platform+0x2c>
   2204c:	20000708 	.word	0x20000708
   22050:	0003d564 	.word	0x0003d564
   22054:	20002444 	.word	0x20002444

00022058 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   22058:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   2205a:	4604      	mov	r4, r0
   2205c:	b918      	cbnz	r0, 22066 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   2205e:	4b16      	ldr	r3, [pc, #88]	; (220b8 <mutex_init_platform+0x60>)
   22060:	4816      	ldr	r0, [pc, #88]	; (220bc <mutex_init_platform+0x64>)
   22062:	685b      	ldr	r3, [r3, #4]
   22064:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   22066:	6863      	ldr	r3, [r4, #4]
   22068:	2b04      	cmp	r3, #4
   2206a:	d023      	beq.n	220b4 <mutex_init_platform+0x5c>
   2206c:	2b08      	cmp	r3, #8
   2206e:	d021      	beq.n	220b4 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   22070:	b9cb      	cbnz	r3, 220a6 <mutex_init_platform+0x4e>
   22072:	6823      	ldr	r3, [r4, #0]
   22074:	b9bb      	cbnz	r3, 220a6 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   22076:	4812      	ldr	r0, [pc, #72]	; (220c0 <mutex_init_platform+0x68>)
   22078:	f04f 32ff 	mov.w	r2, #4294967295
   2207c:	f04f 33ff 	mov.w	r3, #4294967295
   22080:	4621      	mov	r1, r4
   22082:	f00d f98d 	bl	2f3a0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   22086:	b908      	cbnz	r0, 2208c <mutex_init_platform+0x34>
   22088:	6823      	ldr	r3, [r4, #0]
   2208a:	b91b      	cbnz	r3, 22094 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   2208c:	4b0a      	ldr	r3, [pc, #40]	; (220b8 <mutex_init_platform+0x60>)
   2208e:	480d      	ldr	r0, [pc, #52]	; (220c4 <mutex_init_platform+0x6c>)
   22090:	685b      	ldr	r3, [r3, #4]
   22092:	4798      	blx	r3
   22094:	6820      	ldr	r0, [r4, #0]
   22096:	2214      	movs	r2, #20
   22098:	2100      	movs	r1, #0
   2209a:	f018 fa6d 	bl	3a578 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   2209e:	6863      	ldr	r3, [r4, #4]
   220a0:	f043 0302 	orr.w	r3, r3, #2
   220a4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   220a6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   220a8:	f018 f8ae 	bl	3a208 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   220ac:	6863      	ldr	r3, [r4, #4]
   220ae:	f043 0301 	orr.w	r3, r3, #1
   220b2:	6063      	str	r3, [r4, #4]
}
   220b4:	bd10      	pop	{r4, pc}
   220b6:	bf00      	nop
   220b8:	20000708 	.word	0x20000708
   220bc:	0003d564 	.word	0x0003d564
   220c0:	20002444 	.word	0x20002444
   220c4:	0003d58a 	.word	0x0003d58a

000220c8 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   220c8:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   220ca:	b308      	cbz	r0, 22110 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   220cc:	6843      	ldr	r3, [r0, #4]
   220ce:	2b04      	cmp	r3, #4
   220d0:	d110      	bne.n	220f4 <mutex_lock_platform+0x2c>
   220d2:	2201      	movs	r2, #1
   220d4:	6803      	ldr	r3, [r0, #0]
   220d6:	f3bf 8f5b 	dmb	ish
   220da:	e853 1f00 	ldrex	r1, [r3]
   220de:	2900      	cmp	r1, #0
   220e0:	d103      	bne.n	220ea <mutex_lock_platform+0x22>
   220e2:	e843 2000 	strex	r0, r2, [r3]
   220e6:	2800      	cmp	r0, #0
   220e8:	d1f7      	bne.n	220da <mutex_lock_platform+0x12>
   220ea:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   220ee:	d10b      	bne.n	22108 <mutex_lock_platform+0x40>
   220f0:	2000      	movs	r0, #0
}
   220f2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   220f4:	b153      	cbz	r3, 2210c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   220f6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   220f8:	f04f 32ff 	mov.w	r2, #4294967295
   220fc:	f04f 33ff 	mov.w	r3, #4294967295
   22100:	f00d fbb2 	bl	2f868 <z_impl_k_mutex_lock>
        if (ret == 0) {
   22104:	2800      	cmp	r0, #0
   22106:	d0f3      	beq.n	220f0 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   22108:	4803      	ldr	r0, [pc, #12]	; (22118 <mutex_lock_platform+0x50>)
   2210a:	e7f2      	b.n	220f2 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   2210c:	4803      	ldr	r0, [pc, #12]	; (2211c <mutex_lock_platform+0x54>)
   2210e:	e7f0      	b.n	220f2 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   22110:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   22114:	e7ed      	b.n	220f2 <mutex_lock_platform+0x2a>
   22116:	bf00      	nop
   22118:	ffff8fe9 	.word	0xffff8fe9
   2211c:	ffff8fea 	.word	0xffff8fea

00022120 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   22120:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   22122:	4906      	ldr	r1, [pc, #24]	; (2213c <nrf_cc3xx_platform_mutex_init+0x1c>)
   22124:	4806      	ldr	r0, [pc, #24]	; (22140 <nrf_cc3xx_platform_mutex_init+0x20>)
   22126:	2340      	movs	r3, #64	; 0x40
   22128:	2214      	movs	r2, #20
   2212a:	f018 f83d 	bl	3a1a8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   2212e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   22132:	4904      	ldr	r1, [pc, #16]	; (22144 <nrf_cc3xx_platform_mutex_init+0x24>)
   22134:	4804      	ldr	r0, [pc, #16]	; (22148 <nrf_cc3xx_platform_mutex_init+0x28>)
   22136:	f011 b939 	b.w	333ac <nrf_cc3xx_platform_set_mutexes>
   2213a:	bf00      	nop
   2213c:	20002464 	.word	0x20002464
   22140:	20002444 	.word	0x20002444
   22144:	0003b8e8 	.word	0x0003b8e8
   22148:	0003b8d8 	.word	0x0003b8d8

0002214c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   2214c:	4901      	ldr	r1, [pc, #4]	; (22154 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2214e:	2210      	movs	r2, #16
	str	r2, [r1]
   22150:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   22152:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   22154:	e000ed10 	.word	0xe000ed10

00022158 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   22158:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2215a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   2215c:	f380 8811 	msr	BASEPRI, r0
	isb
   22160:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   22164:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   22168:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2216a:	b662      	cpsie	i
	isb
   2216c:	f3bf 8f6f 	isb	sy

	bx	lr
   22170:	4770      	bx	lr
   22172:	bf00      	nop

00022174 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   22174:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   22176:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   22178:	f381 8811 	msr	BASEPRI, r1

	wfe
   2217c:	bf20      	wfe

	msr	BASEPRI, r0
   2217e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   22182:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   22184:	4770      	bx	lr
   22186:	bf00      	nop

00022188 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22188:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2218a:	4606      	mov	r6, r0

	if (esf != NULL) {
   2218c:	460c      	mov	r4, r1
   2218e:	b301      	cbz	r1, 221d2 <z_arm_fatal_error+0x4a>
   22190:	4b13      	ldr	r3, [pc, #76]	; (221e0 <z_arm_fatal_error+0x58>)
   22192:	4d14      	ldr	r5, [pc, #80]	; (221e4 <z_arm_fatal_error+0x5c>)
   22194:	1aed      	subs	r5, r5, r3
   22196:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   22198:	688b      	ldr	r3, [r1, #8]
   2219a:	9300      	str	r3, [sp, #0]
   2219c:	01ad      	lsls	r5, r5, #6
   2219e:	f045 0501 	orr.w	r5, r5, #1
   221a2:	e9d1 2300 	ldrd	r2, r3, [r1]
   221a6:	4628      	mov	r0, r5
   221a8:	490f      	ldr	r1, [pc, #60]	; (221e8 <z_arm_fatal_error+0x60>)
   221aa:	f015 f971 	bl	37490 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   221ae:	6963      	ldr	r3, [r4, #20]
   221b0:	9300      	str	r3, [sp, #0]
   221b2:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   221b6:	490d      	ldr	r1, [pc, #52]	; (221ec <z_arm_fatal_error+0x64>)
   221b8:	4628      	mov	r0, r5
   221ba:	f015 f969 	bl	37490 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   221be:	69e2      	ldr	r2, [r4, #28]
   221c0:	490b      	ldr	r1, [pc, #44]	; (221f0 <z_arm_fatal_error+0x68>)
   221c2:	4628      	mov	r0, r5
   221c4:	f015 f964 	bl	37490 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   221c8:	69a2      	ldr	r2, [r4, #24]
   221ca:	490a      	ldr	r1, [pc, #40]	; (221f4 <z_arm_fatal_error+0x6c>)
   221cc:	4628      	mov	r0, r5
   221ce:	f015 f95f 	bl	37490 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   221d2:	4621      	mov	r1, r4
   221d4:	4630      	mov	r0, r6
}
   221d6:	b002      	add	sp, #8
   221d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   221dc:	f00c be3c 	b.w	2ee58 <z_fatal_error>
   221e0:	0003b448 	.word	0x0003b448
   221e4:	0003b540 	.word	0x0003b540
   221e8:	0003d5b7 	.word	0x0003d5b7
   221ec:	0003d5e6 	.word	0x0003d5e6
   221f0:	0003d615 	.word	0x0003d615
   221f4:	0003d624 	.word	0x0003d624

000221f8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   221f8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   221fa:	2b00      	cmp	r3, #0
   221fc:	db08      	blt.n	22210 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   221fe:	2201      	movs	r2, #1
   22200:	f000 001f 	and.w	r0, r0, #31
   22204:	fa02 f000 	lsl.w	r0, r2, r0
   22208:	095b      	lsrs	r3, r3, #5
   2220a:	4a02      	ldr	r2, [pc, #8]	; (22214 <arch_irq_enable+0x1c>)
   2220c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   22210:	4770      	bx	lr
   22212:	bf00      	nop
   22214:	e000e100 	.word	0xe000e100

00022218 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   22218:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2221a:	2b00      	cmp	r3, #0
   2221c:	db0d      	blt.n	2223a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2221e:	2201      	movs	r2, #1
   22220:	095b      	lsrs	r3, r3, #5
   22222:	f000 001f 	and.w	r0, r0, #31
   22226:	fa02 f000 	lsl.w	r0, r2, r0
   2222a:	3320      	adds	r3, #32
   2222c:	4a03      	ldr	r2, [pc, #12]	; (2223c <arch_irq_disable+0x24>)
   2222e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   22232:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22236:	f3bf 8f6f 	isb	sy
}
   2223a:	4770      	bx	lr
   2223c:	e000e100 	.word	0xe000e100

00022240 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   22240:	4b05      	ldr	r3, [pc, #20]	; (22258 <arch_irq_is_enabled+0x18>)
   22242:	0942      	lsrs	r2, r0, #5
   22244:	f000 001f 	and.w	r0, r0, #31
   22248:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2224c:	2301      	movs	r3, #1
   2224e:	fa03 f000 	lsl.w	r0, r3, r0
}
   22252:	4010      	ands	r0, r2
   22254:	4770      	bx	lr
   22256:	bf00      	nop
   22258:	e000e100 	.word	0xe000e100

0002225c <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   2225c:	07d3      	lsls	r3, r2, #31
{
   2225e:	b570      	push	{r4, r5, r6, lr}
   22260:	4605      	mov	r5, r0
   22262:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   22264:	d425      	bmi.n	222b2 <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   22266:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   22268:	2c07      	cmp	r4, #7
   2226a:	d90f      	bls.n	2228c <z_arm_irq_priority_set+0x30>
   2226c:	4a12      	ldr	r2, [pc, #72]	; (222b8 <z_arm_irq_priority_set+0x5c>)
   2226e:	4913      	ldr	r1, [pc, #76]	; (222bc <z_arm_irq_priority_set+0x60>)
   22270:	4813      	ldr	r0, [pc, #76]	; (222c0 <z_arm_irq_priority_set+0x64>)
   22272:	2359      	movs	r3, #89	; 0x59
   22274:	f014 ff51 	bl	3711a <printk>
   22278:	4812      	ldr	r0, [pc, #72]	; (222c4 <z_arm_irq_priority_set+0x68>)
   2227a:	4631      	mov	r1, r6
   2227c:	2306      	movs	r3, #6
   2227e:	462a      	mov	r2, r5
   22280:	f014 ff4b 	bl	3711a <printk>
   22284:	480c      	ldr	r0, [pc, #48]	; (222b8 <z_arm_irq_priority_set+0x5c>)
   22286:	2159      	movs	r1, #89	; 0x59
   22288:	f015 f8ed 	bl	37466 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2228c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2228e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22290:	bfac      	ite	ge
   22292:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22296:	4b0c      	ldrlt	r3, [pc, #48]	; (222c8 <z_arm_irq_priority_set+0x6c>)
   22298:	ea4f 1444 	mov.w	r4, r4, lsl #5
   2229c:	bfb8      	it	lt
   2229e:	f005 050f 	andlt.w	r5, r5, #15
   222a2:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   222a4:	bfaa      	itet	ge
   222a6:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   222aa:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   222ac:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   222b0:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   222b2:	2400      	movs	r4, #0
   222b4:	e7ea      	b.n	2228c <z_arm_irq_priority_set+0x30>
   222b6:	bf00      	nop
   222b8:	0003d652 	.word	0x0003d652
   222bc:	0003d688 	.word	0x0003d688
   222c0:	0003c48a 	.word	0x0003c48a
   222c4:	0003d6a3 	.word	0x0003d6a3
   222c8:	e000ed14 	.word	0xe000ed14

000222cc <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   222cc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   222ce:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   222d0:	4b04      	ldr	r3, [pc, #16]	; (222e4 <_arch_isr_direct_pm+0x18>)
   222d2:	699a      	ldr	r2, [r3, #24]
   222d4:	b11a      	cbz	r2, 222de <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   222d6:	2200      	movs	r2, #0
   222d8:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   222da:	f017 ff8e 	bl	3a1fa <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   222de:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   222e0:	bd08      	pop	{r3, pc}
   222e2:	bf00      	nop
   222e4:	20002d00 	.word	0x20002d00

000222e8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   222e8:	bf30      	wfi
    b z_SysNmiOnReset
   222ea:	f7ff bffd 	b.w	222e8 <z_SysNmiOnReset>
   222ee:	bf00      	nop

000222f0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   222f0:	4a0b      	ldr	r2, [pc, #44]	; (22320 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   222f2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   222f4:	4b0b      	ldr	r3, [pc, #44]	; (22324 <z_arm_prep_c+0x34>)
   222f6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   222fa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   222fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22300:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   22304:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   22308:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2230c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   22310:	f00c fe5c 	bl	2efcc <z_bss_zero>
	z_data_copy();
   22314:	f00f fe38 	bl	31f88 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   22318:	f000 fb7a 	bl	22a10 <z_arm_interrupt_init>
	z_cstart();
   2231c:	f00c fe60 	bl	2efe0 <z_cstart>
   22320:	0000c200 	.word	0x0000c200
   22324:	e000ed00 	.word	0xe000ed00

00022328 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   22328:	4a09      	ldr	r2, [pc, #36]	; (22350 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2232a:	490a      	ldr	r1, [pc, #40]	; (22354 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2232c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2232e:	6809      	ldr	r1, [r1, #0]
   22330:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22332:	4909      	ldr	r1, [pc, #36]	; (22358 <arch_swap+0x30>)
	_current->arch.basepri = key;
   22334:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22336:	684b      	ldr	r3, [r1, #4]
   22338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2233c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   2233e:	2300      	movs	r3, #0
   22340:	f383 8811 	msr	BASEPRI, r3
   22344:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   22348:	6893      	ldr	r3, [r2, #8]
}
   2234a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   2234c:	4770      	bx	lr
   2234e:	bf00      	nop
   22350:	20002d00 	.word	0x20002d00
   22354:	0003be3c 	.word	0x0003be3c
   22358:	e000ed00 	.word	0xe000ed00

0002235c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2235c:	4912      	ldr	r1, [pc, #72]	; (223a8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2235e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   22360:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   22364:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   22366:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2236a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2236e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   22370:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   22374:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   22378:	4f0c      	ldr	r7, [pc, #48]	; (223ac <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2237a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2237e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   22380:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   22382:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   22384:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   22386:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   22388:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2238a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   2238e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   22390:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   22392:	f000 fbd3 	bl	22b3c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   22396:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2239a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2239e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   223a2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   223a6:	4770      	bx	lr
    ldr r1, =_kernel
   223a8:	20002d00 	.word	0x20002d00
    ldr v4, =_SCS_ICSR
   223ac:	e000ed04 	.word	0xe000ed04

000223b0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   223b0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   223b4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   223b6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   223ba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   223be:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   223c0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   223c4:	2902      	cmp	r1, #2
    beq _oops
   223c6:	d0ff      	beq.n	223c8 <_oops>

000223c8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   223c8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   223ca:	f015 fe25 	bl	38018 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   223ce:	bd01      	pop	{r0, pc}

000223d0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   223d0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   223d4:	9b00      	ldr	r3, [sp, #0]
   223d6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   223da:	490a      	ldr	r1, [pc, #40]	; (22404 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   223dc:	9b01      	ldr	r3, [sp, #4]
   223de:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   223e2:	9b02      	ldr	r3, [sp, #8]
   223e4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   223e8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   223ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   223f0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   223f4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   223f8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   223fa:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   223fc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   223fe:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   22400:	4770      	bx	lr
   22402:	bf00      	nop
   22404:	000371f7 	.word	0x000371f7

00022408 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   22408:	4a0b      	ldr	r2, [pc, #44]	; (22438 <z_check_thread_stack_fail+0x30>)
{
   2240a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   2240c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   2240e:	b190      	cbz	r0, 22436 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   22410:	f113 0f16 	cmn.w	r3, #22
   22414:	6e80      	ldr	r0, [r0, #104]	; 0x68
   22416:	d005      	beq.n	22424 <z_check_thread_stack_fail+0x1c>
   22418:	f1a0 0220 	sub.w	r2, r0, #32
   2241c:	429a      	cmp	r2, r3
   2241e:	d806      	bhi.n	2242e <z_check_thread_stack_fail+0x26>
   22420:	4283      	cmp	r3, r0
   22422:	d204      	bcs.n	2242e <z_check_thread_stack_fail+0x26>
   22424:	4281      	cmp	r1, r0
   22426:	bf2c      	ite	cs
   22428:	2100      	movcs	r1, #0
   2242a:	2101      	movcc	r1, #1
   2242c:	e000      	b.n	22430 <z_check_thread_stack_fail+0x28>
   2242e:	2100      	movs	r1, #0
   22430:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   22432:	bf08      	it	eq
   22434:	2000      	moveq	r0, #0
}
   22436:	4770      	bx	lr
   22438:	20002d00 	.word	0x20002d00

0002243c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   2243c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2243e:	4b09      	ldr	r3, [pc, #36]	; (22464 <arch_switch_to_main_thread+0x28>)
   22440:	6098      	str	r0, [r3, #8]
{
   22442:	460d      	mov	r5, r1
   22444:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   22446:	f000 fb79 	bl	22b3c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2244a:	4620      	mov	r0, r4
   2244c:	f385 8809 	msr	PSP, r5
   22450:	2100      	movs	r1, #0
   22452:	b663      	cpsie	if
   22454:	f381 8811 	msr	BASEPRI, r1
   22458:	f3bf 8f6f 	isb	sy
   2245c:	2200      	movs	r2, #0
   2245e:	2300      	movs	r3, #0
   22460:	f014 fec9 	bl	371f6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   22464:	20002d00 	.word	0x20002d00

00022468 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   22468:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2246a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2246c:	4a0b      	ldr	r2, [pc, #44]	; (2249c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2246e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   22470:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   22472:	bf1e      	ittt	ne
	movne	r1, #0
   22474:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   22476:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   22478:	f017 febf 	blne	3a1fa <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2247c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2247e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   22482:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   22486:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2248a:	4905      	ldr	r1, [pc, #20]	; (224a0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2248c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2248e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   22490:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   22492:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   22496:	4903      	ldr	r1, [pc, #12]	; (224a4 <_isr_wrapper+0x3c>)
	bx r1
   22498:	4708      	bx	r1
   2249a:	0000      	.short	0x0000
	ldr r2, =_kernel
   2249c:	20002d00 	.word	0x20002d00
	ldr r1, =_sw_isr_table
   224a0:	0003b228 	.word	0x0003b228
	ldr r1, =z_arm_int_exit
   224a4:	000224a9 	.word	0x000224a9

000224a8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   224a8:	4b04      	ldr	r3, [pc, #16]	; (224bc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   224aa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   224ac:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   224ae:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   224b0:	d003      	beq.n	224ba <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   224b2:	4903      	ldr	r1, [pc, #12]	; (224c0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   224b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   224b8:	600a      	str	r2, [r1, #0]

000224ba <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   224ba:	4770      	bx	lr
	ldr r3, =_kernel
   224bc:	20002d00 	.word	0x20002d00
	ldr r1, =_SCS_ICSR
   224c0:	e000ed04 	.word	0xe000ed04

000224c4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   224c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   224c8:	4b3f      	ldr	r3, [pc, #252]	; (225c8 <mem_manage_fault+0x104>)
   224ca:	4c40      	ldr	r4, [pc, #256]	; (225cc <mem_manage_fault+0x108>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   224cc:	4d40      	ldr	r5, [pc, #256]	; (225d0 <mem_manage_fault+0x10c>)
   224ce:	1ae4      	subs	r4, r4, r3
   224d0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   224d2:	01a4      	lsls	r4, r4, #6
   224d4:	f044 0901 	orr.w	r9, r4, #1
{
   224d8:	4607      	mov	r7, r0
   224da:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   224dc:	4648      	mov	r0, r9
   224de:	493d      	ldr	r1, [pc, #244]	; (225d4 <mem_manage_fault+0x110>)
{
   224e0:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   224e2:	f014 ffd5 	bl	37490 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   224e6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   224e8:	06d3      	lsls	r3, r2, #27
   224ea:	d503      	bpl.n	224f4 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   224ec:	493a      	ldr	r1, [pc, #232]	; (225d8 <mem_manage_fault+0x114>)
   224ee:	4648      	mov	r0, r9
   224f0:	f014 ffce 	bl	37490 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   224f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   224f6:	0718      	lsls	r0, r3, #28
   224f8:	d504      	bpl.n	22504 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   224fa:	4938      	ldr	r1, [pc, #224]	; (225dc <mem_manage_fault+0x118>)
   224fc:	f044 0001 	orr.w	r0, r4, #1
   22500:	f014 ffc6 	bl	37490 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   22504:	4d32      	ldr	r5, [pc, #200]	; (225d0 <mem_manage_fault+0x10c>)
   22506:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22508:	0799      	lsls	r1, r3, #30
   2250a:	d424      	bmi.n	22556 <mem_manage_fault+0x92>
	uint32_t mmfar = -EINVAL;
   2250c:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   22510:	4d2f      	ldr	r5, [pc, #188]	; (225d0 <mem_manage_fault+0x10c>)
   22512:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22514:	07d3      	lsls	r3, r2, #31
   22516:	d504      	bpl.n	22522 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   22518:	4931      	ldr	r1, [pc, #196]	; (225e0 <mem_manage_fault+0x11c>)
   2251a:	f044 0001 	orr.w	r0, r4, #1
   2251e:	f014 ffb7 	bl	37490 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   22522:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22524:	069d      	lsls	r5, r3, #26
   22526:	d504      	bpl.n	22532 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   22528:	492e      	ldr	r1, [pc, #184]	; (225e4 <mem_manage_fault+0x120>)
   2252a:	f044 0001 	orr.w	r0, r4, #1
   2252e:	f014 ffaf 	bl	37490 <log_string_sync>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   22532:	4d27      	ldr	r5, [pc, #156]	; (225d0 <mem_manage_fault+0x10c>)
   22534:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22536:	06d8      	lsls	r0, r3, #27
   22538:	d425      	bmi.n	22586 <mem_manage_fault+0xc2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   2253a:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2253c:	0799      	lsls	r1, r3, #30
   2253e:	d422      	bmi.n	22586 <mem_manage_fault+0xc2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   22540:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   22542:	4a23      	ldr	r2, [pc, #140]	; (225d0 <mem_manage_fault+0x10c>)
   22544:	6a93      	ldr	r3, [r2, #40]	; 0x28
   22546:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   2254a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   2254c:	2300      	movs	r3, #0
   2254e:	7033      	strb	r3, [r6, #0]

	return reason;
}
   22550:	4620      	mov	r0, r4
   22552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   22556:	f044 0a01 	orr.w	sl, r4, #1
   2255a:	4923      	ldr	r1, [pc, #140]	; (225e8 <mem_manage_fault+0x124>)
   2255c:	4650      	mov	r0, sl
   2255e:	f014 ff97 	bl	37490 <log_string_sync>
		uint32_t temp = SCB->MMFAR;
   22562:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   22566:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22568:	061a      	lsls	r2, r3, #24
   2256a:	d5cf      	bpl.n	2250c <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   2256c:	491f      	ldr	r1, [pc, #124]	; (225ec <mem_manage_fault+0x128>)
   2256e:	464a      	mov	r2, r9
   22570:	4650      	mov	r0, sl
   22572:	f014 ff8d 	bl	37490 <log_string_sync>
			if (from_hard_fault != 0) {
   22576:	f1b8 0f00 	cmp.w	r8, #0
   2257a:	d0c9      	beq.n	22510 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2257c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2257e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   22582:	62ab      	str	r3, [r5, #40]	; 0x28
   22584:	e7c4      	b.n	22510 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   22586:	686b      	ldr	r3, [r5, #4]
   22588:	051a      	lsls	r2, r3, #20
   2258a:	d5d9      	bpl.n	22540 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   2258c:	4639      	mov	r1, r7
   2258e:	4648      	mov	r0, r9
   22590:	f7ff ff3a 	bl	22408 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   22594:	4604      	mov	r4, r0
   22596:	b118      	cbz	r0, 225a0 <mem_manage_fault+0xdc>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   22598:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   2259c:	2402      	movs	r4, #2
   2259e:	e7d0      	b.n	22542 <mem_manage_fault+0x7e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   225a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   225a2:	06db      	lsls	r3, r3, #27
   225a4:	d5cc      	bpl.n	22540 <mem_manage_fault+0x7c>
   225a6:	4a12      	ldr	r2, [pc, #72]	; (225f0 <mem_manage_fault+0x12c>)
   225a8:	4912      	ldr	r1, [pc, #72]	; (225f4 <mem_manage_fault+0x130>)
   225aa:	4813      	ldr	r0, [pc, #76]	; (225f8 <mem_manage_fault+0x134>)
   225ac:	f240 1349 	movw	r3, #329	; 0x149
   225b0:	f014 fdb3 	bl	3711a <printk>
   225b4:	4811      	ldr	r0, [pc, #68]	; (225fc <mem_manage_fault+0x138>)
   225b6:	f014 fdb0 	bl	3711a <printk>
   225ba:	480d      	ldr	r0, [pc, #52]	; (225f0 <mem_manage_fault+0x12c>)
   225bc:	f240 1149 	movw	r1, #329	; 0x149
   225c0:	f014 ff51 	bl	37466 <assert_post_action>
   225c4:	e7bd      	b.n	22542 <mem_manage_fault+0x7e>
   225c6:	bf00      	nop
   225c8:	0003b448 	.word	0x0003b448
   225cc:	0003b540 	.word	0x0003b540
   225d0:	e000ed00 	.word	0xe000ed00
   225d4:	0003d6e3 	.word	0x0003d6e3
   225d8:	0003d6f9 	.word	0x0003d6f9
   225dc:	0003d72c 	.word	0x0003d72c
   225e0:	0003d76d 	.word	0x0003d76d
   225e4:	0003d78c 	.word	0x0003d78c
   225e8:	0003d73f 	.word	0x0003d73f
   225ec:	0003d757 	.word	0x0003d757
   225f0:	0003d7bb 	.word	0x0003d7bb
   225f4:	0003d7f5 	.word	0x0003d7f5
   225f8:	0003c48a 	.word	0x0003c48a
   225fc:	0003d83f 	.word	0x0003d83f

00022600 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   22600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22604:	4b29      	ldr	r3, [pc, #164]	; (226ac <bus_fault.isra.0+0xac>)
   22606:	4c2a      	ldr	r4, [pc, #168]	; (226b0 <bus_fault.isra.0+0xb0>)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   22608:	4d2a      	ldr	r5, [pc, #168]	; (226b4 <bus_fault.isra.0+0xb4>)
   2260a:	1ae4      	subs	r4, r4, r3
   2260c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   2260e:	01a4      	lsls	r4, r4, #6
   22610:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   22614:	4607      	mov	r7, r0
   22616:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   22618:	4640      	mov	r0, r8
   2261a:	4927      	ldr	r1, [pc, #156]	; (226b8 <bus_fault.isra.0+0xb8>)
   2261c:	f014 ff38 	bl	37490 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   22620:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22622:	04d1      	lsls	r1, r2, #19
   22624:	d503      	bpl.n	2262e <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   22626:	4925      	ldr	r1, [pc, #148]	; (226bc <bus_fault.isra.0+0xbc>)
   22628:	4640      	mov	r0, r8
   2262a:	f014 ff31 	bl	37490 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2262e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22630:	051a      	lsls	r2, r3, #20
   22632:	d504      	bpl.n	2263e <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   22634:	4922      	ldr	r1, [pc, #136]	; (226c0 <bus_fault.isra.0+0xc0>)
   22636:	f044 0001 	orr.w	r0, r4, #1
   2263a:	f014 ff29 	bl	37490 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2263e:	4d1d      	ldr	r5, [pc, #116]	; (226b4 <bus_fault.isra.0+0xb4>)
   22640:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22642:	059b      	lsls	r3, r3, #22
   22644:	d512      	bpl.n	2266c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   22646:	f044 0801 	orr.w	r8, r4, #1
   2264a:	4640      	mov	r0, r8
   2264c:	491d      	ldr	r1, [pc, #116]	; (226c4 <bus_fault.isra.0+0xc4>)
   2264e:	f014 ff1f 	bl	37490 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   22652:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   22654:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22656:	0418      	lsls	r0, r3, #16
   22658:	d508      	bpl.n	2266c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   2265a:	491b      	ldr	r1, [pc, #108]	; (226c8 <bus_fault.isra.0+0xc8>)
   2265c:	4640      	mov	r0, r8
   2265e:	f014 ff17 	bl	37490 <log_string_sync>
			if (from_hard_fault != 0) {
   22662:	b11f      	cbz	r7, 2266c <bus_fault.isra.0+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   22664:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22666:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   2266a:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2266c:	4d11      	ldr	r5, [pc, #68]	; (226b4 <bus_fault.isra.0+0xb4>)
   2266e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22670:	0559      	lsls	r1, r3, #21
   22672:	d504      	bpl.n	2267e <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   22674:	4915      	ldr	r1, [pc, #84]	; (226cc <bus_fault.isra.0+0xcc>)
   22676:	f044 0001 	orr.w	r0, r4, #1
   2267a:	f014 ff09 	bl	37490 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2267e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22680:	05da      	lsls	r2, r3, #23
   22682:	d50d      	bpl.n	226a0 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   22684:	4912      	ldr	r1, [pc, #72]	; (226d0 <bus_fault.isra.0+0xd0>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   22686:	f044 0001 	orr.w	r0, r4, #1
   2268a:	f014 ff01 	bl	37490 <log_string_sync>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2268e:	4a09      	ldr	r2, [pc, #36]	; (226b4 <bus_fault.isra.0+0xb4>)
   22690:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   22692:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   22694:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   22698:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2269a:	7030      	strb	r0, [r6, #0]

	return reason;
}
   2269c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   226a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   226a2:	049b      	lsls	r3, r3, #18
   226a4:	d5f3      	bpl.n	2268e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   226a6:	490b      	ldr	r1, [pc, #44]	; (226d4 <bus_fault.isra.0+0xd4>)
   226a8:	e7ed      	b.n	22686 <bus_fault.isra.0+0x86>
   226aa:	bf00      	nop
   226ac:	0003b448 	.word	0x0003b448
   226b0:	0003b540 	.word	0x0003b540
   226b4:	e000ed00 	.word	0xe000ed00
   226b8:	0003d862 	.word	0x0003d862
   226bc:	0003d878 	.word	0x0003d878
   226c0:	0003d72c 	.word	0x0003d72c
   226c4:	0003d889 	.word	0x0003d889
   226c8:	0003d8a2 	.word	0x0003d8a2
   226cc:	0003d8b7 	.word	0x0003d8b7
   226d0:	0003d8d2 	.word	0x0003d8d2
   226d4:	0003d78c 	.word	0x0003d78c

000226d8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   226d8:	b570      	push	{r4, r5, r6, lr}
   226da:	4b23      	ldr	r3, [pc, #140]	; (22768 <usage_fault.isra.0+0x90>)
   226dc:	4c23      	ldr	r4, [pc, #140]	; (2276c <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   226de:	4d24      	ldr	r5, [pc, #144]	; (22770 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   226e0:	4924      	ldr	r1, [pc, #144]	; (22774 <usage_fault.isra.0+0x9c>)
   226e2:	1ae4      	subs	r4, r4, r3
   226e4:	08e4      	lsrs	r4, r4, #3
   226e6:	01a4      	lsls	r4, r4, #6
   226e8:	f044 0601 	orr.w	r6, r4, #1
   226ec:	4630      	mov	r0, r6
   226ee:	f014 fecf 	bl	37490 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   226f2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   226f4:	0193      	lsls	r3, r2, #6
   226f6:	d503      	bpl.n	22700 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   226f8:	491f      	ldr	r1, [pc, #124]	; (22778 <usage_fault.isra.0+0xa0>)
   226fa:	4630      	mov	r0, r6
   226fc:	f014 fec8 	bl	37490 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   22700:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22702:	01dd      	lsls	r5, r3, #7
   22704:	d504      	bpl.n	22710 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   22706:	491d      	ldr	r1, [pc, #116]	; (2277c <usage_fault.isra.0+0xa4>)
   22708:	f044 0001 	orr.w	r0, r4, #1
   2270c:	f014 fec0 	bl	37490 <log_string_sync>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   22710:	4d17      	ldr	r5, [pc, #92]	; (22770 <usage_fault.isra.0+0x98>)
   22712:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22714:	0310      	lsls	r0, r2, #12
   22716:	d504      	bpl.n	22722 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   22718:	4919      	ldr	r1, [pc, #100]	; (22780 <usage_fault.isra.0+0xa8>)
   2271a:	f044 0001 	orr.w	r0, r4, #1
   2271e:	f014 feb7 	bl	37490 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   22722:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22724:	0359      	lsls	r1, r3, #13
   22726:	d504      	bpl.n	22732 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   22728:	4916      	ldr	r1, [pc, #88]	; (22784 <usage_fault.isra.0+0xac>)
   2272a:	f044 0001 	orr.w	r0, r4, #1
   2272e:	f014 feaf 	bl	37490 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   22732:	4d0f      	ldr	r5, [pc, #60]	; (22770 <usage_fault.isra.0+0x98>)
   22734:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22736:	0392      	lsls	r2, r2, #14
   22738:	d504      	bpl.n	22744 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   2273a:	4913      	ldr	r1, [pc, #76]	; (22788 <usage_fault.isra.0+0xb0>)
   2273c:	f044 0001 	orr.w	r0, r4, #1
   22740:	f014 fea6 	bl	37490 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   22744:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22746:	03db      	lsls	r3, r3, #15
   22748:	d504      	bpl.n	22754 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   2274a:	4910      	ldr	r1, [pc, #64]	; (2278c <usage_fault.isra.0+0xb4>)
   2274c:	f044 0001 	orr.w	r0, r4, #1
   22750:	f014 fe9e 	bl	37490 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   22754:	4a06      	ldr	r2, [pc, #24]	; (22770 <usage_fault.isra.0+0x98>)
   22756:	6a93      	ldr	r3, [r2, #40]	; 0x28
   22758:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   2275c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   22760:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   22762:	2000      	movs	r0, #0
   22764:	bd70      	pop	{r4, r5, r6, pc}
   22766:	bf00      	nop
   22768:	0003b448 	.word	0x0003b448
   2276c:	0003b540 	.word	0x0003b540
   22770:	e000ed00 	.word	0xe000ed00
   22774:	0003d8ea 	.word	0x0003d8ea
   22778:	0003d902 	.word	0x0003d902
   2277c:	0003d915 	.word	0x0003d915
   22780:	0003d92f 	.word	0x0003d92f
   22784:	0003d94d 	.word	0x0003d94d
   22788:	0003d972 	.word	0x0003d972
   2278c:	0003d98c 	.word	0x0003d98c

00022790 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   22790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   22794:	4b7f      	ldr	r3, [pc, #508]	; (22994 <z_arm_fault+0x204>)
   22796:	685e      	ldr	r6, [r3, #4]
{
   22798:	b08a      	sub	sp, #40	; 0x28
   2279a:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2279c:	f3c6 0408 	ubfx	r4, r6, #0, #9
   227a0:	2700      	movs	r7, #0
   227a2:	f387 8811 	msr	BASEPRI, r7
   227a6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   227aa:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   227ae:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   227b2:	d10d      	bne.n	227d0 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   227b4:	f002 030c 	and.w	r3, r2, #12
   227b8:	2b08      	cmp	r3, #8
   227ba:	d11a      	bne.n	227f2 <z_arm_fault+0x62>
   227bc:	4876      	ldr	r0, [pc, #472]	; (22998 <z_arm_fault+0x208>)
   227be:	4b77      	ldr	r3, [pc, #476]	; (2299c <z_arm_fault+0x20c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   227c0:	4977      	ldr	r1, [pc, #476]	; (229a0 <z_arm_fault+0x210>)
   227c2:	1ac0      	subs	r0, r0, r3
   227c4:	08c0      	lsrs	r0, r0, #3
   227c6:	0180      	lsls	r0, r0, #6
   227c8:	f040 0001 	orr.w	r0, r0, #1
   227cc:	f014 fe60 	bl	37490 <log_string_sync>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   227d0:	4a74      	ldr	r2, [pc, #464]	; (229a4 <z_arm_fault+0x214>)
   227d2:	4975      	ldr	r1, [pc, #468]	; (229a8 <z_arm_fault+0x218>)
   227d4:	4875      	ldr	r0, [pc, #468]	; (229ac <z_arm_fault+0x21c>)
   227d6:	f240 33f2 	movw	r3, #1010	; 0x3f2
   227da:	f014 fc9e 	bl	3711a <printk>
   227de:	4874      	ldr	r0, [pc, #464]	; (229b0 <z_arm_fault+0x220>)
   227e0:	f014 fc9b 	bl	3711a <printk>
   227e4:	486f      	ldr	r0, [pc, #444]	; (229a4 <z_arm_fault+0x214>)
   227e6:	f240 31f2 	movw	r1, #1010	; 0x3f2
   227ea:	f014 fe3c 	bl	37466 <assert_post_action>
   227ee:	2500      	movs	r5, #0
   227f0:	e005      	b.n	227fe <z_arm_fault+0x6e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   227f2:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   227f4:	bf5c      	itt	pl
   227f6:	4605      	movpl	r5, r0
			*nested_exc = true;
   227f8:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
   227fa:	2d00      	cmp	r5, #0
   227fc:	d0e8      	beq.n	227d0 <z_arm_fault+0x40>
	*recoverable = false;
   227fe:	2300      	movs	r3, #0
   22800:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   22804:	1ee3      	subs	r3, r4, #3
   22806:	2b09      	cmp	r3, #9
   22808:	f200 80aa 	bhi.w	22960 <z_arm_fault+0x1d0>
   2280c:	e8df f003 	tbb	[pc, r3]
   22810:	779b9705 	.word	0x779b9705
   22814:	a8a8a8a8 	.word	0xa8a8a8a8
   22818:	9fa8      	.short	0x9fa8
   2281a:	4b60      	ldr	r3, [pc, #384]	; (2299c <z_arm_fault+0x20c>)
   2281c:	4e5e      	ldr	r6, [pc, #376]	; (22998 <z_arm_fault+0x208>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   2281e:	4965      	ldr	r1, [pc, #404]	; (229b4 <z_arm_fault+0x224>)
   22820:	1af6      	subs	r6, r6, r3
   22822:	08f6      	lsrs	r6, r6, #3
   22824:	01b6      	lsls	r6, r6, #6
   22826:	f046 0601 	orr.w	r6, r6, #1
   2282a:	4630      	mov	r0, r6
   2282c:	f014 fe30 	bl	37490 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   22830:	4b58      	ldr	r3, [pc, #352]	; (22994 <z_arm_fault+0x204>)
   22832:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   22834:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   22838:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   2283c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   22840:	d005      	beq.n	2284e <z_arm_fault+0xbe>
		PR_EXC("  Bus fault on vector table read");
   22842:	495d      	ldr	r1, [pc, #372]	; (229b8 <z_arm_fault+0x228>)
   22844:	4630      	mov	r0, r6
	PR_FAULT_INFO(
   22846:	f014 fe23 	bl	37490 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2284a:	2400      	movs	r4, #0
}
   2284c:	e006      	b.n	2285c <z_arm_fault+0xcc>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2284e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22850:	2a00      	cmp	r2, #0
   22852:	da24      	bge.n	2289e <z_arm_fault+0x10e>
		PR_EXC("  Debug event");
   22854:	4959      	ldr	r1, [pc, #356]	; (229bc <z_arm_fault+0x22c>)
   22856:	4630      	mov	r0, r6
   22858:	f014 fe1a 	bl	37490 <log_string_sync>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2285c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22860:	b9d3      	cbnz	r3, 22898 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   22862:	aa02      	add	r2, sp, #8
   22864:	f105 0620 	add.w	r6, r5, #32
   22868:	6828      	ldr	r0, [r5, #0]
   2286a:	6869      	ldr	r1, [r5, #4]
   2286c:	4613      	mov	r3, r2
   2286e:	c303      	stmia	r3!, {r0, r1}
   22870:	3508      	adds	r5, #8
   22872:	42b5      	cmp	r5, r6
   22874:	461a      	mov	r2, r3
   22876:	d1f7      	bne.n	22868 <z_arm_fault+0xd8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   22878:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2287a:	2f00      	cmp	r7, #0
   2287c:	f000 8084 	beq.w	22988 <z_arm_fault+0x1f8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   22880:	f3c3 0208 	ubfx	r2, r3, #0, #9
   22884:	b922      	cbnz	r2, 22890 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   22886:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2288a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2288e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   22890:	a902      	add	r1, sp, #8
   22892:	4620      	mov	r0, r4
   22894:	f7ff fc78 	bl	22188 <z_arm_fatal_error>
}
   22898:	b00a      	add	sp, #40	; 0x28
   2289a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   228a0:	005b      	lsls	r3, r3, #1
   228a2:	d53f      	bpl.n	22924 <z_arm_fault+0x194>
		PR_EXC("  Fault escalation (see below)");
   228a4:	4946      	ldr	r1, [pc, #280]	; (229c0 <z_arm_fault+0x230>)
   228a6:	4630      	mov	r0, r6
   228a8:	f014 fdf2 	bl	37490 <log_string_sync>
	uint16_t fault_insn = *(ret_addr - 1);
   228ac:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   228ae:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   228b2:	f64d 7302 	movw	r3, #57090	; 0xdf02
   228b6:	429a      	cmp	r2, r3
   228b8:	d00d      	beq.n	228d6 <z_arm_fault+0x146>
		} else if (SCB_MMFSR != 0) {
   228ba:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   228be:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   228c2:	781b      	ldrb	r3, [r3, #0]
   228c4:	b173      	cbz	r3, 228e4 <z_arm_fault+0x154>
			reason = mem_manage_fault(esf, 1, recoverable);
   228c6:	f10d 0207 	add.w	r2, sp, #7
   228ca:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   228cc:	4628      	mov	r0, r5
   228ce:	f7ff fdf9 	bl	224c4 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   228d2:	4604      	mov	r4, r0
		break;
   228d4:	e7c2      	b.n	2285c <z_arm_fault+0xcc>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   228d6:	682a      	ldr	r2, [r5, #0]
   228d8:	493a      	ldr	r1, [pc, #232]	; (229c4 <z_arm_fault+0x234>)
   228da:	4630      	mov	r0, r6
   228dc:	f014 fdd8 	bl	37490 <log_string_sync>
			reason = esf->basic.r0;
   228e0:	682c      	ldr	r4, [r5, #0]
   228e2:	e7bb      	b.n	2285c <z_arm_fault+0xcc>
		} else if (SCB_BFSR != 0) {
   228e4:	4b38      	ldr	r3, [pc, #224]	; (229c8 <z_arm_fault+0x238>)
   228e6:	781b      	ldrb	r3, [r3, #0]
   228e8:	b12b      	cbz	r3, 228f6 <z_arm_fault+0x166>
			reason = bus_fault(esf, 1, recoverable);
   228ea:	f10d 0107 	add.w	r1, sp, #7
   228ee:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   228f0:	f7ff fe86 	bl	22600 <bus_fault.isra.0>
   228f4:	e7ed      	b.n	228d2 <z_arm_fault+0x142>
		} else if (SCB_UFSR != 0) {
   228f6:	4b35      	ldr	r3, [pc, #212]	; (229cc <z_arm_fault+0x23c>)
   228f8:	881b      	ldrh	r3, [r3, #0]
   228fa:	b29b      	uxth	r3, r3
   228fc:	b113      	cbz	r3, 22904 <z_arm_fault+0x174>
		reason = usage_fault(esf);
   228fe:	f7ff feeb 	bl	226d8 <usage_fault.isra.0>
   22902:	e7e6      	b.n	228d2 <z_arm_fault+0x142>
			__ASSERT(0,
   22904:	4932      	ldr	r1, [pc, #200]	; (229d0 <z_arm_fault+0x240>)
   22906:	4a27      	ldr	r2, [pc, #156]	; (229a4 <z_arm_fault+0x214>)
   22908:	4828      	ldr	r0, [pc, #160]	; (229ac <z_arm_fault+0x21c>)
   2290a:	f240 23c3 	movw	r3, #707	; 0x2c3
   2290e:	f014 fc04 	bl	3711a <printk>
   22912:	4830      	ldr	r0, [pc, #192]	; (229d4 <z_arm_fault+0x244>)
   22914:	f014 fc01 	bl	3711a <printk>
   22918:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   2291c:	4821      	ldr	r0, [pc, #132]	; (229a4 <z_arm_fault+0x214>)
   2291e:	f014 fda2 	bl	37466 <assert_post_action>
   22922:	e79b      	b.n	2285c <z_arm_fault+0xcc>
   22924:	492a      	ldr	r1, [pc, #168]	; (229d0 <z_arm_fault+0x240>)
   22926:	4a1f      	ldr	r2, [pc, #124]	; (229a4 <z_arm_fault+0x214>)
   22928:	4820      	ldr	r0, [pc, #128]	; (229ac <z_arm_fault+0x21c>)
   2292a:	f240 23c7 	movw	r3, #711	; 0x2c7
   2292e:	f014 fbf4 	bl	3711a <printk>
   22932:	4829      	ldr	r0, [pc, #164]	; (229d8 <z_arm_fault+0x248>)
   22934:	f014 fbf1 	bl	3711a <printk>
   22938:	f240 21c7 	movw	r1, #711	; 0x2c7
   2293c:	e7ee      	b.n	2291c <z_arm_fault+0x18c>
		reason = mem_manage_fault(esf, 0, recoverable);
   2293e:	f10d 0207 	add.w	r2, sp, #7
   22942:	2100      	movs	r1, #0
   22944:	e7c2      	b.n	228cc <z_arm_fault+0x13c>
		reason = bus_fault(esf, 0, recoverable);
   22946:	f10d 0107 	add.w	r1, sp, #7
   2294a:	2000      	movs	r0, #0
   2294c:	e7d0      	b.n	228f0 <z_arm_fault+0x160>
   2294e:	4812      	ldr	r0, [pc, #72]	; (22998 <z_arm_fault+0x208>)
   22950:	4b12      	ldr	r3, [pc, #72]	; (2299c <z_arm_fault+0x20c>)
	PR_FAULT_INFO(
   22952:	4922      	ldr	r1, [pc, #136]	; (229dc <z_arm_fault+0x24c>)
   22954:	1ac0      	subs	r0, r0, r3
   22956:	08c0      	lsrs	r0, r0, #3
   22958:	0180      	lsls	r0, r0, #6
   2295a:	f040 0001 	orr.w	r0, r0, #1
   2295e:	e772      	b.n	22846 <z_arm_fault+0xb6>
   22960:	4b0e      	ldr	r3, [pc, #56]	; (2299c <z_arm_fault+0x20c>)
   22962:	480d      	ldr	r0, [pc, #52]	; (22998 <z_arm_fault+0x208>)
	PR_FAULT_INFO("***** %s %d) *****",
   22964:	491e      	ldr	r1, [pc, #120]	; (229e0 <z_arm_fault+0x250>)
   22966:	4a1f      	ldr	r2, [pc, #124]	; (229e4 <z_arm_fault+0x254>)
   22968:	1ac0      	subs	r0, r0, r3
   2296a:	08c0      	lsrs	r0, r0, #3
   2296c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   22970:	ea4f 1080 	mov.w	r0, r0, lsl #6
   22974:	bf08      	it	eq
   22976:	460a      	moveq	r2, r1
   22978:	f1a4 0310 	sub.w	r3, r4, #16
   2297c:	491a      	ldr	r1, [pc, #104]	; (229e8 <z_arm_fault+0x258>)
   2297e:	f040 0001 	orr.w	r0, r0, #1
   22982:	f014 fd85 	bl	37490 <log_string_sync>
   22986:	e760      	b.n	2284a <z_arm_fault+0xba>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   22988:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2298c:	f023 0301 	bic.w	r3, r3, #1
   22990:	e77d      	b.n	2288e <z_arm_fault+0xfe>
   22992:	bf00      	nop
   22994:	e000ed00 	.word	0xe000ed00
   22998:	0003b540 	.word	0x0003b540
   2299c:	0003b448 	.word	0x0003b448
   229a0:	0003d9e5 	.word	0x0003d9e5
   229a4:	0003d7bb 	.word	0x0003d7bb
   229a8:	0003da10 	.word	0x0003da10
   229ac:	0003c48a 	.word	0x0003c48a
   229b0:	0003da23 	.word	0x0003da23
   229b4:	0003da61 	.word	0x0003da61
   229b8:	0003da78 	.word	0x0003da78
   229bc:	0003da99 	.word	0x0003da99
   229c0:	0003daa7 	.word	0x0003daa7
   229c4:	0003dac6 	.word	0x0003dac6
   229c8:	e000ed29 	.word	0xe000ed29
   229cc:	e000ed2a 	.word	0xe000ed2a
   229d0:	00041a5a 	.word	0x00041a5a
   229d4:	0003dae2 	.word	0x0003dae2
   229d8:	0003db06 	.word	0x0003db06
   229dc:	0003db36 	.word	0x0003db36
   229e0:	0003d9b7 	.word	0x0003d9b7
   229e4:	0003d9cc 	.word	0x0003d9cc
   229e8:	0003db5a 	.word	0x0003db5a

000229ec <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   229ec:	4a02      	ldr	r2, [pc, #8]	; (229f8 <z_arm_fault_init+0xc>)
   229ee:	6953      	ldr	r3, [r2, #20]
   229f0:	f043 0310 	orr.w	r3, r3, #16
   229f4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   229f6:	4770      	bx	lr
   229f8:	e000ed00 	.word	0xe000ed00

000229fc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   229fc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   22a00:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   22a04:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   22a06:	4672      	mov	r2, lr
	bl z_arm_fault
   22a08:	f7ff fec2 	bl	22790 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   22a0c:	bd01      	pop	{r0, pc}
   22a0e:	bf00      	nop

00022a10 <z_arm_interrupt_init>:
   22a10:	4804      	ldr	r0, [pc, #16]	; (22a24 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   22a12:	2300      	movs	r3, #0
   22a14:	2140      	movs	r1, #64	; 0x40
   22a16:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   22a18:	3301      	adds	r3, #1
   22a1a:	2b30      	cmp	r3, #48	; 0x30
   22a1c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   22a20:	d1f9      	bne.n	22a16 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   22a22:	4770      	bx	lr
   22a24:	e000e100 	.word	0xe000e100

00022a28 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   22a28:	2000      	movs	r0, #0
    msr CONTROL, r0
   22a2a:	f380 8814 	msr	CONTROL, r0
    isb
   22a2e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   22a32:	f018 fb4b 	bl	3b0cc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   22a36:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   22a38:	490d      	ldr	r1, [pc, #52]	; (22a70 <__start+0x48>)
    str r0, [r1]
   22a3a:	6008      	str	r0, [r1, #0]
    dsb
   22a3c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   22a40:	480c      	ldr	r0, [pc, #48]	; (22a74 <__start+0x4c>)
    msr msp, r0
   22a42:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   22a46:	f000 f829 	bl	22a9c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   22a4a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   22a4c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   22a50:	4809      	ldr	r0, [pc, #36]	; (22a78 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   22a52:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   22a56:	1840      	adds	r0, r0, r1
    msr PSP, r0
   22a58:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   22a5c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   22a60:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   22a62:	4308      	orrs	r0, r1
    msr CONTROL, r0
   22a64:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   22a68:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   22a6c:	f7ff fc40 	bl	222f0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   22a70:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   22a74:	20008180 	.word	0x20008180
    ldr r0, =z_interrupt_stacks
   22a78:	20008300 	.word	0x20008300

00022a7c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   22a7c:	4a06      	ldr	r2, [pc, #24]	; (22a98 <z_arm_clear_arm_mpu_config+0x1c>)
   22a7e:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   22a80:	2300      	movs	r3, #0
	int num_regions =
   22a82:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   22a86:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   22a88:	428b      	cmp	r3, r1
   22a8a:	d100      	bne.n	22a8e <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   22a8c:	4770      	bx	lr
  MPU->RNR = rnr;
   22a8e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   22a90:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   22a92:	3301      	adds	r3, #1
   22a94:	e7f8      	b.n	22a88 <z_arm_clear_arm_mpu_config+0xc>
   22a96:	bf00      	nop
   22a98:	e000ed90 	.word	0xe000ed90

00022a9c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   22a9c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   22a9e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   22aa0:	2300      	movs	r3, #0
   22aa2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   22aa6:	f7ff ffe9 	bl	22a7c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   22aaa:	4b14      	ldr	r3, [pc, #80]	; (22afc <z_arm_init_arch_hw_at_boot+0x60>)
   22aac:	f04f 32ff 	mov.w	r2, #4294967295
   22ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   22ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   22ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   22abc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   22ac0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   22ac4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   22ac8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   22acc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   22ad0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22ad4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   22ad8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   22adc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   22ae0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   22ae4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   22ae8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   22aec:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   22af0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   22af2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22af6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   22afa:	bd08      	pop	{r3, pc}
   22afc:	e000e100 	.word	0xe000e100

00022b00 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   22b00:	4b06      	ldr	r3, [pc, #24]	; (22b1c <z_impl_k_thread_abort+0x1c>)
   22b02:	689b      	ldr	r3, [r3, #8]
   22b04:	4283      	cmp	r3, r0
   22b06:	d107      	bne.n	22b18 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22b08:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   22b0c:	b123      	cbz	r3, 22b18 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22b0e:	4a04      	ldr	r2, [pc, #16]	; (22b20 <z_impl_k_thread_abort+0x20>)
   22b10:	6853      	ldr	r3, [r2, #4]
   22b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   22b16:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   22b18:	f00f b918 	b.w	31d4c <z_thread_abort>
   22b1c:	20002d00 	.word	0x20002d00
   22b20:	e000ed00 	.word	0xe000ed00

00022b24 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   22b24:	4b02      	ldr	r3, [pc, #8]	; (22b30 <z_arm_configure_static_mpu_regions+0xc>)
   22b26:	4a03      	ldr	r2, [pc, #12]	; (22b34 <z_arm_configure_static_mpu_regions+0x10>)
   22b28:	4803      	ldr	r0, [pc, #12]	; (22b38 <z_arm_configure_static_mpu_regions+0x14>)
   22b2a:	2101      	movs	r1, #1
   22b2c:	f000 b882 	b.w	22c34 <arm_core_mpu_configure_static_mpu_regions>
   22b30:	20040000 	.word	0x20040000
   22b34:	20000000 	.word	0x20000000
   22b38:	0003b8fc 	.word	0x0003b8fc

00022b3c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   22b3c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   22b3e:	4b05      	ldr	r3, [pc, #20]	; (22b54 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   22b40:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   22b42:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   22b44:	4a04      	ldr	r2, [pc, #16]	; (22b58 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   22b46:	2120      	movs	r1, #32
   22b48:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   22b4c:	4618      	mov	r0, r3
   22b4e:	2101      	movs	r1, #1
   22b50:	f000 b898 	b.w	22c84 <arm_core_mpu_configure_dynamic_mpu_regions>
   22b54:	20002964 	.word	0x20002964
   22b58:	150b0000 	.word	0x150b0000

00022b5c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   22b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   22b5e:	4f27      	ldr	r7, [pc, #156]	; (22bfc <mpu_configure_regions+0xa0>)
	int i;
	int reg_index = start_reg_index;
   22b60:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   22b62:	2200      	movs	r2, #0
   22b64:	428a      	cmp	r2, r1
   22b66:	da14      	bge.n	22b92 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   22b68:	6844      	ldr	r4, [r0, #4]
   22b6a:	2c00      	cmp	r4, #0
   22b6c:	d043      	beq.n	22bf6 <mpu_configure_regions+0x9a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   22b6e:	b1c3      	cbz	r3, 22ba2 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   22b70:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   22b74:	ea14 0f0c 	tst.w	r4, ip
   22b78:	d00d      	beq.n	22b96 <mpu_configure_regions+0x3a>
   22b7a:	4821      	ldr	r0, [pc, #132]	; (22c00 <mpu_configure_regions+0xa4>)
   22b7c:	4b21      	ldr	r3, [pc, #132]	; (22c04 <mpu_configure_regions+0xa8>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   22b7e:	4922      	ldr	r1, [pc, #136]	; (22c08 <mpu_configure_regions+0xac>)
   22b80:	1ac0      	subs	r0, r0, r3
   22b82:	08c0      	lsrs	r0, r0, #3
   22b84:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   22b86:	f040 0001 	orr.w	r0, r0, #1
   22b8a:	f014 fc81 	bl	37490 <log_string_sync>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   22b8e:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   22b92:	4628      	mov	r0, r5
   22b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   22b96:	2c1f      	cmp	r4, #31
   22b98:	d9ef      	bls.n	22b7a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   22b9a:	6806      	ldr	r6, [r0, #0]
		&&
   22b9c:	ea1c 0f06 	tst.w	ip, r6
   22ba0:	d1eb      	bne.n	22b7a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   22ba2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   22ba4:	6806      	ldr	r6, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   22ba6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   22baa:	b2ed      	uxtb	r5, r5
   22bac:	d914      	bls.n	22bd8 <mpu_configure_regions+0x7c>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   22bae:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   22bb2:	d813      	bhi.n	22bdc <mpu_configure_regions+0x80>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   22bb4:	3c01      	subs	r4, #1
   22bb6:	fab4 f484 	clz	r4, r4
   22bba:	f1c4 041f 	rsb	r4, r4, #31
   22bbe:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   22bc0:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   22bc2:	ea4c 0404 	orr.w	r4, ip, r4
   22bc6:	d90b      	bls.n	22be0 <mpu_configure_regions+0x84>
   22bc8:	480d      	ldr	r0, [pc, #52]	; (22c00 <mpu_configure_regions+0xa4>)
   22bca:	4b0e      	ldr	r3, [pc, #56]	; (22c04 <mpu_configure_regions+0xa8>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   22bcc:	490f      	ldr	r1, [pc, #60]	; (22c0c <mpu_configure_regions+0xb0>)
   22bce:	1ac0      	subs	r0, r0, r3
   22bd0:	08c0      	lsrs	r0, r0, #3
   22bd2:	0180      	lsls	r0, r0, #6
   22bd4:	462a      	mov	r2, r5
   22bd6:	e7d6      	b.n	22b86 <mpu_configure_regions+0x2a>
		return REGION_32B;
   22bd8:	2408      	movs	r4, #8
   22bda:	e7f1      	b.n	22bc0 <mpu_configure_regions+0x64>
		return REGION_4G;
   22bdc:	243e      	movs	r4, #62	; 0x3e
   22bde:	e7ef      	b.n	22bc0 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   22be0:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
   22be4:	432e      	orrs	r6, r5
   22be6:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   22bea:	f044 0401 	orr.w	r4, r4, #1
   22bee:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   22bf0:	60fe      	str	r6, [r7, #12]
		reg_index++;
   22bf2:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   22bf4:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   22bf6:	3201      	adds	r2, #1
   22bf8:	300c      	adds	r0, #12
   22bfa:	e7b3      	b.n	22b64 <mpu_configure_regions+0x8>
   22bfc:	e000ed90 	.word	0xe000ed90
   22c00:	0003b530 	.word	0x0003b530
   22c04:	0003b448 	.word	0x0003b448
   22c08:	0003db71 	.word	0x0003db71
   22c0c:	0003db94 	.word	0x0003db94

00022c10 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   22c10:	4b03      	ldr	r3, [pc, #12]	; (22c20 <arm_core_mpu_enable+0x10>)
   22c12:	2205      	movs	r2, #5
   22c14:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   22c16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22c1a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   22c1e:	4770      	bx	lr
   22c20:	e000ed90 	.word	0xe000ed90

00022c24 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   22c24:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   22c28:	4b01      	ldr	r3, [pc, #4]	; (22c30 <arm_core_mpu_disable+0xc>)
   22c2a:	2200      	movs	r2, #0
   22c2c:	605a      	str	r2, [r3, #4]
}
   22c2e:	4770      	bx	lr
   22c30:	e000ed90 	.word	0xe000ed90

00022c34 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   22c34:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   22c36:	4d0e      	ldr	r5, [pc, #56]	; (22c70 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   22c38:	2301      	movs	r3, #1
   22c3a:	782a      	ldrb	r2, [r5, #0]
   22c3c:	460c      	mov	r4, r1
   22c3e:	f7ff ff8d 	bl	22b5c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   22c42:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   22c44:	3016      	adds	r0, #22
   22c46:	d111      	bne.n	22c6c <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   22c48:	f240 1311 	movw	r3, #273	; 0x111
   22c4c:	4a09      	ldr	r2, [pc, #36]	; (22c74 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   22c4e:	490a      	ldr	r1, [pc, #40]	; (22c78 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   22c50:	480a      	ldr	r0, [pc, #40]	; (22c7c <arm_core_mpu_configure_static_mpu_regions+0x48>)
   22c52:	f014 fa62 	bl	3711a <printk>
   22c56:	4621      	mov	r1, r4
   22c58:	4809      	ldr	r0, [pc, #36]	; (22c80 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
   22c5a:	f014 fa5e 	bl	3711a <printk>
			regions_num);
	}
}
   22c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   22c62:	4804      	ldr	r0, [pc, #16]	; (22c74 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   22c64:	f240 1111 	movw	r1, #273	; 0x111
   22c68:	f014 bbfd 	b.w	37466 <assert_post_action>
}
   22c6c:	bd38      	pop	{r3, r4, r5, pc}
   22c6e:	bf00      	nop
   22c70:	20003b6f 	.word	0x20003b6f
   22c74:	0003dbba 	.word	0x0003dbba
   22c78:	00041a5a 	.word	0x00041a5a
   22c7c:	0003c48a 	.word	0x0003c48a
   22c80:	0003dbf1 	.word	0x0003dbf1

00022c84 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   22c84:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   22c86:	4a12      	ldr	r2, [pc, #72]	; (22cd0 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   22c88:	2300      	movs	r3, #0
   22c8a:	7812      	ldrb	r2, [r2, #0]
   22c8c:	460c      	mov	r4, r1
   22c8e:	f7ff ff65 	bl	22b5c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   22c92:	f110 0f16 	cmn.w	r0, #22
   22c96:	d008      	beq.n	22caa <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
   22c98:	4b0e      	ldr	r3, [pc, #56]	; (22cd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   22c9a:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   22c9c:	2807      	cmp	r0, #7
   22c9e:	dd00      	ble.n	22ca2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   22ca0:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
   22ca2:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   22ca4:	611a      	str	r2, [r3, #16]
   22ca6:	3001      	adds	r0, #1
   22ca8:	e7f8      	b.n	22c9c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   22caa:	4a0b      	ldr	r2, [pc, #44]	; (22cd8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   22cac:	490b      	ldr	r1, [pc, #44]	; (22cdc <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   22cae:	480c      	ldr	r0, [pc, #48]	; (22ce0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   22cb0:	f44f 7398 	mov.w	r3, #304	; 0x130
   22cb4:	f014 fa31 	bl	3711a <printk>
   22cb8:	4621      	mov	r1, r4
   22cba:	480a      	ldr	r0, [pc, #40]	; (22ce4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   22cbc:	f014 fa2d 	bl	3711a <printk>
}
   22cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   22cc4:	4804      	ldr	r0, [pc, #16]	; (22cd8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   22cc6:	f44f 7198 	mov.w	r1, #304	; 0x130
   22cca:	f014 bbcc 	b.w	37466 <assert_post_action>
   22cce:	bf00      	nop
   22cd0:	20003b6f 	.word	0x20003b6f
   22cd4:	e000ed90 	.word	0xe000ed90
   22cd8:	0003dbba 	.word	0x0003dbba
   22cdc:	00041a5a 	.word	0x00041a5a
   22ce0:	0003c48a 	.word	0x0003c48a
   22ce4:	0003dc1d 	.word	0x0003dc1d

00022ce8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   22ce8:	4925      	ldr	r1, [pc, #148]	; (22d80 <z_arm_mpu_init+0x98>)
{
   22cea:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   22cec:	680c      	ldr	r4, [r1, #0]
   22cee:	2c08      	cmp	r4, #8
   22cf0:	d913      	bls.n	22d1a <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   22cf2:	f44f 73a4 	mov.w	r3, #328	; 0x148
   22cf6:	4a23      	ldr	r2, [pc, #140]	; (22d84 <z_arm_mpu_init+0x9c>)
   22cf8:	4923      	ldr	r1, [pc, #140]	; (22d88 <z_arm_mpu_init+0xa0>)
   22cfa:	4824      	ldr	r0, [pc, #144]	; (22d8c <z_arm_mpu_init+0xa4>)
   22cfc:	f014 fa0d 	bl	3711a <printk>
   22d00:	4823      	ldr	r0, [pc, #140]	; (22d90 <z_arm_mpu_init+0xa8>)
   22d02:	2208      	movs	r2, #8
   22d04:	4621      	mov	r1, r4
   22d06:	f014 fa08 	bl	3711a <printk>
   22d0a:	481e      	ldr	r0, [pc, #120]	; (22d84 <z_arm_mpu_init+0x9c>)
   22d0c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   22d10:	f014 fba9 	bl	37466 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   22d14:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   22d18:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   22d1a:	f7ff ff83 	bl	22c24 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   22d1e:	6848      	ldr	r0, [r1, #4]
   22d20:	491c      	ldr	r1, [pc, #112]	; (22d94 <z_arm_mpu_init+0xac>)
   22d22:	2200      	movs	r2, #0
   22d24:	4294      	cmp	r4, r2
   22d26:	f100 000c 	add.w	r0, r0, #12
   22d2a:	d119      	bne.n	22d60 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
   22d2c:	4b1a      	ldr	r3, [pc, #104]	; (22d98 <z_arm_mpu_init+0xb0>)
   22d2e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   22d30:	f7ff ff6e 	bl	22c10 <arm_core_mpu_enable>
	__ASSERT(
   22d34:	680b      	ldr	r3, [r1, #0]
   22d36:	f3c3 2307 	ubfx	r3, r3, #8, #8
   22d3a:	2b08      	cmp	r3, #8
   22d3c:	d00e      	beq.n	22d5c <z_arm_mpu_init+0x74>
   22d3e:	4917      	ldr	r1, [pc, #92]	; (22d9c <z_arm_mpu_init+0xb4>)
   22d40:	4a10      	ldr	r2, [pc, #64]	; (22d84 <z_arm_mpu_init+0x9c>)
   22d42:	4812      	ldr	r0, [pc, #72]	; (22d8c <z_arm_mpu_init+0xa4>)
   22d44:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   22d48:	f014 f9e7 	bl	3711a <printk>
   22d4c:	4814      	ldr	r0, [pc, #80]	; (22da0 <z_arm_mpu_init+0xb8>)
   22d4e:	f014 f9e4 	bl	3711a <printk>
   22d52:	480c      	ldr	r0, [pc, #48]	; (22d84 <z_arm_mpu_init+0x9c>)
   22d54:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   22d58:	f014 fb85 	bl	37466 <assert_post_action>
	return 0;
   22d5c:	2000      	movs	r0, #0
   22d5e:	e7db      	b.n	22d18 <z_arm_mpu_init+0x30>
   22d60:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   22d62:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   22d66:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   22d6a:	4313      	orrs	r3, r2
   22d6c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   22d70:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   22d72:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22d76:	f043 0301 	orr.w	r3, r3, #1
   22d7a:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   22d7c:	3201      	adds	r2, #1
   22d7e:	e7d1      	b.n	22d24 <z_arm_mpu_init+0x3c>
   22d80:	0003b908 	.word	0x0003b908
   22d84:	0003dbba 	.word	0x0003dbba
   22d88:	00041a5a 	.word	0x00041a5a
   22d8c:	0003c48a 	.word	0x0003c48a
   22d90:	0003dc4a 	.word	0x0003dc4a
   22d94:	e000ed90 	.word	0xe000ed90
   22d98:	20003b6f 	.word	0x20003b6f
   22d9c:	0003dc7e 	.word	0x0003dc7e
   22da0:	0003dcce 	.word	0x0003dcce

00022da4 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   22da4:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   22da6:	4b0b      	ldr	r3, [pc, #44]	; (22dd4 <malloc_prepare+0x30>)
   22da8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   22dac:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   22db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   22db4:	d20c      	bcs.n	22dd0 <malloc_prepare+0x2c>
   22db6:	4908      	ldr	r1, [pc, #32]	; (22dd8 <malloc_prepare+0x34>)
   22db8:	4a08      	ldr	r2, [pc, #32]	; (22ddc <malloc_prepare+0x38>)
   22dba:	4809      	ldr	r0, [pc, #36]	; (22de0 <malloc_prepare+0x3c>)
   22dbc:	2381      	movs	r3, #129	; 0x81
   22dbe:	f014 f9ac 	bl	3711a <printk>
   22dc2:	4808      	ldr	r0, [pc, #32]	; (22de4 <malloc_prepare+0x40>)
   22dc4:	f014 f9a9 	bl	3711a <printk>
   22dc8:	4804      	ldr	r0, [pc, #16]	; (22ddc <malloc_prepare+0x38>)
   22dca:	2181      	movs	r1, #129	; 0x81
   22dcc:	f014 fb4b 	bl	37466 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   22dd0:	2000      	movs	r0, #0
   22dd2:	bd08      	pop	{r3, pc}
   22dd4:	2000d286 	.word	0x2000d286
   22dd8:	0003dd1f 	.word	0x0003dd1f
   22ddc:	0003dcef 	.word	0x0003dcef
   22de0:	0003c48a 	.word	0x0003c48a
   22de4:	0003dd66 	.word	0x0003dd66

00022de8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   22de8:	4b01      	ldr	r3, [pc, #4]	; (22df0 <__stdout_hook_install+0x8>)
   22dea:	6018      	str	r0, [r3, #0]
}
   22dec:	4770      	bx	lr
   22dee:	bf00      	nop
   22df0:	20000584 	.word	0x20000584

00022df4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   22df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
   22df6:	4f08      	ldr	r7, [pc, #32]	; (22e18 <z_impl_zephyr_read_stdin+0x24>)
{
   22df8:	4606      	mov	r6, r0
   22dfa:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
   22dfc:	2400      	movs	r4, #0
   22dfe:	42ac      	cmp	r4, r5
   22e00:	da08      	bge.n	22e14 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   22e02:	683b      	ldr	r3, [r7, #0]
   22e04:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   22e06:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   22e08:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   22e0a:	f104 0401 	add.w	r4, r4, #1
   22e0e:	d001      	beq.n	22e14 <z_impl_zephyr_read_stdin+0x20>
   22e10:	280d      	cmp	r0, #13
   22e12:	d1f4      	bne.n	22dfe <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   22e14:	4620      	mov	r0, r4
   22e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22e18:	20000580 	.word	0x20000580

00022e1c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   22e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e1e:	4f0a      	ldr	r7, [pc, #40]	; (22e48 <z_impl_zephyr_write_stdout+0x2c>)
   22e20:	460d      	mov	r5, r1
   22e22:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   22e24:	f1c0 0401 	rsb	r4, r0, #1
   22e28:	19a3      	adds	r3, r4, r6
   22e2a:	429d      	cmp	r5, r3
   22e2c:	dc01      	bgt.n	22e32 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   22e2e:	4628      	mov	r0, r5
   22e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   22e32:	7873      	ldrb	r3, [r6, #1]
   22e34:	2b0a      	cmp	r3, #10
   22e36:	d102      	bne.n	22e3e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   22e38:	683b      	ldr	r3, [r7, #0]
   22e3a:	200d      	movs	r0, #13
   22e3c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   22e3e:	683b      	ldr	r3, [r7, #0]
   22e40:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   22e44:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   22e46:	e7ef      	b.n	22e28 <z_impl_zephyr_write_stdout+0xc>
   22e48:	20000584 	.word	0x20000584

00022e4c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   22e4c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   22e4e:	4802      	ldr	r0, [pc, #8]	; (22e58 <_exit+0xc>)
   22e50:	2105      	movs	r1, #5
   22e52:	f7ff ffe3 	bl	22e1c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   22e56:	e7fe      	b.n	22e56 <_exit+0xa>
   22e58:	0003dded 	.word	0x0003dded

00022e5c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   22e5c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   22e5e:	4c07      	ldr	r4, [pc, #28]	; (22e7c <_sbrk+0x20>)
   22e60:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   22e62:	18c2      	adds	r2, r0, r3
   22e64:	4806      	ldr	r0, [pc, #24]	; (22e80 <_sbrk+0x24>)
   22e66:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   22e6a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   22e6e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
   22e70:	bf3a      	itte	cc
   22e72:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   22e74:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   22e76:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
   22e7a:	bd10      	pop	{r4, pc}
   22e7c:	20002970 	.word	0x20002970
   22e80:	2000d286 	.word	0x2000d286

00022e84 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   22e84:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   22e86:	4604      	mov	r4, r0
   22e88:	b958      	cbnz	r0, 22ea2 <__retarget_lock_init_recursive+0x1e>
   22e8a:	4912      	ldr	r1, [pc, #72]	; (22ed4 <__retarget_lock_init_recursive+0x50>)
   22e8c:	4812      	ldr	r0, [pc, #72]	; (22ed8 <__retarget_lock_init_recursive+0x54>)
   22e8e:	4a13      	ldr	r2, [pc, #76]	; (22edc <__retarget_lock_init_recursive+0x58>)
   22e90:	f240 1377 	movw	r3, #375	; 0x177
   22e94:	f014 f941 	bl	3711a <printk>
   22e98:	4810      	ldr	r0, [pc, #64]	; (22edc <__retarget_lock_init_recursive+0x58>)
   22e9a:	f240 1177 	movw	r1, #375	; 0x177
   22e9e:	f014 fae2 	bl	37466 <assert_post_action>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   22ea2:	2014      	movs	r0, #20
   22ea4:	f012 fe1c 	bl	35ae0 <malloc>
   22ea8:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   22eaa:	b970      	cbnz	r0, 22eca <__retarget_lock_init_recursive+0x46>
   22eac:	490c      	ldr	r1, [pc, #48]	; (22ee0 <__retarget_lock_init_recursive+0x5c>)
   22eae:	4a0b      	ldr	r2, [pc, #44]	; (22edc <__retarget_lock_init_recursive+0x58>)
   22eb0:	4809      	ldr	r0, [pc, #36]	; (22ed8 <__retarget_lock_init_recursive+0x54>)
   22eb2:	f240 137f 	movw	r3, #383	; 0x17f
   22eb6:	f014 f930 	bl	3711a <printk>
   22eba:	480a      	ldr	r0, [pc, #40]	; (22ee4 <__retarget_lock_init_recursive+0x60>)
   22ebc:	f014 f92d 	bl	3711a <printk>
   22ec0:	4806      	ldr	r0, [pc, #24]	; (22edc <__retarget_lock_init_recursive+0x58>)
   22ec2:	f240 117f 	movw	r1, #383	; 0x17f
   22ec6:	f014 face 	bl	37466 <assert_post_action>

	k_mutex_init((struct k_mutex *)*lock);
   22eca:	6820      	ldr	r0, [r4, #0]
}
   22ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   22ed0:	f017 b99a 	b.w	3a208 <z_impl_k_mutex_init>
   22ed4:	0003ddf4 	.word	0x0003ddf4
   22ed8:	0003c48a 	.word	0x0003c48a
   22edc:	0003dcef 	.word	0x0003dcef
   22ee0:	0003ddf3 	.word	0x0003ddf3
   22ee4:	0003de2f 	.word	0x0003de2f

00022ee8 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   22ee8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   22eea:	4604      	mov	r4, r0
   22eec:	b958      	cbnz	r0, 22f06 <__retarget_lock_acquire_recursive+0x1e>
   22eee:	490a      	ldr	r1, [pc, #40]	; (22f18 <__retarget_lock_acquire_recursive+0x30>)
   22ef0:	480a      	ldr	r0, [pc, #40]	; (22f1c <__retarget_lock_acquire_recursive+0x34>)
   22ef2:	4a0b      	ldr	r2, [pc, #44]	; (22f20 <__retarget_lock_acquire_recursive+0x38>)
   22ef4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   22ef8:	f014 f90f 	bl	3711a <printk>
   22efc:	4808      	ldr	r0, [pc, #32]	; (22f20 <__retarget_lock_acquire_recursive+0x38>)
   22efe:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   22f02:	f014 fab0 	bl	37466 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   22f06:	f04f 32ff 	mov.w	r2, #4294967295
   22f0a:	4620      	mov	r0, r4
   22f0c:	f04f 33ff 	mov.w	r3, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   22f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22f14:	f00c bca8 	b.w	2f868 <z_impl_k_mutex_lock>
   22f18:	0003ddf4 	.word	0x0003ddf4
   22f1c:	0003c48a 	.word	0x0003c48a
   22f20:	0003dcef 	.word	0x0003dcef

00022f24 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   22f24:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   22f26:	4604      	mov	r4, r0
   22f28:	b958      	cbnz	r0, 22f42 <__retarget_lock_release_recursive+0x1e>
   22f2a:	4908      	ldr	r1, [pc, #32]	; (22f4c <__retarget_lock_release_recursive+0x28>)
   22f2c:	4808      	ldr	r0, [pc, #32]	; (22f50 <__retarget_lock_release_recursive+0x2c>)
   22f2e:	4a09      	ldr	r2, [pc, #36]	; (22f54 <__retarget_lock_release_recursive+0x30>)
   22f30:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   22f34:	f014 f8f1 	bl	3711a <printk>
   22f38:	4806      	ldr	r0, [pc, #24]	; (22f54 <__retarget_lock_release_recursive+0x30>)
   22f3a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   22f3e:	f014 fa92 	bl	37466 <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   22f42:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
   22f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22f48:	f00c bd8e 	b.w	2fa68 <z_impl_k_mutex_unlock>
   22f4c:	0003ddf4 	.word	0x0003ddf4
   22f50:	0003c48a 	.word	0x0003c48a
   22f54:	0003dcef 	.word	0x0003dcef

00022f58 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   22f58:	b508      	push	{r3, lr}
   22f5a:	211d      	movs	r1, #29
   22f5c:	4804      	ldr	r0, [pc, #16]	; (22f70 <__chk_fail+0x18>)
   22f5e:	f7ff ff5d 	bl	22e1c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   22f62:	4040      	eors	r0, r0
   22f64:	f380 8811 	msr	BASEPRI, r0
   22f68:	f04f 0003 	mov.w	r0, #3
   22f6c:	df02      	svc	2
	CODE_UNREACHABLE;
   22f6e:	bf00      	nop
   22f70:	0003de52 	.word	0x0003de52

00022f74 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   22f74:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f78:	f3ef 8111 	mrs	r1, BASEPRI
   22f7c:	f383 8812 	msr	BASEPRI_MAX, r3
   22f80:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   22f84:	4a0f      	ldr	r2, [pc, #60]	; (22fc4 <nordicsemi_nrf52_init+0x50>)
   22f86:	2301      	movs	r3, #1
   22f88:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   22f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   22f90:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22f94:	4a0c      	ldr	r2, [pc, #48]	; (22fc8 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   22f96:	6812      	ldr	r2, [r2, #0]
   22f98:	2a08      	cmp	r2, #8
   22f9a:	d108      	bne.n	22fae <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   22f9c:	4a0b      	ldr	r2, [pc, #44]	; (22fcc <nordicsemi_nrf52_init+0x58>)
   22f9e:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
   22fa0:	2a05      	cmp	r2, #5
   22fa2:	d804      	bhi.n	22fae <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   22fa4:	480a      	ldr	r0, [pc, #40]	; (22fd0 <nordicsemi_nrf52_init+0x5c>)
   22fa6:	5c82      	ldrb	r2, [r0, r2]
   22fa8:	b10a      	cbz	r2, 22fae <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   22faa:	4a0a      	ldr	r2, [pc, #40]	; (22fd4 <nordicsemi_nrf52_init+0x60>)
   22fac:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   22fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22fb2:	2201      	movs	r2, #1
   22fb4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   22fb8:	f381 8811 	msr	BASEPRI, r1
   22fbc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   22fc0:	2000      	movs	r0, #0
   22fc2:	4770      	bx	lr
   22fc4:	4001e000 	.word	0x4001e000
   22fc8:	10000130 	.word	0x10000130
   22fcc:	10000134 	.word	0x10000134
   22fd0:	0003de83 	.word	0x0003de83
   22fd4:	40000638 	.word	0x40000638

00022fd8 <sys_arch_reboot>:
    *p_gpregret = val;
   22fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22fdc:	b2c0      	uxtb	r0, r0
   22fde:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   22fe2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   22fe6:	4905      	ldr	r1, [pc, #20]	; (22ffc <sys_arch_reboot+0x24>)
   22fe8:	4b05      	ldr	r3, [pc, #20]	; (23000 <sys_arch_reboot+0x28>)
   22fea:	68ca      	ldr	r2, [r1, #12]
   22fec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   22ff0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   22ff2:	60cb      	str	r3, [r1, #12]
   22ff4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   22ff8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   22ffa:	e7fd      	b.n	22ff8 <sys_arch_reboot+0x20>
   22ffc:	e000ed00 	.word	0xe000ed00
   23000:	05fa0004 	.word	0x05fa0004

00023004 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   23004:	b120      	cbz	r0, 23010 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   23006:	4b03      	ldr	r3, [pc, #12]	; (23014 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   23008:	0180      	lsls	r0, r0, #6
   2300a:	f043 0301 	orr.w	r3, r3, #1
   2300e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   23010:	4770      	bx	lr
   23012:	bf00      	nop
   23014:	0003b640 	.word	0x0003b640

00023018 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   23018:	4b0e      	ldr	r3, [pc, #56]	; (23054 <bt_hex_real+0x3c>)
   2301a:	2940      	cmp	r1, #64	; 0x40
{
   2301c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   2301e:	bf28      	it	cs
   23020:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   23022:	4c0d      	ldr	r4, [pc, #52]	; (23058 <bt_hex_real+0x40>)
   23024:	1846      	adds	r6, r0, r1
   23026:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   23028:	42b0      	cmp	r0, r6
   2302a:	f103 0302 	add.w	r3, r3, #2
   2302e:	d104      	bne.n	2303a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   23030:	2300      	movs	r3, #0
   23032:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   23036:	4807      	ldr	r0, [pc, #28]	; (23054 <bt_hex_real+0x3c>)
   23038:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   2303a:	7802      	ldrb	r2, [r0, #0]
   2303c:	0912      	lsrs	r2, r2, #4
   2303e:	5ca2      	ldrb	r2, [r4, r2]
   23040:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   23044:	f810 2b01 	ldrb.w	r2, [r0], #1
   23048:	f002 020f 	and.w	r2, r2, #15
   2304c:	5ca2      	ldrb	r2, [r4, r2]
   2304e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   23052:	e7e9      	b.n	23028 <bt_hex_real+0x10>
   23054:	20003b70 	.word	0x20003b70
   23058:	0003de89 	.word	0x0003de89

0002305c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   2305c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   2305e:	7803      	ldrb	r3, [r0, #0]
   23060:	b08b      	sub	sp, #44	; 0x2c
   23062:	4604      	mov	r4, r0
   23064:	ad07      	add	r5, sp, #28
   23066:	2b03      	cmp	r3, #3
   23068:	d821      	bhi.n	230ae <bt_addr_le_str_real+0x52>
   2306a:	e8df f003 	tbb	[pc, r3]
   2306e:	1a02      	.short	0x1a02
   23070:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   23072:	4912      	ldr	r1, [pc, #72]	; (230bc <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   23074:	4628      	mov	r0, r5
   23076:	f017 fbc2 	bl	3a7fe <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   2307a:	7863      	ldrb	r3, [r4, #1]
   2307c:	9304      	str	r3, [sp, #16]
   2307e:	78a3      	ldrb	r3, [r4, #2]
   23080:	9303      	str	r3, [sp, #12]
   23082:	78e3      	ldrb	r3, [r4, #3]
   23084:	9302      	str	r3, [sp, #8]
   23086:	7923      	ldrb	r3, [r4, #4]
   23088:	9301      	str	r3, [sp, #4]
   2308a:	7963      	ldrb	r3, [r4, #5]
   2308c:	9300      	str	r3, [sp, #0]
   2308e:	4a0c      	ldr	r2, [pc, #48]	; (230c0 <bt_addr_le_str_real+0x64>)
   23090:	79a3      	ldrb	r3, [r4, #6]
   23092:	9505      	str	r5, [sp, #20]
   23094:	211e      	movs	r1, #30
   23096:	480b      	ldr	r0, [pc, #44]	; (230c4 <bt_addr_le_str_real+0x68>)
   23098:	f014 f84c 	bl	37134 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   2309c:	4809      	ldr	r0, [pc, #36]	; (230c4 <bt_addr_le_str_real+0x68>)
   2309e:	b00b      	add	sp, #44	; 0x2c
   230a0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   230a2:	4909      	ldr	r1, [pc, #36]	; (230c8 <bt_addr_le_str_real+0x6c>)
   230a4:	e7e6      	b.n	23074 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   230a6:	4909      	ldr	r1, [pc, #36]	; (230cc <bt_addr_le_str_real+0x70>)
   230a8:	e7e4      	b.n	23074 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   230aa:	4909      	ldr	r1, [pc, #36]	; (230d0 <bt_addr_le_str_real+0x74>)
   230ac:	e7e2      	b.n	23074 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   230ae:	4a09      	ldr	r2, [pc, #36]	; (230d4 <bt_addr_le_str_real+0x78>)
   230b0:	210a      	movs	r1, #10
   230b2:	4628      	mov	r0, r5
   230b4:	f014 f83e 	bl	37134 <snprintk>
		break;
   230b8:	e7df      	b.n	2307a <bt_addr_le_str_real+0x1e>
   230ba:	bf00      	nop
   230bc:	0003c8f4 	.word	0x0003c8f4
   230c0:	0003c916 	.word	0x0003c916
   230c4:	20003bf1 	.word	0x20003bf1
   230c8:	0003c8fb 	.word	0x0003c8fb
   230cc:	0003c902 	.word	0x0003c902
   230d0:	0003c90c 	.word	0x0003c90c
   230d4:	0003ede2 	.word	0x0003ede2

000230d8 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   230d8:	b510      	push	{r4, lr}
   230da:	4b0d      	ldr	r3, [pc, #52]	; (23110 <save_id+0x38>)
   230dc:	4c0d      	ldr	r4, [pc, #52]	; (23114 <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
   230de:	490e      	ldr	r1, [pc, #56]	; (23118 <save_id+0x40>)
   230e0:	1ae4      	subs	r4, r4, r3
   230e2:	08e4      	lsrs	r4, r4, #3
   230e4:	01a4      	lsls	r4, r4, #6
   230e6:	f044 0003 	orr.w	r0, r4, #3
   230ea:	f014 f9d1 	bl	37490 <log_string_sync>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   230ee:	490b      	ldr	r1, [pc, #44]	; (2311c <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   230f0:	480b      	ldr	r0, [pc, #44]	; (23120 <save_id+0x48>)
   230f2:	79ca      	ldrb	r2, [r1, #7]
   230f4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   230f8:	f7fe fab2 	bl	21660 <settings_save_one>
	if (err) {
   230fc:	4602      	mov	r2, r0
   230fe:	b130      	cbz	r0, 2310e <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
   23100:	f044 0001 	orr.w	r0, r4, #1
   23104:	4907      	ldr	r1, [pc, #28]	; (23124 <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   23106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   2310a:	f014 b9c1 	b.w	37490 <log_string_sync>
}
   2310e:	bd10      	pop	{r4, pc}
   23110:	0003b448 	.word	0x0003b448
   23114:	0003b4a8 	.word	0x0003b4a8
   23118:	0003dea1 	.word	0x0003dea1
   2311c:	200002b0 	.word	0x200002b0
   23120:	0003deab 	.word	0x0003deab
   23124:	0003deb1 	.word	0x0003deb1

00023128 <set>:
{
   23128:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2312c:	4617      	mov	r7, r2
   2312e:	4698      	mov	r8, r3
	if (!name) {
   23130:	4604      	mov	r4, r0
   23132:	b960      	cbnz	r0, 2314e <set+0x26>
   23134:	4825      	ldr	r0, [pc, #148]	; (231cc <set+0xa4>)
   23136:	4b26      	ldr	r3, [pc, #152]	; (231d0 <set+0xa8>)
		BT_ERR("Insufficient number of arguments");
   23138:	4926      	ldr	r1, [pc, #152]	; (231d4 <set+0xac>)
   2313a:	1ac0      	subs	r0, r0, r3
   2313c:	08c0      	lsrs	r0, r0, #3
   2313e:	0180      	lsls	r0, r0, #6
   23140:	f040 0001 	orr.w	r0, r0, #1
   23144:	f014 f9a4 	bl	37490 <log_string_sync>
	return -ENOENT;
   23148:	f06f 0401 	mvn.w	r4, #1
   2314c:	e01c      	b.n	23188 <set+0x60>
	len = settings_name_next(name, &next);
   2314e:	a901      	add	r1, sp, #4
   23150:	f014 fcbb 	bl	37aca <settings_name_next>
	if (!strncmp(name, "id", len)) {
   23154:	4920      	ldr	r1, [pc, #128]	; (231d8 <set+0xb0>)
	len = settings_name_next(name, &next);
   23156:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   23158:	4620      	mov	r0, r4
   2315a:	f017 fb58 	bl	3a80e <strncmp>
   2315e:	4604      	mov	r4, r0
   23160:	2800      	cmp	r0, #0
   23162:	d1f1      	bne.n	23148 <set+0x20>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23164:	f3bf 8f5b 	dmb	ish
   23168:	4e1c      	ldr	r6, [pc, #112]	; (231dc <set+0xb4>)
   2316a:	6833      	ldr	r3, [r6, #0]
   2316c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   23170:	075b      	lsls	r3, r3, #29
   23172:	d50d      	bpl.n	23190 <set+0x68>
   23174:	4815      	ldr	r0, [pc, #84]	; (231cc <set+0xa4>)
   23176:	4b16      	ldr	r3, [pc, #88]	; (231d0 <set+0xa8>)
			BT_WARN("Ignoring identities stored in flash");
   23178:	4919      	ldr	r1, [pc, #100]	; (231e0 <set+0xb8>)
   2317a:	1ac0      	subs	r0, r0, r3
   2317c:	08c0      	lsrs	r0, r0, #3
   2317e:	0180      	lsls	r0, r0, #6
   23180:	f040 0002 	orr.w	r0, r0, #2
   23184:	f014 f984 	bl	37490 <log_string_sync>
}
   23188:	4620      	mov	r0, r4
   2318a:	b002      	add	sp, #8
   2318c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   23190:	f1a6 05cc 	sub.w	r5, r6, #204	; 0xcc
   23194:	2207      	movs	r2, #7
   23196:	4629      	mov	r1, r5
   23198:	4640      	mov	r0, r8
   2319a:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   2319c:	2806      	cmp	r0, #6
   2319e:	d80f      	bhi.n	231c0 <set+0x98>
   231a0:	4b0b      	ldr	r3, [pc, #44]	; (231d0 <set+0xa8>)
   231a2:	480a      	ldr	r0, [pc, #40]	; (231cc <set+0xa4>)
				BT_ERR("Invalid length ID address in storage");
   231a4:	490f      	ldr	r1, [pc, #60]	; (231e4 <set+0xbc>)
   231a6:	1ac0      	subs	r0, r0, r3
   231a8:	08c0      	lsrs	r0, r0, #3
   231aa:	0180      	lsls	r0, r0, #6
   231ac:	f040 0001 	orr.w	r0, r0, #1
   231b0:	f014 f96e 	bl	37490 <log_string_sync>
			(void)memset(bt_dev.id_addr, 0,
   231b4:	f846 4ccc 	str.w	r4, [r6, #-204]
			bt_dev.id_count = 0U;
   231b8:	71ec      	strb	r4, [r5, #7]
			(void)memset(bt_dev.id_addr, 0,
   231ba:	f8c5 4003 	str.w	r4, [r5, #3]
			bt_dev.id_count = 0U;
   231be:	e7e3      	b.n	23188 <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   231c0:	2307      	movs	r3, #7
   231c2:	fbb0 f0f3 	udiv	r0, r0, r3
   231c6:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   231c8:	e7de      	b.n	23188 <set+0x60>
   231ca:	bf00      	nop
   231cc:	0003b4a8 	.word	0x0003b4a8
   231d0:	0003b448 	.word	0x0003b448
   231d4:	0003decc 	.word	0x0003decc
   231d8:	0003c909 	.word	0x0003c909
   231dc:	2000037c 	.word	0x2000037c
   231e0:	0003deed 	.word	0x0003deed
   231e4:	0003df11 	.word	0x0003df11

000231e8 <bt_settings_encode_key>:
{
   231e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   231ec:	b088      	sub	sp, #32
   231ee:	799c      	ldrb	r4, [r3, #6]
   231f0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   231f4:	795d      	ldrb	r5, [r3, #5]
   231f6:	791e      	ldrb	r6, [r3, #4]
   231f8:	78df      	ldrb	r7, [r3, #3]
   231fa:	f893 c002 	ldrb.w	ip, [r3, #2]
   231fe:	f893 e001 	ldrb.w	lr, [r3, #1]
   23202:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   23204:	f1b8 0f00 	cmp.w	r8, #0
   23208:	d00e      	beq.n	23228 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   2320a:	e9cd 3806 	strd	r3, r8, [sp, #24]
   2320e:	e9cd ce04 	strd	ip, lr, [sp, #16]
   23212:	4613      	mov	r3, r2
   23214:	e9cd 6702 	strd	r6, r7, [sp, #8]
   23218:	e9cd 4500 	strd	r4, r5, [sp]
   2321c:	4a08      	ldr	r2, [pc, #32]	; (23240 <bt_settings_encode_key+0x58>)
   2321e:	f013 ff89 	bl	37134 <snprintk>
}
   23222:	b008      	add	sp, #32
   23224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   23228:	e9cd e305 	strd	lr, r3, [sp, #20]
   2322c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   23230:	4613      	mov	r3, r2
   23232:	e9cd 5601 	strd	r5, r6, [sp, #4]
   23236:	4a03      	ldr	r2, [pc, #12]	; (23244 <bt_settings_encode_key+0x5c>)
   23238:	9400      	str	r4, [sp, #0]
   2323a:	f013 ff7b 	bl	37134 <snprintk>
}
   2323e:	e7f0      	b.n	23222 <bt_settings_encode_key+0x3a>
   23240:	0003df36 	.word	0x0003df36
   23244:	0003df5a 	.word	0x0003df5a

00023248 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   23248:	4801      	ldr	r0, [pc, #4]	; (23250 <bt_settings_save_id+0x8>)
   2324a:	f00d b9d9 	b.w	30600 <k_work_submit>
   2324e:	bf00      	nop
   23250:	20000588 	.word	0x20000588

00023254 <commit>:
}

static int commit(void)
{
   23254:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   23256:	4d1b      	ldr	r5, [pc, #108]	; (232c4 <commit+0x70>)
   23258:	79eb      	ldrb	r3, [r5, #7]
   2325a:	b9b3      	cbnz	r3, 2328a <commit+0x36>
		err = bt_setup_public_id_addr();
   2325c:	f001 fd1c 	bl	24c98 <bt_setup_public_id_addr>
		if (err) {
   23260:	4604      	mov	r4, r0
   23262:	b158      	cbz	r0, 2327c <commit+0x28>
   23264:	4818      	ldr	r0, [pc, #96]	; (232c8 <commit+0x74>)
   23266:	4b19      	ldr	r3, [pc, #100]	; (232cc <commit+0x78>)
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
   23268:	4919      	ldr	r1, [pc, #100]	; (232d0 <commit+0x7c>)
   2326a:	1ac0      	subs	r0, r0, r3
   2326c:	08c0      	lsrs	r0, r0, #3
   2326e:	0180      	lsls	r0, r0, #6
   23270:	f040 0001 	orr.w	r0, r0, #1
   23274:	f014 f90c 	bl	37490 <log_string_sync>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   23278:	4620      	mov	r0, r4
   2327a:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_dev.id_count) {
   2327c:	79eb      	ldrb	r3, [r5, #7]
   2327e:	b923      	cbnz	r3, 2328a <commit+0x36>
		err = bt_setup_random_id_addr();
   23280:	f001 fd74 	bl	24d6c <bt_setup_random_id_addr>
		if (err) {
   23284:	4604      	mov	r4, r0
   23286:	2800      	cmp	r0, #0
   23288:	d1ec      	bne.n	23264 <commit+0x10>
   2328a:	f3bf 8f5b 	dmb	ish
   2328e:	4d11      	ldr	r5, [pc, #68]	; (232d4 <commit+0x80>)
   23290:	682b      	ldr	r3, [r5, #0]
   23292:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   23296:	079b      	lsls	r3, r3, #30
   23298:	d401      	bmi.n	2329e <commit+0x4a>
		bt_finalize_init();
   2329a:	f001 f92d 	bl	244f8 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2329e:	f3bf 8f5b 	dmb	ish
   232a2:	e855 4f00 	ldrex	r4, [r5]
   232a6:	f424 4380 	bic.w	r3, r4, #16384	; 0x4000
   232aa:	e845 3200 	strex	r2, r3, [r5]
   232ae:	2a00      	cmp	r2, #0
   232b0:	d1f7      	bne.n	232a2 <commit+0x4e>
   232b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   232b6:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
   232ba:	d0dd      	beq.n	23278 <commit+0x24>
		bt_settings_save_id();
   232bc:	f7ff ffc4 	bl	23248 <bt_settings_save_id>
	return 0;
   232c0:	2400      	movs	r4, #0
   232c2:	e7d9      	b.n	23278 <commit+0x24>
   232c4:	200002b0 	.word	0x200002b0
   232c8:	0003b4a8 	.word	0x0003b4a8
   232cc:	0003b448 	.word	0x0003b448
   232d0:	0003df7b 	.word	0x0003df7b
   232d4:	2000037c 	.word	0x2000037c

000232d8 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   232d8:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   232da:	f7fe fb63 	bl	219a4 <settings_subsys_init>
	if (err) {
   232de:	4604      	mov	r4, r0
   232e0:	b150      	cbz	r0, 232f8 <bt_settings_init+0x20>
   232e2:	4806      	ldr	r0, [pc, #24]	; (232fc <bt_settings_init+0x24>)
   232e4:	4b06      	ldr	r3, [pc, #24]	; (23300 <bt_settings_init+0x28>)
		BT_ERR("settings_subsys_init failed (err %d)", err);
   232e6:	4907      	ldr	r1, [pc, #28]	; (23304 <bt_settings_init+0x2c>)
   232e8:	1a1b      	subs	r3, r3, r0
   232ea:	08db      	lsrs	r3, r3, #3
   232ec:	019b      	lsls	r3, r3, #6
   232ee:	4622      	mov	r2, r4
   232f0:	f043 0001 	orr.w	r0, r3, #1
   232f4:	f014 f8cc 	bl	37490 <log_string_sync>
		return err;
	}

	return 0;
}
   232f8:	4620      	mov	r0, r4
   232fa:	bd10      	pop	{r4, pc}
   232fc:	0003b448 	.word	0x0003b448
   23300:	0003b4a8 	.word	0x0003b4a8
   23304:	0003df9f 	.word	0x0003df9f

00023308 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   23308:	b5f0      	push	{r4, r5, r6, r7, lr}
   2330a:	460b      	mov	r3, r1
	switch (src->type) {
   2330c:	7801      	ldrb	r1, [r0, #0]
   2330e:	2901      	cmp	r1, #1
{
   23310:	4602      	mov	r2, r0
	switch (src->type) {
   23312:	d015      	beq.n	23340 <uuid_to_uuid128+0x38>
   23314:	2902      	cmp	r1, #2
   23316:	d02b      	beq.n	23370 <uuid_to_uuid128+0x68>
   23318:	b989      	cbnz	r1, 2333e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   2331a:	4c1c      	ldr	r4, [pc, #112]	; (2338c <uuid_to_uuid128+0x84>)
   2331c:	461d      	mov	r5, r3
   2331e:	f104 0710 	add.w	r7, r4, #16
   23322:	6820      	ldr	r0, [r4, #0]
   23324:	6861      	ldr	r1, [r4, #4]
   23326:	462e      	mov	r6, r5
   23328:	c603      	stmia	r6!, {r0, r1}
   2332a:	3408      	adds	r4, #8
   2332c:	42bc      	cmp	r4, r7
   2332e:	4635      	mov	r5, r6
   23330:	d1f7      	bne.n	23322 <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
   23332:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
   23334:	7821      	ldrb	r1, [r4, #0]
   23336:	7031      	strb	r1, [r6, #0]
	dst[0] = val;
   23338:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   2333a:	0a12      	lsrs	r2, r2, #8
   2333c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   2333e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
   23340:	4c12      	ldr	r4, [pc, #72]	; (2338c <uuid_to_uuid128+0x84>)
   23342:	461d      	mov	r5, r3
   23344:	f104 0710 	add.w	r7, r4, #16
   23348:	6820      	ldr	r0, [r4, #0]
   2334a:	6861      	ldr	r1, [r4, #4]
   2334c:	462e      	mov	r6, r5
   2334e:	c603      	stmia	r6!, {r0, r1}
   23350:	3408      	adds	r4, #8
   23352:	42bc      	cmp	r4, r7
   23354:	4635      	mov	r5, r6
   23356:	d1f7      	bne.n	23348 <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
   23358:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
   2335a:	7821      	ldrb	r1, [r4, #0]
   2335c:	7031      	strb	r1, [r6, #0]
   2335e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   23362:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
   23364:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   23366:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   23368:	0a12      	lsrs	r2, r2, #8
   2336a:	7399      	strb	r1, [r3, #14]
   2336c:	741a      	strb	r2, [r3, #16]
}
   2336e:	e7e6      	b.n	2333e <uuid_to_uuid128+0x36>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23370:	f100 0510 	add.w	r5, r0, #16
   23374:	6810      	ldr	r0, [r2, #0]
   23376:	6851      	ldr	r1, [r2, #4]
   23378:	461c      	mov	r4, r3
   2337a:	c403      	stmia	r4!, {r0, r1}
   2337c:	3208      	adds	r2, #8
   2337e:	42aa      	cmp	r2, r5
   23380:	4623      	mov	r3, r4
   23382:	d1f7      	bne.n	23374 <uuid_to_uuid128+0x6c>
   23384:	7812      	ldrb	r2, [r2, #0]
   23386:	7022      	strb	r2, [r4, #0]
   23388:	e7d9      	b.n	2333e <uuid_to_uuid128+0x36>
   2338a:	bf00      	nop
   2338c:	0003dfd3 	.word	0x0003dfd3

00023390 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   23390:	b570      	push	{r4, r5, r6, lr}
   23392:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   23394:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   23398:	2b01      	cmp	r3, #1
{
   2339a:	4605      	mov	r5, r0
   2339c:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   2339e:	d00e      	beq.n	233be <bt_buf_get_rx+0x2e>
   233a0:	2805      	cmp	r0, #5
   233a2:	d00c      	beq.n	233be <bt_buf_get_rx+0x2e>
   233a4:	490d      	ldr	r1, [pc, #52]	; (233dc <bt_buf_get_rx+0x4c>)
   233a6:	4a0e      	ldr	r2, [pc, #56]	; (233e0 <bt_buf_get_rx+0x50>)
   233a8:	480e      	ldr	r0, [pc, #56]	; (233e4 <bt_buf_get_rx+0x54>)
   233aa:	2341      	movs	r3, #65	; 0x41
   233ac:	f013 feb5 	bl	3711a <printk>
   233b0:	480d      	ldr	r0, [pc, #52]	; (233e8 <bt_buf_get_rx+0x58>)
   233b2:	f013 feb2 	bl	3711a <printk>
   233b6:	480a      	ldr	r0, [pc, #40]	; (233e0 <bt_buf_get_rx+0x50>)
   233b8:	2141      	movs	r1, #65	; 0x41
   233ba:	f014 f854 	bl	37466 <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   233be:	4623      	mov	r3, r4
   233c0:	480a      	ldr	r0, [pc, #40]	; (233ec <bt_buf_get_rx+0x5c>)
   233c2:	4632      	mov	r2, r6
   233c4:	f016 f985 	bl	396d2 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   233c8:	4604      	mov	r4, r0
   233ca:	b120      	cbz	r0, 233d6 <bt_buf_get_rx+0x46>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   233cc:	2100      	movs	r1, #0
   233ce:	3008      	adds	r0, #8
   233d0:	f006 fba0 	bl	29b14 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   233d4:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   233d6:	4620      	mov	r0, r4
   233d8:	bd70      	pop	{r4, r5, r6, pc}
   233da:	bf00      	nop
   233dc:	0003e013 	.word	0x0003e013
   233e0:	0003dfe4 	.word	0x0003dfe4
   233e4:	0003c48a 	.word	0x0003c48a
   233e8:	0003e058 	.word	0x0003e058
   233ec:	20000d84 	.word	0x20000d84

000233f0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   233f0:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   233f2:	490b      	ldr	r1, [pc, #44]	; (23420 <bt_buf_get_cmd_complete+0x30>)
{
   233f4:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   233f6:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   233fa:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   233fc:	b920      	cbnz	r0, 23408 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   233fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   23402:	2001      	movs	r0, #1
   23404:	f7ff bfc4 	b.w	23390 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   23408:	f006 fd2a 	bl	29e60 <net_buf_ref>
   2340c:	2301      	movs	r3, #1
		buf->len = 0U;
   2340e:	2100      	movs	r1, #0
   23410:	7503      	strb	r3, [r0, #20]
   23412:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   23414:	4604      	mov	r4, r0
   23416:	3008      	adds	r0, #8
   23418:	f006 fb7c 	bl	29b14 <net_buf_simple_reserve>
}
   2341c:	4620      	mov	r0, r4
   2341e:	bd10      	pop	{r4, pc}
   23420:	200002b0 	.word	0x200002b0

00023424 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   23424:	b570      	push	{r4, r5, r6, lr}
   23426:	4604      	mov	r4, r0
	switch (evt) {
   23428:	2c0f      	cmp	r4, #15
{
   2342a:	460d      	mov	r5, r1
   2342c:	4610      	mov	r0, r2
   2342e:	4619      	mov	r1, r3
	switch (evt) {
   23430:	d805      	bhi.n	2343e <bt_buf_get_evt+0x1a>
   23432:	2c0d      	cmp	r4, #13
   23434:	d912      	bls.n	2345c <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   23436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   2343a:	f7ff bfd9 	b.w	233f0 <bt_buf_get_cmd_complete>
	switch (evt) {
   2343e:	2c13      	cmp	r4, #19
   23440:	d10c      	bne.n	2345c <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   23442:	480b      	ldr	r0, [pc, #44]	; (23470 <bt_buf_get_evt+0x4c>)
   23444:	f016 f945 	bl	396d2 <net_buf_alloc_fixed>
			if (buf) {
   23448:	4604      	mov	r4, r0
   2344a:	b128      	cbz	r0, 23458 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   2344c:	2100      	movs	r1, #0
   2344e:	3008      	adds	r0, #8
   23450:	f006 fb60 	bl	29b14 <net_buf_simple_reserve>
   23454:	2301      	movs	r3, #1
   23456:	7523      	strb	r3, [r4, #20]
}
   23458:	4620      	mov	r0, r4
   2345a:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   2345c:	4602      	mov	r2, r0
   2345e:	460b      	mov	r3, r1
		if (discardable) {
   23460:	b10d      	cbz	r5, 23466 <bt_buf_get_evt+0x42>
   23462:	4804      	ldr	r0, [pc, #16]	; (23474 <bt_buf_get_evt+0x50>)
   23464:	e7ee      	b.n	23444 <bt_buf_get_evt+0x20>
}
   23466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2346a:	2001      	movs	r0, #1
   2346c:	f7ff bf90 	b.w	23390 <bt_buf_get_rx>
   23470:	20000db8 	.word	0x20000db8
   23474:	20000ce8 	.word	0x20000ce8

00023478 <hci_data_buf_overflow>:
	bt_conn_unref(conn);
}

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   23478:	6883      	ldr	r3, [r0, #8]
   2347a:	4a05      	ldr	r2, [pc, #20]	; (23490 <hci_data_buf_overflow+0x18>)
   2347c:	4805      	ldr	r0, [pc, #20]	; (23494 <hci_data_buf_overflow+0x1c>)

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   2347e:	4906      	ldr	r1, [pc, #24]	; (23498 <hci_data_buf_overflow+0x20>)
   23480:	1a80      	subs	r0, r0, r2
   23482:	08c0      	lsrs	r0, r0, #3
   23484:	0180      	lsls	r0, r0, #6
   23486:	781a      	ldrb	r2, [r3, #0]
   23488:	f040 0002 	orr.w	r0, r0, #2
   2348c:	f014 b800 	b.w	37490 <log_string_sync>
   23490:	0003b448 	.word	0x0003b448
   23494:	0003b480 	.word	0x0003b480
   23498:	0003e07f 	.word	0x0003e07f

0002349c <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   2349c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2349e:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   234a0:	781a      	ldrb	r2, [r3, #0]
   234a2:	b972      	cbnz	r2, 234c2 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   234a4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   234a8:	4620      	mov	r0, r4
   234aa:	f002 facf 	bl	25a4c <bt_conn_lookup_handle>
	if (!conn) {
   234ae:	4605      	mov	r5, r0
   234b0:	b940      	cbnz	r0, 234c4 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   234b2:	4b08      	ldr	r3, [pc, #32]	; (234d4 <hci_disconn_complete_prio+0x38>)
   234b4:	881a      	ldrh	r2, [r3, #0]
   234b6:	b922      	cbnz	r2, 234c2 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   234b8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   234bc:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   234c0:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   234c2:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   234c4:	2101      	movs	r1, #1
   234c6:	f002 facd 	bl	25a64 <bt_conn_set_state>
	bt_conn_unref(conn);
   234ca:	4628      	mov	r0, r5
}
   234cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   234d0:	f002 ba84 	b.w	259dc <bt_conn_unref>
   234d4:	2000373e 	.word	0x2000373e

000234d8 <hci_disconn_complete>:

static void hci_disconn_complete(struct net_buf *buf)
{
   234d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   234da:	6885      	ldr	r5, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   234dc:	782e      	ldrb	r6, [r5, #0]
   234de:	b9ee      	cbnz	r6, 2351c <hci_disconn_complete+0x44>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   234e0:	f8b5 7001 	ldrh.w	r7, [r5, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   234e4:	4638      	mov	r0, r7
   234e6:	f002 fab1 	bl	25a4c <bt_conn_lookup_handle>
	if (!conn) {
   234ea:	4604      	mov	r4, r0
   234ec:	b960      	cbnz	r0, 23508 <hci_disconn_complete+0x30>
   234ee:	4b0c      	ldr	r3, [pc, #48]	; (23520 <hci_disconn_complete+0x48>)
   234f0:	480c      	ldr	r0, [pc, #48]	; (23524 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   234f2:	490d      	ldr	r1, [pc, #52]	; (23528 <hci_disconn_complete+0x50>)
   234f4:	1ac0      	subs	r0, r0, r3
   234f6:	08c0      	lsrs	r0, r0, #3
   234f8:	0180      	lsls	r0, r0, #6
   234fa:	463a      	mov	r2, r7
   234fc:	f040 0001 	orr.w	r0, r0, #1
		bt_le_scan_update(false);
	}
#endif /* defined(CONFIG_BT_CENTRAL) && !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

	bt_conn_unref(conn);
}
   23500:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   23504:	f013 bfc4 	b.w	37490 <log_string_sync>
	conn->err = evt->reason;
   23508:	78eb      	ldrb	r3, [r5, #3]
   2350a:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2350c:	4631      	mov	r1, r6
   2350e:	f002 faa9 	bl	25a64 <bt_conn_set_state>
		bt_conn_unref(conn);
   23512:	4620      	mov	r0, r4
}
   23514:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   23518:	f002 ba60 	b.w	259dc <bt_conn_unref>
}
   2351c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2351e:	bf00      	nop
   23520:	0003b448 	.word	0x0003b448
   23524:	0003b480 	.word	0x0003b480
   23528:	0003e0a7 	.word	0x0003e0a7

0002352c <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
   2352c:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   2352e:	2101      	movs	r1, #1
   23530:	3008      	adds	r0, #8
   23532:	f006 fd5d 	bl	29ff0 <net_buf_simple_pull_mem>
   23536:	4a06      	ldr	r2, [pc, #24]	; (23550 <hci_hardware_error+0x24>)
   23538:	4b06      	ldr	r3, [pc, #24]	; (23554 <hci_hardware_error+0x28>)
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   2353a:	4907      	ldr	r1, [pc, #28]	; (23558 <hci_hardware_error+0x2c>)
   2353c:	1a9b      	subs	r3, r3, r2
   2353e:	08db      	lsrs	r3, r3, #3
   23540:	019b      	lsls	r3, r3, #6
   23542:	7802      	ldrb	r2, [r0, #0]
   23544:	f043 0001 	orr.w	r0, r3, #1
}
   23548:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   2354c:	f013 bfa0 	b.w	37490 <log_string_sync>
   23550:	0003b448 	.word	0x0003b448
   23554:	0003b480 	.word	0x0003b480
   23558:	0003e0cd 	.word	0x0003e0cd

0002355c <hci_vendor_event>:
	return 0;
}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

static void hci_vendor_event(struct net_buf *buf)
{
   2355c:	b510      	push	{r4, lr}
   2355e:	4b0a      	ldr	r3, [pc, #40]	; (23588 <hci_vendor_event+0x2c>)
   23560:	4c0a      	ldr	r4, [pc, #40]	; (2358c <hci_vendor_event+0x30>)
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
   23562:	8981      	ldrh	r1, [r0, #12]
   23564:	6880      	ldr	r0, [r0, #8]
   23566:	1ae4      	subs	r4, r4, r3
   23568:	f7ff fd56 	bl	23018 <bt_hex_real>
   2356c:	f013 ffa3 	bl	374b6 <z_log_strdup>
   23570:	08e4      	lsrs	r4, r4, #3
   23572:	01a4      	lsls	r4, r4, #6
   23574:	f044 0402 	orr.w	r4, r4, #2
   23578:	4602      	mov	r2, r0
   2357a:	4905      	ldr	r1, [pc, #20]	; (23590 <hci_vendor_event+0x34>)
   2357c:	4620      	mov	r0, r4
			bt_hex(buf->data, buf->len));
	}
}
   2357e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   23582:	f013 bf85 	b.w	37490 <log_string_sync>
   23586:	bf00      	nop
   23588:	0003b448 	.word	0x0003b448
   2358c:	0003b480 	.word	0x0003b480
   23590:	0003e0ef 	.word	0x0003e0ef

00023594 <le_data_len_change>:
{
   23594:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   23596:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   23598:	882e      	ldrh	r6, [r5, #0]
	conn = bt_conn_lookup_handle(handle);
   2359a:	4630      	mov	r0, r6
   2359c:	f002 fa56 	bl	25a4c <bt_conn_lookup_handle>
	if (!conn) {
   235a0:	4604      	mov	r4, r0
   235a2:	b960      	cbnz	r0, 235be <le_data_len_change+0x2a>
   235a4:	4811      	ldr	r0, [pc, #68]	; (235ec <le_data_len_change+0x58>)
   235a6:	4b12      	ldr	r3, [pc, #72]	; (235f0 <le_data_len_change+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   235a8:	4912      	ldr	r1, [pc, #72]	; (235f4 <le_data_len_change+0x60>)
   235aa:	1ac0      	subs	r0, r0, r3
   235ac:	08c0      	lsrs	r0, r0, #3
   235ae:	0180      	lsls	r0, r0, #6
   235b0:	4632      	mov	r2, r6
   235b2:	f040 0001 	orr.w	r0, r0, #1
}
   235b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   235ba:	f013 bf69 	b.w	37490 <log_string_sync>
	uint16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
   235be:	88ae      	ldrh	r6, [r5, #4]
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
   235c0:	78ab      	ldrb	r3, [r5, #2]
	uint16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
   235c2:	88e9      	ldrh	r1, [r5, #6]
	uint16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
   235c4:	892a      	ldrh	r2, [r5, #8]
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
   235c6:	78ed      	ldrb	r5, [r5, #3]
	conn->le.data_len.tx_max_time = max_tx_time;
   235c8:	f8a0 60c2 	strh.w	r6, [r0, #194]	; 0xc2
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
   235cc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	conn->le.data_len.tx_max_len = max_tx_octets;
   235d0:	f8a0 30c0 	strh.w	r3, [r0, #192]	; 0xc0
	conn->le.data_len.rx_max_len = max_rx_octets;
   235d4:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
	conn->le.data_len.rx_max_time = max_rx_time;
   235d8:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
	notify_le_data_len_updated(conn);
   235dc:	f002 fbf6 	bl	25dcc <notify_le_data_len_updated>
	bt_conn_unref(conn);
   235e0:	4620      	mov	r0, r4
}
   235e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   235e6:	f002 b9f9 	b.w	259dc <bt_conn_unref>
   235ea:	bf00      	nop
   235ec:	0003b480 	.word	0x0003b480
   235f0:	0003b448 	.word	0x0003b448
   235f4:	0003e113 	.word	0x0003e113

000235f8 <le_conn_update_complete>:
{
   235f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   235fa:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   235fc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   23600:	4630      	mov	r0, r6
   23602:	f002 fa23 	bl	25a4c <bt_conn_lookup_handle>
	if (!conn) {
   23606:	4604      	mov	r4, r0
   23608:	b960      	cbnz	r0, 23624 <le_conn_update_complete+0x2c>
   2360a:	481f      	ldr	r0, [pc, #124]	; (23688 <le_conn_update_complete+0x90>)
   2360c:	4b1f      	ldr	r3, [pc, #124]	; (2368c <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   2360e:	4920      	ldr	r1, [pc, #128]	; (23690 <le_conn_update_complete+0x98>)
   23610:	1ac0      	subs	r0, r0, r3
   23612:	08c0      	lsrs	r0, r0, #3
   23614:	0180      	lsls	r0, r0, #6
   23616:	4632      	mov	r2, r6
   23618:	f040 0001 	orr.w	r0, r0, #1
   2361c:	f013 ff38 	bl	37490 <log_string_sync>
}
   23620:	b002      	add	sp, #8
   23622:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   23624:	782b      	ldrb	r3, [r5, #0]
   23626:	b9bb      	cbnz	r3, 23658 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   23628:	792a      	ldrb	r2, [r5, #4]
   2362a:	78eb      	ldrb	r3, [r5, #3]
   2362c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23630:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   23634:	79aa      	ldrb	r2, [r5, #6]
   23636:	796b      	ldrb	r3, [r5, #5]
   23638:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2363c:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   23640:	79eb      	ldrb	r3, [r5, #7]
   23642:	7a2a      	ldrb	r2, [r5, #8]
   23644:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23648:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   2364c:	f002 fb52 	bl	25cf4 <notify_le_param_updated>
	bt_conn_unref(conn);
   23650:	4620      	mov	r0, r4
   23652:	f002 f9c3 	bl	259dc <bt_conn_unref>
   23656:	e7e3      	b.n	23620 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   23658:	2b1a      	cmp	r3, #26
   2365a:	d1f9      	bne.n	23650 <le_conn_update_complete+0x58>
   2365c:	78c3      	ldrb	r3, [r0, #3]
   2365e:	2b01      	cmp	r3, #1
   23660:	d1f6      	bne.n	23650 <le_conn_update_complete+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   23662:	f44f 6180 	mov.w	r1, #1024	; 0x400
   23666:	3004      	adds	r0, #4
   23668:	f014 fdbe 	bl	381e8 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   2366c:	0543      	lsls	r3, r0, #21
   2366e:	d4ef      	bmi.n	23650 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   23670:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   23674:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   23676:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   23678:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   2367c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   2367e:	4620      	mov	r0, r4
   23680:	f002 ffe8 	bl	26654 <bt_l2cap_update_conn_param>
   23684:	e7e4      	b.n	23650 <le_conn_update_complete+0x58>
   23686:	bf00      	nop
   23688:	0003b480 	.word	0x0003b480
   2368c:	0003b448 	.word	0x0003b448
   23690:	0003e113 	.word	0x0003e113

00023694 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   23694:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   23696:	4c0c      	ldr	r4, [pc, #48]	; (236c8 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   23698:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2369a:	2205      	movs	r2, #5
   2369c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   236a0:	f002 fc90 	bl	25fc4 <bt_conn_lookup_state_le>
		if (!conn) {
   236a4:	b970      	cbnz	r0, 236c4 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   236a6:	4b09      	ldr	r3, [pc, #36]	; (236cc <find_pending_connect.part.0+0x38>)
   236a8:	6818      	ldr	r0, [r3, #0]
   236aa:	889a      	ldrh	r2, [r3, #4]
   236ac:	9000      	str	r0, [sp, #0]
   236ae:	799b      	ldrb	r3, [r3, #6]
   236b0:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   236b4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   236b8:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   236bc:	2204      	movs	r2, #4
   236be:	4669      	mov	r1, sp
   236c0:	f002 fc80 	bl	25fc4 <bt_conn_lookup_state_le>
}
   236c4:	b002      	add	sp, #8
   236c6:	bd10      	pop	{r4, pc}
   236c8:	200002b0 	.word	0x200002b0
   236cc:	0003b624 	.word	0x0003b624

000236d0 <hci_cmd_done>:
{
   236d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   236d4:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   236d6:	7990      	ldrb	r0, [r2, #6]
   236d8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 23808 <hci_cmd_done+0x138>
{
   236dc:	460f      	mov	r7, r1
   236de:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   236e0:	f006 f874 	bl	297cc <net_buf_pool_get>
   236e4:	4580      	cmp	r8, r0
   236e6:	d015      	beq.n	23714 <hci_cmd_done+0x44>
   236e8:	4b42      	ldr	r3, [pc, #264]	; (237f4 <hci_cmd_done+0x124>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   236ea:	79a4      	ldrb	r4, [r4, #6]
   236ec:	4d42      	ldr	r5, [pc, #264]	; (237f8 <hci_cmd_done+0x128>)
   236ee:	4620      	mov	r0, r4
   236f0:	1aed      	subs	r5, r5, r3
   236f2:	08ed      	lsrs	r5, r5, #3
   236f4:	f006 f86a 	bl	297cc <net_buf_pool_get>
   236f8:	01ad      	lsls	r5, r5, #6
   236fa:	f045 0502 	orr.w	r5, r5, #2
   236fe:	e9cd 0800 	strd	r0, r8, [sp]
   23702:	493e      	ldr	r1, [pc, #248]	; (237fc <hci_cmd_done+0x12c>)
   23704:	4623      	mov	r3, r4
   23706:	4632      	mov	r2, r6
   23708:	4628      	mov	r0, r5
   2370a:	f013 fec1 	bl	37490 <log_string_sync>
}
   2370e:	b003      	add	sp, #12
   23710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   23714:	4620      	mov	r0, r4
   23716:	f006 f861 	bl	297dc <net_buf_id>
   2371a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 2380c <hci_cmd_done+0x13c>
   2371e:	f04f 090c 	mov.w	r9, #12
   23722:	fb09 8000 	mla	r0, r9, r0, r8
   23726:	4645      	mov	r5, r8
   23728:	8843      	ldrh	r3, [r0, #2]
   2372a:	42b3      	cmp	r3, r6
   2372c:	d014      	beq.n	23758 <hci_cmd_done+0x88>
   2372e:	4b31      	ldr	r3, [pc, #196]	; (237f4 <hci_cmd_done+0x124>)
   23730:	4d31      	ldr	r5, [pc, #196]	; (237f8 <hci_cmd_done+0x128>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   23732:	4620      	mov	r0, r4
   23734:	1aed      	subs	r5, r5, r3
   23736:	f006 f851 	bl	297dc <net_buf_id>
   2373a:	08ed      	lsrs	r5, r5, #3
   2373c:	fb09 8000 	mla	r0, r9, r0, r8
   23740:	01ad      	lsls	r5, r5, #6
   23742:	8843      	ldrh	r3, [r0, #2]
   23744:	492e      	ldr	r1, [pc, #184]	; (23800 <hci_cmd_done+0x130>)
   23746:	f045 0502 	orr.w	r5, r5, #2
   2374a:	4632      	mov	r2, r6
   2374c:	4628      	mov	r0, r5
}
   2374e:	b003      	add	sp, #12
   23750:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   23754:	f013 be9c 	b.w	37490 <log_string_sync>
	if (bt_dev.sent_cmd) {
   23758:	4e2a      	ldr	r6, [pc, #168]	; (23804 <hci_cmd_done+0x134>)
   2375a:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   2375e:	b120      	cbz	r0, 2376a <hci_cmd_done+0x9a>
		net_buf_unref(bt_dev.sent_cmd);
   23760:	f006 fb38 	bl	29dd4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   23764:	2300      	movs	r3, #0
   23766:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   2376a:	4620      	mov	r0, r4
   2376c:	f006 f836 	bl	297dc <net_buf_id>
   23770:	260c      	movs	r6, #12
   23772:	fb06 5000 	mla	r0, r6, r0, r5
   23776:	6843      	ldr	r3, [r0, #4]
   23778:	b1a3      	cbz	r3, 237a4 <hci_cmd_done+0xd4>
   2377a:	b99f      	cbnz	r7, 237a4 <hci_cmd_done+0xd4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   2377c:	4620      	mov	r0, r4
   2377e:	f006 f82d 	bl	297dc <net_buf_id>
   23782:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   23786:	2301      	movs	r3, #1
   23788:	6846      	ldr	r6, [r0, #4]
   2378a:	e9d6 2000 	ldrd	r2, r0, [r6]
   2378e:	f000 011f 	and.w	r1, r0, #31
   23792:	fa03 f101 	lsl.w	r1, r3, r1

	if (val) {
   23796:	7a33      	ldrb	r3, [r6, #8]
   23798:	0940      	lsrs	r0, r0, #5
   2379a:	b1e3      	cbz	r3, 237d6 <hci_cmd_done+0x106>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2379c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   237a0:	f014 fd22 	bl	381e8 <atomic_or>
	if (cmd(buf)->sync) {
   237a4:	4620      	mov	r0, r4
   237a6:	f006 f819 	bl	297dc <net_buf_id>
   237aa:	260c      	movs	r6, #12
   237ac:	fb06 5000 	mla	r0, r6, r0, r5
   237b0:	6883      	ldr	r3, [r0, #8]
   237b2:	2b00      	cmp	r3, #0
   237b4:	d0ab      	beq.n	2370e <hci_cmd_done+0x3e>
		cmd(buf)->status = status;
   237b6:	4620      	mov	r0, r4
   237b8:	f006 f810 	bl	297dc <net_buf_id>
   237bc:	4370      	muls	r0, r6
   237be:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   237c0:	4620      	mov	r0, r4
   237c2:	f006 f80b 	bl	297dc <net_buf_id>
   237c6:	fb06 5500 	mla	r5, r6, r0, r5
   237ca:	68a8      	ldr	r0, [r5, #8]
}
   237cc:	b003      	add	sp, #12
   237ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
   237d2:	f00c bb75 	b.w	2fec0 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   237d6:	43cb      	mvns	r3, r1
   237d8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   237dc:	f3bf 8f5b 	dmb	ish
   237e0:	e852 1f00 	ldrex	r1, [r2]
   237e4:	4019      	ands	r1, r3
   237e6:	e842 1000 	strex	r0, r1, [r2]
   237ea:	2800      	cmp	r0, #0
   237ec:	d1f8      	bne.n	237e0 <hci_cmd_done+0x110>
   237ee:	f3bf 8f5b 	dmb	ish
   237f2:	e7d7      	b.n	237a4 <hci_cmd_done+0xd4>
   237f4:	0003b448 	.word	0x0003b448
   237f8:	0003b480 	.word	0x0003b480
   237fc:	0003e137 	.word	0x0003e137
   23800:	0003e16c 	.word	0x0003e16c
   23804:	200002b0 	.word	0x200002b0
   23808:	20000d50 	.word	0x20000d50
   2380c:	20002974 	.word	0x20002974

00023810 <handle_event>:
{
   23810:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23812:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   23816:	4605      	mov	r5, r0
   23818:	4614      	mov	r4, r2
   2381a:	4608      	mov	r0, r1
		if (handler->event != event) {
   2381c:	7822      	ldrb	r2, [r4, #0]
   2381e:	42aa      	cmp	r2, r5
   23820:	d019      	beq.n	23856 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   23822:	3408      	adds	r4, #8
   23824:	429c      	cmp	r4, r3
   23826:	d1f9      	bne.n	2381c <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   23828:	8986      	ldrh	r6, [r0, #12]
   2382a:	4b16      	ldr	r3, [pc, #88]	; (23884 <handle_event+0x74>)
   2382c:	4c16      	ldr	r4, [pc, #88]	; (23888 <handle_event+0x78>)
   2382e:	6880      	ldr	r0, [r0, #8]
   23830:	4631      	mov	r1, r6
   23832:	1ae4      	subs	r4, r4, r3
   23834:	f7ff fbf0 	bl	23018 <bt_hex_real>
   23838:	f013 fe3d 	bl	374b6 <z_log_strdup>
   2383c:	08e4      	lsrs	r4, r4, #3
   2383e:	01a4      	lsls	r4, r4, #6
   23840:	f044 0402 	orr.w	r4, r4, #2
   23844:	9000      	str	r0, [sp, #0]
   23846:	4911      	ldr	r1, [pc, #68]	; (2388c <handle_event+0x7c>)
   23848:	4633      	mov	r3, r6
   2384a:	462a      	mov	r2, r5
   2384c:	4620      	mov	r0, r4
   2384e:	f013 fe1f 	bl	37490 <log_string_sync>
}
   23852:	b002      	add	sp, #8
   23854:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   23856:	8982      	ldrh	r2, [r0, #12]
   23858:	7863      	ldrb	r3, [r4, #1]
   2385a:	4293      	cmp	r3, r2
   2385c:	d90d      	bls.n	2387a <handle_event+0x6a>
   2385e:	4b09      	ldr	r3, [pc, #36]	; (23884 <handle_event+0x74>)
   23860:	4809      	ldr	r0, [pc, #36]	; (23888 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   23862:	490b      	ldr	r1, [pc, #44]	; (23890 <handle_event+0x80>)
   23864:	1ac0      	subs	r0, r0, r3
   23866:	08c0      	lsrs	r0, r0, #3
   23868:	0180      	lsls	r0, r0, #6
   2386a:	462b      	mov	r3, r5
   2386c:	f040 0001 	orr.w	r0, r0, #1
}
   23870:	b002      	add	sp, #8
   23872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   23876:	f013 be0b 	b.w	37490 <log_string_sync>
		handler->handler(buf);
   2387a:	6863      	ldr	r3, [r4, #4]
}
   2387c:	b002      	add	sp, #8
   2387e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   23882:	4718      	bx	r3
   23884:	0003b448 	.word	0x0003b448
   23888:	0003b480 	.word	0x0003b480
   2388c:	0003e1c1 	.word	0x0003e1c1
   23890:	0003e19f 	.word	0x0003e19f

00023894 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   23894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23898:	4b46      	ldr	r3, [pc, #280]	; (239b4 <hci_rx_thread+0x120>)
   2389a:	4d47      	ldr	r5, [pc, #284]	; (239b8 <hci_rx_thread+0x124>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   2389c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 239d8 <hci_rx_thread+0x144>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   238a0:	f8df 9138 	ldr.w	r9, [pc, #312]	; 239dc <hci_rx_thread+0x148>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   238a4:	4f45      	ldr	r7, [pc, #276]	; (239bc <hci_rx_thread+0x128>)
   238a6:	1aed      	subs	r5, r5, r3
   238a8:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   238aa:	f04f 32ff 	mov.w	r2, #4294967295
   238ae:	f04f 33ff 	mov.w	r3, #4294967295
   238b2:	4640      	mov	r0, r8
   238b4:	f006 f8fa 	bl	29aac <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   238b8:	7d02      	ldrb	r2, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   238ba:	2a01      	cmp	r2, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   238bc:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   238be:	d046      	beq.n	2394e <hci_rx_thread+0xba>
   238c0:	2a03      	cmp	r2, #3
   238c2:	d173      	bne.n	239ac <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   238c4:	8983      	ldrh	r3, [r0, #12]
   238c6:	2b03      	cmp	r3, #3
   238c8:	d80c      	bhi.n	238e4 <hci_rx_thread+0x50>
   238ca:	493d      	ldr	r1, [pc, #244]	; (239c0 <hci_rx_thread+0x12c>)
   238cc:	483d      	ldr	r0, [pc, #244]	; (239c4 <hci_rx_thread+0x130>)
   238ce:	f240 13b5 	movw	r3, #437	; 0x1b5
   238d2:	463a      	mov	r2, r7
   238d4:	f013 fc21 	bl	3711a <printk>
   238d8:	4040      	eors	r0, r0
   238da:	f380 8811 	msr	BASEPRI, r0
   238de:	f04f 0003 	mov.w	r0, #3
   238e2:	df02      	svc	2
   238e4:	2104      	movs	r1, #4
   238e6:	f104 0008 	add.w	r0, r4, #8
   238ea:	f006 fb81 	bl	29ff0 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   238ee:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   238f0:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   238f2:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   238f6:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   238f8:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   238fa:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   238fe:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   23900:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   23902:	d009      	beq.n	23918 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   23904:	01a8      	lsls	r0, r5, #6
   23906:	4930      	ldr	r1, [pc, #192]	; (239c8 <hci_rx_thread+0x134>)
   23908:	f040 0001 	orr.w	r0, r0, #1
   2390c:	f013 fdc0 	bl	37490 <log_string_sync>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   23910:	4620      	mov	r0, r4
   23912:	f006 fa5f 	bl	29dd4 <net_buf_unref>
			break;
   23916:	e017      	b.n	23948 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   23918:	f002 f898 	bl	25a4c <bt_conn_lookup_handle>
	if (!conn) {
   2391c:	4606      	mov	r6, r0
   2391e:	b938      	cbnz	r0, 23930 <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   23920:	8ae2      	ldrh	r2, [r4, #22]
   23922:	492a      	ldr	r1, [pc, #168]	; (239cc <hci_rx_thread+0x138>)
   23924:	01a8      	lsls	r0, r5, #6
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   23926:	f040 0001 	orr.w	r0, r0, #1
   2392a:	f013 fdb1 	bl	37490 <log_string_sync>
   2392e:	e7ef      	b.n	23910 <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   23930:	f002 f97c 	bl	25c2c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   23934:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   23938:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   2393a:	4621      	mov	r1, r4
   2393c:	4630      	mov	r0, r6
   2393e:	f001 ff19 	bl	25774 <bt_conn_recv>
	bt_conn_unref(conn);
   23942:	4630      	mov	r0, r6
   23944:	f002 f84a 	bl	259dc <bt_conn_unref>
	z_impl_k_yield();
   23948:	f00e f860 	bl	31a0c <z_impl_k_yield>
	while (1) {
   2394c:	e7ad      	b.n	238aa <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2394e:	8983      	ldrh	r3, [r0, #12]
   23950:	2b01      	cmp	r3, #1
   23952:	d80c      	bhi.n	2396e <hci_rx_thread+0xda>
   23954:	491a      	ldr	r1, [pc, #104]	; (239c0 <hci_rx_thread+0x12c>)
   23956:	481b      	ldr	r0, [pc, #108]	; (239c4 <hci_rx_thread+0x130>)
   23958:	f640 1317 	movw	r3, #2327	; 0x917
   2395c:	463a      	mov	r2, r7
   2395e:	f013 fbdc 	bl	3711a <printk>
   23962:	4040      	eors	r0, r0
   23964:	f380 8811 	msr	BASEPRI, r0
   23968:	f04f 0003 	mov.w	r0, #3
   2396c:	df02      	svc	2
   2396e:	2102      	movs	r1, #2
   23970:	f104 0008 	add.w	r0, r4, #8
   23974:	f006 fb3c 	bl	29ff0 <net_buf_simple_pull_mem>
   23978:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   2397a:	7800      	ldrb	r0, [r0, #0]
   2397c:	f014 fc22 	bl	381c4 <bt_hci_evt_get_flags>
   23980:	0783      	lsls	r3, r0, #30
   23982:	d40c      	bmi.n	2399e <hci_rx_thread+0x10a>
   23984:	4912      	ldr	r1, [pc, #72]	; (239d0 <hci_rx_thread+0x13c>)
   23986:	480f      	ldr	r0, [pc, #60]	; (239c4 <hci_rx_thread+0x130>)
   23988:	f640 131b 	movw	r3, #2331	; 0x91b
   2398c:	463a      	mov	r2, r7
   2398e:	f013 fbc4 	bl	3711a <printk>
   23992:	4040      	eors	r0, r0
   23994:	f380 8811 	msr	BASEPRI, r0
   23998:	f04f 0003 	mov.w	r0, #3
   2399c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   2399e:	7830      	ldrb	r0, [r6, #0]
   239a0:	2304      	movs	r3, #4
   239a2:	464a      	mov	r2, r9
   239a4:	4621      	mov	r1, r4
   239a6:	f7ff ff33 	bl	23810 <handle_event>
	net_buf_unref(buf);
   239aa:	e7b1      	b.n	23910 <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   239ac:	4909      	ldr	r1, [pc, #36]	; (239d4 <hci_rx_thread+0x140>)
   239ae:	01a8      	lsls	r0, r5, #6
   239b0:	e7b9      	b.n	23926 <hci_rx_thread+0x92>
   239b2:	bf00      	nop
   239b4:	0003b448 	.word	0x0003b448
   239b8:	0003b480 	.word	0x0003b480
   239bc:	0003e1e3 	.word	0x0003e1e3
   239c0:	0003e217 	.word	0x0003e217
   239c4:	0003c48a 	.word	0x0003c48a
   239c8:	0003e230 	.word	0x0003e230
   239cc:	0003e254 	.word	0x0003e254
   239d0:	0003e276 	.word	0x0003e276
   239d4:	0003e2a4 	.word	0x0003e2a4
   239d8:	200003e4 	.word	0x200003e4
   239dc:	0003b9a0 	.word	0x0003b9a0

000239e0 <hci_le_meta_event>:
{
   239e0:	b510      	push	{r4, lr}
   239e2:	2101      	movs	r1, #1
   239e4:	4604      	mov	r4, r0
   239e6:	3008      	adds	r0, #8
   239e8:	f006 fb02 	bl	29ff0 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   239ec:	4621      	mov	r1, r4
   239ee:	4a03      	ldr	r2, [pc, #12]	; (239fc <hci_le_meta_event+0x1c>)
   239f0:	7800      	ldrb	r0, [r0, #0]
}
   239f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   239f6:	2307      	movs	r3, #7
   239f8:	f7ff bf0a 	b.w	23810 <handle_event>
   239fc:	0003b958 	.word	0x0003b958

00023a00 <hci_num_completed_packets>:
{
   23a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a04:	4d39      	ldr	r5, [pc, #228]	; (23aec <hci_num_completed_packets+0xec>)
   23a06:	4b3a      	ldr	r3, [pc, #232]	; (23af0 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   23a08:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   23a0c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 23af8 <hci_num_completed_packets+0xf8>
   23a10:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   23a12:	2600      	movs	r6, #0
   23a14:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   23a16:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   23a18:	f898 3000 	ldrb.w	r3, [r8]
   23a1c:	429e      	cmp	r6, r3
   23a1e:	db01      	blt.n	23a24 <hci_num_completed_packets+0x24>
}
   23a20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   23a24:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   23a28:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   23a2c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   23a30:	4658      	mov	r0, fp
   23a32:	f002 f80b 	bl	25a4c <bt_conn_lookup_handle>
		if (!conn) {
   23a36:	4604      	mov	r4, r0
   23a38:	b1d8      	cbz	r0, 23a72 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   23a3a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   23a3e:	2f00      	cmp	r7, #0
   23a40:	d033      	beq.n	23aaa <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   23a42:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a46:	f3ef 8211 	mrs	r2, BASEPRI
   23a4a:	f383 8812 	msr	BASEPRI_MAX, r3
   23a4e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   23a52:	69e3      	ldr	r3, [r4, #28]
   23a54:	b1b3      	cbz	r3, 23a84 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   23a56:	3b01      	subs	r3, #1
   23a58:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   23a5a:	f382 8811 	msr	BASEPRI, r2
   23a5e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   23a62:	4620      	mov	r0, r4
   23a64:	f001 fe06 	bl	25674 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   23a68:	3f01      	subs	r7, #1
   23a6a:	f00c fa29 	bl	2fec0 <z_impl_k_sem_give>
   23a6e:	b2bf      	uxth	r7, r7
   23a70:	e7e5      	b.n	23a3e <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   23a72:	01a8      	lsls	r0, r5, #6
   23a74:	491f      	ldr	r1, [pc, #124]	; (23af4 <hci_num_completed_packets+0xf4>)
   23a76:	465a      	mov	r2, fp
   23a78:	f040 0001 	orr.w	r0, r0, #1
   23a7c:	f013 fd08 	bl	37490 <log_string_sync>
	for (i = 0; i < evt->num_handles; i++) {
   23a80:	3601      	adds	r6, #1
   23a82:	e7c9      	b.n	23a18 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   23a84:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   23a86:	b12b      	cbz	r3, 23a94 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23a88:	69a1      	ldr	r1, [r4, #24]
   23a8a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   23a8c:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23a8e:	428b      	cmp	r3, r1
	list->tail = node;
   23a90:	bf08      	it	eq
   23a92:	61a0      	streq	r0, [r4, #24]
   23a94:	f382 8811 	msr	BASEPRI, r2
   23a98:	f3bf 8f6f 	isb	sy
			if (!node) {
   23a9c:	b94b      	cbnz	r3, 23ab2 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   23a9e:	01a8      	lsls	r0, r5, #6
   23aa0:	4651      	mov	r1, sl
   23aa2:	f040 0001 	orr.w	r0, r0, #1
   23aa6:	f013 fcf3 	bl	37490 <log_string_sync>
		bt_conn_unref(conn);
   23aaa:	4620      	mov	r0, r4
   23aac:	f001 ff96 	bl	259dc <bt_conn_unref>
   23ab0:	e7e6      	b.n	23a80 <hci_num_completed_packets+0x80>
	__asm__ volatile(
   23ab2:	f04f 0240 	mov.w	r2, #64	; 0x40
   23ab6:	f3ef 8111 	mrs	r1, BASEPRI
   23aba:	f382 8812 	msr	BASEPRI_MAX, r2
   23abe:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   23ac2:	68da      	ldr	r2, [r3, #12]
   23ac4:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   23ac6:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   23aca:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   23acc:	f8c3 900c 	str.w	r9, [r3, #12]
   23ad0:	b94a      	cbnz	r2, 23ae6 <hci_num_completed_packets+0xe6>
	list->head = node;
   23ad2:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   23ad6:	f381 8811 	msr	BASEPRI, r1
   23ada:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   23ade:	4658      	mov	r0, fp
   23ae0:	f00c fd8e 	bl	30600 <k_work_submit>
   23ae4:	e7bd      	b.n	23a62 <hci_num_completed_packets+0x62>
	parent->next = child;
   23ae6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   23ae8:	6263      	str	r3, [r4, #36]	; 0x24
}
   23aea:	e7f4      	b.n	23ad6 <hci_num_completed_packets+0xd6>
   23aec:	0003b480 	.word	0x0003b480
   23af0:	0003b448 	.word	0x0003b448
   23af4:	0003e2b8 	.word	0x0003e2b8
   23af8:	0003e2d4 	.word	0x0003e2d4

00023afc <hci_cmd_status>:
{
   23afc:	b538      	push	{r3, r4, r5, lr}
   23afe:	2104      	movs	r1, #4
   23b00:	4604      	mov	r4, r0
   23b02:	3008      	adds	r0, #8
   23b04:	f006 fa74 	bl	29ff0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   23b08:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   23b0a:	7801      	ldrb	r1, [r0, #0]
   23b0c:	8840      	ldrh	r0, [r0, #2]
   23b0e:	4622      	mov	r2, r4
   23b10:	f7ff fdde 	bl	236d0 <hci_cmd_done>
	if (ncmd) {
   23b14:	b125      	cbz	r5, 23b20 <hci_cmd_status+0x24>
   23b16:	4803      	ldr	r0, [pc, #12]	; (23b24 <hci_cmd_status+0x28>)
}
   23b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23b1c:	f00c b9d0 	b.w	2fec0 <z_impl_k_sem_give>
   23b20:	bd38      	pop	{r3, r4, r5, pc}
   23b22:	bf00      	nop
   23b24:	200003c8 	.word	0x200003c8

00023b28 <hci_cmd_complete>:
{
   23b28:	b538      	push	{r3, r4, r5, lr}
   23b2a:	2103      	movs	r1, #3
   23b2c:	4604      	mov	r4, r0
   23b2e:	3008      	adds	r0, #8
   23b30:	f006 fa5e 	bl	29ff0 <net_buf_simple_pull_mem>
	status = buf->data[0];
   23b34:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   23b36:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   23b38:	7819      	ldrb	r1, [r3, #0]
   23b3a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   23b3e:	4622      	mov	r2, r4
   23b40:	f7ff fdc6 	bl	236d0 <hci_cmd_done>
	if (ncmd) {
   23b44:	b125      	cbz	r5, 23b50 <hci_cmd_complete+0x28>
   23b46:	4803      	ldr	r0, [pc, #12]	; (23b54 <hci_cmd_complete+0x2c>)
}
   23b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23b4c:	f00c b9b8 	b.w	2fec0 <z_impl_k_sem_give>
   23b50:	bd38      	pop	{r3, r4, r5, pc}
   23b52:	bf00      	nop
   23b54:	200003c8 	.word	0x200003c8

00023b58 <bt_hci_cmd_state_set_init>:
{
   23b58:	b510      	push	{r4, lr}
	state->bit = bit;
   23b5a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   23b5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   23b62:	720b      	strb	r3, [r1, #8]
{
   23b64:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   23b66:	f005 fe39 	bl	297dc <net_buf_id>
   23b6a:	4b03      	ldr	r3, [pc, #12]	; (23b78 <bt_hci_cmd_state_set_init+0x20>)
   23b6c:	220c      	movs	r2, #12
   23b6e:	fb02 3000 	mla	r0, r2, r0, r3
   23b72:	6044      	str	r4, [r0, #4]
}
   23b74:	bd10      	pop	{r4, pc}
   23b76:	bf00      	nop
   23b78:	20002974 	.word	0x20002974

00023b7c <bt_hci_cmd_create>:
{
   23b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   23b80:	f04f 32ff 	mov.w	r2, #4294967295
   23b84:	4605      	mov	r5, r0
   23b86:	f04f 33ff 	mov.w	r3, #4294967295
   23b8a:	481b      	ldr	r0, [pc, #108]	; (23bf8 <bt_hci_cmd_create+0x7c>)
   23b8c:	460e      	mov	r6, r1
   23b8e:	f015 fda0 	bl	396d2 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   23b92:	4604      	mov	r4, r0
   23b94:	b948      	cbnz	r0, 23baa <bt_hci_cmd_create+0x2e>
   23b96:	4919      	ldr	r1, [pc, #100]	; (23bfc <bt_hci_cmd_create+0x80>)
   23b98:	4819      	ldr	r0, [pc, #100]	; (23c00 <bt_hci_cmd_create+0x84>)
   23b9a:	4a1a      	ldr	r2, [pc, #104]	; (23c04 <bt_hci_cmd_create+0x88>)
   23b9c:	23e9      	movs	r3, #233	; 0xe9
   23b9e:	f013 fabc 	bl	3711a <printk>
   23ba2:	4818      	ldr	r0, [pc, #96]	; (23c04 <bt_hci_cmd_create+0x88>)
   23ba4:	21e9      	movs	r1, #233	; 0xe9
   23ba6:	f013 fc5e 	bl	37466 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   23baa:	f104 0b08 	add.w	fp, r4, #8
   23bae:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   23bb0:	2700      	movs	r7, #0
   23bb2:	4658      	mov	r0, fp
   23bb4:	f005 ffae 	bl	29b14 <net_buf_simple_reserve>
   23bb8:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   23bba:	4620      	mov	r0, r4
   23bbc:	f005 fe0e 	bl	297dc <net_buf_id>
   23bc0:	f8df 8044 	ldr.w	r8, [pc, #68]	; 23c08 <bt_hci_cmd_create+0x8c>
   23bc4:	f04f 0a0c 	mov.w	sl, #12
   23bc8:	fb0a 8000 	mla	r0, sl, r0, r8
   23bcc:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   23bce:	4620      	mov	r0, r4
   23bd0:	f005 fe04 	bl	297dc <net_buf_id>
   23bd4:	fb0a 8000 	mla	r0, sl, r0, r8
   23bd8:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   23bda:	4620      	mov	r0, r4
   23bdc:	f005 fdfe 	bl	297dc <net_buf_id>
   23be0:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   23be4:	2103      	movs	r1, #3
   23be6:	6047      	str	r7, [r0, #4]
   23be8:	4658      	mov	r0, fp
   23bea:	f006 fa23 	bl	2a034 <net_buf_simple_add>
	hdr->param_len = param_len;
   23bee:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   23bf0:	8005      	strh	r5, [r0, #0]
}
   23bf2:	4620      	mov	r0, r4
   23bf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23bf8:	20000d50 	.word	0x20000d50
   23bfc:	0003e07b 	.word	0x0003e07b
   23c00:	0003c48a 	.word	0x0003c48a
   23c04:	0003e1e3 	.word	0x0003e1e3
   23c08:	20002974 	.word	0x20002974

00023c0c <bt_hci_cmd_send_sync>:
{
   23c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c10:	4607      	mov	r7, r0
   23c12:	b086      	sub	sp, #24
   23c14:	4615      	mov	r5, r2
	if (!buf) {
   23c16:	460c      	mov	r4, r1
   23c18:	b921      	cbnz	r1, 23c24 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   23c1a:	f7ff ffaf 	bl	23b7c <bt_hci_cmd_create>
		if (!buf) {
   23c1e:	4604      	mov	r4, r0
   23c20:	2800      	cmp	r0, #0
   23c22:	d055      	beq.n	23cd0 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   23c24:	2201      	movs	r2, #1
   23c26:	2100      	movs	r1, #0
   23c28:	4668      	mov	r0, sp
   23c2a:	f016 fb22 	bl	3a272 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   23c2e:	4620      	mov	r0, r4
   23c30:	f005 fdd4 	bl	297dc <net_buf_id>
   23c34:	4e28      	ldr	r6, [pc, #160]	; (23cd8 <bt_hci_cmd_send_sync+0xcc>)
   23c36:	230c      	movs	r3, #12
   23c38:	fb03 6000 	mla	r0, r3, r0, r6
   23c3c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   23c40:	4620      	mov	r0, r4
   23c42:	f006 f90d 	bl	29e60 <net_buf_ref>
   23c46:	4601      	mov	r1, r0
   23c48:	4824      	ldr	r0, [pc, #144]	; (23cdc <bt_hci_cmd_send_sync+0xd0>)
   23c4a:	f006 f88f 	bl	29d6c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   23c4e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   23c52:	2300      	movs	r3, #0
   23c54:	4668      	mov	r0, sp
   23c56:	f00c f977 	bl	2ff48 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   23c5a:	4680      	mov	r8, r0
   23c5c:	b180      	cbz	r0, 23c80 <bt_hci_cmd_send_sync+0x74>
   23c5e:	4a20      	ldr	r2, [pc, #128]	; (23ce0 <bt_hci_cmd_send_sync+0xd4>)
   23c60:	4920      	ldr	r1, [pc, #128]	; (23ce4 <bt_hci_cmd_send_sync+0xd8>)
   23c62:	4821      	ldr	r0, [pc, #132]	; (23ce8 <bt_hci_cmd_send_sync+0xdc>)
   23c64:	f240 1331 	movw	r3, #305	; 0x131
   23c68:	f013 fa57 	bl	3711a <printk>
   23c6c:	481f      	ldr	r0, [pc, #124]	; (23cec <bt_hci_cmd_send_sync+0xe0>)
   23c6e:	4641      	mov	r1, r8
   23c70:	f013 fa53 	bl	3711a <printk>
   23c74:	4040      	eors	r0, r0
   23c76:	f380 8811 	msr	BASEPRI, r0
   23c7a:	f04f 0003 	mov.w	r0, #3
   23c7e:	df02      	svc	2
	status = cmd(buf)->status;
   23c80:	4620      	mov	r0, r4
   23c82:	f005 fdab 	bl	297dc <net_buf_id>
   23c86:	230c      	movs	r3, #12
   23c88:	4343      	muls	r3, r0
   23c8a:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   23c8c:	b1be      	cbz	r6, 23cbe <bt_hci_cmd_send_sync+0xb2>
   23c8e:	4b18      	ldr	r3, [pc, #96]	; (23cf0 <bt_hci_cmd_send_sync+0xe4>)
   23c90:	4818      	ldr	r0, [pc, #96]	; (23cf4 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   23c92:	4919      	ldr	r1, [pc, #100]	; (23cf8 <bt_hci_cmd_send_sync+0xec>)
   23c94:	1ac0      	subs	r0, r0, r3
   23c96:	08c0      	lsrs	r0, r0, #3
   23c98:	0180      	lsls	r0, r0, #6
   23c9a:	4633      	mov	r3, r6
   23c9c:	463a      	mov	r2, r7
   23c9e:	f040 0002 	orr.w	r0, r0, #2
   23ca2:	f013 fbf5 	bl	37490 <log_string_sync>
		net_buf_unref(buf);
   23ca6:	4620      	mov	r0, r4
   23ca8:	f006 f894 	bl	29dd4 <net_buf_unref>
			return -EIO;
   23cac:	2e09      	cmp	r6, #9
   23cae:	bf0c      	ite	eq
   23cb0:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   23cb4:	f06f 0004 	mvnne.w	r0, #4
}
   23cb8:	b006      	add	sp, #24
   23cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   23cbe:	b115      	cbz	r5, 23cc6 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   23cc0:	602c      	str	r4, [r5, #0]
	return 0;
   23cc2:	4630      	mov	r0, r6
   23cc4:	e7f8      	b.n	23cb8 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   23cc6:	4620      	mov	r0, r4
   23cc8:	f006 f884 	bl	29dd4 <net_buf_unref>
	return 0;
   23ccc:	4628      	mov	r0, r5
   23cce:	e7f3      	b.n	23cb8 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   23cd0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23cd4:	e7f0      	b.n	23cb8 <bt_hci_cmd_send_sync+0xac>
   23cd6:	bf00      	nop
   23cd8:	20002974 	.word	0x20002974
   23cdc:	20000400 	.word	0x20000400
   23ce0:	0003e1e3 	.word	0x0003e1e3
   23ce4:	0003c481 	.word	0x0003c481
   23ce8:	0003c48a 	.word	0x0003c48a
   23cec:	0003e2eb 	.word	0x0003e2eb
   23cf0:	0003b448 	.word	0x0003b448
   23cf4:	0003b480 	.word	0x0003b480
   23cf8:	0003e30b 	.word	0x0003e30b

00023cfc <bt_send>:
	return bt_dev.drv->send(buf);
   23cfc:	4b02      	ldr	r3, [pc, #8]	; (23d08 <bt_send+0xc>)
   23cfe:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   23d02:	691b      	ldr	r3, [r3, #16]
   23d04:	4718      	bx	r3
   23d06:	bf00      	nop
   23d08:	200002b0 	.word	0x200002b0

00023d0c <bt_hci_cmd_send>:
{
   23d0c:	b538      	push	{r3, r4, r5, lr}
   23d0e:	4605      	mov	r5, r0
	if (!buf) {
   23d10:	460c      	mov	r4, r1
   23d12:	b919      	cbnz	r1, 23d1c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   23d14:	f7ff ff32 	bl	23b7c <bt_hci_cmd_create>
		if (!buf) {
   23d18:	4604      	mov	r4, r0
   23d1a:	b1f0      	cbz	r0, 23d5a <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   23d1c:	f640 4335 	movw	r3, #3125	; 0xc35
   23d20:	429d      	cmp	r5, r3
   23d22:	d114      	bne.n	23d4e <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
   23d24:	4620      	mov	r0, r4
   23d26:	f7ff ffe9 	bl	23cfc <bt_send>
		if (err) {
   23d2a:	4605      	mov	r5, r0
   23d2c:	b168      	cbz	r0, 23d4a <bt_hci_cmd_send+0x3e>
   23d2e:	4b0c      	ldr	r3, [pc, #48]	; (23d60 <bt_hci_cmd_send+0x54>)
   23d30:	480c      	ldr	r0, [pc, #48]	; (23d64 <bt_hci_cmd_send+0x58>)
			BT_ERR("Unable to send to driver (err %d)", err);
   23d32:	490d      	ldr	r1, [pc, #52]	; (23d68 <bt_hci_cmd_send+0x5c>)
   23d34:	1ac0      	subs	r0, r0, r3
   23d36:	08c0      	lsrs	r0, r0, #3
   23d38:	0180      	lsls	r0, r0, #6
   23d3a:	f040 0001 	orr.w	r0, r0, #1
   23d3e:	462a      	mov	r2, r5
   23d40:	f013 fba6 	bl	37490 <log_string_sync>
			net_buf_unref(buf);
   23d44:	4620      	mov	r0, r4
   23d46:	f006 f845 	bl	29dd4 <net_buf_unref>
}
   23d4a:	4628      	mov	r0, r5
   23d4c:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   23d4e:	4807      	ldr	r0, [pc, #28]	; (23d6c <bt_hci_cmd_send+0x60>)
   23d50:	4621      	mov	r1, r4
   23d52:	f006 f80b 	bl	29d6c <net_buf_put>
	return 0;
   23d56:	2500      	movs	r5, #0
   23d58:	e7f7      	b.n	23d4a <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   23d5a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   23d5e:	e7f4      	b.n	23d4a <bt_hci_cmd_send+0x3e>
   23d60:	0003b448 	.word	0x0003b448
   23d64:	0003b480 	.word	0x0003b480
   23d68:	0003e327 	.word	0x0003e327
   23d6c:	20000400 	.word	0x20000400

00023d70 <conn_auto_initiate>:
{
   23d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   23d72:	7a83      	ldrb	r3, [r0, #10]
   23d74:	2b07      	cmp	r3, #7
{
   23d76:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   23d78:	d14d      	bne.n	23e16 <conn_auto_initiate+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23d7a:	f3bf 8f5b 	dmb	ish
   23d7e:	6843      	ldr	r3, [r0, #4]
   23d80:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   23d84:	1d06      	adds	r6, r0, #4
   23d86:	0498      	lsls	r0, r3, #18
   23d88:	d41b      	bmi.n	23dc2 <conn_auto_initiate+0x52>
   23d8a:	78e3      	ldrb	r3, [r4, #3]
   23d8c:	b123      	cbz	r3, 23d98 <conn_auto_initiate+0x28>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   23d8e:	4b23      	ldr	r3, [pc, #140]	; (23e1c <conn_auto_initiate+0xac>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   23d90:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   23d94:	0719      	lsls	r1, r3, #28
   23d96:	d514      	bpl.n	23dc2 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   23d98:	2102      	movs	r1, #2
   23d9a:	f242 0016 	movw	r0, #8214	; 0x2016
   23d9e:	f7ff feed 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   23da2:	4605      	mov	r5, r0
   23da4:	b168      	cbz	r0, 23dc2 <conn_auto_initiate+0x52>
   23da6:	2102      	movs	r1, #2
   23da8:	3008      	adds	r0, #8
   23daa:	f006 f943 	bl	2a034 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   23dae:	8823      	ldrh	r3, [r4, #0]
   23db0:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   23db2:	4629      	mov	r1, r5
   23db4:	f242 0016 	movw	r0, #8214	; 0x2016
}
   23db8:	b002      	add	sp, #8
   23dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   23dbe:	f7ff bfa5 	b.w	23d0c <bt_hci_cmd_send>
   23dc2:	f3bf 8f5b 	dmb	ish
   23dc6:	6863      	ldr	r3, [r4, #4]
   23dc8:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   23dcc:	04da      	lsls	r2, r3, #19
   23dce:	f3c3 3100 	ubfx	r1, r3, #12, #1
   23dd2:	d420      	bmi.n	23e16 <conn_auto_initiate+0xa6>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   23dd4:	4b11      	ldr	r3, [pc, #68]	; (23e1c <conn_auto_initiate+0xac>)
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   23dd6:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
   23dda:	07db      	lsls	r3, r3, #31
   23ddc:	d51b      	bpl.n	23e16 <conn_auto_initiate+0xa6>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   23dde:	2302      	movs	r3, #2
   23de0:	461a      	mov	r2, r3
   23de2:	9100      	str	r1, [sp, #0]
   23de4:	4620      	mov	r0, r4
   23de6:	f014 fa55 	bl	38294 <bt_le_set_phy>
		if (!err) {
   23dea:	4602      	mov	r2, r0
   23dec:	b930      	cbnz	r0, 23dfc <conn_auto_initiate+0x8c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   23dee:	2180      	movs	r1, #128	; 0x80
   23df0:	4630      	mov	r0, r6
}
   23df2:	b002      	add	sp, #8
   23df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23df8:	f014 b9f6 	b.w	381e8 <atomic_or>
   23dfc:	4808      	ldr	r0, [pc, #32]	; (23e20 <conn_auto_initiate+0xb0>)
   23dfe:	4b09      	ldr	r3, [pc, #36]	; (23e24 <conn_auto_initiate+0xb4>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   23e00:	4909      	ldr	r1, [pc, #36]	; (23e28 <conn_auto_initiate+0xb8>)
   23e02:	1a1b      	subs	r3, r3, r0
   23e04:	08db      	lsrs	r3, r3, #3
   23e06:	019b      	lsls	r3, r3, #6
   23e08:	f043 0001 	orr.w	r0, r3, #1
}
   23e0c:	b002      	add	sp, #8
   23e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Failed to set LE PHY (%d)", err);
   23e12:	f013 bb3d 	b.w	37490 <log_string_sync>
}
   23e16:	b002      	add	sp, #8
   23e18:	bd70      	pop	{r4, r5, r6, pc}
   23e1a:	bf00      	nop
   23e1c:	200002b0 	.word	0x200002b0
   23e20:	0003b448 	.word	0x0003b448
   23e24:	0003b480 	.word	0x0003b480
   23e28:	0003e349 	.word	0x0003e349

00023e2c <bt_hci_le_enh_conn_complete>:
{
   23e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   23e30:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   23e34:	4a7b      	ldr	r2, [pc, #492]	; (24024 <bt_hci_le_enh_conn_complete+0x1f8>)
	if (evt->status) {
   23e36:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   23e38:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   23e3a:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   23e3e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   23e42:	b29b      	uxth	r3, r3
   23e44:	4299      	cmp	r1, r3
   23e46:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
   23e4a:	bf08      	it	eq
   23e4c:	f8a2 8000 	strheq.w	r8, [r2]
{
   23e50:	b085      	sub	sp, #20
   23e52:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   23e54:	fa1f f789 	uxth.w	r7, r9
			return true;
   23e58:	bf08      	it	eq
   23e5a:	f04f 0801 	moveq.w	r8, #1
	if (evt->status) {
   23e5e:	b3b4      	cbz	r4, 23ece <bt_hci_le_enh_conn_complete+0xa2>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   23e60:	2c3c      	cmp	r4, #60	; 0x3c
   23e62:	d128      	bne.n	23eb6 <bt_hci_le_enh_conn_complete+0x8a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   23e64:	f001 f8f8 	bl	25058 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23e68:	f3bf 8f5b 	dmb	ish
   23e6c:	3010      	adds	r0, #16
   23e6e:	e850 3f00 	ldrex	r3, [r0]
   23e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   23e76:	e840 3200 	strex	r2, r3, [r0]
   23e7a:	2a00      	cmp	r2, #0
   23e7c:	d1f7      	bne.n	23e6e <bt_hci_le_enh_conn_complete+0x42>
   23e7e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   23e82:	2000      	movs	r0, #0
   23e84:	f7ff fc06 	bl	23694 <find_pending_connect.part.0>
		if (!conn) {
   23e88:	4605      	mov	r5, r0
   23e8a:	b960      	cbnz	r0, 23ea6 <bt_hci_le_enh_conn_complete+0x7a>
   23e8c:	4866      	ldr	r0, [pc, #408]	; (24028 <bt_hci_le_enh_conn_complete+0x1fc>)
   23e8e:	4b67      	ldr	r3, [pc, #412]	; (2402c <bt_hci_le_enh_conn_complete+0x200>)
			BT_ERR("No pending peripheral connection");
   23e90:	4967      	ldr	r1, [pc, #412]	; (24030 <bt_hci_le_enh_conn_complete+0x204>)
   23e92:	1ac0      	subs	r0, r0, r3
   23e94:	08c0      	lsrs	r0, r0, #3
   23e96:	0180      	lsls	r0, r0, #6
   23e98:	f040 0001 	orr.w	r0, r0, #1
   23e9c:	f013 faf8 	bl	37490 <log_string_sync>
}
   23ea0:	b005      	add	sp, #20
   23ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   23ea6:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   23ea8:	2100      	movs	r1, #0
   23eaa:	f001 fddb 	bl	25a64 <bt_conn_set_state>
		bt_conn_unref(conn);
   23eae:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   23eb0:	f001 fd94 	bl	259dc <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   23eb4:	e7f4      	b.n	23ea0 <bt_hci_le_enh_conn_complete+0x74>
   23eb6:	4b5d      	ldr	r3, [pc, #372]	; (2402c <bt_hci_le_enh_conn_complete+0x200>)
   23eb8:	485b      	ldr	r0, [pc, #364]	; (24028 <bt_hci_le_enh_conn_complete+0x1fc>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   23eba:	495e      	ldr	r1, [pc, #376]	; (24034 <bt_hci_le_enh_conn_complete+0x208>)
   23ebc:	1ac0      	subs	r0, r0, r3
   23ebe:	08c0      	lsrs	r0, r0, #3
   23ec0:	0180      	lsls	r0, r0, #6
   23ec2:	4622      	mov	r2, r4
   23ec4:	f040 0002 	orr.w	r0, r0, #2
   23ec8:	f013 fae2 	bl	37490 <log_string_sync>
		return;
   23ecc:	e7e8      	b.n	23ea0 <bt_hci_le_enh_conn_complete+0x74>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   23ece:	7903      	ldrb	r3, [r0, #4]
   23ed0:	3b02      	subs	r3, #2
   23ed2:	2b01      	cmp	r3, #1
   23ed4:	f100 0604 	add.w	r6, r0, #4
   23ed8:	d844      	bhi.n	23f64 <bt_hci_le_enh_conn_complete+0x138>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   23eda:	4631      	mov	r1, r6
   23edc:	a802      	add	r0, sp, #8
   23ede:	f014 f997 	bl	38210 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   23ee2:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   23ee6:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   23eea:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   23eec:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   23ef0:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   23ef4:	f014 f987 	bl	38206 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   23ef8:	2301      	movs	r3, #1
   23efa:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   23efe:	78eb      	ldrb	r3, [r5, #3]
   23f00:	2b01      	cmp	r3, #1
   23f02:	d119      	bne.n	23f38 <bt_hci_le_enh_conn_complete+0x10c>
   23f04:	a802      	add	r0, sp, #8
   23f06:	f7ff fbc5 	bl	23694 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   23f0a:	78eb      	ldrb	r3, [r5, #3]
   23f0c:	2b01      	cmp	r3, #1
   23f0e:	4604      	mov	r4, r0
   23f10:	d111      	bne.n	23f36 <bt_hci_le_enh_conn_complete+0x10a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   23f12:	f001 f8a1 	bl	25058 <bt_le_adv_lookup_legacy>
   23f16:	f3bf 8f5b 	dmb	ish
   23f1a:	f100 0310 	add.w	r3, r0, #16
   23f1e:	e853 2f00 	ldrex	r2, [r3]
   23f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   23f26:	e843 2100 	strex	r1, r2, [r3]
   23f2a:	2900      	cmp	r1, #0
   23f2c:	d1f7      	bne.n	23f1e <bt_hci_le_enh_conn_complete+0xf2>
   23f2e:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   23f32:	f014 fb23 	bl	3857c <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   23f36:	bb44      	cbnz	r4, 23f8a <bt_hci_le_enh_conn_complete+0x15e>
   23f38:	4b3c      	ldr	r3, [pc, #240]	; (2402c <bt_hci_le_enh_conn_complete+0x200>)
   23f3a:	4c3b      	ldr	r4, [pc, #236]	; (24028 <bt_hci_le_enh_conn_complete+0x1fc>)
		BT_ERR("No pending conn for peer %s",
   23f3c:	4630      	mov	r0, r6
   23f3e:	1ae4      	subs	r4, r4, r3
   23f40:	f7ff f88c 	bl	2305c <bt_addr_le_str_real>
   23f44:	f013 fab7 	bl	374b6 <z_log_strdup>
   23f48:	08e4      	lsrs	r4, r4, #3
   23f4a:	01a4      	lsls	r4, r4, #6
   23f4c:	f044 0401 	orr.w	r4, r4, #1
   23f50:	4602      	mov	r2, r0
   23f52:	4939      	ldr	r1, [pc, #228]	; (24038 <bt_hci_le_enh_conn_complete+0x20c>)
   23f54:	4620      	mov	r0, r4
   23f56:	f013 fa9b 	bl	37490 <log_string_sync>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   23f5a:	211f      	movs	r1, #31
   23f5c:	4638      	mov	r0, r7
   23f5e:	f014 f95e 	bl	3821e <bt_hci_disconnect>
		return;
   23f62:	e79d      	b.n	23ea0 <bt_hci_le_enh_conn_complete+0x74>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   23f64:	78c3      	ldrb	r3, [r0, #3]
   23f66:	2b01      	cmp	r3, #1
   23f68:	bf04      	itt	eq
   23f6a:	4b34      	ldreq	r3, [pc, #208]	; (2403c <bt_hci_le_enh_conn_complete+0x210>)
   23f6c:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   23f70:	4631      	mov	r1, r6
   23f72:	4620      	mov	r0, r4
   23f74:	f014 f9fc 	bl	38370 <bt_lookup_id_addr>
   23f78:	4601      	mov	r1, r0
   23f7a:	a802      	add	r0, sp, #8
   23f7c:	f014 f948 	bl	38210 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   23f80:	4631      	mov	r1, r6
   23f82:	4668      	mov	r0, sp
   23f84:	f014 f944 	bl	38210 <bt_addr_le_copy>
   23f88:	e7b9      	b.n	23efe <bt_hci_le_enh_conn_complete+0xd2>
	conn->handle = handle;
   23f8a:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   23f8c:	a902      	add	r1, sp, #8
	conn->handle = handle;
   23f8e:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   23f92:	f014 f93d 	bl	38210 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   23f96:	7e2a      	ldrb	r2, [r5, #24]
   23f98:	7deb      	ldrb	r3, [r5, #23]
   23f9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23f9e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   23fa2:	7eaa      	ldrb	r2, [r5, #26]
   23fa4:	7e6b      	ldrb	r3, [r5, #25]
   23fa6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23faa:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   23fae:	7f2a      	ldrb	r2, [r5, #28]
   23fb0:	7eeb      	ldrb	r3, [r5, #27]
   23fb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23fb6:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   23fba:	78eb      	ldrb	r3, [r5, #3]
	conn->le.data_len.tx_max_len = BT_GAP_DATA_LEN_DEFAULT;
   23fbc:	4a20      	ldr	r2, [pc, #128]	; (24040 <bt_hci_le_enh_conn_complete+0x214>)
	conn->role = evt->role;
   23fbe:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   23fc0:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   23fc2:	2b01      	cmp	r3, #1
	conn->le.data_len.rx_max_len = BT_GAP_DATA_LEN_DEFAULT;
   23fc4:	e9c4 2230 	strd	r2, r2, [r4, #192]	; 0xc0
	conn->err = 0U;
   23fc8:	7265      	strb	r5, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   23fca:	d118      	bne.n	23ffe <bt_hci_le_enh_conn_complete+0x1d2>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   23fcc:	4669      	mov	r1, sp
   23fce:	f104 0097 	add.w	r0, r4, #151	; 0x97
   23fd2:	f014 f91d 	bl	38210 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   23fd6:	f001 f83f 	bl	25058 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   23fda:	7a21      	ldrb	r1, [r4, #8]
   23fdc:	4a17      	ldr	r2, [pc, #92]	; (2403c <bt_hci_le_enh_conn_complete+0x210>)
   23fde:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   23fe2:	4411      	add	r1, r2
   23fe4:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   23fe8:	f014 f912 	bl	38210 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   23fec:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   23ff0:	462a      	mov	r2, r5
   23ff2:	f001 0340 	and.w	r3, r1, #64	; 0x40
   23ff6:	4313      	orrs	r3, r2
   23ff8:	d001      	beq.n	23ffe <bt_hci_le_enh_conn_complete+0x1d2>
			bt_le_adv_resume();
   23ffa:	f001 f9fb 	bl	253f4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   23ffe:	2107      	movs	r1, #7
   24000:	4620      	mov	r0, r4
   24002:	f001 fd2f 	bl	25a64 <bt_conn_set_state>
	if (is_disconnected) {
   24006:	f1b8 0f00 	cmp.w	r8, #0
   2400a:	d003      	beq.n	24014 <bt_hci_le_enh_conn_complete+0x1e8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2400c:	2101      	movs	r1, #1
   2400e:	4620      	mov	r0, r4
   24010:	f001 fd28 	bl	25a64 <bt_conn_set_state>
	bt_conn_connected(conn);
   24014:	4620      	mov	r0, r4
   24016:	f014 fb20 	bl	3865a <bt_conn_connected>
	conn_auto_initiate(conn);
   2401a:	4620      	mov	r0, r4
   2401c:	f7ff fea8 	bl	23d70 <conn_auto_initiate>
	bt_conn_unref(conn);
   24020:	4620      	mov	r0, r4
   24022:	e745      	b.n	23eb0 <bt_hci_le_enh_conn_complete+0x84>
   24024:	2000373e 	.word	0x2000373e
   24028:	0003b480 	.word	0x0003b480
   2402c:	0003b448 	.word	0x0003b448
   24030:	0003e363 	.word	0x0003e363
   24034:	0003e384 	.word	0x0003e384
   24038:	0003e39d 	.word	0x0003e39d
   2403c:	200002b0 	.word	0x200002b0
   24040:	0148001b 	.word	0x0148001b

00024044 <le_phy_update_complete>:
{
   24044:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   24046:	6883      	ldr	r3, [r0, #8]
   24048:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   2404c:	4628      	mov	r0, r5
   2404e:	f001 fcfd 	bl	25a4c <bt_conn_lookup_handle>
	if (!conn) {
   24052:	4604      	mov	r4, r0
   24054:	b960      	cbnz	r0, 24070 <le_phy_update_complete+0x2c>
   24056:	4b14      	ldr	r3, [pc, #80]	; (240a8 <le_phy_update_complete+0x64>)
   24058:	4814      	ldr	r0, [pc, #80]	; (240ac <le_phy_update_complete+0x68>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   2405a:	4915      	ldr	r1, [pc, #84]	; (240b0 <le_phy_update_complete+0x6c>)
   2405c:	1ac0      	subs	r0, r0, r3
   2405e:	08c0      	lsrs	r0, r0, #3
   24060:	0180      	lsls	r0, r0, #6
   24062:	462a      	mov	r2, r5
   24064:	f040 0001 	orr.w	r0, r0, #1
}
   24068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   2406c:	f013 ba10 	b.w	37490 <log_string_sync>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   24070:	3004      	adds	r0, #4
   24072:	f3bf 8f5b 	dmb	ish
   24076:	e850 3f00 	ldrex	r3, [r0]
   2407a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   2407e:	e840 2100 	strex	r1, r2, [r0]
   24082:	2900      	cmp	r1, #0
   24084:	d1f7      	bne.n	24076 <le_phy_update_complete+0x32>
   24086:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   2408a:	061b      	lsls	r3, r3, #24
   2408c:	d506      	bpl.n	2409c <le_phy_update_complete+0x58>
   2408e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   24092:	f014 f8a9 	bl	381e8 <atomic_or>
		conn_auto_initiate(conn);
   24096:	4620      	mov	r0, r4
   24098:	f7ff fe6a 	bl	23d70 <conn_auto_initiate>
	bt_conn_unref(conn);
   2409c:	4620      	mov	r0, r4
}
   2409e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   240a2:	f001 bc9b 	b.w	259dc <bt_conn_unref>
   240a6:	bf00      	nop
   240a8:	0003b448 	.word	0x0003b448
   240ac:	0003b480 	.word	0x0003b480
   240b0:	0003e113 	.word	0x0003e113

000240b4 <le_remote_feat_complete>:
{
   240b4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   240b6:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   240b8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   240bc:	4630      	mov	r0, r6
   240be:	f001 fcc5 	bl	25a4c <bt_conn_lookup_handle>
	if (!conn) {
   240c2:	4604      	mov	r4, r0
   240c4:	b960      	cbnz	r0, 240e0 <le_remote_feat_complete+0x2c>
   240c6:	4811      	ldr	r0, [pc, #68]	; (2410c <le_remote_feat_complete+0x58>)
   240c8:	4b11      	ldr	r3, [pc, #68]	; (24110 <le_remote_feat_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   240ca:	4912      	ldr	r1, [pc, #72]	; (24114 <le_remote_feat_complete+0x60>)
   240cc:	1ac0      	subs	r0, r0, r3
   240ce:	08c0      	lsrs	r0, r0, #3
   240d0:	0180      	lsls	r0, r0, #6
   240d2:	4632      	mov	r2, r6
   240d4:	f040 0001 	orr.w	r0, r0, #1
}
   240d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   240dc:	f013 b9d8 	b.w	37490 <log_string_sync>
	if (!evt->status) {
   240e0:	782b      	ldrb	r3, [r5, #0]
   240e2:	b933      	cbnz	r3, 240f2 <le_remote_feat_complete+0x3e>
   240e4:	f855 3f03 	ldr.w	r3, [r5, #3]!
   240e8:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   240ec:	686b      	ldr	r3, [r5, #4]
   240ee:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
   240f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   240f6:	1d20      	adds	r0, r4, #4
   240f8:	f014 f876 	bl	381e8 <atomic_or>
	conn_auto_initiate(conn);
   240fc:	4620      	mov	r0, r4
   240fe:	f7ff fe37 	bl	23d70 <conn_auto_initiate>
	bt_conn_unref(conn);
   24102:	4620      	mov	r0, r4
}
   24104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   24108:	f001 bc68 	b.w	259dc <bt_conn_unref>
   2410c:	0003b480 	.word	0x0003b480
   24110:	0003b448 	.word	0x0003b448
   24114:	0003e113 	.word	0x0003e113

00024118 <le_conn_param_neg_reply>:
{
   24118:	b570      	push	{r4, r5, r6, lr}
   2411a:	4606      	mov	r6, r0
   2411c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2411e:	f242 0021 	movw	r0, #8225	; 0x2021
   24122:	2103      	movs	r1, #3
   24124:	f7ff fd2a 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   24128:	4604      	mov	r4, r0
   2412a:	b958      	cbnz	r0, 24144 <le_conn_param_neg_reply+0x2c>
   2412c:	480c      	ldr	r0, [pc, #48]	; (24160 <le_conn_param_neg_reply+0x48>)
   2412e:	4b0d      	ldr	r3, [pc, #52]	; (24164 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   24130:	490d      	ldr	r1, [pc, #52]	; (24168 <le_conn_param_neg_reply+0x50>)
   24132:	1ac0      	subs	r0, r0, r3
   24134:	08c0      	lsrs	r0, r0, #3
   24136:	0180      	lsls	r0, r0, #6
}
   24138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   2413c:	f040 0001 	orr.w	r0, r0, #1
   24140:	f013 b9a6 	b.w	37490 <log_string_sync>
   24144:	2103      	movs	r1, #3
   24146:	3008      	adds	r0, #8
   24148:	f005 ff74 	bl	2a034 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   2414c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   2414e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   24150:	4621      	mov	r1, r4
   24152:	f242 0021 	movw	r0, #8225	; 0x2021
}
   24156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2415a:	f7ff bdd7 	b.w	23d0c <bt_hci_cmd_send>
   2415e:	bf00      	nop
   24160:	0003b480 	.word	0x0003b480
   24164:	0003b448 	.word	0x0003b448
   24168:	0003e3b9 	.word	0x0003e3b9

0002416c <le_conn_param_req>:
{
   2416c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   2416e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   24170:	78d9      	ldrb	r1, [r3, #3]
   24172:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   24174:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   24176:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2417a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   2417e:	7959      	ldrb	r1, [r3, #5]
   24180:	791a      	ldrb	r2, [r3, #4]
   24182:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24186:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   2418a:	799a      	ldrb	r2, [r3, #6]
   2418c:	79d9      	ldrb	r1, [r3, #7]
   2418e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24192:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   24196:	7a1a      	ldrb	r2, [r3, #8]
   24198:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   2419a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   2419c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   241a0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   241a2:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   241a6:	f001 fc51 	bl	25a4c <bt_conn_lookup_handle>
	if (!conn) {
   241aa:	4606      	mov	r6, r0
   241ac:	b980      	cbnz	r0, 241d0 <le_conn_param_req+0x64>
   241ae:	4b20      	ldr	r3, [pc, #128]	; (24230 <le_conn_param_req+0xc4>)
   241b0:	4820      	ldr	r0, [pc, #128]	; (24234 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   241b2:	4921      	ldr	r1, [pc, #132]	; (24238 <le_conn_param_req+0xcc>)
   241b4:	1ac0      	subs	r0, r0, r3
   241b6:	08c0      	lsrs	r0, r0, #3
   241b8:	0180      	lsls	r0, r0, #6
   241ba:	f040 0001 	orr.w	r0, r0, #1
   241be:	4622      	mov	r2, r4
   241c0:	f013 f966 	bl	37490 <log_string_sync>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   241c4:	2102      	movs	r1, #2
   241c6:	4620      	mov	r0, r4
   241c8:	f7ff ffa6 	bl	24118 <le_conn_param_neg_reply>
}
   241cc:	b003      	add	sp, #12
   241ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   241d0:	4669      	mov	r1, sp
   241d2:	f001 fe39 	bl	25e48 <le_param_req>
   241d6:	b938      	cbnz	r0, 241e8 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   241d8:	211e      	movs	r1, #30
   241da:	4620      	mov	r0, r4
   241dc:	f7ff ff9c 	bl	24118 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   241e0:	4630      	mov	r0, r6
   241e2:	f001 fbfb 	bl	259dc <bt_conn_unref>
   241e6:	e7f1      	b.n	241cc <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   241e8:	210e      	movs	r1, #14
   241ea:	f242 0020 	movw	r0, #8224	; 0x2020
   241ee:	f7ff fcc5 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   241f2:	4605      	mov	r5, r0
   241f4:	2800      	cmp	r0, #0
   241f6:	d0f3      	beq.n	241e0 <le_conn_param_req+0x74>
   241f8:	210e      	movs	r1, #14
   241fa:	3008      	adds	r0, #8
   241fc:	f005 ff1a 	bl	2a034 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   24200:	220e      	movs	r2, #14
   24202:	4604      	mov	r4, r0
   24204:	2100      	movs	r1, #0
   24206:	f016 f9b7 	bl	3a578 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2420a:	f8bd 3000 	ldrh.w	r3, [sp]
   2420e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   24210:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   24214:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   24216:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2421a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2421c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   24220:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   24222:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   24224:	4629      	mov	r1, r5
   24226:	f242 0020 	movw	r0, #8224	; 0x2020
   2422a:	f7ff fd6f 	bl	23d0c <bt_hci_cmd_send>
   2422e:	e7d7      	b.n	241e0 <le_conn_param_req+0x74>
   24230:	0003b448 	.word	0x0003b448
   24234:	0003b480 	.word	0x0003b480
   24238:	0003e113 	.word	0x0003e113

0002423c <hci_tx_thread>:
{
   2423c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24240:	4d51      	ldr	r5, [pc, #324]	; (24388 <hci_tx_thread+0x14c>)
   24242:	4b52      	ldr	r3, [pc, #328]	; (2438c <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   24244:	f8df 914c 	ldr.w	r9, [pc, #332]	; 24394 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
   24248:	f8df a174 	ldr.w	sl, [pc, #372]	; 243c0 <hci_tx_thread+0x184>
   2424c:	1aed      	subs	r5, r5, r3
   2424e:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   24250:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   24254:	484e      	ldr	r0, [pc, #312]	; (24390 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   24256:	f36f 3352 	bfc	r3, #13, #6
   2425a:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2425e:	f001 fb7f 	bl	25960 <bt_conn_prepare_events>
   24262:	1c47      	adds	r7, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   24264:	484b      	ldr	r0, [pc, #300]	; (24394 <hci_tx_thread+0x158>)
   24266:	f04f 32ff 	mov.w	r2, #4294967295
   2426a:	f04f 33ff 	mov.w	r3, #4294967295
   2426e:	4639      	mov	r1, r7
   24270:	f00e fd92 	bl	32d98 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   24274:	b160      	cbz	r0, 24290 <hci_tx_thread+0x54>
   24276:	4948      	ldr	r1, [pc, #288]	; (24398 <hci_tx_thread+0x15c>)
   24278:	4848      	ldr	r0, [pc, #288]	; (2439c <hci_tx_thread+0x160>)
   2427a:	f640 1393 	movw	r3, #2451	; 0x993
   2427e:	4652      	mov	r2, sl
   24280:	f012 ff4b 	bl	3711a <printk>
   24284:	4040      	eors	r0, r0
   24286:	f380 8811 	msr	BASEPRI, r0
   2428a:	f04f 0003 	mov.w	r0, #3
   2428e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   24290:	4e43      	ldr	r6, [pc, #268]	; (243a0 <hci_tx_thread+0x164>)
{
   24292:	f8df 8100 	ldr.w	r8, [pc, #256]	; 24394 <hci_tx_thread+0x158>
   24296:	f506 7b8c 	add.w	fp, r6, #280	; 0x118
	for (; count; ev++, count--) {
   2429a:	b917      	cbnz	r7, 242a2 <hci_tx_thread+0x66>
	z_impl_k_yield();
   2429c:	f00d fbb6 	bl	31a0c <z_impl_k_yield>
	while (1) {
   242a0:	e7d6      	b.n	24250 <hci_tx_thread+0x14>
		switch (ev->state) {
   242a2:	f8d8 200c 	ldr.w	r2, [r8, #12]
   242a6:	f3c2 3245 	ubfx	r2, r2, #13, #6
   242aa:	2a01      	cmp	r2, #1
   242ac:	d959      	bls.n	24362 <hci_tx_thread+0x126>
   242ae:	2a04      	cmp	r2, #4
   242b0:	d163      	bne.n	2437a <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   242b2:	f898 300c 	ldrb.w	r3, [r8, #12]
   242b6:	2b00      	cmp	r3, #0
   242b8:	d157      	bne.n	2436a <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   242ba:	483a      	ldr	r0, [pc, #232]	; (243a4 <hci_tx_thread+0x168>)
   242bc:	2200      	movs	r2, #0
   242be:	2300      	movs	r3, #0
   242c0:	f005 fbf4 	bl	29aac <net_buf_get>
	BT_ASSERT(buf);
   242c4:	4604      	mov	r4, r0
   242c6:	b960      	cbnz	r0, 242e2 <hci_tx_thread+0xa6>
   242c8:	4937      	ldr	r1, [pc, #220]	; (243a8 <hci_tx_thread+0x16c>)
   242ca:	4834      	ldr	r0, [pc, #208]	; (2439c <hci_tx_thread+0x160>)
   242cc:	f640 132a 	movw	r3, #2346	; 0x92a
   242d0:	4652      	mov	r2, sl
   242d2:	f012 ff22 	bl	3711a <printk>
   242d6:	4040      	eors	r0, r0
   242d8:	f380 8811 	msr	BASEPRI, r0
   242dc:	f04f 0003 	mov.w	r0, #3
   242e0:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   242e2:	f04f 33ff 	mov.w	r3, #4294967295
   242e6:	f04f 32ff 	mov.w	r2, #4294967295
   242ea:	4658      	mov	r0, fp
   242ec:	f00b fe2c 	bl	2ff48 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   242f0:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
   242f4:	b163      	cbz	r3, 24310 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   242f6:	01a8      	lsls	r0, r5, #6
   242f8:	492c      	ldr	r1, [pc, #176]	; (243ac <hci_tx_thread+0x170>)
   242fa:	f040 0001 	orr.w	r0, r0, #1
   242fe:	f013 f8c7 	bl	37490 <log_string_sync>
		net_buf_unref(bt_dev.sent_cmd);
   24302:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   24306:	f005 fd65 	bl	29dd4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2430a:	2300      	movs	r3, #0
   2430c:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   24310:	4620      	mov	r0, r4
   24312:	f005 fda5 	bl	29e60 <net_buf_ref>
   24316:	f8c6 0130 	str.w	r0, [r6, #304]	; 0x130
	err = bt_send(buf);
   2431a:	4620      	mov	r0, r4
   2431c:	f7ff fcee 	bl	23cfc <bt_send>
	if (err) {
   24320:	4602      	mov	r2, r0
   24322:	b1f0      	cbz	r0, 24362 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   24324:	01a8      	lsls	r0, r5, #6
   24326:	4922      	ldr	r1, [pc, #136]	; (243b0 <hci_tx_thread+0x174>)
   24328:	f040 0001 	orr.w	r0, r0, #1
   2432c:	f013 f8b0 	bl	37490 <log_string_sync>
	z_impl_k_sem_give(sem);
   24330:	4820      	ldr	r0, [pc, #128]	; (243b4 <hci_tx_thread+0x178>)
   24332:	f00b fdc5 	bl	2fec0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   24336:	4620      	mov	r0, r4
   24338:	f005 fa50 	bl	297dc <net_buf_id>
   2433c:	4b1e      	ldr	r3, [pc, #120]	; (243b8 <hci_tx_thread+0x17c>)
   2433e:	220c      	movs	r2, #12
   24340:	fb02 3000 	mla	r0, r2, r0, r3
   24344:	211f      	movs	r1, #31
   24346:	8840      	ldrh	r0, [r0, #2]
   24348:	4622      	mov	r2, r4
   2434a:	f7ff f9c1 	bl	236d0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   2434e:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   24352:	f005 fd3f 	bl	29dd4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   24356:	2300      	movs	r3, #0
		net_buf_unref(buf);
   24358:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   2435a:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
		net_buf_unref(buf);
   2435e:	f005 fd39 	bl	29dd4 <net_buf_unref>
	for (; count; ev++, count--) {
   24362:	f108 0814 	add.w	r8, r8, #20
   24366:	3f01      	subs	r7, #1
   24368:	e797      	b.n	2429a <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   2436a:	2b01      	cmp	r3, #1
   2436c:	d1f9      	bne.n	24362 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   2436e:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   24372:	3838      	subs	r0, #56	; 0x38
   24374:	f001 ff64 	bl	26240 <bt_conn_process_tx>
   24378:	e7f3      	b.n	24362 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   2437a:	01a8      	lsls	r0, r5, #6
   2437c:	490f      	ldr	r1, [pc, #60]	; (243bc <hci_tx_thread+0x180>)
   2437e:	f040 0002 	orr.w	r0, r0, #2
   24382:	f013 f885 	bl	37490 <log_string_sync>
   24386:	e7ec      	b.n	24362 <hci_tx_thread+0x126>
   24388:	0003b480 	.word	0x0003b480
   2438c:	0003b448 	.word	0x0003b448
   24390:	200005ac 	.word	0x200005ac
   24394:	20000598 	.word	0x20000598
   24398:	0003c481 	.word	0x0003c481
   2439c:	0003c48a 	.word	0x0003c48a
   243a0:	200002b0 	.word	0x200002b0
   243a4:	20000400 	.word	0x20000400
   243a8:	0003e07b 	.word	0x0003e07b
   243ac:	0003e3d3 	.word	0x0003e3d3
   243b0:	0003e327 	.word	0x0003e327
   243b4:	200003c8 	.word	0x200003c8
   243b8:	20002974 	.word	0x20002974
   243bc:	0003e3ee 	.word	0x0003e3ee
   243c0:	0003e1e3 	.word	0x0003e1e3

000243c4 <hci_event_prio>:
{
   243c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   243c8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   243ca:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   243ce:	4630      	mov	r0, r6
   243d0:	f015 f992 	bl	396f8 <net_buf_simple_headroom>
	state->len = buf->len;
   243d4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   243d8:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   243dc:	4605      	mov	r5, r0
   243de:	d80c      	bhi.n	243fa <hci_event_prio+0x36>
   243e0:	4a1c      	ldr	r2, [pc, #112]	; (24454 <hci_event_prio+0x90>)
   243e2:	491d      	ldr	r1, [pc, #116]	; (24458 <hci_event_prio+0x94>)
   243e4:	481d      	ldr	r0, [pc, #116]	; (2445c <hci_event_prio+0x98>)
   243e6:	f640 5327 	movw	r3, #3367	; 0xd27
   243ea:	f012 fe96 	bl	3711a <printk>
   243ee:	4040      	eors	r0, r0
   243f0:	f380 8811 	msr	BASEPRI, r0
   243f4:	f04f 0003 	mov.w	r0, #3
   243f8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   243fa:	2102      	movs	r1, #2
   243fc:	4630      	mov	r0, r6
   243fe:	f005 fdf7 	bl	29ff0 <net_buf_simple_pull_mem>
   24402:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   24404:	7800      	ldrb	r0, [r0, #0]
   24406:	f013 fedd 	bl	381c4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2440a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2440c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2440e:	d40c      	bmi.n	2442a <hci_event_prio+0x66>
   24410:	4a10      	ldr	r2, [pc, #64]	; (24454 <hci_event_prio+0x90>)
   24412:	4913      	ldr	r1, [pc, #76]	; (24460 <hci_event_prio+0x9c>)
   24414:	4811      	ldr	r0, [pc, #68]	; (2445c <hci_event_prio+0x98>)
   24416:	f640 532b 	movw	r3, #3371	; 0xd2b
   2441a:	f012 fe7e 	bl	3711a <printk>
   2441e:	4040      	eors	r0, r0
   24420:	f380 8811 	msr	BASEPRI, r0
   24424:	f04f 0003 	mov.w	r0, #3
   24428:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   2442a:	2305      	movs	r3, #5
   2442c:	4a0d      	ldr	r2, [pc, #52]	; (24464 <hci_event_prio+0xa0>)
   2442e:	7838      	ldrb	r0, [r7, #0]
   24430:	4621      	mov	r1, r4
   24432:	f7ff f9ed 	bl	23810 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   24436:	07b3      	lsls	r3, r6, #30
   24438:	d507      	bpl.n	2444a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   2443a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   2443c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   24440:	fa10 f585 	uxtah	r5, r0, r5
   24444:	60a5      	str	r5, [r4, #8]
}
   24446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2444a:	4620      	mov	r0, r4
}
   2444c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   24450:	f005 bcc0 	b.w	29dd4 <net_buf_unref>
   24454:	0003e1e3 	.word	0x0003e1e3
   24458:	0003e217 	.word	0x0003e217
   2445c:	0003c48a 	.word	0x0003c48a
   24460:	0003e40f 	.word	0x0003e40f
   24464:	0003b9c0 	.word	0x0003b9c0

00024468 <bt_recv>:
{
   24468:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2446a:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   2446c:	2a01      	cmp	r2, #1
{
   2446e:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   24470:	d007      	beq.n	24482 <bt_recv+0x1a>
   24472:	2a03      	cmp	r2, #3
   24474:	d113      	bne.n	2449e <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   24476:	4812      	ldr	r0, [pc, #72]	; (244c0 <bt_recv+0x58>)
   24478:	4629      	mov	r1, r5
   2447a:	f005 fc77 	bl	29d6c <net_buf_put>
		return 0;
   2447e:	2000      	movs	r0, #0
   24480:	e00c      	b.n	2449c <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   24482:	6883      	ldr	r3, [r0, #8]
   24484:	7818      	ldrb	r0, [r3, #0]
   24486:	f013 fe9d 	bl	381c4 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   2448a:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2448c:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   2448e:	d502      	bpl.n	24496 <bt_recv+0x2e>
			hci_event_prio(buf);
   24490:	4628      	mov	r0, r5
   24492:	f7ff ff97 	bl	243c4 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   24496:	f014 0002 	ands.w	r0, r4, #2
   2449a:	d1ec      	bne.n	24476 <bt_recv+0xe>
}
   2449c:	bd38      	pop	{r3, r4, r5, pc}
   2449e:	4b09      	ldr	r3, [pc, #36]	; (244c4 <bt_recv+0x5c>)
   244a0:	4809      	ldr	r0, [pc, #36]	; (244c8 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   244a2:	490a      	ldr	r1, [pc, #40]	; (244cc <bt_recv+0x64>)
   244a4:	1ac0      	subs	r0, r0, r3
   244a6:	08c0      	lsrs	r0, r0, #3
   244a8:	0180      	lsls	r0, r0, #6
   244aa:	f040 0001 	orr.w	r0, r0, #1
   244ae:	f012 ffef 	bl	37490 <log_string_sync>
		net_buf_unref(buf);
   244b2:	4628      	mov	r0, r5
   244b4:	f005 fc8e 	bl	29dd4 <net_buf_unref>
		return -EINVAL;
   244b8:	f06f 0015 	mvn.w	r0, #21
   244bc:	e7ee      	b.n	2449c <bt_recv+0x34>
   244be:	bf00      	nop
   244c0:	200003e4 	.word	0x200003e4
   244c4:	0003b448 	.word	0x0003b448
   244c8:	0003b480 	.word	0x0003b480
   244cc:	0003e428 	.word	0x0003e428

000244d0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   244d0:	4a08      	ldr	r2, [pc, #32]	; (244f4 <bt_hci_driver_register+0x24>)
{
   244d2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   244d4:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   244d8:	b930      	cbnz	r0, 244e8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   244da:	68d9      	ldr	r1, [r3, #12]
   244dc:	b139      	cbz	r1, 244ee <bt_hci_driver_register+0x1e>
   244de:	6919      	ldr	r1, [r3, #16]
   244e0:	b129      	cbz	r1, 244ee <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   244e2:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	return 0;
   244e6:	4770      	bx	lr
		return -EALREADY;
   244e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   244ec:	4770      	bx	lr
		return -EINVAL;
   244ee:	f06f 0015 	mvn.w	r0, #21
}
   244f2:	4770      	bx	lr
   244f4:	200002b0 	.word	0x200002b0

000244f8 <bt_finalize_init>:
   244f8:	4801      	ldr	r0, [pc, #4]	; (24500 <bt_finalize_init+0x8>)
   244fa:	2102      	movs	r1, #2
   244fc:	f013 be74 	b.w	381e8 <atomic_or>
   24500:	2000037c 	.word	0x2000037c

00024504 <bt_init>:
{
   24504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   24506:	4dc2      	ldr	r5, [pc, #776]	; (24810 <bt_init+0x30c>)
   24508:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   2450c:	6899      	ldr	r1, [r3, #8]
   2450e:	f011 0101 	ands.w	r1, r1, #1
   24512:	d121      	bne.n	24558 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   24514:	aa01      	add	r2, sp, #4
   24516:	f640 4003 	movw	r0, #3075	; 0xc03
   2451a:	f7ff fb77 	bl	23c0c <bt_hci_cmd_send_sync>
		if (err) {
   2451e:	4604      	mov	r4, r0
   24520:	2800      	cmp	r0, #0
   24522:	d178      	bne.n	24616 <bt_init+0x112>
	uint8_t status = buf->data[0];
   24524:	9b01      	ldr	r3, [sp, #4]
   24526:	689b      	ldr	r3, [r3, #8]
	if (status) {
   24528:	781b      	ldrb	r3, [r3, #0]
   2452a:	b993      	cbnz	r3, 24552 <bt_init+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2452c:	f3bf 8f5b 	dmb	ish
   24530:	462b      	mov	r3, r5
   24532:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   24536:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   2453a:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2453e:	f3bf 8f5b 	dmb	ish
   24542:	e853 1f00 	ldrex	r1, [r3]
   24546:	e843 2000 	strex	r0, r2, [r3]
   2454a:	2800      	cmp	r0, #0
   2454c:	d1f9      	bne.n	24542 <bt_init+0x3e>
   2454e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   24552:	9801      	ldr	r0, [sp, #4]
   24554:	f005 fc3e 	bl	29dd4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   24558:	aa01      	add	r2, sp, #4
   2455a:	2100      	movs	r1, #0
   2455c:	f241 0003 	movw	r0, #4099	; 0x1003
   24560:	f7ff fb54 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   24564:	4604      	mov	r4, r0
   24566:	2800      	cmp	r0, #0
   24568:	d155      	bne.n	24616 <bt_init+0x112>
	read_local_features_complete(rsp);
   2456a:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   2456c:	4ea9      	ldr	r6, [pc, #676]	; (24814 <bt_init+0x310>)
   2456e:	6893      	ldr	r3, [r2, #8]
   24570:	f853 0f01 	ldr.w	r0, [r3, #1]!
   24574:	6859      	ldr	r1, [r3, #4]
   24576:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   24578:	4610      	mov	r0, r2
   2457a:	f005 fc2b 	bl	29dd4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   2457e:	4621      	mov	r1, r4
   24580:	aa01      	add	r2, sp, #4
   24582:	f241 0001 	movw	r0, #4097	; 0x1001
   24586:	f7ff fb41 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   2458a:	4604      	mov	r4, r0
   2458c:	2800      	cmp	r0, #0
   2458e:	d142      	bne.n	24616 <bt_init+0x112>
	read_local_ver_complete(rsp);
   24590:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   24592:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   24594:	785a      	ldrb	r2, [r3, #1]
   24596:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   2459a:	78d9      	ldrb	r1, [r3, #3]
   2459c:	789a      	ldrb	r2, [r3, #2]
   2459e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   245a2:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   245a6:	791a      	ldrb	r2, [r3, #4]
   245a8:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   245ac:	7a19      	ldrb	r1, [r3, #8]
   245ae:	79da      	ldrb	r2, [r3, #7]
   245b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   245b4:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   245b8:	795a      	ldrb	r2, [r3, #5]
   245ba:	799b      	ldrb	r3, [r3, #6]
   245bc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   245c0:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   245c4:	f005 fc06 	bl	29dd4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   245c8:	4621      	mov	r1, r4
   245ca:	aa01      	add	r2, sp, #4
   245cc:	f241 0002 	movw	r0, #4098	; 0x1002
   245d0:	f7ff fb1c 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   245d4:	4604      	mov	r4, r0
   245d6:	b9f0      	cbnz	r0, 24616 <bt_init+0x112>
	read_supported_commands_complete(rsp);
   245d8:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   245da:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   245dc:	1c53      	adds	r3, r2, #1
   245de:	3241      	adds	r2, #65	; 0x41
   245e0:	6818      	ldr	r0, [r3, #0]
   245e2:	6859      	ldr	r1, [r3, #4]
   245e4:	4634      	mov	r4, r6
   245e6:	c403      	stmia	r4!, {r0, r1}
   245e8:	3308      	adds	r3, #8
   245ea:	4293      	cmp	r3, r2
   245ec:	4626      	mov	r6, r4
   245ee:	d1f7      	bne.n	245e0 <bt_init+0xdc>
	net_buf_unref(rsp);
   245f0:	4638      	mov	r0, r7
   245f2:	f005 fbef 	bl	29dd4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   245f6:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   245fa:	065c      	lsls	r4, r3, #25
   245fc:	d40e      	bmi.n	2461c <bt_init+0x118>
   245fe:	4b86      	ldr	r3, [pc, #536]	; (24818 <bt_init+0x314>)
   24600:	4886      	ldr	r0, [pc, #536]	; (2481c <bt_init+0x318>)
		BT_ERR("Non-LE capable controller detected!");
   24602:	4987      	ldr	r1, [pc, #540]	; (24820 <bt_init+0x31c>)
   24604:	1ac0      	subs	r0, r0, r3
   24606:	08c0      	lsrs	r0, r0, #3
   24608:	0180      	lsls	r0, r0, #6
   2460a:	f040 0001 	orr.w	r0, r0, #1
   2460e:	f012 ff3f 	bl	37490 <log_string_sync>
		return -ENODEV;
   24612:	f06f 0412 	mvn.w	r4, #18
}
   24616:	4620      	mov	r0, r4
   24618:	b003      	add	sp, #12
   2461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   2461c:	aa01      	add	r2, sp, #4
   2461e:	2100      	movs	r1, #0
   24620:	f242 0003 	movw	r0, #8195	; 0x2003
   24624:	f7ff faf2 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   24628:	4604      	mov	r4, r0
   2462a:	2800      	cmp	r0, #0
   2462c:	d1f3      	bne.n	24616 <bt_init+0x112>
	read_le_features_complete(rsp);
   2462e:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   24630:	4e7c      	ldr	r6, [pc, #496]	; (24824 <bt_init+0x320>)
   24632:	6893      	ldr	r3, [r2, #8]
   24634:	f853 0f01 	ldr.w	r0, [r3, #1]!
   24638:	6859      	ldr	r1, [r3, #4]
   2463a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   2463c:	4610      	mov	r0, r2
   2463e:	f005 fbc9 	bl	29dd4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   24642:	4621      	mov	r1, r4
   24644:	aa01      	add	r2, sp, #4
   24646:	f242 0002 	movw	r0, #8194	; 0x2002
   2464a:	f7ff fadf 	bl	23c0c <bt_hci_cmd_send_sync>
		if (err) {
   2464e:	4604      	mov	r4, r0
   24650:	2800      	cmp	r0, #0
   24652:	d1e0      	bne.n	24616 <bt_init+0x112>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   24654:	9b01      	ldr	r3, [sp, #4]
   24656:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   24658:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   2465c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   24660:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   24662:	b129      	cbz	r1, 24670 <bt_init+0x16c>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   24664:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   24666:	4611      	mov	r1, r2
   24668:	f106 0028 	add.w	r0, r6, #40	; 0x28
   2466c:	f015 fe01 	bl	3a272 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   24670:	9801      	ldr	r0, [sp, #4]
   24672:	f005 fbaf 	bl	29dd4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   24676:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   2467a:	f016 0620 	ands.w	r6, r6, #32
   2467e:	f000 80aa 	beq.w	247d6 <bt_init+0x2d2>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   24682:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   24686:	0718      	lsls	r0, r3, #28
   24688:	f100 80d4 	bmi.w	24834 <bt_init+0x330>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   2468c:	2108      	movs	r1, #8
   2468e:	f242 0001 	movw	r0, #8193	; 0x2001
   24692:	f7ff fa73 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   24696:	4604      	mov	r4, r0
   24698:	2800      	cmp	r0, #0
   2469a:	f000 80a3 	beq.w	247e4 <bt_init+0x2e0>
	return net_buf_simple_add(&buf->b, len);
   2469e:	2108      	movs	r1, #8
   246a0:	4408      	add	r0, r1
   246a2:	f005 fcc7 	bl	2a034 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   246a6:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   246aa:	f012 0f02 	tst.w	r2, #2
   246ae:	bf14      	ite	ne
   246b0:	232f      	movne	r3, #47	; 0x2f
   246b2:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   246b4:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   246b6:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   246ba:	bf48      	it	mi
   246bc:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   246c0:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   246c4:	bf18      	it	ne
   246c6:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   246ca:	2200      	movs	r2, #0
   246cc:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   246ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
   246d2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   246d4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   246d6:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   246d8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   246da:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   246dc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   246de:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   246e0:	4621      	mov	r1, r4
   246e2:	f242 0001 	movw	r0, #8193	; 0x2001
   246e6:	f7ff fa91 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   246ea:	4604      	mov	r4, r0
   246ec:	2800      	cmp	r0, #0
   246ee:	d192      	bne.n	24616 <bt_init+0x112>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   246f0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   246f4:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   246f8:	069a      	lsls	r2, r3, #26
   246fa:	f100 80af 	bmi.w	2485c <bt_init+0x358>
	if (bt_dev.le.acl_mtu) {
   246fe:	b9d1      	cbnz	r1, 24736 <bt_init+0x232>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   24700:	aa01      	add	r2, sp, #4
   24702:	f241 0005 	movw	r0, #4101	; 0x1005
   24706:	f7ff fa81 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   2470a:	4604      	mov	r4, r0
   2470c:	2800      	cmp	r0, #0
   2470e:	d182      	bne.n	24616 <bt_init+0x112>
	if (bt_dev.le.acl_mtu) {
   24710:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   24714:	b963      	cbnz	r3, 24730 <bt_init+0x22c>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   24716:	9b01      	ldr	r3, [sp, #4]
   24718:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   2471a:	785a      	ldrb	r2, [r3, #1]
   2471c:	7899      	ldrb	r1, [r3, #2]
   2471e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24722:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   24726:	889a      	ldrh	r2, [r3, #4]
   24728:	483f      	ldr	r0, [pc, #252]	; (24828 <bt_init+0x324>)
   2472a:	4611      	mov	r1, r2
   2472c:	f015 fda1 	bl	3a272 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   24730:	9801      	ldr	r0, [sp, #4]
   24732:	f005 fb4f 	bl	29dd4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   24736:	2108      	movs	r1, #8
   24738:	f640 4001 	movw	r0, #3073	; 0xc01
   2473c:	f7ff fa1e 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   24740:	4604      	mov	r4, r0
   24742:	2800      	cmp	r0, #0
   24744:	d04e      	beq.n	247e4 <bt_init+0x2e0>
   24746:	2108      	movs	r1, #8
   24748:	4408      	add	r0, r1
   2474a:	f005 fc73 	bl	2a034 <net_buf_simple_add>
	dst[0] = val;
   2474e:	2310      	movs	r3, #16
   24750:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   24752:	2388      	movs	r3, #136	; 0x88
   24754:	7043      	strb	r3, [r0, #1]
   24756:	2302      	movs	r3, #2
	dst[0] = val;
   24758:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   2475a:	70c3      	strb	r3, [r0, #3]
   2475c:	2320      	movs	r3, #32
	dst[0] = val;
   2475e:	7082      	strb	r2, [r0, #2]
   24760:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   24762:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   24764:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   24766:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   24768:	4621      	mov	r1, r4
   2476a:	f640 4001 	movw	r0, #3073	; 0xc01
   2476e:	f7ff fa4d 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   24772:	4604      	mov	r4, r0
   24774:	2800      	cmp	r0, #0
   24776:	f47f af4e 	bne.w	24616 <bt_init+0x112>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   2477a:	4601      	mov	r1, r0
   2477c:	aa01      	add	r2, sp, #4
   2477e:	f64f 4001 	movw	r0, #64513	; 0xfc01
   24782:	f7ff fa43 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   24786:	4604      	mov	r4, r0
   24788:	2800      	cmp	r0, #0
   2478a:	d077      	beq.n	2487c <bt_init+0x378>
   2478c:	4823      	ldr	r0, [pc, #140]	; (2481c <bt_init+0x318>)
   2478e:	4b22      	ldr	r3, [pc, #136]	; (24818 <bt_init+0x314>)
		BT_WARN("Vendor HCI extensions not available");
   24790:	4926      	ldr	r1, [pc, #152]	; (2482c <bt_init+0x328>)
   24792:	1ac0      	subs	r0, r0, r3
   24794:	08c0      	lsrs	r0, r0, #3
   24796:	0180      	lsls	r0, r0, #6
			BT_WARN("Failed to read supported vendor features");
   24798:	f040 0002 	orr.w	r0, r0, #2
   2479c:	f012 fe78 	bl	37490 <log_string_sync>
	err = bt_id_init();
   247a0:	f013 fdfc 	bl	3839c <bt_id_init>
	if (err) {
   247a4:	4604      	mov	r4, r0
   247a6:	2800      	cmp	r0, #0
   247a8:	f47f af35 	bne.w	24616 <bt_init+0x112>
		err = bt_conn_init();
   247ac:	f001 fdb0 	bl	26310 <bt_conn_init>
		if (err) {
   247b0:	4604      	mov	r4, r0
   247b2:	2800      	cmp	r0, #0
   247b4:	f47f af2f 	bne.w	24616 <bt_init+0x112>
		if (!bt_dev.id_count) {
   247b8:	79eb      	ldrb	r3, [r5, #7]
   247ba:	2b00      	cmp	r3, #0
   247bc:	f040 8093 	bne.w	248e6 <bt_init+0x3e2>
   247c0:	4b15      	ldr	r3, [pc, #84]	; (24818 <bt_init+0x314>)
   247c2:	4816      	ldr	r0, [pc, #88]	; (2481c <bt_init+0x318>)
			BT_INFO("No ID address. App must call settings_load()");
   247c4:	491a      	ldr	r1, [pc, #104]	; (24830 <bt_init+0x32c>)
   247c6:	1ac0      	subs	r0, r0, r3
   247c8:	08c0      	lsrs	r0, r0, #3
   247ca:	0180      	lsls	r0, r0, #6
   247cc:	f040 0003 	orr.w	r0, r0, #3
   247d0:	f012 fe5e 	bl	37490 <log_string_sync>
			return 0;
   247d4:	e71f      	b.n	24616 <bt_init+0x112>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   247d6:	2102      	movs	r1, #2
   247d8:	f640 406d 	movw	r0, #3181	; 0xc6d
   247dc:	f7ff f9ce 	bl	23b7c <bt_hci_cmd_create>
		if (!buf) {
   247e0:	4604      	mov	r4, r0
   247e2:	b910      	cbnz	r0, 247ea <bt_init+0x2e6>
		return -ENOBUFS;
   247e4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   247e8:	e715      	b.n	24616 <bt_init+0x112>
   247ea:	2102      	movs	r1, #2
   247ec:	3008      	adds	r0, #8
   247ee:	f005 fc21 	bl	2a034 <net_buf_simple_add>
		cp_le->le = 0x01;
   247f2:	2301      	movs	r3, #1
   247f4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   247f6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   247f8:	4621      	mov	r1, r4
   247fa:	4632      	mov	r2, r6
   247fc:	f640 406d 	movw	r0, #3181	; 0xc6d
   24800:	f7ff fa04 	bl	23c0c <bt_hci_cmd_send_sync>
		if (err) {
   24804:	4604      	mov	r4, r0
   24806:	2800      	cmp	r0, #0
   24808:	f43f af3b 	beq.w	24682 <bt_init+0x17e>
   2480c:	e703      	b.n	24616 <bt_init+0x112>
   2480e:	bf00      	nop
   24810:	200002b0 	.word	0x200002b0
   24814:	20000320 	.word	0x20000320
   24818:	0003b448 	.word	0x0003b448
   2481c:	0003b480 	.word	0x0003b480
   24820:	0003e43c 	.word	0x0003e43c
   24824:	20000380 	.word	0x20000380
   24828:	200003b0 	.word	0x200003b0
   2482c:	0003e483 	.word	0x0003e483
   24830:	0003e4f9 	.word	0x0003e4f9
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   24834:	aa01      	add	r2, sp, #4
   24836:	2100      	movs	r1, #0
   24838:	f242 001c 	movw	r0, #8220	; 0x201c
   2483c:	f7ff f9e6 	bl	23c0c <bt_hci_cmd_send_sync>
		if (err) {
   24840:	4604      	mov	r4, r0
   24842:	2800      	cmp	r0, #0
   24844:	f47f aee7 	bne.w	24616 <bt_init+0x112>
		le_read_supp_states_complete(rsp);
   24848:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   2484a:	6883      	ldr	r3, [r0, #8]
   2484c:	f853 2f01 	ldr.w	r2, [r3, #1]!
   24850:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   24852:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   24856:	f005 fabd 	bl	29dd4 <net_buf_unref>
   2485a:	e717      	b.n	2468c <bt_init+0x188>
	else if (!bt_dev.le.acl_mtu) {
   2485c:	2900      	cmp	r1, #0
   2485e:	f47f af6a 	bne.w	24736 <bt_init+0x232>
   24862:	4b24      	ldr	r3, [pc, #144]	; (248f4 <bt_init+0x3f0>)
   24864:	4824      	ldr	r0, [pc, #144]	; (248f8 <bt_init+0x3f4>)
		BT_ERR("ACL BR/EDR buffers not initialized");
   24866:	4925      	ldr	r1, [pc, #148]	; (248fc <bt_init+0x3f8>)
   24868:	1ac0      	subs	r0, r0, r3
   2486a:	08c0      	lsrs	r0, r0, #3
   2486c:	0180      	lsls	r0, r0, #6
   2486e:	f040 0001 	orr.w	r0, r0, #1
   24872:	f012 fe0d 	bl	37490 <log_string_sync>
		return -EIO;
   24876:	f06f 0404 	mvn.w	r4, #4
   2487a:	e6cc      	b.n	24616 <bt_init+0x112>
	net_buf_unref(rsp);
   2487c:	9801      	ldr	r0, [sp, #4]
   2487e:	f005 faa9 	bl	29dd4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   24882:	4621      	mov	r1, r4
   24884:	aa01      	add	r2, sp, #4
   24886:	f64f 4002 	movw	r0, #64514	; 0xfc02
   2488a:	f7ff f9bf 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   2488e:	4604      	mov	r4, r0
   24890:	b130      	cbz	r0, 248a0 <bt_init+0x39c>
   24892:	4819      	ldr	r0, [pc, #100]	; (248f8 <bt_init+0x3f4>)
   24894:	4b17      	ldr	r3, [pc, #92]	; (248f4 <bt_init+0x3f0>)
		BT_WARN("Failed to read supported vendor commands");
   24896:	491a      	ldr	r1, [pc, #104]	; (24900 <bt_init+0x3fc>)
   24898:	1ac0      	subs	r0, r0, r3
   2489a:	08c0      	lsrs	r0, r0, #3
   2489c:	0180      	lsls	r0, r0, #6
   2489e:	e77b      	b.n	24798 <bt_init+0x294>
	rp.cmds = (void *)rsp->data;
   248a0:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   248a2:	6883      	ldr	r3, [r0, #8]
   248a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   248a8:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   248ac:	f005 fa92 	bl	29dd4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   248b0:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   248b4:	075b      	lsls	r3, r3, #29
   248b6:	f57f af73 	bpl.w	247a0 <bt_init+0x29c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   248ba:	aa01      	add	r2, sp, #4
   248bc:	4621      	mov	r1, r4
   248be:	f64f 4003 	movw	r0, #64515	; 0xfc03
   248c2:	f7ff f9a3 	bl	23c0c <bt_hci_cmd_send_sync>
		if (err) {
   248c6:	b130      	cbz	r0, 248d6 <bt_init+0x3d2>
   248c8:	480b      	ldr	r0, [pc, #44]	; (248f8 <bt_init+0x3f4>)
   248ca:	4b0a      	ldr	r3, [pc, #40]	; (248f4 <bt_init+0x3f0>)
			BT_WARN("Failed to read supported vendor features");
   248cc:	490d      	ldr	r1, [pc, #52]	; (24904 <bt_init+0x400>)
   248ce:	1ac0      	subs	r0, r0, r3
   248d0:	08c0      	lsrs	r0, r0, #3
   248d2:	0180      	lsls	r0, r0, #6
   248d4:	e760      	b.n	24798 <bt_init+0x294>
		rp.feat = (void *)rsp->data;
   248d6:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   248d8:	6883      	ldr	r3, [r0, #8]
   248da:	785b      	ldrb	r3, [r3, #1]
   248dc:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   248e0:	f005 fa78 	bl	29dd4 <net_buf_unref>
   248e4:	e75c      	b.n	247a0 <bt_init+0x29c>
   248e6:	2104      	movs	r1, #4
   248e8:	4807      	ldr	r0, [pc, #28]	; (24908 <bt_init+0x404>)
   248ea:	f013 fc7d 	bl	381e8 <atomic_or>
	bt_finalize_init();
   248ee:	f7ff fe03 	bl	244f8 <bt_finalize_init>
	return 0;
   248f2:	e690      	b.n	24616 <bt_init+0x112>
   248f4:	0003b448 	.word	0x0003b448
   248f8:	0003b480 	.word	0x0003b480
   248fc:	0003e460 	.word	0x0003e460
   24900:	0003e4a7 	.word	0x0003e4a7
   24904:	0003e4d0 	.word	0x0003e4d0
   24908:	2000037c 	.word	0x2000037c

0002490c <init_work>:
{
   2490c:	b510      	push	{r4, lr}
	err = bt_init();
   2490e:	f7ff fdf9 	bl	24504 <bt_init>
	if (ready_cb) {
   24912:	4b03      	ldr	r3, [pc, #12]	; (24920 <init_work+0x14>)
   24914:	681b      	ldr	r3, [r3, #0]
   24916:	b113      	cbz	r3, 2491e <init_work+0x12>
}
   24918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2491c:	4718      	bx	r3
}
   2491e:	bd10      	pop	{r4, pc}
   24920:	2000298c 	.word	0x2000298c

00024924 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   24924:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   24928:	4d37      	ldr	r5, [pc, #220]	; (24a08 <bt_enable+0xe4>)
   2492a:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
{
   2492e:	b088      	sub	sp, #32
   24930:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   24932:	b97b      	cbnz	r3, 24954 <bt_enable+0x30>
   24934:	4b35      	ldr	r3, [pc, #212]	; (24a0c <bt_enable+0xe8>)
   24936:	4836      	ldr	r0, [pc, #216]	; (24a10 <bt_enable+0xec>)
		BT_ERR("No HCI driver registered");
   24938:	4936      	ldr	r1, [pc, #216]	; (24a14 <bt_enable+0xf0>)
   2493a:	1ac0      	subs	r0, r0, r3
   2493c:	08c0      	lsrs	r0, r0, #3
   2493e:	0180      	lsls	r0, r0, #6
   24940:	f040 0001 	orr.w	r0, r0, #1
   24944:	f012 fda4 	bl	37490 <log_string_sync>
		return -ENODEV;
   24948:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   2494c:	4620      	mov	r0, r4
   2494e:	b008      	add	sp, #32
   24950:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   24954:	2101      	movs	r1, #1
   24956:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   2495a:	f013 fc45 	bl	381e8 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2495e:	07c3      	lsls	r3, r0, #31
   24960:	d44f      	bmi.n	24a02 <bt_enable+0xde>
		err = bt_settings_init();
   24962:	f7fe fcb9 	bl	232d8 <bt_settings_init>
		if (err) {
   24966:	4604      	mov	r4, r0
   24968:	2800      	cmp	r0, #0
   2496a:	d1ef      	bne.n	2494c <bt_enable+0x28>
	ready_cb = cb;
   2496c:	4b2a      	ldr	r3, [pc, #168]	; (24a18 <bt_enable+0xf4>)
   2496e:	f04f 0800 	mov.w	r8, #0
   24972:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   24974:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24978:	f06f 0308 	mvn.w	r3, #8
   2497c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   24980:	e9cd 0000 	strd	r0, r0, [sp]
   24984:	9004      	str	r0, [sp, #16]
   24986:	e9cd 8906 	strd	r8, r9, [sp, #24]
   2498a:	4b24      	ldr	r3, [pc, #144]	; (24a1c <bt_enable+0xf8>)
   2498c:	4924      	ldr	r1, [pc, #144]	; (24a20 <bt_enable+0xfc>)
   2498e:	4825      	ldr	r0, [pc, #148]	; (24a24 <bt_enable+0x100>)
   24990:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   24994:	f00a fe38 	bl	2f608 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   24998:	4923      	ldr	r1, [pc, #140]	; (24a28 <bt_enable+0x104>)
   2499a:	4822      	ldr	r0, [pc, #136]	; (24a24 <bt_enable+0x100>)
   2499c:	f015 fc26 	bl	3a1ec <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   249a0:	f06f 0307 	mvn.w	r3, #7
   249a4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   249a8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   249ac:	e9cd 4400 	strd	r4, r4, [sp]
   249b0:	4b1e      	ldr	r3, [pc, #120]	; (24a2c <bt_enable+0x108>)
   249b2:	491f      	ldr	r1, [pc, #124]	; (24a30 <bt_enable+0x10c>)
   249b4:	9404      	str	r4, [sp, #16]
   249b6:	f640 0298 	movw	r2, #2200	; 0x898
   249ba:	481e      	ldr	r0, [pc, #120]	; (24a34 <bt_enable+0x110>)
   249bc:	f00a fe24 	bl	2f608 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   249c0:	491d      	ldr	r1, [pc, #116]	; (24a38 <bt_enable+0x114>)
   249c2:	481c      	ldr	r0, [pc, #112]	; (24a34 <bt_enable+0x110>)
   249c4:	f015 fc12 	bl	3a1ec <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   249c8:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   249cc:	68db      	ldr	r3, [r3, #12]
   249ce:	4798      	blx	r3
	if (err) {
   249d0:	4604      	mov	r4, r0
   249d2:	b158      	cbz	r0, 249ec <bt_enable+0xc8>
   249d4:	4b0d      	ldr	r3, [pc, #52]	; (24a0c <bt_enable+0xe8>)
   249d6:	480e      	ldr	r0, [pc, #56]	; (24a10 <bt_enable+0xec>)
		BT_ERR("HCI driver open failed (%d)", err);
   249d8:	4918      	ldr	r1, [pc, #96]	; (24a3c <bt_enable+0x118>)
   249da:	1ac0      	subs	r0, r0, r3
   249dc:	08c0      	lsrs	r0, r0, #3
   249de:	0180      	lsls	r0, r0, #6
   249e0:	4622      	mov	r2, r4
   249e2:	f040 0001 	orr.w	r0, r0, #1
   249e6:	f012 fd53 	bl	37490 <log_string_sync>
		return err;
   249ea:	e7af      	b.n	2494c <bt_enable+0x28>
	if (!cb) {
   249ec:	b926      	cbnz	r6, 249f8 <bt_enable+0xd4>
}
   249ee:	b008      	add	sp, #32
   249f0:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   249f4:	f7ff bd86 	b.w	24504 <bt_init>
	k_work_submit(&bt_dev.init);
   249f8:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   249fc:	f00b fe00 	bl	30600 <k_work_submit>
	return 0;
   24a00:	e7a4      	b.n	2494c <bt_enable+0x28>
		return -EALREADY;
   24a02:	f06f 0477 	mvn.w	r4, #119	; 0x77
   24a06:	e7a1      	b.n	2494c <bt_enable+0x28>
   24a08:	200002b0 	.word	0x200002b0
   24a0c:	0003b448 	.word	0x0003b448
   24a10:	0003b480 	.word	0x0003b480
   24a14:	0003e526 	.word	0x0003e526
   24a18:	2000298c 	.word	0x2000298c
   24a1c:	0002423d 	.word	0x0002423d
   24a20:	20005320 	.word	0x20005320
   24a24:	20001ab0 	.word	0x20001ab0
   24a28:	0003e53f 	.word	0x0003e53f
   24a2c:	00023895 	.word	0x00023895
   24a30:	20004a60 	.word	0x20004a60
   24a34:	20001a30 	.word	0x20001a30
   24a38:	0003e545 	.word	0x0003e545
   24a3c:	0003e54b 	.word	0x0003e54b

00024a40 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   24a40:	4800      	ldr	r0, [pc, #0]	; (24a44 <bt_get_name+0x4>)
   24a42:	4770      	bx	lr
   24a44:	0003e567 	.word	0x0003e567

00024a48 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   24a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   24a4a:	4f0b      	ldr	r7, [pc, #44]	; (24a78 <id_find+0x30>)
{
   24a4c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   24a4e:	2500      	movs	r5, #0
   24a50:	79fb      	ldrb	r3, [r7, #7]
   24a52:	b2ec      	uxtb	r4, r5
   24a54:	42a3      	cmp	r3, r4
   24a56:	d802      	bhi.n	24a5e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   24a58:	f06f 0401 	mvn.w	r4, #1
   24a5c:	e009      	b.n	24a72 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   24a5e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   24a62:	2207      	movs	r2, #7
   24a64:	4439      	add	r1, r7
   24a66:	4630      	mov	r0, r6
   24a68:	f015 fd3d 	bl	3a4e6 <memcmp>
   24a6c:	3501      	adds	r5, #1
   24a6e:	2800      	cmp	r0, #0
   24a70:	d1ee      	bne.n	24a50 <id_find+0x8>
}
   24a72:	4620      	mov	r0, r4
   24a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24a76:	bf00      	nop
   24a78:	200002b0 	.word	0x200002b0

00024a7c <set_random_address>:
{
   24a7c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   24a7e:	2206      	movs	r2, #6
   24a80:	4913      	ldr	r1, [pc, #76]	; (24ad0 <set_random_address+0x54>)
   24a82:	4605      	mov	r5, r0
   24a84:	f015 fd2f 	bl	3a4e6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   24a88:	4602      	mov	r2, r0
   24a8a:	b1d8      	cbz	r0, 24ac4 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   24a8c:	2106      	movs	r1, #6
   24a8e:	f242 0005 	movw	r0, #8197	; 0x2005
   24a92:	f7ff f873 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   24a96:	4604      	mov	r4, r0
   24a98:	b1b0      	cbz	r0, 24ac8 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   24a9a:	2206      	movs	r2, #6
   24a9c:	4629      	mov	r1, r5
   24a9e:	3008      	adds	r0, #8
   24aa0:	f014 fe36 	bl	39710 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   24aa4:	2200      	movs	r2, #0
   24aa6:	4621      	mov	r1, r4
   24aa8:	f242 0005 	movw	r0, #8197	; 0x2005
   24aac:	f7ff f8ae 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   24ab0:	4602      	mov	r2, r0
   24ab2:	b938      	cbnz	r0, 24ac4 <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   24ab4:	4629      	mov	r1, r5
   24ab6:	4806      	ldr	r0, [pc, #24]	; (24ad0 <set_random_address+0x54>)
   24ab8:	f013 fc4e 	bl	38358 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   24abc:	4b05      	ldr	r3, [pc, #20]	; (24ad4 <set_random_address+0x58>)
   24abe:	2101      	movs	r1, #1
   24ac0:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
}
   24ac4:	4610      	mov	r0, r2
   24ac6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   24ac8:	f06f 0268 	mvn.w	r2, #104	; 0x68
   24acc:	e7fa      	b.n	24ac4 <set_random_address+0x48>
   24ace:	bf00      	nop
   24ad0:	20000311 	.word	0x20000311
   24ad4:	200002b0 	.word	0x200002b0

00024ad8 <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   24ad8:	b530      	push	{r4, r5, lr}
   24ada:	4604      	mov	r4, r0
   24adc:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   24ade:	460d      	mov	r5, r1
   24ae0:	b1f9      	cbz	r1, 24b22 <id_create.isra.0+0x4a>
   24ae2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   24ae4:	2207      	movs	r2, #7
   24ae6:	a902      	add	r1, sp, #8
   24ae8:	4628      	mov	r0, r5
   24aea:	9302      	str	r3, [sp, #8]
   24aec:	f8cd 300b 	str.w	r3, [sp, #11]
   24af0:	f015 fcf9 	bl	3a4e6 <memcmp>
   24af4:	b1a8      	cbz	r0, 24b22 <id_create.isra.0+0x4a>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   24af6:	4816      	ldr	r0, [pc, #88]	; (24b50 <id_create.isra.0+0x78>)
   24af8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   24afc:	4629      	mov	r1, r5
   24afe:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   24b00:	f013 fc2f 	bl	38362 <bt_addr_le_copy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24b04:	f3bf 8f5b 	dmb	ish
   24b08:	4b12      	ldr	r3, [pc, #72]	; (24b54 <id_create.isra.0+0x7c>)
   24b0a:	681b      	ldr	r3, [r3, #0]
   24b0c:	f3bf 8f5b 	dmb	ish
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   24b10:	f3c3 0040 	ubfx	r0, r3, #1, #1
   24b14:	079b      	lsls	r3, r3, #30
   24b16:	d502      	bpl.n	24b1e <id_create.isra.0+0x46>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   24b18:	f7fe fb96 	bl	23248 <bt_settings_save_id>
   24b1c:	2000      	movs	r0, #0
	}

	return 0;
}
   24b1e:	b005      	add	sp, #20
   24b20:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   24b22:	4668      	mov	r0, sp
   24b24:	f013 fb40 	bl	381a8 <bt_addr_le_create_static>
			if (err) {
   24b28:	2800      	cmp	r0, #0
   24b2a:	d1f8      	bne.n	24b1e <id_create.isra.0+0x46>
		} while (id_find(&new_addr) >= 0);
   24b2c:	4668      	mov	r0, sp
   24b2e:	f7ff ff8b 	bl	24a48 <id_find>
   24b32:	2800      	cmp	r0, #0
   24b34:	daf5      	bge.n	24b22 <id_create.isra.0+0x4a>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   24b36:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   24b3a:	4c05      	ldr	r4, [pc, #20]	; (24b50 <id_create.isra.0+0x78>)
   24b3c:	4669      	mov	r1, sp
   24b3e:	4420      	add	r0, r4
   24b40:	f013 fc0f 	bl	38362 <bt_addr_le_copy>
		if (addr) {
   24b44:	2d00      	cmp	r5, #0
   24b46:	d0dd      	beq.n	24b04 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   24b48:	4601      	mov	r1, r0
   24b4a:	4628      	mov	r0, r5
   24b4c:	e7d8      	b.n	24b00 <id_create.isra.0+0x28>
   24b4e:	bf00      	nop
   24b50:	200002b0 	.word	0x200002b0
   24b54:	2000037c 	.word	0x2000037c

00024b58 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   24b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24b5a:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   24b5c:	4604      	mov	r4, r0
   24b5e:	b918      	cbnz	r0, 24b68 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   24b60:	b346      	cbz	r6, 24bb4 <bt_id_create+0x5c>
		return -EINVAL;
   24b62:	f06f 0015 	mvn.w	r0, #21
   24b66:	e023      	b.n	24bb0 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   24b68:	2300      	movs	r3, #0
   24b6a:	2207      	movs	r2, #7
   24b6c:	4669      	mov	r1, sp
   24b6e:	9300      	str	r3, [sp, #0]
   24b70:	f8cd 3003 	str.w	r3, [sp, #3]
   24b74:	f015 fcb7 	bl	3a4e6 <memcmp>
   24b78:	2800      	cmp	r0, #0
   24b7a:	d0f1      	beq.n	24b60 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   24b7c:	7823      	ldrb	r3, [r4, #0]
   24b7e:	2b01      	cmp	r3, #1
   24b80:	d104      	bne.n	24b8c <bt_id_create+0x34>
   24b82:	79a3      	ldrb	r3, [r4, #6]
   24b84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   24b88:	2bc0      	cmp	r3, #192	; 0xc0
   24b8a:	d00a      	beq.n	24ba2 <bt_id_create+0x4a>
   24b8c:	4b1c      	ldr	r3, [pc, #112]	; (24c00 <bt_id_create+0xa8>)
   24b8e:	481d      	ldr	r0, [pc, #116]	; (24c04 <bt_id_create+0xac>)
			BT_ERR("Only static random identity address supported");
   24b90:	491d      	ldr	r1, [pc, #116]	; (24c08 <bt_id_create+0xb0>)
   24b92:	1ac0      	subs	r0, r0, r3
   24b94:	08c0      	lsrs	r0, r0, #3
   24b96:	0180      	lsls	r0, r0, #6
   24b98:	f040 0001 	orr.w	r0, r0, #1
   24b9c:	f012 fc78 	bl	37490 <log_string_sync>
			return -EINVAL;
   24ba0:	e7df      	b.n	24b62 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   24ba2:	4620      	mov	r0, r4
   24ba4:	f7ff ff50 	bl	24a48 <id_find>
   24ba8:	2800      	cmp	r0, #0
   24baa:	dbd9      	blt.n	24b60 <bt_id_create+0x8>
			return -EALREADY;
   24bac:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   24bb0:	b002      	add	sp, #8
   24bb2:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   24bb4:	4d15      	ldr	r5, [pc, #84]	; (24c0c <bt_id_create+0xb4>)
   24bb6:	79eb      	ldrb	r3, [r5, #7]
   24bb8:	2b01      	cmp	r3, #1
   24bba:	d01e      	beq.n	24bfa <bt_id_create+0xa2>
   24bbc:	f3bf 8f5b 	dmb	ish
   24bc0:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   24bc4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   24bc8:	07db      	lsls	r3, r3, #31
   24bca:	d40b      	bmi.n	24be4 <bt_id_create+0x8c>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   24bcc:	2c00      	cmp	r4, #0
   24bce:	d0c8      	beq.n	24b62 <bt_id_create+0xa>
   24bd0:	2207      	movs	r2, #7
   24bd2:	4669      	mov	r1, sp
   24bd4:	4620      	mov	r0, r4
   24bd6:	9600      	str	r6, [sp, #0]
   24bd8:	f8cd 6003 	str.w	r6, [sp, #3]
   24bdc:	f015 fc83 	bl	3a4e6 <memcmp>
   24be0:	2800      	cmp	r0, #0
   24be2:	d0be      	beq.n	24b62 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   24be4:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   24be6:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   24be8:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   24bea:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   24bec:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   24bee:	f7ff ff73 	bl	24ad8 <id_create.isra.0>
	new_id = bt_dev.id_count++;
   24bf2:	2800      	cmp	r0, #0
   24bf4:	bf08      	it	eq
   24bf6:	4630      	moveq	r0, r6
   24bf8:	e7da      	b.n	24bb0 <bt_id_create+0x58>
		return -ENOMEM;
   24bfa:	f06f 000b 	mvn.w	r0, #11
   24bfe:	e7d7      	b.n	24bb0 <bt_id_create+0x58>
   24c00:	0003b448 	.word	0x0003b448
   24c04:	0003b488 	.word	0x0003b488
   24c08:	0003e57c 	.word	0x0003e57c
   24c0c:	200002b0 	.word	0x200002b0

00024c10 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   24c10:	b570      	push	{r4, r5, r6, lr}
   24c12:	b086      	sub	sp, #24
   24c14:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   24c16:	aa01      	add	r2, sp, #4
   24c18:	2100      	movs	r1, #0
   24c1a:	f241 0009 	movw	r0, #4105	; 0x1009
   24c1e:	f7fe fff5 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   24c22:	4604      	mov	r4, r0
   24c24:	b160      	cbz	r0, 24c40 <bt_id_read_public_addr+0x30>
   24c26:	4819      	ldr	r0, [pc, #100]	; (24c8c <bt_id_read_public_addr+0x7c>)
   24c28:	4b19      	ldr	r3, [pc, #100]	; (24c90 <bt_id_read_public_addr+0x80>)
		BT_WARN("Failed to read public address");
   24c2a:	491a      	ldr	r1, [pc, #104]	; (24c94 <bt_id_read_public_addr+0x84>)
   24c2c:	1ac0      	subs	r0, r0, r3
   24c2e:	08c0      	lsrs	r0, r0, #3
   24c30:	0180      	lsls	r0, r0, #6
   24c32:	f040 0002 	orr.w	r0, r0, #2
   24c36:	f012 fc2b 	bl	37490 <log_string_sync>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   24c3a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   24c3c:	b006      	add	sp, #24
   24c3e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   24c40:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   24c42:	9002      	str	r0, [sp, #8]
   24c44:	689d      	ldr	r5, [r3, #8]
   24c46:	f8ad 000c 	strh.w	r0, [sp, #12]
   24c4a:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   24c4c:	2206      	movs	r2, #6
   24c4e:	a902      	add	r1, sp, #8
   24c50:	4628      	mov	r0, r5
   24c52:	f015 fc48 	bl	3a4e6 <memcmp>
   24c56:	b918      	cbnz	r0, 24c60 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   24c58:	9801      	ldr	r0, [sp, #4]
   24c5a:	f005 f8bb 	bl	29dd4 <net_buf_unref>
   24c5e:	e7ec      	b.n	24c3a <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   24c60:	f04f 33ff 	mov.w	r3, #4294967295
   24c64:	2206      	movs	r2, #6
   24c66:	a904      	add	r1, sp, #16
   24c68:	4628      	mov	r0, r5
   24c6a:	9304      	str	r3, [sp, #16]
   24c6c:	f8ad 3014 	strh.w	r3, [sp, #20]
   24c70:	f015 fc39 	bl	3a4e6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   24c74:	2800      	cmp	r0, #0
   24c76:	d0ef      	beq.n	24c58 <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   24c78:	4629      	mov	r1, r5
   24c7a:	1c70      	adds	r0, r6, #1
   24c7c:	f013 fb6c 	bl	38358 <bt_addr_copy>
	net_buf_unref(rsp);
   24c80:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   24c82:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   24c84:	f005 f8a6 	bl	29dd4 <net_buf_unref>
	return 1U;
   24c88:	2001      	movs	r0, #1
   24c8a:	e7d7      	b.n	24c3c <bt_id_read_public_addr+0x2c>
   24c8c:	0003b488 	.word	0x0003b488
   24c90:	0003b448 	.word	0x0003b448
   24c94:	0003e5aa 	.word	0x0003e5aa

00024c98 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   24c98:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   24c9a:	4668      	mov	r0, sp
   24c9c:	f7ff ffb8 	bl	24c10 <bt_id_read_public_addr>
   24ca0:	4b04      	ldr	r3, [pc, #16]	; (24cb4 <bt_setup_public_id_addr+0x1c>)
   24ca2:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   24ca4:	b118      	cbz	r0, 24cae <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   24ca6:	4669      	mov	r1, sp
   24ca8:	2000      	movs	r0, #0
   24caa:	f7ff ff15 	bl	24ad8 <id_create.isra.0>
}
   24cae:	b003      	add	sp, #12
   24cb0:	f85d fb04 	ldr.w	pc, [sp], #4
   24cb4:	200002b0 	.word	0x200002b0

00024cb8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   24cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   24cba:	4b26      	ldr	r3, [pc, #152]	; (24d54 <bt_read_static_addr+0x9c>)
   24cbc:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   24cc0:	f014 0401 	ands.w	r4, r4, #1
{
   24cc4:	4605      	mov	r5, r0
   24cc6:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   24cc8:	d10a      	bne.n	24ce0 <bt_read_static_addr+0x28>
   24cca:	4823      	ldr	r0, [pc, #140]	; (24d58 <bt_read_static_addr+0xa0>)
   24ccc:	4b23      	ldr	r3, [pc, #140]	; (24d5c <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   24cce:	4924      	ldr	r1, [pc, #144]	; (24d60 <bt_read_static_addr+0xa8>)
   24cd0:	1ac0      	subs	r0, r0, r3
   24cd2:	08c0      	lsrs	r0, r0, #3
   24cd4:	0180      	lsls	r0, r0, #6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   24cd6:	f040 0002 	orr.w	r0, r0, #2
   24cda:	f012 fbd9 	bl	37490 <log_string_sync>
   24cde:	e012      	b.n	24d06 <bt_read_static_addr+0x4e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   24ce0:	aa01      	add	r2, sp, #4
   24ce2:	2100      	movs	r1, #0
   24ce4:	f64f 4009 	movw	r0, #64521	; 0xfc09
   24ce8:	f7fe ff90 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   24cec:	4603      	mov	r3, r0
   24cee:	b168      	cbz	r0, 24d0c <bt_read_static_addr+0x54>
   24cf0:	4b1a      	ldr	r3, [pc, #104]	; (24d5c <bt_read_static_addr+0xa4>)
   24cf2:	4819      	ldr	r0, [pc, #100]	; (24d58 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   24cf4:	491b      	ldr	r1, [pc, #108]	; (24d64 <bt_read_static_addr+0xac>)
   24cf6:	1ac0      	subs	r0, r0, r3
   24cf8:	08c0      	lsrs	r0, r0, #3
   24cfa:	0180      	lsls	r0, r0, #6
   24cfc:	f040 0002 	orr.w	r0, r0, #2
   24d00:	f012 fbc6 	bl	37490 <log_string_sync>
		return 0;
   24d04:	2400      	movs	r4, #0
	}

	return cnt;
}
   24d06:	4620      	mov	r0, r4
   24d08:	b003      	add	sp, #12
   24d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
   24d0c:	9801      	ldr	r0, [sp, #4]
   24d0e:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   24d10:	7854      	ldrb	r4, [r2, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24d12:	f04f 0c16 	mov.w	ip, #22
   24d16:	42b4      	cmp	r4, r6
   24d18:	bf28      	it	cs
   24d1a:	4634      	movcs	r4, r6
   24d1c:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
   24d20:	42a3      	cmp	r3, r4
   24d22:	db0a      	blt.n	24d3a <bt_read_static_addr+0x82>
	net_buf_unref(rsp);
   24d24:	f005 f856 	bl	29dd4 <net_buf_unref>
	if (!cnt) {
   24d28:	2c00      	cmp	r4, #0
   24d2a:	d1ec      	bne.n	24d06 <bt_read_static_addr+0x4e>
   24d2c:	480a      	ldr	r0, [pc, #40]	; (24d58 <bt_read_static_addr+0xa0>)
   24d2e:	4b0b      	ldr	r3, [pc, #44]	; (24d5c <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   24d30:	490d      	ldr	r1, [pc, #52]	; (24d68 <bt_read_static_addr+0xb0>)
   24d32:	1ac0      	subs	r0, r0, r3
   24d34:	08c0      	lsrs	r0, r0, #3
   24d36:	0180      	lsls	r0, r0, #6
   24d38:	e7cd      	b.n	24cd6 <bt_read_static_addr+0x1e>
   24d3a:	1c96      	adds	r6, r2, #2
   24d3c:	fb0c 5103 	mla	r1, ip, r3, r5
   24d40:	f856 eb04 	ldr.w	lr, [r6], #4
   24d44:	f841 eb04 	str.w	lr, [r1], #4
   24d48:	42be      	cmp	r6, r7
   24d4a:	d1f9      	bne.n	24d40 <bt_read_static_addr+0x88>
   24d4c:	883e      	ldrh	r6, [r7, #0]
   24d4e:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   24d50:	3301      	adds	r3, #1
   24d52:	e7e5      	b.n	24d20 <bt_read_static_addr+0x68>
   24d54:	200002b0 	.word	0x200002b0
   24d58:	0003b488 	.word	0x0003b488
   24d5c:	0003b448 	.word	0x0003b448
   24d60:	0003e5c8 	.word	0x0003e5c8
   24d64:	0003e5f4 	.word	0x0003e5f4
   24d68:	0003e614 	.word	0x0003e614

00024d6c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   24d6c:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   24d6e:	4d14      	ldr	r5, [pc, #80]	; (24dc0 <bt_setup_random_id_addr+0x54>)
   24d70:	79ec      	ldrb	r4, [r5, #7]
{
   24d72:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   24d74:	b92c      	cbnz	r4, 24d82 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   24d76:	2101      	movs	r1, #1
   24d78:	a802      	add	r0, sp, #8
   24d7a:	f7ff ff9d 	bl	24cb8 <bt_read_static_addr>
   24d7e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   24d80:	b9b0      	cbnz	r0, 24db0 <bt_setup_random_id_addr+0x44>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   24d82:	2100      	movs	r1, #0
   24d84:	4608      	mov	r0, r1
   24d86:	f7ff fee7 	bl	24b58 <bt_id_create>
   24d8a:	e00f      	b.n	24dac <bt_setup_random_id_addr+0x40>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   24d8c:	ab02      	add	r3, sp, #8
   24d8e:	fb06 3102 	mla	r1, r6, r2, r3
   24d92:	f10d 0001 	add.w	r0, sp, #1
   24d96:	f013 fadf 	bl	38358 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   24d9a:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   24d9c:	4669      	mov	r1, sp
   24d9e:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   24da0:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   24da4:	f7ff fe98 	bl	24ad8 <id_create.isra.0>
				if (err) {
   24da8:	3401      	adds	r4, #1
   24daa:	b110      	cbz	r0, 24db2 <bt_setup_random_id_addr+0x46>
}
   24dac:	b008      	add	sp, #32
   24dae:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   24db0:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   24db2:	79eb      	ldrb	r3, [r5, #7]
   24db4:	b2e2      	uxtb	r2, r4
   24db6:	4293      	cmp	r3, r2
   24db8:	d8e8      	bhi.n	24d8c <bt_setup_random_id_addr+0x20>
			return 0;
   24dba:	2000      	movs	r0, #0
   24dbc:	e7f6      	b.n	24dac <bt_setup_random_id_addr+0x40>
   24dbe:	bf00      	nop
   24dc0:	200002b0 	.word	0x200002b0

00024dc4 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   24dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   24dc8:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   24dcc:	7805      	ldrb	r5, [r0, #0]
{
   24dce:	460e      	mov	r6, r1
   24dd0:	4690      	mov	r8, r2
   24dd2:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   24dd4:	d026      	beq.n	24e24 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   24dd6:	4c22      	ldr	r4, [pc, #136]	; (24e60 <bt_id_set_adv_own_addr+0x9c>)
   24dd8:	b12a      	cbz	r2, 24de6 <bt_id_set_adv_own_addr+0x22>
   24dda:	0688      	lsls	r0, r1, #26
   24ddc:	d503      	bpl.n	24de6 <bt_id_set_adv_own_addr+0x22>
   24dde:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   24de2:	0659      	lsls	r1, r3, #25
   24de4:	d539      	bpl.n	24e5a <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   24de6:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   24dea:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   24dee:	5ce3      	ldrb	r3, [r4, r3]
   24df0:	2b01      	cmp	r3, #1
   24df2:	d008      	beq.n	24e06 <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   24df4:	eba9 0505 	sub.w	r5, r9, r5
   24df8:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   24dfa:	f1b8 0f00 	cmp.w	r8, #0
   24dfe:	d10c      	bne.n	24e1a <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   24e00:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   24e02:	2000      	movs	r0, #0
   24e04:	e007      	b.n	24e16 <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   24e06:	2007      	movs	r0, #7
   24e08:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   24e0c:	4420      	add	r0, r4
   24e0e:	f7ff fe35 	bl	24a7c <set_random_address>
				if (err) {
   24e12:	2800      	cmp	r0, #0
   24e14:	d0ee      	beq.n	24df4 <bt_id_set_adv_own_addr+0x30>
}
   24e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   24e1a:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   24e1c:	bf48      	it	mi
   24e1e:	f043 0302 	orrmi.w	r3, r3, #2
   24e22:	e7ed      	b.n	24e00 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   24e24:	074b      	lsls	r3, r1, #29
   24e26:	d514      	bpl.n	24e52 <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   24e28:	4e0d      	ldr	r6, [pc, #52]	; (24e60 <bt_id_set_adv_own_addr+0x9c>)
   24e2a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   24e2e:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   24e32:	5cf3      	ldrb	r3, [r6, r3]
   24e34:	2b01      	cmp	r3, #1
   24e36:	d10a      	bne.n	24e4e <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   24e38:	2007      	movs	r0, #7
   24e3a:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   24e3e:	4430      	add	r0, r6
   24e40:	f7ff fe1c 	bl	24a7c <set_random_address>
			*own_addr_type = id_addr->type;
   24e44:	eba8 0505 	sub.w	r5, r8, r5
   24e48:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   24e4a:	703b      	strb	r3, [r7, #0]
		if (err) {
   24e4c:	e7e3      	b.n	24e16 <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   24e4e:	4620      	mov	r0, r4
   24e50:	e7f8      	b.n	24e44 <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
   24e52:	f013 fa8f 	bl	38374 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   24e56:	2301      	movs	r3, #1
   24e58:	e7f7      	b.n	24e4a <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
   24e5a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24e5e:	e7da      	b.n	24e16 <bt_id_set_adv_own_addr+0x52>
   24e60:	200002b0 	.word	0x200002b0

00024e64 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   24e64:	6843      	ldr	r3, [r0, #4]
{
   24e66:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24e68:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   24e6a:	0558      	lsls	r0, r3, #21
   24e6c:	d502      	bpl.n	24e74 <valid_adv_param+0x10>
		return false;
   24e6e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   24e70:	b003      	add	sp, #12
   24e72:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   24e74:	6922      	ldr	r2, [r4, #16]
   24e76:	b10a      	cbz	r2, 24e7c <valid_adv_param+0x18>
   24e78:	07d9      	lsls	r1, r3, #31
   24e7a:	d5f8      	bpl.n	24e6e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   24e7c:	4d1a      	ldr	r5, [pc, #104]	; (24ee8 <valid_adv_param+0x84>)
   24e7e:	7820      	ldrb	r0, [r4, #0]
   24e80:	79eb      	ldrb	r3, [r5, #7]
   24e82:	4283      	cmp	r3, r0
   24e84:	d9f3      	bls.n	24e6e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   24e86:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   24e8a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   24e8c:	2207      	movs	r2, #7
   24e8e:	4669      	mov	r1, sp
   24e90:	4428      	add	r0, r5
   24e92:	9300      	str	r3, [sp, #0]
   24e94:	f8cd 3003 	str.w	r3, [sp, #3]
   24e98:	f015 fb25 	bl	3a4e6 <memcmp>
	if (param->id >= bt_dev.id_count ||
   24e9c:	2800      	cmp	r0, #0
   24e9e:	d0e6      	beq.n	24e6e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   24ea0:	6860      	ldr	r0, [r4, #4]
   24ea2:	07c2      	lsls	r2, r0, #31
   24ea4:	d406      	bmi.n	24eb4 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   24ea6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   24eaa:	2b08      	cmp	r3, #8
   24eac:	d802      	bhi.n	24eb4 <valid_adv_param+0x50>
   24eae:	68a3      	ldr	r3, [r4, #8]
   24eb0:	2b9f      	cmp	r3, #159	; 0x9f
   24eb2:	d9dc      	bls.n	24e6e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   24eb4:	f010 0f30 	tst.w	r0, #48	; 0x30
   24eb8:	d002      	beq.n	24ec0 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   24eba:	6923      	ldr	r3, [r4, #16]
   24ebc:	2b00      	cmp	r3, #0
   24ebe:	d0d6      	beq.n	24e6e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   24ec0:	06c3      	lsls	r3, r0, #27
   24ec2:	d401      	bmi.n	24ec8 <valid_adv_param+0x64>
   24ec4:	6923      	ldr	r3, [r4, #16]
   24ec6:	b943      	cbnz	r3, 24eda <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   24ec8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   24ecc:	429a      	cmp	r2, r3
   24ece:	d8ce      	bhi.n	24e6e <valid_adv_param+0xa>
   24ed0:	2a1f      	cmp	r2, #31
   24ed2:	d9cc      	bls.n	24e6e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   24ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   24ed8:	d8c9      	bhi.n	24e6e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   24eda:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   24ede:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   24ee2:	bf18      	it	ne
   24ee4:	2001      	movne	r0, #1
   24ee6:	e7c3      	b.n	24e70 <valid_adv_param+0xc>
   24ee8:	200002b0 	.word	0x200002b0

00024eec <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   24eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ef0:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   24ef2:	2120      	movs	r1, #32
{
   24ef4:	4682      	mov	sl, r0
   24ef6:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   24ef8:	f7fe fe40 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   24efc:	4606      	mov	r6, r0
   24efe:	2800      	cmp	r0, #0
   24f00:	d05c      	beq.n	24fbc <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   24f02:	2120      	movs	r1, #32
   24f04:	3008      	adds	r0, #8
   24f06:	f005 f895 	bl	2a034 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   24f0a:	2220      	movs	r2, #32
   24f0c:	2100      	movs	r1, #0
   24f0e:	4681      	mov	r9, r0
   24f10:	f015 fb32 	bl	3a578 <memset>
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   24f14:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   24f18:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   24f1c:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   24f1e:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   24f20:	f8d4 8000 	ldr.w	r8, [r4]
   24f24:	2300      	movs	r3, #0
   24f26:	6862      	ldr	r2, [r4, #4]
   24f28:	4293      	cmp	r3, r2
   24f2a:	d30d      	bcc.n	24f48 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   24f2c:	9b00      	ldr	r3, [sp, #0]
   24f2e:	3408      	adds	r4, #8
   24f30:	429c      	cmp	r4, r3
   24f32:	d1f5      	bne.n	24f20 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   24f34:	2200      	movs	r2, #0
   24f36:	4631      	mov	r1, r6
   24f38:	4650      	mov	r0, sl
	*data_len = set_data_len;
   24f3a:	f889 5000 	strb.w	r5, [r9]
}
   24f3e:	b003      	add	sp, #12
   24f40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   24f44:	f7fe be62 	b.w	23c0c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   24f48:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   24f4c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   24f50:	1ca8      	adds	r0, r5, #2
   24f52:	1811      	adds	r1, r2, r0
   24f54:	291f      	cmp	r1, #31
   24f56:	d91a      	bls.n	24f8e <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   24f58:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   24f5c:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   24f60:	d101      	bne.n	24f66 <hci_set_ad+0x7a>
   24f62:	2a00      	cmp	r2, #0
   24f64:	dc11      	bgt.n	24f8a <hci_set_ad+0x9e>
   24f66:	4b17      	ldr	r3, [pc, #92]	; (24fc4 <hci_set_ad+0xd8>)
   24f68:	4817      	ldr	r0, [pc, #92]	; (24fc8 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   24f6a:	4918      	ldr	r1, [pc, #96]	; (24fcc <hci_set_ad+0xe0>)
   24f6c:	1ac0      	subs	r0, r0, r3
   24f6e:	08c0      	lsrs	r0, r0, #3
   24f70:	0180      	lsls	r0, r0, #6
   24f72:	f040 0001 	orr.w	r0, r0, #1
   24f76:	f012 fa8b 	bl	37490 <log_string_sync>
		net_buf_unref(buf);
   24f7a:	4630      	mov	r0, r6
   24f7c:	f004 ff2a 	bl	29dd4 <net_buf_unref>
					return -EINVAL;
   24f80:	f06f 0015 	mvn.w	r0, #21
}
   24f84:	b003      	add	sp, #12
   24f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   24f8a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   24f8e:	b2d7      	uxtb	r7, r2
   24f90:	1c79      	adds	r1, r7, #1
   24f92:	f80b 1005 	strb.w	r1, [fp, r5]
   24f96:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   24f98:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24f9a:	fa5b f080 	uxtab	r0, fp, r0
   24f9e:	f80b c001 	strb.w	ip, [fp, r1]
   24fa2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   24fa6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   24fa8:	3702      	adds	r7, #2
   24faa:	f015 faaa 	bl	3a502 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   24fae:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   24fb0:	443d      	add	r5, r7
   24fb2:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   24fb4:	3301      	adds	r3, #1
   24fb6:	f108 0808 	add.w	r8, r8, #8
   24fba:	e7b4      	b.n	24f26 <hci_set_ad+0x3a>
		return -ENOBUFS;
   24fbc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24fc0:	e7e0      	b.n	24f84 <hci_set_ad+0x98>
   24fc2:	bf00      	nop
   24fc4:	0003b448 	.word	0x0003b448
   24fc8:	0003b458 	.word	0x0003b458
   24fcc:	0003e643 	.word	0x0003e643

00024fd0 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   24fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   24fd2:	4606      	mov	r6, r0
   24fd4:	4b1e      	ldr	r3, [pc, #120]	; (25050 <le_adv_start_add_conn+0x80>)
   24fd6:	f816 2b09 	ldrb.w	r2, [r6], #9
   24fda:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   24fde:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   24fe0:	2300      	movs	r3, #0
{
   24fe2:	4605      	mov	r5, r0
   24fe4:	2207      	movs	r2, #7
   24fe6:	460f      	mov	r7, r1
   24fe8:	4630      	mov	r0, r6
   24fea:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   24fec:	9300      	str	r3, [sp, #0]
   24fee:	f8cd 3003 	str.w	r3, [sp, #3]
   24ff2:	f015 fa78 	bl	3a4e6 <memcmp>
   24ff6:	782a      	ldrb	r2, [r5, #0]
   24ff8:	4604      	mov	r4, r0
   24ffa:	b9a8      	cbnz	r0, 25028 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   24ffc:	4b15      	ldr	r3, [pc, #84]	; (25054 <le_adv_start_add_conn+0x84>)
   24ffe:	6818      	ldr	r0, [r3, #0]
   25000:	8899      	ldrh	r1, [r3, #4]
   25002:	9002      	str	r0, [sp, #8]
   25004:	799b      	ldrb	r3, [r3, #6]
   25006:	f8ad 100c 	strh.w	r1, [sp, #12]
   2500a:	4610      	mov	r0, r2
   2500c:	a902      	add	r1, sp, #8
   2500e:	f88d 300e 	strb.w	r3, [sp, #14]
   25012:	f000 ff77 	bl	25f04 <bt_conn_add_le>
		if (!conn) {
   25016:	4605      	mov	r5, r0
   25018:	b1b8      	cbz	r0, 2504a <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   2501a:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2501c:	f000 fd22 	bl	25a64 <bt_conn_set_state>
	*out_conn = conn;
   25020:	603d      	str	r5, [r7, #0]
	return 0;
}
   25022:	4620      	mov	r0, r4
   25024:	b005      	add	sp, #20
   25026:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   25028:	4631      	mov	r1, r6
   2502a:	4610      	mov	r0, r2
   2502c:	f000 ffa4 	bl	25f78 <bt_conn_exists_le>
   25030:	4604      	mov	r4, r0
   25032:	b938      	cbnz	r0, 25044 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   25034:	7828      	ldrb	r0, [r5, #0]
   25036:	4631      	mov	r1, r6
   25038:	f000 ff64 	bl	25f04 <bt_conn_add_le>
	if (!conn) {
   2503c:	4605      	mov	r5, r0
   2503e:	b120      	cbz	r0, 2504a <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   25040:	2105      	movs	r1, #5
   25042:	e7eb      	b.n	2501c <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   25044:	f06f 0415 	mvn.w	r4, #21
   25048:	e7eb      	b.n	25022 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   2504a:	f06f 040b 	mvn.w	r4, #11
   2504e:	e7e8      	b.n	25022 <le_adv_start_add_conn+0x52>
   25050:	200002b0 	.word	0x200002b0
   25054:	0003b62b 	.word	0x0003b62b

00025058 <bt_le_adv_lookup_legacy>:
}
   25058:	4800      	ldr	r0, [pc, #0]	; (2505c <bt_le_adv_lookup_legacy+0x4>)
   2505a:	4770      	bx	lr
   2505c:	200002c8 	.word	0x200002c8

00025060 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   25060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   25064:	690e      	ldr	r6, [r1, #16]
{
   25066:	b08f      	sub	sp, #60	; 0x3c
   25068:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   2506a:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   2506c:	ebb6 0903 	subs.w	r9, r6, r3
{
   25070:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   25072:	4890      	ldr	r0, [pc, #576]	; (252b4 <bt_le_adv_start_legacy+0x254>)
   25074:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   25076:	bf18      	it	ne
   25078:	f04f 0901 	movne.w	r9, #1
{
   2507c:	460c      	mov	r4, r1
	struct bt_conn *conn = NULL;
   2507e:	9307      	str	r3, [sp, #28]
   25080:	f013 f99d 	bl	383be <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   25084:	0787      	lsls	r7, r0, #30
   25086:	f140 8109 	bpl.w	2529c <bt_le_adv_start_legacy+0x23c>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   2508a:	4608      	mov	r0, r1
   2508c:	f7ff feea 	bl	24e64 <valid_adv_param>
   25090:	b928      	cbnz	r0, 2509e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   25092:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   25096:	4658      	mov	r0, fp
   25098:	b00f      	add	sp, #60	; 0x3c
   2509a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   2509e:	4620      	mov	r0, r4
   250a0:	f013 f97a 	bl	38398 <bt_id_adv_random_addr_check>
   250a4:	4680      	mov	r8, r0
   250a6:	2800      	cmp	r0, #0
   250a8:	d0f3      	beq.n	25092 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   250aa:	f105 0710 	add.w	r7, r5, #16
   250ae:	4638      	mov	r0, r7
   250b0:	f013 f985 	bl	383be <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   250b4:	f3c0 1180 	ubfx	r1, r0, #6, #1
   250b8:	0640      	lsls	r0, r0, #25
   250ba:	f100 80f2 	bmi.w	252a2 <bt_le_adv_start_legacy+0x242>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   250be:	68a3      	ldr	r3, [r4, #8]
   250c0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   250c4:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   250c6:	68e3      	ldr	r3, [r4, #12]
   250c8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	(void)memset(&set_param, 0, sizeof(set_param));
   250cc:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
   250d0:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
	set_param.channel_map  = get_adv_channel_map(param->options);
   250d4:	f013 f964 	bl	383a0 <get_adv_channel_map>
	if (adv->id != param->id) {
   250d8:	782a      	ldrb	r2, [r5, #0]
   250da:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   250dc:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   250e0:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   250e2:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   250e6:	d004      	beq.n	250f2 <bt_le_adv_start_legacy+0x92>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   250e8:	4872      	ldr	r0, [pc, #456]	; (252b4 <bt_le_adv_start_legacy+0x254>)
   250ea:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   250ee:	f013 f96c 	bl	383ca <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   250f2:	4a71      	ldr	r2, [pc, #452]	; (252b8 <bt_le_adv_start_legacy+0x258>)
	adv->id = param->id;
   250f4:	7823      	ldrb	r3, [r4, #0]
   250f6:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   250f8:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   250fc:	6861      	ldr	r1, [r4, #4]
   250fe:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   25102:	464a      	mov	r2, r9
   25104:	4628      	mov	r0, r5
   25106:	f7ff fe5d 	bl	24dc4 <bt_id_set_adv_own_addr>
	if (err) {
   2510a:	4683      	mov	fp, r0
   2510c:	2800      	cmp	r0, #0
   2510e:	d1c2      	bne.n	25096 <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   25110:	f105 0009 	add.w	r0, r5, #9
   25114:	2e00      	cmp	r6, #0
   25116:	d051      	beq.n	251bc <bt_le_adv_start_legacy+0x15c>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   25118:	6921      	ldr	r1, [r4, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   2511a:	f013 f965 	bl	383e8 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   2511e:	4620      	mov	r0, r4
   25120:	f013 f9f7 	bl	38512 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   25124:	6863      	ldr	r3, [r4, #4]
   25126:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   25128:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2512a:	d54f      	bpl.n	251cc <bt_le_adv_start_legacy+0x16c>
		if (dir_adv) {
   2512c:	2e00      	cmp	r6, #0
   2512e:	d04a      	beq.n	251c6 <bt_le_adv_start_legacy+0x166>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   25130:	f013 0f10 	tst.w	r3, #16
   25134:	bf14      	ite	ne
   25136:	2304      	movne	r3, #4
   25138:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   2513a:	6921      	ldr	r1, [r4, #16]
   2513c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   25140:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   25144:	f013 f950 	bl	383e8 <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   25148:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   2514c:	210f      	movs	r1, #15
   2514e:	f242 0006 	movw	r0, #8198	; 0x2006
   25152:	f7fe fd13 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   25156:	4683      	mov	fp, r0
   25158:	2800      	cmp	r0, #0
   2515a:	f000 80a5 	beq.w	252a8 <bt_le_adv_start_legacy+0x248>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2515e:	220f      	movs	r2, #15
   25160:	a90a      	add	r1, sp, #40	; 0x28
   25162:	3008      	adds	r0, #8
   25164:	f014 fad4 	bl	39710 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   25168:	2200      	movs	r2, #0
   2516a:	4659      	mov	r1, fp
   2516c:	f242 0006 	movw	r0, #8198	; 0x2006
   25170:	f7fe fd4c 	bl	23c0c <bt_hci_cmd_send_sync>
	if (err) {
   25174:	2800      	cmp	r0, #0
   25176:	f040 809a 	bne.w	252ae <bt_le_adv_start_legacy+0x24e>
	if (!dir_adv) {
   2517a:	2e00      	cmp	r6, #0
   2517c:	d036      	beq.n	251ec <bt_le_adv_start_legacy+0x18c>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2517e:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   25180:	07db      	lsls	r3, r3, #31
   25182:	d441      	bmi.n	25208 <bt_le_adv_start_legacy+0x1a8>
	return bt_le_adv_set_enable_legacy(adv, enable);
   25184:	2101      	movs	r1, #1
   25186:	4628      	mov	r0, r5
   25188:	f013 f9d3 	bl	38532 <bt_le_adv_set_enable_legacy>
	if (err) {
   2518c:	4683      	mov	fp, r0
   2518e:	2800      	cmp	r0, #0
   25190:	d07d      	beq.n	2528e <bt_le_adv_start_legacy+0x22e>
   25192:	4b4a      	ldr	r3, [pc, #296]	; (252bc <bt_le_adv_start_legacy+0x25c>)
   25194:	484a      	ldr	r0, [pc, #296]	; (252c0 <bt_le_adv_start_legacy+0x260>)
		BT_ERR("Failed to start advertiser");
   25196:	494b      	ldr	r1, [pc, #300]	; (252c4 <bt_le_adv_start_legacy+0x264>)
   25198:	1ac0      	subs	r0, r0, r3
   2519a:	08c0      	lsrs	r0, r0, #3
   2519c:	0180      	lsls	r0, r0, #6
   2519e:	f040 0001 	orr.w	r0, r0, #1
   251a2:	f012 f975 	bl	37490 <log_string_sync>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   251a6:	9807      	ldr	r0, [sp, #28]
   251a8:	2800      	cmp	r0, #0
   251aa:	f43f af74 	beq.w	25096 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   251ae:	2100      	movs	r1, #0
   251b0:	f000 fc58 	bl	25a64 <bt_conn_set_state>
			bt_conn_unref(conn);
   251b4:	9807      	ldr	r0, [sp, #28]
   251b6:	f000 fc11 	bl	259dc <bt_conn_unref>
   251ba:	e76c      	b.n	25096 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   251bc:	9608      	str	r6, [sp, #32]
   251be:	a908      	add	r1, sp, #32
   251c0:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   251c4:	e7a9      	b.n	2511a <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   251c6:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   251ca:	e7bf      	b.n	2514c <bt_le_adv_start_legacy+0xec>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   251cc:	059a      	lsls	r2, r3, #22
   251ce:	d403      	bmi.n	251d8 <bt_le_adv_start_legacy+0x178>
   251d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   251d2:	b90b      	cbnz	r3, 251d8 <bt_le_adv_start_legacy+0x178>
   251d4:	2802      	cmp	r0, #2
   251d6:	d103      	bne.n	251e0 <bt_le_adv_start_legacy+0x180>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   251d8:	2302      	movs	r3, #2
   251da:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   251de:	e7b5      	b.n	2514c <bt_le_adv_start_legacy+0xec>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   251e0:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   251e2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   251e6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   251ea:	e7af      	b.n	2514c <bt_le_adv_start_legacy+0xec>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   251ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   251ee:	9300      	str	r3, [sp, #0]
   251f0:	e9cd 8901 	strd	r8, r9, [sp, #4]
   251f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   251f6:	9905      	ldr	r1, [sp, #20]
   251f8:	4652      	mov	r2, sl
   251fa:	4628      	mov	r0, r5
   251fc:	f013 f912 	bl	38424 <le_adv_update.constprop.0>
		if (err) {
   25200:	4683      	mov	fp, r0
   25202:	2800      	cmp	r0, #0
   25204:	d0bb      	beq.n	2517e <bt_le_adv_start_legacy+0x11e>
   25206:	e746      	b.n	25096 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   25208:	a907      	add	r1, sp, #28
   2520a:	4628      	mov	r0, r5
   2520c:	f7ff fee0 	bl	24fd0 <le_adv_start_add_conn>
		if (err) {
   25210:	4683      	mov	fp, r0
   25212:	2800      	cmp	r0, #0
   25214:	d0b6      	beq.n	25184 <bt_le_adv_start_legacy+0x124>
			if (err == -ENOMEM && !dir_adv &&
   25216:	f110 0f0c 	cmn.w	r0, #12
   2521a:	f47f af3c 	bne.w	25096 <bt_le_adv_start_legacy+0x36>
   2521e:	2e00      	cmp	r6, #0
   25220:	f47f af39 	bne.w	25096 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   25224:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   25226:	0798      	lsls	r0, r3, #30
   25228:	f53f af35 	bmi.w	25096 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2522c:	6862      	ldr	r2, [r4, #4]
   2522e:	f082 0202 	eor.w	r2, r2, #2
   25232:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   25236:	f00b 0201 	and.w	r2, fp, #1
   2523a:	210d      	movs	r1, #13
   2523c:	4638      	mov	r0, r7
   2523e:	f013 f8da 	bl	383f6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   25242:	f109 33ff 	add.w	r3, r9, #4294967295
   25246:	425a      	negs	r2, r3
   25248:	415a      	adcs	r2, r3
   2524a:	2107      	movs	r1, #7
   2524c:	4638      	mov	r0, r7
   2524e:	f013 f8d2 	bl	383f6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   25252:	f1a9 0102 	sub.w	r1, r9, #2
   25256:	424a      	negs	r2, r1
   25258:	414a      	adcs	r2, r1
   2525a:	4638      	mov	r0, r7
   2525c:	2108      	movs	r1, #8
   2525e:	f013 f8ca 	bl	383f6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   25262:	6862      	ldr	r2, [r4, #4]
   25264:	2109      	movs	r1, #9
   25266:	f002 0201 	and.w	r2, r2, #1
   2526a:	4638      	mov	r0, r7
   2526c:	f013 f8c3 	bl	383f6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   25270:	4642      	mov	r2, r8
   25272:	210a      	movs	r1, #10
   25274:	4638      	mov	r0, r7
   25276:	f013 f8be 	bl	383f6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   2527a:	6862      	ldr	r2, [r4, #4]
   2527c:	210c      	movs	r1, #12
   2527e:	f3c2 0280 	ubfx	r2, r2, #2, #1
   25282:	4638      	mov	r0, r7
   25284:	f013 f8b7 	bl	383f6 <atomic_set_bit_to>
	return 0;
   25288:	f04f 0b00 	mov.w	fp, #0
   2528c:	e703      	b.n	25096 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2528e:	9807      	ldr	r0, [sp, #28]
   25290:	b108      	cbz	r0, 25296 <bt_le_adv_start_legacy+0x236>
		bt_conn_unref(conn);
   25292:	f000 fba3 	bl	259dc <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   25296:	2e00      	cmp	r6, #0
   25298:	d1cd      	bne.n	25236 <bt_le_adv_start_legacy+0x1d6>
   2529a:	e7c7      	b.n	2522c <bt_le_adv_start_legacy+0x1cc>
		return -EAGAIN;
   2529c:	f06f 0b0a 	mvn.w	fp, #10
   252a0:	e6f9      	b.n	25096 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   252a2:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   252a6:	e6f6      	b.n	25096 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   252a8:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   252ac:	e6f3      	b.n	25096 <bt_le_adv_start_legacy+0x36>
   252ae:	4683      	mov	fp, r0
   252b0:	e6f1      	b.n	25096 <bt_le_adv_start_legacy+0x36>
   252b2:	bf00      	nop
   252b4:	2000037c 	.word	0x2000037c
   252b8:	200002b0 	.word	0x200002b0
   252bc:	0003b448 	.word	0x0003b448
   252c0:	0003b458 	.word	0x0003b458
   252c4:	0003e65c 	.word	0x0003e65c

000252c8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   252c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   252ca:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   252cc:	9a06      	ldr	r2, [sp, #24]
{
   252ce:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   252d0:	e9cd 3200 	strd	r3, r2, [sp]
   252d4:	462b      	mov	r3, r5
   252d6:	460a      	mov	r2, r1
   252d8:	4601      	mov	r1, r0
   252da:	4811      	ldr	r0, [pc, #68]	; (25320 <bt_le_adv_start+0x58>)
   252dc:	f7ff fec0 	bl	25060 <bt_le_adv_start_legacy>
   252e0:	4621      	mov	r1, r4
   252e2:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   252e4:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   252e6:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   252ea:	429d      	cmp	r5, r3
   252ec:	d102      	bne.n	252f4 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   252ee:	4630      	mov	r0, r6
   252f0:	b002      	add	sp, #8
   252f2:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   252f4:	880a      	ldrh	r2, [r1, #0]
   252f6:	4282      	cmp	r2, r0
   252f8:	d104      	bne.n	25304 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   252fa:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   252fc:	b112      	cbz	r2, 25304 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   252fe:	7812      	ldrb	r2, [r2, #0]
   25300:	07d2      	lsls	r2, r2, #31
   25302:	d402      	bmi.n	2530a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   25304:	3301      	adds	r3, #1
   25306:	3108      	adds	r1, #8
   25308:	e7ef      	b.n	252ea <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   2530a:	4906      	ldr	r1, [pc, #24]	; (25324 <bt_le_adv_start+0x5c>)
   2530c:	4806      	ldr	r0, [pc, #24]	; (25328 <bt_le_adv_start+0x60>)
   2530e:	f00b f9ef 	bl	306f0 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   25312:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   25316:	2300      	movs	r3, #0
   25318:	4803      	ldr	r0, [pc, #12]	; (25328 <bt_le_adv_start+0x60>)
   2531a:	f00b fb0d 	bl	30938 <k_work_reschedule>
   2531e:	e7e6      	b.n	252ee <bt_le_adv_start+0x26>
   25320:	200002c8 	.word	0x200002c8
   25324:	000253c9 	.word	0x000253c9
   25328:	200002e0 	.word	0x200002e0

0002532c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   2532c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   2532e:	4821      	ldr	r0, [pc, #132]	; (253b4 <bt_le_adv_stop+0x88>)
   25330:	f013 f924 	bl	3857c <bt_le_lim_adv_cancel_timeout>
   25334:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   25338:	481f      	ldr	r0, [pc, #124]	; (253b8 <bt_le_adv_stop+0x8c>)
   2533a:	f013 f846 	bl	383ca <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2533e:	481e      	ldr	r0, [pc, #120]	; (253b8 <bt_le_adv_stop+0x8c>)
   25340:	f013 f83d 	bl	383be <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   25344:	0642      	lsls	r2, r0, #25
   25346:	f3c0 1380 	ubfx	r3, r0, #6, #1
   2534a:	d530      	bpl.n	253ae <bt_le_adv_stop+0x82>
   2534c:	481a      	ldr	r0, [pc, #104]	; (253b8 <bt_le_adv_stop+0x8c>)
   2534e:	f013 f836 	bl	383be <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   25352:	0583      	lsls	r3, r0, #22
   25354:	d521      	bpl.n	2539a <bt_le_adv_stop+0x6e>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   25356:	2300      	movs	r3, #0
   25358:	4818      	ldr	r0, [pc, #96]	; (253bc <bt_le_adv_stop+0x90>)
   2535a:	9300      	str	r3, [sp, #0]
   2535c:	2207      	movs	r2, #7
   2535e:	4669      	mov	r1, sp
   25360:	f8cd 3003 	str.w	r3, [sp, #3]
   25364:	f015 f8bf 	bl	3a4e6 <memcmp>
   25368:	4b15      	ldr	r3, [pc, #84]	; (253c0 <bt_le_adv_stop+0x94>)
   2536a:	b9e0      	cbnz	r0, 253a6 <bt_le_adv_stop+0x7a>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   2536c:	4a15      	ldr	r2, [pc, #84]	; (253c4 <bt_le_adv_stop+0x98>)
   2536e:	8891      	ldrh	r1, [r2, #4]
   25370:	6810      	ldr	r0, [r2, #0]
   25372:	7992      	ldrb	r2, [r2, #6]
   25374:	f8ad 100c 	strh.w	r1, [sp, #12]
   25378:	f88d 200e 	strb.w	r2, [sp, #14]
   2537c:	9002      	str	r0, [sp, #8]
   2537e:	2204      	movs	r2, #4
   25380:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   25382:	7e18      	ldrb	r0, [r3, #24]
   25384:	f000 fe1e 	bl	25fc4 <bt_conn_lookup_state_le>
   25388:	4604      	mov	r4, r0
	if (conn) {
   2538a:	b130      	cbz	r0, 2539a <bt_le_adv_stop+0x6e>
		conn->err = status;
   2538c:	2100      	movs	r1, #0
   2538e:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   25390:	f000 fb68 	bl	25a64 <bt_conn_set_state>
		bt_conn_unref(conn);
   25394:	4620      	mov	r0, r4
   25396:	f000 fb21 	bl	259dc <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   2539a:	4806      	ldr	r0, [pc, #24]	; (253b4 <bt_le_adv_stop+0x88>)
   2539c:	2100      	movs	r1, #0
   2539e:	f013 f8c8 	bl	38532 <bt_le_adv_set_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   253a2:	b004      	add	sp, #16
   253a4:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   253a6:	2205      	movs	r2, #5
   253a8:	f103 0121 	add.w	r1, r3, #33	; 0x21
   253ac:	e7e9      	b.n	25382 <bt_le_adv_stop+0x56>
		return 0;
   253ae:	4618      	mov	r0, r3
   253b0:	e7f7      	b.n	253a2 <bt_le_adv_stop+0x76>
   253b2:	bf00      	nop
   253b4:	200002c8 	.word	0x200002c8
   253b8:	200002d8 	.word	0x200002d8
   253bc:	200002d1 	.word	0x200002d1
   253c0:	200002b0 	.word	0x200002b0
   253c4:	0003b62b 	.word	0x0003b62b

000253c8 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   253c8:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   253ca:	f7ff ffaf 	bl	2532c <bt_le_adv_stop>
   253ce:	4b06      	ldr	r3, [pc, #24]	; (253e8 <adv_timeout+0x20>)
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   253d0:	4906      	ldr	r1, [pc, #24]	; (253ec <adv_timeout+0x24>)
	err = bt_le_adv_stop();
   253d2:	4602      	mov	r2, r0
   253d4:	4806      	ldr	r0, [pc, #24]	; (253f0 <adv_timeout+0x28>)
   253d6:	1a1b      	subs	r3, r3, r0
   253d8:	08db      	lsrs	r3, r3, #3
	BT_WARN("Failed to stop advertising: %d", err);
   253da:	019b      	lsls	r3, r3, #6
   253dc:	f043 0002 	orr.w	r0, r3, #2
}
   253e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_WARN("Failed to stop advertising: %d", err);
   253e4:	f012 b854 	b.w	37490 <log_string_sync>
   253e8:	0003b458 	.word	0x0003b458
   253ec:	0003e677 	.word	0x0003e677
   253f0:	0003b448 	.word	0x0003b448

000253f4 <bt_le_adv_resume>:
{
   253f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   253f6:	481e      	ldr	r0, [pc, #120]	; (25470 <bt_le_adv_resume+0x7c>)
   253f8:	4c1d      	ldr	r4, [pc, #116]	; (25470 <bt_le_adv_resume+0x7c>)
   253fa:	f012 ffe0 	bl	383be <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   253fe:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   25402:	d032      	beq.n	2546a <bt_le_adv_resume+0x76>
   25404:	4620      	mov	r0, r4
   25406:	f012 ffda 	bl	383be <atomic_get>
   2540a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2540c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   25410:	d42b      	bmi.n	2546a <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   25412:	4620      	mov	r0, r4
   25414:	f012 ffd3 	bl	383be <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   25418:	0583      	lsls	r3, r0, #22
   2541a:	d526      	bpl.n	2546a <bt_le_adv_resume+0x76>
	err = le_adv_start_add_conn(adv, &conn);
   2541c:	a901      	add	r1, sp, #4
   2541e:	f1a4 0010 	sub.w	r0, r4, #16
   25422:	f7ff fdd5 	bl	24fd0 <le_adv_start_add_conn>
	if (err) {
   25426:	bb00      	cbnz	r0, 2546a <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   25428:	2101      	movs	r1, #1
   2542a:	f1a4 0010 	sub.w	r0, r4, #16
   2542e:	f013 f880 	bl	38532 <bt_le_adv_set_enable_legacy>
	if (err) {
   25432:	b150      	cbz	r0, 2544a <bt_le_adv_resume+0x56>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   25434:	4629      	mov	r1, r5
   25436:	9801      	ldr	r0, [sp, #4]
   25438:	f000 fb14 	bl	25a64 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2543c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   25440:	4620      	mov	r0, r4
   25442:	f012 ffc2 	bl	383ca <atomic_and>
	return (old & mask) != 0;
   25446:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
   2544a:	9801      	ldr	r0, [sp, #4]
   2544c:	f000 fac6 	bl	259dc <bt_conn_unref>
	if (persist_paused) {
   25450:	b15d      	cbz	r5, 2546a <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25452:	f3bf 8f5b 	dmb	ish
   25456:	e854 3f00 	ldrex	r3, [r4]
   2545a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2545e:	e844 3200 	strex	r2, r3, [r4]
   25462:	2a00      	cmp	r2, #0
   25464:	d1f7      	bne.n	25456 <bt_le_adv_resume+0x62>
   25466:	f3bf 8f5b 	dmb	ish
}
   2546a:	b003      	add	sp, #12
   2546c:	bd30      	pop	{r4, r5, pc}
   2546e:	bf00      	nop
   25470:	200002d8 	.word	0x200002d8

00025474 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   25474:	2300      	movs	r3, #0
	tx->user_data = NULL;
   25476:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   2547a:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   2547c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   2547e:	4801      	ldr	r0, [pc, #4]	; (25484 <tx_free+0x10>)
   25480:	f014 bee2 	b.w	3a248 <k_queue_append>
   25484:	20000c98 	.word	0x20000c98

00025488 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   25488:	4b19      	ldr	r3, [pc, #100]	; (254f0 <notify_connected+0x68>)
{
   2548a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   2548e:	681d      	ldr	r5, [r3, #0]
{
   25490:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   25492:	b9ed      	cbnz	r5, 254d0 <notify_connected+0x48>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   25494:	4e17      	ldr	r6, [pc, #92]	; (254f4 <notify_connected+0x6c>)
   25496:	4d18      	ldr	r5, [pc, #96]	; (254f8 <notify_connected+0x70>)
   25498:	4f18      	ldr	r7, [pc, #96]	; (254fc <notify_connected+0x74>)
   2549a:	46b0      	mov	r8, r6
   2549c:	42b5      	cmp	r5, r6
   2549e:	d90e      	bls.n	254be <notify_connected+0x36>
   254a0:	4917      	ldr	r1, [pc, #92]	; (25500 <notify_connected+0x78>)
   254a2:	4818      	ldr	r0, [pc, #96]	; (25504 <notify_connected+0x7c>)
   254a4:	f240 5311 	movw	r3, #1297	; 0x511
   254a8:	463a      	mov	r2, r7
   254aa:	f011 fe36 	bl	3711a <printk>
   254ae:	4816      	ldr	r0, [pc, #88]	; (25508 <notify_connected+0x80>)
   254b0:	f011 fe33 	bl	3711a <printk>
   254b4:	f240 5111 	movw	r1, #1297	; 0x511
   254b8:	4638      	mov	r0, r7
   254ba:	f011 ffd4 	bl	37466 <assert_post_action>
   254be:	4545      	cmp	r5, r8
   254c0:	d30d      	bcc.n	254de <notify_connected+0x56>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   254c2:	7a63      	ldrb	r3, [r4, #9]
   254c4:	b993      	cbnz	r3, 254ec <notify_connected+0x64>
		bt_gatt_connected(conn);
   254c6:	4620      	mov	r0, r4
	}
}
   254c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_gatt_connected(conn);
   254cc:	f003 bfbe 	b.w	2944c <bt_gatt_connected>
		if (cb->connected) {
   254d0:	682b      	ldr	r3, [r5, #0]
   254d2:	b113      	cbz	r3, 254da <notify_connected+0x52>
			cb->connected(conn, conn->err);
   254d4:	7a61      	ldrb	r1, [r4, #9]
   254d6:	4620      	mov	r0, r4
   254d8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   254da:	696d      	ldr	r5, [r5, #20]
   254dc:	e7d9      	b.n	25492 <notify_connected+0xa>
		if (cb->connected) {
   254de:	682b      	ldr	r3, [r5, #0]
   254e0:	b113      	cbz	r3, 254e8 <notify_connected+0x60>
			cb->connected(conn, conn->err);
   254e2:	7a61      	ldrb	r1, [r4, #9]
   254e4:	4620      	mov	r0, r4
   254e6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   254e8:	3518      	adds	r5, #24
   254ea:	e7d7      	b.n	2549c <notify_connected+0x14>
}
   254ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   254f0:	20002990 	.word	0x20002990
   254f4:	0003b3cc 	.word	0x0003b3cc
   254f8:	0003b3cc 	.word	0x0003b3cc
   254fc:	0003e69d 	.word	0x0003e69d
   25500:	0003e6cd 	.word	0x0003e6cd
   25504:	0003c48a 	.word	0x0003c48a
   25508:	0003d403 	.word	0x0003d403

0002550c <send_frag>:
{
   2550c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   25510:	694d      	ldr	r5, [r1, #20]
{
   25512:	4604      	mov	r4, r0
   25514:	460e      	mov	r6, r1
   25516:	4617      	mov	r7, r2
   25518:	4698      	mov	r8, r3
	return z_impl_k_sem_take(sem, timeout);
   2551a:	f04f 33ff 	mov.w	r3, #4294967295
   2551e:	484e      	ldr	r0, [pc, #312]	; (25658 <send_frag+0x14c>)
   25520:	f04f 32ff 	mov.w	r2, #4294967295
   25524:	f00a fd10 	bl	2ff48 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   25528:	7aa3      	ldrb	r3, [r4, #10]
   2552a:	2b07      	cmp	r3, #7
   2552c:	d150      	bne.n	255d0 <send_frag+0xc4>
	__asm__ volatile(
   2552e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25532:	f3ef 8211 	mrs	r2, BASEPRI
   25536:	f383 8812 	msr	BASEPRI_MAX, r3
   2553a:	f3bf 8f6f 	isb	sy
	if (tx) {
   2553e:	2d00      	cmp	r5, #0
   25540:	d05b      	beq.n	255fa <send_frag+0xee>
	parent->next = child;
   25542:	2300      	movs	r3, #0
   25544:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   25546:	69a3      	ldr	r3, [r4, #24]
   25548:	2b00      	cmp	r3, #0
   2554a:	d153      	bne.n	255f4 <send_frag+0xe8>
	list->head = node;
   2554c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   25550:	f382 8811 	msr	BASEPRI, r2
   25554:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   25558:	2104      	movs	r1, #4
   2555a:	f106 0008 	add.w	r0, r6, #8
   2555e:	f004 fd05 	bl	29f6c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   25562:	8823      	ldrh	r3, [r4, #0]
   25564:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   25568:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2556c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2556e:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   25570:	3b04      	subs	r3, #4
   25572:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   25574:	2302      	movs	r3, #2
   25576:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   25578:	4630      	mov	r0, r6
   2557a:	f7fe fbbf 	bl	23cfc <bt_send>
	if (err) {
   2557e:	4602      	mov	r2, r0
   25580:	2800      	cmp	r0, #0
   25582:	d065      	beq.n	25650 <send_frag+0x144>
   25584:	4835      	ldr	r0, [pc, #212]	; (2565c <send_frag+0x150>)
   25586:	4f36      	ldr	r7, [pc, #216]	; (25660 <send_frag+0x154>)
		BT_ERR("Unable to send to driver (err %d)", err);
   25588:	4936      	ldr	r1, [pc, #216]	; (25664 <send_frag+0x158>)
   2558a:	1a3f      	subs	r7, r7, r0
   2558c:	08ff      	lsrs	r7, r7, #3
   2558e:	01bf      	lsls	r7, r7, #6
   25590:	f047 0001 	orr.w	r0, r7, #1
   25594:	f011 ff7c 	bl	37490 <log_string_sync>
	__asm__ volatile(
   25598:	f04f 0340 	mov.w	r3, #64	; 0x40
   2559c:	f3ef 8711 	mrs	r7, BASEPRI
   255a0:	f383 8812 	msr	BASEPRI_MAX, r3
   255a4:	f3bf 8f6f 	isb	sy
		if (tx) {
   255a8:	2d00      	cmp	r5, #0
   255aa:	d03c      	beq.n	25626 <send_frag+0x11a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   255ac:	6963      	ldr	r3, [r4, #20]
   255ae:	2200      	movs	r2, #0
   255b0:	b153      	cbz	r3, 255c8 <send_frag+0xbc>
   255b2:	429d      	cmp	r5, r3
   255b4:	d134      	bne.n	25620 <send_frag+0x114>
Z_GENLIST_REMOVE(slist, snode)
   255b6:	682b      	ldr	r3, [r5, #0]
   255b8:	bb62      	cbnz	r2, 25614 <send_frag+0x108>
   255ba:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   255bc:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   255be:	4295      	cmp	r5, r2
   255c0:	d100      	bne.n	255c4 <send_frag+0xb8>
	list->tail = node;
   255c2:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   255c4:	2300      	movs	r3, #0
   255c6:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   255c8:	f387 8811 	msr	BASEPRI, r7
   255cc:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   255d0:	4821      	ldr	r0, [pc, #132]	; (25658 <send_frag+0x14c>)
   255d2:	f00a fc75 	bl	2fec0 <z_impl_k_sem_give>
	if (tx) {
   255d6:	b115      	cbz	r5, 255de <send_frag+0xd2>
		tx_free(tx);
   255d8:	4628      	mov	r0, r5
   255da:	f7ff ff4b 	bl	25474 <tx_free>
	if (always_consume) {
   255de:	f1b8 0f00 	cmp.w	r8, #0
   255e2:	d004      	beq.n	255ee <send_frag+0xe2>
		net_buf_unref(buf);
   255e4:	4630      	mov	r0, r6
   255e6:	f004 fbf5 	bl	29dd4 <net_buf_unref>
	return false;
   255ea:	f04f 0800 	mov.w	r8, #0
}
   255ee:	4640      	mov	r0, r8
   255f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   255f4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   255f6:	61a5      	str	r5, [r4, #24]
}
   255f8:	e7aa      	b.n	25550 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   255fa:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   255fc:	b133      	cbz	r3, 2560c <send_frag+0x100>
			pending_no_cb = &tail_tx->pending_no_cb;
   255fe:	f103 090c 	add.w	r9, r3, #12
   25602:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   25604:	3301      	adds	r3, #1
   25606:	f8c9 3000 	str.w	r3, [r9]
   2560a:	e7a1      	b.n	25550 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   2560c:	69e3      	ldr	r3, [r4, #28]
   2560e:	f104 091c 	add.w	r9, r4, #28
   25612:	e7f7      	b.n	25604 <send_frag+0xf8>
	parent->next = child;
   25614:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25616:	69a3      	ldr	r3, [r4, #24]
   25618:	429d      	cmp	r5, r3
	list->tail = node;
   2561a:	bf08      	it	eq
   2561c:	61a2      	streq	r2, [r4, #24]
}
   2561e:	e7d1      	b.n	255c4 <send_frag+0xb8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25620:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25622:	681b      	ldr	r3, [r3, #0]
   25624:	e7c4      	b.n	255b0 <send_frag+0xa4>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   25626:	f8d9 3000 	ldr.w	r3, [r9]
   2562a:	b95b      	cbnz	r3, 25644 <send_frag+0x138>
   2562c:	490e      	ldr	r1, [pc, #56]	; (25668 <send_frag+0x15c>)
   2562e:	480f      	ldr	r0, [pc, #60]	; (2566c <send_frag+0x160>)
   25630:	4a0f      	ldr	r2, [pc, #60]	; (25670 <send_frag+0x164>)
   25632:	f240 230f 	movw	r3, #527	; 0x20f
   25636:	f011 fd70 	bl	3711a <printk>
   2563a:	480d      	ldr	r0, [pc, #52]	; (25670 <send_frag+0x164>)
   2563c:	f240 210f 	movw	r1, #527	; 0x20f
   25640:	f011 ff11 	bl	37466 <assert_post_action>
			(*pending_no_cb)--;
   25644:	f8d9 3000 	ldr.w	r3, [r9]
   25648:	3b01      	subs	r3, #1
   2564a:	f8c9 3000 	str.w	r3, [r9]
   2564e:	e7bb      	b.n	255c8 <send_frag+0xbc>
	return true;
   25650:	f04f 0801 	mov.w	r8, #1
   25654:	e7cb      	b.n	255ee <send_frag+0xe2>
   25656:	bf00      	nop
   25658:	200003b0 	.word	0x200003b0
   2565c:	0003b448 	.word	0x0003b448
   25660:	0003b470 	.word	0x0003b470
   25664:	0003e327 	.word	0x0003e327
   25668:	0003e6e8 	.word	0x0003e6e8
   2566c:	0003c48a 	.word	0x0003c48a
   25670:	0003e69d 	.word	0x0003e69d

00025674 <bt_conn_get_pkts>:
}
   25674:	4800      	ldr	r0, [pc, #0]	; (25678 <bt_conn_get_pkts+0x4>)
   25676:	4770      	bx	lr
   25678:	200003b0 	.word	0x200003b0

0002567c <bt_conn_new>:
{
   2567c:	b538      	push	{r3, r4, r5, lr}
   2567e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   25680:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   25682:	2501      	movs	r5, #1
   25684:	428b      	cmp	r3, r1
   25686:	d102      	bne.n	2568e <bt_conn_new+0x12>
		return NULL;
   25688:	2400      	movs	r4, #0
}
   2568a:	4620      	mov	r0, r4
   2568c:	bd38      	pop	{r3, r4, r5, pc}
   2568e:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
   25692:	f3bf 8f5b 	dmb	ish
   25696:	e852 0f00 	ldrex	r0, [r2]
   2569a:	2800      	cmp	r0, #0
   2569c:	d104      	bne.n	256a8 <bt_conn_new+0x2c>
   2569e:	e842 5c00 	strex	ip, r5, [r2]
   256a2:	f1bc 0f00 	cmp.w	ip, #0
   256a6:	d1f6      	bne.n	25696 <bt_conn_new+0x1a>
   256a8:	f3bf 8f5b 	dmb	ish
   256ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   256b0:	d002      	beq.n	256b8 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   256b2:	3301      	adds	r3, #1
   256b4:	4604      	mov	r4, r0
   256b6:	e7e5      	b.n	25684 <bt_conn_new+0x8>
	if (!conn) {
   256b8:	2c00      	cmp	r4, #0
   256ba:	d0e6      	beq.n	2568a <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   256bc:	22c8      	movs	r2, #200	; 0xc8
   256be:	2100      	movs	r1, #0
   256c0:	4620      	mov	r0, r4
   256c2:	f014 ff59 	bl	3a578 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   256c6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   256ca:	4904      	ldr	r1, [pc, #16]	; (256dc <bt_conn_new+0x60>)
   256cc:	f00b f810 	bl	306f0 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   256d0:	4903      	ldr	r1, [pc, #12]	; (256e0 <bt_conn_new+0x64>)
   256d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   256d6:	f00a ff07 	bl	304e8 <k_work_init>
	return conn;
   256da:	e7d6      	b.n	2568a <bt_conn_new+0xe>
   256dc:	000260d1 	.word	0x000260d1
   256e0:	000385c9 	.word	0x000385c9

000256e4 <conn_cleanup>:
{
   256e4:	b570      	push	{r4, r5, r6, lr}
   256e6:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   256e8:	f100 0638 	add.w	r6, r0, #56	; 0x38
   256ec:	2200      	movs	r2, #0
   256ee:	2300      	movs	r3, #0
   256f0:	4630      	mov	r0, r6
   256f2:	f004 f9db 	bl	29aac <net_buf_get>
   256f6:	4605      	mov	r5, r0
   256f8:	bb48      	cbnz	r0, 2574e <conn_cleanup+0x6a>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   256fa:	6963      	ldr	r3, [r4, #20]
   256fc:	b173      	cbz	r3, 2571c <conn_cleanup+0x38>
   256fe:	4918      	ldr	r1, [pc, #96]	; (25760 <conn_cleanup+0x7c>)
   25700:	4a18      	ldr	r2, [pc, #96]	; (25764 <conn_cleanup+0x80>)
   25702:	4819      	ldr	r0, [pc, #100]	; (25768 <conn_cleanup+0x84>)
   25704:	f240 2392 	movw	r3, #658	; 0x292
   25708:	f011 fd07 	bl	3711a <printk>
   2570c:	4817      	ldr	r0, [pc, #92]	; (2576c <conn_cleanup+0x88>)
   2570e:	f011 fd04 	bl	3711a <printk>
   25712:	4814      	ldr	r0, [pc, #80]	; (25764 <conn_cleanup+0x80>)
   25714:	f240 2192 	movw	r1, #658	; 0x292
   25718:	f011 fea5 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   2571c:	69e3      	ldr	r3, [r4, #28]
   2571e:	b15b      	cbz	r3, 25738 <conn_cleanup+0x54>
   25720:	4913      	ldr	r1, [pc, #76]	; (25770 <conn_cleanup+0x8c>)
   25722:	4811      	ldr	r0, [pc, #68]	; (25768 <conn_cleanup+0x84>)
   25724:	4a0f      	ldr	r2, [pc, #60]	; (25764 <conn_cleanup+0x80>)
   25726:	f240 2393 	movw	r3, #659	; 0x293
   2572a:	f011 fcf6 	bl	3711a <printk>
   2572e:	480d      	ldr	r0, [pc, #52]	; (25764 <conn_cleanup+0x80>)
   25730:	f240 2193 	movw	r1, #659	; 0x293
   25734:	f011 fe97 	bl	37466 <assert_post_action>
	bt_conn_reset_rx_state(conn);
   25738:	4620      	mov	r0, r4
   2573a:	f012 ff48 	bl	385ce <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2573e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   25742:	2200      	movs	r2, #0
}
   25744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   25748:	2300      	movs	r3, #0
   2574a:	f00b b8f5 	b.w	30938 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   2574e:	6968      	ldr	r0, [r5, #20]
   25750:	b108      	cbz	r0, 25756 <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
   25752:	f7ff fe8f 	bl	25474 <tx_free>
		net_buf_unref(buf);
   25756:	4628      	mov	r0, r5
   25758:	f004 fb3c 	bl	29dd4 <net_buf_unref>
   2575c:	e7c6      	b.n	256ec <conn_cleanup+0x8>
   2575e:	bf00      	nop
   25760:	0003e6fb 	.word	0x0003e6fb
   25764:	0003e69d 	.word	0x0003e69d
   25768:	0003c48a 	.word	0x0003c48a
   2576c:	0003e721 	.word	0x0003e721
   25770:	0003e736 	.word	0x0003e736

00025774 <bt_conn_recv>:
{
   25774:	b570      	push	{r4, r5, r6, lr}
   25776:	4616      	mov	r6, r2
   25778:	4604      	mov	r4, r0
   2577a:	460d      	mov	r5, r1
	tx_notify(conn);
   2577c:	f012 ff01 	bl	38582 <tx_notify>
	switch (flags) {
   25780:	2e01      	cmp	r6, #1
   25782:	d02e      	beq.n	257e2 <bt_conn_recv+0x6e>
   25784:	2e02      	cmp	r6, #2
   25786:	d164      	bne.n	25852 <bt_conn_recv+0xde>
		if (conn->rx) {
   25788:	6923      	ldr	r3, [r4, #16]
   2578a:	b163      	cbz	r3, 257a6 <bt_conn_recv+0x32>
   2578c:	4b3b      	ldr	r3, [pc, #236]	; (2587c <bt_conn_recv+0x108>)
   2578e:	483c      	ldr	r0, [pc, #240]	; (25880 <bt_conn_recv+0x10c>)
			BT_ERR("Unexpected first L2CAP frame");
   25790:	493c      	ldr	r1, [pc, #240]	; (25884 <bt_conn_recv+0x110>)
   25792:	1ac0      	subs	r0, r0, r3
   25794:	08c0      	lsrs	r0, r0, #3
   25796:	0180      	lsls	r0, r0, #6
   25798:	f040 0001 	orr.w	r0, r0, #1
   2579c:	f011 fe78 	bl	37490 <log_string_sync>
			bt_conn_reset_rx_state(conn);
   257a0:	4620      	mov	r0, r4
   257a2:	f012 ff14 	bl	385ce <bt_conn_reset_rx_state>
		conn->rx = buf;
   257a6:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   257a8:	6921      	ldr	r1, [r4, #16]
   257aa:	898a      	ldrh	r2, [r1, #12]
   257ac:	2a01      	cmp	r2, #1
   257ae:	d964      	bls.n	2587a <bt_conn_recv+0x106>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   257b0:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   257b2:	7845      	ldrb	r5, [r0, #1]
   257b4:	7803      	ldrb	r3, [r0, #0]
   257b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   257ba:	3304      	adds	r3, #4
   257bc:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   257be:	429a      	cmp	r2, r3
   257c0:	d35b      	bcc.n	2587a <bt_conn_recv+0x106>
	if (conn->rx->len > acl_total_len) {
   257c2:	d952      	bls.n	2586a <bt_conn_recv+0xf6>
   257c4:	492d      	ldr	r1, [pc, #180]	; (2587c <bt_conn_recv+0x108>)
   257c6:	482e      	ldr	r0, [pc, #184]	; (25880 <bt_conn_recv+0x10c>)
   257c8:	1a40      	subs	r0, r0, r1
   257ca:	08c0      	lsrs	r0, r0, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   257cc:	0180      	lsls	r0, r0, #6
   257ce:	f040 0001 	orr.w	r0, r0, #1
   257d2:	492d      	ldr	r1, [pc, #180]	; (25888 <bt_conn_recv+0x114>)
   257d4:	f011 fe5c 	bl	37490 <log_string_sync>
		bt_conn_reset_rx_state(conn);
   257d8:	4620      	mov	r0, r4
}
   257da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   257de:	f012 bef6 	b.w	385ce <bt_conn_reset_rx_state>
		if (!conn->rx) {
   257e2:	6920      	ldr	r0, [r4, #16]
   257e4:	b968      	cbnz	r0, 25802 <bt_conn_recv+0x8e>
   257e6:	4826      	ldr	r0, [pc, #152]	; (25880 <bt_conn_recv+0x10c>)
   257e8:	4b24      	ldr	r3, [pc, #144]	; (2587c <bt_conn_recv+0x108>)
			BT_ERR("Unexpected L2CAP continuation");
   257ea:	4928      	ldr	r1, [pc, #160]	; (2588c <bt_conn_recv+0x118>)
   257ec:	1ac0      	subs	r0, r0, r3
   257ee:	08c0      	lsrs	r0, r0, #3
   257f0:	0180      	lsls	r0, r0, #6
   257f2:	f040 0001 	orr.w	r0, r0, #1
   257f6:	f011 fe4b 	bl	37490 <log_string_sync>
		bt_conn_reset_rx_state(conn);
   257fa:	4620      	mov	r0, r4
   257fc:	f012 fee7 	bl	385ce <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   25800:	e001      	b.n	25806 <bt_conn_recv+0x92>
		if (!buf->len) {
   25802:	89ae      	ldrh	r6, [r5, #12]
   25804:	b926      	cbnz	r6, 25810 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   25806:	4628      	mov	r0, r5
}
   25808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   2580c:	f004 bae2 	b.w	29dd4 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   25810:	3008      	adds	r0, #8
   25812:	f013 ff75 	bl	39700 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   25816:	4286      	cmp	r6, r0
   25818:	d911      	bls.n	2583e <bt_conn_recv+0xca>
   2581a:	4b18      	ldr	r3, [pc, #96]	; (2587c <bt_conn_recv+0x108>)
   2581c:	4818      	ldr	r0, [pc, #96]	; (25880 <bt_conn_recv+0x10c>)
			BT_ERR("Not enough buffer space for L2CAP data");
   2581e:	491c      	ldr	r1, [pc, #112]	; (25890 <bt_conn_recv+0x11c>)
   25820:	1ac0      	subs	r0, r0, r3
   25822:	08c0      	lsrs	r0, r0, #3
   25824:	0180      	lsls	r0, r0, #6
   25826:	f040 0001 	orr.w	r0, r0, #1
   2582a:	f011 fe31 	bl	37490 <log_string_sync>
			bt_l2cap_recv(conn, conn->rx, false);
   2582e:	6921      	ldr	r1, [r4, #16]
   25830:	2200      	movs	r2, #0
   25832:	4620      	mov	r0, r4
   25834:	f000 fed6 	bl	265e4 <bt_l2cap_recv>
			conn->rx = NULL;
   25838:	2300      	movs	r3, #0
   2583a:	6123      	str	r3, [r4, #16]
   2583c:	e7e3      	b.n	25806 <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2583e:	6920      	ldr	r0, [r4, #16]
   25840:	89aa      	ldrh	r2, [r5, #12]
   25842:	68a9      	ldr	r1, [r5, #8]
   25844:	3008      	adds	r0, #8
   25846:	f013 ff63 	bl	39710 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   2584a:	4628      	mov	r0, r5
   2584c:	f004 fac2 	bl	29dd4 <net_buf_unref>
		break;
   25850:	e7aa      	b.n	257a8 <bt_conn_recv+0x34>
   25852:	4b0a      	ldr	r3, [pc, #40]	; (2587c <bt_conn_recv+0x108>)
   25854:	480a      	ldr	r0, [pc, #40]	; (25880 <bt_conn_recv+0x10c>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   25856:	490f      	ldr	r1, [pc, #60]	; (25894 <bt_conn_recv+0x120>)
   25858:	1ac0      	subs	r0, r0, r3
   2585a:	08c0      	lsrs	r0, r0, #3
   2585c:	0180      	lsls	r0, r0, #6
   2585e:	4632      	mov	r2, r6
   25860:	f040 0001 	orr.w	r0, r0, #1
   25864:	f011 fe14 	bl	37490 <log_string_sync>
   25868:	e7c7      	b.n	257fa <bt_conn_recv+0x86>
	conn->rx = NULL;
   2586a:	2300      	movs	r3, #0
   2586c:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   2586e:	4620      	mov	r0, r4
   25870:	2201      	movs	r2, #1
}
   25872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   25876:	f000 beb5 	b.w	265e4 <bt_l2cap_recv>
}
   2587a:	bd70      	pop	{r4, r5, r6, pc}
   2587c:	0003b448 	.word	0x0003b448
   25880:	0003b470 	.word	0x0003b470
   25884:	0003e74f 	.word	0x0003e74f
   25888:	0003e7cf 	.word	0x0003e7cf
   2588c:	0003e76c 	.word	0x0003e76c
   25890:	0003e78a 	.word	0x0003e78a
   25894:	0003e7b1 	.word	0x0003e7b1

00025898 <bt_conn_send_cb>:
{
   25898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2589c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   2589e:	7a83      	ldrb	r3, [r0, #10]
   258a0:	2b07      	cmp	r3, #7
{
   258a2:	4605      	mov	r5, r0
   258a4:	460e      	mov	r6, r1
   258a6:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   258a8:	d00c      	beq.n	258c4 <bt_conn_send_cb+0x2c>
   258aa:	4826      	ldr	r0, [pc, #152]	; (25944 <bt_conn_send_cb+0xac>)
   258ac:	4b26      	ldr	r3, [pc, #152]	; (25948 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   258ae:	4927      	ldr	r1, [pc, #156]	; (2594c <bt_conn_send_cb+0xb4>)
   258b0:	1ac0      	subs	r0, r0, r3
   258b2:	08c0      	lsrs	r0, r0, #3
   258b4:	0180      	lsls	r0, r0, #6
   258b6:	f040 0001 	orr.w	r0, r0, #1
   258ba:	f011 fde9 	bl	37490 <log_string_sync>
			return -ENOTCONN;
   258be:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   258c2:	e01d      	b.n	25900 <bt_conn_send_cb+0x68>
	if (cb) {
   258c4:	2a00      	cmp	r2, #0
   258c6:	d03a      	beq.n	2593e <bt_conn_send_cb+0xa6>
	return z_impl_z_current_get();
   258c8:	f00c fa2a 	bl	31d20 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   258cc:	4b20      	ldr	r3, [pc, #128]	; (25950 <bt_conn_send_cb+0xb8>)
   258ce:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   258d0:	4820      	ldr	r0, [pc, #128]	; (25954 <bt_conn_send_cb+0xbc>)
   258d2:	bf07      	ittee	eq
   258d4:	2200      	moveq	r2, #0
   258d6:	2300      	moveq	r3, #0
   258d8:	f04f 32ff 	movne.w	r2, #4294967295
   258dc:	f04f 33ff 	movne.w	r3, #4294967295
   258e0:	f00a fa82 	bl	2fde8 <z_impl_k_queue_get>
   258e4:	4604      	mov	r4, r0
		if (!tx) {
   258e6:	b968      	cbnz	r0, 25904 <bt_conn_send_cb+0x6c>
   258e8:	4b17      	ldr	r3, [pc, #92]	; (25948 <bt_conn_send_cb+0xb0>)
   258ea:	4816      	ldr	r0, [pc, #88]	; (25944 <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   258ec:	491a      	ldr	r1, [pc, #104]	; (25958 <bt_conn_send_cb+0xc0>)
   258ee:	1ac0      	subs	r0, r0, r3
   258f0:	08c0      	lsrs	r0, r0, #3
   258f2:	0180      	lsls	r0, r0, #6
   258f4:	f040 0001 	orr.w	r0, r0, #1
   258f8:	f011 fdca 	bl	37490 <log_string_sync>
			return -ENOBUFS;
   258fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   25900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   25904:	7aab      	ldrb	r3, [r5, #10]
   25906:	2b07      	cmp	r3, #7
   25908:	d00d      	beq.n	25926 <bt_conn_send_cb+0x8e>
   2590a:	4b0f      	ldr	r3, [pc, #60]	; (25948 <bt_conn_send_cb+0xb0>)
   2590c:	480d      	ldr	r0, [pc, #52]	; (25944 <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   2590e:	4913      	ldr	r1, [pc, #76]	; (2595c <bt_conn_send_cb+0xc4>)
   25910:	1ac0      	subs	r0, r0, r3
   25912:	08c0      	lsrs	r0, r0, #3
   25914:	0180      	lsls	r0, r0, #6
   25916:	f040 0002 	orr.w	r0, r0, #2
   2591a:	f011 fdb9 	bl	37490 <log_string_sync>
			tx_free(tx);
   2591e:	4620      	mov	r0, r4
   25920:	f7ff fda8 	bl	25474 <tx_free>
   25924:	e7cb      	b.n	258be <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   25926:	2300      	movs	r3, #0
		tx->user_data = user_data;
   25928:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   2592c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   2592e:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   25930:	f105 0038 	add.w	r0, r5, #56	; 0x38
   25934:	4631      	mov	r1, r6
   25936:	f004 fa19 	bl	29d6c <net_buf_put>
	return 0;
   2593a:	2000      	movs	r0, #0
   2593c:	e7e0      	b.n	25900 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   2593e:	614a      	str	r2, [r1, #20]
   25940:	e7f6      	b.n	25930 <bt_conn_send_cb+0x98>
   25942:	bf00      	nop
   25944:	0003b470 	.word	0x0003b470
   25948:	0003b448 	.word	0x0003b448
   2594c:	0003e7ea 	.word	0x0003e7ea
   25950:	20002138 	.word	0x20002138
   25954:	20000c98 	.word	0x20000c98
   25958:	0003e7f9 	.word	0x0003e7f9
   2595c:	0003e817 	.word	0x0003e817

00025960 <bt_conn_prepare_events>:
{
   25960:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   25962:	4b1b      	ldr	r3, [pc, #108]	; (259d0 <bt_conn_prepare_events+0x70>)
   25964:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   25966:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   25968:	609a      	str	r2, [r3, #8]
{
   2596a:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2596c:	f00d f9c6 	bl	32cfc <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25970:	f3bf 8f5b 	dmb	ish
   25974:	4b17      	ldr	r3, [pc, #92]	; (259d4 <bt_conn_prepare_events+0x74>)
   25976:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   2597a:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2597e:	f104 0014 	add.w	r0, r4, #20
   25982:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   25984:	b90a      	cbnz	r2, 2598a <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   25986:	2001      	movs	r0, #1
}
   25988:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2598a:	7a9a      	ldrb	r2, [r3, #10]
   2598c:	b99a      	cbnz	r2, 259b6 <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2598e:	f3bf 8f5b 	dmb	ish
   25992:	1d1a      	adds	r2, r3, #4
   25994:	e852 5f00 	ldrex	r5, [r2]
   25998:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   2599c:	e842 ce00 	strex	lr, ip, [r2]
   259a0:	f1be 0f00 	cmp.w	lr, #0
   259a4:	d1f6      	bne.n	25994 <bt_conn_prepare_events+0x34>
   259a6:	f3bf 8f5b 	dmb	ish
   259aa:	066a      	lsls	r2, r5, #25
   259ac:	d503      	bpl.n	259b6 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   259ae:	4618      	mov	r0, r3
   259b0:	f7ff fe98 	bl	256e4 <conn_cleanup>
   259b4:	e7e7      	b.n	25986 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   259b6:	7a8b      	ldrb	r3, [r1, #10]
   259b8:	2b07      	cmp	r3, #7
   259ba:	d1e4      	bne.n	25986 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   259bc:	4b06      	ldr	r3, [pc, #24]	; (259d8 <bt_conn_prepare_events+0x78>)
   259be:	2200      	movs	r2, #0
   259c0:	2104      	movs	r1, #4
   259c2:	f00d f99b 	bl	32cfc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   259c6:	2301      	movs	r3, #1
   259c8:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   259cc:	2002      	movs	r0, #2
	return ev_count;
   259ce:	e7db      	b.n	25988 <bt_conn_prepare_events+0x28>
   259d0:	200005d4 	.word	0x200005d4
   259d4:	20001b30 	.word	0x20001b30
   259d8:	20001b68 	.word	0x20001b68

000259dc <bt_conn_unref>:
{
   259dc:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   259de:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
{
   259e2:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   259e4:	f3bf 8f5b 	dmb	ish
   259e8:	e853 2f00 	ldrex	r2, [r3]
   259ec:	1e51      	subs	r1, r2, #1
   259ee:	e843 1000 	strex	r0, r1, [r3]
   259f2:	2800      	cmp	r0, #0
   259f4:	d1f8      	bne.n	259e8 <bt_conn_unref+0xc>
   259f6:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   259fa:	2a00      	cmp	r2, #0
   259fc:	dc0e      	bgt.n	25a1c <bt_conn_unref+0x40>
   259fe:	490f      	ldr	r1, [pc, #60]	; (25a3c <bt_conn_unref+0x60>)
   25a00:	4a0f      	ldr	r2, [pc, #60]	; (25a40 <bt_conn_unref+0x64>)
   25a02:	4810      	ldr	r0, [pc, #64]	; (25a44 <bt_conn_unref+0x68>)
   25a04:	f240 434e 	movw	r3, #1102	; 0x44e
   25a08:	f011 fb87 	bl	3711a <printk>
   25a0c:	480e      	ldr	r0, [pc, #56]	; (25a48 <bt_conn_unref+0x6c>)
   25a0e:	f011 fb84 	bl	3711a <printk>
   25a12:	480b      	ldr	r0, [pc, #44]	; (25a40 <bt_conn_unref+0x64>)
   25a14:	f240 414e 	movw	r1, #1102	; 0x44e
   25a18:	f011 fd25 	bl	37466 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   25a1c:	78a3      	ldrb	r3, [r4, #2]
   25a1e:	2b01      	cmp	r3, #1
   25a20:	d10a      	bne.n	25a38 <bt_conn_unref+0x5c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25a22:	f3bf 8f5b 	dmb	ish
   25a26:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   25a2a:	f3bf 8f5b 	dmb	ish
   25a2e:	b91b      	cbnz	r3, 25a38 <bt_conn_unref+0x5c>
}
   25a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   25a34:	f7ff bcde 	b.w	253f4 <bt_le_adv_resume>
}
   25a38:	bd10      	pop	{r4, pc}
   25a3a:	bf00      	nop
   25a3c:	0003e83d 	.word	0x0003e83d
   25a40:	0003e69d 	.word	0x0003e69d
   25a44:	0003c48a 	.word	0x0003c48a
   25a48:	0003e845 	.word	0x0003e845

00025a4c <bt_conn_lookup_handle>:
{
   25a4c:	4602      	mov	r2, r0
   25a4e:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   25a50:	2101      	movs	r1, #1
   25a52:	4803      	ldr	r0, [pc, #12]	; (25a60 <bt_conn_lookup_handle+0x14>)
   25a54:	f012 fddf 	bl	38616 <conn_lookup_handle>
}
   25a58:	2800      	cmp	r0, #0
   25a5a:	bf38      	it	cc
   25a5c:	2000      	movcc	r0, #0
   25a5e:	bd08      	pop	{r3, pc}
   25a60:	20001b30 	.word	0x20001b30

00025a64 <bt_conn_set_state>:
{
   25a64:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   25a66:	7a86      	ldrb	r6, [r0, #10]
   25a68:	428e      	cmp	r6, r1
{
   25a6a:	4604      	mov	r4, r0
   25a6c:	460d      	mov	r5, r1
	if (conn->state == state) {
   25a6e:	d112      	bne.n	25a96 <bt_conn_set_state+0x32>
   25a70:	4b65      	ldr	r3, [pc, #404]	; (25c08 <bt_conn_set_state+0x1a4>)
   25a72:	4866      	ldr	r0, [pc, #408]	; (25c0c <bt_conn_set_state+0x1a8>)
		BT_WARN("no transition %s", state2str(state));
   25a74:	4966      	ldr	r1, [pc, #408]	; (25c10 <bt_conn_set_state+0x1ac>)
   25a76:	2e08      	cmp	r6, #8
   25a78:	eba0 0003 	sub.w	r0, r0, r3
   25a7c:	bf96      	itet	ls
   25a7e:	4b65      	ldrls	r3, [pc, #404]	; (25c14 <bt_conn_set_state+0x1b0>)
   25a80:	4a65      	ldrhi	r2, [pc, #404]	; (25c18 <bt_conn_set_state+0x1b4>)
   25a82:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
   25a86:	08c0      	lsrs	r0, r0, #3
   25a88:	0180      	lsls	r0, r0, #6
   25a8a:	f040 0002 	orr.w	r0, r0, #2
}
   25a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   25a92:	f011 bcfd 	b.w	37490 <log_string_sync>
	conn->state = state;
   25a96:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   25a98:	b926      	cbnz	r6, 25aa4 <bt_conn_set_state+0x40>
		if (conn->type != BT_CONN_TYPE_ISO) {
   25a9a:	7883      	ldrb	r3, [r0, #2]
   25a9c:	2b08      	cmp	r3, #8
   25a9e:	d001      	beq.n	25aa4 <bt_conn_set_state+0x40>
			bt_conn_ref(conn);
   25aa0:	f012 fd9e 	bl	385e0 <bt_conn_ref>
	switch (conn->state) {
   25aa4:	7aa3      	ldrb	r3, [r4, #10]
   25aa6:	2b08      	cmp	r3, #8
   25aa8:	f200 80a5 	bhi.w	25bf6 <bt_conn_set_state+0x192>
   25aac:	e8df f003 	tbb	[pc, r3]
   25ab0:	abab0537 	.word	0xabab0537
   25ab4:	1cababab 	.word	0x1cababab
   25ab8:	ab          	.byte	0xab
   25ab9:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   25aba:	4d58      	ldr	r5, [pc, #352]	; (25c1c <bt_conn_set_state+0x1b8>)
		tx->pending_no_cb = 0U;
   25abc:	2600      	movs	r6, #0
	__asm__ volatile(
   25abe:	f04f 0340 	mov.w	r3, #64	; 0x40
   25ac2:	f3ef 8211 	mrs	r2, BASEPRI
   25ac6:	f383 8812 	msr	BASEPRI_MAX, r3
   25aca:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   25ace:	69e3      	ldr	r3, [r4, #28]
   25ad0:	2b00      	cmp	r3, #0
   25ad2:	d071      	beq.n	25bb8 <bt_conn_set_state+0x154>
			conn->pending_no_cb--;
   25ad4:	3b01      	subs	r3, #1
   25ad6:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   25ad8:	f382 8811 	msr	BASEPRI, r2
   25adc:	f3bf 8f6f 	isb	sy
   25ae0:	4628      	mov	r0, r5
   25ae2:	f00a f9ed 	bl	2fec0 <z_impl_k_sem_give>
}
   25ae6:	e7ea      	b.n	25abe <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   25ae8:	78a3      	ldrb	r3, [r4, #2]
   25aea:	2b04      	cmp	r3, #4
   25aec:	f000 808b 	beq.w	25c06 <bt_conn_set_state+0x1a2>
	z_impl_k_queue_init(queue);
   25af0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   25af4:	f014 fb9b 	bl	3a22e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   25af8:	4849      	ldr	r0, [pc, #292]	; (25c20 <bt_conn_set_state+0x1bc>)
   25afa:	2100      	movs	r1, #0
   25afc:	f00d fa5a 	bl	32fb4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   25b00:	2300      	movs	r3, #0
	list->tail = NULL;
   25b02:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   25b06:	78e3      	ldrb	r3, [r4, #3]
   25b08:	2b01      	cmp	r3, #1
   25b0a:	d17c      	bne.n	25c06 <bt_conn_set_state+0x1a2>
			k_work_schedule(&conn->deferred_work,
   25b0c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   25b10:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   25b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   25b18:	2300      	movs	r3, #0
   25b1a:	f00a be91 	b.w	30840 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   25b1e:	78a3      	ldrb	r3, [r4, #2]
   25b20:	2b04      	cmp	r3, #4
   25b22:	d104      	bne.n	25b2e <bt_conn_set_state+0xca>
			bt_conn_unref(conn);
   25b24:	4620      	mov	r0, r4
}
   25b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   25b2a:	f7ff bf57 	b.w	259dc <bt_conn_unref>
		switch (old_state) {
   25b2e:	2e08      	cmp	r6, #8
   25b30:	d869      	bhi.n	25c06 <bt_conn_set_state+0x1a2>
   25b32:	a301      	add	r3, pc, #4	; (adr r3, 25b38 <bt_conn_set_state+0xd4>)
   25b34:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   25b38:	00025ba5 	.word	0x00025ba5
   25b3c:	00025b5d 	.word	0x00025b5d
   25b40:	00025b97 	.word	0x00025b97
   25b44:	00025b25 	.word	0x00025b25
   25b48:	00025b25 	.word	0x00025b25
   25b4c:	00025b97 	.word	0x00025b97
   25b50:	00025b97 	.word	0x00025b97
   25b54:	00025ba5 	.word	0x00025ba5
   25b58:	00025ba5 	.word	0x00025ba5
			tx_notify(conn);
   25b5c:	4620      	mov	r0, r4
   25b5e:	f012 fd10 	bl	38582 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   25b62:	78a3      	ldrb	r3, [r4, #2]
   25b64:	2b01      	cmp	r3, #1
   25b66:	d103      	bne.n	25b70 <bt_conn_set_state+0x10c>
				k_work_cancel_delayable(&conn->deferred_work);
   25b68:	f104 0060 	add.w	r0, r4, #96	; 0x60
   25b6c:	f00a feea 	bl	30944 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25b70:	f3bf 8f5b 	dmb	ish
   25b74:	3404      	adds	r4, #4
   25b76:	e854 3f00 	ldrex	r3, [r4]
   25b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25b7e:	e844 3200 	strex	r2, r3, [r4]
   25b82:	2a00      	cmp	r2, #0
   25b84:	d1f7      	bne.n	25b76 <bt_conn_set_state+0x112>
   25b86:	f3bf 8f5b 	dmb	ish
   25b8a:	4825      	ldr	r0, [pc, #148]	; (25c20 <bt_conn_set_state+0x1bc>)
}
   25b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25b90:	2100      	movs	r1, #0
   25b92:	f00d ba0f 	b.w	32fb4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   25b96:	7a63      	ldrb	r3, [r4, #9]
   25b98:	2b00      	cmp	r3, #0
   25b9a:	d0c3      	beq.n	25b24 <bt_conn_set_state+0xc0>
				notify_connected(conn);
   25b9c:	4620      	mov	r0, r4
   25b9e:	f7ff fc73 	bl	25488 <notify_connected>
   25ba2:	e7bf      	b.n	25b24 <bt_conn_set_state+0xc0>
   25ba4:	4819      	ldr	r0, [pc, #100]	; (25c0c <bt_conn_set_state+0x1a8>)
   25ba6:	4b18      	ldr	r3, [pc, #96]	; (25c08 <bt_conn_set_state+0x1a4>)
			BT_WARN("Invalid (%u) old state", state);
   25ba8:	491e      	ldr	r1, [pc, #120]	; (25c24 <bt_conn_set_state+0x1c0>)
   25baa:	1ac0      	subs	r0, r0, r3
   25bac:	08c0      	lsrs	r0, r0, #3
   25bae:	0180      	lsls	r0, r0, #6
   25bb0:	462a      	mov	r2, r5
		BT_WARN("no valid (%u) state was set", state);
   25bb2:	f040 0002 	orr.w	r0, r0, #2
   25bb6:	e76a      	b.n	25a8e <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
   25bb8:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   25bba:	b128      	cbz	r0, 25bc8 <bt_conn_set_state+0x164>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25bbc:	69a1      	ldr	r1, [r4, #24]
   25bbe:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   25bc0:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25bc2:	4288      	cmp	r0, r1
	list->tail = node;
   25bc4:	bf08      	it	eq
   25bc6:	61a3      	streq	r3, [r4, #24]
   25bc8:	f382 8811 	msr	BASEPRI, r2
   25bcc:	f3bf 8f6f 	isb	sy
		if (!node) {
   25bd0:	b1c8      	cbz	r0, 25c06 <bt_conn_set_state+0x1a2>
	__asm__ volatile(
   25bd2:	f04f 0240 	mov.w	r2, #64	; 0x40
   25bd6:	f3ef 8311 	mrs	r3, BASEPRI
   25bda:	f382 8812 	msr	BASEPRI_MAX, r2
   25bde:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   25be2:	68c2      	ldr	r2, [r0, #12]
   25be4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   25be6:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   25be8:	f383 8811 	msr	BASEPRI, r3
   25bec:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   25bf0:	f7ff fc40 	bl	25474 <tx_free>
   25bf4:	e774      	b.n	25ae0 <bt_conn_set_state+0x7c>
   25bf6:	4805      	ldr	r0, [pc, #20]	; (25c0c <bt_conn_set_state+0x1a8>)
   25bf8:	4b03      	ldr	r3, [pc, #12]	; (25c08 <bt_conn_set_state+0x1a4>)
		BT_WARN("no valid (%u) state was set", state);
   25bfa:	490b      	ldr	r1, [pc, #44]	; (25c28 <bt_conn_set_state+0x1c4>)
   25bfc:	1ac0      	subs	r0, r0, r3
   25bfe:	08c0      	lsrs	r0, r0, #3
   25c00:	0180      	lsls	r0, r0, #6
   25c02:	462a      	mov	r2, r5
   25c04:	e7d5      	b.n	25bb2 <bt_conn_set_state+0x14e>
}
   25c06:	bd70      	pop	{r4, r5, r6, pc}
   25c08:	0003b448 	.word	0x0003b448
   25c0c:	0003b470 	.word	0x0003b470
   25c10:	0003e86d 	.word	0x0003e86d
   25c14:	0003b9e8 	.word	0x0003b9e8
   25c18:	0003e863 	.word	0x0003e863
   25c1c:	200003b0 	.word	0x200003b0
   25c20:	200005d4 	.word	0x200005d4
   25c24:	0003e87e 	.word	0x0003e87e
   25c28:	0003e895 	.word	0x0003e895

00025c2c <bt_conn_index>:
		index = conn - acl_conns;
   25c2c:	4a0c      	ldr	r2, [pc, #48]	; (25c60 <bt_conn_index+0x34>)
{
   25c2e:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   25c30:	1a84      	subs	r4, r0, r2
   25c32:	1123      	asrs	r3, r4, #4
   25c34:	4c0b      	ldr	r4, [pc, #44]	; (25c64 <bt_conn_index+0x38>)
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   25c36:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   25c38:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   25c3c:	d00e      	beq.n	25c5c <bt_conn_index+0x30>
   25c3e:	490a      	ldr	r1, [pc, #40]	; (25c68 <bt_conn_index+0x3c>)
   25c40:	4a0a      	ldr	r2, [pc, #40]	; (25c6c <bt_conn_index+0x40>)
   25c42:	480b      	ldr	r0, [pc, #44]	; (25c70 <bt_conn_index+0x44>)
   25c44:	f240 436c 	movw	r3, #1132	; 0x46c
   25c48:	f011 fa67 	bl	3711a <printk>
   25c4c:	4809      	ldr	r0, [pc, #36]	; (25c74 <bt_conn_index+0x48>)
   25c4e:	f011 fa64 	bl	3711a <printk>
   25c52:	4806      	ldr	r0, [pc, #24]	; (25c6c <bt_conn_index+0x40>)
   25c54:	f240 416c 	movw	r1, #1132	; 0x46c
   25c58:	f011 fc05 	bl	37466 <assert_post_action>
}
   25c5c:	b2e0      	uxtb	r0, r4
   25c5e:	bd10      	pop	{r4, pc}
   25c60:	20001b30 	.word	0x20001b30
   25c64:	c4ec4ec5 	.word	0xc4ec4ec5
   25c68:	0003e8b1 	.word	0x0003e8b1
   25c6c:	0003e69d 	.word	0x0003e69d
   25c70:	0003c48a 	.word	0x0003c48a
   25c74:	0003e978 	.word	0x0003e978

00025c78 <bt_conn_create_pdu_timeout>:
{
   25c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25c7a:	4604      	mov	r4, r0
   25c7c:	460d      	mov	r5, r1
   25c7e:	4617      	mov	r7, r2
   25c80:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   25c82:	f014 faad 	bl	3a1e0 <k_is_in_isr>
   25c86:	b158      	cbz	r0, 25ca0 <bt_conn_create_pdu_timeout+0x28>
   25c88:	4913      	ldr	r1, [pc, #76]	; (25cd8 <bt_conn_create_pdu_timeout+0x60>)
   25c8a:	4814      	ldr	r0, [pc, #80]	; (25cdc <bt_conn_create_pdu_timeout+0x64>)
   25c8c:	4a14      	ldr	r2, [pc, #80]	; (25ce0 <bt_conn_create_pdu_timeout+0x68>)
   25c8e:	f44f 6391 	mov.w	r3, #1160	; 0x488
   25c92:	f011 fa42 	bl	3711a <printk>
   25c96:	4812      	ldr	r0, [pc, #72]	; (25ce0 <bt_conn_create_pdu_timeout+0x68>)
   25c98:	f44f 6191 	mov.w	r1, #1160	; 0x488
   25c9c:	f011 fbe3 	bl	37466 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   25ca0:	4810      	ldr	r0, [pc, #64]	; (25ce4 <bt_conn_create_pdu_timeout+0x6c>)
   25ca2:	463a      	mov	r2, r7
   25ca4:	2c00      	cmp	r4, #0
   25ca6:	bf18      	it	ne
   25ca8:	4620      	movne	r0, r4
   25caa:	4633      	mov	r3, r6
   25cac:	f013 fd11 	bl	396d2 <net_buf_alloc_fixed>
	if (!buf) {
   25cb0:	4604      	mov	r4, r0
   25cb2:	b958      	cbnz	r0, 25ccc <bt_conn_create_pdu_timeout+0x54>
   25cb4:	480c      	ldr	r0, [pc, #48]	; (25ce8 <bt_conn_create_pdu_timeout+0x70>)
   25cb6:	4b0d      	ldr	r3, [pc, #52]	; (25cec <bt_conn_create_pdu_timeout+0x74>)
		BT_WARN("Unable to allocate buffer within timeout");
   25cb8:	490d      	ldr	r1, [pc, #52]	; (25cf0 <bt_conn_create_pdu_timeout+0x78>)
   25cba:	1a1b      	subs	r3, r3, r0
   25cbc:	08db      	lsrs	r3, r3, #3
   25cbe:	019b      	lsls	r3, r3, #6
   25cc0:	f043 0002 	orr.w	r0, r3, #2
   25cc4:	f011 fbe4 	bl	37490 <log_string_sync>
}
   25cc8:	4620      	mov	r0, r4
   25cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   25ccc:	1d29      	adds	r1, r5, #4
   25cce:	3008      	adds	r0, #8
   25cd0:	f003 ff20 	bl	29b14 <net_buf_simple_reserve>
	return buf;
   25cd4:	e7f8      	b.n	25cc8 <bt_conn_create_pdu_timeout+0x50>
   25cd6:	bf00      	nop
   25cd8:	0003e992 	.word	0x0003e992
   25cdc:	0003c48a 	.word	0x0003c48a
   25ce0:	0003e69d 	.word	0x0003e69d
   25ce4:	20000cb4 	.word	0x20000cb4
   25ce8:	0003b448 	.word	0x0003b448
   25cec:	0003b470 	.word	0x0003b470
   25cf0:	0003e9a1 	.word	0x0003e9a1

00025cf4 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   25cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25cf8:	f3bf 8f5b 	dmb	ish
   25cfc:	6842      	ldr	r2, [r0, #4]
   25cfe:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   25d02:	0592      	lsls	r2, r2, #22
{
   25d04:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   25d06:	f100 0304 	add.w	r3, r0, #4
   25d0a:	d519      	bpl.n	25d40 <notify_le_param_updated+0x4c>
	    conn->le.interval >= conn->le.interval_min &&
   25d0c:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   25d10:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   25d14:	4291      	cmp	r1, r2
   25d16:	d813      	bhi.n	25d40 <notify_le_param_updated+0x4c>
	    conn->le.interval >= conn->le.interval_min &&
   25d18:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   25d1c:	4291      	cmp	r1, r2
   25d1e:	d30f      	bcc.n	25d40 <notify_le_param_updated+0x4c>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   25d20:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   25d24:	4291      	cmp	r1, r2
   25d26:	d10b      	bne.n	25d40 <notify_le_param_updated+0x4c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25d28:	f3bf 8f5b 	dmb	ish
   25d2c:	e853 2f00 	ldrex	r2, [r3]
   25d30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   25d34:	e843 2100 	strex	r1, r2, [r3]
   25d38:	2900      	cmp	r1, #0
   25d3a:	d1f7      	bne.n	25d2c <notify_le_param_updated+0x38>
   25d3c:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   25d40:	4b1b      	ldr	r3, [pc, #108]	; (25db0 <notify_le_param_updated+0xbc>)
   25d42:	681d      	ldr	r5, [r3, #0]
   25d44:	b9c5      	cbnz	r5, 25d78 <notify_le_param_updated+0x84>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   25d46:	4e1b      	ldr	r6, [pc, #108]	; (25db4 <notify_le_param_updated+0xc0>)
   25d48:	4d1b      	ldr	r5, [pc, #108]	; (25db8 <notify_le_param_updated+0xc4>)
   25d4a:	4f1c      	ldr	r7, [pc, #112]	; (25dbc <notify_le_param_updated+0xc8>)
   25d4c:	46b1      	mov	r9, r6
   25d4e:	42b5      	cmp	r5, r6
   25d50:	d90e      	bls.n	25d70 <notify_le_param_updated+0x7c>
   25d52:	491b      	ldr	r1, [pc, #108]	; (25dc0 <notify_le_param_updated+0xcc>)
   25d54:	481b      	ldr	r0, [pc, #108]	; (25dc4 <notify_le_param_updated+0xd0>)
   25d56:	f240 535f 	movw	r3, #1375	; 0x55f
   25d5a:	463a      	mov	r2, r7
   25d5c:	f011 f9dd 	bl	3711a <printk>
   25d60:	4819      	ldr	r0, [pc, #100]	; (25dc8 <notify_le_param_updated+0xd4>)
   25d62:	f011 f9da 	bl	3711a <printk>
   25d66:	f240 515f 	movw	r1, #1375	; 0x55f
   25d6a:	4638      	mov	r0, r7
   25d6c:	f011 fb7b 	bl	37466 <assert_post_action>
   25d70:	454d      	cmp	r5, r9
   25d72:	d30d      	bcc.n	25d90 <notify_le_param_updated+0x9c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   25d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->le_param_updated) {
   25d78:	68ee      	ldr	r6, [r5, #12]
   25d7a:	b13e      	cbz	r6, 25d8c <notify_le_param_updated+0x98>
			cb->le_param_updated(conn, conn->le.interval,
   25d7c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   25d80:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   25d84:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   25d88:	4620      	mov	r0, r4
   25d8a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   25d8c:	696d      	ldr	r5, [r5, #20]
   25d8e:	e7d9      	b.n	25d44 <notify_le_param_updated+0x50>
		if (cb->le_param_updated) {
   25d90:	f8d5 800c 	ldr.w	r8, [r5, #12]
   25d94:	f1b8 0f00 	cmp.w	r8, #0
   25d98:	d007      	beq.n	25daa <notify_le_param_updated+0xb6>
			cb->le_param_updated(conn, conn->le.interval,
   25d9a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   25d9e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   25da2:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   25da6:	4620      	mov	r0, r4
   25da8:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   25daa:	3518      	adds	r5, #24
   25dac:	e7cf      	b.n	25d4e <notify_le_param_updated+0x5a>
   25dae:	bf00      	nop
   25db0:	20002990 	.word	0x20002990
   25db4:	0003b3cc 	.word	0x0003b3cc
   25db8:	0003b3cc 	.word	0x0003b3cc
   25dbc:	0003e69d 	.word	0x0003e69d
   25dc0:	0003e6cd 	.word	0x0003e6cd
   25dc4:	0003c48a 	.word	0x0003c48a
   25dc8:	0003d403 	.word	0x0003d403

00025dcc <notify_le_data_len_updated>:
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
void notify_le_data_len_updated(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   25dcc:	4b17      	ldr	r3, [pc, #92]	; (25e2c <notify_le_data_len_updated+0x60>)
{
   25dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   25dd2:	681d      	ldr	r5, [r3, #0]
{
   25dd4:	4604      	mov	r4, r0
		if (cb->le_data_len_updated) {
			cb->le_data_len_updated(conn, &conn->le.data_len);
   25dd6:	f100 06c0 	add.w	r6, r0, #192	; 0xc0
	for (cb = callback_list; cb; cb = cb->_next) {
   25dda:	b9c5      	cbnz	r5, 25e0e <notify_le_data_len_updated+0x42>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   25ddc:	4e14      	ldr	r6, [pc, #80]	; (25e30 <notify_le_data_len_updated+0x64>)
   25dde:	4d15      	ldr	r5, [pc, #84]	; (25e34 <notify_le_data_len_updated+0x68>)
   25de0:	4f15      	ldr	r7, [pc, #84]	; (25e38 <notify_le_data_len_updated+0x6c>)
   25de2:	46b0      	mov	r8, r6
   25de4:	42b5      	cmp	r5, r6
   25de6:	d90e      	bls.n	25e06 <notify_le_data_len_updated+0x3a>
   25de8:	4914      	ldr	r1, [pc, #80]	; (25e3c <notify_le_data_len_updated+0x70>)
   25dea:	4815      	ldr	r0, [pc, #84]	; (25e40 <notify_le_data_len_updated+0x74>)
   25dec:	f240 5373 	movw	r3, #1395	; 0x573
   25df0:	463a      	mov	r2, r7
   25df2:	f011 f992 	bl	3711a <printk>
   25df6:	4813      	ldr	r0, [pc, #76]	; (25e44 <notify_le_data_len_updated+0x78>)
   25df8:	f011 f98f 	bl	3711a <printk>
   25dfc:	f240 5173 	movw	r1, #1395	; 0x573
   25e00:	4638      	mov	r0, r7
   25e02:	f011 fb30 	bl	37466 <assert_post_action>
   25e06:	4545      	cmp	r5, r8
   25e08:	d308      	bcc.n	25e1c <notify_le_data_len_updated+0x50>
		if (cb->le_data_len_updated) {
			cb->le_data_len_updated(conn, &conn->le.data_len);
		}
	}
}
   25e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->le_data_len_updated) {
   25e0e:	692b      	ldr	r3, [r5, #16]
   25e10:	b113      	cbz	r3, 25e18 <notify_le_data_len_updated+0x4c>
			cb->le_data_len_updated(conn, &conn->le.data_len);
   25e12:	4631      	mov	r1, r6
   25e14:	4620      	mov	r0, r4
   25e16:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   25e18:	696d      	ldr	r5, [r5, #20]
   25e1a:	e7de      	b.n	25dda <notify_le_data_len_updated+0xe>
		if (cb->le_data_len_updated) {
   25e1c:	692b      	ldr	r3, [r5, #16]
   25e1e:	b11b      	cbz	r3, 25e28 <notify_le_data_len_updated+0x5c>
			cb->le_data_len_updated(conn, &conn->le.data_len);
   25e20:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   25e24:	4620      	mov	r0, r4
   25e26:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   25e28:	3518      	adds	r5, #24
   25e2a:	e7db      	b.n	25de4 <notify_le_data_len_updated+0x18>
   25e2c:	20002990 	.word	0x20002990
   25e30:	0003b3cc 	.word	0x0003b3cc
   25e34:	0003b3cc 	.word	0x0003b3cc
   25e38:	0003e69d 	.word	0x0003e69d
   25e3c:	0003e6cd 	.word	0x0003e6cd
   25e40:	0003c48a 	.word	0x0003c48a
   25e44:	0003d403 	.word	0x0003d403

00025e48 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   25e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25e4c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   25e4e:	4608      	mov	r0, r1
{
   25e50:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   25e52:	f012 f9ff 	bl	38254 <bt_le_conn_params_valid>
   25e56:	4605      	mov	r5, r0
   25e58:	b918      	cbnz	r0, 25e62 <le_param_req+0x1a>
		return false;
   25e5a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   25e5c:	4628      	mov	r0, r5
   25e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   25e62:	4b1d      	ldr	r3, [pc, #116]	; (25ed8 <le_param_req+0x90>)
   25e64:	681e      	ldr	r6, [r3, #0]
   25e66:	b9e6      	cbnz	r6, 25ea2 <le_param_req+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   25e68:	f8df 8080 	ldr.w	r8, [pc, #128]	; 25eec <le_param_req+0xa4>
   25e6c:	4e1b      	ldr	r6, [pc, #108]	; (25edc <le_param_req+0x94>)
   25e6e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 25ef0 <le_param_req+0xa8>
   25e72:	46c2      	mov	sl, r8
   25e74:	4546      	cmp	r6, r8
   25e76:	d90e      	bls.n	25e96 <le_param_req+0x4e>
   25e78:	4919      	ldr	r1, [pc, #100]	; (25ee0 <le_param_req+0x98>)
   25e7a:	481a      	ldr	r0, [pc, #104]	; (25ee4 <le_param_req+0x9c>)
   25e7c:	f240 53a7 	movw	r3, #1447	; 0x5a7
   25e80:	464a      	mov	r2, r9
   25e82:	f011 f94a 	bl	3711a <printk>
   25e86:	4818      	ldr	r0, [pc, #96]	; (25ee8 <le_param_req+0xa0>)
   25e88:	f011 f947 	bl	3711a <printk>
   25e8c:	f240 51a7 	movw	r1, #1447	; 0x5a7
   25e90:	4648      	mov	r0, r9
   25e92:	f011 fae8 	bl	37466 <assert_post_action>
   25e96:	4556      	cmp	r6, sl
   25e98:	d2e0      	bcs.n	25e5c <le_param_req+0x14>
		if (!cb->le_param_req) {
   25e9a:	68b3      	ldr	r3, [r6, #8]
   25e9c:	b983      	cbnz	r3, 25ec0 <le_param_req+0x78>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   25e9e:	3618      	adds	r6, #24
   25ea0:	e7e8      	b.n	25e74 <le_param_req+0x2c>
		if (!cb->le_param_req) {
   25ea2:	68b3      	ldr	r3, [r6, #8]
   25ea4:	b90b      	cbnz	r3, 25eaa <le_param_req+0x62>
	for (cb = callback_list; cb; cb = cb->_next) {
   25ea6:	6976      	ldr	r6, [r6, #20]
   25ea8:	e7dd      	b.n	25e66 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   25eaa:	4621      	mov	r1, r4
   25eac:	4638      	mov	r0, r7
   25eae:	4798      	blx	r3
   25eb0:	2800      	cmp	r0, #0
   25eb2:	d0d2      	beq.n	25e5a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   25eb4:	4620      	mov	r0, r4
   25eb6:	f012 f9cd 	bl	38254 <bt_le_conn_params_valid>
   25eba:	2800      	cmp	r0, #0
   25ebc:	d1f3      	bne.n	25ea6 <le_param_req+0x5e>
   25ebe:	e7cc      	b.n	25e5a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   25ec0:	4621      	mov	r1, r4
   25ec2:	4638      	mov	r0, r7
   25ec4:	4798      	blx	r3
   25ec6:	2800      	cmp	r0, #0
   25ec8:	d0c7      	beq.n	25e5a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   25eca:	4620      	mov	r0, r4
   25ecc:	f012 f9c2 	bl	38254 <bt_le_conn_params_valid>
   25ed0:	2800      	cmp	r0, #0
   25ed2:	d1e4      	bne.n	25e9e <le_param_req+0x56>
   25ed4:	e7c1      	b.n	25e5a <le_param_req+0x12>
   25ed6:	bf00      	nop
   25ed8:	20002990 	.word	0x20002990
   25edc:	0003b3cc 	.word	0x0003b3cc
   25ee0:	0003e6cd 	.word	0x0003e6cd
   25ee4:	0003c48a 	.word	0x0003c48a
   25ee8:	0003d403 	.word	0x0003d403
   25eec:	0003b3cc 	.word	0x0003b3cc
   25ef0:	0003e69d 	.word	0x0003e69d

00025ef4 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   25ef4:	4b02      	ldr	r3, [pc, #8]	; (25f00 <bt_conn_cb_register+0xc>)
   25ef6:	681a      	ldr	r2, [r3, #0]
   25ef8:	6142      	str	r2, [r0, #20]
	callback_list = cb;
   25efa:	6018      	str	r0, [r3, #0]
}
   25efc:	4770      	bx	lr
   25efe:	bf00      	nop
   25f00:	20002990 	.word	0x20002990

00025f04 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   25f04:	b538      	push	{r3, r4, r5, lr}
   25f06:	4605      	mov	r5, r0
   25f08:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   25f0a:	480a      	ldr	r0, [pc, #40]	; (25f34 <bt_conn_add_le+0x30>)
   25f0c:	2101      	movs	r1, #1
   25f0e:	f7ff fbb5 	bl	2567c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   25f12:	b170      	cbz	r0, 25f32 <bt_conn_add_le+0x2e>
		return NULL;
	}

	conn->id = id;
   25f14:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25f16:	6823      	ldr	r3, [r4, #0]
   25f18:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   25f1c:	88a3      	ldrh	r3, [r4, #4]
   25f1e:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   25f22:	79a3      	ldrb	r3, [r4, #6]
   25f24:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   25f28:	2301      	movs	r3, #1
   25f2a:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   25f2c:	4b02      	ldr	r3, [pc, #8]	; (25f38 <bt_conn_add_le+0x34>)
   25f2e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   25f32:	bd38      	pop	{r3, r4, r5, pc}
   25f34:	20001b30 	.word	0x20001b30
   25f38:	00280018 	.word	0x00280018

00025f3c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   25f3c:	b570      	push	{r4, r5, r6, lr}
   25f3e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   25f40:	480c      	ldr	r0, [pc, #48]	; (25f74 <bt_conn_lookup_addr_le+0x38>)
{
   25f42:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   25f44:	f012 fb4c 	bl	385e0 <bt_conn_ref>

		if (!conn) {
   25f48:	4604      	mov	r4, r0
   25f4a:	b128      	cbz	r0, 25f58 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   25f4c:	7883      	ldrb	r3, [r0, #2]
   25f4e:	2b01      	cmp	r3, #1
   25f50:	d004      	beq.n	25f5c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   25f52:	f7ff fd43 	bl	259dc <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   25f56:	2400      	movs	r4, #0
}
   25f58:	4620      	mov	r0, r4
   25f5a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   25f5c:	4629      	mov	r1, r5
   25f5e:	4632      	mov	r2, r6
   25f60:	f012 fbaa 	bl	386b8 <bt_conn_is_peer_addr_le>
   25f64:	4605      	mov	r5, r0
   25f66:	2800      	cmp	r0, #0
   25f68:	d1f6      	bne.n	25f58 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   25f6a:	4620      	mov	r0, r4
   25f6c:	f7ff fd36 	bl	259dc <bt_conn_unref>
	return NULL;
   25f70:	462c      	mov	r4, r5
			continue;
   25f72:	e7f1      	b.n	25f58 <bt_conn_lookup_addr_le+0x1c>
   25f74:	20001b30 	.word	0x20001b30

00025f78 <bt_conn_exists_le>:
{
   25f78:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   25f7a:	f7ff ffdf 	bl	25f3c <bt_conn_lookup_addr_le>
	if (conn) {
   25f7e:	4604      	mov	r4, r0
   25f80:	b1a0      	cbz	r0, 25fac <bt_conn_exists_le+0x34>
   25f82:	4b0b      	ldr	r3, [pc, #44]	; (25fb0 <bt_conn_exists_le+0x38>)
   25f84:	480b      	ldr	r0, [pc, #44]	; (25fb4 <bt_conn_exists_le+0x3c>)
		BT_WARN("Found valid connection in %s state",
   25f86:	490c      	ldr	r1, [pc, #48]	; (25fb8 <bt_conn_exists_le+0x40>)
   25f88:	1ac0      	subs	r0, r0, r3
   25f8a:	7aa3      	ldrb	r3, [r4, #10]
   25f8c:	2b08      	cmp	r3, #8
   25f8e:	bf96      	itet	ls
   25f90:	4a0a      	ldrls	r2, [pc, #40]	; (25fbc <bt_conn_exists_le+0x44>)
   25f92:	4a0b      	ldrhi	r2, [pc, #44]	; (25fc0 <bt_conn_exists_le+0x48>)
   25f94:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   25f98:	08c0      	lsrs	r0, r0, #3
   25f9a:	0180      	lsls	r0, r0, #6
   25f9c:	f040 0002 	orr.w	r0, r0, #2
   25fa0:	f011 fa76 	bl	37490 <log_string_sync>
		bt_conn_unref(conn);
   25fa4:	4620      	mov	r0, r4
   25fa6:	f7ff fd19 	bl	259dc <bt_conn_unref>
		return true;
   25faa:	2001      	movs	r0, #1
}
   25fac:	bd10      	pop	{r4, pc}
   25fae:	bf00      	nop
   25fb0:	0003b448 	.word	0x0003b448
   25fb4:	0003b470 	.word	0x0003b470
   25fb8:	0003e9ca 	.word	0x0003e9ca
   25fbc:	0003b9e8 	.word	0x0003b9e8
   25fc0:	0003e863 	.word	0x0003e863

00025fc4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   25fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25fc6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   25fc8:	480e      	ldr	r0, [pc, #56]	; (26004 <bt_conn_lookup_state_le+0x40>)
{
   25fca:	460e      	mov	r6, r1
   25fcc:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   25fce:	f012 fb07 	bl	385e0 <bt_conn_ref>

		if (!conn) {
   25fd2:	4604      	mov	r4, r0
   25fd4:	b1a0      	cbz	r0, 26000 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   25fd6:	7883      	ldrb	r3, [r0, #2]
   25fd8:	2b01      	cmp	r3, #1
   25fda:	d003      	beq.n	25fe4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   25fdc:	f7ff fcfe 	bl	259dc <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   25fe0:	2400      	movs	r4, #0
			continue;
   25fe2:	e00d      	b.n	26000 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   25fe4:	b136      	cbz	r6, 25ff4 <bt_conn_lookup_state_le+0x30>
   25fe6:	4632      	mov	r2, r6
   25fe8:	4629      	mov	r1, r5
   25fea:	f012 fb65 	bl	386b8 <bt_conn_is_peer_addr_le>
   25fee:	b908      	cbnz	r0, 25ff4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   25ff0:	4620      	mov	r0, r4
   25ff2:	e7f3      	b.n	25fdc <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   25ff4:	7aa3      	ldrb	r3, [r4, #10]
   25ff6:	42bb      	cmp	r3, r7
   25ff8:	d1fa      	bne.n	25ff0 <bt_conn_lookup_state_le+0x2c>
   25ffa:	7a23      	ldrb	r3, [r4, #8]
   25ffc:	42ab      	cmp	r3, r5
   25ffe:	d1f7      	bne.n	25ff0 <bt_conn_lookup_state_le+0x2c>
}
   26000:	4620      	mov	r0, r4
   26002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26004:	20001b30 	.word	0x20001b30

00026008 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   26008:	b510      	push	{r4, lr}
	info->type = conn->type;
   2600a:	7882      	ldrb	r2, [r0, #2]
   2600c:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   2600e:	78c4      	ldrb	r4, [r0, #3]
   26010:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   26012:	7a03      	ldrb	r3, [r0, #8]
   26014:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   26016:	2a01      	cmp	r2, #1
   26018:	d11e      	bne.n	26058 <bt_conn_get_info+0x50>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   2601a:	f100 0290 	add.w	r2, r0, #144	; 0x90
   2601e:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   26020:	4a0f      	ldr	r2, [pc, #60]	; (26060 <bt_conn_get_info+0x58>)
   26022:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   26026:	4413      	add	r3, r2
   26028:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2602a:	f100 029e 	add.w	r2, r0, #158	; 0x9e
   2602e:	f100 0397 	add.w	r3, r0, #151	; 0x97
   26032:	b974      	cbnz	r4, 26052 <bt_conn_get_info+0x4a>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   26034:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   26038:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   2603c:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   2603e:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   26042:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
#if defined(CONFIG_BT_USER_PHY_UPDATE)
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
   26044:	30c0      	adds	r0, #192	; 0xc0
		info->le.timeout = conn->le.timeout;
   26046:	f830 3c12 	ldrh.w	r3, [r0, #-18]
   2604a:	830b      	strh	r3, [r1, #24]
		info->le.data_len = &conn->le.data_len;
   2604c:	61c8      	str	r0, [r1, #28]
#endif
		return 0;
   2604e:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   26050:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   26052:	e9c1 2303 	strd	r2, r3, [r1, #12]
   26056:	e7ef      	b.n	26038 <bt_conn_get_info+0x30>
	return -EINVAL;
   26058:	f06f 0015 	mvn.w	r0, #21
   2605c:	e7f8      	b.n	26050 <bt_conn_get_info+0x48>
   2605e:	bf00      	nop
   26060:	200002b0 	.word	0x200002b0

00026064 <send_conn_le_param_update>:
{
   26064:	b538      	push	{r3, r4, r5, lr}
   26066:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   26068:	4608      	mov	r0, r1
{
   2606a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   2606c:	f012 f8f2 	bl	38254 <bt_le_conn_params_valid>
   26070:	b348      	cbz	r0, 260c6 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   26072:	4b16      	ldr	r3, [pc, #88]	; (260cc <send_conn_le_param_update+0x68>)
   26074:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   26078:	0799      	lsls	r1, r3, #30
   2607a:	d407      	bmi.n	2608c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   2607c:	78e3      	ldrb	r3, [r4, #3]
   2607e:	b183      	cbz	r3, 260a2 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   26080:	4629      	mov	r1, r5
   26082:	4620      	mov	r0, r4
}
   26084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   26088:	f000 bae4 	b.w	26654 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2608c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   26090:	079a      	lsls	r2, r3, #30
   26092:	d5f3      	bpl.n	2607c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26094:	f3bf 8f5b 	dmb	ish
   26098:	6863      	ldr	r3, [r4, #4]
   2609a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   2609e:	055b      	lsls	r3, r3, #21
   260a0:	d4ec      	bmi.n	2607c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   260a2:	4629      	mov	r1, r5
   260a4:	4620      	mov	r0, r4
   260a6:	f012 fb29 	bl	386fc <bt_conn_le_conn_update>
		if (rc == 0) {
   260aa:	b958      	cbnz	r0, 260c4 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   260ac:	882b      	ldrh	r3, [r5, #0]
   260ae:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   260b2:	886b      	ldrh	r3, [r5, #2]
   260b4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   260b8:	88ab      	ldrh	r3, [r5, #4]
   260ba:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   260be:	88eb      	ldrh	r3, [r5, #6]
   260c0:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   260c4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   260c6:	f06f 0015 	mvn.w	r0, #21
   260ca:	e7fb      	b.n	260c4 <send_conn_le_param_update+0x60>
   260cc:	200002b0 	.word	0x200002b0

000260d0 <deferred_work>:
{
   260d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   260d4:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   260d8:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   260da:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   260de:	2b00      	cmp	r3, #0
   260e0:	d133      	bne.n	2614a <deferred_work+0x7a>
		bt_l2cap_disconnected(conn);
   260e2:	4628      	mov	r0, r5
   260e4:	f012 fbb8 	bl	38858 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   260e8:	4b2f      	ldr	r3, [pc, #188]	; (261a8 <deferred_work+0xd8>)
   260ea:	681e      	ldr	r6, [r3, #0]
   260ec:	b9ee      	cbnz	r6, 2612a <deferred_work+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   260ee:	4f2f      	ldr	r7, [pc, #188]	; (261ac <deferred_work+0xdc>)
   260f0:	4e2f      	ldr	r6, [pc, #188]	; (261b0 <deferred_work+0xe0>)
   260f2:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 261c4 <deferred_work+0xf4>
   260f6:	46b9      	mov	r9, r7
   260f8:	42be      	cmp	r6, r7
   260fa:	d90e      	bls.n	2611a <deferred_work+0x4a>
   260fc:	492d      	ldr	r1, [pc, #180]	; (261b4 <deferred_work+0xe4>)
   260fe:	482e      	ldr	r0, [pc, #184]	; (261b8 <deferred_work+0xe8>)
   26100:	f240 5326 	movw	r3, #1318	; 0x526
   26104:	4642      	mov	r2, r8
   26106:	f011 f808 	bl	3711a <printk>
   2610a:	482c      	ldr	r0, [pc, #176]	; (261bc <deferred_work+0xec>)
   2610c:	f011 f805 	bl	3711a <printk>
   26110:	f240 5126 	movw	r1, #1318	; 0x526
   26114:	4640      	mov	r0, r8
   26116:	f011 f9a6 	bl	37466 <assert_post_action>
   2611a:	454e      	cmp	r6, r9
   2611c:	d30d      	bcc.n	2613a <deferred_work+0x6a>
		bt_conn_unref(conn);
   2611e:	4628      	mov	r0, r5
   26120:	f7ff fc5c 	bl	259dc <bt_conn_unref>
}
   26124:	b003      	add	sp, #12
   26126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (cb->disconnected) {
   2612a:	6873      	ldr	r3, [r6, #4]
   2612c:	b11b      	cbz	r3, 26136 <deferred_work+0x66>
			cb->disconnected(conn, conn->err);
   2612e:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   26132:	4628      	mov	r0, r5
   26134:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   26136:	6976      	ldr	r6, [r6, #20]
   26138:	e7d8      	b.n	260ec <deferred_work+0x1c>
		if (cb->disconnected) {
   2613a:	6873      	ldr	r3, [r6, #4]
   2613c:	b11b      	cbz	r3, 26146 <deferred_work+0x76>
			cb->disconnected(conn, conn->err);
   2613e:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   26142:	4628      	mov	r0, r5
   26144:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   26146:	3618      	adds	r6, #24
   26148:	e7d6      	b.n	260f8 <deferred_work+0x28>
	if (conn->type != BT_CONN_TYPE_LE) {
   2614a:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   2614e:	2b01      	cmp	r3, #1
   26150:	d1e8      	bne.n	26124 <deferred_work+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26152:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   26156:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
   2615a:	e856 3f00 	ldrex	r3, [r6]
   2615e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   26162:	e846 2100 	strex	r1, r2, [r6]
   26166:	2900      	cmp	r1, #0
   26168:	d1f7      	bne.n	2615a <deferred_work+0x8a>
   2616a:	f3bf 8f5b 	dmb	ish
   2616e:	059b      	lsls	r3, r3, #22
   26170:	d514      	bpl.n	2619c <deferred_work+0xcc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   26172:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   26174:	9300      	str	r3, [sp, #0]
   26176:	6d23      	ldr	r3, [r4, #80]	; 0x50
   26178:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   2617a:	4669      	mov	r1, sp
   2617c:	4628      	mov	r0, r5
   2617e:	f7ff ff71 	bl	26064 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26182:	f3bf 8f5b 	dmb	ish
   26186:	e856 3f00 	ldrex	r3, [r6]
   2618a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2618e:	e846 3200 	strex	r2, r3, [r6]
   26192:	2a00      	cmp	r2, #0
   26194:	d1f7      	bne.n	26186 <deferred_work+0xb6>
   26196:	f3bf 8f5b 	dmb	ish
   2619a:	e7c3      	b.n	26124 <deferred_work+0x54>
		param = BT_LE_CONN_PARAM(
   2619c:	4a08      	ldr	r2, [pc, #32]	; (261c0 <deferred_work+0xf0>)
   2619e:	6810      	ldr	r0, [r2, #0]
   261a0:	6851      	ldr	r1, [r2, #4]
   261a2:	466b      	mov	r3, sp
   261a4:	c303      	stmia	r3!, {r0, r1}
   261a6:	e7e8      	b.n	2617a <deferred_work+0xaa>
   261a8:	20002990 	.word	0x20002990
   261ac:	0003b3cc 	.word	0x0003b3cc
   261b0:	0003b3cc 	.word	0x0003b3cc
   261b4:	0003e6cd 	.word	0x0003e6cd
   261b8:	0003c48a 	.word	0x0003c48a
   261bc:	0003d403 	.word	0x0003d403
   261c0:	0003b61c 	.word	0x0003b61c
   261c4:	0003e69d 	.word	0x0003e69d

000261c8 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   261c8:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   261ca:	4801      	ldr	r0, [pc, #4]	; (261d0 <bt_conn_create_frag_timeout+0x8>)
   261cc:	f7ff bd54 	b.w	25c78 <bt_conn_create_pdu_timeout>
   261d0:	20000d1c 	.word	0x20000d1c

000261d4 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   261d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   261d8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   261da:	f04f 33ff 	mov.w	r3, #4294967295
   261de:	f04f 32ff 	mov.w	r2, #4294967295
   261e2:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   261e4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   261e6:	f7ff ffef 	bl	261c8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   261ea:	7833      	ldrb	r3, [r6, #0]
   261ec:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   261ee:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   261f0:	f04f 0600 	mov.w	r6, #0
   261f4:	d005      	beq.n	26202 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   261f6:	f003 fded 	bl	29dd4 <net_buf_unref>
		return NULL;
   261fa:	4635      	mov	r5, r6
}
   261fc:	4628      	mov	r0, r5
   261fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   26202:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   26204:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   26208:	4e0c      	ldr	r6, [pc, #48]	; (2623c <create_frag.isra.0+0x68>)
   2620a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2620c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   26210:	f013 fa76 	bl	39700 <net_buf_simple_tailroom>
   26214:	4580      	cmp	r8, r0
   26216:	d20c      	bcs.n	26232 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   26218:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2621c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   26220:	4632      	mov	r2, r6
   26222:	4638      	mov	r0, r7
   26224:	f013 fa74 	bl	39710 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   26228:	4631      	mov	r1, r6
   2622a:	4620      	mov	r0, r4
   2622c:	f003 fec0 	bl	29fb0 <net_buf_simple_pull>
   26230:	e7e4      	b.n	261fc <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   26232:	4638      	mov	r0, r7
   26234:	f013 fa64 	bl	39700 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   26238:	b286      	uxth	r6, r0
   2623a:	e7ef      	b.n	2621c <create_frag.isra.0+0x48>
   2623c:	200002b0 	.word	0x200002b0

00026240 <bt_conn_process_tx>:
{
   26240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   26242:	7a83      	ldrb	r3, [r0, #10]
{
   26244:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   26246:	b993      	cbnz	r3, 2626e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26248:	f3bf 8f5b 	dmb	ish
   2624c:	1d03      	adds	r3, r0, #4
   2624e:	e853 2f00 	ldrex	r2, [r3]
   26252:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   26256:	e843 1400 	strex	r4, r1, [r3]
   2625a:	2c00      	cmp	r4, #0
   2625c:	d1f7      	bne.n	2624e <bt_conn_process_tx+0xe>
   2625e:	f3bf 8f5b 	dmb	ish
   26262:	0653      	lsls	r3, r2, #25
   26264:	d503      	bpl.n	2626e <bt_conn_process_tx+0x2e>
}
   26266:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   2626a:	f7ff ba3b 	b.w	256e4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   2626e:	2200      	movs	r2, #0
   26270:	2300      	movs	r3, #0
   26272:	f105 0038 	add.w	r0, r5, #56	; 0x38
   26276:	f003 fc19 	bl	29aac <net_buf_get>
	BT_ASSERT(buf);
   2627a:	4604      	mov	r4, r0
   2627c:	b960      	cbnz	r0, 26298 <bt_conn_process_tx+0x58>
   2627e:	4a20      	ldr	r2, [pc, #128]	; (26300 <bt_conn_process_tx+0xc0>)
   26280:	4920      	ldr	r1, [pc, #128]	; (26304 <bt_conn_process_tx+0xc4>)
   26282:	4821      	ldr	r0, [pc, #132]	; (26308 <bt_conn_process_tx+0xc8>)
   26284:	f240 23e7 	movw	r3, #743	; 0x2e7
   26288:	f010 ff47 	bl	3711a <printk>
   2628c:	4040      	eors	r0, r0
   2628e:	f380 8811 	msr	BASEPRI, r0
   26292:	f04f 0003 	mov.w	r0, #3
   26296:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   26298:	4f1c      	ldr	r7, [pc, #112]	; (2630c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   2629a:	89a1      	ldrh	r1, [r4, #12]
   2629c:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   262a0:	4291      	cmp	r1, r2
   262a2:	d807      	bhi.n	262b4 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   262a4:	2300      	movs	r3, #0
   262a6:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   262a8:	4621      	mov	r1, r4
   262aa:	4628      	mov	r0, r5
   262ac:	f7ff f92e 	bl	2550c <send_frag>
	if (!send_buf(conn, buf)) {
   262b0:	b140      	cbz	r0, 262c4 <bt_conn_process_tx+0x84>
}
   262b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   262b4:	f105 060a 	add.w	r6, r5, #10
   262b8:	4621      	mov	r1, r4
   262ba:	4630      	mov	r0, r6
   262bc:	f7ff ff8a 	bl	261d4 <create_frag.isra.0>
	if (!frag) {
   262c0:	4601      	mov	r1, r0
   262c2:	b920      	cbnz	r0, 262ce <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   262c4:	4620      	mov	r0, r4
}
   262c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   262ca:	f003 bd83 	b.w	29dd4 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   262ce:	2301      	movs	r3, #1
   262d0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   262d2:	4628      	mov	r0, r5
   262d4:	f7ff f91a 	bl	2550c <send_frag>
   262d8:	2800      	cmp	r0, #0
   262da:	d0f3      	beq.n	262c4 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   262dc:	89a2      	ldrh	r2, [r4, #12]
   262de:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   262e2:	429a      	cmp	r2, r3
   262e4:	d802      	bhi.n	262ec <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   262e6:	2300      	movs	r3, #0
   262e8:	2203      	movs	r2, #3
   262ea:	e7dd      	b.n	262a8 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   262ec:	4621      	mov	r1, r4
   262ee:	4630      	mov	r0, r6
   262f0:	f7ff ff70 	bl	261d4 <create_frag.isra.0>
		if (!frag) {
   262f4:	4601      	mov	r1, r0
   262f6:	2800      	cmp	r0, #0
   262f8:	d0e4      	beq.n	262c4 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   262fa:	2301      	movs	r3, #1
   262fc:	461a      	mov	r2, r3
   262fe:	e7e8      	b.n	262d2 <bt_conn_process_tx+0x92>
   26300:	0003e69d 	.word	0x0003e69d
   26304:	0003e07b 	.word	0x0003e07b
   26308:	0003c48a 	.word	0x0003c48a
   2630c:	200002b0 	.word	0x200002b0

00026310 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   26310:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   26312:	4909      	ldr	r1, [pc, #36]	; (26338 <bt_conn_init+0x28>)
   26314:	4809      	ldr	r0, [pc, #36]	; (2633c <bt_conn_init+0x2c>)
   26316:	f013 ff97 	bl	3a248 <k_queue_append>
   2631a:	4909      	ldr	r1, [pc, #36]	; (26340 <bt_conn_init+0x30>)
   2631c:	4807      	ldr	r0, [pc, #28]	; (2633c <bt_conn_init+0x2c>)
   2631e:	f013 ff93 	bl	3a248 <k_queue_append>
	}

	bt_att_init();
   26322:	f012 fe3e 	bl	38fa2 <bt_att_init>

	err = bt_smp_init();
   26326:	f013 f9c1 	bl	396ac <bt_smp_init>
	if (err) {
   2632a:	4604      	mov	r4, r0
   2632c:	b908      	cbnz	r0, 26332 <bt_conn_init+0x22>
		return err;
	}

	bt_l2cap_init();
   2632e:	f012 fae5 	bl	388fc <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   26332:	4620      	mov	r0, r4
   26334:	bd10      	pop	{r4, pc}
   26336:	bf00      	nop
   26338:	20002994 	.word	0x20002994
   2633c:	20000c98 	.word	0x20000c98
   26340:	200029a4 	.word	0x200029a4

00026344 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   26344:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   26346:	4b0a      	ldr	r3, [pc, #40]	; (26370 <l2cap_accept+0x2c>)
{
   26348:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
   2634a:	6818      	ldr	r0, [r3, #0]
   2634c:	b918      	cbnz	r0, 26356 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   2634e:	4a09      	ldr	r2, [pc, #36]	; (26374 <l2cap_accept+0x30>)
   26350:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   26352:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   26354:	bd08      	pop	{r3, pc}
   26356:	4808      	ldr	r0, [pc, #32]	; (26378 <l2cap_accept+0x34>)
   26358:	4b08      	ldr	r3, [pc, #32]	; (2637c <l2cap_accept+0x38>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   2635a:	4909      	ldr	r1, [pc, #36]	; (26380 <l2cap_accept+0x3c>)
   2635c:	1a1b      	subs	r3, r3, r0
   2635e:	08db      	lsrs	r3, r3, #3
   26360:	019b      	lsls	r3, r3, #6
   26362:	f043 0001 	orr.w	r0, r3, #1
   26366:	f011 f893 	bl	37490 <log_string_sync>
	return -ENOMEM;
   2636a:	f06f 000b 	mvn.w	r0, #11
   2636e:	e7f1      	b.n	26354 <l2cap_accept+0x10>
   26370:	20001c00 	.word	0x20001c00
   26374:	0003ba2c 	.word	0x0003ba2c
   26378:	0003b448 	.word	0x0003b448
   2637c:	0003b490 	.word	0x0003b490
   26380:	0003ea4a 	.word	0x0003ea4a

00026384 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   26384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26386:	4605      	mov	r5, r0
   26388:	460f      	mov	r7, r1
   2638a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2638c:	2300      	movs	r3, #0
   2638e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   26392:	2104      	movs	r1, #4
   26394:	2000      	movs	r0, #0
   26396:	f7ff fc6f 	bl	25c78 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2639a:	4604      	mov	r4, r0
   2639c:	b960      	cbnz	r0, 263b8 <l2cap_create_le_sig_pdu.isra.0+0x34>
   2639e:	480a      	ldr	r0, [pc, #40]	; (263c8 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   263a0:	4b0a      	ldr	r3, [pc, #40]	; (263cc <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   263a2:	490b      	ldr	r1, [pc, #44]	; (263d0 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   263a4:	1a1b      	subs	r3, r3, r0
   263a6:	08db      	lsrs	r3, r3, #3
   263a8:	019b      	lsls	r3, r3, #6
   263aa:	462a      	mov	r2, r5
   263ac:	f043 0001 	orr.w	r0, r3, #1
   263b0:	f011 f86e 	bl	37490 <log_string_sync>
}
   263b4:	4620      	mov	r0, r4
   263b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   263b8:	2104      	movs	r1, #4
   263ba:	3008      	adds	r0, #8
   263bc:	f003 fe3a 	bl	2a034 <net_buf_simple_add>
	hdr->code = code;
   263c0:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   263c2:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   263c4:	8046      	strh	r6, [r0, #2]
	return buf;
   263c6:	e7f5      	b.n	263b4 <l2cap_create_le_sig_pdu.isra.0+0x30>
   263c8:	0003b448 	.word	0x0003b448
   263cc:	0003b490 	.word	0x0003b490
   263d0:	0003ea71 	.word	0x0003ea71

000263d4 <l2cap_rtx_timeout>:
{
   263d4:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   263d6:	4604      	mov	r4, r0
   263d8:	4b0a      	ldr	r3, [pc, #40]	; (26404 <l2cap_rtx_timeout+0x30>)
   263da:	480b      	ldr	r0, [pc, #44]	; (26408 <l2cap_rtx_timeout+0x34>)
   263dc:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   263e0:	490a      	ldr	r1, [pc, #40]	; (2640c <l2cap_rtx_timeout+0x38>)
   263e2:	1ac0      	subs	r0, r0, r3
   263e4:	08c0      	lsrs	r0, r0, #3
   263e6:	0180      	lsls	r0, r0, #6
   263e8:	4622      	mov	r2, r4
   263ea:	f040 0001 	orr.w	r0, r0, #1
   263ee:	f011 f84f 	bl	37490 <log_string_sync>
	bt_l2cap_chan_remove(conn, &chan->chan);
   263f2:	4628      	mov	r0, r5
   263f4:	4621      	mov	r1, r4
   263f6:	f012 f9f8 	bl	387ea <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   263fa:	4620      	mov	r0, r4
}
   263fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   26400:	f012 ba15 	b.w	3882e <bt_l2cap_chan_del>
   26404:	0003b448 	.word	0x0003b448
   26408:	0003b490 	.word	0x0003b490
   2640c:	0003ea99 	.word	0x0003ea99

00026410 <bt_l2cap_connected>:
{
   26410:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   26414:	4f32      	ldr	r7, [pc, #200]	; (264e0 <bt_l2cap_connected+0xd0>)
   26416:	4e33      	ldr	r6, [pc, #204]	; (264e4 <bt_l2cap_connected+0xd4>)
   26418:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 264f8 <bt_l2cap_connected+0xe8>
{
   2641c:	4604      	mov	r4, r0
   2641e:	46b9      	mov	r9, r7
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   26420:	42be      	cmp	r6, r7
   26422:	d90e      	bls.n	26442 <bt_l2cap_connected+0x32>
   26424:	4930      	ldr	r1, [pc, #192]	; (264e8 <bt_l2cap_connected+0xd8>)
   26426:	4831      	ldr	r0, [pc, #196]	; (264ec <bt_l2cap_connected+0xdc>)
   26428:	f44f 73b3 	mov.w	r3, #358	; 0x166
   2642c:	4642      	mov	r2, r8
   2642e:	f010 fe74 	bl	3711a <printk>
   26432:	482f      	ldr	r0, [pc, #188]	; (264f0 <bt_l2cap_connected+0xe0>)
   26434:	f010 fe71 	bl	3711a <printk>
   26438:	f44f 71b3 	mov.w	r1, #358	; 0x166
   2643c:	4640      	mov	r0, r8
   2643e:	f011 f812 	bl	37466 <assert_post_action>
   26442:	454e      	cmp	r6, r9
   26444:	d302      	bcc.n	2644c <bt_l2cap_connected+0x3c>
}
   26446:	b002      	add	sp, #8
   26448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   2644c:	6873      	ldr	r3, [r6, #4]
   2644e:	a901      	add	r1, sp, #4
   26450:	4620      	mov	r0, r4
   26452:	4798      	blx	r3
   26454:	2800      	cmp	r0, #0
   26456:	db3d      	blt.n	264d4 <bt_l2cap_connected+0xc4>
		ch = BT_L2CAP_LE_CHAN(chan);
   26458:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   2645a:	8833      	ldrh	r3, [r6, #0]
   2645c:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   26460:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   26464:	4923      	ldr	r1, [pc, #140]	; (264f4 <bt_l2cap_connected+0xe4>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   26466:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2646a:	f105 0010 	add.w	r0, r5, #16
   2646e:	f00a f93f 	bl	306f0 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26472:	f3bf 8f5b 	dmb	ish
   26476:	f105 0368 	add.w	r3, r5, #104	; 0x68
   2647a:	2200      	movs	r2, #0
   2647c:	e853 1f00 	ldrex	r1, [r3]
   26480:	e843 2000 	strex	r0, r2, [r3]
   26484:	2800      	cmp	r0, #0
   26486:	d1f9      	bne.n	2647c <bt_l2cap_connected+0x6c>
   26488:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   2648c:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   2648e:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   26490:	f105 0308 	add.w	r3, r5, #8
   26494:	bb02      	cbnz	r2, 264d8 <bt_l2cap_connected+0xc8>
	list->head = node;
   26496:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   2649a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   2649c:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   2649e:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   264a0:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   264a4:	681b      	ldr	r3, [r3, #0]
   264a6:	b103      	cbz	r3, 264aa <bt_l2cap_connected+0x9a>
			chan->ops->connected(chan);
   264a8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   264aa:	9b01      	ldr	r3, [sp, #4]
   264ac:	f3bf 8f5b 	dmb	ish
   264b0:	3368      	adds	r3, #104	; 0x68
   264b2:	e853 2f00 	ldrex	r2, [r3]
   264b6:	f042 0201 	orr.w	r2, r2, #1
   264ba:	e843 2100 	strex	r1, r2, [r3]
   264be:	2900      	cmp	r1, #0
   264c0:	d1f7      	bne.n	264b2 <bt_l2cap_connected+0xa2>
   264c2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   264c6:	9801      	ldr	r0, [sp, #4]
   264c8:	6843      	ldr	r3, [r0, #4]
   264ca:	699b      	ldr	r3, [r3, #24]
   264cc:	b113      	cbz	r3, 264d4 <bt_l2cap_connected+0xc4>
			chan->ops->status(chan, chan->status);
   264ce:	f100 0168 	add.w	r1, r0, #104	; 0x68
   264d2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   264d4:	360c      	adds	r6, #12
   264d6:	e7a3      	b.n	26420 <bt_l2cap_connected+0x10>
	parent->next = child;
   264d8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   264da:	65a3      	str	r3, [r4, #88]	; 0x58
}
   264dc:	e7dd      	b.n	2649a <bt_l2cap_connected+0x8a>
   264de:	bf00      	nop
   264e0:	0003b3cc 	.word	0x0003b3cc
   264e4:	0003b3a8 	.word	0x0003b3a8
   264e8:	0003eada 	.word	0x0003eada
   264ec:	0003c48a 	.word	0x0003c48a
   264f0:	0003d403 	.word	0x0003d403
   264f4:	000263d5 	.word	0x000263d5
   264f8:	0003eaa9 	.word	0x0003eaa9

000264fc <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   264fc:	898b      	ldrh	r3, [r1, #12]
   264fe:	2b03      	cmp	r3, #3
{
   26500:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26502:	4606      	mov	r6, r0
   26504:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   26506:	d80a      	bhi.n	2651e <l2cap_recv+0x22>
   26508:	482f      	ldr	r0, [pc, #188]	; (265c8 <l2cap_recv+0xcc>)
   2650a:	4b30      	ldr	r3, [pc, #192]	; (265cc <l2cap_recv+0xd0>)
		BT_ERR("Too small L2CAP signaling PDU");
   2650c:	4930      	ldr	r1, [pc, #192]	; (265d0 <l2cap_recv+0xd4>)
   2650e:	1ac0      	subs	r0, r0, r3
   26510:	08c0      	lsrs	r0, r0, #3
   26512:	0180      	lsls	r0, r0, #6
		BT_ERR("Invalid ident value in L2CAP PDU");
   26514:	f040 0001 	orr.w	r0, r0, #1
   26518:	f010 ffba 	bl	37490 <log_string_sync>
		return 0;
   2651c:	e013      	b.n	26546 <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   2651e:	2104      	movs	r1, #4
   26520:	f105 0008 	add.w	r0, r5, #8
   26524:	f003 fd64 	bl	29ff0 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   26528:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   2652a:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   2652c:	4293      	cmp	r3, r2
   2652e:	4604      	mov	r4, r0
   26530:	d00c      	beq.n	2654c <l2cap_recv+0x50>
   26532:	4926      	ldr	r1, [pc, #152]	; (265cc <l2cap_recv+0xd0>)
   26534:	4824      	ldr	r0, [pc, #144]	; (265c8 <l2cap_recv+0xcc>)
   26536:	1a40      	subs	r0, r0, r1
   26538:	08c0      	lsrs	r0, r0, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   2653a:	0180      	lsls	r0, r0, #6
   2653c:	4925      	ldr	r1, [pc, #148]	; (265d4 <l2cap_recv+0xd8>)
   2653e:	f040 0001 	orr.w	r0, r0, #1
   26542:	f010 ffa5 	bl	37490 <log_string_sync>
}
   26546:	2000      	movs	r0, #0
   26548:	b002      	add	sp, #8
   2654a:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   2654c:	7842      	ldrb	r2, [r0, #1]
   2654e:	b932      	cbnz	r2, 2655e <l2cap_recv+0x62>
   26550:	481d      	ldr	r0, [pc, #116]	; (265c8 <l2cap_recv+0xcc>)
   26552:	4b1e      	ldr	r3, [pc, #120]	; (265cc <l2cap_recv+0xd0>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   26554:	4920      	ldr	r1, [pc, #128]	; (265d8 <l2cap_recv+0xdc>)
   26556:	1ac0      	subs	r0, r0, r3
   26558:	08c0      	lsrs	r0, r0, #3
   2655a:	0180      	lsls	r0, r0, #6
   2655c:	e7da      	b.n	26514 <l2cap_recv+0x18>
	switch (hdr->code) {
   2655e:	7802      	ldrb	r2, [r0, #0]
   26560:	2a01      	cmp	r2, #1
   26562:	d0f0      	beq.n	26546 <l2cap_recv+0x4a>
   26564:	2a13      	cmp	r2, #19
   26566:	d108      	bne.n	2657a <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   26568:	2b01      	cmp	r3, #1
   2656a:	d8ec      	bhi.n	26546 <l2cap_recv+0x4a>
   2656c:	4816      	ldr	r0, [pc, #88]	; (265c8 <l2cap_recv+0xcc>)
   2656e:	4b17      	ldr	r3, [pc, #92]	; (265cc <l2cap_recv+0xd0>)
		BT_ERR("Too small LE conn param rsp");
   26570:	491a      	ldr	r1, [pc, #104]	; (265dc <l2cap_recv+0xe0>)
   26572:	1ac0      	subs	r0, r0, r3
   26574:	08c0      	lsrs	r0, r0, #3
   26576:	0180      	lsls	r0, r0, #6
   26578:	e7cc      	b.n	26514 <l2cap_recv+0x18>
   2657a:	4814      	ldr	r0, [pc, #80]	; (265cc <l2cap_recv+0xd0>)
   2657c:	4b12      	ldr	r3, [pc, #72]	; (265c8 <l2cap_recv+0xcc>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   2657e:	4918      	ldr	r1, [pc, #96]	; (265e0 <l2cap_recv+0xe4>)
   26580:	1a1b      	subs	r3, r3, r0
   26582:	08db      	lsrs	r3, r3, #3
   26584:	019b      	lsls	r3, r3, #6
   26586:	f043 0002 	orr.w	r0, r3, #2
   2658a:	f010 ff81 	bl	37490 <log_string_sync>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2658e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   26590:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   26592:	2202      	movs	r2, #2
   26594:	2001      	movs	r0, #1
   26596:	f7ff fef5 	bl	26384 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   2659a:	4604      	mov	r4, r0
   2659c:	2800      	cmp	r0, #0
   2659e:	d0d2      	beq.n	26546 <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   265a0:	2102      	movs	r1, #2
   265a2:	3008      	adds	r0, #8
   265a4:	f003 fd46 	bl	2a034 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   265a8:	2300      	movs	r3, #0
   265aa:	7003      	strb	r3, [r0, #0]
   265ac:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   265ae:	4622      	mov	r2, r4
   265b0:	9300      	str	r3, [sp, #0]
   265b2:	2105      	movs	r1, #5
   265b4:	4628      	mov	r0, r5
   265b6:	f012 f968 	bl	3888a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   265ba:	2800      	cmp	r0, #0
   265bc:	d0c3      	beq.n	26546 <l2cap_recv+0x4a>
		net_buf_unref(buf);
   265be:	4620      	mov	r0, r4
   265c0:	f003 fc08 	bl	29dd4 <net_buf_unref>
   265c4:	e7bf      	b.n	26546 <l2cap_recv+0x4a>
   265c6:	bf00      	nop
   265c8:	0003b490 	.word	0x0003b490
   265cc:	0003b448 	.word	0x0003b448
   265d0:	0003eb01 	.word	0x0003eb01
   265d4:	0003eb1f 	.word	0x0003eb1f
   265d8:	0003eb40 	.word	0x0003eb40
   265dc:	0003eb61 	.word	0x0003eb61
   265e0:	0003eb7d 	.word	0x0003eb7d

000265e4 <bt_l2cap_recv>:
{
   265e4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   265e6:	898b      	ldrh	r3, [r1, #12]
   265e8:	2b03      	cmp	r3, #3
{
   265ea:	4605      	mov	r5, r0
   265ec:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   265ee:	d80e      	bhi.n	2660e <bt_l2cap_recv+0x2a>
   265f0:	4814      	ldr	r0, [pc, #80]	; (26644 <bt_l2cap_recv+0x60>)
   265f2:	4b15      	ldr	r3, [pc, #84]	; (26648 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   265f4:	4915      	ldr	r1, [pc, #84]	; (2664c <bt_l2cap_recv+0x68>)
   265f6:	1ac0      	subs	r0, r0, r3
   265f8:	08c0      	lsrs	r0, r0, #3
   265fa:	0180      	lsls	r0, r0, #6
   265fc:	f040 0001 	orr.w	r0, r0, #1
   26600:	f010 ff46 	bl	37490 <log_string_sync>
	net_buf_unref(buf);
   26604:	4620      	mov	r0, r4
}
   26606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   2660a:	f003 bbe3 	b.w	29dd4 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   2660e:	2104      	movs	r1, #4
   26610:	f104 0008 	add.w	r0, r4, #8
   26614:	f003 fcec 	bl	29ff0 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   26618:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   2661a:	4628      	mov	r0, r5
   2661c:	4611      	mov	r1, r2
   2661e:	f012 f95d 	bl	388dc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   26622:	b950      	cbnz	r0, 2663a <bt_l2cap_recv+0x56>
   26624:	4b08      	ldr	r3, [pc, #32]	; (26648 <bt_l2cap_recv+0x64>)
   26626:	4807      	ldr	r0, [pc, #28]	; (26644 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   26628:	4909      	ldr	r1, [pc, #36]	; (26650 <bt_l2cap_recv+0x6c>)
   2662a:	1ac0      	subs	r0, r0, r3
   2662c:	08c0      	lsrs	r0, r0, #3
   2662e:	0180      	lsls	r0, r0, #6
   26630:	f040 0002 	orr.w	r0, r0, #2
   26634:	f010 ff2c 	bl	37490 <log_string_sync>
		net_buf_unref(buf);
   26638:	e7e4      	b.n	26604 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   2663a:	6843      	ldr	r3, [r0, #4]
   2663c:	4621      	mov	r1, r4
   2663e:	691b      	ldr	r3, [r3, #16]
   26640:	4798      	blx	r3
   26642:	e7df      	b.n	26604 <bt_l2cap_recv+0x20>
   26644:	0003b490 	.word	0x0003b490
   26648:	0003b448 	.word	0x0003b448
   2664c:	0003eb9b 	.word	0x0003eb9b
   26650:	0003ebb8 	.word	0x0003ebb8

00026654 <bt_l2cap_update_conn_param>:
{
   26654:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   26656:	4b17      	ldr	r3, [pc, #92]	; (266b4 <bt_l2cap_update_conn_param+0x60>)
   26658:	781a      	ldrb	r2, [r3, #0]
   2665a:	3201      	adds	r2, #1
	if (!ident) {
   2665c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   26660:	bf08      	it	eq
   26662:	2201      	moveq	r2, #1
   26664:	701a      	strb	r2, [r3, #0]
{
   26666:	4606      	mov	r6, r0
   26668:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2666a:	2208      	movs	r2, #8
   2666c:	7819      	ldrb	r1, [r3, #0]
   2666e:	2012      	movs	r0, #18
   26670:	f7ff fe88 	bl	26384 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   26674:	4604      	mov	r4, r0
   26676:	b1d0      	cbz	r0, 266ae <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   26678:	2108      	movs	r1, #8
   2667a:	4408      	add	r0, r1
   2667c:	f003 fcda 	bl	2a034 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   26680:	882b      	ldrh	r3, [r5, #0]
   26682:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   26684:	886b      	ldrh	r3, [r5, #2]
   26686:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   26688:	88ab      	ldrh	r3, [r5, #4]
   2668a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2668c:	88eb      	ldrh	r3, [r5, #6]
   2668e:	80c3      	strh	r3, [r0, #6]
   26690:	2300      	movs	r3, #0
   26692:	9300      	str	r3, [sp, #0]
   26694:	4622      	mov	r2, r4
   26696:	2105      	movs	r1, #5
   26698:	4630      	mov	r0, r6
   2669a:	f012 f8f6 	bl	3888a <bt_l2cap_send_cb>
	if (err) {
   2669e:	4605      	mov	r5, r0
   266a0:	b110      	cbz	r0, 266a8 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   266a2:	4620      	mov	r0, r4
   266a4:	f003 fb96 	bl	29dd4 <net_buf_unref>
}
   266a8:	4628      	mov	r0, r5
   266aa:	b002      	add	sp, #8
   266ac:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   266ae:	f06f 050b 	mvn.w	r5, #11
   266b2:	e7f9      	b.n	266a8 <bt_l2cap_update_conn_param+0x54>
   266b4:	20003c0f 	.word	0x20003c0f

000266b8 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   266b8:	4b02      	ldr	r3, [pc, #8]	; (266c4 <att_cfm_sent+0xc>)
   266ba:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   266be:	f012 b94b 	b.w	38958 <att_sent>
   266c2:	bf00      	nop
   266c4:	00038c19 	.word	0x00038c19

000266c8 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   266c8:	4b02      	ldr	r3, [pc, #8]	; (266d4 <att_rsp_sent+0xc>)
   266ca:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   266ce:	f012 b943 	b.w	38958 <att_sent>
   266d2:	bf00      	nop
   266d4:	00038bfd 	.word	0x00038bfd

000266d8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   266d8:	4b02      	ldr	r3, [pc, #8]	; (266e4 <att_req_sent+0xc>)
   266da:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   266de:	f012 b93b 	b.w	38958 <att_sent>
   266e2:	bf00      	nop
   266e4:	00038b45 	.word	0x00038b45

000266e8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   266e8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   266ea:	3808      	subs	r0, #8
   266ec:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   266ee:	a901      	add	r1, sp, #4
   266f0:	4802      	ldr	r0, [pc, #8]	; (266fc <bt_att_released+0x14>)
   266f2:	f008 fec1 	bl	2f478 <k_mem_slab_free>
}
   266f6:	b003      	add	sp, #12
   266f8:	f85d fb04 	ldr.w	pc, [sp], #4
   266fc:	20000ad8 	.word	0x20000ad8

00026700 <chan_send>:
{
   26700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   26704:	688b      	ldr	r3, [r1, #8]
   26706:	781b      	ldrb	r3, [r3, #0]
   26708:	2bd2      	cmp	r3, #210	; 0xd2
{
   2670a:	4606      	mov	r6, r0
   2670c:	460c      	mov	r4, r1
   2670e:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   26710:	d116      	bne.n	26740 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   26712:	6803      	ldr	r3, [r0, #0]
   26714:	6818      	ldr	r0, [r3, #0]
   26716:	f012 ffc6 	bl	396a6 <bt_smp_sign>
		if (err) {
   2671a:	4605      	mov	r5, r0
   2671c:	b180      	cbz	r0, 26740 <chan_send+0x40>
   2671e:	4b24      	ldr	r3, [pc, #144]	; (267b0 <chan_send+0xb0>)
   26720:	4824      	ldr	r0, [pc, #144]	; (267b4 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   26722:	4925      	ldr	r1, [pc, #148]	; (267b8 <chan_send+0xb8>)
   26724:	1ac0      	subs	r0, r0, r3
   26726:	08c0      	lsrs	r0, r0, #3
   26728:	0180      	lsls	r0, r0, #6
   2672a:	f040 0001 	orr.w	r0, r0, #1
   2672e:	f010 feaf 	bl	37490 <log_string_sync>
			net_buf_unref(buf);
   26732:	4620      	mov	r0, r4
   26734:	f003 fb4e 	bl	29dd4 <net_buf_unref>
}
   26738:	4628      	mov	r0, r5
   2673a:	b003      	add	sp, #12
   2673c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   26740:	f104 0008 	add.w	r0, r4, #8
   26744:	f012 ffd8 	bl	396f8 <net_buf_simple_headroom>
	state->len = buf->len;
   26748:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2674c:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   2674e:	b957      	cbnz	r7, 26766 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   26750:	68a3      	ldr	r3, [r4, #8]
   26752:	7818      	ldrb	r0, [r3, #0]
   26754:	f012 f916 	bl	38984 <att_op_get_type>
   26758:	1e43      	subs	r3, r0, #1
   2675a:	b2db      	uxtb	r3, r3
   2675c:	2b04      	cmp	r3, #4
   2675e:	bf9c      	itt	ls
   26760:	4a16      	ldrls	r2, [pc, #88]	; (267bc <chan_send+0xbc>)
   26762:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   26766:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   26768:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2676c:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   2676e:	4b14      	ldr	r3, [pc, #80]	; (267c0 <chan_send+0xc0>)
   26770:	429f      	cmp	r7, r3
   26772:	d018      	beq.n	267a6 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   26774:	4b13      	ldr	r3, [pc, #76]	; (267c4 <chan_send+0xc4>)
   26776:	429f      	cmp	r7, r3
   26778:	d017      	beq.n	267aa <chan_send+0xaa>
		return att_sent;
   2677a:	4913      	ldr	r1, [pc, #76]	; (267c8 <chan_send+0xc8>)
   2677c:	4b13      	ldr	r3, [pc, #76]	; (267cc <chan_send+0xcc>)
   2677e:	4a14      	ldr	r2, [pc, #80]	; (267d0 <chan_send+0xd0>)
   26780:	428f      	cmp	r7, r1
   26782:	bf18      	it	ne
   26784:	4613      	movne	r3, r2
			       &chan->chan.chan);
   26786:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   26788:	9600      	str	r6, [sp, #0]
   2678a:	4622      	mov	r2, r4
   2678c:	2104      	movs	r1, #4
   2678e:	f012 f87c 	bl	3888a <bt_l2cap_send_cb>
	if (err) {
   26792:	4605      	mov	r5, r0
   26794:	2800      	cmp	r0, #0
   26796:	d0cf      	beq.n	26738 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   26798:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   2679a:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2679e:	fa10 f088 	uxtah	r0, r0, r8
   267a2:	60a0      	str	r0, [r4, #8]
}
   267a4:	e7c8      	b.n	26738 <chan_send+0x38>
		return att_rsp_sent;
   267a6:	4b0b      	ldr	r3, [pc, #44]	; (267d4 <chan_send+0xd4>)
   267a8:	e7ed      	b.n	26786 <chan_send+0x86>
		return att_cfm_sent;
   267aa:	4b0b      	ldr	r3, [pc, #44]	; (267d8 <chan_send+0xd8>)
   267ac:	e7eb      	b.n	26786 <chan_send+0x86>
   267ae:	bf00      	nop
   267b0:	0003b448 	.word	0x0003b448
   267b4:	0003b460 	.word	0x0003b460
   267b8:	0003ebed 	.word	0x0003ebed
   267bc:	0003ba50 	.word	0x0003ba50
   267c0:	00038bfd 	.word	0x00038bfd
   267c4:	00038c19 	.word	0x00038c19
   267c8:	00038b45 	.word	0x00038b45
   267cc:	000266d9 	.word	0x000266d9
   267d0:	00038959 	.word	0x00038959
   267d4:	000266c9 	.word	0x000266c9
   267d8:	000266b9 	.word	0x000266b9

000267dc <bt_att_chan_req_send>:
{
   267dc:	b538      	push	{r3, r4, r5, lr}
   267de:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   267e0:	4604      	mov	r4, r0
   267e2:	b958      	cbnz	r0, 267fc <bt_att_chan_req_send+0x20>
   267e4:	491d      	ldr	r1, [pc, #116]	; (2685c <bt_att_chan_req_send+0x80>)
   267e6:	481e      	ldr	r0, [pc, #120]	; (26860 <bt_att_chan_req_send+0x84>)
   267e8:	4a1e      	ldr	r2, [pc, #120]	; (26864 <bt_att_chan_req_send+0x88>)
   267ea:	f240 2333 	movw	r3, #563	; 0x233
   267ee:	f010 fc94 	bl	3711a <printk>
   267f2:	481c      	ldr	r0, [pc, #112]	; (26864 <bt_att_chan_req_send+0x88>)
   267f4:	f240 2133 	movw	r1, #563	; 0x233
   267f8:	f010 fe35 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(req);
   267fc:	b95d      	cbnz	r5, 26816 <bt_att_chan_req_send+0x3a>
   267fe:	491a      	ldr	r1, [pc, #104]	; (26868 <bt_att_chan_req_send+0x8c>)
   26800:	4817      	ldr	r0, [pc, #92]	; (26860 <bt_att_chan_req_send+0x84>)
   26802:	4a18      	ldr	r2, [pc, #96]	; (26864 <bt_att_chan_req_send+0x88>)
   26804:	f44f 730d 	mov.w	r3, #564	; 0x234
   26808:	f010 fc87 	bl	3711a <printk>
   2680c:	4815      	ldr	r0, [pc, #84]	; (26864 <bt_att_chan_req_send+0x88>)
   2680e:	f44f 710d 	mov.w	r1, #564	; 0x234
   26812:	f010 fe28 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   26816:	686b      	ldr	r3, [r5, #4]
   26818:	b95b      	cbnz	r3, 26832 <bt_att_chan_req_send+0x56>
   2681a:	4914      	ldr	r1, [pc, #80]	; (2686c <bt_att_chan_req_send+0x90>)
   2681c:	4810      	ldr	r0, [pc, #64]	; (26860 <bt_att_chan_req_send+0x84>)
   2681e:	4a11      	ldr	r2, [pc, #68]	; (26864 <bt_att_chan_req_send+0x88>)
   26820:	f240 2335 	movw	r3, #565	; 0x235
   26824:	f010 fc79 	bl	3711a <printk>
   26828:	480e      	ldr	r0, [pc, #56]	; (26864 <bt_att_chan_req_send+0x88>)
   2682a:	f240 2135 	movw	r1, #565	; 0x235
   2682e:	f010 fe1a 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   26832:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   26836:	b15b      	cbz	r3, 26850 <bt_att_chan_req_send+0x74>
   26838:	490d      	ldr	r1, [pc, #52]	; (26870 <bt_att_chan_req_send+0x94>)
   2683a:	4809      	ldr	r0, [pc, #36]	; (26860 <bt_att_chan_req_send+0x84>)
   2683c:	4a09      	ldr	r2, [pc, #36]	; (26864 <bt_att_chan_req_send+0x88>)
   2683e:	f240 2336 	movw	r3, #566	; 0x236
   26842:	f010 fc6a 	bl	3711a <printk>
   26846:	4807      	ldr	r0, [pc, #28]	; (26864 <bt_att_chan_req_send+0x88>)
   26848:	f240 2136 	movw	r1, #566	; 0x236
   2684c:	f010 fe0b 	bl	37466 <assert_post_action>
	return chan_req_send(chan, req);
   26850:	4629      	mov	r1, r5
   26852:	4620      	mov	r0, r4
}
   26854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   26858:	f012 b8c1 	b.w	389de <chan_req_send>
   2685c:	0003ec2f 	.word	0x0003ec2f
   26860:	0003c48a 	.word	0x0003c48a
   26864:	0003ec00 	.word	0x0003ec00
   26868:	0003ec45 	.word	0x0003ec45
   2686c:	0003ec34 	.word	0x0003ec34
   26870:	0003ec3e 	.word	0x0003ec3e

00026874 <find_type_cb>:
{
   26874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   26878:	f8d2 9000 	ldr.w	r9, [r2]
{
   2687c:	b091      	sub	sp, #68	; 0x44
   2687e:	4607      	mov	r7, r0
   26880:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   26882:	2500      	movs	r5, #0
   26884:	f642 0301 	movw	r3, #10241	; 0x2801
   26888:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2688a:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2688e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   26892:	a90b      	add	r1, sp, #44	; 0x2c
{
   26894:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   26896:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2689a:	f011 fc2e 	bl	380fa <bt_uuid_cmp>
   2689e:	2800      	cmp	r0, #0
   268a0:	d066      	beq.n	26970 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   268a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   268a6:	6838      	ldr	r0, [r7, #0]
   268a8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   268ac:	a90b      	add	r1, sp, #44	; 0x2c
   268ae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   268b2:	f011 fc22 	bl	380fa <bt_uuid_cmp>
   268b6:	b138      	cbz	r0, 268c8 <find_type_cb+0x54>
		if (data->group &&
   268b8:	68a3      	ldr	r3, [r4, #8]
   268ba:	b11b      	cbz	r3, 268c4 <find_type_cb+0x50>
   268bc:	885a      	ldrh	r2, [r3, #2]
   268be:	42b2      	cmp	r2, r6
   268c0:	d200      	bcs.n	268c4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   268c2:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   268c4:	2001      	movs	r0, #1
   268c6:	e009      	b.n	268dc <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   268c8:	6861      	ldr	r1, [r4, #4]
   268ca:	4608      	mov	r0, r1
   268cc:	f012 f83c 	bl	38948 <net_buf_frags_len>
   268d0:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   268d4:	1a1b      	subs	r3, r3, r0
   268d6:	2b03      	cmp	r3, #3
   268d8:	d803      	bhi.n	268e2 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   268da:	2000      	movs	r0, #0
}
   268dc:	b011      	add	sp, #68	; 0x44
   268de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   268e2:	4608      	mov	r0, r1
   268e4:	f003 fad6 	bl	29e94 <net_buf_frag_last>
   268e8:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   268ea:	6860      	ldr	r0, [r4, #4]
   268ec:	f012 f82c 	bl	38948 <net_buf_frags_len>
   268f0:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   268f4:	f105 0b08 	add.w	fp, r5, #8
   268f8:	ebaa 0a00 	sub.w	sl, sl, r0
   268fc:	4658      	mov	r0, fp
   268fe:	f012 feff 	bl	39700 <net_buf_simple_tailroom>
   26902:	4582      	cmp	sl, r0
   26904:	d237      	bcs.n	26976 <find_type_cb+0x102>
   26906:	6860      	ldr	r0, [r4, #4]
   26908:	f012 f81e 	bl	38948 <net_buf_frags_len>
   2690c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   26910:	1a18      	subs	r0, r3, r0
	if (!len) {
   26912:	b970      	cbnz	r0, 26932 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   26914:	6863      	ldr	r3, [r4, #4]
   26916:	7998      	ldrb	r0, [r3, #6]
   26918:	f002 ff58 	bl	297cc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2691c:	2200      	movs	r2, #0
   2691e:	2300      	movs	r3, #0
   26920:	f012 fed7 	bl	396d2 <net_buf_alloc_fixed>
		if (!frag) {
   26924:	4605      	mov	r5, r0
   26926:	2800      	cmp	r0, #0
   26928:	d0d7      	beq.n	268da <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   2692a:	4601      	mov	r1, r0
   2692c:	6860      	ldr	r0, [r4, #4]
   2692e:	f003 faf9 	bl	29f24 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   26932:	2300      	movs	r3, #0
   26934:	9300      	str	r3, [sp, #0]
   26936:	f8d7 9004 	ldr.w	r9, [r7, #4]
   2693a:	4639      	mov	r1, r7
   2693c:	2310      	movs	r3, #16
   2693e:	aa02      	add	r2, sp, #8
   26940:	4640      	mov	r0, r8
   26942:	47c8      	blx	r9
	if (read < 0) {
   26944:	1e07      	subs	r7, r0, #0
   26946:	db13      	blt.n	26970 <find_type_cb+0xfc>
	if (read != data->value_len) {
   26948:	7c22      	ldrb	r2, [r4, #16]
   2694a:	68e0      	ldr	r0, [r4, #12]
   2694c:	42ba      	cmp	r2, r7
   2694e:	d035      	beq.n	269bc <find_type_cb+0x148>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   26950:	4601      	mov	r1, r0
   26952:	a80b      	add	r0, sp, #44	; 0x2c
   26954:	f011 fbfb 	bl	3814e <bt_uuid_create>
   26958:	b988      	cbnz	r0, 2697e <find_type_cb+0x10a>
   2695a:	481a      	ldr	r0, [pc, #104]	; (269c4 <find_type_cb+0x150>)
   2695c:	4b1a      	ldr	r3, [pc, #104]	; (269c8 <find_type_cb+0x154>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   2695e:	7c22      	ldrb	r2, [r4, #16]
   26960:	491a      	ldr	r1, [pc, #104]	; (269cc <find_type_cb+0x158>)
   26962:	1ac0      	subs	r0, r0, r3
   26964:	08c0      	lsrs	r0, r0, #3
   26966:	0180      	lsls	r0, r0, #6
			BT_WARN("Unable to create UUID: size %d", read);
   26968:	f040 0002 	orr.w	r0, r0, #2
   2696c:	f010 fd90 	bl	37490 <log_string_sync>
	data->group = NULL;
   26970:	2300      	movs	r3, #0
   26972:	60a3      	str	r3, [r4, #8]
   26974:	e7a6      	b.n	268c4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   26976:	4658      	mov	r0, fp
   26978:	f012 fec2 	bl	39700 <net_buf_simple_tailroom>
   2697c:	e7c9      	b.n	26912 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   2697e:	b2fa      	uxtb	r2, r7
   26980:	a902      	add	r1, sp, #8
   26982:	a806      	add	r0, sp, #24
   26984:	f011 fbe3 	bl	3814e <bt_uuid_create>
   26988:	b938      	cbnz	r0, 2699a <find_type_cb+0x126>
   2698a:	480e      	ldr	r0, [pc, #56]	; (269c4 <find_type_cb+0x150>)
   2698c:	4b0e      	ldr	r3, [pc, #56]	; (269c8 <find_type_cb+0x154>)
			BT_WARN("Unable to create UUID: size %d", read);
   2698e:	4910      	ldr	r1, [pc, #64]	; (269d0 <find_type_cb+0x15c>)
   26990:	1ac0      	subs	r0, r0, r3
   26992:	08c0      	lsrs	r0, r0, #3
   26994:	0180      	lsls	r0, r0, #6
   26996:	463a      	mov	r2, r7
   26998:	e7e6      	b.n	26968 <find_type_cb+0xf4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   2699a:	a906      	add	r1, sp, #24
   2699c:	a80b      	add	r0, sp, #44	; 0x2c
   2699e:	f011 fbac 	bl	380fa <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   269a2:	2800      	cmp	r0, #0
   269a4:	d1e4      	bne.n	26970 <find_type_cb+0xfc>
	data->err = 0x00;
   269a6:	2300      	movs	r3, #0
   269a8:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   269aa:	2104      	movs	r1, #4
   269ac:	f105 0008 	add.w	r0, r5, #8
   269b0:	f003 fb40 	bl	2a034 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   269b4:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   269b6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   269b8:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   269ba:	e783      	b.n	268c4 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   269bc:	a902      	add	r1, sp, #8
   269be:	f013 fd92 	bl	3a4e6 <memcmp>
   269c2:	e7ee      	b.n	269a2 <find_type_cb+0x12e>
   269c4:	0003b460 	.word	0x0003b460
   269c8:	0003b448 	.word	0x0003b448
   269cc:	0003ec49 	.word	0x0003ec49
   269d0:	0003ec68 	.word	0x0003ec68

000269d4 <att_get>:
{
   269d4:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   269d6:	7a83      	ldrb	r3, [r0, #10]
   269d8:	2b07      	cmp	r3, #7
   269da:	d00b      	beq.n	269f4 <att_get+0x20>
   269dc:	4817      	ldr	r0, [pc, #92]	; (26a3c <att_get+0x68>)
   269de:	4b18      	ldr	r3, [pc, #96]	; (26a40 <att_get+0x6c>)
		BT_WARN("Not connected");
   269e0:	4918      	ldr	r1, [pc, #96]	; (26a44 <att_get+0x70>)
   269e2:	1ac0      	subs	r0, r0, r3
   269e4:	08c0      	lsrs	r0, r0, #3
   269e6:	0180      	lsls	r0, r0, #6
		BT_WARN("ATT channel flagged as disconnected");
   269e8:	f040 0002 	orr.w	r0, r0, #2
   269ec:	f010 fd50 	bl	37490 <log_string_sync>
		return NULL;
   269f0:	2400      	movs	r4, #0
   269f2:	e00e      	b.n	26a12 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   269f4:	2104      	movs	r1, #4
   269f6:	f011 ff71 	bl	388dc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   269fa:	4604      	mov	r4, r0
   269fc:	b958      	cbnz	r0, 26a16 <att_get+0x42>
   269fe:	480f      	ldr	r0, [pc, #60]	; (26a3c <att_get+0x68>)
   26a00:	4b0f      	ldr	r3, [pc, #60]	; (26a40 <att_get+0x6c>)
		BT_ERR("Unable to find ATT channel");
   26a02:	4911      	ldr	r1, [pc, #68]	; (26a48 <att_get+0x74>)
   26a04:	1ac0      	subs	r0, r0, r3
   26a06:	08c0      	lsrs	r0, r0, #3
   26a08:	0180      	lsls	r0, r0, #6
   26a0a:	f040 0001 	orr.w	r0, r0, #1
   26a0e:	f010 fd3f 	bl	37490 <log_string_sync>
}
   26a12:	4620      	mov	r0, r4
   26a14:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26a16:	f3bf 8f5b 	dmb	ish
   26a1a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   26a1e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   26a22:	075b      	lsls	r3, r3, #29
   26a24:	d506      	bpl.n	26a34 <att_get+0x60>
   26a26:	4805      	ldr	r0, [pc, #20]	; (26a3c <att_get+0x68>)
   26a28:	4b05      	ldr	r3, [pc, #20]	; (26a40 <att_get+0x6c>)
		BT_WARN("ATT channel flagged as disconnected");
   26a2a:	4908      	ldr	r1, [pc, #32]	; (26a4c <att_get+0x78>)
   26a2c:	1ac0      	subs	r0, r0, r3
   26a2e:	08c0      	lsrs	r0, r0, #3
   26a30:	0180      	lsls	r0, r0, #6
   26a32:	e7d9      	b.n	269e8 <att_get+0x14>
	return att_chan->att;
   26a34:	f850 4c08 	ldr.w	r4, [r0, #-8]
   26a38:	e7eb      	b.n	26a12 <att_get+0x3e>
   26a3a:	bf00      	nop
   26a3c:	0003b460 	.word	0x0003b460
   26a40:	0003b448 	.word	0x0003b448
   26a44:	0003ec87 	.word	0x0003ec87
   26a48:	0003ec95 	.word	0x0003ec95
   26a4c:	0003ecb0 	.word	0x0003ecb0

00026a50 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   26a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   26a52:	2300      	movs	r3, #0
{
   26a54:	4606      	mov	r6, r0
   26a56:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   26a58:	4829      	ldr	r0, [pc, #164]	; (26b00 <bt_att_accept+0xb0>)
   26a5a:	2200      	movs	r2, #0
   26a5c:	4669      	mov	r1, sp
   26a5e:	f008 fc9f 	bl	2f3a0 <k_mem_slab_alloc>
   26a62:	4604      	mov	r4, r0
   26a64:	b178      	cbz	r0, 26a86 <bt_att_accept+0x36>
   26a66:	4827      	ldr	r0, [pc, #156]	; (26b04 <bt_att_accept+0xb4>)
   26a68:	4b27      	ldr	r3, [pc, #156]	; (26b08 <bt_att_accept+0xb8>)
		BT_ERR("No available ATT context for conn %p", conn);
   26a6a:	4928      	ldr	r1, [pc, #160]	; (26b0c <bt_att_accept+0xbc>)
   26a6c:	1a1b      	subs	r3, r3, r0
   26a6e:	08db      	lsrs	r3, r3, #3
   26a70:	019b      	lsls	r3, r3, #6
   26a72:	4632      	mov	r2, r6
   26a74:	f043 0001 	orr.w	r0, r3, #1
		BT_ERR("No available ATT channel for conn %p", att->conn);
   26a78:	f010 fd0a 	bl	37490 <log_string_sync>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   26a7c:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   26a80:	4620      	mov	r0, r4
   26a82:	b003      	add	sp, #12
   26a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
   26a86:	4601      	mov	r1, r0
   26a88:	2238      	movs	r2, #56	; 0x38
   26a8a:	9800      	ldr	r0, [sp, #0]
   26a8c:	f013 fd74 	bl	3a578 <memset>
	att->conn = conn;
   26a90:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   26a92:	481f      	ldr	r0, [pc, #124]	; (26b10 <bt_att_accept+0xc0>)
	list->tail = NULL;
   26a94:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   26a96:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   26a9a:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
   26a9e:	2200      	movs	r2, #0
   26aa0:	2300      	movs	r3, #0
   26aa2:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   26aa4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   26aa6:	f008 fc7b 	bl	2f3a0 <k_mem_slab_alloc>
   26aaa:	4604      	mov	r4, r0
   26aac:	b148      	cbz	r0, 26ac2 <bt_att_accept+0x72>
   26aae:	4816      	ldr	r0, [pc, #88]	; (26b08 <bt_att_accept+0xb8>)
   26ab0:	4b14      	ldr	r3, [pc, #80]	; (26b04 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   26ab2:	682a      	ldr	r2, [r5, #0]
   26ab4:	4917      	ldr	r1, [pc, #92]	; (26b14 <bt_att_accept+0xc4>)
   26ab6:	1ac0      	subs	r0, r0, r3
   26ab8:	08c0      	lsrs	r0, r0, #3
   26aba:	0180      	lsls	r0, r0, #6
   26abc:	f040 0001 	orr.w	r0, r0, #1
   26ac0:	e7da      	b.n	26a78 <bt_att_accept+0x28>
   26ac2:	4601      	mov	r1, r0
   26ac4:	f44f 72ac 	mov.w	r2, #344	; 0x158
   26ac8:	9801      	ldr	r0, [sp, #4]
   26aca:	f013 fd55 	bl	3a578 <memset>
	chan->chan.chan.ops = &ops;
   26ace:	9801      	ldr	r0, [sp, #4]
   26ad0:	4b11      	ldr	r3, [pc, #68]	; (26b18 <bt_att_accept+0xc8>)
   26ad2:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   26ad4:	f500 7080 	add.w	r0, r0, #256	; 0x100
   26ad8:	f013 fba9 	bl	3a22e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26adc:	9b01      	ldr	r3, [sp, #4]
   26ade:	f3bf 8f5b 	dmb	ish
   26ae2:	33f8      	adds	r3, #248	; 0xf8
   26ae4:	e853 2f00 	ldrex	r2, [r3]
   26ae8:	e843 4100 	strex	r1, r4, [r3]
   26aec:	2900      	cmp	r1, #0
   26aee:	d1f9      	bne.n	26ae4 <bt_att_accept+0x94>
   26af0:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   26af4:	9b01      	ldr	r3, [sp, #4]
   26af6:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   26afa:	603b      	str	r3, [r7, #0]
	return 0;
   26afc:	e7c0      	b.n	26a80 <bt_att_accept+0x30>
   26afe:	bf00      	nop
   26b00:	20000ab8 	.word	0x20000ab8
   26b04:	0003b448 	.word	0x0003b448
   26b08:	0003b460 	.word	0x0003b460
   26b0c:	0003ecd4 	.word	0x0003ecd4
   26b10:	20000ad8 	.word	0x20000ad8
   26b14:	0003ecf9 	.word	0x0003ecf9
   26b18:	200005e4 	.word	0x200005e4

00026b1c <read_group_cb>:
{
   26b1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   26b20:	4606      	mov	r6, r0
   26b22:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   26b24:	f04f 0800 	mov.w	r8, #0
   26b28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   26b2c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   26b2e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   26b30:	f88d 8008 	strb.w	r8, [sp, #8]
   26b34:	a902      	add	r1, sp, #8
{
   26b36:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   26b38:	f8ad 300a 	strh.w	r3, [sp, #10]
   26b3c:	f011 fadd 	bl	380fa <bt_uuid_cmp>
   26b40:	b1a0      	cbz	r0, 26b6c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   26b42:	f642 0301 	movw	r3, #10241	; 0x2801
   26b46:	6830      	ldr	r0, [r6, #0]
   26b48:	f88d 800c 	strb.w	r8, [sp, #12]
   26b4c:	a903      	add	r1, sp, #12
   26b4e:	f8ad 300e 	strh.w	r3, [sp, #14]
   26b52:	f011 fad2 	bl	380fa <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   26b56:	b148      	cbz	r0, 26b6c <read_group_cb+0x50>
		if (data->group &&
   26b58:	6923      	ldr	r3, [r4, #16]
   26b5a:	b11b      	cbz	r3, 26b64 <read_group_cb+0x48>
   26b5c:	885a      	ldrh	r2, [r3, #2]
   26b5e:	42aa      	cmp	r2, r5
   26b60:	d200      	bcs.n	26b64 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   26b62:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   26b64:	2001      	movs	r0, #1
}
   26b66:	b004      	add	sp, #16
   26b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   26b6c:	6861      	ldr	r1, [r4, #4]
   26b6e:	6830      	ldr	r0, [r6, #0]
   26b70:	f011 fac3 	bl	380fa <bt_uuid_cmp>
   26b74:	b110      	cbz	r0, 26b7c <read_group_cb+0x60>
		data->group = NULL;
   26b76:	2300      	movs	r3, #0
   26b78:	6123      	str	r3, [r4, #16]
   26b7a:	e7f3      	b.n	26b64 <read_group_cb+0x48>
	if (data->rsp->len &&
   26b7c:	68e3      	ldr	r3, [r4, #12]
   26b7e:	68a0      	ldr	r0, [r4, #8]
   26b80:	781a      	ldrb	r2, [r3, #0]
   26b82:	b13a      	cbz	r2, 26b94 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   26b84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   26b88:	8981      	ldrh	r1, [r0, #12]
   26b8a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   26b8c:	4293      	cmp	r3, r2
   26b8e:	da01      	bge.n	26b94 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   26b90:	2000      	movs	r0, #0
   26b92:	e7e8      	b.n	26b66 <read_group_cb+0x4a>
   26b94:	2104      	movs	r1, #4
   26b96:	3008      	adds	r0, #8
   26b98:	f003 fa4c 	bl	2a034 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   26b9c:	4b09      	ldr	r3, [pc, #36]	; (26bc4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   26b9e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   26ba0:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   26ba2:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   26ba4:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   26ba6:	4631      	mov	r1, r6
   26ba8:	9300      	str	r3, [sp, #0]
   26baa:	9401      	str	r4, [sp, #4]
   26bac:	2300      	movs	r3, #0
   26bae:	4638      	mov	r0, r7
   26bb0:	f012 f840 	bl	38c34 <att_chan_read>
	if (read < 0) {
   26bb4:	2800      	cmp	r0, #0
   26bb6:	dbeb      	blt.n	26b90 <read_group_cb+0x74>
	if (!data->group) {
   26bb8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   26bba:	3800      	subs	r0, #0
   26bbc:	bf18      	it	ne
   26bbe:	2001      	movne	r0, #1
   26bc0:	e7d1      	b.n	26b66 <read_group_cb+0x4a>
   26bc2:	bf00      	nop
   26bc4:	00038b25 	.word	0x00038b25

00026bc8 <read_type_cb>:
{
   26bc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   26bcc:	f8d2 8000 	ldr.w	r8, [r2]
{
   26bd0:	4606      	mov	r6, r0
   26bd2:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   26bd4:	6800      	ldr	r0, [r0, #0]
   26bd6:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   26bd8:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   26bdc:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   26bde:	f011 fa8c 	bl	380fa <bt_uuid_cmp>
   26be2:	4607      	mov	r7, r0
   26be4:	2800      	cmp	r0, #0
   26be6:	d13e      	bne.n	26c66 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   26be8:	4628      	mov	r0, r5
   26bea:	2215      	movs	r2, #21
   26bec:	4631      	mov	r1, r6
   26bee:	f012 fca6 	bl	3953e <bt_gatt_check_perm>
   26bf2:	4605      	mov	r5, r0
   26bf4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   26bf6:	b148      	cbz	r0, 26c0c <read_type_cb+0x44>
		if (data->rsp->len) {
   26bf8:	68e3      	ldr	r3, [r4, #12]
   26bfa:	781b      	ldrb	r3, [r3, #0]
   26bfc:	b923      	cbnz	r3, 26c08 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   26bfe:	2500      	movs	r5, #0
}
   26c00:	4628      	mov	r0, r5
   26c02:	b003      	add	sp, #12
   26c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   26c08:	7527      	strb	r7, [r4, #20]
   26c0a:	e7f8      	b.n	26bfe <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   26c0c:	68a0      	ldr	r0, [r4, #8]
   26c0e:	f003 f941 	bl	29e94 <net_buf_frag_last>
   26c12:	2102      	movs	r1, #2
   26c14:	3008      	adds	r0, #8
   26c16:	f003 fa0d 	bl	2a034 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   26c1a:	4b14      	ldr	r3, [pc, #80]	; (26c6c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   26c1c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   26c1e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   26c20:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   26c24:	4631      	mov	r1, r6
   26c26:	9300      	str	r3, [sp, #0]
   26c28:	9401      	str	r4, [sp, #4]
   26c2a:	462b      	mov	r3, r5
   26c2c:	4640      	mov	r0, r8
   26c2e:	f012 f801 	bl	38c34 <att_chan_read>
	if (read < 0) {
   26c32:	2800      	cmp	r0, #0
   26c34:	da07      	bge.n	26c46 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   26c36:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   26c3a:	bf26      	itte	cs
   26c3c:	4240      	negcs	r0, r0
   26c3e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   26c40:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   26c42:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   26c44:	e7dc      	b.n	26c00 <read_type_cb+0x38>
	if (!data->item) {
   26c46:	6923      	ldr	r3, [r4, #16]
   26c48:	2b00      	cmp	r3, #0
   26c4a:	d0d8      	beq.n	26bfe <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   26c4c:	68a0      	ldr	r0, [r4, #8]
   26c4e:	f011 fe7b 	bl	38948 <net_buf_frags_len>
   26c52:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   26c56:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   26c58:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   26c5a:	7818      	ldrb	r0, [r3, #0]
   26c5c:	4285      	cmp	r5, r0
   26c5e:	bf94      	ite	ls
   26c60:	2500      	movls	r5, #0
   26c62:	2501      	movhi	r5, #1
   26c64:	e7cc      	b.n	26c00 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   26c66:	2501      	movs	r5, #1
   26c68:	e7ca      	b.n	26c00 <read_type_cb+0x38>
   26c6a:	bf00      	nop
   26c6c:	00038965 	.word	0x00038965

00026c70 <bt_att_connected>:
{
   26c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   26c72:	2104      	movs	r1, #4
{
   26c74:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   26c76:	6800      	ldr	r0, [r0, #0]
   26c78:	f011 fe20 	bl	388bc <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   26c7c:	4605      	mov	r5, r0
   26c7e:	b970      	cbnz	r0, 26c9e <bt_att_connected+0x2e>
   26c80:	491d      	ldr	r1, [pc, #116]	; (26cf8 <bt_att_connected+0x88>)
   26c82:	4a1e      	ldr	r2, [pc, #120]	; (26cfc <bt_att_connected+0x8c>)
   26c84:	481e      	ldr	r0, [pc, #120]	; (26d00 <bt_att_connected+0x90>)
   26c86:	f640 2381 	movw	r3, #2689	; 0xa81
   26c8a:	f010 fa46 	bl	3711a <printk>
   26c8e:	481d      	ldr	r0, [pc, #116]	; (26d04 <bt_att_connected+0x94>)
   26c90:	f010 fa43 	bl	3711a <printk>
   26c94:	4819      	ldr	r0, [pc, #100]	; (26cfc <bt_att_connected+0x8c>)
   26c96:	f640 2181 	movw	r1, #2689	; 0xa81
   26c9a:	f010 fbe4 	bl	37466 <assert_post_action>
	struct bt_att *att = att_chan->att;
   26c9e:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   26ca2:	6b2e      	ldr	r6, [r5, #48]	; 0x30
	att_chan = ATT_CHAN(chan);
   26ca4:	f1a4 0708 	sub.w	r7, r4, #8
	if (sys_slist_is_empty(&att->chans)) {
   26ca8:	b92e      	cbnz	r6, 26cb6 <bt_att_connected+0x46>
   26caa:	f105 000c 	add.w	r0, r5, #12
   26cae:	f013 fabe 	bl	3a22e <z_impl_k_queue_init>
   26cb2:	e9c5 660a 	strd	r6, r6, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   26cb6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
	parent->next = child;
   26cb8:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   26cbc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
	sys_slist_prepend(&att->chans, &chan->node);
   26cbe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	list->head = node;
   26cc2:	632b      	str	r3, [r5, #48]	; 0x30
Z_GENLIST_PREPEND(slist, snode)
   26cc4:	b902      	cbnz	r2, 26cc8 <bt_att_connected+0x58>
	list->tail = node;
   26cc6:	636b      	str	r3, [r5, #52]	; 0x34
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26cc8:	f3bf 8f5b 	dmb	ish
   26ccc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   26cd0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   26cd4:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   26cd6:	bf58      	it	pl
   26cd8:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   26cda:	4638      	mov	r0, r7
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   26cdc:	bf5c      	itt	pl
   26cde:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   26ce2:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   26ce6:	f011 fed7 	bl	38a98 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   26cea:	f504 708c 	add.w	r0, r4, #280	; 0x118
   26cee:	4906      	ldr	r1, [pc, #24]	; (26d08 <bt_att_connected+0x98>)
}
   26cf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   26cf4:	f009 bcfc 	b.w	306f0 <k_work_init_delayable>
   26cf8:	0003ec2f 	.word	0x0003ec2f
   26cfc:	0003ec00 	.word	0x0003ec00
   26d00:	0003c48a 	.word	0x0003c48a
   26d04:	0003ed1e 	.word	0x0003ed1e
   26d08:	000279ed 	.word	0x000279ed

00026d0c <prep_write_cb>:
{
   26d0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26d10:	4614      	mov	r4, r2
   26d12:	4606      	mov	r6, r0
   26d14:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
   26d16:	222a      	movs	r2, #42	; 0x2a
   26d18:	4601      	mov	r1, r0
   26d1a:	6820      	ldr	r0, [r4, #0]
   26d1c:	f012 fc0f 	bl	3953e <bt_gatt_check_perm>
   26d20:	4605      	mov	r5, r0
   26d22:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   26d24:	2800      	cmp	r0, #0
   26d26:	d12e      	bne.n	26d86 <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
   26d28:	7cb3      	ldrb	r3, [r6, #18]
   26d2a:	065b      	lsls	r3, r3, #25
   26d2c:	d516      	bpl.n	26d5c <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
   26d2e:	2301      	movs	r3, #1
   26d30:	9301      	str	r3, [sp, #4]
   26d32:	89e3      	ldrh	r3, [r4, #14]
   26d34:	9300      	str	r3, [sp, #0]
   26d36:	f8d6 8008 	ldr.w	r8, [r6, #8]
   26d3a:	89a3      	ldrh	r3, [r4, #12]
   26d3c:	68a2      	ldr	r2, [r4, #8]
   26d3e:	6820      	ldr	r0, [r4, #0]
   26d40:	4631      	mov	r1, r6
   26d42:	47c0      	blx	r8
	if (write != 0) {
   26d44:	b150      	cbz	r0, 26d5c <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
   26d46:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   26d4a:	bf26      	itte	cs
   26d4c:	4243      	negcs	r3, r0
   26d4e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   26d50:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   26d52:	7423      	strb	r3, [r4, #16]
}
   26d54:	4628      	mov	r0, r5
   26d56:	b002      	add	sp, #8
   26d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
   26d5c:	480b      	ldr	r0, [pc, #44]	; (26d8c <prep_write_cb+0x80>)
   26d5e:	2200      	movs	r2, #0
   26d60:	2300      	movs	r3, #0
   26d62:	f012 fcb6 	bl	396d2 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
   26d66:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
   26d68:	b908      	cbnz	r0, 26d6e <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   26d6a:	2309      	movs	r3, #9
   26d6c:	e7f1      	b.n	26d52 <prep_write_cb+0x46>
	attr_data->offset = data->offset;
   26d6e:	89e3      	ldrh	r3, [r4, #14]
   26d70:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
   26d72:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   26d74:	89a2      	ldrh	r2, [r4, #12]
   26d76:	68a1      	ldr	r1, [r4, #8]
   26d78:	3008      	adds	r0, #8
   26d7a:	f012 fcc9 	bl	39710 <net_buf_simple_add_mem>
	data->err = 0U;
   26d7e:	2300      	movs	r3, #0
   26d80:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
   26d82:	2501      	movs	r5, #1
   26d84:	e7e6      	b.n	26d54 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
   26d86:	2500      	movs	r5, #0
   26d88:	e7e4      	b.n	26d54 <prep_write_cb+0x48>
   26d8a:	bf00      	nop
   26d8c:	20000dec 	.word	0x20000dec

00026d90 <bt_att_chan_create_pdu>:
{
   26d90:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   26d92:	1c53      	adds	r3, r2, #1
   26d94:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   26d98:	4293      	cmp	r3, r2
{
   26d9a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   26d9c:	d90c      	bls.n	26db8 <bt_att_chan_create_pdu+0x28>
   26d9e:	491a      	ldr	r1, [pc, #104]	; (26e08 <bt_att_chan_create_pdu+0x78>)
   26da0:	481a      	ldr	r0, [pc, #104]	; (26e0c <bt_att_chan_create_pdu+0x7c>)
   26da2:	1a40      	subs	r0, r0, r1
   26da4:	08c0      	lsrs	r0, r0, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   26da6:	0180      	lsls	r0, r0, #6
   26da8:	4919      	ldr	r1, [pc, #100]	; (26e10 <bt_att_chan_create_pdu+0x80>)
   26daa:	f040 0002 	orr.w	r0, r0, #2
   26dae:	f010 fb6f 	bl	37490 <log_string_sync>
		return NULL;
   26db2:	2400      	movs	r4, #0
}
   26db4:	4620      	mov	r0, r4
   26db6:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   26db8:	4608      	mov	r0, r1
   26dba:	f011 fde3 	bl	38984 <att_op_get_type>
   26dbe:	2802      	cmp	r0, #2
   26dc0:	d001      	beq.n	26dc6 <bt_att_chan_create_pdu+0x36>
   26dc2:	2804      	cmp	r0, #4
   26dc4:	d114      	bne.n	26df0 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   26dc6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   26dca:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   26dcc:	2100      	movs	r1, #0
   26dce:	4608      	mov	r0, r1
   26dd0:	f011 fd58 	bl	38884 <bt_l2cap_create_pdu_timeout>
   26dd4:	4604      	mov	r4, r0
	if (!buf) {
   26dd6:	b980      	cbnz	r0, 26dfa <bt_att_chan_create_pdu+0x6a>
   26dd8:	4b0b      	ldr	r3, [pc, #44]	; (26e08 <bt_att_chan_create_pdu+0x78>)
   26dda:	480c      	ldr	r0, [pc, #48]	; (26e0c <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   26ddc:	490d      	ldr	r1, [pc, #52]	; (26e14 <bt_att_chan_create_pdu+0x84>)
   26dde:	1ac0      	subs	r0, r0, r3
   26de0:	08c0      	lsrs	r0, r0, #3
   26de2:	0180      	lsls	r0, r0, #6
   26de4:	462a      	mov	r2, r5
   26de6:	f040 0001 	orr.w	r0, r0, #1
   26dea:	f010 fb51 	bl	37490 <log_string_sync>
		return NULL;
   26dee:	e7e1      	b.n	26db4 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   26df0:	f04f 32ff 	mov.w	r2, #4294967295
   26df4:	f04f 33ff 	mov.w	r3, #4294967295
   26df8:	e7e8      	b.n	26dcc <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   26dfa:	2101      	movs	r1, #1
   26dfc:	3008      	adds	r0, #8
   26dfe:	f003 f919 	bl	2a034 <net_buf_simple_add>
	hdr->code = op;
   26e02:	7005      	strb	r5, [r0, #0]
	return buf;
   26e04:	e7d6      	b.n	26db4 <bt_att_chan_create_pdu+0x24>
   26e06:	bf00      	nop
   26e08:	0003b448 	.word	0x0003b448
   26e0c:	0003b460 	.word	0x0003b460
   26e10:	0003ed35 	.word	0x0003ed35
   26e14:	0003ea71 	.word	0x0003ea71

00026e18 <att_indicate>:
{
   26e18:	b570      	push	{r4, r5, r6, lr}
   26e1a:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   26e1c:	f101 0008 	add.w	r0, r1, #8
   26e20:	460d      	mov	r5, r1
   26e22:	f012 fc61 	bl	396e8 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   26e26:	6826      	ldr	r6, [r4, #0]
   26e28:	89ab      	ldrh	r3, [r5, #12]
   26e2a:	68aa      	ldr	r2, [r5, #8]
   26e2c:	4601      	mov	r1, r0
   26e2e:	6830      	ldr	r0, [r6, #0]
   26e30:	f012 fba8 	bl	39584 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   26e34:	211e      	movs	r1, #30
   26e36:	2200      	movs	r2, #0
   26e38:	4620      	mov	r0, r4
   26e3a:	f7ff ffa9 	bl	26d90 <bt_att_chan_create_pdu>
	if (!buf) {
   26e3e:	4601      	mov	r1, r0
   26e40:	b118      	cbz	r0, 26e4a <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   26e42:	4a03      	ldr	r2, [pc, #12]	; (26e50 <att_indicate+0x38>)
   26e44:	4620      	mov	r0, r4
   26e46:	f011 fe19 	bl	38a7c <bt_att_chan_send_rsp>
}
   26e4a:	2000      	movs	r0, #0
   26e4c:	bd70      	pop	{r4, r5, r6, pc}
   26e4e:	bf00      	nop
   26e50:	00038c19 	.word	0x00038c19

00026e54 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   26e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26e58:	4688      	mov	r8, r1
   26e5a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   26e5c:	2101      	movs	r1, #1
   26e5e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   26e60:	4605      	mov	r5, r0
   26e62:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   26e64:	f7ff ff94 	bl	26d90 <bt_att_chan_create_pdu>
	if (!buf) {
   26e68:	4604      	mov	r4, r0
   26e6a:	b178      	cbz	r0, 26e8c <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   26e6c:	2104      	movs	r1, #4
   26e6e:	3008      	adds	r0, #8
   26e70:	f003 f8e0 	bl	2a034 <net_buf_simple_add>
	rsp->request = req;
   26e74:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   26e78:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   26e7a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   26e7e:	4621      	mov	r1, r4
   26e80:	4628      	mov	r0, r5
   26e82:	4a03      	ldr	r2, [pc, #12]	; (26e90 <send_err_rsp.part.0+0x3c>)
}
   26e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   26e88:	f011 bdf8 	b.w	38a7c <bt_att_chan_send_rsp>
}
   26e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26e90:	00038bfd 	.word	0x00038bfd

00026e94 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   26e94:	898b      	ldrh	r3, [r1, #12]
{
   26e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26e9a:	4604      	mov	r4, r0
   26e9c:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   26e9e:	b963      	cbnz	r3, 26eba <bt_att_recv+0x26>
   26ea0:	484c      	ldr	r0, [pc, #304]	; (26fd4 <bt_att_recv+0x140>)
   26ea2:	4b4d      	ldr	r3, [pc, #308]	; (26fd8 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
   26ea4:	494d      	ldr	r1, [pc, #308]	; (26fdc <bt_att_recv+0x148>)
   26ea6:	1ac0      	subs	r0, r0, r3
   26ea8:	08c0      	lsrs	r0, r0, #3
   26eaa:	0180      	lsls	r0, r0, #6
   26eac:	f040 0001 	orr.w	r0, r0, #1
			BT_WARN("Ignoring unexpected indication");
   26eb0:	f010 faee 	bl	37490 <log_string_sync>
}
   26eb4:	2000      	movs	r0, #0
   26eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   26eba:	2101      	movs	r1, #1
   26ebc:	f108 0008 	add.w	r0, r8, #8
   26ec0:	f003 f896 	bl	29ff0 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   26ec4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   26ec8:	4605      	mov	r5, r0
   26eca:	2b00      	cmp	r3, #0
   26ecc:	d0f2      	beq.n	26eb4 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   26ece:	4944      	ldr	r1, [pc, #272]	; (26fe0 <bt_att_recv+0x14c>)
   26ed0:	7802      	ldrb	r2, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   26ed2:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   26ed6:	2300      	movs	r3, #0
   26ed8:	468c      	mov	ip, r1
		if (hdr->code == handlers[i].op) {
   26eda:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   26ede:	4290      	cmp	r0, r2
   26ee0:	d11d      	bne.n	26f1e <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   26ee2:	00d8      	lsls	r0, r3, #3
   26ee4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   26ee8:	789f      	ldrb	r7, [r3, #2]
   26eea:	2f01      	cmp	r7, #1
   26eec:	d134      	bne.n	26f58 <bt_att_recv+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26eee:	f3bf 8f5b 	dmb	ish
   26ef2:	34f0      	adds	r4, #240	; 0xf0
   26ef4:	e854 3f00 	ldrex	r3, [r4]
   26ef8:	f043 0201 	orr.w	r2, r3, #1
   26efc:	e844 2100 	strex	r1, r2, [r4]
   26f00:	2900      	cmp	r1, #0
   26f02:	d1f7      	bne.n	26ef4 <bt_att_recv+0x60>
   26f04:	f3bf 8f5b 	dmb	ish
   26f08:	07da      	lsls	r2, r3, #31
   26f0a:	d53d      	bpl.n	26f88 <bt_att_recv+0xf4>
   26f0c:	4831      	ldr	r0, [pc, #196]	; (26fd4 <bt_att_recv+0x140>)
   26f0e:	4b32      	ldr	r3, [pc, #200]	; (26fd8 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
   26f10:	4934      	ldr	r1, [pc, #208]	; (26fe4 <bt_att_recv+0x150>)
   26f12:	1ac0      	subs	r0, r0, r3
   26f14:	08c0      	lsrs	r0, r0, #3
   26f16:	0180      	lsls	r0, r0, #6
			BT_WARN("Ignoring unexpected indication");
   26f18:	f040 0002 	orr.w	r0, r0, #2
   26f1c:	e7c8      	b.n	26eb0 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   26f1e:	3301      	adds	r3, #1
   26f20:	2b1c      	cmp	r3, #28
   26f22:	d1da      	bne.n	26eda <bt_att_recv+0x46>
   26f24:	482c      	ldr	r0, [pc, #176]	; (26fd8 <bt_att_recv+0x144>)
   26f26:	4b2b      	ldr	r3, [pc, #172]	; (26fd4 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   26f28:	492f      	ldr	r1, [pc, #188]	; (26fe8 <bt_att_recv+0x154>)
   26f2a:	1a1b      	subs	r3, r3, r0
   26f2c:	08db      	lsrs	r3, r3, #3
   26f2e:	019b      	lsls	r3, r3, #6
   26f30:	f043 0002 	orr.w	r0, r3, #2
   26f34:	f010 faac 	bl	37490 <log_string_sync>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   26f38:	7829      	ldrb	r1, [r5, #0]
   26f3a:	4608      	mov	r0, r1
   26f3c:	f011 fd22 	bl	38984 <att_op_get_type>
   26f40:	2800      	cmp	r0, #0
   26f42:	d0b7      	beq.n	26eb4 <bt_att_recv+0x20>
   26f44:	2805      	cmp	r0, #5
   26f46:	d0b5      	beq.n	26eb4 <bt_att_recv+0x20>
	if (!req) {
   26f48:	2900      	cmp	r1, #0
   26f4a:	d0b3      	beq.n	26eb4 <bt_att_recv+0x20>
   26f4c:	2306      	movs	r3, #6
   26f4e:	2200      	movs	r2, #0
   26f50:	4630      	mov	r0, r6
   26f52:	f7ff ff7f 	bl	26e54 <send_err_rsp.part.0>
   26f56:	e7ad      	b.n	26eb4 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   26f58:	2f05      	cmp	r7, #5
   26f5a:	d115      	bne.n	26f88 <bt_att_recv+0xf4>
   26f5c:	f3bf 8f5b 	dmb	ish
   26f60:	34f0      	adds	r4, #240	; 0xf0
   26f62:	e854 3f00 	ldrex	r3, [r4]
   26f66:	f043 0202 	orr.w	r2, r3, #2
   26f6a:	e844 2100 	strex	r1, r2, [r4]
   26f6e:	2900      	cmp	r1, #0
   26f70:	d1f7      	bne.n	26f62 <bt_att_recv+0xce>
   26f72:	f3bf 8f5b 	dmb	ish
   26f76:	079b      	lsls	r3, r3, #30
   26f78:	d506      	bpl.n	26f88 <bt_att_recv+0xf4>
   26f7a:	4816      	ldr	r0, [pc, #88]	; (26fd4 <bt_att_recv+0x140>)
   26f7c:	4b16      	ldr	r3, [pc, #88]	; (26fd8 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
   26f7e:	491b      	ldr	r1, [pc, #108]	; (26fec <bt_att_recv+0x158>)
   26f80:	1ac0      	subs	r0, r0, r3
   26f82:	08c0      	lsrs	r0, r0, #3
   26f84:	0180      	lsls	r0, r0, #6
   26f86:	e7c7      	b.n	26f18 <bt_att_recv+0x84>
	if (buf->len < handler->expect_len) {
   26f88:	eb0c 0300 	add.w	r3, ip, r0
   26f8c:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   26f90:	7859      	ldrb	r1, [r3, #1]
   26f92:	4291      	cmp	r1, r2
   26f94:	d90e      	bls.n	26fb4 <bt_att_recv+0x120>
   26f96:	4b10      	ldr	r3, [pc, #64]	; (26fd8 <bt_att_recv+0x144>)
   26f98:	480e      	ldr	r0, [pc, #56]	; (26fd4 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   26f9a:	4915      	ldr	r1, [pc, #84]	; (26ff0 <bt_att_recv+0x15c>)
   26f9c:	1ac0      	subs	r0, r0, r3
   26f9e:	08c0      	lsrs	r0, r0, #3
   26fa0:	0180      	lsls	r0, r0, #6
   26fa2:	782b      	ldrb	r3, [r5, #0]
   26fa4:	f040 0001 	orr.w	r0, r0, #1
   26fa8:	f010 fa72 	bl	37490 <log_string_sync>
	if (handler->type == ATT_REQUEST && err) {
   26fac:	2f01      	cmp	r7, #1
   26fae:	d181      	bne.n	26eb4 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   26fb0:	2304      	movs	r3, #4
   26fb2:	e00a      	b.n	26fca <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
   26fb4:	685b      	ldr	r3, [r3, #4]
   26fb6:	4641      	mov	r1, r8
   26fb8:	4630      	mov	r0, r6
   26fba:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   26fbc:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   26fbe:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   26fc0:	f47f af78 	bne.w	26eb4 <bt_att_recv+0x20>
   26fc4:	2800      	cmp	r0, #0
   26fc6:	f43f af75 	beq.w	26eb4 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   26fca:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   26fcc:	2900      	cmp	r1, #0
   26fce:	f43f af71 	beq.w	26eb4 <bt_att_recv+0x20>
   26fd2:	e7bc      	b.n	26f4e <bt_att_recv+0xba>
   26fd4:	0003b460 	.word	0x0003b460
   26fd8:	0003b448 	.word	0x0003b448
   26fdc:	0003ed5a 	.word	0x0003ed5a
   26fe0:	0003ba64 	.word	0x0003ba64
   26fe4:	0003ed75 	.word	0x0003ed75
   26fe8:	0003edcf 	.word	0x0003edcf
   26fec:	0003ed91 	.word	0x0003ed91
   26ff0:	0003edb0 	.word	0x0003edb0

00026ff4 <att_write_rsp>:
{
   26ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ff8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   26ffa:	6803      	ldr	r3, [r0, #0]
   26ffc:	460e      	mov	r6, r1
   26ffe:	3900      	subs	r1, #0
{
   27000:	b086      	sub	sp, #24
   27002:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   27004:	bf18      	it	ne
   27006:	2101      	movne	r1, #1
   27008:	6818      	ldr	r0, [r3, #0]
{
   2700a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2700c:	f012 fae5 	bl	395da <bt_gatt_change_aware>
   27010:	2800      	cmp	r0, #0
   27012:	d04e      	beq.n	270b2 <att_write_rsp+0xbe>
	if (!handle) {
   27014:	2f00      	cmp	r7, #0
   27016:	d04e      	beq.n	270b6 <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
   27018:	2218      	movs	r2, #24
   2701a:	2100      	movs	r1, #0
   2701c:	4668      	mov	r0, sp
   2701e:	f013 faab 	bl	3a578 <memset>
	if (rsp) {
   27022:	f1b8 0f00 	cmp.w	r8, #0
   27026:	d126      	bne.n	27076 <att_write_rsp+0x82>
	data.conn = chan->att->conn;
   27028:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2702a:	4a24      	ldr	r2, [pc, #144]	; (270bc <att_write_rsp+0xc8>)
	data.conn = chan->att->conn;
   2702c:	681b      	ldr	r3, [r3, #0]
   2702e:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   27030:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   27034:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   27038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2703a:	9303      	str	r3, [sp, #12]
	data.len = len;
   2703c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   27040:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   27044:	2301      	movs	r3, #1
   27046:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2704a:	4639      	mov	r1, r7
   2704c:	466b      	mov	r3, sp
   2704e:	4638      	mov	r0, r7
	data.req = req;
   27050:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   27054:	f011 fd5b 	bl	38b0e <bt_gatt_foreach_attr>
	if (data.err) {
   27058:	f89d 4014 	ldrb.w	r4, [sp, #20]
   2705c:	b30c      	cbz	r4, 270a2 <att_write_rsp+0xae>
		if (rsp) {
   2705e:	f1b8 0f00 	cmp.w	r8, #0
   27062:	d019      	beq.n	27098 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
   27064:	9801      	ldr	r0, [sp, #4]
   27066:	f002 feb5 	bl	29dd4 <net_buf_unref>
	if (!req) {
   2706a:	b976      	cbnz	r6, 2708a <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   2706c:	2400      	movs	r4, #0
}
   2706e:	4620      	mov	r0, r4
   27070:	b006      	add	sp, #24
   27072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   27076:	2200      	movs	r2, #0
   27078:	4641      	mov	r1, r8
   2707a:	4628      	mov	r0, r5
   2707c:	f7ff fe88 	bl	26d90 <bt_att_chan_create_pdu>
   27080:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   27082:	2800      	cmp	r0, #0
   27084:	d1d0      	bne.n	27028 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
   27086:	240e      	movs	r4, #14
   27088:	e7f1      	b.n	2706e <att_write_rsp+0x7a>
   2708a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2708e:	463a      	mov	r2, r7
   27090:	4631      	mov	r1, r6
   27092:	4628      	mov	r0, r5
   27094:	f7ff fede 	bl	26e54 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   27098:	2e18      	cmp	r6, #24
   2709a:	d1e7      	bne.n	2706c <att_write_rsp+0x78>
   2709c:	f89d 4014 	ldrb.w	r4, [sp, #20]
   270a0:	e7e5      	b.n	2706e <att_write_rsp+0x7a>
	if (data.buf) {
   270a2:	9901      	ldr	r1, [sp, #4]
   270a4:	2900      	cmp	r1, #0
   270a6:	d0e1      	beq.n	2706c <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   270a8:	4a05      	ldr	r2, [pc, #20]	; (270c0 <att_write_rsp+0xcc>)
   270aa:	4628      	mov	r0, r5
   270ac:	f011 fce6 	bl	38a7c <bt_att_chan_send_rsp>
   270b0:	e7dd      	b.n	2706e <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   270b2:	2412      	movs	r4, #18
   270b4:	e7db      	b.n	2706e <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
   270b6:	2401      	movs	r4, #1
   270b8:	e7d9      	b.n	2706e <att_write_rsp+0x7a>
   270ba:	bf00      	nop
   270bc:	00038deb 	.word	0x00038deb
   270c0:	00038bfd 	.word	0x00038bfd

000270c4 <bt_att_create_pdu>:
{
   270c4:	b570      	push	{r4, r5, r6, lr}
   270c6:	460e      	mov	r6, r1
   270c8:	4615      	mov	r5, r2
	att = att_get(conn);
   270ca:	f7ff fc83 	bl	269d4 <att_get>
	if (!att) {
   270ce:	b1c0      	cbz	r0, 27102 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   270d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
	return list->head;
   270d2:	1c6a      	adds	r2, r5, #1
   270d4:	b15b      	cbz	r3, 270ee <bt_att_create_pdu+0x2a>
   270d6:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   270da:	d008      	beq.n	270ee <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   270dc:	681b      	ldr	r3, [r3, #0]
   270de:	b10b      	cbz	r3, 270e4 <bt_att_create_pdu+0x20>
   270e0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   270e4:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   270e8:	428a      	cmp	r2, r1
   270ea:	d90c      	bls.n	27106 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   270ec:	b98b      	cbnz	r3, 27112 <bt_att_create_pdu+0x4e>
   270ee:	480e      	ldr	r0, [pc, #56]	; (27128 <bt_att_create_pdu+0x64>)
   270f0:	4b0e      	ldr	r3, [pc, #56]	; (2712c <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   270f2:	490f      	ldr	r1, [pc, #60]	; (27130 <bt_att_create_pdu+0x6c>)
   270f4:	1ac0      	subs	r0, r0, r3
   270f6:	08c0      	lsrs	r0, r0, #3
   270f8:	0180      	lsls	r0, r0, #6
   270fa:	f040 0002 	orr.w	r0, r0, #2
   270fe:	f010 f9c7 	bl	37490 <log_string_sync>
}
   27102:	2000      	movs	r0, #0
   27104:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   27106:	462a      	mov	r2, r5
   27108:	4631      	mov	r1, r6
}
   2710a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   2710e:	f7ff be3f 	b.w	26d90 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27112:	f513 74aa 	adds.w	r4, r3, #340	; 0x154
   27116:	d004      	beq.n	27122 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27118:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2711c:	b10c      	cbz	r4, 27122 <bt_att_create_pdu+0x5e>
   2711e:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
   27122:	4618      	mov	r0, r3
   27124:	4623      	mov	r3, r4
   27126:	e7dd      	b.n	270e4 <bt_att_create_pdu+0x20>
   27128:	0003b460 	.word	0x0003b460
   2712c:	0003b448 	.word	0x0003b448
   27130:	0003ede9 	.word	0x0003ede9

00027134 <att_exec_write_req>:
{
   27134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return att_exec_write_rsp(chan, req->flags);
   27138:	688b      	ldr	r3, [r1, #8]
	buf->len  = 0U;
   2713a:	4f50      	ldr	r7, [pc, #320]	; (2727c <att_exec_write_req+0x148>)
   2713c:	781b      	ldrb	r3, [r3, #0]
{
   2713e:	b089      	sub	sp, #36	; 0x24
   27140:	4606      	mov	r6, r0
	return att_exec_write_rsp(chan, req->flags);
   27142:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = chan->chan.chan.conn;
   27144:	6883      	ldr	r3, [r0, #8]
   27146:	9306      	str	r3, [sp, #24]
	uint8_t err = 0U;
   27148:	2400      	movs	r4, #0
	while (!sys_slist_is_empty(&chan->att->prep_queue)) {
   2714a:	6830      	ldr	r0, [r6, #0]
   2714c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2714e:	b993      	cbnz	r3, 27176 <att_exec_write_req+0x42>
	if (err) {
   27150:	2c00      	cmp	r4, #0
   27152:	f040 808a 	bne.w	2726a <att_exec_write_req+0x136>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   27156:	2119      	movs	r1, #25
   27158:	9806      	ldr	r0, [sp, #24]
   2715a:	4622      	mov	r2, r4
   2715c:	f7ff ffb2 	bl	270c4 <bt_att_create_pdu>
	if (!buf) {
   27160:	4601      	mov	r1, r0
   27162:	2800      	cmp	r0, #0
   27164:	d079      	beq.n	2725a <att_exec_write_req+0x126>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   27166:	4a46      	ldr	r2, [pc, #280]	; (27280 <att_exec_write_req+0x14c>)
   27168:	4630      	mov	r0, r6
   2716a:	f011 fc87 	bl	38a7c <bt_att_chan_send_rsp>
}
   2716e:	4620      	mov	r0, r4
   27170:	b009      	add	sp, #36	; 0x24
   27172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf = net_buf_slist_get(&chan->att->prep_queue);
   27176:	3028      	adds	r0, #40	; 0x28
   27178:	f002 fd6c 	bl	29c54 <net_buf_slist_get>
   2717c:	f04f 0300 	mov.w	r3, #0
		handle = data->handle;
   27180:	f8b0 a014 	ldrh.w	sl, [r0, #20]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   27184:	8982      	ldrh	r2, [r0, #12]
   27186:	6881      	ldr	r1, [r0, #8]
   27188:	80bb      	strh	r3, [r7, #4]
		buf = net_buf_slist_get(&chan->att->prep_queue);
   2718a:	4605      	mov	r5, r0
	buf->data = buf->__buf;
   2718c:	68bb      	ldr	r3, [r7, #8]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   2718e:	483b      	ldr	r0, [pc, #236]	; (2727c <att_exec_write_req+0x148>)
   27190:	603b      	str	r3, [r7, #0]
   27192:	f012 fabd 	bl	39710 <net_buf_simple_add_mem>
					    &chan->att->prep_queue,
   27196:	f8d6 9000 	ldr.w	r9, [r6]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   2719a:	f8d9 4028 	ldr.w	r4, [r9, #40]	; 0x28
   2719e:	2c00      	cmp	r4, #0
   271a0:	d067      	beq.n	27272 <att_exec_write_req+0x13e>
		err = exec_write_reassemble(handle, data->offset,
   271a2:	8aeb      	ldrh	r3, [r5, #22]
   271a4:	9307      	str	r3, [sp, #28]
	return node->next;
   271a6:	6823      	ldr	r3, [r4, #0]
   271a8:	2b00      	cmp	r3, #0
   271aa:	bf38      	it	cc
   271ac:	2300      	movcc	r3, #0
   271ae:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   271b0:	f04f 0b00 	mov.w	fp, #0
		if (tmp_data->handle == handle) {
   271b4:	8aa2      	ldrh	r2, [r4, #20]
   271b6:	4552      	cmp	r2, sl
   271b8:	d135      	bne.n	27226 <att_exec_write_req+0xf2>
			if (tmp_data->offset == 0) {
   271ba:	8ae2      	ldrh	r2, [r4, #22]
   271bc:	2a00      	cmp	r2, #0
   271be:	d058      	beq.n	27272 <att_exec_write_req+0x13e>
			if (tmp_data->offset != buf->len + offset) {
   271c0:	88b9      	ldrh	r1, [r7, #4]
   271c2:	9b07      	ldr	r3, [sp, #28]
   271c4:	1858      	adds	r0, r3, r1
   271c6:	4282      	cmp	r2, r0
   271c8:	d149      	bne.n	2725e <att_exec_write_req+0x12a>
			if (buf->len + entry->len > buf->size) {
   271ca:	89a2      	ldrh	r2, [r4, #12]
   271cc:	88f8      	ldrh	r0, [r7, #6]
   271ce:	4411      	add	r1, r2
   271d0:	4281      	cmp	r1, r0
   271d2:	dc4c      	bgt.n	2726e <att_exec_write_req+0x13a>
			net_buf_simple_add_mem(buf, entry->data, entry->len);
   271d4:	68a1      	ldr	r1, [r4, #8]
   271d6:	4638      	mov	r0, r7
   271d8:	f012 fa9a 	bl	39710 <net_buf_simple_add_mem>
Z_GENLIST_REMOVE(slist, snode)
   271dc:	6822      	ldr	r2, [r4, #0]
   271de:	f1bb 0f00 	cmp.w	fp, #0
   271e2:	d117      	bne.n	27214 <att_exec_write_req+0xe0>
   271e4:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
	list->head = node;
   271e8:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   271ec:	428c      	cmp	r4, r1
   271ee:	d101      	bne.n	271f4 <att_exec_write_req+0xc0>
	list->tail = node;
   271f0:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
	parent->next = child;
   271f4:	2300      	movs	r3, #0
   271f6:	6023      	str	r3, [r4, #0]
			net_buf_unref(entry);
   271f8:	4620      	mov	r0, r4
   271fa:	f002 fdeb 	bl	29dd4 <net_buf_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   271fe:	f1b8 0f00 	cmp.w	r8, #0
   27202:	d036      	beq.n	27272 <att_exec_write_req+0x13e>
	return node->next;
   27204:	f8d8 2000 	ldr.w	r2, [r8]
   27208:	2a00      	cmp	r2, #0
   2720a:	bf38      	it	cc
   2720c:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2720e:	4644      	mov	r4, r8
   27210:	4690      	mov	r8, r2
   27212:	e7cf      	b.n	271b4 <att_exec_write_req+0x80>
	parent->next = child;
   27214:	f8cb 2000 	str.w	r2, [fp]
Z_GENLIST_REMOVE(slist, snode)
   27218:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
   2721c:	4294      	cmp	r4, r2
	list->tail = node;
   2721e:	bf08      	it	eq
   27220:	f8c9 b02c 	streq.w	fp, [r9, #44]	; 0x2c
}
   27224:	e7e6      	b.n	271f4 <att_exec_write_req+0xc0>
			prev = &entry->node;
   27226:	46a3      	mov	fp, r4
   27228:	e7e9      	b.n	271fe <att_exec_write_req+0xca>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   2722a:	88bb      	ldrh	r3, [r7, #4]
   2722c:	9302      	str	r3, [sp, #8]
   2722e:	683b      	ldr	r3, [r7, #0]
   27230:	9301      	str	r3, [sp, #4]
   27232:	8aeb      	ldrh	r3, [r5, #22]
   27234:	9300      	str	r3, [sp, #0]
   27236:	2200      	movs	r2, #0
   27238:	4653      	mov	r3, sl
   2723a:	2118      	movs	r1, #24
   2723c:	4630      	mov	r0, r6
   2723e:	f7ff fed9 	bl	26ff4 <att_write_rsp>
			if (err) {
   27242:	4604      	mov	r4, r0
   27244:	b128      	cbz	r0, 27252 <att_exec_write_req+0x11e>
	if (!req) {
   27246:	4603      	mov	r3, r0
   27248:	8aaa      	ldrh	r2, [r5, #20]
   2724a:	2118      	movs	r1, #24
   2724c:	4630      	mov	r0, r6
   2724e:	f7ff fe01 	bl	26e54 <send_err_rsp.part.0>
		net_buf_unref(buf);
   27252:	4628      	mov	r0, r5
   27254:	f002 fdbe 	bl	29dd4 <net_buf_unref>
   27258:	e777      	b.n	2714a <att_exec_write_req+0x16>
		return BT_ATT_ERR_UNLIKELY;
   2725a:	240e      	movs	r4, #14
   2725c:	e787      	b.n	2716e <att_exec_write_req+0x3a>
				return BT_ATT_ERR_INVALID_OFFSET;
   2725e:	2307      	movs	r3, #7
	if (!req) {
   27260:	4652      	mov	r2, sl
   27262:	2118      	movs	r1, #24
   27264:	4630      	mov	r0, r6
   27266:	f7ff fdf5 	bl	26e54 <send_err_rsp.part.0>
			return 0;
   2726a:	2400      	movs	r4, #0
	return att_exec_write_rsp(chan, req->flags);
   2726c:	e77f      	b.n	2716e <att_exec_write_req+0x3a>
				return BT_ATT_ERR_INVALID_ATTRIBUTE_LEN;
   2726e:	230d      	movs	r3, #13
   27270:	e7f6      	b.n	27260 <att_exec_write_req+0x12c>
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   27272:	9b05      	ldr	r3, [sp, #20]
   27274:	2b01      	cmp	r3, #1
   27276:	d0d8      	beq.n	2722a <att_exec_write_req+0xf6>
		err = exec_write_reassemble(handle, data->offset,
   27278:	2400      	movs	r4, #0
   2727a:	e7ea      	b.n	27252 <att_exec_write_req+0x11e>
   2727c:	20000608 	.word	0x20000608
   27280:	00038bfd 	.word	0x00038bfd

00027284 <att_prepare_write_req>:
{
   27284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27288:	460c      	mov	r4, r1
   2728a:	b087      	sub	sp, #28
   2728c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   2728e:	2104      	movs	r1, #4
   27290:	f104 0008 	add.w	r0, r4, #8
   27294:	f002 feac 	bl	29ff0 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
   27298:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
   2729c:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
   272a0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
   272a4:	f8d4 8008 	ldr.w	r8, [r4, #8]
   272a8:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
   272aa:	2101      	movs	r1, #1
   272ac:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
   272ae:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
   272b2:	f012 f992 	bl	395da <bt_gatt_change_aware>
   272b6:	2800      	cmp	r0, #0
   272b8:	d04b      	beq.n	27352 <att_prepare_write_req+0xce>
	if (!handle) {
   272ba:	2e00      	cmp	r6, #0
   272bc:	d04b      	beq.n	27356 <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
   272be:	2210      	movs	r2, #16
   272c0:	2100      	movs	r1, #0
   272c2:	a802      	add	r0, sp, #8
   272c4:	f013 f958 	bl	3a578 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   272c8:	2301      	movs	r3, #1
   272ca:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   272ce:	4a24      	ldr	r2, [pc, #144]	; (27360 <att_prepare_write_req+0xdc>)
	data.conn = conn;
   272d0:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
   272d4:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   272d6:	ab01      	add	r3, sp, #4
   272d8:	4631      	mov	r1, r6
   272da:	4630      	mov	r0, r6
	data.offset = offset;
   272dc:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
   272e0:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
   272e4:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   272e8:	f011 fc11 	bl	38b0e <bt_gatt_foreach_attr>
	if (data.err) {
   272ec:	f89d 4014 	ldrb.w	r4, [sp, #20]
   272f0:	b154      	cbz	r4, 27308 <att_prepare_write_req+0x84>
	if (!req) {
   272f2:	4623      	mov	r3, r4
   272f4:	4632      	mov	r2, r6
   272f6:	2116      	movs	r1, #22
   272f8:	4628      	mov	r0, r5
   272fa:	f7ff fdab 	bl	26e54 <send_err_rsp.part.0>
		return 0;
   272fe:	2400      	movs	r4, #0
}
   27300:	4620      	mov	r0, r4
   27302:	b007      	add	sp, #28
   27304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_slist_put(&chan->att->prep_queue, data.buf);
   27308:	6828      	ldr	r0, [r5, #0]
   2730a:	9902      	ldr	r1, [sp, #8]
   2730c:	3028      	adds	r0, #40	; 0x28
   2730e:	f002 fc2b 	bl	29b68 <net_buf_slist_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
   27312:	4622      	mov	r2, r4
   27314:	2117      	movs	r1, #23
   27316:	4658      	mov	r0, fp
   27318:	f7ff fed4 	bl	270c4 <bt_att_create_pdu>
   2731c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2731e:	b1e0      	cbz	r0, 2735a <att_prepare_write_req+0xd6>
	return net_buf_simple_add(&buf->b, len);
   27320:	2104      	movs	r1, #4
   27322:	3008      	adds	r0, #8
   27324:	f002 fe86 	bl	2a034 <net_buf_simple_add>
   27328:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
   2732a:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
   2732e:	f8a0 9002 	strh.w	r9, [r0, #2]
   27332:	9802      	ldr	r0, [sp, #8]
   27334:	4639      	mov	r1, r7
   27336:	3008      	adds	r0, #8
   27338:	f002 fe7c 	bl	2a034 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2733c:	463a      	mov	r2, r7
   2733e:	4641      	mov	r1, r8
   27340:	1d30      	adds	r0, r6, #4
   27342:	f013 f8de 	bl	3a502 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   27346:	4a07      	ldr	r2, [pc, #28]	; (27364 <att_prepare_write_req+0xe0>)
   27348:	9902      	ldr	r1, [sp, #8]
   2734a:	4628      	mov	r0, r5
   2734c:	f011 fb96 	bl	38a7c <bt_att_chan_send_rsp>
	return 0;
   27350:	e7d6      	b.n	27300 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   27352:	2412      	movs	r4, #18
   27354:	e7d4      	b.n	27300 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
   27356:	2401      	movs	r4, #1
   27358:	e7d2      	b.n	27300 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
   2735a:	240e      	movs	r4, #14
   2735c:	e7d0      	b.n	27300 <att_prepare_write_req+0x7c>
   2735e:	bf00      	nop
   27360:	00026d0d 	.word	0x00026d0d
   27364:	00038bfd 	.word	0x00038bfd

00027368 <att_read_group_req>:
{
   27368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   2736c:	7b0c      	ldrb	r4, [r1, #12]
   2736e:	3c04      	subs	r4, #4
   27370:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   27372:	2c02      	cmp	r4, #2
{
   27374:	4605      	mov	r5, r0
   27376:	b08c      	sub	sp, #48	; 0x30
   27378:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   2737a:	d001      	beq.n	27380 <att_read_group_req+0x18>
   2737c:	2c10      	cmp	r4, #16
   2737e:	d16f      	bne.n	27460 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   27380:	2104      	movs	r1, #4
   27382:	3008      	adds	r0, #8
   27384:	f002 fe34 	bl	29ff0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   27388:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   2738c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2738e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   27390:	1d01      	adds	r1, r0, #4
   27392:	4622      	mov	r2, r4
   27394:	4640      	mov	r0, r8
   27396:	f010 feda 	bl	3814e <bt_uuid_create>
   2739a:	2800      	cmp	r0, #0
   2739c:	d062      	beq.n	27464 <att_read_group_req+0xfc>
	if (!start || !end) {
   2739e:	2e00      	cmp	r6, #0
   273a0:	d03a      	beq.n	27418 <att_read_group_req+0xb0>
   273a2:	2400      	movs	r4, #0
   273a4:	2f00      	cmp	r7, #0
   273a6:	d036      	beq.n	27416 <att_read_group_req+0xae>
	if (start > end) {
   273a8:	42b7      	cmp	r7, r6
   273aa:	d335      	bcc.n	27418 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   273ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   273b0:	a901      	add	r1, sp, #4
   273b2:	4640      	mov	r0, r8
   273b4:	f88d 4004 	strb.w	r4, [sp, #4]
   273b8:	f8ad 3006 	strh.w	r3, [sp, #6]
   273bc:	f010 fe9d 	bl	380fa <bt_uuid_cmp>
   273c0:	2800      	cmp	r0, #0
   273c2:	d134      	bne.n	2742e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   273c4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   273c6:	2214      	movs	r2, #20
   273c8:	2100      	movs	r1, #0
   273ca:	a807      	add	r0, sp, #28
   273cc:	f013 f8d4 	bl	3a578 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   273d0:	2201      	movs	r2, #1
   273d2:	2111      	movs	r1, #17
   273d4:	4620      	mov	r0, r4
   273d6:	f7ff fe75 	bl	270c4 <bt_att_create_pdu>
   273da:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   273dc:	2800      	cmp	r0, #0
   273de:	d041      	beq.n	27464 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   273e0:	2101      	movs	r1, #1
   273e2:	3008      	adds	r0, #8
	data.uuid = uuid;
   273e4:	e9cd 5807 	strd	r5, r8, [sp, #28]
   273e8:	f002 fe24 	bl	2a034 <net_buf_simple_add>
	data.rsp->len = 0U;
   273ec:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   273f0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   273f2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   273f4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   273f8:	4a1b      	ldr	r2, [pc, #108]	; (27468 <att_read_group_req+0x100>)
	data.group = NULL;
   273fa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   273fe:	4639      	mov	r1, r7
   27400:	4630      	mov	r0, r6
   27402:	f011 fb84 	bl	38b0e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   27406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27408:	781c      	ldrb	r4, [r3, #0]
   2740a:	bb1c      	cbnz	r4, 27454 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   2740c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2740e:	f002 fce1 	bl	29dd4 <net_buf_unref>
	if (!req) {
   27412:	230a      	movs	r3, #10
   27414:	e018      	b.n	27448 <att_read_group_req+0xe0>
			*err = 0U;
   27416:	463e      	mov	r6, r7
	if (!req) {
   27418:	2301      	movs	r3, #1
   2741a:	4632      	mov	r2, r6
   2741c:	2110      	movs	r1, #16
   2741e:	4628      	mov	r0, r5
   27420:	f7ff fd18 	bl	26e54 <send_err_rsp.part.0>
		return 0;
   27424:	2400      	movs	r4, #0
}
   27426:	4620      	mov	r0, r4
   27428:	b00c      	add	sp, #48	; 0x30
   2742a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2742e:	f642 0301 	movw	r3, #10241	; 0x2801
   27432:	a907      	add	r1, sp, #28
   27434:	4640      	mov	r0, r8
   27436:	f88d 401c 	strb.w	r4, [sp, #28]
   2743a:	f8ad 301e 	strh.w	r3, [sp, #30]
   2743e:	f010 fe5c 	bl	380fa <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   27442:	2800      	cmp	r0, #0
   27444:	d0be      	beq.n	273c4 <att_read_group_req+0x5c>
	if (!req) {
   27446:	2310      	movs	r3, #16
   27448:	4632      	mov	r2, r6
   2744a:	2110      	movs	r1, #16
   2744c:	4628      	mov	r0, r5
   2744e:	f7ff fd01 	bl	26e54 <send_err_rsp.part.0>
		return 0;
   27452:	e7e8      	b.n	27426 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   27454:	4a05      	ldr	r2, [pc, #20]	; (2746c <att_read_group_req+0x104>)
   27456:	9909      	ldr	r1, [sp, #36]	; 0x24
   27458:	4628      	mov	r0, r5
   2745a:	f011 fb0f 	bl	38a7c <bt_att_chan_send_rsp>
	return 0;
   2745e:	e7e1      	b.n	27424 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   27460:	2404      	movs	r4, #4
   27462:	e7e0      	b.n	27426 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   27464:	240e      	movs	r4, #14
   27466:	e7de      	b.n	27426 <att_read_group_req+0xbe>
   27468:	00026b1d 	.word	0x00026b1d
   2746c:	00038bfd 	.word	0x00038bfd

00027470 <att_read_mult_req>:
{
   27470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   27474:	6886      	ldr	r6, [r0, #8]
{
   27476:	b085      	sub	sp, #20
   27478:	4604      	mov	r4, r0
   2747a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2747c:	4630      	mov	r0, r6
   2747e:	2101      	movs	r1, #1
   27480:	f012 f8ab 	bl	395da <bt_gatt_change_aware>
   27484:	2800      	cmp	r0, #0
   27486:	d038      	beq.n	274fa <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   27488:	2210      	movs	r2, #16
   2748a:	2100      	movs	r1, #0
   2748c:	4668      	mov	r0, sp
   2748e:	f013 f873 	bl	3a578 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   27492:	2200      	movs	r2, #0
   27494:	210f      	movs	r1, #15
   27496:	4630      	mov	r0, r6
   27498:	f7ff fe14 	bl	270c4 <bt_att_create_pdu>
   2749c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2749e:	b370      	cbz	r0, 274fe <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   274a0:	f8df 9064 	ldr.w	r9, [pc, #100]	; 27508 <att_read_mult_req+0x98>
	data.chan = chan;
   274a4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   274a6:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   274aa:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   274ae:	89ab      	ldrh	r3, [r5, #12]
   274b0:	2b01      	cmp	r3, #1
   274b2:	d805      	bhi.n	274c0 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   274b4:	4a13      	ldr	r2, [pc, #76]	; (27504 <att_read_mult_req+0x94>)
   274b6:	9902      	ldr	r1, [sp, #8]
   274b8:	4620      	mov	r0, r4
   274ba:	f011 fadf 	bl	38a7c <bt_att_chan_send_rsp>
   274be:	e018      	b.n	274f2 <att_read_mult_req+0x82>
   274c0:	4638      	mov	r0, r7
   274c2:	f012 f911 	bl	396e8 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   274c6:	466b      	mov	r3, sp
   274c8:	464a      	mov	r2, r9
   274ca:	4601      	mov	r1, r0
   274cc:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   274ce:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   274d2:	f011 fb1c 	bl	38b0e <bt_gatt_foreach_attr>
		if (data.err) {
   274d6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   274da:	2b00      	cmp	r3, #0
   274dc:	d0e7      	beq.n	274ae <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   274de:	9802      	ldr	r0, [sp, #8]
   274e0:	f002 fc78 	bl	29dd4 <net_buf_unref>
	if (!req) {
   274e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   274e8:	4632      	mov	r2, r6
   274ea:	210e      	movs	r1, #14
   274ec:	4620      	mov	r0, r4
   274ee:	f7ff fcb1 	bl	26e54 <send_err_rsp.part.0>
	return 0;
   274f2:	2000      	movs	r0, #0
}
   274f4:	b005      	add	sp, #20
   274f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   274fa:	2012      	movs	r0, #18
   274fc:	e7fa      	b.n	274f4 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   274fe:	200e      	movs	r0, #14
   27500:	e7f8      	b.n	274f4 <att_read_mult_req+0x84>
   27502:	bf00      	nop
   27504:	00038bfd 	.word	0x00038bfd
   27508:	00038ec9 	.word	0x00038ec9

0002750c <att_read_rsp>:
{
   2750c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   27510:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   27514:	4605      	mov	r5, r0
   27516:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   27518:	4640      	mov	r0, r8
   2751a:	2101      	movs	r1, #1
{
   2751c:	4614      	mov	r4, r2
   2751e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   27520:	f012 f85b 	bl	395da <bt_gatt_change_aware>
   27524:	b390      	cbz	r0, 2758c <att_read_rsp+0x80>
	if (!handle) {
   27526:	b39e      	cbz	r6, 27590 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   27528:	2210      	movs	r2, #16
   2752a:	2100      	movs	r1, #0
   2752c:	4668      	mov	r0, sp
   2752e:	f013 f823 	bl	3a578 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   27532:	2200      	movs	r2, #0
   27534:	4621      	mov	r1, r4
   27536:	4640      	mov	r0, r8
   27538:	f7ff fdc4 	bl	270c4 <bt_att_create_pdu>
   2753c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2753e:	b348      	cbz	r0, 27594 <att_read_rsp+0x88>
	data.offset = offset;
   27540:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   27544:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   27548:	2301      	movs	r3, #1
   2754a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2754e:	4a12      	ldr	r2, [pc, #72]	; (27598 <att_read_rsp+0x8c>)
	data.chan = chan;
   27550:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   27552:	466b      	mov	r3, sp
   27554:	4631      	mov	r1, r6
   27556:	4630      	mov	r0, r6
   27558:	f011 fad9 	bl	38b0e <bt_gatt_foreach_attr>
	if (data.err) {
   2755c:	f89d 400c 	ldrb.w	r4, [sp, #12]
   27560:	b174      	cbz	r4, 27580 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   27562:	9802      	ldr	r0, [sp, #8]
   27564:	f002 fc36 	bl	29dd4 <net_buf_unref>
	if (!req) {
   27568:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2756c:	4632      	mov	r2, r6
   2756e:	4639      	mov	r1, r7
   27570:	4628      	mov	r0, r5
   27572:	f7ff fc6f 	bl	26e54 <send_err_rsp.part.0>
		return 0;
   27576:	2400      	movs	r4, #0
}
   27578:	4620      	mov	r0, r4
   2757a:	b004      	add	sp, #16
   2757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   27580:	4a06      	ldr	r2, [pc, #24]	; (2759c <att_read_rsp+0x90>)
   27582:	9902      	ldr	r1, [sp, #8]
   27584:	4628      	mov	r0, r5
   27586:	f011 fa79 	bl	38a7c <bt_att_chan_send_rsp>
	return 0;
   2758a:	e7f5      	b.n	27578 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2758c:	2412      	movs	r4, #18
   2758e:	e7f3      	b.n	27578 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   27590:	2401      	movs	r4, #1
   27592:	e7f1      	b.n	27578 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   27594:	240e      	movs	r4, #14
   27596:	e7ef      	b.n	27578 <att_read_rsp+0x6c>
   27598:	00038ec9 	.word	0x00038ec9
   2759c:	00038bfd 	.word	0x00038bfd

000275a0 <att_read_type_req>:
{
   275a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   275a4:	7b0c      	ldrb	r4, [r1, #12]
   275a6:	3c04      	subs	r4, #4
   275a8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   275aa:	2c02      	cmp	r4, #2
{
   275ac:	4605      	mov	r5, r0
   275ae:	b08c      	sub	sp, #48	; 0x30
   275b0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   275b2:	d001      	beq.n	275b8 <att_read_type_req+0x18>
   275b4:	2c10      	cmp	r4, #16
   275b6:	d150      	bne.n	2765a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   275b8:	2104      	movs	r1, #4
   275ba:	3008      	adds	r0, #8
   275bc:	f002 fd18 	bl	29ff0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   275c0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   275c4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   275c6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   275c8:	1d01      	adds	r1, r0, #4
   275ca:	4622      	mov	r2, r4
   275cc:	4640      	mov	r0, r8
   275ce:	f010 fdbe 	bl	3814e <bt_uuid_create>
   275d2:	b188      	cbz	r0, 275f8 <att_read_type_req+0x58>
	if (!start || !end) {
   275d4:	b19e      	cbz	r6, 275fe <att_read_type_req+0x5e>
   275d6:	b18f      	cbz	r7, 275fc <att_read_type_req+0x5c>
	if (start > end) {
   275d8:	42be      	cmp	r6, r7
   275da:	d810      	bhi.n	275fe <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   275dc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   275de:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   275e0:	2100      	movs	r1, #0
   275e2:	eb0d 0002 	add.w	r0, sp, r2
   275e6:	f012 ffc7 	bl	3a578 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   275ea:	2201      	movs	r2, #1
   275ec:	2109      	movs	r1, #9
   275ee:	4620      	mov	r0, r4
   275f0:	f7ff fd68 	bl	270c4 <bt_att_create_pdu>
   275f4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   275f6:	b968      	cbnz	r0, 27614 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   275f8:	240e      	movs	r4, #14
   275fa:	e007      	b.n	2760c <att_read_type_req+0x6c>
			*err = 0U;
   275fc:	463e      	mov	r6, r7
	if (!req) {
   275fe:	2301      	movs	r3, #1
   27600:	4632      	mov	r2, r6
   27602:	2108      	movs	r1, #8
   27604:	4628      	mov	r0, r5
   27606:	f7ff fc25 	bl	26e54 <send_err_rsp.part.0>
		return 0;
   2760a:	2400      	movs	r4, #0
}
   2760c:	4620      	mov	r0, r4
   2760e:	b00c      	add	sp, #48	; 0x30
   27610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   27614:	2101      	movs	r1, #1
   27616:	3008      	adds	r0, #8
	data.uuid = uuid;
   27618:	e9cd 5806 	strd	r5, r8, [sp, #24]
   2761c:	f002 fd0a 	bl	2a034 <net_buf_simple_add>
	data.rsp->len = 0U;
   27620:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   27624:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   27626:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   27628:	4a0d      	ldr	r2, [pc, #52]	; (27660 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   2762a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   2762e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   27630:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   27634:	4630      	mov	r0, r6
   27636:	ab06      	add	r3, sp, #24
   27638:	f011 fa69 	bl	38b0e <bt_gatt_foreach_attr>
	if (data.err) {
   2763c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   27640:	b12c      	cbz	r4, 2764e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   27642:	9808      	ldr	r0, [sp, #32]
   27644:	f002 fbc6 	bl	29dd4 <net_buf_unref>
	if (!req) {
   27648:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2764c:	e7d8      	b.n	27600 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2764e:	4a05      	ldr	r2, [pc, #20]	; (27664 <att_read_type_req+0xc4>)
   27650:	9908      	ldr	r1, [sp, #32]
   27652:	4628      	mov	r0, r5
   27654:	f011 fa12 	bl	38a7c <bt_att_chan_send_rsp>
	return 0;
   27658:	e7d8      	b.n	2760c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   2765a:	2404      	movs	r4, #4
   2765c:	e7d6      	b.n	2760c <att_read_type_req+0x6c>
   2765e:	bf00      	nop
   27660:	00026bc9 	.word	0x00026bc9
   27664:	00038bfd 	.word	0x00038bfd

00027668 <att_find_type_req>:
{
   27668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2766c:	4688      	mov	r8, r1
   2766e:	b086      	sub	sp, #24
   27670:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   27672:	2106      	movs	r1, #6
   27674:	f108 0008 	add.w	r0, r8, #8
   27678:	f002 fcba 	bl	29ff0 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2767c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   2767e:	b317      	cbz	r7, 276c6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   27680:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   27684:	f1b9 0f00 	cmp.w	r9, #0
   27688:	d01c      	beq.n	276c4 <att_find_type_req+0x5c>
	if (start > end) {
   2768a:	45b9      	cmp	r9, r7
   2768c:	d31b      	bcc.n	276c6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   2768e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   27690:	f8ad 3002 	strh.w	r3, [sp, #2]
   27694:	2400      	movs	r4, #0
   27696:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2769a:	a901      	add	r1, sp, #4
   2769c:	4668      	mov	r0, sp
	value = buf->data;
   2769e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   276a2:	f88d 4000 	strb.w	r4, [sp]
   276a6:	f88d 4004 	strb.w	r4, [sp, #4]
   276aa:	f8ad 3006 	strh.w	r3, [sp, #6]
   276ae:	f010 fd24 	bl	380fa <bt_uuid_cmp>
   276b2:	4606      	mov	r6, r0
   276b4:	b190      	cbz	r0, 276dc <att_find_type_req+0x74>
	if (!req) {
   276b6:	230a      	movs	r3, #10
   276b8:	463a      	mov	r2, r7
   276ba:	2106      	movs	r1, #6
   276bc:	4628      	mov	r0, r5
   276be:	f7ff fbc9 	bl	26e54 <send_err_rsp.part.0>
		return 0;
   276c2:	e007      	b.n	276d4 <att_find_type_req+0x6c>
			*err = 0U;
   276c4:	464f      	mov	r7, r9
	if (!req) {
   276c6:	2301      	movs	r3, #1
   276c8:	463a      	mov	r2, r7
   276ca:	2106      	movs	r1, #6
   276cc:	4628      	mov	r0, r5
   276ce:	f7ff fbc1 	bl	26e54 <send_err_rsp.part.0>
		return 0;
   276d2:	2400      	movs	r4, #0
}
   276d4:	4620      	mov	r0, r4
   276d6:	b006      	add	sp, #24
   276d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   276dc:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   276e0:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   276e4:	4601      	mov	r1, r0
   276e6:	2214      	movs	r2, #20
   276e8:	a801      	add	r0, sp, #4
   276ea:	f012 ff45 	bl	3a578 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   276ee:	4632      	mov	r2, r6
   276f0:	2107      	movs	r1, #7
   276f2:	4640      	mov	r0, r8
   276f4:	f7ff fce6 	bl	270c4 <bt_att_create_pdu>
   276f8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   276fa:	b1e0      	cbz	r0, 27736 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   276fc:	230a      	movs	r3, #10
   276fe:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   27702:	4a0e      	ldr	r2, [pc, #56]	; (2773c <att_find_type_req+0xd4>)
	data.value_len = value_len;
   27704:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   27708:	ab01      	add	r3, sp, #4
   2770a:	4649      	mov	r1, r9
   2770c:	4638      	mov	r0, r7
	data.value = value;
   2770e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   27712:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   27714:	f011 f9fb 	bl	38b0e <bt_gatt_foreach_attr>
	if (data.err) {
   27718:	f89d 4015 	ldrb.w	r4, [sp, #21]
   2771c:	b12c      	cbz	r4, 2772a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   2771e:	9802      	ldr	r0, [sp, #8]
   27720:	f002 fb58 	bl	29dd4 <net_buf_unref>
	if (!req) {
   27724:	f89d 3015 	ldrb.w	r3, [sp, #21]
   27728:	e7ce      	b.n	276c8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2772a:	4a05      	ldr	r2, [pc, #20]	; (27740 <att_find_type_req+0xd8>)
   2772c:	9902      	ldr	r1, [sp, #8]
   2772e:	4628      	mov	r0, r5
   27730:	f011 f9a4 	bl	38a7c <bt_att_chan_send_rsp>
	return 0;
   27734:	e7ce      	b.n	276d4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   27736:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   27738:	e7cc      	b.n	276d4 <att_find_type_req+0x6c>
   2773a:	bf00      	nop
   2773c:	00026875 	.word	0x00026875
   27740:	00038bfd 	.word	0x00038bfd

00027744 <att_find_info_req>:
{
   27744:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   27746:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   27748:	881e      	ldrh	r6, [r3, #0]
{
   2774a:	b085      	sub	sp, #20
   2774c:	4605      	mov	r5, r0
	if (!start || !end) {
   2774e:	b19e      	cbz	r6, 27778 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   27750:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   27752:	b184      	cbz	r4, 27776 <att_find_info_req+0x32>
	if (start > end) {
   27754:	42a6      	cmp	r6, r4
   27756:	d80f      	bhi.n	27778 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   27758:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   2775a:	2210      	movs	r2, #16
   2775c:	2100      	movs	r1, #0
   2775e:	4668      	mov	r0, sp
   27760:	f012 ff0a 	bl	3a578 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   27764:	2200      	movs	r2, #0
   27766:	2105      	movs	r1, #5
   27768:	4638      	mov	r0, r7
   2776a:	f7ff fcab 	bl	270c4 <bt_att_create_pdu>
   2776e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   27770:	b958      	cbnz	r0, 2778a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   27772:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   27774:	e007      	b.n	27786 <att_find_info_req+0x42>
			*err = 0U;
   27776:	4626      	mov	r6, r4
	if (!req) {
   27778:	2301      	movs	r3, #1
   2777a:	4632      	mov	r2, r6
   2777c:	2104      	movs	r1, #4
   2777e:	4628      	mov	r0, r5
   27780:	f7ff fb68 	bl	26e54 <send_err_rsp.part.0>
	return 0;
   27784:	2000      	movs	r0, #0
}
   27786:	b005      	add	sp, #20
   27788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   2778a:	4621      	mov	r1, r4
   2778c:	4a09      	ldr	r2, [pc, #36]	; (277b4 <att_find_info_req+0x70>)
	data.chan = chan;
   2778e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   27790:	466b      	mov	r3, sp
   27792:	4630      	mov	r0, r6
   27794:	f011 f9bb 	bl	38b0e <bt_gatt_foreach_attr>
	if (!data.rsp) {
   27798:	9c02      	ldr	r4, [sp, #8]
   2779a:	b924      	cbnz	r4, 277a6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   2779c:	9801      	ldr	r0, [sp, #4]
   2779e:	f002 fb19 	bl	29dd4 <net_buf_unref>
	if (!req) {
   277a2:	230a      	movs	r3, #10
   277a4:	e7e9      	b.n	2777a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   277a6:	4a04      	ldr	r2, [pc, #16]	; (277b8 <att_find_info_req+0x74>)
   277a8:	9901      	ldr	r1, [sp, #4]
   277aa:	4628      	mov	r0, r5
   277ac:	f011 f966 	bl	38a7c <bt_att_chan_send_rsp>
   277b0:	e7e8      	b.n	27784 <att_find_info_req+0x40>
   277b2:	bf00      	nop
   277b4:	00038b5b 	.word	0x00038b5b
   277b8:	00038bfd 	.word	0x00038bfd

000277bc <att_mtu_req>:
{
   277bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   277be:	6803      	ldr	r3, [r0, #0]
{
   277c0:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   277c2:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   277c4:	f3bf 8f5b 	dmb	ish
   277c8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   277cc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   277d0:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   277d4:	071b      	lsls	r3, r3, #28
   277d6:	d422      	bmi.n	2781e <att_mtu_req+0x62>
	mtu_client = sys_le16_to_cpu(req->mtu);
   277d8:	688b      	ldr	r3, [r1, #8]
   277da:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   277dc:	2e16      	cmp	r6, #22
   277de:	d920      	bls.n	27822 <att_mtu_req+0x66>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   277e0:	2202      	movs	r2, #2
   277e2:	2103      	movs	r1, #3
   277e4:	f7ff fc6e 	bl	270c4 <bt_att_create_pdu>
	if (!pdu) {
   277e8:	4607      	mov	r7, r0
   277ea:	b1e0      	cbz	r0, 27826 <att_mtu_req+0x6a>
	return net_buf_simple_add(&buf->b, len);
   277ec:	2102      	movs	r1, #2
   277ee:	3008      	adds	r0, #8
   277f0:	f002 fc20 	bl	2a034 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   277f4:	f06f 037b 	mvn.w	r3, #123	; 0x7b
   277f8:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   277fa:	4a0c      	ldr	r2, [pc, #48]	; (2782c <att_mtu_req+0x70>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   277fc:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   277fe:	4639      	mov	r1, r7
   27800:	4620      	mov	r0, r4
   27802:	f011 f93b 	bl	38a7c <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   27806:	2e84      	cmp	r6, #132	; 0x84
   27808:	bf28      	it	cs
   2780a:	2684      	movcs	r6, #132	; 0x84
	att_chan_mtu_updated(chan);
   2780c:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2780e:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   27812:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   27816:	f011 f93f 	bl	38a98 <att_chan_mtu_updated>
	return 0;
   2781a:	4628      	mov	r0, r5
}
   2781c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2781e:	2006      	movs	r0, #6
   27820:	e7fc      	b.n	2781c <att_mtu_req+0x60>
		return BT_ATT_ERR_INVALID_PDU;
   27822:	2004      	movs	r0, #4
   27824:	e7fa      	b.n	2781c <att_mtu_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   27826:	200e      	movs	r0, #14
   27828:	e7f8      	b.n	2781c <att_mtu_req+0x60>
   2782a:	bf00      	nop
   2782c:	00038bfd 	.word	0x00038bfd

00027830 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   27830:	b513      	push	{r0, r1, r4, lr}
   27832:	4602      	mov	r2, r0
   27834:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   27836:	4808      	ldr	r0, [pc, #32]	; (27858 <bt_att_req_alloc+0x28>)
   27838:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   2783a:	2400      	movs	r4, #0
   2783c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   2783e:	f007 fdaf 	bl	2f3a0 <k_mem_slab_alloc>
   27842:	4601      	mov	r1, r0
   27844:	b930      	cbnz	r0, 27854 <bt_att_req_alloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   27846:	9801      	ldr	r0, [sp, #4]
   27848:	2210      	movs	r2, #16
   2784a:	f012 fe95 	bl	3a578 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   2784e:	9801      	ldr	r0, [sp, #4]
}
   27850:	b002      	add	sp, #8
   27852:	bd10      	pop	{r4, pc}
		return NULL;
   27854:	4620      	mov	r0, r4
   27856:	e7fb      	b.n	27850 <bt_att_req_alloc+0x20>
   27858:	20000b18 	.word	0x20000b18

0002785c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   2785c:	b507      	push	{r0, r1, r2, lr}
   2785e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   27860:	6880      	ldr	r0, [r0, #8]
   27862:	b120      	cbz	r0, 2786e <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   27864:	f002 fab6 	bl	29dd4 <net_buf_unref>
		req->buf = NULL;
   27868:	9b01      	ldr	r3, [sp, #4]
   2786a:	2200      	movs	r2, #0
   2786c:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   2786e:	4803      	ldr	r0, [pc, #12]	; (2787c <bt_att_req_free+0x20>)
   27870:	a901      	add	r1, sp, #4
   27872:	f007 fe01 	bl	2f478 <k_mem_slab_free>
}
   27876:	b003      	add	sp, #12
   27878:	f85d fb04 	ldr.w	pc, [sp], #4
   2787c:	20000b18 	.word	0x20000b18

00027880 <att_handle_rsp>:
{
   27880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27884:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   27886:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   2788a:	460f      	mov	r7, r1
   2788c:	4690      	mov	r8, r2
   2788e:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   27890:	f009 f858 	bl	30944 <k_work_cancel_delayable>
	if (!chan->req) {
   27894:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
   27898:	b9e5      	cbnz	r5, 278d4 <att_handle_rsp+0x54>
   2789a:	4b19      	ldr	r3, [pc, #100]	; (27900 <att_handle_rsp+0x80>)
   2789c:	4819      	ldr	r0, [pc, #100]	; (27904 <att_handle_rsp+0x84>)
		BT_WARN("No pending ATT request");
   2789e:	491a      	ldr	r1, [pc, #104]	; (27908 <att_handle_rsp+0x88>)
   278a0:	1ac0      	subs	r0, r0, r3
   278a2:	08c0      	lsrs	r0, r0, #3
   278a4:	0180      	lsls	r0, r0, #6
   278a6:	f040 0002 	orr.w	r0, r0, #2
   278aa:	f00f fdf1 	bl	37490 <log_string_sync>
	bt_att_func_t func = NULL;
   278ae:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
   278b0:	6820      	ldr	r0, [r4, #0]
   278b2:	f011 fa6e 	bl	38d92 <att_req_send_process>
	if (func) {
   278b6:	f1ba 0f00 	cmp.w	sl, #0
   278ba:	d007      	beq.n	278cc <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   278bc:	6820      	ldr	r0, [r4, #0]
   278be:	f8cd 9000 	str.w	r9, [sp]
   278c2:	6800      	ldr	r0, [r0, #0]
   278c4:	4643      	mov	r3, r8
   278c6:	463a      	mov	r2, r7
   278c8:	4631      	mov	r1, r6
   278ca:	47d0      	blx	sl
}
   278cc:	2000      	movs	r0, #0
   278ce:	b003      	add	sp, #12
   278d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   278d4:	4b0d      	ldr	r3, [pc, #52]	; (2790c <att_handle_rsp+0x8c>)
   278d6:	429d      	cmp	r5, r3
   278d8:	f04f 0b00 	mov.w	fp, #0
   278dc:	d103      	bne.n	278e6 <att_handle_rsp+0x66>
		chan->req = NULL;
   278de:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
	bt_att_func_t func = NULL;
   278e2:	46da      	mov	sl, fp
		goto process;
   278e4:	e7e4      	b.n	278b0 <att_handle_rsp+0x30>
	func = chan->req->func;
   278e6:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
   278ea:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
   278ee:	4628      	mov	r0, r5
	params = chan->req->user_data;
   278f0:	f8d5 900c 	ldr.w	r9, [r5, #12]
	bt_att_req_free(chan->req);
   278f4:	f7ff ffb2 	bl	2785c <bt_att_req_free>
	chan->req = NULL;
   278f8:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
   278fc:	e7d8      	b.n	278b0 <att_handle_rsp+0x30>
   278fe:	bf00      	nop
   27900:	0003b448 	.word	0x0003b448
   27904:	0003b460 	.word	0x0003b460
   27908:	0003ee04 	.word	0x0003ee04
   2790c:	200029b4 	.word	0x200029b4

00027910 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   27910:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   27914:	b143      	cbz	r3, 27928 <att_error_rsp+0x18>
   27916:	4a05      	ldr	r2, [pc, #20]	; (2792c <att_error_rsp+0x1c>)
   27918:	4293      	cmp	r3, r2
   2791a:	d005      	beq.n	27928 <att_error_rsp+0x18>
	err = rsp->error;
   2791c:	688b      	ldr	r3, [r1, #8]
   2791e:	78db      	ldrb	r3, [r3, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   27920:	2200      	movs	r2, #0
   27922:	4611      	mov	r1, r2
   27924:	f7ff bfac 	b.w	27880 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   27928:	230e      	movs	r3, #14
   2792a:	e7f9      	b.n	27920 <att_error_rsp+0x10>
   2792c:	200029b4 	.word	0x200029b4

00027930 <bt_att_disconnected>:
{
   27930:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   27932:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   27936:	b085      	sub	sp, #20
   27938:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2793a:	2d00      	cmp	r5, #0
   2793c:	d036      	beq.n	279ac <bt_att_disconnected+0x7c>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2793e:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   27942:	f105 0030 	add.w	r0, r5, #48	; 0x30
   27946:	f010 ffe4 	bl	38912 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2794a:	f1a4 0608 	sub.w	r6, r4, #8
   2794e:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   27952:	2200      	movs	r2, #0
   27954:	2300      	movs	r3, #0
   27956:	4638      	mov	r0, r7
   27958:	f002 f8a8 	bl	29aac <net_buf_get>
   2795c:	4602      	mov	r2, r0
   2795e:	bb38      	cbnz	r0, 279b0 <bt_att_disconnected+0x80>
	if (chan->req) {
   27960:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   27964:	b123      	cbz	r3, 27970 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   27966:	4601      	mov	r1, r0
   27968:	230e      	movs	r3, #14
   2796a:	4630      	mov	r0, r6
   2796c:	f7ff ff88 	bl	27880 <att_handle_rsp>
	chan->att = NULL;
   27970:	2300      	movs	r3, #0
   27972:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   27976:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   27978:	b9c3      	cbnz	r3, 279ac <bt_att_disconnected+0x7c>
	att_reset(att);
   2797a:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_slist_get(&att->prep_queue))) {
   2797c:	9803      	ldr	r0, [sp, #12]
   2797e:	3028      	adds	r0, #40	; 0x28
   27980:	f002 f968 	bl	29c54 <net_buf_slist_get>
   27984:	b9b8      	cbnz	r0, 279b6 <bt_att_disconnected+0x86>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   27986:	9803      	ldr	r0, [sp, #12]
   27988:	2200      	movs	r2, #0
   2798a:	2300      	movs	r3, #0
   2798c:	300c      	adds	r0, #12
   2798e:	f002 f88d 	bl	29aac <net_buf_get>
   27992:	b998      	cbnz	r0, 279bc <bt_att_disconnected+0x8c>
	att->conn = NULL;
   27994:	9a03      	ldr	r2, [sp, #12]
   27996:	6010      	str	r0, [r2, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   27998:	9b03      	ldr	r3, [sp, #12]
Z_GENLIST_IS_EMPTY(slist)
   2799a:	685d      	ldr	r5, [r3, #4]
   2799c:	b98d      	cbnz	r5, 279c2 <bt_att_disconnected+0x92>
	k_mem_slab_free(&att_slab, (void **)&att);
   2799e:	4812      	ldr	r0, [pc, #72]	; (279e8 <bt_att_disconnected+0xb8>)
   279a0:	a903      	add	r1, sp, #12
   279a2:	f007 fd69 	bl	2f478 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   279a6:	6820      	ldr	r0, [r4, #0]
   279a8:	f001 fe20 	bl	295ec <bt_gatt_disconnected>
}
   279ac:	b005      	add	sp, #20
   279ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   279b0:	f002 fa10 	bl	29dd4 <net_buf_unref>
   279b4:	e7cd      	b.n	27952 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   279b6:	f002 fa0d 	bl	29dd4 <net_buf_unref>
   279ba:	e7df      	b.n	2797c <bt_att_disconnected+0x4c>
		net_buf_unref(buf);
   279bc:	f002 fa0a 	bl	29dd4 <net_buf_unref>
   279c0:	e7e1      	b.n	27986 <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   279c2:	6899      	ldr	r1, [r3, #8]
		if (req->func) {
   279c4:	686e      	ldr	r6, [r5, #4]
   279c6:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   279c8:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   279ca:	428d      	cmp	r5, r1
	list->tail = node;
   279cc:	bf08      	it	eq
   279ce:	609a      	streq	r2, [r3, #8]
   279d0:	b136      	cbz	r6, 279e0 <bt_att_disconnected+0xb0>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   279d2:	68eb      	ldr	r3, [r5, #12]
   279d4:	9300      	str	r3, [sp, #0]
   279d6:	2300      	movs	r3, #0
   279d8:	461a      	mov	r2, r3
   279da:	210e      	movs	r1, #14
   279dc:	4618      	mov	r0, r3
   279de:	47b0      	blx	r6
		bt_att_req_free(req);
   279e0:	4628      	mov	r0, r5
   279e2:	f7ff ff3b 	bl	2785c <bt_att_req_free>
   279e6:	e7d7      	b.n	27998 <bt_att_disconnected+0x68>
   279e8:	20000ab8 	.word	0x20000ab8

000279ec <att_timeout>:
{
   279ec:	b510      	push	{r4, lr}
   279ee:	4b08      	ldr	r3, [pc, #32]	; (27a10 <att_timeout+0x24>)
	BT_ERR("ATT Timeout");
   279f0:	4908      	ldr	r1, [pc, #32]	; (27a14 <att_timeout+0x28>)
{
   279f2:	4604      	mov	r4, r0
   279f4:	4808      	ldr	r0, [pc, #32]	; (27a18 <att_timeout+0x2c>)
   279f6:	1a1b      	subs	r3, r3, r0
   279f8:	08db      	lsrs	r3, r3, #3
	BT_ERR("ATT Timeout");
   279fa:	019b      	lsls	r3, r3, #6
   279fc:	f043 0001 	orr.w	r0, r3, #1
   27a00:	f00f fd46 	bl	37490 <log_string_sync>
	bt_att_disconnected(&chan->chan.chan);
   27a04:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
}
   27a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   27a0c:	f7ff bf90 	b.w	27930 <bt_att_disconnected>
   27a10:	0003b460 	.word	0x0003b460
   27a14:	0003ee1b 	.word	0x0003ee1b
   27a18:	0003b448 	.word	0x0003b448

00027a1c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   27a1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27a20:	460c      	mov	r4, r1
   27a22:	4617      	mov	r7, r2
   27a24:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   27a26:	4605      	mov	r5, r0
   27a28:	b958      	cbnz	r0, 27a42 <bt_att_send+0x26>
   27a2a:	492f      	ldr	r1, [pc, #188]	; (27ae8 <bt_att_send+0xcc>)
   27a2c:	482f      	ldr	r0, [pc, #188]	; (27aec <bt_att_send+0xd0>)
   27a2e:	4a30      	ldr	r2, [pc, #192]	; (27af0 <bt_att_send+0xd4>)
   27a30:	f640 434a 	movw	r3, #3146	; 0xc4a
   27a34:	f00f fb71 	bl	3711a <printk>
   27a38:	482d      	ldr	r0, [pc, #180]	; (27af0 <bt_att_send+0xd4>)
   27a3a:	f640 414a 	movw	r1, #3146	; 0xc4a
   27a3e:	f00f fd12 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   27a42:	b95c      	cbnz	r4, 27a5c <bt_att_send+0x40>
   27a44:	492b      	ldr	r1, [pc, #172]	; (27af4 <bt_att_send+0xd8>)
   27a46:	4829      	ldr	r0, [pc, #164]	; (27aec <bt_att_send+0xd0>)
   27a48:	4a29      	ldr	r2, [pc, #164]	; (27af0 <bt_att_send+0xd4>)
   27a4a:	f640 434b 	movw	r3, #3147	; 0xc4b
   27a4e:	f00f fb64 	bl	3711a <printk>
   27a52:	4827      	ldr	r0, [pc, #156]	; (27af0 <bt_att_send+0xd4>)
   27a54:	f640 414b 	movw	r1, #3147	; 0xc4b
   27a58:	f00f fd05 	bl	37466 <assert_post_action>

	att = att_get(conn);
   27a5c:	4628      	mov	r0, r5
   27a5e:	f7fe ffb9 	bl	269d4 <att_get>
	if (!att) {
   27a62:	4606      	mov	r6, r0
   27a64:	b938      	cbnz	r0, 27a76 <bt_att_send+0x5a>
		net_buf_unref(buf);
   27a66:	4620      	mov	r0, r4
   27a68:	f002 f9b4 	bl	29dd4 <net_buf_unref>
		return -ENOTCONN;
   27a6c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   27a70:	b002      	add	sp, #8
   27a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   27a76:	b147      	cbz	r7, 27a8a <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   27a78:	f8cd 8000 	str.w	r8, [sp]
   27a7c:	463b      	mov	r3, r7
   27a7e:	4622      	mov	r2, r4
   27a80:	2104      	movs	r1, #4
   27a82:	4628      	mov	r0, r5
   27a84:	f010 ff01 	bl	3888a <bt_l2cap_send_cb>
   27a88:	e7f2      	b.n	27a70 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   27a8a:	f100 070c 	add.w	r7, r0, #12
   27a8e:	4621      	mov	r1, r4
   27a90:	4638      	mov	r0, r7
   27a92:	f002 f96b 	bl	29d6c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   27a96:	2200      	movs	r2, #0
   27a98:	2300      	movs	r3, #0
   27a9a:	4638      	mov	r0, r7
   27a9c:	f002 f806 	bl	29aac <net_buf_get>
	if (!buf) {
   27aa0:	4605      	mov	r5, r0
   27aa2:	b908      	cbnz	r0, 27aa8 <bt_att_send+0x8c>
	return 0;
   27aa4:	2000      	movs	r0, #0
   27aa6:	e7e3      	b.n	27a70 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27aa8:	6b33      	ldr	r3, [r6, #48]	; 0x30
   27aaa:	b1c3      	cbz	r3, 27ade <bt_att_send+0xc2>
   27aac:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   27ab0:	d015      	beq.n	27ade <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27ab2:	681c      	ldr	r4, [r3, #0]
   27ab4:	b10c      	cbz	r4, 27aba <bt_att_send+0x9e>
   27ab6:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   27aba:	2200      	movs	r2, #0
   27abc:	4629      	mov	r1, r5
   27abe:	f7fe fe1f 	bl	26700 <chan_send>
		if (err >= 0) {
   27ac2:	2800      	cmp	r0, #0
   27ac4:	daee      	bge.n	27aa4 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27ac6:	b154      	cbz	r4, 27ade <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27ac8:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   27acc:	d004      	beq.n	27ad8 <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27ace:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   27ad2:	b10b      	cbz	r3, 27ad8 <bt_att_send+0xbc>
   27ad4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   27ad8:	4620      	mov	r0, r4
   27ada:	461c      	mov	r4, r3
   27adc:	e7ed      	b.n	27aba <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   27ade:	4629      	mov	r1, r5
   27ae0:	4638      	mov	r0, r7
   27ae2:	f012 fbbc 	bl	3a25e <k_queue_prepend>
   27ae6:	e7dd      	b.n	27aa4 <bt_att_send+0x88>
   27ae8:	0003ea45 	.word	0x0003ea45
   27aec:	0003c48a 	.word	0x0003c48a
   27af0:	0003ec00 	.word	0x0003ec00
   27af4:	0003e07b 	.word	0x0003e07b

00027af8 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   27af8:	b538      	push	{r3, r4, r5, lr}
   27afa:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   27afc:	4605      	mov	r5, r0
   27afe:	b958      	cbnz	r0, 27b18 <bt_att_req_send+0x20>
   27b00:	4916      	ldr	r1, [pc, #88]	; (27b5c <bt_att_req_send+0x64>)
   27b02:	4817      	ldr	r0, [pc, #92]	; (27b60 <bt_att_req_send+0x68>)
   27b04:	4a17      	ldr	r2, [pc, #92]	; (27b64 <bt_att_req_send+0x6c>)
   27b06:	f640 4367 	movw	r3, #3175	; 0xc67
   27b0a:	f00f fb06 	bl	3711a <printk>
   27b0e:	4815      	ldr	r0, [pc, #84]	; (27b64 <bt_att_req_send+0x6c>)
   27b10:	f640 4167 	movw	r1, #3175	; 0xc67
   27b14:	f00f fca7 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(req);
   27b18:	b95c      	cbnz	r4, 27b32 <bt_att_req_send+0x3a>
   27b1a:	4913      	ldr	r1, [pc, #76]	; (27b68 <bt_att_req_send+0x70>)
   27b1c:	4810      	ldr	r0, [pc, #64]	; (27b60 <bt_att_req_send+0x68>)
   27b1e:	4a11      	ldr	r2, [pc, #68]	; (27b64 <bt_att_req_send+0x6c>)
   27b20:	f640 4368 	movw	r3, #3176	; 0xc68
   27b24:	f00f faf9 	bl	3711a <printk>
   27b28:	480e      	ldr	r0, [pc, #56]	; (27b64 <bt_att_req_send+0x6c>)
   27b2a:	f640 4168 	movw	r1, #3176	; 0xc68
   27b2e:	f00f fc9a 	bl	37466 <assert_post_action>

	att = att_get(conn);
   27b32:	4628      	mov	r0, r5
   27b34:	f7fe ff4e 	bl	269d4 <att_get>
	if (!att) {
   27b38:	b160      	cbz	r0, 27b54 <bt_att_req_send+0x5c>
	parent->next = child;
   27b3a:	2300      	movs	r3, #0
   27b3c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   27b3e:	6883      	ldr	r3, [r0, #8]
   27b40:	b92b      	cbnz	r3, 27b4e <bt_att_req_send+0x56>
	list->head = node;
   27b42:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   27b46:	f011 f924 	bl	38d92 <att_req_send_process>

	return 0;
   27b4a:	2000      	movs	r0, #0
}
   27b4c:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   27b4e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27b50:	6084      	str	r4, [r0, #8]
}
   27b52:	e7f8      	b.n	27b46 <bt_att_req_send+0x4e>
		return -ENOTCONN;
   27b54:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27b58:	e7f8      	b.n	27b4c <bt_att_req_send+0x54>
   27b5a:	bf00      	nop
   27b5c:	0003ea45 	.word	0x0003ea45
   27b60:	0003c48a 	.word	0x0003c48a
   27b64:	0003ec00 	.word	0x0003ec00
   27b68:	0003ec45 	.word	0x0003ec45

00027b6c <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   27b6c:	b510      	push	{r4, lr}
   27b6e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   27b70:	b348      	cbz	r0, 27bc6 <bt_att_req_cancel+0x5a>
   27b72:	b341      	cbz	r1, 27bc6 <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   27b74:	f7fe ff2e 	bl	269d4 <att_get>
	if (!att) {
   27b78:	b328      	cbz	r0, 27bc6 <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27b7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   27b7c:	b15b      	cbz	r3, 27b96 <bt_att_req_cancel+0x2a>
   27b7e:	f5b3 71aa 	subs.w	r1, r3, #340	; 0x154
   27b82:	d008      	beq.n	27b96 <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27b84:	681b      	ldr	r3, [r3, #0]
   27b86:	b10b      	cbz	r3, 27b8c <bt_att_req_cancel+0x20>
   27b88:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
	if (chan->req != req) {
   27b8c:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   27b90:	4294      	cmp	r4, r2
   27b92:	d005      	beq.n	27ba0 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27b94:	b963      	cbnz	r3, 27bb0 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   27b96:	4621      	mov	r1, r4
   27b98:	3004      	adds	r0, #4
   27b9a:	f010 feba 	bl	38912 <sys_slist_find_and_remove>
   27b9e:	e002      	b.n	27ba6 <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   27ba0:	4b09      	ldr	r3, [pc, #36]	; (27bc8 <bt_att_req_cancel+0x5c>)
   27ba2:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc

	bt_att_req_free(req);
   27ba6:	4620      	mov	r0, r4
}
   27ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   27bac:	f7ff be56 	b.w	2785c <bt_att_req_free>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27bb0:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   27bb4:	d004      	beq.n	27bc0 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27bb6:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27bba:	b10a      	cbz	r2, 27bc0 <bt_att_req_cancel+0x54>
   27bbc:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   27bc0:	4619      	mov	r1, r3
   27bc2:	4613      	mov	r3, r2
   27bc4:	e7e2      	b.n	27b8c <bt_att_req_cancel+0x20>
}
   27bc6:	bd10      	pop	{r4, pc}
   27bc8:	200029b4 	.word	0x200029b4

00027bcc <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   27bcc:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   27bce:	490b      	ldr	r1, [pc, #44]	; (27bfc <db_hash_set+0x30>)
{
   27bd0:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   27bd2:	4618      	mov	r0, r3
   27bd4:	2210      	movs	r2, #16
   27bd6:	47a0      	blx	r4
	if (len < 0) {
   27bd8:	1e04      	subs	r4, r0, #0
   27bda:	da0c      	bge.n	27bf6 <db_hash_set+0x2a>
   27bdc:	4808      	ldr	r0, [pc, #32]	; (27c00 <db_hash_set+0x34>)
   27bde:	4b09      	ldr	r3, [pc, #36]	; (27c04 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
   27be0:	4909      	ldr	r1, [pc, #36]	; (27c08 <db_hash_set+0x3c>)
   27be2:	1ac0      	subs	r0, r0, r3
   27be4:	08c0      	lsrs	r0, r0, #3
   27be6:	0180      	lsls	r0, r0, #6
   27be8:	4622      	mov	r2, r4
   27bea:	f040 0001 	orr.w	r0, r0, #1
   27bee:	f00f fc4f 	bl	37490 <log_string_sync>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   27bf2:	4620      	mov	r0, r4
   27bf4:	bd10      	pop	{r4, pc}
	return 0;
   27bf6:	2400      	movs	r4, #0
   27bf8:	e7fb      	b.n	27bf2 <db_hash_set+0x26>
   27bfa:	bf00      	nop
   27bfc:	20001d00 	.word	0x20001d00
   27c00:	0003b478 	.word	0x0003b478
   27c04:	0003b448 	.word	0x0003b448
   27c08:	0003ee2e 	.word	0x0003ee2e

00027c0c <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   27c0c:	2210      	movs	r2, #16
{
   27c0e:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   27c10:	4909      	ldr	r1, [pc, #36]	; (27c38 <db_hash_store+0x2c>)
   27c12:	480a      	ldr	r0, [pc, #40]	; (27c3c <db_hash_store+0x30>)
   27c14:	f7f9 fd24 	bl	21660 <settings_save_one>
	if (err) {
   27c18:	4602      	mov	r2, r0
   27c1a:	b158      	cbz	r0, 27c34 <db_hash_store+0x28>
   27c1c:	4808      	ldr	r0, [pc, #32]	; (27c40 <db_hash_store+0x34>)
   27c1e:	4b09      	ldr	r3, [pc, #36]	; (27c44 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
   27c20:	4909      	ldr	r1, [pc, #36]	; (27c48 <db_hash_store+0x3c>)
   27c22:	1a1b      	subs	r3, r3, r0
   27c24:	08db      	lsrs	r3, r3, #3
   27c26:	019b      	lsls	r3, r3, #6
   27c28:	f043 0001 	orr.w	r0, r3, #1
}
   27c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   27c30:	f00f bc2e 	b.w	37490 <log_string_sync>
}
   27c34:	bd08      	pop	{r3, pc}
   27c36:	bf00      	nop
   27c38:	20001cf0 	.word	0x20001cf0
   27c3c:	0003ee4f 	.word	0x0003ee4f
   27c40:	0003b448 	.word	0x0003b448
   27c44:	0003b478 	.word	0x0003b478
   27c48:	0003ee57 	.word	0x0003ee57

00027c4c <find_cf_cfg>:
{
   27c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27c4e:	4c15      	ldr	r4, [pc, #84]	; (27ca4 <find_cf_cfg+0x58>)
		if (!conn) {
   27c50:	4605      	mov	r5, r0
   27c52:	b140      	cbz	r0, 27c66 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   27c54:	4622      	mov	r2, r4
   27c56:	f812 1b01 	ldrb.w	r1, [r2], #1
   27c5a:	f010 fd2d 	bl	386b8 <bt_conn_is_peer_addr_le>
   27c5e:	b1b0      	cbz	r0, 27c8e <find_cf_cfg+0x42>
}
   27c60:	4620      	mov	r0, r4
   27c62:	b003      	add	sp, #12
   27c64:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   27c66:	9000      	str	r0, [sp, #0]
   27c68:	4669      	mov	r1, sp
   27c6a:	f8cd 0003 	str.w	r0, [sp, #3]
   27c6e:	1c60      	adds	r0, r4, #1
   27c70:	f011 fa5f 	bl	39132 <bt_addr_le_cmp>
   27c74:	2800      	cmp	r0, #0
   27c76:	d0f3      	beq.n	27c60 <find_cf_cfg+0x14>
   27c78:	4669      	mov	r1, sp
   27c7a:	f104 0011 	add.w	r0, r4, #17
   27c7e:	9500      	str	r5, [sp, #0]
   27c80:	f8cd 5003 	str.w	r5, [sp, #3]
   27c84:	f011 fa55 	bl	39132 <bt_addr_le_cmp>
   27c88:	b948      	cbnz	r0, 27c9e <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   27c8a:	3410      	adds	r4, #16
   27c8c:	e7e8      	b.n	27c60 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   27c8e:	7c21      	ldrb	r1, [r4, #16]
   27c90:	f104 0211 	add.w	r2, r4, #17
   27c94:	4628      	mov	r0, r5
   27c96:	f010 fd0f 	bl	386b8 <bt_conn_is_peer_addr_le>
   27c9a:	2800      	cmp	r0, #0
   27c9c:	d1f5      	bne.n	27c8a <find_cf_cfg+0x3e>
	return NULL;
   27c9e:	2400      	movs	r4, #0
   27ca0:	e7de      	b.n	27c60 <find_cf_cfg+0x14>
   27ca2:	bf00      	nop
   27ca4:	200029cc 	.word	0x200029cc

00027ca8 <find_sc_cfg>:
{
   27ca8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   27caa:	4c0d      	ldr	r4, [pc, #52]	; (27ce0 <find_sc_cfg+0x38>)
   27cac:	7823      	ldrb	r3, [r4, #0]
   27cae:	4283      	cmp	r3, r0
{
   27cb0:	4605      	mov	r5, r0
   27cb2:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   27cb4:	d009      	beq.n	27cca <find_sc_cfg+0x22>
   27cb6:	7b23      	ldrb	r3, [r4, #12]
   27cb8:	42ab      	cmp	r3, r5
   27cba:	d10f      	bne.n	27cdc <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   27cbc:	4809      	ldr	r0, [pc, #36]	; (27ce4 <find_sc_cfg+0x3c>)
   27cbe:	4631      	mov	r1, r6
   27cc0:	f011 fa37 	bl	39132 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   27cc4:	b950      	cbnz	r0, 27cdc <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   27cc6:	2001      	movs	r0, #1
   27cc8:	e004      	b.n	27cd4 <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   27cca:	1c60      	adds	r0, r4, #1
   27ccc:	f011 fa31 	bl	39132 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   27cd0:	2800      	cmp	r0, #0
   27cd2:	d1f0      	bne.n	27cb6 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   27cd4:	230c      	movs	r3, #12
   27cd6:	fb03 4000 	mla	r0, r3, r0, r4
   27cda:	e000      	b.n	27cde <find_sc_cfg+0x36>
	return NULL;
   27cdc:	2000      	movs	r0, #0
}
   27cde:	bd70      	pop	{r4, r5, r6, pc}
   27ce0:	20003742 	.word	0x20003742
   27ce4:	2000374f 	.word	0x2000374f

00027ce8 <gatt_sub_find>:
{
   27ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27cea:	4c15      	ldr	r4, [pc, #84]	; (27d40 <gatt_sub_find+0x58>)
		if (!conn) {
   27cec:	4605      	mov	r5, r0
   27cee:	b140      	cbz	r0, 27d02 <gatt_sub_find+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   27cf0:	4622      	mov	r2, r4
   27cf2:	f812 1b01 	ldrb.w	r1, [r2], #1
   27cf6:	f010 fcdf 	bl	386b8 <bt_conn_is_peer_addr_le>
   27cfa:	b1b0      	cbz	r0, 27d2a <gatt_sub_find+0x42>
}
   27cfc:	4620      	mov	r0, r4
   27cfe:	b003      	add	sp, #12
   27d00:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   27d02:	9000      	str	r0, [sp, #0]
   27d04:	4669      	mov	r1, sp
   27d06:	f8cd 0003 	str.w	r0, [sp, #3]
   27d0a:	1c60      	adds	r0, r4, #1
   27d0c:	f011 fa11 	bl	39132 <bt_addr_le_cmp>
   27d10:	2800      	cmp	r0, #0
   27d12:	d0f3      	beq.n	27cfc <gatt_sub_find+0x14>
   27d14:	4669      	mov	r1, sp
   27d16:	f104 0011 	add.w	r0, r4, #17
   27d1a:	9500      	str	r5, [sp, #0]
   27d1c:	f8cd 5003 	str.w	r5, [sp, #3]
   27d20:	f011 fa07 	bl	39132 <bt_addr_le_cmp>
   27d24:	b948      	cbnz	r0, 27d3a <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
   27d26:	3410      	adds	r4, #16
   27d28:	e7e8      	b.n	27cfc <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   27d2a:	7c21      	ldrb	r1, [r4, #16]
   27d2c:	f104 0211 	add.w	r2, r4, #17
   27d30:	4628      	mov	r0, r5
   27d32:	f010 fcc1 	bl	386b8 <bt_conn_is_peer_addr_le>
   27d36:	2800      	cmp	r0, #0
   27d38:	d1f5      	bne.n	27d26 <gatt_sub_find+0x3e>
	return NULL;
   27d3a:	2400      	movs	r4, #0
   27d3c:	e7de      	b.n	27cfc <gatt_sub_find+0x14>
   27d3e:	bf00      	nop
   27d40:	20002a0c 	.word	0x20002a0c

00027d44 <find_cf_cfg_by_addr>:
{
   27d44:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   27d46:	4c0d      	ldr	r4, [pc, #52]	; (27d7c <find_cf_cfg_by_addr+0x38>)
   27d48:	7823      	ldrb	r3, [r4, #0]
   27d4a:	4283      	cmp	r3, r0
{
   27d4c:	4606      	mov	r6, r0
   27d4e:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   27d50:	d009      	beq.n	27d66 <find_cf_cfg_by_addr+0x22>
   27d52:	7c23      	ldrb	r3, [r4, #16]
   27d54:	42b3      	cmp	r3, r6
   27d56:	d10f      	bne.n	27d78 <find_cf_cfg_by_addr+0x34>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   27d58:	4909      	ldr	r1, [pc, #36]	; (27d80 <find_cf_cfg_by_addr+0x3c>)
   27d5a:	4628      	mov	r0, r5
   27d5c:	f011 f9e9 	bl	39132 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   27d60:	b950      	cbnz	r0, 27d78 <find_cf_cfg_by_addr+0x34>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   27d62:	2001      	movs	r0, #1
   27d64:	e005      	b.n	27d72 <find_cf_cfg_by_addr+0x2e>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   27d66:	1c61      	adds	r1, r4, #1
   27d68:	4628      	mov	r0, r5
   27d6a:	f011 f9e2 	bl	39132 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   27d6e:	2800      	cmp	r0, #0
   27d70:	d1ef      	bne.n	27d52 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   27d72:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   27d76:	e000      	b.n	27d7a <find_cf_cfg_by_addr+0x36>
	return NULL;
   27d78:	2000      	movs	r0, #0
}
   27d7a:	bd70      	pop	{r4, r5, r6, pc}
   27d7c:	200029cc 	.word	0x200029cc
   27d80:	200029dd 	.word	0x200029dd

00027d84 <sc_store>:
{
   27d84:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   27d86:	4605      	mov	r5, r0
{
   27d88:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   27d8a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   27d8e:	4604      	mov	r4, r0
	if (cfg->id) {
   27d90:	b1fa      	cbz	r2, 27dd2 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   27d92:	ae02      	add	r6, sp, #8
   27d94:	2104      	movs	r1, #4
   27d96:	4630      	mov	r0, r6
   27d98:	f00f f923 	bl	36fe2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   27d9c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   27d9e:	4a0e      	ldr	r2, [pc, #56]	; (27dd8 <sc_store+0x54>)
   27da0:	462b      	mov	r3, r5
   27da2:	2124      	movs	r1, #36	; 0x24
   27da4:	a803      	add	r0, sp, #12
   27da6:	f7fb fa1f 	bl	231e8 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   27daa:	2204      	movs	r2, #4
   27dac:	f104 0108 	add.w	r1, r4, #8
   27db0:	a803      	add	r0, sp, #12
   27db2:	f7f9 fc55 	bl	21660 <settings_save_one>
	if (err) {
   27db6:	4602      	mov	r2, r0
   27db8:	b148      	cbz	r0, 27dce <sc_store+0x4a>
   27dba:	4808      	ldr	r0, [pc, #32]	; (27ddc <sc_store+0x58>)
   27dbc:	4b08      	ldr	r3, [pc, #32]	; (27de0 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
   27dbe:	4909      	ldr	r1, [pc, #36]	; (27de4 <sc_store+0x60>)
   27dc0:	1a1b      	subs	r3, r3, r0
   27dc2:	08db      	lsrs	r3, r3, #3
   27dc4:	019b      	lsls	r3, r3, #6
   27dc6:	f043 0001 	orr.w	r0, r3, #1
   27dca:	f00f fb61 	bl	37490 <log_string_sync>
}
   27dce:	b00c      	add	sp, #48	; 0x30
   27dd0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   27dd2:	9200      	str	r2, [sp, #0]
   27dd4:	e7e3      	b.n	27d9e <sc_store+0x1a>
   27dd6:	bf00      	nop
   27dd8:	0003f207 	.word	0x0003f207
   27ddc:	0003b448 	.word	0x0003b448
   27de0:	0003b478 	.word	0x0003b478
   27de4:	0003ee7d 	.word	0x0003ee7d

00027de8 <db_hash_commit>:

static int db_hash_commit(void)
{
   27de8:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   27dea:	2108      	movs	r1, #8
   27dec:	4804      	ldr	r0, [pc, #16]	; (27e00 <db_hash_commit+0x18>)
   27dee:	f011 f991 	bl	39114 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   27df2:	2200      	movs	r2, #0
   27df4:	2300      	movs	r3, #0
   27df6:	4803      	ldr	r0, [pc, #12]	; (27e04 <db_hash_commit+0x1c>)
   27df8:	f008 fd9e 	bl	30938 <k_work_reschedule>

	return 0;
}
   27dfc:	2000      	movs	r0, #0
   27dfe:	bd08      	pop	{r3, pc}
   27e00:	20001df0 	.word	0x20001df0
   27e04:	20001d10 	.word	0x20001d10

00027e08 <ccc_save>:
{
   27e08:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   27e0a:	4b0c      	ldr	r3, [pc, #48]	; (27e3c <ccc_save+0x34>)
{
   27e0c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   27e0e:	6882      	ldr	r2, [r0, #8]
   27e10:	429a      	cmp	r2, r3
{
   27e12:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   27e14:	d10f      	bne.n	27e36 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   27e16:	7922      	ldrb	r2, [r4, #4]
   27e18:	6821      	ldr	r1, [r4, #0]
   27e1a:	68c0      	ldr	r0, [r0, #12]
   27e1c:	f011 f9a4 	bl	39168 <ccc_find_cfg>
	if (!cfg) {
   27e20:	b148      	cbz	r0, 27e36 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   27e22:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   27e26:	8901      	ldrh	r1, [r0, #8]
   27e28:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   27e2c:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   27e2e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   27e30:	8151      	strh	r1, [r2, #10]
	save->count++;
   27e32:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   27e36:	2001      	movs	r0, #1
   27e38:	bd38      	pop	{r3, r4, r5, pc}
   27e3a:	bf00      	nop
   27e3c:	00027f09 	.word	0x00027f09

00027e40 <sc_save>:
{
   27e40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27e44:	4680      	mov	r8, r0
   27e46:	460f      	mov	r7, r1
   27e48:	4616      	mov	r6, r2
   27e4a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   27e4c:	f7ff ff2c 	bl	27ca8 <find_sc_cfg>
	if (!cfg) {
   27e50:	4604      	mov	r4, r0
   27e52:	b9c8      	cbnz	r0, 27e88 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   27e54:	4669      	mov	r1, sp
   27e56:	9000      	str	r0, [sp, #0]
   27e58:	f8cd 0003 	str.w	r0, [sp, #3]
   27e5c:	f7ff ff24 	bl	27ca8 <find_sc_cfg>
		if (!cfg) {
   27e60:	4604      	mov	r4, r0
   27e62:	b960      	cbnz	r0, 27e7e <sc_save+0x3e>
   27e64:	4815      	ldr	r0, [pc, #84]	; (27ebc <sc_save+0x7c>)
   27e66:	4b16      	ldr	r3, [pc, #88]	; (27ec0 <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
   27e68:	4916      	ldr	r1, [pc, #88]	; (27ec4 <sc_save+0x84>)
   27e6a:	1ac0      	subs	r0, r0, r3
   27e6c:	08c0      	lsrs	r0, r0, #3
   27e6e:	0180      	lsls	r0, r0, #6
   27e70:	f040 0001 	orr.w	r0, r0, #1
   27e74:	f00f fb0c 	bl	37490 <log_string_sync>
}
   27e78:	b002      	add	sp, #8
   27e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   27e7e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   27e82:	4639      	mov	r1, r7
   27e84:	f011 f98d 	bl	391a2 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   27e88:	8922      	ldrh	r2, [r4, #8]
   27e8a:	8963      	ldrh	r3, [r4, #10]
   27e8c:	b96a      	cbnz	r2, 27eaa <sc_save+0x6a>
   27e8e:	b973      	cbnz	r3, 27eae <sc_save+0x6e>
		cfg->data.start = start;
   27e90:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   27e92:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   27e94:	4621      	mov	r1, r4
   27e96:	f811 0b01 	ldrb.w	r0, [r1], #1
   27e9a:	f010 fa5b 	bl	38354 <bt_addr_le_is_bonded>
   27e9e:	2800      	cmp	r0, #0
   27ea0:	d0ea      	beq.n	27e78 <sc_save+0x38>
		sc_store(cfg);
   27ea2:	4620      	mov	r0, r4
   27ea4:	f7ff ff6e 	bl	27d84 <sc_store>
   27ea8:	e7e6      	b.n	27e78 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   27eaa:	4296      	cmp	r6, r2
   27eac:	d302      	bcc.n	27eb4 <sc_save+0x74>
   27eae:	429d      	cmp	r5, r3
   27eb0:	d8ef      	bhi.n	27e92 <sc_save+0x52>
   27eb2:	e7e1      	b.n	27e78 <sc_save+0x38>
	if (*end < new_end) {
   27eb4:	429d      	cmp	r5, r3
		*start = new_start;
   27eb6:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   27eb8:	d9ec      	bls.n	27e94 <sc_save+0x54>
   27eba:	e7ea      	b.n	27e92 <sc_save+0x52>
   27ebc:	0003b478 	.word	0x0003b478
   27ec0:	0003b448 	.word	0x0003b448
   27ec4:	0003ee99 	.word	0x0003ee99

00027ec8 <gatt_sub_free>:
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   27ec8:	6883      	ldr	r3, [r0, #8]
{
   27eca:	b513      	push	{r0, r1, r4, lr}
   27ecc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   27ece:	b15b      	cbz	r3, 27ee8 <gatt_sub_free+0x20>
   27ed0:	490a      	ldr	r1, [pc, #40]	; (27efc <gatt_sub_free+0x34>)
   27ed2:	480b      	ldr	r0, [pc, #44]	; (27f00 <gatt_sub_free+0x38>)
   27ed4:	4a0b      	ldr	r2, [pc, #44]	; (27f04 <gatt_sub_free+0x3c>)
   27ed6:	f640 23b1 	movw	r3, #2737	; 0xab1
   27eda:	f00f f91e 	bl	3711a <printk>
   27ede:	4809      	ldr	r0, [pc, #36]	; (27f04 <gatt_sub_free+0x3c>)
   27ee0:	f640 21b1 	movw	r1, #2737	; 0xab1
   27ee4:	f00f fabf 	bl	37466 <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   27ee8:	2300      	movs	r3, #0
   27eea:	4669      	mov	r1, sp
   27eec:	1c60      	adds	r0, r4, #1
   27eee:	9300      	str	r3, [sp, #0]
   27ef0:	f8cd 3003 	str.w	r3, [sp, #3]
   27ef4:	f011 f955 	bl	391a2 <bt_addr_le_copy>
}
   27ef8:	b002      	add	sp, #8
   27efa:	bd10      	pop	{r4, pc}
   27efc:	0003eee8 	.word	0x0003eee8
   27f00:	0003c48a 	.word	0x0003c48a
   27f04:	0003eeb8 	.word	0x0003eeb8

00027f08 <bt_gatt_attr_write_ccc>:
{
   27f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27f0c:	461f      	mov	r7, r3
   27f0e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   27f12:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   27f16:	4605      	mov	r5, r0
   27f18:	4688      	mov	r8, r1
	if (offset) {
   27f1a:	2b00      	cmp	r3, #0
   27f1c:	d16d      	bne.n	27ffa <bt_gatt_attr_write_ccc+0xf2>
	if (!len || len > sizeof(uint16_t)) {
   27f1e:	1e7b      	subs	r3, r7, #1
   27f20:	2b01      	cmp	r3, #1
   27f22:	d86d      	bhi.n	28000 <bt_gatt_attr_write_ccc+0xf8>
	if (len < sizeof(uint16_t)) {
   27f24:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   27f26:	7816      	ldrb	r6, [r2, #0]
   27f28:	bf18      	it	ne
   27f2a:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   27f2c:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   27f2e:	bf0c      	ite	eq
   27f30:	b2b6      	uxtheq	r6, r6
   27f32:	ea46 2603 	orrne.w	r6, r6, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   27f36:	f011 f8ff 	bl	39138 <find_ccc_cfg>
	if (!cfg) {
   27f3a:	4604      	mov	r4, r0
   27f3c:	b9e0      	cbnz	r0, 27f78 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
   27f3e:	b916      	cbnz	r6, 27f46 <bt_gatt_attr_write_ccc+0x3e>
			return len;
   27f40:	4638      	mov	r0, r7
}
   27f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   27f46:	4649      	mov	r1, r9
   27f48:	f011 f8f6 	bl	39138 <find_ccc_cfg>
		if (!cfg) {
   27f4c:	4604      	mov	r4, r0
   27f4e:	b960      	cbnz	r0, 27f6a <bt_gatt_attr_write_ccc+0x62>
   27f50:	4b2d      	ldr	r3, [pc, #180]	; (28008 <bt_gatt_attr_write_ccc+0x100>)
   27f52:	482e      	ldr	r0, [pc, #184]	; (2800c <bt_gatt_attr_write_ccc+0x104>)
			BT_WARN("No space to store CCC cfg");
   27f54:	492e      	ldr	r1, [pc, #184]	; (28010 <bt_gatt_attr_write_ccc+0x108>)
   27f56:	1ac0      	subs	r0, r0, r3
   27f58:	08c0      	lsrs	r0, r0, #3
   27f5a:	0180      	lsls	r0, r0, #6
   27f5c:	f040 0002 	orr.w	r0, r0, #2
   27f60:	f00f fa96 	bl	37490 <log_string_sync>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   27f64:	f06f 0010 	mvn.w	r0, #16
   27f68:	e7eb      	b.n	27f42 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   27f6a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   27f6e:	3001      	adds	r0, #1
   27f70:	f011 f917 	bl	391a2 <bt_addr_le_copy>
		cfg->id = conn->id;
   27f74:	7a2b      	ldrb	r3, [r5, #8]
   27f76:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   27f78:	f8d9 3010 	ldr.w	r3, [r9, #16]
   27f7c:	bb8b      	cbnz	r3, 27fe2 <bt_gatt_attr_write_ccc+0xda>
	if (cfg->value != ccc->value) {
   27f7e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	value_changed = cfg->value != value;
   27f82:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   27f86:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   27f88:	42b3      	cmp	r3, r6
   27f8a:	d003      	beq.n	27f94 <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   27f8c:	4649      	mov	r1, r9
   27f8e:	4640      	mov	r0, r8
   27f90:	f011 f841 	bl	39016 <gatt_ccc_changed>
	if (value_changed) {
   27f94:	45b2      	cmp	sl, r6
   27f96:	d01e      	beq.n	27fd6 <bt_gatt_attr_write_ccc+0xce>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   27f98:	4628      	mov	r0, r5
   27f9a:	f7fd fe47 	bl	25c2c <bt_conn_index>
   27f9e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 28014 <bt_gatt_attr_write_ccc+0x10c>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   27fa2:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   27fa6:	429d      	cmp	r5, r3
   27fa8:	d015      	beq.n	27fd6 <bt_gatt_attr_write_ccc+0xce>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   27faa:	7a28      	ldrb	r0, [r5, #8]
   27fac:	f105 0190 	add.w	r1, r5, #144	; 0x90
   27fb0:	f010 f9d0 	bl	38354 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   27fb4:	b178      	cbz	r0, 27fd6 <bt_gatt_attr_write_ccc+0xce>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   27fb6:	4628      	mov	r0, r5
   27fb8:	f7fd fe38 	bl	25c2c <bt_conn_index>
   27fbc:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   27fbe:	4628      	mov	r0, r5
   27fc0:	f010 fb0e 	bl	385e0 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   27fc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   27fc8:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   27fcc:	2300      	movs	r3, #0
   27fce:	f108 0008 	add.w	r0, r8, #8
   27fd2:	f008 fcb1 	bl	30938 <k_work_reschedule>
	if (!value) {
   27fd6:	2e00      	cmp	r6, #0
   27fd8:	d1b2      	bne.n	27f40 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   27fda:	4620      	mov	r0, r4
   27fdc:	f011 f8e8 	bl	391b0 <clear_ccc_cfg>
   27fe0:	e7ae      	b.n	27f40 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   27fe2:	4632      	mov	r2, r6
   27fe4:	4641      	mov	r1, r8
   27fe6:	4628      	mov	r0, r5
   27fe8:	4798      	blx	r3
		if (write < 0) {
   27fea:	2800      	cmp	r0, #0
   27fec:	dba9      	blt.n	27f42 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   27fee:	1e42      	subs	r2, r0, #1
   27ff0:	2a01      	cmp	r2, #1
   27ff2:	d9c4      	bls.n	27f7e <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   27ff4:	f06f 000d 	mvn.w	r0, #13
   27ff8:	e7a3      	b.n	27f42 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   27ffa:	f06f 0006 	mvn.w	r0, #6
   27ffe:	e7a0      	b.n	27f42 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   28000:	f06f 000c 	mvn.w	r0, #12
   28004:	e79d      	b.n	27f42 <bt_gatt_attr_write_ccc+0x3a>
   28006:	bf00      	nop
   28008:	0003b448 	.word	0x0003b448
   2800c:	0003b478 	.word	0x0003b478
   28010:	0003eeff 	.word	0x0003eeff
   28014:	20001d68 	.word	0x20001d68

00028018 <ccc_load>:
{
   28018:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2801a:	4b20      	ldr	r3, [pc, #128]	; (2809c <ccc_load+0x84>)
{
   2801c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2801e:	6882      	ldr	r2, [r0, #8]
   28020:	429a      	cmp	r2, r3
   28022:	d002      	beq.n	2802a <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   28024:	2001      	movs	r0, #1
}
   28026:	b003      	add	sp, #12
   28028:	bd30      	pop	{r4, r5, pc}
	if (!load->entry) {
   2802a:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   2802c:	68c5      	ldr	r5, [r0, #12]
	if (!load->entry) {
   2802e:	b94b      	cbnz	r3, 28044 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   28030:	7922      	ldrb	r2, [r4, #4]
   28032:	6821      	ldr	r1, [r4, #0]
   28034:	4628      	mov	r0, r5
   28036:	f011 f897 	bl	39168 <ccc_find_cfg>
	if (!cfg) {
   2803a:	2800      	cmp	r0, #0
   2803c:	d0f2      	beq.n	28024 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   2803e:	f011 f8b7 	bl	391b0 <clear_ccc_cfg>
   28042:	e7ef      	b.n	28024 <ccc_load+0xc>
	} else if (!load->count) {
   28044:	68e0      	ldr	r0, [r4, #12]
   28046:	2800      	cmp	r0, #0
   28048:	d0ed      	beq.n	28026 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   2804a:	881b      	ldrh	r3, [r3, #0]
   2804c:	4299      	cmp	r1, r3
   2804e:	d00a      	beq.n	28066 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   28050:	d9e8      	bls.n	28024 <ccc_load+0xc>
	load->count--;
   28052:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   28054:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   28056:	3801      	subs	r0, #1
	load->entry++;
   28058:	3304      	adds	r3, #4
	load->count--;
   2805a:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2805c:	3800      	subs	r0, #0
	load->entry++;
   2805e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   28060:	bf18      	it	ne
   28062:	2001      	movne	r0, #1
   28064:	e7df      	b.n	28026 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   28066:	7922      	ldrb	r2, [r4, #4]
   28068:	6821      	ldr	r1, [r4, #0]
   2806a:	4628      	mov	r0, r5
   2806c:	f011 f87c 	bl	39168 <ccc_find_cfg>
	if (!cfg) {
   28070:	4602      	mov	r2, r0
   28072:	b978      	cbnz	r0, 28094 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   28074:	9000      	str	r0, [sp, #0]
   28076:	4669      	mov	r1, sp
   28078:	f8cd 0003 	str.w	r0, [sp, #3]
   2807c:	4628      	mov	r0, r5
   2807e:	f011 f873 	bl	39168 <ccc_find_cfg>
		if (!cfg) {
   28082:	4602      	mov	r2, r0
   28084:	2800      	cmp	r0, #0
   28086:	d0e4      	beq.n	28052 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   28088:	6821      	ldr	r1, [r4, #0]
   2808a:	3001      	adds	r0, #1
   2808c:	f011 f889 	bl	391a2 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   28090:	7923      	ldrb	r3, [r4, #4]
   28092:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
   28094:	68a3      	ldr	r3, [r4, #8]
   28096:	885b      	ldrh	r3, [r3, #2]
   28098:	8113      	strh	r3, [r2, #8]
   2809a:	e7da      	b.n	28052 <ccc_load+0x3a>
   2809c:	00027f09 	.word	0x00027f09

000280a0 <sc_set>:
{
   280a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   280a4:	460e      	mov	r6, r1
   280a6:	b087      	sub	sp, #28
   280a8:	4690      	mov	r8, r2
   280aa:	4699      	mov	r9, r3
	if (!name) {
   280ac:	4607      	mov	r7, r0
   280ae:	b978      	cbnz	r0, 280d0 <sc_set+0x30>
   280b0:	483b      	ldr	r0, [pc, #236]	; (281a0 <sc_set+0x100>)
   280b2:	4b3c      	ldr	r3, [pc, #240]	; (281a4 <sc_set+0x104>)
		BT_ERR("Insufficient number of arguments");
   280b4:	493c      	ldr	r1, [pc, #240]	; (281a8 <sc_set+0x108>)
   280b6:	1ac0      	subs	r0, r0, r3
   280b8:	08c0      	lsrs	r0, r0, #3
   280ba:	0180      	lsls	r0, r0, #6
   280bc:	f040 0001 	orr.w	r0, r0, #1
   280c0:	f00f f9e6 	bl	37490 <log_string_sync>
		return -EINVAL;
   280c4:	f06f 0515 	mvn.w	r5, #21
}
   280c8:	4628      	mov	r0, r5
   280ca:	b007      	add	sp, #28
   280cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   280d0:	a902      	add	r1, sp, #8
   280d2:	f00f ffee 	bl	380b2 <bt_settings_decode_key>
	if (err) {
   280d6:	4605      	mov	r5, r0
   280d8:	b178      	cbz	r0, 280fa <sc_set+0x5a>
   280da:	4b32      	ldr	r3, [pc, #200]	; (281a4 <sc_set+0x104>)
   280dc:	4c30      	ldr	r4, [pc, #192]	; (281a0 <sc_set+0x100>)
   280de:	4638      	mov	r0, r7
   280e0:	1ae4      	subs	r4, r4, r3
   280e2:	08e4      	lsrs	r4, r4, #3
   280e4:	f00f f9e7 	bl	374b6 <z_log_strdup>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   280e8:	01a4      	lsls	r4, r4, #6
   280ea:	f044 0401 	orr.w	r4, r4, #1
   280ee:	492f      	ldr	r1, [pc, #188]	; (281ac <sc_set+0x10c>)
   280f0:	4602      	mov	r2, r0
   280f2:	4620      	mov	r0, r4
   280f4:	f00f f9cc 	bl	37490 <log_string_sync>
   280f8:	e7e4      	b.n	280c4 <sc_set+0x24>
	settings_name_next(name, &next);
   280fa:	a901      	add	r1, sp, #4
   280fc:	4638      	mov	r0, r7
   280fe:	f00f fce4 	bl	37aca <settings_name_next>
	if (!next) {
   28102:	9801      	ldr	r0, [sp, #4]
   28104:	b170      	cbz	r0, 28124 <sc_set+0x84>
		unsigned long next_id = strtoul(next, NULL, 10);
   28106:	220a      	movs	r2, #10
   28108:	4629      	mov	r1, r5
   2810a:	f00e faa5 	bl	36658 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   2810e:	4602      	mov	r2, r0
   28110:	b140      	cbz	r0, 28124 <sc_set+0x84>
   28112:	4824      	ldr	r0, [pc, #144]	; (281a4 <sc_set+0x104>)
   28114:	4b22      	ldr	r3, [pc, #136]	; (281a0 <sc_set+0x100>)
			BT_ERR("Invalid local identity %lu", next_id);
   28116:	4926      	ldr	r1, [pc, #152]	; (281b0 <sc_set+0x110>)
   28118:	1a1b      	subs	r3, r3, r0
   2811a:	08db      	lsrs	r3, r3, #3
   2811c:	019b      	lsls	r3, r3, #6
   2811e:	f043 0001 	orr.w	r0, r3, #1
   28122:	e7e7      	b.n	280f4 <sc_set+0x54>
	cfg = find_sc_cfg(id, &addr);
   28124:	a902      	add	r1, sp, #8
   28126:	2000      	movs	r0, #0
   28128:	f7ff fdbe 	bl	27ca8 <find_sc_cfg>
	if (!cfg && len_rd) {
   2812c:	4604      	mov	r4, r0
   2812e:	bb80      	cbnz	r0, 28192 <sc_set+0xf2>
   28130:	2e00      	cmp	r6, #0
   28132:	d0c9      	beq.n	280c8 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   28134:	a904      	add	r1, sp, #16
   28136:	9004      	str	r0, [sp, #16]
   28138:	4606      	mov	r6, r0
   2813a:	f8cd 0013 	str.w	r0, [sp, #19]
   2813e:	f7ff fdb3 	bl	27ca8 <find_sc_cfg>
		if (!cfg) {
   28142:	4604      	mov	r4, r0
   28144:	b960      	cbnz	r0, 28160 <sc_set+0xc0>
   28146:	4b17      	ldr	r3, [pc, #92]	; (281a4 <sc_set+0x104>)
   28148:	4815      	ldr	r0, [pc, #84]	; (281a0 <sc_set+0x100>)
			BT_ERR("Unable to restore SC: no cfg left");
   2814a:	491a      	ldr	r1, [pc, #104]	; (281b4 <sc_set+0x114>)
   2814c:	1ac0      	subs	r0, r0, r3
   2814e:	08c0      	lsrs	r0, r0, #3
   28150:	0180      	lsls	r0, r0, #6
   28152:	f040 0001 	orr.w	r0, r0, #1
   28156:	f00f f99b 	bl	37490 <log_string_sync>
			return -ENOMEM;
   2815a:	f06f 050b 	mvn.w	r5, #11
   2815e:	e7b3      	b.n	280c8 <sc_set+0x28>
		cfg->id = id;
   28160:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   28164:	a902      	add	r1, sp, #8
   28166:	f011 f81c 	bl	391a2 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   2816a:	f104 0108 	add.w	r1, r4, #8
   2816e:	2204      	movs	r2, #4
   28170:	4648      	mov	r0, r9
   28172:	47c0      	blx	r8
		if (len < 0) {
   28174:	1e04      	subs	r4, r0, #0
   28176:	daa7      	bge.n	280c8 <sc_set+0x28>
   28178:	4b0a      	ldr	r3, [pc, #40]	; (281a4 <sc_set+0x104>)
   2817a:	4809      	ldr	r0, [pc, #36]	; (281a0 <sc_set+0x100>)
			BT_ERR("Failed to decode value (err %zd)", len);
   2817c:	490e      	ldr	r1, [pc, #56]	; (281b8 <sc_set+0x118>)
   2817e:	1ac0      	subs	r0, r0, r3
   28180:	08c0      	lsrs	r0, r0, #3
   28182:	0180      	lsls	r0, r0, #6
   28184:	4622      	mov	r2, r4
   28186:	f040 0001 	orr.w	r0, r0, #1
   2818a:	f00f f981 	bl	37490 <log_string_sync>
			return len;
   2818e:	4625      	mov	r5, r4
   28190:	e79a      	b.n	280c8 <sc_set+0x28>
	if (len_rd) {
   28192:	2e00      	cmp	r6, #0
   28194:	d1e9      	bne.n	2816a <sc_set+0xca>
   28196:	6026      	str	r6, [r4, #0]
   28198:	6066      	str	r6, [r4, #4]
   2819a:	60a6      	str	r6, [r4, #8]
   2819c:	e794      	b.n	280c8 <sc_set+0x28>
   2819e:	bf00      	nop
   281a0:	0003b478 	.word	0x0003b478
   281a4:	0003b448 	.word	0x0003b448
   281a8:	0003decc 	.word	0x0003decc
   281ac:	0003ef19 	.word	0x0003ef19
   281b0:	0003ef35 	.word	0x0003ef35
   281b4:	0003ef50 	.word	0x0003ef50
   281b8:	0003ee2e 	.word	0x0003ee2e

000281bc <bt_gatt_clear_sc>:
{
   281bc:	b570      	push	{r4, r5, r6, lr}
   281be:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   281c0:	f7ff fd72 	bl	27ca8 <find_sc_cfg>
	if (!cfg) {
   281c4:	4604      	mov	r4, r0
   281c6:	b308      	cbz	r0, 2820c <bt_gatt_clear_sc+0x50>
		if (cfg->id) {
   281c8:	4605      	mov	r5, r0
   281ca:	f815 2b01 	ldrb.w	r2, [r5], #1
   281ce:	b302      	cbz	r2, 28212 <bt_gatt_clear_sc+0x56>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   281d0:	ae02      	add	r6, sp, #8
   281d2:	2104      	movs	r1, #4
   281d4:	4630      	mov	r0, r6
   281d6:	f00e ff04 	bl	36fe2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   281da:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   281dc:	4a0e      	ldr	r2, [pc, #56]	; (28218 <bt_gatt_clear_sc+0x5c>)
   281de:	462b      	mov	r3, r5
   281e0:	2124      	movs	r1, #36	; 0x24
   281e2:	a803      	add	r0, sp, #12
   281e4:	f7fb f800 	bl	231e8 <bt_settings_encode_key>
		err = settings_delete(key);
   281e8:	a803      	add	r0, sp, #12
   281ea:	f00f fc47 	bl	37a7c <settings_delete>
		if (err) {
   281ee:	4602      	mov	r2, r0
   281f0:	b148      	cbz	r0, 28206 <bt_gatt_clear_sc+0x4a>
   281f2:	480a      	ldr	r0, [pc, #40]	; (2821c <bt_gatt_clear_sc+0x60>)
   281f4:	4b0a      	ldr	r3, [pc, #40]	; (28220 <bt_gatt_clear_sc+0x64>)
			BT_ERR("failed to delete SC (err %d)", err);
   281f6:	490b      	ldr	r1, [pc, #44]	; (28224 <bt_gatt_clear_sc+0x68>)
   281f8:	1a1b      	subs	r3, r3, r0
   281fa:	08db      	lsrs	r3, r3, #3
   281fc:	019b      	lsls	r3, r3, #6
   281fe:	f043 0001 	orr.w	r0, r3, #1
   28202:	f00f f945 	bl	37490 <log_string_sync>
	clear_sc_cfg(cfg);
   28206:	4620      	mov	r0, r4
   28208:	f010 ffe0 	bl	391cc <clear_sc_cfg>
}
   2820c:	2000      	movs	r0, #0
   2820e:	b00c      	add	sp, #48	; 0x30
   28210:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   28212:	9200      	str	r2, [sp, #0]
   28214:	e7e2      	b.n	281dc <bt_gatt_clear_sc+0x20>
   28216:	bf00      	nop
   28218:	0003f207 	.word	0x0003f207
   2821c:	0003b448 	.word	0x0003b448
   28220:	0003b478 	.word	0x0003b478
   28224:	0003ef72 	.word	0x0003ef72

00028228 <sc_clear>:
{
   28228:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2822a:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   2822e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28230:	4629      	mov	r1, r5
   28232:	7a00      	ldrb	r0, [r0, #8]
   28234:	f010 f88e 	bl	38354 <bt_addr_le_is_bonded>
   28238:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   2823a:	4629      	mov	r1, r5
   2823c:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2823e:	b17b      	cbz	r3, 28260 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   28240:	f7ff ffbc 	bl	281bc <bt_gatt_clear_sc>
		if (err) {
   28244:	4602      	mov	r2, r0
   28246:	b190      	cbz	r0, 2826e <sc_clear+0x46>
   28248:	4809      	ldr	r0, [pc, #36]	; (28270 <sc_clear+0x48>)
   2824a:	4b0a      	ldr	r3, [pc, #40]	; (28274 <sc_clear+0x4c>)
			BT_ERR("Failed to clear SC %d", err);
   2824c:	490a      	ldr	r1, [pc, #40]	; (28278 <sc_clear+0x50>)
   2824e:	1a1b      	subs	r3, r3, r0
   28250:	08db      	lsrs	r3, r3, #3
   28252:	019b      	lsls	r3, r3, #6
   28254:	f043 0001 	orr.w	r0, r3, #1
}
   28258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			BT_ERR("Failed to clear SC %d", err);
   2825c:	f00f b918 	b.w	37490 <log_string_sync>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   28260:	f7ff fd22 	bl	27ca8 <find_sc_cfg>
		if (cfg) {
   28264:	b118      	cbz	r0, 2826e <sc_clear+0x46>
}
   28266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   2826a:	f010 bfaf 	b.w	391cc <clear_sc_cfg>
}
   2826e:	bd38      	pop	{r3, r4, r5, pc}
   28270:	0003b448 	.word	0x0003b448
   28274:	0003b478 	.word	0x0003b478
   28278:	0003ef8f 	.word	0x0003ef8f

0002827c <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   2827c:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   2827e:	6881      	ldr	r1, [r0, #8]
{
   28280:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   28282:	4a07      	ldr	r2, [pc, #28]	; (282a0 <remove_peer_from_attr+0x24>)
   28284:	4291      	cmp	r1, r2
   28286:	d109      	bne.n	2829c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   28288:	791a      	ldrb	r2, [r3, #4]
   2828a:	6819      	ldr	r1, [r3, #0]
   2828c:	68c0      	ldr	r0, [r0, #12]
   2828e:	f010 ff6b 	bl	39168 <ccc_find_cfg>
	if (cfg) {
   28292:	b118      	cbz	r0, 2829c <remove_peer_from_attr+0x20>
   28294:	2300      	movs	r3, #0
   28296:	6003      	str	r3, [r0, #0]
   28298:	6043      	str	r3, [r0, #4]
   2829a:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   2829c:	2001      	movs	r0, #1
   2829e:	bd08      	pop	{r3, pc}
   282a0:	00027f09 	.word	0x00027f09

000282a4 <disconnected_cb>:
{
   282a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   282a8:	4b1f      	ldr	r3, [pc, #124]	; (28328 <disconnected_cb+0x84>)
{
   282aa:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   282ac:	6882      	ldr	r2, [r0, #8]
   282ae:	429a      	cmp	r2, r3
{
   282b0:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   282b2:	d102      	bne.n	282ba <disconnected_cb+0x16>
	ccc = attr->user_data;
   282b4:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   282b6:	8963      	ldrh	r3, [r4, #10]
   282b8:	b9c3      	cbnz	r3, 282ec <disconnected_cb+0x48>
}
   282ba:	2001      	movs	r0, #1
   282bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   282c0:	f105 0890 	add.w	r8, r5, #144	; 0x90
   282c4:	7a28      	ldrb	r0, [r5, #8]
   282c6:	4641      	mov	r1, r8
   282c8:	f010 f844 	bl	38354 <bt_addr_le_is_bonded>
   282cc:	b948      	cbnz	r0, 282e2 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   282ce:	4b17      	ldr	r3, [pc, #92]	; (2832c <disconnected_cb+0x88>)
   282d0:	429c      	cmp	r4, r3
   282d2:	d102      	bne.n	282da <disconnected_cb+0x36>
					sc_clear(conn);
   282d4:	4628      	mov	r0, r5
   282d6:	f7ff ffa7 	bl	28228 <sc_clear>
				clear_ccc_cfg(cfg);
   282da:	4620      	mov	r0, r4
   282dc:	f010 ff68 	bl	391b0 <clear_ccc_cfg>
	if (!value_used) {
   282e0:	e019      	b.n	28316 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   282e2:	4641      	mov	r1, r8
   282e4:	4638      	mov	r0, r7
   282e6:	f010 ff5c 	bl	391a2 <bt_addr_le_copy>
	if (!value_used) {
   282ea:	e014      	b.n	28316 <disconnected_cb+0x72>
		if (!cfg->value) {
   282ec:	8923      	ldrh	r3, [r4, #8]
   282ee:	b193      	cbz	r3, 28316 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   282f0:	4627      	mov	r7, r4
   282f2:	4628      	mov	r0, r5
   282f4:	f817 1b01 	ldrb.w	r1, [r7], #1
   282f8:	463a      	mov	r2, r7
   282fa:	f010 f9dd 	bl	386b8 <bt_conn_is_peer_addr_le>
   282fe:	2800      	cmp	r0, #0
   28300:	d1de      	bne.n	282c0 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   28302:	7820      	ldrb	r0, [r4, #0]
   28304:	4639      	mov	r1, r7
   28306:	f7fd fe19 	bl	25f3c <bt_conn_lookup_addr_le>
			if (tmp) {
   2830a:	b120      	cbz	r0, 28316 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   2830c:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   2830e:	f7fd fb65 	bl	259dc <bt_conn_unref>
	if (!value_used) {
   28312:	2d07      	cmp	r5, #7
   28314:	d0d1      	beq.n	282ba <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   28316:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   28318:	2100      	movs	r1, #0
   2831a:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   2831c:	2b00      	cmp	r3, #0
   2831e:	d0cc      	beq.n	282ba <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   28320:	4630      	mov	r0, r6
   28322:	4798      	blx	r3
   28324:	e7c9      	b.n	282ba <disconnected_cb+0x16>
   28326:	bf00      	nop
   28328:	00027f09 	.word	0x00027f09
   2832c:	20000644 	.word	0x20000644

00028330 <read_ppcp>:
{
   28330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   28332:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   28334:	4a07      	ldr	r2, [pc, #28]	; (28354 <read_ppcp+0x24>)
{
   28336:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   28338:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   2833c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   28340:	2308      	movs	r3, #8
   28342:	9300      	str	r3, [sp, #0]
   28344:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   28348:	446b      	add	r3, sp
   2834a:	f010 ff53 	bl	391f4 <bt_gatt_attr_read.constprop.0>
}
   2834e:	b005      	add	sp, #20
   28350:	f85d fb04 	ldr.w	pc, [sp], #4
   28354:	00280018 	.word	0x00280018

00028358 <cf_set>:
{
   28358:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2835c:	4688      	mov	r8, r1
   2835e:	4616      	mov	r6, r2
   28360:	461f      	mov	r7, r3
	if (!name) {
   28362:	4605      	mov	r5, r0
   28364:	b978      	cbnz	r0, 28386 <cf_set+0x2e>
   28366:	4839      	ldr	r0, [pc, #228]	; (2844c <cf_set+0xf4>)
   28368:	4b39      	ldr	r3, [pc, #228]	; (28450 <cf_set+0xf8>)
		BT_ERR("Insufficient number of arguments");
   2836a:	493a      	ldr	r1, [pc, #232]	; (28454 <cf_set+0xfc>)
   2836c:	1ac0      	subs	r0, r0, r3
   2836e:	08c0      	lsrs	r0, r0, #3
   28370:	0180      	lsls	r0, r0, #6
   28372:	f040 0001 	orr.w	r0, r0, #1
   28376:	f00f f88b 	bl	37490 <log_string_sync>
		return -EINVAL;
   2837a:	f06f 0415 	mvn.w	r4, #21
}
   2837e:	4620      	mov	r0, r4
   28380:	b004      	add	sp, #16
   28382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   28386:	a902      	add	r1, sp, #8
   28388:	f00f fe93 	bl	380b2 <bt_settings_decode_key>
	if (err) {
   2838c:	4604      	mov	r4, r0
   2838e:	b178      	cbz	r0, 283b0 <cf_set+0x58>
   28390:	4b2f      	ldr	r3, [pc, #188]	; (28450 <cf_set+0xf8>)
   28392:	4c2e      	ldr	r4, [pc, #184]	; (2844c <cf_set+0xf4>)
   28394:	4628      	mov	r0, r5
   28396:	1ae4      	subs	r4, r4, r3
   28398:	08e4      	lsrs	r4, r4, #3
   2839a:	f00f f88c 	bl	374b6 <z_log_strdup>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   2839e:	01a4      	lsls	r4, r4, #6
   283a0:	f044 0401 	orr.w	r4, r4, #1
   283a4:	492c      	ldr	r1, [pc, #176]	; (28458 <cf_set+0x100>)
   283a6:	4602      	mov	r2, r0
   283a8:	4620      	mov	r0, r4
   283aa:	f00f f871 	bl	37490 <log_string_sync>
   283ae:	e7e4      	b.n	2837a <cf_set+0x22>
	settings_name_next(name, &next);
   283b0:	a901      	add	r1, sp, #4
   283b2:	4628      	mov	r0, r5
   283b4:	f00f fb89 	bl	37aca <settings_name_next>
	if (!next) {
   283b8:	9801      	ldr	r0, [sp, #4]
   283ba:	b170      	cbz	r0, 283da <cf_set+0x82>
		unsigned long next_id = strtoul(next, NULL, 10);
   283bc:	220a      	movs	r2, #10
   283be:	4621      	mov	r1, r4
   283c0:	f00e f94a 	bl	36658 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   283c4:	4602      	mov	r2, r0
   283c6:	b140      	cbz	r0, 283da <cf_set+0x82>
   283c8:	4821      	ldr	r0, [pc, #132]	; (28450 <cf_set+0xf8>)
   283ca:	4b20      	ldr	r3, [pc, #128]	; (2844c <cf_set+0xf4>)
			BT_ERR("Invalid local identity %lu", next_id);
   283cc:	4923      	ldr	r1, [pc, #140]	; (2845c <cf_set+0x104>)
   283ce:	1a1b      	subs	r3, r3, r0
   283d0:	08db      	lsrs	r3, r3, #3
   283d2:	019b      	lsls	r3, r3, #6
   283d4:	f043 0001 	orr.w	r0, r3, #1
   283d8:	e7e7      	b.n	283aa <cf_set+0x52>
	cfg = find_cf_cfg_by_addr(id, &addr);
   283da:	a902      	add	r1, sp, #8
   283dc:	2000      	movs	r0, #0
   283de:	f7ff fcb1 	bl	27d44 <find_cf_cfg_by_addr>
	if (!cfg) {
   283e2:	4605      	mov	r5, r0
   283e4:	b9b0      	cbnz	r0, 28414 <cf_set+0xbc>
		cfg = find_cf_cfg(NULL);
   283e6:	f7ff fc31 	bl	27c4c <find_cf_cfg>
		if (!cfg) {
   283ea:	4605      	mov	r5, r0
   283ec:	b960      	cbnz	r0, 28408 <cf_set+0xb0>
   283ee:	4b18      	ldr	r3, [pc, #96]	; (28450 <cf_set+0xf8>)
   283f0:	4816      	ldr	r0, [pc, #88]	; (2844c <cf_set+0xf4>)
			BT_ERR("Unable to restore CF: no cfg left");
   283f2:	491b      	ldr	r1, [pc, #108]	; (28460 <cf_set+0x108>)
   283f4:	1ac0      	subs	r0, r0, r3
   283f6:	08c0      	lsrs	r0, r0, #3
   283f8:	0180      	lsls	r0, r0, #6
   283fa:	f040 0001 	orr.w	r0, r0, #1
   283fe:	f00f f847 	bl	37490 <log_string_sync>
			return -ENOMEM;
   28402:	f06f 040b 	mvn.w	r4, #11
   28406:	e7ba      	b.n	2837e <cf_set+0x26>
		cfg->id = id;
   28408:	2300      	movs	r3, #0
   2840a:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   2840e:	a902      	add	r1, sp, #8
   28410:	f010 fec7 	bl	391a2 <bt_addr_le_copy>
	if (len_rd) {
   28414:	f1b8 0f00 	cmp.w	r8, #0
   28418:	d013      	beq.n	28442 <cf_set+0xea>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   2841a:	f105 0108 	add.w	r1, r5, #8
   2841e:	2201      	movs	r2, #1
   28420:	4638      	mov	r0, r7
   28422:	47b0      	blx	r6
		if (len < 0) {
   28424:	1e05      	subs	r5, r0, #0
   28426:	daaa      	bge.n	2837e <cf_set+0x26>
   28428:	4b09      	ldr	r3, [pc, #36]	; (28450 <cf_set+0xf8>)
   2842a:	4808      	ldr	r0, [pc, #32]	; (2844c <cf_set+0xf4>)
			BT_ERR("Failed to decode value (err %zd)", len);
   2842c:	490d      	ldr	r1, [pc, #52]	; (28464 <cf_set+0x10c>)
   2842e:	1ac0      	subs	r0, r0, r3
   28430:	08c0      	lsrs	r0, r0, #3
   28432:	0180      	lsls	r0, r0, #6
   28434:	462a      	mov	r2, r5
   28436:	f040 0001 	orr.w	r0, r0, #1
   2843a:	f00f f829 	bl	37490 <log_string_sync>
			return len;
   2843e:	462c      	mov	r4, r5
   28440:	e79d      	b.n	2837e <cf_set+0x26>
		clear_cf_cfg(cfg);
   28442:	4628      	mov	r0, r5
   28444:	f010 ff59 	bl	392fa <clear_cf_cfg>
   28448:	e799      	b.n	2837e <cf_set+0x26>
   2844a:	bf00      	nop
   2844c:	0003b478 	.word	0x0003b478
   28450:	0003b448 	.word	0x0003b448
   28454:	0003decc 	.word	0x0003decc
   28458:	0003ef19 	.word	0x0003ef19
   2845c:	0003ef35 	.word	0x0003ef35
   28460:	0003efa5 	.word	0x0003efa5
   28464:	0003ee2e 	.word	0x0003ee2e

00028468 <sc_commit>:
{
   28468:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2846a:	f06f 0102 	mvn.w	r1, #2
   2846e:	4808      	ldr	r0, [pc, #32]	; (28490 <sc_commit+0x28>)
   28470:	f010 fe88 	bl	39184 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28474:	4806      	ldr	r0, [pc, #24]	; (28490 <sc_commit+0x28>)
   28476:	f010 fdf1 	bl	3905c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2847a:	07c3      	lsls	r3, r0, #31
   2847c:	d505      	bpl.n	2848a <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   2847e:	4805      	ldr	r0, [pc, #20]	; (28494 <sc_commit+0x2c>)
   28480:	f44f 72a4 	mov.w	r2, #328	; 0x148
   28484:	2300      	movs	r3, #0
   28486:	f008 fa57 	bl	30938 <k_work_reschedule>
}
   2848a:	2000      	movs	r0, #0
   2848c:	bd08      	pop	{r3, pc}
   2848e:	bf00      	nop
   28490:	20001df0 	.word	0x20001df0
   28494:	20001dc0 	.word	0x20001dc0

00028498 <cf_write>:
{
   28498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2849c:	4698      	mov	r8, r3
   2849e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   284a2:	2b01      	cmp	r3, #1
{
   284a4:	4606      	mov	r6, r0
   284a6:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   284a8:	d83d      	bhi.n	28526 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   284aa:	4443      	add	r3, r8
   284ac:	2b01      	cmp	r3, #1
   284ae:	4645      	mov	r5, r8
   284b0:	dc3c      	bgt.n	2852c <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   284b2:	f7ff fbcb 	bl	27c4c <find_cf_cfg>
	if (!cfg) {
   284b6:	4604      	mov	r4, r0
   284b8:	b990      	cbnz	r0, 284e0 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   284ba:	f7ff fbc7 	bl	27c4c <find_cf_cfg>
	if (!cfg) {
   284be:	4604      	mov	r4, r0
   284c0:	b970      	cbnz	r0, 284e0 <cf_write+0x48>
   284c2:	4b1d      	ldr	r3, [pc, #116]	; (28538 <cf_write+0xa0>)
   284c4:	481d      	ldr	r0, [pc, #116]	; (2853c <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   284c6:	491e      	ldr	r1, [pc, #120]	; (28540 <cf_write+0xa8>)
   284c8:	1ac0      	subs	r0, r0, r3
   284ca:	08c0      	lsrs	r0, r0, #3
   284cc:	0180      	lsls	r0, r0, #6
   284ce:	f040 0002 	orr.w	r0, r0, #2
   284d2:	f00e ffdd 	bl	37490 <log_string_sync>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   284d6:	f06f 0510 	mvn.w	r5, #16
}
   284da:	4628      	mov	r0, r5
   284dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   284e0:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   284e2:	f1b8 0f00 	cmp.w	r8, #0
   284e6:	d10c      	bne.n	28502 <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   284e8:	f106 0190 	add.w	r1, r6, #144	; 0x90
   284ec:	1c60      	adds	r0, r4, #1
   284ee:	f010 fe58 	bl	391a2 <bt_addr_le_copy>
	cfg->id = conn->id;
   284f2:	4620      	mov	r0, r4
   284f4:	7a33      	ldrb	r3, [r6, #8]
   284f6:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   284fa:	2101      	movs	r1, #1
   284fc:	f010 fe0a 	bl	39114 <atomic_or>
}
   28500:	e7eb      	b.n	284da <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   28502:	7a20      	ldrb	r0, [r4, #8]
   28504:	fa20 f301 	lsr.w	r3, r0, r1
   28508:	07da      	lsls	r2, r3, #31
   2850a:	d503      	bpl.n	28514 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   2850c:	783b      	ldrb	r3, [r7, #0]
   2850e:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   28510:	07db      	lsls	r3, r3, #31
   28512:	d50e      	bpl.n	28532 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   28514:	3101      	adds	r1, #1
   28516:	2903      	cmp	r1, #3
   28518:	d1e3      	bne.n	284e2 <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2851a:	783b      	ldrb	r3, [r7, #0]
   2851c:	f003 0307 	and.w	r3, r3, #7
   28520:	4318      	orrs	r0, r3
   28522:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   28524:	e7e0      	b.n	284e8 <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28526:	f06f 0506 	mvn.w	r5, #6
   2852a:	e7d6      	b.n	284da <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2852c:	f06f 050c 	mvn.w	r5, #12
   28530:	e7d3      	b.n	284da <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   28532:	f06f 0512 	mvn.w	r5, #18
   28536:	e7d0      	b.n	284da <cf_write+0x42>
   28538:	0003b448 	.word	0x0003b448
   2853c:	0003b478 	.word	0x0003b478
   28540:	0003efc7 	.word	0x0003efc7

00028544 <sc_indicate_rsp>:
{
   28544:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28546:	f06f 0102 	mvn.w	r1, #2
   2854a:	4604      	mov	r4, r0
   2854c:	480d      	ldr	r0, [pc, #52]	; (28584 <sc_indicate_rsp+0x40>)
   2854e:	f010 fe19 	bl	39184 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28552:	480c      	ldr	r0, [pc, #48]	; (28584 <sc_indicate_rsp+0x40>)
   28554:	f010 fd82 	bl	3905c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   28558:	07c2      	lsls	r2, r0, #31
   2855a:	d504      	bpl.n	28566 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   2855c:	480a      	ldr	r0, [pc, #40]	; (28588 <sc_indicate_rsp+0x44>)
   2855e:	2200      	movs	r2, #0
   28560:	2300      	movs	r3, #0
   28562:	f008 f9e9 	bl	30938 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   28566:	4620      	mov	r0, r4
   28568:	f7ff fb70 	bl	27c4c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2856c:	b140      	cbz	r0, 28580 <sc_indicate_rsp+0x3c>
   2856e:	7a03      	ldrb	r3, [r0, #8]
   28570:	07db      	lsls	r3, r3, #31
   28572:	d505      	bpl.n	28580 <sc_indicate_rsp+0x3c>
}
   28574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   28578:	2101      	movs	r1, #1
   2857a:	300c      	adds	r0, #12
   2857c:	f010 bdca 	b.w	39114 <atomic_or>
   28580:	bd10      	pop	{r4, pc}
   28582:	bf00      	nop
   28584:	20001df0 	.word	0x20001df0
   28588:	20001dc0 	.word	0x20001dc0

0002858c <gatt_write_ccc>:
{
   2858c:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   2858e:	2312      	movs	r3, #18
{
   28590:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   28592:	2104      	movs	r1, #4
   28594:	e9cd 3100 	strd	r3, r1, [sp]
   28598:	4b03      	ldr	r3, [pc, #12]	; (285a8 <gatt_write_ccc+0x1c>)
   2859a:	4904      	ldr	r1, [pc, #16]	; (285ac <gatt_write_ccc+0x20>)
   2859c:	f010 ff49 	bl	39432 <gatt_req_send>
}
   285a0:	b003      	add	sp, #12
   285a2:	f85d fb04 	ldr.w	pc, [sp], #4
   285a6:	bf00      	nop
   285a8:	0003932b 	.word	0x0003932b
   285ac:	000393c9 	.word	0x000393c9

000285b0 <bt_gatt_init>:
{
   285b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   285b2:	4b2c      	ldr	r3, [pc, #176]	; (28664 <bt_gatt_init+0xb4>)
   285b4:	f3bf 8f5b 	dmb	ish
   285b8:	2201      	movs	r2, #1
   285ba:	e853 1f00 	ldrex	r1, [r3]
   285be:	2900      	cmp	r1, #0
   285c0:	d103      	bne.n	285ca <bt_gatt_init+0x1a>
   285c2:	e843 2000 	strex	r0, r2, [r3]
   285c6:	2800      	cmp	r0, #0
   285c8:	d1f7      	bne.n	285ba <bt_gatt_init+0xa>
   285ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   285ce:	d148      	bne.n	28662 <bt_gatt_init+0xb2>
   285d0:	f3bf 8f5b 	dmb	ish
   285d4:	4b24      	ldr	r3, [pc, #144]	; (28668 <bt_gatt_init+0xb8>)
   285d6:	e853 1f00 	ldrex	r1, [r3]
   285da:	2900      	cmp	r1, #0
   285dc:	d103      	bne.n	285e6 <bt_gatt_init+0x36>
   285de:	e843 2000 	strex	r0, r2, [r3]
   285e2:	2800      	cmp	r0, #0
   285e4:	d1f7      	bne.n	285d6 <bt_gatt_init+0x26>
   285e6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   285ea:	d035      	beq.n	28658 <bt_gatt_init+0xa8>
	list->head = NULL;
   285ec:	4b1f      	ldr	r3, [pc, #124]	; (2866c <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   285ee:	4920      	ldr	r1, [pc, #128]	; (28670 <bt_gatt_init+0xc0>)
   285f0:	4820      	ldr	r0, [pc, #128]	; (28674 <bt_gatt_init+0xc4>)
   285f2:	2200      	movs	r2, #0
	list->tail = NULL;
   285f4:	e9c3 2200 	strd	r2, r2, [r3]
   285f8:	f008 f87a 	bl	306f0 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   285fc:	2300      	movs	r3, #0
   285fe:	f44f 72a4 	mov.w	r2, #328	; 0x148
   28602:	481c      	ldr	r0, [pc, #112]	; (28674 <bt_gatt_init+0xc4>)
   28604:	f008 f91c 	bl	30840 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   28608:	491b      	ldr	r1, [pc, #108]	; (28678 <bt_gatt_init+0xc8>)
   2860a:	481c      	ldr	r0, [pc, #112]	; (2867c <bt_gatt_init+0xcc>)
   2860c:	f008 f870 	bl	306f0 <k_work_init_delayable>
   28610:	2102      	movs	r1, #2
   28612:	481b      	ldr	r0, [pc, #108]	; (28680 <bt_gatt_init+0xd0>)
   28614:	f010 fd7e 	bl	39114 <atomic_or>
}
   28618:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   2861c:	4919      	ldr	r1, [pc, #100]	; (28684 <bt_gatt_init+0xd4>)
   2861e:	481a      	ldr	r0, [pc, #104]	; (28688 <bt_gatt_init+0xd8>)
   28620:	f008 b866 	b.w	306f0 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   28624:	4a19      	ldr	r2, [pc, #100]	; (2868c <bt_gatt_init+0xdc>)
   28626:	6863      	ldr	r3, [r4, #4]
   28628:	8811      	ldrh	r1, [r2, #0]
   2862a:	440b      	add	r3, r1
   2862c:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2862e:	3408      	adds	r4, #8
   28630:	42ac      	cmp	r4, r5
   28632:	d90e      	bls.n	28652 <bt_gatt_init+0xa2>
   28634:	4916      	ldr	r1, [pc, #88]	; (28690 <bt_gatt_init+0xe0>)
   28636:	4817      	ldr	r0, [pc, #92]	; (28694 <bt_gatt_init+0xe4>)
   28638:	f240 4351 	movw	r3, #1105	; 0x451
   2863c:	4632      	mov	r2, r6
   2863e:	f00e fd6c 	bl	3711a <printk>
   28642:	4815      	ldr	r0, [pc, #84]	; (28698 <bt_gatt_init+0xe8>)
   28644:	f00e fd69 	bl	3711a <printk>
   28648:	f240 4151 	movw	r1, #1105	; 0x451
   2864c:	4630      	mov	r0, r6
   2864e:	f00e ff0a 	bl	37466 <assert_post_action>
   28652:	42bc      	cmp	r4, r7
   28654:	d3e6      	bcc.n	28624 <bt_gatt_init+0x74>
   28656:	e7c9      	b.n	285ec <bt_gatt_init+0x3c>
   28658:	4d10      	ldr	r5, [pc, #64]	; (2869c <bt_gatt_init+0xec>)
   2865a:	4c11      	ldr	r4, [pc, #68]	; (286a0 <bt_gatt_init+0xf0>)
   2865c:	4e11      	ldr	r6, [pc, #68]	; (286a4 <bt_gatt_init+0xf4>)
   2865e:	462f      	mov	r7, r5
   28660:	e7e6      	b.n	28630 <bt_gatt_init+0x80>
}
   28662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28664:	200029ec 	.word	0x200029ec
   28668:	20002a08 	.word	0x20002a08
   2866c:	200029c4 	.word	0x200029c4
   28670:	000288cd 	.word	0x000288cd
   28674:	20001d10 	.word	0x20001d10
   28678:	00028ced 	.word	0x00028ced
   2867c:	20001dc0 	.word	0x20001dc0
   28680:	20001df0 	.word	0x20001df0
   28684:	00039629 	.word	0x00039629
   28688:	20001d70 	.word	0x20001d70
   2868c:	20003740 	.word	0x20003740
   28690:	0003effa 	.word	0x0003effa
   28694:	0003c48a 	.word	0x0003c48a
   28698:	0003d403 	.word	0x0003d403
   2869c:	0003b3e4 	.word	0x0003b3e4
   286a0:	0003b3cc 	.word	0x0003b3cc
   286a4:	0003eeb8 	.word	0x0003eeb8

000286a8 <bt_gatt_attr_get_handle>:
{
   286a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   286ac:	4604      	mov	r4, r0
   286ae:	b910      	cbnz	r0, 286b6 <bt_gatt_attr_get_handle+0xe>
		return 0;
   286b0:	2000      	movs	r0, #0
}
   286b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   286b6:	8a00      	ldrh	r0, [r0, #16]
   286b8:	2800      	cmp	r0, #0
   286ba:	d1fa      	bne.n	286b2 <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   286bc:	4f1a      	ldr	r7, [pc, #104]	; (28728 <bt_gatt_attr_get_handle+0x80>)
   286be:	4d1b      	ldr	r5, [pc, #108]	; (2872c <bt_gatt_attr_get_handle+0x84>)
   286c0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 2873c <bt_gatt_attr_get_handle+0x94>
	uint16_t handle = 1;
   286c4:	2601      	movs	r6, #1
   286c6:	46b8      	mov	r8, r7
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   286c8:	42bd      	cmp	r5, r7
   286ca:	d90e      	bls.n	286ea <bt_gatt_attr_get_handle+0x42>
   286cc:	4918      	ldr	r1, [pc, #96]	; (28730 <bt_gatt_attr_get_handle+0x88>)
   286ce:	4819      	ldr	r0, [pc, #100]	; (28734 <bt_gatt_attr_get_handle+0x8c>)
   286d0:	f240 538c 	movw	r3, #1420	; 0x58c
   286d4:	464a      	mov	r2, r9
   286d6:	f00e fd20 	bl	3711a <printk>
   286da:	4817      	ldr	r0, [pc, #92]	; (28738 <bt_gatt_attr_get_handle+0x90>)
   286dc:	f00e fd1d 	bl	3711a <printk>
   286e0:	f240 518c 	movw	r1, #1420	; 0x58c
   286e4:	4648      	mov	r0, r9
   286e6:	f00e febe 	bl	37466 <assert_post_action>
   286ea:	4545      	cmp	r5, r8
   286ec:	d2e0      	bcs.n	286b0 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   286ee:	e9d5 ec00 	ldrd	lr, ip, [r5]
   286f2:	4574      	cmp	r4, lr
   286f4:	d305      	bcc.n	28702 <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   286f6:	2114      	movs	r1, #20
   286f8:	fb01 e30c 	mla	r3, r1, ip, lr
   286fc:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   286fe:	429c      	cmp	r4, r3
   28700:	d90f      	bls.n	28722 <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   28702:	eb06 030c 	add.w	r3, r6, ip
   28706:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   28708:	3508      	adds	r5, #8
   2870a:	4606      	mov	r6, r0
   2870c:	e7dc      	b.n	286c8 <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   2870e:	fb01 e302 	mla	r3, r1, r2, lr
   28712:	429c      	cmp	r4, r3
   28714:	d0cd      	beq.n	286b2 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   28716:	3201      	adds	r2, #1
   28718:	18b3      	adds	r3, r6, r2
   2871a:	4562      	cmp	r2, ip
   2871c:	b298      	uxth	r0, r3
   2871e:	d1f6      	bne.n	2870e <bt_gatt_attr_get_handle+0x66>
   28720:	e7f2      	b.n	28708 <bt_gatt_attr_get_handle+0x60>
   28722:	2200      	movs	r2, #0
   28724:	e7f8      	b.n	28718 <bt_gatt_attr_get_handle+0x70>
   28726:	bf00      	nop
   28728:	0003b3e4 	.word	0x0003b3e4
   2872c:	0003b3cc 	.word	0x0003b3cc
   28730:	0003eff3 	.word	0x0003eff3
   28734:	0003c48a 	.word	0x0003c48a
   28738:	0003d403 	.word	0x0003d403
   2873c:	0003eeb8 	.word	0x0003eeb8

00028740 <bt_gatt_foreach_attr_type>:
{
   28740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28744:	b085      	sub	sp, #20
   28746:	4607      	mov	r7, r0
   28748:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   2874c:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   2874e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28752:	2d00      	cmp	r5, #0
   28754:	bf08      	it	eq
   28756:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   28758:	4b2d      	ldr	r3, [pc, #180]	; (28810 <bt_gatt_foreach_attr_type+0xd0>)
{
   2875a:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   2875c:	881b      	ldrh	r3, [r3, #0]
   2875e:	4283      	cmp	r3, r0
{
   28760:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   28762:	d24e      	bcs.n	28802 <bt_gatt_foreach_attr_type+0xc2>
}
   28764:	b005      	add	sp, #20
   28766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   2876a:	6873      	ldr	r3, [r6, #4]
   2876c:	4423      	add	r3, r4
   2876e:	42bb      	cmp	r3, r7
   28770:	d244      	bcs.n	287fc <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   28772:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   28774:	3608      	adds	r6, #8
   28776:	4556      	cmp	r6, sl
   28778:	d90e      	bls.n	28798 <bt_gatt_foreach_attr_type+0x58>
   2877a:	4926      	ldr	r1, [pc, #152]	; (28814 <bt_gatt_foreach_attr_type+0xd4>)
   2877c:	4826      	ldr	r0, [pc, #152]	; (28818 <bt_gatt_foreach_attr_type+0xd8>)
   2877e:	f44f 63ca 	mov.w	r3, #1616	; 0x650
   28782:	465a      	mov	r2, fp
   28784:	f00e fcc9 	bl	3711a <printk>
   28788:	4824      	ldr	r0, [pc, #144]	; (2881c <bt_gatt_foreach_attr_type+0xdc>)
   2878a:	f00e fcc6 	bl	3711a <printk>
   2878e:	f44f 61ca 	mov.w	r1, #1616	; 0x650
   28792:	4658      	mov	r0, fp
   28794:	f00e fe67 	bl	37466 <assert_post_action>
   28798:	4b21      	ldr	r3, [pc, #132]	; (28820 <bt_gatt_foreach_attr_type+0xe0>)
   2879a:	429e      	cmp	r6, r3
   2879c:	d3e5      	bcc.n	2876a <bt_gatt_foreach_attr_type+0x2a>
   2879e:	e7e1      	b.n	28764 <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   287a0:	5889      	ldr	r1, [r1, r2]
   287a2:	9303      	str	r3, [sp, #12]
   287a4:	4640      	mov	r0, r8
   287a6:	f00f fca8 	bl	380fa <bt_uuid_cmp>
   287aa:	9b03      	ldr	r3, [sp, #12]
   287ac:	b198      	cbz	r0, 287d6 <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   287ae:	3401      	adds	r4, #1
   287b0:	f109 0901 	add.w	r9, r9, #1
   287b4:	b2a4      	uxth	r4, r4
   287b6:	6873      	ldr	r3, [r6, #4]
   287b8:	454b      	cmp	r3, r9
   287ba:	d9db      	bls.n	28774 <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   287bc:	9b02      	ldr	r3, [sp, #8]
   287be:	429c      	cmp	r4, r3
   287c0:	d8d0      	bhi.n	28764 <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   287c2:	42bc      	cmp	r4, r7
   287c4:	d3f3      	bcc.n	287ae <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   287c6:	2314      	movs	r3, #20
   287c8:	6831      	ldr	r1, [r6, #0]
   287ca:	fb03 f209 	mul.w	r2, r3, r9
   287ce:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   287d0:	f1b8 0f00 	cmp.w	r8, #0
   287d4:	d1e4      	bne.n	287a0 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   287d6:	9a01      	ldr	r2, [sp, #4]
   287d8:	b95a      	cbnz	r2, 287f2 <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   287da:	3d01      	subs	r5, #1
   287dc:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   287de:	4618      	mov	r0, r3
   287e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   287e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   287e4:	4621      	mov	r1, r4
   287e6:	4798      	blx	r3
	if (!*num_matches) {
   287e8:	2d00      	cmp	r5, #0
   287ea:	d0bb      	beq.n	28764 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   287ec:	2800      	cmp	r0, #0
   287ee:	d1de      	bne.n	287ae <bt_gatt_foreach_attr_type+0x6e>
   287f0:	e7b8      	b.n	28764 <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   287f2:	68da      	ldr	r2, [r3, #12]
   287f4:	9901      	ldr	r1, [sp, #4]
   287f6:	4291      	cmp	r1, r2
   287f8:	d1d9      	bne.n	287ae <bt_gatt_foreach_attr_type+0x6e>
   287fa:	e7ee      	b.n	287da <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   287fc:	f04f 0900 	mov.w	r9, #0
   28800:	e7d9      	b.n	287b6 <bt_gatt_foreach_attr_type+0x76>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   28802:	4e08      	ldr	r6, [pc, #32]	; (28824 <bt_gatt_foreach_attr_type+0xe4>)
   28804:	f8df a018 	ldr.w	sl, [pc, #24]	; 28820 <bt_gatt_foreach_attr_type+0xe0>
   28808:	f8df b01c 	ldr.w	fp, [pc, #28]	; 28828 <bt_gatt_foreach_attr_type+0xe8>
		uint16_t handle = 1;
   2880c:	2401      	movs	r4, #1
   2880e:	e7b2      	b.n	28776 <bt_gatt_foreach_attr_type+0x36>
   28810:	20003740 	.word	0x20003740
   28814:	0003eff3 	.word	0x0003eff3
   28818:	0003c48a 	.word	0x0003c48a
   2881c:	0003d403 	.word	0x0003d403
   28820:	0003b3e4 	.word	0x0003b3e4
   28824:	0003b3cc 	.word	0x0003b3cc
   28828:	0003eeb8 	.word	0x0003eeb8

0002882c <db_hash_gen>:
{
   2882c:	b530      	push	{r4, r5, lr}
   2882e:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   28830:	2300      	movs	r3, #0
{
   28832:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   28834:	aa1c      	add	r2, sp, #112	; 0x70
   28836:	4669      	mov	r1, sp
   28838:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   2883a:	e9cd 3300 	strd	r3, r3, [sp]
   2883e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   28842:	f00f fb19 	bl	37e78 <tc_cmac_setup>
   28846:	b958      	cbnz	r0, 28860 <db_hash_gen+0x34>
   28848:	4819      	ldr	r0, [pc, #100]	; (288b0 <db_hash_gen+0x84>)
   2884a:	4b1a      	ldr	r3, [pc, #104]	; (288b4 <db_hash_gen+0x88>)
		BT_ERR("Unable to setup AES CMAC");
   2884c:	491a      	ldr	r1, [pc, #104]	; (288b8 <db_hash_gen+0x8c>)
   2884e:	1ac0      	subs	r0, r0, r3
   28850:	08c0      	lsrs	r0, r0, #3
   28852:	0180      	lsls	r0, r0, #6
		BT_ERR("Unable to calculate hash");
   28854:	f040 0001 	orr.w	r0, r0, #1
   28858:	f00e fe1a 	bl	37490 <log_string_sync>
}
   2885c:	b049      	add	sp, #292	; 0x124
   2885e:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   28860:	f64f 71ff 	movw	r1, #65535	; 0xffff
   28864:	2001      	movs	r0, #1
   28866:	4a15      	ldr	r2, [pc, #84]	; (288bc <db_hash_gen+0x90>)
   28868:	ab04      	add	r3, sp, #16
   2886a:	f010 fe5d 	bl	39528 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   2886e:	4814      	ldr	r0, [pc, #80]	; (288c0 <db_hash_gen+0x94>)
   28870:	a904      	add	r1, sp, #16
   28872:	f00f fb98 	bl	37fa6 <tc_cmac_final>
   28876:	b930      	cbnz	r0, 28886 <db_hash_gen+0x5a>
   28878:	480d      	ldr	r0, [pc, #52]	; (288b0 <db_hash_gen+0x84>)
   2887a:	4b0e      	ldr	r3, [pc, #56]	; (288b4 <db_hash_gen+0x88>)
		BT_ERR("Unable to calculate hash");
   2887c:	4911      	ldr	r1, [pc, #68]	; (288c4 <db_hash_gen+0x98>)
   2887e:	1ac0      	subs	r0, r0, r3
   28880:	08c0      	lsrs	r0, r0, #3
   28882:	0180      	lsls	r0, r0, #6
   28884:	e7e6      	b.n	28854 <db_hash_gen+0x28>
   28886:	4b0e      	ldr	r3, [pc, #56]	; (288c0 <db_hash_gen+0x94>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   28888:	2208      	movs	r2, #8
   2888a:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   2888e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28890:	780d      	ldrb	r5, [r1, #0]
   28892:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   28896:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28898:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   2889c:	d1f7      	bne.n	2888e <db_hash_gen+0x62>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   2889e:	b10c      	cbz	r4, 288a4 <db_hash_gen+0x78>
		db_hash_store();
   288a0:	f7ff f9b4 	bl	27c0c <db_hash_store>
   288a4:	2104      	movs	r1, #4
   288a6:	4808      	ldr	r0, [pc, #32]	; (288c8 <db_hash_gen+0x9c>)
   288a8:	f010 fc34 	bl	39114 <atomic_or>
   288ac:	e7d6      	b.n	2885c <db_hash_gen+0x30>
   288ae:	bf00      	nop
   288b0:	0003b478 	.word	0x0003b478
   288b4:	0003b448 	.word	0x0003b448
   288b8:	0003f022 	.word	0x0003f022
   288bc:	00039069 	.word	0x00039069
   288c0:	20001cf0 	.word	0x20001cf0
   288c4:	0003f03b 	.word	0x0003f03b
   288c8:	20001df0 	.word	0x20001df0

000288cc <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   288cc:	f06f 0108 	mvn.w	r1, #8
{
   288d0:	b510      	push	{r4, lr}
   288d2:	4828      	ldr	r0, [pc, #160]	; (28974 <db_hash_process+0xa8>)
   288d4:	f010 fc56 	bl	39184 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   288d8:	0701      	lsls	r1, r0, #28
   288da:	d545      	bpl.n	28968 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   288dc:	4825      	ldr	r0, [pc, #148]	; (28974 <db_hash_process+0xa8>)
   288de:	f010 fbbd 	bl	3905c <atomic_get>
   288e2:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   288e4:	075a      	lsls	r2, r3, #29
   288e6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   288ea:	d401      	bmi.n	288f0 <db_hash_process+0x24>
			db_hash_gen(false);
   288ec:	f7ff ff9e 	bl	2882c <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   288f0:	4921      	ldr	r1, [pc, #132]	; (28978 <db_hash_process+0xac>)
   288f2:	2210      	movs	r2, #16
   288f4:	1888      	adds	r0, r1, r2
   288f6:	f011 fdf6 	bl	3a4e6 <memcmp>
   288fa:	b948      	cbnz	r0, 28910 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   288fc:	481f      	ldr	r0, [pc, #124]	; (2897c <db_hash_process+0xb0>)
   288fe:	f008 f821 	bl	30944 <k_work_cancel_delayable>
}
   28902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28906:	481b      	ldr	r0, [pc, #108]	; (28974 <db_hash_process+0xa8>)
   28908:	f06f 0101 	mvn.w	r1, #1
   2890c:	f010 bc3a 	b.w	39184 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   28910:	4c1b      	ldr	r4, [pc, #108]	; (28980 <db_hash_process+0xb4>)
   28912:	2101      	movs	r1, #1
   28914:	f104 0050 	add.w	r0, r4, #80	; 0x50
   28918:	f010 fbfc 	bl	39114 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2891c:	f010 0f01 	tst.w	r0, #1
   28920:	4623      	mov	r3, r4
   28922:	d110      	bne.n	28946 <db_hash_process+0x7a>
		gatt_sc.start = start;
   28924:	4b17      	ldr	r3, [pc, #92]	; (28984 <db_hash_process+0xb8>)
   28926:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28928:	4812      	ldr	r0, [pc, #72]	; (28974 <db_hash_process+0xa8>)
   2892a:	f010 fb97 	bl	3905c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   2892e:	0783      	lsls	r3, r0, #30
   28930:	d405      	bmi.n	2893e <db_hash_process+0x72>
	k_work_reschedule(&gatt_sc.work, timeout);
   28932:	4812      	ldr	r0, [pc, #72]	; (2897c <db_hash_process+0xb0>)
   28934:	f44f 72a4 	mov.w	r2, #328	; 0x148
   28938:	2300      	movs	r3, #0
   2893a:	f007 fffd 	bl	30938 <k_work_reschedule>
}
   2893e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   28942:	f7ff b963 	b.w	27c0c <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   28946:	8b22      	ldrh	r2, [r4, #24]
   28948:	8b61      	ldrh	r1, [r4, #26]
   2894a:	2a01      	cmp	r2, #1
   2894c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   28950:	d805      	bhi.n	2895e <db_hash_process+0x92>
   28952:	4291      	cmp	r1, r2
   28954:	d0f3      	beq.n	2893e <db_hash_process+0x72>
		*end = new_end;
   28956:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2895a:	835a      	strh	r2, [r3, #26]
   2895c:	e7e4      	b.n	28928 <db_hash_process+0x5c>
		*start = new_start;
   2895e:	2001      	movs	r0, #1
	if (*end < new_end) {
   28960:	4291      	cmp	r1, r2
		*start = new_start;
   28962:	8320      	strh	r0, [r4, #24]
	if (*end < new_end) {
   28964:	d0e0      	beq.n	28928 <db_hash_process+0x5c>
   28966:	e7f6      	b.n	28956 <db_hash_process+0x8a>
}
   28968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   2896c:	2001      	movs	r0, #1
   2896e:	f7ff bf5d 	b.w	2882c <db_hash_gen>
   28972:	bf00      	nop
   28974:	20001df0 	.word	0x20001df0
   28978:	20001cf0 	.word	0x20001cf0
   2897c:	20001dc0 	.word	0x20001dc0
   28980:	20001da0 	.word	0x20001da0
   28984:	ffff0001 	.word	0xffff0001

00028988 <ccc_set_direct>:
{
   28988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2898c:	b0b9      	sub	sp, #228	; 0xe4
   2898e:	4688      	mov	r8, r1
   28990:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   28992:	493f      	ldr	r1, [pc, #252]	; (28a90 <ccc_set_direct+0x108>)
   28994:	9840      	ldr	r0, [sp, #256]	; 0x100
   28996:	466a      	mov	r2, sp
{
   28998:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   2899a:	f00f f873 	bl	37a84 <settings_name_steq>
   2899e:	b978      	cbnz	r0, 289c0 <ccc_set_direct+0x38>
   289a0:	4b3c      	ldr	r3, [pc, #240]	; (28a94 <ccc_set_direct+0x10c>)
   289a2:	483d      	ldr	r0, [pc, #244]	; (28a98 <ccc_set_direct+0x110>)
			BT_ERR("Invalid key");
   289a4:	493d      	ldr	r1, [pc, #244]	; (28a9c <ccc_set_direct+0x114>)
   289a6:	1ac0      	subs	r0, r0, r3
   289a8:	08c0      	lsrs	r0, r0, #3
   289aa:	0180      	lsls	r0, r0, #6
   289ac:	f040 0001 	orr.w	r0, r0, #1
   289b0:	f00e fd6e 	bl	37490 <log_string_sync>
			return -EINVAL;
   289b4:	f06f 0515 	mvn.w	r5, #21
}
   289b8:	4628      	mov	r0, r5
   289ba:	b039      	add	sp, #228	; 0xe4
   289bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   289c0:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   289c2:	a901      	add	r1, sp, #4
   289c4:	4630      	mov	r0, r6
   289c6:	f00f f880 	bl	37aca <settings_name_next>
		if (!name) {
   289ca:	b96e      	cbnz	r6, 289e8 <ccc_set_direct+0x60>
   289cc:	4832      	ldr	r0, [pc, #200]	; (28a98 <ccc_set_direct+0x110>)
   289ce:	4b31      	ldr	r3, [pc, #196]	; (28a94 <ccc_set_direct+0x10c>)
			BT_ERR("Insufficient number of arguments");
   289d0:	4933      	ldr	r1, [pc, #204]	; (28aa0 <ccc_set_direct+0x118>)
   289d2:	1ac0      	subs	r0, r0, r3
   289d4:	08c0      	lsrs	r0, r0, #3
   289d6:	0180      	lsls	r0, r0, #6
   289d8:	f040 0001 	orr.w	r0, r0, #1
   289dc:	f00e fd58 	bl	37490 <log_string_sync>
			return -EINVAL;
   289e0:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   289e4:	4625      	mov	r5, r4
   289e6:	e7e7      	b.n	289b8 <ccc_set_direct+0x30>
		} else if (!next) {
   289e8:	9801      	ldr	r0, [sp, #4]
   289ea:	b9c0      	cbnz	r0, 28a1e <ccc_set_direct+0x96>
		err = bt_settings_decode_key(name, &addr);
   289ec:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   289f0:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   289f2:	4649      	mov	r1, r9
   289f4:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   289f6:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   289fa:	f00f fb5a 	bl	380b2 <bt_settings_decode_key>
		if (err) {
   289fe:	4605      	mov	r5, r0
   28a00:	b1f8      	cbz	r0, 28a42 <ccc_set_direct+0xba>
   28a02:	4b24      	ldr	r3, [pc, #144]	; (28a94 <ccc_set_direct+0x10c>)
   28a04:	4c24      	ldr	r4, [pc, #144]	; (28a98 <ccc_set_direct+0x110>)
   28a06:	4630      	mov	r0, r6
   28a08:	1ae4      	subs	r4, r4, r3
   28a0a:	08e4      	lsrs	r4, r4, #3
   28a0c:	f00e fd53 	bl	374b6 <z_log_strdup>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   28a10:	01a4      	lsls	r4, r4, #6
   28a12:	f044 0401 	orr.w	r4, r4, #1
   28a16:	4602      	mov	r2, r0
   28a18:	4922      	ldr	r1, [pc, #136]	; (28aa4 <ccc_set_direct+0x11c>)
   28a1a:	4620      	mov	r0, r4
   28a1c:	e00e      	b.n	28a3c <ccc_set_direct+0xb4>
			unsigned long next_id = strtoul(next, NULL, 10);
   28a1e:	220a      	movs	r2, #10
   28a20:	2100      	movs	r1, #0
   28a22:	f00d fe19 	bl	36658 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   28a26:	4602      	mov	r2, r0
   28a28:	2800      	cmp	r0, #0
   28a2a:	d0df      	beq.n	289ec <ccc_set_direct+0x64>
   28a2c:	4819      	ldr	r0, [pc, #100]	; (28a94 <ccc_set_direct+0x10c>)
   28a2e:	4b1a      	ldr	r3, [pc, #104]	; (28a98 <ccc_set_direct+0x110>)
				BT_ERR("Invalid local identity %lu", next_id);
   28a30:	491d      	ldr	r1, [pc, #116]	; (28aa8 <ccc_set_direct+0x120>)
   28a32:	1a1b      	subs	r3, r3, r0
   28a34:	08db      	lsrs	r3, r3, #3
   28a36:	019b      	lsls	r3, r3, #6
   28a38:	f043 0001 	orr.w	r0, r3, #1
			BT_ERR("Unable to decode address %s", log_strdup(name));
   28a3c:	f00e fd28 	bl	37490 <log_string_sync>
   28a40:	e7ce      	b.n	289e0 <ccc_set_direct+0x58>
		load.addr_with_id.addr = &addr;
   28a42:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   28a46:	f1b8 0f00 	cmp.w	r8, #0
   28a4a:	d01d      	beq.n	28a88 <ccc_set_direct+0x100>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   28a4c:	ae08      	add	r6, sp, #32
   28a4e:	22c0      	movs	r2, #192	; 0xc0
   28a50:	4631      	mov	r1, r6
   28a52:	4638      	mov	r0, r7
   28a54:	47a0      	blx	r4
			if (len < 0) {
   28a56:	1e04      	subs	r4, r0, #0
   28a58:	da0b      	bge.n	28a72 <ccc_set_direct+0xea>
   28a5a:	4b0e      	ldr	r3, [pc, #56]	; (28a94 <ccc_set_direct+0x10c>)
   28a5c:	480e      	ldr	r0, [pc, #56]	; (28a98 <ccc_set_direct+0x110>)
				BT_ERR("Failed to decode value (err %zd)", len);
   28a5e:	4913      	ldr	r1, [pc, #76]	; (28aac <ccc_set_direct+0x124>)
   28a60:	1ac0      	subs	r0, r0, r3
   28a62:	08c0      	lsrs	r0, r0, #3
   28a64:	0180      	lsls	r0, r0, #6
   28a66:	4622      	mov	r2, r4
   28a68:	f040 0001 	orr.w	r0, r0, #1
   28a6c:	f00e fd10 	bl	37490 <log_string_sync>
				return len;
   28a70:	e7b8      	b.n	289e4 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
   28a72:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   28a74:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   28a76:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   28a78:	4a0d      	ldr	r2, [pc, #52]	; (28ab0 <ccc_set_direct+0x128>)
   28a7a:	ab04      	add	r3, sp, #16
   28a7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   28a80:	2001      	movs	r0, #1
   28a82:	f010 fd51 	bl	39528 <bt_gatt_foreach_attr>
	return 0;
   28a86:	e797      	b.n	289b8 <ccc_set_direct+0x30>
			load.count = 0;
   28a88:	e9cd 0006 	strd	r0, r0, [sp, #24]
   28a8c:	e7f4      	b.n	28a78 <ccc_set_direct+0xf0>
   28a8e:	bf00      	nop
   28a90:	0003f054 	.word	0x0003f054
   28a94:	0003b448 	.word	0x0003b448
   28a98:	0003b478 	.word	0x0003b478
   28a9c:	0003f05b 	.word	0x0003f05b
   28aa0:	0003decc 	.word	0x0003decc
   28aa4:	0003ef19 	.word	0x0003ef19
   28aa8:	0003ef35 	.word	0x0003ef35
   28aac:	0003ee2e 	.word	0x0003ee2e
   28ab0:	00028019 	.word	0x00028019

00028ab4 <bt_gatt_attr_next>:
{
   28ab4:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   28ab6:	2300      	movs	r3, #0
   28ab8:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   28aba:	f7ff fdf5 	bl	286a8 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   28abe:	1c41      	adds	r1, r0, #1
   28ac0:	b289      	uxth	r1, r1
   28ac2:	4608      	mov	r0, r1
   28ac4:	4a03      	ldr	r2, [pc, #12]	; (28ad4 <bt_gatt_attr_next+0x20>)
   28ac6:	ab01      	add	r3, sp, #4
   28ac8:	f010 fd2e 	bl	39528 <bt_gatt_foreach_attr>
}
   28acc:	9801      	ldr	r0, [sp, #4]
   28ace:	b003      	add	sp, #12
   28ad0:	f85d fb04 	ldr.w	pc, [sp], #4
   28ad4:	00039011 	.word	0x00039011

00028ad8 <gatt_indicate>:
{
   28ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28adc:	4615      	mov	r5, r2
   28ade:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   28ae0:	2214      	movs	r2, #20
   28ae2:	6869      	ldr	r1, [r5, #4]
{
   28ae4:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   28ae6:	f010 fd2a 	bl	3953e <bt_gatt_check_perm>
   28aea:	b170      	cbz	r0, 28b0a <gatt_indicate+0x32>
   28aec:	4b28      	ldr	r3, [pc, #160]	; (28b90 <gatt_indicate+0xb8>)
   28aee:	4829      	ldr	r0, [pc, #164]	; (28b94 <gatt_indicate+0xbc>)
		BT_WARN("Link is not encrypted");
   28af0:	4929      	ldr	r1, [pc, #164]	; (28b98 <gatt_indicate+0xc0>)
   28af2:	1ac0      	subs	r0, r0, r3
   28af4:	08c0      	lsrs	r0, r0, #3
   28af6:	0180      	lsls	r0, r0, #6
   28af8:	f040 0002 	orr.w	r0, r0, #2
   28afc:	f00e fcc8 	bl	37490 <log_string_sync>
		return -EPERM;
   28b00:	f04f 35ff 	mov.w	r5, #4294967295
}
   28b04:	4628      	mov	r0, r5
   28b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   28b0a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   28b0e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   28b10:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   28b12:	f7fe fe8d 	bl	27830 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   28b16:	3602      	adds	r6, #2
	if (!req) {
   28b18:	4604      	mov	r4, r0
   28b1a:	b910      	cbnz	r0, 28b22 <gatt_indicate+0x4a>
		return -ENOMEM;
   28b1c:	f06f 050b 	mvn.w	r5, #11
   28b20:	e7f0      	b.n	28b04 <gatt_indicate+0x2c>
	req->func = func;
   28b22:	4b1e      	ldr	r3, [pc, #120]	; (28b9c <gatt_indicate+0xc4>)
   28b24:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   28b26:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   28b28:	4632      	mov	r2, r6
   28b2a:	211d      	movs	r1, #29
   28b2c:	4640      	mov	r0, r8
   28b2e:	f7fe fac9 	bl	270c4 <bt_att_create_pdu>
	if (!buf) {
   28b32:	4606      	mov	r6, r0
   28b34:	b968      	cbnz	r0, 28b52 <gatt_indicate+0x7a>
   28b36:	4b16      	ldr	r3, [pc, #88]	; (28b90 <gatt_indicate+0xb8>)
   28b38:	4816      	ldr	r0, [pc, #88]	; (28b94 <gatt_indicate+0xbc>)
		BT_WARN("No buffer available to send indication");
   28b3a:	4919      	ldr	r1, [pc, #100]	; (28ba0 <gatt_indicate+0xc8>)
   28b3c:	1ac0      	subs	r0, r0, r3
   28b3e:	08c0      	lsrs	r0, r0, #3
   28b40:	0180      	lsls	r0, r0, #6
   28b42:	f040 0002 	orr.w	r0, r0, #2
   28b46:	f00e fca3 	bl	37490 <log_string_sync>
		bt_att_req_free(req);
   28b4a:	4620      	mov	r0, r4
   28b4c:	f7fe fe86 	bl	2785c <bt_att_req_free>
   28b50:	e7e4      	b.n	28b1c <gatt_indicate+0x44>
   28b52:	f100 0a08 	add.w	sl, r0, #8
   28b56:	2102      	movs	r1, #2
   28b58:	4650      	mov	r0, sl
   28b5a:	f001 fa6b 	bl	2a034 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   28b5e:	4607      	mov	r7, r0
   28b60:	8aa9      	ldrh	r1, [r5, #20]
   28b62:	f827 9b02 	strh.w	r9, [r7], #2
   28b66:	4650      	mov	r0, sl
   28b68:	f001 fa64 	bl	2a034 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28b6c:	8aaa      	ldrh	r2, [r5, #20]
   28b6e:	6929      	ldr	r1, [r5, #16]
   28b70:	4638      	mov	r0, r7
   28b72:	f011 fcc6 	bl	3a502 <memcpy>
	req->buf = buf;
   28b76:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   28b78:	4621      	mov	r1, r4
   28b7a:	4640      	mov	r0, r8
   28b7c:	f7fe ffbc 	bl	27af8 <bt_att_req_send>
	if (err) {
   28b80:	4605      	mov	r5, r0
   28b82:	2800      	cmp	r0, #0
   28b84:	d0be      	beq.n	28b04 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   28b86:	4620      	mov	r0, r4
   28b88:	f7fe fe68 	bl	2785c <bt_att_req_free>
   28b8c:	e7ba      	b.n	28b04 <gatt_indicate+0x2c>
   28b8e:	bf00      	nop
   28b90:	0003b448 	.word	0x0003b448
   28b94:	0003b478 	.word	0x0003b478
   28b98:	0003f067 	.word	0x0003f067
   28b9c:	0003902b 	.word	0x0003902b
   28ba0:	0003f07d 	.word	0x0003f07d

00028ba4 <bt_gatt_indicate>:
{
   28ba4:	b530      	push	{r4, r5, lr}
   28ba6:	4605      	mov	r5, r0
   28ba8:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   28baa:	460c      	mov	r4, r1
   28bac:	b971      	cbnz	r1, 28bcc <bt_gatt_indicate+0x28>
   28bae:	4947      	ldr	r1, [pc, #284]	; (28ccc <bt_gatt_indicate+0x128>)
   28bb0:	4a47      	ldr	r2, [pc, #284]	; (28cd0 <bt_gatt_indicate+0x12c>)
   28bb2:	4848      	ldr	r0, [pc, #288]	; (28cd4 <bt_gatt_indicate+0x130>)
   28bb4:	f640 1348 	movw	r3, #2376	; 0x948
   28bb8:	f00e faaf 	bl	3711a <printk>
   28bbc:	4846      	ldr	r0, [pc, #280]	; (28cd8 <bt_gatt_indicate+0x134>)
   28bbe:	f00e faac 	bl	3711a <printk>
   28bc2:	4843      	ldr	r0, [pc, #268]	; (28cd0 <bt_gatt_indicate+0x12c>)
   28bc4:	f640 1148 	movw	r1, #2376	; 0x948
   28bc8:	f00e fc4d 	bl	37466 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   28bcc:	6863      	ldr	r3, [r4, #4]
   28bce:	b983      	cbnz	r3, 28bf2 <bt_gatt_indicate+0x4e>
   28bd0:	6823      	ldr	r3, [r4, #0]
   28bd2:	b973      	cbnz	r3, 28bf2 <bt_gatt_indicate+0x4e>
   28bd4:	4941      	ldr	r1, [pc, #260]	; (28cdc <bt_gatt_indicate+0x138>)
   28bd6:	4a3e      	ldr	r2, [pc, #248]	; (28cd0 <bt_gatt_indicate+0x12c>)
   28bd8:	483e      	ldr	r0, [pc, #248]	; (28cd4 <bt_gatt_indicate+0x130>)
   28bda:	f640 1349 	movw	r3, #2377	; 0x949
   28bde:	f00e fa9c 	bl	3711a <printk>
   28be2:	483d      	ldr	r0, [pc, #244]	; (28cd8 <bt_gatt_indicate+0x134>)
   28be4:	f00e fa99 	bl	3711a <printk>
   28be8:	4839      	ldr	r0, [pc, #228]	; (28cd0 <bt_gatt_indicate+0x12c>)
   28bea:	f640 1149 	movw	r1, #2377	; 0x949
   28bee:	f00e fc3a 	bl	37466 <assert_post_action>
   28bf2:	483b      	ldr	r0, [pc, #236]	; (28ce0 <bt_gatt_indicate+0x13c>)
   28bf4:	f010 fa32 	bl	3905c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   28bf8:	0782      	lsls	r2, r0, #30
   28bfa:	d561      	bpl.n	28cc0 <bt_gatt_indicate+0x11c>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   28bfc:	b115      	cbz	r5, 28c04 <bt_gatt_indicate+0x60>
   28bfe:	7aab      	ldrb	r3, [r5, #10]
   28c00:	2b07      	cmp	r3, #7
   28c02:	d160      	bne.n	28cc6 <bt_gatt_indicate+0x122>
	data.attr = params->attr;
   28c04:	6860      	ldr	r0, [r4, #4]
   28c06:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   28c08:	f7ff fd4e 	bl	286a8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   28c0c:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   28c0e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   28c12:	b33a      	cbz	r2, 28c64 <bt_gatt_indicate+0xc0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   28c14:	a905      	add	r1, sp, #20
   28c16:	9102      	str	r1, [sp, #8]
   28c18:	4932      	ldr	r1, [pc, #200]	; (28ce4 <bt_gatt_indicate+0x140>)
   28c1a:	9101      	str	r1, [sp, #4]
   28c1c:	2101      	movs	r1, #1
	found->attr = NULL;
   28c1e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   28c20:	9100      	str	r1, [sp, #0]
   28c22:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   28c26:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   28c28:	f7ff fd8a 	bl	28740 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   28c2c:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   28c2e:	b91b      	cbnz	r3, 28c38 <bt_gatt_indicate+0x94>
			return -ENOENT;
   28c30:	f06f 0001 	mvn.w	r0, #1
}
   28c34:	b00b      	add	sp, #44	; 0x2c
   28c36:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   28c38:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   28c3a:	9b05      	ldr	r3, [sp, #20]
   28c3c:	6818      	ldr	r0, [r3, #0]
   28c3e:	2300      	movs	r3, #0
   28c40:	f88d 3010 	strb.w	r3, [sp, #16]
   28c44:	a904      	add	r1, sp, #16
   28c46:	f642 0303 	movw	r3, #10243	; 0x2803
   28c4a:	f8ad 3012 	strh.w	r3, [sp, #18]
   28c4e:	f00f fa54 	bl	380fa <bt_uuid_cmp>
   28c52:	b970      	cbnz	r0, 28c72 <bt_gatt_indicate+0xce>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   28c54:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   28c56:	68c3      	ldr	r3, [r0, #12]
   28c58:	799b      	ldrb	r3, [r3, #6]
   28c5a:	069b      	lsls	r3, r3, #26
   28c5c:	d405      	bmi.n	28c6a <bt_gatt_indicate+0xc6>
			return -EINVAL;
   28c5e:	f06f 0015 	mvn.w	r0, #21
   28c62:	e7e7      	b.n	28c34 <bt_gatt_indicate+0x90>
		if (!data.handle) {
   28c64:	2800      	cmp	r0, #0
   28c66:	d1e8      	bne.n	28c3a <bt_gatt_indicate+0x96>
   28c68:	e7e2      	b.n	28c30 <bt_gatt_indicate+0x8c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   28c6a:	f010 fc16 	bl	3949a <bt_gatt_attr_value_handle>
   28c6e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   28c72:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   28c76:	b13d      	cbz	r5, 28c88 <bt_gatt_indicate+0xe4>
		params->_ref = 1;
   28c78:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   28c7a:	4601      	mov	r1, r0
		params->_ref = 1;
   28c7c:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   28c7e:	4622      	mov	r2, r4
   28c80:	4628      	mov	r0, r5
   28c82:	f7ff ff29 	bl	28ad8 <gatt_indicate>
   28c86:	e7d5      	b.n	28c34 <bt_gatt_indicate+0x90>
	data.err = -ENOTCONN;
   28c88:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   28c8c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   28c8e:	2302      	movs	r3, #2
   28c90:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   28c94:	f642 1302 	movw	r3, #10498	; 0x2902
   28c98:	f8ad 3012 	strh.w	r3, [sp, #18]
   28c9c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   28c9e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   28ca0:	9302      	str	r3, [sp, #8]
   28ca2:	4b11      	ldr	r3, [pc, #68]	; (28ce8 <bt_gatt_indicate+0x144>)
   28ca4:	9301      	str	r3, [sp, #4]
   28ca6:	2301      	movs	r3, #1
   28ca8:	9300      	str	r3, [sp, #0]
   28caa:	aa04      	add	r2, sp, #16
   28cac:	462b      	mov	r3, r5
   28cae:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   28cb2:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   28cb4:	f88d 5010 	strb.w	r5, [sp, #16]
   28cb8:	f7ff fd42 	bl	28740 <bt_gatt_foreach_attr_type>
	return data.err;
   28cbc:	9807      	ldr	r0, [sp, #28]
   28cbe:	e7b9      	b.n	28c34 <bt_gatt_indicate+0x90>
		return -EAGAIN;
   28cc0:	f06f 000a 	mvn.w	r0, #10
   28cc4:	e7b6      	b.n	28c34 <bt_gatt_indicate+0x90>
		return -ENOTCONN;
   28cc6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28cca:	e7b3      	b.n	28c34 <bt_gatt_indicate+0x90>
   28ccc:	0003f0a4 	.word	0x0003f0a4
   28cd0:	0003eeb8 	.word	0x0003eeb8
   28cd4:	0003c48a 	.word	0x0003c48a
   28cd8:	0003f0ab 	.word	0x0003f0ab
   28cdc:	0003f0c1 	.word	0x0003f0c1
   28ce0:	2000037c 	.word	0x2000037c
   28ce4:	00039051 	.word	0x00039051
   28ce8:	00028f5d 	.word	0x00028f5d

00028cec <sc_process>:
{
   28cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   28cee:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   28cf2:	4604      	mov	r4, r0
   28cf4:	4628      	mov	r0, r5
   28cf6:	f010 f9b1 	bl	3905c <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   28cfa:	0783      	lsls	r3, r0, #30
   28cfc:	d50e      	bpl.n	28d1c <sc_process+0x30>
   28cfe:	4919      	ldr	r1, [pc, #100]	; (28d64 <sc_process+0x78>)
   28d00:	4a19      	ldr	r2, [pc, #100]	; (28d68 <sc_process+0x7c>)
   28d02:	481a      	ldr	r0, [pc, #104]	; (28d6c <sc_process+0x80>)
   28d04:	f240 33e7 	movw	r3, #999	; 0x3e7
   28d08:	f00e fa07 	bl	3711a <printk>
   28d0c:	4818      	ldr	r0, [pc, #96]	; (28d70 <sc_process+0x84>)
   28d0e:	f00e fa04 	bl	3711a <printk>
   28d12:	4815      	ldr	r0, [pc, #84]	; (28d68 <sc_process+0x7c>)
   28d14:	f240 31e7 	movw	r1, #999	; 0x3e7
   28d18:	f00e fba5 	bl	37466 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   28d1c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   28d20:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28d22:	f06f 0101 	mvn.w	r1, #1
   28d26:	4628      	mov	r0, r5
   28d28:	f010 fa2c 	bl	39184 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   28d2c:	4b11      	ldr	r3, [pc, #68]	; (28d74 <sc_process+0x88>)
   28d2e:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   28d32:	4b11      	ldr	r3, [pc, #68]	; (28d78 <sc_process+0x8c>)
   28d34:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   28d38:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   28d3a:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   28d3c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   28d40:	2304      	movs	r3, #4
	sc->start = 0U;
   28d42:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   28d46:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   28d4a:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   28d4e:	f1a4 0120 	sub.w	r1, r4, #32
   28d52:	f7ff ff27 	bl	28ba4 <bt_gatt_indicate>
   28d56:	b918      	cbnz	r0, 28d60 <sc_process+0x74>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   28d58:	2102      	movs	r1, #2
   28d5a:	4628      	mov	r0, r5
   28d5c:	f010 f9da 	bl	39114 <atomic_or>
}
   28d60:	b003      	add	sp, #12
   28d62:	bd30      	pop	{r4, r5, pc}
   28d64:	0003f0de 	.word	0x0003f0de
   28d68:	0003eeb8 	.word	0x0003eeb8
   28d6c:	0003c48a 	.word	0x0003c48a
   28d70:	0003f10f 	.word	0x0003f10f
   28d74:	0003bb7c 	.word	0x0003bb7c
   28d78:	00028545 	.word	0x00028545

00028d7c <gatt_notify>:
{
   28d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28d80:	4614      	mov	r4, r2
   28d82:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   28d84:	2214      	movs	r2, #20
   28d86:	6861      	ldr	r1, [r4, #4]
{
   28d88:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   28d8a:	f010 fbd8 	bl	3953e <bt_gatt_check_perm>
   28d8e:	b168      	cbz	r0, 28dac <gatt_notify+0x30>
   28d90:	4b1e      	ldr	r3, [pc, #120]	; (28e0c <gatt_notify+0x90>)
   28d92:	481f      	ldr	r0, [pc, #124]	; (28e10 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   28d94:	491f      	ldr	r1, [pc, #124]	; (28e14 <gatt_notify+0x98>)
   28d96:	1ac0      	subs	r0, r0, r3
   28d98:	08c0      	lsrs	r0, r0, #3
   28d9a:	0180      	lsls	r0, r0, #6
   28d9c:	f040 0002 	orr.w	r0, r0, #2
   28da0:	f00e fb76 	bl	37490 <log_string_sync>
		return -EPERM;
   28da4:	f04f 30ff 	mov.w	r0, #4294967295
}
   28da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   28dac:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   28dae:	211b      	movs	r1, #27
   28db0:	3202      	adds	r2, #2
   28db2:	4638      	mov	r0, r7
   28db4:	f7fe f986 	bl	270c4 <bt_att_create_pdu>
	if (!buf) {
   28db8:	4605      	mov	r5, r0
   28dba:	b960      	cbnz	r0, 28dd6 <gatt_notify+0x5a>
   28dbc:	4b13      	ldr	r3, [pc, #76]	; (28e0c <gatt_notify+0x90>)
   28dbe:	4814      	ldr	r0, [pc, #80]	; (28e10 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   28dc0:	4915      	ldr	r1, [pc, #84]	; (28e18 <gatt_notify+0x9c>)
   28dc2:	1ac0      	subs	r0, r0, r3
   28dc4:	08c0      	lsrs	r0, r0, #3
   28dc6:	0180      	lsls	r0, r0, #6
   28dc8:	f040 0002 	orr.w	r0, r0, #2
   28dcc:	f00e fb60 	bl	37490 <log_string_sync>
		return -ENOMEM;
   28dd0:	f06f 000b 	mvn.w	r0, #11
   28dd4:	e7e8      	b.n	28da8 <gatt_notify+0x2c>
   28dd6:	f100 0908 	add.w	r9, r0, #8
   28dda:	2102      	movs	r1, #2
   28ddc:	4648      	mov	r0, r9
   28dde:	f001 f929 	bl	2a034 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   28de2:	4606      	mov	r6, r0
   28de4:	89a1      	ldrh	r1, [r4, #12]
   28de6:	f826 8b02 	strh.w	r8, [r6], #2
   28dea:	4648      	mov	r0, r9
   28dec:	f001 f922 	bl	2a034 <net_buf_simple_add>
   28df0:	89a2      	ldrh	r2, [r4, #12]
   28df2:	68a1      	ldr	r1, [r4, #8]
   28df4:	4630      	mov	r0, r6
   28df6:	f011 fb84 	bl	3a502 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   28dfa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   28dfe:	4629      	mov	r1, r5
   28e00:	4638      	mov	r0, r7
}
   28e02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   28e06:	f7fe be09 	b.w	27a1c <bt_att_send>
   28e0a:	bf00      	nop
   28e0c:	0003b448 	.word	0x0003b448
   28e10:	0003b478 	.word	0x0003b478
   28e14:	0003f067 	.word	0x0003f067
   28e18:	0003f12a 	.word	0x0003f12a

00028e1c <bt_gatt_notify_cb>:
{
   28e1c:	b530      	push	{r4, r5, lr}
   28e1e:	4605      	mov	r5, r0
   28e20:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   28e22:	460c      	mov	r4, r1
   28e24:	b971      	cbnz	r1, 28e44 <bt_gatt_notify_cb+0x28>
   28e26:	4945      	ldr	r1, [pc, #276]	; (28f3c <bt_gatt_notify_cb+0x120>)
   28e28:	4a45      	ldr	r2, [pc, #276]	; (28f40 <bt_gatt_notify_cb+0x124>)
   28e2a:	4846      	ldr	r0, [pc, #280]	; (28f44 <bt_gatt_notify_cb+0x128>)
   28e2c:	f640 03fa 	movw	r3, #2298	; 0x8fa
   28e30:	f00e f973 	bl	3711a <printk>
   28e34:	4844      	ldr	r0, [pc, #272]	; (28f48 <bt_gatt_notify_cb+0x12c>)
   28e36:	f00e f970 	bl	3711a <printk>
   28e3a:	4841      	ldr	r0, [pc, #260]	; (28f40 <bt_gatt_notify_cb+0x124>)
   28e3c:	f640 01fa 	movw	r1, #2298	; 0x8fa
   28e40:	f00e fb11 	bl	37466 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   28e44:	6863      	ldr	r3, [r4, #4]
   28e46:	b983      	cbnz	r3, 28e6a <bt_gatt_notify_cb+0x4e>
   28e48:	6823      	ldr	r3, [r4, #0]
   28e4a:	b973      	cbnz	r3, 28e6a <bt_gatt_notify_cb+0x4e>
   28e4c:	493f      	ldr	r1, [pc, #252]	; (28f4c <bt_gatt_notify_cb+0x130>)
   28e4e:	4a3c      	ldr	r2, [pc, #240]	; (28f40 <bt_gatt_notify_cb+0x124>)
   28e50:	483c      	ldr	r0, [pc, #240]	; (28f44 <bt_gatt_notify_cb+0x128>)
   28e52:	f640 03fb 	movw	r3, #2299	; 0x8fb
   28e56:	f00e f960 	bl	3711a <printk>
   28e5a:	483b      	ldr	r0, [pc, #236]	; (28f48 <bt_gatt_notify_cb+0x12c>)
   28e5c:	f00e f95d 	bl	3711a <printk>
   28e60:	4837      	ldr	r0, [pc, #220]	; (28f40 <bt_gatt_notify_cb+0x124>)
   28e62:	f640 01fb 	movw	r1, #2299	; 0x8fb
   28e66:	f00e fafe 	bl	37466 <assert_post_action>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28e6a:	4839      	ldr	r0, [pc, #228]	; (28f50 <bt_gatt_notify_cb+0x134>)
   28e6c:	f010 f8f6 	bl	3905c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   28e70:	0782      	lsls	r2, r0, #30
   28e72:	d55d      	bpl.n	28f30 <bt_gatt_notify_cb+0x114>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   28e74:	b115      	cbz	r5, 28e7c <bt_gatt_notify_cb+0x60>
   28e76:	7aab      	ldrb	r3, [r5, #10]
   28e78:	2b07      	cmp	r3, #7
   28e7a:	d15c      	bne.n	28f36 <bt_gatt_notify_cb+0x11a>
	data.attr = params->attr;
   28e7c:	6860      	ldr	r0, [r4, #4]
   28e7e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   28e80:	f7ff fc12 	bl	286a8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   28e84:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   28e86:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   28e8a:	b33a      	cbz	r2, 28edc <bt_gatt_notify_cb+0xc0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   28e8c:	a905      	add	r1, sp, #20
   28e8e:	9102      	str	r1, [sp, #8]
   28e90:	4930      	ldr	r1, [pc, #192]	; (28f54 <bt_gatt_notify_cb+0x138>)
   28e92:	9101      	str	r1, [sp, #4]
   28e94:	2101      	movs	r1, #1
	found->attr = NULL;
   28e96:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   28e98:	9100      	str	r1, [sp, #0]
   28e9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   28e9e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   28ea0:	f7ff fc4e 	bl	28740 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   28ea4:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   28ea6:	b91b      	cbnz	r3, 28eb0 <bt_gatt_notify_cb+0x94>
			return -ENOENT;
   28ea8:	f06f 0001 	mvn.w	r0, #1
}
   28eac:	b00b      	add	sp, #44	; 0x2c
   28eae:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   28eb0:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   28eb2:	9b05      	ldr	r3, [sp, #20]
   28eb4:	6818      	ldr	r0, [r3, #0]
   28eb6:	2300      	movs	r3, #0
   28eb8:	f88d 3010 	strb.w	r3, [sp, #16]
   28ebc:	a904      	add	r1, sp, #16
   28ebe:	f642 0303 	movw	r3, #10243	; 0x2803
   28ec2:	f8ad 3012 	strh.w	r3, [sp, #18]
   28ec6:	f00f f918 	bl	380fa <bt_uuid_cmp>
   28eca:	b970      	cbnz	r0, 28eea <bt_gatt_notify_cb+0xce>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   28ecc:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   28ece:	68c3      	ldr	r3, [r0, #12]
   28ed0:	799b      	ldrb	r3, [r3, #6]
   28ed2:	06db      	lsls	r3, r3, #27
   28ed4:	d405      	bmi.n	28ee2 <bt_gatt_notify_cb+0xc6>
			return -EINVAL;
   28ed6:	f06f 0015 	mvn.w	r0, #21
   28eda:	e7e7      	b.n	28eac <bt_gatt_notify_cb+0x90>
		if (!data.handle) {
   28edc:	2800      	cmp	r0, #0
   28ede:	d1e8      	bne.n	28eb2 <bt_gatt_notify_cb+0x96>
   28ee0:	e7e2      	b.n	28ea8 <bt_gatt_notify_cb+0x8c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   28ee2:	f010 fada 	bl	3949a <bt_gatt_attr_value_handle>
   28ee6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   28eea:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   28eee:	b12d      	cbz	r5, 28efc <bt_gatt_notify_cb+0xe0>
		return gatt_notify(conn, data.handle, params);
   28ef0:	4601      	mov	r1, r0
   28ef2:	4622      	mov	r2, r4
   28ef4:	4628      	mov	r0, r5
   28ef6:	f7ff ff41 	bl	28d7c <gatt_notify>
   28efa:	e7d7      	b.n	28eac <bt_gatt_notify_cb+0x90>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   28efc:	f642 1202 	movw	r2, #10498	; 0x2902
   28f00:	f8ad 2012 	strh.w	r2, [sp, #18]
   28f04:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   28f06:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   28f0a:	9202      	str	r2, [sp, #8]
   28f0c:	4a12      	ldr	r2, [pc, #72]	; (28f58 <bt_gatt_notify_cb+0x13c>)
	data.err = -ENOTCONN;
   28f0e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   28f10:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   28f12:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   28f16:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   28f1a:	aa04      	add	r2, sp, #16
   28f1c:	462b      	mov	r3, r5
   28f1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   28f22:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   28f24:	f88d 5010 	strb.w	r5, [sp, #16]
   28f28:	f7ff fc0a 	bl	28740 <bt_gatt_foreach_attr_type>
	return data.err;
   28f2c:	9807      	ldr	r0, [sp, #28]
   28f2e:	e7bd      	b.n	28eac <bt_gatt_notify_cb+0x90>
		return -EAGAIN;
   28f30:	f06f 000a 	mvn.w	r0, #10
   28f34:	e7ba      	b.n	28eac <bt_gatt_notify_cb+0x90>
		return -ENOTCONN;
   28f36:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28f3a:	e7b7      	b.n	28eac <bt_gatt_notify_cb+0x90>
   28f3c:	0003f0a4 	.word	0x0003f0a4
   28f40:	0003eeb8 	.word	0x0003eeb8
   28f44:	0003c48a 	.word	0x0003c48a
   28f48:	0003f0ab 	.word	0x0003f0ab
   28f4c:	0003f0c1 	.word	0x0003f0c1
   28f50:	2000037c 	.word	0x2000037c
   28f54:	00039051 	.word	0x00039051
   28f58:	00028f5d 	.word	0x00028f5d

00028f5c <notify_cb>:
{
   28f5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   28f60:	4b3c      	ldr	r3, [pc, #240]	; (29054 <notify_cb+0xf8>)
{
   28f62:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   28f64:	6882      	ldr	r2, [r0, #8]
   28f66:	429a      	cmp	r2, r3
{
   28f68:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   28f6a:	d113      	bne.n	28f94 <notify_cb+0x38>
	ccc = attr->user_data;
   28f6c:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   28f6e:	4b3a      	ldr	r3, [pc, #232]	; (29058 <notify_cb+0xfc>)
   28f70:	429f      	cmp	r7, r3
   28f72:	d014      	beq.n	28f9e <notify_cb+0x42>
		if (cfg->value != data->type) {
   28f74:	893a      	ldrh	r2, [r7, #8]
   28f76:	89a3      	ldrh	r3, [r4, #12]
   28f78:	429a      	cmp	r2, r3
   28f7a:	d10b      	bne.n	28f94 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   28f7c:	4639      	mov	r1, r7
   28f7e:	f811 0b01 	ldrb.w	r0, [r1], #1
   28f82:	f7fc ffdb 	bl	25f3c <bt_conn_lookup_addr_le>
		if (!conn) {
   28f86:	4605      	mov	r5, r0
   28f88:	b120      	cbz	r0, 28f94 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   28f8a:	7a83      	ldrb	r3, [r0, #10]
   28f8c:	2b07      	cmp	r3, #7
   28f8e:	d02d      	beq.n	28fec <notify_cb+0x90>
			bt_conn_unref(conn);
   28f90:	f7fc fd24 	bl	259dc <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   28f94:	2701      	movs	r7, #1
}
   28f96:	4638      	mov	r0, r7
   28f98:	b003      	add	sp, #12
   28f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   28f9e:	f04f 0800 	mov.w	r8, #0
   28fa2:	4d2e      	ldr	r5, [pc, #184]	; (2905c <notify_cb+0x100>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   28fa4:	46c1      	mov	r9, r8
   28fa6:	4669      	mov	r1, sp
   28fa8:	4628      	mov	r0, r5
   28faa:	f8cd 9000 	str.w	r9, [sp]
   28fae:	f8cd 9003 	str.w	r9, [sp, #3]
   28fb2:	f010 f8be 	bl	39132 <bt_addr_le_cmp>
   28fb6:	b178      	cbz	r0, 28fd8 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   28fb8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   28fbc:	2207      	movs	r2, #7
   28fbe:	4629      	mov	r1, r5
   28fc0:	f7fd f800 	bl	25fc4 <bt_conn_lookup_state_le>
			if (!conn) {
   28fc4:	b978      	cbnz	r0, 28fe6 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   28fc6:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   28fc8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   28fcc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   28fce:	4629      	mov	r1, r5
   28fd0:	8853      	ldrh	r3, [r2, #2]
   28fd2:	8812      	ldrh	r2, [r2, #0]
   28fd4:	f7fe ff34 	bl	27e40 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   28fd8:	350c      	adds	r5, #12
   28fda:	f1b8 0f00 	cmp.w	r8, #0
   28fde:	d1c9      	bne.n	28f74 <notify_cb+0x18>
   28fe0:	f04f 0801 	mov.w	r8, #1
   28fe4:	e7df      	b.n	28fa6 <notify_cb+0x4a>
			bt_conn_unref(conn);
   28fe6:	f7fc fcf9 	bl	259dc <bt_conn_unref>
   28fea:	e7f5      	b.n	28fd8 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   28fec:	697b      	ldr	r3, [r7, #20]
   28fee:	b123      	cbz	r3, 28ffa <notify_cb+0x9e>
   28ff0:	4631      	mov	r1, r6
   28ff2:	4798      	blx	r3
   28ff4:	b908      	cbnz	r0, 28ffa <notify_cb+0x9e>
			bt_conn_unref(conn);
   28ff6:	4628      	mov	r0, r5
   28ff8:	e7ca      	b.n	28f90 <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   28ffa:	2214      	movs	r2, #20
   28ffc:	4631      	mov	r1, r6
   28ffe:	4628      	mov	r0, r5
   29000:	f010 fa9d 	bl	3953e <bt_gatt_check_perm>
   29004:	4607      	mov	r7, r0
   29006:	b150      	cbz	r0, 2901e <notify_cb+0xc2>
   29008:	4b15      	ldr	r3, [pc, #84]	; (29060 <notify_cb+0x104>)
   2900a:	4816      	ldr	r0, [pc, #88]	; (29064 <notify_cb+0x108>)
			BT_WARN("Link is not encrypted");
   2900c:	4916      	ldr	r1, [pc, #88]	; (29068 <notify_cb+0x10c>)
   2900e:	1ac0      	subs	r0, r0, r3
   29010:	08c0      	lsrs	r0, r0, #3
   29012:	0180      	lsls	r0, r0, #6
   29014:	f040 0002 	orr.w	r0, r0, #2
   29018:	f00e fa3a 	bl	37490 <log_string_sync>
			continue;
   2901c:	e7ba      	b.n	28f94 <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   2901e:	89a3      	ldrh	r3, [r4, #12]
   29020:	88a1      	ldrh	r1, [r4, #4]
   29022:	6922      	ldr	r2, [r4, #16]
   29024:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   29026:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   29028:	d10f      	bne.n	2904a <notify_cb+0xee>
			err = gatt_indicate(conn, data->handle,
   2902a:	f7ff fd55 	bl	28ad8 <gatt_indicate>
			if (err == 0) {
   2902e:	4606      	mov	r6, r0
   29030:	b918      	cbnz	r0, 2903a <notify_cb+0xde>
				data->ind_params->_ref++;
   29032:	6922      	ldr	r2, [r4, #16]
   29034:	7d93      	ldrb	r3, [r2, #22]
   29036:	3301      	adds	r3, #1
   29038:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   2903a:	4628      	mov	r0, r5
   2903c:	f7fc fcce 	bl	259dc <bt_conn_unref>
		if (err < 0) {
   29040:	2e00      	cmp	r6, #0
   29042:	dba8      	blt.n	28f96 <notify_cb+0x3a>
		data->err = 0;
   29044:	2300      	movs	r3, #0
   29046:	60a3      	str	r3, [r4, #8]
   29048:	e7a4      	b.n	28f94 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   2904a:	f7ff fe97 	bl	28d7c <gatt_notify>
   2904e:	4606      	mov	r6, r0
   29050:	e7f3      	b.n	2903a <notify_cb+0xde>
   29052:	bf00      	nop
   29054:	00027f09 	.word	0x00027f09
   29058:	20000644 	.word	0x20000644
   2905c:	20003743 	.word	0x20003743
   29060:	0003b448 	.word	0x0003b448
   29064:	0003b478 	.word	0x0003b478
   29068:	0003f067 	.word	0x0003f067

0002906c <update_ccc>:
{
   2906c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2906e:	4b30      	ldr	r3, [pc, #192]	; (29130 <update_ccc+0xc4>)
	struct bt_conn *conn = data->conn;
   29070:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   29072:	6882      	ldr	r2, [r0, #8]
   29074:	429a      	cmp	r2, r3
{
   29076:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   29078:	d11b      	bne.n	290b2 <update_ccc+0x46>
	ccc = attr->user_data;
   2907a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   2907c:	8933      	ldrh	r3, [r6, #8]
   2907e:	b1c3      	cbz	r3, 290b2 <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   29080:	4632      	mov	r2, r6
   29082:	4628      	mov	r0, r5
   29084:	f812 1b01 	ldrb.w	r1, [r2], #1
   29088:	f00f fb16 	bl	386b8 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   2908c:	b188      	cbz	r0, 290b2 <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   2908e:	222a      	movs	r2, #42	; 0x2a
   29090:	4621      	mov	r1, r4
   29092:	4628      	mov	r0, r5
   29094:	f010 fa53 	bl	3953e <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   29098:	2803      	cmp	r0, #3
   2909a:	d10d      	bne.n	290b8 <update_ccc+0x4c>
   2909c:	4825      	ldr	r0, [pc, #148]	; (29134 <update_ccc+0xc8>)
   2909e:	4b26      	ldr	r3, [pc, #152]	; (29138 <update_ccc+0xcc>)
				BT_WARN("CCC %p not writable", attr);
   290a0:	4926      	ldr	r1, [pc, #152]	; (2913c <update_ccc+0xd0>)
   290a2:	1ac0      	subs	r0, r0, r3
   290a4:	08c0      	lsrs	r0, r0, #3
   290a6:	0180      	lsls	r0, r0, #6
   290a8:	4622      	mov	r2, r4
   290aa:	f040 0002 	orr.w	r0, r0, #2
   290ae:	f00e f9ef 	bl	37490 <log_string_sync>
}
   290b2:	2001      	movs	r0, #1
   290b4:	b002      	add	sp, #8
   290b6:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
   290b8:	4631      	mov	r1, r6
   290ba:	4620      	mov	r0, r4
   290bc:	f00f ffab 	bl	39016 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   290c0:	4b1f      	ldr	r3, [pc, #124]	; (29140 <update_ccc+0xd4>)
   290c2:	429e      	cmp	r6, r3
   290c4:	d1f5      	bne.n	290b2 <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   290c6:	7a28      	ldrb	r0, [r5, #8]
   290c8:	f105 0190 	add.w	r1, r5, #144	; 0x90
   290cc:	f7fe fdec 	bl	27ca8 <find_sc_cfg>
	if (!cfg) {
   290d0:	2800      	cmp	r0, #0
   290d2:	d0ee      	beq.n	290b2 <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
   290d4:	8902      	ldrh	r2, [r0, #8]
   290d6:	8943      	ldrh	r3, [r0, #10]
   290d8:	ea53 0102 	orrs.w	r1, r3, r2
   290dc:	d0e9      	beq.n	290b2 <update_ccc+0x46>
	index = bt_conn_index(conn);
   290de:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   290e0:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   290e4:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   290e8:	f7fc fda0 	bl	25c2c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   290ec:	4915      	ldr	r1, [pc, #84]	; (29144 <update_ccc+0xd8>)
   290ee:	4a16      	ldr	r2, [pc, #88]	; (29148 <update_ccc+0xdc>)
   290f0:	2318      	movs	r3, #24
   290f2:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   290f6:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   290f8:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   290fa:	4a14      	ldr	r2, [pc, #80]	; (2914c <update_ccc+0xe0>)
   290fc:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   290fe:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   29100:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   29104:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   29106:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   29108:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   2910c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2910e:	4628      	mov	r0, r5
   29110:	f7ff fd48 	bl	28ba4 <bt_gatt_indicate>
   29114:	2800      	cmp	r0, #0
   29116:	d0cc      	beq.n	290b2 <update_ccc+0x46>
   29118:	4b07      	ldr	r3, [pc, #28]	; (29138 <update_ccc+0xcc>)
   2911a:	4806      	ldr	r0, [pc, #24]	; (29134 <update_ccc+0xc8>)
		BT_ERR("SC restore indication failed");
   2911c:	490c      	ldr	r1, [pc, #48]	; (29150 <update_ccc+0xe4>)
   2911e:	1ac0      	subs	r0, r0, r3
   29120:	08c0      	lsrs	r0, r0, #3
   29122:	0180      	lsls	r0, r0, #6
   29124:	f040 0001 	orr.w	r0, r0, #1
   29128:	f00e f9b2 	bl	37490 <log_string_sync>
   2912c:	e7c1      	b.n	290b2 <update_ccc+0x46>
   2912e:	bf00      	nop
   29130:	00027f09 	.word	0x00027f09
   29134:	0003b478 	.word	0x0003b478
   29138:	0003b448 	.word	0x0003b448
   2913c:	0003f153 	.word	0x0003f153
   29140:	20000644 	.word	0x20000644
   29144:	200029f0 	.word	0x200029f0
   29148:	0003bb7c 	.word	0x0003bb7c
   2914c:	00039355 	.word	0x00039355
   29150:	0003f167 	.word	0x0003f167

00029154 <bt_gatt_is_subscribed>:
{
   29154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29156:	460c      	mov	r4, r1
   29158:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   2915a:	4606      	mov	r6, r0
   2915c:	b970      	cbnz	r0, 2917c <bt_gatt_is_subscribed+0x28>
   2915e:	4933      	ldr	r1, [pc, #204]	; (2922c <bt_gatt_is_subscribed+0xd8>)
   29160:	4a33      	ldr	r2, [pc, #204]	; (29230 <bt_gatt_is_subscribed+0xdc>)
   29162:	4834      	ldr	r0, [pc, #208]	; (29234 <bt_gatt_is_subscribed+0xe0>)
   29164:	f640 237b 	movw	r3, #2683	; 0xa7b
   29168:	f00d ffd7 	bl	3711a <printk>
   2916c:	4832      	ldr	r0, [pc, #200]	; (29238 <bt_gatt_is_subscribed+0xe4>)
   2916e:	f00d ffd4 	bl	3711a <printk>
   29172:	482f      	ldr	r0, [pc, #188]	; (29230 <bt_gatt_is_subscribed+0xdc>)
   29174:	f640 217b 	movw	r1, #2683	; 0xa7b
   29178:	f00e f975 	bl	37466 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   2917c:	b974      	cbnz	r4, 2919c <bt_gatt_is_subscribed+0x48>
   2917e:	492f      	ldr	r1, [pc, #188]	; (2923c <bt_gatt_is_subscribed+0xe8>)
   29180:	4a2b      	ldr	r2, [pc, #172]	; (29230 <bt_gatt_is_subscribed+0xdc>)
   29182:	482c      	ldr	r0, [pc, #176]	; (29234 <bt_gatt_is_subscribed+0xe0>)
   29184:	f640 237c 	movw	r3, #2684	; 0xa7c
   29188:	f00d ffc7 	bl	3711a <printk>
   2918c:	482a      	ldr	r0, [pc, #168]	; (29238 <bt_gatt_is_subscribed+0xe4>)
   2918e:	f00d ffc4 	bl	3711a <printk>
   29192:	4827      	ldr	r0, [pc, #156]	; (29230 <bt_gatt_is_subscribed+0xdc>)
   29194:	f640 217c 	movw	r1, #2684	; 0xa7c
   29198:	f00e f965 	bl	37466 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   2919c:	7ab3      	ldrb	r3, [r6, #10]
   2919e:	2b07      	cmp	r3, #7
   291a0:	d002      	beq.n	291a8 <bt_gatt_is_subscribed+0x54>
		return false;
   291a2:	2000      	movs	r0, #0
}
   291a4:	b003      	add	sp, #12
   291a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   291a8:	2300      	movs	r3, #0
   291aa:	f88d 3004 	strb.w	r3, [sp, #4]
   291ae:	6820      	ldr	r0, [r4, #0]
   291b0:	f642 0303 	movw	r3, #10243	; 0x2803
   291b4:	a901      	add	r1, sp, #4
   291b6:	f8ad 3006 	strh.w	r3, [sp, #6]
   291ba:	f00e ff9e 	bl	380fa <bt_uuid_cmp>
   291be:	b940      	cbnz	r0, 291d2 <bt_gatt_is_subscribed+0x7e>
		if (!(chrc->properties &
   291c0:	68e3      	ldr	r3, [r4, #12]
   291c2:	799b      	ldrb	r3, [r3, #6]
   291c4:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   291c8:	d0ec      	beq.n	291a4 <bt_gatt_is_subscribed+0x50>
		attr = bt_gatt_attr_next(attr);
   291ca:	4620      	mov	r0, r4
   291cc:	f7ff fc72 	bl	28ab4 <bt_gatt_attr_next>
   291d0:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   291d2:	2300      	movs	r3, #0
   291d4:	6820      	ldr	r0, [r4, #0]
   291d6:	f88d 3004 	strb.w	r3, [sp, #4]
   291da:	a901      	add	r1, sp, #4
   291dc:	f642 1302 	movw	r3, #10498	; 0x2902
   291e0:	f8ad 3006 	strh.w	r3, [sp, #6]
   291e4:	f00e ff89 	bl	380fa <bt_uuid_cmp>
   291e8:	b118      	cbz	r0, 291f2 <bt_gatt_is_subscribed+0x9e>
		attr = bt_gatt_attr_next(attr);
   291ea:	4620      	mov	r0, r4
   291ec:	f7ff fc62 	bl	28ab4 <bt_gatt_attr_next>
   291f0:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   291f2:	6820      	ldr	r0, [r4, #0]
   291f4:	2500      	movs	r5, #0
   291f6:	f642 1302 	movw	r3, #10498	; 0x2902
   291fa:	a901      	add	r1, sp, #4
   291fc:	f88d 5004 	strb.w	r5, [sp, #4]
   29200:	f8ad 3006 	strh.w	r3, [sp, #6]
   29204:	f00e ff79 	bl	380fa <bt_uuid_cmp>
   29208:	2800      	cmp	r0, #0
   2920a:	d1ca      	bne.n	291a2 <bt_gatt_is_subscribed+0x4e>
	ccc = attr->user_data;
   2920c:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2920e:	4622      	mov	r2, r4
   29210:	4630      	mov	r0, r6
   29212:	f812 1b01 	ldrb.w	r1, [r2], #1
   29216:	f00f fa4f 	bl	386b8 <bt_conn_is_peer_addr_le>
   2921a:	2800      	cmp	r0, #0
   2921c:	d0c1      	beq.n	291a2 <bt_gatt_is_subscribed+0x4e>
   2921e:	8923      	ldrh	r3, [r4, #8]
   29220:	421f      	tst	r7, r3
   29222:	bf14      	ite	ne
   29224:	2001      	movne	r0, #1
   29226:	2000      	moveq	r0, #0
   29228:	e7bc      	b.n	291a4 <bt_gatt_is_subscribed+0x50>
   2922a:	bf00      	nop
   2922c:	0003ea45 	.word	0x0003ea45
   29230:	0003eeb8 	.word	0x0003eeb8
   29234:	0003c48a 	.word	0x0003c48a
   29238:	0003f184 	.word	0x0003f184
   2923c:	0003f199 	.word	0x0003f199

00029240 <bt_gatt_unsubscribe>:
{
   29240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29244:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   29246:	4607      	mov	r7, r0
   29248:	b970      	cbnz	r0, 29268 <bt_gatt_unsubscribe+0x28>
   2924a:	494c      	ldr	r1, [pc, #304]	; (2937c <bt_gatt_unsubscribe+0x13c>)
   2924c:	4a4c      	ldr	r2, [pc, #304]	; (29380 <bt_gatt_unsubscribe+0x140>)
   2924e:	484d      	ldr	r0, [pc, #308]	; (29384 <bt_gatt_unsubscribe+0x144>)
   29250:	f241 13f9 	movw	r3, #4601	; 0x11f9
   29254:	f00d ff61 	bl	3711a <printk>
   29258:	484b      	ldr	r0, [pc, #300]	; (29388 <bt_gatt_unsubscribe+0x148>)
   2925a:	f00d ff5e 	bl	3711a <printk>
   2925e:	4848      	ldr	r0, [pc, #288]	; (29380 <bt_gatt_unsubscribe+0x140>)
   29260:	f241 11f9 	movw	r1, #4601	; 0x11f9
   29264:	f00e f8ff 	bl	37466 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   29268:	b975      	cbnz	r5, 29288 <bt_gatt_unsubscribe+0x48>
   2926a:	4948      	ldr	r1, [pc, #288]	; (2938c <bt_gatt_unsubscribe+0x14c>)
   2926c:	4a44      	ldr	r2, [pc, #272]	; (29380 <bt_gatt_unsubscribe+0x140>)
   2926e:	4845      	ldr	r0, [pc, #276]	; (29384 <bt_gatt_unsubscribe+0x144>)
   29270:	f241 13fa 	movw	r3, #4602	; 0x11fa
   29274:	f00d ff51 	bl	3711a <printk>
   29278:	4843      	ldr	r0, [pc, #268]	; (29388 <bt_gatt_unsubscribe+0x148>)
   2927a:	f00d ff4e 	bl	3711a <printk>
   2927e:	4840      	ldr	r0, [pc, #256]	; (29380 <bt_gatt_unsubscribe+0x140>)
   29280:	f241 11fa 	movw	r1, #4602	; 0x11fa
   29284:	f00e f8ef 	bl	37466 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   29288:	7abb      	ldrb	r3, [r7, #10]
   2928a:	2b07      	cmp	r3, #7
   2928c:	d172      	bne.n	29374 <bt_gatt_unsubscribe+0x134>
	sub = gatt_sub_find(conn);
   2928e:	4638      	mov	r0, r7
   29290:	f7fe fd2a 	bl	27ce8 <gatt_sub_find>
	if (!sub) {
   29294:	4606      	mov	r6, r0
   29296:	b920      	cbnz	r0, 292a2 <bt_gatt_unsubscribe+0x62>
		return -EINVAL;
   29298:	f06f 0015 	mvn.w	r0, #21
}
   2929c:	b003      	add	sp, #12
   2929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   292a2:	6884      	ldr	r4, [r0, #8]
   292a4:	b1fc      	cbz	r4, 292e6 <bt_gatt_unsubscribe+0xa6>
   292a6:	f1b4 0314 	subs.w	r3, r4, #20
   292aa:	d01e      	beq.n	292ea <bt_gatt_unsubscribe+0xaa>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   292ac:	6824      	ldr	r4, [r4, #0]
   292ae:	b104      	cbz	r4, 292b2 <bt_gatt_unsubscribe+0x72>
   292b0:	3c14      	subs	r4, #20
   292b2:	f04f 0b00 	mov.w	fp, #0
   292b6:	465a      	mov	r2, fp
   292b8:	46d8      	mov	r8, fp
	parent->next = child;
   292ba:	46d9      	mov	r9, fp
			if (atomic_test_bit(params->flags,
   292bc:	f105 0a10 	add.w	sl, r5, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   292c0:	b9ab      	cbnz	r3, 292ee <bt_gatt_unsubscribe+0xae>
	if (!found) {
   292c2:	2a00      	cmp	r2, #0
   292c4:	d0e8      	beq.n	29298 <bt_gatt_unsubscribe+0x58>
	if (gatt_sub_is_empty(sub)) {
   292c6:	68b3      	ldr	r3, [r6, #8]
   292c8:	b913      	cbnz	r3, 292d0 <bt_gatt_unsubscribe+0x90>
		gatt_sub_free(sub);
   292ca:	4630      	mov	r0, r6
   292cc:	f7fe fdfc 	bl	27ec8 <gatt_sub_free>
	if (has_subscription) {
   292d0:	f1b8 0f00 	cmp.w	r8, #0
   292d4:	d045      	beq.n	29362 <bt_gatt_unsubscribe+0x122>
		params->notify(conn, params, NULL, 0);
   292d6:	2300      	movs	r3, #0
   292d8:	682c      	ldr	r4, [r5, #0]
   292da:	461a      	mov	r2, r3
   292dc:	4629      	mov	r1, r5
   292de:	4638      	mov	r0, r7
   292e0:	47a0      	blx	r4
		return 0;
   292e2:	2000      	movs	r0, #0
   292e4:	e7da      	b.n	2929c <bt_gatt_unsubscribe+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   292e6:	4623      	mov	r3, r4
   292e8:	e7e3      	b.n	292b2 <bt_gatt_unsubscribe+0x72>
   292ea:	461c      	mov	r4, r3
   292ec:	e7e1      	b.n	292b2 <bt_gatt_unsubscribe+0x72>
		if (params == tmp) {
   292ee:	42ab      	cmp	r3, r5
   292f0:	f103 0114 	add.w	r1, r3, #20
   292f4:	d129      	bne.n	2934a <bt_gatt_unsubscribe+0x10a>
Z_GENLIST_REMOVE(slist, snode)
   292f6:	6958      	ldr	r0, [r3, #20]
   292f8:	f1bb 0f00 	cmp.w	fp, #0
   292fc:	d11d      	bne.n	2933a <bt_gatt_unsubscribe+0xfa>
   292fe:	68f2      	ldr	r2, [r6, #12]
	list->head = node;
   29300:	60b0      	str	r0, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   29302:	4291      	cmp	r1, r2
   29304:	d100      	bne.n	29308 <bt_gatt_unsubscribe+0xc8>
	list->tail = node;
   29306:	60f0      	str	r0, [r6, #12]
	parent->next = child;
   29308:	f8c3 9014 	str.w	r9, [r3, #20]
   2930c:	4650      	mov	r0, sl
   2930e:	f00f fea5 	bl	3905c <atomic_get>
			if (atomic_test_bit(params->flags,
   29312:	0743      	lsls	r3, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29314:	f3c0 0280 	ubfx	r2, r0, #2, #1
   29318:	d51f      	bpl.n	2935a <bt_gatt_unsubscribe+0x11a>
	bt_att_req_cancel(conn, params);
   2931a:	4629      	mov	r1, r5
   2931c:	4638      	mov	r0, r7
   2931e:	9201      	str	r2, [sp, #4]
   29320:	f7fe fc24 	bl	27b6c <bt_att_req_cancel>
}
   29324:	9a01      	ldr	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   29326:	b1d4      	cbz	r4, 2935e <bt_gatt_unsubscribe+0x11e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29328:	f114 0114 	adds.w	r1, r4, #20
   2932c:	d002      	beq.n	29334 <bt_gatt_unsubscribe+0xf4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2932e:	6961      	ldr	r1, [r4, #20]
   29330:	b101      	cbz	r1, 29334 <bt_gatt_unsubscribe+0xf4>
   29332:	3914      	subs	r1, #20
   29334:	4623      	mov	r3, r4
   29336:	460c      	mov	r4, r1
   29338:	e7c2      	b.n	292c0 <bt_gatt_unsubscribe+0x80>
	parent->next = child;
   2933a:	f8cb 0000 	str.w	r0, [fp]
Z_GENLIST_REMOVE(slist, snode)
   2933e:	68f2      	ldr	r2, [r6, #12]
   29340:	4291      	cmp	r1, r2
	list->tail = node;
   29342:	bf08      	it	eq
   29344:	f8c6 b00c 	streq.w	fp, [r6, #12]
}
   29348:	e7de      	b.n	29308 <bt_gatt_unsubscribe+0xc8>
		if (tmp->value_handle == params->value_handle) {
   2934a:	8918      	ldrh	r0, [r3, #8]
   2934c:	892b      	ldrh	r3, [r5, #8]
   2934e:	468b      	mov	fp, r1
   29350:	4298      	cmp	r0, r3
   29352:	bf08      	it	eq
   29354:	f04f 0801 	moveq.w	r8, #1
   29358:	e7e5      	b.n	29326 <bt_gatt_unsubscribe+0xe6>
			found = true;
   2935a:	2201      	movs	r2, #1
   2935c:	e7e3      	b.n	29326 <bt_gatt_unsubscribe+0xe6>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   2935e:	4621      	mov	r1, r4
   29360:	e7e8      	b.n	29334 <bt_gatt_unsubscribe+0xf4>
	return gatt_write_ccc(conn, params);
   29362:	4629      	mov	r1, r5
   29364:	4638      	mov	r0, r7
	params->value = 0x0000;
   29366:	f8a5 800c 	strh.w	r8, [r5, #12]
}
   2936a:	b003      	add	sp, #12
   2936c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params);
   29370:	f7ff b90c 	b.w	2858c <gatt_write_ccc>
		return -ENOTCONN;
   29374:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29378:	e790      	b.n	2929c <bt_gatt_unsubscribe+0x5c>
   2937a:	bf00      	nop
   2937c:	0003ea45 	.word	0x0003ea45
   29380:	0003eeb8 	.word	0x0003eeb8
   29384:	0003c48a 	.word	0x0003c48a
   29388:	0003f0ab 	.word	0x0003f0ab
   2938c:	0003f0a4 	.word	0x0003f0a4

00029390 <bt_gatt_mult_notification>:
{
   29390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29394:	b087      	sub	sp, #28
   29396:	4682      	mov	sl, r0
   29398:	460c      	mov	r4, r1
   2939a:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
   2939c:	f7fe fca4 	bl	27ce8 <gatt_sub_find>
	if (!sub) {
   293a0:	4607      	mov	r7, r0
   293a2:	b1f8      	cbz	r0, 293e4 <bt_gatt_mult_notification+0x54>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   293a4:	4632      	mov	r2, r6
   293a6:	4621      	mov	r1, r4
   293a8:	a803      	add	r0, sp, #12
   293aa:	f010 f997 	bl	396dc <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   293ae:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   293b2:	2b04      	cmp	r3, #4
   293b4:	d916      	bls.n	293e4 <bt_gatt_mult_notification+0x54>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   293b6:	2104      	movs	r1, #4
   293b8:	a803      	add	r0, sp, #12
   293ba:	f000 fe19 	bl	29ff0 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   293be:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
   293c2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
   293c6:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   293c8:	4605      	mov	r5, r0
		if (len > buf.len) {
   293ca:	d20e      	bcs.n	293ea <bt_gatt_mult_notification+0x5a>
   293cc:	4b1c      	ldr	r3, [pc, #112]	; (29440 <bt_gatt_mult_notification+0xb0>)
   293ce:	481d      	ldr	r0, [pc, #116]	; (29444 <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
   293d0:	491d      	ldr	r1, [pc, #116]	; (29448 <bt_gatt_mult_notification+0xb8>)
   293d2:	1ac0      	subs	r0, r0, r3
   293d4:	08c0      	lsrs	r0, r0, #3
   293d6:	0180      	lsls	r0, r0, #6
   293d8:	4633      	mov	r3, r6
   293da:	4642      	mov	r2, r8
   293dc:	f040 0001 	orr.w	r0, r0, #1
   293e0:	f00e f856 	bl	37490 <log_string_sync>
}
   293e4:	b007      	add	sp, #28
   293e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   293ea:	68bb      	ldr	r3, [r7, #8]
   293ec:	b31b      	cbz	r3, 29436 <bt_gatt_mult_notification+0xa6>
   293ee:	f1b3 0914 	subs.w	r9, r3, #20
   293f2:	d020      	beq.n	29436 <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   293f4:	681c      	ldr	r4, [r3, #0]
   293f6:	b104      	cbz	r4, 293fa <bt_gatt_mult_notification+0x6a>
   293f8:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   293fa:	462b      	mov	r3, r5
   293fc:	f833 bb04 	ldrh.w	fp, [r3], #4
   29400:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
   29402:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   29406:	455b      	cmp	r3, fp
   29408:	d10b      	bne.n	29422 <bt_gatt_mult_notification+0x92>
			if (params->notify(conn, params, nfy->value, len) ==
   2940a:	9a01      	ldr	r2, [sp, #4]
   2940c:	f8d9 5000 	ldr.w	r5, [r9]
   29410:	4643      	mov	r3, r8
   29412:	4649      	mov	r1, r9
   29414:	4650      	mov	r0, sl
   29416:	47a8      	blx	r5
   29418:	b918      	cbnz	r0, 29422 <bt_gatt_mult_notification+0x92>
				bt_gatt_unsubscribe(conn, params);
   2941a:	4649      	mov	r1, r9
   2941c:	4650      	mov	r0, sl
   2941e:	f7ff ff0f 	bl	29240 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   29422:	b144      	cbz	r4, 29436 <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29424:	f114 0314 	adds.w	r3, r4, #20
   29428:	d002      	beq.n	29430 <bt_gatt_mult_notification+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2942a:	6963      	ldr	r3, [r4, #20]
   2942c:	b103      	cbz	r3, 29430 <bt_gatt_mult_notification+0xa0>
   2942e:	3b14      	subs	r3, #20
{
   29430:	46a1      	mov	r9, r4
   29432:	461c      	mov	r4, r3
   29434:	e7e5      	b.n	29402 <bt_gatt_mult_notification+0x72>
		net_buf_simple_pull_mem(&buf, len);
   29436:	4641      	mov	r1, r8
   29438:	a803      	add	r0, sp, #12
   2943a:	f000 fdd9 	bl	29ff0 <net_buf_simple_pull_mem>
   2943e:	e7b6      	b.n	293ae <bt_gatt_mult_notification+0x1e>
   29440:	0003b448 	.word	0x0003b448
   29444:	0003b478 	.word	0x0003b478
   29448:	0003f19e 	.word	0x0003f19e

0002944c <bt_gatt_connected>:
{
   2944c:	b570      	push	{r4, r5, r6, lr}
   2944e:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29450:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   29454:	4605      	mov	r5, r0
	data.conn = conn;
   29456:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   29458:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2945a:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   2945c:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29460:	4631      	mov	r1, r6
   29462:	f00e ff77 	bl	38354 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   29466:	b190      	cbz	r0, 2948e <bt_gatt_connected+0x42>
		if (conn->id) {
   29468:	7a2a      	ldrb	r2, [r5, #8]
   2946a:	b30a      	cbz	r2, 294b0 <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   2946c:	ac02      	add	r4, sp, #8
   2946e:	2104      	movs	r1, #4
   29470:	4620      	mov	r0, r4
   29472:	f00d fdb6 	bl	36fe2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   29476:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   29478:	4a18      	ldr	r2, [pc, #96]	; (294dc <bt_gatt_connected+0x90>)
   2947a:	2124      	movs	r1, #36	; 0x24
   2947c:	a805      	add	r0, sp, #20
   2947e:	4633      	mov	r3, r6
   29480:	f7f9 feb2 	bl	231e8 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   29484:	aa05      	add	r2, sp, #20
   29486:	4916      	ldr	r1, [pc, #88]	; (294e0 <bt_gatt_connected+0x94>)
   29488:	4610      	mov	r0, r2
   2948a:	f7f8 f94d 	bl	21728 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2948e:	2001      	movs	r0, #1
   29490:	4a14      	ldr	r2, [pc, #80]	; (294e4 <bt_gatt_connected+0x98>)
   29492:	ab03      	add	r3, sp, #12
   29494:	f64f 71ff 	movw	r1, #65535	; 0xffff
   29498:	f010 f846 	bl	39528 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   2949c:	4628      	mov	r0, r5
   2949e:	f7fe fc23 	bl	27ce8 <gatt_sub_find>
	if (!sub) {
   294a2:	b118      	cbz	r0, 294ac <bt_gatt_connected+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   294a4:	6884      	ldr	r4, [r0, #8]
   294a6:	b10c      	cbz	r4, 294ac <bt_gatt_connected+0x60>
   294a8:	3c14      	subs	r4, #20
   294aa:	b91c      	cbnz	r4, 294b4 <bt_gatt_connected+0x68>
}
   294ac:	b00e      	add	sp, #56	; 0x38
   294ae:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   294b0:	9200      	str	r2, [sp, #0]
   294b2:	e7e1      	b.n	29478 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   294b4:	7a28      	ldrb	r0, [r5, #8]
   294b6:	4631      	mov	r1, r6
   294b8:	f00e ff4c 	bl	38354 <bt_addr_le_is_bonded>
   294bc:	b148      	cbz	r0, 294d2 <bt_gatt_connected+0x86>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   294be:	f104 0010 	add.w	r0, r4, #16
   294c2:	f00f fdcb 	bl	3905c <atomic_get>
   294c6:	0783      	lsls	r3, r0, #30
   294c8:	d403      	bmi.n	294d2 <bt_gatt_connected+0x86>
			gatt_write_ccc(conn, params);
   294ca:	4621      	mov	r1, r4
   294cc:	4628      	mov	r0, r5
   294ce:	f7ff f85d 	bl	2858c <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   294d2:	f114 0f14 	cmn.w	r4, #20
   294d6:	d0e9      	beq.n	294ac <bt_gatt_connected+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   294d8:	6964      	ldr	r4, [r4, #20]
   294da:	e7e4      	b.n	294a6 <bt_gatt_connected+0x5a>
   294dc:	0003f057 	.word	0x0003f057
   294e0:	00028989 	.word	0x00028989
   294e4:	0002906d 	.word	0x0002906d

000294e8 <bt_gatt_att_max_mtu_changed>:
{
   294e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   294ea:	4b09      	ldr	r3, [pc, #36]	; (29510 <bt_gatt_att_max_mtu_changed+0x28>)
   294ec:	681c      	ldr	r4, [r3, #0]
{
   294ee:	4605      	mov	r5, r0
   294f0:	460e      	mov	r6, r1
   294f2:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   294f4:	b10c      	cbz	r4, 294fa <bt_gatt_att_max_mtu_changed+0x12>
   294f6:	3c04      	subs	r4, #4
   294f8:	b904      	cbnz	r4, 294fc <bt_gatt_att_max_mtu_changed+0x14>
}
   294fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   294fc:	6823      	ldr	r3, [r4, #0]
   294fe:	b11b      	cbz	r3, 29508 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   29500:	463a      	mov	r2, r7
   29502:	4631      	mov	r1, r6
   29504:	4628      	mov	r0, r5
   29506:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   29508:	1d23      	adds	r3, r4, #4
   2950a:	d0f6      	beq.n	294fa <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2950c:	6864      	ldr	r4, [r4, #4]
   2950e:	e7f1      	b.n	294f4 <bt_gatt_att_max_mtu_changed+0xc>
   29510:	200029c4 	.word	0x200029c4

00029514 <db_hash_read>:
{
   29514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   29518:	490f      	ldr	r1, [pc, #60]	; (29558 <db_hash_read+0x44>)
{
   2951a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   2951e:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   29520:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   29524:	461d      	mov	r5, r3
   29526:	4614      	mov	r4, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   29528:	f007 fa6a 	bl	30a00 <k_work_cancel_delayable_sync>
   2952c:	480b      	ldr	r0, [pc, #44]	; (2955c <db_hash_read+0x48>)
   2952e:	f00f fd95 	bl	3905c <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   29532:	0743      	lsls	r3, r0, #29
   29534:	d402      	bmi.n	2953c <db_hash_read+0x28>
		db_hash_gen(true);
   29536:	2001      	movs	r0, #1
   29538:	f7ff f978 	bl	2882c <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   2953c:	2101      	movs	r1, #1
   2953e:	4630      	mov	r0, r6
   29540:	f010 f84b 	bl	395da <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   29544:	2310      	movs	r3, #16
   29546:	9306      	str	r3, [sp, #24]
   29548:	463a      	mov	r2, r7
   2954a:	4629      	mov	r1, r5
   2954c:	4620      	mov	r0, r4
   2954e:	4b04      	ldr	r3, [pc, #16]	; (29560 <db_hash_read+0x4c>)
}
   29550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   29554:	f00f be4e 	b.w	391f4 <bt_gatt_attr_read.constprop.0>
   29558:	20001d40 	.word	0x20001d40
   2955c:	20001df0 	.word	0x20001df0
   29560:	20001cf0 	.word	0x20001cf0

00029564 <bt_gatt_store_ccc>:
{
   29564:	b570      	push	{r4, r5, r6, lr}
   29566:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   29568:	2300      	movs	r3, #0
{
   2956a:	4604      	mov	r4, r0
   2956c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   2956e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   29570:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   29574:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   29576:	4a18      	ldr	r2, [pc, #96]	; (295d8 <bt_gatt_store_ccc+0x74>)
   29578:	ab0d      	add	r3, sp, #52	; 0x34
   2957a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2957e:	2001      	movs	r0, #1
   29580:	f00f ffd2 	bl	39528 <bt_gatt_foreach_attr>
	if (id) {
   29584:	b31c      	cbz	r4, 295ce <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
   29586:	ae03      	add	r6, sp, #12
   29588:	4622      	mov	r2, r4
   2958a:	2104      	movs	r1, #4
   2958c:	4630      	mov	r0, r6
   2958e:	f00d fd28 	bl	36fe2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   29592:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   29594:	4a11      	ldr	r2, [pc, #68]	; (295dc <bt_gatt_store_ccc+0x78>)
   29596:	462b      	mov	r3, r5
   29598:	2124      	movs	r1, #36	; 0x24
   2959a:	a804      	add	r0, sp, #16
   2959c:	f7f9 fe24 	bl	231e8 <bt_settings_encode_key>
	if (save.count) {
   295a0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   295a2:	b1b2      	cbz	r2, 295d2 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
   295a4:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   295a6:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   295a8:	a804      	add	r0, sp, #16
   295aa:	f7f8 f859 	bl	21660 <settings_save_one>
	if (err) {
   295ae:	4604      	mov	r4, r0
   295b0:	b150      	cbz	r0, 295c8 <bt_gatt_store_ccc+0x64>
   295b2:	480b      	ldr	r0, [pc, #44]	; (295e0 <bt_gatt_store_ccc+0x7c>)
   295b4:	4b0b      	ldr	r3, [pc, #44]	; (295e4 <bt_gatt_store_ccc+0x80>)
		BT_ERR("Failed to store CCCs (err %d)", err);
   295b6:	490c      	ldr	r1, [pc, #48]	; (295e8 <bt_gatt_store_ccc+0x84>)
   295b8:	1a1b      	subs	r3, r3, r0
   295ba:	08db      	lsrs	r3, r3, #3
   295bc:	019b      	lsls	r3, r3, #6
   295be:	4622      	mov	r2, r4
   295c0:	f043 0001 	orr.w	r0, r3, #1
   295c4:	f00d ff64 	bl	37490 <log_string_sync>
}
   295c8:	4620      	mov	r0, r4
   295ca:	b040      	add	sp, #256	; 0x100
   295cc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   295ce:	9400      	str	r4, [sp, #0]
   295d0:	e7e0      	b.n	29594 <bt_gatt_store_ccc+0x30>
		str = NULL;
   295d2:	4611      	mov	r1, r2
   295d4:	e7e8      	b.n	295a8 <bt_gatt_store_ccc+0x44>
   295d6:	bf00      	nop
   295d8:	00027e09 	.word	0x00027e09
   295dc:	0003f057 	.word	0x0003f057
   295e0:	0003b448 	.word	0x0003b448
   295e4:	0003b478 	.word	0x0003b478
   295e8:	0003f1b7 	.word	0x0003f1b7

000295ec <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   295ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   295f0:	4603      	mov	r3, r0
   295f2:	4a5e      	ldr	r2, [pc, #376]	; (2976c <bt_gatt_disconnected+0x180>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   295f4:	4e5e      	ldr	r6, [pc, #376]	; (29770 <bt_gatt_disconnected+0x184>)
{
   295f6:	b08d      	sub	sp, #52	; 0x34
   295f8:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   295fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   295fe:	2001      	movs	r0, #1
   29600:	f00f ff92 	bl	39528 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   29604:	4620      	mov	r0, r4
   29606:	f7fc fb11 	bl	25c2c <bt_conn_index>
   2960a:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   2960c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   29610:	b120      	cbz	r0, 2961c <bt_gatt_disconnected+0x30>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   29612:	f7fc f9e3 	bl	259dc <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   29616:	2300      	movs	r3, #0
   29618:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   2961c:	4855      	ldr	r0, [pc, #340]	; (29774 <bt_gatt_disconnected+0x188>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2961e:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   29622:	f007 f98f 	bl	30944 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29626:	7a20      	ldrb	r0, [r4, #8]
   29628:	4629      	mov	r1, r5
   2962a:	f00e fe93 	bl	38354 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2962e:	2800      	cmp	r0, #0
   29630:	d035      	beq.n	2969e <bt_gatt_disconnected+0xb2>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   29632:	4629      	mov	r1, r5
   29634:	7a20      	ldrb	r0, [r4, #8]
   29636:	f7ff ff95 	bl	29564 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   2963a:	4620      	mov	r0, r4
   2963c:	f7fe fb06 	bl	27c4c <find_cf_cfg>
	if (!cfg) {
   29640:	4606      	mov	r6, r0
   29642:	2800      	cmp	r0, #0
   29644:	d064      	beq.n	29710 <bt_gatt_disconnected+0x124>
		if (conn->id) {
   29646:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   29648:	3608      	adds	r6, #8
		if (conn->id) {
   2964a:	2a00      	cmp	r2, #0
   2964c:	d062      	beq.n	29714 <bt_gatt_disconnected+0x128>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   2964e:	af02      	add	r7, sp, #8
   29650:	2104      	movs	r1, #4
   29652:	4638      	mov	r0, r7
   29654:	f00d fcc5 	bl	36fe2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   29658:	9700      	str	r7, [sp, #0]
   2965a:	462b      	mov	r3, r5
   2965c:	4a46      	ldr	r2, [pc, #280]	; (29778 <bt_gatt_disconnected+0x18c>)
   2965e:	2124      	movs	r1, #36	; 0x24
   29660:	a803      	add	r0, sp, #12
   29662:	f7f9 fdc1 	bl	231e8 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   29666:	7a23      	ldrb	r3, [r4, #8]
   29668:	2701      	movs	r7, #1
   2966a:	b93b      	cbnz	r3, 2967c <bt_gatt_disconnected+0x90>
		bt_settings_encode_key(key, sizeof(key), "cf",
   2966c:	2300      	movs	r3, #0
   2966e:	9300      	str	r3, [sp, #0]
   29670:	4a41      	ldr	r2, [pc, #260]	; (29778 <bt_gatt_disconnected+0x18c>)
   29672:	462b      	mov	r3, r5
   29674:	2124      	movs	r1, #36	; 0x24
   29676:	a803      	add	r0, sp, #12
   29678:	f7f9 fdb6 	bl	231e8 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   2967c:	463a      	mov	r2, r7
   2967e:	4631      	mov	r1, r6
   29680:	a803      	add	r0, sp, #12
   29682:	f7f7 ffed 	bl	21660 <settings_save_one>
	if (err) {
   29686:	4602      	mov	r2, r0
   29688:	b148      	cbz	r0, 2969e <bt_gatt_disconnected+0xb2>
   2968a:	483c      	ldr	r0, [pc, #240]	; (2977c <bt_gatt_disconnected+0x190>)
   2968c:	4b3c      	ldr	r3, [pc, #240]	; (29780 <bt_gatt_disconnected+0x194>)
		BT_ERR("Failed to store Client Features (err %d)", err);
   2968e:	493d      	ldr	r1, [pc, #244]	; (29784 <bt_gatt_disconnected+0x198>)
   29690:	1a1b      	subs	r3, r3, r0
   29692:	08db      	lsrs	r3, r3, #3
   29694:	019b      	lsls	r3, r3, #6
   29696:	f043 0001 	orr.w	r0, r3, #1
   2969a:	f00d fef9 	bl	37490 <log_string_sync>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2969e:	7a20      	ldrb	r0, [r4, #8]
   296a0:	4629      	mov	r1, r5
   296a2:	f00e fe57 	bl	38354 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   296a6:	b150      	cbz	r0, 296be <bt_gatt_disconnected+0xd2>
		struct addr_with_id addr_with_id = {
   296a8:	7a23      	ldrb	r3, [r4, #8]
   296aa:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   296ae:	4a36      	ldr	r2, [pc, #216]	; (29788 <bt_gatt_disconnected+0x19c>)
		struct addr_with_id addr_with_id = {
   296b0:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   296b2:	ab03      	add	r3, sp, #12
   296b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   296b8:	2001      	movs	r0, #1
   296ba:	f00f ff35 	bl	39528 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   296be:	4620      	mov	r0, r4
   296c0:	f7fe fb12 	bl	27ce8 <gatt_sub_find>
	if (!sub) {
   296c4:	4607      	mov	r7, r0
   296c6:	b3b0      	cbz	r0, 29736 <bt_gatt_disconnected+0x14a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   296c8:	6883      	ldr	r3, [r0, #8]
   296ca:	b3a3      	cbz	r3, 29736 <bt_gatt_disconnected+0x14a>
   296cc:	f1b3 0b14 	subs.w	fp, r3, #20
   296d0:	d031      	beq.n	29736 <bt_gatt_disconnected+0x14a>
   296d2:	681e      	ldr	r6, [r3, #0]
   296d4:	b106      	cbz	r6, 296d8 <bt_gatt_disconnected+0xec>
   296d6:	3e14      	subs	r6, #20
   296d8:	f04f 0800 	mov.w	r8, #0
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   296dc:	f107 0901 	add.w	r9, r7, #1
			params->value = 0U;
   296e0:	46c2      	mov	sl, r8
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   296e2:	7a20      	ldrb	r0, [r4, #8]
   296e4:	4629      	mov	r1, r5
   296e6:	f00e fe35 	bl	38354 <bt_addr_le_is_bonded>
   296ea:	b9a8      	cbnz	r0, 29718 <bt_gatt_disconnected+0x12c>
			params->value = 0U;
   296ec:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   296f0:	465b      	mov	r3, fp
   296f2:	4642      	mov	r2, r8
   296f4:	4639      	mov	r1, r7
   296f6:	4620      	mov	r0, r4
   296f8:	f00f fe46 	bl	39388 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   296fc:	b1de      	cbz	r6, 29736 <bt_gatt_disconnected+0x14a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   296fe:	f116 0214 	adds.w	r2, r6, #20
   29702:	d002      	beq.n	2970a <bt_gatt_disconnected+0x11e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29704:	6972      	ldr	r2, [r6, #20]
   29706:	b102      	cbz	r2, 2970a <bt_gatt_disconnected+0x11e>
   29708:	3a14      	subs	r2, #20
   2970a:	46b3      	mov	fp, r6
   2970c:	4616      	mov	r6, r2
   2970e:	e7e8      	b.n	296e2 <bt_gatt_disconnected+0xf6>
		len = 0;
   29710:	4607      	mov	r7, r0
   29712:	e7ab      	b.n	2966c <bt_gatt_disconnected+0x80>
   29714:	2701      	movs	r7, #1
   29716:	e7a9      	b.n	2966c <bt_gatt_disconnected+0x80>
   29718:	f10b 0010 	add.w	r0, fp, #16
   2971c:	f00f fc9e 	bl	3905c <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   29720:	07c3      	lsls	r3, r0, #31
   29722:	d4e3      	bmi.n	296ec <bt_gatt_disconnected+0x100>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   29724:	787b      	ldrb	r3, [r7, #1]
   29726:	b11b      	cbz	r3, 29730 <bt_gatt_disconnected+0x144>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   29728:	4629      	mov	r1, r5
   2972a:	4648      	mov	r0, r9
   2972c:	f00f fd39 	bl	391a2 <bt_addr_le_copy>
			prev = &params->node;
   29730:	f10b 0814 	add.w	r8, fp, #20
   29734:	e7e2      	b.n	296fc <bt_gatt_disconnected+0x110>
	cfg = find_cf_cfg(conn);
   29736:	4620      	mov	r0, r4
   29738:	f7fe fa88 	bl	27c4c <find_cf_cfg>
	if (!cfg) {
   2973c:	4606      	mov	r6, r0
   2973e:	b138      	cbz	r0, 29750 <bt_gatt_disconnected+0x164>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29740:	7a20      	ldrb	r0, [r4, #8]
   29742:	4629      	mov	r1, r5
   29744:	f00e fe06 	bl	38354 <bt_addr_le_is_bonded>
   29748:	b928      	cbnz	r0, 29756 <bt_gatt_disconnected+0x16a>
		clear_cf_cfg(cfg);
   2974a:	4630      	mov	r0, r6
   2974c:	f00f fdd5 	bl	392fa <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   29750:	b00d      	add	sp, #52	; 0x34
   29752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   29756:	4629      	mov	r1, r5
   29758:	1c70      	adds	r0, r6, #1
   2975a:	f00f fd22 	bl	391a2 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2975e:	f06f 0102 	mvn.w	r1, #2
   29762:	f106 000c 	add.w	r0, r6, #12
   29766:	f00f fd0d 	bl	39184 <atomic_and>
}
   2976a:	e7f1      	b.n	29750 <bt_gatt_disconnected+0x164>
   2976c:	000282a5 	.word	0x000282a5
   29770:	20001d68 	.word	0x20001d68
   29774:	20001d70 	.word	0x20001d70
   29778:	0003f201 	.word	0x0003f201
   2977c:	0003b448 	.word	0x0003b448
   29780:	0003b478 	.word	0x0003b478
   29784:	0003f1d5 	.word	0x0003f1d5
   29788:	0002827d 	.word	0x0002827d

0002978c <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   2978c:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   2978e:	4b0a      	ldr	r3, [pc, #40]	; (297b8 <bt_smp_accept+0x2c>)
{
   29790:	4602      	mov	r2, r0
		if (smp->chan.conn) {
   29792:	6818      	ldr	r0, [r3, #0]
   29794:	b918      	cbnz	r0, 2979e <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
   29796:	4a09      	ldr	r2, [pc, #36]	; (297bc <bt_smp_accept+0x30>)
   29798:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   2979a:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   2979c:	bd08      	pop	{r3, pc}
   2979e:	4808      	ldr	r0, [pc, #32]	; (297c0 <bt_smp_accept+0x34>)
   297a0:	4b08      	ldr	r3, [pc, #32]	; (297c4 <bt_smp_accept+0x38>)
	BT_ERR("No available SMP context for conn %p", conn);
   297a2:	4909      	ldr	r1, [pc, #36]	; (297c8 <bt_smp_accept+0x3c>)
   297a4:	1a1b      	subs	r3, r3, r0
   297a6:	08db      	lsrs	r3, r3, #3
   297a8:	019b      	lsls	r3, r3, #6
   297aa:	f043 0001 	orr.w	r0, r3, #1
   297ae:	f00d fe6f 	bl	37490 <log_string_sync>
	return -ENOMEM;
   297b2:	f06f 000b 	mvn.w	r0, #11
   297b6:	e7f1      	b.n	2979c <bt_smp_accept+0x10>
   297b8:	20001df8 	.word	0x20001df8
   297bc:	0003bc80 	.word	0x0003bc80
   297c0:	0003b448 	.word	0x0003b448
   297c4:	0003b4b0 	.word	0x0003b4b0
   297c8:	0003f212 	.word	0x0003f212

000297cc <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   297cc:	4b02      	ldr	r3, [pc, #8]	; (297d8 <net_buf_pool_get+0xc>)
   297ce:	2234      	movs	r2, #52	; 0x34
   297d0:	fb02 3000 	mla	r0, r2, r0, r3
   297d4:	4770      	bx	lr
   297d6:	bf00      	nop
   297d8:	20000cb4 	.word	0x20000cb4

000297dc <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   297dc:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   297de:	4a07      	ldr	r2, [pc, #28]	; (297fc <net_buf_id+0x20>)
   297e0:	2134      	movs	r1, #52	; 0x34
   297e2:	fb01 2303 	mla	r3, r1, r3, r2
   297e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   297e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   297ec:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   297ee:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   297f0:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   297f4:	fbb0 f0f3 	udiv	r0, r0, r3
   297f8:	4770      	bx	lr
   297fa:	bf00      	nop
   297fc:	20000cb4 	.word	0x20000cb4

00029800 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   29800:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   29802:	4a0a      	ldr	r2, [pc, #40]	; (2982c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   29804:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   29806:	2434      	movs	r4, #52	; 0x34
   29808:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   2980c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29810:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   29812:	6823      	ldr	r3, [r4, #0]
   29814:	429a      	cmp	r2, r3
   29816:	bf94      	ite	ls
   29818:	600a      	strls	r2, [r1, #0]
   2981a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2981c:	f7ff ffde 	bl	297dc <net_buf_id>
   29820:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   29824:	fb02 3000 	mla	r0, r2, r0, r3
   29828:	bd10      	pop	{r4, pc}
   2982a:	bf00      	nop
   2982c:	20000cb4 	.word	0x20000cb4

00029830 <net_buf_reset>:
{
   29830:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   29832:	7943      	ldrb	r3, [r0, #5]
{
   29834:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   29836:	b14b      	cbz	r3, 2984c <net_buf_reset+0x1c>
   29838:	490d      	ldr	r1, [pc, #52]	; (29870 <net_buf_reset+0x40>)
   2983a:	480e      	ldr	r0, [pc, #56]	; (29874 <net_buf_reset+0x44>)
   2983c:	4a0e      	ldr	r2, [pc, #56]	; (29878 <net_buf_reset+0x48>)
   2983e:	2356      	movs	r3, #86	; 0x56
   29840:	f00d fc6b 	bl	3711a <printk>
   29844:	480c      	ldr	r0, [pc, #48]	; (29878 <net_buf_reset+0x48>)
   29846:	2156      	movs	r1, #86	; 0x56
   29848:	f00d fe0d 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   2984c:	6823      	ldr	r3, [r4, #0]
   2984e:	b14b      	cbz	r3, 29864 <net_buf_reset+0x34>
   29850:	490a      	ldr	r1, [pc, #40]	; (2987c <net_buf_reset+0x4c>)
   29852:	4808      	ldr	r0, [pc, #32]	; (29874 <net_buf_reset+0x44>)
   29854:	4a08      	ldr	r2, [pc, #32]	; (29878 <net_buf_reset+0x48>)
   29856:	2357      	movs	r3, #87	; 0x57
   29858:	f00d fc5f 	bl	3711a <printk>
   2985c:	4806      	ldr	r0, [pc, #24]	; (29878 <net_buf_reset+0x48>)
   2985e:	2157      	movs	r1, #87	; 0x57
   29860:	f00d fe01 	bl	37466 <assert_post_action>
	buf->len  = 0U;
   29864:	2300      	movs	r3, #0
   29866:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   29868:	6923      	ldr	r3, [r4, #16]
   2986a:	60a3      	str	r3, [r4, #8]
}
   2986c:	bd10      	pop	{r4, pc}
   2986e:	bf00      	nop
   29870:	0003f262 	.word	0x0003f262
   29874:	0003c48a 	.word	0x0003c48a
   29878:	0003f23e 	.word	0x0003f23e
   2987c:	0003f273 	.word	0x0003f273

00029880 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   29880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29884:	4605      	mov	r5, r0
   29886:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   29888:	4610      	mov	r0, r2
   2988a:	4619      	mov	r1, r3
{
   2988c:	4616      	mov	r6, r2
   2988e:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   29890:	f010 fd88 	bl	3a3a4 <sys_clock_timeout_end_calc>
   29894:	4681      	mov	r9, r0
   29896:	468a      	mov	sl, r1
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   29898:	b94d      	cbnz	r5, 298ae <net_buf_alloc_len+0x2e>
   2989a:	4978      	ldr	r1, [pc, #480]	; (29a7c <net_buf_alloc_len+0x1fc>)
   2989c:	4878      	ldr	r0, [pc, #480]	; (29a80 <net_buf_alloc_len+0x200>)
   2989e:	4a79      	ldr	r2, [pc, #484]	; (29a84 <net_buf_alloc_len+0x204>)
   298a0:	23f4      	movs	r3, #244	; 0xf4
   298a2:	f00d fc3a 	bl	3711a <printk>
   298a6:	4877      	ldr	r0, [pc, #476]	; (29a84 <net_buf_alloc_len+0x204>)
   298a8:	21f4      	movs	r1, #244	; 0xf4
   298aa:	f00d fddc 	bl	37466 <assert_post_action>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   298ae:	f105 081c 	add.w	r8, r5, #28
	__asm__ volatile(
   298b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   298b6:	f3ef 8b11 	mrs	fp, BASEPRI
   298ba:	f383 8812 	msr	BASEPRI_MAX, r3
   298be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   298c2:	4640      	mov	r0, r8
   298c4:	f005 ff7e 	bl	2f7c4 <z_spin_lock_valid>
   298c8:	b968      	cbnz	r0, 298e6 <net_buf_alloc_len+0x66>
   298ca:	4a6f      	ldr	r2, [pc, #444]	; (29a88 <net_buf_alloc_len+0x208>)
   298cc:	496f      	ldr	r1, [pc, #444]	; (29a8c <net_buf_alloc_len+0x20c>)
   298ce:	486c      	ldr	r0, [pc, #432]	; (29a80 <net_buf_alloc_len+0x200>)
   298d0:	2381      	movs	r3, #129	; 0x81
   298d2:	f00d fc22 	bl	3711a <printk>
   298d6:	486e      	ldr	r0, [pc, #440]	; (29a90 <net_buf_alloc_len+0x210>)
   298d8:	4641      	mov	r1, r8
   298da:	f00d fc1e 	bl	3711a <printk>
   298de:	486a      	ldr	r0, [pc, #424]	; (29a88 <net_buf_alloc_len+0x208>)
   298e0:	2181      	movs	r1, #129	; 0x81
   298e2:	f00d fdc0 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   298e6:	4640      	mov	r0, r8
   298e8:	f005 ff8a 	bl	2f800 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   298ec:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   298ee:	2b00      	cmp	r3, #0
   298f0:	f000 8082 	beq.w	299f8 <net_buf_alloc_len+0x178>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   298f4:	8c2a      	ldrh	r2, [r5, #32]
   298f6:	429a      	cmp	r2, r3
   298f8:	d952      	bls.n	299a0 <net_buf_alloc_len+0x120>
	return z_impl_k_queue_get(queue, timeout);
   298fa:	2200      	movs	r2, #0
   298fc:	2300      	movs	r3, #0
   298fe:	4628      	mov	r0, r5
   29900:	f006 fa72 	bl	2fde8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   29904:	4604      	mov	r4, r0
   29906:	2800      	cmp	r0, #0
   29908:	d04a      	beq.n	299a0 <net_buf_alloc_len+0x120>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2990a:	4640      	mov	r0, r8
   2990c:	f005 ff68 	bl	2f7e0 <z_spin_unlock_valid>
   29910:	b968      	cbnz	r0, 2992e <net_buf_alloc_len+0xae>
   29912:	4a5d      	ldr	r2, [pc, #372]	; (29a88 <net_buf_alloc_len+0x208>)
   29914:	495f      	ldr	r1, [pc, #380]	; (29a94 <net_buf_alloc_len+0x214>)
   29916:	485a      	ldr	r0, [pc, #360]	; (29a80 <net_buf_alloc_len+0x200>)
   29918:	23ac      	movs	r3, #172	; 0xac
   2991a:	f00d fbfe 	bl	3711a <printk>
   2991e:	485e      	ldr	r0, [pc, #376]	; (29a98 <net_buf_alloc_len+0x218>)
   29920:	4641      	mov	r1, r8
   29922:	f00d fbfa 	bl	3711a <printk>
   29926:	4858      	ldr	r0, [pc, #352]	; (29a88 <net_buf_alloc_len+0x208>)
   29928:	21ac      	movs	r1, #172	; 0xac
   2992a:	f00d fd9c 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2992e:	f38b 8811 	msr	BASEPRI, fp
   29932:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   29936:	f8dd 8004 	ldr.w	r8, [sp, #4]
   2993a:	f1b8 0f00 	cmp.w	r8, #0
   2993e:	f000 8099 	beq.w	29a74 <net_buf_alloc_len+0x1f4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   29942:	ea56 0307 	orrs.w	r3, r6, r7
   29946:	d010      	beq.n	2996a <net_buf_alloc_len+0xea>
   29948:	1c7b      	adds	r3, r7, #1
   2994a:	bf08      	it	eq
   2994c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   29950:	d00b      	beq.n	2996a <net_buf_alloc_len+0xea>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   29952:	f008 fe09 	bl	32568 <sys_clock_tick_get>
   29956:	ebb9 0600 	subs.w	r6, r9, r0
   2995a:	eb6a 0701 	sbc.w	r7, sl, r1
   2995e:	2e00      	cmp	r6, #0
   29960:	f177 0300 	sbcs.w	r3, r7, #0
   29964:	bfbc      	itt	lt
   29966:	2600      	movlt	r6, #0
   29968:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2996a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   2996c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 29a9c <net_buf_alloc_len+0x21c>
   29970:	f04f 0a34 	mov.w	sl, #52	; 0x34
   29974:	fb0a 9303 	mla	r3, sl, r3, r9
   29978:	4632      	mov	r2, r6
   2997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2997c:	681b      	ldr	r3, [r3, #0]
   2997e:	a901      	add	r1, sp, #4
   29980:	681d      	ldr	r5, [r3, #0]
   29982:	4620      	mov	r0, r4
   29984:	463b      	mov	r3, r7
   29986:	47a8      	blx	r5
   29988:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2998a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   2998c:	2800      	cmp	r0, #0
   2998e:	d155      	bne.n	29a3c <net_buf_alloc_len+0x1bc>
	k_lifo_put(&pool->free, buf);
   29990:	79a0      	ldrb	r0, [r4, #6]
   29992:	4621      	mov	r1, r4
   29994:	fb00 900a 	mla	r0, r0, sl, r9
   29998:	f010 fc61 	bl	3a25e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   2999c:	462c      	mov	r4, r5
}
   2999e:	e049      	b.n	29a34 <net_buf_alloc_len+0x1b4>
		uninit_count = pool->uninit_count--;
   299a0:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   299a2:	1e63      	subs	r3, r4, #1
   299a4:	846b      	strh	r3, [r5, #34]	; 0x22
   299a6:	4640      	mov	r0, r8
   299a8:	f005 ff1a 	bl	2f7e0 <z_spin_unlock_valid>
   299ac:	b968      	cbnz	r0, 299ca <net_buf_alloc_len+0x14a>
   299ae:	4a36      	ldr	r2, [pc, #216]	; (29a88 <net_buf_alloc_len+0x208>)
   299b0:	4938      	ldr	r1, [pc, #224]	; (29a94 <net_buf_alloc_len+0x214>)
   299b2:	4833      	ldr	r0, [pc, #204]	; (29a80 <net_buf_alloc_len+0x200>)
   299b4:	23ac      	movs	r3, #172	; 0xac
   299b6:	f00d fbb0 	bl	3711a <printk>
   299ba:	4837      	ldr	r0, [pc, #220]	; (29a98 <net_buf_alloc_len+0x218>)
   299bc:	4641      	mov	r1, r8
   299be:	f00d fbac 	bl	3711a <printk>
   299c2:	4831      	ldr	r0, [pc, #196]	; (29a88 <net_buf_alloc_len+0x208>)
   299c4:	21ac      	movs	r1, #172	; 0xac
   299c6:	f00d fd4e 	bl	37466 <assert_post_action>
   299ca:	f38b 8811 	msr	BASEPRI, fp
   299ce:	f3bf 8f6f 	isb	sy
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   299d2:	8c2b      	ldrh	r3, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   299d4:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   299d8:	1b1c      	subs	r4, r3, r4
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   299da:	f102 0017 	add.w	r0, r2, #23
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   299de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   299e0:	f020 0003 	bic.w	r0, r0, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   299e4:	fb04 3400 	mla	r4, r4, r0, r3
	return pool - _net_buf_pool_list;
   299e8:	482c      	ldr	r0, [pc, #176]	; (29a9c <net_buf_alloc_len+0x21c>)
   299ea:	4b2d      	ldr	r3, [pc, #180]	; (29aa0 <net_buf_alloc_len+0x220>)
	buf->user_data_size = pool->user_data_size;
   299ec:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   299ee:	1a2d      	subs	r5, r5, r0
   299f0:	10ad      	asrs	r5, r5, #2
   299f2:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   299f4:	71a5      	strb	r5, [r4, #6]
		goto success;
   299f6:	e79e      	b.n	29936 <net_buf_alloc_len+0xb6>
   299f8:	4640      	mov	r0, r8
   299fa:	f005 fef1 	bl	2f7e0 <z_spin_unlock_valid>
   299fe:	b968      	cbnz	r0, 29a1c <net_buf_alloc_len+0x19c>
   29a00:	4a21      	ldr	r2, [pc, #132]	; (29a88 <net_buf_alloc_len+0x208>)
   29a02:	4924      	ldr	r1, [pc, #144]	; (29a94 <net_buf_alloc_len+0x214>)
   29a04:	481e      	ldr	r0, [pc, #120]	; (29a80 <net_buf_alloc_len+0x200>)
   29a06:	23ac      	movs	r3, #172	; 0xac
   29a08:	f00d fb87 	bl	3711a <printk>
   29a0c:	4822      	ldr	r0, [pc, #136]	; (29a98 <net_buf_alloc_len+0x218>)
   29a0e:	4641      	mov	r1, r8
   29a10:	f00d fb83 	bl	3711a <printk>
   29a14:	481c      	ldr	r0, [pc, #112]	; (29a88 <net_buf_alloc_len+0x208>)
   29a16:	21ac      	movs	r1, #172	; 0xac
   29a18:	f00d fd25 	bl	37466 <assert_post_action>
   29a1c:	f38b 8811 	msr	BASEPRI, fp
   29a20:	f3bf 8f6f 	isb	sy
   29a24:	4632      	mov	r2, r6
   29a26:	463b      	mov	r3, r7
   29a28:	4628      	mov	r0, r5
   29a2a:	f006 f9dd 	bl	2fde8 <z_impl_k_queue_get>
	if (!buf) {
   29a2e:	4604      	mov	r4, r0
   29a30:	2800      	cmp	r0, #0
   29a32:	d180      	bne.n	29936 <net_buf_alloc_len+0xb6>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   29a34:	4620      	mov	r0, r4
   29a36:	b003      	add	sp, #12
   29a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   29a3c:	9b01      	ldr	r3, [sp, #4]
   29a3e:	4598      	cmp	r8, r3
   29a40:	d90e      	bls.n	29a60 <net_buf_alloc_len+0x1e0>
   29a42:	4918      	ldr	r1, [pc, #96]	; (29aa4 <net_buf_alloc_len+0x224>)
   29a44:	4a0f      	ldr	r2, [pc, #60]	; (29a84 <net_buf_alloc_len+0x204>)
   29a46:	480e      	ldr	r0, [pc, #56]	; (29a80 <net_buf_alloc_len+0x200>)
   29a48:	f240 1355 	movw	r3, #341	; 0x155
   29a4c:	f00d fb65 	bl	3711a <printk>
   29a50:	4815      	ldr	r0, [pc, #84]	; (29aa8 <net_buf_alloc_len+0x228>)
   29a52:	f00d fb62 	bl	3711a <printk>
   29a56:	480b      	ldr	r0, [pc, #44]	; (29a84 <net_buf_alloc_len+0x204>)
   29a58:	f240 1155 	movw	r1, #341	; 0x155
   29a5c:	f00d fd03 	bl	37466 <assert_post_action>
	buf->frags = NULL;
   29a60:	2300      	movs	r3, #0
   29a62:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   29a64:	2301      	movs	r3, #1
   29a66:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   29a68:	9b01      	ldr	r3, [sp, #4]
   29a6a:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   29a6c:	4620      	mov	r0, r4
   29a6e:	f7ff fedf 	bl	29830 <net_buf_reset>
	return buf;
   29a72:	e7df      	b.n	29a34 <net_buf_alloc_len+0x1b4>
		buf->__buf = NULL;
   29a74:	f8c4 8010 	str.w	r8, [r4, #16]
   29a78:	e7f2      	b.n	29a60 <net_buf_alloc_len+0x1e0>
   29a7a:	bf00      	nop
   29a7c:	0003f28d 	.word	0x0003f28d
   29a80:	0003c48a 	.word	0x0003c48a
   29a84:	0003f23e 	.word	0x0003f23e
   29a88:	0003cd09 	.word	0x0003cd09
   29a8c:	0003cd5b 	.word	0x0003cd5b
   29a90:	0003cd70 	.word	0x0003cd70
   29a94:	0003cd2f 	.word	0x0003cd2f
   29a98:	0003cd46 	.word	0x0003cd46
   29a9c:	20000cb4 	.word	0x20000cb4
   29aa0:	c4ec4ec5 	.word	0xc4ec4ec5
   29aa4:	0003f292 	.word	0x0003f292
   29aa8:	0003cae0 	.word	0x0003cae0

00029aac <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   29aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29ab0:	4606      	mov	r6, r0
   29ab2:	f006 f999 	bl	2fde8 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   29ab6:	4605      	mov	r5, r0
   29ab8:	b150      	cbz	r0, 29ad0 <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   29aba:	4f13      	ldr	r7, [pc, #76]	; (29b08 <net_buf_get+0x5c>)
   29abc:	f8df 804c 	ldr.w	r8, [pc, #76]	; 29b0c <net_buf_get+0x60>
   29ac0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 29b10 <net_buf_get+0x64>
   29ac4:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29ac6:	7963      	ldrb	r3, [r4, #5]
   29ac8:	f013 0301 	ands.w	r3, r3, #1
   29acc:	d103      	bne.n	29ad6 <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   29ace:	6023      	str	r3, [r4, #0]

	return buf;
}
   29ad0:	4628      	mov	r0, r5
   29ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29ad6:	2200      	movs	r2, #0
   29ad8:	2300      	movs	r3, #0
   29ada:	4630      	mov	r0, r6
   29adc:	f006 f984 	bl	2fde8 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   29ae0:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   29ae2:	b958      	cbnz	r0, 29afc <net_buf_get+0x50>
   29ae4:	4641      	mov	r1, r8
   29ae6:	4648      	mov	r0, r9
   29ae8:	f240 13ad 	movw	r3, #429	; 0x1ad
   29aec:	463a      	mov	r2, r7
   29aee:	f00d fb14 	bl	3711a <printk>
   29af2:	f240 11ad 	movw	r1, #429	; 0x1ad
   29af6:	4638      	mov	r0, r7
   29af8:	f00d fcb5 	bl	37466 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   29afc:	7963      	ldrb	r3, [r4, #5]
   29afe:	f023 0301 	bic.w	r3, r3, #1
   29b02:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29b04:	6824      	ldr	r4, [r4, #0]
   29b06:	e7de      	b.n	29ac6 <net_buf_get+0x1a>
   29b08:	0003f23e 	.word	0x0003f23e
   29b0c:	0003f2a3 	.word	0x0003f2a3
   29b10:	0003c48a 	.word	0x0003c48a

00029b14 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   29b14:	b538      	push	{r3, r4, r5, lr}
   29b16:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   29b18:	4604      	mov	r4, r0
   29b1a:	b958      	cbnz	r0, 29b34 <net_buf_simple_reserve+0x20>
   29b1c:	490e      	ldr	r1, [pc, #56]	; (29b58 <net_buf_simple_reserve+0x44>)
   29b1e:	480f      	ldr	r0, [pc, #60]	; (29b5c <net_buf_simple_reserve+0x48>)
   29b20:	4a0f      	ldr	r2, [pc, #60]	; (29b60 <net_buf_simple_reserve+0x4c>)
   29b22:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   29b26:	f00d faf8 	bl	3711a <printk>
   29b2a:	480d      	ldr	r0, [pc, #52]	; (29b60 <net_buf_simple_reserve+0x4c>)
   29b2c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   29b30:	f00d fc99 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   29b34:	88a3      	ldrh	r3, [r4, #4]
   29b36:	b15b      	cbz	r3, 29b50 <net_buf_simple_reserve+0x3c>
   29b38:	490a      	ldr	r1, [pc, #40]	; (29b64 <net_buf_simple_reserve+0x50>)
   29b3a:	4808      	ldr	r0, [pc, #32]	; (29b5c <net_buf_simple_reserve+0x48>)
   29b3c:	4a08      	ldr	r2, [pc, #32]	; (29b60 <net_buf_simple_reserve+0x4c>)
   29b3e:	f240 13c5 	movw	r3, #453	; 0x1c5
   29b42:	f00d faea 	bl	3711a <printk>
   29b46:	4806      	ldr	r0, [pc, #24]	; (29b60 <net_buf_simple_reserve+0x4c>)
   29b48:	f240 11c5 	movw	r1, #453	; 0x1c5
   29b4c:	f00d fc8b 	bl	37466 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   29b50:	68a3      	ldr	r3, [r4, #8]
   29b52:	442b      	add	r3, r5
   29b54:	6023      	str	r3, [r4, #0]
}
   29b56:	bd38      	pop	{r3, r4, r5, pc}
   29b58:	0003e07b 	.word	0x0003e07b
   29b5c:	0003c48a 	.word	0x0003c48a
   29b60:	0003f23e 	.word	0x0003f23e
   29b64:	0003f2af 	.word	0x0003f2af

00029b68 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   29b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29b6a:	460d      	mov	r5, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   29b6c:	4604      	mov	r4, r0
   29b6e:	b958      	cbnz	r0, 29b88 <net_buf_slist_put+0x20>
   29b70:	492e      	ldr	r1, [pc, #184]	; (29c2c <net_buf_slist_put+0xc4>)
   29b72:	482f      	ldr	r0, [pc, #188]	; (29c30 <net_buf_slist_put+0xc8>)
   29b74:	4a2f      	ldr	r2, [pc, #188]	; (29c34 <net_buf_slist_put+0xcc>)
   29b76:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   29b7a:	f00d face 	bl	3711a <printk>
   29b7e:	482d      	ldr	r0, [pc, #180]	; (29c34 <net_buf_slist_put+0xcc>)
   29b80:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   29b84:	f00d fc6f 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   29b88:	b95d      	cbnz	r5, 29ba2 <net_buf_slist_put+0x3a>
   29b8a:	492b      	ldr	r1, [pc, #172]	; (29c38 <net_buf_slist_put+0xd0>)
   29b8c:	4828      	ldr	r0, [pc, #160]	; (29c30 <net_buf_slist_put+0xc8>)
   29b8e:	4a29      	ldr	r2, [pc, #164]	; (29c34 <net_buf_slist_put+0xcc>)
   29b90:	f240 13d3 	movw	r3, #467	; 0x1d3
   29b94:	f00d fac1 	bl	3711a <printk>
   29b98:	4826      	ldr	r0, [pc, #152]	; (29c34 <net_buf_slist_put+0xcc>)
   29b9a:	f240 11d3 	movw	r1, #467	; 0x1d3
   29b9e:	f00d fc62 	bl	37466 <assert_post_action>
{
   29ba2:	462e      	mov	r6, r5

	for (tail = buf; tail->frags; tail = tail->frags) {
   29ba4:	6832      	ldr	r2, [r6, #0]
   29ba6:	2a00      	cmp	r2, #0
   29ba8:	d137      	bne.n	29c1a <net_buf_slist_put+0xb2>
	__asm__ volatile(
   29baa:	f04f 0340 	mov.w	r3, #64	; 0x40
   29bae:	f3ef 8711 	mrs	r7, BASEPRI
   29bb2:	f383 8812 	msr	BASEPRI_MAX, r3
   29bb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29bba:	4820      	ldr	r0, [pc, #128]	; (29c3c <net_buf_slist_put+0xd4>)
   29bbc:	f005 fe02 	bl	2f7c4 <z_spin_lock_valid>
   29bc0:	b968      	cbnz	r0, 29bde <net_buf_slist_put+0x76>
   29bc2:	4a1f      	ldr	r2, [pc, #124]	; (29c40 <net_buf_slist_put+0xd8>)
   29bc4:	491f      	ldr	r1, [pc, #124]	; (29c44 <net_buf_slist_put+0xdc>)
   29bc6:	481a      	ldr	r0, [pc, #104]	; (29c30 <net_buf_slist_put+0xc8>)
   29bc8:	2381      	movs	r3, #129	; 0x81
   29bca:	f00d faa6 	bl	3711a <printk>
   29bce:	491b      	ldr	r1, [pc, #108]	; (29c3c <net_buf_slist_put+0xd4>)
   29bd0:	481d      	ldr	r0, [pc, #116]	; (29c48 <net_buf_slist_put+0xe0>)
   29bd2:	f00d faa2 	bl	3711a <printk>
   29bd6:	481a      	ldr	r0, [pc, #104]	; (29c40 <net_buf_slist_put+0xd8>)
   29bd8:	2181      	movs	r1, #129	; 0x81
   29bda:	f00d fc44 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   29bde:	4817      	ldr	r0, [pc, #92]	; (29c3c <net_buf_slist_put+0xd4>)
   29be0:	f005 fe0e 	bl	2f800 <z_spin_lock_set_owner>
Z_GENLIST_APPEND_LIST(slist, snode)
   29be4:	6863      	ldr	r3, [r4, #4]
   29be6:	b9f3      	cbnz	r3, 29c26 <net_buf_slist_put+0xbe>
	list->head = node;
   29be8:	6025      	str	r5, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29bea:	4814      	ldr	r0, [pc, #80]	; (29c3c <net_buf_slist_put+0xd4>)
	list->tail = node;
   29bec:	6066      	str	r6, [r4, #4]
   29bee:	f005 fdf7 	bl	2f7e0 <z_spin_unlock_valid>
   29bf2:	b968      	cbnz	r0, 29c10 <net_buf_slist_put+0xa8>
   29bf4:	4a12      	ldr	r2, [pc, #72]	; (29c40 <net_buf_slist_put+0xd8>)
   29bf6:	4915      	ldr	r1, [pc, #84]	; (29c4c <net_buf_slist_put+0xe4>)
   29bf8:	480d      	ldr	r0, [pc, #52]	; (29c30 <net_buf_slist_put+0xc8>)
   29bfa:	23ac      	movs	r3, #172	; 0xac
   29bfc:	f00d fa8d 	bl	3711a <printk>
   29c00:	490e      	ldr	r1, [pc, #56]	; (29c3c <net_buf_slist_put+0xd4>)
   29c02:	4813      	ldr	r0, [pc, #76]	; (29c50 <net_buf_slist_put+0xe8>)
   29c04:	f00d fa89 	bl	3711a <printk>
   29c08:	480d      	ldr	r0, [pc, #52]	; (29c40 <net_buf_slist_put+0xd8>)
   29c0a:	21ac      	movs	r1, #172	; 0xac
   29c0c:	f00d fc2b 	bl	37466 <assert_post_action>
	__asm__ volatile(
   29c10:	f387 8811 	msr	BASEPRI, r7
   29c14:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   29c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tail->flags |= NET_BUF_FRAGS;
   29c1a:	7973      	ldrb	r3, [r6, #5]
   29c1c:	f043 0301 	orr.w	r3, r3, #1
   29c20:	7173      	strb	r3, [r6, #5]
   29c22:	4616      	mov	r6, r2
   29c24:	e7be      	b.n	29ba4 <net_buf_slist_put+0x3c>
	parent->next = child;
   29c26:	601d      	str	r5, [r3, #0]
}
   29c28:	e7df      	b.n	29bea <net_buf_slist_put+0x82>
   29c2a:	bf00      	nop
   29c2c:	0003f2be 	.word	0x0003f2be
   29c30:	0003c48a 	.word	0x0003c48a
   29c34:	0003f23e 	.word	0x0003f23e
   29c38:	0003e07b 	.word	0x0003e07b
   29c3c:	20002a2c 	.word	0x20002a2c
   29c40:	0003cd09 	.word	0x0003cd09
   29c44:	0003cd5b 	.word	0x0003cd5b
   29c48:	0003cd70 	.word	0x0003cd70
   29c4c:	0003cd2f 	.word	0x0003cd2f
   29c50:	0003cd46 	.word	0x0003cd46

00029c54 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   29c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   29c58:	4604      	mov	r4, r0
   29c5a:	b958      	cbnz	r0, 29c74 <net_buf_slist_get+0x20>
   29c5c:	4939      	ldr	r1, [pc, #228]	; (29d44 <net_buf_slist_get+0xf0>)
   29c5e:	483a      	ldr	r0, [pc, #232]	; (29d48 <net_buf_slist_get+0xf4>)
   29c60:	4a3a      	ldr	r2, [pc, #232]	; (29d4c <net_buf_slist_get+0xf8>)
   29c62:	f240 13e3 	movw	r3, #483	; 0x1e3
   29c66:	f00d fa58 	bl	3711a <printk>
   29c6a:	4838      	ldr	r0, [pc, #224]	; (29d4c <net_buf_slist_get+0xf8>)
   29c6c:	f240 11e3 	movw	r1, #483	; 0x1e3
   29c70:	f00d fbf9 	bl	37466 <assert_post_action>
	__asm__ volatile(
   29c74:	f04f 0340 	mov.w	r3, #64	; 0x40
   29c78:	f3ef 8711 	mrs	r7, BASEPRI
   29c7c:	f383 8812 	msr	BASEPRI_MAX, r3
   29c80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29c84:	4832      	ldr	r0, [pc, #200]	; (29d50 <net_buf_slist_get+0xfc>)
   29c86:	f005 fd9d 	bl	2f7c4 <z_spin_lock_valid>
   29c8a:	b968      	cbnz	r0, 29ca8 <net_buf_slist_get+0x54>
   29c8c:	4a31      	ldr	r2, [pc, #196]	; (29d54 <net_buf_slist_get+0x100>)
   29c8e:	4932      	ldr	r1, [pc, #200]	; (29d58 <net_buf_slist_get+0x104>)
   29c90:	482d      	ldr	r0, [pc, #180]	; (29d48 <net_buf_slist_get+0xf4>)
   29c92:	2381      	movs	r3, #129	; 0x81
   29c94:	f00d fa41 	bl	3711a <printk>
   29c98:	492d      	ldr	r1, [pc, #180]	; (29d50 <net_buf_slist_get+0xfc>)
   29c9a:	4830      	ldr	r0, [pc, #192]	; (29d5c <net_buf_slist_get+0x108>)
   29c9c:	f00d fa3d 	bl	3711a <printk>
   29ca0:	482c      	ldr	r0, [pc, #176]	; (29d54 <net_buf_slist_get+0x100>)
   29ca2:	2181      	movs	r1, #129	; 0x81
   29ca4:	f00d fbdf 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   29ca8:	4829      	ldr	r0, [pc, #164]	; (29d50 <net_buf_slist_get+0xfc>)
   29caa:	f005 fda9 	bl	2f800 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   29cae:	6826      	ldr	r6, [r4, #0]
Z_GENLIST_GET(slist, snode)
   29cb0:	b18e      	cbz	r6, 29cd6 <net_buf_slist_get+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29cb2:	6862      	ldr	r2, [r4, #4]
   29cb4:	6833      	ldr	r3, [r6, #0]

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   29cb6:	f8df a094 	ldr.w	sl, [pc, #148]	; 29d4c <net_buf_slist_get+0xf8>
   29cba:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 29d68 <net_buf_slist_get+0x114>
   29cbe:	f8df 9088 	ldr.w	r9, [pc, #136]	; 29d48 <net_buf_slist_get+0xf4>
	list->head = node;
   29cc2:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29cc4:	4296      	cmp	r6, r2
	list->tail = node;
   29cc6:	bf08      	it	eq
   29cc8:	6063      	streq	r3, [r4, #4]
{
   29cca:	4635      	mov	r5, r6
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29ccc:	796b      	ldrb	r3, [r5, #5]
   29cce:	f013 0301 	ands.w	r3, r3, #1
   29cd2:	d119      	bne.n	29d08 <net_buf_slist_get+0xb4>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   29cd4:	602b      	str	r3, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29cd6:	481e      	ldr	r0, [pc, #120]	; (29d50 <net_buf_slist_get+0xfc>)
   29cd8:	f005 fd82 	bl	2f7e0 <z_spin_unlock_valid>
   29cdc:	b968      	cbnz	r0, 29cfa <net_buf_slist_get+0xa6>
   29cde:	4a1d      	ldr	r2, [pc, #116]	; (29d54 <net_buf_slist_get+0x100>)
   29ce0:	491f      	ldr	r1, [pc, #124]	; (29d60 <net_buf_slist_get+0x10c>)
   29ce2:	4819      	ldr	r0, [pc, #100]	; (29d48 <net_buf_slist_get+0xf4>)
   29ce4:	23ac      	movs	r3, #172	; 0xac
   29ce6:	f00d fa18 	bl	3711a <printk>
   29cea:	4919      	ldr	r1, [pc, #100]	; (29d50 <net_buf_slist_get+0xfc>)
   29cec:	481d      	ldr	r0, [pc, #116]	; (29d64 <net_buf_slist_get+0x110>)
   29cee:	f00d fa14 	bl	3711a <printk>
   29cf2:	4818      	ldr	r0, [pc, #96]	; (29d54 <net_buf_slist_get+0x100>)
   29cf4:	21ac      	movs	r1, #172	; 0xac
   29cf6:	f00d fbb6 	bl	37466 <assert_post_action>
	__asm__ volatile(
   29cfa:	f387 8811 	msr	BASEPRI, r7
   29cfe:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   29d02:	4630      	mov	r0, r6
   29d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
Z_GENLIST_IS_EMPTY(slist)
   29d08:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   29d0a:	b993      	cbnz	r3, 29d32 <net_buf_slist_get+0xde>
			frag->frags = (void *)sys_slist_get(list);
   29d0c:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   29d0e:	4641      	mov	r1, r8
   29d10:	4648      	mov	r0, r9
   29d12:	f240 13ed 	movw	r3, #493	; 0x1ed
   29d16:	4652      	mov	r2, sl
   29d18:	f00d f9ff 	bl	3711a <printk>
   29d1c:	f240 11ed 	movw	r1, #493	; 0x1ed
   29d20:	4650      	mov	r0, sl
   29d22:	f00d fba0 	bl	37466 <assert_post_action>
			frag->flags &= ~NET_BUF_FRAGS;
   29d26:	796b      	ldrb	r3, [r5, #5]
   29d28:	f023 0301 	bic.w	r3, r3, #1
   29d2c:	716b      	strb	r3, [r5, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29d2e:	682d      	ldr	r5, [r5, #0]
   29d30:	e7cc      	b.n	29ccc <net_buf_slist_get+0x78>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29d32:	6861      	ldr	r1, [r4, #4]
   29d34:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   29d36:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29d38:	428b      	cmp	r3, r1
	list->tail = node;
   29d3a:	bf08      	it	eq
   29d3c:	6062      	streq	r2, [r4, #4]
			frag->frags = (void *)sys_slist_get(list);
   29d3e:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   29d40:	e7f1      	b.n	29d26 <net_buf_slist_get+0xd2>
   29d42:	bf00      	nop
   29d44:	0003f2be 	.word	0x0003f2be
   29d48:	0003c48a 	.word	0x0003c48a
   29d4c:	0003f23e 	.word	0x0003f23e
   29d50:	20002a2c 	.word	0x20002a2c
   29d54:	0003cd09 	.word	0x0003cd09
   29d58:	0003cd5b 	.word	0x0003cd5b
   29d5c:	0003cd70 	.word	0x0003cd70
   29d60:	0003cd2f 	.word	0x0003cd2f
   29d64:	0003cd46 	.word	0x0003cd46
   29d68:	0003f2a3 	.word	0x0003f2a3

00029d6c <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   29d6c:	b538      	push	{r3, r4, r5, lr}
   29d6e:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   29d70:	4605      	mov	r5, r0
   29d72:	b958      	cbnz	r0, 29d8c <net_buf_put+0x20>
   29d74:	4913      	ldr	r1, [pc, #76]	; (29dc4 <net_buf_put+0x58>)
   29d76:	4814      	ldr	r0, [pc, #80]	; (29dc8 <net_buf_put+0x5c>)
   29d78:	4a14      	ldr	r2, [pc, #80]	; (29dcc <net_buf_put+0x60>)
   29d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
   29d7e:	f00d f9cc 	bl	3711a <printk>
   29d82:	4812      	ldr	r0, [pc, #72]	; (29dcc <net_buf_put+0x60>)
   29d84:	f44f 7100 	mov.w	r1, #512	; 0x200
   29d88:	f00d fb6d 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   29d8c:	b95c      	cbnz	r4, 29da6 <net_buf_put+0x3a>
   29d8e:	4910      	ldr	r1, [pc, #64]	; (29dd0 <net_buf_put+0x64>)
   29d90:	480d      	ldr	r0, [pc, #52]	; (29dc8 <net_buf_put+0x5c>)
   29d92:	4a0e      	ldr	r2, [pc, #56]	; (29dcc <net_buf_put+0x60>)
   29d94:	f240 2301 	movw	r3, #513	; 0x201
   29d98:	f00d f9bf 	bl	3711a <printk>
   29d9c:	480b      	ldr	r0, [pc, #44]	; (29dcc <net_buf_put+0x60>)
   29d9e:	f240 2101 	movw	r1, #513	; 0x201
   29da2:	f00d fb60 	bl	37466 <assert_post_action>
{
   29da6:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   29da8:	6811      	ldr	r1, [r2, #0]
   29daa:	b929      	cbnz	r1, 29db8 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   29dac:	4621      	mov	r1, r4
   29dae:	4628      	mov	r0, r5
}
   29db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   29db4:	f005 bfba 	b.w	2fd2c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   29db8:	7953      	ldrb	r3, [r2, #5]
   29dba:	f043 0301 	orr.w	r3, r3, #1
   29dbe:	7153      	strb	r3, [r2, #5]
   29dc0:	460a      	mov	r2, r1
   29dc2:	e7f1      	b.n	29da8 <net_buf_put+0x3c>
   29dc4:	0003f2c3 	.word	0x0003f2c3
   29dc8:	0003c48a 	.word	0x0003c48a
   29dcc:	0003f23e 	.word	0x0003f23e
   29dd0:	0003e07b 	.word	0x0003e07b

00029dd4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   29dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   29dd8:	4605      	mov	r5, r0
   29dda:	b328      	cbz	r0, 29e28 <net_buf_unref+0x54>
   29ddc:	4e1c      	ldr	r6, [pc, #112]	; (29e50 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   29dde:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   29de0:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   29de4:	462c      	mov	r4, r5
   29de6:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   29de8:	7923      	ldrb	r3, [r4, #4]
   29dea:	3b01      	subs	r3, #1
   29dec:	b2db      	uxtb	r3, r3
   29dee:	7123      	strb	r3, [r4, #4]
   29df0:	b9c3      	cbnz	r3, 29e24 <net_buf_unref+0x50>
		if (buf->__buf) {
   29df2:	6921      	ldr	r1, [r4, #16]
   29df4:	b159      	cbz	r1, 29e0e <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   29df6:	7963      	ldrb	r3, [r4, #5]
   29df8:	079b      	lsls	r3, r3, #30
   29dfa:	d407      	bmi.n	29e0c <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   29dfc:	79a3      	ldrb	r3, [r4, #6]
   29dfe:	fb08 6303 	mla	r3, r8, r3, r6
   29e02:	4620      	mov	r0, r4
   29e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29e06:	681b      	ldr	r3, [r3, #0]
   29e08:	689b      	ldr	r3, [r3, #8]
   29e0a:	4798      	blx	r3
			buf->__buf = NULL;
   29e0c:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   29e0e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   29e10:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   29e12:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   29e16:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   29e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29e1a:	b19b      	cbz	r3, 29e44 <net_buf_unref+0x70>
			pool->destroy(buf);
   29e1c:	4620      	mov	r0, r4
   29e1e:	4798      	blx	r3
	while (buf) {
   29e20:	2d00      	cmp	r5, #0
   29e22:	d1df      	bne.n	29de4 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   29e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   29e28:	490a      	ldr	r1, [pc, #40]	; (29e54 <net_buf_unref+0x80>)
   29e2a:	480b      	ldr	r0, [pc, #44]	; (29e58 <net_buf_unref+0x84>)
   29e2c:	4a0b      	ldr	r2, [pc, #44]	; (29e5c <net_buf_unref+0x88>)
   29e2e:	f44f 7304 	mov.w	r3, #528	; 0x210
   29e32:	f00d f972 	bl	3711a <printk>
}
   29e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   29e3a:	4808      	ldr	r0, [pc, #32]	; (29e5c <net_buf_unref+0x88>)
   29e3c:	f44f 7104 	mov.w	r1, #528	; 0x210
   29e40:	f00d bb11 	b.w	37466 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   29e44:	4621      	mov	r1, r4
   29e46:	fb00 6008 	mla	r0, r0, r8, r6
   29e4a:	f010 fa08 	bl	3a25e <k_queue_prepend>
}
   29e4e:	e7e7      	b.n	29e20 <net_buf_unref+0x4c>
   29e50:	20000cb4 	.word	0x20000cb4
   29e54:	0003e07b 	.word	0x0003e07b
   29e58:	0003c48a 	.word	0x0003c48a
   29e5c:	0003f23e 	.word	0x0003f23e

00029e60 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   29e60:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   29e62:	4604      	mov	r4, r0
   29e64:	b958      	cbnz	r0, 29e7e <net_buf_ref+0x1e>
   29e66:	4908      	ldr	r1, [pc, #32]	; (29e88 <net_buf_ref+0x28>)
   29e68:	4808      	ldr	r0, [pc, #32]	; (29e8c <net_buf_ref+0x2c>)
   29e6a:	4a09      	ldr	r2, [pc, #36]	; (29e90 <net_buf_ref+0x30>)
   29e6c:	f240 233f 	movw	r3, #575	; 0x23f
   29e70:	f00d f953 	bl	3711a <printk>
   29e74:	4806      	ldr	r0, [pc, #24]	; (29e90 <net_buf_ref+0x30>)
   29e76:	f240 213f 	movw	r1, #575	; 0x23f
   29e7a:	f00d faf4 	bl	37466 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   29e7e:	7923      	ldrb	r3, [r4, #4]
   29e80:	3301      	adds	r3, #1
   29e82:	7123      	strb	r3, [r4, #4]
	return buf;
}
   29e84:	4620      	mov	r0, r4
   29e86:	bd10      	pop	{r4, pc}
   29e88:	0003e07b 	.word	0x0003e07b
   29e8c:	0003c48a 	.word	0x0003c48a
   29e90:	0003f23e 	.word	0x0003f23e

00029e94 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   29e94:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   29e96:	4604      	mov	r4, r0
   29e98:	b958      	cbnz	r0, 29eb2 <net_buf_frag_last+0x1e>
   29e9a:	4908      	ldr	r1, [pc, #32]	; (29ebc <net_buf_frag_last+0x28>)
   29e9c:	4808      	ldr	r0, [pc, #32]	; (29ec0 <net_buf_frag_last+0x2c>)
   29e9e:	4a09      	ldr	r2, [pc, #36]	; (29ec4 <net_buf_frag_last+0x30>)
   29ea0:	f44f 731f 	mov.w	r3, #636	; 0x27c
   29ea4:	f00d f939 	bl	3711a <printk>
   29ea8:	4806      	ldr	r0, [pc, #24]	; (29ec4 <net_buf_frag_last+0x30>)
   29eaa:	f44f 711f 	mov.w	r1, #636	; 0x27c
   29eae:	f00d fada 	bl	37466 <assert_post_action>

	while (buf->frags) {
   29eb2:	4620      	mov	r0, r4
   29eb4:	6824      	ldr	r4, [r4, #0]
   29eb6:	2c00      	cmp	r4, #0
   29eb8:	d1fb      	bne.n	29eb2 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   29eba:	bd10      	pop	{r4, pc}
   29ebc:	0003e07b 	.word	0x0003e07b
   29ec0:	0003c48a 	.word	0x0003c48a
   29ec4:	0003f23e 	.word	0x0003f23e

00029ec8 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   29ec8:	b538      	push	{r3, r4, r5, lr}
   29eca:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   29ecc:	4604      	mov	r4, r0
   29ece:	b958      	cbnz	r0, 29ee8 <net_buf_frag_insert+0x20>
   29ed0:	4910      	ldr	r1, [pc, #64]	; (29f14 <net_buf_frag_insert+0x4c>)
   29ed2:	4811      	ldr	r0, [pc, #68]	; (29f18 <net_buf_frag_insert+0x50>)
   29ed4:	4a11      	ldr	r2, [pc, #68]	; (29f1c <net_buf_frag_insert+0x54>)
   29ed6:	f240 2387 	movw	r3, #647	; 0x287
   29eda:	f00d f91e 	bl	3711a <printk>
   29ede:	480f      	ldr	r0, [pc, #60]	; (29f1c <net_buf_frag_insert+0x54>)
   29ee0:	f240 2187 	movw	r1, #647	; 0x287
   29ee4:	f00d fabf 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   29ee8:	b95d      	cbnz	r5, 29f02 <net_buf_frag_insert+0x3a>
   29eea:	490d      	ldr	r1, [pc, #52]	; (29f20 <net_buf_frag_insert+0x58>)
   29eec:	480a      	ldr	r0, [pc, #40]	; (29f18 <net_buf_frag_insert+0x50>)
   29eee:	4a0b      	ldr	r2, [pc, #44]	; (29f1c <net_buf_frag_insert+0x54>)
   29ef0:	f44f 7322 	mov.w	r3, #648	; 0x288
   29ef4:	f00d f911 	bl	3711a <printk>
   29ef8:	4808      	ldr	r0, [pc, #32]	; (29f1c <net_buf_frag_insert+0x54>)
   29efa:	f44f 7122 	mov.w	r1, #648	; 0x288
   29efe:	f00d fab2 	bl	37466 <assert_post_action>

	if (parent->frags) {
   29f02:	6823      	ldr	r3, [r4, #0]
   29f04:	b123      	cbz	r3, 29f10 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   29f06:	4628      	mov	r0, r5
   29f08:	f7ff ffc4 	bl	29e94 <net_buf_frag_last>
   29f0c:	6823      	ldr	r3, [r4, #0]
   29f0e:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   29f10:	6025      	str	r5, [r4, #0]
}
   29f12:	bd38      	pop	{r3, r4, r5, pc}
   29f14:	0003f2c8 	.word	0x0003f2c8
   29f18:	0003c48a 	.word	0x0003c48a
   29f1c:	0003f23e 	.word	0x0003f23e
   29f20:	0003f2cf 	.word	0x0003f2cf

00029f24 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   29f24:	b538      	push	{r3, r4, r5, lr}
   29f26:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   29f28:	460d      	mov	r5, r1
   29f2a:	b959      	cbnz	r1, 29f44 <net_buf_frag_add+0x20>
   29f2c:	490c      	ldr	r1, [pc, #48]	; (29f60 <net_buf_frag_add+0x3c>)
   29f2e:	480d      	ldr	r0, [pc, #52]	; (29f64 <net_buf_frag_add+0x40>)
   29f30:	4a0d      	ldr	r2, [pc, #52]	; (29f68 <net_buf_frag_add+0x44>)
   29f32:	f240 2393 	movw	r3, #659	; 0x293
   29f36:	f00d f8f0 	bl	3711a <printk>
   29f3a:	480b      	ldr	r0, [pc, #44]	; (29f68 <net_buf_frag_add+0x44>)
   29f3c:	f240 2193 	movw	r1, #659	; 0x293
   29f40:	f00d fa91 	bl	37466 <assert_post_action>

	if (!head) {
   29f44:	b924      	cbnz	r4, 29f50 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   29f46:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   29f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   29f4c:	f7ff bf88 	b.w	29e60 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   29f50:	4620      	mov	r0, r4
   29f52:	f7ff ff9f 	bl	29e94 <net_buf_frag_last>
   29f56:	4629      	mov	r1, r5
   29f58:	f7ff ffb6 	bl	29ec8 <net_buf_frag_insert>
}
   29f5c:	4620      	mov	r0, r4
   29f5e:	bd38      	pop	{r3, r4, r5, pc}
   29f60:	0003f2cf 	.word	0x0003f2cf
   29f64:	0003c48a 	.word	0x0003c48a
   29f68:	0003f23e 	.word	0x0003f23e

00029f6c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   29f6c:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   29f6e:	6882      	ldr	r2, [r0, #8]
   29f70:	6803      	ldr	r3, [r0, #0]
   29f72:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   29f74:	4299      	cmp	r1, r3
{
   29f76:	4604      	mov	r4, r0
   29f78:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   29f7a:	d90b      	bls.n	29f94 <net_buf_simple_push+0x28>
   29f7c:	4909      	ldr	r1, [pc, #36]	; (29fa4 <net_buf_simple_push+0x38>)
   29f7e:	480a      	ldr	r0, [pc, #40]	; (29fa8 <net_buf_simple_push+0x3c>)
   29f80:	4a0a      	ldr	r2, [pc, #40]	; (29fac <net_buf_simple_push+0x40>)
   29f82:	f240 4317 	movw	r3, #1047	; 0x417
   29f86:	f00d f8c8 	bl	3711a <printk>
   29f8a:	4808      	ldr	r0, [pc, #32]	; (29fac <net_buf_simple_push+0x40>)
   29f8c:	f240 4117 	movw	r1, #1047	; 0x417
   29f90:	f00d fa69 	bl	37466 <assert_post_action>
	buf->data -= len;
   29f94:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   29f96:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   29f98:	1b40      	subs	r0, r0, r5
	buf->len += len;
   29f9a:	440d      	add	r5, r1
	buf->data -= len;
   29f9c:	6020      	str	r0, [r4, #0]
	buf->len += len;
   29f9e:	80a5      	strh	r5, [r4, #4]
}
   29fa0:	bd38      	pop	{r3, r4, r5, pc}
   29fa2:	bf00      	nop
   29fa4:	0003f2e4 	.word	0x0003f2e4
   29fa8:	0003c48a 	.word	0x0003c48a
   29fac:	0003f23e 	.word	0x0003f23e

00029fb0 <net_buf_simple_pull>:
{
   29fb0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   29fb2:	8883      	ldrh	r3, [r0, #4]
   29fb4:	428b      	cmp	r3, r1
{
   29fb6:	4604      	mov	r4, r0
   29fb8:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   29fba:	d20b      	bcs.n	29fd4 <net_buf_simple_pull+0x24>
   29fbc:	4909      	ldr	r1, [pc, #36]	; (29fe4 <net_buf_simple_pull+0x34>)
   29fbe:	480a      	ldr	r0, [pc, #40]	; (29fe8 <net_buf_simple_pull+0x38>)
   29fc0:	4a0a      	ldr	r2, [pc, #40]	; (29fec <net_buf_simple_pull+0x3c>)
   29fc2:	f240 4377 	movw	r3, #1143	; 0x477
   29fc6:	f00d f8a8 	bl	3711a <printk>
   29fca:	4808      	ldr	r0, [pc, #32]	; (29fec <net_buf_simple_pull+0x3c>)
   29fcc:	f240 4177 	movw	r1, #1143	; 0x477
   29fd0:	f00d fa49 	bl	37466 <assert_post_action>
	buf->len -= len;
   29fd4:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   29fd6:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   29fd8:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   29fda:	4428      	add	r0, r5
	buf->len -= len;
   29fdc:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   29fde:	6020      	str	r0, [r4, #0]
}
   29fe0:	bd38      	pop	{r3, r4, r5, pc}
   29fe2:	bf00      	nop
   29fe4:	0003f2d4 	.word	0x0003f2d4
   29fe8:	0003c48a 	.word	0x0003c48a
   29fec:	0003f23e 	.word	0x0003f23e

00029ff0 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   29ff0:	8883      	ldrh	r3, [r0, #4]
   29ff2:	428b      	cmp	r3, r1
{
   29ff4:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   29ff6:	6806      	ldr	r6, [r0, #0]
{
   29ff8:	4604      	mov	r4, r0
   29ffa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   29ffc:	d20b      	bcs.n	2a016 <net_buf_simple_pull_mem+0x26>
   29ffe:	490a      	ldr	r1, [pc, #40]	; (2a028 <net_buf_simple_pull_mem+0x38>)
   2a000:	480a      	ldr	r0, [pc, #40]	; (2a02c <net_buf_simple_pull_mem+0x3c>)
   2a002:	4a0b      	ldr	r2, [pc, #44]	; (2a030 <net_buf_simple_pull_mem+0x40>)
   2a004:	f240 4383 	movw	r3, #1155	; 0x483
   2a008:	f00d f887 	bl	3711a <printk>
   2a00c:	4808      	ldr	r0, [pc, #32]	; (2a030 <net_buf_simple_pull_mem+0x40>)
   2a00e:	f240 4183 	movw	r1, #1155	; 0x483
   2a012:	f00d fa28 	bl	37466 <assert_post_action>
	buf->len -= len;
   2a016:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   2a018:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   2a01a:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   2a01c:	4429      	add	r1, r5
	buf->len -= len;
   2a01e:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   2a020:	6021      	str	r1, [r4, #0]
}
   2a022:	4630      	mov	r0, r6
   2a024:	bd70      	pop	{r4, r5, r6, pc}
   2a026:	bf00      	nop
   2a028:	0003f2d4 	.word	0x0003f2d4
   2a02c:	0003c48a 	.word	0x0003c48a
   2a030:	0003f23e 	.word	0x0003f23e

0002a034 <net_buf_simple_add>:
{
   2a034:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   2a036:	6803      	ldr	r3, [r0, #0]
   2a038:	8886      	ldrh	r6, [r0, #4]
   2a03a:	4604      	mov	r4, r0
   2a03c:	460d      	mov	r5, r1
   2a03e:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   2a040:	f00f fb5e 	bl	39700 <net_buf_simple_tailroom>
   2a044:	4288      	cmp	r0, r1
   2a046:	d20b      	bcs.n	2a060 <net_buf_simple_add+0x2c>
   2a048:	4908      	ldr	r1, [pc, #32]	; (2a06c <net_buf_simple_add+0x38>)
   2a04a:	4809      	ldr	r0, [pc, #36]	; (2a070 <net_buf_simple_add+0x3c>)
   2a04c:	4a09      	ldr	r2, [pc, #36]	; (2a074 <net_buf_simple_add+0x40>)
   2a04e:	f44f 734a 	mov.w	r3, #808	; 0x328
   2a052:	f00d f862 	bl	3711a <printk>
   2a056:	4807      	ldr	r0, [pc, #28]	; (2a074 <net_buf_simple_add+0x40>)
   2a058:	f44f 714a 	mov.w	r1, #808	; 0x328
   2a05c:	f00d fa03 	bl	37466 <assert_post_action>
	buf->len += len;
   2a060:	88a1      	ldrh	r1, [r4, #4]
   2a062:	440d      	add	r5, r1
   2a064:	80a5      	strh	r5, [r4, #4]
}
   2a066:	4630      	mov	r0, r6
   2a068:	bd70      	pop	{r4, r5, r6, pc}
   2a06a:	bf00      	nop
   2a06c:	0003f308 	.word	0x0003f308
   2a070:	0003c48a 	.word	0x0003c48a
   2a074:	0003f23e 	.word	0x0003f23e

0002a078 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2a078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   2a07c:	4c0e      	ldr	r4, [pc, #56]	; (2a0b8 <onoff_start+0x40>)
   2a07e:	1b05      	subs	r5, r0, r4
   2a080:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   2a084:	250c      	movs	r5, #12
   2a086:	435d      	muls	r5, r3
{
   2a088:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   2a08a:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   2a08e:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   2a090:	4420      	add	r0, r4
   2a092:	2140      	movs	r1, #64	; 0x40
   2a094:	f00f fb58 	bl	39748 <set_starting_state>
	if (err < 0) {
   2a098:	1e01      	subs	r1, r0, #0
   2a09a:	db08      	blt.n	2a0ae <onoff_start+0x36>
	subdata->cb = cb;
   2a09c:	4b07      	ldr	r3, [pc, #28]	; (2a0bc <onoff_start+0x44>)
   2a09e:	442c      	add	r4, r5
	subdata->user_data = user_data;
   2a0a0:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2a0a4:	4b06      	ldr	r3, [pc, #24]	; (2a0c0 <onoff_start+0x48>)
   2a0a6:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   2a0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   2a0ac:	4718      	bx	r3
		notify(mgr, err);
   2a0ae:	4638      	mov	r0, r7
   2a0b0:	4633      	mov	r3, r6
}
   2a0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   2a0b6:	4718      	bx	r3
   2a0b8:	20002a40 	.word	0x20002a40
   2a0bc:	000397ab 	.word	0x000397ab
   2a0c0:	0003bcc8 	.word	0x0003bcc8

0002a0c4 <get_status>:
{
   2a0c4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2a0c6:	b2cc      	uxtb	r4, r1
   2a0c8:	2c01      	cmp	r4, #1
{
   2a0ca:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2a0cc:	d909      	bls.n	2a0e2 <get_status+0x1e>
   2a0ce:	4909      	ldr	r1, [pc, #36]	; (2a0f4 <get_status+0x30>)
   2a0d0:	4809      	ldr	r0, [pc, #36]	; (2a0f8 <get_status+0x34>)
   2a0d2:	4a0a      	ldr	r2, [pc, #40]	; (2a0fc <get_status+0x38>)
   2a0d4:	2379      	movs	r3, #121	; 0x79
   2a0d6:	f00d f820 	bl	3711a <printk>
   2a0da:	4808      	ldr	r0, [pc, #32]	; (2a0fc <get_status+0x38>)
   2a0dc:	2179      	movs	r1, #121	; 0x79
   2a0de:	f00d f9c2 	bl	37466 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2a0e2:	692b      	ldr	r3, [r5, #16]
   2a0e4:	210c      	movs	r1, #12
   2a0e6:	fb04 3401 	mla	r4, r4, r1, r3
   2a0ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   2a0ec:	f000 0007 	and.w	r0, r0, #7
   2a0f0:	bd38      	pop	{r3, r4, r5, pc}
   2a0f2:	bf00      	nop
   2a0f4:	0003f371 	.word	0x0003f371
   2a0f8:	0003c48a 	.word	0x0003c48a
   2a0fc:	0003f334 	.word	0x0003f334

0002a100 <stop>:
{
   2a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a102:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2a104:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2a106:	6907      	ldr	r7, [r0, #16]
{
   2a108:	4605      	mov	r5, r0
   2a10a:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2a10c:	d90b      	bls.n	2a126 <stop+0x26>
   2a10e:	4919      	ldr	r1, [pc, #100]	; (2a174 <stop+0x74>)
   2a110:	4819      	ldr	r0, [pc, #100]	; (2a178 <stop+0x78>)
   2a112:	4a1a      	ldr	r2, [pc, #104]	; (2a17c <stop+0x7c>)
   2a114:	f240 134d 	movw	r3, #333	; 0x14d
   2a118:	f00c ffff 	bl	3711a <printk>
   2a11c:	4817      	ldr	r0, [pc, #92]	; (2a17c <stop+0x7c>)
   2a11e:	f240 114d 	movw	r1, #333	; 0x14d
   2a122:	f00d f9a0 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2a126:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a12a:	f3ef 8211 	mrs	r2, BASEPRI
   2a12e:	f383 8812 	msr	BASEPRI_MAX, r3
   2a132:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2a136:	230c      	movs	r3, #12
   2a138:	fb03 7104 	mla	r1, r3, r4, r7
   2a13c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2a13e:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   2a142:	d001      	beq.n	2a148 <stop+0x48>
   2a144:	428e      	cmp	r6, r1
   2a146:	d111      	bne.n	2a16c <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2a148:	fb03 7304 	mla	r3, r3, r4, r7
   2a14c:	2101      	movs	r1, #1
   2a14e:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   2a150:	2000      	movs	r0, #0
	__asm__ volatile(
   2a152:	f382 8811 	msr	BASEPRI, r2
   2a156:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2a15a:	b930      	cbnz	r0, 2a16a <stop+0x6a>
	get_sub_config(dev, type)->stop();
   2a15c:	6869      	ldr	r1, [r5, #4]
   2a15e:	230c      	movs	r3, #12
   2a160:	fb03 1404 	mla	r4, r3, r4, r1
   2a164:	6863      	ldr	r3, [r4, #4]
   2a166:	4798      	blx	r3
	return 0;
   2a168:	2000      	movs	r0, #0
}
   2a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   2a16c:	f04f 30ff 	mov.w	r0, #4294967295
   2a170:	e7ef      	b.n	2a152 <stop+0x52>
   2a172:	bf00      	nop
   2a174:	0003f371 	.word	0x0003f371
   2a178:	0003c48a 	.word	0x0003c48a
   2a17c:	0003f334 	.word	0x0003f334

0002a180 <onoff_stop>:
{
   2a180:	b570      	push	{r4, r5, r6, lr}
   2a182:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   2a184:	4906      	ldr	r1, [pc, #24]	; (2a1a0 <onoff_stop+0x20>)
   2a186:	1a41      	subs	r1, r0, r1
{
   2a188:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2a18a:	1149      	asrs	r1, r1, #5
   2a18c:	4805      	ldr	r0, [pc, #20]	; (2a1a4 <onoff_stop+0x24>)
   2a18e:	2240      	movs	r2, #64	; 0x40
   2a190:	f7ff ffb6 	bl	2a100 <stop>
	notify(mgr, res);
   2a194:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2a196:	4601      	mov	r1, r0
	notify(mgr, res);
   2a198:	4620      	mov	r0, r4
}
   2a19a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2a19e:	4718      	bx	r3
   2a1a0:	20002a40 	.word	0x20002a40
   2a1a4:	0003b180 	.word	0x0003b180

0002a1a8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2a1a8:	2200      	movs	r2, #0
{
   2a1aa:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2a1ac:	2101      	movs	r1, #1
{
   2a1ae:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2a1b0:	4610      	mov	r0, r2
   2a1b2:	f7f8 f853 	bl	2225c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   2a1b6:	2000      	movs	r0, #0
   2a1b8:	f7f8 f81e 	bl	221f8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2a1bc:	480f      	ldr	r0, [pc, #60]	; (2a1fc <clk_init+0x54>)
   2a1be:	f003 fb81 	bl	2d8c4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2a1c2:	4b0f      	ldr	r3, [pc, #60]	; (2a200 <clk_init+0x58>)
   2a1c4:	4298      	cmp	r0, r3
   2a1c6:	d115      	bne.n	2a1f4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2a1c8:	f00f fe31 	bl	39e2e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   2a1cc:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   2a1ce:	490d      	ldr	r1, [pc, #52]	; (2a204 <clk_init+0x5c>)
   2a1d0:	4630      	mov	r0, r6
   2a1d2:	f00c fffd 	bl	371d0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2a1d6:	2800      	cmp	r0, #0
   2a1d8:	db0b      	blt.n	2a1f2 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2a1da:	2501      	movs	r5, #1
   2a1dc:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   2a1de:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2a1e0:	4908      	ldr	r1, [pc, #32]	; (2a204 <clk_init+0x5c>)
   2a1e2:	f104 0020 	add.w	r0, r4, #32
   2a1e6:	f00c fff3 	bl	371d0 <onoff_manager_init>
		if (err < 0) {
   2a1ea:	2800      	cmp	r0, #0
   2a1ec:	db01      	blt.n	2a1f2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2a1ee:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   2a1f0:	2000      	movs	r0, #0
}
   2a1f2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2a1f4:	f06f 0004 	mvn.w	r0, #4
   2a1f8:	e7fb      	b.n	2a1f2 <clk_init+0x4a>
   2a1fa:	bf00      	nop
   2a1fc:	0002a23d 	.word	0x0002a23d
   2a200:	0bad0000 	.word	0x0bad0000
   2a204:	0003bce0 	.word	0x0003bce0

0002a208 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   2a208:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   2a20a:	230c      	movs	r3, #12
   2a20c:	4809      	ldr	r0, [pc, #36]	; (2a234 <clkstarted_handle.constprop.0+0x2c>)
   2a20e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   2a210:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   2a212:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   2a214:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   2a218:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   2a21a:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   2a21c:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   2a21e:	4418      	add	r0, r3
   2a220:	f00f fab0 	bl	39784 <set_on_state>
	if (callback) {
   2a224:	b12d      	cbz	r5, 2a232 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2a226:	4632      	mov	r2, r6
   2a228:	462b      	mov	r3, r5
   2a22a:	4803      	ldr	r0, [pc, #12]	; (2a238 <clkstarted_handle.constprop.0+0x30>)
}
   2a22c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   2a230:	4718      	bx	r3
}
   2a232:	bd70      	pop	{r4, r5, r6, pc}
   2a234:	20002a40 	.word	0x20002a40
   2a238:	0003b180 	.word	0x0003b180

0002a23c <clock_event_handler>:
	switch (event) {
   2a23c:	2801      	cmp	r0, #1
{
   2a23e:	b508      	push	{r3, lr}
	switch (event) {
   2a240:	d006      	beq.n	2a250 <clock_event_handler+0x14>
   2a242:	2803      	cmp	r0, #3
   2a244:	d008      	beq.n	2a258 <clock_event_handler+0x1c>
   2a246:	b9a8      	cbnz	r0, 2a274 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2a248:	4b10      	ldr	r3, [pc, #64]	; (2a28c <clock_event_handler+0x50>)
   2a24a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2a24c:	075b      	lsls	r3, r3, #29
   2a24e:	d11b      	bne.n	2a288 <clock_event_handler+0x4c>
}
   2a250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2a254:	f7ff bfd8 	b.w	2a208 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   2a258:	490d      	ldr	r1, [pc, #52]	; (2a290 <clock_event_handler+0x54>)
   2a25a:	4a0e      	ldr	r2, [pc, #56]	; (2a294 <clock_event_handler+0x58>)
   2a25c:	480e      	ldr	r0, [pc, #56]	; (2a298 <clock_event_handler+0x5c>)
   2a25e:	f240 235e 	movw	r3, #606	; 0x25e
   2a262:	f00c ff5a 	bl	3711a <printk>
   2a266:	f240 215e 	movw	r1, #606	; 0x25e
}
   2a26a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   2a26e:	4809      	ldr	r0, [pc, #36]	; (2a294 <clock_event_handler+0x58>)
   2a270:	f00d b8f9 	b.w	37466 <assert_post_action>
   2a274:	4906      	ldr	r1, [pc, #24]	; (2a290 <clock_event_handler+0x54>)
   2a276:	4a07      	ldr	r2, [pc, #28]	; (2a294 <clock_event_handler+0x58>)
   2a278:	4807      	ldr	r0, [pc, #28]	; (2a298 <clock_event_handler+0x5c>)
   2a27a:	f240 2362 	movw	r3, #610	; 0x262
   2a27e:	f00c ff4c 	bl	3711a <printk>
   2a282:	f240 2162 	movw	r1, #610	; 0x262
   2a286:	e7f0      	b.n	2a26a <clock_event_handler+0x2e>
}
   2a288:	bd08      	pop	{r3, pc}
   2a28a:	bf00      	nop
   2a28c:	20002a40 	.word	0x20002a40
   2a290:	00041a5a 	.word	0x00041a5a
   2a294:	0003f334 	.word	0x0003f334
   2a298:	0003c48a 	.word	0x0003c48a

0002a29c <generic_hfclk_start>:
{
   2a29c:	b508      	push	{r3, lr}
	__asm__ volatile(
   2a29e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a2a2:	f3ef 8111 	mrs	r1, BASEPRI
   2a2a6:	f383 8812 	msr	BASEPRI_MAX, r3
   2a2aa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2a2ae:	4a12      	ldr	r2, [pc, #72]	; (2a2f8 <generic_hfclk_start+0x5c>)
   2a2b0:	6813      	ldr	r3, [r2, #0]
   2a2b2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   2a2b6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   2a2ba:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   2a2bc:	d00c      	beq.n	2a2d8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2a2be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2a2c2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2a2c6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   2a2ca:	f013 0301 	ands.w	r3, r3, #1
   2a2ce:	d003      	beq.n	2a2d8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   2a2d0:	480a      	ldr	r0, [pc, #40]	; (2a2fc <generic_hfclk_start+0x60>)
   2a2d2:	f00f fa57 	bl	39784 <set_on_state>
			already_started = true;
   2a2d6:	2301      	movs	r3, #1
	__asm__ volatile(
   2a2d8:	f381 8811 	msr	BASEPRI, r1
   2a2dc:	f3bf 8f6f 	isb	sy
	if (already_started) {
   2a2e0:	b123      	cbz	r3, 2a2ec <generic_hfclk_start+0x50>
}
   2a2e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   2a2e6:	2000      	movs	r0, #0
   2a2e8:	f7ff bf8e 	b.w	2a208 <clkstarted_handle.constprop.0>
}
   2a2ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2a2f0:	2001      	movs	r0, #1
   2a2f2:	f003 ba9d 	b.w	2d830 <nrfx_clock_start>
   2a2f6:	bf00      	nop
   2a2f8:	20002a98 	.word	0x20002a98
   2a2fc:	20002a88 	.word	0x20002a88

0002a300 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a300:	4b09      	ldr	r3, [pc, #36]	; (2a328 <generic_hfclk_stop+0x28>)
   2a302:	f3bf 8f5b 	dmb	ish
   2a306:	e853 2f00 	ldrex	r2, [r3]
   2a30a:	f022 0102 	bic.w	r1, r2, #2
   2a30e:	e843 1000 	strex	r0, r1, [r3]
   2a312:	2800      	cmp	r0, #0
   2a314:	d1f7      	bne.n	2a306 <generic_hfclk_stop+0x6>
   2a316:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   2a31a:	07d3      	lsls	r3, r2, #31
   2a31c:	d402      	bmi.n	2a324 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2a31e:	2001      	movs	r0, #1
   2a320:	f003 bab0 	b.w	2d884 <nrfx_clock_stop>
}
   2a324:	4770      	bx	lr
   2a326:	bf00      	nop
   2a328:	20002a98 	.word	0x20002a98

0002a32c <api_blocking_start>:
{
   2a32c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2a32e:	2200      	movs	r2, #0
   2a330:	2301      	movs	r3, #1
   2a332:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2a336:	ab04      	add	r3, sp, #16
   2a338:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2a33c:	4a09      	ldr	r2, [pc, #36]	; (2a364 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2a33e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2a342:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2a344:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2a348:	f00f fa41 	bl	397ce <api_start>
	if (err < 0) {
   2a34c:	2800      	cmp	r0, #0
   2a34e:	db05      	blt.n	2a35c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   2a350:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2a354:	2300      	movs	r3, #0
   2a356:	4668      	mov	r0, sp
   2a358:	f005 fdf6 	bl	2ff48 <z_impl_k_sem_take>
}
   2a35c:	b007      	add	sp, #28
   2a35e:	f85d fb04 	ldr.w	pc, [sp], #4
   2a362:	bf00      	nop
   2a364:	000397c9 	.word	0x000397c9

0002a368 <z_nrf_clock_control_lf_on>:
{
   2a368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a36c:	4949      	ldr	r1, [pc, #292]	; (2a494 <z_nrf_clock_control_lf_on+0x12c>)
   2a36e:	f3bf 8f5b 	dmb	ish
   2a372:	4605      	mov	r5, r0
   2a374:	2201      	movs	r2, #1
   2a376:	e851 3f00 	ldrex	r3, [r1]
   2a37a:	e841 2000 	strex	r0, r2, [r1]
   2a37e:	2800      	cmp	r0, #0
   2a380:	d1f9      	bne.n	2a376 <z_nrf_clock_control_lf_on+0xe>
   2a382:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   2a386:	b9a3      	cbnz	r3, 2a3b2 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   2a388:	4943      	ldr	r1, [pc, #268]	; (2a498 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
   2a38a:	4844      	ldr	r0, [pc, #272]	; (2a49c <z_nrf_clock_control_lf_on+0x134>)
   2a38c:	604b      	str	r3, [r1, #4]
   2a38e:	60cb      	str	r3, [r1, #12]
   2a390:	608a      	str	r2, [r1, #8]
   2a392:	f7f5 fa31 	bl	1f7f8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   2a396:	2800      	cmp	r0, #0
   2a398:	da0b      	bge.n	2a3b2 <z_nrf_clock_control_lf_on+0x4a>
   2a39a:	4941      	ldr	r1, [pc, #260]	; (2a4a0 <z_nrf_clock_control_lf_on+0x138>)
   2a39c:	4841      	ldr	r0, [pc, #260]	; (2a4a4 <z_nrf_clock_control_lf_on+0x13c>)
   2a39e:	4a42      	ldr	r2, [pc, #264]	; (2a4a8 <z_nrf_clock_control_lf_on+0x140>)
   2a3a0:	f44f 7308 	mov.w	r3, #544	; 0x220
   2a3a4:	f00c feb9 	bl	3711a <printk>
   2a3a8:	483f      	ldr	r0, [pc, #252]	; (2a4a8 <z_nrf_clock_control_lf_on+0x140>)
   2a3aa:	f44f 7108 	mov.w	r1, #544	; 0x220
   2a3ae:	f00d f85a 	bl	37466 <assert_post_action>
	switch (start_mode) {
   2a3b2:	b3ad      	cbz	r5, 2a420 <z_nrf_clock_control_lf_on+0xb8>
   2a3b4:	1e6b      	subs	r3, r5, #1
   2a3b6:	2b01      	cmp	r3, #1
   2a3b8:	d856      	bhi.n	2a468 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   2a3ba:	2d01      	cmp	r5, #1
   2a3bc:	d107      	bne.n	2a3ce <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2a3be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a3c2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   2a3c6:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   2a3ca:	2b01      	cmp	r3, #1
   2a3cc:	d028      	beq.n	2a420 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2a3ce:	f00f ff07 	bl	3a1e0 <k_is_in_isr>
   2a3d2:	4604      	mov	r4, r0
   2a3d4:	b918      	cbnz	r0, 2a3de <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
   2a3d6:	4b35      	ldr	r3, [pc, #212]	; (2a4ac <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
   2a3d8:	781b      	ldrb	r3, [r3, #0]
   2a3da:	2b00      	cmp	r3, #0
   2a3dc:	d152      	bne.n	2a484 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
   2a3de:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a3e2:	f3ef 8611 	mrs	r6, BASEPRI
   2a3e6:	f383 8812 	msr	BASEPRI_MAX, r3
   2a3ea:	f3bf 8f6f 	isb	sy
   2a3ee:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2a3f0:	4f2f      	ldr	r7, [pc, #188]	; (2a4b0 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a3f2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2a4b8 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a3f6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2a4bc <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2a3fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2a3fe:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2a402:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   2a406:	03d2      	lsls	r2, r2, #15
   2a408:	d50c      	bpl.n	2a424 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2a40a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2a40e:	2b01      	cmp	r3, #1
   2a410:	d001      	beq.n	2a416 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2a412:	2d01      	cmp	r5, #1
   2a414:	d106      	bne.n	2a424 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
   2a416:	b30c      	cbz	r4, 2a45c <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
   2a418:	f386 8811 	msr	BASEPRI, r6
   2a41c:	f3bf 8f6f 	isb	sy
}
   2a420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2a424:	b1ac      	cbz	r4, 2a452 <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2a426:	4630      	mov	r0, r6
   2a428:	f7f7 fea4 	bl	22174 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   2a42c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2a430:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   2a434:	2b00      	cmp	r3, #0
   2a436:	d1e0      	bne.n	2a3fa <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2a438:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   2a43a:	2900      	cmp	r1, #0
   2a43c:	d0dd      	beq.n	2a3fa <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a43e:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2a440:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   2a442:	2301      	movs	r3, #1
   2a444:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   2a448:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a44c:	f8c9 3000 	str.w	r3, [r9]
}
   2a450:	e7d3      	b.n	2a3fa <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
   2a452:	2100      	movs	r1, #0
   2a454:	2021      	movs	r0, #33	; 0x21
   2a456:	f007 fc2b 	bl	31cb0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2a45a:	e7e7      	b.n	2a42c <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
   2a45c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a460:	2202      	movs	r2, #2
   2a462:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2a466:	e7db      	b.n	2a420 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
   2a468:	4912      	ldr	r1, [pc, #72]	; (2a4b4 <z_nrf_clock_control_lf_on+0x14c>)
   2a46a:	480e      	ldr	r0, [pc, #56]	; (2a4a4 <z_nrf_clock_control_lf_on+0x13c>)
   2a46c:	4a0e      	ldr	r2, [pc, #56]	; (2a4a8 <z_nrf_clock_control_lf_on+0x140>)
   2a46e:	f240 2332 	movw	r3, #562	; 0x232
   2a472:	f00c fe52 	bl	3711a <printk>
}
   2a476:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   2a47a:	480b      	ldr	r0, [pc, #44]	; (2a4a8 <z_nrf_clock_control_lf_on+0x140>)
   2a47c:	f240 2132 	movw	r1, #562	; 0x232
   2a480:	f00c bff1 	b.w	37466 <assert_post_action>
    p_reg->INTENCLR = mask;
   2a484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a488:	2202      	movs	r2, #2
   2a48a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   2a48e:	4606      	mov	r6, r0
}
   2a490:	e7ae      	b.n	2a3f0 <z_nrf_clock_control_lf_on+0x88>
   2a492:	bf00      	nop
   2a494:	20002a9c 	.word	0x20002a9c
   2a498:	20002a30 	.word	0x20002a30
   2a49c:	20002a60 	.word	0x20002a60
   2a4a0:	0003f395 	.word	0x0003f395
   2a4a4:	0003c48a 	.word	0x0003c48a
   2a4a8:	0003f334 	.word	0x0003f334
   2a4ac:	2000488f 	.word	0x2000488f
   2a4b0:	40000104 	.word	0x40000104
   2a4b4:	00041a5a 	.word	0x00041a5a
   2a4b8:	e000e100 	.word	0xe000e100
   2a4bc:	40000008 	.word	0x40000008

0002a4c0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   2a4c0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   2a4c2:	4c04      	ldr	r4, [pc, #16]	; (2a4d4 <rtt_console_init+0x14>)
   2a4c4:	4620      	mov	r0, r4
   2a4c6:	f7f4 ff51 	bl	1f36c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   2a4ca:	4620      	mov	r0, r4
   2a4cc:	f7f8 fc8c 	bl	22de8 <__stdout_hook_install>

	return 0;
}
   2a4d0:	2000      	movs	r0, #0
   2a4d2:	bd10      	pop	{r4, pc}
   2a4d4:	0002a4d9 	.word	0x0002a4d9

0002a4d8 <rtt_console_out>:
{
   2a4d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2a4dc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 2a540 <rtt_console_out+0x68>
   2a4e0:	4e16      	ldr	r6, [pc, #88]	; (2a53c <rtt_console_out+0x64>)
	char c = (char)character;
   2a4e2:	f88d 0007 	strb.w	r0, [sp, #7]
{
   2a4e6:	4604      	mov	r4, r0
	char c = (char)character;
   2a4e8:	2503      	movs	r5, #3
   2a4ea:	f04f 33ff 	mov.w	r3, #4294967295
   2a4ee:	f04f 32ff 	mov.w	r2, #4294967295
   2a4f2:	4640      	mov	r0, r8
   2a4f4:	f005 f9b8 	bl	2f868 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   2a4f8:	2201      	movs	r2, #1
   2a4fa:	f10d 0107 	add.w	r1, sp, #7
   2a4fe:	2000      	movs	r0, #0
   2a500:	f004 fc20 	bl	2ed44 <SEGGER_RTT_WriteNoLock>
   2a504:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   2a506:	4640      	mov	r0, r8
   2a508:	f005 faae 	bl	2fa68 <z_impl_k_mutex_unlock>
		if (cnt) {
   2a50c:	b12f      	cbz	r7, 2a51a <rtt_console_out+0x42>
			host_present = true;
   2a50e:	2301      	movs	r3, #1
   2a510:	7033      	strb	r3, [r6, #0]
}
   2a512:	4620      	mov	r0, r4
   2a514:	b002      	add	sp, #8
   2a516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   2a51a:	7833      	ldrb	r3, [r6, #0]
   2a51c:	2b00      	cmp	r3, #0
   2a51e:	d0f8      	beq.n	2a512 <rtt_console_out+0x3a>
			if (max_cnt) {
   2a520:	3d01      	subs	r5, #1
   2a522:	d008      	beq.n	2a536 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   2a524:	f00f fe5c 	bl	3a1e0 <k_is_in_isr>
   2a528:	2800      	cmp	r0, #0
   2a52a:	d1de      	bne.n	2a4ea <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   2a52c:	2100      	movs	r1, #0
   2a52e:	2042      	movs	r0, #66	; 0x42
   2a530:	f007 fbbe 	bl	31cb0 <z_impl_k_sleep>
   2a534:	e7d9      	b.n	2a4ea <rtt_console_out+0x12>
				host_present = false;
   2a536:	7035      	strb	r5, [r6, #0]
   2a538:	e7eb      	b.n	2a512 <rtt_console_out+0x3a>
   2a53a:	bf00      	nop
   2a53c:	20003c10 	.word	0x20003c10
   2a540:	20000bfc 	.word	0x20000bfc

0002a544 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   2a544:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2a546:	6905      	ldr	r5, [r0, #16]
{
   2a548:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   2a54a:	460c      	mov	r4, r1
   2a54c:	b961      	cbnz	r1, 2a568 <gpio_nrfx_manage_callback+0x24>
   2a54e:	4922      	ldr	r1, [pc, #136]	; (2a5d8 <gpio_nrfx_manage_callback+0x94>)
   2a550:	4a22      	ldr	r2, [pc, #136]	; (2a5dc <gpio_nrfx_manage_callback+0x98>)
   2a552:	4823      	ldr	r0, [pc, #140]	; (2a5e0 <gpio_nrfx_manage_callback+0x9c>)
   2a554:	2324      	movs	r3, #36	; 0x24
   2a556:	f00c fde0 	bl	3711a <printk>
   2a55a:	4822      	ldr	r0, [pc, #136]	; (2a5e4 <gpio_nrfx_manage_callback+0xa0>)
   2a55c:	f00c fddd 	bl	3711a <printk>
   2a560:	481e      	ldr	r0, [pc, #120]	; (2a5dc <gpio_nrfx_manage_callback+0x98>)
   2a562:	2124      	movs	r1, #36	; 0x24
   2a564:	f00c ff7f 	bl	37466 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   2a568:	6863      	ldr	r3, [r4, #4]
   2a56a:	b963      	cbnz	r3, 2a586 <gpio_nrfx_manage_callback+0x42>
   2a56c:	491e      	ldr	r1, [pc, #120]	; (2a5e8 <gpio_nrfx_manage_callback+0xa4>)
   2a56e:	4a1b      	ldr	r2, [pc, #108]	; (2a5dc <gpio_nrfx_manage_callback+0x98>)
   2a570:	481b      	ldr	r0, [pc, #108]	; (2a5e0 <gpio_nrfx_manage_callback+0x9c>)
   2a572:	2325      	movs	r3, #37	; 0x25
   2a574:	f00c fdd1 	bl	3711a <printk>
   2a578:	481c      	ldr	r0, [pc, #112]	; (2a5ec <gpio_nrfx_manage_callback+0xa8>)
   2a57a:	f00c fdce 	bl	3711a <printk>
   2a57e:	4817      	ldr	r0, [pc, #92]	; (2a5dc <gpio_nrfx_manage_callback+0x98>)
   2a580:	2125      	movs	r1, #37	; 0x25
   2a582:	f00c ff70 	bl	37466 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   2a586:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   2a588:	b15b      	cbz	r3, 2a5a2 <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a58a:	2200      	movs	r2, #0
   2a58c:	429c      	cmp	r4, r3
   2a58e:	d113      	bne.n	2a5b8 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   2a590:	6823      	ldr	r3, [r4, #0]
   2a592:	b95a      	cbnz	r2, 2a5ac <gpio_nrfx_manage_callback+0x68>
   2a594:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   2a596:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a598:	4294      	cmp	r4, r2
   2a59a:	d100      	bne.n	2a59e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   2a59c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   2a59e:	2300      	movs	r3, #0
   2a5a0:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   2a5a2:	b976      	cbnz	r6, 2a5c2 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2a5a4:	2000      	movs	r0, #0
				     callback, set);
}
   2a5a6:	bd70      	pop	{r4, r5, r6, pc}
   2a5a8:	460b      	mov	r3, r1
   2a5aa:	e7ef      	b.n	2a58c <gpio_nrfx_manage_callback+0x48>
   2a5ac:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a5ae:	68ab      	ldr	r3, [r5, #8]
   2a5b0:	429c      	cmp	r4, r3
	list->tail = node;
   2a5b2:	bf08      	it	eq
   2a5b4:	60aa      	streq	r2, [r5, #8]
}
   2a5b6:	e7f2      	b.n	2a59e <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a5b8:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a5ba:	461a      	mov	r2, r3
   2a5bc:	2900      	cmp	r1, #0
   2a5be:	d1f3      	bne.n	2a5a8 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   2a5c0:	b13e      	cbz	r6, 2a5d2 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   2a5c2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2a5c4:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2a5c6:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   2a5c8:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a5ca:	2800      	cmp	r0, #0
   2a5cc:	d1ea      	bne.n	2a5a4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   2a5ce:	60ac      	str	r4, [r5, #8]
}
   2a5d0:	e7e9      	b.n	2a5a6 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   2a5d2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2a5d6:	e7e6      	b.n	2a5a6 <gpio_nrfx_manage_callback+0x62>
   2a5d8:	0003f9b0 	.word	0x0003f9b0
   2a5dc:	0003f3be 	.word	0x0003f3be
   2a5e0:	0003c48a 	.word	0x0003c48a
   2a5e4:	0003f3eb 	.word	0x0003f3eb
   2a5e8:	0003f3fa 	.word	0x0003f3fa
   2a5ec:	0003f40c 	.word	0x0003f40c

0002a5f0 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2a5f0:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   2a5f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2a5f6:	d003      	beq.n	2a600 <nrfx_gpio_handler+0x10>
   2a5f8:	2b01      	cmp	r3, #1
   2a5fa:	d036      	beq.n	2a66a <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
   2a5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2a600:	4f1b      	ldr	r7, [pc, #108]	; (2a670 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2a602:	693b      	ldr	r3, [r7, #16]
   2a604:	685c      	ldr	r4, [r3, #4]
   2a606:	2c00      	cmp	r4, #0
   2a608:	d0f8      	beq.n	2a5fc <nrfx_gpio_handler+0xc>
   2a60a:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   2a60c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2a67c <nrfx_gpio_handler+0x8c>
   2a610:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2a680 <nrfx_gpio_handler+0x90>
   2a614:	f8df a06c 	ldr.w	sl, [pc, #108]	; 2a684 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   2a618:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
   2a61c:	2601      	movs	r6, #1
   2a61e:	2d00      	cmp	r5, #0
   2a620:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
   2a624:	bf38      	it	cc
   2a626:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   2a628:	68a3      	ldr	r3, [r4, #8]
   2a62a:	421e      	tst	r6, r3
   2a62c:	d014      	beq.n	2a658 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
   2a62e:	6863      	ldr	r3, [r4, #4]
   2a630:	b963      	cbnz	r3, 2a64c <nrfx_gpio_handler+0x5c>
   2a632:	4649      	mov	r1, r9
   2a634:	2345      	movs	r3, #69	; 0x45
   2a636:	4642      	mov	r2, r8
   2a638:	4650      	mov	r0, sl
   2a63a:	f00c fd6e 	bl	3711a <printk>
   2a63e:	480d      	ldr	r0, [pc, #52]	; (2a674 <nrfx_gpio_handler+0x84>)
   2a640:	f00c fd6b 	bl	3711a <printk>
   2a644:	2145      	movs	r1, #69	; 0x45
   2a646:	4640      	mov	r0, r8
   2a648:	f00c ff0d 	bl	37466 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   2a64c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   2a650:	4621      	mov	r1, r4
   2a652:	4032      	ands	r2, r6
   2a654:	4638      	mov	r0, r7
   2a656:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2a658:	2d00      	cmp	r5, #0
   2a65a:	d0cf      	beq.n	2a5fc <nrfx_gpio_handler+0xc>
   2a65c:	682b      	ldr	r3, [r5, #0]
   2a65e:	2b00      	cmp	r3, #0
   2a660:	bf38      	it	cc
   2a662:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a664:	462c      	mov	r4, r5
   2a666:	461d      	mov	r5, r3
   2a668:	e7de      	b.n	2a628 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2a66a:	4f03      	ldr	r7, [pc, #12]	; (2a678 <nrfx_gpio_handler+0x88>)
   2a66c:	e7c9      	b.n	2a602 <nrfx_gpio_handler+0x12>
   2a66e:	bf00      	nop
   2a670:	0003b198 	.word	0x0003b198
   2a674:	0003f40c 	.word	0x0003f40c
   2a678:	0003b1b0 	.word	0x0003b1b0
   2a67c:	0003f3be 	.word	0x0003f3be
   2a680:	0003f423 	.word	0x0003f423
   2a684:	0003c48a 	.word	0x0003c48a

0002a688 <gpio_nrfx_pin_interrupt_configure>:
{
   2a688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2a68a:	6840      	ldr	r0, [r0, #4]
   2a68c:	7b05      	ldrb	r5, [r0, #12]
   2a68e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   2a692:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2a696:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   2a69a:	f04f 0500 	mov.w	r5, #0
   2a69e:	d104      	bne.n	2a6aa <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   2a6a0:	4620      	mov	r0, r4
   2a6a2:	f003 ff61 	bl	2e568 <nrfx_gpiote_trigger_disable>
	return 0;
   2a6a6:	2000      	movs	r0, #0
   2a6a8:	e054      	b.n	2a754 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
   2a6aa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2a6ae:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   2a6b2:	d151      	bne.n	2a758 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2a6b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   2a6b8:	bf0c      	ite	eq
   2a6ba:	2304      	moveq	r3, #4
   2a6bc:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   2a6be:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   2a6c2:	6883      	ldr	r3, [r0, #8]
   2a6c4:	fa23 f101 	lsr.w	r1, r3, r1
   2a6c8:	f011 0101 	ands.w	r1, r1, #1
   2a6cc:	d155      	bne.n	2a77a <gpio_nrfx_pin_interrupt_configure+0xf2>
   2a6ce:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   2a6d2:	d152      	bne.n	2a77a <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
   2a6d4:	0966      	lsrs	r6, r4, #5
   2a6d6:	d04a      	beq.n	2a76e <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
   2a6d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a6dc:	2e01      	cmp	r6, #1
   2a6de:	bf08      	it	eq
   2a6e0:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
   2a6e2:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2a6e6:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a6e8:	07ca      	lsls	r2, r1, #31
   2a6ea:	d40b      	bmi.n	2a704 <gpio_nrfx_pin_interrupt_configure+0x7c>
   2a6ec:	492b      	ldr	r1, [pc, #172]	; (2a79c <gpio_nrfx_pin_interrupt_configure+0x114>)
   2a6ee:	482c      	ldr	r0, [pc, #176]	; (2a7a0 <gpio_nrfx_pin_interrupt_configure+0x118>)
   2a6f0:	4a2c      	ldr	r2, [pc, #176]	; (2a7a4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   2a6f2:	f240 2329 	movw	r3, #553	; 0x229
   2a6f6:	f00c fd10 	bl	3711a <printk>
   2a6fa:	482a      	ldr	r0, [pc, #168]	; (2a7a4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   2a6fc:	f240 2129 	movw	r1, #553	; 0x229
   2a700:	f00c feb1 	bl	37466 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a704:	b16e      	cbz	r6, 2a722 <gpio_nrfx_pin_interrupt_configure+0x9a>
   2a706:	2e01      	cmp	r6, #1
   2a708:	d034      	beq.n	2a774 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
   2a70a:	4927      	ldr	r1, [pc, #156]	; (2a7a8 <gpio_nrfx_pin_interrupt_configure+0x120>)
   2a70c:	4824      	ldr	r0, [pc, #144]	; (2a7a0 <gpio_nrfx_pin_interrupt_configure+0x118>)
   2a70e:	4a25      	ldr	r2, [pc, #148]	; (2a7a4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   2a710:	f240 232e 	movw	r3, #558	; 0x22e
   2a714:	f00c fd01 	bl	3711a <printk>
   2a718:	4822      	ldr	r0, [pc, #136]	; (2a7a4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   2a71a:	f240 212e 	movw	r1, #558	; 0x22e
   2a71e:	f00c fea2 	bl	37466 <assert_post_action>
        case 0: return NRF_P0;
   2a722:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2a726:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   2a72a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   2a72e:	07db      	lsls	r3, r3, #31
   2a730:	d423      	bmi.n	2a77a <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2a732:	f10d 0507 	add.w	r5, sp, #7
   2a736:	4629      	mov	r1, r5
   2a738:	4620      	mov	r0, r4
   2a73a:	f003 fe3f 	bl	2e3bc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2a73e:	4b1b      	ldr	r3, [pc, #108]	; (2a7ac <gpio_nrfx_pin_interrupt_configure+0x124>)
   2a740:	4298      	cmp	r0, r3
   2a742:	d119      	bne.n	2a778 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
   2a744:	4628      	mov	r0, r5
   2a746:	f003 fe99 	bl	2e47c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   2a74a:	4b19      	ldr	r3, [pc, #100]	; (2a7b0 <gpio_nrfx_pin_interrupt_configure+0x128>)
   2a74c:	4298      	cmp	r0, r3
   2a74e:	d013      	beq.n	2a778 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
   2a750:	f06f 000b 	mvn.w	r0, #11
}
   2a754:	b004      	add	sp, #16
   2a756:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2a758:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   2a75c:	d005      	beq.n	2a76a <gpio_nrfx_pin_interrupt_configure+0xe2>
   2a75e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   2a762:	bf0c      	ite	eq
   2a764:	2302      	moveq	r3, #2
   2a766:	2301      	movne	r3, #1
   2a768:	e7a9      	b.n	2a6be <gpio_nrfx_pin_interrupt_configure+0x36>
   2a76a:	2303      	movs	r3, #3
   2a76c:	e7a7      	b.n	2a6be <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
   2a76e:	f04f 31ff 	mov.w	r1, #4294967295
   2a772:	e7b6      	b.n	2a6e2 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a774:	4b0f      	ldr	r3, [pc, #60]	; (2a7b4 <gpio_nrfx_pin_interrupt_configure+0x12c>)
   2a776:	e7d6      	b.n	2a726 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
   2a778:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2a77a:	2300      	movs	r3, #0
   2a77c:	4619      	mov	r1, r3
   2a77e:	aa02      	add	r2, sp, #8
   2a780:	4620      	mov	r0, r4
   2a782:	f003 fcfd 	bl	2e180 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2a786:	4b0a      	ldr	r3, [pc, #40]	; (2a7b0 <gpio_nrfx_pin_interrupt_configure+0x128>)
   2a788:	4298      	cmp	r0, r3
   2a78a:	d104      	bne.n	2a796 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   2a78c:	2101      	movs	r1, #1
   2a78e:	4620      	mov	r0, r4
   2a790:	f003 fe7a 	bl	2e488 <nrfx_gpiote_trigger_enable>
   2a794:	e787      	b.n	2a6a6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   2a796:	f06f 0004 	mvn.w	r0, #4
   2a79a:	e7db      	b.n	2a754 <gpio_nrfx_pin_interrupt_configure+0xcc>
   2a79c:	0003f462 	.word	0x0003f462
   2a7a0:	0003c48a 	.word	0x0003c48a
   2a7a4:	0003f42f 	.word	0x0003f42f
   2a7a8:	00041a5a 	.word	0x00041a5a
   2a7ac:	0bad0004 	.word	0x0bad0004
   2a7b0:	0bad0000 	.word	0x0bad0000
   2a7b4:	50000300 	.word	0x50000300

0002a7b8 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   2a7b8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2a7ba:	f003 fe4f 	bl	2e45c <nrfx_gpiote_is_init>
   2a7be:	4604      	mov	r4, r0
   2a7c0:	b968      	cbnz	r0, 2a7de <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   2a7c2:	f003 fe23 	bl	2e40c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   2a7c6:	4b08      	ldr	r3, [pc, #32]	; (2a7e8 <gpio_nrfx_init+0x30>)
   2a7c8:	4298      	cmp	r0, r3
   2a7ca:	d10a      	bne.n	2a7e2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2a7cc:	4807      	ldr	r0, [pc, #28]	; (2a7ec <gpio_nrfx_init+0x34>)
   2a7ce:	4621      	mov	r1, r4
   2a7d0:	f003 fdee 	bl	2e3b0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2a7d4:	4622      	mov	r2, r4
   2a7d6:	2101      	movs	r1, #1
   2a7d8:	2006      	movs	r0, #6
   2a7da:	f7f7 fd3f 	bl	2225c <z_arm_irq_priority_set>
		return 0;
   2a7de:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   2a7e0:	bd10      	pop	{r4, pc}
		return -EIO;
   2a7e2:	f06f 0004 	mvn.w	r0, #4
   2a7e6:	e7fb      	b.n	2a7e0 <gpio_nrfx_init+0x28>
   2a7e8:	0bad0000 	.word	0x0bad0000
   2a7ec:	0002a5f1 	.word	0x0002a5f1

0002a7f0 <gpio_nrfx_pin_configure>:
{
   2a7f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2a7f4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a7f6:	7b3b      	ldrb	r3, [r7, #12]
   2a7f8:	f001 051f 	and.w	r5, r1, #31
{
   2a7fc:	b085      	sub	sp, #20
   2a7fe:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a800:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   2a804:	4614      	mov	r4, r2
   2a806:	b9ca      	cbnz	r2, 2a83c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   2a808:	a902      	add	r1, sp, #8
   2a80a:	4628      	mov	r0, r5
   2a80c:	f003 fdd6 	bl	2e3bc <nrfx_gpiote_channel_get>
   2a810:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   2a812:	4628      	mov	r0, r5
   2a814:	f003 feca 	bl	2e5ac <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   2a818:	4b48      	ldr	r3, [pc, #288]	; (2a93c <gpio_nrfx_pin_configure+0x14c>)
   2a81a:	4298      	cmp	r0, r3
   2a81c:	d004      	beq.n	2a828 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   2a81e:	f06f 0004 	mvn.w	r0, #4
}
   2a822:	b005      	add	sp, #20
   2a824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   2a828:	4284      	cmp	r4, r0
   2a82a:	d105      	bne.n	2a838 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   2a82c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   2a830:	f003 fe1e 	bl	2e470 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   2a834:	42a0      	cmp	r0, r4
   2a836:	d1f2      	bne.n	2a81e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2a838:	2000      	movs	r0, #0
   2a83a:	e7f2      	b.n	2a822 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2a83c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   2a840:	f10d 0103 	add.w	r1, sp, #3
   2a844:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   2a846:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   2a84a:	f003 fdb7 	bl	2e3bc <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2a84e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   2a850:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2a852:	aa02      	add	r2, sp, #8
   2a854:	4649      	mov	r1, r9
   2a856:	4628      	mov	r0, r5
   2a858:	f003 fc92 	bl	2e180 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2a85c:	4b37      	ldr	r3, [pc, #220]	; (2a93c <gpio_nrfx_pin_configure+0x14c>)
   2a85e:	4298      	cmp	r0, r3
   2a860:	d002      	beq.n	2a868 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2a862:	f06f 0015 	mvn.w	r0, #21
   2a866:	e7dc      	b.n	2a822 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   2a868:	4580      	cmp	r8, r0
   2a86a:	d103      	bne.n	2a874 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   2a86c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2a870:	f003 fdfe 	bl	2e470 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   2a874:	05a3      	lsls	r3, r4, #22
   2a876:	d54e      	bpl.n	2a916 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2a878:	4b31      	ldr	r3, [pc, #196]	; (2a940 <gpio_nrfx_pin_configure+0x150>)
   2a87a:	4a32      	ldr	r2, [pc, #200]	; (2a944 <gpio_nrfx_pin_configure+0x154>)
   2a87c:	4023      	ands	r3, r4
   2a87e:	4293      	cmp	r3, r2
   2a880:	d03a      	beq.n	2a8f8 <gpio_nrfx_pin_configure+0x108>
   2a882:	d80c      	bhi.n	2a89e <gpio_nrfx_pin_configure+0xae>
   2a884:	2b06      	cmp	r3, #6
   2a886:	d014      	beq.n	2a8b2 <gpio_nrfx_pin_configure+0xc2>
   2a888:	d804      	bhi.n	2a894 <gpio_nrfx_pin_configure+0xa4>
   2a88a:	b193      	cbz	r3, 2a8b2 <gpio_nrfx_pin_configure+0xc2>
   2a88c:	2b02      	cmp	r3, #2
   2a88e:	d1e8      	bne.n	2a862 <gpio_nrfx_pin_configure+0x72>
   2a890:	2304      	movs	r3, #4
   2a892:	e00e      	b.n	2a8b2 <gpio_nrfx_pin_configure+0xc2>
   2a894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2a898:	d1e3      	bne.n	2a862 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   2a89a:	2301      	movs	r3, #1
   2a89c:	e009      	b.n	2a8b2 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2a89e:	4a2a      	ldr	r2, [pc, #168]	; (2a948 <gpio_nrfx_pin_configure+0x158>)
   2a8a0:	4293      	cmp	r3, r2
   2a8a2:	d02b      	beq.n	2a8fc <gpio_nrfx_pin_configure+0x10c>
   2a8a4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   2a8a8:	d02a      	beq.n	2a900 <gpio_nrfx_pin_configure+0x110>
   2a8aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   2a8ae:	d1d8      	bne.n	2a862 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   2a8b0:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   2a8b2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   2a8b6:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   2a8ba:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   2a8be:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   2a8c0:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   2a8c4:	bf54      	ite	pl
   2a8c6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2a8ca:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2a8cc:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   2a8ce:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2a8d2:	d517      	bpl.n	2a904 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   2a8d4:	687b      	ldr	r3, [r7, #4]
   2a8d6:	2101      	movs	r1, #1
   2a8d8:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   2a8dc:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   2a8e0:	2200      	movs	r2, #0
   2a8e2:	a901      	add	r1, sp, #4
   2a8e4:	4628      	mov	r0, r5
   2a8e6:	f003 fcf3 	bl	2e2d0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2a8ea:	4b14      	ldr	r3, [pc, #80]	; (2a93c <gpio_nrfx_pin_configure+0x14c>)
   2a8ec:	4298      	cmp	r0, r3
   2a8ee:	bf14      	ite	ne
   2a8f0:	f06f 0015 	mvnne.w	r0, #21
   2a8f4:	2000      	moveq	r0, #0
   2a8f6:	e794      	b.n	2a822 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   2a8f8:	2307      	movs	r3, #7
   2a8fa:	e7da      	b.n	2a8b2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   2a8fc:	2305      	movs	r3, #5
   2a8fe:	e7d8      	b.n	2a8b2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   2a900:	2303      	movs	r3, #3
   2a902:	e7d6      	b.n	2a8b2 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   2a904:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2a906:	bf41      	itttt	mi
   2a908:	687b      	ldrmi	r3, [r7, #4]
   2a90a:	2101      	movmi	r1, #1
   2a90c:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   2a910:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   2a914:	e7e4      	b.n	2a8e0 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   2a916:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2a918:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   2a91c:	bf54      	ite	pl
   2a91e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   2a922:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2a924:	461a      	mov	r2, r3
   2a926:	a901      	add	r1, sp, #4
   2a928:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   2a92a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2a92e:	f003 fc27 	bl	2e180 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2a932:	4b02      	ldr	r3, [pc, #8]	; (2a93c <gpio_nrfx_pin_configure+0x14c>)
   2a934:	4298      	cmp	r0, r3
   2a936:	f43f af7f 	beq.w	2a838 <gpio_nrfx_pin_configure+0x48>
   2a93a:	e792      	b.n	2a862 <gpio_nrfx_pin_configure+0x72>
   2a93c:	0bad0000 	.word	0x0bad0000
   2a940:	00f00006 	.word	0x00f00006
   2a944:	00100006 	.word	0x00100006
   2a948:	00400002 	.word	0x00400002

0002a94c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   2a94c:	4b02      	ldr	r3, [pc, #8]	; (2a958 <flash_nrf_pages_layout+0xc>)
   2a94e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2a950:	2301      	movs	r3, #1
   2a952:	6013      	str	r3, [r2, #0]
}
   2a954:	4770      	bx	lr
   2a956:	bf00      	nop
   2a958:	20002ab8 	.word	0x20002ab8

0002a95c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   2a95c:	4800      	ldr	r0, [pc, #0]	; (2a960 <flash_nrf_get_parameters+0x4>)
   2a95e:	4770      	bx	lr
   2a960:	0003bd48 	.word	0x0003bd48

0002a964 <flash_nrf_read>:
{
   2a964:	b570      	push	{r4, r5, r6, lr}
   2a966:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   2a968:	4628      	mov	r0, r5
   2a96a:	4619      	mov	r1, r3
{
   2a96c:	4616      	mov	r6, r2
   2a96e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2a970:	f00e ff6e 	bl	39850 <is_regular_addr_valid>
   2a974:	b970      	cbnz	r0, 2a994 <flash_nrf_read+0x30>
   2a976:	4b0c      	ldr	r3, [pc, #48]	; (2a9a8 <flash_nrf_read+0x44>)
   2a978:	480c      	ldr	r0, [pc, #48]	; (2a9ac <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2a97a:	490d      	ldr	r1, [pc, #52]	; (2a9b0 <flash_nrf_read+0x4c>)
   2a97c:	1ac0      	subs	r0, r0, r3
   2a97e:	08c0      	lsrs	r0, r0, #3
   2a980:	0180      	lsls	r0, r0, #6
   2a982:	f040 0001 	orr.w	r0, r0, #1
   2a986:	4623      	mov	r3, r4
   2a988:	462a      	mov	r2, r5
   2a98a:	f00c fd81 	bl	37490 <log_string_sync>
		return -EINVAL;
   2a98e:	f06f 0015 	mvn.w	r0, #21
}
   2a992:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   2a994:	b134      	cbz	r4, 2a9a4 <flash_nrf_read+0x40>
   2a996:	4622      	mov	r2, r4
   2a998:	4629      	mov	r1, r5
   2a99a:	4630      	mov	r0, r6
   2a99c:	f00f fdb1 	bl	3a502 <memcpy>
	return 0;
   2a9a0:	2000      	movs	r0, #0
   2a9a2:	e7f6      	b.n	2a992 <flash_nrf_read+0x2e>
		return 0;
   2a9a4:	4620      	mov	r0, r4
   2a9a6:	e7f4      	b.n	2a992 <flash_nrf_read+0x2e>
   2a9a8:	0003b448 	.word	0x0003b448
   2a9ac:	0003b4f8 	.word	0x0003b4f8
   2a9b0:	0003f493 	.word	0x0003f493

0002a9b4 <restore_pofwarn.part.0>:
	}

	return 0;
}

static void restore_pofwarn(void)
   2a9b4:	b508      	push	{r3, lr}
    uint32_t pofcon = p_reg->POFCON;
   2a9b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   2a9ba:	2001      	movs	r0, #1
   2a9bc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   2a9c0:	f3c1 0143 	ubfx	r1, r1, #1, #4
   2a9c4:	f00e ff57 	bl	39876 <nrf_power_pofcon_set.constprop.0>
		pofcon_enabled = false;
   2a9c8:	4b01      	ldr	r3, [pc, #4]	; (2a9d0 <restore_pofwarn.part.0+0x1c>)
   2a9ca:	2200      	movs	r2, #0
   2a9cc:	701a      	strb	r2, [r3, #0]
	}
}
   2a9ce:	bd08      	pop	{r3, pc}
   2a9d0:	20003c11 	.word	0x20003c11

0002a9d4 <suspend_pofwarn.part.0>:
static int suspend_pofwarn(void)
   2a9d4:	b508      	push	{r3, lr}
   2a9d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a9da:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
	if (enabled) {
   2a9de:	f011 0001 	ands.w	r0, r1, #1
   2a9e2:	d00c      	beq.n	2a9fe <suspend_pofwarn.part.0+0x2a>
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
   2a9e4:	2000      	movs	r0, #0
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   2a9e6:	f3c1 0143 	ubfx	r1, r1, #1, #4
   2a9ea:	f00e ff44 	bl	39876 <nrf_power_pofcon_set.constprop.0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a9ee:	4b06      	ldr	r3, [pc, #24]	; (2aa08 <suspend_pofwarn.part.0+0x34>)
   2a9f0:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   2a9f2:	b128      	cbz	r0, 2aa00 <suspend_pofwarn.part.0+0x2c>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   2a9f4:	2001      	movs	r0, #1
   2a9f6:	f00e ff3e 	bl	39876 <nrf_power_pofcon_set.constprop.0>
			return -ECANCELED;
   2a9fa:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   2a9fe:	bd08      	pop	{r3, pc}
		pofcon_enabled = enabled;
   2aa00:	4b02      	ldr	r3, [pc, #8]	; (2aa0c <suspend_pofwarn.part.0+0x38>)
   2aa02:	2201      	movs	r2, #1
   2aa04:	701a      	strb	r2, [r3, #0]
   2aa06:	e7fa      	b.n	2a9fe <suspend_pofwarn.part.0+0x2a>
   2aa08:	40000108 	.word	0x40000108
   2aa0c:	20003c11 	.word	0x20003c11

0002aa10 <erase_op>:
{
   2aa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa14:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2aa16:	f00f fb51 	bl	3a0bc <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   2aa1a:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2aa1c:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   2aa1e:	b10b      	cbz	r3, 2aa24 <erase_op+0x14>
		nrf_flash_sync_get_timestamp_begin();
   2aa20:	f00f fa0a 	bl	39e38 <nrf_flash_sync_get_timestamp_begin>
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2aa24:	4f16      	ldr	r7, [pc, #88]	; (2aa80 <erase_op+0x70>)
	if (pofcon_enabled) {
   2aa26:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2aa84 <erase_op+0x74>
{
   2aa2a:	2600      	movs	r6, #0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2aa2c:	683b      	ldr	r3, [r7, #0]
   2aa2e:	2b08      	cmp	r3, #8
   2aa30:	d019      	beq.n	2aa66 <erase_op+0x56>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2aa32:	6860      	ldr	r0, [r4, #4]
   2aa34:	f003 feb8 	bl	2e7a8 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   2aa38:	68a3      	ldr	r3, [r4, #8]
   2aa3a:	1b5b      	subs	r3, r3, r5
   2aa3c:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2aa3e:	6863      	ldr	r3, [r4, #4]
   2aa40:	442b      	add	r3, r5
   2aa42:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   2aa44:	f898 3000 	ldrb.w	r3, [r8]
   2aa48:	b10b      	cbz	r3, 2aa4e <erase_op+0x3e>
   2aa4a:	f7ff ffb3 	bl	2a9b4 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   2aa4e:	7b23      	ldrb	r3, [r4, #12]
		i++;
   2aa50:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   2aa52:	b97b      	cbnz	r3, 2aa74 <erase_op+0x64>
	} while (e_ctx->len > 0);
   2aa54:	68a3      	ldr	r3, [r4, #8]
   2aa56:	2b00      	cmp	r3, #0
   2aa58:	d1e8      	bne.n	2aa2c <erase_op+0x1c>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2aa5a:	68a0      	ldr	r0, [r4, #8]
   2aa5c:	3800      	subs	r0, #0
   2aa5e:	bf18      	it	ne
   2aa60:	2001      	movne	r0, #1
}
   2aa62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
   2aa66:	f7ff ffb5 	bl	2a9d4 <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   2aa6a:	2800      	cmp	r0, #0
   2aa6c:	d0e1      	beq.n	2aa32 <erase_op+0x22>
			return -ECANCELED;
   2aa6e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2aa72:	e7f6      	b.n	2aa62 <erase_op+0x52>
			if (nrf_flash_sync_check_time_limit(i)) {
   2aa74:	4630      	mov	r0, r6
   2aa76:	f003 f895 	bl	2dba4 <nrf_flash_sync_check_time_limit>
   2aa7a:	2800      	cmp	r0, #0
   2aa7c:	d0ea      	beq.n	2aa54 <erase_op+0x44>
   2aa7e:	e7ec      	b.n	2aa5a <erase_op+0x4a>
   2aa80:	10000130 	.word	0x10000130
   2aa84:	20003c11 	.word	0x20003c11

0002aa88 <flash_nrf_erase>:
{
   2aa88:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aa8a:	b087      	sub	sp, #28
   2aa8c:	460e      	mov	r6, r1
   2aa8e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2aa90:	f00f fb14 	bl	3a0bc <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   2aa94:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2aa96:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   2aa98:	4630      	mov	r0, r6
   2aa9a:	f00e fed9 	bl	39850 <is_regular_addr_valid>
   2aa9e:	b388      	cbz	r0, 2ab04 <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2aaa0:	fbb6 f3f7 	udiv	r3, r6, r7
   2aaa4:	fb07 6313 	mls	r3, r7, r3, r6
   2aaa8:	b923      	cbnz	r3, 2aab4 <flash_nrf_erase+0x2c>
   2aaaa:	fbb5 f4f7 	udiv	r4, r5, r7
   2aaae:	fb07 5414 	mls	r4, r7, r4, r5
   2aab2:	b184      	cbz	r4, 2aad6 <flash_nrf_erase+0x4e>
   2aab4:	4b24      	ldr	r3, [pc, #144]	; (2ab48 <flash_nrf_erase+0xc0>)
   2aab6:	4825      	ldr	r0, [pc, #148]	; (2ab4c <flash_nrf_erase+0xc4>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   2aab8:	4925      	ldr	r1, [pc, #148]	; (2ab50 <flash_nrf_erase+0xc8>)
   2aaba:	1ac0      	subs	r0, r0, r3
   2aabc:	08c0      	lsrs	r0, r0, #3
   2aabe:	0180      	lsls	r0, r0, #6
   2aac0:	462b      	mov	r3, r5
   2aac2:	4632      	mov	r2, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2aac4:	f040 0001 	orr.w	r0, r0, #1
   2aac8:	f00c fce2 	bl	37490 <log_string_sync>
		return -EINVAL;
   2aacc:	f06f 0415 	mvn.w	r4, #21
}
   2aad0:	4620      	mov	r0, r4
   2aad2:	b007      	add	sp, #28
   2aad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   2aad6:	42bd      	cmp	r5, r7
   2aad8:	d3fa      	bcc.n	2aad0 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   2aada:	f04f 33ff 	mov.w	r3, #4294967295
   2aade:	f04f 32ff 	mov.w	r2, #4294967295
   2aae2:	481c      	ldr	r0, [pc, #112]	; (2ab54 <flash_nrf_erase+0xcc>)
   2aae4:	f005 fa30 	bl	2ff48 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   2aae8:	f00f f9a4 	bl	39e34 <nrf_flash_sync_is_required>
   2aaec:	ab02      	add	r3, sp, #8
   2aaee:	4601      	mov	r1, r0
   2aaf0:	b988      	cbnz	r0, 2ab16 <flash_nrf_erase+0x8e>
	struct flash_context context = {
   2aaf2:	2210      	movs	r2, #16
   2aaf4:	4618      	mov	r0, r3
   2aaf6:	f00f fd3f 	bl	3a578 <memset>
   2aafa:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   2aafe:	f7ff ff87 	bl	2aa10 <erase_op>
   2ab02:	e01b      	b.n	2ab3c <flash_nrf_erase+0xb4>
   2ab04:	4b10      	ldr	r3, [pc, #64]	; (2ab48 <flash_nrf_erase+0xc0>)
   2ab06:	4811      	ldr	r0, [pc, #68]	; (2ab4c <flash_nrf_erase+0xc4>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2ab08:	4913      	ldr	r1, [pc, #76]	; (2ab58 <flash_nrf_erase+0xd0>)
   2ab0a:	1ac0      	subs	r0, r0, r3
   2ab0c:	08c0      	lsrs	r0, r0, #3
   2ab0e:	0180      	lsls	r0, r0, #6
   2ab10:	462b      	mov	r3, r5
   2ab12:	4632      	mov	r2, r6
   2ab14:	e7d6      	b.n	2aac4 <flash_nrf_erase+0x3c>
	struct flash_context context = {
   2ab16:	2210      	movs	r2, #16
   2ab18:	4621      	mov	r1, r4
   2ab1a:	4618      	mov	r0, r3
   2ab1c:	f00f fd2c 	bl	3a578 <memset>
   2ab20:	2201      	movs	r2, #1
   2ab22:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   2ab26:	4a0d      	ldr	r2, [pc, #52]	; (2ab5c <flash_nrf_erase+0xd4>)
   2ab28:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   2ab2c:	480c      	ldr	r0, [pc, #48]	; (2ab60 <flash_nrf_erase+0xd8>)
	struct flash_context context = {
   2ab2e:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   2ab32:	f002 ff5b 	bl	2d9ec <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2ab36:	4668      	mov	r0, sp
   2ab38:	f002 ff5e 	bl	2d9f8 <nrf_flash_sync_exe>
	return	erase_op(&context);
   2ab3c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   2ab3e:	4805      	ldr	r0, [pc, #20]	; (2ab54 <flash_nrf_erase+0xcc>)
   2ab40:	f005 f9be 	bl	2fec0 <z_impl_k_sem_give>
}
   2ab44:	e7c4      	b.n	2aad0 <flash_nrf_erase+0x48>
   2ab46:	bf00      	nop
   2ab48:	0003b448 	.word	0x0003b448
   2ab4c:	0003b4f8 	.word	0x0003b4f8
   2ab50:	0003f4b0 	.word	0x0003f4b0
   2ab54:	20002ac0 	.word	0x20002ac0
   2ab58:	0003f493 	.word	0x0003f493
   2ab5c:	0002aa11 	.word	0x0002aa11
   2ab60:	00015e64 	.word	0x00015e64

0002ab64 <nrf_flash_init>:
{
   2ab64:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2ab66:	2201      	movs	r2, #1
   2ab68:	4611      	mov	r1, r2
   2ab6a:	4807      	ldr	r0, [pc, #28]	; (2ab88 <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2ab6c:	4c07      	ldr	r4, [pc, #28]	; (2ab8c <nrf_flash_init+0x28>)
   2ab6e:	f00f fb80 	bl	3a272 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   2ab72:	f002 ff33 	bl	2d9dc <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2ab76:	f00f faa5 	bl	3a0c4 <nrfx_nvmc_flash_page_count_get>
   2ab7a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2ab7c:	f00f fa9e 	bl	3a0bc <nrfx_nvmc_flash_page_size_get>
   2ab80:	6060      	str	r0, [r4, #4]
}
   2ab82:	2000      	movs	r0, #0
   2ab84:	bd10      	pop	{r4, pc}
   2ab86:	bf00      	nop
   2ab88:	20002ac0 	.word	0x20002ac0
   2ab8c:	20002ab8 	.word	0x20002ab8

0002ab90 <write_op>:
{
   2ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (w_ctx->enable_time_limit) {
   2ab92:	7b03      	ldrb	r3, [r0, #12]
{
   2ab94:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   2ab96:	b10b      	cbz	r3, 2ab9c <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   2ab98:	f00f f94e 	bl	39e38 <nrf_flash_sync_get_timestamp_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ab9c:	4e1c      	ldr	r6, [pc, #112]	; (2ac10 <write_op+0x80>)
	if (pofcon_enabled) {
   2ab9e:	4f1d      	ldr	r7, [pc, #116]	; (2ac14 <write_op+0x84>)
{
   2aba0:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   2aba2:	68a3      	ldr	r3, [r4, #8]
   2aba4:	2b03      	cmp	r3, #3
   2aba6:	d806      	bhi.n	2abb6 <write_op+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2aba8:	4a1b      	ldr	r2, [pc, #108]	; (2ac18 <write_op+0x88>)
   2abaa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2abae:	07db      	lsls	r3, r3, #31
   2abb0:	d5fb      	bpl.n	2abaa <write_op+0x1a>
	return FLASH_OP_DONE;
   2abb2:	2000      	movs	r0, #0
}
   2abb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (var1 == 0x08)
   2abb6:	6833      	ldr	r3, [r6, #0]
   2abb8:	2b08      	cmp	r3, #8
   2abba:	d021      	beq.n	2ac00 <write_op+0x70>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   2abbc:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   2abbe:	6860      	ldr	r0, [r4, #4]
   2abc0:	6819      	ldr	r1, [r3, #0]
   2abc2:	f003 fe29 	bl	2e818 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   2abc6:	783b      	ldrb	r3, [r7, #0]
   2abc8:	b10b      	cbz	r3, 2abce <write_op+0x3e>
   2abca:	f7ff fef3 	bl	2a9b4 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   2abce:	6863      	ldr	r3, [r4, #4]
   2abd0:	3304      	adds	r3, #4
   2abd2:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   2abd4:	6823      	ldr	r3, [r4, #0]
   2abd6:	3304      	adds	r3, #4
   2abd8:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   2abda:	68a3      	ldr	r3, [r4, #8]
   2abdc:	3b04      	subs	r3, #4
   2abde:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   2abe0:	7b23      	ldrb	r3, [r4, #12]
		i++;
   2abe2:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   2abe4:	2b00      	cmp	r3, #0
   2abe6:	d0dc      	beq.n	2aba2 <write_op+0x12>
			if (nrf_flash_sync_check_time_limit(i)) {
   2abe8:	4628      	mov	r0, r5
   2abea:	f002 ffdb 	bl	2dba4 <nrf_flash_sync_check_time_limit>
   2abee:	2800      	cmp	r0, #0
   2abf0:	d0d7      	beq.n	2aba2 <write_op+0x12>
   2abf2:	4a09      	ldr	r2, [pc, #36]	; (2ac18 <write_op+0x88>)
   2abf4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2abf8:	07d9      	lsls	r1, r3, #31
   2abfa:	d5fb      	bpl.n	2abf4 <write_op+0x64>
				return FLASH_OP_ONGOING;
   2abfc:	2001      	movs	r0, #1
   2abfe:	e7d9      	b.n	2abb4 <write_op+0x24>
                switch(var2)
   2ac00:	f7ff fee8 	bl	2a9d4 <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   2ac04:	2800      	cmp	r0, #0
   2ac06:	d0d9      	beq.n	2abbc <write_op+0x2c>
			return -ECANCELED;
   2ac08:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2ac0c:	e7d2      	b.n	2abb4 <write_op+0x24>
   2ac0e:	bf00      	nop
   2ac10:	10000130 	.word	0x10000130
   2ac14:	20003c11 	.word	0x20003c11
   2ac18:	4001e000 	.word	0x4001e000

0002ac1c <flash_nrf_write>:
{
   2ac1c:	b570      	push	{r4, r5, r6, lr}
   2ac1e:	460d      	mov	r5, r1
   2ac20:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   2ac22:	4619      	mov	r1, r3
   2ac24:	4628      	mov	r0, r5
{
   2ac26:	4616      	mov	r6, r2
   2ac28:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2ac2a:	f00e fe11 	bl	39850 <is_regular_addr_valid>
   2ac2e:	b980      	cbnz	r0, 2ac52 <flash_nrf_write+0x36>
   2ac30:	4b22      	ldr	r3, [pc, #136]	; (2acbc <flash_nrf_write+0xa0>)
   2ac32:	4823      	ldr	r0, [pc, #140]	; (2acc0 <flash_nrf_write+0xa4>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2ac34:	4923      	ldr	r1, [pc, #140]	; (2acc4 <flash_nrf_write+0xa8>)
   2ac36:	1ac0      	subs	r0, r0, r3
   2ac38:	08c0      	lsrs	r0, r0, #3
   2ac3a:	0180      	lsls	r0, r0, #6
   2ac3c:	4623      	mov	r3, r4
   2ac3e:	462a      	mov	r2, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2ac40:	f040 0001 	orr.w	r0, r0, #1
   2ac44:	f00c fc24 	bl	37490 <log_string_sync>
		return -EINVAL;
   2ac48:	f06f 0415 	mvn.w	r4, #21
}
   2ac4c:	4620      	mov	r0, r4
   2ac4e:	b006      	add	sp, #24
   2ac50:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   2ac52:	ea45 0304 	orr.w	r3, r5, r4
   2ac56:	079b      	lsls	r3, r3, #30
   2ac58:	d008      	beq.n	2ac6c <flash_nrf_write+0x50>
   2ac5a:	4b18      	ldr	r3, [pc, #96]	; (2acbc <flash_nrf_write+0xa0>)
   2ac5c:	4818      	ldr	r0, [pc, #96]	; (2acc0 <flash_nrf_write+0xa4>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2ac5e:	491a      	ldr	r1, [pc, #104]	; (2acc8 <flash_nrf_write+0xac>)
   2ac60:	1ac0      	subs	r0, r0, r3
   2ac62:	08c0      	lsrs	r0, r0, #3
   2ac64:	0180      	lsls	r0, r0, #6
   2ac66:	4623      	mov	r3, r4
   2ac68:	462a      	mov	r2, r5
   2ac6a:	e7e9      	b.n	2ac40 <flash_nrf_write+0x24>
	if (!len) {
   2ac6c:	2c00      	cmp	r4, #0
   2ac6e:	d0ed      	beq.n	2ac4c <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   2ac70:	f04f 33ff 	mov.w	r3, #4294967295
   2ac74:	f04f 32ff 	mov.w	r2, #4294967295
   2ac78:	4814      	ldr	r0, [pc, #80]	; (2accc <flash_nrf_write+0xb0>)
   2ac7a:	f005 f965 	bl	2ff48 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   2ac7e:	f00f f8d9 	bl	39e34 <nrf_flash_sync_is_required>
   2ac82:	4603      	mov	r3, r0
	struct flash_context context = {
   2ac84:	e9cd 6502 	strd	r6, r5, [sp, #8]
   2ac88:	a802      	add	r0, sp, #8
   2ac8a:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   2ac8c:	b18b      	cbz	r3, 2acb2 <flash_nrf_write+0x96>
	struct flash_context context = {
   2ac8e:	2301      	movs	r3, #1
   2ac90:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   2ac94:	4b0e      	ldr	r3, [pc, #56]	; (2acd0 <flash_nrf_write+0xb4>)
   2ac96:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   2ac9a:	f641 504c 	movw	r0, #7500	; 0x1d4c
   2ac9e:	f002 fea5 	bl	2d9ec <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2aca2:	4668      	mov	r0, sp
   2aca4:	f002 fea8 	bl	2d9f8 <nrf_flash_sync_exe>
	return write_op(&context);
   2aca8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   2acaa:	4808      	ldr	r0, [pc, #32]	; (2accc <flash_nrf_write+0xb0>)
   2acac:	f005 f908 	bl	2fec0 <z_impl_k_sem_give>
}
   2acb0:	e7cc      	b.n	2ac4c <flash_nrf_write+0x30>
	struct flash_context context = {
   2acb2:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   2acb6:	f7ff ff6b 	bl	2ab90 <write_op>
   2acba:	e7f5      	b.n	2aca8 <flash_nrf_write+0x8c>
   2acbc:	0003b448 	.word	0x0003b448
   2acc0:	0003b4f8 	.word	0x0003b4f8
   2acc4:	0003f493 	.word	0x0003f493
   2acc8:	0003f4cf 	.word	0x0003f4cf
   2accc:	20002ac0 	.word	0x20002ac0
   2acd0:	0002ab91 	.word	0x0002ab91

0002acd4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   2acd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2acd6:	794b      	ldrb	r3, [r1, #5]
   2acd8:	2b01      	cmp	r3, #1
   2acda:	d026      	beq.n	2ad2a <uarte_nrfx_configure+0x56>
   2acdc:	2b03      	cmp	r3, #3
   2acde:	d121      	bne.n	2ad24 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2ace0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2ace2:	798b      	ldrb	r3, [r1, #6]
   2ace4:	2b03      	cmp	r3, #3
   2ace6:	d11d      	bne.n	2ad24 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   2ace8:	79cc      	ldrb	r4, [r1, #7]
   2acea:	b10c      	cbz	r4, 2acf0 <uarte_nrfx_configure+0x1c>
   2acec:	2c01      	cmp	r4, #1
   2acee:	d119      	bne.n	2ad24 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   2acf0:	790a      	ldrb	r2, [r1, #4]
   2acf2:	b112      	cbz	r2, 2acfa <uarte_nrfx_configure+0x26>
   2acf4:	2a02      	cmp	r2, #2
   2acf6:	d115      	bne.n	2ad24 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2acf8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2acfa:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   2acfc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   2acfe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2ad02:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2ad04:	d065      	beq.n	2add2 <uarte_nrfx_configure+0xfe>
   2ad06:	d82d      	bhi.n	2ad64 <uarte_nrfx_configure+0x90>
   2ad08:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   2ad0c:	d064      	beq.n	2add8 <uarte_nrfx_configure+0x104>
   2ad0e:	d816      	bhi.n	2ad3e <uarte_nrfx_configure+0x6a>
   2ad10:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2ad14:	d062      	beq.n	2addc <uarte_nrfx_configure+0x108>
   2ad16:	d80a      	bhi.n	2ad2e <uarte_nrfx_configure+0x5a>
   2ad18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2ad1c:	d061      	beq.n	2ade2 <uarte_nrfx_configure+0x10e>
   2ad1e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2ad22:	d061      	beq.n	2ade8 <uarte_nrfx_configure+0x114>
   2ad24:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ad28:	e052      	b.n	2add0 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   2ad2a:	2600      	movs	r6, #0
   2ad2c:	e7d9      	b.n	2ace2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   2ad2e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2ad32:	d05c      	beq.n	2adee <uarte_nrfx_configure+0x11a>
   2ad34:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2ad38:	d1f4      	bne.n	2ad24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2ad3a:	4b37      	ldr	r3, [pc, #220]	; (2ae18 <uarte_nrfx_configure+0x144>)
   2ad3c:	e03c      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2ad3e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2ad42:	d057      	beq.n	2adf4 <uarte_nrfx_configure+0x120>
   2ad44:	d807      	bhi.n	2ad56 <uarte_nrfx_configure+0x82>
   2ad46:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2ad4a:	d055      	beq.n	2adf8 <uarte_nrfx_configure+0x124>
   2ad4c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   2ad50:	d1e8      	bne.n	2ad24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2ad52:	4b32      	ldr	r3, [pc, #200]	; (2ae1c <uarte_nrfx_configure+0x148>)
   2ad54:	e030      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2ad56:	f647 2712 	movw	r7, #31250	; 0x7a12
   2ad5a:	42bb      	cmp	r3, r7
   2ad5c:	d1e2      	bne.n	2ad24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   2ad5e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2ad62:	e029      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2ad64:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2ad68:	d048      	beq.n	2adfc <uarte_nrfx_configure+0x128>
   2ad6a:	d813      	bhi.n	2ad94 <uarte_nrfx_configure+0xc0>
   2ad6c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   2ad70:	d047      	beq.n	2ae02 <uarte_nrfx_configure+0x12e>
   2ad72:	d809      	bhi.n	2ad88 <uarte_nrfx_configure+0xb4>
   2ad74:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   2ad78:	42bb      	cmp	r3, r7
   2ad7a:	d044      	beq.n	2ae06 <uarte_nrfx_configure+0x132>
   2ad7c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   2ad80:	d1d0      	bne.n	2ad24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2ad82:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2ad86:	e017      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2ad88:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2ad8c:	d1ca      	bne.n	2ad24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2ad8e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2ad92:	e011      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2ad94:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   2ad98:	d038      	beq.n	2ae0c <uarte_nrfx_configure+0x138>
   2ad9a:	d808      	bhi.n	2adae <uarte_nrfx_configure+0xda>
   2ad9c:	4f20      	ldr	r7, [pc, #128]	; (2ae20 <uarte_nrfx_configure+0x14c>)
   2ad9e:	42bb      	cmp	r3, r7
   2ada0:	d037      	beq.n	2ae12 <uarte_nrfx_configure+0x13e>
   2ada2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2ada6:	d1bd      	bne.n	2ad24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2ada8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2adac:	e004      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2adae:	4f1d      	ldr	r7, [pc, #116]	; (2ae24 <uarte_nrfx_configure+0x150>)
   2adb0:	42bb      	cmp	r3, r7
   2adb2:	d1b7      	bne.n	2ad24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2adb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2adb8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   2adbc:	6903      	ldr	r3, [r0, #16]
   2adbe:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   2adc0:	4334      	orrs	r4, r6
   2adc2:	4322      	orrs	r2, r4
   2adc4:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2adc6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   2adca:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   2adce:	2000      	movs	r0, #0
}
   2add0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2add2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2add6:	e7ef      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   2add8:	4b13      	ldr	r3, [pc, #76]	; (2ae28 <uarte_nrfx_configure+0x154>)
   2adda:	e7ed      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2addc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2ade0:	e7ea      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   2ade2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2ade6:	e7e7      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2ade8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2adec:	e7e4      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2adee:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2adf2:	e7e1      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2adf4:	4b0d      	ldr	r3, [pc, #52]	; (2ae2c <uarte_nrfx_configure+0x158>)
   2adf6:	e7df      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2adf8:	4b0d      	ldr	r3, [pc, #52]	; (2ae30 <uarte_nrfx_configure+0x15c>)
   2adfa:	e7dd      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2adfc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2ae00:	e7da      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2ae02:	4b0c      	ldr	r3, [pc, #48]	; (2ae34 <uarte_nrfx_configure+0x160>)
   2ae04:	e7d8      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2ae06:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2ae0a:	e7d5      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2ae0c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2ae10:	e7d2      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2ae12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2ae16:	e7cf      	b.n	2adb8 <uarte_nrfx_configure+0xe4>
   2ae18:	0013b000 	.word	0x0013b000
   2ae1c:	004ea000 	.word	0x004ea000
   2ae20:	0003d090 	.word	0x0003d090
   2ae24:	000f4240 	.word	0x000f4240
   2ae28:	00275000 	.word	0x00275000
   2ae2c:	0075c000 	.word	0x0075c000
   2ae30:	003af000 	.word	0x003af000
   2ae34:	013a9000 	.word	0x013a9000

0002ae38 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2ae38:	6802      	ldr	r2, [r0, #0]
    switch (port)
   2ae3a:	0953      	lsrs	r3, r2, #5
{
   2ae3c:	b510      	push	{r4, lr}
   2ae3e:	4604      	mov	r4, r0
    switch (port)
   2ae40:	d02c      	beq.n	2ae9c <nrf_gpio_pin_port_decode+0x64>
   2ae42:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   2ae44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ae48:	bf18      	it	ne
   2ae4a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2ae4c:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2ae50:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2ae52:	07db      	lsls	r3, r3, #31
   2ae54:	d40b      	bmi.n	2ae6e <nrf_gpio_pin_port_decode+0x36>
   2ae56:	4914      	ldr	r1, [pc, #80]	; (2aea8 <nrf_gpio_pin_port_decode+0x70>)
   2ae58:	4814      	ldr	r0, [pc, #80]	; (2aeac <nrf_gpio_pin_port_decode+0x74>)
   2ae5a:	4a15      	ldr	r2, [pc, #84]	; (2aeb0 <nrf_gpio_pin_port_decode+0x78>)
   2ae5c:	f240 2329 	movw	r3, #553	; 0x229
   2ae60:	f00c f95b 	bl	3711a <printk>
   2ae64:	4812      	ldr	r0, [pc, #72]	; (2aeb0 <nrf_gpio_pin_port_decode+0x78>)
   2ae66:	f240 2129 	movw	r1, #553	; 0x229
   2ae6a:	f00c fafc 	bl	37466 <assert_post_action>
    uint32_t pin_number = *p_pin;
   2ae6e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2ae70:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ae74:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2ae76:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ae78:	d00d      	beq.n	2ae96 <nrf_gpio_pin_port_decode+0x5e>
   2ae7a:	2b01      	cmp	r3, #1
   2ae7c:	d011      	beq.n	2aea2 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
   2ae7e:	490d      	ldr	r1, [pc, #52]	; (2aeb4 <nrf_gpio_pin_port_decode+0x7c>)
   2ae80:	480a      	ldr	r0, [pc, #40]	; (2aeac <nrf_gpio_pin_port_decode+0x74>)
   2ae82:	4a0b      	ldr	r2, [pc, #44]	; (2aeb0 <nrf_gpio_pin_port_decode+0x78>)
   2ae84:	f240 232e 	movw	r3, #558	; 0x22e
   2ae88:	f00c f947 	bl	3711a <printk>
   2ae8c:	4808      	ldr	r0, [pc, #32]	; (2aeb0 <nrf_gpio_pin_port_decode+0x78>)
   2ae8e:	f240 212e 	movw	r1, #558	; 0x22e
   2ae92:	f00c fae8 	bl	37466 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ae96:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   2ae9a:	bd10      	pop	{r4, pc}
    switch (port)
   2ae9c:	f04f 33ff 	mov.w	r3, #4294967295
   2aea0:	e7d4      	b.n	2ae4c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   2aea2:	4805      	ldr	r0, [pc, #20]	; (2aeb8 <nrf_gpio_pin_port_decode+0x80>)
   2aea4:	e7f9      	b.n	2ae9a <nrf_gpio_pin_port_decode+0x62>
   2aea6:	bf00      	nop
   2aea8:	0003f462 	.word	0x0003f462
   2aeac:	0003c48a 	.word	0x0003c48a
   2aeb0:	0003f42f 	.word	0x0003f42f
   2aeb4:	00041a5a 	.word	0x00041a5a
   2aeb8:	50000300 	.word	0x50000300

0002aebc <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   2aebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2aec0:	4614      	mov	r4, r2
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   2aec2:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2aec4:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
   2aec8:	6817      	ldr	r7, [r2, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
   2aeca:	7a12      	ldrb	r2, [r2, #8]
{
   2aecc:	4605      	mov	r5, r0
   2aece:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   2aed0:	b192      	cbz	r2, 2aef8 <uarte_nrfx_rx_enable+0x3c>
		__ASSERT(false, "TX only UARTE instance");
   2aed2:	4a3f      	ldr	r2, [pc, #252]	; (2afd0 <uarte_nrfx_rx_enable+0x114>)
   2aed4:	493f      	ldr	r1, [pc, #252]	; (2afd4 <uarte_nrfx_rx_enable+0x118>)
   2aed6:	4840      	ldr	r0, [pc, #256]	; (2afd8 <uarte_nrfx_rx_enable+0x11c>)
   2aed8:	f240 337f 	movw	r3, #895	; 0x37f
   2aedc:	f00c f91d 	bl	3711a <printk>
   2aee0:	483e      	ldr	r0, [pc, #248]	; (2afdc <uarte_nrfx_rx_enable+0x120>)
   2aee2:	f00c f91a 	bl	3711a <printk>
   2aee6:	483a      	ldr	r0, [pc, #232]	; (2afd0 <uarte_nrfx_rx_enable+0x114>)
   2aee8:	f240 317f 	movw	r1, #895	; 0x37f
   2aeec:	f00c fabb 	bl	37466 <assert_post_action>
		return -ENOTSUP;
   2aef0:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   2aef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (data->async->rx_enabled) {
   2aef8:	f8d9 100c 	ldr.w	r1, [r9, #12]
   2aefc:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
   2af00:	2a00      	cmp	r2, #0
   2af02:	d161      	bne.n	2afc8 <uarte_nrfx_rx_enable+0x10c>
		MAX(timeout / RX_TIMEOUT_DIV,
   2af04:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   2af08:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
   2af0a:	bfd2      	itee	le
   2af0c:	235c      	movle	r3, #92	; 0x5c
   2af0e:	2205      	movgt	r2, #5
   2af10:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   2af14:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
   2af18:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   2af1a:	e9c1 8418 	strd	r8, r4, [r1, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   2af1e:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
   2af22:	670b      	str	r3, [r1, #112]	; 0x70
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2af24:	6843      	ldr	r3, [r0, #4]
   2af26:	685b      	ldr	r3, [r3, #4]
   2af28:	06da      	lsls	r2, r3, #27
   2af2a:	d524      	bpl.n	2af76 <uarte_nrfx_rx_enable+0xba>
		if (data->async->rx_flush_cnt) {
   2af2c:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
   2af30:	b30e      	cbz	r6, 2af76 <uarte_nrfx_rx_enable+0xba>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   2af32:	42a6      	cmp	r6, r4
   2af34:	bf28      	it	cs
   2af36:	4626      	movcs	r6, r4
   2af38:	4640      	mov	r0, r8
   2af3a:	4632      	mov	r2, r6
   2af3c:	31cc      	adds	r1, #204	; 0xcc
   2af3e:	f00f fae0 	bl	3a502 <memcpy>
			if (!len) {
   2af42:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
   2af44:	44b0      	add	r8, r6
			if (!len) {
   2af46:	d116      	bne.n	2af76 <uarte_nrfx_rx_enable+0xba>
				data->async->rx_flush_cnt -= cpy_len;
   2af48:	f8d9 200c 	ldr.w	r2, [r9, #12]
   2af4c:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
   2af50:	1b9b      	subs	r3, r3, r6
   2af52:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
   2af56:	4631      	mov	r1, r6
   2af58:	4628      	mov	r0, r5
   2af5a:	f00e fd25 	bl	399a8 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   2af5e:	f8d9 100c 	ldr.w	r1, [r9, #12]
   2af62:	4628      	mov	r0, r5
   2af64:	2201      	movs	r2, #1
   2af66:	3160      	adds	r1, #96	; 0x60
   2af68:	f00e fd37 	bl	399da <notify_rx_buf_release>
				notify_rx_disable(dev);
   2af6c:	4628      	mov	r0, r5
   2af6e:	f00e fd4e 	bl	39a0e <notify_rx_disable>
	return 0;
   2af72:	2000      	movs	r0, #0
   2af74:	e7be      	b.n	2aef4 <uarte_nrfx_rx_enable+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2af76:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2af78:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2af7c:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2af80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   2af84:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   2af88:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   2af8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
   2af90:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2af94:	2201      	movs	r2, #1
   2af96:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2af9a:	686b      	ldr	r3, [r5, #4]
   2af9c:	685b      	ldr	r3, [r3, #4]
   2af9e:	06db      	lsls	r3, r3, #27
   2afa0:	d50f      	bpl.n	2afc2 <uarte_nrfx_rx_enable+0x106>
	__asm__ volatile(
   2afa2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2afa6:	f3ef 8411 	mrs	r4, BASEPRI
   2afaa:	f383 8812 	msr	BASEPRI_MAX, r3
   2afae:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
   2afb2:	2102      	movs	r1, #2
   2afb4:	4628      	mov	r0, r5
   2afb6:	f00e fd85 	bl	39ac4 <uarte_enable>
	__asm__ volatile(
   2afba:	f384 8811 	msr	BASEPRI, r4
   2afbe:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2afc2:	2301      	movs	r3, #1
   2afc4:	603b      	str	r3, [r7, #0]
   2afc6:	e7d4      	b.n	2af72 <uarte_nrfx_rx_enable+0xb6>
		return -EBUSY;
   2afc8:	f06f 000f 	mvn.w	r0, #15
   2afcc:	e792      	b.n	2aef4 <uarte_nrfx_rx_enable+0x38>
   2afce:	bf00      	nop
   2afd0:	0003f4f7 	.word	0x0003f4f7
   2afd4:	00041a5a 	.word	0x00041a5a
   2afd8:	0003c48a 	.word	0x0003c48a
   2afdc:	0003f52b 	.word	0x0003f52b

0002afe0 <uarte_nrfx_tx>:
{
   2afe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2afe2:	461c      	mov	r4, r3
	return config->uarte_regs;
   2afe4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2afe6:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   2afe8:	f8d3 c000 	ldr.w	ip, [r3]
{
   2afec:	4605      	mov	r5, r0
	__asm__ volatile(
   2afee:	f04f 0340 	mov.w	r3, #64	; 0x40
   2aff2:	f3ef 8711 	mrs	r7, BASEPRI
   2aff6:	f383 8812 	msr	BASEPRI_MAX, r3
   2affa:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   2affe:	68f0      	ldr	r0, [r6, #12]
   2b000:	68c3      	ldr	r3, [r0, #12]
   2b002:	b13b      	cbz	r3, 2b014 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   2b004:	f387 8811 	msr	BASEPRI, r7
   2b008:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   2b00c:	f06f 000f 	mvn.w	r0, #15
}
   2b010:	b003      	add	sp, #12
   2b012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENSET = mask;
   2b014:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
	data->async->tx_size = len;
   2b018:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
   2b01a:	6081      	str	r1, [r0, #8]
   2b01c:	f8cc e304 	str.w	lr, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2b020:	f001 4c60 	and.w	ip, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   2b024:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
   2b028:	d128      	bne.n	2b07c <uarte_nrfx_tx+0x9c>
		data->async->xfer_len = len;
   2b02a:	e9c0 1204 	strd	r1, r2, [r0, #16]
	start_tx_locked(dev, data);
   2b02e:	f106 010c 	add.w	r1, r6, #12
   2b032:	4628      	mov	r0, r5
   2b034:	f00e fdde 	bl	39bf4 <start_tx_locked.isra.0>
   2b038:	f387 8811 	msr	BASEPRI, r7
   2b03c:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   2b040:	7af3      	ldrb	r3, [r6, #11]
   2b042:	2b01      	cmp	r3, #1
   2b044:	d118      	bne.n	2b078 <uarte_nrfx_tx+0x98>
	    && timeout != SYS_FOREVER_US) {
   2b046:	1c63      	adds	r3, r4, #1
   2b048:	d016      	beq.n	2b078 <uarte_nrfx_tx+0x98>
			return (t * to_hz + off) / from_hz;
   2b04a:	480e      	ldr	r0, [pc, #56]	; (2b084 <uarte_nrfx_tx+0xa4>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   2b04c:	68f5      	ldr	r5, [r6, #12]
   2b04e:	4a0e      	ldr	r2, [pc, #56]	; (2b088 <uarte_nrfx_tx+0xa8>)
   2b050:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2b054:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2b058:	2100      	movs	r1, #0
   2b05a:	2300      	movs	r3, #0
   2b05c:	fbc6 0104 	smlal	r0, r1, r6, r4
   2b060:	f7e1 fd6c 	bl	cb3c <__aeabi_uldivmod>
   2b064:	3528      	adds	r5, #40	; 0x28
   2b066:	4602      	mov	r2, r0
   2b068:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2b06a:	2000      	movs	r0, #0
   2b06c:	2100      	movs	r1, #0
   2b06e:	e9cd 0100 	strd	r0, r1, [sp]
   2b072:	4628      	mov	r0, r5
   2b074:	f007 fb7c 	bl	32770 <z_impl_k_timer_start>
	return 0;
   2b078:	2000      	movs	r0, #0
   2b07a:	e7c9      	b.n	2b010 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   2b07c:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
   2b07e:	f00e fdd1 	bl	39c24 <setup_tx_cache.isra.0>
   2b082:	e7d4      	b.n	2b02e <uarte_nrfx_tx+0x4e>
   2b084:	000f423f 	.word	0x000f423f
   2b088:	000f4240 	.word	0x000f4240

0002b08c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   2b08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2b08e:	6906      	ldr	r6, [r0, #16]
{
   2b090:	4604      	mov	r4, r0
   2b092:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2b094:	f00f f8a4 	bl	3a1e0 <k_is_in_isr>
   2b098:	b910      	cbnz	r0, 2b0a0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   2b09a:	4b28      	ldr	r3, [pc, #160]	; (2b13c <uarte_nrfx_poll_out+0xb0>)
	int key;

	if (isr_mode) {
   2b09c:	781b      	ldrb	r3, [r3, #0]
   2b09e:	bb5b      	cbnz	r3, 2b0f8 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   2b0a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b0a4:	f3ef 8111 	mrs	r1, BASEPRI
   2b0a8:	f383 8812 	msr	BASEPRI_MAX, r3
   2b0ac:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   2b0b0:	4620      	mov	r0, r4
			key = irq_lock();
   2b0b2:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   2b0b4:	f00e fc60 	bl	39978 <is_tx_ready>
   2b0b8:	b1c8      	cbz	r0, 2b0ee <uarte_nrfx_poll_out+0x62>
#if CONFIG_UART_ASYNC_API
				if (data->async && data->async->tx_size &&
   2b0ba:	68f3      	ldr	r3, [r6, #12]
   2b0bc:	b15b      	cbz	r3, 2b0d6 <uarte_nrfx_poll_out+0x4a>
   2b0be:	68da      	ldr	r2, [r3, #12]
   2b0c0:	b14a      	cbz	r2, 2b0d6 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   2b0c2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
   2b0c6:	2a00      	cmp	r2, #0
   2b0c8:	da05      	bge.n	2b0d6 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   2b0ca:	6862      	ldr	r2, [r4, #4]
   2b0cc:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   2b0ce:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   2b0d2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   2b0d6:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   2b0d8:	2201      	movs	r2, #1
	data->char_out = c;
   2b0da:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   2b0de:	4620      	mov	r0, r4
   2b0e0:	f00e fd15 	bl	39b0e <tx_start>
	__asm__ volatile(
   2b0e4:	f385 8811 	msr	BASEPRI, r5
   2b0e8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   2b0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b0ee:	f381 8811 	msr	BASEPRI, r1
   2b0f2:	f3bf 8f6f 	isb	sy
}
   2b0f6:	e7d3      	b.n	2b0a0 <uarte_nrfx_poll_out+0x14>
{
   2b0f8:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2b0fa:	4620      	mov	r0, r4
   2b0fc:	f00e fc3c 	bl	39978 <is_tx_ready>
   2b100:	b948      	cbnz	r0, 2b116 <uarte_nrfx_poll_out+0x8a>
   2b102:	2001      	movs	r0, #1
   2b104:	f00e ff49 	bl	39f9a <nrfx_busy_wait>
   2b108:	3d01      	subs	r5, #1
   2b10a:	d1f6      	bne.n	2b0fa <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
   2b10c:	2100      	movs	r1, #0
   2b10e:	2021      	movs	r0, #33	; 0x21
   2b110:	f006 fdce 	bl	31cb0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2b114:	e7f0      	b.n	2b0f8 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   2b116:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b11a:	f3ef 8511 	mrs	r5, BASEPRI
   2b11e:	f383 8812 	msr	BASEPRI_MAX, r3
   2b122:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2b126:	4620      	mov	r0, r4
   2b128:	f00e fc26 	bl	39978 <is_tx_ready>
   2b12c:	2800      	cmp	r0, #0
   2b12e:	d1d2      	bne.n	2b0d6 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   2b130:	f385 8811 	msr	BASEPRI, r5
   2b134:	f3bf 8f6f 	isb	sy
}
   2b138:	e7e8      	b.n	2b10c <uarte_nrfx_poll_out+0x80>
   2b13a:	bf00      	nop
   2b13c:	2000488f 	.word	0x2000488f

0002b140 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   2b140:	6843      	ldr	r3, [r0, #4]
{
   2b142:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
   2b146:	681d      	ldr	r5, [r3, #0]
	if (!hw_rx_counting_enabled(data)
   2b148:	6903      	ldr	r3, [r0, #16]
   2b14a:	68db      	ldr	r3, [r3, #12]
   2b14c:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
{
   2b150:	b089      	sub	sp, #36	; 0x24
   2b152:	4604      	mov	r4, r0
	if (!hw_rx_counting_enabled(data)
   2b154:	b972      	cbnz	r2, 2b174 <uarte_nrfx_isr_async+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b156:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   2b15a:	b159      	cbz	r1, 2b174 <uarte_nrfx_isr_async+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b15c:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   2b160:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   2b164:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   2b168:	3201      	adds	r2, #1
   2b16a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
   2b16e:	b009      	add	sp, #36	; 0x24
   2b170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b174:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2b178:	b31b      	cbz	r3, 2b1c2 <uarte_nrfx_isr_async+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b17a:	2100      	movs	r1, #0
   2b17c:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   2b180:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2b184:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2b188:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   2b18c:	2214      	movs	r2, #20
   2b18e:	a803      	add	r0, sp, #12
   2b190:	f00f f9f2 	bl	3a578 <memset>
   2b194:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2b196:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
   2b198:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2b19c:	f100 8104 	bmi.w	2b3a8 <uarte_nrfx_isr_async+0x268>
   2b1a0:	07b1      	lsls	r1, r6, #30
   2b1a2:	f100 8103 	bmi.w	2b3ac <uarte_nrfx_isr_async+0x26c>
   2b1a6:	0772      	lsls	r2, r6, #29
   2b1a8:	f100 8102 	bmi.w	2b3b0 <uarte_nrfx_isr_async+0x270>
   2b1ac:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   2b1b0:	4620      	mov	r0, r4
   2b1b2:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2b1b4:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   2b1b8:	f00e fbef 	bl	3999a <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   2b1bc:	4620      	mov	r0, r4
   2b1be:	f00e fdc7 	bl	39d50 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b1c2:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   2b1c6:	b37b      	cbz	r3, 2b228 <uarte_nrfx_isr_async+0xe8>
    return p_reg->INTENSET & mask;
   2b1c8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   2b1cc:	06db      	lsls	r3, r3, #27
   2b1ce:	d52b      	bpl.n	2b228 <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b1d0:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2b1d4:	6927      	ldr	r7, [r4, #16]
   2b1d6:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   2b1da:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   2b1de:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
   2b1e0:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
   2b1e2:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   2b1e4:	2301      	movs	r3, #1
   2b1e6:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
   2b1ea:	3088      	adds	r0, #136	; 0x88
   2b1ec:	f00f f90f 	bl	3a40e <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   2b1f0:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   2b1f2:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
   2b1f6:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   2b1fa:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
   2b1fc:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   2b200:	1a1b      	subs	r3, r3, r0
   2b202:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   2b204:	6f90      	ldr	r0, [r2, #120]	; 0x78
   2b206:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2b20a:	4408      	add	r0, r1
	if (rx_len > 0) {
   2b20c:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   2b20e:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
   2b210:	dd02      	ble.n	2b218 <uarte_nrfx_isr_async+0xd8>
		notify_uart_rx_rdy(dev, rx_len);
   2b212:	4620      	mov	r0, r4
   2b214:	f00e fbc8 	bl	399a8 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   2b218:	68f9      	ldr	r1, [r7, #12]
   2b21a:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
   2b21e:	2b00      	cmp	r3, #0
   2b220:	f040 80c8 	bne.w	2b3b4 <uarte_nrfx_isr_async+0x274>
		data->async->is_in_irq = false;
   2b224:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b228:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   2b22c:	b393      	cbz	r3, 2b294 <uarte_nrfx_isr_async+0x154>
   2b22e:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
   2b232:	bb79      	cbnz	r1, 2b294 <uarte_nrfx_isr_async+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b234:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2b238:	6926      	ldr	r6, [r4, #16]
   2b23a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   2b23e:	2214      	movs	r2, #20
   2b240:	a803      	add	r0, sp, #12
   2b242:	f00f f999 	bl	3a578 <memset>
   2b246:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   2b248:	a903      	add	r1, sp, #12
   2b24a:	4620      	mov	r0, r4
	struct uart_event evt = {
   2b24c:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   2b250:	f00e fba3 	bl	3999a <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   2b254:	68f6      	ldr	r6, [r6, #12]
   2b256:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
   2b258:	1c5f      	adds	r7, r3, #1
   2b25a:	d01b      	beq.n	2b294 <uarte_nrfx_isr_async+0x154>
		data->async->rx_timeout_left = data->async->rx_timeout;
   2b25c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
   2b260:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
   2b264:	f8df 8234 	ldr.w	r8, [pc, #564]	; 2b49c <uarte_nrfx_isr_async+0x35c>
   2b268:	4a8b      	ldr	r2, [pc, #556]	; (2b498 <uarte_nrfx_isr_async+0x358>)
   2b26a:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2b26e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2b272:	f04f 0900 	mov.w	r9, #0
   2b276:	fbc0 8901 	smlal	r8, r9, r0, r1
   2b27a:	2300      	movs	r3, #0
   2b27c:	4640      	mov	r0, r8
   2b27e:	4649      	mov	r1, r9
   2b280:	f7e1 fc5c 	bl	cb3c <__aeabi_uldivmod>
   2b284:	4602      	mov	r2, r0
   2b286:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2b288:	e9cd 0100 	strd	r0, r1, [sp]
   2b28c:	f106 0088 	add.w	r0, r6, #136	; 0x88
   2b290:	f007 fa6e 	bl	32770 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b294:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   2b298:	b333      	cbz	r3, 2b2e8 <uarte_nrfx_isr_async+0x1a8>
   2b29a:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   2b29e:	bb1e      	cbnz	r6, 2b2e8 <uarte_nrfx_isr_async+0x1a8>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2b2a0:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b2a2:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   2b2a6:	68f9      	ldr	r1, [r7, #12]
   2b2a8:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   2b2ac:	2201      	movs	r2, #1
   2b2ae:	3160      	adds	r1, #96	; 0x60
   2b2b0:	4620      	mov	r0, r4
   2b2b2:	f00e fb92 	bl	399da <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   2b2b6:	68f9      	ldr	r1, [r7, #12]
   2b2b8:	2201      	movs	r2, #1
   2b2ba:	316c      	adds	r1, #108	; 0x6c
   2b2bc:	4620      	mov	r0, r4
   2b2be:	f00e fb8c 	bl	399da <notify_rx_buf_release>
	if (data->async->rx_enabled) {
   2b2c2:	68fb      	ldr	r3, [r7, #12]
   2b2c4:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
   2b2c8:	2a00      	cmp	r2, #0
   2b2ca:	f000 80a1 	beq.w	2b410 <uarte_nrfx_isr_async+0x2d0>
		data->async->rx_enabled = false;
   2b2ce:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2b2d2:	6863      	ldr	r3, [r4, #4]
   2b2d4:	685b      	ldr	r3, [r3, #4]
   2b2d6:	06d8      	lsls	r0, r3, #27
   2b2d8:	d503      	bpl.n	2b2e2 <uarte_nrfx_isr_async+0x1a2>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   2b2da:	2102      	movs	r1, #2
   2b2dc:	4620      	mov	r0, r4
   2b2de:	f00e fceb 	bl	39cb8 <async_uart_release>
	notify_rx_disable(dev);
   2b2e2:	4620      	mov	r0, r4
   2b2e4:	f00e fb93 	bl	39a0e <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b2e8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   2b2ec:	b1db      	cbz	r3, 2b326 <uarte_nrfx_isr_async+0x1e6>
    return p_reg->INTENSET & mask;
   2b2ee:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   2b2f2:	05d9      	lsls	r1, r3, #23
   2b2f4:	d517      	bpl.n	2b326 <uarte_nrfx_isr_async+0x1e6>
	return config->uarte_regs;
   2b2f6:	6863      	ldr	r3, [r4, #4]
   2b2f8:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2b2fa:	f04f 0140 	mov.w	r1, #64	; 0x40
   2b2fe:	f3ef 8211 	mrs	r2, BASEPRI
   2b302:	f381 8812 	msr	BASEPRI_MAX, r1
   2b306:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b30a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2b30e:	b131      	cbz	r1, 2b31e <uarte_nrfx_isr_async+0x1de>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b310:	2100      	movs	r1, #0
   2b312:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2b316:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b31a:	2101      	movs	r1, #1
   2b31c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2b31e:	f382 8811 	msr	BASEPRI, r2
   2b322:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b326:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   2b32a:	2b00      	cmp	r3, #0
   2b32c:	f43f af1f 	beq.w	2b16e <uarte_nrfx_isr_async+0x2e>
    return p_reg->INTENSET & mask;
   2b330:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   2b334:	025a      	lsls	r2, r3, #9
   2b336:	f57f af1a 	bpl.w	2b16e <uarte_nrfx_isr_async+0x2e>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2b33a:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2b33c:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2b33e:	e9d3 7300 	ldrd	r7, r3, [r3]
   2b342:	06db      	lsls	r3, r3, #27
   2b344:	d469      	bmi.n	2b41a <uarte_nrfx_isr_async+0x2da>
	if (!data->async->tx_buf) {
   2b346:	68f3      	ldr	r3, [r6, #12]
   2b348:	689b      	ldr	r3, [r3, #8]
   2b34a:	2b00      	cmp	r3, #0
   2b34c:	f43f af0f 	beq.w	2b16e <uarte_nrfx_isr_async+0x2e>
	__asm__ volatile(
   2b350:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b354:	f3ef 8211 	mrs	r2, BASEPRI
   2b358:	f383 8812 	msr	BASEPRI_MAX, r3
   2b35c:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   2b360:	68f3      	ldr	r3, [r6, #12]
   2b362:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   2b366:	2900      	cmp	r1, #0
   2b368:	bfac      	ite	ge
   2b36a:	f8d3 50c4 	ldrge.w	r5, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
   2b36e:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
   2b372:	f382 8811 	msr	BASEPRI, r2
   2b376:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   2b37a:	68f0      	ldr	r0, [r6, #12]
   2b37c:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
   2b380:	2b00      	cmp	r3, #0
   2b382:	d057      	beq.n	2b434 <uarte_nrfx_isr_async+0x2f4>
	__asm__ volatile(
   2b384:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b388:	f3ef 8511 	mrs	r5, BASEPRI
   2b38c:	f383 8812 	msr	BASEPRI_MAX, r3
   2b390:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   2b394:	f106 010c 	add.w	r1, r6, #12
   2b398:	4620      	mov	r0, r4
   2b39a:	f00e fc2b 	bl	39bf4 <start_tx_locked.isra.0>
	__asm__ volatile(
   2b39e:	f385 8811 	msr	BASEPRI, r5
   2b3a2:	f3bf 8f6f 	isb	sy
				return;
   2b3a6:	e6e2      	b.n	2b16e <uarte_nrfx_isr_async+0x2e>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2b3a8:	2601      	movs	r6, #1
   2b3aa:	e701      	b.n	2b1b0 <uarte_nrfx_isr_async+0x70>
   2b3ac:	2602      	movs	r6, #2
   2b3ae:	e6ff      	b.n	2b1b0 <uarte_nrfx_isr_async+0x70>
   2b3b0:	2604      	movs	r6, #4
   2b3b2:	e6fd      	b.n	2b1b0 <uarte_nrfx_isr_async+0x70>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   2b3b4:	2200      	movs	r2, #0
   2b3b6:	3160      	adds	r1, #96	; 0x60
   2b3b8:	4620      	mov	r0, r4
   2b3ba:	f00e fb0e 	bl	399da <notify_rx_buf_release>
	__asm__ volatile(
   2b3be:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b3c2:	f3ef 8111 	mrs	r1, BASEPRI
   2b3c6:	f383 8812 	msr	BASEPRI_MAX, r3
   2b3ca:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   2b3ce:	68fb      	ldr	r3, [r7, #12]
   2b3d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2b3d2:	b1d2      	cbz	r2, 2b40a <uarte_nrfx_isr_async+0x2ca>
		data->async->rx_buf = data->async->rx_next_buf;
   2b3d4:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   2b3d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2b3d8:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
   2b3da:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   2b3dc:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
   2b3e0:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b3e2:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2b3e6:	b90b      	cbnz	r3, 2b3ec <uarte_nrfx_isr_async+0x2ac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b3e8:	2301      	movs	r3, #1
   2b3ea:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   2b3ec:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   2b3f0:	f023 0320 	bic.w	r3, r3, #32
   2b3f4:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   2b3f8:	f381 8811 	msr	BASEPRI, r1
   2b3fc:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   2b400:	68fb      	ldr	r3, [r7, #12]
   2b402:	2200      	movs	r2, #0
   2b404:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
   2b408:	e70e      	b.n	2b228 <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b40a:	2301      	movs	r3, #1
   2b40c:	6073      	str	r3, [r6, #4]
}
   2b40e:	e7f3      	b.n	2b3f8 <uarte_nrfx_isr_async+0x2b8>
		(void)rx_flush(dev, NULL, 0);
   2b410:	4611      	mov	r1, r2
   2b412:	4620      	mov	r0, r4
   2b414:	f00e fc1a 	bl	39c4c <rx_flush>
   2b418:	e75b      	b.n	2b2d2 <uarte_nrfx_isr_async+0x192>
    p_reg->INTENCLR = mask;
   2b41a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2b41e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   2b422:	2101      	movs	r1, #1
   2b424:	4620      	mov	r0, r4
   2b426:	f00e fc47 	bl	39cb8 <async_uart_release>
		if (!data->async->tx_size) {
   2b42a:	68f3      	ldr	r3, [r6, #12]
   2b42c:	68db      	ldr	r3, [r3, #12]
   2b42e:	2b00      	cmp	r3, #0
   2b430:	d189      	bne.n	2b346 <uarte_nrfx_isr_async+0x206>
   2b432:	e69c      	b.n	2b16e <uarte_nrfx_isr_async+0x2e>
	if (data->async->tx_buf != data->async->xfer_buf) {
   2b434:	6882      	ldr	r2, [r0, #8]
   2b436:	6903      	ldr	r3, [r0, #16]
   2b438:	429a      	cmp	r2, r3
   2b43a:	d00b      	beq.n	2b454 <uarte_nrfx_isr_async+0x314>
		if (amount == data->async->xfer_len) {
   2b43c:	6942      	ldr	r2, [r0, #20]
   2b43e:	6a03      	ldr	r3, [r0, #32]
   2b440:	42aa      	cmp	r2, r5
   2b442:	442b      	add	r3, r5
   2b444:	d125      	bne.n	2b492 <uarte_nrfx_isr_async+0x352>
			data->async->tx_cache_offset += amount;
   2b446:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
   2b448:	f00e fbec 	bl	39c24 <setup_tx_cache.isra.0>
   2b44c:	2800      	cmp	r0, #0
   2b44e:	d199      	bne.n	2b384 <uarte_nrfx_isr_async+0x244>
			amount = data->async->tx_cache_offset;
   2b450:	68f3      	ldr	r3, [r6, #12]
   2b452:	6a1d      	ldr	r5, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
   2b454:	68f0      	ldr	r0, [r6, #12]
   2b456:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
   2b458:	f00e ffd9 	bl	3a40e <z_impl_k_timer_stop>
	struct uart_event evt = {
   2b45c:	2214      	movs	r2, #20
   2b45e:	2100      	movs	r1, #0
   2b460:	a803      	add	r0, sp, #12
   2b462:	f00f f889 	bl	3a578 <memset>
		.data.tx.buf = data->async->tx_buf,
   2b466:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   2b468:	689a      	ldr	r2, [r3, #8]
   2b46a:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
   2b46e:	68da      	ldr	r2, [r3, #12]
   2b470:	1aad      	subs	r5, r5, r2
   2b472:	bf18      	it	ne
   2b474:	2501      	movne	r5, #1
   2b476:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2b47a:	f88d 500c 	strb.w	r5, [sp, #12]
   2b47e:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   2b482:	2200      	movs	r2, #0
   2b484:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   2b486:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   2b488:	a903      	add	r1, sp, #12
   2b48a:	4620      	mov	r0, r4
   2b48c:	f00e fa85 	bl	3999a <user_callback>
   2b490:	e66d      	b.n	2b16e <uarte_nrfx_isr_async+0x2e>
			amount += data->async->tx_cache_offset;
   2b492:	461d      	mov	r5, r3
   2b494:	e7de      	b.n	2b454 <uarte_nrfx_isr_async+0x314>
   2b496:	bf00      	nop
   2b498:	000f4240 	.word	0x000f4240
   2b49c:	000f423f 	.word	0x000f423f

0002b4a0 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2b4a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b4a4:	4607      	mov	r7, r0
   2b4a6:	2200      	movs	r2, #0
   2b4a8:	2101      	movs	r1, #1
   2b4aa:	2028      	movs	r0, #40	; 0x28
   2b4ac:	f7f6 fed6 	bl	2225c <z_arm_irq_priority_set>
   2b4b0:	2028      	movs	r0, #40	; 0x28
   2b4b2:	f7f6 fea1 	bl	221f8 <arch_irq_enable>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2b4b6:	f8d7 a004 	ldr.w	sl, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2b4ba:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   2b4be:	f8da 4000 	ldr.w	r4, [sl]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2b4c2:	2300      	movs	r3, #0
   2b4c4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   2b4c8:	f8c8 7000 	str.w	r7, [r8]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   2b4cc:	687d      	ldr	r5, [r7, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2b4ce:	68eb      	ldr	r3, [r5, #12]
   2b4d0:	1c5a      	adds	r2, r3, #1
   2b4d2:	d013      	beq.n	2b4fc <uarte_1_init+0x5c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b4d4:	4668      	mov	r0, sp
   2b4d6:	9300      	str	r3, [sp, #0]
   2b4d8:	f7ff fcae 	bl	2ae38 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2b4dc:	9a00      	ldr	r2, [sp, #0]
   2b4de:	2301      	movs	r3, #1
   2b4e0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2b4e2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   2b4e6:	68eb      	ldr	r3, [r5, #12]
   2b4e8:	9300      	str	r3, [sp, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b4ea:	4668      	mov	r0, sp
   2b4ec:	f7ff fca4 	bl	2ae38 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2b4f0:	9b00      	ldr	r3, [sp, #0]
   2b4f2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2b4f6:	2203      	movs	r2, #3
   2b4f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2b4fc:	692b      	ldr	r3, [r5, #16]
   2b4fe:	1c58      	adds	r0, r3, #1
   2b500:	d00e      	beq.n	2b520 <uarte_1_init+0x80>
			nrf_gpio_cfg_input(cfg->rx_pin,
   2b502:	7f2a      	ldrb	r2, [r5, #28]
   2b504:	9300      	str	r3, [sp, #0]
   2b506:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b508:	4668      	mov	r0, sp
   2b50a:	bf14      	ite	ne
   2b50c:	2603      	movne	r6, #3
   2b50e:	2600      	moveq	r6, #0
   2b510:	f7ff fc92 	bl	2ae38 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2b514:	9b00      	ldr	r3, [sp, #0]
   2b516:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2b51a:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
   2b51c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2b520:	696b      	ldr	r3, [r5, #20]
   2b522:	1c59      	adds	r1, r3, #1
   2b524:	d013      	beq.n	2b54e <uarte_1_init+0xae>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b526:	4668      	mov	r0, sp
   2b528:	9300      	str	r3, [sp, #0]
   2b52a:	f7ff fc85 	bl	2ae38 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2b52e:	9a00      	ldr	r2, [sp, #0]
   2b530:	2301      	movs	r3, #1
   2b532:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2b534:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   2b538:	696b      	ldr	r3, [r5, #20]
   2b53a:	9300      	str	r3, [sp, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b53c:	4668      	mov	r0, sp
   2b53e:	f7ff fc7b 	bl	2ae38 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2b542:	9b00      	ldr	r3, [sp, #0]
   2b544:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2b548:	2203      	movs	r2, #3
   2b54a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2b54e:	69ab      	ldr	r3, [r5, #24]
   2b550:	1c5a      	adds	r2, r3, #1
   2b552:	d00e      	beq.n	2b572 <uarte_1_init+0xd2>
			nrf_gpio_cfg_input(cfg->cts_pin,
   2b554:	7f6a      	ldrb	r2, [r5, #29]
   2b556:	9300      	str	r3, [sp, #0]
   2b558:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b55a:	4668      	mov	r0, sp
   2b55c:	bf14      	ite	ne
   2b55e:	2603      	movne	r6, #3
   2b560:	2600      	moveq	r6, #0
   2b562:	f7ff fc69 	bl	2ae38 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2b566:	9b00      	ldr	r3, [sp, #0]
   2b568:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2b56c:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
   2b56e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   2b572:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   2b576:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   2b578:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   2b57c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   2b580:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
   2b584:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2b588:	6939      	ldr	r1, [r7, #16]
    p_reg->PSEL.CTS = pselcts;
   2b58a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   2b58e:	3104      	adds	r1, #4
   2b590:	4638      	mov	r0, r7
   2b592:	f7ff fb9f 	bl	2acd4 <uarte_nrfx_configure>
	if (err) {
   2b596:	4681      	mov	r9, r0
   2b598:	b9b0      	cbnz	r0, 2b5c8 <uarte_1_init+0x128>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2b59a:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2b59e:	0798      	lsls	r0, r3, #30
   2b5a0:	d52a      	bpl.n	2b5f8 <uarte_1_init+0x158>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2b5a2:	f108 0016 	add.w	r0, r8, #22
   2b5a6:	f003 f971 	bl	2e88c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   2b5aa:	4b77      	ldr	r3, [pc, #476]	; (2b788 <uarte_1_init+0x2e8>)
   2b5ac:	4298      	cmp	r0, r3
   2b5ae:	d00f      	beq.n	2b5d0 <uarte_1_init+0x130>
   2b5b0:	4876      	ldr	r0, [pc, #472]	; (2b78c <uarte_1_init+0x2ec>)
   2b5b2:	4b77      	ldr	r3, [pc, #476]	; (2b790 <uarte_1_init+0x2f0>)
		LOG_ERR("Failed to allocate PPI Channel");
   2b5b4:	4977      	ldr	r1, [pc, #476]	; (2b794 <uarte_1_init+0x2f4>)
   2b5b6:	1ac0      	subs	r0, r0, r3
   2b5b8:	08c0      	lsrs	r0, r0, #3
   2b5ba:	0180      	lsls	r0, r0, #6
   2b5bc:	f040 0001 	orr.w	r0, r0, #1
   2b5c0:	f00b ff66 	bl	37490 <log_string_sync>
		return -EIO;
   2b5c4:	f06f 0904 	mvn.w	r9, #4
UART_NRF_UARTE_DEVICE(1);
   2b5c8:	4648      	mov	r0, r9
   2b5ca:	b003      	add	sp, #12
   2b5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   2b5d0:	f898 0016 	ldrb.w	r0, [r8, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   2b5d4:	00c3      	lsls	r3, r0, #3
   2b5d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2b5da:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   2b5de:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   2b5e2:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2b5e6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2b5ea:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   2b5ee:	4a6a      	ldr	r2, [pc, #424]	; (2b798 <uarte_1_init+0x2f8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   2b5f0:	2301      	movs	r3, #1
   2b5f2:	4083      	lsls	r3, r0
   2b5f4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   2b5f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2b5fc:	2b00      	cmp	r3, #0
   2b5fe:	f000 80af 	beq.w	2b760 <uarte_1_init+0x2c0>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2b602:	693e      	ldr	r6, [r7, #16]
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2b604:	687f      	ldr	r7, [r7, #4]
		return data->async->hw_rx_counting;
   2b606:	68f3      	ldr	r3, [r6, #12]
	return config->uarte_regs;
   2b608:	683d      	ldr	r5, [r7, #0]
	if (hw_rx_counting_enabled(data)) {
   2b60a:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
   2b60e:	b1eb      	cbz	r3, 2b64c <uarte_1_init+0x1ac>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   2b610:	4962      	ldr	r1, [pc, #392]	; (2b79c <uarte_1_init+0x2fc>)
		ret = nrfx_timer_init(&cfg->timer,
   2b612:	4a63      	ldr	r2, [pc, #396]	; (2b7a0 <uarte_1_init+0x300>)
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   2b614:	2300      	movs	r3, #0
		ret = nrfx_timer_init(&cfg->timer,
   2b616:	f107 0b20 	add.w	fp, r7, #32
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   2b61a:	e9cd 1300 	strd	r1, r3, [sp]
		ret = nrfx_timer_init(&cfg->timer,
   2b61e:	4658      	mov	r0, fp
   2b620:	4669      	mov	r1, sp
   2b622:	f003 f987 	bl	2e934 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   2b626:	4a58      	ldr	r2, [pc, #352]	; (2b788 <uarte_1_init+0x2e8>)
   2b628:	4290      	cmp	r0, r2
   2b62a:	f000 808e 	beq.w	2b74a <uarte_1_init+0x2aa>
   2b62e:	4b58      	ldr	r3, [pc, #352]	; (2b790 <uarte_1_init+0x2f0>)
   2b630:	4856      	ldr	r0, [pc, #344]	; (2b78c <uarte_1_init+0x2ec>)
			LOG_ERR("Timer already initialized, "
   2b632:	495c      	ldr	r1, [pc, #368]	; (2b7a4 <uarte_1_init+0x304>)
   2b634:	1ac0      	subs	r0, r0, r3
   2b636:	08c0      	lsrs	r0, r0, #3
   2b638:	0180      	lsls	r0, r0, #6
   2b63a:	f040 0001 	orr.w	r0, r0, #1
   2b63e:	f00b ff27 	bl	37490 <log_string_sync>
			data->async->hw_rx_counting = false;
   2b642:	68f3      	ldr	r3, [r6, #12]
   2b644:	f04f 0200 	mov.w	r2, #0
   2b648:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	if (hw_rx_counting_enabled(data)) {
   2b64c:	68f0      	ldr	r0, [r6, #12]
   2b64e:	f890 30d3 	ldrb.w	r3, [r0, #211]	; 0xd3
   2b652:	b1bb      	cbz	r3, 2b684 <uarte_1_init+0x1e4>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   2b654:	30c0      	adds	r0, #192	; 0xc0
   2b656:	f003 f919 	bl	2e88c <nrfx_ppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   2b65a:	4b4b      	ldr	r3, [pc, #300]	; (2b788 <uarte_1_init+0x2e8>)
   2b65c:	4298      	cmp	r0, r3
   2b65e:	d011      	beq.n	2b684 <uarte_1_init+0x1e4>
   2b660:	4b4b      	ldr	r3, [pc, #300]	; (2b790 <uarte_1_init+0x2f0>)
   2b662:	484a      	ldr	r0, [pc, #296]	; (2b78c <uarte_1_init+0x2ec>)
			LOG_ERR("Failed to allocate PPI Channel, "
   2b664:	4950      	ldr	r1, [pc, #320]	; (2b7a8 <uarte_1_init+0x308>)
   2b666:	1ac0      	subs	r0, r0, r3
   2b668:	08c0      	lsrs	r0, r0, #3
   2b66a:	0180      	lsls	r0, r0, #6
   2b66c:	f040 0001 	orr.w	r0, r0, #1
   2b670:	f00b ff0e 	bl	37490 <log_string_sync>
			data->async->hw_rx_counting = false;
   2b674:	68f3      	ldr	r3, [r6, #12]
   2b676:	2200      	movs	r2, #0
   2b678:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
			nrfx_timer_uninit(&cfg->timer);
   2b67c:	f107 0020 	add.w	r0, r7, #32
   2b680:	f003 fa3e 	bl	2eb00 <nrfx_timer_uninit>
	if (hw_rx_counting_enabled(data)) {
   2b684:	68f3      	ldr	r3, [r6, #12]
   2b686:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
   2b68a:	2a00      	cmp	r2, #0
   2b68c:	d064      	beq.n	2b758 <uarte_1_init+0x2b8>
}

NRF_STATIC_INLINE uint32_t nrf_timer_task_address_get(NRF_TIMER_Type const * p_reg,
                                                      nrf_timer_task_t       task)
{
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
   2b68e:	6a3a      	ldr	r2, [r7, #32]
		ret = nrfx_ppi_channel_assign(
   2b690:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   2b694:	3208      	adds	r2, #8
   2b696:	f505 7184 	add.w	r1, r5, #264	; 0x108
   2b69a:	f003 f8fd 	bl	2e898 <nrfx_ppi_channel_assign>
		if (ret != NRFX_SUCCESS) {
   2b69e:	4b3a      	ldr	r3, [pc, #232]	; (2b788 <uarte_1_init+0x2e8>)
   2b6a0:	4298      	cmp	r0, r3
		ret = nrfx_ppi_channel_assign(
   2b6a2:	4607      	mov	r7, r0
		if (ret != NRFX_SUCCESS) {
   2b6a4:	d18e      	bne.n	2b5c4 <uarte_1_init+0x124>
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   2b6a6:	68f3      	ldr	r3, [r6, #12]
   2b6a8:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   2b6ac:	f003 f920 	bl	2e8f0 <nrfx_ppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   2b6b0:	42b8      	cmp	r0, r7
   2b6b2:	d187      	bne.n	2b5c4 <uarte_1_init+0x124>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   2b6b4:	68f0      	ldr	r0, [r6, #12]
    p_reg->INTENSET = mask;
   2b6b6:	4a3d      	ldr	r2, [pc, #244]	; (2b7ac <uarte_1_init+0x30c>)
   2b6b8:	2301      	movs	r3, #1
   2b6ba:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   2b6be:	f8c5 2304 	str.w	r2, [r5, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2b6c2:	2208      	movs	r2, #8
   2b6c4:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b6c8:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2b6cc:	b1a2      	cbz	r2, 2b6f8 <uarte_1_init+0x258>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b6ce:	606b      	str	r3, [r5, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b6d0:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   2b6d4:	b91b      	cbnz	r3, 2b6de <uarte_1_init+0x23e>
   2b6d6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   2b6da:	2b00      	cmp	r3, #0
   2b6dc:	d0f8      	beq.n	2b6d0 <uarte_1_init+0x230>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b6de:	2300      	movs	r3, #0
   2b6e0:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
   2b6e4:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
   2b6e8:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   2b6ec:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   2b6f0:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   2b6f4:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   2b6f8:	492d      	ldr	r1, [pc, #180]	; (2b7b0 <uarte_1_init+0x310>)
   2b6fa:	2200      	movs	r2, #0
   2b6fc:	3088      	adds	r0, #136	; 0x88
   2b6fe:	f00e fe7a 	bl	3a3f6 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   2b702:	68f3      	ldr	r3, [r6, #12]
	timer->user_data = user_data;
   2b704:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   2b708:	68f0      	ldr	r0, [r6, #12]
   2b70a:	492a      	ldr	r1, [pc, #168]	; (2b7b4 <uarte_1_init+0x314>)
   2b70c:	2200      	movs	r2, #0
   2b70e:	3028      	adds	r0, #40	; 0x28
   2b710:	f00e fe71 	bl	3a3f6 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   2b714:	68f3      	ldr	r3, [r6, #12]
   2b716:	65de      	str	r6, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2b718:	f8da 3004 	ldr.w	r3, [sl, #4]
   2b71c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   2b71e:	bf5c      	itt	pl
   2b720:	f44f 7280 	movpl.w	r2, #256	; 0x100
   2b724:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2b728:	06db      	lsls	r3, r3, #27
   2b72a:	bf44      	itt	mi
   2b72c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   2b730:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   2b734:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2b738:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2b73c:	2300      	movs	r3, #0
   2b73e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b742:	2301      	movs	r3, #1
   2b744:	60a3      	str	r3, [r4, #8]
   2b746:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(1);
   2b748:	e73e      	b.n	2b5c8 <uarte_1_init+0x128>
			nrfx_timer_enable(&cfg->timer);
   2b74a:	4658      	mov	r0, fp
   2b74c:	f003 f98e 	bl	2ea6c <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   2b750:	4658      	mov	r0, fp
   2b752:	f003 f9f3 	bl	2eb3c <nrfx_timer_clear>
   2b756:	e779      	b.n	2b64c <uarte_1_init+0x1ac>
    p_reg->INTENSET = mask;
   2b758:	2304      	movs	r3, #4
   2b75a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	if (ret != 0) {
   2b75e:	e7a9      	b.n	2b6b4 <uarte_1_init+0x214>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2b760:	2308      	movs	r3, #8
   2b762:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   2b766:	f89a 3008 	ldrb.w	r3, [sl, #8]
   2b76a:	2b00      	cmp	r3, #0
   2b76c:	d1d4      	bne.n	2b718 <uarte_1_init+0x278>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b76e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2b772:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2b776:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2b77a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2b77e:	2301      	movs	r3, #1
   2b780:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b784:	6023      	str	r3, [r4, #0]
}
   2b786:	e7c7      	b.n	2b718 <uarte_1_init+0x278>
   2b788:	0bad0000 	.word	0x0bad0000
   2b78c:	0003b580 	.word	0x0003b580
   2b790:	0003b448 	.word	0x0003b448
   2b794:	0003f544 	.word	0x0003f544
   2b798:	4001f000 	.word	0x4001f000
   2b79c:	07030100 	.word	0x07030100
   2b7a0:	00039999 	.word	0x00039999
   2b7a4:	0003f563 	.word	0x0003f563
   2b7a8:	0003f5a3 	.word	0x0003f5a3
   2b7ac:	000a0210 	.word	0x000a0210
   2b7b0:	00039b49 	.word	0x00039b49
   2b7b4:	00039d49 	.word	0x00039d49

0002b7b8 <random_byte_get>:
	__asm__ volatile(
   2b7b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b7bc:	f3ef 8211 	mrs	r2, BASEPRI
   2b7c0:	f383 8812 	msr	BASEPRI_MAX, r3
   2b7c4:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2b7c8:	4b08      	ldr	r3, [pc, #32]	; (2b7ec <random_byte_get+0x34>)
   2b7ca:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   2b7cc:	b159      	cbz	r1, 2b7e6 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   2b7ce:	4908      	ldr	r1, [pc, #32]	; (2b7f0 <random_byte_get+0x38>)
   2b7d0:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2b7d4:	2100      	movs	r1, #0
   2b7d6:	6019      	str	r1, [r3, #0]
   2b7d8:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   2b7da:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   2b7dc:	f382 8811 	msr	BASEPRI, r2
   2b7e0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   2b7e4:	4770      	bx	lr
	int retval = -EAGAIN;
   2b7e6:	f06f 000a 	mvn.w	r0, #10
   2b7ea:	e7f7      	b.n	2b7dc <random_byte_get+0x24>
   2b7ec:	4000d100 	.word	0x4000d100
   2b7f0:	4000d000 	.word	0x4000d000

0002b7f4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   2b7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b7f6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   2b7f8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   2b7fa:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   2b7fc:	f04f 0540 	mov.w	r5, #64	; 0x40
   2b800:	f3ef 8011 	mrs	r0, BASEPRI
   2b804:	f385 8812 	msr	BASEPRI_MAX, r5
   2b808:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   2b80c:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   2b80e:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   2b812:	1ba4      	subs	r4, r4, r6
   2b814:	403c      	ands	r4, r7
	if (available < len) {
   2b816:	42a2      	cmp	r2, r4
		len = available;
   2b818:	bf88      	it	hi
   2b81a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   2b81c:	eb06 0c02 	add.w	ip, r6, r2
   2b820:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   2b824:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   2b826:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   2b82a:	f380 8811 	msr	BASEPRI, r0
   2b82e:	f3bf 8f6f 	isb	sy
   2b832:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   2b834:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   2b836:	4282      	cmp	r2, r0
   2b838:	d119      	bne.n	2b86e <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   2b83a:	4576      	cmp	r6, lr
   2b83c:	d10d      	bne.n	2b85a <rng_pool_get+0x66>
	__asm__ volatile(
   2b83e:	f04f 0540 	mov.w	r5, #64	; 0x40
   2b842:	f3ef 8211 	mrs	r2, BASEPRI
   2b846:	f385 8812 	msr	BASEPRI_MAX, r5
   2b84a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   2b84e:	781d      	ldrb	r5, [r3, #0]
   2b850:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   2b852:	f382 8811 	msr	BASEPRI, r2
   2b856:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   2b85a:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   2b85c:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   2b85e:	b288      	uxth	r0, r1
	available = available - len;
   2b860:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   2b862:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2b864:	bf22      	ittt	cs
   2b866:	4b06      	ldrcs	r3, [pc, #24]	; (2b880 <rng_pool_get+0x8c>)
   2b868:	2201      	movcs	r2, #1
   2b86a:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   2b86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   2b86e:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   2b872:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   2b874:	f89c c005 	ldrb.w	ip, [ip, #5]
   2b878:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   2b87c:	403d      	ands	r5, r7
   2b87e:	e7da      	b.n	2b836 <rng_pool_get+0x42>
   2b880:	4000d000 	.word	0x4000d000

0002b884 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   2b884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b888:	4614      	mov	r4, r2
   2b88a:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   2b88c:	6902      	ldr	r2, [r0, #16]
   2b88e:	4b2c      	ldr	r3, [pc, #176]	; (2b940 <entropy_nrf5_get_entropy_isr+0xbc>)
   2b890:	429a      	cmp	r2, r3
{
   2b892:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   2b894:	d00b      	beq.n	2b8ae <entropy_nrf5_get_entropy_isr+0x2a>
   2b896:	492b      	ldr	r1, [pc, #172]	; (2b944 <entropy_nrf5_get_entropy_isr+0xc0>)
   2b898:	482b      	ldr	r0, [pc, #172]	; (2b948 <entropy_nrf5_get_entropy_isr+0xc4>)
   2b89a:	4a2c      	ldr	r2, [pc, #176]	; (2b94c <entropy_nrf5_get_entropy_isr+0xc8>)
   2b89c:	f44f 7384 	mov.w	r3, #264	; 0x108
   2b8a0:	f00b fc3b 	bl	3711a <printk>
   2b8a4:	4829      	ldr	r0, [pc, #164]	; (2b94c <entropy_nrf5_get_entropy_isr+0xc8>)
   2b8a6:	f44f 7184 	mov.w	r1, #264	; 0x108
   2b8aa:	f00b fddc 	bl	37466 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2b8ae:	43eb      	mvns	r3, r5
   2b8b0:	f013 0501 	ands.w	r5, r3, #1
   2b8b4:	d006      	beq.n	2b8c4 <entropy_nrf5_get_entropy_isr+0x40>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   2b8b6:	4826      	ldr	r0, [pc, #152]	; (2b950 <entropy_nrf5_get_entropy_isr+0xcc>)
   2b8b8:	4622      	mov	r2, r4
   2b8ba:	4631      	mov	r1, r6
   2b8bc:	f7ff ff9a 	bl	2b7f4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   2b8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   2b8c4:	2c00      	cmp	r4, #0
   2b8c6:	d033      	beq.n	2b930 <entropy_nrf5_get_entropy_isr+0xac>
	__asm__ volatile(
   2b8c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b8cc:	f3ef 8811 	mrs	r8, BASEPRI
   2b8d0:	f383 8812 	msr	BASEPRI_MAX, r3
   2b8d4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   2b8d8:	200d      	movs	r0, #13
   2b8da:	f7f6 fcb1 	bl	22240 <arch_irq_is_enabled>
   2b8de:	4607      	mov	r7, r0
		irq_disable(IRQN);
   2b8e0:	200d      	movs	r0, #13
   2b8e2:	f7f6 fc99 	bl	22218 <arch_irq_disable>
	__asm__ volatile(
   2b8e6:	f388 8811 	msr	BASEPRI, r8
   2b8ea:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2b8ee:	4a19      	ldr	r2, [pc, #100]	; (2b954 <entropy_nrf5_get_entropy_isr+0xd0>)
   2b8f0:	6015      	str	r5, [r2, #0]
   2b8f2:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2b8f4:	4b18      	ldr	r3, [pc, #96]	; (2b958 <entropy_nrf5_get_entropy_isr+0xd4>)
   2b8f6:	2101      	movs	r1, #1
   2b8f8:	6019      	str	r1, [r3, #0]
   2b8fa:	4918      	ldr	r1, [pc, #96]	; (2b95c <entropy_nrf5_get_entropy_isr+0xd8>)
   2b8fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   2b900:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   2b904:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2b906:	4691      	mov	r9, r2
   2b908:	468a      	mov	sl, r1
   2b90a:	4698      	mov	r8, r3
   2b90c:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   2b910:	b183      	cbz	r3, 2b934 <entropy_nrf5_get_entropy_isr+0xb0>
			byte = random_byte_get();
   2b912:	f7ff ff51 	bl	2b7b8 <random_byte_get>
			if (byte < 0) {
   2b916:	1e03      	subs	r3, r0, #0
   2b918:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   2b91c:	dbf6      	blt.n	2b90c <entropy_nrf5_get_entropy_isr+0x88>
   2b91e:	3d01      	subs	r5, #1
   2b920:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   2b922:	5573      	strb	r3, [r6, r5]
		} while (len);
   2b924:	2d00      	cmp	r5, #0
   2b926:	d1f1      	bne.n	2b90c <entropy_nrf5_get_entropy_isr+0x88>
		if (irq_enabled) {
   2b928:	b117      	cbz	r7, 2b930 <entropy_nrf5_get_entropy_isr+0xac>
			irq_enable(IRQN);
   2b92a:	200d      	movs	r0, #13
   2b92c:	f7f6 fc64 	bl	221f8 <arch_irq_enable>
	return cnt;
   2b930:	4620      	mov	r0, r4
   2b932:	e7c5      	b.n	2b8c0 <entropy_nrf5_get_entropy_isr+0x3c>
   2b934:	f3bf 8f4f 	dsb	sy
				__WFE();
   2b938:	bf20      	wfe
				__SEV();
   2b93a:	bf40      	sev
				__WFE();
   2b93c:	bf20      	wfe
   2b93e:	e7e5      	b.n	2b90c <entropy_nrf5_get_entropy_isr+0x88>
   2b940:	20002ad8 	.word	0x20002ad8
   2b944:	0003f62a 	.word	0x0003f62a
   2b948:	0003c48a 	.word	0x0003c48a
   2b94c:	0003f5f8 	.word	0x0003f5f8
   2b950:	20002b08 	.word	0x20002b08
   2b954:	4000d100 	.word	0x4000d100
   2b958:	4000d000 	.word	0x4000d000
   2b95c:	e000e100 	.word	0xe000e100

0002b960 <entropy_nrf5_get_entropy>:
{
   2b960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   2b964:	4b1a      	ldr	r3, [pc, #104]	; (2b9d0 <entropy_nrf5_get_entropy+0x70>)
{
   2b966:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   2b968:	6902      	ldr	r2, [r0, #16]
   2b96a:	429a      	cmp	r2, r3
{
   2b96c:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   2b96e:	d009      	beq.n	2b984 <entropy_nrf5_get_entropy+0x24>
   2b970:	4918      	ldr	r1, [pc, #96]	; (2b9d4 <entropy_nrf5_get_entropy+0x74>)
   2b972:	4819      	ldr	r0, [pc, #100]	; (2b9d8 <entropy_nrf5_get_entropy+0x78>)
   2b974:	4a19      	ldr	r2, [pc, #100]	; (2b9dc <entropy_nrf5_get_entropy+0x7c>)
   2b976:	23ea      	movs	r3, #234	; 0xea
   2b978:	f00b fbcf 	bl	3711a <printk>
   2b97c:	4817      	ldr	r0, [pc, #92]	; (2b9dc <entropy_nrf5_get_entropy+0x7c>)
   2b97e:	21ea      	movs	r1, #234	; 0xea
   2b980:	f00b fd71 	bl	37466 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   2b984:	4e12      	ldr	r6, [pc, #72]	; (2b9d0 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2b986:	f106 0745 	add.w	r7, r6, #69	; 0x45
   2b98a:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   2b98e:	b914      	cbnz	r4, 2b996 <entropy_nrf5_get_entropy+0x36>
}
   2b990:	4620      	mov	r0, r4
   2b992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b996:	f04f 33ff 	mov.w	r3, #4294967295
   2b99a:	f04f 32ff 	mov.w	r2, #4294967295
   2b99e:	4630      	mov	r0, r6
   2b9a0:	f004 fad2 	bl	2ff48 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2b9a4:	4622      	mov	r2, r4
   2b9a6:	4649      	mov	r1, r9
   2b9a8:	4638      	mov	r0, r7
   2b9aa:	f7ff ff23 	bl	2b7f4 <rng_pool_get>
   2b9ae:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   2b9b0:	4630      	mov	r0, r6
   2b9b2:	f004 fa85 	bl	2fec0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   2b9b6:	b93d      	cbnz	r5, 2b9c8 <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   2b9b8:	f04f 32ff 	mov.w	r2, #4294967295
   2b9bc:	f04f 33ff 	mov.w	r3, #4294967295
   2b9c0:	4640      	mov	r0, r8
   2b9c2:	f004 fac1 	bl	2ff48 <z_impl_k_sem_take>
			continue;
   2b9c6:	e7e2      	b.n	2b98e <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   2b9c8:	1b64      	subs	r4, r4, r5
   2b9ca:	b2a4      	uxth	r4, r4
		buf += bytes;
   2b9cc:	44a9      	add	r9, r5
   2b9ce:	e7de      	b.n	2b98e <entropy_nrf5_get_entropy+0x2e>
   2b9d0:	20002ad8 	.word	0x20002ad8
   2b9d4:	0003f62a 	.word	0x0003f62a
   2b9d8:	0003c48a 	.word	0x0003c48a
   2b9dc:	0003f5f8 	.word	0x0003f5f8

0002b9e0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   2b9e0:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   2b9e2:	4c20      	ldr	r4, [pc, #128]	; (2ba64 <entropy_nrf5_init+0x84>)
   2b9e4:	6903      	ldr	r3, [r0, #16]
   2b9e6:	42a3      	cmp	r3, r4
   2b9e8:	d00b      	beq.n	2ba02 <entropy_nrf5_init+0x22>
   2b9ea:	491f      	ldr	r1, [pc, #124]	; (2ba68 <entropy_nrf5_init+0x88>)
   2b9ec:	481f      	ldr	r0, [pc, #124]	; (2ba6c <entropy_nrf5_init+0x8c>)
   2b9ee:	4a20      	ldr	r2, [pc, #128]	; (2ba70 <entropy_nrf5_init+0x90>)
   2b9f0:	f240 1357 	movw	r3, #343	; 0x157
   2b9f4:	f00b fb91 	bl	3711a <printk>
   2b9f8:	481d      	ldr	r0, [pc, #116]	; (2ba70 <entropy_nrf5_init+0x90>)
   2b9fa:	f240 1157 	movw	r1, #343	; 0x157
   2b9fe:	f00b fd32 	bl	37466 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2ba02:	2201      	movs	r2, #1
   2ba04:	4611      	mov	r1, r2
   2ba06:	4817      	ldr	r0, [pc, #92]	; (2ba64 <entropy_nrf5_init+0x84>)
   2ba08:	f00e fc33 	bl	3a272 <z_impl_k_sem_init>
   2ba0c:	2201      	movs	r2, #1
   2ba0e:	2100      	movs	r1, #0
   2ba10:	4818      	ldr	r0, [pc, #96]	; (2ba74 <entropy_nrf5_init+0x94>)
   2ba12:	f00e fc2e 	bl	3a272 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   2ba16:	f240 4307 	movw	r3, #1031	; 0x407
   2ba1a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   2ba1e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2ba22:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   2ba24:	230c      	movs	r3, #12
   2ba26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   2ba2a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   2ba2c:	4b12      	ldr	r3, [pc, #72]	; (2ba78 <entropy_nrf5_init+0x98>)
   2ba2e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   2ba32:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   2ba36:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2ba3a:	f022 0201 	bic.w	r2, r2, #1
   2ba3e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2ba42:	4a0e      	ldr	r2, [pc, #56]	; (2ba7c <entropy_nrf5_init+0x9c>)
    p_reg->INTENSET = mask;
   2ba44:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2ba46:	6015      	str	r5, [r2, #0]
   2ba48:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   2ba4a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   2ba4e:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2ba50:	6019      	str	r1, [r3, #0]
   2ba52:	200d      	movs	r0, #13
   2ba54:	f7f6 fc02 	bl	2225c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   2ba58:	200d      	movs	r0, #13
   2ba5a:	f7f6 fbcd 	bl	221f8 <arch_irq_enable>

	return 0;
}
   2ba5e:	4628      	mov	r0, r5
   2ba60:	bd38      	pop	{r3, r4, r5, pc}
   2ba62:	bf00      	nop
   2ba64:	20002ad8 	.word	0x20002ad8
   2ba68:	0003f62a 	.word	0x0003f62a
   2ba6c:	0003c48a 	.word	0x0003c48a
   2ba70:	0003f5f8 	.word	0x0003f5f8
   2ba74:	20002af0 	.word	0x20002af0
   2ba78:	4000d000 	.word	0x4000d000
   2ba7c:	4000d100 	.word	0x4000d100

0002ba80 <isr>:
{
   2ba80:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2ba82:	f7ff fe99 	bl	2b7b8 <random_byte_get>
	if (byte < 0) {
   2ba86:	2800      	cmp	r0, #0
   2ba88:	db20      	blt.n	2bacc <isr+0x4c>
	uint8_t last  = rngp->last;
   2ba8a:	4b17      	ldr	r3, [pc, #92]	; (2bae8 <isr+0x68>)
   2ba8c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   2ba90:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   2ba94:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   2ba98:	1a51      	subs	r1, r2, r1
   2ba9a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   2ba9e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   2baa0:	d10d      	bne.n	2babe <isr+0x3e>
	uint8_t last  = rngp->last;
   2baa2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   2baa6:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   2baaa:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   2baae:	1a51      	subs	r1, r2, r1
   2bab0:	ea34 0101 	bics.w	r1, r4, r1
   2bab4:	d10b      	bne.n	2bace <isr+0x4e>
   2bab6:	4b0d      	ldr	r3, [pc, #52]	; (2baec <isr+0x6c>)
   2bab8:	2201      	movs	r2, #1
   2baba:	601a      	str	r2, [r3, #0]
}
   2babc:	e00e      	b.n	2badc <isr+0x5c>
	rngp->buffer[last] = byte;
   2babe:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   2bac0:	3201      	adds	r2, #1
   2bac2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   2bac4:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   2bac8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   2bacc:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   2bace:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   2bad0:	3201      	adds	r2, #1
   2bad2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   2bad4:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   2bad8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   2badc:	4804      	ldr	r0, [pc, #16]	; (2baf0 <isr+0x70>)
}
   2bade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bae2:	f004 b9ed 	b.w	2fec0 <z_impl_k_sem_give>
   2bae6:	bf00      	nop
   2bae8:	20002ad8 	.word	0x20002ad8
   2baec:	4000d004 	.word	0x4000d004
   2baf0:	20002af0 	.word	0x20002af0

0002baf4 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   2baf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2baf6:	460f      	mov	r7, r1
   2baf8:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   2bafa:	b948      	cbnz	r0, 2bb10 <entropy_cc3xx_rng_get_entropy+0x1c>
   2bafc:	4919      	ldr	r1, [pc, #100]	; (2bb64 <entropy_cc3xx_rng_get_entropy+0x70>)
   2bafe:	481a      	ldr	r0, [pc, #104]	; (2bb68 <entropy_cc3xx_rng_get_entropy+0x74>)
   2bb00:	4a1a      	ldr	r2, [pc, #104]	; (2bb6c <entropy_cc3xx_rng_get_entropy+0x78>)
   2bb02:	2324      	movs	r3, #36	; 0x24
   2bb04:	f00b fb09 	bl	3711a <printk>
   2bb08:	4818      	ldr	r0, [pc, #96]	; (2bb6c <entropy_cc3xx_rng_get_entropy+0x78>)
   2bb0a:	2124      	movs	r1, #36	; 0x24
   2bb0c:	f00b fcab 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   2bb10:	b94f      	cbnz	r7, 2bb26 <entropy_cc3xx_rng_get_entropy+0x32>
   2bb12:	4917      	ldr	r1, [pc, #92]	; (2bb70 <entropy_cc3xx_rng_get_entropy+0x7c>)
   2bb14:	4814      	ldr	r0, [pc, #80]	; (2bb68 <entropy_cc3xx_rng_get_entropy+0x74>)
   2bb16:	4a15      	ldr	r2, [pc, #84]	; (2bb6c <entropy_cc3xx_rng_get_entropy+0x78>)
   2bb18:	2325      	movs	r3, #37	; 0x25
   2bb1a:	f00b fafe 	bl	3711a <printk>
   2bb1e:	4813      	ldr	r0, [pc, #76]	; (2bb6c <entropy_cc3xx_rng_get_entropy+0x78>)
   2bb20:	2125      	movs	r1, #37	; 0x25
   2bb22:	f00b fca0 	bl	37466 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2bb26:	f44f 6580 	mov.w	r5, #1024	; 0x400
   2bb2a:	2400      	movs	r4, #0
   2bb2c:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   2bb30:	42a6      	cmp	r6, r4
   2bb32:	d801      	bhi.n	2bb38 <entropy_cc3xx_rng_get_entropy+0x44>
		offset += chunk_size;
	}
#endif

	return res;
}
   2bb34:	b003      	add	sp, #12
   2bb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2bb38:	1b33      	subs	r3, r6, r4
   2bb3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2bb3e:	bf38      	it	cc
   2bb40:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   2bb42:	462a      	mov	r2, r5
   2bb44:	ab01      	add	r3, sp, #4
   2bb46:	1939      	adds	r1, r7, r4
   2bb48:	2000      	movs	r0, #0
   2bb4a:	f007 fbb3 	bl	332b4 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   2bb4e:	9b01      	ldr	r3, [sp, #4]
   2bb50:	42ab      	cmp	r3, r5
   2bb52:	d103      	bne.n	2bb5c <entropy_cc3xx_rng_get_entropy+0x68>
		if (res != 0) {
   2bb54:	2800      	cmp	r0, #0
   2bb56:	d1ed      	bne.n	2bb34 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
   2bb58:	442c      	add	r4, r5
   2bb5a:	e7e9      	b.n	2bb30 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   2bb5c:	f06f 0015 	mvn.w	r0, #21
   2bb60:	e7e8      	b.n	2bb34 <entropy_cc3xx_rng_get_entropy+0x40>
   2bb62:	bf00      	nop
   2bb64:	0003f6a2 	.word	0x0003f6a2
   2bb68:	0003c48a 	.word	0x0003c48a
   2bb6c:	0003f672 	.word	0x0003f672
   2bb70:	0003f6b5 	.word	0x0003f6b5

0002bb74 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2bb74:	4919      	ldr	r1, [pc, #100]	; (2bbdc <sys_clock_timeout_handler+0x68>)
{
   2bb76:	b570      	push	{r4, r5, r6, lr}
   2bb78:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   2bb7a:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2bb7e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   2bb80:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2bb84:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2bb88:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   2bb8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2bb8e:	f04f 0500 	mov.w	r5, #0
   2bb92:	d20a      	bcs.n	2bbaa <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2bb94:	4b12      	ldr	r3, [pc, #72]	; (2bbe0 <sys_clock_timeout_handler+0x6c>)
   2bb96:	6819      	ldr	r1, [r3, #0]
   2bb98:	060a      	lsls	r2, r1, #24
   2bb9a:	0a0b      	lsrs	r3, r1, #8
   2bb9c:	1992      	adds	r2, r2, r6
   2bb9e:	4911      	ldr	r1, [pc, #68]	; (2bbe4 <sys_clock_timeout_handler+0x70>)
   2bba0:	f143 0300 	adc.w	r3, r3, #0
   2bba4:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   2bba8:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2bbaa:	f006 fc11 	bl	323d0 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   2bbae:	00a3      	lsls	r3, r4, #2
   2bbb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2bbb4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2bbb8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   2bbbc:	42b2      	cmp	r2, r6
   2bbbe:	d10b      	bne.n	2bbd8 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   2bbc0:	b91d      	cbnz	r5, 2bbca <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   2bbc2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2bbc6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   2bbca:	4b07      	ldr	r3, [pc, #28]	; (2bbe8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2bbcc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   2bbd0:	fa00 f404 	lsl.w	r4, r0, r4
   2bbd4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   2bbd8:	bd70      	pop	{r4, r5, r6, pc}
   2bbda:	bf00      	nop
   2bbdc:	20001f00 	.word	0x20001f00
   2bbe0:	20002b34 	.word	0x20002b34
   2bbe4:	20001ee8 	.word	0x20001ee8
   2bbe8:	40011000 	.word	0x40011000

0002bbec <compare_int_lock>:
{
   2bbec:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2bbee:	2301      	movs	r3, #1
   2bbf0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bbf2:	4a11      	ldr	r2, [pc, #68]	; (2bc38 <compare_int_lock+0x4c>)
   2bbf4:	f3bf 8f5b 	dmb	ish
   2bbf8:	43dc      	mvns	r4, r3
   2bbfa:	e852 1f00 	ldrex	r1, [r2]
   2bbfe:	ea01 0c04 	and.w	ip, r1, r4
   2bc02:	e842 ce00 	strex	lr, ip, [r2]
   2bc06:	f1be 0f00 	cmp.w	lr, #0
   2bc0a:	d1f6      	bne.n	2bbfa <compare_int_lock+0xe>
   2bc0c:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2bc10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2bc14:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   2bc18:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2bc1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   2bc20:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   2bc24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2bc28:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   2bc2c:	420b      	tst	r3, r1
}
   2bc2e:	bf14      	ite	ne
   2bc30:	2001      	movne	r0, #1
   2bc32:	2000      	moveq	r0, #0
   2bc34:	bd10      	pop	{r4, pc}
   2bc36:	bf00      	nop
   2bc38:	20002b30 	.word	0x20002b30

0002bc3c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   2bc3c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bc3e:	4a12      	ldr	r2, [pc, #72]	; (2bc88 <compare_int_unlock.part.0+0x4c>)
   2bc40:	f3bf 8f5b 	dmb	ish
   2bc44:	4083      	lsls	r3, r0
   2bc46:	e852 1f00 	ldrex	r1, [r2]
   2bc4a:	4319      	orrs	r1, r3
   2bc4c:	e842 1c00 	strex	ip, r1, [r2]
   2bc50:	f1bc 0f00 	cmp.w	ip, #0
   2bc54:	d1f7      	bne.n	2bc46 <compare_int_unlock.part.0+0xa>
   2bc56:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   2bc5a:	4a0c      	ldr	r2, [pc, #48]	; (2bc8c <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2bc5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2bc60:	4083      	lsls	r3, r0
   2bc62:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bc66:	4b0a      	ldr	r3, [pc, #40]	; (2bc90 <compare_int_unlock.part.0+0x54>)
   2bc68:	f3bf 8f5b 	dmb	ish
   2bc6c:	681b      	ldr	r3, [r3, #0]
   2bc6e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2bc72:	fa23 f000 	lsr.w	r0, r3, r0
   2bc76:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2bc78:	bf42      	ittt	mi
   2bc7a:	4b06      	ldrmi	r3, [pc, #24]	; (2bc94 <compare_int_unlock.part.0+0x58>)
   2bc7c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   2bc80:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   2bc84:	4770      	bx	lr
   2bc86:	bf00      	nop
   2bc88:	20002b30 	.word	0x20002b30
   2bc8c:	40011000 	.word	0x40011000
   2bc90:	20002b2c 	.word	0x20002b2c
   2bc94:	e000e100 	.word	0xe000e100

0002bc98 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   2bc98:	4b0d      	ldr	r3, [pc, #52]	; (2bcd0 <z_nrf_rtc_timer_read+0x38>)
   2bc9a:	681b      	ldr	r3, [r3, #0]
   2bc9c:	0a19      	lsrs	r1, r3, #8
   2bc9e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2bca0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   2bca4:	4b0b      	ldr	r3, [pc, #44]	; (2bcd4 <z_nrf_rtc_timer_read+0x3c>)
   2bca6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   2bcaa:	18c0      	adds	r0, r0, r3
   2bcac:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2bcb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2bcb4:	d20a      	bcs.n	2bccc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   2bcb6:	4b08      	ldr	r3, [pc, #32]	; (2bcd8 <z_nrf_rtc_timer_read+0x40>)
   2bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   2bcbc:	4299      	cmp	r1, r3
   2bcbe:	bf08      	it	eq
   2bcc0:	4290      	cmpeq	r0, r2
   2bcc2:	d203      	bcs.n	2bccc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   2bcc4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2bcc8:	f141 0100 	adc.w	r1, r1, #0
}
   2bccc:	4770      	bx	lr
   2bcce:	bf00      	nop
   2bcd0:	20002b34 	.word	0x20002b34
   2bcd4:	40011000 	.word	0x40011000
   2bcd8:	20001ee8 	.word	0x20001ee8

0002bcdc <compare_set>:
{
   2bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bce0:	b085      	sub	sp, #20
   2bce2:	4616      	mov	r6, r2
   2bce4:	461f      	mov	r7, r3
   2bce6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   2bce8:	f7ff ff80 	bl	2bbec <compare_int_lock>
   2bcec:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   2bcee:	f7ff ffd3 	bl	2bc98 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2bcf2:	42b9      	cmp	r1, r7
   2bcf4:	bf08      	it	eq
   2bcf6:	42b0      	cmpeq	r0, r6
   2bcf8:	d27f      	bcs.n	2bdfa <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   2bcfa:	ebb6 0800 	subs.w	r8, r6, r0
   2bcfe:	eb67 0901 	sbc.w	r9, r7, r1
   2bd02:	2300      	movs	r3, #0
   2bd04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   2bd08:	454b      	cmp	r3, r9
   2bd0a:	bf08      	it	eq
   2bd0c:	4542      	cmpeq	r2, r8
   2bd0e:	f0c0 8085 	bcc.w	2be1c <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   2bd12:	4b44      	ldr	r3, [pc, #272]	; (2be24 <compare_set+0x148>)
   2bd14:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   2bd18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2bd1c:	429f      	cmp	r7, r3
   2bd1e:	bf08      	it	eq
   2bd20:	4296      	cmpeq	r6, r2
   2bd22:	d054      	beq.n	2bdce <compare_set+0xf2>
   2bd24:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2bd28:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   2bd2c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2bd30:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2bd34:	fa0b f205 	lsl.w	r2, fp, r5
   2bd38:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2bd3c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2bd40:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2bd44:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   2bd46:	4a38      	ldr	r2, [pc, #224]	; (2be28 <compare_set+0x14c>)
    return p_reg->CC[ch];
   2bd48:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   2bd4c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2bd50:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   2bd54:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2bd58:	461c      	mov	r4, r3
   2bd5a:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   2bd5c:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   2bd60:	eba0 000a 	sub.w	r0, r0, sl
   2bd64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2bd68:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   2bd6c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   2bd6e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   2bd72:	d105      	bne.n	2bd80 <compare_set+0xa4>
   2bd74:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   2bd76:	2013      	movs	r0, #19
   2bd78:	f00e fb10 	bl	3a39c <z_impl_k_busy_wait>
   2bd7c:	4a2a      	ldr	r2, [pc, #168]	; (2be28 <compare_set+0x14c>)
   2bd7e:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   2bd80:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   2bd82:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   2bd86:	eba4 000c 	sub.w	r0, r4, ip
   2bd8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   2bd8e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2bd92:	bf88      	it	hi
   2bd94:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2bd96:	2000      	movs	r0, #0
   2bd98:	f8c8 0000 	str.w	r0, [r8]
   2bd9c:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   2bda0:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2bda4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   2bda8:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   2bdac:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   2bdb0:	4582      	cmp	sl, r0
   2bdb2:	d006      	beq.n	2bdc2 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   2bdb4:	1a20      	subs	r0, r4, r0
   2bdb6:	3802      	subs	r0, #2
   2bdb8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   2bdbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2bdc0:	d819      	bhi.n	2bdf6 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   2bdc2:	1ae4      	subs	r4, r4, r3
   2bdc4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   2bdc8:	1932      	adds	r2, r6, r4
   2bdca:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   2bdce:	4c15      	ldr	r4, [pc, #84]	; (2be24 <compare_set+0x148>)
   2bdd0:	0129      	lsls	r1, r5, #4
   2bdd2:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   2bdd6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   2bdda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   2bddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   2bdde:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   2bde0:	6043      	str	r3, [r0, #4]
	return ret;
   2bde2:	2400      	movs	r4, #0
	if (key) {
   2bde4:	9b01      	ldr	r3, [sp, #4]
   2bde6:	b113      	cbz	r3, 2bdee <compare_set+0x112>
   2bde8:	4628      	mov	r0, r5
   2bdea:	f7ff ff27 	bl	2bc3c <compare_int_unlock.part.0>
}
   2bdee:	4620      	mov	r0, r4
   2bdf0:	b005      	add	sp, #20
   2bdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bdf6:	4620      	mov	r0, r4
   2bdf8:	e7b0      	b.n	2bd5c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   2bdfa:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bdfc:	4a0b      	ldr	r2, [pc, #44]	; (2be2c <compare_set+0x150>)
   2bdfe:	f3bf 8f5b 	dmb	ish
   2be02:	40ab      	lsls	r3, r5
   2be04:	e852 1f00 	ldrex	r1, [r2]
   2be08:	4319      	orrs	r1, r3
   2be0a:	e842 1000 	strex	r0, r1, [r2]
   2be0e:	2800      	cmp	r0, #0
   2be10:	d1f8      	bne.n	2be04 <compare_set+0x128>
   2be12:	f3bf 8f5b 	dmb	ish
   2be16:	4632      	mov	r2, r6
   2be18:	463b      	mov	r3, r7
   2be1a:	e7d8      	b.n	2bdce <compare_set+0xf2>
			return -EINVAL;
   2be1c:	f06f 0415 	mvn.w	r4, #21
   2be20:	e7e0      	b.n	2bde4 <compare_set+0x108>
   2be22:	bf00      	nop
   2be24:	20001ef0 	.word	0x20001ef0
   2be28:	40011000 	.word	0x40011000
   2be2c:	20002b2c 	.word	0x20002b2c

0002be30 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   2be30:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2be32:	4b19      	ldr	r3, [pc, #100]	; (2be98 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   2be34:	4d19      	ldr	r5, [pc, #100]	; (2be9c <sys_clock_driver_init+0x6c>)
   2be36:	2400      	movs	r4, #0
   2be38:	f04f 30ff 	mov.w	r0, #4294967295
   2be3c:	f04f 31ff 	mov.w	r1, #4294967295
   2be40:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   2be44:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   2be48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2be4c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2be50:	4b13      	ldr	r3, [pc, #76]	; (2bea0 <sys_clock_driver_init+0x70>)
   2be52:	2602      	movs	r6, #2
   2be54:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2be58:	2101      	movs	r1, #1
   2be5a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   2be5e:	2011      	movs	r0, #17
   2be60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   2be64:	4622      	mov	r2, r4
   2be66:	f7f6 f9f9 	bl	2225c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2be6a:	2011      	movs	r0, #17
   2be6c:	f7f6 f9c4 	bl	221f8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2be70:	4a0c      	ldr	r2, [pc, #48]	; (2bea4 <sys_clock_driver_init+0x74>)
   2be72:	2301      	movs	r3, #1
   2be74:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   2be76:	4a0c      	ldr	r2, [pc, #48]	; (2bea8 <sys_clock_driver_init+0x78>)
   2be78:	602b      	str	r3, [r5, #0]
   2be7a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2be7c:	4b0b      	ldr	r3, [pc, #44]	; (2beac <sys_clock_driver_init+0x7c>)
   2be7e:	4a0c      	ldr	r2, [pc, #48]	; (2beb0 <sys_clock_driver_init+0x80>)
   2be80:	9300      	str	r3, [sp, #0]
   2be82:	9401      	str	r4, [sp, #4]
   2be84:	2300      	movs	r3, #0
   2be86:	4620      	mov	r0, r4
   2be88:	f7ff ff28 	bl	2bcdc <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2be8c:	4630      	mov	r0, r6
   2be8e:	f7fe fa6b 	bl	2a368 <z_nrf_clock_control_lf_on>

	return 0;
}
   2be92:	4620      	mov	r0, r4
   2be94:	b002      	add	sp, #8
   2be96:	bd70      	pop	{r4, r5, r6, pc}
   2be98:	20001ef0 	.word	0x20001ef0
   2be9c:	40011000 	.word	0x40011000
   2bea0:	e000e100 	.word	0xe000e100
   2bea4:	40011008 	.word	0x40011008
   2bea8:	20002b30 	.word	0x20002b30
   2beac:	0002bb75 	.word	0x0002bb75
   2beb0:	007fffff 	.word	0x007fffff

0002beb4 <rtc_nrf_isr>:
{
   2beb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   2beb8:	4c2a      	ldr	r4, [pc, #168]	; (2bf64 <rtc_nrf_isr+0xb0>)
   2beba:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2bebe:	0799      	lsls	r1, r3, #30
   2bec0:	d509      	bpl.n	2bed6 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2bec2:	4b29      	ldr	r3, [pc, #164]	; (2bf68 <rtc_nrf_isr+0xb4>)
   2bec4:	681a      	ldr	r2, [r3, #0]
   2bec6:	b132      	cbz	r2, 2bed6 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2bec8:	2200      	movs	r2, #0
   2beca:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   2becc:	4a27      	ldr	r2, [pc, #156]	; (2bf6c <rtc_nrf_isr+0xb8>)
   2bece:	681b      	ldr	r3, [r3, #0]
   2bed0:	6813      	ldr	r3, [r2, #0]
   2bed2:	3301      	adds	r3, #1
   2bed4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2bed6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2beda:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   2bedc:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   2bee0:	03d2      	lsls	r2, r2, #15
   2bee2:	d52c      	bpl.n	2bf3e <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bee4:	f3bf 8f5b 	dmb	ish
   2bee8:	4a21      	ldr	r2, [pc, #132]	; (2bf70 <rtc_nrf_isr+0xbc>)
   2beea:	e852 1f00 	ldrex	r1, [r2]
   2beee:	f021 0001 	bic.w	r0, r1, #1
   2bef2:	e842 0500 	strex	r5, r0, [r2]
   2bef6:	2d00      	cmp	r5, #0
   2bef8:	d1f7      	bne.n	2beea <rtc_nrf_isr+0x36>
   2befa:	f3bf 8f5b 	dmb	ish
   2befe:	4a1d      	ldr	r2, [pc, #116]	; (2bf74 <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   2bf00:	b909      	cbnz	r1, 2bf06 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2bf02:	6811      	ldr	r1, [r2, #0]
		if (result) {
   2bf04:	b1d9      	cbz	r1, 2bf3e <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2bf06:	2500      	movs	r5, #0
   2bf08:	6015      	str	r5, [r2, #0]
   2bf0a:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2bf0c:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   2bf10:	f7ff fec2 	bl	2bc98 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2bf14:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2bf18:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   2bf1a:	4b17      	ldr	r3, [pc, #92]	; (2bf78 <rtc_nrf_isr+0xc4>)
   2bf1c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   2bf20:	4549      	cmp	r1, r9
   2bf22:	bf08      	it	eq
   2bf24:	4540      	cmpeq	r0, r8
   2bf26:	d20f      	bcs.n	2bf48 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   2bf28:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2bf2a:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   2bf2e:	b141      	cbz	r1, 2bf42 <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   2bf30:	f8cd a000 	str.w	sl, [sp]
   2bf34:	4642      	mov	r2, r8
   2bf36:	464b      	mov	r3, r9
   2bf38:	2000      	movs	r0, #0
   2bf3a:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2bf3c:	e001      	b.n	2bf42 <rtc_nrf_isr+0x8e>
   2bf3e:	f383 8810 	msr	PRIMASK, r3
}
   2bf42:	b002      	add	sp, #8
   2bf44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2bf48:	f04f 36ff 	mov.w	r6, #4294967295
   2bf4c:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   2bf50:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2bf54:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   2bf58:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   2bf5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2bf5e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   2bf62:	e7e2      	b.n	2bf2a <rtc_nrf_isr+0x76>
   2bf64:	40011000 	.word	0x40011000
   2bf68:	40011104 	.word	0x40011104
   2bf6c:	20002b34 	.word	0x20002b34
   2bf70:	20002b2c 	.word	0x20002b2c
   2bf74:	40011140 	.word	0x40011140
   2bf78:	20001ef0 	.word	0x20001ef0

0002bf7c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2bf7c:	4b14      	ldr	r3, [pc, #80]	; (2bfd0 <sys_clock_set_timeout+0x54>)
{
   2bf7e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2bf80:	f1b0 3fff 	cmp.w	r0, #4294967295
   2bf84:	bf08      	it	eq
   2bf86:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2bf88:	1e44      	subs	r4, r0, #1
   2bf8a:	2c00      	cmp	r4, #0
   2bf8c:	dd1e      	ble.n	2bfcc <sys_clock_set_timeout+0x50>
   2bf8e:	429c      	cmp	r4, r3
   2bf90:	bfa8      	it	ge
   2bf92:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2bf94:	f7ff fe80 	bl	2bc98 <z_nrf_rtc_timer_read>
   2bf98:	4b0e      	ldr	r3, [pc, #56]	; (2bfd4 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2bf9a:	490f      	ldr	r1, [pc, #60]	; (2bfd8 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   2bfa0:	1a80      	subs	r0, r0, r2
		ticks = 0;
   2bfa2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2bfa6:	bf28      	it	cs
   2bfa8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2bfaa:	3001      	adds	r0, #1
   2bfac:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   2bfae:	4808      	ldr	r0, [pc, #32]	; (2bfd0 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2bfb0:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   2bfb2:	4284      	cmp	r4, r0
   2bfb4:	bf28      	it	cs
   2bfb6:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2bfb8:	1912      	adds	r2, r2, r4
   2bfba:	f04f 0000 	mov.w	r0, #0
   2bfbe:	9001      	str	r0, [sp, #4]
   2bfc0:	f143 0300 	adc.w	r3, r3, #0
   2bfc4:	f7ff fe8a 	bl	2bcdc <compare_set>
}
   2bfc8:	b002      	add	sp, #8
   2bfca:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2bfcc:	2400      	movs	r4, #0
   2bfce:	e7e1      	b.n	2bf94 <sys_clock_set_timeout+0x18>
   2bfd0:	007fffff 	.word	0x007fffff
   2bfd4:	20001f00 	.word	0x20001f00
   2bfd8:	0002bb75 	.word	0x0002bb75

0002bfdc <sys_clock_elapsed>:
{
   2bfdc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2bfde:	f7ff fe5b 	bl	2bc98 <z_nrf_rtc_timer_read>
   2bfe2:	4b02      	ldr	r3, [pc, #8]	; (2bfec <sys_clock_elapsed+0x10>)
   2bfe4:	681b      	ldr	r3, [r3, #0]
}
   2bfe6:	1ac0      	subs	r0, r0, r3
   2bfe8:	bd08      	pop	{r3, pc}
   2bfea:	bf00      	nop
   2bfec:	20001f00 	.word	0x20001f00

0002bff0 <z_impl_gpio_pin_configure>:
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bff0:	6843      	ldr	r3, [r0, #4]
{
   2bff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bff6:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
   2bff8:	f8d0 9008 	ldr.w	r9, [r0, #8]
	struct gpio_driver_data *data =
   2bffc:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2c000:	2601      	movs	r6, #1
   2c002:	408e      	lsls	r6, r1
   2c004:	421e      	tst	r6, r3
{
   2c006:	4604      	mov	r4, r0
   2c008:	460d      	mov	r5, r1
   2c00a:	4617      	mov	r7, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2c00c:	d10e      	bne.n	2c02c <z_impl_gpio_pin_configure+0x3c>
   2c00e:	490e      	ldr	r1, [pc, #56]	; (2c048 <z_impl_gpio_pin_configure+0x58>)
   2c010:	4a0e      	ldr	r2, [pc, #56]	; (2c04c <z_impl_gpio_pin_configure+0x5c>)
   2c012:	480f      	ldr	r0, [pc, #60]	; (2c050 <z_impl_gpio_pin_configure+0x60>)
   2c014:	f240 23fd 	movw	r3, #765	; 0x2fd
   2c018:	f00b f87f 	bl	3711a <printk>
   2c01c:	480d      	ldr	r0, [pc, #52]	; (2c054 <z_impl_gpio_pin_configure+0x64>)
   2c01e:	f00b f87c 	bl	3711a <printk>
   2c022:	480a      	ldr	r0, [pc, #40]	; (2c04c <z_impl_gpio_pin_configure+0x5c>)
   2c024:	f240 21fd 	movw	r1, #765	; 0x2fd
   2c028:	f00b fa1d 	bl	37466 <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2c02c:	f8d8 3000 	ldr.w	r3, [r8]
   2c030:	ea23 0606 	bic.w	r6, r3, r6
   2c034:	f8c8 6000 	str.w	r6, [r8]
	}

	return api->pin_configure(port, pin, flags);
   2c038:	f8d9 3000 	ldr.w	r3, [r9]
   2c03c:	463a      	mov	r2, r7
   2c03e:	4629      	mov	r1, r5
   2c040:	4620      	mov	r0, r4
}
   2c042:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_configure(port, pin, flags);
   2c046:	4718      	bx	r3
   2c048:	0003f700 	.word	0x0003f700
   2c04c:	0003f6d6 	.word	0x0003f6d6
   2c050:	0003c48a 	.word	0x0003c48a
   2c054:	0003f73e 	.word	0x0003f73e

0002c058 <z_impl_gpio_pin_interrupt_configure>:
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   2c058:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   2c05c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   2c060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_driver_config *const cfg =
   2c064:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
{
   2c068:	4605      	mov	r5, r0
   2c06a:	460e      	mov	r6, r1
   2c06c:	4614      	mov	r4, r2
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   2c06e:	d142      	bne.n	2c0f6 <z_impl_gpio_pin_interrupt_configure+0x9e>
   2c070:	4928      	ldr	r1, [pc, #160]	; (2c114 <z_impl_gpio_pin_interrupt_configure+0xbc>)
   2c072:	4a29      	ldr	r2, [pc, #164]	; (2c118 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   2c074:	4829      	ldr	r0, [pc, #164]	; (2c11c <z_impl_gpio_pin_interrupt_configure+0xc4>)
   2c076:	f240 2389 	movw	r3, #649	; 0x289
   2c07a:	f00b f84e 	bl	3711a <printk>
   2c07e:	4828      	ldr	r0, [pc, #160]	; (2c120 <z_impl_gpio_pin_interrupt_configure+0xc8>)
   2c080:	f00b f84b 	bl	3711a <printk>
   2c084:	f240 2189 	movw	r1, #649	; 0x289
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   2c088:	4823      	ldr	r0, [pc, #140]	; (2c118 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   2c08a:	f00b f9ec 	bl	37466 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   2c08e:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   2c092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2c096:	d10e      	bne.n	2c0b6 <z_impl_gpio_pin_interrupt_configure+0x5e>
   2c098:	4922      	ldr	r1, [pc, #136]	; (2c124 <z_impl_gpio_pin_interrupt_configure+0xcc>)
   2c09a:	4a1f      	ldr	r2, [pc, #124]	; (2c118 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   2c09c:	481f      	ldr	r0, [pc, #124]	; (2c11c <z_impl_gpio_pin_interrupt_configure+0xc4>)
   2c09e:	f240 2397 	movw	r3, #663	; 0x297
   2c0a2:	f00b f83a 	bl	3711a <printk>
   2c0a6:	4820      	ldr	r0, [pc, #128]	; (2c128 <z_impl_gpio_pin_interrupt_configure+0xd0>)
   2c0a8:	f00b f837 	bl	3711a <printk>
   2c0ac:	481a      	ldr	r0, [pc, #104]	; (2c118 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   2c0ae:	f240 2197 	movw	r1, #663	; 0x297
   2c0b2:	f00b f9d8 	bl	37466 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2c0b6:	f8d8 2000 	ldr.w	r2, [r8]
   2c0ba:	2301      	movs	r3, #1
   2c0bc:	40b3      	lsls	r3, r6
   2c0be:	4213      	tst	r3, r2
   2c0c0:	d10e      	bne.n	2c0e0 <z_impl_gpio_pin_interrupt_configure+0x88>
   2c0c2:	491a      	ldr	r1, [pc, #104]	; (2c12c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   2c0c4:	4a14      	ldr	r2, [pc, #80]	; (2c118 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   2c0c6:	4815      	ldr	r0, [pc, #84]	; (2c11c <z_impl_gpio_pin_interrupt_configure+0xc4>)
   2c0c8:	f240 239d 	movw	r3, #669	; 0x29d
   2c0cc:	f00b f825 	bl	3711a <printk>
   2c0d0:	4817      	ldr	r0, [pc, #92]	; (2c130 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   2c0d2:	f00b f822 	bl	3711a <printk>
   2c0d6:	4810      	ldr	r0, [pc, #64]	; (2c118 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   2c0d8:	f240 219d 	movw	r1, #669	; 0x29d
   2c0dc:	f00b f9c3 	bl	37466 <assert_post_action>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2c0e0:	69bf      	ldr	r7, [r7, #24]
   2c0e2:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   2c0e6:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
   2c0ea:	4631      	mov	r1, r6
   2c0ec:	4628      	mov	r0, r5
   2c0ee:	46bc      	mov	ip, r7
}
   2c0f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2c0f4:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   2c0f6:	2b00      	cmp	r3, #0
   2c0f8:	d1c9      	bne.n	2c08e <z_impl_gpio_pin_interrupt_configure+0x36>
   2c0fa:	490e      	ldr	r1, [pc, #56]	; (2c134 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   2c0fc:	4a06      	ldr	r2, [pc, #24]	; (2c118 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   2c0fe:	4807      	ldr	r0, [pc, #28]	; (2c11c <z_impl_gpio_pin_interrupt_configure+0xc4>)
   2c100:	f240 238d 	movw	r3, #653	; 0x28d
   2c104:	f00b f809 	bl	3711a <printk>
   2c108:	480b      	ldr	r0, [pc, #44]	; (2c138 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   2c10a:	f00b f806 	bl	3711a <printk>
   2c10e:	f240 218d 	movw	r1, #653	; 0x28d
   2c112:	e7b9      	b.n	2c088 <z_impl_gpio_pin_interrupt_configure+0x30>
   2c114:	0003f750 	.word	0x0003f750
   2c118:	0003f6d6 	.word	0x0003f6d6
   2c11c:	0003c48a 	.word	0x0003c48a
   2c120:	0003f791 	.word	0x0003f791
   2c124:	0003f812 	.word	0x0003f812
   2c128:	0003f85c 	.word	0x0003f85c
   2c12c:	0003f700 	.word	0x0003f700
   2c130:	0003f73e 	.word	0x0003f73e
   2c134:	0003f7bd 	.word	0x0003f7bd
   2c138:	0003f7e7 	.word	0x0003f7e7

0002c13c <gpio_pin_set_raw>:
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2c13c:	6843      	ldr	r3, [r0, #4]
{
   2c13e:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2c140:	681b      	ldr	r3, [r3, #0]
   2c142:	2501      	movs	r5, #1
   2c144:	408d      	lsls	r5, r1
   2c146:	421d      	tst	r5, r3
{
   2c148:	4604      	mov	r4, r0
   2c14a:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2c14c:	d10e      	bne.n	2c16c <gpio_pin_set_raw+0x30>
   2c14e:	490d      	ldr	r1, [pc, #52]	; (2c184 <gpio_pin_set_raw+0x48>)
   2c150:	4a0d      	ldr	r2, [pc, #52]	; (2c188 <gpio_pin_set_raw+0x4c>)
   2c152:	480e      	ldr	r0, [pc, #56]	; (2c18c <gpio_pin_set_raw+0x50>)
   2c154:	f240 4391 	movw	r3, #1169	; 0x491
   2c158:	f00a ffdf 	bl	3711a <printk>
   2c15c:	480c      	ldr	r0, [pc, #48]	; (2c190 <gpio_pin_set_raw+0x54>)
   2c15e:	f00a ffdc 	bl	3711a <printk>
   2c162:	4809      	ldr	r0, [pc, #36]	; (2c188 <gpio_pin_set_raw+0x4c>)
   2c164:	f240 4191 	movw	r1, #1169	; 0x491
   2c168:	f00b f97d 	bl	37466 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   2c16c:	b136      	cbz	r6, 2c17c <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
   2c16e:	68a3      	ldr	r3, [r4, #8]
   2c170:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2c172:	4629      	mov	r1, r5
   2c174:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   2c176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   2c17a:	4718      	bx	r3
   2c17c:	68a3      	ldr	r3, [r4, #8]
   2c17e:	691b      	ldr	r3, [r3, #16]
   2c180:	e7f7      	b.n	2c172 <gpio_pin_set_raw+0x36>
   2c182:	bf00      	nop
   2c184:	0003f700 	.word	0x0003f700
   2c188:	0003f6d6 	.word	0x0003f6d6
   2c18c:	0003c48a 	.word	0x0003c48a
   2c190:	0003f73e 	.word	0x0003f73e

0002c194 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   2c194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   2c198:	2400      	movs	r4, #0
   2c19a:	4f23      	ldr	r7, [pc, #140]	; (2c228 <get_buttons+0x94>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
		int val;

		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   2c19c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2c240 <get_buttons+0xac>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2c1a0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2c244 <get_buttons+0xb0>
   2c1a4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 2c248 <get_buttons+0xb4>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c1a8:	4625      	mov	r5, r4
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   2c1aa:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   2c1ae:	f857 bb04 	ldr.w	fp, [r7], #4
   2c1b2:	791b      	ldrb	r3, [r3, #4]
   2c1b4:	2601      	movs	r6, #1
   2c1b6:	409e      	lsls	r6, r3
   2c1b8:	f8db 3004 	ldr.w	r3, [fp, #4]
   2c1bc:	681b      	ldr	r3, [r3, #0]
   2c1be:	421e      	tst	r6, r3
   2c1c0:	d10e      	bne.n	2c1e0 <get_buttons+0x4c>
   2c1c2:	4651      	mov	r1, sl
   2c1c4:	4819      	ldr	r0, [pc, #100]	; (2c22c <get_buttons+0x98>)
   2c1c6:	f240 433a 	movw	r3, #1082	; 0x43a
   2c1ca:	4642      	mov	r2, r8
   2c1cc:	f00a ffa5 	bl	3711a <printk>
   2c1d0:	4817      	ldr	r0, [pc, #92]	; (2c230 <get_buttons+0x9c>)
   2c1d2:	f00a ffa2 	bl	3711a <printk>
   2c1d6:	f240 413a 	movw	r1, #1082	; 0x43a
   2c1da:	4640      	mov	r0, r8
   2c1dc:	f00b f943 	bl	37466 <assert_post_action>
	return api->port_get_raw(port, value);
   2c1e0:	f8db 3008 	ldr.w	r3, [fp, #8]
   2c1e4:	a901      	add	r1, sp, #4
   2c1e6:	685b      	ldr	r3, [r3, #4]
   2c1e8:	4658      	mov	r0, fp
   2c1ea:	4798      	blx	r3
	if (ret == 0) {
   2c1ec:	2800      	cmp	r0, #0
   2c1ee:	d10a      	bne.n	2c206 <get_buttons+0x72>
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   2c1f0:	9b01      	ldr	r3, [sp, #4]
   2c1f2:	421e      	tst	r6, r3
   2c1f4:	d003      	beq.n	2c1fe <get_buttons+0x6a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c1f6:	3501      	adds	r5, #1
   2c1f8:	2d04      	cmp	r5, #4
   2c1fa:	d1d6      	bne.n	2c1aa <get_buttons+0x16>
   2c1fc:	e00f      	b.n	2c21e <get_buttons+0x8a>
		    (!val && IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS))) {
			ret |= 1U << i;
   2c1fe:	2301      	movs	r3, #1
   2c200:	40ab      	lsls	r3, r5
   2c202:	431c      	orrs	r4, r3
   2c204:	e7f7      	b.n	2c1f6 <get_buttons+0x62>
		if (val < 0) {
   2c206:	daf6      	bge.n	2c1f6 <get_buttons+0x62>
   2c208:	4b0a      	ldr	r3, [pc, #40]	; (2c234 <get_buttons+0xa0>)
   2c20a:	480b      	ldr	r0, [pc, #44]	; (2c238 <get_buttons+0xa4>)
			LOG_ERR("Cannot read gpio pin");
   2c20c:	490b      	ldr	r1, [pc, #44]	; (2c23c <get_buttons+0xa8>)
   2c20e:	1ac0      	subs	r0, r0, r3
   2c210:	08c0      	lsrs	r0, r0, #3
   2c212:	0180      	lsls	r0, r0, #6
   2c214:	f040 0001 	orr.w	r0, r0, #1
   2c218:	f00b f93a 	bl	37490 <log_string_sync>
			return 0;
   2c21c:	2400      	movs	r4, #0
		}
	}

	return ret;
}
   2c21e:	4620      	mov	r0, r4
   2c220:	b003      	add	sp, #12
   2c222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c226:	bf00      	nop
   2c228:	20002b38 	.word	0x20002b38
   2c22c:	0003c48a 	.word	0x0003c48a
   2c230:	0003f73e 	.word	0x0003f73e
   2c234:	0003b448 	.word	0x0003b448
   2c238:	0003b4e8 	.word	0x0003b4e8
   2c23c:	0003f8a1 	.word	0x0003f8a1
   2c240:	0003bdb4 	.word	0x0003bdb4
   2c244:	0003f6d6 	.word	0x0003f6d6
   2c248:	0003f700 	.word	0x0003f700

0002c24c <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   2c24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   2c250:	f8df 8060 	ldr.w	r8, [pc, #96]	; 2c2b4 <dk_set_leds_state.part.0+0x68>
   2c254:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2c2b8 <dk_set_leds_state.part.0+0x6c>
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   2c258:	4606      	mov	r6, r0
   2c25a:	460f      	mov	r7, r1
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2c25c:	2400      	movs	r4, #0
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   2c25e:	fa26 f204 	lsr.w	r2, r6, r4
   2c262:	fa27 f304 	lsr.w	r3, r7, r4
   2c266:	4313      	orrs	r3, r2
   2c268:	07db      	lsls	r3, r3, #31
   2c26a:	d518      	bpl.n	2c29e <dk_set_leds_state.part.0+0x52>
			int err = gpio_pin_set_raw(led_devs[i],
   2c26c:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   2c270:	43d2      	mvns	r2, r2
   2c272:	7919      	ldrb	r1, [r3, #4]
   2c274:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   2c278:	f002 0201 	and.w	r2, r2, #1
   2c27c:	f7ff ff5e 	bl	2c13c <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   2c280:	4605      	mov	r5, r0
   2c282:	b160      	cbz	r0, 2c29e <dk_set_leds_state.part.0+0x52>
   2c284:	4808      	ldr	r0, [pc, #32]	; (2c2a8 <dk_set_leds_state.part.0+0x5c>)
   2c286:	4b09      	ldr	r3, [pc, #36]	; (2c2ac <dk_set_leds_state.part.0+0x60>)
				LOG_ERR("Cannot write LED gpio");
   2c288:	4909      	ldr	r1, [pc, #36]	; (2c2b0 <dk_set_leds_state.part.0+0x64>)
   2c28a:	1a1b      	subs	r3, r3, r0
   2c28c:	08db      	lsrs	r3, r3, #3
   2c28e:	019b      	lsls	r3, r3, #6
   2c290:	f043 0001 	orr.w	r0, r3, #1
   2c294:	f00b f8fc 	bl	37490 <log_string_sync>
			}
		}
	}

	return 0;
}
   2c298:	4628      	mov	r0, r5
   2c29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2c29e:	3401      	adds	r4, #1
   2c2a0:	2c04      	cmp	r4, #4
   2c2a2:	d1dc      	bne.n	2c25e <dk_set_leds_state.part.0+0x12>
	return 0;
   2c2a4:	2500      	movs	r5, #0
   2c2a6:	e7f7      	b.n	2c298 <dk_set_leds_state.part.0+0x4c>
   2c2a8:	0003b448 	.word	0x0003b448
   2c2ac:	0003b4e8 	.word	0x0003b4e8
   2c2b0:	0003f8b6 	.word	0x0003f8b6
   2c2b4:	0003bdd4 	.word	0x0003bdd4
   2c2b8:	20002b7c 	.word	0x20002b7c

0002c2bc <button_pressed>:
{
   2c2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2c2be:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c2c2:	f3ef 8511 	mrs	r5, BASEPRI
   2c2c6:	f383 8812 	msr	BASEPRI_MAX, r3
   2c2ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c2ce:	482f      	ldr	r0, [pc, #188]	; (2c38c <button_pressed+0xd0>)
   2c2d0:	f003 fa78 	bl	2f7c4 <z_spin_lock_valid>
   2c2d4:	b968      	cbnz	r0, 2c2f2 <button_pressed+0x36>
   2c2d6:	4a2e      	ldr	r2, [pc, #184]	; (2c390 <button_pressed+0xd4>)
   2c2d8:	492e      	ldr	r1, [pc, #184]	; (2c394 <button_pressed+0xd8>)
   2c2da:	482f      	ldr	r0, [pc, #188]	; (2c398 <button_pressed+0xdc>)
   2c2dc:	2381      	movs	r3, #129	; 0x81
   2c2de:	f00a ff1c 	bl	3711a <printk>
   2c2e2:	492a      	ldr	r1, [pc, #168]	; (2c38c <button_pressed+0xd0>)
   2c2e4:	482d      	ldr	r0, [pc, #180]	; (2c39c <button_pressed+0xe0>)
   2c2e6:	f00a ff18 	bl	3711a <printk>
   2c2ea:	4829      	ldr	r0, [pc, #164]	; (2c390 <button_pressed+0xd4>)
   2c2ec:	2181      	movs	r1, #129	; 0x81
   2c2ee:	f00b f8ba 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c2f2:	4826      	ldr	r0, [pc, #152]	; (2c38c <button_pressed+0xd0>)
   2c2f4:	4e2a      	ldr	r6, [pc, #168]	; (2c3a0 <button_pressed+0xe4>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   2c2f6:	4f2b      	ldr	r7, [pc, #172]	; (2c3a4 <button_pressed+0xe8>)
   2c2f8:	f003 fa82 	bl	2f800 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2c2fc:	2400      	movs	r4, #0
			err = gpio_pin_interrupt_configure(button_devs[i],
   2c2fe:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   2c302:	f856 0b04 	ldr.w	r0, [r6], #4
   2c306:	7919      	ldrb	r1, [r3, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   2c308:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2c30c:	3401      	adds	r4, #1
   2c30e:	f7ff fea3 	bl	2c058 <z_impl_gpio_pin_interrupt_configure>
   2c312:	2c04      	cmp	r4, #4
   2c314:	d00c      	beq.n	2c330 <button_pressed+0x74>
   2c316:	2800      	cmp	r0, #0
   2c318:	d0f1      	beq.n	2c2fe <button_pressed+0x42>
   2c31a:	4b23      	ldr	r3, [pc, #140]	; (2c3a8 <button_pressed+0xec>)
   2c31c:	4823      	ldr	r0, [pc, #140]	; (2c3ac <button_pressed+0xf0>)
		LOG_ERR("Cannot disable callbacks");
   2c31e:	4924      	ldr	r1, [pc, #144]	; (2c3b0 <button_pressed+0xf4>)
   2c320:	1ac0      	subs	r0, r0, r3
   2c322:	08c0      	lsrs	r0, r0, #3
   2c324:	0180      	lsls	r0, r0, #6
   2c326:	f040 0001 	orr.w	r0, r0, #1
   2c32a:	f00b f8b1 	bl	37490 <log_string_sync>
   2c32e:	e001      	b.n	2c334 <button_pressed+0x78>
	if (err) {
   2c330:	2800      	cmp	r0, #0
   2c332:	d1f2      	bne.n	2c31a <button_pressed+0x5e>
	switch (state) {
   2c334:	4b1f      	ldr	r3, [pc, #124]	; (2c3b4 <button_pressed+0xf8>)
   2c336:	781a      	ldrb	r2, [r3, #0]
   2c338:	b9ea      	cbnz	r2, 2c376 <button_pressed+0xba>
		state = STATE_SCANNING;
   2c33a:	2201      	movs	r2, #1
   2c33c:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   2c33e:	481e      	ldr	r0, [pc, #120]	; (2c3b8 <button_pressed+0xfc>)
   2c340:	2221      	movs	r2, #33	; 0x21
   2c342:	2300      	movs	r3, #0
   2c344:	f004 faf8 	bl	30938 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c348:	4810      	ldr	r0, [pc, #64]	; (2c38c <button_pressed+0xd0>)
   2c34a:	f003 fa49 	bl	2f7e0 <z_spin_unlock_valid>
   2c34e:	b968      	cbnz	r0, 2c36c <button_pressed+0xb0>
   2c350:	4a0f      	ldr	r2, [pc, #60]	; (2c390 <button_pressed+0xd4>)
   2c352:	491a      	ldr	r1, [pc, #104]	; (2c3bc <button_pressed+0x100>)
   2c354:	4810      	ldr	r0, [pc, #64]	; (2c398 <button_pressed+0xdc>)
   2c356:	23ac      	movs	r3, #172	; 0xac
   2c358:	f00a fedf 	bl	3711a <printk>
   2c35c:	490b      	ldr	r1, [pc, #44]	; (2c38c <button_pressed+0xd0>)
   2c35e:	4818      	ldr	r0, [pc, #96]	; (2c3c0 <button_pressed+0x104>)
   2c360:	f00a fedb 	bl	3711a <printk>
   2c364:	480a      	ldr	r0, [pc, #40]	; (2c390 <button_pressed+0xd4>)
   2c366:	21ac      	movs	r1, #172	; 0xac
   2c368:	f00b f87d 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2c36c:	f385 8811 	msr	BASEPRI, r5
   2c370:	f3bf 8f6f 	isb	sy
}
   2c374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   2c376:	4a13      	ldr	r2, [pc, #76]	; (2c3c4 <button_pressed+0x108>)
   2c378:	4913      	ldr	r1, [pc, #76]	; (2c3c8 <button_pressed+0x10c>)
   2c37a:	4807      	ldr	r0, [pc, #28]	; (2c398 <button_pressed+0xdc>)
   2c37c:	23e8      	movs	r3, #232	; 0xe8
   2c37e:	f00a fecc 	bl	3711a <printk>
   2c382:	4810      	ldr	r0, [pc, #64]	; (2c3c4 <button_pressed+0x108>)
   2c384:	21e8      	movs	r1, #232	; 0xe8
   2c386:	f00b f86e 	bl	37466 <assert_post_action>
		break;
   2c38a:	e7dd      	b.n	2c348 <button_pressed+0x8c>
   2c38c:	20002b8c 	.word	0x20002b8c
   2c390:	0003cd09 	.word	0x0003cd09
   2c394:	0003cd5b 	.word	0x0003cd5b
   2c398:	0003c48a 	.word	0x0003c48a
   2c39c:	0003cd70 	.word	0x0003cd70
   2c3a0:	20002b38 	.word	0x20002b38
   2c3a4:	0003bdb4 	.word	0x0003bdb4
   2c3a8:	0003b448 	.word	0x0003b448
   2c3ac:	0003b4e8 	.word	0x0003b4e8
   2c3b0:	0003f8cc 	.word	0x0003f8cc
   2c3b4:	20003c12 	.word	0x20003c12
   2c3b8:	20001f08 	.word	0x20001f08
   2c3bc:	0003cd2f 	.word	0x0003cd2f
   2c3c0:	0003cd46 	.word	0x0003cd46
   2c3c4:	0003f8e5 	.word	0x0003f8e5
   2c3c8:	00041a5a 	.word	0x00041a5a

0002c3cc <buttons_scan_fn>:
{
   2c3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	button_scan = get_buttons();
   2c3d0:	f7ff fee0 	bl	2c194 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c3d4:	f3bf 8f5b 	dmb	ish
   2c3d8:	4b53      	ldr	r3, [pc, #332]	; (2c528 <buttons_scan_fn+0x15c>)
   2c3da:	4604      	mov	r4, r0
   2c3dc:	e853 2f00 	ldrex	r2, [r3]
   2c3e0:	e843 4100 	strex	r1, r4, [r3]
   2c3e4:	2900      	cmp	r1, #0
   2c3e6:	d1f9      	bne.n	2c3dc <buttons_scan_fn+0x10>
   2c3e8:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   2c3ec:	4b4f      	ldr	r3, [pc, #316]	; (2c52c <buttons_scan_fn+0x160>)
   2c3ee:	f8df 8188 	ldr.w	r8, [pc, #392]	; 2c578 <buttons_scan_fn+0x1ac>
   2c3f2:	781a      	ldrb	r2, [r3, #0]
   2c3f4:	bb72      	cbnz	r2, 2c454 <buttons_scan_fn+0x88>
		if (button_scan != last_button_scan) {
   2c3f6:	f8d8 6000 	ldr.w	r6, [r8]
   2c3fa:	42a6      	cmp	r6, r4
   2c3fc:	d012      	beq.n	2c424 <buttons_scan_fn+0x58>
	if (button_handler_cb != NULL) {
   2c3fe:	4b4c      	ldr	r3, [pc, #304]	; (2c530 <buttons_scan_fn+0x164>)
   2c400:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
   2c402:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   2c404:	b10b      	cbz	r3, 2c40a <buttons_scan_fn+0x3e>
		button_handler_cb(button_state, has_changed);
   2c406:	4631      	mov	r1, r6
   2c408:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2c40a:	f04f 33ff 	mov.w	r3, #4294967295
   2c40e:	4849      	ldr	r0, [pc, #292]	; (2c534 <buttons_scan_fn+0x168>)
   2c410:	f04f 32ff 	mov.w	r2, #4294967295
   2c414:	f003 fa28 	bl	2f868 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2c418:	4b47      	ldr	r3, [pc, #284]	; (2c538 <buttons_scan_fn+0x16c>)
   2c41a:	681d      	ldr	r5, [r3, #0]
   2c41c:	b96d      	cbnz	r5, 2c43a <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   2c41e:	4845      	ldr	r0, [pc, #276]	; (2c534 <buttons_scan_fn+0x168>)
   2c420:	f003 fb22 	bl	2fa68 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   2c424:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   2c428:	b1bc      	cbz	r4, 2c45a <buttons_scan_fn+0x8e>
}
   2c42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   2c42e:	4843      	ldr	r0, [pc, #268]	; (2c53c <buttons_scan_fn+0x170>)
   2c430:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2c434:	2300      	movs	r3, #0
   2c436:	f004 ba7f 	b.w	30938 <k_work_reschedule>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2c43a:	3d04      	subs	r5, #4
   2c43c:	2d00      	cmp	r5, #0
   2c43e:	d0ee      	beq.n	2c41e <buttons_scan_fn+0x52>
			handler->cb(button_state, has_changed);
   2c440:	462f      	mov	r7, r5
   2c442:	4631      	mov	r1, r6
   2c444:	f857 3b04 	ldr.w	r3, [r7], #4
   2c448:	4620      	mov	r0, r4
   2c44a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   2c44c:	2f00      	cmp	r7, #0
   2c44e:	d0e6      	beq.n	2c41e <buttons_scan_fn+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2c450:	686d      	ldr	r5, [r5, #4]
	return node->next;
   2c452:	e7e3      	b.n	2c41c <buttons_scan_fn+0x50>
		initial_run = false;
   2c454:	2200      	movs	r2, #0
   2c456:	701a      	strb	r2, [r3, #0]
   2c458:	e7e4      	b.n	2c424 <buttons_scan_fn+0x58>
	__asm__ volatile(
   2c45a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c45e:	f3ef 8711 	mrs	r7, BASEPRI
   2c462:	f383 8812 	msr	BASEPRI_MAX, r3
   2c466:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c46a:	4835      	ldr	r0, [pc, #212]	; (2c540 <buttons_scan_fn+0x174>)
   2c46c:	f003 f9aa 	bl	2f7c4 <z_spin_lock_valid>
   2c470:	b968      	cbnz	r0, 2c48e <buttons_scan_fn+0xc2>
   2c472:	4a34      	ldr	r2, [pc, #208]	; (2c544 <buttons_scan_fn+0x178>)
   2c474:	4934      	ldr	r1, [pc, #208]	; (2c548 <buttons_scan_fn+0x17c>)
   2c476:	4835      	ldr	r0, [pc, #212]	; (2c54c <buttons_scan_fn+0x180>)
   2c478:	2381      	movs	r3, #129	; 0x81
   2c47a:	f00a fe4e 	bl	3711a <printk>
   2c47e:	4930      	ldr	r1, [pc, #192]	; (2c540 <buttons_scan_fn+0x174>)
   2c480:	4833      	ldr	r0, [pc, #204]	; (2c550 <buttons_scan_fn+0x184>)
   2c482:	f00a fe4a 	bl	3711a <printk>
   2c486:	482f      	ldr	r0, [pc, #188]	; (2c544 <buttons_scan_fn+0x178>)
   2c488:	2181      	movs	r1, #129	; 0x81
   2c48a:	f00a ffec 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c48e:	482c      	ldr	r0, [pc, #176]	; (2c540 <buttons_scan_fn+0x174>)
   2c490:	f003 f9b6 	bl	2f800 <z_spin_lock_set_owner>
		switch (state) {
   2c494:	4b2f      	ldr	r3, [pc, #188]	; (2c554 <buttons_scan_fn+0x188>)
   2c496:	781a      	ldrb	r2, [r3, #0]
   2c498:	2a01      	cmp	r2, #1
   2c49a:	d136      	bne.n	2c50a <buttons_scan_fn+0x13e>
			state = STATE_WAITING;
   2c49c:	2200      	movs	r2, #0
   2c49e:	4e2e      	ldr	r6, [pc, #184]	; (2c558 <buttons_scan_fn+0x18c>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   2c4a0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2c57c <buttons_scan_fn+0x1b0>
			state = STATE_WAITING;
   2c4a4:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   2c4a6:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   2c4aa:	f856 0b04 	ldr.w	r0, [r6], #4
   2c4ae:	7919      	ldrb	r1, [r3, #4]
   2c4b0:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   2c4b4:	f7ff fdd0 	bl	2c058 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2c4b8:	3401      	adds	r4, #1
   2c4ba:	2c04      	cmp	r4, #4
   2c4bc:	4605      	mov	r5, r0
   2c4be:	d001      	beq.n	2c4c4 <buttons_scan_fn+0xf8>
   2c4c0:	2800      	cmp	r0, #0
   2c4c2:	d0f0      	beq.n	2c4a6 <buttons_scan_fn+0xda>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c4c4:	481e      	ldr	r0, [pc, #120]	; (2c540 <buttons_scan_fn+0x174>)
   2c4c6:	f003 f98b 	bl	2f7e0 <z_spin_unlock_valid>
   2c4ca:	b968      	cbnz	r0, 2c4e8 <buttons_scan_fn+0x11c>
   2c4cc:	4a1d      	ldr	r2, [pc, #116]	; (2c544 <buttons_scan_fn+0x178>)
   2c4ce:	4923      	ldr	r1, [pc, #140]	; (2c55c <buttons_scan_fn+0x190>)
   2c4d0:	481e      	ldr	r0, [pc, #120]	; (2c54c <buttons_scan_fn+0x180>)
   2c4d2:	23ac      	movs	r3, #172	; 0xac
   2c4d4:	f00a fe21 	bl	3711a <printk>
   2c4d8:	4919      	ldr	r1, [pc, #100]	; (2c540 <buttons_scan_fn+0x174>)
   2c4da:	4821      	ldr	r0, [pc, #132]	; (2c560 <buttons_scan_fn+0x194>)
   2c4dc:	f00a fe1d 	bl	3711a <printk>
   2c4e0:	4818      	ldr	r0, [pc, #96]	; (2c544 <buttons_scan_fn+0x178>)
   2c4e2:	21ac      	movs	r1, #172	; 0xac
   2c4e4:	f00a ffbf 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2c4e8:	f387 8811 	msr	BASEPRI, r7
   2c4ec:	f3bf 8f6f 	isb	sy
		if (err) {
   2c4f0:	b1bd      	cbz	r5, 2c522 <buttons_scan_fn+0x156>
   2c4f2:	481c      	ldr	r0, [pc, #112]	; (2c564 <buttons_scan_fn+0x198>)
   2c4f4:	4b1c      	ldr	r3, [pc, #112]	; (2c568 <buttons_scan_fn+0x19c>)
			LOG_ERR("Cannot enable callbacks");
   2c4f6:	491d      	ldr	r1, [pc, #116]	; (2c56c <buttons_scan_fn+0x1a0>)
   2c4f8:	1ac0      	subs	r0, r0, r3
   2c4fa:	08c0      	lsrs	r0, r0, #3
   2c4fc:	0180      	lsls	r0, r0, #6
}
   2c4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Cannot enable callbacks");
   2c502:	f040 0001 	orr.w	r0, r0, #1
   2c506:	f00a bfc3 	b.w	37490 <log_string_sync>
			__ASSERT_NO_MSG(false);
   2c50a:	4a19      	ldr	r2, [pc, #100]	; (2c570 <buttons_scan_fn+0x1a4>)
   2c50c:	4919      	ldr	r1, [pc, #100]	; (2c574 <buttons_scan_fn+0x1a8>)
   2c50e:	480f      	ldr	r0, [pc, #60]	; (2c54c <buttons_scan_fn+0x180>)
   2c510:	23b1      	movs	r3, #177	; 0xb1
   2c512:	f00a fe02 	bl	3711a <printk>
   2c516:	4816      	ldr	r0, [pc, #88]	; (2c570 <buttons_scan_fn+0x1a4>)
   2c518:	21b1      	movs	r1, #177	; 0xb1
   2c51a:	f00a ffa4 	bl	37466 <assert_post_action>
		int err = 0;
   2c51e:	2500      	movs	r5, #0
			break;
   2c520:	e7d0      	b.n	2c4c4 <buttons_scan_fn+0xf8>
}
   2c522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c526:	bf00      	nop
   2c528:	20002b90 	.word	0x20002b90
   2c52c:	20000a24 	.word	0x20000a24
   2c530:	20002b48 	.word	0x20002b48
   2c534:	20002b4c 	.word	0x20002b4c
   2c538:	20002b60 	.word	0x20002b60
   2c53c:	20001f08 	.word	0x20001f08
   2c540:	20002b8c 	.word	0x20002b8c
   2c544:	0003cd09 	.word	0x0003cd09
   2c548:	0003cd5b 	.word	0x0003cd5b
   2c54c:	0003c48a 	.word	0x0003c48a
   2c550:	0003cd70 	.word	0x0003cd70
   2c554:	20003c12 	.word	0x20003c12
   2c558:	20002b38 	.word	0x20002b38
   2c55c:	0003cd2f 	.word	0x0003cd2f
   2c560:	0003cd46 	.word	0x0003cd46
   2c564:	0003b4e8 	.word	0x0003b4e8
   2c568:	0003b448 	.word	0x0003b448
   2c56c:	0003f923 	.word	0x0003f923
   2c570:	0003f8e5 	.word	0x0003f8e5
   2c574:	00041a5a 	.word	0x00041a5a
   2c578:	20002b74 	.word	0x20002b74
   2c57c:	0003bdb4 	.word	0x0003bdb4

0002c580 <dk_leds_init>:
{
   2c580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c582:	4d19      	ldr	r5, [pc, #100]	; (2c5e8 <dk_leds_init+0x68>)
   2c584:	4f19      	ldr	r7, [pc, #100]	; (2c5ec <dk_leds_init+0x6c>)
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2c586:	2600      	movs	r6, #0
		led_devs[i] = device_get_binding(led_pins[i].port);
   2c588:	6828      	ldr	r0, [r5, #0]
   2c58a:	f002 fc39 	bl	2ee00 <z_impl_device_get_binding>
   2c58e:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   2c592:	b968      	cbnz	r0, 2c5b0 <dk_leds_init+0x30>
   2c594:	4b16      	ldr	r3, [pc, #88]	; (2c5f0 <dk_leds_init+0x70>)
   2c596:	4817      	ldr	r0, [pc, #92]	; (2c5f4 <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   2c598:	4917      	ldr	r1, [pc, #92]	; (2c5f8 <dk_leds_init+0x78>)
   2c59a:	1ac0      	subs	r0, r0, r3
   2c59c:	08c0      	lsrs	r0, r0, #3
   2c59e:	0180      	lsls	r0, r0, #6
   2c5a0:	f040 0001 	orr.w	r0, r0, #1
   2c5a4:	f00a ff74 	bl	37490 <log_string_sync>
			return -ENODEV;
   2c5a8:	f06f 0412 	mvn.w	r4, #18
}
   2c5ac:	4620      	mov	r0, r4
   2c5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   2c5b0:	7929      	ldrb	r1, [r5, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   2c5b2:	f44f 7200 	mov.w	r2, #512	; 0x200
   2c5b6:	f7ff fd1b 	bl	2bff0 <z_impl_gpio_pin_configure>
		if (err) {
   2c5ba:	4604      	mov	r4, r0
   2c5bc:	b150      	cbz	r0, 2c5d4 <dk_leds_init+0x54>
   2c5be:	480c      	ldr	r0, [pc, #48]	; (2c5f0 <dk_leds_init+0x70>)
   2c5c0:	4b0c      	ldr	r3, [pc, #48]	; (2c5f4 <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   2c5c2:	490e      	ldr	r1, [pc, #56]	; (2c5fc <dk_leds_init+0x7c>)
   2c5c4:	1a1b      	subs	r3, r3, r0
   2c5c6:	08db      	lsrs	r3, r3, #3
   2c5c8:	019b      	lsls	r3, r3, #6
   2c5ca:	f043 0001 	orr.w	r0, r3, #1
   2c5ce:	f00a ff5f 	bl	37490 <log_string_sync>
			return err;
   2c5d2:	e7eb      	b.n	2c5ac <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2c5d4:	3601      	adds	r6, #1
   2c5d6:	2e04      	cmp	r6, #4
   2c5d8:	f105 0508 	add.w	r5, r5, #8
   2c5dc:	d1d4      	bne.n	2c588 <dk_leds_init+0x8>
}
   2c5de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c5e2:	210f      	movs	r1, #15
   2c5e4:	f7ff be32 	b.w	2c24c <dk_set_leds_state.part.0>
   2c5e8:	0003bdd4 	.word	0x0003bdd4
   2c5ec:	20002b7c 	.word	0x20002b7c
   2c5f0:	0003b448 	.word	0x0003b448
   2c5f4:	0003b4e8 	.word	0x0003b4e8
   2c5f8:	0003f93b 	.word	0x0003f93b
   2c5fc:	0003f953 	.word	0x0003f953

0002c600 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c600:	4b07      	ldr	r3, [pc, #28]	; (2c620 <dk_read_buttons+0x20>)
   2c602:	f3bf 8f5b 	dmb	ish
   2c606:	681b      	ldr	r3, [r3, #0]
   2c608:	f3bf 8f5b 	dmb	ish
	if (button_state != NULL) {
   2c60c:	b100      	cbz	r0, 2c610 <dk_read_buttons+0x10>
		*button_state = current_state;
   2c60e:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   2c610:	4804      	ldr	r0, [pc, #16]	; (2c624 <dk_read_buttons+0x24>)
   2c612:	b111      	cbz	r1, 2c61a <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   2c614:	6802      	ldr	r2, [r0, #0]
   2c616:	405a      	eors	r2, r3
   2c618:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   2c61a:	6003      	str	r3, [r0, #0]
}
   2c61c:	4770      	bx	lr
   2c61e:	bf00      	nop
   2c620:	20002b90 	.word	0x20002b90
   2c624:	20002b78 	.word	0x20002b78

0002c628 <dk_buttons_init>:
{
   2c628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   2c62c:	4b48      	ldr	r3, [pc, #288]	; (2c750 <dk_buttons_init+0x128>)
   2c62e:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   2c630:	4848      	ldr	r0, [pc, #288]	; (2c754 <dk_buttons_init+0x12c>)
   2c632:	4d49      	ldr	r5, [pc, #292]	; (2c758 <dk_buttons_init+0x130>)
   2c634:	f8df 8154 	ldr.w	r8, [pc, #340]	; 2c78c <dk_buttons_init+0x164>
   2c638:	f00d fde6 	bl	3a208 <z_impl_k_mutex_init>
   2c63c:	4647      	mov	r7, r8
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c63e:	2600      	movs	r6, #0
   2c640:	46a9      	mov	r9, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   2c642:	6828      	ldr	r0, [r5, #0]
   2c644:	f002 fbdc 	bl	2ee00 <z_impl_device_get_binding>
   2c648:	f847 0b04 	str.w	r0, [r7], #4
		if (!button_devs[i]) {
   2c64c:	b970      	cbnz	r0, 2c66c <dk_buttons_init+0x44>
   2c64e:	4b43      	ldr	r3, [pc, #268]	; (2c75c <dk_buttons_init+0x134>)
   2c650:	4843      	ldr	r0, [pc, #268]	; (2c760 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot bind gpio device");
   2c652:	4944      	ldr	r1, [pc, #272]	; (2c764 <dk_buttons_init+0x13c>)
   2c654:	1ac0      	subs	r0, r0, r3
   2c656:	08c0      	lsrs	r0, r0, #3
   2c658:	0180      	lsls	r0, r0, #6
   2c65a:	f040 0001 	orr.w	r0, r0, #1
   2c65e:	f00a ff17 	bl	37490 <log_string_sync>
			return -ENODEV;
   2c662:	f06f 0412 	mvn.w	r4, #18
}
   2c666:	4620      	mov	r0, r4
   2c668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   2c66c:	7929      	ldrb	r1, [r5, #4]
   2c66e:	f44f 7288 	mov.w	r2, #272	; 0x110
   2c672:	f7ff fcbd 	bl	2bff0 <z_impl_gpio_pin_configure>
		if (err) {
   2c676:	4604      	mov	r4, r0
   2c678:	b150      	cbz	r0, 2c690 <dk_buttons_init+0x68>
   2c67a:	4839      	ldr	r0, [pc, #228]	; (2c760 <dk_buttons_init+0x138>)
   2c67c:	4b37      	ldr	r3, [pc, #220]	; (2c75c <dk_buttons_init+0x134>)
			LOG_ERR("Cannot configure button gpio");
   2c67e:	493a      	ldr	r1, [pc, #232]	; (2c768 <dk_buttons_init+0x140>)
   2c680:	1ac0      	subs	r0, r0, r3
   2c682:	08c0      	lsrs	r0, r0, #3
   2c684:	0180      	lsls	r0, r0, #6
			LOG_ERR("Cannot disable callbacks()");
   2c686:	f040 0001 	orr.w	r0, r0, #1
   2c68a:	f00a ff01 	bl	37490 <log_string_sync>
			return err;
   2c68e:	e7ea      	b.n	2c666 <dk_buttons_init+0x3e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c690:	3601      	adds	r6, #1
   2c692:	2e04      	cmp	r6, #4
   2c694:	f105 0508 	add.w	r5, r5, #8
   2c698:	d1d3      	bne.n	2c642 <dk_buttons_init+0x1a>
   2c69a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 2c78c <dk_buttons_init+0x164>
	uint32_t pin_mask = 0;
   2c69e:	4605      	mov	r5, r0
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c6a0:	4606      	mov	r6, r0
		pin_mask |= BIT(button_pins[i].number);
   2c6a2:	f04f 0b01 	mov.w	fp, #1
		err = gpio_pin_interrupt_configure(button_devs[i],
   2c6a6:	eb09 03c6 	add.w	r3, r9, r6, lsl #3
   2c6aa:	f85a 0b04 	ldr.w	r0, [sl], #4
   2c6ae:	791f      	ldrb	r7, [r3, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   2c6b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2c6b4:	4639      	mov	r1, r7
   2c6b6:	f7ff fccf 	bl	2c058 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   2c6ba:	4604      	mov	r4, r0
   2c6bc:	b130      	cbz	r0, 2c6cc <dk_buttons_init+0xa4>
   2c6be:	4828      	ldr	r0, [pc, #160]	; (2c760 <dk_buttons_init+0x138>)
   2c6c0:	4b26      	ldr	r3, [pc, #152]	; (2c75c <dk_buttons_init+0x134>)
			LOG_ERR("Cannot disable callbacks()");
   2c6c2:	492a      	ldr	r1, [pc, #168]	; (2c76c <dk_buttons_init+0x144>)
   2c6c4:	1ac0      	subs	r0, r0, r3
   2c6c6:	08c0      	lsrs	r0, r0, #3
   2c6c8:	0180      	lsls	r0, r0, #6
   2c6ca:	e7dc      	b.n	2c686 <dk_buttons_init+0x5e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c6cc:	3601      	adds	r6, #1
		pin_mask |= BIT(button_pins[i].number);
   2c6ce:	fa0b f707 	lsl.w	r7, fp, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c6d2:	2e04      	cmp	r6, #4
		pin_mask |= BIT(button_pins[i].number);
   2c6d4:	ea45 0507 	orr.w	r5, r5, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c6d8:	d1e5      	bne.n	2c6a6 <dk_buttons_init+0x7e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2c6da:	4925      	ldr	r1, [pc, #148]	; (2c770 <dk_buttons_init+0x148>)
   2c6dc:	4b25      	ldr	r3, [pc, #148]	; (2c774 <dk_buttons_init+0x14c>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c6de:	4606      	mov	r6, r0
	callback->pin_mask = pin_mask;
   2c6e0:	e9c1 3501 	strd	r3, r5, [r1, #4]

	if (api->manage_callback == NULL) {
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2c6e4:	460d      	mov	r5, r1
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   2c6e6:	f858 0b04 	ldr.w	r0, [r8], #4
	if (api->manage_callback == NULL) {
   2c6ea:	6883      	ldr	r3, [r0, #8]
   2c6ec:	69db      	ldr	r3, [r3, #28]
   2c6ee:	b15b      	cbz	r3, 2c708 <dk_buttons_init+0xe0>
	return api->manage_callback(port, callback, true);
   2c6f0:	2201      	movs	r2, #1
   2c6f2:	4629      	mov	r1, r5
   2c6f4:	4798      	blx	r3
		if (err) {
   2c6f6:	4604      	mov	r4, r0
   2c6f8:	b148      	cbz	r0, 2c70e <dk_buttons_init+0xe6>
   2c6fa:	4819      	ldr	r0, [pc, #100]	; (2c760 <dk_buttons_init+0x138>)
   2c6fc:	4b17      	ldr	r3, [pc, #92]	; (2c75c <dk_buttons_init+0x134>)
			LOG_ERR("Cannot add callback");
   2c6fe:	491e      	ldr	r1, [pc, #120]	; (2c778 <dk_buttons_init+0x150>)
   2c700:	1ac0      	subs	r0, r0, r3
   2c702:	08c0      	lsrs	r0, r0, #3
   2c704:	0180      	lsls	r0, r0, #6
   2c706:	e7be      	b.n	2c686 <dk_buttons_init+0x5e>
		return -ENOTSUP;
   2c708:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2c70c:	e7f5      	b.n	2c6fa <dk_buttons_init+0xd2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c70e:	3601      	adds	r6, #1
   2c710:	2e04      	cmp	r6, #4
   2c712:	d1e8      	bne.n	2c6e6 <dk_buttons_init+0xbe>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   2c714:	4919      	ldr	r1, [pc, #100]	; (2c77c <dk_buttons_init+0x154>)
   2c716:	481a      	ldr	r0, [pc, #104]	; (2c780 <dk_buttons_init+0x158>)
   2c718:	f003 ffea 	bl	306f0 <k_work_init_delayable>
	state = STATE_SCANNING;
   2c71c:	4b19      	ldr	r3, [pc, #100]	; (2c784 <dk_buttons_init+0x15c>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   2c71e:	4818      	ldr	r0, [pc, #96]	; (2c780 <dk_buttons_init+0x158>)
	state = STATE_SCANNING;
   2c720:	2201      	movs	r2, #1
   2c722:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   2c724:	2300      	movs	r3, #0
   2c726:	2200      	movs	r2, #0
   2c728:	f004 f88a 	bl	30840 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   2c72c:	4621      	mov	r1, r4
   2c72e:	4620      	mov	r0, r4
   2c730:	f7ff ff66 	bl	2c600 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   2c734:	f7ff fd2e 	bl	2c194 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c738:	f3bf 8f5b 	dmb	ish
   2c73c:	4b12      	ldr	r3, [pc, #72]	; (2c788 <dk_buttons_init+0x160>)
   2c73e:	e853 2f00 	ldrex	r2, [r3]
   2c742:	e843 0100 	strex	r1, r0, [r3]
   2c746:	2900      	cmp	r1, #0
   2c748:	d1f9      	bne.n	2c73e <dk_buttons_init+0x116>
   2c74a:	f3bf 8f5b 	dmb	ish
   2c74e:	e78a      	b.n	2c666 <dk_buttons_init+0x3e>
   2c750:	20002b48 	.word	0x20002b48
   2c754:	20002b4c 	.word	0x20002b4c
   2c758:	0003bdb4 	.word	0x0003bdb4
   2c75c:	0003b448 	.word	0x0003b448
   2c760:	0003b4e8 	.word	0x0003b4e8
   2c764:	0003f93b 	.word	0x0003f93b
   2c768:	0003f96d 	.word	0x0003f96d
   2c76c:	0003f98a 	.word	0x0003f98a
   2c770:	20002b68 	.word	0x20002b68
   2c774:	0002c2bd 	.word	0x0002c2bd
   2c778:	0003f9a5 	.word	0x0003f9a5
   2c77c:	0002c3cd 	.word	0x0002c3cd
   2c780:	20001f08 	.word	0x20001f08
   2c784:	20003c12 	.word	0x20003c12
   2c788:	20002b90 	.word	0x20002b90
   2c78c:	20002b38 	.word	0x20002b38

0002c790 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx >= ARRAY_SIZE(led_pins)) {
   2c790:	2803      	cmp	r0, #3
{
   2c792:	b510      	push	{r4, lr}
	if (led_idx >= ARRAY_SIZE(led_pins)) {
   2c794:	d90d      	bls.n	2c7b2 <dk_set_led+0x22>
   2c796:	4b14      	ldr	r3, [pc, #80]	; (2c7e8 <dk_set_led+0x58>)
   2c798:	4814      	ldr	r0, [pc, #80]	; (2c7ec <dk_set_led+0x5c>)
		LOG_ERR("LED index out of the range");
   2c79a:	4915      	ldr	r1, [pc, #84]	; (2c7f0 <dk_set_led+0x60>)
   2c79c:	1ac0      	subs	r0, r0, r3
   2c79e:	08c0      	lsrs	r0, r0, #3
   2c7a0:	0180      	lsls	r0, r0, #6
   2c7a2:	f040 0001 	orr.w	r0, r0, #1
   2c7a6:	f00a fe73 	bl	37490 <log_string_sync>
		return -EINVAL;
   2c7aa:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   2c7ae:	4620      	mov	r0, r4
   2c7b0:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   2c7b2:	4b10      	ldr	r3, [pc, #64]	; (2c7f4 <dk_set_led+0x64>)
   2c7b4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   2c7b8:	fab1 f281 	clz	r2, r1
   2c7bc:	7919      	ldrb	r1, [r3, #4]
   2c7be:	4b0e      	ldr	r3, [pc, #56]	; (2c7f8 <dk_set_led+0x68>)
   2c7c0:	0952      	lsrs	r2, r2, #5
   2c7c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2c7c6:	f7ff fcb9 	bl	2c13c <gpio_pin_set_raw>
	if (err) {
   2c7ca:	4604      	mov	r4, r0
   2c7cc:	2800      	cmp	r0, #0
   2c7ce:	d0ee      	beq.n	2c7ae <dk_set_led+0x1e>
   2c7d0:	4805      	ldr	r0, [pc, #20]	; (2c7e8 <dk_set_led+0x58>)
   2c7d2:	4b06      	ldr	r3, [pc, #24]	; (2c7ec <dk_set_led+0x5c>)
		LOG_ERR("Cannot write LED gpio");
   2c7d4:	4909      	ldr	r1, [pc, #36]	; (2c7fc <dk_set_led+0x6c>)
   2c7d6:	1a1b      	subs	r3, r3, r0
   2c7d8:	08db      	lsrs	r3, r3, #3
   2c7da:	019b      	lsls	r3, r3, #6
   2c7dc:	f043 0001 	orr.w	r0, r3, #1
   2c7e0:	f00a fe56 	bl	37490 <log_string_sync>
   2c7e4:	e7e3      	b.n	2c7ae <dk_set_led+0x1e>
   2c7e6:	bf00      	nop
   2c7e8:	0003b448 	.word	0x0003b448
   2c7ec:	0003b4e8 	.word	0x0003b4e8
   2c7f0:	0003f9b9 	.word	0x0003f9b9
   2c7f4:	0003bdd4 	.word	0x0003bdd4
   2c7f8:	20002b7c 	.word	0x20002b7c
   2c7fc:	0003f8b6 	.word	0x0003f8b6

0002c800 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   2c800:	4602      	mov	r2, r0
   2c802:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   2c804:	4801      	ldr	r0, [pc, #4]	; (2c80c <multithreading_lock_acquire+0xc>)
   2c806:	f003 b82f 	b.w	2f868 <z_impl_k_mutex_lock>
   2c80a:	bf00      	nop
   2c80c:	20000bc0 	.word	0x20000bc0

0002c810 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   2c810:	4801      	ldr	r0, [pc, #4]	; (2c818 <multithreading_lock_release+0x8>)
   2c812:	f003 b929 	b.w	2fa68 <z_impl_k_mutex_unlock>
   2c816:	bf00      	nop
   2c818:	20000bc0 	.word	0x20000bc0

0002c81c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2c81c:	b508      	push	{r3, lr}
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   2c81e:	f7f3 feaf 	bl	20580 <z_impl_log_panic>
   2c822:	4b06      	ldr	r3, [pc, #24]	; (2c83c <k_sys_fatal_error_handler+0x20>)
   2c824:	4806      	ldr	r0, [pc, #24]	; (2c840 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   2c826:	4907      	ldr	r1, [pc, #28]	; (2c844 <k_sys_fatal_error_handler+0x28>)
   2c828:	1ac0      	subs	r0, r0, r3
   2c82a:	08c0      	lsrs	r0, r0, #3
   2c82c:	0180      	lsls	r0, r0, #6
   2c82e:	f040 0001 	orr.w	r0, r0, #1
   2c832:	f00a fe2d 	bl	37490 <log_string_sync>
		sys_arch_reboot(0);
   2c836:	2000      	movs	r0, #0
   2c838:	f7f6 fbce 	bl	22fd8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2c83c:	0003b448 	.word	0x0003b448
   2c840:	0003b4f0 	.word	0x0003b4f0
   2c844:	0003f9e8 	.word	0x0003f9e8

0002c848 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   2c848:	b538      	push	{r3, r4, r5, lr}
   2c84a:	4b0b      	ldr	r3, [pc, #44]	; (2c878 <sdc_assertion_handler+0x30>)
   2c84c:	4c0b      	ldr	r4, [pc, #44]	; (2c87c <sdc_assertion_handler+0x34>)
   2c84e:	1ae4      	subs	r4, r4, r3
   2c850:	460d      	mov	r5, r1
   2c852:	08e4      	lsrs	r4, r4, #3
   2c854:	f00a fe2f 	bl	374b6 <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   2c858:	01a4      	lsls	r4, r4, #6
   2c85a:	f044 0401 	orr.w	r4, r4, #1
   2c85e:	4602      	mov	r2, r0
   2c860:	4907      	ldr	r1, [pc, #28]	; (2c880 <sdc_assertion_handler+0x38>)
   2c862:	462b      	mov	r3, r5
   2c864:	4620      	mov	r0, r4
   2c866:	f00a fe13 	bl	37490 <log_string_sync>
	k_oops();
   2c86a:	4040      	eors	r0, r0
   2c86c:	f380 8811 	msr	BASEPRI, r0
   2c870:	f04f 0003 	mov.w	r0, #3
   2c874:	df02      	svc	2
}
   2c876:	bd38      	pop	{r3, r4, r5, pc}
   2c878:	0003b448 	.word	0x0003b448
   2c87c:	0003b558 	.word	0x0003b558
   2c880:	0003fa05 	.word	0x0003fa05

0002c884 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   2c884:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   2c886:	4804      	ldr	r0, [pc, #16]	; (2c898 <hci_driver_init+0x14>)
   2c888:	f7f7 fe22 	bl	244d0 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   2c88c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   2c890:	4802      	ldr	r0, [pc, #8]	; (2c89c <hci_driver_init+0x18>)
   2c892:	f7e4 b873 	b.w	1097c <sdc_init>
   2c896:	bf00      	nop
   2c898:	0003bdf4 	.word	0x0003bdf4
   2c89c:	0002c849 	.word	0x0002c849

0002c8a0 <rand_prio_low_vector_get_blocking>:
{
   2c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   2c8a2:	4b16      	ldr	r3, [pc, #88]	; (2c8fc <rand_prio_low_vector_get_blocking+0x5c>)
{
   2c8a4:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   2c8a6:	681e      	ldr	r6, [r3, #0]
   2c8a8:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   2c8aa:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   2c8ac:	683b      	ldr	r3, [r7, #0]
   2c8ae:	b963      	cbnz	r3, 2c8ca <rand_prio_low_vector_get_blocking+0x2a>
   2c8b0:	4913      	ldr	r1, [pc, #76]	; (2c900 <rand_prio_low_vector_get_blocking+0x60>)
   2c8b2:	4a14      	ldr	r2, [pc, #80]	; (2c904 <rand_prio_low_vector_get_blocking+0x64>)
   2c8b4:	4814      	ldr	r0, [pc, #80]	; (2c908 <rand_prio_low_vector_get_blocking+0x68>)
   2c8b6:	234b      	movs	r3, #75	; 0x4b
   2c8b8:	f00a fc2f 	bl	3711a <printk>
   2c8bc:	4813      	ldr	r0, [pc, #76]	; (2c90c <rand_prio_low_vector_get_blocking+0x6c>)
   2c8be:	f00a fc2c 	bl	3711a <printk>
   2c8c2:	4810      	ldr	r0, [pc, #64]	; (2c904 <rand_prio_low_vector_get_blocking+0x64>)
   2c8c4:	214b      	movs	r1, #75	; 0x4b
   2c8c6:	f00a fdce 	bl	37466 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   2c8ca:	683b      	ldr	r3, [r7, #0]
   2c8cc:	462a      	mov	r2, r5
   2c8ce:	4621      	mov	r1, r4
   2c8d0:	4630      	mov	r0, r6
   2c8d2:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   2c8d4:	b180      	cbz	r0, 2c8f8 <rand_prio_low_vector_get_blocking+0x58>
   2c8d6:	490e      	ldr	r1, [pc, #56]	; (2c910 <rand_prio_low_vector_get_blocking+0x70>)
   2c8d8:	4a0e      	ldr	r2, [pc, #56]	; (2c914 <rand_prio_low_vector_get_blocking+0x74>)
   2c8da:	480b      	ldr	r0, [pc, #44]	; (2c908 <rand_prio_low_vector_get_blocking+0x68>)
   2c8dc:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   2c8e0:	f00a fc1b 	bl	3711a <printk>
   2c8e4:	480c      	ldr	r0, [pc, #48]	; (2c918 <rand_prio_low_vector_get_blocking+0x78>)
   2c8e6:	f00a fc18 	bl	3711a <printk>
}
   2c8ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   2c8ee:	4809      	ldr	r0, [pc, #36]	; (2c914 <rand_prio_low_vector_get_blocking+0x74>)
   2c8f0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   2c8f4:	f00a bdb7 	b.w	37466 <assert_post_action>
}
   2c8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c8fa:	bf00      	nop
   2c8fc:	20002b94 	.word	0x20002b94
   2c900:	0003fa57 	.word	0x0003fa57
   2c904:	0003fa2a 	.word	0x0003fa2a
   2c908:	0003c48a 	.word	0x0003c48a
   2c90c:	0003fa77 	.word	0x0003fa77
   2c910:	0003c481 	.word	0x0003c481
   2c914:	0003fa9d 	.word	0x0003fa9d
   2c918:	0003fad6 	.word	0x0003fad6

0002c91c <rand_prio_high_vector_get>:
{
   2c91c:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   2c91e:	4b11      	ldr	r3, [pc, #68]	; (2c964 <rand_prio_high_vector_get+0x48>)
{
   2c920:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   2c922:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   2c924:	6883      	ldr	r3, [r0, #8]
   2c926:	685d      	ldr	r5, [r3, #4]
   2c928:	460a      	mov	r2, r1
   2c92a:	b1bd      	cbz	r5, 2c95c <rand_prio_high_vector_get+0x40>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   2c92c:	4621      	mov	r1, r4
   2c92e:	2300      	movs	r3, #0
   2c930:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   2c932:	1e04      	subs	r4, r0, #0
   2c934:	da0e      	bge.n	2c954 <rand_prio_high_vector_get+0x38>
   2c936:	490c      	ldr	r1, [pc, #48]	; (2c968 <rand_prio_high_vector_get+0x4c>)
   2c938:	4a0c      	ldr	r2, [pc, #48]	; (2c96c <rand_prio_high_vector_get+0x50>)
   2c93a:	480d      	ldr	r0, [pc, #52]	; (2c970 <rand_prio_high_vector_get+0x54>)
   2c93c:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   2c940:	f00a fbeb 	bl	3711a <printk>
   2c944:	480b      	ldr	r0, [pc, #44]	; (2c974 <rand_prio_high_vector_get+0x58>)
   2c946:	f00a fbe8 	bl	3711a <printk>
   2c94a:	4808      	ldr	r0, [pc, #32]	; (2c96c <rand_prio_high_vector_get+0x50>)
   2c94c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   2c950:	f00a fd89 	bl	37466 <assert_post_action>
	return ret >= 0 ? ret : 0;
   2c954:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   2c958:	b2c0      	uxtb	r0, r0
   2c95a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   2c95c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2c960:	e7e9      	b.n	2c936 <rand_prio_high_vector_get+0x1a>
   2c962:	bf00      	nop
   2c964:	20002b94 	.word	0x20002b94
   2c968:	0003fb10 	.word	0x0003fb10
   2c96c:	0003fa9d 	.word	0x0003fa9d
   2c970:	0003c48a 	.word	0x0003c48a
   2c974:	0003fb19 	.word	0x0003fb19

0002c978 <hci_driver_open>:
{
   2c978:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c97a:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2c97c:	2200      	movs	r2, #0
   2c97e:	2300      	movs	r3, #0
   2c980:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2c984:	2300      	movs	r3, #0
   2c986:	f06f 0209 	mvn.w	r2, #9
   2c98a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2c98e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2c992:	9300      	str	r3, [sp, #0]
   2c994:	4955      	ldr	r1, [pc, #340]	; (2caec <hci_driver_open+0x174>)
   2c996:	4b56      	ldr	r3, [pc, #344]	; (2caf0 <hci_driver_open+0x178>)
   2c998:	4856      	ldr	r0, [pc, #344]	; (2caf4 <hci_driver_open+0x17c>)
   2c99a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2c99e:	f002 fe33 	bl	2f608 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2c9a2:	4955      	ldr	r1, [pc, #340]	; (2caf8 <hci_driver_open+0x180>)
   2c9a4:	4853      	ldr	r0, [pc, #332]	; (2caf4 <hci_driver_open+0x17c>)
   2c9a6:	4c55      	ldr	r4, [pc, #340]	; (2cafc <hci_driver_open+0x184>)
   2c9a8:	f00d fc20 	bl	3a1ec <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   2c9ac:	a80b      	add	r0, sp, #44	; 0x2c
   2c9ae:	f7e3 ff53 	bl	10858 <sdc_build_revision_get>
   2c9b2:	4b53      	ldr	r3, [pc, #332]	; (2cb00 <hci_driver_open+0x188>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   2c9b4:	4953      	ldr	r1, [pc, #332]	; (2cb04 <hci_driver_open+0x18c>)
   2c9b6:	1ae4      	subs	r4, r4, r3
   2c9b8:	08e4      	lsrs	r4, r4, #3
   2c9ba:	01a4      	lsls	r4, r4, #6
   2c9bc:	2314      	movs	r3, #20
   2c9be:	aa0b      	add	r2, sp, #44	; 0x2c
   2c9c0:	f044 0003 	orr.w	r0, r4, #3
   2c9c4:	f7f3 fd54 	bl	20470 <log_hexdump_sync>
			err = sdc_support_adv();
   2c9c8:	f7e4 f858 	bl	10a7c <sdc_support_adv>
			if (err) {
   2c9cc:	b118      	cbz	r0, 2c9d6 <hci_driver_open+0x5e>
				return -ENOTSUP;
   2c9ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2c9d2:	b011      	add	sp, #68	; 0x44
   2c9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sdc_support_slave();
   2c9d6:	f7e4 f881 	bl	10adc <sdc_support_slave>
		if (err) {
   2c9da:	2800      	cmp	r0, #0
   2c9dc:	d1f7      	bne.n	2c9ce <hci_driver_open+0x56>
		err = sdc_support_dle();
   2c9de:	f7e4 f85d 	bl	10a9c <sdc_support_dle>
		if (err) {
   2c9e2:	2800      	cmp	r0, #0
   2c9e4:	d1f3      	bne.n	2c9ce <hci_driver_open+0x56>
		err = sdc_support_le_2m_phy();
   2c9e6:	f7e4 f869 	bl	10abc <sdc_support_le_2m_phy>
		if (err) {
   2c9ea:	4606      	mov	r6, r0
   2c9ec:	2800      	cmp	r0, #0
   2c9ee:	d1ee      	bne.n	2c9ce <hci_driver_open+0x56>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2c9f0:	ad08      	add	r5, sp, #32
   2c9f2:	462a      	mov	r2, r5
   2c9f4:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   2c9f6:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2c9fa:	f7e3 ff3b 	bl	10874 <sdc_cfg_set>
	if (required_memory < 0) {
   2c9fe:	2800      	cmp	r0, #0
   2ca00:	dbe7      	blt.n	2c9d2 <hci_driver_open+0x5a>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   2ca02:	2701      	movs	r7, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2ca04:	462a      	mov	r2, r5
   2ca06:	2102      	movs	r1, #2
   2ca08:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   2ca0a:	f88d 7020 	strb.w	r7, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2ca0e:	f7e3 ff31 	bl	10874 <sdc_cfg_set>
	if (required_memory < 0) {
   2ca12:	2800      	cmp	r0, #0
   2ca14:	dbdd      	blt.n	2c9d2 <hci_driver_open+0x5a>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   2ca16:	4b3c      	ldr	r3, [pc, #240]	; (2cb08 <hci_driver_open+0x190>)
   2ca18:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2ca1a:	462a      	mov	r2, r5
   2ca1c:	2103      	movs	r1, #3
   2ca1e:	4630      	mov	r0, r6
   2ca20:	f7e3 ff28 	bl	10874 <sdc_cfg_set>
	if (required_memory < 0) {
   2ca24:	2800      	cmp	r0, #0
   2ca26:	dbd4      	blt.n	2c9d2 <hci_driver_open+0x5a>
	cfg.event_length.event_length_us =
   2ca28:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2ca2c:	462a      	mov	r2, r5
   2ca2e:	2104      	movs	r1, #4
   2ca30:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
   2ca32:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2ca34:	f7e3 ff1e 	bl	10874 <sdc_cfg_set>
	if (required_memory < 0) {
   2ca38:	2800      	cmp	r0, #0
   2ca3a:	dbca      	blt.n	2c9d2 <hci_driver_open+0x5a>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2ca3c:	462a      	mov	r2, r5
   2ca3e:	2105      	movs	r1, #5
   2ca40:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   2ca42:	f88d 7020 	strb.w	r7, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2ca46:	f7e3 ff15 	bl	10874 <sdc_cfg_set>
	if (required_memory < 0) {
   2ca4a:	2800      	cmp	r0, #0
   2ca4c:	dbc1      	blt.n	2c9d2 <hci_driver_open+0x5a>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   2ca4e:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2ca50:	462a      	mov	r2, r5
   2ca52:	2107      	movs	r1, #7
   2ca54:	4630      	mov	r0, r6
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   2ca56:	f8ad 3020 	strh.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2ca5a:	f7e3 ff0b 	bl	10874 <sdc_cfg_set>
		if (required_memory < 0) {
   2ca5e:	2800      	cmp	r0, #0
   2ca60:	dbb7      	blt.n	2c9d2 <hci_driver_open+0x5a>
	if (required_memory > sizeof(sdc_mempool)) {
   2ca62:	f240 7299 	movw	r2, #1945	; 0x799
   2ca66:	4290      	cmp	r0, r2
   2ca68:	dd0e      	ble.n	2ca88 <hci_driver_open+0x110>
		BT_ERR("Allocated memory too low: %u < %u",
   2ca6a:	4603      	mov	r3, r0
   2ca6c:	4927      	ldr	r1, [pc, #156]	; (2cb0c <hci_driver_open+0x194>)
   2ca6e:	ea44 0007 	orr.w	r0, r4, r7
   2ca72:	f00a fd0d 	bl	37490 <log_string_sync>
		k_panic();
   2ca76:	4040      	eors	r0, r0
   2ca78:	f380 8811 	msr	BASEPRI, r0
   2ca7c:	f04f 0004 	mov.w	r0, #4
   2ca80:	df02      	svc	2
		return -ENOMEM;
   2ca82:	f06f 000b 	mvn.w	r0, #11
   2ca86:	e7a4      	b.n	2c9d2 <hci_driver_open+0x5a>
   2ca88:	4821      	ldr	r0, [pc, #132]	; (2cb10 <hci_driver_open+0x198>)
   2ca8a:	f002 f9b9 	bl	2ee00 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   2ca8e:	4b21      	ldr	r3, [pc, #132]	; (2cb14 <hci_driver_open+0x19c>)
   2ca90:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   2ca92:	b938      	cbnz	r0, 2caa4 <hci_driver_open+0x12c>
		BT_ERR("An entropy source is required");
   2ca94:	f044 0001 	orr.w	r0, r4, #1
   2ca98:	491f      	ldr	r1, [pc, #124]	; (2cb18 <hci_driver_open+0x1a0>)
   2ca9a:	f00a fcf9 	bl	37490 <log_string_sync>
		return -ENODEV;
   2ca9e:	f06f 0012 	mvn.w	r0, #18
   2caa2:	e796      	b.n	2c9d2 <hci_driver_open+0x5a>
	sdc_rand_source_t rand_functions = {
   2caa4:	4b1d      	ldr	r3, [pc, #116]	; (2cb1c <hci_driver_open+0x1a4>)
   2caa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2caaa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   2caae:	4628      	mov	r0, r5
   2cab0:	f7e4 f866 	bl	10b80 <sdc_rand_source_register>
	if (err) {
   2cab4:	4602      	mov	r2, r0
   2cab6:	b138      	cbz	r0, 2cac8 <hci_driver_open+0x150>
		BT_ERR("Failed to register rand source (%d)", err);
   2cab8:	f044 0001 	orr.w	r0, r4, #1
   2cabc:	4918      	ldr	r1, [pc, #96]	; (2cb20 <hci_driver_open+0x1a8>)
   2cabe:	f00a fce7 	bl	37490 <log_string_sync>
		return -EINVAL;
   2cac2:	f06f 0015 	mvn.w	r0, #21
   2cac6:	e784      	b.n	2c9d2 <hci_driver_open+0x5a>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2cac8:	f04f 30ff 	mov.w	r0, #4294967295
   2cacc:	f04f 31ff 	mov.w	r1, #4294967295
   2cad0:	f7ff fe96 	bl	2c800 <multithreading_lock_acquire>
	if (!err) {
   2cad4:	4604      	mov	r4, r0
   2cad6:	b930      	cbnz	r0, 2cae6 <hci_driver_open+0x16e>
		err = sdc_enable(host_signal, sdc_mempool);
   2cad8:	4912      	ldr	r1, [pc, #72]	; (2cb24 <hci_driver_open+0x1ac>)
   2cada:	4813      	ldr	r0, [pc, #76]	; (2cb28 <hci_driver_open+0x1b0>)
   2cadc:	f7e3 ff26 	bl	1092c <sdc_enable>
   2cae0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2cae2:	f7ff fe95 	bl	2c810 <multithreading_lock_release>
	if (err < 0) {
   2cae6:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   2caea:	e772      	b.n	2c9d2 <hci_driver_open+0x5a>
   2caec:	20005940 	.word	0x20005940
   2caf0:	0002cb2d 	.word	0x0002cb2d
   2caf4:	20001f38 	.word	0x20001f38
   2caf8:	0003fb5d 	.word	0x0003fb5d
   2cafc:	0003b558 	.word	0x0003b558
   2cb00:	0003b448 	.word	0x0003b448
   2cb04:	0003fb64 	.word	0x0003fb64
   2cb08:	02038888 	.word	0x02038888
   2cb0c:	0003fb8b 	.word	0x0003fb8b
   2cb10:	0003f66e 	.word	0x0003f66e
   2cb14:	20002b94 	.word	0x20002b94
   2cb18:	0003fbad 	.word	0x0003fbad
   2cb1c:	0003b610 	.word	0x0003b610
   2cb20:	0003fbcb 	.word	0x0003fbcb
   2cb24:	20003c9f 	.word	0x20003c9f
   2cb28:	0002cc45 	.word	0x0002cc45

0002cb2c <recv_thread>:
{
   2cb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cb30:	4b3e      	ldr	r3, [pc, #248]	; (2cc2c <recv_thread+0x100>)
   2cb32:	4e3f      	ldr	r6, [pc, #252]	; (2cc30 <recv_thread+0x104>)
	return z_impl_k_sem_take(sem, timeout);
   2cb34:	f8df 8108 	ldr.w	r8, [pc, #264]	; 2cc40 <recv_thread+0x114>
		errcode = hci_internal_evt_get(p_hci_buffer);
   2cb38:	4d3e      	ldr	r5, [pc, #248]	; (2cc34 <recv_thread+0x108>)
   2cb3a:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   2cb3c:	2700      	movs	r7, #0
   2cb3e:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   2cb40:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   2cb42:	b93c      	cbnz	r4, 2cb54 <recv_thread+0x28>
   2cb44:	b937      	cbnz	r7, 2cb54 <recv_thread+0x28>
   2cb46:	f04f 32ff 	mov.w	r2, #4294967295
   2cb4a:	f04f 33ff 	mov.w	r3, #4294967295
   2cb4e:	4640      	mov	r0, r8
   2cb50:	f003 f9fa 	bl	2ff48 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2cb54:	f04f 30ff 	mov.w	r0, #4294967295
   2cb58:	f04f 31ff 	mov.w	r1, #4294967295
   2cb5c:	f7ff fe50 	bl	2c800 <multithreading_lock_acquire>
	if (!errcode) {
   2cb60:	b160      	cbz	r0, 2cb7c <recv_thread+0x50>
		return false;
   2cb62:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2cb64:	f04f 30ff 	mov.w	r0, #4294967295
   2cb68:	f04f 31ff 	mov.w	r1, #4294967295
   2cb6c:	f7ff fe48 	bl	2c800 <multithreading_lock_acquire>
	if (!errcode) {
   2cb70:	2800      	cmp	r0, #0
   2cb72:	d038      	beq.n	2cbe6 <recv_thread+0xba>
		return false;
   2cb74:	2700      	movs	r7, #0
	z_impl_k_yield();
   2cb76:	f004 ff49 	bl	31a0c <z_impl_k_yield>
}
   2cb7a:	e7e2      	b.n	2cb42 <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   2cb7c:	482d      	ldr	r0, [pc, #180]	; (2cc34 <recv_thread+0x108>)
   2cb7e:	f000 fba3 	bl	2d2c8 <hci_internal_evt_get>
   2cb82:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2cb84:	f7ff fe44 	bl	2c810 <multithreading_lock_release>
	if (errcode) {
   2cb88:	2c00      	cmp	r4, #0
   2cb8a:	d1ea      	bne.n	2cb62 <recv_thread+0x36>
	switch (hdr->evt) {
   2cb8c:	7828      	ldrb	r0, [r5, #0]
   2cb8e:	283e      	cmp	r0, #62	; 0x3e
   2cb90:	d007      	beq.n	2cba2 <recv_thread+0x76>
   2cb92:	28ff      	cmp	r0, #255	; 0xff
   2cb94:	d01a      	beq.n	2cbcc <recv_thread+0xa0>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   2cb96:	f04f 32ff 	mov.w	r2, #4294967295
   2cb9a:	f04f 33ff 	mov.w	r3, #4294967295
   2cb9e:	2400      	movs	r4, #0
   2cba0:	e005      	b.n	2cbae <recv_thread+0x82>
		switch (me->subevent) {
   2cba2:	78ab      	ldrb	r3, [r5, #2]
   2cba4:	2b02      	cmp	r3, #2
		switch (subevent) {
   2cba6:	d1f6      	bne.n	2cb96 <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   2cba8:	2200      	movs	r2, #0
   2cbaa:	2300      	movs	r3, #0
   2cbac:	2401      	movs	r4, #1
   2cbae:	4621      	mov	r1, r4
   2cbb0:	f7f6 fc38 	bl	23424 <bt_buf_get_evt>
	if (!evt_buf) {
   2cbb4:	4607      	mov	r7, r0
   2cbb6:	b960      	cbnz	r0, 2cbd2 <recv_thread+0xa6>
		if (discardable) {
   2cbb8:	2c00      	cmp	r4, #0
   2cbba:	d1d3      	bne.n	2cb64 <recv_thread+0x38>
		BT_ERR("No event buffer available");
   2cbbc:	01b0      	lsls	r0, r6, #6
   2cbbe:	491e      	ldr	r1, [pc, #120]	; (2cc38 <recv_thread+0x10c>)
   2cbc0:	f040 0001 	orr.w	r0, r0, #1
   2cbc4:	f00a fc64 	bl	37490 <log_string_sync>
	return true;
   2cbc8:	2401      	movs	r4, #1
   2cbca:	e7cb      	b.n	2cb64 <recv_thread+0x38>
		switch (subevent) {
   2cbcc:	78ab      	ldrb	r3, [r5, #2]
   2cbce:	2b80      	cmp	r3, #128	; 0x80
   2cbd0:	e7e9      	b.n	2cba6 <recv_thread+0x7a>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   2cbd2:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2cbd4:	4629      	mov	r1, r5
   2cbd6:	3202      	adds	r2, #2
   2cbd8:	3008      	adds	r0, #8
   2cbda:	f00c fd99 	bl	39710 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   2cbde:	4638      	mov	r0, r7
   2cbe0:	f7f7 fc42 	bl	24468 <bt_recv>
   2cbe4:	e7f0      	b.n	2cbc8 <recv_thread+0x9c>
		errcode = sdc_hci_data_get(p_hci_buffer);
   2cbe6:	4813      	ldr	r0, [pc, #76]	; (2cc34 <recv_thread+0x108>)
   2cbe8:	f7ec fb48 	bl	1927c <sdc_hci_data_get>
   2cbec:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   2cbee:	f7ff fe0f 	bl	2c810 <multithreading_lock_release>
	if (errcode) {
   2cbf2:	2f00      	cmp	r7, #0
   2cbf4:	d1be      	bne.n	2cb74 <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   2cbf6:	f04f 32ff 	mov.w	r2, #4294967295
   2cbfa:	f04f 33ff 	mov.w	r3, #4294967295
   2cbfe:	2003      	movs	r0, #3
   2cc00:	f7f6 fbc6 	bl	23390 <bt_buf_get_rx>
	if (!data_buf) {
   2cc04:	4607      	mov	r7, r0
   2cc06:	b938      	cbnz	r0, 2cc18 <recv_thread+0xec>
		BT_ERR("No data buffer available");
   2cc08:	01b0      	lsls	r0, r6, #6
   2cc0a:	490c      	ldr	r1, [pc, #48]	; (2cc3c <recv_thread+0x110>)
   2cc0c:	f040 0001 	orr.w	r0, r0, #1
   2cc10:	f00a fc3e 	bl	37490 <log_string_sync>
	return true;
   2cc14:	2701      	movs	r7, #1
   2cc16:	e7ae      	b.n	2cb76 <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   2cc18:	886a      	ldrh	r2, [r5, #2]
   2cc1a:	4629      	mov	r1, r5
   2cc1c:	3204      	adds	r2, #4
   2cc1e:	3008      	adds	r0, #8
   2cc20:	f00c fd76 	bl	39710 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   2cc24:	4638      	mov	r0, r7
   2cc26:	f7f7 fc1f 	bl	24468 <bt_recv>
   2cc2a:	e7f3      	b.n	2cc14 <recv_thread+0xe8>
   2cc2c:	0003b448 	.word	0x0003b448
   2cc30:	0003b558 	.word	0x0003b558
   2cc34:	20003c13 	.word	0x20003c13
   2cc38:	0003fbef 	.word	0x0003fbef
   2cc3c:	0003fc09 	.word	0x0003fc09
   2cc40:	20000c68 	.word	0x20000c68

0002cc44 <host_signal>:
	z_impl_k_sem_give(sem);
   2cc44:	4801      	ldr	r0, [pc, #4]	; (2cc4c <host_signal+0x8>)
   2cc46:	f003 b93b 	b.w	2fec0 <z_impl_k_sem_give>
   2cc4a:	bf00      	nop
   2cc4c:	20000c68 	.word	0x20000c68

0002cc50 <hci_driver_send>:
{
   2cc50:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2cc52:	8983      	ldrh	r3, [r0, #12]
{
   2cc54:	4605      	mov	r5, r0
	if (!buf->len) {
   2cc56:	b383      	cbz	r3, 2ccba <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2cc58:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2cc5a:	b1ab      	cbz	r3, 2cc88 <hci_driver_send+0x38>
   2cc5c:	2b02      	cmp	r3, #2
   2cc5e:	d12c      	bne.n	2ccba <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2cc60:	f04f 30ff 	mov.w	r0, #4294967295
   2cc64:	f04f 31ff 	mov.w	r1, #4294967295
   2cc68:	f7ff fdca 	bl	2c800 <multithreading_lock_acquire>
	if (!errcode) {
   2cc6c:	4604      	mov	r4, r0
   2cc6e:	b948      	cbnz	r0, 2cc84 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   2cc70:	68a8      	ldr	r0, [r5, #8]
   2cc72:	f7ec fb10 	bl	19296 <sdc_hci_data_put>
   2cc76:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2cc78:	f7ff fdca 	bl	2c810 <multithreading_lock_release>
		if (errcode) {
   2cc7c:	b1c4      	cbz	r4, 2ccb0 <hci_driver_send+0x60>
   2cc7e:	4810      	ldr	r0, [pc, #64]	; (2ccc0 <hci_driver_send+0x70>)
   2cc80:	f003 f91e 	bl	2fec0 <z_impl_k_sem_give>
}
   2cc84:	4620      	mov	r0, r4
   2cc86:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2cc88:	f04f 30ff 	mov.w	r0, #4294967295
   2cc8c:	f04f 31ff 	mov.w	r1, #4294967295
   2cc90:	f7ff fdb6 	bl	2c800 <multithreading_lock_acquire>
	if (!errcode) {
   2cc94:	4604      	mov	r4, r0
   2cc96:	2800      	cmp	r0, #0
   2cc98:	d1f4      	bne.n	2cc84 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   2cc9a:	68a8      	ldr	r0, [r5, #8]
   2cc9c:	f000 f840 	bl	2cd20 <hci_internal_cmd_put>
   2cca0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2cca2:	f7ff fdb5 	bl	2c810 <multithreading_lock_release>
	if (errcode) {
   2cca6:	2c00      	cmp	r4, #0
   2cca8:	d1ec      	bne.n	2cc84 <hci_driver_send+0x34>
   2ccaa:	4805      	ldr	r0, [pc, #20]	; (2ccc0 <hci_driver_send+0x70>)
   2ccac:	f003 f908 	bl	2fec0 <z_impl_k_sem_give>
		net_buf_unref(buf);
   2ccb0:	4628      	mov	r0, r5
   2ccb2:	f7fd f88f 	bl	29dd4 <net_buf_unref>
   2ccb6:	2400      	movs	r4, #0
   2ccb8:	e7e4      	b.n	2cc84 <hci_driver_send+0x34>
	switch (type) {
   2ccba:	f06f 0415 	mvn.w	r4, #21
   2ccbe:	e7e1      	b.n	2cc84 <hci_driver_send+0x34>
   2ccc0:	20000c68 	.word	0x20000c68

0002ccc4 <rand_prio_low_vector_get>:
{
   2ccc4:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   2ccc6:	4b11      	ldr	r3, [pc, #68]	; (2cd0c <rand_prio_low_vector_get+0x48>)
{
   2ccc8:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   2ccca:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   2cccc:	6883      	ldr	r3, [r0, #8]
   2ccce:	685d      	ldr	r5, [r3, #4]
   2ccd0:	460a      	mov	r2, r1
   2ccd2:	b1bd      	cbz	r5, 2cd04 <rand_prio_low_vector_get+0x40>
	return api->get_entropy_isr(dev, buffer, length, flags);
   2ccd4:	4621      	mov	r1, r4
   2ccd6:	2300      	movs	r3, #0
   2ccd8:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   2ccda:	1e04      	subs	r4, r0, #0
   2ccdc:	da0e      	bge.n	2ccfc <rand_prio_low_vector_get+0x38>
   2ccde:	490c      	ldr	r1, [pc, #48]	; (2cd10 <rand_prio_low_vector_get+0x4c>)
   2cce0:	4a0c      	ldr	r2, [pc, #48]	; (2cd14 <rand_prio_low_vector_get+0x50>)
   2cce2:	480d      	ldr	r0, [pc, #52]	; (2cd18 <rand_prio_low_vector_get+0x54>)
   2cce4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   2cce8:	f00a fa17 	bl	3711a <printk>
   2ccec:	480b      	ldr	r0, [pc, #44]	; (2cd1c <rand_prio_low_vector_get+0x58>)
   2ccee:	f00a fa14 	bl	3711a <printk>
   2ccf2:	4808      	ldr	r0, [pc, #32]	; (2cd14 <rand_prio_low_vector_get+0x50>)
   2ccf4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   2ccf8:	f00a fbb5 	bl	37466 <assert_post_action>
	return ret >= 0 ? ret : 0;
   2ccfc:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   2cd00:	b2c0      	uxtb	r0, r0
   2cd02:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   2cd04:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2cd08:	e7e9      	b.n	2ccde <rand_prio_low_vector_get+0x1a>
   2cd0a:	bf00      	nop
   2cd0c:	20002b94 	.word	0x20002b94
   2cd10:	0003fb10 	.word	0x0003fb10
   2cd14:	0003fa9d 	.word	0x0003fa9d
   2cd18:	0003c48a 	.word	0x0003c48a
   2cd1c:	0003fc22 	.word	0x0003fc22

0002cd20 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   2cd20:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   2cd22:	4cd6      	ldr	r4, [pc, #856]	; (2d07c <hci_internal_cmd_put+0x35c>)
   2cd24:	7823      	ldrb	r3, [r4, #0]
   2cd26:	2b00      	cmp	r3, #0
   2cd28:	f040 82b8 	bne.w	2d29c <hci_internal_cmd_put+0x57c>
	return ((uint16_t)src[1] << 8) | src[0];
   2cd2c:	7843      	ldrb	r3, [r0, #1]
   2cd2e:	7805      	ldrb	r5, [r0, #0]
   2cd30:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   2cd34:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   2cd38:	b22e      	sxth	r6, r5
   2cd3a:	ea4f 2395 	mov.w	r3, r5, lsr #10
   2cd3e:	d209      	bcs.n	2cd54 <hci_internal_cmd_put+0x34>
   2cd40:	b15b      	cbz	r3, 2cd5a <hci_internal_cmd_put+0x3a>
   2cd42:	3b01      	subs	r3, #1
   2cd44:	2b07      	cmp	r3, #7
   2cd46:	d808      	bhi.n	2cd5a <hci_internal_cmd_put+0x3a>
   2cd48:	e8df f003 	tbb	[pc, r3]
   2cd4c:	5c28070a 	.word	0x5c28070a
   2cd50:	d2070707 	.word	0xd2070707
   2cd54:	2b3f      	cmp	r3, #63	; 0x3f
   2cd56:	f000 8203 	beq.w	2d160 <hci_internal_cmd_put+0x440>
   2cd5a:	2104      	movs	r1, #4
   2cd5c:	2001      	movs	r0, #1
   2cd5e:	e23b      	b.n	2d1d8 <hci_internal_cmd_put+0x4b8>
	switch (opcode)	{
   2cd60:	f240 4306 	movw	r3, #1030	; 0x406
   2cd64:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2cd66:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   2cd6a:	d005      	beq.n	2cd78 <hci_internal_cmd_put+0x58>
   2cd6c:	f240 431d 	movw	r3, #1053	; 0x41d
   2cd70:	429e      	cmp	r6, r3
   2cd72:	d010      	beq.n	2cd96 <hci_internal_cmd_put+0x76>
	switch (opcode)	{
   2cd74:	2001      	movs	r0, #1
   2cd76:	e001      	b.n	2cd7c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2cd78:	f7ec fbb3 	bl	194e2 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2cd7c:	230f      	movs	r3, #15
   2cd7e:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2cd80:	2304      	movs	r3, #4
   2cd82:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   2cd84:	2301      	movs	r3, #1
	evt_data->status = status_code;
   2cd86:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   2cd88:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   2cd8a:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   2cd8e:	2301      	movs	r3, #1
   2cd90:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   2cd92:	2000      	movs	r0, #0
}
   2cd94:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2cd96:	f7ec fba6 	bl	194e6 <sdc_hci_cmd_lc_read_remote_version_information>
   2cd9a:	e7ef      	b.n	2cd7c <hci_internal_cmd_put+0x5c>
	switch (opcode)	{
   2cd9c:	f640 4363 	movw	r3, #3171	; 0xc63
   2cda0:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2cda2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   2cda6:	d025      	beq.n	2cdf4 <hci_internal_cmd_put+0xd4>
   2cda8:	dc0f      	bgt.n	2cdca <hci_internal_cmd_put+0xaa>
   2cdaa:	f640 4303 	movw	r3, #3075	; 0xc03
   2cdae:	429e      	cmp	r6, r3
   2cdb0:	d018      	beq.n	2cde4 <hci_internal_cmd_put+0xc4>
   2cdb2:	f640 432d 	movw	r3, #3117	; 0xc2d
   2cdb6:	429e      	cmp	r6, r3
   2cdb8:	d017      	beq.n	2cdea <hci_internal_cmd_put+0xca>
   2cdba:	f640 4301 	movw	r3, #3073	; 0xc01
   2cdbe:	429e      	cmp	r6, r3
   2cdc0:	d1d8      	bne.n	2cd74 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2cdc2:	f7ec fa84 	bl	192ce <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2cdc6:	2104      	movs	r1, #4
   2cdc8:	e08f      	b.n	2ceea <hci_internal_cmd_put+0x1ca>
	switch (opcode)	{
   2cdca:	f640 437b 	movw	r3, #3195	; 0xc7b
   2cdce:	429e      	cmp	r6, r3
   2cdd0:	d013      	beq.n	2cdfa <hci_internal_cmd_put+0xda>
   2cdd2:	f640 437c 	movw	r3, #3196	; 0xc7c
   2cdd6:	429e      	cmp	r6, r3
   2cdd8:	d1cc      	bne.n	2cd74 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2cdda:	49a9      	ldr	r1, [pc, #676]	; (2d080 <hci_internal_cmd_put+0x360>)
   2cddc:	f7ec fa81 	bl	192e2 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2cde0:	2106      	movs	r1, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2cde2:	e082      	b.n	2ceea <hci_internal_cmd_put+0x1ca>
		return sdc_hci_cmd_cb_reset();
   2cde4:	f7e3 ffc0 	bl	10d68 <sdc_hci_cmd_cb_reset>
   2cde8:	e7ed      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2cdea:	49a5      	ldr	r1, [pc, #660]	; (2d080 <hci_internal_cmd_put+0x360>)
   2cdec:	f7ec fa6d 	bl	192ca <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2cdf0:	2107      	movs	r1, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2cdf2:	e07a      	b.n	2ceea <hci_internal_cmd_put+0x1ca>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2cdf4:	f7ec fa70 	bl	192d8 <sdc_hci_cmd_cb_set_event_mask_page_2>
   2cdf8:	e7e5      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2cdfa:	49a1      	ldr	r1, [pc, #644]	; (2d080 <hci_internal_cmd_put+0x360>)
   2cdfc:	f7ec fa63 	bl	192c6 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2ce00:	2108      	movs	r1, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2ce02:	e072      	b.n	2ceea <hci_internal_cmd_put+0x1ca>
	switch (opcode)	{
   2ce04:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   2ce08:	3e01      	subs	r6, #1
   2ce0a:	2e08      	cmp	r6, #8
   2ce0c:	d8b2      	bhi.n	2cd74 <hci_internal_cmd_put+0x54>
   2ce0e:	a301      	add	r3, pc, #4	; (adr r3, 2ce14 <hci_internal_cmd_put+0xf4>)
   2ce10:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   2ce14:	0002ce39 	.word	0x0002ce39
   2ce18:	0002ce43 	.word	0x0002ce43
   2ce1c:	0002cebb 	.word	0x0002cebb
   2ce20:	0002cd75 	.word	0x0002cd75
   2ce24:	0002cd75 	.word	0x0002cd75
   2ce28:	0002cd75 	.word	0x0002cd75
   2ce2c:	0002cd75 	.word	0x0002cd75
   2ce30:	0002cd75 	.word	0x0002cd75
   2ce34:	0002cee3 	.word	0x0002cee3
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2ce38:	4891      	ldr	r0, [pc, #580]	; (2d080 <hci_internal_cmd_put+0x360>)
   2ce3a:	f7ec fb07 	bl	1944c <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2ce3e:	210c      	movs	r1, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2ce40:	e053      	b.n	2ceea <hci_internal_cmd_put+0x1ca>
	memset(cmds, 0, sizeof(*cmds));
   2ce42:	488f      	ldr	r0, [pc, #572]	; (2d080 <hci_internal_cmd_put+0x360>)
   2ce44:	222e      	movs	r2, #46	; 0x2e
   2ce46:	2100      	movs	r1, #0
   2ce48:	f00d fb96 	bl	3a578 <memset>
	cmds->hci_disconnect = 1;
   2ce4c:	2320      	movs	r3, #32
   2ce4e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   2ce50:	2380      	movs	r3, #128	; 0x80
   2ce52:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   2ce54:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   2ce58:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   2ce5a:	2304      	movs	r3, #4
   2ce5c:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   2ce5e:	2328      	movs	r3, #40	; 0x28
   2ce60:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   2ce62:	2302      	movs	r3, #2
   2ce64:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   2ce66:	2304      	movs	r3, #4
   2ce68:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   2ce6a:	f06f 0308 	mvn.w	r3, #8
   2ce6e:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   2ce72:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   2ce76:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   2ce7a:	f06f 030c 	mvn.w	r3, #12
   2ce7e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   2ce82:	237e      	movs	r3, #126	; 0x7e
   2ce84:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   2ce88:	2330      	movs	r3, #48	; 0x30
   2ce8a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   2ce8e:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   2ce92:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   2ce96:	2379      	movs	r3, #121	; 0x79
   2ce98:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   2ce9c:	f06f 0301 	mvn.w	r3, #1
   2cea0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   2cea4:	2301      	movs	r3, #1
   2cea6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   2ceaa:	2380      	movs	r3, #128	; 0x80
   2ceac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   2ceb0:	2304      	movs	r3, #4
   2ceb2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->read_supported_vs_commands = 1;
   2ceb6:	2144      	movs	r1, #68	; 0x44
   2ceb8:	e11d      	b.n	2d0f6 <hci_internal_cmd_put+0x3d6>
	memset(features, 0, sizeof(*features));
   2ceba:	4b71      	ldr	r3, [pc, #452]	; (2d080 <hci_internal_cmd_put+0x360>)
   2cebc:	2000      	movs	r0, #0
   2cebe:	f8c4 0007 	str.w	r0, [r4, #7]
   2cec2:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   2cec4:	7ae3      	ldrb	r3, [r4, #11]
   2cec6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   2ceca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   2cece:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2ced0:	210c      	movs	r1, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2ced2:	230e      	movs	r3, #14
   2ced4:	7063      	strb	r3, [r4, #1]
	evt_data->ncmd = 1;
   2ced6:	2301      	movs	r3, #1
	evt_hdr->len = param_length;
   2ced8:	70a1      	strb	r1, [r4, #2]
	evt_data->ncmd = 1;
   2ceda:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   2cedc:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2cede:	71a0      	strb	r0, [r4, #6]
}
   2cee0:	e755      	b.n	2cd8e <hci_internal_cmd_put+0x6e>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2cee2:	4867      	ldr	r0, [pc, #412]	; (2d080 <hci_internal_cmd_put+0x360>)
   2cee4:	f7ec fab0 	bl	19448 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2cee8:	210a      	movs	r1, #10
	if (!command_generates_command_complete_event(opcode) ||
   2ceea:	2801      	cmp	r0, #1
   2ceec:	d1f1      	bne.n	2ced2 <hci_internal_cmd_put+0x1b2>
   2ceee:	e745      	b.n	2cd7c <hci_internal_cmd_put+0x5c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2cef0:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   2cef4:	3e01      	subs	r6, #1
   2cef6:	3003      	adds	r0, #3
	switch (opcode)	{
   2cef8:	2e4d      	cmp	r6, #77	; 0x4d
   2cefa:	f63f af3b 	bhi.w	2cd74 <hci_internal_cmd_put+0x54>
   2cefe:	a301      	add	r3, pc, #4	; (adr r3, 2cf04 <hci_internal_cmd_put+0x1e4>)
   2cf00:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   2cf04:	0002d03d 	.word	0x0002d03d
   2cf08:	0002d043 	.word	0x0002d043
   2cf0c:	0002d04b 	.word	0x0002d04b
   2cf10:	0002cd75 	.word	0x0002cd75
   2cf14:	0002d06f 	.word	0x0002d06f
   2cf18:	0002d075 	.word	0x0002d075
   2cf1c:	0002d085 	.word	0x0002d085
   2cf20:	0002d08f 	.word	0x0002d08f
   2cf24:	0002d095 	.word	0x0002d095
   2cf28:	0002d09b 	.word	0x0002d09b
   2cf2c:	0002cd75 	.word	0x0002cd75
   2cf30:	0002cd75 	.word	0x0002cd75
   2cf34:	0002cd75 	.word	0x0002cd75
   2cf38:	0002cd75 	.word	0x0002cd75
   2cf3c:	0002d0a1 	.word	0x0002d0a1
   2cf40:	0002d0a9 	.word	0x0002d0a9
   2cf44:	0002d0af 	.word	0x0002d0af
   2cf48:	0002d0b5 	.word	0x0002d0b5
   2cf4c:	0002cd75 	.word	0x0002cd75
   2cf50:	0002cd75 	.word	0x0002cd75
   2cf54:	0002d0bb 	.word	0x0002d0bb
   2cf58:	0002d0c5 	.word	0x0002d0c5
   2cf5c:	0002d0cb 	.word	0x0002d0cb
   2cf60:	0002d0d5 	.word	0x0002d0d5
   2cf64:	0002cd75 	.word	0x0002cd75
   2cf68:	0002d0dd 	.word	0x0002d0dd
   2cf6c:	0002d0e5 	.word	0x0002d0e5
   2cf70:	0002d0ed 	.word	0x0002d0ed
   2cf74:	0002cd75 	.word	0x0002cd75
   2cf78:	0002cd75 	.word	0x0002cd75
   2cf7c:	0002cd75 	.word	0x0002cd75
   2cf80:	0002cd75 	.word	0x0002cd75
   2cf84:	0002cd75 	.word	0x0002cd75
   2cf88:	0002d0fb 	.word	0x0002d0fb
   2cf8c:	0002d103 	.word	0x0002d103
   2cf90:	0002d10b 	.word	0x0002d10b
   2cf94:	0002cd75 	.word	0x0002cd75
   2cf98:	0002cd75 	.word	0x0002cd75
   2cf9c:	0002d111 	.word	0x0002d111
   2cfa0:	0002d117 	.word	0x0002d117
   2cfa4:	0002d11d 	.word	0x0002d11d
   2cfa8:	0002d123 	.word	0x0002d123
   2cfac:	0002cd75 	.word	0x0002cd75
   2cfb0:	0002cd75 	.word	0x0002cd75
   2cfb4:	0002d12b 	.word	0x0002d12b
   2cfb8:	0002d131 	.word	0x0002d131
   2cfbc:	0002d137 	.word	0x0002d137
   2cfc0:	0002d13f 	.word	0x0002d13f
   2cfc4:	0002d147 	.word	0x0002d147
   2cfc8:	0002d14d 	.word	0x0002d14d
   2cfcc:	0002cd75 	.word	0x0002cd75
   2cfd0:	0002cd75 	.word	0x0002cd75
   2cfd4:	0002cd75 	.word	0x0002cd75
   2cfd8:	0002cd75 	.word	0x0002cd75
   2cfdc:	0002cd75 	.word	0x0002cd75
   2cfe0:	0002cd75 	.word	0x0002cd75
   2cfe4:	0002cd75 	.word	0x0002cd75
   2cfe8:	0002cd75 	.word	0x0002cd75
   2cfec:	0002cd75 	.word	0x0002cd75
   2cff0:	0002cd75 	.word	0x0002cd75
   2cff4:	0002cd75 	.word	0x0002cd75
   2cff8:	0002cd75 	.word	0x0002cd75
   2cffc:	0002cd75 	.word	0x0002cd75
   2d000:	0002cd75 	.word	0x0002cd75
   2d004:	0002cd75 	.word	0x0002cd75
   2d008:	0002cd75 	.word	0x0002cd75
   2d00c:	0002cd75 	.word	0x0002cd75
   2d010:	0002cd75 	.word	0x0002cd75
   2d014:	0002cd75 	.word	0x0002cd75
   2d018:	0002cd75 	.word	0x0002cd75
   2d01c:	0002cd75 	.word	0x0002cd75
   2d020:	0002cd75 	.word	0x0002cd75
   2d024:	0002cd75 	.word	0x0002cd75
   2d028:	0002cd75 	.word	0x0002cd75
   2d02c:	0002d153 	.word	0x0002d153
   2d030:	0002cd75 	.word	0x0002cd75
   2d034:	0002cd75 	.word	0x0002cd75
   2d038:	0002d15b 	.word	0x0002d15b
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2d03c:	f7ec fa40 	bl	194c0 <sdc_hci_cmd_le_set_event_mask>
   2d040:	e6c1      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2d042:	480f      	ldr	r0, [pc, #60]	; (2d080 <hci_internal_cmd_put+0x360>)
   2d044:	f7ec fa1a 	bl	1947c <sdc_hci_cmd_le_read_buffer_size>
   2d048:	e6d2      	b.n	2cdf0 <hci_internal_cmd_put+0xd0>
	memset(features, 0, sizeof(*features));
   2d04a:	4b0d      	ldr	r3, [pc, #52]	; (2d080 <hci_internal_cmd_put+0x360>)
   2d04c:	2000      	movs	r0, #0
   2d04e:	f8c4 0007 	str.w	r0, [r4, #7]
   2d052:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   2d054:	79e3      	ldrb	r3, [r4, #7]
   2d056:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   2d05a:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   2d05e:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   2d060:	7a23      	ldrb	r3, [r4, #8]
   2d062:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   2d066:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   2d06a:	7223      	strb	r3, [r4, #8]
   2d06c:	e730      	b.n	2ced0 <hci_internal_cmd_put+0x1b0>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2d06e:	f7ec fa30 	bl	194d2 <sdc_hci_cmd_le_set_random_address>
   2d072:	e6a8      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   2d074:	f7ec fa1e 	bl	194b4 <sdc_hci_cmd_le_set_adv_params>
   2d078:	e6a5      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
   2d07a:	bf00      	nop
   2d07c:	20004438 	.word	0x20004438
   2d080:	2000443f 	.word	0x2000443f
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   2d084:	488f      	ldr	r0, [pc, #572]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d086:	f7ec f9f7 	bl	19478 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   2d08a:	2105      	movs	r1, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   2d08c:	e72d      	b.n	2ceea <hci_internal_cmd_put+0x1ca>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   2d08e:	f7ec fa0d 	bl	194ac <sdc_hci_cmd_le_set_adv_data>
   2d092:	e698      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   2d094:	f7ec fa21 	bl	194da <sdc_hci_cmd_le_set_scan_response_data>
   2d098:	e695      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   2d09a:	f7ec fa09 	bl	194b0 <sdc_hci_cmd_le_set_adv_enable>
   2d09e:	e692      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   2d0a0:	4888      	ldr	r0, [pc, #544]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d0a2:	f7ec f9fb 	bl	1949c <sdc_hci_cmd_le_read_white_list_size>
   2d0a6:	e7f0      	b.n	2d08a <hci_internal_cmd_put+0x36a>
		return sdc_hci_cmd_le_clear_white_list();
   2d0a8:	f7ec f9d8 	bl	1945c <sdc_hci_cmd_le_clear_white_list>
   2d0ac:	e68b      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   2d0ae:	f7ec f9d1 	bl	19454 <sdc_hci_cmd_le_add_device_to_white_list>
   2d0b2:	e688      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   2d0b4:	f7ec f9f6 	bl	194a4 <sdc_hci_cmd_le_remove_device_from_white_list>
   2d0b8:	e685      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2d0ba:	4982      	ldr	r1, [pc, #520]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d0bc:	f7ec f9e0 	bl	19480 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2d0c0:	210b      	movs	r1, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2d0c2:	e712      	b.n	2ceea <hci_internal_cmd_put+0x1ca>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2d0c4:	f7ec f9e2 	bl	1948c <sdc_hci_cmd_le_read_remote_features>
   2d0c8:	e658      	b.n	2cd7c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2d0ca:	497e      	ldr	r1, [pc, #504]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d0cc:	f7ec f9c8 	bl	19460 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2d0d0:	2114      	movs	r1, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2d0d2:	e70a      	b.n	2ceea <hci_internal_cmd_put+0x1ca>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2d0d4:	487b      	ldr	r0, [pc, #492]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d0d6:	f7ec f9cd 	bl	19474 <sdc_hci_cmd_le_rand>
   2d0da:	e6b0      	b.n	2ce3e <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   2d0dc:	4979      	ldr	r1, [pc, #484]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d0de:	f7ec f9c5 	bl	1946c <sdc_hci_cmd_le_long_term_key_request_reply>
   2d0e2:	e67d      	b.n	2cde0 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   2d0e4:	4977      	ldr	r1, [pc, #476]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d0e6:	f7ec f9bd 	bl	19464 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   2d0ea:	e679      	b.n	2cde0 <hci_internal_cmd_put+0xc0>
	*buf = states1;
   2d0ec:	238f      	movs	r3, #143	; 0x8f
   2d0ee:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   2d0f0:	23c0      	movs	r3, #192	; 0xc0
   2d0f2:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2d0f4:	210c      	movs	r1, #12
	cmds->read_supported_vs_commands = 1;
   2d0f6:	2000      	movs	r0, #0
   2d0f8:	e6eb      	b.n	2ced2 <hci_internal_cmd_put+0x1b2>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2d0fa:	4972      	ldr	r1, [pc, #456]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d0fc:	f7ec f9dc 	bl	194b8 <sdc_hci_cmd_le_set_data_length>
   2d100:	e66e      	b.n	2cde0 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2d102:	4870      	ldr	r0, [pc, #448]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d104:	f7ec f9c6 	bl	19494 <sdc_hci_cmd_le_read_suggested_default_data_length>
   2d108:	e67a      	b.n	2ce00 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2d10a:	f7ec f9e8 	bl	194de <sdc_hci_cmd_le_write_suggested_default_data_length>
   2d10e:	e65a      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   2d110:	f7ec f99e 	bl	19450 <sdc_hci_cmd_le_add_device_to_resolving_list>
   2d114:	e657      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   2d116:	f7ec f9c3 	bl	194a0 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   2d11a:	e654      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_clear_resolving_list();
   2d11c:	f7ec f99c 	bl	19458 <sdc_hci_cmd_le_clear_resolving_list>
   2d120:	e651      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   2d122:	4868      	ldr	r0, [pc, #416]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d124:	f7ec f9b4 	bl	19490 <sdc_hci_cmd_le_read_resolving_list_size>
   2d128:	e7af      	b.n	2d08a <hci_internal_cmd_put+0x36a>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   2d12a:	f7ec f9bd 	bl	194a8 <sdc_hci_cmd_le_set_address_resolution_enable>
   2d12e:	e64a      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   2d130:	f7ec f9d1 	bl	194d6 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   2d134:	e647      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2d136:	4863      	ldr	r0, [pc, #396]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d138:	f7ec f9a4 	bl	19484 <sdc_hci_cmd_le_read_max_data_length>
   2d13c:	e67f      	b.n	2ce3e <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2d13e:	4961      	ldr	r1, [pc, #388]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d140:	f7ec f9a2 	bl	19488 <sdc_hci_cmd_le_read_phy>
   2d144:	e65c      	b.n	2ce00 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   2d146:	f7ec f9b9 	bl	194bc <sdc_hci_cmd_le_set_default_phy>
   2d14a:	e63c      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2d14c:	f7ec f9bd 	bl	194ca <sdc_hci_cmd_le_set_phy>
   2d150:	e614      	b.n	2cd7c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2d152:	485c      	ldr	r0, [pc, #368]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d154:	f7ec f9a0 	bl	19498 <sdc_hci_cmd_le_read_transmit_power>
   2d158:	e642      	b.n	2cde0 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   2d15a:	f7ec f9b8 	bl	194ce <sdc_hci_cmd_le_set_privacy_mode>
   2d15e:	e632      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
	switch (opcode)	{
   2d160:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   2d164:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2d166:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   2d16a:	d821      	bhi.n	2d1b0 <hci_internal_cmd_put+0x490>
   2d16c:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   2d170:	f43f ae00 	beq.w	2cd74 <hci_internal_cmd_put+0x54>
   2d174:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   2d178:	3b01      	subs	r3, #1
   2d17a:	2b09      	cmp	r3, #9
   2d17c:	f63f adfa 	bhi.w	2cd74 <hci_internal_cmd_put+0x54>
   2d180:	a201      	add	r2, pc, #4	; (adr r2, 2d188 <hci_internal_cmd_put+0x468>)
   2d182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2d186:	bf00      	nop
   2d188:	0002d1d1 	.word	0x0002d1d1
   2d18c:	0002d1ff 	.word	0x0002d1ff
   2d190:	0002cd75 	.word	0x0002cd75
   2d194:	0002cd75 	.word	0x0002cd75
   2d198:	0002cd75 	.word	0x0002cd75
   2d19c:	0002d23f 	.word	0x0002d23f
   2d1a0:	0002cd75 	.word	0x0002cd75
   2d1a4:	0002cd75 	.word	0x0002cd75
   2d1a8:	0002d22b 	.word	0x0002d22b
   2d1ac:	0002d235 	.word	0x0002d235
   2d1b0:	f505 7340 	add.w	r3, r5, #768	; 0x300
   2d1b4:	b29b      	uxth	r3, r3
   2d1b6:	2b05      	cmp	r3, #5
   2d1b8:	f63f addc 	bhi.w	2cd74 <hci_internal_cmd_put+0x54>
   2d1bc:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   2d1c0:	2b05      	cmp	r3, #5
   2d1c2:	f63f add7 	bhi.w	2cd74 <hci_internal_cmd_put+0x54>
   2d1c6:	e8df f003 	tbb	[pc, r3]
   2d1ca:	413e      	.short	0x413e
   2d1cc:	4d4a4744 	.word	0x4d4a4744
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2d1d0:	483c      	ldr	r0, [pc, #240]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d1d2:	f7e3 fddd 	bl	10d90 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2d1d6:	2110      	movs	r1, #16
	switch (hci_opcode) {
   2d1d8:	f242 0319 	movw	r3, #8217	; 0x2019
   2d1dc:	429e      	cmp	r6, r3
   2d1de:	dc51      	bgt.n	2d284 <hci_internal_cmd_put+0x564>
   2d1e0:	f242 030c 	movw	r3, #8204	; 0x200c
   2d1e4:	429e      	cmp	r6, r3
   2d1e6:	dc40      	bgt.n	2d26a <hci_internal_cmd_put+0x54a>
   2d1e8:	f240 4306 	movw	r3, #1030	; 0x406
   2d1ec:	429e      	cmp	r6, r3
   2d1ee:	f43f adc5 	beq.w	2cd7c <hci_internal_cmd_put+0x5c>
   2d1f2:	f240 431d 	movw	r3, #1053	; 0x41d
   2d1f6:	429e      	cmp	r6, r3
   2d1f8:	f43f adc0 	beq.w	2cd7c <hci_internal_cmd_put+0x5c>
   2d1fc:	e675      	b.n	2ceea <hci_internal_cmd_put+0x1ca>
	memset(cmds, 0, sizeof(*cmds));
   2d1fe:	2000      	movs	r0, #0
   2d200:	f8a4 0007 	strh.w	r0, [r4, #7]
	cmds->read_version_info = 1;
   2d204:	79e3      	ldrb	r3, [r4, #7]
   2d206:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   2d20a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   2d20e:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   2d210:	7a23      	ldrb	r3, [r4, #8]
   2d212:	f023 0307 	bic.w	r3, r3, #7
   2d216:	f043 0307 	orr.w	r3, r3, #7
   2d21a:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   2d21c:	f242 0319 	movw	r3, #8217	; 0x2019
   2d220:	429e      	cmp	r6, r3
   2d222:	dd3e      	ble.n	2d2a2 <hci_internal_cmd_put+0x582>
   2d224:	f242 0332 	movw	r3, #8242	; 0x2032
   2d228:	e046      	b.n	2d2b8 <hci_internal_cmd_put+0x598>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2d22a:	4826      	ldr	r0, [pc, #152]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d22c:	f7ec f8bb 	bl	193a6 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2d230:	211b      	movs	r1, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2d232:	e7d1      	b.n	2d1d8 <hci_internal_cmd_put+0x4b8>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2d234:	4823      	ldr	r0, [pc, #140]	; (2d2c4 <hci_internal_cmd_put+0x5a4>)
   2d236:	f7ec f869 	bl	1930c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   2d23a:	2124      	movs	r1, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2d23c:	e7cc      	b.n	2d1d8 <hci_internal_cmd_put+0x4b8>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2d23e:	f7ec f901 	bl	19444 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   2d242:	2104      	movs	r1, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2d244:	e7c8      	b.n	2d1d8 <hci_internal_cmd_put+0x4b8>
	cmds->read_supported_vs_commands = 1;
   2d246:	233f      	movs	r3, #63	; 0x3f
   2d248:	71e3      	strb	r3, [r4, #7]
   2d24a:	e634      	b.n	2ceb6 <hci_internal_cmd_put+0x196>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2d24c:	f7ec f857 	bl	192fe <sdc_hci_cmd_vs_llpm_mode_set>
   2d250:	e5b9      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2d252:	f7ec f850 	bl	192f6 <sdc_hci_cmd_vs_conn_update>
   2d256:	e5b6      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   2d258:	f7ec f845 	bl	192e6 <sdc_hci_cmd_vs_conn_event_extend>
   2d25c:	e5b3      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2d25e:	f7ec f850 	bl	19302 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2d262:	e5b0      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   2d264:	f7ec f849 	bl	192fa <sdc_hci_cmd_vs_event_length_set>
   2d268:	e5ad      	b.n	2cdc6 <hci_internal_cmd_put+0xa6>
   2d26a:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   2d26e:	3b0d      	subs	r3, #13
   2d270:	2201      	movs	r2, #1
   2d272:	b29b      	uxth	r3, r3
   2d274:	fa02 f303 	lsl.w	r3, r2, r3
   2d278:	f241 2241 	movw	r2, #4673	; 0x1241
   2d27c:	4213      	tst	r3, r2
   2d27e:	f43f ae34 	beq.w	2ceea <hci_internal_cmd_put+0x1ca>
   2d282:	e57b      	b.n	2cd7c <hci_internal_cmd_put+0x5c>
	switch (hci_opcode) {
   2d284:	f242 0332 	movw	r3, #8242	; 0x2032
   2d288:	429e      	cmp	r6, r3
   2d28a:	f43f ad77 	beq.w	2cd7c <hci_internal_cmd_put+0x5c>
   2d28e:	f5a5 5301 	sub.w	r3, r5, #8256	; 0x2040
   2d292:	3b03      	subs	r3, #3
   2d294:	2b01      	cmp	r3, #1
   2d296:	f67f ad71 	bls.w	2cd7c <hci_internal_cmd_put+0x5c>
   2d29a:	e626      	b.n	2ceea <hci_internal_cmd_put+0x1ca>
		return -NRF_EPERM;
   2d29c:	f04f 30ff 	mov.w	r0, #4294967295
   2d2a0:	e578      	b.n	2cd94 <hci_internal_cmd_put+0x74>
	switch (hci_opcode) {
   2d2a2:	f242 030c 	movw	r3, #8204	; 0x200c
   2d2a6:	429e      	cmp	r6, r3
   2d2a8:	dc09      	bgt.n	2d2be <hci_internal_cmd_put+0x59e>
   2d2aa:	f240 4306 	movw	r3, #1030	; 0x406
   2d2ae:	429e      	cmp	r6, r3
   2d2b0:	f43f ad64 	beq.w	2cd7c <hci_internal_cmd_put+0x5c>
   2d2b4:	f240 431d 	movw	r3, #1053	; 0x41d
   2d2b8:	429e      	cmp	r6, r3
   2d2ba:	f43f ad5f 	beq.w	2cd7c <hci_internal_cmd_put+0x5c>
   2d2be:	2144      	movs	r1, #68	; 0x44
   2d2c0:	e607      	b.n	2ced2 <hci_internal_cmd_put+0x1b2>
   2d2c2:	bf00      	nop
   2d2c4:	2000443f 	.word	0x2000443f

0002d2c8 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   2d2c8:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   2d2ca:	4c07      	ldr	r4, [pc, #28]	; (2d2e8 <hci_internal_evt_get+0x20>)
   2d2cc:	7823      	ldrb	r3, [r4, #0]
   2d2ce:	b13b      	cbz	r3, 2d2e0 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   2d2d0:	78a2      	ldrb	r2, [r4, #2]
   2d2d2:	1c61      	adds	r1, r4, #1
   2d2d4:	3202      	adds	r2, #2
   2d2d6:	f00d f914 	bl	3a502 <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   2d2da:	2000      	movs	r0, #0
   2d2dc:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   2d2de:	bd10      	pop	{r4, pc}
   2d2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   2d2e4:	f7eb bfe2 	b.w	192ac <sdc_hci_evt_get>
   2d2e8:	20004438 	.word	0x20004438

0002d2ec <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   2d2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   2d2f0:	4e14      	ldr	r6, [pc, #80]	; (2d344 <bt_rand+0x58>)
   2d2f2:	6833      	ldr	r3, [r6, #0]
{
   2d2f4:	4605      	mov	r5, r0
   2d2f6:	460c      	mov	r4, r1
   2d2f8:	4637      	mov	r7, r6
	if (unlikely(!dev)) {
   2d2fa:	b1c3      	cbz	r3, 2d32e <bt_rand+0x42>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   2d2fc:	683e      	ldr	r6, [r7, #0]
   2d2fe:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   2d300:	68b7      	ldr	r7, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   2d302:	683b      	ldr	r3, [r7, #0]
   2d304:	b963      	cbnz	r3, 2d320 <bt_rand+0x34>
   2d306:	4910      	ldr	r1, [pc, #64]	; (2d348 <bt_rand+0x5c>)
   2d308:	4a10      	ldr	r2, [pc, #64]	; (2d34c <bt_rand+0x60>)
   2d30a:	4811      	ldr	r0, [pc, #68]	; (2d350 <bt_rand+0x64>)
   2d30c:	234b      	movs	r3, #75	; 0x4b
   2d30e:	f009 ff04 	bl	3711a <printk>
   2d312:	4810      	ldr	r0, [pc, #64]	; (2d354 <bt_rand+0x68>)
   2d314:	f009 ff01 	bl	3711a <printk>
   2d318:	480c      	ldr	r0, [pc, #48]	; (2d34c <bt_rand+0x60>)
   2d31a:	214b      	movs	r1, #75	; 0x4b
   2d31c:	f00a f8a3 	bl	37466 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   2d320:	683b      	ldr	r3, [r7, #0]
   2d322:	4622      	mov	r2, r4
   2d324:	4629      	mov	r1, r5
   2d326:	4630      	mov	r0, r6
}
   2d328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2d32c:	4718      	bx	r3
   2d32e:	480a      	ldr	r0, [pc, #40]	; (2d358 <bt_rand+0x6c>)
   2d330:	f001 fd66 	bl	2ee00 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   2d334:	6030      	str	r0, [r6, #0]
		if (!dev) {
   2d336:	2800      	cmp	r0, #0
   2d338:	d1e0      	bne.n	2d2fc <bt_rand+0x10>
}
   2d33a:	f06f 0012 	mvn.w	r0, #18
   2d33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d342:	bf00      	nop
   2d344:	20002b98 	.word	0x20002b98
   2d348:	0003fa57 	.word	0x0003fa57
   2d34c:	0003fa2a 	.word	0x0003fa2a
   2d350:	0003c48a 	.word	0x0003c48a
   2d354:	0003fa77 	.word	0x0003fa77
   2d358:	0003f66e 	.word	0x0003f66e

0002d35c <dfu_target_init>:
	LOG_ERR("No supported image type found");
	return -ENOTSUP;
}

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
   2d35c:	4603      	mov	r3, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   2d35e:	2b01      	cmp	r3, #1
{
   2d360:	4608      	mov	r0, r1
   2d362:	b510      	push	{r4, lr}
   2d364:	4611      	mov	r1, r2
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   2d366:	d00c      	beq.n	2d382 <dfu_target_init+0x26>
   2d368:	4b0c      	ldr	r3, [pc, #48]	; (2d39c <dfu_target_init+0x40>)
   2d36a:	480d      	ldr	r0, [pc, #52]	; (2d3a0 <dfu_target_init+0x44>)
	if (img_type == DFU_TARGET_IMAGE_TYPE_FULL_MODEM) {
		new_target = &dfu_target_full_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   2d36c:	490d      	ldr	r1, [pc, #52]	; (2d3a4 <dfu_target_init+0x48>)
   2d36e:	1ac0      	subs	r0, r0, r3
   2d370:	08c0      	lsrs	r0, r0, #3
   2d372:	0180      	lsls	r0, r0, #6
   2d374:	f040 0001 	orr.w	r0, r0, #1
   2d378:	f00a f88a 	bl	37490 <log_string_sync>
		return -ENOTSUP;
   2d37c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size, cb);
}
   2d380:	bd10      	pop	{r4, pc}
	if (new_target == current_target
   2d382:	4b09      	ldr	r3, [pc, #36]	; (2d3a8 <dfu_target_init+0x4c>)
   2d384:	4a09      	ldr	r2, [pc, #36]	; (2d3ac <dfu_target_init+0x50>)
   2d386:	681c      	ldr	r4, [r3, #0]
   2d388:	4294      	cmp	r4, r2
   2d38a:	d004      	beq.n	2d396 <dfu_target_init+0x3a>
}
   2d38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	current_target = new_target;
   2d390:	601a      	str	r2, [r3, #0]
	return current_target->init(file_size, cb);
   2d392:	f000 b8cb 	b.w	2d52c <dfu_target_mcuboot_init>
		return 0;
   2d396:	2000      	movs	r0, #0
   2d398:	e7f2      	b.n	2d380 <dfu_target_init+0x24>
   2d39a:	bf00      	nop
   2d39c:	0003b448 	.word	0x0003b448
   2d3a0:	0003b4d0 	.word	0x0003b4d0
   2d3a4:	0003fd5a 	.word	0x0003fd5a
   2d3a8:	20002b9c 	.word	0x20002b9c
   2d3ac:	0003be08 	.word	0x0003be08

0002d3b0 <dfu_target_done>:

	return current_target->write(buf, len);
}

int dfu_target_done(bool successful)
{
   2d3b0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   2d3b2:	4e0d      	ldr	r6, [pc, #52]	; (2d3e8 <dfu_target_done+0x38>)
   2d3b4:	6833      	ldr	r3, [r6, #0]
{
   2d3b6:	4605      	mov	r5, r0
	if (current_target == NULL) {
   2d3b8:	b19b      	cbz	r3, 2d3e2 <dfu_target_done+0x32>
		return -EACCES;
	}

	err = current_target->done(successful);
   2d3ba:	68db      	ldr	r3, [r3, #12]
   2d3bc:	4798      	blx	r3
	if (err != 0) {
   2d3be:	4604      	mov	r4, r0
   2d3c0:	b158      	cbz	r0, 2d3da <dfu_target_done+0x2a>
   2d3c2:	480a      	ldr	r0, [pc, #40]	; (2d3ec <dfu_target_done+0x3c>)
   2d3c4:	4b0a      	ldr	r3, [pc, #40]	; (2d3f0 <dfu_target_done+0x40>)
		LOG_ERR("Unable to clean up dfu_target");
   2d3c6:	490b      	ldr	r1, [pc, #44]	; (2d3f4 <dfu_target_done+0x44>)
   2d3c8:	1a1b      	subs	r3, r3, r0
   2d3ca:	08db      	lsrs	r3, r3, #3
   2d3cc:	019b      	lsls	r3, r3, #6
   2d3ce:	f043 0001 	orr.w	r0, r3, #1
   2d3d2:	f00a f85d 	bl	37490 <log_string_sync>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   2d3d6:	4620      	mov	r0, r4
   2d3d8:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   2d3da:	2d00      	cmp	r5, #0
   2d3dc:	d0fb      	beq.n	2d3d6 <dfu_target_done+0x26>
		current_target = NULL;
   2d3de:	6030      	str	r0, [r6, #0]
   2d3e0:	e7f9      	b.n	2d3d6 <dfu_target_done+0x26>
		return -EACCES;
   2d3e2:	f06f 040c 	mvn.w	r4, #12
   2d3e6:	e7f6      	b.n	2d3d6 <dfu_target_done+0x26>
   2d3e8:	20002b9c 	.word	0x20002b9c
   2d3ec:	0003b448 	.word	0x0003b448
   2d3f0:	0003b4d0 	.word	0x0003b4d0
   2d3f4:	0003fd6d 	.word	0x0003fd6d

0002d3f8 <dfu_target_stream_get_stream>:
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

struct stream_flash_ctx *dfu_target_stream_get_stream(void)
{
	return &stream;
}
   2d3f8:	4800      	ldr	r0, [pc, #0]	; (2d3fc <dfu_target_stream_get_stream+0x4>)
   2d3fa:	4770      	bx	lr
   2d3fc:	20002ba4 	.word	0x20002ba4

0002d400 <dfu_target_stream_init>:

int dfu_target_stream_init(const struct dfu_target_stream_init *init)
{
   2d400:	b530      	push	{r4, r5, lr}
	int err;

	if (current_id != NULL) {
   2d402:	4c15      	ldr	r4, [pc, #84]	; (2d458 <dfu_target_stream_init+0x58>)
   2d404:	6823      	ldr	r3, [r4, #0]
{
   2d406:	b085      	sub	sp, #20
	if (current_id != NULL) {
   2d408:	bb03      	cbnz	r3, 2d44c <dfu_target_stream_init+0x4c>
		return -EFAULT;
	}

	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   2d40a:	b310      	cbz	r0, 2d452 <dfu_target_stream_init+0x52>
   2d40c:	6805      	ldr	r5, [r0, #0]
   2d40e:	b305      	cbz	r5, 2d452 <dfu_target_stream_init+0x52>
   2d410:	6841      	ldr	r1, [r0, #4]
   2d412:	b1f1      	cbz	r1, 2d452 <dfu_target_stream_init+0x52>
	    init->buf == NULL) {
   2d414:	6882      	ldr	r2, [r0, #8]
	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   2d416:	b1e2      	cbz	r2, 2d452 <dfu_target_stream_init+0x52>
		return -EINVAL;
	}

	current_id = init->id;
   2d418:	6025      	str	r5, [r4, #0]

	err = stream_flash_init(&stream, init->fdev, init->buf, init->len,
   2d41a:	9302      	str	r3, [sp, #8]
   2d41c:	6943      	ldr	r3, [r0, #20]
   2d41e:	9301      	str	r3, [sp, #4]
   2d420:	6903      	ldr	r3, [r0, #16]
   2d422:	9300      	str	r3, [sp, #0]
   2d424:	68c3      	ldr	r3, [r0, #12]
   2d426:	480d      	ldr	r0, [pc, #52]	; (2d45c <dfu_target_stream_init+0x5c>)
   2d428:	f7f4 f8b8 	bl	2159c <stream_flash_init>
				init->offset, init->size, NULL);
	if (err) {
   2d42c:	4604      	mov	r4, r0
   2d42e:	b150      	cbz	r0, 2d446 <dfu_target_stream_init+0x46>
   2d430:	480b      	ldr	r0, [pc, #44]	; (2d460 <dfu_target_stream_init+0x60>)
   2d432:	4b0c      	ldr	r3, [pc, #48]	; (2d464 <dfu_target_stream_init+0x64>)
		LOG_ERR("stream_flash_init failed (err %d)", err);
   2d434:	490c      	ldr	r1, [pc, #48]	; (2d468 <dfu_target_stream_init+0x68>)
   2d436:	1ac0      	subs	r0, r0, r3
   2d438:	08c0      	lsrs	r0, r0, #3
   2d43a:	0180      	lsls	r0, r0, #6
   2d43c:	4622      	mov	r2, r4
   2d43e:	f040 0001 	orr.w	r0, r0, #1
   2d442:	f00a f825 	bl	37490 <log_string_sync>
		return err;
	}
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

	return 0;
}
   2d446:	4620      	mov	r0, r4
   2d448:	b005      	add	sp, #20
   2d44a:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   2d44c:	f06f 040d 	mvn.w	r4, #13
   2d450:	e7f9      	b.n	2d446 <dfu_target_stream_init+0x46>
		return -EINVAL;
   2d452:	f06f 0415 	mvn.w	r4, #21
   2d456:	e7f6      	b.n	2d446 <dfu_target_stream_init+0x46>
   2d458:	20002ba0 	.word	0x20002ba0
   2d45c:	20002ba4 	.word	0x20002ba4
   2d460:	0003b4e0 	.word	0x0003b4e0
   2d464:	0003b448 	.word	0x0003b448
   2d468:	0003fd8b 	.word	0x0003fd8b

0002d46c <dfu_target_stream_offset_get>:

int dfu_target_stream_offset_get(size_t *out)
{
   2d46c:	b510      	push	{r4, lr}
   2d46e:	4604      	mov	r4, r0
	*out = stream_flash_bytes_written(&stream);
   2d470:	4802      	ldr	r0, [pc, #8]	; (2d47c <dfu_target_stream_offset_get+0x10>)
   2d472:	f00a fafe 	bl	37a72 <stream_flash_bytes_written>
   2d476:	6020      	str	r0, [r4, #0]

	return 0;
}
   2d478:	2000      	movs	r0, #0
   2d47a:	bd10      	pop	{r4, pc}
   2d47c:	20002ba4 	.word	0x20002ba4

0002d480 <dfu_target_stream_write>:

int dfu_target_stream_write(const uint8_t *buf, size_t len)
{
   2d480:	b510      	push	{r4, lr}
   2d482:	460a      	mov	r2, r1
	int err = stream_flash_buffered_write(&stream, buf, len, false);
   2d484:	2300      	movs	r3, #0
   2d486:	4601      	mov	r1, r0
   2d488:	4808      	ldr	r0, [pc, #32]	; (2d4ac <dfu_target_stream_write+0x2c>)
   2d48a:	f00a faae 	bl	379ea <stream_flash_buffered_write>

	if (err != 0) {
   2d48e:	4604      	mov	r4, r0
   2d490:	b150      	cbz	r0, 2d4a8 <dfu_target_stream_write+0x28>
   2d492:	4807      	ldr	r0, [pc, #28]	; (2d4b0 <dfu_target_stream_write+0x30>)
   2d494:	4b07      	ldr	r3, [pc, #28]	; (2d4b4 <dfu_target_stream_write+0x34>)
		LOG_ERR("stream_flash_buffered_write error %d", err);
   2d496:	4908      	ldr	r1, [pc, #32]	; (2d4b8 <dfu_target_stream_write+0x38>)
   2d498:	1a1b      	subs	r3, r3, r0
   2d49a:	08db      	lsrs	r3, r3, #3
   2d49c:	019b      	lsls	r3, r3, #6
   2d49e:	4622      	mov	r2, r4
   2d4a0:	f043 0001 	orr.w	r0, r3, #1
   2d4a4:	f009 fff4 	bl	37490 <log_string_sync>
		LOG_WRN("Unable to store write progress: %d", err);
	}
#endif

	return err;
}
   2d4a8:	4620      	mov	r0, r4
   2d4aa:	bd10      	pop	{r4, pc}
   2d4ac:	20002ba4 	.word	0x20002ba4
   2d4b0:	0003b448 	.word	0x0003b448
   2d4b4:	0003b4e0 	.word	0x0003b4e0
   2d4b8:	0003fdad 	.word	0x0003fdad

0002d4bc <dfu_target_stream_done>:

int dfu_target_stream_done(bool successful)
{
   2d4bc:	b510      	push	{r4, lr}
	int err = 0;

	if (successful) {
   2d4be:	4604      	mov	r4, r0
   2d4c0:	b190      	cbz	r0, 2d4e8 <dfu_target_stream_done+0x2c>
		err = stream_flash_buffered_write(&stream, NULL, 0, true);
   2d4c2:	2200      	movs	r2, #0
   2d4c4:	480b      	ldr	r0, [pc, #44]	; (2d4f4 <dfu_target_stream_done+0x38>)
   2d4c6:	2301      	movs	r3, #1
   2d4c8:	4611      	mov	r1, r2
   2d4ca:	f00a fa8e 	bl	379ea <stream_flash_buffered_write>
		if (err != 0) {
   2d4ce:	4604      	mov	r4, r0
   2d4d0:	b150      	cbz	r0, 2d4e8 <dfu_target_stream_done+0x2c>
   2d4d2:	4809      	ldr	r0, [pc, #36]	; (2d4f8 <dfu_target_stream_done+0x3c>)
   2d4d4:	4b09      	ldr	r3, [pc, #36]	; (2d4fc <dfu_target_stream_done+0x40>)
			LOG_ERR("stream_flash_buffered_write error %d", err);
   2d4d6:	490a      	ldr	r1, [pc, #40]	; (2d500 <dfu_target_stream_done+0x44>)
   2d4d8:	1ac0      	subs	r0, r0, r3
   2d4da:	08c0      	lsrs	r0, r0, #3
   2d4dc:	0180      	lsls	r0, r0, #6
   2d4de:	4622      	mov	r2, r4
   2d4e0:	f040 0001 	orr.w	r0, r0, #1
   2d4e4:	f009 ffd4 	bl	37490 <log_string_sync>
			LOG_ERR("Unable to reset write progress: %d", err);
		}
#endif
	}

	current_id = NULL;
   2d4e8:	4b06      	ldr	r3, [pc, #24]	; (2d504 <dfu_target_stream_done+0x48>)
   2d4ea:	2200      	movs	r2, #0
   2d4ec:	601a      	str	r2, [r3, #0]

	return err;
}
   2d4ee:	4620      	mov	r0, r4
   2d4f0:	bd10      	pop	{r4, pc}
   2d4f2:	bf00      	nop
   2d4f4:	20002ba4 	.word	0x20002ba4
   2d4f8:	0003b4e0 	.word	0x0003b4e0
   2d4fc:	0003b448 	.word	0x0003b448
   2d500:	0003fdad 	.word	0x0003fdad
   2d504:	20002ba0 	.word	0x20002ba0

0002d508 <dfu_target_mcuboot_set_buf>:
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
}

int dfu_target_mcuboot_set_buf(uint8_t *buf, size_t len)
{
	if (buf == NULL) {
   2d508:	b140      	cbz	r0, 2d51c <dfu_target_mcuboot_set_buf+0x14>
		return -EINVAL;
	}

	if (!IS_ALIGNED_32(buf)) {
   2d50a:	f010 0303 	ands.w	r3, r0, #3
   2d50e:	d105      	bne.n	2d51c <dfu_target_mcuboot_set_buf+0x14>
		return -EINVAL;
	}

	stream_buf = buf;
   2d510:	4a04      	ldr	r2, [pc, #16]	; (2d524 <dfu_target_mcuboot_set_buf+0x1c>)
   2d512:	6010      	str	r0, [r2, #0]
	stream_buf_len = len;
   2d514:	4a04      	ldr	r2, [pc, #16]	; (2d528 <dfu_target_mcuboot_set_buf+0x20>)

	return 0;
   2d516:	4618      	mov	r0, r3
	stream_buf_len = len;
   2d518:	6011      	str	r1, [r2, #0]
	return 0;
   2d51a:	4770      	bx	lr
		return -EINVAL;
   2d51c:	f06f 0015 	mvn.w	r0, #21
}
   2d520:	4770      	bx	lr
   2d522:	bf00      	nop
   2d524:	20002bc8 	.word	0x20002bc8
   2d528:	20002bd0 	.word	0x20002bd0

0002d52c <dfu_target_mcuboot_init>:

int dfu_target_mcuboot_init(size_t file_size, dfu_target_callback_t cb)
{
   2d52c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(cb);
	const struct device *flash_dev;
	int err;

	stream_buf_bytes = 0;
   2d52e:	4b2e      	ldr	r3, [pc, #184]	; (2d5e8 <dfu_target_mcuboot_init+0xbc>)

	if (stream_buf == NULL) {
   2d530:	4c2e      	ldr	r4, [pc, #184]	; (2d5ec <dfu_target_mcuboot_init+0xc0>)
	stream_buf_bytes = 0;
   2d532:	2500      	movs	r5, #0
   2d534:	601d      	str	r5, [r3, #0]
	if (stream_buf == NULL) {
   2d536:	6823      	ldr	r3, [r4, #0]
{
   2d538:	b089      	sub	sp, #36	; 0x24
   2d53a:	4602      	mov	r2, r0
	if (stream_buf == NULL) {
   2d53c:	b973      	cbnz	r3, 2d55c <dfu_target_mcuboot_init+0x30>
   2d53e:	4b2c      	ldr	r3, [pc, #176]	; (2d5f0 <dfu_target_mcuboot_init+0xc4>)
   2d540:	482c      	ldr	r0, [pc, #176]	; (2d5f4 <dfu_target_mcuboot_init+0xc8>)
		LOG_ERR("Missing stream_buf, call '..set_buf' before '..init");
   2d542:	492d      	ldr	r1, [pc, #180]	; (2d5f8 <dfu_target_mcuboot_init+0xcc>)
   2d544:	1ac0      	subs	r0, r0, r3
   2d546:	08c0      	lsrs	r0, r0, #3
   2d548:	0180      	lsls	r0, r0, #6
   2d54a:	f040 0001 	orr.w	r0, r0, #1
   2d54e:	f009 ff9f 	bl	37490 <log_string_sync>
		return -ENODEV;
   2d552:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("dfu_target_stream_init failed %d", err);
		return err;
	}

	return 0;
}
   2d556:	4620      	mov	r0, r4
   2d558:	b009      	add	sp, #36	; 0x24
   2d55a:	bd30      	pop	{r4, r5, pc}
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   2d55c:	f5b0 2ff2 	cmp.w	r0, #495616	; 0x79000
   2d560:	d90e      	bls.n	2d580 <dfu_target_mcuboot_init+0x54>
   2d562:	4823      	ldr	r0, [pc, #140]	; (2d5f0 <dfu_target_mcuboot_init+0xc4>)
   2d564:	4c23      	ldr	r4, [pc, #140]	; (2d5f4 <dfu_target_mcuboot_init+0xc8>)
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   2d566:	4925      	ldr	r1, [pc, #148]	; (2d5fc <dfu_target_mcuboot_init+0xd0>)
   2d568:	1a24      	subs	r4, r4, r0
   2d56a:	08e4      	lsrs	r4, r4, #3
   2d56c:	01a4      	lsls	r4, r4, #6
   2d56e:	f044 0001 	orr.w	r0, r4, #1
   2d572:	f44f 23f2 	mov.w	r3, #495616	; 0x79000
   2d576:	f009 ff8b 	bl	37490 <log_string_sync>
		return -EFBIG;
   2d57a:	f06f 041a 	mvn.w	r4, #26
   2d57e:	e7ea      	b.n	2d556 <dfu_target_mcuboot_init+0x2a>
   2d580:	481f      	ldr	r0, [pc, #124]	; (2d600 <dfu_target_mcuboot_init+0xd4>)
   2d582:	f001 fc3d 	bl	2ee00 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   2d586:	b968      	cbnz	r0, 2d5a4 <dfu_target_mcuboot_init+0x78>
   2d588:	4b19      	ldr	r3, [pc, #100]	; (2d5f0 <dfu_target_mcuboot_init+0xc4>)
   2d58a:	481a      	ldr	r0, [pc, #104]	; (2d5f4 <dfu_target_mcuboot_init+0xc8>)
		LOG_ERR("Failed to get device '%s'",
   2d58c:	4a1c      	ldr	r2, [pc, #112]	; (2d600 <dfu_target_mcuboot_init+0xd4>)
   2d58e:	491d      	ldr	r1, [pc, #116]	; (2d604 <dfu_target_mcuboot_init+0xd8>)
   2d590:	1ac0      	subs	r0, r0, r3
   2d592:	08c0      	lsrs	r0, r0, #3
   2d594:	0180      	lsls	r0, r0, #6
   2d596:	f040 0001 	orr.w	r0, r0, #1
   2d59a:	f009 ff79 	bl	37490 <log_string_sync>
		return -EFAULT;
   2d59e:	f06f 040d 	mvn.w	r4, #13
   2d5a2:	e7d8      	b.n	2d556 <dfu_target_mcuboot_init+0x2a>
	err = dfu_target_stream_init(&(struct dfu_target_stream_init){
   2d5a4:	4b18      	ldr	r3, [pc, #96]	; (2d608 <dfu_target_mcuboot_init+0xdc>)
   2d5a6:	9507      	str	r5, [sp, #28]
   2d5a8:	e9cd 3001 	strd	r3, r0, [sp, #4]
   2d5ac:	6823      	ldr	r3, [r4, #0]
   2d5ae:	9303      	str	r3, [sp, #12]
   2d5b0:	4b16      	ldr	r3, [pc, #88]	; (2d60c <dfu_target_mcuboot_init+0xe0>)
   2d5b2:	681b      	ldr	r3, [r3, #0]
   2d5b4:	9304      	str	r3, [sp, #16]
   2d5b6:	f44f 2205 	mov.w	r2, #544768	; 0x85000
   2d5ba:	f44f 23f2 	mov.w	r3, #495616	; 0x79000
   2d5be:	a801      	add	r0, sp, #4
   2d5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2d5c4:	f7ff ff1c 	bl	2d400 <dfu_target_stream_init>
	if (err < 0) {
   2d5c8:	1e04      	subs	r4, r0, #0
   2d5ca:	da0b      	bge.n	2d5e4 <dfu_target_mcuboot_init+0xb8>
   2d5cc:	4b08      	ldr	r3, [pc, #32]	; (2d5f0 <dfu_target_mcuboot_init+0xc4>)
   2d5ce:	4809      	ldr	r0, [pc, #36]	; (2d5f4 <dfu_target_mcuboot_init+0xc8>)
		LOG_ERR("dfu_target_stream_init failed %d", err);
   2d5d0:	490f      	ldr	r1, [pc, #60]	; (2d610 <dfu_target_mcuboot_init+0xe4>)
   2d5d2:	1ac0      	subs	r0, r0, r3
   2d5d4:	08c0      	lsrs	r0, r0, #3
   2d5d6:	0180      	lsls	r0, r0, #6
   2d5d8:	4622      	mov	r2, r4
   2d5da:	f040 0001 	orr.w	r0, r0, #1
   2d5de:	f009 ff57 	bl	37490 <log_string_sync>
		return err;
   2d5e2:	e7b8      	b.n	2d556 <dfu_target_mcuboot_init+0x2a>
	return 0;
   2d5e4:	462c      	mov	r4, r5
   2d5e6:	e7b6      	b.n	2d556 <dfu_target_mcuboot_init+0x2a>
   2d5e8:	20002bcc 	.word	0x20002bcc
   2d5ec:	20002bc8 	.word	0x20002bc8
   2d5f0:	0003b448 	.word	0x0003b448
   2d5f4:	0003b4d8 	.word	0x0003b4d8
   2d5f8:	0003fde4 	.word	0x0003fde4
   2d5fc:	0003fe18 	.word	0x0003fe18
   2d600:	0003d451 	.word	0x0003d451
   2d604:	0003fe4a 	.word	0x0003fe4a
   2d608:	0003fe64 	.word	0x0003fe64
   2d60c:	20002bd0 	.word	0x20002bd0
   2d610:	0003fe6c 	.word	0x0003fe6c

0002d614 <dfu_target_mcuboot_offset_get>:

int dfu_target_mcuboot_offset_get(size_t *out)
{
   2d614:	b510      	push	{r4, lr}
   2d616:	4604      	mov	r4, r0
	int err = 0;

	err = dfu_target_stream_offset_get(out);
   2d618:	f7ff ff28 	bl	2d46c <dfu_target_stream_offset_get>
	if (err == 0) {
   2d61c:	b920      	cbnz	r0, 2d628 <dfu_target_mcuboot_offset_get+0x14>
		*out += stream_buf_bytes;
   2d61e:	4a03      	ldr	r2, [pc, #12]	; (2d62c <dfu_target_mcuboot_offset_get+0x18>)
   2d620:	6823      	ldr	r3, [r4, #0]
   2d622:	6812      	ldr	r2, [r2, #0]
   2d624:	4413      	add	r3, r2
   2d626:	6023      	str	r3, [r4, #0]
	}

	return err;
}
   2d628:	bd10      	pop	{r4, pc}
   2d62a:	bf00      	nop
   2d62c:	20002bcc 	.word	0x20002bcc

0002d630 <dfu_target_mcuboot_write>:

int dfu_target_mcuboot_write(const void *const buf, size_t len)
{
   2d630:	b430      	push	{r4, r5}
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   2d632:	4c06      	ldr	r4, [pc, #24]	; (2d64c <dfu_target_mcuboot_write+0x1c>)
   2d634:	4a06      	ldr	r2, [pc, #24]	; (2d650 <dfu_target_mcuboot_write+0x20>)
   2d636:	6823      	ldr	r3, [r4, #0]
   2d638:	6815      	ldr	r5, [r2, #0]
   2d63a:	440b      	add	r3, r1
   2d63c:	fbb3 f2f5 	udiv	r2, r3, r5
   2d640:	fb05 3312 	mls	r3, r5, r2, r3
   2d644:	6023      	str	r3, [r4, #0]

	return dfu_target_stream_write(buf, len);
}
   2d646:	bc30      	pop	{r4, r5}
	return dfu_target_stream_write(buf, len);
   2d648:	f7ff bf1a 	b.w	2d480 <dfu_target_stream_write>
   2d64c:	20002bcc 	.word	0x20002bcc
   2d650:	20002bd0 	.word	0x20002bd0

0002d654 <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   2d654:	b570      	push	{r4, r5, r6, lr}
   2d656:	4d17      	ldr	r5, [pc, #92]	; (2d6b4 <dfu_target_mcuboot_done+0x60>)
   2d658:	4606      	mov	r6, r0
	int err = 0;

	err = dfu_target_stream_done(successful);
   2d65a:	f7ff ff2f 	bl	2d4bc <dfu_target_stream_done>
	if (err != 0) {
   2d65e:	4b16      	ldr	r3, [pc, #88]	; (2d6b8 <dfu_target_mcuboot_done+0x64>)
   2d660:	1aed      	subs	r5, r5, r3
   2d662:	08ed      	lsrs	r5, r5, #3
   2d664:	4604      	mov	r4, r0
   2d666:	01ad      	lsls	r5, r5, #6
   2d668:	b138      	cbz	r0, 2d67a <dfu_target_mcuboot_done+0x26>
		LOG_ERR("dfu_target_stream_done error %d", err);
   2d66a:	4914      	ldr	r1, [pc, #80]	; (2d6bc <dfu_target_mcuboot_done+0x68>)
   2d66c:	4602      	mov	r2, r0
			LOG_ERR("Unable to delete last page: %d", err);
			return err;
		}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   2d66e:	f045 0001 	orr.w	r0, r5, #1
   2d672:	f009 ff0d 	bl	37490 <log_string_sync>
	} else {
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	return err;
}
   2d676:	4620      	mov	r0, r4
   2d678:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   2d67a:	b1c6      	cbz	r6, 2d6ae <dfu_target_mcuboot_done+0x5a>
		stream_buf_bytes = 0;
   2d67c:	4b10      	ldr	r3, [pc, #64]	; (2d6c0 <dfu_target_mcuboot_done+0x6c>)
   2d67e:	6018      	str	r0, [r3, #0]
		err = stream_flash_erase_page(dfu_target_stream_get_stream(),
   2d680:	f7ff feba 	bl	2d3f8 <dfu_target_stream_get_stream>
   2d684:	490f      	ldr	r1, [pc, #60]	; (2d6c4 <dfu_target_mcuboot_done+0x70>)
   2d686:	f7f3 fe99 	bl	213bc <stream_flash_erase_page>
		if (err != 0) {
   2d68a:	4604      	mov	r4, r0
   2d68c:	b110      	cbz	r0, 2d694 <dfu_target_mcuboot_done+0x40>
			LOG_ERR("Unable to delete last page: %d", err);
   2d68e:	490e      	ldr	r1, [pc, #56]	; (2d6c8 <dfu_target_mcuboot_done+0x74>)
   2d690:	4602      	mov	r2, r0
   2d692:	e7ec      	b.n	2d66e <dfu_target_mcuboot_done+0x1a>
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   2d694:	f00c f80c 	bl	396b0 <boot_request_upgrade>
		if (err != 0) {
   2d698:	4604      	mov	r4, r0
   2d69a:	b110      	cbz	r0, 2d6a2 <dfu_target_mcuboot_done+0x4e>
			LOG_ERR("boot_request_upgrade error %d", err);
   2d69c:	490b      	ldr	r1, [pc, #44]	; (2d6cc <dfu_target_mcuboot_done+0x78>)
   2d69e:	4602      	mov	r2, r0
   2d6a0:	e7e5      	b.n	2d66e <dfu_target_mcuboot_done+0x1a>
		LOG_INF("MCUBoot image upgrade scheduled. "
   2d6a2:	490b      	ldr	r1, [pc, #44]	; (2d6d0 <dfu_target_mcuboot_done+0x7c>)
		LOG_INF("MCUBoot image upgrade aborted.");
   2d6a4:	f045 0003 	orr.w	r0, r5, #3
   2d6a8:	f009 fef2 	bl	37490 <log_string_sync>
   2d6ac:	e7e3      	b.n	2d676 <dfu_target_mcuboot_done+0x22>
   2d6ae:	4909      	ldr	r1, [pc, #36]	; (2d6d4 <dfu_target_mcuboot_done+0x80>)
   2d6b0:	e7f8      	b.n	2d6a4 <dfu_target_mcuboot_done+0x50>
   2d6b2:	bf00      	nop
   2d6b4:	0003b4d8 	.word	0x0003b4d8
   2d6b8:	0003b448 	.word	0x0003b448
   2d6bc:	0003fe8d 	.word	0x0003fe8d
   2d6c0:	20002bcc 	.word	0x20002bcc
   2d6c4:	000fdfff 	.word	0x000fdfff
   2d6c8:	0003fead 	.word	0x0003fead
   2d6cc:	0003fecc 	.word	0x0003fecc
   2d6d0:	0003feea 	.word	0x0003feea
   2d6d4:	0003ff21 	.word	0x0003ff21

0002d6d8 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   2d6d8:	b538      	push	{r3, r4, r5, lr}
   2d6da:	4b0b      	ldr	r3, [pc, #44]	; (2d708 <m_assert_handler+0x30>)
   2d6dc:	4c0b      	ldr	r4, [pc, #44]	; (2d70c <m_assert_handler+0x34>)
   2d6de:	1ae4      	subs	r4, r4, r3
   2d6e0:	460d      	mov	r5, r1
   2d6e2:	08e4      	lsrs	r4, r4, #3
   2d6e4:	f009 fee7 	bl	374b6 <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   2d6e8:	01a4      	lsls	r4, r4, #6
   2d6ea:	f044 0401 	orr.w	r4, r4, #1
   2d6ee:	4602      	mov	r2, r0
   2d6f0:	4907      	ldr	r1, [pc, #28]	; (2d710 <m_assert_handler+0x38>)
   2d6f2:	462b      	mov	r3, r5
   2d6f4:	4620      	mov	r0, r4
   2d6f6:	f009 fecb 	bl	37490 <log_string_sync>
	k_oops();
   2d6fa:	4040      	eors	r0, r0
   2d6fc:	f380 8811 	msr	BASEPRI, r0
   2d700:	f04f 0003 	mov.w	r0, #3
   2d704:	df02      	svc	2
}
   2d706:	bd38      	pop	{r3, r4, r5, pc}
   2d708:	0003b448 	.word	0x0003b448
   2d70c:	0003b528 	.word	0x0003b528
   2d710:	0003ff53 	.word	0x0003ff53

0002d714 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   2d714:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   2d716:	2332      	movs	r3, #50	; 0x32
   2d718:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2d71c:	4a13      	ldr	r2, [pc, #76]	; (2d76c <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   2d71e:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   2d720:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2d722:	2119      	movs	r1, #25
   2d724:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   2d726:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   2d72a:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   2d72e:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2d732:	f7e2 fee7 	bl	10504 <mpsl_init>
	if (err) {
   2d736:	4604      	mov	r4, r0
   2d738:	b9a0      	cbnz	r0, 2d764 <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   2d73a:	480d      	ldr	r0, [pc, #52]	; (2d770 <mpsl_lib_init+0x5c>)
   2d73c:	4629      	mov	r1, r5
   2d73e:	f7eb f84a 	bl	187d6 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   2d742:	4604      	mov	r4, r0
   2d744:	b970      	cbnz	r0, 2d764 <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2d746:	4601      	mov	r1, r0
   2d748:	462a      	mov	r2, r5
   2d74a:	2008      	movs	r0, #8
   2d74c:	f7f4 fd86 	bl	2225c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2d750:	462a      	mov	r2, r5
   2d752:	4621      	mov	r1, r4
   2d754:	200b      	movs	r0, #11
   2d756:	f7f4 fd81 	bl	2225c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2d75a:	462a      	mov	r2, r5
   2d75c:	4621      	mov	r1, r4
   2d75e:	4628      	mov	r0, r5
   2d760:	f7f4 fd7c 	bl	2225c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   2d764:	4620      	mov	r0, r4
   2d766:	b003      	add	sp, #12
   2d768:	bd30      	pop	{r4, r5, pc}
   2d76a:	bf00      	nop
   2d76c:	0002d6d9 	.word	0x0002d6d9
   2d770:	20002bd4 	.word	0x20002bd4

0002d774 <mpsl_low_prio_irq_handler>:
   2d774:	4801      	ldr	r0, [pc, #4]	; (2d77c <mpsl_low_prio_irq_handler+0x8>)
   2d776:	f002 bba3 	b.w	2fec0 <z_impl_k_sem_give>
   2d77a:	bf00      	nop
   2d77c:	20000c80 	.word	0x20000c80

0002d780 <signal_thread>:
{
   2d780:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
   2d782:	4d0f      	ldr	r5, [pc, #60]	; (2d7c0 <signal_thread+0x40>)
		__ASSERT_NO_MSG(errcode == 0);
   2d784:	4c0f      	ldr	r4, [pc, #60]	; (2d7c4 <signal_thread+0x44>)
   2d786:	f04f 32ff 	mov.w	r2, #4294967295
   2d78a:	f04f 33ff 	mov.w	r3, #4294967295
   2d78e:	4628      	mov	r0, r5
   2d790:	f002 fbda 	bl	2ff48 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   2d794:	f04f 30ff 	mov.w	r0, #4294967295
   2d798:	f04f 31ff 	mov.w	r1, #4294967295
   2d79c:	f7ff f830 	bl	2c800 <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   2d7a0:	b148      	cbz	r0, 2d7b6 <signal_thread+0x36>
   2d7a2:	4909      	ldr	r1, [pc, #36]	; (2d7c8 <signal_thread+0x48>)
   2d7a4:	4809      	ldr	r0, [pc, #36]	; (2d7cc <signal_thread+0x4c>)
   2d7a6:	2346      	movs	r3, #70	; 0x46
   2d7a8:	4622      	mov	r2, r4
   2d7aa:	f009 fcb6 	bl	3711a <printk>
   2d7ae:	2146      	movs	r1, #70	; 0x46
   2d7b0:	4620      	mov	r0, r4
   2d7b2:	f009 fe58 	bl	37466 <assert_post_action>
		mpsl_low_priority_process();
   2d7b6:	f7eb f925 	bl	18a04 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   2d7ba:	f7ff f829 	bl	2c810 <multithreading_lock_release>
	while (true) {
   2d7be:	e7e2      	b.n	2d786 <signal_thread+0x6>
   2d7c0:	20000c80 	.word	0x20000c80
   2d7c4:	0003ff67 	.word	0x0003ff67
   2d7c8:	0003ff94 	.word	0x0003ff94
   2d7cc:	0003c48a 	.word	0x0003c48a

0002d7d0 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   2d7d0:	b530      	push	{r4, r5, lr}
   2d7d2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2d7d4:	4d0f      	ldr	r5, [pc, #60]	; (2d814 <mpsl_signal_thread_init+0x44>)
   2d7d6:	4910      	ldr	r1, [pc, #64]	; (2d818 <mpsl_signal_thread_init+0x48>)
   2d7d8:	2200      	movs	r2, #0
   2d7da:	2300      	movs	r3, #0
   2d7dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2d7e0:	2400      	movs	r4, #0
   2d7e2:	f06f 0309 	mvn.w	r3, #9
   2d7e6:	e9cd 3403 	strd	r3, r4, [sp, #12]
   2d7ea:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2d7ee:	4b0b      	ldr	r3, [pc, #44]	; (2d81c <mpsl_signal_thread_init+0x4c>)
   2d7f0:	9400      	str	r4, [sp, #0]
   2d7f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2d7f6:	4628      	mov	r0, r5
   2d7f8:	f001 ff06 	bl	2f608 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2d7fc:	4908      	ldr	r1, [pc, #32]	; (2d820 <mpsl_signal_thread_init+0x50>)
   2d7fe:	4628      	mov	r0, r5
   2d800:	f00c fcf4 	bl	3a1ec <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   2d804:	4622      	mov	r2, r4
   2d806:	2104      	movs	r1, #4
   2d808:	2019      	movs	r0, #25
   2d80a:	f7f4 fd27 	bl	2225c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   2d80e:	4620      	mov	r0, r4
   2d810:	b009      	add	sp, #36	; 0x24
   2d812:	bd30      	pop	{r4, r5, pc}
   2d814:	20001fb8 	.word	0x20001fb8
   2d818:	20005d60 	.word	0x20005d60
   2d81c:	0002d781 	.word	0x0002d781
   2d820:	0003ffa1 	.word	0x0003ffa1

0002d824 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2d824:	4b01      	ldr	r3, [pc, #4]	; (2d82c <mpsl_hfclk_callback+0x8>)
   2d826:	2000      	movs	r0, #0
   2d828:	681b      	ldr	r3, [r3, #0]
   2d82a:	4718      	bx	r3
   2d82c:	20002bf8 	.word	0x20002bf8

0002d830 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   2d830:	b510      	push	{r4, lr}
	switch (domain) {
   2d832:	b130      	cbz	r0, 2d842 <nrfx_clock_start+0x12>
   2d834:	2801      	cmp	r0, #1
   2d836:	d10a      	bne.n	2d84e <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   2d838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   2d83c:	480b      	ldr	r0, [pc, #44]	; (2d86c <nrfx_clock_start+0x3c>)
   2d83e:	f7e2 bcad 	b.w	1019c <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2d842:	4b0b      	ldr	r3, [pc, #44]	; (2d870 <nrfx_clock_start+0x40>)
}
   2d844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2d848:	681b      	ldr	r3, [r3, #0]
   2d84a:	2001      	movs	r0, #1
   2d84c:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   2d84e:	4909      	ldr	r1, [pc, #36]	; (2d874 <nrfx_clock_start+0x44>)
   2d850:	4a09      	ldr	r2, [pc, #36]	; (2d878 <nrfx_clock_start+0x48>)
   2d852:	480a      	ldr	r0, [pc, #40]	; (2d87c <nrfx_clock_start+0x4c>)
   2d854:	231c      	movs	r3, #28
   2d856:	f009 fc60 	bl	3711a <printk>
   2d85a:	4809      	ldr	r0, [pc, #36]	; (2d880 <nrfx_clock_start+0x50>)
   2d85c:	f009 fc5d 	bl	3711a <printk>
}
   2d860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   2d864:	4804      	ldr	r0, [pc, #16]	; (2d878 <nrfx_clock_start+0x48>)
   2d866:	211c      	movs	r1, #28
   2d868:	f009 bdfd 	b.w	37466 <assert_post_action>
   2d86c:	0002d825 	.word	0x0002d825
   2d870:	20002bf8 	.word	0x20002bf8
   2d874:	00041a5a 	.word	0x00041a5a
   2d878:	0003ffb7 	.word	0x0003ffb7
   2d87c:	0003c48a 	.word	0x0003c48a
   2d880:	0003fff4 	.word	0x0003fff4

0002d884 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   2d884:	b508      	push	{r3, lr}
	switch (domain) {
   2d886:	b1a0      	cbz	r0, 2d8b2 <nrfx_clock_stop+0x2e>
   2d888:	2801      	cmp	r0, #1
   2d88a:	d103      	bne.n	2d894 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   2d88c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   2d890:	f7e2 bc76 	b.w	10180 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   2d894:	4907      	ldr	r1, [pc, #28]	; (2d8b4 <nrfx_clock_stop+0x30>)
   2d896:	4a08      	ldr	r2, [pc, #32]	; (2d8b8 <nrfx_clock_stop+0x34>)
   2d898:	4808      	ldr	r0, [pc, #32]	; (2d8bc <nrfx_clock_stop+0x38>)
   2d89a:	232a      	movs	r3, #42	; 0x2a
   2d89c:	f009 fc3d 	bl	3711a <printk>
   2d8a0:	4807      	ldr	r0, [pc, #28]	; (2d8c0 <nrfx_clock_stop+0x3c>)
   2d8a2:	f009 fc3a 	bl	3711a <printk>
}
   2d8a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   2d8aa:	4803      	ldr	r0, [pc, #12]	; (2d8b8 <nrfx_clock_stop+0x34>)
   2d8ac:	212a      	movs	r1, #42	; 0x2a
   2d8ae:	f009 bdda 	b.w	37466 <assert_post_action>
}
   2d8b2:	bd08      	pop	{r3, pc}
   2d8b4:	00041a5a 	.word	0x00041a5a
   2d8b8:	0003ffb7 	.word	0x0003ffb7
   2d8bc:	0003c48a 	.word	0x0003c48a
   2d8c0:	0003fff4 	.word	0x0003fff4

0002d8c4 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   2d8c4:	4b01      	ldr	r3, [pc, #4]	; (2d8cc <nrfx_clock_init+0x8>)
   2d8c6:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   2d8c8:	4801      	ldr	r0, [pc, #4]	; (2d8d0 <nrfx_clock_init+0xc>)
   2d8ca:	4770      	bx	lr
   2d8cc:	20002bf8 	.word	0x20002bf8
   2d8d0:	0bad0000 	.word	0x0bad0000

0002d8d4 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   2d8d4:	b538      	push	{r3, r4, r5, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   2d8d6:	4d37      	ldr	r5, [pc, #220]	; (2d9b4 <timeslot_callback+0xe0>)
   2d8d8:	7e2b      	ldrb	r3, [r5, #24]
   2d8da:	4283      	cmp	r3, r0
{
   2d8dc:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(session_id == _context.session_id);
   2d8de:	d009      	beq.n	2d8f4 <timeslot_callback+0x20>
   2d8e0:	4935      	ldr	r1, [pc, #212]	; (2d9b8 <timeslot_callback+0xe4>)
   2d8e2:	4836      	ldr	r0, [pc, #216]	; (2d9bc <timeslot_callback+0xe8>)
   2d8e4:	4a36      	ldr	r2, [pc, #216]	; (2d9c0 <timeslot_callback+0xec>)
   2d8e6:	234c      	movs	r3, #76	; 0x4c
   2d8e8:	f009 fc17 	bl	3711a <printk>
   2d8ec:	4834      	ldr	r0, [pc, #208]	; (2d9c0 <timeslot_callback+0xec>)
   2d8ee:	214c      	movs	r1, #76	; 0x4c
   2d8f0:	f009 fdb9 	bl	37466 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d8f4:	f3bf 8f5b 	dmb	ish
   2d8f8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   2d8fa:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   2d8fe:	b10b      	cbz	r3, 2d904 <timeslot_callback+0x30>
   2d900:	2000      	movs	r0, #0
   2d902:	e024      	b.n	2d94e <timeslot_callback+0x7a>
		return NULL;
	}

	switch (signal) {
   2d904:	2c09      	cmp	r4, #9
   2d906:	d849      	bhi.n	2d99c <timeslot_callback+0xc8>
   2d908:	a301      	add	r3, pc, #4	; (adr r3, 2d910 <timeslot_callback+0x3c>)
   2d90a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   2d90e:	bf00      	nop
   2d910:	0002d939 	.word	0x0002d939
   2d914:	0002d99d 	.word	0x0002d99d
   2d918:	0002d99d 	.word	0x0002d99d
   2d91c:	0002d99d 	.word	0x0002d99d
   2d920:	0002d99d 	.word	0x0002d99d
   2d924:	0002d96b 	.word	0x0002d96b
   2d928:	0002d96b 	.word	0x0002d96b
   2d92c:	0002d963 	.word	0x0002d963
   2d930:	0002d99d 	.word	0x0002d99d
   2d934:	0002d901 	.word	0x0002d901
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   2d938:	6a2b      	ldr	r3, [r5, #32]
   2d93a:	e9d3 2000 	ldrd	r2, r0, [r3]
   2d93e:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   2d940:	2801      	cmp	r0, #1
   2d942:	d005      	beq.n	2d950 <timeslot_callback+0x7c>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   2d944:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   2d946:	2302      	movs	r3, #2
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   2d948:	481e      	ldr	r0, [pc, #120]	; (2d9c4 <timeslot_callback+0xf0>)
			_context.return_param.callback_action =
   2d94a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
   2d94e:	bd38      	pop	{r3, r4, r5, pc}
			_context.timeslot_request.params.earliest.priority =
   2d950:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   2d954:	481c      	ldr	r0, [pc, #112]	; (2d9c8 <timeslot_callback+0xf4>)
   2d956:	63a8      	str	r0, [r5, #56]	; 0x38
			_context.return_param.callback_action =
   2d958:	2303      	movs	r3, #3
   2d95a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	return &_context.return_param;
   2d95e:	3010      	adds	r0, #16
   2d960:	e7f5      	b.n	2d94e <timeslot_callback+0x7a>
	z_impl_k_sem_give(sem);
   2d962:	4814      	ldr	r0, [pc, #80]	; (2d9b4 <timeslot_callback+0xe0>)
   2d964:	f002 faac 	bl	2fec0 <z_impl_k_sem_give>
   2d968:	e7ca      	b.n	2d900 <timeslot_callback+0x2c>
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2d96a:	7e28      	ldrb	r0, [r5, #24]
   2d96c:	4916      	ldr	r1, [pc, #88]	; (2d9c8 <timeslot_callback+0xf4>)
	_context.timeslot_request.params.earliest.priority =
   2d96e:	2400      	movs	r4, #0
   2d970:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2d974:	f7ea fed8 	bl	18728 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2d978:	4605      	mov	r5, r0
   2d97a:	2800      	cmp	r0, #0
   2d97c:	d0c0      	beq.n	2d900 <timeslot_callback+0x2c>
   2d97e:	4a10      	ldr	r2, [pc, #64]	; (2d9c0 <timeslot_callback+0xec>)
   2d980:	4912      	ldr	r1, [pc, #72]	; (2d9cc <timeslot_callback+0xf8>)
   2d982:	480e      	ldr	r0, [pc, #56]	; (2d9bc <timeslot_callback+0xe8>)
   2d984:	2344      	movs	r3, #68	; 0x44
   2d986:	f009 fbc8 	bl	3711a <printk>
   2d98a:	4629      	mov	r1, r5
   2d98c:	4810      	ldr	r0, [pc, #64]	; (2d9d0 <timeslot_callback+0xfc>)
   2d98e:	f009 fbc4 	bl	3711a <printk>
   2d992:	2144      	movs	r1, #68	; 0x44
		__ASSERT(false, "unexpected signal: %u", signal);
   2d994:	480a      	ldr	r0, [pc, #40]	; (2d9c0 <timeslot_callback+0xec>)
   2d996:	f009 fd66 	bl	37466 <assert_post_action>
		return NULL;
   2d99a:	e7b1      	b.n	2d900 <timeslot_callback+0x2c>
		__ASSERT(false, "unexpected signal: %u", signal);
   2d99c:	4a08      	ldr	r2, [pc, #32]	; (2d9c0 <timeslot_callback+0xec>)
   2d99e:	490d      	ldr	r1, [pc, #52]	; (2d9d4 <timeslot_callback+0x100>)
   2d9a0:	4806      	ldr	r0, [pc, #24]	; (2d9bc <timeslot_callback+0xe8>)
   2d9a2:	2376      	movs	r3, #118	; 0x76
   2d9a4:	f009 fbb9 	bl	3711a <printk>
   2d9a8:	4621      	mov	r1, r4
   2d9aa:	480b      	ldr	r0, [pc, #44]	; (2d9d8 <timeslot_callback+0x104>)
   2d9ac:	f009 fbb5 	bl	3711a <printk>
   2d9b0:	2176      	movs	r1, #118	; 0x76
   2d9b2:	e7ef      	b.n	2d994 <timeslot_callback+0xc0>
   2d9b4:	20002bfc 	.word	0x20002bfc
   2d9b8:	0004003e 	.word	0x0004003e
   2d9bc:	0003c48a 	.word	0x0003c48a
   2d9c0:	00040004 	.word	0x00040004
   2d9c4:	20002c30 	.word	0x20002c30
   2d9c8:	20002c20 	.word	0x20002c20
   2d9cc:	00040060 	.word	0x00040060
   2d9d0:	00040069 	.word	0x00040069
   2d9d4:	00041a5a 	.word	0x00041a5a
   2d9d8:	0004008c 	.word	0x0004008c

0002d9dc <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   2d9dc:	4802      	ldr	r0, [pc, #8]	; (2d9e8 <nrf_flash_sync_init+0xc>)
   2d9de:	2201      	movs	r2, #1
   2d9e0:	2100      	movs	r1, #0
   2d9e2:	f00c bc46 	b.w	3a272 <z_impl_k_sem_init>
   2d9e6:	bf00      	nop
   2d9e8:	20002bfc 	.word	0x20002bfc

0002d9ec <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   2d9ec:	4b01      	ldr	r3, [pc, #4]	; (2d9f4 <nrf_flash_sync_set_context+0x8>)
   2d9ee:	61d8      	str	r0, [r3, #28]
}
   2d9f0:	4770      	bx	lr
   2d9f2:	bf00      	nop
   2d9f4:	20002bfc 	.word	0x20002bfc

0002d9f8 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   2d9f8:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2d9fa:	f04f 31ff 	mov.w	r1, #4294967295
{
   2d9fe:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2da00:	f04f 30ff 	mov.w	r0, #4294967295
   2da04:	f7fe fefc 	bl	2c800 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2da08:	b148      	cbz	r0, 2da1e <nrf_flash_sync_exe+0x26>
   2da0a:	4957      	ldr	r1, [pc, #348]	; (2db68 <nrf_flash_sync_exe+0x170>)
   2da0c:	4857      	ldr	r0, [pc, #348]	; (2db6c <nrf_flash_sync_exe+0x174>)
   2da0e:	4a58      	ldr	r2, [pc, #352]	; (2db70 <nrf_flash_sync_exe+0x178>)
   2da10:	2393      	movs	r3, #147	; 0x93
   2da12:	f009 fb82 	bl	3711a <printk>
   2da16:	4856      	ldr	r0, [pc, #344]	; (2db70 <nrf_flash_sync_exe+0x178>)
   2da18:	2193      	movs	r1, #147	; 0x93
   2da1a:	f009 fd24 	bl	37466 <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   2da1e:	4c55      	ldr	r4, [pc, #340]	; (2db74 <nrf_flash_sync_exe+0x17c>)
   2da20:	4855      	ldr	r0, [pc, #340]	; (2db78 <nrf_flash_sync_exe+0x180>)
   2da22:	f104 0118 	add.w	r1, r4, #24
   2da26:	f7df fb1f 	bl	d068 <mpsl_timeslot_session_open>
   2da2a:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   2da2c:	f7fe fef0 	bl	2c810 <multithreading_lock_release>

	if (ret < 0) {
   2da30:	2d00      	cmp	r5, #0
   2da32:	da0d      	bge.n	2da50 <nrf_flash_sync_exe+0x58>
   2da34:	4851      	ldr	r0, [pc, #324]	; (2db7c <nrf_flash_sync_exe+0x184>)
   2da36:	4b52      	ldr	r3, [pc, #328]	; (2db80 <nrf_flash_sync_exe+0x188>)
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   2da38:	4952      	ldr	r1, [pc, #328]	; (2db84 <nrf_flash_sync_exe+0x18c>)
   2da3a:	1a1b      	subs	r3, r3, r0
   2da3c:	08db      	lsrs	r3, r3, #3
   2da3e:	019b      	lsls	r3, r3, #6
   2da40:	f043 0001 	orr.w	r0, r3, #1
   2da44:	462a      	mov	r2, r5
   2da46:	f009 fd23 	bl	37490 <log_string_sync>
		return -ENOMEM;
   2da4a:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   2da4e:	bd70      	pop	{r4, r5, r6, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   2da50:	f240 1301 	movw	r3, #257	; 0x101
   2da54:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   2da56:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   2da58:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   2da5a:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   2da5c:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   2da5e:	4b4a      	ldr	r3, [pc, #296]	; (2db88 <nrf_flash_sync_exe+0x190>)
   2da60:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   2da62:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   2da64:	f06f 0373 	mvn.w	r3, #115	; 0x73
   2da68:	63e3      	str	r3, [r4, #60]	; 0x3c
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   2da6a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2da6e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2da72:	f3bf 8f5b 	dmb	ish
   2da76:	e853 1f00 	ldrex	r1, [r3]
   2da7a:	e843 2000 	strex	r0, r2, [r3]
   2da7e:	2800      	cmp	r0, #0
   2da80:	d1f9      	bne.n	2da76 <nrf_flash_sync_exe+0x7e>
   2da82:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   2da86:	68a2      	ldr	r2, [r4, #8]
   2da88:	461e      	mov	r6, r3
   2da8a:	b14a      	cbz	r2, 2daa0 <nrf_flash_sync_exe+0xa8>
   2da8c:	493f      	ldr	r1, [pc, #252]	; (2db8c <nrf_flash_sync_exe+0x194>)
   2da8e:	4837      	ldr	r0, [pc, #220]	; (2db6c <nrf_flash_sync_exe+0x174>)
   2da90:	4a37      	ldr	r2, [pc, #220]	; (2db70 <nrf_flash_sync_exe+0x178>)
   2da92:	23a9      	movs	r3, #169	; 0xa9
   2da94:	f009 fb41 	bl	3711a <printk>
   2da98:	4835      	ldr	r0, [pc, #212]	; (2db70 <nrf_flash_sync_exe+0x178>)
   2da9a:	21a9      	movs	r1, #169	; 0xa9
   2da9c:	f009 fce3 	bl	37466 <assert_post_action>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2daa0:	f04f 30ff 	mov.w	r0, #4294967295
   2daa4:	f04f 31ff 	mov.w	r1, #4294967295
   2daa8:	f7fe feaa 	bl	2c800 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2daac:	b148      	cbz	r0, 2dac2 <nrf_flash_sync_exe+0xca>
   2daae:	492e      	ldr	r1, [pc, #184]	; (2db68 <nrf_flash_sync_exe+0x170>)
   2dab0:	482e      	ldr	r0, [pc, #184]	; (2db6c <nrf_flash_sync_exe+0x174>)
   2dab2:	4a2f      	ldr	r2, [pc, #188]	; (2db70 <nrf_flash_sync_exe+0x178>)
   2dab4:	23ac      	movs	r3, #172	; 0xac
   2dab6:	f009 fb30 	bl	3711a <printk>
   2daba:	482d      	ldr	r0, [pc, #180]	; (2db70 <nrf_flash_sync_exe+0x178>)
   2dabc:	21ac      	movs	r1, #172	; 0xac
   2dabe:	f009 fcd2 	bl	37466 <assert_post_action>
	ret = mpsl_timeslot_request(_context.session_id, req);
   2dac2:	4933      	ldr	r1, [pc, #204]	; (2db90 <nrf_flash_sync_exe+0x198>)
   2dac4:	7e20      	ldrb	r0, [r4, #24]
   2dac6:	f7ea fe2f 	bl	18728 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2daca:	4605      	mov	r5, r0
   2dacc:	b168      	cbz	r0, 2daea <nrf_flash_sync_exe+0xf2>
   2dace:	4a28      	ldr	r2, [pc, #160]	; (2db70 <nrf_flash_sync_exe+0x178>)
   2dad0:	4930      	ldr	r1, [pc, #192]	; (2db94 <nrf_flash_sync_exe+0x19c>)
   2dad2:	4826      	ldr	r0, [pc, #152]	; (2db6c <nrf_flash_sync_exe+0x174>)
   2dad4:	23ae      	movs	r3, #174	; 0xae
   2dad6:	f009 fb20 	bl	3711a <printk>
   2dada:	482f      	ldr	r0, [pc, #188]	; (2db98 <nrf_flash_sync_exe+0x1a0>)
   2dadc:	4629      	mov	r1, r5
   2dade:	f009 fb1c 	bl	3711a <printk>
   2dae2:	4823      	ldr	r0, [pc, #140]	; (2db70 <nrf_flash_sync_exe+0x178>)
   2dae4:	21ae      	movs	r1, #174	; 0xae
   2dae6:	f009 fcbe 	bl	37466 <assert_post_action>
	MULTITHREADING_LOCK_RELEASE();
   2daea:	f7fe fe91 	bl	2c810 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   2daee:	4a2b      	ldr	r2, [pc, #172]	; (2db9c <nrf_flash_sync_exe+0x1a4>)
   2daf0:	4820      	ldr	r0, [pc, #128]	; (2db74 <nrf_flash_sync_exe+0x17c>)
   2daf2:	2300      	movs	r3, #0
   2daf4:	f002 fa28 	bl	2ff48 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   2daf8:	2800      	cmp	r0, #0
   2dafa:	da14      	bge.n	2db26 <nrf_flash_sync_exe+0x12e>
   2dafc:	4b1f      	ldr	r3, [pc, #124]	; (2db7c <nrf_flash_sync_exe+0x184>)
   2dafe:	4820      	ldr	r0, [pc, #128]	; (2db80 <nrf_flash_sync_exe+0x188>)
		LOG_ERR("timeout");
   2db00:	4927      	ldr	r1, [pc, #156]	; (2dba0 <nrf_flash_sync_exe+0x1a8>)
   2db02:	1ac0      	subs	r0, r0, r3
   2db04:	08c0      	lsrs	r0, r0, #3
   2db06:	0180      	lsls	r0, r0, #6
   2db08:	f040 0001 	orr.w	r0, r0, #1
   2db0c:	f009 fcc0 	bl	37490 <log_string_sync>
   2db10:	f3bf 8f5b 	dmb	ish
   2db14:	2301      	movs	r3, #1
   2db16:	e856 2f00 	ldrex	r2, [r6]
   2db1a:	e846 3100 	strex	r1, r3, [r6]
   2db1e:	2900      	cmp	r1, #0
   2db20:	d1f9      	bne.n	2db16 <nrf_flash_sync_exe+0x11e>
   2db22:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2db26:	f04f 30ff 	mov.w	r0, #4294967295
   2db2a:	f04f 31ff 	mov.w	r1, #4294967295
   2db2e:	f7fe fe67 	bl	2c800 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2db32:	b148      	cbz	r0, 2db48 <nrf_flash_sync_exe+0x150>
   2db34:	490c      	ldr	r1, [pc, #48]	; (2db68 <nrf_flash_sync_exe+0x170>)
   2db36:	480d      	ldr	r0, [pc, #52]	; (2db6c <nrf_flash_sync_exe+0x174>)
   2db38:	4a0d      	ldr	r2, [pc, #52]	; (2db70 <nrf_flash_sync_exe+0x178>)
   2db3a:	23b9      	movs	r3, #185	; 0xb9
   2db3c:	f009 faed 	bl	3711a <printk>
   2db40:	480b      	ldr	r0, [pc, #44]	; (2db70 <nrf_flash_sync_exe+0x178>)
   2db42:	21b9      	movs	r1, #185	; 0xb9
   2db44:	f009 fc8f 	bl	37466 <assert_post_action>
	mpsl_timeslot_session_close(_context.session_id);
   2db48:	7e20      	ldrb	r0, [r4, #24]
   2db4a:	f7ea fe26 	bl	1879a <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   2db4e:	f7fe fe5f 	bl	2c810 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2db52:	f3bf 8f5b 	dmb	ish
   2db56:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2db58:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   2db5c:	b113      	cbz	r3, 2db64 <nrf_flash_sync_exe+0x16c>
	z_impl_k_sem_reset(sem);
   2db5e:	4805      	ldr	r0, [pc, #20]	; (2db74 <nrf_flash_sync_exe+0x17c>)
   2db60:	f002 fa7c 	bl	3005c <z_impl_k_sem_reset>
	return _context.status;
   2db64:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2db66:	e772      	b.n	2da4e <nrf_flash_sync_exe+0x56>
   2db68:	0003ff94 	.word	0x0003ff94
   2db6c:	0003c48a 	.word	0x0003c48a
   2db70:	00040004 	.word	0x00040004
   2db74:	20002bfc 	.word	0x20002bfc
   2db78:	0002d8d5 	.word	0x0002d8d5
   2db7c:	0003b448 	.word	0x0003b448
   2db80:	0003b500 	.word	0x0003b500
   2db84:	000400a4 	.word	0x000400a4
   2db88:	07a11fff 	.word	0x07a11fff
   2db8c:	000400ca 	.word	0x000400ca
   2db90:	20002c20 	.word	0x20002c20
   2db94:	00040060 	.word	0x00040060
   2db98:	00040069 	.word	0x00040069
   2db9c:	000b7b44 	.word	0x000b7b44
   2dba0:	0003e9c2 	.word	0x0003e9c2

0002dba4 <nrf_flash_sync_check_time_limit>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dba4:	4b07      	ldr	r3, [pc, #28]	; (2dbc4 <nrf_flash_sync_check_time_limit+0x20>)
   2dba6:	2201      	movs	r2, #1
   2dba8:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   2dbaa:	3b40      	subs	r3, #64	; 0x40
   2dbac:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   2dbb0:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   2dbb4:	4418      	add	r0, r3
   2dbb6:	4b04      	ldr	r3, [pc, #16]	; (2dbc8 <nrf_flash_sync_check_time_limit+0x24>)
   2dbb8:	69db      	ldr	r3, [r3, #28]
}
   2dbba:	4298      	cmp	r0, r3
   2dbbc:	bf34      	ite	cc
   2dbbe:	2000      	movcc	r0, #0
   2dbc0:	2001      	movcs	r0, #1
   2dbc2:	4770      	bx	lr
   2dbc4:	40008040 	.word	0x40008040
   2dbc8:	20002bfc 	.word	0x20002bfc

0002dbcc <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   2dbcc:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   2dbce:	4a05      	ldr	r2, [pc, #20]	; (2dbe4 <boot_write_magic+0x18>)
{
   2dbd0:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   2dbd2:	3910      	subs	r1, #16
   2dbd4:	2310      	movs	r3, #16
   2dbd6:	f009 fe70 	bl	378ba <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   2dbda:	3800      	subs	r0, #0
   2dbdc:	bf18      	it	ne
   2dbde:	2001      	movne	r0, #1
   2dbe0:	bd08      	pop	{r3, pc}
   2dbe2:	bf00      	nop
   2dbe4:	0003be18 	.word	0x0003be18

0002dbe8 <boot_read_swap_state>:
{
   2dbe8:	b530      	push	{r4, r5, lr}
   2dbea:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   2dbec:	6881      	ldr	r1, [r0, #8]
{
   2dbee:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   2dbf0:	2310      	movs	r3, #16
   2dbf2:	aa02      	add	r2, sp, #8
   2dbf4:	3910      	subs	r1, #16
{
   2dbf6:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   2dbf8:	f009 fe43 	bl	37882 <flash_area_read>
    if (rc < 0) {
   2dbfc:	2800      	cmp	r0, #0
   2dbfe:	db11      	blt.n	2dc24 <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
   2dc00:	2210      	movs	r2, #16
   2dc02:	a902      	add	r1, sp, #8
   2dc04:	4628      	mov	r0, r5
   2dc06:	f00c f923 	bl	39e50 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   2dc0a:	b168      	cbz	r0, 2dc28 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
   2dc0c:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   2dc0e:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
   2dc10:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   2dc12:	2301      	movs	r3, #1
   2dc14:	f10d 0207 	add.w	r2, sp, #7
   2dc18:	3928      	subs	r1, #40	; 0x28
   2dc1a:	4628      	mov	r0, r5
   2dc1c:	f009 fe31 	bl	37882 <flash_area_read>
    if (rc < 0) {
   2dc20:	2800      	cmp	r0, #0
   2dc22:	da0b      	bge.n	2dc3c <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
   2dc24:	2001      	movs	r0, #1
   2dc26:	e02a      	b.n	2dc7e <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   2dc28:	4916      	ldr	r1, [pc, #88]	; (2dc84 <boot_read_swap_state+0x9c>)
   2dc2a:	2210      	movs	r2, #16
   2dc2c:	a802      	add	r0, sp, #8
   2dc2e:	f00c fc5a 	bl	3a4e6 <memcmp>
   2dc32:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
   2dc34:	bf14      	ite	ne
   2dc36:	2302      	movne	r3, #2
   2dc38:	2301      	moveq	r3, #1
   2dc3a:	e7e8      	b.n	2dc0e <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   2dc3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2dc40:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   2dc44:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   2dc46:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   2dc48:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
   2dc4a:	2201      	movs	r2, #1
   2dc4c:	f10d 0107 	add.w	r1, sp, #7
   2dc50:	4628      	mov	r0, r5
   2dc52:	f00c f8fd 	bl	39e50 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   2dc56:	b910      	cbnz	r0, 2dc5e <boot_read_swap_state+0x76>
   2dc58:	7863      	ldrb	r3, [r4, #1]
   2dc5a:	2b04      	cmp	r3, #4
   2dc5c:	d903      	bls.n	2dc66 <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   2dc5e:	2301      	movs	r3, #1
   2dc60:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
   2dc62:	2300      	movs	r3, #0
   2dc64:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
   2dc66:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   2dc68:	1ca1      	adds	r1, r4, #2
   2dc6a:	3a20      	subs	r2, #32
   2dc6c:	4628      	mov	r0, r5
   2dc6e:	f00c f906 	bl	39e7e <boot_read_flag>
    if (rc) {
   2dc72:	2800      	cmp	r0, #0
   2dc74:	d1d6      	bne.n	2dc24 <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
   2dc76:	1ce1      	adds	r1, r4, #3
   2dc78:	4628      	mov	r0, r5
   2dc7a:	f00c f95c 	bl	39f36 <boot_read_image_ok>
}
   2dc7e:	b007      	add	sp, #28
   2dc80:	bd30      	pop	{r4, r5, pc}
   2dc82:	bf00      	nop
   2dc84:	0003be18 	.word	0x0003be18

0002dc88 <boot_write_swap_info>:
                     uint8_t image_num)
{
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2dc88:	2a0e      	cmp	r2, #14
{
   2dc8a:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2dc8c:	d906      	bls.n	2dc9c <boot_write_swap_info+0x14>
   2dc8e:	4b0c      	ldr	r3, [pc, #48]	; (2dcc0 <boot_write_swap_info+0x38>)
   2dc90:	4a0c      	ldr	r2, [pc, #48]	; (2dcc4 <boot_write_swap_info+0x3c>)
   2dc92:	480d      	ldr	r0, [pc, #52]	; (2dcc8 <boot_write_swap_info+0x40>)
   2dc94:	f44f 71ca 	mov.w	r1, #404	; 0x194
   2dc98:	f007 fef2 	bl	35a80 <__assert_func>
   2dc9c:	290e      	cmp	r1, #14
   2dc9e:	d901      	bls.n	2dca4 <boot_write_swap_info+0x1c>
   2dca0:	4b0a      	ldr	r3, [pc, #40]	; (2dccc <boot_write_swap_info+0x44>)
   2dca2:	e7f5      	b.n	2dc90 <boot_write_swap_info+0x8>
   2dca4:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   2dca8:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
   2dcac:	6881      	ldr	r1, [r0, #8]
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off),
                 swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   2dcae:	2301      	movs	r3, #1
   2dcb0:	f10d 0207 	add.w	r2, sp, #7
   2dcb4:	3928      	subs	r1, #40	; 0x28
   2dcb6:	f00c f8ff 	bl	39eb8 <boot_write_trailer>
}
   2dcba:	b003      	add	sp, #12
   2dcbc:	f85d fb04 	ldr.w	pc, [sp], #4
   2dcc0:	00040106 	.word	0x00040106
   2dcc4:	0004017a 	.word	0x0004017a
   2dcc8:	00040118 	.word	0x00040118
   2dccc:	0004015b 	.word	0x0004015b

0002dcd0 <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   2dcd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2dcd2:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   2dcd4:	2005      	movs	r0, #5
   2dcd6:	a901      	add	r1, sp, #4
   2dcd8:	f7f3 fb00 	bl	212dc <flash_area_open>
    if (rc != 0) {
   2dcdc:	2800      	cmp	r0, #0
   2dcde:	d137      	bne.n	2dd50 <boot_set_pending_multi+0x80>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_secondary_slot);
   2dce0:	9801      	ldr	r0, [sp, #4]
   2dce2:	a902      	add	r1, sp, #8
   2dce4:	f7ff ff80 	bl	2dbe8 <boot_read_swap_state>
    if (rc != 0) {
   2dce8:	4604      	mov	r4, r0
   2dcea:	b938      	cbnz	r0, 2dcfc <boot_set_pending_multi+0x2c>
        goto done;
    }

    switch (state_secondary_slot.magic) {
   2dcec:	f89d 5008 	ldrb.w	r5, [sp, #8]
   2dcf0:	2d02      	cmp	r5, #2
   2dcf2:	d01f      	beq.n	2dd34 <boot_set_pending_multi+0x64>
   2dcf4:	2d03      	cmp	r5, #3
   2dcf6:	d007      	beq.n	2dd08 <boot_set_pending_multi+0x38>
   2dcf8:	2d01      	cmp	r5, #1
   2dcfa:	d122      	bne.n	2dd42 <boot_set_pending_multi+0x72>
        assert(0);
        rc = BOOT_EBADIMAGE;
    }

done:
    flash_area_close(fap);
   2dcfc:	9801      	ldr	r0, [sp, #4]
   2dcfe:	f009 fdbf 	bl	37880 <flash_area_close>
    return rc;
}
   2dd02:	4620      	mov	r0, r4
   2dd04:	b004      	add	sp, #16
   2dd06:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_write_magic(fap);
   2dd08:	9801      	ldr	r0, [sp, #4]
   2dd0a:	f7ff ff5f 	bl	2dbcc <boot_write_magic>
        if (rc == 0 && permanent) {
   2dd0e:	4604      	mov	r4, r0
   2dd10:	2800      	cmp	r0, #0
   2dd12:	d1f3      	bne.n	2dcfc <boot_set_pending_multi+0x2c>
   2dd14:	b166      	cbz	r6, 2dd30 <boot_set_pending_multi+0x60>
            rc = boot_write_image_ok(fap);
   2dd16:	9801      	ldr	r0, [sp, #4]
   2dd18:	f00c f908 	bl	39f2c <boot_write_image_ok>
        if (rc == 0) {
   2dd1c:	4604      	mov	r4, r0
   2dd1e:	2800      	cmp	r0, #0
   2dd20:	d1ec      	bne.n	2dcfc <boot_set_pending_multi+0x2c>
            rc = boot_write_swap_info(fap, swap_type, 0);
   2dd22:	9801      	ldr	r0, [sp, #4]
   2dd24:	2200      	movs	r2, #0
   2dd26:	4629      	mov	r1, r5
   2dd28:	f7ff ffae 	bl	2dc88 <boot_write_swap_info>
   2dd2c:	4604      	mov	r4, r0
   2dd2e:	e7e5      	b.n	2dcfc <boot_set_pending_multi+0x2c>
                swap_type = BOOT_SWAP_TYPE_TEST;
   2dd30:	2502      	movs	r5, #2
   2dd32:	e7f6      	b.n	2dd22 <boot_set_pending_multi+0x52>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   2dd34:	9801      	ldr	r0, [sp, #4]
   2dd36:	4621      	mov	r1, r4
   2dd38:	6882      	ldr	r2, [r0, #8]
   2dd3a:	f009 fdf1 	bl	37920 <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   2dd3e:	2403      	movs	r4, #3
        break;
   2dd40:	e7dc      	b.n	2dcfc <boot_set_pending_multi+0x2c>
        assert(0);
   2dd42:	4b04      	ldr	r3, [pc, #16]	; (2dd54 <boot_set_pending_multi+0x84>)
   2dd44:	4a04      	ldr	r2, [pc, #16]	; (2dd58 <boot_set_pending_multi+0x88>)
   2dd46:	4805      	ldr	r0, [pc, #20]	; (2dd5c <boot_set_pending_multi+0x8c>)
   2dd48:	f240 2129 	movw	r1, #553	; 0x229
   2dd4c:	f007 fe98 	bl	35a80 <__assert_func>
        return BOOT_EFLASH;
   2dd50:	2401      	movs	r4, #1
   2dd52:	e7d6      	b.n	2dd02 <boot_set_pending_multi+0x32>
   2dd54:	00041a5a 	.word	0x00041a5a
   2dd58:	0004018f 	.word	0x0004018f
   2dd5c:	00040118 	.word	0x00040118

0002dd60 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2dd60:	4b03      	ldr	r3, [pc, #12]	; (2dd70 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
   2dd62:	6818      	ldr	r0, [r3, #0]
}
   2dd64:	f1a0 0308 	sub.w	r3, r0, #8
   2dd68:	4258      	negs	r0, r3
   2dd6a:	4158      	adcs	r0, r3
   2dd6c:	4770      	bx	lr
   2dd6e:	bf00      	nop
   2dd70:	10000130 	.word	0x10000130

0002dd74 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2dd74:	4b06      	ldr	r3, [pc, #24]	; (2dd90 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
   2dd76:	681b      	ldr	r3, [r3, #0]
   2dd78:	2b08      	cmp	r3, #8
   2dd7a:	d106      	bne.n	2dd8a <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2dd7c:	4b05      	ldr	r3, [pc, #20]	; (2dd94 <nrf52_errata_103+0x20>)
   2dd7e:	681b      	ldr	r3, [r3, #0]
                switch(var2)
   2dd80:	2b05      	cmp	r3, #5
   2dd82:	d802      	bhi.n	2dd8a <nrf52_errata_103+0x16>
   2dd84:	4a04      	ldr	r2, [pc, #16]	; (2dd98 <nrf52_errata_103+0x24>)
   2dd86:	5cd0      	ldrb	r0, [r2, r3]
   2dd88:	4770      	bx	lr
        return false;
   2dd8a:	2000      	movs	r0, #0
}
   2dd8c:	4770      	bx	lr
   2dd8e:	bf00      	nop
   2dd90:	10000130 	.word	0x10000130
   2dd94:	10000134 	.word	0x10000134
   2dd98:	000401ac 	.word	0x000401ac

0002dd9c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   2dd9c:	4a02      	ldr	r2, [pc, #8]	; (2dda8 <nvmc_wait+0xc>)
   2dd9e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2dda2:	2b00      	cmp	r3, #0
   2dda4:	d0fb      	beq.n	2dd9e <nvmc_wait+0x2>
}
   2dda6:	4770      	bx	lr
   2dda8:	4001e000 	.word	0x4001e000

0002ddac <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   2ddac:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   2ddae:	f7ff ffd7 	bl	2dd60 <nrf52_errata_136>
   2ddb2:	b140      	cbz	r0, 2ddc6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   2ddb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ddb8:	2200      	movs	r2, #0
   2ddba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2ddbe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2ddc2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   2ddc6:	f7ff ffcb 	bl	2dd60 <nrf52_errata_136>
   2ddca:	2800      	cmp	r0, #0
   2ddcc:	d046      	beq.n	2de5c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   2ddce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2ddd2:	4b5b      	ldr	r3, [pc, #364]	; (2df40 <SystemInit+0x194>)
   2ddd4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   2ddd8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   2dddc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   2dde0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2dde4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   2dde8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   2ddec:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   2ddf0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2ddf4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   2ddf8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   2ddfc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   2de00:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2de04:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   2de08:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   2de0c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   2de10:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2de14:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   2de18:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   2de1c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   2de20:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2de24:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   2de28:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2de2c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   2de30:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2de34:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   2de38:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2de3c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   2de40:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2de44:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   2de48:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   2de4c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   2de50:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2de54:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   2de58:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   2de5c:	f7ff ff8a 	bl	2dd74 <nrf52_errata_103>
   2de60:	b110      	cbz	r0, 2de68 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   2de62:	4b38      	ldr	r3, [pc, #224]	; (2df44 <SystemInit+0x198>)
   2de64:	4a38      	ldr	r2, [pc, #224]	; (2df48 <SystemInit+0x19c>)
   2de66:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2de68:	f7ff ff84 	bl	2dd74 <nrf52_errata_103>
   2de6c:	b118      	cbz	r0, 2de76 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   2de6e:	4b37      	ldr	r3, [pc, #220]	; (2df4c <SystemInit+0x1a0>)
   2de70:	22fb      	movs	r2, #251	; 0xfb
   2de72:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   2de76:	f7ff ff7d 	bl	2dd74 <nrf52_errata_103>
   2de7a:	b148      	cbz	r0, 2de90 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   2de7c:	4934      	ldr	r1, [pc, #208]	; (2df50 <SystemInit+0x1a4>)
   2de7e:	4b35      	ldr	r3, [pc, #212]	; (2df54 <SystemInit+0x1a8>)
   2de80:	680a      	ldr	r2, [r1, #0]
   2de82:	681b      	ldr	r3, [r3, #0]
   2de84:	f022 020f 	bic.w	r2, r2, #15
   2de88:	f003 030f 	and.w	r3, r3, #15
   2de8c:	4313      	orrs	r3, r2
   2de8e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   2de90:	f7ff ff70 	bl	2dd74 <nrf52_errata_103>
   2de94:	b118      	cbz	r0, 2de9e <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   2de96:	4b30      	ldr	r3, [pc, #192]	; (2df58 <SystemInit+0x1ac>)
   2de98:	f44f 7200 	mov.w	r2, #512	; 0x200
   2de9c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   2de9e:	f7ff ff5f 	bl	2dd60 <nrf52_errata_136>
   2dea2:	b148      	cbz	r0, 2deb8 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2dea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2dea8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2deac:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   2deae:	bf44      	itt	mi
   2deb0:	f06f 0201 	mvnmi.w	r2, #1
   2deb4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2deb8:	4b28      	ldr	r3, [pc, #160]	; (2df5c <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2deba:	681b      	ldr	r3, [r3, #0]
   2debc:	2b08      	cmp	r3, #8
   2debe:	d10e      	bne.n	2dede <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2dec0:	4b27      	ldr	r3, [pc, #156]	; (2df60 <SystemInit+0x1b4>)
   2dec2:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   2dec4:	2b05      	cmp	r3, #5
   2dec6:	d802      	bhi.n	2dece <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2dec8:	4a26      	ldr	r2, [pc, #152]	; (2df64 <SystemInit+0x1b8>)
   2deca:	5cd3      	ldrb	r3, [r2, r3]
   2decc:	b13b      	cbz	r3, 2dede <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2dece:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2ded2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2ded6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2deda:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2dede:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2dee2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2dee6:	2a00      	cmp	r2, #0
   2dee8:	db03      	blt.n	2def2 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2deea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2deee:	2b00      	cmp	r3, #0
   2def0:	da22      	bge.n	2df38 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2def2:	491d      	ldr	r1, [pc, #116]	; (2df68 <SystemInit+0x1bc>)
   2def4:	2301      	movs	r3, #1
   2def6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2defa:	f7ff ff4f 	bl	2dd9c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2defe:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   2df02:	2412      	movs	r4, #18
   2df04:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2df08:	f7ff ff48 	bl	2dd9c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2df0c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   2df10:	f7ff ff44 	bl	2dd9c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2df14:	2300      	movs	r3, #0
   2df16:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2df1a:	f7ff ff3f 	bl	2dd9c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   2df1e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2df22:	4912      	ldr	r1, [pc, #72]	; (2df6c <SystemInit+0x1c0>)
   2df24:	4b12      	ldr	r3, [pc, #72]	; (2df70 <SystemInit+0x1c4>)
   2df26:	68ca      	ldr	r2, [r1, #12]
   2df28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2df2c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2df2e:	60cb      	str	r3, [r1, #12]
   2df30:	f3bf 8f4f 	dsb	sy
    __NOP();
   2df34:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2df36:	e7fd      	b.n	2df34 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   2df38:	4b0e      	ldr	r3, [pc, #56]	; (2df74 <SystemInit+0x1c8>)
   2df3a:	4a0f      	ldr	r2, [pc, #60]	; (2df78 <SystemInit+0x1cc>)
   2df3c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   2df3e:	bd10      	pop	{r4, pc}
   2df40:	4000c000 	.word	0x4000c000
   2df44:	4000568c 	.word	0x4000568c
   2df48:	00038148 	.word	0x00038148
   2df4c:	4000f000 	.word	0x4000f000
   2df50:	40000ee4 	.word	0x40000ee4
   2df54:	10000258 	.word	0x10000258
   2df58:	40029640 	.word	0x40029640
   2df5c:	10000130 	.word	0x10000130
   2df60:	10000134 	.word	0x10000134
   2df64:	000401a6 	.word	0x000401a6
   2df68:	4001e000 	.word	0x4001e000
   2df6c:	e000ed00 	.word	0xe000ed00
   2df70:	05fa0004 	.word	0x05fa0004
   2df74:	20000674 	.word	0x20000674
   2df78:	03d09000 	.word	0x03d09000

0002df7c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2df7c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2df7e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   2df80:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2df82:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   2df86:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   2df88:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   2df8c:	d014      	beq.n	2dfb8 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2df8e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2df92:	fa05 f204 	lsl.w	r2, r5, r4
   2df96:	ea23 0202 	bic.w	r2, r3, r2
   2df9a:	e850 6f00 	ldrex	r6, [r0]
   2df9e:	429e      	cmp	r6, r3
   2dfa0:	d104      	bne.n	2dfac <nrfx_flag32_alloc+0x30>
   2dfa2:	e840 2c00 	strex	ip, r2, [r0]
   2dfa6:	f1bc 0f00 	cmp.w	ip, #0
   2dfaa:	d1f6      	bne.n	2df9a <nrfx_flag32_alloc+0x1e>
   2dfac:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2dfb0:	d1e6      	bne.n	2df80 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   2dfb2:	4802      	ldr	r0, [pc, #8]	; (2dfbc <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   2dfb4:	700c      	strb	r4, [r1, #0]
}
   2dfb6:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   2dfb8:	4801      	ldr	r0, [pc, #4]	; (2dfc0 <nrfx_flag32_alloc+0x44>)
   2dfba:	e7fc      	b.n	2dfb6 <nrfx_flag32_alloc+0x3a>
   2dfbc:	0bad0000 	.word	0x0bad0000
   2dfc0:	0bad0002 	.word	0x0bad0002

0002dfc4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2dfc4:	6803      	ldr	r3, [r0, #0]
   2dfc6:	40cb      	lsrs	r3, r1
   2dfc8:	07db      	lsls	r3, r3, #31
{
   2dfca:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   2dfcc:	d415      	bmi.n	2dffa <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2dfce:	2301      	movs	r3, #1
   2dfd0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   2dfd4:	6803      	ldr	r3, [r0, #0]
   2dfd6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   2dfda:	ea41 0203 	orr.w	r2, r1, r3
   2dfde:	e850 4f00 	ldrex	r4, [r0]
   2dfe2:	429c      	cmp	r4, r3
   2dfe4:	d104      	bne.n	2dff0 <nrfx_flag32_free+0x2c>
   2dfe6:	e840 2c00 	strex	ip, r2, [r0]
   2dfea:	f1bc 0f00 	cmp.w	ip, #0
   2dfee:	d1f6      	bne.n	2dfde <nrfx_flag32_free+0x1a>
   2dff0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2dff4:	d1ee      	bne.n	2dfd4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   2dff6:	4802      	ldr	r0, [pc, #8]	; (2e000 <nrfx_flag32_free+0x3c>)
}
   2dff8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2dffa:	4802      	ldr	r0, [pc, #8]	; (2e004 <nrfx_flag32_free+0x40>)
   2dffc:	e7fc      	b.n	2dff8 <nrfx_flag32_free+0x34>
   2dffe:	bf00      	nop
   2e000:	0bad0000 	.word	0x0bad0000
   2e004:	0bad0004 	.word	0x0bad0004

0002e008 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2e008:	4b05      	ldr	r3, [pc, #20]	; (2e020 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2e00a:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2e00c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   2e010:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
   2e014:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   2e018:	4258      	negs	r0, r3
   2e01a:	4158      	adcs	r0, r3
   2e01c:	4770      	bx	lr
   2e01e:	bf00      	nop
   2e020:	20000678 	.word	0x20000678

0002e024 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2e024:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2e026:	f100 0308 	add.w	r3, r0, #8
   2e02a:	4c0c      	ldr	r4, [pc, #48]	; (2e05c <call_handler+0x38>)
   2e02c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   2e030:	05da      	lsls	r2, r3, #23
{
   2e032:	4605      	mov	r5, r0
   2e034:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2e036:	d507      	bpl.n	2e048 <call_handler+0x24>
   2e038:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   2e03c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   2e040:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   2e044:	6852      	ldr	r2, [r2, #4]
   2e046:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   2e048:	68a3      	ldr	r3, [r4, #8]
   2e04a:	b12b      	cbz	r3, 2e058 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2e04c:	68e2      	ldr	r2, [r4, #12]
   2e04e:	4631      	mov	r1, r6
   2e050:	4628      	mov	r0, r5
    }
}
   2e052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2e056:	4718      	bx	r3
}
   2e058:	bd70      	pop	{r4, r5, r6, pc}
   2e05a:	bf00      	nop
   2e05c:	20000678 	.word	0x20000678

0002e060 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2e060:	4b19      	ldr	r3, [pc, #100]	; (2e0c8 <release_handler+0x68>)
   2e062:	3008      	adds	r0, #8
{
   2e064:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2e066:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   2e06a:	05d1      	lsls	r1, r2, #23
   2e06c:	d51d      	bpl.n	2e0aa <release_handler+0x4a>
   2e06e:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2e072:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   2e076:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2e07a:	f103 0410 	add.w	r4, r3, #16
   2e07e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2e080:	f834 2b02 	ldrh.w	r2, [r4], #2
   2e084:	f412 7f80 	tst.w	r2, #256	; 0x100
   2e088:	d003      	beq.n	2e092 <release_handler+0x32>
   2e08a:	f3c2 2243 	ubfx	r2, r2, #9, #4
   2e08e:	4291      	cmp	r1, r2
   2e090:	d00b      	beq.n	2e0aa <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2e092:	3001      	adds	r0, #1
   2e094:	2830      	cmp	r0, #48	; 0x30
   2e096:	d1f3      	bne.n	2e080 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   2e098:	2200      	movs	r2, #0
   2e09a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2e09e:	480b      	ldr	r0, [pc, #44]	; (2e0cc <release_handler+0x6c>)
   2e0a0:	f7ff ff90 	bl	2dfc4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2e0a4:	4b0a      	ldr	r3, [pc, #40]	; (2e0d0 <release_handler+0x70>)
   2e0a6:	4298      	cmp	r0, r3
   2e0a8:	d100      	bne.n	2e0ac <release_handler+0x4c>
}
   2e0aa:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2e0ac:	4909      	ldr	r1, [pc, #36]	; (2e0d4 <release_handler+0x74>)
   2e0ae:	480a      	ldr	r0, [pc, #40]	; (2e0d8 <release_handler+0x78>)
   2e0b0:	4a0a      	ldr	r2, [pc, #40]	; (2e0dc <release_handler+0x7c>)
   2e0b2:	f44f 7399 	mov.w	r3, #306	; 0x132
   2e0b6:	f009 f830 	bl	3711a <printk>
}
   2e0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2e0be:	4807      	ldr	r0, [pc, #28]	; (2e0dc <release_handler+0x7c>)
   2e0c0:	f44f 7199 	mov.w	r1, #306	; 0x132
   2e0c4:	f009 b9cf 	b.w	37466 <assert_post_action>
   2e0c8:	20000678 	.word	0x20000678
   2e0cc:	200006ec 	.word	0x200006ec
   2e0d0:	0bad0000 	.word	0x0bad0000
   2e0d4:	00040216 	.word	0x00040216
   2e0d8:	0003c48a 	.word	0x0003c48a
   2e0dc:	000401b2 	.word	0x000401b2

0002e0e0 <pin_handler_trigger_uninit>:
{
   2e0e0:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2e0e2:	4c0a      	ldr	r4, [pc, #40]	; (2e10c <pin_handler_trigger_uninit+0x2c>)
   2e0e4:	f100 0508 	add.w	r5, r0, #8
   2e0e8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   2e0ec:	069a      	lsls	r2, r3, #26
   2e0ee:	d506      	bpl.n	2e0fe <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2e0f0:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2e0f2:	4a07      	ldr	r2, [pc, #28]	; (2e110 <pin_handler_trigger_uninit+0x30>)
   2e0f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   2e0f8:	2100      	movs	r1, #0
   2e0fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   2e0fe:	f7ff ffaf 	bl	2e060 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   2e102:	2300      	movs	r3, #0
   2e104:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   2e108:	bd38      	pop	{r3, r4, r5, pc}
   2e10a:	bf00      	nop
   2e10c:	20000678 	.word	0x20000678
   2e110:	40006000 	.word	0x40006000

0002e114 <nrf_gpio_pin_port_decode>:
{
   2e114:	b510      	push	{r4, lr}
   2e116:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e118:	6800      	ldr	r0, [r0, #0]
   2e11a:	f00b ff45 	bl	39fa8 <nrf_gpio_pin_present_check>
   2e11e:	b958      	cbnz	r0, 2e138 <nrf_gpio_pin_port_decode+0x24>
   2e120:	4912      	ldr	r1, [pc, #72]	; (2e16c <nrf_gpio_pin_port_decode+0x58>)
   2e122:	4813      	ldr	r0, [pc, #76]	; (2e170 <nrf_gpio_pin_port_decode+0x5c>)
   2e124:	4a13      	ldr	r2, [pc, #76]	; (2e174 <nrf_gpio_pin_port_decode+0x60>)
   2e126:	f240 2329 	movw	r3, #553	; 0x229
   2e12a:	f008 fff6 	bl	3711a <printk>
   2e12e:	4811      	ldr	r0, [pc, #68]	; (2e174 <nrf_gpio_pin_port_decode+0x60>)
   2e130:	f240 2129 	movw	r1, #553	; 0x229
   2e134:	f009 f997 	bl	37466 <assert_post_action>
    uint32_t pin_number = *p_pin;
   2e138:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2e13a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2e13e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2e140:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2e142:	d00d      	beq.n	2e160 <nrf_gpio_pin_port_decode+0x4c>
   2e144:	2b01      	cmp	r3, #1
   2e146:	d00e      	beq.n	2e166 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
   2e148:	490b      	ldr	r1, [pc, #44]	; (2e178 <nrf_gpio_pin_port_decode+0x64>)
   2e14a:	4809      	ldr	r0, [pc, #36]	; (2e170 <nrf_gpio_pin_port_decode+0x5c>)
   2e14c:	4a09      	ldr	r2, [pc, #36]	; (2e174 <nrf_gpio_pin_port_decode+0x60>)
   2e14e:	f240 232e 	movw	r3, #558	; 0x22e
   2e152:	f008 ffe2 	bl	3711a <printk>
   2e156:	4807      	ldr	r0, [pc, #28]	; (2e174 <nrf_gpio_pin_port_decode+0x60>)
   2e158:	f240 212e 	movw	r1, #558	; 0x22e
   2e15c:	f009 f983 	bl	37466 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2e160:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   2e164:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   2e166:	4805      	ldr	r0, [pc, #20]	; (2e17c <nrf_gpio_pin_port_decode+0x68>)
   2e168:	e7fc      	b.n	2e164 <nrf_gpio_pin_port_decode+0x50>
   2e16a:	bf00      	nop
   2e16c:	0003f462 	.word	0x0003f462
   2e170:	0003c48a 	.word	0x0003c48a
   2e174:	0003f42f 	.word	0x0003f42f
   2e178:	00041a5a 	.word	0x00041a5a
   2e17c:	50000300 	.word	0x50000300

0002e180 <nrfx_gpiote_input_configure>:
{
   2e180:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e182:	4604      	mov	r4, r0
   2e184:	b085      	sub	sp, #20
   2e186:	4617      	mov	r7, r2
   2e188:	461d      	mov	r5, r3
    if (p_input_config)
   2e18a:	b1f1      	cbz	r1, 2e1ca <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   2e18c:	f7ff ff3c 	bl	2e008 <pin_is_task_output>
   2e190:	b110      	cbz	r0, 2e198 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   2e192:	484a      	ldr	r0, [pc, #296]	; (2e2bc <nrfx_gpiote_input_configure+0x13c>)
}
   2e194:	b005      	add	sp, #20
   2e196:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2e198:	460b      	mov	r3, r1
   2e19a:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2e19e:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2e1a2:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2e1a6:	f10d 020f 	add.w	r2, sp, #15
   2e1aa:	f10d 010e 	add.w	r1, sp, #14
   2e1ae:	4620      	mov	r0, r4
   2e1b0:	f00b ff0f 	bl	39fd2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2e1b4:	4a42      	ldr	r2, [pc, #264]	; (2e2c0 <nrfx_gpiote_input_configure+0x140>)
   2e1b6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2e1ba:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2e1be:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2e1c2:	f043 0301 	orr.w	r3, r3, #1
   2e1c6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   2e1ca:	b197      	cbz	r7, 2e1f2 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2e1cc:	4b3c      	ldr	r3, [pc, #240]	; (2e2c0 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2e1ce:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2e1d0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2e1d2:	f104 0008 	add.w	r0, r4, #8
   2e1d6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   2e1da:	078f      	lsls	r7, r1, #30
   2e1dc:	d50c      	bpl.n	2e1f8 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
   2e1de:	2a00      	cmp	r2, #0
   2e1e0:	d1d7      	bne.n	2e192 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2e1e2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   2e1e6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2e1ea:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   2e1ee:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   2e1f2:	bbcd      	cbnz	r5, 2e268 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
   2e1f4:	4833      	ldr	r0, [pc, #204]	; (2e2c4 <nrfx_gpiote_input_configure+0x144>)
   2e1f6:	e7cd      	b.n	2e194 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2e1f8:	f021 0120 	bic.w	r1, r1, #32
   2e1fc:	04c9      	lsls	r1, r1, #19
   2e1fe:	0cc9      	lsrs	r1, r1, #19
   2e200:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   2e204:	2a00      	cmp	r2, #0
   2e206:	d0ec      	beq.n	2e1e2 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
   2e208:	2e03      	cmp	r6, #3
   2e20a:	d8c2      	bhi.n	2e192 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   2e20c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2e20e:	b92e      	cbnz	r6, 2e21c <nrfx_gpiote_input_configure+0x9c>
   2e210:	4a2d      	ldr	r2, [pc, #180]	; (2e2c8 <nrfx_gpiote_input_configure+0x148>)
   2e212:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   2e216:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   2e21a:	e7e2      	b.n	2e1e2 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2e21c:	00ba      	lsls	r2, r7, #2
   2e21e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2e222:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2e226:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   2e22a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2e22e:	f02c 0c03 	bic.w	ip, ip, #3
   2e232:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2e236:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2e23a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   2e23e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   2e242:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2e246:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   2e24a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   2e24e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   2e252:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   2e256:	ea4c 0c0e 	orr.w	ip, ip, lr
   2e25a:	f041 0120 	orr.w	r1, r1, #32
   2e25e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   2e262:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   2e266:	e7bc      	b.n	2e1e2 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   2e268:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   2e26c:	4620      	mov	r0, r4
   2e26e:	f7ff fef7 	bl	2e060 <release_handler>
    if (!handler)
   2e272:	2e00      	cmp	r6, #0
   2e274:	d0be      	beq.n	2e1f4 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2e276:	4d12      	ldr	r5, [pc, #72]	; (2e2c0 <nrfx_gpiote_input_configure+0x140>)
   2e278:	682b      	ldr	r3, [r5, #0]
   2e27a:	429e      	cmp	r6, r3
   2e27c:	d104      	bne.n	2e288 <nrfx_gpiote_input_configure+0x108>
   2e27e:	686b      	ldr	r3, [r5, #4]
   2e280:	429f      	cmp	r7, r3
   2e282:	d101      	bne.n	2e288 <nrfx_gpiote_input_configure+0x108>
   2e284:	2200      	movs	r2, #0
   2e286:	e00a      	b.n	2e29e <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   2e288:	4810      	ldr	r0, [pc, #64]	; (2e2cc <nrfx_gpiote_input_configure+0x14c>)
   2e28a:	f10d 010f 	add.w	r1, sp, #15
   2e28e:	f7ff fe75 	bl	2df7c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2e292:	4b0c      	ldr	r3, [pc, #48]	; (2e2c4 <nrfx_gpiote_input_configure+0x144>)
   2e294:	4298      	cmp	r0, r3
   2e296:	f47f af7d 	bne.w	2e194 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   2e29a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   2e29e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2e2a2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2e2a6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   2e2a8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2e2aa:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   2e2ae:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   2e2b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2e2b6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   2e2ba:	e79b      	b.n	2e1f4 <nrfx_gpiote_input_configure+0x74>
   2e2bc:	0bad0004 	.word	0x0bad0004
   2e2c0:	20000678 	.word	0x20000678
   2e2c4:	0bad0000 	.word	0x0bad0000
   2e2c8:	40006000 	.word	0x40006000
   2e2cc:	200006ec 	.word	0x200006ec

0002e2d0 <nrfx_gpiote_output_configure>:
{
   2e2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e2d2:	4604      	mov	r4, r0
   2e2d4:	b085      	sub	sp, #20
   2e2d6:	4615      	mov	r5, r2
    if (p_config)
   2e2d8:	b309      	cbz	r1, 2e31e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2e2da:	f100 0708 	add.w	r7, r0, #8
   2e2de:	4e31      	ldr	r6, [pc, #196]	; (2e3a4 <nrfx_gpiote_output_configure+0xd4>)
   2e2e0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   2e2e4:	0798      	lsls	r0, r3, #30
   2e2e6:	d401      	bmi.n	2e2ec <nrfx_gpiote_output_configure+0x1c>
   2e2e8:	069a      	lsls	r2, r3, #26
   2e2ea:	d458      	bmi.n	2e39e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2e2ec:	f013 0f1c 	tst.w	r3, #28
   2e2f0:	d002      	beq.n	2e2f8 <nrfx_gpiote_output_configure+0x28>
   2e2f2:	784b      	ldrb	r3, [r1, #1]
   2e2f4:	2b01      	cmp	r3, #1
   2e2f6:	d052      	beq.n	2e39e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2e2f8:	2301      	movs	r3, #1
   2e2fa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   2e2fe:	2300      	movs	r3, #0
   2e300:	e9cd 1300 	strd	r1, r3, [sp]
   2e304:	1c4a      	adds	r2, r1, #1
   2e306:	1c8b      	adds	r3, r1, #2
   2e308:	4620      	mov	r0, r4
   2e30a:	f10d 010f 	add.w	r1, sp, #15
   2e30e:	f00b fe60 	bl	39fd2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2e312:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   2e316:	f043 0303 	orr.w	r3, r3, #3
   2e31a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   2e31e:	b915      	cbnz	r5, 2e326 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   2e320:	4821      	ldr	r0, [pc, #132]	; (2e3a8 <nrfx_gpiote_output_configure+0xd8>)
}
   2e322:	b005      	add	sp, #20
   2e324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2e326:	4e1f      	ldr	r6, [pc, #124]	; (2e3a4 <nrfx_gpiote_output_configure+0xd4>)
   2e328:	f104 0708 	add.w	r7, r4, #8
   2e32c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   2e330:	0783      	lsls	r3, r0, #30
   2e332:	d534      	bpl.n	2e39e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
   2e334:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   2e338:	4661      	mov	r1, ip
   2e33a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2e33c:	f020 0020 	bic.w	r0, r0, #32
   2e340:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   2e344:	04c0      	lsls	r0, r0, #19
   2e346:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2e34a:	0cc0      	lsrs	r0, r0, #19
   2e34c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2e350:	2300      	movs	r3, #0
   2e352:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   2e356:	786a      	ldrb	r2, [r5, #1]
   2e358:	2a00      	cmp	r2, #0
   2e35a:	d0e1      	beq.n	2e320 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2e35c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   2e360:	78ad      	ldrb	r5, [r5, #2]
   2e362:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   2e366:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2e36a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2e36e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   2e372:	0223      	lsls	r3, r4, #8
   2e374:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2e378:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2e37a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2e37e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2e382:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2e384:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2e386:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2e38a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2e38e:	432b      	orrs	r3, r5
   2e390:	f040 0020 	orr.w	r0, r0, #32
   2e394:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2e398:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2e39c:	e7c0      	b.n	2e320 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   2e39e:	4803      	ldr	r0, [pc, #12]	; (2e3ac <nrfx_gpiote_output_configure+0xdc>)
   2e3a0:	e7bf      	b.n	2e322 <nrfx_gpiote_output_configure+0x52>
   2e3a2:	bf00      	nop
   2e3a4:	20000678 	.word	0x20000678
   2e3a8:	0bad0000 	.word	0x0bad0000
   2e3ac:	0bad0004 	.word	0x0bad0004

0002e3b0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2e3b0:	4b01      	ldr	r3, [pc, #4]	; (2e3b8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   2e3b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   2e3b6:	4770      	bx	lr
   2e3b8:	20000678 	.word	0x20000678

0002e3bc <nrfx_gpiote_channel_get>:
{
   2e3bc:	b538      	push	{r3, r4, r5, lr}
   2e3be:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   2e3c0:	460d      	mov	r5, r1
   2e3c2:	b959      	cbnz	r1, 2e3dc <nrfx_gpiote_channel_get+0x20>
   2e3c4:	490b      	ldr	r1, [pc, #44]	; (2e3f4 <nrfx_gpiote_channel_get+0x38>)
   2e3c6:	480c      	ldr	r0, [pc, #48]	; (2e3f8 <nrfx_gpiote_channel_get+0x3c>)
   2e3c8:	4a0c      	ldr	r2, [pc, #48]	; (2e3fc <nrfx_gpiote_channel_get+0x40>)
   2e3ca:	f240 2335 	movw	r3, #565	; 0x235
   2e3ce:	f008 fea4 	bl	3711a <printk>
   2e3d2:	480a      	ldr	r0, [pc, #40]	; (2e3fc <nrfx_gpiote_channel_get+0x40>)
   2e3d4:	f240 2135 	movw	r1, #565	; 0x235
   2e3d8:	f009 f845 	bl	37466 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2e3dc:	3408      	adds	r4, #8
   2e3de:	4b08      	ldr	r3, [pc, #32]	; (2e400 <nrfx_gpiote_channel_get+0x44>)
   2e3e0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
   2e3e4:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2e3e6:	bf43      	ittte	mi
   2e3e8:	0b5b      	lsrmi	r3, r3, #13
   2e3ea:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
   2e3ec:	4805      	ldrmi	r0, [pc, #20]	; (2e404 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
   2e3ee:	4806      	ldrpl	r0, [pc, #24]	; (2e408 <nrfx_gpiote_channel_get+0x4c>)
}
   2e3f0:	bd38      	pop	{r3, r4, r5, pc}
   2e3f2:	bf00      	nop
   2e3f4:	0004022a 	.word	0x0004022a
   2e3f8:	0003c48a 	.word	0x0003c48a
   2e3fc:	000401b2 	.word	0x000401b2
   2e400:	20000678 	.word	0x20000678
   2e404:	0bad0000 	.word	0x0bad0000
   2e408:	0bad0004 	.word	0x0bad0004

0002e40c <nrfx_gpiote_init>:
{
   2e40c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2e40e:	4c0e      	ldr	r4, [pc, #56]	; (2e448 <nrfx_gpiote_init+0x3c>)
   2e410:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   2e414:	b9b5      	cbnz	r5, 2e444 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2e416:	2260      	movs	r2, #96	; 0x60
   2e418:	4629      	mov	r1, r5
   2e41a:	f104 0010 	add.w	r0, r4, #16
   2e41e:	f00c f8ab 	bl	3a578 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   2e422:	2006      	movs	r0, #6
   2e424:	f7f3 fee8 	bl	221f8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2e428:	4b08      	ldr	r3, [pc, #32]	; (2e44c <nrfx_gpiote_init+0x40>)
    return err_code;
   2e42a:	4809      	ldr	r0, [pc, #36]	; (2e450 <nrfx_gpiote_init+0x44>)
   2e42c:	601d      	str	r5, [r3, #0]
   2e42e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2e430:	4b08      	ldr	r3, [pc, #32]	; (2e454 <nrfx_gpiote_init+0x48>)
   2e432:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2e436:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2e43a:	2301      	movs	r3, #1
   2e43c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2e440:	6763      	str	r3, [r4, #116]	; 0x74
}
   2e442:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   2e444:	4804      	ldr	r0, [pc, #16]	; (2e458 <nrfx_gpiote_init+0x4c>)
   2e446:	e7fc      	b.n	2e442 <nrfx_gpiote_init+0x36>
   2e448:	20000678 	.word	0x20000678
   2e44c:	4000617c 	.word	0x4000617c
   2e450:	0bad0000 	.word	0x0bad0000
   2e454:	40006000 	.word	0x40006000
   2e458:	0bad0005 	.word	0x0bad0005

0002e45c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   2e45c:	4b03      	ldr	r3, [pc, #12]	; (2e46c <nrfx_gpiote_is_init+0x10>)
   2e45e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2e462:	3800      	subs	r0, #0
   2e464:	bf18      	it	ne
   2e466:	2001      	movne	r0, #1
   2e468:	4770      	bx	lr
   2e46a:	bf00      	nop
   2e46c:	20000678 	.word	0x20000678

0002e470 <nrfx_gpiote_channel_free>:
{
   2e470:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2e472:	4801      	ldr	r0, [pc, #4]	; (2e478 <nrfx_gpiote_channel_free+0x8>)
   2e474:	f7ff bda6 	b.w	2dfc4 <nrfx_flag32_free>
   2e478:	200006e8 	.word	0x200006e8

0002e47c <nrfx_gpiote_channel_alloc>:
{
   2e47c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2e47e:	4801      	ldr	r0, [pc, #4]	; (2e484 <nrfx_gpiote_channel_alloc+0x8>)
   2e480:	f7ff bd7c 	b.w	2df7c <nrfx_flag32_alloc>
   2e484:	200006e8 	.word	0x200006e8

0002e488 <nrfx_gpiote_trigger_enable>:
{
   2e488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   2e48a:	4d31      	ldr	r5, [pc, #196]	; (2e550 <nrfx_gpiote_trigger_enable+0xc8>)
   2e48c:	f100 0708 	add.w	r7, r0, #8
{
   2e490:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   2e492:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
   2e496:	f013 0f1c 	tst.w	r3, #28
{
   2e49a:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   2e49c:	d10b      	bne.n	2e4b6 <nrfx_gpiote_trigger_enable+0x2e>
   2e49e:	492d      	ldr	r1, [pc, #180]	; (2e554 <nrfx_gpiote_trigger_enable+0xcc>)
   2e4a0:	482d      	ldr	r0, [pc, #180]	; (2e558 <nrfx_gpiote_trigger_enable+0xd0>)
   2e4a2:	4a2e      	ldr	r2, [pc, #184]	; (2e55c <nrfx_gpiote_trigger_enable+0xd4>)
   2e4a4:	f240 33df 	movw	r3, #991	; 0x3df
   2e4a8:	f008 fe37 	bl	3711a <printk>
   2e4ac:	482b      	ldr	r0, [pc, #172]	; (2e55c <nrfx_gpiote_trigger_enable+0xd4>)
   2e4ae:	f240 31df 	movw	r1, #991	; 0x3df
   2e4b2:	f008 ffd8 	bl	37466 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2e4b6:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2e4ba:	0683      	lsls	r3, r0, #26
   2e4bc:	d51f      	bpl.n	2e4fe <nrfx_gpiote_trigger_enable+0x76>
   2e4be:	f010 0302 	ands.w	r3, r0, #2
   2e4c2:	d11c      	bne.n	2e4fe <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2e4c4:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   2e4c6:	4608      	mov	r0, r1
   2e4c8:	f00b fd7f 	bl	39fca <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   2e4cc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2e4d0:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2e4d4:	6003      	str	r3, [r0, #0]
   2e4d6:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2e4d8:	008b      	lsls	r3, r1, #2
   2e4da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2e4de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2e4e2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2e4e6:	f042 0201 	orr.w	r2, r2, #1
   2e4ea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   2e4ee:	b126      	cbz	r6, 2e4fa <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
   2e4f0:	4a1b      	ldr	r2, [pc, #108]	; (2e560 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   2e4f2:	2301      	movs	r3, #1
   2e4f4:	408b      	lsls	r3, r1
   2e4f6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2e4fa:	b003      	add	sp, #12
   2e4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   2e4fe:	b95e      	cbnz	r6, 2e518 <nrfx_gpiote_trigger_enable+0x90>
   2e500:	4918      	ldr	r1, [pc, #96]	; (2e564 <nrfx_gpiote_trigger_enable+0xdc>)
   2e502:	4815      	ldr	r0, [pc, #84]	; (2e558 <nrfx_gpiote_trigger_enable+0xd0>)
   2e504:	4a15      	ldr	r2, [pc, #84]	; (2e55c <nrfx_gpiote_trigger_enable+0xd4>)
   2e506:	f240 33ee 	movw	r3, #1006	; 0x3ee
   2e50a:	f008 fe06 	bl	3711a <printk>
   2e50e:	4813      	ldr	r0, [pc, #76]	; (2e55c <nrfx_gpiote_trigger_enable+0xd4>)
   2e510:	f240 31ee 	movw	r1, #1006	; 0x3ee
   2e514:	f008 ffa7 	bl	37466 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2e518:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
   2e51c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2e520:	2b04      	cmp	r3, #4
   2e522:	d010      	beq.n	2e546 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2e524:	2b05      	cmp	r3, #5
   2e526:	d010      	beq.n	2e54a <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e528:	a801      	add	r0, sp, #4
   2e52a:	9401      	str	r4, [sp, #4]
   2e52c:	f7ff fdf2 	bl	2e114 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2e530:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   2e532:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2e536:	40d9      	lsrs	r1, r3
   2e538:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2e53c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2e53e:	4620      	mov	r0, r4
   2e540:	f00b fd92 	bl	3a068 <nrf_gpio_cfg_sense_set>
}
   2e544:	e7d9      	b.n	2e4fa <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2e546:	2103      	movs	r1, #3
   2e548:	e7f9      	b.n	2e53e <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2e54a:	2102      	movs	r1, #2
   2e54c:	e7f7      	b.n	2e53e <nrfx_gpiote_trigger_enable+0xb6>
   2e54e:	bf00      	nop
   2e550:	20000678 	.word	0x20000678
   2e554:	00040234 	.word	0x00040234
   2e558:	0003c48a 	.word	0x0003c48a
   2e55c:	000401b2 	.word	0x000401b2
   2e560:	40006000 	.word	0x40006000
   2e564:	00040249 	.word	0x00040249

0002e568 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2e568:	4b0e      	ldr	r3, [pc, #56]	; (2e5a4 <nrfx_gpiote_trigger_disable+0x3c>)
   2e56a:	f100 0208 	add.w	r2, r0, #8
   2e56e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2e572:	0699      	lsls	r1, r3, #26
   2e574:	d513      	bpl.n	2e59e <nrfx_gpiote_trigger_disable+0x36>
   2e576:	079a      	lsls	r2, r3, #30
   2e578:	d411      	bmi.n	2e59e <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2e57a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2e57c:	2201      	movs	r2, #1
   2e57e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   2e580:	009b      	lsls	r3, r3, #2
   2e582:	4909      	ldr	r1, [pc, #36]	; (2e5a8 <nrfx_gpiote_trigger_disable+0x40>)
   2e584:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2e588:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2e58c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2e590:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2e594:	f022 0203 	bic.w	r2, r2, #3
   2e598:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2e59c:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2e59e:	2100      	movs	r1, #0
   2e5a0:	f00b bd62 	b.w	3a068 <nrf_gpio_cfg_sense_set>
   2e5a4:	20000678 	.word	0x20000678
   2e5a8:	40006000 	.word	0x40006000

0002e5ac <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2e5ac:	4b0e      	ldr	r3, [pc, #56]	; (2e5e8 <nrfx_gpiote_pin_uninit+0x3c>)
   2e5ae:	f100 0208 	add.w	r2, r0, #8
{
   2e5b2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2e5b4:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   2e5b8:	07db      	lsls	r3, r3, #31
{
   2e5ba:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   2e5bc:	d511      	bpl.n	2e5e2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   2e5be:	f7ff ffd3 	bl	2e568 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2e5c2:	4620      	mov	r0, r4
   2e5c4:	f7ff fd8c 	bl	2e0e0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e5c8:	a801      	add	r0, sp, #4
   2e5ca:	9401      	str	r4, [sp, #4]
   2e5cc:	f7ff fda2 	bl	2e114 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2e5d0:	9b01      	ldr	r3, [sp, #4]
   2e5d2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2e5d6:	2202      	movs	r2, #2
   2e5d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   2e5dc:	4803      	ldr	r0, [pc, #12]	; (2e5ec <nrfx_gpiote_pin_uninit+0x40>)
}
   2e5de:	b002      	add	sp, #8
   2e5e0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2e5e2:	4803      	ldr	r0, [pc, #12]	; (2e5f0 <nrfx_gpiote_pin_uninit+0x44>)
   2e5e4:	e7fb      	b.n	2e5de <nrfx_gpiote_pin_uninit+0x32>
   2e5e6:	bf00      	nop
   2e5e8:	20000678 	.word	0x20000678
   2e5ec:	0bad0000 	.word	0x0bad0000
   2e5f0:	0bad0004 	.word	0x0bad0004

0002e5f4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   2e5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e5f8:	4b65      	ldr	r3, [pc, #404]	; (2e790 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   2e5fa:	4866      	ldr	r0, [pc, #408]	; (2e794 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2e5fc:	4966      	ldr	r1, [pc, #408]	; (2e798 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
   2e5fe:	2500      	movs	r5, #0
{
   2e600:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   2e602:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2e604:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e606:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   2e608:	b136      	cbz	r6, 2e618 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   2e60a:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   2e60e:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2e610:	bf1e      	ittt	ne
   2e612:	601c      	strne	r4, [r3, #0]
   2e614:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   2e616:	4315      	orrne	r5, r2
        }
        mask <<= 1;
   2e618:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2e61a:	428b      	cmp	r3, r1
        mask <<= 1;
   2e61c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2e620:	d1f1      	bne.n	2e606 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e622:	4f5e      	ldr	r7, [pc, #376]	; (2e79c <nrfx_gpiote_irq_handler+0x1a8>)
   2e624:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2e626:	b37b      	cbz	r3, 2e688 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
   2e628:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2e62c:	4e5c      	ldr	r6, [pc, #368]	; (2e7a0 <nrfx_gpiote_irq_handler+0x1ac>)
   2e62e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   2e632:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
   2e634:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2e638:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   2e63c:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
   2e63e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2e642:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2e644:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2e648:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2e64c:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
   2e650:	f8d9 3000 	ldr.w	r3, [r9]
   2e654:	b9f3      	cbnz	r3, 2e694 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2e656:	f108 0820 	add.w	r8, r8, #32
   2e65a:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
   2e65e:	f109 0904 	add.w	r9, r9, #4
   2e662:	d1f5      	bne.n	2e650 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2e664:	603b      	str	r3, [r7, #0]
   2e666:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
   2e668:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
   2e66a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2e66e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   2e672:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
   2e674:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2e678:	9b01      	ldr	r3, [sp, #4]
   2e67a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   2e67e:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
   2e680:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   2e684:	4313      	orrs	r3, r2
   2e686:	d1dd      	bne.n	2e644 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
   2e688:	2401      	movs	r4, #1
    while (mask)
   2e68a:	2d00      	cmp	r5, #0
   2e68c:	d168      	bne.n	2e760 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2e68e:	b009      	add	sp, #36	; 0x24
   2e690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   2e694:	fa93 f3a3 	rbit	r3, r3
   2e698:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
   2e69c:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2e6a0:	f106 0208 	add.w	r2, r6, #8
   2e6a4:	4b3f      	ldr	r3, [pc, #252]	; (2e7a4 <nrfx_gpiote_irq_handler+0x1b0>)
   2e6a6:	9605      	str	r6, [sp, #20]
   2e6a8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   2e6ac:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2e6b0:	08f4      	lsrs	r4, r6, #3
   2e6b2:	9302      	str	r3, [sp, #8]
   2e6b4:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
   2e6b6:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
   2e6b8:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2e6bc:	fa0b fc00 	lsl.w	ip, fp, r0
   2e6c0:	5d18      	ldrb	r0, [r3, r4]
   2e6c2:	ea20 000c 	bic.w	r0, r0, ip
   2e6c6:	5518      	strb	r0, [r3, r4]
   2e6c8:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e6ca:	a805      	add	r0, sp, #20
   2e6cc:	9103      	str	r1, [sp, #12]
   2e6ce:	f7ff fd21 	bl	2e114 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2e6d2:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
   2e6d4:	9903      	ldr	r1, [sp, #12]
   2e6d6:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   2e6da:	074b      	lsls	r3, r1, #29
   2e6dc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2e6e0:	f3c4 4401 	ubfx	r4, r4, #16, #2
   2e6e4:	d523      	bpl.n	2e72e <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
   2e6e6:	4651      	mov	r1, sl
   2e6e8:	4630      	mov	r0, r6
   2e6ea:	f7ff fc9b 	bl	2e024 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e6ee:	a805      	add	r0, sp, #20
   2e6f0:	9605      	str	r6, [sp, #20]
   2e6f2:	f7ff fd0f 	bl	2e114 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2e6f6:	9a05      	ldr	r2, [sp, #20]
   2e6f8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   2e6fc:	b2e4      	uxtb	r4, r4
   2e6fe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2e702:	f3c2 4201 	ubfx	r2, r2, #16, #2
   2e706:	4294      	cmp	r4, r2
   2e708:	d107      	bne.n	2e71a <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2e70a:	2100      	movs	r1, #0
   2e70c:	4630      	mov	r0, r6
   2e70e:	f00b fcab 	bl	3a068 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2e712:	4621      	mov	r1, r4
   2e714:	4630      	mov	r0, r6
   2e716:	f00b fca7 	bl	3a068 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e71a:	a805      	add	r0, sp, #20
   2e71c:	9605      	str	r6, [sp, #20]
   2e71e:	f7ff fcf9 	bl	2e114 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2e722:	9b05      	ldr	r3, [sp, #20]
   2e724:	fa0b f303 	lsl.w	r3, fp, r3
   2e728:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   2e72c:	e790      	b.n	2e650 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2e72e:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2e730:	bf0c      	ite	eq
   2e732:	2103      	moveq	r1, #3
   2e734:	2102      	movne	r1, #2
   2e736:	4630      	mov	r0, r6
   2e738:	f00b fc96 	bl	3a068 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2e73c:	9b02      	ldr	r3, [sp, #8]
   2e73e:	2b03      	cmp	r3, #3
   2e740:	d004      	beq.n	2e74c <nrfx_gpiote_irq_handler+0x158>
   2e742:	2c02      	cmp	r4, #2
   2e744:	d107      	bne.n	2e756 <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2e746:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2e74a:	d1e6      	bne.n	2e71a <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
   2e74c:	4651      	mov	r1, sl
   2e74e:	4630      	mov	r0, r6
   2e750:	f7ff fc68 	bl	2e024 <call_handler>
   2e754:	e7e1      	b.n	2e71a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2e756:	2c03      	cmp	r4, #3
   2e758:	d1df      	bne.n	2e71a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2e75a:	f1ba 0f02 	cmp.w	sl, #2
   2e75e:	e7f4      	b.n	2e74a <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
   2e760:	fa95 f3a5 	rbit	r3, r5
   2e764:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   2e768:	fa04 f203 	lsl.w	r2, r4, r3
   2e76c:	009b      	lsls	r3, r3, #2
   2e76e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2e772:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2e776:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2e77a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2e77e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2e782:	f3c0 2005 	ubfx	r0, r0, #8, #6
   2e786:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2e78a:	f7ff fc4b 	bl	2e024 <call_handler>
   2e78e:	e77c      	b.n	2e68a <nrfx_gpiote_irq_handler+0x96>
   2e790:	40006100 	.word	0x40006100
   2e794:	40006000 	.word	0x40006000
   2e798:	40006120 	.word	0x40006120
   2e79c:	4000617c 	.word	0x4000617c
   2e7a0:	50000300 	.word	0x50000300
   2e7a4:	20000678 	.word	0x20000678

0002e7a8 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   2e7a8:	b510      	push	{r4, lr}
    NRFX_ASSERT(is_valid_address(addr, false));
   2e7aa:	2100      	movs	r1, #0
{
   2e7ac:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));
   2e7ae:	f00b fc6a 	bl	3a086 <is_valid_address>
   2e7b2:	b958      	cbnz	r0, 2e7cc <nrfx_nvmc_page_erase+0x24>
   2e7b4:	4912      	ldr	r1, [pc, #72]	; (2e800 <nrfx_nvmc_page_erase+0x58>)
   2e7b6:	4813      	ldr	r0, [pc, #76]	; (2e804 <nrfx_nvmc_page_erase+0x5c>)
   2e7b8:	4a13      	ldr	r2, [pc, #76]	; (2e808 <nrfx_nvmc_page_erase+0x60>)
   2e7ba:	f44f 7383 	mov.w	r3, #262	; 0x106
   2e7be:	f008 fcac 	bl	3711a <printk>
   2e7c2:	4811      	ldr	r0, [pc, #68]	; (2e808 <nrfx_nvmc_page_erase+0x60>)
   2e7c4:	f44f 7183 	mov.w	r1, #262	; 0x106
   2e7c8:	f008 fe4d 	bl	37466 <assert_post_action>
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   2e7cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2e7d0:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   2e7d2:	fbb4 f3f2 	udiv	r3, r4, r2
   2e7d6:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   2e7da:	b973      	cbnz	r3, 2e7fa <nrfx_nvmc_page_erase+0x52>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   2e7dc:	4b0b      	ldr	r3, [pc, #44]	; (2e80c <nrfx_nvmc_page_erase+0x64>)
   2e7de:	2202      	movs	r2, #2
   2e7e0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   2e7e4:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2e7e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2e7ec:	07d2      	lsls	r2, r2, #31
   2e7ee:	d5fb      	bpl.n	2e7e8 <nrfx_nvmc_page_erase+0x40>
    p_reg->CONFIG = (uint32_t)mode;
   2e7f0:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   2e7f2:	4807      	ldr	r0, [pc, #28]	; (2e810 <nrfx_nvmc_page_erase+0x68>)
   2e7f4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2e7f8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   2e7fa:	4806      	ldr	r0, [pc, #24]	; (2e814 <nrfx_nvmc_page_erase+0x6c>)
   2e7fc:	e7fc      	b.n	2e7f8 <nrfx_nvmc_page_erase+0x50>
   2e7fe:	bf00      	nop
   2e800:	000402b0 	.word	0x000402b0
   2e804:	0003c48a 	.word	0x0003c48a
   2e808:	00040254 	.word	0x00040254
   2e80c:	4001e000 	.word	0x4001e000
   2e810:	0bad0000 	.word	0x0bad0000
   2e814:	0bad000a 	.word	0x0bad000a

0002e818 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   2e818:	b538      	push	{r3, r4, r5, lr}
   2e81a:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   2e81c:	2101      	movs	r1, #1
{
   2e81e:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   2e820:	f00b fc31 	bl	3a086 <is_valid_address>
   2e824:	b958      	cbnz	r0, 2e83e <nrfx_nvmc_word_write+0x26>
   2e826:	4914      	ldr	r1, [pc, #80]	; (2e878 <nrfx_nvmc_word_write+0x60>)
   2e828:	4814      	ldr	r0, [pc, #80]	; (2e87c <nrfx_nvmc_word_write+0x64>)
   2e82a:	4a15      	ldr	r2, [pc, #84]	; (2e880 <nrfx_nvmc_word_write+0x68>)
   2e82c:	f44f 73ca 	mov.w	r3, #404	; 0x194
   2e830:	f008 fc73 	bl	3711a <printk>
   2e834:	4812      	ldr	r0, [pc, #72]	; (2e880 <nrfx_nvmc_word_write+0x68>)
   2e836:	f44f 71ca 	mov.w	r1, #404	; 0x194
   2e83a:	f008 fe14 	bl	37466 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   2e83e:	07a1      	lsls	r1, r4, #30
   2e840:	d00b      	beq.n	2e85a <nrfx_nvmc_word_write+0x42>
   2e842:	4910      	ldr	r1, [pc, #64]	; (2e884 <nrfx_nvmc_word_write+0x6c>)
   2e844:	480d      	ldr	r0, [pc, #52]	; (2e87c <nrfx_nvmc_word_write+0x64>)
   2e846:	4a0e      	ldr	r2, [pc, #56]	; (2e880 <nrfx_nvmc_word_write+0x68>)
   2e848:	f240 1395 	movw	r3, #405	; 0x195
   2e84c:	f008 fc65 	bl	3711a <printk>
   2e850:	480b      	ldr	r0, [pc, #44]	; (2e880 <nrfx_nvmc_word_write+0x68>)
   2e852:	f240 1195 	movw	r1, #405	; 0x195
   2e856:	f008 fe06 	bl	37466 <assert_post_action>
   2e85a:	4b0b      	ldr	r3, [pc, #44]	; (2e888 <nrfx_nvmc_word_write+0x70>)
   2e85c:	2201      	movs	r2, #1
   2e85e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2e862:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2e866:	07d2      	lsls	r2, r2, #31
   2e868:	d5fb      	bpl.n	2e862 <nrfx_nvmc_word_write+0x4a>
    *(volatile uint32_t *)addr = value;
   2e86a:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   2e86c:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   2e870:	2200      	movs	r2, #0
   2e872:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   2e876:	bd38      	pop	{r3, r4, r5, pc}
   2e878:	000402ca 	.word	0x000402ca
   2e87c:	0003c48a 	.word	0x0003c48a
   2e880:	00040254 	.word	0x00040254
   2e884:	000402e4 	.word	0x000402e4
   2e888:	4001e000 	.word	0x4001e000

0002e88c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   2e88c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   2e88e:	4801      	ldr	r0, [pc, #4]	; (2e894 <nrfx_ppi_channel_alloc+0x8>)
   2e890:	f7ff bb74 	b.w	2df7c <nrfx_flag32_alloc>
   2e894:	200006f4 	.word	0x200006f4

0002e898 <nrfx_ppi_channel_assign>:
    return nrfx_flag32_free(&m_channels_allocated, channel);
}


nrfx_err_t nrfx_ppi_channel_assign(nrf_ppi_channel_t channel, uint32_t eep, uint32_t tep)
{
   2e898:	b570      	push	{r4, r5, r6, lr}
   2e89a:	4604      	mov	r4, r0
   2e89c:	4615      	mov	r5, r2
    if ((uint32_t *)eep == NULL || (uint32_t *)tep == NULL)
   2e89e:	460e      	mov	r6, r1
   2e8a0:	b1b1      	cbz	r1, 2e8d0 <nrfx_ppi_channel_assign+0x38>
   2e8a2:	b1aa      	cbz	r2, 2e8d0 <nrfx_ppi_channel_assign+0x38>
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   2e8a4:	2301      	movs	r3, #1
   2e8a6:	4083      	lsls	r3, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
   2e8a8:	f3c3 0310 	ubfx	r3, r3, #0, #17
        return NRFX_ERROR_NULL;
    }

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_programmable_app_channel(channel))
   2e8ac:	b193      	cbz	r3, 2e8d4 <nrfx_ppi_channel_assign+0x3c>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (!nrfx_flag32_is_allocated(m_channels_allocated, channel))
   2e8ae:	4b0b      	ldr	r3, [pc, #44]	; (2e8dc <nrfx_ppi_channel_assign+0x44>)
   2e8b0:	4601      	mov	r1, r0
   2e8b2:	6818      	ldr	r0, [r3, #0]
   2e8b4:	f00b fb73 	bl	39f9e <nrfx_flag32_is_allocated>
   2e8b8:	b170      	cbz	r0, 2e8d8 <nrfx_ppi_channel_assign+0x40>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2e8ba:	00e0      	lsls	r0, r4, #3
   2e8bc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2e8c0:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
   2e8c4:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2e8c8:	f8c0 5514 	str.w	r5, [r0, #1300]	; 0x514
    nrfx_err_t err_code = NRFX_SUCCESS;
   2e8cc:	4804      	ldr	r0, [pc, #16]	; (2e8e0 <nrfx_ppi_channel_assign+0x48>)
                      eep,
                      tep);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2e8ce:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_NULL;
   2e8d0:	4804      	ldr	r0, [pc, #16]	; (2e8e4 <nrfx_ppi_channel_assign+0x4c>)
   2e8d2:	e7fc      	b.n	2e8ce <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_PARAM;
   2e8d4:	4804      	ldr	r0, [pc, #16]	; (2e8e8 <nrfx_ppi_channel_assign+0x50>)
   2e8d6:	e7fa      	b.n	2e8ce <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_STATE;
   2e8d8:	4804      	ldr	r0, [pc, #16]	; (2e8ec <nrfx_ppi_channel_assign+0x54>)
   2e8da:	e7f8      	b.n	2e8ce <nrfx_ppi_channel_assign+0x36>
   2e8dc:	200006f4 	.word	0x200006f4
   2e8e0:	0bad0000 	.word	0x0bad0000
   2e8e4:	0bad0009 	.word	0x0bad0009
   2e8e8:	0bad0004 	.word	0x0bad0004
   2e8ec:	0bad0005 	.word	0x0bad0005

0002e8f0 <nrfx_ppi_channel_enable>:
    return err_code;
#endif
}

nrfx_err_t nrfx_ppi_channel_enable(nrf_ppi_channel_t channel)
{
   2e8f0:	b510      	push	{r4, lr}
   2e8f2:	2401      	movs	r4, #1
   2e8f4:	4084      	lsls	r4, r0
    return ((~(NRFX_PPI_ALL_APP_CHANNELS_MASK) & channel_mask) == 0);
   2e8f6:	0c63      	lsrs	r3, r4, #17
   2e8f8:	045b      	lsls	r3, r3, #17
{
   2e8fa:	4601      	mov	r1, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   2e8fc:	b96b      	cbnz	r3, 2e91a <nrfx_ppi_channel_enable+0x2a>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (is_programmable_app_channel(channel) &&
   2e8fe:	b924      	cbnz	r4, 2e90a <nrfx_ppi_channel_enable+0x1a>
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
   2e900:	4b07      	ldr	r3, [pc, #28]	; (2e920 <nrfx_ppi_channel_enable+0x30>)
    nrfx_err_t err_code = NRFX_SUCCESS;
   2e902:	4808      	ldr	r0, [pc, #32]	; (2e924 <nrfx_ppi_channel_enable+0x34>)
   2e904:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    {
        nrf_ppi_channel_enable(NRF_PPI, channel);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2e908:	bd10      	pop	{r4, pc}
             !nrfx_flag32_is_allocated(m_channels_allocated, channel))
   2e90a:	4b07      	ldr	r3, [pc, #28]	; (2e928 <nrfx_ppi_channel_enable+0x38>)
   2e90c:	6818      	ldr	r0, [r3, #0]
   2e90e:	f00b fb46 	bl	39f9e <nrfx_flag32_is_allocated>
    else if (is_programmable_app_channel(channel) &&
   2e912:	2800      	cmp	r0, #0
   2e914:	d1f4      	bne.n	2e900 <nrfx_ppi_channel_enable+0x10>
        err_code = NRFX_ERROR_INVALID_STATE;
   2e916:	4805      	ldr	r0, [pc, #20]	; (2e92c <nrfx_ppi_channel_enable+0x3c>)
   2e918:	e7f6      	b.n	2e908 <nrfx_ppi_channel_enable+0x18>
        err_code = NRFX_ERROR_INVALID_PARAM;
   2e91a:	4805      	ldr	r0, [pc, #20]	; (2e930 <nrfx_ppi_channel_enable+0x40>)
    return err_code;
   2e91c:	e7f4      	b.n	2e908 <nrfx_ppi_channel_enable+0x18>
   2e91e:	bf00      	nop
   2e920:	4001f000 	.word	0x4001f000
   2e924:	0bad0000 	.word	0x0bad0000
   2e928:	200006f4 	.word	0x200006f4
   2e92c:	0bad0005 	.word	0x0bad0005
   2e930:	0bad0004 	.word	0x0bad0004

0002e934 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   2e934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e938:	4605      	mov	r5, r0
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   2e93a:	7907      	ldrb	r7, [r0, #4]
{
   2e93c:	4690      	mov	r8, r2
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
   2e93e:	460c      	mov	r4, r1
   2e940:	b949      	cbnz	r1, 2e956 <nrfx_timer_init+0x22>
   2e942:	4941      	ldr	r1, [pc, #260]	; (2ea48 <nrfx_timer_init+0x114>)
   2e944:	4841      	ldr	r0, [pc, #260]	; (2ea4c <nrfx_timer_init+0x118>)
   2e946:	4a42      	ldr	r2, [pc, #264]	; (2ea50 <nrfx_timer_init+0x11c>)
   2e948:	2353      	movs	r3, #83	; 0x53
   2e94a:	f008 fbe6 	bl	3711a <printk>
   2e94e:	4840      	ldr	r0, [pc, #256]	; (2ea50 <nrfx_timer_init+0x11c>)
   2e950:	2153      	movs	r1, #83	; 0x53
   2e952:	f008 fd88 	bl	37466 <assert_post_action>
    NRFX_ASSERT(timer_event_handler);
   2e956:	f1b8 0f00 	cmp.w	r8, #0
   2e95a:	d109      	bne.n	2e970 <nrfx_timer_init+0x3c>
   2e95c:	493d      	ldr	r1, [pc, #244]	; (2ea54 <nrfx_timer_init+0x120>)
   2e95e:	483b      	ldr	r0, [pc, #236]	; (2ea4c <nrfx_timer_init+0x118>)
   2e960:	4a3b      	ldr	r2, [pc, #236]	; (2ea50 <nrfx_timer_init+0x11c>)
   2e962:	2354      	movs	r3, #84	; 0x54
   2e964:	f008 fbd9 	bl	3711a <printk>
   2e968:	4839      	ldr	r0, [pc, #228]	; (2ea50 <nrfx_timer_init+0x11c>)
   2e96a:	2154      	movs	r1, #84	; 0x54
   2e96c:	f008 fd7b 	bl	37466 <assert_post_action>

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2e970:	4e39      	ldr	r6, [pc, #228]	; (2ea58 <nrfx_timer_init+0x124>)
   2e972:	230c      	movs	r3, #12
   2e974:	fb03 6307 	mla	r3, r3, r7, r6
   2e978:	7a1b      	ldrb	r3, [r3, #8]
   2e97a:	2b00      	cmp	r3, #0
   2e97c:	d161      	bne.n	2ea42 <nrfx_timer_init+0x10e>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   2e97e:	682b      	ldr	r3, [r5, #0]
   2e980:	4a36      	ldr	r2, [pc, #216]	; (2ea5c <nrfx_timer_init+0x128>)
   2e982:	4293      	cmp	r3, r2
   2e984:	d00f      	beq.n	2e9a6 <nrfx_timer_init+0x72>
   2e986:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   2e98a:	4293      	cmp	r3, r2
   2e98c:	d00b      	beq.n	2e9a6 <nrfx_timer_init+0x72>
   2e98e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   2e992:	4293      	cmp	r3, r2
   2e994:	d007      	beq.n	2e9a6 <nrfx_timer_init+0x72>
   2e996:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   2e99a:	4293      	cmp	r3, r2
   2e99c:	d003      	beq.n	2e9a6 <nrfx_timer_init+0x72>
   2e99e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   2e9a2:	4293      	cmp	r3, r2
   2e9a4:	d102      	bne.n	2e9ac <nrfx_timer_init+0x78>
   2e9a6:	78a3      	ldrb	r3, [r4, #2]
   2e9a8:	2b03      	cmp	r3, #3
   2e9aa:	d909      	bls.n	2e9c0 <nrfx_timer_init+0x8c>
   2e9ac:	492c      	ldr	r1, [pc, #176]	; (2ea60 <nrfx_timer_init+0x12c>)
   2e9ae:	4827      	ldr	r0, [pc, #156]	; (2ea4c <nrfx_timer_init+0x118>)
   2e9b0:	4a27      	ldr	r2, [pc, #156]	; (2ea50 <nrfx_timer_init+0x11c>)
   2e9b2:	2361      	movs	r3, #97	; 0x61
   2e9b4:	f008 fbb1 	bl	3711a <printk>
   2e9b8:	4825      	ldr	r0, [pc, #148]	; (2ea50 <nrfx_timer_init+0x11c>)
   2e9ba:	2161      	movs	r1, #97	; 0x61
   2e9bc:	f008 fd53 	bl	37466 <assert_post_action>

    p_cb->handler = timer_event_handler;
   2e9c0:	230c      	movs	r3, #12
   2e9c2:	437b      	muls	r3, r7
   2e9c4:	18f2      	adds	r2, r6, r3
   2e9c6:	f846 8003 	str.w	r8, [r6, r3]
    p_cb->context = p_config->p_context;
   2e9ca:	6863      	ldr	r3, [r4, #4]
   2e9cc:	6053      	str	r3, [r2, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   2e9ce:	7969      	ldrb	r1, [r5, #5]
   2e9d0:	6828      	ldr	r0, [r5, #0]
   2e9d2:	2300      	movs	r3, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e9d4:	469c      	mov	ip, r3
   2e9d6:	b2da      	uxtb	r2, r3
   2e9d8:	4291      	cmp	r1, r2
   2e9da:	d82a      	bhi.n	2ea32 <nrfx_timer_init+0xfe>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2e9dc:	f340 3007 	sbfx	r0, r0, #12, #8
   2e9e0:	f7f3 fc0a 	bl	221f8 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   2e9e4:	682b      	ldr	r3, [r5, #0]
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   2e9e6:	7862      	ldrb	r2, [r4, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   2e9e8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2e9ec:	481d      	ldr	r0, [pc, #116]	; (2ea64 <nrfx_timer_init+0x130>)
   2e9ee:	f021 0103 	bic.w	r1, r1, #3
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   2e9f2:	f002 0203 	and.w	r2, r2, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   2e9f6:	430a      	orrs	r2, r1
   2e9f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   2e9fc:	f8d3 1508 	ldr.w	r1, [r3, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   2ea00:	78a2      	ldrb	r2, [r4, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   2ea02:	f021 0103 	bic.w	r1, r1, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   2ea06:	f002 0203 	and.w	r2, r2, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   2ea0a:	430a      	orrs	r2, r1
   2ea0c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   2ea10:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   2ea14:	7822      	ldrb	r2, [r4, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   2ea16:	f021 010f 	bic.w	r1, r1, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   2ea1a:	f002 020f 	and.w	r2, r2, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   2ea1e:	430a      	orrs	r2, r1
   2ea20:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2ea24:	230c      	movs	r3, #12
   2ea26:	fb03 6607 	mla	r6, r3, r7, r6
   2ea2a:	2301      	movs	r3, #1
   2ea2c:	7233      	strb	r3, [r6, #8]
}
   2ea2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ea32:	009a      	lsls	r2, r3, #2
   2ea34:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   2ea38:	3301      	adds	r3, #1
   2ea3a:	f840 c002 	str.w	ip, [r0, r2]
   2ea3e:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   2ea40:	e7c9      	b.n	2e9d6 <nrfx_timer_init+0xa2>
        return err_code;
   2ea42:	4809      	ldr	r0, [pc, #36]	; (2ea68 <nrfx_timer_init+0x134>)
   2ea44:	e7f3      	b.n	2ea2e <nrfx_timer_init+0xfa>
   2ea46:	bf00      	nop
   2ea48:	0004034a 	.word	0x0004034a
   2ea4c:	0003c48a 	.word	0x0003c48a
   2ea50:	0004030d 	.word	0x0004030d
   2ea54:	00040353 	.word	0x00040353
   2ea58:	20002c40 	.word	0x20002c40
   2ea5c:	40008000 	.word	0x40008000
   2ea60:	00040367 	.word	0x00040367
   2ea64:	0bad0000 	.word	0x0bad0000
   2ea68:	0bad0005 	.word	0x0bad0005

0002ea6c <nrfx_timer_enable>:
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
}

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
   2ea6c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   2ea6e:	4d0e      	ldr	r5, [pc, #56]	; (2eaa8 <nrfx_timer_enable+0x3c>)
   2ea70:	7902      	ldrb	r2, [r0, #4]
   2ea72:	210c      	movs	r1, #12
   2ea74:	fb01 5202 	mla	r2, r1, r2, r5
{
   2ea78:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   2ea7a:	7a12      	ldrb	r2, [r2, #8]
   2ea7c:	2a01      	cmp	r2, #1
   2ea7e:	d009      	beq.n	2ea94 <nrfx_timer_enable+0x28>
   2ea80:	490a      	ldr	r1, [pc, #40]	; (2eaac <nrfx_timer_enable+0x40>)
   2ea82:	480b      	ldr	r0, [pc, #44]	; (2eab0 <nrfx_timer_enable+0x44>)
   2ea84:	4a0b      	ldr	r2, [pc, #44]	; (2eab4 <nrfx_timer_enable+0x48>)
   2ea86:	238f      	movs	r3, #143	; 0x8f
   2ea88:	f008 fb47 	bl	3711a <printk>
   2ea8c:	4809      	ldr	r0, [pc, #36]	; (2eab4 <nrfx_timer_enable+0x48>)
   2ea8e:	218f      	movs	r1, #143	; 0x8f
   2ea90:	f008 fce9 	bl	37466 <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   2ea94:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ea96:	2201      	movs	r2, #1
   2ea98:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   2ea9a:	7923      	ldrb	r3, [r4, #4]
   2ea9c:	220c      	movs	r2, #12
   2ea9e:	fb02 5303 	mla	r3, r2, r3, r5
   2eaa2:	2202      	movs	r2, #2
   2eaa4:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   2eaa6:	bd38      	pop	{r3, r4, r5, pc}
   2eaa8:	20002c40 	.word	0x20002c40
   2eaac:	00040f7e 	.word	0x00040f7e
   2eab0:	0003c48a 	.word	0x0003c48a
   2eab4:	0004030d 	.word	0x0004030d

0002eab8 <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
   2eab8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2eaba:	4d0d      	ldr	r5, [pc, #52]	; (2eaf0 <nrfx_timer_disable+0x38>)
   2eabc:	7902      	ldrb	r2, [r0, #4]
   2eabe:	210c      	movs	r1, #12
   2eac0:	fb01 5202 	mla	r2, r1, r2, r5
{
   2eac4:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2eac6:	7a12      	ldrb	r2, [r2, #8]
   2eac8:	b94a      	cbnz	r2, 2eade <nrfx_timer_disable+0x26>
   2eaca:	490a      	ldr	r1, [pc, #40]	; (2eaf4 <nrfx_timer_disable+0x3c>)
   2eacc:	480a      	ldr	r0, [pc, #40]	; (2eaf8 <nrfx_timer_disable+0x40>)
   2eace:	4a0b      	ldr	r2, [pc, #44]	; (2eafc <nrfx_timer_disable+0x44>)
   2ead0:	2397      	movs	r3, #151	; 0x97
   2ead2:	f008 fb22 	bl	3711a <printk>
   2ead6:	4809      	ldr	r0, [pc, #36]	; (2eafc <nrfx_timer_disable+0x44>)
   2ead8:	2197      	movs	r1, #151	; 0x97
   2eada:	f008 fcc4 	bl	37466 <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   2eade:	6823      	ldr	r3, [r4, #0]
   2eae0:	2201      	movs	r2, #1
   2eae2:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   2eae4:	7923      	ldrb	r3, [r4, #4]
   2eae6:	210c      	movs	r1, #12
   2eae8:	fb01 5303 	mla	r3, r1, r3, r5
   2eaec:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   2eaee:	bd38      	pop	{r3, r4, r5, pc}
   2eaf0:	20002c40 	.word	0x20002c40
   2eaf4:	00040fc0 	.word	0x00040fc0
   2eaf8:	0003c48a 	.word	0x0003c48a
   2eafc:	0004030d 	.word	0x0004030d

0002eb00 <nrfx_timer_uninit>:
{
   2eb00:	b538      	push	{r3, r4, r5, lr}
   2eb02:	4604      	mov	r4, r0
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2eb04:	6800      	ldr	r0, [r0, #0]
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   2eb06:	f340 3007 	sbfx	r0, r0, #12, #8
   2eb0a:	f7f3 fb85 	bl	22218 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   2eb0e:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS &= ~(mask);
   2eb10:	2500      	movs	r5, #0
   2eb12:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2eb16:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   2eb1a:	f04f 32ff 	mov.w	r2, #4294967295
   2eb1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    nrfx_timer_disable(p_instance);
   2eb22:	4620      	mov	r0, r4
   2eb24:	f7ff ffc8 	bl	2eab8 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   2eb28:	7923      	ldrb	r3, [r4, #4]
   2eb2a:	4a03      	ldr	r2, [pc, #12]	; (2eb38 <nrfx_timer_uninit+0x38>)
   2eb2c:	210c      	movs	r1, #12
   2eb2e:	fb01 2303 	mla	r3, r1, r3, r2
   2eb32:	721d      	strb	r5, [r3, #8]
}
   2eb34:	bd38      	pop	{r3, r4, r5, pc}
   2eb36:	bf00      	nop
   2eb38:	20002c40 	.word	0x20002c40

0002eb3c <nrfx_timer_clear>:
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_STOP);
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
   2eb3c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2eb3e:	4a0b      	ldr	r2, [pc, #44]	; (2eb6c <nrfx_timer_clear+0x30>)
   2eb40:	7903      	ldrb	r3, [r0, #4]
   2eb42:	210c      	movs	r1, #12
   2eb44:	fb01 2303 	mla	r3, r1, r3, r2
{
   2eb48:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2eb4a:	7a1b      	ldrb	r3, [r3, #8]
   2eb4c:	b94b      	cbnz	r3, 2eb62 <nrfx_timer_clear+0x26>
   2eb4e:	4908      	ldr	r1, [pc, #32]	; (2eb70 <nrfx_timer_clear+0x34>)
   2eb50:	4808      	ldr	r0, [pc, #32]	; (2eb74 <nrfx_timer_clear+0x38>)
   2eb52:	4a09      	ldr	r2, [pc, #36]	; (2eb78 <nrfx_timer_clear+0x3c>)
   2eb54:	23b3      	movs	r3, #179	; 0xb3
   2eb56:	f008 fae0 	bl	3711a <printk>
   2eb5a:	4807      	ldr	r0, [pc, #28]	; (2eb78 <nrfx_timer_clear+0x3c>)
   2eb5c:	21b3      	movs	r1, #179	; 0xb3
   2eb5e:	f008 fc82 	bl	37466 <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   2eb62:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2eb64:	2201      	movs	r2, #1
   2eb66:	60da      	str	r2, [r3, #12]
}
   2eb68:	bd10      	pop	{r4, pc}
   2eb6a:	bf00      	nop
   2eb6c:	20002c40 	.word	0x20002c40
   2eb70:	00040fc0 	.word	0x00040fc0
   2eb74:	0003c48a 	.word	0x0003c48a
   2eb78:	0004030d 	.word	0x0004030d

0002eb7c <nrfx_timer_increment>:

void nrfx_timer_increment(nrfx_timer_t const * p_instance)
{
   2eb7c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2eb7e:	4a13      	ldr	r2, [pc, #76]	; (2ebcc <nrfx_timer_increment+0x50>)
   2eb80:	7903      	ldrb	r3, [r0, #4]
   2eb82:	210c      	movs	r1, #12
   2eb84:	fb01 2303 	mla	r3, r1, r3, r2
{
   2eb88:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2eb8a:	7a1b      	ldrb	r3, [r3, #8]
   2eb8c:	b94b      	cbnz	r3, 2eba2 <nrfx_timer_increment+0x26>
   2eb8e:	4910      	ldr	r1, [pc, #64]	; (2ebd0 <nrfx_timer_increment+0x54>)
   2eb90:	4810      	ldr	r0, [pc, #64]	; (2ebd4 <nrfx_timer_increment+0x58>)
   2eb92:	4a11      	ldr	r2, [pc, #68]	; (2ebd8 <nrfx_timer_increment+0x5c>)
   2eb94:	23b9      	movs	r3, #185	; 0xb9
   2eb96:	f008 fac0 	bl	3711a <printk>
   2eb9a:	480f      	ldr	r0, [pc, #60]	; (2ebd8 <nrfx_timer_increment+0x5c>)
   2eb9c:	21b9      	movs	r1, #185	; 0xb9
   2eb9e:	f008 fc62 	bl	37466 <assert_post_action>
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
   2eba2:	6823      	ldr	r3, [r4, #0]
    return (nrf_timer_mode_t)(p_reg->MODE);
   2eba4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   2eba8:	f013 0fff 	tst.w	r3, #255	; 0xff
   2ebac:	d109      	bne.n	2ebc2 <nrfx_timer_increment+0x46>
   2ebae:	490b      	ldr	r1, [pc, #44]	; (2ebdc <nrfx_timer_increment+0x60>)
   2ebb0:	4808      	ldr	r0, [pc, #32]	; (2ebd4 <nrfx_timer_increment+0x58>)
   2ebb2:	4a09      	ldr	r2, [pc, #36]	; (2ebd8 <nrfx_timer_increment+0x5c>)
   2ebb4:	23ba      	movs	r3, #186	; 0xba
   2ebb6:	f008 fab0 	bl	3711a <printk>
   2ebba:	4807      	ldr	r0, [pc, #28]	; (2ebd8 <nrfx_timer_increment+0x5c>)
   2ebbc:	21ba      	movs	r1, #186	; 0xba
   2ebbe:	f008 fc52 	bl	37466 <assert_post_action>

    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_COUNT);
   2ebc2:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ebc4:	2201      	movs	r2, #1
   2ebc6:	609a      	str	r2, [r3, #8]
}
   2ebc8:	bd10      	pop	{r4, pc}
   2ebca:	bf00      	nop
   2ebcc:	20002c40 	.word	0x20002c40
   2ebd0:	00040fc0 	.word	0x00040fc0
   2ebd4:	0003c48a 	.word	0x0003c48a
   2ebd8:	0004030d 	.word	0x0004030d
   2ebdc:	00041004 	.word	0x00041004

0002ebe0 <nrfx_timer_capture>:

uint32_t nrfx_timer_capture(nrfx_timer_t const *   p_instance,
                            nrf_timer_cc_channel_t cc_channel)
{
   2ebe0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2ebe2:	4a15      	ldr	r2, [pc, #84]	; (2ec38 <nrfx_timer_capture+0x58>)
   2ebe4:	7903      	ldrb	r3, [r0, #4]
{
   2ebe6:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2ebe8:	210c      	movs	r1, #12
   2ebea:	fb01 2303 	mla	r3, r1, r3, r2
{
   2ebee:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2ebf0:	7a1b      	ldrb	r3, [r3, #8]
   2ebf2:	b94b      	cbnz	r3, 2ec08 <nrfx_timer_capture+0x28>
   2ebf4:	4911      	ldr	r1, [pc, #68]	; (2ec3c <nrfx_timer_capture+0x5c>)
   2ebf6:	4812      	ldr	r0, [pc, #72]	; (2ec40 <nrfx_timer_capture+0x60>)
   2ebf8:	4a12      	ldr	r2, [pc, #72]	; (2ec44 <nrfx_timer_capture+0x64>)
   2ebfa:	23c2      	movs	r3, #194	; 0xc2
   2ebfc:	f008 fa8d 	bl	3711a <printk>
   2ec00:	4810      	ldr	r0, [pc, #64]	; (2ec44 <nrfx_timer_capture+0x64>)
   2ec02:	21c2      	movs	r1, #194	; 0xc2
   2ec04:	f008 fc2f 	bl	37466 <assert_post_action>
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
   2ec08:	796b      	ldrb	r3, [r5, #5]
   2ec0a:	42a3      	cmp	r3, r4
   2ec0c:	d809      	bhi.n	2ec22 <nrfx_timer_capture+0x42>
   2ec0e:	490e      	ldr	r1, [pc, #56]	; (2ec48 <nrfx_timer_capture+0x68>)
   2ec10:	480b      	ldr	r0, [pc, #44]	; (2ec40 <nrfx_timer_capture+0x60>)
   2ec12:	4a0c      	ldr	r2, [pc, #48]	; (2ec44 <nrfx_timer_capture+0x64>)
   2ec14:	23c3      	movs	r3, #195	; 0xc3
   2ec16:	f008 fa80 	bl	3711a <printk>
   2ec1a:	480a      	ldr	r0, [pc, #40]	; (2ec44 <nrfx_timer_capture+0x64>)
   2ec1c:	21c3      	movs	r1, #195	; 0xc3
   2ec1e:	f008 fc22 	bl	37466 <assert_post_action>
}

NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get(uint32_t channel)
{
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   2ec22:	00a3      	lsls	r3, r4, #2
   2ec24:	3340      	adds	r3, #64	; 0x40

    nrf_timer_task_trigger(p_instance->p_reg,
   2ec26:	682a      	ldr	r2, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ec28:	b2db      	uxtb	r3, r3
   2ec2a:	2101      	movs	r1, #1
   2ec2c:	50d1      	str	r1, [r2, r3]
    return (uint32_t)p_reg->CC[cc_channel];
   2ec2e:	f504 74a8 	add.w	r4, r4, #336	; 0x150
   2ec32:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
}
   2ec36:	bd38      	pop	{r3, r4, r5, pc}
   2ec38:	20002c40 	.word	0x20002c40
   2ec3c:	00040fc0 	.word	0x00040fc0
   2ec40:	0003c48a 	.word	0x0003c48a
   2ec44:	0004030d 	.word	0x0004030d
   2ec48:	00041042 	.word	0x00041042

0002ec4c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   2ec4c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2ec4e:	4c11      	ldr	r4, [pc, #68]	; (2ec94 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   2ec50:	4a11      	ldr	r2, [pc, #68]	; (2ec98 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   2ec52:	4912      	ldr	r1, [pc, #72]	; (2ec9c <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2ec54:	2303      	movs	r3, #3
   2ec56:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   2ec58:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2ec5a:	4b11      	ldr	r3, [pc, #68]	; (2eca0 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   2ec5c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2ec5e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   2ec60:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2ec64:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   2ec66:	2300      	movs	r3, #0
   2ec68:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   2ec6a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2ec6c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   2ec6e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   2ec70:	4a0c      	ldr	r2, [pc, #48]	; (2eca4 <_DoInit+0x58>)
   2ec72:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   2ec74:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   2ec76:	2210      	movs	r2, #16
   2ec78:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   2ec7a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   2ec7c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2ec7e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   2ec80:	f00b fdbd 	bl	3a7fe <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   2ec84:	4908      	ldr	r1, [pc, #32]	; (2eca8 <_DoInit+0x5c>)
   2ec86:	4620      	mov	r0, r4
   2ec88:	f00b fdb9 	bl	3a7fe <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   2ec8c:	2320      	movs	r3, #32
   2ec8e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   2ec90:	bd10      	pop	{r4, pc}
   2ec92:	bf00      	nop
   2ec94:	20002c58 	.word	0x20002c58
   2ec98:	0004106c 	.word	0x0004106c
   2ec9c:	00041075 	.word	0x00041075
   2eca0:	2000448f 	.word	0x2000448f
   2eca4:	2000447f 	.word	0x2000447f
   2eca8:	00041079 	.word	0x00041079

0002ecac <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2ecac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   2ecb0:	4f23      	ldr	r7, [pc, #140]	; (2ed40 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   2ecb2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2ecb6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   2ecb8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2ecbc:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   2ecbe:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2ecc0:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2ecc2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2ecc4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2ecc6:	d834      	bhi.n	2ed32 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   2ecc8:	f8d2 a020 	ldr.w	sl, [r2, #32]
   2eccc:	ebaa 0905 	sub.w	r9, sl, r5
   2ecd0:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   2ecd4:	4294      	cmp	r4, r2
   2ecd6:	d811      	bhi.n	2ecfc <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2ecd8:	f04f 0918 	mov.w	r9, #24
   2ecdc:	fb06 9309 	mla	r3, r6, r9, r9
   2ece0:	443b      	add	r3, r7
   2ece2:	4622      	mov	r2, r4
   2ece4:	6858      	ldr	r0, [r3, #4]
   2ece6:	4641      	mov	r1, r8
   2ece8:	4428      	add	r0, r5
   2ecea:	f00b fc0a 	bl	3a502 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   2ecee:	fb09 7606 	mla	r6, r9, r6, r7
   2ecf2:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   2ecf4:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   2ecf6:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   2ecf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   2ecfc:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2ecfe:	429c      	cmp	r4, r3
   2ed00:	d81b      	bhi.n	2ed3a <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2ed02:	fb00 bb0b 	mla	fp, r0, fp, fp
   2ed06:	44bb      	add	fp, r7
   2ed08:	464a      	mov	r2, r9
   2ed0a:	f8db 0004 	ldr.w	r0, [fp, #4]
   2ed0e:	442c      	add	r4, r5
   2ed10:	4428      	add	r0, r5
   2ed12:	f00b fbf6 	bl	3a502 <memcpy>
      if (NumBytes) {
   2ed16:	ebb4 040a 	subs.w	r4, r4, sl
   2ed1a:	d006      	beq.n	2ed2a <SEGGER_RTT_WriteSkipNoLock+0x7e>
   2ed1c:	f8db 0004 	ldr.w	r0, [fp, #4]
   2ed20:	4622      	mov	r2, r4
   2ed22:	eb08 0109 	add.w	r1, r8, r9
   2ed26:	f00b fbec 	bl	3a502 <memcpy>
      pRing->WrOff = NumBytes;
   2ed2a:	2018      	movs	r0, #24
   2ed2c:	fb00 7606 	mla	r6, r0, r6, r7
   2ed30:	e7e0      	b.n	2ecf4 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   2ed32:	3b01      	subs	r3, #1
   2ed34:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   2ed36:	42a3      	cmp	r3, r4
   2ed38:	d2ce      	bcs.n	2ecd8 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   2ed3a:	2000      	movs	r0, #0
   2ed3c:	e7dc      	b.n	2ecf8 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   2ed3e:	bf00      	nop
   2ed40:	20002c58 	.word	0x20002c58

0002ed44 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2ed44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   2ed46:	4c18      	ldr	r4, [pc, #96]	; (2eda8 <SEGGER_RTT_WriteNoLock+0x64>)
   2ed48:	2318      	movs	r3, #24
   2ed4a:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   2ed4e:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   2ed52:	4425      	add	r5, r4
  switch (pRing->Flags) {
   2ed54:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   2ed56:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2ed58:	460f      	mov	r7, r1
   2ed5a:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   2ed5c:	d00f      	beq.n	2ed7e <SEGGER_RTT_WriteNoLock+0x3a>
   2ed5e:	2c02      	cmp	r4, #2
   2ed60:	d01a      	beq.n	2ed98 <SEGGER_RTT_WriteNoLock+0x54>
   2ed62:	b9f4      	cbnz	r4, 2eda2 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   2ed64:	4628      	mov	r0, r5
   2ed66:	f00b f9b1 	bl	3a0cc <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   2ed6a:	4286      	cmp	r6, r0
   2ed6c:	d805      	bhi.n	2ed7a <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   2ed6e:	4632      	mov	r2, r6
   2ed70:	4639      	mov	r1, r7
   2ed72:	4628      	mov	r0, r5
   2ed74:	f00b f9b8 	bl	3a0e8 <_WriteNoCheck>
   2ed78:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   2ed7a:	4620      	mov	r0, r4
   2ed7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   2ed7e:	4628      	mov	r0, r5
   2ed80:	f00b f9a4 	bl	3a0cc <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   2ed84:	4286      	cmp	r6, r0
   2ed86:	4634      	mov	r4, r6
   2ed88:	bf28      	it	cs
   2ed8a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   2ed8c:	4622      	mov	r2, r4
   2ed8e:	4639      	mov	r1, r7
   2ed90:	4628      	mov	r0, r5
   2ed92:	f00b f9a9 	bl	3a0e8 <_WriteNoCheck>
    break;
   2ed96:	e7f0      	b.n	2ed7a <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   2ed98:	4628      	mov	r0, r5
}
   2ed9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   2ed9e:	f00b b9c0 	b.w	3a122 <_WriteBlocking>
  switch (pRing->Flags) {
   2eda2:	2400      	movs	r4, #0
  return Status;
   2eda4:	e7e9      	b.n	2ed7a <SEGGER_RTT_WriteNoLock+0x36>
   2eda6:	bf00      	nop
   2eda8:	20002c58 	.word	0x20002c58

0002edac <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   2edac:	4b03      	ldr	r3, [pc, #12]	; (2edbc <SEGGER_RTT_HasDataUp+0x10>)
   2edae:	2218      	movs	r2, #24
   2edb0:	fb02 3300 	mla	r3, r2, r0, r3
   2edb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   2edb6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   2edb8:	1a80      	subs	r0, r0, r2
   2edba:	4770      	bx	lr
   2edbc:	20002c58 	.word	0x20002c58

0002edc0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2edc0:	4b0e      	ldr	r3, [pc, #56]	; (2edfc <z_sys_init_run_level+0x3c>)
{
   2edc2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2edc4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2edc8:	3001      	adds	r0, #1
   2edca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2edce:	42a6      	cmp	r6, r4
   2edd0:	d800      	bhi.n	2edd4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   2edd2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   2edd4:	e9d4 3500 	ldrd	r3, r5, [r4]
   2edd8:	4628      	mov	r0, r5
   2edda:	4798      	blx	r3
		if (dev != NULL) {
   2eddc:	b165      	cbz	r5, 2edf8 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   2edde:	68eb      	ldr	r3, [r5, #12]
   2ede0:	b130      	cbz	r0, 2edf0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2ede2:	2800      	cmp	r0, #0
   2ede4:	bfb8      	it	lt
   2ede6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   2ede8:	28ff      	cmp	r0, #255	; 0xff
   2edea:	bfa8      	it	ge
   2edec:	20ff      	movge	r0, #255	; 0xff
   2edee:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2edf0:	785a      	ldrb	r2, [r3, #1]
   2edf2:	f042 0201 	orr.w	r2, r2, #1
   2edf6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2edf8:	3408      	adds	r4, #8
   2edfa:	e7e8      	b.n	2edce <z_sys_init_run_level+0xe>
   2edfc:	0003be28 	.word	0x0003be28

0002ee00 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   2ee00:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   2ee02:	4605      	mov	r5, r0
   2ee04:	b910      	cbnz	r0, 2ee0c <z_impl_device_get_binding+0xc>
		return NULL;
   2ee06:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   2ee08:	4620      	mov	r0, r4
   2ee0a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   2ee0c:	7803      	ldrb	r3, [r0, #0]
   2ee0e:	2b00      	cmp	r3, #0
   2ee10:	d0f9      	beq.n	2ee06 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   2ee12:	4a0f      	ldr	r2, [pc, #60]	; (2ee50 <z_impl_device_get_binding+0x50>)
   2ee14:	4c0f      	ldr	r4, [pc, #60]	; (2ee54 <z_impl_device_get_binding+0x54>)
   2ee16:	4616      	mov	r6, r2
   2ee18:	4294      	cmp	r4, r2
   2ee1a:	d108      	bne.n	2ee2e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   2ee1c:	4c0d      	ldr	r4, [pc, #52]	; (2ee54 <z_impl_device_get_binding+0x54>)
   2ee1e:	42b4      	cmp	r4, r6
   2ee20:	d0f1      	beq.n	2ee06 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2ee22:	4620      	mov	r0, r4
   2ee24:	f00b f9ae 	bl	3a184 <z_device_ready>
   2ee28:	b950      	cbnz	r0, 2ee40 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   2ee2a:	3418      	adds	r4, #24
   2ee2c:	e7f7      	b.n	2ee1e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   2ee2e:	4620      	mov	r0, r4
   2ee30:	f00b f9a8 	bl	3a184 <z_device_ready>
   2ee34:	b110      	cbz	r0, 2ee3c <z_impl_device_get_binding+0x3c>
   2ee36:	6823      	ldr	r3, [r4, #0]
   2ee38:	42ab      	cmp	r3, r5
   2ee3a:	d0e5      	beq.n	2ee08 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   2ee3c:	3418      	adds	r4, #24
   2ee3e:	e7eb      	b.n	2ee18 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2ee40:	6821      	ldr	r1, [r4, #0]
   2ee42:	4628      	mov	r0, r5
   2ee44:	f7e9 faa6 	bl	18394 <strcmp>
   2ee48:	2800      	cmp	r0, #0
   2ee4a:	d1ee      	bne.n	2ee2a <z_impl_device_get_binding+0x2a>
   2ee4c:	e7dc      	b.n	2ee08 <z_impl_device_get_binding+0x8>
   2ee4e:	bf00      	nop
   2ee50:	0003b228 	.word	0x0003b228
   2ee54:	0003b180 	.word	0x0003b180

0002ee58 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2ee58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ee5c:	4605      	mov	r5, r0
   2ee5e:	460f      	mov	r7, r1
	__asm__ volatile(
   2ee60:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ee64:	f3ef 8811 	mrs	r8, BASEPRI
   2ee68:	f383 8812 	msr	BASEPRI_MAX, r3
   2ee6c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2ee70:	f002 ff56 	bl	31d20 <z_impl_z_current_get>
   2ee74:	4c26      	ldr	r4, [pc, #152]	; (2ef10 <z_fatal_error+0xb8>)
   2ee76:	4b27      	ldr	r3, [pc, #156]	; (2ef14 <z_fatal_error+0xbc>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2ee78:	4927      	ldr	r1, [pc, #156]	; (2ef18 <z_fatal_error+0xc0>)
   2ee7a:	1ae4      	subs	r4, r4, r3
   2ee7c:	2d04      	cmp	r5, #4
   2ee7e:	bf96      	itet	ls
   2ee80:	4b26      	ldrls	r3, [pc, #152]	; (2ef1c <z_fatal_error+0xc4>)
   2ee82:	4b27      	ldrhi	r3, [pc, #156]	; (2ef20 <z_fatal_error+0xc8>)
   2ee84:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   2ee88:	08e4      	lsrs	r4, r4, #3
   2ee8a:	2200      	movs	r2, #0
   2ee8c:	01a4      	lsls	r4, r4, #6
   2ee8e:	4606      	mov	r6, r0
   2ee90:	9200      	str	r2, [sp, #0]
   2ee92:	f044 0001 	orr.w	r0, r4, #1
   2ee96:	462a      	mov	r2, r5
   2ee98:	f008 fafa 	bl	37490 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2ee9c:	b147      	cbz	r7, 2eeb0 <z_fatal_error+0x58>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2ee9e:	69fb      	ldr	r3, [r7, #28]
   2eea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2eea4:	b123      	cbz	r3, 2eeb0 <z_fatal_error+0x58>
		LOG_ERR("Fault during interrupt handling\n");
   2eea6:	491f      	ldr	r1, [pc, #124]	; (2ef24 <z_fatal_error+0xcc>)
   2eea8:	f044 0001 	orr.w	r0, r4, #1
   2eeac:	f008 faf0 	bl	37490 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2eeb0:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2eeb4:	b12e      	cbz	r6, 2eec2 <z_fatal_error+0x6a>
   2eeb6:	4630      	mov	r0, r6
   2eeb8:	f00b f99b 	bl	3a1f2 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2eebc:	b108      	cbz	r0, 2eec2 <z_fatal_error+0x6a>
   2eebe:	7803      	ldrb	r3, [r0, #0]
   2eec0:	b903      	cbnz	r3, 2eec4 <z_fatal_error+0x6c>
		thread_name = "unknown";
   2eec2:	4819      	ldr	r0, [pc, #100]	; (2ef28 <z_fatal_error+0xd0>)
   2eec4:	f008 faf7 	bl	374b6 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   2eec8:	4918      	ldr	r1, [pc, #96]	; (2ef2c <z_fatal_error+0xd4>)
   2eeca:	4603      	mov	r3, r0
   2eecc:	4632      	mov	r2, r6
   2eece:	4620      	mov	r0, r4
   2eed0:	f008 fade 	bl	37490 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2eed4:	4639      	mov	r1, r7
   2eed6:	4628      	mov	r0, r5
   2eed8:	f7fd fca0 	bl	2c81c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2eedc:	2d04      	cmp	r5, #4
   2eede:	d10c      	bne.n	2eefa <z_fatal_error+0xa2>
   2eee0:	4913      	ldr	r1, [pc, #76]	; (2ef30 <z_fatal_error+0xd8>)
   2eee2:	4a14      	ldr	r2, [pc, #80]	; (2ef34 <z_fatal_error+0xdc>)
   2eee4:	4814      	ldr	r0, [pc, #80]	; (2ef38 <z_fatal_error+0xe0>)
   2eee6:	238f      	movs	r3, #143	; 0x8f
   2eee8:	f008 f917 	bl	3711a <printk>
   2eeec:	4813      	ldr	r0, [pc, #76]	; (2ef3c <z_fatal_error+0xe4>)
   2eeee:	f008 f914 	bl	3711a <printk>
   2eef2:	4810      	ldr	r0, [pc, #64]	; (2ef34 <z_fatal_error+0xdc>)
   2eef4:	218f      	movs	r1, #143	; 0x8f
   2eef6:	f008 fab6 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2eefa:	f388 8811 	msr	BASEPRI, r8
   2eefe:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2ef02:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2ef04:	b002      	add	sp, #8
   2ef06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2ef0a:	f7f3 bdf9 	b.w	22b00 <z_impl_k_thread_abort>
   2ef0e:	bf00      	nop
   2ef10:	0003b540 	.word	0x0003b540
   2ef14:	0003b448 	.word	0x0003b448
   2ef18:	00041096 	.word	0x00041096
   2ef1c:	0003be40 	.word	0x0003be40
   2ef20:	00041080 	.word	0x00041080
   2ef24:	000410be 	.word	0x000410be
   2ef28:	0004108e 	.word	0x0004108e
   2ef2c:	000410df 	.word	0x000410df
   2ef30:	00041119 	.word	0x00041119
   2ef34:	000410f7 	.word	0x000410f7
   2ef38:	0003c48a 	.word	0x0003c48a
   2ef3c:	00041136 	.word	0x00041136

0002ef40 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   2ef40:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   2ef42:	2300      	movs	r3, #0
{
   2ef44:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   2ef46:	2201      	movs	r2, #1
   2ef48:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2ef4c:	220f      	movs	r2, #15
   2ef4e:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   2ef52:	4c0d      	ldr	r4, [pc, #52]	; (2ef88 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2ef54:	4a0d      	ldr	r2, [pc, #52]	; (2ef8c <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   2ef56:	9301      	str	r3, [sp, #4]
   2ef58:	490d      	ldr	r1, [pc, #52]	; (2ef90 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2ef5a:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   2ef5c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2ef60:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   2ef64:	f44f 75b0 	mov.w	r5, #352	; 0x160
   2ef68:	9300      	str	r3, [sp, #0]
   2ef6a:	fb05 1100 	mla	r1, r5, r0, r1
   2ef6e:	4b09      	ldr	r3, [pc, #36]	; (2ef94 <init_idle_thread+0x54>)
   2ef70:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2ef74:	4620      	mov	r0, r4
   2ef76:	f000 fae3 	bl	2f540 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2ef7a:	7b63      	ldrb	r3, [r4, #13]
   2ef7c:	f023 0304 	bic.w	r3, r3, #4
   2ef80:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   2ef82:	b007      	add	sp, #28
   2ef84:	bd30      	pop	{r4, r5, pc}
   2ef86:	bf00      	nop
   2ef88:	20002038 	.word	0x20002038
   2ef8c:	20002d00 	.word	0x20002d00
   2ef90:	200081a0 	.word	0x200081a0
   2ef94:	0002f811 	.word	0x0002f811

0002ef98 <bg_thread_main>:
{
   2ef98:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2ef9a:	4b0a      	ldr	r3, [pc, #40]	; (2efc4 <bg_thread_main+0x2c>)
   2ef9c:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2ef9e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   2efa0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2efa2:	f7ff ff0d 	bl	2edc0 <z_sys_init_run_level>
	boot_banner();
   2efa6:	f004 f8e9 	bl	3317c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   2efaa:	2003      	movs	r0, #3
   2efac:	f7ff ff08 	bl	2edc0 <z_sys_init_run_level>
	z_init_static_threads();
   2efb0:	f000 fb78 	bl	2f6a4 <z_init_static_threads>
	main();
   2efb4:	f7f0 f8f8 	bl	1f1a8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2efb8:	4a03      	ldr	r2, [pc, #12]	; (2efc8 <bg_thread_main+0x30>)
   2efba:	7b13      	ldrb	r3, [r2, #12]
   2efbc:	f023 0301 	bic.w	r3, r3, #1
   2efc0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2efc2:	bd08      	pop	{r3, pc}
   2efc4:	2000488f 	.word	0x2000488f
   2efc8:	200020b8 	.word	0x200020b8

0002efcc <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2efcc:	4802      	ldr	r0, [pc, #8]	; (2efd8 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   2efce:	4a03      	ldr	r2, [pc, #12]	; (2efdc <z_bss_zero+0x10>)
   2efd0:	2100      	movs	r1, #0
   2efd2:	1a12      	subs	r2, r2, r0
   2efd4:	f00b bad0 	b.w	3a578 <memset>
   2efd8:	20000e20 	.word	0x20000e20
   2efdc:	20004a50 	.word	0x20004a50

0002efe0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   2efe0:	b580      	push	{r7, lr}
   2efe2:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2efe4:	f7f1 fa76 	bl	204d4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2efe8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2f0c4 <z_cstart+0xe4>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2efec:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   2eff0:	4d2e      	ldr	r5, [pc, #184]	; (2f0ac <z_cstart+0xcc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   2eff2:	4e2f      	ldr	r6, [pc, #188]	; (2f0b0 <z_cstart+0xd0>)
   2eff4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2eff6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 2f0c8 <z_cstart+0xe8>
   2effa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2effe:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2f000:	23e0      	movs	r3, #224	; 0xe0
   2f002:	2400      	movs	r4, #0
   2f004:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2f008:	2320      	movs	r3, #32
   2f00a:	77eb      	strb	r3, [r5, #31]
   2f00c:	762c      	strb	r4, [r5, #24]
   2f00e:	766c      	strb	r4, [r5, #25]
   2f010:	76ac      	strb	r4, [r5, #26]
   2f012:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2f016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2f018:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2f01c:	626b      	str	r3, [r5, #36]	; 0x24
   2f01e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2f022:	f7f3 fce3 	bl	229ec <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2f026:	f7f3 f891 	bl	2214c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2f02a:	f04f 33ff 	mov.w	r3, #4294967295
   2f02e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2f030:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2f032:	f7f3 fe59 	bl	22ce8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2f036:	f7f3 fd75 	bl	22b24 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2f03a:	f240 1301 	movw	r3, #257	; 0x101
   2f03e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2f042:	ab06      	add	r3, sp, #24
   2f044:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   2f046:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2f04a:	f00b f89a 	bl	3a182 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2f04e:	4620      	mov	r0, r4
   2f050:	f7ff feb6 	bl	2edc0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2f054:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   2f056:	4d17      	ldr	r5, [pc, #92]	; (2f0b4 <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2f058:	f7ff feb2 	bl	2edc0 <z_sys_init_run_level>
	z_sched_init();
   2f05c:	f002 fcca 	bl	319f4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2f060:	4b15      	ldr	r3, [pc, #84]	; (2f0b8 <z_cstart+0xd8>)
   2f062:	9305      	str	r3, [sp, #20]
   2f064:	2301      	movs	r3, #1
   2f066:	4915      	ldr	r1, [pc, #84]	; (2f0bc <z_cstart+0xdc>)
   2f068:	9400      	str	r4, [sp, #0]
   2f06a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2f06e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2f072:	464b      	mov	r3, r9
   2f074:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2f078:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   2f07a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2f07c:	f000 fa60 	bl	2f540 <z_setup_new_thread>
   2f080:	7b6a      	ldrb	r2, [r5, #13]
   2f082:	f022 0204 	bic.w	r2, r2, #4
   2f086:	736a      	strb	r2, [r5, #13]
   2f088:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   2f08a:	4628      	mov	r0, r5
   2f08c:	f002 f8b2 	bl	311f4 <z_ready_thread>
		init_idle_thread(i);
   2f090:	4620      	mov	r0, r4
   2f092:	f7ff ff55 	bl	2ef40 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2f096:	4b0a      	ldr	r3, [pc, #40]	; (2f0c0 <z_cstart+0xe0>)
   2f098:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2f09a:	464a      	mov	r2, r9
   2f09c:	4639      	mov	r1, r7
   2f09e:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   2f0a0:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   2f0a2:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2f0a6:	f7f3 f9c9 	bl	2243c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2f0aa:	bf00      	nop
   2f0ac:	e000ed00 	.word	0xe000ed00
   2f0b0:	20002d00 	.word	0x20002d00
   2f0b4:	200020b8 	.word	0x200020b8
   2f0b8:	0003cc2e 	.word	0x0003cc2e
   2f0bc:	20006180 	.word	0x20006180
   2f0c0:	20002038 	.word	0x20002038
   2f0c4:	20008b20 	.word	0x20008b20
   2f0c8:	0002ef99 	.word	0x0002ef99

0002f0cc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   2f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2f0ce:	4d0f      	ldr	r5, [pc, #60]	; (2f10c <statics_init+0x40>)
   2f0d0:	4c0f      	ldr	r4, [pc, #60]	; (2f110 <statics_init+0x44>)
   2f0d2:	4e10      	ldr	r6, [pc, #64]	; (2f114 <statics_init+0x48>)
   2f0d4:	462f      	mov	r7, r5
   2f0d6:	42ac      	cmp	r4, r5
   2f0d8:	d90c      	bls.n	2f0f4 <statics_init+0x28>
   2f0da:	490f      	ldr	r1, [pc, #60]	; (2f118 <statics_init+0x4c>)
   2f0dc:	480f      	ldr	r0, [pc, #60]	; (2f11c <statics_init+0x50>)
   2f0de:	2318      	movs	r3, #24
   2f0e0:	4632      	mov	r2, r6
   2f0e2:	f008 f81a 	bl	3711a <printk>
   2f0e6:	480e      	ldr	r0, [pc, #56]	; (2f120 <statics_init+0x54>)
   2f0e8:	f008 f817 	bl	3711a <printk>
   2f0ec:	2118      	movs	r1, #24
   2f0ee:	4630      	mov	r0, r6
   2f0f0:	f008 f9b9 	bl	37466 <assert_post_action>
   2f0f4:	42bc      	cmp	r4, r7
   2f0f6:	d301      	bcc.n	2f0fc <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2f0f8:	2000      	movs	r0, #0
   2f0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2f0fc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2f100:	4620      	mov	r0, r4
   2f102:	f00b f849 	bl	3a198 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2f106:	3418      	adds	r4, #24
   2f108:	e7e5      	b.n	2f0d6 <statics_init+0xa>
   2f10a:	bf00      	nop
   2f10c:	20000b70 	.word	0x20000b70
   2f110:	20000b58 	.word	0x20000b58
   2f114:	000411b8 	.word	0x000411b8
   2f118:	000411da 	.word	0x000411da
   2f11c:	0003c48a 	.word	0x0003c48a
   2f120:	0003d403 	.word	0x0003d403

0002f124 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2f124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f128:	b087      	sub	sp, #28
   2f12a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   2f12e:	4606      	mov	r6, r0
   2f130:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2f132:	4640      	mov	r0, r8
   2f134:	4649      	mov	r1, r9
{
   2f136:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2f138:	f00b f934 	bl	3a3a4 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2f13c:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2f140:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   2f144:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f148:	f3ef 8511 	mrs	r5, BASEPRI
   2f14c:	f383 8812 	msr	BASEPRI_MAX, r3
   2f150:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f154:	4620      	mov	r0, r4
   2f156:	f000 fb35 	bl	2f7c4 <z_spin_lock_valid>
   2f15a:	b968      	cbnz	r0, 2f178 <k_heap_aligned_alloc+0x54>
   2f15c:	4a3f      	ldr	r2, [pc, #252]	; (2f25c <k_heap_aligned_alloc+0x138>)
   2f15e:	4940      	ldr	r1, [pc, #256]	; (2f260 <k_heap_aligned_alloc+0x13c>)
   2f160:	4840      	ldr	r0, [pc, #256]	; (2f264 <k_heap_aligned_alloc+0x140>)
   2f162:	2381      	movs	r3, #129	; 0x81
   2f164:	f007 ffd9 	bl	3711a <printk>
   2f168:	483f      	ldr	r0, [pc, #252]	; (2f268 <k_heap_aligned_alloc+0x144>)
   2f16a:	4621      	mov	r1, r4
   2f16c:	f007 ffd5 	bl	3711a <printk>
   2f170:	483a      	ldr	r0, [pc, #232]	; (2f25c <k_heap_aligned_alloc+0x138>)
   2f172:	2181      	movs	r1, #129	; 0x81
   2f174:	f008 f977 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f178:	4620      	mov	r0, r4
   2f17a:	f000 fb41 	bl	2f800 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2f17e:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2f182:	b17b      	cbz	r3, 2f1a4 <k_heap_aligned_alloc+0x80>
   2f184:	ea58 0309 	orrs.w	r3, r8, r9
   2f188:	d00c      	beq.n	2f1a4 <k_heap_aligned_alloc+0x80>
   2f18a:	4938      	ldr	r1, [pc, #224]	; (2f26c <k_heap_aligned_alloc+0x148>)
   2f18c:	4a38      	ldr	r2, [pc, #224]	; (2f270 <k_heap_aligned_alloc+0x14c>)
   2f18e:	4835      	ldr	r0, [pc, #212]	; (2f264 <k_heap_aligned_alloc+0x140>)
   2f190:	2349      	movs	r3, #73	; 0x49
   2f192:	f007 ffc2 	bl	3711a <printk>
   2f196:	4837      	ldr	r0, [pc, #220]	; (2f274 <k_heap_aligned_alloc+0x150>)
   2f198:	f007 ffbf 	bl	3711a <printk>
   2f19c:	4834      	ldr	r0, [pc, #208]	; (2f270 <k_heap_aligned_alloc+0x14c>)
   2f19e:	2149      	movs	r1, #73	; 0x49
   2f1a0:	f008 f961 	bl	37466 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f1a4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2f25c <k_heap_aligned_alloc+0x138>
   2f1a8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2f260 <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2f1ac:	4652      	mov	r2, sl
   2f1ae:	4659      	mov	r1, fp
   2f1b0:	4630      	mov	r0, r6
   2f1b2:	f7f0 fc05 	bl	1f9c0 <sys_heap_aligned_alloc>
   2f1b6:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   2f1b8:	f003 f9d6 	bl	32568 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2f1bc:	b1cf      	cbz	r7, 2f1f2 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f1be:	4620      	mov	r0, r4
   2f1c0:	f000 fb0e 	bl	2f7e0 <z_spin_unlock_valid>
   2f1c4:	b968      	cbnz	r0, 2f1e2 <k_heap_aligned_alloc+0xbe>
   2f1c6:	4a25      	ldr	r2, [pc, #148]	; (2f25c <k_heap_aligned_alloc+0x138>)
   2f1c8:	492b      	ldr	r1, [pc, #172]	; (2f278 <k_heap_aligned_alloc+0x154>)
   2f1ca:	4826      	ldr	r0, [pc, #152]	; (2f264 <k_heap_aligned_alloc+0x140>)
   2f1cc:	23ac      	movs	r3, #172	; 0xac
   2f1ce:	f007 ffa4 	bl	3711a <printk>
   2f1d2:	482a      	ldr	r0, [pc, #168]	; (2f27c <k_heap_aligned_alloc+0x158>)
   2f1d4:	4621      	mov	r1, r4
   2f1d6:	f007 ffa0 	bl	3711a <printk>
   2f1da:	4820      	ldr	r0, [pc, #128]	; (2f25c <k_heap_aligned_alloc+0x138>)
   2f1dc:	21ac      	movs	r1, #172	; 0xac
   2f1de:	f008 f942 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2f1e2:	f385 8811 	msr	BASEPRI, r5
   2f1e6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2f1ea:	4638      	mov	r0, r7
   2f1ec:	b007      	add	sp, #28
   2f1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2f1f2:	9b04      	ldr	r3, [sp, #16]
   2f1f4:	1a1b      	subs	r3, r3, r0
   2f1f6:	9302      	str	r3, [sp, #8]
   2f1f8:	9b05      	ldr	r3, [sp, #20]
   2f1fa:	eb63 0301 	sbc.w	r3, r3, r1
   2f1fe:	9303      	str	r3, [sp, #12]
   2f200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2f204:	2a01      	cmp	r2, #1
   2f206:	f173 0300 	sbcs.w	r3, r3, #0
   2f20a:	dbd8      	blt.n	2f1be <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2f20c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2f210:	4629      	mov	r1, r5
   2f212:	e9cd 2300 	strd	r2, r3, [sp]
   2f216:	4620      	mov	r0, r4
   2f218:	f106 020c 	add.w	r2, r6, #12
   2f21c:	f002 f99c 	bl	31558 <z_pend_curr>
	__asm__ volatile(
   2f220:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f224:	f3ef 8511 	mrs	r5, BASEPRI
   2f228:	f383 8812 	msr	BASEPRI_MAX, r3
   2f22c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f230:	4620      	mov	r0, r4
   2f232:	f000 fac7 	bl	2f7c4 <z_spin_lock_valid>
   2f236:	b968      	cbnz	r0, 2f254 <k_heap_aligned_alloc+0x130>
   2f238:	480a      	ldr	r0, [pc, #40]	; (2f264 <k_heap_aligned_alloc+0x140>)
   2f23a:	2381      	movs	r3, #129	; 0x81
   2f23c:	4642      	mov	r2, r8
   2f23e:	4649      	mov	r1, r9
   2f240:	f007 ff6b 	bl	3711a <printk>
   2f244:	4808      	ldr	r0, [pc, #32]	; (2f268 <k_heap_aligned_alloc+0x144>)
   2f246:	4621      	mov	r1, r4
   2f248:	f007 ff67 	bl	3711a <printk>
   2f24c:	2181      	movs	r1, #129	; 0x81
   2f24e:	4640      	mov	r0, r8
   2f250:	f008 f909 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f254:	4620      	mov	r0, r4
   2f256:	f000 fad3 	bl	2f800 <z_spin_lock_set_owner>
	return k;
   2f25a:	e7a7      	b.n	2f1ac <k_heap_aligned_alloc+0x88>
   2f25c:	0003cd09 	.word	0x0003cd09
   2f260:	0003cd5b 	.word	0x0003cd5b
   2f264:	0003c48a 	.word	0x0003c48a
   2f268:	0003cd70 	.word	0x0003cd70
   2f26c:	000411f0 	.word	0x000411f0
   2f270:	000411b8 	.word	0x000411b8
   2f274:	0003cae0 	.word	0x0003cae0
   2f278:	0003cd2f 	.word	0x0003cd2f
   2f27c:	0003cd46 	.word	0x0003cd46

0002f280 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2f280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f282:	4605      	mov	r5, r0
   2f284:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2f286:	f100 0414 	add.w	r4, r0, #20
   2f28a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f28e:	f3ef 8711 	mrs	r7, BASEPRI
   2f292:	f383 8812 	msr	BASEPRI_MAX, r3
   2f296:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f29a:	4620      	mov	r0, r4
   2f29c:	f000 fa92 	bl	2f7c4 <z_spin_lock_valid>
   2f2a0:	b968      	cbnz	r0, 2f2be <k_heap_free+0x3e>
   2f2a2:	4a1b      	ldr	r2, [pc, #108]	; (2f310 <k_heap_free+0x90>)
   2f2a4:	491b      	ldr	r1, [pc, #108]	; (2f314 <k_heap_free+0x94>)
   2f2a6:	481c      	ldr	r0, [pc, #112]	; (2f318 <k_heap_free+0x98>)
   2f2a8:	2381      	movs	r3, #129	; 0x81
   2f2aa:	f007 ff36 	bl	3711a <printk>
   2f2ae:	481b      	ldr	r0, [pc, #108]	; (2f31c <k_heap_free+0x9c>)
   2f2b0:	4621      	mov	r1, r4
   2f2b2:	f007 ff32 	bl	3711a <printk>
   2f2b6:	4816      	ldr	r0, [pc, #88]	; (2f310 <k_heap_free+0x90>)
   2f2b8:	2181      	movs	r1, #129	; 0x81
   2f2ba:	f008 f8d4 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f2be:	4620      	mov	r0, r4
   2f2c0:	f000 fa9e 	bl	2f800 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2f2c4:	4628      	mov	r0, r5
   2f2c6:	4631      	mov	r1, r6
   2f2c8:	f7f0 fb2e 	bl	1f928 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2f2cc:	f105 000c 	add.w	r0, r5, #12
   2f2d0:	f00b f850 	bl	3a374 <z_unpend_all>
   2f2d4:	b128      	cbz	r0, 2f2e2 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   2f2d6:	4639      	mov	r1, r7
   2f2d8:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2f2da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   2f2de:	f001 bce9 	b.w	30cb4 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f2e2:	4620      	mov	r0, r4
   2f2e4:	f000 fa7c 	bl	2f7e0 <z_spin_unlock_valid>
   2f2e8:	b968      	cbnz	r0, 2f306 <k_heap_free+0x86>
   2f2ea:	4a09      	ldr	r2, [pc, #36]	; (2f310 <k_heap_free+0x90>)
   2f2ec:	490c      	ldr	r1, [pc, #48]	; (2f320 <k_heap_free+0xa0>)
   2f2ee:	480a      	ldr	r0, [pc, #40]	; (2f318 <k_heap_free+0x98>)
   2f2f0:	23ac      	movs	r3, #172	; 0xac
   2f2f2:	f007 ff12 	bl	3711a <printk>
   2f2f6:	480b      	ldr	r0, [pc, #44]	; (2f324 <k_heap_free+0xa4>)
   2f2f8:	4621      	mov	r1, r4
   2f2fa:	f007 ff0e 	bl	3711a <printk>
   2f2fe:	4804      	ldr	r0, [pc, #16]	; (2f310 <k_heap_free+0x90>)
   2f300:	21ac      	movs	r1, #172	; 0xac
   2f302:	f008 f8b0 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2f306:	f387 8811 	msr	BASEPRI, r7
   2f30a:	f3bf 8f6f 	isb	sy
}
   2f30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f310:	0003cd09 	.word	0x0003cd09
   2f314:	0003cd5b 	.word	0x0003cd5b
   2f318:	0003c48a 	.word	0x0003c48a
   2f31c:	0003cd70 	.word	0x0003cd70
   2f320:	0003cd2f 	.word	0x0003cd2f
   2f324:	0003cd46 	.word	0x0003cd46

0002f328 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   2f328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2f32c:	4d16      	ldr	r5, [pc, #88]	; (2f388 <init_mem_slab_module+0x60>)
   2f32e:	4c17      	ldr	r4, [pc, #92]	; (2f38c <init_mem_slab_module+0x64>)
   2f330:	4e17      	ldr	r6, [pc, #92]	; (2f390 <init_mem_slab_module+0x68>)
   2f332:	46a8      	mov	r8, r5
   2f334:	42ac      	cmp	r4, r5
   2f336:	d90c      	bls.n	2f352 <init_mem_slab_module+0x2a>
   2f338:	4916      	ldr	r1, [pc, #88]	; (2f394 <init_mem_slab_module+0x6c>)
   2f33a:	4817      	ldr	r0, [pc, #92]	; (2f398 <init_mem_slab_module+0x70>)
   2f33c:	233c      	movs	r3, #60	; 0x3c
   2f33e:	4632      	mov	r2, r6
   2f340:	f007 feeb 	bl	3711a <printk>
   2f344:	4815      	ldr	r0, [pc, #84]	; (2f39c <init_mem_slab_module+0x74>)
   2f346:	f007 fee8 	bl	3711a <printk>
   2f34a:	213c      	movs	r1, #60	; 0x3c
   2f34c:	4630      	mov	r0, r6
   2f34e:	f008 f88a 	bl	37466 <assert_post_action>
   2f352:	4544      	cmp	r4, r8
   2f354:	d302      	bcc.n	2f35c <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   2f356:	2000      	movs	r0, #0
	return rc;
}
   2f358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2f35c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   2f360:	ea41 0302 	orr.w	r3, r1, r2
   2f364:	f013 0303 	ands.w	r3, r3, #3
   2f368:	d10b      	bne.n	2f382 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   2f36a:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   2f36c:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2f36e:	4283      	cmp	r3, r0
   2f370:	d101      	bne.n	2f376 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2f372:	3420      	adds	r4, #32
   2f374:	e7de      	b.n	2f334 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   2f376:	69a7      	ldr	r7, [r4, #24]
   2f378:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2f37a:	3301      	adds	r3, #1
		slab->free_list = p;
   2f37c:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   2f37e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2f380:	e7f5      	b.n	2f36e <init_mem_slab_module+0x46>
		return -EINVAL;
   2f382:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2f386:	e7e7      	b.n	2f358 <init_mem_slab_module+0x30>
   2f388:	20000b58 	.word	0x20000b58
   2f38c:	20000ab8 	.word	0x20000ab8
   2f390:	00041235 	.word	0x00041235
   2f394:	0004125a 	.word	0x0004125a
   2f398:	0003c48a 	.word	0x0003c48a
   2f39c:	0003d403 	.word	0x0003d403

0002f3a0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2f3a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2f3a4:	4604      	mov	r4, r0
   2f3a6:	460e      	mov	r6, r1
   2f3a8:	4690      	mov	r8, r2
   2f3aa:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   2f3ac:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2f3b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f3b4:	f3ef 8711 	mrs	r7, BASEPRI
   2f3b8:	f383 8812 	msr	BASEPRI_MAX, r3
   2f3bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f3c0:	4628      	mov	r0, r5
   2f3c2:	f000 f9ff 	bl	2f7c4 <z_spin_lock_valid>
   2f3c6:	b968      	cbnz	r0, 2f3e4 <k_mem_slab_alloc+0x44>
   2f3c8:	4a24      	ldr	r2, [pc, #144]	; (2f45c <k_mem_slab_alloc+0xbc>)
   2f3ca:	4925      	ldr	r1, [pc, #148]	; (2f460 <k_mem_slab_alloc+0xc0>)
   2f3cc:	4825      	ldr	r0, [pc, #148]	; (2f464 <k_mem_slab_alloc+0xc4>)
   2f3ce:	2381      	movs	r3, #129	; 0x81
   2f3d0:	f007 fea3 	bl	3711a <printk>
   2f3d4:	4824      	ldr	r0, [pc, #144]	; (2f468 <k_mem_slab_alloc+0xc8>)
   2f3d6:	4629      	mov	r1, r5
   2f3d8:	f007 fe9f 	bl	3711a <printk>
   2f3dc:	481f      	ldr	r0, [pc, #124]	; (2f45c <k_mem_slab_alloc+0xbc>)
   2f3de:	2181      	movs	r1, #129	; 0x81
   2f3e0:	f008 f841 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f3e4:	4628      	mov	r0, r5
   2f3e6:	f000 fa0b 	bl	2f800 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2f3ea:	69a3      	ldr	r3, [r4, #24]
   2f3ec:	b1eb      	cbz	r3, 2f42a <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   2f3ee:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   2f3f0:	681b      	ldr	r3, [r3, #0]
   2f3f2:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   2f3f4:	69e3      	ldr	r3, [r4, #28]
   2f3f6:	3301      	adds	r3, #1
   2f3f8:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2f3fa:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f3fc:	4628      	mov	r0, r5
   2f3fe:	f000 f9ef 	bl	2f7e0 <z_spin_unlock_valid>
   2f402:	b968      	cbnz	r0, 2f420 <k_mem_slab_alloc+0x80>
   2f404:	4a15      	ldr	r2, [pc, #84]	; (2f45c <k_mem_slab_alloc+0xbc>)
   2f406:	4919      	ldr	r1, [pc, #100]	; (2f46c <k_mem_slab_alloc+0xcc>)
   2f408:	4816      	ldr	r0, [pc, #88]	; (2f464 <k_mem_slab_alloc+0xc4>)
   2f40a:	23ac      	movs	r3, #172	; 0xac
   2f40c:	f007 fe85 	bl	3711a <printk>
   2f410:	4817      	ldr	r0, [pc, #92]	; (2f470 <k_mem_slab_alloc+0xd0>)
   2f412:	4629      	mov	r1, r5
   2f414:	f007 fe81 	bl	3711a <printk>
   2f418:	4810      	ldr	r0, [pc, #64]	; (2f45c <k_mem_slab_alloc+0xbc>)
   2f41a:	21ac      	movs	r1, #172	; 0xac
   2f41c:	f008 f823 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2f420:	f387 8811 	msr	BASEPRI, r7
   2f424:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   2f428:	e013      	b.n	2f452 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   2f42a:	ea58 0209 	orrs.w	r2, r8, r9
   2f42e:	d103      	bne.n	2f438 <k_mem_slab_alloc+0x98>
		*mem = NULL;
   2f430:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   2f432:	f06f 040b 	mvn.w	r4, #11
   2f436:	e7e1      	b.n	2f3fc <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2f438:	4622      	mov	r2, r4
   2f43a:	e9cd 8900 	strd	r8, r9, [sp]
   2f43e:	4639      	mov	r1, r7
   2f440:	4628      	mov	r0, r5
   2f442:	f002 f889 	bl	31558 <z_pend_curr>
		if (result == 0) {
   2f446:	4604      	mov	r4, r0
   2f448:	b918      	cbnz	r0, 2f452 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   2f44a:	4b0a      	ldr	r3, [pc, #40]	; (2f474 <k_mem_slab_alloc+0xd4>)
   2f44c:	689b      	ldr	r3, [r3, #8]
   2f44e:	695b      	ldr	r3, [r3, #20]
   2f450:	6033      	str	r3, [r6, #0]
}
   2f452:	4620      	mov	r0, r4
   2f454:	b003      	add	sp, #12
   2f456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f45a:	bf00      	nop
   2f45c:	0003cd09 	.word	0x0003cd09
   2f460:	0003cd5b 	.word	0x0003cd5b
   2f464:	0003c48a 	.word	0x0003c48a
   2f468:	0003cd70 	.word	0x0003cd70
   2f46c:	0003cd2f 	.word	0x0003cd2f
   2f470:	0003cd46 	.word	0x0003cd46
   2f474:	20002d00 	.word	0x20002d00

0002f478 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2f478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f47c:	4604      	mov	r4, r0
   2f47e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   2f480:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2f484:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f488:	f3ef 8711 	mrs	r7, BASEPRI
   2f48c:	f383 8812 	msr	BASEPRI_MAX, r3
   2f490:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f494:	4628      	mov	r0, r5
   2f496:	f000 f995 	bl	2f7c4 <z_spin_lock_valid>
   2f49a:	b968      	cbnz	r0, 2f4b8 <k_mem_slab_free+0x40>
   2f49c:	4a22      	ldr	r2, [pc, #136]	; (2f528 <k_mem_slab_free+0xb0>)
   2f49e:	4923      	ldr	r1, [pc, #140]	; (2f52c <k_mem_slab_free+0xb4>)
   2f4a0:	4823      	ldr	r0, [pc, #140]	; (2f530 <k_mem_slab_free+0xb8>)
   2f4a2:	2381      	movs	r3, #129	; 0x81
   2f4a4:	f007 fe39 	bl	3711a <printk>
   2f4a8:	4822      	ldr	r0, [pc, #136]	; (2f534 <k_mem_slab_free+0xbc>)
   2f4aa:	4629      	mov	r1, r5
   2f4ac:	f007 fe35 	bl	3711a <printk>
   2f4b0:	481d      	ldr	r0, [pc, #116]	; (2f528 <k_mem_slab_free+0xb0>)
   2f4b2:	2181      	movs	r1, #129	; 0x81
   2f4b4:	f007 ffd7 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f4b8:	4628      	mov	r0, r5
   2f4ba:	f000 f9a1 	bl	2f800 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2f4be:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2f4c2:	f1b8 0f00 	cmp.w	r8, #0
   2f4c6:	d10f      	bne.n	2f4e8 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2f4c8:	4620      	mov	r0, r4
   2f4ca:	f002 fa43 	bl	31954 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2f4ce:	b158      	cbz	r0, 2f4e8 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2f4d0:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2f4d2:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2f4d4:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2f4d8:	f001 fe8c 	bl	311f4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2f4dc:	4639      	mov	r1, r7
   2f4de:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2f4e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   2f4e4:	f001 bbe6 	b.w	30cb4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2f4e8:	6833      	ldr	r3, [r6, #0]
   2f4ea:	69a2      	ldr	r2, [r4, #24]
   2f4ec:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2f4ee:	6833      	ldr	r3, [r6, #0]
   2f4f0:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   2f4f2:	69e3      	ldr	r3, [r4, #28]
   2f4f4:	3b01      	subs	r3, #1
   2f4f6:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f4f8:	4628      	mov	r0, r5
   2f4fa:	f000 f971 	bl	2f7e0 <z_spin_unlock_valid>
   2f4fe:	b968      	cbnz	r0, 2f51c <k_mem_slab_free+0xa4>
   2f500:	4a09      	ldr	r2, [pc, #36]	; (2f528 <k_mem_slab_free+0xb0>)
   2f502:	490d      	ldr	r1, [pc, #52]	; (2f538 <k_mem_slab_free+0xc0>)
   2f504:	480a      	ldr	r0, [pc, #40]	; (2f530 <k_mem_slab_free+0xb8>)
   2f506:	23ac      	movs	r3, #172	; 0xac
   2f508:	f007 fe07 	bl	3711a <printk>
   2f50c:	480b      	ldr	r0, [pc, #44]	; (2f53c <k_mem_slab_free+0xc4>)
   2f50e:	4629      	mov	r1, r5
   2f510:	f007 fe03 	bl	3711a <printk>
   2f514:	4804      	ldr	r0, [pc, #16]	; (2f528 <k_mem_slab_free+0xb0>)
   2f516:	21ac      	movs	r1, #172	; 0xac
   2f518:	f007 ffa5 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2f51c:	f387 8811 	msr	BASEPRI, r7
   2f520:	f3bf 8f6f 	isb	sy
}
   2f524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f528:	0003cd09 	.word	0x0003cd09
   2f52c:	0003cd5b 	.word	0x0003cd5b
   2f530:	0003c48a 	.word	0x0003c48a
   2f534:	0003cd70 	.word	0x0003cd70
   2f538:	0003cd2f 	.word	0x0003cd2f
   2f53c:	0003cd46 	.word	0x0003cd46

0002f540 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2f540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f544:	b085      	sub	sp, #20
   2f546:	4604      	mov	r4, r0
   2f548:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   2f54c:	f1b8 0f0f 	cmp.w	r8, #15
{
   2f550:	460f      	mov	r7, r1
   2f552:	4615      	mov	r5, r2
   2f554:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   2f556:	d132      	bne.n	2f5be <z_setup_new_thread+0x7e>
   2f558:	4b25      	ldr	r3, [pc, #148]	; (2f5f0 <z_setup_new_thread+0xb0>)
   2f55a:	4599      	cmp	r9, r3
   2f55c:	d133      	bne.n	2f5c6 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2f55e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2f562:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2f566:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2f568:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2f56a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   2f56c:	2304      	movs	r3, #4
   2f56e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2f570:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2f574:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   2f578:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2f57c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   2f57e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2f582:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2f584:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2f588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2f58a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   2f58c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2f58e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2f590:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   2f592:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2f594:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2f596:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   2f59a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   2f59c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   2f59e:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2f5a0:	4642      	mov	r2, r8
   2f5a2:	4639      	mov	r1, r7
   2f5a4:	4620      	mov	r0, r4
   2f5a6:	f7f2 ff13 	bl	223d0 <arch_new_thread>
	if (!_current) {
   2f5aa:	4b12      	ldr	r3, [pc, #72]	; (2f5f4 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
   2f5ac:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   2f5ae:	689b      	ldr	r3, [r3, #8]
   2f5b0:	b103      	cbz	r3, 2f5b4 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   2f5b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   2f5b4:	6763      	str	r3, [r4, #116]	; 0x74
}
   2f5b6:	4640      	mov	r0, r8
   2f5b8:	b005      	add	sp, #20
   2f5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   2f5be:	f108 0310 	add.w	r3, r8, #16
   2f5c2:	2b1e      	cmp	r3, #30
   2f5c4:	d9cb      	bls.n	2f55e <z_setup_new_thread+0x1e>
   2f5c6:	4a0c      	ldr	r2, [pc, #48]	; (2f5f8 <z_setup_new_thread+0xb8>)
   2f5c8:	490c      	ldr	r1, [pc, #48]	; (2f5fc <z_setup_new_thread+0xbc>)
   2f5ca:	480d      	ldr	r0, [pc, #52]	; (2f600 <z_setup_new_thread+0xc0>)
   2f5cc:	f240 13ff 	movw	r3, #511	; 0x1ff
   2f5d0:	f007 fda3 	bl	3711a <printk>
   2f5d4:	4641      	mov	r1, r8
   2f5d6:	480b      	ldr	r0, [pc, #44]	; (2f604 <z_setup_new_thread+0xc4>)
   2f5d8:	f06f 030f 	mvn.w	r3, #15
   2f5dc:	220e      	movs	r2, #14
   2f5de:	f007 fd9c 	bl	3711a <printk>
   2f5e2:	4805      	ldr	r0, [pc, #20]	; (2f5f8 <z_setup_new_thread+0xb8>)
   2f5e4:	f240 11ff 	movw	r1, #511	; 0x1ff
   2f5e8:	f007 ff3d 	bl	37466 <assert_post_action>
   2f5ec:	e7b7      	b.n	2f55e <z_setup_new_thread+0x1e>
   2f5ee:	bf00      	nop
   2f5f0:	0002f811 	.word	0x0002f811
   2f5f4:	20002d00 	.word	0x20002d00
   2f5f8:	00041277 	.word	0x00041277
   2f5fc:	0004129a 	.word	0x0004129a
   2f600:	0003c48a 	.word	0x0003c48a
   2f604:	0004131a 	.word	0x0004131a

0002f608 <z_impl_k_thread_create>:
{
   2f608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f60c:	b087      	sub	sp, #28
   2f60e:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   2f612:	4604      	mov	r4, r0
   2f614:	460d      	mov	r5, r1
   2f616:	4690      	mov	r8, r2
   2f618:	4699      	mov	r9, r3
   2f61a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2f61e:	b173      	cbz	r3, 2f63e <z_impl_k_thread_create+0x36>
   2f620:	491b      	ldr	r1, [pc, #108]	; (2f690 <z_impl_k_thread_create+0x88>)
   2f622:	4a1c      	ldr	r2, [pc, #112]	; (2f694 <z_impl_k_thread_create+0x8c>)
   2f624:	481c      	ldr	r0, [pc, #112]	; (2f698 <z_impl_k_thread_create+0x90>)
   2f626:	f44f 731a 	mov.w	r3, #616	; 0x268
   2f62a:	f007 fd76 	bl	3711a <printk>
   2f62e:	481b      	ldr	r0, [pc, #108]	; (2f69c <z_impl_k_thread_create+0x94>)
   2f630:	f007 fd73 	bl	3711a <printk>
   2f634:	4817      	ldr	r0, [pc, #92]	; (2f694 <z_impl_k_thread_create+0x8c>)
   2f636:	f44f 711a 	mov.w	r1, #616	; 0x268
   2f63a:	f007 ff14 	bl	37466 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2f63e:	2300      	movs	r3, #0
   2f640:	9305      	str	r3, [sp, #20]
   2f642:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2f644:	9304      	str	r3, [sp, #16]
   2f646:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2f648:	9303      	str	r3, [sp, #12]
   2f64a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2f64c:	9302      	str	r3, [sp, #8]
   2f64e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2f650:	9301      	str	r3, [sp, #4]
   2f652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f654:	9300      	str	r3, [sp, #0]
   2f656:	4642      	mov	r2, r8
   2f658:	464b      	mov	r3, r9
   2f65a:	4629      	mov	r1, r5
   2f65c:	4620      	mov	r0, r4
   2f65e:	f7ff ff6f 	bl	2f540 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2f662:	1c7b      	adds	r3, r7, #1
   2f664:	bf08      	it	eq
   2f666:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2f66a:	d005      	beq.n	2f678 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2f66c:	ea56 0307 	orrs.w	r3, r6, r7
   2f670:	d106      	bne.n	2f680 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   2f672:	4620      	mov	r0, r4
   2f674:	f001 fe06 	bl	31284 <z_sched_start>
}
   2f678:	4620      	mov	r0, r4
   2f67a:	b007      	add	sp, #28
   2f67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2f680:	4907      	ldr	r1, [pc, #28]	; (2f6a0 <z_impl_k_thread_create+0x98>)
   2f682:	4632      	mov	r2, r6
   2f684:	463b      	mov	r3, r7
   2f686:	f104 0018 	add.w	r0, r4, #24
   2f68a:	f002 fce7 	bl	3205c <z_add_timeout>
   2f68e:	e7f3      	b.n	2f678 <z_impl_k_thread_create+0x70>
   2f690:	0004134b 	.word	0x0004134b
   2f694:	00041277 	.word	0x00041277
   2f698:	0003c48a 	.word	0x0003c48a
   2f69c:	0004135d 	.word	0x0004135d
   2f6a0:	0003132d 	.word	0x0003132d

0002f6a4 <z_init_static_threads>:
{
   2f6a4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2f6a8:	4f3f      	ldr	r7, [pc, #252]	; (2f7a8 <z_init_static_threads+0x104>)
   2f6aa:	4d40      	ldr	r5, [pc, #256]	; (2f7ac <z_init_static_threads+0x108>)
   2f6ac:	f8df 810c 	ldr.w	r8, [pc, #268]	; 2f7bc <z_init_static_threads+0x118>
{
   2f6b0:	b086      	sub	sp, #24
   2f6b2:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   2f6b4:	42bd      	cmp	r5, r7
   2f6b6:	d90e      	bls.n	2f6d6 <z_init_static_threads+0x32>
   2f6b8:	493d      	ldr	r1, [pc, #244]	; (2f7b0 <z_init_static_threads+0x10c>)
   2f6ba:	483e      	ldr	r0, [pc, #248]	; (2f7b4 <z_init_static_threads+0x110>)
   2f6bc:	f240 23cf 	movw	r3, #719	; 0x2cf
   2f6c0:	4642      	mov	r2, r8
   2f6c2:	f007 fd2a 	bl	3711a <printk>
   2f6c6:	483c      	ldr	r0, [pc, #240]	; (2f7b8 <z_init_static_threads+0x114>)
   2f6c8:	f007 fd27 	bl	3711a <printk>
   2f6cc:	f240 21cf 	movw	r1, #719	; 0x2cf
   2f6d0:	4640      	mov	r0, r8
   2f6d2:	f007 fec8 	bl	37466 <assert_post_action>
   2f6d6:	42b5      	cmp	r5, r6
   2f6d8:	f105 0430 	add.w	r4, r5, #48	; 0x30
   2f6dc:	d31f      	bcc.n	2f71e <z_init_static_threads+0x7a>
	k_sched_lock();
   2f6de:	f001 fb2d 	bl	30d3c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2f6e2:	4c32      	ldr	r4, [pc, #200]	; (2f7ac <z_init_static_threads+0x108>)
   2f6e4:	4d35      	ldr	r5, [pc, #212]	; (2f7bc <z_init_static_threads+0x118>)
   2f6e6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 2f7b0 <z_init_static_threads+0x10c>
   2f6ea:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 2f7b4 <z_init_static_threads+0x110>
   2f6ee:	42b4      	cmp	r4, r6
   2f6f0:	d90e      	bls.n	2f710 <z_init_static_threads+0x6c>
   2f6f2:	4641      	mov	r1, r8
   2f6f4:	f240 23ee 	movw	r3, #750	; 0x2ee
   2f6f8:	462a      	mov	r2, r5
   2f6fa:	4648      	mov	r0, r9
   2f6fc:	f007 fd0d 	bl	3711a <printk>
   2f700:	482d      	ldr	r0, [pc, #180]	; (2f7b8 <z_init_static_threads+0x114>)
   2f702:	f007 fd0a 	bl	3711a <printk>
   2f706:	f240 21ee 	movw	r1, #750	; 0x2ee
   2f70a:	4628      	mov	r0, r5
   2f70c:	f007 feab 	bl	37466 <assert_post_action>
   2f710:	42b4      	cmp	r4, r6
   2f712:	d321      	bcc.n	2f758 <z_init_static_threads+0xb4>
}
   2f714:	b006      	add	sp, #24
   2f716:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   2f71a:	f002 b853 	b.w	317c4 <k_sched_unlock>
		z_setup_new_thread(
   2f71e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2f722:	9305      	str	r3, [sp, #20]
   2f724:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2f728:	9304      	str	r3, [sp, #16]
   2f72a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2f72e:	9303      	str	r3, [sp, #12]
   2f730:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2f734:	9302      	str	r3, [sp, #8]
   2f736:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2f73a:	9301      	str	r3, [sp, #4]
   2f73c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2f740:	9300      	str	r3, [sp, #0]
   2f742:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2f746:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2f74a:	f7ff fef9 	bl	2f540 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2f74e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2f752:	655d      	str	r5, [r3, #84]	; 0x54
   2f754:	4625      	mov	r5, r4
   2f756:	e7ad      	b.n	2f6b4 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2f758:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2f75a:	1c4b      	adds	r3, r1, #1
   2f75c:	d014      	beq.n	2f788 <z_init_static_threads+0xe4>
   2f75e:	f240 32e7 	movw	r2, #999	; 0x3e7
   2f762:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
   2f764:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2f768:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2f76c:	4693      	mov	fp, r2
   2f76e:	469c      	mov	ip, r3
   2f770:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2f774:	459c      	cmp	ip, r3
   2f776:	bf08      	it	eq
   2f778:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   2f77a:	6827      	ldr	r7, [r4, #0]
   2f77c:	4658      	mov	r0, fp
   2f77e:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2f780:	d104      	bne.n	2f78c <z_init_static_threads+0xe8>
	z_sched_start(thread);
   2f782:	4638      	mov	r0, r7
   2f784:	f001 fd7e 	bl	31284 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2f788:	3430      	adds	r4, #48	; 0x30
   2f78a:	e7b0      	b.n	2f6ee <z_init_static_threads+0x4a>
   2f78c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f790:	2300      	movs	r3, #0
   2f792:	f7dd f9d3 	bl	cb3c <__aeabi_uldivmod>
   2f796:	4602      	mov	r2, r0
   2f798:	460b      	mov	r3, r1
   2f79a:	f107 0018 	add.w	r0, r7, #24
   2f79e:	4908      	ldr	r1, [pc, #32]	; (2f7c0 <z_init_static_threads+0x11c>)
   2f7a0:	f002 fc5c 	bl	3205c <z_add_timeout>
   2f7a4:	e7f0      	b.n	2f788 <z_init_static_threads+0xe4>
   2f7a6:	bf00      	nop
   2f7a8:	20000a44 	.word	0x20000a44
   2f7ac:	20000a44 	.word	0x20000a44
   2f7b0:	00041382 	.word	0x00041382
   2f7b4:	0003c48a 	.word	0x0003c48a
   2f7b8:	0003d403 	.word	0x0003d403
   2f7bc:	00041277 	.word	0x00041277
   2f7c0:	0003132d 	.word	0x0003132d

0002f7c4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   2f7c4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2f7c6:	b138      	cbz	r0, 2f7d8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   2f7c8:	4b04      	ldr	r3, [pc, #16]	; (2f7dc <z_spin_lock_valid+0x18>)
   2f7ca:	7d1b      	ldrb	r3, [r3, #20]
   2f7cc:	f000 0003 	and.w	r0, r0, #3
   2f7d0:	1ac0      	subs	r0, r0, r3
   2f7d2:	bf18      	it	ne
   2f7d4:	2001      	movne	r0, #1
   2f7d6:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2f7d8:	2001      	movs	r0, #1
}
   2f7da:	4770      	bx	lr
   2f7dc:	20002d00 	.word	0x20002d00

0002f7e0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2f7e0:	4906      	ldr	r1, [pc, #24]	; (2f7fc <z_spin_unlock_valid+0x1c>)
{
   2f7e2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2f7e4:	688a      	ldr	r2, [r1, #8]
   2f7e6:	7d08      	ldrb	r0, [r1, #20]
   2f7e8:	6819      	ldr	r1, [r3, #0]
   2f7ea:	4302      	orrs	r2, r0
   2f7ec:	4291      	cmp	r1, r2
   2f7ee:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   2f7f2:	bf04      	itt	eq
   2f7f4:	6018      	streq	r0, [r3, #0]
	return true;
   2f7f6:	2001      	moveq	r0, #1
}
   2f7f8:	4770      	bx	lr
   2f7fa:	bf00      	nop
   2f7fc:	20002d00 	.word	0x20002d00

0002f800 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   2f800:	4a02      	ldr	r2, [pc, #8]	; (2f80c <z_spin_lock_set_owner+0xc>)
   2f802:	7d11      	ldrb	r1, [r2, #20]
   2f804:	6893      	ldr	r3, [r2, #8]
   2f806:	430b      	orrs	r3, r1
   2f808:	6003      	str	r3, [r0, #0]
}
   2f80a:	4770      	bx	lr
   2f80c:	20002d00 	.word	0x20002d00

0002f810 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   2f810:	4c11      	ldr	r4, [pc, #68]	; (2f858 <idle+0x48>)
   2f812:	68a2      	ldr	r2, [r4, #8]
   2f814:	f992 200e 	ldrsb.w	r2, [r2, #14]
   2f818:	2a00      	cmp	r2, #0
{
   2f81a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   2f81c:	da09      	bge.n	2f832 <idle+0x22>
   2f81e:	490f      	ldr	r1, [pc, #60]	; (2f85c <idle+0x4c>)
   2f820:	480f      	ldr	r0, [pc, #60]	; (2f860 <idle+0x50>)
   2f822:	4a10      	ldr	r2, [pc, #64]	; (2f864 <idle+0x54>)
   2f824:	2327      	movs	r3, #39	; 0x27
   2f826:	f007 fc78 	bl	3711a <printk>
   2f82a:	480e      	ldr	r0, [pc, #56]	; (2f864 <idle+0x54>)
   2f82c:	2127      	movs	r1, #39	; 0x27
   2f82e:	f007 fe1a 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2f832:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f836:	f3ef 8311 	mrs	r3, BASEPRI
   2f83a:	f382 8812 	msr	BASEPRI_MAX, r2
   2f83e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2f842:	f002 fd2d 	bl	322a0 <z_get_next_timeout_expiry>
   2f846:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   2f848:	f7f2 fa2a 	bl	21ca0 <pm_system_suspend>
   2f84c:	2800      	cmp	r0, #0
   2f84e:	d1f0      	bne.n	2f832 <idle+0x22>
	arch_cpu_idle();
   2f850:	f7f2 fc82 	bl	22158 <arch_cpu_idle>
}
   2f854:	e7ed      	b.n	2f832 <idle+0x22>
   2f856:	bf00      	nop
   2f858:	20002d00 	.word	0x20002d00
   2f85c:	000413d0 	.word	0x000413d0
   2f860:	0003c48a 	.word	0x0003c48a
   2f864:	000413af 	.word	0x000413af

0002f868 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2f868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f86c:	4604      	mov	r4, r0
   2f86e:	4616      	mov	r6, r2
   2f870:	461f      	mov	r7, r3
   2f872:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2f876:	b163      	cbz	r3, 2f892 <z_impl_k_mutex_lock+0x2a>
   2f878:	4970      	ldr	r1, [pc, #448]	; (2fa3c <z_impl_k_mutex_lock+0x1d4>)
   2f87a:	4a71      	ldr	r2, [pc, #452]	; (2fa40 <z_impl_k_mutex_lock+0x1d8>)
   2f87c:	4871      	ldr	r0, [pc, #452]	; (2fa44 <z_impl_k_mutex_lock+0x1dc>)
   2f87e:	2365      	movs	r3, #101	; 0x65
   2f880:	f007 fc4b 	bl	3711a <printk>
   2f884:	4870      	ldr	r0, [pc, #448]	; (2fa48 <z_impl_k_mutex_lock+0x1e0>)
   2f886:	f007 fc48 	bl	3711a <printk>
   2f88a:	486d      	ldr	r0, [pc, #436]	; (2fa40 <z_impl_k_mutex_lock+0x1d8>)
   2f88c:	2165      	movs	r1, #101	; 0x65
   2f88e:	f007 fdea 	bl	37466 <assert_post_action>
   2f892:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f896:	f3ef 8811 	mrs	r8, BASEPRI
   2f89a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f89e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f8a2:	486a      	ldr	r0, [pc, #424]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2f8a4:	f7ff ff8e 	bl	2f7c4 <z_spin_lock_valid>
   2f8a8:	b968      	cbnz	r0, 2f8c6 <z_impl_k_mutex_lock+0x5e>
   2f8aa:	4a69      	ldr	r2, [pc, #420]	; (2fa50 <z_impl_k_mutex_lock+0x1e8>)
   2f8ac:	4969      	ldr	r1, [pc, #420]	; (2fa54 <z_impl_k_mutex_lock+0x1ec>)
   2f8ae:	4865      	ldr	r0, [pc, #404]	; (2fa44 <z_impl_k_mutex_lock+0x1dc>)
   2f8b0:	2381      	movs	r3, #129	; 0x81
   2f8b2:	f007 fc32 	bl	3711a <printk>
   2f8b6:	4965      	ldr	r1, [pc, #404]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2f8b8:	4867      	ldr	r0, [pc, #412]	; (2fa58 <z_impl_k_mutex_lock+0x1f0>)
   2f8ba:	f007 fc2e 	bl	3711a <printk>
   2f8be:	4864      	ldr	r0, [pc, #400]	; (2fa50 <z_impl_k_mutex_lock+0x1e8>)
   2f8c0:	2181      	movs	r1, #129	; 0x81
   2f8c2:	f007 fdd0 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f8c6:	4861      	ldr	r0, [pc, #388]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2f8c8:	f7ff ff9a 	bl	2f800 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2f8cc:	68e3      	ldr	r3, [r4, #12]
   2f8ce:	4a63      	ldr	r2, [pc, #396]	; (2fa5c <z_impl_k_mutex_lock+0x1f4>)
   2f8d0:	b1fb      	cbz	r3, 2f912 <z_impl_k_mutex_lock+0xaa>
   2f8d2:	68a0      	ldr	r0, [r4, #8]
   2f8d4:	6891      	ldr	r1, [r2, #8]
   2f8d6:	4288      	cmp	r0, r1
   2f8d8:	d03d      	beq.n	2f956 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2f8da:	ea56 0307 	orrs.w	r3, r6, r7
   2f8de:	d13c      	bne.n	2f95a <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f8e0:	485a      	ldr	r0, [pc, #360]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2f8e2:	f7ff ff7d 	bl	2f7e0 <z_spin_unlock_valid>
   2f8e6:	b968      	cbnz	r0, 2f904 <z_impl_k_mutex_lock+0x9c>
   2f8e8:	4a59      	ldr	r2, [pc, #356]	; (2fa50 <z_impl_k_mutex_lock+0x1e8>)
   2f8ea:	495d      	ldr	r1, [pc, #372]	; (2fa60 <z_impl_k_mutex_lock+0x1f8>)
   2f8ec:	4855      	ldr	r0, [pc, #340]	; (2fa44 <z_impl_k_mutex_lock+0x1dc>)
   2f8ee:	23ac      	movs	r3, #172	; 0xac
   2f8f0:	f007 fc13 	bl	3711a <printk>
   2f8f4:	4955      	ldr	r1, [pc, #340]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2f8f6:	485b      	ldr	r0, [pc, #364]	; (2fa64 <z_impl_k_mutex_lock+0x1fc>)
   2f8f8:	f007 fc0f 	bl	3711a <printk>
   2f8fc:	4854      	ldr	r0, [pc, #336]	; (2fa50 <z_impl_k_mutex_lock+0x1e8>)
   2f8fe:	21ac      	movs	r1, #172	; 0xac
   2f900:	f007 fdb1 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2f904:	f388 8811 	msr	BASEPRI, r8
   2f908:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2f90c:	f06f 000f 	mvn.w	r0, #15
   2f910:	e01e      	b.n	2f950 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   2f912:	6891      	ldr	r1, [r2, #8]
   2f914:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2f918:	484c      	ldr	r0, [pc, #304]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2f91a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   2f91c:	3301      	adds	r3, #1
   2f91e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2f920:	6893      	ldr	r3, [r2, #8]
   2f922:	60a3      	str	r3, [r4, #8]
   2f924:	f7ff ff5c 	bl	2f7e0 <z_spin_unlock_valid>
   2f928:	b968      	cbnz	r0, 2f946 <z_impl_k_mutex_lock+0xde>
   2f92a:	4a49      	ldr	r2, [pc, #292]	; (2fa50 <z_impl_k_mutex_lock+0x1e8>)
   2f92c:	494c      	ldr	r1, [pc, #304]	; (2fa60 <z_impl_k_mutex_lock+0x1f8>)
   2f92e:	4845      	ldr	r0, [pc, #276]	; (2fa44 <z_impl_k_mutex_lock+0x1dc>)
   2f930:	23ac      	movs	r3, #172	; 0xac
   2f932:	f007 fbf2 	bl	3711a <printk>
   2f936:	4945      	ldr	r1, [pc, #276]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2f938:	484a      	ldr	r0, [pc, #296]	; (2fa64 <z_impl_k_mutex_lock+0x1fc>)
   2f93a:	f007 fbee 	bl	3711a <printk>
   2f93e:	4844      	ldr	r0, [pc, #272]	; (2fa50 <z_impl_k_mutex_lock+0x1e8>)
   2f940:	21ac      	movs	r1, #172	; 0xac
   2f942:	f007 fd90 	bl	37466 <assert_post_action>
   2f946:	f388 8811 	msr	BASEPRI, r8
   2f94a:	f3bf 8f6f 	isb	sy
		return 0;
   2f94e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2f950:	b002      	add	sp, #8
   2f952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2f956:	6921      	ldr	r1, [r4, #16]
   2f958:	e7de      	b.n	2f918 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2f95a:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2f95e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   2f962:	4299      	cmp	r1, r3
   2f964:	bfa8      	it	ge
   2f966:	4619      	movge	r1, r3
   2f968:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2f96c:	4291      	cmp	r1, r2
   2f96e:	bfb8      	it	lt
   2f970:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2f972:	428b      	cmp	r3, r1
   2f974:	dd44      	ble.n	2fa00 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
   2f976:	f001 fe1f 	bl	315b8 <z_set_prio>
   2f97a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2f97c:	e9cd 6700 	strd	r6, r7, [sp]
   2f980:	4832      	ldr	r0, [pc, #200]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2f982:	4622      	mov	r2, r4
   2f984:	4641      	mov	r1, r8
   2f986:	f001 fde7 	bl	31558 <z_pend_curr>
	if (got_mutex == 0) {
   2f98a:	2800      	cmp	r0, #0
   2f98c:	d0e0      	beq.n	2f950 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   2f98e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f992:	f3ef 8611 	mrs	r6, BASEPRI
   2f996:	f383 8812 	msr	BASEPRI_MAX, r3
   2f99a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f99e:	482b      	ldr	r0, [pc, #172]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2f9a0:	f7ff ff10 	bl	2f7c4 <z_spin_lock_valid>
   2f9a4:	b968      	cbnz	r0, 2f9c2 <z_impl_k_mutex_lock+0x15a>
   2f9a6:	4a2a      	ldr	r2, [pc, #168]	; (2fa50 <z_impl_k_mutex_lock+0x1e8>)
   2f9a8:	492a      	ldr	r1, [pc, #168]	; (2fa54 <z_impl_k_mutex_lock+0x1ec>)
   2f9aa:	4826      	ldr	r0, [pc, #152]	; (2fa44 <z_impl_k_mutex_lock+0x1dc>)
   2f9ac:	2381      	movs	r3, #129	; 0x81
   2f9ae:	f007 fbb4 	bl	3711a <printk>
   2f9b2:	4926      	ldr	r1, [pc, #152]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2f9b4:	4828      	ldr	r0, [pc, #160]	; (2fa58 <z_impl_k_mutex_lock+0x1f0>)
   2f9b6:	f007 fbb0 	bl	3711a <printk>
   2f9ba:	4825      	ldr	r0, [pc, #148]	; (2fa50 <z_impl_k_mutex_lock+0x1e8>)
   2f9bc:	2181      	movs	r1, #129	; 0x81
   2f9be:	f007 fd52 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f9c2:	4822      	ldr	r0, [pc, #136]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2f9c4:	f7ff ff1c 	bl	2f800 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2f9c8:	6823      	ldr	r3, [r4, #0]
   2f9ca:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f9cc:	429c      	cmp	r4, r3
   2f9ce:	d00a      	beq.n	2f9e6 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2f9d0:	b14b      	cbz	r3, 2f9e6 <z_impl_k_mutex_lock+0x17e>
   2f9d2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2f9d6:	4299      	cmp	r1, r3
   2f9d8:	bfa8      	it	ge
   2f9da:	4619      	movge	r1, r3
   2f9dc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2f9e0:	4299      	cmp	r1, r3
   2f9e2:	bfb8      	it	lt
   2f9e4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2f9e6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   2f9e8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2f9ec:	4299      	cmp	r1, r3
   2f9ee:	d109      	bne.n	2fa04 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
   2f9f0:	b16d      	cbz	r5, 2fa0e <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
   2f9f2:	4816      	ldr	r0, [pc, #88]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2f9f4:	4631      	mov	r1, r6
   2f9f6:	f001 f95d 	bl	30cb4 <z_reschedule>
	return -EAGAIN;
   2f9fa:	f06f 000a 	mvn.w	r0, #10
   2f9fe:	e7a7      	b.n	2f950 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   2fa00:	2500      	movs	r5, #0
   2fa02:	e7bb      	b.n	2f97c <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
   2fa04:	f001 fdd8 	bl	315b8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2fa08:	2800      	cmp	r0, #0
   2fa0a:	d1f2      	bne.n	2f9f2 <z_impl_k_mutex_lock+0x18a>
   2fa0c:	e7f0      	b.n	2f9f0 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2fa0e:	480f      	ldr	r0, [pc, #60]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2fa10:	f7ff fee6 	bl	2f7e0 <z_spin_unlock_valid>
   2fa14:	b968      	cbnz	r0, 2fa32 <z_impl_k_mutex_lock+0x1ca>
   2fa16:	4a0e      	ldr	r2, [pc, #56]	; (2fa50 <z_impl_k_mutex_lock+0x1e8>)
   2fa18:	4911      	ldr	r1, [pc, #68]	; (2fa60 <z_impl_k_mutex_lock+0x1f8>)
   2fa1a:	480a      	ldr	r0, [pc, #40]	; (2fa44 <z_impl_k_mutex_lock+0x1dc>)
   2fa1c:	23ac      	movs	r3, #172	; 0xac
   2fa1e:	f007 fb7c 	bl	3711a <printk>
   2fa22:	490a      	ldr	r1, [pc, #40]	; (2fa4c <z_impl_k_mutex_lock+0x1e4>)
   2fa24:	480f      	ldr	r0, [pc, #60]	; (2fa64 <z_impl_k_mutex_lock+0x1fc>)
   2fa26:	f007 fb78 	bl	3711a <printk>
   2fa2a:	4809      	ldr	r0, [pc, #36]	; (2fa50 <z_impl_k_mutex_lock+0x1e8>)
   2fa2c:	21ac      	movs	r1, #172	; 0xac
   2fa2e:	f007 fd1a 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2fa32:	f386 8811 	msr	BASEPRI, r6
   2fa36:	f3bf 8f6f 	isb	sy
   2fa3a:	e7de      	b.n	2f9fa <z_impl_k_mutex_lock+0x192>
   2fa3c:	0004134b 	.word	0x0004134b
   2fa40:	000413f8 	.word	0x000413f8
   2fa44:	0003c48a 	.word	0x0003c48a
   2fa48:	0004141a 	.word	0x0004141a
   2fa4c:	20002d28 	.word	0x20002d28
   2fa50:	0003cd09 	.word	0x0003cd09
   2fa54:	0003cd5b 	.word	0x0003cd5b
   2fa58:	0003cd70 	.word	0x0003cd70
   2fa5c:	20002d00 	.word	0x20002d00
   2fa60:	0003cd2f 	.word	0x0003cd2f
   2fa64:	0003cd46 	.word	0x0003cd46

0002fa68 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2fa68:	b538      	push	{r3, r4, r5, lr}
   2fa6a:	4604      	mov	r4, r0
   2fa6c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2fa70:	b163      	cbz	r3, 2fa8c <z_impl_k_mutex_unlock+0x24>
   2fa72:	4952      	ldr	r1, [pc, #328]	; (2fbbc <z_impl_k_mutex_unlock+0x154>)
   2fa74:	4a52      	ldr	r2, [pc, #328]	; (2fbc0 <z_impl_k_mutex_unlock+0x158>)
   2fa76:	4853      	ldr	r0, [pc, #332]	; (2fbc4 <z_impl_k_mutex_unlock+0x15c>)
   2fa78:	23c7      	movs	r3, #199	; 0xc7
   2fa7a:	f007 fb4e 	bl	3711a <printk>
   2fa7e:	4852      	ldr	r0, [pc, #328]	; (2fbc8 <z_impl_k_mutex_unlock+0x160>)
   2fa80:	f007 fb4b 	bl	3711a <printk>
   2fa84:	484e      	ldr	r0, [pc, #312]	; (2fbc0 <z_impl_k_mutex_unlock+0x158>)
   2fa86:	21c7      	movs	r1, #199	; 0xc7
   2fa88:	f007 fced 	bl	37466 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2fa8c:	68a3      	ldr	r3, [r4, #8]
   2fa8e:	2b00      	cmp	r3, #0
   2fa90:	f000 808d 	beq.w	2fbae <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2fa94:	4d4d      	ldr	r5, [pc, #308]	; (2fbcc <z_impl_k_mutex_unlock+0x164>)
   2fa96:	68aa      	ldr	r2, [r5, #8]
   2fa98:	4293      	cmp	r3, r2
   2fa9a:	f040 808b 	bne.w	2fbb4 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2fa9e:	68e3      	ldr	r3, [r4, #12]
   2faa0:	b94b      	cbnz	r3, 2fab6 <z_impl_k_mutex_unlock+0x4e>
   2faa2:	494b      	ldr	r1, [pc, #300]	; (2fbd0 <z_impl_k_mutex_unlock+0x168>)
   2faa4:	4847      	ldr	r0, [pc, #284]	; (2fbc4 <z_impl_k_mutex_unlock+0x15c>)
   2faa6:	4a46      	ldr	r2, [pc, #280]	; (2fbc0 <z_impl_k_mutex_unlock+0x158>)
   2faa8:	23df      	movs	r3, #223	; 0xdf
   2faaa:	f007 fb36 	bl	3711a <printk>
   2faae:	4844      	ldr	r0, [pc, #272]	; (2fbc0 <z_impl_k_mutex_unlock+0x158>)
   2fab0:	21df      	movs	r1, #223	; 0xdf
   2fab2:	f007 fcd8 	bl	37466 <assert_post_action>
   2fab6:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   2faba:	b163      	cbz	r3, 2fad6 <z_impl_k_mutex_unlock+0x6e>
   2fabc:	493f      	ldr	r1, [pc, #252]	; (2fbbc <z_impl_k_mutex_unlock+0x154>)
   2fabe:	4a45      	ldr	r2, [pc, #276]	; (2fbd4 <z_impl_k_mutex_unlock+0x16c>)
   2fac0:	4840      	ldr	r0, [pc, #256]	; (2fbc4 <z_impl_k_mutex_unlock+0x15c>)
   2fac2:	23fd      	movs	r3, #253	; 0xfd
   2fac4:	f007 fb29 	bl	3711a <printk>
   2fac8:	4843      	ldr	r0, [pc, #268]	; (2fbd8 <z_impl_k_mutex_unlock+0x170>)
   2faca:	f007 fb26 	bl	3711a <printk>
   2face:	4841      	ldr	r0, [pc, #260]	; (2fbd4 <z_impl_k_mutex_unlock+0x16c>)
   2fad0:	21fd      	movs	r1, #253	; 0xfd
   2fad2:	f007 fcc8 	bl	37466 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2fad6:	68ab      	ldr	r3, [r5, #8]
   2fad8:	7bdb      	ldrb	r3, [r3, #15]
   2fada:	2b01      	cmp	r3, #1
   2fadc:	d10c      	bne.n	2faf8 <z_impl_k_mutex_unlock+0x90>
   2fade:	493f      	ldr	r1, [pc, #252]	; (2fbdc <z_impl_k_mutex_unlock+0x174>)
   2fae0:	4a3c      	ldr	r2, [pc, #240]	; (2fbd4 <z_impl_k_mutex_unlock+0x16c>)
   2fae2:	4838      	ldr	r0, [pc, #224]	; (2fbc4 <z_impl_k_mutex_unlock+0x15c>)
   2fae4:	23fe      	movs	r3, #254	; 0xfe
   2fae6:	f007 fb18 	bl	3711a <printk>
   2faea:	483b      	ldr	r0, [pc, #236]	; (2fbd8 <z_impl_k_mutex_unlock+0x170>)
   2faec:	f007 fb15 	bl	3711a <printk>
   2faf0:	4838      	ldr	r0, [pc, #224]	; (2fbd4 <z_impl_k_mutex_unlock+0x16c>)
   2faf2:	21fe      	movs	r1, #254	; 0xfe
   2faf4:	f007 fcb7 	bl	37466 <assert_post_action>

	--_current->base.sched_locked;
   2faf8:	68aa      	ldr	r2, [r5, #8]
   2fafa:	7bd3      	ldrb	r3, [r2, #15]
   2fafc:	3b01      	subs	r3, #1
   2fafe:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2fb00:	68e3      	ldr	r3, [r4, #12]
   2fb02:	2b01      	cmp	r3, #1
   2fb04:	d905      	bls.n	2fb12 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   2fb06:	3b01      	subs	r3, #1
   2fb08:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   2fb0a:	f001 fe5b 	bl	317c4 <k_sched_unlock>

	return 0;
   2fb0e:	2000      	movs	r0, #0
}
   2fb10:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2fb12:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fb16:	f3ef 8511 	mrs	r5, BASEPRI
   2fb1a:	f383 8812 	msr	BASEPRI_MAX, r3
   2fb1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2fb22:	482f      	ldr	r0, [pc, #188]	; (2fbe0 <z_impl_k_mutex_unlock+0x178>)
   2fb24:	f7ff fe4e 	bl	2f7c4 <z_spin_lock_valid>
   2fb28:	b968      	cbnz	r0, 2fb46 <z_impl_k_mutex_unlock+0xde>
   2fb2a:	4a2e      	ldr	r2, [pc, #184]	; (2fbe4 <z_impl_k_mutex_unlock+0x17c>)
   2fb2c:	492e      	ldr	r1, [pc, #184]	; (2fbe8 <z_impl_k_mutex_unlock+0x180>)
   2fb2e:	4825      	ldr	r0, [pc, #148]	; (2fbc4 <z_impl_k_mutex_unlock+0x15c>)
   2fb30:	2381      	movs	r3, #129	; 0x81
   2fb32:	f007 faf2 	bl	3711a <printk>
   2fb36:	492a      	ldr	r1, [pc, #168]	; (2fbe0 <z_impl_k_mutex_unlock+0x178>)
   2fb38:	482c      	ldr	r0, [pc, #176]	; (2fbec <z_impl_k_mutex_unlock+0x184>)
   2fb3a:	f007 faee 	bl	3711a <printk>
   2fb3e:	4829      	ldr	r0, [pc, #164]	; (2fbe4 <z_impl_k_mutex_unlock+0x17c>)
   2fb40:	2181      	movs	r1, #129	; 0x81
   2fb42:	f007 fc90 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2fb46:	4826      	ldr	r0, [pc, #152]	; (2fbe0 <z_impl_k_mutex_unlock+0x178>)
   2fb48:	f7ff fe5a 	bl	2f800 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2fb4c:	68a0      	ldr	r0, [r4, #8]
   2fb4e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   2fb50:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2fb54:	4299      	cmp	r1, r3
   2fb56:	d001      	beq.n	2fb5c <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   2fb58:	f001 fd2e 	bl	315b8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2fb5c:	4620      	mov	r0, r4
   2fb5e:	f001 fef9 	bl	31954 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2fb62:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2fb64:	b158      	cbz	r0, 2fb7e <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   2fb66:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2fb6a:	6122      	str	r2, [r4, #16]
   2fb6c:	2200      	movs	r2, #0
   2fb6e:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2fb70:	f001 fb40 	bl	311f4 <z_ready_thread>
		z_reschedule(&lock, key);
   2fb74:	481a      	ldr	r0, [pc, #104]	; (2fbe0 <z_impl_k_mutex_unlock+0x178>)
   2fb76:	4629      	mov	r1, r5
   2fb78:	f001 f89c 	bl	30cb4 <z_reschedule>
   2fb7c:	e7c5      	b.n	2fb0a <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   2fb7e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2fb80:	4817      	ldr	r0, [pc, #92]	; (2fbe0 <z_impl_k_mutex_unlock+0x178>)
   2fb82:	f7ff fe2d 	bl	2f7e0 <z_spin_unlock_valid>
   2fb86:	b968      	cbnz	r0, 2fba4 <z_impl_k_mutex_unlock+0x13c>
   2fb88:	4a16      	ldr	r2, [pc, #88]	; (2fbe4 <z_impl_k_mutex_unlock+0x17c>)
   2fb8a:	4919      	ldr	r1, [pc, #100]	; (2fbf0 <z_impl_k_mutex_unlock+0x188>)
   2fb8c:	480d      	ldr	r0, [pc, #52]	; (2fbc4 <z_impl_k_mutex_unlock+0x15c>)
   2fb8e:	23ac      	movs	r3, #172	; 0xac
   2fb90:	f007 fac3 	bl	3711a <printk>
   2fb94:	4912      	ldr	r1, [pc, #72]	; (2fbe0 <z_impl_k_mutex_unlock+0x178>)
   2fb96:	4817      	ldr	r0, [pc, #92]	; (2fbf4 <z_impl_k_mutex_unlock+0x18c>)
   2fb98:	f007 fabf 	bl	3711a <printk>
   2fb9c:	4811      	ldr	r0, [pc, #68]	; (2fbe4 <z_impl_k_mutex_unlock+0x17c>)
   2fb9e:	21ac      	movs	r1, #172	; 0xac
   2fba0:	f007 fc61 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2fba4:	f385 8811 	msr	BASEPRI, r5
   2fba8:	f3bf 8f6f 	isb	sy
   2fbac:	e7ad      	b.n	2fb0a <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   2fbae:	f06f 0015 	mvn.w	r0, #21
   2fbb2:	e7ad      	b.n	2fb10 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   2fbb4:	f04f 30ff 	mov.w	r0, #4294967295
   2fbb8:	e7aa      	b.n	2fb10 <z_impl_k_mutex_unlock+0xa8>
   2fbba:	bf00      	nop
   2fbbc:	0004134b 	.word	0x0004134b
   2fbc0:	000413f8 	.word	0x000413f8
   2fbc4:	0003c48a 	.word	0x0003c48a
   2fbc8:	0004141a 	.word	0x0004141a
   2fbcc:	20002d00 	.word	0x20002d00
   2fbd0:	0004143f 	.word	0x0004143f
   2fbd4:	00041456 	.word	0x00041456
   2fbd8:	0003cae0 	.word	0x0003cae0
   2fbdc:	00041481 	.word	0x00041481
   2fbe0:	20002d28 	.word	0x20002d28
   2fbe4:	0003cd09 	.word	0x0003cd09
   2fbe8:	0003cd5b 	.word	0x0003cd5b
   2fbec:	0003cd70 	.word	0x0003cd70
   2fbf0:	0003cd2f 	.word	0x0003cd2f
   2fbf4:	0003cd46 	.word	0x0003cd46

0002fbf8 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   2fbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fbfc:	4604      	mov	r4, r0
   2fbfe:	f89d a020 	ldrb.w	sl, [sp, #32]
   2fc02:	460e      	mov	r6, r1
   2fc04:	4690      	mov	r8, r2
   2fc06:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2fc08:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2fc0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fc10:	f3ef 8711 	mrs	r7, BASEPRI
   2fc14:	f383 8812 	msr	BASEPRI_MAX, r3
   2fc18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2fc1c:	4628      	mov	r0, r5
   2fc1e:	f7ff fdd1 	bl	2f7c4 <z_spin_lock_valid>
   2fc22:	b968      	cbnz	r0, 2fc40 <queue_insert+0x48>
   2fc24:	4a3b      	ldr	r2, [pc, #236]	; (2fd14 <queue_insert+0x11c>)
   2fc26:	493c      	ldr	r1, [pc, #240]	; (2fd18 <queue_insert+0x120>)
   2fc28:	483c      	ldr	r0, [pc, #240]	; (2fd1c <queue_insert+0x124>)
   2fc2a:	2381      	movs	r3, #129	; 0x81
   2fc2c:	f007 fa75 	bl	3711a <printk>
   2fc30:	483b      	ldr	r0, [pc, #236]	; (2fd20 <queue_insert+0x128>)
   2fc32:	4629      	mov	r1, r5
   2fc34:	f007 fa71 	bl	3711a <printk>
   2fc38:	4836      	ldr	r0, [pc, #216]	; (2fd14 <queue_insert+0x11c>)
   2fc3a:	2181      	movs	r1, #129	; 0x81
   2fc3c:	f007 fc13 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2fc40:	4628      	mov	r0, r5
   2fc42:	f7ff fddd 	bl	2f800 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   2fc46:	f1ba 0f00 	cmp.w	sl, #0
   2fc4a:	d000      	beq.n	2fc4e <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   2fc4c:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2fc4e:	f104 000c 	add.w	r0, r4, #12
   2fc52:	f001 fe7f 	bl	31954 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2fc56:	b158      	cbz	r0, 2fc70 <queue_insert+0x78>
   2fc58:	2400      	movs	r4, #0
   2fc5a:	67c4      	str	r4, [r0, #124]	; 0x7c
   2fc5c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2fc60:	f001 fac8 	bl	311f4 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2fc64:	4628      	mov	r0, r5
   2fc66:	4639      	mov	r1, r7
   2fc68:	f001 f824 	bl	30cb4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   2fc6c:	2000      	movs	r0, #0
   2fc6e:	e01e      	b.n	2fcae <queue_insert+0xb6>
	if (alloc) {
   2fc70:	f1b9 0f00 	cmp.w	r9, #0
   2fc74:	d02d      	beq.n	2fcd2 <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
   2fc76:	2108      	movs	r1, #8
   2fc78:	f003 fa68 	bl	3314c <z_thread_aligned_alloc>
		if (anode == NULL) {
   2fc7c:	b9c8      	cbnz	r0, 2fcb2 <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2fc7e:	4628      	mov	r0, r5
   2fc80:	f7ff fdae 	bl	2f7e0 <z_spin_unlock_valid>
   2fc84:	b968      	cbnz	r0, 2fca2 <queue_insert+0xaa>
   2fc86:	4a23      	ldr	r2, [pc, #140]	; (2fd14 <queue_insert+0x11c>)
   2fc88:	4926      	ldr	r1, [pc, #152]	; (2fd24 <queue_insert+0x12c>)
   2fc8a:	4824      	ldr	r0, [pc, #144]	; (2fd1c <queue_insert+0x124>)
   2fc8c:	23ac      	movs	r3, #172	; 0xac
   2fc8e:	f007 fa44 	bl	3711a <printk>
   2fc92:	4825      	ldr	r0, [pc, #148]	; (2fd28 <queue_insert+0x130>)
   2fc94:	4629      	mov	r1, r5
   2fc96:	f007 fa40 	bl	3711a <printk>
   2fc9a:	481e      	ldr	r0, [pc, #120]	; (2fd14 <queue_insert+0x11c>)
   2fc9c:	21ac      	movs	r1, #172	; 0xac
   2fc9e:	f007 fbe2 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2fca2:	f387 8811 	msr	BASEPRI, r7
   2fca6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2fcaa:	f06f 000b 	mvn.w	r0, #11
}
   2fcae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2fcb2:	2301      	movs	r3, #1
		anode->data = data;
   2fcb4:	f8c0 8004 	str.w	r8, [r0, #4]
   2fcb8:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2fcba:	6803      	ldr	r3, [r0, #0]
   2fcbc:	f003 0303 	and.w	r3, r3, #3
   2fcc0:	b95e      	cbnz	r6, 2fcda <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2fcc2:	6822      	ldr	r2, [r4, #0]
   2fcc4:	4313      	orrs	r3, r2
   2fcc6:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2fcc8:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2fcca:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2fccc:	b973      	cbnz	r3, 2fcec <queue_insert+0xf4>
	list->tail = node;
   2fcce:	6060      	str	r0, [r4, #4]
}
   2fcd0:	e00c      	b.n	2fcec <queue_insert+0xf4>
	node->next_and_flags = flags;
   2fcd2:	f8c8 9000 	str.w	r9, [r8]
}
   2fcd6:	4640      	mov	r0, r8
   2fcd8:	e7ef      	b.n	2fcba <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2fcda:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2fcdc:	f032 0203 	bics.w	r2, r2, #3
   2fce0:	d110      	bne.n	2fd04 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
   2fce2:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2fce4:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2fce6:	b93a      	cbnz	r2, 2fcf8 <queue_insert+0x100>
	list->head = node;
   2fce8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2fcec:	2104      	movs	r1, #4
   2fcee:	f104 0014 	add.w	r0, r4, #20
   2fcf2:	f00a fbde 	bl	3a4b2 <z_handle_obj_poll_events>
   2fcf6:	e7b5      	b.n	2fc64 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2fcf8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2fcfa:	f003 0303 	and.w	r3, r3, #3
   2fcfe:	4303      	orrs	r3, r0
   2fd00:	6013      	str	r3, [r2, #0]
   2fd02:	e7e4      	b.n	2fcce <queue_insert+0xd6>
   2fd04:	4313      	orrs	r3, r2
   2fd06:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2fd08:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2fd0a:	f003 0303 	and.w	r3, r3, #3
   2fd0e:	4303      	orrs	r3, r0
   2fd10:	6033      	str	r3, [r6, #0]
}
   2fd12:	e7eb      	b.n	2fcec <queue_insert+0xf4>
   2fd14:	0003cd09 	.word	0x0003cd09
   2fd18:	0003cd5b 	.word	0x0003cd5b
   2fd1c:	0003c48a 	.word	0x0003c48a
   2fd20:	0003cd70 	.word	0x0003cd70
   2fd24:	0003cd2f 	.word	0x0003cd2f
   2fd28:	0003cd46 	.word	0x0003cd46

0002fd2c <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   2fd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fd30:	4605      	mov	r5, r0
   2fd32:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   2fd34:	460c      	mov	r4, r1
   2fd36:	2900      	cmp	r1, #0
   2fd38:	d04a      	beq.n	2fdd0 <k_queue_append_list+0xa4>
   2fd3a:	2a00      	cmp	r2, #0
   2fd3c:	d048      	beq.n	2fdd0 <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2fd3e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2fd42:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fd46:	f3ef 8911 	mrs	r9, BASEPRI
   2fd4a:	f383 8812 	msr	BASEPRI_MAX, r3
   2fd4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2fd52:	4630      	mov	r0, r6
   2fd54:	f7ff fd36 	bl	2f7c4 <z_spin_lock_valid>
   2fd58:	b968      	cbnz	r0, 2fd76 <k_queue_append_list+0x4a>
   2fd5a:	4a1f      	ldr	r2, [pc, #124]	; (2fdd8 <k_queue_append_list+0xac>)
   2fd5c:	491f      	ldr	r1, [pc, #124]	; (2fddc <k_queue_append_list+0xb0>)
   2fd5e:	4820      	ldr	r0, [pc, #128]	; (2fde0 <k_queue_append_list+0xb4>)
   2fd60:	2381      	movs	r3, #129	; 0x81
   2fd62:	f007 f9da 	bl	3711a <printk>
   2fd66:	481f      	ldr	r0, [pc, #124]	; (2fde4 <k_queue_append_list+0xb8>)
   2fd68:	4631      	mov	r1, r6
   2fd6a:	f007 f9d6 	bl	3711a <printk>
   2fd6e:	481a      	ldr	r0, [pc, #104]	; (2fdd8 <k_queue_append_list+0xac>)
   2fd70:	2181      	movs	r1, #129	; 0x81
   2fd72:	f007 fb78 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2fd76:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   2fd78:	f105 080c 	add.w	r8, r5, #12
   2fd7c:	f7ff fd40 	bl	2f800 <z_spin_lock_set_owner>
   2fd80:	4640      	mov	r0, r8
   2fd82:	f001 fde7 	bl	31954 <z_unpend_first_thread>
   2fd86:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   2fd8a:	b920      	cbnz	r0, 2fd96 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2fd8c:	686b      	ldr	r3, [r5, #4]
   2fd8e:	b9cb      	cbnz	r3, 2fdc4 <k_queue_append_list+0x98>
	list->head = node;
   2fd90:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2fd92:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2fd94:	e00a      	b.n	2fdac <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   2fd96:	6144      	str	r4, [r0, #20]
   2fd98:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2fd9c:	f001 fa2a 	bl	311f4 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   2fda0:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2fda2:	4640      	mov	r0, r8
   2fda4:	f001 fdd6 	bl	31954 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2fda8:	2c00      	cmp	r4, #0
   2fdaa:	d1ee      	bne.n	2fd8a <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2fdac:	2104      	movs	r1, #4
   2fdae:	f105 0014 	add.w	r0, r5, #20
   2fdb2:	f00a fb7e 	bl	3a4b2 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2fdb6:	4630      	mov	r0, r6
   2fdb8:	4649      	mov	r1, r9
   2fdba:	f000 ff7b 	bl	30cb4 <z_reschedule>
	return 0;
   2fdbe:	2000      	movs	r0, #0
}
   2fdc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2fdc4:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2fdc6:	f001 0103 	and.w	r1, r1, #3
   2fdca:	430c      	orrs	r4, r1
   2fdcc:	601c      	str	r4, [r3, #0]
}
   2fdce:	e7e0      	b.n	2fd92 <k_queue_append_list+0x66>
		return -EINVAL;
   2fdd0:	f06f 0015 	mvn.w	r0, #21
   2fdd4:	e7f4      	b.n	2fdc0 <k_queue_append_list+0x94>
   2fdd6:	bf00      	nop
   2fdd8:	0003cd09 	.word	0x0003cd09
   2fddc:	0003cd5b 	.word	0x0003cd5b
   2fde0:	0003c48a 	.word	0x0003c48a
   2fde4:	0003cd70 	.word	0x0003cd70

0002fde8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2fde8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2fdec:	4606      	mov	r6, r0
   2fdee:	4690      	mov	r8, r2
   2fdf0:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2fdf2:	f100 0508 	add.w	r5, r0, #8
   2fdf6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fdfa:	f3ef 8711 	mrs	r7, BASEPRI
   2fdfe:	f383 8812 	msr	BASEPRI_MAX, r3
   2fe02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2fe06:	4628      	mov	r0, r5
   2fe08:	f7ff fcdc 	bl	2f7c4 <z_spin_lock_valid>
   2fe0c:	b968      	cbnz	r0, 2fe2a <z_impl_k_queue_get+0x42>
   2fe0e:	4a25      	ldr	r2, [pc, #148]	; (2fea4 <z_impl_k_queue_get+0xbc>)
   2fe10:	4925      	ldr	r1, [pc, #148]	; (2fea8 <z_impl_k_queue_get+0xc0>)
   2fe12:	4826      	ldr	r0, [pc, #152]	; (2feac <z_impl_k_queue_get+0xc4>)
   2fe14:	2381      	movs	r3, #129	; 0x81
   2fe16:	f007 f980 	bl	3711a <printk>
   2fe1a:	4825      	ldr	r0, [pc, #148]	; (2feb0 <z_impl_k_queue_get+0xc8>)
   2fe1c:	4629      	mov	r1, r5
   2fe1e:	f007 f97c 	bl	3711a <printk>
   2fe22:	4820      	ldr	r0, [pc, #128]	; (2fea4 <z_impl_k_queue_get+0xbc>)
   2fe24:	2181      	movs	r1, #129	; 0x81
   2fe26:	f007 fb1e 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2fe2a:	4628      	mov	r0, r5
   2fe2c:	f7ff fce8 	bl	2f800 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2fe30:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2fe32:	b334      	cbz	r4, 2fe82 <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2fe34:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2fe36:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2fe38:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2fe3c:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2fe3e:	4620      	mov	r0, r4
	list->head = node;
   2fe40:	6033      	str	r3, [r6, #0]
	list->tail = node;
   2fe42:	bf08      	it	eq
   2fe44:	6073      	streq	r3, [r6, #4]
   2fe46:	2101      	movs	r1, #1
   2fe48:	f00a f9e5 	bl	3a216 <z_queue_node_peek>
   2fe4c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2fe4e:	4628      	mov	r0, r5
   2fe50:	f7ff fcc6 	bl	2f7e0 <z_spin_unlock_valid>
   2fe54:	b968      	cbnz	r0, 2fe72 <z_impl_k_queue_get+0x8a>
   2fe56:	4a13      	ldr	r2, [pc, #76]	; (2fea4 <z_impl_k_queue_get+0xbc>)
   2fe58:	4916      	ldr	r1, [pc, #88]	; (2feb4 <z_impl_k_queue_get+0xcc>)
   2fe5a:	4814      	ldr	r0, [pc, #80]	; (2feac <z_impl_k_queue_get+0xc4>)
   2fe5c:	23ac      	movs	r3, #172	; 0xac
   2fe5e:	f007 f95c 	bl	3711a <printk>
   2fe62:	4815      	ldr	r0, [pc, #84]	; (2feb8 <z_impl_k_queue_get+0xd0>)
   2fe64:	4629      	mov	r1, r5
   2fe66:	f007 f958 	bl	3711a <printk>
   2fe6a:	480e      	ldr	r0, [pc, #56]	; (2fea4 <z_impl_k_queue_get+0xbc>)
   2fe6c:	21ac      	movs	r1, #172	; 0xac
   2fe6e:	f007 fafa 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2fe72:	f387 8811 	msr	BASEPRI, r7
   2fe76:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2fe7a:	4620      	mov	r0, r4
   2fe7c:	b003      	add	sp, #12
   2fe7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2fe82:	ea58 0309 	orrs.w	r3, r8, r9
   2fe86:	d0e2      	beq.n	2fe4e <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2fe88:	e9cd 8900 	strd	r8, r9, [sp]
   2fe8c:	f106 020c 	add.w	r2, r6, #12
   2fe90:	4639      	mov	r1, r7
   2fe92:	4628      	mov	r0, r5
   2fe94:	f001 fb60 	bl	31558 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2fe98:	2800      	cmp	r0, #0
   2fe9a:	d1ee      	bne.n	2fe7a <z_impl_k_queue_get+0x92>
   2fe9c:	4b07      	ldr	r3, [pc, #28]	; (2febc <z_impl_k_queue_get+0xd4>)
   2fe9e:	689b      	ldr	r3, [r3, #8]
   2fea0:	695c      	ldr	r4, [r3, #20]
   2fea2:	e7ea      	b.n	2fe7a <z_impl_k_queue_get+0x92>
   2fea4:	0003cd09 	.word	0x0003cd09
   2fea8:	0003cd5b 	.word	0x0003cd5b
   2feac:	0003c48a 	.word	0x0003c48a
   2feb0:	0003cd70 	.word	0x0003cd70
   2feb4:	0003cd2f 	.word	0x0003cd2f
   2feb8:	0003cd46 	.word	0x0003cd46
   2febc:	20002d00 	.word	0x20002d00

0002fec0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2fec0:	b538      	push	{r3, r4, r5, lr}
   2fec2:	4604      	mov	r4, r0
	__asm__ volatile(
   2fec4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fec8:	f3ef 8511 	mrs	r5, BASEPRI
   2fecc:	f383 8812 	msr	BASEPRI_MAX, r3
   2fed0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2fed4:	4817      	ldr	r0, [pc, #92]	; (2ff34 <z_impl_k_sem_give+0x74>)
   2fed6:	f7ff fc75 	bl	2f7c4 <z_spin_lock_valid>
   2feda:	b968      	cbnz	r0, 2fef8 <z_impl_k_sem_give+0x38>
   2fedc:	4a16      	ldr	r2, [pc, #88]	; (2ff38 <z_impl_k_sem_give+0x78>)
   2fede:	4917      	ldr	r1, [pc, #92]	; (2ff3c <z_impl_k_sem_give+0x7c>)
   2fee0:	4817      	ldr	r0, [pc, #92]	; (2ff40 <z_impl_k_sem_give+0x80>)
   2fee2:	2381      	movs	r3, #129	; 0x81
   2fee4:	f007 f919 	bl	3711a <printk>
   2fee8:	4912      	ldr	r1, [pc, #72]	; (2ff34 <z_impl_k_sem_give+0x74>)
   2feea:	4816      	ldr	r0, [pc, #88]	; (2ff44 <z_impl_k_sem_give+0x84>)
   2feec:	f007 f915 	bl	3711a <printk>
   2fef0:	4811      	ldr	r0, [pc, #68]	; (2ff38 <z_impl_k_sem_give+0x78>)
   2fef2:	2181      	movs	r1, #129	; 0x81
   2fef4:	f007 fab7 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2fef8:	480e      	ldr	r0, [pc, #56]	; (2ff34 <z_impl_k_sem_give+0x74>)
   2fefa:	f7ff fc81 	bl	2f800 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2fefe:	4620      	mov	r0, r4
   2ff00:	f001 fd28 	bl	31954 <z_unpend_first_thread>

	if (thread != NULL) {
   2ff04:	b148      	cbz	r0, 2ff1a <z_impl_k_sem_give+0x5a>
   2ff06:	2200      	movs	r2, #0
   2ff08:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2ff0a:	f001 f973 	bl	311f4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2ff0e:	4629      	mov	r1, r5
   2ff10:	4808      	ldr	r0, [pc, #32]	; (2ff34 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2ff12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2ff16:	f000 becd 	b.w	30cb4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2ff1a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2ff1e:	429a      	cmp	r2, r3
   2ff20:	bf18      	it	ne
   2ff22:	3301      	addne	r3, #1
   2ff24:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2ff26:	2102      	movs	r1, #2
   2ff28:	f104 0010 	add.w	r0, r4, #16
   2ff2c:	f00a fac1 	bl	3a4b2 <z_handle_obj_poll_events>
}
   2ff30:	e7ed      	b.n	2ff0e <z_impl_k_sem_give+0x4e>
   2ff32:	bf00      	nop
   2ff34:	20002d2c 	.word	0x20002d2c
   2ff38:	0003cd09 	.word	0x0003cd09
   2ff3c:	0003cd5b 	.word	0x0003cd5b
   2ff40:	0003c48a 	.word	0x0003c48a
   2ff44:	0003cd70 	.word	0x0003cd70

0002ff48 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2ff48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ff4a:	4604      	mov	r4, r0
   2ff4c:	4616      	mov	r6, r2
   2ff4e:	461f      	mov	r7, r3
   2ff50:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   2ff54:	b17b      	cbz	r3, 2ff76 <z_impl_k_sem_take+0x2e>
   2ff56:	ea56 0307 	orrs.w	r3, r6, r7
   2ff5a:	d00c      	beq.n	2ff76 <z_impl_k_sem_take+0x2e>
   2ff5c:	4935      	ldr	r1, [pc, #212]	; (30034 <z_impl_k_sem_take+0xec>)
   2ff5e:	4a36      	ldr	r2, [pc, #216]	; (30038 <z_impl_k_sem_take+0xf0>)
   2ff60:	4836      	ldr	r0, [pc, #216]	; (3003c <z_impl_k_sem_take+0xf4>)
   2ff62:	2379      	movs	r3, #121	; 0x79
   2ff64:	f007 f8d9 	bl	3711a <printk>
   2ff68:	4835      	ldr	r0, [pc, #212]	; (30040 <z_impl_k_sem_take+0xf8>)
   2ff6a:	f007 f8d6 	bl	3711a <printk>
   2ff6e:	4832      	ldr	r0, [pc, #200]	; (30038 <z_impl_k_sem_take+0xf0>)
   2ff70:	2179      	movs	r1, #121	; 0x79
   2ff72:	f007 fa78 	bl	37466 <assert_post_action>
   2ff76:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ff7a:	f3ef 8511 	mrs	r5, BASEPRI
   2ff7e:	f383 8812 	msr	BASEPRI_MAX, r3
   2ff82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ff86:	482f      	ldr	r0, [pc, #188]	; (30044 <z_impl_k_sem_take+0xfc>)
   2ff88:	f7ff fc1c 	bl	2f7c4 <z_spin_lock_valid>
   2ff8c:	b968      	cbnz	r0, 2ffaa <z_impl_k_sem_take+0x62>
   2ff8e:	4a2e      	ldr	r2, [pc, #184]	; (30048 <z_impl_k_sem_take+0x100>)
   2ff90:	492e      	ldr	r1, [pc, #184]	; (3004c <z_impl_k_sem_take+0x104>)
   2ff92:	482a      	ldr	r0, [pc, #168]	; (3003c <z_impl_k_sem_take+0xf4>)
   2ff94:	2381      	movs	r3, #129	; 0x81
   2ff96:	f007 f8c0 	bl	3711a <printk>
   2ff9a:	492a      	ldr	r1, [pc, #168]	; (30044 <z_impl_k_sem_take+0xfc>)
   2ff9c:	482c      	ldr	r0, [pc, #176]	; (30050 <z_impl_k_sem_take+0x108>)
   2ff9e:	f007 f8bc 	bl	3711a <printk>
   2ffa2:	4829      	ldr	r0, [pc, #164]	; (30048 <z_impl_k_sem_take+0x100>)
   2ffa4:	2181      	movs	r1, #129	; 0x81
   2ffa6:	f007 fa5e 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ffaa:	4826      	ldr	r0, [pc, #152]	; (30044 <z_impl_k_sem_take+0xfc>)
   2ffac:	f7ff fc28 	bl	2f800 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2ffb0:	68a3      	ldr	r3, [r4, #8]
   2ffb2:	b1d3      	cbz	r3, 2ffea <z_impl_k_sem_take+0xa2>
		sem->count--;
   2ffb4:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ffb6:	4823      	ldr	r0, [pc, #140]	; (30044 <z_impl_k_sem_take+0xfc>)
   2ffb8:	60a3      	str	r3, [r4, #8]
   2ffba:	f7ff fc11 	bl	2f7e0 <z_spin_unlock_valid>
   2ffbe:	b968      	cbnz	r0, 2ffdc <z_impl_k_sem_take+0x94>
   2ffc0:	4a21      	ldr	r2, [pc, #132]	; (30048 <z_impl_k_sem_take+0x100>)
   2ffc2:	4924      	ldr	r1, [pc, #144]	; (30054 <z_impl_k_sem_take+0x10c>)
   2ffc4:	481d      	ldr	r0, [pc, #116]	; (3003c <z_impl_k_sem_take+0xf4>)
   2ffc6:	23ac      	movs	r3, #172	; 0xac
   2ffc8:	f007 f8a7 	bl	3711a <printk>
   2ffcc:	491d      	ldr	r1, [pc, #116]	; (30044 <z_impl_k_sem_take+0xfc>)
   2ffce:	4822      	ldr	r0, [pc, #136]	; (30058 <z_impl_k_sem_take+0x110>)
   2ffd0:	f007 f8a3 	bl	3711a <printk>
   2ffd4:	481c      	ldr	r0, [pc, #112]	; (30048 <z_impl_k_sem_take+0x100>)
   2ffd6:	21ac      	movs	r1, #172	; 0xac
   2ffd8:	f007 fa45 	bl	37466 <assert_post_action>
	__asm__ volatile(
   2ffdc:	f385 8811 	msr	BASEPRI, r5
   2ffe0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2ffe4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2ffe6:	b003      	add	sp, #12
   2ffe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ffea:	ea56 0307 	orrs.w	r3, r6, r7
   2ffee:	d118      	bne.n	30022 <z_impl_k_sem_take+0xda>
   2fff0:	4814      	ldr	r0, [pc, #80]	; (30044 <z_impl_k_sem_take+0xfc>)
   2fff2:	f7ff fbf5 	bl	2f7e0 <z_spin_unlock_valid>
   2fff6:	b968      	cbnz	r0, 30014 <z_impl_k_sem_take+0xcc>
   2fff8:	4a13      	ldr	r2, [pc, #76]	; (30048 <z_impl_k_sem_take+0x100>)
   2fffa:	4916      	ldr	r1, [pc, #88]	; (30054 <z_impl_k_sem_take+0x10c>)
   2fffc:	480f      	ldr	r0, [pc, #60]	; (3003c <z_impl_k_sem_take+0xf4>)
   2fffe:	23ac      	movs	r3, #172	; 0xac
   30000:	f007 f88b 	bl	3711a <printk>
   30004:	490f      	ldr	r1, [pc, #60]	; (30044 <z_impl_k_sem_take+0xfc>)
   30006:	4814      	ldr	r0, [pc, #80]	; (30058 <z_impl_k_sem_take+0x110>)
   30008:	f007 f887 	bl	3711a <printk>
   3000c:	480e      	ldr	r0, [pc, #56]	; (30048 <z_impl_k_sem_take+0x100>)
   3000e:	21ac      	movs	r1, #172	; 0xac
   30010:	f007 fa29 	bl	37466 <assert_post_action>
   30014:	f385 8811 	msr	BASEPRI, r5
   30018:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   3001c:	f06f 000f 	mvn.w	r0, #15
   30020:	e7e1      	b.n	2ffe6 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   30022:	e9cd 6700 	strd	r6, r7, [sp]
   30026:	4622      	mov	r2, r4
   30028:	4629      	mov	r1, r5
   3002a:	4806      	ldr	r0, [pc, #24]	; (30044 <z_impl_k_sem_take+0xfc>)
   3002c:	f001 fa94 	bl	31558 <z_pend_curr>
	return ret;
   30030:	e7d9      	b.n	2ffe6 <z_impl_k_sem_take+0x9e>
   30032:	bf00      	nop
   30034:	000414d2 	.word	0x000414d2
   30038:	000414b2 	.word	0x000414b2
   3003c:	0003c48a 	.word	0x0003c48a
   30040:	0003cae0 	.word	0x0003cae0
   30044:	20002d2c 	.word	0x20002d2c
   30048:	0003cd09 	.word	0x0003cd09
   3004c:	0003cd5b 	.word	0x0003cd5b
   30050:	0003cd70 	.word	0x0003cd70
   30054:	0003cd2f 	.word	0x0003cd2f
   30058:	0003cd46 	.word	0x0003cd46

0003005c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   3005c:	b570      	push	{r4, r5, r6, lr}
   3005e:	4604      	mov	r4, r0
	__asm__ volatile(
   30060:	f04f 0340 	mov.w	r3, #64	; 0x40
   30064:	f3ef 8511 	mrs	r5, BASEPRI
   30068:	f383 8812 	msr	BASEPRI_MAX, r3
   3006c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30070:	4815      	ldr	r0, [pc, #84]	; (300c8 <z_impl_k_sem_reset+0x6c>)
   30072:	f7ff fba7 	bl	2f7c4 <z_spin_lock_valid>
   30076:	b968      	cbnz	r0, 30094 <z_impl_k_sem_reset+0x38>
   30078:	4a14      	ldr	r2, [pc, #80]	; (300cc <z_impl_k_sem_reset+0x70>)
   3007a:	4915      	ldr	r1, [pc, #84]	; (300d0 <z_impl_k_sem_reset+0x74>)
   3007c:	4815      	ldr	r0, [pc, #84]	; (300d4 <z_impl_k_sem_reset+0x78>)
   3007e:	2381      	movs	r3, #129	; 0x81
   30080:	f007 f84b 	bl	3711a <printk>
   30084:	4910      	ldr	r1, [pc, #64]	; (300c8 <z_impl_k_sem_reset+0x6c>)
   30086:	4814      	ldr	r0, [pc, #80]	; (300d8 <z_impl_k_sem_reset+0x7c>)
   30088:	f007 f847 	bl	3711a <printk>
   3008c:	480f      	ldr	r0, [pc, #60]	; (300cc <z_impl_k_sem_reset+0x70>)
   3008e:	2181      	movs	r1, #129	; 0x81
   30090:	f007 f9e9 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   30094:	480c      	ldr	r0, [pc, #48]	; (300c8 <z_impl_k_sem_reset+0x6c>)
   30096:	f7ff fbb3 	bl	2f800 <z_spin_lock_set_owner>
   3009a:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   3009e:	4620      	mov	r0, r4
   300a0:	f001 fc58 	bl	31954 <z_unpend_first_thread>
		if (thread == NULL) {
   300a4:	b118      	cbz	r0, 300ae <z_impl_k_sem_reset+0x52>
   300a6:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   300a8:	f001 f8a4 	bl	311f4 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   300ac:	e7f7      	b.n	3009e <z_impl_k_sem_reset+0x42>
	}
	sem->count = 0;
   300ae:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   300b0:	2102      	movs	r1, #2
   300b2:	f104 0010 	add.w	r0, r4, #16
   300b6:	f00a f9fc 	bl	3a4b2 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   300ba:	4629      	mov	r1, r5
   300bc:	4802      	ldr	r0, [pc, #8]	; (300c8 <z_impl_k_sem_reset+0x6c>)
}
   300be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   300c2:	f000 bdf7 	b.w	30cb4 <z_reschedule>
   300c6:	bf00      	nop
   300c8:	20002d2c 	.word	0x20002d2c
   300cc:	0003cd09 	.word	0x0003cd09
   300d0:	0003cd5b 	.word	0x0003cd5b
   300d4:	0003c48a 	.word	0x0003c48a
   300d8:	0003cd70 	.word	0x0003cd70

000300dc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   300dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   300de:	4b09      	ldr	r3, [pc, #36]	; (30104 <k_sys_work_q_init+0x28>)
   300e0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   300e2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   300e4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   300e6:	9300      	str	r3, [sp, #0]
   300e8:	4907      	ldr	r1, [pc, #28]	; (30108 <k_sys_work_q_init+0x2c>)
   300ea:	4808      	ldr	r0, [pc, #32]	; (3010c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   300ec:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   300f0:	f04f 33ff 	mov.w	r3, #4294967295
   300f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   300f8:	f000 fa88 	bl	3060c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   300fc:	4620      	mov	r0, r4
   300fe:	b004      	add	sp, #16
   30100:	bd10      	pop	{r4, pc}
   30102:	bf00      	nop
   30104:	0004151f 	.word	0x0004151f
   30108:	20008b20 	.word	0x20008b20
   3010c:	20002138 	.word	0x20002138

00030110 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   30110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30114:	4e7e      	ldr	r6, [pc, #504]	; (30310 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   30116:	4f7f      	ldr	r7, [pc, #508]	; (30314 <work_queue_main+0x204>)
{
   30118:	b085      	sub	sp, #20
   3011a:	4604      	mov	r4, r0
   3011c:	f04f 0340 	mov.w	r3, #64	; 0x40
   30120:	f3ef 8811 	mrs	r8, BASEPRI
   30124:	f383 8812 	msr	BASEPRI_MAX, r3
   30128:	f3bf 8f6f 	isb	sy
   3012c:	4630      	mov	r0, r6
   3012e:	f7ff fb49 	bl	2f7c4 <z_spin_lock_valid>
   30132:	b968      	cbnz	r0, 30150 <work_queue_main+0x40>
   30134:	4a78      	ldr	r2, [pc, #480]	; (30318 <work_queue_main+0x208>)
   30136:	4979      	ldr	r1, [pc, #484]	; (3031c <work_queue_main+0x20c>)
   30138:	4879      	ldr	r0, [pc, #484]	; (30320 <work_queue_main+0x210>)
   3013a:	2381      	movs	r3, #129	; 0x81
   3013c:	f006 ffed 	bl	3711a <printk>
   30140:	4878      	ldr	r0, [pc, #480]	; (30324 <work_queue_main+0x214>)
   30142:	4631      	mov	r1, r6
   30144:	f006 ffe9 	bl	3711a <printk>
   30148:	4873      	ldr	r0, [pc, #460]	; (30318 <work_queue_main+0x208>)
   3014a:	2181      	movs	r1, #129	; 0x81
   3014c:	f007 f98b 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   30150:	4630      	mov	r0, r6
   30152:	f7ff fb55 	bl	2f800 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   30156:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   3015a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   3015e:	b9ad      	cbnz	r5, 3018c <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   30160:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   30164:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   30166:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   3016a:	f100 8092 	bmi.w	30292 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   3016e:	2300      	movs	r3, #0
   30170:	9302      	str	r3, [sp, #8]
   30172:	f04f 32ff 	mov.w	r2, #4294967295
   30176:	f04f 33ff 	mov.w	r3, #4294967295
   3017a:	e9cd 2300 	strd	r2, r3, [sp]
   3017e:	4641      	mov	r1, r8
   30180:	f104 0288 	add.w	r2, r4, #136	; 0x88
   30184:	4630      	mov	r0, r6
   30186:	f001 feed 	bl	31f64 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   3018a:	e7c7      	b.n	3011c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3018c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   30190:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   30192:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   30196:	428d      	cmp	r5, r1
   30198:	d101      	bne.n	3019e <work_queue_main+0x8e>
	list->tail = node;
   3019a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   3019e:	f043 0302 	orr.w	r3, r3, #2
   301a2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   301a6:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   301a8:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   301ac:	f023 0304 	bic.w	r3, r3, #4
   301b0:	f043 0301 	orr.w	r3, r3, #1
   301b4:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   301b6:	4630      	mov	r0, r6
   301b8:	f7ff fb12 	bl	2f7e0 <z_spin_unlock_valid>
   301bc:	b968      	cbnz	r0, 301da <work_queue_main+0xca>
   301be:	4a56      	ldr	r2, [pc, #344]	; (30318 <work_queue_main+0x208>)
   301c0:	4959      	ldr	r1, [pc, #356]	; (30328 <work_queue_main+0x218>)
   301c2:	4857      	ldr	r0, [pc, #348]	; (30320 <work_queue_main+0x210>)
   301c4:	23ac      	movs	r3, #172	; 0xac
   301c6:	f006 ffa8 	bl	3711a <printk>
   301ca:	4858      	ldr	r0, [pc, #352]	; (3032c <work_queue_main+0x21c>)
   301cc:	4631      	mov	r1, r6
   301ce:	f006 ffa4 	bl	3711a <printk>
   301d2:	4851      	ldr	r0, [pc, #324]	; (30318 <work_queue_main+0x208>)
   301d4:	21ac      	movs	r1, #172	; 0xac
   301d6:	f007 f946 	bl	37466 <assert_post_action>
	__asm__ volatile(
   301da:	f388 8811 	msr	BASEPRI, r8
   301de:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   301e2:	f1b9 0f00 	cmp.w	r9, #0
   301e6:	d10b      	bne.n	30200 <work_queue_main+0xf0>
   301e8:	4951      	ldr	r1, [pc, #324]	; (30330 <work_queue_main+0x220>)
   301ea:	484d      	ldr	r0, [pc, #308]	; (30320 <work_queue_main+0x210>)
   301ec:	4a51      	ldr	r2, [pc, #324]	; (30334 <work_queue_main+0x224>)
   301ee:	f44f 7322 	mov.w	r3, #648	; 0x288
   301f2:	f006 ff92 	bl	3711a <printk>
   301f6:	484f      	ldr	r0, [pc, #316]	; (30334 <work_queue_main+0x224>)
   301f8:	f44f 7122 	mov.w	r1, #648	; 0x288
   301fc:	f007 f933 	bl	37466 <assert_post_action>
		handler(work);
   30200:	4628      	mov	r0, r5
   30202:	47c8      	blx	r9
	__asm__ volatile(
   30204:	f04f 0340 	mov.w	r3, #64	; 0x40
   30208:	f3ef 8a11 	mrs	sl, BASEPRI
   3020c:	f383 8812 	msr	BASEPRI_MAX, r3
   30210:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30214:	4630      	mov	r0, r6
   30216:	f7ff fad5 	bl	2f7c4 <z_spin_lock_valid>
   3021a:	b968      	cbnz	r0, 30238 <work_queue_main+0x128>
   3021c:	4a3e      	ldr	r2, [pc, #248]	; (30318 <work_queue_main+0x208>)
   3021e:	493f      	ldr	r1, [pc, #252]	; (3031c <work_queue_main+0x20c>)
   30220:	483f      	ldr	r0, [pc, #252]	; (30320 <work_queue_main+0x210>)
   30222:	2381      	movs	r3, #129	; 0x81
   30224:	f006 ff79 	bl	3711a <printk>
   30228:	483e      	ldr	r0, [pc, #248]	; (30324 <work_queue_main+0x214>)
   3022a:	4631      	mov	r1, r6
   3022c:	f006 ff75 	bl	3711a <printk>
   30230:	4839      	ldr	r0, [pc, #228]	; (30318 <work_queue_main+0x208>)
   30232:	2181      	movs	r1, #129	; 0x81
   30234:	f007 f917 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   30238:	4630      	mov	r0, r6
   3023a:	f7ff fae1 	bl	2f800 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   3023e:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30240:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   30242:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30246:	d42e      	bmi.n	302a6 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   30248:	60ea      	str	r2, [r5, #12]
   3024a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   3024e:	f023 0302 	bic.w	r3, r3, #2
   30252:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30256:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   30258:	f3c3 2500 	ubfx	r5, r3, #8, #1
   3025c:	f7ff fac0 	bl	2f7e0 <z_spin_unlock_valid>
   30260:	b968      	cbnz	r0, 3027e <work_queue_main+0x16e>
   30262:	4a2d      	ldr	r2, [pc, #180]	; (30318 <work_queue_main+0x208>)
   30264:	4930      	ldr	r1, [pc, #192]	; (30328 <work_queue_main+0x218>)
   30266:	482e      	ldr	r0, [pc, #184]	; (30320 <work_queue_main+0x210>)
   30268:	23ac      	movs	r3, #172	; 0xac
   3026a:	f006 ff56 	bl	3711a <printk>
   3026e:	482f      	ldr	r0, [pc, #188]	; (3032c <work_queue_main+0x21c>)
   30270:	4631      	mov	r1, r6
   30272:	f006 ff52 	bl	3711a <printk>
   30276:	4828      	ldr	r0, [pc, #160]	; (30318 <work_queue_main+0x208>)
   30278:	21ac      	movs	r1, #172	; 0xac
   3027a:	f007 f8f4 	bl	37466 <assert_post_action>
	__asm__ volatile(
   3027e:	f38a 8811 	msr	BASEPRI, sl
   30282:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   30286:	2d00      	cmp	r5, #0
   30288:	f47f af48 	bne.w	3011c <work_queue_main+0xc>
	z_impl_k_yield();
   3028c:	f001 fbbe 	bl	31a0c <z_impl_k_yield>
}
   30290:	e744      	b.n	3011c <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   30292:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   30296:	2200      	movs	r2, #0
   30298:	2101      	movs	r1, #1
   3029a:	4628      	mov	r0, r5
   3029c:	f001 fe0a 	bl	31eb4 <z_sched_wake>
   302a0:	2800      	cmp	r0, #0
   302a2:	d1f8      	bne.n	30296 <work_queue_main+0x186>
   302a4:	e763      	b.n	3016e <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   302a6:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   302a8:	f023 0303 	bic.w	r3, r3, #3
   302ac:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   302ae:	2800      	cmp	r0, #0
   302b0:	d0cb      	beq.n	3024a <work_queue_main+0x13a>
	return node->next;
   302b2:	6803      	ldr	r3, [r0, #0]
   302b4:	2b00      	cmp	r3, #0
   302b6:	bf38      	it	cc
   302b8:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   302ba:	f04f 0900 	mov.w	r9, #0
   302be:	4698      	mov	r8, r3
	parent->next = child;
   302c0:	46cb      	mov	fp, r9
		if (wc->work == work) {
   302c2:	6843      	ldr	r3, [r0, #4]
   302c4:	429d      	cmp	r5, r3
   302c6:	4602      	mov	r2, r0
   302c8:	d10d      	bne.n	302e6 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   302ca:	6802      	ldr	r2, [r0, #0]
   302cc:	f1b9 0f00 	cmp.w	r9, #0
   302d0:	d115      	bne.n	302fe <work_queue_main+0x1ee>
   302d2:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   302d4:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   302d6:	4283      	cmp	r3, r0
   302d8:	d100      	bne.n	302dc <work_queue_main+0x1cc>
	list->tail = node;
   302da:	607a      	str	r2, [r7, #4]
	parent->next = child;
   302dc:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   302e0:	f7ff fdee 	bl	2fec0 <z_impl_k_sem_give>
}
   302e4:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   302e6:	f1b8 0f00 	cmp.w	r8, #0
   302ea:	d0ae      	beq.n	3024a <work_queue_main+0x13a>
	return node->next;
   302ec:	f8d8 3000 	ldr.w	r3, [r8]
   302f0:	2b00      	cmp	r3, #0
   302f2:	bf38      	it	cc
   302f4:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   302f6:	4640      	mov	r0, r8
   302f8:	4691      	mov	r9, r2
   302fa:	4698      	mov	r8, r3
   302fc:	e7e1      	b.n	302c2 <work_queue_main+0x1b2>
	parent->next = child;
   302fe:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   30302:	687b      	ldr	r3, [r7, #4]
   30304:	4283      	cmp	r3, r0
	list->tail = node;
   30306:	bf08      	it	eq
   30308:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   3030c:	e7e6      	b.n	302dc <work_queue_main+0x1cc>
   3030e:	bf00      	nop
   30310:	20002d30 	.word	0x20002d30
   30314:	20002d34 	.word	0x20002d34
   30318:	0003cd09 	.word	0x0003cd09
   3031c:	0003cd5b 	.word	0x0003cd5b
   30320:	0003c48a 	.word	0x0003c48a
   30324:	0003cd70 	.word	0x0003cd70
   30328:	0003cd2f 	.word	0x0003cd2f
   3032c:	0003cd46 	.word	0x0003cd46
   30330:	00041549 	.word	0x00041549
   30334:	00041528 	.word	0x00041528

00030338 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   30338:	68c3      	ldr	r3, [r0, #12]
{
   3033a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   3033c:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   30340:	079b      	lsls	r3, r3, #30
{
   30342:	4605      	mov	r5, r0
   30344:	460c      	mov	r4, r1
	if (ret) {
   30346:	d50d      	bpl.n	30364 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   30348:	2201      	movs	r2, #1
   3034a:	2100      	movs	r1, #0
   3034c:	f104 0008 	add.w	r0, r4, #8
   30350:	f009 ff8f 	bl	3a272 <z_impl_k_sem_init>
	parent->next = child;
   30354:	2300      	movs	r3, #0
   30356:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   30358:	4b05      	ldr	r3, [pc, #20]	; (30370 <cancel_sync_locked+0x38>)
	canceler->work = work;
   3035a:	6065      	str	r5, [r4, #4]
   3035c:	685a      	ldr	r2, [r3, #4]
   3035e:	b91a      	cbnz	r2, 30368 <cancel_sync_locked+0x30>
	list->head = node;
   30360:	e9c3 4400 	strd	r4, r4, [r3]
}
   30364:	4630      	mov	r0, r6
   30366:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   30368:	6014      	str	r4, [r2, #0]
	list->tail = node;
   3036a:	605c      	str	r4, [r3, #4]
}
   3036c:	e7fa      	b.n	30364 <cancel_sync_locked+0x2c>
   3036e:	bf00      	nop
   30370:	20002d34 	.word	0x20002d34

00030374 <submit_to_queue_locked>:
{
   30374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30376:	68c3      	ldr	r3, [r0, #12]
   30378:	079a      	lsls	r2, r3, #30
{
   3037a:	4604      	mov	r4, r0
   3037c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3037e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   30382:	d42b      	bmi.n	303dc <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   30384:	075f      	lsls	r7, r3, #29
   30386:	d42b      	bmi.n	303e0 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   30388:	680a      	ldr	r2, [r1, #0]
   3038a:	b90a      	cbnz	r2, 30390 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   3038c:	6882      	ldr	r2, [r0, #8]
   3038e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   30390:	07d8      	lsls	r0, r3, #31
   30392:	d528      	bpl.n	303e6 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   30394:	68a3      	ldr	r3, [r4, #8]
   30396:	b95b      	cbnz	r3, 303b0 <submit_to_queue_locked+0x3c>
   30398:	4924      	ldr	r1, [pc, #144]	; (3042c <submit_to_queue_locked+0xb8>)
   3039a:	4825      	ldr	r0, [pc, #148]	; (30430 <submit_to_queue_locked+0xbc>)
   3039c:	4a25      	ldr	r2, [pc, #148]	; (30434 <submit_to_queue_locked+0xc0>)
   3039e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   303a2:	f006 feba 	bl	3711a <printk>
   303a6:	4823      	ldr	r0, [pc, #140]	; (30434 <submit_to_queue_locked+0xc0>)
   303a8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   303ac:	f007 f85b 	bl	37466 <assert_post_action>
			*queuep = work->queue;
   303b0:	68a3      	ldr	r3, [r4, #8]
   303b2:	6033      	str	r3, [r6, #0]
			ret = 2;
   303b4:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   303b6:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   303b8:	b38f      	cbz	r7, 3041e <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   303ba:	4b1f      	ldr	r3, [pc, #124]	; (30438 <submit_to_queue_locked+0xc4>)
   303bc:	689b      	ldr	r3, [r3, #8]
   303be:	42bb      	cmp	r3, r7
   303c0:	d113      	bne.n	303ea <submit_to_queue_locked+0x76>
   303c2:	f009 ff0d 	bl	3a1e0 <k_is_in_isr>
   303c6:	f080 0001 	eor.w	r0, r0, #1
   303ca:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   303cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   303d0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   303d2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   303d6:	d525      	bpl.n	30424 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   303d8:	b14a      	cbz	r2, 303ee <submit_to_queue_locked+0x7a>
   303da:	b950      	cbnz	r0, 303f2 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   303dc:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   303e0:	2300      	movs	r3, #0
   303e2:	6033      	str	r3, [r6, #0]
	return ret;
   303e4:	e015      	b.n	30412 <submit_to_queue_locked+0x9e>
		ret = 1;
   303e6:	2501      	movs	r5, #1
   303e8:	e7e5      	b.n	303b6 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   303ea:	2000      	movs	r0, #0
   303ec:	e7ee      	b.n	303cc <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   303ee:	071b      	lsls	r3, r3, #28
   303f0:	d4f4      	bmi.n	303dc <submit_to_queue_locked+0x68>
	parent->next = child;
   303f2:	2300      	movs	r3, #0
   303f4:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   303f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   303fa:	b963      	cbnz	r3, 30416 <submit_to_queue_locked+0xa2>
	list->head = node;
   303fc:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   30400:	4638      	mov	r0, r7
   30402:	f009 ff46 	bl	3a292 <notify_queue_locked>
	*flagp |= BIT(bit);
   30406:	68e3      	ldr	r3, [r4, #12]
   30408:	f043 0304 	orr.w	r3, r3, #4
   3040c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   3040e:	6833      	ldr	r3, [r6, #0]
   30410:	60a3      	str	r3, [r4, #8]
}
   30412:	4628      	mov	r0, r5
   30414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   30416:	601c      	str	r4, [r3, #0]
	list->tail = node;
   30418:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   3041c:	e7f0      	b.n	30400 <submit_to_queue_locked+0x8c>
		return -EINVAL;
   3041e:	f06f 0515 	mvn.w	r5, #21
   30422:	e7dd      	b.n	303e0 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   30424:	f06f 0512 	mvn.w	r5, #18
   30428:	e7da      	b.n	303e0 <submit_to_queue_locked+0x6c>
   3042a:	bf00      	nop
   3042c:	00041560 	.word	0x00041560
   30430:	0003c48a 	.word	0x0003c48a
   30434:	00041528 	.word	0x00041528
   30438:	20002d00 	.word	0x20002d00

0003043c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   3043c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3043e:	4604      	mov	r4, r0
	__asm__ volatile(
   30440:	f04f 0340 	mov.w	r3, #64	; 0x40
   30444:	f3ef 8511 	mrs	r5, BASEPRI
   30448:	f383 8812 	msr	BASEPRI_MAX, r3
   3044c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30450:	481e      	ldr	r0, [pc, #120]	; (304cc <work_timeout+0x90>)
   30452:	f7ff f9b7 	bl	2f7c4 <z_spin_lock_valid>
   30456:	b968      	cbnz	r0, 30474 <work_timeout+0x38>
   30458:	4a1d      	ldr	r2, [pc, #116]	; (304d0 <work_timeout+0x94>)
   3045a:	491e      	ldr	r1, [pc, #120]	; (304d4 <work_timeout+0x98>)
   3045c:	481e      	ldr	r0, [pc, #120]	; (304d8 <work_timeout+0x9c>)
   3045e:	2381      	movs	r3, #129	; 0x81
   30460:	f006 fe5b 	bl	3711a <printk>
   30464:	4919      	ldr	r1, [pc, #100]	; (304cc <work_timeout+0x90>)
   30466:	481d      	ldr	r0, [pc, #116]	; (304dc <work_timeout+0xa0>)
   30468:	f006 fe57 	bl	3711a <printk>
   3046c:	4818      	ldr	r0, [pc, #96]	; (304d0 <work_timeout+0x94>)
   3046e:	2181      	movs	r1, #129	; 0x81
   30470:	f006 fff9 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   30474:	4815      	ldr	r0, [pc, #84]	; (304cc <work_timeout+0x90>)
   30476:	f7ff f9c3 	bl	2f800 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   3047a:	2300      	movs	r3, #0
   3047c:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   3047e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   30482:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   30486:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   30488:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   3048c:	d506      	bpl.n	3049c <work_timeout+0x60>
		queue = dw->queue;
   3048e:	69a3      	ldr	r3, [r4, #24]
   30490:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   30492:	a901      	add	r1, sp, #4
   30494:	f1a4 0010 	sub.w	r0, r4, #16
   30498:	f7ff ff6c 	bl	30374 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3049c:	480b      	ldr	r0, [pc, #44]	; (304cc <work_timeout+0x90>)
   3049e:	f7ff f99f 	bl	2f7e0 <z_spin_unlock_valid>
   304a2:	b968      	cbnz	r0, 304c0 <work_timeout+0x84>
   304a4:	4a0a      	ldr	r2, [pc, #40]	; (304d0 <work_timeout+0x94>)
   304a6:	490e      	ldr	r1, [pc, #56]	; (304e0 <work_timeout+0xa4>)
   304a8:	480b      	ldr	r0, [pc, #44]	; (304d8 <work_timeout+0x9c>)
   304aa:	23ac      	movs	r3, #172	; 0xac
   304ac:	f006 fe35 	bl	3711a <printk>
   304b0:	4906      	ldr	r1, [pc, #24]	; (304cc <work_timeout+0x90>)
   304b2:	480c      	ldr	r0, [pc, #48]	; (304e4 <work_timeout+0xa8>)
   304b4:	f006 fe31 	bl	3711a <printk>
   304b8:	4805      	ldr	r0, [pc, #20]	; (304d0 <work_timeout+0x94>)
   304ba:	21ac      	movs	r1, #172	; 0xac
   304bc:	f006 ffd3 	bl	37466 <assert_post_action>
	__asm__ volatile(
   304c0:	f385 8811 	msr	BASEPRI, r5
   304c4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   304c8:	b003      	add	sp, #12
   304ca:	bd30      	pop	{r4, r5, pc}
   304cc:	20002d30 	.word	0x20002d30
   304d0:	0003cd09 	.word	0x0003cd09
   304d4:	0003cd5b 	.word	0x0003cd5b
   304d8:	0003c48a 	.word	0x0003c48a
   304dc:	0003cd70 	.word	0x0003cd70
   304e0:	0003cd2f 	.word	0x0003cd2f
   304e4:	0003cd46 	.word	0x0003cd46

000304e8 <k_work_init>:
{
   304e8:	b538      	push	{r3, r4, r5, lr}
   304ea:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   304ec:	4604      	mov	r4, r0
   304ee:	b948      	cbnz	r0, 30504 <k_work_init+0x1c>
   304f0:	490d      	ldr	r1, [pc, #52]	; (30528 <k_work_init+0x40>)
   304f2:	480e      	ldr	r0, [pc, #56]	; (3052c <k_work_init+0x44>)
   304f4:	4a0e      	ldr	r2, [pc, #56]	; (30530 <k_work_init+0x48>)
   304f6:	2389      	movs	r3, #137	; 0x89
   304f8:	f006 fe0f 	bl	3711a <printk>
   304fc:	480c      	ldr	r0, [pc, #48]	; (30530 <k_work_init+0x48>)
   304fe:	2189      	movs	r1, #137	; 0x89
   30500:	f006 ffb1 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   30504:	b94d      	cbnz	r5, 3051a <k_work_init+0x32>
   30506:	490b      	ldr	r1, [pc, #44]	; (30534 <k_work_init+0x4c>)
   30508:	4808      	ldr	r0, [pc, #32]	; (3052c <k_work_init+0x44>)
   3050a:	4a09      	ldr	r2, [pc, #36]	; (30530 <k_work_init+0x48>)
   3050c:	238a      	movs	r3, #138	; 0x8a
   3050e:	f006 fe04 	bl	3711a <printk>
   30512:	4807      	ldr	r0, [pc, #28]	; (30530 <k_work_init+0x48>)
   30514:	218a      	movs	r1, #138	; 0x8a
   30516:	f006 ffa6 	bl	37466 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   3051a:	2210      	movs	r2, #16
   3051c:	2100      	movs	r1, #0
   3051e:	4620      	mov	r0, r4
   30520:	f00a f82a 	bl	3a578 <memset>
   30524:	6065      	str	r5, [r4, #4]
}
   30526:	bd38      	pop	{r3, r4, r5, pc}
   30528:	000415ff 	.word	0x000415ff
   3052c:	0003c48a 	.word	0x0003c48a
   30530:	00041528 	.word	0x00041528
   30534:	00041549 	.word	0x00041549

00030538 <k_work_submit_to_queue>:
{
   30538:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   3053a:	460c      	mov	r4, r1
{
   3053c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   3053e:	b959      	cbnz	r1, 30558 <k_work_submit_to_queue+0x20>
   30540:	4926      	ldr	r1, [pc, #152]	; (305dc <k_work_submit_to_queue+0xa4>)
   30542:	4827      	ldr	r0, [pc, #156]	; (305e0 <k_work_submit_to_queue+0xa8>)
   30544:	4a27      	ldr	r2, [pc, #156]	; (305e4 <k_work_submit_to_queue+0xac>)
   30546:	f240 1369 	movw	r3, #361	; 0x169
   3054a:	f006 fde6 	bl	3711a <printk>
   3054e:	4825      	ldr	r0, [pc, #148]	; (305e4 <k_work_submit_to_queue+0xac>)
   30550:	f240 1169 	movw	r1, #361	; 0x169
   30554:	f006 ff87 	bl	37466 <assert_post_action>
	__asm__ volatile(
   30558:	f04f 0340 	mov.w	r3, #64	; 0x40
   3055c:	f3ef 8511 	mrs	r5, BASEPRI
   30560:	f383 8812 	msr	BASEPRI_MAX, r3
   30564:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30568:	481f      	ldr	r0, [pc, #124]	; (305e8 <k_work_submit_to_queue+0xb0>)
   3056a:	f7ff f92b 	bl	2f7c4 <z_spin_lock_valid>
   3056e:	b968      	cbnz	r0, 3058c <k_work_submit_to_queue+0x54>
   30570:	4a1e      	ldr	r2, [pc, #120]	; (305ec <k_work_submit_to_queue+0xb4>)
   30572:	491f      	ldr	r1, [pc, #124]	; (305f0 <k_work_submit_to_queue+0xb8>)
   30574:	481a      	ldr	r0, [pc, #104]	; (305e0 <k_work_submit_to_queue+0xa8>)
   30576:	2381      	movs	r3, #129	; 0x81
   30578:	f006 fdcf 	bl	3711a <printk>
   3057c:	491a      	ldr	r1, [pc, #104]	; (305e8 <k_work_submit_to_queue+0xb0>)
   3057e:	481d      	ldr	r0, [pc, #116]	; (305f4 <k_work_submit_to_queue+0xbc>)
   30580:	f006 fdcb 	bl	3711a <printk>
   30584:	4819      	ldr	r0, [pc, #100]	; (305ec <k_work_submit_to_queue+0xb4>)
   30586:	2181      	movs	r1, #129	; 0x81
   30588:	f006 ff6d 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   3058c:	4816      	ldr	r0, [pc, #88]	; (305e8 <k_work_submit_to_queue+0xb0>)
   3058e:	f7ff f937 	bl	2f800 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   30592:	4620      	mov	r0, r4
   30594:	a901      	add	r1, sp, #4
   30596:	f7ff feed 	bl	30374 <submit_to_queue_locked>
   3059a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3059c:	4812      	ldr	r0, [pc, #72]	; (305e8 <k_work_submit_to_queue+0xb0>)
   3059e:	f7ff f91f 	bl	2f7e0 <z_spin_unlock_valid>
   305a2:	b968      	cbnz	r0, 305c0 <k_work_submit_to_queue+0x88>
   305a4:	4a11      	ldr	r2, [pc, #68]	; (305ec <k_work_submit_to_queue+0xb4>)
   305a6:	4914      	ldr	r1, [pc, #80]	; (305f8 <k_work_submit_to_queue+0xc0>)
   305a8:	480d      	ldr	r0, [pc, #52]	; (305e0 <k_work_submit_to_queue+0xa8>)
   305aa:	23ac      	movs	r3, #172	; 0xac
   305ac:	f006 fdb5 	bl	3711a <printk>
   305b0:	490d      	ldr	r1, [pc, #52]	; (305e8 <k_work_submit_to_queue+0xb0>)
   305b2:	4812      	ldr	r0, [pc, #72]	; (305fc <k_work_submit_to_queue+0xc4>)
   305b4:	f006 fdb1 	bl	3711a <printk>
   305b8:	480c      	ldr	r0, [pc, #48]	; (305ec <k_work_submit_to_queue+0xb4>)
   305ba:	21ac      	movs	r1, #172	; 0xac
   305bc:	f006 ff53 	bl	37466 <assert_post_action>
	__asm__ volatile(
   305c0:	f385 8811 	msr	BASEPRI, r5
   305c4:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   305c8:	2c00      	cmp	r4, #0
   305ca:	dd04      	ble.n	305d6 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   305cc:	f001 fbae 	bl	31d2c <z_impl_k_is_preempt_thread>
   305d0:	b108      	cbz	r0, 305d6 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   305d2:	f001 fa1b 	bl	31a0c <z_impl_k_yield>
}
   305d6:	4620      	mov	r0, r4
   305d8:	b003      	add	sp, #12
   305da:	bd30      	pop	{r4, r5, pc}
   305dc:	000415ff 	.word	0x000415ff
   305e0:	0003c48a 	.word	0x0003c48a
   305e4:	00041528 	.word	0x00041528
   305e8:	20002d30 	.word	0x20002d30
   305ec:	0003cd09 	.word	0x0003cd09
   305f0:	0003cd5b 	.word	0x0003cd5b
   305f4:	0003cd70 	.word	0x0003cd70
   305f8:	0003cd2f 	.word	0x0003cd2f
   305fc:	0003cd46 	.word	0x0003cd46

00030600 <k_work_submit>:
{
   30600:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   30602:	4801      	ldr	r0, [pc, #4]	; (30608 <k_work_submit+0x8>)
   30604:	f7ff bf98 	b.w	30538 <k_work_submit_to_queue>
   30608:	20002138 	.word	0x20002138

0003060c <k_work_queue_start>:
{
   3060c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30610:	b088      	sub	sp, #32
   30612:	460e      	mov	r6, r1
   30614:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   30616:	4617      	mov	r7, r2
   30618:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   3061a:	4604      	mov	r4, r0
   3061c:	b958      	cbnz	r0, 30636 <k_work_queue_start+0x2a>
   3061e:	492e      	ldr	r1, [pc, #184]	; (306d8 <k_work_queue_start+0xcc>)
   30620:	482e      	ldr	r0, [pc, #184]	; (306dc <k_work_queue_start+0xd0>)
   30622:	4a2f      	ldr	r2, [pc, #188]	; (306e0 <k_work_queue_start+0xd4>)
   30624:	f240 23b5 	movw	r3, #693	; 0x2b5
   30628:	f006 fd77 	bl	3711a <printk>
   3062c:	482c      	ldr	r0, [pc, #176]	; (306e0 <k_work_queue_start+0xd4>)
   3062e:	f240 21b5 	movw	r1, #693	; 0x2b5
   30632:	f006 ff18 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   30636:	b95e      	cbnz	r6, 30650 <k_work_queue_start+0x44>
   30638:	492a      	ldr	r1, [pc, #168]	; (306e4 <k_work_queue_start+0xd8>)
   3063a:	4828      	ldr	r0, [pc, #160]	; (306dc <k_work_queue_start+0xd0>)
   3063c:	4a28      	ldr	r2, [pc, #160]	; (306e0 <k_work_queue_start+0xd4>)
   3063e:	f240 23b6 	movw	r3, #694	; 0x2b6
   30642:	f006 fd6a 	bl	3711a <printk>
   30646:	4826      	ldr	r0, [pc, #152]	; (306e0 <k_work_queue_start+0xd4>)
   30648:	f240 21b6 	movw	r1, #694	; 0x2b6
   3064c:	f006 ff0b 	bl	37466 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   30650:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   30654:	07db      	lsls	r3, r3, #31
   30656:	d50b      	bpl.n	30670 <k_work_queue_start+0x64>
   30658:	4923      	ldr	r1, [pc, #140]	; (306e8 <k_work_queue_start+0xdc>)
   3065a:	4820      	ldr	r0, [pc, #128]	; (306dc <k_work_queue_start+0xd0>)
   3065c:	4a20      	ldr	r2, [pc, #128]	; (306e0 <k_work_queue_start+0xd4>)
   3065e:	f240 23b7 	movw	r3, #695	; 0x2b7
   30662:	f006 fd5a 	bl	3711a <printk>
   30666:	481e      	ldr	r0, [pc, #120]	; (306e0 <k_work_queue_start+0xd4>)
   30668:	f240 21b7 	movw	r1, #695	; 0x2b7
   3066c:	f006 fefb 	bl	37466 <assert_post_action>
	list->head = NULL;
   30670:	2300      	movs	r3, #0
	list->tail = NULL;
   30672:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   30676:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   3067a:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   3067e:	f104 0390 	add.w	r3, r4, #144	; 0x90
   30682:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   30686:	b32d      	cbz	r5, 306d4 <k_work_queue_start+0xc8>
   30688:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   3068a:	2b00      	cmp	r3, #0
   3068c:	f240 1101 	movw	r1, #257	; 0x101
   30690:	bf08      	it	eq
   30692:	2101      	moveq	r1, #1
	*flagp = flags;
   30694:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   30698:	f04f 32ff 	mov.w	r2, #4294967295
   3069c:	f04f 33ff 	mov.w	r3, #4294967295
   306a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   306a4:	2200      	movs	r2, #0
   306a6:	e9cd 8203 	strd	r8, r2, [sp, #12]
   306aa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   306ae:	4b0f      	ldr	r3, [pc, #60]	; (306ec <k_work_queue_start+0xe0>)
   306b0:	9400      	str	r4, [sp, #0]
   306b2:	463a      	mov	r2, r7
   306b4:	4631      	mov	r1, r6
   306b6:	4620      	mov	r0, r4
   306b8:	f7fe ffa6 	bl	2f608 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   306bc:	b125      	cbz	r5, 306c8 <k_work_queue_start+0xbc>
   306be:	6829      	ldr	r1, [r5, #0]
   306c0:	b111      	cbz	r1, 306c8 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   306c2:	4620      	mov	r0, r4
   306c4:	f009 fd92 	bl	3a1ec <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   306c8:	4620      	mov	r0, r4
}
   306ca:	b008      	add	sp, #32
   306cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   306d0:	f009 bd91 	b.w	3a1f6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   306d4:	2101      	movs	r1, #1
   306d6:	e7dd      	b.n	30694 <k_work_queue_start+0x88>
   306d8:	000415be 	.word	0x000415be
   306dc:	0003c48a 	.word	0x0003c48a
   306e0:	00041528 	.word	0x00041528
   306e4:	000415c4 	.word	0x000415c4
   306e8:	000415ca 	.word	0x000415ca
   306ec:	00030111 	.word	0x00030111

000306f0 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   306f0:	b538      	push	{r3, r4, r5, lr}
   306f2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   306f4:	4604      	mov	r4, r0
   306f6:	b958      	cbnz	r0, 30710 <k_work_init_delayable+0x20>
   306f8:	4911      	ldr	r1, [pc, #68]	; (30740 <k_work_init_delayable+0x50>)
   306fa:	4812      	ldr	r0, [pc, #72]	; (30744 <k_work_init_delayable+0x54>)
   306fc:	4a12      	ldr	r2, [pc, #72]	; (30748 <k_work_init_delayable+0x58>)
   306fe:	f240 332d 	movw	r3, #813	; 0x32d
   30702:	f006 fd0a 	bl	3711a <printk>
   30706:	4810      	ldr	r0, [pc, #64]	; (30748 <k_work_init_delayable+0x58>)
   30708:	f240 312d 	movw	r1, #813	; 0x32d
   3070c:	f006 feab 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   30710:	b95d      	cbnz	r5, 3072a <k_work_init_delayable+0x3a>
   30712:	490e      	ldr	r1, [pc, #56]	; (3074c <k_work_init_delayable+0x5c>)
   30714:	480b      	ldr	r0, [pc, #44]	; (30744 <k_work_init_delayable+0x54>)
   30716:	4a0c      	ldr	r2, [pc, #48]	; (30748 <k_work_init_delayable+0x58>)
   30718:	f240 332e 	movw	r3, #814	; 0x32e
   3071c:	f006 fcfd 	bl	3711a <printk>
   30720:	4809      	ldr	r0, [pc, #36]	; (30748 <k_work_init_delayable+0x58>)
   30722:	f240 312e 	movw	r1, #814	; 0x32e
   30726:	f006 fe9e 	bl	37466 <assert_post_action>

	*dwork = (struct k_work_delayable){
   3072a:	2230      	movs	r2, #48	; 0x30
   3072c:	2100      	movs	r1, #0
   3072e:	4620      	mov	r0, r4
   30730:	f009 ff22 	bl	3a578 <memset>
   30734:	f44f 7380 	mov.w	r3, #256	; 0x100
   30738:	6065      	str	r5, [r4, #4]
   3073a:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   3073c:	bd38      	pop	{r3, r4, r5, pc}
   3073e:	bf00      	nop
   30740:	000415fe 	.word	0x000415fe
   30744:	0003c48a 	.word	0x0003c48a
   30748:	00041528 	.word	0x00041528
   3074c:	00041549 	.word	0x00041549

00030750 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   30750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   30752:	4616      	mov	r6, r2
   30754:	9001      	str	r0, [sp, #4]
   30756:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   30758:	460c      	mov	r4, r1
   3075a:	b959      	cbnz	r1, 30774 <k_work_schedule_for_queue+0x24>
   3075c:	492e      	ldr	r1, [pc, #184]	; (30818 <k_work_schedule_for_queue+0xc8>)
   3075e:	482f      	ldr	r0, [pc, #188]	; (3081c <k_work_schedule_for_queue+0xcc>)
   30760:	4a2f      	ldr	r2, [pc, #188]	; (30820 <k_work_schedule_for_queue+0xd0>)
   30762:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   30766:	f006 fcd8 	bl	3711a <printk>
   3076a:	482d      	ldr	r0, [pc, #180]	; (30820 <k_work_schedule_for_queue+0xd0>)
   3076c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   30770:	f006 fe79 	bl	37466 <assert_post_action>
	__asm__ volatile(
   30774:	f04f 0340 	mov.w	r3, #64	; 0x40
   30778:	f3ef 8511 	mrs	r5, BASEPRI
   3077c:	f383 8812 	msr	BASEPRI_MAX, r3
   30780:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30784:	4827      	ldr	r0, [pc, #156]	; (30824 <k_work_schedule_for_queue+0xd4>)
   30786:	f7ff f81d 	bl	2f7c4 <z_spin_lock_valid>
   3078a:	b968      	cbnz	r0, 307a8 <k_work_schedule_for_queue+0x58>
   3078c:	4a26      	ldr	r2, [pc, #152]	; (30828 <k_work_schedule_for_queue+0xd8>)
   3078e:	4927      	ldr	r1, [pc, #156]	; (3082c <k_work_schedule_for_queue+0xdc>)
   30790:	4822      	ldr	r0, [pc, #136]	; (3081c <k_work_schedule_for_queue+0xcc>)
   30792:	2381      	movs	r3, #129	; 0x81
   30794:	f006 fcc1 	bl	3711a <printk>
   30798:	4922      	ldr	r1, [pc, #136]	; (30824 <k_work_schedule_for_queue+0xd4>)
   3079a:	4825      	ldr	r0, [pc, #148]	; (30830 <k_work_schedule_for_queue+0xe0>)
   3079c:	f006 fcbd 	bl	3711a <printk>
   307a0:	4821      	ldr	r0, [pc, #132]	; (30828 <k_work_schedule_for_queue+0xd8>)
   307a2:	2181      	movs	r1, #129	; 0x81
   307a4:	f006 fe5f 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   307a8:	481e      	ldr	r0, [pc, #120]	; (30824 <k_work_schedule_for_queue+0xd4>)
   307aa:	f7ff f829 	bl	2f800 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   307ae:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   307b0:	f013 0f0e 	tst.w	r3, #14
   307b4:	d12e      	bne.n	30814 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   307b6:	ea56 0207 	orrs.w	r2, r6, r7
   307ba:	d11d      	bne.n	307f8 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   307bc:	4620      	mov	r0, r4
   307be:	a901      	add	r1, sp, #4
   307c0:	f7ff fdd8 	bl	30374 <submit_to_queue_locked>
   307c4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   307c6:	4817      	ldr	r0, [pc, #92]	; (30824 <k_work_schedule_for_queue+0xd4>)
   307c8:	f7ff f80a 	bl	2f7e0 <z_spin_unlock_valid>
   307cc:	b968      	cbnz	r0, 307ea <k_work_schedule_for_queue+0x9a>
   307ce:	4a16      	ldr	r2, [pc, #88]	; (30828 <k_work_schedule_for_queue+0xd8>)
   307d0:	4918      	ldr	r1, [pc, #96]	; (30834 <k_work_schedule_for_queue+0xe4>)
   307d2:	4812      	ldr	r0, [pc, #72]	; (3081c <k_work_schedule_for_queue+0xcc>)
   307d4:	23ac      	movs	r3, #172	; 0xac
   307d6:	f006 fca0 	bl	3711a <printk>
   307da:	4912      	ldr	r1, [pc, #72]	; (30824 <k_work_schedule_for_queue+0xd4>)
   307dc:	4816      	ldr	r0, [pc, #88]	; (30838 <k_work_schedule_for_queue+0xe8>)
   307de:	f006 fc9c 	bl	3711a <printk>
   307e2:	4811      	ldr	r0, [pc, #68]	; (30828 <k_work_schedule_for_queue+0xd8>)
   307e4:	21ac      	movs	r1, #172	; 0xac
   307e6:	f006 fe3e 	bl	37466 <assert_post_action>
	__asm__ volatile(
   307ea:	f385 8811 	msr	BASEPRI, r5
   307ee:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   307f2:	4620      	mov	r0, r4
   307f4:	b003      	add	sp, #12
   307f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   307f8:	f043 0308 	orr.w	r3, r3, #8
   307fc:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   307fe:	9b01      	ldr	r3, [sp, #4]
   30800:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   30802:	f104 0010 	add.w	r0, r4, #16
   30806:	490d      	ldr	r1, [pc, #52]	; (3083c <k_work_schedule_for_queue+0xec>)
   30808:	4632      	mov	r2, r6
   3080a:	463b      	mov	r3, r7
   3080c:	f001 fc26 	bl	3205c <z_add_timeout>
	return ret;
   30810:	2401      	movs	r4, #1
   30812:	e7d8      	b.n	307c6 <k_work_schedule_for_queue+0x76>
	int ret = 0;
   30814:	2400      	movs	r4, #0
   30816:	e7d6      	b.n	307c6 <k_work_schedule_for_queue+0x76>
   30818:	000415fe 	.word	0x000415fe
   3081c:	0003c48a 	.word	0x0003c48a
   30820:	00041528 	.word	0x00041528
   30824:	20002d30 	.word	0x20002d30
   30828:	0003cd09 	.word	0x0003cd09
   3082c:	0003cd5b 	.word	0x0003cd5b
   30830:	0003cd70 	.word	0x0003cd70
   30834:	0003cd2f 	.word	0x0003cd2f
   30838:	0003cd46 	.word	0x0003cd46
   3083c:	0003043d 	.word	0x0003043d

00030840 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   30840:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   30842:	4801      	ldr	r0, [pc, #4]	; (30848 <k_work_schedule+0x8>)
   30844:	f7ff bf84 	b.w	30750 <k_work_schedule_for_queue>
   30848:	20002138 	.word	0x20002138

0003084c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   3084c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3084e:	4616      	mov	r6, r2
   30850:	9001      	str	r0, [sp, #4]
   30852:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   30854:	460c      	mov	r4, r1
   30856:	b959      	cbnz	r1, 30870 <k_work_reschedule_for_queue+0x24>
   30858:	492d      	ldr	r1, [pc, #180]	; (30910 <k_work_reschedule_for_queue+0xc4>)
   3085a:	482e      	ldr	r0, [pc, #184]	; (30914 <k_work_reschedule_for_queue+0xc8>)
   3085c:	4a2e      	ldr	r2, [pc, #184]	; (30918 <k_work_reschedule_for_queue+0xcc>)
   3085e:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   30862:	f006 fc5a 	bl	3711a <printk>
   30866:	482c      	ldr	r0, [pc, #176]	; (30918 <k_work_reschedule_for_queue+0xcc>)
   30868:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   3086c:	f006 fdfb 	bl	37466 <assert_post_action>
	__asm__ volatile(
   30870:	f04f 0340 	mov.w	r3, #64	; 0x40
   30874:	f3ef 8511 	mrs	r5, BASEPRI
   30878:	f383 8812 	msr	BASEPRI_MAX, r3
   3087c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30880:	4826      	ldr	r0, [pc, #152]	; (3091c <k_work_reschedule_for_queue+0xd0>)
   30882:	f7fe ff9f 	bl	2f7c4 <z_spin_lock_valid>
   30886:	b968      	cbnz	r0, 308a4 <k_work_reschedule_for_queue+0x58>
   30888:	4a25      	ldr	r2, [pc, #148]	; (30920 <k_work_reschedule_for_queue+0xd4>)
   3088a:	4926      	ldr	r1, [pc, #152]	; (30924 <k_work_reschedule_for_queue+0xd8>)
   3088c:	4821      	ldr	r0, [pc, #132]	; (30914 <k_work_reschedule_for_queue+0xc8>)
   3088e:	2381      	movs	r3, #129	; 0x81
   30890:	f006 fc43 	bl	3711a <printk>
   30894:	4921      	ldr	r1, [pc, #132]	; (3091c <k_work_reschedule_for_queue+0xd0>)
   30896:	4824      	ldr	r0, [pc, #144]	; (30928 <k_work_reschedule_for_queue+0xdc>)
   30898:	f006 fc3f 	bl	3711a <printk>
   3089c:	4820      	ldr	r0, [pc, #128]	; (30920 <k_work_reschedule_for_queue+0xd4>)
   3089e:	2181      	movs	r1, #129	; 0x81
   308a0:	f006 fde1 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   308a4:	481d      	ldr	r0, [pc, #116]	; (3091c <k_work_reschedule_for_queue+0xd0>)
   308a6:	f7fe ffab 	bl	2f800 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   308aa:	4620      	mov	r0, r4
   308ac:	f009 fcf8 	bl	3a2a0 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   308b0:	ea56 0307 	orrs.w	r3, r6, r7
   308b4:	d11d      	bne.n	308f2 <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   308b6:	4620      	mov	r0, r4
   308b8:	a901      	add	r1, sp, #4
   308ba:	f7ff fd5b 	bl	30374 <submit_to_queue_locked>
   308be:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   308c0:	4816      	ldr	r0, [pc, #88]	; (3091c <k_work_reschedule_for_queue+0xd0>)
   308c2:	f7fe ff8d 	bl	2f7e0 <z_spin_unlock_valid>
   308c6:	b968      	cbnz	r0, 308e4 <k_work_reschedule_for_queue+0x98>
   308c8:	4a15      	ldr	r2, [pc, #84]	; (30920 <k_work_reschedule_for_queue+0xd4>)
   308ca:	4918      	ldr	r1, [pc, #96]	; (3092c <k_work_reschedule_for_queue+0xe0>)
   308cc:	4811      	ldr	r0, [pc, #68]	; (30914 <k_work_reschedule_for_queue+0xc8>)
   308ce:	23ac      	movs	r3, #172	; 0xac
   308d0:	f006 fc23 	bl	3711a <printk>
   308d4:	4911      	ldr	r1, [pc, #68]	; (3091c <k_work_reschedule_for_queue+0xd0>)
   308d6:	4816      	ldr	r0, [pc, #88]	; (30930 <k_work_reschedule_for_queue+0xe4>)
   308d8:	f006 fc1f 	bl	3711a <printk>
   308dc:	4810      	ldr	r0, [pc, #64]	; (30920 <k_work_reschedule_for_queue+0xd4>)
   308de:	21ac      	movs	r1, #172	; 0xac
   308e0:	f006 fdc1 	bl	37466 <assert_post_action>
	__asm__ volatile(
   308e4:	f385 8811 	msr	BASEPRI, r5
   308e8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   308ec:	4620      	mov	r0, r4
   308ee:	b003      	add	sp, #12
   308f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   308f2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   308f4:	490f      	ldr	r1, [pc, #60]	; (30934 <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
   308f6:	f043 0308 	orr.w	r3, r3, #8
   308fa:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   308fc:	9b01      	ldr	r3, [sp, #4]
   308fe:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   30900:	f104 0010 	add.w	r0, r4, #16
   30904:	4632      	mov	r2, r6
   30906:	463b      	mov	r3, r7
   30908:	f001 fba8 	bl	3205c <z_add_timeout>
	return ret;
   3090c:	2401      	movs	r4, #1
   3090e:	e7d7      	b.n	308c0 <k_work_reschedule_for_queue+0x74>
   30910:	000415fe 	.word	0x000415fe
   30914:	0003c48a 	.word	0x0003c48a
   30918:	00041528 	.word	0x00041528
   3091c:	20002d30 	.word	0x20002d30
   30920:	0003cd09 	.word	0x0003cd09
   30924:	0003cd5b 	.word	0x0003cd5b
   30928:	0003cd70 	.word	0x0003cd70
   3092c:	0003cd2f 	.word	0x0003cd2f
   30930:	0003cd46 	.word	0x0003cd46
   30934:	0003043d 	.word	0x0003043d

00030938 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   30938:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   3093a:	4801      	ldr	r0, [pc, #4]	; (30940 <k_work_reschedule+0x8>)
   3093c:	f7ff bf86 	b.w	3084c <k_work_reschedule_for_queue>
   30940:	20002138 	.word	0x20002138

00030944 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   30944:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   30946:	4604      	mov	r4, r0
   30948:	b958      	cbnz	r0, 30962 <k_work_cancel_delayable+0x1e>
   3094a:	4924      	ldr	r1, [pc, #144]	; (309dc <k_work_cancel_delayable+0x98>)
   3094c:	4824      	ldr	r0, [pc, #144]	; (309e0 <k_work_cancel_delayable+0x9c>)
   3094e:	4a25      	ldr	r2, [pc, #148]	; (309e4 <k_work_cancel_delayable+0xa0>)
   30950:	f240 33ea 	movw	r3, #1002	; 0x3ea
   30954:	f006 fbe1 	bl	3711a <printk>
   30958:	4822      	ldr	r0, [pc, #136]	; (309e4 <k_work_cancel_delayable+0xa0>)
   3095a:	f240 31ea 	movw	r1, #1002	; 0x3ea
   3095e:	f006 fd82 	bl	37466 <assert_post_action>
	__asm__ volatile(
   30962:	f04f 0340 	mov.w	r3, #64	; 0x40
   30966:	f3ef 8511 	mrs	r5, BASEPRI
   3096a:	f383 8812 	msr	BASEPRI_MAX, r3
   3096e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30972:	481d      	ldr	r0, [pc, #116]	; (309e8 <k_work_cancel_delayable+0xa4>)
   30974:	f7fe ff26 	bl	2f7c4 <z_spin_lock_valid>
   30978:	b968      	cbnz	r0, 30996 <k_work_cancel_delayable+0x52>
   3097a:	4a1c      	ldr	r2, [pc, #112]	; (309ec <k_work_cancel_delayable+0xa8>)
   3097c:	491c      	ldr	r1, [pc, #112]	; (309f0 <k_work_cancel_delayable+0xac>)
   3097e:	4818      	ldr	r0, [pc, #96]	; (309e0 <k_work_cancel_delayable+0x9c>)
   30980:	2381      	movs	r3, #129	; 0x81
   30982:	f006 fbca 	bl	3711a <printk>
   30986:	4918      	ldr	r1, [pc, #96]	; (309e8 <k_work_cancel_delayable+0xa4>)
   30988:	481a      	ldr	r0, [pc, #104]	; (309f4 <k_work_cancel_delayable+0xb0>)
   3098a:	f006 fbc6 	bl	3711a <printk>
   3098e:	4817      	ldr	r0, [pc, #92]	; (309ec <k_work_cancel_delayable+0xa8>)
   30990:	2181      	movs	r1, #129	; 0x81
   30992:	f006 fd68 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   30996:	4814      	ldr	r0, [pc, #80]	; (309e8 <k_work_cancel_delayable+0xa4>)
   30998:	f7fe ff32 	bl	2f800 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   3099c:	4620      	mov	r0, r4
   3099e:	f009 fc7f 	bl	3a2a0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   309a2:	4620      	mov	r0, r4
   309a4:	f009 fc8a 	bl	3a2bc <cancel_async_locked>
   309a8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   309aa:	480f      	ldr	r0, [pc, #60]	; (309e8 <k_work_cancel_delayable+0xa4>)
   309ac:	f7fe ff18 	bl	2f7e0 <z_spin_unlock_valid>
   309b0:	b968      	cbnz	r0, 309ce <k_work_cancel_delayable+0x8a>
   309b2:	4a0e      	ldr	r2, [pc, #56]	; (309ec <k_work_cancel_delayable+0xa8>)
   309b4:	4910      	ldr	r1, [pc, #64]	; (309f8 <k_work_cancel_delayable+0xb4>)
   309b6:	480a      	ldr	r0, [pc, #40]	; (309e0 <k_work_cancel_delayable+0x9c>)
   309b8:	23ac      	movs	r3, #172	; 0xac
   309ba:	f006 fbae 	bl	3711a <printk>
   309be:	490a      	ldr	r1, [pc, #40]	; (309e8 <k_work_cancel_delayable+0xa4>)
   309c0:	480e      	ldr	r0, [pc, #56]	; (309fc <k_work_cancel_delayable+0xb8>)
   309c2:	f006 fbaa 	bl	3711a <printk>
   309c6:	4809      	ldr	r0, [pc, #36]	; (309ec <k_work_cancel_delayable+0xa8>)
   309c8:	21ac      	movs	r1, #172	; 0xac
   309ca:	f006 fd4c 	bl	37466 <assert_post_action>
	__asm__ volatile(
   309ce:	f385 8811 	msr	BASEPRI, r5
   309d2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   309d6:	4620      	mov	r0, r4
   309d8:	bd38      	pop	{r3, r4, r5, pc}
   309da:	bf00      	nop
   309dc:	000415fe 	.word	0x000415fe
   309e0:	0003c48a 	.word	0x0003c48a
   309e4:	00041528 	.word	0x00041528
   309e8:	20002d30 	.word	0x20002d30
   309ec:	0003cd09 	.word	0x0003cd09
   309f0:	0003cd5b 	.word	0x0003cd5b
   309f4:	0003cd70 	.word	0x0003cd70
   309f8:	0003cd2f 	.word	0x0003cd2f
   309fc:	0003cd46 	.word	0x0003cd46

00030a00 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   30a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30a04:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   30a06:	4605      	mov	r5, r0
   30a08:	b958      	cbnz	r0, 30a22 <k_work_cancel_delayable_sync+0x22>
   30a0a:	493d      	ldr	r1, [pc, #244]	; (30b00 <k_work_cancel_delayable_sync+0x100>)
   30a0c:	483d      	ldr	r0, [pc, #244]	; (30b04 <k_work_cancel_delayable_sync+0x104>)
   30a0e:	4a3e      	ldr	r2, [pc, #248]	; (30b08 <k_work_cancel_delayable_sync+0x108>)
   30a10:	f240 33fb 	movw	r3, #1019	; 0x3fb
   30a14:	f006 fb81 	bl	3711a <printk>
   30a18:	483b      	ldr	r0, [pc, #236]	; (30b08 <k_work_cancel_delayable_sync+0x108>)
   30a1a:	f240 31fb 	movw	r1, #1019	; 0x3fb
   30a1e:	f006 fd22 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   30a22:	b95e      	cbnz	r6, 30a3c <k_work_cancel_delayable_sync+0x3c>
   30a24:	4939      	ldr	r1, [pc, #228]	; (30b0c <k_work_cancel_delayable_sync+0x10c>)
   30a26:	4837      	ldr	r0, [pc, #220]	; (30b04 <k_work_cancel_delayable_sync+0x104>)
   30a28:	4a37      	ldr	r2, [pc, #220]	; (30b08 <k_work_cancel_delayable_sync+0x108>)
   30a2a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
   30a2e:	f006 fb74 	bl	3711a <printk>
   30a32:	4835      	ldr	r0, [pc, #212]	; (30b08 <k_work_cancel_delayable_sync+0x108>)
   30a34:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   30a38:	f006 fd15 	bl	37466 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   30a3c:	f009 fbd0 	bl	3a1e0 <k_is_in_isr>
   30a40:	b158      	cbz	r0, 30a5a <k_work_cancel_delayable_sync+0x5a>
   30a42:	4933      	ldr	r1, [pc, #204]	; (30b10 <k_work_cancel_delayable_sync+0x110>)
   30a44:	482f      	ldr	r0, [pc, #188]	; (30b04 <k_work_cancel_delayable_sync+0x104>)
   30a46:	4a30      	ldr	r2, [pc, #192]	; (30b08 <k_work_cancel_delayable_sync+0x108>)
   30a48:	f240 33fd 	movw	r3, #1021	; 0x3fd
   30a4c:	f006 fb65 	bl	3711a <printk>
   30a50:	482d      	ldr	r0, [pc, #180]	; (30b08 <k_work_cancel_delayable_sync+0x108>)
   30a52:	f240 31fd 	movw	r1, #1021	; 0x3fd
   30a56:	f006 fd06 	bl	37466 <assert_post_action>
	__asm__ volatile(
   30a5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   30a5e:	f3ef 8811 	mrs	r8, BASEPRI
   30a62:	f383 8812 	msr	BASEPRI_MAX, r3
   30a66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30a6a:	482a      	ldr	r0, [pc, #168]	; (30b14 <k_work_cancel_delayable_sync+0x114>)
   30a6c:	f7fe feaa 	bl	2f7c4 <z_spin_lock_valid>
   30a70:	b968      	cbnz	r0, 30a8e <k_work_cancel_delayable_sync+0x8e>
   30a72:	4a29      	ldr	r2, [pc, #164]	; (30b18 <k_work_cancel_delayable_sync+0x118>)
   30a74:	4929      	ldr	r1, [pc, #164]	; (30b1c <k_work_cancel_delayable_sync+0x11c>)
   30a76:	4823      	ldr	r0, [pc, #140]	; (30b04 <k_work_cancel_delayable_sync+0x104>)
   30a78:	2381      	movs	r3, #129	; 0x81
   30a7a:	f006 fb4e 	bl	3711a <printk>
   30a7e:	4925      	ldr	r1, [pc, #148]	; (30b14 <k_work_cancel_delayable_sync+0x114>)
   30a80:	4827      	ldr	r0, [pc, #156]	; (30b20 <k_work_cancel_delayable_sync+0x120>)
   30a82:	f006 fb4a 	bl	3711a <printk>
   30a86:	4824      	ldr	r0, [pc, #144]	; (30b18 <k_work_cancel_delayable_sync+0x118>)
   30a88:	2181      	movs	r1, #129	; 0x81
   30a8a:	f006 fcec 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   30a8e:	4821      	ldr	r0, [pc, #132]	; (30b14 <k_work_cancel_delayable_sync+0x114>)
   30a90:	f7fe feb6 	bl	2f800 <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   30a94:	68ec      	ldr	r4, [r5, #12]
   30a96:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   30a9a:	2c00      	cmp	r4, #0
   30a9c:	bf14      	ite	ne
   30a9e:	2701      	movne	r7, #1
   30aa0:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   30aa2:	d00a      	beq.n	30aba <k_work_cancel_delayable_sync+0xba>
	(void)unschedule_locked(dwork);
   30aa4:	4628      	mov	r0, r5
   30aa6:	f009 fbfb 	bl	3a2a0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   30aaa:	4628      	mov	r0, r5
   30aac:	f009 fc06 	bl	3a2bc <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   30ab0:	4631      	mov	r1, r6
   30ab2:	4628      	mov	r0, r5
   30ab4:	f7ff fc40 	bl	30338 <cancel_sync_locked>
   30ab8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30aba:	4816      	ldr	r0, [pc, #88]	; (30b14 <k_work_cancel_delayable_sync+0x114>)
   30abc:	f7fe fe90 	bl	2f7e0 <z_spin_unlock_valid>
   30ac0:	b968      	cbnz	r0, 30ade <k_work_cancel_delayable_sync+0xde>
   30ac2:	4a15      	ldr	r2, [pc, #84]	; (30b18 <k_work_cancel_delayable_sync+0x118>)
   30ac4:	4917      	ldr	r1, [pc, #92]	; (30b24 <k_work_cancel_delayable_sync+0x124>)
   30ac6:	480f      	ldr	r0, [pc, #60]	; (30b04 <k_work_cancel_delayable_sync+0x104>)
   30ac8:	23ac      	movs	r3, #172	; 0xac
   30aca:	f006 fb26 	bl	3711a <printk>
   30ace:	4911      	ldr	r1, [pc, #68]	; (30b14 <k_work_cancel_delayable_sync+0x114>)
   30ad0:	4815      	ldr	r0, [pc, #84]	; (30b28 <k_work_cancel_delayable_sync+0x128>)
   30ad2:	f006 fb22 	bl	3711a <printk>
   30ad6:	4810      	ldr	r0, [pc, #64]	; (30b18 <k_work_cancel_delayable_sync+0x118>)
   30ad8:	21ac      	movs	r1, #172	; 0xac
   30ada:	f006 fcc4 	bl	37466 <assert_post_action>
	__asm__ volatile(
   30ade:	f388 8811 	msr	BASEPRI, r8
   30ae2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   30ae6:	b13c      	cbz	r4, 30af8 <k_work_cancel_delayable_sync+0xf8>
	return z_impl_k_sem_take(sem, timeout);
   30ae8:	f04f 32ff 	mov.w	r2, #4294967295
   30aec:	f04f 33ff 	mov.w	r3, #4294967295
   30af0:	f106 0008 	add.w	r0, r6, #8
   30af4:	f7ff fa28 	bl	2ff48 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   30af8:	4638      	mov	r0, r7
   30afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30afe:	bf00      	nop
   30b00:	000415fe 	.word	0x000415fe
   30b04:	0003c48a 	.word	0x0003c48a
   30b08:	00041528 	.word	0x00041528
   30b0c:	000415aa 	.word	0x000415aa
   30b10:	0003e992 	.word	0x0003e992
   30b14:	20002d30 	.word	0x20002d30
   30b18:	0003cd09 	.word	0x0003cd09
   30b1c:	0003cd5b 	.word	0x0003cd5b
   30b20:	0003cd70 	.word	0x0003cd70
   30b24:	0003cd2f 	.word	0x0003cd2f
   30b28:	0003cd46 	.word	0x0003cd46

00030b2c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   30b2c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   30b2e:	4c08      	ldr	r4, [pc, #32]	; (30b50 <z_reset_time_slice+0x24>)
   30b30:	6823      	ldr	r3, [r4, #0]
   30b32:	b15b      	cbz	r3, 30b4c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   30b34:	f7fb fa52 	bl	2bfdc <sys_clock_elapsed>
   30b38:	4603      	mov	r3, r0
   30b3a:	6820      	ldr	r0, [r4, #0]
   30b3c:	4a05      	ldr	r2, [pc, #20]	; (30b54 <z_reset_time_slice+0x28>)
   30b3e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   30b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   30b44:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   30b46:	2100      	movs	r1, #0
   30b48:	f001 bbf2 	b.w	32330 <z_set_timeout_expiry>
}
   30b4c:	bd10      	pop	{r4, pc}
   30b4e:	bf00      	nop
   30b50:	20002d48 	.word	0x20002d48
   30b54:	20002d00 	.word	0x20002d00

00030b58 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   30b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30b5a:	4604      	mov	r4, r0
   30b5c:	460d      	mov	r5, r1
	__asm__ volatile(
   30b5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   30b62:	f3ef 8611 	mrs	r6, BASEPRI
   30b66:	f383 8812 	msr	BASEPRI_MAX, r3
   30b6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30b6e:	4823      	ldr	r0, [pc, #140]	; (30bfc <k_sched_time_slice_set+0xa4>)
   30b70:	f7fe fe28 	bl	2f7c4 <z_spin_lock_valid>
   30b74:	b968      	cbnz	r0, 30b92 <k_sched_time_slice_set+0x3a>
   30b76:	4a22      	ldr	r2, [pc, #136]	; (30c00 <k_sched_time_slice_set+0xa8>)
   30b78:	4922      	ldr	r1, [pc, #136]	; (30c04 <k_sched_time_slice_set+0xac>)
   30b7a:	4823      	ldr	r0, [pc, #140]	; (30c08 <k_sched_time_slice_set+0xb0>)
   30b7c:	2381      	movs	r3, #129	; 0x81
   30b7e:	f006 facc 	bl	3711a <printk>
   30b82:	491e      	ldr	r1, [pc, #120]	; (30bfc <k_sched_time_slice_set+0xa4>)
   30b84:	4821      	ldr	r0, [pc, #132]	; (30c0c <k_sched_time_slice_set+0xb4>)
   30b86:	f006 fac8 	bl	3711a <printk>
   30b8a:	481d      	ldr	r0, [pc, #116]	; (30c00 <k_sched_time_slice_set+0xa8>)
   30b8c:	2181      	movs	r1, #129	; 0x81
   30b8e:	f006 fc6a 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   30b92:	481a      	ldr	r0, [pc, #104]	; (30bfc <k_sched_time_slice_set+0xa4>)
   30b94:	f7fe fe34 	bl	2f800 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   30b98:	4b1d      	ldr	r3, [pc, #116]	; (30c10 <k_sched_time_slice_set+0xb8>)
   30b9a:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   30b9c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   30ba0:	f240 30e7 	movw	r0, #999	; 0x3e7
   30ba4:	2100      	movs	r1, #0
   30ba6:	611a      	str	r2, [r3, #16]
   30ba8:	fbe7 0104 	umlal	r0, r1, r7, r4
   30bac:	2300      	movs	r3, #0
   30bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   30bb2:	f7db ffc3 	bl	cb3c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   30bb6:	2c00      	cmp	r4, #0
   30bb8:	4b16      	ldr	r3, [pc, #88]	; (30c14 <k_sched_time_slice_set+0xbc>)
   30bba:	dc1b      	bgt.n	30bf4 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   30bbc:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   30bbe:	4b16      	ldr	r3, [pc, #88]	; (30c18 <k_sched_time_slice_set+0xc0>)
   30bc0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   30bc2:	f7ff ffb3 	bl	30b2c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30bc6:	480d      	ldr	r0, [pc, #52]	; (30bfc <k_sched_time_slice_set+0xa4>)
   30bc8:	f7fe fe0a 	bl	2f7e0 <z_spin_unlock_valid>
   30bcc:	b968      	cbnz	r0, 30bea <k_sched_time_slice_set+0x92>
   30bce:	4a0c      	ldr	r2, [pc, #48]	; (30c00 <k_sched_time_slice_set+0xa8>)
   30bd0:	4912      	ldr	r1, [pc, #72]	; (30c1c <k_sched_time_slice_set+0xc4>)
   30bd2:	480d      	ldr	r0, [pc, #52]	; (30c08 <k_sched_time_slice_set+0xb0>)
   30bd4:	23ac      	movs	r3, #172	; 0xac
   30bd6:	f006 faa0 	bl	3711a <printk>
   30bda:	4908      	ldr	r1, [pc, #32]	; (30bfc <k_sched_time_slice_set+0xa4>)
   30bdc:	4810      	ldr	r0, [pc, #64]	; (30c20 <k_sched_time_slice_set+0xc8>)
   30bde:	f006 fa9c 	bl	3711a <printk>
   30be2:	4807      	ldr	r0, [pc, #28]	; (30c00 <k_sched_time_slice_set+0xa8>)
   30be4:	21ac      	movs	r1, #172	; 0xac
   30be6:	f006 fc3e 	bl	37466 <assert_post_action>
	__asm__ volatile(
   30bea:	f386 8811 	msr	BASEPRI, r6
   30bee:	f3bf 8f6f 	isb	sy
	}
}
   30bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   30bf4:	2802      	cmp	r0, #2
   30bf6:	bfb8      	it	lt
   30bf8:	2002      	movlt	r0, #2
   30bfa:	e7df      	b.n	30bbc <k_sched_time_slice_set+0x64>
   30bfc:	20002d40 	.word	0x20002d40
   30c00:	0003cd09 	.word	0x0003cd09
   30c04:	0003cd5b 	.word	0x0003cd5b
   30c08:	0003c48a 	.word	0x0003c48a
   30c0c:	0003cd70 	.word	0x0003cd70
   30c10:	20002d00 	.word	0x20002d00
   30c14:	20002d48 	.word	0x20002d48
   30c18:	20002d44 	.word	0x20002d44
   30c1c:	0003cd2f 	.word	0x0003cd2f
   30c20:	0003cd46 	.word	0x0003cd46

00030c24 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   30c24:	b538      	push	{r3, r4, r5, lr}
   30c26:	4604      	mov	r4, r0
	__asm__ volatile(
   30c28:	f04f 0340 	mov.w	r3, #64	; 0x40
   30c2c:	f3ef 8511 	mrs	r5, BASEPRI
   30c30:	f383 8812 	msr	BASEPRI_MAX, r3
   30c34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30c38:	4817      	ldr	r0, [pc, #92]	; (30c98 <z_unpend_thread_no_timeout+0x74>)
   30c3a:	f7fe fdc3 	bl	2f7c4 <z_spin_lock_valid>
   30c3e:	b968      	cbnz	r0, 30c5c <z_unpend_thread_no_timeout+0x38>
   30c40:	4a16      	ldr	r2, [pc, #88]	; (30c9c <z_unpend_thread_no_timeout+0x78>)
   30c42:	4917      	ldr	r1, [pc, #92]	; (30ca0 <z_unpend_thread_no_timeout+0x7c>)
   30c44:	4817      	ldr	r0, [pc, #92]	; (30ca4 <z_unpend_thread_no_timeout+0x80>)
   30c46:	2381      	movs	r3, #129	; 0x81
   30c48:	f006 fa67 	bl	3711a <printk>
   30c4c:	4912      	ldr	r1, [pc, #72]	; (30c98 <z_unpend_thread_no_timeout+0x74>)
   30c4e:	4816      	ldr	r0, [pc, #88]	; (30ca8 <z_unpend_thread_no_timeout+0x84>)
   30c50:	f006 fa63 	bl	3711a <printk>
   30c54:	4811      	ldr	r0, [pc, #68]	; (30c9c <z_unpend_thread_no_timeout+0x78>)
   30c56:	2181      	movs	r1, #129	; 0x81
   30c58:	f006 fc05 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   30c5c:	480e      	ldr	r0, [pc, #56]	; (30c98 <z_unpend_thread_no_timeout+0x74>)
   30c5e:	f7fe fdcf 	bl	2f800 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   30c62:	4620      	mov	r0, r4
   30c64:	f000 f900 	bl	30e68 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30c68:	480b      	ldr	r0, [pc, #44]	; (30c98 <z_unpend_thread_no_timeout+0x74>)
   30c6a:	f7fe fdb9 	bl	2f7e0 <z_spin_unlock_valid>
   30c6e:	b968      	cbnz	r0, 30c8c <z_unpend_thread_no_timeout+0x68>
   30c70:	4a0a      	ldr	r2, [pc, #40]	; (30c9c <z_unpend_thread_no_timeout+0x78>)
   30c72:	490e      	ldr	r1, [pc, #56]	; (30cac <z_unpend_thread_no_timeout+0x88>)
   30c74:	480b      	ldr	r0, [pc, #44]	; (30ca4 <z_unpend_thread_no_timeout+0x80>)
   30c76:	23ac      	movs	r3, #172	; 0xac
   30c78:	f006 fa4f 	bl	3711a <printk>
   30c7c:	4906      	ldr	r1, [pc, #24]	; (30c98 <z_unpend_thread_no_timeout+0x74>)
   30c7e:	480c      	ldr	r0, [pc, #48]	; (30cb0 <z_unpend_thread_no_timeout+0x8c>)
   30c80:	f006 fa4b 	bl	3711a <printk>
   30c84:	4805      	ldr	r0, [pc, #20]	; (30c9c <z_unpend_thread_no_timeout+0x78>)
   30c86:	21ac      	movs	r1, #172	; 0xac
   30c88:	f006 fbed 	bl	37466 <assert_post_action>
	__asm__ volatile(
   30c8c:	f385 8811 	msr	BASEPRI, r5
   30c90:	f3bf 8f6f 	isb	sy
	}
}
   30c94:	bd38      	pop	{r3, r4, r5, pc}
   30c96:	bf00      	nop
   30c98:	20002d40 	.word	0x20002d40
   30c9c:	0003cd09 	.word	0x0003cd09
   30ca0:	0003cd5b 	.word	0x0003cd5b
   30ca4:	0003c48a 	.word	0x0003c48a
   30ca8:	0003cd70 	.word	0x0003cd70
   30cac:	0003cd2f 	.word	0x0003cd2f
   30cb0:	0003cd46 	.word	0x0003cd46

00030cb4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   30cb4:	b538      	push	{r3, r4, r5, lr}
   30cb6:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   30cb8:	460d      	mov	r5, r1
   30cba:	b9e9      	cbnz	r1, 30cf8 <z_reschedule+0x44>
   30cbc:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   30cc0:	b9d3      	cbnz	r3, 30cf8 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   30cc2:	4b19      	ldr	r3, [pc, #100]	; (30d28 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   30cc4:	69da      	ldr	r2, [r3, #28]
   30cc6:	689b      	ldr	r3, [r3, #8]
   30cc8:	429a      	cmp	r2, r3
   30cca:	d015      	beq.n	30cf8 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30ccc:	f7fe fd88 	bl	2f7e0 <z_spin_unlock_valid>
   30cd0:	b968      	cbnz	r0, 30cee <z_reschedule+0x3a>
   30cd2:	4a16      	ldr	r2, [pc, #88]	; (30d2c <z_reschedule+0x78>)
   30cd4:	4916      	ldr	r1, [pc, #88]	; (30d30 <z_reschedule+0x7c>)
   30cd6:	4817      	ldr	r0, [pc, #92]	; (30d34 <z_reschedule+0x80>)
   30cd8:	23c3      	movs	r3, #195	; 0xc3
   30cda:	f006 fa1e 	bl	3711a <printk>
   30cde:	4816      	ldr	r0, [pc, #88]	; (30d38 <z_reschedule+0x84>)
   30ce0:	4621      	mov	r1, r4
   30ce2:	f006 fa1a 	bl	3711a <printk>
   30ce6:	4811      	ldr	r0, [pc, #68]	; (30d2c <z_reschedule+0x78>)
   30ce8:	21c3      	movs	r1, #195	; 0xc3
   30cea:	f006 fbbc 	bl	37466 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   30cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   30cf2:	2000      	movs	r0, #0
   30cf4:	f7f1 bb18 	b.w	22328 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30cf8:	4620      	mov	r0, r4
   30cfa:	f7fe fd71 	bl	2f7e0 <z_spin_unlock_valid>
   30cfe:	b968      	cbnz	r0, 30d1c <z_reschedule+0x68>
   30d00:	4a0a      	ldr	r2, [pc, #40]	; (30d2c <z_reschedule+0x78>)
   30d02:	490b      	ldr	r1, [pc, #44]	; (30d30 <z_reschedule+0x7c>)
   30d04:	480b      	ldr	r0, [pc, #44]	; (30d34 <z_reschedule+0x80>)
   30d06:	23ac      	movs	r3, #172	; 0xac
   30d08:	f006 fa07 	bl	3711a <printk>
   30d0c:	480a      	ldr	r0, [pc, #40]	; (30d38 <z_reschedule+0x84>)
   30d0e:	4621      	mov	r1, r4
   30d10:	f006 fa03 	bl	3711a <printk>
   30d14:	4805      	ldr	r0, [pc, #20]	; (30d2c <z_reschedule+0x78>)
   30d16:	21ac      	movs	r1, #172	; 0xac
   30d18:	f006 fba5 	bl	37466 <assert_post_action>
   30d1c:	f385 8811 	msr	BASEPRI, r5
   30d20:	f3bf 8f6f 	isb	sy
   30d24:	bd38      	pop	{r3, r4, r5, pc}
   30d26:	bf00      	nop
   30d28:	20002d00 	.word	0x20002d00
   30d2c:	0003cd09 	.word	0x0003cd09
   30d30:	0003cd2f 	.word	0x0003cd2f
   30d34:	0003c48a 	.word	0x0003c48a
   30d38:	0003cd46 	.word	0x0003cd46

00030d3c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   30d3c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   30d3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   30d42:	f3ef 8511 	mrs	r5, BASEPRI
   30d46:	f383 8812 	msr	BASEPRI_MAX, r3
   30d4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30d4e:	4829      	ldr	r0, [pc, #164]	; (30df4 <k_sched_lock+0xb8>)
   30d50:	f7fe fd38 	bl	2f7c4 <z_spin_lock_valid>
   30d54:	b968      	cbnz	r0, 30d72 <k_sched_lock+0x36>
   30d56:	4a28      	ldr	r2, [pc, #160]	; (30df8 <k_sched_lock+0xbc>)
   30d58:	4928      	ldr	r1, [pc, #160]	; (30dfc <k_sched_lock+0xc0>)
   30d5a:	4829      	ldr	r0, [pc, #164]	; (30e00 <k_sched_lock+0xc4>)
   30d5c:	2381      	movs	r3, #129	; 0x81
   30d5e:	f006 f9dc 	bl	3711a <printk>
   30d62:	4924      	ldr	r1, [pc, #144]	; (30df4 <k_sched_lock+0xb8>)
   30d64:	4827      	ldr	r0, [pc, #156]	; (30e04 <k_sched_lock+0xc8>)
   30d66:	f006 f9d8 	bl	3711a <printk>
   30d6a:	4823      	ldr	r0, [pc, #140]	; (30df8 <k_sched_lock+0xbc>)
   30d6c:	2181      	movs	r1, #129	; 0x81
   30d6e:	f006 fb7a 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   30d72:	4820      	ldr	r0, [pc, #128]	; (30df4 <k_sched_lock+0xb8>)
   30d74:	f7fe fd44 	bl	2f800 <z_spin_lock_set_owner>
   30d78:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   30d7c:	b163      	cbz	r3, 30d98 <k_sched_lock+0x5c>
   30d7e:	4922      	ldr	r1, [pc, #136]	; (30e08 <k_sched_lock+0xcc>)
   30d80:	4a22      	ldr	r2, [pc, #136]	; (30e0c <k_sched_lock+0xd0>)
   30d82:	481f      	ldr	r0, [pc, #124]	; (30e00 <k_sched_lock+0xc4>)
   30d84:	23fd      	movs	r3, #253	; 0xfd
   30d86:	f006 f9c8 	bl	3711a <printk>
   30d8a:	4821      	ldr	r0, [pc, #132]	; (30e10 <k_sched_lock+0xd4>)
   30d8c:	f006 f9c5 	bl	3711a <printk>
   30d90:	481e      	ldr	r0, [pc, #120]	; (30e0c <k_sched_lock+0xd0>)
   30d92:	21fd      	movs	r1, #253	; 0xfd
   30d94:	f006 fb67 	bl	37466 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   30d98:	4c1e      	ldr	r4, [pc, #120]	; (30e14 <k_sched_lock+0xd8>)
   30d9a:	68a2      	ldr	r2, [r4, #8]
   30d9c:	7bd2      	ldrb	r2, [r2, #15]
   30d9e:	2a01      	cmp	r2, #1
   30da0:	d10c      	bne.n	30dbc <k_sched_lock+0x80>
   30da2:	491d      	ldr	r1, [pc, #116]	; (30e18 <k_sched_lock+0xdc>)
   30da4:	4a19      	ldr	r2, [pc, #100]	; (30e0c <k_sched_lock+0xd0>)
   30da6:	4816      	ldr	r0, [pc, #88]	; (30e00 <k_sched_lock+0xc4>)
   30da8:	23fe      	movs	r3, #254	; 0xfe
   30daa:	f006 f9b6 	bl	3711a <printk>
   30dae:	4818      	ldr	r0, [pc, #96]	; (30e10 <k_sched_lock+0xd4>)
   30db0:	f006 f9b3 	bl	3711a <printk>
   30db4:	4815      	ldr	r0, [pc, #84]	; (30e0c <k_sched_lock+0xd0>)
   30db6:	21fe      	movs	r1, #254	; 0xfe
   30db8:	f006 fb55 	bl	37466 <assert_post_action>
	--_current->base.sched_locked;
   30dbc:	68a2      	ldr	r2, [r4, #8]
   30dbe:	7bd3      	ldrb	r3, [r2, #15]
   30dc0:	3b01      	subs	r3, #1
   30dc2:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30dc4:	480b      	ldr	r0, [pc, #44]	; (30df4 <k_sched_lock+0xb8>)
   30dc6:	f7fe fd0b 	bl	2f7e0 <z_spin_unlock_valid>
   30dca:	b968      	cbnz	r0, 30de8 <k_sched_lock+0xac>
   30dcc:	4a0a      	ldr	r2, [pc, #40]	; (30df8 <k_sched_lock+0xbc>)
   30dce:	4913      	ldr	r1, [pc, #76]	; (30e1c <k_sched_lock+0xe0>)
   30dd0:	480b      	ldr	r0, [pc, #44]	; (30e00 <k_sched_lock+0xc4>)
   30dd2:	23ac      	movs	r3, #172	; 0xac
   30dd4:	f006 f9a1 	bl	3711a <printk>
   30dd8:	4906      	ldr	r1, [pc, #24]	; (30df4 <k_sched_lock+0xb8>)
   30dda:	4811      	ldr	r0, [pc, #68]	; (30e20 <k_sched_lock+0xe4>)
   30ddc:	f006 f99d 	bl	3711a <printk>
   30de0:	4805      	ldr	r0, [pc, #20]	; (30df8 <k_sched_lock+0xbc>)
   30de2:	21ac      	movs	r1, #172	; 0xac
   30de4:	f006 fb3f 	bl	37466 <assert_post_action>
	__asm__ volatile(
   30de8:	f385 8811 	msr	BASEPRI, r5
   30dec:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   30df0:	bd38      	pop	{r3, r4, r5, pc}
   30df2:	bf00      	nop
   30df4:	20002d40 	.word	0x20002d40
   30df8:	0003cd09 	.word	0x0003cd09
   30dfc:	0003cd5b 	.word	0x0003cd5b
   30e00:	0003c48a 	.word	0x0003c48a
   30e04:	0003cd70 	.word	0x0003cd70
   30e08:	0004134b 	.word	0x0004134b
   30e0c:	00041456 	.word	0x00041456
   30e10:	0003cae0 	.word	0x0003cae0
   30e14:	20002d00 	.word	0x20002d00
   30e18:	00041481 	.word	0x00041481
   30e1c:	0003cd2f 	.word	0x0003cd2f
   30e20:	0003cd46 	.word	0x0003cd46

00030e24 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   30e24:	4b0c      	ldr	r3, [pc, #48]	; (30e58 <z_priq_dumb_remove+0x34>)
   30e26:	4299      	cmp	r1, r3
{
   30e28:	b510      	push	{r4, lr}
   30e2a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   30e2c:	d10b      	bne.n	30e46 <z_priq_dumb_remove+0x22>
   30e2e:	490b      	ldr	r1, [pc, #44]	; (30e5c <z_priq_dumb_remove+0x38>)
   30e30:	480b      	ldr	r0, [pc, #44]	; (30e60 <z_priq_dumb_remove+0x3c>)
   30e32:	4a0c      	ldr	r2, [pc, #48]	; (30e64 <z_priq_dumb_remove+0x40>)
   30e34:	f240 33e7 	movw	r3, #999	; 0x3e7
   30e38:	f006 f96f 	bl	3711a <printk>
   30e3c:	4809      	ldr	r0, [pc, #36]	; (30e64 <z_priq_dumb_remove+0x40>)
   30e3e:	f240 31e7 	movw	r1, #999	; 0x3e7
   30e42:	f006 fb10 	bl	37466 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   30e46:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   30e4a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30e4c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30e4e:	2300      	movs	r3, #0
	node->prev = NULL;
   30e50:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   30e54:	bd10      	pop	{r4, pc}
   30e56:	bf00      	nop
   30e58:	20002038 	.word	0x20002038
   30e5c:	00041635 	.word	0x00041635
   30e60:	0003c48a 	.word	0x0003c48a
   30e64:	00041613 	.word	0x00041613

00030e68 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   30e68:	6883      	ldr	r3, [r0, #8]
{
   30e6a:	b510      	push	{r4, lr}
   30e6c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   30e6e:	b95b      	cbnz	r3, 30e88 <unpend_thread_no_timeout+0x20>
   30e70:	490b      	ldr	r1, [pc, #44]	; (30ea0 <unpend_thread_no_timeout+0x38>)
   30e72:	480c      	ldr	r0, [pc, #48]	; (30ea4 <unpend_thread_no_timeout+0x3c>)
   30e74:	4a0c      	ldr	r2, [pc, #48]	; (30ea8 <unpend_thread_no_timeout+0x40>)
   30e76:	f240 2383 	movw	r3, #643	; 0x283
   30e7a:	f006 f94e 	bl	3711a <printk>
   30e7e:	480a      	ldr	r0, [pc, #40]	; (30ea8 <unpend_thread_no_timeout+0x40>)
   30e80:	f240 2183 	movw	r1, #643	; 0x283
   30e84:	f006 faef 	bl	37466 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   30e88:	68a0      	ldr	r0, [r4, #8]
   30e8a:	4621      	mov	r1, r4
   30e8c:	f7ff ffca 	bl	30e24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   30e90:	7b63      	ldrb	r3, [r4, #13]
   30e92:	f023 0302 	bic.w	r3, r3, #2
   30e96:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   30e98:	2300      	movs	r3, #0
   30e9a:	60a3      	str	r3, [r4, #8]
}
   30e9c:	bd10      	pop	{r4, pc}
   30e9e:	bf00      	nop
   30ea0:	00041656 	.word	0x00041656
   30ea4:	0003c48a 	.word	0x0003c48a
   30ea8:	00041613 	.word	0x00041613

00030eac <z_unpend_thread>:
{
   30eac:	b538      	push	{r3, r4, r5, lr}
   30eae:	4604      	mov	r4, r0
	__asm__ volatile(
   30eb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   30eb4:	f3ef 8511 	mrs	r5, BASEPRI
   30eb8:	f383 8812 	msr	BASEPRI_MAX, r3
   30ebc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30ec0:	4819      	ldr	r0, [pc, #100]	; (30f28 <z_unpend_thread+0x7c>)
   30ec2:	f7fe fc7f 	bl	2f7c4 <z_spin_lock_valid>
   30ec6:	b968      	cbnz	r0, 30ee4 <z_unpend_thread+0x38>
   30ec8:	4a18      	ldr	r2, [pc, #96]	; (30f2c <z_unpend_thread+0x80>)
   30eca:	4919      	ldr	r1, [pc, #100]	; (30f30 <z_unpend_thread+0x84>)
   30ecc:	4819      	ldr	r0, [pc, #100]	; (30f34 <z_unpend_thread+0x88>)
   30ece:	2381      	movs	r3, #129	; 0x81
   30ed0:	f006 f923 	bl	3711a <printk>
   30ed4:	4914      	ldr	r1, [pc, #80]	; (30f28 <z_unpend_thread+0x7c>)
   30ed6:	4818      	ldr	r0, [pc, #96]	; (30f38 <z_unpend_thread+0x8c>)
   30ed8:	f006 f91f 	bl	3711a <printk>
   30edc:	4813      	ldr	r0, [pc, #76]	; (30f2c <z_unpend_thread+0x80>)
   30ede:	2181      	movs	r1, #129	; 0x81
   30ee0:	f006 fac1 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   30ee4:	4810      	ldr	r0, [pc, #64]	; (30f28 <z_unpend_thread+0x7c>)
   30ee6:	f7fe fc8b 	bl	2f800 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   30eea:	4620      	mov	r0, r4
   30eec:	f7ff ffbc 	bl	30e68 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30ef0:	480d      	ldr	r0, [pc, #52]	; (30f28 <z_unpend_thread+0x7c>)
   30ef2:	f7fe fc75 	bl	2f7e0 <z_spin_unlock_valid>
   30ef6:	b968      	cbnz	r0, 30f14 <z_unpend_thread+0x68>
   30ef8:	4a0c      	ldr	r2, [pc, #48]	; (30f2c <z_unpend_thread+0x80>)
   30efa:	4910      	ldr	r1, [pc, #64]	; (30f3c <z_unpend_thread+0x90>)
   30efc:	480d      	ldr	r0, [pc, #52]	; (30f34 <z_unpend_thread+0x88>)
   30efe:	23ac      	movs	r3, #172	; 0xac
   30f00:	f006 f90b 	bl	3711a <printk>
   30f04:	4908      	ldr	r1, [pc, #32]	; (30f28 <z_unpend_thread+0x7c>)
   30f06:	480e      	ldr	r0, [pc, #56]	; (30f40 <z_unpend_thread+0x94>)
   30f08:	f006 f907 	bl	3711a <printk>
   30f0c:	4807      	ldr	r0, [pc, #28]	; (30f2c <z_unpend_thread+0x80>)
   30f0e:	21ac      	movs	r1, #172	; 0xac
   30f10:	f006 faa9 	bl	37466 <assert_post_action>
	__asm__ volatile(
   30f14:	f385 8811 	msr	BASEPRI, r5
   30f18:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   30f1c:	f104 0018 	add.w	r0, r4, #24
}
   30f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   30f24:	f001 b96e 	b.w	32204 <z_abort_timeout>
   30f28:	20002d40 	.word	0x20002d40
   30f2c:	0003cd09 	.word	0x0003cd09
   30f30:	0003cd5b 	.word	0x0003cd5b
   30f34:	0003c48a 	.word	0x0003c48a
   30f38:	0003cd70 	.word	0x0003cd70
   30f3c:	0003cd2f 	.word	0x0003cd2f
   30f40:	0003cd46 	.word	0x0003cd46

00030f44 <update_cache>:
{
   30f44:	b538      	push	{r3, r4, r5, lr}
   30f46:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   30f48:	4814      	ldr	r0, [pc, #80]	; (30f9c <update_cache+0x58>)
   30f4a:	4d15      	ldr	r5, [pc, #84]	; (30fa0 <update_cache+0x5c>)
   30f4c:	f009 fa08 	bl	3a360 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   30f50:	4604      	mov	r4, r0
   30f52:	b900      	cbnz	r0, 30f56 <update_cache+0x12>
   30f54:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   30f56:	b9ca      	cbnz	r2, 30f8c <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   30f58:	68ab      	ldr	r3, [r5, #8]
   30f5a:	b963      	cbnz	r3, 30f76 <update_cache+0x32>
   30f5c:	4911      	ldr	r1, [pc, #68]	; (30fa4 <update_cache+0x60>)
   30f5e:	4a12      	ldr	r2, [pc, #72]	; (30fa8 <update_cache+0x64>)
   30f60:	4812      	ldr	r0, [pc, #72]	; (30fac <update_cache+0x68>)
   30f62:	2389      	movs	r3, #137	; 0x89
   30f64:	f006 f8d9 	bl	3711a <printk>
   30f68:	4811      	ldr	r0, [pc, #68]	; (30fb0 <update_cache+0x6c>)
   30f6a:	f006 f8d6 	bl	3711a <printk>
   30f6e:	480e      	ldr	r0, [pc, #56]	; (30fa8 <update_cache+0x64>)
   30f70:	2189      	movs	r1, #137	; 0x89
   30f72:	f006 fa78 	bl	37466 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   30f76:	68ab      	ldr	r3, [r5, #8]
   30f78:	7b5a      	ldrb	r2, [r3, #13]
   30f7a:	06d2      	lsls	r2, r2, #27
   30f7c:	d106      	bne.n	30f8c <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   30f7e:	69a2      	ldr	r2, [r4, #24]
   30f80:	b922      	cbnz	r2, 30f8c <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   30f82:	89da      	ldrh	r2, [r3, #14]
   30f84:	2a7f      	cmp	r2, #127	; 0x7f
   30f86:	d901      	bls.n	30f8c <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   30f88:	61eb      	str	r3, [r5, #28]
}
   30f8a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   30f8c:	68ab      	ldr	r3, [r5, #8]
   30f8e:	42a3      	cmp	r3, r4
   30f90:	d001      	beq.n	30f96 <update_cache+0x52>
			z_reset_time_slice();
   30f92:	f7ff fdcb 	bl	30b2c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   30f96:	61ec      	str	r4, [r5, #28]
}
   30f98:	e7f7      	b.n	30f8a <update_cache+0x46>
   30f9a:	bf00      	nop
   30f9c:	20002d20 	.word	0x20002d20
   30fa0:	20002d00 	.word	0x20002d00
   30fa4:	0004166d 	.word	0x0004166d
   30fa8:	00041613 	.word	0x00041613
   30fac:	0003c48a 	.word	0x0003c48a
   30fb0:	0003cae0 	.word	0x0003cae0

00030fb4 <move_thread_to_end_of_prio_q>:
{
   30fb4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   30fb6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   30fba:	7b43      	ldrb	r3, [r0, #13]
   30fbc:	2a00      	cmp	r2, #0
{
   30fbe:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   30fc0:	da06      	bge.n	30fd0 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   30fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   30fc6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   30fc8:	4601      	mov	r1, r0
   30fca:	481f      	ldr	r0, [pc, #124]	; (31048 <move_thread_to_end_of_prio_q+0x94>)
   30fcc:	f7ff ff2a 	bl	30e24 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   30fd0:	7b63      	ldrb	r3, [r4, #13]
   30fd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   30fd6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   30fd8:	4b1c      	ldr	r3, [pc, #112]	; (3104c <move_thread_to_end_of_prio_q+0x98>)
   30fda:	429c      	cmp	r4, r3
   30fdc:	d109      	bne.n	30ff2 <move_thread_to_end_of_prio_q+0x3e>
   30fde:	491c      	ldr	r1, [pc, #112]	; (31050 <move_thread_to_end_of_prio_q+0x9c>)
   30fe0:	481c      	ldr	r0, [pc, #112]	; (31054 <move_thread_to_end_of_prio_q+0xa0>)
   30fe2:	4a1d      	ldr	r2, [pc, #116]	; (31058 <move_thread_to_end_of_prio_q+0xa4>)
   30fe4:	23ba      	movs	r3, #186	; 0xba
   30fe6:	f006 f898 	bl	3711a <printk>
   30fea:	481b      	ldr	r0, [pc, #108]	; (31058 <move_thread_to_end_of_prio_q+0xa4>)
   30fec:	21ba      	movs	r1, #186	; 0xba
   30fee:	f006 fa3a 	bl	37466 <assert_post_action>
	return list->head == list;
   30ff2:	4a1a      	ldr	r2, [pc, #104]	; (3105c <move_thread_to_end_of_prio_q+0xa8>)
   30ff4:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   30ff6:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
   30ff8:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30ffc:	428b      	cmp	r3, r1
   30ffe:	bf08      	it	eq
   31000:	2300      	moveq	r3, #0
   31002:	2b00      	cmp	r3, #0
   31004:	bf38      	it	cc
   31006:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   31008:	b1cb      	cbz	r3, 3103e <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
   3100a:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   3100e:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   31012:	4286      	cmp	r6, r0
   31014:	d00f      	beq.n	31036 <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
   31016:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   31018:	2800      	cmp	r0, #0
   3101a:	dd0c      	ble.n	31036 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   3101c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   3101e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   31022:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   31024:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   31026:	6890      	ldr	r0, [r2, #8]
   31028:	1b03      	subs	r3, r0, r4
   3102a:	4258      	negs	r0, r3
}
   3102c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   31030:	4158      	adcs	r0, r3
   31032:	f7ff bf87 	b.w	30f44 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   31036:	42ab      	cmp	r3, r5
   31038:	d001      	beq.n	3103e <move_thread_to_end_of_prio_q+0x8a>
   3103a:	681b      	ldr	r3, [r3, #0]
   3103c:	e7e4      	b.n	31008 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
   3103e:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   31042:	602c      	str	r4, [r5, #0]
	list->tail = node;
   31044:	6254      	str	r4, [r2, #36]	; 0x24
}
   31046:	e7ee      	b.n	31026 <move_thread_to_end_of_prio_q+0x72>
   31048:	20002d20 	.word	0x20002d20
   3104c:	20002038 	.word	0x20002038
   31050:	00041635 	.word	0x00041635
   31054:	0003c48a 	.word	0x0003c48a
   31058:	00041613 	.word	0x00041613
   3105c:	20002d00 	.word	0x20002d00

00031060 <z_time_slice>:
{
   31060:	b570      	push	{r4, r5, r6, lr}
   31062:	4604      	mov	r4, r0
	__asm__ volatile(
   31064:	f04f 0340 	mov.w	r3, #64	; 0x40
   31068:	f3ef 8511 	mrs	r5, BASEPRI
   3106c:	f383 8812 	msr	BASEPRI_MAX, r3
   31070:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31074:	482a      	ldr	r0, [pc, #168]	; (31120 <z_time_slice+0xc0>)
   31076:	f7fe fba5 	bl	2f7c4 <z_spin_lock_valid>
   3107a:	b968      	cbnz	r0, 31098 <z_time_slice+0x38>
   3107c:	4a29      	ldr	r2, [pc, #164]	; (31124 <z_time_slice+0xc4>)
   3107e:	492a      	ldr	r1, [pc, #168]	; (31128 <z_time_slice+0xc8>)
   31080:	482a      	ldr	r0, [pc, #168]	; (3112c <z_time_slice+0xcc>)
   31082:	2381      	movs	r3, #129	; 0x81
   31084:	f006 f849 	bl	3711a <printk>
   31088:	4925      	ldr	r1, [pc, #148]	; (31120 <z_time_slice+0xc0>)
   3108a:	4829      	ldr	r0, [pc, #164]	; (31130 <z_time_slice+0xd0>)
   3108c:	f006 f845 	bl	3711a <printk>
   31090:	4824      	ldr	r0, [pc, #144]	; (31124 <z_time_slice+0xc4>)
   31092:	2181      	movs	r1, #129	; 0x81
   31094:	f006 f9e7 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   31098:	4821      	ldr	r0, [pc, #132]	; (31120 <z_time_slice+0xc0>)
   3109a:	f7fe fbb1 	bl	2f800 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   3109e:	4b25      	ldr	r3, [pc, #148]	; (31134 <z_time_slice+0xd4>)
   310a0:	4a25      	ldr	r2, [pc, #148]	; (31138 <z_time_slice+0xd8>)
   310a2:	6898      	ldr	r0, [r3, #8]
   310a4:	6811      	ldr	r1, [r2, #0]
   310a6:	4288      	cmp	r0, r1
   310a8:	4619      	mov	r1, r3
   310aa:	d118      	bne.n	310de <z_time_slice+0x7e>
			z_reset_time_slice();
   310ac:	f7ff fd3e 	bl	30b2c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   310b0:	481b      	ldr	r0, [pc, #108]	; (31120 <z_time_slice+0xc0>)
   310b2:	f7fe fb95 	bl	2f7e0 <z_spin_unlock_valid>
   310b6:	b968      	cbnz	r0, 310d4 <z_time_slice+0x74>
   310b8:	4a1a      	ldr	r2, [pc, #104]	; (31124 <z_time_slice+0xc4>)
   310ba:	4920      	ldr	r1, [pc, #128]	; (3113c <z_time_slice+0xdc>)
   310bc:	481b      	ldr	r0, [pc, #108]	; (3112c <z_time_slice+0xcc>)
   310be:	23ac      	movs	r3, #172	; 0xac
   310c0:	f006 f82b 	bl	3711a <printk>
   310c4:	4916      	ldr	r1, [pc, #88]	; (31120 <z_time_slice+0xc0>)
   310c6:	481e      	ldr	r0, [pc, #120]	; (31140 <z_time_slice+0xe0>)
   310c8:	f006 f827 	bl	3711a <printk>
   310cc:	4815      	ldr	r0, [pc, #84]	; (31124 <z_time_slice+0xc4>)
   310ce:	21ac      	movs	r1, #172	; 0xac
   310d0:	f006 f9c9 	bl	37466 <assert_post_action>
	__asm__ volatile(
   310d4:	f385 8811 	msr	BASEPRI, r5
   310d8:	f3bf 8f6f 	isb	sy
}
   310dc:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   310de:	2600      	movs	r6, #0
   310e0:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   310e2:	4a18      	ldr	r2, [pc, #96]	; (31144 <z_time_slice+0xe4>)
   310e4:	6812      	ldr	r2, [r2, #0]
   310e6:	b1ba      	cbz	r2, 31118 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   310e8:	89c2      	ldrh	r2, [r0, #14]
   310ea:	2a7f      	cmp	r2, #127	; 0x7f
   310ec:	d814      	bhi.n	31118 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   310ee:	7b42      	ldrb	r2, [r0, #13]
   310f0:	06d2      	lsls	r2, r2, #27
   310f2:	d111      	bne.n	31118 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   310f4:	4a14      	ldr	r2, [pc, #80]	; (31148 <z_time_slice+0xe8>)
   310f6:	f990 600e 	ldrsb.w	r6, [r0, #14]
   310fa:	6812      	ldr	r2, [r2, #0]
   310fc:	4296      	cmp	r6, r2
   310fe:	db0b      	blt.n	31118 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   31100:	4a12      	ldr	r2, [pc, #72]	; (3114c <z_time_slice+0xec>)
   31102:	4290      	cmp	r0, r2
   31104:	d008      	beq.n	31118 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   31106:	691a      	ldr	r2, [r3, #16]
   31108:	42a2      	cmp	r2, r4
   3110a:	dc02      	bgt.n	31112 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   3110c:	f7ff ff52 	bl	30fb4 <move_thread_to_end_of_prio_q>
   31110:	e7cc      	b.n	310ac <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   31112:	1b12      	subs	r2, r2, r4
   31114:	611a      	str	r2, [r3, #16]
   31116:	e7cb      	b.n	310b0 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   31118:	2300      	movs	r3, #0
   3111a:	610b      	str	r3, [r1, #16]
   3111c:	e7c8      	b.n	310b0 <z_time_slice+0x50>
   3111e:	bf00      	nop
   31120:	20002d40 	.word	0x20002d40
   31124:	0003cd09 	.word	0x0003cd09
   31128:	0003cd5b 	.word	0x0003cd5b
   3112c:	0003c48a 	.word	0x0003c48a
   31130:	0003cd70 	.word	0x0003cd70
   31134:	20002d00 	.word	0x20002d00
   31138:	20002d3c 	.word	0x20002d3c
   3113c:	0003cd2f 	.word	0x0003cd2f
   31140:	0003cd46 	.word	0x0003cd46
   31144:	20002d48 	.word	0x20002d48
   31148:	20002d44 	.word	0x20002d44
   3114c:	20002038 	.word	0x20002038

00031150 <ready_thread>:
{
   31150:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   31152:	f990 200d 	ldrsb.w	r2, [r0, #13]
   31156:	7b43      	ldrb	r3, [r0, #13]
   31158:	2a00      	cmp	r2, #0
{
   3115a:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   3115c:	db3e      	blt.n	311dc <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3115e:	06da      	lsls	r2, r3, #27
   31160:	d13c      	bne.n	311dc <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
   31162:	6985      	ldr	r5, [r0, #24]
   31164:	2d00      	cmp	r5, #0
   31166:	d139      	bne.n	311dc <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
   31168:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3116c:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3116e:	4b1c      	ldr	r3, [pc, #112]	; (311e0 <ready_thread+0x90>)
   31170:	4298      	cmp	r0, r3
   31172:	d109      	bne.n	31188 <ready_thread+0x38>
   31174:	491b      	ldr	r1, [pc, #108]	; (311e4 <ready_thread+0x94>)
   31176:	481c      	ldr	r0, [pc, #112]	; (311e8 <ready_thread+0x98>)
   31178:	4a1c      	ldr	r2, [pc, #112]	; (311ec <ready_thread+0x9c>)
   3117a:	23ba      	movs	r3, #186	; 0xba
   3117c:	f005 ffcd 	bl	3711a <printk>
   31180:	481a      	ldr	r0, [pc, #104]	; (311ec <ready_thread+0x9c>)
   31182:	21ba      	movs	r1, #186	; 0xba
   31184:	f006 f96f 	bl	37466 <assert_post_action>
	return list->head == list;
   31188:	4919      	ldr	r1, [pc, #100]	; (311f0 <ready_thread+0xa0>)
   3118a:	460b      	mov	r3, r1
   3118c:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31190:	4298      	cmp	r0, r3
   31192:	bf18      	it	ne
   31194:	4605      	movne	r5, r0
   31196:	2d00      	cmp	r5, #0
   31198:	461a      	mov	r2, r3
   3119a:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3119c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   3119e:	bf38      	it	cc
   311a0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   311a2:	b1b3      	cbz	r3, 311d2 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
   311a4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   311a8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   311ac:	4286      	cmp	r6, r0
   311ae:	d00c      	beq.n	311ca <ready_thread+0x7a>
		return b2 - b1;
   311b0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   311b2:	2800      	cmp	r0, #0
   311b4:	dd09      	ble.n	311ca <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
   311b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   311b8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   311bc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   311be:	605c      	str	r4, [r3, #4]
}
   311c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   311c4:	2000      	movs	r0, #0
   311c6:	f7ff bebd 	b.w	30f44 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   311ca:	42ab      	cmp	r3, r5
   311cc:	d001      	beq.n	311d2 <ready_thread+0x82>
   311ce:	681b      	ldr	r3, [r3, #0]
   311d0:	e7e7      	b.n	311a2 <ready_thread+0x52>
	node->prev = tail;
   311d2:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   311d6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   311d8:	624c      	str	r4, [r1, #36]	; 0x24
}
   311da:	e7f1      	b.n	311c0 <ready_thread+0x70>
}
   311dc:	bd70      	pop	{r4, r5, r6, pc}
   311de:	bf00      	nop
   311e0:	20002038 	.word	0x20002038
   311e4:	00041635 	.word	0x00041635
   311e8:	0003c48a 	.word	0x0003c48a
   311ec:	00041613 	.word	0x00041613
   311f0:	20002d00 	.word	0x20002d00

000311f4 <z_ready_thread>:
{
   311f4:	b538      	push	{r3, r4, r5, lr}
   311f6:	4604      	mov	r4, r0
	__asm__ volatile(
   311f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   311fc:	f3ef 8511 	mrs	r5, BASEPRI
   31200:	f383 8812 	msr	BASEPRI_MAX, r3
   31204:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31208:	4817      	ldr	r0, [pc, #92]	; (31268 <z_ready_thread+0x74>)
   3120a:	f7fe fadb 	bl	2f7c4 <z_spin_lock_valid>
   3120e:	b968      	cbnz	r0, 3122c <z_ready_thread+0x38>
   31210:	4a16      	ldr	r2, [pc, #88]	; (3126c <z_ready_thread+0x78>)
   31212:	4917      	ldr	r1, [pc, #92]	; (31270 <z_ready_thread+0x7c>)
   31214:	4817      	ldr	r0, [pc, #92]	; (31274 <z_ready_thread+0x80>)
   31216:	2381      	movs	r3, #129	; 0x81
   31218:	f005 ff7f 	bl	3711a <printk>
   3121c:	4912      	ldr	r1, [pc, #72]	; (31268 <z_ready_thread+0x74>)
   3121e:	4816      	ldr	r0, [pc, #88]	; (31278 <z_ready_thread+0x84>)
   31220:	f005 ff7b 	bl	3711a <printk>
   31224:	4811      	ldr	r0, [pc, #68]	; (3126c <z_ready_thread+0x78>)
   31226:	2181      	movs	r1, #129	; 0x81
   31228:	f006 f91d 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   3122c:	480e      	ldr	r0, [pc, #56]	; (31268 <z_ready_thread+0x74>)
   3122e:	f7fe fae7 	bl	2f800 <z_spin_lock_set_owner>
			ready_thread(thread);
   31232:	4620      	mov	r0, r4
   31234:	f7ff ff8c 	bl	31150 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31238:	480b      	ldr	r0, [pc, #44]	; (31268 <z_ready_thread+0x74>)
   3123a:	f7fe fad1 	bl	2f7e0 <z_spin_unlock_valid>
   3123e:	b968      	cbnz	r0, 3125c <z_ready_thread+0x68>
   31240:	4a0a      	ldr	r2, [pc, #40]	; (3126c <z_ready_thread+0x78>)
   31242:	490e      	ldr	r1, [pc, #56]	; (3127c <z_ready_thread+0x88>)
   31244:	480b      	ldr	r0, [pc, #44]	; (31274 <z_ready_thread+0x80>)
   31246:	23ac      	movs	r3, #172	; 0xac
   31248:	f005 ff67 	bl	3711a <printk>
   3124c:	4906      	ldr	r1, [pc, #24]	; (31268 <z_ready_thread+0x74>)
   3124e:	480c      	ldr	r0, [pc, #48]	; (31280 <z_ready_thread+0x8c>)
   31250:	f005 ff63 	bl	3711a <printk>
   31254:	4805      	ldr	r0, [pc, #20]	; (3126c <z_ready_thread+0x78>)
   31256:	21ac      	movs	r1, #172	; 0xac
   31258:	f006 f905 	bl	37466 <assert_post_action>
	__asm__ volatile(
   3125c:	f385 8811 	msr	BASEPRI, r5
   31260:	f3bf 8f6f 	isb	sy
}
   31264:	bd38      	pop	{r3, r4, r5, pc}
   31266:	bf00      	nop
   31268:	20002d40 	.word	0x20002d40
   3126c:	0003cd09 	.word	0x0003cd09
   31270:	0003cd5b 	.word	0x0003cd5b
   31274:	0003c48a 	.word	0x0003c48a
   31278:	0003cd70 	.word	0x0003cd70
   3127c:	0003cd2f 	.word	0x0003cd2f
   31280:	0003cd46 	.word	0x0003cd46

00031284 <z_sched_start>:
{
   31284:	b538      	push	{r3, r4, r5, lr}
   31286:	4604      	mov	r4, r0
	__asm__ volatile(
   31288:	f04f 0340 	mov.w	r3, #64	; 0x40
   3128c:	f3ef 8511 	mrs	r5, BASEPRI
   31290:	f383 8812 	msr	BASEPRI_MAX, r3
   31294:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31298:	481d      	ldr	r0, [pc, #116]	; (31310 <z_sched_start+0x8c>)
   3129a:	f7fe fa93 	bl	2f7c4 <z_spin_lock_valid>
   3129e:	b968      	cbnz	r0, 312bc <z_sched_start+0x38>
   312a0:	4a1c      	ldr	r2, [pc, #112]	; (31314 <z_sched_start+0x90>)
   312a2:	491d      	ldr	r1, [pc, #116]	; (31318 <z_sched_start+0x94>)
   312a4:	481d      	ldr	r0, [pc, #116]	; (3131c <z_sched_start+0x98>)
   312a6:	2381      	movs	r3, #129	; 0x81
   312a8:	f005 ff37 	bl	3711a <printk>
   312ac:	4918      	ldr	r1, [pc, #96]	; (31310 <z_sched_start+0x8c>)
   312ae:	481c      	ldr	r0, [pc, #112]	; (31320 <z_sched_start+0x9c>)
   312b0:	f005 ff33 	bl	3711a <printk>
   312b4:	4817      	ldr	r0, [pc, #92]	; (31314 <z_sched_start+0x90>)
   312b6:	2181      	movs	r1, #129	; 0x81
   312b8:	f006 f8d5 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   312bc:	4814      	ldr	r0, [pc, #80]	; (31310 <z_sched_start+0x8c>)
   312be:	f7fe fa9f 	bl	2f800 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   312c2:	7b63      	ldrb	r3, [r4, #13]
   312c4:	075a      	lsls	r2, r3, #29
   312c6:	d416      	bmi.n	312f6 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   312c8:	4811      	ldr	r0, [pc, #68]	; (31310 <z_sched_start+0x8c>)
   312ca:	f7fe fa89 	bl	2f7e0 <z_spin_unlock_valid>
   312ce:	b968      	cbnz	r0, 312ec <z_sched_start+0x68>
   312d0:	4a10      	ldr	r2, [pc, #64]	; (31314 <z_sched_start+0x90>)
   312d2:	4914      	ldr	r1, [pc, #80]	; (31324 <z_sched_start+0xa0>)
   312d4:	4811      	ldr	r0, [pc, #68]	; (3131c <z_sched_start+0x98>)
   312d6:	23ac      	movs	r3, #172	; 0xac
   312d8:	f005 ff1f 	bl	3711a <printk>
   312dc:	490c      	ldr	r1, [pc, #48]	; (31310 <z_sched_start+0x8c>)
   312de:	4812      	ldr	r0, [pc, #72]	; (31328 <z_sched_start+0xa4>)
   312e0:	f005 ff1b 	bl	3711a <printk>
   312e4:	480b      	ldr	r0, [pc, #44]	; (31314 <z_sched_start+0x90>)
   312e6:	21ac      	movs	r1, #172	; 0xac
   312e8:	f006 f8bd 	bl	37466 <assert_post_action>
	__asm__ volatile(
   312ec:	f385 8811 	msr	BASEPRI, r5
   312f0:	f3bf 8f6f 	isb	sy
}
   312f4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   312f6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   312fa:	4620      	mov	r0, r4
   312fc:	7363      	strb	r3, [r4, #13]
   312fe:	f7ff ff27 	bl	31150 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   31302:	4629      	mov	r1, r5
   31304:	4802      	ldr	r0, [pc, #8]	; (31310 <z_sched_start+0x8c>)
}
   31306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3130a:	f7ff bcd3 	b.w	30cb4 <z_reschedule>
   3130e:	bf00      	nop
   31310:	20002d40 	.word	0x20002d40
   31314:	0003cd09 	.word	0x0003cd09
   31318:	0003cd5b 	.word	0x0003cd5b
   3131c:	0003c48a 	.word	0x0003c48a
   31320:	0003cd70 	.word	0x0003cd70
   31324:	0003cd2f 	.word	0x0003cd2f
   31328:	0003cd46 	.word	0x0003cd46

0003132c <z_thread_timeout>:
{
   3132c:	b570      	push	{r4, r5, r6, lr}
   3132e:	4604      	mov	r4, r0
	__asm__ volatile(
   31330:	f04f 0340 	mov.w	r3, #64	; 0x40
   31334:	f3ef 8611 	mrs	r6, BASEPRI
   31338:	f383 8812 	msr	BASEPRI_MAX, r3
   3133c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31340:	4820      	ldr	r0, [pc, #128]	; (313c4 <z_thread_timeout+0x98>)
   31342:	f7fe fa3f 	bl	2f7c4 <z_spin_lock_valid>
   31346:	b968      	cbnz	r0, 31364 <z_thread_timeout+0x38>
   31348:	4a1f      	ldr	r2, [pc, #124]	; (313c8 <z_thread_timeout+0x9c>)
   3134a:	4920      	ldr	r1, [pc, #128]	; (313cc <z_thread_timeout+0xa0>)
   3134c:	4820      	ldr	r0, [pc, #128]	; (313d0 <z_thread_timeout+0xa4>)
   3134e:	2381      	movs	r3, #129	; 0x81
   31350:	f005 fee3 	bl	3711a <printk>
   31354:	491b      	ldr	r1, [pc, #108]	; (313c4 <z_thread_timeout+0x98>)
   31356:	481f      	ldr	r0, [pc, #124]	; (313d4 <z_thread_timeout+0xa8>)
   31358:	f005 fedf 	bl	3711a <printk>
   3135c:	481a      	ldr	r0, [pc, #104]	; (313c8 <z_thread_timeout+0x9c>)
   3135e:	2181      	movs	r1, #129	; 0x81
   31360:	f006 f881 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   31364:	4817      	ldr	r0, [pc, #92]	; (313c4 <z_thread_timeout+0x98>)
   31366:	f7fe fa4b 	bl	2f800 <z_spin_lock_set_owner>
		if (!killed) {
   3136a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   3136e:	f013 0f28 	tst.w	r3, #40	; 0x28
   31372:	d110      	bne.n	31396 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   31374:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   31378:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   3137c:	b113      	cbz	r3, 31384 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   3137e:	4628      	mov	r0, r5
   31380:	f7ff fd72 	bl	30e68 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   31384:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   31388:	f023 0314 	bic.w	r3, r3, #20
   3138c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   31390:	4628      	mov	r0, r5
   31392:	f7ff fedd 	bl	31150 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31396:	480b      	ldr	r0, [pc, #44]	; (313c4 <z_thread_timeout+0x98>)
   31398:	f7fe fa22 	bl	2f7e0 <z_spin_unlock_valid>
   3139c:	b968      	cbnz	r0, 313ba <z_thread_timeout+0x8e>
   3139e:	4a0a      	ldr	r2, [pc, #40]	; (313c8 <z_thread_timeout+0x9c>)
   313a0:	490d      	ldr	r1, [pc, #52]	; (313d8 <z_thread_timeout+0xac>)
   313a2:	480b      	ldr	r0, [pc, #44]	; (313d0 <z_thread_timeout+0xa4>)
   313a4:	23ac      	movs	r3, #172	; 0xac
   313a6:	f005 feb8 	bl	3711a <printk>
   313aa:	4906      	ldr	r1, [pc, #24]	; (313c4 <z_thread_timeout+0x98>)
   313ac:	480b      	ldr	r0, [pc, #44]	; (313dc <z_thread_timeout+0xb0>)
   313ae:	f005 feb4 	bl	3711a <printk>
   313b2:	4805      	ldr	r0, [pc, #20]	; (313c8 <z_thread_timeout+0x9c>)
   313b4:	21ac      	movs	r1, #172	; 0xac
   313b6:	f006 f856 	bl	37466 <assert_post_action>
	__asm__ volatile(
   313ba:	f386 8811 	msr	BASEPRI, r6
   313be:	f3bf 8f6f 	isb	sy
}
   313c2:	bd70      	pop	{r4, r5, r6, pc}
   313c4:	20002d40 	.word	0x20002d40
   313c8:	0003cd09 	.word	0x0003cd09
   313cc:	0003cd5b 	.word	0x0003cd5b
   313d0:	0003c48a 	.word	0x0003c48a
   313d4:	0003cd70 	.word	0x0003cd70
   313d8:	0003cd2f 	.word	0x0003cd2f
   313dc:	0003cd46 	.word	0x0003cd46

000313e0 <unready_thread>:
{
   313e0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   313e2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   313e6:	7b43      	ldrb	r3, [r0, #13]
   313e8:	2a00      	cmp	r2, #0
{
   313ea:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   313ec:	da06      	bge.n	313fc <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   313ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   313f2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   313f4:	4601      	mov	r1, r0
   313f6:	4806      	ldr	r0, [pc, #24]	; (31410 <unready_thread+0x30>)
   313f8:	f7ff fd14 	bl	30e24 <z_priq_dumb_remove>
	update_cache(thread == _current);
   313fc:	4b05      	ldr	r3, [pc, #20]	; (31414 <unready_thread+0x34>)
   313fe:	6898      	ldr	r0, [r3, #8]
   31400:	1b03      	subs	r3, r0, r4
   31402:	4258      	negs	r0, r3
}
   31404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   31408:	4158      	adcs	r0, r3
   3140a:	f7ff bd9b 	b.w	30f44 <update_cache>
   3140e:	bf00      	nop
   31410:	20002d20 	.word	0x20002d20
   31414:	20002d00 	.word	0x20002d00

00031418 <add_to_waitq_locked>:
{
   31418:	b538      	push	{r3, r4, r5, lr}
   3141a:	4604      	mov	r4, r0
   3141c:	460d      	mov	r5, r1
	unready_thread(thread);
   3141e:	f7ff ffdf 	bl	313e0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   31422:	7b63      	ldrb	r3, [r4, #13]
   31424:	f043 0302 	orr.w	r3, r3, #2
   31428:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3142a:	b31d      	cbz	r5, 31474 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3142c:	4b17      	ldr	r3, [pc, #92]	; (3148c <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   3142e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   31430:	429c      	cmp	r4, r3
   31432:	d109      	bne.n	31448 <add_to_waitq_locked+0x30>
   31434:	4916      	ldr	r1, [pc, #88]	; (31490 <add_to_waitq_locked+0x78>)
   31436:	4817      	ldr	r0, [pc, #92]	; (31494 <add_to_waitq_locked+0x7c>)
   31438:	4a17      	ldr	r2, [pc, #92]	; (31498 <add_to_waitq_locked+0x80>)
   3143a:	23ba      	movs	r3, #186	; 0xba
   3143c:	f005 fe6d 	bl	3711a <printk>
   31440:	4815      	ldr	r0, [pc, #84]	; (31498 <add_to_waitq_locked+0x80>)
   31442:	21ba      	movs	r1, #186	; 0xba
   31444:	f006 f80f 	bl	37466 <assert_post_action>
	return list->head == list;
   31448:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3144a:	429d      	cmp	r5, r3
   3144c:	bf08      	it	eq
   3144e:	2300      	moveq	r3, #0
   31450:	2b00      	cmp	r3, #0
   31452:	bf38      	it	cc
   31454:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   31456:	b19b      	cbz	r3, 31480 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
   31458:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   3145c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   31460:	4291      	cmp	r1, r2
   31462:	d008      	beq.n	31476 <add_to_waitq_locked+0x5e>
		return b2 - b1;
   31464:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   31466:	2a00      	cmp	r2, #0
   31468:	dd05      	ble.n	31476 <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
   3146a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3146c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   31470:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   31472:	605c      	str	r4, [r3, #4]
}
   31474:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   31476:	686a      	ldr	r2, [r5, #4]
   31478:	4293      	cmp	r3, r2
   3147a:	d001      	beq.n	31480 <add_to_waitq_locked+0x68>
   3147c:	681b      	ldr	r3, [r3, #0]
   3147e:	e7ea      	b.n	31456 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
   31480:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   31482:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   31486:	601c      	str	r4, [r3, #0]
	list->tail = node;
   31488:	606c      	str	r4, [r5, #4]
   3148a:	e7f3      	b.n	31474 <add_to_waitq_locked+0x5c>
   3148c:	20002038 	.word	0x20002038
   31490:	00041635 	.word	0x00041635
   31494:	0003c48a 	.word	0x0003c48a
   31498:	00041613 	.word	0x00041613

0003149c <pend>:
{
   3149c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   314a0:	4604      	mov	r4, r0
   314a2:	460d      	mov	r5, r1
   314a4:	4616      	mov	r6, r2
   314a6:	461f      	mov	r7, r3
	__asm__ volatile(
   314a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   314ac:	f3ef 8811 	mrs	r8, BASEPRI
   314b0:	f383 8812 	msr	BASEPRI_MAX, r3
   314b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   314b8:	481f      	ldr	r0, [pc, #124]	; (31538 <pend+0x9c>)
   314ba:	f7fe f983 	bl	2f7c4 <z_spin_lock_valid>
   314be:	b968      	cbnz	r0, 314dc <pend+0x40>
   314c0:	4a1e      	ldr	r2, [pc, #120]	; (3153c <pend+0xa0>)
   314c2:	491f      	ldr	r1, [pc, #124]	; (31540 <pend+0xa4>)
   314c4:	481f      	ldr	r0, [pc, #124]	; (31544 <pend+0xa8>)
   314c6:	2381      	movs	r3, #129	; 0x81
   314c8:	f005 fe27 	bl	3711a <printk>
   314cc:	491a      	ldr	r1, [pc, #104]	; (31538 <pend+0x9c>)
   314ce:	481e      	ldr	r0, [pc, #120]	; (31548 <pend+0xac>)
   314d0:	f005 fe23 	bl	3711a <printk>
   314d4:	4819      	ldr	r0, [pc, #100]	; (3153c <pend+0xa0>)
   314d6:	2181      	movs	r1, #129	; 0x81
   314d8:	f005 ffc5 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   314dc:	4816      	ldr	r0, [pc, #88]	; (31538 <pend+0x9c>)
   314de:	f7fe f98f 	bl	2f800 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   314e2:	4620      	mov	r0, r4
   314e4:	4629      	mov	r1, r5
   314e6:	f7ff ff97 	bl	31418 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   314ea:	4813      	ldr	r0, [pc, #76]	; (31538 <pend+0x9c>)
   314ec:	f7fe f978 	bl	2f7e0 <z_spin_unlock_valid>
   314f0:	b968      	cbnz	r0, 3150e <pend+0x72>
   314f2:	4a12      	ldr	r2, [pc, #72]	; (3153c <pend+0xa0>)
   314f4:	4915      	ldr	r1, [pc, #84]	; (3154c <pend+0xb0>)
   314f6:	4813      	ldr	r0, [pc, #76]	; (31544 <pend+0xa8>)
   314f8:	23ac      	movs	r3, #172	; 0xac
   314fa:	f005 fe0e 	bl	3711a <printk>
   314fe:	490e      	ldr	r1, [pc, #56]	; (31538 <pend+0x9c>)
   31500:	4813      	ldr	r0, [pc, #76]	; (31550 <pend+0xb4>)
   31502:	f005 fe0a 	bl	3711a <printk>
   31506:	480d      	ldr	r0, [pc, #52]	; (3153c <pend+0xa0>)
   31508:	21ac      	movs	r1, #172	; 0xac
   3150a:	f005 ffac 	bl	37466 <assert_post_action>
	__asm__ volatile(
   3150e:	f388 8811 	msr	BASEPRI, r8
   31512:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   31516:	1c7b      	adds	r3, r7, #1
   31518:	bf08      	it	eq
   3151a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   3151e:	d008      	beq.n	31532 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   31520:	4632      	mov	r2, r6
   31522:	463b      	mov	r3, r7
   31524:	f104 0018 	add.w	r0, r4, #24
   31528:	490a      	ldr	r1, [pc, #40]	; (31554 <pend+0xb8>)
}
   3152a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3152e:	f000 bd95 	b.w	3205c <z_add_timeout>
   31532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31536:	bf00      	nop
   31538:	20002d40 	.word	0x20002d40
   3153c:	0003cd09 	.word	0x0003cd09
   31540:	0003cd5b 	.word	0x0003cd5b
   31544:	0003c48a 	.word	0x0003c48a
   31548:	0003cd70 	.word	0x0003cd70
   3154c:	0003cd2f 	.word	0x0003cd2f
   31550:	0003cd46 	.word	0x0003cd46
   31554:	0003132d 	.word	0x0003132d

00031558 <z_pend_curr>:
{
   31558:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   3155a:	4b11      	ldr	r3, [pc, #68]	; (315a0 <z_pend_curr+0x48>)
{
   3155c:	4604      	mov	r4, r0
	pending_current = _current;
   3155e:	6898      	ldr	r0, [r3, #8]
   31560:	4b10      	ldr	r3, [pc, #64]	; (315a4 <z_pend_curr+0x4c>)
{
   31562:	460d      	mov	r5, r1
	pending_current = _current;
   31564:	6018      	str	r0, [r3, #0]
{
   31566:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   31568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3156c:	f7ff ff96 	bl	3149c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31570:	4620      	mov	r0, r4
   31572:	f7fe f935 	bl	2f7e0 <z_spin_unlock_valid>
   31576:	b968      	cbnz	r0, 31594 <z_pend_curr+0x3c>
   31578:	4a0b      	ldr	r2, [pc, #44]	; (315a8 <z_pend_curr+0x50>)
   3157a:	490c      	ldr	r1, [pc, #48]	; (315ac <z_pend_curr+0x54>)
   3157c:	480c      	ldr	r0, [pc, #48]	; (315b0 <z_pend_curr+0x58>)
   3157e:	23c3      	movs	r3, #195	; 0xc3
   31580:	f005 fdcb 	bl	3711a <printk>
   31584:	480b      	ldr	r0, [pc, #44]	; (315b4 <z_pend_curr+0x5c>)
   31586:	4621      	mov	r1, r4
   31588:	f005 fdc7 	bl	3711a <printk>
   3158c:	4806      	ldr	r0, [pc, #24]	; (315a8 <z_pend_curr+0x50>)
   3158e:	21c3      	movs	r1, #195	; 0xc3
   31590:	f005 ff69 	bl	37466 <assert_post_action>
   31594:	4628      	mov	r0, r5
}
   31596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3159a:	f7f0 bec5 	b.w	22328 <arch_swap>
   3159e:	bf00      	nop
   315a0:	20002d00 	.word	0x20002d00
   315a4:	20002d3c 	.word	0x20002d3c
   315a8:	0003cd09 	.word	0x0003cd09
   315ac:	0003cd2f 	.word	0x0003cd2f
   315b0:	0003c48a 	.word	0x0003c48a
   315b4:	0003cd46 	.word	0x0003cd46

000315b8 <z_set_prio>:
{
   315b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   315ba:	4604      	mov	r4, r0
   315bc:	460e      	mov	r6, r1
	__asm__ volatile(
   315be:	f04f 0340 	mov.w	r3, #64	; 0x40
   315c2:	f3ef 8711 	mrs	r7, BASEPRI
   315c6:	f383 8812 	msr	BASEPRI_MAX, r3
   315ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   315ce:	483c      	ldr	r0, [pc, #240]	; (316c0 <z_set_prio+0x108>)
   315d0:	f7fe f8f8 	bl	2f7c4 <z_spin_lock_valid>
   315d4:	b968      	cbnz	r0, 315f2 <z_set_prio+0x3a>
   315d6:	4a3b      	ldr	r2, [pc, #236]	; (316c4 <z_set_prio+0x10c>)
   315d8:	493b      	ldr	r1, [pc, #236]	; (316c8 <z_set_prio+0x110>)
   315da:	483c      	ldr	r0, [pc, #240]	; (316cc <z_set_prio+0x114>)
   315dc:	2381      	movs	r3, #129	; 0x81
   315de:	f005 fd9c 	bl	3711a <printk>
   315e2:	4937      	ldr	r1, [pc, #220]	; (316c0 <z_set_prio+0x108>)
   315e4:	483a      	ldr	r0, [pc, #232]	; (316d0 <z_set_prio+0x118>)
   315e6:	f005 fd98 	bl	3711a <printk>
   315ea:	4836      	ldr	r0, [pc, #216]	; (316c4 <z_set_prio+0x10c>)
   315ec:	2181      	movs	r1, #129	; 0x81
   315ee:	f005 ff3a 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   315f2:	4833      	ldr	r0, [pc, #204]	; (316c0 <z_set_prio+0x108>)
   315f4:	f7fe f904 	bl	2f800 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   315f8:	7b63      	ldrb	r3, [r4, #13]
   315fa:	06da      	lsls	r2, r3, #27
   315fc:	b276      	sxtb	r6, r6
   315fe:	d15c      	bne.n	316ba <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
   31600:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   31602:	2d00      	cmp	r5, #0
   31604:	d159      	bne.n	316ba <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   31606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3160a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3160c:	4831      	ldr	r0, [pc, #196]	; (316d4 <z_set_prio+0x11c>)
   3160e:	4621      	mov	r1, r4
   31610:	f7ff fc08 	bl	30e24 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   31614:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   31616:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   31618:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3161c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3161e:	4b2e      	ldr	r3, [pc, #184]	; (316d8 <z_set_prio+0x120>)
   31620:	429c      	cmp	r4, r3
   31622:	d109      	bne.n	31638 <z_set_prio+0x80>
   31624:	492d      	ldr	r1, [pc, #180]	; (316dc <z_set_prio+0x124>)
   31626:	4829      	ldr	r0, [pc, #164]	; (316cc <z_set_prio+0x114>)
   31628:	4a2d      	ldr	r2, [pc, #180]	; (316e0 <z_set_prio+0x128>)
   3162a:	23ba      	movs	r3, #186	; 0xba
   3162c:	f005 fd75 	bl	3711a <printk>
   31630:	482b      	ldr	r0, [pc, #172]	; (316e0 <z_set_prio+0x128>)
   31632:	21ba      	movs	r1, #186	; 0xba
   31634:	f005 ff17 	bl	37466 <assert_post_action>
	return list->head == list;
   31638:	492a      	ldr	r1, [pc, #168]	; (316e4 <z_set_prio+0x12c>)
   3163a:	460b      	mov	r3, r1
   3163c:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31640:	4298      	cmp	r0, r3
   31642:	bf18      	it	ne
   31644:	4605      	movne	r5, r0
   31646:	2d00      	cmp	r5, #0
   31648:	461a      	mov	r2, r3
   3164a:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3164c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   3164e:	bf38      	it	cc
   31650:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   31652:	b36b      	cbz	r3, 316b0 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
   31654:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   31658:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   3165c:	4286      	cmp	r6, r0
   3165e:	d023      	beq.n	316a8 <z_set_prio+0xf0>
		return b2 - b1;
   31660:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   31662:	2800      	cmp	r0, #0
   31664:	dd20      	ble.n	316a8 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
   31666:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   31668:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   3166c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3166e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   31670:	2001      	movs	r0, #1
   31672:	f7ff fc67 	bl	30f44 <update_cache>
   31676:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31678:	4811      	ldr	r0, [pc, #68]	; (316c0 <z_set_prio+0x108>)
   3167a:	f7fe f8b1 	bl	2f7e0 <z_spin_unlock_valid>
   3167e:	b968      	cbnz	r0, 3169c <z_set_prio+0xe4>
   31680:	4a10      	ldr	r2, [pc, #64]	; (316c4 <z_set_prio+0x10c>)
   31682:	4919      	ldr	r1, [pc, #100]	; (316e8 <z_set_prio+0x130>)
   31684:	4811      	ldr	r0, [pc, #68]	; (316cc <z_set_prio+0x114>)
   31686:	23ac      	movs	r3, #172	; 0xac
   31688:	f005 fd47 	bl	3711a <printk>
   3168c:	490c      	ldr	r1, [pc, #48]	; (316c0 <z_set_prio+0x108>)
   3168e:	4817      	ldr	r0, [pc, #92]	; (316ec <z_set_prio+0x134>)
   31690:	f005 fd43 	bl	3711a <printk>
   31694:	480b      	ldr	r0, [pc, #44]	; (316c4 <z_set_prio+0x10c>)
   31696:	21ac      	movs	r1, #172	; 0xac
   31698:	f005 fee5 	bl	37466 <assert_post_action>
	__asm__ volatile(
   3169c:	f387 8811 	msr	BASEPRI, r7
   316a0:	f3bf 8f6f 	isb	sy
}
   316a4:	4620      	mov	r0, r4
   316a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   316a8:	42ab      	cmp	r3, r5
   316aa:	d001      	beq.n	316b0 <z_set_prio+0xf8>
   316ac:	681b      	ldr	r3, [r3, #0]
   316ae:	e7d0      	b.n	31652 <z_set_prio+0x9a>
	node->prev = tail;
   316b0:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   316b4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   316b6:	624c      	str	r4, [r1, #36]	; 0x24
}
   316b8:	e7da      	b.n	31670 <z_set_prio+0xb8>
			thread->base.prio = prio;
   316ba:	73a6      	strb	r6, [r4, #14]
   316bc:	2400      	movs	r4, #0
   316be:	e7db      	b.n	31678 <z_set_prio+0xc0>
   316c0:	20002d40 	.word	0x20002d40
   316c4:	0003cd09 	.word	0x0003cd09
   316c8:	0003cd5b 	.word	0x0003cd5b
   316cc:	0003c48a 	.word	0x0003c48a
   316d0:	0003cd70 	.word	0x0003cd70
   316d4:	20002d20 	.word	0x20002d20
   316d8:	20002038 	.word	0x20002038
   316dc:	00041635 	.word	0x00041635
   316e0:	00041613 	.word	0x00041613
   316e4:	20002d00 	.word	0x20002d00
   316e8:	0003cd2f 	.word	0x0003cd2f
   316ec:	0003cd46 	.word	0x0003cd46

000316f0 <z_impl_k_thread_suspend>:
{
   316f0:	b570      	push	{r4, r5, r6, lr}
   316f2:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   316f4:	3018      	adds	r0, #24
   316f6:	f000 fd85 	bl	32204 <z_abort_timeout>
	__asm__ volatile(
   316fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   316fe:	f3ef 8611 	mrs	r6, BASEPRI
   31702:	f383 8812 	msr	BASEPRI_MAX, r3
   31706:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3170a:	4825      	ldr	r0, [pc, #148]	; (317a0 <z_impl_k_thread_suspend+0xb0>)
   3170c:	f7fe f85a 	bl	2f7c4 <z_spin_lock_valid>
   31710:	b968      	cbnz	r0, 3172e <z_impl_k_thread_suspend+0x3e>
   31712:	4a24      	ldr	r2, [pc, #144]	; (317a4 <z_impl_k_thread_suspend+0xb4>)
   31714:	4924      	ldr	r1, [pc, #144]	; (317a8 <z_impl_k_thread_suspend+0xb8>)
   31716:	4825      	ldr	r0, [pc, #148]	; (317ac <z_impl_k_thread_suspend+0xbc>)
   31718:	2381      	movs	r3, #129	; 0x81
   3171a:	f005 fcfe 	bl	3711a <printk>
   3171e:	4920      	ldr	r1, [pc, #128]	; (317a0 <z_impl_k_thread_suspend+0xb0>)
   31720:	4823      	ldr	r0, [pc, #140]	; (317b0 <z_impl_k_thread_suspend+0xc0>)
   31722:	f005 fcfa 	bl	3711a <printk>
   31726:	481f      	ldr	r0, [pc, #124]	; (317a4 <z_impl_k_thread_suspend+0xb4>)
   31728:	2181      	movs	r1, #129	; 0x81
   3172a:	f005 fe9c 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   3172e:	481c      	ldr	r0, [pc, #112]	; (317a0 <z_impl_k_thread_suspend+0xb0>)
   31730:	f7fe f866 	bl	2f800 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   31734:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   31738:	7b63      	ldrb	r3, [r4, #13]
   3173a:	2a00      	cmp	r2, #0
   3173c:	da06      	bge.n	3174c <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3173e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   31742:	481c      	ldr	r0, [pc, #112]	; (317b4 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   31744:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   31746:	4621      	mov	r1, r4
   31748:	f7ff fb6c 	bl	30e24 <z_priq_dumb_remove>
		update_cache(thread == _current);
   3174c:	4d1a      	ldr	r5, [pc, #104]	; (317b8 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3174e:	7b63      	ldrb	r3, [r4, #13]
   31750:	68a8      	ldr	r0, [r5, #8]
   31752:	f043 0310 	orr.w	r3, r3, #16
   31756:	7363      	strb	r3, [r4, #13]
   31758:	1b03      	subs	r3, r0, r4
   3175a:	4258      	negs	r0, r3
   3175c:	4158      	adcs	r0, r3
   3175e:	f7ff fbf1 	bl	30f44 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31762:	480f      	ldr	r0, [pc, #60]	; (317a0 <z_impl_k_thread_suspend+0xb0>)
   31764:	f7fe f83c 	bl	2f7e0 <z_spin_unlock_valid>
   31768:	b968      	cbnz	r0, 31786 <z_impl_k_thread_suspend+0x96>
   3176a:	4a0e      	ldr	r2, [pc, #56]	; (317a4 <z_impl_k_thread_suspend+0xb4>)
   3176c:	4913      	ldr	r1, [pc, #76]	; (317bc <z_impl_k_thread_suspend+0xcc>)
   3176e:	480f      	ldr	r0, [pc, #60]	; (317ac <z_impl_k_thread_suspend+0xbc>)
   31770:	23ac      	movs	r3, #172	; 0xac
   31772:	f005 fcd2 	bl	3711a <printk>
   31776:	490a      	ldr	r1, [pc, #40]	; (317a0 <z_impl_k_thread_suspend+0xb0>)
   31778:	4811      	ldr	r0, [pc, #68]	; (317c0 <z_impl_k_thread_suspend+0xd0>)
   3177a:	f005 fcce 	bl	3711a <printk>
   3177e:	4809      	ldr	r0, [pc, #36]	; (317a4 <z_impl_k_thread_suspend+0xb4>)
   31780:	21ac      	movs	r1, #172	; 0xac
   31782:	f005 fe70 	bl	37466 <assert_post_action>
	__asm__ volatile(
   31786:	f386 8811 	msr	BASEPRI, r6
   3178a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   3178e:	68ab      	ldr	r3, [r5, #8]
   31790:	42a3      	cmp	r3, r4
   31792:	d103      	bne.n	3179c <z_impl_k_thread_suspend+0xac>
}
   31794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   31798:	f008 bdd8 	b.w	3a34c <z_reschedule_unlocked>
}
   3179c:	bd70      	pop	{r4, r5, r6, pc}
   3179e:	bf00      	nop
   317a0:	20002d40 	.word	0x20002d40
   317a4:	0003cd09 	.word	0x0003cd09
   317a8:	0003cd5b 	.word	0x0003cd5b
   317ac:	0003c48a 	.word	0x0003c48a
   317b0:	0003cd70 	.word	0x0003cd70
   317b4:	20002d20 	.word	0x20002d20
   317b8:	20002d00 	.word	0x20002d00
   317bc:	0003cd2f 	.word	0x0003cd2f
   317c0:	0003cd46 	.word	0x0003cd46

000317c4 <k_sched_unlock>:
{
   317c4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   317c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   317ca:	f3ef 8511 	mrs	r5, BASEPRI
   317ce:	f383 8812 	msr	BASEPRI_MAX, r3
   317d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   317d6:	482d      	ldr	r0, [pc, #180]	; (3188c <k_sched_unlock+0xc8>)
   317d8:	f7fd fff4 	bl	2f7c4 <z_spin_lock_valid>
   317dc:	b968      	cbnz	r0, 317fa <k_sched_unlock+0x36>
   317de:	4a2c      	ldr	r2, [pc, #176]	; (31890 <k_sched_unlock+0xcc>)
   317e0:	492c      	ldr	r1, [pc, #176]	; (31894 <k_sched_unlock+0xd0>)
   317e2:	482d      	ldr	r0, [pc, #180]	; (31898 <k_sched_unlock+0xd4>)
   317e4:	2381      	movs	r3, #129	; 0x81
   317e6:	f005 fc98 	bl	3711a <printk>
   317ea:	4928      	ldr	r1, [pc, #160]	; (3188c <k_sched_unlock+0xc8>)
   317ec:	482b      	ldr	r0, [pc, #172]	; (3189c <k_sched_unlock+0xd8>)
   317ee:	f005 fc94 	bl	3711a <printk>
   317f2:	4827      	ldr	r0, [pc, #156]	; (31890 <k_sched_unlock+0xcc>)
   317f4:	2181      	movs	r1, #129	; 0x81
   317f6:	f005 fe36 	bl	37466 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   317fa:	4c29      	ldr	r4, [pc, #164]	; (318a0 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   317fc:	4823      	ldr	r0, [pc, #140]	; (3188c <k_sched_unlock+0xc8>)
   317fe:	f7fd ffff 	bl	2f800 <z_spin_lock_set_owner>
   31802:	68a2      	ldr	r2, [r4, #8]
   31804:	7bd2      	ldrb	r2, [r2, #15]
   31806:	b972      	cbnz	r2, 31826 <k_sched_unlock+0x62>
   31808:	4926      	ldr	r1, [pc, #152]	; (318a4 <k_sched_unlock+0xe0>)
   3180a:	4a27      	ldr	r2, [pc, #156]	; (318a8 <k_sched_unlock+0xe4>)
   3180c:	4822      	ldr	r0, [pc, #136]	; (31898 <k_sched_unlock+0xd4>)
   3180e:	f240 3385 	movw	r3, #901	; 0x385
   31812:	f005 fc82 	bl	3711a <printk>
   31816:	4825      	ldr	r0, [pc, #148]	; (318ac <k_sched_unlock+0xe8>)
   31818:	f005 fc7f 	bl	3711a <printk>
   3181c:	4822      	ldr	r0, [pc, #136]	; (318a8 <k_sched_unlock+0xe4>)
   3181e:	f240 3185 	movw	r1, #901	; 0x385
   31822:	f005 fe20 	bl	37466 <assert_post_action>
   31826:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   3182a:	b173      	cbz	r3, 3184a <k_sched_unlock+0x86>
   3182c:	4920      	ldr	r1, [pc, #128]	; (318b0 <k_sched_unlock+0xec>)
   3182e:	4a1e      	ldr	r2, [pc, #120]	; (318a8 <k_sched_unlock+0xe4>)
   31830:	4819      	ldr	r0, [pc, #100]	; (31898 <k_sched_unlock+0xd4>)
   31832:	f240 3386 	movw	r3, #902	; 0x386
   31836:	f005 fc70 	bl	3711a <printk>
   3183a:	481c      	ldr	r0, [pc, #112]	; (318ac <k_sched_unlock+0xe8>)
   3183c:	f005 fc6d 	bl	3711a <printk>
   31840:	4819      	ldr	r0, [pc, #100]	; (318a8 <k_sched_unlock+0xe4>)
   31842:	f240 3186 	movw	r1, #902	; 0x386
   31846:	f005 fe0e 	bl	37466 <assert_post_action>
		++_current->base.sched_locked;
   3184a:	68a2      	ldr	r2, [r4, #8]
   3184c:	7bd3      	ldrb	r3, [r2, #15]
   3184e:	3301      	adds	r3, #1
		update_cache(0);
   31850:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   31852:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   31854:	f7ff fb76 	bl	30f44 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31858:	480c      	ldr	r0, [pc, #48]	; (3188c <k_sched_unlock+0xc8>)
   3185a:	f7fd ffc1 	bl	2f7e0 <z_spin_unlock_valid>
   3185e:	b968      	cbnz	r0, 3187c <k_sched_unlock+0xb8>
   31860:	4a0b      	ldr	r2, [pc, #44]	; (31890 <k_sched_unlock+0xcc>)
   31862:	4914      	ldr	r1, [pc, #80]	; (318b4 <k_sched_unlock+0xf0>)
   31864:	480c      	ldr	r0, [pc, #48]	; (31898 <k_sched_unlock+0xd4>)
   31866:	23ac      	movs	r3, #172	; 0xac
   31868:	f005 fc57 	bl	3711a <printk>
   3186c:	4907      	ldr	r1, [pc, #28]	; (3188c <k_sched_unlock+0xc8>)
   3186e:	4812      	ldr	r0, [pc, #72]	; (318b8 <k_sched_unlock+0xf4>)
   31870:	f005 fc53 	bl	3711a <printk>
   31874:	4806      	ldr	r0, [pc, #24]	; (31890 <k_sched_unlock+0xcc>)
   31876:	21ac      	movs	r1, #172	; 0xac
   31878:	f005 fdf5 	bl	37466 <assert_post_action>
	__asm__ volatile(
   3187c:	f385 8811 	msr	BASEPRI, r5
   31880:	f3bf 8f6f 	isb	sy
}
   31884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   31888:	f008 bd60 	b.w	3a34c <z_reschedule_unlocked>
   3188c:	20002d40 	.word	0x20002d40
   31890:	0003cd09 	.word	0x0003cd09
   31894:	0003cd5b 	.word	0x0003cd5b
   31898:	0003c48a 	.word	0x0003c48a
   3189c:	0003cd70 	.word	0x0003cd70
   318a0:	20002d00 	.word	0x20002d00
   318a4:	00041694 	.word	0x00041694
   318a8:	00041613 	.word	0x00041613
   318ac:	0003cae0 	.word	0x0003cae0
   318b0:	0004134b 	.word	0x0004134b
   318b4:	0003cd2f 	.word	0x0003cd2f
   318b8:	0003cd46 	.word	0x0003cd46

000318bc <z_unpend1_no_timeout>:
{
   318bc:	b538      	push	{r3, r4, r5, lr}
   318be:	4604      	mov	r4, r0
	__asm__ volatile(
   318c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   318c4:	f3ef 8511 	mrs	r5, BASEPRI
   318c8:	f383 8812 	msr	BASEPRI_MAX, r3
   318cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   318d0:	4819      	ldr	r0, [pc, #100]	; (31938 <z_unpend1_no_timeout+0x7c>)
   318d2:	f7fd ff77 	bl	2f7c4 <z_spin_lock_valid>
   318d6:	b968      	cbnz	r0, 318f4 <z_unpend1_no_timeout+0x38>
   318d8:	4a18      	ldr	r2, [pc, #96]	; (3193c <z_unpend1_no_timeout+0x80>)
   318da:	4919      	ldr	r1, [pc, #100]	; (31940 <z_unpend1_no_timeout+0x84>)
   318dc:	4819      	ldr	r0, [pc, #100]	; (31944 <z_unpend1_no_timeout+0x88>)
   318de:	2381      	movs	r3, #129	; 0x81
   318e0:	f005 fc1b 	bl	3711a <printk>
   318e4:	4914      	ldr	r1, [pc, #80]	; (31938 <z_unpend1_no_timeout+0x7c>)
   318e6:	4818      	ldr	r0, [pc, #96]	; (31948 <z_unpend1_no_timeout+0x8c>)
   318e8:	f005 fc17 	bl	3711a <printk>
   318ec:	4813      	ldr	r0, [pc, #76]	; (3193c <z_unpend1_no_timeout+0x80>)
   318ee:	2181      	movs	r1, #129	; 0x81
   318f0:	f005 fdb9 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   318f4:	4810      	ldr	r0, [pc, #64]	; (31938 <z_unpend1_no_timeout+0x7c>)
   318f6:	f7fd ff83 	bl	2f800 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   318fa:	4620      	mov	r0, r4
   318fc:	f008 fd30 	bl	3a360 <z_priq_dumb_best>
		if (thread != NULL) {
   31900:	4604      	mov	r4, r0
   31902:	b108      	cbz	r0, 31908 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   31904:	f7ff fab0 	bl	30e68 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31908:	480b      	ldr	r0, [pc, #44]	; (31938 <z_unpend1_no_timeout+0x7c>)
   3190a:	f7fd ff69 	bl	2f7e0 <z_spin_unlock_valid>
   3190e:	b968      	cbnz	r0, 3192c <z_unpend1_no_timeout+0x70>
   31910:	4a0a      	ldr	r2, [pc, #40]	; (3193c <z_unpend1_no_timeout+0x80>)
   31912:	490e      	ldr	r1, [pc, #56]	; (3194c <z_unpend1_no_timeout+0x90>)
   31914:	480b      	ldr	r0, [pc, #44]	; (31944 <z_unpend1_no_timeout+0x88>)
   31916:	23ac      	movs	r3, #172	; 0xac
   31918:	f005 fbff 	bl	3711a <printk>
   3191c:	4906      	ldr	r1, [pc, #24]	; (31938 <z_unpend1_no_timeout+0x7c>)
   3191e:	480c      	ldr	r0, [pc, #48]	; (31950 <z_unpend1_no_timeout+0x94>)
   31920:	f005 fbfb 	bl	3711a <printk>
   31924:	4805      	ldr	r0, [pc, #20]	; (3193c <z_unpend1_no_timeout+0x80>)
   31926:	21ac      	movs	r1, #172	; 0xac
   31928:	f005 fd9d 	bl	37466 <assert_post_action>
	__asm__ volatile(
   3192c:	f385 8811 	msr	BASEPRI, r5
   31930:	f3bf 8f6f 	isb	sy
}
   31934:	4620      	mov	r0, r4
   31936:	bd38      	pop	{r3, r4, r5, pc}
   31938:	20002d40 	.word	0x20002d40
   3193c:	0003cd09 	.word	0x0003cd09
   31940:	0003cd5b 	.word	0x0003cd5b
   31944:	0003c48a 	.word	0x0003c48a
   31948:	0003cd70 	.word	0x0003cd70
   3194c:	0003cd2f 	.word	0x0003cd2f
   31950:	0003cd46 	.word	0x0003cd46

00031954 <z_unpend_first_thread>:
{
   31954:	b538      	push	{r3, r4, r5, lr}
   31956:	4604      	mov	r4, r0
	__asm__ volatile(
   31958:	f04f 0340 	mov.w	r3, #64	; 0x40
   3195c:	f3ef 8511 	mrs	r5, BASEPRI
   31960:	f383 8812 	msr	BASEPRI_MAX, r3
   31964:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31968:	481b      	ldr	r0, [pc, #108]	; (319d8 <z_unpend_first_thread+0x84>)
   3196a:	f7fd ff2b 	bl	2f7c4 <z_spin_lock_valid>
   3196e:	b968      	cbnz	r0, 3198c <z_unpend_first_thread+0x38>
   31970:	4a1a      	ldr	r2, [pc, #104]	; (319dc <z_unpend_first_thread+0x88>)
   31972:	491b      	ldr	r1, [pc, #108]	; (319e0 <z_unpend_first_thread+0x8c>)
   31974:	481b      	ldr	r0, [pc, #108]	; (319e4 <z_unpend_first_thread+0x90>)
   31976:	2381      	movs	r3, #129	; 0x81
   31978:	f005 fbcf 	bl	3711a <printk>
   3197c:	4916      	ldr	r1, [pc, #88]	; (319d8 <z_unpend_first_thread+0x84>)
   3197e:	481a      	ldr	r0, [pc, #104]	; (319e8 <z_unpend_first_thread+0x94>)
   31980:	f005 fbcb 	bl	3711a <printk>
   31984:	4815      	ldr	r0, [pc, #84]	; (319dc <z_unpend_first_thread+0x88>)
   31986:	2181      	movs	r1, #129	; 0x81
   31988:	f005 fd6d 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   3198c:	4812      	ldr	r0, [pc, #72]	; (319d8 <z_unpend_first_thread+0x84>)
   3198e:	f7fd ff37 	bl	2f800 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   31992:	4620      	mov	r0, r4
   31994:	f008 fce4 	bl	3a360 <z_priq_dumb_best>
		if (thread != NULL) {
   31998:	4604      	mov	r4, r0
   3199a:	b128      	cbz	r0, 319a8 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   3199c:	f7ff fa64 	bl	30e68 <unpend_thread_no_timeout>
   319a0:	f104 0018 	add.w	r0, r4, #24
   319a4:	f000 fc2e 	bl	32204 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   319a8:	480b      	ldr	r0, [pc, #44]	; (319d8 <z_unpend_first_thread+0x84>)
   319aa:	f7fd ff19 	bl	2f7e0 <z_spin_unlock_valid>
   319ae:	b968      	cbnz	r0, 319cc <z_unpend_first_thread+0x78>
   319b0:	4a0a      	ldr	r2, [pc, #40]	; (319dc <z_unpend_first_thread+0x88>)
   319b2:	490e      	ldr	r1, [pc, #56]	; (319ec <z_unpend_first_thread+0x98>)
   319b4:	480b      	ldr	r0, [pc, #44]	; (319e4 <z_unpend_first_thread+0x90>)
   319b6:	23ac      	movs	r3, #172	; 0xac
   319b8:	f005 fbaf 	bl	3711a <printk>
   319bc:	4906      	ldr	r1, [pc, #24]	; (319d8 <z_unpend_first_thread+0x84>)
   319be:	480c      	ldr	r0, [pc, #48]	; (319f0 <z_unpend_first_thread+0x9c>)
   319c0:	f005 fbab 	bl	3711a <printk>
   319c4:	4805      	ldr	r0, [pc, #20]	; (319dc <z_unpend_first_thread+0x88>)
   319c6:	21ac      	movs	r1, #172	; 0xac
   319c8:	f005 fd4d 	bl	37466 <assert_post_action>
	__asm__ volatile(
   319cc:	f385 8811 	msr	BASEPRI, r5
   319d0:	f3bf 8f6f 	isb	sy
}
   319d4:	4620      	mov	r0, r4
   319d6:	bd38      	pop	{r3, r4, r5, pc}
   319d8:	20002d40 	.word	0x20002d40
   319dc:	0003cd09 	.word	0x0003cd09
   319e0:	0003cd5b 	.word	0x0003cd5b
   319e4:	0003c48a 	.word	0x0003c48a
   319e8:	0003cd70 	.word	0x0003cd70
   319ec:	0003cd2f 	.word	0x0003cd2f
   319f0:	0003cd46 	.word	0x0003cd46

000319f4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   319f4:	4b04      	ldr	r3, [pc, #16]	; (31a08 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   319f6:	2100      	movs	r1, #0
   319f8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   319fc:	e9c3 2208 	strd	r2, r2, [r3, #32]
   31a00:	4608      	mov	r0, r1
   31a02:	f7ff b8a9 	b.w	30b58 <k_sched_time_slice_set>
   31a06:	bf00      	nop
   31a08:	20002d00 	.word	0x20002d00

00031a0c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   31a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31a0e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   31a12:	b173      	cbz	r3, 31a32 <z_impl_k_yield+0x26>
   31a14:	4941      	ldr	r1, [pc, #260]	; (31b1c <z_impl_k_yield+0x110>)
   31a16:	4a42      	ldr	r2, [pc, #264]	; (31b20 <z_impl_k_yield+0x114>)
   31a18:	4842      	ldr	r0, [pc, #264]	; (31b24 <z_impl_k_yield+0x118>)
   31a1a:	f240 43dc 	movw	r3, #1244	; 0x4dc
   31a1e:	f005 fb7c 	bl	3711a <printk>
   31a22:	4841      	ldr	r0, [pc, #260]	; (31b28 <z_impl_k_yield+0x11c>)
   31a24:	f005 fb79 	bl	3711a <printk>
   31a28:	483d      	ldr	r0, [pc, #244]	; (31b20 <z_impl_k_yield+0x114>)
   31a2a:	f240 41dc 	movw	r1, #1244	; 0x4dc
   31a2e:	f005 fd1a 	bl	37466 <assert_post_action>
	__asm__ volatile(
   31a32:	f04f 0340 	mov.w	r3, #64	; 0x40
   31a36:	f3ef 8611 	mrs	r6, BASEPRI
   31a3a:	f383 8812 	msr	BASEPRI_MAX, r3
   31a3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31a42:	483a      	ldr	r0, [pc, #232]	; (31b2c <z_impl_k_yield+0x120>)
   31a44:	f7fd febe 	bl	2f7c4 <z_spin_lock_valid>
   31a48:	b968      	cbnz	r0, 31a66 <z_impl_k_yield+0x5a>
   31a4a:	4a39      	ldr	r2, [pc, #228]	; (31b30 <z_impl_k_yield+0x124>)
   31a4c:	4939      	ldr	r1, [pc, #228]	; (31b34 <z_impl_k_yield+0x128>)
   31a4e:	4835      	ldr	r0, [pc, #212]	; (31b24 <z_impl_k_yield+0x118>)
   31a50:	2381      	movs	r3, #129	; 0x81
   31a52:	f005 fb62 	bl	3711a <printk>
   31a56:	4935      	ldr	r1, [pc, #212]	; (31b2c <z_impl_k_yield+0x120>)
   31a58:	4837      	ldr	r0, [pc, #220]	; (31b38 <z_impl_k_yield+0x12c>)
   31a5a:	f005 fb5e 	bl	3711a <printk>
   31a5e:	4834      	ldr	r0, [pc, #208]	; (31b30 <z_impl_k_yield+0x124>)
   31a60:	2181      	movs	r1, #129	; 0x81
   31a62:	f005 fd00 	bl	37466 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   31a66:	4d35      	ldr	r5, [pc, #212]	; (31b3c <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
   31a68:	4830      	ldr	r0, [pc, #192]	; (31b2c <z_impl_k_yield+0x120>)
   31a6a:	f7fd fec9 	bl	2f800 <z_spin_lock_set_owner>
   31a6e:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   31a70:	7b4b      	ldrb	r3, [r1, #13]
   31a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   31a76:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   31a78:	f105 0020 	add.w	r0, r5, #32
   31a7c:	f7ff f9d2 	bl	30e24 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   31a80:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   31a82:	7b63      	ldrb	r3, [r4, #13]
   31a84:	f063 037f 	orn	r3, r3, #127	; 0x7f
   31a88:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   31a8a:	4b2d      	ldr	r3, [pc, #180]	; (31b40 <z_impl_k_yield+0x134>)
   31a8c:	429c      	cmp	r4, r3
   31a8e:	d109      	bne.n	31aa4 <z_impl_k_yield+0x98>
   31a90:	492c      	ldr	r1, [pc, #176]	; (31b44 <z_impl_k_yield+0x138>)
   31a92:	4824      	ldr	r0, [pc, #144]	; (31b24 <z_impl_k_yield+0x118>)
   31a94:	4a22      	ldr	r2, [pc, #136]	; (31b20 <z_impl_k_yield+0x114>)
   31a96:	23ba      	movs	r3, #186	; 0xba
   31a98:	f005 fb3f 	bl	3711a <printk>
   31a9c:	4820      	ldr	r0, [pc, #128]	; (31b20 <z_impl_k_yield+0x114>)
   31a9e:	21ba      	movs	r1, #186	; 0xba
   31aa0:	f005 fce1 	bl	37466 <assert_post_action>
	return list->head == list;
   31aa4:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31aa6:	4828      	ldr	r0, [pc, #160]	; (31b48 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   31aa8:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31aaa:	4283      	cmp	r3, r0
   31aac:	bf08      	it	eq
   31aae:	2300      	moveq	r3, #0
   31ab0:	2b00      	cmp	r3, #0
   31ab2:	bf38      	it	cc
   31ab4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   31ab6:	b35b      	cbz	r3, 31b10 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
   31ab8:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   31abc:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   31ac0:	4297      	cmp	r7, r2
   31ac2:	d021      	beq.n	31b08 <z_impl_k_yield+0xfc>
		return b2 - b1;
   31ac4:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   31ac6:	2a00      	cmp	r2, #0
   31ac8:	dd1e      	ble.n	31b08 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
   31aca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   31acc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   31ad0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   31ad2:	605c      	str	r4, [r3, #4]
	update_cache(1);
   31ad4:	2001      	movs	r0, #1
   31ad6:	f7ff fa35 	bl	30f44 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31ada:	4814      	ldr	r0, [pc, #80]	; (31b2c <z_impl_k_yield+0x120>)
   31adc:	f7fd fe80 	bl	2f7e0 <z_spin_unlock_valid>
   31ae0:	b968      	cbnz	r0, 31afe <z_impl_k_yield+0xf2>
   31ae2:	4a13      	ldr	r2, [pc, #76]	; (31b30 <z_impl_k_yield+0x124>)
   31ae4:	4919      	ldr	r1, [pc, #100]	; (31b4c <z_impl_k_yield+0x140>)
   31ae6:	480f      	ldr	r0, [pc, #60]	; (31b24 <z_impl_k_yield+0x118>)
   31ae8:	23c3      	movs	r3, #195	; 0xc3
   31aea:	f005 fb16 	bl	3711a <printk>
   31aee:	490f      	ldr	r1, [pc, #60]	; (31b2c <z_impl_k_yield+0x120>)
   31af0:	4817      	ldr	r0, [pc, #92]	; (31b50 <z_impl_k_yield+0x144>)
   31af2:	f005 fb12 	bl	3711a <printk>
   31af6:	480e      	ldr	r0, [pc, #56]	; (31b30 <z_impl_k_yield+0x124>)
   31af8:	21c3      	movs	r1, #195	; 0xc3
   31afa:	f005 fcb4 	bl	37466 <assert_post_action>
   31afe:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   31b00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   31b04:	f7f0 bc10 	b.w	22328 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   31b08:	428b      	cmp	r3, r1
   31b0a:	d001      	beq.n	31b10 <z_impl_k_yield+0x104>
   31b0c:	681b      	ldr	r3, [r3, #0]
   31b0e:	e7d2      	b.n	31ab6 <z_impl_k_yield+0xaa>
	node->prev = tail;
   31b10:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   31b14:	600c      	str	r4, [r1, #0]
	list->tail = node;
   31b16:	626c      	str	r4, [r5, #36]	; 0x24
}
   31b18:	e7dc      	b.n	31ad4 <z_impl_k_yield+0xc8>
   31b1a:	bf00      	nop
   31b1c:	0004134b 	.word	0x0004134b
   31b20:	00041613 	.word	0x00041613
   31b24:	0003c48a 	.word	0x0003c48a
   31b28:	0003cae0 	.word	0x0003cae0
   31b2c:	20002d40 	.word	0x20002d40
   31b30:	0003cd09 	.word	0x0003cd09
   31b34:	0003cd5b 	.word	0x0003cd5b
   31b38:	0003cd70 	.word	0x0003cd70
   31b3c:	20002d00 	.word	0x20002d00
   31b40:	20002038 	.word	0x20002038
   31b44:	00041635 	.word	0x00041635
   31b48:	20002d20 	.word	0x20002d20
   31b4c:	0003cd2f 	.word	0x0003cd2f
   31b50:	0003cd46 	.word	0x0003cd46

00031b54 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   31b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31b58:	4604      	mov	r4, r0
   31b5a:	460d      	mov	r5, r1
   31b5c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   31b60:	b173      	cbz	r3, 31b80 <z_tick_sleep+0x2c>
   31b62:	4945      	ldr	r1, [pc, #276]	; (31c78 <z_tick_sleep+0x124>)
   31b64:	4a45      	ldr	r2, [pc, #276]	; (31c7c <z_tick_sleep+0x128>)
   31b66:	4846      	ldr	r0, [pc, #280]	; (31c80 <z_tick_sleep+0x12c>)
   31b68:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
   31b6c:	f005 fad5 	bl	3711a <printk>
   31b70:	4844      	ldr	r0, [pc, #272]	; (31c84 <z_tick_sleep+0x130>)
   31b72:	f005 fad2 	bl	3711a <printk>
   31b76:	4841      	ldr	r0, [pc, #260]	; (31c7c <z_tick_sleep+0x128>)
   31b78:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   31b7c:	f005 fc73 	bl	37466 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   31b80:	ea54 0305 	orrs.w	r3, r4, r5
   31b84:	d104      	bne.n	31b90 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   31b86:	f7ff ff41 	bl	31a0c <z_impl_k_yield>
		k_yield();
		return 0;
   31b8a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   31b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   31b90:	f06f 0301 	mvn.w	r3, #1
   31b94:	1b1e      	subs	r6, r3, r4
   31b96:	f04f 33ff 	mov.w	r3, #4294967295
   31b9a:	eb63 0705 	sbc.w	r7, r3, r5
   31b9e:	2e01      	cmp	r6, #1
   31ba0:	f177 0300 	sbcs.w	r3, r7, #0
   31ba4:	da64      	bge.n	31c70 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   31ba6:	f008 fbf5 	bl	3a394 <sys_clock_tick_get_32>
   31baa:	1906      	adds	r6, r0, r4
   31bac:	f04f 0340 	mov.w	r3, #64	; 0x40
   31bb0:	f3ef 8811 	mrs	r8, BASEPRI
   31bb4:	f383 8812 	msr	BASEPRI_MAX, r3
   31bb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31bbc:	4832      	ldr	r0, [pc, #200]	; (31c88 <z_tick_sleep+0x134>)
   31bbe:	f7fd fe01 	bl	2f7c4 <z_spin_lock_valid>
   31bc2:	b968      	cbnz	r0, 31be0 <z_tick_sleep+0x8c>
   31bc4:	4a31      	ldr	r2, [pc, #196]	; (31c8c <z_tick_sleep+0x138>)
   31bc6:	4932      	ldr	r1, [pc, #200]	; (31c90 <z_tick_sleep+0x13c>)
   31bc8:	482d      	ldr	r0, [pc, #180]	; (31c80 <z_tick_sleep+0x12c>)
   31bca:	2381      	movs	r3, #129	; 0x81
   31bcc:	f005 faa5 	bl	3711a <printk>
   31bd0:	492d      	ldr	r1, [pc, #180]	; (31c88 <z_tick_sleep+0x134>)
   31bd2:	4830      	ldr	r0, [pc, #192]	; (31c94 <z_tick_sleep+0x140>)
   31bd4:	f005 faa1 	bl	3711a <printk>
   31bd8:	482c      	ldr	r0, [pc, #176]	; (31c8c <z_tick_sleep+0x138>)
   31bda:	2181      	movs	r1, #129	; 0x81
   31bdc:	f005 fc43 	bl	37466 <assert_post_action>
	pending_current = _current;
   31be0:	4f2d      	ldr	r7, [pc, #180]	; (31c98 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
   31be2:	4829      	ldr	r0, [pc, #164]	; (31c88 <z_tick_sleep+0x134>)
   31be4:	f7fd fe0c 	bl	2f800 <z_spin_lock_set_owner>
   31be8:	4b2c      	ldr	r3, [pc, #176]	; (31c9c <z_tick_sleep+0x148>)
   31bea:	68b8      	ldr	r0, [r7, #8]
   31bec:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   31bee:	f7ff fbf7 	bl	313e0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   31bf2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   31bf4:	492a      	ldr	r1, [pc, #168]	; (31ca0 <z_tick_sleep+0x14c>)
   31bf6:	4622      	mov	r2, r4
   31bf8:	462b      	mov	r3, r5
   31bfa:	3018      	adds	r0, #24
   31bfc:	f000 fa2e 	bl	3205c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   31c00:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31c02:	4821      	ldr	r0, [pc, #132]	; (31c88 <z_tick_sleep+0x134>)
   31c04:	7b53      	ldrb	r3, [r2, #13]
   31c06:	f043 0310 	orr.w	r3, r3, #16
   31c0a:	7353      	strb	r3, [r2, #13]
   31c0c:	f7fd fde8 	bl	2f7e0 <z_spin_unlock_valid>
   31c10:	b968      	cbnz	r0, 31c2e <z_tick_sleep+0xda>
   31c12:	4a1e      	ldr	r2, [pc, #120]	; (31c8c <z_tick_sleep+0x138>)
   31c14:	4923      	ldr	r1, [pc, #140]	; (31ca4 <z_tick_sleep+0x150>)
   31c16:	481a      	ldr	r0, [pc, #104]	; (31c80 <z_tick_sleep+0x12c>)
   31c18:	23c3      	movs	r3, #195	; 0xc3
   31c1a:	f005 fa7e 	bl	3711a <printk>
   31c1e:	491a      	ldr	r1, [pc, #104]	; (31c88 <z_tick_sleep+0x134>)
   31c20:	4821      	ldr	r0, [pc, #132]	; (31ca8 <z_tick_sleep+0x154>)
   31c22:	f005 fa7a 	bl	3711a <printk>
   31c26:	4819      	ldr	r0, [pc, #100]	; (31c8c <z_tick_sleep+0x138>)
   31c28:	21c3      	movs	r1, #195	; 0xc3
   31c2a:	f005 fc1c 	bl	37466 <assert_post_action>
   31c2e:	4640      	mov	r0, r8
   31c30:	f7f0 fb7a 	bl	22328 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   31c34:	68bb      	ldr	r3, [r7, #8]
   31c36:	7b5b      	ldrb	r3, [r3, #13]
   31c38:	06db      	lsls	r3, r3, #27
   31c3a:	d50e      	bpl.n	31c5a <z_tick_sleep+0x106>
   31c3c:	491b      	ldr	r1, [pc, #108]	; (31cac <z_tick_sleep+0x158>)
   31c3e:	4a0f      	ldr	r2, [pc, #60]	; (31c7c <z_tick_sleep+0x128>)
   31c40:	480f      	ldr	r0, [pc, #60]	; (31c80 <z_tick_sleep+0x12c>)
   31c42:	f240 5319 	movw	r3, #1305	; 0x519
   31c46:	f005 fa68 	bl	3711a <printk>
   31c4a:	480e      	ldr	r0, [pc, #56]	; (31c84 <z_tick_sleep+0x130>)
   31c4c:	f005 fa65 	bl	3711a <printk>
   31c50:	480a      	ldr	r0, [pc, #40]	; (31c7c <z_tick_sleep+0x128>)
   31c52:	f240 5119 	movw	r1, #1305	; 0x519
   31c56:	f005 fc06 	bl	37466 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   31c5a:	f008 fb9b 	bl	3a394 <sys_clock_tick_get_32>
   31c5e:	1a30      	subs	r0, r6, r0
   31c60:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   31c64:	2801      	cmp	r0, #1
   31c66:	f171 0300 	sbcs.w	r3, r1, #0
   31c6a:	bfb8      	it	lt
   31c6c:	2000      	movlt	r0, #0
   31c6e:	e78d      	b.n	31b8c <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   31c70:	f06f 0601 	mvn.w	r6, #1
   31c74:	1b36      	subs	r6, r6, r4
   31c76:	e799      	b.n	31bac <z_tick_sleep+0x58>
   31c78:	0004134b 	.word	0x0004134b
   31c7c:	00041613 	.word	0x00041613
   31c80:	0003c48a 	.word	0x0003c48a
   31c84:	0003cae0 	.word	0x0003cae0
   31c88:	20002d40 	.word	0x20002d40
   31c8c:	0003cd09 	.word	0x0003cd09
   31c90:	0003cd5b 	.word	0x0003cd5b
   31c94:	0003cd70 	.word	0x0003cd70
   31c98:	20002d00 	.word	0x20002d00
   31c9c:	20002d3c 	.word	0x20002d3c
   31ca0:	0003132d 	.word	0x0003132d
   31ca4:	0003cd2f 	.word	0x0003cd2f
   31ca8:	0003cd46 	.word	0x0003cd46
   31cac:	000416c5 	.word	0x000416c5

00031cb0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   31cb0:	b538      	push	{r3, r4, r5, lr}
   31cb2:	4604      	mov	r4, r0
   31cb4:	460d      	mov	r5, r1
   31cb6:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   31cba:	b173      	cbz	r3, 31cda <z_impl_k_sleep+0x2a>
   31cbc:	4913      	ldr	r1, [pc, #76]	; (31d0c <z_impl_k_sleep+0x5c>)
   31cbe:	4a14      	ldr	r2, [pc, #80]	; (31d10 <z_impl_k_sleep+0x60>)
   31cc0:	4814      	ldr	r0, [pc, #80]	; (31d14 <z_impl_k_sleep+0x64>)
   31cc2:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   31cc6:	f005 fa28 	bl	3711a <printk>
   31cca:	4813      	ldr	r0, [pc, #76]	; (31d18 <z_impl_k_sleep+0x68>)
   31ccc:	f005 fa25 	bl	3711a <printk>
   31cd0:	480f      	ldr	r0, [pc, #60]	; (31d10 <z_impl_k_sleep+0x60>)
   31cd2:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   31cd6:	f005 fbc6 	bl	37466 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   31cda:	1c6b      	adds	r3, r5, #1
   31cdc:	bf08      	it	eq
   31cde:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   31ce2:	d106      	bne.n	31cf2 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   31ce4:	4b0d      	ldr	r3, [pc, #52]	; (31d1c <z_impl_k_sleep+0x6c>)
   31ce6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   31ce8:	f7ff fd02 	bl	316f0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   31cec:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   31cf0:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   31cf2:	4620      	mov	r0, r4
   31cf4:	4629      	mov	r1, r5
   31cf6:	f7ff ff2d 	bl	31b54 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   31cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   31cfe:	fb80 3403 	smull	r3, r4, r0, r3
   31d02:	0bd8      	lsrs	r0, r3, #15
   31d04:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   31d08:	e7f2      	b.n	31cf0 <z_impl_k_sleep+0x40>
   31d0a:	bf00      	nop
   31d0c:	0004134b 	.word	0x0004134b
   31d10:	00041613 	.word	0x00041613
   31d14:	0003c48a 	.word	0x0003c48a
   31d18:	0003cae0 	.word	0x0003cae0
   31d1c:	20002d00 	.word	0x20002d00

00031d20 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   31d20:	4b01      	ldr	r3, [pc, #4]	; (31d28 <z_impl_z_current_get+0x8>)
   31d22:	6898      	ldr	r0, [r3, #8]
   31d24:	4770      	bx	lr
   31d26:	bf00      	nop
   31d28:	20002d00 	.word	0x20002d00

00031d2c <z_impl_k_is_preempt_thread>:
   31d2c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   31d30:	b93b      	cbnz	r3, 31d42 <z_impl_k_is_preempt_thread+0x16>
   31d32:	4b05      	ldr	r3, [pc, #20]	; (31d48 <z_impl_k_is_preempt_thread+0x1c>)
   31d34:	689b      	ldr	r3, [r3, #8]
   31d36:	89d8      	ldrh	r0, [r3, #14]
   31d38:	287f      	cmp	r0, #127	; 0x7f
   31d3a:	bf8c      	ite	hi
   31d3c:	2000      	movhi	r0, #0
   31d3e:	2001      	movls	r0, #1
   31d40:	4770      	bx	lr
   31d42:	2000      	movs	r0, #0
}
   31d44:	4770      	bx	lr
   31d46:	bf00      	nop
   31d48:	20002d00 	.word	0x20002d00

00031d4c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   31d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31d50:	4604      	mov	r4, r0
   31d52:	f04f 0340 	mov.w	r3, #64	; 0x40
   31d56:	f3ef 8611 	mrs	r6, BASEPRI
   31d5a:	f383 8812 	msr	BASEPRI_MAX, r3
   31d5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31d62:	4848      	ldr	r0, [pc, #288]	; (31e84 <z_thread_abort+0x138>)
   31d64:	f7fd fd2e 	bl	2f7c4 <z_spin_lock_valid>
   31d68:	b968      	cbnz	r0, 31d86 <z_thread_abort+0x3a>
   31d6a:	4a47      	ldr	r2, [pc, #284]	; (31e88 <z_thread_abort+0x13c>)
   31d6c:	4947      	ldr	r1, [pc, #284]	; (31e8c <z_thread_abort+0x140>)
   31d6e:	4848      	ldr	r0, [pc, #288]	; (31e90 <z_thread_abort+0x144>)
   31d70:	2381      	movs	r3, #129	; 0x81
   31d72:	f005 f9d2 	bl	3711a <printk>
   31d76:	4943      	ldr	r1, [pc, #268]	; (31e84 <z_thread_abort+0x138>)
   31d78:	4846      	ldr	r0, [pc, #280]	; (31e94 <z_thread_abort+0x148>)
   31d7a:	f005 f9ce 	bl	3711a <printk>
   31d7e:	4842      	ldr	r0, [pc, #264]	; (31e88 <z_thread_abort+0x13c>)
   31d80:	2181      	movs	r1, #129	; 0x81
   31d82:	f005 fb70 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   31d86:	483f      	ldr	r0, [pc, #252]	; (31e84 <z_thread_abort+0x138>)
   31d88:	f7fd fd3a 	bl	2f800 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   31d8c:	7b63      	ldrb	r3, [r4, #13]
   31d8e:	071a      	lsls	r2, r3, #28
   31d90:	d517      	bpl.n	31dc2 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31d92:	483c      	ldr	r0, [pc, #240]	; (31e84 <z_thread_abort+0x138>)
   31d94:	f7fd fd24 	bl	2f7e0 <z_spin_unlock_valid>
   31d98:	b968      	cbnz	r0, 31db6 <z_thread_abort+0x6a>
   31d9a:	4a3b      	ldr	r2, [pc, #236]	; (31e88 <z_thread_abort+0x13c>)
   31d9c:	493e      	ldr	r1, [pc, #248]	; (31e98 <z_thread_abort+0x14c>)
   31d9e:	483c      	ldr	r0, [pc, #240]	; (31e90 <z_thread_abort+0x144>)
   31da0:	23ac      	movs	r3, #172	; 0xac
   31da2:	f005 f9ba 	bl	3711a <printk>
   31da6:	4937      	ldr	r1, [pc, #220]	; (31e84 <z_thread_abort+0x138>)
   31da8:	483c      	ldr	r0, [pc, #240]	; (31e9c <z_thread_abort+0x150>)
   31daa:	f005 f9b6 	bl	3711a <printk>
   31dae:	4836      	ldr	r0, [pc, #216]	; (31e88 <z_thread_abort+0x13c>)
   31db0:	21ac      	movs	r1, #172	; 0xac
   31db2:	f005 fb58 	bl	37466 <assert_post_action>
	__asm__ volatile(
   31db6:	f386 8811 	msr	BASEPRI, r6
   31dba:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   31dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   31dc2:	f023 0220 	bic.w	r2, r3, #32
   31dc6:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   31dca:	09d2      	lsrs	r2, r2, #7
   31dcc:	d142      	bne.n	31e54 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   31dce:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   31dd0:	68a3      	ldr	r3, [r4, #8]
   31dd2:	b113      	cbz	r3, 31dda <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   31dd4:	4620      	mov	r0, r4
   31dd6:	f7ff f847 	bl	30e68 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   31dda:	f104 0018 	add.w	r0, r4, #24
   31dde:	f000 fa11 	bl	32204 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   31de2:	f104 0758 	add.w	r7, r4, #88	; 0x58
   31de6:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   31dea:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31dec:	42bd      	cmp	r5, r7
   31dee:	d001      	beq.n	31df4 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   31df0:	2d00      	cmp	r5, #0
   31df2:	d139      	bne.n	31e68 <z_thread_abort+0x11c>
		update_cache(1);
   31df4:	2001      	movs	r0, #1
   31df6:	f7ff f8a5 	bl	30f44 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   31dfa:	4b29      	ldr	r3, [pc, #164]	; (31ea0 <z_thread_abort+0x154>)
   31dfc:	689b      	ldr	r3, [r3, #8]
   31dfe:	42a3      	cmp	r3, r4
   31e00:	d1c7      	bne.n	31d92 <z_thread_abort+0x46>
   31e02:	f3ef 8305 	mrs	r3, IPSR
   31e06:	2b00      	cmp	r3, #0
   31e08:	d1c3      	bne.n	31d92 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31e0a:	481e      	ldr	r0, [pc, #120]	; (31e84 <z_thread_abort+0x138>)
   31e0c:	f7fd fce8 	bl	2f7e0 <z_spin_unlock_valid>
   31e10:	b968      	cbnz	r0, 31e2e <z_thread_abort+0xe2>
   31e12:	4a1d      	ldr	r2, [pc, #116]	; (31e88 <z_thread_abort+0x13c>)
   31e14:	4920      	ldr	r1, [pc, #128]	; (31e98 <z_thread_abort+0x14c>)
   31e16:	481e      	ldr	r0, [pc, #120]	; (31e90 <z_thread_abort+0x144>)
   31e18:	23c3      	movs	r3, #195	; 0xc3
   31e1a:	f005 f97e 	bl	3711a <printk>
   31e1e:	4919      	ldr	r1, [pc, #100]	; (31e84 <z_thread_abort+0x138>)
   31e20:	481e      	ldr	r0, [pc, #120]	; (31e9c <z_thread_abort+0x150>)
   31e22:	f005 f97a 	bl	3711a <printk>
   31e26:	4818      	ldr	r0, [pc, #96]	; (31e88 <z_thread_abort+0x13c>)
   31e28:	21c3      	movs	r1, #195	; 0xc3
   31e2a:	f005 fb1c 	bl	37466 <assert_post_action>
   31e2e:	4630      	mov	r0, r6
   31e30:	f7f0 fa7a 	bl	22328 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   31e34:	4a1b      	ldr	r2, [pc, #108]	; (31ea4 <z_thread_abort+0x158>)
   31e36:	491c      	ldr	r1, [pc, #112]	; (31ea8 <z_thread_abort+0x15c>)
   31e38:	4815      	ldr	r0, [pc, #84]	; (31e90 <z_thread_abort+0x144>)
   31e3a:	f240 634b 	movw	r3, #1611	; 0x64b
   31e3e:	f005 f96c 	bl	3711a <printk>
   31e42:	481a      	ldr	r0, [pc, #104]	; (31eac <z_thread_abort+0x160>)
   31e44:	f005 f969 	bl	3711a <printk>
   31e48:	4816      	ldr	r0, [pc, #88]	; (31ea4 <z_thread_abort+0x158>)
   31e4a:	f240 614b 	movw	r1, #1611	; 0x64b
   31e4e:	f005 fb0a 	bl	37466 <assert_post_action>
   31e52:	e79e      	b.n	31d92 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   31e54:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   31e58:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   31e5c:	4814      	ldr	r0, [pc, #80]	; (31eb0 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   31e5e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   31e60:	4621      	mov	r1, r4
   31e62:	f7fe ffdf 	bl	30e24 <z_priq_dumb_remove>
}
   31e66:	e7b3      	b.n	31dd0 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   31e68:	4628      	mov	r0, r5
   31e6a:	f7fe fffd 	bl	30e68 <unpend_thread_no_timeout>
   31e6e:	f105 0018 	add.w	r0, r5, #24
   31e72:	f000 f9c7 	bl	32204 <z_abort_timeout>
   31e76:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   31e7a:	4628      	mov	r0, r5
   31e7c:	f7ff f968 	bl	31150 <ready_thread>
   31e80:	e7b3      	b.n	31dea <z_thread_abort+0x9e>
   31e82:	bf00      	nop
   31e84:	20002d40 	.word	0x20002d40
   31e88:	0003cd09 	.word	0x0003cd09
   31e8c:	0003cd5b 	.word	0x0003cd5b
   31e90:	0003c48a 	.word	0x0003c48a
   31e94:	0003cd70 	.word	0x0003cd70
   31e98:	0003cd2f 	.word	0x0003cd2f
   31e9c:	0003cd46 	.word	0x0003cd46
   31ea0:	20002d00 	.word	0x20002d00
   31ea4:	00041613 	.word	0x00041613
   31ea8:	00041a5a 	.word	0x00041a5a
   31eac:	00041705 	.word	0x00041705
   31eb0:	20002d20 	.word	0x20002d20

00031eb4 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   31eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31eb6:	4604      	mov	r4, r0
   31eb8:	460e      	mov	r6, r1
   31eba:	4615      	mov	r5, r2
	__asm__ volatile(
   31ebc:	f04f 0340 	mov.w	r3, #64	; 0x40
   31ec0:	f3ef 8711 	mrs	r7, BASEPRI
   31ec4:	f383 8812 	msr	BASEPRI_MAX, r3
   31ec8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31ecc:	481e      	ldr	r0, [pc, #120]	; (31f48 <z_sched_wake+0x94>)
   31ece:	f7fd fc79 	bl	2f7c4 <z_spin_lock_valid>
   31ed2:	b968      	cbnz	r0, 31ef0 <z_sched_wake+0x3c>
   31ed4:	4a1d      	ldr	r2, [pc, #116]	; (31f4c <z_sched_wake+0x98>)
   31ed6:	491e      	ldr	r1, [pc, #120]	; (31f50 <z_sched_wake+0x9c>)
   31ed8:	481e      	ldr	r0, [pc, #120]	; (31f54 <z_sched_wake+0xa0>)
   31eda:	2381      	movs	r3, #129	; 0x81
   31edc:	f005 f91d 	bl	3711a <printk>
   31ee0:	4919      	ldr	r1, [pc, #100]	; (31f48 <z_sched_wake+0x94>)
   31ee2:	481d      	ldr	r0, [pc, #116]	; (31f58 <z_sched_wake+0xa4>)
   31ee4:	f005 f919 	bl	3711a <printk>
   31ee8:	4818      	ldr	r0, [pc, #96]	; (31f4c <z_sched_wake+0x98>)
   31eea:	2181      	movs	r1, #129	; 0x81
   31eec:	f005 fabb 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   31ef0:	4815      	ldr	r0, [pc, #84]	; (31f48 <z_sched_wake+0x94>)
   31ef2:	f7fd fc85 	bl	2f800 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   31ef6:	4620      	mov	r0, r4
   31ef8:	f008 fa32 	bl	3a360 <z_priq_dumb_best>

		if (thread != NULL) {
   31efc:	4604      	mov	r4, r0
   31efe:	b158      	cbz	r0, 31f18 <z_sched_wake+0x64>
   31f00:	67c6      	str	r6, [r0, #124]	; 0x7c
   31f02:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   31f04:	f7fe ffb0 	bl	30e68 <unpend_thread_no_timeout>
   31f08:	f104 0018 	add.w	r0, r4, #24
   31f0c:	f000 f97a 	bl	32204 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   31f10:	4620      	mov	r0, r4
   31f12:	f7ff f91d 	bl	31150 <ready_thread>
			ret = true;
   31f16:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31f18:	480b      	ldr	r0, [pc, #44]	; (31f48 <z_sched_wake+0x94>)
   31f1a:	f7fd fc61 	bl	2f7e0 <z_spin_unlock_valid>
   31f1e:	b968      	cbnz	r0, 31f3c <z_sched_wake+0x88>
   31f20:	4a0a      	ldr	r2, [pc, #40]	; (31f4c <z_sched_wake+0x98>)
   31f22:	490e      	ldr	r1, [pc, #56]	; (31f5c <z_sched_wake+0xa8>)
   31f24:	480b      	ldr	r0, [pc, #44]	; (31f54 <z_sched_wake+0xa0>)
   31f26:	23ac      	movs	r3, #172	; 0xac
   31f28:	f005 f8f7 	bl	3711a <printk>
   31f2c:	4906      	ldr	r1, [pc, #24]	; (31f48 <z_sched_wake+0x94>)
   31f2e:	480c      	ldr	r0, [pc, #48]	; (31f60 <z_sched_wake+0xac>)
   31f30:	f005 f8f3 	bl	3711a <printk>
   31f34:	4805      	ldr	r0, [pc, #20]	; (31f4c <z_sched_wake+0x98>)
   31f36:	21ac      	movs	r1, #172	; 0xac
   31f38:	f005 fa95 	bl	37466 <assert_post_action>
	__asm__ volatile(
   31f3c:	f387 8811 	msr	BASEPRI, r7
   31f40:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   31f44:	4620      	mov	r0, r4
   31f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31f48:	20002d40 	.word	0x20002d40
   31f4c:	0003cd09 	.word	0x0003cd09
   31f50:	0003cd5b 	.word	0x0003cd5b
   31f54:	0003c48a 	.word	0x0003c48a
   31f58:	0003cd70 	.word	0x0003cd70
   31f5c:	0003cd2f 	.word	0x0003cd2f
   31f60:	0003cd46 	.word	0x0003cd46

00031f64 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   31f64:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   31f66:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   31f6a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   31f6c:	e9cd 6700 	strd	r6, r7, [sp]
   31f70:	f7ff faf2 	bl	31558 <z_pend_curr>

	if (data != NULL) {
   31f74:	b11c      	cbz	r4, 31f7e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   31f76:	4b03      	ldr	r3, [pc, #12]	; (31f84 <z_sched_wait+0x20>)
   31f78:	689b      	ldr	r3, [r3, #8]
   31f7a:	695b      	ldr	r3, [r3, #20]
   31f7c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   31f7e:	b002      	add	sp, #8
   31f80:	bdd0      	pop	{r4, r6, r7, pc}
   31f82:	bf00      	nop
   31f84:	20002d00 	.word	0x20002d00

00031f88 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   31f88:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31f8a:	4806      	ldr	r0, [pc, #24]	; (31fa4 <z_data_copy+0x1c>)
   31f8c:	4a06      	ldr	r2, [pc, #24]	; (31fa8 <z_data_copy+0x20>)
   31f8e:	4907      	ldr	r1, [pc, #28]	; (31fac <z_data_copy+0x24>)
   31f90:	1a12      	subs	r2, r2, r0
   31f92:	f008 fab6 	bl	3a502 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   31f96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   31f9a:	4a05      	ldr	r2, [pc, #20]	; (31fb0 <z_data_copy+0x28>)
   31f9c:	4905      	ldr	r1, [pc, #20]	; (31fb4 <z_data_copy+0x2c>)
   31f9e:	4806      	ldr	r0, [pc, #24]	; (31fb8 <z_data_copy+0x30>)
   31fa0:	f008 baaf 	b.w	3a502 <memcpy>
   31fa4:	20000000 	.word	0x20000000
   31fa8:	20000e20 	.word	0x20000e20
   31fac:	00041c50 	.word	0x00041c50
   31fb0:	00000000 	.word	0x00000000
   31fb4:	00041c50 	.word	0x00041c50
   31fb8:	20000000 	.word	0x20000000

00031fbc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   31fbc:	4b03      	ldr	r3, [pc, #12]	; (31fcc <elapsed+0x10>)
   31fbe:	681b      	ldr	r3, [r3, #0]
   31fc0:	b90b      	cbnz	r3, 31fc6 <elapsed+0xa>
   31fc2:	f7fa b80b 	b.w	2bfdc <sys_clock_elapsed>
}
   31fc6:	2000      	movs	r0, #0
   31fc8:	4770      	bx	lr
   31fca:	bf00      	nop
   31fcc:	20002d4c 	.word	0x20002d4c

00031fd0 <next_timeout>:

static int32_t next_timeout(void)
{
   31fd0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   31fd2:	4b13      	ldr	r3, [pc, #76]	; (32020 <next_timeout+0x50>)
   31fd4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31fd6:	429c      	cmp	r4, r3
   31fd8:	bf08      	it	eq
   31fda:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   31fdc:	f7ff ffee 	bl	31fbc <elapsed>
   31fe0:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   31fe2:	b1bc      	cbz	r4, 32014 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   31fe4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   31fe8:	1b40      	subs	r0, r0, r5
   31fea:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   31fee:	2801      	cmp	r0, #1
   31ff0:	f171 0300 	sbcs.w	r3, r1, #0
   31ff4:	db11      	blt.n	3201a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   31ff6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   31ffa:	2300      	movs	r3, #0
   31ffc:	4282      	cmp	r2, r0
   31ffe:	eb73 0401 	sbcs.w	r4, r3, r1
   32002:	da00      	bge.n	32006 <next_timeout+0x36>
   32004:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   32006:	4b07      	ldr	r3, [pc, #28]	; (32024 <next_timeout+0x54>)
   32008:	691b      	ldr	r3, [r3, #16]
   3200a:	b113      	cbz	r3, 32012 <next_timeout+0x42>
   3200c:	4298      	cmp	r0, r3
   3200e:	bfa8      	it	ge
   32010:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   32012:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   32014:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   32018:	e7f5      	b.n	32006 <next_timeout+0x36>
   3201a:	2000      	movs	r0, #0
   3201c:	e7f3      	b.n	32006 <next_timeout+0x36>
   3201e:	bf00      	nop
   32020:	200006f8 	.word	0x200006f8
   32024:	20002d00 	.word	0x20002d00

00032028 <remove_timeout>:
{
   32028:	b530      	push	{r4, r5, lr}
   3202a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3202c:	b168      	cbz	r0, 3204a <remove_timeout+0x22>
   3202e:	4a0a      	ldr	r2, [pc, #40]	; (32058 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   32030:	6852      	ldr	r2, [r2, #4]
   32032:	4290      	cmp	r0, r2
   32034:	d009      	beq.n	3204a <remove_timeout+0x22>
	if (next(t) != NULL) {
   32036:	b143      	cbz	r3, 3204a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   32038:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   3203c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   32040:	1912      	adds	r2, r2, r4
   32042:	eb45 0101 	adc.w	r1, r5, r1
   32046:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   3204a:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   3204c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3204e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   32050:	2300      	movs	r3, #0
	node->prev = NULL;
   32052:	e9c0 3300 	strd	r3, r3, [r0]
}
   32056:	bd30      	pop	{r4, r5, pc}
   32058:	200006f8 	.word	0x200006f8

0003205c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   3205c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32060:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   32062:	1c6b      	adds	r3, r5, #1
   32064:	bf08      	it	eq
   32066:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   3206a:	4682      	mov	sl, r0
   3206c:	468b      	mov	fp, r1
   3206e:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   32070:	f000 80aa 	beq.w	321c8 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   32074:	6803      	ldr	r3, [r0, #0]
   32076:	b163      	cbz	r3, 32092 <z_add_timeout+0x36>
   32078:	4955      	ldr	r1, [pc, #340]	; (321d0 <z_add_timeout+0x174>)
   3207a:	4a56      	ldr	r2, [pc, #344]	; (321d4 <z_add_timeout+0x178>)
   3207c:	4856      	ldr	r0, [pc, #344]	; (321d8 <z_add_timeout+0x17c>)
   3207e:	235d      	movs	r3, #93	; 0x5d
   32080:	f005 f84b 	bl	3711a <printk>
   32084:	4855      	ldr	r0, [pc, #340]	; (321dc <z_add_timeout+0x180>)
   32086:	f005 f848 	bl	3711a <printk>
   3208a:	4852      	ldr	r0, [pc, #328]	; (321d4 <z_add_timeout+0x178>)
   3208c:	215d      	movs	r1, #93	; 0x5d
   3208e:	f005 f9ea 	bl	37466 <assert_post_action>
	to->fn = fn;
   32092:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   32096:	f04f 0340 	mov.w	r3, #64	; 0x40
   3209a:	f3ef 8b11 	mrs	fp, BASEPRI
   3209e:	f383 8812 	msr	BASEPRI_MAX, r3
   320a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   320a6:	484e      	ldr	r0, [pc, #312]	; (321e0 <z_add_timeout+0x184>)
   320a8:	f7fd fb8c 	bl	2f7c4 <z_spin_lock_valid>
   320ac:	b968      	cbnz	r0, 320ca <z_add_timeout+0x6e>
   320ae:	4a4d      	ldr	r2, [pc, #308]	; (321e4 <z_add_timeout+0x188>)
   320b0:	494d      	ldr	r1, [pc, #308]	; (321e8 <z_add_timeout+0x18c>)
   320b2:	4849      	ldr	r0, [pc, #292]	; (321d8 <z_add_timeout+0x17c>)
   320b4:	2381      	movs	r3, #129	; 0x81
   320b6:	f005 f830 	bl	3711a <printk>
   320ba:	4949      	ldr	r1, [pc, #292]	; (321e0 <z_add_timeout+0x184>)
   320bc:	484b      	ldr	r0, [pc, #300]	; (321ec <z_add_timeout+0x190>)
   320be:	f005 f82c 	bl	3711a <printk>
   320c2:	4848      	ldr	r0, [pc, #288]	; (321e4 <z_add_timeout+0x188>)
   320c4:	2181      	movs	r1, #129	; 0x81
   320c6:	f005 f9ce 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   320ca:	4845      	ldr	r0, [pc, #276]	; (321e0 <z_add_timeout+0x184>)
   320cc:	f7fd fb98 	bl	2f800 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   320d0:	f06f 0301 	mvn.w	r3, #1
   320d4:	ebb3 0804 	subs.w	r8, r3, r4
   320d8:	f04f 32ff 	mov.w	r2, #4294967295
   320dc:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   320e0:	f1b8 0f00 	cmp.w	r8, #0
   320e4:	f179 0100 	sbcs.w	r1, r9, #0
   320e8:	db1c      	blt.n	32124 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   320ea:	4841      	ldr	r0, [pc, #260]	; (321f0 <z_add_timeout+0x194>)
   320ec:	e9d0 1000 	ldrd	r1, r0, [r0]
   320f0:	1a5b      	subs	r3, r3, r1
   320f2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   320f6:	1b1e      	subs	r6, r3, r4
   320f8:	eb62 0705 	sbc.w	r7, r2, r5
   320fc:	2e01      	cmp	r6, #1
   320fe:	f177 0300 	sbcs.w	r3, r7, #0
   32102:	bfbc      	itt	lt
   32104:	2601      	movlt	r6, #1
   32106:	2700      	movlt	r7, #0
   32108:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   3210c:	4a39      	ldr	r2, [pc, #228]	; (321f4 <z_add_timeout+0x198>)
   3210e:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32112:	4293      	cmp	r3, r2
   32114:	d11d      	bne.n	32152 <z_add_timeout+0xf6>
	node->prev = tail;
   32116:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   3211a:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   3211e:	f8c2 a004 	str.w	sl, [r2, #4]
}
   32122:	e02c      	b.n	3217e <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   32124:	f7ff ff4a 	bl	31fbc <elapsed>
   32128:	1c63      	adds	r3, r4, #1
   3212a:	9300      	str	r3, [sp, #0]
   3212c:	f145 0300 	adc.w	r3, r5, #0
   32130:	9301      	str	r3, [sp, #4]
   32132:	e9dd 2300 	ldrd	r2, r3, [sp]
   32136:	1812      	adds	r2, r2, r0
   32138:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   3213c:	e9ca 2304 	strd	r2, r3, [sl, #16]
   32140:	e7e4      	b.n	3210c <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   32142:	1be0      	subs	r0, r4, r7
   32144:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   32148:	42b3      	cmp	r3, r6
   3214a:	e9ca 0104 	strd	r0, r1, [sl, #16]
   3214e:	d0e2      	beq.n	32116 <z_add_timeout+0xba>
   32150:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   32152:	2b00      	cmp	r3, #0
   32154:	d0df      	beq.n	32116 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   32156:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   3215a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   3215e:	42bc      	cmp	r4, r7
   32160:	eb75 0108 	sbcs.w	r1, r5, r8
   32164:	daed      	bge.n	32142 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   32166:	1b38      	subs	r0, r7, r4
   32168:	eb68 0105 	sbc.w	r1, r8, r5
   3216c:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   32170:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   32172:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   32176:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   3217a:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   3217e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32180:	4293      	cmp	r3, r2
   32182:	d00b      	beq.n	3219c <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   32184:	459a      	cmp	sl, r3
   32186:	d109      	bne.n	3219c <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   32188:	f7ff ff22 	bl	31fd0 <next_timeout>

			if (next_time == 0 ||
   3218c:	b118      	cbz	r0, 32196 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   3218e:	4b1a      	ldr	r3, [pc, #104]	; (321f8 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   32190:	691b      	ldr	r3, [r3, #16]
   32192:	4283      	cmp	r3, r0
   32194:	d002      	beq.n	3219c <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   32196:	2100      	movs	r1, #0
   32198:	f7f9 fef0 	bl	2bf7c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3219c:	4810      	ldr	r0, [pc, #64]	; (321e0 <z_add_timeout+0x184>)
   3219e:	f7fd fb1f 	bl	2f7e0 <z_spin_unlock_valid>
   321a2:	b968      	cbnz	r0, 321c0 <z_add_timeout+0x164>
   321a4:	4a0f      	ldr	r2, [pc, #60]	; (321e4 <z_add_timeout+0x188>)
   321a6:	4915      	ldr	r1, [pc, #84]	; (321fc <z_add_timeout+0x1a0>)
   321a8:	480b      	ldr	r0, [pc, #44]	; (321d8 <z_add_timeout+0x17c>)
   321aa:	23ac      	movs	r3, #172	; 0xac
   321ac:	f004 ffb5 	bl	3711a <printk>
   321b0:	490b      	ldr	r1, [pc, #44]	; (321e0 <z_add_timeout+0x184>)
   321b2:	4813      	ldr	r0, [pc, #76]	; (32200 <z_add_timeout+0x1a4>)
   321b4:	f004 ffb1 	bl	3711a <printk>
   321b8:	480a      	ldr	r0, [pc, #40]	; (321e4 <z_add_timeout+0x188>)
   321ba:	21ac      	movs	r1, #172	; 0xac
   321bc:	f005 f953 	bl	37466 <assert_post_action>
	__asm__ volatile(
   321c0:	f38b 8811 	msr	BASEPRI, fp
   321c4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   321c8:	b003      	add	sp, #12
   321ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   321ce:	bf00      	nop
   321d0:	0004174b 	.word	0x0004174b
   321d4:	00041727 	.word	0x00041727
   321d8:	0003c48a 	.word	0x0003c48a
   321dc:	0003cae0 	.word	0x0003cae0
   321e0:	20002d50 	.word	0x20002d50
   321e4:	0003cd09 	.word	0x0003cd09
   321e8:	0003cd5b 	.word	0x0003cd5b
   321ec:	0003cd70 	.word	0x0003cd70
   321f0:	200021d8 	.word	0x200021d8
   321f4:	200006f8 	.word	0x200006f8
   321f8:	20002d00 	.word	0x20002d00
   321fc:	0003cd2f 	.word	0x0003cd2f
   32200:	0003cd46 	.word	0x0003cd46

00032204 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   32204:	b538      	push	{r3, r4, r5, lr}
   32206:	4604      	mov	r4, r0
	__asm__ volatile(
   32208:	f04f 0340 	mov.w	r3, #64	; 0x40
   3220c:	f3ef 8511 	mrs	r5, BASEPRI
   32210:	f383 8812 	msr	BASEPRI_MAX, r3
   32214:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32218:	481a      	ldr	r0, [pc, #104]	; (32284 <z_abort_timeout+0x80>)
   3221a:	f7fd fad3 	bl	2f7c4 <z_spin_lock_valid>
   3221e:	b968      	cbnz	r0, 3223c <z_abort_timeout+0x38>
   32220:	4a19      	ldr	r2, [pc, #100]	; (32288 <z_abort_timeout+0x84>)
   32222:	491a      	ldr	r1, [pc, #104]	; (3228c <z_abort_timeout+0x88>)
   32224:	481a      	ldr	r0, [pc, #104]	; (32290 <z_abort_timeout+0x8c>)
   32226:	2381      	movs	r3, #129	; 0x81
   32228:	f004 ff77 	bl	3711a <printk>
   3222c:	4915      	ldr	r1, [pc, #84]	; (32284 <z_abort_timeout+0x80>)
   3222e:	4819      	ldr	r0, [pc, #100]	; (32294 <z_abort_timeout+0x90>)
   32230:	f004 ff73 	bl	3711a <printk>
   32234:	4814      	ldr	r0, [pc, #80]	; (32288 <z_abort_timeout+0x84>)
   32236:	2181      	movs	r1, #129	; 0x81
   32238:	f005 f915 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   3223c:	4811      	ldr	r0, [pc, #68]	; (32284 <z_abort_timeout+0x80>)
   3223e:	f7fd fadf 	bl	2f800 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   32242:	6823      	ldr	r3, [r4, #0]
   32244:	b1db      	cbz	r3, 3227e <z_abort_timeout+0x7a>
			remove_timeout(to);
   32246:	4620      	mov	r0, r4
   32248:	f7ff feee 	bl	32028 <remove_timeout>
			ret = 0;
   3224c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3224e:	480d      	ldr	r0, [pc, #52]	; (32284 <z_abort_timeout+0x80>)
   32250:	f7fd fac6 	bl	2f7e0 <z_spin_unlock_valid>
   32254:	b968      	cbnz	r0, 32272 <z_abort_timeout+0x6e>
   32256:	4a0c      	ldr	r2, [pc, #48]	; (32288 <z_abort_timeout+0x84>)
   32258:	490f      	ldr	r1, [pc, #60]	; (32298 <z_abort_timeout+0x94>)
   3225a:	480d      	ldr	r0, [pc, #52]	; (32290 <z_abort_timeout+0x8c>)
   3225c:	23ac      	movs	r3, #172	; 0xac
   3225e:	f004 ff5c 	bl	3711a <printk>
   32262:	4908      	ldr	r1, [pc, #32]	; (32284 <z_abort_timeout+0x80>)
   32264:	480d      	ldr	r0, [pc, #52]	; (3229c <z_abort_timeout+0x98>)
   32266:	f004 ff58 	bl	3711a <printk>
   3226a:	4807      	ldr	r0, [pc, #28]	; (32288 <z_abort_timeout+0x84>)
   3226c:	21ac      	movs	r1, #172	; 0xac
   3226e:	f005 f8fa 	bl	37466 <assert_post_action>
	__asm__ volatile(
   32272:	f385 8811 	msr	BASEPRI, r5
   32276:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   3227a:	4620      	mov	r0, r4
   3227c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   3227e:	f06f 0415 	mvn.w	r4, #21
   32282:	e7e4      	b.n	3224e <z_abort_timeout+0x4a>
   32284:	20002d50 	.word	0x20002d50
   32288:	0003cd09 	.word	0x0003cd09
   3228c:	0003cd5b 	.word	0x0003cd5b
   32290:	0003c48a 	.word	0x0003c48a
   32294:	0003cd70 	.word	0x0003cd70
   32298:	0003cd2f 	.word	0x0003cd2f
   3229c:	0003cd46 	.word	0x0003cd46

000322a0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   322a0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   322a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   322a6:	f3ef 8511 	mrs	r5, BASEPRI
   322aa:	f383 8812 	msr	BASEPRI_MAX, r3
   322ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   322b2:	4818      	ldr	r0, [pc, #96]	; (32314 <z_get_next_timeout_expiry+0x74>)
   322b4:	f7fd fa86 	bl	2f7c4 <z_spin_lock_valid>
   322b8:	b968      	cbnz	r0, 322d6 <z_get_next_timeout_expiry+0x36>
   322ba:	4a17      	ldr	r2, [pc, #92]	; (32318 <z_get_next_timeout_expiry+0x78>)
   322bc:	4917      	ldr	r1, [pc, #92]	; (3231c <z_get_next_timeout_expiry+0x7c>)
   322be:	4818      	ldr	r0, [pc, #96]	; (32320 <z_get_next_timeout_expiry+0x80>)
   322c0:	2381      	movs	r3, #129	; 0x81
   322c2:	f004 ff2a 	bl	3711a <printk>
   322c6:	4913      	ldr	r1, [pc, #76]	; (32314 <z_get_next_timeout_expiry+0x74>)
   322c8:	4816      	ldr	r0, [pc, #88]	; (32324 <z_get_next_timeout_expiry+0x84>)
   322ca:	f004 ff26 	bl	3711a <printk>
   322ce:	4812      	ldr	r0, [pc, #72]	; (32318 <z_get_next_timeout_expiry+0x78>)
   322d0:	2181      	movs	r1, #129	; 0x81
   322d2:	f005 f8c8 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   322d6:	480f      	ldr	r0, [pc, #60]	; (32314 <z_get_next_timeout_expiry+0x74>)
   322d8:	f7fd fa92 	bl	2f800 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   322dc:	f7ff fe78 	bl	31fd0 <next_timeout>
   322e0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   322e2:	480c      	ldr	r0, [pc, #48]	; (32314 <z_get_next_timeout_expiry+0x74>)
   322e4:	f7fd fa7c 	bl	2f7e0 <z_spin_unlock_valid>
   322e8:	b968      	cbnz	r0, 32306 <z_get_next_timeout_expiry+0x66>
   322ea:	4a0b      	ldr	r2, [pc, #44]	; (32318 <z_get_next_timeout_expiry+0x78>)
   322ec:	490e      	ldr	r1, [pc, #56]	; (32328 <z_get_next_timeout_expiry+0x88>)
   322ee:	480c      	ldr	r0, [pc, #48]	; (32320 <z_get_next_timeout_expiry+0x80>)
   322f0:	23ac      	movs	r3, #172	; 0xac
   322f2:	f004 ff12 	bl	3711a <printk>
   322f6:	4907      	ldr	r1, [pc, #28]	; (32314 <z_get_next_timeout_expiry+0x74>)
   322f8:	480c      	ldr	r0, [pc, #48]	; (3232c <z_get_next_timeout_expiry+0x8c>)
   322fa:	f004 ff0e 	bl	3711a <printk>
   322fe:	4806      	ldr	r0, [pc, #24]	; (32318 <z_get_next_timeout_expiry+0x78>)
   32300:	21ac      	movs	r1, #172	; 0xac
   32302:	f005 f8b0 	bl	37466 <assert_post_action>
	__asm__ volatile(
   32306:	f385 8811 	msr	BASEPRI, r5
   3230a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   3230e:	4620      	mov	r0, r4
   32310:	bd38      	pop	{r3, r4, r5, pc}
   32312:	bf00      	nop
   32314:	20002d50 	.word	0x20002d50
   32318:	0003cd09 	.word	0x0003cd09
   3231c:	0003cd5b 	.word	0x0003cd5b
   32320:	0003c48a 	.word	0x0003c48a
   32324:	0003cd70 	.word	0x0003cd70
   32328:	0003cd2f 	.word	0x0003cd2f
   3232c:	0003cd46 	.word	0x0003cd46

00032330 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   32330:	b570      	push	{r4, r5, r6, lr}
   32332:	4604      	mov	r4, r0
   32334:	460d      	mov	r5, r1
	__asm__ volatile(
   32336:	f04f 0340 	mov.w	r3, #64	; 0x40
   3233a:	f3ef 8611 	mrs	r6, BASEPRI
   3233e:	f383 8812 	msr	BASEPRI_MAX, r3
   32342:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32346:	481b      	ldr	r0, [pc, #108]	; (323b4 <z_set_timeout_expiry+0x84>)
   32348:	f7fd fa3c 	bl	2f7c4 <z_spin_lock_valid>
   3234c:	b968      	cbnz	r0, 3236a <z_set_timeout_expiry+0x3a>
   3234e:	4a1a      	ldr	r2, [pc, #104]	; (323b8 <z_set_timeout_expiry+0x88>)
   32350:	491a      	ldr	r1, [pc, #104]	; (323bc <z_set_timeout_expiry+0x8c>)
   32352:	481b      	ldr	r0, [pc, #108]	; (323c0 <z_set_timeout_expiry+0x90>)
   32354:	2381      	movs	r3, #129	; 0x81
   32356:	f004 fee0 	bl	3711a <printk>
   3235a:	4916      	ldr	r1, [pc, #88]	; (323b4 <z_set_timeout_expiry+0x84>)
   3235c:	4819      	ldr	r0, [pc, #100]	; (323c4 <z_set_timeout_expiry+0x94>)
   3235e:	f004 fedc 	bl	3711a <printk>
   32362:	4815      	ldr	r0, [pc, #84]	; (323b8 <z_set_timeout_expiry+0x88>)
   32364:	2181      	movs	r1, #129	; 0x81
   32366:	f005 f87e 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   3236a:	4812      	ldr	r0, [pc, #72]	; (323b4 <z_set_timeout_expiry+0x84>)
   3236c:	f7fd fa48 	bl	2f800 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   32370:	f7ff fe2e 	bl	31fd0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   32374:	2801      	cmp	r0, #1
   32376:	dd05      	ble.n	32384 <z_set_timeout_expiry+0x54>
   32378:	42a0      	cmp	r0, r4
   3237a:	db03      	blt.n	32384 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   3237c:	4629      	mov	r1, r5
   3237e:	4620      	mov	r0, r4
   32380:	f7f9 fdfc 	bl	2bf7c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32384:	480b      	ldr	r0, [pc, #44]	; (323b4 <z_set_timeout_expiry+0x84>)
   32386:	f7fd fa2b 	bl	2f7e0 <z_spin_unlock_valid>
   3238a:	b968      	cbnz	r0, 323a8 <z_set_timeout_expiry+0x78>
   3238c:	4a0a      	ldr	r2, [pc, #40]	; (323b8 <z_set_timeout_expiry+0x88>)
   3238e:	490e      	ldr	r1, [pc, #56]	; (323c8 <z_set_timeout_expiry+0x98>)
   32390:	480b      	ldr	r0, [pc, #44]	; (323c0 <z_set_timeout_expiry+0x90>)
   32392:	23ac      	movs	r3, #172	; 0xac
   32394:	f004 fec1 	bl	3711a <printk>
   32398:	4906      	ldr	r1, [pc, #24]	; (323b4 <z_set_timeout_expiry+0x84>)
   3239a:	480c      	ldr	r0, [pc, #48]	; (323cc <z_set_timeout_expiry+0x9c>)
   3239c:	f004 febd 	bl	3711a <printk>
   323a0:	4805      	ldr	r0, [pc, #20]	; (323b8 <z_set_timeout_expiry+0x88>)
   323a2:	21ac      	movs	r1, #172	; 0xac
   323a4:	f005 f85f 	bl	37466 <assert_post_action>
	__asm__ volatile(
   323a8:	f386 8811 	msr	BASEPRI, r6
   323ac:	f3bf 8f6f 	isb	sy
		}
	}
}
   323b0:	bd70      	pop	{r4, r5, r6, pc}
   323b2:	bf00      	nop
   323b4:	20002d50 	.word	0x20002d50
   323b8:	0003cd09 	.word	0x0003cd09
   323bc:	0003cd5b 	.word	0x0003cd5b
   323c0:	0003c48a 	.word	0x0003c48a
   323c4:	0003cd70 	.word	0x0003cd70
   323c8:	0003cd2f 	.word	0x0003cd2f
   323cc:	0003cd46 	.word	0x0003cd46

000323d0 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   323d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   323d4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   323d6:	f7fe fe43 	bl	31060 <z_time_slice>
	__asm__ volatile(
   323da:	f04f 0340 	mov.w	r3, #64	; 0x40
   323de:	f3ef 8711 	mrs	r7, BASEPRI
   323e2:	f383 8812 	msr	BASEPRI_MAX, r3
   323e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   323ea:	4855      	ldr	r0, [pc, #340]	; (32540 <sys_clock_announce+0x170>)
   323ec:	f7fd f9ea 	bl	2f7c4 <z_spin_lock_valid>
   323f0:	b968      	cbnz	r0, 3240e <sys_clock_announce+0x3e>
   323f2:	4a54      	ldr	r2, [pc, #336]	; (32544 <sys_clock_announce+0x174>)
   323f4:	4954      	ldr	r1, [pc, #336]	; (32548 <sys_clock_announce+0x178>)
   323f6:	4855      	ldr	r0, [pc, #340]	; (3254c <sys_clock_announce+0x17c>)
   323f8:	2381      	movs	r3, #129	; 0x81
   323fa:	f004 fe8e 	bl	3711a <printk>
   323fe:	4950      	ldr	r1, [pc, #320]	; (32540 <sys_clock_announce+0x170>)
   32400:	4853      	ldr	r0, [pc, #332]	; (32550 <sys_clock_announce+0x180>)
   32402:	f004 fe8a 	bl	3711a <printk>
   32406:	484f      	ldr	r0, [pc, #316]	; (32544 <sys_clock_announce+0x174>)
   32408:	2181      	movs	r1, #129	; 0x81
   3240a:	f005 f82c 	bl	37466 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   3240e:	4d51      	ldr	r5, [pc, #324]	; (32554 <sys_clock_announce+0x184>)
   32410:	4e51      	ldr	r6, [pc, #324]	; (32558 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
   32412:	484b      	ldr	r0, [pc, #300]	; (32540 <sys_clock_announce+0x170>)
	return list->head == list;
   32414:	f8df a14c 	ldr.w	sl, [pc, #332]	; 32564 <sys_clock_announce+0x194>
   32418:	f7fd f9f2 	bl	2f800 <z_spin_lock_set_owner>
   3241c:	46b3      	mov	fp, r6
   3241e:	602c      	str	r4, [r5, #0]
   32420:	e9d6 2300 	ldrd	r2, r3, [r6]
   32424:	f8d5 c000 	ldr.w	ip, [r5]
   32428:	f8da 4000 	ldr.w	r4, [sl]
   3242c:	e9cd 2300 	strd	r2, r3, [sp]
   32430:	4662      	mov	r2, ip
   32432:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32434:	4554      	cmp	r4, sl
   32436:	46e0      	mov	r8, ip
   32438:	4699      	mov	r9, r3
   3243a:	d00c      	beq.n	32456 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   3243c:	b15c      	cbz	r4, 32456 <sys_clock_announce+0x86>
   3243e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   32442:	458c      	cmp	ip, r1
   32444:	eb79 0302 	sbcs.w	r3, r9, r2
   32448:	da2e      	bge.n	324a8 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   3244a:	ebb1 000c 	subs.w	r0, r1, ip
   3244e:	eb62 0109 	sbc.w	r1, r2, r9
   32452:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   32456:	9a00      	ldr	r2, [sp, #0]
   32458:	9901      	ldr	r1, [sp, #4]
   3245a:	eb18 0202 	adds.w	r2, r8, r2
   3245e:	464b      	mov	r3, r9
   32460:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
   32464:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   32466:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   3246a:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   3246c:	f7ff fdb0 	bl	31fd0 <next_timeout>
   32470:	4621      	mov	r1, r4
   32472:	f7f9 fd83 	bl	2bf7c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32476:	4832      	ldr	r0, [pc, #200]	; (32540 <sys_clock_announce+0x170>)
   32478:	f7fd f9b2 	bl	2f7e0 <z_spin_unlock_valid>
   3247c:	b968      	cbnz	r0, 3249a <sys_clock_announce+0xca>
   3247e:	4a31      	ldr	r2, [pc, #196]	; (32544 <sys_clock_announce+0x174>)
   32480:	4936      	ldr	r1, [pc, #216]	; (3255c <sys_clock_announce+0x18c>)
   32482:	4832      	ldr	r0, [pc, #200]	; (3254c <sys_clock_announce+0x17c>)
   32484:	23ac      	movs	r3, #172	; 0xac
   32486:	f004 fe48 	bl	3711a <printk>
   3248a:	492d      	ldr	r1, [pc, #180]	; (32540 <sys_clock_announce+0x170>)
   3248c:	4834      	ldr	r0, [pc, #208]	; (32560 <sys_clock_announce+0x190>)
   3248e:	f004 fe44 	bl	3711a <printk>
   32492:	482c      	ldr	r0, [pc, #176]	; (32544 <sys_clock_announce+0x174>)
   32494:	21ac      	movs	r1, #172	; 0xac
   32496:	f004 ffe6 	bl	37466 <assert_post_action>
	__asm__ volatile(
   3249a:	f387 8811 	msr	BASEPRI, r7
   3249e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   324a2:	b003      	add	sp, #12
   324a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   324a8:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
   324ac:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   324b0:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
   324b4:	f04f 0200 	mov.w	r2, #0
   324b8:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   324bc:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   324c0:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   324c2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   324c6:	4620      	mov	r0, r4
		curr_tick += dt;
   324c8:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   324cc:	f7ff fdac 	bl	32028 <remove_timeout>
   324d0:	481b      	ldr	r0, [pc, #108]	; (32540 <sys_clock_announce+0x170>)
   324d2:	f7fd f985 	bl	2f7e0 <z_spin_unlock_valid>
   324d6:	b968      	cbnz	r0, 324f4 <sys_clock_announce+0x124>
   324d8:	4a1a      	ldr	r2, [pc, #104]	; (32544 <sys_clock_announce+0x174>)
   324da:	4920      	ldr	r1, [pc, #128]	; (3255c <sys_clock_announce+0x18c>)
   324dc:	481b      	ldr	r0, [pc, #108]	; (3254c <sys_clock_announce+0x17c>)
   324de:	23ac      	movs	r3, #172	; 0xac
   324e0:	f004 fe1b 	bl	3711a <printk>
   324e4:	4916      	ldr	r1, [pc, #88]	; (32540 <sys_clock_announce+0x170>)
   324e6:	481e      	ldr	r0, [pc, #120]	; (32560 <sys_clock_announce+0x190>)
   324e8:	f004 fe17 	bl	3711a <printk>
   324ec:	4815      	ldr	r0, [pc, #84]	; (32544 <sys_clock_announce+0x174>)
   324ee:	21ac      	movs	r1, #172	; 0xac
   324f0:	f004 ffb9 	bl	37466 <assert_post_action>
   324f4:	f387 8811 	msr	BASEPRI, r7
   324f8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   324fc:	68a3      	ldr	r3, [r4, #8]
   324fe:	4620      	mov	r0, r4
   32500:	4798      	blx	r3
	__asm__ volatile(
   32502:	f04f 0340 	mov.w	r3, #64	; 0x40
   32506:	f3ef 8711 	mrs	r7, BASEPRI
   3250a:	f383 8812 	msr	BASEPRI_MAX, r3
   3250e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32512:	480b      	ldr	r0, [pc, #44]	; (32540 <sys_clock_announce+0x170>)
   32514:	f7fd f956 	bl	2f7c4 <z_spin_lock_valid>
   32518:	b968      	cbnz	r0, 32536 <sys_clock_announce+0x166>
   3251a:	4a0a      	ldr	r2, [pc, #40]	; (32544 <sys_clock_announce+0x174>)
   3251c:	490a      	ldr	r1, [pc, #40]	; (32548 <sys_clock_announce+0x178>)
   3251e:	480b      	ldr	r0, [pc, #44]	; (3254c <sys_clock_announce+0x17c>)
   32520:	2381      	movs	r3, #129	; 0x81
   32522:	f004 fdfa 	bl	3711a <printk>
   32526:	4906      	ldr	r1, [pc, #24]	; (32540 <sys_clock_announce+0x170>)
   32528:	4809      	ldr	r0, [pc, #36]	; (32550 <sys_clock_announce+0x180>)
   3252a:	f004 fdf6 	bl	3711a <printk>
   3252e:	4805      	ldr	r0, [pc, #20]	; (32544 <sys_clock_announce+0x174>)
   32530:	2181      	movs	r1, #129	; 0x81
   32532:	f004 ff98 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   32536:	4802      	ldr	r0, [pc, #8]	; (32540 <sys_clock_announce+0x170>)
   32538:	f7fd f962 	bl	2f800 <z_spin_lock_set_owner>
	return k;
   3253c:	e770      	b.n	32420 <sys_clock_announce+0x50>
   3253e:	bf00      	nop
   32540:	20002d50 	.word	0x20002d50
   32544:	0003cd09 	.word	0x0003cd09
   32548:	0003cd5b 	.word	0x0003cd5b
   3254c:	0003c48a 	.word	0x0003c48a
   32550:	0003cd70 	.word	0x0003cd70
   32554:	20002d4c 	.word	0x20002d4c
   32558:	200021d8 	.word	0x200021d8
   3255c:	0003cd2f 	.word	0x0003cd2f
   32560:	0003cd46 	.word	0x0003cd46
   32564:	200006f8 	.word	0x200006f8

00032568 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   32568:	b570      	push	{r4, r5, r6, lr}
   3256a:	f04f 0340 	mov.w	r3, #64	; 0x40
   3256e:	f3ef 8611 	mrs	r6, BASEPRI
   32572:	f383 8812 	msr	BASEPRI_MAX, r3
   32576:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3257a:	481b      	ldr	r0, [pc, #108]	; (325e8 <sys_clock_tick_get+0x80>)
   3257c:	f7fd f922 	bl	2f7c4 <z_spin_lock_valid>
   32580:	b968      	cbnz	r0, 3259e <sys_clock_tick_get+0x36>
   32582:	4a1a      	ldr	r2, [pc, #104]	; (325ec <sys_clock_tick_get+0x84>)
   32584:	491a      	ldr	r1, [pc, #104]	; (325f0 <sys_clock_tick_get+0x88>)
   32586:	481b      	ldr	r0, [pc, #108]	; (325f4 <sys_clock_tick_get+0x8c>)
   32588:	2381      	movs	r3, #129	; 0x81
   3258a:	f004 fdc6 	bl	3711a <printk>
   3258e:	4916      	ldr	r1, [pc, #88]	; (325e8 <sys_clock_tick_get+0x80>)
   32590:	4819      	ldr	r0, [pc, #100]	; (325f8 <sys_clock_tick_get+0x90>)
   32592:	f004 fdc2 	bl	3711a <printk>
   32596:	4815      	ldr	r0, [pc, #84]	; (325ec <sys_clock_tick_get+0x84>)
   32598:	2181      	movs	r1, #129	; 0x81
   3259a:	f004 ff64 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   3259e:	4812      	ldr	r0, [pc, #72]	; (325e8 <sys_clock_tick_get+0x80>)
   325a0:	f7fd f92e 	bl	2f800 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   325a4:	f7f9 fd1a 	bl	2bfdc <sys_clock_elapsed>
   325a8:	4b14      	ldr	r3, [pc, #80]	; (325fc <sys_clock_tick_get+0x94>)
   325aa:	e9d3 4500 	ldrd	r4, r5, [r3]
   325ae:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   325b0:	480d      	ldr	r0, [pc, #52]	; (325e8 <sys_clock_tick_get+0x80>)
   325b2:	f145 0500 	adc.w	r5, r5, #0
   325b6:	f7fd f913 	bl	2f7e0 <z_spin_unlock_valid>
   325ba:	b968      	cbnz	r0, 325d8 <sys_clock_tick_get+0x70>
   325bc:	4a0b      	ldr	r2, [pc, #44]	; (325ec <sys_clock_tick_get+0x84>)
   325be:	4910      	ldr	r1, [pc, #64]	; (32600 <sys_clock_tick_get+0x98>)
   325c0:	480c      	ldr	r0, [pc, #48]	; (325f4 <sys_clock_tick_get+0x8c>)
   325c2:	23ac      	movs	r3, #172	; 0xac
   325c4:	f004 fda9 	bl	3711a <printk>
   325c8:	4907      	ldr	r1, [pc, #28]	; (325e8 <sys_clock_tick_get+0x80>)
   325ca:	480e      	ldr	r0, [pc, #56]	; (32604 <sys_clock_tick_get+0x9c>)
   325cc:	f004 fda5 	bl	3711a <printk>
   325d0:	4806      	ldr	r0, [pc, #24]	; (325ec <sys_clock_tick_get+0x84>)
   325d2:	21ac      	movs	r1, #172	; 0xac
   325d4:	f004 ff47 	bl	37466 <assert_post_action>
	__asm__ volatile(
   325d8:	f386 8811 	msr	BASEPRI, r6
   325dc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   325e0:	4620      	mov	r0, r4
   325e2:	4629      	mov	r1, r5
   325e4:	bd70      	pop	{r4, r5, r6, pc}
   325e6:	bf00      	nop
   325e8:	20002d50 	.word	0x20002d50
   325ec:	0003cd09 	.word	0x0003cd09
   325f0:	0003cd5b 	.word	0x0003cd5b
   325f4:	0003c48a 	.word	0x0003c48a
   325f8:	0003cd70 	.word	0x0003cd70
   325fc:	200021d8 	.word	0x200021d8
   32600:	0003cd2f 	.word	0x0003cd2f
   32604:	0003cd46 	.word	0x0003cd46

00032608 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   32608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3260a:	4604      	mov	r4, r0
	__asm__ volatile(
   3260c:	f04f 0340 	mov.w	r3, #64	; 0x40
   32610:	f3ef 8511 	mrs	r5, BASEPRI
   32614:	f383 8812 	msr	BASEPRI_MAX, r3
   32618:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3261c:	484c      	ldr	r0, [pc, #304]	; (32750 <z_timer_expiration_handler+0x148>)
   3261e:	f7fd f8d1 	bl	2f7c4 <z_spin_lock_valid>
   32622:	b968      	cbnz	r0, 32640 <z_timer_expiration_handler+0x38>
   32624:	4a4b      	ldr	r2, [pc, #300]	; (32754 <z_timer_expiration_handler+0x14c>)
   32626:	494c      	ldr	r1, [pc, #304]	; (32758 <z_timer_expiration_handler+0x150>)
   32628:	484c      	ldr	r0, [pc, #304]	; (3275c <z_timer_expiration_handler+0x154>)
   3262a:	2381      	movs	r3, #129	; 0x81
   3262c:	f004 fd75 	bl	3711a <printk>
   32630:	4947      	ldr	r1, [pc, #284]	; (32750 <z_timer_expiration_handler+0x148>)
   32632:	484b      	ldr	r0, [pc, #300]	; (32760 <z_timer_expiration_handler+0x158>)
   32634:	f004 fd71 	bl	3711a <printk>
   32638:	4846      	ldr	r0, [pc, #280]	; (32754 <z_timer_expiration_handler+0x14c>)
   3263a:	2181      	movs	r1, #129	; 0x81
   3263c:	f004 ff13 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   32640:	4843      	ldr	r0, [pc, #268]	; (32750 <z_timer_expiration_handler+0x148>)
   32642:	f7fd f8dd 	bl	2f800 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   32646:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   3264a:	1c56      	adds	r6, r2, #1
   3264c:	f143 0700 	adc.w	r7, r3, #0
   32650:	2f00      	cmp	r7, #0
   32652:	bf08      	it	eq
   32654:	2e02      	cmpeq	r6, #2
   32656:	d303      	bcc.n	32660 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   32658:	4942      	ldr	r1, [pc, #264]	; (32764 <z_timer_expiration_handler+0x15c>)
   3265a:	4620      	mov	r0, r4
   3265c:	f7ff fcfe 	bl	3205c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   32660:	6b23      	ldr	r3, [r4, #48]	; 0x30
   32662:	3301      	adds	r3, #1
   32664:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   32666:	6a23      	ldr	r3, [r4, #32]
   32668:	2b00      	cmp	r3, #0
   3266a:	d035      	beq.n	326d8 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3266c:	4838      	ldr	r0, [pc, #224]	; (32750 <z_timer_expiration_handler+0x148>)
   3266e:	f7fd f8b7 	bl	2f7e0 <z_spin_unlock_valid>
   32672:	b968      	cbnz	r0, 32690 <z_timer_expiration_handler+0x88>
   32674:	4a37      	ldr	r2, [pc, #220]	; (32754 <z_timer_expiration_handler+0x14c>)
   32676:	493c      	ldr	r1, [pc, #240]	; (32768 <z_timer_expiration_handler+0x160>)
   32678:	4838      	ldr	r0, [pc, #224]	; (3275c <z_timer_expiration_handler+0x154>)
   3267a:	23ac      	movs	r3, #172	; 0xac
   3267c:	f004 fd4d 	bl	3711a <printk>
   32680:	4933      	ldr	r1, [pc, #204]	; (32750 <z_timer_expiration_handler+0x148>)
   32682:	483a      	ldr	r0, [pc, #232]	; (3276c <z_timer_expiration_handler+0x164>)
   32684:	f004 fd49 	bl	3711a <printk>
   32688:	4832      	ldr	r0, [pc, #200]	; (32754 <z_timer_expiration_handler+0x14c>)
   3268a:	21ac      	movs	r1, #172	; 0xac
   3268c:	f004 feeb 	bl	37466 <assert_post_action>
	__asm__ volatile(
   32690:	f385 8811 	msr	BASEPRI, r5
   32694:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   32698:	6a23      	ldr	r3, [r4, #32]
   3269a:	4620      	mov	r0, r4
   3269c:	4798      	blx	r3
	__asm__ volatile(
   3269e:	f04f 0340 	mov.w	r3, #64	; 0x40
   326a2:	f3ef 8511 	mrs	r5, BASEPRI
   326a6:	f383 8812 	msr	BASEPRI_MAX, r3
   326aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   326ae:	4828      	ldr	r0, [pc, #160]	; (32750 <z_timer_expiration_handler+0x148>)
   326b0:	f7fd f888 	bl	2f7c4 <z_spin_lock_valid>
   326b4:	b968      	cbnz	r0, 326d2 <z_timer_expiration_handler+0xca>
   326b6:	4a27      	ldr	r2, [pc, #156]	; (32754 <z_timer_expiration_handler+0x14c>)
   326b8:	4927      	ldr	r1, [pc, #156]	; (32758 <z_timer_expiration_handler+0x150>)
   326ba:	4828      	ldr	r0, [pc, #160]	; (3275c <z_timer_expiration_handler+0x154>)
   326bc:	2381      	movs	r3, #129	; 0x81
   326be:	f004 fd2c 	bl	3711a <printk>
   326c2:	4923      	ldr	r1, [pc, #140]	; (32750 <z_timer_expiration_handler+0x148>)
   326c4:	4826      	ldr	r0, [pc, #152]	; (32760 <z_timer_expiration_handler+0x158>)
   326c6:	f004 fd28 	bl	3711a <printk>
   326ca:	4822      	ldr	r0, [pc, #136]	; (32754 <z_timer_expiration_handler+0x14c>)
   326cc:	2181      	movs	r1, #129	; 0x81
   326ce:	f004 feca 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   326d2:	481f      	ldr	r0, [pc, #124]	; (32750 <z_timer_expiration_handler+0x148>)
   326d4:	f7fd f894 	bl	2f800 <z_spin_lock_set_owner>
	return list->head == list;
   326d8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   326dc:	42a6      	cmp	r6, r4
   326de:	d000      	beq.n	326e2 <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   326e0:	b9b6      	cbnz	r6, 32710 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   326e2:	481b      	ldr	r0, [pc, #108]	; (32750 <z_timer_expiration_handler+0x148>)
   326e4:	f7fd f87c 	bl	2f7e0 <z_spin_unlock_valid>
   326e8:	b968      	cbnz	r0, 32706 <z_timer_expiration_handler+0xfe>
   326ea:	4a1a      	ldr	r2, [pc, #104]	; (32754 <z_timer_expiration_handler+0x14c>)
   326ec:	491e      	ldr	r1, [pc, #120]	; (32768 <z_timer_expiration_handler+0x160>)
   326ee:	481b      	ldr	r0, [pc, #108]	; (3275c <z_timer_expiration_handler+0x154>)
   326f0:	23ac      	movs	r3, #172	; 0xac
   326f2:	f004 fd12 	bl	3711a <printk>
   326f6:	4916      	ldr	r1, [pc, #88]	; (32750 <z_timer_expiration_handler+0x148>)
   326f8:	481c      	ldr	r0, [pc, #112]	; (3276c <z_timer_expiration_handler+0x164>)
   326fa:	f004 fd0e 	bl	3711a <printk>
   326fe:	4815      	ldr	r0, [pc, #84]	; (32754 <z_timer_expiration_handler+0x14c>)
   32700:	21ac      	movs	r1, #172	; 0xac
   32702:	f004 feb0 	bl	37466 <assert_post_action>
	__asm__ volatile(
   32706:	f385 8811 	msr	BASEPRI, r5
   3270a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   3270e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   32710:	4630      	mov	r0, r6
   32712:	f7fe fa87 	bl	30c24 <z_unpend_thread_no_timeout>
   32716:	2300      	movs	r3, #0
   32718:	480d      	ldr	r0, [pc, #52]	; (32750 <z_timer_expiration_handler+0x148>)
   3271a:	67f3      	str	r3, [r6, #124]	; 0x7c
   3271c:	f7fd f860 	bl	2f7e0 <z_spin_unlock_valid>
   32720:	b968      	cbnz	r0, 3273e <z_timer_expiration_handler+0x136>
   32722:	4a0c      	ldr	r2, [pc, #48]	; (32754 <z_timer_expiration_handler+0x14c>)
   32724:	4910      	ldr	r1, [pc, #64]	; (32768 <z_timer_expiration_handler+0x160>)
   32726:	480d      	ldr	r0, [pc, #52]	; (3275c <z_timer_expiration_handler+0x154>)
   32728:	23ac      	movs	r3, #172	; 0xac
   3272a:	f004 fcf6 	bl	3711a <printk>
   3272e:	4908      	ldr	r1, [pc, #32]	; (32750 <z_timer_expiration_handler+0x148>)
   32730:	480e      	ldr	r0, [pc, #56]	; (3276c <z_timer_expiration_handler+0x164>)
   32732:	f004 fcf2 	bl	3711a <printk>
   32736:	4807      	ldr	r0, [pc, #28]	; (32754 <z_timer_expiration_handler+0x14c>)
   32738:	21ac      	movs	r1, #172	; 0xac
   3273a:	f004 fe94 	bl	37466 <assert_post_action>
   3273e:	f385 8811 	msr	BASEPRI, r5
   32742:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   32746:	4630      	mov	r0, r6
}
   32748:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   3274c:	f7fe bd52 	b.w	311f4 <z_ready_thread>
   32750:	20002d54 	.word	0x20002d54
   32754:	0003cd09 	.word	0x0003cd09
   32758:	0003cd5b 	.word	0x0003cd5b
   3275c:	0003c48a 	.word	0x0003c48a
   32760:	0003cd70 	.word	0x0003cd70
   32764:	00032609 	.word	0x00032609
   32768:	0003cd2f 	.word	0x0003cd2f
   3276c:	0003cd46 	.word	0x0003cd46

00032770 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   32770:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   32774:	4619      	mov	r1, r3
   32776:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   32778:	1c4c      	adds	r4, r1, #1
{
   3277a:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   3277c:	bf08      	it	eq
   3277e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   32782:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   32786:	4680      	mov	r8, r0
   32788:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   3278a:	d04c      	beq.n	32826 <z_impl_k_timer_start+0xb6>
   3278c:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   3278e:	1c6b      	adds	r3, r5, #1
   32790:	bf08      	it	eq
   32792:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   32796:	4614      	mov	r4, r2
   32798:	d019      	beq.n	327ce <z_impl_k_timer_start+0x5e>
   3279a:	ea54 0305 	orrs.w	r3, r4, r5
   3279e:	d016      	beq.n	327ce <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   327a0:	f06f 0301 	mvn.w	r3, #1
   327a4:	ebb3 0a02 	subs.w	sl, r3, r2
   327a8:	f04f 33ff 	mov.w	r3, #4294967295
   327ac:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   327b0:	f1ba 0f00 	cmp.w	sl, #0
   327b4:	f17b 0300 	sbcs.w	r3, fp, #0
   327b8:	da09      	bge.n	327ce <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   327ba:	f112 34ff 	adds.w	r4, r2, #4294967295
   327be:	f145 35ff 	adc.w	r5, r5, #4294967295
   327c2:	2c01      	cmp	r4, #1
   327c4:	f175 0300 	sbcs.w	r3, r5, #0
   327c8:	bfbc      	itt	lt
   327ca:	2401      	movlt	r4, #1
   327cc:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   327ce:	f06f 0301 	mvn.w	r3, #1
   327d2:	1a1b      	subs	r3, r3, r0
   327d4:	9300      	str	r3, [sp, #0]
   327d6:	f04f 33ff 	mov.w	r3, #4294967295
   327da:	eb63 0301 	sbc.w	r3, r3, r1
   327de:	9301      	str	r3, [sp, #4]
   327e0:	e9dd 2300 	ldrd	r2, r3, [sp]
   327e4:	2a00      	cmp	r2, #0
   327e6:	f173 0300 	sbcs.w	r3, r3, #0
   327ea:	da0c      	bge.n	32806 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   327ec:	f110 38ff 	adds.w	r8, r0, #4294967295
   327f0:	f141 39ff 	adc.w	r9, r1, #4294967295
   327f4:	f1b8 0f00 	cmp.w	r8, #0
   327f8:	f179 0300 	sbcs.w	r3, r9, #0
   327fc:	bfbc      	itt	lt
   327fe:	f04f 0800 	movlt.w	r8, #0
   32802:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   32806:	4630      	mov	r0, r6
   32808:	f7ff fcfc 	bl	32204 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   3280c:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3280e:	4907      	ldr	r1, [pc, #28]	; (3282c <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   32810:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   32812:	4642      	mov	r2, r8
   32814:	464b      	mov	r3, r9
   32816:	4630      	mov	r0, r6
	timer->period = period;
   32818:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   3281c:	b002      	add	sp, #8
   3281e:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   32822:	f7ff bc1b 	b.w	3205c <z_add_timeout>
}
   32826:	b002      	add	sp, #8
   32828:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   3282c:	00032609 	.word	0x00032609

00032830 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   32830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32834:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   32836:	4d53      	ldr	r5, [pc, #332]	; (32984 <clear_event_registrations+0x154>)
   32838:	f8df 918c 	ldr.w	r9, [pc, #396]	; 329c8 <clear_event_registrations+0x198>
   3283c:	4e52      	ldr	r6, [pc, #328]	; (32988 <clear_event_registrations+0x158>)
{
   3283e:	4680      	mov	r8, r0
   32840:	4617      	mov	r7, r2
	while (num_events--) {
   32842:	fb04 0401 	mla	r4, r4, r1, r0
   32846:	45a0      	cmp	r8, r4
   32848:	d101      	bne.n	3284e <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   3284a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3284e:	2300      	movs	r3, #0
   32850:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   32854:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   32858:	f003 031f 	and.w	r3, r3, #31
   3285c:	2b08      	cmp	r3, #8
   3285e:	d84f      	bhi.n	32900 <clear_event_registrations+0xd0>
   32860:	e8df f003 	tbb	[pc, r3]
   32864:	4e05305b 	.word	0x4e05305b
   32868:	4e4e4e21 	.word	0x4e4e4e21
   3286c:	3f          	.byte	0x3f
   3286d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3286e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   32872:	b963      	cbnz	r3, 3288e <clear_event_registrations+0x5e>
   32874:	4945      	ldr	r1, [pc, #276]	; (3298c <clear_event_registrations+0x15c>)
   32876:	23a9      	movs	r3, #169	; 0xa9
   32878:	462a      	mov	r2, r5
   3287a:	4630      	mov	r0, r6
   3287c:	f004 fc4d 	bl	3711a <printk>
   32880:	4843      	ldr	r0, [pc, #268]	; (32990 <clear_event_registrations+0x160>)
   32882:	f004 fc4a 	bl	3711a <printk>
   32886:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   32888:	4628      	mov	r0, r5
   3288a:	f004 fdec 	bl	37466 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   3288e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   32892:	2b00      	cmp	r3, #0
   32894:	d041      	beq.n	3291a <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   32896:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   3289a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3289c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3289e:	2300      	movs	r3, #0
	node->prev = NULL;
   328a0:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   328a4:	e039      	b.n	3291a <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   328a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   328aa:	2b00      	cmp	r3, #0
   328ac:	d1ef      	bne.n	3288e <clear_event_registrations+0x5e>
   328ae:	4939      	ldr	r1, [pc, #228]	; (32994 <clear_event_registrations+0x164>)
   328b0:	23ad      	movs	r3, #173	; 0xad
   328b2:	462a      	mov	r2, r5
   328b4:	4630      	mov	r0, r6
   328b6:	f004 fc30 	bl	3711a <printk>
   328ba:	4837      	ldr	r0, [pc, #220]	; (32998 <clear_event_registrations+0x168>)
   328bc:	f004 fc2d 	bl	3711a <printk>
   328c0:	21ad      	movs	r1, #173	; 0xad
   328c2:	e7e1      	b.n	32888 <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   328c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   328c8:	2b00      	cmp	r3, #0
   328ca:	d1e0      	bne.n	3288e <clear_event_registrations+0x5e>
   328cc:	4933      	ldr	r1, [pc, #204]	; (3299c <clear_event_registrations+0x16c>)
   328ce:	23b1      	movs	r3, #177	; 0xb1
   328d0:	462a      	mov	r2, r5
   328d2:	4630      	mov	r0, r6
   328d4:	f004 fc21 	bl	3711a <printk>
   328d8:	4831      	ldr	r0, [pc, #196]	; (329a0 <clear_event_registrations+0x170>)
   328da:	f004 fc1e 	bl	3711a <printk>
   328de:	21b1      	movs	r1, #177	; 0xb1
   328e0:	e7d2      	b.n	32888 <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   328e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   328e6:	2b00      	cmp	r3, #0
   328e8:	d1d1      	bne.n	3288e <clear_event_registrations+0x5e>
   328ea:	492e      	ldr	r1, [pc, #184]	; (329a4 <clear_event_registrations+0x174>)
   328ec:	23b5      	movs	r3, #181	; 0xb5
   328ee:	462a      	mov	r2, r5
   328f0:	4630      	mov	r0, r6
   328f2:	f004 fc12 	bl	3711a <printk>
   328f6:	482c      	ldr	r0, [pc, #176]	; (329a8 <clear_event_registrations+0x178>)
   328f8:	f004 fc0f 	bl	3711a <printk>
   328fc:	21b5      	movs	r1, #181	; 0xb5
   328fe:	e7c3      	b.n	32888 <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   32900:	4649      	mov	r1, r9
   32902:	23bc      	movs	r3, #188	; 0xbc
   32904:	462a      	mov	r2, r5
   32906:	4630      	mov	r0, r6
   32908:	f004 fc07 	bl	3711a <printk>
   3290c:	4827      	ldr	r0, [pc, #156]	; (329ac <clear_event_registrations+0x17c>)
   3290e:	f004 fc04 	bl	3711a <printk>
   32912:	21bc      	movs	r1, #188	; 0xbc
   32914:	4628      	mov	r0, r5
   32916:	f004 fda6 	bl	37466 <assert_post_action>
   3291a:	4825      	ldr	r0, [pc, #148]	; (329b0 <clear_event_registrations+0x180>)
   3291c:	f7fc ff60 	bl	2f7e0 <z_spin_unlock_valid>
   32920:	b968      	cbnz	r0, 3293e <clear_event_registrations+0x10e>
   32922:	4a24      	ldr	r2, [pc, #144]	; (329b4 <clear_event_registrations+0x184>)
   32924:	4924      	ldr	r1, [pc, #144]	; (329b8 <clear_event_registrations+0x188>)
   32926:	23ac      	movs	r3, #172	; 0xac
   32928:	4630      	mov	r0, r6
   3292a:	f004 fbf6 	bl	3711a <printk>
   3292e:	4920      	ldr	r1, [pc, #128]	; (329b0 <clear_event_registrations+0x180>)
   32930:	4822      	ldr	r0, [pc, #136]	; (329bc <clear_event_registrations+0x18c>)
   32932:	f004 fbf2 	bl	3711a <printk>
   32936:	481f      	ldr	r0, [pc, #124]	; (329b4 <clear_event_registrations+0x184>)
   32938:	21ac      	movs	r1, #172	; 0xac
   3293a:	f004 fd94 	bl	37466 <assert_post_action>
   3293e:	f387 8811 	msr	BASEPRI, r7
   32942:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   32946:	f04f 0340 	mov.w	r3, #64	; 0x40
   3294a:	f3ef 8711 	mrs	r7, BASEPRI
   3294e:	f383 8812 	msr	BASEPRI_MAX, r3
   32952:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32956:	4816      	ldr	r0, [pc, #88]	; (329b0 <clear_event_registrations+0x180>)
   32958:	f7fc ff34 	bl	2f7c4 <z_spin_lock_valid>
   3295c:	b968      	cbnz	r0, 3297a <clear_event_registrations+0x14a>
   3295e:	4a15      	ldr	r2, [pc, #84]	; (329b4 <clear_event_registrations+0x184>)
   32960:	4917      	ldr	r1, [pc, #92]	; (329c0 <clear_event_registrations+0x190>)
   32962:	2381      	movs	r3, #129	; 0x81
   32964:	4630      	mov	r0, r6
   32966:	f004 fbd8 	bl	3711a <printk>
   3296a:	4911      	ldr	r1, [pc, #68]	; (329b0 <clear_event_registrations+0x180>)
   3296c:	4815      	ldr	r0, [pc, #84]	; (329c4 <clear_event_registrations+0x194>)
   3296e:	f004 fbd4 	bl	3711a <printk>
   32972:	4810      	ldr	r0, [pc, #64]	; (329b4 <clear_event_registrations+0x184>)
   32974:	2181      	movs	r1, #129	; 0x81
   32976:	f004 fd76 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   3297a:	480d      	ldr	r0, [pc, #52]	; (329b0 <clear_event_registrations+0x180>)
   3297c:	f7fc ff40 	bl	2f800 <z_spin_lock_set_owner>
	return k;
   32980:	3c14      	subs	r4, #20
   32982:	e760      	b.n	32846 <clear_event_registrations+0x16>
   32984:	0004176b 	.word	0x0004176b
   32988:	0003c48a 	.word	0x0003c48a
   3298c:	0004178c 	.word	0x0004178c
   32990:	000417a6 	.word	0x000417a6
   32994:	000417bb 	.word	0x000417bb
   32998:	000417d7 	.word	0x000417d7
   3299c:	000417e8 	.word	0x000417e8
   329a0:	00041805 	.word	0x00041805
   329a4:	0004181c 	.word	0x0004181c
   329a8:	00041837 	.word	0x00041837
   329ac:	00041850 	.word	0x00041850
   329b0:	20002d58 	.word	0x20002d58
   329b4:	0003cd09 	.word	0x0003cd09
   329b8:	0003cd2f 	.word	0x0003cd2f
   329bc:	0003cd46 	.word	0x0003cd46
   329c0:	0003cd5b 	.word	0x0003cd5b
   329c4:	0003cd70 	.word	0x0003cd70
   329c8:	00041a5a 	.word	0x00041a5a

000329cc <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   329cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   329d0:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   329d2:	4e7c      	ldr	r6, [pc, #496]	; (32bc4 <register_events+0x1f8>)
   329d4:	f8df 8230 	ldr.w	r8, [pc, #560]	; 32c08 <register_events+0x23c>
   329d8:	f8df a230 	ldr.w	sl, [pc, #560]	; 32c0c <register_events+0x240>
{
   329dc:	9100      	str	r1, [sp, #0]
   329de:	4615      	mov	r5, r2
   329e0:	9301      	str	r3, [sp, #4]
   329e2:	4604      	mov	r4, r0
	int events_registered = 0;
   329e4:	46b9      	mov	r9, r7
	for (int ii = 0; ii < num_events; ii++) {
   329e6:	9b00      	ldr	r3, [sp, #0]
   329e8:	429f      	cmp	r7, r3
   329ea:	db03      	blt.n	329f4 <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   329ec:	4648      	mov	r0, r9
   329ee:	b003      	add	sp, #12
   329f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   329f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   329f8:	f3ef 8b11 	mrs	fp, BASEPRI
   329fc:	f383 8812 	msr	BASEPRI_MAX, r3
   32a00:	f3bf 8f6f 	isb	sy
   32a04:	4630      	mov	r0, r6
   32a06:	f7fc fedd 	bl	2f7c4 <z_spin_lock_valid>
   32a0a:	b968      	cbnz	r0, 32a28 <register_events+0x5c>
   32a0c:	486e      	ldr	r0, [pc, #440]	; (32bc8 <register_events+0x1fc>)
   32a0e:	2381      	movs	r3, #129	; 0x81
   32a10:	4642      	mov	r2, r8
   32a12:	4651      	mov	r1, sl
   32a14:	f004 fb81 	bl	3711a <printk>
   32a18:	486c      	ldr	r0, [pc, #432]	; (32bcc <register_events+0x200>)
   32a1a:	4631      	mov	r1, r6
   32a1c:	f004 fb7d 	bl	3711a <printk>
   32a20:	2181      	movs	r1, #129	; 0x81
   32a22:	4640      	mov	r0, r8
   32a24:	f004 fd1f 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   32a28:	4630      	mov	r0, r6
   32a2a:	f7fc fee9 	bl	2f800 <z_spin_lock_set_owner>
	switch (event->type) {
   32a2e:	7b63      	ldrb	r3, [r4, #13]
   32a30:	f003 031f 	and.w	r3, r3, #31
   32a34:	2b08      	cmp	r3, #8
   32a36:	d84f      	bhi.n	32ad8 <register_events+0x10c>
   32a38:	e8df f003 	tbb	[pc, r3]
   32a3c:	4e054230 	.word	0x4e054230
   32a40:	4e4e4e2c 	.word	0x4e4e4e2c
   32a44:	48          	.byte	0x48
   32a45:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   32a46:	6923      	ldr	r3, [r4, #16]
   32a48:	689b      	ldr	r3, [r3, #8]
   32a4a:	b33b      	cbz	r3, 32a9c <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   32a4c:	2302      	movs	r3, #2
	event->state |= state;
   32a4e:	68e2      	ldr	r2, [r4, #12]
   32a50:	f3c2 3045 	ubfx	r0, r2, #13, #6
   32a54:	4303      	orrs	r3, r0
	event->poller = NULL;
   32a56:	2100      	movs	r1, #0
	event->state |= state;
   32a58:	f363 3252 	bfi	r2, r3, #13, #6
	event->poller = NULL;
   32a5c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   32a5e:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   32a60:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32a62:	4630      	mov	r0, r6
   32a64:	f7fc febc 	bl	2f7e0 <z_spin_unlock_valid>
   32a68:	b968      	cbnz	r0, 32a86 <register_events+0xba>
   32a6a:	4959      	ldr	r1, [pc, #356]	; (32bd0 <register_events+0x204>)
   32a6c:	4856      	ldr	r0, [pc, #344]	; (32bc8 <register_events+0x1fc>)
   32a6e:	23ac      	movs	r3, #172	; 0xac
   32a70:	4642      	mov	r2, r8
   32a72:	f004 fb52 	bl	3711a <printk>
   32a76:	4857      	ldr	r0, [pc, #348]	; (32bd4 <register_events+0x208>)
   32a78:	4631      	mov	r1, r6
   32a7a:	f004 fb4e 	bl	3711a <printk>
   32a7e:	21ac      	movs	r1, #172	; 0xac
   32a80:	4640      	mov	r0, r8
   32a82:	f004 fcf0 	bl	37466 <assert_post_action>
	__asm__ volatile(
   32a86:	f38b 8811 	msr	BASEPRI, fp
   32a8a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   32a8e:	3701      	adds	r7, #1
   32a90:	3414      	adds	r4, #20
   32a92:	e7a8      	b.n	329e6 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   32a94:	6923      	ldr	r3, [r4, #16]
   32a96:	681b      	ldr	r3, [r3, #0]
   32a98:	2b00      	cmp	r3, #0
   32a9a:	d12e      	bne.n	32afa <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   32a9c:	9b01      	ldr	r3, [sp, #4]
   32a9e:	2b00      	cmp	r3, #0
   32aa0:	d1df      	bne.n	32a62 <register_events+0x96>
   32aa2:	782b      	ldrb	r3, [r5, #0]
   32aa4:	2b00      	cmp	r3, #0
   32aa6:	d0dc      	beq.n	32a62 <register_events+0x96>
	switch (event->type) {
   32aa8:	7b63      	ldrb	r3, [r4, #13]
   32aaa:	f003 031f 	and.w	r3, r3, #31
   32aae:	2b08      	cmp	r3, #8
   32ab0:	d879      	bhi.n	32ba6 <register_events+0x1da>
   32ab2:	e8df f003 	tbb	[pc, r3]
   32ab6:	5139      	.short	0x5139
   32ab8:	783d7824 	.word	0x783d7824
   32abc:	7878      	.short	0x7878
   32abe:	64          	.byte	0x64
   32abf:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   32ac0:	6923      	ldr	r3, [r4, #16]
   32ac2:	689b      	ldr	r3, [r3, #8]
   32ac4:	2b00      	cmp	r3, #0
   32ac6:	d0e9      	beq.n	32a9c <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   32ac8:	2301      	movs	r3, #1
   32aca:	e7c0      	b.n	32a4e <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   32acc:	6923      	ldr	r3, [r4, #16]
   32ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   32ad0:	2b00      	cmp	r3, #0
   32ad2:	d0e3      	beq.n	32a9c <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   32ad4:	2310      	movs	r3, #16
   32ad6:	e7ba      	b.n	32a4e <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   32ad8:	4a3f      	ldr	r2, [pc, #252]	; (32bd8 <register_events+0x20c>)
   32ada:	4940      	ldr	r1, [pc, #256]	; (32bdc <register_events+0x210>)
   32adc:	483a      	ldr	r0, [pc, #232]	; (32bc8 <register_events+0x1fc>)
   32ade:	235c      	movs	r3, #92	; 0x5c
   32ae0:	f004 fb1b 	bl	3711a <printk>
   32ae4:	7b61      	ldrb	r1, [r4, #13]
   32ae6:	483e      	ldr	r0, [pc, #248]	; (32be0 <register_events+0x214>)
   32ae8:	f001 011f 	and.w	r1, r1, #31
   32aec:	f004 fb15 	bl	3711a <printk>
   32af0:	4839      	ldr	r0, [pc, #228]	; (32bd8 <register_events+0x20c>)
   32af2:	215c      	movs	r1, #92	; 0x5c
   32af4:	f004 fcb7 	bl	37466 <assert_post_action>
		break;
   32af8:	e7d0      	b.n	32a9c <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   32afa:	2304      	movs	r3, #4
   32afc:	e7a7      	b.n	32a4e <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   32afe:	6923      	ldr	r3, [r4, #16]
   32b00:	b963      	cbnz	r3, 32b1c <register_events+0x150>
   32b02:	4938      	ldr	r1, [pc, #224]	; (32be4 <register_events+0x218>)
   32b04:	4a34      	ldr	r2, [pc, #208]	; (32bd8 <register_events+0x20c>)
   32b06:	4830      	ldr	r0, [pc, #192]	; (32bc8 <register_events+0x1fc>)
   32b08:	2386      	movs	r3, #134	; 0x86
   32b0a:	f004 fb06 	bl	3711a <printk>
   32b0e:	4836      	ldr	r0, [pc, #216]	; (32be8 <register_events+0x21c>)
   32b10:	f004 fb03 	bl	3711a <printk>
   32b14:	4830      	ldr	r0, [pc, #192]	; (32bd8 <register_events+0x20c>)
   32b16:	2186      	movs	r1, #134	; 0x86
   32b18:	f004 fca5 	bl	37466 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   32b1c:	6920      	ldr	r0, [r4, #16]
   32b1e:	462a      	mov	r2, r5
   32b20:	4621      	mov	r1, r4
   32b22:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   32b24:	f007 fc90 	bl	3a448 <add_event>
	event->poller = poller;
   32b28:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   32b2a:	f109 0901 	add.w	r9, r9, #1
   32b2e:	e798      	b.n	32a62 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   32b30:	6923      	ldr	r3, [r4, #16]
   32b32:	b963      	cbnz	r3, 32b4e <register_events+0x182>
   32b34:	492d      	ldr	r1, [pc, #180]	; (32bec <register_events+0x220>)
   32b36:	4a28      	ldr	r2, [pc, #160]	; (32bd8 <register_events+0x20c>)
   32b38:	4823      	ldr	r0, [pc, #140]	; (32bc8 <register_events+0x1fc>)
   32b3a:	238a      	movs	r3, #138	; 0x8a
   32b3c:	f004 faed 	bl	3711a <printk>
   32b40:	482b      	ldr	r0, [pc, #172]	; (32bf0 <register_events+0x224>)
   32b42:	f004 faea 	bl	3711a <printk>
   32b46:	4824      	ldr	r0, [pc, #144]	; (32bd8 <register_events+0x20c>)
   32b48:	218a      	movs	r1, #138	; 0x8a
   32b4a:	f004 fc8c 	bl	37466 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   32b4e:	6920      	ldr	r0, [r4, #16]
   32b50:	462a      	mov	r2, r5
   32b52:	4621      	mov	r1, r4
   32b54:	3014      	adds	r0, #20
   32b56:	e7e5      	b.n	32b24 <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   32b58:	6923      	ldr	r3, [r4, #16]
   32b5a:	b963      	cbnz	r3, 32b76 <register_events+0x1aa>
   32b5c:	4925      	ldr	r1, [pc, #148]	; (32bf4 <register_events+0x228>)
   32b5e:	4a1e      	ldr	r2, [pc, #120]	; (32bd8 <register_events+0x20c>)
   32b60:	4819      	ldr	r0, [pc, #100]	; (32bc8 <register_events+0x1fc>)
   32b62:	238e      	movs	r3, #142	; 0x8e
   32b64:	f004 fad9 	bl	3711a <printk>
   32b68:	4823      	ldr	r0, [pc, #140]	; (32bf8 <register_events+0x22c>)
   32b6a:	f004 fad6 	bl	3711a <printk>
   32b6e:	481a      	ldr	r0, [pc, #104]	; (32bd8 <register_events+0x20c>)
   32b70:	218e      	movs	r1, #142	; 0x8e
   32b72:	f004 fc78 	bl	37466 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   32b76:	6920      	ldr	r0, [r4, #16]
   32b78:	462a      	mov	r2, r5
   32b7a:	4621      	mov	r1, r4
   32b7c:	e7d2      	b.n	32b24 <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   32b7e:	6923      	ldr	r3, [r4, #16]
   32b80:	b963      	cbnz	r3, 32b9c <register_events+0x1d0>
   32b82:	491e      	ldr	r1, [pc, #120]	; (32bfc <register_events+0x230>)
   32b84:	4a14      	ldr	r2, [pc, #80]	; (32bd8 <register_events+0x20c>)
   32b86:	4810      	ldr	r0, [pc, #64]	; (32bc8 <register_events+0x1fc>)
   32b88:	2392      	movs	r3, #146	; 0x92
   32b8a:	f004 fac6 	bl	3711a <printk>
   32b8e:	481c      	ldr	r0, [pc, #112]	; (32c00 <register_events+0x234>)
   32b90:	f004 fac3 	bl	3711a <printk>
   32b94:	4810      	ldr	r0, [pc, #64]	; (32bd8 <register_events+0x20c>)
   32b96:	2192      	movs	r1, #146	; 0x92
   32b98:	f004 fc65 	bl	37466 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   32b9c:	6920      	ldr	r0, [r4, #16]
   32b9e:	462a      	mov	r2, r5
   32ba0:	4621      	mov	r1, r4
   32ba2:	3028      	adds	r0, #40	; 0x28
   32ba4:	e7be      	b.n	32b24 <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   32ba6:	4a0c      	ldr	r2, [pc, #48]	; (32bd8 <register_events+0x20c>)
   32ba8:	490c      	ldr	r1, [pc, #48]	; (32bdc <register_events+0x210>)
   32baa:	4807      	ldr	r0, [pc, #28]	; (32bc8 <register_events+0x1fc>)
   32bac:	2399      	movs	r3, #153	; 0x99
   32bae:	f004 fab4 	bl	3711a <printk>
   32bb2:	4814      	ldr	r0, [pc, #80]	; (32c04 <register_events+0x238>)
   32bb4:	f004 fab1 	bl	3711a <printk>
   32bb8:	4807      	ldr	r0, [pc, #28]	; (32bd8 <register_events+0x20c>)
   32bba:	2199      	movs	r1, #153	; 0x99
   32bbc:	f004 fc53 	bl	37466 <assert_post_action>
		break;
   32bc0:	e7b2      	b.n	32b28 <register_events+0x15c>
   32bc2:	bf00      	nop
   32bc4:	20002d58 	.word	0x20002d58
   32bc8:	0003c48a 	.word	0x0003c48a
   32bcc:	0003cd70 	.word	0x0003cd70
   32bd0:	0003cd2f 	.word	0x0003cd2f
   32bd4:	0003cd46 	.word	0x0003cd46
   32bd8:	0004176b 	.word	0x0004176b
   32bdc:	00041a5a 	.word	0x00041a5a
   32be0:	00041866 	.word	0x00041866
   32be4:	0004178c 	.word	0x0004178c
   32be8:	000417a6 	.word	0x000417a6
   32bec:	000417bb 	.word	0x000417bb
   32bf0:	000417d7 	.word	0x000417d7
   32bf4:	000417e8 	.word	0x000417e8
   32bf8:	00041805 	.word	0x00041805
   32bfc:	0004181c 	.word	0x0004181c
   32c00:	00041837 	.word	0x00041837
   32c04:	00041850 	.word	0x00041850
   32c08:	0003cd09 	.word	0x0003cd09
   32c0c:	0003cd5b 	.word	0x0003cd5b

00032c10 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   32c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   32c14:	6884      	ldr	r4, [r0, #8]
{
   32c16:	4605      	mov	r5, r0
   32c18:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   32c1a:	b1d4      	cbz	r4, 32c52 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   32c1c:	7863      	ldrb	r3, [r4, #1]
   32c1e:	2b01      	cmp	r3, #1
   32c20:	d14b      	bne.n	32cba <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   32c22:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   32c26:	d10e      	bne.n	32c46 <signal_poll_event+0x36>
   32c28:	4a30      	ldr	r2, [pc, #192]	; (32cec <signal_poll_event+0xdc>)
   32c2a:	4931      	ldr	r1, [pc, #196]	; (32cf0 <signal_poll_event+0xe0>)
   32c2c:	4831      	ldr	r0, [pc, #196]	; (32cf4 <signal_poll_event+0xe4>)
   32c2e:	23f9      	movs	r3, #249	; 0xf9
   32c30:	f004 fa73 	bl	3711a <printk>
   32c34:	4830      	ldr	r0, [pc, #192]	; (32cf8 <signal_poll_event+0xe8>)
   32c36:	f004 fa70 	bl	3711a <printk>
   32c3a:	482c      	ldr	r0, [pc, #176]	; (32cec <signal_poll_event+0xdc>)
   32c3c:	21f9      	movs	r1, #249	; 0xf9
   32c3e:	f004 fc12 	bl	37466 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   32c42:	7b7b      	ldrb	r3, [r7, #13]
   32c44:	deff      	udf	#255	; 0xff
   32c46:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   32c4a:	f013 0302 	ands.w	r3, r3, #2
   32c4e:	d10a      	bne.n	32c66 <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   32c50:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   32c52:	68eb      	ldr	r3, [r5, #12]
   32c54:	f3c3 3145 	ubfx	r1, r3, #13, #6
   32c58:	430e      	orrs	r6, r1
	event->poller = NULL;
   32c5a:	2000      	movs	r0, #0
	event->state |= state;
   32c5c:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   32c60:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   32c62:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   32c64:	e00d      	b.n	32c82 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   32c66:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   32c6a:	f04f 31ff 	mov.w	r1, #4294967295
   32c6e:	f06f 0001 	mvn.w	r0, #1
   32c72:	428b      	cmp	r3, r1
   32c74:	bf08      	it	eq
   32c76:	4282      	cmpeq	r2, r0
   32c78:	d105      	bne.n	32c86 <signal_poll_event+0x76>
		poller->is_polling = false;
   32c7a:	2300      	movs	r3, #0
   32c7c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   32c7e:	f06f 000a 	mvn.w	r0, #10
}
   32c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   32c86:	4638      	mov	r0, r7
   32c88:	f7fe f910 	bl	30eac <z_unpend_thread>
	arch_thread_return_value_set(thread,
   32c8c:	2e08      	cmp	r6, #8
   32c8e:	bf0c      	ite	eq
   32c90:	f06f 0303 	mvneq.w	r3, #3
   32c94:	2300      	movne	r3, #0
   32c96:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   32c98:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   32c9c:	06db      	lsls	r3, r3, #27
   32c9e:	d104      	bne.n	32caa <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   32ca0:	f854 8c48 	ldr.w	r8, [r4, #-72]
   32ca4:	f1b8 0f00 	cmp.w	r8, #0
   32ca8:	d001      	beq.n	32cae <signal_poll_event+0x9e>
		poller->is_polling = false;
   32caa:	2300      	movs	r3, #0
   32cac:	e7d0      	b.n	32c50 <signal_poll_event+0x40>
	z_ready_thread(thread);
   32cae:	4638      	mov	r0, r7
   32cb0:	f7fe faa0 	bl	311f4 <z_ready_thread>
		poller->is_polling = false;
   32cb4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   32cb8:	e7cb      	b.n	32c52 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   32cba:	2b02      	cmp	r3, #2
   32cbc:	d1f5      	bne.n	32caa <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   32cbe:	7823      	ldrb	r3, [r4, #0]
   32cc0:	2b00      	cmp	r3, #0
   32cc2:	d0c6      	beq.n	32c52 <signal_poll_event+0x42>
   32cc4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   32cc8:	b177      	cbz	r7, 32ce8 <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   32cca:	f1a4 0914 	sub.w	r9, r4, #20
   32cce:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
   32cd2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   32cd6:	f7ff fa95 	bl	32204 <z_abort_timeout>
		twork->poll_result = 0;
   32cda:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   32cde:	4649      	mov	r1, r9
   32ce0:	4638      	mov	r0, r7
   32ce2:	f7fd fc29 	bl	30538 <k_work_submit_to_queue>
   32ce6:	e7e5      	b.n	32cb4 <signal_poll_event+0xa4>
		poller->is_polling = false;
   32ce8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   32cea:	e7b2      	b.n	32c52 <signal_poll_event+0x42>
   32cec:	0004176b 	.word	0x0004176b
   32cf0:	00041883 	.word	0x00041883
   32cf4:	0003c48a 	.word	0x0003c48a
   32cf8:	00041899 	.word	0x00041899

00032cfc <k_poll_event_init>:
{
   32cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32cfe:	4605      	mov	r5, r0
   32d00:	460f      	mov	r7, r1
   32d02:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   32d04:	4614      	mov	r4, r2
   32d06:	b162      	cbz	r2, 32d22 <k_poll_event_init+0x26>
   32d08:	491b      	ldr	r1, [pc, #108]	; (32d78 <k_poll_event_init+0x7c>)
   32d0a:	4a1c      	ldr	r2, [pc, #112]	; (32d7c <k_poll_event_init+0x80>)
   32d0c:	481c      	ldr	r0, [pc, #112]	; (32d80 <k_poll_event_init+0x84>)
   32d0e:	232d      	movs	r3, #45	; 0x2d
   32d10:	f004 fa03 	bl	3711a <printk>
   32d14:	481b      	ldr	r0, [pc, #108]	; (32d84 <k_poll_event_init+0x88>)
   32d16:	f004 fa00 	bl	3711a <printk>
   32d1a:	4818      	ldr	r0, [pc, #96]	; (32d7c <k_poll_event_init+0x80>)
   32d1c:	212d      	movs	r1, #45	; 0x2d
   32d1e:	f004 fba2 	bl	37466 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   32d22:	2f1f      	cmp	r7, #31
   32d24:	d90c      	bls.n	32d40 <k_poll_event_init+0x44>
   32d26:	4918      	ldr	r1, [pc, #96]	; (32d88 <k_poll_event_init+0x8c>)
   32d28:	4a14      	ldr	r2, [pc, #80]	; (32d7c <k_poll_event_init+0x80>)
   32d2a:	4815      	ldr	r0, [pc, #84]	; (32d80 <k_poll_event_init+0x84>)
   32d2c:	232f      	movs	r3, #47	; 0x2f
   32d2e:	f004 f9f4 	bl	3711a <printk>
   32d32:	4816      	ldr	r0, [pc, #88]	; (32d8c <k_poll_event_init+0x90>)
   32d34:	f004 f9f1 	bl	3711a <printk>
   32d38:	4810      	ldr	r0, [pc, #64]	; (32d7c <k_poll_event_init+0x80>)
   32d3a:	212f      	movs	r1, #47	; 0x2f
   32d3c:	f004 fb93 	bl	37466 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   32d40:	b966      	cbnz	r6, 32d5c <k_poll_event_init+0x60>
   32d42:	4913      	ldr	r1, [pc, #76]	; (32d90 <k_poll_event_init+0x94>)
   32d44:	4a0d      	ldr	r2, [pc, #52]	; (32d7c <k_poll_event_init+0x80>)
   32d46:	480e      	ldr	r0, [pc, #56]	; (32d80 <k_poll_event_init+0x84>)
   32d48:	2330      	movs	r3, #48	; 0x30
   32d4a:	f004 f9e6 	bl	3711a <printk>
   32d4e:	4811      	ldr	r0, [pc, #68]	; (32d94 <k_poll_event_init+0x98>)
   32d50:	f004 f9e3 	bl	3711a <printk>
   32d54:	4809      	ldr	r0, [pc, #36]	; (32d7c <k_poll_event_init+0x80>)
   32d56:	2130      	movs	r1, #48	; 0x30
   32d58:	f004 fb85 	bl	37466 <assert_post_action>
	event->poller = NULL;
   32d5c:	2300      	movs	r3, #0
	event->type = type;
   32d5e:	04e4      	lsls	r4, r4, #19
   32d60:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   32d62:	60ab      	str	r3, [r5, #8]
	event->type = type;
   32d64:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   32d68:	7b2b      	ldrb	r3, [r5, #12]
   32d6a:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   32d6e:	433c      	orrs	r4, r7
   32d70:	431c      	orrs	r4, r3
	event->obj = obj;
   32d72:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   32d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32d78:	000418b8 	.word	0x000418b8
   32d7c:	0004176b 	.word	0x0004176b
   32d80:	0003c48a 	.word	0x0003c48a
   32d84:	000418d8 	.word	0x000418d8
   32d88:	000418fe 	.word	0x000418fe
   32d8c:	00041922 	.word	0x00041922
   32d90:	00041932 	.word	0x00041932
   32d94:	00041945 	.word	0x00041945

00032d98 <z_impl_k_poll>:
{
   32d98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   32d9c:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   32d9e:	4b75      	ldr	r3, [pc, #468]	; (32f74 <z_impl_k_poll+0x1dc>)
   32da0:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   32da2:	2301      	movs	r3, #1
{
   32da4:	4604      	mov	r4, r0
   32da6:	4688      	mov	r8, r1
   32da8:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   32daa:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   32dae:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   32db2:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   32db6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   32dba:	b173      	cbz	r3, 32dda <z_impl_k_poll+0x42>
   32dbc:	496e      	ldr	r1, [pc, #440]	; (32f78 <z_impl_k_poll+0x1e0>)
   32dbe:	4a6f      	ldr	r2, [pc, #444]	; (32f7c <z_impl_k_poll+0x1e4>)
   32dc0:	486f      	ldr	r0, [pc, #444]	; (32f80 <z_impl_k_poll+0x1e8>)
   32dc2:	f44f 738d 	mov.w	r3, #282	; 0x11a
   32dc6:	f004 f9a8 	bl	3711a <printk>
   32dca:	486e      	ldr	r0, [pc, #440]	; (32f84 <z_impl_k_poll+0x1ec>)
   32dcc:	f004 f9a5 	bl	3711a <printk>
   32dd0:	486a      	ldr	r0, [pc, #424]	; (32f7c <z_impl_k_poll+0x1e4>)
   32dd2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   32dd6:	f004 fb46 	bl	37466 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   32dda:	b974      	cbnz	r4, 32dfa <z_impl_k_poll+0x62>
   32ddc:	496a      	ldr	r1, [pc, #424]	; (32f88 <z_impl_k_poll+0x1f0>)
   32dde:	4a67      	ldr	r2, [pc, #412]	; (32f7c <z_impl_k_poll+0x1e4>)
   32de0:	4867      	ldr	r0, [pc, #412]	; (32f80 <z_impl_k_poll+0x1e8>)
   32de2:	f240 131b 	movw	r3, #283	; 0x11b
   32de6:	f004 f998 	bl	3711a <printk>
   32dea:	4868      	ldr	r0, [pc, #416]	; (32f8c <z_impl_k_poll+0x1f4>)
   32dec:	f004 f995 	bl	3711a <printk>
   32df0:	4862      	ldr	r0, [pc, #392]	; (32f7c <z_impl_k_poll+0x1e4>)
   32df2:	f240 111b 	movw	r1, #283	; 0x11b
   32df6:	f004 fb36 	bl	37466 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   32dfa:	f1b8 0f00 	cmp.w	r8, #0
   32dfe:	da0e      	bge.n	32e1e <z_impl_k_poll+0x86>
   32e00:	4963      	ldr	r1, [pc, #396]	; (32f90 <z_impl_k_poll+0x1f8>)
   32e02:	4a5e      	ldr	r2, [pc, #376]	; (32f7c <z_impl_k_poll+0x1e4>)
   32e04:	485e      	ldr	r0, [pc, #376]	; (32f80 <z_impl_k_poll+0x1e8>)
   32e06:	f44f 738e 	mov.w	r3, #284	; 0x11c
   32e0a:	f004 f986 	bl	3711a <printk>
   32e0e:	4861      	ldr	r0, [pc, #388]	; (32f94 <z_impl_k_poll+0x1fc>)
   32e10:	f004 f983 	bl	3711a <printk>
   32e14:	4859      	ldr	r0, [pc, #356]	; (32f7c <z_impl_k_poll+0x1e4>)
   32e16:	f44f 718e 	mov.w	r1, #284	; 0x11c
   32e1a:	f004 fb24 	bl	37466 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   32e1e:	ea56 0307 	orrs.w	r3, r6, r7
   32e22:	bf0c      	ite	eq
   32e24:	2301      	moveq	r3, #1
   32e26:	2300      	movne	r3, #0
   32e28:	4641      	mov	r1, r8
   32e2a:	464a      	mov	r2, r9
   32e2c:	4620      	mov	r0, r4
   32e2e:	f7ff fdcd 	bl	329cc <register_events>
   32e32:	4680      	mov	r8, r0
	__asm__ volatile(
   32e34:	f04f 0340 	mov.w	r3, #64	; 0x40
   32e38:	f3ef 8911 	mrs	r9, BASEPRI
   32e3c:	f383 8812 	msr	BASEPRI_MAX, r3
   32e40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32e44:	4854      	ldr	r0, [pc, #336]	; (32f98 <z_impl_k_poll+0x200>)
   32e46:	f7fc fcbd 	bl	2f7c4 <z_spin_lock_valid>
   32e4a:	b968      	cbnz	r0, 32e68 <z_impl_k_poll+0xd0>
   32e4c:	4a53      	ldr	r2, [pc, #332]	; (32f9c <z_impl_k_poll+0x204>)
   32e4e:	4954      	ldr	r1, [pc, #336]	; (32fa0 <z_impl_k_poll+0x208>)
   32e50:	484b      	ldr	r0, [pc, #300]	; (32f80 <z_impl_k_poll+0x1e8>)
   32e52:	2381      	movs	r3, #129	; 0x81
   32e54:	f004 f961 	bl	3711a <printk>
   32e58:	494f      	ldr	r1, [pc, #316]	; (32f98 <z_impl_k_poll+0x200>)
   32e5a:	4852      	ldr	r0, [pc, #328]	; (32fa4 <z_impl_k_poll+0x20c>)
   32e5c:	f004 f95d 	bl	3711a <printk>
   32e60:	484e      	ldr	r0, [pc, #312]	; (32f9c <z_impl_k_poll+0x204>)
   32e62:	2181      	movs	r1, #129	; 0x81
   32e64:	f004 faff 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   32e68:	484b      	ldr	r0, [pc, #300]	; (32f98 <z_impl_k_poll+0x200>)
   32e6a:	f7fc fcc9 	bl	2f800 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   32e6e:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   32e72:	b9fb      	cbnz	r3, 32eb4 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   32e74:	4620      	mov	r0, r4
   32e76:	464a      	mov	r2, r9
   32e78:	4641      	mov	r1, r8
   32e7a:	f7ff fcd9 	bl	32830 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32e7e:	4846      	ldr	r0, [pc, #280]	; (32f98 <z_impl_k_poll+0x200>)
   32e80:	f7fc fcae 	bl	2f7e0 <z_spin_unlock_valid>
   32e84:	b968      	cbnz	r0, 32ea2 <z_impl_k_poll+0x10a>
   32e86:	4a45      	ldr	r2, [pc, #276]	; (32f9c <z_impl_k_poll+0x204>)
   32e88:	4947      	ldr	r1, [pc, #284]	; (32fa8 <z_impl_k_poll+0x210>)
   32e8a:	483d      	ldr	r0, [pc, #244]	; (32f80 <z_impl_k_poll+0x1e8>)
   32e8c:	23ac      	movs	r3, #172	; 0xac
   32e8e:	f004 f944 	bl	3711a <printk>
   32e92:	4941      	ldr	r1, [pc, #260]	; (32f98 <z_impl_k_poll+0x200>)
   32e94:	4845      	ldr	r0, [pc, #276]	; (32fac <z_impl_k_poll+0x214>)
   32e96:	f004 f940 	bl	3711a <printk>
   32e9a:	4840      	ldr	r0, [pc, #256]	; (32f9c <z_impl_k_poll+0x204>)
   32e9c:	21ac      	movs	r1, #172	; 0xac
   32e9e:	f004 fae2 	bl	37466 <assert_post_action>
	__asm__ volatile(
   32ea2:	f389 8811 	msr	BASEPRI, r9
   32ea6:	f3bf 8f6f 	isb	sy
		return 0;
   32eaa:	2500      	movs	r5, #0
}
   32eac:	4628      	mov	r0, r5
   32eae:	b003      	add	sp, #12
   32eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   32eb4:	2300      	movs	r3, #0
   32eb6:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   32eba:	ea56 0307 	orrs.w	r3, r6, r7
   32ebe:	d118      	bne.n	32ef2 <z_impl_k_poll+0x15a>
   32ec0:	4835      	ldr	r0, [pc, #212]	; (32f98 <z_impl_k_poll+0x200>)
   32ec2:	f7fc fc8d 	bl	2f7e0 <z_spin_unlock_valid>
   32ec6:	b968      	cbnz	r0, 32ee4 <z_impl_k_poll+0x14c>
   32ec8:	4a34      	ldr	r2, [pc, #208]	; (32f9c <z_impl_k_poll+0x204>)
   32eca:	4937      	ldr	r1, [pc, #220]	; (32fa8 <z_impl_k_poll+0x210>)
   32ecc:	482c      	ldr	r0, [pc, #176]	; (32f80 <z_impl_k_poll+0x1e8>)
   32ece:	23ac      	movs	r3, #172	; 0xac
   32ed0:	f004 f923 	bl	3711a <printk>
   32ed4:	4930      	ldr	r1, [pc, #192]	; (32f98 <z_impl_k_poll+0x200>)
   32ed6:	4835      	ldr	r0, [pc, #212]	; (32fac <z_impl_k_poll+0x214>)
   32ed8:	f004 f91f 	bl	3711a <printk>
   32edc:	482f      	ldr	r0, [pc, #188]	; (32f9c <z_impl_k_poll+0x204>)
   32ede:	21ac      	movs	r1, #172	; 0xac
   32ee0:	f004 fac1 	bl	37466 <assert_post_action>
   32ee4:	f389 8811 	msr	BASEPRI, r9
   32ee8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   32eec:	f06f 050a 	mvn.w	r5, #10
   32ef0:	e7dc      	b.n	32eac <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   32ef2:	e9cd 6700 	strd	r6, r7, [sp]
   32ef6:	4a2e      	ldr	r2, [pc, #184]	; (32fb0 <z_impl_k_poll+0x218>)
   32ef8:	4827      	ldr	r0, [pc, #156]	; (32f98 <z_impl_k_poll+0x200>)
   32efa:	4649      	mov	r1, r9
   32efc:	f7fe fb2c 	bl	31558 <z_pend_curr>
   32f00:	4605      	mov	r5, r0
	__asm__ volatile(
   32f02:	f04f 0340 	mov.w	r3, #64	; 0x40
   32f06:	f3ef 8611 	mrs	r6, BASEPRI
   32f0a:	f383 8812 	msr	BASEPRI_MAX, r3
   32f0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32f12:	4821      	ldr	r0, [pc, #132]	; (32f98 <z_impl_k_poll+0x200>)
   32f14:	f7fc fc56 	bl	2f7c4 <z_spin_lock_valid>
   32f18:	b968      	cbnz	r0, 32f36 <z_impl_k_poll+0x19e>
   32f1a:	4a20      	ldr	r2, [pc, #128]	; (32f9c <z_impl_k_poll+0x204>)
   32f1c:	4920      	ldr	r1, [pc, #128]	; (32fa0 <z_impl_k_poll+0x208>)
   32f1e:	4818      	ldr	r0, [pc, #96]	; (32f80 <z_impl_k_poll+0x1e8>)
   32f20:	2381      	movs	r3, #129	; 0x81
   32f22:	f004 f8fa 	bl	3711a <printk>
   32f26:	491c      	ldr	r1, [pc, #112]	; (32f98 <z_impl_k_poll+0x200>)
   32f28:	481e      	ldr	r0, [pc, #120]	; (32fa4 <z_impl_k_poll+0x20c>)
   32f2a:	f004 f8f6 	bl	3711a <printk>
   32f2e:	481b      	ldr	r0, [pc, #108]	; (32f9c <z_impl_k_poll+0x204>)
   32f30:	2181      	movs	r1, #129	; 0x81
   32f32:	f004 fa98 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   32f36:	4818      	ldr	r0, [pc, #96]	; (32f98 <z_impl_k_poll+0x200>)
   32f38:	f7fc fc62 	bl	2f800 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   32f3c:	4620      	mov	r0, r4
   32f3e:	4632      	mov	r2, r6
   32f40:	4641      	mov	r1, r8
   32f42:	f7ff fc75 	bl	32830 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32f46:	4814      	ldr	r0, [pc, #80]	; (32f98 <z_impl_k_poll+0x200>)
   32f48:	f7fc fc4a 	bl	2f7e0 <z_spin_unlock_valid>
   32f4c:	b968      	cbnz	r0, 32f6a <z_impl_k_poll+0x1d2>
   32f4e:	4a13      	ldr	r2, [pc, #76]	; (32f9c <z_impl_k_poll+0x204>)
   32f50:	4915      	ldr	r1, [pc, #84]	; (32fa8 <z_impl_k_poll+0x210>)
   32f52:	480b      	ldr	r0, [pc, #44]	; (32f80 <z_impl_k_poll+0x1e8>)
   32f54:	23ac      	movs	r3, #172	; 0xac
   32f56:	f004 f8e0 	bl	3711a <printk>
   32f5a:	490f      	ldr	r1, [pc, #60]	; (32f98 <z_impl_k_poll+0x200>)
   32f5c:	4813      	ldr	r0, [pc, #76]	; (32fac <z_impl_k_poll+0x214>)
   32f5e:	f004 f8dc 	bl	3711a <printk>
   32f62:	480e      	ldr	r0, [pc, #56]	; (32f9c <z_impl_k_poll+0x204>)
   32f64:	21ac      	movs	r1, #172	; 0xac
   32f66:	f004 fa7e 	bl	37466 <assert_post_action>
	__asm__ volatile(
   32f6a:	f386 8811 	msr	BASEPRI, r6
   32f6e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   32f72:	e79b      	b.n	32eac <z_impl_k_poll+0x114>
   32f74:	20002d00 	.word	0x20002d00
   32f78:	0004134b 	.word	0x0004134b
   32f7c:	0004176b 	.word	0x0004176b
   32f80:	0003c48a 	.word	0x0003c48a
   32f84:	0003cae0 	.word	0x0003cae0
   32f88:	0004195f 	.word	0x0004195f
   32f8c:	00041975 	.word	0x00041975
   32f90:	00041984 	.word	0x00041984
   32f94:	00041994 	.word	0x00041994
   32f98:	20002d58 	.word	0x20002d58
   32f9c:	0003cd09 	.word	0x0003cd09
   32fa0:	0003cd5b 	.word	0x0003cd5b
   32fa4:	0003cd70 	.word	0x0003cd70
   32fa8:	0003cd2f 	.word	0x0003cd2f
   32fac:	0003cd46 	.word	0x0003cd46
   32fb0:	20000700 	.word	0x20000700

00032fb4 <z_impl_k_poll_signal_raise>:
{
   32fb4:	b570      	push	{r4, r5, r6, lr}
   32fb6:	4604      	mov	r4, r0
   32fb8:	460d      	mov	r5, r1
	__asm__ volatile(
   32fba:	f04f 0340 	mov.w	r3, #64	; 0x40
   32fbe:	f3ef 8611 	mrs	r6, BASEPRI
   32fc2:	f383 8812 	msr	BASEPRI_MAX, r3
   32fc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32fca:	4821      	ldr	r0, [pc, #132]	; (33050 <z_impl_k_poll_signal_raise+0x9c>)
   32fcc:	f7fc fbfa 	bl	2f7c4 <z_spin_lock_valid>
   32fd0:	b968      	cbnz	r0, 32fee <z_impl_k_poll_signal_raise+0x3a>
   32fd2:	4a20      	ldr	r2, [pc, #128]	; (33054 <z_impl_k_poll_signal_raise+0xa0>)
   32fd4:	4920      	ldr	r1, [pc, #128]	; (33058 <z_impl_k_poll_signal_raise+0xa4>)
   32fd6:	4821      	ldr	r0, [pc, #132]	; (3305c <z_impl_k_poll_signal_raise+0xa8>)
   32fd8:	2381      	movs	r3, #129	; 0x81
   32fda:	f004 f89e 	bl	3711a <printk>
   32fde:	491c      	ldr	r1, [pc, #112]	; (33050 <z_impl_k_poll_signal_raise+0x9c>)
   32fe0:	481f      	ldr	r0, [pc, #124]	; (33060 <z_impl_k_poll_signal_raise+0xac>)
   32fe2:	f004 f89a 	bl	3711a <printk>
   32fe6:	481b      	ldr	r0, [pc, #108]	; (33054 <z_impl_k_poll_signal_raise+0xa0>)
   32fe8:	2181      	movs	r1, #129	; 0x81
   32fea:	f004 fa3c 	bl	37466 <assert_post_action>
	z_spin_lock_set_owner(l);
   32fee:	4818      	ldr	r0, [pc, #96]	; (33050 <z_impl_k_poll_signal_raise+0x9c>)
   32ff0:	f7fc fc06 	bl	2f800 <z_spin_lock_set_owner>
	return list->head == list;
   32ff4:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   32ff6:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   32ff8:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   32ffa:	4284      	cmp	r4, r0
   32ffc:	60a1      	str	r1, [r4, #8]
   32ffe:	d117      	bne.n	33030 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33000:	4813      	ldr	r0, [pc, #76]	; (33050 <z_impl_k_poll_signal_raise+0x9c>)
   33002:	f7fc fbed 	bl	2f7e0 <z_spin_unlock_valid>
   33006:	b968      	cbnz	r0, 33024 <z_impl_k_poll_signal_raise+0x70>
   33008:	4a12      	ldr	r2, [pc, #72]	; (33054 <z_impl_k_poll_signal_raise+0xa0>)
   3300a:	4916      	ldr	r1, [pc, #88]	; (33064 <z_impl_k_poll_signal_raise+0xb0>)
   3300c:	4813      	ldr	r0, [pc, #76]	; (3305c <z_impl_k_poll_signal_raise+0xa8>)
   3300e:	23ac      	movs	r3, #172	; 0xac
   33010:	f004 f883 	bl	3711a <printk>
   33014:	490e      	ldr	r1, [pc, #56]	; (33050 <z_impl_k_poll_signal_raise+0x9c>)
   33016:	4814      	ldr	r0, [pc, #80]	; (33068 <z_impl_k_poll_signal_raise+0xb4>)
   33018:	f004 f87f 	bl	3711a <printk>
   3301c:	480d      	ldr	r0, [pc, #52]	; (33054 <z_impl_k_poll_signal_raise+0xa0>)
   3301e:	21ac      	movs	r1, #172	; 0xac
   33020:	f004 fa21 	bl	37466 <assert_post_action>
	__asm__ volatile(
   33024:	f386 8811 	msr	BASEPRI, r6
   33028:	f3bf 8f6f 	isb	sy
		return 0;
   3302c:	2400      	movs	r4, #0
   3302e:	e00d      	b.n	3304c <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   33030:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   33034:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   33036:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   33038:	2300      	movs	r3, #0
	node->prev = NULL;
   3303a:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3303e:	f7ff fde7 	bl	32c10 <signal_poll_event>
	z_reschedule(&lock, key);
   33042:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   33044:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   33046:	4802      	ldr	r0, [pc, #8]	; (33050 <z_impl_k_poll_signal_raise+0x9c>)
   33048:	f7fd fe34 	bl	30cb4 <z_reschedule>
}
   3304c:	4620      	mov	r0, r4
   3304e:	bd70      	pop	{r4, r5, r6, pc}
   33050:	20002d58 	.word	0x20002d58
   33054:	0003cd09 	.word	0x0003cd09
   33058:	0003cd5b 	.word	0x0003cd5b
   3305c:	0003c48a 	.word	0x0003c48a
   33060:	0003cd70 	.word	0x0003cd70
   33064:	0003cd2f 	.word	0x0003cd2f
   33068:	0003cd46 	.word	0x0003cd46

0003306c <z_heap_aligned_alloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   3306c:	2304      	movs	r3, #4
   3306e:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   33070:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   33074:	4606      	mov	r6, r0
   33076:	460d      	mov	r5, r1
   33078:	d20a      	bcs.n	33090 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   3307a:	f04f 0800 	mov.w	r8, #0
   3307e:	f04f 0900 	mov.w	r9, #0
   33082:	e9cd 8900 	strd	r8, r9, [sp]
   33086:	4319      	orrs	r1, r3
   33088:	f7fc f84c 	bl	2f124 <k_heap_aligned_alloc>
	if (mem == NULL) {
   3308c:	4604      	mov	r4, r0
   3308e:	b920      	cbnz	r0, 3309a <z_heap_aligned_alloc+0x2e>
		return NULL;
   33090:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   33092:	4620      	mov	r0, r4
   33094:	b002      	add	sp, #8
   33096:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   3309a:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   3309e:	2d00      	cmp	r5, #0
   330a0:	d0f7      	beq.n	33092 <z_heap_aligned_alloc+0x26>
   330a2:	1e6b      	subs	r3, r5, #1
   330a4:	421c      	tst	r4, r3
   330a6:	d0f4      	beq.n	33092 <z_heap_aligned_alloc+0x26>
   330a8:	2325      	movs	r3, #37	; 0x25
   330aa:	4a07      	ldr	r2, [pc, #28]	; (330c8 <z_heap_aligned_alloc+0x5c>)
   330ac:	4907      	ldr	r1, [pc, #28]	; (330cc <z_heap_aligned_alloc+0x60>)
   330ae:	4808      	ldr	r0, [pc, #32]	; (330d0 <z_heap_aligned_alloc+0x64>)
   330b0:	f004 f833 	bl	3711a <printk>
   330b4:	4621      	mov	r1, r4
   330b6:	4807      	ldr	r0, [pc, #28]	; (330d4 <z_heap_aligned_alloc+0x68>)
   330b8:	462a      	mov	r2, r5
   330ba:	f004 f82e 	bl	3711a <printk>
   330be:	4802      	ldr	r0, [pc, #8]	; (330c8 <z_heap_aligned_alloc+0x5c>)
   330c0:	2125      	movs	r1, #37	; 0x25
   330c2:	f004 f9d0 	bl	37466 <assert_post_action>
   330c6:	e7e4      	b.n	33092 <z_heap_aligned_alloc+0x26>
   330c8:	000419a1 	.word	0x000419a1
   330cc:	000419c5 	.word	0x000419c5
   330d0:	0003c48a 	.word	0x0003c48a
   330d4:	000419f7 	.word	0x000419f7

000330d8 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   330d8:	2803      	cmp	r0, #3
{
   330da:	b538      	push	{r3, r4, r5, lr}
   330dc:	4604      	mov	r4, r0
   330de:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   330e0:	d901      	bls.n	330e6 <k_aligned_alloc+0xe>
   330e2:	0783      	lsls	r3, r0, #30
   330e4:	d00c      	beq.n	33100 <k_aligned_alloc+0x28>
   330e6:	4912      	ldr	r1, [pc, #72]	; (33130 <k_aligned_alloc+0x58>)
   330e8:	4a12      	ldr	r2, [pc, #72]	; (33134 <k_aligned_alloc+0x5c>)
   330ea:	4813      	ldr	r0, [pc, #76]	; (33138 <k_aligned_alloc+0x60>)
   330ec:	2342      	movs	r3, #66	; 0x42
   330ee:	f004 f814 	bl	3711a <printk>
   330f2:	4812      	ldr	r0, [pc, #72]	; (3313c <k_aligned_alloc+0x64>)
   330f4:	f004 f811 	bl	3711a <printk>
   330f8:	480e      	ldr	r0, [pc, #56]	; (33134 <k_aligned_alloc+0x5c>)
   330fa:	2142      	movs	r1, #66	; 0x42
   330fc:	f004 f9b3 	bl	37466 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   33100:	1e63      	subs	r3, r4, #1
   33102:	4223      	tst	r3, r4
   33104:	d00c      	beq.n	33120 <k_aligned_alloc+0x48>
   33106:	490e      	ldr	r1, [pc, #56]	; (33140 <k_aligned_alloc+0x68>)
   33108:	4a0a      	ldr	r2, [pc, #40]	; (33134 <k_aligned_alloc+0x5c>)
   3310a:	480b      	ldr	r0, [pc, #44]	; (33138 <k_aligned_alloc+0x60>)
   3310c:	2346      	movs	r3, #70	; 0x46
   3310e:	f004 f804 	bl	3711a <printk>
   33112:	480c      	ldr	r0, [pc, #48]	; (33144 <k_aligned_alloc+0x6c>)
   33114:	f004 f801 	bl	3711a <printk>
   33118:	4806      	ldr	r0, [pc, #24]	; (33134 <k_aligned_alloc+0x5c>)
   3311a:	2146      	movs	r1, #70	; 0x46
   3311c:	f004 f9a3 	bl	37466 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   33120:	462a      	mov	r2, r5
   33122:	4621      	mov	r1, r4
   33124:	4808      	ldr	r0, [pc, #32]	; (33148 <k_aligned_alloc+0x70>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   33126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   3312a:	f7ff bf9f 	b.w	3306c <z_heap_aligned_alloc>
   3312e:	bf00      	nop
   33130:	00041a1f 	.word	0x00041a1f
   33134:	000419a1 	.word	0x000419a1
   33138:	0003c48a 	.word	0x0003c48a
   3313c:	00041a5c 	.word	0x00041a5c
   33140:	0003ce54 	.word	0x0003ce54
   33144:	0003ce6f 	.word	0x0003ce6f
   33148:	20000b58 	.word	0x20000b58

0003314c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   3314c:	b538      	push	{r3, r4, r5, lr}
   3314e:	4604      	mov	r4, r0
   33150:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   33152:	f007 f845 	bl	3a1e0 <k_is_in_isr>
   33156:	b950      	cbnz	r0, 3316e <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   33158:	4b06      	ldr	r3, [pc, #24]	; (33174 <z_thread_aligned_alloc+0x28>)
   3315a:	689b      	ldr	r3, [r3, #8]
   3315c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   3315e:	b143      	cbz	r3, 33172 <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   33160:	462a      	mov	r2, r5
   33162:	4621      	mov	r1, r4
   33164:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   33166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   3316a:	f7ff bf7f 	b.w	3306c <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   3316e:	4b02      	ldr	r3, [pc, #8]	; (33178 <z_thread_aligned_alloc+0x2c>)
   33170:	e7f6      	b.n	33160 <z_thread_aligned_alloc+0x14>
}
   33172:	bd38      	pop	{r3, r4, r5, pc}
   33174:	20002d00 	.word	0x20002d00
   33178:	20000b58 	.word	0x20000b58

0003317c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   3317c:	4a02      	ldr	r2, [pc, #8]	; (33188 <boot_banner+0xc>)
   3317e:	4903      	ldr	r1, [pc, #12]	; (3318c <boot_banner+0x10>)
   33180:	4803      	ldr	r0, [pc, #12]	; (33190 <boot_banner+0x14>)
   33182:	f003 bfca 	b.w	3711a <printk>
   33186:	bf00      	nop
   33188:	0003ca22 	.word	0x0003ca22
   3318c:	00041a89 	.word	0x00041a89
   33190:	00041a98 	.word	0x00041a98

00033194 <nrf_cc3xx_platform_init>:
   33194:	b510      	push	{r4, lr}
   33196:	4c0c      	ldr	r4, [pc, #48]	; (331c8 <nrf_cc3xx_platform_init+0x34>)
   33198:	6823      	ldr	r3, [r4, #0]
   3319a:	b113      	cbz	r3, 331a2 <nrf_cc3xx_platform_init+0xe>
   3319c:	4b0b      	ldr	r3, [pc, #44]	; (331cc <nrf_cc3xx_platform_init+0x38>)
   3319e:	681b      	ldr	r3, [r3, #0]
   331a0:	b92b      	cbnz	r3, 331ae <nrf_cc3xx_platform_init+0x1a>
   331a2:	f000 fe73 	bl	33e8c <CC_LibInit>
   331a6:	b930      	cbnz	r0, 331b6 <nrf_cc3xx_platform_init+0x22>
   331a8:	4b08      	ldr	r3, [pc, #32]	; (331cc <nrf_cc3xx_platform_init+0x38>)
   331aa:	2201      	movs	r2, #1
   331ac:	601a      	str	r2, [r3, #0]
   331ae:	2301      	movs	r3, #1
   331b0:	6023      	str	r3, [r4, #0]
   331b2:	2000      	movs	r0, #0
   331b4:	bd10      	pop	{r4, pc}
   331b6:	3801      	subs	r0, #1
   331b8:	2806      	cmp	r0, #6
   331ba:	d901      	bls.n	331c0 <nrf_cc3xx_platform_init+0x2c>
   331bc:	4804      	ldr	r0, [pc, #16]	; (331d0 <nrf_cc3xx_platform_init+0x3c>)
   331be:	bd10      	pop	{r4, pc}
   331c0:	4b04      	ldr	r3, [pc, #16]	; (331d4 <nrf_cc3xx_platform_init+0x40>)
   331c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   331c6:	bd10      	pop	{r4, pc}
   331c8:	20002d5c 	.word	0x20002d5c
   331cc:	20002d60 	.word	0x20002d60
   331d0:	ffff8ffe 	.word	0xffff8ffe
   331d4:	0003be54 	.word	0x0003be54

000331d8 <nrf_cc3xx_platform_abort>:
   331d8:	f3bf 8f4f 	dsb	sy
   331dc:	4905      	ldr	r1, [pc, #20]	; (331f4 <nrf_cc3xx_platform_abort+0x1c>)
   331de:	4b06      	ldr	r3, [pc, #24]	; (331f8 <nrf_cc3xx_platform_abort+0x20>)
   331e0:	68ca      	ldr	r2, [r1, #12]
   331e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   331e6:	4313      	orrs	r3, r2
   331e8:	60cb      	str	r3, [r1, #12]
   331ea:	f3bf 8f4f 	dsb	sy
   331ee:	bf00      	nop
   331f0:	e7fd      	b.n	331ee <nrf_cc3xx_platform_abort+0x16>
   331f2:	bf00      	nop
   331f4:	e000ed00 	.word	0xe000ed00
   331f8:	05fa0004 	.word	0x05fa0004

000331fc <CC_PalAbort>:
   331fc:	b4f0      	push	{r4, r5, r6, r7}
   331fe:	4f09      	ldr	r7, [pc, #36]	; (33224 <CC_PalAbort+0x28>)
   33200:	4e09      	ldr	r6, [pc, #36]	; (33228 <CC_PalAbort+0x2c>)
   33202:	4c0a      	ldr	r4, [pc, #40]	; (3322c <CC_PalAbort+0x30>)
   33204:	4a0a      	ldr	r2, [pc, #40]	; (33230 <CC_PalAbort+0x34>)
   33206:	4d0b      	ldr	r5, [pc, #44]	; (33234 <CC_PalAbort+0x38>)
   33208:	490b      	ldr	r1, [pc, #44]	; (33238 <CC_PalAbort+0x3c>)
   3320a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   3320e:	603b      	str	r3, [r7, #0]
   33210:	6852      	ldr	r2, [r2, #4]
   33212:	6033      	str	r3, [r6, #0]
   33214:	6023      	str	r3, [r4, #0]
   33216:	2400      	movs	r4, #0
   33218:	602b      	str	r3, [r5, #0]
   3321a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   3321e:	bcf0      	pop	{r4, r5, r6, r7}
   33220:	4710      	bx	r2
   33222:	bf00      	nop
   33224:	5002b400 	.word	0x5002b400
   33228:	5002b404 	.word	0x5002b404
   3322c:	5002b408 	.word	0x5002b408
   33230:	20000708 	.word	0x20000708
   33234:	5002b40c 	.word	0x5002b40c
   33238:	5002a000 	.word	0x5002a000

0003323c <nrf_cc3xx_platform_set_abort>:
   3323c:	e9d0 1200 	ldrd	r1, r2, [r0]
   33240:	4b01      	ldr	r3, [pc, #4]	; (33248 <nrf_cc3xx_platform_set_abort+0xc>)
   33242:	e9c3 1200 	strd	r1, r2, [r3]
   33246:	4770      	bx	lr
   33248:	20000708 	.word	0x20000708

0003324c <nrf_cc3xx_platform_ctr_drbg_init>:
   3324c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33250:	4c15      	ldr	r4, [pc, #84]	; (332a8 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   33252:	f8df 805c 	ldr.w	r8, [pc, #92]	; 332b0 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   33256:	2800      	cmp	r0, #0
   33258:	bf18      	it	ne
   3325a:	4604      	movne	r4, r0
   3325c:	b083      	sub	sp, #12
   3325e:	6820      	ldr	r0, [r4, #0]
   33260:	4540      	cmp	r0, r8
   33262:	d01d      	beq.n	332a0 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   33264:	460d      	mov	r5, r1
   33266:	4620      	mov	r0, r4
   33268:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   3326c:	f104 0904 	add.w	r9, r4, #4
   33270:	4616      	mov	r6, r2
   33272:	f504 778c 	add.w	r7, r4, #280	; 0x118
   33276:	f000 f8d3 	bl	33420 <mbedtls_platform_zeroize>
   3327a:	4648      	mov	r0, r9
   3327c:	f000 fcf2 	bl	33c64 <cc_mbedtls_entropy_init>
   33280:	4638      	mov	r0, r7
   33282:	f000 fb1f 	bl	338c4 <cc_mbedtls_ctr_drbg_init>
   33286:	4909      	ldr	r1, [pc, #36]	; (332ac <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   33288:	9600      	str	r6, [sp, #0]
   3328a:	464a      	mov	r2, r9
   3328c:	4638      	mov	r0, r7
   3328e:	462b      	mov	r3, r5
   33290:	f000 fb2e 	bl	338f0 <cc_mbedtls_ctr_drbg_seed>
   33294:	b908      	cbnz	r0, 3329a <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   33296:	f8c4 8000 	str.w	r8, [r4]
   3329a:	b003      	add	sp, #12
   3329c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   332a0:	2000      	movs	r0, #0
   332a2:	b003      	add	sp, #12
   332a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   332a8:	20004890 	.word	0x20004890
   332ac:	00033ce1 	.word	0x00033ce1
   332b0:	5ac9bca5 	.word	0x5ac9bca5

000332b4 <nrf_cc3xx_platform_ctr_drbg_get>:
   332b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   332b6:	4c0d      	ldr	r4, [pc, #52]	; (332ec <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   332b8:	4e0d      	ldr	r6, [pc, #52]	; (332f0 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   332ba:	2800      	cmp	r0, #0
   332bc:	bf08      	it	eq
   332be:	4620      	moveq	r0, r4
   332c0:	b083      	sub	sp, #12
   332c2:	6807      	ldr	r7, [r0, #0]
   332c4:	42b7      	cmp	r7, r6
   332c6:	d10e      	bne.n	332e6 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   332c8:	2600      	movs	r6, #0
   332ca:	461d      	mov	r5, r3
   332cc:	f500 708c 	add.w	r0, r0, #280	; 0x118
   332d0:	9600      	str	r6, [sp, #0]
   332d2:	4633      	mov	r3, r6
   332d4:	4614      	mov	r4, r2
   332d6:	f000 fb57 	bl	33988 <cc_mbedtls_ctr_drbg_random_with_add>
   332da:	2800      	cmp	r0, #0
   332dc:	bf18      	it	ne
   332de:	4634      	movne	r4, r6
   332e0:	602c      	str	r4, [r5, #0]
   332e2:	b003      	add	sp, #12
   332e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   332e6:	4803      	ldr	r0, [pc, #12]	; (332f4 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   332e8:	e7fb      	b.n	332e2 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   332ea:	bf00      	nop
   332ec:	20004890 	.word	0x20004890
   332f0:	5ac9bca5 	.word	0x5ac9bca5
   332f4:	ffff8fe8 	.word	0xffff8fe8

000332f8 <mutex_free>:
   332f8:	b510      	push	{r4, lr}
   332fa:	4604      	mov	r4, r0
   332fc:	b130      	cbz	r0, 3330c <mutex_free+0x14>
   332fe:	6863      	ldr	r3, [r4, #4]
   33300:	06db      	lsls	r3, r3, #27
   33302:	d502      	bpl.n	3330a <mutex_free+0x12>
   33304:	2300      	movs	r3, #0
   33306:	6023      	str	r3, [r4, #0]
   33308:	6063      	str	r3, [r4, #4]
   3330a:	bd10      	pop	{r4, pc}
   3330c:	4b02      	ldr	r3, [pc, #8]	; (33318 <mutex_free+0x20>)
   3330e:	4803      	ldr	r0, [pc, #12]	; (3331c <mutex_free+0x24>)
   33310:	685b      	ldr	r3, [r3, #4]
   33312:	4798      	blx	r3
   33314:	e7f3      	b.n	332fe <mutex_free+0x6>
   33316:	bf00      	nop
   33318:	20000708 	.word	0x20000708
   3331c:	0003be70 	.word	0x0003be70

00033320 <mutex_unlock>:
   33320:	b168      	cbz	r0, 3333e <mutex_unlock+0x1e>
   33322:	6843      	ldr	r3, [r0, #4]
   33324:	b13b      	cbz	r3, 33336 <mutex_unlock+0x16>
   33326:	06db      	lsls	r3, r3, #27
   33328:	d507      	bpl.n	3333a <mutex_unlock+0x1a>
   3332a:	f3bf 8f5f 	dmb	sy
   3332e:	2300      	movs	r3, #0
   33330:	6003      	str	r3, [r0, #0]
   33332:	4618      	mov	r0, r3
   33334:	4770      	bx	lr
   33336:	4803      	ldr	r0, [pc, #12]	; (33344 <mutex_unlock+0x24>)
   33338:	4770      	bx	lr
   3333a:	4803      	ldr	r0, [pc, #12]	; (33348 <mutex_unlock+0x28>)
   3333c:	4770      	bx	lr
   3333e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   33342:	4770      	bx	lr
   33344:	ffff8fea 	.word	0xffff8fea
   33348:	ffff8fe9 	.word	0xffff8fe9

0003334c <mutex_init>:
   3334c:	b510      	push	{r4, lr}
   3334e:	4604      	mov	r4, r0
   33350:	b120      	cbz	r0, 3335c <mutex_init+0x10>
   33352:	2200      	movs	r2, #0
   33354:	2311      	movs	r3, #17
   33356:	6022      	str	r2, [r4, #0]
   33358:	6063      	str	r3, [r4, #4]
   3335a:	bd10      	pop	{r4, pc}
   3335c:	4801      	ldr	r0, [pc, #4]	; (33364 <mutex_init+0x18>)
   3335e:	f7ff ff4d 	bl	331fc <CC_PalAbort>
   33362:	e7f6      	b.n	33352 <mutex_init+0x6>
   33364:	0003be98 	.word	0x0003be98

00033368 <mutex_lock>:
   33368:	b1c0      	cbz	r0, 3339c <mutex_lock+0x34>
   3336a:	6843      	ldr	r3, [r0, #4]
   3336c:	b1a3      	cbz	r3, 33398 <mutex_lock+0x30>
   3336e:	06db      	lsls	r3, r3, #27
   33370:	d510      	bpl.n	33394 <mutex_lock+0x2c>
   33372:	2201      	movs	r2, #1
   33374:	f3bf 8f5b 	dmb	ish
   33378:	e850 3f00 	ldrex	r3, [r0]
   3337c:	e840 2100 	strex	r1, r2, [r0]
   33380:	2900      	cmp	r1, #0
   33382:	d1f9      	bne.n	33378 <mutex_lock+0x10>
   33384:	f3bf 8f5b 	dmb	ish
   33388:	2b01      	cmp	r3, #1
   3338a:	d0f3      	beq.n	33374 <mutex_lock+0xc>
   3338c:	f3bf 8f5f 	dmb	sy
   33390:	2000      	movs	r0, #0
   33392:	4770      	bx	lr
   33394:	4803      	ldr	r0, [pc, #12]	; (333a4 <mutex_lock+0x3c>)
   33396:	4770      	bx	lr
   33398:	4803      	ldr	r0, [pc, #12]	; (333a8 <mutex_lock+0x40>)
   3339a:	4770      	bx	lr
   3339c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   333a0:	4770      	bx	lr
   333a2:	bf00      	nop
   333a4:	ffff8fe9 	.word	0xffff8fe9
   333a8:	ffff8fea 	.word	0xffff8fea

000333ac <nrf_cc3xx_platform_set_mutexes>:
   333ac:	b570      	push	{r4, r5, r6, lr}
   333ae:	e9d0 2300 	ldrd	r2, r3, [r0]
   333b2:	4c13      	ldr	r4, [pc, #76]	; (33400 <nrf_cc3xx_platform_set_mutexes+0x54>)
   333b4:	4d13      	ldr	r5, [pc, #76]	; (33404 <nrf_cc3xx_platform_set_mutexes+0x58>)
   333b6:	e9c4 2300 	strd	r2, r3, [r4]
   333ba:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   333be:	e9c4 6302 	strd	r6, r3, [r4, #8]
   333c2:	4b11      	ldr	r3, [pc, #68]	; (33408 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   333c4:	6808      	ldr	r0, [r1, #0]
   333c6:	6018      	str	r0, [r3, #0]
   333c8:	6848      	ldr	r0, [r1, #4]
   333ca:	6058      	str	r0, [r3, #4]
   333cc:	6888      	ldr	r0, [r1, #8]
   333ce:	6098      	str	r0, [r3, #8]
   333d0:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   333d4:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   333d8:	60de      	str	r6, [r3, #12]
   333da:	6118      	str	r0, [r3, #16]
   333dc:	06cb      	lsls	r3, r1, #27
   333de:	d50d      	bpl.n	333fc <nrf_cc3xx_platform_set_mutexes+0x50>
   333e0:	2300      	movs	r3, #0
   333e2:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   333e6:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   333ea:	f505 7088 	add.w	r0, r5, #272	; 0x110
   333ee:	4790      	blx	r2
   333f0:	6823      	ldr	r3, [r4, #0]
   333f2:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   333f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   333fa:	4718      	bx	r3
   333fc:	bd70      	pop	{r4, r5, r6, pc}
   333fe:	bf00      	nop
   33400:	20000718 	.word	0x20000718
   33404:	20004890 	.word	0x20004890
   33408:	20000728 	.word	0x20000728

0003340c <mbedtls_zeroize_internal>:
   3340c:	b138      	cbz	r0, 3341e <mbedtls_zeroize_internal+0x12>
   3340e:	b131      	cbz	r1, 3341e <mbedtls_zeroize_internal+0x12>
   33410:	4401      	add	r1, r0
   33412:	2200      	movs	r2, #0
   33414:	4603      	mov	r3, r0
   33416:	3001      	adds	r0, #1
   33418:	4281      	cmp	r1, r0
   3341a:	701a      	strb	r2, [r3, #0]
   3341c:	d1fa      	bne.n	33414 <mbedtls_zeroize_internal+0x8>
   3341e:	4770      	bx	lr

00033420 <mbedtls_platform_zeroize>:
   33420:	b138      	cbz	r0, 33432 <mbedtls_platform_zeroize+0x12>
   33422:	b131      	cbz	r1, 33432 <mbedtls_platform_zeroize+0x12>
   33424:	4401      	add	r1, r0
   33426:	2200      	movs	r2, #0
   33428:	4603      	mov	r3, r0
   3342a:	3001      	adds	r0, #1
   3342c:	4288      	cmp	r0, r1
   3342e:	701a      	strb	r2, [r3, #0]
   33430:	d1fa      	bne.n	33428 <mbedtls_platform_zeroize+0x8>
   33432:	4770      	bx	lr

00033434 <block_cipher_df>:
   33434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33438:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   3343c:	b0b1      	sub	sp, #196	; 0xc4
   3343e:	f200 812e 	bhi.w	3369e <block_cipher_df+0x26a>
   33442:	f8df 926c 	ldr.w	r9, [pc, #620]	; 336b0 <block_cipher_df+0x27c>
   33446:	4614      	mov	r4, r2
   33448:	460d      	mov	r5, r1
   3344a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   3344e:	2100      	movs	r1, #0
   33450:	4682      	mov	sl, r0
   33452:	4648      	mov	r0, r9
   33454:	f007 f890 	bl	3a578 <memset>
   33458:	a813      	add	r0, sp, #76	; 0x4c
   3345a:	f001 f9e5 	bl	34828 <cc_mbedtls_aes_init>
   3345e:	2600      	movs	r6, #0
   33460:	4629      	mov	r1, r5
   33462:	2320      	movs	r3, #32
   33464:	ba65      	rev16	r5, r4
   33466:	4622      	mov	r2, r4
   33468:	f109 0018 	add.w	r0, r9, #24
   3346c:	f8a9 5012 	strh.w	r5, [r9, #18]
   33470:	f889 3017 	strb.w	r3, [r9, #23]
   33474:	f8a9 6010 	strh.w	r6, [r9, #16]
   33478:	f007 f843 	bl	3a502 <memcpy>
   3347c:	eb09 0304 	add.w	r3, r9, r4
   33480:	2280      	movs	r2, #128	; 0x80
   33482:	4d88      	ldr	r5, [pc, #544]	; (336a4 <block_cipher_df+0x270>)
   33484:	761a      	strb	r2, [r3, #24]
   33486:	4b88      	ldr	r3, [pc, #544]	; (336a8 <block_cipher_df+0x274>)
   33488:	9503      	str	r5, [sp, #12]
   3348a:	9304      	str	r3, [sp, #16]
   3348c:	a813      	add	r0, sp, #76	; 0x4c
   3348e:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   33492:	a903      	add	r1, sp, #12
   33494:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   33498:	e9cd 5305 	strd	r5, r3, [sp, #20]
   3349c:	f001 f9da 	bl	34854 <cc_mbedtls_aes_setkey_enc>
   334a0:	4680      	mov	r8, r0
   334a2:	2800      	cmp	r0, #0
   334a4:	f040 80da 	bne.w	3365c <block_cipher_df+0x228>
   334a8:	f104 0319 	add.w	r3, r4, #25
   334ac:	9301      	str	r3, [sp, #4]
   334ae:	af07      	add	r7, sp, #28
   334b0:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   334b4:	2210      	movs	r2, #16
   334b6:	2100      	movs	r1, #0
   334b8:	4638      	mov	r0, r7
   334ba:	f007 f85d 	bl	3a578 <memset>
   334be:	4c7b      	ldr	r4, [pc, #492]	; (336ac <block_cipher_df+0x278>)
   334c0:	9d01      	ldr	r5, [sp, #4]
   334c2:	f89d 601d 	ldrb.w	r6, [sp, #29]
   334c6:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   334ca:	f89d e01c 	ldrb.w	lr, [sp, #28]
   334ce:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   334d2:	f89d c01f 	ldrb.w	ip, [sp, #31]
   334d6:	f89d 001e 	ldrb.w	r0, [sp, #30]
   334da:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   334de:	404e      	eors	r6, r1
   334e0:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   334e4:	f88d 601d 	strb.w	r6, [sp, #29]
   334e8:	ea8e 0303 	eor.w	r3, lr, r3
   334ec:	4050      	eors	r0, r2
   334ee:	ea8c 0101 	eor.w	r1, ip, r1
   334f2:	f89d 2020 	ldrb.w	r2, [sp, #32]
   334f6:	f88d 301c 	strb.w	r3, [sp, #28]
   334fa:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   334fe:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   33502:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   33506:	f88d 001e 	strb.w	r0, [sp, #30]
   3350a:	f88d 101f 	strb.w	r1, [sp, #31]
   3350e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   33512:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   33516:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   3351a:	405a      	eors	r2, r3
   3351c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   33520:	f88d 2020 	strb.w	r2, [sp, #32]
   33524:	ea8c 0606 	eor.w	r6, ip, r6
   33528:	4048      	eors	r0, r1
   3352a:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   3352e:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   33532:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   33536:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   3353a:	ea8e 0303 	eor.w	r3, lr, r3
   3353e:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   33542:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   33546:	ea8c 0101 	eor.w	r1, ip, r1
   3354a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   3354e:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   33552:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   33556:	ea82 020c 	eor.w	r2, r2, ip
   3355a:	4073      	eors	r3, r6
   3355c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   33560:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   33564:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   33568:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   3356c:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   33570:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   33574:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   33578:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   3357c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   33580:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   33584:	ea8e 0202 	eor.w	r2, lr, r2
   33588:	4041      	eors	r1, r0
   3358a:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   3358e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   33592:	4073      	eors	r3, r6
   33594:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   33598:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   3359c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   335a0:	ea8c 0000 	eor.w	r0, ip, r0
   335a4:	4056      	eors	r6, r2
   335a6:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   335aa:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   335ae:	463b      	mov	r3, r7
   335b0:	463a      	mov	r2, r7
   335b2:	2101      	movs	r1, #1
   335b4:	a813      	add	r0, sp, #76	; 0x4c
   335b6:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   335ba:	f001 f965 	bl	34888 <cc_mbedtls_aes_crypt_ecb>
   335be:	2d10      	cmp	r5, #16
   335c0:	bf94      	ite	ls
   335c2:	1b6d      	subls	r5, r5, r5
   335c4:	3d10      	subhi	r5, #16
   335c6:	2800      	cmp	r0, #0
   335c8:	d167      	bne.n	3369a <block_cipher_df+0x266>
   335ca:	3410      	adds	r4, #16
   335cc:	2d00      	cmp	r5, #0
   335ce:	f47f af78 	bne.w	334c2 <block_cipher_df+0x8e>
   335d2:	eb0b 0008 	add.w	r0, fp, r8
   335d6:	2210      	movs	r2, #16
   335d8:	4639      	mov	r1, r7
   335da:	f006 ff92 	bl	3a502 <memcpy>
   335de:	f899 3003 	ldrb.w	r3, [r9, #3]
   335e2:	f108 0810 	add.w	r8, r8, #16
   335e6:	3301      	adds	r3, #1
   335e8:	f1b8 0f20 	cmp.w	r8, #32
   335ec:	f889 3003 	strb.w	r3, [r9, #3]
   335f0:	f47f af60 	bne.w	334b4 <block_cipher_df+0x80>
   335f4:	2280      	movs	r2, #128	; 0x80
   335f6:	4659      	mov	r1, fp
   335f8:	a813      	add	r0, sp, #76	; 0x4c
   335fa:	f001 f92b 	bl	34854 <cc_mbedtls_aes_setkey_enc>
   335fe:	4680      	mov	r8, r0
   33600:	bb78      	cbnz	r0, 33662 <block_cipher_df+0x22e>
   33602:	f10a 0520 	add.w	r5, sl, #32
   33606:	4654      	mov	r4, sl
   33608:	ab0f      	add	r3, sp, #60	; 0x3c
   3360a:	461a      	mov	r2, r3
   3360c:	2101      	movs	r1, #1
   3360e:	a813      	add	r0, sp, #76	; 0x4c
   33610:	f001 f93a 	bl	34888 <cc_mbedtls_aes_crypt_ecb>
   33614:	2210      	movs	r2, #16
   33616:	4680      	mov	r8, r0
   33618:	a90f      	add	r1, sp, #60	; 0x3c
   3361a:	4620      	mov	r0, r4
   3361c:	4414      	add	r4, r2
   3361e:	f1b8 0f00 	cmp.w	r8, #0
   33622:	d11e      	bne.n	33662 <block_cipher_df+0x22e>
   33624:	f006 ff6d 	bl	3a502 <memcpy>
   33628:	42ac      	cmp	r4, r5
   3362a:	d1ed      	bne.n	33608 <block_cipher_df+0x1d4>
   3362c:	a813      	add	r0, sp, #76	; 0x4c
   3362e:	f001 f90b 	bl	34848 <cc_mbedtls_aes_free>
   33632:	481f      	ldr	r0, [pc, #124]	; (336b0 <block_cipher_df+0x27c>)
   33634:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   33638:	f7ff fef2 	bl	33420 <mbedtls_platform_zeroize>
   3363c:	4658      	mov	r0, fp
   3363e:	2120      	movs	r1, #32
   33640:	f7ff feee 	bl	33420 <mbedtls_platform_zeroize>
   33644:	a803      	add	r0, sp, #12
   33646:	2110      	movs	r1, #16
   33648:	f7ff feea 	bl	33420 <mbedtls_platform_zeroize>
   3364c:	4638      	mov	r0, r7
   3364e:	2110      	movs	r1, #16
   33650:	f7ff fee6 	bl	33420 <mbedtls_platform_zeroize>
   33654:	4640      	mov	r0, r8
   33656:	b031      	add	sp, #196	; 0xc4
   33658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3365c:	af07      	add	r7, sp, #28
   3365e:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   33662:	a813      	add	r0, sp, #76	; 0x4c
   33664:	f001 f8f0 	bl	34848 <cc_mbedtls_aes_free>
   33668:	4811      	ldr	r0, [pc, #68]	; (336b0 <block_cipher_df+0x27c>)
   3366a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   3366e:	f7ff fed7 	bl	33420 <mbedtls_platform_zeroize>
   33672:	4658      	mov	r0, fp
   33674:	2120      	movs	r1, #32
   33676:	f7ff fed3 	bl	33420 <mbedtls_platform_zeroize>
   3367a:	a803      	add	r0, sp, #12
   3367c:	2110      	movs	r1, #16
   3367e:	f7ff fecf 	bl	33420 <mbedtls_platform_zeroize>
   33682:	4638      	mov	r0, r7
   33684:	2110      	movs	r1, #16
   33686:	f7ff fecb 	bl	33420 <mbedtls_platform_zeroize>
   3368a:	4650      	mov	r0, sl
   3368c:	2120      	movs	r1, #32
   3368e:	f7ff fec7 	bl	33420 <mbedtls_platform_zeroize>
   33692:	4640      	mov	r0, r8
   33694:	b031      	add	sp, #196	; 0xc4
   33696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3369a:	4680      	mov	r8, r0
   3369c:	e7e1      	b.n	33662 <block_cipher_df+0x22e>
   3369e:	f06f 0837 	mvn.w	r8, #55	; 0x37
   336a2:	e7f6      	b.n	33692 <block_cipher_df+0x25e>
   336a4:	03020100 	.word	0x03020100
   336a8:	07060504 	.word	0x07060504
   336ac:	20002d84 	.word	0x20002d84
   336b0:	20002d74 	.word	0x20002d74

000336b4 <ctr_drbg_update_internal>:
   336b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   336b8:	b088      	sub	sp, #32
   336ba:	4604      	mov	r4, r0
   336bc:	2220      	movs	r2, #32
   336be:	460d      	mov	r5, r1
   336c0:	4668      	mov	r0, sp
   336c2:	2100      	movs	r1, #0
   336c4:	eb04 0802 	add.w	r8, r4, r2
   336c8:	f006 ff56 	bl	3a578 <memset>
   336cc:	466e      	mov	r6, sp
   336ce:	7be2      	ldrb	r2, [r4, #15]
   336d0:	3201      	adds	r2, #1
   336d2:	b2d2      	uxtb	r2, r2
   336d4:	73e2      	strb	r2, [r4, #15]
   336d6:	2a00      	cmp	r2, #0
   336d8:	d14d      	bne.n	33776 <ctr_drbg_update_internal+0xc2>
   336da:	7ba2      	ldrb	r2, [r4, #14]
   336dc:	3201      	adds	r2, #1
   336de:	b2d2      	uxtb	r2, r2
   336e0:	73a2      	strb	r2, [r4, #14]
   336e2:	2a00      	cmp	r2, #0
   336e4:	d147      	bne.n	33776 <ctr_drbg_update_internal+0xc2>
   336e6:	7b63      	ldrb	r3, [r4, #13]
   336e8:	3301      	adds	r3, #1
   336ea:	b2db      	uxtb	r3, r3
   336ec:	7363      	strb	r3, [r4, #13]
   336ee:	2b00      	cmp	r3, #0
   336f0:	d141      	bne.n	33776 <ctr_drbg_update_internal+0xc2>
   336f2:	7b23      	ldrb	r3, [r4, #12]
   336f4:	3301      	adds	r3, #1
   336f6:	b2db      	uxtb	r3, r3
   336f8:	7323      	strb	r3, [r4, #12]
   336fa:	2b00      	cmp	r3, #0
   336fc:	d13b      	bne.n	33776 <ctr_drbg_update_internal+0xc2>
   336fe:	7ae3      	ldrb	r3, [r4, #11]
   33700:	3301      	adds	r3, #1
   33702:	b2db      	uxtb	r3, r3
   33704:	72e3      	strb	r3, [r4, #11]
   33706:	2b00      	cmp	r3, #0
   33708:	d135      	bne.n	33776 <ctr_drbg_update_internal+0xc2>
   3370a:	7aa3      	ldrb	r3, [r4, #10]
   3370c:	3301      	adds	r3, #1
   3370e:	b2db      	uxtb	r3, r3
   33710:	72a3      	strb	r3, [r4, #10]
   33712:	2b00      	cmp	r3, #0
   33714:	d12f      	bne.n	33776 <ctr_drbg_update_internal+0xc2>
   33716:	7a63      	ldrb	r3, [r4, #9]
   33718:	3301      	adds	r3, #1
   3371a:	b2db      	uxtb	r3, r3
   3371c:	7263      	strb	r3, [r4, #9]
   3371e:	bb53      	cbnz	r3, 33776 <ctr_drbg_update_internal+0xc2>
   33720:	7a23      	ldrb	r3, [r4, #8]
   33722:	3301      	adds	r3, #1
   33724:	b2db      	uxtb	r3, r3
   33726:	7223      	strb	r3, [r4, #8]
   33728:	bb2b      	cbnz	r3, 33776 <ctr_drbg_update_internal+0xc2>
   3372a:	79e3      	ldrb	r3, [r4, #7]
   3372c:	3301      	adds	r3, #1
   3372e:	b2db      	uxtb	r3, r3
   33730:	71e3      	strb	r3, [r4, #7]
   33732:	bb03      	cbnz	r3, 33776 <ctr_drbg_update_internal+0xc2>
   33734:	79a3      	ldrb	r3, [r4, #6]
   33736:	3301      	adds	r3, #1
   33738:	b2db      	uxtb	r3, r3
   3373a:	71a3      	strb	r3, [r4, #6]
   3373c:	b9db      	cbnz	r3, 33776 <ctr_drbg_update_internal+0xc2>
   3373e:	7963      	ldrb	r3, [r4, #5]
   33740:	3301      	adds	r3, #1
   33742:	b2db      	uxtb	r3, r3
   33744:	7163      	strb	r3, [r4, #5]
   33746:	b9b3      	cbnz	r3, 33776 <ctr_drbg_update_internal+0xc2>
   33748:	7923      	ldrb	r3, [r4, #4]
   3374a:	3301      	adds	r3, #1
   3374c:	b2db      	uxtb	r3, r3
   3374e:	7123      	strb	r3, [r4, #4]
   33750:	b98b      	cbnz	r3, 33776 <ctr_drbg_update_internal+0xc2>
   33752:	78e3      	ldrb	r3, [r4, #3]
   33754:	3301      	adds	r3, #1
   33756:	b2db      	uxtb	r3, r3
   33758:	70e3      	strb	r3, [r4, #3]
   3375a:	b963      	cbnz	r3, 33776 <ctr_drbg_update_internal+0xc2>
   3375c:	78a3      	ldrb	r3, [r4, #2]
   3375e:	3301      	adds	r3, #1
   33760:	b2db      	uxtb	r3, r3
   33762:	70a3      	strb	r3, [r4, #2]
   33764:	b93b      	cbnz	r3, 33776 <ctr_drbg_update_internal+0xc2>
   33766:	7863      	ldrb	r3, [r4, #1]
   33768:	3301      	adds	r3, #1
   3376a:	b2db      	uxtb	r3, r3
   3376c:	7063      	strb	r3, [r4, #1]
   3376e:	b913      	cbnz	r3, 33776 <ctr_drbg_update_internal+0xc2>
   33770:	7823      	ldrb	r3, [r4, #0]
   33772:	3301      	adds	r3, #1
   33774:	7023      	strb	r3, [r4, #0]
   33776:	4633      	mov	r3, r6
   33778:	4622      	mov	r2, r4
   3377a:	2101      	movs	r1, #1
   3377c:	4640      	mov	r0, r8
   3377e:	f001 f883 	bl	34888 <cc_mbedtls_aes_crypt_ecb>
   33782:	4607      	mov	r7, r0
   33784:	2800      	cmp	r0, #0
   33786:	d12b      	bne.n	337e0 <ctr_drbg_update_internal+0x12c>
   33788:	3610      	adds	r6, #16
   3378a:	ab08      	add	r3, sp, #32
   3378c:	429e      	cmp	r6, r3
   3378e:	d19e      	bne.n	336ce <ctr_drbg_update_internal+0x1a>
   33790:	9e01      	ldr	r6, [sp, #4]
   33792:	686a      	ldr	r2, [r5, #4]
   33794:	9f00      	ldr	r7, [sp, #0]
   33796:	6829      	ldr	r1, [r5, #0]
   33798:	68ab      	ldr	r3, [r5, #8]
   3379a:	4072      	eors	r2, r6
   3379c:	9e02      	ldr	r6, [sp, #8]
   3379e:	9201      	str	r2, [sp, #4]
   337a0:	4079      	eors	r1, r7
   337a2:	4073      	eors	r3, r6
   337a4:	9100      	str	r1, [sp, #0]
   337a6:	9e03      	ldr	r6, [sp, #12]
   337a8:	68e9      	ldr	r1, [r5, #12]
   337aa:	692a      	ldr	r2, [r5, #16]
   337ac:	9302      	str	r3, [sp, #8]
   337ae:	4071      	eors	r1, r6
   337b0:	9e04      	ldr	r6, [sp, #16]
   337b2:	696b      	ldr	r3, [r5, #20]
   337b4:	9103      	str	r1, [sp, #12]
   337b6:	4056      	eors	r6, r2
   337b8:	9a05      	ldr	r2, [sp, #20]
   337ba:	9604      	str	r6, [sp, #16]
   337bc:	ea83 0102 	eor.w	r1, r3, r2
   337c0:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   337c4:	9d06      	ldr	r5, [sp, #24]
   337c6:	9105      	str	r1, [sp, #20]
   337c8:	4055      	eors	r5, r2
   337ca:	9a07      	ldr	r2, [sp, #28]
   337cc:	4640      	mov	r0, r8
   337ce:	4053      	eors	r3, r2
   337d0:	4669      	mov	r1, sp
   337d2:	2280      	movs	r2, #128	; 0x80
   337d4:	e9cd 5306 	strd	r5, r3, [sp, #24]
   337d8:	f001 f83c 	bl	34854 <cc_mbedtls_aes_setkey_enc>
   337dc:	4607      	mov	r7, r0
   337de:	b138      	cbz	r0, 337f0 <ctr_drbg_update_internal+0x13c>
   337e0:	4668      	mov	r0, sp
   337e2:	2120      	movs	r1, #32
   337e4:	f7ff fe1c 	bl	33420 <mbedtls_platform_zeroize>
   337e8:	4638      	mov	r0, r7
   337ea:	b008      	add	sp, #32
   337ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   337f0:	2210      	movs	r2, #16
   337f2:	4620      	mov	r0, r4
   337f4:	eb0d 0102 	add.w	r1, sp, r2
   337f8:	f006 fe83 	bl	3a502 <memcpy>
   337fc:	e7f0      	b.n	337e0 <ctr_drbg_update_internal+0x12c>
   337fe:	bf00      	nop

00033800 <mbedtls_ctr_drbg_reseed_internal>:
   33800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   33804:	4604      	mov	r4, r0
   33806:	6980      	ldr	r0, [r0, #24]
   33808:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   3380c:	d852      	bhi.n	338b4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   3380e:	461d      	mov	r5, r3
   33810:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   33814:	42ab      	cmp	r3, r5
   33816:	d34d      	bcc.n	338b4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   33818:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   3381c:	1a18      	subs	r0, r3, r0
   3381e:	4290      	cmp	r0, r2
   33820:	4616      	mov	r6, r2
   33822:	d347      	bcc.n	338b4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   33824:	f8df 9098 	ldr.w	r9, [pc, #152]	; 338c0 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   33828:	f44f 72c0 	mov.w	r2, #384	; 0x180
   3382c:	460f      	mov	r7, r1
   3382e:	4648      	mov	r0, r9
   33830:	2100      	movs	r1, #0
   33832:	f006 fea1 	bl	3a578 <memset>
   33836:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   3383a:	69a2      	ldr	r2, [r4, #24]
   3383c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   33840:	4649      	mov	r1, r9
   33842:	4798      	blx	r3
   33844:	2800      	cmp	r0, #0
   33846:	d138      	bne.n	338ba <mbedtls_ctr_drbg_reseed_internal+0xba>
   33848:	f8d4 8018 	ldr.w	r8, [r4, #24]
   3384c:	b13d      	cbz	r5, 3385e <mbedtls_ctr_drbg_reseed_internal+0x5e>
   3384e:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   33852:	462a      	mov	r2, r5
   33854:	eb09 0108 	add.w	r1, r9, r8
   33858:	4798      	blx	r3
   3385a:	bb70      	cbnz	r0, 338ba <mbedtls_ctr_drbg_reseed_internal+0xba>
   3385c:	44a8      	add	r8, r5
   3385e:	b107      	cbz	r7, 33862 <mbedtls_ctr_drbg_reseed_internal+0x62>
   33860:	b9c6      	cbnz	r6, 33894 <mbedtls_ctr_drbg_reseed_internal+0x94>
   33862:	4917      	ldr	r1, [pc, #92]	; (338c0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   33864:	4642      	mov	r2, r8
   33866:	4608      	mov	r0, r1
   33868:	f7ff fde4 	bl	33434 <block_cipher_df>
   3386c:	4605      	mov	r5, r0
   3386e:	b138      	cbz	r0, 33880 <mbedtls_ctr_drbg_reseed_internal+0x80>
   33870:	4813      	ldr	r0, [pc, #76]	; (338c0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   33872:	f44f 71c0 	mov.w	r1, #384	; 0x180
   33876:	f7ff fdd3 	bl	33420 <mbedtls_platform_zeroize>
   3387a:	4628      	mov	r0, r5
   3387c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   33880:	490f      	ldr	r1, [pc, #60]	; (338c0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   33882:	4620      	mov	r0, r4
   33884:	f7ff ff16 	bl	336b4 <ctr_drbg_update_internal>
   33888:	4605      	mov	r5, r0
   3388a:	2800      	cmp	r0, #0
   3388c:	d1f0      	bne.n	33870 <mbedtls_ctr_drbg_reseed_internal+0x70>
   3388e:	2301      	movs	r3, #1
   33890:	6123      	str	r3, [r4, #16]
   33892:	e7ed      	b.n	33870 <mbedtls_ctr_drbg_reseed_internal+0x70>
   33894:	4639      	mov	r1, r7
   33896:	eb09 0008 	add.w	r0, r9, r8
   3389a:	4632      	mov	r2, r6
   3389c:	f006 fe31 	bl	3a502 <memcpy>
   338a0:	4907      	ldr	r1, [pc, #28]	; (338c0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   338a2:	44b0      	add	r8, r6
   338a4:	4642      	mov	r2, r8
   338a6:	4608      	mov	r0, r1
   338a8:	f7ff fdc4 	bl	33434 <block_cipher_df>
   338ac:	4605      	mov	r5, r0
   338ae:	2800      	cmp	r0, #0
   338b0:	d1de      	bne.n	33870 <mbedtls_ctr_drbg_reseed_internal+0x70>
   338b2:	e7e5      	b.n	33880 <mbedtls_ctr_drbg_reseed_internal+0x80>
   338b4:	f06f 0537 	mvn.w	r5, #55	; 0x37
   338b8:	e7df      	b.n	3387a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   338ba:	f06f 0533 	mvn.w	r5, #51	; 0x33
   338be:	e7dc      	b.n	3387a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   338c0:	20002f14 	.word	0x20002f14

000338c4 <cc_mbedtls_ctr_drbg_init>:
   338c4:	b510      	push	{r4, lr}
   338c6:	22a4      	movs	r2, #164	; 0xa4
   338c8:	4604      	mov	r4, r0
   338ca:	2100      	movs	r1, #0
   338cc:	f006 fe54 	bl	3a578 <memset>
   338d0:	4b06      	ldr	r3, [pc, #24]	; (338ec <cc_mbedtls_ctr_drbg_init+0x28>)
   338d2:	f04f 31ff 	mov.w	r1, #4294967295
   338d6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   338da:	6121      	str	r1, [r4, #16]
   338dc:	61e2      	str	r2, [r4, #28]
   338de:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   338e2:	681b      	ldr	r3, [r3, #0]
   338e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   338e8:	4718      	bx	r3
   338ea:	bf00      	nop
   338ec:	2000076c 	.word	0x2000076c

000338f0 <cc_mbedtls_ctr_drbg_seed>:
   338f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   338f4:	b085      	sub	sp, #20
   338f6:	4605      	mov	r5, r0
   338f8:	460f      	mov	r7, r1
   338fa:	4616      	mov	r6, r2
   338fc:	4668      	mov	r0, sp
   338fe:	2210      	movs	r2, #16
   33900:	2100      	movs	r1, #0
   33902:	4699      	mov	r9, r3
   33904:	f006 fe38 	bl	3a578 <memset>
   33908:	4b1d      	ldr	r3, [pc, #116]	; (33980 <cc_mbedtls_ctr_drbg_seed+0x90>)
   3390a:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   3390e:	681b      	ldr	r3, [r3, #0]
   33910:	4640      	mov	r0, r8
   33912:	4798      	blx	r3
   33914:	b120      	cbz	r0, 33920 <cc_mbedtls_ctr_drbg_seed+0x30>
   33916:	4604      	mov	r4, r0
   33918:	4620      	mov	r0, r4
   3391a:	b005      	add	sp, #20
   3391c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   33920:	f105 0420 	add.w	r4, r5, #32
   33924:	4620      	mov	r0, r4
   33926:	f000 ff7f 	bl	34828 <cc_mbedtls_aes_init>
   3392a:	69aa      	ldr	r2, [r5, #24]
   3392c:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   33930:	692e      	ldr	r6, [r5, #16]
   33932:	b9e2      	cbnz	r2, 3396e <cc_mbedtls_ctr_drbg_seed+0x7e>
   33934:	2220      	movs	r2, #32
   33936:	2e00      	cmp	r6, #0
   33938:	61aa      	str	r2, [r5, #24]
   3393a:	db1f      	blt.n	3397c <cc_mbedtls_ctr_drbg_seed+0x8c>
   3393c:	4620      	mov	r0, r4
   3393e:	4669      	mov	r1, sp
   33940:	2280      	movs	r2, #128	; 0x80
   33942:	f000 ff87 	bl	34854 <cc_mbedtls_aes_setkey_enc>
   33946:	4604      	mov	r4, r0
   33948:	b930      	cbnz	r0, 33958 <cc_mbedtls_ctr_drbg_seed+0x68>
   3394a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   3394c:	4633      	mov	r3, r6
   3394e:	4649      	mov	r1, r9
   33950:	4628      	mov	r0, r5
   33952:	f7ff ff55 	bl	33800 <mbedtls_ctr_drbg_reseed_internal>
   33956:	4604      	mov	r4, r0
   33958:	4b0a      	ldr	r3, [pc, #40]	; (33984 <cc_mbedtls_ctr_drbg_seed+0x94>)
   3395a:	4640      	mov	r0, r8
   3395c:	681b      	ldr	r3, [r3, #0]
   3395e:	4798      	blx	r3
   33960:	2800      	cmp	r0, #0
   33962:	bf18      	it	ne
   33964:	4604      	movne	r4, r0
   33966:	4620      	mov	r0, r4
   33968:	b005      	add	sp, #20
   3396a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3396e:	2e00      	cmp	r6, #0
   33970:	dae4      	bge.n	3393c <cc_mbedtls_ctr_drbg_seed+0x4c>
   33972:	2a17      	cmp	r2, #23
   33974:	d802      	bhi.n	3397c <cc_mbedtls_ctr_drbg_seed+0x8c>
   33976:	1c53      	adds	r3, r2, #1
   33978:	085e      	lsrs	r6, r3, #1
   3397a:	e7df      	b.n	3393c <cc_mbedtls_ctr_drbg_seed+0x4c>
   3397c:	2600      	movs	r6, #0
   3397e:	e7dd      	b.n	3393c <cc_mbedtls_ctr_drbg_seed+0x4c>
   33980:	20000770 	.word	0x20000770
   33984:	20000774 	.word	0x20000774

00033988 <cc_mbedtls_ctr_drbg_random_with_add>:
   33988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3398c:	b08d      	sub	sp, #52	; 0x34
   3398e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   33992:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   33996:	f200 80e4 	bhi.w	33b62 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   3399a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   3399e:	f200 80dd 	bhi.w	33b5c <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   339a2:	4604      	mov	r4, r0
   339a4:	4615      	mov	r5, r2
   339a6:	460e      	mov	r6, r1
   339a8:	2220      	movs	r2, #32
   339aa:	2100      	movs	r1, #0
   339ac:	a804      	add	r0, sp, #16
   339ae:	461f      	mov	r7, r3
   339b0:	f006 fde2 	bl	3a578 <memset>
   339b4:	4b6c      	ldr	r3, [pc, #432]	; (33b68 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   339b6:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   339ba:	681b      	ldr	r3, [r3, #0]
   339bc:	4648      	mov	r0, r9
   339be:	4798      	blx	r3
   339c0:	4683      	mov	fp, r0
   339c2:	2800      	cmp	r0, #0
   339c4:	f040 8093 	bne.w	33aee <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   339c8:	6922      	ldr	r2, [r4, #16]
   339ca:	69e3      	ldr	r3, [r4, #28]
   339cc:	429a      	cmp	r2, r3
   339ce:	f300 8092 	bgt.w	33af6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   339d2:	6963      	ldr	r3, [r4, #20]
   339d4:	2b00      	cmp	r3, #0
   339d6:	f040 808e 	bne.w	33af6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   339da:	f1b8 0f00 	cmp.w	r8, #0
   339de:	f040 80a9 	bne.w	33b34 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   339e2:	f8df a188 	ldr.w	sl, [pc, #392]	; 33b6c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   339e6:	466f      	mov	r7, sp
   339e8:	2d00      	cmp	r5, #0
   339ea:	f000 8098 	beq.w	33b1e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   339ee:	f104 0820 	add.w	r8, r4, #32
   339f2:	466f      	mov	r7, sp
   339f4:	e00e      	b.n	33a14 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   339f6:	2d10      	cmp	r5, #16
   339f8:	46ab      	mov	fp, r5
   339fa:	bf28      	it	cs
   339fc:	f04f 0b10 	movcs.w	fp, #16
   33a00:	4630      	mov	r0, r6
   33a02:	465a      	mov	r2, fp
   33a04:	4639      	mov	r1, r7
   33a06:	f006 fd7c 	bl	3a502 <memcpy>
   33a0a:	ebb5 050b 	subs.w	r5, r5, fp
   33a0e:	445e      	add	r6, fp
   33a10:	f000 8085 	beq.w	33b1e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   33a14:	7be3      	ldrb	r3, [r4, #15]
   33a16:	3301      	adds	r3, #1
   33a18:	b2db      	uxtb	r3, r3
   33a1a:	73e3      	strb	r3, [r4, #15]
   33a1c:	2b00      	cmp	r3, #0
   33a1e:	d14d      	bne.n	33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a20:	7ba3      	ldrb	r3, [r4, #14]
   33a22:	3301      	adds	r3, #1
   33a24:	b2db      	uxtb	r3, r3
   33a26:	73a3      	strb	r3, [r4, #14]
   33a28:	2b00      	cmp	r3, #0
   33a2a:	d147      	bne.n	33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a2c:	7b63      	ldrb	r3, [r4, #13]
   33a2e:	3301      	adds	r3, #1
   33a30:	b2db      	uxtb	r3, r3
   33a32:	7363      	strb	r3, [r4, #13]
   33a34:	2b00      	cmp	r3, #0
   33a36:	d141      	bne.n	33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a38:	7b23      	ldrb	r3, [r4, #12]
   33a3a:	3301      	adds	r3, #1
   33a3c:	b2db      	uxtb	r3, r3
   33a3e:	7323      	strb	r3, [r4, #12]
   33a40:	2b00      	cmp	r3, #0
   33a42:	d13b      	bne.n	33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a44:	7ae3      	ldrb	r3, [r4, #11]
   33a46:	3301      	adds	r3, #1
   33a48:	b2db      	uxtb	r3, r3
   33a4a:	72e3      	strb	r3, [r4, #11]
   33a4c:	2b00      	cmp	r3, #0
   33a4e:	d135      	bne.n	33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a50:	7aa3      	ldrb	r3, [r4, #10]
   33a52:	3301      	adds	r3, #1
   33a54:	b2db      	uxtb	r3, r3
   33a56:	72a3      	strb	r3, [r4, #10]
   33a58:	2b00      	cmp	r3, #0
   33a5a:	d12f      	bne.n	33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a5c:	7a63      	ldrb	r3, [r4, #9]
   33a5e:	3301      	adds	r3, #1
   33a60:	b2db      	uxtb	r3, r3
   33a62:	7263      	strb	r3, [r4, #9]
   33a64:	bb53      	cbnz	r3, 33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a66:	7a23      	ldrb	r3, [r4, #8]
   33a68:	3301      	adds	r3, #1
   33a6a:	b2db      	uxtb	r3, r3
   33a6c:	7223      	strb	r3, [r4, #8]
   33a6e:	bb2b      	cbnz	r3, 33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a70:	79e3      	ldrb	r3, [r4, #7]
   33a72:	3301      	adds	r3, #1
   33a74:	b2db      	uxtb	r3, r3
   33a76:	71e3      	strb	r3, [r4, #7]
   33a78:	bb03      	cbnz	r3, 33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a7a:	79a3      	ldrb	r3, [r4, #6]
   33a7c:	3301      	adds	r3, #1
   33a7e:	b2db      	uxtb	r3, r3
   33a80:	71a3      	strb	r3, [r4, #6]
   33a82:	b9db      	cbnz	r3, 33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a84:	7963      	ldrb	r3, [r4, #5]
   33a86:	3301      	adds	r3, #1
   33a88:	b2db      	uxtb	r3, r3
   33a8a:	7163      	strb	r3, [r4, #5]
   33a8c:	b9b3      	cbnz	r3, 33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a8e:	7923      	ldrb	r3, [r4, #4]
   33a90:	3301      	adds	r3, #1
   33a92:	b2db      	uxtb	r3, r3
   33a94:	7123      	strb	r3, [r4, #4]
   33a96:	b98b      	cbnz	r3, 33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33a98:	78e3      	ldrb	r3, [r4, #3]
   33a9a:	3301      	adds	r3, #1
   33a9c:	b2db      	uxtb	r3, r3
   33a9e:	70e3      	strb	r3, [r4, #3]
   33aa0:	b963      	cbnz	r3, 33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33aa2:	78a3      	ldrb	r3, [r4, #2]
   33aa4:	3301      	adds	r3, #1
   33aa6:	b2db      	uxtb	r3, r3
   33aa8:	70a3      	strb	r3, [r4, #2]
   33aaa:	b93b      	cbnz	r3, 33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33aac:	7863      	ldrb	r3, [r4, #1]
   33aae:	3301      	adds	r3, #1
   33ab0:	b2db      	uxtb	r3, r3
   33ab2:	7063      	strb	r3, [r4, #1]
   33ab4:	b913      	cbnz	r3, 33abc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   33ab6:	7823      	ldrb	r3, [r4, #0]
   33ab8:	3301      	adds	r3, #1
   33aba:	7023      	strb	r3, [r4, #0]
   33abc:	463b      	mov	r3, r7
   33abe:	4622      	mov	r2, r4
   33ac0:	2101      	movs	r1, #1
   33ac2:	4640      	mov	r0, r8
   33ac4:	f000 fee0 	bl	34888 <cc_mbedtls_aes_crypt_ecb>
   33ac8:	4683      	mov	fp, r0
   33aca:	2800      	cmp	r0, #0
   33acc:	d093      	beq.n	339f6 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   33ace:	f8da 3000 	ldr.w	r3, [sl]
   33ad2:	4648      	mov	r0, r9
   33ad4:	4798      	blx	r3
   33ad6:	2120      	movs	r1, #32
   33ad8:	4603      	mov	r3, r0
   33ada:	a804      	add	r0, sp, #16
   33adc:	2b00      	cmp	r3, #0
   33ade:	bf18      	it	ne
   33ae0:	469b      	movne	fp, r3
   33ae2:	f7ff fc9d 	bl	33420 <mbedtls_platform_zeroize>
   33ae6:	4638      	mov	r0, r7
   33ae8:	2110      	movs	r1, #16
   33aea:	f7ff fc99 	bl	33420 <mbedtls_platform_zeroize>
   33aee:	4658      	mov	r0, fp
   33af0:	b00d      	add	sp, #52	; 0x34
   33af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33af6:	4642      	mov	r2, r8
   33af8:	4639      	mov	r1, r7
   33afa:	2300      	movs	r3, #0
   33afc:	4620      	mov	r0, r4
   33afe:	f7ff fe7f 	bl	33800 <mbedtls_ctr_drbg_reseed_internal>
   33b02:	f8df a068 	ldr.w	sl, [pc, #104]	; 33b6c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   33b06:	2800      	cmp	r0, #0
   33b08:	f43f af6d 	beq.w	339e6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   33b0c:	f8da 3000 	ldr.w	r3, [sl]
   33b10:	4648      	mov	r0, r9
   33b12:	4798      	blx	r3
   33b14:	4683      	mov	fp, r0
   33b16:	2800      	cmp	r0, #0
   33b18:	f43f af65 	beq.w	339e6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   33b1c:	e7e7      	b.n	33aee <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   33b1e:	a904      	add	r1, sp, #16
   33b20:	4620      	mov	r0, r4
   33b22:	f7ff fdc7 	bl	336b4 <ctr_drbg_update_internal>
   33b26:	4683      	mov	fp, r0
   33b28:	2800      	cmp	r0, #0
   33b2a:	d1d0      	bne.n	33ace <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   33b2c:	6923      	ldr	r3, [r4, #16]
   33b2e:	3301      	adds	r3, #1
   33b30:	6123      	str	r3, [r4, #16]
   33b32:	e7cc      	b.n	33ace <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   33b34:	4642      	mov	r2, r8
   33b36:	4639      	mov	r1, r7
   33b38:	a804      	add	r0, sp, #16
   33b3a:	f7ff fc7b 	bl	33434 <block_cipher_df>
   33b3e:	4683      	mov	fp, r0
   33b40:	b118      	cbz	r0, 33b4a <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   33b42:	f8df a028 	ldr.w	sl, [pc, #40]	; 33b6c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   33b46:	466f      	mov	r7, sp
   33b48:	e7c1      	b.n	33ace <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   33b4a:	a904      	add	r1, sp, #16
   33b4c:	4620      	mov	r0, r4
   33b4e:	f7ff fdb1 	bl	336b4 <ctr_drbg_update_internal>
   33b52:	4683      	mov	fp, r0
   33b54:	2800      	cmp	r0, #0
   33b56:	f43f af44 	beq.w	339e2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   33b5a:	e7f2      	b.n	33b42 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   33b5c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   33b60:	e7c5      	b.n	33aee <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   33b62:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   33b66:	e7c2      	b.n	33aee <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   33b68:	20000770 	.word	0x20000770
   33b6c:	20000774 	.word	0x20000774

00033b70 <entropy_update>:
   33b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33b74:	2b20      	cmp	r3, #32
   33b76:	b08b      	sub	sp, #44	; 0x2c
   33b78:	461d      	mov	r5, r3
   33b7a:	4606      	mov	r6, r0
   33b7c:	4689      	mov	r9, r1
   33b7e:	4690      	mov	r8, r2
   33b80:	d826      	bhi.n	33bd0 <entropy_update+0x60>
   33b82:	b2db      	uxtb	r3, r3
   33b84:	af02      	add	r7, sp, #8
   33b86:	6831      	ldr	r1, [r6, #0]
   33b88:	f88d 9004 	strb.w	r9, [sp, #4]
   33b8c:	f88d 3005 	strb.w	r3, [sp, #5]
   33b90:	f106 0904 	add.w	r9, r6, #4
   33b94:	b921      	cbnz	r1, 33ba0 <entropy_update+0x30>
   33b96:	4648      	mov	r0, r9
   33b98:	f000 feba 	bl	34910 <cc_mbedtls_sha256_starts>
   33b9c:	4604      	mov	r4, r0
   33b9e:	b940      	cbnz	r0, 33bb2 <entropy_update+0x42>
   33ba0:	2301      	movs	r3, #1
   33ba2:	6033      	str	r3, [r6, #0]
   33ba4:	2202      	movs	r2, #2
   33ba6:	a901      	add	r1, sp, #4
   33ba8:	4648      	mov	r0, r9
   33baa:	f000 fec5 	bl	34938 <cc_mbedtls_sha256_update>
   33bae:	4604      	mov	r4, r0
   33bb0:	b138      	cbz	r0, 33bc2 <entropy_update+0x52>
   33bb2:	4638      	mov	r0, r7
   33bb4:	2120      	movs	r1, #32
   33bb6:	f7ff fc33 	bl	33420 <mbedtls_platform_zeroize>
   33bba:	4620      	mov	r0, r4
   33bbc:	b00b      	add	sp, #44	; 0x2c
   33bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   33bc2:	462a      	mov	r2, r5
   33bc4:	4641      	mov	r1, r8
   33bc6:	4648      	mov	r0, r9
   33bc8:	f000 feb6 	bl	34938 <cc_mbedtls_sha256_update>
   33bcc:	4604      	mov	r4, r0
   33bce:	e7f0      	b.n	33bb2 <entropy_update+0x42>
   33bd0:	af02      	add	r7, sp, #8
   33bd2:	4619      	mov	r1, r3
   33bd4:	4610      	mov	r0, r2
   33bd6:	2300      	movs	r3, #0
   33bd8:	463a      	mov	r2, r7
   33bda:	f000 ffad 	bl	34b38 <cc_mbedtls_sha256>
   33bde:	4604      	mov	r4, r0
   33be0:	2800      	cmp	r0, #0
   33be2:	d1e6      	bne.n	33bb2 <entropy_update+0x42>
   33be4:	2320      	movs	r3, #32
   33be6:	461d      	mov	r5, r3
   33be8:	46b8      	mov	r8, r7
   33bea:	e7cc      	b.n	33b86 <entropy_update+0x16>

00033bec <entropy_gather_internal.part.0>:
   33bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   33bee:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   33bf2:	b0a7      	sub	sp, #156	; 0x9c
   33bf4:	2b00      	cmp	r3, #0
   33bf6:	bfd8      	it	le
   33bf8:	ae02      	addle	r6, sp, #8
   33bfa:	dd2c      	ble.n	33c56 <entropy_gather_internal.part.0+0x6a>
   33bfc:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   33c00:	4605      	mov	r5, r0
   33c02:	2300      	movs	r3, #0
   33c04:	ae02      	add	r6, sp, #8
   33c06:	9301      	str	r3, [sp, #4]
   33c08:	f1a4 0701 	sub.w	r7, r4, #1
   33c0c:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   33c10:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   33c14:	4631      	mov	r1, r6
   33c16:	ab01      	add	r3, sp, #4
   33c18:	2290      	movs	r2, #144	; 0x90
   33c1a:	47a0      	blx	r4
   33c1c:	fab7 f787 	clz	r7, r7
   33c20:	097f      	lsrs	r7, r7, #5
   33c22:	4604      	mov	r4, r0
   33c24:	b910      	cbnz	r0, 33c2c <entropy_gather_internal.part.0+0x40>
   33c26:	9b01      	ldr	r3, [sp, #4]
   33c28:	b93b      	cbnz	r3, 33c3a <entropy_gather_internal.part.0+0x4e>
   33c2a:	b1a7      	cbz	r7, 33c56 <entropy_gather_internal.part.0+0x6a>
   33c2c:	4630      	mov	r0, r6
   33c2e:	2190      	movs	r1, #144	; 0x90
   33c30:	f7ff fbf6 	bl	33420 <mbedtls_platform_zeroize>
   33c34:	4620      	mov	r0, r4
   33c36:	b027      	add	sp, #156	; 0x9c
   33c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33c3a:	4601      	mov	r1, r0
   33c3c:	4632      	mov	r2, r6
   33c3e:	4628      	mov	r0, r5
   33c40:	f7ff ff96 	bl	33b70 <entropy_update>
   33c44:	b950      	cbnz	r0, 33c5c <entropy_gather_internal.part.0+0x70>
   33c46:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   33c4a:	9a01      	ldr	r2, [sp, #4]
   33c4c:	4413      	add	r3, r2
   33c4e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   33c52:	2f00      	cmp	r7, #0
   33c54:	d1ea      	bne.n	33c2c <entropy_gather_internal.part.0+0x40>
   33c56:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   33c5a:	e7e7      	b.n	33c2c <entropy_gather_internal.part.0+0x40>
   33c5c:	4604      	mov	r4, r0
   33c5e:	4620      	mov	r0, r4
   33c60:	b027      	add	sp, #156	; 0x9c
   33c62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00033c64 <cc_mbedtls_entropy_init>:
   33c64:	b570      	push	{r4, r5, r6, lr}
   33c66:	2500      	movs	r5, #0
   33c68:	4604      	mov	r4, r0
   33c6a:	4629      	mov	r1, r5
   33c6c:	2214      	movs	r2, #20
   33c6e:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   33c72:	30f8      	adds	r0, #248	; 0xf8
   33c74:	f006 fc80 	bl	3a578 <memset>
   33c78:	4b15      	ldr	r3, [pc, #84]	; (33cd0 <cc_mbedtls_entropy_init+0x6c>)
   33c7a:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   33c7e:	681b      	ldr	r3, [r3, #0]
   33c80:	4630      	mov	r0, r6
   33c82:	4798      	blx	r3
   33c84:	4620      	mov	r0, r4
   33c86:	f840 5b04 	str.w	r5, [r0], #4
   33c8a:	f000 fe27 	bl	348dc <cc_mbedtls_sha256_init>
   33c8e:	4b11      	ldr	r3, [pc, #68]	; (33cd4 <cc_mbedtls_entropy_init+0x70>)
   33c90:	4630      	mov	r0, r6
   33c92:	681b      	ldr	r3, [r3, #0]
   33c94:	4798      	blx	r3
   33c96:	b9c8      	cbnz	r0, 33ccc <cc_mbedtls_entropy_init+0x68>
   33c98:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   33c9c:	42ab      	cmp	r3, r5
   33c9e:	dc0f      	bgt.n	33cc0 <cc_mbedtls_entropy_init+0x5c>
   33ca0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   33ca4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   33ca8:	490b      	ldr	r1, [pc, #44]	; (33cd8 <cc_mbedtls_entropy_init+0x74>)
   33caa:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   33cae:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   33cb2:	3301      	adds	r3, #1
   33cb4:	2020      	movs	r0, #32
   33cb6:	2101      	movs	r1, #1
   33cb8:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   33cbc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   33cc0:	4b06      	ldr	r3, [pc, #24]	; (33cdc <cc_mbedtls_entropy_init+0x78>)
   33cc2:	4630      	mov	r0, r6
   33cc4:	681b      	ldr	r3, [r3, #0]
   33cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   33cca:	4718      	bx	r3
   33ccc:	bd70      	pop	{r4, r5, r6, pc}
   33cce:	bf00      	nop
   33cd0:	2000076c 	.word	0x2000076c
   33cd4:	20000770 	.word	0x20000770
   33cd8:	0003472d 	.word	0x0003472d
   33cdc:	20000774 	.word	0x20000774

00033ce0 <cc_mbedtls_entropy_func>:
   33ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33ce4:	2a20      	cmp	r2, #32
   33ce6:	b088      	sub	sp, #32
   33ce8:	d876      	bhi.n	33dd8 <cc_mbedtls_entropy_func+0xf8>
   33cea:	4b3d      	ldr	r3, [pc, #244]	; (33de0 <cc_mbedtls_entropy_func+0x100>)
   33cec:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   33cf0:	681b      	ldr	r3, [r3, #0]
   33cf2:	4604      	mov	r4, r0
   33cf4:	4648      	mov	r0, r9
   33cf6:	4617      	mov	r7, r2
   33cf8:	4688      	mov	r8, r1
   33cfa:	4798      	blx	r3
   33cfc:	4605      	mov	r5, r0
   33cfe:	bba0      	cbnz	r0, 33d6a <cc_mbedtls_entropy_func+0x8a>
   33d00:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   33d04:	f240 1601 	movw	r6, #257	; 0x101
   33d08:	e001      	b.n	33d0e <cc_mbedtls_entropy_func+0x2e>
   33d0a:	3e01      	subs	r6, #1
   33d0c:	d060      	beq.n	33dd0 <cc_mbedtls_entropy_func+0xf0>
   33d0e:	4620      	mov	r0, r4
   33d10:	b37b      	cbz	r3, 33d72 <cc_mbedtls_entropy_func+0x92>
   33d12:	f7ff ff6b 	bl	33bec <entropy_gather_internal.part.0>
   33d16:	4605      	mov	r5, r0
   33d18:	bb68      	cbnz	r0, 33d76 <cc_mbedtls_entropy_func+0x96>
   33d1a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   33d1e:	2b00      	cmp	r3, #0
   33d20:	ddf3      	ble.n	33d0a <cc_mbedtls_entropy_func+0x2a>
   33d22:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   33d26:	4290      	cmp	r0, r2
   33d28:	d3ef      	bcc.n	33d0a <cc_mbedtls_entropy_func+0x2a>
   33d2a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   33d2e:	2a01      	cmp	r2, #1
   33d30:	d1eb      	bne.n	33d0a <cc_mbedtls_entropy_func+0x2a>
   33d32:	281f      	cmp	r0, #31
   33d34:	d9e9      	bls.n	33d0a <cc_mbedtls_entropy_func+0x2a>
   33d36:	466e      	mov	r6, sp
   33d38:	4629      	mov	r1, r5
   33d3a:	2220      	movs	r2, #32
   33d3c:	4630      	mov	r0, r6
   33d3e:	f104 0a04 	add.w	sl, r4, #4
   33d42:	f006 fc19 	bl	3a578 <memset>
   33d46:	4631      	mov	r1, r6
   33d48:	4650      	mov	r0, sl
   33d4a:	f000 fe1f 	bl	3498c <cc_mbedtls_sha256_finish>
   33d4e:	4605      	mov	r5, r0
   33d50:	b198      	cbz	r0, 33d7a <cc_mbedtls_entropy_func+0x9a>
   33d52:	4630      	mov	r0, r6
   33d54:	2120      	movs	r1, #32
   33d56:	f7ff fb63 	bl	33420 <mbedtls_platform_zeroize>
   33d5a:	4b22      	ldr	r3, [pc, #136]	; (33de4 <cc_mbedtls_entropy_func+0x104>)
   33d5c:	4648      	mov	r0, r9
   33d5e:	681b      	ldr	r3, [r3, #0]
   33d60:	4798      	blx	r3
   33d62:	2800      	cmp	r0, #0
   33d64:	bf18      	it	ne
   33d66:	f06f 051d 	mvnne.w	r5, #29
   33d6a:	4628      	mov	r0, r5
   33d6c:	b008      	add	sp, #32
   33d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33d72:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   33d76:	466e      	mov	r6, sp
   33d78:	e7eb      	b.n	33d52 <cc_mbedtls_entropy_func+0x72>
   33d7a:	4650      	mov	r0, sl
   33d7c:	f000 fdc2 	bl	34904 <cc_mbedtls_sha256_free>
   33d80:	4650      	mov	r0, sl
   33d82:	f000 fdab 	bl	348dc <cc_mbedtls_sha256_init>
   33d86:	4629      	mov	r1, r5
   33d88:	4650      	mov	r0, sl
   33d8a:	f000 fdc1 	bl	34910 <cc_mbedtls_sha256_starts>
   33d8e:	4605      	mov	r5, r0
   33d90:	2800      	cmp	r0, #0
   33d92:	d1de      	bne.n	33d52 <cc_mbedtls_entropy_func+0x72>
   33d94:	4650      	mov	r0, sl
   33d96:	2220      	movs	r2, #32
   33d98:	4631      	mov	r1, r6
   33d9a:	f000 fdcd 	bl	34938 <cc_mbedtls_sha256_update>
   33d9e:	4605      	mov	r5, r0
   33da0:	2800      	cmp	r0, #0
   33da2:	d1d6      	bne.n	33d52 <cc_mbedtls_entropy_func+0x72>
   33da4:	4603      	mov	r3, r0
   33da6:	4632      	mov	r2, r6
   33da8:	2120      	movs	r1, #32
   33daa:	4630      	mov	r0, r6
   33dac:	f000 fec4 	bl	34b38 <cc_mbedtls_sha256>
   33db0:	4605      	mov	r5, r0
   33db2:	2800      	cmp	r0, #0
   33db4:	d1cd      	bne.n	33d52 <cc_mbedtls_entropy_func+0x72>
   33db6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   33dba:	2b00      	cmp	r3, #0
   33dbc:	bfc4      	itt	gt
   33dbe:	2300      	movgt	r3, #0
   33dc0:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   33dc4:	463a      	mov	r2, r7
   33dc6:	4640      	mov	r0, r8
   33dc8:	4631      	mov	r1, r6
   33dca:	f006 fb9a 	bl	3a502 <memcpy>
   33dce:	e7c0      	b.n	33d52 <cc_mbedtls_entropy_func+0x72>
   33dd0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   33dd4:	466e      	mov	r6, sp
   33dd6:	e7bc      	b.n	33d52 <cc_mbedtls_entropy_func+0x72>
   33dd8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   33ddc:	e7c5      	b.n	33d6a <cc_mbedtls_entropy_func+0x8a>
   33dde:	bf00      	nop
   33de0:	20000770 	.word	0x20000770
   33de4:	20000774 	.word	0x20000774

00033de8 <RndStartupTest.constprop.0>:
   33de8:	b530      	push	{r4, r5, lr}
   33dea:	b0c3      	sub	sp, #268	; 0x10c
   33dec:	22dc      	movs	r2, #220	; 0xdc
   33dee:	2100      	movs	r1, #0
   33df0:	a80b      	add	r0, sp, #44	; 0x2c
   33df2:	f006 fbc1 	bl	3a578 <memset>
   33df6:	2228      	movs	r2, #40	; 0x28
   33df8:	2100      	movs	r1, #0
   33dfa:	a801      	add	r0, sp, #4
   33dfc:	f006 fbbc 	bl	3a578 <memset>
   33e00:	a801      	add	r0, sp, #4
   33e02:	f000 fec1 	bl	34b88 <RNG_PLAT_SetUserRngParameters>
   33e06:	4604      	mov	r4, r0
   33e08:	b110      	cbz	r0, 33e10 <RndStartupTest.constprop.0+0x28>
   33e0a:	4620      	mov	r0, r4
   33e0c:	b043      	add	sp, #268	; 0x10c
   33e0e:	bd30      	pop	{r4, r5, pc}
   33e10:	4d18      	ldr	r5, [pc, #96]	; (33e74 <RndStartupTest.constprop.0+0x8c>)
   33e12:	f04f 31ff 	mov.w	r1, #4294967295
   33e16:	6828      	ldr	r0, [r5, #0]
   33e18:	f000 f93c 	bl	34094 <CC_PalMutexLock>
   33e1c:	4604      	mov	r4, r0
   33e1e:	b9c0      	cbnz	r0, 33e52 <RndStartupTest.constprop.0+0x6a>
   33e20:	2000      	movs	r0, #0
   33e22:	f000 f967 	bl	340f4 <CC_PalPowerSaveModeSelect>
   33e26:	bb00      	cbnz	r0, 33e6a <RndStartupTest.constprop.0+0x82>
   33e28:	4a13      	ldr	r2, [pc, #76]	; (33e78 <RndStartupTest.constprop.0+0x90>)
   33e2a:	a901      	add	r1, sp, #4
   33e2c:	a80b      	add	r0, sp, #44	; 0x2c
   33e2e:	f000 fc6f 	bl	34710 <LLF_RND_RunTrngStartupTest>
   33e32:	4604      	mov	r4, r0
   33e34:	2001      	movs	r0, #1
   33e36:	f000 f95d 	bl	340f4 <CC_PalPowerSaveModeSelect>
   33e3a:	b990      	cbnz	r0, 33e62 <RndStartupTest.constprop.0+0x7a>
   33e3c:	6828      	ldr	r0, [r5, #0]
   33e3e:	f000 f931 	bl	340a4 <CC_PalMutexUnlock>
   33e42:	2800      	cmp	r0, #0
   33e44:	d0e1      	beq.n	33e0a <RndStartupTest.constprop.0+0x22>
   33e46:	480d      	ldr	r0, [pc, #52]	; (33e7c <RndStartupTest.constprop.0+0x94>)
   33e48:	f7ff f9d8 	bl	331fc <CC_PalAbort>
   33e4c:	4620      	mov	r0, r4
   33e4e:	b043      	add	sp, #268	; 0x10c
   33e50:	bd30      	pop	{r4, r5, pc}
   33e52:	480b      	ldr	r0, [pc, #44]	; (33e80 <RndStartupTest.constprop.0+0x98>)
   33e54:	f7ff f9d2 	bl	331fc <CC_PalAbort>
   33e58:	2c01      	cmp	r4, #1
   33e5a:	bf08      	it	eq
   33e5c:	2405      	moveq	r4, #5
   33e5e:	d0ed      	beq.n	33e3c <RndStartupTest.constprop.0+0x54>
   33e60:	e7de      	b.n	33e20 <RndStartupTest.constprop.0+0x38>
   33e62:	4808      	ldr	r0, [pc, #32]	; (33e84 <RndStartupTest.constprop.0+0x9c>)
   33e64:	f7ff f9ca 	bl	331fc <CC_PalAbort>
   33e68:	e7e8      	b.n	33e3c <RndStartupTest.constprop.0+0x54>
   33e6a:	4807      	ldr	r0, [pc, #28]	; (33e88 <RndStartupTest.constprop.0+0xa0>)
   33e6c:	f7ff f9c6 	bl	331fc <CC_PalAbort>
   33e70:	e7da      	b.n	33e28 <RndStartupTest.constprop.0+0x40>
   33e72:	bf00      	nop
   33e74:	20000768 	.word	0x20000768
   33e78:	200030fc 	.word	0x200030fc
   33e7c:	0003bf14 	.word	0x0003bf14
   33e80:	0003bebc 	.word	0x0003bebc
   33e84:	0003bef4 	.word	0x0003bef4
   33e88:	0003bed4 	.word	0x0003bed4

00033e8c <CC_LibInit>:
   33e8c:	b510      	push	{r4, lr}
   33e8e:	b082      	sub	sp, #8
   33e90:	f000 f854 	bl	33f3c <CC_HalInit>
   33e94:	b128      	cbz	r0, 33ea2 <CC_LibInit+0x16>
   33e96:	f000 f8a3 	bl	33fe0 <CC_PalTerminate>
   33e9a:	2403      	movs	r4, #3
   33e9c:	4620      	mov	r0, r4
   33e9e:	b002      	add	sp, #8
   33ea0:	bd10      	pop	{r4, pc}
   33ea2:	f000 f86f 	bl	33f84 <CC_PalInit>
   33ea6:	b9d0      	cbnz	r0, 33ede <CC_LibInit+0x52>
   33ea8:	f000 f924 	bl	340f4 <CC_PalPowerSaveModeSelect>
   33eac:	b9d8      	cbnz	r0, 33ee6 <CC_LibInit+0x5a>
   33eae:	4b1e      	ldr	r3, [pc, #120]	; (33f28 <CC_LibInit+0x9c>)
   33eb0:	681b      	ldr	r3, [r3, #0]
   33eb2:	0e1b      	lsrs	r3, r3, #24
   33eb4:	2bf0      	cmp	r3, #240	; 0xf0
   33eb6:	d10a      	bne.n	33ece <CC_LibInit+0x42>
   33eb8:	4a1c      	ldr	r2, [pc, #112]	; (33f2c <CC_LibInit+0xa0>)
   33eba:	4b1d      	ldr	r3, [pc, #116]	; (33f30 <CC_LibInit+0xa4>)
   33ebc:	6812      	ldr	r2, [r2, #0]
   33ebe:	429a      	cmp	r2, r3
   33ec0:	d029      	beq.n	33f16 <CC_LibInit+0x8a>
   33ec2:	f000 f83d 	bl	33f40 <CC_HalTerminate>
   33ec6:	2407      	movs	r4, #7
   33ec8:	f000 f88a 	bl	33fe0 <CC_PalTerminate>
   33ecc:	e7e6      	b.n	33e9c <CC_LibInit+0x10>
   33ece:	f000 f837 	bl	33f40 <CC_HalTerminate>
   33ed2:	f000 f885 	bl	33fe0 <CC_PalTerminate>
   33ed6:	2406      	movs	r4, #6
   33ed8:	4620      	mov	r0, r4
   33eda:	b002      	add	sp, #8
   33edc:	bd10      	pop	{r4, pc}
   33ede:	2404      	movs	r4, #4
   33ee0:	4620      	mov	r0, r4
   33ee2:	b002      	add	sp, #8
   33ee4:	bd10      	pop	{r4, pc}
   33ee6:	f000 f82b 	bl	33f40 <CC_HalTerminate>
   33eea:	f000 f879 	bl	33fe0 <CC_PalTerminate>
   33eee:	f7ff ff7b 	bl	33de8 <RndStartupTest.constprop.0>
   33ef2:	4604      	mov	r4, r0
   33ef4:	b958      	cbnz	r0, 33f0e <CC_LibInit+0x82>
   33ef6:	4602      	mov	r2, r0
   33ef8:	4601      	mov	r1, r0
   33efa:	f7ff f9a7 	bl	3324c <nrf_cc3xx_platform_ctr_drbg_init>
   33efe:	b930      	cbnz	r0, 33f0e <CC_LibInit+0x82>
   33f00:	490c      	ldr	r1, [pc, #48]	; (33f34 <CC_LibInit+0xa8>)
   33f02:	ab01      	add	r3, sp, #4
   33f04:	2268      	movs	r2, #104	; 0x68
   33f06:	f7ff f9d5 	bl	332b4 <nrf_cc3xx_platform_ctr_drbg_get>
   33f0a:	2800      	cmp	r0, #0
   33f0c:	d0c6      	beq.n	33e9c <CC_LibInit+0x10>
   33f0e:	2405      	movs	r4, #5
   33f10:	4620      	mov	r0, r4
   33f12:	b002      	add	sp, #8
   33f14:	bd10      	pop	{r4, pc}
   33f16:	2001      	movs	r0, #1
   33f18:	f000 f8ec 	bl	340f4 <CC_PalPowerSaveModeSelect>
   33f1c:	2800      	cmp	r0, #0
   33f1e:	d1e2      	bne.n	33ee6 <CC_LibInit+0x5a>
   33f20:	4b05      	ldr	r3, [pc, #20]	; (33f38 <CC_LibInit+0xac>)
   33f22:	6018      	str	r0, [r3, #0]
   33f24:	e7e3      	b.n	33eee <CC_LibInit+0x62>
   33f26:	bf00      	nop
   33f28:	5002b928 	.word	0x5002b928
   33f2c:	5002ba24 	.word	0x5002ba24
   33f30:	20e00000 	.word	0x20e00000
   33f34:	20003094 	.word	0x20003094
   33f38:	5002ba0c 	.word	0x5002ba0c

00033f3c <CC_HalInit>:
   33f3c:	2000      	movs	r0, #0
   33f3e:	4770      	bx	lr

00033f40 <CC_HalTerminate>:
   33f40:	2000      	movs	r0, #0
   33f42:	4770      	bx	lr

00033f44 <CC_HalClearInterruptBit>:
   33f44:	0543      	lsls	r3, r0, #21
   33f46:	d503      	bpl.n	33f50 <CC_HalClearInterruptBit+0xc>
   33f48:	4b03      	ldr	r3, [pc, #12]	; (33f58 <CC_HalClearInterruptBit+0x14>)
   33f4a:	f04f 32ff 	mov.w	r2, #4294967295
   33f4e:	601a      	str	r2, [r3, #0]
   33f50:	4b02      	ldr	r3, [pc, #8]	; (33f5c <CC_HalClearInterruptBit+0x18>)
   33f52:	6018      	str	r0, [r3, #0]
   33f54:	4770      	bx	lr
   33f56:	bf00      	nop
   33f58:	5002b108 	.word	0x5002b108
   33f5c:	5002ba08 	.word	0x5002ba08

00033f60 <CC_HalMaskInterrupt>:
   33f60:	4b01      	ldr	r3, [pc, #4]	; (33f68 <CC_HalMaskInterrupt+0x8>)
   33f62:	6018      	str	r0, [r3, #0]
   33f64:	4770      	bx	lr
   33f66:	bf00      	nop
   33f68:	5002ba04 	.word	0x5002ba04

00033f6c <CC_HalWaitInterrupt>:
   33f6c:	b108      	cbz	r0, 33f72 <CC_HalWaitInterrupt+0x6>
   33f6e:	f000 b86f 	b.w	34050 <CC_PalWaitInterrupt>
   33f72:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   33f76:	4770      	bx	lr

00033f78 <CC_HalWaitInterruptRND>:
   33f78:	b108      	cbz	r0, 33f7e <CC_HalWaitInterruptRND+0x6>
   33f7a:	f000 b84f 	b.w	3401c <CC_PalWaitInterruptRND>
   33f7e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   33f82:	4770      	bx	lr

00033f84 <CC_PalInit>:
   33f84:	b510      	push	{r4, lr}
   33f86:	4811      	ldr	r0, [pc, #68]	; (33fcc <CC_PalInit+0x48>)
   33f88:	f000 f870 	bl	3406c <CC_PalMutexCreate>
   33f8c:	b100      	cbz	r0, 33f90 <CC_PalInit+0xc>
   33f8e:	bd10      	pop	{r4, pc}
   33f90:	480f      	ldr	r0, [pc, #60]	; (33fd0 <CC_PalInit+0x4c>)
   33f92:	f000 f86b 	bl	3406c <CC_PalMutexCreate>
   33f96:	2800      	cmp	r0, #0
   33f98:	d1f9      	bne.n	33f8e <CC_PalInit+0xa>
   33f9a:	4c0e      	ldr	r4, [pc, #56]	; (33fd4 <CC_PalInit+0x50>)
   33f9c:	4620      	mov	r0, r4
   33f9e:	f000 f865 	bl	3406c <CC_PalMutexCreate>
   33fa2:	2800      	cmp	r0, #0
   33fa4:	d1f3      	bne.n	33f8e <CC_PalInit+0xa>
   33fa6:	4b0c      	ldr	r3, [pc, #48]	; (33fd8 <CC_PalInit+0x54>)
   33fa8:	480c      	ldr	r0, [pc, #48]	; (33fdc <CC_PalInit+0x58>)
   33faa:	601c      	str	r4, [r3, #0]
   33fac:	f000 f85e 	bl	3406c <CC_PalMutexCreate>
   33fb0:	4601      	mov	r1, r0
   33fb2:	2800      	cmp	r0, #0
   33fb4:	d1eb      	bne.n	33f8e <CC_PalInit+0xa>
   33fb6:	f000 f82d 	bl	34014 <CC_PalDmaInit>
   33fba:	4604      	mov	r4, r0
   33fbc:	b108      	cbz	r0, 33fc2 <CC_PalInit+0x3e>
   33fbe:	4620      	mov	r0, r4
   33fc0:	bd10      	pop	{r4, pc}
   33fc2:	f000 f879 	bl	340b8 <CC_PalPowerSaveModeInit>
   33fc6:	4620      	mov	r0, r4
   33fc8:	e7fa      	b.n	33fc0 <CC_PalInit+0x3c>
   33fca:	bf00      	nop
   33fcc:	20000764 	.word	0x20000764
   33fd0:	20000758 	.word	0x20000758
   33fd4:	20000760 	.word	0x20000760
   33fd8:	20000768 	.word	0x20000768
   33fdc:	2000075c 	.word	0x2000075c

00033fe0 <CC_PalTerminate>:
   33fe0:	b508      	push	{r3, lr}
   33fe2:	4808      	ldr	r0, [pc, #32]	; (34004 <CC_PalTerminate+0x24>)
   33fe4:	f000 f84c 	bl	34080 <CC_PalMutexDestroy>
   33fe8:	4807      	ldr	r0, [pc, #28]	; (34008 <CC_PalTerminate+0x28>)
   33fea:	f000 f849 	bl	34080 <CC_PalMutexDestroy>
   33fee:	4807      	ldr	r0, [pc, #28]	; (3400c <CC_PalTerminate+0x2c>)
   33ff0:	f000 f846 	bl	34080 <CC_PalMutexDestroy>
   33ff4:	4806      	ldr	r0, [pc, #24]	; (34010 <CC_PalTerminate+0x30>)
   33ff6:	f000 f843 	bl	34080 <CC_PalMutexDestroy>
   33ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33ffe:	f000 b80b 	b.w	34018 <CC_PalDmaTerminate>
   34002:	bf00      	nop
   34004:	20000764 	.word	0x20000764
   34008:	20000758 	.word	0x20000758
   3400c:	20000760 	.word	0x20000760
   34010:	2000075c 	.word	0x2000075c

00034014 <CC_PalDmaInit>:
   34014:	2000      	movs	r0, #0
   34016:	4770      	bx	lr

00034018 <CC_PalDmaTerminate>:
   34018:	4770      	bx	lr
   3401a:	bf00      	nop

0003401c <CC_PalWaitInterruptRND>:
   3401c:	b410      	push	{r4}
   3401e:	4c08      	ldr	r4, [pc, #32]	; (34040 <CC_PalWaitInterruptRND+0x24>)
   34020:	4602      	mov	r2, r0
   34022:	6823      	ldr	r3, [r4, #0]
   34024:	4213      	tst	r3, r2
   34026:	d0fc      	beq.n	34022 <CC_PalWaitInterruptRND+0x6>
   34028:	b121      	cbz	r1, 34034 <CC_PalWaitInterruptRND+0x18>
   3402a:	4b06      	ldr	r3, [pc, #24]	; (34044 <CC_PalWaitInterruptRND+0x28>)
   3402c:	4806      	ldr	r0, [pc, #24]	; (34048 <CC_PalWaitInterruptRND+0x2c>)
   3402e:	681b      	ldr	r3, [r3, #0]
   34030:	600b      	str	r3, [r1, #0]
   34032:	6003      	str	r3, [r0, #0]
   34034:	4b05      	ldr	r3, [pc, #20]	; (3404c <CC_PalWaitInterruptRND+0x30>)
   34036:	601a      	str	r2, [r3, #0]
   34038:	2000      	movs	r0, #0
   3403a:	bc10      	pop	{r4}
   3403c:	4770      	bx	lr
   3403e:	bf00      	nop
   34040:	5002ba00 	.word	0x5002ba00
   34044:	5002b104 	.word	0x5002b104
   34048:	5002b108 	.word	0x5002b108
   3404c:	5002ba08 	.word	0x5002ba08

00034050 <CC_PalWaitInterrupt>:
   34050:	4904      	ldr	r1, [pc, #16]	; (34064 <CC_PalWaitInterrupt+0x14>)
   34052:	4602      	mov	r2, r0
   34054:	680b      	ldr	r3, [r1, #0]
   34056:	421a      	tst	r2, r3
   34058:	d0fc      	beq.n	34054 <CC_PalWaitInterrupt+0x4>
   3405a:	4b03      	ldr	r3, [pc, #12]	; (34068 <CC_PalWaitInterrupt+0x18>)
   3405c:	2000      	movs	r0, #0
   3405e:	601a      	str	r2, [r3, #0]
   34060:	4770      	bx	lr
   34062:	bf00      	nop
   34064:	5002ba00 	.word	0x5002ba00
   34068:	5002ba08 	.word	0x5002ba08

0003406c <CC_PalMutexCreate>:
   3406c:	b508      	push	{r3, lr}
   3406e:	4b03      	ldr	r3, [pc, #12]	; (3407c <CC_PalMutexCreate+0x10>)
   34070:	6802      	ldr	r2, [r0, #0]
   34072:	681b      	ldr	r3, [r3, #0]
   34074:	6810      	ldr	r0, [r2, #0]
   34076:	4798      	blx	r3
   34078:	2000      	movs	r0, #0
   3407a:	bd08      	pop	{r3, pc}
   3407c:	20000718 	.word	0x20000718

00034080 <CC_PalMutexDestroy>:
   34080:	b508      	push	{r3, lr}
   34082:	4b03      	ldr	r3, [pc, #12]	; (34090 <CC_PalMutexDestroy+0x10>)
   34084:	6802      	ldr	r2, [r0, #0]
   34086:	685b      	ldr	r3, [r3, #4]
   34088:	6810      	ldr	r0, [r2, #0]
   3408a:	4798      	blx	r3
   3408c:	2000      	movs	r0, #0
   3408e:	bd08      	pop	{r3, pc}
   34090:	20000718 	.word	0x20000718

00034094 <CC_PalMutexLock>:
   34094:	4b02      	ldr	r3, [pc, #8]	; (340a0 <CC_PalMutexLock+0xc>)
   34096:	6802      	ldr	r2, [r0, #0]
   34098:	689b      	ldr	r3, [r3, #8]
   3409a:	6810      	ldr	r0, [r2, #0]
   3409c:	4718      	bx	r3
   3409e:	bf00      	nop
   340a0:	20000718 	.word	0x20000718

000340a4 <CC_PalMutexUnlock>:
   340a4:	b508      	push	{r3, lr}
   340a6:	4b03      	ldr	r3, [pc, #12]	; (340b4 <CC_PalMutexUnlock+0x10>)
   340a8:	6802      	ldr	r2, [r0, #0]
   340aa:	68db      	ldr	r3, [r3, #12]
   340ac:	6810      	ldr	r0, [r2, #0]
   340ae:	4798      	blx	r3
   340b0:	2000      	movs	r0, #0
   340b2:	bd08      	pop	{r3, pc}
   340b4:	20000718 	.word	0x20000718

000340b8 <CC_PalPowerSaveModeInit>:
   340b8:	b570      	push	{r4, r5, r6, lr}
   340ba:	4c09      	ldr	r4, [pc, #36]	; (340e0 <CC_PalPowerSaveModeInit+0x28>)
   340bc:	4d09      	ldr	r5, [pc, #36]	; (340e4 <CC_PalPowerSaveModeInit+0x2c>)
   340be:	6920      	ldr	r0, [r4, #16]
   340c0:	68ab      	ldr	r3, [r5, #8]
   340c2:	4798      	blx	r3
   340c4:	b118      	cbz	r0, 340ce <CC_PalPowerSaveModeInit+0x16>
   340c6:	4b08      	ldr	r3, [pc, #32]	; (340e8 <CC_PalPowerSaveModeInit+0x30>)
   340c8:	4808      	ldr	r0, [pc, #32]	; (340ec <CC_PalPowerSaveModeInit+0x34>)
   340ca:	685b      	ldr	r3, [r3, #4]
   340cc:	4798      	blx	r3
   340ce:	4a08      	ldr	r2, [pc, #32]	; (340f0 <CC_PalPowerSaveModeInit+0x38>)
   340d0:	68eb      	ldr	r3, [r5, #12]
   340d2:	6920      	ldr	r0, [r4, #16]
   340d4:	2100      	movs	r1, #0
   340d6:	6011      	str	r1, [r2, #0]
   340d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   340dc:	4718      	bx	r3
   340de:	bf00      	nop
   340e0:	20000728 	.word	0x20000728
   340e4:	20000718 	.word	0x20000718
   340e8:	20000708 	.word	0x20000708
   340ec:	0003bf2c 	.word	0x0003bf2c
   340f0:	2000331c 	.word	0x2000331c

000340f4 <CC_PalPowerSaveModeSelect>:
   340f4:	b570      	push	{r4, r5, r6, lr}
   340f6:	4d1a      	ldr	r5, [pc, #104]	; (34160 <CC_PalPowerSaveModeSelect+0x6c>)
   340f8:	4e1a      	ldr	r6, [pc, #104]	; (34164 <CC_PalPowerSaveModeSelect+0x70>)
   340fa:	4604      	mov	r4, r0
   340fc:	68b2      	ldr	r2, [r6, #8]
   340fe:	6928      	ldr	r0, [r5, #16]
   34100:	4790      	blx	r2
   34102:	b9f0      	cbnz	r0, 34142 <CC_PalPowerSaveModeSelect+0x4e>
   34104:	b15c      	cbz	r4, 3411e <CC_PalPowerSaveModeSelect+0x2a>
   34106:	4c18      	ldr	r4, [pc, #96]	; (34168 <CC_PalPowerSaveModeSelect+0x74>)
   34108:	6823      	ldr	r3, [r4, #0]
   3410a:	b1ab      	cbz	r3, 34138 <CC_PalPowerSaveModeSelect+0x44>
   3410c:	2b01      	cmp	r3, #1
   3410e:	d01a      	beq.n	34146 <CC_PalPowerSaveModeSelect+0x52>
   34110:	3b01      	subs	r3, #1
   34112:	6023      	str	r3, [r4, #0]
   34114:	6928      	ldr	r0, [r5, #16]
   34116:	68f3      	ldr	r3, [r6, #12]
   34118:	4798      	blx	r3
   3411a:	2000      	movs	r0, #0
   3411c:	bd70      	pop	{r4, r5, r6, pc}
   3411e:	4c12      	ldr	r4, [pc, #72]	; (34168 <CC_PalPowerSaveModeSelect+0x74>)
   34120:	6821      	ldr	r1, [r4, #0]
   34122:	b939      	cbnz	r1, 34134 <CC_PalPowerSaveModeSelect+0x40>
   34124:	4b11      	ldr	r3, [pc, #68]	; (3416c <CC_PalPowerSaveModeSelect+0x78>)
   34126:	4a12      	ldr	r2, [pc, #72]	; (34170 <CC_PalPowerSaveModeSelect+0x7c>)
   34128:	2001      	movs	r0, #1
   3412a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   3412e:	6813      	ldr	r3, [r2, #0]
   34130:	2b00      	cmp	r3, #0
   34132:	d1fc      	bne.n	3412e <CC_PalPowerSaveModeSelect+0x3a>
   34134:	3101      	adds	r1, #1
   34136:	6021      	str	r1, [r4, #0]
   34138:	68f3      	ldr	r3, [r6, #12]
   3413a:	6928      	ldr	r0, [r5, #16]
   3413c:	4798      	blx	r3
   3413e:	2000      	movs	r0, #0
   34140:	bd70      	pop	{r4, r5, r6, pc}
   34142:	480c      	ldr	r0, [pc, #48]	; (34174 <CC_PalPowerSaveModeSelect+0x80>)
   34144:	bd70      	pop	{r4, r5, r6, pc}
   34146:	4a0a      	ldr	r2, [pc, #40]	; (34170 <CC_PalPowerSaveModeSelect+0x7c>)
   34148:	6813      	ldr	r3, [r2, #0]
   3414a:	2b00      	cmp	r3, #0
   3414c:	d1fc      	bne.n	34148 <CC_PalPowerSaveModeSelect+0x54>
   3414e:	4a07      	ldr	r2, [pc, #28]	; (3416c <CC_PalPowerSaveModeSelect+0x78>)
   34150:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   34154:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   34158:	f7ff ff02 	bl	33f60 <CC_HalMaskInterrupt>
   3415c:	6823      	ldr	r3, [r4, #0]
   3415e:	e7d7      	b.n	34110 <CC_PalPowerSaveModeSelect+0x1c>
   34160:	20000728 	.word	0x20000728
   34164:	20000718 	.word	0x20000718
   34168:	2000331c 	.word	0x2000331c
   3416c:	5002a000 	.word	0x5002a000
   34170:	5002b910 	.word	0x5002b910
   34174:	ffff8fe9 	.word	0xffff8fe9

00034178 <mutex_init>:
   34178:	4b01      	ldr	r3, [pc, #4]	; (34180 <mutex_init+0x8>)
   3417a:	681b      	ldr	r3, [r3, #0]
   3417c:	4718      	bx	r3
   3417e:	bf00      	nop
   34180:	20000718 	.word	0x20000718

00034184 <mutex_lock>:
   34184:	4b01      	ldr	r3, [pc, #4]	; (3418c <mutex_lock+0x8>)
   34186:	689b      	ldr	r3, [r3, #8]
   34188:	4718      	bx	r3
   3418a:	bf00      	nop
   3418c:	20000718 	.word	0x20000718

00034190 <mutex_unlock>:
   34190:	4b01      	ldr	r3, [pc, #4]	; (34198 <mutex_unlock+0x8>)
   34192:	68db      	ldr	r3, [r3, #12]
   34194:	4718      	bx	r3
   34196:	bf00      	nop
   34198:	20000718 	.word	0x20000718

0003419c <startTrngHW>:
   3419c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   341a0:	2800      	cmp	r0, #0
   341a2:	d07b      	beq.n	3429c <startTrngHW+0x100>
   341a4:	460c      	mov	r4, r1
   341a6:	2900      	cmp	r1, #0
   341a8:	d078      	beq.n	3429c <startTrngHW+0x100>
   341aa:	461d      	mov	r5, r3
   341ac:	2b00      	cmp	r3, #0
   341ae:	d075      	beq.n	3429c <startTrngHW+0x100>
   341b0:	4606      	mov	r6, r0
   341b2:	b122      	cbz	r2, 341be <startTrngHW+0x22>
   341b4:	2201      	movs	r2, #1
   341b6:	2300      	movs	r3, #0
   341b8:	602a      	str	r2, [r5, #0]
   341ba:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   341be:	682b      	ldr	r3, [r5, #0]
   341c0:	2b00      	cmp	r3, #0
   341c2:	d067      	beq.n	34294 <startTrngHW+0xf8>
   341c4:	4629      	mov	r1, r5
   341c6:	4620      	mov	r0, r4
   341c8:	f000 fda4 	bl	34d14 <LLF_RND_GetFastestRosc>
   341cc:	4607      	mov	r7, r0
   341ce:	2800      	cmp	r0, #0
   341d0:	d161      	bne.n	34296 <startTrngHW+0xfa>
   341d2:	6828      	ldr	r0, [r5, #0]
   341d4:	4621      	mov	r1, r4
   341d6:	f000 fd7f 	bl	34cd8 <LLF_RND_GetRoscSampleCnt>
   341da:	4607      	mov	r7, r0
   341dc:	2800      	cmp	r0, #0
   341de:	d15a      	bne.n	34296 <startTrngHW+0xfa>
   341e0:	682b      	ldr	r3, [r5, #0]
   341e2:	2b08      	cmp	r3, #8
   341e4:	d069      	beq.n	342ba <startTrngHW+0x11e>
   341e6:	2b04      	cmp	r3, #4
   341e8:	d06a      	beq.n	342c0 <startTrngHW+0x124>
   341ea:	f1a3 0802 	sub.w	r8, r3, #2
   341ee:	fab8 f888 	clz	r8, r8
   341f2:	ea4f 1858 	mov.w	r8, r8, lsr #5
   341f6:	4b34      	ldr	r3, [pc, #208]	; (342c8 <startTrngHW+0x12c>)
   341f8:	4934      	ldr	r1, [pc, #208]	; (342cc <startTrngHW+0x130>)
   341fa:	4a35      	ldr	r2, [pc, #212]	; (342d0 <startTrngHW+0x134>)
   341fc:	2001      	movs	r0, #1
   341fe:	6018      	str	r0, [r3, #0]
   34200:	469c      	mov	ip, r3
   34202:	6008      	str	r0, [r1, #0]
   34204:	f8cc 0000 	str.w	r0, [ip]
   34208:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3420a:	6013      	str	r3, [r2, #0]
   3420c:	6811      	ldr	r1, [r2, #0]
   3420e:	428b      	cmp	r3, r1
   34210:	d1f8      	bne.n	34204 <startTrngHW+0x68>
   34212:	4b30      	ldr	r3, [pc, #192]	; (342d4 <startTrngHW+0x138>)
   34214:	f04f 0900 	mov.w	r9, #0
   34218:	f8c3 9000 	str.w	r9, [r3]
   3421c:	f04f 30ff 	mov.w	r0, #4294967295
   34220:	f7ff fe90 	bl	33f44 <CC_HalClearInterruptBit>
   34224:	4b2c      	ldr	r3, [pc, #176]	; (342d8 <startTrngHW+0x13c>)
   34226:	f06f 021b 	mvn.w	r2, #27
   3422a:	601a      	str	r2, [r3, #0]
   3422c:	4648      	mov	r0, r9
   3422e:	f7ff fe97 	bl	33f60 <CC_HalMaskInterrupt>
   34232:	4a2a      	ldr	r2, [pc, #168]	; (342dc <startTrngHW+0x140>)
   34234:	4b2a      	ldr	r3, [pc, #168]	; (342e0 <startTrngHW+0x144>)
   34236:	f8c2 8000 	str.w	r8, [r2]
   3423a:	6818      	ldr	r0, [r3, #0]
   3423c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   34240:	f7ff fe8e 	bl	33f60 <CC_HalMaskInterrupt>
   34244:	4b27      	ldr	r3, [pc, #156]	; (342e4 <startTrngHW+0x148>)
   34246:	220a      	movs	r2, #10
   34248:	601a      	str	r2, [r3, #0]
   3424a:	9908      	ldr	r1, [sp, #32]
   3424c:	6923      	ldr	r3, [r4, #16]
   3424e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   34250:	2901      	cmp	r1, #1
   34252:	d027      	beq.n	342a4 <startTrngHW+0x108>
   34254:	4924      	ldr	r1, [pc, #144]	; (342e8 <startTrngHW+0x14c>)
   34256:	fba1 1303 	umull	r1, r3, r1, r3
   3425a:	091b      	lsrs	r3, r3, #4
   3425c:	fb03 f302 	mul.w	r3, r3, r2
   34260:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34264:	4921      	ldr	r1, [pc, #132]	; (342ec <startTrngHW+0x150>)
   34266:	4a1b      	ldr	r2, [pc, #108]	; (342d4 <startTrngHW+0x138>)
   34268:	03db      	lsls	r3, r3, #15
   3426a:	099b      	lsrs	r3, r3, #6
   3426c:	600b      	str	r3, [r1, #0]
   3426e:	2301      	movs	r3, #1
   34270:	6013      	str	r3, [r2, #0]
   34272:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   34276:	682a      	ldr	r2, [r5, #0]
   34278:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   3427c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   34280:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   34284:	682a      	ldr	r2, [r5, #0]
   34286:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3428a:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   3428e:	4638      	mov	r0, r7
   34290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   34294:	4f16      	ldr	r7, [pc, #88]	; (342f0 <startTrngHW+0x154>)
   34296:	4638      	mov	r0, r7
   34298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3429c:	4f15      	ldr	r7, [pc, #84]	; (342f4 <startTrngHW+0x158>)
   3429e:	4638      	mov	r0, r7
   342a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   342a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   342a8:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   342ac:	3101      	adds	r1, #1
   342ae:	d002      	beq.n	342b6 <startTrngHW+0x11a>
   342b0:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   342b4:	e7ce      	b.n	34254 <startTrngHW+0xb8>
   342b6:	2316      	movs	r3, #22
   342b8:	e7d0      	b.n	3425c <startTrngHW+0xc0>
   342ba:	f04f 0803 	mov.w	r8, #3
   342be:	e79a      	b.n	341f6 <startTrngHW+0x5a>
   342c0:	f04f 0802 	mov.w	r8, #2
   342c4:	e797      	b.n	341f6 <startTrngHW+0x5a>
   342c6:	bf00      	nop
   342c8:	5002b1c4 	.word	0x5002b1c4
   342cc:	5002b140 	.word	0x5002b140
   342d0:	5002b130 	.word	0x5002b130
   342d4:	5002b12c 	.word	0x5002b12c
   342d8:	5002b100 	.word	0x5002b100
   342dc:	5002b10c 	.word	0x5002b10c
   342e0:	5002ba04 	.word	0x5002ba04
   342e4:	5002b138 	.word	0x5002b138
   342e8:	aaaaaaab 	.word	0xaaaaaaab
   342ec:	5002b1d8 	.word	0x5002b1d8
   342f0:	00f10c31 	.word	0x00f10c31
   342f4:	00f10c35 	.word	0x00f10c35

000342f8 <LLF_RND_RepetitionCounterTest.part.0>:
   342f8:	b4f0      	push	{r4, r5, r6, r7}
   342fa:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   342fe:	2400      	movs	r4, #0
   34300:	f10c 3cff 	add.w	ip, ip, #4294967295
   34304:	4626      	mov	r6, r4
   34306:	4627      	mov	r7, r4
   34308:	e006      	b.n	34318 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   3430a:	429f      	cmp	r7, r3
   3430c:	d016      	beq.n	3433c <LLF_RND_RepetitionCounterTest.part.0+0x44>
   3430e:	2601      	movs	r6, #1
   34310:	4565      	cmp	r5, ip
   34312:	d819      	bhi.n	34348 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   34314:	462c      	mov	r4, r5
   34316:	461f      	mov	r7, r3
   34318:	0963      	lsrs	r3, r4, #5
   3431a:	f004 011f 	and.w	r1, r4, #31
   3431e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   34322:	291f      	cmp	r1, #31
   34324:	fa23 f301 	lsr.w	r3, r3, r1
   34328:	f104 0501 	add.w	r5, r4, #1
   3432c:	bf18      	it	ne
   3432e:	f003 0301 	andne.w	r3, r3, #1
   34332:	2c00      	cmp	r4, #0
   34334:	d1e9      	bne.n	3430a <LLF_RND_RepetitionCounterTest.part.0+0x12>
   34336:	2601      	movs	r6, #1
   34338:	4635      	mov	r5, r6
   3433a:	e7eb      	b.n	34314 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   3433c:	3601      	adds	r6, #1
   3433e:	4296      	cmp	r6, r2
   34340:	d1e6      	bne.n	34310 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   34342:	4803      	ldr	r0, [pc, #12]	; (34350 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   34344:	bcf0      	pop	{r4, r5, r6, r7}
   34346:	4770      	bx	lr
   34348:	2000      	movs	r0, #0
   3434a:	bcf0      	pop	{r4, r5, r6, r7}
   3434c:	4770      	bx	lr
   3434e:	bf00      	nop
   34350:	00f10c36 	.word	0x00f10c36

00034354 <LLF_RND_AdaptiveProportionTest>:
   34354:	2800      	cmp	r0, #0
   34356:	d061      	beq.n	3441c <LLF_RND_AdaptiveProportionTest+0xc8>
   34358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3435c:	1e4c      	subs	r4, r1, #1
   3435e:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   34362:	d227      	bcs.n	343b4 <LLF_RND_AdaptiveProportionTest+0x60>
   34364:	b333      	cbz	r3, 343b4 <LLF_RND_AdaptiveProportionTest+0x60>
   34366:	b32a      	cbz	r2, 343b4 <LLF_RND_AdaptiveProportionTest+0x60>
   34368:	00cd      	lsls	r5, r1, #3
   3436a:	2b01      	cmp	r3, #1
   3436c:	f105 3eff 	add.w	lr, r5, #4294967295
   34370:	d030      	beq.n	343d4 <LLF_RND_AdaptiveProportionTest+0x80>
   34372:	2100      	movs	r1, #0
   34374:	468c      	mov	ip, r1
   34376:	460f      	mov	r7, r1
   34378:	460e      	mov	r6, r1
   3437a:	f103 38ff 	add.w	r8, r3, #4294967295
   3437e:	094c      	lsrs	r4, r1, #5
   34380:	f001 051f 	and.w	r5, r1, #31
   34384:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   34388:	2d1f      	cmp	r5, #31
   3438a:	fa24 f405 	lsr.w	r4, r4, r5
   3438e:	bf18      	it	ne
   34390:	f004 0401 	andne.w	r4, r4, #1
   34394:	b921      	cbnz	r1, 343a0 <LLF_RND_AdaptiveProportionTest+0x4c>
   34396:	2601      	movs	r6, #1
   34398:	46b4      	mov	ip, r6
   3439a:	4631      	mov	r1, r6
   3439c:	4627      	mov	r7, r4
   3439e:	e7ee      	b.n	3437e <LLF_RND_AdaptiveProportionTest+0x2a>
   343a0:	42b3      	cmp	r3, r6
   343a2:	d013      	beq.n	343cc <LLF_RND_AdaptiveProportionTest+0x78>
   343a4:	42a7      	cmp	r7, r4
   343a6:	d101      	bne.n	343ac <LLF_RND_AdaptiveProportionTest+0x58>
   343a8:	f10c 0c01 	add.w	ip, ip, #1
   343ac:	4546      	cmp	r6, r8
   343ae:	d104      	bne.n	343ba <LLF_RND_AdaptiveProportionTest+0x66>
   343b0:	4562      	cmp	r2, ip
   343b2:	d202      	bcs.n	343ba <LLF_RND_AdaptiveProportionTest+0x66>
   343b4:	481a      	ldr	r0, [pc, #104]	; (34420 <LLF_RND_AdaptiveProportionTest+0xcc>)
   343b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   343ba:	463c      	mov	r4, r7
   343bc:	3101      	adds	r1, #1
   343be:	458e      	cmp	lr, r1
   343c0:	f106 0601 	add.w	r6, r6, #1
   343c4:	d2ea      	bcs.n	3439c <LLF_RND_AdaptiveProportionTest+0x48>
   343c6:	2000      	movs	r0, #0
   343c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   343cc:	2600      	movs	r6, #0
   343ce:	f04f 0c01 	mov.w	ip, #1
   343d2:	e7f3      	b.n	343bc <LLF_RND_AdaptiveProportionTest+0x68>
   343d4:	2600      	movs	r6, #0
   343d6:	46b4      	mov	ip, r6
   343d8:	4637      	mov	r7, r6
   343da:	4634      	mov	r4, r6
   343dc:	0961      	lsrs	r1, r4, #5
   343de:	f004 031f 	and.w	r3, r4, #31
   343e2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   343e6:	2b1f      	cmp	r3, #31
   343e8:	fa21 f103 	lsr.w	r1, r1, r3
   343ec:	bf18      	it	ne
   343ee:	f001 0101 	andne.w	r1, r1, #1
   343f2:	b13c      	cbz	r4, 34404 <LLF_RND_AdaptiveProportionTest+0xb0>
   343f4:	b95f      	cbnz	r7, 3440e <LLF_RND_AdaptiveProportionTest+0xba>
   343f6:	458c      	cmp	ip, r1
   343f8:	d001      	beq.n	343fe <LLF_RND_AdaptiveProportionTest+0xaa>
   343fa:	4661      	mov	r1, ip
   343fc:	e008      	b.n	34410 <LLF_RND_AdaptiveProportionTest+0xbc>
   343fe:	3601      	adds	r6, #1
   34400:	4661      	mov	r1, ip
   34402:	e005      	b.n	34410 <LLF_RND_AdaptiveProportionTest+0xbc>
   34404:	2601      	movs	r6, #1
   34406:	4634      	mov	r4, r6
   34408:	468c      	mov	ip, r1
   3440a:	2701      	movs	r7, #1
   3440c:	e7e6      	b.n	343dc <LLF_RND_AdaptiveProportionTest+0x88>
   3440e:	463e      	mov	r6, r7
   34410:	42b2      	cmp	r2, r6
   34412:	d3cf      	bcc.n	343b4 <LLF_RND_AdaptiveProportionTest+0x60>
   34414:	3401      	adds	r4, #1
   34416:	42ac      	cmp	r4, r5
   34418:	d1f6      	bne.n	34408 <LLF_RND_AdaptiveProportionTest+0xb4>
   3441a:	e7d4      	b.n	343c6 <LLF_RND_AdaptiveProportionTest+0x72>
   3441c:	4800      	ldr	r0, [pc, #0]	; (34420 <LLF_RND_AdaptiveProportionTest+0xcc>)
   3441e:	4770      	bx	lr
   34420:	00f10c37 	.word	0x00f10c37

00034424 <getTrngSource>:
   34424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34428:	b08d      	sub	sp, #52	; 0x34
   3442a:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   3442e:	4607      	mov	r7, r0
   34430:	460c      	mov	r4, r1
   34432:	2d00      	cmp	r5, #0
   34434:	d14d      	bne.n	344d2 <getTrngSource+0xae>
   34436:	f8d1 a010 	ldr.w	sl, [r1, #16]
   3443a:	601e      	str	r6, [r3, #0]
   3443c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   3443e:	2100      	movs	r1, #0
   34440:	6019      	str	r1, [r3, #0]
   34442:	2a00      	cmp	r2, #0
   34444:	f000 8120 	beq.w	34688 <getTrngSource+0x264>
   34448:	4a9b      	ldr	r2, [pc, #620]	; (346b8 <getTrngSource+0x294>)
   3444a:	4b9c      	ldr	r3, [pc, #624]	; (346bc <getTrngSource+0x298>)
   3444c:	6811      	ldr	r1, [r2, #0]
   3444e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   34450:	681b      	ldr	r3, [r3, #0]
   34452:	429a      	cmp	r2, r3
   34454:	d148      	bne.n	344e8 <getTrngSource+0xc4>
   34456:	290a      	cmp	r1, #10
   34458:	d146      	bne.n	344e8 <getTrngSource+0xc4>
   3445a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   3445e:	9304      	str	r3, [sp, #16]
   34460:	4b97      	ldr	r3, [pc, #604]	; (346c0 <getTrngSource+0x29c>)
   34462:	fba3 230a 	umull	r2, r3, r3, sl
   34466:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   3446a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   3446e:	f106 0208 	add.w	r2, r6, #8
   34472:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   34476:	2304      	movs	r3, #4
   34478:	9203      	str	r2, [sp, #12]
   3447a:	9302      	str	r3, [sp, #8]
   3447c:	46b8      	mov	r8, r7
   3447e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   34480:	f8c3 a000 	str.w	sl, [r3]
   34484:	f1ba 0f00 	cmp.w	sl, #0
   34488:	f000 80c4 	beq.w	34614 <getTrngSource+0x1f0>
   3448c:	9e03      	ldr	r6, [sp, #12]
   3448e:	4655      	mov	r5, sl
   34490:	f04f 0900 	mov.w	r9, #0
   34494:	f000 fc4e 	bl	34d34 <LLF_RND_TurnOffTrng>
   34498:	2300      	movs	r3, #0
   3449a:	9305      	str	r3, [sp, #20]
   3449c:	f1b8 0f00 	cmp.w	r8, #0
   344a0:	f000 80e6 	beq.w	34670 <getTrngSource+0x24c>
   344a4:	2c00      	cmp	r4, #0
   344a6:	f000 80e3 	beq.w	34670 <getTrngSource+0x24c>
   344aa:	9b04      	ldr	r3, [sp, #16]
   344ac:	2b00      	cmp	r3, #0
   344ae:	f000 80dd 	beq.w	3466c <getTrngSource+0x248>
   344b2:	a904      	add	r1, sp, #16
   344b4:	4620      	mov	r0, r4
   344b6:	f000 fc2d 	bl	34d14 <LLF_RND_GetFastestRosc>
   344ba:	b1b8      	cbz	r0, 344ec <getTrngSource+0xc8>
   344bc:	4b81      	ldr	r3, [pc, #516]	; (346c4 <getTrngSource+0x2a0>)
   344be:	4298      	cmp	r0, r3
   344c0:	f040 80a8 	bne.w	34614 <getTrngSource+0x1f0>
   344c4:	9002      	str	r0, [sp, #8]
   344c6:	f000 fc35 	bl	34d34 <LLF_RND_TurnOffTrng>
   344ca:	9802      	ldr	r0, [sp, #8]
   344cc:	b00d      	add	sp, #52	; 0x34
   344ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   344d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   344d6:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   344da:	3001      	adds	r0, #1
   344dc:	bf14      	ite	ne
   344de:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   344e2:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   344e6:	e7a8      	b.n	3443a <getTrngSource+0x16>
   344e8:	4877      	ldr	r0, [pc, #476]	; (346c8 <getTrngSource+0x2a4>)
   344ea:	e7eb      	b.n	344c4 <getTrngSource+0xa0>
   344ec:	9804      	ldr	r0, [sp, #16]
   344ee:	4621      	mov	r1, r4
   344f0:	f000 fbf2 	bl	34cd8 <LLF_RND_GetRoscSampleCnt>
   344f4:	2800      	cmp	r0, #0
   344f6:	d1e1      	bne.n	344bc <getTrngSource+0x98>
   344f8:	9f04      	ldr	r7, [sp, #16]
   344fa:	2f08      	cmp	r7, #8
   344fc:	f000 80ba 	beq.w	34674 <getTrngSource+0x250>
   34500:	2f04      	cmp	r7, #4
   34502:	f000 80b9 	beq.w	34678 <getTrngSource+0x254>
   34506:	f1a7 0702 	sub.w	r7, r7, #2
   3450a:	fab7 f787 	clz	r7, r7
   3450e:	097f      	lsrs	r7, r7, #5
   34510:	496e      	ldr	r1, [pc, #440]	; (346cc <getTrngSource+0x2a8>)
   34512:	2301      	movs	r3, #1
   34514:	600b      	str	r3, [r1, #0]
   34516:	f841 3c84 	str.w	r3, [r1, #-132]
   3451a:	4619      	mov	r1, r3
   3451c:	4b6b      	ldr	r3, [pc, #428]	; (346cc <getTrngSource+0x2a8>)
   3451e:	4867      	ldr	r0, [pc, #412]	; (346bc <getTrngSource+0x298>)
   34520:	6019      	str	r1, [r3, #0]
   34522:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34524:	6003      	str	r3, [r0, #0]
   34526:	6800      	ldr	r0, [r0, #0]
   34528:	4283      	cmp	r3, r0
   3452a:	d1f7      	bne.n	3451c <getTrngSource+0xf8>
   3452c:	4a68      	ldr	r2, [pc, #416]	; (346d0 <getTrngSource+0x2ac>)
   3452e:	2300      	movs	r3, #0
   34530:	6013      	str	r3, [r2, #0]
   34532:	f04f 30ff 	mov.w	r0, #4294967295
   34536:	f7ff fd05 	bl	33f44 <CC_HalClearInterruptBit>
   3453a:	2300      	movs	r3, #0
   3453c:	4618      	mov	r0, r3
   3453e:	4b65      	ldr	r3, [pc, #404]	; (346d4 <getTrngSource+0x2b0>)
   34540:	f06f 011b 	mvn.w	r1, #27
   34544:	6019      	str	r1, [r3, #0]
   34546:	f7ff fd0b 	bl	33f60 <CC_HalMaskInterrupt>
   3454a:	4963      	ldr	r1, [pc, #396]	; (346d8 <getTrngSource+0x2b4>)
   3454c:	4b63      	ldr	r3, [pc, #396]	; (346dc <getTrngSource+0x2b8>)
   3454e:	600f      	str	r7, [r1, #0]
   34550:	6818      	ldr	r0, [r3, #0]
   34552:	4f5b      	ldr	r7, [pc, #364]	; (346c0 <getTrngSource+0x29c>)
   34554:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   34558:	f7ff fd02 	bl	33f60 <CC_HalMaskInterrupt>
   3455c:	4b56      	ldr	r3, [pc, #344]	; (346b8 <getTrngSource+0x294>)
   3455e:	4860      	ldr	r0, [pc, #384]	; (346e0 <getTrngSource+0x2bc>)
   34560:	210a      	movs	r1, #10
   34562:	6019      	str	r1, [r3, #0]
   34564:	6921      	ldr	r1, [r4, #16]
   34566:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34568:	fba7 c101 	umull	ip, r1, r7, r1
   3456c:	0909      	lsrs	r1, r1, #4
   3456e:	fb03 f301 	mul.w	r3, r3, r1
   34572:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34576:	03db      	lsls	r3, r3, #15
   34578:	099b      	lsrs	r3, r3, #6
   3457a:	6003      	str	r3, [r0, #0]
   3457c:	4b54      	ldr	r3, [pc, #336]	; (346d0 <getTrngSource+0x2ac>)
   3457e:	2201      	movs	r2, #1
   34580:	601a      	str	r2, [r3, #0]
   34582:	9904      	ldr	r1, [sp, #16]
   34584:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   34588:	020b      	lsls	r3, r1, #8
   3458a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   3458e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   34592:	4313      	orrs	r3, r2
   34594:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   34598:	a805      	add	r0, sp, #20
   3459a:	f000 fb8d 	bl	34cb8 <LLF_RND_WaitRngInterrupt>
   3459e:	9b05      	ldr	r3, [sp, #20]
   345a0:	f003 031a 	and.w	r3, r3, #26
   345a4:	4303      	orrs	r3, r0
   345a6:	d135      	bne.n	34614 <getTrngSource+0x1f0>
   345a8:	4a4e      	ldr	r2, [pc, #312]	; (346e4 <getTrngSource+0x2c0>)
   345aa:	4b4f      	ldr	r3, [pc, #316]	; (346e8 <getTrngSource+0x2c4>)
   345ac:	6812      	ldr	r2, [r2, #0]
   345ae:	9206      	str	r2, [sp, #24]
   345b0:	681a      	ldr	r2, [r3, #0]
   345b2:	9207      	str	r2, [sp, #28]
   345b4:	685a      	ldr	r2, [r3, #4]
   345b6:	9208      	str	r2, [sp, #32]
   345b8:	689a      	ldr	r2, [r3, #8]
   345ba:	9209      	str	r2, [sp, #36]	; 0x24
   345bc:	68da      	ldr	r2, [r3, #12]
   345be:	920a      	str	r2, [sp, #40]	; 0x28
   345c0:	3310      	adds	r3, #16
   345c2:	fba7 2705 	umull	r2, r7, r7, r5
   345c6:	681b      	ldr	r3, [r3, #0]
   345c8:	930b      	str	r3, [sp, #44]	; 0x2c
   345ca:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   345ce:	d102      	bne.n	345d6 <getTrngSource+0x1b2>
   345d0:	f1bb 0f00 	cmp.w	fp, #0
   345d4:	d141      	bne.n	3465a <getTrngSource+0x236>
   345d6:	2218      	movs	r2, #24
   345d8:	4630      	mov	r0, r6
   345da:	eb0d 0102 	add.w	r1, sp, r2
   345de:	f000 fb0f 	bl	34c00 <CC_PalMemCopyPlat>
   345e2:	3d18      	subs	r5, #24
   345e4:	3618      	adds	r6, #24
   345e6:	f109 0901 	add.w	r9, r9, #1
   345ea:	2d00      	cmp	r5, #0
   345ec:	f47f af52 	bne.w	34494 <getTrngSource+0x70>
   345f0:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   345f4:	d85d      	bhi.n	346b2 <getTrngSource+0x28e>
   345f6:	9d03      	ldr	r5, [sp, #12]
   345f8:	6962      	ldr	r2, [r4, #20]
   345fa:	4651      	mov	r1, sl
   345fc:	4628      	mov	r0, r5
   345fe:	f7ff fe7b 	bl	342f8 <LLF_RND_RepetitionCounterTest.part.0>
   34602:	2800      	cmp	r0, #0
   34604:	d04b      	beq.n	3469e <getTrngSource+0x27a>
   34606:	9a16      	ldr	r2, [sp, #88]	; 0x58
   34608:	2300      	movs	r3, #0
   3460a:	6013      	str	r3, [r2, #0]
   3460c:	4b2d      	ldr	r3, [pc, #180]	; (346c4 <getTrngSource+0x2a0>)
   3460e:	4298      	cmp	r0, r3
   34610:	f43f af58 	beq.w	344c4 <getTrngSource+0xa0>
   34614:	9d04      	ldr	r5, [sp, #16]
   34616:	2d08      	cmp	r5, #8
   34618:	d034      	beq.n	34684 <getTrngSource+0x260>
   3461a:	2200      	movs	r2, #0
   3461c:	ab04      	add	r3, sp, #16
   3461e:	006d      	lsls	r5, r5, #1
   34620:	9200      	str	r2, [sp, #0]
   34622:	4621      	mov	r1, r4
   34624:	4640      	mov	r0, r8
   34626:	9504      	str	r5, [sp, #16]
   34628:	f7ff fdb8 	bl	3419c <startTrngHW>
   3462c:	4b2f      	ldr	r3, [pc, #188]	; (346ec <getTrngSource+0x2c8>)
   3462e:	4298      	cmp	r0, r3
   34630:	d024      	beq.n	3467c <getTrngSource+0x258>
   34632:	2800      	cmp	r0, #0
   34634:	f47f af46 	bne.w	344c4 <getTrngSource+0xa0>
   34638:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   3463c:	0a13      	lsrs	r3, r2, #8
   3463e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   34642:	4313      	orrs	r3, r2
   34644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   34648:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   3464c:	9b02      	ldr	r3, [sp, #8]
   3464e:	3b01      	subs	r3, #1
   34650:	9302      	str	r3, [sp, #8]
   34652:	f47f af14 	bne.w	3447e <getTrngSource+0x5a>
   34656:	2000      	movs	r0, #0
   34658:	e734      	b.n	344c4 <getTrngSource+0xa0>
   3465a:	4630      	mov	r0, r6
   3465c:	465a      	mov	r2, fp
   3465e:	a906      	add	r1, sp, #24
   34660:	f000 face 	bl	34c00 <CC_PalMemCopyPlat>
   34664:	eba5 050b 	sub.w	r5, r5, fp
   34668:	445e      	add	r6, fp
   3466a:	e7bc      	b.n	345e6 <getTrngSource+0x1c2>
   3466c:	481f      	ldr	r0, [pc, #124]	; (346ec <getTrngSource+0x2c8>)
   3466e:	e725      	b.n	344bc <getTrngSource+0x98>
   34670:	481f      	ldr	r0, [pc, #124]	; (346f0 <getTrngSource+0x2cc>)
   34672:	e723      	b.n	344bc <getTrngSource+0x98>
   34674:	2703      	movs	r7, #3
   34676:	e74b      	b.n	34510 <getTrngSource+0xec>
   34678:	2702      	movs	r7, #2
   3467a:	e749      	b.n	34510 <getTrngSource+0xec>
   3467c:	6a23      	ldr	r3, [r4, #32]
   3467e:	2b00      	cmp	r3, #0
   34680:	f43f af20 	beq.w	344c4 <getTrngSource+0xa0>
   34684:	481b      	ldr	r0, [pc, #108]	; (346f4 <getTrngSource+0x2d0>)
   34686:	e71d      	b.n	344c4 <getTrngSource+0xa0>
   34688:	9500      	str	r5, [sp, #0]
   3468a:	ab04      	add	r3, sp, #16
   3468c:	2201      	movs	r2, #1
   3468e:	4621      	mov	r1, r4
   34690:	4638      	mov	r0, r7
   34692:	f7ff fd83 	bl	3419c <startTrngHW>
   34696:	2800      	cmp	r0, #0
   34698:	f43f aee2 	beq.w	34460 <getTrngSource+0x3c>
   3469c:	e712      	b.n	344c4 <getTrngSource+0xa0>
   3469e:	69a2      	ldr	r2, [r4, #24]
   346a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   346a4:	4651      	mov	r1, sl
   346a6:	4628      	mov	r0, r5
   346a8:	f7ff fe54 	bl	34354 <LLF_RND_AdaptiveProportionTest>
   346ac:	2800      	cmp	r0, #0
   346ae:	d1aa      	bne.n	34606 <getTrngSource+0x1e2>
   346b0:	e7d1      	b.n	34656 <getTrngSource+0x232>
   346b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   346b4:	601d      	str	r5, [r3, #0]
   346b6:	e7ad      	b.n	34614 <getTrngSource+0x1f0>
   346b8:	5002b138 	.word	0x5002b138
   346bc:	5002b130 	.word	0x5002b130
   346c0:	aaaaaaab 	.word	0xaaaaaaab
   346c4:	00f10c02 	.word	0x00f10c02
   346c8:	00f10c30 	.word	0x00f10c30
   346cc:	5002b1c4 	.word	0x5002b1c4
   346d0:	5002b12c 	.word	0x5002b12c
   346d4:	5002b100 	.word	0x5002b100
   346d8:	5002b10c 	.word	0x5002b10c
   346dc:	5002ba04 	.word	0x5002ba04
   346e0:	5002b1d8 	.word	0x5002b1d8
   346e4:	5002b114 	.word	0x5002b114
   346e8:	5002b118 	.word	0x5002b118
   346ec:	00f10c31 	.word	0x00f10c31
   346f0:	00f10c35 	.word	0x00f10c35
   346f4:	00f10c32 	.word	0x00f10c32

000346f8 <LLF_RND_GetTrngSource>:
   346f8:	b430      	push	{r4, r5}
   346fa:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   346fe:	9d04      	ldr	r5, [sp, #16]
   34700:	9402      	str	r4, [sp, #8]
   34702:	2400      	movs	r4, #0
   34704:	e9cd 5403 	strd	r5, r4, [sp, #12]
   34708:	bc30      	pop	{r4, r5}
   3470a:	f7ff be8b 	b.w	34424 <getTrngSource>
   3470e:	bf00      	nop

00034710 <LLF_RND_RunTrngStartupTest>:
   34710:	b510      	push	{r4, lr}
   34712:	b086      	sub	sp, #24
   34714:	ab05      	add	r3, sp, #20
   34716:	2401      	movs	r4, #1
   34718:	e9cd 2401 	strd	r2, r4, [sp, #4]
   3471c:	9300      	str	r3, [sp, #0]
   3471e:	2200      	movs	r2, #0
   34720:	ab04      	add	r3, sp, #16
   34722:	f7ff fe7f 	bl	34424 <getTrngSource>
   34726:	b006      	add	sp, #24
   34728:	bd10      	pop	{r4, pc}
   3472a:	bf00      	nop

0003472c <mbedtls_hardware_poll>:
   3472c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3472e:	b089      	sub	sp, #36	; 0x24
   34730:	9205      	str	r2, [sp, #20]
   34732:	2900      	cmp	r1, #0
   34734:	d064      	beq.n	34800 <mbedtls_hardware_poll+0xd4>
   34736:	461c      	mov	r4, r3
   34738:	2b00      	cmp	r3, #0
   3473a:	d061      	beq.n	34800 <mbedtls_hardware_poll+0xd4>
   3473c:	4615      	mov	r5, r2
   3473e:	2a00      	cmp	r2, #0
   34740:	d05e      	beq.n	34800 <mbedtls_hardware_poll+0xd4>
   34742:	4f31      	ldr	r7, [pc, #196]	; (34808 <mbedtls_hardware_poll+0xdc>)
   34744:	460e      	mov	r6, r1
   34746:	6838      	ldr	r0, [r7, #0]
   34748:	f04f 31ff 	mov.w	r1, #4294967295
   3474c:	f7ff fca2 	bl	34094 <CC_PalMutexLock>
   34750:	2800      	cmp	r0, #0
   34752:	d14b      	bne.n	347ec <mbedtls_hardware_poll+0xc0>
   34754:	2000      	movs	r0, #0
   34756:	f7ff fccd 	bl	340f4 <CC_PalPowerSaveModeSelect>
   3475a:	2800      	cmp	r0, #0
   3475c:	d142      	bne.n	347e4 <mbedtls_hardware_poll+0xb8>
   3475e:	482b      	ldr	r0, [pc, #172]	; (3480c <mbedtls_hardware_poll+0xe0>)
   34760:	f000 fa12 	bl	34b88 <RNG_PLAT_SetUserRngParameters>
   34764:	b1d8      	cbz	r0, 3479e <mbedtls_hardware_poll+0x72>
   34766:	2001      	movs	r0, #1
   34768:	f04f 36ff 	mov.w	r6, #4294967295
   3476c:	f7ff fcc2 	bl	340f4 <CC_PalPowerSaveModeSelect>
   34770:	2800      	cmp	r0, #0
   34772:	d133      	bne.n	347dc <mbedtls_hardware_poll+0xb0>
   34774:	4826      	ldr	r0, [pc, #152]	; (34810 <mbedtls_hardware_poll+0xe4>)
   34776:	f44f 7108 	mov.w	r1, #544	; 0x220
   3477a:	f7fe fe47 	bl	3340c <mbedtls_zeroize_internal>
   3477e:	4825      	ldr	r0, [pc, #148]	; (34814 <mbedtls_hardware_poll+0xe8>)
   34780:	21dc      	movs	r1, #220	; 0xdc
   34782:	f7fe fe43 	bl	3340c <mbedtls_zeroize_internal>
   34786:	4821      	ldr	r0, [pc, #132]	; (3480c <mbedtls_hardware_poll+0xe0>)
   34788:	2128      	movs	r1, #40	; 0x28
   3478a:	f7fe fe3f 	bl	3340c <mbedtls_zeroize_internal>
   3478e:	6838      	ldr	r0, [r7, #0]
   34790:	f7ff fc88 	bl	340a4 <CC_PalMutexUnlock>
   34794:	2800      	cmp	r0, #0
   34796:	d12d      	bne.n	347f4 <mbedtls_hardware_poll+0xc8>
   34798:	4630      	mov	r0, r6
   3479a:	b009      	add	sp, #36	; 0x24
   3479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3479e:	491c      	ldr	r1, [pc, #112]	; (34810 <mbedtls_hardware_poll+0xe4>)
   347a0:	9003      	str	r0, [sp, #12]
   347a2:	ab07      	add	r3, sp, #28
   347a4:	4602      	mov	r2, r0
   347a6:	9102      	str	r1, [sp, #8]
   347a8:	9300      	str	r3, [sp, #0]
   347aa:	4918      	ldr	r1, [pc, #96]	; (3480c <mbedtls_hardware_poll+0xe0>)
   347ac:	4819      	ldr	r0, [pc, #100]	; (34814 <mbedtls_hardware_poll+0xe8>)
   347ae:	9401      	str	r4, [sp, #4]
   347b0:	ab05      	add	r3, sp, #20
   347b2:	f7ff ffa1 	bl	346f8 <LLF_RND_GetTrngSource>
   347b6:	4603      	mov	r3, r0
   347b8:	2800      	cmp	r0, #0
   347ba:	d1d4      	bne.n	34766 <mbedtls_hardware_poll+0x3a>
   347bc:	6822      	ldr	r2, [r4, #0]
   347be:	42aa      	cmp	r2, r5
   347c0:	d3d1      	bcc.n	34766 <mbedtls_hardware_poll+0x3a>
   347c2:	9907      	ldr	r1, [sp, #28]
   347c4:	4630      	mov	r0, r6
   347c6:	3108      	adds	r1, #8
   347c8:	462a      	mov	r2, r5
   347ca:	461e      	mov	r6, r3
   347cc:	f000 fa18 	bl	34c00 <CC_PalMemCopyPlat>
   347d0:	6025      	str	r5, [r4, #0]
   347d2:	2001      	movs	r0, #1
   347d4:	f7ff fc8e 	bl	340f4 <CC_PalPowerSaveModeSelect>
   347d8:	2800      	cmp	r0, #0
   347da:	d0cb      	beq.n	34774 <mbedtls_hardware_poll+0x48>
   347dc:	480e      	ldr	r0, [pc, #56]	; (34818 <mbedtls_hardware_poll+0xec>)
   347de:	f7fe fd0d 	bl	331fc <CC_PalAbort>
   347e2:	e7c7      	b.n	34774 <mbedtls_hardware_poll+0x48>
   347e4:	480d      	ldr	r0, [pc, #52]	; (3481c <mbedtls_hardware_poll+0xf0>)
   347e6:	f7fe fd09 	bl	331fc <CC_PalAbort>
   347ea:	e7b8      	b.n	3475e <mbedtls_hardware_poll+0x32>
   347ec:	480c      	ldr	r0, [pc, #48]	; (34820 <mbedtls_hardware_poll+0xf4>)
   347ee:	f7fe fd05 	bl	331fc <CC_PalAbort>
   347f2:	e7af      	b.n	34754 <mbedtls_hardware_poll+0x28>
   347f4:	480b      	ldr	r0, [pc, #44]	; (34824 <mbedtls_hardware_poll+0xf8>)
   347f6:	f7fe fd01 	bl	331fc <CC_PalAbort>
   347fa:	4630      	mov	r0, r6
   347fc:	b009      	add	sp, #36	; 0x24
   347fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34800:	f04f 36ff 	mov.w	r6, #4294967295
   34804:	e7c8      	b.n	34798 <mbedtls_hardware_poll+0x6c>
   34806:	bf00      	nop
   34808:	20000768 	.word	0x20000768
   3480c:	2000361c 	.word	0x2000361c
   34810:	200033fc 	.word	0x200033fc
   34814:	20003320 	.word	0x20003320
   34818:	0003bef4 	.word	0x0003bef4
   3481c:	0003bed4 	.word	0x0003bed4
   34820:	0003bebc 	.word	0x0003bebc
   34824:	0003bf4c 	.word	0x0003bf4c

00034828 <cc_mbedtls_aes_init>:
   34828:	b510      	push	{r4, lr}
   3482a:	4604      	mov	r4, r0
   3482c:	b130      	cbz	r0, 3483c <cc_mbedtls_aes_init+0x14>
   3482e:	2200      	movs	r2, #0
   34830:	2301      	movs	r3, #1
   34832:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   34836:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   3483a:	bd10      	pop	{r4, pc}
   3483c:	4801      	ldr	r0, [pc, #4]	; (34844 <cc_mbedtls_aes_init+0x1c>)
   3483e:	f7fe fcdd 	bl	331fc <CC_PalAbort>
   34842:	e7f4      	b.n	3482e <cc_mbedtls_aes_init+0x6>
   34844:	0003bf64 	.word	0x0003bf64

00034848 <cc_mbedtls_aes_free>:
   34848:	b118      	cbz	r0, 34852 <cc_mbedtls_aes_free+0xa>
   3484a:	2274      	movs	r2, #116	; 0x74
   3484c:	2100      	movs	r1, #0
   3484e:	f000 b9d9 	b.w	34c04 <CC_PalMemSetPlat>
   34852:	4770      	bx	lr

00034854 <cc_mbedtls_aes_setkey_enc>:
   34854:	b190      	cbz	r0, 3487c <cc_mbedtls_aes_setkey_enc+0x28>
   34856:	b1a1      	cbz	r1, 34882 <cc_mbedtls_aes_setkey_enc+0x2e>
   34858:	b510      	push	{r4, lr}
   3485a:	2a80      	cmp	r2, #128	; 0x80
   3485c:	f04f 0400 	mov.w	r4, #0
   34860:	6384      	str	r4, [r0, #56]	; 0x38
   34862:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   34866:	d106      	bne.n	34876 <cc_mbedtls_aes_setkey_enc+0x22>
   34868:	6304      	str	r4, [r0, #48]	; 0x30
   3486a:	2210      	movs	r2, #16
   3486c:	3010      	adds	r0, #16
   3486e:	f000 f9c7 	bl	34c00 <CC_PalMemCopyPlat>
   34872:	4620      	mov	r0, r4
   34874:	bd10      	pop	{r4, pc}
   34876:	f06f 001f 	mvn.w	r0, #31
   3487a:	bd10      	pop	{r4, pc}
   3487c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   34880:	4770      	bx	lr
   34882:	f06f 001f 	mvn.w	r0, #31
   34886:	4770      	bx	lr

00034888 <cc_mbedtls_aes_crypt_ecb>:
   34888:	b320      	cbz	r0, 348d4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   3488a:	b31a      	cbz	r2, 348d4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   3488c:	b313      	cbz	r3, 348d4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   3488e:	2901      	cmp	r1, #1
   34890:	d820      	bhi.n	348d4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   34892:	b570      	push	{r4, r5, r6, lr}
   34894:	4604      	mov	r4, r0
   34896:	6b81      	ldr	r1, [r0, #56]	; 0x38
   34898:	b086      	sub	sp, #24
   3489a:	d016      	beq.n	348ca <cc_mbedtls_aes_crypt_ecb+0x42>
   3489c:	2901      	cmp	r1, #1
   3489e:	d116      	bne.n	348ce <cc_mbedtls_aes_crypt_ecb+0x46>
   348a0:	2100      	movs	r1, #0
   348a2:	2510      	movs	r5, #16
   348a4:	ae04      	add	r6, sp, #16
   348a6:	6361      	str	r1, [r4, #52]	; 0x34
   348a8:	4610      	mov	r0, r2
   348aa:	e9cd 5600 	strd	r5, r6, [sp]
   348ae:	aa02      	add	r2, sp, #8
   348b0:	4629      	mov	r1, r5
   348b2:	f000 fa4d 	bl	34d50 <SetDataBuffersInfo>
   348b6:	b950      	cbnz	r0, 348ce <cc_mbedtls_aes_crypt_ecb+0x46>
   348b8:	462b      	mov	r3, r5
   348ba:	4632      	mov	r2, r6
   348bc:	a902      	add	r1, sp, #8
   348be:	4620      	mov	r0, r4
   348c0:	f000 fcda 	bl	35278 <ProcessAesDrv>
   348c4:	b918      	cbnz	r0, 348ce <cc_mbedtls_aes_crypt_ecb+0x46>
   348c6:	b006      	add	sp, #24
   348c8:	bd70      	pop	{r4, r5, r6, pc}
   348ca:	2900      	cmp	r1, #0
   348cc:	d0e8      	beq.n	348a0 <cc_mbedtls_aes_crypt_ecb+0x18>
   348ce:	f06f 0021 	mvn.w	r0, #33	; 0x21
   348d2:	e7f8      	b.n	348c6 <cc_mbedtls_aes_crypt_ecb+0x3e>
   348d4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   348d8:	4770      	bx	lr
   348da:	bf00      	nop

000348dc <cc_mbedtls_sha256_init>:
   348dc:	b510      	push	{r4, lr}
   348de:	4604      	mov	r4, r0
   348e0:	b128      	cbz	r0, 348ee <cc_mbedtls_sha256_init+0x12>
   348e2:	4620      	mov	r0, r4
   348e4:	21f0      	movs	r1, #240	; 0xf0
   348e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   348ea:	f000 b98d 	b.w	34c08 <CC_PalMemSetZeroPlat>
   348ee:	4804      	ldr	r0, [pc, #16]	; (34900 <cc_mbedtls_sha256_init+0x24>)
   348f0:	f7fe fc84 	bl	331fc <CC_PalAbort>
   348f4:	4620      	mov	r0, r4
   348f6:	21f0      	movs	r1, #240	; 0xf0
   348f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   348fc:	f000 b984 	b.w	34c08 <CC_PalMemSetZeroPlat>
   34900:	0003bf78 	.word	0x0003bf78

00034904 <cc_mbedtls_sha256_free>:
   34904:	b110      	cbz	r0, 3490c <cc_mbedtls_sha256_free+0x8>
   34906:	21f0      	movs	r1, #240	; 0xf0
   34908:	f7fe bd80 	b.w	3340c <mbedtls_zeroize_internal>
   3490c:	4770      	bx	lr
   3490e:	bf00      	nop

00034910 <cc_mbedtls_sha256_starts>:
   34910:	b508      	push	{r3, lr}
   34912:	b161      	cbz	r1, 3492e <cc_mbedtls_sha256_starts+0x1e>
   34914:	2901      	cmp	r1, #1
   34916:	d107      	bne.n	34928 <cc_mbedtls_sha256_starts+0x18>
   34918:	2102      	movs	r1, #2
   3491a:	f000 f85b 	bl	349d4 <mbedtls_sha_starts_internal>
   3491e:	2800      	cmp	r0, #0
   34920:	bf18      	it	ne
   34922:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   34926:	bd08      	pop	{r3, pc}
   34928:	f06f 0036 	mvn.w	r0, #54	; 0x36
   3492c:	bd08      	pop	{r3, pc}
   3492e:	2101      	movs	r1, #1
   34930:	f000 f850 	bl	349d4 <mbedtls_sha_starts_internal>
   34934:	e7f3      	b.n	3491e <cc_mbedtls_sha256_starts+0xe>
   34936:	bf00      	nop

00034938 <cc_mbedtls_sha256_update>:
   34938:	b570      	push	{r4, r5, r6, lr}
   3493a:	188e      	adds	r6, r1, r2
   3493c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   34940:	b0a0      	sub	sp, #128	; 0x80
   34942:	460b      	mov	r3, r1
   34944:	4614      	mov	r4, r2
   34946:	4605      	mov	r5, r0
   34948:	d801      	bhi.n	3494e <cc_mbedtls_sha256_update+0x16>
   3494a:	2a80      	cmp	r2, #128	; 0x80
   3494c:	d90c      	bls.n	34968 <cc_mbedtls_sha256_update+0x30>
   3494e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   34952:	d917      	bls.n	34984 <cc_mbedtls_sha256_update+0x4c>
   34954:	4622      	mov	r2, r4
   34956:	4619      	mov	r1, r3
   34958:	4628      	mov	r0, r5
   3495a:	f000 f87d 	bl	34a58 <mbedtls_sha_update_internal>
   3495e:	4604      	mov	r4, r0
   34960:	b984      	cbnz	r4, 34984 <cc_mbedtls_sha256_update+0x4c>
   34962:	4620      	mov	r0, r4
   34964:	b020      	add	sp, #128	; 0x80
   34966:	bd70      	pop	{r4, r5, r6, pc}
   34968:	4668      	mov	r0, sp
   3496a:	f000 f949 	bl	34c00 <CC_PalMemCopyPlat>
   3496e:	4622      	mov	r2, r4
   34970:	4669      	mov	r1, sp
   34972:	4628      	mov	r0, r5
   34974:	f000 f870 	bl	34a58 <mbedtls_sha_update_internal>
   34978:	2180      	movs	r1, #128	; 0x80
   3497a:	4604      	mov	r4, r0
   3497c:	4668      	mov	r0, sp
   3497e:	f000 f943 	bl	34c08 <CC_PalMemSetZeroPlat>
   34982:	e7ed      	b.n	34960 <cc_mbedtls_sha256_update+0x28>
   34984:	f06f 0436 	mvn.w	r4, #54	; 0x36
   34988:	e7eb      	b.n	34962 <cc_mbedtls_sha256_update+0x2a>
   3498a:	bf00      	nop

0003498c <cc_mbedtls_sha256_finish>:
   3498c:	b570      	push	{r4, r5, r6, lr}
   3498e:	b1e8      	cbz	r0, 349cc <cc_mbedtls_sha256_finish+0x40>
   34990:	460e      	mov	r6, r1
   34992:	b1d9      	cbz	r1, 349cc <cc_mbedtls_sha256_finish+0x40>
   34994:	4604      	mov	r4, r0
   34996:	f000 f831 	bl	349fc <mbedtls_sha_finish_internal>
   3499a:	4605      	mov	r5, r0
   3499c:	b9b0      	cbnz	r0, 349cc <cc_mbedtls_sha256_finish+0x40>
   3499e:	6823      	ldr	r3, [r4, #0]
   349a0:	2b01      	cmp	r3, #1
   349a2:	d00b      	beq.n	349bc <cc_mbedtls_sha256_finish+0x30>
   349a4:	2b02      	cmp	r3, #2
   349a6:	d001      	beq.n	349ac <cc_mbedtls_sha256_finish+0x20>
   349a8:	4628      	mov	r0, r5
   349aa:	bd70      	pop	{r4, r5, r6, pc}
   349ac:	f104 0108 	add.w	r1, r4, #8
   349b0:	4630      	mov	r0, r6
   349b2:	221c      	movs	r2, #28
   349b4:	f000 f924 	bl	34c00 <CC_PalMemCopyPlat>
   349b8:	4628      	mov	r0, r5
   349ba:	bd70      	pop	{r4, r5, r6, pc}
   349bc:	f104 0108 	add.w	r1, r4, #8
   349c0:	4630      	mov	r0, r6
   349c2:	2220      	movs	r2, #32
   349c4:	f000 f91c 	bl	34c00 <CC_PalMemCopyPlat>
   349c8:	4628      	mov	r0, r5
   349ca:	bd70      	pop	{r4, r5, r6, pc}
   349cc:	f06f 0536 	mvn.w	r5, #54	; 0x36
   349d0:	e7ea      	b.n	349a8 <cc_mbedtls_sha256_finish+0x1c>
   349d2:	bf00      	nop

000349d4 <mbedtls_sha_starts_internal>:
   349d4:	b178      	cbz	r0, 349f6 <mbedtls_sha_starts_internal+0x22>
   349d6:	b538      	push	{r3, r4, r5, lr}
   349d8:	4604      	mov	r4, r0
   349da:	460d      	mov	r5, r1
   349dc:	21f0      	movs	r1, #240	; 0xf0
   349de:	f000 f913 	bl	34c08 <CC_PalMemSetZeroPlat>
   349e2:	2340      	movs	r3, #64	; 0x40
   349e4:	6025      	str	r5, [r4, #0]
   349e6:	65e3      	str	r3, [r4, #92]	; 0x5c
   349e8:	4620      	mov	r0, r4
   349ea:	f000 f9e5 	bl	34db8 <InitHashDrv>
   349ee:	3800      	subs	r0, #0
   349f0:	bf18      	it	ne
   349f2:	2001      	movne	r0, #1
   349f4:	bd38      	pop	{r3, r4, r5, pc}
   349f6:	2001      	movs	r0, #1
   349f8:	4770      	bx	lr
   349fa:	bf00      	nop

000349fc <mbedtls_sha_finish_internal>:
   349fc:	b570      	push	{r4, r5, r6, lr}
   349fe:	6e05      	ldr	r5, [r0, #96]	; 0x60
   34a00:	b0a4      	sub	sp, #144	; 0x90
   34a02:	4604      	mov	r4, r0
   34a04:	ae04      	add	r6, sp, #16
   34a06:	b9e5      	cbnz	r5, 34a42 <mbedtls_sha_finish_internal+0x46>
   34a08:	2201      	movs	r2, #1
   34a0a:	2300      	movs	r3, #0
   34a0c:	6062      	str	r2, [r4, #4]
   34a0e:	4630      	mov	r0, r6
   34a10:	e9cd 3300 	strd	r3, r3, [sp]
   34a14:	aa02      	add	r2, sp, #8
   34a16:	4629      	mov	r1, r5
   34a18:	f000 f99a 	bl	34d50 <SetDataBuffersInfo>
   34a1c:	b110      	cbz	r0, 34a24 <mbedtls_sha_finish_internal+0x28>
   34a1e:	2001      	movs	r0, #1
   34a20:	b024      	add	sp, #144	; 0x90
   34a22:	bd70      	pop	{r4, r5, r6, pc}
   34a24:	462a      	mov	r2, r5
   34a26:	a902      	add	r1, sp, #8
   34a28:	4620      	mov	r0, r4
   34a2a:	f000 f9ef 	bl	34e0c <ProcessHashDrv>
   34a2e:	2800      	cmp	r0, #0
   34a30:	d1f5      	bne.n	34a1e <mbedtls_sha_finish_internal+0x22>
   34a32:	4620      	mov	r0, r4
   34a34:	f000 fb18 	bl	35068 <FinishHashDrv>
   34a38:	2800      	cmp	r0, #0
   34a3a:	d1f0      	bne.n	34a1e <mbedtls_sha_finish_internal+0x22>
   34a3c:	6620      	str	r0, [r4, #96]	; 0x60
   34a3e:	b024      	add	sp, #144	; 0x90
   34a40:	bd70      	pop	{r4, r5, r6, pc}
   34a42:	2d80      	cmp	r5, #128	; 0x80
   34a44:	462a      	mov	r2, r5
   34a46:	4630      	mov	r0, r6
   34a48:	bf28      	it	cs
   34a4a:	2280      	movcs	r2, #128	; 0x80
   34a4c:	f104 0164 	add.w	r1, r4, #100	; 0x64
   34a50:	f000 f8d6 	bl	34c00 <CC_PalMemCopyPlat>
   34a54:	6e25      	ldr	r5, [r4, #96]	; 0x60
   34a56:	e7d7      	b.n	34a08 <mbedtls_sha_finish_internal+0xc>

00034a58 <mbedtls_sha_update_internal>:
   34a58:	2800      	cmp	r0, #0
   34a5a:	d054      	beq.n	34b06 <mbedtls_sha_update_internal+0xae>
   34a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   34a5e:	4614      	mov	r4, r2
   34a60:	b0a5      	sub	sp, #148	; 0x94
   34a62:	b1b2      	cbz	r2, 34a92 <mbedtls_sha_update_internal+0x3a>
   34a64:	460e      	mov	r6, r1
   34a66:	b351      	cbz	r1, 34abe <mbedtls_sha_update_internal+0x66>
   34a68:	4605      	mov	r5, r0
   34a6a:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   34a6e:	1a1a      	subs	r2, r3, r0
   34a70:	fbb2 f7f3 	udiv	r7, r2, r3
   34a74:	fb03 2717 	mls	r7, r3, r7, r2
   34a78:	42a7      	cmp	r7, r4
   34a7a:	bf28      	it	cs
   34a7c:	4627      	movcs	r7, r4
   34a7e:	2f00      	cmp	r7, #0
   34a80:	d143      	bne.n	34b0a <mbedtls_sha_update_internal+0xb2>
   34a82:	4283      	cmp	r3, r0
   34a84:	d008      	beq.n	34a98 <mbedtls_sha_update_internal+0x40>
   34a86:	fbb4 f7f3 	udiv	r7, r4, r3
   34a8a:	fb03 f707 	mul.w	r7, r3, r7
   34a8e:	b9cf      	cbnz	r7, 34ac4 <mbedtls_sha_update_internal+0x6c>
   34a90:	bb6c      	cbnz	r4, 34aee <mbedtls_sha_update_internal+0x96>
   34a92:	2000      	movs	r0, #0
   34a94:	b025      	add	sp, #148	; 0x94
   34a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34a98:	2b80      	cmp	r3, #128	; 0x80
   34a9a:	bf28      	it	cs
   34a9c:	2380      	movcs	r3, #128	; 0x80
   34a9e:	461a      	mov	r2, r3
   34aa0:	f105 0164 	add.w	r1, r5, #100	; 0x64
   34aa4:	a804      	add	r0, sp, #16
   34aa6:	f000 f8ab 	bl	34c00 <CC_PalMemCopyPlat>
   34aaa:	2300      	movs	r3, #0
   34aac:	e9cd 3300 	strd	r3, r3, [sp]
   34ab0:	a804      	add	r0, sp, #16
   34ab2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   34ab4:	aa02      	add	r2, sp, #8
   34ab6:	f000 f94b 	bl	34d50 <SetDataBuffersInfo>
   34aba:	2800      	cmp	r0, #0
   34abc:	d032      	beq.n	34b24 <mbedtls_sha_update_internal+0xcc>
   34abe:	2001      	movs	r0, #1
   34ac0:	b025      	add	sp, #148	; 0x94
   34ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34ac4:	2300      	movs	r3, #0
   34ac6:	e9cd 3300 	strd	r3, r3, [sp]
   34aca:	aa02      	add	r2, sp, #8
   34acc:	4639      	mov	r1, r7
   34ace:	4630      	mov	r0, r6
   34ad0:	f000 f93e 	bl	34d50 <SetDataBuffersInfo>
   34ad4:	2800      	cmp	r0, #0
   34ad6:	d1f2      	bne.n	34abe <mbedtls_sha_update_internal+0x66>
   34ad8:	a902      	add	r1, sp, #8
   34ada:	463a      	mov	r2, r7
   34adc:	4628      	mov	r0, r5
   34ade:	f000 f995 	bl	34e0c <ProcessHashDrv>
   34ae2:	2800      	cmp	r0, #0
   34ae4:	d1eb      	bne.n	34abe <mbedtls_sha_update_internal+0x66>
   34ae6:	1be4      	subs	r4, r4, r7
   34ae8:	443e      	add	r6, r7
   34aea:	2c00      	cmp	r4, #0
   34aec:	d0d1      	beq.n	34a92 <mbedtls_sha_update_internal+0x3a>
   34aee:	6e28      	ldr	r0, [r5, #96]	; 0x60
   34af0:	3019      	adds	r0, #25
   34af2:	4622      	mov	r2, r4
   34af4:	4631      	mov	r1, r6
   34af6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   34afa:	f000 f881 	bl	34c00 <CC_PalMemCopyPlat>
   34afe:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   34b00:	4422      	add	r2, r4
   34b02:	662a      	str	r2, [r5, #96]	; 0x60
   34b04:	e7c5      	b.n	34a92 <mbedtls_sha_update_internal+0x3a>
   34b06:	2001      	movs	r0, #1
   34b08:	4770      	bx	lr
   34b0a:	f105 0364 	add.w	r3, r5, #100	; 0x64
   34b0e:	4418      	add	r0, r3
   34b10:	463a      	mov	r2, r7
   34b12:	f000 f875 	bl	34c00 <CC_PalMemCopyPlat>
   34b16:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   34b1a:	4438      	add	r0, r7
   34b1c:	443e      	add	r6, r7
   34b1e:	1be4      	subs	r4, r4, r7
   34b20:	6628      	str	r0, [r5, #96]	; 0x60
   34b22:	e7ae      	b.n	34a82 <mbedtls_sha_update_internal+0x2a>
   34b24:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   34b26:	a902      	add	r1, sp, #8
   34b28:	4628      	mov	r0, r5
   34b2a:	f000 f96f 	bl	34e0c <ProcessHashDrv>
   34b2e:	2800      	cmp	r0, #0
   34b30:	d1c5      	bne.n	34abe <mbedtls_sha_update_internal+0x66>
   34b32:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   34b34:	6628      	str	r0, [r5, #96]	; 0x60
   34b36:	e7a6      	b.n	34a86 <mbedtls_sha_update_internal+0x2e>

00034b38 <cc_mbedtls_sha256>:
   34b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34b3a:	461c      	mov	r4, r3
   34b3c:	4605      	mov	r5, r0
   34b3e:	4811      	ldr	r0, [pc, #68]	; (34b84 <cc_mbedtls_sha256+0x4c>)
   34b40:	460e      	mov	r6, r1
   34b42:	4617      	mov	r7, r2
   34b44:	f7ff feca 	bl	348dc <cc_mbedtls_sha256_init>
   34b48:	4621      	mov	r1, r4
   34b4a:	480e      	ldr	r0, [pc, #56]	; (34b84 <cc_mbedtls_sha256+0x4c>)
   34b4c:	f7ff fee0 	bl	34910 <cc_mbedtls_sha256_starts>
   34b50:	4604      	mov	r4, r0
   34b52:	b120      	cbz	r0, 34b5e <cc_mbedtls_sha256+0x26>
   34b54:	480b      	ldr	r0, [pc, #44]	; (34b84 <cc_mbedtls_sha256+0x4c>)
   34b56:	f7ff fed5 	bl	34904 <cc_mbedtls_sha256_free>
   34b5a:	4620      	mov	r0, r4
   34b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34b5e:	4809      	ldr	r0, [pc, #36]	; (34b84 <cc_mbedtls_sha256+0x4c>)
   34b60:	4632      	mov	r2, r6
   34b62:	4629      	mov	r1, r5
   34b64:	f7ff fee8 	bl	34938 <cc_mbedtls_sha256_update>
   34b68:	4604      	mov	r4, r0
   34b6a:	2800      	cmp	r0, #0
   34b6c:	d1f2      	bne.n	34b54 <cc_mbedtls_sha256+0x1c>
   34b6e:	4639      	mov	r1, r7
   34b70:	4804      	ldr	r0, [pc, #16]	; (34b84 <cc_mbedtls_sha256+0x4c>)
   34b72:	f7ff ff0b 	bl	3498c <cc_mbedtls_sha256_finish>
   34b76:	4604      	mov	r4, r0
   34b78:	4802      	ldr	r0, [pc, #8]	; (34b84 <cc_mbedtls_sha256+0x4c>)
   34b7a:	f7ff fec3 	bl	34904 <cc_mbedtls_sha256_free>
   34b7e:	4620      	mov	r0, r4
   34b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34b82:	bf00      	nop
   34b84:	20003644 	.word	0x20003644

00034b88 <RNG_PLAT_SetUserRngParameters>:
   34b88:	b530      	push	{r4, r5, lr}
   34b8a:	b083      	sub	sp, #12
   34b8c:	231c      	movs	r3, #28
   34b8e:	a901      	add	r1, sp, #4
   34b90:	4604      	mov	r4, r0
   34b92:	9301      	str	r3, [sp, #4]
   34b94:	f000 f83c 	bl	34c10 <CC_PalTrngParamGet>
   34b98:	4605      	mov	r5, r0
   34b9a:	b938      	cbnz	r0, 34bac <RNG_PLAT_SetUserRngParameters+0x24>
   34b9c:	9b01      	ldr	r3, [sp, #4]
   34b9e:	2b1c      	cmp	r3, #28
   34ba0:	d007      	beq.n	34bb2 <RNG_PLAT_SetUserRngParameters+0x2a>
   34ba2:	4d15      	ldr	r5, [pc, #84]	; (34bf8 <RNG_PLAT_SetUserRngParameters+0x70>)
   34ba4:	4620      	mov	r0, r4
   34ba6:	211c      	movs	r1, #28
   34ba8:	f000 f82e 	bl	34c08 <CC_PalMemSetZeroPlat>
   34bac:	4628      	mov	r0, r5
   34bae:	b003      	add	sp, #12
   34bb0:	bd30      	pop	{r4, r5, pc}
   34bb2:	e9d4 3200 	ldrd	r3, r2, [r4]
   34bb6:	2101      	movs	r1, #1
   34bb8:	3b00      	subs	r3, #0
   34bba:	bf18      	it	ne
   34bbc:	2301      	movne	r3, #1
   34bbe:	61e1      	str	r1, [r4, #28]
   34bc0:	b10a      	cbz	r2, 34bc6 <RNG_PLAT_SetUserRngParameters+0x3e>
   34bc2:	f043 0302 	orr.w	r3, r3, #2
   34bc6:	68a2      	ldr	r2, [r4, #8]
   34bc8:	b932      	cbnz	r2, 34bd8 <RNG_PLAT_SetUserRngParameters+0x50>
   34bca:	68e2      	ldr	r2, [r4, #12]
   34bcc:	b942      	cbnz	r2, 34be0 <RNG_PLAT_SetUserRngParameters+0x58>
   34bce:	e9c4 3208 	strd	r3, r2, [r4, #32]
   34bd2:	b97b      	cbnz	r3, 34bf4 <RNG_PLAT_SetUserRngParameters+0x6c>
   34bd4:	4d09      	ldr	r5, [pc, #36]	; (34bfc <RNG_PLAT_SetUserRngParameters+0x74>)
   34bd6:	e7e5      	b.n	34ba4 <RNG_PLAT_SetUserRngParameters+0x1c>
   34bd8:	68e2      	ldr	r2, [r4, #12]
   34bda:	f043 0304 	orr.w	r3, r3, #4
   34bde:	b13a      	cbz	r2, 34bf0 <RNG_PLAT_SetUserRngParameters+0x68>
   34be0:	f043 0308 	orr.w	r3, r3, #8
   34be4:	2200      	movs	r2, #0
   34be6:	4628      	mov	r0, r5
   34be8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   34bec:	b003      	add	sp, #12
   34bee:	bd30      	pop	{r4, r5, pc}
   34bf0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   34bf4:	4615      	mov	r5, r2
   34bf6:	e7d9      	b.n	34bac <RNG_PLAT_SetUserRngParameters+0x24>
   34bf8:	00f00c37 	.word	0x00f00c37
   34bfc:	00f00c0e 	.word	0x00f00c0e

00034c00 <CC_PalMemCopyPlat>:
   34c00:	f005 bca0 	b.w	3a544 <memmove>

00034c04 <CC_PalMemSetPlat>:
   34c04:	f005 bcb8 	b.w	3a578 <memset>

00034c08 <CC_PalMemSetZeroPlat>:
   34c08:	460a      	mov	r2, r1
   34c0a:	2100      	movs	r1, #0
   34c0c:	f005 bcb4 	b.w	3a578 <memset>

00034c10 <CC_PalTrngParamGet>:
   34c10:	b118      	cbz	r0, 34c1a <CC_PalTrngParamGet+0xa>
   34c12:	b111      	cbz	r1, 34c1a <CC_PalTrngParamGet+0xa>
   34c14:	680b      	ldr	r3, [r1, #0]
   34c16:	2b1c      	cmp	r3, #28
   34c18:	d001      	beq.n	34c1e <CC_PalTrngParamGet+0xe>
   34c1a:	2001      	movs	r0, #1
   34c1c:	4770      	bx	lr
   34c1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   34c22:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   34c26:	3201      	adds	r2, #1
   34c28:	bf14      	ite	ne
   34c2a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   34c2e:	f241 225c 	movweq	r2, #4700	; 0x125c
   34c32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   34c36:	6002      	str	r2, [r0, #0]
   34c38:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   34c3c:	3201      	adds	r2, #1
   34c3e:	bf14      	ite	ne
   34c40:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   34c44:	f641 1264 	movweq	r2, #6500	; 0x1964
   34c48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   34c4c:	6042      	str	r2, [r0, #4]
   34c4e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   34c52:	3201      	adds	r2, #1
   34c54:	bf14      	ite	ne
   34c56:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   34c5a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   34c5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   34c62:	6082      	str	r2, [r0, #8]
   34c64:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   34c68:	3201      	adds	r2, #1
   34c6a:	bf14      	ite	ne
   34c6c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   34c70:	f241 3288 	movweq	r2, #5000	; 0x1388
   34c74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   34c78:	60c2      	str	r2, [r0, #12]
   34c7a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   34c7e:	3201      	adds	r2, #1
   34c80:	bf14      	ite	ne
   34c82:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   34c86:	2290      	moveq	r2, #144	; 0x90
   34c88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   34c8c:	6102      	str	r2, [r0, #16]
   34c8e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   34c92:	3201      	adds	r2, #1
   34c94:	bf14      	ite	ne
   34c96:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   34c9a:	2251      	moveq	r2, #81	; 0x51
   34c9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   34ca0:	6142      	str	r2, [r0, #20]
   34ca2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   34ca6:	3201      	adds	r2, #1
   34ca8:	bf14      	ite	ne
   34caa:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   34cae:	f240 3337 	movweq	r3, #823	; 0x337
   34cb2:	6183      	str	r3, [r0, #24]
   34cb4:	2000      	movs	r0, #0
   34cb6:	4770      	bx	lr

00034cb8 <LLF_RND_WaitRngInterrupt>:
   34cb8:	b508      	push	{r3, lr}
   34cba:	4601      	mov	r1, r0
   34cbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   34cc0:	f7ff f95a 	bl	33f78 <CC_HalWaitInterruptRND>
   34cc4:	4902      	ldr	r1, [pc, #8]	; (34cd0 <LLF_RND_WaitRngInterrupt+0x18>)
   34cc6:	4a03      	ldr	r2, [pc, #12]	; (34cd4 <LLF_RND_WaitRngInterrupt+0x1c>)
   34cc8:	2300      	movs	r3, #0
   34cca:	600b      	str	r3, [r1, #0]
   34ccc:	6013      	str	r3, [r2, #0]
   34cce:	bd08      	pop	{r3, pc}
   34cd0:	5002b1c8 	.word	0x5002b1c8
   34cd4:	5002b12c 	.word	0x5002b12c

00034cd8 <LLF_RND_GetRoscSampleCnt>:
   34cd8:	3801      	subs	r0, #1
   34cda:	2807      	cmp	r0, #7
   34cdc:	d805      	bhi.n	34cea <LLF_RND_GetRoscSampleCnt+0x12>
   34cde:	e8df f000 	tbb	[pc, r0]
   34ce2:	0e0a      	.short	0x0e0a
   34ce4:	04041204 	.word	0x04041204
   34ce8:	0604      	.short	0x0604
   34cea:	4809      	ldr	r0, [pc, #36]	; (34d10 <LLF_RND_GetRoscSampleCnt+0x38>)
   34cec:	4770      	bx	lr
   34cee:	68cb      	ldr	r3, [r1, #12]
   34cf0:	624b      	str	r3, [r1, #36]	; 0x24
   34cf2:	2000      	movs	r0, #0
   34cf4:	4770      	bx	lr
   34cf6:	680b      	ldr	r3, [r1, #0]
   34cf8:	624b      	str	r3, [r1, #36]	; 0x24
   34cfa:	2000      	movs	r0, #0
   34cfc:	4770      	bx	lr
   34cfe:	684b      	ldr	r3, [r1, #4]
   34d00:	624b      	str	r3, [r1, #36]	; 0x24
   34d02:	2000      	movs	r0, #0
   34d04:	4770      	bx	lr
   34d06:	688b      	ldr	r3, [r1, #8]
   34d08:	624b      	str	r3, [r1, #36]	; 0x24
   34d0a:	2000      	movs	r0, #0
   34d0c:	4770      	bx	lr
   34d0e:	bf00      	nop
   34d10:	00f10c31 	.word	0x00f10c31

00034d14 <LLF_RND_GetFastestRosc>:
   34d14:	680b      	ldr	r3, [r1, #0]
   34d16:	e002      	b.n	34d1e <LLF_RND_GetFastestRosc+0xa>
   34d18:	2b08      	cmp	r3, #8
   34d1a:	600b      	str	r3, [r1, #0]
   34d1c:	d806      	bhi.n	34d2c <LLF_RND_GetFastestRosc+0x18>
   34d1e:	6a02      	ldr	r2, [r0, #32]
   34d20:	4213      	tst	r3, r2
   34d22:	ea4f 0343 	mov.w	r3, r3, lsl #1
   34d26:	d0f7      	beq.n	34d18 <LLF_RND_GetFastestRosc+0x4>
   34d28:	2000      	movs	r0, #0
   34d2a:	4770      	bx	lr
   34d2c:	4800      	ldr	r0, [pc, #0]	; (34d30 <LLF_RND_GetFastestRosc+0x1c>)
   34d2e:	4770      	bx	lr
   34d30:	00f10c31 	.word	0x00f10c31

00034d34 <LLF_RND_TurnOffTrng>:
   34d34:	4904      	ldr	r1, [pc, #16]	; (34d48 <LLF_RND_TurnOffTrng+0x14>)
   34d36:	4a05      	ldr	r2, [pc, #20]	; (34d4c <LLF_RND_TurnOffTrng+0x18>)
   34d38:	2300      	movs	r3, #0
   34d3a:	600b      	str	r3, [r1, #0]
   34d3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   34d40:	6013      	str	r3, [r2, #0]
   34d42:	f7ff b8ff 	b.w	33f44 <CC_HalClearInterruptBit>
   34d46:	bf00      	nop
   34d48:	5002b12c 	.word	0x5002b12c
   34d4c:	5002b1c4 	.word	0x5002b1c4

00034d50 <SetDataBuffersInfo>:
   34d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   34d52:	b083      	sub	sp, #12
   34d54:	2400      	movs	r4, #0
   34d56:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   34d5a:	f88d 4007 	strb.w	r4, [sp, #7]
   34d5e:	d325      	bcc.n	34dac <SetDataBuffersInfo+0x5c>
   34d60:	460c      	mov	r4, r1
   34d62:	4404      	add	r4, r0
   34d64:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   34d68:	4605      	mov	r5, r0
   34d6a:	d81f      	bhi.n	34dac <SetDataBuffersInfo+0x5c>
   34d6c:	4617      	mov	r7, r2
   34d6e:	461e      	mov	r6, r3
   34d70:	2201      	movs	r2, #1
   34d72:	f10d 0307 	add.w	r3, sp, #7
   34d76:	f000 fe7f 	bl	35a78 <CC_PalDataBufferAttrGet>
   34d7a:	4604      	mov	r4, r0
   34d7c:	b9b0      	cbnz	r0, 34dac <SetDataBuffersInfo+0x5c>
   34d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34d80:	f89d 3007 	ldrb.w	r3, [sp, #7]
   34d84:	603d      	str	r5, [r7, #0]
   34d86:	713b      	strb	r3, [r7, #4]
   34d88:	b192      	cbz	r2, 34db0 <SetDataBuffersInfo+0x60>
   34d8a:	b14e      	cbz	r6, 34da0 <SetDataBuffersInfo+0x50>
   34d8c:	4602      	mov	r2, r0
   34d8e:	9908      	ldr	r1, [sp, #32]
   34d90:	f10d 0307 	add.w	r3, sp, #7
   34d94:	4630      	mov	r0, r6
   34d96:	f000 fe6f 	bl	35a78 <CC_PalDataBufferAttrGet>
   34d9a:	b938      	cbnz	r0, 34dac <SetDataBuffersInfo+0x5c>
   34d9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   34da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34da2:	4620      	mov	r0, r4
   34da4:	6016      	str	r6, [r2, #0]
   34da6:	7113      	strb	r3, [r2, #4]
   34da8:	b003      	add	sp, #12
   34daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34dac:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   34db0:	4620      	mov	r0, r4
   34db2:	b003      	add	sp, #12
   34db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34db6:	bf00      	nop

00034db8 <InitHashDrv>:
   34db8:	b1e8      	cbz	r0, 34df6 <InitHashDrv+0x3e>
   34dba:	b510      	push	{r4, lr}
   34dbc:	6804      	ldr	r4, [r0, #0]
   34dbe:	2c01      	cmp	r4, #1
   34dc0:	d004      	beq.n	34dcc <InitHashDrv+0x14>
   34dc2:	2c02      	cmp	r4, #2
   34dc4:	d010      	beq.n	34de8 <InitHashDrv+0x30>
   34dc6:	b144      	cbz	r4, 34dda <InitHashDrv+0x22>
   34dc8:	480c      	ldr	r0, [pc, #48]	; (34dfc <InitHashDrv+0x44>)
   34dca:	bd10      	pop	{r4, pc}
   34dcc:	490c      	ldr	r1, [pc, #48]	; (34e00 <InitHashDrv+0x48>)
   34dce:	2220      	movs	r2, #32
   34dd0:	3008      	adds	r0, #8
   34dd2:	f7ff ff15 	bl	34c00 <CC_PalMemCopyPlat>
   34dd6:	2000      	movs	r0, #0
   34dd8:	bd10      	pop	{r4, pc}
   34dda:	490a      	ldr	r1, [pc, #40]	; (34e04 <InitHashDrv+0x4c>)
   34ddc:	2214      	movs	r2, #20
   34dde:	3008      	adds	r0, #8
   34de0:	f7ff ff0e 	bl	34c00 <CC_PalMemCopyPlat>
   34de4:	4620      	mov	r0, r4
   34de6:	bd10      	pop	{r4, pc}
   34de8:	4907      	ldr	r1, [pc, #28]	; (34e08 <InitHashDrv+0x50>)
   34dea:	2220      	movs	r2, #32
   34dec:	3008      	adds	r0, #8
   34dee:	f7ff ff07 	bl	34c00 <CC_PalMemCopyPlat>
   34df2:	2000      	movs	r0, #0
   34df4:	bd10      	pop	{r4, pc}
   34df6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   34dfa:	4770      	bx	lr
   34dfc:	00f30001 	.word	0x00f30001
   34e00:	0003bfbc 	.word	0x0003bfbc
   34e04:	0003bf88 	.word	0x0003bf88
   34e08:	0003bf9c 	.word	0x0003bf9c

00034e0c <ProcessHashDrv>:
   34e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34e10:	2900      	cmp	r1, #0
   34e12:	f000 80ef 	beq.w	34ff4 <ProcessHashDrv+0x1e8>
   34e16:	4604      	mov	r4, r0
   34e18:	2800      	cmp	r0, #0
   34e1a:	f000 80ef 	beq.w	34ffc <ProcessHashDrv+0x1f0>
   34e1e:	6803      	ldr	r3, [r0, #0]
   34e20:	4617      	mov	r7, r2
   34e22:	460e      	mov	r6, r1
   34e24:	2b00      	cmp	r3, #0
   34e26:	f000 80b9 	beq.w	34f9c <ProcessHashDrv+0x190>
   34e2a:	3b01      	subs	r3, #1
   34e2c:	2b01      	cmp	r3, #1
   34e2e:	f200 80cd 	bhi.w	34fcc <ProcessHashDrv+0x1c0>
   34e32:	4874      	ldr	r0, [pc, #464]	; (35004 <ProcessHashDrv+0x1f8>)
   34e34:	f04f 31ff 	mov.w	r1, #4294967295
   34e38:	f04f 0802 	mov.w	r8, #2
   34e3c:	f7ff f92a 	bl	34094 <CC_PalMutexLock>
   34e40:	2800      	cmp	r0, #0
   34e42:	f040 80b5 	bne.w	34fb0 <ProcessHashDrv+0x1a4>
   34e46:	2000      	movs	r0, #0
   34e48:	f7ff f954 	bl	340f4 <CC_PalPowerSaveModeSelect>
   34e4c:	4605      	mov	r5, r0
   34e4e:	2800      	cmp	r0, #0
   34e50:	f040 80b8 	bne.w	34fc4 <ProcessHashDrv+0x1b8>
   34e54:	4a6c      	ldr	r2, [pc, #432]	; (35008 <ProcessHashDrv+0x1fc>)
   34e56:	6813      	ldr	r3, [r2, #0]
   34e58:	2b00      	cmp	r3, #0
   34e5a:	d1fc      	bne.n	34e56 <ProcessHashDrv+0x4a>
   34e5c:	486b      	ldr	r0, [pc, #428]	; (3500c <ProcessHashDrv+0x200>)
   34e5e:	6803      	ldr	r3, [r0, #0]
   34e60:	2b00      	cmp	r3, #0
   34e62:	d1fc      	bne.n	34e5e <ProcessHashDrv+0x52>
   34e64:	f04f 30ff 	mov.w	r0, #4294967295
   34e68:	f7ff f86c 	bl	33f44 <CC_HalClearInterruptBit>
   34e6c:	4b68      	ldr	r3, [pc, #416]	; (35010 <ProcessHashDrv+0x204>)
   34e6e:	6818      	ldr	r0, [r3, #0]
   34e70:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   34e74:	f7ff f874 	bl	33f60 <CC_HalMaskInterrupt>
   34e78:	4866      	ldr	r0, [pc, #408]	; (35014 <ProcessHashDrv+0x208>)
   34e7a:	4a67      	ldr	r2, [pc, #412]	; (35018 <ProcessHashDrv+0x20c>)
   34e7c:	4967      	ldr	r1, [pc, #412]	; (3501c <ProcessHashDrv+0x210>)
   34e7e:	2301      	movs	r3, #1
   34e80:	6003      	str	r3, [r0, #0]
   34e82:	2007      	movs	r0, #7
   34e84:	6010      	str	r0, [r2, #0]
   34e86:	600b      	str	r3, [r1, #0]
   34e88:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   34e8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   34e8e:	6013      	str	r3, [r2, #0]
   34e90:	4b63      	ldr	r3, [pc, #396]	; (35020 <ProcessHashDrv+0x214>)
   34e92:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   34e94:	6051      	str	r1, [r2, #4]
   34e96:	f8c3 8000 	str.w	r8, [r3]
   34e9a:	6823      	ldr	r3, [r4, #0]
   34e9c:	b15b      	cbz	r3, 34eb6 <ProcessHashDrv+0xaa>
   34e9e:	3b01      	subs	r3, #1
   34ea0:	2b01      	cmp	r3, #1
   34ea2:	d817      	bhi.n	34ed4 <ProcessHashDrv+0xc8>
   34ea4:	4b5f      	ldr	r3, [pc, #380]	; (35024 <ProcessHashDrv+0x218>)
   34ea6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   34ea8:	601a      	str	r2, [r3, #0]
   34eaa:	6a22      	ldr	r2, [r4, #32]
   34eac:	f843 2c04 	str.w	r2, [r3, #-4]
   34eb0:	69e2      	ldr	r2, [r4, #28]
   34eb2:	f843 2c08 	str.w	r2, [r3, #-8]
   34eb6:	4b5c      	ldr	r3, [pc, #368]	; (35028 <ProcessHashDrv+0x21c>)
   34eb8:	69a2      	ldr	r2, [r4, #24]
   34eba:	601a      	str	r2, [r3, #0]
   34ebc:	6962      	ldr	r2, [r4, #20]
   34ebe:	f843 2c04 	str.w	r2, [r3, #-4]
   34ec2:	6922      	ldr	r2, [r4, #16]
   34ec4:	f843 2c08 	str.w	r2, [r3, #-8]
   34ec8:	68e2      	ldr	r2, [r4, #12]
   34eca:	f843 2c0c 	str.w	r2, [r3, #-12]
   34ece:	68a2      	ldr	r2, [r4, #8]
   34ed0:	f843 2c10 	str.w	r2, [r3, #-16]
   34ed4:	4a55      	ldr	r2, [pc, #340]	; (3502c <ProcessHashDrv+0x220>)
   34ed6:	6813      	ldr	r3, [r2, #0]
   34ed8:	2b00      	cmp	r3, #0
   34eda:	d1fc      	bne.n	34ed6 <ProcessHashDrv+0xca>
   34edc:	2f00      	cmp	r7, #0
   34ede:	d059      	beq.n	34f94 <ProcessHashDrv+0x188>
   34ee0:	6863      	ldr	r3, [r4, #4]
   34ee2:	2b01      	cmp	r3, #1
   34ee4:	bf04      	itt	eq
   34ee6:	4a52      	ldreq	r2, [pc, #328]	; (35030 <ProcessHashDrv+0x224>)
   34ee8:	6013      	streq	r3, [r2, #0]
   34eea:	4a52      	ldr	r2, [pc, #328]	; (35034 <ProcessHashDrv+0x228>)
   34eec:	4b52      	ldr	r3, [pc, #328]	; (35038 <ProcessHashDrv+0x22c>)
   34eee:	6831      	ldr	r1, [r6, #0]
   34ef0:	6011      	str	r1, [r2, #0]
   34ef2:	2040      	movs	r0, #64	; 0x40
   34ef4:	601f      	str	r7, [r3, #0]
   34ef6:	f7ff f839 	bl	33f6c <CC_HalWaitInterrupt>
   34efa:	4605      	mov	r5, r0
   34efc:	4a4b      	ldr	r2, [pc, #300]	; (3502c <ProcessHashDrv+0x220>)
   34efe:	6813      	ldr	r3, [r2, #0]
   34f00:	2b00      	cmp	r3, #0
   34f02:	d1fc      	bne.n	34efe <ProcessHashDrv+0xf2>
   34f04:	4a41      	ldr	r2, [pc, #260]	; (3500c <ProcessHashDrv+0x200>)
   34f06:	6813      	ldr	r3, [r2, #0]
   34f08:	2b00      	cmp	r3, #0
   34f0a:	d1fc      	bne.n	34f06 <ProcessHashDrv+0xfa>
   34f0c:	6823      	ldr	r3, [r4, #0]
   34f0e:	b15b      	cbz	r3, 34f28 <ProcessHashDrv+0x11c>
   34f10:	3b01      	subs	r3, #1
   34f12:	2b01      	cmp	r3, #1
   34f14:	d817      	bhi.n	34f46 <ProcessHashDrv+0x13a>
   34f16:	4a43      	ldr	r2, [pc, #268]	; (35024 <ProcessHashDrv+0x218>)
   34f18:	4b48      	ldr	r3, [pc, #288]	; (3503c <ProcessHashDrv+0x230>)
   34f1a:	6812      	ldr	r2, [r2, #0]
   34f1c:	6262      	str	r2, [r4, #36]	; 0x24
   34f1e:	681a      	ldr	r2, [r3, #0]
   34f20:	6222      	str	r2, [r4, #32]
   34f22:	3b04      	subs	r3, #4
   34f24:	681b      	ldr	r3, [r3, #0]
   34f26:	61e3      	str	r3, [r4, #28]
   34f28:	4a3f      	ldr	r2, [pc, #252]	; (35028 <ProcessHashDrv+0x21c>)
   34f2a:	4b45      	ldr	r3, [pc, #276]	; (35040 <ProcessHashDrv+0x234>)
   34f2c:	6812      	ldr	r2, [r2, #0]
   34f2e:	61a2      	str	r2, [r4, #24]
   34f30:	681a      	ldr	r2, [r3, #0]
   34f32:	6162      	str	r2, [r4, #20]
   34f34:	f853 2c04 	ldr.w	r2, [r3, #-4]
   34f38:	6122      	str	r2, [r4, #16]
   34f3a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   34f3e:	60e2      	str	r2, [r4, #12]
   34f40:	3b0c      	subs	r3, #12
   34f42:	681b      	ldr	r3, [r3, #0]
   34f44:	60a3      	str	r3, [r4, #8]
   34f46:	4b3f      	ldr	r3, [pc, #252]	; (35044 <ProcessHashDrv+0x238>)
   34f48:	4a3f      	ldr	r2, [pc, #252]	; (35048 <ProcessHashDrv+0x23c>)
   34f4a:	681b      	ldr	r3, [r3, #0]
   34f4c:	64a3      	str	r3, [r4, #72]	; 0x48
   34f4e:	6812      	ldr	r2, [r2, #0]
   34f50:	4b32      	ldr	r3, [pc, #200]	; (3501c <ProcessHashDrv+0x210>)
   34f52:	64e2      	str	r2, [r4, #76]	; 0x4c
   34f54:	4836      	ldr	r0, [pc, #216]	; (35030 <ProcessHashDrv+0x224>)
   34f56:	493d      	ldr	r1, [pc, #244]	; (3504c <ProcessHashDrv+0x240>)
   34f58:	2201      	movs	r2, #1
   34f5a:	601a      	str	r2, [r3, #0]
   34f5c:	2300      	movs	r3, #0
   34f5e:	4a33      	ldr	r2, [pc, #204]	; (3502c <ProcessHashDrv+0x220>)
   34f60:	6003      	str	r3, [r0, #0]
   34f62:	600b      	str	r3, [r1, #0]
   34f64:	6813      	ldr	r3, [r2, #0]
   34f66:	2b00      	cmp	r3, #0
   34f68:	d1fc      	bne.n	34f64 <ProcessHashDrv+0x158>
   34f6a:	4a2a      	ldr	r2, [pc, #168]	; (35014 <ProcessHashDrv+0x208>)
   34f6c:	6013      	str	r3, [r2, #0]
   34f6e:	2d00      	cmp	r5, #0
   34f70:	d13a      	bne.n	34fe8 <ProcessHashDrv+0x1dc>
   34f72:	4b27      	ldr	r3, [pc, #156]	; (35010 <ProcessHashDrv+0x204>)
   34f74:	6818      	ldr	r0, [r3, #0]
   34f76:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   34f7a:	f7fe fff1 	bl	33f60 <CC_HalMaskInterrupt>
   34f7e:	2001      	movs	r0, #1
   34f80:	f7ff f8b8 	bl	340f4 <CC_PalPowerSaveModeSelect>
   34f84:	bb60      	cbnz	r0, 34fe0 <ProcessHashDrv+0x1d4>
   34f86:	481f      	ldr	r0, [pc, #124]	; (35004 <ProcessHashDrv+0x1f8>)
   34f88:	f7ff f88c 	bl	340a4 <CC_PalMutexUnlock>
   34f8c:	bb10      	cbnz	r0, 34fd4 <ProcessHashDrv+0x1c8>
   34f8e:	4628      	mov	r0, r5
   34f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34f94:	4b2d      	ldr	r3, [pc, #180]	; (3504c <ProcessHashDrv+0x240>)
   34f96:	2204      	movs	r2, #4
   34f98:	601a      	str	r2, [r3, #0]
   34f9a:	e7af      	b.n	34efc <ProcessHashDrv+0xf0>
   34f9c:	4819      	ldr	r0, [pc, #100]	; (35004 <ProcessHashDrv+0x1f8>)
   34f9e:	f04f 31ff 	mov.w	r1, #4294967295
   34fa2:	f04f 0801 	mov.w	r8, #1
   34fa6:	f7ff f875 	bl	34094 <CC_PalMutexLock>
   34faa:	2800      	cmp	r0, #0
   34fac:	f43f af4b 	beq.w	34e46 <ProcessHashDrv+0x3a>
   34fb0:	4827      	ldr	r0, [pc, #156]	; (35050 <ProcessHashDrv+0x244>)
   34fb2:	f7fe f923 	bl	331fc <CC_PalAbort>
   34fb6:	2000      	movs	r0, #0
   34fb8:	f7ff f89c 	bl	340f4 <CC_PalPowerSaveModeSelect>
   34fbc:	4605      	mov	r5, r0
   34fbe:	2800      	cmp	r0, #0
   34fc0:	f43f af48 	beq.w	34e54 <ProcessHashDrv+0x48>
   34fc4:	4823      	ldr	r0, [pc, #140]	; (35054 <ProcessHashDrv+0x248>)
   34fc6:	f7fe f919 	bl	331fc <CC_PalAbort>
   34fca:	e743      	b.n	34e54 <ProcessHashDrv+0x48>
   34fcc:	4d22      	ldr	r5, [pc, #136]	; (35058 <ProcessHashDrv+0x24c>)
   34fce:	4628      	mov	r0, r5
   34fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34fd4:	4821      	ldr	r0, [pc, #132]	; (3505c <ProcessHashDrv+0x250>)
   34fd6:	f7fe f911 	bl	331fc <CC_PalAbort>
   34fda:	4628      	mov	r0, r5
   34fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34fe0:	481f      	ldr	r0, [pc, #124]	; (35060 <ProcessHashDrv+0x254>)
   34fe2:	f7fe f90b 	bl	331fc <CC_PalAbort>
   34fe6:	e7ce      	b.n	34f86 <ProcessHashDrv+0x17a>
   34fe8:	f104 0008 	add.w	r0, r4, #8
   34fec:	2110      	movs	r1, #16
   34fee:	f7ff fe0b 	bl	34c08 <CC_PalMemSetZeroPlat>
   34ff2:	e7be      	b.n	34f72 <ProcessHashDrv+0x166>
   34ff4:	4d1b      	ldr	r5, [pc, #108]	; (35064 <ProcessHashDrv+0x258>)
   34ff6:	4628      	mov	r0, r5
   34ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34ffc:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   35000:	e7c5      	b.n	34f8e <ProcessHashDrv+0x182>
   35002:	bf00      	nop
   35004:	20000764 	.word	0x20000764
   35008:	5002b91c 	.word	0x5002b91c
   3500c:	5002bc20 	.word	0x5002bc20
   35010:	5002ba04 	.word	0x5002ba04
   35014:	5002b818 	.word	0x5002b818
   35018:	5002b900 	.word	0x5002b900
   3501c:	5002b7c4 	.word	0x5002b7c4
   35020:	5002b7c0 	.word	0x5002b7c0
   35024:	5002b65c 	.word	0x5002b65c
   35028:	5002b650 	.word	0x5002b650
   3502c:	5002b910 	.word	0x5002b910
   35030:	5002b684 	.word	0x5002b684
   35034:	5002bc28 	.word	0x5002bc28
   35038:	5002bc2c 	.word	0x5002bc2c
   3503c:	5002b658 	.word	0x5002b658
   35040:	5002b64c 	.word	0x5002b64c
   35044:	5002b7cc 	.word	0x5002b7cc
   35048:	5002b7d0 	.word	0x5002b7d0
   3504c:	5002b7c8 	.word	0x5002b7c8
   35050:	0003bebc 	.word	0x0003bebc
   35054:	0003bed4 	.word	0x0003bed4
   35058:	00f30001 	.word	0x00f30001
   3505c:	0003bf14 	.word	0x0003bf14
   35060:	0003bef4 	.word	0x0003bef4
   35064:	00f30003 	.word	0x00f30003

00035068 <FinishHashDrv>:
   35068:	2800      	cmp	r0, #0
   3506a:	d03b      	beq.n	350e4 <FinishHashDrv+0x7c>
   3506c:	b4f0      	push	{r4, r5, r6, r7}
   3506e:	b082      	sub	sp, #8
   35070:	6a43      	ldr	r3, [r0, #36]	; 0x24
   35072:	9301      	str	r3, [sp, #4]
   35074:	6883      	ldr	r3, [r0, #8]
   35076:	fa93 fc83 	rev.w	ip, r3
   3507a:	9b01      	ldr	r3, [sp, #4]
   3507c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   35080:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   35084:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   35088:	ba1b      	rev	r3, r3
   3508a:	6243      	str	r3, [r0, #36]	; 0x24
   3508c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   3508e:	9301      	str	r3, [sp, #4]
   35090:	ba09      	rev	r1, r1
   35092:	6a83      	ldr	r3, [r0, #40]	; 0x28
   35094:	61c1      	str	r1, [r0, #28]
   35096:	ba12      	rev	r2, r2
   35098:	6202      	str	r2, [r0, #32]
   3509a:	ba3f      	rev	r7, r7
   3509c:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   350a0:	ba36      	rev	r6, r6
   350a2:	ba2d      	rev	r5, r5
   350a4:	ba24      	rev	r4, r4
   350a6:	e9c0 c702 	strd	ip, r7, [r0, #8]
   350aa:	e9c0 6504 	strd	r6, r5, [r0, #16]
   350ae:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   350b0:	6b06      	ldr	r6, [r0, #48]	; 0x30
   350b2:	6b45      	ldr	r5, [r0, #52]	; 0x34
   350b4:	6184      	str	r4, [r0, #24]
   350b6:	fa93 fc83 	rev.w	ip, r3
   350ba:	6b84      	ldr	r4, [r0, #56]	; 0x38
   350bc:	9b01      	ldr	r3, [sp, #4]
   350be:	ba3f      	rev	r7, r7
   350c0:	ba36      	rev	r6, r6
   350c2:	ba2d      	rev	r5, r5
   350c4:	ba24      	rev	r4, r4
   350c6:	ba09      	rev	r1, r1
   350c8:	ba12      	rev	r2, r2
   350ca:	ba1b      	rev	r3, r3
   350cc:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   350d0:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   350d4:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   350d8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   350dc:	2000      	movs	r0, #0
   350de:	b002      	add	sp, #8
   350e0:	bcf0      	pop	{r4, r5, r6, r7}
   350e2:	4770      	bx	lr
   350e4:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   350e8:	4770      	bx	lr
   350ea:	bf00      	nop

000350ec <LoadAesKey>:
   350ec:	2800      	cmp	r0, #0
   350ee:	d03b      	beq.n	35168 <LoadAesKey+0x7c>
   350f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   350f4:	2b00      	cmp	r3, #0
   350f6:	d02c      	beq.n	35152 <LoadAesKey+0x66>
   350f8:	2b03      	cmp	r3, #3
   350fa:	b510      	push	{r4, lr}
   350fc:	d00f      	beq.n	3511e <LoadAesKey+0x32>
   350fe:	481c      	ldr	r0, [pc, #112]	; (35170 <LoadAesKey+0x84>)
   35100:	4c1c      	ldr	r4, [pc, #112]	; (35174 <LoadAesKey+0x88>)
   35102:	6822      	ldr	r2, [r4, #0]
   35104:	4b1c      	ldr	r3, [pc, #112]	; (35178 <LoadAesKey+0x8c>)
   35106:	6812      	ldr	r2, [r2, #0]
   35108:	601a      	str	r2, [r3, #0]
   3510a:	6822      	ldr	r2, [r4, #0]
   3510c:	6852      	ldr	r2, [r2, #4]
   3510e:	605a      	str	r2, [r3, #4]
   35110:	6822      	ldr	r2, [r4, #0]
   35112:	6892      	ldr	r2, [r2, #8]
   35114:	609a      	str	r2, [r3, #8]
   35116:	6822      	ldr	r2, [r4, #0]
   35118:	68d2      	ldr	r2, [r2, #12]
   3511a:	60da      	str	r2, [r3, #12]
   3511c:	bd10      	pop	{r4, pc}
   3511e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   35120:	6c00      	ldr	r0, [r0, #64]	; 0x40
   35122:	4c14      	ldr	r4, [pc, #80]	; (35174 <LoadAesKey+0x88>)
   35124:	f000 fba4 	bl	35870 <kmu_validate_kdr_slot_and_size>
   35128:	2800      	cmp	r0, #0
   3512a:	d1ea      	bne.n	35102 <LoadAesKey+0x16>
   3512c:	6821      	ldr	r1, [r4, #0]
   3512e:	4a12      	ldr	r2, [pc, #72]	; (35178 <LoadAesKey+0x8c>)
   35130:	6809      	ldr	r1, [r1, #0]
   35132:	6011      	str	r1, [r2, #0]
   35134:	6821      	ldr	r1, [r4, #0]
   35136:	4b11      	ldr	r3, [pc, #68]	; (3517c <LoadAesKey+0x90>)
   35138:	6849      	ldr	r1, [r1, #4]
   3513a:	6019      	str	r1, [r3, #0]
   3513c:	6821      	ldr	r1, [r4, #0]
   3513e:	6889      	ldr	r1, [r1, #8]
   35140:	6091      	str	r1, [r2, #8]
   35142:	6822      	ldr	r2, [r4, #0]
   35144:	68d2      	ldr	r2, [r2, #12]
   35146:	609a      	str	r2, [r3, #8]
   35148:	f000 fb9e 	bl	35888 <kmu_use_kdr_key>
   3514c:	2800      	cmp	r0, #0
   3514e:	d1d8      	bne.n	35102 <LoadAesKey+0x16>
   35150:	bd10      	pop	{r4, pc}
   35152:	4a09      	ldr	r2, [pc, #36]	; (35178 <LoadAesKey+0x8c>)
   35154:	6901      	ldr	r1, [r0, #16]
   35156:	6011      	str	r1, [r2, #0]
   35158:	6941      	ldr	r1, [r0, #20]
   3515a:	6051      	str	r1, [r2, #4]
   3515c:	6981      	ldr	r1, [r0, #24]
   3515e:	6091      	str	r1, [r2, #8]
   35160:	69c1      	ldr	r1, [r0, #28]
   35162:	60d1      	str	r1, [r2, #12]
   35164:	4618      	mov	r0, r3
   35166:	4770      	bx	lr
   35168:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   3516c:	4770      	bx	lr
   3516e:	bf00      	nop
   35170:	00f10009 	.word	0x00f10009
   35174:	20000754 	.word	0x20000754
   35178:	5002b400 	.word	0x5002b400
   3517c:	5002b404 	.word	0x5002b404

00035180 <InitAes.part.0>:
   35180:	4a32      	ldr	r2, [pc, #200]	; (3524c <InitAes.part.0+0xcc>)
   35182:	b510      	push	{r4, lr}
   35184:	4604      	mov	r4, r0
   35186:	6813      	ldr	r3, [r2, #0]
   35188:	2b00      	cmp	r3, #0
   3518a:	d1fc      	bne.n	35186 <InitAes.part.0+0x6>
   3518c:	4a30      	ldr	r2, [pc, #192]	; (35250 <InitAes.part.0+0xd0>)
   3518e:	6813      	ldr	r3, [r2, #0]
   35190:	2b00      	cmp	r3, #0
   35192:	d1fc      	bne.n	3518e <InitAes.part.0+0xe>
   35194:	4a2f      	ldr	r2, [pc, #188]	; (35254 <InitAes.part.0+0xd4>)
   35196:	6813      	ldr	r3, [r2, #0]
   35198:	2b00      	cmp	r3, #0
   3519a:	d1fc      	bne.n	35196 <InitAes.part.0+0x16>
   3519c:	4a2e      	ldr	r2, [pc, #184]	; (35258 <InitAes.part.0+0xd8>)
   3519e:	6813      	ldr	r3, [r2, #0]
   351a0:	2b00      	cmp	r3, #0
   351a2:	d1fc      	bne.n	3519e <InitAes.part.0+0x1e>
   351a4:	4a2d      	ldr	r2, [pc, #180]	; (3525c <InitAes.part.0+0xdc>)
   351a6:	6813      	ldr	r3, [r2, #0]
   351a8:	2b00      	cmp	r3, #0
   351aa:	d1fc      	bne.n	351a6 <InitAes.part.0+0x26>
   351ac:	4a2c      	ldr	r2, [pc, #176]	; (35260 <InitAes.part.0+0xe0>)
   351ae:	6813      	ldr	r3, [r2, #0]
   351b0:	2b00      	cmp	r3, #0
   351b2:	d1fc      	bne.n	351ae <InitAes.part.0+0x2e>
   351b4:	f04f 30ff 	mov.w	r0, #4294967295
   351b8:	f7fe fec4 	bl	33f44 <CC_HalClearInterruptBit>
   351bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   351be:	f023 0304 	bic.w	r3, r3, #4
   351c2:	2b03      	cmp	r3, #3
   351c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   351c6:	d036      	beq.n	35236 <InitAes.part.0+0xb6>
   351c8:	2b01      	cmp	r3, #1
   351ca:	4b26      	ldr	r3, [pc, #152]	; (35264 <InitAes.part.0+0xe4>)
   351cc:	6818      	ldr	r0, [r3, #0]
   351ce:	bf0c      	ite	eq
   351d0:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   351d4:	f020 0020 	bicne.w	r0, r0, #32
   351d8:	f7fe fec2 	bl	33f60 <CC_HalMaskInterrupt>
   351dc:	4b22      	ldr	r3, [pc, #136]	; (35268 <InitAes.part.0+0xe8>)
   351de:	4a1b      	ldr	r2, [pc, #108]	; (3524c <InitAes.part.0+0xcc>)
   351e0:	2101      	movs	r1, #1
   351e2:	6019      	str	r1, [r3, #0]
   351e4:	6813      	ldr	r3, [r2, #0]
   351e6:	2b00      	cmp	r3, #0
   351e8:	d1fc      	bne.n	351e4 <InitAes.part.0+0x64>
   351ea:	4a19      	ldr	r2, [pc, #100]	; (35250 <InitAes.part.0+0xd0>)
   351ec:	6813      	ldr	r3, [r2, #0]
   351ee:	2b00      	cmp	r3, #0
   351f0:	d1fc      	bne.n	351ec <InitAes.part.0+0x6c>
   351f2:	491e      	ldr	r1, [pc, #120]	; (3526c <InitAes.part.0+0xec>)
   351f4:	4a15      	ldr	r2, [pc, #84]	; (3524c <InitAes.part.0+0xcc>)
   351f6:	600b      	str	r3, [r1, #0]
   351f8:	6813      	ldr	r3, [r2, #0]
   351fa:	2b00      	cmp	r3, #0
   351fc:	d1fc      	bne.n	351f8 <InitAes.part.0+0x78>
   351fe:	4a14      	ldr	r2, [pc, #80]	; (35250 <InitAes.part.0+0xd0>)
   35200:	6813      	ldr	r3, [r2, #0]
   35202:	2b00      	cmp	r3, #0
   35204:	d1fc      	bne.n	35200 <InitAes.part.0+0x80>
   35206:	6b62      	ldr	r2, [r4, #52]	; 0x34
   35208:	f022 0104 	bic.w	r1, r2, #4
   3520c:	2903      	cmp	r1, #3
   3520e:	bf18      	it	ne
   35210:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   35212:	4917      	ldr	r1, [pc, #92]	; (35270 <InitAes.part.0+0xf0>)
   35214:	ea4f 0282 	mov.w	r2, r2, lsl #2
   35218:	bf18      	it	ne
   3521a:	f003 0301 	andne.w	r3, r3, #1
   3521e:	f002 021c 	and.w	r2, r2, #28
   35222:	4313      	orrs	r3, r2
   35224:	600b      	str	r3, [r1, #0]
   35226:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35228:	2b07      	cmp	r3, #7
   3522a:	d102      	bne.n	35232 <InitAes.part.0+0xb2>
   3522c:	4b11      	ldr	r3, [pc, #68]	; (35274 <InitAes.part.0+0xf4>)
   3522e:	2201      	movs	r2, #1
   35230:	601a      	str	r2, [r3, #0]
   35232:	2000      	movs	r0, #0
   35234:	bd10      	pop	{r4, pc}
   35236:	2b01      	cmp	r3, #1
   35238:	4b0a      	ldr	r3, [pc, #40]	; (35264 <InitAes.part.0+0xe4>)
   3523a:	6818      	ldr	r0, [r3, #0]
   3523c:	bf0c      	ite	eq
   3523e:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   35242:	f020 0010 	bicne.w	r0, r0, #16
   35246:	f7fe fe8b 	bl	33f60 <CC_HalMaskInterrupt>
   3524a:	e7c7      	b.n	351dc <InitAes.part.0+0x5c>
   3524c:	5002b910 	.word	0x5002b910
   35250:	5002b470 	.word	0x5002b470
   35254:	5002bd20 	.word	0x5002bd20
   35258:	5002bc20 	.word	0x5002bc20
   3525c:	5002bd38 	.word	0x5002bd38
   35260:	5002bc38 	.word	0x5002bc38
   35264:	5002ba04 	.word	0x5002ba04
   35268:	5002b900 	.word	0x5002b900
   3526c:	5002b4bc 	.word	0x5002b4bc
   35270:	5002b4c0 	.word	0x5002b4c0
   35274:	5002b47c 	.word	0x5002b47c

00035278 <ProcessAesDrv>:
   35278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3527c:	b087      	sub	sp, #28
   3527e:	2900      	cmp	r1, #0
   35280:	f000 80a5 	beq.w	353ce <ProcessAesDrv+0x156>
   35284:	4616      	mov	r6, r2
   35286:	2a00      	cmp	r2, #0
   35288:	f000 80a1 	beq.w	353ce <ProcessAesDrv+0x156>
   3528c:	4604      	mov	r4, r0
   3528e:	2800      	cmp	r0, #0
   35290:	f000 813f 	beq.w	35512 <ProcessAesDrv+0x29a>
   35294:	461f      	mov	r7, r3
   35296:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   35298:	460d      	mov	r5, r1
   3529a:	2b00      	cmp	r3, #0
   3529c:	d150      	bne.n	35340 <ProcessAesDrv+0xc8>
   3529e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   352a2:	d252      	bcs.n	3534a <ProcessAesDrv+0xd2>
   352a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   352a8:	2b04      	cmp	r3, #4
   352aa:	f000 8109 	beq.w	354c0 <ProcessAesDrv+0x248>
   352ae:	f04f 0800 	mov.w	r8, #0
   352b2:	48aa      	ldr	r0, [pc, #680]	; (3555c <ProcessAesDrv+0x2e4>)
   352b4:	f04f 31ff 	mov.w	r1, #4294967295
   352b8:	f7fe feec 	bl	34094 <CC_PalMutexLock>
   352bc:	2800      	cmp	r0, #0
   352be:	f040 80de 	bne.w	3547e <ProcessAesDrv+0x206>
   352c2:	2000      	movs	r0, #0
   352c4:	f7fe ff16 	bl	340f4 <CC_PalPowerSaveModeSelect>
   352c8:	2800      	cmp	r0, #0
   352ca:	f040 80e1 	bne.w	35490 <ProcessAesDrv+0x218>
   352ce:	4ba4      	ldr	r3, [pc, #656]	; (35560 <ProcessAesDrv+0x2e8>)
   352d0:	4aa4      	ldr	r2, [pc, #656]	; (35564 <ProcessAesDrv+0x2ec>)
   352d2:	2101      	movs	r1, #1
   352d4:	6019      	str	r1, [r3, #0]
   352d6:	6813      	ldr	r3, [r2, #0]
   352d8:	2b00      	cmp	r3, #0
   352da:	d1fc      	bne.n	352d6 <ProcessAesDrv+0x5e>
   352dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   352de:	2b03      	cmp	r3, #3
   352e0:	dc39      	bgt.n	35356 <ProcessAesDrv+0xde>
   352e2:	2b00      	cmp	r3, #0
   352e4:	da3a      	bge.n	3535c <ProcessAesDrv+0xe4>
   352e6:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 355b0 <ProcessAesDrv+0x338>
   352ea:	4a9e      	ldr	r2, [pc, #632]	; (35564 <ProcessAesDrv+0x2ec>)
   352ec:	6813      	ldr	r3, [r2, #0]
   352ee:	2b00      	cmp	r3, #0
   352f0:	d1fc      	bne.n	352ec <ProcessAesDrv+0x74>
   352f2:	f1b8 0f00 	cmp.w	r8, #0
   352f6:	f040 80da 	bne.w	354ae <ProcessAesDrv+0x236>
   352fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   352fc:	f023 0304 	bic.w	r3, r3, #4
   35300:	2b03      	cmp	r3, #3
   35302:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   35304:	d058      	beq.n	353b8 <ProcessAesDrv+0x140>
   35306:	2b01      	cmp	r3, #1
   35308:	4b97      	ldr	r3, [pc, #604]	; (35568 <ProcessAesDrv+0x2f0>)
   3530a:	6818      	ldr	r0, [r3, #0]
   3530c:	bf0c      	ite	eq
   3530e:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   35312:	f040 0020 	orrne.w	r0, r0, #32
   35316:	f7fe fe23 	bl	33f60 <CC_HalMaskInterrupt>
   3531a:	4b91      	ldr	r3, [pc, #580]	; (35560 <ProcessAesDrv+0x2e8>)
   3531c:	2200      	movs	r2, #0
   3531e:	601a      	str	r2, [r3, #0]
   35320:	2001      	movs	r0, #1
   35322:	f7fe fee7 	bl	340f4 <CC_PalPowerSaveModeSelect>
   35326:	2800      	cmp	r0, #0
   35328:	f040 80bd 	bne.w	354a6 <ProcessAesDrv+0x22e>
   3532c:	488b      	ldr	r0, [pc, #556]	; (3555c <ProcessAesDrv+0x2e4>)
   3532e:	f7fe feb9 	bl	340a4 <CC_PalMutexUnlock>
   35332:	2800      	cmp	r0, #0
   35334:	f040 80b0 	bne.w	35498 <ProcessAesDrv+0x220>
   35338:	4648      	mov	r0, r9
   3533a:	b007      	add	sp, #28
   3533c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35340:	2b01      	cmp	r3, #1
   35342:	d1af      	bne.n	352a4 <ProcessAesDrv+0x2c>
   35344:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   35348:	d3ac      	bcc.n	352a4 <ProcessAesDrv+0x2c>
   3534a:	f8df 9268 	ldr.w	r9, [pc, #616]	; 355b4 <ProcessAesDrv+0x33c>
   3534e:	4648      	mov	r0, r9
   35350:	b007      	add	sp, #28
   35352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35356:	3b06      	subs	r3, #6
   35358:	2b01      	cmp	r3, #1
   3535a:	d8c4      	bhi.n	352e6 <ProcessAesDrv+0x6e>
   3535c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3535e:	2b01      	cmp	r3, #1
   35360:	f200 80d4 	bhi.w	3550c <ProcessAesDrv+0x294>
   35364:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   35366:	2b01      	cmp	r3, #1
   35368:	d837      	bhi.n	353da <ProcessAesDrv+0x162>
   3536a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   3536c:	2b01      	cmp	r3, #1
   3536e:	f200 8131 	bhi.w	355d4 <ProcessAesDrv+0x35c>
   35372:	4620      	mov	r0, r4
   35374:	f7ff ff04 	bl	35180 <InitAes.part.0>
   35378:	4681      	mov	r9, r0
   3537a:	2800      	cmp	r0, #0
   3537c:	d1b5      	bne.n	352ea <ProcessAesDrv+0x72>
   3537e:	4620      	mov	r0, r4
   35380:	f7ff feb4 	bl	350ec <LoadAesKey>
   35384:	4681      	mov	r9, r0
   35386:	2800      	cmp	r0, #0
   35388:	d1af      	bne.n	352ea <ProcessAesDrv+0x72>
   3538a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3538c:	2b07      	cmp	r3, #7
   3538e:	d8aa      	bhi.n	352e6 <ProcessAesDrv+0x6e>
   35390:	a201      	add	r2, pc, #4	; (adr r2, 35398 <ProcessAesDrv+0x120>)
   35392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   35396:	bf00      	nop
   35398:	000353f5 	.word	0x000353f5
   3539c:	000353e1 	.word	0x000353e1
   353a0:	00035551 	.word	0x00035551
   353a4:	000353e1 	.word	0x000353e1
   353a8:	000352e7 	.word	0x000352e7
   353ac:	000352e7 	.word	0x000352e7
   353b0:	00035551 	.word	0x00035551
   353b4:	000353e1 	.word	0x000353e1
   353b8:	2b01      	cmp	r3, #1
   353ba:	4b6b      	ldr	r3, [pc, #428]	; (35568 <ProcessAesDrv+0x2f0>)
   353bc:	6818      	ldr	r0, [r3, #0]
   353be:	bf0c      	ite	eq
   353c0:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   353c4:	f040 0010 	orrne.w	r0, r0, #16
   353c8:	f7fe fdca 	bl	33f60 <CC_HalMaskInterrupt>
   353cc:	e7a5      	b.n	3531a <ProcessAesDrv+0xa2>
   353ce:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 355b8 <ProcessAesDrv+0x340>
   353d2:	4648      	mov	r0, r9
   353d4:	b007      	add	sp, #28
   353d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   353da:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 355bc <ProcessAesDrv+0x344>
   353de:	e784      	b.n	352ea <ProcessAesDrv+0x72>
   353e0:	4b62      	ldr	r3, [pc, #392]	; (3556c <ProcessAesDrv+0x2f4>)
   353e2:	6822      	ldr	r2, [r4, #0]
   353e4:	601a      	str	r2, [r3, #0]
   353e6:	6862      	ldr	r2, [r4, #4]
   353e8:	605a      	str	r2, [r3, #4]
   353ea:	68a2      	ldr	r2, [r4, #8]
   353ec:	609a      	str	r2, [r3, #8]
   353ee:	68e2      	ldr	r2, [r4, #12]
   353f0:	60da      	str	r2, [r3, #12]
   353f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   353f4:	682a      	ldr	r2, [r5, #0]
   353f6:	f023 0304 	bic.w	r3, r3, #4
   353fa:	2b03      	cmp	r3, #3
   353fc:	d009      	beq.n	35412 <ProcessAesDrv+0x19a>
   353fe:	6e21      	ldr	r1, [r4, #96]	; 0x60
   35400:	6833      	ldr	r3, [r6, #0]
   35402:	2901      	cmp	r1, #1
   35404:	bf07      	ittee	eq
   35406:	485a      	ldreq	r0, [pc, #360]	; (35570 <ProcessAesDrv+0x2f8>)
   35408:	495a      	ldreq	r1, [pc, #360]	; (35574 <ProcessAesDrv+0x2fc>)
   3540a:	485b      	ldrne	r0, [pc, #364]	; (35578 <ProcessAesDrv+0x300>)
   3540c:	495b      	ldrne	r1, [pc, #364]	; (3557c <ProcessAesDrv+0x304>)
   3540e:	6003      	str	r3, [r0, #0]
   35410:	600f      	str	r7, [r1, #0]
   35412:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   35414:	2b01      	cmp	r3, #1
   35416:	bf0b      	itete	eq
   35418:	4b59      	ldreq	r3, [pc, #356]	; (35580 <ProcessAesDrv+0x308>)
   3541a:	4b5a      	ldrne	r3, [pc, #360]	; (35584 <ProcessAesDrv+0x30c>)
   3541c:	495a      	ldreq	r1, [pc, #360]	; (35588 <ProcessAesDrv+0x310>)
   3541e:	495b      	ldrne	r1, [pc, #364]	; (3558c <ProcessAesDrv+0x314>)
   35420:	600a      	str	r2, [r1, #0]
   35422:	601f      	str	r7, [r3, #0]
   35424:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35426:	f023 0304 	bic.w	r3, r3, #4
   3542a:	2b03      	cmp	r3, #3
   3542c:	d074      	beq.n	35518 <ProcessAesDrv+0x2a0>
   3542e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   35430:	2b01      	cmp	r3, #1
   35432:	bf0c      	ite	eq
   35434:	2080      	moveq	r0, #128	; 0x80
   35436:	2020      	movne	r0, #32
   35438:	f7fe fd98 	bl	33f6c <CC_HalWaitInterrupt>
   3543c:	4681      	mov	r9, r0
   3543e:	2800      	cmp	r0, #0
   35440:	f47f af53 	bne.w	352ea <ProcessAesDrv+0x72>
   35444:	4b47      	ldr	r3, [pc, #284]	; (35564 <ProcessAesDrv+0x2ec>)
   35446:	681a      	ldr	r2, [r3, #0]
   35448:	2a00      	cmp	r2, #0
   3544a:	d1fc      	bne.n	35446 <ProcessAesDrv+0x1ce>
   3544c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3544e:	3b01      	subs	r3, #1
   35450:	4691      	mov	r9, r2
   35452:	2b06      	cmp	r3, #6
   35454:	d810      	bhi.n	35478 <ProcessAesDrv+0x200>
   35456:	e8df f003 	tbb	[pc, r3]
   3545a:	7d04      	.short	0x7d04
   3545c:	7d0f0f04 	.word	0x7d0f0f04
   35460:	04          	.byte	0x04
   35461:	00          	.byte	0x00
   35462:	4a42      	ldr	r2, [pc, #264]	; (3556c <ProcessAesDrv+0x2f4>)
   35464:	4b4a      	ldr	r3, [pc, #296]	; (35590 <ProcessAesDrv+0x318>)
   35466:	6812      	ldr	r2, [r2, #0]
   35468:	6022      	str	r2, [r4, #0]
   3546a:	681a      	ldr	r2, [r3, #0]
   3546c:	6062      	str	r2, [r4, #4]
   3546e:	685a      	ldr	r2, [r3, #4]
   35470:	60a2      	str	r2, [r4, #8]
   35472:	3308      	adds	r3, #8
   35474:	681b      	ldr	r3, [r3, #0]
   35476:	60e3      	str	r3, [r4, #12]
   35478:	2301      	movs	r3, #1
   3547a:	65a3      	str	r3, [r4, #88]	; 0x58
   3547c:	e735      	b.n	352ea <ProcessAesDrv+0x72>
   3547e:	4845      	ldr	r0, [pc, #276]	; (35594 <ProcessAesDrv+0x31c>)
   35480:	f7fd febc 	bl	331fc <CC_PalAbort>
   35484:	2000      	movs	r0, #0
   35486:	f7fe fe35 	bl	340f4 <CC_PalPowerSaveModeSelect>
   3548a:	2800      	cmp	r0, #0
   3548c:	f43f af1f 	beq.w	352ce <ProcessAesDrv+0x56>
   35490:	4841      	ldr	r0, [pc, #260]	; (35598 <ProcessAesDrv+0x320>)
   35492:	f7fd feb3 	bl	331fc <CC_PalAbort>
   35496:	e71a      	b.n	352ce <ProcessAesDrv+0x56>
   35498:	4840      	ldr	r0, [pc, #256]	; (3559c <ProcessAesDrv+0x324>)
   3549a:	f7fd feaf 	bl	331fc <CC_PalAbort>
   3549e:	4648      	mov	r0, r9
   354a0:	b007      	add	sp, #28
   354a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   354a6:	483e      	ldr	r0, [pc, #248]	; (355a0 <ProcessAesDrv+0x328>)
   354a8:	f7fd fea8 	bl	331fc <CC_PalAbort>
   354ac:	e73e      	b.n	3532c <ProcessAesDrv+0xb4>
   354ae:	2304      	movs	r3, #4
   354b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   354b4:	2120      	movs	r1, #32
   354b6:	f104 0010 	add.w	r0, r4, #16
   354ba:	f7ff fba5 	bl	34c08 <CC_PalMemSetZeroPlat>
   354be:	e71c      	b.n	352fa <ProcessAesDrv+0x82>
   354c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   354c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   354c4:	f000 f9c8 	bl	35858 <kmu_validate_slot_and_size>
   354c8:	b9e8      	cbnz	r0, 35506 <ProcessAesDrv+0x28e>
   354ca:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 355c0 <ProcessAesDrv+0x348>
   354ce:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 355c4 <ProcessAesDrv+0x34c>
   354d2:	f8d8 3000 	ldr.w	r3, [r8]
   354d6:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 355c8 <ProcessAesDrv+0x350>
   354da:	681b      	ldr	r3, [r3, #0]
   354dc:	f8cb 3000 	str.w	r3, [fp]
   354e0:	f8d8 3000 	ldr.w	r3, [r8]
   354e4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 355cc <ProcessAesDrv+0x354>
   354e8:	685b      	ldr	r3, [r3, #4]
   354ea:	f8ca 3000 	str.w	r3, [sl]
   354ee:	f8d8 3000 	ldr.w	r3, [r8]
   354f2:	4a2c      	ldr	r2, [pc, #176]	; (355a4 <ProcessAesDrv+0x32c>)
   354f4:	689b      	ldr	r3, [r3, #8]
   354f6:	f8c9 3000 	str.w	r3, [r9]
   354fa:	f8d8 3000 	ldr.w	r3, [r8]
   354fe:	68db      	ldr	r3, [r3, #12]
   35500:	6013      	str	r3, [r2, #0]
   35502:	6b21      	ldr	r1, [r4, #48]	; 0x30
   35504:	b171      	cbz	r1, 35524 <ProcessAesDrv+0x2ac>
   35506:	f04f 0801 	mov.w	r8, #1
   3550a:	e6d2      	b.n	352b2 <ProcessAesDrv+0x3a>
   3550c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 355d0 <ProcessAesDrv+0x358>
   35510:	e6eb      	b.n	352ea <ProcessAesDrv+0x72>
   35512:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   35516:	e70f      	b.n	35338 <ProcessAesDrv+0xc0>
   35518:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   3551a:	2b01      	cmp	r3, #1
   3551c:	bf0c      	ite	eq
   3551e:	2040      	moveq	r0, #64	; 0x40
   35520:	2010      	movne	r0, #16
   35522:	e789      	b.n	35438 <ProcessAesDrv+0x1c0>
   35524:	f104 0310 	add.w	r3, r4, #16
   35528:	4618      	mov	r0, r3
   3552a:	9305      	str	r3, [sp, #20]
   3552c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   35530:	e9cd 3200 	strd	r3, r2, [sp]
   35534:	9002      	str	r0, [sp, #8]
   35536:	2010      	movs	r0, #16
   35538:	9003      	str	r0, [sp, #12]
   3553a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   3553e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   35540:	f000 f9ae 	bl	358a0 <kmu_derive_cmac>
   35544:	2800      	cmp	r0, #0
   35546:	d148      	bne.n	355da <ProcessAesDrv+0x362>
   35548:	2300      	movs	r3, #0
   3554a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   3554e:	e7da      	b.n	35506 <ProcessAesDrv+0x28e>
   35550:	4b15      	ldr	r3, [pc, #84]	; (355a8 <ProcessAesDrv+0x330>)
   35552:	e746      	b.n	353e2 <ProcessAesDrv+0x16a>
   35554:	4a14      	ldr	r2, [pc, #80]	; (355a8 <ProcessAesDrv+0x330>)
   35556:	4b15      	ldr	r3, [pc, #84]	; (355ac <ProcessAesDrv+0x334>)
   35558:	e785      	b.n	35466 <ProcessAesDrv+0x1ee>
   3555a:	bf00      	nop
   3555c:	20000764 	.word	0x20000764
   35560:	5002b810 	.word	0x5002b810
   35564:	5002b910 	.word	0x5002b910
   35568:	5002ba04 	.word	0x5002ba04
   3556c:	5002b440 	.word	0x5002b440
   35570:	5002bd28 	.word	0x5002bd28
   35574:	5002bd2c 	.word	0x5002bd2c
   35578:	5002bd30 	.word	0x5002bd30
   3557c:	5002bd34 	.word	0x5002bd34
   35580:	5002bc2c 	.word	0x5002bc2c
   35584:	5002bc34 	.word	0x5002bc34
   35588:	5002bc28 	.word	0x5002bc28
   3558c:	5002bc30 	.word	0x5002bc30
   35590:	5002b444 	.word	0x5002b444
   35594:	0003bebc 	.word	0x0003bebc
   35598:	0003bed4 	.word	0x0003bed4
   3559c:	0003bf14 	.word	0x0003bf14
   355a0:	0003bef4 	.word	0x0003bef4
   355a4:	5002b40c 	.word	0x5002b40c
   355a8:	5002b460 	.word	0x5002b460
   355ac:	5002b464 	.word	0x5002b464
   355b0:	00f10001 	.word	0x00f10001
   355b4:	00f10005 	.word	0x00f10005
   355b8:	00f1000b 	.word	0x00f1000b
   355bc:	00f10003 	.word	0x00f10003
   355c0:	20000754 	.word	0x20000754
   355c4:	5002b400 	.word	0x5002b400
   355c8:	5002b404 	.word	0x5002b404
   355cc:	5002b408 	.word	0x5002b408
   355d0:	00f10002 	.word	0x00f10002
   355d4:	f8df 9038 	ldr.w	r9, [pc, #56]	; 35610 <ProcessAesDrv+0x398>
   355d8:	e687      	b.n	352ea <ProcessAesDrv+0x72>
   355da:	f8d8 3000 	ldr.w	r3, [r8]
   355de:	4a0b      	ldr	r2, [pc, #44]	; (3560c <ProcessAesDrv+0x394>)
   355e0:	681b      	ldr	r3, [r3, #0]
   355e2:	f8cb 3000 	str.w	r3, [fp]
   355e6:	f8d8 3000 	ldr.w	r3, [r8]
   355ea:	685b      	ldr	r3, [r3, #4]
   355ec:	f8ca 3000 	str.w	r3, [sl]
   355f0:	f8d8 3000 	ldr.w	r3, [r8]
   355f4:	689b      	ldr	r3, [r3, #8]
   355f6:	f8c9 3000 	str.w	r3, [r9]
   355fa:	f8d8 3000 	ldr.w	r3, [r8]
   355fe:	68db      	ldr	r3, [r3, #12]
   35600:	6013      	str	r3, [r2, #0]
   35602:	9805      	ldr	r0, [sp, #20]
   35604:	2110      	movs	r1, #16
   35606:	f7ff faff 	bl	34c08 <CC_PalMemSetZeroPlat>
   3560a:	e79d      	b.n	35548 <ProcessAesDrv+0x2d0>
   3560c:	5002b40c 	.word	0x5002b40c
   35610:	00f10004 	.word	0x00f10004

00035614 <FinishAesDrv>:
   35614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35618:	b301      	cbz	r1, 3565c <FinishAesDrv+0x48>
   3561a:	b1fa      	cbz	r2, 3565c <FinishAesDrv+0x48>
   3561c:	4604      	mov	r4, r0
   3561e:	2800      	cmp	r0, #0
   35620:	d07a      	beq.n	35718 <FinishAesDrv+0x104>
   35622:	461d      	mov	r5, r3
   35624:	6b43      	ldr	r3, [r0, #52]	; 0x34
   35626:	2b07      	cmp	r3, #7
   35628:	460e      	mov	r6, r1
   3562a:	d01b      	beq.n	35664 <FinishAesDrv+0x50>
   3562c:	b95d      	cbnz	r5, 35646 <FinishAesDrv+0x32>
   3562e:	2b03      	cmp	r3, #3
   35630:	d110      	bne.n	35654 <FinishAesDrv+0x40>
   35632:	6d83      	ldr	r3, [r0, #88]	; 0x58
   35634:	b973      	cbnz	r3, 35654 <FinishAesDrv+0x40>
   35636:	f100 0364 	add.w	r3, r0, #100	; 0x64
   3563a:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   3563e:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   35642:	600b      	str	r3, [r1, #0]
   35644:	2510      	movs	r5, #16
   35646:	462b      	mov	r3, r5
   35648:	4631      	mov	r1, r6
   3564a:	4620      	mov	r0, r4
   3564c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   35650:	f7ff be12 	b.w	35278 <ProcessAesDrv>
   35654:	462f      	mov	r7, r5
   35656:	4638      	mov	r0, r7
   35658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3565c:	4f66      	ldr	r7, [pc, #408]	; (357f8 <FinishAesDrv+0x1e4>)
   3565e:	4638      	mov	r0, r7
   35660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35664:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   35666:	2b00      	cmp	r3, #0
   35668:	d159      	bne.n	3571e <FinishAesDrv+0x10a>
   3566a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   3566e:	d25b      	bcs.n	35728 <FinishAesDrv+0x114>
   35670:	b915      	cbnz	r5, 35678 <FinishAesDrv+0x64>
   35672:	6da3      	ldr	r3, [r4, #88]	; 0x58
   35674:	2b00      	cmp	r3, #0
   35676:	d157      	bne.n	35728 <FinishAesDrv+0x114>
   35678:	4860      	ldr	r0, [pc, #384]	; (357fc <FinishAesDrv+0x1e8>)
   3567a:	f04f 31ff 	mov.w	r1, #4294967295
   3567e:	f7fe fd09 	bl	34094 <CC_PalMutexLock>
   35682:	2800      	cmp	r0, #0
   35684:	f040 8097 	bne.w	357b6 <FinishAesDrv+0x1a2>
   35688:	2000      	movs	r0, #0
   3568a:	f7fe fd33 	bl	340f4 <CC_PalPowerSaveModeSelect>
   3568e:	2800      	cmp	r0, #0
   35690:	f040 808d 	bne.w	357ae <FinishAesDrv+0x19a>
   35694:	4b5a      	ldr	r3, [pc, #360]	; (35800 <FinishAesDrv+0x1ec>)
   35696:	4a5b      	ldr	r2, [pc, #364]	; (35804 <FinishAesDrv+0x1f0>)
   35698:	2101      	movs	r1, #1
   3569a:	6019      	str	r1, [r3, #0]
   3569c:	6813      	ldr	r3, [r2, #0]
   3569e:	2b00      	cmp	r3, #0
   356a0:	d1fc      	bne.n	3569c <FinishAesDrv+0x88>
   356a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   356a4:	2b03      	cmp	r3, #3
   356a6:	dd20      	ble.n	356ea <FinishAesDrv+0xd6>
   356a8:	3b06      	subs	r3, #6
   356aa:	2b01      	cmp	r3, #1
   356ac:	d81f      	bhi.n	356ee <FinishAesDrv+0xda>
   356ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   356b0:	2b01      	cmp	r3, #1
   356b2:	d83b      	bhi.n	3572c <FinishAesDrv+0x118>
   356b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   356b6:	2b01      	cmp	r3, #1
   356b8:	f200 8085 	bhi.w	357c6 <FinishAesDrv+0x1b2>
   356bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   356be:	2b01      	cmp	r3, #1
   356c0:	f200 8083 	bhi.w	357ca <FinishAesDrv+0x1b6>
   356c4:	4620      	mov	r0, r4
   356c6:	f7ff fd5b 	bl	35180 <InitAes.part.0>
   356ca:	4607      	mov	r7, r0
   356cc:	b980      	cbnz	r0, 356f0 <FinishAesDrv+0xdc>
   356ce:	4620      	mov	r0, r4
   356d0:	f7ff fd0c 	bl	350ec <LoadAesKey>
   356d4:	4607      	mov	r7, r0
   356d6:	b958      	cbnz	r0, 356f0 <FinishAesDrv+0xdc>
   356d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   356da:	2b07      	cmp	r3, #7
   356dc:	d807      	bhi.n	356ee <FinishAesDrv+0xda>
   356de:	e8df f003 	tbb	[pc, r3]
   356e2:	2730      	.short	0x2730
   356e4:	06062755 	.word	0x06062755
   356e8:	2755      	.short	0x2755
   356ea:	2b00      	cmp	r3, #0
   356ec:	dadf      	bge.n	356ae <FinishAesDrv+0x9a>
   356ee:	4f46      	ldr	r7, [pc, #280]	; (35808 <FinishAesDrv+0x1f4>)
   356f0:	4a44      	ldr	r2, [pc, #272]	; (35804 <FinishAesDrv+0x1f0>)
   356f2:	6813      	ldr	r3, [r2, #0]
   356f4:	2b00      	cmp	r3, #0
   356f6:	d1fc      	bne.n	356f2 <FinishAesDrv+0xde>
   356f8:	4a41      	ldr	r2, [pc, #260]	; (35800 <FinishAesDrv+0x1ec>)
   356fa:	2001      	movs	r0, #1
   356fc:	6013      	str	r3, [r2, #0]
   356fe:	f7fe fcf9 	bl	340f4 <CC_PalPowerSaveModeSelect>
   35702:	2800      	cmp	r0, #0
   35704:	d15b      	bne.n	357be <FinishAesDrv+0x1aa>
   35706:	483d      	ldr	r0, [pc, #244]	; (357fc <FinishAesDrv+0x1e8>)
   35708:	f7fe fccc 	bl	340a4 <CC_PalMutexUnlock>
   3570c:	2800      	cmp	r0, #0
   3570e:	d0a2      	beq.n	35656 <FinishAesDrv+0x42>
   35710:	483e      	ldr	r0, [pc, #248]	; (3580c <FinishAesDrv+0x1f8>)
   35712:	f7fd fd73 	bl	331fc <CC_PalAbort>
   35716:	e79e      	b.n	35656 <FinishAesDrv+0x42>
   35718:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   3571c:	e79b      	b.n	35656 <FinishAesDrv+0x42>
   3571e:	2b01      	cmp	r3, #1
   35720:	d1a6      	bne.n	35670 <FinishAesDrv+0x5c>
   35722:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   35726:	d3a3      	bcc.n	35670 <FinishAesDrv+0x5c>
   35728:	4f39      	ldr	r7, [pc, #228]	; (35810 <FinishAesDrv+0x1fc>)
   3572a:	e794      	b.n	35656 <FinishAesDrv+0x42>
   3572c:	4f39      	ldr	r7, [pc, #228]	; (35814 <FinishAesDrv+0x200>)
   3572e:	e7df      	b.n	356f0 <FinishAesDrv+0xdc>
   35730:	4b39      	ldr	r3, [pc, #228]	; (35818 <FinishAesDrv+0x204>)
   35732:	6822      	ldr	r2, [r4, #0]
   35734:	601a      	str	r2, [r3, #0]
   35736:	6862      	ldr	r2, [r4, #4]
   35738:	605a      	str	r2, [r3, #4]
   3573a:	68a2      	ldr	r2, [r4, #8]
   3573c:	609a      	str	r2, [r3, #8]
   3573e:	68e2      	ldr	r2, [r4, #12]
   35740:	60da      	str	r2, [r3, #12]
   35742:	4936      	ldr	r1, [pc, #216]	; (3581c <FinishAesDrv+0x208>)
   35744:	4a36      	ldr	r2, [pc, #216]	; (35820 <FinishAesDrv+0x20c>)
   35746:	2301      	movs	r3, #1
   35748:	600b      	str	r3, [r1, #0]
   3574a:	6015      	str	r5, [r2, #0]
   3574c:	2d00      	cmp	r5, #0
   3574e:	d13e      	bne.n	357ce <FinishAesDrv+0x1ba>
   35750:	6da2      	ldr	r2, [r4, #88]	; 0x58
   35752:	b90a      	cbnz	r2, 35758 <FinishAesDrv+0x144>
   35754:	4a33      	ldr	r2, [pc, #204]	; (35824 <FinishAesDrv+0x210>)
   35756:	6013      	str	r3, [r2, #0]
   35758:	4b2a      	ldr	r3, [pc, #168]	; (35804 <FinishAesDrv+0x1f0>)
   3575a:	681f      	ldr	r7, [r3, #0]
   3575c:	2f00      	cmp	r7, #0
   3575e:	d1fc      	bne.n	3575a <FinishAesDrv+0x146>
   35760:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35762:	3b01      	subs	r3, #1
   35764:	2b06      	cmp	r3, #6
   35766:	d8c3      	bhi.n	356f0 <FinishAesDrv+0xdc>
   35768:	a201      	add	r2, pc, #4	; (adr r2, 35770 <FinishAesDrv+0x15c>)
   3576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3576e:	bf00      	nop
   35770:	00035791 	.word	0x00035791
   35774:	000357a9 	.word	0x000357a9
   35778:	00035791 	.word	0x00035791
   3577c:	000356f1 	.word	0x000356f1
   35780:	000356f1 	.word	0x000356f1
   35784:	000357a9 	.word	0x000357a9
   35788:	00035791 	.word	0x00035791
   3578c:	4b26      	ldr	r3, [pc, #152]	; (35828 <FinishAesDrv+0x214>)
   3578e:	e7d0      	b.n	35732 <FinishAesDrv+0x11e>
   35790:	4a21      	ldr	r2, [pc, #132]	; (35818 <FinishAesDrv+0x204>)
   35792:	4b26      	ldr	r3, [pc, #152]	; (3582c <FinishAesDrv+0x218>)
   35794:	6812      	ldr	r2, [r2, #0]
   35796:	6022      	str	r2, [r4, #0]
   35798:	681a      	ldr	r2, [r3, #0]
   3579a:	6062      	str	r2, [r4, #4]
   3579c:	685a      	ldr	r2, [r3, #4]
   3579e:	60a2      	str	r2, [r4, #8]
   357a0:	3308      	adds	r3, #8
   357a2:	681b      	ldr	r3, [r3, #0]
   357a4:	60e3      	str	r3, [r4, #12]
   357a6:	e7a3      	b.n	356f0 <FinishAesDrv+0xdc>
   357a8:	4a1f      	ldr	r2, [pc, #124]	; (35828 <FinishAesDrv+0x214>)
   357aa:	4b21      	ldr	r3, [pc, #132]	; (35830 <FinishAesDrv+0x21c>)
   357ac:	e7f2      	b.n	35794 <FinishAesDrv+0x180>
   357ae:	4821      	ldr	r0, [pc, #132]	; (35834 <FinishAesDrv+0x220>)
   357b0:	f7fd fd24 	bl	331fc <CC_PalAbort>
   357b4:	e76e      	b.n	35694 <FinishAesDrv+0x80>
   357b6:	4820      	ldr	r0, [pc, #128]	; (35838 <FinishAesDrv+0x224>)
   357b8:	f7fd fd20 	bl	331fc <CC_PalAbort>
   357bc:	e764      	b.n	35688 <FinishAesDrv+0x74>
   357be:	481f      	ldr	r0, [pc, #124]	; (3583c <FinishAesDrv+0x228>)
   357c0:	f7fd fd1c 	bl	331fc <CC_PalAbort>
   357c4:	e79f      	b.n	35706 <FinishAesDrv+0xf2>
   357c6:	4f1e      	ldr	r7, [pc, #120]	; (35840 <FinishAesDrv+0x22c>)
   357c8:	e792      	b.n	356f0 <FinishAesDrv+0xdc>
   357ca:	4f1e      	ldr	r7, [pc, #120]	; (35844 <FinishAesDrv+0x230>)
   357cc:	e790      	b.n	356f0 <FinishAesDrv+0xdc>
   357ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   357d0:	6833      	ldr	r3, [r6, #0]
   357d2:	2a01      	cmp	r2, #1
   357d4:	d00a      	beq.n	357ec <FinishAesDrv+0x1d8>
   357d6:	491c      	ldr	r1, [pc, #112]	; (35848 <FinishAesDrv+0x234>)
   357d8:	4a1c      	ldr	r2, [pc, #112]	; (3584c <FinishAesDrv+0x238>)
   357da:	600b      	str	r3, [r1, #0]
   357dc:	2010      	movs	r0, #16
   357de:	6015      	str	r5, [r2, #0]
   357e0:	f7fe fbc4 	bl	33f6c <CC_HalWaitInterrupt>
   357e4:	4607      	mov	r7, r0
   357e6:	2800      	cmp	r0, #0
   357e8:	d0b6      	beq.n	35758 <FinishAesDrv+0x144>
   357ea:	e781      	b.n	356f0 <FinishAesDrv+0xdc>
   357ec:	4918      	ldr	r1, [pc, #96]	; (35850 <FinishAesDrv+0x23c>)
   357ee:	4a19      	ldr	r2, [pc, #100]	; (35854 <FinishAesDrv+0x240>)
   357f0:	600b      	str	r3, [r1, #0]
   357f2:	2040      	movs	r0, #64	; 0x40
   357f4:	6015      	str	r5, [r2, #0]
   357f6:	e7f3      	b.n	357e0 <FinishAesDrv+0x1cc>
   357f8:	00f1000b 	.word	0x00f1000b
   357fc:	20000764 	.word	0x20000764
   35800:	5002b810 	.word	0x5002b810
   35804:	5002b910 	.word	0x5002b910
   35808:	00f10001 	.word	0x00f10001
   3580c:	0003bf14 	.word	0x0003bf14
   35810:	00f10005 	.word	0x00f10005
   35814:	00f10002 	.word	0x00f10002
   35818:	5002b440 	.word	0x5002b440
   3581c:	5002b47c 	.word	0x5002b47c
   35820:	5002b4bc 	.word	0x5002b4bc
   35824:	5002b524 	.word	0x5002b524
   35828:	5002b460 	.word	0x5002b460
   3582c:	5002b444 	.word	0x5002b444
   35830:	5002b464 	.word	0x5002b464
   35834:	0003bed4 	.word	0x0003bed4
   35838:	0003bebc 	.word	0x0003bebc
   3583c:	0003bef4 	.word	0x0003bef4
   35840:	00f10003 	.word	0x00f10003
   35844:	00f10004 	.word	0x00f10004
   35848:	5002bc30 	.word	0x5002bc30
   3584c:	5002bc34 	.word	0x5002bc34
   35850:	5002bc28 	.word	0x5002bc28
   35854:	5002bc2c 	.word	0x5002bc2c

00035858 <kmu_validate_slot_and_size>:
   35858:	b921      	cbnz	r1, 35864 <kmu_validate_slot_and_size+0xc>
   3585a:	4b03      	ldr	r3, [pc, #12]	; (35868 <kmu_validate_slot_and_size+0x10>)
   3585c:	2800      	cmp	r0, #0
   3585e:	bf18      	it	ne
   35860:	4618      	movne	r0, r3
   35862:	4770      	bx	lr
   35864:	4801      	ldr	r0, [pc, #4]	; (3586c <kmu_validate_slot_and_size+0x14>)
   35866:	4770      	bx	lr
   35868:	00f70001 	.word	0x00f70001
   3586c:	00f70003 	.word	0x00f70003

00035870 <kmu_validate_kdr_slot_and_size>:
   35870:	b921      	cbnz	r1, 3587c <kmu_validate_kdr_slot_and_size+0xc>
   35872:	4b03      	ldr	r3, [pc, #12]	; (35880 <kmu_validate_kdr_slot_and_size+0x10>)
   35874:	2800      	cmp	r0, #0
   35876:	bf18      	it	ne
   35878:	4618      	movne	r0, r3
   3587a:	4770      	bx	lr
   3587c:	4801      	ldr	r0, [pc, #4]	; (35884 <kmu_validate_kdr_slot_and_size+0x14>)
   3587e:	4770      	bx	lr
   35880:	00f70001 	.word	0x00f70001
   35884:	00f70003 	.word	0x00f70003

00035888 <kmu_use_kdr_key>:
   35888:	4903      	ldr	r1, [pc, #12]	; (35898 <kmu_use_kdr_key+0x10>)
   3588a:	4b04      	ldr	r3, [pc, #16]	; (3589c <kmu_use_kdr_key+0x14>)
   3588c:	2000      	movs	r0, #0
   3588e:	2201      	movs	r2, #1
   35890:	6008      	str	r0, [r1, #0]
   35892:	601a      	str	r2, [r3, #0]
   35894:	4770      	bx	lr
   35896:	bf00      	nop
   35898:	5002ba38 	.word	0x5002ba38
   3589c:	5002b478 	.word	0x5002b478

000358a0 <kmu_derive_cmac>:
   358a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   358a4:	b0cd      	sub	sp, #308	; 0x134
   358a6:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   358aa:	460f      	mov	r7, r1
   358ac:	2100      	movs	r1, #0
   358ae:	460c      	mov	r4, r1
   358b0:	4681      	mov	r9, r0
   358b2:	4616      	mov	r6, r2
   358b4:	a80e      	add	r0, sp, #56	; 0x38
   358b6:	2274      	movs	r2, #116	; 0x74
   358b8:	469b      	mov	fp, r3
   358ba:	f004 fe5d 	bl	3a578 <memset>
   358be:	4621      	mov	r1, r4
   358c0:	2280      	movs	r2, #128	; 0x80
   358c2:	a82c      	add	r0, sp, #176	; 0xb0
   358c4:	942b      	str	r4, [sp, #172]	; 0xac
   358c6:	f004 fe57 	bl	3a578 <memset>
   358ca:	2384      	movs	r3, #132	; 0x84
   358cc:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   358d0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   358d4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   358d8:	9305      	str	r3, [sp, #20]
   358da:	d860      	bhi.n	3599e <kmu_derive_cmac+0xfe>
   358dc:	ab05      	add	r3, sp, #20
   358de:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   358e2:	9301      	str	r3, [sp, #4]
   358e4:	9502      	str	r5, [sp, #8]
   358e6:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   358ea:	4659      	mov	r1, fp
   358ec:	4630      	mov	r0, r6
   358ee:	f8cd a000 	str.w	sl, [sp]
   358f2:	f000 f865 	bl	359c0 <UtilCmacBuildDataForDerivation>
   358f6:	2800      	cmp	r0, #0
   358f8:	d14c      	bne.n	35994 <kmu_derive_cmac+0xf4>
   358fa:	2303      	movs	r3, #3
   358fc:	f88d 3013 	strb.w	r3, [sp, #19]
   35900:	f89d 3013 	ldrb.w	r3, [sp, #19]
   35904:	901c      	str	r0, [sp, #112]	; 0x70
   35906:	2200      	movs	r2, #0
   35908:	2110      	movs	r1, #16
   3590a:	a80e      	add	r0, sp, #56	; 0x38
   3590c:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   35910:	2607      	movs	r6, #7
   35912:	2301      	movs	r3, #1
   35914:	2401      	movs	r4, #1
   35916:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   3591a:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   3591e:	971a      	str	r7, [sp, #104]	; 0x68
   35920:	961b      	str	r6, [sp, #108]	; 0x6c
   35922:	9426      	str	r4, [sp, #152]	; 0x98
   35924:	f10d 0920 	add.w	r9, sp, #32
   35928:	f7ff f96e 	bl	34c08 <CC_PalMemSetZeroPlat>
   3592c:	2110      	movs	r1, #16
   3592e:	e9cd 1900 	strd	r1, r9, [sp]
   35932:	ab0a      	add	r3, sp, #40	; 0x28
   35934:	9905      	ldr	r1, [sp, #20]
   35936:	4650      	mov	r0, sl
   35938:	aa06      	add	r2, sp, #24
   3593a:	f7ff fa09 	bl	34d50 <SetDataBuffersInfo>
   3593e:	4607      	mov	r7, r0
   35940:	b150      	cbz	r0, 35958 <kmu_derive_cmac+0xb8>
   35942:	e01e      	b.n	35982 <kmu_derive_cmac+0xe2>
   35944:	f7ff f95c 	bl	34c00 <CC_PalMemCopyPlat>
   35948:	2110      	movs	r1, #16
   3594a:	a80e      	add	r0, sp, #56	; 0x38
   3594c:	f7ff f95c 	bl	34c08 <CC_PalMemSetZeroPlat>
   35950:	3401      	adds	r4, #1
   35952:	1bad      	subs	r5, r5, r6
   35954:	b2e4      	uxtb	r4, r4
   35956:	d027      	beq.n	359a8 <kmu_derive_cmac+0x108>
   35958:	9b05      	ldr	r3, [sp, #20]
   3595a:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   3595e:	2d10      	cmp	r5, #16
   35960:	464a      	mov	r2, r9
   35962:	a906      	add	r1, sp, #24
   35964:	a80e      	add	r0, sp, #56	; 0x38
   35966:	462e      	mov	r6, r5
   35968:	bf28      	it	cs
   3596a:	2610      	movcs	r6, #16
   3596c:	f7ff fe52 	bl	35614 <FinishAesDrv>
   35970:	4603      	mov	r3, r0
   35972:	4632      	mov	r2, r6
   35974:	eb08 0007 	add.w	r0, r8, r7
   35978:	a90e      	add	r1, sp, #56	; 0x38
   3597a:	4437      	add	r7, r6
   3597c:	2b00      	cmp	r3, #0
   3597e:	d0e1      	beq.n	35944 <kmu_derive_cmac+0xa4>
   35980:	461f      	mov	r7, r3
   35982:	a80e      	add	r0, sp, #56	; 0x38
   35984:	2274      	movs	r2, #116	; 0x74
   35986:	2100      	movs	r1, #0
   35988:	f7ff f93c 	bl	34c04 <CC_PalMemSetPlat>
   3598c:	4638      	mov	r0, r7
   3598e:	b04d      	add	sp, #308	; 0x134
   35990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35994:	4f08      	ldr	r7, [pc, #32]	; (359b8 <kmu_derive_cmac+0x118>)
   35996:	4638      	mov	r0, r7
   35998:	b04d      	add	sp, #308	; 0x134
   3599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3599e:	4f07      	ldr	r7, [pc, #28]	; (359bc <kmu_derive_cmac+0x11c>)
   359a0:	4638      	mov	r0, r7
   359a2:	b04d      	add	sp, #308	; 0x134
   359a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   359a8:	a80e      	add	r0, sp, #56	; 0x38
   359aa:	2274      	movs	r2, #116	; 0x74
   359ac:	2100      	movs	r1, #0
   359ae:	462f      	mov	r7, r5
   359b0:	f7ff f928 	bl	34c04 <CC_PalMemSetPlat>
   359b4:	e7ea      	b.n	3598c <kmu_derive_cmac+0xec>
   359b6:	bf00      	nop
   359b8:	00f1000e 	.word	0x00f1000e
   359bc:	00f1000f 	.word	0x00f1000f

000359c0 <UtilCmacBuildDataForDerivation>:
   359c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   359c4:	b082      	sub	sp, #8
   359c6:	2600      	movs	r6, #0
   359c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   359ca:	9601      	str	r6, [sp, #4]
   359cc:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   359d0:	d83c      	bhi.n	35a4c <UtilCmacBuildDataForDerivation+0x8c>
   359d2:	00ee      	lsls	r6, r5, #3
   359d4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   359d8:	f101 35ff 	add.w	r5, r1, #4294967295
   359dc:	461f      	mov	r7, r3
   359de:	bf34      	ite	cc
   359e0:	2303      	movcc	r3, #3
   359e2:	2304      	movcs	r3, #4
   359e4:	2d3f      	cmp	r5, #63	; 0x3f
   359e6:	460c      	mov	r4, r1
   359e8:	9300      	str	r3, [sp, #0]
   359ea:	d82f      	bhi.n	35a4c <UtilCmacBuildDataForDerivation+0x8c>
   359ec:	b370      	cbz	r0, 35a4c <UtilCmacBuildDataForDerivation+0x8c>
   359ee:	4690      	mov	r8, r2
   359f0:	b117      	cbz	r7, 359f8 <UtilCmacBuildDataForDerivation+0x38>
   359f2:	b35a      	cbz	r2, 35a4c <UtilCmacBuildDataForDerivation+0x8c>
   359f4:	2f40      	cmp	r7, #64	; 0x40
   359f6:	d829      	bhi.n	35a4c <UtilCmacBuildDataForDerivation+0x8c>
   359f8:	9a08      	ldr	r2, [sp, #32]
   359fa:	b33a      	cbz	r2, 35a4c <UtilCmacBuildDataForDerivation+0x8c>
   359fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   359fe:	6811      	ldr	r1, [r2, #0]
   35a00:	b321      	cbz	r1, 35a4c <UtilCmacBuildDataForDerivation+0x8c>
   35a02:	19e2      	adds	r2, r4, r7
   35a04:	4413      	add	r3, r2
   35a06:	4299      	cmp	r1, r3
   35a08:	d320      	bcc.n	35a4c <UtilCmacBuildDataForDerivation+0x8c>
   35a0a:	9b08      	ldr	r3, [sp, #32]
   35a0c:	4622      	mov	r2, r4
   35a0e:	4601      	mov	r1, r0
   35a10:	1c58      	adds	r0, r3, #1
   35a12:	f7ff f8f5 	bl	34c00 <CC_PalMemCopyPlat>
   35a16:	9b08      	ldr	r3, [sp, #32]
   35a18:	4423      	add	r3, r4
   35a1a:	2200      	movs	r2, #0
   35a1c:	3402      	adds	r4, #2
   35a1e:	705a      	strb	r2, [r3, #1]
   35a20:	bb07      	cbnz	r7, 35a64 <UtilCmacBuildDataForDerivation+0xa4>
   35a22:	2eff      	cmp	r6, #255	; 0xff
   35a24:	9600      	str	r6, [sp, #0]
   35a26:	d915      	bls.n	35a54 <UtilCmacBuildDataForDerivation+0x94>
   35a28:	9b08      	ldr	r3, [sp, #32]
   35a2a:	0235      	lsls	r5, r6, #8
   35a2c:	b2ad      	uxth	r5, r5
   35a2e:	1918      	adds	r0, r3, r4
   35a30:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   35a34:	2202      	movs	r2, #2
   35a36:	a901      	add	r1, sp, #4
   35a38:	9501      	str	r5, [sp, #4]
   35a3a:	f7ff f8e1 	bl	34c00 <CC_PalMemCopyPlat>
   35a3e:	3402      	adds	r4, #2
   35a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35a42:	2000      	movs	r0, #0
   35a44:	601c      	str	r4, [r3, #0]
   35a46:	b002      	add	sp, #8
   35a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35a4c:	4809      	ldr	r0, [pc, #36]	; (35a74 <UtilCmacBuildDataForDerivation+0xb4>)
   35a4e:	b002      	add	sp, #8
   35a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35a54:	9b08      	ldr	r3, [sp, #32]
   35a56:	2201      	movs	r2, #1
   35a58:	1918      	adds	r0, r3, r4
   35a5a:	4669      	mov	r1, sp
   35a5c:	f7ff f8d0 	bl	34c00 <CC_PalMemCopyPlat>
   35a60:	3401      	adds	r4, #1
   35a62:	e7ed      	b.n	35a40 <UtilCmacBuildDataForDerivation+0x80>
   35a64:	9b08      	ldr	r3, [sp, #32]
   35a66:	4641      	mov	r1, r8
   35a68:	1918      	adds	r0, r3, r4
   35a6a:	463a      	mov	r2, r7
   35a6c:	f7ff f8c8 	bl	34c00 <CC_PalMemCopyPlat>
   35a70:	443c      	add	r4, r7
   35a72:	e7d6      	b.n	35a22 <UtilCmacBuildDataForDerivation+0x62>
   35a74:	80000006 	.word	0x80000006

00035a78 <CC_PalDataBufferAttrGet>:
   35a78:	2000      	movs	r0, #0
   35a7a:	7018      	strb	r0, [r3, #0]
   35a7c:	4770      	bx	lr
   35a7e:	bf00      	nop

00035a80 <__assert_func>:
   35a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   35a82:	4614      	mov	r4, r2
   35a84:	461a      	mov	r2, r3
   35a86:	4b09      	ldr	r3, [pc, #36]	; (35aac <__assert_func+0x2c>)
   35a88:	681b      	ldr	r3, [r3, #0]
   35a8a:	4605      	mov	r5, r0
   35a8c:	68d8      	ldr	r0, [r3, #12]
   35a8e:	b14c      	cbz	r4, 35aa4 <__assert_func+0x24>
   35a90:	4b07      	ldr	r3, [pc, #28]	; (35ab0 <__assert_func+0x30>)
   35a92:	9100      	str	r1, [sp, #0]
   35a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
   35a98:	4906      	ldr	r1, [pc, #24]	; (35ab4 <__assert_func+0x34>)
   35a9a:	462b      	mov	r3, r5
   35a9c:	f000 f80e 	bl	35abc <fiprintf>
   35aa0:	f004 fed4 	bl	3a84c <abort>
   35aa4:	4b04      	ldr	r3, [pc, #16]	; (35ab8 <__assert_func+0x38>)
   35aa6:	461c      	mov	r4, r3
   35aa8:	e7f3      	b.n	35a92 <__assert_func+0x12>
   35aaa:	bf00      	nop
   35aac:	20000778 	.word	0x20000778
   35ab0:	00041abf 	.word	0x00041abf
   35ab4:	00041acc 	.word	0x00041acc
   35ab8:	0003ca22 	.word	0x0003ca22

00035abc <fiprintf>:
   35abc:	b40e      	push	{r1, r2, r3}
   35abe:	b503      	push	{r0, r1, lr}
   35ac0:	4601      	mov	r1, r0
   35ac2:	ab03      	add	r3, sp, #12
   35ac4:	4805      	ldr	r0, [pc, #20]	; (35adc <fiprintf+0x20>)
   35ac6:	f853 2b04 	ldr.w	r2, [r3], #4
   35aca:	6800      	ldr	r0, [r0, #0]
   35acc:	9301      	str	r3, [sp, #4]
   35ace:	f000 f8b7 	bl	35c40 <_vfiprintf_r>
   35ad2:	b002      	add	sp, #8
   35ad4:	f85d eb04 	ldr.w	lr, [sp], #4
   35ad8:	b003      	add	sp, #12
   35ada:	4770      	bx	lr
   35adc:	20000778 	.word	0x20000778

00035ae0 <malloc>:
   35ae0:	4b02      	ldr	r3, [pc, #8]	; (35aec <malloc+0xc>)
   35ae2:	4601      	mov	r1, r0
   35ae4:	6818      	ldr	r0, [r3, #0]
   35ae6:	f000 b851 	b.w	35b8c <_malloc_r>
   35aea:	bf00      	nop
   35aec:	20000778 	.word	0x20000778

00035af0 <_free_r>:
   35af0:	b538      	push	{r3, r4, r5, lr}
   35af2:	4605      	mov	r5, r0
   35af4:	2900      	cmp	r1, #0
   35af6:	d045      	beq.n	35b84 <_free_r+0x94>
   35af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
   35afc:	1f0c      	subs	r4, r1, #4
   35afe:	2b00      	cmp	r3, #0
   35b00:	bfb8      	it	lt
   35b02:	18e4      	addlt	r4, r4, r3
   35b04:	f001 f838 	bl	36b78 <__malloc_lock>
   35b08:	4a1f      	ldr	r2, [pc, #124]	; (35b88 <_free_r+0x98>)
   35b0a:	6813      	ldr	r3, [r2, #0]
   35b0c:	4610      	mov	r0, r2
   35b0e:	b933      	cbnz	r3, 35b1e <_free_r+0x2e>
   35b10:	6063      	str	r3, [r4, #4]
   35b12:	6014      	str	r4, [r2, #0]
   35b14:	4628      	mov	r0, r5
   35b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   35b1a:	f001 b833 	b.w	36b84 <__malloc_unlock>
   35b1e:	42a3      	cmp	r3, r4
   35b20:	d90b      	bls.n	35b3a <_free_r+0x4a>
   35b22:	6821      	ldr	r1, [r4, #0]
   35b24:	1862      	adds	r2, r4, r1
   35b26:	4293      	cmp	r3, r2
   35b28:	bf04      	itt	eq
   35b2a:	681a      	ldreq	r2, [r3, #0]
   35b2c:	685b      	ldreq	r3, [r3, #4]
   35b2e:	6063      	str	r3, [r4, #4]
   35b30:	bf04      	itt	eq
   35b32:	1852      	addeq	r2, r2, r1
   35b34:	6022      	streq	r2, [r4, #0]
   35b36:	6004      	str	r4, [r0, #0]
   35b38:	e7ec      	b.n	35b14 <_free_r+0x24>
   35b3a:	461a      	mov	r2, r3
   35b3c:	685b      	ldr	r3, [r3, #4]
   35b3e:	b10b      	cbz	r3, 35b44 <_free_r+0x54>
   35b40:	42a3      	cmp	r3, r4
   35b42:	d9fa      	bls.n	35b3a <_free_r+0x4a>
   35b44:	6811      	ldr	r1, [r2, #0]
   35b46:	1850      	adds	r0, r2, r1
   35b48:	42a0      	cmp	r0, r4
   35b4a:	d10b      	bne.n	35b64 <_free_r+0x74>
   35b4c:	6820      	ldr	r0, [r4, #0]
   35b4e:	4401      	add	r1, r0
   35b50:	1850      	adds	r0, r2, r1
   35b52:	4283      	cmp	r3, r0
   35b54:	6011      	str	r1, [r2, #0]
   35b56:	d1dd      	bne.n	35b14 <_free_r+0x24>
   35b58:	6818      	ldr	r0, [r3, #0]
   35b5a:	685b      	ldr	r3, [r3, #4]
   35b5c:	6053      	str	r3, [r2, #4]
   35b5e:	4401      	add	r1, r0
   35b60:	6011      	str	r1, [r2, #0]
   35b62:	e7d7      	b.n	35b14 <_free_r+0x24>
   35b64:	d902      	bls.n	35b6c <_free_r+0x7c>
   35b66:	230c      	movs	r3, #12
   35b68:	602b      	str	r3, [r5, #0]
   35b6a:	e7d3      	b.n	35b14 <_free_r+0x24>
   35b6c:	6820      	ldr	r0, [r4, #0]
   35b6e:	1821      	adds	r1, r4, r0
   35b70:	428b      	cmp	r3, r1
   35b72:	bf04      	itt	eq
   35b74:	6819      	ldreq	r1, [r3, #0]
   35b76:	685b      	ldreq	r3, [r3, #4]
   35b78:	6063      	str	r3, [r4, #4]
   35b7a:	bf04      	itt	eq
   35b7c:	1809      	addeq	r1, r1, r0
   35b7e:	6021      	streq	r1, [r4, #0]
   35b80:	6054      	str	r4, [r2, #4]
   35b82:	e7c7      	b.n	35b14 <_free_r+0x24>
   35b84:	bd38      	pop	{r3, r4, r5, pc}
   35b86:	bf00      	nop
   35b88:	20003734 	.word	0x20003734

00035b8c <_malloc_r>:
   35b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35b8e:	1ccd      	adds	r5, r1, #3
   35b90:	f025 0503 	bic.w	r5, r5, #3
   35b94:	3508      	adds	r5, #8
   35b96:	2d0c      	cmp	r5, #12
   35b98:	bf38      	it	cc
   35b9a:	250c      	movcc	r5, #12
   35b9c:	2d00      	cmp	r5, #0
   35b9e:	4606      	mov	r6, r0
   35ba0:	db01      	blt.n	35ba6 <_malloc_r+0x1a>
   35ba2:	42a9      	cmp	r1, r5
   35ba4:	d903      	bls.n	35bae <_malloc_r+0x22>
   35ba6:	230c      	movs	r3, #12
   35ba8:	6033      	str	r3, [r6, #0]
   35baa:	2000      	movs	r0, #0
   35bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35bae:	f000 ffe3 	bl	36b78 <__malloc_lock>
   35bb2:	4921      	ldr	r1, [pc, #132]	; (35c38 <_malloc_r+0xac>)
   35bb4:	680a      	ldr	r2, [r1, #0]
   35bb6:	4614      	mov	r4, r2
   35bb8:	b99c      	cbnz	r4, 35be2 <_malloc_r+0x56>
   35bba:	4f20      	ldr	r7, [pc, #128]	; (35c3c <_malloc_r+0xb0>)
   35bbc:	683b      	ldr	r3, [r7, #0]
   35bbe:	b923      	cbnz	r3, 35bca <_malloc_r+0x3e>
   35bc0:	4621      	mov	r1, r4
   35bc2:	4630      	mov	r0, r6
   35bc4:	f000 fcbc 	bl	36540 <_sbrk_r>
   35bc8:	6038      	str	r0, [r7, #0]
   35bca:	4629      	mov	r1, r5
   35bcc:	4630      	mov	r0, r6
   35bce:	f000 fcb7 	bl	36540 <_sbrk_r>
   35bd2:	1c43      	adds	r3, r0, #1
   35bd4:	d123      	bne.n	35c1e <_malloc_r+0x92>
   35bd6:	230c      	movs	r3, #12
   35bd8:	6033      	str	r3, [r6, #0]
   35bda:	4630      	mov	r0, r6
   35bdc:	f000 ffd2 	bl	36b84 <__malloc_unlock>
   35be0:	e7e3      	b.n	35baa <_malloc_r+0x1e>
   35be2:	6823      	ldr	r3, [r4, #0]
   35be4:	1b5b      	subs	r3, r3, r5
   35be6:	d417      	bmi.n	35c18 <_malloc_r+0x8c>
   35be8:	2b0b      	cmp	r3, #11
   35bea:	d903      	bls.n	35bf4 <_malloc_r+0x68>
   35bec:	6023      	str	r3, [r4, #0]
   35bee:	441c      	add	r4, r3
   35bf0:	6025      	str	r5, [r4, #0]
   35bf2:	e004      	b.n	35bfe <_malloc_r+0x72>
   35bf4:	6863      	ldr	r3, [r4, #4]
   35bf6:	42a2      	cmp	r2, r4
   35bf8:	bf0c      	ite	eq
   35bfa:	600b      	streq	r3, [r1, #0]
   35bfc:	6053      	strne	r3, [r2, #4]
   35bfe:	4630      	mov	r0, r6
   35c00:	f000 ffc0 	bl	36b84 <__malloc_unlock>
   35c04:	f104 000b 	add.w	r0, r4, #11
   35c08:	1d23      	adds	r3, r4, #4
   35c0a:	f020 0007 	bic.w	r0, r0, #7
   35c0e:	1ac2      	subs	r2, r0, r3
   35c10:	d0cc      	beq.n	35bac <_malloc_r+0x20>
   35c12:	1a1b      	subs	r3, r3, r0
   35c14:	50a3      	str	r3, [r4, r2]
   35c16:	e7c9      	b.n	35bac <_malloc_r+0x20>
   35c18:	4622      	mov	r2, r4
   35c1a:	6864      	ldr	r4, [r4, #4]
   35c1c:	e7cc      	b.n	35bb8 <_malloc_r+0x2c>
   35c1e:	1cc4      	adds	r4, r0, #3
   35c20:	f024 0403 	bic.w	r4, r4, #3
   35c24:	42a0      	cmp	r0, r4
   35c26:	d0e3      	beq.n	35bf0 <_malloc_r+0x64>
   35c28:	1a21      	subs	r1, r4, r0
   35c2a:	4630      	mov	r0, r6
   35c2c:	f000 fc88 	bl	36540 <_sbrk_r>
   35c30:	3001      	adds	r0, #1
   35c32:	d1dd      	bne.n	35bf0 <_malloc_r+0x64>
   35c34:	e7cf      	b.n	35bd6 <_malloc_r+0x4a>
   35c36:	bf00      	nop
   35c38:	20003734 	.word	0x20003734
   35c3c:	20003738 	.word	0x20003738

00035c40 <_vfiprintf_r>:
   35c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35c44:	460d      	mov	r5, r1
   35c46:	b09d      	sub	sp, #116	; 0x74
   35c48:	4614      	mov	r4, r2
   35c4a:	4698      	mov	r8, r3
   35c4c:	4606      	mov	r6, r0
   35c4e:	b118      	cbz	r0, 35c58 <_vfiprintf_r+0x18>
   35c50:	6983      	ldr	r3, [r0, #24]
   35c52:	b90b      	cbnz	r3, 35c58 <_vfiprintf_r+0x18>
   35c54:	f000 fece 	bl	369f4 <__sinit>
   35c58:	4b89      	ldr	r3, [pc, #548]	; (35e80 <_vfiprintf_r+0x240>)
   35c5a:	429d      	cmp	r5, r3
   35c5c:	d11b      	bne.n	35c96 <_vfiprintf_r+0x56>
   35c5e:	6875      	ldr	r5, [r6, #4]
   35c60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   35c62:	07d9      	lsls	r1, r3, #31
   35c64:	d405      	bmi.n	35c72 <_vfiprintf_r+0x32>
   35c66:	89ab      	ldrh	r3, [r5, #12]
   35c68:	059a      	lsls	r2, r3, #22
   35c6a:	d402      	bmi.n	35c72 <_vfiprintf_r+0x32>
   35c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   35c6e:	f7ed f93b 	bl	22ee8 <__retarget_lock_acquire_recursive>
   35c72:	89ab      	ldrh	r3, [r5, #12]
   35c74:	071b      	lsls	r3, r3, #28
   35c76:	d501      	bpl.n	35c7c <_vfiprintf_r+0x3c>
   35c78:	692b      	ldr	r3, [r5, #16]
   35c7a:	b9eb      	cbnz	r3, 35cb8 <_vfiprintf_r+0x78>
   35c7c:	4629      	mov	r1, r5
   35c7e:	4630      	mov	r0, r6
   35c80:	f000 fd46 	bl	36710 <__swsetup_r>
   35c84:	b1c0      	cbz	r0, 35cb8 <_vfiprintf_r+0x78>
   35c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   35c88:	07dc      	lsls	r4, r3, #31
   35c8a:	d50e      	bpl.n	35caa <_vfiprintf_r+0x6a>
   35c8c:	f04f 30ff 	mov.w	r0, #4294967295
   35c90:	b01d      	add	sp, #116	; 0x74
   35c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35c96:	4b7b      	ldr	r3, [pc, #492]	; (35e84 <_vfiprintf_r+0x244>)
   35c98:	429d      	cmp	r5, r3
   35c9a:	d101      	bne.n	35ca0 <_vfiprintf_r+0x60>
   35c9c:	68b5      	ldr	r5, [r6, #8]
   35c9e:	e7df      	b.n	35c60 <_vfiprintf_r+0x20>
   35ca0:	4b79      	ldr	r3, [pc, #484]	; (35e88 <_vfiprintf_r+0x248>)
   35ca2:	429d      	cmp	r5, r3
   35ca4:	bf08      	it	eq
   35ca6:	68f5      	ldreq	r5, [r6, #12]
   35ca8:	e7da      	b.n	35c60 <_vfiprintf_r+0x20>
   35caa:	89ab      	ldrh	r3, [r5, #12]
   35cac:	0598      	lsls	r0, r3, #22
   35cae:	d4ed      	bmi.n	35c8c <_vfiprintf_r+0x4c>
   35cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   35cb2:	f7ed f937 	bl	22f24 <__retarget_lock_release_recursive>
   35cb6:	e7e9      	b.n	35c8c <_vfiprintf_r+0x4c>
   35cb8:	2300      	movs	r3, #0
   35cba:	9309      	str	r3, [sp, #36]	; 0x24
   35cbc:	2320      	movs	r3, #32
   35cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   35cc2:	f8cd 800c 	str.w	r8, [sp, #12]
   35cc6:	2330      	movs	r3, #48	; 0x30
   35cc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 35e8c <_vfiprintf_r+0x24c>
   35ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   35cd0:	f04f 0901 	mov.w	r9, #1
   35cd4:	4623      	mov	r3, r4
   35cd6:	469a      	mov	sl, r3
   35cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
   35cdc:	b10a      	cbz	r2, 35ce2 <_vfiprintf_r+0xa2>
   35cde:	2a25      	cmp	r2, #37	; 0x25
   35ce0:	d1f9      	bne.n	35cd6 <_vfiprintf_r+0x96>
   35ce2:	ebba 0b04 	subs.w	fp, sl, r4
   35ce6:	d00b      	beq.n	35d00 <_vfiprintf_r+0xc0>
   35ce8:	465b      	mov	r3, fp
   35cea:	4622      	mov	r2, r4
   35cec:	4629      	mov	r1, r5
   35cee:	4630      	mov	r0, r6
   35cf0:	f004 fc68 	bl	3a5c4 <__sfputs_r>
   35cf4:	3001      	adds	r0, #1
   35cf6:	f000 80aa 	beq.w	35e4e <_vfiprintf_r+0x20e>
   35cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35cfc:	445a      	add	r2, fp
   35cfe:	9209      	str	r2, [sp, #36]	; 0x24
   35d00:	f89a 3000 	ldrb.w	r3, [sl]
   35d04:	2b00      	cmp	r3, #0
   35d06:	f000 80a2 	beq.w	35e4e <_vfiprintf_r+0x20e>
   35d0a:	2300      	movs	r3, #0
   35d0c:	f04f 32ff 	mov.w	r2, #4294967295
   35d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
   35d14:	f10a 0a01 	add.w	sl, sl, #1
   35d18:	9304      	str	r3, [sp, #16]
   35d1a:	9307      	str	r3, [sp, #28]
   35d1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   35d20:	931a      	str	r3, [sp, #104]	; 0x68
   35d22:	4654      	mov	r4, sl
   35d24:	2205      	movs	r2, #5
   35d26:	f814 1b01 	ldrb.w	r1, [r4], #1
   35d2a:	4858      	ldr	r0, [pc, #352]	; (35e8c <_vfiprintf_r+0x24c>)
   35d2c:	f7d6 fae8 	bl	c300 <memchr>
   35d30:	9a04      	ldr	r2, [sp, #16]
   35d32:	b9d8      	cbnz	r0, 35d6c <_vfiprintf_r+0x12c>
   35d34:	06d1      	lsls	r1, r2, #27
   35d36:	bf44      	itt	mi
   35d38:	2320      	movmi	r3, #32
   35d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   35d3e:	0713      	lsls	r3, r2, #28
   35d40:	bf44      	itt	mi
   35d42:	232b      	movmi	r3, #43	; 0x2b
   35d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   35d48:	f89a 3000 	ldrb.w	r3, [sl]
   35d4c:	2b2a      	cmp	r3, #42	; 0x2a
   35d4e:	d015      	beq.n	35d7c <_vfiprintf_r+0x13c>
   35d50:	9a07      	ldr	r2, [sp, #28]
   35d52:	4654      	mov	r4, sl
   35d54:	2000      	movs	r0, #0
   35d56:	f04f 0c0a 	mov.w	ip, #10
   35d5a:	4621      	mov	r1, r4
   35d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
   35d60:	3b30      	subs	r3, #48	; 0x30
   35d62:	2b09      	cmp	r3, #9
   35d64:	d94e      	bls.n	35e04 <_vfiprintf_r+0x1c4>
   35d66:	b1b0      	cbz	r0, 35d96 <_vfiprintf_r+0x156>
   35d68:	9207      	str	r2, [sp, #28]
   35d6a:	e014      	b.n	35d96 <_vfiprintf_r+0x156>
   35d6c:	eba0 0308 	sub.w	r3, r0, r8
   35d70:	fa09 f303 	lsl.w	r3, r9, r3
   35d74:	4313      	orrs	r3, r2
   35d76:	9304      	str	r3, [sp, #16]
   35d78:	46a2      	mov	sl, r4
   35d7a:	e7d2      	b.n	35d22 <_vfiprintf_r+0xe2>
   35d7c:	9b03      	ldr	r3, [sp, #12]
   35d7e:	1d19      	adds	r1, r3, #4
   35d80:	681b      	ldr	r3, [r3, #0]
   35d82:	9103      	str	r1, [sp, #12]
   35d84:	2b00      	cmp	r3, #0
   35d86:	bfbb      	ittet	lt
   35d88:	425b      	neglt	r3, r3
   35d8a:	f042 0202 	orrlt.w	r2, r2, #2
   35d8e:	9307      	strge	r3, [sp, #28]
   35d90:	9307      	strlt	r3, [sp, #28]
   35d92:	bfb8      	it	lt
   35d94:	9204      	strlt	r2, [sp, #16]
   35d96:	7823      	ldrb	r3, [r4, #0]
   35d98:	2b2e      	cmp	r3, #46	; 0x2e
   35d9a:	d10c      	bne.n	35db6 <_vfiprintf_r+0x176>
   35d9c:	7863      	ldrb	r3, [r4, #1]
   35d9e:	2b2a      	cmp	r3, #42	; 0x2a
   35da0:	d135      	bne.n	35e0e <_vfiprintf_r+0x1ce>
   35da2:	9b03      	ldr	r3, [sp, #12]
   35da4:	1d1a      	adds	r2, r3, #4
   35da6:	681b      	ldr	r3, [r3, #0]
   35da8:	9203      	str	r2, [sp, #12]
   35daa:	2b00      	cmp	r3, #0
   35dac:	bfb8      	it	lt
   35dae:	f04f 33ff 	movlt.w	r3, #4294967295
   35db2:	3402      	adds	r4, #2
   35db4:	9305      	str	r3, [sp, #20]
   35db6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 35e9c <_vfiprintf_r+0x25c>
   35dba:	7821      	ldrb	r1, [r4, #0]
   35dbc:	2203      	movs	r2, #3
   35dbe:	4650      	mov	r0, sl
   35dc0:	f7d6 fa9e 	bl	c300 <memchr>
   35dc4:	b140      	cbz	r0, 35dd8 <_vfiprintf_r+0x198>
   35dc6:	2340      	movs	r3, #64	; 0x40
   35dc8:	eba0 000a 	sub.w	r0, r0, sl
   35dcc:	fa03 f000 	lsl.w	r0, r3, r0
   35dd0:	9b04      	ldr	r3, [sp, #16]
   35dd2:	4303      	orrs	r3, r0
   35dd4:	3401      	adds	r4, #1
   35dd6:	9304      	str	r3, [sp, #16]
   35dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
   35ddc:	482c      	ldr	r0, [pc, #176]	; (35e90 <_vfiprintf_r+0x250>)
   35dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   35de2:	2206      	movs	r2, #6
   35de4:	f7d6 fa8c 	bl	c300 <memchr>
   35de8:	2800      	cmp	r0, #0
   35dea:	d03f      	beq.n	35e6c <_vfiprintf_r+0x22c>
   35dec:	4b29      	ldr	r3, [pc, #164]	; (35e94 <_vfiprintf_r+0x254>)
   35dee:	bb1b      	cbnz	r3, 35e38 <_vfiprintf_r+0x1f8>
   35df0:	9b03      	ldr	r3, [sp, #12]
   35df2:	3307      	adds	r3, #7
   35df4:	f023 0307 	bic.w	r3, r3, #7
   35df8:	3308      	adds	r3, #8
   35dfa:	9303      	str	r3, [sp, #12]
   35dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35dfe:	443b      	add	r3, r7
   35e00:	9309      	str	r3, [sp, #36]	; 0x24
   35e02:	e767      	b.n	35cd4 <_vfiprintf_r+0x94>
   35e04:	fb0c 3202 	mla	r2, ip, r2, r3
   35e08:	460c      	mov	r4, r1
   35e0a:	2001      	movs	r0, #1
   35e0c:	e7a5      	b.n	35d5a <_vfiprintf_r+0x11a>
   35e0e:	2300      	movs	r3, #0
   35e10:	3401      	adds	r4, #1
   35e12:	9305      	str	r3, [sp, #20]
   35e14:	4619      	mov	r1, r3
   35e16:	f04f 0c0a 	mov.w	ip, #10
   35e1a:	4620      	mov	r0, r4
   35e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
   35e20:	3a30      	subs	r2, #48	; 0x30
   35e22:	2a09      	cmp	r2, #9
   35e24:	d903      	bls.n	35e2e <_vfiprintf_r+0x1ee>
   35e26:	2b00      	cmp	r3, #0
   35e28:	d0c5      	beq.n	35db6 <_vfiprintf_r+0x176>
   35e2a:	9105      	str	r1, [sp, #20]
   35e2c:	e7c3      	b.n	35db6 <_vfiprintf_r+0x176>
   35e2e:	fb0c 2101 	mla	r1, ip, r1, r2
   35e32:	4604      	mov	r4, r0
   35e34:	2301      	movs	r3, #1
   35e36:	e7f0      	b.n	35e1a <_vfiprintf_r+0x1da>
   35e38:	ab03      	add	r3, sp, #12
   35e3a:	9300      	str	r3, [sp, #0]
   35e3c:	462a      	mov	r2, r5
   35e3e:	4b16      	ldr	r3, [pc, #88]	; (35e98 <_vfiprintf_r+0x258>)
   35e40:	a904      	add	r1, sp, #16
   35e42:	4630      	mov	r0, r6
   35e44:	f000 f82c 	bl	35ea0 <_printf_float>
   35e48:	4607      	mov	r7, r0
   35e4a:	1c78      	adds	r0, r7, #1
   35e4c:	d1d6      	bne.n	35dfc <_vfiprintf_r+0x1bc>
   35e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   35e50:	07d9      	lsls	r1, r3, #31
   35e52:	d405      	bmi.n	35e60 <_vfiprintf_r+0x220>
   35e54:	89ab      	ldrh	r3, [r5, #12]
   35e56:	059a      	lsls	r2, r3, #22
   35e58:	d402      	bmi.n	35e60 <_vfiprintf_r+0x220>
   35e5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   35e5c:	f7ed f862 	bl	22f24 <__retarget_lock_release_recursive>
   35e60:	89ab      	ldrh	r3, [r5, #12]
   35e62:	065b      	lsls	r3, r3, #25
   35e64:	f53f af12 	bmi.w	35c8c <_vfiprintf_r+0x4c>
   35e68:	9809      	ldr	r0, [sp, #36]	; 0x24
   35e6a:	e711      	b.n	35c90 <_vfiprintf_r+0x50>
   35e6c:	ab03      	add	r3, sp, #12
   35e6e:	9300      	str	r3, [sp, #0]
   35e70:	462a      	mov	r2, r5
   35e72:	4b09      	ldr	r3, [pc, #36]	; (35e98 <_vfiprintf_r+0x258>)
   35e74:	a904      	add	r1, sp, #16
   35e76:	4630      	mov	r0, r6
   35e78:	f000 fa3c 	bl	362f4 <_printf_i>
   35e7c:	e7e4      	b.n	35e48 <_vfiprintf_r+0x208>
   35e7e:	bf00      	nop
   35e80:	0003c000 	.word	0x0003c000
   35e84:	0003c020 	.word	0x0003c020
   35e88:	0003bfe0 	.word	0x0003bfe0
   35e8c:	00041bfc 	.word	0x00041bfc
   35e90:	00041c06 	.word	0x00041c06
   35e94:	00035ea1 	.word	0x00035ea1
   35e98:	0003a5c5 	.word	0x0003a5c5
   35e9c:	00041c02 	.word	0x00041c02

00035ea0 <_printf_float>:
   35ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35ea4:	b091      	sub	sp, #68	; 0x44
   35ea6:	460c      	mov	r4, r1
   35ea8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   35eac:	4616      	mov	r6, r2
   35eae:	461f      	mov	r7, r3
   35eb0:	4605      	mov	r5, r0
   35eb2:	f000 fe1d 	bl	36af0 <_localeconv_r>
   35eb6:	6803      	ldr	r3, [r0, #0]
   35eb8:	9309      	str	r3, [sp, #36]	; 0x24
   35eba:	4618      	mov	r0, r3
   35ebc:	f7e2 fa74 	bl	183a8 <strlen>
   35ec0:	2300      	movs	r3, #0
   35ec2:	930e      	str	r3, [sp, #56]	; 0x38
   35ec4:	f8d8 3000 	ldr.w	r3, [r8]
   35ec8:	900a      	str	r0, [sp, #40]	; 0x28
   35eca:	3307      	adds	r3, #7
   35ecc:	f023 0307 	bic.w	r3, r3, #7
   35ed0:	f103 0208 	add.w	r2, r3, #8
   35ed4:	f894 9018 	ldrb.w	r9, [r4, #24]
   35ed8:	f8d4 b000 	ldr.w	fp, [r4]
   35edc:	f8c8 2000 	str.w	r2, [r8]
   35ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
   35ee4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   35ee8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   35eec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   35ef0:	930b      	str	r3, [sp, #44]	; 0x2c
   35ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   35ef4:	4b9c      	ldr	r3, [pc, #624]	; (36168 <_printf_float+0x2c8>)
   35ef6:	f04f 32ff 	mov.w	r2, #4294967295
   35efa:	4640      	mov	r0, r8
   35efc:	f7d7 f820 	bl	cf40 <__aeabi_dcmpun>
   35f00:	bb70      	cbnz	r0, 35f60 <_printf_float+0xc0>
   35f02:	4b99      	ldr	r3, [pc, #612]	; (36168 <_printf_float+0x2c8>)
   35f04:	990b      	ldr	r1, [sp, #44]	; 0x2c
   35f06:	f04f 32ff 	mov.w	r2, #4294967295
   35f0a:	4640      	mov	r0, r8
   35f0c:	f7d6 fffa 	bl	cf04 <__aeabi_dcmple>
   35f10:	bb30      	cbnz	r0, 35f60 <_printf_float+0xc0>
   35f12:	2200      	movs	r2, #0
   35f14:	2300      	movs	r3, #0
   35f16:	4640      	mov	r0, r8
   35f18:	4651      	mov	r1, sl
   35f1a:	f7d6 ffe9 	bl	cef0 <__aeabi_dcmplt>
   35f1e:	b110      	cbz	r0, 35f26 <_printf_float+0x86>
   35f20:	232d      	movs	r3, #45	; 0x2d
   35f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   35f26:	4b91      	ldr	r3, [pc, #580]	; (3616c <_printf_float+0x2cc>)
   35f28:	4891      	ldr	r0, [pc, #580]	; (36170 <_printf_float+0x2d0>)
   35f2a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   35f2e:	bf94      	ite	ls
   35f30:	4698      	movls	r8, r3
   35f32:	4680      	movhi	r8, r0
   35f34:	2303      	movs	r3, #3
   35f36:	6123      	str	r3, [r4, #16]
   35f38:	f02b 0304 	bic.w	r3, fp, #4
   35f3c:	6023      	str	r3, [r4, #0]
   35f3e:	f04f 0a00 	mov.w	sl, #0
   35f42:	9700      	str	r7, [sp, #0]
   35f44:	4633      	mov	r3, r6
   35f46:	aa0f      	add	r2, sp, #60	; 0x3c
   35f48:	4621      	mov	r1, r4
   35f4a:	4628      	mov	r0, r5
   35f4c:	f004 fbea 	bl	3a724 <_printf_common>
   35f50:	3001      	adds	r0, #1
   35f52:	f040 808f 	bne.w	36074 <_printf_float+0x1d4>
   35f56:	f04f 30ff 	mov.w	r0, #4294967295
   35f5a:	b011      	add	sp, #68	; 0x44
   35f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35f60:	4642      	mov	r2, r8
   35f62:	4653      	mov	r3, sl
   35f64:	4640      	mov	r0, r8
   35f66:	4651      	mov	r1, sl
   35f68:	f7d6 ffea 	bl	cf40 <__aeabi_dcmpun>
   35f6c:	b140      	cbz	r0, 35f80 <_printf_float+0xe0>
   35f6e:	f1ba 0f00 	cmp.w	sl, #0
   35f72:	bfbc      	itt	lt
   35f74:	232d      	movlt	r3, #45	; 0x2d
   35f76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   35f7a:	487e      	ldr	r0, [pc, #504]	; (36174 <_printf_float+0x2d4>)
   35f7c:	4b7e      	ldr	r3, [pc, #504]	; (36178 <_printf_float+0x2d8>)
   35f7e:	e7d4      	b.n	35f2a <_printf_float+0x8a>
   35f80:	6863      	ldr	r3, [r4, #4]
   35f82:	1c5a      	adds	r2, r3, #1
   35f84:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   35f88:	d142      	bne.n	36010 <_printf_float+0x170>
   35f8a:	2306      	movs	r3, #6
   35f8c:	6063      	str	r3, [r4, #4]
   35f8e:	2200      	movs	r2, #0
   35f90:	9206      	str	r2, [sp, #24]
   35f92:	aa0e      	add	r2, sp, #56	; 0x38
   35f94:	e9cd 9204 	strd	r9, r2, [sp, #16]
   35f98:	aa0d      	add	r2, sp, #52	; 0x34
   35f9a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   35f9e:	9203      	str	r2, [sp, #12]
   35fa0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   35fa4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   35fa8:	6023      	str	r3, [r4, #0]
   35faa:	6863      	ldr	r3, [r4, #4]
   35fac:	9300      	str	r3, [sp, #0]
   35fae:	4642      	mov	r2, r8
   35fb0:	4653      	mov	r3, sl
   35fb2:	4628      	mov	r0, r5
   35fb4:	910b      	str	r1, [sp, #44]	; 0x2c
   35fb6:	f004 fb17 	bl	3a5e8 <__cvt>
   35fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   35fbc:	2947      	cmp	r1, #71	; 0x47
   35fbe:	4680      	mov	r8, r0
   35fc0:	990d      	ldr	r1, [sp, #52]	; 0x34
   35fc2:	d108      	bne.n	35fd6 <_printf_float+0x136>
   35fc4:	1cc8      	adds	r0, r1, #3
   35fc6:	db02      	blt.n	35fce <_printf_float+0x12e>
   35fc8:	6863      	ldr	r3, [r4, #4]
   35fca:	4299      	cmp	r1, r3
   35fcc:	dd40      	ble.n	36050 <_printf_float+0x1b0>
   35fce:	f1a9 0902 	sub.w	r9, r9, #2
   35fd2:	fa5f f989 	uxtb.w	r9, r9
   35fd6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   35fda:	d81f      	bhi.n	3601c <_printf_float+0x17c>
   35fdc:	3901      	subs	r1, #1
   35fde:	464a      	mov	r2, r9
   35fe0:	f104 0050 	add.w	r0, r4, #80	; 0x50
   35fe4:	910d      	str	r1, [sp, #52]	; 0x34
   35fe6:	f004 fb5f 	bl	3a6a8 <__exponent>
   35fea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   35fec:	1813      	adds	r3, r2, r0
   35fee:	2a01      	cmp	r2, #1
   35ff0:	4682      	mov	sl, r0
   35ff2:	6123      	str	r3, [r4, #16]
   35ff4:	dc02      	bgt.n	35ffc <_printf_float+0x15c>
   35ff6:	6822      	ldr	r2, [r4, #0]
   35ff8:	07d2      	lsls	r2, r2, #31
   35ffa:	d501      	bpl.n	36000 <_printf_float+0x160>
   35ffc:	3301      	adds	r3, #1
   35ffe:	6123      	str	r3, [r4, #16]
   36000:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   36004:	2b00      	cmp	r3, #0
   36006:	d09c      	beq.n	35f42 <_printf_float+0xa2>
   36008:	232d      	movs	r3, #45	; 0x2d
   3600a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3600e:	e798      	b.n	35f42 <_printf_float+0xa2>
   36010:	2947      	cmp	r1, #71	; 0x47
   36012:	d1bc      	bne.n	35f8e <_printf_float+0xee>
   36014:	2b00      	cmp	r3, #0
   36016:	d1ba      	bne.n	35f8e <_printf_float+0xee>
   36018:	2301      	movs	r3, #1
   3601a:	e7b7      	b.n	35f8c <_printf_float+0xec>
   3601c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   36020:	d118      	bne.n	36054 <_printf_float+0x1b4>
   36022:	2900      	cmp	r1, #0
   36024:	6863      	ldr	r3, [r4, #4]
   36026:	dd0b      	ble.n	36040 <_printf_float+0x1a0>
   36028:	6121      	str	r1, [r4, #16]
   3602a:	b913      	cbnz	r3, 36032 <_printf_float+0x192>
   3602c:	6822      	ldr	r2, [r4, #0]
   3602e:	07d0      	lsls	r0, r2, #31
   36030:	d502      	bpl.n	36038 <_printf_float+0x198>
   36032:	3301      	adds	r3, #1
   36034:	440b      	add	r3, r1
   36036:	6123      	str	r3, [r4, #16]
   36038:	65a1      	str	r1, [r4, #88]	; 0x58
   3603a:	f04f 0a00 	mov.w	sl, #0
   3603e:	e7df      	b.n	36000 <_printf_float+0x160>
   36040:	b913      	cbnz	r3, 36048 <_printf_float+0x1a8>
   36042:	6822      	ldr	r2, [r4, #0]
   36044:	07d2      	lsls	r2, r2, #31
   36046:	d501      	bpl.n	3604c <_printf_float+0x1ac>
   36048:	3302      	adds	r3, #2
   3604a:	e7f4      	b.n	36036 <_printf_float+0x196>
   3604c:	2301      	movs	r3, #1
   3604e:	e7f2      	b.n	36036 <_printf_float+0x196>
   36050:	f04f 0967 	mov.w	r9, #103	; 0x67
   36054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   36056:	4299      	cmp	r1, r3
   36058:	db05      	blt.n	36066 <_printf_float+0x1c6>
   3605a:	6823      	ldr	r3, [r4, #0]
   3605c:	6121      	str	r1, [r4, #16]
   3605e:	07d8      	lsls	r0, r3, #31
   36060:	d5ea      	bpl.n	36038 <_printf_float+0x198>
   36062:	1c4b      	adds	r3, r1, #1
   36064:	e7e7      	b.n	36036 <_printf_float+0x196>
   36066:	2900      	cmp	r1, #0
   36068:	bfd4      	ite	le
   3606a:	f1c1 0202 	rsble	r2, r1, #2
   3606e:	2201      	movgt	r2, #1
   36070:	4413      	add	r3, r2
   36072:	e7e0      	b.n	36036 <_printf_float+0x196>
   36074:	6823      	ldr	r3, [r4, #0]
   36076:	055a      	lsls	r2, r3, #21
   36078:	d407      	bmi.n	3608a <_printf_float+0x1ea>
   3607a:	6923      	ldr	r3, [r4, #16]
   3607c:	4642      	mov	r2, r8
   3607e:	4631      	mov	r1, r6
   36080:	4628      	mov	r0, r5
   36082:	47b8      	blx	r7
   36084:	3001      	adds	r0, #1
   36086:	d12b      	bne.n	360e0 <_printf_float+0x240>
   36088:	e765      	b.n	35f56 <_printf_float+0xb6>
   3608a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   3608e:	f240 80dc 	bls.w	3624a <_printf_float+0x3aa>
   36092:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   36096:	2200      	movs	r2, #0
   36098:	2300      	movs	r3, #0
   3609a:	f7d6 ff1f 	bl	cedc <__aeabi_dcmpeq>
   3609e:	2800      	cmp	r0, #0
   360a0:	d033      	beq.n	3610a <_printf_float+0x26a>
   360a2:	4a36      	ldr	r2, [pc, #216]	; (3617c <_printf_float+0x2dc>)
   360a4:	2301      	movs	r3, #1
   360a6:	4631      	mov	r1, r6
   360a8:	4628      	mov	r0, r5
   360aa:	47b8      	blx	r7
   360ac:	3001      	adds	r0, #1
   360ae:	f43f af52 	beq.w	35f56 <_printf_float+0xb6>
   360b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   360b6:	429a      	cmp	r2, r3
   360b8:	db02      	blt.n	360c0 <_printf_float+0x220>
   360ba:	6823      	ldr	r3, [r4, #0]
   360bc:	07d8      	lsls	r0, r3, #31
   360be:	d50f      	bpl.n	360e0 <_printf_float+0x240>
   360c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   360c4:	4631      	mov	r1, r6
   360c6:	4628      	mov	r0, r5
   360c8:	47b8      	blx	r7
   360ca:	3001      	adds	r0, #1
   360cc:	f43f af43 	beq.w	35f56 <_printf_float+0xb6>
   360d0:	f04f 0800 	mov.w	r8, #0
   360d4:	f104 091a 	add.w	r9, r4, #26
   360d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   360da:	3b01      	subs	r3, #1
   360dc:	4543      	cmp	r3, r8
   360de:	dc09      	bgt.n	360f4 <_printf_float+0x254>
   360e0:	6823      	ldr	r3, [r4, #0]
   360e2:	079b      	lsls	r3, r3, #30
   360e4:	f100 8101 	bmi.w	362ea <_printf_float+0x44a>
   360e8:	68e0      	ldr	r0, [r4, #12]
   360ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   360ec:	4298      	cmp	r0, r3
   360ee:	bfb8      	it	lt
   360f0:	4618      	movlt	r0, r3
   360f2:	e732      	b.n	35f5a <_printf_float+0xba>
   360f4:	2301      	movs	r3, #1
   360f6:	464a      	mov	r2, r9
   360f8:	4631      	mov	r1, r6
   360fa:	4628      	mov	r0, r5
   360fc:	47b8      	blx	r7
   360fe:	3001      	adds	r0, #1
   36100:	f43f af29 	beq.w	35f56 <_printf_float+0xb6>
   36104:	f108 0801 	add.w	r8, r8, #1
   36108:	e7e6      	b.n	360d8 <_printf_float+0x238>
   3610a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3610c:	2b00      	cmp	r3, #0
   3610e:	dc37      	bgt.n	36180 <_printf_float+0x2e0>
   36110:	4a1a      	ldr	r2, [pc, #104]	; (3617c <_printf_float+0x2dc>)
   36112:	2301      	movs	r3, #1
   36114:	4631      	mov	r1, r6
   36116:	4628      	mov	r0, r5
   36118:	47b8      	blx	r7
   3611a:	3001      	adds	r0, #1
   3611c:	f43f af1b 	beq.w	35f56 <_printf_float+0xb6>
   36120:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   36124:	4313      	orrs	r3, r2
   36126:	d102      	bne.n	3612e <_printf_float+0x28e>
   36128:	6823      	ldr	r3, [r4, #0]
   3612a:	07d9      	lsls	r1, r3, #31
   3612c:	d5d8      	bpl.n	360e0 <_printf_float+0x240>
   3612e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   36132:	4631      	mov	r1, r6
   36134:	4628      	mov	r0, r5
   36136:	47b8      	blx	r7
   36138:	3001      	adds	r0, #1
   3613a:	f43f af0c 	beq.w	35f56 <_printf_float+0xb6>
   3613e:	f04f 0900 	mov.w	r9, #0
   36142:	f104 0a1a 	add.w	sl, r4, #26
   36146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   36148:	425b      	negs	r3, r3
   3614a:	454b      	cmp	r3, r9
   3614c:	dc01      	bgt.n	36152 <_printf_float+0x2b2>
   3614e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   36150:	e794      	b.n	3607c <_printf_float+0x1dc>
   36152:	2301      	movs	r3, #1
   36154:	4652      	mov	r2, sl
   36156:	4631      	mov	r1, r6
   36158:	4628      	mov	r0, r5
   3615a:	47b8      	blx	r7
   3615c:	3001      	adds	r0, #1
   3615e:	f43f aefa 	beq.w	35f56 <_printf_float+0xb6>
   36162:	f109 0901 	add.w	r9, r9, #1
   36166:	e7ee      	b.n	36146 <_printf_float+0x2a6>
   36168:	7fefffff 	.word	0x7fefffff
   3616c:	00041c0d 	.word	0x00041c0d
   36170:	0003d125 	.word	0x0003d125
   36174:	00041c15 	.word	0x00041c15
   36178:	00041c11 	.word	0x00041c11
   3617c:	00041a5a 	.word	0x00041a5a
   36180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   36182:	6da3      	ldr	r3, [r4, #88]	; 0x58
   36184:	429a      	cmp	r2, r3
   36186:	bfa8      	it	ge
   36188:	461a      	movge	r2, r3
   3618a:	2a00      	cmp	r2, #0
   3618c:	4691      	mov	r9, r2
   3618e:	dc37      	bgt.n	36200 <_printf_float+0x360>
   36190:	f04f 0b00 	mov.w	fp, #0
   36194:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   36198:	f104 021a 	add.w	r2, r4, #26
   3619c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   361a0:	ebaa 0309 	sub.w	r3, sl, r9
   361a4:	455b      	cmp	r3, fp
   361a6:	dc33      	bgt.n	36210 <_printf_float+0x370>
   361a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   361ac:	429a      	cmp	r2, r3
   361ae:	db3b      	blt.n	36228 <_printf_float+0x388>
   361b0:	6823      	ldr	r3, [r4, #0]
   361b2:	07da      	lsls	r2, r3, #31
   361b4:	d438      	bmi.n	36228 <_printf_float+0x388>
   361b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   361b8:	990d      	ldr	r1, [sp, #52]	; 0x34
   361ba:	eba2 030a 	sub.w	r3, r2, sl
   361be:	eba2 0901 	sub.w	r9, r2, r1
   361c2:	4599      	cmp	r9, r3
   361c4:	bfa8      	it	ge
   361c6:	4699      	movge	r9, r3
   361c8:	f1b9 0f00 	cmp.w	r9, #0
   361cc:	dc34      	bgt.n	36238 <_printf_float+0x398>
   361ce:	f04f 0800 	mov.w	r8, #0
   361d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   361d6:	f104 0a1a 	add.w	sl, r4, #26
   361da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   361de:	1a9b      	subs	r3, r3, r2
   361e0:	eba3 0309 	sub.w	r3, r3, r9
   361e4:	4543      	cmp	r3, r8
   361e6:	f77f af7b 	ble.w	360e0 <_printf_float+0x240>
   361ea:	2301      	movs	r3, #1
   361ec:	4652      	mov	r2, sl
   361ee:	4631      	mov	r1, r6
   361f0:	4628      	mov	r0, r5
   361f2:	47b8      	blx	r7
   361f4:	3001      	adds	r0, #1
   361f6:	f43f aeae 	beq.w	35f56 <_printf_float+0xb6>
   361fa:	f108 0801 	add.w	r8, r8, #1
   361fe:	e7ec      	b.n	361da <_printf_float+0x33a>
   36200:	4613      	mov	r3, r2
   36202:	4631      	mov	r1, r6
   36204:	4642      	mov	r2, r8
   36206:	4628      	mov	r0, r5
   36208:	47b8      	blx	r7
   3620a:	3001      	adds	r0, #1
   3620c:	d1c0      	bne.n	36190 <_printf_float+0x2f0>
   3620e:	e6a2      	b.n	35f56 <_printf_float+0xb6>
   36210:	2301      	movs	r3, #1
   36212:	4631      	mov	r1, r6
   36214:	4628      	mov	r0, r5
   36216:	920b      	str	r2, [sp, #44]	; 0x2c
   36218:	47b8      	blx	r7
   3621a:	3001      	adds	r0, #1
   3621c:	f43f ae9b 	beq.w	35f56 <_printf_float+0xb6>
   36220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   36222:	f10b 0b01 	add.w	fp, fp, #1
   36226:	e7b9      	b.n	3619c <_printf_float+0x2fc>
   36228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3622c:	4631      	mov	r1, r6
   3622e:	4628      	mov	r0, r5
   36230:	47b8      	blx	r7
   36232:	3001      	adds	r0, #1
   36234:	d1bf      	bne.n	361b6 <_printf_float+0x316>
   36236:	e68e      	b.n	35f56 <_printf_float+0xb6>
   36238:	464b      	mov	r3, r9
   3623a:	eb08 020a 	add.w	r2, r8, sl
   3623e:	4631      	mov	r1, r6
   36240:	4628      	mov	r0, r5
   36242:	47b8      	blx	r7
   36244:	3001      	adds	r0, #1
   36246:	d1c2      	bne.n	361ce <_printf_float+0x32e>
   36248:	e685      	b.n	35f56 <_printf_float+0xb6>
   3624a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3624c:	2a01      	cmp	r2, #1
   3624e:	dc01      	bgt.n	36254 <_printf_float+0x3b4>
   36250:	07db      	lsls	r3, r3, #31
   36252:	d537      	bpl.n	362c4 <_printf_float+0x424>
   36254:	2301      	movs	r3, #1
   36256:	4642      	mov	r2, r8
   36258:	4631      	mov	r1, r6
   3625a:	4628      	mov	r0, r5
   3625c:	47b8      	blx	r7
   3625e:	3001      	adds	r0, #1
   36260:	f43f ae79 	beq.w	35f56 <_printf_float+0xb6>
   36264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   36268:	4631      	mov	r1, r6
   3626a:	4628      	mov	r0, r5
   3626c:	47b8      	blx	r7
   3626e:	3001      	adds	r0, #1
   36270:	f43f ae71 	beq.w	35f56 <_printf_float+0xb6>
   36274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   36278:	2200      	movs	r2, #0
   3627a:	2300      	movs	r3, #0
   3627c:	f7d6 fe2e 	bl	cedc <__aeabi_dcmpeq>
   36280:	b9d8      	cbnz	r0, 362ba <_printf_float+0x41a>
   36282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   36284:	f108 0201 	add.w	r2, r8, #1
   36288:	3b01      	subs	r3, #1
   3628a:	4631      	mov	r1, r6
   3628c:	4628      	mov	r0, r5
   3628e:	47b8      	blx	r7
   36290:	3001      	adds	r0, #1
   36292:	d10e      	bne.n	362b2 <_printf_float+0x412>
   36294:	e65f      	b.n	35f56 <_printf_float+0xb6>
   36296:	2301      	movs	r3, #1
   36298:	464a      	mov	r2, r9
   3629a:	4631      	mov	r1, r6
   3629c:	4628      	mov	r0, r5
   3629e:	47b8      	blx	r7
   362a0:	3001      	adds	r0, #1
   362a2:	f43f ae58 	beq.w	35f56 <_printf_float+0xb6>
   362a6:	f108 0801 	add.w	r8, r8, #1
   362aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   362ac:	3b01      	subs	r3, #1
   362ae:	4543      	cmp	r3, r8
   362b0:	dcf1      	bgt.n	36296 <_printf_float+0x3f6>
   362b2:	4653      	mov	r3, sl
   362b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
   362b8:	e6e1      	b.n	3607e <_printf_float+0x1de>
   362ba:	f04f 0800 	mov.w	r8, #0
   362be:	f104 091a 	add.w	r9, r4, #26
   362c2:	e7f2      	b.n	362aa <_printf_float+0x40a>
   362c4:	2301      	movs	r3, #1
   362c6:	4642      	mov	r2, r8
   362c8:	e7df      	b.n	3628a <_printf_float+0x3ea>
   362ca:	2301      	movs	r3, #1
   362cc:	464a      	mov	r2, r9
   362ce:	4631      	mov	r1, r6
   362d0:	4628      	mov	r0, r5
   362d2:	47b8      	blx	r7
   362d4:	3001      	adds	r0, #1
   362d6:	f43f ae3e 	beq.w	35f56 <_printf_float+0xb6>
   362da:	f108 0801 	add.w	r8, r8, #1
   362de:	68e3      	ldr	r3, [r4, #12]
   362e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   362e2:	1a5b      	subs	r3, r3, r1
   362e4:	4543      	cmp	r3, r8
   362e6:	dcf0      	bgt.n	362ca <_printf_float+0x42a>
   362e8:	e6fe      	b.n	360e8 <_printf_float+0x248>
   362ea:	f04f 0800 	mov.w	r8, #0
   362ee:	f104 0919 	add.w	r9, r4, #25
   362f2:	e7f4      	b.n	362de <_printf_float+0x43e>

000362f4 <_printf_i>:
   362f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   362f8:	460c      	mov	r4, r1
   362fa:	4691      	mov	r9, r2
   362fc:	7e27      	ldrb	r7, [r4, #24]
   362fe:	990c      	ldr	r1, [sp, #48]	; 0x30
   36300:	2f78      	cmp	r7, #120	; 0x78
   36302:	4680      	mov	r8, r0
   36304:	469a      	mov	sl, r3
   36306:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3630a:	d807      	bhi.n	3631c <_printf_i+0x28>
   3630c:	2f62      	cmp	r7, #98	; 0x62
   3630e:	d80a      	bhi.n	36326 <_printf_i+0x32>
   36310:	2f00      	cmp	r7, #0
   36312:	f000 80d8 	beq.w	364c6 <_printf_i+0x1d2>
   36316:	2f58      	cmp	r7, #88	; 0x58
   36318:	f000 80a3 	beq.w	36462 <_printf_i+0x16e>
   3631c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   36320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   36324:	e03a      	b.n	3639c <_printf_i+0xa8>
   36326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   3632a:	2b15      	cmp	r3, #21
   3632c:	d8f6      	bhi.n	3631c <_printf_i+0x28>
   3632e:	a001      	add	r0, pc, #4	; (adr r0, 36334 <_printf_i+0x40>)
   36330:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   36334:	0003638d 	.word	0x0003638d
   36338:	000363a1 	.word	0x000363a1
   3633c:	0003631d 	.word	0x0003631d
   36340:	0003631d 	.word	0x0003631d
   36344:	0003631d 	.word	0x0003631d
   36348:	0003631d 	.word	0x0003631d
   3634c:	000363a1 	.word	0x000363a1
   36350:	0003631d 	.word	0x0003631d
   36354:	0003631d 	.word	0x0003631d
   36358:	0003631d 	.word	0x0003631d
   3635c:	0003631d 	.word	0x0003631d
   36360:	000364ad 	.word	0x000364ad
   36364:	000363d1 	.word	0x000363d1
   36368:	0003648f 	.word	0x0003648f
   3636c:	0003631d 	.word	0x0003631d
   36370:	0003631d 	.word	0x0003631d
   36374:	000364cf 	.word	0x000364cf
   36378:	0003631d 	.word	0x0003631d
   3637c:	000363d1 	.word	0x000363d1
   36380:	0003631d 	.word	0x0003631d
   36384:	0003631d 	.word	0x0003631d
   36388:	00036497 	.word	0x00036497
   3638c:	680b      	ldr	r3, [r1, #0]
   3638e:	1d1a      	adds	r2, r3, #4
   36390:	681b      	ldr	r3, [r3, #0]
   36392:	600a      	str	r2, [r1, #0]
   36394:	f104 0642 	add.w	r6, r4, #66	; 0x42
   36398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3639c:	2301      	movs	r3, #1
   3639e:	e0a3      	b.n	364e8 <_printf_i+0x1f4>
   363a0:	6825      	ldr	r5, [r4, #0]
   363a2:	6808      	ldr	r0, [r1, #0]
   363a4:	062e      	lsls	r6, r5, #24
   363a6:	f100 0304 	add.w	r3, r0, #4
   363aa:	d50a      	bpl.n	363c2 <_printf_i+0xce>
   363ac:	6805      	ldr	r5, [r0, #0]
   363ae:	600b      	str	r3, [r1, #0]
   363b0:	2d00      	cmp	r5, #0
   363b2:	da03      	bge.n	363bc <_printf_i+0xc8>
   363b4:	232d      	movs	r3, #45	; 0x2d
   363b6:	426d      	negs	r5, r5
   363b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   363bc:	485e      	ldr	r0, [pc, #376]	; (36538 <_printf_i+0x244>)
   363be:	230a      	movs	r3, #10
   363c0:	e019      	b.n	363f6 <_printf_i+0x102>
   363c2:	f015 0f40 	tst.w	r5, #64	; 0x40
   363c6:	6805      	ldr	r5, [r0, #0]
   363c8:	600b      	str	r3, [r1, #0]
   363ca:	bf18      	it	ne
   363cc:	b22d      	sxthne	r5, r5
   363ce:	e7ef      	b.n	363b0 <_printf_i+0xbc>
   363d0:	680b      	ldr	r3, [r1, #0]
   363d2:	6825      	ldr	r5, [r4, #0]
   363d4:	1d18      	adds	r0, r3, #4
   363d6:	6008      	str	r0, [r1, #0]
   363d8:	0628      	lsls	r0, r5, #24
   363da:	d501      	bpl.n	363e0 <_printf_i+0xec>
   363dc:	681d      	ldr	r5, [r3, #0]
   363de:	e002      	b.n	363e6 <_printf_i+0xf2>
   363e0:	0669      	lsls	r1, r5, #25
   363e2:	d5fb      	bpl.n	363dc <_printf_i+0xe8>
   363e4:	881d      	ldrh	r5, [r3, #0]
   363e6:	4854      	ldr	r0, [pc, #336]	; (36538 <_printf_i+0x244>)
   363e8:	2f6f      	cmp	r7, #111	; 0x6f
   363ea:	bf0c      	ite	eq
   363ec:	2308      	moveq	r3, #8
   363ee:	230a      	movne	r3, #10
   363f0:	2100      	movs	r1, #0
   363f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   363f6:	6866      	ldr	r6, [r4, #4]
   363f8:	60a6      	str	r6, [r4, #8]
   363fa:	2e00      	cmp	r6, #0
   363fc:	bfa2      	ittt	ge
   363fe:	6821      	ldrge	r1, [r4, #0]
   36400:	f021 0104 	bicge.w	r1, r1, #4
   36404:	6021      	strge	r1, [r4, #0]
   36406:	b90d      	cbnz	r5, 3640c <_printf_i+0x118>
   36408:	2e00      	cmp	r6, #0
   3640a:	d04d      	beq.n	364a8 <_printf_i+0x1b4>
   3640c:	4616      	mov	r6, r2
   3640e:	fbb5 f1f3 	udiv	r1, r5, r3
   36412:	fb03 5711 	mls	r7, r3, r1, r5
   36416:	5dc7      	ldrb	r7, [r0, r7]
   36418:	f806 7d01 	strb.w	r7, [r6, #-1]!
   3641c:	462f      	mov	r7, r5
   3641e:	42bb      	cmp	r3, r7
   36420:	460d      	mov	r5, r1
   36422:	d9f4      	bls.n	3640e <_printf_i+0x11a>
   36424:	2b08      	cmp	r3, #8
   36426:	d10b      	bne.n	36440 <_printf_i+0x14c>
   36428:	6823      	ldr	r3, [r4, #0]
   3642a:	07df      	lsls	r7, r3, #31
   3642c:	d508      	bpl.n	36440 <_printf_i+0x14c>
   3642e:	6923      	ldr	r3, [r4, #16]
   36430:	6861      	ldr	r1, [r4, #4]
   36432:	4299      	cmp	r1, r3
   36434:	bfde      	ittt	le
   36436:	2330      	movle	r3, #48	; 0x30
   36438:	f806 3c01 	strble.w	r3, [r6, #-1]
   3643c:	f106 36ff 	addle.w	r6, r6, #4294967295
   36440:	1b92      	subs	r2, r2, r6
   36442:	6122      	str	r2, [r4, #16]
   36444:	f8cd a000 	str.w	sl, [sp]
   36448:	464b      	mov	r3, r9
   3644a:	aa03      	add	r2, sp, #12
   3644c:	4621      	mov	r1, r4
   3644e:	4640      	mov	r0, r8
   36450:	f004 f968 	bl	3a724 <_printf_common>
   36454:	3001      	adds	r0, #1
   36456:	d14c      	bne.n	364f2 <_printf_i+0x1fe>
   36458:	f04f 30ff 	mov.w	r0, #4294967295
   3645c:	b004      	add	sp, #16
   3645e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36462:	4835      	ldr	r0, [pc, #212]	; (36538 <_printf_i+0x244>)
   36464:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   36468:	6823      	ldr	r3, [r4, #0]
   3646a:	680e      	ldr	r6, [r1, #0]
   3646c:	061f      	lsls	r7, r3, #24
   3646e:	f856 5b04 	ldr.w	r5, [r6], #4
   36472:	600e      	str	r6, [r1, #0]
   36474:	d514      	bpl.n	364a0 <_printf_i+0x1ac>
   36476:	07d9      	lsls	r1, r3, #31
   36478:	bf44      	itt	mi
   3647a:	f043 0320 	orrmi.w	r3, r3, #32
   3647e:	6023      	strmi	r3, [r4, #0]
   36480:	b91d      	cbnz	r5, 3648a <_printf_i+0x196>
   36482:	6823      	ldr	r3, [r4, #0]
   36484:	f023 0320 	bic.w	r3, r3, #32
   36488:	6023      	str	r3, [r4, #0]
   3648a:	2310      	movs	r3, #16
   3648c:	e7b0      	b.n	363f0 <_printf_i+0xfc>
   3648e:	6823      	ldr	r3, [r4, #0]
   36490:	f043 0320 	orr.w	r3, r3, #32
   36494:	6023      	str	r3, [r4, #0]
   36496:	2378      	movs	r3, #120	; 0x78
   36498:	4828      	ldr	r0, [pc, #160]	; (3653c <_printf_i+0x248>)
   3649a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   3649e:	e7e3      	b.n	36468 <_printf_i+0x174>
   364a0:	065e      	lsls	r6, r3, #25
   364a2:	bf48      	it	mi
   364a4:	b2ad      	uxthmi	r5, r5
   364a6:	e7e6      	b.n	36476 <_printf_i+0x182>
   364a8:	4616      	mov	r6, r2
   364aa:	e7bb      	b.n	36424 <_printf_i+0x130>
   364ac:	680b      	ldr	r3, [r1, #0]
   364ae:	6826      	ldr	r6, [r4, #0]
   364b0:	6960      	ldr	r0, [r4, #20]
   364b2:	1d1d      	adds	r5, r3, #4
   364b4:	600d      	str	r5, [r1, #0]
   364b6:	0635      	lsls	r5, r6, #24
   364b8:	681b      	ldr	r3, [r3, #0]
   364ba:	d501      	bpl.n	364c0 <_printf_i+0x1cc>
   364bc:	6018      	str	r0, [r3, #0]
   364be:	e002      	b.n	364c6 <_printf_i+0x1d2>
   364c0:	0671      	lsls	r1, r6, #25
   364c2:	d5fb      	bpl.n	364bc <_printf_i+0x1c8>
   364c4:	8018      	strh	r0, [r3, #0]
   364c6:	2300      	movs	r3, #0
   364c8:	6123      	str	r3, [r4, #16]
   364ca:	4616      	mov	r6, r2
   364cc:	e7ba      	b.n	36444 <_printf_i+0x150>
   364ce:	680b      	ldr	r3, [r1, #0]
   364d0:	1d1a      	adds	r2, r3, #4
   364d2:	600a      	str	r2, [r1, #0]
   364d4:	681e      	ldr	r6, [r3, #0]
   364d6:	6862      	ldr	r2, [r4, #4]
   364d8:	2100      	movs	r1, #0
   364da:	4630      	mov	r0, r6
   364dc:	f7d5 ff10 	bl	c300 <memchr>
   364e0:	b108      	cbz	r0, 364e6 <_printf_i+0x1f2>
   364e2:	1b80      	subs	r0, r0, r6
   364e4:	6060      	str	r0, [r4, #4]
   364e6:	6863      	ldr	r3, [r4, #4]
   364e8:	6123      	str	r3, [r4, #16]
   364ea:	2300      	movs	r3, #0
   364ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   364f0:	e7a8      	b.n	36444 <_printf_i+0x150>
   364f2:	6923      	ldr	r3, [r4, #16]
   364f4:	4632      	mov	r2, r6
   364f6:	4649      	mov	r1, r9
   364f8:	4640      	mov	r0, r8
   364fa:	47d0      	blx	sl
   364fc:	3001      	adds	r0, #1
   364fe:	d0ab      	beq.n	36458 <_printf_i+0x164>
   36500:	6823      	ldr	r3, [r4, #0]
   36502:	079b      	lsls	r3, r3, #30
   36504:	d413      	bmi.n	3652e <_printf_i+0x23a>
   36506:	68e0      	ldr	r0, [r4, #12]
   36508:	9b03      	ldr	r3, [sp, #12]
   3650a:	4298      	cmp	r0, r3
   3650c:	bfb8      	it	lt
   3650e:	4618      	movlt	r0, r3
   36510:	e7a4      	b.n	3645c <_printf_i+0x168>
   36512:	2301      	movs	r3, #1
   36514:	4632      	mov	r2, r6
   36516:	4649      	mov	r1, r9
   36518:	4640      	mov	r0, r8
   3651a:	47d0      	blx	sl
   3651c:	3001      	adds	r0, #1
   3651e:	d09b      	beq.n	36458 <_printf_i+0x164>
   36520:	3501      	adds	r5, #1
   36522:	68e3      	ldr	r3, [r4, #12]
   36524:	9903      	ldr	r1, [sp, #12]
   36526:	1a5b      	subs	r3, r3, r1
   36528:	42ab      	cmp	r3, r5
   3652a:	dcf2      	bgt.n	36512 <_printf_i+0x21e>
   3652c:	e7eb      	b.n	36506 <_printf_i+0x212>
   3652e:	2500      	movs	r5, #0
   36530:	f104 0619 	add.w	r6, r4, #25
   36534:	e7f5      	b.n	36522 <_printf_i+0x22e>
   36536:	bf00      	nop
   36538:	00041c19 	.word	0x00041c19
   3653c:	00041c2a 	.word	0x00041c2a

00036540 <_sbrk_r>:
   36540:	b538      	push	{r3, r4, r5, lr}
   36542:	4d06      	ldr	r5, [pc, #24]	; (3655c <_sbrk_r+0x1c>)
   36544:	2300      	movs	r3, #0
   36546:	4604      	mov	r4, r0
   36548:	4608      	mov	r0, r1
   3654a:	602b      	str	r3, [r5, #0]
   3654c:	f7ec fc86 	bl	22e5c <_sbrk>
   36550:	1c43      	adds	r3, r0, #1
   36552:	d102      	bne.n	3655a <_sbrk_r+0x1a>
   36554:	682b      	ldr	r3, [r5, #0]
   36556:	b103      	cbz	r3, 3655a <_sbrk_r+0x1a>
   36558:	6023      	str	r3, [r4, #0]
   3655a:	bd38      	pop	{r3, r4, r5, pc}
   3655c:	20004a4c 	.word	0x20004a4c

00036560 <_strtoul_l.isra.0>:
   36560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36564:	4e3b      	ldr	r6, [pc, #236]	; (36654 <_strtoul_l.isra.0+0xf4>)
   36566:	4686      	mov	lr, r0
   36568:	468c      	mov	ip, r1
   3656a:	4660      	mov	r0, ip
   3656c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   36570:	5da5      	ldrb	r5, [r4, r6]
   36572:	f015 0508 	ands.w	r5, r5, #8
   36576:	d1f8      	bne.n	3656a <_strtoul_l.isra.0+0xa>
   36578:	2c2d      	cmp	r4, #45	; 0x2d
   3657a:	d134      	bne.n	365e6 <_strtoul_l.isra.0+0x86>
   3657c:	f89c 4000 	ldrb.w	r4, [ip]
   36580:	f04f 0801 	mov.w	r8, #1
   36584:	f100 0c02 	add.w	ip, r0, #2
   36588:	2b00      	cmp	r3, #0
   3658a:	d05e      	beq.n	3664a <_strtoul_l.isra.0+0xea>
   3658c:	2b10      	cmp	r3, #16
   3658e:	d10c      	bne.n	365aa <_strtoul_l.isra.0+0x4a>
   36590:	2c30      	cmp	r4, #48	; 0x30
   36592:	d10a      	bne.n	365aa <_strtoul_l.isra.0+0x4a>
   36594:	f89c 0000 	ldrb.w	r0, [ip]
   36598:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3659c:	2858      	cmp	r0, #88	; 0x58
   3659e:	d14f      	bne.n	36640 <_strtoul_l.isra.0+0xe0>
   365a0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   365a4:	2310      	movs	r3, #16
   365a6:	f10c 0c02 	add.w	ip, ip, #2
   365aa:	f04f 37ff 	mov.w	r7, #4294967295
   365ae:	2500      	movs	r5, #0
   365b0:	fbb7 f7f3 	udiv	r7, r7, r3
   365b4:	fb03 f907 	mul.w	r9, r3, r7
   365b8:	ea6f 0909 	mvn.w	r9, r9
   365bc:	4628      	mov	r0, r5
   365be:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   365c2:	2e09      	cmp	r6, #9
   365c4:	d818      	bhi.n	365f8 <_strtoul_l.isra.0+0x98>
   365c6:	4634      	mov	r4, r6
   365c8:	42a3      	cmp	r3, r4
   365ca:	dd24      	ble.n	36616 <_strtoul_l.isra.0+0xb6>
   365cc:	2d00      	cmp	r5, #0
   365ce:	db1f      	blt.n	36610 <_strtoul_l.isra.0+0xb0>
   365d0:	4287      	cmp	r7, r0
   365d2:	d31d      	bcc.n	36610 <_strtoul_l.isra.0+0xb0>
   365d4:	d101      	bne.n	365da <_strtoul_l.isra.0+0x7a>
   365d6:	45a1      	cmp	r9, r4
   365d8:	db1a      	blt.n	36610 <_strtoul_l.isra.0+0xb0>
   365da:	fb00 4003 	mla	r0, r0, r3, r4
   365de:	2501      	movs	r5, #1
   365e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   365e4:	e7eb      	b.n	365be <_strtoul_l.isra.0+0x5e>
   365e6:	2c2b      	cmp	r4, #43	; 0x2b
   365e8:	bf08      	it	eq
   365ea:	f89c 4000 	ldrbeq.w	r4, [ip]
   365ee:	46a8      	mov	r8, r5
   365f0:	bf08      	it	eq
   365f2:	f100 0c02 	addeq.w	ip, r0, #2
   365f6:	e7c7      	b.n	36588 <_strtoul_l.isra.0+0x28>
   365f8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   365fc:	2e19      	cmp	r6, #25
   365fe:	d801      	bhi.n	36604 <_strtoul_l.isra.0+0xa4>
   36600:	3c37      	subs	r4, #55	; 0x37
   36602:	e7e1      	b.n	365c8 <_strtoul_l.isra.0+0x68>
   36604:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   36608:	2e19      	cmp	r6, #25
   3660a:	d804      	bhi.n	36616 <_strtoul_l.isra.0+0xb6>
   3660c:	3c57      	subs	r4, #87	; 0x57
   3660e:	e7db      	b.n	365c8 <_strtoul_l.isra.0+0x68>
   36610:	f04f 35ff 	mov.w	r5, #4294967295
   36614:	e7e4      	b.n	365e0 <_strtoul_l.isra.0+0x80>
   36616:	2d00      	cmp	r5, #0
   36618:	da07      	bge.n	3662a <_strtoul_l.isra.0+0xca>
   3661a:	2322      	movs	r3, #34	; 0x22
   3661c:	f8ce 3000 	str.w	r3, [lr]
   36620:	f04f 30ff 	mov.w	r0, #4294967295
   36624:	b942      	cbnz	r2, 36638 <_strtoul_l.isra.0+0xd8>
   36626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3662a:	f1b8 0f00 	cmp.w	r8, #0
   3662e:	d000      	beq.n	36632 <_strtoul_l.isra.0+0xd2>
   36630:	4240      	negs	r0, r0
   36632:	2a00      	cmp	r2, #0
   36634:	d0f7      	beq.n	36626 <_strtoul_l.isra.0+0xc6>
   36636:	b10d      	cbz	r5, 3663c <_strtoul_l.isra.0+0xdc>
   36638:	f10c 31ff 	add.w	r1, ip, #4294967295
   3663c:	6011      	str	r1, [r2, #0]
   3663e:	e7f2      	b.n	36626 <_strtoul_l.isra.0+0xc6>
   36640:	2430      	movs	r4, #48	; 0x30
   36642:	2b00      	cmp	r3, #0
   36644:	d1b1      	bne.n	365aa <_strtoul_l.isra.0+0x4a>
   36646:	2308      	movs	r3, #8
   36648:	e7af      	b.n	365aa <_strtoul_l.isra.0+0x4a>
   3664a:	2c30      	cmp	r4, #48	; 0x30
   3664c:	d0a2      	beq.n	36594 <_strtoul_l.isra.0+0x34>
   3664e:	230a      	movs	r3, #10
   36650:	e7ab      	b.n	365aa <_strtoul_l.isra.0+0x4a>
   36652:	bf00      	nop
   36654:	00041afc 	.word	0x00041afc

00036658 <strtoul>:
   36658:	4613      	mov	r3, r2
   3665a:	460a      	mov	r2, r1
   3665c:	4601      	mov	r1, r0
   3665e:	4802      	ldr	r0, [pc, #8]	; (36668 <strtoul+0x10>)
   36660:	6800      	ldr	r0, [r0, #0]
   36662:	f7ff bf7d 	b.w	36560 <_strtoul_l.isra.0>
   36666:	bf00      	nop
   36668:	20000778 	.word	0x20000778

0003666c <__swbuf_r>:
   3666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3666e:	460e      	mov	r6, r1
   36670:	4614      	mov	r4, r2
   36672:	4605      	mov	r5, r0
   36674:	b118      	cbz	r0, 3667e <__swbuf_r+0x12>
   36676:	6983      	ldr	r3, [r0, #24]
   36678:	b90b      	cbnz	r3, 3667e <__swbuf_r+0x12>
   3667a:	f000 f9bb 	bl	369f4 <__sinit>
   3667e:	4b21      	ldr	r3, [pc, #132]	; (36704 <__swbuf_r+0x98>)
   36680:	429c      	cmp	r4, r3
   36682:	d12b      	bne.n	366dc <__swbuf_r+0x70>
   36684:	686c      	ldr	r4, [r5, #4]
   36686:	69a3      	ldr	r3, [r4, #24]
   36688:	60a3      	str	r3, [r4, #8]
   3668a:	89a3      	ldrh	r3, [r4, #12]
   3668c:	071a      	lsls	r2, r3, #28
   3668e:	d52f      	bpl.n	366f0 <__swbuf_r+0x84>
   36690:	6923      	ldr	r3, [r4, #16]
   36692:	b36b      	cbz	r3, 366f0 <__swbuf_r+0x84>
   36694:	6923      	ldr	r3, [r4, #16]
   36696:	6820      	ldr	r0, [r4, #0]
   36698:	1ac0      	subs	r0, r0, r3
   3669a:	6963      	ldr	r3, [r4, #20]
   3669c:	b2f6      	uxtb	r6, r6
   3669e:	4283      	cmp	r3, r0
   366a0:	4637      	mov	r7, r6
   366a2:	dc04      	bgt.n	366ae <__swbuf_r+0x42>
   366a4:	4621      	mov	r1, r4
   366a6:	4628      	mov	r0, r5
   366a8:	f000 f926 	bl	368f8 <_fflush_r>
   366ac:	bb30      	cbnz	r0, 366fc <__swbuf_r+0x90>
   366ae:	68a3      	ldr	r3, [r4, #8]
   366b0:	3b01      	subs	r3, #1
   366b2:	60a3      	str	r3, [r4, #8]
   366b4:	6823      	ldr	r3, [r4, #0]
   366b6:	1c5a      	adds	r2, r3, #1
   366b8:	6022      	str	r2, [r4, #0]
   366ba:	701e      	strb	r6, [r3, #0]
   366bc:	6963      	ldr	r3, [r4, #20]
   366be:	3001      	adds	r0, #1
   366c0:	4283      	cmp	r3, r0
   366c2:	d004      	beq.n	366ce <__swbuf_r+0x62>
   366c4:	89a3      	ldrh	r3, [r4, #12]
   366c6:	07db      	lsls	r3, r3, #31
   366c8:	d506      	bpl.n	366d8 <__swbuf_r+0x6c>
   366ca:	2e0a      	cmp	r6, #10
   366cc:	d104      	bne.n	366d8 <__swbuf_r+0x6c>
   366ce:	4621      	mov	r1, r4
   366d0:	4628      	mov	r0, r5
   366d2:	f000 f911 	bl	368f8 <_fflush_r>
   366d6:	b988      	cbnz	r0, 366fc <__swbuf_r+0x90>
   366d8:	4638      	mov	r0, r7
   366da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   366dc:	4b0a      	ldr	r3, [pc, #40]	; (36708 <__swbuf_r+0x9c>)
   366de:	429c      	cmp	r4, r3
   366e0:	d101      	bne.n	366e6 <__swbuf_r+0x7a>
   366e2:	68ac      	ldr	r4, [r5, #8]
   366e4:	e7cf      	b.n	36686 <__swbuf_r+0x1a>
   366e6:	4b09      	ldr	r3, [pc, #36]	; (3670c <__swbuf_r+0xa0>)
   366e8:	429c      	cmp	r4, r3
   366ea:	bf08      	it	eq
   366ec:	68ec      	ldreq	r4, [r5, #12]
   366ee:	e7ca      	b.n	36686 <__swbuf_r+0x1a>
   366f0:	4621      	mov	r1, r4
   366f2:	4628      	mov	r0, r5
   366f4:	f000 f80c 	bl	36710 <__swsetup_r>
   366f8:	2800      	cmp	r0, #0
   366fa:	d0cb      	beq.n	36694 <__swbuf_r+0x28>
   366fc:	f04f 37ff 	mov.w	r7, #4294967295
   36700:	e7ea      	b.n	366d8 <__swbuf_r+0x6c>
   36702:	bf00      	nop
   36704:	0003c000 	.word	0x0003c000
   36708:	0003c020 	.word	0x0003c020
   3670c:	0003bfe0 	.word	0x0003bfe0

00036710 <__swsetup_r>:
   36710:	4b32      	ldr	r3, [pc, #200]	; (367dc <__swsetup_r+0xcc>)
   36712:	b570      	push	{r4, r5, r6, lr}
   36714:	681d      	ldr	r5, [r3, #0]
   36716:	4606      	mov	r6, r0
   36718:	460c      	mov	r4, r1
   3671a:	b125      	cbz	r5, 36726 <__swsetup_r+0x16>
   3671c:	69ab      	ldr	r3, [r5, #24]
   3671e:	b913      	cbnz	r3, 36726 <__swsetup_r+0x16>
   36720:	4628      	mov	r0, r5
   36722:	f000 f967 	bl	369f4 <__sinit>
   36726:	4b2e      	ldr	r3, [pc, #184]	; (367e0 <__swsetup_r+0xd0>)
   36728:	429c      	cmp	r4, r3
   3672a:	d10f      	bne.n	3674c <__swsetup_r+0x3c>
   3672c:	686c      	ldr	r4, [r5, #4]
   3672e:	89a3      	ldrh	r3, [r4, #12]
   36730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   36734:	0719      	lsls	r1, r3, #28
   36736:	d42c      	bmi.n	36792 <__swsetup_r+0x82>
   36738:	06dd      	lsls	r5, r3, #27
   3673a:	d411      	bmi.n	36760 <__swsetup_r+0x50>
   3673c:	2309      	movs	r3, #9
   3673e:	6033      	str	r3, [r6, #0]
   36740:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   36744:	81a3      	strh	r3, [r4, #12]
   36746:	f04f 30ff 	mov.w	r0, #4294967295
   3674a:	e03e      	b.n	367ca <__swsetup_r+0xba>
   3674c:	4b25      	ldr	r3, [pc, #148]	; (367e4 <__swsetup_r+0xd4>)
   3674e:	429c      	cmp	r4, r3
   36750:	d101      	bne.n	36756 <__swsetup_r+0x46>
   36752:	68ac      	ldr	r4, [r5, #8]
   36754:	e7eb      	b.n	3672e <__swsetup_r+0x1e>
   36756:	4b24      	ldr	r3, [pc, #144]	; (367e8 <__swsetup_r+0xd8>)
   36758:	429c      	cmp	r4, r3
   3675a:	bf08      	it	eq
   3675c:	68ec      	ldreq	r4, [r5, #12]
   3675e:	e7e6      	b.n	3672e <__swsetup_r+0x1e>
   36760:	0758      	lsls	r0, r3, #29
   36762:	d512      	bpl.n	3678a <__swsetup_r+0x7a>
   36764:	6b61      	ldr	r1, [r4, #52]	; 0x34
   36766:	b141      	cbz	r1, 3677a <__swsetup_r+0x6a>
   36768:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3676c:	4299      	cmp	r1, r3
   3676e:	d002      	beq.n	36776 <__swsetup_r+0x66>
   36770:	4630      	mov	r0, r6
   36772:	f7ff f9bd 	bl	35af0 <_free_r>
   36776:	2300      	movs	r3, #0
   36778:	6363      	str	r3, [r4, #52]	; 0x34
   3677a:	89a3      	ldrh	r3, [r4, #12]
   3677c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   36780:	81a3      	strh	r3, [r4, #12]
   36782:	2300      	movs	r3, #0
   36784:	6063      	str	r3, [r4, #4]
   36786:	6923      	ldr	r3, [r4, #16]
   36788:	6023      	str	r3, [r4, #0]
   3678a:	89a3      	ldrh	r3, [r4, #12]
   3678c:	f043 0308 	orr.w	r3, r3, #8
   36790:	81a3      	strh	r3, [r4, #12]
   36792:	6923      	ldr	r3, [r4, #16]
   36794:	b94b      	cbnz	r3, 367aa <__swsetup_r+0x9a>
   36796:	89a3      	ldrh	r3, [r4, #12]
   36798:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3679c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   367a0:	d003      	beq.n	367aa <__swsetup_r+0x9a>
   367a2:	4621      	mov	r1, r4
   367a4:	4630      	mov	r0, r6
   367a6:	f000 f9a7 	bl	36af8 <__smakebuf_r>
   367aa:	89a0      	ldrh	r0, [r4, #12]
   367ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   367b0:	f010 0301 	ands.w	r3, r0, #1
   367b4:	d00a      	beq.n	367cc <__swsetup_r+0xbc>
   367b6:	2300      	movs	r3, #0
   367b8:	60a3      	str	r3, [r4, #8]
   367ba:	6963      	ldr	r3, [r4, #20]
   367bc:	425b      	negs	r3, r3
   367be:	61a3      	str	r3, [r4, #24]
   367c0:	6923      	ldr	r3, [r4, #16]
   367c2:	b943      	cbnz	r3, 367d6 <__swsetup_r+0xc6>
   367c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   367c8:	d1ba      	bne.n	36740 <__swsetup_r+0x30>
   367ca:	bd70      	pop	{r4, r5, r6, pc}
   367cc:	0781      	lsls	r1, r0, #30
   367ce:	bf58      	it	pl
   367d0:	6963      	ldrpl	r3, [r4, #20]
   367d2:	60a3      	str	r3, [r4, #8]
   367d4:	e7f4      	b.n	367c0 <__swsetup_r+0xb0>
   367d6:	2000      	movs	r0, #0
   367d8:	e7f7      	b.n	367ca <__swsetup_r+0xba>
   367da:	bf00      	nop
   367dc:	20000778 	.word	0x20000778
   367e0:	0003c000 	.word	0x0003c000
   367e4:	0003c020 	.word	0x0003c020
   367e8:	0003bfe0 	.word	0x0003bfe0

000367ec <__sflush_r>:
   367ec:	898a      	ldrh	r2, [r1, #12]
   367ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   367f2:	4605      	mov	r5, r0
   367f4:	0710      	lsls	r0, r2, #28
   367f6:	460c      	mov	r4, r1
   367f8:	d458      	bmi.n	368ac <_flash_used+0x3c>
   367fa:	684b      	ldr	r3, [r1, #4]
   367fc:	2b00      	cmp	r3, #0
   367fe:	dc05      	bgt.n	3680c <__sflush_r+0x20>
   36800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   36802:	2b00      	cmp	r3, #0
   36804:	dc02      	bgt.n	3680c <__sflush_r+0x20>
   36806:	2000      	movs	r0, #0
   36808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3680c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3680e:	2e00      	cmp	r6, #0
   36810:	d0f9      	beq.n	36806 <__sflush_r+0x1a>
   36812:	2300      	movs	r3, #0
   36814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   36818:	682f      	ldr	r7, [r5, #0]
   3681a:	602b      	str	r3, [r5, #0]
   3681c:	d032      	beq.n	36884 <_flash_used+0x14>
   3681e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   36820:	89a3      	ldrh	r3, [r4, #12]
   36822:	075a      	lsls	r2, r3, #29
   36824:	d505      	bpl.n	36832 <__sflush_r+0x46>
   36826:	6863      	ldr	r3, [r4, #4]
   36828:	1ac0      	subs	r0, r0, r3
   3682a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3682c:	b10b      	cbz	r3, 36832 <__sflush_r+0x46>
   3682e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   36830:	1ac0      	subs	r0, r0, r3
   36832:	2300      	movs	r3, #0
   36834:	4602      	mov	r2, r0
   36836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   36838:	6a21      	ldr	r1, [r4, #32]
   3683a:	4628      	mov	r0, r5
   3683c:	47b0      	blx	r6
   3683e:	1c43      	adds	r3, r0, #1
   36840:	89a3      	ldrh	r3, [r4, #12]
   36842:	d106      	bne.n	36852 <__sflush_r+0x66>
   36844:	6829      	ldr	r1, [r5, #0]
   36846:	291d      	cmp	r1, #29
   36848:	d82c      	bhi.n	368a4 <_flash_used+0x34>
   3684a:	4a2a      	ldr	r2, [pc, #168]	; (368f4 <_flash_used+0x84>)
   3684c:	40ca      	lsrs	r2, r1
   3684e:	07d6      	lsls	r6, r2, #31
   36850:	d528      	bpl.n	368a4 <_flash_used+0x34>
   36852:	2200      	movs	r2, #0
   36854:	6062      	str	r2, [r4, #4]
   36856:	04d9      	lsls	r1, r3, #19
   36858:	6922      	ldr	r2, [r4, #16]
   3685a:	6022      	str	r2, [r4, #0]
   3685c:	d504      	bpl.n	36868 <__sflush_r+0x7c>
   3685e:	1c42      	adds	r2, r0, #1
   36860:	d101      	bne.n	36866 <__sflush_r+0x7a>
   36862:	682b      	ldr	r3, [r5, #0]
   36864:	b903      	cbnz	r3, 36868 <__sflush_r+0x7c>
   36866:	6560      	str	r0, [r4, #84]	; 0x54
   36868:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3686a:	602f      	str	r7, [r5, #0]
   3686c:	2900      	cmp	r1, #0
   3686e:	d0ca      	beq.n	36806 <__sflush_r+0x1a>
   36870:	f104 0344 	add.w	r3, r4, #68	; 0x44
   36874:	4299      	cmp	r1, r3
   36876:	d002      	beq.n	3687e <_flash_used+0xe>
   36878:	4628      	mov	r0, r5
   3687a:	f7ff f939 	bl	35af0 <_free_r>
   3687e:	2000      	movs	r0, #0
   36880:	6360      	str	r0, [r4, #52]	; 0x34
   36882:	e7c1      	b.n	36808 <__sflush_r+0x1c>
   36884:	6a21      	ldr	r1, [r4, #32]
   36886:	2301      	movs	r3, #1
   36888:	4628      	mov	r0, r5
   3688a:	47b0      	blx	r6
   3688c:	1c41      	adds	r1, r0, #1
   3688e:	d1c7      	bne.n	36820 <__sflush_r+0x34>
   36890:	682b      	ldr	r3, [r5, #0]
   36892:	2b00      	cmp	r3, #0
   36894:	d0c4      	beq.n	36820 <__sflush_r+0x34>
   36896:	2b1d      	cmp	r3, #29
   36898:	d001      	beq.n	3689e <_flash_used+0x2e>
   3689a:	2b16      	cmp	r3, #22
   3689c:	d101      	bne.n	368a2 <_flash_used+0x32>
   3689e:	602f      	str	r7, [r5, #0]
   368a0:	e7b1      	b.n	36806 <__sflush_r+0x1a>
   368a2:	89a3      	ldrh	r3, [r4, #12]
   368a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   368a8:	81a3      	strh	r3, [r4, #12]
   368aa:	e7ad      	b.n	36808 <__sflush_r+0x1c>
   368ac:	690f      	ldr	r7, [r1, #16]
   368ae:	2f00      	cmp	r7, #0
   368b0:	d0a9      	beq.n	36806 <__sflush_r+0x1a>
   368b2:	0793      	lsls	r3, r2, #30
   368b4:	680e      	ldr	r6, [r1, #0]
   368b6:	bf08      	it	eq
   368b8:	694b      	ldreq	r3, [r1, #20]
   368ba:	600f      	str	r7, [r1, #0]
   368bc:	bf18      	it	ne
   368be:	2300      	movne	r3, #0
   368c0:	eba6 0807 	sub.w	r8, r6, r7
   368c4:	608b      	str	r3, [r1, #8]
   368c6:	f1b8 0f00 	cmp.w	r8, #0
   368ca:	dd9c      	ble.n	36806 <__sflush_r+0x1a>
   368cc:	6a21      	ldr	r1, [r4, #32]
   368ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   368d0:	4643      	mov	r3, r8
   368d2:	463a      	mov	r2, r7
   368d4:	4628      	mov	r0, r5
   368d6:	47b0      	blx	r6
   368d8:	2800      	cmp	r0, #0
   368da:	dc06      	bgt.n	368ea <_flash_used+0x7a>
   368dc:	89a3      	ldrh	r3, [r4, #12]
   368de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   368e2:	81a3      	strh	r3, [r4, #12]
   368e4:	f04f 30ff 	mov.w	r0, #4294967295
   368e8:	e78e      	b.n	36808 <__sflush_r+0x1c>
   368ea:	4407      	add	r7, r0
   368ec:	eba8 0800 	sub.w	r8, r8, r0
   368f0:	e7e9      	b.n	368c6 <_flash_used+0x56>
   368f2:	bf00      	nop
   368f4:	20400001 	.word	0x20400001

000368f8 <_fflush_r>:
   368f8:	b538      	push	{r3, r4, r5, lr}
   368fa:	690b      	ldr	r3, [r1, #16]
   368fc:	4605      	mov	r5, r0
   368fe:	460c      	mov	r4, r1
   36900:	b913      	cbnz	r3, 36908 <_fflush_r+0x10>
   36902:	2500      	movs	r5, #0
   36904:	4628      	mov	r0, r5
   36906:	bd38      	pop	{r3, r4, r5, pc}
   36908:	b118      	cbz	r0, 36912 <_fflush_r+0x1a>
   3690a:	6983      	ldr	r3, [r0, #24]
   3690c:	b90b      	cbnz	r3, 36912 <_fflush_r+0x1a>
   3690e:	f000 f871 	bl	369f4 <__sinit>
   36912:	4b14      	ldr	r3, [pc, #80]	; (36964 <_fflush_r+0x6c>)
   36914:	429c      	cmp	r4, r3
   36916:	d11b      	bne.n	36950 <_fflush_r+0x58>
   36918:	686c      	ldr	r4, [r5, #4]
   3691a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3691e:	2b00      	cmp	r3, #0
   36920:	d0ef      	beq.n	36902 <_fflush_r+0xa>
   36922:	6e62      	ldr	r2, [r4, #100]	; 0x64
   36924:	07d0      	lsls	r0, r2, #31
   36926:	d404      	bmi.n	36932 <_fflush_r+0x3a>
   36928:	0599      	lsls	r1, r3, #22
   3692a:	d402      	bmi.n	36932 <_fflush_r+0x3a>
   3692c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3692e:	f7ec fadb 	bl	22ee8 <__retarget_lock_acquire_recursive>
   36932:	4628      	mov	r0, r5
   36934:	4621      	mov	r1, r4
   36936:	f7ff ff59 	bl	367ec <__sflush_r>
   3693a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3693c:	07da      	lsls	r2, r3, #31
   3693e:	4605      	mov	r5, r0
   36940:	d4e0      	bmi.n	36904 <_fflush_r+0xc>
   36942:	89a3      	ldrh	r3, [r4, #12]
   36944:	059b      	lsls	r3, r3, #22
   36946:	d4dd      	bmi.n	36904 <_fflush_r+0xc>
   36948:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3694a:	f7ec faeb 	bl	22f24 <__retarget_lock_release_recursive>
   3694e:	e7d9      	b.n	36904 <_fflush_r+0xc>
   36950:	4b05      	ldr	r3, [pc, #20]	; (36968 <_fflush_r+0x70>)
   36952:	429c      	cmp	r4, r3
   36954:	d101      	bne.n	3695a <_fflush_r+0x62>
   36956:	68ac      	ldr	r4, [r5, #8]
   36958:	e7df      	b.n	3691a <_fflush_r+0x22>
   3695a:	4b04      	ldr	r3, [pc, #16]	; (3696c <_fflush_r+0x74>)
   3695c:	429c      	cmp	r4, r3
   3695e:	bf08      	it	eq
   36960:	68ec      	ldreq	r4, [r5, #12]
   36962:	e7da      	b.n	3691a <_fflush_r+0x22>
   36964:	0003c000 	.word	0x0003c000
   36968:	0003c020 	.word	0x0003c020
   3696c:	0003bfe0 	.word	0x0003bfe0

00036970 <std>:
   36970:	2300      	movs	r3, #0
   36972:	b510      	push	{r4, lr}
   36974:	4604      	mov	r4, r0
   36976:	e9c0 3300 	strd	r3, r3, [r0]
   3697a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3697e:	6083      	str	r3, [r0, #8]
   36980:	8181      	strh	r1, [r0, #12]
   36982:	6643      	str	r3, [r0, #100]	; 0x64
   36984:	81c2      	strh	r2, [r0, #14]
   36986:	6183      	str	r3, [r0, #24]
   36988:	4619      	mov	r1, r3
   3698a:	2208      	movs	r2, #8
   3698c:	305c      	adds	r0, #92	; 0x5c
   3698e:	f003 fdf3 	bl	3a578 <memset>
   36992:	4b05      	ldr	r3, [pc, #20]	; (369a8 <std+0x38>)
   36994:	6263      	str	r3, [r4, #36]	; 0x24
   36996:	4b05      	ldr	r3, [pc, #20]	; (369ac <std+0x3c>)
   36998:	62a3      	str	r3, [r4, #40]	; 0x28
   3699a:	4b05      	ldr	r3, [pc, #20]	; (369b0 <std+0x40>)
   3699c:	62e3      	str	r3, [r4, #44]	; 0x2c
   3699e:	4b05      	ldr	r3, [pc, #20]	; (369b4 <std+0x44>)
   369a0:	6224      	str	r4, [r4, #32]
   369a2:	6323      	str	r3, [r4, #48]	; 0x30
   369a4:	bd10      	pop	{r4, pc}
   369a6:	bf00      	nop
   369a8:	0003b009 	.word	0x0003b009
   369ac:	0003b02b 	.word	0x0003b02b
   369b0:	0003b063 	.word	0x0003b063
   369b4:	0003b087 	.word	0x0003b087

000369b8 <_cleanup_r>:
   369b8:	4901      	ldr	r1, [pc, #4]	; (369c0 <_cleanup_r+0x8>)
   369ba:	f003 bfef 	b.w	3a99c <_fwalk_reent>
   369be:	bf00      	nop
   369c0:	000368f9 	.word	0x000368f9

000369c4 <__sfp_lock_acquire>:
   369c4:	4801      	ldr	r0, [pc, #4]	; (369cc <__sfp_lock_acquire+0x8>)
   369c6:	f7ec ba8f 	b.w	22ee8 <__retarget_lock_acquire_recursive>
   369ca:	bf00      	nop
   369cc:	20000b84 	.word	0x20000b84

000369d0 <__sfp_lock_release>:
   369d0:	4801      	ldr	r0, [pc, #4]	; (369d8 <__sfp_lock_release+0x8>)
   369d2:	f7ec baa7 	b.w	22f24 <__retarget_lock_release_recursive>
   369d6:	bf00      	nop
   369d8:	20000b84 	.word	0x20000b84

000369dc <__sinit_lock_acquire>:
   369dc:	4801      	ldr	r0, [pc, #4]	; (369e4 <__sinit_lock_acquire+0x8>)
   369de:	f7ec ba83 	b.w	22ee8 <__retarget_lock_acquire_recursive>
   369e2:	bf00      	nop
   369e4:	20000b98 	.word	0x20000b98

000369e8 <__sinit_lock_release>:
   369e8:	4801      	ldr	r0, [pc, #4]	; (369f0 <__sinit_lock_release+0x8>)
   369ea:	f7ec ba9b 	b.w	22f24 <__retarget_lock_release_recursive>
   369ee:	bf00      	nop
   369f0:	20000b98 	.word	0x20000b98

000369f4 <__sinit>:
   369f4:	b510      	push	{r4, lr}
   369f6:	4604      	mov	r4, r0
   369f8:	f7ff fff0 	bl	369dc <__sinit_lock_acquire>
   369fc:	69a3      	ldr	r3, [r4, #24]
   369fe:	b11b      	cbz	r3, 36a08 <__sinit+0x14>
   36a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36a04:	f7ff bff0 	b.w	369e8 <__sinit_lock_release>
   36a08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   36a0c:	6523      	str	r3, [r4, #80]	; 0x50
   36a0e:	4b13      	ldr	r3, [pc, #76]	; (36a5c <__sinit+0x68>)
   36a10:	4a13      	ldr	r2, [pc, #76]	; (36a60 <__sinit+0x6c>)
   36a12:	681b      	ldr	r3, [r3, #0]
   36a14:	62a2      	str	r2, [r4, #40]	; 0x28
   36a16:	42a3      	cmp	r3, r4
   36a18:	bf04      	itt	eq
   36a1a:	2301      	moveq	r3, #1
   36a1c:	61a3      	streq	r3, [r4, #24]
   36a1e:	4620      	mov	r0, r4
   36a20:	f000 f820 	bl	36a64 <__sfp>
   36a24:	6060      	str	r0, [r4, #4]
   36a26:	4620      	mov	r0, r4
   36a28:	f000 f81c 	bl	36a64 <__sfp>
   36a2c:	60a0      	str	r0, [r4, #8]
   36a2e:	4620      	mov	r0, r4
   36a30:	f000 f818 	bl	36a64 <__sfp>
   36a34:	2200      	movs	r2, #0
   36a36:	60e0      	str	r0, [r4, #12]
   36a38:	2104      	movs	r1, #4
   36a3a:	6860      	ldr	r0, [r4, #4]
   36a3c:	f7ff ff98 	bl	36970 <std>
   36a40:	68a0      	ldr	r0, [r4, #8]
   36a42:	2201      	movs	r2, #1
   36a44:	2109      	movs	r1, #9
   36a46:	f7ff ff93 	bl	36970 <std>
   36a4a:	68e0      	ldr	r0, [r4, #12]
   36a4c:	2202      	movs	r2, #2
   36a4e:	2112      	movs	r1, #18
   36a50:	f7ff ff8e 	bl	36970 <std>
   36a54:	2301      	movs	r3, #1
   36a56:	61a3      	str	r3, [r4, #24]
   36a58:	e7d2      	b.n	36a00 <__sinit+0xc>
   36a5a:	bf00      	nop
   36a5c:	0003bfdc 	.word	0x0003bfdc
   36a60:	000369b9 	.word	0x000369b9

00036a64 <__sfp>:
   36a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36a66:	4607      	mov	r7, r0
   36a68:	f7ff ffac 	bl	369c4 <__sfp_lock_acquire>
   36a6c:	4b1e      	ldr	r3, [pc, #120]	; (36ae8 <__sfp+0x84>)
   36a6e:	681e      	ldr	r6, [r3, #0]
   36a70:	69b3      	ldr	r3, [r6, #24]
   36a72:	b913      	cbnz	r3, 36a7a <__sfp+0x16>
   36a74:	4630      	mov	r0, r6
   36a76:	f7ff ffbd 	bl	369f4 <__sinit>
   36a7a:	3648      	adds	r6, #72	; 0x48
   36a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   36a80:	3b01      	subs	r3, #1
   36a82:	d503      	bpl.n	36a8c <__sfp+0x28>
   36a84:	6833      	ldr	r3, [r6, #0]
   36a86:	b30b      	cbz	r3, 36acc <__sfp+0x68>
   36a88:	6836      	ldr	r6, [r6, #0]
   36a8a:	e7f7      	b.n	36a7c <__sfp+0x18>
   36a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   36a90:	b9d5      	cbnz	r5, 36ac8 <__sfp+0x64>
   36a92:	4b16      	ldr	r3, [pc, #88]	; (36aec <__sfp+0x88>)
   36a94:	60e3      	str	r3, [r4, #12]
   36a96:	f104 0058 	add.w	r0, r4, #88	; 0x58
   36a9a:	6665      	str	r5, [r4, #100]	; 0x64
   36a9c:	f7ec f9f2 	bl	22e84 <__retarget_lock_init_recursive>
   36aa0:	f7ff ff96 	bl	369d0 <__sfp_lock_release>
   36aa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   36aa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
   36aac:	6025      	str	r5, [r4, #0]
   36aae:	61a5      	str	r5, [r4, #24]
   36ab0:	2208      	movs	r2, #8
   36ab2:	4629      	mov	r1, r5
   36ab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   36ab8:	f003 fd5e 	bl	3a578 <memset>
   36abc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   36ac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   36ac4:	4620      	mov	r0, r4
   36ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36ac8:	3468      	adds	r4, #104	; 0x68
   36aca:	e7d9      	b.n	36a80 <__sfp+0x1c>
   36acc:	2104      	movs	r1, #4
   36ace:	4638      	mov	r0, r7
   36ad0:	f003 ff4e 	bl	3a970 <__sfmoreglue>
   36ad4:	4604      	mov	r4, r0
   36ad6:	6030      	str	r0, [r6, #0]
   36ad8:	2800      	cmp	r0, #0
   36ada:	d1d5      	bne.n	36a88 <__sfp+0x24>
   36adc:	f7ff ff78 	bl	369d0 <__sfp_lock_release>
   36ae0:	230c      	movs	r3, #12
   36ae2:	603b      	str	r3, [r7, #0]
   36ae4:	e7ee      	b.n	36ac4 <__sfp+0x60>
   36ae6:	bf00      	nop
   36ae8:	0003bfdc 	.word	0x0003bfdc
   36aec:	ffff0001 	.word	0xffff0001

00036af0 <_localeconv_r>:
   36af0:	4800      	ldr	r0, [pc, #0]	; (36af4 <_localeconv_r+0x4>)
   36af2:	4770      	bx	lr
   36af4:	200008cc 	.word	0x200008cc

00036af8 <__smakebuf_r>:
   36af8:	898b      	ldrh	r3, [r1, #12]
   36afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   36afc:	079d      	lsls	r5, r3, #30
   36afe:	4606      	mov	r6, r0
   36b00:	460c      	mov	r4, r1
   36b02:	d507      	bpl.n	36b14 <__smakebuf_r+0x1c>
   36b04:	f104 0347 	add.w	r3, r4, #71	; 0x47
   36b08:	6023      	str	r3, [r4, #0]
   36b0a:	6123      	str	r3, [r4, #16]
   36b0c:	2301      	movs	r3, #1
   36b0e:	6163      	str	r3, [r4, #20]
   36b10:	b002      	add	sp, #8
   36b12:	bd70      	pop	{r4, r5, r6, pc}
   36b14:	ab01      	add	r3, sp, #4
   36b16:	466a      	mov	r2, sp
   36b18:	f003 ff5f 	bl	3a9da <__swhatbuf_r>
   36b1c:	9900      	ldr	r1, [sp, #0]
   36b1e:	4605      	mov	r5, r0
   36b20:	4630      	mov	r0, r6
   36b22:	f7ff f833 	bl	35b8c <_malloc_r>
   36b26:	b948      	cbnz	r0, 36b3c <__smakebuf_r+0x44>
   36b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   36b2c:	059a      	lsls	r2, r3, #22
   36b2e:	d4ef      	bmi.n	36b10 <__smakebuf_r+0x18>
   36b30:	f023 0303 	bic.w	r3, r3, #3
   36b34:	f043 0302 	orr.w	r3, r3, #2
   36b38:	81a3      	strh	r3, [r4, #12]
   36b3a:	e7e3      	b.n	36b04 <__smakebuf_r+0xc>
   36b3c:	4b0d      	ldr	r3, [pc, #52]	; (36b74 <__smakebuf_r+0x7c>)
   36b3e:	62b3      	str	r3, [r6, #40]	; 0x28
   36b40:	89a3      	ldrh	r3, [r4, #12]
   36b42:	6020      	str	r0, [r4, #0]
   36b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   36b48:	81a3      	strh	r3, [r4, #12]
   36b4a:	9b00      	ldr	r3, [sp, #0]
   36b4c:	6163      	str	r3, [r4, #20]
   36b4e:	9b01      	ldr	r3, [sp, #4]
   36b50:	6120      	str	r0, [r4, #16]
   36b52:	b15b      	cbz	r3, 36b6c <__smakebuf_r+0x74>
   36b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   36b58:	4630      	mov	r0, r6
   36b5a:	f000 f8b5 	bl	36cc8 <_isatty_r>
   36b5e:	b128      	cbz	r0, 36b6c <__smakebuf_r+0x74>
   36b60:	89a3      	ldrh	r3, [r4, #12]
   36b62:	f023 0303 	bic.w	r3, r3, #3
   36b66:	f043 0301 	orr.w	r3, r3, #1
   36b6a:	81a3      	strh	r3, [r4, #12]
   36b6c:	89a0      	ldrh	r0, [r4, #12]
   36b6e:	4305      	orrs	r5, r0
   36b70:	81a5      	strh	r5, [r4, #12]
   36b72:	e7cd      	b.n	36b10 <__smakebuf_r+0x18>
   36b74:	000369b9 	.word	0x000369b9

00036b78 <__malloc_lock>:
   36b78:	4801      	ldr	r0, [pc, #4]	; (36b80 <__malloc_lock+0x8>)
   36b7a:	f7ec b9b5 	b.w	22ee8 <__retarget_lock_acquire_recursive>
   36b7e:	bf00      	nop
   36b80:	20000b70 	.word	0x20000b70

00036b84 <__malloc_unlock>:
   36b84:	4801      	ldr	r0, [pc, #4]	; (36b8c <__malloc_unlock+0x8>)
   36b86:	f7ec b9cd 	b.w	22f24 <__retarget_lock_release_recursive>
   36b8a:	bf00      	nop
   36b8c:	20000b70 	.word	0x20000b70

00036b90 <__pow5mult>:
   36b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   36b94:	4615      	mov	r5, r2
   36b96:	f012 0203 	ands.w	r2, r2, #3
   36b9a:	4606      	mov	r6, r0
   36b9c:	460f      	mov	r7, r1
   36b9e:	d007      	beq.n	36bb0 <__pow5mult+0x20>
   36ba0:	4c21      	ldr	r4, [pc, #132]	; (36c28 <__pow5mult+0x98>)
   36ba2:	3a01      	subs	r2, #1
   36ba4:	2300      	movs	r3, #0
   36ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   36baa:	f003 ff85 	bl	3aab8 <__multadd>
   36bae:	4607      	mov	r7, r0
   36bb0:	10ad      	asrs	r5, r5, #2
   36bb2:	d035      	beq.n	36c20 <__pow5mult+0x90>
   36bb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   36bb6:	b93c      	cbnz	r4, 36bc8 <__pow5mult+0x38>
   36bb8:	2010      	movs	r0, #16
   36bba:	f7fe ff91 	bl	35ae0 <malloc>
   36bbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
   36bc2:	6270      	str	r0, [r6, #36]	; 0x24
   36bc4:	6004      	str	r4, [r0, #0]
   36bc6:	60c4      	str	r4, [r0, #12]
   36bc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   36bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   36bd0:	b94c      	cbnz	r4, 36be6 <__pow5mult+0x56>
   36bd2:	f240 2171 	movw	r1, #625	; 0x271
   36bd6:	4630      	mov	r0, r6
   36bd8:	f003 fffa 	bl	3abd0 <__i2b>
   36bdc:	2300      	movs	r3, #0
   36bde:	f8c8 0008 	str.w	r0, [r8, #8]
   36be2:	4604      	mov	r4, r0
   36be4:	6003      	str	r3, [r0, #0]
   36be6:	f04f 0900 	mov.w	r9, #0
   36bea:	07eb      	lsls	r3, r5, #31
   36bec:	d50a      	bpl.n	36c04 <__pow5mult+0x74>
   36bee:	4639      	mov	r1, r7
   36bf0:	4622      	mov	r2, r4
   36bf2:	4630      	mov	r0, r6
   36bf4:	f003 fff5 	bl	3abe2 <__multiply>
   36bf8:	4639      	mov	r1, r7
   36bfa:	4680      	mov	r8, r0
   36bfc:	4630      	mov	r0, r6
   36bfe:	f003 ff44 	bl	3aa8a <_Bfree>
   36c02:	4647      	mov	r7, r8
   36c04:	106d      	asrs	r5, r5, #1
   36c06:	d00b      	beq.n	36c20 <__pow5mult+0x90>
   36c08:	6820      	ldr	r0, [r4, #0]
   36c0a:	b938      	cbnz	r0, 36c1c <__pow5mult+0x8c>
   36c0c:	4622      	mov	r2, r4
   36c0e:	4621      	mov	r1, r4
   36c10:	4630      	mov	r0, r6
   36c12:	f003 ffe6 	bl	3abe2 <__multiply>
   36c16:	6020      	str	r0, [r4, #0]
   36c18:	f8c0 9000 	str.w	r9, [r0]
   36c1c:	4604      	mov	r4, r0
   36c1e:	e7e4      	b.n	36bea <__pow5mult+0x5a>
   36c20:	4638      	mov	r0, r7
   36c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   36c26:	bf00      	nop
   36c28:	0003c040 	.word	0x0003c040

00036c2c <raise>:
   36c2c:	4b02      	ldr	r3, [pc, #8]	; (36c38 <raise+0xc>)
   36c2e:	4601      	mov	r1, r0
   36c30:	6818      	ldr	r0, [r3, #0]
   36c32:	f004 b9bf 	b.w	3afb4 <_raise_r>
   36c36:	bf00      	nop
   36c38:	20000778 	.word	0x20000778

00036c3c <_kill_r>:
   36c3c:	b538      	push	{r3, r4, r5, lr}
   36c3e:	4d07      	ldr	r5, [pc, #28]	; (36c5c <_kill_r+0x20>)
   36c40:	2300      	movs	r3, #0
   36c42:	4604      	mov	r4, r0
   36c44:	4608      	mov	r0, r1
   36c46:	4611      	mov	r1, r2
   36c48:	602b      	str	r3, [r5, #0]
   36c4a:	f001 fa0b 	bl	38064 <_kill>
   36c4e:	1c43      	adds	r3, r0, #1
   36c50:	d102      	bne.n	36c58 <_kill_r+0x1c>
   36c52:	682b      	ldr	r3, [r5, #0]
   36c54:	b103      	cbz	r3, 36c58 <_kill_r+0x1c>
   36c56:	6023      	str	r3, [r4, #0]
   36c58:	bd38      	pop	{r3, r4, r5, pc}
   36c5a:	bf00      	nop
   36c5c:	20004a4c 	.word	0x20004a4c

00036c60 <_write_r>:
   36c60:	b538      	push	{r3, r4, r5, lr}
   36c62:	4d07      	ldr	r5, [pc, #28]	; (36c80 <_write_r+0x20>)
   36c64:	4604      	mov	r4, r0
   36c66:	4608      	mov	r0, r1
   36c68:	4611      	mov	r1, r2
   36c6a:	2200      	movs	r2, #0
   36c6c:	602a      	str	r2, [r5, #0]
   36c6e:	461a      	mov	r2, r3
   36c70:	f001 f9ea 	bl	38048 <_write>
   36c74:	1c43      	adds	r3, r0, #1
   36c76:	d102      	bne.n	36c7e <_write_r+0x1e>
   36c78:	682b      	ldr	r3, [r5, #0]
   36c7a:	b103      	cbz	r3, 36c7e <_write_r+0x1e>
   36c7c:	6023      	str	r3, [r4, #0]
   36c7e:	bd38      	pop	{r3, r4, r5, pc}
   36c80:	20004a4c 	.word	0x20004a4c

00036c84 <_close_r>:
   36c84:	b538      	push	{r3, r4, r5, lr}
   36c86:	4d06      	ldr	r5, [pc, #24]	; (36ca0 <_close_r+0x1c>)
   36c88:	2300      	movs	r3, #0
   36c8a:	4604      	mov	r4, r0
   36c8c:	4608      	mov	r0, r1
   36c8e:	602b      	str	r3, [r5, #0]
   36c90:	f001 f9de 	bl	38050 <_close>
   36c94:	1c43      	adds	r3, r0, #1
   36c96:	d102      	bne.n	36c9e <_close_r+0x1a>
   36c98:	682b      	ldr	r3, [r5, #0]
   36c9a:	b103      	cbz	r3, 36c9e <_close_r+0x1a>
   36c9c:	6023      	str	r3, [r4, #0]
   36c9e:	bd38      	pop	{r3, r4, r5, pc}
   36ca0:	20004a4c 	.word	0x20004a4c

00036ca4 <_fstat_r>:
   36ca4:	b538      	push	{r3, r4, r5, lr}
   36ca6:	4d07      	ldr	r5, [pc, #28]	; (36cc4 <_fstat_r+0x20>)
   36ca8:	2300      	movs	r3, #0
   36caa:	4604      	mov	r4, r0
   36cac:	4608      	mov	r0, r1
   36cae:	4611      	mov	r1, r2
   36cb0:	602b      	str	r3, [r5, #0]
   36cb2:	f001 f9db 	bl	3806c <_fstat>
   36cb6:	1c43      	adds	r3, r0, #1
   36cb8:	d102      	bne.n	36cc0 <_fstat_r+0x1c>
   36cba:	682b      	ldr	r3, [r5, #0]
   36cbc:	b103      	cbz	r3, 36cc0 <_fstat_r+0x1c>
   36cbe:	6023      	str	r3, [r4, #0]
   36cc0:	bd38      	pop	{r3, r4, r5, pc}
   36cc2:	bf00      	nop
   36cc4:	20004a4c 	.word	0x20004a4c

00036cc8 <_isatty_r>:
   36cc8:	b538      	push	{r3, r4, r5, lr}
   36cca:	4d06      	ldr	r5, [pc, #24]	; (36ce4 <_isatty_r+0x1c>)
   36ccc:	2300      	movs	r3, #0
   36cce:	4604      	mov	r4, r0
   36cd0:	4608      	mov	r0, r1
   36cd2:	602b      	str	r3, [r5, #0]
   36cd4:	f001 f9c1 	bl	3805a <_isatty>
   36cd8:	1c43      	adds	r3, r0, #1
   36cda:	d102      	bne.n	36ce2 <_isatty_r+0x1a>
   36cdc:	682b      	ldr	r3, [r5, #0]
   36cde:	b103      	cbz	r3, 36ce2 <_isatty_r+0x1a>
   36ce0:	6023      	str	r3, [r4, #0]
   36ce2:	bd38      	pop	{r3, r4, r5, pc}
   36ce4:	20004a4c 	.word	0x20004a4c

00036ce8 <_lseek_r>:
   36ce8:	b538      	push	{r3, r4, r5, lr}
   36cea:	4d07      	ldr	r5, [pc, #28]	; (36d08 <_lseek_r+0x20>)
   36cec:	4604      	mov	r4, r0
   36cee:	4608      	mov	r0, r1
   36cf0:	4611      	mov	r1, r2
   36cf2:	2200      	movs	r2, #0
   36cf4:	602a      	str	r2, [r5, #0]
   36cf6:	461a      	mov	r2, r3
   36cf8:	f001 f9ad 	bl	38056 <_lseek>
   36cfc:	1c43      	adds	r3, r0, #1
   36cfe:	d102      	bne.n	36d06 <_lseek_r+0x1e>
   36d00:	682b      	ldr	r3, [r5, #0]
   36d02:	b103      	cbz	r3, 36d06 <_lseek_r+0x1e>
   36d04:	6023      	str	r3, [r4, #0]
   36d06:	bd38      	pop	{r3, r4, r5, pc}
   36d08:	20004a4c 	.word	0x20004a4c

00036d0c <_read_r>:
   36d0c:	b538      	push	{r3, r4, r5, lr}
   36d0e:	4d07      	ldr	r5, [pc, #28]	; (36d2c <_read_r+0x20>)
   36d10:	4604      	mov	r4, r0
   36d12:	4608      	mov	r0, r1
   36d14:	4611      	mov	r1, r2
   36d16:	2200      	movs	r2, #0
   36d18:	602a      	str	r2, [r5, #0]
   36d1a:	461a      	mov	r2, r3
   36d1c:	f001 f990 	bl	38040 <_read>
   36d20:	1c43      	adds	r3, r0, #1
   36d22:	d102      	bne.n	36d2a <_read_r+0x1e>
   36d24:	682b      	ldr	r3, [r5, #0]
   36d26:	b103      	cbz	r3, 36d2a <_read_r+0x1e>
   36d28:	6023      	str	r3, [r4, #0]
   36d2a:	bd38      	pop	{r3, r4, r5, pc}
   36d2c:	20004a4c 	.word	0x20004a4c

00036d30 <sys_put_le32>:
	dst[1] = val >> 8;
   36d30:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   36d34:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   36d36:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   36d38:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   36d3a:	0a00      	lsrs	r0, r0, #8
   36d3c:	704b      	strb	r3, [r1, #1]
   36d3e:	70c8      	strb	r0, [r1, #3]
}
   36d40:	4770      	bx	lr

00036d42 <sys_get_le32>:
	return ((uint16_t)src[1] << 8) | src[0];
   36d42:	78c3      	ldrb	r3, [r0, #3]
   36d44:	7882      	ldrb	r2, [r0, #2]
   36d46:	7841      	ldrb	r1, [r0, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   36d48:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   36d4c:	7803      	ldrb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   36d4e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   36d52:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   36d56:	4770      	bx	lr

00036d58 <dfu_target_cb_dummy>:
void dfu_target_cb_dummy(enum dfu_target_evt_id evt_id) {;}
   36d58:	4770      	bx	lr

00036d5a <req_cb_flash_info>:
{
   36d5a:	b530      	push	{r4, r5, lr}
   36d5c:	b085      	sub	sp, #20
    rc = app_flash_si_slotinfo(p_rsp);
   36d5e:	a801      	add	r0, sp, #4
{
   36d60:	4615      	mov	r5, r2
    rc = app_flash_si_slotinfo(p_rsp);
   36d62:	f000 f822 	bl	36daa <app_flash_si_slotinfo>
    if (rc == 0) {
   36d66:	4604      	mov	r4, r0
   36d68:	b928      	cbnz	r0, 36d76 <req_cb_flash_info+0x1c>
        respond(p_rsp, rsp_len);
   36d6a:	210c      	movs	r1, #12
   36d6c:	a801      	add	r0, sp, #4
        respond(NULL, 0);
   36d6e:	47a8      	blx	r5
}
   36d70:	4620      	mov	r0, r4
   36d72:	b005      	add	sp, #20
   36d74:	bd30      	pop	{r4, r5, pc}
        respond(NULL, 0);
   36d76:	2100      	movs	r1, #0
   36d78:	4608      	mov	r0, r1
   36d7a:	e7f8      	b.n	36d6e <req_cb_flash_info+0x14>

00036d7c <cmd_request_flash_write>:
{
   36d7c:	460a      	mov	r2, r1
    return app_cmd_request(CMD_OP_FLASH_WRITE_91, p_data, length);
   36d7e:	4601      	mov	r1, r0
   36d80:	2033      	movs	r0, #51	; 0x33
   36d82:	f7e7 bf71 	b.w	1ec68 <app_cmd_request>

00036d86 <cmd_request_flash_erase>:
{
   36d86:	b507      	push	{r0, r1, r2, lr}
   36d88:	460a      	mov	r2, r1
    sys_put_le32(address, &p_data[0]);
   36d8a:	4669      	mov	r1, sp
   36d8c:	f7ff ffd0 	bl	36d30 <sys_put_le32>
    sys_put_le32(count, &p_data[4]);
   36d90:	a901      	add	r1, sp, #4
   36d92:	4610      	mov	r0, r2
   36d94:	f7ff ffcc 	bl	36d30 <sys_put_le32>
    return app_cmd_request(CMD_OP_FLASH_ERASE_91, p_data, sizeof(p_data));
   36d98:	2208      	movs	r2, #8
   36d9a:	4669      	mov	r1, sp
   36d9c:	2034      	movs	r0, #52	; 0x34
   36d9e:	f7e7 ff63 	bl	1ec68 <app_cmd_request>
}
   36da2:	b003      	add	sp, #12
   36da4:	f85d fb04 	ldr.w	pc, [sp], #4

00036da8 <event_cb_dummy>:
static void event_cb_dummy(cmd_event_t* p_event) {;}
   36da8:	4770      	bx	lr

00036daa <app_flash_si_slotinfo>:
{
   36daa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   36dae:	4604      	mov	r4, r0
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   36db0:	a901      	add	r1, sp, #4
   36db2:	2005      	movs	r0, #5
   36db4:	f7ea fa92 	bl	212dc <flash_area_open>
	if (rc) {
   36db8:	4606      	mov	r6, r0
   36dba:	bbb0      	cbnz	r0, 36e2a <app_flash_si_slotinfo+0x80>
	bank_addr = fa->fa_off;
   36dbc:	9801      	ldr	r0, [sp, #4]
	page_count = fa->fa_size / 0x1000;
   36dbe:	e9d0 5701 	ldrd	r5, r7, [r0, #4]
	flash_area_close(fa);
   36dc2:	f000 fd5d 	bl	37880 <flash_area_close>
	while (p_read < fa->fa_size) {
   36dc6:	9b01      	ldr	r3, [sp, #4]
	page_count = fa->fa_size / 0x1000;
   36dc8:	ea4f 3817 	mov.w	r8, r7, lsr #12
	while (p_read < fa->fa_size) {
   36dcc:	6898      	ldr	r0, [r3, #8]
	found = false;
   36dce:	4631      	mov	r1, r6
	p_read = bank_addr;
   36dd0:	462b      	mov	r3, r5
	while (p_read < fa->fa_size) {
   36dd2:	4298      	cmp	r0, r3
   36dd4:	d90a      	bls.n	36dec <app_flash_si_slotinfo+0x42>
		for (uint32_t i = 0; i < 4096; i++) {
   36dd6:	2200      	movs	r2, #0
			if (((uint8_t*)p_read)[i] != 0xFF) {
   36dd8:	f813 c002 	ldrb.w	ip, [r3, r2]
   36ddc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   36de0:	d127      	bne.n	36e32 <app_flash_si_slotinfo+0x88>
		for (uint32_t i = 0; i < 4096; i++) {
   36de2:	3201      	adds	r2, #1
   36de4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   36de8:	d1f6      	bne.n	36dd8 <app_flash_si_slotinfo+0x2e>
		if (!found) {
   36dea:	bb11      	cbnz	r1, 36e32 <app_flash_si_slotinfo+0x88>
	first_blank = MAX(bank_addr, (p_read - 4096));
   36dec:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   36df0:	42ab      	cmp	r3, r5
	dst[1] = val >> 8;
   36df2:	f3c5 2207 	ubfx	r2, r5, #8, #8
   36df6:	bf38      	it	cc
   36df8:	462b      	movcc	r3, r5
   36dfa:	7062      	strb	r2, [r4, #1]
   36dfc:	2200      	movs	r2, #0
	dst[0] = val;
   36dfe:	7025      	strb	r5, [r4, #0]
	dst[1] = val >> 8;
   36e00:	71e2      	strb	r2, [r4, #7]
	sys_put_le16(val >> 16, &dst[2]);
   36e02:	0c2d      	lsrs	r5, r5, #16
	dst[1] = val >> 8;
   36e04:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   36e08:	7223      	strb	r3, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   36e0a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   36e0c:	70a5      	strb	r5, [r4, #2]
   36e0e:	f884 8004 	strb.w	r8, [r4, #4]
	dst[1] = val >> 8;
   36e12:	0a2d      	lsrs	r5, r5, #8
   36e14:	f3c8 2807 	ubfx	r8, r8, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   36e18:	0f3f      	lsrs	r7, r7, #28
	dst[0] = val;
   36e1a:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
   36e1c:	0a1b      	lsrs	r3, r3, #8
   36e1e:	70e5      	strb	r5, [r4, #3]
   36e20:	f884 8005 	strb.w	r8, [r4, #5]
	dst[0] = val;
   36e24:	71a7      	strb	r7, [r4, #6]
	dst[1] = val >> 8;
   36e26:	7262      	strb	r2, [r4, #9]
   36e28:	72e3      	strb	r3, [r4, #11]
}
   36e2a:	4630      	mov	r0, r6
   36e2c:	b002      	add	sp, #8
   36e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_read += 4096;
   36e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   36e36:	2101      	movs	r1, #1
   36e38:	e7cb      	b.n	36dd2 <app_flash_si_slotinfo+0x28>

00036e3a <app_flash_read>:
{
   36e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36e3c:	4605      	mov	r5, r0
   36e3e:	460e      	mov	r6, r1
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   36e40:	2005      	movs	r0, #5
   36e42:	a901      	add	r1, sp, #4
{
   36e44:	4617      	mov	r7, r2
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   36e46:	f7ea fa49 	bl	212dc <flash_area_open>
	if (rc) {
   36e4a:	4604      	mov	r4, r0
   36e4c:	b950      	cbnz	r0, 36e64 <app_flash_read+0x2a>
	rc = flash_area_read(fa, offset, p_data, length);
   36e4e:	9801      	ldr	r0, [sp, #4]
   36e50:	463b      	mov	r3, r7
   36e52:	4632      	mov	r2, r6
   36e54:	4629      	mov	r1, r5
   36e56:	f000 fd14 	bl	37882 <flash_area_read>
	if (rc) {
   36e5a:	4604      	mov	r4, r0
   36e5c:	b910      	cbnz	r0, 36e64 <app_flash_read+0x2a>
	flash_area_close(fa);
   36e5e:	9801      	ldr	r0, [sp, #4]
   36e60:	f000 fd0e 	bl	37880 <flash_area_close>
}
   36e64:	4620      	mov	r0, r4
   36e66:	b003      	add	sp, #12
   36e68:	bdf0      	pop	{r4, r5, r6, r7, pc}

00036e6a <app_flash_read_id>:
{
   36e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36e6c:	4605      	mov	r5, r0
   36e6e:	460e      	mov	r6, r1
	rc = flash_area_open(FLASH_ID, &fa);
   36e70:	4618      	mov	r0, r3
   36e72:	a901      	add	r1, sp, #4
{
   36e74:	4617      	mov	r7, r2
	rc = flash_area_open(FLASH_ID, &fa);
   36e76:	f7ea fa31 	bl	212dc <flash_area_open>
	if (rc) {
   36e7a:	4604      	mov	r4, r0
   36e7c:	b950      	cbnz	r0, 36e94 <app_flash_read_id+0x2a>
	rc = flash_area_read(fa, offset, p_data, length);
   36e7e:	9801      	ldr	r0, [sp, #4]
   36e80:	463b      	mov	r3, r7
   36e82:	4632      	mov	r2, r6
   36e84:	4629      	mov	r1, r5
   36e86:	f000 fcfc 	bl	37882 <flash_area_read>
	if (rc) {
   36e8a:	4604      	mov	r4, r0
   36e8c:	b910      	cbnz	r0, 36e94 <app_flash_read_id+0x2a>
	flash_area_close(fa);
   36e8e:	9801      	ldr	r0, [sp, #4]
   36e90:	f000 fcf6 	bl	37880 <flash_area_close>
}
   36e94:	4620      	mov	r0, r4
   36e96:	b003      	add	sp, #12
   36e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

00036e9a <app_flash_get_DevInf>:
	if(bufferlength < 6){ //6 -> major minor version = 2 Byte + 4 byte for Available Space
   36e9a:	2905      	cmp	r1, #5
int app_flash_get_DevInf(uint8_t* buffer,uint16_t bufferlength){
   36e9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   36e9e:	4605      	mov	r5, r0
	if(bufferlength < 6){ //6 -> major minor version = 2 Byte + 4 byte for Available Space
   36ea0:	d921      	bls.n	36ee6 <app_flash_get_DevInf+0x4c>
	rc = app_flash_read_id(20,Data_bata,2,FLASH_AREA_ID(image_0));//4+4+2+2+4+4 20 21
   36ea2:	2302      	movs	r3, #2
   36ea4:	461a      	mov	r2, r3
   36ea6:	a901      	add	r1, sp, #4
   36ea8:	2014      	movs	r0, #20
   36eaa:	f7ff ffde 	bl	36e6a <app_flash_read_id>
	*minor_fw=Data_bata[0];
   36eae:	f89d 3004 	ldrb.w	r3, [sp, #4]
   36eb2:	702b      	strb	r3, [r5, #0]
	*major_fw=Data_bata[1];
   36eb4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   36eb8:	706b      	strb	r3, [r5, #1]
	rc = app_flash_read_id(20,Data_bata,2,FLASH_AREA_ID(image_0));//4+4+2+2+4+4 20 21
   36eba:	4606      	mov	r6, r0
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   36ebc:	a901      	add	r1, sp, #4
   36ebe:	2005      	movs	r0, #5
   36ec0:	f7ea fa0c 	bl	212dc <flash_area_open>
	if (rc) {
   36ec4:	4604      	mov	r4, r0
   36ec6:	b918      	cbnz	r0, 36ed0 <app_flash_get_DevInf+0x36>
	size = fa->fa_size;
   36ec8:	9801      	ldr	r0, [sp, #4]
   36eca:	6884      	ldr	r4, [r0, #8]
	flash_area_close(fa);
   36ecc:	f000 fcd8 	bl	37880 <flash_area_close>
   36ed0:	f3c4 2307 	ubfx	r3, r4, #8, #8
	dst[0] = val;
   36ed4:	70ac      	strb	r4, [r5, #2]
	sys_put_le16(val >> 16, &dst[2]);
   36ed6:	0c24      	lsrs	r4, r4, #16
	dst[0] = val;
   36ed8:	712c      	strb	r4, [r5, #4]
	dst[1] = val >> 8;
   36eda:	0a24      	lsrs	r4, r4, #8
   36edc:	70eb      	strb	r3, [r5, #3]
   36ede:	716c      	strb	r4, [r5, #5]
}
   36ee0:	4630      	mov	r0, r6
   36ee2:	b002      	add	sp, #8
   36ee4:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   36ee6:	f04f 36ff 	mov.w	r6, #4294967295
   36eea:	e7f9      	b.n	36ee0 <app_flash_get_DevInf+0x46>

00036eec <app_flash_erase_page>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_erase_page(uint32_t offset, uint32_t count)
{
   36eec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   36eee:	4606      	mov	r6, r0
   36ef0:	460d      	mov	r5, r1
	int rc;
	const struct flash_area* fa;
	uint32_t byte_len;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   36ef2:	2005      	movs	r0, #5
   36ef4:	a901      	add	r1, sp, #4
   36ef6:	f7ea f9f1 	bl	212dc <flash_area_open>
	if (rc) {
   36efa:	4604      	mov	r4, r0
   36efc:	b960      	cbnz	r0, 36f18 <app_flash_erase_page+0x2c>
		return rc;
	}

	byte_len = MIN(count * 0x1000, fa->fa_size);
   36efe:	9801      	ldr	r0, [sp, #4]
   36f00:	6882      	ldr	r2, [r0, #8]
   36f02:	032d      	lsls	r5, r5, #12

	rc = flash_area_erase(fa, offset, byte_len);
   36f04:	42aa      	cmp	r2, r5
   36f06:	bf28      	it	cs
   36f08:	462a      	movcs	r2, r5
   36f0a:	4631      	mov	r1, r6
   36f0c:	f000 fd08 	bl	37920 <flash_area_erase>
   36f10:	4604      	mov	r4, r0

	flash_area_close(fa);
   36f12:	9801      	ldr	r0, [sp, #4]
   36f14:	f000 fcb4 	bl	37880 <flash_area_close>

	return rc;
}
   36f18:	4620      	mov	r0, r4
   36f1a:	b002      	add	sp, #8
   36f1c:	bd70      	pop	{r4, r5, r6, pc}

00036f1e <app_flash_crc>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_crc(uint32_t offset, uint32_t length, uint32_t* crc32)
{
   36f1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   36f22:	460c      	mov	r4, r1
	uint8_t *bank_addr;
	uint32_t step = 1024;
	uint32_t crc_val = 0;
	uint32_t i;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   36f24:	2005      	movs	r0, #5
   36f26:	a901      	add	r1, sp, #4
{
   36f28:	4617      	mov	r7, r2
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   36f2a:	f7ea f9d7 	bl	212dc <flash_area_open>
	if (rc) {
   36f2e:	4606      	mov	r6, r0
   36f30:	b960      	cbnz	r0, 36f4c <app_flash_crc+0x2e>
		return rc;
	}

	bank_addr = (uint8_t *)(fa->fa_off);
   36f32:	9b01      	ldr	r3, [sp, #4]

	if (length <= step) {
   36f34:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
	bank_addr = (uint8_t *)(fa->fa_off);
   36f38:	6858      	ldr	r0, [r3, #4]
	if (length <= step) {
   36f3a:	d80b      	bhi.n	36f54 <app_flash_crc+0x36>
		crc_val = crc32_ieee(bank_addr, length);
   36f3c:	4621      	mov	r1, r4
   36f3e:	f000 f837 	bl	36fb0 <crc32_ieee>

		for (i = 0; i < length / step; i++) {
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, step);
		}
		if (length % step != 0) {
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, length % step);
   36f42:	4603      	mov	r3, r0
		}
	}
	*crc32 = crc_val;

	flash_area_close(fa);
   36f44:	9801      	ldr	r0, [sp, #4]
	*crc32 = crc_val;
   36f46:	603b      	str	r3, [r7, #0]
	flash_area_close(fa);
   36f48:	f000 fc9a 	bl	37880 <flash_area_close>

	return rc;
}
   36f4c:	4630      	mov	r0, r6
   36f4e:	b002      	add	sp, #8
   36f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36f54:	f424 717f 	bic.w	r1, r4, #1020	; 0x3fc
   36f58:	f021 0103 	bic.w	r1, r1, #3
   36f5c:	4605      	mov	r5, r0
   36f5e:	eb00 0801 	add.w	r8, r0, r1
		crc_val = 0;
   36f62:	4633      	mov	r3, r6
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, step);
   36f64:	4629      	mov	r1, r5
   36f66:	4618      	mov	r0, r3
   36f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
   36f6c:	f7e8 f998 	bl	1f2a0 <crc32_ieee_update>
   36f70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
		for (i = 0; i < length / step; i++) {
   36f74:	45a8      	cmp	r8, r5
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, step);
   36f76:	4603      	mov	r3, r0
		for (i = 0; i < length / step; i++) {
   36f78:	d1f4      	bne.n	36f64 <app_flash_crc+0x46>
		if (length % step != 0) {
   36f7a:	f3c4 0209 	ubfx	r2, r4, #0, #10
   36f7e:	2a00      	cmp	r2, #0
   36f80:	d0e0      	beq.n	36f44 <app_flash_crc+0x26>
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, length % step);
   36f82:	4641      	mov	r1, r8
   36f84:	f7e8 f98c 	bl	1f2a0 <crc32_ieee_update>
   36f88:	e7db      	b.n	36f42 <app_flash_crc+0x24>

00036f8a <le_param_req>:
}
   36f8a:	2001      	movs	r0, #1
   36f8c:	4770      	bx	lr

00036f8e <error>:
{
   36f8e:	b508      	push	{r3, lr}
	dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   36f90:	2100      	movs	r1, #0
   36f92:	200f      	movs	r0, #15
   36f94:	f002 ff0d 	bl	39db2 <dk_set_leds_state>
	return z_impl_k_sleep(timeout);
   36f98:	2100      	movs	r1, #0
   36f9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   36f9e:	f7fa fe87 	bl	31cb0 <z_impl_k_sleep>
	while (true) {
   36fa2:	e7f9      	b.n	36f98 <error+0xa>

00036fa4 <button_handel>:
void button_handel(uint32_t button_state,uint32_t has_changed){
   36fa4:	b508      	push	{r3, lr}
	if(DK_BTN2_MSK & button_state){
   36fa6:	0783      	lsls	r3, r0, #30
   36fa8:	d501      	bpl.n	36fae <button_handel+0xa>
		do_mcuboot_dfu();
   36faa:	f7e8 f8e9 	bl	1f180 <do_mcuboot_dfu>
}
   36fae:	bd08      	pop	{r3, pc}

00036fb0 <crc32_ieee>:
{
   36fb0:	460a      	mov	r2, r1
	return crc32_ieee_update(0x0, data, len);
   36fb2:	4601      	mov	r1, r0
   36fb4:	2000      	movs	r0, #0
   36fb6:	f7e8 b973 	b.w	1f2a0 <crc32_ieee_update>

00036fba <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
   36fba:	440a      	add	r2, r1
   36fbc:	428a      	cmp	r2, r1
   36fbe:	d100      	bne.n	36fc2 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
   36fc0:	4770      	bx	lr
		seed ^= *src++;
   36fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
   36fc6:	ba40      	rev16	r0, r0
   36fc8:	b280      	uxth	r0, r0
   36fca:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
   36fcc:	f3c0 1303 	ubfx	r3, r0, #4, #4
   36fd0:	4058      	eors	r0, r3
		seed ^= seed << 12U;
   36fd2:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
   36fd6:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
   36fd8:	0158      	lsls	r0, r3, #5
   36fda:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
   36fde:	4058      	eors	r0, r3
	for (; len > 0; len--) {
   36fe0:	e7ec      	b.n	36fbc <crc16_itu_t+0x2>

00036fe2 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   36fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   36fe4:	f04f 0c0a 	mov.w	ip, #10
{
   36fe8:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   36fea:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   36fec:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   36fee:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   36ff0:	b111      	cbz	r1, 36ff8 <u8_to_dec+0x16>
   36ff2:	3e01      	subs	r6, #1
   36ff4:	d101      	bne.n	36ffa <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   36ff6:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   36ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   36ffa:	42a2      	cmp	r2, r4
		digit = value / divisor;
   36ffc:	fbb2 f7f4 	udiv	r7, r2, r4
   37000:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   37002:	d202      	bcs.n	3700a <u8_to_dec+0x28>
   37004:	2c01      	cmp	r4, #1
   37006:	d000      	beq.n	3700a <u8_to_dec+0x28>
   37008:	b130      	cbz	r0, 37018 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   3700a:	3330      	adds	r3, #48	; 0x30
   3700c:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   37010:	3901      	subs	r1, #1
			num_digits++;
   37012:	1c43      	adds	r3, r0, #1
			buflen--;
   37014:	b2c9      	uxtb	r1, r1
			num_digits++;
   37016:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   37018:	fb04 2217 	mls	r2, r4, r7, r2
   3701c:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   3701e:	fbb4 f4fc 	udiv	r4, r4, ip
   37022:	e7e5      	b.n	36ff0 <u8_to_dec+0xe>

00037024 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   37024:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   37028:	b2db      	uxtb	r3, r3
   3702a:	2b09      	cmp	r3, #9
   3702c:	d802      	bhi.n	37034 <char2hex+0x10>
		*x = c - '0';
   3702e:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   37030:	2000      	movs	r0, #0
   37032:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   37034:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   37038:	2b05      	cmp	r3, #5
   3703a:	d802      	bhi.n	37042 <char2hex+0x1e>
		*x = c - 'a' + 10;
   3703c:	3857      	subs	r0, #87	; 0x57
   3703e:	7008      	strb	r0, [r1, #0]
   37040:	e7f6      	b.n	37030 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   37042:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   37046:	2b05      	cmp	r3, #5
   37048:	d801      	bhi.n	3704e <char2hex+0x2a>
		*x = c - 'A' + 10;
   3704a:	3837      	subs	r0, #55	; 0x37
   3704c:	e7f7      	b.n	3703e <char2hex+0x1a>
		return -EINVAL;
   3704e:	f06f 0015 	mvn.w	r0, #21
}
   37052:	4770      	bx	lr

00037054 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   37054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37056:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   37058:	f001 0001 	and.w	r0, r1, #1
   3705c:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   37060:	429d      	cmp	r5, r3
   37062:	ea4f 0651 	mov.w	r6, r1, lsr #1
   37066:	d903      	bls.n	37070 <hex2bin+0x1c>
		return 0;
   37068:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   3706a:	4628      	mov	r0, r5
   3706c:	b003      	add	sp, #12
   3706e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   37070:	b158      	cbz	r0, 3708a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   37072:	7820      	ldrb	r0, [r4, #0]
   37074:	f10d 0107 	add.w	r1, sp, #7
   37078:	f7ff ffd4 	bl	37024 <char2hex>
   3707c:	2800      	cmp	r0, #0
   3707e:	dbf3      	blt.n	37068 <hex2bin+0x14>
		buf[0] = dec;
   37080:	f89d 3007 	ldrb.w	r3, [sp, #7]
   37084:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   37088:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   3708a:	3401      	adds	r4, #1
   3708c:	4416      	add	r6, r2
   3708e:	42b2      	cmp	r2, r6
   37090:	d0eb      	beq.n	3706a <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   37092:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   37096:	f10d 0107 	add.w	r1, sp, #7
   3709a:	f7ff ffc3 	bl	37024 <char2hex>
   3709e:	2800      	cmp	r0, #0
   370a0:	dbe2      	blt.n	37068 <hex2bin+0x14>
		buf[i] = dec << 4;
   370a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   370a6:	011b      	lsls	r3, r3, #4
   370a8:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   370aa:	f814 0b02 	ldrb.w	r0, [r4], #2
   370ae:	f10d 0107 	add.w	r1, sp, #7
   370b2:	f7ff ffb7 	bl	37024 <char2hex>
   370b6:	2800      	cmp	r0, #0
   370b8:	dbd6      	blt.n	37068 <hex2bin+0x14>
		buf[i] += dec;
   370ba:	7813      	ldrb	r3, [r2, #0]
   370bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   370c0:	440b      	add	r3, r1
   370c2:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   370c6:	e7e2      	b.n	3708e <hex2bin+0x3a>

000370c8 <sys_notify_validate>:
	if (notify == NULL) {
   370c8:	4603      	mov	r3, r0
   370ca:	b140      	cbz	r0, 370de <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   370cc:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   370ce:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   370d2:	2a02      	cmp	r2, #2
   370d4:	d006      	beq.n	370e4 <sys_notify_validate+0x1c>
   370d6:	2a03      	cmp	r2, #3
   370d8:	d004      	beq.n	370e4 <sys_notify_validate+0x1c>
   370da:	2a01      	cmp	r2, #1
   370dc:	d005      	beq.n	370ea <sys_notify_validate+0x22>
		return -EINVAL;
   370de:	f06f 0015 	mvn.w	r0, #21
}
   370e2:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   370e4:	681a      	ldr	r2, [r3, #0]
   370e6:	2a00      	cmp	r2, #0
   370e8:	d0f9      	beq.n	370de <sys_notify_validate+0x16>
		notify->result = 0;
   370ea:	2000      	movs	r0, #0
   370ec:	6098      	str	r0, [r3, #8]
   370ee:	4770      	bx	lr

000370f0 <arch_printk_char_out>:
}
   370f0:	2000      	movs	r0, #0
   370f2:	4770      	bx	lr

000370f4 <str_out>:
{
   370f4:	b530      	push	{r4, r5, lr}
   370f6:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   370f8:	680c      	ldr	r4, [r1, #0]
   370fa:	1c55      	adds	r5, r2, #1
   370fc:	b114      	cbz	r4, 37104 <str_out+0x10>
   370fe:	684b      	ldr	r3, [r1, #4]
   37100:	4293      	cmp	r3, r2
   37102:	dc01      	bgt.n	37108 <str_out+0x14>
		ctx->count++;
   37104:	608d      	str	r5, [r1, #8]
}
   37106:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   37108:	3b01      	subs	r3, #1
   3710a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   3710c:	bf08      	it	eq
   3710e:	2200      	moveq	r2, #0
   37110:	608d      	str	r5, [r1, #8]
   37112:	bf0c      	ite	eq
   37114:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   37116:	54a0      	strbne	r0, [r4, r2]
   37118:	e7f5      	b.n	37106 <str_out+0x12>

0003711a <printk>:
{
   3711a:	b40f      	push	{r0, r1, r2, r3}
   3711c:	b507      	push	{r0, r1, r2, lr}
   3711e:	a904      	add	r1, sp, #16
   37120:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   37124:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   37126:	f000 f9ad 	bl	37484 <z_log_printk>
}
   3712a:	b003      	add	sp, #12
   3712c:	f85d eb04 	ldr.w	lr, [sp], #4
   37130:	b004      	add	sp, #16
   37132:	4770      	bx	lr

00037134 <snprintk>:
{
   37134:	b40c      	push	{r2, r3}
   37136:	b507      	push	{r0, r1, r2, lr}
   37138:	ab04      	add	r3, sp, #16
   3713a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   3713e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   37140:	f7e8 f91a 	bl	1f378 <vsnprintk>
}
   37144:	b003      	add	sp, #12
   37146:	f85d eb04 	ldr.w	lr, [sp], #4
   3714a:	b002      	add	sp, #8
   3714c:	4770      	bx	lr

0003714e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   3714e:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   37150:	f013 0307 	ands.w	r3, r3, #7
   37154:	d105      	bne.n	37162 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   37156:	6803      	ldr	r3, [r0, #0]
   37158:	2b00      	cmp	r3, #0
		evt = EVT_START;
   3715a:	bf0c      	ite	eq
   3715c:	2000      	moveq	r0, #0
   3715e:	2003      	movne	r0, #3
   37160:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   37162:	2b02      	cmp	r3, #2
   37164:	d105      	bne.n	37172 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   37166:	8bc3      	ldrh	r3, [r0, #30]
   37168:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   3716a:	bf14      	ite	ne
   3716c:	2000      	movne	r0, #0
   3716e:	2004      	moveq	r0, #4
   37170:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   37172:	2b01      	cmp	r3, #1
   37174:	d105      	bne.n	37182 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   37176:	6803      	ldr	r3, [r0, #0]
   37178:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   3717a:	bf0c      	ite	eq
   3717c:	2000      	moveq	r0, #0
   3717e:	2005      	movne	r0, #5
   37180:	4770      	bx	lr
	int evt = EVT_NOP;
   37182:	2000      	movs	r0, #0
}
   37184:	4770      	bx	lr

00037186 <notify_one>:
{
   37186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3718a:	460d      	mov	r5, r1
   3718c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3718e:	4619      	mov	r1, r3
   37190:	1d28      	adds	r0, r5, #4
{
   37192:	4690      	mov	r8, r2
   37194:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   37196:	f7e8 f8b9 	bl	1f30c <sys_notify_finalize>
	if (cb) {
   3719a:	4604      	mov	r4, r0
   3719c:	b138      	cbz	r0, 371ae <notify_one+0x28>
		cb(mgr, cli, state, res);
   3719e:	4633      	mov	r3, r6
   371a0:	4642      	mov	r2, r8
   371a2:	4629      	mov	r1, r5
   371a4:	4638      	mov	r0, r7
   371a6:	46a4      	mov	ip, r4
}
   371a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   371ac:	4760      	bx	ip
}
   371ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000371b2 <validate_args>:
{
   371b2:	b510      	push	{r4, lr}
   371b4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   371b6:	b140      	cbz	r0, 371ca <validate_args+0x18>
   371b8:	b139      	cbz	r1, 371ca <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   371ba:	1d08      	adds	r0, r1, #4
   371bc:	f7ff ff84 	bl	370c8 <sys_notify_validate>
	if ((rv == 0)
   371c0:	b928      	cbnz	r0, 371ce <validate_args+0x1c>
	    && ((cli->notify.flags
   371c2:	68a3      	ldr	r3, [r4, #8]
   371c4:	f033 0303 	bics.w	r3, r3, #3
   371c8:	d001      	beq.n	371ce <validate_args+0x1c>
		rv = -EINVAL;
   371ca:	f06f 0015 	mvn.w	r0, #21
}
   371ce:	bd10      	pop	{r4, pc}

000371d0 <onoff_manager_init>:
{
   371d0:	b538      	push	{r3, r4, r5, lr}
   371d2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   371d4:	4605      	mov	r5, r0
   371d6:	b158      	cbz	r0, 371f0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   371d8:	b151      	cbz	r1, 371f0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   371da:	680b      	ldr	r3, [r1, #0]
   371dc:	b143      	cbz	r3, 371f0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   371de:	684b      	ldr	r3, [r1, #4]
   371e0:	b133      	cbz	r3, 371f0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   371e2:	2220      	movs	r2, #32
   371e4:	2100      	movs	r1, #0
   371e6:	f003 f9c7 	bl	3a578 <memset>
   371ea:	612c      	str	r4, [r5, #16]
	return 0;
   371ec:	2000      	movs	r0, #0
}
   371ee:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   371f0:	f06f 0015 	mvn.w	r0, #21
   371f4:	e7fb      	b.n	371ee <onoff_manager_init+0x1e>

000371f6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   371f6:	4604      	mov	r4, r0
   371f8:	b508      	push	{r3, lr}
   371fa:	4608      	mov	r0, r1
   371fc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   371fe:	461a      	mov	r2, r3
   37200:	47a0      	blx	r4
	return z_impl_z_current_get();
   37202:	f7fa fd8d 	bl	31d20 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   37206:	f7eb fc7b 	bl	22b00 <z_impl_k_thread_abort>

0003720a <chunk_size>:
		return ((uint16_t *)cmem)[f];
   3720a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   3720e:	8840      	ldrh	r0, [r0, #2]
}
   37210:	0840      	lsrs	r0, r0, #1
   37212:	4770      	bx	lr

00037214 <free_list_add>:
{
   37214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37216:	4603      	mov	r3, r0
   37218:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   3721a:	f7ff fff6 	bl	3720a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   3721e:	fab0 f080 	clz	r0, r0
   37222:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   37226:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   3722a:	00ca      	lsls	r2, r1, #3
   3722c:	f8dc 6010 	ldr.w	r6, [ip, #16]
   37230:	1d17      	adds	r7, r2, #4
   37232:	b28d      	uxth	r5, r1
   37234:	3206      	adds	r2, #6
   37236:	b956      	cbnz	r6, 3724e <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   37238:	2101      	movs	r1, #1
   3723a:	fa01 f000 	lsl.w	r0, r1, r0
   3723e:	68d9      	ldr	r1, [r3, #12]
   37240:	4301      	orrs	r1, r0
   37242:	60d9      	str	r1, [r3, #12]
		b->next = c;
   37244:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   37248:	53dd      	strh	r5, [r3, r7]
   3724a:	529d      	strh	r5, [r3, r2]
}
   3724c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   3724e:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   37250:	3104      	adds	r1, #4
   37252:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   37254:	53d8      	strh	r0, [r3, r7]
   37256:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   3725a:	529e      	strh	r6, [r3, r2]
   3725c:	80c5      	strh	r5, [r0, #6]
   3725e:	525d      	strh	r5, [r3, r1]
   37260:	e7f4      	b.n	3724c <free_list_add+0x38>

00037262 <free_list_remove_bidx>:
{
   37262:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   37264:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   37268:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   3726a:	4299      	cmp	r1, r3
   3726c:	f102 0104 	add.w	r1, r2, #4
   37270:	d10a      	bne.n	37288 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   37272:	2301      	movs	r3, #1
   37274:	fa03 f202 	lsl.w	r2, r3, r2
   37278:	68c3      	ldr	r3, [r0, #12]
   3727a:	ea23 0302 	bic.w	r3, r3, r2
   3727e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   37280:	2300      	movs	r3, #0
   37282:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   37286:	bd10      	pop	{r4, pc}
   37288:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   3728a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   3728e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   37292:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   37296:	80cb      	strh	r3, [r1, #6]
   37298:	8082      	strh	r2, [r0, #4]
}
   3729a:	e7f4      	b.n	37286 <free_list_remove_bidx+0x24>

0003729c <free_list_remove>:
{
   3729c:	b510      	push	{r4, lr}
   3729e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   372a0:	f7ff ffb3 	bl	3720a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   372a4:	fab0 f280 	clz	r2, r0
}
   372a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   372ac:	f1c2 021f 	rsb	r2, r2, #31
   372b0:	4618      	mov	r0, r3
   372b2:	f7ff bfd6 	b.w	37262 <free_list_remove_bidx>

000372b6 <alloc_chunk>:
{
   372b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   372ba:	fab1 f581 	clz	r5, r1
   372be:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   372c2:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   372c6:	4603      	mov	r3, r0
	if (b->next) {
   372c8:	693a      	ldr	r2, [r7, #16]
{
   372ca:	460e      	mov	r6, r1
	if (b->next) {
   372cc:	b1ca      	cbz	r2, 37302 <alloc_chunk+0x4c>
   372ce:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   372d2:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   372d4:	4618      	mov	r0, r3
   372d6:	4621      	mov	r1, r4
   372d8:	f7ff ff97 	bl	3720a <chunk_size>
   372dc:	42b0      	cmp	r0, r6
   372de:	d307      	bcc.n	372f0 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   372e0:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   372e2:	4621      	mov	r1, r4
   372e4:	4618      	mov	r0, r3
   372e6:	f7ff ffbc 	bl	37262 <free_list_remove_bidx>
}
   372ea:	4620      	mov	r0, r4
   372ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   372f0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   372f4:	f1b8 0801 	subs.w	r8, r8, #1
   372f8:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   372fa:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   372fc:	d001      	beq.n	37302 <alloc_chunk+0x4c>
   372fe:	428a      	cmp	r2, r1
   37300:	d1e7      	bne.n	372d2 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   37302:	68d9      	ldr	r1, [r3, #12]
   37304:	f1c5 0520 	rsb	r5, r5, #32
   37308:	f04f 34ff 	mov.w	r4, #4294967295
   3730c:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   3730e:	400c      	ands	r4, r1
   37310:	d0eb      	beq.n	372ea <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   37312:	fa94 f2a4 	rbit	r2, r4
   37316:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   3731a:	1d11      	adds	r1, r2, #4
   3731c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   37320:	e7df      	b.n	372e2 <alloc_chunk+0x2c>

00037322 <merge_chunks>:
{
   37322:	b538      	push	{r3, r4, r5, lr}
   37324:	4603      	mov	r3, r0
   37326:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   37328:	f7ff ff6f 	bl	3720a <chunk_size>
   3732c:	4611      	mov	r1, r2
   3732e:	4604      	mov	r4, r0
   37330:	4618      	mov	r0, r3
   37332:	f7ff ff6a 	bl	3720a <chunk_size>
   37336:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   37338:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3733c:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   3733e:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   37340:	4618      	mov	r0, r3
   37342:	4611      	mov	r1, r2
   37344:	f7ff ff61 	bl	3720a <chunk_size>
	void *cmem = &buf[c];
   37348:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   3734a:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   3734e:	bd38      	pop	{r3, r4, r5, pc}

00037350 <split_chunks>:
{
   37350:	b538      	push	{r3, r4, r5, lr}
   37352:	4603      	mov	r3, r0
   37354:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   37356:	f7ff ff58 	bl	3720a <chunk_size>
	chunksz_t lsz = rc - lc;
   3735a:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   3735c:	1aa5      	subs	r5, r4, r2
   3735e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   37362:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   37364:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   37366:	8060      	strh	r0, [r4, #2]
   37368:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3736c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   3736e:	8044      	strh	r4, [r0, #2]
   37370:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   37374:	4618      	mov	r0, r3
   37376:	4611      	mov	r1, r2
   37378:	f7ff ff47 	bl	3720a <chunk_size>
	void *cmem = &buf[c];
   3737c:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   3737e:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   37382:	bd38      	pop	{r3, r4, r5, pc}

00037384 <free_chunk>:
{
   37384:	b538      	push	{r3, r4, r5, lr}
   37386:	4605      	mov	r5, r0
   37388:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   3738a:	f7ff ff3e 	bl	3720a <chunk_size>
   3738e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   37390:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   37394:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   37396:	07da      	lsls	r2, r3, #31
   37398:	d40a      	bmi.n	373b0 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   3739a:	4628      	mov	r0, r5
   3739c:	f7ff ff7e 	bl	3729c <free_list_remove>
	return c + chunk_size(h, c);
   373a0:	4621      	mov	r1, r4
   373a2:	4628      	mov	r0, r5
   373a4:	f7ff ff31 	bl	3720a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   373a8:	1822      	adds	r2, r4, r0
   373aa:	4628      	mov	r0, r5
   373ac:	f7ff ffb9 	bl	37322 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   373b0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   373b4:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   373b6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   373ba:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   373bc:	07db      	lsls	r3, r3, #31
   373be:	d40c      	bmi.n	373da <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   373c0:	4628      	mov	r0, r5
   373c2:	f7ff ff6b 	bl	3729c <free_list_remove>
		return ((uint16_t *)cmem)[f];
   373c6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   373ca:	4622      	mov	r2, r4
   373cc:	1a61      	subs	r1, r4, r1
   373ce:	4628      	mov	r0, r5
   373d0:	f7ff ffa7 	bl	37322 <merge_chunks>
   373d4:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   373d8:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   373da:	4621      	mov	r1, r4
   373dc:	4628      	mov	r0, r5
}
   373de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   373e2:	f7ff bf17 	b.w	37214 <free_list_add>

000373e6 <sys_heap_alloc>:
{
   373e6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   373e8:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   373ea:	b909      	cbnz	r1, 373f0 <sys_heap_alloc+0xa>
		return NULL;
   373ec:	2000      	movs	r0, #0
}
   373ee:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   373f0:	68ab      	ldr	r3, [r5, #8]
   373f2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   373f6:	d9f9      	bls.n	373ec <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   373f8:	310b      	adds	r1, #11
   373fa:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   373fc:	4621      	mov	r1, r4
   373fe:	4628      	mov	r0, r5
   37400:	f7ff ff59 	bl	372b6 <alloc_chunk>
	if (c == 0U) {
   37404:	4606      	mov	r6, r0
   37406:	2800      	cmp	r0, #0
   37408:	d0f0      	beq.n	373ec <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   3740a:	4601      	mov	r1, r0
   3740c:	4628      	mov	r0, r5
   3740e:	f7ff fefc 	bl	3720a <chunk_size>
   37412:	42a0      	cmp	r0, r4
   37414:	d908      	bls.n	37428 <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   37416:	4434      	add	r4, r6
   37418:	4628      	mov	r0, r5
   3741a:	4622      	mov	r2, r4
   3741c:	f7ff ff98 	bl	37350 <split_chunks>
		free_list_add(h, c + chunk_sz);
   37420:	4621      	mov	r1, r4
   37422:	4628      	mov	r0, r5
   37424:	f7ff fef6 	bl	37214 <free_list_add>
	void *cmem = &buf[c];
   37428:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   3742c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   3742e:	8853      	ldrh	r3, [r2, #2]
   37430:	f043 0301 	orr.w	r3, r3, #1
   37434:	8053      	strh	r3, [r2, #2]
   37436:	3004      	adds	r0, #4
	return chunk_mem(h, c);
   37438:	e7d9      	b.n	373ee <sys_heap_alloc+0x8>

0003743a <outs>:
{
   3743a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3743e:	4607      	mov	r7, r0
   37440:	4688      	mov	r8, r1
   37442:	4615      	mov	r5, r2
   37444:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   37446:	4614      	mov	r4, r2
   37448:	42b4      	cmp	r4, r6
   3744a:	eba4 0005 	sub.w	r0, r4, r5
   3744e:	d302      	bcc.n	37456 <outs+0x1c>
   37450:	b93e      	cbnz	r6, 37462 <outs+0x28>
   37452:	7823      	ldrb	r3, [r4, #0]
   37454:	b12b      	cbz	r3, 37462 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   37456:	f814 0b01 	ldrb.w	r0, [r4], #1
   3745a:	4641      	mov	r1, r8
   3745c:	47b8      	blx	r7
		if (rc < 0) {
   3745e:	2800      	cmp	r0, #0
   37460:	daf2      	bge.n	37448 <outs+0xe>
}
   37462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00037466 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   37466:	4040      	eors	r0, r0
   37468:	f380 8811 	msr	BASEPRI, r0
   3746c:	f04f 0004 	mov.w	r0, #4
   37470:	df02      	svc	2
}
   37472:	4770      	bx	lr

00037474 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   37474:	4770      	bx	lr

00037476 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   37476:	6843      	ldr	r3, [r0, #4]
}
   37478:	7958      	ldrb	r0, [r3, #5]
   3747a:	4770      	bx	lr

0003747c <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   3747c:	f002 bc95 	b.w	39daa <sys_clock_cycle_get_32>

00037480 <dummy_timestamp>:
   37480:	2000      	movs	r0, #0
   37482:	4770      	bx	lr

00037484 <z_log_printk>:
			log_generic(src_level_union.structure, fmt, ap,
   37484:	2300      	movs	r3, #0
{
   37486:	460a      	mov	r2, r1
			log_generic(src_level_union.structure, fmt, ap,
   37488:	4601      	mov	r1, r0
   3748a:	4618      	mov	r0, r3
   3748c:	f7e8 bfc2 	b.w	20414 <log_generic>

00037490 <log_string_sync>:
{
   37490:	b40e      	push	{r1, r2, r3}
   37492:	b503      	push	{r0, r1, lr}
   37494:	aa03      	add	r2, sp, #12
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   37496:	2300      	movs	r3, #0
{
   37498:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   3749c:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   3749e:	f7e8 ffb9 	bl	20414 <log_generic>
}
   374a2:	b002      	add	sp, #8
   374a4:	f85d eb04 	ldr.w	lr, [sp], #4
   374a8:	b003      	add	sp, #12
   374aa:	4770      	bx	lr

000374ac <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   374ac:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   374ae:	f7e9 f825 	bl	204fc <log_init>
	}

	return 0;
}
   374b2:	2000      	movs	r0, #0
   374b4:	bd08      	pop	{r3, pc}

000374b6 <z_log_strdup>:
}
   374b6:	4770      	bx	lr

000374b8 <z_log_get_tag>:
}
   374b8:	2000      	movs	r0, #0
   374ba:	4770      	bx	lr

000374bc <out_func>:
{
   374bc:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   374be:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   374c2:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   374c4:	6852      	ldr	r2, [r2, #4]
   374c6:	2101      	movs	r1, #1
   374c8:	a801      	add	r0, sp, #4
   374ca:	4798      	blx	r3
}
   374cc:	2000      	movs	r0, #0
   374ce:	b003      	add	sp, #12
   374d0:	f85d fb04 	ldr.w	pc, [sp], #4

000374d4 <buffer_write>:
{
   374d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   374d6:	4606      	mov	r6, r0
   374d8:	460d      	mov	r5, r1
   374da:	4614      	mov	r4, r2
   374dc:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   374de:	4621      	mov	r1, r4
   374e0:	4628      	mov	r0, r5
   374e2:	463a      	mov	r2, r7
   374e4:	47b0      	blx	r6
	} while (len != 0);
   374e6:	1a24      	subs	r4, r4, r0
		buf += processed;
   374e8:	4405      	add	r5, r0
	} while (len != 0);
   374ea:	d1f8      	bne.n	374de <buffer_write+0xa>
}
   374ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000374ee <log_output_flush>:
		     output->control_block->offset,
   374ee:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   374f0:	6881      	ldr	r1, [r0, #8]
{
   374f2:	b510      	push	{r4, lr}
   374f4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   374f6:	e9d2 2300 	ldrd	r2, r3, [r2]
   374fa:	6800      	ldr	r0, [r0, #0]
   374fc:	f7ff ffea 	bl	374d4 <buffer_write>
	output->control_block->offset = 0;
   37500:	6863      	ldr	r3, [r4, #4]
   37502:	2200      	movs	r2, #0
   37504:	601a      	str	r2, [r3, #0]
}
   37506:	bd10      	pop	{r4, pc}

00037508 <z_impl_flash_write>:
{
   37508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   3750c:	6886      	ldr	r6, [r0, #8]
{
   3750e:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   37510:	68f3      	ldr	r3, [r6, #12]
{
   37512:	4605      	mov	r5, r0
   37514:	460f      	mov	r7, r1
   37516:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   37518:	b95b      	cbnz	r3, 37532 <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   3751a:	6874      	ldr	r4, [r6, #4]
   3751c:	464b      	mov	r3, r9
   3751e:	4642      	mov	r2, r8
   37520:	4639      	mov	r1, r7
   37522:	4628      	mov	r0, r5
   37524:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   37526:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   37528:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   3752a:	b943      	cbnz	r3, 3753e <z_impl_flash_write+0x36>
}
   3752c:	4620      	mov	r0, r4
   3752e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   37532:	2100      	movs	r1, #0
   37534:	4798      	blx	r3
		if (rc) {
   37536:	4604      	mov	r4, r0
   37538:	2800      	cmp	r0, #0
   3753a:	d0ee      	beq.n	3751a <z_impl_flash_write+0x12>
   3753c:	e7f6      	b.n	3752c <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   3753e:	2101      	movs	r1, #1
   37540:	4628      	mov	r0, r5
   37542:	4798      	blx	r3
   37544:	e7f2      	b.n	3752c <z_impl_flash_write+0x24>

00037546 <nvs_flash_rd>:
{
   37546:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   37548:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   3754a:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   3754c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   3754e:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   37550:	fa16 f181 	uxtah	r1, r6, r1
   37554:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   37558:	6884      	ldr	r4, [r0, #8]
   3755a:	6824      	ldr	r4, [r4, #0]
   3755c:	46a4      	mov	ip, r4
}
   3755e:	bc70      	pop	{r4, r5, r6}
   37560:	4760      	bx	ip

00037562 <nvs_flash_block_cmp>:
{
   37562:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   37566:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   37568:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   3756a:	681d      	ldr	r5, [r3, #0]
   3756c:	426d      	negs	r5, r5
{
   3756e:	b089      	sub	sp, #36	; 0x24
   37570:	4681      	mov	r9, r0
   37572:	460e      	mov	r6, r1
   37574:	4617      	mov	r7, r2
	block_size =
   37576:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   3757a:	b91c      	cbnz	r4, 37584 <nvs_flash_block_cmp+0x22>
	return 0;
   3757c:	4620      	mov	r0, r4
}
   3757e:	b009      	add	sp, #36	; 0x24
   37580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   37584:	42ac      	cmp	r4, r5
   37586:	46a0      	mov	r8, r4
   37588:	bf28      	it	cs
   3758a:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   3758c:	4643      	mov	r3, r8
   3758e:	466a      	mov	r2, sp
   37590:	4631      	mov	r1, r6
   37592:	4648      	mov	r0, r9
   37594:	f7ff ffd7 	bl	37546 <nvs_flash_rd>
		if (rc) {
   37598:	2800      	cmp	r0, #0
   3759a:	d1f0      	bne.n	3757e <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   3759c:	4642      	mov	r2, r8
   3759e:	4669      	mov	r1, sp
   375a0:	4638      	mov	r0, r7
   375a2:	f002 ffa0 	bl	3a4e6 <memcmp>
		if (rc) {
   375a6:	b920      	cbnz	r0, 375b2 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   375a8:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   375ac:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   375ae:	4447      	add	r7, r8
   375b0:	e7e3      	b.n	3757a <nvs_flash_block_cmp+0x18>
			return 1;
   375b2:	2001      	movs	r0, #1
   375b4:	e7e3      	b.n	3757e <nvs_flash_block_cmp+0x1c>

000375b6 <nvs_flash_cmp_const>:
{
   375b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   375ba:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   375bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   375be:	681d      	ldr	r5, [r3, #0]
   375c0:	426d      	negs	r5, r5
{
   375c2:	b088      	sub	sp, #32
	block_size =
   375c4:	f005 0520 	and.w	r5, r5, #32
{
   375c8:	4607      	mov	r7, r0
   375ca:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   375cc:	2320      	movs	r3, #32
{
   375ce:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   375d0:	4668      	mov	r0, sp
   375d2:	462a      	mov	r2, r5
   375d4:	f002 ffd8 	bl	3a588 <__memset_chk>
	while (len) {
   375d8:	b91c      	cbnz	r4, 375e2 <nvs_flash_cmp_const+0x2c>
	return 0;
   375da:	4620      	mov	r0, r4
}
   375dc:	b008      	add	sp, #32
   375de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   375e2:	42ac      	cmp	r4, r5
   375e4:	46a0      	mov	r8, r4
   375e6:	bf28      	it	cs
   375e8:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   375ea:	4643      	mov	r3, r8
   375ec:	466a      	mov	r2, sp
   375ee:	4631      	mov	r1, r6
   375f0:	4638      	mov	r0, r7
   375f2:	f7ff ffb6 	bl	37562 <nvs_flash_block_cmp>
		if (rc) {
   375f6:	2800      	cmp	r0, #0
   375f8:	d1f0      	bne.n	375dc <nvs_flash_cmp_const+0x26>
		len -= bytes_to_cmp;
   375fa:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   375fe:	4446      	add	r6, r8
   37600:	e7ea      	b.n	375d8 <nvs_flash_cmp_const+0x22>

00037602 <nvs_flash_erase_sector>:
{
   37602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   37606:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
   3760a:	6806      	ldr	r6, [r0, #0]
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   3760c:	6a87      	ldr	r7, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   3760e:	ea4f 4811 	mov.w	r8, r1, lsr #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   37612:	0c09      	lsrs	r1, r1, #16
{
   37614:	4605      	mov	r5, r0
	addr &= ADDR_SECT_MASK;
   37616:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   3761a:	fb0a 6601 	mla	r6, sl, r1, r6
	const struct flash_driver_api *api =
   3761e:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (api->write_protection != NULL) {
   37622:	f8d9 300c 	ldr.w	r3, [r9, #12]
   37626:	b9b3      	cbnz	r3, 37656 <nvs_flash_erase_sector+0x54>
	rc = api->erase(dev, offset, size);
   37628:	f8d9 3008 	ldr.w	r3, [r9, #8]
   3762c:	4652      	mov	r2, sl
   3762e:	4631      	mov	r1, r6
   37630:	4638      	mov	r0, r7
   37632:	4798      	blx	r3
	if (api->write_protection != NULL) {
   37634:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->erase(dev, offset, size);
   37638:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   3763a:	b9ab      	cbnz	r3, 37668 <nvs_flash_erase_sector+0x66>
	if (rc) {
   3763c:	b98c      	cbnz	r4, 37662 <nvs_flash_erase_sector+0x60>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   3763e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   37640:	89ab      	ldrh	r3, [r5, #12]
   37642:	7912      	ldrb	r2, [r2, #4]
   37644:	4641      	mov	r1, r8
   37646:	4628      	mov	r0, r5
   37648:	f7ff ffb5 	bl	375b6 <nvs_flash_cmp_const>
		rc = -ENXIO;
   3764c:	1e04      	subs	r4, r0, #0
   3764e:	bf18      	it	ne
   37650:	f06f 0405 	mvnne.w	r4, #5
   37654:	e005      	b.n	37662 <nvs_flash_erase_sector+0x60>
		rc = api->write_protection(dev, false);
   37656:	2100      	movs	r1, #0
   37658:	4638      	mov	r0, r7
   3765a:	4798      	blx	r3
		if (rc) {
   3765c:	4604      	mov	r4, r0
   3765e:	2800      	cmp	r0, #0
   37660:	d0e2      	beq.n	37628 <nvs_flash_erase_sector+0x26>
}
   37662:	4620      	mov	r0, r4
   37664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   37668:	2101      	movs	r1, #1
   3766a:	4638      	mov	r0, r7
   3766c:	4798      	blx	r3
   3766e:	e7e5      	b.n	3763c <nvs_flash_erase_sector+0x3a>

00037670 <nvs_ate_crc8_update>:
{
   37670:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   37672:	4601      	mov	r1, r0
{
   37674:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   37676:	2207      	movs	r2, #7
   37678:	20ff      	movs	r0, #255	; 0xff
   3767a:	f7e7 fe2f 	bl	1f2dc <crc8_ccitt>
	entry->crc8 = crc8;
   3767e:	71e0      	strb	r0, [r4, #7]
}
   37680:	bd10      	pop	{r4, pc}

00037682 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   37682:	7800      	ldrb	r0, [r0, #0]
   37684:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   37686:	bf81      	itttt	hi
   37688:	1809      	addhi	r1, r1, r0
   3768a:	f101 31ff 	addhi.w	r1, r1, #4294967295
   3768e:	4240      	neghi	r0, r0
   37690:	4001      	andhi	r1, r0
}
   37692:	4608      	mov	r0, r1
   37694:	4770      	bx	lr

00037696 <nvs_ate_valid>:
{
   37696:	b570      	push	{r4, r5, r6, lr}
   37698:	460c      	mov	r4, r1
   3769a:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   3769c:	2108      	movs	r1, #8
   3769e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   376a0:	f7ff ffef 	bl	37682 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   376a4:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   376a6:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   376a8:	4621      	mov	r1, r4
   376aa:	20ff      	movs	r0, #255	; 0xff
   376ac:	f7e7 fe16 	bl	1f2dc <crc8_ccitt>
	if (crc8 == entry->crc8) {
   376b0:	79e3      	ldrb	r3, [r4, #7]
   376b2:	4283      	cmp	r3, r0
   376b4:	d107      	bne.n	376c6 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   376b6:	89a8      	ldrh	r0, [r5, #12]
   376b8:	8863      	ldrh	r3, [r4, #2]
   376ba:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   376bc:	4283      	cmp	r3, r0
   376be:	bf2c      	ite	cs
   376c0:	2000      	movcs	r0, #0
   376c2:	2001      	movcc	r0, #1
}
   376c4:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   376c6:	2000      	movs	r0, #0
   376c8:	e7fc      	b.n	376c4 <nvs_ate_valid+0x2e>

000376ca <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   376ca:	680b      	ldr	r3, [r1, #0]
   376cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   376d0:	0c1a      	lsrs	r2, r3, #16
   376d2:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   376d6:	bf08      	it	eq
   376d8:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   376dc:	600b      	str	r3, [r1, #0]
}
   376de:	4770      	bx	lr

000376e0 <nvs_close_ate_valid>:
{
   376e0:	b538      	push	{r3, r4, r5, lr}
   376e2:	4605      	mov	r5, r0
   376e4:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   376e6:	f7ff ffd6 	bl	37696 <nvs_ate_valid>
   376ea:	b1a0      	cbz	r0, 37716 <nvs_close_ate_valid+0x36>
   376ec:	88a0      	ldrh	r0, [r4, #4]
   376ee:	b998      	cbnz	r0, 37718 <nvs_close_ate_valid+0x38>
   376f0:	8822      	ldrh	r2, [r4, #0]
   376f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   376f6:	429a      	cmp	r2, r3
   376f8:	d10d      	bne.n	37716 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   376fa:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   376fc:	2108      	movs	r1, #8
   376fe:	f7ff ffc0 	bl	37682 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   37702:	8862      	ldrh	r2, [r4, #2]
   37704:	89ab      	ldrh	r3, [r5, #12]
   37706:	1a9b      	subs	r3, r3, r2
   37708:	fbb3 f2f0 	udiv	r2, r3, r0
   3770c:	fb02 3010 	mls	r0, r2, r0, r3
   37710:	fab0 f080 	clz	r0, r0
   37714:	0940      	lsrs	r0, r0, #5
}
   37716:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   37718:	2000      	movs	r0, #0
   3771a:	e7fc      	b.n	37716 <nvs_close_ate_valid+0x36>

0003771c <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   3771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   37720:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   37722:	4606      	mov	r6, r0
	offset += addr & ADDR_OFFS_MASK;
   37724:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   37726:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   37728:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   3772a:	fa10 f181 	uxtah	r1, r0, r1
   3772e:	fb03 1707 	mla	r7, r3, r7, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   37732:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   37734:	681d      	ldr	r5, [r3, #0]
   37736:	426d      	negs	r5, r5
	if (blen > 0) {
   37738:	4025      	ands	r5, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   3773a:	b088      	sub	sp, #32
   3773c:	4690      	mov	r8, r2
	if (blen > 0) {
   3773e:	d008      	beq.n	37752 <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   37740:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   37742:	462b      	mov	r3, r5
   37744:	4639      	mov	r1, r7
   37746:	f7ff fedf 	bl	37508 <z_impl_flash_write>
		if (rc) {
   3774a:	b9b8      	cbnz	r0, 3777c <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   3774c:	1b64      	subs	r4, r4, r5
		offset += blen;
   3774e:	442f      	add	r7, r5
		data8 += blen;
   37750:	44a8      	add	r8, r5
	if (len) {
   37752:	b1b4      	cbz	r4, 37782 <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   37754:	2320      	movs	r3, #32
   37756:	4622      	mov	r2, r4
   37758:	4641      	mov	r1, r8
   3775a:	4668      	mov	r0, sp
   3775c:	f002 fedf 	bl	3a51e <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   37760:	6af5      	ldr	r5, [r6, #44]	; 0x2c
   37762:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3(memset, void *, int)
   37764:	7929      	ldrb	r1, [r5, #4]
   37766:	1b12      	subs	r2, r2, r4
   37768:	eb0d 0004 	add.w	r0, sp, r4
   3776c:	f002 ff04 	bl	3a578 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   37770:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   37772:	682b      	ldr	r3, [r5, #0]
   37774:	466a      	mov	r2, sp
   37776:	4639      	mov	r1, r7
   37778:	f7ff fec6 	bl	37508 <z_impl_flash_write>
}
   3777c:	b008      	add	sp, #32
   3777e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   37782:	4620      	mov	r0, r4
   37784:	e7fa      	b.n	3777c <nvs_flash_al_wrt.part.0+0x60>

00037786 <nvs_flash_ate_wrt>:
{
   37786:	b510      	push	{r4, lr}
   37788:	460a      	mov	r2, r1
	if (!len) {
   3778a:	2308      	movs	r3, #8
   3778c:	6841      	ldr	r1, [r0, #4]
{
   3778e:	4604      	mov	r4, r0
   37790:	f7ff ffc4 	bl	3771c <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   37794:	2108      	movs	r1, #8
   37796:	4603      	mov	r3, r0
   37798:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   3779a:	f7ff ff72 	bl	37682 <nvs_al_size.isra.0>
   3779e:	6862      	ldr	r2, [r4, #4]
   377a0:	1a12      	subs	r2, r2, r0
   377a2:	6062      	str	r2, [r4, #4]
}
   377a4:	4618      	mov	r0, r3
   377a6:	bd10      	pop	{r4, pc}

000377a8 <nvs_add_gc_done_ate>:
{
   377a8:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   377aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   377ae:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   377b2:	2300      	movs	r3, #0
{
   377b4:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   377b6:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   377ba:	6883      	ldr	r3, [r0, #8]
   377bc:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   377c0:	4668      	mov	r0, sp
   377c2:	f7ff ff55 	bl	37670 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   377c6:	4669      	mov	r1, sp
   377c8:	4620      	mov	r0, r4
   377ca:	f7ff ffdc 	bl	37786 <nvs_flash_ate_wrt>
}
   377ce:	b002      	add	sp, #8
   377d0:	bd10      	pop	{r4, pc}

000377d2 <nvs_prev_ate>:
{
   377d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   377d4:	4605      	mov	r5, r0
   377d6:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   377d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   377da:	2108      	movs	r1, #8
   377dc:	f7ff ff51 	bl	37682 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   377e0:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   377e2:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   377e4:	2308      	movs	r3, #8
   377e6:	4628      	mov	r0, r5
   377e8:	f7ff fead 	bl	37546 <nvs_flash_rd>
	if (rc) {
   377ec:	4604      	mov	r4, r0
   377ee:	2800      	cmp	r0, #0
   377f0:	d138      	bne.n	37864 <nvs_prev_ate+0x92>
	*addr += ate_size;
   377f2:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   377f4:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   377f6:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   377f8:	b29a      	uxth	r2, r3
   377fa:	1bc7      	subs	r7, r0, r7
   377fc:	42ba      	cmp	r2, r7
	*addr += ate_size;
   377fe:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   37800:	d130      	bne.n	37864 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   37802:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   37804:	bf03      	ittte	eq
   37806:	89e9      	ldrheq	r1, [r5, #14]
   37808:	f101 31ff 	addeq.w	r1, r1, #4294967295
   3780c:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   37810:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   37814:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   37816:	2308      	movs	r3, #8
   37818:	466a      	mov	r2, sp
   3781a:	4628      	mov	r0, r5
   3781c:	f7ff fe93 	bl	37546 <nvs_flash_rd>
	if (rc) {
   37820:	4604      	mov	r4, r0
   37822:	b9f8      	cbnz	r0, 37864 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   37824:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   37826:	466a      	mov	r2, sp
   37828:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   3782a:	4603      	mov	r3, r0
		if (data8[i] != value) {
   3782c:	f812 0b01 	ldrb.w	r0, [r2], #1
   37830:	4281      	cmp	r1, r0
   37832:	d10c      	bne.n	3784e <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   37834:	3301      	adds	r3, #1
   37836:	2b08      	cmp	r3, #8
   37838:	d1f8      	bne.n	3782c <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   3783a:	686b      	ldr	r3, [r5, #4]
   3783c:	e005      	b.n	3784a <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   3783e:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   37840:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   37844:	0c1b      	lsrs	r3, r3, #16
   37846:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   37848:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   3784a:	6033      	str	r3, [r6, #0]
		return 0;
   3784c:	e00a      	b.n	37864 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   3784e:	4669      	mov	r1, sp
   37850:	4628      	mov	r0, r5
   37852:	f7ff ff45 	bl	376e0 <nvs_close_ate_valid>
   37856:	2800      	cmp	r0, #0
   37858:	d1f1      	bne.n	3783e <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   3785a:	4631      	mov	r1, r6
   3785c:	4628      	mov	r0, r5
   3785e:	f7e9 f91b 	bl	20a98 <nvs_recover_last_ate>
   37862:	4604      	mov	r4, r0
}
   37864:	4620      	mov	r0, r4
   37866:	b003      	add	sp, #12
   37868:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003786a <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   3786a:	2300      	movs	r3, #0
   3786c:	461a      	mov	r2, r3
   3786e:	f7e9 bbeb 	b.w	21048 <nvs_write>

00037872 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   37872:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   37874:	2400      	movs	r4, #0
   37876:	9400      	str	r4, [sp, #0]
   37878:	f7e9 fcc8 	bl	2120c <nvs_read_hist>
	return rc;
}
   3787c:	b002      	add	sp, #8
   3787e:	bd10      	pop	{r4, pc}

00037880 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   37880:	4770      	bx	lr

00037882 <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   37882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   37886:	1e0c      	subs	r4, r1, #0
   37888:	4605      	mov	r5, r0
   3788a:	4617      	mov	r7, r2
   3788c:	461e      	mov	r6, r3
   3788e:	db10      	blt.n	378b2 <flash_area_read+0x30>
   37890:	6882      	ldr	r2, [r0, #8]
   37892:	18e3      	adds	r3, r4, r3
   37894:	4293      	cmp	r3, r2
   37896:	d80c      	bhi.n	378b2 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   37898:	68c0      	ldr	r0, [r0, #12]
   3789a:	f7f7 fab1 	bl	2ee00 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3789e:	6869      	ldr	r1, [r5, #4]
   378a0:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   378a2:	6883      	ldr	r3, [r0, #8]
   378a4:	681c      	ldr	r4, [r3, #0]
   378a6:	463a      	mov	r2, r7
   378a8:	4633      	mov	r3, r6
   378aa:	46a4      	mov	ip, r4
}
   378ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   378b0:	4760      	bx	ip
   378b2:	f06f 0015 	mvn.w	r0, #21
   378b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000378ba <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   378ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   378be:	f1b1 0900 	subs.w	r9, r1, #0
   378c2:	4680      	mov	r8, r0
   378c4:	4617      	mov	r7, r2
   378c6:	461e      	mov	r6, r3
   378c8:	db27      	blt.n	3791a <flash_area_write+0x60>
   378ca:	6882      	ldr	r2, [r0, #8]
   378cc:	444b      	add	r3, r9
   378ce:	4293      	cmp	r3, r2
   378d0:	d823      	bhi.n	3791a <flash_area_write+0x60>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   378d2:	68c0      	ldr	r0, [r0, #12]
   378d4:	f7f7 fa94 	bl	2ee00 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   378d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
   378dc:	4605      	mov	r5, r0
   378de:	4489      	add	r9, r1
	const struct flash_driver_api *api =
   378e0:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (api->write_protection != NULL) {
   378e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   378e8:	b96b      	cbnz	r3, 37906 <flash_area_write+0x4c>
	rc = api->write(dev, offset, data, len);
   378ea:	f8d8 4004 	ldr.w	r4, [r8, #4]
   378ee:	4633      	mov	r3, r6
   378f0:	463a      	mov	r2, r7
   378f2:	4649      	mov	r1, r9
   378f4:	4628      	mov	r0, r5
   378f6:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   378f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
   378fc:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   378fe:	b943      	cbnz	r3, 37912 <flash_area_write+0x58>

	return rc;
}
   37900:	4620      	mov	r0, r4
   37902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   37906:	2100      	movs	r1, #0
   37908:	4798      	blx	r3
		if (rc) {
   3790a:	4604      	mov	r4, r0
   3790c:	2800      	cmp	r0, #0
   3790e:	d0ec      	beq.n	378ea <flash_area_write+0x30>
   37910:	e7f6      	b.n	37900 <flash_area_write+0x46>
		(void) api->write_protection(dev, true);
   37912:	2101      	movs	r1, #1
   37914:	4628      	mov	r0, r5
   37916:	4798      	blx	r3
   37918:	e7f2      	b.n	37900 <flash_area_write+0x46>
		return -EINVAL;
   3791a:	f06f 0415 	mvn.w	r4, #21
   3791e:	e7ef      	b.n	37900 <flash_area_write+0x46>

00037920 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   37920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37924:	1e0c      	subs	r4, r1, #0
   37926:	4605      	mov	r5, r0
   37928:	4617      	mov	r7, r2
   3792a:	db25      	blt.n	37978 <flash_area_erase+0x58>
   3792c:	18a3      	adds	r3, r4, r2
   3792e:	6882      	ldr	r2, [r0, #8]
   37930:	4293      	cmp	r3, r2
   37932:	d821      	bhi.n	37978 <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   37934:	68c0      	ldr	r0, [r0, #12]
   37936:	f7f7 fa63 	bl	2ee00 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3793a:	686d      	ldr	r5, [r5, #4]
   3793c:	4606      	mov	r6, r0
   3793e:	4425      	add	r5, r4
	const struct flash_driver_api *api =
   37940:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (api->write_protection != NULL) {
   37944:	f8d8 300c 	ldr.w	r3, [r8, #12]
   37948:	b963      	cbnz	r3, 37964 <flash_area_erase+0x44>
	rc = api->erase(dev, offset, size);
   3794a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3794e:	463a      	mov	r2, r7
   37950:	4629      	mov	r1, r5
   37952:	4630      	mov	r0, r6
   37954:	4798      	blx	r3
	if (api->write_protection != NULL) {
   37956:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
   3795a:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   3795c:	b943      	cbnz	r3, 37970 <flash_area_erase+0x50>

	return rc;
}
   3795e:	4620      	mov	r0, r4
   37960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
   37964:	2100      	movs	r1, #0
   37966:	4798      	blx	r3
		if (rc) {
   37968:	4604      	mov	r4, r0
   3796a:	2800      	cmp	r0, #0
   3796c:	d0ed      	beq.n	3794a <flash_area_erase+0x2a>
   3796e:	e7f6      	b.n	3795e <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
   37970:	2101      	movs	r1, #1
   37972:	4630      	mov	r0, r6
   37974:	4798      	blx	r3
   37976:	e7f2      	b.n	3795e <flash_area_erase+0x3e>
		return -EINVAL;
   37978:	f06f 0415 	mvn.w	r4, #21
   3797c:	e7ef      	b.n	3795e <flash_area_erase+0x3e>

0003797e <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   3797e:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   37980:	68c0      	ldr	r0, [r0, #12]
   37982:	f7f7 fa3d 	bl	2ee00 <z_impl_device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   37986:	6883      	ldr	r3, [r0, #8]
   37988:	691b      	ldr	r3, [r3, #16]
   3798a:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   3798c:	6800      	ldr	r0, [r0, #0]
   3798e:	bd08      	pop	{r3, pc}

00037990 <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   37990:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   37992:	68c0      	ldr	r0, [r0, #12]
   37994:	f7f7 fa34 	bl	2ee00 <z_impl_device_get_binding>
	return api->get_parameters(dev);
   37998:	6883      	ldr	r3, [r0, #8]
   3799a:	691b      	ldr	r3, [r3, #16]
   3799c:	4798      	blx	r3

	return param->erase_value;
}
   3799e:	7900      	ldrb	r0, [r0, #4]
   379a0:	bd08      	pop	{r3, pc}

000379a2 <get_sectors_cb>:
{
   379a2:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   379a4:	6802      	ldr	r2, [r0, #0]
   379a6:	684c      	ldr	r4, [r1, #4]
   379a8:	42a2      	cmp	r2, r4
   379aa:	d316      	bcc.n	379da <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   379ac:	688b      	ldr	r3, [r1, #8]
   379ae:	4423      	add	r3, r4
   379b0:	429a      	cmp	r2, r3
   379b2:	d206      	bcs.n	379c2 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   379b4:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   379b8:	42ab      	cmp	r3, r5
   379ba:	d304      	bcc.n	379c6 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   379bc:	f06f 030b 	mvn.w	r3, #11
   379c0:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   379c2:	2000      	movs	r0, #0
   379c4:	e00a      	b.n	379dc <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   379c6:	68cd      	ldr	r5, [r1, #12]
   379c8:	1b12      	subs	r2, r2, r4
   379ca:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   379ce:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   379d2:	6842      	ldr	r2, [r0, #4]
   379d4:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   379d6:	3301      	adds	r3, #1
   379d8:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   379da:	2001      	movs	r0, #1
}
   379dc:	bd70      	pop	{r4, r5, r6, pc}

000379de <flash_get_write_block_size>:

extern size_t z_impl_flash_get_write_block_size(const struct device * dev);

__pinned_func
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   379de:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   379e0:	6883      	ldr	r3, [r0, #8]
   379e2:	691b      	ldr	r3, [r3, #16]
   379e4:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   379e6:	6800      	ldr	r0, [r0, #0]
   379e8:	bd08      	pop	{r3, pc}

000379ea <stream_flash_buffered_write>:
{
   379ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   379ee:	4689      	mov	r9, r1
   379f0:	4616      	mov	r6, r2
   379f2:	4698      	mov	r8, r3
	if (!ctx) {
   379f4:	4604      	mov	r4, r0
   379f6:	b398      	cbz	r0, 37a60 <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   379f8:	6882      	ldr	r2, [r0, #8]
   379fa:	6903      	ldr	r3, [r0, #16]
   379fc:	4413      	add	r3, r2
   379fe:	6982      	ldr	r2, [r0, #24]
   37a00:	4433      	add	r3, r6
   37a02:	4293      	cmp	r3, r2
   37a04:	d830      	bhi.n	37a68 <stream_flash_buffered_write+0x7e>
	int processed = 0;
   37a06:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   37a08:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
   37a0c:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   37a10:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
   37a12:	45ba      	cmp	sl, r7
   37a14:	d215      	bcs.n	37a42 <stream_flash_buffered_write+0x58>
	if (processed < len) {
   37a16:	42b5      	cmp	r5, r6
   37a18:	d209      	bcs.n	37a2e <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
   37a1a:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   37a1c:	4652      	mov	r2, sl
   37a1e:	4418      	add	r0, r3
   37a20:	eb09 0105 	add.w	r1, r9, r5
   37a24:	f002 fd6d 	bl	3a502 <memcpy>
		ctx->buf_bytes += len - processed;
   37a28:	68a3      	ldr	r3, [r4, #8]
   37a2a:	4453      	add	r3, sl
   37a2c:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   37a2e:	f1b8 0f00 	cmp.w	r8, #0
   37a32:	d01c      	beq.n	37a6e <stream_flash_buffered_write+0x84>
   37a34:	68a0      	ldr	r0, [r4, #8]
   37a36:	b1a8      	cbz	r0, 37a64 <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
   37a38:	4620      	mov	r0, r4
}
   37a3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
   37a3e:	f7e9 bd07 	b.w	21450 <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   37a42:	6823      	ldr	r3, [r4, #0]
   37a44:	463a      	mov	r2, r7
   37a46:	4418      	add	r0, r3
   37a48:	eb09 0105 	add.w	r1, r9, r5
   37a4c:	f002 fd59 	bl	3a502 <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   37a50:	6863      	ldr	r3, [r4, #4]
   37a52:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   37a54:	4620      	mov	r0, r4
   37a56:	f7e9 fcfb 	bl	21450 <flash_sync>
		if (rc != 0) {
   37a5a:	b918      	cbnz	r0, 37a64 <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
   37a5c:	443d      	add	r5, r7
   37a5e:	e7d3      	b.n	37a08 <stream_flash_buffered_write+0x1e>
		return -EFAULT;
   37a60:	f06f 000d 	mvn.w	r0, #13
}
   37a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   37a68:	f06f 000b 	mvn.w	r0, #11
   37a6c:	e7fa      	b.n	37a64 <stream_flash_buffered_write+0x7a>
   37a6e:	4640      	mov	r0, r8
   37a70:	e7f8      	b.n	37a64 <stream_flash_buffered_write+0x7a>

00037a72 <stream_flash_bytes_written>:
}
   37a72:	6900      	ldr	r0, [r0, #16]
   37a74:	4770      	bx	lr

00037a76 <settings_load>:
	return settings_load_subtree(NULL);
   37a76:	2000      	movs	r0, #0
   37a78:	f7e9 be2c 	b.w	216d4 <settings_load_subtree>

00037a7c <settings_delete>:
	return settings_save_one(name, NULL, 0);
   37a7c:	2200      	movs	r2, #0
   37a7e:	4611      	mov	r1, r2
   37a80:	f7e9 bdee 	b.w	21660 <settings_save_one>

00037a84 <settings_name_steq>:
{
   37a84:	4603      	mov	r3, r0
   37a86:	b530      	push	{r4, r5, lr}
   37a88:	4608      	mov	r0, r1
	if (next) {
   37a8a:	b10a      	cbz	r2, 37a90 <settings_name_steq+0xc>
		*next = NULL;
   37a8c:	2100      	movs	r1, #0
   37a8e:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   37a90:	b163      	cbz	r3, 37aac <settings_name_steq+0x28>
   37a92:	b190      	cbz	r0, 37aba <settings_name_steq+0x36>
   37a94:	1e41      	subs	r1, r0, #1
   37a96:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   37a98:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   37a9c:	4604      	mov	r4, r0
   37a9e:	f810 3b01 	ldrb.w	r3, [r0], #1
   37aa2:	b15d      	cbz	r5, 37abc <settings_name_steq+0x38>
   37aa4:	429d      	cmp	r5, r3
   37aa6:	d101      	bne.n	37aac <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   37aa8:	2d3d      	cmp	r5, #61	; 0x3d
   37aaa:	d1f5      	bne.n	37a98 <settings_name_steq+0x14>
	return 0;
   37aac:	2000      	movs	r0, #0
   37aae:	e004      	b.n	37aba <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   37ab0:	2b3d      	cmp	r3, #61	; 0x3d
   37ab2:	d008      	beq.n	37ac6 <settings_name_steq+0x42>
   37ab4:	fab3 f083 	clz	r0, r3
   37ab8:	0940      	lsrs	r0, r0, #5
}
   37aba:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   37abc:	2b2f      	cmp	r3, #47	; 0x2f
   37abe:	d1f7      	bne.n	37ab0 <settings_name_steq+0x2c>
		if (next) {
   37ac0:	b10a      	cbz	r2, 37ac6 <settings_name_steq+0x42>
			*next = name + 1;
   37ac2:	3401      	adds	r4, #1
   37ac4:	6014      	str	r4, [r2, #0]
		return 1;
   37ac6:	2001      	movs	r0, #1
   37ac8:	e7f7      	b.n	37aba <settings_name_steq+0x36>

00037aca <settings_name_next>:
{
   37aca:	b530      	push	{r4, r5, lr}
   37acc:	4603      	mov	r3, r0
	if (next) {
   37ace:	b109      	cbz	r1, 37ad4 <settings_name_next+0xa>
		*next = NULL;
   37ad0:	2200      	movs	r2, #0
   37ad2:	600a      	str	r2, [r1, #0]
	if (!name) {
   37ad4:	b16b      	cbz	r3, 37af2 <settings_name_next+0x28>
   37ad6:	461a      	mov	r2, r3
   37ad8:	4614      	mov	r4, r2
   37ada:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   37adc:	f812 5b01 	ldrb.w	r5, [r2], #1
   37ae0:	b135      	cbz	r5, 37af0 <settings_name_next+0x26>
   37ae2:	2d3d      	cmp	r5, #61	; 0x3d
   37ae4:	d004      	beq.n	37af0 <settings_name_next+0x26>
   37ae6:	2d2f      	cmp	r5, #47	; 0x2f
   37ae8:	d1f6      	bne.n	37ad8 <settings_name_next+0xe>
		if (next) {
   37aea:	b109      	cbz	r1, 37af0 <settings_name_next+0x26>
			*next = name + 1;
   37aec:	3401      	adds	r4, #1
   37aee:	600c      	str	r4, [r1, #0]
}
   37af0:	bd30      	pop	{r4, r5, pc}
		return 0;
   37af2:	4618      	mov	r0, r3
   37af4:	e7fc      	b.n	37af0 <settings_name_next+0x26>

00037af6 <settings_nvs_read_fn>:
{
   37af6:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   37af8:	4613      	mov	r3, r2
{
   37afa:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   37afc:	460a      	mov	r2, r1
   37afe:	8881      	ldrh	r1, [r0, #4]
   37b00:	6800      	ldr	r0, [r0, #0]
   37b02:	f7ff feb6 	bl	37872 <nvs_read>
}
   37b06:	42a0      	cmp	r0, r4
   37b08:	bfa8      	it	ge
   37b0a:	4620      	movge	r0, r4
   37b0c:	bd10      	pop	{r4, pc}

00037b0e <settings_nvs_save>:
{
   37b0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37b12:	b097      	sub	sp, #92	; 0x5c
   37b14:	4604      	mov	r4, r0
   37b16:	9201      	str	r2, [sp, #4]
   37b18:	469b      	mov	fp, r3
	if (!name) {
   37b1a:	4689      	mov	r9, r1
   37b1c:	2900      	cmp	r1, #0
   37b1e:	d069      	beq.n	37bf4 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   37b20:	b1da      	cbz	r2, 37b5a <settings_nvs_save+0x4c>
   37b22:	fabb f78b 	clz	r7, fp
   37b26:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   37b28:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   37b2a:	3501      	adds	r5, #1
   37b2c:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   37b2e:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   37b30:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   37b34:	1e6e      	subs	r6, r5, #1
   37b36:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   37b38:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   37b3c:	d02e      	beq.n	37b9c <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   37b3e:	234a      	movs	r3, #74	; 0x4a
   37b40:	aa03      	add	r2, sp, #12
   37b42:	4631      	mov	r1, r6
   37b44:	4650      	mov	r0, sl
   37b46:	f7ff fe94 	bl	37872 <nvs_read>
		if (rc < 0) {
   37b4a:	2800      	cmp	r0, #0
   37b4c:	da07      	bge.n	37b5e <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   37b4e:	f110 0f02 	cmn.w	r0, #2
   37b52:	bf08      	it	eq
   37b54:	46b0      	moveq	r8, r6
   37b56:	4635      	mov	r5, r6
   37b58:	e7ec      	b.n	37b34 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   37b5a:	2701      	movs	r7, #1
   37b5c:	e7e4      	b.n	37b28 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   37b5e:	ab16      	add	r3, sp, #88	; 0x58
   37b60:	4418      	add	r0, r3
   37b62:	2300      	movs	r3, #0
   37b64:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   37b68:	a903      	add	r1, sp, #12
   37b6a:	4648      	mov	r0, r9
   37b6c:	f7e0 fc12 	bl	18394 <strcmp>
   37b70:	2800      	cmp	r0, #0
   37b72:	d1f0      	bne.n	37b56 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   37b74:	2f00      	cmp	r7, #0
   37b76:	d03b      	beq.n	37bf0 <settings_nvs_save+0xe2>
   37b78:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   37b7a:	42b3      	cmp	r3, r6
   37b7c:	d142      	bne.n	37c04 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   37b7e:	4622      	mov	r2, r4
   37b80:	1e73      	subs	r3, r6, #1
   37b82:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   37b86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   37b8a:	2302      	movs	r3, #2
   37b8c:	4650      	mov	r0, sl
   37b8e:	f7e9 fa5b 	bl	21048 <nvs_write>
			if (rc < 0) {
   37b92:	2800      	cmp	r0, #0
   37b94:	da36      	bge.n	37c04 <settings_nvs_save+0xf6>
}
   37b96:	b017      	add	sp, #92	; 0x5c
   37b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   37b9c:	bb6f      	cbnz	r7, 37bfa <settings_nvs_save+0xec>
	write_name = true;
   37b9e:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   37ba0:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   37ba4:	d02b      	beq.n	37bfe <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   37ba6:	f104 0508 	add.w	r5, r4, #8
   37baa:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   37bae:	9a01      	ldr	r2, [sp, #4]
   37bb0:	465b      	mov	r3, fp
   37bb2:	b289      	uxth	r1, r1
   37bb4:	4628      	mov	r0, r5
   37bb6:	f7e9 fa47 	bl	21048 <nvs_write>
	if (rc < 0) {
   37bba:	2800      	cmp	r0, #0
   37bbc:	dbeb      	blt.n	37b96 <settings_nvs_save+0x88>
	if (write_name) {
   37bbe:	b157      	cbz	r7, 37bd6 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   37bc0:	4648      	mov	r0, r9
   37bc2:	f7e0 fbf1 	bl	183a8 <strlen>
   37bc6:	464a      	mov	r2, r9
   37bc8:	4603      	mov	r3, r0
   37bca:	4641      	mov	r1, r8
   37bcc:	4628      	mov	r0, r5
   37bce:	f7e9 fa3b 	bl	21048 <nvs_write>
		if (rc < 0) {
   37bd2:	2800      	cmp	r0, #0
   37bd4:	dbdf      	blt.n	37b96 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   37bd6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   37bd8:	4543      	cmp	r3, r8
   37bda:	d220      	bcs.n	37c1e <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   37bdc:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   37bde:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   37be0:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   37be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   37be8:	4628      	mov	r0, r5
   37bea:	f7e9 fa2d 	bl	21048 <nvs_write>
   37bee:	e016      	b.n	37c1e <settings_nvs_save+0x110>
   37bf0:	46b0      	mov	r8, r6
   37bf2:	e7d5      	b.n	37ba0 <settings_nvs_save+0x92>
		return -EINVAL;
   37bf4:	f06f 0015 	mvn.w	r0, #21
   37bf8:	e7cd      	b.n	37b96 <settings_nvs_save+0x88>
		return 0;
   37bfa:	2000      	movs	r0, #0
   37bfc:	e7cb      	b.n	37b96 <settings_nvs_save+0x88>
		return -ENOMEM;
   37bfe:	f06f 000b 	mvn.w	r0, #11
   37c02:	e7c8      	b.n	37b96 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   37c04:	4631      	mov	r1, r6
   37c06:	4650      	mov	r0, sl
   37c08:	f7ff fe2f 	bl	3786a <nvs_delete>
			if (rc >= 0) {
   37c0c:	2800      	cmp	r0, #0
   37c0e:	dbc2      	blt.n	37b96 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   37c10:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   37c14:	313f      	adds	r1, #63	; 0x3f
   37c16:	b289      	uxth	r1, r1
   37c18:	4650      	mov	r0, sl
   37c1a:	f7ff fe26 	bl	3786a <nvs_delete>
	if (rc < 0) {
   37c1e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   37c22:	e7b8      	b.n	37b96 <settings_nvs_save+0x88>

00037c24 <settings_nvs_backend_init>:
{
   37c24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   37c26:	f100 0608 	add.w	r6, r0, #8
   37c2a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   37c2c:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   37c2e:	4630      	mov	r0, r6
   37c30:	f7e9 f834 	bl	20c9c <nvs_init>
	if (rc) {
   37c34:	4605      	mov	r5, r0
   37c36:	b970      	cbnz	r0, 37c56 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   37c38:	2302      	movs	r3, #2
   37c3a:	f10d 0206 	add.w	r2, sp, #6
   37c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   37c42:	4630      	mov	r0, r6
   37c44:	f7ff fe15 	bl	37872 <nvs_read>
	if (rc < 0) {
   37c48:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   37c4a:	bfac      	ite	ge
   37c4c:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   37c50:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   37c54:	8723      	strh	r3, [r4, #56]	; 0x38
}
   37c56:	4628      	mov	r0, r5
   37c58:	b002      	add	sp, #8
   37c5a:	bd70      	pop	{r4, r5, r6, pc}

00037c5c <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   37c5c:	2200      	movs	r2, #0
   37c5e:	e9c0 2200 	strd	r2, r2, [r0]
   37c62:	6082      	str	r2, [r0, #8]
}
   37c64:	4770      	bx	lr

00037c66 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   37c66:	b538      	push	{r3, r4, r5, lr}
   37c68:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   37c6a:	42ab      	cmp	r3, r5
{
   37c6c:	4611      	mov	r1, r2
   37c6e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   37c70:	d804      	bhi.n	37c7c <_copy+0x16>
   37c72:	461a      	mov	r2, r3
   37c74:	f002 fc45 	bl	3a502 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   37c78:	4620      	mov	r0, r4
   37c7a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   37c7c:	2400      	movs	r4, #0
   37c7e:	e7fb      	b.n	37c78 <_copy+0x12>

00037c80 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   37c80:	f002 bc7a 	b.w	3a578 <memset>

00037c84 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   37c84:	09c3      	lsrs	r3, r0, #7
   37c86:	005a      	lsls	r2, r3, #1
   37c88:	4413      	add	r3, r2
   37c8a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   37c8e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   37c92:	b2c0      	uxtb	r0, r0
   37c94:	4770      	bx	lr

00037c96 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   37c96:	78cb      	ldrb	r3, [r1, #3]
   37c98:	7802      	ldrb	r2, [r0, #0]
   37c9a:	4053      	eors	r3, r2
   37c9c:	7003      	strb	r3, [r0, #0]
   37c9e:	884b      	ldrh	r3, [r1, #2]
   37ca0:	7842      	ldrb	r2, [r0, #1]
   37ca2:	4053      	eors	r3, r2
   37ca4:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   37ca6:	680a      	ldr	r2, [r1, #0]
   37ca8:	7883      	ldrb	r3, [r0, #2]
   37caa:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   37cae:	7083      	strb	r3, [r0, #2]
   37cb0:	680a      	ldr	r2, [r1, #0]
   37cb2:	78c3      	ldrb	r3, [r0, #3]
   37cb4:	4053      	eors	r3, r2
   37cb6:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   37cb8:	79cb      	ldrb	r3, [r1, #7]
   37cba:	7902      	ldrb	r2, [r0, #4]
   37cbc:	4053      	eors	r3, r2
   37cbe:	7103      	strb	r3, [r0, #4]
   37cc0:	88cb      	ldrh	r3, [r1, #6]
   37cc2:	7942      	ldrb	r2, [r0, #5]
   37cc4:	4053      	eors	r3, r2
   37cc6:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   37cc8:	684a      	ldr	r2, [r1, #4]
   37cca:	7983      	ldrb	r3, [r0, #6]
   37ccc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   37cd0:	7183      	strb	r3, [r0, #6]
   37cd2:	684a      	ldr	r2, [r1, #4]
   37cd4:	79c3      	ldrb	r3, [r0, #7]
   37cd6:	4053      	eors	r3, r2
   37cd8:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   37cda:	7acb      	ldrb	r3, [r1, #11]
   37cdc:	7a02      	ldrb	r2, [r0, #8]
   37cde:	4053      	eors	r3, r2
   37ce0:	7203      	strb	r3, [r0, #8]
   37ce2:	7a42      	ldrb	r2, [r0, #9]
   37ce4:	894b      	ldrh	r3, [r1, #10]
   37ce6:	4053      	eors	r3, r2
   37ce8:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   37cea:	688a      	ldr	r2, [r1, #8]
   37cec:	7a83      	ldrb	r3, [r0, #10]
   37cee:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   37cf2:	7283      	strb	r3, [r0, #10]
   37cf4:	688a      	ldr	r2, [r1, #8]
   37cf6:	7ac3      	ldrb	r3, [r0, #11]
   37cf8:	4053      	eors	r3, r2
   37cfa:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   37cfc:	7bcb      	ldrb	r3, [r1, #15]
   37cfe:	7b02      	ldrb	r2, [r0, #12]
   37d00:	4053      	eors	r3, r2
   37d02:	7303      	strb	r3, [r0, #12]
   37d04:	89cb      	ldrh	r3, [r1, #14]
   37d06:	7b42      	ldrb	r2, [r0, #13]
   37d08:	4053      	eors	r3, r2
   37d0a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   37d0c:	68ca      	ldr	r2, [r1, #12]
   37d0e:	7b83      	ldrb	r3, [r0, #14]
   37d10:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   37d14:	7383      	strb	r3, [r0, #14]
   37d16:	68ca      	ldr	r2, [r1, #12]
   37d18:	7bc3      	ldrb	r3, [r0, #15]
   37d1a:	4053      	eors	r3, r2
   37d1c:	73c3      	strb	r3, [r0, #15]
}
   37d1e:	4770      	bx	lr

00037d20 <shift_rows>:
{
   37d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   37d22:	7802      	ldrb	r2, [r0, #0]
   37d24:	f88d 2000 	strb.w	r2, [sp]
   37d28:	7942      	ldrb	r2, [r0, #5]
   37d2a:	f88d 2001 	strb.w	r2, [sp, #1]
   37d2e:	7a82      	ldrb	r2, [r0, #10]
   37d30:	f88d 2002 	strb.w	r2, [sp, #2]
   37d34:	7bc2      	ldrb	r2, [r0, #15]
   37d36:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   37d3a:	7902      	ldrb	r2, [r0, #4]
   37d3c:	f88d 2004 	strb.w	r2, [sp, #4]
   37d40:	7a42      	ldrb	r2, [r0, #9]
   37d42:	f88d 2005 	strb.w	r2, [sp, #5]
   37d46:	7b82      	ldrb	r2, [r0, #14]
   37d48:	f88d 2006 	strb.w	r2, [sp, #6]
   37d4c:	78c2      	ldrb	r2, [r0, #3]
   37d4e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   37d52:	7a02      	ldrb	r2, [r0, #8]
   37d54:	f88d 2008 	strb.w	r2, [sp, #8]
   37d58:	7b42      	ldrb	r2, [r0, #13]
   37d5a:	f88d 2009 	strb.w	r2, [sp, #9]
   37d5e:	7882      	ldrb	r2, [r0, #2]
   37d60:	f88d 200a 	strb.w	r2, [sp, #10]
   37d64:	79c2      	ldrb	r2, [r0, #7]
   37d66:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   37d6a:	7b02      	ldrb	r2, [r0, #12]
   37d6c:	f88d 200c 	strb.w	r2, [sp, #12]
   37d70:	7842      	ldrb	r2, [r0, #1]
   37d72:	7ac3      	ldrb	r3, [r0, #11]
   37d74:	f88d 200d 	strb.w	r2, [sp, #13]
   37d78:	7982      	ldrb	r2, [r0, #6]
   37d7a:	f88d 200e 	strb.w	r2, [sp, #14]
   37d7e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   37d82:	2310      	movs	r3, #16
   37d84:	466a      	mov	r2, sp
   37d86:	4619      	mov	r1, r3
   37d88:	f7ff ff6d 	bl	37c66 <_copy>
}
   37d8c:	b005      	add	sp, #20
   37d8e:	f85d fb04 	ldr.w	pc, [sp], #4

00037d92 <mult_row_column>:
{
   37d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37d94:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   37d96:	7808      	ldrb	r0, [r1, #0]
{
   37d98:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   37d9a:	f7ff ff73 	bl	37c84 <_double_byte>
   37d9e:	4605      	mov	r5, r0
   37da0:	7860      	ldrb	r0, [r4, #1]
   37da2:	f7ff ff6f 	bl	37c84 <_double_byte>
   37da6:	78a2      	ldrb	r2, [r4, #2]
   37da8:	7863      	ldrb	r3, [r4, #1]
   37daa:	4053      	eors	r3, r2
   37dac:	78e2      	ldrb	r2, [r4, #3]
   37dae:	4053      	eors	r3, r2
   37db0:	405d      	eors	r5, r3
   37db2:	4045      	eors	r5, r0
   37db4:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   37db6:	7860      	ldrb	r0, [r4, #1]
   37db8:	7827      	ldrb	r7, [r4, #0]
   37dba:	f7ff ff63 	bl	37c84 <_double_byte>
   37dbe:	4605      	mov	r5, r0
   37dc0:	78a0      	ldrb	r0, [r4, #2]
   37dc2:	f7ff ff5f 	bl	37c84 <_double_byte>
   37dc6:	78a3      	ldrb	r3, [r4, #2]
   37dc8:	405f      	eors	r7, r3
   37dca:	78e3      	ldrb	r3, [r4, #3]
   37dcc:	405f      	eors	r7, r3
   37dce:	407d      	eors	r5, r7
   37dd0:	4045      	eors	r5, r0
   37dd2:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   37dd4:	78a0      	ldrb	r0, [r4, #2]
   37dd6:	7865      	ldrb	r5, [r4, #1]
   37dd8:	7827      	ldrb	r7, [r4, #0]
   37dda:	f7ff ff53 	bl	37c84 <_double_byte>
   37dde:	406f      	eors	r7, r5
   37de0:	4605      	mov	r5, r0
   37de2:	78e0      	ldrb	r0, [r4, #3]
   37de4:	f7ff ff4e 	bl	37c84 <_double_byte>
   37de8:	78e3      	ldrb	r3, [r4, #3]
   37dea:	405f      	eors	r7, r3
   37dec:	407d      	eors	r5, r7
   37dee:	4045      	eors	r5, r0
   37df0:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   37df2:	7820      	ldrb	r0, [r4, #0]
   37df4:	f7ff ff46 	bl	37c84 <_double_byte>
   37df8:	7863      	ldrb	r3, [r4, #1]
   37dfa:	7825      	ldrb	r5, [r4, #0]
   37dfc:	405d      	eors	r5, r3
   37dfe:	78a3      	ldrb	r3, [r4, #2]
   37e00:	405d      	eors	r5, r3
   37e02:	4045      	eors	r5, r0
   37e04:	78e0      	ldrb	r0, [r4, #3]
   37e06:	f7ff ff3d 	bl	37c84 <_double_byte>
   37e0a:	b2ed      	uxtb	r5, r5
   37e0c:	4045      	eors	r5, r0
   37e0e:	70f5      	strb	r5, [r6, #3]
}
   37e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00037e12 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   37e12:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   37e14:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   37e16:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   37e18:	f912 3b10 	ldrsb.w	r3, [r2], #16
   37e1c:	2b00      	cmp	r3, #0
   37e1e:	bfb4      	ite	lt
   37e20:	2387      	movlt	r3, #135	; 0x87
   37e22:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   37e24:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   37e28:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   37e2c:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   37e2e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   37e32:	d002      	beq.n	37e3a <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   37e34:	7813      	ldrb	r3, [r2, #0]
   37e36:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   37e38:	e7f4      	b.n	37e24 <gf_double+0x12>
	}
}
   37e3a:	bd10      	pop	{r4, pc}

00037e3c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   37e3c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   37e3e:	b120      	cbz	r0, 37e4a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   37e40:	2258      	movs	r2, #88	; 0x58
   37e42:	2100      	movs	r1, #0
   37e44:	f7ff ff1c 	bl	37c80 <_set>
   37e48:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   37e4a:	bd08      	pop	{r3, pc}

00037e4c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   37e4c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   37e4e:	4604      	mov	r4, r0
   37e50:	b188      	cbz	r0, 37e76 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   37e52:	2210      	movs	r2, #16
   37e54:	2100      	movs	r1, #0
   37e56:	f7ff ff13 	bl	37c80 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   37e5a:	2210      	movs	r2, #16
   37e5c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   37e60:	2100      	movs	r1, #0
   37e62:	f7ff ff0d 	bl	37c80 <_set>
	s->leftover_offset = 0;
   37e66:	2300      	movs	r3, #0
   37e68:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   37e6a:	2200      	movs	r2, #0
   37e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   37e70:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   37e74:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   37e76:	bd10      	pop	{r4, pc}

00037e78 <tc_cmac_setup>:
{
   37e78:	b570      	push	{r4, r5, r6, lr}
   37e7a:	460d      	mov	r5, r1
   37e7c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   37e7e:	4604      	mov	r4, r0
   37e80:	b310      	cbz	r0, 37ec8 <tc_cmac_setup+0x50>
   37e82:	b311      	cbz	r1, 37eca <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   37e84:	2258      	movs	r2, #88	; 0x58
   37e86:	2100      	movs	r1, #0
   37e88:	f7ff fefa 	bl	37c80 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   37e8c:	4629      	mov	r1, r5
	s->sched = sched;
   37e8e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   37e90:	4630      	mov	r0, r6
   37e92:	f7e9 ffd5 	bl	21e40 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   37e96:	2210      	movs	r2, #16
   37e98:	2100      	movs	r1, #0
   37e9a:	4620      	mov	r0, r4
   37e9c:	f7ff fef0 	bl	37c80 <_set>
	gf_double (s->K1, s->iv);
   37ea0:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   37ea4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   37ea6:	4621      	mov	r1, r4
   37ea8:	4620      	mov	r0, r4
   37eaa:	f7ea f81b 	bl	21ee4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   37eae:	4621      	mov	r1, r4
   37eb0:	4628      	mov	r0, r5
   37eb2:	f7ff ffae 	bl	37e12 <gf_double>
	gf_double (s->K2, s->K1);
   37eb6:	4629      	mov	r1, r5
   37eb8:	f104 0020 	add.w	r0, r4, #32
   37ebc:	f7ff ffa9 	bl	37e12 <gf_double>
	tc_cmac_init(s);
   37ec0:	4620      	mov	r0, r4
   37ec2:	f7ff ffc3 	bl	37e4c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   37ec6:	2001      	movs	r0, #1
}
   37ec8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   37eca:	4608      	mov	r0, r1
   37ecc:	e7fc      	b.n	37ec8 <tc_cmac_setup+0x50>

00037ece <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   37ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37ed2:	460d      	mov	r5, r1
   37ed4:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   37ed6:	4604      	mov	r4, r0
   37ed8:	2800      	cmp	r0, #0
   37eda:	d062      	beq.n	37fa2 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   37edc:	b912      	cbnz	r2, 37ee4 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   37ede:	2001      	movs	r0, #1
}
   37ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   37ee4:	2900      	cmp	r1, #0
   37ee6:	d05c      	beq.n	37fa2 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   37ee8:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   37eec:	ea50 0301 	orrs.w	r3, r0, r1
   37ef0:	d057      	beq.n	37fa2 <tc_cmac_update+0xd4>
	s->countdown--;
   37ef2:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   37ef6:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   37efa:	f141 33ff 	adc.w	r3, r1, #4294967295
   37efe:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   37f02:	f1b8 0f00 	cmp.w	r8, #0
   37f06:	d02a      	beq.n	37f5e <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   37f08:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   37f0c:	f108 0030 	add.w	r0, r8, #48	; 0x30
   37f10:	42be      	cmp	r6, r7
   37f12:	4420      	add	r0, r4
   37f14:	d208      	bcs.n	37f28 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   37f16:	462a      	mov	r2, r5
   37f18:	4633      	mov	r3, r6
   37f1a:	4631      	mov	r1, r6
   37f1c:	f7ff fea3 	bl	37c66 <_copy>
			s->leftover_offset += data_length;
   37f20:	6c62      	ldr	r2, [r4, #68]	; 0x44
   37f22:	4432      	add	r2, r6
   37f24:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   37f26:	e7da      	b.n	37ede <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   37f28:	463b      	mov	r3, r7
   37f2a:	462a      	mov	r2, r5
   37f2c:	4639      	mov	r1, r7
   37f2e:	f7ff fe9a 	bl	37c66 <_copy>
		data_length -= remaining_space;
   37f32:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   37f34:	2300      	movs	r3, #0
   37f36:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   37f38:	4446      	add	r6, r8
		data += remaining_space;
   37f3a:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37f3c:	1e63      	subs	r3, r4, #1
   37f3e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   37f42:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   37f46:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37f4a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   37f4c:	ea82 0200 	eor.w	r2, r2, r0
   37f50:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37f52:	d1f6      	bne.n	37f42 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   37f54:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   37f56:	4621      	mov	r1, r4
   37f58:	4620      	mov	r0, r4
   37f5a:	f7e9 ffc3 	bl	21ee4 <tc_aes_encrypt>
   37f5e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   37f62:	2e10      	cmp	r6, #16
   37f64:	d80a      	bhi.n	37f7c <tc_cmac_update+0xae>
	if (data_length > 0) {
   37f66:	2e00      	cmp	r6, #0
   37f68:	d0b9      	beq.n	37ede <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   37f6a:	4633      	mov	r3, r6
   37f6c:	462a      	mov	r2, r5
   37f6e:	4631      	mov	r1, r6
   37f70:	f104 0030 	add.w	r0, r4, #48	; 0x30
   37f74:	f7ff fe77 	bl	37c66 <_copy>
		s->leftover_offset = data_length;
   37f78:	6466      	str	r6, [r4, #68]	; 0x44
   37f7a:	e7b0      	b.n	37ede <tc_cmac_update+0x10>
   37f7c:	1e63      	subs	r3, r4, #1
   37f7e:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   37f80:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   37f84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37f88:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   37f8a:	ea82 0200 	eor.w	r2, r2, r0
   37f8e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37f90:	d1f6      	bne.n	37f80 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   37f92:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   37f94:	4621      	mov	r1, r4
   37f96:	4620      	mov	r0, r4
   37f98:	f7e9 ffa4 	bl	21ee4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   37f9c:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   37f9e:	3e10      	subs	r6, #16
   37fa0:	e7df      	b.n	37f62 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   37fa2:	2000      	movs	r0, #0
   37fa4:	e79c      	b.n	37ee0 <tc_cmac_update+0x12>

00037fa6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   37fa6:	b570      	push	{r4, r5, r6, lr}
   37fa8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   37faa:	4605      	mov	r5, r0
   37fac:	b1e8      	cbz	r0, 37fea <tc_cmac_final+0x44>
   37fae:	b369      	cbz	r1, 3800c <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   37fb0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   37fb2:	2a10      	cmp	r2, #16
   37fb4:	d11a      	bne.n	37fec <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   37fb6:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37fb8:	1e63      	subs	r3, r4, #1
   37fba:	3901      	subs	r1, #1
   37fbc:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   37fc0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   37fc4:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   37fc8:	4072      	eors	r2, r6
   37fca:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37fce:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   37fd0:	ea82 0206 	eor.w	r2, r2, r6
   37fd4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37fd6:	d1f3      	bne.n	37fc0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   37fd8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   37fda:	4621      	mov	r1, r4
   37fdc:	4628      	mov	r0, r5
   37fde:	f7e9 ff81 	bl	21ee4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   37fe2:	4620      	mov	r0, r4
   37fe4:	f7ff ff2a 	bl	37e3c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   37fe8:	2001      	movs	r0, #1
}
   37fea:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   37fec:	f102 0030 	add.w	r0, r2, #48	; 0x30
   37ff0:	2100      	movs	r1, #0
   37ff2:	f1c2 0210 	rsb	r2, r2, #16
   37ff6:	4420      	add	r0, r4
   37ff8:	f7ff fe42 	bl	37c80 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   37ffc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   37ffe:	4423      	add	r3, r4
   38000:	2280      	movs	r2, #128	; 0x80
   38002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   38006:	f104 0120 	add.w	r1, r4, #32
   3800a:	e7d5      	b.n	37fb8 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   3800c:	4608      	mov	r0, r1
   3800e:	e7ec      	b.n	37fea <tc_cmac_final+0x44>

00038010 <abort_function>:
{
   38010:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   38012:	2000      	movs	r0, #0
   38014:	f7e8 f9ea 	bl	203ec <sys_reboot>

00038018 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   38018:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   3801a:	6800      	ldr	r0, [r0, #0]
   3801c:	f7ea b8b4 	b.w	22188 <z_arm_fatal_error>

00038020 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   38020:	2100      	movs	r1, #0
   38022:	2001      	movs	r0, #1
   38024:	f7ea b8b0 	b.w	22188 <z_arm_fatal_error>

00038028 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   38028:	b508      	push	{r3, lr}
	handler();
   3802a:	f7ea f95d 	bl	222e8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3802e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   38032:	f7ea ba39 	b.w	224a8 <z_arm_exc_exit>

00038036 <_stdout_hook_default>:
}
   38036:	f04f 30ff 	mov.w	r0, #4294967295
   3803a:	4770      	bx	lr

0003803c <_stdin_hook_default>:
}
   3803c:	2000      	movs	r0, #0
   3803e:	4770      	bx	lr

00038040 <_read>:
{
   38040:	4608      	mov	r0, r1
   38042:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   38044:	f7ea bed6 	b.w	22df4 <z_impl_zephyr_read_stdin>

00038048 <_write>:
{
   38048:	4608      	mov	r0, r1
   3804a:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3804c:	f7ea bee6 	b.w	22e1c <z_impl_zephyr_write_stdout>

00038050 <_close>:
   38050:	f04f 30ff 	mov.w	r0, #4294967295
   38054:	4770      	bx	lr

00038056 <_lseek>:
}
   38056:	2000      	movs	r0, #0
   38058:	4770      	bx	lr

0003805a <_isatty>:
}
   3805a:	2802      	cmp	r0, #2
   3805c:	bfcc      	ite	gt
   3805e:	2000      	movgt	r0, #0
   38060:	2001      	movle	r0, #1
   38062:	4770      	bx	lr

00038064 <_kill>:
}
   38064:	2000      	movs	r0, #0
   38066:	4770      	bx	lr

00038068 <_getpid>:
}
   38068:	2000      	movs	r0, #0
   3806a:	4770      	bx	lr

0003806c <_fstat>:
	st->st_mode = S_IFCHR;
   3806c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   38070:	604b      	str	r3, [r1, #4]
}
   38072:	2000      	movs	r0, #0
   38074:	4770      	bx	lr

00038076 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   38076:	b084      	sub	sp, #16
   38078:	ab04      	add	r3, sp, #16
   3807a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   3807e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   38082:	2b06      	cmp	r3, #6
   38084:	d108      	bne.n	38098 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   38086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3808a:	2201      	movs	r2, #1
   3808c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   38090:	f3bf 8f4f 	dsb	sy
        __WFE();
   38094:	bf20      	wfe
    while (true)
   38096:	e7fd      	b.n	38094 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   38098:	b004      	add	sp, #16
   3809a:	4770      	bx	lr

0003809c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   3809c:	b084      	sub	sp, #16
   3809e:	ab04      	add	r3, sp, #16
   380a0:	e903 0007 	stmdb	r3, {r0, r1, r2}
   380a4:	2300      	movs	r3, #0
   380a6:	f383 8811 	msr	BASEPRI, r3
   380aa:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   380ae:	b004      	add	sp, #16
   380b0:	4770      	bx	lr

000380b2 <bt_settings_decode_key>:
{
   380b2:	b570      	push	{r4, r5, r6, lr}
   380b4:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   380b6:	2100      	movs	r1, #0
{
   380b8:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   380ba:	f7ff fd06 	bl	37aca <settings_name_next>
   380be:	280d      	cmp	r0, #13
   380c0:	d118      	bne.n	380f4 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   380c2:	7b23      	ldrb	r3, [r4, #12]
   380c4:	2b30      	cmp	r3, #48	; 0x30
   380c6:	d111      	bne.n	380ec <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   380c8:	2300      	movs	r3, #0
   380ca:	702b      	strb	r3, [r5, #0]
   380cc:	f104 060c 	add.w	r6, r4, #12
   380d0:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   380d2:	462a      	mov	r2, r5
   380d4:	4620      	mov	r0, r4
   380d6:	2301      	movs	r3, #1
   380d8:	2102      	movs	r1, #2
   380da:	3402      	adds	r4, #2
   380dc:	f7fe ffba 	bl	37054 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   380e0:	42b4      	cmp	r4, r6
   380e2:	f105 35ff 	add.w	r5, r5, #4294967295
   380e6:	d1f4      	bne.n	380d2 <bt_settings_decode_key+0x20>
	return 0;
   380e8:	2000      	movs	r0, #0
}
   380ea:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   380ec:	2b31      	cmp	r3, #49	; 0x31
   380ee:	d101      	bne.n	380f4 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   380f0:	2301      	movs	r3, #1
   380f2:	e7ea      	b.n	380ca <bt_settings_decode_key+0x18>
		return -EINVAL;
   380f4:	f06f 0015 	mvn.w	r0, #21
   380f8:	e7f7      	b.n	380ea <bt_settings_decode_key+0x38>

000380fa <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   380fa:	b510      	push	{r4, lr}
   380fc:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   380fe:	7801      	ldrb	r1, [r0, #0]
   38100:	7822      	ldrb	r2, [r4, #0]
   38102:	428a      	cmp	r2, r1
{
   38104:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   38106:	d00e      	beq.n	38126 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   38108:	4669      	mov	r1, sp
   3810a:	f7eb f8fd 	bl	23308 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   3810e:	a905      	add	r1, sp, #20
   38110:	4620      	mov	r0, r4
   38112:	f7eb f8f9 	bl	23308 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   38116:	2210      	movs	r2, #16
   38118:	f10d 0115 	add.w	r1, sp, #21
   3811c:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   38120:	f002 f9e1 	bl	3a4e6 <memcmp>
   38124:	e007      	b.n	38136 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   38126:	2a01      	cmp	r2, #1
   38128:	d007      	beq.n	3813a <bt_uuid_cmp+0x40>
   3812a:	2a02      	cmp	r2, #2
   3812c:	d008      	beq.n	38140 <bt_uuid_cmp+0x46>
   3812e:	b95a      	cbnz	r2, 38148 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   38130:	8840      	ldrh	r0, [r0, #2]
   38132:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   38134:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   38136:	b00a      	add	sp, #40	; 0x28
   38138:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   3813a:	6840      	ldr	r0, [r0, #4]
   3813c:	6863      	ldr	r3, [r4, #4]
   3813e:	e7f9      	b.n	38134 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   38140:	2210      	movs	r2, #16
   38142:	1c61      	adds	r1, r4, #1
   38144:	3001      	adds	r0, #1
   38146:	e7eb      	b.n	38120 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   38148:	f06f 0015 	mvn.w	r0, #21
   3814c:	e7f3      	b.n	38136 <bt_uuid_cmp+0x3c>

0003814e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   3814e:	2a04      	cmp	r2, #4
{
   38150:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   38152:	d00d      	beq.n	38170 <bt_uuid_create+0x22>
   38154:	2a10      	cmp	r2, #16
   38156:	d019      	beq.n	3818c <bt_uuid_create+0x3e>
   38158:	2a02      	cmp	r2, #2
   3815a:	f04f 0300 	mov.w	r3, #0
   3815e:	d121      	bne.n	381a4 <bt_uuid_create+0x56>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   38160:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   38162:	784a      	ldrb	r2, [r1, #1]
   38164:	780b      	ldrb	r3, [r1, #0]
   38166:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   3816a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   3816c:	2001      	movs	r0, #1
}
   3816e:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   38170:	2301      	movs	r3, #1
   38172:	7003      	strb	r3, [r0, #0]
   38174:	788a      	ldrb	r2, [r1, #2]
   38176:	78cc      	ldrb	r4, [r1, #3]
   38178:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   3817a:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   3817e:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   38180:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   38184:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   38188:	6042      	str	r2, [r0, #4]
		break;
   3818a:	e7ef      	b.n	3816c <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   3818c:	2302      	movs	r3, #2
   3818e:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   38192:	f101 0310 	add.w	r3, r1, #16
   38196:	f851 2b04 	ldr.w	r2, [r1], #4
   3819a:	f840 2b04 	str.w	r2, [r0], #4
   3819e:	4299      	cmp	r1, r3
   381a0:	d1f9      	bne.n	38196 <bt_uuid_create+0x48>
   381a2:	e7e3      	b.n	3816c <bt_uuid_create+0x1e>
	switch (data_len) {
   381a4:	4618      	mov	r0, r3
   381a6:	e7e2      	b.n	3816e <bt_uuid_create+0x20>

000381a8 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   381a8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   381aa:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   381ac:	2106      	movs	r1, #6
{
   381ae:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   381b0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   381b4:	f7f5 f89a 	bl	2d2ec <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   381b8:	b918      	cbnz	r0, 381c2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   381ba:	79a3      	ldrb	r3, [r4, #6]
   381bc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   381c0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   381c2:	bd10      	pop	{r4, pc}

000381c4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   381c4:	280f      	cmp	r0, #15
   381c6:	d806      	bhi.n	381d6 <bt_hci_evt_get_flags+0x12>
   381c8:	280d      	cmp	r0, #13
   381ca:	d80b      	bhi.n	381e4 <bt_hci_evt_get_flags+0x20>
   381cc:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   381ce:	bf14      	ite	ne
   381d0:	2002      	movne	r0, #2
   381d2:	2003      	moveq	r0, #3
   381d4:	4770      	bx	lr
	switch (evt) {
   381d6:	2813      	cmp	r0, #19
   381d8:	d004      	beq.n	381e4 <bt_hci_evt_get_flags+0x20>
   381da:	281a      	cmp	r0, #26
   381dc:	bf14      	ite	ne
   381de:	2002      	movne	r0, #2
   381e0:	2001      	moveq	r0, #1
   381e2:	4770      	bx	lr
   381e4:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   381e6:	4770      	bx	lr

000381e8 <atomic_or>:
{
   381e8:	4603      	mov	r3, r0
}
   381ea:	f3bf 8f5b 	dmb	ish
   381ee:	e853 0f00 	ldrex	r0, [r3]
   381f2:	ea40 0201 	orr.w	r2, r0, r1
   381f6:	e843 2c00 	strex	ip, r2, [r3]
   381fa:	f1bc 0f00 	cmp.w	ip, #0
   381fe:	d1f6      	bne.n	381ee <atomic_or+0x6>
   38200:	f3bf 8f5b 	dmb	ish
   38204:	4770      	bx	lr

00038206 <bt_addr_copy>:
   38206:	680b      	ldr	r3, [r1, #0]
   38208:	6003      	str	r3, [r0, #0]
   3820a:	888b      	ldrh	r3, [r1, #4]
   3820c:	8083      	strh	r3, [r0, #4]
}
   3820e:	4770      	bx	lr

00038210 <bt_addr_le_copy>:
   38210:	680b      	ldr	r3, [r1, #0]
   38212:	6003      	str	r3, [r0, #0]
   38214:	888b      	ldrh	r3, [r1, #4]
   38216:	8083      	strh	r3, [r0, #4]
   38218:	798b      	ldrb	r3, [r1, #6]
   3821a:	7183      	strb	r3, [r0, #6]
}
   3821c:	4770      	bx	lr

0003821e <bt_hci_disconnect>:
{
   3821e:	b570      	push	{r4, r5, r6, lr}
   38220:	4606      	mov	r6, r0
   38222:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   38224:	f240 4006 	movw	r0, #1030	; 0x406
   38228:	2103      	movs	r1, #3
   3822a:	f7eb fca7 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   3822e:	4604      	mov	r4, r0
   38230:	b168      	cbz	r0, 3824e <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   38232:	2103      	movs	r1, #3
   38234:	3008      	adds	r0, #8
   38236:	f7f1 fefd 	bl	2a034 <net_buf_simple_add>
	disconn->reason = reason;
   3823a:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   3823c:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   3823e:	4621      	mov	r1, r4
   38240:	2200      	movs	r2, #0
}
   38242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   38246:	f240 4006 	movw	r0, #1030	; 0x406
   3824a:	f7eb bcdf 	b.w	23c0c <bt_hci_cmd_send_sync>
}
   3824e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38252:	bd70      	pop	{r4, r5, r6, pc}

00038254 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   38254:	8802      	ldrh	r2, [r0, #0]
   38256:	8843      	ldrh	r3, [r0, #2]
   38258:	429a      	cmp	r2, r3
{
   3825a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   3825c:	d818      	bhi.n	38290 <bt_le_conn_params_valid+0x3c>
   3825e:	2a05      	cmp	r2, #5
   38260:	d916      	bls.n	38290 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   38262:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   38266:	d813      	bhi.n	38290 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   38268:	8884      	ldrh	r4, [r0, #4]
   3826a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   3826e:	d20f      	bcs.n	38290 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   38270:	88c1      	ldrh	r1, [r0, #6]
   38272:	f1a1 020a 	sub.w	r2, r1, #10
   38276:	b292      	uxth	r2, r2
   38278:	f640 4076 	movw	r0, #3190	; 0xc76
   3827c:	4282      	cmp	r2, r0
   3827e:	d807      	bhi.n	38290 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   38280:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   38284:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   38288:	bf34      	ite	cc
   3828a:	2001      	movcc	r0, #1
   3828c:	2000      	movcs	r0, #0
}
   3828e:	bd10      	pop	{r4, pc}
		return false;
   38290:	2000      	movs	r0, #0
   38292:	e7fc      	b.n	3828e <bt_le_conn_params_valid+0x3a>

00038294 <bt_le_set_phy>:
{
   38294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38298:	4680      	mov	r8, r0
   3829a:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   3829c:	f242 0032 	movw	r0, #8242	; 0x2032
   382a0:	2107      	movs	r1, #7
{
   382a2:	f89d 9020 	ldrb.w	r9, [sp, #32]
   382a6:	4616      	mov	r6, r2
   382a8:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   382aa:	f7eb fc67 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   382ae:	4604      	mov	r4, r0
   382b0:	b190      	cbz	r0, 382d8 <bt_le_set_phy+0x44>
   382b2:	2107      	movs	r1, #7
   382b4:	3008      	adds	r0, #8
   382b6:	f7f1 febd 	bl	2a034 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   382ba:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   382be:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   382c0:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   382c2:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   382c4:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   382c6:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   382ca:	4621      	mov	r1, r4
   382cc:	f242 0032 	movw	r0, #8242	; 0x2032
}
   382d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   382d4:	f7eb bd1a 	b.w	23d0c <bt_hci_cmd_send>
}
   382d8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   382dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000382e0 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   382e0:	6880      	ldr	r0, [r0, #8]
   382e2:	f7eb bda3 	b.w	23e2c <bt_hci_le_enh_conn_complete>

000382e6 <le_legacy_conn_complete>:
{
   382e6:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   382e8:	6881      	ldr	r1, [r0, #8]
{
   382ea:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   382ec:	780b      	ldrb	r3, [r1, #0]
   382ee:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   382f2:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   382f6:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   382fa:	78cb      	ldrb	r3, [r1, #3]
   382fc:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   38300:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   38304:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   38308:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   3830c:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   38310:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   38314:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   38318:	7c4b      	ldrb	r3, [r1, #17]
   3831a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   3831e:	a803      	add	r0, sp, #12
   38320:	3104      	adds	r1, #4
   38322:	f7ff ff75 	bl	38210 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   38326:	2200      	movs	r2, #0
   38328:	4669      	mov	r1, sp
   3832a:	f10d 0013 	add.w	r0, sp, #19
   3832e:	9200      	str	r2, [sp, #0]
   38330:	f8ad 2004 	strh.w	r2, [sp, #4]
   38334:	f7ff ff67 	bl	38206 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   38338:	4669      	mov	r1, sp
   3833a:	f10d 0019 	add.w	r0, sp, #25
   3833e:	9200      	str	r2, [sp, #0]
   38340:	f8ad 2004 	strh.w	r2, [sp, #4]
   38344:	f7ff ff5f 	bl	38206 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   38348:	a802      	add	r0, sp, #8
   3834a:	f7eb fd6f 	bl	23e2c <bt_hci_le_enh_conn_complete>
}
   3834e:	b00b      	add	sp, #44	; 0x2c
   38350:	f85d fb04 	ldr.w	pc, [sp], #4

00038354 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   38354:	2000      	movs	r0, #0
   38356:	4770      	bx	lr

00038358 <bt_addr_copy>:
   38358:	680b      	ldr	r3, [r1, #0]
   3835a:	6003      	str	r3, [r0, #0]
   3835c:	888b      	ldrh	r3, [r1, #4]
   3835e:	8083      	strh	r3, [r0, #4]
}
   38360:	4770      	bx	lr

00038362 <bt_addr_le_copy>:
   38362:	680b      	ldr	r3, [r1, #0]
   38364:	6003      	str	r3, [r0, #0]
   38366:	888b      	ldrh	r3, [r1, #4]
   38368:	8083      	strh	r3, [r0, #4]
   3836a:	798b      	ldrb	r3, [r1, #6]
   3836c:	7183      	strb	r3, [r0, #6]
}
   3836e:	4770      	bx	lr

00038370 <bt_lookup_id_addr>:
}
   38370:	4608      	mov	r0, r1
   38372:	4770      	bx	lr

00038374 <bt_id_set_adv_private_addr>:
{
   38374:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   38376:	2106      	movs	r1, #6
   38378:	4668      	mov	r0, sp
   3837a:	f7f4 ffb7 	bl	2d2ec <bt_rand>
	if (err) {
   3837e:	b940      	cbnz	r0, 38392 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   38380:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   38384:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   38386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3838a:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   3838e:	f7ec fb75 	bl	24a7c <set_random_address>
}
   38392:	b003      	add	sp, #12
   38394:	f85d fb04 	ldr.w	pc, [sp], #4

00038398 <bt_id_adv_random_addr_check>:
}
   38398:	2001      	movs	r0, #1
   3839a:	4770      	bx	lr

0003839c <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   3839c:	2000      	movs	r0, #0
   3839e:	4770      	bx	lr

000383a0 <get_adv_channel_map>:
{
   383a0:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   383a2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   383a6:	bf0c      	ite	eq
   383a8:	2007      	moveq	r0, #7
   383aa:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   383ac:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   383ae:	bf48      	it	mi
   383b0:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   383b4:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   383b6:	bf48      	it	mi
   383b8:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   383bc:	4770      	bx	lr

000383be <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   383be:	f3bf 8f5b 	dmb	ish
   383c2:	6800      	ldr	r0, [r0, #0]
   383c4:	f3bf 8f5b 	dmb	ish
}
   383c8:	4770      	bx	lr

000383ca <atomic_and>:
{
   383ca:	4603      	mov	r3, r0
}
   383cc:	f3bf 8f5b 	dmb	ish
   383d0:	e853 0f00 	ldrex	r0, [r3]
   383d4:	ea00 0201 	and.w	r2, r0, r1
   383d8:	e843 2c00 	strex	ip, r2, [r3]
   383dc:	f1bc 0f00 	cmp.w	ip, #0
   383e0:	d1f6      	bne.n	383d0 <atomic_and+0x6>
   383e2:	f3bf 8f5b 	dmb	ish
   383e6:	4770      	bx	lr

000383e8 <bt_addr_le_copy>:
   383e8:	680b      	ldr	r3, [r1, #0]
   383ea:	6003      	str	r3, [r0, #0]
   383ec:	888b      	ldrh	r3, [r1, #4]
   383ee:	8083      	strh	r3, [r0, #4]
   383f0:	798b      	ldrb	r3, [r1, #6]
   383f2:	7183      	strb	r3, [r0, #6]
   383f4:	4770      	bx	lr

000383f6 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   383f6:	2301      	movs	r3, #1
{
   383f8:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   383fa:	fa03 f101 	lsl.w	r1, r3, r1
{
   383fe:	4604      	mov	r4, r0
	if (val) {
   38400:	b162      	cbz	r2, 3841c <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   38402:	f3bf 8f5b 	dmb	ish
   38406:	e854 3f00 	ldrex	r3, [r4]
   3840a:	430b      	orrs	r3, r1
   3840c:	e844 3200 	strex	r2, r3, [r4]
   38410:	2a00      	cmp	r2, #0
   38412:	d1f8      	bne.n	38406 <atomic_set_bit_to+0x10>
   38414:	f3bf 8f5b 	dmb	ish
	}
}
   38418:	bc10      	pop	{r4}
   3841a:	4770      	bx	lr
   3841c:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3841e:	43c9      	mvns	r1, r1
   38420:	f7ff bfd3 	b.w	383ca <atomic_and>

00038424 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   38424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38428:	b087      	sub	sp, #28
   3842a:	4605      	mov	r5, r0
   3842c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   38430:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   38434:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   38438:	460c      	mov	r4, r1
   3843a:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   3843c:	2100      	movs	r1, #0
   3843e:	2210      	movs	r2, #16
   38440:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   38442:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   38444:	f002 f898 	bl	3a578 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   38448:	b186      	cbz	r6, 3846c <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   3844a:	f7ec faf9 	bl	24a40 <bt_get_name>
   3844e:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   38450:	2c00      	cmp	r4, #0
   38452:	d139      	bne.n	384c8 <le_adv_update.constprop.0+0xa4>
   38454:	2f00      	cmp	r7, #0
   38456:	d142      	bne.n	384de <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   38458:	4658      	mov	r0, fp
   3845a:	f7df ffa5 	bl	183a8 <strlen>
   3845e:	2309      	movs	r3, #9
   38460:	f88d 3000 	strb.w	r3, [sp]
   38464:	f88d 0001 	strb.w	r0, [sp, #1]
   38468:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   3846c:	2e01      	cmp	r6, #1
			d_len = 2;
   3846e:	bf0c      	ite	eq
   38470:	2202      	moveq	r2, #2
		d_len = 1;
   38472:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   38474:	a902      	add	r1, sp, #8
   38476:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   3847a:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   3847e:	bf04      	itt	eq
   38480:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   38484:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   38486:	f7ec fd31 	bl	24eec <hci_set_ad>
		if (err) {
   3848a:	4604      	mov	r4, r0
   3848c:	b978      	cbnz	r0, 384ae <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   3848e:	f1ba 0f00 	cmp.w	sl, #0
   38492:	d126      	bne.n	384e2 <le_adv_update.constprop.0+0xbe>
   38494:	3510      	adds	r5, #16
   38496:	f3bf 8f5b 	dmb	ish
   3849a:	e855 3f00 	ldrex	r3, [r5]
   3849e:	f043 0304 	orr.w	r3, r3, #4
   384a2:	e845 3200 	strex	r2, r3, [r5]
   384a6:	2a00      	cmp	r2, #0
   384a8:	d1f7      	bne.n	3849a <le_adv_update.constprop.0+0x76>
   384aa:	f3bf 8f5b 	dmb	ish
}
   384ae:	4620      	mov	r0, r4
   384b0:	b007      	add	sp, #28
   384b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   384b6:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   384ba:	3a08      	subs	r2, #8
   384bc:	2a01      	cmp	r2, #1
   384be:	d925      	bls.n	3850c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   384c0:	3301      	adds	r3, #1
   384c2:	4598      	cmp	r8, r3
   384c4:	d1f7      	bne.n	384b6 <le_adv_update.constprop.0+0x92>
   384c6:	e7c5      	b.n	38454 <le_adv_update.constprop.0+0x30>
   384c8:	2300      	movs	r3, #0
   384ca:	e7fa      	b.n	384c2 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   384cc:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   384d0:	3a08      	subs	r2, #8
   384d2:	2a01      	cmp	r2, #1
   384d4:	d91a      	bls.n	3850c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   384d6:	3301      	adds	r3, #1
   384d8:	4599      	cmp	r9, r3
   384da:	d1f7      	bne.n	384cc <le_adv_update.constprop.0+0xa8>
   384dc:	e7bc      	b.n	38458 <le_adv_update.constprop.0+0x34>
   384de:	2300      	movs	r3, #0
   384e0:	e7fa      	b.n	384d8 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   384e2:	2e02      	cmp	r6, #2
   384e4:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   384e8:	bf08      	it	eq
   384ea:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   384ec:	a902      	add	r1, sp, #8
			d_len = 2;
   384ee:	bf08      	it	eq
   384f0:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   384f2:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   384f6:	bf08      	it	eq
   384f8:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   384fc:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   38500:	f7ec fcf4 	bl	24eec <hci_set_ad>
		if (err) {
   38504:	2800      	cmp	r0, #0
   38506:	d0c5      	beq.n	38494 <le_adv_update.constprop.0+0x70>
   38508:	4604      	mov	r4, r0
   3850a:	e7d0      	b.n	384ae <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   3850c:	f06f 0415 	mvn.w	r4, #21
   38510:	e7cd      	b.n	384ae <le_adv_update.constprop.0+0x8a>

00038512 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   38512:	6843      	ldr	r3, [r0, #4]
   38514:	f013 0008 	ands.w	r0, r3, #8
   38518:	d00a      	beq.n	38530 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   3851a:	035a      	lsls	r2, r3, #13
   3851c:	d407      	bmi.n	3852e <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   3851e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   38522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		return ADV_NAME_TYPE_SD;
   38526:	bf0c      	ite	eq
   38528:	2001      	moveq	r0, #1
   3852a:	2002      	movne	r0, #2
   3852c:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   3852e:	2001      	movs	r0, #1
}
   38530:	4770      	bx	lr

00038532 <bt_le_adv_set_enable_legacy>:
{
   38532:	b570      	push	{r4, r5, r6, lr}
   38534:	4606      	mov	r6, r0
   38536:	b086      	sub	sp, #24
   38538:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   3853a:	f242 000a 	movw	r0, #8202	; 0x200a
   3853e:	2101      	movs	r1, #1
   38540:	f7eb fb1c 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   38544:	4604      	mov	r4, r0
   38546:	b1b0      	cbz	r0, 38576 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   38548:	3008      	adds	r0, #8
   3854a:	b195      	cbz	r5, 38572 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   3854c:	2101      	movs	r1, #1
   3854e:	f001 f8eb 	bl	39728 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   38552:	f106 0210 	add.w	r2, r6, #16
   38556:	a903      	add	r1, sp, #12
   38558:	4620      	mov	r0, r4
   3855a:	9500      	str	r5, [sp, #0]
   3855c:	2306      	movs	r3, #6
   3855e:	f7eb fafb 	bl	23b58 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   38562:	2200      	movs	r2, #0
   38564:	4621      	mov	r1, r4
   38566:	f242 000a 	movw	r0, #8202	; 0x200a
   3856a:	f7eb fb4f 	bl	23c0c <bt_hci_cmd_send_sync>
}
   3856e:	b006      	add	sp, #24
   38570:	bd70      	pop	{r4, r5, r6, pc}
   38572:	4629      	mov	r1, r5
   38574:	e7eb      	b.n	3854e <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   38576:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3857a:	e7f8      	b.n	3856e <bt_le_adv_set_enable_legacy+0x3c>

0003857c <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   3857c:	3018      	adds	r0, #24
   3857e:	f7f8 b9e1 	b.w	30944 <k_work_cancel_delayable>

00038582 <tx_notify>:
{
   38582:	b570      	push	{r4, r5, r6, lr}
   38584:	4604      	mov	r4, r0
	__asm__ volatile(
   38586:	f04f 0240 	mov.w	r2, #64	; 0x40
   3858a:	f3ef 8311 	mrs	r3, BASEPRI
   3858e:	f382 8812 	msr	BASEPRI_MAX, r2
   38592:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   38596:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   38598:	b920      	cbnz	r0, 385a4 <tx_notify+0x22>
	__asm__ volatile(
   3859a:	f383 8811 	msr	BASEPRI, r3
   3859e:	f3bf 8f6f 	isb	sy
}
   385a2:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   385a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   385a6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   385a8:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   385aa:	4288      	cmp	r0, r1
	list->tail = node;
   385ac:	bf08      	it	eq
   385ae:	6262      	streq	r2, [r4, #36]	; 0x24
   385b0:	f383 8811 	msr	BASEPRI, r3
   385b4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   385b8:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   385bc:	f7ec ff5a 	bl	25474 <tx_free>
		cb(conn, user_data);
   385c0:	4631      	mov	r1, r6
   385c2:	4620      	mov	r0, r4
   385c4:	47a8      	blx	r5
	while (1) {
   385c6:	e7de      	b.n	38586 <tx_notify+0x4>

000385c8 <tx_complete_work>:
	tx_notify(conn);
   385c8:	3828      	subs	r0, #40	; 0x28
   385ca:	f7ff bfda 	b.w	38582 <tx_notify>

000385ce <bt_conn_reset_rx_state>:
{
   385ce:	b510      	push	{r4, lr}
   385d0:	4604      	mov	r4, r0
	if (!conn->rx) {
   385d2:	6900      	ldr	r0, [r0, #16]
   385d4:	b118      	cbz	r0, 385de <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   385d6:	f7f1 fbfd 	bl	29dd4 <net_buf_unref>
	conn->rx = NULL;
   385da:	2300      	movs	r3, #0
   385dc:	6123      	str	r3, [r4, #16]
}
   385de:	bd10      	pop	{r4, pc}

000385e0 <bt_conn_ref>:
{
   385e0:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   385e2:	f100 02c8 	add.w	r2, r0, #200	; 0xc8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   385e6:	f3bf 8f5b 	dmb	ish
   385ea:	6813      	ldr	r3, [r2, #0]
   385ec:	f3bf 8f5b 	dmb	ish
		if (!old) {
   385f0:	b17b      	cbz	r3, 38612 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   385f2:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   385f6:	1c59      	adds	r1, r3, #1
   385f8:	e852 4f00 	ldrex	r4, [r2]
   385fc:	429c      	cmp	r4, r3
   385fe:	d104      	bne.n	3860a <bt_conn_ref+0x2a>
   38600:	e842 1c00 	strex	ip, r1, [r2]
   38604:	f1bc 0f00 	cmp.w	ip, #0
   38608:	d1f6      	bne.n	385f8 <bt_conn_ref+0x18>
   3860a:	f3bf 8f5b 	dmb	ish
   3860e:	d1ea      	bne.n	385e6 <bt_conn_ref+0x6>
}
   38610:	bd10      	pop	{r4, pc}
			return NULL;
   38612:	4618      	mov	r0, r3
   38614:	e7fc      	b.n	38610 <bt_conn_ref+0x30>

00038616 <conn_lookup_handle>:
{
   38616:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3861a:	4607      	mov	r7, r0
   3861c:	460e      	mov	r6, r1
   3861e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   38620:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   38622:	f04f 09d0 	mov.w	r9, #208	; 0xd0
	for (i = 0; i < size; i++) {
   38626:	42b4      	cmp	r4, r6
   38628:	d103      	bne.n	38632 <conn_lookup_handle+0x1c>
	return NULL;
   3862a:	2300      	movs	r3, #0
}
   3862c:	4618      	mov	r0, r3
   3862e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   38632:	fb09 7004 	mla	r0, r9, r4, r7
   38636:	f7ff ffd3 	bl	385e0 <bt_conn_ref>
   3863a:	4603      	mov	r3, r0
		if (!conn) {
   3863c:	b158      	cbz	r0, 38656 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   3863e:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   38640:	2d01      	cmp	r5, #1
   38642:	d002      	beq.n	3864a <conn_lookup_handle+0x34>
   38644:	3d07      	subs	r5, #7
   38646:	2d01      	cmp	r5, #1
   38648:	d803      	bhi.n	38652 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   3864a:	881a      	ldrh	r2, [r3, #0]
   3864c:	4542      	cmp	r2, r8
   3864e:	d0ed      	beq.n	3862c <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   38650:	4618      	mov	r0, r3
   38652:	f7ed f9c3 	bl	259dc <bt_conn_unref>
	for (i = 0; i < size; i++) {
   38656:	3401      	adds	r4, #1
   38658:	e7e5      	b.n	38626 <conn_lookup_handle+0x10>

0003865a <bt_conn_connected>:
{
   3865a:	b510      	push	{r4, lr}
   3865c:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   3865e:	f7ed fed7 	bl	26410 <bt_l2cap_connected>
	notify_connected(conn);
   38662:	4620      	mov	r0, r4
}
   38664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   38668:	f7ec bf0e 	b.w	25488 <notify_connected>

0003866c <bt_conn_disconnect>:
{
   3866c:	b538      	push	{r3, r4, r5, lr}
   3866e:	7a83      	ldrb	r3, [r0, #10]
   38670:	3b02      	subs	r3, #2
   38672:	4604      	mov	r4, r0
   38674:	2b06      	cmp	r3, #6
   38676:	d805      	bhi.n	38684 <bt_conn_disconnect+0x18>
   38678:	e8df f003 	tbb	[pc, r3]
   3867c:	04040408 	.word	0x04040408
   38680:	0e0c      	.short	0x0e0c
   38682:	0c          	.byte	0x0c
   38683:	00          	.byte	0x00
	switch (conn->state) {
   38684:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   38688:	4628      	mov	r0, r5
   3868a:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   3868c:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   3868e:	2100      	movs	r1, #0
   38690:	f7ed f9e8 	bl	25a64 <bt_conn_set_state>
		return 0;
   38694:	2500      	movs	r5, #0
   38696:	e7f7      	b.n	38688 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   38698:	8800      	ldrh	r0, [r0, #0]
   3869a:	f7ff fdc0 	bl	3821e <bt_hci_disconnect>
	if (err) {
   3869e:	4605      	mov	r5, r0
   386a0:	2800      	cmp	r0, #0
   386a2:	d1f1      	bne.n	38688 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   386a4:	7aa3      	ldrb	r3, [r4, #10]
   386a6:	2b07      	cmp	r3, #7
   386a8:	d1ee      	bne.n	38688 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   386aa:	2108      	movs	r1, #8
   386ac:	4620      	mov	r0, r4
   386ae:	f7ed f9d9 	bl	25a64 <bt_conn_set_state>
   386b2:	e7e9      	b.n	38688 <bt_conn_disconnect+0x1c>

000386b4 <bt_conn_get_security>:
}
   386b4:	2001      	movs	r0, #1
   386b6:	4770      	bx	lr

000386b8 <bt_conn_is_peer_addr_le>:
{
   386b8:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   386ba:	7a03      	ldrb	r3, [r0, #8]
   386bc:	428b      	cmp	r3, r1
{
   386be:	4604      	mov	r4, r0
   386c0:	4615      	mov	r5, r2
	if (id != conn->id) {
   386c2:	d115      	bne.n	386f0 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   386c4:	f100 0190 	add.w	r1, r0, #144	; 0x90
   386c8:	2207      	movs	r2, #7
   386ca:	4628      	mov	r0, r5
   386cc:	f001 ff0b 	bl	3a4e6 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   386d0:	b180      	cbz	r0, 386f4 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   386d2:	78e3      	ldrb	r3, [r4, #3]
   386d4:	2207      	movs	r2, #7
   386d6:	b943      	cbnz	r3, 386ea <bt_conn_is_peer_addr_le+0x32>
   386d8:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   386dc:	4628      	mov	r0, r5
   386de:	f001 ff02 	bl	3a4e6 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   386e2:	fab0 f080 	clz	r0, r0
   386e6:	0940      	lsrs	r0, r0, #5
}
   386e8:	bd38      	pop	{r3, r4, r5, pc}
   386ea:	f104 0197 	add.w	r1, r4, #151	; 0x97
   386ee:	e7f5      	b.n	386dc <bt_conn_is_peer_addr_le+0x24>
		return false;
   386f0:	2000      	movs	r0, #0
   386f2:	e7f9      	b.n	386e8 <bt_conn_is_peer_addr_le+0x30>
		return true;
   386f4:	2001      	movs	r0, #1
   386f6:	e7f7      	b.n	386e8 <bt_conn_is_peer_addr_le+0x30>

000386f8 <bt_conn_get_dst>:
}
   386f8:	3090      	adds	r0, #144	; 0x90
   386fa:	4770      	bx	lr

000386fc <bt_conn_le_conn_update>:
{
   386fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   386fe:	4607      	mov	r7, r0
   38700:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   38702:	f242 0013 	movw	r0, #8211	; 0x2013
   38706:	210e      	movs	r1, #14
   38708:	f7eb fa38 	bl	23b7c <bt_hci_cmd_create>
	if (!buf) {
   3870c:	4606      	mov	r6, r0
   3870e:	b1d0      	cbz	r0, 38746 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   38710:	210e      	movs	r1, #14
   38712:	3008      	adds	r0, #8
   38714:	f7f1 fc8e 	bl	2a034 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   38718:	220e      	movs	r2, #14
   3871a:	4604      	mov	r4, r0
   3871c:	2100      	movs	r1, #0
   3871e:	f001 ff2b 	bl	3a578 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   38722:	883b      	ldrh	r3, [r7, #0]
   38724:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   38726:	882b      	ldrh	r3, [r5, #0]
   38728:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   3872a:	886b      	ldrh	r3, [r5, #2]
   3872c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   3872e:	88ab      	ldrh	r3, [r5, #4]
   38730:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   38732:	88eb      	ldrh	r3, [r5, #6]
   38734:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   38736:	4631      	mov	r1, r6
   38738:	2200      	movs	r2, #0
}
   3873a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   3873e:	f242 0013 	movw	r0, #8211	; 0x2013
   38742:	f7eb ba63 	b.w	23c0c <bt_hci_cmd_send_sync>
}
   38746:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3874a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003874c <bt_conn_le_param_update>:
{
   3874c:	b410      	push	{r4}
	if (conn->le.interval >= param->interval_min &&
   3874e:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   38752:	880c      	ldrh	r4, [r1, #0]
   38754:	429c      	cmp	r4, r3
   38756:	f100 0204 	add.w	r2, r0, #4
   3875a:	d81c      	bhi.n	38796 <bt_conn_le_param_update+0x4a>
   3875c:	884c      	ldrh	r4, [r1, #2]
   3875e:	429c      	cmp	r4, r3
   38760:	d319      	bcc.n	38796 <bt_conn_le_param_update+0x4a>
	    conn->le.interval <= param->interval_max &&
   38762:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
   38766:	888b      	ldrh	r3, [r1, #4]
   38768:	429c      	cmp	r4, r3
   3876a:	d114      	bne.n	38796 <bt_conn_le_param_update+0x4a>
	    conn->le.latency == param->latency &&
   3876c:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	; 0xae
   38770:	88cb      	ldrh	r3, [r1, #6]
   38772:	429c      	cmp	r4, r3
   38774:	d10f      	bne.n	38796 <bt_conn_le_param_update+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   38776:	f3bf 8f5b 	dmb	ish
   3877a:	e852 3f00 	ldrex	r3, [r2]
   3877e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   38782:	e842 3100 	strex	r1, r3, [r2]
   38786:	2900      	cmp	r1, #0
   38788:	d1f7      	bne.n	3877a <bt_conn_le_param_update+0x2e>
   3878a:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
   3878e:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   38792:	bc10      	pop	{r4}
   38794:	4770      	bx	lr
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   38796:	f3bf 8f5b 	dmb	ish
   3879a:	6844      	ldr	r4, [r0, #4]
   3879c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE)) {
   387a0:	f3c4 2300 	ubfx	r3, r4, #8, #1
   387a4:	05e4      	lsls	r4, r4, #23
   387a6:	d502      	bpl.n	387ae <bt_conn_le_param_update+0x62>
}
   387a8:	bc10      	pop	{r4}
			return send_conn_le_param_update(conn, param);
   387aa:	f7ed bc5b 	b.w	26064 <send_conn_le_param_update>
		conn->le.interval_min = param->interval_min;
   387ae:	880c      	ldrh	r4, [r1, #0]
   387b0:	f8a0 40a8 	strh.w	r4, [r0, #168]	; 0xa8
		conn->le.interval_max = param->interval_max;
   387b4:	884c      	ldrh	r4, [r1, #2]
   387b6:	f8a0 40aa 	strh.w	r4, [r0, #170]	; 0xaa
		conn->le.pending_latency = param->latency;
   387ba:	888c      	ldrh	r4, [r1, #4]
		conn->le.pending_timeout = param->timeout;
   387bc:	88c9      	ldrh	r1, [r1, #6]
		conn->le.pending_latency = param->latency;
   387be:	f8a0 40b0 	strh.w	r4, [r0, #176]	; 0xb0
		conn->le.pending_timeout = param->timeout;
   387c2:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   387c6:	f3bf 8f5b 	dmb	ish
   387ca:	e852 1f00 	ldrex	r1, [r2]
   387ce:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   387d2:	e842 1000 	strex	r0, r1, [r2]
   387d6:	2800      	cmp	r0, #0
   387d8:	d1f7      	bne.n	387ca <bt_conn_le_param_update+0x7e>
   387da:	f3bf 8f5b 	dmb	ish
	return 0;
   387de:	4618      	mov	r0, r3
   387e0:	e7d7      	b.n	38792 <bt_conn_le_param_update+0x46>

000387e2 <l2cap_connected>:
}
   387e2:	4770      	bx	lr

000387e4 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   387e4:	3010      	adds	r0, #16
   387e6:	f7f8 b8ad 	b.w	30944 <k_work_cancel_delayable>

000387ea <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   387ea:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   387ec:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   387ee:	b17b      	cbz	r3, 38810 <bt_l2cap_chan_remove+0x26>
   387f0:	3b08      	subs	r3, #8
   387f2:	2200      	movs	r2, #0
   387f4:	b163      	cbz	r3, 38810 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   387f6:	428b      	cmp	r3, r1
   387f8:	f103 0408 	add.w	r4, r3, #8
   387fc:	d10f      	bne.n	3881e <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   387fe:	688b      	ldr	r3, [r1, #8]
   38800:	b93a      	cbnz	r2, 38812 <bt_l2cap_chan_remove+0x28>
   38802:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   38804:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   38806:	4294      	cmp	r4, r2
   38808:	d100      	bne.n	3880c <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   3880a:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   3880c:	2300      	movs	r3, #0
   3880e:	608b      	str	r3, [r1, #8]
}
   38810:	bd10      	pop	{r4, pc}
   38812:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   38814:	6d83      	ldr	r3, [r0, #88]	; 0x58
   38816:	429c      	cmp	r4, r3
	list->tail = node;
   38818:	bf08      	it	eq
   3881a:	6582      	streq	r2, [r0, #88]	; 0x58
}
   3881c:	e7f6      	b.n	3880c <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   3881e:	2c00      	cmp	r4, #0
   38820:	d0f6      	beq.n	38810 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   38822:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   38824:	2b00      	cmp	r3, #0
   38826:	d0f3      	beq.n	38810 <bt_l2cap_chan_remove+0x26>
   38828:	3b08      	subs	r3, #8
   3882a:	4622      	mov	r2, r4
   3882c:	e7e2      	b.n	387f4 <bt_l2cap_chan_remove+0xa>

0003882e <bt_l2cap_chan_del>:
{
   3882e:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   38830:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   38834:	4604      	mov	r4, r0
	if (!chan->conn) {
   38836:	b123      	cbz	r3, 38842 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   38838:	686b      	ldr	r3, [r5, #4]
   3883a:	b103      	cbz	r3, 3883e <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   3883c:	4798      	blx	r3
	chan->conn = NULL;
   3883e:	2300      	movs	r3, #0
   38840:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   38842:	68e3      	ldr	r3, [r4, #12]
   38844:	b10b      	cbz	r3, 3884a <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   38846:	4620      	mov	r0, r4
   38848:	4798      	blx	r3
	if (ops->released) {
   3884a:	69eb      	ldr	r3, [r5, #28]
   3884c:	b11b      	cbz	r3, 38856 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   3884e:	4620      	mov	r0, r4
}
   38850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   38854:	4718      	bx	r3
}
   38856:	bd70      	pop	{r4, r5, r6, pc}

00038858 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   38858:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   3885a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   3885c:	b18b      	cbz	r3, 38882 <bt_l2cap_disconnected+0x2a>
   3885e:	f1b3 0008 	subs.w	r0, r3, #8
   38862:	d00e      	beq.n	38882 <bt_l2cap_disconnected+0x2a>
   38864:	681c      	ldr	r4, [r3, #0]
   38866:	b104      	cbz	r4, 3886a <bt_l2cap_disconnected+0x12>
   38868:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   3886a:	f7ff ffe0 	bl	3882e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   3886e:	b144      	cbz	r4, 38882 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   38870:	f114 0308 	adds.w	r3, r4, #8
   38874:	d002      	beq.n	3887c <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   38876:	68a3      	ldr	r3, [r4, #8]
   38878:	b103      	cbz	r3, 3887c <bt_l2cap_disconnected+0x24>
   3887a:	3b08      	subs	r3, #8
{
   3887c:	4620      	mov	r0, r4
   3887e:	461c      	mov	r4, r3
   38880:	e7f3      	b.n	3886a <bt_l2cap_disconnected+0x12>
}
   38882:	bd10      	pop	{r4, pc}

00038884 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   38884:	3104      	adds	r1, #4
   38886:	f7ed b9f7 	b.w	25c78 <bt_conn_create_pdu_timeout>

0003888a <bt_l2cap_send_cb>:
{
   3888a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3888e:	4614      	mov	r4, r2
   38890:	4605      	mov	r5, r0
   38892:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   38894:	f102 0008 	add.w	r0, r2, #8
   38898:	2104      	movs	r1, #4
   3889a:	461e      	mov	r6, r3
   3889c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   388a0:	f7f1 fb64 	bl	29f6c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   388a4:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   388a6:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   388a8:	3a04      	subs	r2, #4
   388aa:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   388ac:	4643      	mov	r3, r8
   388ae:	4632      	mov	r2, r6
   388b0:	4621      	mov	r1, r4
   388b2:	4628      	mov	r0, r5
}
   388b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   388b8:	f7ec bfee 	b.w	25898 <bt_conn_send_cb>

000388bc <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   388bc:	6d40      	ldr	r0, [r0, #84]	; 0x54
   388be:	b160      	cbz	r0, 388da <bt_l2cap_le_lookup_tx_cid+0x1e>
   388c0:	3808      	subs	r0, #8
   388c2:	b900      	cbnz	r0, 388c6 <bt_l2cap_le_lookup_tx_cid+0xa>
   388c4:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   388c6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   388ca:	428b      	cmp	r3, r1
   388cc:	d005      	beq.n	388da <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   388ce:	f110 0308 	adds.w	r3, r0, #8
   388d2:	d001      	beq.n	388d8 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   388d4:	6880      	ldr	r0, [r0, #8]
   388d6:	e7f2      	b.n	388be <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   388d8:	4618      	mov	r0, r3
}
   388da:	4770      	bx	lr

000388dc <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   388dc:	6d40      	ldr	r0, [r0, #84]	; 0x54
   388de:	b160      	cbz	r0, 388fa <bt_l2cap_le_lookup_rx_cid+0x1e>
   388e0:	3808      	subs	r0, #8
   388e2:	b900      	cbnz	r0, 388e6 <bt_l2cap_le_lookup_rx_cid+0xa>
   388e4:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   388e6:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   388ea:	428b      	cmp	r3, r1
   388ec:	d005      	beq.n	388fa <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   388ee:	f110 0308 	adds.w	r3, r0, #8
   388f2:	d001      	beq.n	388f8 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   388f4:	6880      	ldr	r0, [r0, #8]
   388f6:	e7f2      	b.n	388de <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   388f8:	4618      	mov	r0, r3
}
   388fa:	4770      	bx	lr

000388fc <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   388fc:	4770      	bx	lr

000388fe <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   388fe:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   38900:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   38902:	b128      	cbz	r0, 38910 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   38904:	6859      	ldr	r1, [r3, #4]
   38906:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   38908:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3890a:	4288      	cmp	r0, r1
	list->tail = node;
   3890c:	bf08      	it	eq
   3890e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   38910:	4770      	bx	lr

00038912 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   38912:	4603      	mov	r3, r0
   38914:	6800      	ldr	r0, [r0, #0]
   38916:	2200      	movs	r2, #0
   38918:	b900      	cbnz	r0, 3891c <sys_slist_find_and_remove+0xa>
   3891a:	4770      	bx	lr
   3891c:	4288      	cmp	r0, r1
   3891e:	d110      	bne.n	38942 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   38920:	6808      	ldr	r0, [r1, #0]
   38922:	b942      	cbnz	r2, 38936 <sys_slist_find_and_remove+0x24>
   38924:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   38926:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   38928:	4291      	cmp	r1, r2
   3892a:	d100      	bne.n	3892e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   3892c:	6058      	str	r0, [r3, #4]
	parent->next = child;
   3892e:	2300      	movs	r3, #0
   38930:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   38932:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   38934:	4770      	bx	lr
	parent->next = child;
   38936:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   38938:	6858      	ldr	r0, [r3, #4]
   3893a:	4281      	cmp	r1, r0
	list->tail = node;
   3893c:	bf08      	it	eq
   3893e:	605a      	streq	r2, [r3, #4]
}
   38940:	e7f5      	b.n	3892e <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   38942:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   38944:	6800      	ldr	r0, [r0, #0]
   38946:	e7e7      	b.n	38918 <sys_slist_find_and_remove+0x6>

00038948 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   38948:	4603      	mov	r3, r0
	size_t bytes = 0;
   3894a:	2000      	movs	r0, #0

	while (buf) {
   3894c:	b903      	cbnz	r3, 38950 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   3894e:	4770      	bx	lr
		bytes += buf->len;
   38950:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   38952:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   38954:	4410      	add	r0, r2
		buf = buf->frags;
   38956:	e7f9      	b.n	3894c <net_buf_frags_len+0x4>

00038958 <att_sent>:
	if (chan->ops->sent) {
   38958:	684b      	ldr	r3, [r1, #4]
   3895a:	695b      	ldr	r3, [r3, #20]
{
   3895c:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   3895e:	b103      	cbz	r3, 38962 <att_sent+0xa>
		chan->ops->sent(chan);
   38960:	4718      	bx	r3
}
   38962:	4770      	bx	lr

00038964 <attr_read_type_cb>:
{
   38964:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   38966:	68d4      	ldr	r4, [r2, #12]
   38968:	7823      	ldrb	r3, [r4, #0]
   3896a:	3102      	adds	r1, #2
   3896c:	b913      	cbnz	r3, 38974 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   3896e:	7021      	strb	r1, [r4, #0]
	return true;
   38970:	2001      	movs	r0, #1
   38972:	e006      	b.n	38982 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   38974:	428b      	cmp	r3, r1
   38976:	d0fb      	beq.n	38970 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   38978:	8983      	ldrh	r3, [r0, #12]
   3897a:	3b02      	subs	r3, #2
   3897c:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   3897e:	2000      	movs	r0, #0
   38980:	6110      	str	r0, [r2, #16]
}
   38982:	bd10      	pop	{r4, pc}

00038984 <att_op_get_type>:
	switch (op) {
   38984:	281e      	cmp	r0, #30
   38986:	d816      	bhi.n	389b6 <att_op_get_type+0x32>
   38988:	b308      	cbz	r0, 389ce <att_op_get_type+0x4a>
   3898a:	1e43      	subs	r3, r0, #1
   3898c:	2b1d      	cmp	r3, #29
   3898e:	d81e      	bhi.n	389ce <att_op_get_type+0x4a>
   38990:	e8df f003 	tbb	[pc, r3]
   38994:	23172317 	.word	0x23172317
   38998:	23172317 	.word	0x23172317
   3899c:	23172317 	.word	0x23172317
   389a0:	23172317 	.word	0x23172317
   389a4:	1d172317 	.word	0x1d172317
   389a8:	2317231d 	.word	0x2317231d
   389ac:	1d191d17 	.word	0x1d191d17
   389b0:	0f1b      	.short	0x0f1b
   389b2:	2004      	movs	r0, #4
   389b4:	4770      	bx	lr
   389b6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   389ba:	2b52      	cmp	r3, #82	; 0x52
   389bc:	d107      	bne.n	389ce <att_op_get_type+0x4a>
		return ATT_COMMAND;
   389be:	2000      	movs	r0, #0
}
   389c0:	4770      	bx	lr
		return ATT_RESPONSE;
   389c2:	2002      	movs	r0, #2
   389c4:	4770      	bx	lr
		return ATT_NOTIFICATION;
   389c6:	2003      	movs	r0, #3
   389c8:	4770      	bx	lr
		return ATT_INDICATION;
   389ca:	2005      	movs	r0, #5
   389cc:	4770      	bx	lr
		return ATT_COMMAND;
   389ce:	f010 0f40 	tst.w	r0, #64	; 0x40
   389d2:	bf0c      	ite	eq
   389d4:	2006      	moveq	r0, #6
   389d6:	2000      	movne	r0, #0
   389d8:	4770      	bx	lr
		return ATT_REQUEST;
   389da:	2001      	movs	r0, #1
   389dc:	4770      	bx	lr

000389de <chan_req_send>:
{
   389de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   389e0:	688f      	ldr	r7, [r1, #8]
{
   389e2:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   389e4:	4638      	mov	r0, r7
{
   389e6:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   389e8:	f7ff ffae 	bl	38948 <net_buf_frags_len>
   389ec:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   389f0:	4283      	cmp	r3, r0
   389f2:	d30d      	bcc.n	38a10 <chan_req_send+0x32>
	req->buf = NULL;
   389f4:	2600      	movs	r6, #0
	chan->req = req;
   389f6:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   389fa:	4632      	mov	r2, r6
	req->buf = NULL;
   389fc:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   389fe:	4620      	mov	r0, r4
   38a00:	4639      	mov	r1, r7
   38a02:	f7ed fe7d 	bl	26700 <chan_send>
	if (err) {
   38a06:	b110      	cbz	r0, 38a0e <chan_req_send+0x30>
		req->buf = buf;
   38a08:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   38a0a:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
}
   38a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   38a10:	f06f 0079 	mvn.w	r0, #121	; 0x79
   38a14:	e7fb      	b.n	38a0e <chan_req_send+0x30>

00038a16 <process_queue>:
{
   38a16:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   38a18:	2200      	movs	r2, #0
{
   38a1a:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   38a1c:	2300      	movs	r3, #0
   38a1e:	4608      	mov	r0, r1
{
   38a20:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   38a22:	f7f1 f843 	bl	29aac <net_buf_get>
	if (buf) {
   38a26:	4605      	mov	r5, r0
   38a28:	b160      	cbz	r0, 38a44 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   38a2a:	4601      	mov	r1, r0
   38a2c:	2200      	movs	r2, #0
   38a2e:	4620      	mov	r0, r4
   38a30:	f7ed fe66 	bl	26700 <chan_send>
		if (err) {
   38a34:	4604      	mov	r4, r0
   38a36:	b118      	cbz	r0, 38a40 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   38a38:	4629      	mov	r1, r5
   38a3a:	4630      	mov	r0, r6
   38a3c:	f001 fc0f 	bl	3a25e <k_queue_prepend>
}
   38a40:	4620      	mov	r0, r4
   38a42:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   38a44:	f06f 0401 	mvn.w	r4, #1
   38a48:	e7fa      	b.n	38a40 <process_queue+0x2a>

00038a4a <att_notify_mult>:
{
   38a4a:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   38a4c:	6803      	ldr	r3, [r0, #0]
   38a4e:	898a      	ldrh	r2, [r1, #12]
   38a50:	6818      	ldr	r0, [r3, #0]
   38a52:	6889      	ldr	r1, [r1, #8]
   38a54:	f7f0 fc9c 	bl	29390 <bt_gatt_mult_notification>
}
   38a58:	2000      	movs	r0, #0
   38a5a:	bd08      	pop	{r3, pc}

00038a5c <att_notify>:
{
   38a5c:	b538      	push	{r3, r4, r5, lr}
   38a5e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   38a60:	f101 0008 	add.w	r0, r1, #8
   38a64:	460c      	mov	r4, r1
   38a66:	f000 fe3f 	bl	396e8 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   38a6a:	682d      	ldr	r5, [r5, #0]
   38a6c:	89a3      	ldrh	r3, [r4, #12]
   38a6e:	68a2      	ldr	r2, [r4, #8]
   38a70:	4601      	mov	r1, r0
   38a72:	6828      	ldr	r0, [r5, #0]
   38a74:	f000 fd86 	bl	39584 <bt_gatt_notification>
}
   38a78:	2000      	movs	r0, #0
   38a7a:	bd38      	pop	{r3, r4, r5, pc}

00038a7c <bt_att_chan_send_rsp>:
{
   38a7c:	b538      	push	{r3, r4, r5, lr}
   38a7e:	4604      	mov	r4, r0
   38a80:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   38a82:	f7ed fe3d 	bl	26700 <chan_send>
	if (err) {
   38a86:	b130      	cbz	r0, 38a96 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   38a88:	4629      	mov	r1, r5
   38a8a:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   38a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   38a92:	f7f1 b96b 	b.w	29d6c <net_buf_put>
}
   38a96:	bd38      	pop	{r3, r4, r5, pc}

00038a98 <att_chan_mtu_updated>:
{
   38a98:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   38a9a:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   38a9c:	6b32      	ldr	r2, [r6, #48]	; 0x30
   38a9e:	b30a      	cbz	r2, 38ae4 <att_chan_mtu_updated+0x4c>
   38aa0:	f5b2 74aa 	subs.w	r4, r2, #340	; 0x154
   38aa4:	d01d      	beq.n	38ae2 <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   38aa6:	6813      	ldr	r3, [r2, #0]
   38aa8:	b10b      	cbz	r3, 38aae <att_chan_mtu_updated+0x16>
   38aaa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   38aae:	2200      	movs	r2, #0
   38ab0:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   38ab2:	42a0      	cmp	r0, r4
   38ab4:	d009      	beq.n	38aca <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   38ab6:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   38aba:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   38abe:	42a9      	cmp	r1, r5
   38ac0:	bf38      	it	cc
   38ac2:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   38ac4:	42a2      	cmp	r2, r4
   38ac6:	bf38      	it	cc
   38ac8:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   38aca:	b163      	cbz	r3, 38ae6 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   38acc:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   38ad0:	d004      	beq.n	38adc <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   38ad2:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   38ad6:	b10d      	cbz	r5, 38adc <att_chan_mtu_updated+0x44>
   38ad8:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
{
   38adc:	461c      	mov	r4, r3
   38ade:	462b      	mov	r3, r5
   38ae0:	e7e7      	b.n	38ab2 <att_chan_mtu_updated+0x1a>
   38ae2:	4622      	mov	r2, r4
   38ae4:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   38ae6:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   38aea:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   38aee:	428b      	cmp	r3, r1
   38af0:	d801      	bhi.n	38af6 <att_chan_mtu_updated+0x5e>
   38af2:	4290      	cmp	r0, r2
   38af4:	d909      	bls.n	38b0a <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   38af6:	4282      	cmp	r2, r0
   38af8:	bf38      	it	cc
   38afa:	4602      	movcc	r2, r0
   38afc:	4299      	cmp	r1, r3
   38afe:	6830      	ldr	r0, [r6, #0]
   38b00:	bf38      	it	cc
   38b02:	4619      	movcc	r1, r3
}
   38b04:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   38b06:	f7f0 bcef 	b.w	294e8 <bt_gatt_att_max_mtu_changed>
}
   38b0a:	bc70      	pop	{r4, r5, r6}
   38b0c:	4770      	bx	lr

00038b0e <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   38b0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   38b10:	e9cd 2301 	strd	r2, r3, [sp, #4]
   38b14:	2300      	movs	r3, #0
   38b16:	9300      	str	r3, [sp, #0]
   38b18:	461a      	mov	r2, r3
   38b1a:	f7ef fe11 	bl	28740 <bt_gatt_foreach_attr_type>
				  user_data);
}
   38b1e:	b005      	add	sp, #20
   38b20:	f85d fb04 	ldr.w	pc, [sp], #4

00038b24 <attr_read_group_cb>:
	if (!data->rsp->len) {
   38b24:	68d0      	ldr	r0, [r2, #12]
   38b26:	7803      	ldrb	r3, [r0, #0]
   38b28:	3104      	adds	r1, #4
   38b2a:	b913      	cbnz	r3, 38b32 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   38b2c:	7001      	strb	r1, [r0, #0]
	return true;
   38b2e:	2001      	movs	r0, #1
}
   38b30:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   38b32:	428b      	cmp	r3, r1
   38b34:	d0fb      	beq.n	38b2e <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   38b36:	6891      	ldr	r1, [r2, #8]
   38b38:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   38b3a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   38b3c:	3b04      	subs	r3, #4
   38b3e:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   38b40:	6110      	str	r0, [r2, #16]
		return false;
   38b42:	4770      	bx	lr

00038b44 <chan_req_sent>:
	if (chan->req) {
   38b44:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   38b48:	b133      	cbz	r3, 38b58 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   38b4a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   38b4e:	2300      	movs	r3, #0
   38b50:	f500 7090 	add.w	r0, r0, #288	; 0x120
   38b54:	f7f7 bef0 	b.w	30938 <k_work_reschedule>
}
   38b58:	4770      	bx	lr

00038b5a <find_info_cb>:
{
   38b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   38b5c:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   38b5e:	6816      	ldr	r6, [r2, #0]
{
   38b60:	4605      	mov	r5, r0
   38b62:	460f      	mov	r7, r1
   38b64:	4614      	mov	r4, r2
	if (!data->rsp) {
   38b66:	b963      	cbnz	r3, 38b82 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   38b68:	6850      	ldr	r0, [r2, #4]
   38b6a:	2101      	movs	r1, #1
   38b6c:	3008      	adds	r0, #8
   38b6e:	f7f1 fa61 	bl	2a034 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   38b72:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   38b74:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   38b76:	781b      	ldrb	r3, [r3, #0]
   38b78:	2b00      	cmp	r3, #0
   38b7a:	bf0c      	ite	eq
   38b7c:	2301      	moveq	r3, #1
   38b7e:	2302      	movne	r3, #2
   38b80:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   38b82:	68a3      	ldr	r3, [r4, #8]
   38b84:	781b      	ldrb	r3, [r3, #0]
   38b86:	2b01      	cmp	r3, #1
   38b88:	d003      	beq.n	38b92 <find_info_cb+0x38>
   38b8a:	2b02      	cmp	r3, #2
   38b8c:	d019      	beq.n	38bc2 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   38b8e:	2000      	movs	r0, #0
   38b90:	e016      	b.n	38bc0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   38b92:	682b      	ldr	r3, [r5, #0]
   38b94:	781b      	ldrb	r3, [r3, #0]
   38b96:	2b00      	cmp	r3, #0
   38b98:	d1f9      	bne.n	38b8e <find_info_cb+0x34>
   38b9a:	6860      	ldr	r0, [r4, #4]
   38b9c:	2104      	movs	r1, #4
   38b9e:	3008      	adds	r0, #8
   38ba0:	f7f1 fa48 	bl	2a034 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   38ba4:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   38ba6:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   38ba8:	885b      	ldrh	r3, [r3, #2]
   38baa:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   38bac:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   38bae:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   38bb0:	899b      	ldrh	r3, [r3, #12]
   38bb2:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   38bb6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   38bb8:	2804      	cmp	r0, #4
   38bba:	bf94      	ite	ls
   38bbc:	2000      	movls	r0, #0
   38bbe:	2001      	movhi	r0, #1
}
   38bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   38bc2:	682b      	ldr	r3, [r5, #0]
   38bc4:	781b      	ldrb	r3, [r3, #0]
   38bc6:	2b02      	cmp	r3, #2
   38bc8:	d1e1      	bne.n	38b8e <find_info_cb+0x34>
   38bca:	6860      	ldr	r0, [r4, #4]
   38bcc:	2112      	movs	r1, #18
   38bce:	3008      	adds	r0, #8
   38bd0:	f7f1 fa30 	bl	2a034 <net_buf_simple_add>
   38bd4:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   38bd6:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   38bd8:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   38bda:	f823 7b02 	strh.w	r7, [r3], #2
   38bde:	1c51      	adds	r1, r2, #1
   38be0:	3211      	adds	r2, #17
   38be2:	f851 0b04 	ldr.w	r0, [r1], #4
   38be6:	f843 0b04 	str.w	r0, [r3], #4
   38bea:	4291      	cmp	r1, r2
   38bec:	d1f9      	bne.n	38be2 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   38bee:	6863      	ldr	r3, [r4, #4]
   38bf0:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   38bf4:	899b      	ldrh	r3, [r3, #12]
   38bf6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   38bf8:	2812      	cmp	r0, #18
   38bfa:	e7de      	b.n	38bba <find_info_cb+0x60>

00038bfc <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   38bfc:	30f8      	adds	r0, #248	; 0xf8
   38bfe:	f3bf 8f5b 	dmb	ish
   38c02:	e850 3f00 	ldrex	r3, [r0]
   38c06:	f023 0301 	bic.w	r3, r3, #1
   38c0a:	e840 3200 	strex	r2, r3, [r0]
   38c0e:	2a00      	cmp	r2, #0
   38c10:	d1f7      	bne.n	38c02 <chan_rsp_sent+0x6>
   38c12:	f3bf 8f5b 	dmb	ish
}
   38c16:	4770      	bx	lr

00038c18 <chan_cfm_sent>:
   38c18:	30f8      	adds	r0, #248	; 0xf8
   38c1a:	f3bf 8f5b 	dmb	ish
   38c1e:	e850 3f00 	ldrex	r3, [r0]
   38c22:	f023 0302 	bic.w	r3, r3, #2
   38c26:	e840 3200 	strex	r2, r3, [r0]
   38c2a:	2a00      	cmp	r2, #0
   38c2c:	d1f7      	bne.n	38c1e <chan_cfm_sent+0x6>
   38c2e:	f3bf 8f5b 	dmb	ish
}
   38c32:	4770      	bx	lr

00038c34 <att_chan_read>:
{
   38c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38c38:	4680      	mov	r8, r0
   38c3a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   38c3c:	4610      	mov	r0, r2
{
   38c3e:	4699      	mov	r9, r3
   38c40:	468b      	mov	fp, r1
   38c42:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   38c44:	f7ff fe80 	bl	38948 <net_buf_frags_len>
   38c48:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   38c4c:	4283      	cmp	r3, r0
   38c4e:	d97a      	bls.n	38d46 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   38c50:	f8d8 3008 	ldr.w	r3, [r8, #8]
   38c54:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   38c56:	4630      	mov	r0, r6
   38c58:	f7f1 f91c 	bl	29e94 <net_buf_frag_last>
	size_t len, total = 0;
   38c5c:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   38c60:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   38c62:	4630      	mov	r0, r6
   38c64:	f7ff fe70 	bl	38948 <net_buf_frags_len>
   38c68:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   38c6c:	f105 0708 	add.w	r7, r5, #8
   38c70:	1a24      	subs	r4, r4, r0
   38c72:	4638      	mov	r0, r7
   38c74:	f000 fd44 	bl	39700 <net_buf_simple_tailroom>
   38c78:	4284      	cmp	r4, r0
   38c7a:	d211      	bcs.n	38ca0 <att_chan_read+0x6c>
   38c7c:	4630      	mov	r0, r6
   38c7e:	f7ff fe63 	bl	38948 <net_buf_frags_len>
   38c82:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   38c86:	1a24      	subs	r4, r4, r0
		if (!len) {
   38c88:	bb34      	cbnz	r4, 38cd8 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   38c8a:	79b0      	ldrb	r0, [r6, #6]
   38c8c:	f7f0 fd9e 	bl	297cc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   38c90:	2200      	movs	r2, #0
   38c92:	2300      	movs	r3, #0
   38c94:	f000 fd1d 	bl	396d2 <net_buf_alloc_fixed>
			if (!frag) {
   38c98:	4605      	mov	r5, r0
   38c9a:	b930      	cbnz	r0, 38caa <att_chan_read+0x76>
	return total;
   38c9c:	4657      	mov	r7, sl
   38c9e:	e02c      	b.n	38cfa <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   38ca0:	4638      	mov	r0, r7
   38ca2:	f000 fd2d 	bl	39700 <net_buf_simple_tailroom>
   38ca6:	4604      	mov	r4, r0
   38ca8:	e7ee      	b.n	38c88 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   38caa:	4601      	mov	r1, r0
   38cac:	4630      	mov	r0, r6
   38cae:	f7f1 f939 	bl	29f24 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   38cb2:	4630      	mov	r0, r6
   38cb4:	f7ff fe48 	bl	38948 <net_buf_frags_len>
   38cb8:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   38cbc:	f105 0708 	add.w	r7, r5, #8
   38cc0:	1a24      	subs	r4, r4, r0
   38cc2:	4638      	mov	r0, r7
   38cc4:	f000 fd1c 	bl	39700 <net_buf_simple_tailroom>
   38cc8:	4284      	cmp	r4, r0
   38cca:	d21a      	bcs.n	38d02 <att_chan_read+0xce>
   38ccc:	4630      	mov	r0, r6
   38cce:	f7ff fe3b 	bl	38948 <net_buf_frags_len>
   38cd2:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   38cd6:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   38cd8:	68a9      	ldr	r1, [r5, #8]
   38cda:	89aa      	ldrh	r2, [r5, #12]
   38cdc:	f8db 7004 	ldr.w	r7, [fp, #4]
   38ce0:	9803      	ldr	r0, [sp, #12]
   38ce2:	f8cd 9000 	str.w	r9, [sp]
   38ce6:	440a      	add	r2, r1
   38ce8:	b2a3      	uxth	r3, r4
   38cea:	4659      	mov	r1, fp
   38cec:	47b8      	blx	r7
		if (read < 0) {
   38cee:	1e07      	subs	r7, r0, #0
   38cf0:	da0c      	bge.n	38d0c <att_chan_read+0xd8>
				return total;
   38cf2:	f1ba 0f00 	cmp.w	sl, #0
   38cf6:	bf18      	it	ne
   38cf8:	4657      	movne	r7, sl
}
   38cfa:	4638      	mov	r0, r7
   38cfc:	b005      	add	sp, #20
   38cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38d02:	4638      	mov	r0, r7
   38d04:	f000 fcfc 	bl	39700 <net_buf_simple_tailroom>
   38d08:	4604      	mov	r4, r0
   38d0a:	e7e5      	b.n	38cd8 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   38d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   38d0e:	b993      	cbnz	r3, 38d36 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   38d10:	4639      	mov	r1, r7
   38d12:	f105 0008 	add.w	r0, r5, #8
   38d16:	f7f1 f98d 	bl	2a034 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   38d1a:	4630      	mov	r0, r6
   38d1c:	f7ff fe14 	bl	38948 <net_buf_frags_len>
   38d20:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   38d24:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   38d26:	4283      	cmp	r3, r0
		total += read;
   38d28:	44ba      	add	sl, r7
		offset += read;
   38d2a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   38d2e:	d9b5      	bls.n	38c9c <att_chan_read+0x68>
   38d30:	42a7      	cmp	r7, r4
   38d32:	d096      	beq.n	38c62 <att_chan_read+0x2e>
   38d34:	e7b2      	b.n	38c9c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   38d36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   38d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   38d3a:	4639      	mov	r1, r7
   38d3c:	4628      	mov	r0, r5
   38d3e:	4798      	blx	r3
   38d40:	2800      	cmp	r0, #0
   38d42:	d1e5      	bne.n	38d10 <att_chan_read+0xdc>
   38d44:	e7aa      	b.n	38c9c <att_chan_read+0x68>
		return 0;
   38d46:	2700      	movs	r7, #0
   38d48:	e7d7      	b.n	38cfa <att_chan_read+0xc6>

00038d4a <bt_att_status>:
{
   38d4a:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   38d4c:	f3bf 8f5b 	dmb	ish
   38d50:	680b      	ldr	r3, [r1, #0]
   38d52:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   38d56:	07db      	lsls	r3, r3, #31
{
   38d58:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   38d5a:	d519      	bpl.n	38d90 <bt_att_status+0x46>
	if (!chan->att) {
   38d5c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   38d60:	b1b0      	cbz	r0, 38d90 <bt_att_status+0x46>
	if (chan->req) {
   38d62:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   38d66:	b99b      	cbnz	r3, 38d90 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   38d68:	3004      	adds	r0, #4
   38d6a:	f7ff fdc8 	bl	388fe <sys_slist_get>
	if (!node) {
   38d6e:	4604      	mov	r4, r0
   38d70:	b170      	cbz	r0, 38d90 <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   38d72:	4601      	mov	r1, r0
   38d74:	f1a5 0008 	sub.w	r0, r5, #8
   38d78:	f7ed fd30 	bl	267dc <bt_att_chan_req_send>
   38d7c:	2800      	cmp	r0, #0
   38d7e:	da07      	bge.n	38d90 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   38d80:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   38d84:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   38d86:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   38d88:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   38d8a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   38d8c:	b902      	cbnz	r2, 38d90 <bt_att_status+0x46>
	list->tail = node;
   38d8e:	609c      	str	r4, [r3, #8]
}
   38d90:	bd38      	pop	{r3, r4, r5, pc}

00038d92 <att_req_send_process>:
{
   38d92:	b570      	push	{r4, r5, r6, lr}
   38d94:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   38d96:	3004      	adds	r0, #4
   38d98:	f7ff fdb1 	bl	388fe <sys_slist_get>
	if (!node) {
   38d9c:	4606      	mov	r6, r0
   38d9e:	b1c0      	cbz	r0, 38dd2 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   38da0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   38da2:	b153      	cbz	r3, 38dba <att_req_send_process+0x28>
   38da4:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   38da8:	d007      	beq.n	38dba <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   38daa:	681c      	ldr	r4, [r3, #0]
   38dac:	b10c      	cbz	r4, 38db2 <att_req_send_process+0x20>
   38dae:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   38db2:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   38db6:	b13b      	cbz	r3, 38dc8 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   38db8:	b964      	cbnz	r4, 38dd4 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   38dba:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   38dbc:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   38dbe:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   38dc0:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   38dc2:	b933      	cbnz	r3, 38dd2 <att_req_send_process+0x40>
	list->tail = node;
   38dc4:	60ae      	str	r6, [r5, #8]
}
   38dc6:	e004      	b.n	38dd2 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   38dc8:	4631      	mov	r1, r6
   38dca:	f7ed fd07 	bl	267dc <bt_att_chan_req_send>
   38dce:	2800      	cmp	r0, #0
   38dd0:	dbf2      	blt.n	38db8 <att_req_send_process+0x26>
}
   38dd2:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   38dd4:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   38dd8:	d004      	beq.n	38de4 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   38dda:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   38dde:	b10b      	cbz	r3, 38de4 <att_req_send_process+0x52>
   38de0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   38de4:	4620      	mov	r0, r4
   38de6:	461c      	mov	r4, r3
   38de8:	e7e3      	b.n	38db2 <att_req_send_process+0x20>

00038dea <write_cb>:
{
   38dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   38dec:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   38dee:	4601      	mov	r1, r0
{
   38df0:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   38df2:	222a      	movs	r2, #42	; 0x2a
   38df4:	6820      	ldr	r0, [r4, #0]
   38df6:	f000 fba2 	bl	3953e <bt_gatt_check_perm>
   38dfa:	4605      	mov	r5, r0
   38dfc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   38dfe:	bb20      	cbnz	r0, 38e4a <write_cb+0x60>
	if (!data->req) {
   38e00:	7a23      	ldrb	r3, [r4, #8]
   38e02:	b1ab      	cbz	r3, 38e30 <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   38e04:	2b18      	cmp	r3, #24
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   38e06:	bf14      	ite	ne
   38e08:	2300      	movne	r3, #0
   38e0a:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   38e0c:	9301      	str	r3, [sp, #4]
   38e0e:	8a63      	ldrh	r3, [r4, #18]
   38e10:	9300      	str	r3, [sp, #0]
   38e12:	68b7      	ldr	r7, [r6, #8]
   38e14:	8a23      	ldrh	r3, [r4, #16]
   38e16:	68e2      	ldr	r2, [r4, #12]
   38e18:	6820      	ldr	r0, [r4, #0]
   38e1a:	4631      	mov	r1, r6
   38e1c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   38e1e:	1e03      	subs	r3, r0, #0
   38e20:	db08      	blt.n	38e34 <write_cb+0x4a>
   38e22:	8a22      	ldrh	r2, [r4, #16]
   38e24:	4293      	cmp	r3, r2
   38e26:	d10e      	bne.n	38e46 <write_cb+0x5c>
	data->err = 0U;
   38e28:	2300      	movs	r3, #0
   38e2a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   38e2c:	2501      	movs	r5, #1
   38e2e:	e007      	b.n	38e40 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   38e30:	2302      	movs	r3, #2
   38e32:	e7eb      	b.n	38e0c <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   38e34:	f113 0fff 	cmn.w	r3, #255	; 0xff
   38e38:	d305      	bcc.n	38e46 <write_cb+0x5c>
		return -err;
   38e3a:	425b      	negs	r3, r3
   38e3c:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   38e3e:	7523      	strb	r3, [r4, #20]
}
   38e40:	4628      	mov	r0, r5
   38e42:	b003      	add	sp, #12
   38e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   38e46:	230e      	movs	r3, #14
   38e48:	e7f9      	b.n	38e3e <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   38e4a:	2500      	movs	r5, #0
   38e4c:	e7f8      	b.n	38e40 <write_cb+0x56>

00038e4e <bt_att_sent>:
{
   38e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   38e50:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	struct bt_att *att = chan->att;
   38e54:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   38e58:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   38e5a:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   38e5e:	b10b      	cbz	r3, 38e64 <bt_att_sent+0x16>
		chan->sent(chan);
   38e60:	4638      	mov	r0, r7
   38e62:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   38e64:	f3bf 8f5b 	dmb	ish
   38e68:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   38e6c:	e853 2f00 	ldrex	r2, [r3]
   38e70:	f022 0210 	bic.w	r2, r2, #16
   38e74:	e843 2100 	strex	r1, r2, [r3]
   38e78:	2900      	cmp	r1, #0
   38e7a:	d1f7      	bne.n	38e6c <bt_att_sent+0x1e>
   38e7c:	f3bf 8f5b 	dmb	ish
	if (!att) {
   38e80:	b30c      	cbz	r4, 38ec6 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   38e82:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   38e86:	b98b      	cbnz	r3, 38eac <bt_att_sent+0x5e>
   38e88:	6863      	ldr	r3, [r4, #4]
   38e8a:	b17b      	cbz	r3, 38eac <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   38e8c:	1d20      	adds	r0, r4, #4
   38e8e:	f7ff fd36 	bl	388fe <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   38e92:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   38e94:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   38e96:	4638      	mov	r0, r7
   38e98:	f7ff fda1 	bl	389de <chan_req_send>
   38e9c:	2800      	cmp	r0, #0
   38e9e:	da12      	bge.n	38ec6 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   38ea0:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   38ea2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   38ea4:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   38ea6:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   38ea8:	b903      	cbnz	r3, 38eac <bt_att_sent+0x5e>
	list->tail = node;
   38eaa:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   38eac:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   38eb0:	4638      	mov	r0, r7
   38eb2:	f7ff fdb0 	bl	38a16 <process_queue>
	if (!err) {
   38eb6:	b130      	cbz	r0, 38ec6 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   38eb8:	f104 010c 	add.w	r1, r4, #12
   38ebc:	4638      	mov	r0, r7
}
   38ebe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   38ec2:	f7ff bda8 	b.w	38a16 <process_queue>
}
   38ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00038ec8 <read_cb>:
{
   38ec8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   38ecc:	f8d2 8000 	ldr.w	r8, [r2]
{
   38ed0:	4606      	mov	r6, r0
	data->err = 0x00;
   38ed2:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   38ed4:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   38ed8:	7317      	strb	r7, [r2, #12]
{
   38eda:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   38edc:	4631      	mov	r1, r6
   38ede:	2215      	movs	r2, #21
   38ee0:	f000 fb2d 	bl	3953e <bt_gatt_check_perm>
   38ee4:	4604      	mov	r4, r0
   38ee6:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   38ee8:	b9a0      	cbnz	r0, 38f14 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   38eea:	e9cd 0000 	strd	r0, r0, [sp]
   38eee:	88ab      	ldrh	r3, [r5, #4]
   38ef0:	68aa      	ldr	r2, [r5, #8]
   38ef2:	4631      	mov	r1, r6
   38ef4:	4640      	mov	r0, r8
   38ef6:	f7ff fe9d 	bl	38c34 <att_chan_read>
	if (ret < 0) {
   38efa:	1e03      	subs	r3, r0, #0
   38efc:	da0c      	bge.n	38f18 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   38efe:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   38f02:	bf26      	itte	cs
   38f04:	425b      	negcs	r3, r3
   38f06:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   38f08:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   38f0a:	732b      	strb	r3, [r5, #12]
}
   38f0c:	4620      	mov	r0, r4
   38f0e:	b002      	add	sp, #8
   38f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   38f14:	463c      	mov	r4, r7
   38f16:	e7f9      	b.n	38f0c <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   38f18:	2401      	movs	r4, #1
   38f1a:	e7f7      	b.n	38f0c <read_cb+0x44>

00038f1c <att_write_cmd>:
{
   38f1c:	b530      	push	{r4, r5, lr}
   38f1e:	460c      	mov	r4, r1
   38f20:	b085      	sub	sp, #20
   38f22:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   38f24:	f101 0008 	add.w	r0, r1, #8
   38f28:	f000 fbde 	bl	396e8 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   38f2c:	89a2      	ldrh	r2, [r4, #12]
   38f2e:	9202      	str	r2, [sp, #8]
   38f30:	68a2      	ldr	r2, [r4, #8]
   38f32:	9201      	str	r2, [sp, #4]
   38f34:	2200      	movs	r2, #0
   38f36:	4603      	mov	r3, r0
   38f38:	9200      	str	r2, [sp, #0]
   38f3a:	4611      	mov	r1, r2
   38f3c:	4628      	mov	r0, r5
   38f3e:	f7ee f859 	bl	26ff4 <att_write_rsp>
}
   38f42:	b005      	add	sp, #20
   38f44:	bd30      	pop	{r4, r5, pc}

00038f46 <att_write_req>:
{
   38f46:	b530      	push	{r4, r5, lr}
   38f48:	460c      	mov	r4, r1
   38f4a:	b085      	sub	sp, #20
   38f4c:	4605      	mov	r5, r0
   38f4e:	f101 0008 	add.w	r0, r1, #8
   38f52:	f000 fbc9 	bl	396e8 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   38f56:	89a2      	ldrh	r2, [r4, #12]
   38f58:	9202      	str	r2, [sp, #8]
   38f5a:	68a2      	ldr	r2, [r4, #8]
   38f5c:	9201      	str	r2, [sp, #4]
   38f5e:	2200      	movs	r2, #0
   38f60:	4603      	mov	r3, r0
   38f62:	9200      	str	r2, [sp, #0]
   38f64:	2112      	movs	r1, #18
   38f66:	2213      	movs	r2, #19
   38f68:	4628      	mov	r0, r5
   38f6a:	f7ee f843 	bl	26ff4 <att_write_rsp>
}
   38f6e:	b005      	add	sp, #20
   38f70:	bd30      	pop	{r4, r5, pc}

00038f72 <att_read_blob_req>:
{
   38f72:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   38f74:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   38f76:	8813      	ldrh	r3, [r2, #0]
   38f78:	8852      	ldrh	r2, [r2, #2]
   38f7a:	9200      	str	r2, [sp, #0]
   38f7c:	210c      	movs	r1, #12
   38f7e:	220d      	movs	r2, #13
   38f80:	f7ee fac4 	bl	2750c <att_read_rsp>
}
   38f84:	b003      	add	sp, #12
   38f86:	f85d fb04 	ldr.w	pc, [sp], #4

00038f8a <att_read_req>:
{
   38f8a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   38f8c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   38f8e:	2200      	movs	r2, #0
   38f90:	881b      	ldrh	r3, [r3, #0]
   38f92:	9200      	str	r2, [sp, #0]
   38f94:	210a      	movs	r1, #10
   38f96:	220b      	movs	r2, #11
   38f98:	f7ee fab8 	bl	2750c <att_read_rsp>
}
   38f9c:	b003      	add	sp, #12
   38f9e:	f85d fb04 	ldr.w	pc, [sp], #4

00038fa2 <bt_att_init>:
	bt_gatt_init();
   38fa2:	f7ef bb05 	b.w	285b0 <bt_gatt_init>

00038fa6 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   38fa6:	898a      	ldrh	r2, [r1, #12]
   38fa8:	6889      	ldr	r1, [r1, #8]
   38faa:	2300      	movs	r3, #0
   38fac:	f7ee bc68 	b.w	27880 <att_handle_rsp>

00038fb0 <att_handle_find_type_rsp>:
   38fb0:	f7ff bff9 	b.w	38fa6 <att_handle_find_info_rsp>

00038fb4 <att_handle_read_type_rsp>:
   38fb4:	f7ff bff7 	b.w	38fa6 <att_handle_find_info_rsp>

00038fb8 <att_handle_read_rsp>:
   38fb8:	f7ff bff5 	b.w	38fa6 <att_handle_find_info_rsp>

00038fbc <att_handle_read_blob_rsp>:
   38fbc:	f7ff bff3 	b.w	38fa6 <att_handle_find_info_rsp>

00038fc0 <att_handle_read_mult_rsp>:
   38fc0:	f7ff bff1 	b.w	38fa6 <att_handle_find_info_rsp>

00038fc4 <att_handle_read_group_rsp>:
   38fc4:	f7ff bfef 	b.w	38fa6 <att_handle_find_info_rsp>

00038fc8 <att_handle_write_rsp>:
   38fc8:	f7ff bfed 	b.w	38fa6 <att_handle_find_info_rsp>

00038fcc <att_handle_prepare_write_rsp>:
   38fcc:	f7ff bfeb 	b.w	38fa6 <att_handle_find_info_rsp>

00038fd0 <att_handle_exec_write_rsp>:
   38fd0:	f7ff bfe9 	b.w	38fa6 <att_handle_find_info_rsp>

00038fd4 <att_confirm>:
   38fd4:	f7ff bfe7 	b.w	38fa6 <att_handle_find_info_rsp>

00038fd8 <att_mtu_rsp>:
{
   38fd8:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   38fda:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   38fdc:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   38fde:	2b16      	cmp	r3, #22
{
   38fe0:	4604      	mov	r4, r0
   38fe2:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   38fe4:	d806      	bhi.n	38ff4 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   38fe6:	2200      	movs	r2, #0
   38fe8:	2304      	movs	r3, #4
   38fea:	4611      	mov	r1, r2
}
   38fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   38ff0:	f7ee bc46 	b.w	27880 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   38ff4:	2b84      	cmp	r3, #132	; 0x84
   38ff6:	bf28      	it	cs
   38ff8:	2384      	movcs	r3, #132	; 0x84
   38ffa:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   38ffe:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   39002:	f7ff fd49 	bl	38a98 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   39006:	89aa      	ldrh	r2, [r5, #12]
   39008:	2300      	movs	r3, #0
   3900a:	4631      	mov	r1, r6
   3900c:	4620      	mov	r0, r4
   3900e:	e7ed      	b.n	38fec <att_mtu_rsp+0x14>

00039010 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   39010:	6010      	str	r0, [r2, #0]
}
   39012:	2000      	movs	r0, #0
   39014:	4770      	bx	lr

00039016 <gatt_ccc_changed>:
{
   39016:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   39018:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   3901a:	895a      	ldrh	r2, [r3, #10]
   3901c:	428a      	cmp	r2, r1
   3901e:	d003      	beq.n	39028 <gatt_ccc_changed+0x12>
		ccc->value = value;
   39020:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   39022:	68db      	ldr	r3, [r3, #12]
   39024:	b103      	cbz	r3, 39028 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   39026:	4718      	bx	r3
}
   39028:	4770      	bx	lr

0003902a <gatt_indicate_rsp>:
{
   3902a:	b510      	push	{r4, lr}
   3902c:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   3902e:	68a3      	ldr	r3, [r4, #8]
{
   39030:	460a      	mov	r2, r1
	if (params->func) {
   39032:	b10b      	cbz	r3, 39038 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   39034:	4621      	mov	r1, r4
   39036:	4798      	blx	r3
	params->_ref--;
   39038:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   3903a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   3903c:	3b01      	subs	r3, #1
   3903e:	b2db      	uxtb	r3, r3
   39040:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   39042:	b122      	cbz	r2, 3904e <gatt_indicate_rsp+0x24>
   39044:	b91b      	cbnz	r3, 3904e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   39046:	4620      	mov	r0, r4
}
   39048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   3904c:	4710      	bx	r2
}
   3904e:	bd10      	pop	{r4, pc}

00039050 <match_uuid>:
	data->attr = attr;
   39050:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   39052:	8091      	strh	r1, [r2, #4]
}
   39054:	2000      	movs	r0, #0
   39056:	4770      	bx	lr

00039058 <ccc_set_cb>:
}
   39058:	2000      	movs	r0, #0
   3905a:	4770      	bx	lr

0003905c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3905c:	f3bf 8f5b 	dmb	ish
   39060:	6800      	ldr	r0, [r0, #0]
   39062:	f3bf 8f5b 	dmb	ish
}
   39066:	4770      	bx	lr

00039068 <gen_hash_m>:
{
   39068:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   3906a:	6807      	ldr	r7, [r0, #0]
   3906c:	783d      	ldrb	r5, [r7, #0]
{
   3906e:	b089      	sub	sp, #36	; 0x24
   39070:	4606      	mov	r6, r0
   39072:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   39074:	b10d      	cbz	r5, 3907a <gen_hash_m+0x12>
	switch (u16->val) {
   39076:	2501      	movs	r5, #1
   39078:	e014      	b.n	390a4 <gen_hash_m+0x3c>
   3907a:	887b      	ldrh	r3, [r7, #2]
   3907c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   39080:	d004      	beq.n	3908c <gen_hash_m+0x24>
   39082:	d812      	bhi.n	390aa <gen_hash_m+0x42>
   39084:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   39088:	2b03      	cmp	r3, #3
   3908a:	d8f4      	bhi.n	39076 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   3908c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   39090:	2202      	movs	r2, #2
   39092:	f10d 010e 	add.w	r1, sp, #14
   39096:	4620      	mov	r0, r4
   39098:	f7fe ff19 	bl	37ece <tc_cmac_update>
   3909c:	b9e0      	cbnz	r0, 390d8 <gen_hash_m+0x70>
			state->err = -EINVAL;
   3909e:	f06f 0315 	mvn.w	r3, #21
   390a2:	65a3      	str	r3, [r4, #88]	; 0x58
}
   390a4:	4628      	mov	r0, r5
   390a6:	b009      	add	sp, #36	; 0x24
   390a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   390aa:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   390ae:	33ff      	adds	r3, #255	; 0xff
   390b0:	b29b      	uxth	r3, r3
   390b2:	2b04      	cmp	r3, #4
   390b4:	d8df      	bhi.n	39076 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   390b6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   390ba:	2202      	movs	r2, #2
   390bc:	f10d 010e 	add.w	r1, sp, #14
   390c0:	4620      	mov	r0, r4
   390c2:	f7fe ff04 	bl	37ece <tc_cmac_update>
   390c6:	2800      	cmp	r0, #0
   390c8:	d0e9      	beq.n	3909e <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   390ca:	887b      	ldrh	r3, [r7, #2]
   390cc:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   390d0:	2202      	movs	r2, #2
   390d2:	f10d 010e 	add.w	r1, sp, #14
   390d6:	e017      	b.n	39108 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   390d8:	887b      	ldrh	r3, [r7, #2]
   390da:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   390de:	2202      	movs	r2, #2
   390e0:	f10d 010e 	add.w	r1, sp, #14
   390e4:	4620      	mov	r0, r4
   390e6:	f7fe fef2 	bl	37ece <tc_cmac_update>
   390ea:	2800      	cmp	r0, #0
   390ec:	d0d7      	beq.n	3909e <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   390ee:	2000      	movs	r0, #0
   390f0:	2310      	movs	r3, #16
   390f2:	eb0d 0203 	add.w	r2, sp, r3
   390f6:	6877      	ldr	r7, [r6, #4]
   390f8:	9000      	str	r0, [sp, #0]
   390fa:	4631      	mov	r1, r6
   390fc:	47b8      	blx	r7
		if (len < 0) {
   390fe:	1e02      	subs	r2, r0, #0
   39100:	da01      	bge.n	39106 <gen_hash_m+0x9e>
			state->err = len;
   39102:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   39104:	e7ce      	b.n	390a4 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   39106:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   39108:	4620      	mov	r0, r4
   3910a:	f7fe fee0 	bl	37ece <tc_cmac_update>
   3910e:	2800      	cmp	r0, #0
   39110:	d1b1      	bne.n	39076 <gen_hash_m+0xe>
   39112:	e7c4      	b.n	3909e <gen_hash_m+0x36>

00039114 <atomic_or>:
{
   39114:	4603      	mov	r3, r0
}
   39116:	f3bf 8f5b 	dmb	ish
   3911a:	e853 0f00 	ldrex	r0, [r3]
   3911e:	ea40 0201 	orr.w	r2, r0, r1
   39122:	e843 2c00 	strex	ip, r2, [r3]
   39126:	f1bc 0f00 	cmp.w	ip, #0
   3912a:	d1f6      	bne.n	3911a <atomic_or+0x6>
   3912c:	f3bf 8f5b 	dmb	ish
   39130:	4770      	bx	lr

00039132 <bt_addr_le_cmp>:
   39132:	2207      	movs	r2, #7
   39134:	f001 b9d7 	b.w	3a4e6 <memcmp>

00039138 <find_ccc_cfg>:
{
   39138:	b513      	push	{r0, r1, r4, lr}
   3913a:	1c4a      	adds	r2, r1, #1
   3913c:	460c      	mov	r4, r1
		if (conn) {
   3913e:	b140      	cbz	r0, 39152 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   39140:	7809      	ldrb	r1, [r1, #0]
   39142:	f7ff fab9 	bl	386b8 <bt_conn_is_peer_addr_le>
   39146:	2800      	cmp	r0, #0
	return NULL;
   39148:	bf08      	it	eq
   3914a:	2400      	moveq	r4, #0
}
   3914c:	4620      	mov	r0, r4
   3914e:	b002      	add	sp, #8
   39150:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   39152:	9000      	str	r0, [sp, #0]
   39154:	4669      	mov	r1, sp
   39156:	f8cd 0003 	str.w	r0, [sp, #3]
   3915a:	4610      	mov	r0, r2
   3915c:	f7ff ffe9 	bl	39132 <bt_addr_le_cmp>
   39160:	2800      	cmp	r0, #0
	return NULL;
   39162:	bf18      	it	ne
   39164:	2400      	movne	r4, #0
   39166:	e7f1      	b.n	3914c <find_ccc_cfg+0x14>

00039168 <ccc_find_cfg>:
{
   39168:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   3916a:	7803      	ldrb	r3, [r0, #0]
   3916c:	4293      	cmp	r3, r2
{
   3916e:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   39170:	d001      	beq.n	39176 <ccc_find_cfg+0xe>
	return NULL;
   39172:	2000      	movs	r0, #0
}
   39174:	bd10      	pop	{r4, pc}
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   39176:	3001      	adds	r0, #1
   39178:	f7ff ffdb 	bl	39132 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   3917c:	2800      	cmp	r0, #0
   3917e:	d1f8      	bne.n	39172 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   39180:	4620      	mov	r0, r4
   39182:	e7f7      	b.n	39174 <ccc_find_cfg+0xc>

00039184 <atomic_and>:
{
   39184:	4603      	mov	r3, r0
}
   39186:	f3bf 8f5b 	dmb	ish
   3918a:	e853 0f00 	ldrex	r0, [r3]
   3918e:	ea00 0201 	and.w	r2, r0, r1
   39192:	e843 2c00 	strex	ip, r2, [r3]
   39196:	f1bc 0f00 	cmp.w	ip, #0
   3919a:	d1f6      	bne.n	3918a <atomic_and+0x6>
   3919c:	f3bf 8f5b 	dmb	ish
   391a0:	4770      	bx	lr

000391a2 <bt_addr_le_copy>:
   391a2:	680b      	ldr	r3, [r1, #0]
   391a4:	6003      	str	r3, [r0, #0]
   391a6:	888b      	ldrh	r3, [r1, #4]
   391a8:	8083      	strh	r3, [r0, #4]
   391aa:	798b      	ldrb	r3, [r1, #6]
   391ac:	7183      	strb	r3, [r0, #6]
}
   391ae:	4770      	bx	lr

000391b0 <clear_ccc_cfg>:
{
   391b0:	b513      	push	{r0, r1, r4, lr}
   391b2:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   391b4:	2400      	movs	r4, #0
   391b6:	4669      	mov	r1, sp
   391b8:	3001      	adds	r0, #1
   391ba:	9400      	str	r4, [sp, #0]
   391bc:	f8cd 4003 	str.w	r4, [sp, #3]
   391c0:	f7ff ffef 	bl	391a2 <bt_addr_le_copy>
	cfg->id = 0U;
   391c4:	7014      	strb	r4, [r2, #0]
	cfg->value = 0U;
   391c6:	8114      	strh	r4, [r2, #8]
}
   391c8:	b002      	add	sp, #8
   391ca:	bd10      	pop	{r4, pc}

000391cc <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   391cc:	2300      	movs	r3, #0
   391ce:	6003      	str	r3, [r0, #0]
   391d0:	6043      	str	r3, [r0, #4]
   391d2:	6083      	str	r3, [r0, #8]
}
   391d4:	4770      	bx	lr

000391d6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   391d6:	2a02      	cmp	r2, #2
{
   391d8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   391da:	d108      	bne.n	391ee <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   391dc:	2300      	movs	r3, #0
   391de:	f100 0190 	add.w	r1, r0, #144	; 0x90
   391e2:	461a      	mov	r2, r3
   391e4:	7a00      	ldrb	r0, [r0, #8]
   391e6:	f7ee fe2b 	bl	27e40 <sc_save>
}
   391ea:	2002      	movs	r0, #2
   391ec:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   391ee:	f7ef f81b 	bl	28228 <sc_clear>
   391f2:	e7fa      	b.n	391ea <sc_ccc_cfg_write+0x14>

000391f4 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   391f4:	b538      	push	{r3, r4, r5, lr}
   391f6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   391fa:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   391fc:	460c      	mov	r4, r1
   391fe:	4611      	mov	r1, r2
	if (offset > value_len) {
   39200:	d30a      	bcc.n	39218 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   39202:	1aad      	subs	r5, r5, r2
   39204:	42a5      	cmp	r5, r4
   39206:	bfa8      	it	ge
   39208:	4625      	movge	r5, r4
   3920a:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3920c:	462a      	mov	r2, r5
   3920e:	4419      	add	r1, r3
   39210:	f001 f977 	bl	3a502 <memcpy>
}
   39214:	4628      	mov	r0, r5
   39216:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   39218:	f06f 0506 	mvn.w	r5, #6
   3921c:	e7fa      	b.n	39214 <bt_gatt_attr_read.constprop.0+0x20>

0003921e <bt_gatt_attr_read_ccc>:
{
   3921e:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   39220:	68c9      	ldr	r1, [r1, #12]
{
   39222:	b085      	sub	sp, #20
   39224:	4614      	mov	r4, r2
   39226:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   39228:	f7ff ff86 	bl	39138 <find_ccc_cfg>
	if (cfg) {
   3922c:	b100      	cbz	r0, 39230 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   3922e:	8900      	ldrh	r0, [r0, #8]
   39230:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   39234:	2302      	movs	r3, #2
   39236:	9300      	str	r3, [sp, #0]
   39238:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   3923c:	f10d 030e 	add.w	r3, sp, #14
   39240:	4629      	mov	r1, r5
   39242:	4620      	mov	r0, r4
   39244:	f7ff ffd6 	bl	391f4 <bt_gatt_attr_read.constprop.0>
}
   39248:	b005      	add	sp, #20
   3924a:	bd30      	pop	{r4, r5, pc}

0003924c <bt_gatt_attr_read_service>:
{
   3924c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3924e:	460c      	mov	r4, r1
   39250:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   39252:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   39254:	781c      	ldrb	r4, [r3, #0]
{
   39256:	4610      	mov	r0, r2
   39258:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   3925c:	b954      	cbnz	r4, 39274 <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   3925e:	885b      	ldrh	r3, [r3, #2]
   39260:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   39264:	2302      	movs	r3, #2
   39266:	9300      	str	r3, [sp, #0]
   39268:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   3926c:	f7ff ffc2 	bl	391f4 <bt_gatt_attr_read.constprop.0>
}
   39270:	b004      	add	sp, #16
   39272:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   39274:	2410      	movs	r4, #16
   39276:	9400      	str	r4, [sp, #0]
   39278:	3301      	adds	r3, #1
   3927a:	e7f7      	b.n	3926c <bt_gatt_attr_read_service+0x20>

0003927c <cf_read>:
{
   3927c:	b530      	push	{r4, r5, lr}
   3927e:	b085      	sub	sp, #20
   39280:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   39282:	2300      	movs	r3, #0
{
   39284:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   39286:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   3928a:	f7ee fcdf 	bl	27c4c <find_cf_cfg>
	if (cfg) {
   3928e:	b110      	cbz	r0, 39296 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   39290:	7a03      	ldrb	r3, [r0, #8]
   39292:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   39296:	2301      	movs	r3, #1
   39298:	9300      	str	r3, [sp, #0]
   3929a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   3929e:	ab03      	add	r3, sp, #12
   392a0:	4629      	mov	r1, r5
   392a2:	4620      	mov	r0, r4
   392a4:	f7ff ffa6 	bl	391f4 <bt_gatt_attr_read.constprop.0>
}
   392a8:	b005      	add	sp, #20
   392aa:	bd30      	pop	{r4, r5, pc}

000392ac <read_name>:
{
   392ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   392b0:	4614      	mov	r4, r2
   392b2:	461d      	mov	r5, r3
   392b4:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   392b8:	f7eb fbc2 	bl	24a40 <bt_get_name>
   392bc:	4606      	mov	r6, r0
				 strlen(name));
   392be:	f7df f873 	bl	183a8 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   392c2:	b280      	uxth	r0, r0
   392c4:	9006      	str	r0, [sp, #24]
   392c6:	4633      	mov	r3, r6
   392c8:	463a      	mov	r2, r7
   392ca:	4629      	mov	r1, r5
   392cc:	4620      	mov	r0, r4
}
   392ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   392d2:	f7ff bf8f 	b.w	391f4 <bt_gatt_attr_read.constprop.0>

000392d6 <read_appearance>:
{
   392d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   392d8:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   392da:	f240 3341 	movw	r3, #833	; 0x341
   392de:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   392e2:	2302      	movs	r3, #2
   392e4:	9300      	str	r3, [sp, #0]
{
   392e6:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   392e8:	f10d 030e 	add.w	r3, sp, #14
   392ec:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   392f0:	f7ff ff80 	bl	391f4 <bt_gatt_attr_read.constprop.0>
}
   392f4:	b005      	add	sp, #20
   392f6:	f85d fb04 	ldr.w	pc, [sp], #4

000392fa <clear_cf_cfg>:
{
   392fa:	b513      	push	{r0, r1, r4, lr}
   392fc:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   392fe:	2400      	movs	r4, #0
   39300:	4669      	mov	r1, sp
   39302:	3001      	adds	r0, #1
   39304:	9400      	str	r4, [sp, #0]
   39306:	f8cd 4003 	str.w	r4, [sp, #3]
   3930a:	f7ff ff4a 	bl	391a2 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   3930e:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   39310:	320c      	adds	r2, #12
   39312:	f3bf 8f5b 	dmb	ish
   39316:	e852 3f00 	ldrex	r3, [r2]
   3931a:	e842 4100 	strex	r1, r4, [r2]
   3931e:	2900      	cmp	r1, #0
   39320:	d1f9      	bne.n	39316 <clear_cf_cfg+0x1c>
   39322:	f3bf 8f5b 	dmb	ish
}
   39326:	b002      	add	sp, #8
   39328:	bd10      	pop	{r4, pc}

0003932a <gatt_write_ccc_buf>:
{
   3932a:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   3932c:	f100 0508 	add.w	r5, r0, #8
   39330:	2102      	movs	r1, #2
   39332:	4628      	mov	r0, r5
   39334:	4614      	mov	r4, r2
   39336:	f7f0 fe7d 	bl	2a034 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   3933a:	8963      	ldrh	r3, [r4, #10]
   3933c:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   3933e:	89a1      	ldrh	r1, [r4, #12]
   39340:	4628      	mov	r0, r5
   39342:	f000 f9f8 	bl	39736 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   39346:	2104      	movs	r1, #4
   39348:	f104 0010 	add.w	r0, r4, #16
   3934c:	f7ff fee2 	bl	39114 <atomic_or>
}
   39350:	2000      	movs	r0, #0
   39352:	bd38      	pop	{r3, r4, r5, pc}

00039354 <sc_restore_rsp>:
{
   39354:	b538      	push	{r3, r4, r5, lr}
   39356:	4605      	mov	r5, r0
   39358:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   3935a:	f7ee fc77 	bl	27c4c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   3935e:	b130      	cbz	r0, 3936e <sc_restore_rsp+0x1a>
   39360:	7a03      	ldrb	r3, [r0, #8]
   39362:	07db      	lsls	r3, r3, #31
   39364:	d503      	bpl.n	3936e <sc_restore_rsp+0x1a>
   39366:	2101      	movs	r1, #1
   39368:	300c      	adds	r0, #12
   3936a:	f7ff fed3 	bl	39114 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   3936e:	b954      	cbnz	r4, 39386 <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   39370:	7a28      	ldrb	r0, [r5, #8]
   39372:	f105 0190 	add.w	r1, r5, #144	; 0x90
   39376:	f7ee fc97 	bl	27ca8 <find_sc_cfg>
		if (sc_cfg) {
   3937a:	b120      	cbz	r0, 39386 <sc_restore_rsp+0x32>
   3937c:	6084      	str	r4, [r0, #8]
}
   3937e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   39382:	f7ee bcff 	b.w	27d84 <sc_store>
}
   39386:	bd38      	pop	{r3, r4, r5, pc}

00039388 <gatt_sub_remove>:
{
   39388:	b538      	push	{r3, r4, r5, lr}
   3938a:	460c      	mov	r4, r1
	if (params) {
   3938c:	4619      	mov	r1, r3
   3938e:	b16b      	cbz	r3, 393ac <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   39390:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   39394:	695b      	ldr	r3, [r3, #20]
   39396:	b982      	cbnz	r2, 393ba <gatt_sub_remove+0x32>
   39398:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   3939a:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   3939c:	4295      	cmp	r5, r2
   3939e:	d100      	bne.n	393a2 <gatt_sub_remove+0x1a>
	list->tail = node;
   393a0:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   393a2:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   393a4:	680d      	ldr	r5, [r1, #0]
   393a6:	614b      	str	r3, [r1, #20]
   393a8:	461a      	mov	r2, r3
   393aa:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   393ac:	68a3      	ldr	r3, [r4, #8]
   393ae:	b953      	cbnz	r3, 393c6 <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   393b0:	4620      	mov	r0, r4
}
   393b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   393b6:	f7ee bd87 	b.w	27ec8 <gatt_sub_free>
   393ba:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   393bc:	68e3      	ldr	r3, [r4, #12]
   393be:	429d      	cmp	r5, r3
	list->tail = node;
   393c0:	bf08      	it	eq
   393c2:	60e2      	streq	r2, [r4, #12]
}
   393c4:	e7ed      	b.n	393a2 <gatt_sub_remove+0x1a>
}
   393c6:	bd38      	pop	{r3, r4, r5, pc}

000393c8 <gatt_write_ccc_rsp>:
{
   393c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   393cc:	9c06      	ldr	r4, [sp, #24]
   393ce:	460e      	mov	r6, r1
   393d0:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   393d2:	f06f 0104 	mvn.w	r1, #4
   393d6:	f104 0010 	add.w	r0, r4, #16
   393da:	f7ff fed3 	bl	39184 <atomic_and>
	if (err) {
   393de:	b1e6      	cbz	r6, 3941a <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   393e0:	4628      	mov	r0, r5
   393e2:	f7ee fc81 	bl	27ce8 <gatt_sub_find>
		if (!sub) {
   393e6:	4601      	mov	r1, r0
   393e8:	b308      	cbz	r0, 3942e <gatt_write_ccc_rsp+0x66>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   393ea:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   393ec:	b143      	cbz	r3, 39400 <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   393ee:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   393f0:	f104 0014 	add.w	r0, r4, #20
   393f4:	4283      	cmp	r3, r0
   393f6:	d10b      	bne.n	39410 <gatt_write_ccc_rsp+0x48>
				gatt_sub_remove(conn, sub, tmp, params);
   393f8:	4623      	mov	r3, r4
   393fa:	4628      	mov	r0, r5
   393fc:	f7ff ffc4 	bl	39388 <gatt_sub_remove>
	if (params->write) {
   39400:	6863      	ldr	r3, [r4, #4]
   39402:	b1a3      	cbz	r3, 3942e <gatt_write_ccc_rsp+0x66>
		params->write(conn, err, NULL);
   39404:	4631      	mov	r1, r6
   39406:	4628      	mov	r0, r5
   39408:	2200      	movs	r2, #0
}
   3940a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   3940e:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   39410:	2a00      	cmp	r2, #0
   39412:	d0f5      	beq.n	39400 <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   39414:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   39416:	6812      	ldr	r2, [r2, #0]
   39418:	e7ec      	b.n	393f4 <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   3941a:	89a3      	ldrh	r3, [r4, #12]
   3941c:	2b00      	cmp	r3, #0
   3941e:	d1ef      	bne.n	39400 <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   39420:	6827      	ldr	r7, [r4, #0]
   39422:	4633      	mov	r3, r6
   39424:	4632      	mov	r2, r6
   39426:	4621      	mov	r1, r4
   39428:	4628      	mov	r0, r5
   3942a:	47b8      	blx	r7
   3942c:	e7e8      	b.n	39400 <gatt_write_ccc_rsp+0x38>
}
   3942e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00039432 <gatt_req_send>:
{
   39432:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39436:	4606      	mov	r6, r0
   39438:	4688      	mov	r8, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   3943a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   3943e:	2100      	movs	r1, #0
{
   39440:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   39444:	4614      	mov	r4, r2
   39446:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   39448:	f7ee f9f2 	bl	27830 <bt_att_req_alloc>
	if (!req) {
   3944c:	4605      	mov	r5, r0
   3944e:	b920      	cbnz	r0, 3945a <gatt_req_send+0x28>
		return -ENOMEM;
   39450:	f06f 040b 	mvn.w	r4, #11
}
   39454:	4620      	mov	r0, r4
   39456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req->func = func;
   3945a:	f8c0 8004 	str.w	r8, [r0, #4]
	req->user_data = params;
   3945e:	60c4      	str	r4, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   39460:	f89d 1020 	ldrb.w	r1, [sp, #32]
   39464:	464a      	mov	r2, r9
   39466:	4630      	mov	r0, r6
   39468:	f7ed fe2c 	bl	270c4 <bt_att_create_pdu>
	if (!buf) {
   3946c:	b918      	cbnz	r0, 39476 <gatt_req_send+0x44>
		bt_att_req_free(req);
   3946e:	4628      	mov	r0, r5
   39470:	f7ee f9f4 	bl	2785c <bt_att_req_free>
   39474:	e7ec      	b.n	39450 <gatt_req_send+0x1e>
	err = encode(buf, len, params);
   39476:	4622      	mov	r2, r4
	req->buf = buf;
   39478:	60a8      	str	r0, [r5, #8]
	err = encode(buf, len, params);
   3947a:	4649      	mov	r1, r9
   3947c:	47b8      	blx	r7
	if (err) {
   3947e:	4604      	mov	r4, r0
   39480:	b118      	cbz	r0, 3948a <gatt_req_send+0x58>
		bt_att_req_free(req);
   39482:	4628      	mov	r0, r5
   39484:	f7ee f9ea 	bl	2785c <bt_att_req_free>
   39488:	e7e4      	b.n	39454 <gatt_req_send+0x22>
	err = bt_att_req_send(conn, req);
   3948a:	4629      	mov	r1, r5
   3948c:	4630      	mov	r0, r6
   3948e:	f7ee fb33 	bl	27af8 <bt_att_req_send>
	if (err) {
   39492:	4604      	mov	r4, r0
   39494:	2800      	cmp	r0, #0
   39496:	d0dd      	beq.n	39454 <gatt_req_send+0x22>
   39498:	e7f3      	b.n	39482 <gatt_req_send+0x50>

0003949a <bt_gatt_attr_value_handle>:
{
   3949a:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   3949c:	4604      	mov	r4, r0
   3949e:	b910      	cbnz	r0, 394a6 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   394a0:	2000      	movs	r0, #0
}
   394a2:	b002      	add	sp, #8
   394a4:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   394a6:	2300      	movs	r3, #0
   394a8:	f88d 3004 	strb.w	r3, [sp, #4]
   394ac:	6800      	ldr	r0, [r0, #0]
   394ae:	f642 0303 	movw	r3, #10243	; 0x2803
   394b2:	a901      	add	r1, sp, #4
   394b4:	f8ad 3006 	strh.w	r3, [sp, #6]
   394b8:	f7fe fe1f 	bl	380fa <bt_uuid_cmp>
   394bc:	2800      	cmp	r0, #0
   394be:	d1ef      	bne.n	394a0 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   394c0:	68e3      	ldr	r3, [r4, #12]
   394c2:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   394c4:	2800      	cmp	r0, #0
   394c6:	d1ec      	bne.n	394a2 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   394c8:	4620      	mov	r0, r4
   394ca:	f7ef f8ed 	bl	286a8 <bt_gatt_attr_get_handle>
   394ce:	3001      	adds	r0, #1
   394d0:	b280      	uxth	r0, r0
	return handle;
   394d2:	e7e6      	b.n	394a2 <bt_gatt_attr_value_handle+0x8>

000394d4 <bt_gatt_attr_read_chrc>:
{
   394d4:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   394d6:	68ce      	ldr	r6, [r1, #12]
{
   394d8:	b088      	sub	sp, #32
   394da:	4608      	mov	r0, r1
   394dc:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   394de:	79b3      	ldrb	r3, [r6, #6]
   394e0:	f88d 300c 	strb.w	r3, [sp, #12]
{
   394e4:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   394e6:	f7ff ffd8 	bl	3949a <bt_gatt_attr_value_handle>
   394ea:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   394ee:	6830      	ldr	r0, [r6, #0]
   394f0:	7803      	ldrb	r3, [r0, #0]
   394f2:	b96b      	cbnz	r3, 39510 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   394f4:	8843      	ldrh	r3, [r0, #2]
   394f6:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   394fa:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   394fc:	9300      	str	r3, [sp, #0]
   394fe:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   39502:	ab03      	add	r3, sp, #12
   39504:	4629      	mov	r1, r5
   39506:	4620      	mov	r0, r4
   39508:	f7ff fe74 	bl	391f4 <bt_gatt_attr_read.constprop.0>
}
   3950c:	b008      	add	sp, #32
   3950e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   39510:	1c43      	adds	r3, r0, #1
   39512:	f10d 020f 	add.w	r2, sp, #15
   39516:	3011      	adds	r0, #17
   39518:	f853 1b04 	ldr.w	r1, [r3], #4
   3951c:	f842 1b04 	str.w	r1, [r2], #4
   39520:	4283      	cmp	r3, r0
   39522:	d1f9      	bne.n	39518 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   39524:	2313      	movs	r3, #19
   39526:	e7e9      	b.n	394fc <bt_gatt_attr_read_chrc+0x28>

00039528 <bt_gatt_foreach_attr>:
{
   39528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   3952a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   3952e:	2300      	movs	r3, #0
   39530:	9300      	str	r3, [sp, #0]
   39532:	461a      	mov	r2, r3
   39534:	f7ef f904 	bl	28740 <bt_gatt_foreach_attr_type>
}
   39538:	b005      	add	sp, #20
   3953a:	f85d fb04 	ldr.w	pc, [sp], #4

0003953e <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   3953e:	07d3      	lsls	r3, r2, #31
{
   39540:	b510      	push	{r4, lr}
   39542:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   39544:	d504      	bpl.n	39550 <bt_gatt_check_perm+0x12>
   39546:	f014 0f15 	tst.w	r4, #21
   3954a:	d017      	beq.n	3957c <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   3954c:	684b      	ldr	r3, [r1, #4]
   3954e:	b1ab      	cbz	r3, 3957c <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   39550:	0793      	lsls	r3, r2, #30
   39552:	d504      	bpl.n	3955e <bt_gatt_check_perm+0x20>
   39554:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   39558:	d012      	beq.n	39580 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   3955a:	688b      	ldr	r3, [r1, #8]
   3955c:	b183      	cbz	r3, 39580 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   3955e:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   39560:	f014 0f30 	tst.w	r4, #48	; 0x30
   39564:	d104      	bne.n	39570 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   39566:	f014 000c 	ands.w	r0, r4, #12
   3956a:	bf18      	it	ne
   3956c:	200f      	movne	r0, #15
}
   3956e:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   39570:	f7ff f8a0 	bl	386b4 <bt_conn_get_security>
   39574:	2802      	cmp	r0, #2
   39576:	d8f6      	bhi.n	39566 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   39578:	2005      	movs	r0, #5
   3957a:	e7f8      	b.n	3956e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   3957c:	2002      	movs	r0, #2
   3957e:	e7f6      	b.n	3956e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   39580:	2003      	movs	r0, #3
   39582:	e7f4      	b.n	3956e <bt_gatt_check_perm+0x30>

00039584 <bt_gatt_notification>:
{
   39584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39588:	4607      	mov	r7, r0
   3958a:	4688      	mov	r8, r1
   3958c:	4691      	mov	r9, r2
   3958e:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   39590:	f7ee fbaa 	bl	27ce8 <gatt_sub_find>
	if (!sub) {
   39594:	b1f8      	cbz	r0, 395d6 <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   39596:	6883      	ldr	r3, [r0, #8]
   39598:	b1eb      	cbz	r3, 395d6 <bt_gatt_notification+0x52>
   3959a:	f1b3 0614 	subs.w	r6, r3, #20
   3959e:	d01a      	beq.n	395d6 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   395a0:	681c      	ldr	r4, [r3, #0]
   395a2:	b104      	cbz	r4, 395a6 <bt_gatt_notification+0x22>
   395a4:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   395a6:	8933      	ldrh	r3, [r6, #8]
   395a8:	4543      	cmp	r3, r8
   395aa:	d10a      	bne.n	395c2 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   395ac:	6835      	ldr	r5, [r6, #0]
   395ae:	4653      	mov	r3, sl
   395b0:	464a      	mov	r2, r9
   395b2:	4631      	mov	r1, r6
   395b4:	4638      	mov	r0, r7
   395b6:	47a8      	blx	r5
   395b8:	b918      	cbnz	r0, 395c2 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   395ba:	4631      	mov	r1, r6
   395bc:	4638      	mov	r0, r7
   395be:	f7ef fe3f 	bl	29240 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   395c2:	b144      	cbz	r4, 395d6 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   395c4:	f114 0514 	adds.w	r5, r4, #20
   395c8:	d002      	beq.n	395d0 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   395ca:	6965      	ldr	r5, [r4, #20]
   395cc:	b105      	cbz	r5, 395d0 <bt_gatt_notification+0x4c>
   395ce:	3d14      	subs	r5, #20
{
   395d0:	4626      	mov	r6, r4
   395d2:	462c      	mov	r4, r5
   395d4:	e7e7      	b.n	395a6 <bt_gatt_notification+0x22>
}
   395d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000395da <bt_gatt_change_aware>:
{
   395da:	b538      	push	{r3, r4, r5, lr}
   395dc:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   395de:	f7ee fb35 	bl	27c4c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   395e2:	b910      	cbnz	r0, 395ea <bt_gatt_change_aware+0x10>
		return true;
   395e4:	2501      	movs	r5, #1
}
   395e6:	4628      	mov	r0, r5
   395e8:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   395ea:	7a03      	ldrb	r3, [r0, #8]
   395ec:	07d9      	lsls	r1, r3, #31
   395ee:	d5f9      	bpl.n	395e4 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   395f0:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   395f4:	4620      	mov	r0, r4
   395f6:	f7ff fd31 	bl	3905c <atomic_get>
   395fa:	07c2      	lsls	r2, r0, #31
   395fc:	d4f2      	bmi.n	395e4 <bt_gatt_change_aware+0xa>
	if (!req) {
   395fe:	2d00      	cmp	r5, #0
   39600:	d0f1      	beq.n	395e6 <bt_gatt_change_aware+0xc>
   39602:	4620      	mov	r0, r4
   39604:	f7ff fd2a 	bl	3905c <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   39608:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3960a:	f3c0 0540 	ubfx	r5, r0, #1, #1
   3960e:	d509      	bpl.n	39624 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   39610:	f06f 0102 	mvn.w	r1, #2
   39614:	4620      	mov	r0, r4
   39616:	f7ff fdb5 	bl	39184 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   3961a:	2101      	movs	r1, #1
   3961c:	4620      	mov	r0, r4
   3961e:	f7ff fd79 	bl	39114 <atomic_or>
}
   39622:	e7e0      	b.n	395e6 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   39624:	2102      	movs	r1, #2
   39626:	e7f9      	b.n	3961c <bt_gatt_change_aware+0x42>

00039628 <ccc_delayed_store>:
{
   39628:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   3962a:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   3962e:	4605      	mov	r5, r0
		if (!conn) {
   39630:	b194      	cbz	r4, 39658 <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   39632:	f104 0690 	add.w	r6, r4, #144	; 0x90
   39636:	7a20      	ldrb	r0, [r4, #8]
   39638:	4631      	mov	r1, r6
   3963a:	f7fe fe8b 	bl	38354 <bt_addr_le_is_bonded>
   3963e:	b158      	cbz	r0, 39658 <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   39640:	2300      	movs	r3, #0
   39642:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   39646:	7a20      	ldrb	r0, [r4, #8]
   39648:	4631      	mov	r1, r6
   3964a:	f7ef ff8b 	bl	29564 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   3964e:	4620      	mov	r0, r4
}
   39650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   39654:	f7ec b9c2 	b.w	259dc <bt_conn_unref>
}
   39658:	bd70      	pop	{r4, r5, r6, pc}

0003965a <bt_smp_recv>:
{
   3965a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   3965c:	2100      	movs	r1, #0
   3965e:	f04f 32ff 	mov.w	r2, #4294967295
   39662:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   39666:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   39668:	4608      	mov	r0, r1
   3966a:	f7ff f90b 	bl	38884 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   3966e:	f100 0608 	add.w	r6, r0, #8
   39672:	4604      	mov	r4, r0
   39674:	2101      	movs	r1, #1
   39676:	4630      	mov	r0, r6
   39678:	f7f0 fcdc 	bl	2a034 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   3967c:	2505      	movs	r5, #5
   3967e:	7005      	strb	r5, [r0, #0]
   39680:	2101      	movs	r1, #1
   39682:	4630      	mov	r0, r6
   39684:	f7f0 fcd6 	bl	2a034 <net_buf_simple_add>
   39688:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   3968a:	7005      	strb	r5, [r0, #0]
   3968c:	4622      	mov	r2, r4
   3968e:	9300      	str	r3, [sp, #0]
   39690:	2106      	movs	r1, #6
   39692:	4638      	mov	r0, r7
   39694:	f7ff f8f9 	bl	3888a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   39698:	b110      	cbz	r0, 396a0 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   3969a:	4620      	mov	r0, r4
   3969c:	f7f0 fb9a 	bl	29dd4 <net_buf_unref>
}
   396a0:	2000      	movs	r0, #0
   396a2:	b003      	add	sp, #12
   396a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000396a6 <bt_smp_sign>:
   396a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   396aa:	4770      	bx	lr

000396ac <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   396ac:	2000      	movs	r0, #0
   396ae:	4770      	bx	lr

000396b0 <boot_request_upgrade>:
#endif

}

int boot_request_upgrade(int permanent)
{
   396b0:	b508      	push	{r3, lr}
#ifdef FLASH_AREA_IMAGE_SECONDARY
	int rc;

	rc = boot_set_pending(permanent);
   396b2:	f000 fc44 	bl	39f3e <boot_set_pending>
	if (rc) {
   396b6:	2800      	cmp	r0, #0
		return -EFAULT;
	}
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}
   396b8:	bf18      	it	ne
   396ba:	f06f 000d 	mvnne.w	r0, #13
   396be:	bd08      	pop	{r3, pc}

000396c0 <boot_write_img_confirmed>:

	return flag_val == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   396c0:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   396c2:	f000 fc66 	bl	39f92 <boot_set_confirmed>
	if (rc) {
   396c6:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   396c8:	bf18      	it	ne
   396ca:	f06f 0004 	mvnne.w	r0, #4
   396ce:	bd08      	pop	{r3, pc}

000396d0 <fixed_data_unref>:
}
   396d0:	4770      	bx	lr

000396d2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   396d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   396d4:	6849      	ldr	r1, [r1, #4]
   396d6:	6809      	ldr	r1, [r1, #0]
   396d8:	f7f0 b8d2 	b.w	29880 <net_buf_alloc_len>

000396dc <net_buf_simple_init_with_data>:
	buf->size  = size;
   396dc:	b292      	uxth	r2, r2
	buf->__buf = data;
   396de:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   396e0:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   396e2:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   396e4:	8082      	strh	r2, [r0, #4]
}
   396e6:	4770      	bx	lr

000396e8 <net_buf_simple_pull_le16>:
{
   396e8:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   396ea:	6803      	ldr	r3, [r0, #0]
   396ec:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   396ee:	2102      	movs	r1, #2
   396f0:	f7f0 fc5e 	bl	29fb0 <net_buf_simple_pull>
}
   396f4:	4620      	mov	r0, r4
   396f6:	bd10      	pop	{r4, pc}

000396f8 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   396f8:	6802      	ldr	r2, [r0, #0]
   396fa:	6880      	ldr	r0, [r0, #8]
}
   396fc:	1a10      	subs	r0, r2, r0
   396fe:	4770      	bx	lr

00039700 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   39700:	8883      	ldrh	r3, [r0, #4]
   39702:	88c2      	ldrh	r2, [r0, #6]
   39704:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   39706:	6803      	ldr	r3, [r0, #0]
   39708:	6880      	ldr	r0, [r0, #8]
   3970a:	1a18      	subs	r0, r3, r0
}
   3970c:	1a10      	subs	r0, r2, r0
   3970e:	4770      	bx	lr

00039710 <net_buf_simple_add_mem>:
{
   39710:	b538      	push	{r3, r4, r5, lr}
   39712:	460d      	mov	r5, r1
   39714:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   39716:	4611      	mov	r1, r2
   39718:	f7f0 fc8c 	bl	2a034 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3971c:	4622      	mov	r2, r4
   3971e:	4629      	mov	r1, r5
}
   39720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   39724:	f000 beed 	b.w	3a502 <memcpy>

00039728 <net_buf_simple_add_u8>:
{
   39728:	b510      	push	{r4, lr}
   3972a:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   3972c:	2101      	movs	r1, #1
   3972e:	f7f0 fc81 	bl	2a034 <net_buf_simple_add>
	*u8 = val;
   39732:	7004      	strb	r4, [r0, #0]
}
   39734:	bd10      	pop	{r4, pc}

00039736 <net_buf_simple_add_le16>:
{
   39736:	b510      	push	{r4, lr}
   39738:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   3973a:	2102      	movs	r1, #2
   3973c:	f7f0 fc7a 	bl	2a034 <net_buf_simple_add>
	dst[0] = val;
   39740:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   39742:	0a24      	lsrs	r4, r4, #8
   39744:	7044      	strb	r4, [r0, #1]
}
   39746:	bd10      	pop	{r4, pc}

00039748 <set_starting_state>:
{
   39748:	b510      	push	{r4, lr}
	__asm__ volatile(
   3974a:	f04f 0340 	mov.w	r3, #64	; 0x40
   3974e:	f3ef 8211 	mrs	r2, BASEPRI
   39752:	f383 8812 	msr	BASEPRI_MAX, r3
   39756:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3975a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3975c:	f003 0407 	and.w	r4, r3, #7
   39760:	2c01      	cmp	r4, #1
   39762:	d106      	bne.n	39772 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   39764:	6001      	str	r1, [r0, #0]
	int err = 0;
   39766:	2000      	movs	r0, #0
	__asm__ volatile(
   39768:	f382 8811 	msr	BASEPRI, r2
   3976c:	f3bf 8f6f 	isb	sy
}
   39770:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   39772:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   39776:	428b      	cmp	r3, r1
		err = -EALREADY;
   39778:	bf14      	ite	ne
   3977a:	f04f 30ff 	movne.w	r0, #4294967295
   3977e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   39782:	e7f1      	b.n	39768 <set_starting_state+0x20>

00039784 <set_on_state>:
	__asm__ volatile(
   39784:	f04f 0340 	mov.w	r3, #64	; 0x40
   39788:	f3ef 8211 	mrs	r2, BASEPRI
   3978c:	f383 8812 	msr	BASEPRI_MAX, r3
   39790:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   39794:	6803      	ldr	r3, [r0, #0]
   39796:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3979a:	f043 0302 	orr.w	r3, r3, #2
   3979e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   397a0:	f382 8811 	msr	BASEPRI, r2
   397a4:	f3bf 8f6f 	isb	sy
}
   397a8:	4770      	bx	lr

000397aa <onoff_started_callback>:
	return &data->mgr[type];
   397aa:	6900      	ldr	r0, [r0, #16]
   397ac:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   397ae:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   397b2:	2100      	movs	r1, #0
   397b4:	4710      	bx	r2

000397b6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   397b6:	2000      	movs	r0, #0
   397b8:	f7f4 b83a 	b.w	2d830 <nrfx_clock_start>

000397bc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   397bc:	2000      	movs	r0, #0
   397be:	f7f4 b861 	b.w	2d884 <nrfx_clock_stop>

000397c2 <api_stop>:
	return stop(dev, subsys, CTX_API);
   397c2:	2280      	movs	r2, #128	; 0x80
   397c4:	f7f0 bc9c 	b.w	2a100 <stop>

000397c8 <blocking_start_callback>:
{
   397c8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   397ca:	f7f6 bb79 	b.w	2fec0 <z_impl_k_sem_give>

000397ce <api_start>:
{
   397ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   397d2:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   397d4:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   397d6:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   397d8:	434c      	muls	r4, r1
{
   397da:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   397dc:	f104 0048 	add.w	r0, r4, #72	; 0x48
   397e0:	2180      	movs	r1, #128	; 0x80
   397e2:	4428      	add	r0, r5
{
   397e4:	4690      	mov	r8, r2
   397e6:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   397e8:	f7ff ffae 	bl	39748 <set_starting_state>
	if (err < 0) {
   397ec:	2800      	cmp	r0, #0
   397ee:	db06      	blt.n	397fe <api_start+0x30>
	subdata->cb = cb;
   397f0:	4425      	add	r5, r4
	subdata->user_data = user_data;
   397f2:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   397f6:	6873      	ldr	r3, [r6, #4]
   397f8:	591b      	ldr	r3, [r3, r4]
   397fa:	4798      	blx	r3
	return 0;
   397fc:	2000      	movs	r0, #0
}
   397fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00039802 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   39802:	6843      	ldr	r3, [r0, #4]
   39804:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   39806:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   3980a:	600b      	str	r3, [r1, #0]
}
   3980c:	2000      	movs	r0, #0
   3980e:	4770      	bx	lr

00039810 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   39810:	6843      	ldr	r3, [r0, #4]
   39812:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   39814:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   39818:	4042      	eors	r2, r0
   3981a:	400a      	ands	r2, r1
   3981c:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3981e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   39822:	2000      	movs	r0, #0
   39824:	4770      	bx	lr

00039826 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   39826:	6843      	ldr	r3, [r0, #4]
   39828:	685b      	ldr	r3, [r3, #4]
}
   3982a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   3982c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   39830:	4770      	bx	lr

00039832 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   39832:	6843      	ldr	r3, [r0, #4]
   39834:	685b      	ldr	r3, [r3, #4]
}
   39836:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   39838:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   3983c:	4770      	bx	lr

0003983e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3983e:	6843      	ldr	r3, [r0, #4]
   39840:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   39842:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   39846:	404b      	eors	r3, r1
    p_reg->OUT = value;
   39848:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   3984c:	2000      	movs	r0, #0
   3984e:	4770      	bx	lr

00039850 <is_regular_addr_valid>:
{
   39850:	b538      	push	{r3, r4, r5, lr}
   39852:	4604      	mov	r4, r0
   39854:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   39856:	f000 fc2b 	bl	3a0b0 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   3985a:	4284      	cmp	r4, r0
   3985c:	d209      	bcs.n	39872 <is_regular_addr_valid+0x22>
   3985e:	2c00      	cmp	r4, #0
   39860:	db07      	blt.n	39872 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   39862:	42a8      	cmp	r0, r5
   39864:	d305      	bcc.n	39872 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   39866:	442c      	add	r4, r5
	    len > flash_size ||
   39868:	4284      	cmp	r4, r0
   3986a:	bf8c      	ite	hi
   3986c:	2000      	movhi	r0, #0
   3986e:	2001      	movls	r0, #1
}
   39870:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   39872:	2000      	movs	r0, #0
   39874:	e7fc      	b.n	39870 <is_regular_addr_valid+0x20>

00039876 <nrf_power_pofcon_set.constprop.0>:
    uint32_t pofcon = p_reg->POFCON;
   39876:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3987a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3987e:	f023 031f 	bic.w	r3, r3, #31
   39882:	4303      	orrs	r3, r0
    pofcon |=
   39884:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    p_reg->POFCON = pofcon;
   39888:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   3988c:	4770      	bx	lr

0003988e <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   3988e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   39892:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   39894:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   39896:	2500      	movs	r5, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   39898:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
   3989a:	6025      	str	r5, [r4, #0]
{
   3989c:	460e      	mov	r6, r1
   3989e:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   398a0:	4669      	mov	r1, sp
	info->index = 0U;
   398a2:	60a5      	str	r5, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   398a4:	aa01      	add	r2, sp, #4
   398a6:	4798      	blx	r3

	while (layout_size--) {
   398a8:	e9dd 1c00 	ldrd	r1, ip, [sp]
   398ac:	4628      	mov	r0, r5
		info->size = layout->pages_size;
   398ae:	f101 0e04 	add.w	lr, r1, #4
	while (layout_size--) {
   398b2:	4560      	cmp	r0, ip
   398b4:	d104      	bne.n	398c0 <flash_get_page_info+0x32>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   398b6:	f06f 0015 	mvn.w	r0, #21
}
   398ba:	b003      	add	sp, #12
   398bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   398c0:	f85e 5030 	ldr.w	r5, [lr, r0, lsl #3]
   398c4:	68a2      	ldr	r2, [r4, #8]
   398c6:	f8d4 9000 	ldr.w	r9, [r4]
   398ca:	6065      	str	r5, [r4, #4]
		if (offs == 0) {
   398cc:	b986      	cbnz	r6, 398f0 <flash_get_page_info+0x62>
			index_jmp = index - info->index;
   398ce:	1abb      	subs	r3, r7, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   398d0:	f851 8030 	ldr.w	r8, [r1, r0, lsl #3]
   398d4:	4543      	cmp	r3, r8
   398d6:	bf28      	it	cs
   398d8:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   398da:	fb03 9505 	mla	r5, r3, r5, r9
		info->index += index_jmp;
   398de:	441a      	add	r2, r3
		if (index_jmp < layout->pages_count) {
   398e0:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   398e2:	6025      	str	r5, [r4, #0]
		info->index += index_jmp;
   398e4:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   398e6:	f100 0001 	add.w	r0, r0, #1
   398ea:	d9e2      	bls.n	398b2 <flash_get_page_info+0x24>
			return 0;
   398ec:	2000      	movs	r0, #0
   398ee:	e7e4      	b.n	398ba <flash_get_page_info+0x2c>
			index_jmp = (offs - info->start_offset) / info->size;
   398f0:	eba6 0309 	sub.w	r3, r6, r9
   398f4:	fbb3 f3f5 	udiv	r3, r3, r5
   398f8:	e7ea      	b.n	398d0 <flash_get_page_info+0x42>

000398fa <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   398fa:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   398fc:	2200      	movs	r2, #0
   398fe:	f7ff bfc6 	b.w	3988e <flash_get_page_info>

00039902 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   39902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   39906:	6883      	ldr	r3, [r0, #8]
{
   39908:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   3990a:	695b      	ldr	r3, [r3, #20]
{
   3990c:	4688      	mov	r8, r1
   3990e:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   39910:	a901      	add	r1, sp, #4
   39912:	aa02      	add	r2, sp, #8
   39914:	4798      	blx	r3
	off_t off = 0;
   39916:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   39918:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   3991a:	4625      	mov	r5, r4
   3991c:	9b02      	ldr	r3, [sp, #8]
   3991e:	42ab      	cmp	r3, r5
   39920:	d802      	bhi.n	39928 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   39922:	b006      	add	sp, #24
   39924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   39928:	9f01      	ldr	r7, [sp, #4]
   3992a:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   3992e:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   39930:	687b      	ldr	r3, [r7, #4]
   39932:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   39934:	683a      	ldr	r2, [r7, #0]
   39936:	42b2      	cmp	r2, r6
   39938:	eb0a 0306 	add.w	r3, sl, r6
   3993c:	d802      	bhi.n	39944 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   3993e:	3501      	adds	r5, #1
   39940:	469a      	mov	sl, r3
   39942:	e7eb      	b.n	3991c <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   39944:	4649      	mov	r1, r9
   39946:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   39948:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   3994a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   3994c:	47c0      	blx	r8
   3994e:	2800      	cmp	r0, #0
   39950:	d0e7      	beq.n	39922 <flash_page_foreach+0x20>
			off += page_info.size;
   39952:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   39954:	3601      	adds	r6, #1
			off += page_info.size;
   39956:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   39958:	e7ec      	b.n	39934 <flash_page_foreach+0x32>

0003995a <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   3995a:	6902      	ldr	r2, [r0, #16]
{
   3995c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   3995e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   39962:	e883 0003 	stmia.w	r3, {r0, r1}
}
   39966:	2000      	movs	r0, #0
   39968:	4770      	bx	lr

0003996a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3996a:	6843      	ldr	r3, [r0, #4]
   3996c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3996e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   39972:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   39976:	4770      	bx	lr

00039978 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   39978:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   3997a:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3997c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   39980:	b940      	cbnz	r0, 39994 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   39982:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   39984:	0792      	lsls	r2, r2, #30
   39986:	d406      	bmi.n	39996 <is_tx_ready+0x1e>
   39988:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   3998c:	3800      	subs	r0, #0
   3998e:	bf18      	it	ne
   39990:	2001      	movne	r0, #1
   39992:	4770      	bx	lr
   39994:	2001      	movs	r0, #1
}
   39996:	4770      	bx	lr

00039998 <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   39998:	4770      	bx	lr

0003999a <user_callback>:
	if (data->async->user_callback) {
   3999a:	6903      	ldr	r3, [r0, #16]
   3999c:	68da      	ldr	r2, [r3, #12]
   3999e:	6813      	ldr	r3, [r2, #0]
   399a0:	b10b      	cbz	r3, 399a6 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   399a2:	6852      	ldr	r2, [r2, #4]
   399a4:	4718      	bx	r3
}
   399a6:	4770      	bx	lr

000399a8 <notify_uart_rx_rdy>:
{
   399a8:	b570      	push	{r4, r5, r6, lr}
   399aa:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   399ac:	6906      	ldr	r6, [r0, #16]
{
   399ae:	4604      	mov	r4, r0
   399b0:	460d      	mov	r5, r1
	struct uart_event evt = {
   399b2:	2214      	movs	r2, #20
   399b4:	2100      	movs	r1, #0
   399b6:	a801      	add	r0, sp, #4
   399b8:	f000 fdde 	bl	3a578 <memset>
   399bc:	2302      	movs	r3, #2
   399be:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   399c2:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   399c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   399c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   399c8:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   399ca:	a901      	add	r1, sp, #4
   399cc:	4620      	mov	r0, r4
	struct uart_event evt = {
   399ce:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   399d2:	f7ff ffe2 	bl	3999a <user_callback>
}
   399d6:	b006      	add	sp, #24
   399d8:	bd70      	pop	{r4, r5, r6, pc}

000399da <notify_rx_buf_release>:
{
   399da:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
   399dc:	680f      	ldr	r7, [r1, #0]
{
   399de:	b087      	sub	sp, #28
   399e0:	4606      	mov	r6, r0
   399e2:	460c      	mov	r4, r1
   399e4:	4615      	mov	r5, r2
	if (*buf) {
   399e6:	b187      	cbz	r7, 39a0a <notify_rx_buf_release+0x30>
		struct uart_event evt = {
   399e8:	2100      	movs	r1, #0
   399ea:	2214      	movs	r2, #20
   399ec:	a801      	add	r0, sp, #4
   399ee:	f000 fdc3 	bl	3a578 <memset>
   399f2:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   399f4:	eb0d 0103 	add.w	r1, sp, r3
   399f8:	4630      	mov	r0, r6
		struct uart_event evt = {
   399fa:	f88d 3004 	strb.w	r3, [sp, #4]
   399fe:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   39a00:	f7ff ffcb 	bl	3999a <user_callback>
		if (clear) {
   39a04:	b10d      	cbz	r5, 39a0a <notify_rx_buf_release+0x30>
			*buf = NULL;
   39a06:	2300      	movs	r3, #0
   39a08:	6023      	str	r3, [r4, #0]
}
   39a0a:	b007      	add	sp, #28
   39a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00039a0e <notify_rx_disable>:
{
   39a0e:	b510      	push	{r4, lr}
   39a10:	b086      	sub	sp, #24
   39a12:	4604      	mov	r4, r0
	struct uart_event evt = {
   39a14:	2214      	movs	r2, #20
   39a16:	2100      	movs	r1, #0
   39a18:	a801      	add	r0, sp, #4
   39a1a:	f000 fdad 	bl	3a578 <memset>
   39a1e:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   39a20:	a901      	add	r1, sp, #4
   39a22:	4620      	mov	r0, r4
	struct uart_event evt = {
   39a24:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   39a28:	f7ff ffb7 	bl	3999a <user_callback>
}
   39a2c:	b006      	add	sp, #24
   39a2e:	bd10      	pop	{r4, pc}

00039a30 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   39a30:	6843      	ldr	r3, [r0, #4]
{
   39a32:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   39a34:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   39a36:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   39a38:	f04f 0040 	mov.w	r0, #64	; 0x40
   39a3c:	f3ef 8511 	mrs	r5, BASEPRI
   39a40:	f380 8812 	msr	BASEPRI_MAX, r0
   39a44:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   39a48:	68e4      	ldr	r4, [r4, #12]
   39a4a:	6e20      	ldr	r0, [r4, #96]	; 0x60
   39a4c:	b190      	cbz	r0, 39a74 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   39a4e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   39a50:	b998      	cbnz	r0, 39a7a <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   39a52:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   39a56:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   39a5a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   39a5e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   39a62:	f042 0220 	orr.w	r2, r2, #32
   39a66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   39a6a:	f385 8811 	msr	BASEPRI, r5
   39a6e:	f3bf 8f6f 	isb	sy
}
   39a72:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   39a74:	f06f 000c 	mvn.w	r0, #12
   39a78:	e7f7      	b.n	39a6a <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   39a7a:	f06f 000f 	mvn.w	r0, #15
   39a7e:	e7f4      	b.n	39a6a <uarte_nrfx_rx_buf_rsp+0x3a>

00039a80 <uarte_nrfx_callback_set>:
	if (!data->async) {
   39a80:	6903      	ldr	r3, [r0, #16]
   39a82:	68db      	ldr	r3, [r3, #12]
   39a84:	b11b      	cbz	r3, 39a8e <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
   39a86:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   39a8a:	2000      	movs	r0, #0
   39a8c:	4770      	bx	lr
		return -ENOTSUP;
   39a8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   39a92:	4770      	bx	lr

00039a94 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   39a94:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   39a96:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   39a98:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   39a9a:	681b      	ldr	r3, [r3, #0]
{
   39a9c:	b510      	push	{r4, lr}
	if (data->async) {
   39a9e:	b958      	cbnz	r0, 39ab8 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   39aa0:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   39aa4:	b15c      	cbz	r4, 39abe <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   39aa6:	7d52      	ldrb	r2, [r2, #21]
   39aa8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   39aaa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   39aae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39ab2:	2201      	movs	r2, #1
   39ab4:	601a      	str	r2, [r3, #0]
}
   39ab6:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   39ab8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   39abc:	e7fb      	b.n	39ab6 <uarte_nrfx_poll_in+0x22>
		return -1;
   39abe:	f04f 30ff 	mov.w	r0, #4294967295
   39ac2:	e7f8      	b.n	39ab6 <uarte_nrfx_poll_in+0x22>

00039ac4 <uarte_enable>:
{
   39ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   39ac6:	6907      	ldr	r7, [r0, #16]
	if (data->async) {
   39ac8:	68fb      	ldr	r3, [r7, #12]
{
   39aca:	4604      	mov	r4, r0
	if (data->async) {
   39acc:	b92b      	cbnz	r3, 39ada <uarte_enable+0x16>
	return config->uarte_regs;
   39ace:	6863      	ldr	r3, [r4, #4]
   39ad0:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   39ad2:	2208      	movs	r2, #8
   39ad4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   39ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bool disabled = data->async->low_power_mask == 0;
   39ada:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
   39ade:	6846      	ldr	r6, [r0, #4]
		data->async->low_power_mask |= mask;
   39ae0:	4329      	orrs	r1, r5
   39ae2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
		if (hw_rx_counting_enabled(data) && disabled) {
   39ae6:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
   39aea:	2b00      	cmp	r3, #0
   39aec:	d0ef      	beq.n	39ace <uarte_enable+0xa>
   39aee:	2d00      	cmp	r5, #0
   39af0:	d1ed      	bne.n	39ace <uarte_enable+0xa>
			const nrfx_timer_t *timer = &get_dev_config(dev)->timer;
   39af2:	3620      	adds	r6, #32
			nrfx_timer_enable(timer);
   39af4:	4630      	mov	r0, r6
   39af6:	f7f4 ffb9 	bl	2ea6c <nrfx_timer_enable>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   39afa:	68fb      	ldr	r3, [r7, #12]
   39afc:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
   39b00:	42ab      	cmp	r3, r5
   39b02:	dde4      	ble.n	39ace <uarte_enable+0xa>
				nrfx_timer_increment(timer);
   39b04:	4630      	mov	r0, r6
   39b06:	f7f5 f839 	bl	2eb7c <nrfx_timer_increment>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   39b0a:	3501      	adds	r5, #1
   39b0c:	e7f5      	b.n	39afa <uarte_enable+0x36>

00039b0e <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   39b0e:	6843      	ldr	r3, [r0, #4]
{
   39b10:	b510      	push	{r4, lr}
	return config->uarte_regs;
   39b12:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   39b14:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   39b18:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   39b1c:	2200      	movs	r2, #0
   39b1e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   39b22:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   39b26:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   39b2a:	685b      	ldr	r3, [r3, #4]
   39b2c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
   39b30:	06db      	lsls	r3, r3, #27
   39b32:	d506      	bpl.n	39b42 <tx_start+0x34>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   39b34:	2101      	movs	r1, #1
   39b36:	f7ff ffc5 	bl	39ac4 <uarte_enable>
    p_reg->INTENSET = mask;
   39b3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   39b3e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39b42:	2301      	movs	r3, #1
   39b44:	60a3      	str	r3, [r4, #8]
}
   39b46:	bd10      	pop	{r4, pc}

00039b48 <rx_timeout>:
{
   39b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   39b4a:	6b45      	ldr	r5, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   39b4c:	68eb      	ldr	r3, [r5, #12]
   39b4e:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
   39b52:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   39b56:	2a00      	cmp	r2, #0
   39b58:	d134      	bne.n	39bc4 <rx_timeout+0x7c>
	const struct device *dev = data->dev;
   39b5a:	682e      	ldr	r6, [r5, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   39b5c:	6870      	ldr	r0, [r6, #4]
	return config->uarte_regs;
   39b5e:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   39b60:	2110      	movs	r1, #16
   39b62:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	if (hw_rx_counting_enabled(data)) {
   39b66:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
   39b6a:	b302      	cbz	r2, 39bae <rx_timeout+0x66>
		read = nrfx_timer_capture(&cfg->timer, 0);
   39b6c:	4639      	mov	r1, r7
   39b6e:	3020      	adds	r0, #32
   39b70:	f7f5 f836 	bl	2ebe0 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   39b74:	68eb      	ldr	r3, [r5, #12]
   39b76:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   39b78:	4282      	cmp	r2, r0
		data->async->rx_total_byte_cnt = read;
   39b7a:	bf1e      	ittt	ne
   39b7c:	6758      	strne	r0, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
   39b7e:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
   39b80:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
   39b84:	e9d3 401d 	ldrd	r4, r0, [r3, #116]	; 0x74
	if (!hw_rx_counting_enabled(data) &&
   39b88:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
		    - data->async->rx_total_user_byte_cnt;
   39b8c:	1a24      	subs	r4, r4, r0
	if (!hw_rx_counting_enabled(data) &&
   39b8e:	b922      	cbnz	r2, 39b9a <rx_timeout+0x52>
   39b90:	2c00      	cmp	r4, #0
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   39b92:	bfbc      	itt	lt
   39b94:	f8c3 00c0 	strlt.w	r0, [r3, #192]	; 0xc0
		len = 0;
   39b98:	4614      	movlt	r4, r2
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   39b9a:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
   39b9e:	18a0      	adds	r0, r4, r2
   39ba0:	4288      	cmp	r0, r1
   39ba2:	d910      	bls.n	39bc6 <rx_timeout+0x7e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   39ba4:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   39ba6:	2c00      	cmp	r4, #0
   39ba8:	dd07      	ble.n	39bba <rx_timeout+0x72>
		clipped = true;
   39baa:	2701      	movs	r7, #1
   39bac:	e011      	b.n	39bd2 <rx_timeout+0x8a>
		read = data->async->rx_cnt.cnt;
   39bae:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
   39bb2:	e7df      	b.n	39b74 <rx_timeout+0x2c>
			data->async->rx_timeout_left -=
   39bb4:	1a52      	subs	r2, r2, r1
   39bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
   39bba:	6873      	ldr	r3, [r6, #4]
   39bbc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   39bbe:	2210      	movs	r2, #16
   39bc0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   39bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   39bc6:	2c00      	cmp	r4, #0
   39bc8:	ddf7      	ble.n	39bba <rx_timeout+0x72>
				< data->async->rx_timeout_slab)) {
   39bca:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
   39bce:	428a      	cmp	r2, r1
   39bd0:	daf0      	bge.n	39bb4 <rx_timeout+0x6c>
			notify_uart_rx_rdy(dev, len);
   39bd2:	4621      	mov	r1, r4
   39bd4:	4630      	mov	r0, r6
   39bd6:	f7ff fee7 	bl	399a8 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   39bda:	68e8      	ldr	r0, [r5, #12]
   39bdc:	6e83      	ldr	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   39bde:	6f81      	ldr	r1, [r0, #120]	; 0x78
			data->async->rx_offset += len;
   39be0:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   39be2:	4421      	add	r1, r4
			data->async->rx_offset += len;
   39be4:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   39be6:	6781      	str	r1, [r0, #120]	; 0x78
		if (clipped) {
   39be8:	2f00      	cmp	r7, #0
   39bea:	d0e6      	beq.n	39bba <rx_timeout+0x72>
	z_impl_k_timer_stop(timer);
   39bec:	3088      	adds	r0, #136	; 0x88
   39bee:	f000 fc0e 	bl	3a40e <z_impl_k_timer_stop>
}
   39bf2:	e7e2      	b.n	39bba <rx_timeout+0x72>

00039bf4 <start_tx_locked.isra.0>:
static void start_tx_locked(const struct device *dev, struct uarte_nrfx_data *data)
   39bf4:	b510      	push	{r4, lr}
   39bf6:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   39bf8:	f7ff febe 	bl	39978 <is_tx_ready>
   39bfc:	680b      	ldr	r3, [r1, #0]
   39bfe:	b918      	cbnz	r0, 39c08 <start_tx_locked.isra.0+0x14>
		data->async->pending_tx = true;
   39c00:	2201      	movs	r2, #1
   39c02:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
   39c06:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   39c08:	2200      	movs	r2, #0
   39c0a:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
   39c0e:	f04f 32ff 	mov.w	r2, #4294967295
   39c12:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   39c16:	4620      	mov	r0, r4
   39c18:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
   39c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   39c20:	f7ff bf75 	b.w	39b0e <tx_start>

00039c24 <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   39c24:	68c2      	ldr	r2, [r0, #12]
   39c26:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
   39c28:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
   39c2a:	b508      	push	{r3, lr}
   39c2c:	4603      	mov	r3, r0
	if (!remaining) {
   39c2e:	d00b      	beq.n	39c48 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
   39c30:	2a08      	cmp	r2, #8
   39c32:	bf28      	it	cs
   39c34:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   39c36:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
   39c38:	3018      	adds	r0, #24
   39c3a:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   39c3c:	689b      	ldr	r3, [r3, #8]
   39c3e:	4419      	add	r1, r3
   39c40:	f000 fc5f 	bl	3a502 <memcpy>
	return true;
   39c44:	2001      	movs	r0, #1
}
   39c46:	bd08      	pop	{r3, pc}
		return false;
   39c48:	4610      	mov	r0, r2
   39c4a:	e7fc      	b.n	39c46 <setup_tx_cache.isra.0+0x22>

00039c4c <rx_flush>:
	return config->uarte_regs;
   39c4c:	6843      	ldr	r3, [r0, #4]
{
   39c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   39c50:	681c      	ldr	r4, [r3, #0]
{
   39c52:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
   39c54:	f8d4 653c 	ldr.w	r6, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   39c58:	460b      	mov	r3, r1
   39c5a:	bb31      	cbnz	r1, 39caa <rx_flush+0x5e>
   39c5c:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   39c5e:	466a      	mov	r2, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   39c60:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   39c64:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   39c66:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   39c6a:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   39c6e:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39c72:	2101      	movs	r1, #1
   39c74:	62e1      	str	r1, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   39c76:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   39c7a:	2900      	cmp	r1, #0
   39c7c:	d0fb      	beq.n	39c76 <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   39c7e:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   39c82:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   39c86:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (!buf) {
   39c8a:	b913      	cbnz	r3, 39c92 <rx_flush+0x46>
			return rx_amount;
   39c8c:	b2c0      	uxtb	r0, r0
}
   39c8e:	b002      	add	sp, #8
   39c90:	bd70      	pop	{r4, r5, r6, pc}
	if (rx_amount != prev_rx_amount) {
   39c92:	4286      	cmp	r6, r0
   39c94:	d1fa      	bne.n	39c8c <rx_flush+0x40>
   39c96:	441d      	add	r5, r3
	for (int i = 0; i < flush_len; i++) {
   39c98:	429d      	cmp	r5, r3
   39c9a:	d101      	bne.n	39ca0 <rx_flush+0x54>
	return 0;
   39c9c:	2000      	movs	r0, #0
   39c9e:	e7f6      	b.n	39c8e <rx_flush+0x42>
		if (buf[i] != dirty) {
   39ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
   39ca4:	2a00      	cmp	r2, #0
   39ca6:	d0f7      	beq.n	39c98 <rx_flush+0x4c>
   39ca8:	e7f0      	b.n	39c8c <rx_flush+0x40>
__ssp_bos_icheck3(memset, void *, int)
   39caa:	4618      	mov	r0, r3
   39cac:	2100      	movs	r1, #0
   39cae:	f000 fc63 	bl	3a578 <memset>
   39cb2:	4603      	mov	r3, r0
   39cb4:	4602      	mov	r2, r0
   39cb6:	e7d3      	b.n	39c60 <rx_flush+0x14>

00039cb8 <async_uart_release>:
{
   39cb8:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   39cba:	6903      	ldr	r3, [r0, #16]
{
   39cbc:	4604      	mov	r4, r0
	__asm__ volatile(
   39cbe:	f04f 0240 	mov.w	r2, #64	; 0x40
   39cc2:	f3ef 8611 	mrs	r6, BASEPRI
   39cc6:	f382 8812 	msr	BASEPRI_MAX, r2
   39cca:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   39cce:	68dd      	ldr	r5, [r3, #12]
   39cd0:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   39cd4:	ea23 0301 	bic.w	r3, r3, r1
   39cd8:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
   39cdc:	b9db      	cbnz	r3, 39d16 <async_uart_release+0x5e>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   39cde:	2902      	cmp	r1, #2
   39ce0:	d106      	bne.n	39cf0 <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
   39ce2:	2205      	movs	r2, #5
   39ce4:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
   39ce8:	f7ff ffb0 	bl	39c4c <rx_flush>
			data->async->rx_flush_cnt =
   39cec:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   39cf0:	6925      	ldr	r5, [r4, #16]
	if (data->async && hw_rx_counting_enabled(data)) {
   39cf2:	68eb      	ldr	r3, [r5, #12]
   39cf4:	b153      	cbz	r3, 39d0c <async_uart_release+0x54>
   39cf6:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
   39cfa:	b13b      	cbz	r3, 39d0c <async_uart_release+0x54>
		nrfx_timer_disable(&get_dev_config(dev)->timer);
   39cfc:	6860      	ldr	r0, [r4, #4]
   39cfe:	3020      	adds	r0, #32
   39d00:	f7f4 feda 	bl	2eab8 <nrfx_timer_disable>
		data->async->rx_total_byte_cnt = 0;
   39d04:	68eb      	ldr	r3, [r5, #12]
   39d06:	2200      	movs	r2, #0
		data->async->rx_total_user_byte_cnt = 0;
   39d08:	e9c3 221d 	strd	r2, r2, [r3, #116]	; 0x74
	return config->uarte_regs;
   39d0c:	6863      	ldr	r3, [r4, #4]
   39d0e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   39d10:	2200      	movs	r2, #0
   39d12:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   39d16:	f386 8811 	msr	BASEPRI, r6
   39d1a:	f3bf 8f6f 	isb	sy
}
   39d1e:	bd70      	pop	{r4, r5, r6, pc}

00039d20 <uarte_nrfx_tx_abort>:
{
   39d20:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   39d22:	6843      	ldr	r3, [r0, #4]
   39d24:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
   39d26:	6903      	ldr	r3, [r0, #16]
   39d28:	68d8      	ldr	r0, [r3, #12]
   39d2a:	6883      	ldr	r3, [r0, #8]
   39d2c:	b14b      	cbz	r3, 39d42 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
   39d2e:	2400      	movs	r4, #0
   39d30:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
   39d34:	3028      	adds	r0, #40	; 0x28
   39d36:	f000 fb6a 	bl	3a40e <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39d3a:	2301      	movs	r3, #1
   39d3c:	60eb      	str	r3, [r5, #12]
	return 0;
   39d3e:	4620      	mov	r0, r4
}
   39d40:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   39d42:	f06f 000d 	mvn.w	r0, #13
   39d46:	e7fb      	b.n	39d40 <uarte_nrfx_tx_abort+0x20>

00039d48 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   39d48:	6b43      	ldr	r3, [r0, #52]	; 0x34
   39d4a:	6818      	ldr	r0, [r3, #0]
   39d4c:	f7ff bfe8 	b.w	39d20 <uarte_nrfx_tx_abort>

00039d50 <uarte_nrfx_rx_disable>:
{
   39d50:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   39d52:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   39d54:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   39d56:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   39d58:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   39d5a:	6e03      	ldr	r3, [r0, #96]	; 0x60
   39d5c:	b1b3      	cbz	r3, 39d8c <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   39d5e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   39d60:	b153      	cbz	r3, 39d78 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   39d62:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   39d66:	f023 0320 	bic.w	r3, r3, #32
   39d6a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   39d6e:	2300      	movs	r3, #0
   39d70:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   39d74:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   39d78:	3088      	adds	r0, #136	; 0x88
   39d7a:	f000 fb48 	bl	3a40e <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   39d7e:	68eb      	ldr	r3, [r5, #12]
   39d80:	2000      	movs	r0, #0
   39d82:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   39d86:	2301      	movs	r3, #1
   39d88:	6063      	str	r3, [r4, #4]
}
   39d8a:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   39d8c:	f06f 000d 	mvn.w	r0, #13
   39d90:	e7fb      	b.n	39d8a <uarte_nrfx_rx_disable+0x3a>

00039d92 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   39d92:	2200      	movs	r2, #0
{
   39d94:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   39d96:	4611      	mov	r1, r2
   39d98:	4610      	mov	r0, r2
   39d9a:	f7f9 fa57 	bl	3324c <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   39d9e:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   39da0:	bf18      	it	ne
   39da2:	f06f 0015 	mvnne.w	r0, #21
   39da6:	bd08      	pop	{r3, pc}

00039da8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   39da8:	4770      	bx	lr

00039daa <sys_clock_cycle_get_32>:
{
   39daa:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   39dac:	f7f1 ff74 	bl	2bc98 <z_nrf_rtc_timer_read>
}
   39db0:	bd08      	pop	{r3, pc}

00039db2 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   39db2:	ea41 0300 	orr.w	r3, r1, r0
   39db6:	f033 030f 	bics.w	r3, r3, #15
   39dba:	d101      	bne.n	39dc0 <dk_set_leds_state+0xe>
   39dbc:	f7f2 ba46 	b.w	2c24c <dk_set_leds_state.part.0>
}
   39dc0:	f06f 0015 	mvn.w	r0, #21
   39dc4:	4770      	bx	lr

00039dc6 <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   39dc6:	210f      	movs	r1, #15
   39dc8:	f7ff bff3 	b.w	39db2 <dk_set_leds_state>

00039dcc <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   39dcc:	2101      	movs	r1, #1
   39dce:	f7f2 bcdf 	b.w	2c790 <dk_set_led>

00039dd2 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   39dd2:	2100      	movs	r1, #0
   39dd4:	f7f2 bcdc 	b.w	2c790 <dk_set_led>

00039dd8 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   39dd8:	4668      	mov	r0, sp
   39dda:	f020 0107 	bic.w	r1, r0, #7
   39dde:	468d      	mov	sp, r1
   39de0:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   39de2:	f7d5 fb9b 	bl	f51c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   39de6:	f7e8 fa71 	bl	222cc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   39dea:	f7e8 fb5d 	bl	224a8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   39dee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   39df2:	4685      	mov	sp, r0
   39df4:	4770      	bx	lr

00039df6 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   39df6:	4668      	mov	r0, sp
   39df8:	f020 0107 	bic.w	r1, r0, #7
   39dfc:	468d      	mov	sp, r1
   39dfe:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   39e00:	f7d5 fb0e 	bl	f420 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   39e04:	f7e8 fa62 	bl	222cc <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   39e08:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   39e0c:	4685      	mov	sp, r0
   39e0e:	4770      	bx	lr

00039e10 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   39e10:	4668      	mov	r0, sp
   39e12:	f020 0107 	bic.w	r1, r0, #7
   39e16:	468d      	mov	sp, r1
   39e18:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   39e1a:	f7de fd1b 	bl	18854 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   39e1e:	f7e8 fa55 	bl	222cc <_arch_isr_direct_pm>
   39e22:	f7e8 fb41 	bl	224a8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   39e26:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   39e2a:	4685      	mov	sp, r0
   39e2c:	4770      	bx	lr

00039e2e <nrfx_clock_enable>:
}
   39e2e:	4770      	bx	lr

00039e30 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   39e30:	f7d5 bfc4 	b.w	fdbc <MPSL_IRQ_CLOCK_Handler>

00039e34 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   39e34:	f7d6 bb9a 	b.w	1056c <mpsl_is_initialized>

00039e38 <nrf_flash_sync_get_timestamp_begin>:
}
   39e38:	4770      	bx	lr

00039e3a <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   39e3a:	f7f9 b9ab 	b.w	33194 <nrf_cc3xx_platform_init>

00039e3e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   39e3e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   39e40:	f7e8 f8ba 	bl	21fb8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   39e44:	f7e8 f96c 	bl	22120 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   39e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   39e4c:	f7f9 b9a2 	b.w	33194 <nrf_cc3xx_platform_init>

00039e50 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
   39e50:	b538      	push	{r3, r4, r5, lr}
   39e52:	460c      	mov	r4, r1
   39e54:	4615      	mov	r5, r2
   39e56:	4425      	add	r5, r4
    erased_val = flash_area_erased_val(area);
   39e58:	f7fd fd9a 	bl	37990 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   39e5c:	4621      	mov	r1, r4
   39e5e:	42a9      	cmp	r1, r5
   39e60:	d101      	bne.n	39e66 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
   39e62:	2001      	movs	r0, #1
}
   39e64:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
   39e66:	f811 3b01 	ldrb.w	r3, [r1], #1
   39e6a:	4298      	cmp	r0, r3
   39e6c:	d0f7      	beq.n	39e5e <bootutil_buffer_is_erased.part.0+0xe>
            return false;
   39e6e:	2000      	movs	r0, #0
   39e70:	e7f8      	b.n	39e64 <bootutil_buffer_is_erased.part.0+0x14>

00039e72 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   39e72:	b111      	cbz	r1, 39e7a <bootutil_buffer_is_erased+0x8>
   39e74:	b10a      	cbz	r2, 39e7a <bootutil_buffer_is_erased+0x8>
   39e76:	f7ff bfeb 	b.w	39e50 <bootutil_buffer_is_erased.part.0>
}
   39e7a:	2000      	movs	r0, #0
   39e7c:	4770      	bx	lr

00039e7e <boot_read_flag>:
{
   39e7e:	b538      	push	{r3, r4, r5, lr}
   39e80:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   39e82:	2301      	movs	r3, #1
{
   39e84:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   39e86:	4622      	mov	r2, r4
{
   39e88:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   39e8a:	f7fd fcfa 	bl	37882 <flash_area_read>
    if (rc < 0) {
   39e8e:	2800      	cmp	r0, #0
   39e90:	db10      	blt.n	39eb4 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   39e92:	2201      	movs	r2, #1
   39e94:	4621      	mov	r1, r4
   39e96:	4628      	mov	r0, r5
   39e98:	f7ff ffeb 	bl	39e72 <bootutil_buffer_is_erased>
   39e9c:	b118      	cbz	r0, 39ea6 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   39e9e:	2303      	movs	r3, #3
   39ea0:	7023      	strb	r3, [r4, #0]
    return 0;
   39ea2:	2000      	movs	r0, #0
}
   39ea4:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
   39ea6:	7823      	ldrb	r3, [r4, #0]
   39ea8:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
   39eaa:	bf0c      	ite	eq
   39eac:	2301      	moveq	r3, #1
   39eae:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
   39eb0:	7023      	strb	r3, [r4, #0]
   39eb2:	e7f7      	b.n	39ea4 <boot_read_flag+0x26>
        return BOOT_EFLASH;
   39eb4:	2001      	movs	r0, #1
   39eb6:	e7f5      	b.n	39ea4 <boot_read_flag+0x26>

00039eb8 <boot_write_trailer>:
{
   39eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   39ebc:	461d      	mov	r5, r3
   39ebe:	4606      	mov	r6, r0
   39ec0:	460f      	mov	r7, r1
   39ec2:	4690      	mov	r8, r2
    align = flash_area_align(fap);
   39ec4:	f7fd fd5b 	bl	3797e <flash_area_align>
   39ec8:	b2c3      	uxtb	r3, r0
    align = (inlen + align - 1) & ~(align - 1);
   39eca:	fa55 f480 	uxtab	r4, r5, r0
   39ece:	3c01      	subs	r4, #1
   39ed0:	425b      	negs	r3, r3
   39ed2:	401c      	ands	r4, r3
   39ed4:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
   39ed6:	2c08      	cmp	r4, #8
   39ed8:	d81b      	bhi.n	39f12 <boot_write_trailer+0x5a>
    erased_val = flash_area_erased_val(fap);
   39eda:	4630      	mov	r0, r6
   39edc:	f7fd fd58 	bl	37990 <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
   39ee0:	2308      	movs	r3, #8
    erased_val = flash_area_erased_val(fap);
   39ee2:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   39ee4:	462a      	mov	r2, r5
   39ee6:	4641      	mov	r1, r8
   39ee8:	4668      	mov	r0, sp
   39eea:	f000 fb18 	bl	3a51e <__memcpy_chk>
   39eee:	1b62      	subs	r2, r4, r5
   39ef0:	4649      	mov	r1, r9
   39ef2:	eb0d 0005 	add.w	r0, sp, r5
   39ef6:	f000 fb3f 	bl	3a578 <memset>
    rc = flash_area_write(fap, off, buf, align);
   39efa:	4623      	mov	r3, r4
   39efc:	466a      	mov	r2, sp
   39efe:	4639      	mov	r1, r7
   39f00:	4630      	mov	r0, r6
   39f02:	f7fd fcda 	bl	378ba <flash_area_write>
    if (rc != 0) {
   39f06:	3800      	subs	r0, #0
   39f08:	bf18      	it	ne
   39f0a:	2001      	movne	r0, #1
}
   39f0c:	b003      	add	sp, #12
   39f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   39f12:	f04f 30ff 	mov.w	r0, #4294967295
   39f16:	e7f9      	b.n	39f0c <boot_write_trailer+0x54>

00039f18 <boot_write_trailer_flag>:
{
   39f18:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
   39f1a:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
   39f1c:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   39f20:	aa01      	add	r2, sp, #4
   39f22:	f7ff ffc9 	bl	39eb8 <boot_write_trailer>
}
   39f26:	b003      	add	sp, #12
   39f28:	f85d fb04 	ldr.w	pc, [sp], #4

00039f2c <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
   39f2c:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   39f2e:	2201      	movs	r2, #1
   39f30:	3918      	subs	r1, #24
   39f32:	f7ff bff1 	b.w	39f18 <boot_write_trailer_flag>

00039f36 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
   39f36:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   39f38:	3a18      	subs	r2, #24
   39f3a:	f7ff bfa0 	b.w	39e7e <boot_read_flag>

00039f3e <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   39f3e:	4601      	mov	r1, r0
    return boot_set_pending_multi(0, permanent);
   39f40:	2000      	movs	r0, #0
   39f42:	f7f3 bec5 	b.w	2dcd0 <boot_set_pending_multi>

00039f46 <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   39f46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap = NULL;
   39f48:	2300      	movs	r3, #0
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   39f4a:	a901      	add	r1, sp, #4
   39f4c:	2002      	movs	r0, #2
    const struct flash_area *fap = NULL;
   39f4e:	9301      	str	r3, [sp, #4]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   39f50:	f7e7 f9c4 	bl	212dc <flash_area_open>
    if (rc != 0) {
   39f54:	b9d8      	cbnz	r0, 39f8e <boot_set_confirmed_multi+0x48>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_primary_slot);
   39f56:	9801      	ldr	r0, [sp, #4]
   39f58:	a902      	add	r1, sp, #8
   39f5a:	f7f3 fe45 	bl	2dbe8 <boot_read_swap_state>
    if (rc != 0) {
   39f5e:	4604      	mov	r4, r0
   39f60:	b968      	cbnz	r0, 39f7e <boot_set_confirmed_multi+0x38>
        goto done;
    }

    switch (state_primary_slot.magic) {
   39f62:	f89d 3008 	ldrb.w	r3, [sp, #8]
   39f66:	2b02      	cmp	r3, #2
   39f68:	d00f      	beq.n	39f8a <boot_set_confirmed_multi+0x44>
   39f6a:	2b03      	cmp	r3, #3
   39f6c:	d007      	beq.n	39f7e <boot_set_confirmed_multi+0x38>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   39f6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   39f72:	2b03      	cmp	r3, #3
   39f74:	d103      	bne.n	39f7e <boot_set_confirmed_multi+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   39f76:	9801      	ldr	r0, [sp, #4]
   39f78:	f7ff ffd8 	bl	39f2c <boot_write_image_ok>
   39f7c:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   39f7e:	9801      	ldr	r0, [sp, #4]
   39f80:	f7fd fc7e 	bl	37880 <flash_area_close>
    return rc;
}
   39f84:	4620      	mov	r0, r4
   39f86:	b004      	add	sp, #16
   39f88:	bd10      	pop	{r4, pc}
    switch (state_primary_slot.magic) {
   39f8a:	2404      	movs	r4, #4
   39f8c:	e7f7      	b.n	39f7e <boot_set_confirmed_multi+0x38>
        return BOOT_EFLASH;
   39f8e:	2401      	movs	r4, #1
   39f90:	e7f8      	b.n	39f84 <boot_set_confirmed_multi+0x3e>

00039f92 <boot_set_confirmed>:
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
    return boot_set_confirmed_multi(0);
   39f92:	2000      	movs	r0, #0
   39f94:	f7ff bfd7 	b.w	39f46 <boot_set_confirmed_multi>

00039f98 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   39f98:	4700      	bx	r0

00039f9a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   39f9a:	f000 b9ff 	b.w	3a39c <z_impl_k_busy_wait>

00039f9e <nrfx_flag32_is_allocated>:
    return (mask & NRFX_BIT(bitpos)) ? false : true;
   39f9e:	40c8      	lsrs	r0, r1
   39fa0:	43c0      	mvns	r0, r0
}
   39fa2:	f000 0001 	and.w	r0, r0, #1
   39fa6:	4770      	bx	lr

00039fa8 <nrf_gpio_pin_present_check>:
    switch (port)
   39fa8:	0943      	lsrs	r3, r0, #5
   39faa:	d00b      	beq.n	39fc4 <nrf_gpio_pin_present_check+0x1c>
   39fac:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   39fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   39fb2:	bf18      	it	ne
   39fb4:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   39fb6:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   39fba:	fa23 f000 	lsr.w	r0, r3, r0
}
   39fbe:	f000 0001 	and.w	r0, r0, #1
   39fc2:	4770      	bx	lr
    switch (port)
   39fc4:	f04f 33ff 	mov.w	r3, #4294967295
   39fc8:	e7f5      	b.n	39fb6 <nrf_gpio_pin_present_check+0xe>

00039fca <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   39fca:	0080      	lsls	r0, r0, #2
}
   39fcc:	f500 7080 	add.w	r0, r0, #256	; 0x100
   39fd0:	4770      	bx	lr

00039fd2 <nrf_gpio_reconfigure>:
{
   39fd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   39fd6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   39fd8:	a801      	add	r0, sp, #4
{
   39fda:	460e      	mov	r6, r1
   39fdc:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   39fe0:	4690      	mov	r8, r2
   39fe2:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   39fe4:	f7f4 f896 	bl	2e114 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   39fe8:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   39fea:	f1b8 0f00 	cmp.w	r8, #0
   39fee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   39ff2:	bf14      	ite	ne
   39ff4:	2302      	movne	r3, #2
   39ff6:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   39ff8:	2e00      	cmp	r6, #0
   39ffa:	bf18      	it	ne
   39ffc:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3a000:	2d00      	cmp	r5, #0
   3a002:	bf14      	ite	ne
   3a004:	210c      	movne	r1, #12
   3a006:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3a008:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3a00a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3a00e:	bf14      	ite	ne
   3a010:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   3a014:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3a016:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3a018:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3a01c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3a020:	bf14      	ite	ne
   3a022:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   3a026:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3a028:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   3a02a:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3a02e:	b106      	cbz	r6, 3a032 <nrf_gpio_reconfigure+0x60>
   3a030:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   3a032:	f1b8 0f00 	cmp.w	r8, #0
   3a036:	d003      	beq.n	3a040 <nrf_gpio_reconfigure+0x6e>
   3a038:	f898 8000 	ldrb.w	r8, [r8]
   3a03c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   3a040:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   3a042:	b10d      	cbz	r5, 3a048 <nrf_gpio_reconfigure+0x76>
   3a044:	782d      	ldrb	r5, [r5, #0]
   3a046:	00ad      	lsls	r5, r5, #2
   3a048:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3a04c:	b10c      	cbz	r4, 3a052 <nrf_gpio_reconfigure+0x80>
   3a04e:	7822      	ldrb	r2, [r4, #0]
   3a050:	0214      	lsls	r4, r2, #8
   3a052:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   3a054:	b10f      	cbz	r7, 3a05a <nrf_gpio_reconfigure+0x88>
   3a056:	783f      	ldrb	r7, [r7, #0]
   3a058:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3a05a:	432c      	orrs	r4, r5
   3a05c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   3a05e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   3a062:	b002      	add	sp, #8
   3a064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003a068 <nrf_gpio_cfg_sense_set>:
{
   3a068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   3a06a:	f10d 030f 	add.w	r3, sp, #15
   3a06e:	9301      	str	r3, [sp, #4]
   3a070:	2300      	movs	r3, #0
{
   3a072:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   3a076:	9300      	str	r3, [sp, #0]
   3a078:	461a      	mov	r2, r3
   3a07a:	4619      	mov	r1, r3
   3a07c:	f7ff ffa9 	bl	39fd2 <nrf_gpio_reconfigure>
}
   3a080:	b005      	add	sp, #20
   3a082:	f85d fb04 	ldr.w	pc, [sp], #4

0003a086 <is_valid_address>:
{
   3a086:	4603      	mov	r3, r0
   3a088:	4608      	mov	r0, r1
   3a08a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   3a08e:	b510      	push	{r4, lr}
   3a090:	690c      	ldr	r4, [r1, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   3a092:	694a      	ldr	r2, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   3a094:	4362      	muls	r2, r4
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3a096:	4293      	cmp	r3, r2
   3a098:	d308      	bcc.n	3a0ac <is_valid_address+0x26>
    if (uicr_allowed &&
   3a09a:	b130      	cbz	r0, 3a0aa <is_valid_address+0x24>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   3a09c:	f1a3 2010 	sub.w	r0, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   3a0a0:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
   3a0a4:	bf2c      	ite	cs
   3a0a6:	2000      	movcs	r0, #0
   3a0a8:	2001      	movcc	r0, #1
}
   3a0aa:	bd10      	pop	{r4, pc}
        return true;
   3a0ac:	2001      	movs	r0, #1
   3a0ae:	e7fc      	b.n	3a0aa <is_valid_address+0x24>

0003a0b0 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   3a0b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3a0b4:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   3a0b6:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   3a0b8:	4350      	muls	r0, r2
   3a0ba:	4770      	bx	lr

0003a0bc <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   3a0bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3a0c0:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   3a0c2:	4770      	bx	lr

0003a0c4 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   3a0c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3a0c8:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   3a0ca:	4770      	bx	lr

0003a0cc <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   3a0cc:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   3a0ce:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   3a0d0:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   3a0d2:	bf9d      	ittte	ls
   3a0d4:	6882      	ldrls	r2, [r0, #8]
   3a0d6:	18d2      	addls	r2, r2, r3
   3a0d8:	f102 32ff 	addls.w	r2, r2, #4294967295
    r = RdOff - WrOff - 1u;
   3a0dc:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   3a0e0:	bf94      	ite	ls
   3a0e2:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   3a0e4:	1a58      	subhi	r0, r3, r1
}
   3a0e6:	4770      	bx	lr

0003a0e8 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   3a0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3a0ec:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   3a0ee:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
   3a0f2:	6867      	ldr	r7, [r4, #4]
   3a0f4:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   3a0f8:	4296      	cmp	r6, r2
   3a0fa:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   3a0fe:	4689      	mov	r9, r1
  if (Rem > NumBytes) {
   3a100:	4438      	add	r0, r7
   3a102:	d904      	bls.n	3a10e <_WriteNoCheck+0x26>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3a104:	f000 f9fd 	bl	3a502 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   3a108:	60e5      	str	r5, [r4, #12]
}
   3a10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3a10e:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   3a110:	eba5 0508 	sub.w	r5, r5, r8
   3a114:	f000 f9f5 	bl	3a502 <memcpy>
   3a118:	6860      	ldr	r0, [r4, #4]
   3a11a:	462a      	mov	r2, r5
   3a11c:	eb09 0106 	add.w	r1, r9, r6
   3a120:	e7f0      	b.n	3a104 <_WriteNoCheck+0x1c>

0003a122 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   3a122:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   3a126:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   3a128:	4606      	mov	r6, r0
   3a12a:	4689      	mov	r9, r1
   3a12c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   3a12e:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   3a132:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   3a134:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   3a136:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   3a138:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   3a13a:	bf28      	it	cs
   3a13c:	18e4      	addcs	r4, r4, r3
   3a13e:	3c01      	subs	r4, #1
   3a140:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   3a142:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   3a144:	42bc      	cmp	r4, r7
   3a146:	bf28      	it	cs
   3a148:	463c      	movcs	r4, r7
   3a14a:	4294      	cmp	r4, r2
   3a14c:	bf28      	it	cs
   3a14e:	4614      	movcs	r4, r2
   3a150:	4649      	mov	r1, r9
   3a152:	4428      	add	r0, r5
   3a154:	4622      	mov	r2, r4
   3a156:	f000 f9d4 	bl	3a502 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   3a15a:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   3a15c:	4425      	add	r5, r4
      WrOff = 0u;
   3a15e:	42ab      	cmp	r3, r5
   3a160:	bf08      	it	eq
   3a162:	2500      	moveq	r5, #0
  } while (NumBytes);
   3a164:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   3a166:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   3a168:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   3a16a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   3a16c:	d1e1      	bne.n	3a132 <_WriteBlocking+0x10>
}
   3a16e:	4640      	mov	r0, r8
   3a170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003a174 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   3a174:	f7f4 bd6a 	b.w	2ec4c <_DoInit>

0003a178 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   3a178:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   3a17a:	f7ff fffb 	bl	3a174 <SEGGER_RTT_Init>

	return 0;
}
   3a17e:	2000      	movs	r0, #0
   3a180:	bd08      	pop	{r3, pc}

0003a182 <z_device_state_init>:
}
   3a182:	4770      	bx	lr

0003a184 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   3a184:	b138      	cbz	r0, 3a196 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3a186:	68c3      	ldr	r3, [r0, #12]
   3a188:	8818      	ldrh	r0, [r3, #0]
   3a18a:	f3c0 0008 	ubfx	r0, r0, #0, #9
   3a18e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   3a192:	4258      	negs	r0, r3
   3a194:	4158      	adcs	r0, r3
}
   3a196:	4770      	bx	lr

0003a198 <k_heap_init>:
{
   3a198:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   3a19a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   3a19e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   3a1a2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   3a1a4:	f7e5 bc90 	b.w	1fac8 <sys_heap_init>

0003a1a8 <k_mem_slab_init>:
{
   3a1a8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   3a1aa:	2400      	movs	r4, #0
   3a1ac:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   3a1ae:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3a1b0:	ea41 0402 	orr.w	r4, r1, r2
   3a1b4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   3a1b8:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   3a1bc:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3a1be:	d10c      	bne.n	3a1da <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   3a1c0:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3a1c2:	42a3      	cmp	r3, r4
   3a1c4:	d103      	bne.n	3a1ce <k_mem_slab_init+0x26>
   3a1c6:	e9c0 0000 	strd	r0, r0, [r0]
}
   3a1ca:	2000      	movs	r0, #0
}
   3a1cc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   3a1ce:	6985      	ldr	r5, [r0, #24]
   3a1d0:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   3a1d2:	3401      	adds	r4, #1
		slab->free_list = p;
   3a1d4:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   3a1d6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   3a1d8:	e7f3      	b.n	3a1c2 <k_mem_slab_init+0x1a>
		return -EINVAL;
   3a1da:	f06f 0015 	mvn.w	r0, #21
	return rc;
   3a1de:	e7f5      	b.n	3a1cc <k_mem_slab_init+0x24>

0003a1e0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3a1e0:	f3ef 8005 	mrs	r0, IPSR
}
   3a1e4:	3800      	subs	r0, #0
   3a1e6:	bf18      	it	ne
   3a1e8:	2001      	movne	r0, #1
   3a1ea:	4770      	bx	lr

0003a1ec <z_impl_k_thread_name_set>:
}
   3a1ec:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3a1f0:	4770      	bx	lr

0003a1f2 <k_thread_name_get>:
}
   3a1f2:	2000      	movs	r0, #0
   3a1f4:	4770      	bx	lr

0003a1f6 <z_impl_k_thread_start>:
	z_sched_start(thread);
   3a1f6:	f7f7 b845 	b.w	31284 <z_sched_start>

0003a1fa <z_pm_save_idle_exit>:
{
   3a1fa:	b508      	push	{r3, lr}
	pm_system_resume();
   3a1fc:	f7e7 fd0c 	bl	21c18 <pm_system_resume>
}
   3a200:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   3a204:	f7ff bdd0 	b.w	39da8 <sys_clock_idle_exit>

0003a208 <z_impl_k_mutex_init>:
{
   3a208:	4603      	mov	r3, r0
	mutex->owner = NULL;
   3a20a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   3a20c:	e9c3 0002 	strd	r0, r0, [r3, #8]
   3a210:	e9c3 3300 	strd	r3, r3, [r3]
}
   3a214:	4770      	bx	lr

0003a216 <z_queue_node_peek>:
{
   3a216:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3a218:	4604      	mov	r4, r0
   3a21a:	b130      	cbz	r0, 3a22a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3a21c:	6802      	ldr	r2, [r0, #0]
   3a21e:	0793      	lsls	r3, r2, #30
   3a220:	d003      	beq.n	3a22a <z_queue_node_peek+0x14>
		ret = anode->data;
   3a222:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3a224:	b109      	cbz	r1, 3a22a <z_queue_node_peek+0x14>
			k_free(anode);
   3a226:	f000 f952 	bl	3a4ce <k_free>
}
   3a22a:	4620      	mov	r0, r4
   3a22c:	bd10      	pop	{r4, pc}

0003a22e <z_impl_k_queue_init>:
	list->head = NULL;
   3a22e:	2300      	movs	r3, #0
	list->tail = NULL;
   3a230:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   3a234:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   3a236:	f100 030c 	add.w	r3, r0, #12
   3a23a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   3a23e:	f100 0314 	add.w	r3, r0, #20
   3a242:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   3a246:	4770      	bx	lr

0003a248 <k_queue_append>:
{
   3a248:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3a24a:	2301      	movs	r3, #1
   3a24c:	9300      	str	r3, [sp, #0]
   3a24e:	2300      	movs	r3, #0
{
   3a250:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3a252:	4619      	mov	r1, r3
   3a254:	f7f5 fcd0 	bl	2fbf8 <queue_insert>
}
   3a258:	b003      	add	sp, #12
   3a25a:	f85d fb04 	ldr.w	pc, [sp], #4

0003a25e <k_queue_prepend>:
{
   3a25e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   3a260:	2300      	movs	r3, #0
{
   3a262:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   3a264:	9300      	str	r3, [sp, #0]
   3a266:	4619      	mov	r1, r3
   3a268:	f7f5 fcc6 	bl	2fbf8 <queue_insert>
}
   3a26c:	b003      	add	sp, #12
   3a26e:	f85d fb04 	ldr.w	pc, [sp], #4

0003a272 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   3a272:	b15a      	cbz	r2, 3a28c <z_impl_k_sem_init+0x1a>
   3a274:	428a      	cmp	r2, r1
   3a276:	d309      	bcc.n	3a28c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   3a278:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3a27c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   3a280:	e9c0 0000 	strd	r0, r0, [r0]
   3a284:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   3a288:	2000      	movs	r0, #0
   3a28a:	4770      	bx	lr
		return -EINVAL;
   3a28c:	f06f 0015 	mvn.w	r0, #21
}
   3a290:	4770      	bx	lr

0003a292 <notify_queue_locked>:
	if (queue != NULL) {
   3a292:	b120      	cbz	r0, 3a29e <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   3a294:	2200      	movs	r2, #0
   3a296:	4611      	mov	r1, r2
   3a298:	3088      	adds	r0, #136	; 0x88
   3a29a:	f7f7 be0b 	b.w	31eb4 <z_sched_wake>
}
   3a29e:	4770      	bx	lr

0003a2a0 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   3a2a0:	68c3      	ldr	r3, [r0, #12]
{
   3a2a2:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   3a2a4:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   3a2a8:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3a2ac:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   3a2ae:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3a2b0:	d502      	bpl.n	3a2b8 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   3a2b2:	3010      	adds	r0, #16
   3a2b4:	f7f7 ffa6 	bl	32204 <z_abort_timeout>
}
   3a2b8:	4620      	mov	r0, r4
   3a2ba:	bd10      	pop	{r4, pc}

0003a2bc <cancel_async_locked>:
{
   3a2bc:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3a2be:	68c0      	ldr	r0, [r0, #12]
{
   3a2c0:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3a2c2:	0784      	lsls	r4, r0, #30
   3a2c4:	f3c0 0140 	ubfx	r1, r0, #1, #1
   3a2c8:	d416      	bmi.n	3a2f8 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   3a2ca:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   3a2ce:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   3a2d0:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   3a2d2:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   3a2d4:	d510      	bpl.n	3a2f8 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3a2d6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   3a2da:	b168      	cbz	r0, 3a2f8 <cancel_async_locked+0x3c>
   3a2dc:	4283      	cmp	r3, r0
   3a2de:	d11d      	bne.n	3a31c <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   3a2e0:	6818      	ldr	r0, [r3, #0]
   3a2e2:	b999      	cbnz	r1, 3a30c <cancel_async_locked+0x50>
   3a2e4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   3a2e8:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   3a2ec:	428b      	cmp	r3, r1
   3a2ee:	d101      	bne.n	3a2f4 <cancel_async_locked+0x38>
	list->tail = node;
   3a2f0:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   3a2f4:	2200      	movs	r2, #0
   3a2f6:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   3a2f8:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   3a2fa:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   3a2fe:	bf1e      	ittt	ne
   3a300:	f042 0202 	orrne.w	r2, r2, #2
   3a304:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3a306:	f002 000f 	andne.w	r0, r2, #15
}
   3a30a:	bd10      	pop	{r4, pc}
   3a30c:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   3a30e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   3a312:	4283      	cmp	r3, r0
	list->tail = node;
   3a314:	bf08      	it	eq
   3a316:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   3a31a:	e7eb      	b.n	3a2f4 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   3a31c:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3a31e:	6800      	ldr	r0, [r0, #0]
   3a320:	e7db      	b.n	3a2da <cancel_async_locked+0x1e>

0003a322 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   3a322:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   3a326:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   3a32a:	4283      	cmp	r3, r0
		return b2 - b1;
   3a32c:	bf14      	ite	ne
   3a32e:	1ac0      	subne	r0, r0, r3
	return 0;
   3a330:	2000      	moveq	r0, #0
}
   3a332:	4770      	bx	lr

0003a334 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3a334:	4603      	mov	r3, r0
   3a336:	b920      	cbnz	r0, 3a342 <z_reschedule_irqlock+0xe>
   3a338:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   3a33c:	b90a      	cbnz	r2, 3a342 <z_reschedule_irqlock+0xe>
   3a33e:	f7e7 bff3 	b.w	22328 <arch_swap>
   3a342:	f383 8811 	msr	BASEPRI, r3
   3a346:	f3bf 8f6f 	isb	sy
}
   3a34a:	4770      	bx	lr

0003a34c <z_reschedule_unlocked>:
	__asm__ volatile(
   3a34c:	f04f 0340 	mov.w	r3, #64	; 0x40
   3a350:	f3ef 8011 	mrs	r0, BASEPRI
   3a354:	f383 8812 	msr	BASEPRI_MAX, r3
   3a358:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3a35c:	f7ff bfea 	b.w	3a334 <z_reschedule_irqlock>

0003a360 <z_priq_dumb_best>:
{
   3a360:	4603      	mov	r3, r0
	return list->head == list;
   3a362:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3a364:	4283      	cmp	r3, r0
   3a366:	d003      	beq.n	3a370 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   3a368:	2800      	cmp	r0, #0
   3a36a:	bf38      	it	cc
   3a36c:	2000      	movcc	r0, #0
   3a36e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   3a370:	2000      	movs	r0, #0
}
   3a372:	4770      	bx	lr

0003a374 <z_unpend_all>:
{
   3a374:	b538      	push	{r3, r4, r5, lr}
   3a376:	4605      	mov	r5, r0
	int need_sched = 0;
   3a378:	2000      	movs	r0, #0
	return list->head == list;
   3a37a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3a37c:	42a5      	cmp	r5, r4
   3a37e:	d000      	beq.n	3a382 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3a380:	b904      	cbnz	r4, 3a384 <z_unpend_all+0x10>
}
   3a382:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   3a384:	4620      	mov	r0, r4
   3a386:	f7f6 fd91 	bl	30eac <z_unpend_thread>
		z_ready_thread(thread);
   3a38a:	4620      	mov	r0, r4
   3a38c:	f7f6 ff32 	bl	311f4 <z_ready_thread>
		need_sched = 1;
   3a390:	2001      	movs	r0, #1
   3a392:	e7f2      	b.n	3a37a <z_unpend_all+0x6>

0003a394 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   3a394:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   3a396:	f7f8 f8e7 	bl	32568 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3a39a:	bd08      	pop	{r3, pc}

0003a39c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   3a39c:	b108      	cbz	r0, 3a3a2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   3a39e:	f7e8 be31 	b.w	23004 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   3a3a2:	4770      	bx	lr

0003a3a4 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   3a3a4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3a3a6:	1c4b      	adds	r3, r1, #1
   3a3a8:	bf08      	it	eq
   3a3aa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   3a3ae:	4604      	mov	r4, r0
   3a3b0:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3a3b2:	d013      	beq.n	3a3dc <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3a3b4:	ea54 0105 	orrs.w	r1, r4, r5
   3a3b8:	d103      	bne.n	3a3c2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3a3ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   3a3be:	f7f8 b8d3 	b.w	32568 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3a3c2:	f06f 0101 	mvn.w	r1, #1
   3a3c6:	1a0a      	subs	r2, r1, r0
   3a3c8:	f04f 31ff 	mov.w	r1, #4294967295
   3a3cc:	eb61 0305 	sbc.w	r3, r1, r5
   3a3d0:	2a00      	cmp	r2, #0
   3a3d2:	f173 0100 	sbcs.w	r1, r3, #0
   3a3d6:	db02      	blt.n	3a3de <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   3a3d8:	4610      	mov	r0, r2
   3a3da:	4619      	mov	r1, r3
}
   3a3dc:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   3a3de:	f7f8 f8c3 	bl	32568 <sys_clock_tick_get>
   3a3e2:	2c01      	cmp	r4, #1
   3a3e4:	f175 0300 	sbcs.w	r3, r5, #0
   3a3e8:	bfbc      	itt	lt
   3a3ea:	2401      	movlt	r4, #1
   3a3ec:	2500      	movlt	r5, #0
   3a3ee:	1820      	adds	r0, r4, r0
   3a3f0:	eb45 0101 	adc.w	r1, r5, r1
   3a3f4:	e7f2      	b.n	3a3dc <sys_clock_timeout_end_calc+0x38>

0003a3f6 <k_timer_init>:
	timer->status = 0U;
   3a3f6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   3a3f8:	e9c0 1208 	strd	r1, r2, [r0, #32]
   3a3fc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   3a400:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   3a404:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   3a408:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   3a40a:	6343      	str	r3, [r0, #52]	; 0x34
}
   3a40c:	4770      	bx	lr

0003a40e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   3a40e:	b510      	push	{r4, lr}
   3a410:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   3a412:	f7f7 fef7 	bl	32204 <z_abort_timeout>

	if (inactive) {
   3a416:	b9b0      	cbnz	r0, 3a446 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   3a418:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3a41a:	b10b      	cbz	r3, 3a420 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3a41c:	4620      	mov	r0, r4
   3a41e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   3a420:	f104 0018 	add.w	r0, r4, #24
   3a424:	f7f7 fa4a 	bl	318bc <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   3a428:	b168      	cbz	r0, 3a446 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   3a42a:	f7f6 fee3 	bl	311f4 <z_ready_thread>
   3a42e:	f04f 0340 	mov.w	r3, #64	; 0x40
   3a432:	f3ef 8011 	mrs	r0, BASEPRI
   3a436:	f383 8812 	msr	BASEPRI_MAX, r3
   3a43a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   3a43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3a442:	f7ff bf77 	b.w	3a334 <z_reschedule_irqlock>
   3a446:	bd10      	pop	{r4, pc}

0003a448 <add_event>:
{
   3a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a44a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3a44c:	e9d0 2300 	ldrd	r2, r3, [r0]
   3a450:	4290      	cmp	r0, r2
   3a452:	4604      	mov	r4, r0
   3a454:	460d      	mov	r5, r1
   3a456:	d105      	bne.n	3a464 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   3a458:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   3a45a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   3a45e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3a460:	6065      	str	r5, [r4, #4]
}
   3a462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   3a464:	2b00      	cmp	r3, #0
   3a466:	d0f7      	beq.n	3a458 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3a468:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3a46a:	b100      	cbz	r0, 3a46e <add_event+0x26>
   3a46c:	3860      	subs	r0, #96	; 0x60
   3a46e:	b107      	cbz	r7, 3a472 <add_event+0x2a>
   3a470:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3a472:	4639      	mov	r1, r7
   3a474:	f7ff ff55 	bl	3a322 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3a478:	2800      	cmp	r0, #0
   3a47a:	dced      	bgt.n	3a458 <add_event+0x10>
	return list->head == list;
   3a47c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3a47e:	42b4      	cmp	r4, r6
   3a480:	d0ea      	beq.n	3a458 <add_event+0x10>
   3a482:	2e00      	cmp	r6, #0
   3a484:	bf38      	it	cc
   3a486:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3a488:	2e00      	cmp	r6, #0
   3a48a:	d0e5      	beq.n	3a458 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   3a48c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3a48e:	b101      	cbz	r1, 3a492 <add_event+0x4a>
   3a490:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   3a492:	4638      	mov	r0, r7
   3a494:	f7ff ff45 	bl	3a322 <z_sched_prio_cmp>
   3a498:	2800      	cmp	r0, #0
   3a49a:	dd05      	ble.n	3a4a8 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   3a49c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3a49e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   3a4a2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   3a4a4:	6075      	str	r5, [r6, #4]
			return;
   3a4a6:	e7dc      	b.n	3a462 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   3a4a8:	6863      	ldr	r3, [r4, #4]
   3a4aa:	42b3      	cmp	r3, r6
   3a4ac:	d0d4      	beq.n	3a458 <add_event+0x10>
   3a4ae:	6836      	ldr	r6, [r6, #0]
   3a4b0:	e7ea      	b.n	3a488 <add_event+0x40>

0003a4b2 <z_handle_obj_poll_events>:
{
   3a4b2:	4603      	mov	r3, r0
	return list->head == list;
   3a4b4:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3a4b6:	4283      	cmp	r3, r0
   3a4b8:	d008      	beq.n	3a4cc <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   3a4ba:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   3a4be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3a4c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3a4c2:	2300      	movs	r3, #0
	node->prev = NULL;
   3a4c4:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   3a4c8:	f7f8 bba2 	b.w	32c10 <signal_poll_event>
}
   3a4cc:	4770      	bx	lr

0003a4ce <k_free>:
	if (ptr != NULL) {
   3a4ce:	b120      	cbz	r0, 3a4da <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   3a4d0:	1f01      	subs	r1, r0, #4
   3a4d2:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3a4d6:	f7f4 bed3 	b.w	2f280 <k_heap_free>
}
   3a4da:	4770      	bx	lr

0003a4dc <k_malloc>:
{
   3a4dc:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   3a4de:	2004      	movs	r0, #4
   3a4e0:	f7f8 bdfa 	b.w	330d8 <k_aligned_alloc>

0003a4e4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   3a4e4:	4770      	bx	lr

0003a4e6 <memcmp>:
   3a4e6:	b530      	push	{r4, r5, lr}
   3a4e8:	3901      	subs	r1, #1
   3a4ea:	2400      	movs	r4, #0
   3a4ec:	42a2      	cmp	r2, r4
   3a4ee:	d101      	bne.n	3a4f4 <memcmp+0xe>
   3a4f0:	2000      	movs	r0, #0
   3a4f2:	e005      	b.n	3a500 <memcmp+0x1a>
   3a4f4:	5d03      	ldrb	r3, [r0, r4]
   3a4f6:	3401      	adds	r4, #1
   3a4f8:	5d0d      	ldrb	r5, [r1, r4]
   3a4fa:	42ab      	cmp	r3, r5
   3a4fc:	d0f6      	beq.n	3a4ec <memcmp+0x6>
   3a4fe:	1b58      	subs	r0, r3, r5
   3a500:	bd30      	pop	{r4, r5, pc}

0003a502 <memcpy>:
   3a502:	440a      	add	r2, r1
   3a504:	4291      	cmp	r1, r2
   3a506:	f100 33ff 	add.w	r3, r0, #4294967295
   3a50a:	d100      	bne.n	3a50e <memcpy+0xc>
   3a50c:	4770      	bx	lr
   3a50e:	b510      	push	{r4, lr}
   3a510:	f811 4b01 	ldrb.w	r4, [r1], #1
   3a514:	f803 4f01 	strb.w	r4, [r3, #1]!
   3a518:	4291      	cmp	r1, r2
   3a51a:	d1f9      	bne.n	3a510 <memcpy+0xe>
   3a51c:	bd10      	pop	{r4, pc}

0003a51e <__memcpy_chk>:
   3a51e:	429a      	cmp	r2, r3
   3a520:	b508      	push	{r3, lr}
   3a522:	d901      	bls.n	3a528 <__memcpy_chk+0xa>
   3a524:	f7e8 fd18 	bl	22f58 <__chk_fail>
   3a528:	4281      	cmp	r1, r0
   3a52a:	d804      	bhi.n	3a536 <__memcpy_chk+0x18>
   3a52c:	188b      	adds	r3, r1, r2
   3a52e:	4298      	cmp	r0, r3
   3a530:	d3f8      	bcc.n	3a524 <__memcpy_chk+0x6>
   3a532:	4281      	cmp	r1, r0
   3a534:	d102      	bne.n	3a53c <__memcpy_chk+0x1e>
   3a536:	1883      	adds	r3, r0, r2
   3a538:	4299      	cmp	r1, r3
   3a53a:	d3f3      	bcc.n	3a524 <__memcpy_chk+0x6>
   3a53c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3a540:	f7ff bfdf 	b.w	3a502 <memcpy>

0003a544 <memmove>:
   3a544:	4288      	cmp	r0, r1
   3a546:	b510      	push	{r4, lr}
   3a548:	eb01 0402 	add.w	r4, r1, r2
   3a54c:	d902      	bls.n	3a554 <memmove+0x10>
   3a54e:	4284      	cmp	r4, r0
   3a550:	4623      	mov	r3, r4
   3a552:	d807      	bhi.n	3a564 <memmove+0x20>
   3a554:	1e43      	subs	r3, r0, #1
   3a556:	42a1      	cmp	r1, r4
   3a558:	d008      	beq.n	3a56c <memmove+0x28>
   3a55a:	f811 2b01 	ldrb.w	r2, [r1], #1
   3a55e:	f803 2f01 	strb.w	r2, [r3, #1]!
   3a562:	e7f8      	b.n	3a556 <memmove+0x12>
   3a564:	4402      	add	r2, r0
   3a566:	4601      	mov	r1, r0
   3a568:	428a      	cmp	r2, r1
   3a56a:	d100      	bne.n	3a56e <memmove+0x2a>
   3a56c:	bd10      	pop	{r4, pc}
   3a56e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   3a572:	f802 4d01 	strb.w	r4, [r2, #-1]!
   3a576:	e7f7      	b.n	3a568 <memmove+0x24>

0003a578 <memset>:
   3a578:	4402      	add	r2, r0
   3a57a:	4603      	mov	r3, r0
   3a57c:	4293      	cmp	r3, r2
   3a57e:	d100      	bne.n	3a582 <memset+0xa>
   3a580:	4770      	bx	lr
   3a582:	f803 1b01 	strb.w	r1, [r3], #1
   3a586:	e7f9      	b.n	3a57c <memset+0x4>

0003a588 <__memset_chk>:
   3a588:	429a      	cmp	r2, r3
   3a58a:	b508      	push	{r3, lr}
   3a58c:	d901      	bls.n	3a592 <__memset_chk+0xa>
   3a58e:	f7e8 fce3 	bl	22f58 <__chk_fail>
   3a592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3a596:	f7ff bfef 	b.w	3a578 <memset>

0003a59a <__sfputc_r>:
   3a59a:	6893      	ldr	r3, [r2, #8]
   3a59c:	3b01      	subs	r3, #1
   3a59e:	2b00      	cmp	r3, #0
   3a5a0:	b410      	push	{r4}
   3a5a2:	6093      	str	r3, [r2, #8]
   3a5a4:	da07      	bge.n	3a5b6 <__sfputc_r+0x1c>
   3a5a6:	6994      	ldr	r4, [r2, #24]
   3a5a8:	42a3      	cmp	r3, r4
   3a5aa:	db01      	blt.n	3a5b0 <__sfputc_r+0x16>
   3a5ac:	290a      	cmp	r1, #10
   3a5ae:	d102      	bne.n	3a5b6 <__sfputc_r+0x1c>
   3a5b0:	bc10      	pop	{r4}
   3a5b2:	f7fc b85b 	b.w	3666c <__swbuf_r>
   3a5b6:	6813      	ldr	r3, [r2, #0]
   3a5b8:	1c58      	adds	r0, r3, #1
   3a5ba:	6010      	str	r0, [r2, #0]
   3a5bc:	7019      	strb	r1, [r3, #0]
   3a5be:	4608      	mov	r0, r1
   3a5c0:	bc10      	pop	{r4}
   3a5c2:	4770      	bx	lr

0003a5c4 <__sfputs_r>:
   3a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a5c6:	4606      	mov	r6, r0
   3a5c8:	460f      	mov	r7, r1
   3a5ca:	4614      	mov	r4, r2
   3a5cc:	18d5      	adds	r5, r2, r3
   3a5ce:	42ac      	cmp	r4, r5
   3a5d0:	d101      	bne.n	3a5d6 <__sfputs_r+0x12>
   3a5d2:	2000      	movs	r0, #0
   3a5d4:	e007      	b.n	3a5e6 <__sfputs_r+0x22>
   3a5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   3a5da:	463a      	mov	r2, r7
   3a5dc:	4630      	mov	r0, r6
   3a5de:	f7ff ffdc 	bl	3a59a <__sfputc_r>
   3a5e2:	1c43      	adds	r3, r0, #1
   3a5e4:	d1f3      	bne.n	3a5ce <__sfputs_r+0xa>
   3a5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003a5e8 <__cvt>:
   3a5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a5ec:	b088      	sub	sp, #32
   3a5ee:	2b00      	cmp	r3, #0
   3a5f0:	461f      	mov	r7, r3
   3a5f2:	4614      	mov	r4, r2
   3a5f4:	bfb8      	it	lt
   3a5f6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   3a5fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   3a5fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
   3a5fe:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   3a602:	bfb6      	itet	lt
   3a604:	461f      	movlt	r7, r3
   3a606:	2300      	movge	r3, #0
   3a608:	232d      	movlt	r3, #45	; 0x2d
   3a60a:	7013      	strb	r3, [r2, #0]
   3a60c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3a60e:	f023 0820 	bic.w	r8, r3, #32
   3a612:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   3a616:	d005      	beq.n	3a624 <__cvt+0x3c>
   3a618:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   3a61c:	d100      	bne.n	3a620 <__cvt+0x38>
   3a61e:	3501      	adds	r5, #1
   3a620:	2302      	movs	r3, #2
   3a622:	e000      	b.n	3a626 <__cvt+0x3e>
   3a624:	2303      	movs	r3, #3
   3a626:	aa07      	add	r2, sp, #28
   3a628:	9204      	str	r2, [sp, #16]
   3a62a:	aa06      	add	r2, sp, #24
   3a62c:	e9cd a202 	strd	sl, r2, [sp, #8]
   3a630:	e9cd 3500 	strd	r3, r5, [sp]
   3a634:	4622      	mov	r2, r4
   3a636:	463b      	mov	r3, r7
   3a638:	f7e2 f9e6 	bl	1ca08 <_dtoa_r>
   3a63c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   3a640:	4606      	mov	r6, r0
   3a642:	d102      	bne.n	3a64a <__cvt+0x62>
   3a644:	9b11      	ldr	r3, [sp, #68]	; 0x44
   3a646:	07db      	lsls	r3, r3, #31
   3a648:	d522      	bpl.n	3a690 <__cvt+0xa8>
   3a64a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   3a64e:	eb06 0905 	add.w	r9, r6, r5
   3a652:	d110      	bne.n	3a676 <__cvt+0x8e>
   3a654:	7833      	ldrb	r3, [r6, #0]
   3a656:	2b30      	cmp	r3, #48	; 0x30
   3a658:	d10a      	bne.n	3a670 <__cvt+0x88>
   3a65a:	2200      	movs	r2, #0
   3a65c:	2300      	movs	r3, #0
   3a65e:	4620      	mov	r0, r4
   3a660:	4639      	mov	r1, r7
   3a662:	f7d2 fc3b 	bl	cedc <__aeabi_dcmpeq>
   3a666:	b918      	cbnz	r0, 3a670 <__cvt+0x88>
   3a668:	f1c5 0501 	rsb	r5, r5, #1
   3a66c:	f8ca 5000 	str.w	r5, [sl]
   3a670:	f8da 3000 	ldr.w	r3, [sl]
   3a674:	4499      	add	r9, r3
   3a676:	2200      	movs	r2, #0
   3a678:	2300      	movs	r3, #0
   3a67a:	4620      	mov	r0, r4
   3a67c:	4639      	mov	r1, r7
   3a67e:	f7d2 fc2d 	bl	cedc <__aeabi_dcmpeq>
   3a682:	b108      	cbz	r0, 3a688 <__cvt+0xa0>
   3a684:	f8cd 901c 	str.w	r9, [sp, #28]
   3a688:	2230      	movs	r2, #48	; 0x30
   3a68a:	9b07      	ldr	r3, [sp, #28]
   3a68c:	454b      	cmp	r3, r9
   3a68e:	d307      	bcc.n	3a6a0 <__cvt+0xb8>
   3a690:	9b07      	ldr	r3, [sp, #28]
   3a692:	9a15      	ldr	r2, [sp, #84]	; 0x54
   3a694:	1b9b      	subs	r3, r3, r6
   3a696:	4630      	mov	r0, r6
   3a698:	6013      	str	r3, [r2, #0]
   3a69a:	b008      	add	sp, #32
   3a69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a6a0:	1c59      	adds	r1, r3, #1
   3a6a2:	9107      	str	r1, [sp, #28]
   3a6a4:	701a      	strb	r2, [r3, #0]
   3a6a6:	e7f0      	b.n	3a68a <__cvt+0xa2>

0003a6a8 <__exponent>:
   3a6a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3a6aa:	4603      	mov	r3, r0
   3a6ac:	2900      	cmp	r1, #0
   3a6ae:	bfb8      	it	lt
   3a6b0:	4249      	neglt	r1, r1
   3a6b2:	f803 2b02 	strb.w	r2, [r3], #2
   3a6b6:	bfb4      	ite	lt
   3a6b8:	222d      	movlt	r2, #45	; 0x2d
   3a6ba:	222b      	movge	r2, #43	; 0x2b
   3a6bc:	2909      	cmp	r1, #9
   3a6be:	7042      	strb	r2, [r0, #1]
   3a6c0:	dd2a      	ble.n	3a718 <__exponent+0x70>
   3a6c2:	f10d 0407 	add.w	r4, sp, #7
   3a6c6:	46a4      	mov	ip, r4
   3a6c8:	270a      	movs	r7, #10
   3a6ca:	46a6      	mov	lr, r4
   3a6cc:	460a      	mov	r2, r1
   3a6ce:	fb91 f6f7 	sdiv	r6, r1, r7
   3a6d2:	fb07 1516 	mls	r5, r7, r6, r1
   3a6d6:	3530      	adds	r5, #48	; 0x30
   3a6d8:	2a63      	cmp	r2, #99	; 0x63
   3a6da:	f104 34ff 	add.w	r4, r4, #4294967295
   3a6de:	f80e 5c01 	strb.w	r5, [lr, #-1]
   3a6e2:	4631      	mov	r1, r6
   3a6e4:	dcf1      	bgt.n	3a6ca <__exponent+0x22>
   3a6e6:	3130      	adds	r1, #48	; 0x30
   3a6e8:	f1ae 0502 	sub.w	r5, lr, #2
   3a6ec:	f804 1c01 	strb.w	r1, [r4, #-1]
   3a6f0:	1c44      	adds	r4, r0, #1
   3a6f2:	4629      	mov	r1, r5
   3a6f4:	4561      	cmp	r1, ip
   3a6f6:	d30a      	bcc.n	3a70e <__exponent+0x66>
   3a6f8:	f10d 0209 	add.w	r2, sp, #9
   3a6fc:	eba2 020e 	sub.w	r2, r2, lr
   3a700:	4565      	cmp	r5, ip
   3a702:	bf88      	it	hi
   3a704:	2200      	movhi	r2, #0
   3a706:	4413      	add	r3, r2
   3a708:	1a18      	subs	r0, r3, r0
   3a70a:	b003      	add	sp, #12
   3a70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3a70e:	f811 2b01 	ldrb.w	r2, [r1], #1
   3a712:	f804 2f01 	strb.w	r2, [r4, #1]!
   3a716:	e7ed      	b.n	3a6f4 <__exponent+0x4c>
   3a718:	2330      	movs	r3, #48	; 0x30
   3a71a:	3130      	adds	r1, #48	; 0x30
   3a71c:	7083      	strb	r3, [r0, #2]
   3a71e:	70c1      	strb	r1, [r0, #3]
   3a720:	1d03      	adds	r3, r0, #4
   3a722:	e7f1      	b.n	3a708 <__exponent+0x60>

0003a724 <_printf_common>:
   3a724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a728:	4616      	mov	r6, r2
   3a72a:	4699      	mov	r9, r3
   3a72c:	688a      	ldr	r2, [r1, #8]
   3a72e:	690b      	ldr	r3, [r1, #16]
   3a730:	f8dd 8020 	ldr.w	r8, [sp, #32]
   3a734:	4293      	cmp	r3, r2
   3a736:	bfb8      	it	lt
   3a738:	4613      	movlt	r3, r2
   3a73a:	6033      	str	r3, [r6, #0]
   3a73c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   3a740:	4607      	mov	r7, r0
   3a742:	460c      	mov	r4, r1
   3a744:	b10a      	cbz	r2, 3a74a <_printf_common+0x26>
   3a746:	3301      	adds	r3, #1
   3a748:	6033      	str	r3, [r6, #0]
   3a74a:	6823      	ldr	r3, [r4, #0]
   3a74c:	0699      	lsls	r1, r3, #26
   3a74e:	bf42      	ittt	mi
   3a750:	6833      	ldrmi	r3, [r6, #0]
   3a752:	3302      	addmi	r3, #2
   3a754:	6033      	strmi	r3, [r6, #0]
   3a756:	6825      	ldr	r5, [r4, #0]
   3a758:	f015 0506 	ands.w	r5, r5, #6
   3a75c:	d106      	bne.n	3a76c <_printf_common+0x48>
   3a75e:	f104 0a19 	add.w	sl, r4, #25
   3a762:	68e3      	ldr	r3, [r4, #12]
   3a764:	6832      	ldr	r2, [r6, #0]
   3a766:	1a9b      	subs	r3, r3, r2
   3a768:	42ab      	cmp	r3, r5
   3a76a:	dc26      	bgt.n	3a7ba <_printf_common+0x96>
   3a76c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   3a770:	1e13      	subs	r3, r2, #0
   3a772:	6822      	ldr	r2, [r4, #0]
   3a774:	bf18      	it	ne
   3a776:	2301      	movne	r3, #1
   3a778:	0692      	lsls	r2, r2, #26
   3a77a:	d42b      	bmi.n	3a7d4 <_printf_common+0xb0>
   3a77c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3a780:	4649      	mov	r1, r9
   3a782:	4638      	mov	r0, r7
   3a784:	47c0      	blx	r8
   3a786:	3001      	adds	r0, #1
   3a788:	d01e      	beq.n	3a7c8 <_printf_common+0xa4>
   3a78a:	6823      	ldr	r3, [r4, #0]
   3a78c:	68e5      	ldr	r5, [r4, #12]
   3a78e:	6832      	ldr	r2, [r6, #0]
   3a790:	f003 0306 	and.w	r3, r3, #6
   3a794:	2b04      	cmp	r3, #4
   3a796:	bf08      	it	eq
   3a798:	1aad      	subeq	r5, r5, r2
   3a79a:	68a3      	ldr	r3, [r4, #8]
   3a79c:	6922      	ldr	r2, [r4, #16]
   3a79e:	bf0c      	ite	eq
   3a7a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3a7a4:	2500      	movne	r5, #0
   3a7a6:	4293      	cmp	r3, r2
   3a7a8:	bfc4      	itt	gt
   3a7aa:	1a9b      	subgt	r3, r3, r2
   3a7ac:	18ed      	addgt	r5, r5, r3
   3a7ae:	2600      	movs	r6, #0
   3a7b0:	341a      	adds	r4, #26
   3a7b2:	42b5      	cmp	r5, r6
   3a7b4:	d11a      	bne.n	3a7ec <_printf_common+0xc8>
   3a7b6:	2000      	movs	r0, #0
   3a7b8:	e008      	b.n	3a7cc <_printf_common+0xa8>
   3a7ba:	2301      	movs	r3, #1
   3a7bc:	4652      	mov	r2, sl
   3a7be:	4649      	mov	r1, r9
   3a7c0:	4638      	mov	r0, r7
   3a7c2:	47c0      	blx	r8
   3a7c4:	3001      	adds	r0, #1
   3a7c6:	d103      	bne.n	3a7d0 <_printf_common+0xac>
   3a7c8:	f04f 30ff 	mov.w	r0, #4294967295
   3a7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a7d0:	3501      	adds	r5, #1
   3a7d2:	e7c6      	b.n	3a762 <_printf_common+0x3e>
   3a7d4:	18e1      	adds	r1, r4, r3
   3a7d6:	1c5a      	adds	r2, r3, #1
   3a7d8:	2030      	movs	r0, #48	; 0x30
   3a7da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   3a7de:	4422      	add	r2, r4
   3a7e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   3a7e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   3a7e8:	3302      	adds	r3, #2
   3a7ea:	e7c7      	b.n	3a77c <_printf_common+0x58>
   3a7ec:	2301      	movs	r3, #1
   3a7ee:	4622      	mov	r2, r4
   3a7f0:	4649      	mov	r1, r9
   3a7f2:	4638      	mov	r0, r7
   3a7f4:	47c0      	blx	r8
   3a7f6:	3001      	adds	r0, #1
   3a7f8:	d0e6      	beq.n	3a7c8 <_printf_common+0xa4>
   3a7fa:	3601      	adds	r6, #1
   3a7fc:	e7d9      	b.n	3a7b2 <_printf_common+0x8e>

0003a7fe <strcpy>:
   3a7fe:	4603      	mov	r3, r0
   3a800:	f811 2b01 	ldrb.w	r2, [r1], #1
   3a804:	f803 2b01 	strb.w	r2, [r3], #1
   3a808:	2a00      	cmp	r2, #0
   3a80a:	d1f9      	bne.n	3a800 <strcpy+0x2>
   3a80c:	4770      	bx	lr

0003a80e <strncmp>:
   3a80e:	b510      	push	{r4, lr}
   3a810:	b16a      	cbz	r2, 3a82e <strncmp+0x20>
   3a812:	3901      	subs	r1, #1
   3a814:	1884      	adds	r4, r0, r2
   3a816:	f810 3b01 	ldrb.w	r3, [r0], #1
   3a81a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   3a81e:	4293      	cmp	r3, r2
   3a820:	d103      	bne.n	3a82a <strncmp+0x1c>
   3a822:	42a0      	cmp	r0, r4
   3a824:	d001      	beq.n	3a82a <strncmp+0x1c>
   3a826:	2b00      	cmp	r3, #0
   3a828:	d1f5      	bne.n	3a816 <strncmp+0x8>
   3a82a:	1a98      	subs	r0, r3, r2
   3a82c:	bd10      	pop	{r4, pc}
   3a82e:	4610      	mov	r0, r2
   3a830:	e7fc      	b.n	3a82c <strncmp+0x1e>

0003a832 <strnlen>:
   3a832:	b510      	push	{r4, lr}
   3a834:	4602      	mov	r2, r0
   3a836:	4401      	add	r1, r0
   3a838:	428a      	cmp	r2, r1
   3a83a:	4613      	mov	r3, r2
   3a83c:	d101      	bne.n	3a842 <strnlen+0x10>
   3a83e:	1a18      	subs	r0, r3, r0
   3a840:	bd10      	pop	{r4, pc}
   3a842:	781c      	ldrb	r4, [r3, #0]
   3a844:	3201      	adds	r2, #1
   3a846:	2c00      	cmp	r4, #0
   3a848:	d1f6      	bne.n	3a838 <strnlen+0x6>
   3a84a:	e7f8      	b.n	3a83e <strnlen+0xc>

0003a84c <abort>:
   3a84c:	b508      	push	{r3, lr}
   3a84e:	2006      	movs	r0, #6
   3a850:	f7fc f9ec 	bl	36c2c <raise>
   3a854:	2001      	movs	r0, #1
   3a856:	f7e8 faf9 	bl	22e4c <_exit>

0003a85a <quorem>:
   3a85a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a85e:	6903      	ldr	r3, [r0, #16]
   3a860:	690c      	ldr	r4, [r1, #16]
   3a862:	42a3      	cmp	r3, r4
   3a864:	4607      	mov	r7, r0
   3a866:	f2c0 8081 	blt.w	3a96c <quorem+0x112>
   3a86a:	3c01      	subs	r4, #1
   3a86c:	f101 0814 	add.w	r8, r1, #20
   3a870:	f100 0514 	add.w	r5, r0, #20
   3a874:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3a878:	9301      	str	r3, [sp, #4]
   3a87a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   3a87e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3a882:	3301      	adds	r3, #1
   3a884:	429a      	cmp	r2, r3
   3a886:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   3a88a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   3a88e:	fbb2 f6f3 	udiv	r6, r2, r3
   3a892:	d331      	bcc.n	3a8f8 <quorem+0x9e>
   3a894:	f04f 0e00 	mov.w	lr, #0
   3a898:	4640      	mov	r0, r8
   3a89a:	46ac      	mov	ip, r5
   3a89c:	46f2      	mov	sl, lr
   3a89e:	f850 2b04 	ldr.w	r2, [r0], #4
   3a8a2:	b293      	uxth	r3, r2
   3a8a4:	fb06 e303 	mla	r3, r6, r3, lr
   3a8a8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   3a8ac:	b29b      	uxth	r3, r3
   3a8ae:	ebaa 0303 	sub.w	r3, sl, r3
   3a8b2:	0c12      	lsrs	r2, r2, #16
   3a8b4:	f8dc a000 	ldr.w	sl, [ip]
   3a8b8:	fb06 e202 	mla	r2, r6, r2, lr
   3a8bc:	fa13 f38a 	uxtah	r3, r3, sl
   3a8c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   3a8c4:	fa1f fa82 	uxth.w	sl, r2
   3a8c8:	f8dc 2000 	ldr.w	r2, [ip]
   3a8cc:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   3a8d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   3a8d4:	b29b      	uxth	r3, r3
   3a8d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3a8da:	4581      	cmp	r9, r0
   3a8dc:	f84c 3b04 	str.w	r3, [ip], #4
   3a8e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
   3a8e4:	d2db      	bcs.n	3a89e <quorem+0x44>
   3a8e6:	f855 300b 	ldr.w	r3, [r5, fp]
   3a8ea:	b92b      	cbnz	r3, 3a8f8 <quorem+0x9e>
   3a8ec:	9b01      	ldr	r3, [sp, #4]
   3a8ee:	3b04      	subs	r3, #4
   3a8f0:	429d      	cmp	r5, r3
   3a8f2:	461a      	mov	r2, r3
   3a8f4:	d32e      	bcc.n	3a954 <quorem+0xfa>
   3a8f6:	613c      	str	r4, [r7, #16]
   3a8f8:	4638      	mov	r0, r7
   3a8fa:	f000 fa6d 	bl	3add8 <__mcmp>
   3a8fe:	2800      	cmp	r0, #0
   3a900:	db24      	blt.n	3a94c <quorem+0xf2>
   3a902:	3601      	adds	r6, #1
   3a904:	4628      	mov	r0, r5
   3a906:	f04f 0c00 	mov.w	ip, #0
   3a90a:	f858 2b04 	ldr.w	r2, [r8], #4
   3a90e:	f8d0 e000 	ldr.w	lr, [r0]
   3a912:	b293      	uxth	r3, r2
   3a914:	ebac 0303 	sub.w	r3, ip, r3
   3a918:	0c12      	lsrs	r2, r2, #16
   3a91a:	fa13 f38e 	uxtah	r3, r3, lr
   3a91e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   3a922:	eb02 4223 	add.w	r2, r2, r3, asr #16
   3a926:	b29b      	uxth	r3, r3
   3a928:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3a92c:	45c1      	cmp	r9, r8
   3a92e:	f840 3b04 	str.w	r3, [r0], #4
   3a932:	ea4f 4c22 	mov.w	ip, r2, asr #16
   3a936:	d2e8      	bcs.n	3a90a <quorem+0xb0>
   3a938:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3a93c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3a940:	b922      	cbnz	r2, 3a94c <quorem+0xf2>
   3a942:	3b04      	subs	r3, #4
   3a944:	429d      	cmp	r5, r3
   3a946:	461a      	mov	r2, r3
   3a948:	d30a      	bcc.n	3a960 <quorem+0x106>
   3a94a:	613c      	str	r4, [r7, #16]
   3a94c:	4630      	mov	r0, r6
   3a94e:	b003      	add	sp, #12
   3a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a954:	6812      	ldr	r2, [r2, #0]
   3a956:	3b04      	subs	r3, #4
   3a958:	2a00      	cmp	r2, #0
   3a95a:	d1cc      	bne.n	3a8f6 <quorem+0x9c>
   3a95c:	3c01      	subs	r4, #1
   3a95e:	e7c7      	b.n	3a8f0 <quorem+0x96>
   3a960:	6812      	ldr	r2, [r2, #0]
   3a962:	3b04      	subs	r3, #4
   3a964:	2a00      	cmp	r2, #0
   3a966:	d1f0      	bne.n	3a94a <quorem+0xf0>
   3a968:	3c01      	subs	r4, #1
   3a96a:	e7eb      	b.n	3a944 <quorem+0xea>
   3a96c:	2000      	movs	r0, #0
   3a96e:	e7ee      	b.n	3a94e <quorem+0xf4>

0003a970 <__sfmoreglue>:
   3a970:	b570      	push	{r4, r5, r6, lr}
   3a972:	1e4a      	subs	r2, r1, #1
   3a974:	2568      	movs	r5, #104	; 0x68
   3a976:	4355      	muls	r5, r2
   3a978:	460e      	mov	r6, r1
   3a97a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   3a97e:	f7fb f905 	bl	35b8c <_malloc_r>
   3a982:	4604      	mov	r4, r0
   3a984:	b140      	cbz	r0, 3a998 <__sfmoreglue+0x28>
   3a986:	2100      	movs	r1, #0
   3a988:	e9c0 1600 	strd	r1, r6, [r0]
   3a98c:	300c      	adds	r0, #12
   3a98e:	60a0      	str	r0, [r4, #8]
   3a990:	f105 0268 	add.w	r2, r5, #104	; 0x68
   3a994:	f7ff fdf0 	bl	3a578 <memset>
   3a998:	4620      	mov	r0, r4
   3a99a:	bd70      	pop	{r4, r5, r6, pc}

0003a99c <_fwalk_reent>:
   3a99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3a9a0:	4606      	mov	r6, r0
   3a9a2:	4688      	mov	r8, r1
   3a9a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
   3a9a8:	2700      	movs	r7, #0
   3a9aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   3a9ae:	f1b9 0901 	subs.w	r9, r9, #1
   3a9b2:	d505      	bpl.n	3a9c0 <_fwalk_reent+0x24>
   3a9b4:	6824      	ldr	r4, [r4, #0]
   3a9b6:	2c00      	cmp	r4, #0
   3a9b8:	d1f7      	bne.n	3a9aa <_fwalk_reent+0xe>
   3a9ba:	4638      	mov	r0, r7
   3a9bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3a9c0:	89ab      	ldrh	r3, [r5, #12]
   3a9c2:	2b01      	cmp	r3, #1
   3a9c4:	d907      	bls.n	3a9d6 <_fwalk_reent+0x3a>
   3a9c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   3a9ca:	3301      	adds	r3, #1
   3a9cc:	d003      	beq.n	3a9d6 <_fwalk_reent+0x3a>
   3a9ce:	4629      	mov	r1, r5
   3a9d0:	4630      	mov	r0, r6
   3a9d2:	47c0      	blx	r8
   3a9d4:	4307      	orrs	r7, r0
   3a9d6:	3568      	adds	r5, #104	; 0x68
   3a9d8:	e7e9      	b.n	3a9ae <_fwalk_reent+0x12>

0003a9da <__swhatbuf_r>:
   3a9da:	b570      	push	{r4, r5, r6, lr}
   3a9dc:	460e      	mov	r6, r1
   3a9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3a9e2:	2900      	cmp	r1, #0
   3a9e4:	b096      	sub	sp, #88	; 0x58
   3a9e6:	4614      	mov	r4, r2
   3a9e8:	461d      	mov	r5, r3
   3a9ea:	da07      	bge.n	3a9fc <__swhatbuf_r+0x22>
   3a9ec:	2300      	movs	r3, #0
   3a9ee:	602b      	str	r3, [r5, #0]
   3a9f0:	89b3      	ldrh	r3, [r6, #12]
   3a9f2:	061a      	lsls	r2, r3, #24
   3a9f4:	d410      	bmi.n	3aa18 <__swhatbuf_r+0x3e>
   3a9f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3a9fa:	e00e      	b.n	3aa1a <__swhatbuf_r+0x40>
   3a9fc:	466a      	mov	r2, sp
   3a9fe:	f7fc f951 	bl	36ca4 <_fstat_r>
   3aa02:	2800      	cmp	r0, #0
   3aa04:	dbf2      	blt.n	3a9ec <__swhatbuf_r+0x12>
   3aa06:	9a01      	ldr	r2, [sp, #4]
   3aa08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   3aa0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   3aa10:	425a      	negs	r2, r3
   3aa12:	415a      	adcs	r2, r3
   3aa14:	602a      	str	r2, [r5, #0]
   3aa16:	e7ee      	b.n	3a9f6 <__swhatbuf_r+0x1c>
   3aa18:	2340      	movs	r3, #64	; 0x40
   3aa1a:	2000      	movs	r0, #0
   3aa1c:	6023      	str	r3, [r4, #0]
   3aa1e:	b016      	add	sp, #88	; 0x58
   3aa20:	bd70      	pop	{r4, r5, r6, pc}

0003aa22 <_Balloc>:
   3aa22:	b570      	push	{r4, r5, r6, lr}
   3aa24:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3aa26:	4604      	mov	r4, r0
   3aa28:	460d      	mov	r5, r1
   3aa2a:	b93e      	cbnz	r6, 3aa3c <_Balloc+0x1a>
   3aa2c:	2010      	movs	r0, #16
   3aa2e:	f7fb f857 	bl	35ae0 <malloc>
   3aa32:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3aa36:	6260      	str	r0, [r4, #36]	; 0x24
   3aa38:	6006      	str	r6, [r0, #0]
   3aa3a:	60c6      	str	r6, [r0, #12]
   3aa3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   3aa3e:	68f3      	ldr	r3, [r6, #12]
   3aa40:	b183      	cbz	r3, 3aa64 <_Balloc+0x42>
   3aa42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3aa44:	68db      	ldr	r3, [r3, #12]
   3aa46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   3aa4a:	b9b8      	cbnz	r0, 3aa7c <_Balloc+0x5a>
   3aa4c:	2101      	movs	r1, #1
   3aa4e:	fa01 f605 	lsl.w	r6, r1, r5
   3aa52:	1d72      	adds	r2, r6, #5
   3aa54:	0092      	lsls	r2, r2, #2
   3aa56:	4620      	mov	r0, r4
   3aa58:	f000 fa9e 	bl	3af98 <_calloc_r>
   3aa5c:	b160      	cbz	r0, 3aa78 <_Balloc+0x56>
   3aa5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   3aa62:	e00e      	b.n	3aa82 <_Balloc+0x60>
   3aa64:	2221      	movs	r2, #33	; 0x21
   3aa66:	2104      	movs	r1, #4
   3aa68:	4620      	mov	r0, r4
   3aa6a:	f000 fa95 	bl	3af98 <_calloc_r>
   3aa6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3aa70:	60f0      	str	r0, [r6, #12]
   3aa72:	68db      	ldr	r3, [r3, #12]
   3aa74:	2b00      	cmp	r3, #0
   3aa76:	d1e4      	bne.n	3aa42 <_Balloc+0x20>
   3aa78:	2000      	movs	r0, #0
   3aa7a:	bd70      	pop	{r4, r5, r6, pc}
   3aa7c:	6802      	ldr	r2, [r0, #0]
   3aa7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   3aa82:	2300      	movs	r3, #0
   3aa84:	e9c0 3303 	strd	r3, r3, [r0, #12]
   3aa88:	e7f7      	b.n	3aa7a <_Balloc+0x58>

0003aa8a <_Bfree>:
   3aa8a:	b570      	push	{r4, r5, r6, lr}
   3aa8c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3aa8e:	4605      	mov	r5, r0
   3aa90:	460c      	mov	r4, r1
   3aa92:	b93e      	cbnz	r6, 3aaa4 <_Bfree+0x1a>
   3aa94:	2010      	movs	r0, #16
   3aa96:	f7fb f823 	bl	35ae0 <malloc>
   3aa9a:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3aa9e:	6268      	str	r0, [r5, #36]	; 0x24
   3aaa0:	6006      	str	r6, [r0, #0]
   3aaa2:	60c6      	str	r6, [r0, #12]
   3aaa4:	b13c      	cbz	r4, 3aab6 <_Bfree+0x2c>
   3aaa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3aaa8:	6862      	ldr	r2, [r4, #4]
   3aaaa:	68db      	ldr	r3, [r3, #12]
   3aaac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3aab0:	6021      	str	r1, [r4, #0]
   3aab2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   3aab6:	bd70      	pop	{r4, r5, r6, pc}

0003aab8 <__multadd>:
   3aab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3aabc:	690e      	ldr	r6, [r1, #16]
   3aabe:	4607      	mov	r7, r0
   3aac0:	4698      	mov	r8, r3
   3aac2:	460c      	mov	r4, r1
   3aac4:	f101 0014 	add.w	r0, r1, #20
   3aac8:	2300      	movs	r3, #0
   3aaca:	6805      	ldr	r5, [r0, #0]
   3aacc:	b2a9      	uxth	r1, r5
   3aace:	fb02 8101 	mla	r1, r2, r1, r8
   3aad2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   3aad6:	0c2d      	lsrs	r5, r5, #16
   3aad8:	fb02 c505 	mla	r5, r2, r5, ip
   3aadc:	b289      	uxth	r1, r1
   3aade:	3301      	adds	r3, #1
   3aae0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   3aae4:	429e      	cmp	r6, r3
   3aae6:	f840 1b04 	str.w	r1, [r0], #4
   3aaea:	ea4f 4815 	mov.w	r8, r5, lsr #16
   3aaee:	dcec      	bgt.n	3aaca <__multadd+0x12>
   3aaf0:	f1b8 0f00 	cmp.w	r8, #0
   3aaf4:	d01b      	beq.n	3ab2e <__multadd+0x76>
   3aaf6:	68a3      	ldr	r3, [r4, #8]
   3aaf8:	42b3      	cmp	r3, r6
   3aafa:	dc12      	bgt.n	3ab22 <__multadd+0x6a>
   3aafc:	6861      	ldr	r1, [r4, #4]
   3aafe:	4638      	mov	r0, r7
   3ab00:	3101      	adds	r1, #1
   3ab02:	f7ff ff8e 	bl	3aa22 <_Balloc>
   3ab06:	6922      	ldr	r2, [r4, #16]
   3ab08:	3202      	adds	r2, #2
   3ab0a:	f104 010c 	add.w	r1, r4, #12
   3ab0e:	4605      	mov	r5, r0
   3ab10:	0092      	lsls	r2, r2, #2
   3ab12:	300c      	adds	r0, #12
   3ab14:	f7ff fcf5 	bl	3a502 <memcpy>
   3ab18:	4621      	mov	r1, r4
   3ab1a:	4638      	mov	r0, r7
   3ab1c:	f7ff ffb5 	bl	3aa8a <_Bfree>
   3ab20:	462c      	mov	r4, r5
   3ab22:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   3ab26:	3601      	adds	r6, #1
   3ab28:	f8c3 8014 	str.w	r8, [r3, #20]
   3ab2c:	6126      	str	r6, [r4, #16]
   3ab2e:	4620      	mov	r0, r4
   3ab30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003ab34 <__hi0bits>:
   3ab34:	0c02      	lsrs	r2, r0, #16
   3ab36:	0412      	lsls	r2, r2, #16
   3ab38:	4603      	mov	r3, r0
   3ab3a:	b9ca      	cbnz	r2, 3ab70 <__hi0bits+0x3c>
   3ab3c:	0403      	lsls	r3, r0, #16
   3ab3e:	2010      	movs	r0, #16
   3ab40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   3ab44:	bf04      	itt	eq
   3ab46:	021b      	lsleq	r3, r3, #8
   3ab48:	3008      	addeq	r0, #8
   3ab4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   3ab4e:	bf04      	itt	eq
   3ab50:	011b      	lsleq	r3, r3, #4
   3ab52:	3004      	addeq	r0, #4
   3ab54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   3ab58:	bf04      	itt	eq
   3ab5a:	009b      	lsleq	r3, r3, #2
   3ab5c:	3002      	addeq	r0, #2
   3ab5e:	2b00      	cmp	r3, #0
   3ab60:	db05      	blt.n	3ab6e <__hi0bits+0x3a>
   3ab62:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   3ab66:	f100 0001 	add.w	r0, r0, #1
   3ab6a:	bf08      	it	eq
   3ab6c:	2020      	moveq	r0, #32
   3ab6e:	4770      	bx	lr
   3ab70:	2000      	movs	r0, #0
   3ab72:	e7e5      	b.n	3ab40 <__hi0bits+0xc>

0003ab74 <__lo0bits>:
   3ab74:	6803      	ldr	r3, [r0, #0]
   3ab76:	4602      	mov	r2, r0
   3ab78:	f013 0007 	ands.w	r0, r3, #7
   3ab7c:	d00b      	beq.n	3ab96 <__lo0bits+0x22>
   3ab7e:	07d9      	lsls	r1, r3, #31
   3ab80:	d422      	bmi.n	3abc8 <__lo0bits+0x54>
   3ab82:	0798      	lsls	r0, r3, #30
   3ab84:	bf49      	itett	mi
   3ab86:	085b      	lsrmi	r3, r3, #1
   3ab88:	089b      	lsrpl	r3, r3, #2
   3ab8a:	2001      	movmi	r0, #1
   3ab8c:	6013      	strmi	r3, [r2, #0]
   3ab8e:	bf5c      	itt	pl
   3ab90:	6013      	strpl	r3, [r2, #0]
   3ab92:	2002      	movpl	r0, #2
   3ab94:	4770      	bx	lr
   3ab96:	b299      	uxth	r1, r3
   3ab98:	b909      	cbnz	r1, 3ab9e <__lo0bits+0x2a>
   3ab9a:	0c1b      	lsrs	r3, r3, #16
   3ab9c:	2010      	movs	r0, #16
   3ab9e:	f013 0fff 	tst.w	r3, #255	; 0xff
   3aba2:	bf04      	itt	eq
   3aba4:	0a1b      	lsreq	r3, r3, #8
   3aba6:	3008      	addeq	r0, #8
   3aba8:	0719      	lsls	r1, r3, #28
   3abaa:	bf04      	itt	eq
   3abac:	091b      	lsreq	r3, r3, #4
   3abae:	3004      	addeq	r0, #4
   3abb0:	0799      	lsls	r1, r3, #30
   3abb2:	bf04      	itt	eq
   3abb4:	089b      	lsreq	r3, r3, #2
   3abb6:	3002      	addeq	r0, #2
   3abb8:	07d9      	lsls	r1, r3, #31
   3abba:	d403      	bmi.n	3abc4 <__lo0bits+0x50>
   3abbc:	085b      	lsrs	r3, r3, #1
   3abbe:	f100 0001 	add.w	r0, r0, #1
   3abc2:	d003      	beq.n	3abcc <__lo0bits+0x58>
   3abc4:	6013      	str	r3, [r2, #0]
   3abc6:	4770      	bx	lr
   3abc8:	2000      	movs	r0, #0
   3abca:	4770      	bx	lr
   3abcc:	2020      	movs	r0, #32
   3abce:	4770      	bx	lr

0003abd0 <__i2b>:
   3abd0:	b510      	push	{r4, lr}
   3abd2:	460c      	mov	r4, r1
   3abd4:	2101      	movs	r1, #1
   3abd6:	f7ff ff24 	bl	3aa22 <_Balloc>
   3abda:	2201      	movs	r2, #1
   3abdc:	6144      	str	r4, [r0, #20]
   3abde:	6102      	str	r2, [r0, #16]
   3abe0:	bd10      	pop	{r4, pc}

0003abe2 <__multiply>:
   3abe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3abe6:	4615      	mov	r5, r2
   3abe8:	690a      	ldr	r2, [r1, #16]
   3abea:	692b      	ldr	r3, [r5, #16]
   3abec:	429a      	cmp	r2, r3
   3abee:	bfb8      	it	lt
   3abf0:	460b      	movlt	r3, r1
   3abf2:	460c      	mov	r4, r1
   3abf4:	bfbc      	itt	lt
   3abf6:	462c      	movlt	r4, r5
   3abf8:	461d      	movlt	r5, r3
   3abfa:	6927      	ldr	r7, [r4, #16]
   3abfc:	f8d5 9010 	ldr.w	r9, [r5, #16]
   3ac00:	68a3      	ldr	r3, [r4, #8]
   3ac02:	6861      	ldr	r1, [r4, #4]
   3ac04:	eb07 0609 	add.w	r6, r7, r9
   3ac08:	42b3      	cmp	r3, r6
   3ac0a:	bfb8      	it	lt
   3ac0c:	3101      	addlt	r1, #1
   3ac0e:	b085      	sub	sp, #20
   3ac10:	f7ff ff07 	bl	3aa22 <_Balloc>
   3ac14:	f100 0114 	add.w	r1, r0, #20
   3ac18:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   3ac1c:	460b      	mov	r3, r1
   3ac1e:	2200      	movs	r2, #0
   3ac20:	4543      	cmp	r3, r8
   3ac22:	d31d      	bcc.n	3ac60 <__multiply+0x7e>
   3ac24:	f104 0314 	add.w	r3, r4, #20
   3ac28:	f105 0214 	add.w	r2, r5, #20
   3ac2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   3ac30:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   3ac34:	9302      	str	r3, [sp, #8]
   3ac36:	1b3b      	subs	r3, r7, r4
   3ac38:	3b15      	subs	r3, #21
   3ac3a:	f023 0303 	bic.w	r3, r3, #3
   3ac3e:	3304      	adds	r3, #4
   3ac40:	f104 0515 	add.w	r5, r4, #21
   3ac44:	42af      	cmp	r7, r5
   3ac46:	bf38      	it	cc
   3ac48:	2304      	movcc	r3, #4
   3ac4a:	9301      	str	r3, [sp, #4]
   3ac4c:	9b02      	ldr	r3, [sp, #8]
   3ac4e:	9203      	str	r2, [sp, #12]
   3ac50:	4293      	cmp	r3, r2
   3ac52:	d808      	bhi.n	3ac66 <__multiply+0x84>
   3ac54:	2e00      	cmp	r6, #0
   3ac56:	dc5a      	bgt.n	3ad0e <__multiply+0x12c>
   3ac58:	6106      	str	r6, [r0, #16]
   3ac5a:	b005      	add	sp, #20
   3ac5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ac60:	f843 2b04 	str.w	r2, [r3], #4
   3ac64:	e7dc      	b.n	3ac20 <__multiply+0x3e>
   3ac66:	f8b2 a000 	ldrh.w	sl, [r2]
   3ac6a:	f1ba 0f00 	cmp.w	sl, #0
   3ac6e:	d024      	beq.n	3acba <__multiply+0xd8>
   3ac70:	f104 0e14 	add.w	lr, r4, #20
   3ac74:	4689      	mov	r9, r1
   3ac76:	f04f 0c00 	mov.w	ip, #0
   3ac7a:	f85e 5b04 	ldr.w	r5, [lr], #4
   3ac7e:	f8d9 b000 	ldr.w	fp, [r9]
   3ac82:	b2ab      	uxth	r3, r5
   3ac84:	fa1f fb8b 	uxth.w	fp, fp
   3ac88:	fb0a b303 	mla	r3, sl, r3, fp
   3ac8c:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   3ac90:	f8d9 5000 	ldr.w	r5, [r9]
   3ac94:	4463      	add	r3, ip
   3ac96:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   3ac9a:	fb0a c50b 	mla	r5, sl, fp, ip
   3ac9e:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   3aca2:	b29b      	uxth	r3, r3
   3aca4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   3aca8:	4577      	cmp	r7, lr
   3acaa:	f849 3b04 	str.w	r3, [r9], #4
   3acae:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   3acb2:	d8e2      	bhi.n	3ac7a <__multiply+0x98>
   3acb4:	9b01      	ldr	r3, [sp, #4]
   3acb6:	f841 c003 	str.w	ip, [r1, r3]
   3acba:	9b03      	ldr	r3, [sp, #12]
   3acbc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   3acc0:	3204      	adds	r2, #4
   3acc2:	f1b9 0f00 	cmp.w	r9, #0
   3acc6:	d020      	beq.n	3ad0a <__multiply+0x128>
   3acc8:	680b      	ldr	r3, [r1, #0]
   3acca:	f104 0c14 	add.w	ip, r4, #20
   3acce:	468e      	mov	lr, r1
   3acd0:	f04f 0a00 	mov.w	sl, #0
   3acd4:	f8bc 5000 	ldrh.w	r5, [ip]
   3acd8:	f8be b002 	ldrh.w	fp, [lr, #2]
   3acdc:	fb09 b505 	mla	r5, r9, r5, fp
   3ace0:	44aa      	add	sl, r5
   3ace2:	b29b      	uxth	r3, r3
   3ace4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   3ace8:	f84e 3b04 	str.w	r3, [lr], #4
   3acec:	f85c 3b04 	ldr.w	r3, [ip], #4
   3acf0:	f8be 5000 	ldrh.w	r5, [lr]
   3acf4:	0c1b      	lsrs	r3, r3, #16
   3acf6:	fb09 5303 	mla	r3, r9, r3, r5
   3acfa:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   3acfe:	4567      	cmp	r7, ip
   3ad00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   3ad04:	d8e6      	bhi.n	3acd4 <__multiply+0xf2>
   3ad06:	9d01      	ldr	r5, [sp, #4]
   3ad08:	514b      	str	r3, [r1, r5]
   3ad0a:	3104      	adds	r1, #4
   3ad0c:	e79e      	b.n	3ac4c <__multiply+0x6a>
   3ad0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   3ad12:	2b00      	cmp	r3, #0
   3ad14:	d1a0      	bne.n	3ac58 <__multiply+0x76>
   3ad16:	3e01      	subs	r6, #1
   3ad18:	e79c      	b.n	3ac54 <__multiply+0x72>

0003ad1a <__lshift>:
   3ad1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ad1e:	460c      	mov	r4, r1
   3ad20:	6849      	ldr	r1, [r1, #4]
   3ad22:	6923      	ldr	r3, [r4, #16]
   3ad24:	eb03 1862 	add.w	r8, r3, r2, asr #5
   3ad28:	68a3      	ldr	r3, [r4, #8]
   3ad2a:	4607      	mov	r7, r0
   3ad2c:	4691      	mov	r9, r2
   3ad2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   3ad32:	f108 0601 	add.w	r6, r8, #1
   3ad36:	42b3      	cmp	r3, r6
   3ad38:	db3f      	blt.n	3adba <__lshift+0xa0>
   3ad3a:	4638      	mov	r0, r7
   3ad3c:	f7ff fe71 	bl	3aa22 <_Balloc>
   3ad40:	2300      	movs	r3, #0
   3ad42:	4605      	mov	r5, r0
   3ad44:	f100 0114 	add.w	r1, r0, #20
   3ad48:	f100 0210 	add.w	r2, r0, #16
   3ad4c:	4618      	mov	r0, r3
   3ad4e:	4553      	cmp	r3, sl
   3ad50:	db36      	blt.n	3adc0 <__lshift+0xa6>
   3ad52:	6920      	ldr	r0, [r4, #16]
   3ad54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   3ad58:	f104 0314 	add.w	r3, r4, #20
   3ad5c:	f019 091f 	ands.w	r9, r9, #31
   3ad60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   3ad64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   3ad68:	d02e      	beq.n	3adc8 <__lshift+0xae>
   3ad6a:	f1c9 0e20 	rsb	lr, r9, #32
   3ad6e:	468a      	mov	sl, r1
   3ad70:	2200      	movs	r2, #0
   3ad72:	6818      	ldr	r0, [r3, #0]
   3ad74:	fa00 f009 	lsl.w	r0, r0, r9
   3ad78:	4302      	orrs	r2, r0
   3ad7a:	f84a 2b04 	str.w	r2, [sl], #4
   3ad7e:	f853 2b04 	ldr.w	r2, [r3], #4
   3ad82:	459c      	cmp	ip, r3
   3ad84:	fa22 f20e 	lsr.w	r2, r2, lr
   3ad88:	d8f3      	bhi.n	3ad72 <__lshift+0x58>
   3ad8a:	ebac 0304 	sub.w	r3, ip, r4
   3ad8e:	3b15      	subs	r3, #21
   3ad90:	f023 0303 	bic.w	r3, r3, #3
   3ad94:	3304      	adds	r3, #4
   3ad96:	f104 0015 	add.w	r0, r4, #21
   3ad9a:	4560      	cmp	r0, ip
   3ad9c:	bf88      	it	hi
   3ad9e:	2304      	movhi	r3, #4
   3ada0:	50ca      	str	r2, [r1, r3]
   3ada2:	b10a      	cbz	r2, 3ada8 <__lshift+0x8e>
   3ada4:	f108 0602 	add.w	r6, r8, #2
   3ada8:	3e01      	subs	r6, #1
   3adaa:	4638      	mov	r0, r7
   3adac:	612e      	str	r6, [r5, #16]
   3adae:	4621      	mov	r1, r4
   3adb0:	f7ff fe6b 	bl	3aa8a <_Bfree>
   3adb4:	4628      	mov	r0, r5
   3adb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3adba:	3101      	adds	r1, #1
   3adbc:	005b      	lsls	r3, r3, #1
   3adbe:	e7ba      	b.n	3ad36 <__lshift+0x1c>
   3adc0:	f842 0f04 	str.w	r0, [r2, #4]!
   3adc4:	3301      	adds	r3, #1
   3adc6:	e7c2      	b.n	3ad4e <__lshift+0x34>
   3adc8:	3904      	subs	r1, #4
   3adca:	f853 2b04 	ldr.w	r2, [r3], #4
   3adce:	f841 2f04 	str.w	r2, [r1, #4]!
   3add2:	459c      	cmp	ip, r3
   3add4:	d8f9      	bhi.n	3adca <__lshift+0xb0>
   3add6:	e7e7      	b.n	3ada8 <__lshift+0x8e>

0003add8 <__mcmp>:
   3add8:	690a      	ldr	r2, [r1, #16]
   3adda:	4603      	mov	r3, r0
   3addc:	6900      	ldr	r0, [r0, #16]
   3adde:	1a80      	subs	r0, r0, r2
   3ade0:	b530      	push	{r4, r5, lr}
   3ade2:	d10d      	bne.n	3ae00 <__mcmp+0x28>
   3ade4:	3314      	adds	r3, #20
   3ade6:	3114      	adds	r1, #20
   3ade8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   3adec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   3adf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   3adf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   3adf8:	4295      	cmp	r5, r2
   3adfa:	d002      	beq.n	3ae02 <__mcmp+0x2a>
   3adfc:	d304      	bcc.n	3ae08 <__mcmp+0x30>
   3adfe:	2001      	movs	r0, #1
   3ae00:	bd30      	pop	{r4, r5, pc}
   3ae02:	42a3      	cmp	r3, r4
   3ae04:	d3f4      	bcc.n	3adf0 <__mcmp+0x18>
   3ae06:	e7fb      	b.n	3ae00 <__mcmp+0x28>
   3ae08:	f04f 30ff 	mov.w	r0, #4294967295
   3ae0c:	e7f8      	b.n	3ae00 <__mcmp+0x28>

0003ae0e <__mdiff>:
   3ae0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ae12:	460c      	mov	r4, r1
   3ae14:	4606      	mov	r6, r0
   3ae16:	4611      	mov	r1, r2
   3ae18:	4620      	mov	r0, r4
   3ae1a:	4617      	mov	r7, r2
   3ae1c:	f7ff ffdc 	bl	3add8 <__mcmp>
   3ae20:	1e05      	subs	r5, r0, #0
   3ae22:	d108      	bne.n	3ae36 <__mdiff+0x28>
   3ae24:	4629      	mov	r1, r5
   3ae26:	4630      	mov	r0, r6
   3ae28:	f7ff fdfb 	bl	3aa22 <_Balloc>
   3ae2c:	2301      	movs	r3, #1
   3ae2e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   3ae32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ae36:	bfa4      	itt	ge
   3ae38:	463b      	movge	r3, r7
   3ae3a:	4627      	movge	r7, r4
   3ae3c:	4630      	mov	r0, r6
   3ae3e:	6879      	ldr	r1, [r7, #4]
   3ae40:	bfa6      	itte	ge
   3ae42:	461c      	movge	r4, r3
   3ae44:	2500      	movge	r5, #0
   3ae46:	2501      	movlt	r5, #1
   3ae48:	f7ff fdeb 	bl	3aa22 <_Balloc>
   3ae4c:	693e      	ldr	r6, [r7, #16]
   3ae4e:	60c5      	str	r5, [r0, #12]
   3ae50:	6925      	ldr	r5, [r4, #16]
   3ae52:	f107 0114 	add.w	r1, r7, #20
   3ae56:	f104 0914 	add.w	r9, r4, #20
   3ae5a:	f100 0e14 	add.w	lr, r0, #20
   3ae5e:	f107 0210 	add.w	r2, r7, #16
   3ae62:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   3ae66:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   3ae6a:	46f2      	mov	sl, lr
   3ae6c:	2700      	movs	r7, #0
   3ae6e:	f859 3b04 	ldr.w	r3, [r9], #4
   3ae72:	f852 bf04 	ldr.w	fp, [r2, #4]!
   3ae76:	fa1f f883 	uxth.w	r8, r3
   3ae7a:	fa17 f78b 	uxtah	r7, r7, fp
   3ae7e:	0c1b      	lsrs	r3, r3, #16
   3ae80:	eba7 0808 	sub.w	r8, r7, r8
   3ae84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   3ae88:	eb03 4328 	add.w	r3, r3, r8, asr #16
   3ae8c:	fa1f f888 	uxth.w	r8, r8
   3ae90:	141f      	asrs	r7, r3, #16
   3ae92:	454d      	cmp	r5, r9
   3ae94:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   3ae98:	f84a 3b04 	str.w	r3, [sl], #4
   3ae9c:	d8e7      	bhi.n	3ae6e <__mdiff+0x60>
   3ae9e:	1b2b      	subs	r3, r5, r4
   3aea0:	3b15      	subs	r3, #21
   3aea2:	f023 0303 	bic.w	r3, r3, #3
   3aea6:	3304      	adds	r3, #4
   3aea8:	3415      	adds	r4, #21
   3aeaa:	42a5      	cmp	r5, r4
   3aeac:	bf38      	it	cc
   3aeae:	2304      	movcc	r3, #4
   3aeb0:	4419      	add	r1, r3
   3aeb2:	4473      	add	r3, lr
   3aeb4:	469e      	mov	lr, r3
   3aeb6:	460d      	mov	r5, r1
   3aeb8:	4565      	cmp	r5, ip
   3aeba:	d30e      	bcc.n	3aeda <__mdiff+0xcc>
   3aebc:	f10c 0203 	add.w	r2, ip, #3
   3aec0:	1a52      	subs	r2, r2, r1
   3aec2:	f022 0203 	bic.w	r2, r2, #3
   3aec6:	3903      	subs	r1, #3
   3aec8:	458c      	cmp	ip, r1
   3aeca:	bf38      	it	cc
   3aecc:	2200      	movcc	r2, #0
   3aece:	441a      	add	r2, r3
   3aed0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   3aed4:	b17b      	cbz	r3, 3aef6 <__mdiff+0xe8>
   3aed6:	6106      	str	r6, [r0, #16]
   3aed8:	e7ab      	b.n	3ae32 <__mdiff+0x24>
   3aeda:	f855 8b04 	ldr.w	r8, [r5], #4
   3aede:	fa17 f488 	uxtah	r4, r7, r8
   3aee2:	1422      	asrs	r2, r4, #16
   3aee4:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   3aee8:	b2a4      	uxth	r4, r4
   3aeea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   3aeee:	f84e 4b04 	str.w	r4, [lr], #4
   3aef2:	1417      	asrs	r7, r2, #16
   3aef4:	e7e0      	b.n	3aeb8 <__mdiff+0xaa>
   3aef6:	3e01      	subs	r6, #1
   3aef8:	e7ea      	b.n	3aed0 <__mdiff+0xc2>

0003aefa <__d2b>:
   3aefa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3aefe:	2101      	movs	r1, #1
   3af00:	461c      	mov	r4, r3
   3af02:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   3af06:	4690      	mov	r8, r2
   3af08:	f7ff fd8b 	bl	3aa22 <_Balloc>
   3af0c:	f3c4 0313 	ubfx	r3, r4, #0, #20
   3af10:	f3c4 540a 	ubfx	r4, r4, #20, #11
   3af14:	4607      	mov	r7, r0
   3af16:	bb2c      	cbnz	r4, 3af64 <__d2b+0x6a>
   3af18:	9301      	str	r3, [sp, #4]
   3af1a:	f1b8 0300 	subs.w	r3, r8, #0
   3af1e:	d026      	beq.n	3af6e <__d2b+0x74>
   3af20:	4668      	mov	r0, sp
   3af22:	9300      	str	r3, [sp, #0]
   3af24:	f7ff fe26 	bl	3ab74 <__lo0bits>
   3af28:	9900      	ldr	r1, [sp, #0]
   3af2a:	b1f0      	cbz	r0, 3af6a <__d2b+0x70>
   3af2c:	9a01      	ldr	r2, [sp, #4]
   3af2e:	f1c0 0320 	rsb	r3, r0, #32
   3af32:	fa02 f303 	lsl.w	r3, r2, r3
   3af36:	430b      	orrs	r3, r1
   3af38:	40c2      	lsrs	r2, r0
   3af3a:	617b      	str	r3, [r7, #20]
   3af3c:	9201      	str	r2, [sp, #4]
   3af3e:	9b01      	ldr	r3, [sp, #4]
   3af40:	61bb      	str	r3, [r7, #24]
   3af42:	2b00      	cmp	r3, #0
   3af44:	bf14      	ite	ne
   3af46:	2102      	movne	r1, #2
   3af48:	2101      	moveq	r1, #1
   3af4a:	6139      	str	r1, [r7, #16]
   3af4c:	b1c4      	cbz	r4, 3af80 <__d2b+0x86>
   3af4e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   3af52:	4404      	add	r4, r0
   3af54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   3af58:	6034      	str	r4, [r6, #0]
   3af5a:	6028      	str	r0, [r5, #0]
   3af5c:	4638      	mov	r0, r7
   3af5e:	b002      	add	sp, #8
   3af60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3af64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3af68:	e7d6      	b.n	3af18 <__d2b+0x1e>
   3af6a:	6179      	str	r1, [r7, #20]
   3af6c:	e7e7      	b.n	3af3e <__d2b+0x44>
   3af6e:	a801      	add	r0, sp, #4
   3af70:	f7ff fe00 	bl	3ab74 <__lo0bits>
   3af74:	9b01      	ldr	r3, [sp, #4]
   3af76:	617b      	str	r3, [r7, #20]
   3af78:	2101      	movs	r1, #1
   3af7a:	6139      	str	r1, [r7, #16]
   3af7c:	3020      	adds	r0, #32
   3af7e:	e7e5      	b.n	3af4c <__d2b+0x52>
   3af80:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   3af84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   3af88:	6030      	str	r0, [r6, #0]
   3af8a:	6918      	ldr	r0, [r3, #16]
   3af8c:	f7ff fdd2 	bl	3ab34 <__hi0bits>
   3af90:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   3af94:	6029      	str	r1, [r5, #0]
   3af96:	e7e1      	b.n	3af5c <__d2b+0x62>

0003af98 <_calloc_r>:
   3af98:	b538      	push	{r3, r4, r5, lr}
   3af9a:	fb02 f501 	mul.w	r5, r2, r1
   3af9e:	4629      	mov	r1, r5
   3afa0:	f7fa fdf4 	bl	35b8c <_malloc_r>
   3afa4:	4604      	mov	r4, r0
   3afa6:	b118      	cbz	r0, 3afb0 <_calloc_r+0x18>
   3afa8:	462a      	mov	r2, r5
   3afaa:	2100      	movs	r1, #0
   3afac:	f7ff fae4 	bl	3a578 <memset>
   3afb0:	4620      	mov	r0, r4
   3afb2:	bd38      	pop	{r3, r4, r5, pc}

0003afb4 <_raise_r>:
   3afb4:	291f      	cmp	r1, #31
   3afb6:	b538      	push	{r3, r4, r5, lr}
   3afb8:	4604      	mov	r4, r0
   3afba:	460d      	mov	r5, r1
   3afbc:	d904      	bls.n	3afc8 <_raise_r+0x14>
   3afbe:	2316      	movs	r3, #22
   3afc0:	6003      	str	r3, [r0, #0]
   3afc2:	f04f 30ff 	mov.w	r0, #4294967295
   3afc6:	bd38      	pop	{r3, r4, r5, pc}
   3afc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3afca:	b112      	cbz	r2, 3afd2 <_raise_r+0x1e>
   3afcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   3afd0:	b94b      	cbnz	r3, 3afe6 <_raise_r+0x32>
   3afd2:	4620      	mov	r0, r4
   3afd4:	f000 f816 	bl	3b004 <_getpid_r>
   3afd8:	462a      	mov	r2, r5
   3afda:	4601      	mov	r1, r0
   3afdc:	4620      	mov	r0, r4
   3afde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3afe2:	f7fb be2b 	b.w	36c3c <_kill_r>
   3afe6:	2b01      	cmp	r3, #1
   3afe8:	d00a      	beq.n	3b000 <_raise_r+0x4c>
   3afea:	1c59      	adds	r1, r3, #1
   3afec:	d103      	bne.n	3aff6 <_raise_r+0x42>
   3afee:	2316      	movs	r3, #22
   3aff0:	6003      	str	r3, [r0, #0]
   3aff2:	2001      	movs	r0, #1
   3aff4:	e7e7      	b.n	3afc6 <_raise_r+0x12>
   3aff6:	2400      	movs	r4, #0
   3aff8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   3affc:	4628      	mov	r0, r5
   3affe:	4798      	blx	r3
   3b000:	2000      	movs	r0, #0
   3b002:	e7e0      	b.n	3afc6 <_raise_r+0x12>

0003b004 <_getpid_r>:
   3b004:	f7fd b830 	b.w	38068 <_getpid>

0003b008 <__sread>:
   3b008:	b510      	push	{r4, lr}
   3b00a:	460c      	mov	r4, r1
   3b00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3b010:	f7fb fe7c 	bl	36d0c <_read_r>
   3b014:	2800      	cmp	r0, #0
   3b016:	bfab      	itete	ge
   3b018:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   3b01a:	89a3      	ldrhlt	r3, [r4, #12]
   3b01c:	181b      	addge	r3, r3, r0
   3b01e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   3b022:	bfac      	ite	ge
   3b024:	6563      	strge	r3, [r4, #84]	; 0x54
   3b026:	81a3      	strhlt	r3, [r4, #12]
   3b028:	bd10      	pop	{r4, pc}

0003b02a <__swrite>:
   3b02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b02e:	461f      	mov	r7, r3
   3b030:	898b      	ldrh	r3, [r1, #12]
   3b032:	05db      	lsls	r3, r3, #23
   3b034:	4605      	mov	r5, r0
   3b036:	460c      	mov	r4, r1
   3b038:	4616      	mov	r6, r2
   3b03a:	d505      	bpl.n	3b048 <__swrite+0x1e>
   3b03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3b040:	2302      	movs	r3, #2
   3b042:	2200      	movs	r2, #0
   3b044:	f7fb fe50 	bl	36ce8 <_lseek_r>
   3b048:	89a3      	ldrh	r3, [r4, #12]
   3b04a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3b04e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   3b052:	81a3      	strh	r3, [r4, #12]
   3b054:	4632      	mov	r2, r6
   3b056:	463b      	mov	r3, r7
   3b058:	4628      	mov	r0, r5
   3b05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3b05e:	f7fb bdff 	b.w	36c60 <_write_r>

0003b062 <__sseek>:
   3b062:	b510      	push	{r4, lr}
   3b064:	460c      	mov	r4, r1
   3b066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3b06a:	f7fb fe3d 	bl	36ce8 <_lseek_r>
   3b06e:	1c43      	adds	r3, r0, #1
   3b070:	89a3      	ldrh	r3, [r4, #12]
   3b072:	bf15      	itete	ne
   3b074:	6560      	strne	r0, [r4, #84]	; 0x54
   3b076:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   3b07a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   3b07e:	81a3      	strheq	r3, [r4, #12]
   3b080:	bf18      	it	ne
   3b082:	81a3      	strhne	r3, [r4, #12]
   3b084:	bd10      	pop	{r4, pc}

0003b086 <__sclose>:
   3b086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3b08a:	f7fb bdfb 	b.w	36c84 <_close_r>

0003b08e <__ascii_mbtowc>:
   3b08e:	b082      	sub	sp, #8
   3b090:	b901      	cbnz	r1, 3b094 <__ascii_mbtowc+0x6>
   3b092:	a901      	add	r1, sp, #4
   3b094:	b142      	cbz	r2, 3b0a8 <__ascii_mbtowc+0x1a>
   3b096:	b14b      	cbz	r3, 3b0ac <__ascii_mbtowc+0x1e>
   3b098:	7813      	ldrb	r3, [r2, #0]
   3b09a:	600b      	str	r3, [r1, #0]
   3b09c:	7812      	ldrb	r2, [r2, #0]
   3b09e:	1e10      	subs	r0, r2, #0
   3b0a0:	bf18      	it	ne
   3b0a2:	2001      	movne	r0, #1
   3b0a4:	b002      	add	sp, #8
   3b0a6:	4770      	bx	lr
   3b0a8:	4610      	mov	r0, r2
   3b0aa:	e7fb      	b.n	3b0a4 <__ascii_mbtowc+0x16>
   3b0ac:	f06f 0001 	mvn.w	r0, #1
   3b0b0:	e7f8      	b.n	3b0a4 <__ascii_mbtowc+0x16>

0003b0b2 <__ascii_wctomb>:
   3b0b2:	4603      	mov	r3, r0
   3b0b4:	4608      	mov	r0, r1
   3b0b6:	b141      	cbz	r1, 3b0ca <__ascii_wctomb+0x18>
   3b0b8:	2aff      	cmp	r2, #255	; 0xff
   3b0ba:	d904      	bls.n	3b0c6 <__ascii_wctomb+0x14>
   3b0bc:	228a      	movs	r2, #138	; 0x8a
   3b0be:	601a      	str	r2, [r3, #0]
   3b0c0:	f04f 30ff 	mov.w	r0, #4294967295
   3b0c4:	4770      	bx	lr
   3b0c6:	700a      	strb	r2, [r1, #0]
   3b0c8:	2001      	movs	r0, #1
   3b0ca:	4770      	bx	lr

0003b0cc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   3b0cc:	f7f2 be6e 	b.w	2ddac <SystemInit>
