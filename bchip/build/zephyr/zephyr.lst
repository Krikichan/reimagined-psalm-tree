
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c200 <_vector_start>:
    c200:	20004ba0 	.word	0x20004ba0
    c204:	000118fd 	.word	0x000118fd
    c208:	0001ae7d 	.word	0x0001ae7d
    c20c:	000118d1 	.word	0x000118d1
    c210:	000118d1 	.word	0x000118d1
    c214:	000118d1 	.word	0x000118d1
    c218:	000118d1 	.word	0x000118d1
	...
    c22c:	00011285 	.word	0x00011285
    c230:	000118d1 	.word	0x000118d1
    c234:	00000000 	.word	0x00000000
    c238:	00011231 	.word	0x00011231
    c23c:	000118d1 	.word	0x000118d1

0000c240 <_irq_vector_table>:
    c240:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...
    c250:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...
    c260:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...
    c270:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...
    c280:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...
    c290:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...
    c2a0:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...
    c2b0:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...
    c2c0:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...
    c2d0:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...
    c2e0:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...
    c2f0:	0001133d 0001133d 0001133d 0001133d     =...=...=...=...

Disassembly of section text:

0000c300 <memchr>:
    c300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c304:	2a10      	cmp	r2, #16
    c306:	db2b      	blt.n	c360 <memchr+0x60>
    c308:	f010 0f07 	tst.w	r0, #7
    c30c:	d008      	beq.n	c320 <memchr+0x20>
    c30e:	f810 3b01 	ldrb.w	r3, [r0], #1
    c312:	3a01      	subs	r2, #1
    c314:	428b      	cmp	r3, r1
    c316:	d02d      	beq.n	c374 <memchr+0x74>
    c318:	f010 0f07 	tst.w	r0, #7
    c31c:	b342      	cbz	r2, c370 <memchr+0x70>
    c31e:	d1f6      	bne.n	c30e <memchr+0xe>
    c320:	b4f0      	push	{r4, r5, r6, r7}
    c322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    c32a:	f022 0407 	bic.w	r4, r2, #7
    c32e:	f07f 0700 	mvns.w	r7, #0
    c332:	2300      	movs	r3, #0
    c334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    c338:	3c08      	subs	r4, #8
    c33a:	ea85 0501 	eor.w	r5, r5, r1
    c33e:	ea86 0601 	eor.w	r6, r6, r1
    c342:	fa85 f547 	uadd8	r5, r5, r7
    c346:	faa3 f587 	sel	r5, r3, r7
    c34a:	fa86 f647 	uadd8	r6, r6, r7
    c34e:	faa5 f687 	sel	r6, r5, r7
    c352:	b98e      	cbnz	r6, c378 <memchr+0x78>
    c354:	d1ee      	bne.n	c334 <memchr+0x34>
    c356:	bcf0      	pop	{r4, r5, r6, r7}
    c358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c35c:	f002 0207 	and.w	r2, r2, #7
    c360:	b132      	cbz	r2, c370 <memchr+0x70>
    c362:	f810 3b01 	ldrb.w	r3, [r0], #1
    c366:	3a01      	subs	r2, #1
    c368:	ea83 0301 	eor.w	r3, r3, r1
    c36c:	b113      	cbz	r3, c374 <memchr+0x74>
    c36e:	d1f8      	bne.n	c362 <memchr+0x62>
    c370:	2000      	movs	r0, #0
    c372:	4770      	bx	lr
    c374:	3801      	subs	r0, #1
    c376:	4770      	bx	lr
    c378:	2d00      	cmp	r5, #0
    c37a:	bf06      	itte	eq
    c37c:	4635      	moveq	r5, r6
    c37e:	3803      	subeq	r0, #3
    c380:	3807      	subne	r0, #7
    c382:	f015 0f01 	tst.w	r5, #1
    c386:	d107      	bne.n	c398 <memchr+0x98>
    c388:	3001      	adds	r0, #1
    c38a:	f415 7f80 	tst.w	r5, #256	; 0x100
    c38e:	bf02      	ittt	eq
    c390:	3001      	addeq	r0, #1
    c392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    c396:	3001      	addeq	r0, #1
    c398:	bcf0      	pop	{r4, r5, r6, r7}
    c39a:	3801      	subs	r0, #1
    c39c:	4770      	bx	lr
    c39e:	bf00      	nop

0000c3a0 <__aeabi_drsub>:
    c3a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c3a4:	e002      	b.n	c3ac <__adddf3>
    c3a6:	bf00      	nop

0000c3a8 <__aeabi_dsub>:
    c3a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c3ac <__adddf3>:
    c3ac:	b530      	push	{r4, r5, lr}
    c3ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c3b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c3b6:	ea94 0f05 	teq	r4, r5
    c3ba:	bf08      	it	eq
    c3bc:	ea90 0f02 	teqeq	r0, r2
    c3c0:	bf1f      	itttt	ne
    c3c2:	ea54 0c00 	orrsne.w	ip, r4, r0
    c3c6:	ea55 0c02 	orrsne.w	ip, r5, r2
    c3ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c3ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c3d2:	f000 80e2 	beq.w	c59a <__adddf3+0x1ee>
    c3d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c3da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c3de:	bfb8      	it	lt
    c3e0:	426d      	neglt	r5, r5
    c3e2:	dd0c      	ble.n	c3fe <__adddf3+0x52>
    c3e4:	442c      	add	r4, r5
    c3e6:	ea80 0202 	eor.w	r2, r0, r2
    c3ea:	ea81 0303 	eor.w	r3, r1, r3
    c3ee:	ea82 0000 	eor.w	r0, r2, r0
    c3f2:	ea83 0101 	eor.w	r1, r3, r1
    c3f6:	ea80 0202 	eor.w	r2, r0, r2
    c3fa:	ea81 0303 	eor.w	r3, r1, r3
    c3fe:	2d36      	cmp	r5, #54	; 0x36
    c400:	bf88      	it	hi
    c402:	bd30      	pophi	{r4, r5, pc}
    c404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c408:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c40c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c414:	d002      	beq.n	c41c <__adddf3+0x70>
    c416:	4240      	negs	r0, r0
    c418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c41c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c420:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c428:	d002      	beq.n	c430 <__adddf3+0x84>
    c42a:	4252      	negs	r2, r2
    c42c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c430:	ea94 0f05 	teq	r4, r5
    c434:	f000 80a7 	beq.w	c586 <__adddf3+0x1da>
    c438:	f1a4 0401 	sub.w	r4, r4, #1
    c43c:	f1d5 0e20 	rsbs	lr, r5, #32
    c440:	db0d      	blt.n	c45e <__adddf3+0xb2>
    c442:	fa02 fc0e 	lsl.w	ip, r2, lr
    c446:	fa22 f205 	lsr.w	r2, r2, r5
    c44a:	1880      	adds	r0, r0, r2
    c44c:	f141 0100 	adc.w	r1, r1, #0
    c450:	fa03 f20e 	lsl.w	r2, r3, lr
    c454:	1880      	adds	r0, r0, r2
    c456:	fa43 f305 	asr.w	r3, r3, r5
    c45a:	4159      	adcs	r1, r3
    c45c:	e00e      	b.n	c47c <__adddf3+0xd0>
    c45e:	f1a5 0520 	sub.w	r5, r5, #32
    c462:	f10e 0e20 	add.w	lr, lr, #32
    c466:	2a01      	cmp	r2, #1
    c468:	fa03 fc0e 	lsl.w	ip, r3, lr
    c46c:	bf28      	it	cs
    c46e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c472:	fa43 f305 	asr.w	r3, r3, r5
    c476:	18c0      	adds	r0, r0, r3
    c478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c47c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c480:	d507      	bpl.n	c492 <__adddf3+0xe6>
    c482:	f04f 0e00 	mov.w	lr, #0
    c486:	f1dc 0c00 	rsbs	ip, ip, #0
    c48a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c48e:	eb6e 0101 	sbc.w	r1, lr, r1
    c492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c496:	d31b      	bcc.n	c4d0 <__adddf3+0x124>
    c498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c49c:	d30c      	bcc.n	c4b8 <__adddf3+0x10c>
    c49e:	0849      	lsrs	r1, r1, #1
    c4a0:	ea5f 0030 	movs.w	r0, r0, rrx
    c4a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c4a8:	f104 0401 	add.w	r4, r4, #1
    c4ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c4b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c4b4:	f080 809a 	bcs.w	c5ec <__adddf3+0x240>
    c4b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c4bc:	bf08      	it	eq
    c4be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c4c2:	f150 0000 	adcs.w	r0, r0, #0
    c4c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c4ca:	ea41 0105 	orr.w	r1, r1, r5
    c4ce:	bd30      	pop	{r4, r5, pc}
    c4d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c4d4:	4140      	adcs	r0, r0
    c4d6:	eb41 0101 	adc.w	r1, r1, r1
    c4da:	3c01      	subs	r4, #1
    c4dc:	bf28      	it	cs
    c4de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c4e2:	d2e9      	bcs.n	c4b8 <__adddf3+0x10c>
    c4e4:	f091 0f00 	teq	r1, #0
    c4e8:	bf04      	itt	eq
    c4ea:	4601      	moveq	r1, r0
    c4ec:	2000      	moveq	r0, #0
    c4ee:	fab1 f381 	clz	r3, r1
    c4f2:	bf08      	it	eq
    c4f4:	3320      	addeq	r3, #32
    c4f6:	f1a3 030b 	sub.w	r3, r3, #11
    c4fa:	f1b3 0220 	subs.w	r2, r3, #32
    c4fe:	da0c      	bge.n	c51a <__adddf3+0x16e>
    c500:	320c      	adds	r2, #12
    c502:	dd08      	ble.n	c516 <__adddf3+0x16a>
    c504:	f102 0c14 	add.w	ip, r2, #20
    c508:	f1c2 020c 	rsb	r2, r2, #12
    c50c:	fa01 f00c 	lsl.w	r0, r1, ip
    c510:	fa21 f102 	lsr.w	r1, r1, r2
    c514:	e00c      	b.n	c530 <__adddf3+0x184>
    c516:	f102 0214 	add.w	r2, r2, #20
    c51a:	bfd8      	it	le
    c51c:	f1c2 0c20 	rsble	ip, r2, #32
    c520:	fa01 f102 	lsl.w	r1, r1, r2
    c524:	fa20 fc0c 	lsr.w	ip, r0, ip
    c528:	bfdc      	itt	le
    c52a:	ea41 010c 	orrle.w	r1, r1, ip
    c52e:	4090      	lslle	r0, r2
    c530:	1ae4      	subs	r4, r4, r3
    c532:	bfa2      	ittt	ge
    c534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c538:	4329      	orrge	r1, r5
    c53a:	bd30      	popge	{r4, r5, pc}
    c53c:	ea6f 0404 	mvn.w	r4, r4
    c540:	3c1f      	subs	r4, #31
    c542:	da1c      	bge.n	c57e <__adddf3+0x1d2>
    c544:	340c      	adds	r4, #12
    c546:	dc0e      	bgt.n	c566 <__adddf3+0x1ba>
    c548:	f104 0414 	add.w	r4, r4, #20
    c54c:	f1c4 0220 	rsb	r2, r4, #32
    c550:	fa20 f004 	lsr.w	r0, r0, r4
    c554:	fa01 f302 	lsl.w	r3, r1, r2
    c558:	ea40 0003 	orr.w	r0, r0, r3
    c55c:	fa21 f304 	lsr.w	r3, r1, r4
    c560:	ea45 0103 	orr.w	r1, r5, r3
    c564:	bd30      	pop	{r4, r5, pc}
    c566:	f1c4 040c 	rsb	r4, r4, #12
    c56a:	f1c4 0220 	rsb	r2, r4, #32
    c56e:	fa20 f002 	lsr.w	r0, r0, r2
    c572:	fa01 f304 	lsl.w	r3, r1, r4
    c576:	ea40 0003 	orr.w	r0, r0, r3
    c57a:	4629      	mov	r1, r5
    c57c:	bd30      	pop	{r4, r5, pc}
    c57e:	fa21 f004 	lsr.w	r0, r1, r4
    c582:	4629      	mov	r1, r5
    c584:	bd30      	pop	{r4, r5, pc}
    c586:	f094 0f00 	teq	r4, #0
    c58a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c58e:	bf06      	itte	eq
    c590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c594:	3401      	addeq	r4, #1
    c596:	3d01      	subne	r5, #1
    c598:	e74e      	b.n	c438 <__adddf3+0x8c>
    c59a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c59e:	bf18      	it	ne
    c5a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c5a4:	d029      	beq.n	c5fa <__adddf3+0x24e>
    c5a6:	ea94 0f05 	teq	r4, r5
    c5aa:	bf08      	it	eq
    c5ac:	ea90 0f02 	teqeq	r0, r2
    c5b0:	d005      	beq.n	c5be <__adddf3+0x212>
    c5b2:	ea54 0c00 	orrs.w	ip, r4, r0
    c5b6:	bf04      	itt	eq
    c5b8:	4619      	moveq	r1, r3
    c5ba:	4610      	moveq	r0, r2
    c5bc:	bd30      	pop	{r4, r5, pc}
    c5be:	ea91 0f03 	teq	r1, r3
    c5c2:	bf1e      	ittt	ne
    c5c4:	2100      	movne	r1, #0
    c5c6:	2000      	movne	r0, #0
    c5c8:	bd30      	popne	{r4, r5, pc}
    c5ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c5ce:	d105      	bne.n	c5dc <__adddf3+0x230>
    c5d0:	0040      	lsls	r0, r0, #1
    c5d2:	4149      	adcs	r1, r1
    c5d4:	bf28      	it	cs
    c5d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c5da:	bd30      	pop	{r4, r5, pc}
    c5dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c5e0:	bf3c      	itt	cc
    c5e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c5e6:	bd30      	popcc	{r4, r5, pc}
    c5e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c5ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c5f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c5f4:	f04f 0000 	mov.w	r0, #0
    c5f8:	bd30      	pop	{r4, r5, pc}
    c5fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c5fe:	bf1a      	itte	ne
    c600:	4619      	movne	r1, r3
    c602:	4610      	movne	r0, r2
    c604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c608:	bf1c      	itt	ne
    c60a:	460b      	movne	r3, r1
    c60c:	4602      	movne	r2, r0
    c60e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c612:	bf06      	itte	eq
    c614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c618:	ea91 0f03 	teqeq	r1, r3
    c61c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c620:	bd30      	pop	{r4, r5, pc}
    c622:	bf00      	nop

0000c624 <__aeabi_ui2d>:
    c624:	f090 0f00 	teq	r0, #0
    c628:	bf04      	itt	eq
    c62a:	2100      	moveq	r1, #0
    c62c:	4770      	bxeq	lr
    c62e:	b530      	push	{r4, r5, lr}
    c630:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c634:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c638:	f04f 0500 	mov.w	r5, #0
    c63c:	f04f 0100 	mov.w	r1, #0
    c640:	e750      	b.n	c4e4 <__adddf3+0x138>
    c642:	bf00      	nop

0000c644 <__aeabi_i2d>:
    c644:	f090 0f00 	teq	r0, #0
    c648:	bf04      	itt	eq
    c64a:	2100      	moveq	r1, #0
    c64c:	4770      	bxeq	lr
    c64e:	b530      	push	{r4, r5, lr}
    c650:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c654:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c65c:	bf48      	it	mi
    c65e:	4240      	negmi	r0, r0
    c660:	f04f 0100 	mov.w	r1, #0
    c664:	e73e      	b.n	c4e4 <__adddf3+0x138>
    c666:	bf00      	nop

0000c668 <__aeabi_f2d>:
    c668:	0042      	lsls	r2, r0, #1
    c66a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c66e:	ea4f 0131 	mov.w	r1, r1, rrx
    c672:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c676:	bf1f      	itttt	ne
    c678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c67c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c684:	4770      	bxne	lr
    c686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c68a:	bf08      	it	eq
    c68c:	4770      	bxeq	lr
    c68e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c692:	bf04      	itt	eq
    c694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c698:	4770      	bxeq	lr
    c69a:	b530      	push	{r4, r5, lr}
    c69c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c6a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c6a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c6a8:	e71c      	b.n	c4e4 <__adddf3+0x138>
    c6aa:	bf00      	nop

0000c6ac <__aeabi_ul2d>:
    c6ac:	ea50 0201 	orrs.w	r2, r0, r1
    c6b0:	bf08      	it	eq
    c6b2:	4770      	bxeq	lr
    c6b4:	b530      	push	{r4, r5, lr}
    c6b6:	f04f 0500 	mov.w	r5, #0
    c6ba:	e00a      	b.n	c6d2 <__aeabi_l2d+0x16>

0000c6bc <__aeabi_l2d>:
    c6bc:	ea50 0201 	orrs.w	r2, r0, r1
    c6c0:	bf08      	it	eq
    c6c2:	4770      	bxeq	lr
    c6c4:	b530      	push	{r4, r5, lr}
    c6c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c6ca:	d502      	bpl.n	c6d2 <__aeabi_l2d+0x16>
    c6cc:	4240      	negs	r0, r0
    c6ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c6d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c6d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c6da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c6de:	f43f aed8 	beq.w	c492 <__adddf3+0xe6>
    c6e2:	f04f 0203 	mov.w	r2, #3
    c6e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c6ea:	bf18      	it	ne
    c6ec:	3203      	addne	r2, #3
    c6ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c6f2:	bf18      	it	ne
    c6f4:	3203      	addne	r2, #3
    c6f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c6fa:	f1c2 0320 	rsb	r3, r2, #32
    c6fe:	fa00 fc03 	lsl.w	ip, r0, r3
    c702:	fa20 f002 	lsr.w	r0, r0, r2
    c706:	fa01 fe03 	lsl.w	lr, r1, r3
    c70a:	ea40 000e 	orr.w	r0, r0, lr
    c70e:	fa21 f102 	lsr.w	r1, r1, r2
    c712:	4414      	add	r4, r2
    c714:	e6bd      	b.n	c492 <__adddf3+0xe6>
    c716:	bf00      	nop

0000c718 <__aeabi_dmul>:
    c718:	b570      	push	{r4, r5, r6, lr}
    c71a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c71e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c726:	bf1d      	ittte	ne
    c728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c72c:	ea94 0f0c 	teqne	r4, ip
    c730:	ea95 0f0c 	teqne	r5, ip
    c734:	f000 f8de 	bleq	c8f4 <__aeabi_dmul+0x1dc>
    c738:	442c      	add	r4, r5
    c73a:	ea81 0603 	eor.w	r6, r1, r3
    c73e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c74a:	bf18      	it	ne
    c74c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c758:	d038      	beq.n	c7cc <__aeabi_dmul+0xb4>
    c75a:	fba0 ce02 	umull	ip, lr, r0, r2
    c75e:	f04f 0500 	mov.w	r5, #0
    c762:	fbe1 e502 	umlal	lr, r5, r1, r2
    c766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c76a:	fbe0 e503 	umlal	lr, r5, r0, r3
    c76e:	f04f 0600 	mov.w	r6, #0
    c772:	fbe1 5603 	umlal	r5, r6, r1, r3
    c776:	f09c 0f00 	teq	ip, #0
    c77a:	bf18      	it	ne
    c77c:	f04e 0e01 	orrne.w	lr, lr, #1
    c780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c78c:	d204      	bcs.n	c798 <__aeabi_dmul+0x80>
    c78e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c792:	416d      	adcs	r5, r5
    c794:	eb46 0606 	adc.w	r6, r6, r6
    c798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c79c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c7a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c7a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c7a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c7ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c7b0:	bf88      	it	hi
    c7b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c7b6:	d81e      	bhi.n	c7f6 <__aeabi_dmul+0xde>
    c7b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c7bc:	bf08      	it	eq
    c7be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c7c2:	f150 0000 	adcs.w	r0, r0, #0
    c7c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c7ca:	bd70      	pop	{r4, r5, r6, pc}
    c7cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c7d0:	ea46 0101 	orr.w	r1, r6, r1
    c7d4:	ea40 0002 	orr.w	r0, r0, r2
    c7d8:	ea81 0103 	eor.w	r1, r1, r3
    c7dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c7e0:	bfc2      	ittt	gt
    c7e2:	ebd4 050c 	rsbsgt	r5, r4, ip
    c7e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c7ea:	bd70      	popgt	{r4, r5, r6, pc}
    c7ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c7f0:	f04f 0e00 	mov.w	lr, #0
    c7f4:	3c01      	subs	r4, #1
    c7f6:	f300 80ab 	bgt.w	c950 <__aeabi_dmul+0x238>
    c7fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c7fe:	bfde      	ittt	le
    c800:	2000      	movle	r0, #0
    c802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c806:	bd70      	pople	{r4, r5, r6, pc}
    c808:	f1c4 0400 	rsb	r4, r4, #0
    c80c:	3c20      	subs	r4, #32
    c80e:	da35      	bge.n	c87c <__aeabi_dmul+0x164>
    c810:	340c      	adds	r4, #12
    c812:	dc1b      	bgt.n	c84c <__aeabi_dmul+0x134>
    c814:	f104 0414 	add.w	r4, r4, #20
    c818:	f1c4 0520 	rsb	r5, r4, #32
    c81c:	fa00 f305 	lsl.w	r3, r0, r5
    c820:	fa20 f004 	lsr.w	r0, r0, r4
    c824:	fa01 f205 	lsl.w	r2, r1, r5
    c828:	ea40 0002 	orr.w	r0, r0, r2
    c82c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c838:	fa21 f604 	lsr.w	r6, r1, r4
    c83c:	eb42 0106 	adc.w	r1, r2, r6
    c840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c844:	bf08      	it	eq
    c846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c84a:	bd70      	pop	{r4, r5, r6, pc}
    c84c:	f1c4 040c 	rsb	r4, r4, #12
    c850:	f1c4 0520 	rsb	r5, r4, #32
    c854:	fa00 f304 	lsl.w	r3, r0, r4
    c858:	fa20 f005 	lsr.w	r0, r0, r5
    c85c:	fa01 f204 	lsl.w	r2, r1, r4
    c860:	ea40 0002 	orr.w	r0, r0, r2
    c864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c86c:	f141 0100 	adc.w	r1, r1, #0
    c870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c874:	bf08      	it	eq
    c876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c87a:	bd70      	pop	{r4, r5, r6, pc}
    c87c:	f1c4 0520 	rsb	r5, r4, #32
    c880:	fa00 f205 	lsl.w	r2, r0, r5
    c884:	ea4e 0e02 	orr.w	lr, lr, r2
    c888:	fa20 f304 	lsr.w	r3, r0, r4
    c88c:	fa01 f205 	lsl.w	r2, r1, r5
    c890:	ea43 0302 	orr.w	r3, r3, r2
    c894:	fa21 f004 	lsr.w	r0, r1, r4
    c898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c89c:	fa21 f204 	lsr.w	r2, r1, r4
    c8a0:	ea20 0002 	bic.w	r0, r0, r2
    c8a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c8a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c8ac:	bf08      	it	eq
    c8ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c8b2:	bd70      	pop	{r4, r5, r6, pc}
    c8b4:	f094 0f00 	teq	r4, #0
    c8b8:	d10f      	bne.n	c8da <__aeabi_dmul+0x1c2>
    c8ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c8be:	0040      	lsls	r0, r0, #1
    c8c0:	eb41 0101 	adc.w	r1, r1, r1
    c8c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c8c8:	bf08      	it	eq
    c8ca:	3c01      	subeq	r4, #1
    c8cc:	d0f7      	beq.n	c8be <__aeabi_dmul+0x1a6>
    c8ce:	ea41 0106 	orr.w	r1, r1, r6
    c8d2:	f095 0f00 	teq	r5, #0
    c8d6:	bf18      	it	ne
    c8d8:	4770      	bxne	lr
    c8da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c8de:	0052      	lsls	r2, r2, #1
    c8e0:	eb43 0303 	adc.w	r3, r3, r3
    c8e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c8e8:	bf08      	it	eq
    c8ea:	3d01      	subeq	r5, #1
    c8ec:	d0f7      	beq.n	c8de <__aeabi_dmul+0x1c6>
    c8ee:	ea43 0306 	orr.w	r3, r3, r6
    c8f2:	4770      	bx	lr
    c8f4:	ea94 0f0c 	teq	r4, ip
    c8f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c8fc:	bf18      	it	ne
    c8fe:	ea95 0f0c 	teqne	r5, ip
    c902:	d00c      	beq.n	c91e <__aeabi_dmul+0x206>
    c904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c908:	bf18      	it	ne
    c90a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c90e:	d1d1      	bne.n	c8b4 <__aeabi_dmul+0x19c>
    c910:	ea81 0103 	eor.w	r1, r1, r3
    c914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c918:	f04f 0000 	mov.w	r0, #0
    c91c:	bd70      	pop	{r4, r5, r6, pc}
    c91e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c922:	bf06      	itte	eq
    c924:	4610      	moveq	r0, r2
    c926:	4619      	moveq	r1, r3
    c928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c92c:	d019      	beq.n	c962 <__aeabi_dmul+0x24a>
    c92e:	ea94 0f0c 	teq	r4, ip
    c932:	d102      	bne.n	c93a <__aeabi_dmul+0x222>
    c934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c938:	d113      	bne.n	c962 <__aeabi_dmul+0x24a>
    c93a:	ea95 0f0c 	teq	r5, ip
    c93e:	d105      	bne.n	c94c <__aeabi_dmul+0x234>
    c940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c944:	bf1c      	itt	ne
    c946:	4610      	movne	r0, r2
    c948:	4619      	movne	r1, r3
    c94a:	d10a      	bne.n	c962 <__aeabi_dmul+0x24a>
    c94c:	ea81 0103 	eor.w	r1, r1, r3
    c950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c95c:	f04f 0000 	mov.w	r0, #0
    c960:	bd70      	pop	{r4, r5, r6, pc}
    c962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c96a:	bd70      	pop	{r4, r5, r6, pc}

0000c96c <__aeabi_ddiv>:
    c96c:	b570      	push	{r4, r5, r6, lr}
    c96e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c97a:	bf1d      	ittte	ne
    c97c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c980:	ea94 0f0c 	teqne	r4, ip
    c984:	ea95 0f0c 	teqne	r5, ip
    c988:	f000 f8a7 	bleq	cada <__aeabi_ddiv+0x16e>
    c98c:	eba4 0405 	sub.w	r4, r4, r5
    c990:	ea81 0e03 	eor.w	lr, r1, r3
    c994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c998:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c99c:	f000 8088 	beq.w	cab0 <__aeabi_ddiv+0x144>
    c9a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c9a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c9a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c9ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c9b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c9b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c9b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c9bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c9c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c9c4:	429d      	cmp	r5, r3
    c9c6:	bf08      	it	eq
    c9c8:	4296      	cmpeq	r6, r2
    c9ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c9ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c9d2:	d202      	bcs.n	c9da <__aeabi_ddiv+0x6e>
    c9d4:	085b      	lsrs	r3, r3, #1
    c9d6:	ea4f 0232 	mov.w	r2, r2, rrx
    c9da:	1ab6      	subs	r6, r6, r2
    c9dc:	eb65 0503 	sbc.w	r5, r5, r3
    c9e0:	085b      	lsrs	r3, r3, #1
    c9e2:	ea4f 0232 	mov.w	r2, r2, rrx
    c9e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c9ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c9ee:	ebb6 0e02 	subs.w	lr, r6, r2
    c9f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    c9f6:	bf22      	ittt	cs
    c9f8:	1ab6      	subcs	r6, r6, r2
    c9fa:	4675      	movcs	r5, lr
    c9fc:	ea40 000c 	orrcs.w	r0, r0, ip
    ca00:	085b      	lsrs	r3, r3, #1
    ca02:	ea4f 0232 	mov.w	r2, r2, rrx
    ca06:	ebb6 0e02 	subs.w	lr, r6, r2
    ca0a:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca0e:	bf22      	ittt	cs
    ca10:	1ab6      	subcs	r6, r6, r2
    ca12:	4675      	movcs	r5, lr
    ca14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    ca18:	085b      	lsrs	r3, r3, #1
    ca1a:	ea4f 0232 	mov.w	r2, r2, rrx
    ca1e:	ebb6 0e02 	subs.w	lr, r6, r2
    ca22:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca26:	bf22      	ittt	cs
    ca28:	1ab6      	subcs	r6, r6, r2
    ca2a:	4675      	movcs	r5, lr
    ca2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    ca30:	085b      	lsrs	r3, r3, #1
    ca32:	ea4f 0232 	mov.w	r2, r2, rrx
    ca36:	ebb6 0e02 	subs.w	lr, r6, r2
    ca3a:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca3e:	bf22      	ittt	cs
    ca40:	1ab6      	subcs	r6, r6, r2
    ca42:	4675      	movcs	r5, lr
    ca44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ca48:	ea55 0e06 	orrs.w	lr, r5, r6
    ca4c:	d018      	beq.n	ca80 <__aeabi_ddiv+0x114>
    ca4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    ca52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    ca56:	ea4f 1606 	mov.w	r6, r6, lsl #4
    ca5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    ca5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    ca62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    ca66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    ca6a:	d1c0      	bne.n	c9ee <__aeabi_ddiv+0x82>
    ca6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ca70:	d10b      	bne.n	ca8a <__aeabi_ddiv+0x11e>
    ca72:	ea41 0100 	orr.w	r1, r1, r0
    ca76:	f04f 0000 	mov.w	r0, #0
    ca7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    ca7e:	e7b6      	b.n	c9ee <__aeabi_ddiv+0x82>
    ca80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ca84:	bf04      	itt	eq
    ca86:	4301      	orreq	r1, r0
    ca88:	2000      	moveq	r0, #0
    ca8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ca8e:	bf88      	it	hi
    ca90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ca94:	f63f aeaf 	bhi.w	c7f6 <__aeabi_dmul+0xde>
    ca98:	ebb5 0c03 	subs.w	ip, r5, r3
    ca9c:	bf04      	itt	eq
    ca9e:	ebb6 0c02 	subseq.w	ip, r6, r2
    caa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    caa6:	f150 0000 	adcs.w	r0, r0, #0
    caaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    caae:	bd70      	pop	{r4, r5, r6, pc}
    cab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    cab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    cab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    cabc:	bfc2      	ittt	gt
    cabe:	ebd4 050c 	rsbsgt	r5, r4, ip
    cac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cac6:	bd70      	popgt	{r4, r5, r6, pc}
    cac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cacc:	f04f 0e00 	mov.w	lr, #0
    cad0:	3c01      	subs	r4, #1
    cad2:	e690      	b.n	c7f6 <__aeabi_dmul+0xde>
    cad4:	ea45 0e06 	orr.w	lr, r5, r6
    cad8:	e68d      	b.n	c7f6 <__aeabi_dmul+0xde>
    cada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cade:	ea94 0f0c 	teq	r4, ip
    cae2:	bf08      	it	eq
    cae4:	ea95 0f0c 	teqeq	r5, ip
    cae8:	f43f af3b 	beq.w	c962 <__aeabi_dmul+0x24a>
    caec:	ea94 0f0c 	teq	r4, ip
    caf0:	d10a      	bne.n	cb08 <__aeabi_ddiv+0x19c>
    caf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    caf6:	f47f af34 	bne.w	c962 <__aeabi_dmul+0x24a>
    cafa:	ea95 0f0c 	teq	r5, ip
    cafe:	f47f af25 	bne.w	c94c <__aeabi_dmul+0x234>
    cb02:	4610      	mov	r0, r2
    cb04:	4619      	mov	r1, r3
    cb06:	e72c      	b.n	c962 <__aeabi_dmul+0x24a>
    cb08:	ea95 0f0c 	teq	r5, ip
    cb0c:	d106      	bne.n	cb1c <__aeabi_ddiv+0x1b0>
    cb0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cb12:	f43f aefd 	beq.w	c910 <__aeabi_dmul+0x1f8>
    cb16:	4610      	mov	r0, r2
    cb18:	4619      	mov	r1, r3
    cb1a:	e722      	b.n	c962 <__aeabi_dmul+0x24a>
    cb1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cb20:	bf18      	it	ne
    cb22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cb26:	f47f aec5 	bne.w	c8b4 <__aeabi_dmul+0x19c>
    cb2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    cb2e:	f47f af0d 	bne.w	c94c <__aeabi_dmul+0x234>
    cb32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    cb36:	f47f aeeb 	bne.w	c910 <__aeabi_dmul+0x1f8>
    cb3a:	e712      	b.n	c962 <__aeabi_dmul+0x24a>

0000cb3c <__aeabi_uldivmod>:
    cb3c:	b953      	cbnz	r3, cb54 <__aeabi_uldivmod+0x18>
    cb3e:	b94a      	cbnz	r2, cb54 <__aeabi_uldivmod+0x18>
    cb40:	2900      	cmp	r1, #0
    cb42:	bf08      	it	eq
    cb44:	2800      	cmpeq	r0, #0
    cb46:	bf1c      	itt	ne
    cb48:	f04f 31ff 	movne.w	r1, #4294967295
    cb4c:	f04f 30ff 	movne.w	r0, #4294967295
    cb50:	f000 b96c 	b.w	ce2c <__aeabi_idiv0>
    cb54:	f1ad 0c08 	sub.w	ip, sp, #8
    cb58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cb5c:	f000 f806 	bl	cb6c <__udivmoddi4>
    cb60:	f8dd e004 	ldr.w	lr, [sp, #4]
    cb64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb68:	b004      	add	sp, #16
    cb6a:	4770      	bx	lr

0000cb6c <__udivmoddi4>:
    cb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb70:	9e08      	ldr	r6, [sp, #32]
    cb72:	460d      	mov	r5, r1
    cb74:	4604      	mov	r4, r0
    cb76:	468e      	mov	lr, r1
    cb78:	2b00      	cmp	r3, #0
    cb7a:	f040 8082 	bne.w	cc82 <__udivmoddi4+0x116>
    cb7e:	428a      	cmp	r2, r1
    cb80:	4617      	mov	r7, r2
    cb82:	d946      	bls.n	cc12 <__udivmoddi4+0xa6>
    cb84:	fab2 f282 	clz	r2, r2
    cb88:	b14a      	cbz	r2, cb9e <__udivmoddi4+0x32>
    cb8a:	f1c2 0120 	rsb	r1, r2, #32
    cb8e:	fa05 f302 	lsl.w	r3, r5, r2
    cb92:	fa20 f101 	lsr.w	r1, r0, r1
    cb96:	4097      	lsls	r7, r2
    cb98:	ea41 0e03 	orr.w	lr, r1, r3
    cb9c:	4094      	lsls	r4, r2
    cb9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
    cba2:	0c23      	lsrs	r3, r4, #16
    cba4:	fbbe fcf8 	udiv	ip, lr, r8
    cba8:	b2b9      	uxth	r1, r7
    cbaa:	fb08 ee1c 	mls	lr, r8, ip, lr
    cbae:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    cbb2:	fb0c f001 	mul.w	r0, ip, r1
    cbb6:	4298      	cmp	r0, r3
    cbb8:	d90a      	bls.n	cbd0 <__udivmoddi4+0x64>
    cbba:	18fb      	adds	r3, r7, r3
    cbbc:	f10c 35ff 	add.w	r5, ip, #4294967295
    cbc0:	f080 8116 	bcs.w	cdf0 <__udivmoddi4+0x284>
    cbc4:	4298      	cmp	r0, r3
    cbc6:	f240 8113 	bls.w	cdf0 <__udivmoddi4+0x284>
    cbca:	f1ac 0c02 	sub.w	ip, ip, #2
    cbce:	443b      	add	r3, r7
    cbd0:	1a1b      	subs	r3, r3, r0
    cbd2:	b2a4      	uxth	r4, r4
    cbd4:	fbb3 f0f8 	udiv	r0, r3, r8
    cbd8:	fb08 3310 	mls	r3, r8, r0, r3
    cbdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cbe0:	fb00 f101 	mul.w	r1, r0, r1
    cbe4:	42a1      	cmp	r1, r4
    cbe6:	d909      	bls.n	cbfc <__udivmoddi4+0x90>
    cbe8:	193c      	adds	r4, r7, r4
    cbea:	f100 33ff 	add.w	r3, r0, #4294967295
    cbee:	f080 8101 	bcs.w	cdf4 <__udivmoddi4+0x288>
    cbf2:	42a1      	cmp	r1, r4
    cbf4:	f240 80fe 	bls.w	cdf4 <__udivmoddi4+0x288>
    cbf8:	3802      	subs	r0, #2
    cbfa:	443c      	add	r4, r7
    cbfc:	1a64      	subs	r4, r4, r1
    cbfe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cc02:	2100      	movs	r1, #0
    cc04:	b11e      	cbz	r6, cc0e <__udivmoddi4+0xa2>
    cc06:	40d4      	lsrs	r4, r2
    cc08:	2300      	movs	r3, #0
    cc0a:	e9c6 4300 	strd	r4, r3, [r6]
    cc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc12:	b902      	cbnz	r2, cc16 <__udivmoddi4+0xaa>
    cc14:	deff      	udf	#255	; 0xff
    cc16:	fab2 f282 	clz	r2, r2
    cc1a:	2a00      	cmp	r2, #0
    cc1c:	d14f      	bne.n	ccbe <__udivmoddi4+0x152>
    cc1e:	1bcb      	subs	r3, r1, r7
    cc20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cc24:	fa1f f887 	uxth.w	r8, r7
    cc28:	2101      	movs	r1, #1
    cc2a:	fbb3 fcfe 	udiv	ip, r3, lr
    cc2e:	0c25      	lsrs	r5, r4, #16
    cc30:	fb0e 331c 	mls	r3, lr, ip, r3
    cc34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    cc38:	fb08 f30c 	mul.w	r3, r8, ip
    cc3c:	42ab      	cmp	r3, r5
    cc3e:	d907      	bls.n	cc50 <__udivmoddi4+0xe4>
    cc40:	197d      	adds	r5, r7, r5
    cc42:	f10c 30ff 	add.w	r0, ip, #4294967295
    cc46:	d202      	bcs.n	cc4e <__udivmoddi4+0xe2>
    cc48:	42ab      	cmp	r3, r5
    cc4a:	f200 80e7 	bhi.w	ce1c <__udivmoddi4+0x2b0>
    cc4e:	4684      	mov	ip, r0
    cc50:	1aed      	subs	r5, r5, r3
    cc52:	b2a3      	uxth	r3, r4
    cc54:	fbb5 f0fe 	udiv	r0, r5, lr
    cc58:	fb0e 5510 	mls	r5, lr, r0, r5
    cc5c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    cc60:	fb08 f800 	mul.w	r8, r8, r0
    cc64:	45a0      	cmp	r8, r4
    cc66:	d907      	bls.n	cc78 <__udivmoddi4+0x10c>
    cc68:	193c      	adds	r4, r7, r4
    cc6a:	f100 33ff 	add.w	r3, r0, #4294967295
    cc6e:	d202      	bcs.n	cc76 <__udivmoddi4+0x10a>
    cc70:	45a0      	cmp	r8, r4
    cc72:	f200 80d7 	bhi.w	ce24 <__udivmoddi4+0x2b8>
    cc76:	4618      	mov	r0, r3
    cc78:	eba4 0408 	sub.w	r4, r4, r8
    cc7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cc80:	e7c0      	b.n	cc04 <__udivmoddi4+0x98>
    cc82:	428b      	cmp	r3, r1
    cc84:	d908      	bls.n	cc98 <__udivmoddi4+0x12c>
    cc86:	2e00      	cmp	r6, #0
    cc88:	f000 80af 	beq.w	cdea <__udivmoddi4+0x27e>
    cc8c:	2100      	movs	r1, #0
    cc8e:	e9c6 0500 	strd	r0, r5, [r6]
    cc92:	4608      	mov	r0, r1
    cc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc98:	fab3 f183 	clz	r1, r3
    cc9c:	2900      	cmp	r1, #0
    cc9e:	d14b      	bne.n	cd38 <__udivmoddi4+0x1cc>
    cca0:	42ab      	cmp	r3, r5
    cca2:	d302      	bcc.n	ccaa <__udivmoddi4+0x13e>
    cca4:	4282      	cmp	r2, r0
    cca6:	f200 80b7 	bhi.w	ce18 <__udivmoddi4+0x2ac>
    ccaa:	1a84      	subs	r4, r0, r2
    ccac:	eb65 0303 	sbc.w	r3, r5, r3
    ccb0:	2001      	movs	r0, #1
    ccb2:	469e      	mov	lr, r3
    ccb4:	2e00      	cmp	r6, #0
    ccb6:	d0aa      	beq.n	cc0e <__udivmoddi4+0xa2>
    ccb8:	e9c6 4e00 	strd	r4, lr, [r6]
    ccbc:	e7a7      	b.n	cc0e <__udivmoddi4+0xa2>
    ccbe:	f1c2 0c20 	rsb	ip, r2, #32
    ccc2:	fa01 f302 	lsl.w	r3, r1, r2
    ccc6:	4097      	lsls	r7, r2
    ccc8:	fa20 f00c 	lsr.w	r0, r0, ip
    cccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    ccd0:	fa21 fc0c 	lsr.w	ip, r1, ip
    ccd4:	4318      	orrs	r0, r3
    ccd6:	fbbc f1fe 	udiv	r1, ip, lr
    ccda:	0c05      	lsrs	r5, r0, #16
    ccdc:	fb0e cc11 	mls	ip, lr, r1, ip
    cce0:	fa1f f887 	uxth.w	r8, r7
    cce4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    cce8:	fb01 f308 	mul.w	r3, r1, r8
    ccec:	42ab      	cmp	r3, r5
    ccee:	fa04 f402 	lsl.w	r4, r4, r2
    ccf2:	d909      	bls.n	cd08 <__udivmoddi4+0x19c>
    ccf4:	197d      	adds	r5, r7, r5
    ccf6:	f101 3cff 	add.w	ip, r1, #4294967295
    ccfa:	f080 808b 	bcs.w	ce14 <__udivmoddi4+0x2a8>
    ccfe:	42ab      	cmp	r3, r5
    cd00:	f240 8088 	bls.w	ce14 <__udivmoddi4+0x2a8>
    cd04:	3902      	subs	r1, #2
    cd06:	443d      	add	r5, r7
    cd08:	1aeb      	subs	r3, r5, r3
    cd0a:	b285      	uxth	r5, r0
    cd0c:	fbb3 f0fe 	udiv	r0, r3, lr
    cd10:	fb0e 3310 	mls	r3, lr, r0, r3
    cd14:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    cd18:	fb00 f308 	mul.w	r3, r0, r8
    cd1c:	42ab      	cmp	r3, r5
    cd1e:	d907      	bls.n	cd30 <__udivmoddi4+0x1c4>
    cd20:	197d      	adds	r5, r7, r5
    cd22:	f100 3cff 	add.w	ip, r0, #4294967295
    cd26:	d271      	bcs.n	ce0c <__udivmoddi4+0x2a0>
    cd28:	42ab      	cmp	r3, r5
    cd2a:	d96f      	bls.n	ce0c <__udivmoddi4+0x2a0>
    cd2c:	3802      	subs	r0, #2
    cd2e:	443d      	add	r5, r7
    cd30:	1aeb      	subs	r3, r5, r3
    cd32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    cd36:	e778      	b.n	cc2a <__udivmoddi4+0xbe>
    cd38:	f1c1 0c20 	rsb	ip, r1, #32
    cd3c:	408b      	lsls	r3, r1
    cd3e:	fa22 f70c 	lsr.w	r7, r2, ip
    cd42:	431f      	orrs	r7, r3
    cd44:	fa20 f40c 	lsr.w	r4, r0, ip
    cd48:	fa05 f301 	lsl.w	r3, r5, r1
    cd4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cd50:	fa25 f50c 	lsr.w	r5, r5, ip
    cd54:	431c      	orrs	r4, r3
    cd56:	0c23      	lsrs	r3, r4, #16
    cd58:	fbb5 f9fe 	udiv	r9, r5, lr
    cd5c:	fa1f f887 	uxth.w	r8, r7
    cd60:	fb0e 5519 	mls	r5, lr, r9, r5
    cd64:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    cd68:	fb09 fa08 	mul.w	sl, r9, r8
    cd6c:	45aa      	cmp	sl, r5
    cd6e:	fa02 f201 	lsl.w	r2, r2, r1
    cd72:	fa00 f301 	lsl.w	r3, r0, r1
    cd76:	d908      	bls.n	cd8a <__udivmoddi4+0x21e>
    cd78:	197d      	adds	r5, r7, r5
    cd7a:	f109 30ff 	add.w	r0, r9, #4294967295
    cd7e:	d247      	bcs.n	ce10 <__udivmoddi4+0x2a4>
    cd80:	45aa      	cmp	sl, r5
    cd82:	d945      	bls.n	ce10 <__udivmoddi4+0x2a4>
    cd84:	f1a9 0902 	sub.w	r9, r9, #2
    cd88:	443d      	add	r5, r7
    cd8a:	eba5 050a 	sub.w	r5, r5, sl
    cd8e:	b2a4      	uxth	r4, r4
    cd90:	fbb5 f0fe 	udiv	r0, r5, lr
    cd94:	fb0e 5510 	mls	r5, lr, r0, r5
    cd98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    cd9c:	fb00 f808 	mul.w	r8, r0, r8
    cda0:	45a0      	cmp	r8, r4
    cda2:	d907      	bls.n	cdb4 <__udivmoddi4+0x248>
    cda4:	193c      	adds	r4, r7, r4
    cda6:	f100 35ff 	add.w	r5, r0, #4294967295
    cdaa:	d22d      	bcs.n	ce08 <__udivmoddi4+0x29c>
    cdac:	45a0      	cmp	r8, r4
    cdae:	d92b      	bls.n	ce08 <__udivmoddi4+0x29c>
    cdb0:	3802      	subs	r0, #2
    cdb2:	443c      	add	r4, r7
    cdb4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    cdb8:	eba4 0408 	sub.w	r4, r4, r8
    cdbc:	fba0 8902 	umull	r8, r9, r0, r2
    cdc0:	454c      	cmp	r4, r9
    cdc2:	46c6      	mov	lr, r8
    cdc4:	464d      	mov	r5, r9
    cdc6:	d319      	bcc.n	cdfc <__udivmoddi4+0x290>
    cdc8:	d016      	beq.n	cdf8 <__udivmoddi4+0x28c>
    cdca:	b15e      	cbz	r6, cde4 <__udivmoddi4+0x278>
    cdcc:	ebb3 020e 	subs.w	r2, r3, lr
    cdd0:	eb64 0405 	sbc.w	r4, r4, r5
    cdd4:	fa04 fc0c 	lsl.w	ip, r4, ip
    cdd8:	40ca      	lsrs	r2, r1
    cdda:	ea4c 0202 	orr.w	r2, ip, r2
    cdde:	40cc      	lsrs	r4, r1
    cde0:	e9c6 2400 	strd	r2, r4, [r6]
    cde4:	2100      	movs	r1, #0
    cde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cdea:	4631      	mov	r1, r6
    cdec:	4630      	mov	r0, r6
    cdee:	e70e      	b.n	cc0e <__udivmoddi4+0xa2>
    cdf0:	46ac      	mov	ip, r5
    cdf2:	e6ed      	b.n	cbd0 <__udivmoddi4+0x64>
    cdf4:	4618      	mov	r0, r3
    cdf6:	e701      	b.n	cbfc <__udivmoddi4+0x90>
    cdf8:	4543      	cmp	r3, r8
    cdfa:	d2e6      	bcs.n	cdca <__udivmoddi4+0x25e>
    cdfc:	ebb8 0e02 	subs.w	lr, r8, r2
    ce00:	eb69 0507 	sbc.w	r5, r9, r7
    ce04:	3801      	subs	r0, #1
    ce06:	e7e0      	b.n	cdca <__udivmoddi4+0x25e>
    ce08:	4628      	mov	r0, r5
    ce0a:	e7d3      	b.n	cdb4 <__udivmoddi4+0x248>
    ce0c:	4660      	mov	r0, ip
    ce0e:	e78f      	b.n	cd30 <__udivmoddi4+0x1c4>
    ce10:	4681      	mov	r9, r0
    ce12:	e7ba      	b.n	cd8a <__udivmoddi4+0x21e>
    ce14:	4661      	mov	r1, ip
    ce16:	e777      	b.n	cd08 <__udivmoddi4+0x19c>
    ce18:	4608      	mov	r0, r1
    ce1a:	e74b      	b.n	ccb4 <__udivmoddi4+0x148>
    ce1c:	f1ac 0c02 	sub.w	ip, ip, #2
    ce20:	443d      	add	r5, r7
    ce22:	e715      	b.n	cc50 <__udivmoddi4+0xe4>
    ce24:	3802      	subs	r0, #2
    ce26:	443c      	add	r4, r7
    ce28:	e726      	b.n	cc78 <__udivmoddi4+0x10c>
    ce2a:	bf00      	nop

0000ce2c <__aeabi_idiv0>:
    ce2c:	4770      	bx	lr
    ce2e:	bf00      	nop

0000ce30 <__gedf2>:
    ce30:	f04f 3cff 	mov.w	ip, #4294967295
    ce34:	e006      	b.n	ce44 <__cmpdf2+0x4>
    ce36:	bf00      	nop

0000ce38 <__ledf2>:
    ce38:	f04f 0c01 	mov.w	ip, #1
    ce3c:	e002      	b.n	ce44 <__cmpdf2+0x4>
    ce3e:	bf00      	nop

0000ce40 <__cmpdf2>:
    ce40:	f04f 0c01 	mov.w	ip, #1
    ce44:	f84d cd04 	str.w	ip, [sp, #-4]!
    ce48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ce4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ce50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ce54:	bf18      	it	ne
    ce56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    ce5a:	d01b      	beq.n	ce94 <__cmpdf2+0x54>
    ce5c:	b001      	add	sp, #4
    ce5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    ce62:	bf0c      	ite	eq
    ce64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    ce68:	ea91 0f03 	teqne	r1, r3
    ce6c:	bf02      	ittt	eq
    ce6e:	ea90 0f02 	teqeq	r0, r2
    ce72:	2000      	moveq	r0, #0
    ce74:	4770      	bxeq	lr
    ce76:	f110 0f00 	cmn.w	r0, #0
    ce7a:	ea91 0f03 	teq	r1, r3
    ce7e:	bf58      	it	pl
    ce80:	4299      	cmppl	r1, r3
    ce82:	bf08      	it	eq
    ce84:	4290      	cmpeq	r0, r2
    ce86:	bf2c      	ite	cs
    ce88:	17d8      	asrcs	r0, r3, #31
    ce8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    ce8e:	f040 0001 	orr.w	r0, r0, #1
    ce92:	4770      	bx	lr
    ce94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ce98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ce9c:	d102      	bne.n	cea4 <__cmpdf2+0x64>
    ce9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cea2:	d107      	bne.n	ceb4 <__cmpdf2+0x74>
    cea4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cea8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ceac:	d1d6      	bne.n	ce5c <__cmpdf2+0x1c>
    ceae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    ceb2:	d0d3      	beq.n	ce5c <__cmpdf2+0x1c>
    ceb4:	f85d 0b04 	ldr.w	r0, [sp], #4
    ceb8:	4770      	bx	lr
    ceba:	bf00      	nop

0000cebc <__aeabi_cdrcmple>:
    cebc:	4684      	mov	ip, r0
    cebe:	4610      	mov	r0, r2
    cec0:	4662      	mov	r2, ip
    cec2:	468c      	mov	ip, r1
    cec4:	4619      	mov	r1, r3
    cec6:	4663      	mov	r3, ip
    cec8:	e000      	b.n	cecc <__aeabi_cdcmpeq>
    ceca:	bf00      	nop

0000cecc <__aeabi_cdcmpeq>:
    cecc:	b501      	push	{r0, lr}
    cece:	f7ff ffb7 	bl	ce40 <__cmpdf2>
    ced2:	2800      	cmp	r0, #0
    ced4:	bf48      	it	mi
    ced6:	f110 0f00 	cmnmi.w	r0, #0
    ceda:	bd01      	pop	{r0, pc}

0000cedc <__aeabi_dcmpeq>:
    cedc:	f84d ed08 	str.w	lr, [sp, #-8]!
    cee0:	f7ff fff4 	bl	cecc <__aeabi_cdcmpeq>
    cee4:	bf0c      	ite	eq
    cee6:	2001      	moveq	r0, #1
    cee8:	2000      	movne	r0, #0
    ceea:	f85d fb08 	ldr.w	pc, [sp], #8
    ceee:	bf00      	nop

0000cef0 <__aeabi_dcmplt>:
    cef0:	f84d ed08 	str.w	lr, [sp, #-8]!
    cef4:	f7ff ffea 	bl	cecc <__aeabi_cdcmpeq>
    cef8:	bf34      	ite	cc
    cefa:	2001      	movcc	r0, #1
    cefc:	2000      	movcs	r0, #0
    cefe:	f85d fb08 	ldr.w	pc, [sp], #8
    cf02:	bf00      	nop

0000cf04 <__aeabi_dcmple>:
    cf04:	f84d ed08 	str.w	lr, [sp, #-8]!
    cf08:	f7ff ffe0 	bl	cecc <__aeabi_cdcmpeq>
    cf0c:	bf94      	ite	ls
    cf0e:	2001      	movls	r0, #1
    cf10:	2000      	movhi	r0, #0
    cf12:	f85d fb08 	ldr.w	pc, [sp], #8
    cf16:	bf00      	nop

0000cf18 <__aeabi_dcmpge>:
    cf18:	f84d ed08 	str.w	lr, [sp, #-8]!
    cf1c:	f7ff ffce 	bl	cebc <__aeabi_cdrcmple>
    cf20:	bf94      	ite	ls
    cf22:	2001      	movls	r0, #1
    cf24:	2000      	movhi	r0, #0
    cf26:	f85d fb08 	ldr.w	pc, [sp], #8
    cf2a:	bf00      	nop

0000cf2c <__aeabi_dcmpgt>:
    cf2c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cf30:	f7ff ffc4 	bl	cebc <__aeabi_cdrcmple>
    cf34:	bf34      	ite	cc
    cf36:	2001      	movcc	r0, #1
    cf38:	2000      	movcs	r0, #0
    cf3a:	f85d fb08 	ldr.w	pc, [sp], #8
    cf3e:	bf00      	nop

0000cf40 <__aeabi_dcmpun>:
    cf40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cf44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cf48:	d102      	bne.n	cf50 <__aeabi_dcmpun+0x10>
    cf4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cf4e:	d10a      	bne.n	cf66 <__aeabi_dcmpun+0x26>
    cf50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cf54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cf58:	d102      	bne.n	cf60 <__aeabi_dcmpun+0x20>
    cf5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cf5e:	d102      	bne.n	cf66 <__aeabi_dcmpun+0x26>
    cf60:	f04f 0000 	mov.w	r0, #0
    cf64:	4770      	bx	lr
    cf66:	f04f 0001 	mov.w	r0, #1
    cf6a:	4770      	bx	lr

0000cf6c <__aeabi_d2iz>:
    cf6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    cf70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    cf74:	d215      	bcs.n	cfa2 <__aeabi_d2iz+0x36>
    cf76:	d511      	bpl.n	cf9c <__aeabi_d2iz+0x30>
    cf78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    cf7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cf80:	d912      	bls.n	cfa8 <__aeabi_d2iz+0x3c>
    cf82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cf86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cf8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cf8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cf92:	fa23 f002 	lsr.w	r0, r3, r2
    cf96:	bf18      	it	ne
    cf98:	4240      	negne	r0, r0
    cf9a:	4770      	bx	lr
    cf9c:	f04f 0000 	mov.w	r0, #0
    cfa0:	4770      	bx	lr
    cfa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    cfa6:	d105      	bne.n	cfb4 <__aeabi_d2iz+0x48>
    cfa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    cfac:	bf08      	it	eq
    cfae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    cfb2:	4770      	bx	lr
    cfb4:	f04f 0000 	mov.w	r0, #0
    cfb8:	4770      	bx	lr
    cfba:	bf00      	nop

0000cfbc <strcmp>:
    cfbc:	f810 2b01 	ldrb.w	r2, [r0], #1
    cfc0:	f811 3b01 	ldrb.w	r3, [r1], #1
    cfc4:	2a01      	cmp	r2, #1
    cfc6:	bf28      	it	cs
    cfc8:	429a      	cmpcs	r2, r3
    cfca:	d0f7      	beq.n	cfbc <strcmp>
    cfcc:	1ad0      	subs	r0, r2, r3
    cfce:	4770      	bx	lr

0000cfd0 <strlen>:
    cfd0:	4603      	mov	r3, r0
    cfd2:	f813 2b01 	ldrb.w	r2, [r3], #1
    cfd6:	2a00      	cmp	r2, #0
    cfd8:	d1fb      	bne.n	cfd2 <strlen+0x2>
    cfda:	1a18      	subs	r0, r3, r0
    cfdc:	3801      	subs	r0, #1
    cfde:	4770      	bx	lr

0000cfe0 <_dtoa_r>:
    cfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfe4:	6a44      	ldr	r4, [r0, #36]	; 0x24
    cfe6:	b099      	sub	sp, #100	; 0x64
    cfe8:	4616      	mov	r6, r2
    cfea:	461f      	mov	r7, r3
    cfec:	e9cd 6704 	strd	r6, r7, [sp, #16]
    cff0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    cff4:	4605      	mov	r5, r0
    cff6:	b93c      	cbnz	r4, d008 <_dtoa_r+0x28>
    cff8:	2010      	movs	r0, #16
    cffa:	f00c fa29 	bl	19450 <malloc>
    cffe:	e9c0 4401 	strd	r4, r4, [r0, #4]
    d002:	6268      	str	r0, [r5, #36]	; 0x24
    d004:	6004      	str	r4, [r0, #0]
    d006:	60c4      	str	r4, [r0, #12]
    d008:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d00a:	6819      	ldr	r1, [r3, #0]
    d00c:	b151      	cbz	r1, d024 <_dtoa_r+0x44>
    d00e:	685a      	ldr	r2, [r3, #4]
    d010:	604a      	str	r2, [r1, #4]
    d012:	2301      	movs	r3, #1
    d014:	4093      	lsls	r3, r2
    d016:	608b      	str	r3, [r1, #8]
    d018:	4628      	mov	r0, r5
    d01a:	f00f f81d 	bl	1c058 <_Bfree>
    d01e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d020:	2200      	movs	r2, #0
    d022:	601a      	str	r2, [r3, #0]
    d024:	1e3b      	subs	r3, r7, #0
    d026:	bfb9      	ittee	lt
    d028:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    d02c:	9305      	strlt	r3, [sp, #20]
    d02e:	2300      	movge	r3, #0
    d030:	f8c8 3000 	strge.w	r3, [r8]
    d034:	f8dd 9014 	ldr.w	r9, [sp, #20]
    d038:	4ba7      	ldr	r3, [pc, #668]	; (d2d8 <_dtoa_r+0x2f8>)
    d03a:	bfbc      	itt	lt
    d03c:	2201      	movlt	r2, #1
    d03e:	f8c8 2000 	strlt.w	r2, [r8]
    d042:	ea33 0309 	bics.w	r3, r3, r9
    d046:	d119      	bne.n	d07c <_dtoa_r+0x9c>
    d048:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d04a:	f242 730f 	movw	r3, #9999	; 0x270f
    d04e:	6013      	str	r3, [r2, #0]
    d050:	f3c9 0313 	ubfx	r3, r9, #0, #20
    d054:	4333      	orrs	r3, r6
    d056:	f000 856d 	beq.w	db34 <_dtoa_r+0xb54>
    d05a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d05c:	b953      	cbnz	r3, d074 <_dtoa_r+0x94>
    d05e:	4b9f      	ldr	r3, [pc, #636]	; (d2dc <_dtoa_r+0x2fc>)
    d060:	e023      	b.n	d0aa <_dtoa_r+0xca>
    d062:	4b9f      	ldr	r3, [pc, #636]	; (d2e0 <_dtoa_r+0x300>)
    d064:	9303      	str	r3, [sp, #12]
    d066:	3308      	adds	r3, #8
    d068:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d06a:	6013      	str	r3, [r2, #0]
    d06c:	9803      	ldr	r0, [sp, #12]
    d06e:	b019      	add	sp, #100	; 0x64
    d070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d074:	4b99      	ldr	r3, [pc, #612]	; (d2dc <_dtoa_r+0x2fc>)
    d076:	9303      	str	r3, [sp, #12]
    d078:	3303      	adds	r3, #3
    d07a:	e7f5      	b.n	d068 <_dtoa_r+0x88>
    d07c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    d080:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    d084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d088:	2200      	movs	r2, #0
    d08a:	2300      	movs	r3, #0
    d08c:	f7ff ff26 	bl	cedc <__aeabi_dcmpeq>
    d090:	4680      	mov	r8, r0
    d092:	b160      	cbz	r0, d0ae <_dtoa_r+0xce>
    d094:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d096:	2301      	movs	r3, #1
    d098:	6013      	str	r3, [r2, #0]
    d09a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d09c:	2b00      	cmp	r3, #0
    d09e:	f000 8546 	beq.w	db2e <_dtoa_r+0xb4e>
    d0a2:	4b90      	ldr	r3, [pc, #576]	; (d2e4 <_dtoa_r+0x304>)
    d0a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d0a6:	6013      	str	r3, [r2, #0]
    d0a8:	3b01      	subs	r3, #1
    d0aa:	9303      	str	r3, [sp, #12]
    d0ac:	e7de      	b.n	d06c <_dtoa_r+0x8c>
    d0ae:	ab16      	add	r3, sp, #88	; 0x58
    d0b0:	9301      	str	r3, [sp, #4]
    d0b2:	ab17      	add	r3, sp, #92	; 0x5c
    d0b4:	9300      	str	r3, [sp, #0]
    d0b6:	4628      	mov	r0, r5
    d0b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    d0bc:	f00f fa04 	bl	1c4c8 <__d2b>
    d0c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
    d0c4:	4683      	mov	fp, r0
    d0c6:	2c00      	cmp	r4, #0
    d0c8:	d07e      	beq.n	d1c8 <_dtoa_r+0x1e8>
    d0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0cc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    d0d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    d0d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d0d8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    d0dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    d0e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    d0e4:	4b80      	ldr	r3, [pc, #512]	; (d2e8 <_dtoa_r+0x308>)
    d0e6:	2200      	movs	r2, #0
    d0e8:	f7ff f95e 	bl	c3a8 <__aeabi_dsub>
    d0ec:	a374      	add	r3, pc, #464	; (adr r3, d2c0 <_dtoa_r+0x2e0>)
    d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0f2:	f7ff fb11 	bl	c718 <__aeabi_dmul>
    d0f6:	a374      	add	r3, pc, #464	; (adr r3, d2c8 <_dtoa_r+0x2e8>)
    d0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0fc:	f7ff f956 	bl	c3ac <__adddf3>
    d100:	4606      	mov	r6, r0
    d102:	4620      	mov	r0, r4
    d104:	460f      	mov	r7, r1
    d106:	f7ff fa9d 	bl	c644 <__aeabi_i2d>
    d10a:	a371      	add	r3, pc, #452	; (adr r3, d2d0 <_dtoa_r+0x2f0>)
    d10c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d110:	f7ff fb02 	bl	c718 <__aeabi_dmul>
    d114:	4602      	mov	r2, r0
    d116:	460b      	mov	r3, r1
    d118:	4630      	mov	r0, r6
    d11a:	4639      	mov	r1, r7
    d11c:	f7ff f946 	bl	c3ac <__adddf3>
    d120:	4606      	mov	r6, r0
    d122:	460f      	mov	r7, r1
    d124:	f7ff ff22 	bl	cf6c <__aeabi_d2iz>
    d128:	2200      	movs	r2, #0
    d12a:	4682      	mov	sl, r0
    d12c:	2300      	movs	r3, #0
    d12e:	4630      	mov	r0, r6
    d130:	4639      	mov	r1, r7
    d132:	f7ff fedd 	bl	cef0 <__aeabi_dcmplt>
    d136:	b148      	cbz	r0, d14c <_dtoa_r+0x16c>
    d138:	4650      	mov	r0, sl
    d13a:	f7ff fa83 	bl	c644 <__aeabi_i2d>
    d13e:	4632      	mov	r2, r6
    d140:	463b      	mov	r3, r7
    d142:	f7ff fecb 	bl	cedc <__aeabi_dcmpeq>
    d146:	b908      	cbnz	r0, d14c <_dtoa_r+0x16c>
    d148:	f10a 3aff 	add.w	sl, sl, #4294967295
    d14c:	f1ba 0f16 	cmp.w	sl, #22
    d150:	d857      	bhi.n	d202 <_dtoa_r+0x222>
    d152:	4b66      	ldr	r3, [pc, #408]	; (d2ec <_dtoa_r+0x30c>)
    d154:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    d158:	e9d3 2300 	ldrd	r2, r3, [r3]
    d15c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d160:	f7ff fec6 	bl	cef0 <__aeabi_dcmplt>
    d164:	2800      	cmp	r0, #0
    d166:	d04e      	beq.n	d206 <_dtoa_r+0x226>
    d168:	f10a 3aff 	add.w	sl, sl, #4294967295
    d16c:	2300      	movs	r3, #0
    d16e:	930f      	str	r3, [sp, #60]	; 0x3c
    d170:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d172:	1b1c      	subs	r4, r3, r4
    d174:	1e63      	subs	r3, r4, #1
    d176:	9309      	str	r3, [sp, #36]	; 0x24
    d178:	bf45      	ittet	mi
    d17a:	f1c4 0301 	rsbmi	r3, r4, #1
    d17e:	9306      	strmi	r3, [sp, #24]
    d180:	2300      	movpl	r3, #0
    d182:	2300      	movmi	r3, #0
    d184:	bf4c      	ite	mi
    d186:	9309      	strmi	r3, [sp, #36]	; 0x24
    d188:	9306      	strpl	r3, [sp, #24]
    d18a:	f1ba 0f00 	cmp.w	sl, #0
    d18e:	db3c      	blt.n	d20a <_dtoa_r+0x22a>
    d190:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d192:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    d196:	4453      	add	r3, sl
    d198:	9309      	str	r3, [sp, #36]	; 0x24
    d19a:	2300      	movs	r3, #0
    d19c:	930a      	str	r3, [sp, #40]	; 0x28
    d19e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d1a0:	2b09      	cmp	r3, #9
    d1a2:	f200 80b5 	bhi.w	d310 <_dtoa_r+0x330>
    d1a6:	2b05      	cmp	r3, #5
    d1a8:	bfc4      	itt	gt
    d1aa:	3b04      	subgt	r3, #4
    d1ac:	9322      	strgt	r3, [sp, #136]	; 0x88
    d1ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d1b0:	f1a3 0302 	sub.w	r3, r3, #2
    d1b4:	bfcc      	ite	gt
    d1b6:	2400      	movgt	r4, #0
    d1b8:	2401      	movle	r4, #1
    d1ba:	2b03      	cmp	r3, #3
    d1bc:	f200 80b4 	bhi.w	d328 <_dtoa_r+0x348>
    d1c0:	e8df f003 	tbb	[pc, r3]
    d1c4:	a47a982d 	.word	0xa47a982d
    d1c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    d1cc:	441c      	add	r4, r3
    d1ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
    d1d2:	2b20      	cmp	r3, #32
    d1d4:	bfc3      	ittte	gt
    d1d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    d1da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    d1de:	fa09 f303 	lslgt.w	r3, r9, r3
    d1e2:	f1c3 0320 	rsble	r3, r3, #32
    d1e6:	bfc6      	itte	gt
    d1e8:	fa26 f000 	lsrgt.w	r0, r6, r0
    d1ec:	4318      	orrgt	r0, r3
    d1ee:	fa06 f003 	lslle.w	r0, r6, r3
    d1f2:	f7ff fa17 	bl	c624 <__aeabi_ui2d>
    d1f6:	2301      	movs	r3, #1
    d1f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    d1fc:	3c01      	subs	r4, #1
    d1fe:	9313      	str	r3, [sp, #76]	; 0x4c
    d200:	e770      	b.n	d0e4 <_dtoa_r+0x104>
    d202:	2301      	movs	r3, #1
    d204:	e7b3      	b.n	d16e <_dtoa_r+0x18e>
    d206:	900f      	str	r0, [sp, #60]	; 0x3c
    d208:	e7b2      	b.n	d170 <_dtoa_r+0x190>
    d20a:	9b06      	ldr	r3, [sp, #24]
    d20c:	eba3 030a 	sub.w	r3, r3, sl
    d210:	9306      	str	r3, [sp, #24]
    d212:	f1ca 0300 	rsb	r3, sl, #0
    d216:	930a      	str	r3, [sp, #40]	; 0x28
    d218:	2300      	movs	r3, #0
    d21a:	930e      	str	r3, [sp, #56]	; 0x38
    d21c:	e7bf      	b.n	d19e <_dtoa_r+0x1be>
    d21e:	2300      	movs	r3, #0
    d220:	930b      	str	r3, [sp, #44]	; 0x2c
    d222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d224:	2b00      	cmp	r3, #0
    d226:	f300 8082 	bgt.w	d32e <_dtoa_r+0x34e>
    d22a:	f04f 0901 	mov.w	r9, #1
    d22e:	f8cd 9020 	str.w	r9, [sp, #32]
    d232:	464b      	mov	r3, r9
    d234:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    d238:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    d23a:	2200      	movs	r2, #0
    d23c:	6072      	str	r2, [r6, #4]
    d23e:	2204      	movs	r2, #4
    d240:	f102 0014 	add.w	r0, r2, #20
    d244:	4298      	cmp	r0, r3
    d246:	6871      	ldr	r1, [r6, #4]
    d248:	d977      	bls.n	d33a <_dtoa_r+0x35a>
    d24a:	4628      	mov	r0, r5
    d24c:	f00e fed0 	bl	1bff0 <_Balloc>
    d250:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d252:	6030      	str	r0, [r6, #0]
    d254:	681b      	ldr	r3, [r3, #0]
    d256:	9303      	str	r3, [sp, #12]
    d258:	9b08      	ldr	r3, [sp, #32]
    d25a:	2b0e      	cmp	r3, #14
    d25c:	f200 80ee 	bhi.w	d43c <_dtoa_r+0x45c>
    d260:	2c00      	cmp	r4, #0
    d262:	f000 80eb 	beq.w	d43c <_dtoa_r+0x45c>
    d266:	f1ba 0f00 	cmp.w	sl, #0
    d26a:	dd7a      	ble.n	d362 <_dtoa_r+0x382>
    d26c:	4a1f      	ldr	r2, [pc, #124]	; (d2ec <_dtoa_r+0x30c>)
    d26e:	f00a 030f 	and.w	r3, sl, #15
    d272:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d276:	e9d3 3400 	ldrd	r3, r4, [r3]
    d27a:	f41a 7f80 	tst.w	sl, #256	; 0x100
    d27e:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    d282:	ea4f 142a 	mov.w	r4, sl, asr #4
    d286:	d05c      	beq.n	d342 <_dtoa_r+0x362>
    d288:	4b19      	ldr	r3, [pc, #100]	; (d2f0 <_dtoa_r+0x310>)
    d28a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d28e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    d292:	f7ff fb6b 	bl	c96c <__aeabi_ddiv>
    d296:	e9cd 0104 	strd	r0, r1, [sp, #16]
    d29a:	f004 040f 	and.w	r4, r4, #15
    d29e:	2703      	movs	r7, #3
    d2a0:	4e13      	ldr	r6, [pc, #76]	; (d2f0 <_dtoa_r+0x310>)
    d2a2:	2c00      	cmp	r4, #0
    d2a4:	d14f      	bne.n	d346 <_dtoa_r+0x366>
    d2a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    d2aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    d2ae:	f7ff fb5d 	bl	c96c <__aeabi_ddiv>
    d2b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    d2b6:	e06e      	b.n	d396 <_dtoa_r+0x3b6>
    d2b8:	2301      	movs	r3, #1
    d2ba:	e7b1      	b.n	d220 <_dtoa_r+0x240>
    d2bc:	f3af 8000 	nop.w
    d2c0:	636f4361 	.word	0x636f4361
    d2c4:	3fd287a7 	.word	0x3fd287a7
    d2c8:	8b60c8b3 	.word	0x8b60c8b3
    d2cc:	3fc68a28 	.word	0x3fc68a28
    d2d0:	509f79fb 	.word	0x509f79fb
    d2d4:	3fd34413 	.word	0x3fd34413
    d2d8:	7ff00000 	.word	0x7ff00000
    d2dc:	00020848 	.word	0x00020848
    d2e0:	0002083f 	.word	0x0002083f
    d2e4:	000205d9 	.word	0x000205d9
    d2e8:	3ff80000 	.word	0x3ff80000
    d2ec:	0001ca50 	.word	0x0001ca50
    d2f0:	0001ca28 	.word	0x0001ca28
    d2f4:	2300      	movs	r3, #0
    d2f6:	930b      	str	r3, [sp, #44]	; 0x2c
    d2f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d2fa:	eb0a 0903 	add.w	r9, sl, r3
    d2fe:	f109 0301 	add.w	r3, r9, #1
    d302:	2b01      	cmp	r3, #1
    d304:	9308      	str	r3, [sp, #32]
    d306:	bfb8      	it	lt
    d308:	2301      	movlt	r3, #1
    d30a:	e795      	b.n	d238 <_dtoa_r+0x258>
    d30c:	2301      	movs	r3, #1
    d30e:	e7f2      	b.n	d2f6 <_dtoa_r+0x316>
    d310:	2401      	movs	r4, #1
    d312:	2300      	movs	r3, #0
    d314:	9322      	str	r3, [sp, #136]	; 0x88
    d316:	940b      	str	r4, [sp, #44]	; 0x2c
    d318:	f04f 39ff 	mov.w	r9, #4294967295
    d31c:	2200      	movs	r2, #0
    d31e:	f8cd 9020 	str.w	r9, [sp, #32]
    d322:	2312      	movs	r3, #18
    d324:	9223      	str	r2, [sp, #140]	; 0x8c
    d326:	e787      	b.n	d238 <_dtoa_r+0x258>
    d328:	2301      	movs	r3, #1
    d32a:	930b      	str	r3, [sp, #44]	; 0x2c
    d32c:	e7f4      	b.n	d318 <_dtoa_r+0x338>
    d32e:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    d332:	f8cd 9020 	str.w	r9, [sp, #32]
    d336:	464b      	mov	r3, r9
    d338:	e77e      	b.n	d238 <_dtoa_r+0x258>
    d33a:	3101      	adds	r1, #1
    d33c:	6071      	str	r1, [r6, #4]
    d33e:	0052      	lsls	r2, r2, #1
    d340:	e77e      	b.n	d240 <_dtoa_r+0x260>
    d342:	2702      	movs	r7, #2
    d344:	e7ac      	b.n	d2a0 <_dtoa_r+0x2c0>
    d346:	07e1      	lsls	r1, r4, #31
    d348:	d508      	bpl.n	d35c <_dtoa_r+0x37c>
    d34a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d34e:	e9d6 2300 	ldrd	r2, r3, [r6]
    d352:	f7ff f9e1 	bl	c718 <__aeabi_dmul>
    d356:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    d35a:	3701      	adds	r7, #1
    d35c:	1064      	asrs	r4, r4, #1
    d35e:	3608      	adds	r6, #8
    d360:	e79f      	b.n	d2a2 <_dtoa_r+0x2c2>
    d362:	f000 80a5 	beq.w	d4b0 <_dtoa_r+0x4d0>
    d366:	f1ca 0400 	rsb	r4, sl, #0
    d36a:	4ba4      	ldr	r3, [pc, #656]	; (d5fc <_dtoa_r+0x61c>)
    d36c:	4ea4      	ldr	r6, [pc, #656]	; (d600 <_dtoa_r+0x620>)
    d36e:	f004 020f 	and.w	r2, r4, #15
    d372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d376:	e9d3 2300 	ldrd	r2, r3, [r3]
    d37a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d37e:	f7ff f9cb 	bl	c718 <__aeabi_dmul>
    d382:	e9cd 0104 	strd	r0, r1, [sp, #16]
    d386:	1124      	asrs	r4, r4, #4
    d388:	2300      	movs	r3, #0
    d38a:	2702      	movs	r7, #2
    d38c:	2c00      	cmp	r4, #0
    d38e:	f040 8084 	bne.w	d49a <_dtoa_r+0x4ba>
    d392:	2b00      	cmp	r3, #0
    d394:	d18d      	bne.n	d2b2 <_dtoa_r+0x2d2>
    d396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d398:	2b00      	cmp	r3, #0
    d39a:	f000 808b 	beq.w	d4b4 <_dtoa_r+0x4d4>
    d39e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    d3a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    d3a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d3aa:	4b96      	ldr	r3, [pc, #600]	; (d604 <_dtoa_r+0x624>)
    d3ac:	2200      	movs	r2, #0
    d3ae:	f7ff fd9f 	bl	cef0 <__aeabi_dcmplt>
    d3b2:	2800      	cmp	r0, #0
    d3b4:	d07e      	beq.n	d4b4 <_dtoa_r+0x4d4>
    d3b6:	9b08      	ldr	r3, [sp, #32]
    d3b8:	2b00      	cmp	r3, #0
    d3ba:	d07b      	beq.n	d4b4 <_dtoa_r+0x4d4>
    d3bc:	f1b9 0f00 	cmp.w	r9, #0
    d3c0:	dd38      	ble.n	d434 <_dtoa_r+0x454>
    d3c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d3c6:	4b90      	ldr	r3, [pc, #576]	; (d608 <_dtoa_r+0x628>)
    d3c8:	2200      	movs	r2, #0
    d3ca:	f7ff f9a5 	bl	c718 <__aeabi_dmul>
    d3ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
    d3d2:	f10a 38ff 	add.w	r8, sl, #4294967295
    d3d6:	3701      	adds	r7, #1
    d3d8:	464c      	mov	r4, r9
    d3da:	4638      	mov	r0, r7
    d3dc:	f7ff f932 	bl	c644 <__aeabi_i2d>
    d3e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d3e4:	f7ff f998 	bl	c718 <__aeabi_dmul>
    d3e8:	4b88      	ldr	r3, [pc, #544]	; (d60c <_dtoa_r+0x62c>)
    d3ea:	2200      	movs	r2, #0
    d3ec:	f7fe ffde 	bl	c3ac <__adddf3>
    d3f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    d3f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    d3f8:	9611      	str	r6, [sp, #68]	; 0x44
    d3fa:	2c00      	cmp	r4, #0
    d3fc:	d15d      	bne.n	d4ba <_dtoa_r+0x4da>
    d3fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    d402:	4b83      	ldr	r3, [pc, #524]	; (d610 <_dtoa_r+0x630>)
    d404:	2200      	movs	r2, #0
    d406:	f7fe ffcf 	bl	c3a8 <__aeabi_dsub>
    d40a:	4602      	mov	r2, r0
    d40c:	460b      	mov	r3, r1
    d40e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    d412:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d414:	4633      	mov	r3, r6
    d416:	f7ff fd89 	bl	cf2c <__aeabi_dcmpgt>
    d41a:	2800      	cmp	r0, #0
    d41c:	f040 8297 	bne.w	d94e <_dtoa_r+0x96e>
    d420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    d424:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d426:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    d42a:	f7ff fd61 	bl	cef0 <__aeabi_dcmplt>
    d42e:	2800      	cmp	r0, #0
    d430:	f040 828b 	bne.w	d94a <_dtoa_r+0x96a>
    d434:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    d438:	e9cd 3404 	strd	r3, r4, [sp, #16]
    d43c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d43e:	2b00      	cmp	r3, #0
    d440:	f2c0 8151 	blt.w	d6e6 <_dtoa_r+0x706>
    d444:	f1ba 0f0e 	cmp.w	sl, #14
    d448:	f300 814d 	bgt.w	d6e6 <_dtoa_r+0x706>
    d44c:	4b6b      	ldr	r3, [pc, #428]	; (d5fc <_dtoa_r+0x61c>)
    d44e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    d452:	e9d3 3400 	ldrd	r3, r4, [r3]
    d456:	e9cd 3406 	strd	r3, r4, [sp, #24]
    d45a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d45c:	2b00      	cmp	r3, #0
    d45e:	f280 80db 	bge.w	d618 <_dtoa_r+0x638>
    d462:	9b08      	ldr	r3, [sp, #32]
    d464:	2b00      	cmp	r3, #0
    d466:	f300 80d7 	bgt.w	d618 <_dtoa_r+0x638>
    d46a:	f040 826d 	bne.w	d948 <_dtoa_r+0x968>
    d46e:	4b68      	ldr	r3, [pc, #416]	; (d610 <_dtoa_r+0x630>)
    d470:	2200      	movs	r2, #0
    d472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    d476:	f7ff f94f 	bl	c718 <__aeabi_dmul>
    d47a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d47e:	f7ff fd4b 	bl	cf18 <__aeabi_dcmpge>
    d482:	9c08      	ldr	r4, [sp, #32]
    d484:	4626      	mov	r6, r4
    d486:	2800      	cmp	r0, #0
    d488:	f040 8243 	bne.w	d912 <_dtoa_r+0x932>
    d48c:	9f03      	ldr	r7, [sp, #12]
    d48e:	2331      	movs	r3, #49	; 0x31
    d490:	f807 3b01 	strb.w	r3, [r7], #1
    d494:	f10a 0a01 	add.w	sl, sl, #1
    d498:	e23f      	b.n	d91a <_dtoa_r+0x93a>
    d49a:	07e2      	lsls	r2, r4, #31
    d49c:	d505      	bpl.n	d4aa <_dtoa_r+0x4ca>
    d49e:	e9d6 2300 	ldrd	r2, r3, [r6]
    d4a2:	f7ff f939 	bl	c718 <__aeabi_dmul>
    d4a6:	3701      	adds	r7, #1
    d4a8:	2301      	movs	r3, #1
    d4aa:	1064      	asrs	r4, r4, #1
    d4ac:	3608      	adds	r6, #8
    d4ae:	e76d      	b.n	d38c <_dtoa_r+0x3ac>
    d4b0:	2702      	movs	r7, #2
    d4b2:	e770      	b.n	d396 <_dtoa_r+0x3b6>
    d4b4:	9c08      	ldr	r4, [sp, #32]
    d4b6:	46d0      	mov	r8, sl
    d4b8:	e78f      	b.n	d3da <_dtoa_r+0x3fa>
    d4ba:	9903      	ldr	r1, [sp, #12]
    d4bc:	4b4f      	ldr	r3, [pc, #316]	; (d5fc <_dtoa_r+0x61c>)
    d4be:	4421      	add	r1, r4
    d4c0:	9112      	str	r1, [sp, #72]	; 0x48
    d4c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d4c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    d4c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    d4cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    d4d0:	2900      	cmp	r1, #0
    d4d2:	d046      	beq.n	d562 <_dtoa_r+0x582>
    d4d4:	494f      	ldr	r1, [pc, #316]	; (d614 <_dtoa_r+0x634>)
    d4d6:	2000      	movs	r0, #0
    d4d8:	f7ff fa48 	bl	c96c <__aeabi_ddiv>
    d4dc:	463b      	mov	r3, r7
    d4de:	4632      	mov	r2, r6
    d4e0:	f7fe ff62 	bl	c3a8 <__aeabi_dsub>
    d4e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    d4e8:	9f03      	ldr	r7, [sp, #12]
    d4ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    d4ee:	f7ff fd3d 	bl	cf6c <__aeabi_d2iz>
    d4f2:	4604      	mov	r4, r0
    d4f4:	f7ff f8a6 	bl	c644 <__aeabi_i2d>
    d4f8:	4602      	mov	r2, r0
    d4fa:	460b      	mov	r3, r1
    d4fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    d500:	f7fe ff52 	bl	c3a8 <__aeabi_dsub>
    d504:	3430      	adds	r4, #48	; 0x30
    d506:	4602      	mov	r2, r0
    d508:	460b      	mov	r3, r1
    d50a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    d50e:	f807 4b01 	strb.w	r4, [r7], #1
    d512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    d516:	f7ff fceb 	bl	cef0 <__aeabi_dcmplt>
    d51a:	2800      	cmp	r0, #0
    d51c:	d165      	bne.n	d5ea <_dtoa_r+0x60a>
    d51e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d522:	4938      	ldr	r1, [pc, #224]	; (d604 <_dtoa_r+0x624>)
    d524:	2000      	movs	r0, #0
    d526:	f7fe ff3f 	bl	c3a8 <__aeabi_dsub>
    d52a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    d52e:	f7ff fcdf 	bl	cef0 <__aeabi_dcmplt>
    d532:	2800      	cmp	r0, #0
    d534:	f040 80b6 	bne.w	d6a4 <_dtoa_r+0x6c4>
    d538:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d53a:	429f      	cmp	r7, r3
    d53c:	f43f af7a 	beq.w	d434 <_dtoa_r+0x454>
    d540:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d544:	4b30      	ldr	r3, [pc, #192]	; (d608 <_dtoa_r+0x628>)
    d546:	2200      	movs	r2, #0
    d548:	f7ff f8e6 	bl	c718 <__aeabi_dmul>
    d54c:	4b2e      	ldr	r3, [pc, #184]	; (d608 <_dtoa_r+0x628>)
    d54e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    d552:	2200      	movs	r2, #0
    d554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    d558:	f7ff f8de 	bl	c718 <__aeabi_dmul>
    d55c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    d560:	e7c3      	b.n	d4ea <_dtoa_r+0x50a>
    d562:	4630      	mov	r0, r6
    d564:	4639      	mov	r1, r7
    d566:	f7ff f8d7 	bl	c718 <__aeabi_dmul>
    d56a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    d56e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d570:	9c03      	ldr	r4, [sp, #12]
    d572:	9314      	str	r3, [sp, #80]	; 0x50
    d574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    d578:	f7ff fcf8 	bl	cf6c <__aeabi_d2iz>
    d57c:	9015      	str	r0, [sp, #84]	; 0x54
    d57e:	f7ff f861 	bl	c644 <__aeabi_i2d>
    d582:	4602      	mov	r2, r0
    d584:	460b      	mov	r3, r1
    d586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    d58a:	f7fe ff0d 	bl	c3a8 <__aeabi_dsub>
    d58e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d590:	3330      	adds	r3, #48	; 0x30
    d592:	f804 3b01 	strb.w	r3, [r4], #1
    d596:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d598:	429c      	cmp	r4, r3
    d59a:	4606      	mov	r6, r0
    d59c:	460f      	mov	r7, r1
    d59e:	f04f 0200 	mov.w	r2, #0
    d5a2:	d124      	bne.n	d5ee <_dtoa_r+0x60e>
    d5a4:	4b1b      	ldr	r3, [pc, #108]	; (d614 <_dtoa_r+0x634>)
    d5a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d5aa:	f7fe feff 	bl	c3ac <__adddf3>
    d5ae:	4602      	mov	r2, r0
    d5b0:	460b      	mov	r3, r1
    d5b2:	4630      	mov	r0, r6
    d5b4:	4639      	mov	r1, r7
    d5b6:	f7ff fcb9 	bl	cf2c <__aeabi_dcmpgt>
    d5ba:	2800      	cmp	r0, #0
    d5bc:	d171      	bne.n	d6a2 <_dtoa_r+0x6c2>
    d5be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    d5c2:	4914      	ldr	r1, [pc, #80]	; (d614 <_dtoa_r+0x634>)
    d5c4:	2000      	movs	r0, #0
    d5c6:	f7fe feef 	bl	c3a8 <__aeabi_dsub>
    d5ca:	4602      	mov	r2, r0
    d5cc:	460b      	mov	r3, r1
    d5ce:	4630      	mov	r0, r6
    d5d0:	4639      	mov	r1, r7
    d5d2:	f7ff fc8d 	bl	cef0 <__aeabi_dcmplt>
    d5d6:	2800      	cmp	r0, #0
    d5d8:	f43f af2c 	beq.w	d434 <_dtoa_r+0x454>
    d5dc:	9f14      	ldr	r7, [sp, #80]	; 0x50
    d5de:	1e7b      	subs	r3, r7, #1
    d5e0:	9314      	str	r3, [sp, #80]	; 0x50
    d5e2:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    d5e6:	2b30      	cmp	r3, #48	; 0x30
    d5e8:	d0f8      	beq.n	d5dc <_dtoa_r+0x5fc>
    d5ea:	46c2      	mov	sl, r8
    d5ec:	e049      	b.n	d682 <_dtoa_r+0x6a2>
    d5ee:	4b06      	ldr	r3, [pc, #24]	; (d608 <_dtoa_r+0x628>)
    d5f0:	f7ff f892 	bl	c718 <__aeabi_dmul>
    d5f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    d5f8:	e7bc      	b.n	d574 <_dtoa_r+0x594>
    d5fa:	bf00      	nop
    d5fc:	0001ca50 	.word	0x0001ca50
    d600:	0001ca28 	.word	0x0001ca28
    d604:	3ff00000 	.word	0x3ff00000
    d608:	40240000 	.word	0x40240000
    d60c:	401c0000 	.word	0x401c0000
    d610:	40140000 	.word	0x40140000
    d614:	3fe00000 	.word	0x3fe00000
    d618:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    d61c:	9f03      	ldr	r7, [sp, #12]
    d61e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d622:	4640      	mov	r0, r8
    d624:	4649      	mov	r1, r9
    d626:	f7ff f9a1 	bl	c96c <__aeabi_ddiv>
    d62a:	f7ff fc9f 	bl	cf6c <__aeabi_d2iz>
    d62e:	4604      	mov	r4, r0
    d630:	f7ff f808 	bl	c644 <__aeabi_i2d>
    d634:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d638:	f7ff f86e 	bl	c718 <__aeabi_dmul>
    d63c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    d640:	460b      	mov	r3, r1
    d642:	4602      	mov	r2, r0
    d644:	4649      	mov	r1, r9
    d646:	4640      	mov	r0, r8
    d648:	f7fe feae 	bl	c3a8 <__aeabi_dsub>
    d64c:	f807 6b01 	strb.w	r6, [r7], #1
    d650:	9e03      	ldr	r6, [sp, #12]
    d652:	9b08      	ldr	r3, [sp, #32]
    d654:	1bbe      	subs	r6, r7, r6
    d656:	42b3      	cmp	r3, r6
    d658:	d138      	bne.n	d6cc <_dtoa_r+0x6ec>
    d65a:	4602      	mov	r2, r0
    d65c:	460b      	mov	r3, r1
    d65e:	f7fe fea5 	bl	c3ac <__adddf3>
    d662:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d666:	4680      	mov	r8, r0
    d668:	4689      	mov	r9, r1
    d66a:	f7ff fc5f 	bl	cf2c <__aeabi_dcmpgt>
    d66e:	bb58      	cbnz	r0, d6c8 <_dtoa_r+0x6e8>
    d670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d674:	4640      	mov	r0, r8
    d676:	4649      	mov	r1, r9
    d678:	f7ff fc30 	bl	cedc <__aeabi_dcmpeq>
    d67c:	b108      	cbz	r0, d682 <_dtoa_r+0x6a2>
    d67e:	07e1      	lsls	r1, r4, #31
    d680:	d422      	bmi.n	d6c8 <_dtoa_r+0x6e8>
    d682:	4628      	mov	r0, r5
    d684:	4659      	mov	r1, fp
    d686:	f00e fce7 	bl	1c058 <_Bfree>
    d68a:	2300      	movs	r3, #0
    d68c:	703b      	strb	r3, [r7, #0]
    d68e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    d690:	f10a 0001 	add.w	r0, sl, #1
    d694:	6018      	str	r0, [r3, #0]
    d696:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d698:	2b00      	cmp	r3, #0
    d69a:	f43f ace7 	beq.w	d06c <_dtoa_r+0x8c>
    d69e:	601f      	str	r7, [r3, #0]
    d6a0:	e4e4      	b.n	d06c <_dtoa_r+0x8c>
    d6a2:	4627      	mov	r7, r4
    d6a4:	463b      	mov	r3, r7
    d6a6:	461f      	mov	r7, r3
    d6a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    d6ac:	2a39      	cmp	r2, #57	; 0x39
    d6ae:	d107      	bne.n	d6c0 <_dtoa_r+0x6e0>
    d6b0:	9a03      	ldr	r2, [sp, #12]
    d6b2:	429a      	cmp	r2, r3
    d6b4:	d1f7      	bne.n	d6a6 <_dtoa_r+0x6c6>
    d6b6:	9903      	ldr	r1, [sp, #12]
    d6b8:	2230      	movs	r2, #48	; 0x30
    d6ba:	f108 0801 	add.w	r8, r8, #1
    d6be:	700a      	strb	r2, [r1, #0]
    d6c0:	781a      	ldrb	r2, [r3, #0]
    d6c2:	3201      	adds	r2, #1
    d6c4:	701a      	strb	r2, [r3, #0]
    d6c6:	e790      	b.n	d5ea <_dtoa_r+0x60a>
    d6c8:	46d0      	mov	r8, sl
    d6ca:	e7eb      	b.n	d6a4 <_dtoa_r+0x6c4>
    d6cc:	4ba1      	ldr	r3, [pc, #644]	; (d954 <_dtoa_r+0x974>)
    d6ce:	2200      	movs	r2, #0
    d6d0:	f7ff f822 	bl	c718 <__aeabi_dmul>
    d6d4:	2200      	movs	r2, #0
    d6d6:	2300      	movs	r3, #0
    d6d8:	4680      	mov	r8, r0
    d6da:	4689      	mov	r9, r1
    d6dc:	f7ff fbfe 	bl	cedc <__aeabi_dcmpeq>
    d6e0:	2800      	cmp	r0, #0
    d6e2:	d09c      	beq.n	d61e <_dtoa_r+0x63e>
    d6e4:	e7cd      	b.n	d682 <_dtoa_r+0x6a2>
    d6e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d6e8:	2a00      	cmp	r2, #0
    d6ea:	f000 80cd 	beq.w	d888 <_dtoa_r+0x8a8>
    d6ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
    d6f0:	2a01      	cmp	r2, #1
    d6f2:	f300 80af 	bgt.w	d854 <_dtoa_r+0x874>
    d6f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d6f8:	2a00      	cmp	r2, #0
    d6fa:	f000 80a7 	beq.w	d84c <_dtoa_r+0x86c>
    d6fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
    d702:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d704:	9f06      	ldr	r7, [sp, #24]
    d706:	9a06      	ldr	r2, [sp, #24]
    d708:	441a      	add	r2, r3
    d70a:	9206      	str	r2, [sp, #24]
    d70c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d70e:	2101      	movs	r1, #1
    d710:	441a      	add	r2, r3
    d712:	4628      	mov	r0, r5
    d714:	9209      	str	r2, [sp, #36]	; 0x24
    d716:	f00e fd42 	bl	1c19e <__i2b>
    d71a:	4606      	mov	r6, r0
    d71c:	2f00      	cmp	r7, #0
    d71e:	dd0c      	ble.n	d73a <_dtoa_r+0x75a>
    d720:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d722:	2b00      	cmp	r3, #0
    d724:	dd09      	ble.n	d73a <_dtoa_r+0x75a>
    d726:	42bb      	cmp	r3, r7
    d728:	9a06      	ldr	r2, [sp, #24]
    d72a:	bfa8      	it	ge
    d72c:	463b      	movge	r3, r7
    d72e:	1ad2      	subs	r2, r2, r3
    d730:	9206      	str	r2, [sp, #24]
    d732:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d734:	1aff      	subs	r7, r7, r3
    d736:	1ad3      	subs	r3, r2, r3
    d738:	9309      	str	r3, [sp, #36]	; 0x24
    d73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d73c:	b1f3      	cbz	r3, d77c <_dtoa_r+0x79c>
    d73e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d740:	2b00      	cmp	r3, #0
    d742:	f000 80a5 	beq.w	d890 <_dtoa_r+0x8b0>
    d746:	2c00      	cmp	r4, #0
    d748:	dd10      	ble.n	d76c <_dtoa_r+0x78c>
    d74a:	4631      	mov	r1, r6
    d74c:	4622      	mov	r2, r4
    d74e:	4628      	mov	r0, r5
    d750:	f00c fe50 	bl	1a3f4 <__pow5mult>
    d754:	465a      	mov	r2, fp
    d756:	4601      	mov	r1, r0
    d758:	4606      	mov	r6, r0
    d75a:	4628      	mov	r0, r5
    d75c:	f00e fd28 	bl	1c1b0 <__multiply>
    d760:	4659      	mov	r1, fp
    d762:	4680      	mov	r8, r0
    d764:	4628      	mov	r0, r5
    d766:	f00e fc77 	bl	1c058 <_Bfree>
    d76a:	46c3      	mov	fp, r8
    d76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d76e:	1b1a      	subs	r2, r3, r4
    d770:	d004      	beq.n	d77c <_dtoa_r+0x79c>
    d772:	4659      	mov	r1, fp
    d774:	4628      	mov	r0, r5
    d776:	f00c fe3d 	bl	1a3f4 <__pow5mult>
    d77a:	4683      	mov	fp, r0
    d77c:	2101      	movs	r1, #1
    d77e:	4628      	mov	r0, r5
    d780:	f00e fd0d 	bl	1c19e <__i2b>
    d784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d786:	2b00      	cmp	r3, #0
    d788:	4604      	mov	r4, r0
    d78a:	f340 8083 	ble.w	d894 <_dtoa_r+0x8b4>
    d78e:	461a      	mov	r2, r3
    d790:	4601      	mov	r1, r0
    d792:	4628      	mov	r0, r5
    d794:	f00c fe2e 	bl	1a3f4 <__pow5mult>
    d798:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d79a:	2b01      	cmp	r3, #1
    d79c:	4604      	mov	r4, r0
    d79e:	dd7c      	ble.n	d89a <_dtoa_r+0x8ba>
    d7a0:	f04f 0800 	mov.w	r8, #0
    d7a4:	6923      	ldr	r3, [r4, #16]
    d7a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d7aa:	6918      	ldr	r0, [r3, #16]
    d7ac:	f00e fca9 	bl	1c102 <__hi0bits>
    d7b0:	f1c0 0020 	rsb	r0, r0, #32
    d7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d7b6:	4418      	add	r0, r3
    d7b8:	f010 001f 	ands.w	r0, r0, #31
    d7bc:	f000 808e 	beq.w	d8dc <_dtoa_r+0x8fc>
    d7c0:	f1c0 0320 	rsb	r3, r0, #32
    d7c4:	2b04      	cmp	r3, #4
    d7c6:	f340 8087 	ble.w	d8d8 <_dtoa_r+0x8f8>
    d7ca:	f1c0 001c 	rsb	r0, r0, #28
    d7ce:	9b06      	ldr	r3, [sp, #24]
    d7d0:	4403      	add	r3, r0
    d7d2:	9306      	str	r3, [sp, #24]
    d7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d7d6:	4403      	add	r3, r0
    d7d8:	4407      	add	r7, r0
    d7da:	9309      	str	r3, [sp, #36]	; 0x24
    d7dc:	9b06      	ldr	r3, [sp, #24]
    d7de:	2b00      	cmp	r3, #0
    d7e0:	dd05      	ble.n	d7ee <_dtoa_r+0x80e>
    d7e2:	4659      	mov	r1, fp
    d7e4:	461a      	mov	r2, r3
    d7e6:	4628      	mov	r0, r5
    d7e8:	f00e fd7e 	bl	1c2e8 <__lshift>
    d7ec:	4683      	mov	fp, r0
    d7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d7f0:	2b00      	cmp	r3, #0
    d7f2:	dd05      	ble.n	d800 <_dtoa_r+0x820>
    d7f4:	4621      	mov	r1, r4
    d7f6:	461a      	mov	r2, r3
    d7f8:	4628      	mov	r0, r5
    d7fa:	f00e fd75 	bl	1c2e8 <__lshift>
    d7fe:	4604      	mov	r4, r0
    d800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d802:	2b00      	cmp	r3, #0
    d804:	d06c      	beq.n	d8e0 <_dtoa_r+0x900>
    d806:	4621      	mov	r1, r4
    d808:	4658      	mov	r0, fp
    d80a:	f00e fdcc 	bl	1c3a6 <__mcmp>
    d80e:	2800      	cmp	r0, #0
    d810:	da66      	bge.n	d8e0 <_dtoa_r+0x900>
    d812:	2300      	movs	r3, #0
    d814:	4659      	mov	r1, fp
    d816:	220a      	movs	r2, #10
    d818:	4628      	mov	r0, r5
    d81a:	f00e fc34 	bl	1c086 <__multadd>
    d81e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d820:	f10a 3aff 	add.w	sl, sl, #4294967295
    d824:	4683      	mov	fp, r0
    d826:	2b00      	cmp	r3, #0
    d828:	f000 818b 	beq.w	db42 <_dtoa_r+0xb62>
    d82c:	4631      	mov	r1, r6
    d82e:	2300      	movs	r3, #0
    d830:	220a      	movs	r2, #10
    d832:	4628      	mov	r0, r5
    d834:	f00e fc27 	bl	1c086 <__multadd>
    d838:	f1b9 0f00 	cmp.w	r9, #0
    d83c:	4606      	mov	r6, r0
    d83e:	f300 8091 	bgt.w	d964 <_dtoa_r+0x984>
    d842:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d844:	2b02      	cmp	r3, #2
    d846:	f340 808d 	ble.w	d964 <_dtoa_r+0x984>
    d84a:	e051      	b.n	d8f0 <_dtoa_r+0x910>
    d84c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d84e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    d852:	e756      	b.n	d702 <_dtoa_r+0x722>
    d854:	9b08      	ldr	r3, [sp, #32]
    d856:	1e5c      	subs	r4, r3, #1
    d858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d85a:	42a3      	cmp	r3, r4
    d85c:	bfbf      	itttt	lt
    d85e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    d860:	940a      	strlt	r4, [sp, #40]	; 0x28
    d862:	1ae2      	sublt	r2, r4, r3
    d864:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    d866:	bfb6      	itet	lt
    d868:	189b      	addlt	r3, r3, r2
    d86a:	1b1c      	subge	r4, r3, r4
    d86c:	930e      	strlt	r3, [sp, #56]	; 0x38
    d86e:	9b08      	ldr	r3, [sp, #32]
    d870:	bfb8      	it	lt
    d872:	2400      	movlt	r4, #0
    d874:	2b00      	cmp	r3, #0
    d876:	bfb9      	ittee	lt
    d878:	9b06      	ldrlt	r3, [sp, #24]
    d87a:	9a08      	ldrlt	r2, [sp, #32]
    d87c:	9f06      	ldrge	r7, [sp, #24]
    d87e:	9b08      	ldrge	r3, [sp, #32]
    d880:	bfbc      	itt	lt
    d882:	1a9f      	sublt	r7, r3, r2
    d884:	2300      	movlt	r3, #0
    d886:	e73e      	b.n	d706 <_dtoa_r+0x726>
    d888:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d88a:	9f06      	ldr	r7, [sp, #24]
    d88c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d88e:	e745      	b.n	d71c <_dtoa_r+0x73c>
    d890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d892:	e76e      	b.n	d772 <_dtoa_r+0x792>
    d894:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d896:	2b01      	cmp	r3, #1
    d898:	dc19      	bgt.n	d8ce <_dtoa_r+0x8ee>
    d89a:	9b04      	ldr	r3, [sp, #16]
    d89c:	b9bb      	cbnz	r3, d8ce <_dtoa_r+0x8ee>
    d89e:	9b05      	ldr	r3, [sp, #20]
    d8a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    d8a4:	b99b      	cbnz	r3, d8ce <_dtoa_r+0x8ee>
    d8a6:	9b05      	ldr	r3, [sp, #20]
    d8a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    d8ac:	0d1b      	lsrs	r3, r3, #20
    d8ae:	051b      	lsls	r3, r3, #20
    d8b0:	b183      	cbz	r3, d8d4 <_dtoa_r+0x8f4>
    d8b2:	9b06      	ldr	r3, [sp, #24]
    d8b4:	3301      	adds	r3, #1
    d8b6:	9306      	str	r3, [sp, #24]
    d8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d8ba:	3301      	adds	r3, #1
    d8bc:	9309      	str	r3, [sp, #36]	; 0x24
    d8be:	f04f 0801 	mov.w	r8, #1
    d8c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d8c4:	2b00      	cmp	r3, #0
    d8c6:	f47f af6d 	bne.w	d7a4 <_dtoa_r+0x7c4>
    d8ca:	2001      	movs	r0, #1
    d8cc:	e772      	b.n	d7b4 <_dtoa_r+0x7d4>
    d8ce:	f04f 0800 	mov.w	r8, #0
    d8d2:	e7f6      	b.n	d8c2 <_dtoa_r+0x8e2>
    d8d4:	4698      	mov	r8, r3
    d8d6:	e7f4      	b.n	d8c2 <_dtoa_r+0x8e2>
    d8d8:	d080      	beq.n	d7dc <_dtoa_r+0x7fc>
    d8da:	4618      	mov	r0, r3
    d8dc:	301c      	adds	r0, #28
    d8de:	e776      	b.n	d7ce <_dtoa_r+0x7ee>
    d8e0:	9b08      	ldr	r3, [sp, #32]
    d8e2:	2b00      	cmp	r3, #0
    d8e4:	dc38      	bgt.n	d958 <_dtoa_r+0x978>
    d8e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d8e8:	2b02      	cmp	r3, #2
    d8ea:	dd35      	ble.n	d958 <_dtoa_r+0x978>
    d8ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
    d8f0:	f1b9 0f00 	cmp.w	r9, #0
    d8f4:	d10d      	bne.n	d912 <_dtoa_r+0x932>
    d8f6:	4621      	mov	r1, r4
    d8f8:	464b      	mov	r3, r9
    d8fa:	2205      	movs	r2, #5
    d8fc:	4628      	mov	r0, r5
    d8fe:	f00e fbc2 	bl	1c086 <__multadd>
    d902:	4601      	mov	r1, r0
    d904:	4604      	mov	r4, r0
    d906:	4658      	mov	r0, fp
    d908:	f00e fd4d 	bl	1c3a6 <__mcmp>
    d90c:	2800      	cmp	r0, #0
    d90e:	f73f adbd 	bgt.w	d48c <_dtoa_r+0x4ac>
    d912:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d914:	9f03      	ldr	r7, [sp, #12]
    d916:	ea6f 0a03 	mvn.w	sl, r3
    d91a:	f04f 0800 	mov.w	r8, #0
    d91e:	4621      	mov	r1, r4
    d920:	4628      	mov	r0, r5
    d922:	f00e fb99 	bl	1c058 <_Bfree>
    d926:	2e00      	cmp	r6, #0
    d928:	f43f aeab 	beq.w	d682 <_dtoa_r+0x6a2>
    d92c:	f1b8 0f00 	cmp.w	r8, #0
    d930:	d005      	beq.n	d93e <_dtoa_r+0x95e>
    d932:	45b0      	cmp	r8, r6
    d934:	d003      	beq.n	d93e <_dtoa_r+0x95e>
    d936:	4641      	mov	r1, r8
    d938:	4628      	mov	r0, r5
    d93a:	f00e fb8d 	bl	1c058 <_Bfree>
    d93e:	4631      	mov	r1, r6
    d940:	4628      	mov	r0, r5
    d942:	f00e fb89 	bl	1c058 <_Bfree>
    d946:	e69c      	b.n	d682 <_dtoa_r+0x6a2>
    d948:	2400      	movs	r4, #0
    d94a:	4626      	mov	r6, r4
    d94c:	e7e1      	b.n	d912 <_dtoa_r+0x932>
    d94e:	46c2      	mov	sl, r8
    d950:	4626      	mov	r6, r4
    d952:	e59b      	b.n	d48c <_dtoa_r+0x4ac>
    d954:	40240000 	.word	0x40240000
    d958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d95a:	f8dd 9020 	ldr.w	r9, [sp, #32]
    d95e:	2b00      	cmp	r3, #0
    d960:	f000 80f6 	beq.w	db50 <_dtoa_r+0xb70>
    d964:	2f00      	cmp	r7, #0
    d966:	dd05      	ble.n	d974 <_dtoa_r+0x994>
    d968:	4631      	mov	r1, r6
    d96a:	463a      	mov	r2, r7
    d96c:	4628      	mov	r0, r5
    d96e:	f00e fcbb 	bl	1c2e8 <__lshift>
    d972:	4606      	mov	r6, r0
    d974:	f1b8 0f00 	cmp.w	r8, #0
    d978:	d055      	beq.n	da26 <_dtoa_r+0xa46>
    d97a:	6871      	ldr	r1, [r6, #4]
    d97c:	4628      	mov	r0, r5
    d97e:	f00e fb37 	bl	1bff0 <_Balloc>
    d982:	6932      	ldr	r2, [r6, #16]
    d984:	3202      	adds	r2, #2
    d986:	4607      	mov	r7, r0
    d988:	0092      	lsls	r2, r2, #2
    d98a:	f106 010c 	add.w	r1, r6, #12
    d98e:	300c      	adds	r0, #12
    d990:	f00e f8d3 	bl	1bb3a <memcpy>
    d994:	2201      	movs	r2, #1
    d996:	4639      	mov	r1, r7
    d998:	4628      	mov	r0, r5
    d99a:	f00e fca5 	bl	1c2e8 <__lshift>
    d99e:	9b03      	ldr	r3, [sp, #12]
    d9a0:	3301      	adds	r3, #1
    d9a2:	9308      	str	r3, [sp, #32]
    d9a4:	9b03      	ldr	r3, [sp, #12]
    d9a6:	444b      	add	r3, r9
    d9a8:	930a      	str	r3, [sp, #40]	; 0x28
    d9aa:	9b04      	ldr	r3, [sp, #16]
    d9ac:	f003 0301 	and.w	r3, r3, #1
    d9b0:	46b0      	mov	r8, r6
    d9b2:	9309      	str	r3, [sp, #36]	; 0x24
    d9b4:	4606      	mov	r6, r0
    d9b6:	9b08      	ldr	r3, [sp, #32]
    d9b8:	4621      	mov	r1, r4
    d9ba:	3b01      	subs	r3, #1
    d9bc:	4658      	mov	r0, fp
    d9be:	9304      	str	r3, [sp, #16]
    d9c0:	f00e fa32 	bl	1be28 <quorem>
    d9c4:	4603      	mov	r3, r0
    d9c6:	3330      	adds	r3, #48	; 0x30
    d9c8:	9006      	str	r0, [sp, #24]
    d9ca:	4641      	mov	r1, r8
    d9cc:	4658      	mov	r0, fp
    d9ce:	930b      	str	r3, [sp, #44]	; 0x2c
    d9d0:	f00e fce9 	bl	1c3a6 <__mcmp>
    d9d4:	4632      	mov	r2, r6
    d9d6:	4681      	mov	r9, r0
    d9d8:	4621      	mov	r1, r4
    d9da:	4628      	mov	r0, r5
    d9dc:	f00e fcfe 	bl	1c3dc <__mdiff>
    d9e0:	68c2      	ldr	r2, [r0, #12]
    d9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d9e4:	4607      	mov	r7, r0
    d9e6:	bb02      	cbnz	r2, da2a <_dtoa_r+0xa4a>
    d9e8:	4601      	mov	r1, r0
    d9ea:	4658      	mov	r0, fp
    d9ec:	f00e fcdb 	bl	1c3a6 <__mcmp>
    d9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d9f2:	4602      	mov	r2, r0
    d9f4:	4639      	mov	r1, r7
    d9f6:	4628      	mov	r0, r5
    d9f8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    d9fc:	f00e fb2c 	bl	1c058 <_Bfree>
    da00:	9b22      	ldr	r3, [sp, #136]	; 0x88
    da02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    da04:	9f08      	ldr	r7, [sp, #32]
    da06:	ea43 0102 	orr.w	r1, r3, r2
    da0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da0c:	430b      	orrs	r3, r1
    da0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    da10:	d10d      	bne.n	da2e <_dtoa_r+0xa4e>
    da12:	2b39      	cmp	r3, #57	; 0x39
    da14:	d029      	beq.n	da6a <_dtoa_r+0xa8a>
    da16:	f1b9 0f00 	cmp.w	r9, #0
    da1a:	dd01      	ble.n	da20 <_dtoa_r+0xa40>
    da1c:	9b06      	ldr	r3, [sp, #24]
    da1e:	3331      	adds	r3, #49	; 0x31
    da20:	9a04      	ldr	r2, [sp, #16]
    da22:	7013      	strb	r3, [r2, #0]
    da24:	e77b      	b.n	d91e <_dtoa_r+0x93e>
    da26:	4630      	mov	r0, r6
    da28:	e7b9      	b.n	d99e <_dtoa_r+0x9be>
    da2a:	2201      	movs	r2, #1
    da2c:	e7e2      	b.n	d9f4 <_dtoa_r+0xa14>
    da2e:	f1b9 0f00 	cmp.w	r9, #0
    da32:	db06      	blt.n	da42 <_dtoa_r+0xa62>
    da34:	9922      	ldr	r1, [sp, #136]	; 0x88
    da36:	ea41 0909 	orr.w	r9, r1, r9
    da3a:	9909      	ldr	r1, [sp, #36]	; 0x24
    da3c:	ea59 0101 	orrs.w	r1, r9, r1
    da40:	d120      	bne.n	da84 <_dtoa_r+0xaa4>
    da42:	2a00      	cmp	r2, #0
    da44:	ddec      	ble.n	da20 <_dtoa_r+0xa40>
    da46:	4659      	mov	r1, fp
    da48:	2201      	movs	r2, #1
    da4a:	4628      	mov	r0, r5
    da4c:	9308      	str	r3, [sp, #32]
    da4e:	f00e fc4b 	bl	1c2e8 <__lshift>
    da52:	4621      	mov	r1, r4
    da54:	4683      	mov	fp, r0
    da56:	f00e fca6 	bl	1c3a6 <__mcmp>
    da5a:	2800      	cmp	r0, #0
    da5c:	9b08      	ldr	r3, [sp, #32]
    da5e:	dc02      	bgt.n	da66 <_dtoa_r+0xa86>
    da60:	d1de      	bne.n	da20 <_dtoa_r+0xa40>
    da62:	07da      	lsls	r2, r3, #31
    da64:	d5dc      	bpl.n	da20 <_dtoa_r+0xa40>
    da66:	2b39      	cmp	r3, #57	; 0x39
    da68:	d1d8      	bne.n	da1c <_dtoa_r+0xa3c>
    da6a:	9a04      	ldr	r2, [sp, #16]
    da6c:	2339      	movs	r3, #57	; 0x39
    da6e:	7013      	strb	r3, [r2, #0]
    da70:	463b      	mov	r3, r7
    da72:	461f      	mov	r7, r3
    da74:	3b01      	subs	r3, #1
    da76:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    da7a:	2a39      	cmp	r2, #57	; 0x39
    da7c:	d050      	beq.n	db20 <_dtoa_r+0xb40>
    da7e:	3201      	adds	r2, #1
    da80:	701a      	strb	r2, [r3, #0]
    da82:	e74c      	b.n	d91e <_dtoa_r+0x93e>
    da84:	2a00      	cmp	r2, #0
    da86:	dd03      	ble.n	da90 <_dtoa_r+0xab0>
    da88:	2b39      	cmp	r3, #57	; 0x39
    da8a:	d0ee      	beq.n	da6a <_dtoa_r+0xa8a>
    da8c:	3301      	adds	r3, #1
    da8e:	e7c7      	b.n	da20 <_dtoa_r+0xa40>
    da90:	9a08      	ldr	r2, [sp, #32]
    da92:	990a      	ldr	r1, [sp, #40]	; 0x28
    da94:	f802 3c01 	strb.w	r3, [r2, #-1]
    da98:	428a      	cmp	r2, r1
    da9a:	d02a      	beq.n	daf2 <_dtoa_r+0xb12>
    da9c:	4659      	mov	r1, fp
    da9e:	2300      	movs	r3, #0
    daa0:	220a      	movs	r2, #10
    daa2:	4628      	mov	r0, r5
    daa4:	f00e faef 	bl	1c086 <__multadd>
    daa8:	45b0      	cmp	r8, r6
    daaa:	4683      	mov	fp, r0
    daac:	f04f 0300 	mov.w	r3, #0
    dab0:	f04f 020a 	mov.w	r2, #10
    dab4:	4641      	mov	r1, r8
    dab6:	4628      	mov	r0, r5
    dab8:	d107      	bne.n	daca <_dtoa_r+0xaea>
    daba:	f00e fae4 	bl	1c086 <__multadd>
    dabe:	4680      	mov	r8, r0
    dac0:	4606      	mov	r6, r0
    dac2:	9b08      	ldr	r3, [sp, #32]
    dac4:	3301      	adds	r3, #1
    dac6:	9308      	str	r3, [sp, #32]
    dac8:	e775      	b.n	d9b6 <_dtoa_r+0x9d6>
    daca:	f00e fadc 	bl	1c086 <__multadd>
    dace:	4631      	mov	r1, r6
    dad0:	4680      	mov	r8, r0
    dad2:	2300      	movs	r3, #0
    dad4:	220a      	movs	r2, #10
    dad6:	4628      	mov	r0, r5
    dad8:	f00e fad5 	bl	1c086 <__multadd>
    dadc:	4606      	mov	r6, r0
    dade:	e7f0      	b.n	dac2 <_dtoa_r+0xae2>
    dae0:	f1b9 0f00 	cmp.w	r9, #0
    dae4:	9a03      	ldr	r2, [sp, #12]
    dae6:	bfcc      	ite	gt
    dae8:	464f      	movgt	r7, r9
    daea:	2701      	movle	r7, #1
    daec:	4417      	add	r7, r2
    daee:	f04f 0800 	mov.w	r8, #0
    daf2:	4659      	mov	r1, fp
    daf4:	2201      	movs	r2, #1
    daf6:	4628      	mov	r0, r5
    daf8:	9308      	str	r3, [sp, #32]
    dafa:	f00e fbf5 	bl	1c2e8 <__lshift>
    dafe:	4621      	mov	r1, r4
    db00:	4683      	mov	fp, r0
    db02:	f00e fc50 	bl	1c3a6 <__mcmp>
    db06:	2800      	cmp	r0, #0
    db08:	dcb2      	bgt.n	da70 <_dtoa_r+0xa90>
    db0a:	d102      	bne.n	db12 <_dtoa_r+0xb32>
    db0c:	9b08      	ldr	r3, [sp, #32]
    db0e:	07db      	lsls	r3, r3, #31
    db10:	d4ae      	bmi.n	da70 <_dtoa_r+0xa90>
    db12:	463b      	mov	r3, r7
    db14:	461f      	mov	r7, r3
    db16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    db1a:	2a30      	cmp	r2, #48	; 0x30
    db1c:	d0fa      	beq.n	db14 <_dtoa_r+0xb34>
    db1e:	e6fe      	b.n	d91e <_dtoa_r+0x93e>
    db20:	9a03      	ldr	r2, [sp, #12]
    db22:	429a      	cmp	r2, r3
    db24:	d1a5      	bne.n	da72 <_dtoa_r+0xa92>
    db26:	f10a 0a01 	add.w	sl, sl, #1
    db2a:	2331      	movs	r3, #49	; 0x31
    db2c:	e779      	b.n	da22 <_dtoa_r+0xa42>
    db2e:	4b13      	ldr	r3, [pc, #76]	; (db7c <_dtoa_r+0xb9c>)
    db30:	f7ff babb 	b.w	d0aa <_dtoa_r+0xca>
    db34:	9b26      	ldr	r3, [sp, #152]	; 0x98
    db36:	2b00      	cmp	r3, #0
    db38:	f47f aa93 	bne.w	d062 <_dtoa_r+0x82>
    db3c:	4b10      	ldr	r3, [pc, #64]	; (db80 <_dtoa_r+0xba0>)
    db3e:	f7ff bab4 	b.w	d0aa <_dtoa_r+0xca>
    db42:	f1b9 0f00 	cmp.w	r9, #0
    db46:	dc03      	bgt.n	db50 <_dtoa_r+0xb70>
    db48:	9b22      	ldr	r3, [sp, #136]	; 0x88
    db4a:	2b02      	cmp	r3, #2
    db4c:	f73f aed0 	bgt.w	d8f0 <_dtoa_r+0x910>
    db50:	9f03      	ldr	r7, [sp, #12]
    db52:	4621      	mov	r1, r4
    db54:	4658      	mov	r0, fp
    db56:	f00e f967 	bl	1be28 <quorem>
    db5a:	f100 0330 	add.w	r3, r0, #48	; 0x30
    db5e:	f807 3b01 	strb.w	r3, [r7], #1
    db62:	9a03      	ldr	r2, [sp, #12]
    db64:	1aba      	subs	r2, r7, r2
    db66:	4591      	cmp	r9, r2
    db68:	ddba      	ble.n	dae0 <_dtoa_r+0xb00>
    db6a:	4659      	mov	r1, fp
    db6c:	2300      	movs	r3, #0
    db6e:	220a      	movs	r2, #10
    db70:	4628      	mov	r0, r5
    db72:	f00e fa88 	bl	1c086 <__multadd>
    db76:	4683      	mov	fp, r0
    db78:	e7eb      	b.n	db52 <_dtoa_r+0xb72>
    db7a:	bf00      	nop
    db7c:	000205d8 	.word	0x000205d8
    db80:	0002083f 	.word	0x0002083f

0000db84 <app_cmd_event_handler>:

/**@brief app_cmd request & response event handler.
 *		 Note, don't run long-time task here. 
 */
static void app_cmd_event_handler(cmd_event_t* p_event)
{
    db84:	b570      	push	{r4, r5, r6, lr}
	uint32_t total_time;
	uint32_t speed_integer;
	uint32_t speed_fraction;
	uint32_t  m_image_file_size;
	
	switch (p_event->op_code) {
    db86:	7803      	ldrb	r3, [r0, #0]
    db88:	2b21      	cmp	r3, #33	; 0x21
{
    db8a:	4605      	mov	r5, r0
	switch (p_event->op_code) {
    db8c:	d002      	beq.n	db94 <app_cmd_event_handler+0x10>
    db8e:	2b27      	cmp	r3, #39	; 0x27
    db90:	d019      	beq.n	dbc6 <app_cmd_event_handler+0x42>

	default:
		LOG_DBG("cmd op: 0x%02x", p_event->op_code);
		break;
	}
}
    db92:	bd70      	pop	{r4, r5, r6, pc}
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    db94:	4b29      	ldr	r3, [pc, #164]	; (dc3c <app_cmd_event_handler+0xb8>)
    db96:	482a      	ldr	r0, [pc, #168]	; (dc40 <app_cmd_event_handler+0xbc>)
		LOG_INF("Start to receive DFU image by UART");
    db98:	492a      	ldr	r1, [pc, #168]	; (dc44 <app_cmd_event_handler+0xc0>)
    db9a:	1ac0      	subs	r0, r0, r3
    db9c:	08c0      	lsrs	r0, r0, #3
    db9e:	0180      	lsls	r0, r0, #6
    dba0:	f040 0003 	orr.w	r0, r0, #3
    dba4:	f00d f840 	bl	1ac28 <log_string_sync>
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    dba8:	f00d ff4d 	bl	1ba46 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    dbac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    dbb0:	460a      	mov	r2, r1
    dbb2:	fba0 0103 	umull	r0, r1, r0, r3
    dbb6:	fb03 1102 	mla	r1, r3, r2, r1
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline uint32_t k_uptime_get_32(void)
{
	return (uint32_t)k_uptime_get();
    dbba:	4a23      	ldr	r2, [pc, #140]	; (dc48 <app_cmd_event_handler+0xc4>)
    dbbc:	0bc3      	lsrs	r3, r0, #15
    dbbe:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    dbc2:	6013      	str	r3, [r2, #0]
		break;
    dbc4:	e7e5      	b.n	db92 <app_cmd_event_handler+0xe>
    dbc6:	4b1d      	ldr	r3, [pc, #116]	; (dc3c <app_cmd_event_handler+0xb8>)
    dbc8:	4c1d      	ldr	r4, [pc, #116]	; (dc40 <app_cmd_event_handler+0xbc>)
		LOG_INF("DFU image is received by UART");
    dbca:	4920      	ldr	r1, [pc, #128]	; (dc4c <app_cmd_event_handler+0xc8>)
    dbcc:	1ae4      	subs	r4, r4, r3
    dbce:	08e4      	lsrs	r4, r4, #3
    dbd0:	01a4      	lsls	r4, r4, #6
    dbd2:	f044 0403 	orr.w	r4, r4, #3
    dbd6:	4620      	mov	r0, r4
    dbd8:	f00d f826 	bl	1ac28 <log_string_sync>
		m_image_file_size = sys_get_le32(p_event->p_data);
    dbdc:	6869      	ldr	r1, [r5, #4]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    dbde:	78cd      	ldrb	r5, [r1, #3]
    dbe0:	788a      	ldrb	r2, [r1, #2]
    dbe2:	784b      	ldrb	r3, [r1, #1]
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    dbe4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
    dbe8:	780d      	ldrb	r5, [r1, #0]
		LOG_INF("File size is: %d", m_image_file_size);	
    dbea:	4919      	ldr	r1, [pc, #100]	; (dc50 <app_cmd_event_handler+0xcc>)
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    dbec:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    dbf0:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    dbf4:	462a      	mov	r2, r5
    dbf6:	4620      	mov	r0, r4
    dbf8:	f00d f816 	bl	1ac28 <log_string_sync>
    dbfc:	f00d ff23 	bl	1ba46 <z_impl_k_uptime_ticks>
    dc00:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    dc04:	fba0 2306 	umull	r2, r3, r0, r6
    dc08:	fb06 3301 	mla	r3, r6, r1, r3
    dc0c:	0bd1      	lsrs	r1, r2, #15
    dc0e:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
		total_time = k_uptime_get_32() - start_time;
    dc12:	4b0d      	ldr	r3, [pc, #52]	; (dc48 <app_cmd_event_handler+0xc4>)
    dc14:	681b      	ldr	r3, [r3, #0]
    dc16:	1ac9      	subs	r1, r1, r3
		speed_fraction = (m_image_file_size % total_time) * 100 / total_time;
    dc18:	2364      	movs	r3, #100	; 0x64
    dc1a:	fbb5 f2f1 	udiv	r2, r5, r1
    dc1e:	fb01 5512 	mls	r5, r1, r2, r5
		LOG_INF("UART transferring speed: %d.%d kB/s", speed_integer, speed_fraction);
    dc22:	4620      	mov	r0, r4
		speed_fraction = (m_image_file_size % total_time) * 100 / total_time;
    dc24:	436b      	muls	r3, r5
		LOG_INF("UART transferring speed: %d.%d kB/s", speed_integer, speed_fraction);
    dc26:	fbb3 f3f1 	udiv	r3, r3, r1
    dc2a:	490a      	ldr	r1, [pc, #40]	; (dc54 <app_cmd_event_handler+0xd0>)
    dc2c:	f00c fffc 	bl	1ac28 <log_string_sync>
}
    dc30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dfu_file_ready(IMAGE_FROM_SERIAL);
    dc34:	2002      	movs	r0, #2
    dc36:	f000 ba17 	b.w	e068 <dfu_file_ready>
    dc3a:	bf00      	nop
    dc3c:	0001c940 	.word	0x0001c940
    dc40:	0001c9b0 	.word	0x0001c9b0
    dc44:	0001cf08 	.word	0x0001cf08
    dc48:	200007d8 	.word	0x200007d8
    dc4c:	0001cf2b 	.word	0x0001cf2b
    dc50:	0001cf49 	.word	0x0001cf49
    dc54:	0001cf5a 	.word	0x0001cf5a

0000dc58 <main>:
	}
}


void main(void)
{
    dc58:	b570      	push	{r4, r5, r6, lr}
    dc5a:	4b28      	ldr	r3, [pc, #160]	; (dcfc <main+0xa4>)
    dc5c:	4c28      	ldr	r4, [pc, #160]	; (dd00 <main+0xa8>)
	int err = 0;

#if UPDATE_APP
	LOG_INF("Cross DFU Demo(new)");
#else
	LOG_INF("Cross DFU Demo(ori)");
    dc5e:	4929      	ldr	r1, [pc, #164]	; (dd04 <main+0xac>)
    dc60:	1ae4      	subs	r4, r4, r3
    dc62:	08e4      	lsrs	r4, r4, #3
    dc64:	01a4      	lsls	r4, r4, #6
    dc66:	f044 0003 	orr.w	r0, r4, #3
    dc6a:	f00c ffdd 	bl	1ac28 <log_string_sync>
#endif

	err = dk_leds_init();
    dc6e:	f006 f973 	bl	13f58 <dk_leds_init>
	if (err) {
    dc72:	4602      	mov	r2, r0
    dc74:	b120      	cbz	r0, dc80 <main+0x28>
		LOG_ERR("Cannot init LEDs (err: %d)", err);
    dc76:	4924      	ldr	r1, [pc, #144]	; (dd08 <main+0xb0>)
    dc78:	f044 0001 	orr.w	r0, r4, #1
    dc7c:	f00c ffd4 	bl	1ac28 <log_string_sync>
	}
	err = dk_buttons_init(button_handel);
    dc80:	4822      	ldr	r0, [pc, #136]	; (dd0c <main+0xb4>)
    dc82:	f006 f9bd 	bl	14000 <dk_buttons_init>
	if (err) {
    dc86:	4602      	mov	r2, r0
    dc88:	b120      	cbz	r0, dc94 <main+0x3c>
		LOG_ERR("Cannot init Buttons (err: %d)", err);
    dc8a:	4921      	ldr	r1, [pc, #132]	; (dd10 <main+0xb8>)
    dc8c:	f044 0001 	orr.w	r0, r4, #1
    dc90:	f00c ffca 	bl	1ac28 <log_string_sync>
	}

#if UPDATE_APP
	err = dk_set_led(DK_LED4,1);
#else
	err = dk_set_led(DK_LED3,1);
    dc94:	2101      	movs	r1, #1
    dc96:	2002      	movs	r0, #2
    dc98:	f006 fa66 	bl	14168 <dk_set_led>
#endif
	if(err){
    dc9c:	4605      	mov	r5, r0
    dc9e:	b128      	cbz	r0, dcac <main+0x54>
		LOG_ERR("Set Led err %d",err);
    dca0:	4602      	mov	r2, r0
    dca2:	491c      	ldr	r1, [pc, #112]	; (dd14 <main+0xbc>)
    dca4:	f044 0001 	orr.w	r0, r4, #1
    dca8:	f00c ffbe 	bl	1ac28 <log_string_sync>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    dcac:	481a      	ldr	r0, [pc, #104]	; (dd18 <main+0xc0>)
	}

	uart = device_get_binding(UART_DEVICE_LABEL);
    dcae:	4e1b      	ldr	r6, [pc, #108]	; (dd1c <main+0xc4>)
    dcb0:	f007 fee8 	bl	15a84 <z_impl_device_get_binding>
    dcb4:	6030      	str	r0, [r6, #0]
	if (!uart) {
    dcb6:	b930      	cbnz	r0, dcc6 <main+0x6e>
		LOG_ERR("Cant init Uart Component");
    dcb8:	f044 0001 	orr.w	r0, r4, #1
    dcbc:	4918      	ldr	r1, [pc, #96]	; (dd20 <main+0xc8>)
	
	//Forever Loop :^)
	for (;;) {
		k_sleep(K_SECONDS(10));
	}
}
    dcbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Cant init Uart Component");
    dcc2:	f00c bfb1 	b.w	1ac28 <log_string_sync>
	if (err) {
    dcc6:	b10d      	cbz	r5, dccc <main+0x74>
		error();
    dcc8:	f00c fc64 	bl	1a594 <error>
	boot_write_img_confirmed();
    dccc:	f00d f923 	bl	1af16 <boot_write_img_confirmed>
	app_cmd_init(uart);
    dcd0:	6830      	ldr	r0, [r6, #0]
    dcd2:	f001 f8cf 	bl	ee74 <app_cmd_init>
	app_cmd_event_cb_register(app_cmd_event_handler);
    dcd6:	4813      	ldr	r0, [pc, #76]	; (dd24 <main+0xcc>)
    dcd8:	f001 f8c6 	bl	ee68 <app_cmd_event_cb_register>
	module_init();
    dcdc:	f000 f9f8 	bl	e0d0 <module_init>
	app_flash_cmd_init(); //bl_flash_cb Declared in DFU_BL_Helper.h
    dce0:	f001 fa1e 	bl	f120 <app_flash_cmd_init>
	LOG_INF("Init completed, Idling till Update or Connect");
    dce4:	4910      	ldr	r1, [pc, #64]	; (dd28 <main+0xd0>)
    dce6:	f044 0003 	orr.w	r0, r4, #3
    dcea:	f00c ff9d 	bl	1ac28 <log_string_sync>
	return z_impl_k_sleep(timeout);
    dcee:	2100      	movs	r1, #0
    dcf0:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
    dcf4:	f00a fa18 	bl	18128 <z_impl_k_sleep>
	for (;;) {
    dcf8:	e7f9      	b.n	dcee <main+0x96>
    dcfa:	bf00      	nop
    dcfc:	0001c940 	.word	0x0001c940
    dd00:	0001c9b0 	.word	0x0001c9b0
    dd04:	0001cf7e 	.word	0x0001cf7e
    dd08:	0001cf92 	.word	0x0001cf92
    dd0c:	0001a5b3 	.word	0x0001a5b3
    dd10:	0001cfad 	.word	0x0001cfad
    dd14:	0001cfcb 	.word	0x0001cfcb
    dd18:	0001cfda 	.word	0x0001cfda
    dd1c:	200007dc 	.word	0x200007dc
    dd20:	0001cfe1 	.word	0x0001cfe1
    dd24:	0000db85 	.word	0x0000db85
    dd28:	0001cffa 	.word	0x0001cffa

0000dd2c <rsp_cb_flash_done>:
/**@brief Callback function for flash done response.
 *
 * @param p_rsp: response contains: "ok".
 */
static void rsp_cb_flash_done(uint8_t* p_rsp, uint16_t rsp_len)
{
    dd2c:	b510      	push	{r4, lr}
    dd2e:	4b0a      	ldr	r3, [pc, #40]	; (dd58 <rsp_cb_flash_done+0x2c>)
    dd30:	4c0a      	ldr	r4, [pc, #40]	; (dd5c <rsp_cb_flash_done+0x30>)
    dd32:	1ae4      	subs	r4, r4, r3
    //Check if we need to Update ourself
    
    if (more_updates != UPDATE_NRF52){
    dd34:	4b0a      	ldr	r3, [pc, #40]	; (dd60 <rsp_cb_flash_done+0x34>)
    dd36:	781b      	ldrb	r3, [r3, #0]
    dd38:	08e4      	lsrs	r4, r4, #3
    dd3a:	01a4      	lsls	r4, r4, #6
    dd3c:	b123      	cbz	r3, dd48 <rsp_cb_flash_done+0x1c>
        ble_send_req(REQ_UPDATE_SELF);
        LOG_INF("Start self Udpate");
    dd3e:	4909      	ldr	r1, [pc, #36]	; (dd64 <rsp_cb_flash_done+0x38>)
    dd40:	f044 0003 	orr.w	r0, r4, #3
    dd44:	f00c ff70 	bl	1ac28 <log_string_sync>
    }
    LOG_INF("In Flash Done");
    dd48:	f044 0003 	orr.w	r0, r4, #3
    dd4c:	4906      	ldr	r1, [pc, #24]	; (dd68 <rsp_cb_flash_done+0x3c>)
}
    dd4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LOG_INF("In Flash Done");
    dd52:	f00c bf69 	b.w	1ac28 <log_string_sync>
    dd56:	bf00      	nop
    dd58:	0001c940 	.word	0x0001c940
    dd5c:	0001c958 	.word	0x0001c958
    dd60:	200003fc 	.word	0x200003fc
    dd64:	0001d02d 	.word	0x0001d02d
    dd68:	0001d03f 	.word	0x0001d03f

0000dd6c <req_dev_fwinfo52>:
    }
}

//size 4 8 die bytes 0 minor fw 1 major fw num
int req_dev_fwinfo52(uint8_t* p_req, uint16_t req_len, cmd_respond_t respond)
{
    dd6c:	b513      	push	{r0, r1, r4, lr}
    dd6e:	4b0a      	ldr	r3, [pc, #40]	; (dd98 <req_dev_fwinfo52+0x2c>)
    dd70:	480a      	ldr	r0, [pc, #40]	; (dd9c <req_dev_fwinfo52+0x30>)
    //Read fw num + available size
    LOG_INF("In FW Info");
    dd72:	490b      	ldr	r1, [pc, #44]	; (dda0 <req_dev_fwinfo52+0x34>)
    dd74:	1ac0      	subs	r0, r0, r3
    dd76:	08c0      	lsrs	r0, r0, #3
    dd78:	0180      	lsls	r0, r0, #6
    dd7a:	f040 0003 	orr.w	r0, r0, #3
{
    dd7e:	4614      	mov	r4, r2
    LOG_INF("In FW Info");
    dd80:	f00c ff52 	bl	1ac28 <log_string_sync>
    uint8_t nrf52buffer[6];
    app_flash_get_DevInf(nrf52buffer,6);
    dd84:	2106      	movs	r1, #6
    dd86:	4668      	mov	r0, sp
    dd88:	f00c fca7 	bl	1a6da <app_flash_get_DevInf>
    respond(nrf52buffer,6);
    dd8c:	2106      	movs	r1, #6
    dd8e:	4668      	mov	r0, sp
    dd90:	47a0      	blx	r4

    return 0;
}
    dd92:	2000      	movs	r0, #0
    dd94:	b002      	add	sp, #8
    dd96:	bd10      	pop	{r4, pc}
    dd98:	0001c940 	.word	0x0001c940
    dd9c:	0001c958 	.word	0x0001c958
    dda0:	0001d04d 	.word	0x0001d04d

0000dda4 <wk_update_mcuboot_flag_handler>:
{
    dda4:	b513      	push	{r0, r1, r4, lr}
    if (cur_image_file_type == IMAGE_TYPE_NRF52) {
    dda6:	4b0e      	ldr	r3, [pc, #56]	; (dde0 <wk_update_mcuboot_flag_handler+0x3c>)
    dda8:	781c      	ldrb	r4, [r3, #0]
    ddaa:	b96c      	cbnz	r4, ddc8 <wk_update_mcuboot_flag_handler+0x24>
	    dfu_target_mcuboot_set_buf(dummybuf, 8);
    ddac:	2108      	movs	r1, #8
    ddae:	4668      	mov	r0, sp
    ddb0:	f006 fafe 	bl	143b0 <dfu_target_mcuboot_set_buf>
        dfu_target_init(DFU_TARGET_IMAGE_TYPE_MCUBOOT, 0, dfu_target_cb_dummy); 
    ddb4:	4a0b      	ldr	r2, [pc, #44]	; (dde4 <wk_update_mcuboot_flag_handler+0x40>)
    ddb6:	4621      	mov	r1, r4
    ddb8:	2001      	movs	r0, #1
    ddba:	f006 fa23 	bl	14204 <dfu_target_init>
        dfu_target_done(true);
    ddbe:	2001      	movs	r0, #1
    ddc0:	f006 fa4a 	bl	14258 <dfu_target_done>
}
    ddc4:	b002      	add	sp, #8
    ddc6:	bd10      	pop	{r4, pc}
    ddc8:	4b07      	ldr	r3, [pc, #28]	; (dde8 <wk_update_mcuboot_flag_handler+0x44>)
    ddca:	4808      	ldr	r0, [pc, #32]	; (ddec <wk_update_mcuboot_flag_handler+0x48>)
        LOG_ERR("Inavlid image file type %c",cur_image_file_type);
    ddcc:	4908      	ldr	r1, [pc, #32]	; (ddf0 <wk_update_mcuboot_flag_handler+0x4c>)
    ddce:	1ac0      	subs	r0, r0, r3
    ddd0:	08c0      	lsrs	r0, r0, #3
    ddd2:	0180      	lsls	r0, r0, #6
    ddd4:	4622      	mov	r2, r4
    ddd6:	f040 0001 	orr.w	r0, r0, #1
    ddda:	f00c ff25 	bl	1ac28 <log_string_sync>
}
    ddde:	e7f1      	b.n	ddc4 <wk_update_mcuboot_flag_handler+0x20>
    dde0:	20001162 	.word	0x20001162
    dde4:	0001a5e7 	.word	0x0001a5e7
    dde8:	0001c940 	.word	0x0001c940
    ddec:	0001c958 	.word	0x0001c958
    ddf0:	0001d058 	.word	0x0001d058

0000ddf4 <rsp_cb_flash_erase>:
{
    ddf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ddf6:	4b0e      	ldr	r3, [pc, #56]	; (de30 <rsp_cb_flash_erase+0x3c>)
    ddf8:	4c0e      	ldr	r4, [pc, #56]	; (de34 <rsp_cb_flash_erase+0x40>)
    LOG_INF("Erase Rsp");
    ddfa:	490f      	ldr	r1, [pc, #60]	; (de38 <rsp_cb_flash_erase+0x44>)
    ddfc:	1ae4      	subs	r4, r4, r3
    ddfe:	08e4      	lsrs	r4, r4, #3
    de00:	01a4      	lsls	r4, r4, #6
{
    de02:	4605      	mov	r5, r0
    LOG_INF("Erase Rsp");
    de04:	f044 0003 	orr.w	r0, r4, #3
    de08:	f00c ff0e 	bl	1ac28 <log_string_sync>
    uint8_t p_ok[] = CMD_RSP_OK;
    de0c:	f646 336f 	movw	r3, #27503	; 0x6b6f
    if (memcmp(p_rsp, p_ok, sizeof(p_ok)) == 0)
    de10:	2202      	movs	r2, #2
    de12:	a901      	add	r1, sp, #4
    de14:	4628      	mov	r0, r5
    uint8_t p_ok[] = CMD_RSP_OK;
    de16:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (memcmp(p_rsp, p_ok, sizeof(p_ok)) == 0)
    de1a:	f00d fe80 	bl	1bb1e <memcmp>
    de1e:	b120      	cbz	r0, de2a <rsp_cb_flash_erase+0x36>
        LOG_ERR("Timeout");
    de20:	4906      	ldr	r1, [pc, #24]	; (de3c <rsp_cb_flash_erase+0x48>)
    de22:	f044 0001 	orr.w	r0, r4, #1
    de26:	f00c feff 	bl	1ac28 <log_string_sync>
}
    de2a:	b003      	add	sp, #12
    de2c:	bd30      	pop	{r4, r5, pc}
    de2e:	bf00      	nop
    de30:	0001c940 	.word	0x0001c940
    de34:	0001c958 	.word	0x0001c958
    de38:	0001d073 	.word	0x0001d073
    de3c:	0001d07d 	.word	0x0001d07d

0000de40 <wk_self_info_handler>:
    if(m_available_size52 < cur_image_file_size){
    de40:	4b12      	ldr	r3, [pc, #72]	; (de8c <wk_self_info_handler+0x4c>)
    de42:	4913      	ldr	r1, [pc, #76]	; (de90 <wk_self_info_handler+0x50>)
    de44:	681a      	ldr	r2, [r3, #0]
    de46:	4b13      	ldr	r3, [pc, #76]	; (de94 <wk_self_info_handler+0x54>)
static void wk_self_info_handler(struct k_work* unused){
    de48:	b510      	push	{r4, lr}
    de4a:	4c13      	ldr	r4, [pc, #76]	; (de98 <wk_self_info_handler+0x58>)
    if(m_available_size52 < cur_image_file_size){
    de4c:	681b      	ldr	r3, [r3, #0]
    de4e:	1a64      	subs	r4, r4, r1
    de50:	08e4      	lsrs	r4, r4, #3
    de52:	429a      	cmp	r2, r3
    de54:	ea4f 1484 	mov.w	r4, r4, lsl #6
    de58:	d206      	bcs.n	de68 <wk_self_info_handler+0x28>
        LOG_ERR("Not enough Space for Image available Size: %x required Size: %x",m_available_size52,cur_image_file_size);
    de5a:	f044 0001 	orr.w	r0, r4, #1
    de5e:	490f      	ldr	r1, [pc, #60]	; (de9c <wk_self_info_handler+0x5c>)
}
    de60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_ERR("Not enough Space for Image available Size: %x required Size: %x",m_available_size52,cur_image_file_size);
    de64:	f00c bee0 	b.w	1ac28 <log_string_sync>
    err = app_flash_erase_page(0, cur_image_file_size);
    de68:	4619      	mov	r1, r3
    de6a:	2000      	movs	r0, #0
    de6c:	f00c fc97 	bl	1a79e <app_flash_erase_page>
    if(err !=0){
    de70:	4602      	mov	r2, r0
    de72:	b120      	cbz	r0, de7e <wk_self_info_handler+0x3e>
        LOG_ERR("Error during Erase: %d",err);
    de74:	490a      	ldr	r1, [pc, #40]	; (dea0 <wk_self_info_handler+0x60>)
    de76:	f044 0001 	orr.w	r0, r4, #1
    de7a:	f00c fed5 	bl	1ac28 <log_string_sync>
    LOG_INF("Start Receiving Data Packages");
    de7e:	f044 0003 	orr.w	r0, r4, #3
    de82:	4908      	ldr	r1, [pc, #32]	; (dea4 <wk_self_info_handler+0x64>)
}
    de84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LOG_INF("Start Receiving Data Packages");
    de88:	f00c bece 	b.w	1ac28 <log_string_sync>
    de8c:	200007e8 	.word	0x200007e8
    de90:	0001c940 	.word	0x0001c940
    de94:	200007e0 	.word	0x200007e0
    de98:	0001c958 	.word	0x0001c958
    de9c:	0001d13a 	.word	0x0001d13a
    dea0:	0001d085 	.word	0x0001d085
    dea4:	0001d09c 	.word	0x0001d09c

0000dea8 <dfu_file_ready.part.0>:
void dfu_file_ready(uint8_t cur_image_channel)
    dea8:	b508      	push	{r3, lr}
            cur_image_file_type = IMAGE_TYPE_NRF52;
    deaa:	4b0a      	ldr	r3, [pc, #40]	; (ded4 <dfu_file_ready.part.0+0x2c>)
    deac:	2200      	movs	r2, #0
            dk_set_leds(DK_LED4);
    deae:	2003      	movs	r0, #3
            cur_image_file_type = IMAGE_TYPE_NRF52;
    deb0:	701a      	strb	r2, [r3, #0]
            dk_set_leds(DK_LED4);
    deb2:	f00d fb8a 	bl	1b5ca <dk_set_leds>
            k_work_submit(&wk_update_mcuboot_flag);
    deb6:	4808      	ldr	r0, [pc, #32]	; (ded8 <dfu_file_ready.part.0+0x30>)
    deb8:	f008 fed2 	bl	16c60 <k_work_submit>
    debc:	4b07      	ldr	r3, [pc, #28]	; (dedc <dfu_file_ready.part.0+0x34>)
    debe:	4808      	ldr	r0, [pc, #32]	; (dee0 <dfu_file_ready.part.0+0x38>)
            LOG_INF("Image received over Bluetooth \nPress Button 2 to do Reboot");
    dec0:	4908      	ldr	r1, [pc, #32]	; (dee4 <dfu_file_ready.part.0+0x3c>)
    dec2:	1ac0      	subs	r0, r0, r3
    dec4:	08c0      	lsrs	r0, r0, #3
    dec6:	0180      	lsls	r0, r0, #6
}
    dec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            LOG_INF("Image received over Bluetooth \nPress Button 2 to do Reboot");
    decc:	f040 0003 	orr.w	r0, r0, #3
    ded0:	f00c beaa 	b.w	1ac28 <log_string_sync>
    ded4:	20001162 	.word	0x20001162
    ded8:	20000810 	.word	0x20000810
    dedc:	0001c940 	.word	0x0001c940
    dee0:	0001c958 	.word	0x0001c958
    dee4:	0001d0ba 	.word	0x0001d0ba

0000dee8 <wk_self_update_handler>:
static void wk_self_update_handler(struct k_work* unused){
    dee8:	b510      	push	{r4, lr}
    uint32_t offset = sys_get_le32(&m_cmd_buffer[0]);
    deea:	4812      	ldr	r0, [pc, #72]	; (df34 <wk_self_update_handler+0x4c>)
    deec:	f00c fb70 	bl	1a5d0 <sys_get_le32>
    def0:	4604      	mov	r4, r0
    uint32_t cur_bufferlen = sys_get_le32(&m_cmd_buffer[4]);
    def2:	4811      	ldr	r0, [pc, #68]	; (df38 <wk_self_update_handler+0x50>)
    def4:	f00c fb6c 	bl	1a5d0 <sys_get_le32>
    err = app_flash_write(offset,p_data,cur_bufferlen);
    def8:	4910      	ldr	r1, [pc, #64]	; (df3c <wk_self_update_handler+0x54>)
    uint32_t cur_bufferlen = sys_get_le32(&m_cmd_buffer[4]);
    defa:	4602      	mov	r2, r0
    err = app_flash_write(offset,p_data,cur_bufferlen);
    defc:	4620      	mov	r0, r4
    defe:	f00c fc15 	bl	1a72c <app_flash_write>
    if(err < 0){
    df02:	1e02      	subs	r2, r0, #0
    df04:	da0b      	bge.n	df1e <wk_self_update_handler+0x36>
    df06:	480e      	ldr	r0, [pc, #56]	; (df40 <wk_self_update_handler+0x58>)
    df08:	4b0e      	ldr	r3, [pc, #56]	; (df44 <wk_self_update_handler+0x5c>)
        LOG_ERR("Problem bei Write %d",err);
    df0a:	490f      	ldr	r1, [pc, #60]	; (df48 <wk_self_update_handler+0x60>)
    df0c:	1ac0      	subs	r0, r0, r3
    df0e:	08c0      	lsrs	r0, r0, #3
    df10:	0180      	lsls	r0, r0, #6
}
    df12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_ERR("Problem bei Write %d",err);
    df16:	f040 0001 	orr.w	r0, r0, #1
    df1a:	f00c be85 	b.w	1ac28 <log_string_sync>
    if (cur_img_offset == cur_image_file_size){
    df1e:	4c0b      	ldr	r4, [pc, #44]	; (df4c <wk_self_update_handler+0x64>)
    df20:	4b0b      	ldr	r3, [pc, #44]	; (df50 <wk_self_update_handler+0x68>)
    df22:	6822      	ldr	r2, [r4, #0]
    df24:	681b      	ldr	r3, [r3, #0]
    df26:	429a      	cmp	r2, r3
    df28:	d103      	bne.n	df32 <wk_self_update_handler+0x4a>
    if (cur_image_channel == IMAGE_FROM_BLUETOOTH) {
    df2a:	f7ff ffbd 	bl	dea8 <dfu_file_ready.part.0>
        cur_img_offset = 0;
    df2e:	2300      	movs	r3, #0
    df30:	6023      	str	r3, [r4, #0]
}
    df32:	bd10      	pop	{r4, pc}
    df34:	20001163 	.word	0x20001163
    df38:	20001167 	.word	0x20001167
    df3c:	2000116b 	.word	0x2000116b
    df40:	0001c958 	.word	0x0001c958
    df44:	0001c940 	.word	0x0001c940
    df48:	0001d0f5 	.word	0x0001d0f5
    df4c:	200007e4 	.word	0x200007e4
    df50:	200007e0 	.word	0x200007e0

0000df54 <cmd_request_flash_done>:
{
    df54:	b507      	push	{r0, r1, r2, lr}
    sys_put_le32(cur_image_file_size, &p_data[0]);
    df56:	4b07      	ldr	r3, [pc, #28]	; (df74 <cmd_request_flash_done+0x20>)
    df58:	a901      	add	r1, sp, #4
    df5a:	6818      	ldr	r0, [r3, #0]
    df5c:	f00c fb2f 	bl	1a5be <sys_put_le32>
    return app_cmd_request(CMD_OP_FLASH_DONE_91, p_data, sizeof(p_data));
    df60:	2204      	movs	r2, #4
    df62:	eb0d 0102 	add.w	r1, sp, r2
    df66:	2037      	movs	r0, #55	; 0x37
    df68:	f000 ff54 	bl	ee14 <app_cmd_request>
}
    df6c:	b003      	add	sp, #12
    df6e:	f85d fb04 	ldr.w	pc, [sp], #4
    df72:	bf00      	nop
    df74:	200007e0 	.word	0x200007e0

0000df78 <rsp_cb_flash_write>:
    if (cur_img_offset == cur_image_file_size)
    df78:	4b05      	ldr	r3, [pc, #20]	; (df90 <rsp_cb_flash_write+0x18>)
    df7a:	4a06      	ldr	r2, [pc, #24]	; (df94 <rsp_cb_flash_write+0x1c>)
    df7c:	6819      	ldr	r1, [r3, #0]
    df7e:	6812      	ldr	r2, [r2, #0]
    df80:	4291      	cmp	r1, r2
    df82:	d103      	bne.n	df8c <rsp_cb_flash_write+0x14>
        cur_img_offset = 0;
    df84:	2200      	movs	r2, #0
    df86:	601a      	str	r2, [r3, #0]
        cmd_request_flash_done();
    df88:	f7ff bfe4 	b.w	df54 <cmd_request_flash_done>
}
    df8c:	4770      	bx	lr
    df8e:	bf00      	nop
    df90:	200007e4 	.word	0x200007e4
    df94:	200007e0 	.word	0x200007e0

0000df98 <send_deviceinfo>:
void send_deviceinfo(void){
    df98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    buf[0] = RSP_DEVINF;
    df9a:	2320      	movs	r3, #32
    df9c:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = m_cur_majorfw91;
    dfa0:	4b0f      	ldr	r3, [pc, #60]	; (dfe0 <send_deviceinfo+0x48>)
    dfa2:	781b      	ldrb	r3, [r3, #0]
    dfa4:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = m_cur_minorfw91;
    dfa8:	4b0e      	ldr	r3, [pc, #56]	; (dfe4 <send_deviceinfo+0x4c>)
    dfaa:	781b      	ldrb	r3, [r3, #0]
    dfac:	f88d 3002 	strb.w	r3, [sp, #2]
    buf[3] = m_cur_majorfw52;
    dfb0:	4b0d      	ldr	r3, [pc, #52]	; (dfe8 <send_deviceinfo+0x50>)
    dfb2:	781b      	ldrb	r3, [r3, #0]
    dfb4:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = m_cur_minorfw52;
    dfb8:	4b0c      	ldr	r3, [pc, #48]	; (dfec <send_deviceinfo+0x54>)
    dfba:	781b      	ldrb	r3, [r3, #0]
    dfbc:	f88d 3004 	strb.w	r3, [sp, #4]
    sys_put_le32(m_available_size91,&buf[5]);
    dfc0:	4b0b      	ldr	r3, [pc, #44]	; (dff0 <send_deviceinfo+0x58>)
    dfc2:	f10d 0105 	add.w	r1, sp, #5
    dfc6:	6818      	ldr	r0, [r3, #0]
    dfc8:	f00c faf9 	bl	1a5be <sys_put_le32>
    sys_put_le32(m_available_size52,&buf[9]);
    dfcc:	4b09      	ldr	r3, [pc, #36]	; (dff4 <send_deviceinfo+0x5c>)
    dfce:	f10d 0109 	add.w	r1, sp, #9
    dfd2:	6818      	ldr	r0, [r3, #0]
    dfd4:	f00c faf3 	bl	1a5be <sys_put_le32>
}
    dfd8:	b005      	add	sp, #20
    dfda:	f85d fb04 	ldr.w	pc, [sp], #4
    dfde:	bf00      	nop
    dfe0:	2000156c 	.word	0x2000156c
    dfe4:	2000156e 	.word	0x2000156e
    dfe8:	2000156b 	.word	0x2000156b
    dfec:	2000156d 	.word	0x2000156d
    dff0:	200007ec 	.word	0x200007ec
    dff4:	200007e8 	.word	0x200007e8

0000dff8 <rsp_dev_fwinfo91>:

//size 4 8 die bytes 0 minor fw 1 major fw num
void rsp_dev_fwinfo91(uint8_t* p_rsp, uint16_t rsp_len)
{
    dff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dffa:	4604      	mov	r4, r0
    m_available_size91 = sys_get_le32(&p_rsp[4]);
    dffc:	3004      	adds	r0, #4
    dffe:	f00c fae7 	bl	1a5d0 <sys_get_le32>
    e002:	4d11      	ldr	r5, [pc, #68]	; (e048 <rsp_dev_fwinfo91+0x50>)
    m_cur_majorfw91 = p_rsp[1];
    e004:	4911      	ldr	r1, [pc, #68]	; (e04c <rsp_dev_fwinfo91+0x54>)
    e006:	7863      	ldrb	r3, [r4, #1]
    m_available_size91 = sys_get_le32(&p_rsp[4]);
    e008:	6028      	str	r0, [r5, #0]
    e00a:	4602      	mov	r2, r0
    m_cur_minorfw91 = p_rsp[0];
    e00c:	4810      	ldr	r0, [pc, #64]	; (e050 <rsp_dev_fwinfo91+0x58>)
    m_cur_majorfw91 = p_rsp[1];
    e00e:	700b      	strb	r3, [r1, #0]
    m_cur_minorfw91 = p_rsp[0];
    e010:	7821      	ldrb	r1, [r4, #0]
    e012:	7001      	strb	r1, [r0, #0]
    e014:	4c0f      	ldr	r4, [pc, #60]	; (e054 <rsp_dev_fwinfo91+0x5c>)
    e016:	4810      	ldr	r0, [pc, #64]	; (e058 <rsp_dev_fwinfo91+0x60>)

    LOG_INF("nRF91:Available Flashspace:%x FWNum%x.%x",m_available_size91,m_cur_majorfw91,m_cur_minorfw91);
    e018:	9100      	str	r1, [sp, #0]
    e01a:	1a24      	subs	r4, r4, r0
    e01c:	08e4      	lsrs	r4, r4, #3
    e01e:	01a4      	lsls	r4, r4, #6
    e020:	490e      	ldr	r1, [pc, #56]	; (e05c <rsp_dev_fwinfo91+0x64>)
    e022:	f044 0003 	orr.w	r0, r4, #3
    e026:	f00c fdff 	bl	1ac28 <log_string_sync>
    
    if(m_available_size91 < cur_image_file_size){
    e02a:	4b0d      	ldr	r3, [pc, #52]	; (e060 <rsp_dev_fwinfo91+0x68>)
    e02c:	682a      	ldr	r2, [r5, #0]
    e02e:	681b      	ldr	r3, [r3, #0]
    e030:	429a      	cmp	r2, r3
    e032:	d204      	bcs.n	e03e <rsp_dev_fwinfo91+0x46>
        LOG_ERR("nRF91: Not enough Space for Image available Size: %x required Size: %x",m_available_size91,cur_image_file_size);
    e034:	490b      	ldr	r1, [pc, #44]	; (e064 <rsp_dev_fwinfo91+0x6c>)
    e036:	f044 0001 	orr.w	r0, r4, #1
    e03a:	f00c fdf5 	bl	1ac28 <log_string_sync>
    }
    send_deviceinfo();
}
    e03e:	b003      	add	sp, #12
    e040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    send_deviceinfo();
    e044:	f7ff bfa8 	b.w	df98 <send_deviceinfo>
    e048:	200007ec 	.word	0x200007ec
    e04c:	2000156c 	.word	0x2000156c
    e050:	2000156e 	.word	0x2000156e
    e054:	0001c958 	.word	0x0001c958
    e058:	0001c940 	.word	0x0001c940
    e05c:	0001d10a 	.word	0x0001d10a
    e060:	200007e0 	.word	0x200007e0
    e064:	0001d133 	.word	0x0001d133

0000e068 <dfu_file_ready>:
    if (cur_image_channel == IMAGE_FROM_BLUETOOTH) {
    e068:	2803      	cmp	r0, #3
{
    e06a:	b510      	push	{r4, lr}
    e06c:	4602      	mov	r2, r0
    if (cur_image_channel == IMAGE_FROM_BLUETOOTH) {
    e06e:	d103      	bne.n	e078 <dfu_file_ready+0x10>
}
    e070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e074:	f7ff bf18 	b.w	dea8 <dfu_file_ready.part.0>
    else if (cur_image_channel == IMAGE_FROM_SERIAL) {
    e078:	4c0f      	ldr	r4, [pc, #60]	; (e0b8 <dfu_file_ready+0x50>)
    e07a:	4b10      	ldr	r3, [pc, #64]	; (e0bc <dfu_file_ready+0x54>)
    e07c:	1ae4      	subs	r4, r4, r3
    e07e:	08e4      	lsrs	r4, r4, #3
    e080:	2802      	cmp	r0, #2
    e082:	ea4f 1484 	mov.w	r4, r4, lsl #6
    e086:	d10f      	bne.n	e0a8 <dfu_file_ready+0x40>
            dk_set_leds(DK_LED4);
    e088:	2003      	movs	r0, #3
    e08a:	f00d fa9e 	bl	1b5ca <dk_set_leds>
            cur_image_file_type = IMAGE_TYPE_NRF52;
    e08e:	4b0c      	ldr	r3, [pc, #48]	; (e0c0 <dfu_file_ready+0x58>)
            k_work_submit(&wk_update_mcuboot_flag);
    e090:	480c      	ldr	r0, [pc, #48]	; (e0c4 <dfu_file_ready+0x5c>)
            cur_image_file_type = IMAGE_TYPE_NRF52;
    e092:	2200      	movs	r2, #0
    e094:	701a      	strb	r2, [r3, #0]
            k_work_submit(&wk_update_mcuboot_flag);
    e096:	f008 fde3 	bl	16c60 <k_work_submit>
            LOG_INF("Image received over Uart \nPress Button 2 to do Reboot");
    e09a:	f044 0003 	orr.w	r0, r4, #3
    e09e:	490a      	ldr	r1, [pc, #40]	; (e0c8 <dfu_file_ready+0x60>)
}
    e0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            LOG_INF("Image received over Uart \nPress Button 2 to do Reboot");
    e0a4:	f00c bdc0 	b.w	1ac28 <log_string_sync>
        LOG_ERR("Invalid image channel %c",cur_image_channel);
    e0a8:	f044 0001 	orr.w	r0, r4, #1
    e0ac:	4907      	ldr	r1, [pc, #28]	; (e0cc <dfu_file_ready+0x64>)
}
    e0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_ERR("Invalid image channel %c",cur_image_channel);
    e0b2:	f00c bdb9 	b.w	1ac28 <log_string_sync>
    e0b6:	bf00      	nop
    e0b8:	0001c958 	.word	0x0001c958
    e0bc:	0001c940 	.word	0x0001c940
    e0c0:	20001162 	.word	0x20001162
    e0c4:	20000810 	.word	0x20000810
    e0c8:	0001d17a 	.word	0x0001d17a
    e0cc:	0001d1b0 	.word	0x0001d1b0

0000e0d0 <module_init>:

//Helper for init
void module_init(void){
    e0d0:	b508      	push	{r3, lr}

    k_work_init(&wk_self_update,wk_self_update_handler);
    e0d2:	4916      	ldr	r1, [pc, #88]	; (e12c <module_init+0x5c>)
    e0d4:	4816      	ldr	r0, [pc, #88]	; (e130 <module_init+0x60>)
    e0d6:	f008 fd37 	bl	16b48 <k_work_init>
    k_work_init(&wk_self_info,wk_self_info_handler);
    e0da:	4916      	ldr	r1, [pc, #88]	; (e134 <module_init+0x64>)
    e0dc:	4816      	ldr	r0, [pc, #88]	; (e138 <module_init+0x68>)
    e0de:	f008 fd33 	bl	16b48 <k_work_init>
    k_work_init(&wk_update_mcuboot_flag, wk_update_mcuboot_flag_handler);
    e0e2:	4916      	ldr	r1, [pc, #88]	; (e13c <module_init+0x6c>)
    e0e4:	4816      	ldr	r0, [pc, #88]	; (e140 <module_init+0x70>)
    e0e6:	f008 fd2f 	bl	16b48 <k_work_init>
    
    //Add Responses to Flash Commands From 91
    app_cmd_add(CMD_OP_FLASH_WRITE_91, NULL, rsp_cb_flash_write);
    e0ea:	4a16      	ldr	r2, [pc, #88]	; (e144 <module_init+0x74>)
    e0ec:	2100      	movs	r1, #0
    e0ee:	2033      	movs	r0, #51	; 0x33
    e0f0:	f000 fe46 	bl	ed80 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_ERASE_91, NULL, rsp_cb_flash_erase);
    e0f4:	4a14      	ldr	r2, [pc, #80]	; (e148 <module_init+0x78>)
    e0f6:	2100      	movs	r1, #0
    e0f8:	2034      	movs	r0, #52	; 0x34
    e0fa:	f000 fe41 	bl	ed80 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_DONE_91, NULL, rsp_cb_flash_done);
    e0fe:	4a13      	ldr	r2, [pc, #76]	; (e14c <module_init+0x7c>)
    e100:	2100      	movs	r1, #0
    e102:	2037      	movs	r0, #55	; 0x37
    e104:	f000 fe3c 	bl	ed80 <app_cmd_add>

    app_cmd_add(CMD_OP_FLASH_READ_91, NULL, NULL);
    e108:	2200      	movs	r2, #0
    e10a:	4611      	mov	r1, r2
    e10c:	2032      	movs	r0, #50	; 0x32
    e10e:	f000 fe37 	bl	ed80 <app_cmd_add>

    app_cmd_add(CMD_OP_DEVINF91,NULL,rsp_dev_fwinfo91);
    e112:	4a0f      	ldr	r2, [pc, #60]	; (e150 <module_init+0x80>)
    e114:	2100      	movs	r1, #0
    e116:	2002      	movs	r0, #2
    e118:	f000 fe32 	bl	ed80 <app_cmd_add>
    app_cmd_add(CMD_OP_DEVINF52,req_dev_fwinfo52,NULL);

    e11c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    app_cmd_add(CMD_OP_DEVINF52,req_dev_fwinfo52,NULL);
    e120:	490c      	ldr	r1, [pc, #48]	; (e154 <module_init+0x84>)
    e122:	2200      	movs	r2, #0
    e124:	2001      	movs	r0, #1
    e126:	f000 be2b 	b.w	ed80 <app_cmd_add>
    e12a:	bf00      	nop
    e12c:	0000dee9 	.word	0x0000dee9
    e130:	20000800 	.word	0x20000800
    e134:	0000de41 	.word	0x0000de41
    e138:	200007f0 	.word	0x200007f0
    e13c:	0000dda5 	.word	0x0000dda5
    e140:	20000810 	.word	0x20000810
    e144:	0000df79 	.word	0x0000df79
    e148:	0000ddf5 	.word	0x0000ddf5
    e14c:	0000dd2d 	.word	0x0000dd2d
    e150:	0000dff9 	.word	0x0000dff9
    e154:	0000dd6d 	.word	0x0000dd6d

0000e158 <uart_callback>:
}

static void uart_callback(const struct device *dev,
              struct uart_event *evt,
              void *user_data)
{
    e158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e15c:	780b      	ldrb	r3, [r1, #0]
    e15e:	460c      	mov	r4, r1
    e160:	4615      	mov	r5, r2
    struct device *uart = user_data;
    int err;

    switch (evt->type) {
    e162:	2b06      	cmp	r3, #6
    e164:	d87f      	bhi.n	e266 <uart_callback+0x10e>
    e166:	e8df f003 	tbb	[pc, r3]
    e16a:	1704      	.short	0x1704
    e16c:	80714928 	.word	0x80714928
    e170:	89          	.byte	0x89
    e171:	00          	.byte	0x00
    e172:	4b4a      	ldr	r3, [pc, #296]	; (e29c <uart_callback+0x144>)
    e174:	484a      	ldr	r0, [pc, #296]	; (e2a0 <uart_callback+0x148>)
    case UART_TX_DONE:
        LOG_INF("Tx sent %d bytes\n", evt->data.tx.len);
    e176:	688a      	ldr	r2, [r1, #8]
    e178:	494a      	ldr	r1, [pc, #296]	; (e2a4 <uart_callback+0x14c>)
    e17a:	1ac0      	subs	r0, r0, r3
    e17c:	08c0      	lsrs	r0, r0, #3
    e17e:	0180      	lsls	r0, r0, #6
    e180:	f040 0003 	orr.w	r0, r0, #3
    e184:	f00c fd50 	bl	1ac28 <log_string_sync>

        if(m_tx_cb)
    e188:	4b47      	ldr	r3, [pc, #284]	; (e2a8 <uart_callback+0x150>)
    e18a:	681b      	ldr	r3, [r3, #0]
    e18c:	2b00      	cmp	r3, #0
    e18e:	d06a      	beq.n	e266 <uart_callback+0x10e>
        {
            m_tx_cb(evt->type);
    e190:	7820      	ldrb	r0, [r4, #0]

        k_work_submit(&wk_reinitalize);

        break;
    }
}
    e192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            m_tx_cb(-1);
    e196:	4718      	bx	r3
    e198:	4b40      	ldr	r3, [pc, #256]	; (e29c <uart_callback+0x144>)
    e19a:	4841      	ldr	r0, [pc, #260]	; (e2a0 <uart_callback+0x148>)
        LOG_ERR("Tx aborted\n");
    e19c:	4943      	ldr	r1, [pc, #268]	; (e2ac <uart_callback+0x154>)
    e19e:	1ac0      	subs	r0, r0, r3
    e1a0:	08c0      	lsrs	r0, r0, #3
    e1a2:	0180      	lsls	r0, r0, #6
    e1a4:	f040 0001 	orr.w	r0, r0, #1
    e1a8:	f00c fd3e 	bl	1ac28 <log_string_sync>
        if (m_tx_cb) {
    e1ac:	4b3e      	ldr	r3, [pc, #248]	; (e2a8 <uart_callback+0x150>)
    e1ae:	681b      	ldr	r3, [r3, #0]
    e1b0:	2b00      	cmp	r3, #0
    e1b2:	d058      	beq.n	e266 <uart_callback+0x10e>
            m_tx_cb(-1);
    e1b4:	f04f 30ff 	mov.w	r0, #4294967295
    e1b8:	e7eb      	b.n	e192 <uart_callback+0x3a>
    e1ba:	4b38      	ldr	r3, [pc, #224]	; (e29c <uart_callback+0x144>)
    e1bc:	4838      	ldr	r0, [pc, #224]	; (e2a0 <uart_callback+0x148>)
        memcpy(&m_rx_buff.p_data[m_rx_buff.length], &evt->data.rx.buf[evt->data.rx.offset], 
    e1be:	4e3c      	ldr	r6, [pc, #240]	; (e2b0 <uart_callback+0x158>)
    e1c0:	1ac0      	subs	r0, r0, r3
    e1c2:	08c0      	lsrs	r0, r0, #3
        LOG_INF("Received data len:%d bytes,offset:%d\n", evt->data.rx.len, evt->data.rx.offset);
    e1c4:	0180      	lsls	r0, r0, #6
    e1c6:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
    e1ca:	f040 0003 	orr.w	r0, r0, #3
    e1ce:	4939      	ldr	r1, [pc, #228]	; (e2b4 <uart_callback+0x15c>)
    e1d0:	f00c fd2a 	bl	1ac28 <log_string_sync>
        memcpy(&m_rx_buff.p_data[m_rx_buff.length], &evt->data.rx.buf[evt->data.rx.offset], 
    e1d4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    e1d8:	88b5      	ldrh	r5, [r6, #4]
    e1da:	6837      	ldr	r7, [r6, #0]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e1dc:	68e2      	ldr	r2, [r4, #12]
    e1de:	4419      	add	r1, r3
    e1e0:	1978      	adds	r0, r7, r5
    e1e2:	f00d fcaa 	bl	1bb3a <memcpy>
        if (m_rx_cb)
    e1e6:	4b34      	ldr	r3, [pc, #208]	; (e2b8 <uart_callback+0x160>)
        m_rx_buff.length += evt->data.rx.len;
    e1e8:	89a1      	ldrh	r1, [r4, #12]
        if (m_rx_cb)
    e1ea:	681b      	ldr	r3, [r3, #0]
        m_rx_buff.length += evt->data.rx.len;
    e1ec:	440d      	add	r5, r1
    e1ee:	80b5      	strh	r5, [r6, #4]
        if (m_rx_cb)
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d038      	beq.n	e266 <uart_callback+0x10e>
            m_rx_cb(m_rx_buff.p_data, evt->data.rx.len);
    e1f4:	4638      	mov	r0, r7
}
    e1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            m_rx_cb(m_rx_buff.p_data, evt->data.rx.len);
    e1fa:	4718      	bx	r3
    e1fc:	4b27      	ldr	r3, [pc, #156]	; (e29c <uart_callback+0x144>)
    e1fe:	4c28      	ldr	r4, [pc, #160]	; (e2a0 <uart_callback+0x148>)
        LOG_INF("UART_RX_BUF_REQUEST");
    e200:	492e      	ldr	r1, [pc, #184]	; (e2bc <uart_callback+0x164>)
    e202:	1ae4      	subs	r4, r4, r3
    e204:	08e4      	lsrs	r4, r4, #3
    e206:	01a4      	lsls	r4, r4, #6
    e208:	f044 0003 	orr.w	r0, r4, #3
    e20c:	f00c fd0c 	bl	1ac28 <log_string_sync>
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
    e210:	68ab      	ldr	r3, [r5, #8]
    e212:	492b      	ldr	r1, [pc, #172]	; (e2c0 <uart_callback+0x168>)
    e214:	691b      	ldr	r3, [r3, #16]
    e216:	6809      	ldr	r1, [r1, #0]
    e218:	f44f 6282 	mov.w	r2, #1040	; 0x410
    e21c:	4628      	mov	r0, r5
    e21e:	4798      	blx	r3
        if (err == EBUSY) {
    e220:	2810      	cmp	r0, #16
    e222:	4602      	mov	r2, r0
    e224:	d106      	bne.n	e234 <uart_callback+0xdc>
            LOG_WRN("UART RX buf rsp: EBUSY");
    e226:	4927      	ldr	r1, [pc, #156]	; (e2c4 <uart_callback+0x16c>)
            LOG_WRN("UART RX buf rsp: EACCES");
    e228:	f044 0002 	orr.w	r0, r4, #2
}
    e22c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            LOG_WRN("UART RX buf rsp: EACCES");
    e230:	f00c bcfa 	b.w	1ac28 <log_string_sync>
        }else if(err ==EACCES){
    e234:	280d      	cmp	r0, #13
    e236:	d101      	bne.n	e23c <uart_callback+0xe4>
            LOG_WRN("UART RX buf rsp: EACCES");
    e238:	4923      	ldr	r1, [pc, #140]	; (e2c8 <uart_callback+0x170>)
    e23a:	e7f5      	b.n	e228 <uart_callback+0xd0>
        }else if(err){
    e23c:	b198      	cbz	r0, e266 <uart_callback+0x10e>
            LOG_WRN("UART RX buf rsp: %d",err);
    e23e:	f044 0002 	orr.w	r0, r4, #2
    e242:	4922      	ldr	r1, [pc, #136]	; (e2cc <uart_callback+0x174>)
}
    e244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            LOG_WRN("UART RX buf rsp: %d",err);
    e248:	f00c bcee 	b.w	1ac28 <log_string_sync>
    e24c:	4b13      	ldr	r3, [pc, #76]	; (e29c <uart_callback+0x144>)
    e24e:	4814      	ldr	r0, [pc, #80]	; (e2a0 <uart_callback+0x148>)
        LOG_INF("UART_RX_BUF_RELEASED");
    e250:	491f      	ldr	r1, [pc, #124]	; (e2d0 <uart_callback+0x178>)
    e252:	1ac0      	subs	r0, r0, r3
    e254:	08c0      	lsrs	r0, r0, #3
    e256:	0180      	lsls	r0, r0, #6
    e258:	f040 0003 	orr.w	r0, r0, #3
    e25c:	f00c fce4 	bl	1ac28 <log_string_sync>
        s_next_buf = evt->data.rx_buf.buf;
    e260:	4b17      	ldr	r3, [pc, #92]	; (e2c0 <uart_callback+0x168>)
    e262:	6862      	ldr	r2, [r4, #4]
    e264:	601a      	str	r2, [r3, #0]
}
    e266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e26a:	480d      	ldr	r0, [pc, #52]	; (e2a0 <uart_callback+0x148>)
    e26c:	4b0b      	ldr	r3, [pc, #44]	; (e29c <uart_callback+0x144>)
        LOG_INF("UART_RX_DISABLED");
    e26e:	4919      	ldr	r1, [pc, #100]	; (e2d4 <uart_callback+0x17c>)
    e270:	1ac0      	subs	r0, r0, r3
    e272:	08c0      	lsrs	r0, r0, #3
    e274:	0180      	lsls	r0, r0, #6
    e276:	f040 0003 	orr.w	r0, r0, #3
    e27a:	e7d7      	b.n	e22c <uart_callback+0xd4>
    e27c:	4b07      	ldr	r3, [pc, #28]	; (e29c <uart_callback+0x144>)
    e27e:	4808      	ldr	r0, [pc, #32]	; (e2a0 <uart_callback+0x148>)
        LOG_INF("UART_RX_STOPPED");
    e280:	4915      	ldr	r1, [pc, #84]	; (e2d8 <uart_callback+0x180>)
    e282:	1ac0      	subs	r0, r0, r3
    e284:	08c0      	lsrs	r0, r0, #3
    e286:	0180      	lsls	r0, r0, #6
    e288:	f040 0003 	orr.w	r0, r0, #3
    e28c:	f00c fccc 	bl	1ac28 <log_string_sync>
}
    e290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        k_work_submit(&wk_reinitalize);
    e294:	4811      	ldr	r0, [pc, #68]	; (e2dc <uart_callback+0x184>)
    e296:	f008 bce3 	b.w	16c60 <k_work_submit>
    e29a:	bf00      	nop
    e29c:	0001c940 	.word	0x0001c940
    e2a0:	0001c950 	.word	0x0001c950
    e2a4:	0001d1d7 	.word	0x0001d1d7
    e2a8:	20000830 	.word	0x20000830
    e2ac:	0001d1e9 	.word	0x0001d1e9
    e2b0:	20000824 	.word	0x20000824
    e2b4:	0001d1f5 	.word	0x0001d1f5
    e2b8:	2000082c 	.word	0x2000082c
    e2bc:	0001d21b 	.word	0x0001d21b
    e2c0:	200000d8 	.word	0x200000d8
    e2c4:	0001d22f 	.word	0x0001d22f
    e2c8:	0001d246 	.word	0x0001d246
    e2cc:	0001d25e 	.word	0x0001d25e
    e2d0:	0001d272 	.word	0x0001d272
    e2d4:	0001d287 	.word	0x0001d287
    e2d8:	0001d298 	.word	0x0001d298
    e2dc:	20000834 	.word	0x20000834

0000e2e0 <app_uart_send>:
{
    e2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2e2:	4b14      	ldr	r3, [pc, #80]	; (e334 <app_uart_send+0x54>)
    e2e4:	4c14      	ldr	r4, [pc, #80]	; (e338 <app_uart_send+0x58>)
    LOG_ERR("%s, length:%d", __func__, length);
    e2e6:	4a15      	ldr	r2, [pc, #84]	; (e33c <app_uart_send+0x5c>)
    e2e8:	1ae4      	subs	r4, r4, r3
    e2ea:	08e4      	lsrs	r4, r4, #3
    e2ec:	01a4      	lsls	r4, r4, #6
    e2ee:	460b      	mov	r3, r1
{
    e2f0:	4607      	mov	r7, r0
    e2f2:	460e      	mov	r6, r1
    LOG_ERR("%s, length:%d", __func__, length);
    e2f4:	f044 0001 	orr.w	r0, r4, #1
    e2f8:	4911      	ldr	r1, [pc, #68]	; (e340 <app_uart_send+0x60>)
    e2fa:	f00c fc95 	bl	1ac28 <log_string_sync>
    if (m_device == NULL) {
    e2fe:	4b11      	ldr	r3, [pc, #68]	; (e344 <app_uart_send+0x64>)
    e300:	6818      	ldr	r0, [r3, #0]
    e302:	b1a0      	cbz	r0, e32e <app_uart_send+0x4e>
    if (p_data != NULL && length != 0) {
    e304:	b147      	cbz	r7, e318 <app_uart_send+0x38>
    e306:	b13e      	cbz	r6, e318 <app_uart_send+0x38>
	return api->tx(dev, buf, len, timeout);
    e308:	6883      	ldr	r3, [r0, #8]
    e30a:	4632      	mov	r2, r6
    e30c:	685d      	ldr	r5, [r3, #4]
    e30e:	4639      	mov	r1, r7
    e310:	f04f 33ff 	mov.w	r3, #4294967295
    e314:	47a8      	blx	r5
    e316:	4605      	mov	r5, r0
    if (err < 0) {
    e318:	2d00      	cmp	r5, #0
    e31a:	da06      	bge.n	e32a <app_uart_send+0x4a>
        LOG_ERR("%s, err:%d", __func__, err);
    e31c:	4a07      	ldr	r2, [pc, #28]	; (e33c <app_uart_send+0x5c>)
    e31e:	490a      	ldr	r1, [pc, #40]	; (e348 <app_uart_send+0x68>)
    e320:	462b      	mov	r3, r5
    e322:	f044 0001 	orr.w	r0, r4, #1
    e326:	f00c fc7f 	bl	1ac28 <log_string_sync>
}
    e32a:	4628      	mov	r0, r5
    e32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
    e32e:	f04f 35ff 	mov.w	r5, #4294967295
    e332:	e7fa      	b.n	e32a <app_uart_send+0x4a>
    e334:	0001c940 	.word	0x0001c940
    e338:	0001c950 	.word	0x0001c950
    e33c:	0001d370 	.word	0x0001d370
    e340:	0001d2a8 	.word	0x0001d2a8
    e344:	20000820 	.word	0x20000820
    e348:	0001d2b6 	.word	0x0001d2b6

0000e34c <app_uart_init>:
 * @return -1               failed
 */
uint8_t helper_bool = true;
int app_uart_init(struct device* p_device, uint8_t* p_rx_buff,
        uint16_t rx_max_len)
{
    e34c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t byte;

    if (p_device == NULL) {
    e350:	4604      	mov	r4, r0
    e352:	2800      	cmp	r0, #0
    e354:	d064      	beq.n	e420 <app_uart_init+0xd4>
        return -ENXIO;
    }

    m_device = p_device;

    m_rx_buff.p_data = p_rx_buff;
    e356:	4f34      	ldr	r7, [pc, #208]	; (e428 <app_uart_init+0xdc>)
    m_rx_buff.length = 0;

    m_rx_cb = NULL;
    m_tx_cb = NULL;

    if(helper_bool){
    e358:	f8df 8114 	ldr.w	r8, [pc, #276]	; e470 <app_uart_init+0x124>
    m_rx_buff.max_len = rx_max_len;
    e35c:	80fa      	strh	r2, [r7, #6]
    m_rx_cb = NULL;
    e35e:	4a33      	ldr	r2, [pc, #204]	; (e42c <app_uart_init+0xe0>)
    m_device = p_device;
    e360:	4e33      	ldr	r6, [pc, #204]	; (e430 <app_uart_init+0xe4>)
    m_rx_buff.p_data = p_rx_buff;
    e362:	6039      	str	r1, [r7, #0]
    m_rx_buff.length = 0;
    e364:	2500      	movs	r5, #0
    m_rx_cb = NULL;
    e366:	6015      	str	r5, [r2, #0]
    m_tx_cb = NULL;
    e368:	4a32      	ldr	r2, [pc, #200]	; (e434 <app_uart_init+0xe8>)
    m_device = p_device;
    e36a:	6030      	str	r0, [r6, #0]
    m_tx_cb = NULL;
    e36c:	6015      	str	r5, [r2, #0]
    if(helper_bool){
    e36e:	f898 2000 	ldrb.w	r2, [r8]
    m_rx_buff.length = 0;
    e372:	80bd      	strh	r5, [r7, #4]
    if(helper_bool){
    e374:	b12a      	cbz	r2, e382 <app_uart_init+0x36>
        //Called Once
        k_work_init(&wk_reinitalize,wk_uart_reinit_handler);
    e376:	4930      	ldr	r1, [pc, #192]	; (e438 <app_uart_init+0xec>)
    e378:	4830      	ldr	r0, [pc, #192]	; (e43c <app_uart_init+0xf0>)
    e37a:	f008 fbe5 	bl	16b48 <k_work_init>
        helper_bool = false;
    e37e:	f888 5000 	strb.w	r5, [r8]
	if (api->callback_set == NULL) {
    e382:	68a3      	ldr	r3, [r4, #8]
    e384:	681b      	ldr	r3, [r3, #0]
    e386:	2b00      	cmp	r3, #0
    e388:	d045      	beq.n	e416 <app_uart_init+0xca>
	return api->callback_set(dev, callback, user_data);
    e38a:	492d      	ldr	r1, [pc, #180]	; (e440 <app_uart_init+0xf4>)
    e38c:	4622      	mov	r2, r4
    e38e:	4620      	mov	r0, r4
    e390:	4798      	blx	r3
    }

    int err;
    err = uart_callback_set(p_device, uart_callback, (void *)p_device);
    __ASSERT(err == 0, "Failed to set callback");
    e392:	4605      	mov	r5, r0
    e394:	b160      	cbz	r0, e3b0 <app_uart_init+0x64>
    e396:	492b      	ldr	r1, [pc, #172]	; (e444 <app_uart_init+0xf8>)
    e398:	4a2b      	ldr	r2, [pc, #172]	; (e448 <app_uart_init+0xfc>)
    e39a:	482c      	ldr	r0, [pc, #176]	; (e44c <app_uart_init+0x100>)
    e39c:	23db      	movs	r3, #219	; 0xdb
    e39e:	f00c fa95 	bl	1a8cc <printk>
    e3a2:	482b      	ldr	r0, [pc, #172]	; (e450 <app_uart_init+0x104>)
    e3a4:	f00c fa92 	bl	1a8cc <printk>
    e3a8:	4827      	ldr	r0, [pc, #156]	; (e448 <app_uart_init+0xfc>)
    e3aa:	21db      	movs	r1, #219	; 0xdb
    e3ac:	f00c fc27 	bl	1abfe <assert_post_action>
				      unsigned char *p_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->poll_in == NULL) {
    e3b0:	68a3      	ldr	r3, [r4, #8]
    e3b2:	699b      	ldr	r3, [r3, #24]
    e3b4:	b12b      	cbz	r3, e3c2 <app_uart_init+0x76>
		return -ENOSYS;
	}

	return api->poll_in(dev, p_char);
    e3b6:	f10d 0107 	add.w	r1, sp, #7
    e3ba:	4620      	mov	r0, r4
    e3bc:	4798      	blx	r3

    /* Drain the rx buffer */
    unsigned char c;
    while (uart_poll_in(p_device, &c) >= 0) {
    e3be:	2800      	cmp	r0, #0
    e3c0:	daf6      	bge.n	e3b0 <app_uart_init+0x64>
        continue;
    }

    __ASSERT(err == 0, "Failed to enable RX");
    e3c2:	b165      	cbz	r5, e3de <app_uart_init+0x92>
    e3c4:	491f      	ldr	r1, [pc, #124]	; (e444 <app_uart_init+0xf8>)
    e3c6:	4a20      	ldr	r2, [pc, #128]	; (e448 <app_uart_init+0xfc>)
    e3c8:	4820      	ldr	r0, [pc, #128]	; (e44c <app_uart_init+0x100>)
    e3ca:	23e3      	movs	r3, #227	; 0xe3
    e3cc:	f00c fa7e 	bl	1a8cc <printk>
    e3d0:	4820      	ldr	r0, [pc, #128]	; (e454 <app_uart_init+0x108>)
    e3d2:	f00c fa7b 	bl	1a8cc <printk>
    e3d6:	481c      	ldr	r0, [pc, #112]	; (e448 <app_uart_init+0xfc>)
    e3d8:	21e3      	movs	r1, #227	; 0xe3
    e3da:	f00c fc10 	bl	1abfe <assert_post_action>
    ret = uart_rx_enable(m_device, s_uart_rx_buf[0], sizeof(s_uart_rx_buf[0]), UART_RX_TIMEOUT_MS);
    e3de:	6830      	ldr	r0, [r6, #0]
	return api->rx_enable(dev, buf, len, timeout);
    e3e0:	4c1d      	ldr	r4, [pc, #116]	; (e458 <app_uart_init+0x10c>)
    e3e2:	6883      	ldr	r3, [r0, #8]
    e3e4:	f44f 6282 	mov.w	r2, #1040	; 0x410
    e3e8:	68dd      	ldr	r5, [r3, #12]
    e3ea:	4621      	mov	r1, r4
    e3ec:	230a      	movs	r3, #10
    e3ee:	47a8      	blx	r5
    s_next_buf = s_uart_rx_buf[0];
    e3f0:	4b1a      	ldr	r3, [pc, #104]	; (e45c <app_uart_init+0x110>)
    e3f2:	601c      	str	r4, [r3, #0]
    if (ret) {
    e3f4:	b190      	cbz	r0, e41c <app_uart_init+0xd0>
    e3f6:	4b1a      	ldr	r3, [pc, #104]	; (e460 <app_uart_init+0x114>)
    e3f8:	4c1a      	ldr	r4, [pc, #104]	; (e464 <app_uart_init+0x118>)
        LOG_ERR("%s failed: %d", __func__, ret);
    e3fa:	4a1b      	ldr	r2, [pc, #108]	; (e468 <app_uart_init+0x11c>)
    e3fc:	491b      	ldr	r1, [pc, #108]	; (e46c <app_uart_init+0x120>)
    e3fe:	1ae4      	subs	r4, r4, r3
    e400:	08e4      	lsrs	r4, r4, #3
    e402:	01a4      	lsls	r4, r4, #6
    e404:	4603      	mov	r3, r0
    e406:	f044 0001 	orr.w	r0, r4, #1
    e40a:	f00c fc0d 	bl	1ac28 <log_string_sync>
    //pm_device_state_set(m_device, PM_DEVICE_STATE_ACTIVE, NULL, NULL);
    //k_sleep(K_MSEC(100));
    err = uart_receive();

    return 0;
    e40e:	2000      	movs	r0, #0
}
    e410:	b002      	add	sp, #8
    e412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOSYS;
    e416:	f06f 0557 	mvn.w	r5, #87	; 0x57
    e41a:	e7bc      	b.n	e396 <app_uart_init+0x4a>
 */
void uart_buffer_reset(uart_buff_t* p_buff)
{
    // TODO: review
//  memset(p_buff->p_data, 0, p_buff->max_len);
    p_buff->length = 0;
    e41c:	80b8      	strh	r0, [r7, #4]
    return 0;
    e41e:	e7f7      	b.n	e410 <app_uart_init+0xc4>
        return -ENXIO;
    e420:	f06f 0005 	mvn.w	r0, #5
    e424:	e7f4      	b.n	e410 <app_uart_init+0xc4>
    e426:	bf00      	nop
    e428:	20000824 	.word	0x20000824
    e42c:	2000082c 	.word	0x2000082c
    e430:	20000820 	.word	0x20000820
    e434:	20000830 	.word	0x20000830
    e438:	0000e475 	.word	0x0000e475
    e43c:	20000834 	.word	0x20000834
    e440:	0000e159 	.word	0x0000e159
    e444:	0001d2d3 	.word	0x0001d2d3
    e448:	0001d2c1 	.word	0x0001d2c1
    e44c:	0001d2dc 	.word	0x0001d2dc
    e450:	0001d2f9 	.word	0x0001d2f9
    e454:	0001d312 	.word	0x0001d312
    e458:	2000156f 	.word	0x2000156f
    e45c:	200000d8 	.word	0x200000d8
    e460:	0001c940 	.word	0x0001c940
    e464:	0001c950 	.word	0x0001c950
    e468:	0001d37e 	.word	0x0001d37e
    e46c:	0001d328 	.word	0x0001d328
    e470:	200003fd 	.word	0x200003fd

0000e474 <wk_uart_reinit_handler>:
void wk_uart_reinit_handler(struct k_work * unused){
    e474:	b510      	push	{r4, lr}
    e476:	4b0d      	ldr	r3, [pc, #52]	; (e4ac <wk_uart_reinit_handler+0x38>)
    e478:	4c0d      	ldr	r4, [pc, #52]	; (e4b0 <wk_uart_reinit_handler+0x3c>)
    LOG_INF("Reinitializing Uart");
    e47a:	490e      	ldr	r1, [pc, #56]	; (e4b4 <wk_uart_reinit_handler+0x40>)
    e47c:	1ae4      	subs	r4, r4, r3
    e47e:	08e4      	lsrs	r4, r4, #3
    e480:	01a4      	lsls	r4, r4, #6
    e482:	f044 0003 	orr.w	r0, r4, #3
    e486:	f00c fbcf 	bl	1ac28 <log_string_sync>
    err = app_uart_init(m_device,m_rx_buff.p_data,m_rx_buff.max_len);
    e48a:	4b0b      	ldr	r3, [pc, #44]	; (e4b8 <wk_uart_reinit_handler+0x44>)
    e48c:	88da      	ldrh	r2, [r3, #6]
    e48e:	6819      	ldr	r1, [r3, #0]
    e490:	4b0a      	ldr	r3, [pc, #40]	; (e4bc <wk_uart_reinit_handler+0x48>)
    e492:	6818      	ldr	r0, [r3, #0]
    e494:	f7ff ff5a 	bl	e34c <app_uart_init>
    if(err){
    e498:	4602      	mov	r2, r0
    e49a:	b130      	cbz	r0, e4aa <wk_uart_reinit_handler+0x36>
        LOG_ERR("Error in APP Uart Reinit: %d",err);
    e49c:	f044 0001 	orr.w	r0, r4, #1
    e4a0:	4907      	ldr	r1, [pc, #28]	; (e4c0 <wk_uart_reinit_handler+0x4c>)
}
    e4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_ERR("Error in APP Uart Reinit: %d",err);
    e4a6:	f00c bbbf 	b.w	1ac28 <log_string_sync>
}
    e4aa:	bd10      	pop	{r4, pc}
    e4ac:	0001c940 	.word	0x0001c940
    e4b0:	0001c950 	.word	0x0001c950
    e4b4:	0001d336 	.word	0x0001d336
    e4b8:	20000824 	.word	0x20000824
    e4bc:	20000820 	.word	0x20000820
    e4c0:	0001d34a 	.word	0x0001d34a

0000e4c4 <app_uart_rx_reset>:
    p_buff->length = 0;
    e4c4:	4b01      	ldr	r3, [pc, #4]	; (e4cc <app_uart_rx_reset+0x8>)
    e4c6:	2200      	movs	r2, #0
    e4c8:	809a      	strh	r2, [r3, #4]

/**@brief Reset rx buffer */
void app_uart_rx_reset(void)
{
    uart_buffer_reset(&m_rx_buff);
}
    e4ca:	4770      	bx	lr
    e4cc:	20000824 	.word	0x20000824

0000e4d0 <app_uart_rx_cb_set>:

/**@brief Set rx data ready event callback */
void app_uart_rx_cb_set(uart_rx_cb cb)
{
    m_rx_cb = cb;
    e4d0:	4b01      	ldr	r3, [pc, #4]	; (e4d8 <app_uart_rx_cb_set+0x8>)
    e4d2:	6018      	str	r0, [r3, #0]
}
    e4d4:	4770      	bx	lr
    e4d6:	bf00      	nop
    e4d8:	2000082c 	.word	0x2000082c

0000e4dc <app_uart_tx_cb_set>:

/**@brief Set tx empty event callback */
void app_uart_tx_cb_set(uart_tx_cb cb)
{
    m_tx_cb = cb;
    e4dc:	4b01      	ldr	r3, [pc, #4]	; (e4e4 <app_uart_tx_cb_set+0x8>)
    e4de:	6018      	str	r0, [r3, #0]
}
    e4e0:	4770      	bx	lr
    e4e2:	bf00      	nop
    e4e4:	20000830 	.word	0x20000830

0000e4e8 <rsp_cb_ping>:
    e4e8:	4805      	ldr	r0, [pc, #20]	; (e500 <rsp_cb_ping+0x18>)
    e4ea:	4b06      	ldr	r3, [pc, #24]	; (e504 <rsp_cb_ping+0x1c>)
}

/**@brief Callback function for ping response. */
static void rsp_cb_ping(uint8_t* p_rsp, uint16_t rsp_len)
{
    LOG_INF("%s", __func__);
    e4ec:	4a06      	ldr	r2, [pc, #24]	; (e508 <rsp_cb_ping+0x20>)
    e4ee:	4907      	ldr	r1, [pc, #28]	; (e50c <rsp_cb_ping+0x24>)
    e4f0:	1ac0      	subs	r0, r0, r3
    e4f2:	08c0      	lsrs	r0, r0, #3
    e4f4:	0180      	lsls	r0, r0, #6
    e4f6:	f040 0003 	orr.w	r0, r0, #3
    e4fa:	f00c bb95 	b.w	1ac28 <log_string_sync>
    e4fe:	bf00      	nop
    e500:	0001c968 	.word	0x0001c968
    e504:	0001c940 	.word	0x0001c940
    e508:	0001d6c9 	.word	0x0001d6c9
    e50c:	0001d38f 	.word	0x0001d38f

0000e510 <req_cb_raw_data>:
}

/**@brief Callback function for raw_data request. */
static int req_cb_raw_data(uint8_t* p_req, uint16_t req_len, cmd_respond_t respond)
{
    e510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e512:	4b11      	ldr	r3, [pc, #68]	; (e558 <req_cb_raw_data+0x48>)
    e514:	4c11      	ldr	r4, [pc, #68]	; (e55c <req_cb_raw_data+0x4c>)
    e516:	1ae4      	subs	r4, r4, r3
    e518:	08e4      	lsrs	r4, r4, #3
    LOG_DBG("%s", __func__);
    e51a:	4b11      	ldr	r3, [pc, #68]	; (e560 <req_cb_raw_data+0x50>)
    e51c:	01a4      	lsls	r4, r4, #6
{
    e51e:	460d      	mov	r5, r1
    e520:	4607      	mov	r7, r0
    e522:	4616      	mov	r6, r2
    LOG_DBG("%s", __func__);
    e524:	490f      	ldr	r1, [pc, #60]	; (e564 <req_cb_raw_data+0x54>)
    e526:	461a      	mov	r2, r3
    e528:	f044 0004 	orr.w	r0, r4, #4
    e52c:	f00c fb7c 	bl	1ac28 <log_string_sync>
    char* rsp = "ok";

    // TODO: fill user function to handle raw data
    if (req_len > 0) {
    e530:	b14d      	cbz	r5, e546 <req_cb_raw_data+0x36>
        LOG_HEXDUMP_INF(p_req, MIN(req_len, 8), "raw data:");
    e532:	2d08      	cmp	r5, #8
    e534:	462b      	mov	r3, r5
    e536:	490c      	ldr	r1, [pc, #48]	; (e568 <req_cb_raw_data+0x58>)
    e538:	bf28      	it	cs
    e53a:	2308      	movcs	r3, #8
    e53c:	463a      	mov	r2, r7
    e53e:	f044 0003 	orr.w	r0, r4, #3
    e542:	f001 fecd 	bl	102e0 <log_hexdump_sync>
    }

    respond(rsp, strlen(rsp));
    e546:	4809      	ldr	r0, [pc, #36]	; (e56c <req_cb_raw_data+0x5c>)
    e548:	f7fe fd42 	bl	cfd0 <strlen>
    e54c:	b281      	uxth	r1, r0
    e54e:	4807      	ldr	r0, [pc, #28]	; (e56c <req_cb_raw_data+0x5c>)
    e550:	47b0      	blx	r6

    return 0;
}
    e552:	2000      	movs	r0, #0
    e554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e556:	bf00      	nop
    e558:	0001c940 	.word	0x0001c940
    e55c:	0001c968 	.word	0x0001c968
    e560:	0001d6d5 	.word	0x0001d6d5
    e564:	0001d38b 	.word	0x0001d38b
    e568:	0001d392 	.word	0x0001d392
    e56c:	0001d39c 	.word	0x0001d39c

0000e570 <req_cb_ping>:
{
    e570:	b538      	push	{r3, r4, r5, lr}
    e572:	480a      	ldr	r0, [pc, #40]	; (e59c <req_cb_ping+0x2c>)
    e574:	4b0a      	ldr	r3, [pc, #40]	; (e5a0 <req_cb_ping+0x30>)
    respond(rsp, strlen(rsp));
    e576:	4d0b      	ldr	r5, [pc, #44]	; (e5a4 <req_cb_ping+0x34>)
    LOG_INF("%s", __func__);
    e578:	490b      	ldr	r1, [pc, #44]	; (e5a8 <req_cb_ping+0x38>)
    e57a:	1ac0      	subs	r0, r0, r3
    e57c:	08c0      	lsrs	r0, r0, #3
    e57e:	0180      	lsls	r0, r0, #6
{
    e580:	4614      	mov	r4, r2
    LOG_INF("%s", __func__);
    e582:	f040 0003 	orr.w	r0, r0, #3
    e586:	4a09      	ldr	r2, [pc, #36]	; (e5ac <req_cb_ping+0x3c>)
    e588:	f00c fb4e 	bl	1ac28 <log_string_sync>
    respond(rsp, strlen(rsp));
    e58c:	4628      	mov	r0, r5
    e58e:	f7fe fd1f 	bl	cfd0 <strlen>
    e592:	b281      	uxth	r1, r0
    e594:	4628      	mov	r0, r5
    e596:	47a0      	blx	r4
}
    e598:	2000      	movs	r0, #0
    e59a:	bd38      	pop	{r3, r4, r5, pc}
    e59c:	0001c968 	.word	0x0001c968
    e5a0:	0001c940 	.word	0x0001c940
    e5a4:	0001d39c 	.word	0x0001d39c
    e5a8:	0001d38f 	.word	0x0001d38f
    e5ac:	0001d6bd 	.word	0x0001d6bd

0000e5b0 <rsp_cb_raw_data>:

/**@brief Callback function for mtu_get response. */
static void rsp_cb_raw_data(uint8_t* p_rsp, uint16_t rsp_len)
{
    e5b0:	b570      	push	{r4, r5, r6, lr}
    e5b2:	4b0e      	ldr	r3, [pc, #56]	; (e5ec <rsp_cb_raw_data+0x3c>)
    e5b4:	4c0e      	ldr	r4, [pc, #56]	; (e5f0 <rsp_cb_raw_data+0x40>)
    e5b6:	1ae4      	subs	r4, r4, r3
    e5b8:	08e4      	lsrs	r4, r4, #3
    LOG_DBG("%s", __func__);
    e5ba:	4b0e      	ldr	r3, [pc, #56]	; (e5f4 <rsp_cb_raw_data+0x44>)
    e5bc:	01a4      	lsls	r4, r4, #6
{
    e5be:	460d      	mov	r5, r1
    e5c0:	4606      	mov	r6, r0
    LOG_DBG("%s", __func__);
    e5c2:	490d      	ldr	r1, [pc, #52]	; (e5f8 <rsp_cb_raw_data+0x48>)
    e5c4:	461a      	mov	r2, r3
    e5c6:	f044 0004 	orr.w	r0, r4, #4
    e5ca:	f00c fb2d 	bl	1ac28 <log_string_sync>

    if (rsp_len > 0) {
    e5ce:	b15d      	cbz	r5, e5e8 <rsp_cb_raw_data+0x38>
        LOG_HEXDUMP_INF(p_rsp, MIN(rsp_len, 8), "raw data:");
    e5d0:	2d08      	cmp	r5, #8
    e5d2:	462b      	mov	r3, r5
    e5d4:	4632      	mov	r2, r6
    e5d6:	f044 0003 	orr.w	r0, r4, #3
    e5da:	4908      	ldr	r1, [pc, #32]	; (e5fc <rsp_cb_raw_data+0x4c>)
    }
}
    e5dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        LOG_HEXDUMP_INF(p_rsp, MIN(rsp_len, 8), "raw data:");
    e5e0:	bf28      	it	cs
    e5e2:	2308      	movcs	r3, #8
    e5e4:	f001 be7c 	b.w	102e0 <log_hexdump_sync>
}
    e5e8:	bd70      	pop	{r4, r5, r6, pc}
    e5ea:	bf00      	nop
    e5ec:	0001c940 	.word	0x0001c940
    e5f0:	0001c968 	.word	0x0001c968
    e5f4:	0001d6e5 	.word	0x0001d6e5
    e5f8:	0001d38b 	.word	0x0001d38b
    e5fc:	0001d392 	.word	0x0001d392

0000e600 <state_set.constprop.0>:
static void state_set(cmd_context_t* p_cmd_ctx, cmd_state_t new_state)
    e600:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e602:	4c37      	ldr	r4, [pc, #220]	; (e6e0 <state_set.constprop.0+0xe0>)
    e604:	7861      	ldrb	r1, [r4, #1]
        if (mode_get(&m_cmd_ctx) != CMD_MODE_HOST) {
    e606:	7823      	ldrb	r3, [r4, #0]
    e608:	2200      	movs	r2, #0
    if (old_state != new_state) {
    e60a:	4288      	cmp	r0, r1
    e60c:	d107      	bne.n	e61e <state_set.constprop.0+0x1e>
    e60e:	b102      	cbz	r2, e612 <state_set.constprop.0+0x12>
    e610:	7060      	strb	r0, [r4, #1]
}
    e612:	b003      	add	sp, #12
    e614:	bd30      	pop	{r4, r5, pc}
static void state_set(cmd_context_t* p_cmd_ctx, cmd_state_t new_state)
    e616:	4601      	mov	r1, r0
    e618:	2201      	movs	r2, #1
    e61a:	2000      	movs	r0, #0
    e61c:	e7f5      	b.n	e60a <state_set.constprop.0+0xa>
    switch (state) {
    e61e:	280b      	cmp	r0, #11
    e620:	d8f6      	bhi.n	e610 <state_set.constprop.0+0x10>
    e622:	a201      	add	r2, pc, #4	; (adr r2, e628 <state_set.constprop.0+0x28>)
    e624:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    e628:	0000e659 	.word	0x0000e659
    e62c:	0000e683 	.word	0x0000e683
    e630:	0000e68f 	.word	0x0000e68f
    e634:	0000e6bf 	.word	0x0000e6bf
    e638:	0000e6cd 	.word	0x0000e6cd
    e63c:	0000e611 	.word	0x0000e611
    e640:	0000e617 	.word	0x0000e617
    e644:	0000e611 	.word	0x0000e611
    e648:	0000e6a9 	.word	0x0000e6a9
    e64c:	0000e617 	.word	0x0000e617
    e650:	0000e617 	.word	0x0000e617
    e654:	0000e6d5 	.word	0x0000e6d5
    e658:	2500      	movs	r5, #0
    e65a:	7065      	strb	r5, [r4, #1]
        app_uart_rx_reset();
    e65c:	f7ff ff32 	bl	e4c4 <app_uart_rx_reset>
    if (old_mode != new_mode) {
    e660:	7823      	ldrb	r3, [r4, #0]
    e662:	b103      	cbz	r3, e666 <state_set.constprop.0+0x66>
        p_cmd_ctx->mode = new_mode;
    e664:	7025      	strb	r5, [r4, #0]
    e666:	4b1f      	ldr	r3, [pc, #124]	; (e6e4 <state_set.constprop.0+0xe4>)
    e668:	481f      	ldr	r0, [pc, #124]	; (e6e8 <state_set.constprop.0+0xe8>)
        LOG_DBG("--------------");
    e66a:	4a20      	ldr	r2, [pc, #128]	; (e6ec <state_set.constprop.0+0xec>)
    e66c:	4920      	ldr	r1, [pc, #128]	; (e6f0 <state_set.constprop.0+0xf0>)
    e66e:	1ac0      	subs	r0, r0, r3
    e670:	08c0      	lsrs	r0, r0, #3
    e672:	0180      	lsls	r0, r0, #6
    e674:	f040 0004 	orr.w	r0, r0, #4
}
    e678:	b003      	add	sp, #12
    e67a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        LOG_DBG("--------------");
    e67e:	f00c bad3 	b.w	1ac28 <log_string_sync>
    e682:	2201      	movs	r2, #1
    if (old_mode != new_mode) {
    e684:	4293      	cmp	r3, r2
    e686:	7062      	strb	r2, [r4, #1]
    e688:	d0c3      	beq.n	e612 <state_set.constprop.0+0x12>
        p_cmd_ctx->mode = new_mode;
    e68a:	7022      	strb	r2, [r4, #0]
    e68c:	e7c1      	b.n	e612 <state_set.constprop.0+0x12>
    e68e:	2302      	movs	r3, #2
    e690:	7063      	strb	r3, [r4, #1]
	z_impl_k_timer_start(timer, duration, period);
    e692:	2200      	movs	r2, #0
    e694:	2300      	movs	r3, #0
    e696:	e9cd 2300 	strd	r2, r3, [sp]
    e69a:	4816      	ldr	r0, [pc, #88]	; (e6f4 <state_set.constprop.0+0xf4>)
    e69c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    e6a0:	2300      	movs	r3, #0
    e6a2:	f00a faa1 	bl	18be8 <z_impl_k_timer_start>
        break;
    e6a6:	e7b4      	b.n	e612 <state_set.constprop.0+0x12>
    e6a8:	2308      	movs	r3, #8
    e6aa:	7063      	strb	r3, [r4, #1]
	z_impl_k_timer_stop(timer);
    e6ac:	4811      	ldr	r0, [pc, #68]	; (e6f4 <state_set.constprop.0+0xf4>)
    e6ae:	f00d fa05 	bl	1babc <z_impl_k_timer_stop>
        k_work_submit(&wk_proc_rsp);
    e6b2:	4811      	ldr	r0, [pc, #68]	; (e6f8 <state_set.constprop.0+0xf8>)
}
    e6b4:	b003      	add	sp, #12
    e6b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        k_work_submit(&wk_proc_req);
    e6ba:	f008 bad1 	b.w	16c60 <k_work_submit>
    e6be:	2203      	movs	r2, #3
    if (old_mode != new_mode) {
    e6c0:	2b02      	cmp	r3, #2
    e6c2:	7062      	strb	r2, [r4, #1]
    e6c4:	d0a5      	beq.n	e612 <state_set.constprop.0+0x12>
        p_cmd_ctx->mode = new_mode;
    e6c6:	2302      	movs	r3, #2
    e6c8:	7023      	strb	r3, [r4, #0]
    e6ca:	e7a2      	b.n	e612 <state_set.constprop.0+0x12>
    e6cc:	2304      	movs	r3, #4
        k_work_submit(&wk_proc_req);
    e6ce:	480b      	ldr	r0, [pc, #44]	; (e6fc <state_set.constprop.0+0xfc>)
    e6d0:	7063      	strb	r3, [r4, #1]
    e6d2:	e7ef      	b.n	e6b4 <state_set.constprop.0+0xb4>
        if (mode_get(&m_cmd_ctx) != CMD_MODE_HOST) {
    e6d4:	2b01      	cmp	r3, #1
    e6d6:	d19e      	bne.n	e616 <state_set.constprop.0+0x16>
    e6d8:	230b      	movs	r3, #11
    e6da:	7063      	strb	r3, [r4, #1]
}
    e6dc:	e799      	b.n	e612 <state_set.constprop.0+0x12>
    e6de:	bf00      	nop
    e6e0:	20000934 	.word	0x20000934
    e6e4:	0001c940 	.word	0x0001c940
    e6e8:	0001c968 	.word	0x0001c968
    e6ec:	0001d5d3 	.word	0x0001d5d3
    e6f0:	0001d39f 	.word	0x0001d39f
    e6f4:	20000418 	.word	0x20000418
    e6f8:	20000968 	.word	0x20000968
    e6fc:	20000958 	.word	0x20000958

0000e700 <on_cmd_receive_error>:
{
    e700:	b508      	push	{r3, lr}
    e702:	4808      	ldr	r0, [pc, #32]	; (e724 <on_cmd_receive_error+0x24>)
    e704:	4b08      	ldr	r3, [pc, #32]	; (e728 <on_cmd_receive_error+0x28>)
    LOG_ERR("%s", __func__);
    e706:	4a09      	ldr	r2, [pc, #36]	; (e72c <on_cmd_receive_error+0x2c>)
    e708:	4909      	ldr	r1, [pc, #36]	; (e730 <on_cmd_receive_error+0x30>)
    e70a:	1ac0      	subs	r0, r0, r3
    e70c:	08c0      	lsrs	r0, r0, #3
    e70e:	0180      	lsls	r0, r0, #6
    e710:	f040 0001 	orr.w	r0, r0, #1
    e714:	f00c fa88 	bl	1ac28 <log_string_sync>
}
    e718:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    state_set(&m_cmd_ctx, CMD_STATE_ERR_RECEIVE);
    e71c:	200b      	movs	r0, #11
    e71e:	f7ff bf6f 	b.w	e600 <state_set.constprop.0>
    e722:	bf00      	nop
    e724:	0001c968 	.word	0x0001c968
    e728:	0001c940 	.word	0x0001c940
    e72c:	0001d647 	.word	0x0001d647
    e730:	0001d38f 	.word	0x0001d38f

0000e734 <on_uart_rx_ready>:
{
    e734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
    e738:	4b69      	ldr	r3, [pc, #420]	; (e8e0 <on_uart_rx_ready+0x1ac>)
    e73a:	4c6a      	ldr	r4, [pc, #424]	; (e8e4 <on_uart_rx_ready+0x1b0>)
    e73c:	781a      	ldrb	r2, [r3, #0]
{
    e73e:	4689      	mov	r9, r1
    e740:	4969      	ldr	r1, [pc, #420]	; (e8e8 <on_uart_rx_ready+0x1b4>)
    e742:	1a64      	subs	r4, r4, r1
    e744:	08e4      	lsrs	r4, r4, #3
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
    e746:	2a01      	cmp	r2, #1
{
    e748:	4682      	mov	sl, r0
    e74a:	4698      	mov	r8, r3
    e74c:	ea4f 1484 	mov.w	r4, r4, lsl #6
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
    e750:	d10b      	bne.n	e76a <on_uart_rx_ready+0x36>
        if (m_cmd_ctx.state != CMD_STATE_REQ_SENT &&
    e752:	785b      	ldrb	r3, [r3, #1]
    e754:	2b02      	cmp	r3, #2
    e756:	d00f      	beq.n	e778 <on_uart_rx_ready+0x44>
    e758:	2b07      	cmp	r3, #7
    e75a:	d00d      	beq.n	e778 <on_uart_rx_ready+0x44>
            LOG_WRN("Invalid state for rx(host)");
    e75c:	4963      	ldr	r1, [pc, #396]	; (e8ec <on_uart_rx_ready+0x1b8>)
            LOG_WRN("Invalid state for rx(slave)");
    e75e:	f044 0002 	orr.w	r0, r4, #2
}
    e762:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            LOG_WRN("Invalid state for rx(slave)");
    e766:	f00c ba5f 	b.w	1ac28 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
    e76a:	2a02      	cmp	r2, #2
    e76c:	d104      	bne.n	e778 <on_uart_rx_ready+0x44>
        if (m_cmd_ctx.state != CMD_STATE_REQ_RECEIVING) {
    e76e:	785b      	ldrb	r3, [r3, #1]
    e770:	2b03      	cmp	r3, #3
    e772:	d001      	beq.n	e778 <on_uart_rx_ready+0x44>
            LOG_WRN("Invalid state for rx(slave)");
    e774:	495e      	ldr	r1, [pc, #376]	; (e8f0 <on_uart_rx_ready+0x1bc>)
    e776:	e7f2      	b.n	e75e <on_uart_rx_ready+0x2a>
    if (!rx_started) {
    e778:	4e5e      	ldr	r6, [pc, #376]	; (e8f4 <on_uart_rx_ready+0x1c0>)
    LOG_INF("Length Rec: %hd",length);
    e77a:	495f      	ldr	r1, [pc, #380]	; (e8f8 <on_uart_rx_ready+0x1c4>)
    e77c:	4d5f      	ldr	r5, [pc, #380]	; (e8fc <on_uart_rx_ready+0x1c8>)
    e77e:	4f60      	ldr	r7, [pc, #384]	; (e900 <on_uart_rx_ready+0x1cc>)
    e780:	464a      	mov	r2, r9
    e782:	f044 0003 	orr.w	r0, r4, #3
    e786:	f00c fa4f 	bl	1ac28 <log_string_sync>
    if (!rx_started) {
    e78a:	f896 b000 	ldrb.w	fp, [r6]
    e78e:	f1bb 0f00 	cmp.w	fp, #0
    e792:	d126      	bne.n	e7e2 <on_uart_rx_ready+0xae>
    p_buff->p_data = p_pool;
    e794:	485b      	ldr	r0, [pc, #364]	; (e904 <on_uart_rx_ready+0x1d0>)
        rx_started = true;
    e796:	2301      	movs	r3, #1
    e798:	7033      	strb	r3, [r6, #0]
        memcpy(m_rx_buff.p_data, p_data, length);
    e79a:	464a      	mov	r2, r9
    e79c:	f44f 6382 	mov.w	r3, #1040	; 0x410
    e7a0:	4651      	mov	r1, sl
    p_buff->length = 0;
    e7a2:	e9c5 0b00 	strd	r0, fp, [r5]
        memcpy(m_rx_buff.p_data, p_data, length);
    e7a6:	f00d f9d6 	bl	1bb56 <__memcpy_chk>
    LOG_DBG("%s", __func__);
    e7aa:	4b57      	ldr	r3, [pc, #348]	; (e908 <on_uart_rx_ready+0x1d4>)
    e7ac:	4957      	ldr	r1, [pc, #348]	; (e90c <on_uart_rx_ready+0x1d8>)
        m_rx_buff.length = length;
    e7ae:	f8a5 9004 	strh.w	r9, [r5, #4]
    LOG_DBG("%s", __func__);
    e7b2:	f044 0004 	orr.w	r0, r4, #4
    e7b6:	461a      	mov	r2, r3
        cmd_len = 0;
    e7b8:	f8a7 b000 	strh.w	fp, [r7]
    LOG_DBG("%s", __func__);
    e7bc:	f00c fa34 	bl	1ac28 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
    e7c0:	f898 3000 	ldrb.w	r3, [r8]
    e7c4:	2b01      	cmp	r3, #1
        state_set(&m_cmd_ctx, CMD_STATE_RSP_RECEIVING);
    e7c6:	bf0c      	ite	eq
    e7c8:	2007      	moveq	r0, #7
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVING);
    e7ca:	2003      	movne	r0, #3
    e7cc:	f7ff ff18 	bl	e600 <state_set.constprop.0>
    if (cmd_len == 0) {
    e7d0:	883b      	ldrh	r3, [r7, #0]
    e7d2:	b15b      	cbz	r3, e7ec <on_uart_rx_ready+0xb8>
    if (m_rx_buff.length < cmd_len) {
    e7d4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    e7d8:	883b      	ldrh	r3, [r7, #0]
    e7da:	4563      	cmp	r3, ip
    e7dc:	d91f      	bls.n	e81e <on_uart_rx_ready+0xea>
}
    e7de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_rx_buff.length += length;
    e7e2:	88aa      	ldrh	r2, [r5, #4]
    e7e4:	4491      	add	r9, r2
    e7e6:	f8a5 9004 	strh.w	r9, [r5, #4]
    e7ea:	e7f1      	b.n	e7d0 <on_uart_rx_ready+0x9c>
    if (p_buff->length > CMD_FMT_SIZE_START + CMD_FMT_SIZE_LEN) {
    e7ec:	88ab      	ldrh	r3, [r5, #4]
    e7ee:	2b03      	cmp	r3, #3
    e7f0:	d9f5      	bls.n	e7de <on_uart_rx_ready+0xaa>
    p_data = p_buff->p_data;
    e7f2:	682b      	ldr	r3, [r5, #0]
	return ((uint16_t)src[1] << 8) | src[0];
    e7f4:	7899      	ldrb	r1, [r3, #2]
    e7f6:	785a      	ldrb	r2, [r3, #1]
    e7f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
        cmd_len = CMD_FMT_OFFSET_OPCODE + CMD_FMT_SIZE_CRC + uint16_decode(&p_data[CMD_FMT_OFFSET_LEN]);
    e7fc:	3205      	adds	r2, #5
    e7fe:	b292      	uxth	r2, r2
        if (cmd_len > CMD_PACKET_LENGTH) {
    e800:	f5b2 6f82 	cmp.w	r2, #1040	; 0x410
        cmd_len = cmd_len_get(&m_rx_buff);
    e804:	803a      	strh	r2, [r7, #0]
        if (cmd_len > CMD_PACKET_LENGTH) {
    e806:	d906      	bls.n	e816 <on_uart_rx_ready+0xe2>
            LOG_ERR("CMD_Len Larger than Packet Length %d",cmd_len);
    e808:	4941      	ldr	r1, [pc, #260]	; (e910 <on_uart_rx_ready+0x1dc>)
    e80a:	f044 0001 	orr.w	r0, r4, #1
    e80e:	f00c fa0b 	bl	1ac28 <log_string_sync>
            on_cmd_receive_error();
    e812:	f7ff ff75 	bl	e700 <on_cmd_receive_error>
        if (cmd_len == 0) {
    e816:	883b      	ldrh	r3, [r7, #0]
    e818:	2b00      	cmp	r3, #0
    e81a:	d1db      	bne.n	e7d4 <on_uart_rx_ready+0xa0>
    e81c:	e7df      	b.n	e7de <on_uart_rx_ready+0xaa>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
    e81e:	f898 7000 	ldrb.w	r7, [r8]
    e822:	2f01      	cmp	r7, #1
    e824:	d118      	bne.n	e858 <on_uart_rx_ready+0x124>
    if (p_buff == NULL || p_buff->p_data == NULL) {
    e826:	4b3b      	ldr	r3, [pc, #236]	; (e914 <on_uart_rx_ready+0x1e0>)
    e828:	6818      	ldr	r0, [r3, #0]
    e82a:	b100      	cbz	r0, e82e <on_uart_rx_ready+0xfa>
    *op_code = p_buff->p_data[CMD_FMT_OFFSET_OPCODE];
    e82c:	78c0      	ldrb	r0, [r0, #3]
    uint8_t* p_data = p_buff->p_data;
    e82e:	6829      	ldr	r1, [r5, #0]
    if (mode == CMD_MODE_HOST &&
    e830:	2f01      	cmp	r7, #1
    e832:	d113      	bne.n	e85c <on_uart_rx_ready+0x128>
    e834:	780b      	ldrb	r3, [r1, #0]
    e836:	2b51      	cmp	r3, #81	; 0x51
    e838:	d017      	beq.n	e86a <on_uart_rx_ready+0x136>
        LOG_ERR("Invalid cmd format: start(host)");
    e83a:	4937      	ldr	r1, [pc, #220]	; (e918 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: start(slave)");
    e83c:	f044 0001 	orr.w	r0, r4, #1
    e840:	f00c f9f2 	bl	1ac28 <log_string_sync>
        LOG_ERR("Command has Invald Format");
    e844:	4935      	ldr	r1, [pc, #212]	; (e91c <on_uart_rx_ready+0x1e8>)
    e846:	f044 0001 	orr.w	r0, r4, #1
    e84a:	f00c f9ed 	bl	1ac28 <log_string_sync>
        on_cmd_receive_error();
    e84e:	f7ff ff57 	bl	e700 <on_cmd_receive_error>
    rx_started = false;
    e852:	2300      	movs	r3, #0
    e854:	7033      	strb	r3, [r6, #0]
    e856:	e7c2      	b.n	e7de <on_uart_rx_ready+0xaa>
    req_op_code = 0;
    e858:	2000      	movs	r0, #0
    e85a:	e7e8      	b.n	e82e <on_uart_rx_ready+0xfa>
    else if (mode == CMD_MODE_SLAVE &&
    e85c:	2f02      	cmp	r7, #2
    e85e:	d104      	bne.n	e86a <on_uart_rx_ready+0x136>
    e860:	780b      	ldrb	r3, [r1, #0]
    e862:	2b59      	cmp	r3, #89	; 0x59
    e864:	d001      	beq.n	e86a <on_uart_rx_ready+0x136>
        LOG_ERR("Invalid cmd format: start(slave)");
    e866:	492e      	ldr	r1, [pc, #184]	; (e920 <on_uart_rx_ready+0x1ec>)
    e868:	e7e8      	b.n	e83c <on_uart_rx_ready+0x108>
    e86a:	788b      	ldrb	r3, [r1, #2]
    e86c:	784a      	ldrb	r2, [r1, #1]
    e86e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    e872:	b212      	sxth	r2, r2
        CMD_FMT_OFFSET_OPCODE + CMD_FMT_SIZE_CRC;
    e874:	1d53      	adds	r3, r2, #5
    cmd_len = uint16_decode(&p_data[CMD_FMT_OFFSET_LEN]) +
    e876:	b29b      	uxth	r3, r3
    if (length != cmd_len) {
    e878:	459c      	cmp	ip, r3
    e87a:	d001      	beq.n	e880 <on_uart_rx_ready+0x14c>
        LOG_ERR("Invalid cmd format: length");
    e87c:	4929      	ldr	r1, [pc, #164]	; (e924 <on_uart_rx_ready+0x1f0>)
    e87e:	e7dd      	b.n	e83c <on_uart_rx_ready+0x108>
    if (mode == CMD_MODE_HOST &&
    e880:	2f01      	cmp	r7, #1
    e882:	d104      	bne.n	e88e <on_uart_rx_ready+0x15a>
    e884:	78cd      	ldrb	r5, [r1, #3]
    e886:	4285      	cmp	r5, r0
    e888:	d001      	beq.n	e88e <on_uart_rx_ready+0x15a>
        LOG_ERR("Invalid cmd format: op code");
    e88a:	4927      	ldr	r1, [pc, #156]	; (e928 <on_uart_rx_ready+0x1f4>)
    e88c:	e7d6      	b.n	e83c <on_uart_rx_ready+0x108>
    cmd_crc = uint16_decode(&p_data[cmd_len - CMD_FMT_SIZE_CRC]);
    e88e:	3b02      	subs	r3, #2
    e890:	18c8      	adds	r0, r1, r3
    e892:	5ccd      	ldrb	r5, [r1, r3]
    e894:	7840      	ldrb	r0, [r0, #1]
        cmd_len - CMD_FMT_SIZE_START - CMD_FMT_SIZE_CRC,
    e896:	3202      	adds	r2, #2
    e898:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    return crc16_compute(p_data, length) == crc_target;
    e89c:	b292      	uxth	r2, r2
    e89e:	3101      	adds	r1, #1
    e8a0:	2000      	movs	r0, #0
    e8a2:	f00b ffec 	bl	1a87e <crc16_itu_t>
    if (!crc_ok) {
    e8a6:	4285      	cmp	r5, r0
    e8a8:	d001      	beq.n	e8ae <on_uart_rx_ready+0x17a>
        LOG_ERR("Invalid cmd format: crc");
    e8aa:	4920      	ldr	r1, [pc, #128]	; (e92c <on_uart_rx_ready+0x1f8>)
    e8ac:	e7c6      	b.n	e83c <on_uart_rx_ready+0x108>
    LOG_DBG("%s", __func__);
    e8ae:	4b20      	ldr	r3, [pc, #128]	; (e930 <on_uart_rx_ready+0x1fc>)
    e8b0:	4916      	ldr	r1, [pc, #88]	; (e90c <on_uart_rx_ready+0x1d8>)
    e8b2:	461a      	mov	r2, r3
    e8b4:	f044 0004 	orr.w	r0, r4, #4
    e8b8:	f00c f9b6 	bl	1ac28 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
    e8bc:	f898 3000 	ldrb.w	r3, [r8]
    e8c0:	2b01      	cmp	r3, #1
    e8c2:	d103      	bne.n	e8cc <on_uart_rx_ready+0x198>
        state_set(&m_cmd_ctx, CMD_STATE_RSP_RECEIVED);
    e8c4:	2008      	movs	r0, #8
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVED);
    e8c6:	f7ff fe9b 	bl	e600 <state_set.constprop.0>
    e8ca:	e7c2      	b.n	e852 <on_uart_rx_ready+0x11e>
    else if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
    e8cc:	2b02      	cmp	r3, #2
    e8ce:	d101      	bne.n	e8d4 <on_uart_rx_ready+0x1a0>
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVED);
    e8d0:	2004      	movs	r0, #4
    e8d2:	e7f8      	b.n	e8c6 <on_uart_rx_ready+0x192>
        LOG_WRN("Should not come here");
    e8d4:	4917      	ldr	r1, [pc, #92]	; (e934 <on_uart_rx_ready+0x200>)
    e8d6:	f044 0002 	orr.w	r0, r4, #2
    e8da:	f00c f9a5 	bl	1ac28 <log_string_sync>
    e8de:	e7b8      	b.n	e852 <on_uart_rx_ready+0x11e>
    e8e0:	20000934 	.word	0x20000934
    e8e4:	0001c968 	.word	0x0001c968
    e8e8:	0001c940 	.word	0x0001c940
    e8ec:	0001d3b2 	.word	0x0001d3b2
    e8f0:	0001d3cd 	.word	0x0001d3cd
    e8f4:	200025b0 	.word	0x200025b0
    e8f8:	0001d3e9 	.word	0x0001d3e9
    e8fc:	20000948 	.word	0x20000948
    e900:	20001160 	.word	0x20001160
    e904:	20001d90 	.word	0x20001d90
    e908:	0001d61a 	.word	0x0001d61a
    e90c:	0001d38b 	.word	0x0001d38b
    e910:	0001d3f9 	.word	0x0001d3f9
    e914:	20000950 	.word	0x20000950
    e918:	0001d41e 	.word	0x0001d41e
    e91c:	0001d4c3 	.word	0x0001d4c3
    e920:	0001d43e 	.word	0x0001d43e
    e924:	0001d45f 	.word	0x0001d45f
    e928:	0001d47a 	.word	0x0001d47a
    e92c:	0001d496 	.word	0x0001d496
    e930:	0001d62f 	.word	0x0001d62f
    e934:	0001d4ae 	.word	0x0001d4ae

0000e938 <on_cmd_send_error>:
{
    e938:	b508      	push	{r3, lr}
    e93a:	4808      	ldr	r0, [pc, #32]	; (e95c <on_cmd_send_error+0x24>)
    e93c:	4b08      	ldr	r3, [pc, #32]	; (e960 <on_cmd_send_error+0x28>)
    LOG_ERR("%s", __func__);
    e93e:	4a09      	ldr	r2, [pc, #36]	; (e964 <on_cmd_send_error+0x2c>)
    e940:	4909      	ldr	r1, [pc, #36]	; (e968 <on_cmd_send_error+0x30>)
    e942:	1ac0      	subs	r0, r0, r3
    e944:	08c0      	lsrs	r0, r0, #3
    e946:	0180      	lsls	r0, r0, #6
    e948:	f040 0001 	orr.w	r0, r0, #1
    e94c:	f00c f96c 	bl	1ac28 <log_string_sync>
}
    e950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
    e954:	200a      	movs	r0, #10
    e956:	f7ff be53 	b.w	e600 <state_set.constprop.0>
    e95a:	bf00      	nop
    e95c:	0001c968 	.word	0x0001c968
    e960:	0001c940 	.word	0x0001c940
    e964:	0001d608 	.word	0x0001d608
    e968:	0001d38f 	.word	0x0001d38f

0000e96c <on_uart_tx_empty>:
{
    e96c:	b570      	push	{r4, r5, r6, lr}
    e96e:	4b16      	ldr	r3, [pc, #88]	; (e9c8 <on_uart_tx_empty+0x5c>)
    e970:	4c16      	ldr	r4, [pc, #88]	; (e9cc <on_uart_tx_empty+0x60>)
    LOG_DBG("%s", __func__);
    e972:	4917      	ldr	r1, [pc, #92]	; (e9d0 <on_uart_tx_empty+0x64>)
    e974:	1ae4      	subs	r4, r4, r3
    e976:	08e4      	lsrs	r4, r4, #3
    e978:	4b16      	ldr	r3, [pc, #88]	; (e9d4 <on_uart_tx_empty+0x68>)
    e97a:	01a4      	lsls	r4, r4, #6
    e97c:	f044 0604 	orr.w	r6, r4, #4
{
    e980:	4605      	mov	r5, r0
    LOG_DBG("%s", __func__);
    e982:	461a      	mov	r2, r3
    e984:	4630      	mov	r0, r6
    e986:	f00c f94f 	bl	1ac28 <log_string_sync>
    if (event == 0) {
    e98a:	b9cd      	cbnz	r5, e9c0 <on_uart_tx_empty+0x54>
    LOG_DBG("%s", __func__);
    e98c:	4b12      	ldr	r3, [pc, #72]	; (e9d8 <on_uart_tx_empty+0x6c>)
    e98e:	4910      	ldr	r1, [pc, #64]	; (e9d0 <on_uart_tx_empty+0x64>)
    e990:	461a      	mov	r2, r3
    e992:	4630      	mov	r0, r6
    e994:	f00c f948 	bl	1ac28 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
    e998:	4b10      	ldr	r3, [pc, #64]	; (e9dc <on_uart_tx_empty+0x70>)
    e99a:	781b      	ldrb	r3, [r3, #0]
    e99c:	2b01      	cmp	r3, #1
    e99e:	d104      	bne.n	e9aa <on_uart_tx_empty+0x3e>
        state_set(&m_cmd_ctx, CMD_STATE_REQ_SENT);
    e9a0:	2002      	movs	r0, #2
}
    e9a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        state_set(&m_cmd_ctx, CMD_STATE_RSP_SENT);
    e9a6:	f7ff be2b 	b.w	e600 <state_set.constprop.0>
    else if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
    e9aa:	2b02      	cmp	r3, #2
    e9ac:	d101      	bne.n	e9b2 <on_uart_tx_empty+0x46>
        state_set(&m_cmd_ctx, CMD_STATE_RSP_SENT);
    e9ae:	2006      	movs	r0, #6
    e9b0:	e7f7      	b.n	e9a2 <on_uart_tx_empty+0x36>
        LOG_ERR("Should not come here");
    e9b2:	f044 0001 	orr.w	r0, r4, #1
    e9b6:	490a      	ldr	r1, [pc, #40]	; (e9e0 <on_uart_tx_empty+0x74>)
}
    e9b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        LOG_ERR("Should not come here");
    e9bc:	f00c b934 	b.w	1ac28 <log_string_sync>
}
    e9c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        on_cmd_send_error();
    e9c4:	f7ff bfb8 	b.w	e938 <on_cmd_send_error>
    e9c8:	0001c940 	.word	0x0001c940
    e9cc:	0001c968 	.word	0x0001c968
    e9d0:	0001d38b 	.word	0x0001d38b
    e9d4:	0001d6ac 	.word	0x0001d6ac
    e9d8:	0001d5f3 	.word	0x0001d5f3
    e9dc:	20000934 	.word	0x20000934
    e9e0:	0001d4ae 	.word	0x0001d4ae

0000e9e4 <cmd_send>:
{
    e9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e9e6:	4607      	mov	r7, r0
    e9e8:	4b24      	ldr	r3, [pc, #144]	; (ea7c <cmd_send+0x98>)
    e9ea:	4825      	ldr	r0, [pc, #148]	; (ea80 <cmd_send+0x9c>)
    LOG_DBG("%s", __func__);
    e9ec:	4925      	ldr	r1, [pc, #148]	; (ea84 <cmd_send+0xa0>)
    p_buff->p_data = p_pool;
    e9ee:	4c26      	ldr	r4, [pc, #152]	; (ea88 <cmd_send+0xa4>)
    e9f0:	1ac0      	subs	r0, r0, r3
    e9f2:	08c0      	lsrs	r0, r0, #3
    LOG_DBG("%s", __func__);
    e9f4:	4b25      	ldr	r3, [pc, #148]	; (ea8c <cmd_send+0xa8>)
    e9f6:	0180      	lsls	r0, r0, #6
    e9f8:	461a      	mov	r2, r3
    e9fa:	f040 0004 	orr.w	r0, r0, #4
    e9fe:	f00c f913 	bl	1ac28 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
    ea02:	4b23      	ldr	r3, [pc, #140]	; (ea90 <cmd_send+0xac>)
    ea04:	781b      	ldrb	r3, [r3, #0]
    ea06:	2b02      	cmp	r3, #2
        state_set(&m_cmd_ctx, CMD_STATE_RSP_SENDING);
    ea08:	bf0c      	ite	eq
    ea0a:	2005      	moveq	r0, #5
        state_set(&m_cmd_ctx, CMD_STATE_REQ_SENDING);
    ea0c:	2001      	movne	r0, #1
    ea0e:	f7ff fdf7 	bl	e600 <state_set.constprop.0>
    p_buff->p_data = p_pool;
    ea12:	4a20      	ldr	r2, [pc, #128]	; (ea94 <cmd_send+0xb0>)
    uint16_encode(CMD_FMT_SIZE_OPCODE + pdu_len,
    ea14:	f9b7 5008 	ldrsh.w	r5, [r7, #8]
    p_buff->p_data = p_pool;
    ea18:	6014      	str	r4, [r2, #0]
    p_buff->length = 0;
    ea1a:	2100      	movs	r1, #0
    ea1c:	6051      	str	r1, [r2, #4]
    p_packet[CMD_FMT_OFFSET_START] =
    ea1e:	783a      	ldrb	r2, [r7, #0]
    pdu_len = p_cmd->length;
    ea20:	893e      	ldrh	r6, [r7, #8]
    p_packet[CMD_FMT_OFFSET_START] =
    ea22:	2a01      	cmp	r2, #1
    ea24:	bf0c      	ite	eq
    ea26:	2251      	moveq	r2, #81	; 0x51
    ea28:	2259      	movne	r2, #89	; 0x59
    ea2a:	7022      	strb	r2, [r4, #0]
    uint16_encode(CMD_FMT_SIZE_OPCODE + pdu_len,
    ea2c:	1c6a      	adds	r2, r5, #1
    ea2e:	b212      	sxth	r2, r2
	dst[0] = val;
    ea30:	7062      	strb	r2, [r4, #1]
	dst[1] = val >> 8;
    ea32:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ea36:	70a2      	strb	r2, [r4, #2]
    p_packet[CMD_FMT_OFFSET_OPCODE] = p_cmd->op_code;
    ea38:	787a      	ldrb	r2, [r7, #1]
    ea3a:	70e2      	strb	r2, [r4, #3]
    if (pdu_len > 0 && p_cmd->p_data != NULL) {
    ea3c:	b12e      	cbz	r6, ea4a <cmd_send+0x66>
    ea3e:	6879      	ldr	r1, [r7, #4]
    ea40:	b119      	cbz	r1, ea4a <cmd_send+0x66>
    ea42:	4632      	mov	r2, r6
    ea44:	1d20      	adds	r0, r4, #4
    ea46:	f00d f878 	bl	1bb3a <memcpy>
    crc16 = crc16_compute(&p_packet[CMD_FMT_OFFSET_LEN],
    ea4a:	4913      	ldr	r1, [pc, #76]	; (ea98 <cmd_send+0xb4>)
    ea4c:	1cf2      	adds	r2, r6, #3
    ea4e:	2000      	movs	r0, #0
    ea50:	f00b ff15 	bl	1a87e <crc16_itu_t>
    uint16_encode(crc16, &p_packet[CMD_FMT_OFFSET_PDU + pdu_len]);
    ea54:	3604      	adds	r6, #4
    ea56:	19a3      	adds	r3, r4, r6
    pkt_len = CMD_FMT_OFFSET_PDU + pdu_len + CMD_FMT_SIZE_CRC;
    ea58:	1da9      	adds	r1, r5, #6
	dst[0] = val;
    ea5a:	55a0      	strb	r0, [r4, r6]
    ea5c:	b289      	uxth	r1, r1
	dst[1] = val >> 8;
    ea5e:	0a00      	lsrs	r0, r0, #8
    ea60:	7058      	strb	r0, [r3, #1]
    pkt_len = MIN(pkt_len, CMD_PACKET_LENGTH);
    ea62:	f5b1 6f82 	cmp.w	r1, #1040	; 0x410
    p_buff->length = pkt_len;
    ea66:	4b0b      	ldr	r3, [pc, #44]	; (ea94 <cmd_send+0xb0>)
    pkt_len = MIN(pkt_len, CMD_PACKET_LENGTH);
    ea68:	bf28      	it	cs
    ea6a:	f44f 6182 	movcs.w	r1, #1040	; 0x410
    return app_uart_send(m_tx_buff.p_data, m_tx_buff.length);
    ea6e:	6818      	ldr	r0, [r3, #0]
    p_buff->length = pkt_len;
    ea70:	8099      	strh	r1, [r3, #4]
}
    ea72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return app_uart_send(m_tx_buff.p_data, m_tx_buff.length);
    ea76:	f7ff bc33 	b.w	e2e0 <app_uart_send>
    ea7a:	bf00      	nop
    ea7c:	0001c940 	.word	0x0001c940
    ea80:	0001c968 	.word	0x0001c968
    ea84:	0001d38b 	.word	0x0001d38b
    ea88:	200021a0 	.word	0x200021a0
    ea8c:	0001d5e1 	.word	0x0001d5e1
    ea90:	20000934 	.word	0x20000934
    ea94:	20000950 	.word	0x20000950
    ea98:	200021a1 	.word	0x200021a1

0000ea9c <app_cmd_respond>:
{
    ea9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (state_get(&m_cmd_ctx) != CMD_STATE_REQ_RECEIVED &&
    ea9e:	4b19      	ldr	r3, [pc, #100]	; (eb04 <app_cmd_respond+0x68>)
    eaa0:	785a      	ldrb	r2, [r3, #1]
    eaa2:	2a04      	cmp	r2, #4
    eaa4:	d00e      	beq.n	eac4 <app_cmd_respond+0x28>
    eaa6:	2a02      	cmp	r2, #2
    eaa8:	d00c      	beq.n	eac4 <app_cmd_respond+0x28>
    eaaa:	4817      	ldr	r0, [pc, #92]	; (eb08 <app_cmd_respond+0x6c>)
    eaac:	4b17      	ldr	r3, [pc, #92]	; (eb0c <app_cmd_respond+0x70>)
        LOG_ERR("Invalid state for response:%d", state_get(&m_cmd_ctx));
    eaae:	4918      	ldr	r1, [pc, #96]	; (eb10 <app_cmd_respond+0x74>)
    eab0:	1ac0      	subs	r0, r0, r3
    eab2:	08c0      	lsrs	r0, r0, #3
    eab4:	0180      	lsls	r0, r0, #6
    eab6:	f040 0001 	orr.w	r0, r0, #1
    eaba:	f00c f8b5 	bl	1ac28 <log_string_sync>
        on_cmd_send_error();
    eabe:	f04f 30ff 	mov.w	r0, #4294967295
    eac2:	e00e      	b.n	eae2 <app_cmd_respond+0x46>
    if (p_buff == NULL || p_buff->p_data == NULL) {
    eac4:	4b13      	ldr	r3, [pc, #76]	; (eb14 <app_cmd_respond+0x78>)
    eac6:	681b      	ldr	r3, [r3, #0]
    eac8:	b173      	cbz	r3, eae8 <app_cmd_respond+0x4c>
    *op_code = p_buff->p_data[CMD_FMT_OFFSET_OPCODE];
    eaca:	78db      	ldrb	r3, [r3, #3]
    cmd.p_data = p_data;
    eacc:	9002      	str	r0, [sp, #8]
    cmd.type = CMD_TYPE_RESPONSE;
    eace:	2201      	movs	r2, #1
    return cmd_send(&cmd);
    ead0:	a801      	add	r0, sp, #4
    cmd.type = CMD_TYPE_RESPONSE;
    ead2:	f88d 2004 	strb.w	r2, [sp, #4]
    cmd.op_code = op_code;
    ead6:	f88d 3005 	strb.w	r3, [sp, #5]
    cmd.length = length;
    eada:	f8ad 100c 	strh.w	r1, [sp, #12]
    return cmd_send(&cmd);
    eade:	f7ff ff81 	bl	e9e4 <cmd_send>
}
    eae2:	b005      	add	sp, #20
    eae4:	f85d fb04 	ldr.w	pc, [sp], #4
    eae8:	4b08      	ldr	r3, [pc, #32]	; (eb0c <app_cmd_respond+0x70>)
    eaea:	4807      	ldr	r0, [pc, #28]	; (eb08 <app_cmd_respond+0x6c>)
        LOG_ERR("rx buffer is reset too early");
    eaec:	490a      	ldr	r1, [pc, #40]	; (eb18 <app_cmd_respond+0x7c>)
    eaee:	1ac0      	subs	r0, r0, r3
    eaf0:	08c0      	lsrs	r0, r0, #3
    eaf2:	0180      	lsls	r0, r0, #6
    eaf4:	f040 0001 	orr.w	r0, r0, #1
    eaf8:	f00c f896 	bl	1ac28 <log_string_sync>
        on_cmd_send_error();
    eafc:	f7ff ff1c 	bl	e938 <on_cmd_send_error>
    eb00:	e7dd      	b.n	eabe <app_cmd_respond+0x22>
    eb02:	bf00      	nop
    eb04:	20000934 	.word	0x20000934
    eb08:	0001c968 	.word	0x0001c968
    eb0c:	0001c940 	.word	0x0001c940
    eb10:	0001d4dd 	.word	0x0001d4dd
    eb14:	20000948 	.word	0x20000948
    eb18:	0001d4fb 	.word	0x0001d4fb

0000eb1c <cmd_cb_cnt>:
        if (m_cb_list[i].op_code == 0) {
    eb1c:	4b05      	ldr	r3, [pc, #20]	; (eb34 <cmd_cb_cnt+0x18>)
    for (int i = 0; i < CMD_CB_LIST_LEN; i++) {
    eb1e:	2000      	movs	r0, #0
        if (m_cb_list[i].op_code == 0) {
    eb20:	220c      	movs	r2, #12
    eb22:	fb02 f100 	mul.w	r1, r2, r0
    eb26:	5cc9      	ldrb	r1, [r1, r3]
    eb28:	b111      	cbz	r1, eb30 <cmd_cb_cnt+0x14>
    for (int i = 0; i < CMD_CB_LIST_LEN; i++) {
    eb2a:	3001      	adds	r0, #1
    eb2c:	2814      	cmp	r0, #20
    eb2e:	d1f8      	bne.n	eb22 <cmd_cb_cnt+0x6>
}
    eb30:	4770      	bx	lr
    eb32:	bf00      	nop
    eb34:	20000844 	.word	0x20000844

0000eb38 <cmd_cb_get>:
{
    eb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb3a:	4605      	mov	r5, r0
    eb3c:	460c      	mov	r4, r1
    count = cmd_cb_cnt();
    eb3e:	f7ff ffed 	bl	eb1c <cmd_cb_cnt>
        if (m_cb_list[i].op_code == op_code) {
    eb42:	4b0c      	ldr	r3, [pc, #48]	; (eb74 <cmd_cb_get+0x3c>)
    for (int i = 0; i < count; i++) {
    eb44:	2200      	movs	r2, #0
        if (m_cb_list[i].op_code == op_code) {
    eb46:	260c      	movs	r6, #12
    for (int i = 0; i < count; i++) {
    eb48:	4282      	cmp	r2, r0
    eb4a:	db02      	blt.n	eb52 <cmd_cb_get+0x1a>
    rc = -1;
    eb4c:	f04f 30ff 	mov.w	r0, #4294967295
    eb50:	e00b      	b.n	eb6a <cmd_cb_get+0x32>
        if (m_cb_list[i].op_code == op_code) {
    eb52:	fb06 f102 	mul.w	r1, r6, r2
    eb56:	5ccf      	ldrb	r7, [r1, r3]
    eb58:	42af      	cmp	r7, r5
    eb5a:	d107      	bne.n	eb6c <cmd_cb_get+0x34>
            if (p_cmd_cb != NULL) {
    eb5c:	b144      	cbz	r4, eb70 <cmd_cb_get+0x38>
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
    eb5e:	440b      	add	r3, r1
            rc = 0;
    eb60:	2000      	movs	r0, #0
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
    eb62:	685a      	ldr	r2, [r3, #4]
                p_cmd_cb->proc_rsp = m_cb_list[i].proc_rsp;
    eb64:	689b      	ldr	r3, [r3, #8]
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
    eb66:	6062      	str	r2, [r4, #4]
                p_cmd_cb->proc_rsp = m_cb_list[i].proc_rsp;
    eb68:	60a3      	str	r3, [r4, #8]
}
    eb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (int i = 0; i < count; i++) {
    eb6c:	3201      	adds	r2, #1
    eb6e:	e7eb      	b.n	eb48 <cmd_cb_get+0x10>
            rc = 0;
    eb70:	4620      	mov	r0, r4
    return rc;
    eb72:	e7fa      	b.n	eb6a <cmd_cb_get+0x32>
    eb74:	20000844 	.word	0x20000844

0000eb78 <tmr_rsp_timeout_handler>:
{
    eb78:	b530      	push	{r4, r5, lr}
    eb7a:	4b1f      	ldr	r3, [pc, #124]	; (ebf8 <tmr_rsp_timeout_handler+0x80>)
    eb7c:	4c1f      	ldr	r4, [pc, #124]	; (ebfc <tmr_rsp_timeout_handler+0x84>)
    LOG_DBG("%s", __func__);
    eb7e:	4920      	ldr	r1, [pc, #128]	; (ec00 <tmr_rsp_timeout_handler+0x88>)
    eb80:	1ae4      	subs	r4, r4, r3
    eb82:	08e4      	lsrs	r4, r4, #3
    eb84:	4b1f      	ldr	r3, [pc, #124]	; (ec04 <tmr_rsp_timeout_handler+0x8c>)
    eb86:	01a4      	lsls	r4, r4, #6
    eb88:	461a      	mov	r2, r3
{
    eb8a:	b089      	sub	sp, #36	; 0x24
    LOG_DBG("%s", __func__);
    eb8c:	f044 0004 	orr.w	r0, r4, #4
    eb90:	f00c f84a 	bl	1ac28 <log_string_sync>
    err_code = buff_to_cmd(&m_tx_buff, &cmd);
    eb94:	4b1c      	ldr	r3, [pc, #112]	; (ec08 <tmr_rsp_timeout_handler+0x90>)
    eb96:	681b      	ldr	r3, [r3, #0]
    if (p_buff->p_data == NULL || p_cmd == NULL) {
    eb98:	b933      	cbnz	r3, eba8 <tmr_rsp_timeout_handler+0x30>
        LOG_ERR("Buffer error");
    eb9a:	491c      	ldr	r1, [pc, #112]	; (ec0c <tmr_rsp_timeout_handler+0x94>)
    eb9c:	f044 0001 	orr.w	r0, r4, #1
    eba0:	f00c f842 	bl	1ac28 <log_string_sync>
}
    eba4:	b009      	add	sp, #36	; 0x24
    eba6:	bd30      	pop	{r4, r5, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
    eba8:	78dd      	ldrb	r5, [r3, #3]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
    ebaa:	a902      	add	r1, sp, #8
    ebac:	4628      	mov	r0, r5
    ebae:	f7ff ffc3 	bl	eb38 <cmd_cb_get>
    if (err_code == 0) {
    ebb2:	b9d0      	cbnz	r0, ebea <tmr_rsp_timeout_handler+0x72>
        uint8_t p_rsp[] = CMD_RSP_TIMEOUT;
    ebb4:	f646 7374 	movw	r3, #28532	; 0x6f74
    ebb8:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (cmd_cb.proc_rsp) {
    ebbc:	9b04      	ldr	r3, [sp, #16]
    ebbe:	ac01      	add	r4, sp, #4
    ebc0:	b113      	cbz	r3, ebc8 <tmr_rsp_timeout_handler+0x50>
            cmd_cb.proc_rsp(p_rsp, sizeof(p_rsp));
    ebc2:	2102      	movs	r1, #2
    ebc4:	4620      	mov	r0, r4
    ebc6:	4798      	blx	r3
        event.length = sizeof(p_rsp);
    ebc8:	2302      	movs	r3, #2
    ebca:	f8ad 301c 	strh.w	r3, [sp, #28]
        event.timeout = true;
    ebce:	2301      	movs	r3, #1
    ebd0:	f88d 301e 	strb.w	r3, [sp, #30]
        m_event_cb(&event);
    ebd4:	4b0e      	ldr	r3, [pc, #56]	; (ec10 <tmr_rsp_timeout_handler+0x98>)
        event.op_code = cmd.op_code;
    ebd6:	f88d 5014 	strb.w	r5, [sp, #20]
        m_event_cb(&event);
    ebda:	681b      	ldr	r3, [r3, #0]
        event.p_data = p_rsp;
    ebdc:	9406      	str	r4, [sp, #24]
        m_event_cb(&event);
    ebde:	a805      	add	r0, sp, #20
    ebe0:	4798      	blx	r3
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
    ebe2:	2000      	movs	r0, #0
    ebe4:	f7ff fd0c 	bl	e600 <state_set.constprop.0>
    ebe8:	e7dc      	b.n	eba4 <tmr_rsp_timeout_handler+0x2c>
        LOG_ERR("op is unregisterd(wait rsp)");
    ebea:	490a      	ldr	r1, [pc, #40]	; (ec14 <tmr_rsp_timeout_handler+0x9c>)
    ebec:	f044 0001 	orr.w	r0, r4, #1
    ebf0:	f00c f81a 	bl	1ac28 <log_string_sync>
    ebf4:	e7f5      	b.n	ebe2 <tmr_rsp_timeout_handler+0x6a>
    ebf6:	bf00      	nop
    ebf8:	0001c940 	.word	0x0001c940
    ebfc:	0001c968 	.word	0x0001c968
    ec00:	0001d38b 	.word	0x0001d38b
    ec04:	0001d65c 	.word	0x0001d65c
    ec08:	20000950 	.word	0x20000950
    ec0c:	0001d518 	.word	0x0001d518
    ec10:	20000944 	.word	0x20000944
    ec14:	0001d525 	.word	0x0001d525

0000ec18 <wk_proc_rsp_handler>:
{
    ec18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec1c:	4b20      	ldr	r3, [pc, #128]	; (eca0 <wk_proc_rsp_handler+0x88>)
    ec1e:	4c21      	ldr	r4, [pc, #132]	; (eca4 <wk_proc_rsp_handler+0x8c>)
    LOG_DBG("%s", __func__);
    ec20:	4921      	ldr	r1, [pc, #132]	; (eca8 <wk_proc_rsp_handler+0x90>)
    ec22:	1ae4      	subs	r4, r4, r3
    ec24:	08e4      	lsrs	r4, r4, #3
    ec26:	4b21      	ldr	r3, [pc, #132]	; (ecac <wk_proc_rsp_handler+0x94>)
    ec28:	01a4      	lsls	r4, r4, #6
    ec2a:	461a      	mov	r2, r3
{
    ec2c:	b086      	sub	sp, #24
    LOG_DBG("%s", __func__);
    ec2e:	f044 0004 	orr.w	r0, r4, #4
    ec32:	f00b fff9 	bl	1ac28 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
    ec36:	2000      	movs	r0, #0
    ec38:	f7ff fce2 	bl	e600 <state_set.constprop.0>
    err_code = buff_to_cmd(&m_rx_buff, &cmd);
    ec3c:	4b1c      	ldr	r3, [pc, #112]	; (ecb0 <wk_proc_rsp_handler+0x98>)
    ec3e:	681e      	ldr	r6, [r3, #0]
    if (p_buff->p_data == NULL || p_cmd == NULL) {
    ec40:	b93e      	cbnz	r6, ec52 <wk_proc_rsp_handler+0x3a>
        LOG_ERR("Buffer error");
    ec42:	491c      	ldr	r1, [pc, #112]	; (ecb4 <wk_proc_rsp_handler+0x9c>)
    ec44:	f044 0001 	orr.w	r0, r4, #1
    ec48:	f00b ffee 	bl	1ac28 <log_string_sync>
}
    ec4c:	b006      	add	sp, #24
    ec4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
    ec52:	78f7      	ldrb	r7, [r6, #3]
	return ((uint16_t)src[1] << 8) | src[0];
    ec54:	f896 8002 	ldrb.w	r8, [r6, #2]
    ec58:	7875      	ldrb	r5, [r6, #1]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
    ec5a:	4669      	mov	r1, sp
    ec5c:	4638      	mov	r0, r7
    ec5e:	f7ff ff6b 	bl	eb38 <cmd_cb_get>
    if (err_code == 0) {
    ec62:	b9b0      	cbnz	r0, ec92 <wk_proc_rsp_handler+0x7a>
    ec64:	ea45 2408 	orr.w	r4, r5, r8, lsl #8
        if (cmd_cb.proc_rsp) {
    ec68:	9b02      	ldr	r3, [sp, #8]
    p_cmd->length = op_pdu_len - CMD_FMT_SIZE_OPCODE;
    ec6a:	3c01      	subs	r4, #1
    ec6c:	b2a4      	uxth	r4, r4
    p_cmd->p_data = &p_data[CMD_FMT_OFFSET_PDU];
    ec6e:	3604      	adds	r6, #4
        if (cmd_cb.proc_rsp) {
    ec70:	b113      	cbz	r3, ec78 <wk_proc_rsp_handler+0x60>
            cmd_cb.proc_rsp(cmd.p_data, cmd.length);
    ec72:	4621      	mov	r1, r4
    ec74:	4630      	mov	r0, r6
    ec76:	4798      	blx	r3
        event.timeout = false;
    ec78:	2300      	movs	r3, #0
    ec7a:	f88d 3016 	strb.w	r3, [sp, #22]
        m_event_cb(&event);
    ec7e:	4b0e      	ldr	r3, [pc, #56]	; (ecb8 <wk_proc_rsp_handler+0xa0>)
        event.op_code = cmd.op_code;
    ec80:	f88d 700c 	strb.w	r7, [sp, #12]
        m_event_cb(&event);
    ec84:	681b      	ldr	r3, [r3, #0]
        event.p_data = cmd.p_data;
    ec86:	9604      	str	r6, [sp, #16]
        event.length = cmd.length;
    ec88:	f8ad 4014 	strh.w	r4, [sp, #20]
        m_event_cb(&event);
    ec8c:	a803      	add	r0, sp, #12
    ec8e:	4798      	blx	r3
    ec90:	e7dc      	b.n	ec4c <wk_proc_rsp_handler+0x34>
        LOG_ERR("op is unregisterd(proc rsp): %d", cmd.op_code);
    ec92:	490a      	ldr	r1, [pc, #40]	; (ecbc <wk_proc_rsp_handler+0xa4>)
    ec94:	463a      	mov	r2, r7
    ec96:	f044 0001 	orr.w	r0, r4, #1
    ec9a:	f00b ffc5 	bl	1ac28 <log_string_sync>
    ec9e:	e7d5      	b.n	ec4c <wk_proc_rsp_handler+0x34>
    eca0:	0001c940 	.word	0x0001c940
    eca4:	0001c968 	.word	0x0001c968
    eca8:	0001d38b 	.word	0x0001d38b
    ecac:	0001d688 	.word	0x0001d688
    ecb0:	20000948 	.word	0x20000948
    ecb4:	0001d518 	.word	0x0001d518
    ecb8:	20000944 	.word	0x20000944
    ecbc:	0001d541 	.word	0x0001d541

0000ecc0 <wk_proc_req_handler>:
{
    ecc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecc4:	4b25      	ldr	r3, [pc, #148]	; (ed5c <wk_proc_req_handler+0x9c>)
    ecc6:	4c26      	ldr	r4, [pc, #152]	; (ed60 <wk_proc_req_handler+0xa0>)
    LOG_DBG("%s", __func__);
    ecc8:	4926      	ldr	r1, [pc, #152]	; (ed64 <wk_proc_req_handler+0xa4>)
    ecca:	1ae4      	subs	r4, r4, r3
    eccc:	08e4      	lsrs	r4, r4, #3
    ecce:	4b26      	ldr	r3, [pc, #152]	; (ed68 <wk_proc_req_handler+0xa8>)
    ecd0:	01a4      	lsls	r4, r4, #6
    ecd2:	461a      	mov	r2, r3
{
    ecd4:	b086      	sub	sp, #24
    LOG_DBG("%s", __func__);
    ecd6:	f044 0004 	orr.w	r0, r4, #4
    ecda:	f00b ffa5 	bl	1ac28 <log_string_sync>
    err_code = buff_to_cmd(&m_rx_buff, &cmd);
    ecde:	4b23      	ldr	r3, [pc, #140]	; (ed6c <wk_proc_req_handler+0xac>)
    ece0:	681e      	ldr	r6, [r3, #0]
    if (p_buff->p_data == NULL || p_cmd == NULL) {
    ece2:	b93e      	cbnz	r6, ecf4 <wk_proc_req_handler+0x34>
        LOG_ERR("Buffer error");
    ece4:	4922      	ldr	r1, [pc, #136]	; (ed70 <wk_proc_req_handler+0xb0>)
    ece6:	f044 0001 	orr.w	r0, r4, #1
    ecea:	f00b ff9d 	bl	1ac28 <log_string_sync>
}
    ecee:	b006      	add	sp, #24
    ecf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
    ecf4:	78f7      	ldrb	r7, [r6, #3]
    ecf6:	f896 8002 	ldrb.w	r8, [r6, #2]
    ecfa:	7875      	ldrb	r5, [r6, #1]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
    ecfc:	4669      	mov	r1, sp
    ecfe:	4638      	mov	r0, r7
    ed00:	f7ff ff1a 	bl	eb38 <cmd_cb_get>
    if (err_code == 0) {
    ed04:	b9d8      	cbnz	r0, ed3e <wk_proc_req_handler+0x7e>
    ed06:	ea45 2408 	orr.w	r4, r5, r8, lsl #8
        if (cmd_cb.proc_req) {
    ed0a:	9b01      	ldr	r3, [sp, #4]
    p_cmd->length = op_pdu_len - CMD_FMT_SIZE_OPCODE;
    ed0c:	3c01      	subs	r4, #1
    ed0e:	b2a4      	uxth	r4, r4
    p_cmd->p_data = &p_data[CMD_FMT_OFFSET_PDU];
    ed10:	3604      	adds	r6, #4
        if (cmd_cb.proc_req) {
    ed12:	b183      	cbz	r3, ed36 <wk_proc_req_handler+0x76>
            cmd_cb.proc_req(cmd.p_data, cmd.length, app_cmd_respond);
    ed14:	4a17      	ldr	r2, [pc, #92]	; (ed74 <wk_proc_req_handler+0xb4>)
    ed16:	4621      	mov	r1, r4
    ed18:	4630      	mov	r0, r6
    ed1a:	4798      	blx	r3
        event.timeout = false;
    ed1c:	2300      	movs	r3, #0
    ed1e:	f88d 3016 	strb.w	r3, [sp, #22]
        m_event_cb(&event);
    ed22:	4b15      	ldr	r3, [pc, #84]	; (ed78 <wk_proc_req_handler+0xb8>)
        event.op_code = cmd.op_code;
    ed24:	f88d 700c 	strb.w	r7, [sp, #12]
        m_event_cb(&event);
    ed28:	681b      	ldr	r3, [r3, #0]
        event.p_data = cmd.p_data;
    ed2a:	9604      	str	r6, [sp, #16]
        event.length = cmd.length;
    ed2c:	f8ad 4014 	strh.w	r4, [sp, #20]
        m_event_cb(&event);
    ed30:	a803      	add	r0, sp, #12
    ed32:	4798      	blx	r3
    ed34:	e7db      	b.n	ecee <wk_proc_req_handler+0x2e>
            app_cmd_respond(NULL, 0);
    ed36:	4619      	mov	r1, r3
    ed38:	f7ff feb0 	bl	ea9c <app_cmd_respond>
    ed3c:	e7ee      	b.n	ed1c <wk_proc_req_handler+0x5c>
        LOG_ERR("op is unregisterd(proc req)");
    ed3e:	f044 0001 	orr.w	r0, r4, #1
    ed42:	490e      	ldr	r1, [pc, #56]	; (ed7c <wk_proc_req_handler+0xbc>)
    ed44:	f00b ff70 	bl	1ac28 <log_string_sync>
        uint8_t p_rsp[] = CMD_RSP_UNREG;
    ed48:	f247 2375 	movw	r3, #29301	; 0x7275
        app_cmd_respond(p_rsp, sizeof(p_rsp));
    ed4c:	2102      	movs	r1, #2
    ed4e:	a803      	add	r0, sp, #12
        uint8_t p_rsp[] = CMD_RSP_UNREG;
    ed50:	f8ad 300c 	strh.w	r3, [sp, #12]
        app_cmd_respond(p_rsp, sizeof(p_rsp));
    ed54:	f7ff fea2 	bl	ea9c <app_cmd_respond>
    ed58:	e7c9      	b.n	ecee <wk_proc_req_handler+0x2e>
    ed5a:	bf00      	nop
    ed5c:	0001c940 	.word	0x0001c940
    ed60:	0001c968 	.word	0x0001c968
    ed64:	0001d38b 	.word	0x0001d38b
    ed68:	0001d674 	.word	0x0001d674
    ed6c:	20000948 	.word	0x20000948
    ed70:	0001d518 	.word	0x0001d518
    ed74:	0000ea9d 	.word	0x0000ea9d
    ed78:	20000944 	.word	0x20000944
    ed7c:	0001d561 	.word	0x0001d561

0000ed80 <app_cmd_add>:
{
    ed80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    ed84:	4606      	mov	r6, r0
    ed86:	4688      	mov	r8, r1
    ed88:	4617      	mov	r7, r2
    count = cmd_cb_cnt();
    ed8a:	f7ff fec7 	bl	eb1c <cmd_cb_cnt>
    if (count == CMD_CB_LIST_LEN) {
    ed8e:	2814      	cmp	r0, #20
    count = cmd_cb_cnt();
    ed90:	4604      	mov	r4, r0
    if (count == CMD_CB_LIST_LEN) {
    ed92:	d10e      	bne.n	edb2 <app_cmd_add+0x32>
    ed94:	4b1a      	ldr	r3, [pc, #104]	; (ee00 <app_cmd_add+0x80>)
    ed96:	481b      	ldr	r0, [pc, #108]	; (ee04 <app_cmd_add+0x84>)
        LOG_ERR("Cmd list is full");
    ed98:	491b      	ldr	r1, [pc, #108]	; (ee08 <app_cmd_add+0x88>)
    ed9a:	1ac0      	subs	r0, r0, r3
    ed9c:	08c0      	lsrs	r0, r0, #3
    ed9e:	0180      	lsls	r0, r0, #6
    eda0:	f040 0001 	orr.w	r0, r0, #1
    eda4:	f00b ff40 	bl	1ac28 <log_string_sync>
        return -1;
    eda8:	f04f 30ff 	mov.w	r0, #4294967295
}
    edac:	b004      	add	sp, #16
    edae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (cmd_cb_get(op_code, NULL) == 0) {
    edb2:	2100      	movs	r1, #0
    edb4:	4630      	mov	r0, r6
    edb6:	f7ff febf 	bl	eb38 <cmd_cb_get>
    edba:	b960      	cbnz	r0, edd6 <app_cmd_add+0x56>
    edbc:	4b10      	ldr	r3, [pc, #64]	; (ee00 <app_cmd_add+0x80>)
    edbe:	4811      	ldr	r0, [pc, #68]	; (ee04 <app_cmd_add+0x84>)
        LOG_WRN("This op code is existed");
    edc0:	4912      	ldr	r1, [pc, #72]	; (ee0c <app_cmd_add+0x8c>)
    edc2:	1ac0      	subs	r0, r0, r3
    edc4:	08c0      	lsrs	r0, r0, #3
    edc6:	0180      	lsls	r0, r0, #6
    edc8:	f040 0002 	orr.w	r0, r0, #2
    edcc:	f00b ff2c 	bl	1ac28 <log_string_sync>
        return -2;
    edd0:	f06f 0001 	mvn.w	r0, #1
    edd4:	e7ea      	b.n	edac <app_cmd_add+0x2c>
    callback.proc_rsp = rsp_cb;
    edd6:	e9cd 8702 	strd	r8, r7, [sp, #8]
    memset(&callback, 0, sizeof(cmd_cb_t));
    edda:	2500      	movs	r5, #0
    eddc:	4b0c      	ldr	r3, [pc, #48]	; (ee10 <app_cmd_add+0x90>)
    edde:	f8ad 5005 	strh.w	r5, [sp, #5]
    ede2:	200c      	movs	r0, #12
    ede4:	f88d 5007 	strb.w	r5, [sp, #7]
    callback.op_code = op_code;
    ede8:	f88d 6004 	strb.w	r6, [sp, #4]
    edec:	aa04      	add	r2, sp, #16
    edee:	fb00 3304 	mla	r3, r0, r4, r3
    edf2:	e912 0007 	ldmdb	r2, {r0, r1, r2}
    edf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return 0;
    edfa:	4628      	mov	r0, r5
    edfc:	e7d6      	b.n	edac <app_cmd_add+0x2c>
    edfe:	bf00      	nop
    ee00:	0001c940 	.word	0x0001c940
    ee04:	0001c968 	.word	0x0001c968
    ee08:	0001d57d 	.word	0x0001d57d
    ee0c:	0001d58e 	.word	0x0001d58e
    ee10:	20000844 	.word	0x20000844

0000ee14 <app_cmd_request>:
{
    ee14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (mode_get(&m_cmd_ctx) != CMD_MODE_IDLE) {
    ee16:	4c0f      	ldr	r4, [pc, #60]	; (ee54 <app_cmd_request+0x40>)
    ee18:	7823      	ldrb	r3, [r4, #0]
    ee1a:	b173      	cbz	r3, ee3a <app_cmd_request+0x26>
    ee1c:	4a0e      	ldr	r2, [pc, #56]	; (ee58 <app_cmd_request+0x44>)
    ee1e:	480f      	ldr	r0, [pc, #60]	; (ee5c <app_cmd_request+0x48>)
        LOG_ERR("%s, exit with %d", __func__, m_cmd_ctx.mode);
    ee20:	490f      	ldr	r1, [pc, #60]	; (ee60 <app_cmd_request+0x4c>)
    ee22:	1a80      	subs	r0, r0, r2
    ee24:	08c0      	lsrs	r0, r0, #3
    ee26:	0180      	lsls	r0, r0, #6
    ee28:	f040 0001 	orr.w	r0, r0, #1
    ee2c:	4a0d      	ldr	r2, [pc, #52]	; (ee64 <app_cmd_request+0x50>)
    ee2e:	f00b fefb 	bl	1ac28 <log_string_sync>
        return -1;
    ee32:	f04f 30ff 	mov.w	r0, #4294967295
}
    ee36:	b004      	add	sp, #16
    ee38:	bd10      	pop	{r4, pc}
    app_cmd_t cmd =
    ee3a:	f88d 3004 	strb.w	r3, [sp, #4]
    ee3e:	f88d 0005 	strb.w	r0, [sp, #5]
        p_cmd_ctx->mode = new_mode;
    ee42:	2301      	movs	r3, #1
    return cmd_send(&cmd);
    ee44:	a801      	add	r0, sp, #4
    app_cmd_t cmd =
    ee46:	9102      	str	r1, [sp, #8]
    ee48:	f8ad 200c 	strh.w	r2, [sp, #12]
        p_cmd_ctx->mode = new_mode;
    ee4c:	7023      	strb	r3, [r4, #0]
    return cmd_send(&cmd);
    ee4e:	f7ff fdc9 	bl	e9e4 <cmd_send>
    ee52:	e7f0      	b.n	ee36 <app_cmd_request+0x22>
    ee54:	20000934 	.word	0x20000934
    ee58:	0001c940 	.word	0x0001c940
    ee5c:	0001c968 	.word	0x0001c968
    ee60:	0001d5a6 	.word	0x0001d5a6
    ee64:	0001d69c 	.word	0x0001d69c

0000ee68 <app_cmd_event_cb_register>:
    if (event_cb != NULL) {
    ee68:	b108      	cbz	r0, ee6e <app_cmd_event_cb_register+0x6>
        m_event_cb = event_cb;
    ee6a:	4b01      	ldr	r3, [pc, #4]	; (ee70 <app_cmd_event_cb_register+0x8>)
    ee6c:	6018      	str	r0, [r3, #0]
}
    ee6e:	4770      	bx	lr
    ee70:	20000944 	.word	0x20000944

0000ee74 <app_cmd_init>:
{
    ee74:	b510      	push	{r4, lr}
    rc = app_uart_init(p_device, m_rx_pool, CMD_PACKET_LENGTH);
    ee76:	492a      	ldr	r1, [pc, #168]	; (ef20 <app_cmd_init+0xac>)
    ee78:	f44f 6282 	mov.w	r2, #1040	; 0x410
    ee7c:	f7ff fa66 	bl	e34c <app_uart_init>
    if (rc != 0) {
    ee80:	4604      	mov	r4, r0
    ee82:	b168      	cbz	r0, eea0 <app_cmd_init+0x2c>
    ee84:	4b27      	ldr	r3, [pc, #156]	; (ef24 <app_cmd_init+0xb0>)
    ee86:	4828      	ldr	r0, [pc, #160]	; (ef28 <app_cmd_init+0xb4>)
        LOG_ERR("UART device init failed");
    ee88:	4928      	ldr	r1, [pc, #160]	; (ef2c <app_cmd_init+0xb8>)
    ee8a:	1ac0      	subs	r0, r0, r3
    ee8c:	08c0      	lsrs	r0, r0, #3
    ee8e:	0180      	lsls	r0, r0, #6
    ee90:	f040 0001 	orr.w	r0, r0, #1
    ee94:	f00b fec8 	bl	1ac28 <log_string_sync>
        return -ENXIO;
    ee98:	f06f 0405 	mvn.w	r4, #5
}
    ee9c:	4620      	mov	r0, r4
    ee9e:	bd10      	pop	{r4, pc}
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
    eea0:	f7ff fbae 	bl	e600 <state_set.constprop.0>
    memset(&m_cmd_ctx.cmd, 0, sizeof(app_cmd_t));
    eea4:	4a22      	ldr	r2, [pc, #136]	; (ef30 <app_cmd_init+0xbc>)
    memset(&m_rx_pool, 0, sizeof(m_rx_pool));
    eea6:	481e      	ldr	r0, [pc, #120]	; (ef20 <app_cmd_init+0xac>)
    memset(&m_cmd_ctx.cmd, 0, sizeof(app_cmd_t));
    eea8:	60d4      	str	r4, [r2, #12]
    eeaa:	e9c2 4401 	strd	r4, r4, [r2, #4]
    memset(&m_rx_pool, 0, sizeof(m_rx_pool));
    eeae:	4621      	mov	r1, r4
    eeb0:	f44f 6282 	mov.w	r2, #1040	; 0x410
    eeb4:	f00c fe62 	bl	1bb7c <memset>
    memset(&m_tx_pool, 0, sizeof(m_tx_pool));
    eeb8:	f44f 6282 	mov.w	r2, #1040	; 0x410
    eebc:	4621      	mov	r1, r4
    eebe:	481d      	ldr	r0, [pc, #116]	; (ef34 <app_cmd_init+0xc0>)
    eec0:	f00c fe5c 	bl	1bb7c <memset>
    memset(&m_rx_buff, 0, sizeof(buffer_t));
    eec4:	4b1c      	ldr	r3, [pc, #112]	; (ef38 <app_cmd_init+0xc4>)
    app_uart_rx_cb_set(on_uart_rx_ready);
    eec6:	481d      	ldr	r0, [pc, #116]	; (ef3c <app_cmd_init+0xc8>)
    memset(&m_rx_buff, 0, sizeof(buffer_t));
    eec8:	e9c3 4400 	strd	r4, r4, [r3]
    memset(&m_tx_buff, 0, sizeof(buffer_t));
    eecc:	4b1c      	ldr	r3, [pc, #112]	; (ef40 <app_cmd_init+0xcc>)
    eece:	e9c3 4400 	strd	r4, r4, [r3]
    app_uart_rx_cb_set(on_uart_rx_ready);
    eed2:	f7ff fafd 	bl	e4d0 <app_uart_rx_cb_set>
    app_uart_tx_cb_set(on_uart_tx_empty);
    eed6:	481b      	ldr	r0, [pc, #108]	; (ef44 <app_cmd_init+0xd0>)
    eed8:	f7ff fb00 	bl	e4dc <app_uart_tx_cb_set>
    if (!initialized) {
    eedc:	4b1a      	ldr	r3, [pc, #104]	; (ef48 <app_cmd_init+0xd4>)
    eede:	781a      	ldrb	r2, [r3, #0]
    eee0:	2a00      	cmp	r2, #0
    eee2:	d1db      	bne.n	ee9c <app_cmd_init+0x28>
        initialized = true;
    eee4:	2201      	movs	r2, #1
    eee6:	701a      	strb	r2, [r3, #0]
        m_event_cb = event_cb_dummy;
    eee8:	4b18      	ldr	r3, [pc, #96]	; (ef4c <app_cmd_init+0xd8>)
    eeea:	4a19      	ldr	r2, [pc, #100]	; (ef50 <app_cmd_init+0xdc>)
    eeec:	601a      	str	r2, [r3, #0]
        memset(&m_cb_list, 0, sizeof(m_cb_list));
    eeee:	4621      	mov	r1, r4
    eef0:	22f0      	movs	r2, #240	; 0xf0
    eef2:	4818      	ldr	r0, [pc, #96]	; (ef54 <app_cmd_init+0xe0>)
    eef4:	f00c fe42 	bl	1bb7c <memset>
        k_work_init(&wk_proc_req, wk_proc_req_handler);
    eef8:	4917      	ldr	r1, [pc, #92]	; (ef58 <app_cmd_init+0xe4>)
    eefa:	4818      	ldr	r0, [pc, #96]	; (ef5c <app_cmd_init+0xe8>)
    eefc:	f007 fe24 	bl	16b48 <k_work_init>
        k_work_init(&wk_proc_rsp, wk_proc_rsp_handler);
    ef00:	4917      	ldr	r1, [pc, #92]	; (ef60 <app_cmd_init+0xec>)
    ef02:	4818      	ldr	r0, [pc, #96]	; (ef64 <app_cmd_init+0xf0>)
    ef04:	f007 fe20 	bl	16b48 <k_work_init>
        app_cmd_add(CMD_OP_PING, req_cb_ping, rsp_cb_ping);
    ef08:	4a17      	ldr	r2, [pc, #92]	; (ef68 <app_cmd_init+0xf4>)
    ef0a:	4918      	ldr	r1, [pc, #96]	; (ef6c <app_cmd_init+0xf8>)
    ef0c:	2011      	movs	r0, #17
    ef0e:	f7ff ff37 	bl	ed80 <app_cmd_add>
        app_cmd_add(CMD_OP_RAW_DATA, req_cb_raw_data, rsp_cb_raw_data);
    ef12:	4a17      	ldr	r2, [pc, #92]	; (ef70 <app_cmd_init+0xfc>)
    ef14:	4917      	ldr	r1, [pc, #92]	; (ef74 <app_cmd_init+0x100>)
    ef16:	2012      	movs	r0, #18
    ef18:	f7ff ff32 	bl	ed80 <app_cmd_add>
    ef1c:	e7be      	b.n	ee9c <app_cmd_init+0x28>
    ef1e:	bf00      	nop
    ef20:	20001d90 	.word	0x20001d90
    ef24:	0001c940 	.word	0x0001c940
    ef28:	0001c968 	.word	0x0001c968
    ef2c:	0001d5b7 	.word	0x0001d5b7
    ef30:	20000934 	.word	0x20000934
    ef34:	200021a0 	.word	0x200021a0
    ef38:	20000948 	.word	0x20000948
    ef3c:	0000e735 	.word	0x0000e735
    ef40:	20000950 	.word	0x20000950
    ef44:	0000e96d 	.word	0x0000e96d
    ef48:	20001d8f 	.word	0x20001d8f
    ef4c:	20000944 	.word	0x20000944
    ef50:	0001a5e9 	.word	0x0001a5e9
    ef54:	20000844 	.word	0x20000844
    ef58:	0000ecc1 	.word	0x0000ecc1
    ef5c:	20000958 	.word	0x20000958
    ef60:	0000ec19 	.word	0x0000ec19
    ef64:	20000968 	.word	0x20000968
    ef68:	0000e4e9 	.word	0x0000e4e9
    ef6c:	0000e571 	.word	0x0000e571
    ef70:	0000e5b1 	.word	0x0000e5b1
    ef74:	0000e511 	.word	0x0000e511

0000ef78 <req_cb_flash_start>:
 *
 * @return 0 success
 * @return neg error
 */
static int req_cb_flash_start(uint8_t* p_req, uint16_t req_len, cmd_respond_t respond)
{
    ef78:	b508      	push	{r3, lr}
    LOG_DBG("%s", __func__);

    respond("ok", 2);
    ef7a:	2102      	movs	r1, #2
    ef7c:	4801      	ldr	r0, [pc, #4]	; (ef84 <req_cb_flash_start+0xc>)
    ef7e:	4790      	blx	r2

    return 0;
}
    ef80:	2000      	movs	r0, #0
    ef82:	bd08      	pop	{r3, pc}
    ef84:	0001d39c 	.word	0x0001d39c

0000ef88 <req_cb_flash_read>:
{
    ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef8a:	4604      	mov	r4, r0
    ef8c:	4615      	mov	r5, r2
    uint32_t offset = sys_get_le32(&p_req[0]);
    ef8e:	f00b fc55 	bl	1a83c <sys_get_le32>
    ef92:	4606      	mov	r6, r0
    uint32_t length = sys_get_le32(&p_req[4]);
    ef94:	1d20      	adds	r0, r4, #4
    ef96:	f00b fc51 	bl	1a83c <sys_get_le32>
    ef9a:	4c15      	ldr	r4, [pc, #84]	; (eff0 <req_cb_flash_read+0x68>)
    LOG_INF("read offset: %x, length: %d", offset, length);
    ef9c:	4915      	ldr	r1, [pc, #84]	; (eff4 <req_cb_flash_read+0x6c>)
    uint32_t length = sys_get_le32(&p_req[4]);
    ef9e:	4607      	mov	r7, r0
    efa0:	4815      	ldr	r0, [pc, #84]	; (eff8 <req_cb_flash_read+0x70>)
    efa2:	1a24      	subs	r4, r4, r0
    efa4:	08e4      	lsrs	r4, r4, #3
    LOG_INF("read offset: %x, length: %d", offset, length);
    efa6:	01a4      	lsls	r4, r4, #6
    efa8:	f044 0003 	orr.w	r0, r4, #3
    efac:	463b      	mov	r3, r7
    efae:	4632      	mov	r2, r6
    efb0:	f00b fe3a 	bl	1ac28 <log_string_sync>
    p_rsp = k_malloc(rsp_len);
    efb4:	b2b8      	uxth	r0, r7
    efb6:	f00c fda5 	bl	1bb04 <k_malloc>
    efba:	4604      	mov	r4, r0
    if (p_rsp != NULL) {
    efbc:	b190      	cbz	r0, efe4 <req_cb_flash_read+0x5c>
        rc = app_flash_read(offset, p_rsp, length);
    efbe:	4601      	mov	r1, r0
    efc0:	463a      	mov	r2, r7
    efc2:	4630      	mov	r0, r6
    efc4:	f00b fb59 	bl	1a67a <app_flash_read>
        if (rc == 0) {
    efc8:	4606      	mov	r6, r0
    efca:	b938      	cbnz	r0, efdc <req_cb_flash_read+0x54>
            respond(p_rsp, rsp_len);
    efcc:	b2b9      	uxth	r1, r7
    efce:	4620      	mov	r0, r4
    efd0:	47a8      	blx	r5
            k_free(p_rsp);
    efd2:	4620      	mov	r0, r4
    efd4:	f00c fd8f 	bl	1baf6 <k_free>
}
    efd8:	4630      	mov	r0, r6
    efda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            respond(NULL, 0);
    efdc:	2100      	movs	r1, #0
    efde:	4608      	mov	r0, r1
    efe0:	47a8      	blx	r5
    efe2:	e7f9      	b.n	efd8 <req_cb_flash_read+0x50>
        respond(NULL, 0);
    efe4:	4601      	mov	r1, r0
    efe6:	47a8      	blx	r5
        rc = -1;
    efe8:	f04f 36ff 	mov.w	r6, #4294967295
    return rc;
    efec:	e7f4      	b.n	efd8 <req_cb_flash_read+0x50>
    efee:	bf00      	nop
    eff0:	0001c970 	.word	0x0001c970
    eff4:	0001d6ff 	.word	0x0001d6ff
    eff8:	0001c940 	.word	0x0001c940

0000effc <req_cb_flash_erase>:
{
    effc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    effe:	4605      	mov	r5, r0
    f000:	4614      	mov	r4, r2
    uint32_t offset = sys_get_le32(&p_req[0]);
    f002:	f00b fc1b 	bl	1a83c <sys_get_le32>
    f006:	4606      	mov	r6, r0
    uint32_t count = sys_get_le32(&p_req[4]);
    f008:	1d28      	adds	r0, r5, #4
    f00a:	f00b fc17 	bl	1a83c <sys_get_le32>
    rc = app_flash_erase_page(offset, count);
    f00e:	4601      	mov	r1, r0
    uint32_t count = sys_get_le32(&p_req[4]);
    f010:	4607      	mov	r7, r0
    rc = app_flash_erase_page(offset, count);
    f012:	4630      	mov	r0, r6
    f014:	f00b fbc3 	bl	1a79e <app_flash_erase_page>
    if (rc == 0) {
    f018:	4605      	mov	r5, r0
    f01a:	b980      	cbnz	r0, f03e <req_cb_flash_erase+0x42>
        respond("ok", 2);
    f01c:	4809      	ldr	r0, [pc, #36]	; (f044 <req_cb_flash_erase+0x48>)
    f01e:	2102      	movs	r1, #2
        respond(NULL, 0);
    f020:	47a0      	blx	r4
    f022:	4809      	ldr	r0, [pc, #36]	; (f048 <req_cb_flash_erase+0x4c>)
    f024:	4c09      	ldr	r4, [pc, #36]	; (f04c <req_cb_flash_erase+0x50>)
    LOG_INF("erase offset: %x, count: %d", offset, count);
    f026:	490a      	ldr	r1, [pc, #40]	; (f050 <req_cb_flash_erase+0x54>)
    f028:	1a24      	subs	r4, r4, r0
    f02a:	08e4      	lsrs	r4, r4, #3
    f02c:	01a4      	lsls	r4, r4, #6
    f02e:	f044 0003 	orr.w	r0, r4, #3
    f032:	463b      	mov	r3, r7
    f034:	4632      	mov	r2, r6
    f036:	f00b fdf7 	bl	1ac28 <log_string_sync>
}
    f03a:	4628      	mov	r0, r5
    f03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        respond(NULL, 0);
    f03e:	2100      	movs	r1, #0
    f040:	4608      	mov	r0, r1
    f042:	e7ed      	b.n	f020 <req_cb_flash_erase+0x24>
    f044:	0001d39c 	.word	0x0001d39c
    f048:	0001c940 	.word	0x0001c940
    f04c:	0001c970 	.word	0x0001c970
    f050:	0001d71b 	.word	0x0001d71b

0000f054 <req_cb_flash_crc>:
{
    f054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f056:	4604      	mov	r4, r0
    f058:	4615      	mov	r5, r2
    uint32_t offset = sys_get_le32(&p_req[0]);
    f05a:	f00b fbef 	bl	1a83c <sys_get_le32>
    f05e:	4606      	mov	r6, r0
    uint32_t length = sys_get_le32(&p_req[4]);
    f060:	1d20      	adds	r0, r4, #4
    f062:	f00b fbeb 	bl	1a83c <sys_get_le32>
    f066:	4c0f      	ldr	r4, [pc, #60]	; (f0a4 <req_cb_flash_crc+0x50>)
    LOG_INF("crc offset: %x, length: %d", offset, length);
    f068:	490f      	ldr	r1, [pc, #60]	; (f0a8 <req_cb_flash_crc+0x54>)
    uint32_t length = sys_get_le32(&p_req[4]);
    f06a:	4607      	mov	r7, r0
    f06c:	480f      	ldr	r0, [pc, #60]	; (f0ac <req_cb_flash_crc+0x58>)
    f06e:	1a24      	subs	r4, r4, r0
    f070:	08e4      	lsrs	r4, r4, #3
    LOG_INF("crc offset: %x, length: %d", offset, length);
    f072:	01a4      	lsls	r4, r4, #6
    f074:	f044 0003 	orr.w	r0, r4, #3
    f078:	463b      	mov	r3, r7
    f07a:	4632      	mov	r2, r6
    f07c:	f00b fdd4 	bl	1ac28 <log_string_sync>
    rc = app_flash_crc(offset, length, &crc32);
    f080:	aa01      	add	r2, sp, #4
    f082:	4639      	mov	r1, r7
    f084:	4630      	mov	r0, r6
    f086:	f00b fba3 	bl	1a7d0 <app_flash_crc>
    if (rc == 0) {
    f08a:	4604      	mov	r4, r0
    f08c:	b938      	cbnz	r0, f09e <req_cb_flash_crc+0x4a>
	dst[0] = val;
    f08e:	9b01      	ldr	r3, [sp, #4]
    f090:	9300      	str	r3, [sp, #0]
        respond(p_rsp, rsp_len);
    f092:	2104      	movs	r1, #4
    f094:	4668      	mov	r0, sp
        respond(NULL, 0);
    f096:	47a8      	blx	r5
}
    f098:	4620      	mov	r0, r4
    f09a:	b003      	add	sp, #12
    f09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        respond(NULL, 0);
    f09e:	2100      	movs	r1, #0
    f0a0:	4608      	mov	r0, r1
    f0a2:	e7f8      	b.n	f096 <req_cb_flash_crc+0x42>
    f0a4:	0001c970 	.word	0x0001c970
    f0a8:	0001d737 	.word	0x0001d737
    f0ac:	0001c940 	.word	0x0001c940

0000f0b0 <req_cb_flash_write>:
{
    f0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0b4:	4607      	mov	r7, r0
    f0b6:	4615      	mov	r5, r2
    uint32_t offset = sys_get_le32(&p_req[0]);
    f0b8:	f00b fbc0 	bl	1a83c <sys_get_le32>
    f0bc:	4606      	mov	r6, r0
    uint32_t length = sys_get_le32(&p_req[4]);
    f0be:	1d38      	adds	r0, r7, #4
    f0c0:	f00b fbbc 	bl	1a83c <sys_get_le32>
    f0c4:	4c0e      	ldr	r4, [pc, #56]	; (f100 <req_cb_flash_write+0x50>)
    LOG_INF("write offset: %x, length: %d", offset, length);
    f0c6:	490f      	ldr	r1, [pc, #60]	; (f104 <req_cb_flash_write+0x54>)
    uint32_t length = sys_get_le32(&p_req[4]);
    f0c8:	4680      	mov	r8, r0
    f0ca:	480f      	ldr	r0, [pc, #60]	; (f108 <req_cb_flash_write+0x58>)
    f0cc:	1a24      	subs	r4, r4, r0
    f0ce:	08e4      	lsrs	r4, r4, #3
    LOG_INF("write offset: %x, length: %d", offset, length);
    f0d0:	01a4      	lsls	r4, r4, #6
    f0d2:	f044 0003 	orr.w	r0, r4, #3
    f0d6:	4643      	mov	r3, r8
    f0d8:	4632      	mov	r2, r6
    f0da:	f00b fda5 	bl	1ac28 <log_string_sync>
    rc = app_flash_write(offset, p_data, length);
    f0de:	4642      	mov	r2, r8
    f0e0:	f107 0108 	add.w	r1, r7, #8
    f0e4:	4630      	mov	r0, r6
    f0e6:	f00b fb21 	bl	1a72c <app_flash_write>
    if (rc == 0) {
    f0ea:	4604      	mov	r4, r0
    f0ec:	b928      	cbnz	r0, f0fa <req_cb_flash_write+0x4a>
        respond("ok", 2);
    f0ee:	4807      	ldr	r0, [pc, #28]	; (f10c <req_cb_flash_write+0x5c>)
    f0f0:	2102      	movs	r1, #2
        respond(NULL, 0);
    f0f2:	47a8      	blx	r5
}
    f0f4:	4620      	mov	r0, r4
    f0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        respond(NULL, 0);
    f0fa:	2100      	movs	r1, #0
    f0fc:	4608      	mov	r0, r1
    f0fe:	e7f8      	b.n	f0f2 <req_cb_flash_write+0x42>
    f100:	0001c970 	.word	0x0001c970
    f104:	0001d752 	.word	0x0001d752
    f108:	0001c940 	.word	0x0001c940
    f10c:	0001d39c 	.word	0x0001d39c

0000f110 <req_cb_flash_done>:
    f110:	b508      	push	{r3, lr}
    f112:	2102      	movs	r1, #2
    f114:	4801      	ldr	r0, [pc, #4]	; (f11c <req_cb_flash_done+0xc>)
    f116:	4790      	blx	r2
    f118:	2000      	movs	r0, #0
    f11a:	bd08      	pop	{r3, pc}
    f11c:	0001d39c 	.word	0x0001d39c

0000f120 <app_flash_cmd_init>:
/**@brief Register flash related commands
 *
 * @param cb: event callback function
 */
void app_flash_cmd_init(void)
{
    f120:	b508      	push	{r3, lr}
    app_cmd_add(CMD_OP_FLASH_INFO_52,  req_cb_flash_info,NULL);
    f122:	4912      	ldr	r1, [pc, #72]	; (f16c <app_flash_cmd_init+0x4c>)
    f124:	2200      	movs	r2, #0
    f126:	2021      	movs	r0, #33	; 0x21
    f128:	f7ff fe2a 	bl	ed80 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_WRITE_52, req_cb_flash_write, NULL);
    f12c:	4910      	ldr	r1, [pc, #64]	; (f170 <app_flash_cmd_init+0x50>)
    f12e:	2200      	movs	r2, #0
    f130:	2023      	movs	r0, #35	; 0x23
    f132:	f7ff fe25 	bl	ed80 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_ERASE_52, req_cb_flash_erase, NULL);
    f136:	490f      	ldr	r1, [pc, #60]	; (f174 <app_flash_cmd_init+0x54>)
    f138:	2200      	movs	r2, #0
    f13a:	2024      	movs	r0, #36	; 0x24
    f13c:	f7ff fe20 	bl	ed80 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_DONE_52, req_cb_flash_done, NULL);
    f140:	490d      	ldr	r1, [pc, #52]	; (f178 <app_flash_cmd_init+0x58>)
    f142:	2200      	movs	r2, #0
    f144:	2027      	movs	r0, #39	; 0x27
    f146:	f7ff fe1b 	bl	ed80 <app_cmd_add>

    app_cmd_add(CMD_OP_FLASH_READ_52,  req_cb_flash_read, NULL);
    f14a:	490c      	ldr	r1, [pc, #48]	; (f17c <app_flash_cmd_init+0x5c>)
    f14c:	2200      	movs	r2, #0
    f14e:	2022      	movs	r0, #34	; 0x22
    f150:	f7ff fe16 	bl	ed80 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_CRC_52,   req_cb_flash_crc, NULL);
    f154:	490a      	ldr	r1, [pc, #40]	; (f180 <app_flash_cmd_init+0x60>)
    f156:	2200      	movs	r2, #0
    f158:	2025      	movs	r0, #37	; 0x25
    f15a:	f7ff fe11 	bl	ed80 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_START_52, req_cb_flash_start, NULL);

}
    f15e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    app_cmd_add(CMD_OP_FLASH_START_52, req_cb_flash_start, NULL);
    f162:	4908      	ldr	r1, [pc, #32]	; (f184 <app_flash_cmd_init+0x64>)
    f164:	2200      	movs	r2, #0
    f166:	2026      	movs	r0, #38	; 0x26
    f168:	f7ff be0a 	b.w	ed80 <app_cmd_add>
    f16c:	0001a853 	.word	0x0001a853
    f170:	0000f0b1 	.word	0x0000f0b1
    f174:	0000effd 	.word	0x0000effd
    f178:	0000f111 	.word	0x0000f111
    f17c:	0000ef89 	.word	0x0000ef89
    f180:	0000f055 	.word	0x0000f055
    f184:	0000ef79 	.word	0x0000ef79

0000f188 <crc32_ieee_update>:
{
	return crc32_ieee_update(0x0, data, len);
}

uint32_t crc32_ieee_update(uint32_t crc, const uint8_t *data, size_t len)
{
    f188:	b530      	push	{r4, r5, lr}
	crc = ~crc;

	for (size_t i = 0; i < len; i++) {
		uint8_t byte = data[i];

		crc = (crc >> 4) ^ table[(crc ^ byte) & 0x0f];
    f18a:	4d0d      	ldr	r5, [pc, #52]	; (f1c0 <crc32_ieee_update+0x38>)
	crc = ~crc;
    f18c:	43c0      	mvns	r0, r0
	for (size_t i = 0; i < len; i++) {
    f18e:	440a      	add	r2, r1
    f190:	4291      	cmp	r1, r2
    f192:	d101      	bne.n	f198 <crc32_ieee_update+0x10>
		crc = (crc >> 4) ^ table[(crc ^ ((uint32_t)byte >> 4)) & 0x0f];
	}

	return (~crc);
}
    f194:	43c0      	mvns	r0, r0
    f196:	bd30      	pop	{r4, r5, pc}
		uint8_t byte = data[i];
    f198:	f811 3b01 	ldrb.w	r3, [r1], #1
		crc = (crc >> 4) ^ table[(crc ^ byte) & 0x0f];
    f19c:	ea83 0400 	eor.w	r4, r3, r0
    f1a0:	f004 040f 	and.w	r4, r4, #15
    f1a4:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    f1a8:	ea84 1010 	eor.w	r0, r4, r0, lsr #4
		crc = (crc >> 4) ^ table[(crc ^ ((uint32_t)byte >> 4)) & 0x0f];
    f1ac:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
    f1b0:	f003 030f 	and.w	r3, r3, #15
    f1b4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    f1b8:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
	for (size_t i = 0; i < len; i++) {
    f1bc:	e7e8      	b.n	f190 <crc32_ieee_update+0x8>
    f1be:	bf00      	nop
    f1c0:	0001cb18 	.word	0x0001cb18

0000f1c4 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    f1c4:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f1c6:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    f1c8:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    f1ca:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    f1ce:	2c03      	cmp	r4, #3
{
    f1d0:	4605      	mov	r5, r0
	switch (method) {
    f1d2:	d002      	beq.n	f1da <sys_notify_finalize+0x16>
    f1d4:	b12c      	cbz	r4, f1e2 <sys_notify_finalize+0x1e>
    f1d6:	2000      	movs	r0, #0
    f1d8:	e000      	b.n	f1dc <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    f1da:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    f1dc:	2300      	movs	r3, #0
    f1de:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    f1e0:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    f1e2:	4a05      	ldr	r2, [pc, #20]	; (f1f8 <sys_notify_finalize+0x34>)
    f1e4:	4905      	ldr	r1, [pc, #20]	; (f1fc <sys_notify_finalize+0x38>)
    f1e6:	4806      	ldr	r0, [pc, #24]	; (f200 <sys_notify_finalize+0x3c>)
    f1e8:	2345      	movs	r3, #69	; 0x45
    f1ea:	f00b fb6f 	bl	1a8cc <printk>
    f1ee:	4802      	ldr	r0, [pc, #8]	; (f1f8 <sys_notify_finalize+0x34>)
    f1f0:	2145      	movs	r1, #69	; 0x45
    f1f2:	f00b fd04 	bl	1abfe <assert_post_action>
    f1f6:	e7ee      	b.n	f1d6 <sys_notify_finalize+0x12>
    f1f8:	0001d779 	.word	0x0001d779
    f1fc:	000205d8 	.word	0x000205d8
    f200:	0001d2dc 	.word	0x0001d2dc

0000f204 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    f204:	4b01      	ldr	r3, [pc, #4]	; (f20c <__printk_hook_install+0x8>)
    f206:	6018      	str	r0, [r3, #0]
}
    f208:	4770      	bx	lr
    f20a:	bf00      	nop
    f20c:	200000dc 	.word	0x200000dc

0000f210 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    f210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f214:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    f218:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    f21a:	f019 0f08 	tst.w	r9, #8
{
    f21e:	4604      	mov	r4, r0
    f220:	9203      	str	r2, [sp, #12]
	if (processing) {
    f222:	d022      	beq.n	f26a <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    f224:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    f226:	bf0c      	ite	eq
    f228:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    f22c:	f049 0920 	orrne.w	r9, r9, #32
    f230:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    f234:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f236:	4620      	mov	r0, r4
    f238:	f006 ffe4 	bl	16204 <z_spin_unlock_valid>
    f23c:	b968      	cbnz	r0, f25a <process_event+0x4a>
    f23e:	4a9f      	ldr	r2, [pc, #636]	; (f4bc <process_event+0x2ac>)
    f240:	499f      	ldr	r1, [pc, #636]	; (f4c0 <process_event+0x2b0>)
    f242:	48a0      	ldr	r0, [pc, #640]	; (f4c4 <process_event+0x2b4>)
    f244:	23ac      	movs	r3, #172	; 0xac
    f246:	f00b fb41 	bl	1a8cc <printk>
    f24a:	489f      	ldr	r0, [pc, #636]	; (f4c8 <process_event+0x2b8>)
    f24c:	4621      	mov	r1, r4
    f24e:	f00b fb3d 	bl	1a8cc <printk>
    f252:	489a      	ldr	r0, [pc, #616]	; (f4bc <process_event+0x2ac>)
    f254:	21ac      	movs	r1, #172	; 0xac
    f256:	f00b fcd2 	bl	1abfe <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    f25a:	9b03      	ldr	r3, [sp, #12]
    f25c:	f383 8811 	msr	BASEPRI, r3
    f260:	f3bf 8f6f 	isb	sy
}
    f264:	b005      	add	sp, #20
    f266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    f26a:	4f98      	ldr	r7, [pc, #608]	; (f4cc <process_event+0x2bc>)
    f26c:	f8df 8254 	ldr.w	r8, [pc, #596]	; f4c4 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f270:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    f274:	2902      	cmp	r1, #2
    f276:	d106      	bne.n	f286 <process_event+0x76>
			evt = process_recheck(mgr);
    f278:	4620      	mov	r0, r4
    f27a:	f00b fb34 	bl	1a8e6 <process_recheck>
		if (evt == EVT_NOP) {
    f27e:	2800      	cmp	r0, #0
    f280:	d0d8      	beq.n	f234 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    f282:	2801      	cmp	r0, #1
    f284:	d168      	bne.n	f358 <process_event+0x148>
			res = mgr->last_res;
    f286:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f28a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    f28c:	f1bb 0f00 	cmp.w	fp, #0
    f290:	da0a      	bge.n	f2a8 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    f292:	2600      	movs	r6, #0
		*clients = mgr->clients;
    f294:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f296:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    f29a:	e9c4 6600 	strd	r6, r6, [r4]
    f29e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    f2a2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    f2a4:	9601      	str	r6, [sp, #4]
    f2a6:	e027      	b.n	f2f8 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f2a8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    f2ac:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    f2ae:	2901      	cmp	r1, #1
    f2b0:	d834      	bhi.n	f31c <process_event+0x10c>
	list->head = NULL;
    f2b2:	2100      	movs	r1, #0
    f2b4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    f2b8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    f2ba:	6825      	ldr	r5, [r4, #0]
    f2bc:	b29b      	uxth	r3, r3
	list->tail = NULL;
    f2be:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    f2c2:	d10c      	bne.n	f2de <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    f2c4:	428d      	cmp	r5, r1
    f2c6:	462a      	mov	r2, r5
    f2c8:	bf38      	it	cc
    f2ca:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    f2cc:	b12a      	cbz	r2, f2da <process_event+0xca>
				mgr->refs += 1U;
    f2ce:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f2d0:	6812      	ldr	r2, [r2, #0]
    f2d2:	3101      	adds	r1, #1
    f2d4:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    f2d6:	2a00      	cmp	r2, #0
    f2d8:	d1f8      	bne.n	f2cc <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f2da:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    f2de:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    f2e0:	4620      	mov	r0, r4
    f2e2:	f00b fb00 	bl	1a8e6 <process_recheck>
    f2e6:	4606      	mov	r6, r0
    f2e8:	2800      	cmp	r0, #0
    f2ea:	d0db      	beq.n	f2a4 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f2ec:	8ba3      	ldrh	r3, [r4, #28]
    f2ee:	f043 0320 	orr.w	r3, r3, #32
    f2f2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    f2f4:	2300      	movs	r3, #0
    f2f6:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    f2f8:	8ba3      	ldrh	r3, [r4, #28]
    f2fa:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    f2fe:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    f300:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    f302:	d003      	beq.n	f30c <process_event+0xfc>
		if (do_monitors
    f304:	68a2      	ldr	r2, [r4, #8]
    f306:	2a00      	cmp	r2, #0
    f308:	f040 80f0 	bne.w	f4ec <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    f30c:	b91d      	cbnz	r5, f316 <process_event+0x106>
		    || (transit != NULL)) {
    f30e:	9a01      	ldr	r2, [sp, #4]
    f310:	2a00      	cmp	r2, #0
    f312:	f000 8136 	beq.w	f582 <process_event+0x372>
    f316:	f04f 0900 	mov.w	r9, #0
    f31a:	e0e9      	b.n	f4f0 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    f31c:	2a04      	cmp	r2, #4
    f31e:	d10e      	bne.n	f33e <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f320:	f023 0307 	bic.w	r3, r3, #7
    f324:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    f326:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    f328:	4620      	mov	r0, r4
    f32a:	f00b fadc 	bl	1a8e6 <process_recheck>
    f32e:	4605      	mov	r5, r0
    f330:	b118      	cbz	r0, f33a <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f332:	f042 0220 	orr.w	r2, r2, #32
    f336:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    f338:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    f33a:	9501      	str	r5, [sp, #4]
    f33c:	e7dc      	b.n	f2f8 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    f33e:	4640      	mov	r0, r8
    f340:	4963      	ldr	r1, [pc, #396]	; (f4d0 <process_event+0x2c0>)
    f342:	f240 131b 	movw	r3, #283	; 0x11b
    f346:	463a      	mov	r2, r7
    f348:	f00b fac0 	bl	1a8cc <printk>
    f34c:	f240 111b 	movw	r1, #283	; 0x11b
    f350:	4638      	mov	r0, r7
    f352:	f00b fc54 	bl	1abfe <assert_post_action>
    f356:	e7ef      	b.n	f338 <process_event+0x128>
		} else if (evt == EVT_START) {
    f358:	2803      	cmp	r0, #3
    f35a:	d135      	bne.n	f3c8 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    f35c:	f1b9 0f00 	cmp.w	r9, #0
    f360:	d00b      	beq.n	f37a <process_event+0x16a>
    f362:	495c      	ldr	r1, [pc, #368]	; (f4d4 <process_event+0x2c4>)
    f364:	4640      	mov	r0, r8
    f366:	f44f 73ab 	mov.w	r3, #342	; 0x156
    f36a:	463a      	mov	r2, r7
    f36c:	f00b faae 	bl	1a8cc <printk>
    f370:	f44f 71ab 	mov.w	r1, #342	; 0x156
    f374:	4638      	mov	r0, r7
    f376:	f00b fc42 	bl	1abfe <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    f37a:	6823      	ldr	r3, [r4, #0]
    f37c:	b95b      	cbnz	r3, f396 <process_event+0x186>
    f37e:	4956      	ldr	r1, [pc, #344]	; (f4d8 <process_event+0x2c8>)
    f380:	4640      	mov	r0, r8
    f382:	f240 1357 	movw	r3, #343	; 0x157
    f386:	463a      	mov	r2, r7
    f388:	f00b faa0 	bl	1a8cc <printk>
    f38c:	f240 1157 	movw	r1, #343	; 0x157
    f390:	4638      	mov	r0, r7
    f392:	f00b fc34 	bl	1abfe <assert_post_action>
			transit = mgr->transitions->start;
    f396:	6923      	ldr	r3, [r4, #16]
    f398:	681b      	ldr	r3, [r3, #0]
    f39a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    f39c:	b95b      	cbnz	r3, f3b6 <process_event+0x1a6>
    f39e:	494f      	ldr	r1, [pc, #316]	; (f4dc <process_event+0x2cc>)
    f3a0:	4640      	mov	r0, r8
    f3a2:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    f3a6:	463a      	mov	r2, r7
    f3a8:	f00b fa90 	bl	1a8cc <printk>
    f3ac:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    f3b0:	4638      	mov	r0, r7
    f3b2:	f00b fc24 	bl	1abfe <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f3b6:	8ba3      	ldrh	r3, [r4, #28]
    f3b8:	f023 0307 	bic.w	r3, r3, #7
    f3bc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    f3c0:	83a3      	strh	r3, [r4, #28]
}
    f3c2:	2500      	movs	r5, #0
		res = 0;
    f3c4:	46ab      	mov	fp, r5
}
    f3c6:	e797      	b.n	f2f8 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    f3c8:	2804      	cmp	r0, #4
    f3ca:	d132      	bne.n	f432 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    f3cc:	f1b9 0f02 	cmp.w	r9, #2
    f3d0:	d00b      	beq.n	f3ea <process_event+0x1da>
    f3d2:	4943      	ldr	r1, [pc, #268]	; (f4e0 <process_event+0x2d0>)
    f3d4:	4640      	mov	r0, r8
    f3d6:	f240 135d 	movw	r3, #349	; 0x15d
    f3da:	463a      	mov	r2, r7
    f3dc:	f00b fa76 	bl	1a8cc <printk>
    f3e0:	f240 115d 	movw	r1, #349	; 0x15d
    f3e4:	4638      	mov	r0, r7
    f3e6:	f00b fc0a 	bl	1abfe <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    f3ea:	8be3      	ldrh	r3, [r4, #30]
    f3ec:	b15b      	cbz	r3, f406 <process_event+0x1f6>
    f3ee:	493d      	ldr	r1, [pc, #244]	; (f4e4 <process_event+0x2d4>)
    f3f0:	4640      	mov	r0, r8
    f3f2:	f44f 73af 	mov.w	r3, #350	; 0x15e
    f3f6:	463a      	mov	r2, r7
    f3f8:	f00b fa68 	bl	1a8cc <printk>
    f3fc:	f44f 71af 	mov.w	r1, #350	; 0x15e
    f400:	4638      	mov	r0, r7
    f402:	f00b fbfc 	bl	1abfe <assert_post_action>
			transit = mgr->transitions->stop;
    f406:	6923      	ldr	r3, [r4, #16]
    f408:	685b      	ldr	r3, [r3, #4]
    f40a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    f40c:	b95b      	cbnz	r3, f426 <process_event+0x216>
    f40e:	4933      	ldr	r1, [pc, #204]	; (f4dc <process_event+0x2cc>)
    f410:	4640      	mov	r0, r8
    f412:	f240 1361 	movw	r3, #353	; 0x161
    f416:	463a      	mov	r2, r7
    f418:	f00b fa58 	bl	1a8cc <printk>
    f41c:	f240 1161 	movw	r1, #353	; 0x161
    f420:	4638      	mov	r0, r7
    f422:	f00b fbec 	bl	1abfe <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f426:	8ba3      	ldrh	r3, [r4, #28]
    f428:	f023 0307 	bic.w	r3, r3, #7
    f42c:	f043 0304 	orr.w	r3, r3, #4
    f430:	e7c6      	b.n	f3c0 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    f432:	2805      	cmp	r0, #5
    f434:	d132      	bne.n	f49c <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    f436:	f1b9 0f01 	cmp.w	r9, #1
    f43a:	d00b      	beq.n	f454 <process_event+0x244>
    f43c:	492a      	ldr	r1, [pc, #168]	; (f4e8 <process_event+0x2d8>)
    f43e:	4640      	mov	r0, r8
    f440:	f44f 73b2 	mov.w	r3, #356	; 0x164
    f444:	463a      	mov	r2, r7
    f446:	f00b fa41 	bl	1a8cc <printk>
    f44a:	f44f 71b2 	mov.w	r1, #356	; 0x164
    f44e:	4638      	mov	r0, r7
    f450:	f00b fbd5 	bl	1abfe <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    f454:	6823      	ldr	r3, [r4, #0]
    f456:	b95b      	cbnz	r3, f470 <process_event+0x260>
    f458:	491f      	ldr	r1, [pc, #124]	; (f4d8 <process_event+0x2c8>)
    f45a:	4640      	mov	r0, r8
    f45c:	f240 1365 	movw	r3, #357	; 0x165
    f460:	463a      	mov	r2, r7
    f462:	f00b fa33 	bl	1a8cc <printk>
    f466:	f240 1165 	movw	r1, #357	; 0x165
    f46a:	4638      	mov	r0, r7
    f46c:	f00b fbc7 	bl	1abfe <assert_post_action>
			transit = mgr->transitions->reset;
    f470:	6923      	ldr	r3, [r4, #16]
    f472:	689b      	ldr	r3, [r3, #8]
    f474:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    f476:	b95b      	cbnz	r3, f490 <process_event+0x280>
    f478:	4918      	ldr	r1, [pc, #96]	; (f4dc <process_event+0x2cc>)
    f47a:	4640      	mov	r0, r8
    f47c:	f44f 73b4 	mov.w	r3, #360	; 0x168
    f480:	463a      	mov	r2, r7
    f482:	f00b fa23 	bl	1a8cc <printk>
    f486:	f44f 71b4 	mov.w	r1, #360	; 0x168
    f48a:	4638      	mov	r0, r7
    f48c:	f00b fbb7 	bl	1abfe <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f490:	8ba3      	ldrh	r3, [r4, #28]
    f492:	f023 0307 	bic.w	r3, r3, #7
    f496:	f043 0305 	orr.w	r3, r3, #5
    f49a:	e791      	b.n	f3c0 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    f49c:	490c      	ldr	r1, [pc, #48]	; (f4d0 <process_event+0x2c0>)
    f49e:	f240 136b 	movw	r3, #363	; 0x16b
    f4a2:	463a      	mov	r2, r7
    f4a4:	4640      	mov	r0, r8
    f4a6:	f00b fa11 	bl	1a8cc <printk>
    f4aa:	2500      	movs	r5, #0
    f4ac:	f240 116b 	movw	r1, #363	; 0x16b
    f4b0:	4638      	mov	r0, r7
    f4b2:	f00b fba4 	bl	1abfe <assert_post_action>
		onoff_transition_fn transit = NULL;
    f4b6:	9501      	str	r5, [sp, #4]
    f4b8:	e784      	b.n	f3c4 <process_event+0x1b4>
    f4ba:	bf00      	nop
    f4bc:	0001d83f 	.word	0x0001d83f
    f4c0:	0001d865 	.word	0x0001d865
    f4c4:	0001d2dc 	.word	0x0001d2dc
    f4c8:	0001d87c 	.word	0x0001d87c
    f4cc:	0001d79c 	.word	0x0001d79c
    f4d0:	000205d8 	.word	0x000205d8
    f4d4:	0001d7be 	.word	0x0001d7be
    f4d8:	0001d7ca 	.word	0x0001d7ca
    f4dc:	0001d7ed 	.word	0x0001d7ed
    f4e0:	0001d804 	.word	0x0001d804
    f4e4:	0001d81a 	.word	0x0001d81a
    f4e8:	0001d829 	.word	0x0001d829
				   && !sys_slist_is_empty(&mgr->monitors);
    f4ec:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    f4f0:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    f4f4:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    f4f8:	83a3      	strh	r3, [r4, #28]
    f4fa:	4650      	mov	r0, sl
    f4fc:	f006 fe82 	bl	16204 <z_spin_unlock_valid>
    f500:	b968      	cbnz	r0, f51e <process_event+0x30e>
    f502:	4a3a      	ldr	r2, [pc, #232]	; (f5ec <process_event+0x3dc>)
    f504:	493a      	ldr	r1, [pc, #232]	; (f5f0 <process_event+0x3e0>)
    f506:	23ac      	movs	r3, #172	; 0xac
    f508:	4640      	mov	r0, r8
    f50a:	f00b f9df 	bl	1a8cc <printk>
    f50e:	4839      	ldr	r0, [pc, #228]	; (f5f4 <process_event+0x3e4>)
    f510:	4651      	mov	r1, sl
    f512:	f00b f9db 	bl	1a8cc <printk>
    f516:	4835      	ldr	r0, [pc, #212]	; (f5ec <process_event+0x3dc>)
    f518:	21ac      	movs	r1, #172	; 0xac
    f51a:	f00b fb70 	bl	1abfe <assert_post_action>
    f51e:	9b03      	ldr	r3, [sp, #12]
    f520:	f383 8811 	msr	BASEPRI, r3
    f524:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    f528:	f1b9 0f00 	cmp.w	r9, #0
    f52c:	d138      	bne.n	f5a0 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    f52e:	2d00      	cmp	r5, #0
    f530:	d14b      	bne.n	f5ca <process_event+0x3ba>
			if (transit != NULL) {
    f532:	9b01      	ldr	r3, [sp, #4]
    f534:	b113      	cbz	r3, f53c <process_event+0x32c>
				transit(mgr, transition_complete);
    f536:	4930      	ldr	r1, [pc, #192]	; (f5f8 <process_event+0x3e8>)
    f538:	4620      	mov	r0, r4
    f53a:	4798      	blx	r3
	__asm__ volatile(
    f53c:	f04f 0320 	mov.w	r3, #32
    f540:	f3ef 8b11 	mrs	fp, BASEPRI
    f544:	f383 8812 	msr	BASEPRI_MAX, r3
    f548:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f54c:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    f54e:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f552:	f006 fe49 	bl	161e8 <z_spin_lock_valid>
    f556:	b968      	cbnz	r0, f574 <process_event+0x364>
    f558:	4a24      	ldr	r2, [pc, #144]	; (f5ec <process_event+0x3dc>)
    f55a:	4928      	ldr	r1, [pc, #160]	; (f5fc <process_event+0x3ec>)
    f55c:	2381      	movs	r3, #129	; 0x81
    f55e:	4640      	mov	r0, r8
    f560:	f00b f9b4 	bl	1a8cc <printk>
    f564:	4826      	ldr	r0, [pc, #152]	; (f600 <process_event+0x3f0>)
    f566:	4651      	mov	r1, sl
    f568:	f00b f9b0 	bl	1a8cc <printk>
    f56c:	481f      	ldr	r0, [pc, #124]	; (f5ec <process_event+0x3dc>)
    f56e:	2181      	movs	r1, #129	; 0x81
    f570:	f00b fb45 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
    f574:	4650      	mov	r0, sl
    f576:	f006 fe55 	bl	16224 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    f57a:	8ba3      	ldrh	r3, [r4, #28]
    f57c:	f023 0308 	bic.w	r3, r3, #8
    f580:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    f582:	8ba3      	ldrh	r3, [r4, #28]
    f584:	06da      	lsls	r2, r3, #27
    f586:	d528      	bpl.n	f5da <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    f588:	f023 0310 	bic.w	r3, r3, #16
    f58c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    f58e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    f590:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    f594:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    f598:	2900      	cmp	r1, #0
    f59a:	f47f ae6b 	bne.w	f274 <process_event+0x64>
out:
    f59e:	e649      	b.n	f234 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f5a0:	68a1      	ldr	r1, [r4, #8]
    f5a2:	2900      	cmp	r1, #0
    f5a4:	d0c3      	beq.n	f52e <process_event+0x31e>
	return node->next;
    f5a6:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    f5a8:	9a02      	ldr	r2, [sp, #8]
    f5aa:	2b00      	cmp	r3, #0
    f5ac:	bf38      	it	cc
    f5ae:	2300      	movcc	r3, #0
    f5b0:	4699      	mov	r9, r3
    f5b2:	684b      	ldr	r3, [r1, #4]
    f5b4:	4620      	mov	r0, r4
    f5b6:	461e      	mov	r6, r3
    f5b8:	465b      	mov	r3, fp
    f5ba:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f5bc:	f1b9 0f00 	cmp.w	r9, #0
    f5c0:	d0b5      	beq.n	f52e <process_event+0x31e>
    f5c2:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f5c6:	4649      	mov	r1, r9
    f5c8:	e7ee      	b.n	f5a8 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f5ca:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    f5cc:	9a02      	ldr	r2, [sp, #8]
    f5ce:	682d      	ldr	r5, [r5, #0]
    f5d0:	465b      	mov	r3, fp
    f5d2:	4620      	mov	r0, r4
    f5d4:	f00b f9a3 	bl	1a91e <notify_one>
    f5d8:	e7a9      	b.n	f52e <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    f5da:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    f5de:	bf1e      	ittt	ne
    f5e0:	f023 0320 	bicne.w	r3, r3, #32
    f5e4:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    f5e6:	2102      	movne	r1, #2
    f5e8:	e7d2      	b.n	f590 <process_event+0x380>
    f5ea:	bf00      	nop
    f5ec:	0001d83f 	.word	0x0001d83f
    f5f0:	0001d865 	.word	0x0001d865
    f5f4:	0001d87c 	.word	0x0001d87c
    f5f8:	0000f605 	.word	0x0000f605
    f5fc:	0001d891 	.word	0x0001d891
    f600:	0001d8a6 	.word	0x0001d8a6

0000f604 <transition_complete>:
{
    f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f606:	4604      	mov	r4, r0
    f608:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    f60a:	f100 0614 	add.w	r6, r0, #20
    f60e:	f04f 0320 	mov.w	r3, #32
    f612:	f3ef 8711 	mrs	r7, BASEPRI
    f616:	f383 8812 	msr	BASEPRI_MAX, r3
    f61a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f61e:	4630      	mov	r0, r6
    f620:	f006 fde2 	bl	161e8 <z_spin_lock_valid>
    f624:	b968      	cbnz	r0, f642 <transition_complete+0x3e>
    f626:	4a0c      	ldr	r2, [pc, #48]	; (f658 <transition_complete+0x54>)
    f628:	490c      	ldr	r1, [pc, #48]	; (f65c <transition_complete+0x58>)
    f62a:	480d      	ldr	r0, [pc, #52]	; (f660 <transition_complete+0x5c>)
    f62c:	2381      	movs	r3, #129	; 0x81
    f62e:	f00b f94d 	bl	1a8cc <printk>
    f632:	480c      	ldr	r0, [pc, #48]	; (f664 <transition_complete+0x60>)
    f634:	4631      	mov	r1, r6
    f636:	f00b f949 	bl	1a8cc <printk>
    f63a:	4807      	ldr	r0, [pc, #28]	; (f658 <transition_complete+0x54>)
    f63c:	2181      	movs	r1, #129	; 0x81
    f63e:	f00b fade 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
    f642:	4630      	mov	r0, r6
    f644:	f006 fdee 	bl	16224 <z_spin_lock_set_owner>
	mgr->last_res = res;
    f648:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    f64a:	463a      	mov	r2, r7
    f64c:	4620      	mov	r0, r4
    f64e:	2101      	movs	r1, #1
}
    f650:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    f654:	f7ff bddc 	b.w	f210 <process_event>
    f658:	0001d83f 	.word	0x0001d83f
    f65c:	0001d891 	.word	0x0001d891
    f660:	0001d2dc 	.word	0x0001d2dc
    f664:	0001d8a6 	.word	0x0001d8a6

0000f668 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    f668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f66c:	4604      	mov	r4, r0
    f66e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    f670:	f00b f96b 	bl	1a94a <validate_args>

	if (rv < 0) {
    f674:	1e05      	subs	r5, r0, #0
    f676:	db5e      	blt.n	f736 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    f678:	f104 0914 	add.w	r9, r4, #20
    f67c:	f04f 0320 	mov.w	r3, #32
    f680:	f3ef 8a11 	mrs	sl, BASEPRI
    f684:	f383 8812 	msr	BASEPRI_MAX, r3
    f688:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f68c:	4648      	mov	r0, r9
    f68e:	f006 fdab 	bl	161e8 <z_spin_lock_valid>
    f692:	b968      	cbnz	r0, f6b0 <onoff_request+0x48>
    f694:	4a38      	ldr	r2, [pc, #224]	; (f778 <onoff_request+0x110>)
    f696:	4939      	ldr	r1, [pc, #228]	; (f77c <onoff_request+0x114>)
    f698:	4839      	ldr	r0, [pc, #228]	; (f780 <onoff_request+0x118>)
    f69a:	2381      	movs	r3, #129	; 0x81
    f69c:	f00b f916 	bl	1a8cc <printk>
    f6a0:	4838      	ldr	r0, [pc, #224]	; (f784 <onoff_request+0x11c>)
    f6a2:	4649      	mov	r1, r9
    f6a4:	f00b f912 	bl	1a8cc <printk>
    f6a8:	4833      	ldr	r0, [pc, #204]	; (f778 <onoff_request+0x110>)
    f6aa:	2181      	movs	r1, #129	; 0x81
    f6ac:	f00b faa7 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
    f6b0:	4648      	mov	r0, r9
    f6b2:	f006 fdb7 	bl	16224 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    f6b6:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f6b8:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    f6ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f6be:	428b      	cmp	r3, r1
    f6c0:	f002 0607 	and.w	r6, r2, #7
    f6c4:	d050      	beq.n	f768 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    f6c6:	2e02      	cmp	r6, #2
    f6c8:	d124      	bne.n	f714 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    f6ca:	3301      	adds	r3, #1
    f6cc:	83e3      	strh	r3, [r4, #30]
	rv = state;
    f6ce:	4635      	mov	r5, r6
		notify = true;
    f6d0:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f6d4:	4648      	mov	r0, r9
    f6d6:	f006 fd95 	bl	16204 <z_spin_unlock_valid>
    f6da:	b968      	cbnz	r0, f6f8 <onoff_request+0x90>
    f6dc:	4a26      	ldr	r2, [pc, #152]	; (f778 <onoff_request+0x110>)
    f6de:	492a      	ldr	r1, [pc, #168]	; (f788 <onoff_request+0x120>)
    f6e0:	4827      	ldr	r0, [pc, #156]	; (f780 <onoff_request+0x118>)
    f6e2:	23ac      	movs	r3, #172	; 0xac
    f6e4:	f00b f8f2 	bl	1a8cc <printk>
    f6e8:	4828      	ldr	r0, [pc, #160]	; (f78c <onoff_request+0x124>)
    f6ea:	4649      	mov	r1, r9
    f6ec:	f00b f8ee 	bl	1a8cc <printk>
    f6f0:	4821      	ldr	r0, [pc, #132]	; (f778 <onoff_request+0x110>)
    f6f2:	21ac      	movs	r1, #172	; 0xac
    f6f4:	f00b fa83 	bl	1abfe <assert_post_action>
	__asm__ volatile(
    f6f8:	f38a 8811 	msr	BASEPRI, sl
    f6fc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    f700:	f1b8 0f00 	cmp.w	r8, #0
    f704:	d017      	beq.n	f736 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    f706:	2300      	movs	r3, #0
    f708:	4632      	mov	r2, r6
    f70a:	4639      	mov	r1, r7
    f70c:	4620      	mov	r0, r4
    f70e:	f00b f906 	bl	1a91e <notify_one>
    f712:	e010      	b.n	f736 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    f714:	0793      	lsls	r3, r2, #30
    f716:	d001      	beq.n	f71c <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    f718:	2e06      	cmp	r6, #6
    f71a:	d10f      	bne.n	f73c <onoff_request+0xd4>
	parent->next = child;
    f71c:	2300      	movs	r3, #0
    f71e:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    f720:	6863      	ldr	r3, [r4, #4]
    f722:	b9f3      	cbnz	r3, f762 <onoff_request+0xfa>
	list->head = node;
    f724:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    f728:	4635      	mov	r5, r6
    f72a:	b9fe      	cbnz	r6, f76c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    f72c:	4652      	mov	r2, sl
    f72e:	2102      	movs	r1, #2
    f730:	4620      	mov	r0, r4
    f732:	f7ff fd6d 	bl	f210 <process_event>
		}
	}

	return rv;
}
    f736:	4628      	mov	r0, r5
    f738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    f73c:	2e05      	cmp	r6, #5
    f73e:	d018      	beq.n	f772 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    f740:	2e01      	cmp	r6, #1
    f742:	d00b      	beq.n	f75c <onoff_request+0xf4>
    f744:	4912      	ldr	r1, [pc, #72]	; (f790 <onoff_request+0x128>)
    f746:	480e      	ldr	r0, [pc, #56]	; (f780 <onoff_request+0x118>)
    f748:	4a12      	ldr	r2, [pc, #72]	; (f794 <onoff_request+0x12c>)
    f74a:	f240 13c9 	movw	r3, #457	; 0x1c9
    f74e:	f00b f8bd 	bl	1a8cc <printk>
    f752:	4810      	ldr	r0, [pc, #64]	; (f794 <onoff_request+0x12c>)
    f754:	f240 11c9 	movw	r1, #457	; 0x1c9
    f758:	f00b fa51 	bl	1abfe <assert_post_action>
		rv = -EIO;
    f75c:	f06f 0504 	mvn.w	r5, #4
    f760:	e004      	b.n	f76c <onoff_request+0x104>
	parent->next = child;
    f762:	601f      	str	r7, [r3, #0]
	list->tail = node;
    f764:	6067      	str	r7, [r4, #4]
}
    f766:	e7df      	b.n	f728 <onoff_request+0xc0>
		rv = -EAGAIN;
    f768:	f06f 050a 	mvn.w	r5, #10
    f76c:	f04f 0800 	mov.w	r8, #0
    f770:	e7b0      	b.n	f6d4 <onoff_request+0x6c>
		rv = -ENOTSUP;
    f772:	f06f 0585 	mvn.w	r5, #133	; 0x85
    f776:	e7f9      	b.n	f76c <onoff_request+0x104>
    f778:	0001d83f 	.word	0x0001d83f
    f77c:	0001d891 	.word	0x0001d891
    f780:	0001d2dc 	.word	0x0001d2dc
    f784:	0001d8a6 	.word	0x0001d8a6
    f788:	0001d865 	.word	0x0001d865
    f78c:	0001d87c 	.word	0x0001d87c
    f790:	0001d829 	.word	0x0001d829
    f794:	0001d79c 	.word	0x0001d79c

0000f798 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    f798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
    f79a:	460d      	mov	r5, r1
    f79c:	2900      	cmp	r1, #0
    f79e:	d039      	beq.n	f814 <sys_heap_free+0x7c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    f7a0:	6806      	ldr	r6, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    f7a2:	1f0c      	subs	r4, r1, #4
    f7a4:	1ba4      	subs	r4, r4, r6
    f7a6:	08e7      	lsrs	r7, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    f7a8:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    f7ac:	4434      	add	r4, r6
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    f7ae:	78a3      	ldrb	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    f7b0:	07db      	lsls	r3, r3, #31
    f7b2:	d40d      	bmi.n	f7d0 <sys_heap_free+0x38>
    f7b4:	4a18      	ldr	r2, [pc, #96]	; (f818 <sys_heap_free+0x80>)
    f7b6:	4919      	ldr	r1, [pc, #100]	; (f81c <sys_heap_free+0x84>)
    f7b8:	4819      	ldr	r0, [pc, #100]	; (f820 <sys_heap_free+0x88>)
    f7ba:	23a3      	movs	r3, #163	; 0xa3
    f7bc:	f00b f886 	bl	1a8cc <printk>
    f7c0:	4818      	ldr	r0, [pc, #96]	; (f824 <sys_heap_free+0x8c>)
    f7c2:	4629      	mov	r1, r5
    f7c4:	f00b f882 	bl	1a8cc <printk>
    f7c8:	4813      	ldr	r0, [pc, #76]	; (f818 <sys_heap_free+0x80>)
    f7ca:	21a3      	movs	r1, #163	; 0xa3
    f7cc:	f00b fa17 	bl	1abfe <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    f7d0:	4639      	mov	r1, r7
    f7d2:	4630      	mov	r0, r6
    f7d4:	f00b f8e5 	bl	1a9a2 <chunk_size>
    f7d8:	4438      	add	r0, r7
		return ((uint16_t *)cmem)[f];
    f7da:	f836 3030 	ldrh.w	r3, [r6, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    f7de:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    f7e0:	4287      	cmp	r7, r0
    f7e2:	d00d      	beq.n	f800 <sys_heap_free+0x68>
    f7e4:	4a0c      	ldr	r2, [pc, #48]	; (f818 <sys_heap_free+0x80>)
    f7e6:	4910      	ldr	r1, [pc, #64]	; (f828 <sys_heap_free+0x90>)
    f7e8:	480d      	ldr	r0, [pc, #52]	; (f820 <sys_heap_free+0x88>)
    f7ea:	23ab      	movs	r3, #171	; 0xab
    f7ec:	f00b f86e 	bl	1a8cc <printk>
    f7f0:	480e      	ldr	r0, [pc, #56]	; (f82c <sys_heap_free+0x94>)
    f7f2:	4629      	mov	r1, r5
    f7f4:	f00b f86a 	bl	1a8cc <printk>
    f7f8:	4807      	ldr	r0, [pc, #28]	; (f818 <sys_heap_free+0x80>)
    f7fa:	21ab      	movs	r1, #171	; 0xab
    f7fc:	f00b f9ff 	bl	1abfe <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    f800:	8863      	ldrh	r3, [r4, #2]
    f802:	f023 0301 	bic.w	r3, r3, #1
    f806:	8063      	strh	r3, [r4, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
    f808:	4639      	mov	r1, r7
    f80a:	4630      	mov	r0, r6
}
    f80c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
    f810:	f00b b984 	b.w	1ab1c <free_chunk>
}
    f814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f816:	bf00      	nop
    f818:	0001d8be 	.word	0x0001d8be
    f81c:	0001d8df 	.word	0x0001d8df
    f820:	0001d2dc 	.word	0x0001d2dc
    f824:	0001d8f0 	.word	0x0001d8f0
    f828:	0001d928 	.word	0x0001d928
    f82c:	0001d94e 	.word	0x0001d94e

0000f830 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    f830:	424b      	negs	r3, r1
{
    f832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
    f836:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
    f83a:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
    f83e:	6806      	ldr	r6, [r0, #0]
{
    f840:	4614      	mov	r4, r2
	if (align != rew) {
    f842:	d01f      	beq.n	f884 <sys_heap_aligned_alloc+0x54>
		return false;
    f844:	2f04      	cmp	r7, #4
    f846:	463d      	mov	r5, r7
    f848:	46b9      	mov	r9, r7
    f84a:	bf28      	it	cs
    f84c:	2504      	movcs	r5, #4
		align -= rew;
    f84e:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    f850:	f107 3aff 	add.w	sl, r7, #4294967295
    f854:	ea1a 0f07 	tst.w	sl, r7
    f858:	d00e      	beq.n	f878 <sys_heap_aligned_alloc+0x48>
    f85a:	4933      	ldr	r1, [pc, #204]	; (f928 <sys_heap_aligned_alloc+0xf8>)
    f85c:	4a33      	ldr	r2, [pc, #204]	; (f92c <sys_heap_aligned_alloc+0xfc>)
    f85e:	4834      	ldr	r0, [pc, #208]	; (f930 <sys_heap_aligned_alloc+0x100>)
    f860:	f240 1327 	movw	r3, #295	; 0x127
    f864:	f00b f832 	bl	1a8cc <printk>
    f868:	4832      	ldr	r0, [pc, #200]	; (f934 <sys_heap_aligned_alloc+0x104>)
    f86a:	f00b f82f 	bl	1a8cc <printk>
    f86e:	482f      	ldr	r0, [pc, #188]	; (f92c <sys_heap_aligned_alloc+0xfc>)
    f870:	f240 1127 	movw	r1, #295	; 0x127
    f874:	f00b f9c3 	bl	1abfe <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
    f878:	b97c      	cbnz	r4, f89a <sys_heap_aligned_alloc+0x6a>
		return NULL;
    f87a:	f04f 0900 	mov.w	r9, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
    f87e:	4648      	mov	r0, r9
    f880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
    f884:	2904      	cmp	r1, #4
    f886:	d804      	bhi.n	f892 <sys_heap_aligned_alloc+0x62>
}
    f888:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
    f88c:	4611      	mov	r1, r2
    f88e:	f00b b976 	b.w	1ab7e <sys_heap_alloc>
		rew = 0;
    f892:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    f896:	2504      	movs	r5, #4
    f898:	e7da      	b.n	f850 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
    f89a:	68b3      	ldr	r3, [r6, #8]
    f89c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    f8a0:	d9eb      	bls.n	f87a <sys_heap_aligned_alloc+0x4a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    f8a2:	f104 010b 	add.w	r1, r4, #11
    f8a6:	4439      	add	r1, r7
    f8a8:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    f8aa:	08c9      	lsrs	r1, r1, #3
    f8ac:	4630      	mov	r0, r6
    f8ae:	f00b f8ce 	bl	1aa4e <alloc_chunk>
	if (c0 == 0) {
    f8b2:	4680      	mov	r8, r0
    f8b4:	2800      	cmp	r0, #0
    f8b6:	d0e0      	beq.n	f87a <sys_heap_aligned_alloc+0x4a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    f8b8:	f109 0504 	add.w	r5, r9, #4
    f8bc:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    f8c0:	4435      	add	r5, r6
    f8c2:	4455      	add	r5, sl
    f8c4:	427f      	negs	r7, r7
    f8c6:	402f      	ands	r7, r5
    f8c8:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    f8cc:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    f8ce:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    f8d2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    f8d4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    f8d6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    f8da:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    f8dc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    f8e0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    f8e4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    f8e8:	d208      	bcs.n	f8fc <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
    f8ea:	4601      	mov	r1, r0
    f8ec:	463a      	mov	r2, r7
    f8ee:	4630      	mov	r0, r6
    f8f0:	f00b f8fa 	bl	1aae8 <split_chunks>
		free_list_add(h, c0);
    f8f4:	4641      	mov	r1, r8
    f8f6:	4630      	mov	r0, r6
    f8f8:	f00b f858 	bl	1a9ac <free_list_add>
	return c + chunk_size(h, c);
    f8fc:	4639      	mov	r1, r7
    f8fe:	4630      	mov	r0, r6
    f900:	f00b f84f 	bl	1a9a2 <chunk_size>
    f904:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    f906:	4284      	cmp	r4, r0
    f908:	d207      	bcs.n	f91a <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
    f90a:	4630      	mov	r0, r6
    f90c:	4622      	mov	r2, r4
    f90e:	f00b f8eb 	bl	1aae8 <split_chunks>
		free_list_add(h, c_end);
    f912:	4621      	mov	r1, r4
    f914:	4630      	mov	r0, r6
    f916:	f00b f849 	bl	1a9ac <free_list_add>
	void *cmem = &buf[c];
    f91a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    f91e:	8873      	ldrh	r3, [r6, #2]
    f920:	f043 0301 	orr.w	r3, r3, #1
    f924:	8073      	strh	r3, [r6, #2]
    f926:	e7aa      	b.n	f87e <sys_heap_aligned_alloc+0x4e>
    f928:	0001d98a 	.word	0x0001d98a
    f92c:	0001d8be 	.word	0x0001d8be
    f930:	0001d2dc 	.word	0x0001d2dc
    f934:	0001d9a5 	.word	0x0001d9a5

0000f938 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    f938:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    f93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f940:	4606      	mov	r6, r0
    f942:	460d      	mov	r5, r1
    f944:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    f946:	d369      	bcc.n	fa1c <sys_heap_init+0xe4>
    f948:	493d      	ldr	r1, [pc, #244]	; (fa40 <sys_heap_init+0x108>)
    f94a:	4a3e      	ldr	r2, [pc, #248]	; (fa44 <sys_heap_init+0x10c>)
    f94c:	483e      	ldr	r0, [pc, #248]	; (fa48 <sys_heap_init+0x110>)
    f94e:	f240 13a5 	movw	r3, #421	; 0x1a5
    f952:	f00a ffbb 	bl	1a8cc <printk>
    f956:	483d      	ldr	r0, [pc, #244]	; (fa4c <sys_heap_init+0x114>)
    f958:	f00a ffb8 	bl	1a8cc <printk>
    f95c:	f240 11a5 	movw	r1, #421	; 0x1a5
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    f960:	4838      	ldr	r0, [pc, #224]	; (fa44 <sys_heap_init+0x10c>)
    f962:	f00b f94c 	bl	1abfe <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    f966:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    f968:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    f96a:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    f96c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    f970:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    f974:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    f976:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    f978:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    f97c:	d80e      	bhi.n	f99c <sys_heap_init+0x64>
    f97e:	4934      	ldr	r1, [pc, #208]	; (fa50 <sys_heap_init+0x118>)
    f980:	4a30      	ldr	r2, [pc, #192]	; (fa44 <sys_heap_init+0x10c>)
    f982:	4831      	ldr	r0, [pc, #196]	; (fa48 <sys_heap_init+0x110>)
    f984:	f240 13b5 	movw	r3, #437	; 0x1b5
    f988:	f00a ffa0 	bl	1a8cc <printk>
    f98c:	4831      	ldr	r0, [pc, #196]	; (fa54 <sys_heap_init+0x11c>)
    f98e:	f00a ff9d 	bl	1a8cc <printk>
    f992:	482c      	ldr	r0, [pc, #176]	; (fa44 <sys_heap_init+0x10c>)
    f994:	f240 11b5 	movw	r1, #437	; 0x1b5
    f998:	f00b f931 	bl	1abfe <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    f99c:	fab7 f887 	clz	r8, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    f9a0:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
    f9a4:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
    f9a8:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    f9aa:	f108 0607 	add.w	r6, r8, #7
	h->avail_buckets = 0;
    f9ae:	2300      	movs	r3, #0
    f9b0:	08f6      	lsrs	r6, r6, #3
    f9b2:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    f9b4:	1c73      	adds	r3, r6, #1
    f9b6:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    f9b8:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    f9ba:	d90e      	bls.n	f9da <sys_heap_init+0xa2>
    f9bc:	4926      	ldr	r1, [pc, #152]	; (fa58 <sys_heap_init+0x120>)
    f9be:	4a21      	ldr	r2, [pc, #132]	; (fa44 <sys_heap_init+0x10c>)
    f9c0:	4821      	ldr	r0, [pc, #132]	; (fa48 <sys_heap_init+0x110>)
    f9c2:	f240 13c5 	movw	r3, #453	; 0x1c5
    f9c6:	f00a ff81 	bl	1a8cc <printk>
    f9ca:	4822      	ldr	r0, [pc, #136]	; (fa54 <sys_heap_init+0x11c>)
    f9cc:	f00a ff7e 	bl	1a8cc <printk>
    f9d0:	481c      	ldr	r0, [pc, #112]	; (fa44 <sys_heap_init+0x10c>)
    f9d2:	f240 11c5 	movw	r1, #453	; 0x1c5
    f9d6:	f00b f912 	bl	1abfe <assert_post_action>
    f9da:	f104 0210 	add.w	r2, r4, #16
    f9de:	44a0      	add	r8, r4
    f9e0:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
    f9e2:	4590      	cmp	r8, r2
    f9e4:	d129      	bne.n	fa3a <sys_heap_init+0x102>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    f9e6:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    f9e8:	f042 0201 	orr.w	r2, r2, #1
    f9ec:	8062      	strh	r2, [r4, #2]
		((uint16_t *)cmem)[f] = val;
    f9ee:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    f9f2:	1bba      	subs	r2, r7, r6
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    f9f4:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
    f9f6:	8023      	strh	r3, [r4, #0]
    f9f8:	8048      	strh	r0, [r1, #2]
    f9fa:	1961      	adds	r1, r4, r5
    f9fc:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
    fa00:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
    fa04:	804b      	strh	r3, [r1, #2]
    fa06:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    fa08:	887b      	ldrh	r3, [r7, #2]
    fa0a:	f043 0301 	orr.w	r3, r3, #1
    fa0e:	807b      	strh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    fa10:	4631      	mov	r1, r6
    fa12:	4620      	mov	r0, r4
}
    fa14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    fa18:	f00a bfc8 	b.w	1a9ac <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    fa1c:	2a04      	cmp	r2, #4
    fa1e:	d8a2      	bhi.n	f966 <sys_heap_init+0x2e>
    fa20:	490e      	ldr	r1, [pc, #56]	; (fa5c <sys_heap_init+0x124>)
    fa22:	4a08      	ldr	r2, [pc, #32]	; (fa44 <sys_heap_init+0x10c>)
    fa24:	4808      	ldr	r0, [pc, #32]	; (fa48 <sys_heap_init+0x110>)
    fa26:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
    fa2a:	f00a ff4f 	bl	1a8cc <printk>
    fa2e:	4809      	ldr	r0, [pc, #36]	; (fa54 <sys_heap_init+0x11c>)
    fa30:	f00a ff4c 	bl	1a8cc <printk>
    fa34:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    fa38:	e792      	b.n	f960 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
    fa3a:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    fa3e:	e7d0      	b.n	f9e2 <sys_heap_init+0xaa>
    fa40:	0001d9c2 	.word	0x0001d9c2
    fa44:	0001d8be 	.word	0x0001d8be
    fa48:	0001d2dc 	.word	0x0001d2dc
    fa4c:	0001d9d8 	.word	0x0001d9d8
    fa50:	0001da29 	.word	0x0001da29
    fa54:	0001da10 	.word	0x0001da10
    fa58:	0001da52 	.word	0x0001da52
    fa5c:	0001d9ef 	.word	0x0001d9ef

0000fa60 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    fa60:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    fa62:	4e09      	ldr	r6, [pc, #36]	; (fa88 <extract_decimal+0x28>)
    fa64:	6801      	ldr	r1, [r0, #0]
{
    fa66:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    fa68:	270a      	movs	r7, #10
	size_t val = 0;
    fa6a:	2000      	movs	r0, #0
    fa6c:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    fa6e:	3101      	adds	r1, #1
    fa70:	7823      	ldrb	r3, [r4, #0]
    fa72:	5d9d      	ldrb	r5, [r3, r6]
    fa74:	076d      	lsls	r5, r5, #29
    fa76:	d401      	bmi.n	fa7c <extract_decimal+0x1c>
	}
	*str = sp;
    fa78:	6014      	str	r4, [r2, #0]
	return val;
}
    fa7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    fa7c:	fb07 3300 	mla	r3, r7, r0, r3
    fa80:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    fa84:	e7f2      	b.n	fa6c <extract_decimal+0xc>
    fa86:	bf00      	nop
    fa88:	00020700 	.word	0x00020700

0000fa8c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    fa8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa90:	4614      	mov	r4, r2
    fa92:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    fa94:	78d3      	ldrb	r3, [r2, #3]
    fa96:	4a24      	ldr	r2, [pc, #144]	; (fb28 <encode_uint+0x9c>)
    fa98:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    fa9c:	2b6f      	cmp	r3, #111	; 0x6f
    fa9e:	f00a 0203 	and.w	r2, sl, #3
{
    faa2:	4606      	mov	r6, r0
    faa4:	460f      	mov	r7, r1
    faa6:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    faa8:	d02d      	beq.n	fb06 <encode_uint+0x7a>
    faaa:	d828      	bhi.n	fafe <encode_uint+0x72>
		return 16;
    faac:	2b58      	cmp	r3, #88	; 0x58
    faae:	bf14      	ite	ne
    fab0:	250a      	movne	r5, #10
    fab2:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    fab4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    fab8:	46aa      	mov	sl, r5
    faba:	f04f 0b00 	mov.w	fp, #0
    fabe:	4652      	mov	r2, sl
    fac0:	465b      	mov	r3, fp
    fac2:	4630      	mov	r0, r6
    fac4:	4639      	mov	r1, r7
    fac6:	f7fd f839 	bl	cb3c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    faca:	2a09      	cmp	r2, #9
    facc:	b2d3      	uxtb	r3, r2
    face:	d81f      	bhi.n	fb10 <encode_uint+0x84>
    fad0:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    fad2:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    fad4:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    fad6:	bf08      	it	eq
    fad8:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    fada:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    fade:	d301      	bcc.n	fae4 <encode_uint+0x58>
    fae0:	45c8      	cmp	r8, r9
    fae2:	d812      	bhi.n	fb0a <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    fae4:	7823      	ldrb	r3, [r4, #0]
    fae6:	069b      	lsls	r3, r3, #26
    fae8:	d505      	bpl.n	faf6 <encode_uint+0x6a>
		if (radix == 8) {
    faea:	2d08      	cmp	r5, #8
    faec:	d116      	bne.n	fb1c <encode_uint+0x90>
			conv->altform_0 = true;
    faee:	78a3      	ldrb	r3, [r4, #2]
    faf0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    faf4:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
    faf6:	4640      	mov	r0, r8
    faf8:	b003      	add	sp, #12
    fafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    fafe:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    fb02:	2b70      	cmp	r3, #112	; 0x70
    fb04:	e7d3      	b.n	faae <encode_uint+0x22>
	switch (specifier) {
    fb06:	2508      	movs	r5, #8
    fb08:	e7d4      	b.n	fab4 <encode_uint+0x28>
		value /= radix;
    fb0a:	4606      	mov	r6, r0
    fb0c:	460f      	mov	r7, r1
    fb0e:	e7d6      	b.n	fabe <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    fb10:	9a01      	ldr	r2, [sp, #4]
    fb12:	2a01      	cmp	r2, #1
    fb14:	bf0c      	ite	eq
    fb16:	3337      	addeq	r3, #55	; 0x37
    fb18:	3357      	addne	r3, #87	; 0x57
    fb1a:	e7da      	b.n	fad2 <encode_uint+0x46>
		} else if (radix == 16) {
    fb1c:	2d10      	cmp	r5, #16
    fb1e:	d1ea      	bne.n	faf6 <encode_uint+0x6a>
			conv->altform_0c = true;
    fb20:	78a3      	ldrb	r3, [r4, #2]
    fb22:	f043 0310 	orr.w	r3, r3, #16
    fb26:	e7e5      	b.n	faf4 <encode_uint+0x68>
    fb28:	00020700 	.word	0x00020700

0000fb2c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    fb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb30:	4682      	mov	sl, r0
    fb32:	b093      	sub	sp, #76	; 0x4c
    fb34:	468b      	mov	fp, r1
    fb36:	4691      	mov	r9, r2
    fb38:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    fb3a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    fb3c:	f899 0000 	ldrb.w	r0, [r9]
    fb40:	b908      	cbnz	r0, fb46 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    fb42:	4628      	mov	r0, r5
    fb44:	e33a      	b.n	101bc <cbvprintf+0x690>
		if (*fp != '%') {
    fb46:	f109 0301 	add.w	r3, r9, #1
    fb4a:	2825      	cmp	r0, #37	; 0x25
    fb4c:	9302      	str	r3, [sp, #8]
    fb4e:	d006      	beq.n	fb5e <cbvprintf+0x32>
			OUTC('%');
    fb50:	4659      	mov	r1, fp
    fb52:	47d0      	blx	sl
    fb54:	2800      	cmp	r0, #0
    fb56:	f2c0 8331 	blt.w	101bc <cbvprintf+0x690>
    fb5a:	3501      	adds	r5, #1
			break;
    fb5c:	e1f1      	b.n	ff42 <cbvprintf+0x416>
		} state = {
    fb5e:	2218      	movs	r2, #24
    fb60:	2100      	movs	r1, #0
    fb62:	a80c      	add	r0, sp, #48	; 0x30
    fb64:	f00c f80a 	bl	1bb7c <memset>
	if (*sp == '%') {
    fb68:	f899 3001 	ldrb.w	r3, [r9, #1]
    fb6c:	2b25      	cmp	r3, #37	; 0x25
    fb6e:	d059      	beq.n	fc24 <cbvprintf+0xf8>
    fb70:	9a02      	ldr	r2, [sp, #8]
    fb72:	4616      	mov	r6, r2
		switch (*sp) {
    fb74:	f812 3b01 	ldrb.w	r3, [r2], #1
    fb78:	2b2b      	cmp	r3, #43	; 0x2b
    fb7a:	f000 808b 	beq.w	fc94 <cbvprintf+0x168>
    fb7e:	d879      	bhi.n	fc74 <cbvprintf+0x148>
    fb80:	2b20      	cmp	r3, #32
    fb82:	f000 808c 	beq.w	fc9e <cbvprintf+0x172>
    fb86:	2b23      	cmp	r3, #35	; 0x23
    fb88:	f000 808e 	beq.w	fca8 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
    fb8c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    fb90:	f003 0244 	and.w	r2, r3, #68	; 0x44
    fb94:	2a44      	cmp	r2, #68	; 0x44
    fb96:	d103      	bne.n	fba0 <cbvprintf+0x74>
		conv->flag_zero = false;
    fb98:	f36f 1386 	bfc	r3, #6, #1
    fb9c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    fba0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    fba4:	9605      	str	r6, [sp, #20]
    fba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    fbaa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    fbae:	7833      	ldrb	r3, [r6, #0]
    fbb0:	2b2a      	cmp	r3, #42	; 0x2a
    fbb2:	d17e      	bne.n	fcb2 <cbvprintf+0x186>
		conv->width_star = true;
    fbb4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    fbb8:	f043 0301 	orr.w	r3, r3, #1
    fbbc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    fbc0:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    fbc2:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    fbc4:	781a      	ldrb	r2, [r3, #0]
    fbc6:	2a2e      	cmp	r2, #46	; 0x2e
    fbc8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    fbcc:	bf0c      	ite	eq
    fbce:	2101      	moveq	r1, #1
    fbd0:	2100      	movne	r1, #0
    fbd2:	f361 0241 	bfi	r2, r1, #1, #1
    fbd6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    fbda:	d10b      	bne.n	fbf4 <cbvprintf+0xc8>
	++sp;
    fbdc:	1c5a      	adds	r2, r3, #1
    fbde:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    fbe0:	785a      	ldrb	r2, [r3, #1]
    fbe2:	2a2a      	cmp	r2, #42	; 0x2a
    fbe4:	d17b      	bne.n	fcde <cbvprintf+0x1b2>
		conv->prec_star = true;
    fbe6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    fbea:	f042 0204 	orr.w	r2, r2, #4
    fbee:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    fbf2:	3302      	adds	r3, #2
	switch (*sp) {
    fbf4:	4619      	mov	r1, r3
    fbf6:	f811 0b01 	ldrb.w	r0, [r1], #1
    fbfa:	286c      	cmp	r0, #108	; 0x6c
    fbfc:	f000 80b6 	beq.w	fd6c <cbvprintf+0x240>
    fc00:	d87d      	bhi.n	fcfe <cbvprintf+0x1d2>
    fc02:	2868      	cmp	r0, #104	; 0x68
    fc04:	f000 8084 	beq.w	fd10 <cbvprintf+0x1e4>
    fc08:	286a      	cmp	r0, #106	; 0x6a
    fc0a:	f000 80b9 	beq.w	fd80 <cbvprintf+0x254>
    fc0e:	284c      	cmp	r0, #76	; 0x4c
    fc10:	f000 80bd 	beq.w	fd8e <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
    fc14:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    fc18:	f36f 02c6 	bfc	r2, #3, #4
    fc1c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    fc20:	4619      	mov	r1, r3
    fc22:	e080      	b.n	fd26 <cbvprintf+0x1fa>
		conv->specifier = *sp++;
    fc24:	f109 0202 	add.w	r2, r9, #2
    fc28:	9202      	str	r2, [sp, #8]
    fc2a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    fc2e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    fc32:	07d9      	lsls	r1, r3, #31
    fc34:	f140 8149 	bpl.w	feca <cbvprintf+0x39e>
			width = va_arg(ap, int);
    fc38:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    fc3c:	f1b8 0f00 	cmp.w	r8, #0
    fc40:	da07      	bge.n	fc52 <cbvprintf+0x126>
				conv->flag_dash = true;
    fc42:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    fc46:	f042 0204 	orr.w	r2, r2, #4
    fc4a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    fc4e:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    fc52:	075a      	lsls	r2, r3, #29
    fc54:	f140 8142 	bpl.w	fedc <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
    fc58:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    fc5c:	2f00      	cmp	r7, #0
    fc5e:	f280 8141 	bge.w	fee4 <cbvprintf+0x3b8>
				conv->prec_present = false;
    fc62:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    fc66:	f36f 0341 	bfc	r3, #1, #1
    fc6a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    fc6e:	f04f 37ff 	mov.w	r7, #4294967295
    fc72:	e137      	b.n	fee4 <cbvprintf+0x3b8>
		switch (*sp) {
    fc74:	2b2d      	cmp	r3, #45	; 0x2d
    fc76:	d006      	beq.n	fc86 <cbvprintf+0x15a>
    fc78:	2b30      	cmp	r3, #48	; 0x30
    fc7a:	d187      	bne.n	fb8c <cbvprintf+0x60>
			conv->flag_zero = true;
    fc7c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    fc80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fc84:	e003      	b.n	fc8e <cbvprintf+0x162>
			conv->flag_dash = true;
    fc86:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    fc8a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    fc8e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    fc92:	e76e      	b.n	fb72 <cbvprintf+0x46>
			conv->flag_plus = true;
    fc94:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    fc98:	f043 0308 	orr.w	r3, r3, #8
    fc9c:	e7f7      	b.n	fc8e <cbvprintf+0x162>
			conv->flag_space = true;
    fc9e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    fca2:	f043 0310 	orr.w	r3, r3, #16
    fca6:	e7f2      	b.n	fc8e <cbvprintf+0x162>
			conv->flag_hash = true;
    fca8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    fcac:	f043 0320 	orr.w	r3, r3, #32
    fcb0:	e7ed      	b.n	fc8e <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
    fcb2:	a805      	add	r0, sp, #20
    fcb4:	f7ff fed4 	bl	fa60 <extract_decimal>
	if (sp != wp) {
    fcb8:	9b05      	ldr	r3, [sp, #20]
    fcba:	42b3      	cmp	r3, r6
    fcbc:	d081      	beq.n	fbc2 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
    fcbe:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    fcc2:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    fcc4:	f3c1 0240 	ubfx	r2, r1, #1, #1
    fcc8:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    fccc:	0052      	lsls	r2, r2, #1
    fcce:	f062 027f 	orn	r2, r2, #127	; 0x7f
    fcd2:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    fcd6:	430a      	orrs	r2, r1
    fcd8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    fcdc:	e771      	b.n	fbc2 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    fcde:	a805      	add	r0, sp, #20
    fce0:	f7ff febe 	bl	fa60 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    fce4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    fce8:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    fcea:	f3c3 0240 	ubfx	r2, r3, #1, #1
    fcee:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    fcf2:	f360 0341 	bfi	r3, r0, #1, #1
    fcf6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    fcfa:	9b05      	ldr	r3, [sp, #20]
    fcfc:	e77a      	b.n	fbf4 <cbvprintf+0xc8>
	switch (*sp) {
    fcfe:	2874      	cmp	r0, #116	; 0x74
    fd00:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    fd04:	d040      	beq.n	fd88 <cbvprintf+0x25c>
    fd06:	287a      	cmp	r0, #122	; 0x7a
    fd08:	d184      	bne.n	fc14 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
    fd0a:	4613      	mov	r3, r2
    fd0c:	2206      	movs	r2, #6
    fd0e:	e028      	b.n	fd62 <cbvprintf+0x236>
		if (*++sp == 'h') {
    fd10:	785a      	ldrb	r2, [r3, #1]
    fd12:	2a68      	cmp	r2, #104	; 0x68
    fd14:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    fd18:	d121      	bne.n	fd5e <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
    fd1a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    fd1c:	f361 02c6 	bfi	r2, r1, #3, #4
    fd20:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    fd24:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    fd26:	460b      	mov	r3, r1
    fd28:	f813 2b01 	ldrb.w	r2, [r3], #1
    fd2c:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    fd2e:	2a78      	cmp	r2, #120	; 0x78
    fd30:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    fd34:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    fd38:	f200 80bf 	bhi.w	feba <cbvprintf+0x38e>
    fd3c:	2a57      	cmp	r2, #87	; 0x57
    fd3e:	d833      	bhi.n	fda8 <cbvprintf+0x27c>
    fd40:	2a41      	cmp	r2, #65	; 0x41
    fd42:	d003      	beq.n	fd4c <cbvprintf+0x220>
    fd44:	3a45      	subs	r2, #69	; 0x45
    fd46:	2a02      	cmp	r2, #2
    fd48:	f200 80b7 	bhi.w	feba <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
    fd4c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    fd50:	2204      	movs	r2, #4
    fd52:	f362 0302 	bfi	r3, r2, #0, #3
    fd56:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    fd5a:	2301      	movs	r3, #1
			break;
    fd5c:	e084      	b.n	fe68 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
    fd5e:	4613      	mov	r3, r2
    fd60:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    fd62:	f362 03c6 	bfi	r3, r2, #3, #4
    fd66:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    fd6a:	e7dc      	b.n	fd26 <cbvprintf+0x1fa>
		if (*++sp == 'l') {
    fd6c:	785a      	ldrb	r2, [r3, #1]
    fd6e:	2a6c      	cmp	r2, #108	; 0x6c
    fd70:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    fd74:	d101      	bne.n	fd7a <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    fd76:	2104      	movs	r1, #4
    fd78:	e7d0      	b.n	fd1c <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
    fd7a:	4613      	mov	r3, r2
    fd7c:	2203      	movs	r2, #3
    fd7e:	e7f0      	b.n	fd62 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
    fd80:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    fd84:	2205      	movs	r2, #5
    fd86:	e7ec      	b.n	fd62 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
    fd88:	4613      	mov	r3, r2
    fd8a:	2207      	movs	r2, #7
    fd8c:	e7e9      	b.n	fd62 <cbvprintf+0x236>
		conv->unsupported = true;
    fd8e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    fd92:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    fd96:	f023 0302 	bic.w	r3, r3, #2
    fd9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    fd9e:	f043 0302 	orr.w	r3, r3, #2
    fda2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    fda6:	e7be      	b.n	fd26 <cbvprintf+0x1fa>
    fda8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    fdac:	2920      	cmp	r1, #32
    fdae:	f200 8084 	bhi.w	feba <cbvprintf+0x38e>
    fdb2:	a001      	add	r0, pc, #4	; (adr r0, fdb8 <cbvprintf+0x28c>)
    fdb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    fdb8:	0000fe7d 	.word	0x0000fe7d
    fdbc:	0000febb 	.word	0x0000febb
    fdc0:	0000febb 	.word	0x0000febb
    fdc4:	0000febb 	.word	0x0000febb
    fdc8:	0000febb 	.word	0x0000febb
    fdcc:	0000febb 	.word	0x0000febb
    fdd0:	0000febb 	.word	0x0000febb
    fdd4:	0000febb 	.word	0x0000febb
    fdd8:	0000febb 	.word	0x0000febb
    fddc:	0000fd4d 	.word	0x0000fd4d
    fde0:	0000febb 	.word	0x0000febb
    fde4:	0000fe7d 	.word	0x0000fe7d
    fde8:	0000fe3d 	.word	0x0000fe3d
    fdec:	0000fd4d 	.word	0x0000fd4d
    fdf0:	0000fd4d 	.word	0x0000fd4d
    fdf4:	0000fd4d 	.word	0x0000fd4d
    fdf8:	0000febb 	.word	0x0000febb
    fdfc:	0000fe3d 	.word	0x0000fe3d
    fe00:	0000febb 	.word	0x0000febb
    fe04:	0000febb 	.word	0x0000febb
    fe08:	0000febb 	.word	0x0000febb
    fe0c:	0000febb 	.word	0x0000febb
    fe10:	0000fe85 	.word	0x0000fe85
    fe14:	0000fe7d 	.word	0x0000fe7d
    fe18:	0000fea1 	.word	0x0000fea1
    fe1c:	0000febb 	.word	0x0000febb
    fe20:	0000febb 	.word	0x0000febb
    fe24:	0000fea1 	.word	0x0000fea1
    fe28:	0000febb 	.word	0x0000febb
    fe2c:	0000fe7d 	.word	0x0000fe7d
    fe30:	0000febb 	.word	0x0000febb
    fe34:	0000febb 	.word	0x0000febb
    fe38:	0000fe7d 	.word	0x0000fe7d
		conv->specifier_cat = SPECIFIER_SINT;
    fe3c:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    fe40:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    fe42:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    fe46:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    fe4a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    fe4c:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    fe50:	bf02      	ittt	eq
    fe52:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    fe56:	f041 0101 	orreq.w	r1, r1, #1
    fe5a:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    fe5e:	2a63      	cmp	r2, #99	; 0x63
    fe60:	d131      	bne.n	fec6 <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    fe62:	3b00      	subs	r3, #0
    fe64:	bf18      	it	ne
    fe66:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    fe68:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    fe6c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    fe70:	430b      	orrs	r3, r1
    fe72:	f363 0241 	bfi	r2, r3, #1, #1
    fe76:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    fe7a:	e6d8      	b.n	fc2e <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
    fe7c:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    fe80:	2002      	movs	r0, #2
    fe82:	e7de      	b.n	fe42 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
    fe84:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    fe88:	f003 0378 	and.w	r3, r3, #120	; 0x78
    fe8c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    fe90:	2103      	movs	r1, #3
    fe92:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    fe96:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    fe98:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    fe9c:	4143      	adcs	r3, r0
    fe9e:	e7e3      	b.n	fe68 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
    fea0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    fea4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    fea6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    feaa:	f361 0202 	bfi	r2, r1, #0, #3
    feae:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    feb2:	bf14      	ite	ne
    feb4:	2301      	movne	r3, #1
    feb6:	2300      	moveq	r3, #0
    feb8:	e7d6      	b.n	fe68 <cbvprintf+0x33c>
		conv->invalid = true;
    feba:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    febe:	f043 0301 	orr.w	r3, r3, #1
    fec2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    fec6:	2300      	movs	r3, #0
    fec8:	e7ce      	b.n	fe68 <cbvprintf+0x33c>
		} else if (conv->width_present) {
    feca:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    fece:	2a00      	cmp	r2, #0
			width = conv->width_value;
    fed0:	bfb4      	ite	lt
    fed2:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    fed6:	f04f 38ff 	movge.w	r8, #4294967295
    feda:	e6ba      	b.n	fc52 <cbvprintf+0x126>
		} else if (conv->prec_present) {
    fedc:	079f      	lsls	r7, r3, #30
    fede:	f57f aec6 	bpl.w	fc6e <cbvprintf+0x142>
			precision = conv->prec_value;
    fee2:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    fee4:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    fee8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    feea:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    feee:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    fef2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    fef6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    fef8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    fefc:	d137      	bne.n	ff6e <cbvprintf+0x442>
			switch (length_mod) {
    fefe:	1ecb      	subs	r3, r1, #3
    ff00:	2b04      	cmp	r3, #4
    ff02:	d821      	bhi.n	ff48 <cbvprintf+0x41c>
    ff04:	e8df f003 	tbb	[pc, r3]
    ff08:	20070703 	.word	0x20070703
    ff0c:	20          	.byte	0x20
    ff0d:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    ff0e:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    ff12:	17d3      	asrs	r3, r2, #31
    ff14:	e004      	b.n	ff20 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
    ff16:	3407      	adds	r4, #7
    ff18:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    ff1c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    ff20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    ff24:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    ff28:	f013 0603 	ands.w	r6, r3, #3
    ff2c:	d055      	beq.n	ffda <cbvprintf+0x4ae>
			OUTS(sp, fp);
    ff2e:	9b02      	ldr	r3, [sp, #8]
    ff30:	464a      	mov	r2, r9
    ff32:	4659      	mov	r1, fp
    ff34:	4650      	mov	r0, sl
    ff36:	f00a fe4c 	bl	1abd2 <outs>
    ff3a:	2800      	cmp	r0, #0
    ff3c:	f2c0 813e 	blt.w	101bc <cbvprintf+0x690>
    ff40:	4405      	add	r5, r0
			OUTS(bps, bpe);
    ff42:	f8dd 9008 	ldr.w	r9, [sp, #8]
    ff46:	e5f9      	b.n	fb3c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ff48:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    ff4c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ff4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
    ff52:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    ff56:	d105      	bne.n	ff64 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
    ff58:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    ff5c:	930c      	str	r3, [sp, #48]	; 0x30
    ff5e:	2300      	movs	r3, #0
    ff60:	930d      	str	r3, [sp, #52]	; 0x34
    ff62:	e7df      	b.n	ff24 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
    ff64:	2902      	cmp	r1, #2
    ff66:	d1dd      	bne.n	ff24 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
    ff68:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    ff6c:	e7d1      	b.n	ff12 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    ff6e:	2b02      	cmp	r3, #2
    ff70:	d123      	bne.n	ffba <cbvprintf+0x48e>
			switch (length_mod) {
    ff72:	1ecb      	subs	r3, r1, #3
    ff74:	2b04      	cmp	r3, #4
    ff76:	d813      	bhi.n	ffa0 <cbvprintf+0x474>
    ff78:	e8df f003 	tbb	[pc, r3]
    ff7c:	120a0a03 	.word	0x120a0a03
    ff80:	12          	.byte	0x12
    ff81:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    ff82:	6822      	ldr	r2, [r4, #0]
    ff84:	920c      	str	r2, [sp, #48]	; 0x30
    ff86:	2300      	movs	r3, #0
    ff88:	1d20      	adds	r0, r4, #4
    ff8a:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    ff8c:	4604      	mov	r4, r0
    ff8e:	e7c9      	b.n	ff24 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
    ff90:	3407      	adds	r4, #7
    ff92:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    ff96:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    ff9a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    ff9e:	e7f5      	b.n	ff8c <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
    ffa0:	f854 3b04 	ldr.w	r3, [r4], #4
    ffa4:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    ffa6:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    ffa8:	f04f 0300 	mov.w	r3, #0
    ffac:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    ffae:	d0d3      	beq.n	ff58 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
    ffb0:	2902      	cmp	r1, #2
    ffb2:	d1b7      	bne.n	ff24 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
    ffb4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ffb8:	e7d0      	b.n	ff5c <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    ffba:	2b04      	cmp	r3, #4
    ffbc:	d107      	bne.n	ffce <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
    ffbe:	3407      	adds	r4, #7
    ffc0:	f024 0407 	bic.w	r4, r4, #7
    ffc4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    ffc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    ffcc:	e7aa      	b.n	ff24 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    ffce:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    ffd0:	bf04      	itt	eq
    ffd2:	f854 3b04 	ldreq.w	r3, [r4], #4
    ffd6:	930c      	streq	r3, [sp, #48]	; 0x30
    ffd8:	e7a4      	b.n	ff24 <cbvprintf+0x3f8>
		switch (conv->specifier) {
    ffda:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    ffde:	2878      	cmp	r0, #120	; 0x78
    ffe0:	d8af      	bhi.n	ff42 <cbvprintf+0x416>
    ffe2:	2862      	cmp	r0, #98	; 0x62
    ffe4:	d820      	bhi.n	10028 <cbvprintf+0x4fc>
    ffe6:	2825      	cmp	r0, #37	; 0x25
    ffe8:	f43f adb2 	beq.w	fb50 <cbvprintf+0x24>
    ffec:	2858      	cmp	r0, #88	; 0x58
    ffee:	d1a8      	bne.n	ff42 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
    fff0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    fff4:	9300      	str	r3, [sp, #0]
    fff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    fffa:	ab06      	add	r3, sp, #24
    fffc:	aa0e      	add	r2, sp, #56	; 0x38
    fffe:	f7ff fd45 	bl	fa8c <encode_uint>
   10002:	4681      	mov	r9, r0
			if (precision >= 0) {
   10004:	2f00      	cmp	r7, #0
   10006:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1000a:	db0b      	blt.n	10024 <cbvprintf+0x4f8>
				conv->flag_zero = false;
   1000c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   10010:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   10014:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   10018:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   1001a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   1001e:	d901      	bls.n	10024 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   10020:	1aff      	subs	r7, r7, r3
   10022:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   10024:	4607      	mov	r7, r0
   10026:	e03c      	b.n	100a2 <cbvprintf+0x576>
   10028:	3863      	subs	r0, #99	; 0x63
   1002a:	2815      	cmp	r0, #21
   1002c:	d889      	bhi.n	ff42 <cbvprintf+0x416>
   1002e:	a201      	add	r2, pc, #4	; (adr r2, 10034 <cbvprintf+0x508>)
   10030:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   10034:	000100b3 	.word	0x000100b3
   10038:	00010115 	.word	0x00010115
   1003c:	0000ff43 	.word	0x0000ff43
   10040:	0000ff43 	.word	0x0000ff43
   10044:	0000ff43 	.word	0x0000ff43
   10048:	0000ff43 	.word	0x0000ff43
   1004c:	00010115 	.word	0x00010115
   10050:	0000ff43 	.word	0x0000ff43
   10054:	0000ff43 	.word	0x0000ff43
   10058:	0000ff43 	.word	0x0000ff43
   1005c:	0000ff43 	.word	0x0000ff43
   10060:	00010173 	.word	0x00010173
   10064:	00010141 	.word	0x00010141
   10068:	00010145 	.word	0x00010145
   1006c:	0000ff43 	.word	0x0000ff43
   10070:	0000ff43 	.word	0x0000ff43
   10074:	0001008d 	.word	0x0001008d
   10078:	0000ff43 	.word	0x0000ff43
   1007c:	00010141 	.word	0x00010141
   10080:	0000ff43 	.word	0x0000ff43
   10084:	0000ff43 	.word	0x0000ff43
   10088:	00010141 	.word	0x00010141
			if (precision >= 0) {
   1008c:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   1008e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   10092:	db0a      	blt.n	100aa <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   10094:	4639      	mov	r1, r7
   10096:	4648      	mov	r0, r9
   10098:	f00b feb2 	bl	1be00 <strnlen>
			bpe = bps + len;
   1009c:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   100a0:	2600      	movs	r6, #0
		if (bps == NULL) {
   100a2:	f1b9 0f00 	cmp.w	r9, #0
   100a6:	d10c      	bne.n	100c2 <cbvprintf+0x596>
   100a8:	e74b      	b.n	ff42 <cbvprintf+0x416>
				len = strlen(bps);
   100aa:	4648      	mov	r0, r9
   100ac:	f7fc ff90 	bl	cfd0 <strlen>
   100b0:	e7f4      	b.n	1009c <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   100b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   100b4:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   100b8:	2600      	movs	r6, #0
			bpe = buf + 1;
   100ba:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   100be:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   100c2:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   100c6:	b106      	cbz	r6, 100ca <cbvprintf+0x59e>
			nj_len += 1U;
   100c8:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   100ca:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   100ce:	06d0      	lsls	r0, r2, #27
   100d0:	d569      	bpl.n	101a6 <cbvprintf+0x67a>
			nj_len += 2U;
   100d2:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   100d4:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   100d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   100d8:	bf48      	it	mi
   100da:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   100dc:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   100de:	bf48      	it	mi
   100e0:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   100e2:	f1b8 0f00 	cmp.w	r8, #0
   100e6:	dd76      	ble.n	101d6 <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   100e8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   100ec:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   100f0:	f3c2 0380 	ubfx	r3, r2, #2, #1
   100f4:	9303      	str	r3, [sp, #12]
   100f6:	0753      	lsls	r3, r2, #29
   100f8:	d46d      	bmi.n	101d6 <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   100fa:	0650      	lsls	r0, r2, #25
   100fc:	d561      	bpl.n	101c2 <cbvprintf+0x696>
					if (sign != 0) {
   100fe:	b13e      	cbz	r6, 10110 <cbvprintf+0x5e4>
						OUTC(sign);
   10100:	4659      	mov	r1, fp
   10102:	4630      	mov	r0, r6
   10104:	47d0      	blx	sl
   10106:	2800      	cmp	r0, #0
   10108:	db58      	blt.n	101bc <cbvprintf+0x690>
						sign = 0;
   1010a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   1010c:	3501      	adds	r5, #1
						sign = 0;
   1010e:	461e      	mov	r6, r3
					pad = '0';
   10110:	2330      	movs	r3, #48	; 0x30
   10112:	e057      	b.n	101c4 <cbvprintf+0x698>
			if (conv->flag_plus) {
   10114:	071e      	lsls	r6, r3, #28
   10116:	d411      	bmi.n	1013c <cbvprintf+0x610>
				sign = ' ';
   10118:	f013 0610 	ands.w	r6, r3, #16
   1011c:	bf18      	it	ne
   1011e:	2620      	movne	r6, #32
			sint = value->sint;
   10120:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   10124:	2a00      	cmp	r2, #0
   10126:	f173 0100 	sbcs.w	r1, r3, #0
   1012a:	f6bf af61 	bge.w	fff0 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   1012e:	4252      	negs	r2, r2
   10130:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10134:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   10138:	262d      	movs	r6, #45	; 0x2d
   1013a:	e759      	b.n	fff0 <cbvprintf+0x4c4>
				sign = '+';
   1013c:	262b      	movs	r6, #43	; 0x2b
   1013e:	e7ef      	b.n	10120 <cbvprintf+0x5f4>
		switch (conv->specifier) {
   10140:	2600      	movs	r6, #0
   10142:	e755      	b.n	fff0 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   10144:	980c      	ldr	r0, [sp, #48]	; 0x30
   10146:	b348      	cbz	r0, 1019c <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10148:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   1014c:	9300      	str	r3, [sp, #0]
   1014e:	aa0e      	add	r2, sp, #56	; 0x38
   10150:	ab06      	add	r3, sp, #24
   10152:	2100      	movs	r1, #0
   10154:	f7ff fc9a 	bl	fa8c <encode_uint>
				conv->altform_0c = true;
   10158:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   1015c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10160:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   10164:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10168:	4681      	mov	r9, r0
				conv->altform_0c = true;
   1016a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   1016e:	2600      	movs	r6, #0
				goto prec_int_pad0;
   10170:	e748      	b.n	10004 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   10172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   10174:	2907      	cmp	r1, #7
   10176:	f63f aee4 	bhi.w	ff42 <cbvprintf+0x416>
   1017a:	e8df f001 	tbb	[pc, r1]
   1017e:	040d      	.short	0x040d
   10180:	08080d06 	.word	0x08080d06
   10184:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   10186:	701d      	strb	r5, [r3, #0]
		break;
   10188:	e6db      	b.n	ff42 <cbvprintf+0x416>
		*(short *)dp = (short)count;
   1018a:	801d      	strh	r5, [r3, #0]
		break;
   1018c:	e6d9      	b.n	ff42 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   1018e:	4628      	mov	r0, r5
   10190:	17e9      	asrs	r1, r5, #31
   10192:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   10196:	e6d4      	b.n	ff42 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10198:	601d      	str	r5, [r3, #0]
		break;
   1019a:	e6d2      	b.n	ff42 <cbvprintf+0x416>
			bpe = bps + 5;
   1019c:	4f2e      	ldr	r7, [pc, #184]	; (10258 <cbvprintf+0x72c>)
   1019e:	4606      	mov	r6, r0
			bps = "(nil)";
   101a0:	f1a7 0905 	sub.w	r9, r7, #5
   101a4:	e78d      	b.n	100c2 <cbvprintf+0x596>
		} else if (conv->altform_0) {
   101a6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   101a8:	bf48      	it	mi
   101aa:	3301      	addmi	r3, #1
   101ac:	e792      	b.n	100d4 <cbvprintf+0x5a8>
					OUTC(pad);
   101ae:	4618      	mov	r0, r3
   101b0:	4659      	mov	r1, fp
   101b2:	9303      	str	r3, [sp, #12]
   101b4:	47d0      	blx	sl
   101b6:	2800      	cmp	r0, #0
   101b8:	9b03      	ldr	r3, [sp, #12]
   101ba:	da04      	bge.n	101c6 <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   101bc:	b013      	add	sp, #76	; 0x4c
   101be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   101c2:	2320      	movs	r3, #32
   101c4:	4445      	add	r5, r8
   101c6:	4642      	mov	r2, r8
				while (width-- > 0) {
   101c8:	2a00      	cmp	r2, #0
   101ca:	eba5 0108 	sub.w	r1, r5, r8
   101ce:	f108 38ff 	add.w	r8, r8, #4294967295
   101d2:	dcec      	bgt.n	101ae <cbvprintf+0x682>
   101d4:	460d      	mov	r5, r1
		if (sign != 0) {
   101d6:	b12e      	cbz	r6, 101e4 <cbvprintf+0x6b8>
			OUTC(sign);
   101d8:	4659      	mov	r1, fp
   101da:	4630      	mov	r0, r6
   101dc:	47d0      	blx	sl
   101de:	2800      	cmp	r0, #0
   101e0:	dbec      	blt.n	101bc <cbvprintf+0x690>
   101e2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   101e4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   101e8:	06d9      	lsls	r1, r3, #27
   101ea:	d401      	bmi.n	101f0 <cbvprintf+0x6c4>
   101ec:	071a      	lsls	r2, r3, #28
   101ee:	d505      	bpl.n	101fc <cbvprintf+0x6d0>
				OUTC('0');
   101f0:	4659      	mov	r1, fp
   101f2:	2030      	movs	r0, #48	; 0x30
   101f4:	47d0      	blx	sl
   101f6:	2800      	cmp	r0, #0
   101f8:	dbe0      	blt.n	101bc <cbvprintf+0x690>
   101fa:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   101fc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   10200:	06db      	lsls	r3, r3, #27
   10202:	d506      	bpl.n	10212 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   10204:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   10208:	4659      	mov	r1, fp
   1020a:	47d0      	blx	sl
   1020c:	2800      	cmp	r0, #0
   1020e:	dbd5      	blt.n	101bc <cbvprintf+0x690>
   10210:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10212:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   10214:	442e      	add	r6, r5
   10216:	1b73      	subs	r3, r6, r5
   10218:	2b00      	cmp	r3, #0
   1021a:	dc15      	bgt.n	10248 <cbvprintf+0x71c>
			OUTS(bps, bpe);
   1021c:	463b      	mov	r3, r7
   1021e:	464a      	mov	r2, r9
   10220:	4659      	mov	r1, fp
   10222:	4650      	mov	r0, sl
   10224:	f00a fcd5 	bl	1abd2 <outs>
   10228:	2800      	cmp	r0, #0
   1022a:	dbc7      	blt.n	101bc <cbvprintf+0x690>
   1022c:	4405      	add	r5, r0
		while (width > 0) {
   1022e:	44a8      	add	r8, r5
   10230:	eba8 0305 	sub.w	r3, r8, r5
   10234:	2b00      	cmp	r3, #0
   10236:	f77f ae84 	ble.w	ff42 <cbvprintf+0x416>
			OUTC(' ');
   1023a:	4659      	mov	r1, fp
   1023c:	2020      	movs	r0, #32
   1023e:	47d0      	blx	sl
   10240:	2800      	cmp	r0, #0
   10242:	dbbb      	blt.n	101bc <cbvprintf+0x690>
   10244:	3501      	adds	r5, #1
			--width;
   10246:	e7f3      	b.n	10230 <cbvprintf+0x704>
				OUTC('0');
   10248:	4659      	mov	r1, fp
   1024a:	2030      	movs	r0, #48	; 0x30
   1024c:	47d0      	blx	sl
   1024e:	2800      	cmp	r0, #0
   10250:	dbb4      	blt.n	101bc <cbvprintf+0x690>
   10252:	3501      	adds	r5, #1
   10254:	e7df      	b.n	10216 <cbvprintf+0x6ea>
   10256:	bf00      	nop
   10258:	0001da82 	.word	0x0001da82

0001025c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   1025c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1025e:	f04f 0220 	mov.w	r2, #32
   10262:	f3ef 8311 	mrs	r3, BASEPRI
   10266:	f382 8812 	msr	BASEPRI_MAX, r2
   1026a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   1026e:	f001 fe1d 	bl	11eac <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   10272:	4803      	ldr	r0, [pc, #12]	; (10280 <sys_reboot+0x24>)
   10274:	f00a fb2a 	bl	1a8cc <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   10278:	f000 feea 	bl	11050 <arch_cpu_idle>
   1027c:	e7fc      	b.n	10278 <sys_reboot+0x1c>
   1027e:	bf00      	nop
   10280:	0001da83 	.word	0x0001da83

00010284 <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
   10284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (k_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
   10288:	4b12      	ldr	r3, [pc, #72]	; (102d4 <log_generic+0x50>)
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1028a:	4c13      	ldr	r4, [pc, #76]	; (102d8 <log_generic+0x54>)
   1028c:	681b      	ldr	r3, [r3, #0]
   1028e:	4d13      	ldr	r5, [pc, #76]	; (102dc <log_generic+0x58>)
{
   10290:	b085      	sub	sp, #20
   10292:	4681      	mov	r9, r0
   10294:	468a      	mov	sl, r1
   10296:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
   10298:	4798      	blx	r3
   1029a:	1b2d      	subs	r5, r5, r4
   1029c:	4680      	mov	r8, r0
   1029e:	112d      	asrs	r5, r5, #4

		for (int i = 0; i < log_backend_count_get(); i++) {
   102a0:	2600      	movs	r6, #0
   102a2:	42b5      	cmp	r5, r6
   102a4:	dc02      	bgt.n	102ac <log_generic+0x28>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
   102a6:	b005      	add	sp, #20
   102a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend) && runtime_ok) {
   102ac:	4620      	mov	r0, r4
   102ae:	f00a fcae 	bl	1ac0e <log_backend_is_active>
   102b2:	b160      	cbz	r0, 102ce <log_generic+0x4a>
	if (backend->api->put_sync_string) {
   102b4:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
   102b6:	9703      	str	r7, [sp, #12]
   102b8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   102bc:	f1bb 0f00 	cmp.w	fp, #0
   102c0:	d005      	beq.n	102ce <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
   102c2:	9700      	str	r7, [sp, #0]
   102c4:	4653      	mov	r3, sl
   102c6:	4642      	mov	r2, r8
   102c8:	4649      	mov	r1, r9
   102ca:	4620      	mov	r0, r4
   102cc:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   102ce:	3601      	adds	r6, #1
   102d0:	3410      	adds	r4, #16
   102d2:	e7e6      	b.n	102a2 <log_generic+0x1e>
   102d4:	200000e0 	.word	0x200000e0
   102d8:	0001c9e8 	.word	0x0001c9e8
   102dc:	0001c9f8 	.word	0x0001c9f8

000102e0 <log_hexdump_sync>:
	va_end(ap);
}

void log_hexdump_sync(struct log_msg_ids src_level, const char *metadata,
		      const void *data, uint32_t len)
{
   102e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102e4:	469a      	mov	sl, r3
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_hexdump(metadata, (const uint8_t *)data, len,
				     src_level);
	} else {
		struct log_backend const *backend;
		log_timestamp_t timestamp = timestamp_func();
   102e6:	4b14      	ldr	r3, [pc, #80]	; (10338 <log_hexdump_sync+0x58>)
	return __log_backends_end - __log_backends_start;
   102e8:	4c14      	ldr	r4, [pc, #80]	; (1033c <log_hexdump_sync+0x5c>)
   102ea:	681b      	ldr	r3, [r3, #0]
{
   102ec:	b085      	sub	sp, #20
   102ee:	4607      	mov	r7, r0
   102f0:	4688      	mov	r8, r1
   102f2:	9203      	str	r2, [sp, #12]
		log_timestamp_t timestamp = timestamp_func();
   102f4:	4798      	blx	r3
   102f6:	4b12      	ldr	r3, [pc, #72]	; (10340 <log_hexdump_sync+0x60>)
   102f8:	1b1b      	subs	r3, r3, r4
   102fa:	4606      	mov	r6, r0
   102fc:	ea4f 1923 	mov.w	r9, r3, asr #4

		for (int i = 0; i < log_backend_count_get(); i++) {
   10300:	2500      	movs	r5, #0
   10302:	454d      	cmp	r5, r9
   10304:	db02      	blt.n	1030c <log_hexdump_sync+0x2c>
					backend, src_level, timestamp, metadata,
					(const uint8_t *)data, len);
			}
		}
	}
}
   10306:	b005      	add	sp, #20
   10308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend) && runtime_ok) {
   1030c:	4620      	mov	r0, r4
   1030e:	f00a fc7e 	bl	1ac0e <log_backend_is_active>
   10312:	b170      	cbz	r0, 10332 <log_hexdump_sync+0x52>
	if (backend->api->put_sync_hexdump) {
   10314:	6823      	ldr	r3, [r4, #0]
   10316:	f8d3 b00c 	ldr.w	fp, [r3, #12]
   1031a:	f1bb 0f00 	cmp.w	fp, #0
   1031e:	d008      	beq.n	10332 <log_hexdump_sync+0x52>
		backend->api->put_sync_hexdump(backend, src_level, timestamp,
   10320:	9b03      	ldr	r3, [sp, #12]
   10322:	9300      	str	r3, [sp, #0]
   10324:	f8cd a004 	str.w	sl, [sp, #4]
   10328:	4643      	mov	r3, r8
   1032a:	4632      	mov	r2, r6
   1032c:	4639      	mov	r1, r7
   1032e:	4620      	mov	r0, r4
   10330:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   10332:	3501      	adds	r5, #1
   10334:	3410      	adds	r4, #16
   10336:	e7e4      	b.n	10302 <log_hexdump_sync+0x22>
   10338:	200000e0 	.word	0x200000e0
   1033c:	0001c9e8 	.word	0x0001c9e8
   10340:	0001c9f8 	.word	0x0001c9f8

00010344 <log_core_init>:
void log_core_init(void)
{
	uint32_t freq;
	log_timestamp_get_t _timestamp_func;

	panic_mode = false;
   10344:	4a05      	ldr	r2, [pc, #20]	; (1035c <log_core_init+0x18>)
   10346:	2300      	movs	r3, #0
   10348:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1034a:	4a05      	ldr	r2, [pc, #20]	; (10360 <log_core_init+0x1c>)
   1034c:	6013      	str	r3, [r2, #0]
{
	if (timestamp_getter == NULL) {
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
   1034e:	4b05      	ldr	r3, [pc, #20]	; (10364 <log_core_init+0x20>)
   10350:	4a05      	ldr	r2, [pc, #20]	; (10368 <log_core_init+0x24>)
   10352:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   10354:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10358:	f000 ba58 	b.w	1080c <log_output_timestamp_freq_set>
   1035c:	200025b2 	.word	0x200025b2
   10360:	20000978 	.word	0x20000978
   10364:	200000e0 	.word	0x200000e0
   10368:	0001ac15 	.word	0x0001ac15

0001036c <log_init>:
	return __log_backends_end - __log_backends_start;
   1036c:	4b1a      	ldr	r3, [pc, #104]	; (103d8 <log_init+0x6c>)
   1036e:	4a1b      	ldr	r2, [pc, #108]	; (103dc <log_init+0x70>)
   10370:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   10372:	2b9f      	cmp	r3, #159	; 0x9f
{
   10374:	b570      	push	{r4, r5, r6, lr}
   10376:	ea4f 1623 	mov.w	r6, r3, asr #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   1037a:	d90b      	bls.n	10394 <log_init+0x28>
   1037c:	4918      	ldr	r1, [pc, #96]	; (103e0 <log_init+0x74>)
   1037e:	4819      	ldr	r0, [pc, #100]	; (103e4 <log_init+0x78>)
   10380:	4a19      	ldr	r2, [pc, #100]	; (103e8 <log_init+0x7c>)
   10382:	f240 234a 	movw	r3, #586	; 0x24a
   10386:	f00a faa1 	bl	1a8cc <printk>
   1038a:	4817      	ldr	r0, [pc, #92]	; (103e8 <log_init+0x7c>)
   1038c:	f240 214a 	movw	r1, #586	; 0x24a
   10390:	f00a fc35 	bl	1abfe <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10394:	f3bf 8f5b 	dmb	ish
   10398:	4b14      	ldr	r3, [pc, #80]	; (103ec <log_init+0x80>)
   1039a:	e853 5f00 	ldrex	r5, [r3]
   1039e:	1c6a      	adds	r2, r5, #1
   103a0:	e843 2100 	strex	r1, r2, [r3]
   103a4:	2900      	cmp	r1, #0
   103a6:	d1f8      	bne.n	1039a <log_init+0x2e>
   103a8:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   103ac:	b915      	cbnz	r5, 103b4 <log_init+0x48>
   103ae:	4c0b      	ldr	r4, [pc, #44]	; (103dc <log_init+0x70>)
	for (i = 0; i < log_backend_count_get(); i++) {
   103b0:	42b5      	cmp	r5, r6
   103b2:	db00      	blt.n	103b6 <log_init+0x4a>
}
   103b4:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   103b6:	7b23      	ldrb	r3, [r4, #12]
   103b8:	b153      	cbz	r3, 103d0 <log_init+0x64>
			if (backend->api->init != NULL) {
   103ba:	6823      	ldr	r3, [r4, #0]
   103bc:	699b      	ldr	r3, [r3, #24]
   103be:	b10b      	cbz	r3, 103c4 <log_init+0x58>
				backend->api->init(backend);
   103c0:	4620      	mov	r0, r4
   103c2:	4798      	blx	r3
			log_backend_enable(backend,
   103c4:	6863      	ldr	r3, [r4, #4]
   103c6:	2204      	movs	r2, #4
   103c8:	6819      	ldr	r1, [r3, #0]
   103ca:	4620      	mov	r0, r4
   103cc:	f000 f844 	bl	10458 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   103d0:	3501      	adds	r5, #1
   103d2:	3410      	adds	r4, #16
   103d4:	e7ec      	b.n	103b0 <log_init+0x44>
   103d6:	bf00      	nop
   103d8:	0001c9f8 	.word	0x0001c9f8
   103dc:	0001c9e8 	.word	0x0001c9e8
   103e0:	0001daf1 	.word	0x0001daf1
   103e4:	0001d2dc 	.word	0x0001d2dc
   103e8:	0001daac 	.word	0x0001daac
   103ec:	2000097c 	.word	0x2000097c

000103f0 <z_impl_log_panic>:

	return 0;
}

void z_impl_log_panic(void)
{
   103f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct log_backend const *backend;

	if (panic_mode) {
   103f2:	4f0c      	ldr	r7, [pc, #48]	; (10424 <z_impl_log_panic+0x34>)
   103f4:	783d      	ldrb	r5, [r7, #0]
   103f6:	b94d      	cbnz	r5, 1040c <z_impl_log_panic+0x1c>
   103f8:	4c0b      	ldr	r4, [pc, #44]	; (10428 <z_impl_log_panic+0x38>)
   103fa:	4e0c      	ldr	r6, [pc, #48]	; (1042c <z_impl_log_panic+0x3c>)
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	log_init();
   103fc:	f7ff ffb6 	bl	1036c <log_init>
   10400:	1b36      	subs	r6, r6, r4
   10402:	1136      	asrs	r6, r6, #4

	for (int i = 0; i < log_backend_count_get(); i++) {
   10404:	42b5      	cmp	r5, r6
   10406:	db02      	blt.n	1040e <z_impl_log_panic+0x1e>
		/* Flush */
		while (log_process(false) == true) {
		}
	}

	panic_mode = true;
   10408:	2301      	movs	r3, #1
   1040a:	703b      	strb	r3, [r7, #0]
}
   1040c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   1040e:	4620      	mov	r0, r4
   10410:	f00a fbfd 	bl	1ac0e <log_backend_is_active>
   10414:	b118      	cbz	r0, 1041e <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   10416:	6823      	ldr	r3, [r4, #0]
   10418:	4620      	mov	r0, r4
   1041a:	695b      	ldr	r3, [r3, #20]
   1041c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1041e:	3501      	adds	r5, #1
   10420:	3410      	adds	r4, #16
   10422:	e7ef      	b.n	10404 <z_impl_log_panic+0x14>
   10424:	200025b2 	.word	0x200025b2
   10428:	0001c9e8 	.word	0x0001c9e8
   1042c:	0001c9f8 	.word	0x0001c9f8

00010430 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   10430:	4b01      	ldr	r3, [pc, #4]	; (10438 <z_log_notify_backend_enabled+0x8>)
   10432:	2201      	movs	r2, #1
   10434:	701a      	strb	r2, [r3, #0]
}
   10436:	4770      	bx	lr
   10438:	200025b1 	.word	0x200025b1

0001043c <log_source_name_get>:
   1043c:	4a04      	ldr	r2, [pc, #16]	; (10450 <log_source_name_get+0x14>)
   1043e:	4b05      	ldr	r3, [pc, #20]	; (10454 <log_source_name_get+0x18>)
   10440:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   10442:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   10446:	bf34      	ite	cc
   10448:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   1044c:	2000      	movcs	r0, #0
}
   1044e:	4770      	bx	lr
   10450:	0001c940 	.word	0x0001c940
   10454:	0001c9e8 	.word	0x0001c9e8

00010458 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   10458:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1045a:	4c0d      	ldr	r4, [pc, #52]	; (10490 <log_backend_enable+0x38>)
   1045c:	1b04      	subs	r4, r0, r4
   1045e:	1124      	asrs	r4, r4, #4
   10460:	3401      	adds	r4, #1
{
   10462:	4605      	mov	r5, r0
   10464:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   10466:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   10468:	b948      	cbnz	r0, 1047e <log_backend_enable+0x26>
   1046a:	490a      	ldr	r1, [pc, #40]	; (10494 <log_backend_enable+0x3c>)
   1046c:	480a      	ldr	r0, [pc, #40]	; (10498 <log_backend_enable+0x40>)
   1046e:	4a0b      	ldr	r2, [pc, #44]	; (1049c <log_backend_enable+0x44>)
   10470:	23d1      	movs	r3, #209	; 0xd1
   10472:	f00a fa2b 	bl	1a8cc <printk>
   10476:	4809      	ldr	r0, [pc, #36]	; (1049c <log_backend_enable+0x44>)
   10478:	21d1      	movs	r1, #209	; 0xd1
   1047a:	f00a fbc0 	bl	1abfe <assert_post_action>
	backend->cb->id = id;
   1047e:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   10480:	2201      	movs	r2, #1
	backend->cb->id = id;
   10482:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
   10484:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   10486:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   10488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
   1048c:	f7ff bfd0 	b.w	10430 <z_log_notify_backend_enabled>
   10490:	0001c9e8 	.word	0x0001c9e8
   10494:	0001dba2 	.word	0x0001dba2
   10498:	0001d2dc 	.word	0x0001d2dc
   1049c:	0001db71 	.word	0x0001db71

000104a0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   104a0:	b40e      	push	{r1, r2, r3}
   104a2:	b503      	push	{r0, r1, lr}
   104a4:	ab03      	add	r3, sp, #12
   104a6:	4601      	mov	r1, r0
   104a8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   104ac:	4804      	ldr	r0, [pc, #16]	; (104c0 <print_formatted+0x20>)
	va_start(args, fmt);
   104ae:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   104b0:	f7ff fb3c 	bl	fb2c <cbvprintf>
	va_end(args);

	return length;
}
   104b4:	b002      	add	sp, #8
   104b6:	f85d eb04 	ldr.w	lr, [sp], #4
   104ba:	b003      	add	sp, #12
   104bc:	4770      	bx	lr
   104be:	bf00      	nop
   104c0:	0001ac55 	.word	0x0001ac55

000104c4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   104c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104c8:	b087      	sub	sp, #28
   104ca:	461f      	mov	r7, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   104cc:	f001 0301 	and.w	r3, r1, #1
{
   104d0:	9205      	str	r2, [sp, #20]
   104d2:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   104d6:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   104da:	9304      	str	r3, [sp, #16]
{
   104dc:	4606      	mov	r6, r0
   104de:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   104e0:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   104e4:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   104e8:	f00a fbb2 	bl	1ac50 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   104ec:	4602      	mov	r2, r0
   104ee:	2800      	cmp	r0, #0
   104f0:	d044      	beq.n	1057c <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   104f2:	4939      	ldr	r1, [pc, #228]	; (105d8 <prefix_print+0x114>)
   104f4:	4630      	mov	r0, r6
   104f6:	f7ff ffd3 	bl	104a0 <print_formatted>
   104fa:	4604      	mov	r4, r0
	}

	if (stamp) {
   104fc:	f1bb 0f00 	cmp.w	fp, #0
   10500:	d008      	beq.n	10514 <prefix_print+0x50>
	if (!format) {
   10502:	f018 0f44 	tst.w	r8, #68	; 0x44
   10506:	d13b      	bne.n	10580 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   10508:	4934      	ldr	r1, [pc, #208]	; (105dc <prefix_print+0x118>)
   1050a:	463a      	mov	r2, r7
   1050c:	4630      	mov	r0, r6
   1050e:	f7ff ffc7 	bl	104a0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   10512:	4404      	add	r4, r0
	if (color) {
   10514:	9b04      	ldr	r3, [sp, #16]
   10516:	b153      	cbz	r3, 1052e <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   10518:	4b31      	ldr	r3, [pc, #196]	; (105e0 <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   1051a:	4932      	ldr	r1, [pc, #200]	; (105e4 <prefix_print+0x120>)
		const char *log_color = start && (colors[level] != NULL) ?
   1051c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   10520:	4b31      	ldr	r3, [pc, #196]	; (105e8 <prefix_print+0x124>)
   10522:	4630      	mov	r0, r6
   10524:	2a00      	cmp	r2, #0
   10526:	bf08      	it	eq
   10528:	461a      	moveq	r2, r3
   1052a:	f7ff ffb9 	bl	104a0 <print_formatted>
	if (level_on) {
   1052e:	b13d      	cbz	r5, 10540 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   10530:	4b2e      	ldr	r3, [pc, #184]	; (105ec <prefix_print+0x128>)
   10532:	492f      	ldr	r1, [pc, #188]	; (105f0 <prefix_print+0x12c>)
   10534:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   10538:	4630      	mov	r0, r6
   1053a:	f7ff ffb1 	bl	104a0 <print_formatted>
   1053e:	4605      	mov	r5, r0
	if (source_id >= 0) {
   10540:	f1ba 0f00 	cmp.w	sl, #0
   10544:	db16      	blt.n	10574 <prefix_print+0xb0>
		total += print_formatted(output,
   10546:	9b05      	ldr	r3, [sp, #20]
   10548:	2b00      	cmp	r3, #0
   1054a:	d043      	beq.n	105d4 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1054c:	2301      	movs	r3, #1
   1054e:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   10552:	4b28      	ldr	r3, [pc, #160]	; (105f4 <prefix_print+0x130>)
   10554:	4f28      	ldr	r7, [pc, #160]	; (105f8 <prefix_print+0x134>)
   10556:	f019 0f10 	tst.w	r9, #16
   1055a:	bf18      	it	ne
   1055c:	461f      	movne	r7, r3
   1055e:	4651      	mov	r1, sl
   10560:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   10564:	f7ff ff6a 	bl	1043c <log_source_name_get>
   10568:	4639      	mov	r1, r7
   1056a:	4602      	mov	r2, r0
   1056c:	4630      	mov	r0, r6
   1056e:	f7ff ff97 	bl	104a0 <print_formatted>
   10572:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   10574:	1928      	adds	r0, r5, r4
   10576:	b007      	add	sp, #28
   10578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   1057c:	4604      	mov	r4, r0
   1057e:	e7bd      	b.n	104fc <prefix_print+0x38>
	} else if (freq != 0U) {
   10580:	4b1e      	ldr	r3, [pc, #120]	; (105fc <prefix_print+0x138>)
   10582:	6818      	ldr	r0, [r3, #0]
   10584:	2800      	cmp	r0, #0
   10586:	d0c4      	beq.n	10512 <prefix_print+0x4e>
		timestamp /= timestamp_div;
   10588:	4b1d      	ldr	r3, [pc, #116]	; (10600 <prefix_print+0x13c>)
   1058a:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   1058e:	6819      	ldr	r1, [r3, #0]
   10590:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   10594:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   10598:	fb00 7711 	mls	r7, r0, r1, r7
   1059c:	fbb1 f2fc 	udiv	r2, r1, ip
   105a0:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   105a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   105a8:	434f      	muls	r7, r1
		mins = seconds / 60U;
   105aa:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   105ae:	fbb7 f8f0 	udiv	r8, r7, r0
   105b2:	fb00 7718 	mls	r7, r0, r8, r7
   105b6:	434f      	muls	r7, r1
		mins = seconds / 60U;
   105b8:	fbbc f3fe 	udiv	r3, ip, lr
			length = print_formatted(output,
   105bc:	fb0e c113 	mls	r1, lr, r3, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   105c0:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   105c4:	9100      	str	r1, [sp, #0]
   105c6:	e9cd 8001 	strd	r8, r0, [sp, #4]
   105ca:	490e      	ldr	r1, [pc, #56]	; (10604 <prefix_print+0x140>)
   105cc:	4630      	mov	r0, r6
   105ce:	f7ff ff67 	bl	104a0 <print_formatted>
   105d2:	e79e      	b.n	10512 <prefix_print+0x4e>
		total += print_formatted(output,
   105d4:	4f08      	ldr	r7, [pc, #32]	; (105f8 <prefix_print+0x134>)
   105d6:	e7c2      	b.n	1055e <prefix_print+0x9a>
   105d8:	0001dbc7 	.word	0x0001dbc7
   105dc:	0001dbcb 	.word	0x0001dbcb
   105e0:	0001cb58 	.word	0x0001cb58
   105e4:	0001d38f 	.word	0x0001d38f
   105e8:	0001dbb9 	.word	0x0001dbb9
   105ec:	0001cb6c 	.word	0x0001cb6c
   105f0:	0001dbf0 	.word	0x0001dbf0
   105f4:	0001dbc3 	.word	0x0001dbc3
   105f8:	0001dbbe 	.word	0x0001dbbe
   105fc:	20000980 	.word	0x20000980
   10600:	20000984 	.word	0x20000984
   10604:	0001dbd4 	.word	0x0001dbd4

00010608 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   10608:	b538      	push	{r3, r4, r5, lr}
   1060a:	460c      	mov	r4, r1
	if (color) {
   1060c:	07e1      	lsls	r1, r4, #31
{
   1060e:	4605      	mov	r5, r0
	if (color) {
   10610:	d503      	bpl.n	1061a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   10612:	4a08      	ldr	r2, [pc, #32]	; (10634 <postfix_print+0x2c>)
   10614:	4908      	ldr	r1, [pc, #32]	; (10638 <postfix_print+0x30>)
   10616:	f7ff ff43 	bl	104a0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1061a:	06e2      	lsls	r2, r4, #27
   1061c:	d408      	bmi.n	10630 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1061e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   10620:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   10622:	bf4c      	ite	mi
   10624:	4905      	ldrmi	r1, [pc, #20]	; (1063c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   10626:	4906      	ldrpl	r1, [pc, #24]	; (10640 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   10628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   1062c:	f7ff bf38 	b.w	104a0 <print_formatted>
}
   10630:	bd38      	pop	{r3, r4, r5, pc}
   10632:	bf00      	nop
   10634:	0001dbb9 	.word	0x0001dbb9
   10638:	0001d38f 	.word	0x0001d38f
   1063c:	0002027f 	.word	0x0002027f
   10640:	0001dbf6 	.word	0x0001dbf6

00010644 <hexdump_line_print>:
{
   10644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10648:	461d      	mov	r5, r3
   1064a:	9b08      	ldr	r3, [sp, #32]
   1064c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1064e:	06da      	lsls	r2, r3, #27
{
   10650:	4604      	mov	r4, r0
   10652:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   10654:	d405      	bmi.n	10662 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   10656:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   10658:	bf4c      	ite	mi
   1065a:	492b      	ldrmi	r1, [pc, #172]	; (10708 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   1065c:	492b      	ldrpl	r1, [pc, #172]	; (1070c <hexdump_line_print+0xc8>)
   1065e:	f7ff ff1f 	bl	104a0 <print_formatted>
		print_formatted(output, " ");
   10662:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 10714 <hexdump_line_print+0xd0>
{
   10666:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   1066a:	45a8      	cmp	r8, r5
   1066c:	db2d      	blt.n	106ca <hexdump_line_print+0x86>
			print_formatted(output, "   ");
   1066e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 10718 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
   10672:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1071c <hexdump_line_print+0xd8>
			print_formatted(output, " ");
   10676:	f8df a09c 	ldr.w	sl, [pc, #156]	; 10714 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1067a:	2500      	movs	r5, #0
		if (i < length) {
   1067c:	42bd      	cmp	r5, r7
   1067e:	d232      	bcs.n	106e6 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
   10680:	5d72      	ldrb	r2, [r6, r5]
   10682:	4649      	mov	r1, r9
   10684:	4620      	mov	r0, r4
   10686:	f7ff ff0b 	bl	104a0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1068a:	3501      	adds	r5, #1
   1068c:	2d10      	cmp	r5, #16
   1068e:	d123      	bne.n	106d8 <hexdump_line_print+0x94>
	print_formatted(output, "|");
   10690:	491f      	ldr	r1, [pc, #124]	; (10710 <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
   10692:	f8df 8080 	ldr.w	r8, [pc, #128]	; 10714 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   10696:	f8df 9088 	ldr.w	r9, [pc, #136]	; 10720 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
   1069a:	f8df a088 	ldr.w	sl, [pc, #136]	; 10724 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
   1069e:	4620      	mov	r0, r4
   106a0:	f7ff fefe 	bl	104a0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   106a4:	2500      	movs	r5, #0
		if (i < length) {
   106a6:	42af      	cmp	r7, r5
   106a8:	d929      	bls.n	106fe <hexdump_line_print+0xba>
			char c = (char)data[i];
   106aa:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   106ac:	f812 3009 	ldrb.w	r3, [r2, r9]
   106b0:	f013 0f97 	tst.w	r3, #151	; 0x97
   106b4:	bf08      	it	eq
   106b6:	222e      	moveq	r2, #46	; 0x2e
   106b8:	4651      	mov	r1, sl
   106ba:	4620      	mov	r0, r4
   106bc:	f7ff fef0 	bl	104a0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   106c0:	3501      	adds	r5, #1
   106c2:	2d10      	cmp	r5, #16
   106c4:	d114      	bne.n	106f0 <hexdump_line_print+0xac>
}
   106c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   106ca:	4649      	mov	r1, r9
   106cc:	4620      	mov	r0, r4
   106ce:	f7ff fee7 	bl	104a0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   106d2:	f108 0801 	add.w	r8, r8, #1
   106d6:	e7c8      	b.n	1066a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   106d8:	076a      	lsls	r2, r5, #29
   106da:	d1cf      	bne.n	1067c <hexdump_line_print+0x38>
			print_formatted(output, " ");
   106dc:	4651      	mov	r1, sl
   106de:	4620      	mov	r0, r4
   106e0:	f7ff fede 	bl	104a0 <print_formatted>
   106e4:	e7ca      	b.n	1067c <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   106e6:	4641      	mov	r1, r8
   106e8:	4620      	mov	r0, r4
   106ea:	f7ff fed9 	bl	104a0 <print_formatted>
   106ee:	e7cc      	b.n	1068a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   106f0:	076b      	lsls	r3, r5, #29
   106f2:	d1d8      	bne.n	106a6 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   106f4:	4641      	mov	r1, r8
   106f6:	4620      	mov	r0, r4
   106f8:	f7ff fed2 	bl	104a0 <print_formatted>
   106fc:	e7d3      	b.n	106a6 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   106fe:	4641      	mov	r1, r8
   10700:	4620      	mov	r0, r4
   10702:	f7ff fecd 	bl	104a0 <print_formatted>
   10706:	e7db      	b.n	106c0 <hexdump_line_print+0x7c>
   10708:	0002027f 	.word	0x0002027f
   1070c:	0001dbf6 	.word	0x0001dbf6
   10710:	0001dc03 	.word	0x0001dc03
   10714:	0001dc01 	.word	0x0001dc01
   10718:	0001dbff 	.word	0x0001dbff
   1071c:	0001dbf9 	.word	0x0001dbf9
   10720:	00020700 	.word	0x00020700
   10724:	0001d070 	.word	0x0001d070

00010728 <log_output_string>:
}

void log_output_string(const struct log_output *output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
   10728:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   1072c:	f011 0607 	ands.w	r6, r1, #7
{
   10730:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   10734:	4605      	mov	r5, r0
   10736:	461c      	mov	r4, r3
	if (!raw_string) {
   10738:	d00b      	beq.n	10752 <log_output_string+0x2a>
		prefix_print(output, flags, true, timestamp,
   1073a:	f3c1 1389 	ubfx	r3, r1, #6, #10
   1073e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   10742:	e9cd 6100 	strd	r6, r1, [sp]
   10746:	9302      	str	r3, [sp, #8]
   10748:	4639      	mov	r1, r7
   1074a:	4613      	mov	r3, r2
   1074c:	2201      	movs	r2, #1
   1074e:	f7ff feb9 	bl	104c4 <prefix_print>
				level, domain_id, source_id);
	}

	length = cbvprintf(out_func, (void *)output, fmt, ap);
   10752:	480f      	ldr	r0, [pc, #60]	; (10790 <log_output_string+0x68>)
   10754:	4643      	mov	r3, r8
   10756:	4622      	mov	r2, r4
   10758:	4629      	mov	r1, r5
   1075a:	f7ff f9e7 	bl	fb2c <cbvprintf>

	(void)length;

	if (raw_string) {
   1075e:	b98e      	cbnz	r6, 10784 <log_output_string+0x5c>
   10760:	3c01      	subs	r4, #1
	while (*fmt != '\0') {
   10762:	4633      	mov	r3, r6
   10764:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   10768:	2e00      	cmp	r6, #0
   1076a:	d1fa      	bne.n	10762 <log_output_string+0x3a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   1076c:	2b0a      	cmp	r3, #10
   1076e:	d103      	bne.n	10778 <log_output_string+0x50>
			print_formatted(output, "\r");
   10770:	4908      	ldr	r1, [pc, #32]	; (10794 <log_output_string+0x6c>)
   10772:	4628      	mov	r0, r5
   10774:	f7ff fe94 	bl	104a0 <print_formatted>
		}
	} else {
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   10778:	4628      	mov	r0, r5
}
   1077a:	b004      	add	sp, #16
   1077c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(output);
   10780:	f00a ba81 	b.w	1ac86 <log_output_flush>
		postfix_print(output, flags, level);
   10784:	4632      	mov	r2, r6
   10786:	4639      	mov	r1, r7
   10788:	4628      	mov	r0, r5
   1078a:	f7ff ff3d 	bl	10608 <postfix_print>
   1078e:	e7f3      	b.n	10778 <log_output_string+0x50>
   10790:	0001ac55 	.word	0x0001ac55
   10794:	0001dc41 	.word	0x0001dc41

00010798 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
   10798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1079c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1079e:	4698      	mov	r8, r3
	uint32_t prefix_offset;
	uint8_t level = (uint8_t)src_level.level;
   107a0:	f001 0907 	and.w	r9, r1, #7
		log_output_hexdump_syst_process(output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(output, flags, true, timestamp,
   107a4:	f3c1 1389 	ubfx	r3, r1, #6, #10
   107a8:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   107ac:	e9cd 9100 	strd	r9, r1, [sp]
   107b0:	9302      	str	r3, [sp, #8]
   107b2:	4631      	mov	r1, r6
   107b4:	4613      	mov	r3, r2
   107b6:	2201      	movs	r2, #1
{
   107b8:	4604      	mov	r4, r0
   107ba:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
	prefix_offset = prefix_print(output, flags, true, timestamp,
   107be:	f7ff fe81 	bl	104c4 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(output, "%s", metadata);
   107c2:	4911      	ldr	r1, [pc, #68]	; (10808 <log_output_hexdump+0x70>)
	prefix_offset = prefix_print(output, flags, true, timestamp,
   107c4:	4682      	mov	sl, r0
	print_formatted(output, "%s", metadata);
   107c6:	4642      	mov	r2, r8
   107c8:	4620      	mov	r0, r4
   107ca:	f7ff fe69 	bl	104a0 <print_formatted>

	while (length != 0U) {
   107ce:	b955      	cbnz	r5, 107e6 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	}

	postfix_print(output, flags, level);
   107d0:	4620      	mov	r0, r4
   107d2:	464a      	mov	r2, r9
   107d4:	4631      	mov	r1, r6
   107d6:	f7ff ff17 	bl	10608 <postfix_print>
	log_output_flush(output);
   107da:	4620      	mov	r0, r4
}
   107dc:	b004      	add	sp, #16
   107de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
   107e2:	f00a ba50 	b.w	1ac86 <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   107e6:	2d10      	cmp	r5, #16
   107e8:	46a8      	mov	r8, r5
   107ea:	bf28      	it	cs
   107ec:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(output, data, part_len,
   107f0:	4639      	mov	r1, r7
   107f2:	9600      	str	r6, [sp, #0]
   107f4:	4653      	mov	r3, sl
   107f6:	4642      	mov	r2, r8
   107f8:	4620      	mov	r0, r4
   107fa:	f7ff ff23 	bl	10644 <hexdump_line_print>
		data += part_len;
   107fe:	4447      	add	r7, r8
		length -= part_len;
   10800:	eba5 0508 	sub.w	r5, r5, r8
   10804:	e7e3      	b.n	107ce <log_output_hexdump+0x36>
   10806:	bf00      	nop
   10808:	0001d38f 	.word	0x0001d38f

0001080c <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1080c:	4a08      	ldr	r2, [pc, #32]	; (10830 <log_output_timestamp_freq_set+0x24>)
{
   1080e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   10810:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   10812:	4c08      	ldr	r4, [pc, #32]	; (10834 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   10814:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   10816:	2100      	movs	r1, #0
   10818:	42a0      	cmp	r0, r4
   1081a:	d804      	bhi.n	10826 <log_output_timestamp_freq_set+0x1a>
   1081c:	b101      	cbz	r1, 10820 <log_output_timestamp_freq_set+0x14>
   1081e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   10820:	4b05      	ldr	r3, [pc, #20]	; (10838 <log_output_timestamp_freq_set+0x2c>)
   10822:	6018      	str	r0, [r3, #0]
}
   10824:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   10826:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   10828:	005b      	lsls	r3, r3, #1
   1082a:	2101      	movs	r1, #1
   1082c:	e7f4      	b.n	10818 <log_output_timestamp_freq_set+0xc>
   1082e:	bf00      	nop
   10830:	20000984 	.word	0x20000984
   10834:	000f4240 	.word	0x000f4240
   10838:	20000980 	.word	0x20000980

0001083c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   1083c:	4b01      	ldr	r3, [pc, #4]	; (10844 <log_backend_rtt_init+0x8>)
   1083e:	2201      	movs	r2, #1
   10840:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   10842:	4770      	bx	lr
   10844:	200025b4 	.word	0x200025b4

00010848 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   10848:	4b02      	ldr	r3, [pc, #8]	; (10854 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1084a:	4803      	ldr	r0, [pc, #12]	; (10858 <panic+0x10>)
   1084c:	2201      	movs	r2, #1
   1084e:	701a      	strb	r2, [r3, #0]
   10850:	f00a ba19 	b.w	1ac86 <log_output_flush>
   10854:	200025b5 	.word	0x200025b5
   10858:	0001cb9c 	.word	0x0001cb9c

0001085c <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
   1085c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(output, src_level, timestamp,
   1085e:	200f      	movs	r0, #15
   10860:	9002      	str	r0, [sp, #8]
   10862:	9807      	ldr	r0, [sp, #28]
   10864:	9001      	str	r0, [sp, #4]
   10866:	9806      	ldr	r0, [sp, #24]
   10868:	9000      	str	r0, [sp, #0]
   1086a:	4803      	ldr	r0, [pc, #12]	; (10878 <sync_hexdump+0x1c>)
   1086c:	f7ff ff94 	bl	10798 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_rtt, flag, src_level,
				     timestamp, metadata, data, length);
}
   10870:	b005      	add	sp, #20
   10872:	f85d fb04 	ldr.w	pc, [sp], #4
   10876:	bf00      	nop
   10878:	0001cb9c 	.word	0x0001cb9c

0001087c <sync_string>:
{
   1087c:	b507      	push	{r0, r1, r2, lr}
	log_output_string(output, src_level, timestamp, fmt, ap, flags);
   1087e:	200f      	movs	r0, #15
   10880:	9001      	str	r0, [sp, #4]
   10882:	9804      	ldr	r0, [sp, #16]
   10884:	9000      	str	r0, [sp, #0]
   10886:	4803      	ldr	r0, [pc, #12]	; (10894 <sync_string+0x18>)
   10888:	f7ff ff4e 	bl	10728 <log_output_string>
}
   1088c:	b003      	add	sp, #12
   1088e:	f85d fb04 	ldr.w	pc, [sp], #4
   10892:	bf00      	nop
   10894:	0001cb9c 	.word	0x0001cb9c

00010898 <data_out_block_mode>:
{
   10898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1089a:	4d19      	ldr	r5, [pc, #100]	; (10900 <data_out_block_mode+0x68>)
   1089c:	4607      	mov	r7, r0
   1089e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   108a0:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   108a2:	4632      	mov	r2, r6
   108a4:	4639      	mov	r1, r7
   108a6:	2000      	movs	r0, #0
   108a8:	f005 f842 	bl	15930 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
   108ac:	b1c8      	cbz	r0, 108e2 <data_out_block_mode+0x4a>
	host_present = true;
   108ae:	2301      	movs	r3, #1
   108b0:	702b      	strb	r3, [r5, #0]
	return panic_mode;
   108b2:	4b14      	ldr	r3, [pc, #80]	; (10904 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
   108b4:	781b      	ldrb	r3, [r3, #0]
   108b6:	b92b      	cbnz	r3, 108c4 <data_out_block_mode+0x2c>
}
   108b8:	4630      	mov	r0, r6
   108ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
   108bc:	b95c      	cbnz	r4, 108d6 <data_out_block_mode+0x3e>
		host_present = false;
   108be:	702c      	strb	r4, [r5, #0]
   108c0:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   108c4:	2000      	movs	r0, #0
   108c6:	f005 f8b3 	bl	15a30 <SEGGER_RTT_HasDataUp>
   108ca:	2800      	cmp	r0, #0
   108cc:	d0f4      	beq.n	108b8 <data_out_block_mode+0x20>
   108ce:	782b      	ldrb	r3, [r5, #0]
   108d0:	2b00      	cmp	r3, #0
   108d2:	d1f3      	bne.n	108bc <data_out_block_mode+0x24>
   108d4:	e7f0      	b.n	108b8 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
   108d6:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
   108d8:	f241 3088 	movw	r0, #5000	; 0x1388
   108dc:	f00b f8b5 	bl	1ba4a <z_impl_k_busy_wait>
}
   108e0:	e7f0      	b.n	108c4 <data_out_block_mode+0x2c>
		} else if (host_present) {
   108e2:	782b      	ldrb	r3, [r5, #0]
   108e4:	b113      	cbz	r3, 108ec <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
   108e6:	3c01      	subs	r4, #1
   108e8:	d104      	bne.n	108f4 <data_out_block_mode+0x5c>
		host_present = false;
   108ea:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   108ec:	782b      	ldrb	r3, [r5, #0]
   108ee:	2b00      	cmp	r3, #0
   108f0:	d1d7      	bne.n	108a2 <data_out_block_mode+0xa>
   108f2:	e7e1      	b.n	108b8 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
   108f4:	f241 3088 	movw	r0, #5000	; 0x1388
   108f8:	f00b f8a7 	bl	1ba4a <z_impl_k_busy_wait>
}
   108fc:	e7f6      	b.n	108ec <data_out_block_mode+0x54>
   108fe:	bf00      	nop
   10900:	200025b4 	.word	0x200025b4
   10904:	200025b5 	.word	0x200025b5

00010908 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   10908:	4b0c      	ldr	r3, [pc, #48]	; (1093c <flash_area_open+0x34>)
   1090a:	681b      	ldr	r3, [r3, #0]
{
   1090c:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   1090e:	b173      	cbz	r3, 1092e <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   10910:	4a0b      	ldr	r2, [pc, #44]	; (10940 <flash_area_open+0x38>)
   10912:	6815      	ldr	r5, [r2, #0]
   10914:	2200      	movs	r2, #0
   10916:	42aa      	cmp	r2, r5
   10918:	db02      	blt.n	10920 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   1091a:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   1091e:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   10920:	461c      	mov	r4, r3
   10922:	f813 6b10 	ldrb.w	r6, [r3], #16
   10926:	4286      	cmp	r6, r0
   10928:	d004      	beq.n	10934 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   1092a:	3201      	adds	r2, #1
   1092c:	e7f3      	b.n	10916 <flash_area_open+0xe>
		return -EACCES;
   1092e:	f06f 000c 	mvn.w	r0, #12
   10932:	e7f4      	b.n	1091e <flash_area_open+0x16>
	*fap = area;
   10934:	600c      	str	r4, [r1, #0]
	return 0;
   10936:	2000      	movs	r0, #0
   10938:	e7f1      	b.n	1091e <flash_area_open+0x16>
   1093a:	bf00      	nop
   1093c:	200000e4 	.word	0x200000e4
   10940:	0001cc0c 	.word	0x0001cc0c

00010944 <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   10944:	6842      	ldr	r2, [r0, #4]
   10946:	680b      	ldr	r3, [r1, #0]
   10948:	4293      	cmp	r3, r2
{
   1094a:	b510      	push	{r4, lr}
   1094c:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   1094e:	d90c      	bls.n	1096a <find_flash_total_size+0x26>
   10950:	4b08      	ldr	r3, [pc, #32]	; (10974 <find_flash_total_size+0x30>)
   10952:	4809      	ldr	r0, [pc, #36]	; (10978 <find_flash_total_size+0x34>)
		LOG_ERR("Buffer size is bigger than page");
   10954:	4909      	ldr	r1, [pc, #36]	; (1097c <find_flash_total_size+0x38>)
   10956:	1ac0      	subs	r0, r0, r3
   10958:	08c0      	lsrs	r0, r0, #3
   1095a:	0180      	lsls	r0, r0, #6
   1095c:	f040 0001 	orr.w	r0, r0, #1
   10960:	f00a f962 	bl	1ac28 <log_string_sync>
		ctx->total_size = 0;
   10964:	2000      	movs	r0, #0
   10966:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   10968:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   1096a:	684b      	ldr	r3, [r1, #4]
   1096c:	4413      	add	r3, r2
   1096e:	604b      	str	r3, [r1, #4]
	return true;
   10970:	2001      	movs	r0, #1
   10972:	e7f9      	b.n	10968 <find_flash_total_size+0x24>
   10974:	0001c940 	.word	0x0001c940
   10978:	0001c940 	.word	0x0001c940
   1097c:	0001dc73 	.word	0x0001dc73

00010980 <stream_flash_erase_page>:
{
   10980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10984:	4605      	mov	r5, r0
   10986:	b085      	sub	sp, #20
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   10988:	68c0      	ldr	r0, [r0, #12]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   1098a:	aa01      	add	r2, sp, #4
   1098c:	f00a fba4 	bl	1b0d8 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   10990:	4604      	mov	r4, r0
   10992:	b170      	cbz	r0, 109b2 <stream_flash_erase_page+0x32>
   10994:	481b      	ldr	r0, [pc, #108]	; (10a04 <stream_flash_erase_page+0x84>)
   10996:	4b1c      	ldr	r3, [pc, #112]	; (10a08 <stream_flash_erase_page+0x88>)
		LOG_ERR("Error %d while getting page info", rc);
   10998:	491c      	ldr	r1, [pc, #112]	; (10a0c <stream_flash_erase_page+0x8c>)
   1099a:	1ac0      	subs	r0, r0, r3
   1099c:	08c0      	lsrs	r0, r0, #3
   1099e:	0180      	lsls	r0, r0, #6
   109a0:	4622      	mov	r2, r4
		LOG_ERR("Error %d while erasing page", rc);
   109a2:	f040 0001 	orr.w	r0, r0, #1
   109a6:	f00a f93f 	bl	1ac28 <log_string_sync>
}
   109aa:	4620      	mov	r0, r4
   109ac:	b005      	add	sp, #20
   109ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   109b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   109b6:	6a2b      	ldr	r3, [r5, #32]
   109b8:	4543      	cmp	r3, r8
   109ba:	d0f6      	beq.n	109aa <stream_flash_erase_page+0x2a>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   109bc:	68ee      	ldr	r6, [r5, #12]
   109be:	f8dd 9008 	ldr.w	r9, [sp, #8]
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
   109c2:	68b7      	ldr	r7, [r6, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   109c4:	68fb      	ldr	r3, [r7, #12]
   109c6:	b95b      	cbnz	r3, 109e0 <stream_flash_erase_page+0x60>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
   109c8:	68bb      	ldr	r3, [r7, #8]
   109ca:	464a      	mov	r2, r9
   109cc:	4641      	mov	r1, r8
   109ce:	4630      	mov	r0, r6
   109d0:	4798      	blx	r3

	if (api->write_protection != NULL) {
   109d2:	68fb      	ldr	r3, [r7, #12]
	rc = api->erase(dev, offset, size);
   109d4:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   109d6:	b98b      	cbnz	r3, 109fc <stream_flash_erase_page+0x7c>
	if (rc != 0) {
   109d8:	b944      	cbnz	r4, 109ec <stream_flash_erase_page+0x6c>
		ctx->last_erased_page_start_offset = page.start_offset;
   109da:	9b01      	ldr	r3, [sp, #4]
   109dc:	622b      	str	r3, [r5, #32]
   109de:	e7e4      	b.n	109aa <stream_flash_erase_page+0x2a>
		rc = api->write_protection(dev, false);
   109e0:	4601      	mov	r1, r0
   109e2:	4630      	mov	r0, r6
   109e4:	4798      	blx	r3
		if (rc) {
   109e6:	4604      	mov	r4, r0
   109e8:	2800      	cmp	r0, #0
   109ea:	d0ed      	beq.n	109c8 <stream_flash_erase_page+0x48>
   109ec:	4805      	ldr	r0, [pc, #20]	; (10a04 <stream_flash_erase_page+0x84>)
   109ee:	4b06      	ldr	r3, [pc, #24]	; (10a08 <stream_flash_erase_page+0x88>)
		LOG_ERR("Error %d while erasing page", rc);
   109f0:	4907      	ldr	r1, [pc, #28]	; (10a10 <stream_flash_erase_page+0x90>)
   109f2:	1ac0      	subs	r0, r0, r3
   109f4:	08c0      	lsrs	r0, r0, #3
   109f6:	0180      	lsls	r0, r0, #6
   109f8:	4622      	mov	r2, r4
   109fa:	e7d2      	b.n	109a2 <stream_flash_erase_page+0x22>
		(void) api->write_protection(dev, true);
   109fc:	2101      	movs	r1, #1
   109fe:	4630      	mov	r0, r6
   10a00:	4798      	blx	r3
   10a02:	e7e9      	b.n	109d8 <stream_flash_erase_page+0x58>
   10a04:	0001c940 	.word	0x0001c940
   10a08:	0001c940 	.word	0x0001c940
   10a0c:	0001dc93 	.word	0x0001dc93
   10a10:	0001dcb4 	.word	0x0001dcb4

00010a14 <flash_sync>:
{
   10a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (ctx->buf_bytes == 0) {
   10a18:	6884      	ldr	r4, [r0, #8]
{
   10a1a:	4605      	mov	r5, r0
	if (ctx->buf_bytes == 0) {
   10a1c:	b1a4      	cbz	r4, 10a48 <flash_sync+0x34>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   10a1e:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
   10a22:	3c01      	subs	r4, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   10a24:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   10a26:	19a1      	adds	r1, r4, r6
   10a28:	f7ff ffaa 	bl	10980 <stream_flash_erase_page>
		if (rc < 0) {
   10a2c:	1e04      	subs	r4, r0, #0
   10a2e:	da0e      	bge.n	10a4e <flash_sync+0x3a>
   10a30:	4b45      	ldr	r3, [pc, #276]	; (10b48 <flash_sync+0x134>)
   10a32:	4846      	ldr	r0, [pc, #280]	; (10b4c <flash_sync+0x138>)
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   10a34:	4946      	ldr	r1, [pc, #280]	; (10b50 <flash_sync+0x13c>)
   10a36:	1ac0      	subs	r0, r0, r3
   10a38:	08c0      	lsrs	r0, r0, #3
   10a3a:	0180      	lsls	r0, r0, #6
   10a3c:	4633      	mov	r3, r6
   10a3e:	4622      	mov	r2, r4
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   10a40:	f040 0001 	orr.w	r0, r0, #1
   10a44:	f00a f8f0 	bl	1ac28 <log_string_sync>
}
   10a48:	4620      	mov	r0, r4
   10a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fill_length = flash_get_write_block_size(ctx->fdev);
   10a4e:	68e8      	ldr	r0, [r5, #12]
   10a50:	f00a f9b7 	bl	1adc2 <flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
   10a54:	68aa      	ldr	r2, [r5, #8]
   10a56:	fbb2 f4f0 	udiv	r4, r2, r0
   10a5a:	fb00 2414 	mls	r4, r0, r4, r2
   10a5e:	b15c      	cbz	r4, 10a78 <flash_sync+0x64>
		fill_length -= ctx->buf_bytes % fill_length;
   10a60:	1b04      	subs	r4, r0, r4
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   10a62:	68e8      	ldr	r0, [r5, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   10a64:	6883      	ldr	r3, [r0, #8]
   10a66:	691b      	ldr	r3, [r3, #16]
   10a68:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   10a6a:	682f      	ldr	r7, [r5, #0]
   10a6c:	68ab      	ldr	r3, [r5, #8]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   10a6e:	7901      	ldrb	r1, [r0, #4]
   10a70:	4622      	mov	r2, r4
   10a72:	18f8      	adds	r0, r7, r3
   10a74:	f00b f882 	bl	1bb7c <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   10a78:	68af      	ldr	r7, [r5, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   10a7a:	f8d5 800c 	ldr.w	r8, [r5, #12]
   10a7e:	f8d5 a000 	ldr.w	sl, [r5]
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   10a82:	4427      	add	r7, r4
	const struct flash_driver_api *api =
   10a84:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (api->write_protection != NULL) {
   10a88:	f8d9 300c 	ldr.w	r3, [r9, #12]
   10a8c:	b9ab      	cbnz	r3, 10aba <flash_sync+0xa6>
	rc = api->write(dev, offset, data, len);
   10a8e:	f8d9 4004 	ldr.w	r4, [r9, #4]
   10a92:	463b      	mov	r3, r7
   10a94:	4652      	mov	r2, sl
   10a96:	4631      	mov	r1, r6
   10a98:	4640      	mov	r0, r8
   10a9a:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   10a9c:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->write(dev, offset, data, len);
   10aa0:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   10aa2:	b9cb      	cbnz	r3, 10ad8 <flash_sync+0xc4>
	if (rc != 0) {
   10aa4:	b97c      	cbnz	r4, 10ac6 <flash_sync+0xb2>
	if (ctx->callback) {
   10aa6:	69eb      	ldr	r3, [r5, #28]
   10aa8:	2b00      	cmp	r3, #0
   10aaa:	d135      	bne.n	10b18 <flash_sync+0x104>
	ctx->bytes_written += ctx->buf_bytes;
   10aac:	692b      	ldr	r3, [r5, #16]
   10aae:	68aa      	ldr	r2, [r5, #8]
   10ab0:	4413      	add	r3, r2
   10ab2:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
   10ab4:	2300      	movs	r3, #0
   10ab6:	60ab      	str	r3, [r5, #8]
	return rc;
   10ab8:	e7c6      	b.n	10a48 <flash_sync+0x34>
		rc = api->write_protection(dev, false);
   10aba:	2100      	movs	r1, #0
   10abc:	4640      	mov	r0, r8
   10abe:	4798      	blx	r3
		if (rc) {
   10ac0:	4604      	mov	r4, r0
   10ac2:	2800      	cmp	r0, #0
   10ac4:	d0e3      	beq.n	10a8e <flash_sync+0x7a>
   10ac6:	4b20      	ldr	r3, [pc, #128]	; (10b48 <flash_sync+0x134>)
   10ac8:	4820      	ldr	r0, [pc, #128]	; (10b4c <flash_sync+0x138>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   10aca:	4922      	ldr	r1, [pc, #136]	; (10b54 <flash_sync+0x140>)
   10acc:	1ac0      	subs	r0, r0, r3
   10ace:	08c0      	lsrs	r0, r0, #3
   10ad0:	0180      	lsls	r0, r0, #6
   10ad2:	4633      	mov	r3, r6
   10ad4:	4622      	mov	r2, r4
   10ad6:	e7b3      	b.n	10a40 <flash_sync+0x2c>
		(void) api->write_protection(dev, true);
   10ad8:	2101      	movs	r1, #1
   10ada:	4640      	mov	r0, r8
   10adc:	4798      	blx	r3
   10ade:	e7e1      	b.n	10aa4 <flash_sync+0x90>
			ctx->buf[i] = ~ctx->buf[i];
   10ae0:	5c53      	ldrb	r3, [r2, r1]
   10ae2:	43db      	mvns	r3, r3
   10ae4:	5453      	strb	r3, [r2, r1]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   10ae6:	3101      	adds	r1, #1
   10ae8:	68ab      	ldr	r3, [r5, #8]
   10aea:	682a      	ldr	r2, [r5, #0]
   10aec:	428b      	cmp	r3, r1
   10aee:	d8f7      	bhi.n	10ae0 <flash_sync+0xcc>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   10af0:	68e8      	ldr	r0, [r5, #12]
	return api->read(dev, offset, data, len);
   10af2:	6881      	ldr	r1, [r0, #8]
   10af4:	680f      	ldr	r7, [r1, #0]
   10af6:	4631      	mov	r1, r6
   10af8:	47b8      	blx	r7
		if (rc != 0) {
   10afa:	4607      	mov	r7, r0
   10afc:	b170      	cbz	r0, 10b1c <flash_sync+0x108>
   10afe:	4812      	ldr	r0, [pc, #72]	; (10b48 <flash_sync+0x134>)
   10b00:	4b12      	ldr	r3, [pc, #72]	; (10b4c <flash_sync+0x138>)
			LOG_ERR("flash read failed: %d", rc);
   10b02:	4915      	ldr	r1, [pc, #84]	; (10b58 <flash_sync+0x144>)
   10b04:	1a1b      	subs	r3, r3, r0
   10b06:	08db      	lsrs	r3, r3, #3
   10b08:	019b      	lsls	r3, r3, #6
   10b0a:	463a      	mov	r2, r7
   10b0c:	f043 0001 	orr.w	r0, r3, #1
   10b10:	f00a f88a 	bl	1ac28 <log_string_sync>
			return rc;
   10b14:	463c      	mov	r4, r7
   10b16:	e797      	b.n	10a48 <flash_sync+0x34>
		for (int i = 0; i < ctx->buf_bytes; i++) {
   10b18:	4621      	mov	r1, r4
   10b1a:	e7e5      	b.n	10ae8 <flash_sync+0xd4>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   10b1c:	4632      	mov	r2, r6
   10b1e:	69eb      	ldr	r3, [r5, #28]
   10b20:	68a9      	ldr	r1, [r5, #8]
   10b22:	6828      	ldr	r0, [r5, #0]
   10b24:	4798      	blx	r3
		if (rc != 0) {
   10b26:	4606      	mov	r6, r0
   10b28:	2800      	cmp	r0, #0
   10b2a:	d0bf      	beq.n	10aac <flash_sync+0x98>
   10b2c:	4806      	ldr	r0, [pc, #24]	; (10b48 <flash_sync+0x134>)
   10b2e:	4b07      	ldr	r3, [pc, #28]	; (10b4c <flash_sync+0x138>)
			LOG_ERR("callback failed: %d", rc);
   10b30:	490a      	ldr	r1, [pc, #40]	; (10b5c <flash_sync+0x148>)
   10b32:	1a1b      	subs	r3, r3, r0
   10b34:	08db      	lsrs	r3, r3, #3
   10b36:	019b      	lsls	r3, r3, #6
   10b38:	4632      	mov	r2, r6
   10b3a:	f043 0001 	orr.w	r0, r3, #1
   10b3e:	f00a f873 	bl	1ac28 <log_string_sync>
			return rc;
   10b42:	4634      	mov	r4, r6
   10b44:	e780      	b.n	10a48 <flash_sync+0x34>
   10b46:	bf00      	nop
   10b48:	0001c940 	.word	0x0001c940
   10b4c:	0001c940 	.word	0x0001c940
   10b50:	0001dcd0 	.word	0x0001dcd0
   10b54:	0001dcfe 	.word	0x0001dcfe
   10b58:	0001dd22 	.word	0x0001dd22
   10b5c:	0001dd38 	.word	0x0001dd38

00010b60 <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   10b60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10b64:	460d      	mov	r5, r1
   10b66:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   10b6a:	4691      	mov	r9, r2
   10b6c:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   10b6e:	4604      	mov	r4, r0
   10b70:	b920      	cbnz	r0, 10b7c <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
   10b72:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   10b76:	b003      	add	sp, #12
   10b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   10b7c:	2900      	cmp	r1, #0
   10b7e:	d0f8      	beq.n	10b72 <stream_flash_init+0x12>
   10b80:	2a00      	cmp	r2, #0
   10b82:	d0f6      	beq.n	10b72 <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   10b84:	9300      	str	r3, [sp, #0]
	if (buf_len % flash_get_write_block_size(fdev)) {
   10b86:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   10b88:	2300      	movs	r3, #0
   10b8a:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   10b8c:	f00a f919 	bl	1adc2 <flash_get_write_block_size>
   10b90:	fbb7 f3f0 	udiv	r3, r7, r0
   10b94:	fb03 7010 	mls	r0, r3, r0, r7
   10b98:	b150      	cbz	r0, 10bb0 <stream_flash_init+0x50>
   10b9a:	481d      	ldr	r0, [pc, #116]	; (10c10 <stream_flash_init+0xb0>)
   10b9c:	4b1d      	ldr	r3, [pc, #116]	; (10c14 <stream_flash_init+0xb4>)
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   10b9e:	491e      	ldr	r1, [pc, #120]	; (10c18 <stream_flash_init+0xb8>)
   10ba0:	1ac0      	subs	r0, r0, r3
   10ba2:	08c0      	lsrs	r0, r0, #3
   10ba4:	0180      	lsls	r0, r0, #6
		LOG_ERR("Incorrect parameter");
   10ba6:	f040 0001 	orr.w	r0, r0, #1
   10baa:	f00a f83d 	bl	1ac28 <log_string_sync>
   10bae:	e7e0      	b.n	10b72 <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   10bb0:	491a      	ldr	r1, [pc, #104]	; (10c1c <stream_flash_init+0xbc>)
   10bb2:	466a      	mov	r2, sp
   10bb4:	4628      	mov	r0, r5
   10bb6:	f00a fa93 	bl	1b0e0 <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   10bba:	9b01      	ldr	r3, [sp, #4]
   10bbc:	2b00      	cmp	r3, #0
   10bbe:	d0d8      	beq.n	10b72 <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   10bc0:	eb08 0206 	add.w	r2, r8, r6
   10bc4:	4293      	cmp	r3, r2
   10bc6:	d206      	bcs.n	10bd6 <stream_flash_init+0x76>
   10bc8:	4811      	ldr	r0, [pc, #68]	; (10c10 <stream_flash_init+0xb0>)
   10bca:	4b12      	ldr	r3, [pc, #72]	; (10c14 <stream_flash_init+0xb4>)
		LOG_ERR("Incorrect parameter");
   10bcc:	4914      	ldr	r1, [pc, #80]	; (10c20 <stream_flash_init+0xc0>)
   10bce:	1ac0      	subs	r0, r0, r3
   10bd0:	08c0      	lsrs	r0, r0, #3
   10bd2:	0180      	lsls	r0, r0, #6
   10bd4:	e7e7      	b.n	10ba6 <stream_flash_init+0x46>
	    offset % flash_get_write_block_size(fdev)) {
   10bd6:	4628      	mov	r0, r5
   10bd8:	f00a f8f3 	bl	1adc2 <flash_get_write_block_size>
   10bdc:	fbb8 f3f0 	udiv	r3, r8, r0
   10be0:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   10be4:	2800      	cmp	r0, #0
   10be6:	d1ef      	bne.n	10bc8 <stream_flash_init+0x68>
	ctx->buf_len = buf_len;
   10be8:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   10bec:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   10bee:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   10bf0:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   10bf2:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   10bf6:	b916      	cbnz	r6, 10bfe <stream_flash_init+0x9e>
   10bf8:	9e01      	ldr	r6, [sp, #4]
   10bfa:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   10bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10c00:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   10c02:	f04f 33ff 	mov.w	r3, #4294967295
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   10c06:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   10c08:	6223      	str	r3, [r4, #32]
	return 0;
   10c0a:	2000      	movs	r0, #0
   10c0c:	e7b3      	b.n	10b76 <stream_flash_init+0x16>
   10c0e:	bf00      	nop
   10c10:	0001c940 	.word	0x0001c940
   10c14:	0001c940 	.word	0x0001c940
   10c18:	0001dd4c 	.word	0x0001dd4c
   10c1c:	00010945 	.word	0x00010945
   10c20:	0001dd83 	.word	0x0001dd83

00010c24 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10c28:	4605      	mov	r5, r0
   10c2a:	f04f 0320 	mov.w	r3, #32
   10c2e:	f3ef 8611 	mrs	r6, BASEPRI
   10c32:	f383 8812 	msr	BASEPRI_MAX, r3
   10c36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10c3a:	4823      	ldr	r0, [pc, #140]	; (10cc8 <pm_state_notify+0xa4>)
   10c3c:	f005 fad4 	bl	161e8 <z_spin_lock_valid>
   10c40:	b968      	cbnz	r0, 10c5e <pm_state_notify+0x3a>
   10c42:	4a22      	ldr	r2, [pc, #136]	; (10ccc <pm_state_notify+0xa8>)
   10c44:	4922      	ldr	r1, [pc, #136]	; (10cd0 <pm_state_notify+0xac>)
   10c46:	4823      	ldr	r0, [pc, #140]	; (10cd4 <pm_state_notify+0xb0>)
   10c48:	2381      	movs	r3, #129	; 0x81
   10c4a:	f009 fe3f 	bl	1a8cc <printk>
   10c4e:	491e      	ldr	r1, [pc, #120]	; (10cc8 <pm_state_notify+0xa4>)
   10c50:	4821      	ldr	r0, [pc, #132]	; (10cd8 <pm_state_notify+0xb4>)
   10c52:	f009 fe3b 	bl	1a8cc <printk>
   10c56:	481d      	ldr	r0, [pc, #116]	; (10ccc <pm_state_notify+0xa8>)
   10c58:	2181      	movs	r1, #129	; 0x81
   10c5a:	f009 ffd0 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   10c5e:	481a      	ldr	r0, [pc, #104]	; (10cc8 <pm_state_notify+0xa4>)
   10c60:	f005 fae0 	bl	16224 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10c64:	4b1d      	ldr	r3, [pc, #116]	; (10cdc <pm_state_notify+0xb8>)
   10c66:	681c      	ldr	r4, [r3, #0]
   10c68:	2c00      	cmp	r4, #0
   10c6a:	bf38      	it	cc
   10c6c:	2400      	movcc	r4, #0
   10c6e:	b19c      	cbz	r4, 10c98 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   10c70:	4f1b      	ldr	r7, [pc, #108]	; (10ce0 <pm_state_notify+0xbc>)
   10c72:	f8df 8078 	ldr.w	r8, [pc, #120]	; 10cec <pm_state_notify+0xc8>
   10c76:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   10c7a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   10c7e:	2d00      	cmp	r5, #0
   10c80:	bf08      	it	eq
   10c82:	4613      	moveq	r3, r2
		if (callback) {
   10c84:	b12b      	cbz	r3, 10c92 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
   10c86:	f898 2014 	ldrb.w	r2, [r8, #20]
   10c8a:	fb09 f202 	mul.w	r2, r9, r2
   10c8e:	5cb8      	ldrb	r0, [r7, r2]
   10c90:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10c92:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10c94:	2c00      	cmp	r4, #0
   10c96:	d1f0      	bne.n	10c7a <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10c98:	480b      	ldr	r0, [pc, #44]	; (10cc8 <pm_state_notify+0xa4>)
   10c9a:	f005 fab3 	bl	16204 <z_spin_unlock_valid>
   10c9e:	b968      	cbnz	r0, 10cbc <pm_state_notify+0x98>
   10ca0:	4a0a      	ldr	r2, [pc, #40]	; (10ccc <pm_state_notify+0xa8>)
   10ca2:	4910      	ldr	r1, [pc, #64]	; (10ce4 <pm_state_notify+0xc0>)
   10ca4:	480b      	ldr	r0, [pc, #44]	; (10cd4 <pm_state_notify+0xb0>)
   10ca6:	23ac      	movs	r3, #172	; 0xac
   10ca8:	f009 fe10 	bl	1a8cc <printk>
   10cac:	4906      	ldr	r1, [pc, #24]	; (10cc8 <pm_state_notify+0xa4>)
   10cae:	480e      	ldr	r0, [pc, #56]	; (10ce8 <pm_state_notify+0xc4>)
   10cb0:	f009 fe0c 	bl	1a8cc <printk>
   10cb4:	4805      	ldr	r0, [pc, #20]	; (10ccc <pm_state_notify+0xa8>)
   10cb6:	21ac      	movs	r1, #172	; 0xac
   10cb8:	f009 ffa1 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   10cbc:	f386 8811 	msr	BASEPRI, r6
   10cc0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10cc8:	2000099c 	.word	0x2000099c
   10ccc:	0001d83f 	.word	0x0001d83f
   10cd0:	0001d891 	.word	0x0001d891
   10cd4:	0001d2dc 	.word	0x0001d2dc
   10cd8:	0001d8a6 	.word	0x0001d8a6
   10cdc:	200009a0 	.word	0x200009a0
   10ce0:	200009ac 	.word	0x200009ac
   10ce4:	0001d865 	.word	0x0001d865
   10ce8:	0001d87c 	.word	0x0001d87c
   10cec:	200010e8 	.word	0x200010e8

00010cf0 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10cf0:	f000 031f 	and.w	r3, r0, #31
   10cf4:	2201      	movs	r2, #1
   10cf6:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10cf8:	4b0a      	ldr	r3, [pc, #40]	; (10d24 <atomic_test_and_set_bit.constprop.0+0x34>)
   10cfa:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10cfe:	0940      	lsrs	r0, r0, #5
   10d00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   10d04:	e850 3f00 	ldrex	r3, [r0]
   10d08:	ea43 0102 	orr.w	r1, r3, r2
   10d0c:	e840 1c00 	strex	ip, r1, [r0]
   10d10:	f1bc 0f00 	cmp.w	ip, #0
   10d14:	d1f6      	bne.n	10d04 <atomic_test_and_set_bit.constprop.0+0x14>
   10d16:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   10d1a:	421a      	tst	r2, r3
}
   10d1c:	bf14      	ite	ne
   10d1e:	2001      	movne	r0, #1
   10d20:	2000      	moveq	r0, #0
   10d22:	4770      	bx	lr
   10d24:	200009b8 	.word	0x200009b8

00010d28 <pm_system_resume>:

void pm_system_resume(void)
{
   10d28:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   10d2a:	4b1d      	ldr	r3, [pc, #116]	; (10da0 <pm_system_resume+0x78>)
   10d2c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10d2e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   10d32:	f005 031f 	and.w	r3, r5, #31
   10d36:	2201      	movs	r2, #1
   10d38:	409a      	lsls	r2, r3
   10d3a:	4b1a      	ldr	r3, [pc, #104]	; (10da4 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10d3c:	0969      	lsrs	r1, r5, #5
{
   10d3e:	b085      	sub	sp, #20
   10d40:	43d0      	mvns	r0, r2
   10d42:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10d46:	e853 1f00 	ldrex	r1, [r3]
   10d4a:	ea01 0400 	and.w	r4, r1, r0
   10d4e:	e843 4c00 	strex	ip, r4, [r3]
   10d52:	f1bc 0f00 	cmp.w	ip, #0
   10d56:	d1f6      	bne.n	10d46 <pm_system_resume+0x1e>
   10d58:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10d5c:	4211      	tst	r1, r2
   10d5e:	d017      	beq.n	10d90 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
   10d60:	4c11      	ldr	r4, [pc, #68]	; (10da8 <pm_system_resume+0x80>)
   10d62:	220c      	movs	r2, #12
   10d64:	fb02 4205 	mla	r2, r2, r5, r4
   10d68:	ca07      	ldmia	r2, {r0, r1, r2}
   10d6a:	ab01      	add	r3, sp, #4
   10d6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   10d70:	4a0e      	ldr	r2, [pc, #56]	; (10dac <pm_system_resume+0x84>)
   10d72:	b17a      	cbz	r2, 10d94 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   10d74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10d78:	f00a f8ba 	bl	1aef0 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   10d7c:	2000      	movs	r0, #0
   10d7e:	f7ff ff51 	bl	10c24 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10d82:	230c      	movs	r3, #12
   10d84:	436b      	muls	r3, r5
   10d86:	2200      	movs	r2, #0
   10d88:	18e1      	adds	r1, r4, r3
   10d8a:	50e2      	str	r2, [r4, r3]
   10d8c:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   10d90:	b005      	add	sp, #20
   10d92:	bd30      	pop	{r4, r5, pc}
   10d94:	f382 8811 	msr	BASEPRI, r2
   10d98:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10d9c:	e7ee      	b.n	10d7c <pm_system_resume+0x54>
   10d9e:	bf00      	nop
   10da0:	200010e8 	.word	0x200010e8
   10da4:	200009a8 	.word	0x200009a8
   10da8:	200009ac 	.word	0x200009ac
   10dac:	0001aef1 	.word	0x0001aef1

00010db0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   10db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   10db4:	4b37      	ldr	r3, [pc, #220]	; (10e94 <pm_system_suspend+0xe4>)
   10db6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 10eac <pm_system_suspend+0xfc>
   10dba:	7d1c      	ldrb	r4, [r3, #20]
{
   10dbc:	b088      	sub	sp, #32
   10dbe:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   10dc0:	4620      	mov	r0, r4
   10dc2:	f7ff ff95 	bl	10cf0 <atomic_test_and_set_bit.constprop.0>
   10dc6:	b960      	cbnz	r0, 10de2 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   10dc8:	466e      	mov	r6, sp
   10dca:	463a      	mov	r2, r7
   10dcc:	4621      	mov	r1, r4
   10dce:	4630      	mov	r0, r6
   10dd0:	f00a f843 	bl	1ae5a <pm_policy_next_state>
   10dd4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10dd8:	250c      	movs	r5, #12
   10dda:	fb05 8504 	mla	r5, r5, r4, r8
   10dde:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   10de2:	230c      	movs	r3, #12
   10de4:	4363      	muls	r3, r4
   10de6:	eb08 0203 	add.w	r2, r8, r3
   10dea:	f818 0003 	ldrb.w	r0, [r8, r3]
   10dee:	0965      	lsrs	r5, r4, #5
   10df0:	f004 061f 	and.w	r6, r4, #31
   10df4:	b3c8      	cbz	r0, 10e6a <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   10df6:	1c7b      	adds	r3, r7, #1
   10df8:	d00f      	beq.n	10e1a <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10dfa:	f8d2 e008 	ldr.w	lr, [r2, #8]
   10dfe:	4826      	ldr	r0, [pc, #152]	; (10e98 <pm_system_suspend+0xe8>)
   10e00:	4a26      	ldr	r2, [pc, #152]	; (10e9c <pm_system_suspend+0xec>)
   10e02:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10e06:	2100      	movs	r1, #0
   10e08:	2300      	movs	r3, #0
   10e0a:	fbec 010e 	umlal	r0, r1, ip, lr
   10e0e:	f7fb fe95 	bl	cb3c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10e12:	2101      	movs	r1, #1
   10e14:	1a38      	subs	r0, r7, r0
   10e16:	f007 fcc7 	bl	187a8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10e1a:	f006 f9cb 	bl	171b4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10e1e:	2001      	movs	r0, #1
   10e20:	f7ff ff00 	bl	10c24 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10e24:	f3bf 8f5b 	dmb	ish
   10e28:	4b1d      	ldr	r3, [pc, #116]	; (10ea0 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10e2a:	2201      	movs	r2, #1
   10e2c:	40b2      	lsls	r2, r6
   10e2e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   10e32:	e853 1f00 	ldrex	r1, [r3]
   10e36:	4311      	orrs	r1, r2
   10e38:	e843 1000 	strex	r0, r1, [r3]
   10e3c:	2800      	cmp	r0, #0
   10e3e:	d1f8      	bne.n	10e32 <pm_system_suspend+0x82>
   10e40:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   10e44:	230c      	movs	r3, #12
   10e46:	fb03 8404 	mla	r4, r3, r4, r8
   10e4a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   10e4e:	ab05      	add	r3, sp, #20
   10e50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   10e54:	4a13      	ldr	r2, [pc, #76]	; (10ea4 <pm_system_suspend+0xf4>)
   10e56:	b11a      	cbz	r2, 10e60 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
   10e58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10e5c:	f00a f835 	bl	1aeca <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   10e60:	f7ff ff62 	bl	10d28 <pm_system_resume>
	k_sched_unlock();
   10e64:	f006 feea 	bl	17c3c <k_sched_unlock>
	bool ret = true;
   10e68:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10e6a:	4a0f      	ldr	r2, [pc, #60]	; (10ea8 <pm_system_suspend+0xf8>)
   10e6c:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   10e70:	2301      	movs	r3, #1
   10e72:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10e74:	43db      	mvns	r3, r3
   10e76:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   10e7a:	e855 2f00 	ldrex	r2, [r5]
   10e7e:	401a      	ands	r2, r3
   10e80:	e845 2100 	strex	r1, r2, [r5]
   10e84:	2900      	cmp	r1, #0
   10e86:	d1f8      	bne.n	10e7a <pm_system_suspend+0xca>
   10e88:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   10e8c:	b008      	add	sp, #32
   10e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e92:	bf00      	nop
   10e94:	200010e8 	.word	0x200010e8
   10e98:	000f423f 	.word	0x000f423f
   10e9c:	000f4240 	.word	0x000f4240
   10ea0:	200009a8 	.word	0x200009a8
   10ea4:	0001aecb 	.word	0x0001aecb
   10ea8:	200009b8 	.word	0x200009b8
   10eac:	200009ac 	.word	0x200009ac

00010eb0 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   10eb0:	4801      	ldr	r0, [pc, #4]	; (10eb8 <nrf_cc3xx_platform_abort_init+0x8>)
   10eb2:	f008 b90b 	b.w	190cc <nrf_cc3xx_platform_set_abort>
   10eb6:	bf00      	nop
   10eb8:	0001cc10 	.word	0x0001cc10

00010ebc <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   10ebc:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   10ebe:	b1d0      	cbz	r0, 10ef6 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   10ec0:	6843      	ldr	r3, [r0, #4]
   10ec2:	2b04      	cmp	r3, #4
   10ec4:	d111      	bne.n	10eea <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   10ec6:	2200      	movs	r2, #0
   10ec8:	6803      	ldr	r3, [r0, #0]
   10eca:	f3bf 8f5b 	dmb	ish
   10ece:	e853 1f00 	ldrex	r1, [r3]
   10ed2:	2901      	cmp	r1, #1
   10ed4:	d103      	bne.n	10ede <mutex_unlock_platform+0x22>
   10ed6:	e843 2000 	strex	r0, r2, [r3]
   10eda:	2800      	cmp	r0, #0
   10edc:	d1f7      	bne.n	10ece <mutex_unlock_platform+0x12>
   10ede:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   10ee2:	4807      	ldr	r0, [pc, #28]	; (10f00 <mutex_unlock_platform+0x44>)
   10ee4:	bf08      	it	eq
   10ee6:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   10ee8:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   10eea:	b13b      	cbz	r3, 10efc <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   10eec:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   10eee:	f005 facd 	bl	1648c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   10ef2:	2000      	movs	r0, #0
   10ef4:	e7f8      	b.n	10ee8 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   10ef6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   10efa:	e7f5      	b.n	10ee8 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   10efc:	4801      	ldr	r0, [pc, #4]	; (10f04 <mutex_unlock_platform+0x48>)
   10efe:	e7f3      	b.n	10ee8 <mutex_unlock_platform+0x2c>
   10f00:	ffff8fe9 	.word	0xffff8fe9
   10f04:	ffff8fea 	.word	0xffff8fea

00010f08 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   10f08:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   10f0a:	4604      	mov	r4, r0
   10f0c:	b918      	cbnz	r0, 10f16 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   10f0e:	4b0d      	ldr	r3, [pc, #52]	; (10f44 <mutex_free_platform+0x3c>)
   10f10:	480d      	ldr	r0, [pc, #52]	; (10f48 <mutex_free_platform+0x40>)
   10f12:	685b      	ldr	r3, [r3, #4]
   10f14:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   10f16:	6861      	ldr	r1, [r4, #4]
   10f18:	2908      	cmp	r1, #8
   10f1a:	d00d      	beq.n	10f38 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   10f1c:	f031 0304 	bics.w	r3, r1, #4
   10f20:	d00a      	beq.n	10f38 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   10f22:	f011 0102 	ands.w	r1, r1, #2
   10f26:	d008      	beq.n	10f3a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   10f28:	4808      	ldr	r0, [pc, #32]	; (10f4c <mutex_free_platform+0x44>)
   10f2a:	4621      	mov	r1, r4
   10f2c:	f004 ffb6 	bl	15e9c <k_mem_slab_free>
        mutex->mutex = NULL;
   10f30:	2300      	movs	r3, #0
   10f32:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   10f34:	2300      	movs	r3, #0
   10f36:	6063      	str	r3, [r4, #4]
}
   10f38:	bd10      	pop	{r4, pc}
   10f3a:	6820      	ldr	r0, [r4, #0]
   10f3c:	2214      	movs	r2, #20
   10f3e:	f00a fe1d 	bl	1bb7c <memset>
   10f42:	e7f7      	b.n	10f34 <mutex_free_platform+0x2c>
   10f44:	200001cc 	.word	0x200001cc
   10f48:	0001ddba 	.word	0x0001ddba
   10f4c:	200009bc 	.word	0x200009bc

00010f50 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   10f50:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   10f52:	4604      	mov	r4, r0
   10f54:	b918      	cbnz	r0, 10f5e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   10f56:	4b16      	ldr	r3, [pc, #88]	; (10fb0 <mutex_init_platform+0x60>)
   10f58:	4816      	ldr	r0, [pc, #88]	; (10fb4 <mutex_init_platform+0x64>)
   10f5a:	685b      	ldr	r3, [r3, #4]
   10f5c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   10f5e:	6863      	ldr	r3, [r4, #4]
   10f60:	2b04      	cmp	r3, #4
   10f62:	d023      	beq.n	10fac <mutex_init_platform+0x5c>
   10f64:	2b08      	cmp	r3, #8
   10f66:	d021      	beq.n	10fac <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   10f68:	b9cb      	cbnz	r3, 10f9e <mutex_init_platform+0x4e>
   10f6a:	6823      	ldr	r3, [r4, #0]
   10f6c:	b9bb      	cbnz	r3, 10f9e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   10f6e:	4812      	ldr	r0, [pc, #72]	; (10fb8 <mutex_init_platform+0x68>)
   10f70:	f04f 32ff 	mov.w	r2, #4294967295
   10f74:	f04f 33ff 	mov.w	r3, #4294967295
   10f78:	4621      	mov	r1, r4
   10f7a:	f004 ff23 	bl	15dc4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   10f7e:	b908      	cbnz	r0, 10f84 <mutex_init_platform+0x34>
   10f80:	6823      	ldr	r3, [r4, #0]
   10f82:	b91b      	cbnz	r3, 10f8c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   10f84:	4b0a      	ldr	r3, [pc, #40]	; (10fb0 <mutex_init_platform+0x60>)
   10f86:	480d      	ldr	r0, [pc, #52]	; (10fbc <mutex_init_platform+0x6c>)
   10f88:	685b      	ldr	r3, [r3, #4]
   10f8a:	4798      	blx	r3
   10f8c:	6820      	ldr	r0, [r4, #0]
   10f8e:	2214      	movs	r2, #20
   10f90:	2100      	movs	r1, #0
   10f92:	f00a fdf3 	bl	1bb7c <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   10f96:	6863      	ldr	r3, [r4, #4]
   10f98:	f043 0302 	orr.w	r3, r3, #2
   10f9c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   10f9e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   10fa0:	f00a fcf5 	bl	1b98e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   10fa4:	6863      	ldr	r3, [r4, #4]
   10fa6:	f043 0301 	orr.w	r3, r3, #1
   10faa:	6063      	str	r3, [r4, #4]
}
   10fac:	bd10      	pop	{r4, pc}
   10fae:	bf00      	nop
   10fb0:	200001cc 	.word	0x200001cc
   10fb4:	0001ddba 	.word	0x0001ddba
   10fb8:	200009bc 	.word	0x200009bc
   10fbc:	0001dde0 	.word	0x0001dde0

00010fc0 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   10fc0:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   10fc2:	b308      	cbz	r0, 11008 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   10fc4:	6843      	ldr	r3, [r0, #4]
   10fc6:	2b04      	cmp	r3, #4
   10fc8:	d110      	bne.n	10fec <mutex_lock_platform+0x2c>
   10fca:	2201      	movs	r2, #1
   10fcc:	6803      	ldr	r3, [r0, #0]
   10fce:	f3bf 8f5b 	dmb	ish
   10fd2:	e853 1f00 	ldrex	r1, [r3]
   10fd6:	2900      	cmp	r1, #0
   10fd8:	d103      	bne.n	10fe2 <mutex_lock_platform+0x22>
   10fda:	e843 2000 	strex	r0, r2, [r3]
   10fde:	2800      	cmp	r0, #0
   10fe0:	d1f7      	bne.n	10fd2 <mutex_lock_platform+0x12>
   10fe2:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   10fe6:	d10b      	bne.n	11000 <mutex_lock_platform+0x40>
   10fe8:	2000      	movs	r0, #0
}
   10fea:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   10fec:	b153      	cbz	r3, 11004 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   10fee:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   10ff0:	f04f 32ff 	mov.w	r2, #4294967295
   10ff4:	f04f 33ff 	mov.w	r3, #4294967295
   10ff8:	f005 f948 	bl	1628c <z_impl_k_mutex_lock>
        if (ret == 0) {
   10ffc:	2800      	cmp	r0, #0
   10ffe:	d0f3      	beq.n	10fe8 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   11000:	4803      	ldr	r0, [pc, #12]	; (11010 <mutex_lock_platform+0x50>)
   11002:	e7f2      	b.n	10fea <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   11004:	4803      	ldr	r0, [pc, #12]	; (11014 <mutex_lock_platform+0x54>)
   11006:	e7f0      	b.n	10fea <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   11008:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1100c:	e7ed      	b.n	10fea <mutex_lock_platform+0x2a>
   1100e:	bf00      	nop
   11010:	ffff8fe9 	.word	0xffff8fe9
   11014:	ffff8fea 	.word	0xffff8fea

00011018 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   11018:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1101a:	4906      	ldr	r1, [pc, #24]	; (11034 <nrf_cc3xx_platform_mutex_init+0x1c>)
   1101c:	4806      	ldr	r0, [pc, #24]	; (11038 <nrf_cc3xx_platform_mutex_init+0x20>)
   1101e:	2340      	movs	r3, #64	; 0x40
   11020:	2214      	movs	r2, #20
   11022:	f00a fc84 	bl	1b92e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   11026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1102a:	4904      	ldr	r1, [pc, #16]	; (1103c <nrf_cc3xx_platform_mutex_init+0x24>)
   1102c:	4804      	ldr	r0, [pc, #16]	; (11040 <nrf_cc3xx_platform_mutex_init+0x28>)
   1102e:	f008 b8af 	b.w	19190 <nrf_cc3xx_platform_set_mutexes>
   11032:	bf00      	nop
   11034:	200009dc 	.word	0x200009dc
   11038:	200009bc 	.word	0x200009bc
   1103c:	0001cc28 	.word	0x0001cc28
   11040:	0001cc18 	.word	0x0001cc18

00011044 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   11044:	4901      	ldr	r1, [pc, #4]	; (1104c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   11046:	2210      	movs	r2, #16
	str	r2, [r1]
   11048:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1104a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1104c:	e000ed10 	.word	0xe000ed10

00011050 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11050:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   11052:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   11054:	f380 8811 	msr	BASEPRI, r0
	isb
   11058:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1105c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   11060:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   11062:	b662      	cpsie	i
	isb
   11064:	f3bf 8f6f 	isb	sy

	bx	lr
   11068:	4770      	bx	lr
   1106a:	bf00      	nop

0001106c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1106c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1106e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   11070:	f381 8811 	msr	BASEPRI, r1

	wfe
   11074:	bf20      	wfe

	msr	BASEPRI, r0
   11076:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1107a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1107c:	4770      	bx	lr
   1107e:	bf00      	nop

00011080 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   11080:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11082:	4606      	mov	r6, r0

	if (esf != NULL) {
   11084:	460c      	mov	r4, r1
   11086:	b301      	cbz	r1, 110ca <z_arm_fatal_error+0x4a>
   11088:	4b13      	ldr	r3, [pc, #76]	; (110d8 <z_arm_fatal_error+0x58>)
   1108a:	4d14      	ldr	r5, [pc, #80]	; (110dc <z_arm_fatal_error+0x5c>)
   1108c:	1aed      	subs	r5, r5, r3
   1108e:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   11090:	688b      	ldr	r3, [r1, #8]
   11092:	9300      	str	r3, [sp, #0]
   11094:	01ad      	lsls	r5, r5, #6
   11096:	f045 0501 	orr.w	r5, r5, #1
   1109a:	e9d1 2300 	ldrd	r2, r3, [r1]
   1109e:	4628      	mov	r0, r5
   110a0:	490f      	ldr	r1, [pc, #60]	; (110e0 <z_arm_fatal_error+0x60>)
   110a2:	f009 fdc1 	bl	1ac28 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   110a6:	6963      	ldr	r3, [r4, #20]
   110a8:	9300      	str	r3, [sp, #0]
   110aa:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   110ae:	490d      	ldr	r1, [pc, #52]	; (110e4 <z_arm_fatal_error+0x64>)
   110b0:	4628      	mov	r0, r5
   110b2:	f009 fdb9 	bl	1ac28 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   110b6:	69e2      	ldr	r2, [r4, #28]
   110b8:	490b      	ldr	r1, [pc, #44]	; (110e8 <z_arm_fatal_error+0x68>)
   110ba:	4628      	mov	r0, r5
   110bc:	f009 fdb4 	bl	1ac28 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   110c0:	69a2      	ldr	r2, [r4, #24]
   110c2:	490a      	ldr	r1, [pc, #40]	; (110ec <z_arm_fatal_error+0x6c>)
   110c4:	4628      	mov	r0, r5
   110c6:	f009 fdaf 	bl	1ac28 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   110ca:	4621      	mov	r1, r4
   110cc:	4630      	mov	r0, r6
}
   110ce:	b002      	add	sp, #8
   110d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   110d4:	f004 bd02 	b.w	15adc <z_fatal_error>
   110d8:	0001c940 	.word	0x0001c940
   110dc:	0001c9c8 	.word	0x0001c9c8
   110e0:	0001de0d 	.word	0x0001de0d
   110e4:	0001de3c 	.word	0x0001de3c
   110e8:	0001de6b 	.word	0x0001de6b
   110ec:	0001de7a 	.word	0x0001de7a

000110f0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   110f0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   110f2:	2b00      	cmp	r3, #0
   110f4:	db08      	blt.n	11108 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   110f6:	2201      	movs	r2, #1
   110f8:	f000 001f 	and.w	r0, r0, #31
   110fc:	fa02 f000 	lsl.w	r0, r2, r0
   11100:	095b      	lsrs	r3, r3, #5
   11102:	4a02      	ldr	r2, [pc, #8]	; (1110c <arch_irq_enable+0x1c>)
   11104:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   11108:	4770      	bx	lr
   1110a:	bf00      	nop
   1110c:	e000e100 	.word	0xe000e100

00011110 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   11110:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   11112:	2b00      	cmp	r3, #0
   11114:	db0d      	blt.n	11132 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11116:	2201      	movs	r2, #1
   11118:	095b      	lsrs	r3, r3, #5
   1111a:	f000 001f 	and.w	r0, r0, #31
   1111e:	fa02 f000 	lsl.w	r0, r2, r0
   11122:	3320      	adds	r3, #32
   11124:	4a03      	ldr	r2, [pc, #12]	; (11134 <arch_irq_disable+0x24>)
   11126:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1112a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1112e:	f3bf 8f6f 	isb	sy
}
   11132:	4770      	bx	lr
   11134:	e000e100 	.word	0xe000e100

00011138 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11138:	4b05      	ldr	r3, [pc, #20]	; (11150 <arch_irq_is_enabled+0x18>)
   1113a:	0942      	lsrs	r2, r0, #5
   1113c:	f000 001f 	and.w	r0, r0, #31
   11140:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11144:	2301      	movs	r3, #1
   11146:	fa03 f000 	lsl.w	r0, r3, r0
}
   1114a:	4010      	ands	r0, r2
   1114c:	4770      	bx	lr
   1114e:	bf00      	nop
   11150:	e000e100 	.word	0xe000e100

00011154 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   11154:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   11156:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   11158:	2c07      	cmp	r4, #7
{
   1115a:	4605      	mov	r5, r0
   1115c:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1115e:	d90f      	bls.n	11180 <z_arm_irq_priority_set+0x2c>
   11160:	4a11      	ldr	r2, [pc, #68]	; (111a8 <z_arm_irq_priority_set+0x54>)
   11162:	4912      	ldr	r1, [pc, #72]	; (111ac <z_arm_irq_priority_set+0x58>)
   11164:	4812      	ldr	r0, [pc, #72]	; (111b0 <z_arm_irq_priority_set+0x5c>)
   11166:	2359      	movs	r3, #89	; 0x59
   11168:	f009 fbb0 	bl	1a8cc <printk>
   1116c:	4811      	ldr	r0, [pc, #68]	; (111b4 <z_arm_irq_priority_set+0x60>)
   1116e:	4631      	mov	r1, r6
   11170:	2307      	movs	r3, #7
   11172:	462a      	mov	r2, r5
   11174:	f009 fbaa 	bl	1a8cc <printk>
   11178:	480b      	ldr	r0, [pc, #44]	; (111a8 <z_arm_irq_priority_set+0x54>)
   1117a:	2159      	movs	r1, #89	; 0x59
   1117c:	f009 fd3f 	bl	1abfe <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11180:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11182:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11184:	bfac      	ite	ge
   11186:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1118a:	4b0b      	ldrlt	r3, [pc, #44]	; (111b8 <z_arm_irq_priority_set+0x64>)
   1118c:	ea4f 1444 	mov.w	r4, r4, lsl #5
   11190:	bfb8      	it	lt
   11192:	f005 050f 	andlt.w	r5, r5, #15
   11196:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11198:	bfaa      	itet	ge
   1119a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1119e:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   111a0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   111a4:	bd70      	pop	{r4, r5, r6, pc}
   111a6:	bf00      	nop
   111a8:	0001dea8 	.word	0x0001dea8
   111ac:	0001dede 	.word	0x0001dede
   111b0:	0001d2dc 	.word	0x0001d2dc
   111b4:	0001def9 	.word	0x0001def9
   111b8:	e000ed14 	.word	0xe000ed14

000111bc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   111bc:	bf30      	wfi
    b z_SysNmiOnReset
   111be:	f7ff bffd 	b.w	111bc <z_SysNmiOnReset>
   111c2:	bf00      	nop

000111c4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   111c4:	4a0b      	ldr	r2, [pc, #44]	; (111f4 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   111c6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   111c8:	4b0b      	ldr	r3, [pc, #44]	; (111f8 <z_arm_prep_c+0x34>)
   111ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   111ce:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   111d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   111d4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   111d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   111dc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   111e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   111e4:	f004 fd34 	bl	15c50 <z_bss_zero>
	z_data_copy();
   111e8:	f007 f90a 	bl	18400 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   111ec:	f000 fb7a 	bl	118e4 <z_arm_interrupt_init>
	z_cstart();
   111f0:	f004 fd38 	bl	15c64 <z_cstart>
   111f4:	0000c200 	.word	0x0000c200
   111f8:	e000ed00 	.word	0xe000ed00

000111fc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   111fc:	4a09      	ldr	r2, [pc, #36]	; (11224 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   111fe:	490a      	ldr	r1, [pc, #40]	; (11228 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   11200:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   11202:	6809      	ldr	r1, [r1, #0]
   11204:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11206:	4909      	ldr	r1, [pc, #36]	; (1122c <arch_swap+0x30>)
	_current->arch.basepri = key;
   11208:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1120a:	684b      	ldr	r3, [r1, #4]
   1120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11210:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   11212:	2300      	movs	r3, #0
   11214:	f383 8811 	msr	BASEPRI, r3
   11218:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1121c:	6893      	ldr	r3, [r2, #8]
}
   1121e:	6f98      	ldr	r0, [r3, #120]	; 0x78
   11220:	4770      	bx	lr
   11222:	bf00      	nop
   11224:	200010e8 	.word	0x200010e8
   11228:	0001cdf8 	.word	0x0001cdf8
   1122c:	e000ed00 	.word	0xe000ed00

00011230 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11230:	4912      	ldr	r1, [pc, #72]	; (1127c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11232:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11234:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   11238:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1123a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1123e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11242:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   11244:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11248:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1124c:	4f0c      	ldr	r7, [pc, #48]	; (11280 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1124e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11252:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   11254:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   11256:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11258:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   1125a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1125c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1125e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   11262:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   11264:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   11266:	f000 fbd3 	bl	11a10 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1126a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1126e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11272:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   11276:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1127a:	4770      	bx	lr
    ldr r1, =_kernel
   1127c:	200010e8 	.word	0x200010e8
    ldr v4, =_SCS_ICSR
   11280:	e000ed04 	.word	0xe000ed04

00011284 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11284:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11288:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1128a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1128e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11292:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11294:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11298:	2902      	cmp	r1, #2
    beq _oops
   1129a:	d0ff      	beq.n	1129c <_oops>

0001129c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1129c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1129e:	f009 fde5 	bl	1ae6c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   112a2:	bd01      	pop	{r0, pc}

000112a4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   112a4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   112a8:	9b00      	ldr	r3, [sp, #0]
   112aa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   112ae:	490a      	ldr	r1, [pc, #40]	; (112d8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   112b0:	9b01      	ldr	r3, [sp, #4]
   112b2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   112b6:	9b02      	ldr	r3, [sp, #8]
   112b8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   112bc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   112c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   112c4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   112c8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   112cc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   112ce:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   112d0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   112d2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   112d4:	4770      	bx	lr
   112d6:	bf00      	nop
   112d8:	0001a98f 	.word	0x0001a98f

000112dc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   112dc:	4a0b      	ldr	r2, [pc, #44]	; (1130c <z_check_thread_stack_fail+0x30>)
{
   112de:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   112e0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   112e2:	b190      	cbz	r0, 1130a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   112e4:	f113 0f16 	cmn.w	r3, #22
   112e8:	6e40      	ldr	r0, [r0, #100]	; 0x64
   112ea:	d005      	beq.n	112f8 <z_check_thread_stack_fail+0x1c>
   112ec:	f1a0 0220 	sub.w	r2, r0, #32
   112f0:	429a      	cmp	r2, r3
   112f2:	d806      	bhi.n	11302 <z_check_thread_stack_fail+0x26>
   112f4:	4283      	cmp	r3, r0
   112f6:	d204      	bcs.n	11302 <z_check_thread_stack_fail+0x26>
   112f8:	4281      	cmp	r1, r0
   112fa:	bf2c      	ite	cs
   112fc:	2100      	movcs	r1, #0
   112fe:	2101      	movcc	r1, #1
   11300:	e000      	b.n	11304 <z_check_thread_stack_fail+0x28>
   11302:	2100      	movs	r1, #0
   11304:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   11306:	bf08      	it	eq
   11308:	2000      	moveq	r0, #0
}
   1130a:	4770      	bx	lr
   1130c:	200010e8 	.word	0x200010e8

00011310 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   11310:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11312:	4b09      	ldr	r3, [pc, #36]	; (11338 <arch_switch_to_main_thread+0x28>)
   11314:	6098      	str	r0, [r3, #8]
{
   11316:	460d      	mov	r5, r1
   11318:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1131a:	f000 fb79 	bl	11a10 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1131e:	4620      	mov	r0, r4
   11320:	f385 8809 	msr	PSP, r5
   11324:	2100      	movs	r1, #0
   11326:	b663      	cpsie	if
   11328:	f381 8811 	msr	BASEPRI, r1
   1132c:	f3bf 8f6f 	isb	sy
   11330:	2200      	movs	r2, #0
   11332:	2300      	movs	r3, #0
   11334:	f009 fb2b 	bl	1a98e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   11338:	200010e8 	.word	0x200010e8

0001133c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1133c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1133e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11340:	4a0b      	ldr	r2, [pc, #44]	; (11370 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   11342:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   11344:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   11346:	bf1e      	ittt	ne
	movne	r1, #0
   11348:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1134a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1134c:	f00a fb18 	blne	1b980 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11350:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   11352:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   11356:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1135a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1135e:	4905      	ldr	r1, [pc, #20]	; (11374 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11360:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   11362:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   11364:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   11366:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1136a:	4903      	ldr	r1, [pc, #12]	; (11378 <_isr_wrapper+0x3c>)
	bx r1
   1136c:	4708      	bx	r1
   1136e:	0000      	.short	0x0000
	ldr r2, =_kernel
   11370:	200010e8 	.word	0x200010e8
	ldr r1, =_sw_isr_table
   11374:	0001c7c0 	.word	0x0001c7c0
	ldr r1, =z_arm_int_exit
   11378:	0001137d 	.word	0x0001137d

0001137c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1137c:	4b04      	ldr	r3, [pc, #16]	; (11390 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1137e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11380:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   11382:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11384:	d003      	beq.n	1138e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   11386:	4903      	ldr	r1, [pc, #12]	; (11394 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1138c:	600a      	str	r2, [r1, #0]

0001138e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1138e:	4770      	bx	lr
	ldr r3, =_kernel
   11390:	200010e8 	.word	0x200010e8
	ldr r1, =_SCS_ICSR
   11394:	e000ed04 	.word	0xe000ed04

00011398 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   11398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1139c:	4b3f      	ldr	r3, [pc, #252]	; (1149c <mem_manage_fault+0x104>)
   1139e:	4c40      	ldr	r4, [pc, #256]	; (114a0 <mem_manage_fault+0x108>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   113a0:	4d40      	ldr	r5, [pc, #256]	; (114a4 <mem_manage_fault+0x10c>)
   113a2:	1ae4      	subs	r4, r4, r3
   113a4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   113a6:	01a4      	lsls	r4, r4, #6
   113a8:	f044 0901 	orr.w	r9, r4, #1
{
   113ac:	4607      	mov	r7, r0
   113ae:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   113b0:	4648      	mov	r0, r9
   113b2:	493d      	ldr	r1, [pc, #244]	; (114a8 <mem_manage_fault+0x110>)
{
   113b4:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   113b6:	f009 fc37 	bl	1ac28 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   113ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   113bc:	06d3      	lsls	r3, r2, #27
   113be:	d503      	bpl.n	113c8 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   113c0:	493a      	ldr	r1, [pc, #232]	; (114ac <mem_manage_fault+0x114>)
   113c2:	4648      	mov	r0, r9
   113c4:	f009 fc30 	bl	1ac28 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   113c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   113ca:	0718      	lsls	r0, r3, #28
   113cc:	d504      	bpl.n	113d8 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   113ce:	4938      	ldr	r1, [pc, #224]	; (114b0 <mem_manage_fault+0x118>)
   113d0:	f044 0001 	orr.w	r0, r4, #1
   113d4:	f009 fc28 	bl	1ac28 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   113d8:	4d32      	ldr	r5, [pc, #200]	; (114a4 <mem_manage_fault+0x10c>)
   113da:	6aab      	ldr	r3, [r5, #40]	; 0x28
   113dc:	0799      	lsls	r1, r3, #30
   113de:	d424      	bmi.n	1142a <mem_manage_fault+0x92>
	uint32_t mmfar = -EINVAL;
   113e0:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   113e4:	4d2f      	ldr	r5, [pc, #188]	; (114a4 <mem_manage_fault+0x10c>)
   113e6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   113e8:	07d3      	lsls	r3, r2, #31
   113ea:	d504      	bpl.n	113f6 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   113ec:	4931      	ldr	r1, [pc, #196]	; (114b4 <mem_manage_fault+0x11c>)
   113ee:	f044 0001 	orr.w	r0, r4, #1
   113f2:	f009 fc19 	bl	1ac28 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   113f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   113f8:	069d      	lsls	r5, r3, #26
   113fa:	d504      	bpl.n	11406 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   113fc:	492e      	ldr	r1, [pc, #184]	; (114b8 <mem_manage_fault+0x120>)
   113fe:	f044 0001 	orr.w	r0, r4, #1
   11402:	f009 fc11 	bl	1ac28 <log_string_sync>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11406:	4d27      	ldr	r5, [pc, #156]	; (114a4 <mem_manage_fault+0x10c>)
   11408:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1140a:	06d8      	lsls	r0, r3, #27
   1140c:	d425      	bmi.n	1145a <mem_manage_fault+0xc2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1140e:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11410:	0799      	lsls	r1, r3, #30
   11412:	d422      	bmi.n	1145a <mem_manage_fault+0xc2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11414:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11416:	4a23      	ldr	r2, [pc, #140]	; (114a4 <mem_manage_fault+0x10c>)
   11418:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1141a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1141e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   11420:	2300      	movs	r3, #0
   11422:	7033      	strb	r3, [r6, #0]

	return reason;
}
   11424:	4620      	mov	r0, r4
   11426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   1142a:	f044 0a01 	orr.w	sl, r4, #1
   1142e:	4923      	ldr	r1, [pc, #140]	; (114bc <mem_manage_fault+0x124>)
   11430:	4650      	mov	r0, sl
   11432:	f009 fbf9 	bl	1ac28 <log_string_sync>
		uint32_t temp = SCB->MMFAR;
   11436:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1143a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1143c:	061a      	lsls	r2, r3, #24
   1143e:	d5cf      	bpl.n	113e0 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   11440:	491f      	ldr	r1, [pc, #124]	; (114c0 <mem_manage_fault+0x128>)
   11442:	464a      	mov	r2, r9
   11444:	4650      	mov	r0, sl
   11446:	f009 fbef 	bl	1ac28 <log_string_sync>
			if (from_hard_fault != 0) {
   1144a:	f1b8 0f00 	cmp.w	r8, #0
   1144e:	d0c9      	beq.n	113e4 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11450:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   11456:	62ab      	str	r3, [r5, #40]	; 0x28
   11458:	e7c4      	b.n	113e4 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1145a:	686b      	ldr	r3, [r5, #4]
   1145c:	051a      	lsls	r2, r3, #20
   1145e:	d5d9      	bpl.n	11414 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   11460:	4639      	mov	r1, r7
   11462:	4648      	mov	r0, r9
   11464:	f7ff ff3a 	bl	112dc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   11468:	4604      	mov	r4, r0
   1146a:	b118      	cbz	r0, 11474 <mem_manage_fault+0xdc>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1146c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   11470:	2402      	movs	r4, #2
   11472:	e7d0      	b.n	11416 <mem_manage_fault+0x7e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   11474:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11476:	06db      	lsls	r3, r3, #27
   11478:	d5cc      	bpl.n	11414 <mem_manage_fault+0x7c>
   1147a:	4a12      	ldr	r2, [pc, #72]	; (114c4 <mem_manage_fault+0x12c>)
   1147c:	4912      	ldr	r1, [pc, #72]	; (114c8 <mem_manage_fault+0x130>)
   1147e:	4813      	ldr	r0, [pc, #76]	; (114cc <mem_manage_fault+0x134>)
   11480:	f240 1349 	movw	r3, #329	; 0x149
   11484:	f009 fa22 	bl	1a8cc <printk>
   11488:	4811      	ldr	r0, [pc, #68]	; (114d0 <mem_manage_fault+0x138>)
   1148a:	f009 fa1f 	bl	1a8cc <printk>
   1148e:	480d      	ldr	r0, [pc, #52]	; (114c4 <mem_manage_fault+0x12c>)
   11490:	f240 1149 	movw	r1, #329	; 0x149
   11494:	f009 fbb3 	bl	1abfe <assert_post_action>
   11498:	e7bd      	b.n	11416 <mem_manage_fault+0x7e>
   1149a:	bf00      	nop
   1149c:	0001c940 	.word	0x0001c940
   114a0:	0001c9c8 	.word	0x0001c9c8
   114a4:	e000ed00 	.word	0xe000ed00
   114a8:	0001df39 	.word	0x0001df39
   114ac:	0001df4f 	.word	0x0001df4f
   114b0:	0001df82 	.word	0x0001df82
   114b4:	0001dfc3 	.word	0x0001dfc3
   114b8:	0001dfe2 	.word	0x0001dfe2
   114bc:	0001df95 	.word	0x0001df95
   114c0:	0001dfad 	.word	0x0001dfad
   114c4:	0001e011 	.word	0x0001e011
   114c8:	0001e04b 	.word	0x0001e04b
   114cc:	0001d2dc 	.word	0x0001d2dc
   114d0:	0001e095 	.word	0x0001e095

000114d4 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   114d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114d8:	4b29      	ldr	r3, [pc, #164]	; (11580 <bus_fault.isra.0+0xac>)
   114da:	4c2a      	ldr	r4, [pc, #168]	; (11584 <bus_fault.isra.0+0xb0>)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   114dc:	4d2a      	ldr	r5, [pc, #168]	; (11588 <bus_fault.isra.0+0xb4>)
   114de:	1ae4      	subs	r4, r4, r3
   114e0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   114e2:	01a4      	lsls	r4, r4, #6
   114e4:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   114e8:	4607      	mov	r7, r0
   114ea:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   114ec:	4640      	mov	r0, r8
   114ee:	4927      	ldr	r1, [pc, #156]	; (1158c <bus_fault.isra.0+0xb8>)
   114f0:	f009 fb9a 	bl	1ac28 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   114f4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   114f6:	04d1      	lsls	r1, r2, #19
   114f8:	d503      	bpl.n	11502 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   114fa:	4925      	ldr	r1, [pc, #148]	; (11590 <bus_fault.isra.0+0xbc>)
   114fc:	4640      	mov	r0, r8
   114fe:	f009 fb93 	bl	1ac28 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11502:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11504:	051a      	lsls	r2, r3, #20
   11506:	d504      	bpl.n	11512 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   11508:	4922      	ldr	r1, [pc, #136]	; (11594 <bus_fault.isra.0+0xc0>)
   1150a:	f044 0001 	orr.w	r0, r4, #1
   1150e:	f009 fb8b 	bl	1ac28 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11512:	4d1d      	ldr	r5, [pc, #116]	; (11588 <bus_fault.isra.0+0xb4>)
   11514:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11516:	059b      	lsls	r3, r3, #22
   11518:	d512      	bpl.n	11540 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   1151a:	f044 0801 	orr.w	r8, r4, #1
   1151e:	4640      	mov	r0, r8
   11520:	491d      	ldr	r1, [pc, #116]	; (11598 <bus_fault.isra.0+0xc4>)
   11522:	f009 fb81 	bl	1ac28 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11526:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11528:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1152a:	0418      	lsls	r0, r3, #16
   1152c:	d508      	bpl.n	11540 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1152e:	491b      	ldr	r1, [pc, #108]	; (1159c <bus_fault.isra.0+0xc8>)
   11530:	4640      	mov	r0, r8
   11532:	f009 fb79 	bl	1ac28 <log_string_sync>
			if (from_hard_fault != 0) {
   11536:	b11f      	cbz	r7, 11540 <bus_fault.isra.0+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11538:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1153a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1153e:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11540:	4d11      	ldr	r5, [pc, #68]	; (11588 <bus_fault.isra.0+0xb4>)
   11542:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11544:	0559      	lsls	r1, r3, #21
   11546:	d504      	bpl.n	11552 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   11548:	4915      	ldr	r1, [pc, #84]	; (115a0 <bus_fault.isra.0+0xcc>)
   1154a:	f044 0001 	orr.w	r0, r4, #1
   1154e:	f009 fb6b 	bl	1ac28 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11552:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11554:	05da      	lsls	r2, r3, #23
   11556:	d50d      	bpl.n	11574 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   11558:	4912      	ldr	r1, [pc, #72]	; (115a4 <bus_fault.isra.0+0xd0>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1155a:	f044 0001 	orr.w	r0, r4, #1
   1155e:	f009 fb63 	bl	1ac28 <log_string_sync>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11562:	4a09      	ldr	r2, [pc, #36]	; (11588 <bus_fault.isra.0+0xb4>)
   11564:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   11566:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11568:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1156c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1156e:	7030      	strb	r0, [r6, #0]

	return reason;
}
   11570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11574:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11576:	049b      	lsls	r3, r3, #18
   11578:	d5f3      	bpl.n	11562 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1157a:	490b      	ldr	r1, [pc, #44]	; (115a8 <bus_fault.isra.0+0xd4>)
   1157c:	e7ed      	b.n	1155a <bus_fault.isra.0+0x86>
   1157e:	bf00      	nop
   11580:	0001c940 	.word	0x0001c940
   11584:	0001c9c8 	.word	0x0001c9c8
   11588:	e000ed00 	.word	0xe000ed00
   1158c:	0001e0b8 	.word	0x0001e0b8
   11590:	0001e0ce 	.word	0x0001e0ce
   11594:	0001df82 	.word	0x0001df82
   11598:	0001e0df 	.word	0x0001e0df
   1159c:	0001e0f8 	.word	0x0001e0f8
   115a0:	0001e10d 	.word	0x0001e10d
   115a4:	0001e128 	.word	0x0001e128
   115a8:	0001dfe2 	.word	0x0001dfe2

000115ac <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   115ac:	b570      	push	{r4, r5, r6, lr}
   115ae:	4b23      	ldr	r3, [pc, #140]	; (1163c <usage_fault.isra.0+0x90>)
   115b0:	4c23      	ldr	r4, [pc, #140]	; (11640 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   115b2:	4d24      	ldr	r5, [pc, #144]	; (11644 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   115b4:	4924      	ldr	r1, [pc, #144]	; (11648 <usage_fault.isra.0+0x9c>)
   115b6:	1ae4      	subs	r4, r4, r3
   115b8:	08e4      	lsrs	r4, r4, #3
   115ba:	01a4      	lsls	r4, r4, #6
   115bc:	f044 0601 	orr.w	r6, r4, #1
   115c0:	4630      	mov	r0, r6
   115c2:	f009 fb31 	bl	1ac28 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   115c6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   115c8:	0193      	lsls	r3, r2, #6
   115ca:	d503      	bpl.n	115d4 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   115cc:	491f      	ldr	r1, [pc, #124]	; (1164c <usage_fault.isra.0+0xa0>)
   115ce:	4630      	mov	r0, r6
   115d0:	f009 fb2a 	bl	1ac28 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   115d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   115d6:	01dd      	lsls	r5, r3, #7
   115d8:	d504      	bpl.n	115e4 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   115da:	491d      	ldr	r1, [pc, #116]	; (11650 <usage_fault.isra.0+0xa4>)
   115dc:	f044 0001 	orr.w	r0, r4, #1
   115e0:	f009 fb22 	bl	1ac28 <log_string_sync>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   115e4:	4d17      	ldr	r5, [pc, #92]	; (11644 <usage_fault.isra.0+0x98>)
   115e6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   115e8:	0310      	lsls	r0, r2, #12
   115ea:	d504      	bpl.n	115f6 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   115ec:	4919      	ldr	r1, [pc, #100]	; (11654 <usage_fault.isra.0+0xa8>)
   115ee:	f044 0001 	orr.w	r0, r4, #1
   115f2:	f009 fb19 	bl	1ac28 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   115f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   115f8:	0359      	lsls	r1, r3, #13
   115fa:	d504      	bpl.n	11606 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   115fc:	4916      	ldr	r1, [pc, #88]	; (11658 <usage_fault.isra.0+0xac>)
   115fe:	f044 0001 	orr.w	r0, r4, #1
   11602:	f009 fb11 	bl	1ac28 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11606:	4d0f      	ldr	r5, [pc, #60]	; (11644 <usage_fault.isra.0+0x98>)
   11608:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1160a:	0392      	lsls	r2, r2, #14
   1160c:	d504      	bpl.n	11618 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1160e:	4913      	ldr	r1, [pc, #76]	; (1165c <usage_fault.isra.0+0xb0>)
   11610:	f044 0001 	orr.w	r0, r4, #1
   11614:	f009 fb08 	bl	1ac28 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11618:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1161a:	03db      	lsls	r3, r3, #15
   1161c:	d504      	bpl.n	11628 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1161e:	4910      	ldr	r1, [pc, #64]	; (11660 <usage_fault.isra.0+0xb4>)
   11620:	f044 0001 	orr.w	r0, r4, #1
   11624:	f009 fb00 	bl	1ac28 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11628:	4a06      	ldr	r2, [pc, #24]	; (11644 <usage_fault.isra.0+0x98>)
   1162a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1162c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   11630:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   11634:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   11636:	2000      	movs	r0, #0
   11638:	bd70      	pop	{r4, r5, r6, pc}
   1163a:	bf00      	nop
   1163c:	0001c940 	.word	0x0001c940
   11640:	0001c9c8 	.word	0x0001c9c8
   11644:	e000ed00 	.word	0xe000ed00
   11648:	0001e140 	.word	0x0001e140
   1164c:	0001e158 	.word	0x0001e158
   11650:	0001e16b 	.word	0x0001e16b
   11654:	0001e185 	.word	0x0001e185
   11658:	0001e1a3 	.word	0x0001e1a3
   1165c:	0001e1c8 	.word	0x0001e1c8
   11660:	0001e1e2 	.word	0x0001e1e2

00011664 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11668:	4b7f      	ldr	r3, [pc, #508]	; (11868 <z_arm_fault+0x204>)
   1166a:	685e      	ldr	r6, [r3, #4]
{
   1166c:	b08a      	sub	sp, #40	; 0x28
   1166e:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11670:	f3c6 0408 	ubfx	r4, r6, #0, #9
   11674:	2700      	movs	r7, #0
   11676:	f387 8811 	msr	BASEPRI, r7
   1167a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1167e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   11682:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   11686:	d10d      	bne.n	116a4 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   11688:	f002 030c 	and.w	r3, r2, #12
   1168c:	2b08      	cmp	r3, #8
   1168e:	d11a      	bne.n	116c6 <z_arm_fault+0x62>
   11690:	4876      	ldr	r0, [pc, #472]	; (1186c <z_arm_fault+0x208>)
   11692:	4b77      	ldr	r3, [pc, #476]	; (11870 <z_arm_fault+0x20c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   11694:	4977      	ldr	r1, [pc, #476]	; (11874 <z_arm_fault+0x210>)
   11696:	1ac0      	subs	r0, r0, r3
   11698:	08c0      	lsrs	r0, r0, #3
   1169a:	0180      	lsls	r0, r0, #6
   1169c:	f040 0001 	orr.w	r0, r0, #1
   116a0:	f009 fac2 	bl	1ac28 <log_string_sync>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   116a4:	4a74      	ldr	r2, [pc, #464]	; (11878 <z_arm_fault+0x214>)
   116a6:	4975      	ldr	r1, [pc, #468]	; (1187c <z_arm_fault+0x218>)
   116a8:	4875      	ldr	r0, [pc, #468]	; (11880 <z_arm_fault+0x21c>)
   116aa:	f240 33f2 	movw	r3, #1010	; 0x3f2
   116ae:	f009 f90d 	bl	1a8cc <printk>
   116b2:	4874      	ldr	r0, [pc, #464]	; (11884 <z_arm_fault+0x220>)
   116b4:	f009 f90a 	bl	1a8cc <printk>
   116b8:	486f      	ldr	r0, [pc, #444]	; (11878 <z_arm_fault+0x214>)
   116ba:	f240 31f2 	movw	r1, #1010	; 0x3f2
   116be:	f009 fa9e 	bl	1abfe <assert_post_action>
   116c2:	2500      	movs	r5, #0
   116c4:	e005      	b.n	116d2 <z_arm_fault+0x6e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   116c6:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   116c8:	bf5c      	itt	pl
   116ca:	4605      	movpl	r5, r0
			*nested_exc = true;
   116cc:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
   116ce:	2d00      	cmp	r5, #0
   116d0:	d0e8      	beq.n	116a4 <z_arm_fault+0x40>
	*recoverable = false;
   116d2:	2300      	movs	r3, #0
   116d4:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   116d8:	1ee3      	subs	r3, r4, #3
   116da:	2b09      	cmp	r3, #9
   116dc:	f200 80aa 	bhi.w	11834 <z_arm_fault+0x1d0>
   116e0:	e8df f003 	tbb	[pc, r3]
   116e4:	779b9705 	.word	0x779b9705
   116e8:	a8a8a8a8 	.word	0xa8a8a8a8
   116ec:	9fa8      	.short	0x9fa8
   116ee:	4b60      	ldr	r3, [pc, #384]	; (11870 <z_arm_fault+0x20c>)
   116f0:	4e5e      	ldr	r6, [pc, #376]	; (1186c <z_arm_fault+0x208>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   116f2:	4965      	ldr	r1, [pc, #404]	; (11888 <z_arm_fault+0x224>)
   116f4:	1af6      	subs	r6, r6, r3
   116f6:	08f6      	lsrs	r6, r6, #3
   116f8:	01b6      	lsls	r6, r6, #6
   116fa:	f046 0601 	orr.w	r6, r6, #1
   116fe:	4630      	mov	r0, r6
   11700:	f009 fa92 	bl	1ac28 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11704:	4b58      	ldr	r3, [pc, #352]	; (11868 <z_arm_fault+0x204>)
   11706:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   11708:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1170c:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   11710:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11714:	d005      	beq.n	11722 <z_arm_fault+0xbe>
		PR_EXC("  Bus fault on vector table read");
   11716:	495d      	ldr	r1, [pc, #372]	; (1188c <z_arm_fault+0x228>)
   11718:	4630      	mov	r0, r6
	PR_FAULT_INFO(
   1171a:	f009 fa85 	bl	1ac28 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1171e:	2400      	movs	r4, #0
}
   11720:	e006      	b.n	11730 <z_arm_fault+0xcc>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   11722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11724:	2a00      	cmp	r2, #0
   11726:	da24      	bge.n	11772 <z_arm_fault+0x10e>
		PR_EXC("  Debug event");
   11728:	4959      	ldr	r1, [pc, #356]	; (11890 <z_arm_fault+0x22c>)
   1172a:	4630      	mov	r0, r6
   1172c:	f009 fa7c 	bl	1ac28 <log_string_sync>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11730:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11734:	b9d3      	cbnz	r3, 1176c <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11736:	aa02      	add	r2, sp, #8
   11738:	f105 0620 	add.w	r6, r5, #32
   1173c:	6828      	ldr	r0, [r5, #0]
   1173e:	6869      	ldr	r1, [r5, #4]
   11740:	4613      	mov	r3, r2
   11742:	c303      	stmia	r3!, {r0, r1}
   11744:	3508      	adds	r5, #8
   11746:	42b5      	cmp	r5, r6
   11748:	461a      	mov	r2, r3
   1174a:	d1f7      	bne.n	1173c <z_arm_fault+0xd8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1174c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1174e:	2f00      	cmp	r7, #0
   11750:	f000 8084 	beq.w	1185c <z_arm_fault+0x1f8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11754:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11758:	b922      	cbnz	r2, 11764 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1175a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1175e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11762:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   11764:	a902      	add	r1, sp, #8
   11766:	4620      	mov	r0, r4
   11768:	f7ff fc8a 	bl	11080 <z_arm_fatal_error>
}
   1176c:	b00a      	add	sp, #40	; 0x28
   1176e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11774:	005b      	lsls	r3, r3, #1
   11776:	d53f      	bpl.n	117f8 <z_arm_fault+0x194>
		PR_EXC("  Fault escalation (see below)");
   11778:	4946      	ldr	r1, [pc, #280]	; (11894 <z_arm_fault+0x230>)
   1177a:	4630      	mov	r0, r6
   1177c:	f009 fa54 	bl	1ac28 <log_string_sync>
	uint16_t fault_insn = *(ret_addr - 1);
   11780:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11782:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   11786:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1178a:	429a      	cmp	r2, r3
   1178c:	d00d      	beq.n	117aa <z_arm_fault+0x146>
		} else if (SCB_MMFSR != 0) {
   1178e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   11792:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   11796:	781b      	ldrb	r3, [r3, #0]
   11798:	b173      	cbz	r3, 117b8 <z_arm_fault+0x154>
			reason = mem_manage_fault(esf, 1, recoverable);
   1179a:	f10d 0207 	add.w	r2, sp, #7
   1179e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   117a0:	4628      	mov	r0, r5
   117a2:	f7ff fdf9 	bl	11398 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   117a6:	4604      	mov	r4, r0
		break;
   117a8:	e7c2      	b.n	11730 <z_arm_fault+0xcc>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   117aa:	682a      	ldr	r2, [r5, #0]
   117ac:	493a      	ldr	r1, [pc, #232]	; (11898 <z_arm_fault+0x234>)
   117ae:	4630      	mov	r0, r6
   117b0:	f009 fa3a 	bl	1ac28 <log_string_sync>
			reason = esf->basic.r0;
   117b4:	682c      	ldr	r4, [r5, #0]
   117b6:	e7bb      	b.n	11730 <z_arm_fault+0xcc>
		} else if (SCB_BFSR != 0) {
   117b8:	4b38      	ldr	r3, [pc, #224]	; (1189c <z_arm_fault+0x238>)
   117ba:	781b      	ldrb	r3, [r3, #0]
   117bc:	b12b      	cbz	r3, 117ca <z_arm_fault+0x166>
			reason = bus_fault(esf, 1, recoverable);
   117be:	f10d 0107 	add.w	r1, sp, #7
   117c2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   117c4:	f7ff fe86 	bl	114d4 <bus_fault.isra.0>
   117c8:	e7ed      	b.n	117a6 <z_arm_fault+0x142>
		} else if (SCB_UFSR != 0) {
   117ca:	4b35      	ldr	r3, [pc, #212]	; (118a0 <z_arm_fault+0x23c>)
   117cc:	881b      	ldrh	r3, [r3, #0]
   117ce:	b29b      	uxth	r3, r3
   117d0:	b113      	cbz	r3, 117d8 <z_arm_fault+0x174>
		reason = usage_fault(esf);
   117d2:	f7ff feeb 	bl	115ac <usage_fault.isra.0>
   117d6:	e7e6      	b.n	117a6 <z_arm_fault+0x142>
			__ASSERT(0,
   117d8:	4932      	ldr	r1, [pc, #200]	; (118a4 <z_arm_fault+0x240>)
   117da:	4a27      	ldr	r2, [pc, #156]	; (11878 <z_arm_fault+0x214>)
   117dc:	4828      	ldr	r0, [pc, #160]	; (11880 <z_arm_fault+0x21c>)
   117de:	f240 23c3 	movw	r3, #707	; 0x2c3
   117e2:	f009 f873 	bl	1a8cc <printk>
   117e6:	4830      	ldr	r0, [pc, #192]	; (118a8 <z_arm_fault+0x244>)
   117e8:	f009 f870 	bl	1a8cc <printk>
   117ec:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   117f0:	4821      	ldr	r0, [pc, #132]	; (11878 <z_arm_fault+0x214>)
   117f2:	f009 fa04 	bl	1abfe <assert_post_action>
   117f6:	e79b      	b.n	11730 <z_arm_fault+0xcc>
   117f8:	492a      	ldr	r1, [pc, #168]	; (118a4 <z_arm_fault+0x240>)
   117fa:	4a1f      	ldr	r2, [pc, #124]	; (11878 <z_arm_fault+0x214>)
   117fc:	4820      	ldr	r0, [pc, #128]	; (11880 <z_arm_fault+0x21c>)
   117fe:	f240 23c7 	movw	r3, #711	; 0x2c7
   11802:	f009 f863 	bl	1a8cc <printk>
   11806:	4829      	ldr	r0, [pc, #164]	; (118ac <z_arm_fault+0x248>)
   11808:	f009 f860 	bl	1a8cc <printk>
   1180c:	f240 21c7 	movw	r1, #711	; 0x2c7
   11810:	e7ee      	b.n	117f0 <z_arm_fault+0x18c>
		reason = mem_manage_fault(esf, 0, recoverable);
   11812:	f10d 0207 	add.w	r2, sp, #7
   11816:	2100      	movs	r1, #0
   11818:	e7c2      	b.n	117a0 <z_arm_fault+0x13c>
		reason = bus_fault(esf, 0, recoverable);
   1181a:	f10d 0107 	add.w	r1, sp, #7
   1181e:	2000      	movs	r0, #0
   11820:	e7d0      	b.n	117c4 <z_arm_fault+0x160>
   11822:	4812      	ldr	r0, [pc, #72]	; (1186c <z_arm_fault+0x208>)
   11824:	4b12      	ldr	r3, [pc, #72]	; (11870 <z_arm_fault+0x20c>)
	PR_FAULT_INFO(
   11826:	4922      	ldr	r1, [pc, #136]	; (118b0 <z_arm_fault+0x24c>)
   11828:	1ac0      	subs	r0, r0, r3
   1182a:	08c0      	lsrs	r0, r0, #3
   1182c:	0180      	lsls	r0, r0, #6
   1182e:	f040 0001 	orr.w	r0, r0, #1
   11832:	e772      	b.n	1171a <z_arm_fault+0xb6>
   11834:	4b0e      	ldr	r3, [pc, #56]	; (11870 <z_arm_fault+0x20c>)
   11836:	480d      	ldr	r0, [pc, #52]	; (1186c <z_arm_fault+0x208>)
	PR_FAULT_INFO("***** %s %d) *****",
   11838:	491e      	ldr	r1, [pc, #120]	; (118b4 <z_arm_fault+0x250>)
   1183a:	4a1f      	ldr	r2, [pc, #124]	; (118b8 <z_arm_fault+0x254>)
   1183c:	1ac0      	subs	r0, r0, r3
   1183e:	08c0      	lsrs	r0, r0, #3
   11840:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   11844:	ea4f 1080 	mov.w	r0, r0, lsl #6
   11848:	bf08      	it	eq
   1184a:	460a      	moveq	r2, r1
   1184c:	f1a4 0310 	sub.w	r3, r4, #16
   11850:	491a      	ldr	r1, [pc, #104]	; (118bc <z_arm_fault+0x258>)
   11852:	f040 0001 	orr.w	r0, r0, #1
   11856:	f009 f9e7 	bl	1ac28 <log_string_sync>
   1185a:	e760      	b.n	1171e <z_arm_fault+0xba>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1185c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11860:	f023 0301 	bic.w	r3, r3, #1
   11864:	e77d      	b.n	11762 <z_arm_fault+0xfe>
   11866:	bf00      	nop
   11868:	e000ed00 	.word	0xe000ed00
   1186c:	0001c9c8 	.word	0x0001c9c8
   11870:	0001c940 	.word	0x0001c940
   11874:	0001e23b 	.word	0x0001e23b
   11878:	0001e011 	.word	0x0001e011
   1187c:	0001e266 	.word	0x0001e266
   11880:	0001d2dc 	.word	0x0001d2dc
   11884:	0001e279 	.word	0x0001e279
   11888:	0001e2b7 	.word	0x0001e2b7
   1188c:	0001e2ce 	.word	0x0001e2ce
   11890:	0001e2ef 	.word	0x0001e2ef
   11894:	0001e2fd 	.word	0x0001e2fd
   11898:	0001e31c 	.word	0x0001e31c
   1189c:	e000ed29 	.word	0xe000ed29
   118a0:	e000ed2a 	.word	0xe000ed2a
   118a4:	000205d8 	.word	0x000205d8
   118a8:	0001e338 	.word	0x0001e338
   118ac:	0001e35c 	.word	0x0001e35c
   118b0:	0001e38c 	.word	0x0001e38c
   118b4:	0001e20d 	.word	0x0001e20d
   118b8:	0001e222 	.word	0x0001e222
   118bc:	0001e3b0 	.word	0x0001e3b0

000118c0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   118c0:	4a02      	ldr	r2, [pc, #8]	; (118cc <z_arm_fault_init+0xc>)
   118c2:	6953      	ldr	r3, [r2, #20]
   118c4:	f043 0310 	orr.w	r3, r3, #16
   118c8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   118ca:	4770      	bx	lr
   118cc:	e000ed00 	.word	0xe000ed00

000118d0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   118d0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   118d4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   118d8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   118da:	4672      	mov	r2, lr
	bl z_arm_fault
   118dc:	f7ff fec2 	bl	11664 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   118e0:	bd01      	pop	{r0, pc}
   118e2:	bf00      	nop

000118e4 <z_arm_interrupt_init>:
   118e4:	4804      	ldr	r0, [pc, #16]	; (118f8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   118e6:	2300      	movs	r3, #0
   118e8:	2120      	movs	r1, #32
   118ea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   118ec:	3301      	adds	r3, #1
   118ee:	2b30      	cmp	r3, #48	; 0x30
   118f0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   118f4:	d1f9      	bne.n	118ea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   118f6:	4770      	bx	lr
   118f8:	e000e100 	.word	0xe000e100

000118fc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   118fc:	2000      	movs	r0, #0
    msr CONTROL, r0
   118fe:	f380 8814 	msr	CONTROL, r0
    isb
   11902:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   11906:	f00a fec9 	bl	1c69c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1190a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1190c:	490d      	ldr	r1, [pc, #52]	; (11944 <__start+0x48>)
    str r0, [r1]
   1190e:	6008      	str	r0, [r1, #0]
    dsb
   11910:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11914:	480c      	ldr	r0, [pc, #48]	; (11948 <__start+0x4c>)
    msr msp, r0
   11916:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1191a:	f000 f829 	bl	11970 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1191e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11920:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   11924:	4809      	ldr	r0, [pc, #36]	; (1194c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11926:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   1192a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1192c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11930:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11934:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11936:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11938:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1193c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11940:	f7ff fc40 	bl	111c4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   11944:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11948:	20004ba0 	.word	0x20004ba0
    ldr r0, =z_interrupt_stacks
   1194c:	20004d20 	.word	0x20004d20

00011950 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11950:	4a06      	ldr	r2, [pc, #24]	; (1196c <z_arm_clear_arm_mpu_config+0x1c>)
   11952:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   11954:	2300      	movs	r3, #0
	int num_regions =
   11956:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   1195a:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   1195c:	428b      	cmp	r3, r1
   1195e:	d100      	bne.n	11962 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   11960:	4770      	bx	lr
  MPU->RNR = rnr;
   11962:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   11964:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   11966:	3301      	adds	r3, #1
   11968:	e7f8      	b.n	1195c <z_arm_clear_arm_mpu_config+0xc>
   1196a:	bf00      	nop
   1196c:	e000ed90 	.word	0xe000ed90

00011970 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11970:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11972:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11974:	2300      	movs	r3, #0
   11976:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1197a:	f7ff ffe9 	bl	11950 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1197e:	4b14      	ldr	r3, [pc, #80]	; (119d0 <z_arm_init_arch_hw_at_boot+0x60>)
   11980:	f04f 32ff 	mov.w	r2, #4294967295
   11984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   11988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   1198c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   11990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   11994:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   11998:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   1199c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   119a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   119a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   119a8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   119ac:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   119b0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   119b4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   119b8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   119bc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   119c0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   119c4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   119c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   119ca:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   119ce:	bd08      	pop	{r3, pc}
   119d0:	e000e100 	.word	0xe000e100

000119d4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   119d4:	4b06      	ldr	r3, [pc, #24]	; (119f0 <z_impl_k_thread_abort+0x1c>)
   119d6:	689b      	ldr	r3, [r3, #8]
   119d8:	4283      	cmp	r3, r0
   119da:	d107      	bne.n	119ec <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   119dc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   119e0:	b123      	cbz	r3, 119ec <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   119e2:	4a04      	ldr	r2, [pc, #16]	; (119f4 <z_impl_k_thread_abort+0x20>)
   119e4:	6853      	ldr	r3, [r2, #4]
   119e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   119ea:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   119ec:	f006 bbea 	b.w	181c4 <z_thread_abort>
   119f0:	200010e8 	.word	0x200010e8
   119f4:	e000ed00 	.word	0xe000ed00

000119f8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   119f8:	4b02      	ldr	r3, [pc, #8]	; (11a04 <z_arm_configure_static_mpu_regions+0xc>)
   119fa:	4a03      	ldr	r2, [pc, #12]	; (11a08 <z_arm_configure_static_mpu_regions+0x10>)
   119fc:	4803      	ldr	r0, [pc, #12]	; (11a0c <z_arm_configure_static_mpu_regions+0x14>)
   119fe:	2101      	movs	r1, #1
   11a00:	f000 b882 	b.w	11b08 <arm_core_mpu_configure_static_mpu_regions>
   11a04:	20040000 	.word	0x20040000
   11a08:	20000000 	.word	0x20000000
   11a0c:	0001cc3c 	.word	0x0001cc3c

00011a10 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   11a10:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   11a12:	4b05      	ldr	r3, [pc, #20]	; (11a28 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   11a14:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   11a16:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   11a18:	4a04      	ldr	r2, [pc, #16]	; (11a2c <z_arm_configure_dynamic_mpu_regions+0x1c>)
   11a1a:	2120      	movs	r1, #32
   11a1c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   11a20:	4618      	mov	r0, r3
   11a22:	2101      	movs	r1, #1
   11a24:	f000 b898 	b.w	11b58 <arm_core_mpu_configure_dynamic_mpu_regions>
   11a28:	20000edc 	.word	0x20000edc
   11a2c:	150b0000 	.word	0x150b0000

00011a30 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   11a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   11a32:	4f27      	ldr	r7, [pc, #156]	; (11ad0 <mpu_configure_regions+0xa0>)
	int i;
	int reg_index = start_reg_index;
   11a34:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   11a36:	2200      	movs	r2, #0
   11a38:	428a      	cmp	r2, r1
   11a3a:	da14      	bge.n	11a66 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   11a3c:	6844      	ldr	r4, [r0, #4]
   11a3e:	2c00      	cmp	r4, #0
   11a40:	d043      	beq.n	11aca <mpu_configure_regions+0x9a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   11a42:	b1c3      	cbz	r3, 11a76 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   11a44:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   11a48:	ea14 0f0c 	tst.w	r4, ip
   11a4c:	d00d      	beq.n	11a6a <mpu_configure_regions+0x3a>
   11a4e:	4821      	ldr	r0, [pc, #132]	; (11ad4 <mpu_configure_regions+0xa4>)
   11a50:	4b21      	ldr	r3, [pc, #132]	; (11ad8 <mpu_configure_regions+0xa8>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   11a52:	4922      	ldr	r1, [pc, #136]	; (11adc <mpu_configure_regions+0xac>)
   11a54:	1ac0      	subs	r0, r0, r3
   11a56:	08c0      	lsrs	r0, r0, #3
   11a58:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11a5a:	f040 0001 	orr.w	r0, r0, #1
   11a5e:	f009 f8e3 	bl	1ac28 <log_string_sync>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   11a62:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   11a66:	4628      	mov	r0, r5
   11a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   11a6a:	2c1f      	cmp	r4, #31
   11a6c:	d9ef      	bls.n	11a4e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   11a6e:	6806      	ldr	r6, [r0, #0]
		&&
   11a70:	ea1c 0f06 	tst.w	ip, r6
   11a74:	d1eb      	bne.n	11a4e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   11a76:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   11a78:	6806      	ldr	r6, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   11a7a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   11a7e:	b2ed      	uxtb	r5, r5
   11a80:	d914      	bls.n	11aac <mpu_configure_regions+0x7c>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   11a82:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   11a86:	d813      	bhi.n	11ab0 <mpu_configure_regions+0x80>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   11a88:	3c01      	subs	r4, #1
   11a8a:	fab4 f484 	clz	r4, r4
   11a8e:	f1c4 041f 	rsb	r4, r4, #31
   11a92:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   11a94:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11a96:	ea4c 0404 	orr.w	r4, ip, r4
   11a9a:	d90b      	bls.n	11ab4 <mpu_configure_regions+0x84>
   11a9c:	480d      	ldr	r0, [pc, #52]	; (11ad4 <mpu_configure_regions+0xa4>)
   11a9e:	4b0e      	ldr	r3, [pc, #56]	; (11ad8 <mpu_configure_regions+0xa8>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11aa0:	490f      	ldr	r1, [pc, #60]	; (11ae0 <mpu_configure_regions+0xb0>)
   11aa2:	1ac0      	subs	r0, r0, r3
   11aa4:	08c0      	lsrs	r0, r0, #3
   11aa6:	0180      	lsls	r0, r0, #6
   11aa8:	462a      	mov	r2, r5
   11aaa:	e7d6      	b.n	11a5a <mpu_configure_regions+0x2a>
		return REGION_32B;
   11aac:	2408      	movs	r4, #8
   11aae:	e7f1      	b.n	11a94 <mpu_configure_regions+0x64>
		return REGION_4G;
   11ab0:	243e      	movs	r4, #62	; 0x3e
   11ab2:	e7ef      	b.n	11a94 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11ab4:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
   11ab8:	432e      	orrs	r6, r5
   11aba:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11abe:	f044 0401 	orr.w	r4, r4, #1
   11ac2:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11ac4:	60fe      	str	r6, [r7, #12]
		reg_index++;
   11ac6:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11ac8:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   11aca:	3201      	adds	r2, #1
   11acc:	300c      	adds	r0, #12
   11ace:	e7b3      	b.n	11a38 <mpu_configure_regions+0x8>
   11ad0:	e000ed90 	.word	0xe000ed90
   11ad4:	0001c9c0 	.word	0x0001c9c0
   11ad8:	0001c940 	.word	0x0001c940
   11adc:	0001e3c7 	.word	0x0001e3c7
   11ae0:	0001e3ea 	.word	0x0001e3ea

00011ae4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11ae4:	4b03      	ldr	r3, [pc, #12]	; (11af4 <arm_core_mpu_enable+0x10>)
   11ae6:	2205      	movs	r2, #5
   11ae8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   11aea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11aee:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11af2:	4770      	bx	lr
   11af4:	e000ed90 	.word	0xe000ed90

00011af8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11af8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11afc:	4b01      	ldr	r3, [pc, #4]	; (11b04 <arm_core_mpu_disable+0xc>)
   11afe:	2200      	movs	r2, #0
   11b00:	605a      	str	r2, [r3, #4]
}
   11b02:	4770      	bx	lr
   11b04:	e000ed90 	.word	0xe000ed90

00011b08 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11b08:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11b0a:	4d0e      	ldr	r5, [pc, #56]	; (11b44 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   11b0c:	2301      	movs	r3, #1
   11b0e:	782a      	ldrb	r2, [r5, #0]
   11b10:	460c      	mov	r4, r1
   11b12:	f7ff ff8d 	bl	11a30 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11b16:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   11b18:	3016      	adds	r0, #22
   11b1a:	d111      	bne.n	11b40 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11b1c:	f240 1311 	movw	r3, #273	; 0x111
   11b20:	4a09      	ldr	r2, [pc, #36]	; (11b48 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   11b22:	490a      	ldr	r1, [pc, #40]	; (11b4c <arm_core_mpu_configure_static_mpu_regions+0x44>)
   11b24:	480a      	ldr	r0, [pc, #40]	; (11b50 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   11b26:	f008 fed1 	bl	1a8cc <printk>
   11b2a:	4621      	mov	r1, r4
   11b2c:	4809      	ldr	r0, [pc, #36]	; (11b54 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
   11b2e:	f008 fecd 	bl	1a8cc <printk>
			regions_num);
	}
}
   11b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11b36:	4804      	ldr	r0, [pc, #16]	; (11b48 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   11b38:	f240 1111 	movw	r1, #273	; 0x111
   11b3c:	f009 b85f 	b.w	1abfe <assert_post_action>
}
   11b40:	bd38      	pop	{r3, r4, r5, pc}
   11b42:	bf00      	nop
   11b44:	200025b6 	.word	0x200025b6
   11b48:	0001e410 	.word	0x0001e410
   11b4c:	000205d8 	.word	0x000205d8
   11b50:	0001d2dc 	.word	0x0001d2dc
   11b54:	0001e447 	.word	0x0001e447

00011b58 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   11b58:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   11b5a:	4a12      	ldr	r2, [pc, #72]	; (11ba4 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   11b5c:	2300      	movs	r3, #0
   11b5e:	7812      	ldrb	r2, [r2, #0]
   11b60:	460c      	mov	r4, r1
   11b62:	f7ff ff65 	bl	11a30 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   11b66:	f110 0f16 	cmn.w	r0, #22
   11b6a:	d008      	beq.n	11b7e <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
   11b6c:	4b0e      	ldr	r3, [pc, #56]	; (11ba8 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   11b6e:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   11b70:	2807      	cmp	r0, #7
   11b72:	dd00      	ble.n	11b76 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   11b74:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
   11b76:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   11b78:	611a      	str	r2, [r3, #16]
   11b7a:	3001      	adds	r0, #1
   11b7c:	e7f8      	b.n	11b70 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   11b7e:	4a0b      	ldr	r2, [pc, #44]	; (11bac <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   11b80:	490b      	ldr	r1, [pc, #44]	; (11bb0 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   11b82:	480c      	ldr	r0, [pc, #48]	; (11bb4 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   11b84:	f44f 7398 	mov.w	r3, #304	; 0x130
   11b88:	f008 fea0 	bl	1a8cc <printk>
   11b8c:	4621      	mov	r1, r4
   11b8e:	480a      	ldr	r0, [pc, #40]	; (11bb8 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   11b90:	f008 fe9c 	bl	1a8cc <printk>
}
   11b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   11b98:	4804      	ldr	r0, [pc, #16]	; (11bac <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   11b9a:	f44f 7198 	mov.w	r1, #304	; 0x130
   11b9e:	f009 b82e 	b.w	1abfe <assert_post_action>
   11ba2:	bf00      	nop
   11ba4:	200025b6 	.word	0x200025b6
   11ba8:	e000ed90 	.word	0xe000ed90
   11bac:	0001e410 	.word	0x0001e410
   11bb0:	000205d8 	.word	0x000205d8
   11bb4:	0001d2dc 	.word	0x0001d2dc
   11bb8:	0001e473 	.word	0x0001e473

00011bbc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11bbc:	4925      	ldr	r1, [pc, #148]	; (11c54 <z_arm_mpu_init+0x98>)
{
   11bbe:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   11bc0:	680c      	ldr	r4, [r1, #0]
   11bc2:	2c08      	cmp	r4, #8
   11bc4:	d913      	bls.n	11bee <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   11bc6:	f44f 73a4 	mov.w	r3, #328	; 0x148
   11bca:	4a23      	ldr	r2, [pc, #140]	; (11c58 <z_arm_mpu_init+0x9c>)
   11bcc:	4923      	ldr	r1, [pc, #140]	; (11c5c <z_arm_mpu_init+0xa0>)
   11bce:	4824      	ldr	r0, [pc, #144]	; (11c60 <z_arm_mpu_init+0xa4>)
   11bd0:	f008 fe7c 	bl	1a8cc <printk>
   11bd4:	4823      	ldr	r0, [pc, #140]	; (11c64 <z_arm_mpu_init+0xa8>)
   11bd6:	2208      	movs	r2, #8
   11bd8:	4621      	mov	r1, r4
   11bda:	f008 fe77 	bl	1a8cc <printk>
   11bde:	481e      	ldr	r0, [pc, #120]	; (11c58 <z_arm_mpu_init+0x9c>)
   11be0:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11be4:	f009 f80b 	bl	1abfe <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   11be8:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   11bec:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   11bee:	f7ff ff83 	bl	11af8 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11bf2:	6848      	ldr	r0, [r1, #4]
   11bf4:	491c      	ldr	r1, [pc, #112]	; (11c68 <z_arm_mpu_init+0xac>)
   11bf6:	2200      	movs	r2, #0
   11bf8:	4294      	cmp	r4, r2
   11bfa:	f100 000c 	add.w	r0, r0, #12
   11bfe:	d119      	bne.n	11c34 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
   11c00:	4b1a      	ldr	r3, [pc, #104]	; (11c6c <z_arm_mpu_init+0xb0>)
   11c02:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   11c04:	f7ff ff6e 	bl	11ae4 <arm_core_mpu_enable>
	__ASSERT(
   11c08:	680b      	ldr	r3, [r1, #0]
   11c0a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   11c0e:	2b08      	cmp	r3, #8
   11c10:	d00e      	beq.n	11c30 <z_arm_mpu_init+0x74>
   11c12:	4917      	ldr	r1, [pc, #92]	; (11c70 <z_arm_mpu_init+0xb4>)
   11c14:	4a10      	ldr	r2, [pc, #64]	; (11c58 <z_arm_mpu_init+0x9c>)
   11c16:	4812      	ldr	r0, [pc, #72]	; (11c60 <z_arm_mpu_init+0xa4>)
   11c18:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   11c1c:	f008 fe56 	bl	1a8cc <printk>
   11c20:	4814      	ldr	r0, [pc, #80]	; (11c74 <z_arm_mpu_init+0xb8>)
   11c22:	f008 fe53 	bl	1a8cc <printk>
   11c26:	480c      	ldr	r0, [pc, #48]	; (11c58 <z_arm_mpu_init+0x9c>)
   11c28:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   11c2c:	f008 ffe7 	bl	1abfe <assert_post_action>
	return 0;
   11c30:	2000      	movs	r0, #0
   11c32:	e7db      	b.n	11bec <z_arm_mpu_init+0x30>
   11c34:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11c36:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   11c3a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   11c3e:	4313      	orrs	r3, r2
   11c40:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11c44:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11c46:	f850 3c04 	ldr.w	r3, [r0, #-4]
   11c4a:	f043 0301 	orr.w	r3, r3, #1
   11c4e:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11c50:	3201      	adds	r2, #1
   11c52:	e7d1      	b.n	11bf8 <z_arm_mpu_init+0x3c>
   11c54:	0001cc48 	.word	0x0001cc48
   11c58:	0001e410 	.word	0x0001e410
   11c5c:	000205d8 	.word	0x000205d8
   11c60:	0001d2dc 	.word	0x0001d2dc
   11c64:	0001e4a0 	.word	0x0001e4a0
   11c68:	e000ed90 	.word	0xe000ed90
   11c6c:	200025b6 	.word	0x200025b6
   11c70:	0001e4d4 	.word	0x0001e4d4
   11c74:	0001e524 	.word	0x0001e524

00011c78 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   11c78:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   11c7a:	4b0b      	ldr	r3, [pc, #44]	; (11ca8 <malloc_prepare+0x30>)
   11c7c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   11c80:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   11c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   11c88:	d20c      	bcs.n	11ca4 <malloc_prepare+0x2c>
   11c8a:	4908      	ldr	r1, [pc, #32]	; (11cac <malloc_prepare+0x34>)
   11c8c:	4a08      	ldr	r2, [pc, #32]	; (11cb0 <malloc_prepare+0x38>)
   11c8e:	4809      	ldr	r0, [pc, #36]	; (11cb4 <malloc_prepare+0x3c>)
   11c90:	2381      	movs	r3, #129	; 0x81
   11c92:	f008 fe1b 	bl	1a8cc <printk>
   11c96:	4808      	ldr	r0, [pc, #32]	; (11cb8 <malloc_prepare+0x40>)
   11c98:	f008 fe18 	bl	1a8cc <printk>
   11c9c:	4804      	ldr	r0, [pc, #16]	; (11cb0 <malloc_prepare+0x38>)
   11c9e:	2181      	movs	r1, #129	; 0x81
   11ca0:	f008 ffad 	bl	1abfe <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   11ca4:	2000      	movs	r0, #0
   11ca6:	bd08      	pop	{r3, pc}
   11ca8:	20006d60 	.word	0x20006d60
   11cac:	0001e575 	.word	0x0001e575
   11cb0:	0001e545 	.word	0x0001e545
   11cb4:	0001d2dc 	.word	0x0001d2dc
   11cb8:	0001e5bc 	.word	0x0001e5bc

00011cbc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11cbc:	4b01      	ldr	r3, [pc, #4]	; (11cc4 <__stdout_hook_install+0x8>)
   11cbe:	6018      	str	r0, [r3, #0]
}
   11cc0:	4770      	bx	lr
   11cc2:	bf00      	nop
   11cc4:	2000010c 	.word	0x2000010c

00011cc8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   11cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
   11cca:	4f08      	ldr	r7, [pc, #32]	; (11cec <z_impl_zephyr_read_stdin+0x24>)
{
   11ccc:	4606      	mov	r6, r0
   11cce:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
   11cd0:	2400      	movs	r4, #0
   11cd2:	42ac      	cmp	r4, r5
   11cd4:	da08      	bge.n	11ce8 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   11cd6:	683b      	ldr	r3, [r7, #0]
   11cd8:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   11cda:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   11cdc:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   11cde:	f104 0401 	add.w	r4, r4, #1
   11ce2:	d001      	beq.n	11ce8 <z_impl_zephyr_read_stdin+0x20>
   11ce4:	280d      	cmp	r0, #13
   11ce6:	d1f4      	bne.n	11cd2 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   11ce8:	4620      	mov	r0, r4
   11cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11cec:	20000108 	.word	0x20000108

00011cf0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   11cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cf2:	4f0a      	ldr	r7, [pc, #40]	; (11d1c <z_impl_zephyr_write_stdout+0x2c>)
   11cf4:	460d      	mov	r5, r1
   11cf6:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   11cf8:	f1c0 0401 	rsb	r4, r0, #1
   11cfc:	19a3      	adds	r3, r4, r6
   11cfe:	429d      	cmp	r5, r3
   11d00:	dc01      	bgt.n	11d06 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   11d02:	4628      	mov	r0, r5
   11d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   11d06:	7873      	ldrb	r3, [r6, #1]
   11d08:	2b0a      	cmp	r3, #10
   11d0a:	d102      	bne.n	11d12 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11d0c:	683b      	ldr	r3, [r7, #0]
   11d0e:	200d      	movs	r0, #13
   11d10:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   11d12:	683b      	ldr	r3, [r7, #0]
   11d14:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11d18:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11d1a:	e7ef      	b.n	11cfc <z_impl_zephyr_write_stdout+0xc>
   11d1c:	2000010c 	.word	0x2000010c

00011d20 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   11d20:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11d22:	4802      	ldr	r0, [pc, #8]	; (11d2c <_exit+0xc>)
   11d24:	2105      	movs	r1, #5
   11d26:	f7ff ffe3 	bl	11cf0 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   11d2a:	e7fe      	b.n	11d2a <_exit+0xa>
   11d2c:	0001e643 	.word	0x0001e643

00011d30 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   11d30:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   11d32:	4c07      	ldr	r4, [pc, #28]	; (11d50 <_sbrk+0x20>)
   11d34:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11d36:	18c2      	adds	r2, r0, r3
   11d38:	4806      	ldr	r0, [pc, #24]	; (11d54 <_sbrk+0x24>)
   11d3a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   11d3e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   11d42:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11d44:	bf3a      	itte	cc
   11d46:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   11d48:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11d4a:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
   11d4e:	bd10      	pop	{r4, pc}
   11d50:	20000ee8 	.word	0x20000ee8
   11d54:	20006d60 	.word	0x20006d60

00011d58 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   11d58:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11d5a:	4604      	mov	r4, r0
   11d5c:	b958      	cbnz	r0, 11d76 <__retarget_lock_init_recursive+0x1e>
   11d5e:	4912      	ldr	r1, [pc, #72]	; (11da8 <__retarget_lock_init_recursive+0x50>)
   11d60:	4812      	ldr	r0, [pc, #72]	; (11dac <__retarget_lock_init_recursive+0x54>)
   11d62:	4a13      	ldr	r2, [pc, #76]	; (11db0 <__retarget_lock_init_recursive+0x58>)
   11d64:	f240 1377 	movw	r3, #375	; 0x177
   11d68:	f008 fdb0 	bl	1a8cc <printk>
   11d6c:	4810      	ldr	r0, [pc, #64]	; (11db0 <__retarget_lock_init_recursive+0x58>)
   11d6e:	f240 1177 	movw	r1, #375	; 0x177
   11d72:	f008 ff44 	bl	1abfe <assert_post_action>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   11d76:	2014      	movs	r0, #20
   11d78:	f007 fb6a 	bl	19450 <malloc>
   11d7c:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11d7e:	b970      	cbnz	r0, 11d9e <__retarget_lock_init_recursive+0x46>
   11d80:	490c      	ldr	r1, [pc, #48]	; (11db4 <__retarget_lock_init_recursive+0x5c>)
   11d82:	4a0b      	ldr	r2, [pc, #44]	; (11db0 <__retarget_lock_init_recursive+0x58>)
   11d84:	4809      	ldr	r0, [pc, #36]	; (11dac <__retarget_lock_init_recursive+0x54>)
   11d86:	f240 137f 	movw	r3, #383	; 0x17f
   11d8a:	f008 fd9f 	bl	1a8cc <printk>
   11d8e:	480a      	ldr	r0, [pc, #40]	; (11db8 <__retarget_lock_init_recursive+0x60>)
   11d90:	f008 fd9c 	bl	1a8cc <printk>
   11d94:	4806      	ldr	r0, [pc, #24]	; (11db0 <__retarget_lock_init_recursive+0x58>)
   11d96:	f240 117f 	movw	r1, #383	; 0x17f
   11d9a:	f008 ff30 	bl	1abfe <assert_post_action>

	k_mutex_init((struct k_mutex *)*lock);
   11d9e:	6820      	ldr	r0, [r4, #0]
}
   11da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   11da4:	f009 bdf3 	b.w	1b98e <z_impl_k_mutex_init>
   11da8:	0001e64a 	.word	0x0001e64a
   11dac:	0001d2dc 	.word	0x0001d2dc
   11db0:	0001e545 	.word	0x0001e545
   11db4:	0001e649 	.word	0x0001e649
   11db8:	0001e685 	.word	0x0001e685

00011dbc <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   11dbc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11dbe:	4604      	mov	r4, r0
   11dc0:	b958      	cbnz	r0, 11dda <__retarget_lock_acquire_recursive+0x1e>
   11dc2:	490a      	ldr	r1, [pc, #40]	; (11dec <__retarget_lock_acquire_recursive+0x30>)
   11dc4:	480a      	ldr	r0, [pc, #40]	; (11df0 <__retarget_lock_acquire_recursive+0x34>)
   11dc6:	4a0b      	ldr	r2, [pc, #44]	; (11df4 <__retarget_lock_acquire_recursive+0x38>)
   11dc8:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   11dcc:	f008 fd7e 	bl	1a8cc <printk>
   11dd0:	4808      	ldr	r0, [pc, #32]	; (11df4 <__retarget_lock_acquire_recursive+0x38>)
   11dd2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   11dd6:	f008 ff12 	bl	1abfe <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   11dda:	f04f 32ff 	mov.w	r2, #4294967295
   11dde:	4620      	mov	r0, r4
   11de0:	f04f 33ff 	mov.w	r3, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   11de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11de8:	f004 ba50 	b.w	1628c <z_impl_k_mutex_lock>
   11dec:	0001e64a 	.word	0x0001e64a
   11df0:	0001d2dc 	.word	0x0001d2dc
   11df4:	0001e545 	.word	0x0001e545

00011df8 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   11df8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11dfa:	4604      	mov	r4, r0
   11dfc:	b958      	cbnz	r0, 11e16 <__retarget_lock_release_recursive+0x1e>
   11dfe:	4908      	ldr	r1, [pc, #32]	; (11e20 <__retarget_lock_release_recursive+0x28>)
   11e00:	4808      	ldr	r0, [pc, #32]	; (11e24 <__retarget_lock_release_recursive+0x2c>)
   11e02:	4a09      	ldr	r2, [pc, #36]	; (11e28 <__retarget_lock_release_recursive+0x30>)
   11e04:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   11e08:	f008 fd60 	bl	1a8cc <printk>
   11e0c:	4806      	ldr	r0, [pc, #24]	; (11e28 <__retarget_lock_release_recursive+0x30>)
   11e0e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   11e12:	f008 fef4 	bl	1abfe <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   11e16:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
   11e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11e1c:	f004 bb36 	b.w	1648c <z_impl_k_mutex_unlock>
   11e20:	0001e64a 	.word	0x0001e64a
   11e24:	0001d2dc 	.word	0x0001d2dc
   11e28:	0001e545 	.word	0x0001e545

00011e2c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11e2c:	b508      	push	{r3, lr}
   11e2e:	211d      	movs	r1, #29
   11e30:	4804      	ldr	r0, [pc, #16]	; (11e44 <__chk_fail+0x18>)
   11e32:	f7ff ff5d 	bl	11cf0 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11e36:	4040      	eors	r0, r0
   11e38:	f380 8811 	msr	BASEPRI, r0
   11e3c:	f04f 0003 	mov.w	r0, #3
   11e40:	df02      	svc	2
	CODE_UNREACHABLE;
   11e42:	bf00      	nop
   11e44:	0001e6a8 	.word	0x0001e6a8

00011e48 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   11e48:	f04f 0320 	mov.w	r3, #32
   11e4c:	f3ef 8111 	mrs	r1, BASEPRI
   11e50:	f383 8812 	msr	BASEPRI_MAX, r3
   11e54:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   11e58:	4a0f      	ldr	r2, [pc, #60]	; (11e98 <nordicsemi_nrf52_init+0x50>)
   11e5a:	2301      	movs	r3, #1
   11e5c:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   11e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11e64:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   11e68:	4a0c      	ldr	r2, [pc, #48]	; (11e9c <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   11e6a:	6812      	ldr	r2, [r2, #0]
   11e6c:	2a08      	cmp	r2, #8
   11e6e:	d108      	bne.n	11e82 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   11e70:	4a0b      	ldr	r2, [pc, #44]	; (11ea0 <nordicsemi_nrf52_init+0x58>)
   11e72:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
   11e74:	2a05      	cmp	r2, #5
   11e76:	d804      	bhi.n	11e82 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   11e78:	480a      	ldr	r0, [pc, #40]	; (11ea4 <nordicsemi_nrf52_init+0x5c>)
   11e7a:	5c82      	ldrb	r2, [r0, r2]
   11e7c:	b10a      	cbz	r2, 11e82 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   11e7e:	4a0a      	ldr	r2, [pc, #40]	; (11ea8 <nordicsemi_nrf52_init+0x60>)
   11e80:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   11e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11e86:	2201      	movs	r2, #1
   11e88:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   11e8c:	f381 8811 	msr	BASEPRI, r1
   11e90:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   11e94:	2000      	movs	r0, #0
   11e96:	4770      	bx	lr
   11e98:	4001e000 	.word	0x4001e000
   11e9c:	10000130 	.word	0x10000130
   11ea0:	10000134 	.word	0x10000134
   11ea4:	0001e6d9 	.word	0x0001e6d9
   11ea8:	40000638 	.word	0x40000638

00011eac <sys_arch_reboot>:
    *p_gpregret = val;
   11eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11eb0:	b2c0      	uxtb	r0, r0
   11eb2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   11eb6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11eba:	4905      	ldr	r1, [pc, #20]	; (11ed0 <sys_arch_reboot+0x24>)
   11ebc:	4b05      	ldr	r3, [pc, #20]	; (11ed4 <sys_arch_reboot+0x28>)
   11ebe:	68ca      	ldr	r2, [r1, #12]
   11ec0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11ec4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11ec6:	60cb      	str	r3, [r1, #12]
   11ec8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11ecc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11ece:	e7fd      	b.n	11ecc <sys_arch_reboot+0x20>
   11ed0:	e000ed00 	.word	0xe000ed00
   11ed4:	05fa0004 	.word	0x05fa0004

00011ed8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   11ed8:	b120      	cbz	r0, 11ee4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   11eda:	4b03      	ldr	r3, [pc, #12]	; (11ee8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   11edc:	0180      	lsls	r0, r0, #6
   11ede:	f043 0301 	orr.w	r3, r3, #1
   11ee2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   11ee4:	4770      	bx	lr
   11ee6:	bf00      	nop
   11ee8:	0001ca20 	.word	0x0001ca20

00011eec <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   11ef0:	4c0e      	ldr	r4, [pc, #56]	; (11f2c <onoff_start+0x40>)
   11ef2:	1b05      	subs	r5, r0, r4
   11ef4:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   11ef8:	250c      	movs	r5, #12
   11efa:	435d      	muls	r5, r3
{
   11efc:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   11efe:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   11f02:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   11f04:	4420      	add	r0, r4
   11f06:	2140      	movs	r1, #64	; 0x40
   11f08:	f009 f80d 	bl	1af26 <set_starting_state>
	if (err < 0) {
   11f0c:	1e01      	subs	r1, r0, #0
   11f0e:	db08      	blt.n	11f22 <onoff_start+0x36>
	subdata->cb = cb;
   11f10:	4b07      	ldr	r3, [pc, #28]	; (11f30 <onoff_start+0x44>)
   11f12:	442c      	add	r4, r5
	subdata->user_data = user_data;
   11f14:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   11f18:	4b06      	ldr	r3, [pc, #24]	; (11f34 <onoff_start+0x48>)
   11f1a:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   11f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   11f20:	4718      	bx	r3
		notify(mgr, err);
   11f22:	4638      	mov	r0, r7
   11f24:	4633      	mov	r3, r6
}
   11f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   11f2a:	4718      	bx	r3
   11f2c:	20000efc 	.word	0x20000efc
   11f30:	0001af89 	.word	0x0001af89
   11f34:	0001cc80 	.word	0x0001cc80

00011f38 <get_status>:
{
   11f38:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   11f3a:	b2cc      	uxtb	r4, r1
   11f3c:	2c01      	cmp	r4, #1
{
   11f3e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   11f40:	d909      	bls.n	11f56 <get_status+0x1e>
   11f42:	4909      	ldr	r1, [pc, #36]	; (11f68 <get_status+0x30>)
   11f44:	4809      	ldr	r0, [pc, #36]	; (11f6c <get_status+0x34>)
   11f46:	4a0a      	ldr	r2, [pc, #40]	; (11f70 <get_status+0x38>)
   11f48:	2379      	movs	r3, #121	; 0x79
   11f4a:	f008 fcbf 	bl	1a8cc <printk>
   11f4e:	4808      	ldr	r0, [pc, #32]	; (11f70 <get_status+0x38>)
   11f50:	2179      	movs	r1, #121	; 0x79
   11f52:	f008 fe54 	bl	1abfe <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   11f56:	692b      	ldr	r3, [r5, #16]
   11f58:	210c      	movs	r1, #12
   11f5a:	fb04 3401 	mla	r4, r4, r1, r3
   11f5e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   11f60:	f000 0007 	and.w	r0, r0, #7
   11f64:	bd38      	pop	{r3, r4, r5, pc}
   11f66:	bf00      	nop
   11f68:	0001e71c 	.word	0x0001e71c
   11f6c:	0001d2dc 	.word	0x0001d2dc
   11f70:	0001e6df 	.word	0x0001e6df

00011f74 <stop>:
{
   11f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f76:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   11f78:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   11f7a:	6907      	ldr	r7, [r0, #16]
{
   11f7c:	4605      	mov	r5, r0
   11f7e:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   11f80:	d90b      	bls.n	11f9a <stop+0x26>
   11f82:	4919      	ldr	r1, [pc, #100]	; (11fe8 <stop+0x74>)
   11f84:	4819      	ldr	r0, [pc, #100]	; (11fec <stop+0x78>)
   11f86:	4a1a      	ldr	r2, [pc, #104]	; (11ff0 <stop+0x7c>)
   11f88:	f240 134d 	movw	r3, #333	; 0x14d
   11f8c:	f008 fc9e 	bl	1a8cc <printk>
   11f90:	4817      	ldr	r0, [pc, #92]	; (11ff0 <stop+0x7c>)
   11f92:	f240 114d 	movw	r1, #333	; 0x14d
   11f96:	f008 fe32 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   11f9a:	f04f 0320 	mov.w	r3, #32
   11f9e:	f3ef 8211 	mrs	r2, BASEPRI
   11fa2:	f383 8812 	msr	BASEPRI_MAX, r3
   11fa6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11faa:	230c      	movs	r3, #12
   11fac:	fb03 7104 	mla	r1, r3, r4, r7
   11fb0:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   11fb2:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   11fb6:	d001      	beq.n	11fbc <stop+0x48>
   11fb8:	428e      	cmp	r6, r1
   11fba:	d111      	bne.n	11fe0 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   11fbc:	fb03 7304 	mla	r3, r3, r4, r7
   11fc0:	2101      	movs	r1, #1
   11fc2:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   11fc4:	2000      	movs	r0, #0
	__asm__ volatile(
   11fc6:	f382 8811 	msr	BASEPRI, r2
   11fca:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   11fce:	b930      	cbnz	r0, 11fde <stop+0x6a>
	get_sub_config(dev, type)->stop();
   11fd0:	6869      	ldr	r1, [r5, #4]
   11fd2:	230c      	movs	r3, #12
   11fd4:	fb03 1404 	mla	r4, r3, r4, r1
   11fd8:	6863      	ldr	r3, [r4, #4]
   11fda:	4798      	blx	r3
	return 0;
   11fdc:	2000      	movs	r0, #0
}
   11fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   11fe0:	f04f 30ff 	mov.w	r0, #4294967295
   11fe4:	e7ef      	b.n	11fc6 <stop+0x52>
   11fe6:	bf00      	nop
   11fe8:	0001e71c 	.word	0x0001e71c
   11fec:	0001d2dc 	.word	0x0001d2dc
   11ff0:	0001e6df 	.word	0x0001e6df

00011ff4 <onoff_stop>:
{
   11ff4:	b570      	push	{r4, r5, r6, lr}
   11ff6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   11ff8:	4906      	ldr	r1, [pc, #24]	; (12014 <onoff_stop+0x20>)
   11ffa:	1a41      	subs	r1, r0, r1
{
   11ffc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   11ffe:	1149      	asrs	r1, r1, #5
   12000:	4805      	ldr	r0, [pc, #20]	; (12018 <onoff_stop+0x24>)
   12002:	2240      	movs	r2, #64	; 0x40
   12004:	f7ff ffb6 	bl	11f74 <stop>
	notify(mgr, res);
   12008:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1200a:	4601      	mov	r1, r0
	notify(mgr, res);
   1200c:	4620      	mov	r0, r4
}
   1200e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   12012:	4718      	bx	r3
   12014:	20000efc 	.word	0x20000efc
   12018:	0001c730 	.word	0x0001c730

0001201c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1201c:	2200      	movs	r2, #0
{
   1201e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12020:	2101      	movs	r1, #1
{
   12022:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12024:	4610      	mov	r0, r2
   12026:	f7ff f895 	bl	11154 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1202a:	2000      	movs	r0, #0
   1202c:	f7ff f860 	bl	110f0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   12030:	480f      	ldr	r0, [pc, #60]	; (12070 <clk_init+0x54>)
   12032:	f002 fcf7 	bl	14a24 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   12036:	4b0f      	ldr	r3, [pc, #60]	; (12074 <clk_init+0x58>)
   12038:	4298      	cmp	r0, r3
   1203a:	d115      	bne.n	12068 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1203c:	f002 fd16 	bl	14a6c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   12040:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   12042:	490d      	ldr	r1, [pc, #52]	; (12078 <clk_init+0x5c>)
   12044:	4630      	mov	r0, r6
   12046:	f008 fc8f 	bl	1a968 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1204a:	2800      	cmp	r0, #0
   1204c:	db0b      	blt.n	12066 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1204e:	2501      	movs	r5, #1
   12050:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   12052:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12054:	4908      	ldr	r1, [pc, #32]	; (12078 <clk_init+0x5c>)
   12056:	f104 0020 	add.w	r0, r4, #32
   1205a:	f008 fc85 	bl	1a968 <onoff_manager_init>
		if (err < 0) {
   1205e:	2800      	cmp	r0, #0
   12060:	db01      	blt.n	12066 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12062:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   12064:	2000      	movs	r0, #0
}
   12066:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   12068:	f06f 0004 	mvn.w	r0, #4
   1206c:	e7fb      	b.n	12066 <clk_init+0x4a>
   1206e:	bf00      	nop
   12070:	000120b1 	.word	0x000120b1
   12074:	0bad0000 	.word	0x0bad0000
   12078:	0001cc98 	.word	0x0001cc98

0001207c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1207c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1207e:	230c      	movs	r3, #12
   12080:	4809      	ldr	r0, [pc, #36]	; (120a8 <clkstarted_handle.constprop.0+0x2c>)
   12082:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   12084:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   12086:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   12088:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1208c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1208e:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   12090:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   12092:	4418      	add	r0, r3
   12094:	f008 ff65 	bl	1af62 <set_on_state>
	if (callback) {
   12098:	b12d      	cbz	r5, 120a6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1209a:	4632      	mov	r2, r6
   1209c:	462b      	mov	r3, r5
   1209e:	4803      	ldr	r0, [pc, #12]	; (120ac <clkstarted_handle.constprop.0+0x30>)
}
   120a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   120a4:	4718      	bx	r3
}
   120a6:	bd70      	pop	{r4, r5, r6, pc}
   120a8:	20000efc 	.word	0x20000efc
   120ac:	0001c730 	.word	0x0001c730

000120b0 <clock_event_handler>:
	switch (event) {
   120b0:	2801      	cmp	r0, #1
{
   120b2:	b508      	push	{r3, lr}
	switch (event) {
   120b4:	d006      	beq.n	120c4 <clock_event_handler+0x14>
   120b6:	2803      	cmp	r0, #3
   120b8:	d008      	beq.n	120cc <clock_event_handler+0x1c>
   120ba:	b9a8      	cbnz	r0, 120e8 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   120bc:	4b10      	ldr	r3, [pc, #64]	; (12100 <clock_event_handler+0x50>)
   120be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   120c0:	075b      	lsls	r3, r3, #29
   120c2:	d11b      	bne.n	120fc <clock_event_handler+0x4c>
}
   120c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   120c8:	f7ff bfd8 	b.w	1207c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   120cc:	490d      	ldr	r1, [pc, #52]	; (12104 <clock_event_handler+0x54>)
   120ce:	4a0e      	ldr	r2, [pc, #56]	; (12108 <clock_event_handler+0x58>)
   120d0:	480e      	ldr	r0, [pc, #56]	; (1210c <clock_event_handler+0x5c>)
   120d2:	f240 235e 	movw	r3, #606	; 0x25e
   120d6:	f008 fbf9 	bl	1a8cc <printk>
   120da:	f240 215e 	movw	r1, #606	; 0x25e
}
   120de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   120e2:	4809      	ldr	r0, [pc, #36]	; (12108 <clock_event_handler+0x58>)
   120e4:	f008 bd8b 	b.w	1abfe <assert_post_action>
   120e8:	4906      	ldr	r1, [pc, #24]	; (12104 <clock_event_handler+0x54>)
   120ea:	4a07      	ldr	r2, [pc, #28]	; (12108 <clock_event_handler+0x58>)
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <clock_event_handler+0x5c>)
   120ee:	f240 2362 	movw	r3, #610	; 0x262
   120f2:	f008 fbeb 	bl	1a8cc <printk>
   120f6:	f240 2162 	movw	r1, #610	; 0x262
   120fa:	e7f0      	b.n	120de <clock_event_handler+0x2e>
}
   120fc:	bd08      	pop	{r3, pc}
   120fe:	bf00      	nop
   12100:	20000efc 	.word	0x20000efc
   12104:	000205d8 	.word	0x000205d8
   12108:	0001e6df 	.word	0x0001e6df
   1210c:	0001d2dc 	.word	0x0001d2dc

00012110 <generic_hfclk_start>:
{
   12110:	b508      	push	{r3, lr}
	__asm__ volatile(
   12112:	f04f 0320 	mov.w	r3, #32
   12116:	f3ef 8111 	mrs	r1, BASEPRI
   1211a:	f383 8812 	msr	BASEPRI_MAX, r3
   1211e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   12122:	4a12      	ldr	r2, [pc, #72]	; (1216c <generic_hfclk_start+0x5c>)
   12124:	6813      	ldr	r3, [r2, #0]
   12126:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1212a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1212e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   12130:	d00c      	beq.n	1214c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12132:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12136:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1213a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1213e:	f013 0301 	ands.w	r3, r3, #1
   12142:	d003      	beq.n	1214c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   12144:	480a      	ldr	r0, [pc, #40]	; (12170 <generic_hfclk_start+0x60>)
   12146:	f008 ff0c 	bl	1af62 <set_on_state>
			already_started = true;
   1214a:	2301      	movs	r3, #1
	__asm__ volatile(
   1214c:	f381 8811 	msr	BASEPRI, r1
   12150:	f3bf 8f6f 	isb	sy
	if (already_started) {
   12154:	b123      	cbz	r3, 12160 <generic_hfclk_start+0x50>
}
   12156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1215a:	2000      	movs	r0, #0
   1215c:	f7ff bf8e 	b.w	1207c <clkstarted_handle.constprop.0>
}
   12160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   12164:	2001      	movs	r0, #1
   12166:	f002 bca1 	b.w	14aac <nrfx_clock_start>
   1216a:	bf00      	nop
   1216c:	20000f54 	.word	0x20000f54
   12170:	20000f44 	.word	0x20000f44

00012174 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12174:	4b09      	ldr	r3, [pc, #36]	; (1219c <generic_hfclk_stop+0x28>)
   12176:	f3bf 8f5b 	dmb	ish
   1217a:	e853 2f00 	ldrex	r2, [r3]
   1217e:	f022 0102 	bic.w	r1, r2, #2
   12182:	e843 1000 	strex	r0, r1, [r3]
   12186:	2800      	cmp	r0, #0
   12188:	d1f7      	bne.n	1217a <generic_hfclk_stop+0x6>
   1218a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1218e:	07d3      	lsls	r3, r2, #31
   12190:	d402      	bmi.n	12198 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   12192:	2001      	movs	r0, #1
   12194:	f002 bcde 	b.w	14b54 <nrfx_clock_stop>
}
   12198:	4770      	bx	lr
   1219a:	bf00      	nop
   1219c:	20000f54 	.word	0x20000f54

000121a0 <api_blocking_start>:
{
   121a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   121a2:	2200      	movs	r2, #0
   121a4:	2301      	movs	r3, #1
   121a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   121aa:	4a09      	ldr	r2, [pc, #36]	; (121d0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   121ac:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   121b0:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   121b2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   121b6:	f008 fef9 	bl	1afac <api_start>
	if (err < 0) {
   121ba:	2800      	cmp	r0, #0
   121bc:	db05      	blt.n	121ca <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   121be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   121c2:	2300      	movs	r3, #0
   121c4:	4668      	mov	r0, sp
   121c6:	f004 fa67 	bl	16698 <z_impl_k_sem_take>
}
   121ca:	b005      	add	sp, #20
   121cc:	f85d fb04 	ldr.w	pc, [sp], #4
   121d0:	0001afa7 	.word	0x0001afa7

000121d4 <z_nrf_clock_control_lf_on>:
{
   121d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   121d8:	4949      	ldr	r1, [pc, #292]	; (12300 <z_nrf_clock_control_lf_on+0x12c>)
   121da:	f3bf 8f5b 	dmb	ish
   121de:	4605      	mov	r5, r0
   121e0:	2201      	movs	r2, #1
   121e2:	e851 3f00 	ldrex	r3, [r1]
   121e6:	e841 2000 	strex	r0, r2, [r1]
   121ea:	2800      	cmp	r0, #0
   121ec:	d1f9      	bne.n	121e2 <z_nrf_clock_control_lf_on+0xe>
   121ee:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   121f2:	b9a3      	cbnz	r3, 1221e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   121f4:	4943      	ldr	r1, [pc, #268]	; (12304 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
   121f6:	4844      	ldr	r0, [pc, #272]	; (12308 <z_nrf_clock_control_lf_on+0x134>)
   121f8:	604b      	str	r3, [r1, #4]
   121fa:	60cb      	str	r3, [r1, #12]
   121fc:	608a      	str	r2, [r1, #8]
   121fe:	f7fd fa33 	bl	f668 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   12202:	2800      	cmp	r0, #0
   12204:	da0b      	bge.n	1221e <z_nrf_clock_control_lf_on+0x4a>
   12206:	4941      	ldr	r1, [pc, #260]	; (1230c <z_nrf_clock_control_lf_on+0x138>)
   12208:	4841      	ldr	r0, [pc, #260]	; (12310 <z_nrf_clock_control_lf_on+0x13c>)
   1220a:	4a42      	ldr	r2, [pc, #264]	; (12314 <z_nrf_clock_control_lf_on+0x140>)
   1220c:	f44f 7308 	mov.w	r3, #544	; 0x220
   12210:	f008 fb5c 	bl	1a8cc <printk>
   12214:	483f      	ldr	r0, [pc, #252]	; (12314 <z_nrf_clock_control_lf_on+0x140>)
   12216:	f44f 7108 	mov.w	r1, #544	; 0x220
   1221a:	f008 fcf0 	bl	1abfe <assert_post_action>
	switch (start_mode) {
   1221e:	b3ad      	cbz	r5, 1228c <z_nrf_clock_control_lf_on+0xb8>
   12220:	1e6b      	subs	r3, r5, #1
   12222:	2b01      	cmp	r3, #1
   12224:	d856      	bhi.n	122d4 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   12226:	2d01      	cmp	r5, #1
   12228:	d107      	bne.n	1223a <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1222a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1222e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   12232:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   12236:	2b01      	cmp	r3, #1
   12238:	d028      	beq.n	1228c <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1223a:	f009 fb94 	bl	1b966 <k_is_in_isr>
   1223e:	4604      	mov	r4, r0
   12240:	b918      	cbnz	r0, 1224a <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
   12242:	4b35      	ldr	r3, [pc, #212]	; (12318 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
   12244:	781b      	ldrb	r3, [r3, #0]
   12246:	2b00      	cmp	r3, #0
   12248:	d152      	bne.n	122f0 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
   1224a:	f04f 0320 	mov.w	r3, #32
   1224e:	f3ef 8611 	mrs	r6, BASEPRI
   12252:	f383 8812 	msr	BASEPRI_MAX, r3
   12256:	f3bf 8f6f 	isb	sy
   1225a:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1225c:	4f2f      	ldr	r7, [pc, #188]	; (1231c <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1225e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 12324 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12262:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 12328 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1226a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1226e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   12272:	03d2      	lsls	r2, r2, #15
   12274:	d50c      	bpl.n	12290 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   12276:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1227a:	2b01      	cmp	r3, #1
   1227c:	d001      	beq.n	12282 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1227e:	2d01      	cmp	r5, #1
   12280:	d106      	bne.n	12290 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
   12282:	b30c      	cbz	r4, 122c8 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
   12284:	f386 8811 	msr	BASEPRI, r6
   12288:	f3bf 8f6f 	isb	sy
}
   1228c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   12290:	b1ac      	cbz	r4, 122be <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   12292:	4630      	mov	r0, r6
   12294:	f7fe feea 	bl	1106c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   12298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1229c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   122a0:	2b00      	cmp	r3, #0
   122a2:	d1e0      	bne.n	12266 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   122a4:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   122a6:	2900      	cmp	r1, #0
   122a8:	d0dd      	beq.n	12266 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   122aa:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   122ac:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   122ae:	2301      	movs	r3, #1
   122b0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   122b4:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   122b8:	f8c9 3000 	str.w	r3, [r9]
}
   122bc:	e7d3      	b.n	12266 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
   122be:	2100      	movs	r1, #0
   122c0:	2021      	movs	r0, #33	; 0x21
   122c2:	f005 ff31 	bl	18128 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   122c6:	e7e7      	b.n	12298 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
   122c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   122cc:	2202      	movs	r2, #2
   122ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   122d2:	e7db      	b.n	1228c <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
   122d4:	4912      	ldr	r1, [pc, #72]	; (12320 <z_nrf_clock_control_lf_on+0x14c>)
   122d6:	480e      	ldr	r0, [pc, #56]	; (12310 <z_nrf_clock_control_lf_on+0x13c>)
   122d8:	4a0e      	ldr	r2, [pc, #56]	; (12314 <z_nrf_clock_control_lf_on+0x140>)
   122da:	f240 2332 	movw	r3, #562	; 0x232
   122de:	f008 faf5 	bl	1a8cc <printk>
}
   122e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   122e6:	480b      	ldr	r0, [pc, #44]	; (12314 <z_nrf_clock_control_lf_on+0x140>)
   122e8:	f240 2132 	movw	r1, #562	; 0x232
   122ec:	f008 bc87 	b.w	1abfe <assert_post_action>
    p_reg->INTENCLR = mask;
   122f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   122f4:	2202      	movs	r2, #2
   122f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   122fa:	4606      	mov	r6, r0
}
   122fc:	e7ae      	b.n	1225c <z_nrf_clock_control_lf_on+0x88>
   122fe:	bf00      	nop
   12300:	20000f58 	.word	0x20000f58
   12304:	20000eec 	.word	0x20000eec
   12308:	20000f1c 	.word	0x20000f1c
   1230c:	0001e740 	.word	0x0001e740
   12310:	0001d2dc 	.word	0x0001d2dc
   12314:	0001e6df 	.word	0x0001e6df
   12318:	200029ca 	.word	0x200029ca
   1231c:	40000104 	.word	0x40000104
   12320:	000205d8 	.word	0x000205d8
   12324:	e000e100 	.word	0xe000e100
   12328:	40000008 	.word	0x40000008

0001232c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1232c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1232e:	4c04      	ldr	r4, [pc, #16]	; (12340 <rtt_console_init+0x14>)
   12330:	4620      	mov	r0, r4
   12332:	f7fc ff67 	bl	f204 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   12336:	4620      	mov	r0, r4
   12338:	f7ff fcc0 	bl	11cbc <__stdout_hook_install>

	return 0;
}
   1233c:	2000      	movs	r0, #0
   1233e:	bd10      	pop	{r4, pc}
   12340:	00012345 	.word	0x00012345

00012344 <rtt_console_out>:
{
   12344:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   12348:	f8df 8060 	ldr.w	r8, [pc, #96]	; 123ac <rtt_console_out+0x68>
   1234c:	4e16      	ldr	r6, [pc, #88]	; (123a8 <rtt_console_out+0x64>)
	char c = (char)character;
   1234e:	f88d 0007 	strb.w	r0, [sp, #7]
{
   12352:	4604      	mov	r4, r0
	char c = (char)character;
   12354:	2503      	movs	r5, #3
   12356:	f04f 33ff 	mov.w	r3, #4294967295
   1235a:	f04f 32ff 	mov.w	r2, #4294967295
   1235e:	4640      	mov	r0, r8
   12360:	f003 ff94 	bl	1628c <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   12364:	2201      	movs	r2, #1
   12366:	f10d 0107 	add.w	r1, sp, #7
   1236a:	2000      	movs	r0, #0
   1236c:	f003 fb2c 	bl	159c8 <SEGGER_RTT_WriteNoLock>
   12370:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   12372:	4640      	mov	r0, r8
   12374:	f004 f88a 	bl	1648c <z_impl_k_mutex_unlock>
		if (cnt) {
   12378:	b12f      	cbz	r7, 12386 <rtt_console_out+0x42>
			host_present = true;
   1237a:	2301      	movs	r3, #1
   1237c:	7033      	strb	r3, [r6, #0]
}
   1237e:	4620      	mov	r0, r4
   12380:	b002      	add	sp, #8
   12382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   12386:	7833      	ldrb	r3, [r6, #0]
   12388:	2b00      	cmp	r3, #0
   1238a:	d0f8      	beq.n	1237e <rtt_console_out+0x3a>
			if (max_cnt) {
   1238c:	3d01      	subs	r5, #1
   1238e:	d008      	beq.n	123a2 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   12390:	f009 fae9 	bl	1b966 <k_is_in_isr>
   12394:	2800      	cmp	r0, #0
   12396:	d1de      	bne.n	12356 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   12398:	2100      	movs	r1, #0
   1239a:	2042      	movs	r0, #66	; 0x42
   1239c:	f005 fec4 	bl	18128 <z_impl_k_sleep>
   123a0:	e7d9      	b.n	12356 <rtt_console_out+0x12>
				host_present = false;
   123a2:	7035      	strb	r5, [r6, #0]
   123a4:	e7eb      	b.n	1237e <rtt_console_out+0x3a>
   123a6:	bf00      	nop
   123a8:	200025b7 	.word	0x200025b7
   123ac:	200004e0 	.word	0x200004e0

000123b0 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   123b0:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   123b2:	6905      	ldr	r5, [r0, #16]
{
   123b4:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   123b6:	460c      	mov	r4, r1
   123b8:	b961      	cbnz	r1, 123d4 <gpio_nrfx_manage_callback+0x24>
   123ba:	4922      	ldr	r1, [pc, #136]	; (12444 <gpio_nrfx_manage_callback+0x94>)
   123bc:	4a22      	ldr	r2, [pc, #136]	; (12448 <gpio_nrfx_manage_callback+0x98>)
   123be:	4823      	ldr	r0, [pc, #140]	; (1244c <gpio_nrfx_manage_callback+0x9c>)
   123c0:	2324      	movs	r3, #36	; 0x24
   123c2:	f008 fa83 	bl	1a8cc <printk>
   123c6:	4822      	ldr	r0, [pc, #136]	; (12450 <gpio_nrfx_manage_callback+0xa0>)
   123c8:	f008 fa80 	bl	1a8cc <printk>
   123cc:	481e      	ldr	r0, [pc, #120]	; (12448 <gpio_nrfx_manage_callback+0x98>)
   123ce:	2124      	movs	r1, #36	; 0x24
   123d0:	f008 fc15 	bl	1abfe <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   123d4:	6863      	ldr	r3, [r4, #4]
   123d6:	b963      	cbnz	r3, 123f2 <gpio_nrfx_manage_callback+0x42>
   123d8:	491e      	ldr	r1, [pc, #120]	; (12454 <gpio_nrfx_manage_callback+0xa4>)
   123da:	4a1b      	ldr	r2, [pc, #108]	; (12448 <gpio_nrfx_manage_callback+0x98>)
   123dc:	481b      	ldr	r0, [pc, #108]	; (1244c <gpio_nrfx_manage_callback+0x9c>)
   123de:	2325      	movs	r3, #37	; 0x25
   123e0:	f008 fa74 	bl	1a8cc <printk>
   123e4:	481c      	ldr	r0, [pc, #112]	; (12458 <gpio_nrfx_manage_callback+0xa8>)
   123e6:	f008 fa71 	bl	1a8cc <printk>
   123ea:	4817      	ldr	r0, [pc, #92]	; (12448 <gpio_nrfx_manage_callback+0x98>)
   123ec:	2125      	movs	r1, #37	; 0x25
   123ee:	f008 fc06 	bl	1abfe <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   123f2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   123f4:	b15b      	cbz	r3, 1240e <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   123f6:	2200      	movs	r2, #0
   123f8:	429c      	cmp	r4, r3
   123fa:	d113      	bne.n	12424 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   123fc:	6823      	ldr	r3, [r4, #0]
   123fe:	b95a      	cbnz	r2, 12418 <gpio_nrfx_manage_callback+0x68>
   12400:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   12402:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   12404:	4294      	cmp	r4, r2
   12406:	d100      	bne.n	1240a <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   12408:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1240a:	2300      	movs	r3, #0
   1240c:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1240e:	b976      	cbnz	r6, 1242e <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   12410:	2000      	movs	r0, #0
				     callback, set);
}
   12412:	bd70      	pop	{r4, r5, r6, pc}
   12414:	460b      	mov	r3, r1
   12416:	e7ef      	b.n	123f8 <gpio_nrfx_manage_callback+0x48>
   12418:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1241a:	68ab      	ldr	r3, [r5, #8]
   1241c:	429c      	cmp	r4, r3
	list->tail = node;
   1241e:	bf08      	it	eq
   12420:	60aa      	streq	r2, [r5, #8]
}
   12422:	e7f2      	b.n	1240a <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12424:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12426:	461a      	mov	r2, r3
   12428:	2900      	cmp	r1, #0
   1242a:	d1f3      	bne.n	12414 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1242c:	b13e      	cbz	r6, 1243e <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1242e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   12430:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   12432:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   12434:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   12436:	2800      	cmp	r0, #0
   12438:	d1ea      	bne.n	12410 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1243a:	60ac      	str	r4, [r5, #8]
}
   1243c:	e7e9      	b.n	12412 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1243e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   12442:	e7e6      	b.n	12412 <gpio_nrfx_manage_callback+0x62>
   12444:	0001ec84 	.word	0x0001ec84
   12448:	0001e769 	.word	0x0001e769
   1244c:	0001d2dc 	.word	0x0001d2dc
   12450:	0001e796 	.word	0x0001e796
   12454:	0001e7a5 	.word	0x0001e7a5
   12458:	0001e7b7 	.word	0x0001e7b7

0001245c <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1245c:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   1245e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   12462:	d003      	beq.n	1246c <nrfx_gpio_handler+0x10>
   12464:	2b01      	cmp	r3, #1
   12466:	d036      	beq.n	124d6 <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
   12468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1246c:	4f1b      	ldr	r7, [pc, #108]	; (124dc <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1246e:	693b      	ldr	r3, [r7, #16]
   12470:	685c      	ldr	r4, [r3, #4]
   12472:	2c00      	cmp	r4, #0
   12474:	d0f8      	beq.n	12468 <nrfx_gpio_handler+0xc>
   12476:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   12478:	f8df 806c 	ldr.w	r8, [pc, #108]	; 124e8 <nrfx_gpio_handler+0x8c>
   1247c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 124ec <nrfx_gpio_handler+0x90>
   12480:	f8df a06c 	ldr.w	sl, [pc, #108]	; 124f0 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   12484:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
   12488:	2601      	movs	r6, #1
   1248a:	2d00      	cmp	r5, #0
   1248c:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
   12490:	bf38      	it	cc
   12492:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   12494:	68a3      	ldr	r3, [r4, #8]
   12496:	421e      	tst	r6, r3
   12498:	d014      	beq.n	124c4 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
   1249a:	6863      	ldr	r3, [r4, #4]
   1249c:	b963      	cbnz	r3, 124b8 <nrfx_gpio_handler+0x5c>
   1249e:	4649      	mov	r1, r9
   124a0:	2345      	movs	r3, #69	; 0x45
   124a2:	4642      	mov	r2, r8
   124a4:	4650      	mov	r0, sl
   124a6:	f008 fa11 	bl	1a8cc <printk>
   124aa:	480d      	ldr	r0, [pc, #52]	; (124e0 <nrfx_gpio_handler+0x84>)
   124ac:	f008 fa0e 	bl	1a8cc <printk>
   124b0:	2145      	movs	r1, #69	; 0x45
   124b2:	4640      	mov	r0, r8
   124b4:	f008 fba3 	bl	1abfe <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   124b8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   124bc:	4621      	mov	r1, r4
   124be:	4032      	ands	r2, r6
   124c0:	4638      	mov	r0, r7
   124c2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   124c4:	2d00      	cmp	r5, #0
   124c6:	d0cf      	beq.n	12468 <nrfx_gpio_handler+0xc>
   124c8:	682b      	ldr	r3, [r5, #0]
   124ca:	2b00      	cmp	r3, #0
   124cc:	bf38      	it	cc
   124ce:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   124d0:	462c      	mov	r4, r5
   124d2:	461d      	mov	r5, r3
   124d4:	e7de      	b.n	12494 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   124d6:	4f03      	ldr	r7, [pc, #12]	; (124e4 <nrfx_gpio_handler+0x88>)
   124d8:	e7c9      	b.n	1246e <nrfx_gpio_handler+0x12>
   124da:	bf00      	nop
   124dc:	0001c748 	.word	0x0001c748
   124e0:	0001e7b7 	.word	0x0001e7b7
   124e4:	0001c760 	.word	0x0001c760
   124e8:	0001e769 	.word	0x0001e769
   124ec:	0001e7ce 	.word	0x0001e7ce
   124f0:	0001d2dc 	.word	0x0001d2dc

000124f4 <gpio_nrfx_pin_interrupt_configure>:
{
   124f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   124f6:	6840      	ldr	r0, [r0, #4]
   124f8:	7b05      	ldrb	r5, [r0, #12]
   124fa:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   124fe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   12502:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   12506:	f04f 0500 	mov.w	r5, #0
   1250a:	d104      	bne.n	12516 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1250c:	4620      	mov	r0, r4
   1250e:	f002 fe73 	bl	151f8 <nrfx_gpiote_trigger_disable>
	return 0;
   12512:	2000      	movs	r0, #0
   12514:	e054      	b.n	125c0 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
   12516:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1251a:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1251e:	d151      	bne.n	125c4 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   12520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   12524:	bf0c      	ite	eq
   12526:	2304      	moveq	r3, #4
   12528:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1252a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1252e:	6883      	ldr	r3, [r0, #8]
   12530:	fa23 f101 	lsr.w	r1, r3, r1
   12534:	f011 0101 	ands.w	r1, r1, #1
   12538:	d155      	bne.n	125e6 <gpio_nrfx_pin_interrupt_configure+0xf2>
   1253a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1253e:	d152      	bne.n	125e6 <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
   12540:	0966      	lsrs	r6, r4, #5
   12542:	d04a      	beq.n	125da <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
   12544:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12548:	2e01      	cmp	r6, #1
   1254a:	bf08      	it	eq
   1254c:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
   1254e:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   12552:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   12554:	07ca      	lsls	r2, r1, #31
   12556:	d40b      	bmi.n	12570 <gpio_nrfx_pin_interrupt_configure+0x7c>
   12558:	492b      	ldr	r1, [pc, #172]	; (12608 <gpio_nrfx_pin_interrupt_configure+0x114>)
   1255a:	482c      	ldr	r0, [pc, #176]	; (1260c <gpio_nrfx_pin_interrupt_configure+0x118>)
   1255c:	4a2c      	ldr	r2, [pc, #176]	; (12610 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1255e:	f240 2329 	movw	r3, #553	; 0x229
   12562:	f008 f9b3 	bl	1a8cc <printk>
   12566:	482a      	ldr	r0, [pc, #168]	; (12610 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   12568:	f240 2129 	movw	r1, #553	; 0x229
   1256c:	f008 fb47 	bl	1abfe <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12570:	b16e      	cbz	r6, 1258e <gpio_nrfx_pin_interrupt_configure+0x9a>
   12572:	2e01      	cmp	r6, #1
   12574:	d034      	beq.n	125e0 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
   12576:	4927      	ldr	r1, [pc, #156]	; (12614 <gpio_nrfx_pin_interrupt_configure+0x120>)
   12578:	4824      	ldr	r0, [pc, #144]	; (1260c <gpio_nrfx_pin_interrupt_configure+0x118>)
   1257a:	4a25      	ldr	r2, [pc, #148]	; (12610 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1257c:	f240 232e 	movw	r3, #558	; 0x22e
   12580:	f008 f9a4 	bl	1a8cc <printk>
   12584:	4822      	ldr	r0, [pc, #136]	; (12610 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   12586:	f240 212e 	movw	r1, #558	; 0x22e
   1258a:	f008 fb38 	bl	1abfe <assert_post_action>
        case 0: return NRF_P0;
   1258e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   12592:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   12596:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1259a:	07db      	lsls	r3, r3, #31
   1259c:	d423      	bmi.n	125e6 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1259e:	f10d 0507 	add.w	r5, sp, #7
   125a2:	4629      	mov	r1, r5
   125a4:	4620      	mov	r0, r4
   125a6:	f002 fd51 	bl	1504c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   125aa:	4b1b      	ldr	r3, [pc, #108]	; (12618 <gpio_nrfx_pin_interrupt_configure+0x124>)
   125ac:	4298      	cmp	r0, r3
   125ae:	d119      	bne.n	125e4 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
   125b0:	4628      	mov	r0, r5
   125b2:	f002 fdab 	bl	1510c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   125b6:	4b19      	ldr	r3, [pc, #100]	; (1261c <gpio_nrfx_pin_interrupt_configure+0x128>)
   125b8:	4298      	cmp	r0, r3
   125ba:	d013      	beq.n	125e4 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
   125bc:	f06f 000b 	mvn.w	r0, #11
}
   125c0:	b004      	add	sp, #16
   125c2:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   125c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   125c8:	d005      	beq.n	125d6 <gpio_nrfx_pin_interrupt_configure+0xe2>
   125ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   125ce:	bf0c      	ite	eq
   125d0:	2302      	moveq	r3, #2
   125d2:	2301      	movne	r3, #1
   125d4:	e7a9      	b.n	1252a <gpio_nrfx_pin_interrupt_configure+0x36>
   125d6:	2303      	movs	r3, #3
   125d8:	e7a7      	b.n	1252a <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
   125da:	f04f 31ff 	mov.w	r1, #4294967295
   125de:	e7b6      	b.n	1254e <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   125e0:	4b0f      	ldr	r3, [pc, #60]	; (12620 <gpio_nrfx_pin_interrupt_configure+0x12c>)
   125e2:	e7d6      	b.n	12592 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
   125e4:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   125e6:	2300      	movs	r3, #0
   125e8:	4619      	mov	r1, r3
   125ea:	aa02      	add	r2, sp, #8
   125ec:	4620      	mov	r0, r4
   125ee:	f002 fc0f 	bl	14e10 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   125f2:	4b0a      	ldr	r3, [pc, #40]	; (1261c <gpio_nrfx_pin_interrupt_configure+0x128>)
   125f4:	4298      	cmp	r0, r3
   125f6:	d104      	bne.n	12602 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   125f8:	2101      	movs	r1, #1
   125fa:	4620      	mov	r0, r4
   125fc:	f002 fd8c 	bl	15118 <nrfx_gpiote_trigger_enable>
   12600:	e787      	b.n	12512 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   12602:	f06f 0004 	mvn.w	r0, #4
   12606:	e7db      	b.n	125c0 <gpio_nrfx_pin_interrupt_configure+0xcc>
   12608:	0001e80d 	.word	0x0001e80d
   1260c:	0001d2dc 	.word	0x0001d2dc
   12610:	0001e7da 	.word	0x0001e7da
   12614:	000205d8 	.word	0x000205d8
   12618:	0bad0004 	.word	0x0bad0004
   1261c:	0bad0000 	.word	0x0bad0000
   12620:	50000300 	.word	0x50000300

00012624 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   12624:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   12626:	f002 fd61 	bl	150ec <nrfx_gpiote_is_init>
   1262a:	4604      	mov	r4, r0
   1262c:	b968      	cbnz	r0, 1264a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1262e:	f002 fd35 	bl	1509c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   12632:	4b08      	ldr	r3, [pc, #32]	; (12654 <gpio_nrfx_init+0x30>)
   12634:	4298      	cmp	r0, r3
   12636:	d10a      	bne.n	1264e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   12638:	4807      	ldr	r0, [pc, #28]	; (12658 <gpio_nrfx_init+0x34>)
   1263a:	4621      	mov	r1, r4
   1263c:	f002 fd00 	bl	15040 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   12640:	4622      	mov	r2, r4
   12642:	2105      	movs	r1, #5
   12644:	2006      	movs	r0, #6
   12646:	f7fe fd85 	bl	11154 <z_arm_irq_priority_set>
		return 0;
   1264a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1264c:	bd10      	pop	{r4, pc}
		return -EIO;
   1264e:	f06f 0004 	mvn.w	r0, #4
   12652:	e7fb      	b.n	1264c <gpio_nrfx_init+0x28>
   12654:	0bad0000 	.word	0x0bad0000
   12658:	0001245d 	.word	0x0001245d

0001265c <gpio_nrfx_pin_configure>:
{
   1265c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   12660:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12662:	7b3b      	ldrb	r3, [r7, #12]
   12664:	f001 051f 	and.w	r5, r1, #31
{
   12668:	b085      	sub	sp, #20
   1266a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1266c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   12670:	4614      	mov	r4, r2
   12672:	b9ca      	cbnz	r2, 126a8 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   12674:	a902      	add	r1, sp, #8
   12676:	4628      	mov	r0, r5
   12678:	f002 fce8 	bl	1504c <nrfx_gpiote_channel_get>
   1267c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1267e:	4628      	mov	r0, r5
   12680:	f002 fddc 	bl	1523c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   12684:	4b48      	ldr	r3, [pc, #288]	; (127a8 <gpio_nrfx_pin_configure+0x14c>)
   12686:	4298      	cmp	r0, r3
   12688:	d004      	beq.n	12694 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1268a:	f06f 0004 	mvn.w	r0, #4
}
   1268e:	b005      	add	sp, #20
   12690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   12694:	4284      	cmp	r4, r0
   12696:	d105      	bne.n	126a4 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   12698:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1269c:	f002 fd30 	bl	15100 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   126a0:	42a0      	cmp	r0, r4
   126a2:	d1f2      	bne.n	1268a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   126a4:	2000      	movs	r0, #0
   126a6:	e7f2      	b.n	1268e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   126a8:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   126ac:	f10d 0103 	add.w	r1, sp, #3
   126b0:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   126b2:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   126b6:	f002 fcc9 	bl	1504c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   126ba:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   126bc:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   126be:	aa02      	add	r2, sp, #8
   126c0:	4649      	mov	r1, r9
   126c2:	4628      	mov	r0, r5
   126c4:	f002 fba4 	bl	14e10 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   126c8:	4b37      	ldr	r3, [pc, #220]	; (127a8 <gpio_nrfx_pin_configure+0x14c>)
   126ca:	4298      	cmp	r0, r3
   126cc:	d002      	beq.n	126d4 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   126ce:	f06f 0015 	mvn.w	r0, #21
   126d2:	e7dc      	b.n	1268e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   126d4:	4580      	cmp	r8, r0
   126d6:	d103      	bne.n	126e0 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   126d8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   126dc:	f002 fd10 	bl	15100 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   126e0:	05a3      	lsls	r3, r4, #22
   126e2:	d54e      	bpl.n	12782 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   126e4:	4b31      	ldr	r3, [pc, #196]	; (127ac <gpio_nrfx_pin_configure+0x150>)
   126e6:	4a32      	ldr	r2, [pc, #200]	; (127b0 <gpio_nrfx_pin_configure+0x154>)
   126e8:	4023      	ands	r3, r4
   126ea:	4293      	cmp	r3, r2
   126ec:	d03a      	beq.n	12764 <gpio_nrfx_pin_configure+0x108>
   126ee:	d80c      	bhi.n	1270a <gpio_nrfx_pin_configure+0xae>
   126f0:	2b06      	cmp	r3, #6
   126f2:	d014      	beq.n	1271e <gpio_nrfx_pin_configure+0xc2>
   126f4:	d804      	bhi.n	12700 <gpio_nrfx_pin_configure+0xa4>
   126f6:	b193      	cbz	r3, 1271e <gpio_nrfx_pin_configure+0xc2>
   126f8:	2b02      	cmp	r3, #2
   126fa:	d1e8      	bne.n	126ce <gpio_nrfx_pin_configure+0x72>
   126fc:	2304      	movs	r3, #4
   126fe:	e00e      	b.n	1271e <gpio_nrfx_pin_configure+0xc2>
   12700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   12704:	d1e3      	bne.n	126ce <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   12706:	2301      	movs	r3, #1
   12708:	e009      	b.n	1271e <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1270a:	4a2a      	ldr	r2, [pc, #168]	; (127b4 <gpio_nrfx_pin_configure+0x158>)
   1270c:	4293      	cmp	r3, r2
   1270e:	d02b      	beq.n	12768 <gpio_nrfx_pin_configure+0x10c>
   12710:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   12714:	d02a      	beq.n	1276c <gpio_nrfx_pin_configure+0x110>
   12716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1271a:	d1d8      	bne.n	126ce <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   1271c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1271e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   12722:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   12726:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   1272a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1272c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   12730:	bf54      	ite	pl
   12732:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   12736:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   12738:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   1273a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1273e:	d517      	bpl.n	12770 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   12740:	687b      	ldr	r3, [r7, #4]
   12742:	2101      	movs	r1, #1
   12744:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   12748:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1274c:	2200      	movs	r2, #0
   1274e:	a901      	add	r1, sp, #4
   12750:	4628      	mov	r0, r5
   12752:	f002 fc05 	bl	14f60 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   12756:	4b14      	ldr	r3, [pc, #80]	; (127a8 <gpio_nrfx_pin_configure+0x14c>)
   12758:	4298      	cmp	r0, r3
   1275a:	bf14      	ite	ne
   1275c:	f06f 0015 	mvnne.w	r0, #21
   12760:	2000      	moveq	r0, #0
   12762:	e794      	b.n	1268e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   12764:	2307      	movs	r3, #7
   12766:	e7da      	b.n	1271e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   12768:	2305      	movs	r3, #5
   1276a:	e7d8      	b.n	1271e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1276c:	2303      	movs	r3, #3
   1276e:	e7d6      	b.n	1271e <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   12770:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   12772:	bf41      	itttt	mi
   12774:	687b      	ldrmi	r3, [r7, #4]
   12776:	2101      	movmi	r1, #1
   12778:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1277c:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   12780:	e7e4      	b.n	1274c <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   12782:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12784:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   12788:	bf54      	ite	pl
   1278a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1278e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12790:	461a      	mov	r2, r3
   12792:	a901      	add	r1, sp, #4
   12794:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   12796:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1279a:	f002 fb39 	bl	14e10 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1279e:	4b02      	ldr	r3, [pc, #8]	; (127a8 <gpio_nrfx_pin_configure+0x14c>)
   127a0:	4298      	cmp	r0, r3
   127a2:	f43f af7f 	beq.w	126a4 <gpio_nrfx_pin_configure+0x48>
   127a6:	e792      	b.n	126ce <gpio_nrfx_pin_configure+0x72>
   127a8:	0bad0000 	.word	0x0bad0000
   127ac:	00f00006 	.word	0x00f00006
   127b0:	00100006 	.word	0x00100006
   127b4:	00400002 	.word	0x00400002

000127b8 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   127b8:	4b02      	ldr	r3, [pc, #8]	; (127c4 <flash_nrf_pages_layout+0xc>)
   127ba:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   127bc:	2301      	movs	r3, #1
   127be:	6013      	str	r3, [r2, #0]
}
   127c0:	4770      	bx	lr
   127c2:	bf00      	nop
   127c4:	20000f74 	.word	0x20000f74

000127c8 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   127c8:	4800      	ldr	r0, [pc, #0]	; (127cc <flash_nrf_get_parameters+0x4>)
   127ca:	4770      	bx	lr
   127cc:	0001cd00 	.word	0x0001cd00

000127d0 <flash_nrf_read>:
{
   127d0:	b570      	push	{r4, r5, r6, lr}
   127d2:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   127d4:	4628      	mov	r0, r5
   127d6:	4619      	mov	r1, r3
{
   127d8:	4616      	mov	r6, r2
   127da:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   127dc:	f008 fc27 	bl	1b02e <is_regular_addr_valid>
   127e0:	b970      	cbnz	r0, 12800 <flash_nrf_read+0x30>
   127e2:	4b0c      	ldr	r3, [pc, #48]	; (12814 <flash_nrf_read+0x44>)
   127e4:	480c      	ldr	r0, [pc, #48]	; (12818 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   127e6:	490d      	ldr	r1, [pc, #52]	; (1281c <flash_nrf_read+0x4c>)
   127e8:	1ac0      	subs	r0, r0, r3
   127ea:	08c0      	lsrs	r0, r0, #3
   127ec:	0180      	lsls	r0, r0, #6
   127ee:	f040 0001 	orr.w	r0, r0, #1
   127f2:	4623      	mov	r3, r4
   127f4:	462a      	mov	r2, r5
   127f6:	f008 fa17 	bl	1ac28 <log_string_sync>
		return -EINVAL;
   127fa:	f06f 0015 	mvn.w	r0, #21
}
   127fe:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   12800:	b134      	cbz	r4, 12810 <flash_nrf_read+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12802:	4622      	mov	r2, r4
   12804:	4629      	mov	r1, r5
   12806:	4630      	mov	r0, r6
   12808:	f009 f997 	bl	1bb3a <memcpy>
	return 0;
   1280c:	2000      	movs	r0, #0
   1280e:	e7f6      	b.n	127fe <flash_nrf_read+0x2e>
		return 0;
   12810:	4620      	mov	r0, r4
   12812:	e7f4      	b.n	127fe <flash_nrf_read+0x2e>
   12814:	0001c940 	.word	0x0001c940
   12818:	0001c9a0 	.word	0x0001c9a0
   1281c:	0001e83e 	.word	0x0001e83e

00012820 <restore_pofwarn.part.0>:
	}

	return 0;
}

static void restore_pofwarn(void)
   12820:	b508      	push	{r3, lr}
    uint32_t pofcon = p_reg->POFCON;
   12822:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   12826:	2001      	movs	r0, #1
   12828:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1282c:	f3c1 0143 	ubfx	r1, r1, #1, #4
   12830:	f008 fc10 	bl	1b054 <nrf_power_pofcon_set.constprop.0>
		pofcon_enabled = false;
   12834:	4b01      	ldr	r3, [pc, #4]	; (1283c <restore_pofwarn.part.0+0x1c>)
   12836:	2200      	movs	r2, #0
   12838:	701a      	strb	r2, [r3, #0]
	}
}
   1283a:	bd08      	pop	{r3, pc}
   1283c:	200025b8 	.word	0x200025b8

00012840 <suspend_pofwarn.part.0>:
static int suspend_pofwarn(void)
   12840:	b508      	push	{r3, lr}
   12842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12846:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
	if (enabled) {
   1284a:	f011 0001 	ands.w	r0, r1, #1
   1284e:	d00c      	beq.n	1286a <suspend_pofwarn.part.0+0x2a>
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
   12850:	2000      	movs	r0, #0
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   12852:	f3c1 0143 	ubfx	r1, r1, #1, #4
   12856:	f008 fbfd 	bl	1b054 <nrf_power_pofcon_set.constprop.0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1285a:	4b06      	ldr	r3, [pc, #24]	; (12874 <suspend_pofwarn.part.0+0x34>)
   1285c:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1285e:	b128      	cbz	r0, 1286c <suspend_pofwarn.part.0+0x2c>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   12860:	2001      	movs	r0, #1
   12862:	f008 fbf7 	bl	1b054 <nrf_power_pofcon_set.constprop.0>
			return -ECANCELED;
   12866:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1286a:	bd08      	pop	{r3, pc}
		pofcon_enabled = enabled;
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <suspend_pofwarn.part.0+0x38>)
   1286e:	2201      	movs	r2, #1
   12870:	701a      	strb	r2, [r3, #0]
   12872:	e7fa      	b.n	1286a <suspend_pofwarn.part.0+0x2a>
   12874:	40000108 	.word	0x40000108
   12878:	200025b8 	.word	0x200025b8

0001287c <nrf_flash_init>:
{
   1287c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1287e:	2201      	movs	r2, #1
   12880:	4611      	mov	r1, r2
   12882:	4806      	ldr	r0, [pc, #24]	; (1289c <nrf_flash_init+0x20>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   12884:	4c06      	ldr	r4, [pc, #24]	; (128a0 <nrf_flash_init+0x24>)
   12886:	f009 f889 	bl	1b99c <z_impl_k_sem_init>
   1288a:	f008 ffe6 	bl	1b85a <nrfx_nvmc_flash_page_count_get>
   1288e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   12890:	f008 ffdf 	bl	1b852 <nrfx_nvmc_flash_page_size_get>
   12894:	6060      	str	r0, [r4, #4]
}
   12896:	2000      	movs	r0, #0
   12898:	bd10      	pop	{r4, pc}
   1289a:	bf00      	nop
   1289c:	20000f7c 	.word	0x20000f7c
   128a0:	20000f74 	.word	0x20000f74

000128a4 <flash_nrf_erase>:
{
   128a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128a8:	460d      	mov	r5, r1
   128aa:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   128ac:	f008 ffd1 	bl	1b852 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   128b0:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   128b2:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   128b4:	4628      	mov	r0, r5
   128b6:	f008 fbba 	bl	1b02e <is_regular_addr_valid>
   128ba:	462f      	mov	r7, r5
   128bc:	2800      	cmp	r0, #0
   128be:	d042      	beq.n	12946 <flash_nrf_erase+0xa2>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   128c0:	fbb5 f3f6 	udiv	r3, r5, r6
   128c4:	fb06 5313 	mls	r3, r6, r3, r5
   128c8:	b923      	cbnz	r3, 128d4 <flash_nrf_erase+0x30>
   128ca:	fbb4 f2f6 	udiv	r2, r4, r6
   128ce:	fb06 4212 	mls	r2, r6, r2, r4
   128d2:	b172      	cbz	r2, 128f2 <flash_nrf_erase+0x4e>
   128d4:	4b21      	ldr	r3, [pc, #132]	; (1295c <flash_nrf_erase+0xb8>)
   128d6:	4822      	ldr	r0, [pc, #136]	; (12960 <flash_nrf_erase+0xbc>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   128d8:	4922      	ldr	r1, [pc, #136]	; (12964 <flash_nrf_erase+0xc0>)
   128da:	1ac0      	subs	r0, r0, r3
   128dc:	08c0      	lsrs	r0, r0, #3
   128de:	0180      	lsls	r0, r0, #6
   128e0:	4623      	mov	r3, r4
   128e2:	462a      	mov	r2, r5
		LOG_ERR("invalid address: 0x%08lx:%zu",
   128e4:	f040 0001 	orr.w	r0, r0, #1
   128e8:	f008 f99e 	bl	1ac28 <log_string_sync>
		return -EINVAL;
   128ec:	f06f 0415 	mvn.w	r4, #21
   128f0:	e01f      	b.n	12932 <flash_nrf_erase+0x8e>
		if (!n_pages) {
   128f2:	42b4      	cmp	r4, r6
   128f4:	d330      	bcc.n	12958 <flash_nrf_erase+0xb4>
	return z_impl_k_sem_take(sem, timeout);
   128f6:	f04f 32ff 	mov.w	r2, #4294967295
   128fa:	f04f 33ff 	mov.w	r3, #4294967295
   128fe:	481a      	ldr	r0, [pc, #104]	; (12968 <flash_nrf_erase+0xc4>)
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   12900:	4e1a      	ldr	r6, [pc, #104]	; (1296c <flash_nrf_erase+0xc8>)
	if (pofcon_enabled) {
   12902:	f8df 8070 	ldr.w	r8, [pc, #112]	; 12974 <flash_nrf_erase+0xd0>
   12906:	f003 fec7 	bl	16698 <z_impl_k_sem_take>
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1290a:	f008 ffa2 	bl	1b852 <nrfx_nvmc_flash_page_size_get>
   1290e:	4605      	mov	r5, r0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   12910:	6833      	ldr	r3, [r6, #0]
   12912:	2b08      	cmp	r3, #8
   12914:	d010      	beq.n	12938 <flash_nrf_erase+0x94>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   12916:	4638      	mov	r0, r7
   12918:	f002 fd8e 	bl	15438 <nrfx_nvmc_page_erase>
	if (pofcon_enabled) {
   1291c:	f898 3000 	ldrb.w	r3, [r8]
   12920:	b10b      	cbz	r3, 12926 <flash_nrf_erase+0x82>
   12922:	f7ff ff7d 	bl	12820 <restore_pofwarn.part.0>
	} while (e_ctx->len > 0);
   12926:	1b64      	subs	r4, r4, r5
   12928:	442f      	add	r7, r5
   1292a:	d1f1      	bne.n	12910 <flash_nrf_erase+0x6c>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1292c:	480e      	ldr	r0, [pc, #56]	; (12968 <flash_nrf_erase+0xc4>)
   1292e:	f003 fe75 	bl	1661c <z_impl_k_sem_give>
}
   12932:	4620      	mov	r0, r4
   12934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
   12938:	f7ff ff82 	bl	12840 <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   1293c:	2800      	cmp	r0, #0
   1293e:	d0ea      	beq.n	12916 <flash_nrf_erase+0x72>
			return -ECANCELED;
   12940:	f06f 048b 	mvn.w	r4, #139	; 0x8b
   12944:	e7f2      	b.n	1292c <flash_nrf_erase+0x88>
   12946:	4b05      	ldr	r3, [pc, #20]	; (1295c <flash_nrf_erase+0xb8>)
   12948:	4805      	ldr	r0, [pc, #20]	; (12960 <flash_nrf_erase+0xbc>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1294a:	4909      	ldr	r1, [pc, #36]	; (12970 <flash_nrf_erase+0xcc>)
   1294c:	1ac0      	subs	r0, r0, r3
   1294e:	08c0      	lsrs	r0, r0, #3
   12950:	0180      	lsls	r0, r0, #6
   12952:	4623      	mov	r3, r4
   12954:	462a      	mov	r2, r5
   12956:	e7c5      	b.n	128e4 <flash_nrf_erase+0x40>
			return 0;
   12958:	4614      	mov	r4, r2
   1295a:	e7ea      	b.n	12932 <flash_nrf_erase+0x8e>
   1295c:	0001c940 	.word	0x0001c940
   12960:	0001c9a0 	.word	0x0001c9a0
   12964:	0001e85b 	.word	0x0001e85b
   12968:	20000f7c 	.word	0x20000f7c
   1296c:	10000130 	.word	0x10000130
   12970:	0001e83e 	.word	0x0001e83e
   12974:	200025b8 	.word	0x200025b8

00012978 <flash_nrf_write>:
{
   12978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1297c:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   1297e:	4630      	mov	r0, r6
   12980:	4619      	mov	r1, r3
{
   12982:	4617      	mov	r7, r2
   12984:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   12986:	f008 fb52 	bl	1b02e <is_regular_addr_valid>
   1298a:	b980      	cbnz	r0, 129ae <flash_nrf_write+0x36>
   1298c:	4b28      	ldr	r3, [pc, #160]	; (12a30 <flash_nrf_write+0xb8>)
   1298e:	4829      	ldr	r0, [pc, #164]	; (12a34 <flash_nrf_write+0xbc>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   12990:	4929      	ldr	r1, [pc, #164]	; (12a38 <flash_nrf_write+0xc0>)
   12992:	1ac0      	subs	r0, r0, r3
   12994:	08c0      	lsrs	r0, r0, #3
   12996:	0180      	lsls	r0, r0, #6
   12998:	4623      	mov	r3, r4
   1299a:	4632      	mov	r2, r6
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1299c:	f040 0001 	orr.w	r0, r0, #1
   129a0:	f008 f942 	bl	1ac28 <log_string_sync>
		return -EINVAL;
   129a4:	f06f 0415 	mvn.w	r4, #21
}
   129a8:	4620      	mov	r0, r4
   129aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (data & 0x3) ? false : true;
   129ae:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   129b2:	f015 0503 	ands.w	r5, r5, #3
   129b6:	d008      	beq.n	129ca <flash_nrf_write+0x52>
   129b8:	4b1d      	ldr	r3, [pc, #116]	; (12a30 <flash_nrf_write+0xb8>)
   129ba:	481e      	ldr	r0, [pc, #120]	; (12a34 <flash_nrf_write+0xbc>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   129bc:	491f      	ldr	r1, [pc, #124]	; (12a3c <flash_nrf_write+0xc4>)
   129be:	1ac0      	subs	r0, r0, r3
   129c0:	08c0      	lsrs	r0, r0, #3
   129c2:	0180      	lsls	r0, r0, #6
   129c4:	4623      	mov	r3, r4
   129c6:	4632      	mov	r2, r6
   129c8:	e7e8      	b.n	1299c <flash_nrf_write+0x24>
	if (!len) {
   129ca:	2c00      	cmp	r4, #0
   129cc:	d0ec      	beq.n	129a8 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   129ce:	481c      	ldr	r0, [pc, #112]	; (12a40 <flash_nrf_write+0xc8>)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   129d0:	f8df 9074 	ldr.w	r9, [pc, #116]	; 12a48 <flash_nrf_write+0xd0>
	if (pofcon_enabled) {
   129d4:	f8df a074 	ldr.w	sl, [pc, #116]	; 12a4c <flash_nrf_write+0xd4>
   129d8:	f04f 32ff 	mov.w	r2, #4294967295
   129dc:	f04f 33ff 	mov.w	r3, #4294967295
   129e0:	f003 fe5a 	bl	16698 <z_impl_k_sem_take>
static int write_op(void *context)
   129e4:	f024 0403 	bic.w	r4, r4, #3
	while (w_ctx->len >= sizeof(uint32_t)) {
   129e8:	42a5      	cmp	r5, r4
   129ea:	eb05 0806 	add.w	r8, r5, r6
   129ee:	d109      	bne.n	12a04 <flash_nrf_write+0x8c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   129f0:	4a14      	ldr	r2, [pc, #80]	; (12a44 <flash_nrf_write+0xcc>)
   129f2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   129f6:	07db      	lsls	r3, r3, #31
   129f8:	d5fb      	bpl.n	129f2 <flash_nrf_write+0x7a>
	return FLASH_OP_DONE;
   129fa:	2400      	movs	r4, #0
	z_impl_k_sem_give(sem);
   129fc:	4810      	ldr	r0, [pc, #64]	; (12a40 <flash_nrf_write+0xc8>)
   129fe:	f003 fe0d 	bl	1661c <z_impl_k_sem_give>
}
   12a02:	e7d1      	b.n	129a8 <flash_nrf_write+0x30>
            if (var1 == 0x08)
   12a04:	f8d9 3000 	ldr.w	r3, [r9]
   12a08:	2b08      	cmp	r3, #8
   12a0a:	d00a      	beq.n	12a22 <flash_nrf_write+0xaa>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   12a0c:	5979      	ldr	r1, [r7, r5]
   12a0e:	4640      	mov	r0, r8
   12a10:	f002 fd4a 	bl	154a8 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   12a14:	f89a 3000 	ldrb.w	r3, [sl]
   12a18:	b10b      	cbz	r3, 12a1e <flash_nrf_write+0xa6>
   12a1a:	f7ff ff01 	bl	12820 <restore_pofwarn.part.0>
	w_ctx->len -= shift;
   12a1e:	3504      	adds	r5, #4
}
   12a20:	e7e2      	b.n	129e8 <flash_nrf_write+0x70>
                switch(var2)
   12a22:	f7ff ff0d 	bl	12840 <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   12a26:	2800      	cmp	r0, #0
   12a28:	d0f0      	beq.n	12a0c <flash_nrf_write+0x94>
			return -ECANCELED;
   12a2a:	f06f 048b 	mvn.w	r4, #139	; 0x8b
   12a2e:	e7e5      	b.n	129fc <flash_nrf_write+0x84>
   12a30:	0001c940 	.word	0x0001c940
   12a34:	0001c9a0 	.word	0x0001c9a0
   12a38:	0001e83e 	.word	0x0001e83e
   12a3c:	0001e87a 	.word	0x0001e87a
   12a40:	20000f7c 	.word	0x20000f7c
   12a44:	4001e000 	.word	0x4001e000
   12a48:	10000130 	.word	0x10000130
   12a4c:	200025b8 	.word	0x200025b8

00012a50 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   12a50:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   12a52:	794b      	ldrb	r3, [r1, #5]
   12a54:	2b01      	cmp	r3, #1
   12a56:	d026      	beq.n	12aa6 <uarte_nrfx_configure+0x56>
   12a58:	2b03      	cmp	r3, #3
   12a5a:	d121      	bne.n	12aa0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   12a5c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   12a5e:	798b      	ldrb	r3, [r1, #6]
   12a60:	2b03      	cmp	r3, #3
   12a62:	d11d      	bne.n	12aa0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   12a64:	79cc      	ldrb	r4, [r1, #7]
   12a66:	b10c      	cbz	r4, 12a6c <uarte_nrfx_configure+0x1c>
   12a68:	2c01      	cmp	r4, #1
   12a6a:	d119      	bne.n	12aa0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   12a6c:	790a      	ldrb	r2, [r1, #4]
   12a6e:	b112      	cbz	r2, 12a76 <uarte_nrfx_configure+0x26>
   12a70:	2a02      	cmp	r2, #2
   12a72:	d115      	bne.n	12aa0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12a74:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   12a76:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   12a78:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   12a7a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   12a7e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   12a80:	d065      	beq.n	12b4e <uarte_nrfx_configure+0xfe>
   12a82:	d82d      	bhi.n	12ae0 <uarte_nrfx_configure+0x90>
   12a84:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   12a88:	d064      	beq.n	12b54 <uarte_nrfx_configure+0x104>
   12a8a:	d816      	bhi.n	12aba <uarte_nrfx_configure+0x6a>
   12a8c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   12a90:	d062      	beq.n	12b58 <uarte_nrfx_configure+0x108>
   12a92:	d80a      	bhi.n	12aaa <uarte_nrfx_configure+0x5a>
   12a94:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   12a98:	d061      	beq.n	12b5e <uarte_nrfx_configure+0x10e>
   12a9a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   12a9e:	d061      	beq.n	12b64 <uarte_nrfx_configure+0x114>
   12aa0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12aa4:	e052      	b.n	12b4c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   12aa6:	2600      	movs	r6, #0
   12aa8:	e7d9      	b.n	12a5e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   12aaa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   12aae:	d05c      	beq.n	12b6a <uarte_nrfx_configure+0x11a>
   12ab0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   12ab4:	d1f4      	bne.n	12aa0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   12ab6:	4b37      	ldr	r3, [pc, #220]	; (12b94 <uarte_nrfx_configure+0x144>)
   12ab8:	e03c      	b.n	12b34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12aba:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   12abe:	d057      	beq.n	12b70 <uarte_nrfx_configure+0x120>
   12ac0:	d807      	bhi.n	12ad2 <uarte_nrfx_configure+0x82>
   12ac2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   12ac6:	d055      	beq.n	12b74 <uarte_nrfx_configure+0x124>
   12ac8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   12acc:	d1e8      	bne.n	12aa0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   12ace:	4b32      	ldr	r3, [pc, #200]	; (12b98 <uarte_nrfx_configure+0x148>)
   12ad0:	e030      	b.n	12b34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12ad2:	f647 2712 	movw	r7, #31250	; 0x7a12
   12ad6:	42bb      	cmp	r3, r7
   12ad8:	d1e2      	bne.n	12aa0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   12ada:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   12ade:	e029      	b.n	12b34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12ae0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   12ae4:	d048      	beq.n	12b78 <uarte_nrfx_configure+0x128>
   12ae6:	d813      	bhi.n	12b10 <uarte_nrfx_configure+0xc0>
   12ae8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   12aec:	d047      	beq.n	12b7e <uarte_nrfx_configure+0x12e>
   12aee:	d809      	bhi.n	12b04 <uarte_nrfx_configure+0xb4>
   12af0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   12af4:	42bb      	cmp	r3, r7
   12af6:	d044      	beq.n	12b82 <uarte_nrfx_configure+0x132>
   12af8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   12afc:	d1d0      	bne.n	12aa0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   12afe:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   12b02:	e017      	b.n	12b34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12b04:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   12b08:	d1ca      	bne.n	12aa0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   12b0a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   12b0e:	e011      	b.n	12b34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12b10:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   12b14:	d038      	beq.n	12b88 <uarte_nrfx_configure+0x138>
   12b16:	d808      	bhi.n	12b2a <uarte_nrfx_configure+0xda>
   12b18:	4f20      	ldr	r7, [pc, #128]	; (12b9c <uarte_nrfx_configure+0x14c>)
   12b1a:	42bb      	cmp	r3, r7
   12b1c:	d037      	beq.n	12b8e <uarte_nrfx_configure+0x13e>
   12b1e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   12b22:	d1bd      	bne.n	12aa0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   12b24:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   12b28:	e004      	b.n	12b34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12b2a:	4f1d      	ldr	r7, [pc, #116]	; (12ba0 <uarte_nrfx_configure+0x150>)
   12b2c:	42bb      	cmp	r3, r7
   12b2e:	d1b7      	bne.n	12aa0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   12b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   12b34:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   12b38:	6903      	ldr	r3, [r0, #16]
   12b3a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   12b3c:	4334      	orrs	r4, r6
   12b3e:	4322      	orrs	r2, r4
   12b40:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12b42:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   12b46:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   12b4a:	2000      	movs	r0, #0
}
   12b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   12b4e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   12b52:	e7ef      	b.n	12b34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   12b54:	4b13      	ldr	r3, [pc, #76]	; (12ba4 <uarte_nrfx_configure+0x154>)
   12b56:	e7ed      	b.n	12b34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   12b58:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   12b5c:	e7ea      	b.n	12b34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   12b5e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   12b62:	e7e7      	b.n	12b34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12b64:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   12b68:	e7e4      	b.n	12b34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   12b6a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   12b6e:	e7e1      	b.n	12b34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   12b70:	4b0d      	ldr	r3, [pc, #52]	; (12ba8 <uarte_nrfx_configure+0x158>)
   12b72:	e7df      	b.n	12b34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   12b74:	4b0d      	ldr	r3, [pc, #52]	; (12bac <uarte_nrfx_configure+0x15c>)
   12b76:	e7dd      	b.n	12b34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   12b78:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   12b7c:	e7da      	b.n	12b34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   12b7e:	4b0c      	ldr	r3, [pc, #48]	; (12bb0 <uarte_nrfx_configure+0x160>)
   12b80:	e7d8      	b.n	12b34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   12b82:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   12b86:	e7d5      	b.n	12b34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   12b88:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   12b8c:	e7d2      	b.n	12b34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   12b8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   12b92:	e7cf      	b.n	12b34 <uarte_nrfx_configure+0xe4>
   12b94:	0013b000 	.word	0x0013b000
   12b98:	004ea000 	.word	0x004ea000
   12b9c:	0003d090 	.word	0x0003d090
   12ba0:	000f4240 	.word	0x000f4240
   12ba4:	00275000 	.word	0x00275000
   12ba8:	0075c000 	.word	0x0075c000
   12bac:	003af000 	.word	0x003af000
   12bb0:	013a9000 	.word	0x013a9000

00012bb4 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   12bb4:	6802      	ldr	r2, [r0, #0]
    switch (port)
   12bb6:	0953      	lsrs	r3, r2, #5
{
   12bb8:	b510      	push	{r4, lr}
   12bba:	4604      	mov	r4, r0
    switch (port)
   12bbc:	d02c      	beq.n	12c18 <nrf_gpio_pin_port_decode+0x64>
   12bbe:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   12bc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12bc4:	bf18      	it	ne
   12bc6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   12bc8:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   12bcc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   12bce:	07db      	lsls	r3, r3, #31
   12bd0:	d40b      	bmi.n	12bea <nrf_gpio_pin_port_decode+0x36>
   12bd2:	4914      	ldr	r1, [pc, #80]	; (12c24 <nrf_gpio_pin_port_decode+0x70>)
   12bd4:	4814      	ldr	r0, [pc, #80]	; (12c28 <nrf_gpio_pin_port_decode+0x74>)
   12bd6:	4a15      	ldr	r2, [pc, #84]	; (12c2c <nrf_gpio_pin_port_decode+0x78>)
   12bd8:	f240 2329 	movw	r3, #553	; 0x229
   12bdc:	f007 fe76 	bl	1a8cc <printk>
   12be0:	4812      	ldr	r0, [pc, #72]	; (12c2c <nrf_gpio_pin_port_decode+0x78>)
   12be2:	f240 2129 	movw	r1, #553	; 0x229
   12be6:	f008 f80a 	bl	1abfe <assert_post_action>
    uint32_t pin_number = *p_pin;
   12bea:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   12bec:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12bf0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   12bf2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12bf4:	d00d      	beq.n	12c12 <nrf_gpio_pin_port_decode+0x5e>
   12bf6:	2b01      	cmp	r3, #1
   12bf8:	d011      	beq.n	12c1e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
   12bfa:	490d      	ldr	r1, [pc, #52]	; (12c30 <nrf_gpio_pin_port_decode+0x7c>)
   12bfc:	480a      	ldr	r0, [pc, #40]	; (12c28 <nrf_gpio_pin_port_decode+0x74>)
   12bfe:	4a0b      	ldr	r2, [pc, #44]	; (12c2c <nrf_gpio_pin_port_decode+0x78>)
   12c00:	f240 232e 	movw	r3, #558	; 0x22e
   12c04:	f007 fe62 	bl	1a8cc <printk>
   12c08:	4808      	ldr	r0, [pc, #32]	; (12c2c <nrf_gpio_pin_port_decode+0x78>)
   12c0a:	f240 212e 	movw	r1, #558	; 0x22e
   12c0e:	f007 fff6 	bl	1abfe <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12c12:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   12c16:	bd10      	pop	{r4, pc}
    switch (port)
   12c18:	f04f 33ff 	mov.w	r3, #4294967295
   12c1c:	e7d4      	b.n	12bc8 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   12c1e:	4805      	ldr	r0, [pc, #20]	; (12c34 <nrf_gpio_pin_port_decode+0x80>)
   12c20:	e7f9      	b.n	12c16 <nrf_gpio_pin_port_decode+0x62>
   12c22:	bf00      	nop
   12c24:	0001e80d 	.word	0x0001e80d
   12c28:	0001d2dc 	.word	0x0001d2dc
   12c2c:	0001e7da 	.word	0x0001e7da
   12c30:	000205d8 	.word	0x000205d8
   12c34:	50000300 	.word	0x50000300

00012c38 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   12c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12c3c:	4614      	mov	r4, r2
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   12c3e:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   12c40:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
   12c44:	6817      	ldr	r7, [r2, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
   12c46:	7a12      	ldrb	r2, [r2, #8]
{
   12c48:	4605      	mov	r5, r0
   12c4a:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   12c4c:	b192      	cbz	r2, 12c74 <uarte_nrfx_rx_enable+0x3c>
		__ASSERT(false, "TX only UARTE instance");
   12c4e:	4a3f      	ldr	r2, [pc, #252]	; (12d4c <uarte_nrfx_rx_enable+0x114>)
   12c50:	493f      	ldr	r1, [pc, #252]	; (12d50 <uarte_nrfx_rx_enable+0x118>)
   12c52:	4840      	ldr	r0, [pc, #256]	; (12d54 <uarte_nrfx_rx_enable+0x11c>)
   12c54:	f240 337f 	movw	r3, #895	; 0x37f
   12c58:	f007 fe38 	bl	1a8cc <printk>
   12c5c:	483e      	ldr	r0, [pc, #248]	; (12d58 <uarte_nrfx_rx_enable+0x120>)
   12c5e:	f007 fe35 	bl	1a8cc <printk>
   12c62:	483a      	ldr	r0, [pc, #232]	; (12d4c <uarte_nrfx_rx_enable+0x114>)
   12c64:	f240 317f 	movw	r1, #895	; 0x37f
   12c68:	f007 ffc9 	bl	1abfe <assert_post_action>
		return -ENOTSUP;
   12c6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   12c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (data->async->rx_enabled) {
   12c74:	f8d9 100c 	ldr.w	r1, [r9, #12]
   12c78:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
   12c7c:	2a00      	cmp	r2, #0
   12c7e:	d161      	bne.n	12d44 <uarte_nrfx_rx_enable+0x10c>
		MAX(timeout / RX_TIMEOUT_DIV,
   12c80:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   12c84:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
   12c86:	bfd2      	itee	le
   12c88:	235c      	movle	r3, #92	; 0x5c
   12c8a:	2205      	movgt	r2, #5
   12c8c:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   12c90:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
   12c94:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   12c96:	e9c1 8418 	strd	r8, r4, [r1, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   12c9a:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
   12c9e:	670b      	str	r3, [r1, #112]	; 0x70
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12ca0:	6843      	ldr	r3, [r0, #4]
   12ca2:	685b      	ldr	r3, [r3, #4]
   12ca4:	06da      	lsls	r2, r3, #27
   12ca6:	d524      	bpl.n	12cf2 <uarte_nrfx_rx_enable+0xba>
		if (data->async->rx_flush_cnt) {
   12ca8:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
   12cac:	b30e      	cbz	r6, 12cf2 <uarte_nrfx_rx_enable+0xba>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   12cae:	42a6      	cmp	r6, r4
   12cb0:	bf28      	it	cs
   12cb2:	4626      	movcs	r6, r4
   12cb4:	4640      	mov	r0, r8
   12cb6:	4632      	mov	r2, r6
   12cb8:	31cc      	adds	r1, #204	; 0xcc
   12cba:	f008 ff3e 	bl	1bb3a <memcpy>
			if (!len) {
   12cbe:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
   12cc0:	44b0      	add	r8, r6
			if (!len) {
   12cc2:	d116      	bne.n	12cf2 <uarte_nrfx_rx_enable+0xba>
				data->async->rx_flush_cnt -= cpy_len;
   12cc4:	f8d9 200c 	ldr.w	r2, [r9, #12]
   12cc8:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
   12ccc:	1b9b      	subs	r3, r3, r6
   12cce:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
   12cd2:	4631      	mov	r1, r6
   12cd4:	4628      	mov	r0, r5
   12cd6:	f008 fa56 	bl	1b186 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   12cda:	f8d9 100c 	ldr.w	r1, [r9, #12]
   12cde:	4628      	mov	r0, r5
   12ce0:	2201      	movs	r2, #1
   12ce2:	3160      	adds	r1, #96	; 0x60
   12ce4:	f008 fa68 	bl	1b1b8 <notify_rx_buf_release>
				notify_rx_disable(dev);
   12ce8:	4628      	mov	r0, r5
   12cea:	f008 fa7f 	bl	1b1ec <notify_rx_disable>
	return 0;
   12cee:	2000      	movs	r0, #0
   12cf0:	e7be      	b.n	12c70 <uarte_nrfx_rx_enable+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12cf2:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   12cf4:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   12cf8:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12cfc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   12d00:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   12d04:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   12d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
   12d0c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   12d10:	2201      	movs	r2, #1
   12d12:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12d16:	686b      	ldr	r3, [r5, #4]
   12d18:	685b      	ldr	r3, [r3, #4]
   12d1a:	06db      	lsls	r3, r3, #27
   12d1c:	d50f      	bpl.n	12d3e <uarte_nrfx_rx_enable+0x106>
	__asm__ volatile(
   12d1e:	f04f 0320 	mov.w	r3, #32
   12d22:	f3ef 8411 	mrs	r4, BASEPRI
   12d26:	f383 8812 	msr	BASEPRI_MAX, r3
   12d2a:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
   12d2e:	2102      	movs	r1, #2
   12d30:	4628      	mov	r0, r5
   12d32:	f008 fab6 	bl	1b2a2 <uarte_enable>
	__asm__ volatile(
   12d36:	f384 8811 	msr	BASEPRI, r4
   12d3a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12d3e:	2301      	movs	r3, #1
   12d40:	603b      	str	r3, [r7, #0]
   12d42:	e7d4      	b.n	12cee <uarte_nrfx_rx_enable+0xb6>
		return -EBUSY;
   12d44:	f06f 000f 	mvn.w	r0, #15
   12d48:	e792      	b.n	12c70 <uarte_nrfx_rx_enable+0x38>
   12d4a:	bf00      	nop
   12d4c:	0001e8a2 	.word	0x0001e8a2
   12d50:	000205d8 	.word	0x000205d8
   12d54:	0001d2dc 	.word	0x0001d2dc
   12d58:	0001e8d6 	.word	0x0001e8d6

00012d5c <uarte_nrfx_tx>:
{
   12d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12d5e:	461c      	mov	r4, r3
	return config->uarte_regs;
   12d60:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   12d62:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   12d64:	f8d3 c000 	ldr.w	ip, [r3]
{
   12d68:	4605      	mov	r5, r0
	__asm__ volatile(
   12d6a:	f04f 0320 	mov.w	r3, #32
   12d6e:	f3ef 8711 	mrs	r7, BASEPRI
   12d72:	f383 8812 	msr	BASEPRI_MAX, r3
   12d76:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   12d7a:	68f0      	ldr	r0, [r6, #12]
   12d7c:	68c3      	ldr	r3, [r0, #12]
   12d7e:	b13b      	cbz	r3, 12d90 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   12d80:	f387 8811 	msr	BASEPRI, r7
   12d84:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   12d88:	f06f 000f 	mvn.w	r0, #15
}
   12d8c:	b003      	add	sp, #12
   12d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENSET = mask;
   12d90:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
	data->async->tx_size = len;
   12d94:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
   12d96:	6081      	str	r1, [r0, #8]
   12d98:	f8cc e304 	str.w	lr, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   12d9c:	f001 4c60 	and.w	ip, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   12da0:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
   12da4:	d128      	bne.n	12df8 <uarte_nrfx_tx+0x9c>
		data->async->xfer_len = len;
   12da6:	e9c0 1204 	strd	r1, r2, [r0, #16]
	start_tx_locked(dev, data);
   12daa:	f106 010c 	add.w	r1, r6, #12
   12dae:	4628      	mov	r0, r5
   12db0:	f008 fb0f 	bl	1b3d2 <start_tx_locked.isra.0>
   12db4:	f387 8811 	msr	BASEPRI, r7
   12db8:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   12dbc:	7af3      	ldrb	r3, [r6, #11]
   12dbe:	2b01      	cmp	r3, #1
   12dc0:	d118      	bne.n	12df4 <uarte_nrfx_tx+0x98>
	    && timeout != SYS_FOREVER_US) {
   12dc2:	1c63      	adds	r3, r4, #1
   12dc4:	d016      	beq.n	12df4 <uarte_nrfx_tx+0x98>
			return (t * to_hz + off) / from_hz;
   12dc6:	480e      	ldr	r0, [pc, #56]	; (12e00 <uarte_nrfx_tx+0xa4>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   12dc8:	68f5      	ldr	r5, [r6, #12]
   12dca:	4a0e      	ldr	r2, [pc, #56]	; (12e04 <uarte_nrfx_tx+0xa8>)
   12dcc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   12dd0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   12dd4:	2100      	movs	r1, #0
   12dd6:	2300      	movs	r3, #0
   12dd8:	fbc6 0104 	smlal	r0, r1, r6, r4
   12ddc:	f7f9 feae 	bl	cb3c <__aeabi_uldivmod>
   12de0:	3528      	adds	r5, #40	; 0x28
   12de2:	4602      	mov	r2, r0
   12de4:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   12de6:	2000      	movs	r0, #0
   12de8:	2100      	movs	r1, #0
   12dea:	e9cd 0100 	strd	r0, r1, [sp]
   12dee:	4628      	mov	r0, r5
   12df0:	f005 fefa 	bl	18be8 <z_impl_k_timer_start>
	return 0;
   12df4:	2000      	movs	r0, #0
   12df6:	e7c9      	b.n	12d8c <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   12df8:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
   12dfa:	f008 fb02 	bl	1b402 <setup_tx_cache.isra.0>
   12dfe:	e7d4      	b.n	12daa <uarte_nrfx_tx+0x4e>
   12e00:	000f423f 	.word	0x000f423f
   12e04:	000f4240 	.word	0x000f4240

00012e08 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   12e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   12e0a:	6906      	ldr	r6, [r0, #16]
{
   12e0c:	4604      	mov	r4, r0
   12e0e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12e10:	f008 fda9 	bl	1b966 <k_is_in_isr>
   12e14:	b910      	cbnz	r0, 12e1c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   12e16:	4b28      	ldr	r3, [pc, #160]	; (12eb8 <uarte_nrfx_poll_out+0xb0>)
	int key;

	if (isr_mode) {
   12e18:	781b      	ldrb	r3, [r3, #0]
   12e1a:	bb5b      	cbnz	r3, 12e74 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   12e1c:	f04f 0320 	mov.w	r3, #32
   12e20:	f3ef 8111 	mrs	r1, BASEPRI
   12e24:	f383 8812 	msr	BASEPRI_MAX, r3
   12e28:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   12e2c:	4620      	mov	r0, r4
			key = irq_lock();
   12e2e:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   12e30:	f008 f991 	bl	1b156 <is_tx_ready>
   12e34:	b1c8      	cbz	r0, 12e6a <uarte_nrfx_poll_out+0x62>
#if CONFIG_UART_ASYNC_API
				if (data->async && data->async->tx_size &&
   12e36:	68f3      	ldr	r3, [r6, #12]
   12e38:	b15b      	cbz	r3, 12e52 <uarte_nrfx_poll_out+0x4a>
   12e3a:	68da      	ldr	r2, [r3, #12]
   12e3c:	b14a      	cbz	r2, 12e52 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   12e3e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
   12e42:	2a00      	cmp	r2, #0
   12e44:	da05      	bge.n	12e52 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   12e46:	6862      	ldr	r2, [r4, #4]
   12e48:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   12e4a:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   12e4e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   12e52:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   12e54:	2201      	movs	r2, #1
	data->char_out = c;
   12e56:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   12e5a:	4620      	mov	r0, r4
   12e5c:	f008 fa46 	bl	1b2ec <tx_start>
	__asm__ volatile(
   12e60:	f385 8811 	msr	BASEPRI, r5
   12e64:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   12e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e6a:	f381 8811 	msr	BASEPRI, r1
   12e6e:	f3bf 8f6f 	isb	sy
}
   12e72:	e7d3      	b.n	12e1c <uarte_nrfx_poll_out+0x14>
{
   12e74:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   12e76:	4620      	mov	r0, r4
   12e78:	f008 f96d 	bl	1b156 <is_tx_ready>
   12e7c:	b948      	cbnz	r0, 12e92 <uarte_nrfx_poll_out+0x8a>
   12e7e:	2001      	movs	r0, #1
   12e80:	f008 fc56 	bl	1b730 <nrfx_busy_wait>
   12e84:	3d01      	subs	r5, #1
   12e86:	d1f6      	bne.n	12e76 <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
   12e88:	2100      	movs	r1, #0
   12e8a:	2021      	movs	r0, #33	; 0x21
   12e8c:	f005 f94c 	bl	18128 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12e90:	e7f0      	b.n	12e74 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   12e92:	f04f 0320 	mov.w	r3, #32
   12e96:	f3ef 8511 	mrs	r5, BASEPRI
   12e9a:	f383 8812 	msr	BASEPRI_MAX, r3
   12e9e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   12ea2:	4620      	mov	r0, r4
   12ea4:	f008 f957 	bl	1b156 <is_tx_ready>
   12ea8:	2800      	cmp	r0, #0
   12eaa:	d1d2      	bne.n	12e52 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   12eac:	f385 8811 	msr	BASEPRI, r5
   12eb0:	f3bf 8f6f 	isb	sy
}
   12eb4:	e7e8      	b.n	12e88 <uarte_nrfx_poll_out+0x80>
   12eb6:	bf00      	nop
   12eb8:	200029ca 	.word	0x200029ca

00012ebc <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   12ebc:	6843      	ldr	r3, [r0, #4]
{
   12ebe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
   12ec2:	681d      	ldr	r5, [r3, #0]
	if (!hw_rx_counting_enabled(data)
   12ec4:	6903      	ldr	r3, [r0, #16]
   12ec6:	68db      	ldr	r3, [r3, #12]
   12ec8:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
{
   12ecc:	b089      	sub	sp, #36	; 0x24
   12ece:	4604      	mov	r4, r0
	if (!hw_rx_counting_enabled(data)
   12ed0:	b972      	cbnz	r2, 12ef0 <uarte_nrfx_isr_async+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12ed2:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   12ed6:	b159      	cbz	r1, 12ef0 <uarte_nrfx_isr_async+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12ed8:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   12edc:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   12ee0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   12ee4:	3201      	adds	r2, #1
   12ee6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
   12eea:	b009      	add	sp, #36	; 0x24
   12eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12ef0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   12ef4:	b31b      	cbz	r3, 12f3e <uarte_nrfx_isr_async+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12ef6:	2100      	movs	r1, #0
   12ef8:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   12efc:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12f00:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   12f04:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   12f08:	2214      	movs	r2, #20
   12f0a:	a803      	add	r0, sp, #12
   12f0c:	f008 fe36 	bl	1bb7c <memset>
   12f10:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   12f12:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
   12f14:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   12f18:	f100 8104 	bmi.w	13124 <uarte_nrfx_isr_async+0x268>
   12f1c:	07b1      	lsls	r1, r6, #30
   12f1e:	f100 8103 	bmi.w	13128 <uarte_nrfx_isr_async+0x26c>
   12f22:	0772      	lsls	r2, r6, #29
   12f24:	f100 8102 	bmi.w	1312c <uarte_nrfx_isr_async+0x270>
   12f28:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   12f2c:	4620      	mov	r0, r4
   12f2e:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   12f30:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   12f34:	f008 f920 	bl	1b178 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   12f38:	4620      	mov	r0, r4
   12f3a:	f008 faf8 	bl	1b52e <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12f3e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   12f42:	b37b      	cbz	r3, 12fa4 <uarte_nrfx_isr_async+0xe8>
    return p_reg->INTENSET & mask;
   12f44:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   12f48:	06db      	lsls	r3, r3, #27
   12f4a:	d52b      	bpl.n	12fa4 <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12f4c:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   12f50:	6927      	ldr	r7, [r4, #16]
   12f52:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   12f56:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   12f5a:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
   12f5c:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
   12f5e:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   12f60:	2301      	movs	r3, #1
   12f62:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
   12f66:	3088      	adds	r0, #136	; 0x88
   12f68:	f008 fda8 	bl	1babc <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   12f6c:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   12f6e:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
   12f72:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   12f76:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
   12f78:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   12f7c:	1a1b      	subs	r3, r3, r0
   12f7e:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   12f80:	6f90      	ldr	r0, [r2, #120]	; 0x78
   12f82:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   12f86:	4408      	add	r0, r1
	if (rx_len > 0) {
   12f88:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   12f8a:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
   12f8c:	dd02      	ble.n	12f94 <uarte_nrfx_isr_async+0xd8>
		notify_uart_rx_rdy(dev, rx_len);
   12f8e:	4620      	mov	r0, r4
   12f90:	f008 f8f9 	bl	1b186 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   12f94:	68f9      	ldr	r1, [r7, #12]
   12f96:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
   12f9a:	2b00      	cmp	r3, #0
   12f9c:	f040 80c8 	bne.w	13130 <uarte_nrfx_isr_async+0x274>
		data->async->is_in_irq = false;
   12fa0:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12fa4:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   12fa8:	b393      	cbz	r3, 13010 <uarte_nrfx_isr_async+0x154>
   12faa:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
   12fae:	bb79      	cbnz	r1, 13010 <uarte_nrfx_isr_async+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12fb0:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   12fb4:	6926      	ldr	r6, [r4, #16]
   12fb6:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   12fba:	2214      	movs	r2, #20
   12fbc:	a803      	add	r0, sp, #12
   12fbe:	f008 fddd 	bl	1bb7c <memset>
   12fc2:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   12fc4:	a903      	add	r1, sp, #12
   12fc6:	4620      	mov	r0, r4
	struct uart_event evt = {
   12fc8:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   12fcc:	f008 f8d4 	bl	1b178 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   12fd0:	68f6      	ldr	r6, [r6, #12]
   12fd2:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
   12fd4:	1c5f      	adds	r7, r3, #1
   12fd6:	d01b      	beq.n	13010 <uarte_nrfx_isr_async+0x154>
		data->async->rx_timeout_left = data->async->rx_timeout;
   12fd8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
   12fdc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
   12fe0:	f8df 8234 	ldr.w	r8, [pc, #564]	; 13218 <uarte_nrfx_isr_async+0x35c>
   12fe4:	4a8b      	ldr	r2, [pc, #556]	; (13214 <uarte_nrfx_isr_async+0x358>)
   12fe6:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   12fea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12fee:	f04f 0900 	mov.w	r9, #0
   12ff2:	fbc0 8901 	smlal	r8, r9, r0, r1
   12ff6:	2300      	movs	r3, #0
   12ff8:	4640      	mov	r0, r8
   12ffa:	4649      	mov	r1, r9
   12ffc:	f7f9 fd9e 	bl	cb3c <__aeabi_uldivmod>
   13000:	4602      	mov	r2, r0
   13002:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   13004:	e9cd 0100 	strd	r0, r1, [sp]
   13008:	f106 0088 	add.w	r0, r6, #136	; 0x88
   1300c:	f005 fdec 	bl	18be8 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13010:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   13014:	b333      	cbz	r3, 13064 <uarte_nrfx_isr_async+0x1a8>
   13016:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1301a:	bb1e      	cbnz	r6, 13064 <uarte_nrfx_isr_async+0x1a8>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1301c:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1301e:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   13022:	68f9      	ldr	r1, [r7, #12]
   13024:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   13028:	2201      	movs	r2, #1
   1302a:	3160      	adds	r1, #96	; 0x60
   1302c:	4620      	mov	r0, r4
   1302e:	f008 f8c3 	bl	1b1b8 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   13032:	68f9      	ldr	r1, [r7, #12]
   13034:	2201      	movs	r2, #1
   13036:	316c      	adds	r1, #108	; 0x6c
   13038:	4620      	mov	r0, r4
   1303a:	f008 f8bd 	bl	1b1b8 <notify_rx_buf_release>
	if (data->async->rx_enabled) {
   1303e:	68fb      	ldr	r3, [r7, #12]
   13040:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
   13044:	2a00      	cmp	r2, #0
   13046:	f000 80a1 	beq.w	1318c <uarte_nrfx_isr_async+0x2d0>
		data->async->rx_enabled = false;
   1304a:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1304e:	6863      	ldr	r3, [r4, #4]
   13050:	685b      	ldr	r3, [r3, #4]
   13052:	06d8      	lsls	r0, r3, #27
   13054:	d503      	bpl.n	1305e <uarte_nrfx_isr_async+0x1a2>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   13056:	2102      	movs	r1, #2
   13058:	4620      	mov	r0, r4
   1305a:	f008 fa1c 	bl	1b496 <async_uart_release>
	notify_rx_disable(dev);
   1305e:	4620      	mov	r0, r4
   13060:	f008 f8c4 	bl	1b1ec <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13064:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   13068:	b1db      	cbz	r3, 130a2 <uarte_nrfx_isr_async+0x1e6>
    return p_reg->INTENSET & mask;
   1306a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1306e:	05d9      	lsls	r1, r3, #23
   13070:	d517      	bpl.n	130a2 <uarte_nrfx_isr_async+0x1e6>
	return config->uarte_regs;
   13072:	6863      	ldr	r3, [r4, #4]
   13074:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   13076:	f04f 0120 	mov.w	r1, #32
   1307a:	f3ef 8211 	mrs	r2, BASEPRI
   1307e:	f381 8812 	msr	BASEPRI_MAX, r1
   13082:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13086:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1308a:	b131      	cbz	r1, 1309a <uarte_nrfx_isr_async+0x1de>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1308c:	2100      	movs	r1, #0
   1308e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   13092:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13096:	2101      	movs	r1, #1
   13098:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1309a:	f382 8811 	msr	BASEPRI, r2
   1309e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   130a2:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   130a6:	2b00      	cmp	r3, #0
   130a8:	f43f af1f 	beq.w	12eea <uarte_nrfx_isr_async+0x2e>
    return p_reg->INTENSET & mask;
   130ac:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   130b0:	025a      	lsls	r2, r3, #9
   130b2:	f57f af1a 	bpl.w	12eea <uarte_nrfx_isr_async+0x2e>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   130b6:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   130b8:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   130ba:	e9d3 7300 	ldrd	r7, r3, [r3]
   130be:	06db      	lsls	r3, r3, #27
   130c0:	d469      	bmi.n	13196 <uarte_nrfx_isr_async+0x2da>
	if (!data->async->tx_buf) {
   130c2:	68f3      	ldr	r3, [r6, #12]
   130c4:	689b      	ldr	r3, [r3, #8]
   130c6:	2b00      	cmp	r3, #0
   130c8:	f43f af0f 	beq.w	12eea <uarte_nrfx_isr_async+0x2e>
	__asm__ volatile(
   130cc:	f04f 0320 	mov.w	r3, #32
   130d0:	f3ef 8211 	mrs	r2, BASEPRI
   130d4:	f383 8812 	msr	BASEPRI_MAX, r3
   130d8:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   130dc:	68f3      	ldr	r3, [r6, #12]
   130de:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   130e2:	2900      	cmp	r1, #0
   130e4:	bfac      	ite	ge
   130e6:	f8d3 50c4 	ldrge.w	r5, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
   130ea:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
   130ee:	f382 8811 	msr	BASEPRI, r2
   130f2:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   130f6:	68f0      	ldr	r0, [r6, #12]
   130f8:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
   130fc:	2b00      	cmp	r3, #0
   130fe:	d057      	beq.n	131b0 <uarte_nrfx_isr_async+0x2f4>
	__asm__ volatile(
   13100:	f04f 0320 	mov.w	r3, #32
   13104:	f3ef 8511 	mrs	r5, BASEPRI
   13108:	f383 8812 	msr	BASEPRI_MAX, r3
   1310c:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   13110:	f106 010c 	add.w	r1, r6, #12
   13114:	4620      	mov	r0, r4
   13116:	f008 f95c 	bl	1b3d2 <start_tx_locked.isra.0>
	__asm__ volatile(
   1311a:	f385 8811 	msr	BASEPRI, r5
   1311e:	f3bf 8f6f 	isb	sy
				return;
   13122:	e6e2      	b.n	12eea <uarte_nrfx_isr_async+0x2e>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   13124:	2601      	movs	r6, #1
   13126:	e701      	b.n	12f2c <uarte_nrfx_isr_async+0x70>
   13128:	2602      	movs	r6, #2
   1312a:	e6ff      	b.n	12f2c <uarte_nrfx_isr_async+0x70>
   1312c:	2604      	movs	r6, #4
   1312e:	e6fd      	b.n	12f2c <uarte_nrfx_isr_async+0x70>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   13130:	2200      	movs	r2, #0
   13132:	3160      	adds	r1, #96	; 0x60
   13134:	4620      	mov	r0, r4
   13136:	f008 f83f 	bl	1b1b8 <notify_rx_buf_release>
	__asm__ volatile(
   1313a:	f04f 0320 	mov.w	r3, #32
   1313e:	f3ef 8111 	mrs	r1, BASEPRI
   13142:	f383 8812 	msr	BASEPRI_MAX, r3
   13146:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1314a:	68fb      	ldr	r3, [r7, #12]
   1314c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1314e:	b1d2      	cbz	r2, 13186 <uarte_nrfx_isr_async+0x2ca>
		data->async->rx_buf = data->async->rx_next_buf;
   13150:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   13152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13154:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
   13156:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   13158:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
   1315c:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1315e:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   13162:	b90b      	cbnz	r3, 13168 <uarte_nrfx_isr_async+0x2ac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13164:	2301      	movs	r3, #1
   13166:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   13168:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   1316c:	f023 0320 	bic.w	r3, r3, #32
   13170:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   13174:	f381 8811 	msr	BASEPRI, r1
   13178:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1317c:	68fb      	ldr	r3, [r7, #12]
   1317e:	2200      	movs	r2, #0
   13180:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
   13184:	e70e      	b.n	12fa4 <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13186:	2301      	movs	r3, #1
   13188:	6073      	str	r3, [r6, #4]
}
   1318a:	e7f3      	b.n	13174 <uarte_nrfx_isr_async+0x2b8>
		(void)rx_flush(dev, NULL, 0);
   1318c:	4611      	mov	r1, r2
   1318e:	4620      	mov	r0, r4
   13190:	f008 f94b 	bl	1b42a <rx_flush>
   13194:	e75b      	b.n	1304e <uarte_nrfx_isr_async+0x192>
    p_reg->INTENCLR = mask;
   13196:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1319a:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1319e:	2101      	movs	r1, #1
   131a0:	4620      	mov	r0, r4
   131a2:	f008 f978 	bl	1b496 <async_uart_release>
		if (!data->async->tx_size) {
   131a6:	68f3      	ldr	r3, [r6, #12]
   131a8:	68db      	ldr	r3, [r3, #12]
   131aa:	2b00      	cmp	r3, #0
   131ac:	d189      	bne.n	130c2 <uarte_nrfx_isr_async+0x206>
   131ae:	e69c      	b.n	12eea <uarte_nrfx_isr_async+0x2e>
	if (data->async->tx_buf != data->async->xfer_buf) {
   131b0:	6882      	ldr	r2, [r0, #8]
   131b2:	6903      	ldr	r3, [r0, #16]
   131b4:	429a      	cmp	r2, r3
   131b6:	d00b      	beq.n	131d0 <uarte_nrfx_isr_async+0x314>
		if (amount == data->async->xfer_len) {
   131b8:	6942      	ldr	r2, [r0, #20]
   131ba:	6a03      	ldr	r3, [r0, #32]
   131bc:	42aa      	cmp	r2, r5
   131be:	442b      	add	r3, r5
   131c0:	d125      	bne.n	1320e <uarte_nrfx_isr_async+0x352>
			data->async->tx_cache_offset += amount;
   131c2:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
   131c4:	f008 f91d 	bl	1b402 <setup_tx_cache.isra.0>
   131c8:	2800      	cmp	r0, #0
   131ca:	d199      	bne.n	13100 <uarte_nrfx_isr_async+0x244>
			amount = data->async->tx_cache_offset;
   131cc:	68f3      	ldr	r3, [r6, #12]
   131ce:	6a1d      	ldr	r5, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
   131d0:	68f0      	ldr	r0, [r6, #12]
   131d2:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
   131d4:	f008 fc72 	bl	1babc <z_impl_k_timer_stop>
	struct uart_event evt = {
   131d8:	2214      	movs	r2, #20
   131da:	2100      	movs	r1, #0
   131dc:	a803      	add	r0, sp, #12
   131de:	f008 fccd 	bl	1bb7c <memset>
		.data.tx.buf = data->async->tx_buf,
   131e2:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   131e4:	689a      	ldr	r2, [r3, #8]
   131e6:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
   131ea:	68da      	ldr	r2, [r3, #12]
   131ec:	1aad      	subs	r5, r5, r2
   131ee:	bf18      	it	ne
   131f0:	2501      	movne	r5, #1
   131f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   131f6:	f88d 500c 	strb.w	r5, [sp, #12]
   131fa:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   131fe:	2200      	movs	r2, #0
   13200:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   13202:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   13204:	a903      	add	r1, sp, #12
   13206:	4620      	mov	r0, r4
   13208:	f007 ffb6 	bl	1b178 <user_callback>
   1320c:	e66d      	b.n	12eea <uarte_nrfx_isr_async+0x2e>
			amount += data->async->tx_cache_offset;
   1320e:	461d      	mov	r5, r3
   13210:	e7de      	b.n	131d0 <uarte_nrfx_isr_async+0x314>
   13212:	bf00      	nop
   13214:	000f4240 	.word	0x000f4240
   13218:	000f423f 	.word	0x000f423f

0001321c <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1321c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   13220:	f8d0 a004 	ldr.w	sl, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   13224:	f8d0 8010 	ldr.w	r8, [r0, #16]
	return config->uarte_regs;
   13228:	f8da 4000 	ldr.w	r4, [sl]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1322c:	2300      	movs	r3, #0
   1322e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   13232:	f8c8 0000 	str.w	r0, [r8]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   13236:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   13238:	68eb      	ldr	r3, [r5, #12]
   1323a:	1c5a      	adds	r2, r3, #1
static int uarte_instance_init(const struct device *dev,
   1323c:	4607      	mov	r7, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1323e:	d013      	beq.n	13268 <uarte_instance_init.isra.0+0x4c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13240:	4668      	mov	r0, sp
   13242:	9300      	str	r3, [sp, #0]
   13244:	f7ff fcb6 	bl	12bb4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13248:	9a00      	ldr	r2, [sp, #0]
   1324a:	2301      	movs	r3, #1
   1324c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1324e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   13252:	68eb      	ldr	r3, [r5, #12]
   13254:	9300      	str	r3, [sp, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13256:	4668      	mov	r0, sp
   13258:	f7ff fcac 	bl	12bb4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1325c:	9b00      	ldr	r3, [sp, #0]
   1325e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   13262:	2203      	movs	r2, #3
   13264:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   13268:	692b      	ldr	r3, [r5, #16]
   1326a:	1c58      	adds	r0, r3, #1
   1326c:	d00e      	beq.n	1328c <uarte_instance_init.isra.0+0x70>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1326e:	7f2a      	ldrb	r2, [r5, #28]
   13270:	9300      	str	r3, [sp, #0]
   13272:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13274:	4668      	mov	r0, sp
   13276:	bf14      	ite	ne
   13278:	2603      	movne	r6, #3
   1327a:	2600      	moveq	r6, #0
   1327c:	f7ff fc9a 	bl	12bb4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   13280:	9b00      	ldr	r3, [sp, #0]
   13282:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   13286:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
   13288:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1328c:	696b      	ldr	r3, [r5, #20]
   1328e:	1c59      	adds	r1, r3, #1
   13290:	d013      	beq.n	132ba <uarte_instance_init.isra.0+0x9e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13292:	4668      	mov	r0, sp
   13294:	9300      	str	r3, [sp, #0]
   13296:	f7ff fc8d 	bl	12bb4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1329a:	9a00      	ldr	r2, [sp, #0]
   1329c:	2301      	movs	r3, #1
   1329e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   132a0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   132a4:	696b      	ldr	r3, [r5, #20]
   132a6:	9300      	str	r3, [sp, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   132a8:	4668      	mov	r0, sp
   132aa:	f7ff fc83 	bl	12bb4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   132ae:	9b00      	ldr	r3, [sp, #0]
   132b0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   132b4:	2203      	movs	r2, #3
   132b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   132ba:	69ab      	ldr	r3, [r5, #24]
   132bc:	1c5a      	adds	r2, r3, #1
   132be:	d00e      	beq.n	132de <uarte_instance_init.isra.0+0xc2>
			nrf_gpio_cfg_input(cfg->cts_pin,
   132c0:	7f6a      	ldrb	r2, [r5, #29]
   132c2:	9300      	str	r3, [sp, #0]
   132c4:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   132c6:	4668      	mov	r0, sp
   132c8:	bf14      	ite	ne
   132ca:	2603      	movne	r6, #3
   132cc:	2600      	moveq	r6, #0
   132ce:	f7ff fc71 	bl	12bb4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   132d2:	9b00      	ldr	r3, [sp, #0]
   132d4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   132d8:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
   132da:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   132de:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   132e2:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   132e4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   132e8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   132ec:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
   132f0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   132f4:	6939      	ldr	r1, [r7, #16]
    p_reg->PSEL.CTS = pselcts;
   132f6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   132fa:	3104      	adds	r1, #4
   132fc:	4638      	mov	r0, r7
   132fe:	f7ff fba7 	bl	12a50 <uarte_nrfx_configure>
	if (err) {
   13302:	4681      	mov	r9, r0
   13304:	b9b0      	cbnz	r0, 13334 <uarte_instance_init.isra.0+0x118>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   13306:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1330a:	0798      	lsls	r0, r3, #30
   1330c:	d52a      	bpl.n	13364 <uarte_instance_init.isra.0+0x148>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1330e:	f108 0016 	add.w	r0, r8, #22
   13312:	f002 f903 	bl	1551c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   13316:	4b77      	ldr	r3, [pc, #476]	; (134f4 <uarte_instance_init.isra.0+0x2d8>)
   13318:	4298      	cmp	r0, r3
   1331a:	d00f      	beq.n	1333c <uarte_instance_init.isra.0+0x120>
   1331c:	4876      	ldr	r0, [pc, #472]	; (134f8 <uarte_instance_init.isra.0+0x2dc>)
   1331e:	4b77      	ldr	r3, [pc, #476]	; (134fc <uarte_instance_init.isra.0+0x2e0>)
		LOG_ERR("Failed to allocate PPI Channel");
   13320:	4977      	ldr	r1, [pc, #476]	; (13500 <uarte_instance_init.isra.0+0x2e4>)
   13322:	1ac0      	subs	r0, r0, r3
   13324:	08c0      	lsrs	r0, r0, #3
   13326:	0180      	lsls	r0, r0, #6
   13328:	f040 0001 	orr.w	r0, r0, #1
   1332c:	f007 fc7c 	bl	1ac28 <log_string_sync>
		return -EIO;
   13330:	f06f 0904 	mvn.w	r9, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   13334:	4648      	mov	r0, r9
   13336:	b003      	add	sp, #12
   13338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1333c:	f898 0016 	ldrb.w	r0, [r8, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   13340:	00c3      	lsls	r3, r0, #3
   13342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13346:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1334a:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1334e:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13352:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13356:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1335a:	4a6a      	ldr	r2, [pc, #424]	; (13504 <uarte_instance_init.isra.0+0x2e8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1335c:	2301      	movs	r3, #1
   1335e:	4083      	lsls	r3, r0
   13360:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   13364:	f8d8 300c 	ldr.w	r3, [r8, #12]
   13368:	2b00      	cmp	r3, #0
   1336a:	f000 80af 	beq.w	134cc <uarte_instance_init.isra.0+0x2b0>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1336e:	693e      	ldr	r6, [r7, #16]
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   13370:	687f      	ldr	r7, [r7, #4]
		return data->async->hw_rx_counting;
   13372:	68f3      	ldr	r3, [r6, #12]
	return config->uarte_regs;
   13374:	683d      	ldr	r5, [r7, #0]
	if (hw_rx_counting_enabled(data)) {
   13376:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
   1337a:	b1eb      	cbz	r3, 133b8 <uarte_instance_init.isra.0+0x19c>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   1337c:	4962      	ldr	r1, [pc, #392]	; (13508 <uarte_instance_init.isra.0+0x2ec>)
		ret = nrfx_timer_init(&cfg->timer,
   1337e:	4a63      	ldr	r2, [pc, #396]	; (1350c <uarte_instance_init.isra.0+0x2f0>)
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   13380:	2300      	movs	r3, #0
		ret = nrfx_timer_init(&cfg->timer,
   13382:	f107 0b20 	add.w	fp, r7, #32
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   13386:	e9cd 1300 	strd	r1, r3, [sp]
		ret = nrfx_timer_init(&cfg->timer,
   1338a:	4658      	mov	r0, fp
   1338c:	4669      	mov	r1, sp
   1338e:	f002 f913 	bl	155b8 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   13392:	4a58      	ldr	r2, [pc, #352]	; (134f4 <uarte_instance_init.isra.0+0x2d8>)
   13394:	4290      	cmp	r0, r2
   13396:	f000 808e 	beq.w	134b6 <uarte_instance_init.isra.0+0x29a>
   1339a:	4b58      	ldr	r3, [pc, #352]	; (134fc <uarte_instance_init.isra.0+0x2e0>)
   1339c:	4856      	ldr	r0, [pc, #344]	; (134f8 <uarte_instance_init.isra.0+0x2dc>)
			LOG_ERR("Timer already initialized, "
   1339e:	495c      	ldr	r1, [pc, #368]	; (13510 <uarte_instance_init.isra.0+0x2f4>)
   133a0:	1ac0      	subs	r0, r0, r3
   133a2:	08c0      	lsrs	r0, r0, #3
   133a4:	0180      	lsls	r0, r0, #6
   133a6:	f040 0001 	orr.w	r0, r0, #1
   133aa:	f007 fc3d 	bl	1ac28 <log_string_sync>
			data->async->hw_rx_counting = false;
   133ae:	68f3      	ldr	r3, [r6, #12]
   133b0:	f04f 0200 	mov.w	r2, #0
   133b4:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	if (hw_rx_counting_enabled(data)) {
   133b8:	68f0      	ldr	r0, [r6, #12]
   133ba:	f890 30d3 	ldrb.w	r3, [r0, #211]	; 0xd3
   133be:	b1bb      	cbz	r3, 133f0 <uarte_instance_init.isra.0+0x1d4>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   133c0:	30c0      	adds	r0, #192	; 0xc0
   133c2:	f002 f8ab 	bl	1551c <nrfx_ppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   133c6:	4b4b      	ldr	r3, [pc, #300]	; (134f4 <uarte_instance_init.isra.0+0x2d8>)
   133c8:	4298      	cmp	r0, r3
   133ca:	d011      	beq.n	133f0 <uarte_instance_init.isra.0+0x1d4>
   133cc:	4b4b      	ldr	r3, [pc, #300]	; (134fc <uarte_instance_init.isra.0+0x2e0>)
   133ce:	484a      	ldr	r0, [pc, #296]	; (134f8 <uarte_instance_init.isra.0+0x2dc>)
			LOG_ERR("Failed to allocate PPI Channel, "
   133d0:	4950      	ldr	r1, [pc, #320]	; (13514 <uarte_instance_init.isra.0+0x2f8>)
   133d2:	1ac0      	subs	r0, r0, r3
   133d4:	08c0      	lsrs	r0, r0, #3
   133d6:	0180      	lsls	r0, r0, #6
   133d8:	f040 0001 	orr.w	r0, r0, #1
   133dc:	f007 fc24 	bl	1ac28 <log_string_sync>
			data->async->hw_rx_counting = false;
   133e0:	68f3      	ldr	r3, [r6, #12]
   133e2:	2200      	movs	r2, #0
   133e4:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
			nrfx_timer_uninit(&cfg->timer);
   133e8:	f107 0020 	add.w	r0, r7, #32
   133ec:	f002 f9ca 	bl	15784 <nrfx_timer_uninit>
	if (hw_rx_counting_enabled(data)) {
   133f0:	68f3      	ldr	r3, [r6, #12]
   133f2:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
   133f6:	2a00      	cmp	r2, #0
   133f8:	d064      	beq.n	134c4 <uarte_instance_init.isra.0+0x2a8>
}

NRF_STATIC_INLINE uint32_t nrf_timer_task_address_get(NRF_TIMER_Type const * p_reg,
                                                      nrf_timer_task_t       task)
{
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
   133fa:	6a3a      	ldr	r2, [r7, #32]
		ret = nrfx_ppi_channel_assign(
   133fc:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   13400:	3208      	adds	r2, #8
   13402:	f505 7184 	add.w	r1, r5, #264	; 0x108
   13406:	f002 f88f 	bl	15528 <nrfx_ppi_channel_assign>
		if (ret != NRFX_SUCCESS) {
   1340a:	4b3a      	ldr	r3, [pc, #232]	; (134f4 <uarte_instance_init.isra.0+0x2d8>)
   1340c:	4298      	cmp	r0, r3
		ret = nrfx_ppi_channel_assign(
   1340e:	4607      	mov	r7, r0
		if (ret != NRFX_SUCCESS) {
   13410:	d18e      	bne.n	13330 <uarte_instance_init.isra.0+0x114>
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   13412:	68f3      	ldr	r3, [r6, #12]
   13414:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   13418:	f002 f8b2 	bl	15580 <nrfx_ppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   1341c:	42b8      	cmp	r0, r7
   1341e:	d187      	bne.n	13330 <uarte_instance_init.isra.0+0x114>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   13420:	68f0      	ldr	r0, [r6, #12]
    p_reg->INTENSET = mask;
   13422:	4a3d      	ldr	r2, [pc, #244]	; (13518 <uarte_instance_init.isra.0+0x2fc>)
   13424:	2301      	movs	r3, #1
   13426:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   1342a:	f8c5 2304 	str.w	r2, [r5, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1342e:	2208      	movs	r2, #8
   13430:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13434:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   13438:	b1a2      	cbz	r2, 13464 <uarte_instance_init.isra.0+0x248>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1343a:	606b      	str	r3, [r5, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1343c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   13440:	b91b      	cbnz	r3, 1344a <uarte_instance_init.isra.0+0x22e>
   13442:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   13446:	2b00      	cmp	r3, #0
   13448:	d0f8      	beq.n	1343c <uarte_instance_init.isra.0+0x220>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1344a:	2300      	movs	r3, #0
   1344c:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
   13450:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
   13454:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   13458:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   1345c:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   13460:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   13464:	492d      	ldr	r1, [pc, #180]	; (1351c <uarte_instance_init.isra.0+0x300>)
   13466:	2200      	movs	r2, #0
   13468:	3088      	adds	r0, #136	; 0x88
   1346a:	f008 fb1b 	bl	1baa4 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1346e:	68f3      	ldr	r3, [r6, #12]
	timer->user_data = user_data;
   13470:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   13474:	68f0      	ldr	r0, [r6, #12]
   13476:	492a      	ldr	r1, [pc, #168]	; (13520 <uarte_instance_init.isra.0+0x304>)
   13478:	2200      	movs	r2, #0
   1347a:	3028      	adds	r0, #40	; 0x28
   1347c:	f008 fb12 	bl	1baa4 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   13480:	68f3      	ldr	r3, [r6, #12]
   13482:	65de      	str	r6, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   13484:	f8da 3004 	ldr.w	r3, [sl, #4]
   13488:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1348a:	bf5c      	itt	pl
   1348c:	f44f 7280 	movpl.w	r2, #256	; 0x100
   13490:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13494:	06db      	lsls	r3, r3, #27
   13496:	bf44      	itt	mi
   13498:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1349c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   134a0:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   134a4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   134a8:	2300      	movs	r3, #0
   134aa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   134ae:	2301      	movs	r3, #1
   134b0:	60a3      	str	r3, [r4, #8]
   134b2:	60e3      	str	r3, [r4, #12]
	return 0;
   134b4:	e73e      	b.n	13334 <uarte_instance_init.isra.0+0x118>
			nrfx_timer_enable(&cfg->timer);
   134b6:	4658      	mov	r0, fp
   134b8:	f002 f91a 	bl	156f0 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   134bc:	4658      	mov	r0, fp
   134be:	f002 f97f 	bl	157c0 <nrfx_timer_clear>
   134c2:	e779      	b.n	133b8 <uarte_instance_init.isra.0+0x19c>
    p_reg->INTENSET = mask;
   134c4:	2304      	movs	r3, #4
   134c6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	if (ret != 0) {
   134ca:	e7a9      	b.n	13420 <uarte_instance_init.isra.0+0x204>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   134cc:	2308      	movs	r3, #8
   134ce:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   134d2:	f89a 3008 	ldrb.w	r3, [sl, #8]
   134d6:	2b00      	cmp	r3, #0
   134d8:	d1d4      	bne.n	13484 <uarte_instance_init.isra.0+0x268>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   134da:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   134de:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   134e2:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   134e6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   134ea:	2301      	movs	r3, #1
   134ec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   134f0:	6023      	str	r3, [r4, #0]
}
   134f2:	e7c7      	b.n	13484 <uarte_instance_init.isra.0+0x268>
   134f4:	0bad0000 	.word	0x0bad0000
   134f8:	0001c9e0 	.word	0x0001c9e0
   134fc:	0001c940 	.word	0x0001c940
   13500:	0001e8ef 	.word	0x0001e8ef
   13504:	4001f000 	.word	0x4001f000
   13508:	07030100 	.word	0x07030100
   1350c:	0001b177 	.word	0x0001b177
   13510:	0001e90e 	.word	0x0001e90e
   13514:	0001e94e 	.word	0x0001e94e
   13518:	000a0210 	.word	0x000a0210
   1351c:	0001b327 	.word	0x0001b327
   13520:	0001b527 	.word	0x0001b527

00013524 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   13524:	4919      	ldr	r1, [pc, #100]	; (1358c <sys_clock_timeout_handler+0x68>)
{
   13526:	b570      	push	{r4, r5, r6, lr}
   13528:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1352a:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1352e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   13530:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   13534:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   13538:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1353a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1353e:	f04f 0500 	mov.w	r5, #0
   13542:	d20a      	bcs.n	1355a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   13544:	4b12      	ldr	r3, [pc, #72]	; (13590 <sys_clock_timeout_handler+0x6c>)
   13546:	6819      	ldr	r1, [r3, #0]
   13548:	060a      	lsls	r2, r1, #24
   1354a:	0a0b      	lsrs	r3, r1, #8
   1354c:	1992      	adds	r2, r2, r6
   1354e:	4911      	ldr	r1, [pc, #68]	; (13594 <sys_clock_timeout_handler+0x70>)
   13550:	f143 0300 	adc.w	r3, r3, #0
   13554:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   13558:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1355a:	f005 f975 	bl	18848 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1355e:	00a3      	lsls	r3, r4, #2
   13560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13564:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   13568:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1356c:	42b2      	cmp	r2, r6
   1356e:	d10b      	bne.n	13588 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   13570:	b91d      	cbnz	r5, 1357a <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   13572:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   13576:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1357a:	4b07      	ldr	r3, [pc, #28]	; (13598 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1357c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   13580:	fa00 f404 	lsl.w	r4, r0, r4
   13584:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   13588:	bd70      	pop	{r4, r5, r6, pc}
   1358a:	bf00      	nop
   1358c:	200005f8 	.word	0x200005f8
   13590:	20000f94 	.word	0x20000f94
   13594:	200005e0 	.word	0x200005e0
   13598:	40011000 	.word	0x40011000

0001359c <compare_int_lock>:
{
   1359c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1359e:	2301      	movs	r3, #1
   135a0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   135a2:	4a11      	ldr	r2, [pc, #68]	; (135e8 <compare_int_lock+0x4c>)
   135a4:	f3bf 8f5b 	dmb	ish
   135a8:	43dc      	mvns	r4, r3
   135aa:	e852 1f00 	ldrex	r1, [r2]
   135ae:	ea01 0c04 	and.w	ip, r1, r4
   135b2:	e842 ce00 	strex	lr, ip, [r2]
   135b6:	f1be 0f00 	cmp.w	lr, #0
   135ba:	d1f6      	bne.n	135aa <compare_int_lock+0xe>
   135bc:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   135c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   135c4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   135c8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   135cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   135d0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   135d4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   135d8:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   135dc:	420b      	tst	r3, r1
}
   135de:	bf14      	ite	ne
   135e0:	2001      	movne	r0, #1
   135e2:	2000      	moveq	r0, #0
   135e4:	bd10      	pop	{r4, pc}
   135e6:	bf00      	nop
   135e8:	20000f90 	.word	0x20000f90

000135ec <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   135ec:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   135ee:	4a12      	ldr	r2, [pc, #72]	; (13638 <compare_int_unlock.part.0+0x4c>)
   135f0:	f3bf 8f5b 	dmb	ish
   135f4:	4083      	lsls	r3, r0
   135f6:	e852 1f00 	ldrex	r1, [r2]
   135fa:	4319      	orrs	r1, r3
   135fc:	e842 1c00 	strex	ip, r1, [r2]
   13600:	f1bc 0f00 	cmp.w	ip, #0
   13604:	d1f7      	bne.n	135f6 <compare_int_unlock.part.0+0xa>
   13606:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1360a:	4a0c      	ldr	r2, [pc, #48]	; (1363c <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1360c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13610:	4083      	lsls	r3, r0
   13612:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13616:	4b0a      	ldr	r3, [pc, #40]	; (13640 <compare_int_unlock.part.0+0x54>)
   13618:	f3bf 8f5b 	dmb	ish
   1361c:	681b      	ldr	r3, [r3, #0]
   1361e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   13622:	fa23 f000 	lsr.w	r0, r3, r0
   13626:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13628:	bf42      	ittt	mi
   1362a:	4b06      	ldrmi	r3, [pc, #24]	; (13644 <compare_int_unlock.part.0+0x58>)
   1362c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   13630:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   13634:	4770      	bx	lr
   13636:	bf00      	nop
   13638:	20000f90 	.word	0x20000f90
   1363c:	40011000 	.word	0x40011000
   13640:	20000f8c 	.word	0x20000f8c
   13644:	e000e100 	.word	0xe000e100

00013648 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   13648:	4b0d      	ldr	r3, [pc, #52]	; (13680 <z_nrf_rtc_timer_read+0x38>)
   1364a:	681b      	ldr	r3, [r3, #0]
   1364c:	0a19      	lsrs	r1, r3, #8
   1364e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   13650:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   13654:	4b0b      	ldr	r3, [pc, #44]	; (13684 <z_nrf_rtc_timer_read+0x3c>)
   13656:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1365a:	18c0      	adds	r0, r0, r3
   1365c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   13660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   13664:	d20a      	bcs.n	1367c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   13666:	4b08      	ldr	r3, [pc, #32]	; (13688 <z_nrf_rtc_timer_read+0x40>)
   13668:	e9d3 2300 	ldrd	r2, r3, [r3]
   1366c:	4299      	cmp	r1, r3
   1366e:	bf08      	it	eq
   13670:	4290      	cmpeq	r0, r2
   13672:	d203      	bcs.n	1367c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   13674:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   13678:	f141 0100 	adc.w	r1, r1, #0
}
   1367c:	4770      	bx	lr
   1367e:	bf00      	nop
   13680:	20000f94 	.word	0x20000f94
   13684:	40011000 	.word	0x40011000
   13688:	200005e0 	.word	0x200005e0

0001368c <compare_set>:
{
   1368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13690:	b085      	sub	sp, #20
   13692:	4616      	mov	r6, r2
   13694:	461f      	mov	r7, r3
   13696:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   13698:	f7ff ff80 	bl	1359c <compare_int_lock>
   1369c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1369e:	f7ff ffd3 	bl	13648 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   136a2:	42b9      	cmp	r1, r7
   136a4:	bf08      	it	eq
   136a6:	42b0      	cmpeq	r0, r6
   136a8:	d27f      	bcs.n	137aa <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   136aa:	ebb6 0800 	subs.w	r8, r6, r0
   136ae:	eb67 0901 	sbc.w	r9, r7, r1
   136b2:	2300      	movs	r3, #0
   136b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   136b8:	454b      	cmp	r3, r9
   136ba:	bf08      	it	eq
   136bc:	4542      	cmpeq	r2, r8
   136be:	f0c0 8085 	bcc.w	137cc <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   136c2:	4b44      	ldr	r3, [pc, #272]	; (137d4 <compare_set+0x148>)
   136c4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   136c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   136cc:	429f      	cmp	r7, r3
   136ce:	bf08      	it	eq
   136d0:	4296      	cmpeq	r6, r2
   136d2:	d054      	beq.n	1377e <compare_set+0xf2>
   136d4:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   136d8:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   136dc:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   136e0:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   136e4:	fa0b f205 	lsl.w	r2, fp, r5
   136e8:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   136ec:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   136f0:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   136f4:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   136f6:	4a38      	ldr	r2, [pc, #224]	; (137d8 <compare_set+0x14c>)
    return p_reg->CC[ch];
   136f8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   136fc:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13700:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   13704:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   13708:	461c      	mov	r4, r3
   1370a:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   1370c:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13710:	eba0 000a 	sub.w	r0, r0, sl
   13714:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13718:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1371c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1371e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   13722:	d105      	bne.n	13730 <compare_set+0xa4>
   13724:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   13726:	2013      	movs	r0, #19
   13728:	f008 f98f 	bl	1ba4a <z_impl_k_busy_wait>
   1372c:	4a2a      	ldr	r2, [pc, #168]	; (137d8 <compare_set+0x14c>)
   1372e:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   13730:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   13732:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   13736:	eba4 000c 	sub.w	r0, r4, ip
   1373a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1373e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13742:	bf88      	it	hi
   13744:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13746:	2000      	movs	r0, #0
   13748:	f8c8 0000 	str.w	r0, [r8]
   1374c:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   13750:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13754:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   13758:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1375c:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   13760:	4582      	cmp	sl, r0
   13762:	d006      	beq.n	13772 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   13764:	1a20      	subs	r0, r4, r0
   13766:	3802      	subs	r0, #2
   13768:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1376c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13770:	d819      	bhi.n	137a6 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   13772:	1ae4      	subs	r4, r4, r3
   13774:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   13778:	1932      	adds	r2, r6, r4
   1377a:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   1377e:	4c15      	ldr	r4, [pc, #84]	; (137d4 <compare_set+0x148>)
   13780:	0129      	lsls	r1, r5, #4
   13782:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   13786:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   1378a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   1378c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   1378e:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   13790:	6043      	str	r3, [r0, #4]
	return ret;
   13792:	2400      	movs	r4, #0
	if (key) {
   13794:	9b01      	ldr	r3, [sp, #4]
   13796:	b113      	cbz	r3, 1379e <compare_set+0x112>
   13798:	4628      	mov	r0, r5
   1379a:	f7ff ff27 	bl	135ec <compare_int_unlock.part.0>
}
   1379e:	4620      	mov	r0, r4
   137a0:	b005      	add	sp, #20
   137a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137a6:	4620      	mov	r0, r4
   137a8:	e7b0      	b.n	1370c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   137aa:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   137ac:	4a0b      	ldr	r2, [pc, #44]	; (137dc <compare_set+0x150>)
   137ae:	f3bf 8f5b 	dmb	ish
   137b2:	40ab      	lsls	r3, r5
   137b4:	e852 1f00 	ldrex	r1, [r2]
   137b8:	4319      	orrs	r1, r3
   137ba:	e842 1000 	strex	r0, r1, [r2]
   137be:	2800      	cmp	r0, #0
   137c0:	d1f8      	bne.n	137b4 <compare_set+0x128>
   137c2:	f3bf 8f5b 	dmb	ish
   137c6:	4632      	mov	r2, r6
   137c8:	463b      	mov	r3, r7
   137ca:	e7d8      	b.n	1377e <compare_set+0xf2>
			return -EINVAL;
   137cc:	f06f 0415 	mvn.w	r4, #21
   137d0:	e7e0      	b.n	13794 <compare_set+0x108>
   137d2:	bf00      	nop
   137d4:	200005e8 	.word	0x200005e8
   137d8:	40011000 	.word	0x40011000
   137dc:	20000f8c 	.word	0x20000f8c

000137e0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   137e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   137e2:	4b19      	ldr	r3, [pc, #100]	; (13848 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   137e4:	4d19      	ldr	r5, [pc, #100]	; (1384c <sys_clock_driver_init+0x6c>)
   137e6:	2400      	movs	r4, #0
   137e8:	f04f 30ff 	mov.w	r0, #4294967295
   137ec:	f04f 31ff 	mov.w	r1, #4294967295
   137f0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   137f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   137f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   137fc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13800:	4b13      	ldr	r3, [pc, #76]	; (13850 <sys_clock_driver_init+0x70>)
   13802:	2602      	movs	r6, #2
   13804:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   13808:	2101      	movs	r1, #1
   1380a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1380e:	2011      	movs	r0, #17
   13810:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   13814:	4622      	mov	r2, r4
   13816:	f7fd fc9d 	bl	11154 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1381a:	2011      	movs	r0, #17
   1381c:	f7fd fc68 	bl	110f0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13820:	4a0c      	ldr	r2, [pc, #48]	; (13854 <sys_clock_driver_init+0x74>)
   13822:	2301      	movs	r3, #1
   13824:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   13826:	4a0c      	ldr	r2, [pc, #48]	; (13858 <sys_clock_driver_init+0x78>)
   13828:	602b      	str	r3, [r5, #0]
   1382a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1382c:	4b0b      	ldr	r3, [pc, #44]	; (1385c <sys_clock_driver_init+0x7c>)
   1382e:	4a0c      	ldr	r2, [pc, #48]	; (13860 <sys_clock_driver_init+0x80>)
   13830:	9300      	str	r3, [sp, #0]
   13832:	9401      	str	r4, [sp, #4]
   13834:	2300      	movs	r3, #0
   13836:	4620      	mov	r0, r4
   13838:	f7ff ff28 	bl	1368c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1383c:	4630      	mov	r0, r6
   1383e:	f7fe fcc9 	bl	121d4 <z_nrf_clock_control_lf_on>

	return 0;
}
   13842:	4620      	mov	r0, r4
   13844:	b002      	add	sp, #8
   13846:	bd70      	pop	{r4, r5, r6, pc}
   13848:	200005e8 	.word	0x200005e8
   1384c:	40011000 	.word	0x40011000
   13850:	e000e100 	.word	0xe000e100
   13854:	40011008 	.word	0x40011008
   13858:	20000f90 	.word	0x20000f90
   1385c:	00013525 	.word	0x00013525
   13860:	007fffff 	.word	0x007fffff

00013864 <rtc_nrf_isr>:
{
   13864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   13868:	4c34      	ldr	r4, [pc, #208]	; (1393c <rtc_nrf_isr+0xd8>)
   1386a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1386e:	079a      	lsls	r2, r3, #30
   13870:	d509      	bpl.n	13886 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13872:	4b33      	ldr	r3, [pc, #204]	; (13940 <rtc_nrf_isr+0xdc>)
   13874:	681a      	ldr	r2, [r3, #0]
   13876:	b132      	cbz	r2, 13886 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13878:	2200      	movs	r2, #0
   1387a:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   1387c:	4a31      	ldr	r2, [pc, #196]	; (13944 <rtc_nrf_isr+0xe0>)
   1387e:	681b      	ldr	r3, [r3, #0]
   13880:	6813      	ldr	r3, [r2, #0]
   13882:	3301      	adds	r3, #1
   13884:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   13886:	f04f 0320 	mov.w	r3, #32
   1388a:	f3ef 8211 	mrs	r2, BASEPRI
   1388e:	f383 8812 	msr	BASEPRI_MAX, r3
   13892:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   13896:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1389a:	03db      	lsls	r3, r3, #15
   1389c:	d512      	bpl.n	138c4 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1389e:	f3bf 8f5b 	dmb	ish
   138a2:	4b29      	ldr	r3, [pc, #164]	; (13948 <rtc_nrf_isr+0xe4>)
   138a4:	e853 1f00 	ldrex	r1, [r3]
   138a8:	f021 0001 	bic.w	r0, r1, #1
   138ac:	e843 0600 	strex	r6, r0, [r3]
   138b0:	2e00      	cmp	r6, #0
   138b2:	d1f7      	bne.n	138a4 <rtc_nrf_isr+0x40>
   138b4:	f3bf 8f5b 	dmb	ish
   138b8:	4b24      	ldr	r3, [pc, #144]	; (1394c <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   138ba:	2900      	cmp	r1, #0
   138bc:	d136      	bne.n	1392c <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   138be:	6819      	ldr	r1, [r3, #0]
		if (result) {
   138c0:	2900      	cmp	r1, #0
   138c2:	d133      	bne.n	1392c <rtc_nrf_isr+0xc8>
{
   138c4:	2300      	movs	r3, #0
	__asm__ volatile(
   138c6:	f382 8811 	msr	BASEPRI, r2
   138ca:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   138ce:	b353      	cbz	r3, 13926 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
   138d0:	f7ff feba 	bl	13648 <z_nrf_rtc_timer_read>
   138d4:	4606      	mov	r6, r0
	__asm__ volatile(
   138d6:	f04f 0320 	mov.w	r3, #32
   138da:	f3ef 8011 	mrs	r0, BASEPRI
   138de:	f383 8812 	msr	BASEPRI_MAX, r3
   138e2:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   138e6:	4b1a      	ldr	r3, [pc, #104]	; (13950 <rtc_nrf_isr+0xec>)
   138e8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   138ec:	4549      	cmp	r1, r9
   138ee:	bf08      	it	eq
   138f0:	4546      	cmpeq	r6, r8
   138f2:	f04f 0200 	mov.w	r2, #0
   138f6:	d31e      	bcc.n	13936 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   138f8:	f04f 36ff 	mov.w	r6, #4294967295
   138fc:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   13900:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   13904:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   13908:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1390a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1390e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   13912:	f380 8811 	msr	BASEPRI, r0
   13916:	f3bf 8f6f 	isb	sy
		if (handler) {
   1391a:	b121      	cbz	r1, 13926 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
   1391c:	9500      	str	r5, [sp, #0]
   1391e:	4642      	mov	r2, r8
   13920:	464b      	mov	r3, r9
   13922:	2000      	movs	r0, #0
   13924:	4788      	blx	r1
}
   13926:	b003      	add	sp, #12
   13928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1392c:	2100      	movs	r1, #0
   1392e:	6019      	str	r1, [r3, #0]
   13930:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   13932:	2301      	movs	r3, #1
}
   13934:	e7c7      	b.n	138c6 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   13936:	4611      	mov	r1, r2
   13938:	e7eb      	b.n	13912 <rtc_nrf_isr+0xae>
   1393a:	bf00      	nop
   1393c:	40011000 	.word	0x40011000
   13940:	40011104 	.word	0x40011104
   13944:	20000f94 	.word	0x20000f94
   13948:	20000f8c 	.word	0x20000f8c
   1394c:	40011140 	.word	0x40011140
   13950:	200005e8 	.word	0x200005e8

00013954 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13954:	4b14      	ldr	r3, [pc, #80]	; (139a8 <sys_clock_set_timeout+0x54>)
{
   13956:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13958:	f1b0 3fff 	cmp.w	r0, #4294967295
   1395c:	bf08      	it	eq
   1395e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13960:	1e44      	subs	r4, r0, #1
   13962:	2c00      	cmp	r4, #0
   13964:	dd1e      	ble.n	139a4 <sys_clock_set_timeout+0x50>
   13966:	429c      	cmp	r4, r3
   13968:	bfa8      	it	ge
   1396a:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1396c:	f7ff fe6c 	bl	13648 <z_nrf_rtc_timer_read>
   13970:	4b0e      	ldr	r3, [pc, #56]	; (139ac <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   13972:	490f      	ldr	r1, [pc, #60]	; (139b0 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   13974:	e9d3 2300 	ldrd	r2, r3, [r3]
   13978:	1a80      	subs	r0, r0, r2
		ticks = 0;
   1397a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1397e:	bf28      	it	cs
   13980:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13982:	3001      	adds	r0, #1
   13984:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   13986:	4808      	ldr	r0, [pc, #32]	; (139a8 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   13988:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1398a:	4284      	cmp	r4, r0
   1398c:	bf28      	it	cs
   1398e:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   13990:	1912      	adds	r2, r2, r4
   13992:	f04f 0000 	mov.w	r0, #0
   13996:	9001      	str	r0, [sp, #4]
   13998:	f143 0300 	adc.w	r3, r3, #0
   1399c:	f7ff fe76 	bl	1368c <compare_set>
}
   139a0:	b002      	add	sp, #8
   139a2:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   139a4:	2400      	movs	r4, #0
   139a6:	e7e1      	b.n	1396c <sys_clock_set_timeout+0x18>
   139a8:	007fffff 	.word	0x007fffff
   139ac:	200005f8 	.word	0x200005f8
   139b0:	00013525 	.word	0x00013525

000139b4 <sys_clock_elapsed>:
{
   139b4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   139b6:	f7ff fe47 	bl	13648 <z_nrf_rtc_timer_read>
   139ba:	4b02      	ldr	r3, [pc, #8]	; (139c4 <sys_clock_elapsed+0x10>)
   139bc:	681b      	ldr	r3, [r3, #0]
}
   139be:	1ac0      	subs	r0, r0, r3
   139c0:	bd08      	pop	{r3, pc}
   139c2:	bf00      	nop
   139c4:	200005f8 	.word	0x200005f8

000139c8 <z_impl_gpio_pin_configure>:
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   139c8:	6843      	ldr	r3, [r0, #4]
{
   139ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   139ce:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
   139d0:	f8d0 9008 	ldr.w	r9, [r0, #8]
	struct gpio_driver_data *data =
   139d4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   139d8:	2601      	movs	r6, #1
   139da:	408e      	lsls	r6, r1
   139dc:	421e      	tst	r6, r3
{
   139de:	4604      	mov	r4, r0
   139e0:	460d      	mov	r5, r1
   139e2:	4617      	mov	r7, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   139e4:	d10e      	bne.n	13a04 <z_impl_gpio_pin_configure+0x3c>
   139e6:	490e      	ldr	r1, [pc, #56]	; (13a20 <z_impl_gpio_pin_configure+0x58>)
   139e8:	4a0e      	ldr	r2, [pc, #56]	; (13a24 <z_impl_gpio_pin_configure+0x5c>)
   139ea:	480f      	ldr	r0, [pc, #60]	; (13a28 <z_impl_gpio_pin_configure+0x60>)
   139ec:	f240 23fd 	movw	r3, #765	; 0x2fd
   139f0:	f006 ff6c 	bl	1a8cc <printk>
   139f4:	480d      	ldr	r0, [pc, #52]	; (13a2c <z_impl_gpio_pin_configure+0x64>)
   139f6:	f006 ff69 	bl	1a8cc <printk>
   139fa:	480a      	ldr	r0, [pc, #40]	; (13a24 <z_impl_gpio_pin_configure+0x5c>)
   139fc:	f240 21fd 	movw	r1, #765	; 0x2fd
   13a00:	f007 f8fd 	bl	1abfe <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   13a04:	f8d8 3000 	ldr.w	r3, [r8]
   13a08:	ea23 0606 	bic.w	r6, r3, r6
   13a0c:	f8c8 6000 	str.w	r6, [r8]
	}

	return api->pin_configure(port, pin, flags);
   13a10:	f8d9 3000 	ldr.w	r3, [r9]
   13a14:	463a      	mov	r2, r7
   13a16:	4629      	mov	r1, r5
   13a18:	4620      	mov	r0, r4
}
   13a1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_configure(port, pin, flags);
   13a1e:	4718      	bx	r3
   13a20:	0001e9d4 	.word	0x0001e9d4
   13a24:	0001e9aa 	.word	0x0001e9aa
   13a28:	0001d2dc 	.word	0x0001d2dc
   13a2c:	0001ea12 	.word	0x0001ea12

00013a30 <z_impl_gpio_pin_interrupt_configure>:
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   13a30:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   13a34:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   13a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_driver_config *const cfg =
   13a3c:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
{
   13a40:	4605      	mov	r5, r0
   13a42:	460e      	mov	r6, r1
   13a44:	4614      	mov	r4, r2
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   13a46:	d142      	bne.n	13ace <z_impl_gpio_pin_interrupt_configure+0x9e>
   13a48:	4928      	ldr	r1, [pc, #160]	; (13aec <z_impl_gpio_pin_interrupt_configure+0xbc>)
   13a4a:	4a29      	ldr	r2, [pc, #164]	; (13af0 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   13a4c:	4829      	ldr	r0, [pc, #164]	; (13af4 <z_impl_gpio_pin_interrupt_configure+0xc4>)
   13a4e:	f240 2389 	movw	r3, #649	; 0x289
   13a52:	f006 ff3b 	bl	1a8cc <printk>
   13a56:	4828      	ldr	r0, [pc, #160]	; (13af8 <z_impl_gpio_pin_interrupt_configure+0xc8>)
   13a58:	f006 ff38 	bl	1a8cc <printk>
   13a5c:	f240 2189 	movw	r1, #649	; 0x289
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   13a60:	4823      	ldr	r0, [pc, #140]	; (13af0 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   13a62:	f007 f8cc 	bl	1abfe <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   13a66:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   13a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   13a6e:	d10e      	bne.n	13a8e <z_impl_gpio_pin_interrupt_configure+0x5e>
   13a70:	4922      	ldr	r1, [pc, #136]	; (13afc <z_impl_gpio_pin_interrupt_configure+0xcc>)
   13a72:	4a1f      	ldr	r2, [pc, #124]	; (13af0 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   13a74:	481f      	ldr	r0, [pc, #124]	; (13af4 <z_impl_gpio_pin_interrupt_configure+0xc4>)
   13a76:	f240 2397 	movw	r3, #663	; 0x297
   13a7a:	f006 ff27 	bl	1a8cc <printk>
   13a7e:	4820      	ldr	r0, [pc, #128]	; (13b00 <z_impl_gpio_pin_interrupt_configure+0xd0>)
   13a80:	f006 ff24 	bl	1a8cc <printk>
   13a84:	481a      	ldr	r0, [pc, #104]	; (13af0 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   13a86:	f240 2197 	movw	r1, #663	; 0x297
   13a8a:	f007 f8b8 	bl	1abfe <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   13a8e:	f8d8 2000 	ldr.w	r2, [r8]
   13a92:	2301      	movs	r3, #1
   13a94:	40b3      	lsls	r3, r6
   13a96:	4213      	tst	r3, r2
   13a98:	d10e      	bne.n	13ab8 <z_impl_gpio_pin_interrupt_configure+0x88>
   13a9a:	491a      	ldr	r1, [pc, #104]	; (13b04 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   13a9c:	4a14      	ldr	r2, [pc, #80]	; (13af0 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   13a9e:	4815      	ldr	r0, [pc, #84]	; (13af4 <z_impl_gpio_pin_interrupt_configure+0xc4>)
   13aa0:	f240 239d 	movw	r3, #669	; 0x29d
   13aa4:	f006 ff12 	bl	1a8cc <printk>
   13aa8:	4817      	ldr	r0, [pc, #92]	; (13b08 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   13aaa:	f006 ff0f 	bl	1a8cc <printk>
   13aae:	4810      	ldr	r0, [pc, #64]	; (13af0 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   13ab0:	f240 219d 	movw	r1, #669	; 0x29d
   13ab4:	f007 f8a3 	bl	1abfe <assert_post_action>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   13ab8:	69bf      	ldr	r7, [r7, #24]
   13aba:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   13abe:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
   13ac2:	4631      	mov	r1, r6
   13ac4:	4628      	mov	r0, r5
   13ac6:	46bc      	mov	ip, r7
}
   13ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   13acc:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   13ace:	2b00      	cmp	r3, #0
   13ad0:	d1c9      	bne.n	13a66 <z_impl_gpio_pin_interrupt_configure+0x36>
   13ad2:	490e      	ldr	r1, [pc, #56]	; (13b0c <z_impl_gpio_pin_interrupt_configure+0xdc>)
   13ad4:	4a06      	ldr	r2, [pc, #24]	; (13af0 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   13ad6:	4807      	ldr	r0, [pc, #28]	; (13af4 <z_impl_gpio_pin_interrupt_configure+0xc4>)
   13ad8:	f240 238d 	movw	r3, #653	; 0x28d
   13adc:	f006 fef6 	bl	1a8cc <printk>
   13ae0:	480b      	ldr	r0, [pc, #44]	; (13b10 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   13ae2:	f006 fef3 	bl	1a8cc <printk>
   13ae6:	f240 218d 	movw	r1, #653	; 0x28d
   13aea:	e7b9      	b.n	13a60 <z_impl_gpio_pin_interrupt_configure+0x30>
   13aec:	0001ea24 	.word	0x0001ea24
   13af0:	0001e9aa 	.word	0x0001e9aa
   13af4:	0001d2dc 	.word	0x0001d2dc
   13af8:	0001ea65 	.word	0x0001ea65
   13afc:	0001eae6 	.word	0x0001eae6
   13b00:	0001eb30 	.word	0x0001eb30
   13b04:	0001e9d4 	.word	0x0001e9d4
   13b08:	0001ea12 	.word	0x0001ea12
   13b0c:	0001ea91 	.word	0x0001ea91
   13b10:	0001eabb 	.word	0x0001eabb

00013b14 <gpio_pin_set_raw>:
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   13b14:	6843      	ldr	r3, [r0, #4]
{
   13b16:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   13b18:	681b      	ldr	r3, [r3, #0]
   13b1a:	2501      	movs	r5, #1
   13b1c:	408d      	lsls	r5, r1
   13b1e:	421d      	tst	r5, r3
{
   13b20:	4604      	mov	r4, r0
   13b22:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   13b24:	d10e      	bne.n	13b44 <gpio_pin_set_raw+0x30>
   13b26:	490d      	ldr	r1, [pc, #52]	; (13b5c <gpio_pin_set_raw+0x48>)
   13b28:	4a0d      	ldr	r2, [pc, #52]	; (13b60 <gpio_pin_set_raw+0x4c>)
   13b2a:	480e      	ldr	r0, [pc, #56]	; (13b64 <gpio_pin_set_raw+0x50>)
   13b2c:	f240 4391 	movw	r3, #1169	; 0x491
   13b30:	f006 fecc 	bl	1a8cc <printk>
   13b34:	480c      	ldr	r0, [pc, #48]	; (13b68 <gpio_pin_set_raw+0x54>)
   13b36:	f006 fec9 	bl	1a8cc <printk>
   13b3a:	4809      	ldr	r0, [pc, #36]	; (13b60 <gpio_pin_set_raw+0x4c>)
   13b3c:	f240 4191 	movw	r1, #1169	; 0x491
   13b40:	f007 f85d 	bl	1abfe <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   13b44:	b136      	cbz	r6, 13b54 <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
   13b46:	68a3      	ldr	r3, [r4, #8]
   13b48:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   13b4a:	4629      	mov	r1, r5
   13b4c:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   13b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   13b52:	4718      	bx	r3
   13b54:	68a3      	ldr	r3, [r4, #8]
   13b56:	691b      	ldr	r3, [r3, #16]
   13b58:	e7f7      	b.n	13b4a <gpio_pin_set_raw+0x36>
   13b5a:	bf00      	nop
   13b5c:	0001e9d4 	.word	0x0001e9d4
   13b60:	0001e9aa 	.word	0x0001e9aa
   13b64:	0001d2dc 	.word	0x0001d2dc
   13b68:	0001ea12 	.word	0x0001ea12

00013b6c <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   13b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   13b70:	2400      	movs	r4, #0
   13b72:	4f23      	ldr	r7, [pc, #140]	; (13c00 <get_buttons+0x94>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
		int val;

		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   13b74:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 13c18 <get_buttons+0xac>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   13b78:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 13c1c <get_buttons+0xb0>
   13b7c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 13c20 <get_buttons+0xb4>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13b80:	4625      	mov	r5, r4
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   13b82:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   13b86:	f857 bb04 	ldr.w	fp, [r7], #4
   13b8a:	791b      	ldrb	r3, [r3, #4]
   13b8c:	2601      	movs	r6, #1
   13b8e:	409e      	lsls	r6, r3
   13b90:	f8db 3004 	ldr.w	r3, [fp, #4]
   13b94:	681b      	ldr	r3, [r3, #0]
   13b96:	421e      	tst	r6, r3
   13b98:	d10e      	bne.n	13bb8 <get_buttons+0x4c>
   13b9a:	4651      	mov	r1, sl
   13b9c:	4819      	ldr	r0, [pc, #100]	; (13c04 <get_buttons+0x98>)
   13b9e:	f240 433a 	movw	r3, #1082	; 0x43a
   13ba2:	4642      	mov	r2, r8
   13ba4:	f006 fe92 	bl	1a8cc <printk>
   13ba8:	4817      	ldr	r0, [pc, #92]	; (13c08 <get_buttons+0x9c>)
   13baa:	f006 fe8f 	bl	1a8cc <printk>
   13bae:	f240 413a 	movw	r1, #1082	; 0x43a
   13bb2:	4640      	mov	r0, r8
   13bb4:	f007 f823 	bl	1abfe <assert_post_action>
	return api->port_get_raw(port, value);
   13bb8:	f8db 3008 	ldr.w	r3, [fp, #8]
   13bbc:	a901      	add	r1, sp, #4
   13bbe:	685b      	ldr	r3, [r3, #4]
   13bc0:	4658      	mov	r0, fp
   13bc2:	4798      	blx	r3
	if (ret == 0) {
   13bc4:	2800      	cmp	r0, #0
   13bc6:	d10a      	bne.n	13bde <get_buttons+0x72>
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   13bc8:	9b01      	ldr	r3, [sp, #4]
   13bca:	421e      	tst	r6, r3
   13bcc:	d003      	beq.n	13bd6 <get_buttons+0x6a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13bce:	3501      	adds	r5, #1
   13bd0:	2d04      	cmp	r5, #4
   13bd2:	d1d6      	bne.n	13b82 <get_buttons+0x16>
   13bd4:	e00f      	b.n	13bf6 <get_buttons+0x8a>
		    (!val && IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS))) {
			ret |= 1U << i;
   13bd6:	2301      	movs	r3, #1
   13bd8:	40ab      	lsls	r3, r5
   13bda:	431c      	orrs	r4, r3
   13bdc:	e7f7      	b.n	13bce <get_buttons+0x62>
		if (val < 0) {
   13bde:	daf6      	bge.n	13bce <get_buttons+0x62>
   13be0:	4b0a      	ldr	r3, [pc, #40]	; (13c0c <get_buttons+0xa0>)
   13be2:	480b      	ldr	r0, [pc, #44]	; (13c10 <get_buttons+0xa4>)
			LOG_ERR("Cannot read gpio pin");
   13be4:	490b      	ldr	r1, [pc, #44]	; (13c14 <get_buttons+0xa8>)
   13be6:	1ac0      	subs	r0, r0, r3
   13be8:	08c0      	lsrs	r0, r0, #3
   13bea:	0180      	lsls	r0, r0, #6
   13bec:	f040 0001 	orr.w	r0, r0, #1
   13bf0:	f007 f81a 	bl	1ac28 <log_string_sync>
			return 0;
   13bf4:	2400      	movs	r4, #0
		}
	}

	return ret;
}
   13bf6:	4620      	mov	r0, r4
   13bf8:	b003      	add	sp, #12
   13bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bfe:	bf00      	nop
   13c00:	20000f98 	.word	0x20000f98
   13c04:	0001d2dc 	.word	0x0001d2dc
   13c08:	0001ea12 	.word	0x0001ea12
   13c0c:	0001c940 	.word	0x0001c940
   13c10:	0001c990 	.word	0x0001c990
   13c14:	0001eb75 	.word	0x0001eb75
   13c18:	0001cd84 	.word	0x0001cd84
   13c1c:	0001e9aa 	.word	0x0001e9aa
   13c20:	0001e9d4 	.word	0x0001e9d4

00013c24 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   13c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   13c28:	f8df 8060 	ldr.w	r8, [pc, #96]	; 13c8c <dk_set_leds_state.part.0+0x68>
   13c2c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 13c90 <dk_set_leds_state.part.0+0x6c>
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   13c30:	4606      	mov	r6, r0
   13c32:	460f      	mov	r7, r1
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   13c34:	2400      	movs	r4, #0
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   13c36:	fa26 f204 	lsr.w	r2, r6, r4
   13c3a:	fa27 f304 	lsr.w	r3, r7, r4
   13c3e:	4313      	orrs	r3, r2
   13c40:	07db      	lsls	r3, r3, #31
   13c42:	d518      	bpl.n	13c76 <dk_set_leds_state.part.0+0x52>
			int err = gpio_pin_set_raw(led_devs[i],
   13c44:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   13c48:	43d2      	mvns	r2, r2
   13c4a:	7919      	ldrb	r1, [r3, #4]
   13c4c:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   13c50:	f002 0201 	and.w	r2, r2, #1
   13c54:	f7ff ff5e 	bl	13b14 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   13c58:	4605      	mov	r5, r0
   13c5a:	b160      	cbz	r0, 13c76 <dk_set_leds_state.part.0+0x52>
   13c5c:	4808      	ldr	r0, [pc, #32]	; (13c80 <dk_set_leds_state.part.0+0x5c>)
   13c5e:	4b09      	ldr	r3, [pc, #36]	; (13c84 <dk_set_leds_state.part.0+0x60>)
				LOG_ERR("Cannot write LED gpio");
   13c60:	4909      	ldr	r1, [pc, #36]	; (13c88 <dk_set_leds_state.part.0+0x64>)
   13c62:	1a1b      	subs	r3, r3, r0
   13c64:	08db      	lsrs	r3, r3, #3
   13c66:	019b      	lsls	r3, r3, #6
   13c68:	f043 0001 	orr.w	r0, r3, #1
   13c6c:	f006 ffdc 	bl	1ac28 <log_string_sync>
			}
		}
	}

	return 0;
}
   13c70:	4628      	mov	r0, r5
   13c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   13c76:	3401      	adds	r4, #1
   13c78:	2c04      	cmp	r4, #4
   13c7a:	d1dc      	bne.n	13c36 <dk_set_leds_state.part.0+0x12>
	return 0;
   13c7c:	2500      	movs	r5, #0
   13c7e:	e7f7      	b.n	13c70 <dk_set_leds_state.part.0+0x4c>
   13c80:	0001c940 	.word	0x0001c940
   13c84:	0001c990 	.word	0x0001c990
   13c88:	0001eb8a 	.word	0x0001eb8a
   13c8c:	0001cda4 	.word	0x0001cda4
   13c90:	20000fdc 	.word	0x20000fdc

00013c94 <button_pressed>:
{
   13c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   13c96:	f04f 0320 	mov.w	r3, #32
   13c9a:	f3ef 8511 	mrs	r5, BASEPRI
   13c9e:	f383 8812 	msr	BASEPRI_MAX, r3
   13ca2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13ca6:	482f      	ldr	r0, [pc, #188]	; (13d64 <button_pressed+0xd0>)
   13ca8:	f002 fa9e 	bl	161e8 <z_spin_lock_valid>
   13cac:	b968      	cbnz	r0, 13cca <button_pressed+0x36>
   13cae:	4a2e      	ldr	r2, [pc, #184]	; (13d68 <button_pressed+0xd4>)
   13cb0:	492e      	ldr	r1, [pc, #184]	; (13d6c <button_pressed+0xd8>)
   13cb2:	482f      	ldr	r0, [pc, #188]	; (13d70 <button_pressed+0xdc>)
   13cb4:	2381      	movs	r3, #129	; 0x81
   13cb6:	f006 fe09 	bl	1a8cc <printk>
   13cba:	492a      	ldr	r1, [pc, #168]	; (13d64 <button_pressed+0xd0>)
   13cbc:	482d      	ldr	r0, [pc, #180]	; (13d74 <button_pressed+0xe0>)
   13cbe:	f006 fe05 	bl	1a8cc <printk>
   13cc2:	4829      	ldr	r0, [pc, #164]	; (13d68 <button_pressed+0xd4>)
   13cc4:	2181      	movs	r1, #129	; 0x81
   13cc6:	f006 ff9a 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   13cca:	4826      	ldr	r0, [pc, #152]	; (13d64 <button_pressed+0xd0>)
   13ccc:	4e2a      	ldr	r6, [pc, #168]	; (13d78 <button_pressed+0xe4>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   13cce:	4f2b      	ldr	r7, [pc, #172]	; (13d7c <button_pressed+0xe8>)
   13cd0:	f002 faa8 	bl	16224 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   13cd4:	2400      	movs	r4, #0
			err = gpio_pin_interrupt_configure(button_devs[i],
   13cd6:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   13cda:	f856 0b04 	ldr.w	r0, [r6], #4
   13cde:	7919      	ldrb	r1, [r3, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   13ce0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   13ce4:	3401      	adds	r4, #1
   13ce6:	f7ff fea3 	bl	13a30 <z_impl_gpio_pin_interrupt_configure>
   13cea:	2c04      	cmp	r4, #4
   13cec:	d00c      	beq.n	13d08 <button_pressed+0x74>
   13cee:	2800      	cmp	r0, #0
   13cf0:	d0f1      	beq.n	13cd6 <button_pressed+0x42>
   13cf2:	4b23      	ldr	r3, [pc, #140]	; (13d80 <button_pressed+0xec>)
   13cf4:	4823      	ldr	r0, [pc, #140]	; (13d84 <button_pressed+0xf0>)
		LOG_ERR("Cannot disable callbacks");
   13cf6:	4924      	ldr	r1, [pc, #144]	; (13d88 <button_pressed+0xf4>)
   13cf8:	1ac0      	subs	r0, r0, r3
   13cfa:	08c0      	lsrs	r0, r0, #3
   13cfc:	0180      	lsls	r0, r0, #6
   13cfe:	f040 0001 	orr.w	r0, r0, #1
   13d02:	f006 ff91 	bl	1ac28 <log_string_sync>
   13d06:	e001      	b.n	13d0c <button_pressed+0x78>
	if (err) {
   13d08:	2800      	cmp	r0, #0
   13d0a:	d1f2      	bne.n	13cf2 <button_pressed+0x5e>
	switch (state) {
   13d0c:	4b1f      	ldr	r3, [pc, #124]	; (13d8c <button_pressed+0xf8>)
   13d0e:	781a      	ldrb	r2, [r3, #0]
   13d10:	b9ea      	cbnz	r2, 13d4e <button_pressed+0xba>
		state = STATE_SCANNING;
   13d12:	2201      	movs	r2, #1
   13d14:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   13d16:	481e      	ldr	r0, [pc, #120]	; (13d90 <button_pressed+0xfc>)
   13d18:	2221      	movs	r2, #33	; 0x21
   13d1a:	2300      	movs	r3, #0
   13d1c:	f003 f93c 	bl	16f98 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13d20:	4810      	ldr	r0, [pc, #64]	; (13d64 <button_pressed+0xd0>)
   13d22:	f002 fa6f 	bl	16204 <z_spin_unlock_valid>
   13d26:	b968      	cbnz	r0, 13d44 <button_pressed+0xb0>
   13d28:	4a0f      	ldr	r2, [pc, #60]	; (13d68 <button_pressed+0xd4>)
   13d2a:	491a      	ldr	r1, [pc, #104]	; (13d94 <button_pressed+0x100>)
   13d2c:	4810      	ldr	r0, [pc, #64]	; (13d70 <button_pressed+0xdc>)
   13d2e:	23ac      	movs	r3, #172	; 0xac
   13d30:	f006 fdcc 	bl	1a8cc <printk>
   13d34:	490b      	ldr	r1, [pc, #44]	; (13d64 <button_pressed+0xd0>)
   13d36:	4818      	ldr	r0, [pc, #96]	; (13d98 <button_pressed+0x104>)
   13d38:	f006 fdc8 	bl	1a8cc <printk>
   13d3c:	480a      	ldr	r0, [pc, #40]	; (13d68 <button_pressed+0xd4>)
   13d3e:	21ac      	movs	r1, #172	; 0xac
   13d40:	f006 ff5d 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   13d44:	f385 8811 	msr	BASEPRI, r5
   13d48:	f3bf 8f6f 	isb	sy
}
   13d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   13d4e:	4a13      	ldr	r2, [pc, #76]	; (13d9c <button_pressed+0x108>)
   13d50:	4913      	ldr	r1, [pc, #76]	; (13da0 <button_pressed+0x10c>)
   13d52:	4807      	ldr	r0, [pc, #28]	; (13d70 <button_pressed+0xdc>)
   13d54:	23e8      	movs	r3, #232	; 0xe8
   13d56:	f006 fdb9 	bl	1a8cc <printk>
   13d5a:	4810      	ldr	r0, [pc, #64]	; (13d9c <button_pressed+0x108>)
   13d5c:	21e8      	movs	r1, #232	; 0xe8
   13d5e:	f006 ff4e 	bl	1abfe <assert_post_action>
		break;
   13d62:	e7dd      	b.n	13d20 <button_pressed+0x8c>
   13d64:	20000fec 	.word	0x20000fec
   13d68:	0001d83f 	.word	0x0001d83f
   13d6c:	0001d891 	.word	0x0001d891
   13d70:	0001d2dc 	.word	0x0001d2dc
   13d74:	0001d8a6 	.word	0x0001d8a6
   13d78:	20000f98 	.word	0x20000f98
   13d7c:	0001cd84 	.word	0x0001cd84
   13d80:	0001c940 	.word	0x0001c940
   13d84:	0001c990 	.word	0x0001c990
   13d88:	0001eba0 	.word	0x0001eba0
   13d8c:	200025b9 	.word	0x200025b9
   13d90:	20000600 	.word	0x20000600
   13d94:	0001d865 	.word	0x0001d865
   13d98:	0001d87c 	.word	0x0001d87c
   13d9c:	0001ebb9 	.word	0x0001ebb9
   13da0:	000205d8 	.word	0x000205d8

00013da4 <buttons_scan_fn>:
{
   13da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	button_scan = get_buttons();
   13da8:	f7ff fee0 	bl	13b6c <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13dac:	f3bf 8f5b 	dmb	ish
   13db0:	4b53      	ldr	r3, [pc, #332]	; (13f00 <buttons_scan_fn+0x15c>)
   13db2:	4604      	mov	r4, r0
   13db4:	e853 2f00 	ldrex	r2, [r3]
   13db8:	e843 4100 	strex	r1, r4, [r3]
   13dbc:	2900      	cmp	r1, #0
   13dbe:	d1f9      	bne.n	13db4 <buttons_scan_fn+0x10>
   13dc0:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   13dc4:	4b4f      	ldr	r3, [pc, #316]	; (13f04 <buttons_scan_fn+0x160>)
   13dc6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 13f50 <buttons_scan_fn+0x1ac>
   13dca:	781a      	ldrb	r2, [r3, #0]
   13dcc:	bb72      	cbnz	r2, 13e2c <buttons_scan_fn+0x88>
		if (button_scan != last_button_scan) {
   13dce:	f8d8 6000 	ldr.w	r6, [r8]
   13dd2:	42a6      	cmp	r6, r4
   13dd4:	d012      	beq.n	13dfc <buttons_scan_fn+0x58>
	if (button_handler_cb != NULL) {
   13dd6:	4b4c      	ldr	r3, [pc, #304]	; (13f08 <buttons_scan_fn+0x164>)
   13dd8:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
   13dda:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   13ddc:	b10b      	cbz	r3, 13de2 <buttons_scan_fn+0x3e>
		button_handler_cb(button_state, has_changed);
   13dde:	4631      	mov	r1, r6
   13de0:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   13de2:	f04f 33ff 	mov.w	r3, #4294967295
   13de6:	4849      	ldr	r0, [pc, #292]	; (13f0c <buttons_scan_fn+0x168>)
   13de8:	f04f 32ff 	mov.w	r2, #4294967295
   13dec:	f002 fa4e 	bl	1628c <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   13df0:	4b47      	ldr	r3, [pc, #284]	; (13f10 <buttons_scan_fn+0x16c>)
   13df2:	681d      	ldr	r5, [r3, #0]
   13df4:	b96d      	cbnz	r5, 13e12 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   13df6:	4845      	ldr	r0, [pc, #276]	; (13f0c <buttons_scan_fn+0x168>)
   13df8:	f002 fb48 	bl	1648c <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   13dfc:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   13e00:	b1bc      	cbz	r4, 13e32 <buttons_scan_fn+0x8e>
}
   13e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   13e06:	4843      	ldr	r0, [pc, #268]	; (13f14 <buttons_scan_fn+0x170>)
   13e08:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13e0c:	2300      	movs	r3, #0
   13e0e:	f003 b8c3 	b.w	16f98 <k_work_reschedule>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   13e12:	3d04      	subs	r5, #4
   13e14:	2d00      	cmp	r5, #0
   13e16:	d0ee      	beq.n	13df6 <buttons_scan_fn+0x52>
			handler->cb(button_state, has_changed);
   13e18:	462f      	mov	r7, r5
   13e1a:	4631      	mov	r1, r6
   13e1c:	f857 3b04 	ldr.w	r3, [r7], #4
   13e20:	4620      	mov	r0, r4
   13e22:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   13e24:	2f00      	cmp	r7, #0
   13e26:	d0e6      	beq.n	13df6 <buttons_scan_fn+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13e28:	686d      	ldr	r5, [r5, #4]
	return node->next;
   13e2a:	e7e3      	b.n	13df4 <buttons_scan_fn+0x50>
		initial_run = false;
   13e2c:	2200      	movs	r2, #0
   13e2e:	701a      	strb	r2, [r3, #0]
   13e30:	e7e4      	b.n	13dfc <buttons_scan_fn+0x58>
	__asm__ volatile(
   13e32:	f04f 0320 	mov.w	r3, #32
   13e36:	f3ef 8711 	mrs	r7, BASEPRI
   13e3a:	f383 8812 	msr	BASEPRI_MAX, r3
   13e3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13e42:	4835      	ldr	r0, [pc, #212]	; (13f18 <buttons_scan_fn+0x174>)
   13e44:	f002 f9d0 	bl	161e8 <z_spin_lock_valid>
   13e48:	b968      	cbnz	r0, 13e66 <buttons_scan_fn+0xc2>
   13e4a:	4a34      	ldr	r2, [pc, #208]	; (13f1c <buttons_scan_fn+0x178>)
   13e4c:	4934      	ldr	r1, [pc, #208]	; (13f20 <buttons_scan_fn+0x17c>)
   13e4e:	4835      	ldr	r0, [pc, #212]	; (13f24 <buttons_scan_fn+0x180>)
   13e50:	2381      	movs	r3, #129	; 0x81
   13e52:	f006 fd3b 	bl	1a8cc <printk>
   13e56:	4930      	ldr	r1, [pc, #192]	; (13f18 <buttons_scan_fn+0x174>)
   13e58:	4833      	ldr	r0, [pc, #204]	; (13f28 <buttons_scan_fn+0x184>)
   13e5a:	f006 fd37 	bl	1a8cc <printk>
   13e5e:	482f      	ldr	r0, [pc, #188]	; (13f1c <buttons_scan_fn+0x178>)
   13e60:	2181      	movs	r1, #129	; 0x81
   13e62:	f006 fecc 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   13e66:	482c      	ldr	r0, [pc, #176]	; (13f18 <buttons_scan_fn+0x174>)
   13e68:	f002 f9dc 	bl	16224 <z_spin_lock_set_owner>
		switch (state) {
   13e6c:	4b2f      	ldr	r3, [pc, #188]	; (13f2c <buttons_scan_fn+0x188>)
   13e6e:	781a      	ldrb	r2, [r3, #0]
   13e70:	2a01      	cmp	r2, #1
   13e72:	d136      	bne.n	13ee2 <buttons_scan_fn+0x13e>
			state = STATE_WAITING;
   13e74:	2200      	movs	r2, #0
   13e76:	4e2e      	ldr	r6, [pc, #184]	; (13f30 <buttons_scan_fn+0x18c>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   13e78:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 13f54 <buttons_scan_fn+0x1b0>
			state = STATE_WAITING;
   13e7c:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   13e7e:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   13e82:	f856 0b04 	ldr.w	r0, [r6], #4
   13e86:	7919      	ldrb	r1, [r3, #4]
   13e88:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   13e8c:	f7ff fdd0 	bl	13a30 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   13e90:	3401      	adds	r4, #1
   13e92:	2c04      	cmp	r4, #4
   13e94:	4605      	mov	r5, r0
   13e96:	d001      	beq.n	13e9c <buttons_scan_fn+0xf8>
   13e98:	2800      	cmp	r0, #0
   13e9a:	d0f0      	beq.n	13e7e <buttons_scan_fn+0xda>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13e9c:	481e      	ldr	r0, [pc, #120]	; (13f18 <buttons_scan_fn+0x174>)
   13e9e:	f002 f9b1 	bl	16204 <z_spin_unlock_valid>
   13ea2:	b968      	cbnz	r0, 13ec0 <buttons_scan_fn+0x11c>
   13ea4:	4a1d      	ldr	r2, [pc, #116]	; (13f1c <buttons_scan_fn+0x178>)
   13ea6:	4923      	ldr	r1, [pc, #140]	; (13f34 <buttons_scan_fn+0x190>)
   13ea8:	481e      	ldr	r0, [pc, #120]	; (13f24 <buttons_scan_fn+0x180>)
   13eaa:	23ac      	movs	r3, #172	; 0xac
   13eac:	f006 fd0e 	bl	1a8cc <printk>
   13eb0:	4919      	ldr	r1, [pc, #100]	; (13f18 <buttons_scan_fn+0x174>)
   13eb2:	4821      	ldr	r0, [pc, #132]	; (13f38 <buttons_scan_fn+0x194>)
   13eb4:	f006 fd0a 	bl	1a8cc <printk>
   13eb8:	4818      	ldr	r0, [pc, #96]	; (13f1c <buttons_scan_fn+0x178>)
   13eba:	21ac      	movs	r1, #172	; 0xac
   13ebc:	f006 fe9f 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   13ec0:	f387 8811 	msr	BASEPRI, r7
   13ec4:	f3bf 8f6f 	isb	sy
		if (err) {
   13ec8:	b1bd      	cbz	r5, 13efa <buttons_scan_fn+0x156>
   13eca:	481c      	ldr	r0, [pc, #112]	; (13f3c <buttons_scan_fn+0x198>)
   13ecc:	4b1c      	ldr	r3, [pc, #112]	; (13f40 <buttons_scan_fn+0x19c>)
			LOG_ERR("Cannot enable callbacks");
   13ece:	491d      	ldr	r1, [pc, #116]	; (13f44 <buttons_scan_fn+0x1a0>)
   13ed0:	1ac0      	subs	r0, r0, r3
   13ed2:	08c0      	lsrs	r0, r0, #3
   13ed4:	0180      	lsls	r0, r0, #6
}
   13ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Cannot enable callbacks");
   13eda:	f040 0001 	orr.w	r0, r0, #1
   13ede:	f006 bea3 	b.w	1ac28 <log_string_sync>
			__ASSERT_NO_MSG(false);
   13ee2:	4a19      	ldr	r2, [pc, #100]	; (13f48 <buttons_scan_fn+0x1a4>)
   13ee4:	4919      	ldr	r1, [pc, #100]	; (13f4c <buttons_scan_fn+0x1a8>)
   13ee6:	480f      	ldr	r0, [pc, #60]	; (13f24 <buttons_scan_fn+0x180>)
   13ee8:	23b1      	movs	r3, #177	; 0xb1
   13eea:	f006 fcef 	bl	1a8cc <printk>
   13eee:	4816      	ldr	r0, [pc, #88]	; (13f48 <buttons_scan_fn+0x1a4>)
   13ef0:	21b1      	movs	r1, #177	; 0xb1
   13ef2:	f006 fe84 	bl	1abfe <assert_post_action>
		int err = 0;
   13ef6:	2500      	movs	r5, #0
			break;
   13ef8:	e7d0      	b.n	13e9c <buttons_scan_fn+0xf8>
}
   13efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13efe:	bf00      	nop
   13f00:	20000ff0 	.word	0x20000ff0
   13f04:	200003fe 	.word	0x200003fe
   13f08:	20000fa8 	.word	0x20000fa8
   13f0c:	20000fac 	.word	0x20000fac
   13f10:	20000fc0 	.word	0x20000fc0
   13f14:	20000600 	.word	0x20000600
   13f18:	20000fec 	.word	0x20000fec
   13f1c:	0001d83f 	.word	0x0001d83f
   13f20:	0001d891 	.word	0x0001d891
   13f24:	0001d2dc 	.word	0x0001d2dc
   13f28:	0001d8a6 	.word	0x0001d8a6
   13f2c:	200025b9 	.word	0x200025b9
   13f30:	20000f98 	.word	0x20000f98
   13f34:	0001d865 	.word	0x0001d865
   13f38:	0001d87c 	.word	0x0001d87c
   13f3c:	0001c990 	.word	0x0001c990
   13f40:	0001c940 	.word	0x0001c940
   13f44:	0001ebf7 	.word	0x0001ebf7
   13f48:	0001ebb9 	.word	0x0001ebb9
   13f4c:	000205d8 	.word	0x000205d8
   13f50:	20000fd4 	.word	0x20000fd4
   13f54:	0001cd84 	.word	0x0001cd84

00013f58 <dk_leds_init>:
{
   13f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f5a:	4d19      	ldr	r5, [pc, #100]	; (13fc0 <dk_leds_init+0x68>)
   13f5c:	4f19      	ldr	r7, [pc, #100]	; (13fc4 <dk_leds_init+0x6c>)
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   13f5e:	2600      	movs	r6, #0
		led_devs[i] = device_get_binding(led_pins[i].port);
   13f60:	6828      	ldr	r0, [r5, #0]
   13f62:	f001 fd8f 	bl	15a84 <z_impl_device_get_binding>
   13f66:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   13f6a:	b968      	cbnz	r0, 13f88 <dk_leds_init+0x30>
   13f6c:	4b16      	ldr	r3, [pc, #88]	; (13fc8 <dk_leds_init+0x70>)
   13f6e:	4817      	ldr	r0, [pc, #92]	; (13fcc <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   13f70:	4917      	ldr	r1, [pc, #92]	; (13fd0 <dk_leds_init+0x78>)
   13f72:	1ac0      	subs	r0, r0, r3
   13f74:	08c0      	lsrs	r0, r0, #3
   13f76:	0180      	lsls	r0, r0, #6
   13f78:	f040 0001 	orr.w	r0, r0, #1
   13f7c:	f006 fe54 	bl	1ac28 <log_string_sync>
			return -ENODEV;
   13f80:	f06f 0412 	mvn.w	r4, #18
}
   13f84:	4620      	mov	r0, r4
   13f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   13f88:	7929      	ldrb	r1, [r5, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   13f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
   13f8e:	f7ff fd1b 	bl	139c8 <z_impl_gpio_pin_configure>
		if (err) {
   13f92:	4604      	mov	r4, r0
   13f94:	b150      	cbz	r0, 13fac <dk_leds_init+0x54>
   13f96:	480c      	ldr	r0, [pc, #48]	; (13fc8 <dk_leds_init+0x70>)
   13f98:	4b0c      	ldr	r3, [pc, #48]	; (13fcc <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   13f9a:	490e      	ldr	r1, [pc, #56]	; (13fd4 <dk_leds_init+0x7c>)
   13f9c:	1a1b      	subs	r3, r3, r0
   13f9e:	08db      	lsrs	r3, r3, #3
   13fa0:	019b      	lsls	r3, r3, #6
   13fa2:	f043 0001 	orr.w	r0, r3, #1
   13fa6:	f006 fe3f 	bl	1ac28 <log_string_sync>
			return err;
   13faa:	e7eb      	b.n	13f84 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   13fac:	3601      	adds	r6, #1
   13fae:	2e04      	cmp	r6, #4
   13fb0:	f105 0508 	add.w	r5, r5, #8
   13fb4:	d1d4      	bne.n	13f60 <dk_leds_init+0x8>
}
   13fb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   13fba:	210f      	movs	r1, #15
   13fbc:	f7ff be32 	b.w	13c24 <dk_set_leds_state.part.0>
   13fc0:	0001cda4 	.word	0x0001cda4
   13fc4:	20000fdc 	.word	0x20000fdc
   13fc8:	0001c940 	.word	0x0001c940
   13fcc:	0001c990 	.word	0x0001c990
   13fd0:	0001ec0f 	.word	0x0001ec0f
   13fd4:	0001ec27 	.word	0x0001ec27

00013fd8 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13fd8:	4b07      	ldr	r3, [pc, #28]	; (13ff8 <dk_read_buttons+0x20>)
   13fda:	f3bf 8f5b 	dmb	ish
   13fde:	681b      	ldr	r3, [r3, #0]
   13fe0:	f3bf 8f5b 	dmb	ish
	if (button_state != NULL) {
   13fe4:	b100      	cbz	r0, 13fe8 <dk_read_buttons+0x10>
		*button_state = current_state;
   13fe6:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   13fe8:	4804      	ldr	r0, [pc, #16]	; (13ffc <dk_read_buttons+0x24>)
   13fea:	b111      	cbz	r1, 13ff2 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   13fec:	6802      	ldr	r2, [r0, #0]
   13fee:	405a      	eors	r2, r3
   13ff0:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   13ff2:	6003      	str	r3, [r0, #0]
}
   13ff4:	4770      	bx	lr
   13ff6:	bf00      	nop
   13ff8:	20000ff0 	.word	0x20000ff0
   13ffc:	20000fd8 	.word	0x20000fd8

00014000 <dk_buttons_init>:
{
   14000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   14004:	4b48      	ldr	r3, [pc, #288]	; (14128 <dk_buttons_init+0x128>)
   14006:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   14008:	4848      	ldr	r0, [pc, #288]	; (1412c <dk_buttons_init+0x12c>)
   1400a:	4d49      	ldr	r5, [pc, #292]	; (14130 <dk_buttons_init+0x130>)
   1400c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 14164 <dk_buttons_init+0x164>
   14010:	f007 fcbd 	bl	1b98e <z_impl_k_mutex_init>
   14014:	4647      	mov	r7, r8
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   14016:	2600      	movs	r6, #0
   14018:	46a9      	mov	r9, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   1401a:	6828      	ldr	r0, [r5, #0]
   1401c:	f001 fd32 	bl	15a84 <z_impl_device_get_binding>
   14020:	f847 0b04 	str.w	r0, [r7], #4
		if (!button_devs[i]) {
   14024:	b970      	cbnz	r0, 14044 <dk_buttons_init+0x44>
   14026:	4b43      	ldr	r3, [pc, #268]	; (14134 <dk_buttons_init+0x134>)
   14028:	4843      	ldr	r0, [pc, #268]	; (14138 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot bind gpio device");
   1402a:	4944      	ldr	r1, [pc, #272]	; (1413c <dk_buttons_init+0x13c>)
   1402c:	1ac0      	subs	r0, r0, r3
   1402e:	08c0      	lsrs	r0, r0, #3
   14030:	0180      	lsls	r0, r0, #6
   14032:	f040 0001 	orr.w	r0, r0, #1
   14036:	f006 fdf7 	bl	1ac28 <log_string_sync>
			return -ENODEV;
   1403a:	f06f 0412 	mvn.w	r4, #18
}
   1403e:	4620      	mov	r0, r4
   14040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   14044:	7929      	ldrb	r1, [r5, #4]
   14046:	f44f 7288 	mov.w	r2, #272	; 0x110
   1404a:	f7ff fcbd 	bl	139c8 <z_impl_gpio_pin_configure>
		if (err) {
   1404e:	4604      	mov	r4, r0
   14050:	b150      	cbz	r0, 14068 <dk_buttons_init+0x68>
   14052:	4839      	ldr	r0, [pc, #228]	; (14138 <dk_buttons_init+0x138>)
   14054:	4b37      	ldr	r3, [pc, #220]	; (14134 <dk_buttons_init+0x134>)
			LOG_ERR("Cannot configure button gpio");
   14056:	493a      	ldr	r1, [pc, #232]	; (14140 <dk_buttons_init+0x140>)
   14058:	1ac0      	subs	r0, r0, r3
   1405a:	08c0      	lsrs	r0, r0, #3
   1405c:	0180      	lsls	r0, r0, #6
			LOG_ERR("Cannot disable callbacks()");
   1405e:	f040 0001 	orr.w	r0, r0, #1
   14062:	f006 fde1 	bl	1ac28 <log_string_sync>
			return err;
   14066:	e7ea      	b.n	1403e <dk_buttons_init+0x3e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   14068:	3601      	adds	r6, #1
   1406a:	2e04      	cmp	r6, #4
   1406c:	f105 0508 	add.w	r5, r5, #8
   14070:	d1d3      	bne.n	1401a <dk_buttons_init+0x1a>
   14072:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 14164 <dk_buttons_init+0x164>
	uint32_t pin_mask = 0;
   14076:	4605      	mov	r5, r0
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   14078:	4606      	mov	r6, r0
		pin_mask |= BIT(button_pins[i].number);
   1407a:	f04f 0b01 	mov.w	fp, #1
		err = gpio_pin_interrupt_configure(button_devs[i],
   1407e:	eb09 03c6 	add.w	r3, r9, r6, lsl #3
   14082:	f85a 0b04 	ldr.w	r0, [sl], #4
   14086:	791f      	ldrb	r7, [r3, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   14088:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1408c:	4639      	mov	r1, r7
   1408e:	f7ff fccf 	bl	13a30 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   14092:	4604      	mov	r4, r0
   14094:	b130      	cbz	r0, 140a4 <dk_buttons_init+0xa4>
   14096:	4828      	ldr	r0, [pc, #160]	; (14138 <dk_buttons_init+0x138>)
   14098:	4b26      	ldr	r3, [pc, #152]	; (14134 <dk_buttons_init+0x134>)
			LOG_ERR("Cannot disable callbacks()");
   1409a:	492a      	ldr	r1, [pc, #168]	; (14144 <dk_buttons_init+0x144>)
   1409c:	1ac0      	subs	r0, r0, r3
   1409e:	08c0      	lsrs	r0, r0, #3
   140a0:	0180      	lsls	r0, r0, #6
   140a2:	e7dc      	b.n	1405e <dk_buttons_init+0x5e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   140a4:	3601      	adds	r6, #1
		pin_mask |= BIT(button_pins[i].number);
   140a6:	fa0b f707 	lsl.w	r7, fp, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   140aa:	2e04      	cmp	r6, #4
		pin_mask |= BIT(button_pins[i].number);
   140ac:	ea45 0507 	orr.w	r5, r5, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   140b0:	d1e5      	bne.n	1407e <dk_buttons_init+0x7e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   140b2:	4925      	ldr	r1, [pc, #148]	; (14148 <dk_buttons_init+0x148>)
   140b4:	4b25      	ldr	r3, [pc, #148]	; (1414c <dk_buttons_init+0x14c>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   140b6:	4606      	mov	r6, r0
	callback->pin_mask = pin_mask;
   140b8:	e9c1 3501 	strd	r3, r5, [r1, #4]

	if (api->manage_callback == NULL) {
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   140bc:	460d      	mov	r5, r1
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   140be:	f858 0b04 	ldr.w	r0, [r8], #4
	if (api->manage_callback == NULL) {
   140c2:	6883      	ldr	r3, [r0, #8]
   140c4:	69db      	ldr	r3, [r3, #28]
   140c6:	b15b      	cbz	r3, 140e0 <dk_buttons_init+0xe0>
	return api->manage_callback(port, callback, true);
   140c8:	2201      	movs	r2, #1
   140ca:	4629      	mov	r1, r5
   140cc:	4798      	blx	r3
		if (err) {
   140ce:	4604      	mov	r4, r0
   140d0:	b148      	cbz	r0, 140e6 <dk_buttons_init+0xe6>
   140d2:	4819      	ldr	r0, [pc, #100]	; (14138 <dk_buttons_init+0x138>)
   140d4:	4b17      	ldr	r3, [pc, #92]	; (14134 <dk_buttons_init+0x134>)
			LOG_ERR("Cannot add callback");
   140d6:	491e      	ldr	r1, [pc, #120]	; (14150 <dk_buttons_init+0x150>)
   140d8:	1ac0      	subs	r0, r0, r3
   140da:	08c0      	lsrs	r0, r0, #3
   140dc:	0180      	lsls	r0, r0, #6
   140de:	e7be      	b.n	1405e <dk_buttons_init+0x5e>
		return -ENOTSUP;
   140e0:	f06f 0485 	mvn.w	r4, #133	; 0x85
   140e4:	e7f5      	b.n	140d2 <dk_buttons_init+0xd2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   140e6:	3601      	adds	r6, #1
   140e8:	2e04      	cmp	r6, #4
   140ea:	d1e8      	bne.n	140be <dk_buttons_init+0xbe>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   140ec:	4919      	ldr	r1, [pc, #100]	; (14154 <dk_buttons_init+0x154>)
   140ee:	481a      	ldr	r0, [pc, #104]	; (14158 <dk_buttons_init+0x158>)
   140f0:	f002 fe2e 	bl	16d50 <k_work_init_delayable>
	state = STATE_SCANNING;
   140f4:	4b19      	ldr	r3, [pc, #100]	; (1415c <dk_buttons_init+0x15c>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   140f6:	4818      	ldr	r0, [pc, #96]	; (14158 <dk_buttons_init+0x158>)
	state = STATE_SCANNING;
   140f8:	2201      	movs	r2, #1
   140fa:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   140fc:	2300      	movs	r3, #0
   140fe:	2200      	movs	r2, #0
   14100:	f002 fece 	bl	16ea0 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   14104:	4621      	mov	r1, r4
   14106:	4620      	mov	r0, r4
   14108:	f7ff ff66 	bl	13fd8 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1410c:	f7ff fd2e 	bl	13b6c <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14110:	f3bf 8f5b 	dmb	ish
   14114:	4b12      	ldr	r3, [pc, #72]	; (14160 <dk_buttons_init+0x160>)
   14116:	e853 2f00 	ldrex	r2, [r3]
   1411a:	e843 0100 	strex	r1, r0, [r3]
   1411e:	2900      	cmp	r1, #0
   14120:	d1f9      	bne.n	14116 <dk_buttons_init+0x116>
   14122:	f3bf 8f5b 	dmb	ish
   14126:	e78a      	b.n	1403e <dk_buttons_init+0x3e>
   14128:	20000fa8 	.word	0x20000fa8
   1412c:	20000fac 	.word	0x20000fac
   14130:	0001cd84 	.word	0x0001cd84
   14134:	0001c940 	.word	0x0001c940
   14138:	0001c990 	.word	0x0001c990
   1413c:	0001ec0f 	.word	0x0001ec0f
   14140:	0001ec41 	.word	0x0001ec41
   14144:	0001ec5e 	.word	0x0001ec5e
   14148:	20000fc8 	.word	0x20000fc8
   1414c:	00013c95 	.word	0x00013c95
   14150:	0001ec79 	.word	0x0001ec79
   14154:	00013da5 	.word	0x00013da5
   14158:	20000600 	.word	0x20000600
   1415c:	200025b9 	.word	0x200025b9
   14160:	20000ff0 	.word	0x20000ff0
   14164:	20000f98 	.word	0x20000f98

00014168 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx >= ARRAY_SIZE(led_pins)) {
   14168:	2803      	cmp	r0, #3
{
   1416a:	b510      	push	{r4, lr}
	if (led_idx >= ARRAY_SIZE(led_pins)) {
   1416c:	d90d      	bls.n	1418a <dk_set_led+0x22>
   1416e:	4b14      	ldr	r3, [pc, #80]	; (141c0 <dk_set_led+0x58>)
   14170:	4814      	ldr	r0, [pc, #80]	; (141c4 <dk_set_led+0x5c>)
		LOG_ERR("LED index out of the range");
   14172:	4915      	ldr	r1, [pc, #84]	; (141c8 <dk_set_led+0x60>)
   14174:	1ac0      	subs	r0, r0, r3
   14176:	08c0      	lsrs	r0, r0, #3
   14178:	0180      	lsls	r0, r0, #6
   1417a:	f040 0001 	orr.w	r0, r0, #1
   1417e:	f006 fd53 	bl	1ac28 <log_string_sync>
		return -EINVAL;
   14182:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   14186:	4620      	mov	r0, r4
   14188:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   1418a:	4b10      	ldr	r3, [pc, #64]	; (141cc <dk_set_led+0x64>)
   1418c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   14190:	fab1 f281 	clz	r2, r1
   14194:	7919      	ldrb	r1, [r3, #4]
   14196:	4b0e      	ldr	r3, [pc, #56]	; (141d0 <dk_set_led+0x68>)
   14198:	0952      	lsrs	r2, r2, #5
   1419a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1419e:	f7ff fcb9 	bl	13b14 <gpio_pin_set_raw>
	if (err) {
   141a2:	4604      	mov	r4, r0
   141a4:	2800      	cmp	r0, #0
   141a6:	d0ee      	beq.n	14186 <dk_set_led+0x1e>
   141a8:	4805      	ldr	r0, [pc, #20]	; (141c0 <dk_set_led+0x58>)
   141aa:	4b06      	ldr	r3, [pc, #24]	; (141c4 <dk_set_led+0x5c>)
		LOG_ERR("Cannot write LED gpio");
   141ac:	4909      	ldr	r1, [pc, #36]	; (141d4 <dk_set_led+0x6c>)
   141ae:	1a1b      	subs	r3, r3, r0
   141b0:	08db      	lsrs	r3, r3, #3
   141b2:	019b      	lsls	r3, r3, #6
   141b4:	f043 0001 	orr.w	r0, r3, #1
   141b8:	f006 fd36 	bl	1ac28 <log_string_sync>
   141bc:	e7e3      	b.n	14186 <dk_set_led+0x1e>
   141be:	bf00      	nop
   141c0:	0001c940 	.word	0x0001c940
   141c4:	0001c990 	.word	0x0001c990
   141c8:	0001ec8d 	.word	0x0001ec8d
   141cc:	0001cda4 	.word	0x0001cda4
   141d0:	20000fdc 	.word	0x20000fdc
   141d4:	0001eb8a 	.word	0x0001eb8a

000141d8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   141d8:	b508      	push	{r3, lr}
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   141da:	f7fc f909 	bl	103f0 <z_impl_log_panic>
   141de:	4b06      	ldr	r3, [pc, #24]	; (141f8 <k_sys_fatal_error_handler+0x20>)
   141e0:	4806      	ldr	r0, [pc, #24]	; (141fc <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   141e2:	4907      	ldr	r1, [pc, #28]	; (14200 <k_sys_fatal_error_handler+0x28>)
   141e4:	1ac0      	subs	r0, r0, r3
   141e6:	08c0      	lsrs	r0, r0, #3
   141e8:	0180      	lsls	r0, r0, #6
   141ea:	f040 0001 	orr.w	r0, r0, #1
   141ee:	f006 fd1b 	bl	1ac28 <log_string_sync>
		sys_arch_reboot(0);
   141f2:	2000      	movs	r0, #0
   141f4:	f7fd fe5a 	bl	11eac <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   141f8:	0001c940 	.word	0x0001c940
   141fc:	0001c998 	.word	0x0001c998
   14200:	0001ecbc 	.word	0x0001ecbc

00014204 <dfu_target_init>:
	LOG_ERR("No supported image type found");
	return -ENOTSUP;
}

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
   14204:	4603      	mov	r3, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   14206:	2b01      	cmp	r3, #1
{
   14208:	4608      	mov	r0, r1
   1420a:	b510      	push	{r4, lr}
   1420c:	4611      	mov	r1, r2
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   1420e:	d00c      	beq.n	1422a <dfu_target_init+0x26>
   14210:	4b0c      	ldr	r3, [pc, #48]	; (14244 <dfu_target_init+0x40>)
   14212:	480d      	ldr	r0, [pc, #52]	; (14248 <dfu_target_init+0x44>)
	if (img_type == DFU_TARGET_IMAGE_TYPE_FULL_MODEM) {
		new_target = &dfu_target_full_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   14214:	490d      	ldr	r1, [pc, #52]	; (1424c <dfu_target_init+0x48>)
   14216:	1ac0      	subs	r0, r0, r3
   14218:	08c0      	lsrs	r0, r0, #3
   1421a:	0180      	lsls	r0, r0, #6
   1421c:	f040 0001 	orr.w	r0, r0, #1
   14220:	f006 fd02 	bl	1ac28 <log_string_sync>
		return -ENOTSUP;
   14224:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size, cb);
}
   14228:	bd10      	pop	{r4, pc}
	if (new_target == current_target
   1422a:	4b09      	ldr	r3, [pc, #36]	; (14250 <dfu_target_init+0x4c>)
   1422c:	4a09      	ldr	r2, [pc, #36]	; (14254 <dfu_target_init+0x50>)
   1422e:	681c      	ldr	r4, [r3, #0]
   14230:	4294      	cmp	r4, r2
   14232:	d004      	beq.n	1423e <dfu_target_init+0x3a>
}
   14234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	current_target = new_target;
   14238:	601a      	str	r2, [r3, #0]
	return current_target->init(file_size, cb);
   1423a:	f000 b8cb 	b.w	143d4 <dfu_target_mcuboot_init>
		return 0;
   1423e:	2000      	movs	r0, #0
   14240:	e7f2      	b.n	14228 <dfu_target_init+0x24>
   14242:	bf00      	nop
   14244:	0001c940 	.word	0x0001c940
   14248:	0001c978 	.word	0x0001c978
   1424c:	0001ecd9 	.word	0x0001ecd9
   14250:	20000ff4 	.word	0x20000ff4
   14254:	0001cdc4 	.word	0x0001cdc4

00014258 <dfu_target_done>:

	return current_target->write(buf, len);
}

int dfu_target_done(bool successful)
{
   14258:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   1425a:	4e0d      	ldr	r6, [pc, #52]	; (14290 <dfu_target_done+0x38>)
   1425c:	6833      	ldr	r3, [r6, #0]
{
   1425e:	4605      	mov	r5, r0
	if (current_target == NULL) {
   14260:	b19b      	cbz	r3, 1428a <dfu_target_done+0x32>
		return -EACCES;
	}

	err = current_target->done(successful);
   14262:	68db      	ldr	r3, [r3, #12]
   14264:	4798      	blx	r3
	if (err != 0) {
   14266:	4604      	mov	r4, r0
   14268:	b158      	cbz	r0, 14282 <dfu_target_done+0x2a>
   1426a:	480a      	ldr	r0, [pc, #40]	; (14294 <dfu_target_done+0x3c>)
   1426c:	4b0a      	ldr	r3, [pc, #40]	; (14298 <dfu_target_done+0x40>)
		LOG_ERR("Unable to clean up dfu_target");
   1426e:	490b      	ldr	r1, [pc, #44]	; (1429c <dfu_target_done+0x44>)
   14270:	1a1b      	subs	r3, r3, r0
   14272:	08db      	lsrs	r3, r3, #3
   14274:	019b      	lsls	r3, r3, #6
   14276:	f043 0001 	orr.w	r0, r3, #1
   1427a:	f006 fcd5 	bl	1ac28 <log_string_sync>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   1427e:	4620      	mov	r0, r4
   14280:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   14282:	2d00      	cmp	r5, #0
   14284:	d0fb      	beq.n	1427e <dfu_target_done+0x26>
		current_target = NULL;
   14286:	6030      	str	r0, [r6, #0]
   14288:	e7f9      	b.n	1427e <dfu_target_done+0x26>
		return -EACCES;
   1428a:	f06f 040c 	mvn.w	r4, #12
   1428e:	e7f6      	b.n	1427e <dfu_target_done+0x26>
   14290:	20000ff4 	.word	0x20000ff4
   14294:	0001c940 	.word	0x0001c940
   14298:	0001c978 	.word	0x0001c978
   1429c:	0001ecec 	.word	0x0001ecec

000142a0 <dfu_target_stream_get_stream>:
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

struct stream_flash_ctx *dfu_target_stream_get_stream(void)
{
	return &stream;
}
   142a0:	4800      	ldr	r0, [pc, #0]	; (142a4 <dfu_target_stream_get_stream+0x4>)
   142a2:	4770      	bx	lr
   142a4:	20000ffc 	.word	0x20000ffc

000142a8 <dfu_target_stream_init>:

int dfu_target_stream_init(const struct dfu_target_stream_init *init)
{
   142a8:	b530      	push	{r4, r5, lr}
	int err;

	if (current_id != NULL) {
   142aa:	4c15      	ldr	r4, [pc, #84]	; (14300 <dfu_target_stream_init+0x58>)
   142ac:	6823      	ldr	r3, [r4, #0]
{
   142ae:	b085      	sub	sp, #20
	if (current_id != NULL) {
   142b0:	bb03      	cbnz	r3, 142f4 <dfu_target_stream_init+0x4c>
		return -EFAULT;
	}

	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   142b2:	b310      	cbz	r0, 142fa <dfu_target_stream_init+0x52>
   142b4:	6805      	ldr	r5, [r0, #0]
   142b6:	b305      	cbz	r5, 142fa <dfu_target_stream_init+0x52>
   142b8:	6841      	ldr	r1, [r0, #4]
   142ba:	b1f1      	cbz	r1, 142fa <dfu_target_stream_init+0x52>
	    init->buf == NULL) {
   142bc:	6882      	ldr	r2, [r0, #8]
	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   142be:	b1e2      	cbz	r2, 142fa <dfu_target_stream_init+0x52>
		return -EINVAL;
	}

	current_id = init->id;
   142c0:	6025      	str	r5, [r4, #0]

	err = stream_flash_init(&stream, init->fdev, init->buf, init->len,
   142c2:	9302      	str	r3, [sp, #8]
   142c4:	6943      	ldr	r3, [r0, #20]
   142c6:	9301      	str	r3, [sp, #4]
   142c8:	6903      	ldr	r3, [r0, #16]
   142ca:	9300      	str	r3, [sp, #0]
   142cc:	68c3      	ldr	r3, [r0, #12]
   142ce:	480d      	ldr	r0, [pc, #52]	; (14304 <dfu_target_stream_init+0x5c>)
   142d0:	f7fc fc46 	bl	10b60 <stream_flash_init>
				init->offset, init->size, NULL);
	if (err) {
   142d4:	4604      	mov	r4, r0
   142d6:	b150      	cbz	r0, 142ee <dfu_target_stream_init+0x46>
   142d8:	480b      	ldr	r0, [pc, #44]	; (14308 <dfu_target_stream_init+0x60>)
   142da:	4b0c      	ldr	r3, [pc, #48]	; (1430c <dfu_target_stream_init+0x64>)
		LOG_ERR("stream_flash_init failed (err %d)", err);
   142dc:	490c      	ldr	r1, [pc, #48]	; (14310 <dfu_target_stream_init+0x68>)
   142de:	1ac0      	subs	r0, r0, r3
   142e0:	08c0      	lsrs	r0, r0, #3
   142e2:	0180      	lsls	r0, r0, #6
   142e4:	4622      	mov	r2, r4
   142e6:	f040 0001 	orr.w	r0, r0, #1
   142ea:	f006 fc9d 	bl	1ac28 <log_string_sync>
		return err;
	}
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

	return 0;
}
   142ee:	4620      	mov	r0, r4
   142f0:	b005      	add	sp, #20
   142f2:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   142f4:	f06f 040d 	mvn.w	r4, #13
   142f8:	e7f9      	b.n	142ee <dfu_target_stream_init+0x46>
		return -EINVAL;
   142fa:	f06f 0415 	mvn.w	r4, #21
   142fe:	e7f6      	b.n	142ee <dfu_target_stream_init+0x46>
   14300:	20000ff8 	.word	0x20000ff8
   14304:	20000ffc 	.word	0x20000ffc
   14308:	0001c988 	.word	0x0001c988
   1430c:	0001c940 	.word	0x0001c940
   14310:	0001ed0a 	.word	0x0001ed0a

00014314 <dfu_target_stream_offset_get>:

int dfu_target_stream_offset_get(size_t *out)
{
   14314:	b510      	push	{r4, lr}
   14316:	4604      	mov	r4, r0
	*out = stream_flash_bytes_written(&stream);
   14318:	4802      	ldr	r0, [pc, #8]	; (14324 <dfu_target_stream_offset_get+0x10>)
   1431a:	f006 fd9c 	bl	1ae56 <stream_flash_bytes_written>
   1431e:	6020      	str	r0, [r4, #0]

	return 0;
}
   14320:	2000      	movs	r0, #0
   14322:	bd10      	pop	{r4, pc}
   14324:	20000ffc 	.word	0x20000ffc

00014328 <dfu_target_stream_write>:

int dfu_target_stream_write(const uint8_t *buf, size_t len)
{
   14328:	b510      	push	{r4, lr}
   1432a:	460a      	mov	r2, r1
	int err = stream_flash_buffered_write(&stream, buf, len, false);
   1432c:	2300      	movs	r3, #0
   1432e:	4601      	mov	r1, r0
   14330:	4808      	ldr	r0, [pc, #32]	; (14354 <dfu_target_stream_write+0x2c>)
   14332:	f006 fd4c 	bl	1adce <stream_flash_buffered_write>

	if (err != 0) {
   14336:	4604      	mov	r4, r0
   14338:	b150      	cbz	r0, 14350 <dfu_target_stream_write+0x28>
   1433a:	4807      	ldr	r0, [pc, #28]	; (14358 <dfu_target_stream_write+0x30>)
   1433c:	4b07      	ldr	r3, [pc, #28]	; (1435c <dfu_target_stream_write+0x34>)
		LOG_ERR("stream_flash_buffered_write error %d", err);
   1433e:	4908      	ldr	r1, [pc, #32]	; (14360 <dfu_target_stream_write+0x38>)
   14340:	1a1b      	subs	r3, r3, r0
   14342:	08db      	lsrs	r3, r3, #3
   14344:	019b      	lsls	r3, r3, #6
   14346:	4622      	mov	r2, r4
   14348:	f043 0001 	orr.w	r0, r3, #1
   1434c:	f006 fc6c 	bl	1ac28 <log_string_sync>
		LOG_WRN("Unable to store write progress: %d", err);
	}
#endif

	return err;
}
   14350:	4620      	mov	r0, r4
   14352:	bd10      	pop	{r4, pc}
   14354:	20000ffc 	.word	0x20000ffc
   14358:	0001c940 	.word	0x0001c940
   1435c:	0001c988 	.word	0x0001c988
   14360:	0001ed2c 	.word	0x0001ed2c

00014364 <dfu_target_stream_done>:

int dfu_target_stream_done(bool successful)
{
   14364:	b510      	push	{r4, lr}
	int err = 0;

	if (successful) {
   14366:	4604      	mov	r4, r0
   14368:	b190      	cbz	r0, 14390 <dfu_target_stream_done+0x2c>
		err = stream_flash_buffered_write(&stream, NULL, 0, true);
   1436a:	2200      	movs	r2, #0
   1436c:	480b      	ldr	r0, [pc, #44]	; (1439c <dfu_target_stream_done+0x38>)
   1436e:	2301      	movs	r3, #1
   14370:	4611      	mov	r1, r2
   14372:	f006 fd2c 	bl	1adce <stream_flash_buffered_write>
		if (err != 0) {
   14376:	4604      	mov	r4, r0
   14378:	b150      	cbz	r0, 14390 <dfu_target_stream_done+0x2c>
   1437a:	4809      	ldr	r0, [pc, #36]	; (143a0 <dfu_target_stream_done+0x3c>)
   1437c:	4b09      	ldr	r3, [pc, #36]	; (143a4 <dfu_target_stream_done+0x40>)
			LOG_ERR("stream_flash_buffered_write error %d", err);
   1437e:	490a      	ldr	r1, [pc, #40]	; (143a8 <dfu_target_stream_done+0x44>)
   14380:	1ac0      	subs	r0, r0, r3
   14382:	08c0      	lsrs	r0, r0, #3
   14384:	0180      	lsls	r0, r0, #6
   14386:	4622      	mov	r2, r4
   14388:	f040 0001 	orr.w	r0, r0, #1
   1438c:	f006 fc4c 	bl	1ac28 <log_string_sync>
			LOG_ERR("Unable to reset write progress: %d", err);
		}
#endif
	}

	current_id = NULL;
   14390:	4b06      	ldr	r3, [pc, #24]	; (143ac <dfu_target_stream_done+0x48>)
   14392:	2200      	movs	r2, #0
   14394:	601a      	str	r2, [r3, #0]

	return err;
}
   14396:	4620      	mov	r0, r4
   14398:	bd10      	pop	{r4, pc}
   1439a:	bf00      	nop
   1439c:	20000ffc 	.word	0x20000ffc
   143a0:	0001c988 	.word	0x0001c988
   143a4:	0001c940 	.word	0x0001c940
   143a8:	0001ed2c 	.word	0x0001ed2c
   143ac:	20000ff8 	.word	0x20000ff8

000143b0 <dfu_target_mcuboot_set_buf>:
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
}

int dfu_target_mcuboot_set_buf(uint8_t *buf, size_t len)
{
	if (buf == NULL) {
   143b0:	b140      	cbz	r0, 143c4 <dfu_target_mcuboot_set_buf+0x14>
		return -EINVAL;
	}

	if (!IS_ALIGNED_32(buf)) {
   143b2:	f010 0303 	ands.w	r3, r0, #3
   143b6:	d105      	bne.n	143c4 <dfu_target_mcuboot_set_buf+0x14>
		return -EINVAL;
	}

	stream_buf = buf;
   143b8:	4a04      	ldr	r2, [pc, #16]	; (143cc <dfu_target_mcuboot_set_buf+0x1c>)
   143ba:	6010      	str	r0, [r2, #0]
	stream_buf_len = len;
   143bc:	4a04      	ldr	r2, [pc, #16]	; (143d0 <dfu_target_mcuboot_set_buf+0x20>)

	return 0;
   143be:	4618      	mov	r0, r3
	stream_buf_len = len;
   143c0:	6011      	str	r1, [r2, #0]
	return 0;
   143c2:	4770      	bx	lr
		return -EINVAL;
   143c4:	f06f 0015 	mvn.w	r0, #21
}
   143c8:	4770      	bx	lr
   143ca:	bf00      	nop
   143cc:	20001020 	.word	0x20001020
   143d0:	20001028 	.word	0x20001028

000143d4 <dfu_target_mcuboot_init>:

int dfu_target_mcuboot_init(size_t file_size, dfu_target_callback_t cb)
{
   143d4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(cb);
	const struct device *flash_dev;
	int err;

	stream_buf_bytes = 0;
   143d6:	4b2e      	ldr	r3, [pc, #184]	; (14490 <dfu_target_mcuboot_init+0xbc>)

	if (stream_buf == NULL) {
   143d8:	4c2e      	ldr	r4, [pc, #184]	; (14494 <dfu_target_mcuboot_init+0xc0>)
	stream_buf_bytes = 0;
   143da:	2500      	movs	r5, #0
   143dc:	601d      	str	r5, [r3, #0]
	if (stream_buf == NULL) {
   143de:	6823      	ldr	r3, [r4, #0]
{
   143e0:	b089      	sub	sp, #36	; 0x24
   143e2:	4602      	mov	r2, r0
	if (stream_buf == NULL) {
   143e4:	b973      	cbnz	r3, 14404 <dfu_target_mcuboot_init+0x30>
   143e6:	4b2c      	ldr	r3, [pc, #176]	; (14498 <dfu_target_mcuboot_init+0xc4>)
   143e8:	482c      	ldr	r0, [pc, #176]	; (1449c <dfu_target_mcuboot_init+0xc8>)
		LOG_ERR("Missing stream_buf, call '..set_buf' before '..init");
   143ea:	492d      	ldr	r1, [pc, #180]	; (144a0 <dfu_target_mcuboot_init+0xcc>)
   143ec:	1ac0      	subs	r0, r0, r3
   143ee:	08c0      	lsrs	r0, r0, #3
   143f0:	0180      	lsls	r0, r0, #6
   143f2:	f040 0001 	orr.w	r0, r0, #1
   143f6:	f006 fc17 	bl	1ac28 <log_string_sync>
		return -ENODEV;
   143fa:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("dfu_target_stream_init failed %d", err);
		return err;
	}

	return 0;
}
   143fe:	4620      	mov	r0, r4
   14400:	b009      	add	sp, #36	; 0x24
   14402:	bd30      	pop	{r4, r5, pc}
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   14404:	f5b0 2ff4 	cmp.w	r0, #499712	; 0x7a000
   14408:	d90e      	bls.n	14428 <dfu_target_mcuboot_init+0x54>
   1440a:	4823      	ldr	r0, [pc, #140]	; (14498 <dfu_target_mcuboot_init+0xc4>)
   1440c:	4c23      	ldr	r4, [pc, #140]	; (1449c <dfu_target_mcuboot_init+0xc8>)
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   1440e:	4925      	ldr	r1, [pc, #148]	; (144a4 <dfu_target_mcuboot_init+0xd0>)
   14410:	1a24      	subs	r4, r4, r0
   14412:	08e4      	lsrs	r4, r4, #3
   14414:	01a4      	lsls	r4, r4, #6
   14416:	f044 0001 	orr.w	r0, r4, #1
   1441a:	f44f 23f4 	mov.w	r3, #499712	; 0x7a000
   1441e:	f006 fc03 	bl	1ac28 <log_string_sync>
		return -EFBIG;
   14422:	f06f 041a 	mvn.w	r4, #26
   14426:	e7ea      	b.n	143fe <dfu_target_mcuboot_init+0x2a>
   14428:	481f      	ldr	r0, [pc, #124]	; (144a8 <dfu_target_mcuboot_init+0xd4>)
   1442a:	f001 fb2b 	bl	15a84 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   1442e:	b968      	cbnz	r0, 1444c <dfu_target_mcuboot_init+0x78>
   14430:	4b19      	ldr	r3, [pc, #100]	; (14498 <dfu_target_mcuboot_init+0xc4>)
   14432:	481a      	ldr	r0, [pc, #104]	; (1449c <dfu_target_mcuboot_init+0xc8>)
		LOG_ERR("Failed to get device '%s'",
   14434:	4a1c      	ldr	r2, [pc, #112]	; (144a8 <dfu_target_mcuboot_init+0xd4>)
   14436:	491d      	ldr	r1, [pc, #116]	; (144ac <dfu_target_mcuboot_init+0xd8>)
   14438:	1ac0      	subs	r0, r0, r3
   1443a:	08c0      	lsrs	r0, r0, #3
   1443c:	0180      	lsls	r0, r0, #6
   1443e:	f040 0001 	orr.w	r0, r0, #1
   14442:	f006 fbf1 	bl	1ac28 <log_string_sync>
		return -EFAULT;
   14446:	f06f 040d 	mvn.w	r4, #13
   1444a:	e7d8      	b.n	143fe <dfu_target_mcuboot_init+0x2a>
	err = dfu_target_stream_init(&(struct dfu_target_stream_init){
   1444c:	4b18      	ldr	r3, [pc, #96]	; (144b0 <dfu_target_mcuboot_init+0xdc>)
   1444e:	9507      	str	r5, [sp, #28]
   14450:	e9cd 3001 	strd	r3, r0, [sp, #4]
   14454:	6823      	ldr	r3, [r4, #0]
   14456:	9303      	str	r3, [sp, #12]
   14458:	4b16      	ldr	r3, [pc, #88]	; (144b4 <dfu_target_mcuboot_init+0xe0>)
   1445a:	681b      	ldr	r3, [r3, #0]
   1445c:	9304      	str	r3, [sp, #16]
   1445e:	f44f 2206 	mov.w	r2, #548864	; 0x86000
   14462:	f44f 23f4 	mov.w	r3, #499712	; 0x7a000
   14466:	a801      	add	r0, sp, #4
   14468:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1446c:	f7ff ff1c 	bl	142a8 <dfu_target_stream_init>
	if (err < 0) {
   14470:	1e04      	subs	r4, r0, #0
   14472:	da0b      	bge.n	1448c <dfu_target_mcuboot_init+0xb8>
   14474:	4b08      	ldr	r3, [pc, #32]	; (14498 <dfu_target_mcuboot_init+0xc4>)
   14476:	4809      	ldr	r0, [pc, #36]	; (1449c <dfu_target_mcuboot_init+0xc8>)
		LOG_ERR("dfu_target_stream_init failed %d", err);
   14478:	490f      	ldr	r1, [pc, #60]	; (144b8 <dfu_target_mcuboot_init+0xe4>)
   1447a:	1ac0      	subs	r0, r0, r3
   1447c:	08c0      	lsrs	r0, r0, #3
   1447e:	0180      	lsls	r0, r0, #6
   14480:	4622      	mov	r2, r4
   14482:	f040 0001 	orr.w	r0, r0, #1
   14486:	f006 fbcf 	bl	1ac28 <log_string_sync>
		return err;
   1448a:	e7b8      	b.n	143fe <dfu_target_mcuboot_init+0x2a>
	return 0;
   1448c:	462c      	mov	r4, r5
   1448e:	e7b6      	b.n	143fe <dfu_target_mcuboot_init+0x2a>
   14490:	20001024 	.word	0x20001024
   14494:	20001020 	.word	0x20001020
   14498:	0001c940 	.word	0x0001c940
   1449c:	0001c980 	.word	0x0001c980
   144a0:	0001ed63 	.word	0x0001ed63
   144a4:	0001ed97 	.word	0x0001ed97
   144a8:	0001dda7 	.word	0x0001dda7
   144ac:	0001edc9 	.word	0x0001edc9
   144b0:	0001ede3 	.word	0x0001ede3
   144b4:	20001028 	.word	0x20001028
   144b8:	0001edeb 	.word	0x0001edeb

000144bc <dfu_target_mcuboot_offset_get>:

int dfu_target_mcuboot_offset_get(size_t *out)
{
   144bc:	b510      	push	{r4, lr}
   144be:	4604      	mov	r4, r0
	int err = 0;

	err = dfu_target_stream_offset_get(out);
   144c0:	f7ff ff28 	bl	14314 <dfu_target_stream_offset_get>
	if (err == 0) {
   144c4:	b920      	cbnz	r0, 144d0 <dfu_target_mcuboot_offset_get+0x14>
		*out += stream_buf_bytes;
   144c6:	4a03      	ldr	r2, [pc, #12]	; (144d4 <dfu_target_mcuboot_offset_get+0x18>)
   144c8:	6823      	ldr	r3, [r4, #0]
   144ca:	6812      	ldr	r2, [r2, #0]
   144cc:	4413      	add	r3, r2
   144ce:	6023      	str	r3, [r4, #0]
	}

	return err;
}
   144d0:	bd10      	pop	{r4, pc}
   144d2:	bf00      	nop
   144d4:	20001024 	.word	0x20001024

000144d8 <dfu_target_mcuboot_write>:

int dfu_target_mcuboot_write(const void *const buf, size_t len)
{
   144d8:	b430      	push	{r4, r5}
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   144da:	4c06      	ldr	r4, [pc, #24]	; (144f4 <dfu_target_mcuboot_write+0x1c>)
   144dc:	4a06      	ldr	r2, [pc, #24]	; (144f8 <dfu_target_mcuboot_write+0x20>)
   144de:	6823      	ldr	r3, [r4, #0]
   144e0:	6815      	ldr	r5, [r2, #0]
   144e2:	440b      	add	r3, r1
   144e4:	fbb3 f2f5 	udiv	r2, r3, r5
   144e8:	fb05 3312 	mls	r3, r5, r2, r3
   144ec:	6023      	str	r3, [r4, #0]

	return dfu_target_stream_write(buf, len);
}
   144ee:	bc30      	pop	{r4, r5}
	return dfu_target_stream_write(buf, len);
   144f0:	f7ff bf1a 	b.w	14328 <dfu_target_stream_write>
   144f4:	20001024 	.word	0x20001024
   144f8:	20001028 	.word	0x20001028

000144fc <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   144fc:	b570      	push	{r4, r5, r6, lr}
   144fe:	4d17      	ldr	r5, [pc, #92]	; (1455c <dfu_target_mcuboot_done+0x60>)
   14500:	4606      	mov	r6, r0
	int err = 0;

	err = dfu_target_stream_done(successful);
   14502:	f7ff ff2f 	bl	14364 <dfu_target_stream_done>
	if (err != 0) {
   14506:	4b16      	ldr	r3, [pc, #88]	; (14560 <dfu_target_mcuboot_done+0x64>)
   14508:	1aed      	subs	r5, r5, r3
   1450a:	08ed      	lsrs	r5, r5, #3
   1450c:	4604      	mov	r4, r0
   1450e:	01ad      	lsls	r5, r5, #6
   14510:	b138      	cbz	r0, 14522 <dfu_target_mcuboot_done+0x26>
		LOG_ERR("dfu_target_stream_done error %d", err);
   14512:	4914      	ldr	r1, [pc, #80]	; (14564 <dfu_target_mcuboot_done+0x68>)
   14514:	4602      	mov	r2, r0
			LOG_ERR("Unable to delete last page: %d", err);
			return err;
		}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   14516:	f045 0001 	orr.w	r0, r5, #1
   1451a:	f006 fb85 	bl	1ac28 <log_string_sync>
	} else {
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	return err;
}
   1451e:	4620      	mov	r0, r4
   14520:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   14522:	b1c6      	cbz	r6, 14556 <dfu_target_mcuboot_done+0x5a>
		stream_buf_bytes = 0;
   14524:	4b10      	ldr	r3, [pc, #64]	; (14568 <dfu_target_mcuboot_done+0x6c>)
   14526:	6018      	str	r0, [r3, #0]
		err = stream_flash_erase_page(dfu_target_stream_get_stream(),
   14528:	f7ff feba 	bl	142a0 <dfu_target_stream_get_stream>
   1452c:	490f      	ldr	r1, [pc, #60]	; (1456c <dfu_target_mcuboot_done+0x70>)
   1452e:	f7fc fa27 	bl	10980 <stream_flash_erase_page>
		if (err != 0) {
   14532:	4604      	mov	r4, r0
   14534:	b110      	cbz	r0, 1453c <dfu_target_mcuboot_done+0x40>
			LOG_ERR("Unable to delete last page: %d", err);
   14536:	490e      	ldr	r1, [pc, #56]	; (14570 <dfu_target_mcuboot_done+0x74>)
   14538:	4602      	mov	r2, r0
   1453a:	e7ec      	b.n	14516 <dfu_target_mcuboot_done+0x1a>
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   1453c:	f006 fce3 	bl	1af06 <boot_request_upgrade>
		if (err != 0) {
   14540:	4604      	mov	r4, r0
   14542:	b110      	cbz	r0, 1454a <dfu_target_mcuboot_done+0x4e>
			LOG_ERR("boot_request_upgrade error %d", err);
   14544:	490b      	ldr	r1, [pc, #44]	; (14574 <dfu_target_mcuboot_done+0x78>)
   14546:	4602      	mov	r2, r0
   14548:	e7e5      	b.n	14516 <dfu_target_mcuboot_done+0x1a>
		LOG_INF("MCUBoot image upgrade scheduled. "
   1454a:	490b      	ldr	r1, [pc, #44]	; (14578 <dfu_target_mcuboot_done+0x7c>)
		LOG_INF("MCUBoot image upgrade aborted.");
   1454c:	f045 0003 	orr.w	r0, r5, #3
   14550:	f006 fb6a 	bl	1ac28 <log_string_sync>
   14554:	e7e3      	b.n	1451e <dfu_target_mcuboot_done+0x22>
   14556:	4909      	ldr	r1, [pc, #36]	; (1457c <dfu_target_mcuboot_done+0x80>)
   14558:	e7f8      	b.n	1454c <dfu_target_mcuboot_done+0x50>
   1455a:	bf00      	nop
   1455c:	0001c980 	.word	0x0001c980
   14560:	0001c940 	.word	0x0001c940
   14564:	0001ee0c 	.word	0x0001ee0c
   14568:	20001024 	.word	0x20001024
   1456c:	000fffff 	.word	0x000fffff
   14570:	0001ee2c 	.word	0x0001ee2c
   14574:	0001ee4b 	.word	0x0001ee4b
   14578:	0001ee69 	.word	0x0001ee69
   1457c:	0001eea0 	.word	0x0001eea0

00014580 <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   14580:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   14582:	4a05      	ldr	r2, [pc, #20]	; (14598 <boot_write_magic+0x18>)
{
   14584:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   14586:	3910      	subs	r1, #16
   14588:	2310      	movs	r3, #16
   1458a:	f006 fba6 	bl	1acda <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   1458e:	3800      	subs	r0, #0
   14590:	bf18      	it	ne
   14592:	2001      	movne	r0, #1
   14594:	bd08      	pop	{r3, pc}
   14596:	bf00      	nop
   14598:	0001cdd4 	.word	0x0001cdd4

0001459c <boot_read_swap_state>:
{
   1459c:	b530      	push	{r4, r5, lr}
   1459e:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   145a0:	6881      	ldr	r1, [r0, #8]
{
   145a2:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   145a4:	2310      	movs	r3, #16
   145a6:	aa02      	add	r2, sp, #8
   145a8:	3910      	subs	r1, #16
{
   145aa:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   145ac:	f006 fb79 	bl	1aca2 <flash_area_read>
    if (rc < 0) {
   145b0:	2800      	cmp	r0, #0
   145b2:	db11      	blt.n	145d8 <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
   145b4:	2210      	movs	r2, #16
   145b6:	a902      	add	r1, sp, #8
   145b8:	4628      	mov	r0, r5
   145ba:	f007 f814 	bl	1b5e6 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   145be:	b168      	cbz	r0, 145dc <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
   145c0:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   145c2:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
   145c4:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   145c6:	2301      	movs	r3, #1
   145c8:	f10d 0207 	add.w	r2, sp, #7
   145cc:	3928      	subs	r1, #40	; 0x28
   145ce:	4628      	mov	r0, r5
   145d0:	f006 fb67 	bl	1aca2 <flash_area_read>
    if (rc < 0) {
   145d4:	2800      	cmp	r0, #0
   145d6:	da0b      	bge.n	145f0 <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
   145d8:	2001      	movs	r0, #1
   145da:	e02a      	b.n	14632 <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   145dc:	4916      	ldr	r1, [pc, #88]	; (14638 <boot_read_swap_state+0x9c>)
   145de:	2210      	movs	r2, #16
   145e0:	a802      	add	r0, sp, #8
   145e2:	f007 fa9c 	bl	1bb1e <memcmp>
   145e6:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
   145e8:	bf14      	ite	ne
   145ea:	2302      	movne	r3, #2
   145ec:	2301      	moveq	r3, #1
   145ee:	e7e8      	b.n	145c2 <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   145f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   145f4:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   145f8:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   145fa:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   145fc:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
   145fe:	2201      	movs	r2, #1
   14600:	f10d 0107 	add.w	r1, sp, #7
   14604:	4628      	mov	r0, r5
   14606:	f006 ffee 	bl	1b5e6 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   1460a:	b910      	cbnz	r0, 14612 <boot_read_swap_state+0x76>
   1460c:	7863      	ldrb	r3, [r4, #1]
   1460e:	2b04      	cmp	r3, #4
   14610:	d903      	bls.n	1461a <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   14612:	2301      	movs	r3, #1
   14614:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
   14616:	2300      	movs	r3, #0
   14618:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
   1461a:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   1461c:	1ca1      	adds	r1, r4, #2
   1461e:	3a20      	subs	r2, #32
   14620:	4628      	mov	r0, r5
   14622:	f006 fff7 	bl	1b614 <boot_read_flag>
    if (rc) {
   14626:	2800      	cmp	r0, #0
   14628:	d1d6      	bne.n	145d8 <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
   1462a:	1ce1      	adds	r1, r4, #3
   1462c:	4628      	mov	r0, r5
   1462e:	f007 f84d 	bl	1b6cc <boot_read_image_ok>
}
   14632:	b007      	add	sp, #28
   14634:	bd30      	pop	{r4, r5, pc}
   14636:	bf00      	nop
   14638:	0001cdd4 	.word	0x0001cdd4

0001463c <boot_write_swap_info>:
                     uint8_t image_num)
{
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   1463c:	2a0e      	cmp	r2, #14
{
   1463e:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   14640:	d906      	bls.n	14650 <boot_write_swap_info+0x14>
   14642:	4b0c      	ldr	r3, [pc, #48]	; (14674 <boot_write_swap_info+0x38>)
   14644:	4a0c      	ldr	r2, [pc, #48]	; (14678 <boot_write_swap_info+0x3c>)
   14646:	480d      	ldr	r0, [pc, #52]	; (1467c <boot_write_swap_info+0x40>)
   14648:	f44f 71ca 	mov.w	r1, #404	; 0x194
   1464c:	f004 fed0 	bl	193f0 <__assert_func>
   14650:	290e      	cmp	r1, #14
   14652:	d901      	bls.n	14658 <boot_write_swap_info+0x1c>
   14654:	4b0a      	ldr	r3, [pc, #40]	; (14680 <boot_write_swap_info+0x44>)
   14656:	e7f5      	b.n	14644 <boot_write_swap_info+0x8>
   14658:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   1465c:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
   14660:	6881      	ldr	r1, [r0, #8]
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off),
                 swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   14662:	2301      	movs	r3, #1
   14664:	f10d 0207 	add.w	r2, sp, #7
   14668:	3928      	subs	r1, #40	; 0x28
   1466a:	f006 fff0 	bl	1b64e <boot_write_trailer>
}
   1466e:	b003      	add	sp, #12
   14670:	f85d fb04 	ldr.w	pc, [sp], #4
   14674:	0001eed2 	.word	0x0001eed2
   14678:	0001ef46 	.word	0x0001ef46
   1467c:	0001eee4 	.word	0x0001eee4
   14680:	0001ef27 	.word	0x0001ef27

00014684 <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   14684:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14686:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   14688:	2005      	movs	r0, #5
   1468a:	a901      	add	r1, sp, #4
   1468c:	f7fc f93c 	bl	10908 <flash_area_open>
    if (rc != 0) {
   14690:	2800      	cmp	r0, #0
   14692:	d137      	bne.n	14704 <boot_set_pending_multi+0x80>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_secondary_slot);
   14694:	9801      	ldr	r0, [sp, #4]
   14696:	a902      	add	r1, sp, #8
   14698:	f7ff ff80 	bl	1459c <boot_read_swap_state>
    if (rc != 0) {
   1469c:	4604      	mov	r4, r0
   1469e:	b938      	cbnz	r0, 146b0 <boot_set_pending_multi+0x2c>
        goto done;
    }

    switch (state_secondary_slot.magic) {
   146a0:	f89d 5008 	ldrb.w	r5, [sp, #8]
   146a4:	2d02      	cmp	r5, #2
   146a6:	d01f      	beq.n	146e8 <boot_set_pending_multi+0x64>
   146a8:	2d03      	cmp	r5, #3
   146aa:	d007      	beq.n	146bc <boot_set_pending_multi+0x38>
   146ac:	2d01      	cmp	r5, #1
   146ae:	d122      	bne.n	146f6 <boot_set_pending_multi+0x72>
        assert(0);
        rc = BOOT_EBADIMAGE;
    }

done:
    flash_area_close(fap);
   146b0:	9801      	ldr	r0, [sp, #4]
   146b2:	f006 faf5 	bl	1aca0 <flash_area_close>
    return rc;
}
   146b6:	4620      	mov	r0, r4
   146b8:	b004      	add	sp, #16
   146ba:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_write_magic(fap);
   146bc:	9801      	ldr	r0, [sp, #4]
   146be:	f7ff ff5f 	bl	14580 <boot_write_magic>
        if (rc == 0 && permanent) {
   146c2:	4604      	mov	r4, r0
   146c4:	2800      	cmp	r0, #0
   146c6:	d1f3      	bne.n	146b0 <boot_set_pending_multi+0x2c>
   146c8:	b166      	cbz	r6, 146e4 <boot_set_pending_multi+0x60>
            rc = boot_write_image_ok(fap);
   146ca:	9801      	ldr	r0, [sp, #4]
   146cc:	f006 fff9 	bl	1b6c2 <boot_write_image_ok>
        if (rc == 0) {
   146d0:	4604      	mov	r4, r0
   146d2:	2800      	cmp	r0, #0
   146d4:	d1ec      	bne.n	146b0 <boot_set_pending_multi+0x2c>
            rc = boot_write_swap_info(fap, swap_type, 0);
   146d6:	9801      	ldr	r0, [sp, #4]
   146d8:	2200      	movs	r2, #0
   146da:	4629      	mov	r1, r5
   146dc:	f7ff ffae 	bl	1463c <boot_write_swap_info>
   146e0:	4604      	mov	r4, r0
   146e2:	e7e5      	b.n	146b0 <boot_set_pending_multi+0x2c>
                swap_type = BOOT_SWAP_TYPE_TEST;
   146e4:	2502      	movs	r5, #2
   146e6:	e7f6      	b.n	146d6 <boot_set_pending_multi+0x52>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   146e8:	9801      	ldr	r0, [sp, #4]
   146ea:	4621      	mov	r1, r4
   146ec:	6882      	ldr	r2, [r0, #8]
   146ee:	f006 fb27 	bl	1ad40 <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   146f2:	2403      	movs	r4, #3
        break;
   146f4:	e7dc      	b.n	146b0 <boot_set_pending_multi+0x2c>
        assert(0);
   146f6:	4b04      	ldr	r3, [pc, #16]	; (14708 <boot_set_pending_multi+0x84>)
   146f8:	4a04      	ldr	r2, [pc, #16]	; (1470c <boot_set_pending_multi+0x88>)
   146fa:	4805      	ldr	r0, [pc, #20]	; (14710 <boot_set_pending_multi+0x8c>)
   146fc:	f240 2129 	movw	r1, #553	; 0x229
   14700:	f004 fe76 	bl	193f0 <__assert_func>
        return BOOT_EFLASH;
   14704:	2401      	movs	r4, #1
   14706:	e7d6      	b.n	146b6 <boot_set_pending_multi+0x32>
   14708:	000205d8 	.word	0x000205d8
   1470c:	0001ef5b 	.word	0x0001ef5b
   14710:	0001eee4 	.word	0x0001eee4

00014714 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14714:	4b03      	ldr	r3, [pc, #12]	; (14724 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
   14716:	6818      	ldr	r0, [r3, #0]
}
   14718:	f1a0 0308 	sub.w	r3, r0, #8
   1471c:	4258      	negs	r0, r3
   1471e:	4158      	adcs	r0, r3
   14720:	4770      	bx	lr
   14722:	bf00      	nop
   14724:	10000130 	.word	0x10000130

00014728 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14728:	4b06      	ldr	r3, [pc, #24]	; (14744 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
   1472a:	681b      	ldr	r3, [r3, #0]
   1472c:	2b08      	cmp	r3, #8
   1472e:	d106      	bne.n	1473e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   14730:	4b05      	ldr	r3, [pc, #20]	; (14748 <nrf52_errata_103+0x20>)
   14732:	681b      	ldr	r3, [r3, #0]
                switch(var2)
   14734:	2b05      	cmp	r3, #5
   14736:	d802      	bhi.n	1473e <nrf52_errata_103+0x16>
   14738:	4a04      	ldr	r2, [pc, #16]	; (1474c <nrf52_errata_103+0x24>)
   1473a:	5cd0      	ldrb	r0, [r2, r3]
   1473c:	4770      	bx	lr
        return false;
   1473e:	2000      	movs	r0, #0
}
   14740:	4770      	bx	lr
   14742:	bf00      	nop
   14744:	10000130 	.word	0x10000130
   14748:	10000134 	.word	0x10000134
   1474c:	0001ef78 	.word	0x0001ef78

00014750 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   14750:	4a02      	ldr	r2, [pc, #8]	; (1475c <nvmc_wait+0xc>)
   14752:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   14756:	2b00      	cmp	r3, #0
   14758:	d0fb      	beq.n	14752 <nvmc_wait+0x2>
}
   1475a:	4770      	bx	lr
   1475c:	4001e000 	.word	0x4001e000

00014760 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   14760:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   14762:	f7ff ffd7 	bl	14714 <nrf52_errata_136>
   14766:	b140      	cbz	r0, 1477a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   14768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1476c:	2200      	movs	r2, #0
   1476e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   14772:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   14776:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1477a:	f7ff ffcb 	bl	14714 <nrf52_errata_136>
   1477e:	2800      	cmp	r0, #0
   14780:	d046      	beq.n	14810 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   14782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14786:	4b5b      	ldr	r3, [pc, #364]	; (148f4 <SystemInit+0x194>)
   14788:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1478c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   14790:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   14794:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   14798:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1479c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   147a0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   147a4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   147a8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   147ac:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   147b0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   147b4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   147b8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   147bc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   147c0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   147c4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   147c8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   147cc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   147d0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   147d4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   147d8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   147dc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   147e0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   147e4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   147e8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   147ec:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   147f0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   147f4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   147f8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   147fc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   14800:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   14804:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   14808:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1480c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   14810:	f7ff ff8a 	bl	14728 <nrf52_errata_103>
   14814:	b110      	cbz	r0, 1481c <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   14816:	4b38      	ldr	r3, [pc, #224]	; (148f8 <SystemInit+0x198>)
   14818:	4a38      	ldr	r2, [pc, #224]	; (148fc <SystemInit+0x19c>)
   1481a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1481c:	f7ff ff84 	bl	14728 <nrf52_errata_103>
   14820:	b118      	cbz	r0, 1482a <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   14822:	4b37      	ldr	r3, [pc, #220]	; (14900 <SystemInit+0x1a0>)
   14824:	22fb      	movs	r2, #251	; 0xfb
   14826:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1482a:	f7ff ff7d 	bl	14728 <nrf52_errata_103>
   1482e:	b148      	cbz	r0, 14844 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   14830:	4934      	ldr	r1, [pc, #208]	; (14904 <SystemInit+0x1a4>)
   14832:	4b35      	ldr	r3, [pc, #212]	; (14908 <SystemInit+0x1a8>)
   14834:	680a      	ldr	r2, [r1, #0]
   14836:	681b      	ldr	r3, [r3, #0]
   14838:	f022 020f 	bic.w	r2, r2, #15
   1483c:	f003 030f 	and.w	r3, r3, #15
   14840:	4313      	orrs	r3, r2
   14842:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   14844:	f7ff ff70 	bl	14728 <nrf52_errata_103>
   14848:	b118      	cbz	r0, 14852 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1484a:	4b30      	ldr	r3, [pc, #192]	; (1490c <SystemInit+0x1ac>)
   1484c:	f44f 7200 	mov.w	r2, #512	; 0x200
   14850:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   14852:	f7ff ff5f 	bl	14714 <nrf52_errata_136>
   14856:	b148      	cbz	r0, 1486c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   14858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1485c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   14860:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   14862:	bf44      	itt	mi
   14864:	f06f 0201 	mvnmi.w	r2, #1
   14868:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1486c:	4b28      	ldr	r3, [pc, #160]	; (14910 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1486e:	681b      	ldr	r3, [r3, #0]
   14870:	2b08      	cmp	r3, #8
   14872:	d10e      	bne.n	14892 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   14874:	4b27      	ldr	r3, [pc, #156]	; (14914 <SystemInit+0x1b4>)
   14876:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   14878:	2b05      	cmp	r3, #5
   1487a:	d802      	bhi.n	14882 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1487c:	4a26      	ldr	r2, [pc, #152]	; (14918 <SystemInit+0x1b8>)
   1487e:	5cd3      	ldrb	r3, [r2, r3]
   14880:	b13b      	cbz	r3, 14892 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   14882:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14886:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1488a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1488e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   14892:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14896:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1489a:	2a00      	cmp	r2, #0
   1489c:	db03      	blt.n	148a6 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1489e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   148a2:	2b00      	cmp	r3, #0
   148a4:	da22      	bge.n	148ec <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   148a6:	491d      	ldr	r1, [pc, #116]	; (1491c <SystemInit+0x1bc>)
   148a8:	2301      	movs	r3, #1
   148aa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   148ae:	f7ff ff4f 	bl	14750 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   148b2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   148b6:	2412      	movs	r4, #18
   148b8:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   148bc:	f7ff ff48 	bl	14750 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   148c0:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   148c4:	f7ff ff44 	bl	14750 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   148c8:	2300      	movs	r3, #0
   148ca:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   148ce:	f7ff ff3f 	bl	14750 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   148d2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   148d6:	4912      	ldr	r1, [pc, #72]	; (14920 <SystemInit+0x1c0>)
   148d8:	4b12      	ldr	r3, [pc, #72]	; (14924 <SystemInit+0x1c4>)
   148da:	68ca      	ldr	r2, [r1, #12]
   148dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   148e0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   148e2:	60cb      	str	r3, [r1, #12]
   148e4:	f3bf 8f4f 	dsb	sy
    __NOP();
   148e8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   148ea:	e7fd      	b.n	148e8 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   148ec:	4b0e      	ldr	r3, [pc, #56]	; (14928 <SystemInit+0x1c8>)
   148ee:	4a0f      	ldr	r2, [pc, #60]	; (1492c <SystemInit+0x1cc>)
   148f0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   148f2:	bd10      	pop	{r4, pc}
   148f4:	4000c000 	.word	0x4000c000
   148f8:	4000568c 	.word	0x4000568c
   148fc:	00038148 	.word	0x00038148
   14900:	4000f000 	.word	0x4000f000
   14904:	40000ee4 	.word	0x40000ee4
   14908:	10000258 	.word	0x10000258
   1490c:	40029640 	.word	0x40029640
   14910:	10000130 	.word	0x10000130
   14914:	10000134 	.word	0x10000134
   14918:	0001ef72 	.word	0x0001ef72
   1491c:	4001e000 	.word	0x4001e000
   14920:	e000ed00 	.word	0xe000ed00
   14924:	05fa0004 	.word	0x05fa0004
   14928:	20000140 	.word	0x20000140
   1492c:	03d09000 	.word	0x03d09000

00014930 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   14930:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   14932:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   14934:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   14936:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   1493a:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   1493c:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   14940:	d014      	beq.n	1496c <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14942:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   14946:	fa05 f204 	lsl.w	r2, r5, r4
   1494a:	ea23 0202 	bic.w	r2, r3, r2
   1494e:	e850 6f00 	ldrex	r6, [r0]
   14952:	429e      	cmp	r6, r3
   14954:	d104      	bne.n	14960 <nrfx_flag32_alloc+0x30>
   14956:	e840 2c00 	strex	ip, r2, [r0]
   1495a:	f1bc 0f00 	cmp.w	ip, #0
   1495e:	d1f6      	bne.n	1494e <nrfx_flag32_alloc+0x1e>
   14960:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   14964:	d1e6      	bne.n	14934 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   14966:	4802      	ldr	r0, [pc, #8]	; (14970 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   14968:	700c      	strb	r4, [r1, #0]
}
   1496a:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1496c:	4801      	ldr	r0, [pc, #4]	; (14974 <nrfx_flag32_alloc+0x44>)
   1496e:	e7fc      	b.n	1496a <nrfx_flag32_alloc+0x3a>
   14970:	0bad0000 	.word	0x0bad0000
   14974:	0bad0002 	.word	0x0bad0002

00014978 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   14978:	6803      	ldr	r3, [r0, #0]
   1497a:	40cb      	lsrs	r3, r1
   1497c:	07db      	lsls	r3, r3, #31
{
   1497e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   14980:	d415      	bmi.n	149ae <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   14982:	2301      	movs	r3, #1
   14984:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   14988:	6803      	ldr	r3, [r0, #0]
   1498a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1498e:	ea41 0203 	orr.w	r2, r1, r3
   14992:	e850 4f00 	ldrex	r4, [r0]
   14996:	429c      	cmp	r4, r3
   14998:	d104      	bne.n	149a4 <nrfx_flag32_free+0x2c>
   1499a:	e840 2c00 	strex	ip, r2, [r0]
   1499e:	f1bc 0f00 	cmp.w	ip, #0
   149a2:	d1f6      	bne.n	14992 <nrfx_flag32_free+0x1a>
   149a4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   149a8:	d1ee      	bne.n	14988 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   149aa:	4802      	ldr	r0, [pc, #8]	; (149b4 <nrfx_flag32_free+0x3c>)
}
   149ac:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   149ae:	4802      	ldr	r0, [pc, #8]	; (149b8 <nrfx_flag32_free+0x40>)
   149b0:	e7fc      	b.n	149ac <nrfx_flag32_free+0x34>
   149b2:	bf00      	nop
   149b4:	0bad0000 	.word	0x0bad0000
   149b8:	0bad0004 	.word	0x0bad0004

000149bc <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   149bc:	b508      	push	{r3, lr}
    switch (domain)
   149be:	b178      	cbz	r0, 149e0 <nrf_clock_is_running.constprop.0+0x24>
   149c0:	2801      	cmp	r0, #1
   149c2:	d01c      	beq.n	149fe <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
   149c4:	4a14      	ldr	r2, [pc, #80]	; (14a18 <nrf_clock_is_running.constprop.0+0x5c>)
   149c6:	4915      	ldr	r1, [pc, #84]	; (14a1c <nrf_clock_is_running.constprop.0+0x60>)
   149c8:	4815      	ldr	r0, [pc, #84]	; (14a20 <nrf_clock_is_running.constprop.0+0x64>)
   149ca:	f44f 734f 	mov.w	r3, #828	; 0x33c
   149ce:	f005 ff7d 	bl	1a8cc <printk>
   149d2:	4811      	ldr	r0, [pc, #68]	; (14a18 <nrf_clock_is_running.constprop.0+0x5c>)
   149d4:	f44f 714f 	mov.w	r1, #828	; 0x33c
   149d8:	f006 f911 	bl	1abfe <assert_post_action>
            return false;
   149dc:	2000      	movs	r0, #0
   149de:	e00d      	b.n	149fc <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
   149e0:	b131      	cbz	r1, 149f0 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   149e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   149e6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   149ea:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   149ee:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   149f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   149f4:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   149f8:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   149fc:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   149fe:	b131      	cbz	r1, 14a0e <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14a04:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   14a08:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   14a0c:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14a12:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
   14a16:	e7ef      	b.n	149f8 <nrf_clock_is_running.constprop.0+0x3c>
   14a18:	0001ef7e 	.word	0x0001ef7e
   14a1c:	000205d8 	.word	0x000205d8
   14a20:	0001d2dc 	.word	0x0001d2dc

00014a24 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   14a24:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   14a26:	4604      	mov	r4, r0
   14a28:	b948      	cbnz	r0, 14a3e <nrfx_clock_init+0x1a>
   14a2a:	490a      	ldr	r1, [pc, #40]	; (14a54 <nrfx_clock_init+0x30>)
   14a2c:	480a      	ldr	r0, [pc, #40]	; (14a58 <nrfx_clock_init+0x34>)
   14a2e:	4a0b      	ldr	r2, [pc, #44]	; (14a5c <nrfx_clock_init+0x38>)
   14a30:	23bd      	movs	r3, #189	; 0xbd
   14a32:	f005 ff4b 	bl	1a8cc <printk>
   14a36:	4809      	ldr	r0, [pc, #36]	; (14a5c <nrfx_clock_init+0x38>)
   14a38:	21bd      	movs	r1, #189	; 0xbd
   14a3a:	f006 f8e0 	bl	1abfe <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   14a3e:	4b08      	ldr	r3, [pc, #32]	; (14a60 <nrfx_clock_init+0x3c>)
   14a40:	791a      	ldrb	r2, [r3, #4]
   14a42:	b922      	cbnz	r2, 14a4e <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   14a44:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   14a46:	4807      	ldr	r0, [pc, #28]	; (14a64 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   14a48:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   14a4a:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   14a4c:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   14a4e:	4806      	ldr	r0, [pc, #24]	; (14a68 <nrfx_clock_init+0x44>)
    return err_code;
   14a50:	e7fc      	b.n	14a4c <nrfx_clock_init+0x28>
   14a52:	bf00      	nop
   14a54:	0001f1b4 	.word	0x0001f1b4
   14a58:	0001d2dc 	.word	0x0001d2dc
   14a5c:	0001efb2 	.word	0x0001efb2
   14a60:	2000102c 	.word	0x2000102c
   14a64:	0bad0000 	.word	0x0bad0000
   14a68:	0bad000c 	.word	0x0bad000c

00014a6c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   14a6c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   14a6e:	4b0b      	ldr	r3, [pc, #44]	; (14a9c <nrfx_clock_enable+0x30>)
   14a70:	791b      	ldrb	r3, [r3, #4]
   14a72:	b94b      	cbnz	r3, 14a88 <nrfx_clock_enable+0x1c>
   14a74:	490a      	ldr	r1, [pc, #40]	; (14aa0 <nrfx_clock_enable+0x34>)
   14a76:	480b      	ldr	r0, [pc, #44]	; (14aa4 <nrfx_clock_enable+0x38>)
   14a78:	4a0b      	ldr	r2, [pc, #44]	; (14aa8 <nrfx_clock_enable+0x3c>)
   14a7a:	23d6      	movs	r3, #214	; 0xd6
   14a7c:	f005 ff26 	bl	1a8cc <printk>
   14a80:	4809      	ldr	r0, [pc, #36]	; (14aa8 <nrfx_clock_enable+0x3c>)
   14a82:	21d6      	movs	r1, #214	; 0xd6
   14a84:	f006 f8bb 	bl	1abfe <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   14a88:	2000      	movs	r0, #0
   14a8a:	f7fc fb55 	bl	11138 <arch_irq_is_enabled>
   14a8e:	b918      	cbnz	r0, 14a98 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   14a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   14a94:	f7fc bb2c 	b.w	110f0 <arch_irq_enable>
   14a98:	bd08      	pop	{r3, pc}
   14a9a:	bf00      	nop
   14a9c:	2000102c 	.word	0x2000102c
   14aa0:	0001efef 	.word	0x0001efef
   14aa4:	0001d2dc 	.word	0x0001d2dc
   14aa8:	0001efb2 	.word	0x0001efb2

00014aac <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   14aac:	4b22      	ldr	r3, [pc, #136]	; (14b38 <nrfx_clock_start+0x8c>)
   14aae:	791b      	ldrb	r3, [r3, #4]
{
   14ab0:	b513      	push	{r0, r1, r4, lr}
   14ab2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   14ab4:	b95b      	cbnz	r3, 14ace <nrfx_clock_start+0x22>
   14ab6:	4921      	ldr	r1, [pc, #132]	; (14b3c <nrfx_clock_start+0x90>)
   14ab8:	4821      	ldr	r0, [pc, #132]	; (14b40 <nrfx_clock_start+0x94>)
   14aba:	4a22      	ldr	r2, [pc, #136]	; (14b44 <nrfx_clock_start+0x98>)
   14abc:	f44f 7389 	mov.w	r3, #274	; 0x112
   14ac0:	f005 ff04 	bl	1a8cc <printk>
   14ac4:	481f      	ldr	r0, [pc, #124]	; (14b44 <nrfx_clock_start+0x98>)
   14ac6:	f44f 7189 	mov.w	r1, #274	; 0x112
   14aca:	f006 f898 	bl	1abfe <assert_post_action>
    switch (domain)
   14ace:	b174      	cbz	r4, 14aee <nrfx_clock_start+0x42>
   14ad0:	2c01      	cmp	r4, #1
   14ad2:	d027      	beq.n	14b24 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   14ad4:	4a1b      	ldr	r2, [pc, #108]	; (14b44 <nrfx_clock_start+0x98>)
   14ad6:	491c      	ldr	r1, [pc, #112]	; (14b48 <nrfx_clock_start+0x9c>)
   14ad8:	4819      	ldr	r0, [pc, #100]	; (14b40 <nrfx_clock_start+0x94>)
   14ada:	f44f 73a2 	mov.w	r3, #324	; 0x144
   14ade:	f005 fef5 	bl	1a8cc <printk>
   14ae2:	4818      	ldr	r0, [pc, #96]	; (14b44 <nrfx_clock_start+0x98>)
   14ae4:	f44f 71a2 	mov.w	r1, #324	; 0x144
   14ae8:	f006 f889 	bl	1abfe <assert_post_action>
            break;
    }
}
   14aec:	e016      	b.n	14b1c <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   14aee:	a901      	add	r1, sp, #4
   14af0:	4620      	mov	r0, r4
   14af2:	f7ff ff63 	bl	149bc <nrf_clock_is_running.constprop.0>
   14af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14afa:	b188      	cbz	r0, 14b20 <nrfx_clock_start+0x74>
   14afc:	9a01      	ldr	r2, [sp, #4]
   14afe:	2a01      	cmp	r2, #1
   14b00:	d10e      	bne.n	14b20 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14b02:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14b06:	4b11      	ldr	r3, [pc, #68]	; (14b4c <nrfx_clock_start+0xa0>)
   14b08:	2200      	movs	r2, #0
   14b0a:	601a      	str	r2, [r3, #0]
   14b0c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   14b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14b12:	2202      	movs	r2, #2
   14b14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14b18:	2201      	movs	r2, #1
   14b1a:	609a      	str	r2, [r3, #8]
}
   14b1c:	b002      	add	sp, #8
   14b1e:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   14b20:	2200      	movs	r2, #0
   14b22:	e7ee      	b.n	14b02 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14b24:	4b0a      	ldr	r3, [pc, #40]	; (14b50 <nrfx_clock_start+0xa4>)
   14b26:	2200      	movs	r2, #0
   14b28:	601a      	str	r2, [r3, #0]
   14b2a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   14b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14b30:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14b34:	601c      	str	r4, [r3, #0]
}
   14b36:	e7f1      	b.n	14b1c <nrfx_clock_start+0x70>
   14b38:	2000102c 	.word	0x2000102c
   14b3c:	0001efef 	.word	0x0001efef
   14b40:	0001d2dc 	.word	0x0001d2dc
   14b44:	0001efb2 	.word	0x0001efb2
   14b48:	000205d8 	.word	0x000205d8
   14b4c:	40000104 	.word	0x40000104
   14b50:	40000100 	.word	0x40000100

00014b54 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   14b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   14b56:	4d2f      	ldr	r5, [pc, #188]	; (14c14 <_flash_used+0xb8>)
   14b58:	792a      	ldrb	r2, [r5, #4]
{
   14b5a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   14b5c:	b95a      	cbnz	r2, 14b76 <_flash_used+0x1a>
   14b5e:	492e      	ldr	r1, [pc, #184]	; (14c18 <_flash_used+0xbc>)
   14b60:	482e      	ldr	r0, [pc, #184]	; (14c1c <_flash_used+0xc0>)
   14b62:	4a2f      	ldr	r2, [pc, #188]	; (14c20 <_flash_used+0xc4>)
   14b64:	f240 134b 	movw	r3, #331	; 0x14b
   14b68:	f005 feb0 	bl	1a8cc <printk>
   14b6c:	482c      	ldr	r0, [pc, #176]	; (14c20 <_flash_used+0xc4>)
   14b6e:	f240 114b 	movw	r1, #331	; 0x14b
   14b72:	f006 f844 	bl	1abfe <assert_post_action>
    switch (domain)
   14b76:	b17c      	cbz	r4, 14b98 <_flash_used+0x3c>
   14b78:	2c01      	cmp	r4, #1
   14b7a:	d028      	beq.n	14bce <_flash_used+0x72>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   14b7c:	4929      	ldr	r1, [pc, #164]	; (14c24 <_flash_used+0xc8>)
   14b7e:	4827      	ldr	r0, [pc, #156]	; (14c1c <_flash_used+0xc0>)
   14b80:	4a27      	ldr	r2, [pc, #156]	; (14c20 <_flash_used+0xc4>)
   14b82:	f240 1367 	movw	r3, #359	; 0x167
   14b86:	f005 fea1 	bl	1a8cc <printk>
   14b8a:	4825      	ldr	r0, [pc, #148]	; (14c20 <_flash_used+0xc4>)
   14b8c:	f240 1167 	movw	r1, #359	; 0x167
   14b90:	f006 f835 	bl	1abfe <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   14b94:	b003      	add	sp, #12
   14b96:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
   14b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14b9c:	2202      	movs	r2, #2
   14b9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ba2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   14ba6:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14baa:	2201      	movs	r2, #1
   14bac:	681b      	ldr	r3, [r3, #0]
   14bae:	4b1e      	ldr	r3, [pc, #120]	; (14c28 <_flash_used+0xcc>)
   14bb0:	f242 7410 	movw	r4, #10000	; 0x2710
   14bb4:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   14bb6:	2100      	movs	r1, #0
   14bb8:	4608      	mov	r0, r1
   14bba:	f7ff feff 	bl	149bc <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   14bbe:	2800      	cmp	r0, #0
   14bc0:	d0e8      	beq.n	14b94 <_flash_used+0x38>
   14bc2:	2001      	movs	r0, #1
   14bc4:	f006 fdb4 	bl	1b730 <nrfx_busy_wait>
   14bc8:	3c01      	subs	r4, #1
   14bca:	d1f4      	bne.n	14bb6 <_flash_used+0x5a>
   14bcc:	e7e2      	b.n	14b94 <_flash_used+0x38>
    p_reg->INTENCLR = mask;
   14bce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14bd2:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   14bd4:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14bd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14bdc:	f503 7380 	add.w	r3, r3, #256	; 0x100
   14be0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14be2:	4b12      	ldr	r3, [pc, #72]	; (14c2c <_flash_used+0xd0>)
   14be4:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   14be6:	f88d 4007 	strb.w	r4, [sp, #7]
   14bea:	f242 7410 	movw	r4, #10000	; 0x2710
   14bee:	f10d 0107 	add.w	r1, sp, #7
   14bf2:	2001      	movs	r0, #1
   14bf4:	f7ff fee2 	bl	149bc <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   14bf8:	b910      	cbnz	r0, 14c00 <_flash_used+0xa4>
            m_clock_cb.hfclk_started = false;
   14bfa:	2300      	movs	r3, #0
   14bfc:	716b      	strb	r3, [r5, #5]
   14bfe:	e7c9      	b.n	14b94 <_flash_used+0x38>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   14c00:	f89d 0007 	ldrb.w	r0, [sp, #7]
   14c04:	2801      	cmp	r0, #1
   14c06:	d1f8      	bne.n	14bfa <_flash_used+0x9e>
   14c08:	f006 fd92 	bl	1b730 <nrfx_busy_wait>
   14c0c:	3c01      	subs	r4, #1
   14c0e:	d1ee      	bne.n	14bee <_flash_used+0x92>
   14c10:	e7f3      	b.n	14bfa <_flash_used+0x9e>
   14c12:	bf00      	nop
   14c14:	2000102c 	.word	0x2000102c
   14c18:	0001efef 	.word	0x0001efef
   14c1c:	0001d2dc 	.word	0x0001d2dc
   14c20:	0001efb2 	.word	0x0001efb2
   14c24:	000205d8 	.word	0x000205d8
   14c28:	4000000c 	.word	0x4000000c
   14c2c:	40000004 	.word	0x40000004

00014c30 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14c30:	4b16      	ldr	r3, [pc, #88]	; (14c8c <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   14c32:	b507      	push	{r0, r1, r2, lr}
   14c34:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   14c36:	b16a      	cbz	r2, 14c54 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c38:	2200      	movs	r2, #0
   14c3a:	601a      	str	r2, [r3, #0]
   14c3c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   14c3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14c42:	2201      	movs	r2, #1
   14c44:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   14c48:	4b11      	ldr	r3, [pc, #68]	; (14c90 <nrfx_power_clock_irq_handler+0x60>)
   14c4a:	7958      	ldrb	r0, [r3, #5]
   14c4c:	b910      	cbnz	r0, 14c54 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   14c4e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   14c50:	681b      	ldr	r3, [r3, #0]
   14c52:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14c54:	4b0f      	ldr	r3, [pc, #60]	; (14c94 <nrfx_power_clock_irq_handler+0x64>)
   14c56:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   14c58:	b16a      	cbz	r2, 14c76 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c5a:	2000      	movs	r0, #0
   14c5c:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   14c5e:	a901      	add	r1, sp, #4
   14c60:	681b      	ldr	r3, [r3, #0]
   14c62:	f7ff feab 	bl	149bc <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   14c66:	9a01      	ldr	r2, [sp, #4]
   14c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14c6c:	b932      	cbnz	r2, 14c7c <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14c6e:	2201      	movs	r2, #1
   14c70:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c74:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   14c76:	b003      	add	sp, #12
   14c78:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   14c7c:	2202      	movs	r2, #2
   14c7e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   14c82:	4b03      	ldr	r3, [pc, #12]	; (14c90 <nrfx_power_clock_irq_handler+0x60>)
   14c84:	2001      	movs	r0, #1
   14c86:	681b      	ldr	r3, [r3, #0]
   14c88:	4798      	blx	r3
}
   14c8a:	e7f4      	b.n	14c76 <nrfx_power_clock_irq_handler+0x46>
   14c8c:	40000100 	.word	0x40000100
   14c90:	2000102c 	.word	0x2000102c
   14c94:	40000104 	.word	0x40000104

00014c98 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   14c98:	4b05      	ldr	r3, [pc, #20]	; (14cb0 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14c9a:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   14c9c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   14ca0:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
   14ca4:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   14ca8:	4258      	negs	r0, r3
   14caa:	4158      	adcs	r0, r3
   14cac:	4770      	bx	lr
   14cae:	bf00      	nop
   14cb0:	20000144 	.word	0x20000144

00014cb4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   14cb4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14cb6:	f100 0308 	add.w	r3, r0, #8
   14cba:	4c0c      	ldr	r4, [pc, #48]	; (14cec <call_handler+0x38>)
   14cbc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   14cc0:	05da      	lsls	r2, r3, #23
{
   14cc2:	4605      	mov	r5, r0
   14cc4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14cc6:	d507      	bpl.n	14cd8 <call_handler+0x24>
   14cc8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   14ccc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   14cd0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   14cd4:	6852      	ldr	r2, [r2, #4]
   14cd6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   14cd8:	68a3      	ldr	r3, [r4, #8]
   14cda:	b12b      	cbz	r3, 14ce8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   14cdc:	68e2      	ldr	r2, [r4, #12]
   14cde:	4631      	mov	r1, r6
   14ce0:	4628      	mov	r0, r5
    }
}
   14ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   14ce6:	4718      	bx	r3
}
   14ce8:	bd70      	pop	{r4, r5, r6, pc}
   14cea:	bf00      	nop
   14cec:	20000144 	.word	0x20000144

00014cf0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14cf0:	4b19      	ldr	r3, [pc, #100]	; (14d58 <release_handler+0x68>)
   14cf2:	3008      	adds	r0, #8
{
   14cf4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14cf6:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   14cfa:	05d1      	lsls	r1, r2, #23
   14cfc:	d51d      	bpl.n	14d3a <release_handler+0x4a>
   14cfe:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   14d02:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   14d06:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14d0a:	f103 0410 	add.w	r4, r3, #16
   14d0e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   14d10:	f834 2b02 	ldrh.w	r2, [r4], #2
   14d14:	f412 7f80 	tst.w	r2, #256	; 0x100
   14d18:	d003      	beq.n	14d22 <release_handler+0x32>
   14d1a:	f3c2 2243 	ubfx	r2, r2, #9, #4
   14d1e:	4291      	cmp	r1, r2
   14d20:	d00b      	beq.n	14d3a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14d22:	3001      	adds	r0, #1
   14d24:	2830      	cmp	r0, #48	; 0x30
   14d26:	d1f3      	bne.n	14d10 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   14d28:	2200      	movs	r2, #0
   14d2a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14d2e:	480b      	ldr	r0, [pc, #44]	; (14d5c <release_handler+0x6c>)
   14d30:	f7ff fe22 	bl	14978 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   14d34:	4b0a      	ldr	r3, [pc, #40]	; (14d60 <release_handler+0x70>)
   14d36:	4298      	cmp	r0, r3
   14d38:	d100      	bne.n	14d3c <release_handler+0x4c>
}
   14d3a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   14d3c:	4909      	ldr	r1, [pc, #36]	; (14d64 <release_handler+0x74>)
   14d3e:	480a      	ldr	r0, [pc, #40]	; (14d68 <release_handler+0x78>)
   14d40:	4a0a      	ldr	r2, [pc, #40]	; (14d6c <release_handler+0x7c>)
   14d42:	f44f 7399 	mov.w	r3, #306	; 0x132
   14d46:	f005 fdc1 	bl	1a8cc <printk>
}
   14d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   14d4e:	4807      	ldr	r0, [pc, #28]	; (14d6c <release_handler+0x7c>)
   14d50:	f44f 7199 	mov.w	r1, #306	; 0x132
   14d54:	f005 bf53 	b.w	1abfe <assert_post_action>
   14d58:	20000144 	.word	0x20000144
   14d5c:	200001b8 	.word	0x200001b8
   14d60:	0bad0000 	.word	0x0bad0000
   14d64:	0001f071 	.word	0x0001f071
   14d68:	0001d2dc 	.word	0x0001d2dc
   14d6c:	0001f00d 	.word	0x0001f00d

00014d70 <pin_handler_trigger_uninit>:
{
   14d70:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   14d72:	4c0a      	ldr	r4, [pc, #40]	; (14d9c <pin_handler_trigger_uninit+0x2c>)
   14d74:	f100 0508 	add.w	r5, r0, #8
   14d78:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   14d7c:	069a      	lsls	r2, r3, #26
   14d7e:	d506      	bpl.n	14d8e <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   14d80:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   14d82:	4a07      	ldr	r2, [pc, #28]	; (14da0 <pin_handler_trigger_uninit+0x30>)
   14d84:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   14d88:	2100      	movs	r1, #0
   14d8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   14d8e:	f7ff ffaf 	bl	14cf0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   14d92:	2300      	movs	r3, #0
   14d94:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   14d98:	bd38      	pop	{r3, r4, r5, pc}
   14d9a:	bf00      	nop
   14d9c:	20000144 	.word	0x20000144
   14da0:	40006000 	.word	0x40006000

00014da4 <nrf_gpio_pin_port_decode>:
{
   14da4:	b510      	push	{r4, lr}
   14da6:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14da8:	6800      	ldr	r0, [r0, #0]
   14daa:	f006 fcc8 	bl	1b73e <nrf_gpio_pin_present_check>
   14dae:	b958      	cbnz	r0, 14dc8 <nrf_gpio_pin_port_decode+0x24>
   14db0:	4912      	ldr	r1, [pc, #72]	; (14dfc <nrf_gpio_pin_port_decode+0x58>)
   14db2:	4813      	ldr	r0, [pc, #76]	; (14e00 <nrf_gpio_pin_port_decode+0x5c>)
   14db4:	4a13      	ldr	r2, [pc, #76]	; (14e04 <nrf_gpio_pin_port_decode+0x60>)
   14db6:	f240 2329 	movw	r3, #553	; 0x229
   14dba:	f005 fd87 	bl	1a8cc <printk>
   14dbe:	4811      	ldr	r0, [pc, #68]	; (14e04 <nrf_gpio_pin_port_decode+0x60>)
   14dc0:	f240 2129 	movw	r1, #553	; 0x229
   14dc4:	f005 ff1b 	bl	1abfe <assert_post_action>
    uint32_t pin_number = *p_pin;
   14dc8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   14dca:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14dce:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   14dd0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14dd2:	d00d      	beq.n	14df0 <nrf_gpio_pin_port_decode+0x4c>
   14dd4:	2b01      	cmp	r3, #1
   14dd6:	d00e      	beq.n	14df6 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
   14dd8:	490b      	ldr	r1, [pc, #44]	; (14e08 <nrf_gpio_pin_port_decode+0x64>)
   14dda:	4809      	ldr	r0, [pc, #36]	; (14e00 <nrf_gpio_pin_port_decode+0x5c>)
   14ddc:	4a09      	ldr	r2, [pc, #36]	; (14e04 <nrf_gpio_pin_port_decode+0x60>)
   14dde:	f240 232e 	movw	r3, #558	; 0x22e
   14de2:	f005 fd73 	bl	1a8cc <printk>
   14de6:	4807      	ldr	r0, [pc, #28]	; (14e04 <nrf_gpio_pin_port_decode+0x60>)
   14de8:	f240 212e 	movw	r1, #558	; 0x22e
   14dec:	f005 ff07 	bl	1abfe <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14df0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   14df4:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   14df6:	4805      	ldr	r0, [pc, #20]	; (14e0c <nrf_gpio_pin_port_decode+0x68>)
   14df8:	e7fc      	b.n	14df4 <nrf_gpio_pin_port_decode+0x50>
   14dfa:	bf00      	nop
   14dfc:	0001e80d 	.word	0x0001e80d
   14e00:	0001d2dc 	.word	0x0001d2dc
   14e04:	0001e7da 	.word	0x0001e7da
   14e08:	000205d8 	.word	0x000205d8
   14e0c:	50000300 	.word	0x50000300

00014e10 <nrfx_gpiote_input_configure>:
{
   14e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e12:	4604      	mov	r4, r0
   14e14:	b085      	sub	sp, #20
   14e16:	4617      	mov	r7, r2
   14e18:	461d      	mov	r5, r3
    if (p_input_config)
   14e1a:	b1f1      	cbz	r1, 14e5a <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   14e1c:	f7ff ff3c 	bl	14c98 <pin_is_task_output>
   14e20:	b110      	cbz	r0, 14e28 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   14e22:	484a      	ldr	r0, [pc, #296]	; (14f4c <nrfx_gpiote_input_configure+0x13c>)
}
   14e24:	b005      	add	sp, #20
   14e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   14e28:	460b      	mov	r3, r1
   14e2a:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   14e2e:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   14e32:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   14e36:	f10d 020f 	add.w	r2, sp, #15
   14e3a:	f10d 010e 	add.w	r1, sp, #14
   14e3e:	4620      	mov	r0, r4
   14e40:	f006 fc92 	bl	1b768 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   14e44:	4a42      	ldr	r2, [pc, #264]	; (14f50 <nrfx_gpiote_input_configure+0x140>)
   14e46:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   14e4a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   14e4e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   14e52:	f043 0301 	orr.w	r3, r3, #1
   14e56:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   14e5a:	b197      	cbz	r7, 14e82 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14e5c:	4b3c      	ldr	r3, [pc, #240]	; (14f50 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   14e5e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   14e60:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14e62:	f104 0008 	add.w	r0, r4, #8
   14e66:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   14e6a:	078f      	lsls	r7, r1, #30
   14e6c:	d50c      	bpl.n	14e88 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
   14e6e:	2a00      	cmp	r2, #0
   14e70:	d1d7      	bne.n	14e22 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   14e72:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   14e76:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   14e7a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   14e7e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   14e82:	bbcd      	cbnz	r5, 14ef8 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
   14e84:	4833      	ldr	r0, [pc, #204]	; (14f54 <nrfx_gpiote_input_configure+0x144>)
   14e86:	e7cd      	b.n	14e24 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   14e88:	f021 0120 	bic.w	r1, r1, #32
   14e8c:	04c9      	lsls	r1, r1, #19
   14e8e:	0cc9      	lsrs	r1, r1, #19
   14e90:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   14e94:	2a00      	cmp	r2, #0
   14e96:	d0ec      	beq.n	14e72 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
   14e98:	2e03      	cmp	r6, #3
   14e9a:	d8c2      	bhi.n	14e22 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   14e9c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   14e9e:	b92e      	cbnz	r6, 14eac <nrfx_gpiote_input_configure+0x9c>
   14ea0:	4a2d      	ldr	r2, [pc, #180]	; (14f58 <nrfx_gpiote_input_configure+0x148>)
   14ea2:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   14ea6:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   14eaa:	e7e2      	b.n	14e72 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14eac:	00ba      	lsls	r2, r7, #2
   14eae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14eb2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14eb6:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   14eba:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   14ebe:	f02c 0c03 	bic.w	ip, ip, #3
   14ec2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14ec6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   14eca:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   14ece:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   14ed2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14ed6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   14eda:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   14ede:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   14ee2:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   14ee6:	ea4c 0c0e 	orr.w	ip, ip, lr
   14eea:	f041 0120 	orr.w	r1, r1, #32
   14eee:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   14ef2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   14ef6:	e7bc      	b.n	14e72 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   14ef8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   14efc:	4620      	mov	r0, r4
   14efe:	f7ff fef7 	bl	14cf0 <release_handler>
    if (!handler)
   14f02:	2e00      	cmp	r6, #0
   14f04:	d0be      	beq.n	14e84 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   14f06:	4d12      	ldr	r5, [pc, #72]	; (14f50 <nrfx_gpiote_input_configure+0x140>)
   14f08:	682b      	ldr	r3, [r5, #0]
   14f0a:	429e      	cmp	r6, r3
   14f0c:	d104      	bne.n	14f18 <nrfx_gpiote_input_configure+0x108>
   14f0e:	686b      	ldr	r3, [r5, #4]
   14f10:	429f      	cmp	r7, r3
   14f12:	d101      	bne.n	14f18 <nrfx_gpiote_input_configure+0x108>
   14f14:	2200      	movs	r2, #0
   14f16:	e00a      	b.n	14f2e <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   14f18:	4810      	ldr	r0, [pc, #64]	; (14f5c <nrfx_gpiote_input_configure+0x14c>)
   14f1a:	f10d 010f 	add.w	r1, sp, #15
   14f1e:	f7ff fd07 	bl	14930 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   14f22:	4b0c      	ldr	r3, [pc, #48]	; (14f54 <nrfx_gpiote_input_configure+0x144>)
   14f24:	4298      	cmp	r0, r3
   14f26:	f47f af7d 	bne.w	14e24 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   14f2a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   14f2e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   14f32:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   14f36:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   14f38:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   14f3a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   14f3e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   14f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   14f46:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   14f4a:	e79b      	b.n	14e84 <nrfx_gpiote_input_configure+0x74>
   14f4c:	0bad0004 	.word	0x0bad0004
   14f50:	20000144 	.word	0x20000144
   14f54:	0bad0000 	.word	0x0bad0000
   14f58:	40006000 	.word	0x40006000
   14f5c:	200001b8 	.word	0x200001b8

00014f60 <nrfx_gpiote_output_configure>:
{
   14f60:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f62:	4604      	mov	r4, r0
   14f64:	b085      	sub	sp, #20
   14f66:	4615      	mov	r5, r2
    if (p_config)
   14f68:	b309      	cbz	r1, 14fae <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14f6a:	f100 0708 	add.w	r7, r0, #8
   14f6e:	4e31      	ldr	r6, [pc, #196]	; (15034 <nrfx_gpiote_output_configure+0xd4>)
   14f70:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   14f74:	0798      	lsls	r0, r3, #30
   14f76:	d401      	bmi.n	14f7c <nrfx_gpiote_output_configure+0x1c>
   14f78:	069a      	lsls	r2, r3, #26
   14f7a:	d458      	bmi.n	1502e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   14f7c:	f013 0f1c 	tst.w	r3, #28
   14f80:	d002      	beq.n	14f88 <nrfx_gpiote_output_configure+0x28>
   14f82:	784b      	ldrb	r3, [r1, #1]
   14f84:	2b01      	cmp	r3, #1
   14f86:	d052      	beq.n	1502e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   14f88:	2301      	movs	r3, #1
   14f8a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   14f8e:	2300      	movs	r3, #0
   14f90:	e9cd 1300 	strd	r1, r3, [sp]
   14f94:	1c4a      	adds	r2, r1, #1
   14f96:	1c8b      	adds	r3, r1, #2
   14f98:	4620      	mov	r0, r4
   14f9a:	f10d 010f 	add.w	r1, sp, #15
   14f9e:	f006 fbe3 	bl	1b768 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   14fa2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   14fa6:	f043 0303 	orr.w	r3, r3, #3
   14faa:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   14fae:	b915      	cbnz	r5, 14fb6 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   14fb0:	4821      	ldr	r0, [pc, #132]	; (15038 <nrfx_gpiote_output_configure+0xd8>)
}
   14fb2:	b005      	add	sp, #20
   14fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14fb6:	4e1f      	ldr	r6, [pc, #124]	; (15034 <nrfx_gpiote_output_configure+0xd4>)
   14fb8:	f104 0708 	add.w	r7, r4, #8
   14fbc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   14fc0:	0783      	lsls	r3, r0, #30
   14fc2:	d534      	bpl.n	1502e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
   14fc4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   14fc8:	4661      	mov	r1, ip
   14fca:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   14fcc:	f020 0020 	bic.w	r0, r0, #32
   14fd0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   14fd4:	04c0      	lsls	r0, r0, #19
   14fd6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   14fda:	0cc0      	lsrs	r0, r0, #19
   14fdc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   14fe0:	2300      	movs	r3, #0
   14fe2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   14fe6:	786a      	ldrb	r2, [r5, #1]
   14fe8:	2a00      	cmp	r2, #0
   14fea:	d0e1      	beq.n	14fb0 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   14fec:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   14ff0:	78ad      	ldrb	r5, [r5, #2]
   14ff2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   14ff6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   14ffa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14ffe:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   15002:	0223      	lsls	r3, r4, #8
   15004:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   15008:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1500a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1500e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   15012:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15014:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   15016:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1501a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1501e:	432b      	orrs	r3, r5
   15020:	f040 0020 	orr.w	r0, r0, #32
   15024:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   15028:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1502c:	e7c0      	b.n	14fb0 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   1502e:	4803      	ldr	r0, [pc, #12]	; (1503c <nrfx_gpiote_output_configure+0xdc>)
   15030:	e7bf      	b.n	14fb2 <nrfx_gpiote_output_configure+0x52>
   15032:	bf00      	nop
   15034:	20000144 	.word	0x20000144
   15038:	0bad0000 	.word	0x0bad0000
   1503c:	0bad0004 	.word	0x0bad0004

00015040 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   15040:	4b01      	ldr	r3, [pc, #4]	; (15048 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   15042:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   15046:	4770      	bx	lr
   15048:	20000144 	.word	0x20000144

0001504c <nrfx_gpiote_channel_get>:
{
   1504c:	b538      	push	{r3, r4, r5, lr}
   1504e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   15050:	460d      	mov	r5, r1
   15052:	b959      	cbnz	r1, 1506c <nrfx_gpiote_channel_get+0x20>
   15054:	490b      	ldr	r1, [pc, #44]	; (15084 <nrfx_gpiote_channel_get+0x38>)
   15056:	480c      	ldr	r0, [pc, #48]	; (15088 <nrfx_gpiote_channel_get+0x3c>)
   15058:	4a0c      	ldr	r2, [pc, #48]	; (1508c <nrfx_gpiote_channel_get+0x40>)
   1505a:	f240 2335 	movw	r3, #565	; 0x235
   1505e:	f005 fc35 	bl	1a8cc <printk>
   15062:	480a      	ldr	r0, [pc, #40]	; (1508c <nrfx_gpiote_channel_get+0x40>)
   15064:	f240 2135 	movw	r1, #565	; 0x235
   15068:	f005 fdc9 	bl	1abfe <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1506c:	3408      	adds	r4, #8
   1506e:	4b08      	ldr	r3, [pc, #32]	; (15090 <nrfx_gpiote_channel_get+0x44>)
   15070:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
   15074:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   15076:	bf43      	ittte	mi
   15078:	0b5b      	lsrmi	r3, r3, #13
   1507a:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
   1507c:	4805      	ldrmi	r0, [pc, #20]	; (15094 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
   1507e:	4806      	ldrpl	r0, [pc, #24]	; (15098 <nrfx_gpiote_channel_get+0x4c>)
}
   15080:	bd38      	pop	{r3, r4, r5, pc}
   15082:	bf00      	nop
   15084:	0001f085 	.word	0x0001f085
   15088:	0001d2dc 	.word	0x0001d2dc
   1508c:	0001f00d 	.word	0x0001f00d
   15090:	20000144 	.word	0x20000144
   15094:	0bad0000 	.word	0x0bad0000
   15098:	0bad0004 	.word	0x0bad0004

0001509c <nrfx_gpiote_init>:
{
   1509c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1509e:	4c0e      	ldr	r4, [pc, #56]	; (150d8 <nrfx_gpiote_init+0x3c>)
   150a0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   150a4:	b9b5      	cbnz	r5, 150d4 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   150a6:	2260      	movs	r2, #96	; 0x60
   150a8:	4629      	mov	r1, r5
   150aa:	f104 0010 	add.w	r0, r4, #16
   150ae:	f006 fd65 	bl	1bb7c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   150b2:	2006      	movs	r0, #6
   150b4:	f7fc f81c 	bl	110f0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   150b8:	4b08      	ldr	r3, [pc, #32]	; (150dc <nrfx_gpiote_init+0x40>)
    return err_code;
   150ba:	4809      	ldr	r0, [pc, #36]	; (150e0 <nrfx_gpiote_init+0x44>)
   150bc:	601d      	str	r5, [r3, #0]
   150be:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   150c0:	4b08      	ldr	r3, [pc, #32]	; (150e4 <nrfx_gpiote_init+0x48>)
   150c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   150c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   150ca:	2301      	movs	r3, #1
   150cc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   150d0:	6763      	str	r3, [r4, #116]	; 0x74
}
   150d2:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   150d4:	4804      	ldr	r0, [pc, #16]	; (150e8 <nrfx_gpiote_init+0x4c>)
   150d6:	e7fc      	b.n	150d2 <nrfx_gpiote_init+0x36>
   150d8:	20000144 	.word	0x20000144
   150dc:	4000617c 	.word	0x4000617c
   150e0:	0bad0000 	.word	0x0bad0000
   150e4:	40006000 	.word	0x40006000
   150e8:	0bad0005 	.word	0x0bad0005

000150ec <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   150ec:	4b03      	ldr	r3, [pc, #12]	; (150fc <nrfx_gpiote_is_init+0x10>)
   150ee:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   150f2:	3800      	subs	r0, #0
   150f4:	bf18      	it	ne
   150f6:	2001      	movne	r0, #1
   150f8:	4770      	bx	lr
   150fa:	bf00      	nop
   150fc:	20000144 	.word	0x20000144

00015100 <nrfx_gpiote_channel_free>:
{
   15100:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   15102:	4801      	ldr	r0, [pc, #4]	; (15108 <nrfx_gpiote_channel_free+0x8>)
   15104:	f7ff bc38 	b.w	14978 <nrfx_flag32_free>
   15108:	200001b4 	.word	0x200001b4

0001510c <nrfx_gpiote_channel_alloc>:
{
   1510c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1510e:	4801      	ldr	r0, [pc, #4]	; (15114 <nrfx_gpiote_channel_alloc+0x8>)
   15110:	f7ff bc0e 	b.w	14930 <nrfx_flag32_alloc>
   15114:	200001b4 	.word	0x200001b4

00015118 <nrfx_gpiote_trigger_enable>:
{
   15118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1511a:	4d31      	ldr	r5, [pc, #196]	; (151e0 <nrfx_gpiote_trigger_enable+0xc8>)
   1511c:	f100 0708 	add.w	r7, r0, #8
{
   15120:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   15122:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
   15126:	f013 0f1c 	tst.w	r3, #28
{
   1512a:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   1512c:	d10b      	bne.n	15146 <nrfx_gpiote_trigger_enable+0x2e>
   1512e:	492d      	ldr	r1, [pc, #180]	; (151e4 <nrfx_gpiote_trigger_enable+0xcc>)
   15130:	482d      	ldr	r0, [pc, #180]	; (151e8 <nrfx_gpiote_trigger_enable+0xd0>)
   15132:	4a2e      	ldr	r2, [pc, #184]	; (151ec <nrfx_gpiote_trigger_enable+0xd4>)
   15134:	f240 33df 	movw	r3, #991	; 0x3df
   15138:	f005 fbc8 	bl	1a8cc <printk>
   1513c:	482b      	ldr	r0, [pc, #172]	; (151ec <nrfx_gpiote_trigger_enable+0xd4>)
   1513e:	f240 31df 	movw	r1, #991	; 0x3df
   15142:	f005 fd5c 	bl	1abfe <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   15146:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1514a:	0683      	lsls	r3, r0, #26
   1514c:	d51f      	bpl.n	1518e <nrfx_gpiote_trigger_enable+0x76>
   1514e:	f010 0302 	ands.w	r3, r0, #2
   15152:	d11c      	bne.n	1518e <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   15154:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   15156:	4608      	mov	r0, r1
   15158:	f006 fb02 	bl	1b760 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   1515c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   15160:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15164:	6003      	str	r3, [r0, #0]
   15166:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15168:	008b      	lsls	r3, r1, #2
   1516a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1516e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   15172:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15176:	f042 0201 	orr.w	r2, r2, #1
   1517a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   1517e:	b126      	cbz	r6, 1518a <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
   15180:	4a1b      	ldr	r2, [pc, #108]	; (151f0 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   15182:	2301      	movs	r3, #1
   15184:	408b      	lsls	r3, r1
   15186:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1518a:	b003      	add	sp, #12
   1518c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   1518e:	b95e      	cbnz	r6, 151a8 <nrfx_gpiote_trigger_enable+0x90>
   15190:	4918      	ldr	r1, [pc, #96]	; (151f4 <nrfx_gpiote_trigger_enable+0xdc>)
   15192:	4815      	ldr	r0, [pc, #84]	; (151e8 <nrfx_gpiote_trigger_enable+0xd0>)
   15194:	4a15      	ldr	r2, [pc, #84]	; (151ec <nrfx_gpiote_trigger_enable+0xd4>)
   15196:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1519a:	f005 fb97 	bl	1a8cc <printk>
   1519e:	4813      	ldr	r0, [pc, #76]	; (151ec <nrfx_gpiote_trigger_enable+0xd4>)
   151a0:	f240 31ee 	movw	r1, #1006	; 0x3ee
   151a4:	f005 fd2b 	bl	1abfe <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   151a8:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
   151ac:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   151b0:	2b04      	cmp	r3, #4
   151b2:	d010      	beq.n	151d6 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   151b4:	2b05      	cmp	r3, #5
   151b6:	d010      	beq.n	151da <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   151b8:	a801      	add	r0, sp, #4
   151ba:	9401      	str	r4, [sp, #4]
   151bc:	f7ff fdf2 	bl	14da4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   151c0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   151c2:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   151c6:	40d9      	lsrs	r1, r3
   151c8:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   151cc:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   151ce:	4620      	mov	r0, r4
   151d0:	f006 fb15 	bl	1b7fe <nrf_gpio_cfg_sense_set>
}
   151d4:	e7d9      	b.n	1518a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   151d6:	2103      	movs	r1, #3
   151d8:	e7f9      	b.n	151ce <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   151da:	2102      	movs	r1, #2
   151dc:	e7f7      	b.n	151ce <nrfx_gpiote_trigger_enable+0xb6>
   151de:	bf00      	nop
   151e0:	20000144 	.word	0x20000144
   151e4:	0001f08f 	.word	0x0001f08f
   151e8:	0001d2dc 	.word	0x0001d2dc
   151ec:	0001f00d 	.word	0x0001f00d
   151f0:	40006000 	.word	0x40006000
   151f4:	0001f0a4 	.word	0x0001f0a4

000151f8 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   151f8:	4b0e      	ldr	r3, [pc, #56]	; (15234 <nrfx_gpiote_trigger_disable+0x3c>)
   151fa:	f100 0208 	add.w	r2, r0, #8
   151fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15202:	0699      	lsls	r1, r3, #26
   15204:	d513      	bpl.n	1522e <nrfx_gpiote_trigger_disable+0x36>
   15206:	079a      	lsls	r2, r3, #30
   15208:	d411      	bmi.n	1522e <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1520a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1520c:	2201      	movs	r2, #1
   1520e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   15210:	009b      	lsls	r3, r3, #2
   15212:	4909      	ldr	r1, [pc, #36]	; (15238 <nrfx_gpiote_trigger_disable+0x40>)
   15214:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15218:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1521c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   15220:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15224:	f022 0203 	bic.w	r2, r2, #3
   15228:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1522c:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1522e:	2100      	movs	r1, #0
   15230:	f006 bae5 	b.w	1b7fe <nrf_gpio_cfg_sense_set>
   15234:	20000144 	.word	0x20000144
   15238:	40006000 	.word	0x40006000

0001523c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1523c:	4b0e      	ldr	r3, [pc, #56]	; (15278 <nrfx_gpiote_pin_uninit+0x3c>)
   1523e:	f100 0208 	add.w	r2, r0, #8
{
   15242:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   15244:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   15248:	07db      	lsls	r3, r3, #31
{
   1524a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1524c:	d511      	bpl.n	15272 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1524e:	f7ff ffd3 	bl	151f8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   15252:	4620      	mov	r0, r4
   15254:	f7ff fd8c 	bl	14d70 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15258:	a801      	add	r0, sp, #4
   1525a:	9401      	str	r4, [sp, #4]
   1525c:	f7ff fda2 	bl	14da4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   15260:	9b01      	ldr	r3, [sp, #4]
   15262:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15266:	2202      	movs	r2, #2
   15268:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1526c:	4803      	ldr	r0, [pc, #12]	; (1527c <nrfx_gpiote_pin_uninit+0x40>)
}
   1526e:	b002      	add	sp, #8
   15270:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   15272:	4803      	ldr	r0, [pc, #12]	; (15280 <nrfx_gpiote_pin_uninit+0x44>)
   15274:	e7fb      	b.n	1526e <nrfx_gpiote_pin_uninit+0x32>
   15276:	bf00      	nop
   15278:	20000144 	.word	0x20000144
   1527c:	0bad0000 	.word	0x0bad0000
   15280:	0bad0004 	.word	0x0bad0004

00015284 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   15284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15288:	4b65      	ldr	r3, [pc, #404]	; (15420 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1528a:	4866      	ldr	r0, [pc, #408]	; (15424 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1528c:	4966      	ldr	r1, [pc, #408]	; (15428 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
   1528e:	2500      	movs	r5, #0
{
   15290:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   15292:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15294:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15296:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   15298:	b136      	cbz	r6, 152a8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1529a:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   1529e:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   152a0:	bf1e      	ittt	ne
   152a2:	601c      	strne	r4, [r3, #0]
   152a4:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   152a6:	4315      	orrne	r5, r2
        }
        mask <<= 1;
   152a8:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   152aa:	428b      	cmp	r3, r1
        mask <<= 1;
   152ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   152b0:	d1f1      	bne.n	15296 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   152b2:	4f5e      	ldr	r7, [pc, #376]	; (1542c <nrfx_gpiote_irq_handler+0x1a8>)
   152b4:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   152b6:	b37b      	cbz	r3, 15318 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
   152b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   152bc:	4e5c      	ldr	r6, [pc, #368]	; (15430 <nrfx_gpiote_irq_handler+0x1ac>)
   152be:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   152c2:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
   152c4:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   152c8:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   152cc:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
   152ce:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   152d2:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   152d4:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   152d8:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   152dc:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
   152e0:	f8d9 3000 	ldr.w	r3, [r9]
   152e4:	b9f3      	cbnz	r3, 15324 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   152e6:	f108 0820 	add.w	r8, r8, #32
   152ea:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
   152ee:	f109 0904 	add.w	r9, r9, #4
   152f2:	d1f5      	bne.n	152e0 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   152f4:	603b      	str	r3, [r7, #0]
   152f6:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
   152f8:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
   152fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   152fe:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   15302:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
   15304:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   15308:	9b01      	ldr	r3, [sp, #4]
   1530a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   1530e:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
   15310:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   15314:	4313      	orrs	r3, r2
   15316:	d1dd      	bne.n	152d4 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
   15318:	2401      	movs	r4, #1
    while (mask)
   1531a:	2d00      	cmp	r5, #0
   1531c:	d168      	bne.n	153f0 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1531e:	b009      	add	sp, #36	; 0x24
   15320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   15324:	fa93 f3a3 	rbit	r3, r3
   15328:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
   1532c:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15330:	f106 0208 	add.w	r2, r6, #8
   15334:	4b3f      	ldr	r3, [pc, #252]	; (15434 <nrfx_gpiote_irq_handler+0x1b0>)
   15336:	9605      	str	r6, [sp, #20]
   15338:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   1533c:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   15340:	08f4      	lsrs	r4, r6, #3
   15342:	9302      	str	r3, [sp, #8]
   15344:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
   15346:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
   15348:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1534c:	fa0b fc00 	lsl.w	ip, fp, r0
   15350:	5d18      	ldrb	r0, [r3, r4]
   15352:	ea20 000c 	bic.w	r0, r0, ip
   15356:	5518      	strb	r0, [r3, r4]
   15358:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1535a:	a805      	add	r0, sp, #20
   1535c:	9103      	str	r1, [sp, #12]
   1535e:	f7ff fd21 	bl	14da4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15362:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
   15364:	9903      	ldr	r1, [sp, #12]
   15366:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   1536a:	074b      	lsls	r3, r1, #29
   1536c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   15370:	f3c4 4401 	ubfx	r4, r4, #16, #2
   15374:	d523      	bpl.n	153be <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
   15376:	4651      	mov	r1, sl
   15378:	4630      	mov	r0, r6
   1537a:	f7ff fc9b 	bl	14cb4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1537e:	a805      	add	r0, sp, #20
   15380:	9605      	str	r6, [sp, #20]
   15382:	f7ff fd0f 	bl	14da4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15386:	9a05      	ldr	r2, [sp, #20]
   15388:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1538c:	b2e4      	uxtb	r4, r4
   1538e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   15392:	f3c2 4201 	ubfx	r2, r2, #16, #2
   15396:	4294      	cmp	r4, r2
   15398:	d107      	bne.n	153aa <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1539a:	2100      	movs	r1, #0
   1539c:	4630      	mov	r0, r6
   1539e:	f006 fa2e 	bl	1b7fe <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   153a2:	4621      	mov	r1, r4
   153a4:	4630      	mov	r0, r6
   153a6:	f006 fa2a 	bl	1b7fe <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   153aa:	a805      	add	r0, sp, #20
   153ac:	9605      	str	r6, [sp, #20]
   153ae:	f7ff fcf9 	bl	14da4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   153b2:	9b05      	ldr	r3, [sp, #20]
   153b4:	fa0b f303 	lsl.w	r3, fp, r3
   153b8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   153bc:	e790      	b.n	152e0 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   153be:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   153c0:	bf0c      	ite	eq
   153c2:	2103      	moveq	r1, #3
   153c4:	2102      	movne	r1, #2
   153c6:	4630      	mov	r0, r6
   153c8:	f006 fa19 	bl	1b7fe <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   153cc:	9b02      	ldr	r3, [sp, #8]
   153ce:	2b03      	cmp	r3, #3
   153d0:	d004      	beq.n	153dc <nrfx_gpiote_irq_handler+0x158>
   153d2:	2c02      	cmp	r4, #2
   153d4:	d107      	bne.n	153e6 <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   153d6:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   153da:	d1e6      	bne.n	153aa <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
   153dc:	4651      	mov	r1, sl
   153de:	4630      	mov	r0, r6
   153e0:	f7ff fc68 	bl	14cb4 <call_handler>
   153e4:	e7e1      	b.n	153aa <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   153e6:	2c03      	cmp	r4, #3
   153e8:	d1df      	bne.n	153aa <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   153ea:	f1ba 0f02 	cmp.w	sl, #2
   153ee:	e7f4      	b.n	153da <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
   153f0:	fa95 f3a5 	rbit	r3, r5
   153f4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   153f8:	fa04 f203 	lsl.w	r2, r4, r3
   153fc:	009b      	lsls	r3, r3, #2
   153fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15402:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   15406:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1540a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1540e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   15412:	f3c0 2005 	ubfx	r0, r0, #8, #6
   15416:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1541a:	f7ff fc4b 	bl	14cb4 <call_handler>
   1541e:	e77c      	b.n	1531a <nrfx_gpiote_irq_handler+0x96>
   15420:	40006100 	.word	0x40006100
   15424:	40006000 	.word	0x40006000
   15428:	40006120 	.word	0x40006120
   1542c:	4000617c 	.word	0x4000617c
   15430:	50000300 	.word	0x50000300
   15434:	20000144 	.word	0x20000144

00015438 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   15438:	b510      	push	{r4, lr}
    NRFX_ASSERT(is_valid_address(addr, false));
   1543a:	2100      	movs	r1, #0
{
   1543c:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));
   1543e:	f006 f9ed 	bl	1b81c <is_valid_address>
   15442:	b958      	cbnz	r0, 1545c <nrfx_nvmc_page_erase+0x24>
   15444:	4912      	ldr	r1, [pc, #72]	; (15490 <nrfx_nvmc_page_erase+0x58>)
   15446:	4813      	ldr	r0, [pc, #76]	; (15494 <nrfx_nvmc_page_erase+0x5c>)
   15448:	4a13      	ldr	r2, [pc, #76]	; (15498 <nrfx_nvmc_page_erase+0x60>)
   1544a:	f44f 7383 	mov.w	r3, #262	; 0x106
   1544e:	f005 fa3d 	bl	1a8cc <printk>
   15452:	4811      	ldr	r0, [pc, #68]	; (15498 <nrfx_nvmc_page_erase+0x60>)
   15454:	f44f 7183 	mov.w	r1, #262	; 0x106
   15458:	f005 fbd1 	bl	1abfe <assert_post_action>
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1545c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15460:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   15462:	fbb4 f3f2 	udiv	r3, r4, r2
   15466:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   1546a:	b973      	cbnz	r3, 1548a <nrfx_nvmc_page_erase+0x52>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1546c:	4b0b      	ldr	r3, [pc, #44]	; (1549c <nrfx_nvmc_page_erase+0x64>)
   1546e:	2202      	movs	r2, #2
   15470:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   15474:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   15478:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1547c:	07d2      	lsls	r2, r2, #31
   1547e:	d5fb      	bpl.n	15478 <nrfx_nvmc_page_erase+0x40>
    p_reg->CONFIG = (uint32_t)mode;
   15480:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   15482:	4807      	ldr	r0, [pc, #28]	; (154a0 <nrfx_nvmc_page_erase+0x68>)
   15484:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   15488:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1548a:	4806      	ldr	r0, [pc, #24]	; (154a4 <nrfx_nvmc_page_erase+0x6c>)
   1548c:	e7fc      	b.n	15488 <nrfx_nvmc_page_erase+0x50>
   1548e:	bf00      	nop
   15490:	0001f10b 	.word	0x0001f10b
   15494:	0001d2dc 	.word	0x0001d2dc
   15498:	0001f0af 	.word	0x0001f0af
   1549c:	4001e000 	.word	0x4001e000
   154a0:	0bad0000 	.word	0x0bad0000
   154a4:	0bad000a 	.word	0x0bad000a

000154a8 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   154a8:	b538      	push	{r3, r4, r5, lr}
   154aa:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   154ac:	2101      	movs	r1, #1
{
   154ae:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   154b0:	f006 f9b4 	bl	1b81c <is_valid_address>
   154b4:	b958      	cbnz	r0, 154ce <nrfx_nvmc_word_write+0x26>
   154b6:	4914      	ldr	r1, [pc, #80]	; (15508 <nrfx_nvmc_word_write+0x60>)
   154b8:	4814      	ldr	r0, [pc, #80]	; (1550c <nrfx_nvmc_word_write+0x64>)
   154ba:	4a15      	ldr	r2, [pc, #84]	; (15510 <nrfx_nvmc_word_write+0x68>)
   154bc:	f44f 73ca 	mov.w	r3, #404	; 0x194
   154c0:	f005 fa04 	bl	1a8cc <printk>
   154c4:	4812      	ldr	r0, [pc, #72]	; (15510 <nrfx_nvmc_word_write+0x68>)
   154c6:	f44f 71ca 	mov.w	r1, #404	; 0x194
   154ca:	f005 fb98 	bl	1abfe <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   154ce:	07a1      	lsls	r1, r4, #30
   154d0:	d00b      	beq.n	154ea <nrfx_nvmc_word_write+0x42>
   154d2:	4910      	ldr	r1, [pc, #64]	; (15514 <nrfx_nvmc_word_write+0x6c>)
   154d4:	480d      	ldr	r0, [pc, #52]	; (1550c <nrfx_nvmc_word_write+0x64>)
   154d6:	4a0e      	ldr	r2, [pc, #56]	; (15510 <nrfx_nvmc_word_write+0x68>)
   154d8:	f240 1395 	movw	r3, #405	; 0x195
   154dc:	f005 f9f6 	bl	1a8cc <printk>
   154e0:	480b      	ldr	r0, [pc, #44]	; (15510 <nrfx_nvmc_word_write+0x68>)
   154e2:	f240 1195 	movw	r1, #405	; 0x195
   154e6:	f005 fb8a 	bl	1abfe <assert_post_action>
   154ea:	4b0b      	ldr	r3, [pc, #44]	; (15518 <nrfx_nvmc_word_write+0x70>)
   154ec:	2201      	movs	r2, #1
   154ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   154f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   154f6:	07d2      	lsls	r2, r2, #31
   154f8:	d5fb      	bpl.n	154f2 <nrfx_nvmc_word_write+0x4a>
    *(volatile uint32_t *)addr = value;
   154fa:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   154fc:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   15500:	2200      	movs	r2, #0
   15502:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   15506:	bd38      	pop	{r3, r4, r5, pc}
   15508:	0001f125 	.word	0x0001f125
   1550c:	0001d2dc 	.word	0x0001d2dc
   15510:	0001f0af 	.word	0x0001f0af
   15514:	0001f13f 	.word	0x0001f13f
   15518:	4001e000 	.word	0x4001e000

0001551c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1551c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1551e:	4801      	ldr	r0, [pc, #4]	; (15524 <nrfx_ppi_channel_alloc+0x8>)
   15520:	f7ff ba06 	b.w	14930 <nrfx_flag32_alloc>
   15524:	200001c0 	.word	0x200001c0

00015528 <nrfx_ppi_channel_assign>:
    return nrfx_flag32_free(&m_channels_allocated, channel);
}


nrfx_err_t nrfx_ppi_channel_assign(nrf_ppi_channel_t channel, uint32_t eep, uint32_t tep)
{
   15528:	b570      	push	{r4, r5, r6, lr}
   1552a:	4604      	mov	r4, r0
   1552c:	4615      	mov	r5, r2
    if ((uint32_t *)eep == NULL || (uint32_t *)tep == NULL)
   1552e:	460e      	mov	r6, r1
   15530:	b1b1      	cbz	r1, 15560 <nrfx_ppi_channel_assign+0x38>
   15532:	b1aa      	cbz	r2, 15560 <nrfx_ppi_channel_assign+0x38>
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   15534:	2301      	movs	r3, #1
   15536:	4083      	lsls	r3, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
   15538:	f3c3 0313 	ubfx	r3, r3, #0, #20
        return NRFX_ERROR_NULL;
    }

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_programmable_app_channel(channel))
   1553c:	b193      	cbz	r3, 15564 <nrfx_ppi_channel_assign+0x3c>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (!nrfx_flag32_is_allocated(m_channels_allocated, channel))
   1553e:	4b0b      	ldr	r3, [pc, #44]	; (1556c <nrfx_ppi_channel_assign+0x44>)
   15540:	4601      	mov	r1, r0
   15542:	6818      	ldr	r0, [r3, #0]
   15544:	f006 f8f6 	bl	1b734 <nrfx_flag32_is_allocated>
   15548:	b170      	cbz	r0, 15568 <nrfx_ppi_channel_assign+0x40>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1554a:	00e0      	lsls	r0, r4, #3
   1554c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   15550:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
   15554:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15558:	f8c0 5514 	str.w	r5, [r0, #1300]	; 0x514
    nrfx_err_t err_code = NRFX_SUCCESS;
   1555c:	4804      	ldr	r0, [pc, #16]	; (15570 <nrfx_ppi_channel_assign+0x48>)
                      eep,
                      tep);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1555e:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_NULL;
   15560:	4804      	ldr	r0, [pc, #16]	; (15574 <nrfx_ppi_channel_assign+0x4c>)
   15562:	e7fc      	b.n	1555e <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_PARAM;
   15564:	4804      	ldr	r0, [pc, #16]	; (15578 <nrfx_ppi_channel_assign+0x50>)
   15566:	e7fa      	b.n	1555e <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_STATE;
   15568:	4804      	ldr	r0, [pc, #16]	; (1557c <nrfx_ppi_channel_assign+0x54>)
   1556a:	e7f8      	b.n	1555e <nrfx_ppi_channel_assign+0x36>
   1556c:	200001c0 	.word	0x200001c0
   15570:	0bad0000 	.word	0x0bad0000
   15574:	0bad0009 	.word	0x0bad0009
   15578:	0bad0004 	.word	0x0bad0004
   1557c:	0bad0005 	.word	0x0bad0005

00015580 <nrfx_ppi_channel_enable>:
    return err_code;
#endif
}

nrfx_err_t nrfx_ppi_channel_enable(nrf_ppi_channel_t channel)
{
   15580:	b510      	push	{r4, lr}
   15582:	2401      	movs	r4, #1
   15584:	4084      	lsls	r4, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
   15586:	f3c4 0313 	ubfx	r3, r4, #0, #20
{
   1558a:	4601      	mov	r1, r0

    if (!is_app_channel(channel))
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (is_programmable_app_channel(channel) &&
   1558c:	b923      	cbnz	r3, 15598 <nrfx_ppi_channel_enable+0x18>
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
   1558e:	4b06      	ldr	r3, [pc, #24]	; (155a8 <nrfx_ppi_channel_enable+0x28>)
    nrfx_err_t err_code = NRFX_SUCCESS;
   15590:	4806      	ldr	r0, [pc, #24]	; (155ac <nrfx_ppi_channel_enable+0x2c>)
   15592:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    {
        nrf_ppi_channel_enable(NRF_PPI, channel);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15596:	bd10      	pop	{r4, pc}
             !nrfx_flag32_is_allocated(m_channels_allocated, channel))
   15598:	4b05      	ldr	r3, [pc, #20]	; (155b0 <nrfx_ppi_channel_enable+0x30>)
   1559a:	6818      	ldr	r0, [r3, #0]
   1559c:	f006 f8ca 	bl	1b734 <nrfx_flag32_is_allocated>
    else if (is_programmable_app_channel(channel) &&
   155a0:	2800      	cmp	r0, #0
   155a2:	d1f4      	bne.n	1558e <nrfx_ppi_channel_enable+0xe>
        err_code = NRFX_ERROR_INVALID_STATE;
   155a4:	4803      	ldr	r0, [pc, #12]	; (155b4 <nrfx_ppi_channel_enable+0x34>)
    return err_code;
   155a6:	e7f6      	b.n	15596 <nrfx_ppi_channel_enable+0x16>
   155a8:	4001f000 	.word	0x4001f000
   155ac:	0bad0000 	.word	0x0bad0000
   155b0:	200001c0 	.word	0x200001c0
   155b4:	0bad0005 	.word	0x0bad0005

000155b8 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   155b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   155bc:	4605      	mov	r5, r0
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   155be:	7907      	ldrb	r7, [r0, #4]
{
   155c0:	4690      	mov	r8, r2
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
   155c2:	460c      	mov	r4, r1
   155c4:	b949      	cbnz	r1, 155da <nrfx_timer_init+0x22>
   155c6:	4941      	ldr	r1, [pc, #260]	; (156cc <nrfx_timer_init+0x114>)
   155c8:	4841      	ldr	r0, [pc, #260]	; (156d0 <nrfx_timer_init+0x118>)
   155ca:	4a42      	ldr	r2, [pc, #264]	; (156d4 <nrfx_timer_init+0x11c>)
   155cc:	2353      	movs	r3, #83	; 0x53
   155ce:	f005 f97d 	bl	1a8cc <printk>
   155d2:	4840      	ldr	r0, [pc, #256]	; (156d4 <nrfx_timer_init+0x11c>)
   155d4:	2153      	movs	r1, #83	; 0x53
   155d6:	f005 fb12 	bl	1abfe <assert_post_action>
    NRFX_ASSERT(timer_event_handler);
   155da:	f1b8 0f00 	cmp.w	r8, #0
   155de:	d109      	bne.n	155f4 <nrfx_timer_init+0x3c>
   155e0:	493d      	ldr	r1, [pc, #244]	; (156d8 <nrfx_timer_init+0x120>)
   155e2:	483b      	ldr	r0, [pc, #236]	; (156d0 <nrfx_timer_init+0x118>)
   155e4:	4a3b      	ldr	r2, [pc, #236]	; (156d4 <nrfx_timer_init+0x11c>)
   155e6:	2354      	movs	r3, #84	; 0x54
   155e8:	f005 f970 	bl	1a8cc <printk>
   155ec:	4839      	ldr	r0, [pc, #228]	; (156d4 <nrfx_timer_init+0x11c>)
   155ee:	2154      	movs	r1, #84	; 0x54
   155f0:	f005 fb05 	bl	1abfe <assert_post_action>

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   155f4:	4e39      	ldr	r6, [pc, #228]	; (156dc <nrfx_timer_init+0x124>)
   155f6:	230c      	movs	r3, #12
   155f8:	fb03 6307 	mla	r3, r3, r7, r6
   155fc:	7a1b      	ldrb	r3, [r3, #8]
   155fe:	2b00      	cmp	r3, #0
   15600:	d161      	bne.n	156c6 <nrfx_timer_init+0x10e>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   15602:	682b      	ldr	r3, [r5, #0]
   15604:	4a36      	ldr	r2, [pc, #216]	; (156e0 <nrfx_timer_init+0x128>)
   15606:	4293      	cmp	r3, r2
   15608:	d00f      	beq.n	1562a <nrfx_timer_init+0x72>
   1560a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1560e:	4293      	cmp	r3, r2
   15610:	d00b      	beq.n	1562a <nrfx_timer_init+0x72>
   15612:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   15616:	4293      	cmp	r3, r2
   15618:	d007      	beq.n	1562a <nrfx_timer_init+0x72>
   1561a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   1561e:	4293      	cmp	r3, r2
   15620:	d003      	beq.n	1562a <nrfx_timer_init+0x72>
   15622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   15626:	4293      	cmp	r3, r2
   15628:	d102      	bne.n	15630 <nrfx_timer_init+0x78>
   1562a:	78a3      	ldrb	r3, [r4, #2]
   1562c:	2b03      	cmp	r3, #3
   1562e:	d909      	bls.n	15644 <nrfx_timer_init+0x8c>
   15630:	492c      	ldr	r1, [pc, #176]	; (156e4 <nrfx_timer_init+0x12c>)
   15632:	4827      	ldr	r0, [pc, #156]	; (156d0 <nrfx_timer_init+0x118>)
   15634:	4a27      	ldr	r2, [pc, #156]	; (156d4 <nrfx_timer_init+0x11c>)
   15636:	2361      	movs	r3, #97	; 0x61
   15638:	f005 f948 	bl	1a8cc <printk>
   1563c:	4825      	ldr	r0, [pc, #148]	; (156d4 <nrfx_timer_init+0x11c>)
   1563e:	2161      	movs	r1, #97	; 0x61
   15640:	f005 fadd 	bl	1abfe <assert_post_action>

    p_cb->handler = timer_event_handler;
   15644:	230c      	movs	r3, #12
   15646:	437b      	muls	r3, r7
   15648:	18f2      	adds	r2, r6, r3
   1564a:	f846 8003 	str.w	r8, [r6, r3]
    p_cb->context = p_config->p_context;
   1564e:	6863      	ldr	r3, [r4, #4]
   15650:	6053      	str	r3, [r2, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   15652:	7969      	ldrb	r1, [r5, #5]
   15654:	6828      	ldr	r0, [r5, #0]
   15656:	2300      	movs	r3, #0
}

NRF_STATIC_INLINE void nrf_timer_event_clear(NRF_TIMER_Type *  p_reg,
                                             nrf_timer_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15658:	469c      	mov	ip, r3
   1565a:	b2da      	uxtb	r2, r3
   1565c:	4291      	cmp	r1, r2
   1565e:	d82a      	bhi.n	156b6 <nrfx_timer_init+0xfe>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   15660:	f340 3007 	sbfx	r0, r0, #12, #8
   15664:	f7fb fd44 	bl	110f0 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   15668:	682b      	ldr	r3, [r5, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   1566a:	7862      	ldrb	r2, [r4, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   1566c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   15670:	481d      	ldr	r0, [pc, #116]	; (156e8 <nrfx_timer_init+0x130>)
   15672:	f021 0103 	bic.w	r1, r1, #3
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   15676:	f002 0203 	and.w	r2, r2, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   1567a:	430a      	orrs	r2, r1
   1567c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   15680:	f8d3 1508 	ldr.w	r1, [r3, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   15684:	78a2      	ldrb	r2, [r4, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   15686:	f021 0103 	bic.w	r1, r1, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   1568a:	f002 0203 	and.w	r2, r2, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   1568e:	430a      	orrs	r2, r1
   15690:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_frequency_t frequency)
{
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   15694:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   15698:	7822      	ldrb	r2, [r4, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   1569a:	f021 010f 	bic.w	r1, r1, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   1569e:	f002 020f 	and.w	r2, r2, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   156a2:	430a      	orrs	r2, r1
   156a4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   156a8:	230c      	movs	r3, #12
   156aa:	fb03 6607 	mla	r6, r3, r7, r6
   156ae:	2301      	movs	r3, #1
   156b0:	7233      	strb	r3, [r6, #8]
}
   156b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   156b6:	009a      	lsls	r2, r3, #2
   156b8:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   156bc:	3301      	adds	r3, #1
   156be:	f840 c002 	str.w	ip, [r0, r2]
   156c2:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   156c4:	e7c9      	b.n	1565a <nrfx_timer_init+0xa2>
        return err_code;
   156c6:	4809      	ldr	r0, [pc, #36]	; (156ec <nrfx_timer_init+0x134>)
   156c8:	e7f3      	b.n	156b2 <nrfx_timer_init+0xfa>
   156ca:	bf00      	nop
   156cc:	0001f1a5 	.word	0x0001f1a5
   156d0:	0001d2dc 	.word	0x0001d2dc
   156d4:	0001f168 	.word	0x0001f168
   156d8:	0001f1ae 	.word	0x0001f1ae
   156dc:	20001034 	.word	0x20001034
   156e0:	40008000 	.word	0x40008000
   156e4:	0001f1c2 	.word	0x0001f1c2
   156e8:	0bad0000 	.word	0x0bad0000
   156ec:	0bad0005 	.word	0x0bad0005

000156f0 <nrfx_timer_enable>:
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
}

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
   156f0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   156f2:	4d0e      	ldr	r5, [pc, #56]	; (1572c <nrfx_timer_enable+0x3c>)
   156f4:	7902      	ldrb	r2, [r0, #4]
   156f6:	210c      	movs	r1, #12
   156f8:	fb01 5202 	mla	r2, r1, r2, r5
{
   156fc:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   156fe:	7a12      	ldrb	r2, [r2, #8]
   15700:	2a01      	cmp	r2, #1
   15702:	d009      	beq.n	15718 <nrfx_timer_enable+0x28>
   15704:	490a      	ldr	r1, [pc, #40]	; (15730 <nrfx_timer_enable+0x40>)
   15706:	480b      	ldr	r0, [pc, #44]	; (15734 <nrfx_timer_enable+0x44>)
   15708:	4a0b      	ldr	r2, [pc, #44]	; (15738 <nrfx_timer_enable+0x48>)
   1570a:	238f      	movs	r3, #143	; 0x8f
   1570c:	f005 f8de 	bl	1a8cc <printk>
   15710:	4809      	ldr	r0, [pc, #36]	; (15738 <nrfx_timer_enable+0x48>)
   15712:	218f      	movs	r1, #143	; 0x8f
   15714:	f005 fa73 	bl	1abfe <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   15718:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1571a:	2201      	movs	r2, #1
   1571c:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   1571e:	7923      	ldrb	r3, [r4, #4]
   15720:	220c      	movs	r2, #12
   15722:	fb02 5303 	mla	r3, r2, r3, r5
   15726:	2202      	movs	r2, #2
   15728:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   1572a:	bd38      	pop	{r3, r4, r5, pc}
   1572c:	20001034 	.word	0x20001034
   15730:	0001fdd9 	.word	0x0001fdd9
   15734:	0001d2dc 	.word	0x0001d2dc
   15738:	0001f168 	.word	0x0001f168

0001573c <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
   1573c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   1573e:	4d0d      	ldr	r5, [pc, #52]	; (15774 <nrfx_timer_disable+0x38>)
   15740:	7902      	ldrb	r2, [r0, #4]
   15742:	210c      	movs	r1, #12
   15744:	fb01 5202 	mla	r2, r1, r2, r5
{
   15748:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   1574a:	7a12      	ldrb	r2, [r2, #8]
   1574c:	b94a      	cbnz	r2, 15762 <nrfx_timer_disable+0x26>
   1574e:	490a      	ldr	r1, [pc, #40]	; (15778 <nrfx_timer_disable+0x3c>)
   15750:	480a      	ldr	r0, [pc, #40]	; (1577c <nrfx_timer_disable+0x40>)
   15752:	4a0b      	ldr	r2, [pc, #44]	; (15780 <nrfx_timer_disable+0x44>)
   15754:	2397      	movs	r3, #151	; 0x97
   15756:	f005 f8b9 	bl	1a8cc <printk>
   1575a:	4809      	ldr	r0, [pc, #36]	; (15780 <nrfx_timer_disable+0x44>)
   1575c:	2197      	movs	r1, #151	; 0x97
   1575e:	f005 fa4e 	bl	1abfe <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   15762:	6823      	ldr	r3, [r4, #0]
   15764:	2201      	movs	r2, #1
   15766:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   15768:	7923      	ldrb	r3, [r4, #4]
   1576a:	210c      	movs	r1, #12
   1576c:	fb01 5303 	mla	r3, r1, r3, r5
   15770:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   15772:	bd38      	pop	{r3, r4, r5, pc}
   15774:	20001034 	.word	0x20001034
   15778:	0001fe1b 	.word	0x0001fe1b
   1577c:	0001d2dc 	.word	0x0001d2dc
   15780:	0001f168 	.word	0x0001f168

00015784 <nrfx_timer_uninit>:
{
   15784:	b538      	push	{r3, r4, r5, lr}
   15786:	4604      	mov	r4, r0
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   15788:	6800      	ldr	r0, [r0, #0]
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1578a:	f340 3007 	sbfx	r0, r0, #12, #8
   1578e:	f7fb fcbf 	bl	11110 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   15792:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS &= ~(mask);
   15794:	2500      	movs	r5, #0
   15796:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1579a:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   1579e:	f04f 32ff 	mov.w	r2, #4294967295
   157a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    nrfx_timer_disable(p_instance);
   157a6:	4620      	mov	r0, r4
   157a8:	f7ff ffc8 	bl	1573c <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   157ac:	7923      	ldrb	r3, [r4, #4]
   157ae:	4a03      	ldr	r2, [pc, #12]	; (157bc <nrfx_timer_uninit+0x38>)
   157b0:	210c      	movs	r1, #12
   157b2:	fb01 2303 	mla	r3, r1, r3, r2
   157b6:	721d      	strb	r5, [r3, #8]
}
   157b8:	bd38      	pop	{r3, r4, r5, pc}
   157ba:	bf00      	nop
   157bc:	20001034 	.word	0x20001034

000157c0 <nrfx_timer_clear>:
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_STOP);
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
   157c0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   157c2:	4a0b      	ldr	r2, [pc, #44]	; (157f0 <nrfx_timer_clear+0x30>)
   157c4:	7903      	ldrb	r3, [r0, #4]
   157c6:	210c      	movs	r1, #12
   157c8:	fb01 2303 	mla	r3, r1, r3, r2
{
   157cc:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   157ce:	7a1b      	ldrb	r3, [r3, #8]
   157d0:	b94b      	cbnz	r3, 157e6 <nrfx_timer_clear+0x26>
   157d2:	4908      	ldr	r1, [pc, #32]	; (157f4 <nrfx_timer_clear+0x34>)
   157d4:	4808      	ldr	r0, [pc, #32]	; (157f8 <nrfx_timer_clear+0x38>)
   157d6:	4a09      	ldr	r2, [pc, #36]	; (157fc <nrfx_timer_clear+0x3c>)
   157d8:	23b3      	movs	r3, #179	; 0xb3
   157da:	f005 f877 	bl	1a8cc <printk>
   157de:	4807      	ldr	r0, [pc, #28]	; (157fc <nrfx_timer_clear+0x3c>)
   157e0:	21b3      	movs	r1, #179	; 0xb3
   157e2:	f005 fa0c 	bl	1abfe <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   157e6:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   157e8:	2201      	movs	r2, #1
   157ea:	60da      	str	r2, [r3, #12]
}
   157ec:	bd10      	pop	{r4, pc}
   157ee:	bf00      	nop
   157f0:	20001034 	.word	0x20001034
   157f4:	0001fe1b 	.word	0x0001fe1b
   157f8:	0001d2dc 	.word	0x0001d2dc
   157fc:	0001f168 	.word	0x0001f168

00015800 <nrfx_timer_increment>:

void nrfx_timer_increment(nrfx_timer_t const * p_instance)
{
   15800:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   15802:	4a13      	ldr	r2, [pc, #76]	; (15850 <nrfx_timer_increment+0x50>)
   15804:	7903      	ldrb	r3, [r0, #4]
   15806:	210c      	movs	r1, #12
   15808:	fb01 2303 	mla	r3, r1, r3, r2
{
   1580c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   1580e:	7a1b      	ldrb	r3, [r3, #8]
   15810:	b94b      	cbnz	r3, 15826 <nrfx_timer_increment+0x26>
   15812:	4910      	ldr	r1, [pc, #64]	; (15854 <nrfx_timer_increment+0x54>)
   15814:	4810      	ldr	r0, [pc, #64]	; (15858 <nrfx_timer_increment+0x58>)
   15816:	4a11      	ldr	r2, [pc, #68]	; (1585c <nrfx_timer_increment+0x5c>)
   15818:	23b9      	movs	r3, #185	; 0xb9
   1581a:	f005 f857 	bl	1a8cc <printk>
   1581e:	480f      	ldr	r0, [pc, #60]	; (1585c <nrfx_timer_increment+0x5c>)
   15820:	21b9      	movs	r1, #185	; 0xb9
   15822:	f005 f9ec 	bl	1abfe <assert_post_action>
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
   15826:	6823      	ldr	r3, [r4, #0]
    return (nrf_timer_mode_t)(p_reg->MODE);
   15828:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   1582c:	f013 0fff 	tst.w	r3, #255	; 0xff
   15830:	d109      	bne.n	15846 <nrfx_timer_increment+0x46>
   15832:	490b      	ldr	r1, [pc, #44]	; (15860 <nrfx_timer_increment+0x60>)
   15834:	4808      	ldr	r0, [pc, #32]	; (15858 <nrfx_timer_increment+0x58>)
   15836:	4a09      	ldr	r2, [pc, #36]	; (1585c <nrfx_timer_increment+0x5c>)
   15838:	23ba      	movs	r3, #186	; 0xba
   1583a:	f005 f847 	bl	1a8cc <printk>
   1583e:	4807      	ldr	r0, [pc, #28]	; (1585c <nrfx_timer_increment+0x5c>)
   15840:	21ba      	movs	r1, #186	; 0xba
   15842:	f005 f9dc 	bl	1abfe <assert_post_action>

    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_COUNT);
   15846:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15848:	2201      	movs	r2, #1
   1584a:	609a      	str	r2, [r3, #8]
}
   1584c:	bd10      	pop	{r4, pc}
   1584e:	bf00      	nop
   15850:	20001034 	.word	0x20001034
   15854:	0001fe1b 	.word	0x0001fe1b
   15858:	0001d2dc 	.word	0x0001d2dc
   1585c:	0001f168 	.word	0x0001f168
   15860:	0001fe5f 	.word	0x0001fe5f

00015864 <nrfx_timer_capture>:

uint32_t nrfx_timer_capture(nrfx_timer_t const *   p_instance,
                            nrf_timer_cc_channel_t cc_channel)
{
   15864:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   15866:	4a15      	ldr	r2, [pc, #84]	; (158bc <nrfx_timer_capture+0x58>)
   15868:	7903      	ldrb	r3, [r0, #4]
{
   1586a:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   1586c:	210c      	movs	r1, #12
   1586e:	fb01 2303 	mla	r3, r1, r3, r2
{
   15872:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   15874:	7a1b      	ldrb	r3, [r3, #8]
   15876:	b94b      	cbnz	r3, 1588c <nrfx_timer_capture+0x28>
   15878:	4911      	ldr	r1, [pc, #68]	; (158c0 <nrfx_timer_capture+0x5c>)
   1587a:	4812      	ldr	r0, [pc, #72]	; (158c4 <nrfx_timer_capture+0x60>)
   1587c:	4a12      	ldr	r2, [pc, #72]	; (158c8 <nrfx_timer_capture+0x64>)
   1587e:	23c2      	movs	r3, #194	; 0xc2
   15880:	f005 f824 	bl	1a8cc <printk>
   15884:	4810      	ldr	r0, [pc, #64]	; (158c8 <nrfx_timer_capture+0x64>)
   15886:	21c2      	movs	r1, #194	; 0xc2
   15888:	f005 f9b9 	bl	1abfe <assert_post_action>
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
   1588c:	796b      	ldrb	r3, [r5, #5]
   1588e:	42a3      	cmp	r3, r4
   15890:	d809      	bhi.n	158a6 <nrfx_timer_capture+0x42>
   15892:	490e      	ldr	r1, [pc, #56]	; (158cc <nrfx_timer_capture+0x68>)
   15894:	480b      	ldr	r0, [pc, #44]	; (158c4 <nrfx_timer_capture+0x60>)
   15896:	4a0c      	ldr	r2, [pc, #48]	; (158c8 <nrfx_timer_capture+0x64>)
   15898:	23c3      	movs	r3, #195	; 0xc3
   1589a:	f005 f817 	bl	1a8cc <printk>
   1589e:	480a      	ldr	r0, [pc, #40]	; (158c8 <nrfx_timer_capture+0x64>)
   158a0:	21c3      	movs	r1, #195	; 0xc3
   158a2:	f005 f9ac 	bl	1abfe <assert_post_action>
    return (uint32_t)p_reg->CC[cc_channel];
}

NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get(uint32_t channel)
{
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   158a6:	00a3      	lsls	r3, r4, #2
   158a8:	3340      	adds	r3, #64	; 0x40

    nrf_timer_task_trigger(p_instance->p_reg,
   158aa:	682a      	ldr	r2, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   158ac:	b2db      	uxtb	r3, r3
   158ae:	2101      	movs	r1, #1
   158b0:	50d1      	str	r1, [r2, r3]
    return (uint32_t)p_reg->CC[cc_channel];
   158b2:	f504 74a8 	add.w	r4, r4, #336	; 0x150
   158b6:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
}
   158ba:	bd38      	pop	{r3, r4, r5, pc}
   158bc:	20001034 	.word	0x20001034
   158c0:	0001fe1b 	.word	0x0001fe1b
   158c4:	0001d2dc 	.word	0x0001d2dc
   158c8:	0001f168 	.word	0x0001f168
   158cc:	0001fe9d 	.word	0x0001fe9d

000158d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   158d0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   158d2:	4c11      	ldr	r4, [pc, #68]	; (15918 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   158d4:	4a11      	ldr	r2, [pc, #68]	; (1591c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   158d6:	4912      	ldr	r1, [pc, #72]	; (15920 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   158d8:	2303      	movs	r3, #3
   158da:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   158dc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   158de:	4b11      	ldr	r3, [pc, #68]	; (15924 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   158e0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   158e2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   158e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   158e8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   158ea:	2300      	movs	r3, #0
   158ec:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   158ee:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   158f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   158f2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   158f4:	4a0c      	ldr	r2, [pc, #48]	; (15928 <_DoInit+0x58>)
   158f6:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   158f8:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   158fa:	2210      	movs	r2, #16
   158fc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   158fe:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   15900:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   15902:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   15904:	f006 fa74 	bl	1bdf0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   15908:	4908      	ldr	r1, [pc, #32]	; (1592c <_DoInit+0x5c>)
   1590a:	4620      	mov	r0, r4
   1590c:	f006 fa70 	bl	1bdf0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   15910:	2320      	movs	r3, #32
   15912:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   15914:	bd10      	pop	{r4, pc}
   15916:	bf00      	nop
   15918:	20001040 	.word	0x20001040
   1591c:	0001fec7 	.word	0x0001fec7
   15920:	0001fed0 	.word	0x0001fed0
   15924:	200025ca 	.word	0x200025ca
   15928:	200025ba 	.word	0x200025ba
   1592c:	0001fed4 	.word	0x0001fed4

00015930 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   15930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   15934:	4f23      	ldr	r7, [pc, #140]	; (159c4 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   15936:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1593a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1593c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   15940:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   15942:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   15944:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   15946:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   15948:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1594a:	d834      	bhi.n	159b6 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1594c:	f8d2 a020 	ldr.w	sl, [r2, #32]
   15950:	ebaa 0905 	sub.w	r9, sl, r5
   15954:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   15958:	4294      	cmp	r4, r2
   1595a:	d811      	bhi.n	15980 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1595c:	f04f 0918 	mov.w	r9, #24
   15960:	fb06 9309 	mla	r3, r6, r9, r9
   15964:	443b      	add	r3, r7
   15966:	4622      	mov	r2, r4
   15968:	6858      	ldr	r0, [r3, #4]
   1596a:	4641      	mov	r1, r8
   1596c:	4428      	add	r0, r5
   1596e:	f006 f8e4 	bl	1bb3a <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   15972:	fb09 7606 	mla	r6, r9, r6, r7
   15976:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   15978:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   1597a:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1597c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   15980:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   15982:	429c      	cmp	r4, r3
   15984:	d81b      	bhi.n	159be <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   15986:	fb00 bb0b 	mla	fp, r0, fp, fp
   1598a:	44bb      	add	fp, r7
   1598c:	464a      	mov	r2, r9
   1598e:	f8db 0004 	ldr.w	r0, [fp, #4]
   15992:	442c      	add	r4, r5
   15994:	4428      	add	r0, r5
   15996:	f006 f8d0 	bl	1bb3a <memcpy>
      if (NumBytes) {
   1599a:	ebb4 040a 	subs.w	r4, r4, sl
   1599e:	d006      	beq.n	159ae <SEGGER_RTT_WriteSkipNoLock+0x7e>
   159a0:	f8db 0004 	ldr.w	r0, [fp, #4]
   159a4:	4622      	mov	r2, r4
   159a6:	eb08 0109 	add.w	r1, r8, r9
   159aa:	f006 f8c6 	bl	1bb3a <memcpy>
      pRing->WrOff = NumBytes;
   159ae:	2018      	movs	r0, #24
   159b0:	fb00 7606 	mla	r6, r0, r6, r7
   159b4:	e7e0      	b.n	15978 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   159b6:	3b01      	subs	r3, #1
   159b8:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   159ba:	42a3      	cmp	r3, r4
   159bc:	d2ce      	bcs.n	1595c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   159be:	2000      	movs	r0, #0
   159c0:	e7dc      	b.n	1597c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   159c2:	bf00      	nop
   159c4:	20001040 	.word	0x20001040

000159c8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   159c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   159ca:	4c18      	ldr	r4, [pc, #96]	; (15a2c <SEGGER_RTT_WriteNoLock+0x64>)
   159cc:	2318      	movs	r3, #24
   159ce:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   159d2:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   159d6:	4425      	add	r5, r4
  switch (pRing->Flags) {
   159d8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   159da:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   159dc:	460f      	mov	r7, r1
   159de:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   159e0:	d00f      	beq.n	15a02 <SEGGER_RTT_WriteNoLock+0x3a>
   159e2:	2c02      	cmp	r4, #2
   159e4:	d01a      	beq.n	15a1c <SEGGER_RTT_WriteNoLock+0x54>
   159e6:	b9f4      	cbnz	r4, 15a26 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   159e8:	4628      	mov	r0, r5
   159ea:	f005 ff3a 	bl	1b862 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   159ee:	4286      	cmp	r6, r0
   159f0:	d805      	bhi.n	159fe <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   159f2:	4632      	mov	r2, r6
   159f4:	4639      	mov	r1, r7
   159f6:	4628      	mov	r0, r5
   159f8:	f005 ff41 	bl	1b87e <_WriteNoCheck>
   159fc:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   159fe:	4620      	mov	r0, r4
   15a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   15a02:	4628      	mov	r0, r5
   15a04:	f005 ff2d 	bl	1b862 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   15a08:	4286      	cmp	r6, r0
   15a0a:	4634      	mov	r4, r6
   15a0c:	bf28      	it	cs
   15a0e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   15a10:	4622      	mov	r2, r4
   15a12:	4639      	mov	r1, r7
   15a14:	4628      	mov	r0, r5
   15a16:	f005 ff32 	bl	1b87e <_WriteNoCheck>
    break;
   15a1a:	e7f0      	b.n	159fe <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   15a1c:	4628      	mov	r0, r5
}
   15a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   15a22:	f005 bf49 	b.w	1b8b8 <_WriteBlocking>
  switch (pRing->Flags) {
   15a26:	2400      	movs	r4, #0
  return Status;
   15a28:	e7e9      	b.n	159fe <SEGGER_RTT_WriteNoLock+0x36>
   15a2a:	bf00      	nop
   15a2c:	20001040 	.word	0x20001040

00015a30 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   15a30:	4b03      	ldr	r3, [pc, #12]	; (15a40 <SEGGER_RTT_HasDataUp+0x10>)
   15a32:	2218      	movs	r2, #24
   15a34:	fb02 3300 	mla	r3, r2, r0, r3
   15a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   15a3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   15a3c:	1a80      	subs	r0, r0, r2
   15a3e:	4770      	bx	lr
   15a40:	20001040 	.word	0x20001040

00015a44 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15a44:	4b0e      	ldr	r3, [pc, #56]	; (15a80 <z_sys_init_run_level+0x3c>)
{
   15a46:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15a48:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   15a4c:	3001      	adds	r0, #1
   15a4e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   15a52:	42a6      	cmp	r6, r4
   15a54:	d800      	bhi.n	15a58 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   15a56:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   15a58:	e9d4 3500 	ldrd	r3, r5, [r4]
   15a5c:	4628      	mov	r0, r5
   15a5e:	4798      	blx	r3
		if (dev != NULL) {
   15a60:	b165      	cbz	r5, 15a7c <z_sys_init_run_level+0x38>
			if (rc != 0) {
   15a62:	68eb      	ldr	r3, [r5, #12]
   15a64:	b130      	cbz	r0, 15a74 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   15a66:	2800      	cmp	r0, #0
   15a68:	bfb8      	it	lt
   15a6a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   15a6c:	28ff      	cmp	r0, #255	; 0xff
   15a6e:	bfa8      	it	ge
   15a70:	20ff      	movge	r0, #255	; 0xff
   15a72:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   15a74:	785a      	ldrb	r2, [r3, #1]
   15a76:	f042 0201 	orr.w	r2, r2, #1
   15a7a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15a7c:	3408      	adds	r4, #8
   15a7e:	e7e8      	b.n	15a52 <z_sys_init_run_level+0xe>
   15a80:	0001cde4 	.word	0x0001cde4

00015a84 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   15a84:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   15a86:	4605      	mov	r5, r0
   15a88:	b910      	cbnz	r0, 15a90 <z_impl_device_get_binding+0xc>
		return NULL;
   15a8a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   15a8c:	4620      	mov	r0, r4
   15a8e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   15a90:	7803      	ldrb	r3, [r0, #0]
   15a92:	2b00      	cmp	r3, #0
   15a94:	d0f9      	beq.n	15a8a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   15a96:	4a0f      	ldr	r2, [pc, #60]	; (15ad4 <z_impl_device_get_binding+0x50>)
   15a98:	4c0f      	ldr	r4, [pc, #60]	; (15ad8 <z_impl_device_get_binding+0x54>)
   15a9a:	4616      	mov	r6, r2
   15a9c:	4294      	cmp	r4, r2
   15a9e:	d108      	bne.n	15ab2 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   15aa0:	4c0d      	ldr	r4, [pc, #52]	; (15ad8 <z_impl_device_get_binding+0x54>)
   15aa2:	42b4      	cmp	r4, r6
   15aa4:	d0f1      	beq.n	15a8a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   15aa6:	4620      	mov	r0, r4
   15aa8:	f005 ff37 	bl	1b91a <z_device_ready>
   15aac:	b950      	cbnz	r0, 15ac4 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   15aae:	3418      	adds	r4, #24
   15ab0:	e7f7      	b.n	15aa2 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   15ab2:	4620      	mov	r0, r4
   15ab4:	f005 ff31 	bl	1b91a <z_device_ready>
   15ab8:	b110      	cbz	r0, 15ac0 <z_impl_device_get_binding+0x3c>
   15aba:	6823      	ldr	r3, [r4, #0]
   15abc:	42ab      	cmp	r3, r5
   15abe:	d0e5      	beq.n	15a8c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   15ac0:	3418      	adds	r4, #24
   15ac2:	e7eb      	b.n	15a9c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   15ac4:	6821      	ldr	r1, [r4, #0]
   15ac6:	4628      	mov	r0, r5
   15ac8:	f7f7 fa78 	bl	cfbc <strcmp>
   15acc:	2800      	cmp	r0, #0
   15ace:	d1ee      	bne.n	15aae <z_impl_device_get_binding+0x2a>
   15ad0:	e7dc      	b.n	15a8c <z_impl_device_get_binding+0x8>
   15ad2:	bf00      	nop
   15ad4:	0001c7c0 	.word	0x0001c7c0
   15ad8:	0001c730 	.word	0x0001c730

00015adc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15adc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15ae0:	4605      	mov	r5, r0
   15ae2:	460f      	mov	r7, r1
	__asm__ volatile(
   15ae4:	f04f 0320 	mov.w	r3, #32
   15ae8:	f3ef 8811 	mrs	r8, BASEPRI
   15aec:	f383 8812 	msr	BASEPRI_MAX, r3
   15af0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   15af4:	f002 fb50 	bl	18198 <z_impl_z_current_get>
   15af8:	4c26      	ldr	r4, [pc, #152]	; (15b94 <z_fatal_error+0xb8>)
   15afa:	4b27      	ldr	r3, [pc, #156]	; (15b98 <z_fatal_error+0xbc>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   15afc:	4927      	ldr	r1, [pc, #156]	; (15b9c <z_fatal_error+0xc0>)
   15afe:	1ae4      	subs	r4, r4, r3
   15b00:	2d04      	cmp	r5, #4
   15b02:	bf96      	itet	ls
   15b04:	4b26      	ldrls	r3, [pc, #152]	; (15ba0 <z_fatal_error+0xc4>)
   15b06:	4b27      	ldrhi	r3, [pc, #156]	; (15ba4 <z_fatal_error+0xc8>)
   15b08:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   15b0c:	08e4      	lsrs	r4, r4, #3
   15b0e:	2200      	movs	r2, #0
   15b10:	01a4      	lsls	r4, r4, #6
   15b12:	4606      	mov	r6, r0
   15b14:	9200      	str	r2, [sp, #0]
   15b16:	f044 0001 	orr.w	r0, r4, #1
   15b1a:	462a      	mov	r2, r5
   15b1c:	f005 f884 	bl	1ac28 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   15b20:	b147      	cbz	r7, 15b34 <z_fatal_error+0x58>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   15b22:	69fb      	ldr	r3, [r7, #28]
   15b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
   15b28:	b123      	cbz	r3, 15b34 <z_fatal_error+0x58>
		LOG_ERR("Fault during interrupt handling\n");
   15b2a:	491f      	ldr	r1, [pc, #124]	; (15ba8 <z_fatal_error+0xcc>)
   15b2c:	f044 0001 	orr.w	r0, r4, #1
   15b30:	f005 f87a 	bl	1ac28 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   15b34:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   15b38:	b12e      	cbz	r6, 15b46 <z_fatal_error+0x6a>
   15b3a:	4630      	mov	r0, r6
   15b3c:	f005 ff1c 	bl	1b978 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   15b40:	b108      	cbz	r0, 15b46 <z_fatal_error+0x6a>
   15b42:	7803      	ldrb	r3, [r0, #0]
   15b44:	b903      	cbnz	r3, 15b48 <z_fatal_error+0x6c>
		thread_name = "unknown";
   15b46:	4819      	ldr	r0, [pc, #100]	; (15bac <z_fatal_error+0xd0>)
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   15b48:	f005 f881 	bl	1ac4e <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   15b4c:	4918      	ldr	r1, [pc, #96]	; (15bb0 <z_fatal_error+0xd4>)
   15b4e:	4603      	mov	r3, r0
   15b50:	4632      	mov	r2, r6
   15b52:	4620      	mov	r0, r4
   15b54:	f005 f868 	bl	1ac28 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   15b58:	4639      	mov	r1, r7
   15b5a:	4628      	mov	r0, r5
   15b5c:	f7fe fb3c 	bl	141d8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   15b60:	2d04      	cmp	r5, #4
   15b62:	d10c      	bne.n	15b7e <z_fatal_error+0xa2>
   15b64:	4913      	ldr	r1, [pc, #76]	; (15bb4 <z_fatal_error+0xd8>)
   15b66:	4a14      	ldr	r2, [pc, #80]	; (15bb8 <z_fatal_error+0xdc>)
   15b68:	4814      	ldr	r0, [pc, #80]	; (15bbc <z_fatal_error+0xe0>)
   15b6a:	238f      	movs	r3, #143	; 0x8f
   15b6c:	f004 feae 	bl	1a8cc <printk>
   15b70:	4813      	ldr	r0, [pc, #76]	; (15bc0 <z_fatal_error+0xe4>)
   15b72:	f004 feab 	bl	1a8cc <printk>
   15b76:	4810      	ldr	r0, [pc, #64]	; (15bb8 <z_fatal_error+0xdc>)
   15b78:	218f      	movs	r1, #143	; 0x8f
   15b7a:	f005 f840 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   15b7e:	f388 8811 	msr	BASEPRI, r8
   15b82:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15b86:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   15b88:	b002      	add	sp, #8
   15b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15b8e:	f7fb bf21 	b.w	119d4 <z_impl_k_thread_abort>
   15b92:	bf00      	nop
   15b94:	0001c9c8 	.word	0x0001c9c8
   15b98:	0001c940 	.word	0x0001c940
   15b9c:	0001fef1 	.word	0x0001fef1
   15ba0:	0001cdfc 	.word	0x0001cdfc
   15ba4:	0001fedb 	.word	0x0001fedb
   15ba8:	0001ff19 	.word	0x0001ff19
   15bac:	0001fee9 	.word	0x0001fee9
   15bb0:	0001ff3a 	.word	0x0001ff3a
   15bb4:	0001ff74 	.word	0x0001ff74
   15bb8:	0001ff52 	.word	0x0001ff52
   15bbc:	0001d2dc 	.word	0x0001d2dc
   15bc0:	0001ff91 	.word	0x0001ff91

00015bc4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   15bc4:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   15bc6:	2300      	movs	r3, #0
{
   15bc8:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   15bca:	2201      	movs	r2, #1
   15bcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   15bd0:	220f      	movs	r2, #15
   15bd2:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   15bd6:	4c0d      	ldr	r4, [pc, #52]	; (15c0c <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15bd8:	4a0d      	ldr	r2, [pc, #52]	; (15c10 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   15bda:	9301      	str	r3, [sp, #4]
   15bdc:	490d      	ldr	r1, [pc, #52]	; (15c14 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15bde:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   15be0:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15be4:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   15be8:	f44f 75b0 	mov.w	r5, #352	; 0x160
   15bec:	9300      	str	r3, [sp, #0]
   15bee:	fb05 1100 	mla	r1, r5, r0, r1
   15bf2:	4b09      	ldr	r3, [pc, #36]	; (15c18 <init_idle_thread+0x54>)
   15bf4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   15bf8:	4620      	mov	r0, r4
   15bfa:	f000 f9b3 	bl	15f64 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15bfe:	7b63      	ldrb	r3, [r4, #13]
   15c00:	f023 0304 	bic.w	r3, r3, #4
   15c04:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   15c06:	b007      	add	sp, #28
   15c08:	bd30      	pop	{r4, r5, pc}
   15c0a:	bf00      	nop
   15c0c:	20000630 	.word	0x20000630
   15c10:	200010e8 	.word	0x200010e8
   15c14:	20004bc0 	.word	0x20004bc0
   15c18:	00016235 	.word	0x00016235

00015c1c <bg_thread_main>:
{
   15c1c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   15c1e:	4b0a      	ldr	r3, [pc, #40]	; (15c48 <bg_thread_main+0x2c>)
   15c20:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   15c22:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   15c24:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   15c26:	f7ff ff0d 	bl	15a44 <z_sys_init_run_level>
	boot_banner();
   15c2a:	f003 f8ad 	bl	18d88 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   15c2e:	2003      	movs	r0, #3
   15c30:	f7ff ff08 	bl	15a44 <z_sys_init_run_level>
	z_init_static_threads();
   15c34:	f000 fa48 	bl	160c8 <z_init_static_threads>
	main();
   15c38:	f7f8 f80e 	bl	dc58 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   15c3c:	4a03      	ldr	r2, [pc, #12]	; (15c4c <bg_thread_main+0x30>)
   15c3e:	7b13      	ldrb	r3, [r2, #12]
   15c40:	f023 0301 	bic.w	r3, r3, #1
   15c44:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   15c46:	bd08      	pop	{r3, pc}
   15c48:	200029ca 	.word	0x200029ca
   15c4c:	200006b0 	.word	0x200006b0

00015c50 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   15c50:	4802      	ldr	r0, [pc, #8]	; (15c5c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   15c52:	4a03      	ldr	r2, [pc, #12]	; (15c60 <z_bss_zero+0x10>)
   15c54:	2100      	movs	r1, #0
   15c56:	1a12      	subs	r2, r2, r0
   15c58:	f005 bf90 	b.w	1bb7c <memset>
   15c5c:	20000508 	.word	0x20000508
   15c60:	20002b8c 	.word	0x20002b8c

00015c64 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   15c64:	b580      	push	{r7, lr}
   15c66:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   15c68:	f7fa fb6c 	bl	10344 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   15c6c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 15d44 <z_cstart+0xe0>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   15c70:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   15c74:	4d2d      	ldr	r5, [pc, #180]	; (15d2c <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   15c76:	4e2e      	ldr	r6, [pc, #184]	; (15d30 <z_cstart+0xcc>)
   15c78:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15c7a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 15d48 <z_cstart+0xe4>
   15c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15c82:	2400      	movs	r4, #0
   15c84:	616b      	str	r3, [r5, #20]
   15c86:	23e0      	movs	r3, #224	; 0xe0
   15c88:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   15c8c:	77ec      	strb	r4, [r5, #31]
   15c8e:	762c      	strb	r4, [r5, #24]
   15c90:	766c      	strb	r4, [r5, #25]
   15c92:	76ac      	strb	r4, [r5, #26]
   15c94:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   15c98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15c9a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   15c9e:	626b      	str	r3, [r5, #36]	; 0x24
   15ca0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   15ca4:	f7fb fe0c 	bl	118c0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   15ca8:	f7fb f9cc 	bl	11044 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   15cac:	f04f 33ff 	mov.w	r3, #4294967295
   15cb0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   15cb2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   15cb4:	f7fb ff82 	bl	11bbc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   15cb8:	f7fb fe9e 	bl	119f8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   15cbc:	f240 1301 	movw	r3, #257	; 0x101
   15cc0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   15cc4:	ab06      	add	r3, sp, #24
   15cc6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   15cc8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   15ccc:	f005 fe24 	bl	1b918 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   15cd0:	4620      	mov	r0, r4
   15cd2:	f7ff feb7 	bl	15a44 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   15cd6:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   15cd8:	4d16      	ldr	r5, [pc, #88]	; (15d34 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   15cda:	f7ff feb3 	bl	15a44 <z_sys_init_run_level>
	z_sched_init();
   15cde:	f002 f8c5 	bl	17e6c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15ce2:	4b15      	ldr	r3, [pc, #84]	; (15d38 <z_cstart+0xd4>)
   15ce4:	9305      	str	r3, [sp, #20]
   15ce6:	2301      	movs	r3, #1
   15ce8:	4914      	ldr	r1, [pc, #80]	; (15d3c <z_cstart+0xd8>)
   15cea:	9400      	str	r4, [sp, #0]
   15cec:	e9cd 4303 	strd	r4, r3, [sp, #12]
   15cf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15cf4:	464b      	mov	r3, r9
   15cf6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15cfa:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   15cfc:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15cfe:	f000 f931 	bl	15f64 <z_setup_new_thread>
   15d02:	7b6a      	ldrb	r2, [r5, #13]
   15d04:	f022 0204 	bic.w	r2, r2, #4
   15d08:	736a      	strb	r2, [r5, #13]
   15d0a:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   15d0c:	4628      	mov	r0, r5
   15d0e:	f001 fcad 	bl	1766c <z_ready_thread>
		init_idle_thread(i);
   15d12:	4620      	mov	r0, r4
   15d14:	f7ff ff56 	bl	15bc4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   15d18:	4b09      	ldr	r3, [pc, #36]	; (15d40 <z_cstart+0xdc>)
   15d1a:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15d1c:	464a      	mov	r2, r9
   15d1e:	4639      	mov	r1, r7
   15d20:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   15d22:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   15d24:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15d28:	f7fb faf2 	bl	11310 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   15d2c:	e000ed00 	.word	0xe000ed00
   15d30:	200010e8 	.word	0x200010e8
   15d34:	200006b0 	.word	0x200006b0
   15d38:	0001d028 	.word	0x0001d028
   15d3c:	20002ba0 	.word	0x20002ba0
   15d40:	20000630 	.word	0x20000630
   15d44:	20005540 	.word	0x20005540
   15d48:	00015c1d 	.word	0x00015c1d

00015d4c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   15d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15d50:	4d16      	ldr	r5, [pc, #88]	; (15dac <init_mem_slab_module+0x60>)
   15d52:	4c17      	ldr	r4, [pc, #92]	; (15db0 <init_mem_slab_module+0x64>)
   15d54:	4e17      	ldr	r6, [pc, #92]	; (15db4 <init_mem_slab_module+0x68>)
   15d56:	46a8      	mov	r8, r5
   15d58:	42ac      	cmp	r4, r5
   15d5a:	d90c      	bls.n	15d76 <init_mem_slab_module+0x2a>
   15d5c:	4916      	ldr	r1, [pc, #88]	; (15db8 <init_mem_slab_module+0x6c>)
   15d5e:	4817      	ldr	r0, [pc, #92]	; (15dbc <init_mem_slab_module+0x70>)
   15d60:	233c      	movs	r3, #60	; 0x3c
   15d62:	4632      	mov	r2, r6
   15d64:	f004 fdb2 	bl	1a8cc <printk>
   15d68:	4815      	ldr	r0, [pc, #84]	; (15dc0 <init_mem_slab_module+0x74>)
   15d6a:	f004 fdaf 	bl	1a8cc <printk>
   15d6e:	213c      	movs	r1, #60	; 0x3c
   15d70:	4630      	mov	r0, r6
   15d72:	f004 ff44 	bl	1abfe <assert_post_action>
   15d76:	4544      	cmp	r4, r8
   15d78:	d302      	bcc.n	15d80 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   15d7a:	2000      	movs	r0, #0
	return rc;
}
   15d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15d80:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   15d84:	ea41 0302 	orr.w	r3, r1, r2
   15d88:	f013 0303 	ands.w	r3, r3, #3
   15d8c:	d10b      	bne.n	15da6 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   15d8e:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   15d90:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   15d92:	4283      	cmp	r3, r0
   15d94:	d101      	bne.n	15d9a <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15d96:	3420      	adds	r4, #32
   15d98:	e7de      	b.n	15d58 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   15d9a:	69a7      	ldr	r7, [r4, #24]
   15d9c:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   15d9e:	3301      	adds	r3, #1
		slab->free_list = p;
   15da0:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   15da2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   15da4:	e7f5      	b.n	15d92 <init_mem_slab_module+0x46>
		return -EINVAL;
   15da6:	f06f 0015 	mvn.w	r0, #21
	return rc;
   15daa:	e7e7      	b.n	15d7c <init_mem_slab_module+0x30>
   15dac:	20000450 	.word	0x20000450
   15db0:	20000450 	.word	0x20000450
   15db4:	00020013 	.word	0x00020013
   15db8:	00020038 	.word	0x00020038
   15dbc:	0001d2dc 	.word	0x0001d2dc
   15dc0:	00020055 	.word	0x00020055

00015dc4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   15dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15dc8:	4604      	mov	r4, r0
   15dca:	460e      	mov	r6, r1
   15dcc:	4690      	mov	r8, r2
   15dce:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   15dd0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   15dd4:	f04f 0320 	mov.w	r3, #32
   15dd8:	f3ef 8711 	mrs	r7, BASEPRI
   15ddc:	f383 8812 	msr	BASEPRI_MAX, r3
   15de0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15de4:	4628      	mov	r0, r5
   15de6:	f000 f9ff 	bl	161e8 <z_spin_lock_valid>
   15dea:	b968      	cbnz	r0, 15e08 <k_mem_slab_alloc+0x44>
   15dec:	4a24      	ldr	r2, [pc, #144]	; (15e80 <k_mem_slab_alloc+0xbc>)
   15dee:	4925      	ldr	r1, [pc, #148]	; (15e84 <k_mem_slab_alloc+0xc0>)
   15df0:	4825      	ldr	r0, [pc, #148]	; (15e88 <k_mem_slab_alloc+0xc4>)
   15df2:	2381      	movs	r3, #129	; 0x81
   15df4:	f004 fd6a 	bl	1a8cc <printk>
   15df8:	4824      	ldr	r0, [pc, #144]	; (15e8c <k_mem_slab_alloc+0xc8>)
   15dfa:	4629      	mov	r1, r5
   15dfc:	f004 fd66 	bl	1a8cc <printk>
   15e00:	481f      	ldr	r0, [pc, #124]	; (15e80 <k_mem_slab_alloc+0xbc>)
   15e02:	2181      	movs	r1, #129	; 0x81
   15e04:	f004 fefb 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   15e08:	4628      	mov	r0, r5
   15e0a:	f000 fa0b 	bl	16224 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   15e0e:	69a3      	ldr	r3, [r4, #24]
   15e10:	b1eb      	cbz	r3, 15e4e <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   15e12:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   15e14:	681b      	ldr	r3, [r3, #0]
   15e16:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   15e18:	69e3      	ldr	r3, [r4, #28]
   15e1a:	3301      	adds	r3, #1
   15e1c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   15e1e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15e20:	4628      	mov	r0, r5
   15e22:	f000 f9ef 	bl	16204 <z_spin_unlock_valid>
   15e26:	b968      	cbnz	r0, 15e44 <k_mem_slab_alloc+0x80>
   15e28:	4a15      	ldr	r2, [pc, #84]	; (15e80 <k_mem_slab_alloc+0xbc>)
   15e2a:	4919      	ldr	r1, [pc, #100]	; (15e90 <k_mem_slab_alloc+0xcc>)
   15e2c:	4816      	ldr	r0, [pc, #88]	; (15e88 <k_mem_slab_alloc+0xc4>)
   15e2e:	23ac      	movs	r3, #172	; 0xac
   15e30:	f004 fd4c 	bl	1a8cc <printk>
   15e34:	4817      	ldr	r0, [pc, #92]	; (15e94 <k_mem_slab_alloc+0xd0>)
   15e36:	4629      	mov	r1, r5
   15e38:	f004 fd48 	bl	1a8cc <printk>
   15e3c:	4810      	ldr	r0, [pc, #64]	; (15e80 <k_mem_slab_alloc+0xbc>)
   15e3e:	21ac      	movs	r1, #172	; 0xac
   15e40:	f004 fedd 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   15e44:	f387 8811 	msr	BASEPRI, r7
   15e48:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   15e4c:	e013      	b.n	15e76 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   15e4e:	ea58 0209 	orrs.w	r2, r8, r9
   15e52:	d103      	bne.n	15e5c <k_mem_slab_alloc+0x98>
		*mem = NULL;
   15e54:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   15e56:	f06f 040b 	mvn.w	r4, #11
   15e5a:	e7e1      	b.n	15e20 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   15e5c:	4622      	mov	r2, r4
   15e5e:	e9cd 8900 	strd	r8, r9, [sp]
   15e62:	4639      	mov	r1, r7
   15e64:	4628      	mov	r0, r5
   15e66:	f001 fdb3 	bl	179d0 <z_pend_curr>
		if (result == 0) {
   15e6a:	4604      	mov	r4, r0
   15e6c:	b918      	cbnz	r0, 15e76 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   15e6e:	4b0a      	ldr	r3, [pc, #40]	; (15e98 <k_mem_slab_alloc+0xd4>)
   15e70:	689b      	ldr	r3, [r3, #8]
   15e72:	695b      	ldr	r3, [r3, #20]
   15e74:	6033      	str	r3, [r6, #0]
}
   15e76:	4620      	mov	r0, r4
   15e78:	b003      	add	sp, #12
   15e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15e7e:	bf00      	nop
   15e80:	0001d83f 	.word	0x0001d83f
   15e84:	0001d891 	.word	0x0001d891
   15e88:	0001d2dc 	.word	0x0001d2dc
   15e8c:	0001d8a6 	.word	0x0001d8a6
   15e90:	0001d865 	.word	0x0001d865
   15e94:	0001d87c 	.word	0x0001d87c
   15e98:	200010e8 	.word	0x200010e8

00015e9c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   15e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ea0:	4604      	mov	r4, r0
   15ea2:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   15ea4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   15ea8:	f04f 0320 	mov.w	r3, #32
   15eac:	f3ef 8711 	mrs	r7, BASEPRI
   15eb0:	f383 8812 	msr	BASEPRI_MAX, r3
   15eb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15eb8:	4628      	mov	r0, r5
   15eba:	f000 f995 	bl	161e8 <z_spin_lock_valid>
   15ebe:	b968      	cbnz	r0, 15edc <k_mem_slab_free+0x40>
   15ec0:	4a22      	ldr	r2, [pc, #136]	; (15f4c <k_mem_slab_free+0xb0>)
   15ec2:	4923      	ldr	r1, [pc, #140]	; (15f50 <k_mem_slab_free+0xb4>)
   15ec4:	4823      	ldr	r0, [pc, #140]	; (15f54 <k_mem_slab_free+0xb8>)
   15ec6:	2381      	movs	r3, #129	; 0x81
   15ec8:	f004 fd00 	bl	1a8cc <printk>
   15ecc:	4822      	ldr	r0, [pc, #136]	; (15f58 <k_mem_slab_free+0xbc>)
   15ece:	4629      	mov	r1, r5
   15ed0:	f004 fcfc 	bl	1a8cc <printk>
   15ed4:	481d      	ldr	r0, [pc, #116]	; (15f4c <k_mem_slab_free+0xb0>)
   15ed6:	2181      	movs	r1, #129	; 0x81
   15ed8:	f004 fe91 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   15edc:	4628      	mov	r0, r5
   15ede:	f000 f9a1 	bl	16224 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   15ee2:	f8d4 8018 	ldr.w	r8, [r4, #24]
   15ee6:	f1b8 0f00 	cmp.w	r8, #0
   15eea:	d10f      	bne.n	15f0c <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   15eec:	4620      	mov	r0, r4
   15eee:	f001 ff6d 	bl	17dcc <z_unpend_first_thread>

		if (pending_thread != NULL) {
   15ef2:	b158      	cbz	r0, 15f0c <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   15ef4:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   15ef6:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   15ef8:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   15efc:	f001 fbb6 	bl	1766c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   15f00:	4639      	mov	r1, r7
   15f02:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   15f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   15f08:	f001 b910 	b.w	1712c <z_reschedule>
	**(char ***) mem = slab->free_list;
   15f0c:	6833      	ldr	r3, [r6, #0]
   15f0e:	69a2      	ldr	r2, [r4, #24]
   15f10:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   15f12:	6833      	ldr	r3, [r6, #0]
   15f14:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   15f16:	69e3      	ldr	r3, [r4, #28]
   15f18:	3b01      	subs	r3, #1
   15f1a:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15f1c:	4628      	mov	r0, r5
   15f1e:	f000 f971 	bl	16204 <z_spin_unlock_valid>
   15f22:	b968      	cbnz	r0, 15f40 <k_mem_slab_free+0xa4>
   15f24:	4a09      	ldr	r2, [pc, #36]	; (15f4c <k_mem_slab_free+0xb0>)
   15f26:	490d      	ldr	r1, [pc, #52]	; (15f5c <k_mem_slab_free+0xc0>)
   15f28:	480a      	ldr	r0, [pc, #40]	; (15f54 <k_mem_slab_free+0xb8>)
   15f2a:	23ac      	movs	r3, #172	; 0xac
   15f2c:	f004 fcce 	bl	1a8cc <printk>
   15f30:	480b      	ldr	r0, [pc, #44]	; (15f60 <k_mem_slab_free+0xc4>)
   15f32:	4629      	mov	r1, r5
   15f34:	f004 fcca 	bl	1a8cc <printk>
   15f38:	4804      	ldr	r0, [pc, #16]	; (15f4c <k_mem_slab_free+0xb0>)
   15f3a:	21ac      	movs	r1, #172	; 0xac
   15f3c:	f004 fe5f 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   15f40:	f387 8811 	msr	BASEPRI, r7
   15f44:	f3bf 8f6f 	isb	sy
}
   15f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15f4c:	0001d83f 	.word	0x0001d83f
   15f50:	0001d891 	.word	0x0001d891
   15f54:	0001d2dc 	.word	0x0001d2dc
   15f58:	0001d8a6 	.word	0x0001d8a6
   15f5c:	0001d865 	.word	0x0001d865
   15f60:	0001d87c 	.word	0x0001d87c

00015f64 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   15f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15f68:	b085      	sub	sp, #20
   15f6a:	4604      	mov	r4, r0
   15f6c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   15f70:	f1b8 0f0f 	cmp.w	r8, #15
{
   15f74:	460f      	mov	r7, r1
   15f76:	4615      	mov	r5, r2
   15f78:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   15f7a:	d132      	bne.n	15fe2 <z_setup_new_thread+0x7e>
   15f7c:	4b25      	ldr	r3, [pc, #148]	; (16014 <z_setup_new_thread+0xb0>)
   15f7e:	4599      	cmp	r9, r3
   15f80:	d133      	bne.n	15fea <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   15f82:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   15f86:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   15f8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15f8c:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15f8e:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   15f90:	2304      	movs	r3, #4
   15f92:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15f94:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   15f98:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   15f9c:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   15fa2:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15fa6:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15fa8:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15fae:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   15fb0:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15fb4:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   15fb6:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15fb8:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   15fba:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   15fbe:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   15fc0:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   15fc2:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15fc4:	4642      	mov	r2, r8
   15fc6:	4639      	mov	r1, r7
   15fc8:	4620      	mov	r0, r4
   15fca:	f7fb f96b 	bl	112a4 <arch_new_thread>
	if (!_current) {
   15fce:	4b12      	ldr	r3, [pc, #72]	; (16018 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
   15fd0:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   15fd2:	689b      	ldr	r3, [r3, #8]
   15fd4:	b103      	cbz	r3, 15fd8 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   15fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
   15fd8:	6723      	str	r3, [r4, #112]	; 0x70
}
   15fda:	4640      	mov	r0, r8
   15fdc:	b005      	add	sp, #20
   15fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   15fe2:	f108 0310 	add.w	r3, r8, #16
   15fe6:	2b1e      	cmp	r3, #30
   15fe8:	d9cb      	bls.n	15f82 <z_setup_new_thread+0x1e>
   15fea:	4a0c      	ldr	r2, [pc, #48]	; (1601c <z_setup_new_thread+0xb8>)
   15fec:	490c      	ldr	r1, [pc, #48]	; (16020 <z_setup_new_thread+0xbc>)
   15fee:	480d      	ldr	r0, [pc, #52]	; (16024 <z_setup_new_thread+0xc0>)
   15ff0:	f240 13ff 	movw	r3, #511	; 0x1ff
   15ff4:	f004 fc6a 	bl	1a8cc <printk>
   15ff8:	4641      	mov	r1, r8
   15ffa:	480b      	ldr	r0, [pc, #44]	; (16028 <z_setup_new_thread+0xc4>)
   15ffc:	f06f 030f 	mvn.w	r3, #15
   16000:	220e      	movs	r2, #14
   16002:	f004 fc63 	bl	1a8cc <printk>
   16006:	4805      	ldr	r0, [pc, #20]	; (1601c <z_setup_new_thread+0xb8>)
   16008:	f240 11ff 	movw	r1, #511	; 0x1ff
   1600c:	f004 fdf7 	bl	1abfe <assert_post_action>
   16010:	e7b7      	b.n	15f82 <z_setup_new_thread+0x1e>
   16012:	bf00      	nop
   16014:	00016235 	.word	0x00016235
   16018:	200010e8 	.word	0x200010e8
   1601c:	00020074 	.word	0x00020074
   16020:	00020097 	.word	0x00020097
   16024:	0001d2dc 	.word	0x0001d2dc
   16028:	00020117 	.word	0x00020117

0001602c <z_impl_k_thread_create>:
{
   1602c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16030:	b087      	sub	sp, #28
   16032:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   16036:	4604      	mov	r4, r0
   16038:	460d      	mov	r5, r1
   1603a:	4690      	mov	r8, r2
   1603c:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1603e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   16042:	b173      	cbz	r3, 16062 <z_impl_k_thread_create+0x36>
   16044:	491b      	ldr	r1, [pc, #108]	; (160b4 <z_impl_k_thread_create+0x88>)
   16046:	4a1c      	ldr	r2, [pc, #112]	; (160b8 <z_impl_k_thread_create+0x8c>)
   16048:	481c      	ldr	r0, [pc, #112]	; (160bc <z_impl_k_thread_create+0x90>)
   1604a:	f44f 731a 	mov.w	r3, #616	; 0x268
   1604e:	f004 fc3d 	bl	1a8cc <printk>
   16052:	481b      	ldr	r0, [pc, #108]	; (160c0 <z_impl_k_thread_create+0x94>)
   16054:	f004 fc3a 	bl	1a8cc <printk>
   16058:	4817      	ldr	r0, [pc, #92]	; (160b8 <z_impl_k_thread_create+0x8c>)
   1605a:	f44f 711a 	mov.w	r1, #616	; 0x268
   1605e:	f004 fdce 	bl	1abfe <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   16062:	2300      	movs	r3, #0
   16064:	9305      	str	r3, [sp, #20]
   16066:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16068:	9304      	str	r3, [sp, #16]
   1606a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1606c:	9303      	str	r3, [sp, #12]
   1606e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16070:	9302      	str	r3, [sp, #8]
   16072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16074:	9301      	str	r3, [sp, #4]
   16076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16078:	9300      	str	r3, [sp, #0]
   1607a:	4642      	mov	r2, r8
   1607c:	464b      	mov	r3, r9
   1607e:	4629      	mov	r1, r5
   16080:	4620      	mov	r0, r4
   16082:	f7ff ff6f 	bl	15f64 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   16086:	1c7b      	adds	r3, r7, #1
   16088:	bf08      	it	eq
   1608a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1608e:	d005      	beq.n	1609c <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16090:	ea56 0307 	orrs.w	r3, r6, r7
   16094:	d106      	bne.n	160a4 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   16096:	4620      	mov	r0, r4
   16098:	f001 fb30 	bl	176fc <z_sched_start>
}
   1609c:	4620      	mov	r0, r4
   1609e:	b007      	add	sp, #28
   160a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   160a4:	4907      	ldr	r1, [pc, #28]	; (160c4 <z_impl_k_thread_create+0x98>)
   160a6:	4632      	mov	r2, r6
   160a8:	463b      	mov	r3, r7
   160aa:	f104 0018 	add.w	r0, r4, #24
   160ae:	f002 fa11 	bl	184d4 <z_add_timeout>
   160b2:	e7f3      	b.n	1609c <z_impl_k_thread_create+0x70>
   160b4:	00020148 	.word	0x00020148
   160b8:	00020074 	.word	0x00020074
   160bc:	0001d2dc 	.word	0x0001d2dc
   160c0:	0002015a 	.word	0x0002015a
   160c4:	000177a5 	.word	0x000177a5

000160c8 <z_init_static_threads>:
{
   160c8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   160cc:	4f3f      	ldr	r7, [pc, #252]	; (161cc <z_init_static_threads+0x104>)
   160ce:	4d40      	ldr	r5, [pc, #256]	; (161d0 <z_init_static_threads+0x108>)
   160d0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 161e0 <z_init_static_threads+0x118>
{
   160d4:	b086      	sub	sp, #24
   160d6:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   160d8:	42bd      	cmp	r5, r7
   160da:	d90e      	bls.n	160fa <z_init_static_threads+0x32>
   160dc:	493d      	ldr	r1, [pc, #244]	; (161d4 <z_init_static_threads+0x10c>)
   160de:	483e      	ldr	r0, [pc, #248]	; (161d8 <z_init_static_threads+0x110>)
   160e0:	f240 23cf 	movw	r3, #719	; 0x2cf
   160e4:	4642      	mov	r2, r8
   160e6:	f004 fbf1 	bl	1a8cc <printk>
   160ea:	483c      	ldr	r0, [pc, #240]	; (161dc <z_init_static_threads+0x114>)
   160ec:	f004 fbee 	bl	1a8cc <printk>
   160f0:	f240 21cf 	movw	r1, #719	; 0x2cf
   160f4:	4640      	mov	r0, r8
   160f6:	f004 fd82 	bl	1abfe <assert_post_action>
   160fa:	42b5      	cmp	r5, r6
   160fc:	f105 0430 	add.w	r4, r5, #48	; 0x30
   16100:	d31f      	bcc.n	16142 <z_init_static_threads+0x7a>
	k_sched_lock();
   16102:	f001 f857 	bl	171b4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   16106:	4c32      	ldr	r4, [pc, #200]	; (161d0 <z_init_static_threads+0x108>)
   16108:	4d35      	ldr	r5, [pc, #212]	; (161e0 <z_init_static_threads+0x118>)
   1610a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 161d4 <z_init_static_threads+0x10c>
   1610e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 161d8 <z_init_static_threads+0x110>
   16112:	42b4      	cmp	r4, r6
   16114:	d90e      	bls.n	16134 <z_init_static_threads+0x6c>
   16116:	4641      	mov	r1, r8
   16118:	f240 23ee 	movw	r3, #750	; 0x2ee
   1611c:	462a      	mov	r2, r5
   1611e:	4648      	mov	r0, r9
   16120:	f004 fbd4 	bl	1a8cc <printk>
   16124:	482d      	ldr	r0, [pc, #180]	; (161dc <z_init_static_threads+0x114>)
   16126:	f004 fbd1 	bl	1a8cc <printk>
   1612a:	f240 21ee 	movw	r1, #750	; 0x2ee
   1612e:	4628      	mov	r0, r5
   16130:	f004 fd65 	bl	1abfe <assert_post_action>
   16134:	42b4      	cmp	r4, r6
   16136:	d321      	bcc.n	1617c <z_init_static_threads+0xb4>
}
   16138:	b006      	add	sp, #24
   1613a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   1613e:	f001 bd7d 	b.w	17c3c <k_sched_unlock>
		z_setup_new_thread(
   16142:	f854 3c04 	ldr.w	r3, [r4, #-4]
   16146:	9305      	str	r3, [sp, #20]
   16148:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1614c:	9304      	str	r3, [sp, #16]
   1614e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   16152:	9303      	str	r3, [sp, #12]
   16154:	f854 3c18 	ldr.w	r3, [r4, #-24]
   16158:	9302      	str	r3, [sp, #8]
   1615a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1615e:	9301      	str	r3, [sp, #4]
   16160:	f854 3c20 	ldr.w	r3, [r4, #-32]
   16164:	9300      	str	r3, [sp, #0]
   16166:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1616a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1616e:	f7ff fef9 	bl	15f64 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   16172:	f854 3c30 	ldr.w	r3, [r4, #-48]
   16176:	655d      	str	r5, [r3, #84]	; 0x54
   16178:	4625      	mov	r5, r4
   1617a:	e7ad      	b.n	160d8 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1617c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1617e:	1c4b      	adds	r3, r1, #1
   16180:	d014      	beq.n	161ac <z_init_static_threads+0xe4>
   16182:	f240 32e7 	movw	r2, #999	; 0x3e7
   16186:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
   16188:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1618c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   16190:	4693      	mov	fp, r2
   16192:	469c      	mov	ip, r3
   16194:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16198:	459c      	cmp	ip, r3
   1619a:	bf08      	it	eq
   1619c:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   1619e:	6827      	ldr	r7, [r4, #0]
   161a0:	4658      	mov	r0, fp
   161a2:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   161a4:	d104      	bne.n	161b0 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   161a6:	4638      	mov	r0, r7
   161a8:	f001 faa8 	bl	176fc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   161ac:	3430      	adds	r4, #48	; 0x30
   161ae:	e7b0      	b.n	16112 <z_init_static_threads+0x4a>
   161b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   161b4:	2300      	movs	r3, #0
   161b6:	f7f6 fcc1 	bl	cb3c <__aeabi_uldivmod>
   161ba:	4602      	mov	r2, r0
   161bc:	460b      	mov	r3, r1
   161be:	f107 0018 	add.w	r0, r7, #24
   161c2:	4908      	ldr	r1, [pc, #32]	; (161e4 <z_init_static_threads+0x11c>)
   161c4:	f002 f986 	bl	184d4 <z_add_timeout>
   161c8:	e7f0      	b.n	161ac <z_init_static_threads+0xe4>
   161ca:	bf00      	nop
   161cc:	20000418 	.word	0x20000418
   161d0:	20000418 	.word	0x20000418
   161d4:	0002017f 	.word	0x0002017f
   161d8:	0001d2dc 	.word	0x0001d2dc
   161dc:	00020055 	.word	0x00020055
   161e0:	00020074 	.word	0x00020074
   161e4:	000177a5 	.word	0x000177a5

000161e8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   161e8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   161ea:	b138      	cbz	r0, 161fc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   161ec:	4b04      	ldr	r3, [pc, #16]	; (16200 <z_spin_lock_valid+0x18>)
   161ee:	7d1b      	ldrb	r3, [r3, #20]
   161f0:	f000 0003 	and.w	r0, r0, #3
   161f4:	1ac0      	subs	r0, r0, r3
   161f6:	bf18      	it	ne
   161f8:	2001      	movne	r0, #1
   161fa:	4770      	bx	lr
			return false;
		}
	}
	return true;
   161fc:	2001      	movs	r0, #1
}
   161fe:	4770      	bx	lr
   16200:	200010e8 	.word	0x200010e8

00016204 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   16204:	4906      	ldr	r1, [pc, #24]	; (16220 <z_spin_unlock_valid+0x1c>)
{
   16206:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   16208:	688a      	ldr	r2, [r1, #8]
   1620a:	7d08      	ldrb	r0, [r1, #20]
   1620c:	6819      	ldr	r1, [r3, #0]
   1620e:	4302      	orrs	r2, r0
   16210:	4291      	cmp	r1, r2
   16212:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   16216:	bf04      	itt	eq
   16218:	6018      	streq	r0, [r3, #0]
	return true;
   1621a:	2001      	moveq	r0, #1
}
   1621c:	4770      	bx	lr
   1621e:	bf00      	nop
   16220:	200010e8 	.word	0x200010e8

00016224 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   16224:	4a02      	ldr	r2, [pc, #8]	; (16230 <z_spin_lock_set_owner+0xc>)
   16226:	7d11      	ldrb	r1, [r2, #20]
   16228:	6893      	ldr	r3, [r2, #8]
   1622a:	430b      	orrs	r3, r1
   1622c:	6003      	str	r3, [r0, #0]
}
   1622e:	4770      	bx	lr
   16230:	200010e8 	.word	0x200010e8

00016234 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   16234:	4c11      	ldr	r4, [pc, #68]	; (1627c <idle+0x48>)
   16236:	68a2      	ldr	r2, [r4, #8]
   16238:	f992 200e 	ldrsb.w	r2, [r2, #14]
   1623c:	2a00      	cmp	r2, #0
{
   1623e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   16240:	da09      	bge.n	16256 <idle+0x22>
   16242:	490f      	ldr	r1, [pc, #60]	; (16280 <idle+0x4c>)
   16244:	480f      	ldr	r0, [pc, #60]	; (16284 <idle+0x50>)
   16246:	4a10      	ldr	r2, [pc, #64]	; (16288 <idle+0x54>)
   16248:	2327      	movs	r3, #39	; 0x27
   1624a:	f004 fb3f 	bl	1a8cc <printk>
   1624e:	480e      	ldr	r0, [pc, #56]	; (16288 <idle+0x54>)
   16250:	2127      	movs	r1, #39	; 0x27
   16252:	f004 fcd4 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   16256:	f04f 0220 	mov.w	r2, #32
   1625a:	f3ef 8311 	mrs	r3, BASEPRI
   1625e:	f382 8812 	msr	BASEPRI_MAX, r2
   16262:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   16266:	f002 fa57 	bl	18718 <z_get_next_timeout_expiry>
   1626a:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1626c:	f7fa fda0 	bl	10db0 <pm_system_suspend>
   16270:	2800      	cmp	r0, #0
   16272:	d1f0      	bne.n	16256 <idle+0x22>
	arch_cpu_idle();
   16274:	f7fa feec 	bl	11050 <arch_cpu_idle>
}
   16278:	e7ed      	b.n	16256 <idle+0x22>
   1627a:	bf00      	nop
   1627c:	200010e8 	.word	0x200010e8
   16280:	000201cd 	.word	0x000201cd
   16284:	0001d2dc 	.word	0x0001d2dc
   16288:	000201ac 	.word	0x000201ac

0001628c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1628c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16290:	4604      	mov	r4, r0
   16292:	4616      	mov	r6, r2
   16294:	461f      	mov	r7, r3
   16296:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1629a:	b163      	cbz	r3, 162b6 <z_impl_k_mutex_lock+0x2a>
   1629c:	4970      	ldr	r1, [pc, #448]	; (16460 <z_impl_k_mutex_lock+0x1d4>)
   1629e:	4a71      	ldr	r2, [pc, #452]	; (16464 <z_impl_k_mutex_lock+0x1d8>)
   162a0:	4871      	ldr	r0, [pc, #452]	; (16468 <z_impl_k_mutex_lock+0x1dc>)
   162a2:	2365      	movs	r3, #101	; 0x65
   162a4:	f004 fb12 	bl	1a8cc <printk>
   162a8:	4870      	ldr	r0, [pc, #448]	; (1646c <z_impl_k_mutex_lock+0x1e0>)
   162aa:	f004 fb0f 	bl	1a8cc <printk>
   162ae:	486d      	ldr	r0, [pc, #436]	; (16464 <z_impl_k_mutex_lock+0x1d8>)
   162b0:	2165      	movs	r1, #101	; 0x65
   162b2:	f004 fca4 	bl	1abfe <assert_post_action>
   162b6:	f04f 0320 	mov.w	r3, #32
   162ba:	f3ef 8811 	mrs	r8, BASEPRI
   162be:	f383 8812 	msr	BASEPRI_MAX, r3
   162c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   162c6:	486a      	ldr	r0, [pc, #424]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   162c8:	f7ff ff8e 	bl	161e8 <z_spin_lock_valid>
   162cc:	b968      	cbnz	r0, 162ea <z_impl_k_mutex_lock+0x5e>
   162ce:	4a69      	ldr	r2, [pc, #420]	; (16474 <z_impl_k_mutex_lock+0x1e8>)
   162d0:	4969      	ldr	r1, [pc, #420]	; (16478 <z_impl_k_mutex_lock+0x1ec>)
   162d2:	4865      	ldr	r0, [pc, #404]	; (16468 <z_impl_k_mutex_lock+0x1dc>)
   162d4:	2381      	movs	r3, #129	; 0x81
   162d6:	f004 faf9 	bl	1a8cc <printk>
   162da:	4965      	ldr	r1, [pc, #404]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   162dc:	4867      	ldr	r0, [pc, #412]	; (1647c <z_impl_k_mutex_lock+0x1f0>)
   162de:	f004 faf5 	bl	1a8cc <printk>
   162e2:	4864      	ldr	r0, [pc, #400]	; (16474 <z_impl_k_mutex_lock+0x1e8>)
   162e4:	2181      	movs	r1, #129	; 0x81
   162e6:	f004 fc8a 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   162ea:	4861      	ldr	r0, [pc, #388]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   162ec:	f7ff ff9a 	bl	16224 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   162f0:	68e3      	ldr	r3, [r4, #12]
   162f2:	4a63      	ldr	r2, [pc, #396]	; (16480 <z_impl_k_mutex_lock+0x1f4>)
   162f4:	b1fb      	cbz	r3, 16336 <z_impl_k_mutex_lock+0xaa>
   162f6:	68a0      	ldr	r0, [r4, #8]
   162f8:	6891      	ldr	r1, [r2, #8]
   162fa:	4288      	cmp	r0, r1
   162fc:	d03d      	beq.n	1637a <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   162fe:	ea56 0307 	orrs.w	r3, r6, r7
   16302:	d13c      	bne.n	1637e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16304:	485a      	ldr	r0, [pc, #360]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   16306:	f7ff ff7d 	bl	16204 <z_spin_unlock_valid>
   1630a:	b968      	cbnz	r0, 16328 <z_impl_k_mutex_lock+0x9c>
   1630c:	4a59      	ldr	r2, [pc, #356]	; (16474 <z_impl_k_mutex_lock+0x1e8>)
   1630e:	495d      	ldr	r1, [pc, #372]	; (16484 <z_impl_k_mutex_lock+0x1f8>)
   16310:	4855      	ldr	r0, [pc, #340]	; (16468 <z_impl_k_mutex_lock+0x1dc>)
   16312:	23ac      	movs	r3, #172	; 0xac
   16314:	f004 fada 	bl	1a8cc <printk>
   16318:	4955      	ldr	r1, [pc, #340]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   1631a:	485b      	ldr	r0, [pc, #364]	; (16488 <z_impl_k_mutex_lock+0x1fc>)
   1631c:	f004 fad6 	bl	1a8cc <printk>
   16320:	4854      	ldr	r0, [pc, #336]	; (16474 <z_impl_k_mutex_lock+0x1e8>)
   16322:	21ac      	movs	r1, #172	; 0xac
   16324:	f004 fc6b 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   16328:	f388 8811 	msr	BASEPRI, r8
   1632c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   16330:	f06f 000f 	mvn.w	r0, #15
   16334:	e01e      	b.n	16374 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   16336:	6891      	ldr	r1, [r2, #8]
   16338:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1633c:	484c      	ldr	r0, [pc, #304]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1633e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   16340:	3301      	adds	r3, #1
   16342:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   16344:	6893      	ldr	r3, [r2, #8]
   16346:	60a3      	str	r3, [r4, #8]
   16348:	f7ff ff5c 	bl	16204 <z_spin_unlock_valid>
   1634c:	b968      	cbnz	r0, 1636a <z_impl_k_mutex_lock+0xde>
   1634e:	4a49      	ldr	r2, [pc, #292]	; (16474 <z_impl_k_mutex_lock+0x1e8>)
   16350:	494c      	ldr	r1, [pc, #304]	; (16484 <z_impl_k_mutex_lock+0x1f8>)
   16352:	4845      	ldr	r0, [pc, #276]	; (16468 <z_impl_k_mutex_lock+0x1dc>)
   16354:	23ac      	movs	r3, #172	; 0xac
   16356:	f004 fab9 	bl	1a8cc <printk>
   1635a:	4945      	ldr	r1, [pc, #276]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   1635c:	484a      	ldr	r0, [pc, #296]	; (16488 <z_impl_k_mutex_lock+0x1fc>)
   1635e:	f004 fab5 	bl	1a8cc <printk>
   16362:	4844      	ldr	r0, [pc, #272]	; (16474 <z_impl_k_mutex_lock+0x1e8>)
   16364:	21ac      	movs	r1, #172	; 0xac
   16366:	f004 fc4a 	bl	1abfe <assert_post_action>
   1636a:	f388 8811 	msr	BASEPRI, r8
   1636e:	f3bf 8f6f 	isb	sy
		return 0;
   16372:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   16374:	b002      	add	sp, #8
   16376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1637a:	6921      	ldr	r1, [r4, #16]
   1637c:	e7de      	b.n	1633c <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1637e:	f991 100e 	ldrsb.w	r1, [r1, #14]
   16382:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   16386:	4299      	cmp	r1, r3
   16388:	bfa8      	it	ge
   1638a:	4619      	movge	r1, r3
   1638c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   16390:	4291      	cmp	r1, r2
   16392:	bfb8      	it	lt
   16394:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   16396:	428b      	cmp	r3, r1
   16398:	dd44      	ble.n	16424 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
   1639a:	f001 fb49 	bl	17a30 <z_set_prio>
   1639e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   163a0:	e9cd 6700 	strd	r6, r7, [sp]
   163a4:	4832      	ldr	r0, [pc, #200]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   163a6:	4622      	mov	r2, r4
   163a8:	4641      	mov	r1, r8
   163aa:	f001 fb11 	bl	179d0 <z_pend_curr>
	if (got_mutex == 0) {
   163ae:	2800      	cmp	r0, #0
   163b0:	d0e0      	beq.n	16374 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   163b2:	f04f 0320 	mov.w	r3, #32
   163b6:	f3ef 8611 	mrs	r6, BASEPRI
   163ba:	f383 8812 	msr	BASEPRI_MAX, r3
   163be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   163c2:	482b      	ldr	r0, [pc, #172]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   163c4:	f7ff ff10 	bl	161e8 <z_spin_lock_valid>
   163c8:	b968      	cbnz	r0, 163e6 <z_impl_k_mutex_lock+0x15a>
   163ca:	4a2a      	ldr	r2, [pc, #168]	; (16474 <z_impl_k_mutex_lock+0x1e8>)
   163cc:	492a      	ldr	r1, [pc, #168]	; (16478 <z_impl_k_mutex_lock+0x1ec>)
   163ce:	4826      	ldr	r0, [pc, #152]	; (16468 <z_impl_k_mutex_lock+0x1dc>)
   163d0:	2381      	movs	r3, #129	; 0x81
   163d2:	f004 fa7b 	bl	1a8cc <printk>
   163d6:	4926      	ldr	r1, [pc, #152]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   163d8:	4828      	ldr	r0, [pc, #160]	; (1647c <z_impl_k_mutex_lock+0x1f0>)
   163da:	f004 fa77 	bl	1a8cc <printk>
   163de:	4825      	ldr	r0, [pc, #148]	; (16474 <z_impl_k_mutex_lock+0x1e8>)
   163e0:	2181      	movs	r1, #129	; 0x81
   163e2:	f004 fc0c 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   163e6:	4822      	ldr	r0, [pc, #136]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   163e8:	f7ff ff1c 	bl	16224 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   163ec:	6823      	ldr	r3, [r4, #0]
   163ee:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   163f0:	429c      	cmp	r4, r3
   163f2:	d00a      	beq.n	1640a <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   163f4:	b14b      	cbz	r3, 1640a <z_impl_k_mutex_lock+0x17e>
   163f6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   163fa:	4299      	cmp	r1, r3
   163fc:	bfa8      	it	ge
   163fe:	4619      	movge	r1, r3
   16400:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   16404:	4299      	cmp	r1, r3
   16406:	bfb8      	it	lt
   16408:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1640a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1640c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16410:	4299      	cmp	r1, r3
   16412:	d109      	bne.n	16428 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
   16414:	b16d      	cbz	r5, 16432 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
   16416:	4816      	ldr	r0, [pc, #88]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   16418:	4631      	mov	r1, r6
   1641a:	f000 fe87 	bl	1712c <z_reschedule>
	return -EAGAIN;
   1641e:	f06f 000a 	mvn.w	r0, #10
   16422:	e7a7      	b.n	16374 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   16424:	2500      	movs	r5, #0
   16426:	e7bb      	b.n	163a0 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
   16428:	f001 fb02 	bl	17a30 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1642c:	2800      	cmp	r0, #0
   1642e:	d1f2      	bne.n	16416 <z_impl_k_mutex_lock+0x18a>
   16430:	e7f0      	b.n	16414 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16432:	480f      	ldr	r0, [pc, #60]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   16434:	f7ff fee6 	bl	16204 <z_spin_unlock_valid>
   16438:	b968      	cbnz	r0, 16456 <z_impl_k_mutex_lock+0x1ca>
   1643a:	4a0e      	ldr	r2, [pc, #56]	; (16474 <z_impl_k_mutex_lock+0x1e8>)
   1643c:	4911      	ldr	r1, [pc, #68]	; (16484 <z_impl_k_mutex_lock+0x1f8>)
   1643e:	480a      	ldr	r0, [pc, #40]	; (16468 <z_impl_k_mutex_lock+0x1dc>)
   16440:	23ac      	movs	r3, #172	; 0xac
   16442:	f004 fa43 	bl	1a8cc <printk>
   16446:	490a      	ldr	r1, [pc, #40]	; (16470 <z_impl_k_mutex_lock+0x1e4>)
   16448:	480f      	ldr	r0, [pc, #60]	; (16488 <z_impl_k_mutex_lock+0x1fc>)
   1644a:	f004 fa3f 	bl	1a8cc <printk>
   1644e:	4809      	ldr	r0, [pc, #36]	; (16474 <z_impl_k_mutex_lock+0x1e8>)
   16450:	21ac      	movs	r1, #172	; 0xac
   16452:	f004 fbd4 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   16456:	f386 8811 	msr	BASEPRI, r6
   1645a:	f3bf 8f6f 	isb	sy
   1645e:	e7de      	b.n	1641e <z_impl_k_mutex_lock+0x192>
   16460:	00020148 	.word	0x00020148
   16464:	000201f5 	.word	0x000201f5
   16468:	0001d2dc 	.word	0x0001d2dc
   1646c:	00020217 	.word	0x00020217
   16470:	20001110 	.word	0x20001110
   16474:	0001d83f 	.word	0x0001d83f
   16478:	0001d891 	.word	0x0001d891
   1647c:	0001d8a6 	.word	0x0001d8a6
   16480:	200010e8 	.word	0x200010e8
   16484:	0001d865 	.word	0x0001d865
   16488:	0001d87c 	.word	0x0001d87c

0001648c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1648c:	b538      	push	{r3, r4, r5, lr}
   1648e:	4604      	mov	r4, r0
   16490:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   16494:	b163      	cbz	r3, 164b0 <z_impl_k_mutex_unlock+0x24>
   16496:	4952      	ldr	r1, [pc, #328]	; (165e0 <z_impl_k_mutex_unlock+0x154>)
   16498:	4a52      	ldr	r2, [pc, #328]	; (165e4 <z_impl_k_mutex_unlock+0x158>)
   1649a:	4853      	ldr	r0, [pc, #332]	; (165e8 <z_impl_k_mutex_unlock+0x15c>)
   1649c:	23c7      	movs	r3, #199	; 0xc7
   1649e:	f004 fa15 	bl	1a8cc <printk>
   164a2:	4852      	ldr	r0, [pc, #328]	; (165ec <z_impl_k_mutex_unlock+0x160>)
   164a4:	f004 fa12 	bl	1a8cc <printk>
   164a8:	484e      	ldr	r0, [pc, #312]	; (165e4 <z_impl_k_mutex_unlock+0x158>)
   164aa:	21c7      	movs	r1, #199	; 0xc7
   164ac:	f004 fba7 	bl	1abfe <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   164b0:	68a3      	ldr	r3, [r4, #8]
   164b2:	2b00      	cmp	r3, #0
   164b4:	f000 808d 	beq.w	165d2 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   164b8:	4d4d      	ldr	r5, [pc, #308]	; (165f0 <z_impl_k_mutex_unlock+0x164>)
   164ba:	68aa      	ldr	r2, [r5, #8]
   164bc:	4293      	cmp	r3, r2
   164be:	f040 808b 	bne.w	165d8 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   164c2:	68e3      	ldr	r3, [r4, #12]
   164c4:	b94b      	cbnz	r3, 164da <z_impl_k_mutex_unlock+0x4e>
   164c6:	494b      	ldr	r1, [pc, #300]	; (165f4 <z_impl_k_mutex_unlock+0x168>)
   164c8:	4847      	ldr	r0, [pc, #284]	; (165e8 <z_impl_k_mutex_unlock+0x15c>)
   164ca:	4a46      	ldr	r2, [pc, #280]	; (165e4 <z_impl_k_mutex_unlock+0x158>)
   164cc:	23df      	movs	r3, #223	; 0xdf
   164ce:	f004 f9fd 	bl	1a8cc <printk>
   164d2:	4844      	ldr	r0, [pc, #272]	; (165e4 <z_impl_k_mutex_unlock+0x158>)
   164d4:	21df      	movs	r1, #223	; 0xdf
   164d6:	f004 fb92 	bl	1abfe <assert_post_action>
   164da:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   164de:	b163      	cbz	r3, 164fa <z_impl_k_mutex_unlock+0x6e>
   164e0:	493f      	ldr	r1, [pc, #252]	; (165e0 <z_impl_k_mutex_unlock+0x154>)
   164e2:	4a45      	ldr	r2, [pc, #276]	; (165f8 <z_impl_k_mutex_unlock+0x16c>)
   164e4:	4840      	ldr	r0, [pc, #256]	; (165e8 <z_impl_k_mutex_unlock+0x15c>)
   164e6:	23fd      	movs	r3, #253	; 0xfd
   164e8:	f004 f9f0 	bl	1a8cc <printk>
   164ec:	4843      	ldr	r0, [pc, #268]	; (165fc <z_impl_k_mutex_unlock+0x170>)
   164ee:	f004 f9ed 	bl	1a8cc <printk>
   164f2:	4841      	ldr	r0, [pc, #260]	; (165f8 <z_impl_k_mutex_unlock+0x16c>)
   164f4:	21fd      	movs	r1, #253	; 0xfd
   164f6:	f004 fb82 	bl	1abfe <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   164fa:	68ab      	ldr	r3, [r5, #8]
   164fc:	7bdb      	ldrb	r3, [r3, #15]
   164fe:	2b01      	cmp	r3, #1
   16500:	d10c      	bne.n	1651c <z_impl_k_mutex_unlock+0x90>
   16502:	493f      	ldr	r1, [pc, #252]	; (16600 <z_impl_k_mutex_unlock+0x174>)
   16504:	4a3c      	ldr	r2, [pc, #240]	; (165f8 <z_impl_k_mutex_unlock+0x16c>)
   16506:	4838      	ldr	r0, [pc, #224]	; (165e8 <z_impl_k_mutex_unlock+0x15c>)
   16508:	23fe      	movs	r3, #254	; 0xfe
   1650a:	f004 f9df 	bl	1a8cc <printk>
   1650e:	483b      	ldr	r0, [pc, #236]	; (165fc <z_impl_k_mutex_unlock+0x170>)
   16510:	f004 f9dc 	bl	1a8cc <printk>
   16514:	4838      	ldr	r0, [pc, #224]	; (165f8 <z_impl_k_mutex_unlock+0x16c>)
   16516:	21fe      	movs	r1, #254	; 0xfe
   16518:	f004 fb71 	bl	1abfe <assert_post_action>

	--_current->base.sched_locked;
   1651c:	68aa      	ldr	r2, [r5, #8]
   1651e:	7bd3      	ldrb	r3, [r2, #15]
   16520:	3b01      	subs	r3, #1
   16522:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   16524:	68e3      	ldr	r3, [r4, #12]
   16526:	2b01      	cmp	r3, #1
   16528:	d905      	bls.n	16536 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   1652a:	3b01      	subs	r3, #1
   1652c:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1652e:	f001 fb85 	bl	17c3c <k_sched_unlock>

	return 0;
   16532:	2000      	movs	r0, #0
}
   16534:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   16536:	f04f 0320 	mov.w	r3, #32
   1653a:	f3ef 8511 	mrs	r5, BASEPRI
   1653e:	f383 8812 	msr	BASEPRI_MAX, r3
   16542:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16546:	482f      	ldr	r0, [pc, #188]	; (16604 <z_impl_k_mutex_unlock+0x178>)
   16548:	f7ff fe4e 	bl	161e8 <z_spin_lock_valid>
   1654c:	b968      	cbnz	r0, 1656a <z_impl_k_mutex_unlock+0xde>
   1654e:	4a2e      	ldr	r2, [pc, #184]	; (16608 <z_impl_k_mutex_unlock+0x17c>)
   16550:	492e      	ldr	r1, [pc, #184]	; (1660c <z_impl_k_mutex_unlock+0x180>)
   16552:	4825      	ldr	r0, [pc, #148]	; (165e8 <z_impl_k_mutex_unlock+0x15c>)
   16554:	2381      	movs	r3, #129	; 0x81
   16556:	f004 f9b9 	bl	1a8cc <printk>
   1655a:	492a      	ldr	r1, [pc, #168]	; (16604 <z_impl_k_mutex_unlock+0x178>)
   1655c:	482c      	ldr	r0, [pc, #176]	; (16610 <z_impl_k_mutex_unlock+0x184>)
   1655e:	f004 f9b5 	bl	1a8cc <printk>
   16562:	4829      	ldr	r0, [pc, #164]	; (16608 <z_impl_k_mutex_unlock+0x17c>)
   16564:	2181      	movs	r1, #129	; 0x81
   16566:	f004 fb4a 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   1656a:	4826      	ldr	r0, [pc, #152]	; (16604 <z_impl_k_mutex_unlock+0x178>)
   1656c:	f7ff fe5a 	bl	16224 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   16570:	68a0      	ldr	r0, [r4, #8]
   16572:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   16574:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16578:	4299      	cmp	r1, r3
   1657a:	d001      	beq.n	16580 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   1657c:	f001 fa58 	bl	17a30 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   16580:	4620      	mov	r0, r4
   16582:	f001 fc23 	bl	17dcc <z_unpend_first_thread>
	mutex->owner = new_owner;
   16586:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   16588:	b158      	cbz	r0, 165a2 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   1658a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1658e:	6122      	str	r2, [r4, #16]
   16590:	2200      	movs	r2, #0
   16592:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   16594:	f001 f86a 	bl	1766c <z_ready_thread>
		z_reschedule(&lock, key);
   16598:	481a      	ldr	r0, [pc, #104]	; (16604 <z_impl_k_mutex_unlock+0x178>)
   1659a:	4629      	mov	r1, r5
   1659c:	f000 fdc6 	bl	1712c <z_reschedule>
   165a0:	e7c5      	b.n	1652e <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   165a2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   165a4:	4817      	ldr	r0, [pc, #92]	; (16604 <z_impl_k_mutex_unlock+0x178>)
   165a6:	f7ff fe2d 	bl	16204 <z_spin_unlock_valid>
   165aa:	b968      	cbnz	r0, 165c8 <z_impl_k_mutex_unlock+0x13c>
   165ac:	4a16      	ldr	r2, [pc, #88]	; (16608 <z_impl_k_mutex_unlock+0x17c>)
   165ae:	4919      	ldr	r1, [pc, #100]	; (16614 <z_impl_k_mutex_unlock+0x188>)
   165b0:	480d      	ldr	r0, [pc, #52]	; (165e8 <z_impl_k_mutex_unlock+0x15c>)
   165b2:	23ac      	movs	r3, #172	; 0xac
   165b4:	f004 f98a 	bl	1a8cc <printk>
   165b8:	4912      	ldr	r1, [pc, #72]	; (16604 <z_impl_k_mutex_unlock+0x178>)
   165ba:	4817      	ldr	r0, [pc, #92]	; (16618 <z_impl_k_mutex_unlock+0x18c>)
   165bc:	f004 f986 	bl	1a8cc <printk>
   165c0:	4811      	ldr	r0, [pc, #68]	; (16608 <z_impl_k_mutex_unlock+0x17c>)
   165c2:	21ac      	movs	r1, #172	; 0xac
   165c4:	f004 fb1b 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   165c8:	f385 8811 	msr	BASEPRI, r5
   165cc:	f3bf 8f6f 	isb	sy
   165d0:	e7ad      	b.n	1652e <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   165d2:	f06f 0015 	mvn.w	r0, #21
   165d6:	e7ad      	b.n	16534 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   165d8:	f04f 30ff 	mov.w	r0, #4294967295
   165dc:	e7aa      	b.n	16534 <z_impl_k_mutex_unlock+0xa8>
   165de:	bf00      	nop
   165e0:	00020148 	.word	0x00020148
   165e4:	000201f5 	.word	0x000201f5
   165e8:	0001d2dc 	.word	0x0001d2dc
   165ec:	00020217 	.word	0x00020217
   165f0:	200010e8 	.word	0x200010e8
   165f4:	0002023c 	.word	0x0002023c
   165f8:	00020253 	.word	0x00020253
   165fc:	0002027e 	.word	0x0002027e
   16600:	00020281 	.word	0x00020281
   16604:	20001110 	.word	0x20001110
   16608:	0001d83f 	.word	0x0001d83f
   1660c:	0001d891 	.word	0x0001d891
   16610:	0001d8a6 	.word	0x0001d8a6
   16614:	0001d865 	.word	0x0001d865
   16618:	0001d87c 	.word	0x0001d87c

0001661c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1661c:	b538      	push	{r3, r4, r5, lr}
   1661e:	4604      	mov	r4, r0
	__asm__ volatile(
   16620:	f04f 0320 	mov.w	r3, #32
   16624:	f3ef 8511 	mrs	r5, BASEPRI
   16628:	f383 8812 	msr	BASEPRI_MAX, r3
   1662c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16630:	4814      	ldr	r0, [pc, #80]	; (16684 <z_impl_k_sem_give+0x68>)
   16632:	f7ff fdd9 	bl	161e8 <z_spin_lock_valid>
   16636:	b968      	cbnz	r0, 16654 <z_impl_k_sem_give+0x38>
   16638:	4a13      	ldr	r2, [pc, #76]	; (16688 <z_impl_k_sem_give+0x6c>)
   1663a:	4914      	ldr	r1, [pc, #80]	; (1668c <z_impl_k_sem_give+0x70>)
   1663c:	4814      	ldr	r0, [pc, #80]	; (16690 <z_impl_k_sem_give+0x74>)
   1663e:	2381      	movs	r3, #129	; 0x81
   16640:	f004 f944 	bl	1a8cc <printk>
   16644:	490f      	ldr	r1, [pc, #60]	; (16684 <z_impl_k_sem_give+0x68>)
   16646:	4813      	ldr	r0, [pc, #76]	; (16694 <z_impl_k_sem_give+0x78>)
   16648:	f004 f940 	bl	1a8cc <printk>
   1664c:	480e      	ldr	r0, [pc, #56]	; (16688 <z_impl_k_sem_give+0x6c>)
   1664e:	2181      	movs	r1, #129	; 0x81
   16650:	f004 fad5 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   16654:	480b      	ldr	r0, [pc, #44]	; (16684 <z_impl_k_sem_give+0x68>)
   16656:	f7ff fde5 	bl	16224 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1665a:	4620      	mov	r0, r4
   1665c:	f001 fbb6 	bl	17dcc <z_unpend_first_thread>

	if (thread != NULL) {
   16660:	b148      	cbz	r0, 16676 <z_impl_k_sem_give+0x5a>
   16662:	2200      	movs	r2, #0
   16664:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   16666:	f001 f801 	bl	1766c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1666a:	4629      	mov	r1, r5
   1666c:	4805      	ldr	r0, [pc, #20]	; (16684 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1666e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   16672:	f000 bd5b 	b.w	1712c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   16676:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1667a:	429a      	cmp	r2, r3
   1667c:	bf18      	it	ne
   1667e:	3301      	addne	r3, #1
   16680:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   16682:	e7f2      	b.n	1666a <z_impl_k_sem_give+0x4e>
   16684:	20001114 	.word	0x20001114
   16688:	0001d83f 	.word	0x0001d83f
   1668c:	0001d891 	.word	0x0001d891
   16690:	0001d2dc 	.word	0x0001d2dc
   16694:	0001d8a6 	.word	0x0001d8a6

00016698 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   16698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1669a:	4604      	mov	r4, r0
   1669c:	4616      	mov	r6, r2
   1669e:	461f      	mov	r7, r3
   166a0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   166a4:	b17b      	cbz	r3, 166c6 <z_impl_k_sem_take+0x2e>
   166a6:	ea56 0307 	orrs.w	r3, r6, r7
   166aa:	d00c      	beq.n	166c6 <z_impl_k_sem_take+0x2e>
   166ac:	4935      	ldr	r1, [pc, #212]	; (16784 <z_impl_k_sem_take+0xec>)
   166ae:	4a36      	ldr	r2, [pc, #216]	; (16788 <z_impl_k_sem_take+0xf0>)
   166b0:	4836      	ldr	r0, [pc, #216]	; (1678c <z_impl_k_sem_take+0xf4>)
   166b2:	2379      	movs	r3, #121	; 0x79
   166b4:	f004 f90a 	bl	1a8cc <printk>
   166b8:	4835      	ldr	r0, [pc, #212]	; (16790 <z_impl_k_sem_take+0xf8>)
   166ba:	f004 f907 	bl	1a8cc <printk>
   166be:	4832      	ldr	r0, [pc, #200]	; (16788 <z_impl_k_sem_take+0xf0>)
   166c0:	2179      	movs	r1, #121	; 0x79
   166c2:	f004 fa9c 	bl	1abfe <assert_post_action>
   166c6:	f04f 0320 	mov.w	r3, #32
   166ca:	f3ef 8511 	mrs	r5, BASEPRI
   166ce:	f383 8812 	msr	BASEPRI_MAX, r3
   166d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   166d6:	482f      	ldr	r0, [pc, #188]	; (16794 <z_impl_k_sem_take+0xfc>)
   166d8:	f7ff fd86 	bl	161e8 <z_spin_lock_valid>
   166dc:	b968      	cbnz	r0, 166fa <z_impl_k_sem_take+0x62>
   166de:	4a2e      	ldr	r2, [pc, #184]	; (16798 <z_impl_k_sem_take+0x100>)
   166e0:	492e      	ldr	r1, [pc, #184]	; (1679c <z_impl_k_sem_take+0x104>)
   166e2:	482a      	ldr	r0, [pc, #168]	; (1678c <z_impl_k_sem_take+0xf4>)
   166e4:	2381      	movs	r3, #129	; 0x81
   166e6:	f004 f8f1 	bl	1a8cc <printk>
   166ea:	492a      	ldr	r1, [pc, #168]	; (16794 <z_impl_k_sem_take+0xfc>)
   166ec:	482c      	ldr	r0, [pc, #176]	; (167a0 <z_impl_k_sem_take+0x108>)
   166ee:	f004 f8ed 	bl	1a8cc <printk>
   166f2:	4829      	ldr	r0, [pc, #164]	; (16798 <z_impl_k_sem_take+0x100>)
   166f4:	2181      	movs	r1, #129	; 0x81
   166f6:	f004 fa82 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   166fa:	4826      	ldr	r0, [pc, #152]	; (16794 <z_impl_k_sem_take+0xfc>)
   166fc:	f7ff fd92 	bl	16224 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   16700:	68a3      	ldr	r3, [r4, #8]
   16702:	b1d3      	cbz	r3, 1673a <z_impl_k_sem_take+0xa2>
		sem->count--;
   16704:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16706:	4823      	ldr	r0, [pc, #140]	; (16794 <z_impl_k_sem_take+0xfc>)
   16708:	60a3      	str	r3, [r4, #8]
   1670a:	f7ff fd7b 	bl	16204 <z_spin_unlock_valid>
   1670e:	b968      	cbnz	r0, 1672c <z_impl_k_sem_take+0x94>
   16710:	4a21      	ldr	r2, [pc, #132]	; (16798 <z_impl_k_sem_take+0x100>)
   16712:	4924      	ldr	r1, [pc, #144]	; (167a4 <z_impl_k_sem_take+0x10c>)
   16714:	481d      	ldr	r0, [pc, #116]	; (1678c <z_impl_k_sem_take+0xf4>)
   16716:	23ac      	movs	r3, #172	; 0xac
   16718:	f004 f8d8 	bl	1a8cc <printk>
   1671c:	491d      	ldr	r1, [pc, #116]	; (16794 <z_impl_k_sem_take+0xfc>)
   1671e:	4822      	ldr	r0, [pc, #136]	; (167a8 <z_impl_k_sem_take+0x110>)
   16720:	f004 f8d4 	bl	1a8cc <printk>
   16724:	481c      	ldr	r0, [pc, #112]	; (16798 <z_impl_k_sem_take+0x100>)
   16726:	21ac      	movs	r1, #172	; 0xac
   16728:	f004 fa69 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   1672c:	f385 8811 	msr	BASEPRI, r5
   16730:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   16734:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   16736:	b003      	add	sp, #12
   16738:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1673a:	ea56 0307 	orrs.w	r3, r6, r7
   1673e:	d118      	bne.n	16772 <z_impl_k_sem_take+0xda>
   16740:	4814      	ldr	r0, [pc, #80]	; (16794 <z_impl_k_sem_take+0xfc>)
   16742:	f7ff fd5f 	bl	16204 <z_spin_unlock_valid>
   16746:	b968      	cbnz	r0, 16764 <z_impl_k_sem_take+0xcc>
   16748:	4a13      	ldr	r2, [pc, #76]	; (16798 <z_impl_k_sem_take+0x100>)
   1674a:	4916      	ldr	r1, [pc, #88]	; (167a4 <z_impl_k_sem_take+0x10c>)
   1674c:	480f      	ldr	r0, [pc, #60]	; (1678c <z_impl_k_sem_take+0xf4>)
   1674e:	23ac      	movs	r3, #172	; 0xac
   16750:	f004 f8bc 	bl	1a8cc <printk>
   16754:	490f      	ldr	r1, [pc, #60]	; (16794 <z_impl_k_sem_take+0xfc>)
   16756:	4814      	ldr	r0, [pc, #80]	; (167a8 <z_impl_k_sem_take+0x110>)
   16758:	f004 f8b8 	bl	1a8cc <printk>
   1675c:	480e      	ldr	r0, [pc, #56]	; (16798 <z_impl_k_sem_take+0x100>)
   1675e:	21ac      	movs	r1, #172	; 0xac
   16760:	f004 fa4d 	bl	1abfe <assert_post_action>
   16764:	f385 8811 	msr	BASEPRI, r5
   16768:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1676c:	f06f 000f 	mvn.w	r0, #15
   16770:	e7e1      	b.n	16736 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   16772:	e9cd 6700 	strd	r6, r7, [sp]
   16776:	4622      	mov	r2, r4
   16778:	4629      	mov	r1, r5
   1677a:	4806      	ldr	r0, [pc, #24]	; (16794 <z_impl_k_sem_take+0xfc>)
   1677c:	f001 f928 	bl	179d0 <z_pend_curr>
	return ret;
   16780:	e7d9      	b.n	16736 <z_impl_k_sem_take+0x9e>
   16782:	bf00      	nop
   16784:	000202d2 	.word	0x000202d2
   16788:	000202b2 	.word	0x000202b2
   1678c:	0001d2dc 	.word	0x0001d2dc
   16790:	0002027e 	.word	0x0002027e
   16794:	20001114 	.word	0x20001114
   16798:	0001d83f 	.word	0x0001d83f
   1679c:	0001d891 	.word	0x0001d891
   167a0:	0001d8a6 	.word	0x0001d8a6
   167a4:	0001d865 	.word	0x0001d865
   167a8:	0001d87c 	.word	0x0001d87c

000167ac <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   167ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   167b0:	4e7e      	ldr	r6, [pc, #504]	; (169ac <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   167b2:	4f7f      	ldr	r7, [pc, #508]	; (169b0 <work_queue_main+0x204>)
{
   167b4:	b085      	sub	sp, #20
   167b6:	4604      	mov	r4, r0
	__asm__ volatile(
   167b8:	f04f 0320 	mov.w	r3, #32
   167bc:	f3ef 8811 	mrs	r8, BASEPRI
   167c0:	f383 8812 	msr	BASEPRI_MAX, r3
   167c4:	f3bf 8f6f 	isb	sy
   167c8:	4630      	mov	r0, r6
   167ca:	f7ff fd0d 	bl	161e8 <z_spin_lock_valid>
   167ce:	b968      	cbnz	r0, 167ec <work_queue_main+0x40>
   167d0:	4a78      	ldr	r2, [pc, #480]	; (169b4 <work_queue_main+0x208>)
   167d2:	4979      	ldr	r1, [pc, #484]	; (169b8 <work_queue_main+0x20c>)
   167d4:	4879      	ldr	r0, [pc, #484]	; (169bc <work_queue_main+0x210>)
   167d6:	2381      	movs	r3, #129	; 0x81
   167d8:	f004 f878 	bl	1a8cc <printk>
   167dc:	4878      	ldr	r0, [pc, #480]	; (169c0 <work_queue_main+0x214>)
   167de:	4631      	mov	r1, r6
   167e0:	f004 f874 	bl	1a8cc <printk>
   167e4:	4873      	ldr	r0, [pc, #460]	; (169b4 <work_queue_main+0x208>)
   167e6:	2181      	movs	r1, #129	; 0x81
   167e8:	f004 fa09 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   167ec:	4630      	mov	r0, r6
   167ee:	f7ff fd19 	bl	16224 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   167f2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   167f6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   167fa:	b9ad      	cbnz	r5, 16828 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   167fc:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   16800:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   16802:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   16806:	f100 8092 	bmi.w	1692e <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1680a:	2300      	movs	r3, #0
   1680c:	9302      	str	r3, [sp, #8]
   1680e:	f04f 32ff 	mov.w	r2, #4294967295
   16812:	f04f 33ff 	mov.w	r3, #4294967295
   16816:	e9cd 2300 	strd	r2, r3, [sp]
   1681a:	4641      	mov	r1, r8
   1681c:	f104 0288 	add.w	r2, r4, #136	; 0x88
   16820:	4630      	mov	r0, r6
   16822:	f001 fddb 	bl	183dc <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   16826:	e7c7      	b.n	167b8 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16828:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   1682c:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   1682e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16832:	428d      	cmp	r5, r1
   16834:	d101      	bne.n	1683a <work_queue_main+0x8e>
	list->tail = node;
   16836:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1683a:	f043 0302 	orr.w	r3, r3, #2
   1683e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   16842:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   16844:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   16848:	f023 0304 	bic.w	r3, r3, #4
   1684c:	f043 0301 	orr.w	r3, r3, #1
   16850:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16852:	4630      	mov	r0, r6
   16854:	f7ff fcd6 	bl	16204 <z_spin_unlock_valid>
   16858:	b968      	cbnz	r0, 16876 <work_queue_main+0xca>
   1685a:	4a56      	ldr	r2, [pc, #344]	; (169b4 <work_queue_main+0x208>)
   1685c:	4959      	ldr	r1, [pc, #356]	; (169c4 <work_queue_main+0x218>)
   1685e:	4857      	ldr	r0, [pc, #348]	; (169bc <work_queue_main+0x210>)
   16860:	23ac      	movs	r3, #172	; 0xac
   16862:	f004 f833 	bl	1a8cc <printk>
   16866:	4858      	ldr	r0, [pc, #352]	; (169c8 <work_queue_main+0x21c>)
   16868:	4631      	mov	r1, r6
   1686a:	f004 f82f 	bl	1a8cc <printk>
   1686e:	4851      	ldr	r0, [pc, #324]	; (169b4 <work_queue_main+0x208>)
   16870:	21ac      	movs	r1, #172	; 0xac
   16872:	f004 f9c4 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   16876:	f388 8811 	msr	BASEPRI, r8
   1687a:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   1687e:	f1b9 0f00 	cmp.w	r9, #0
   16882:	d10b      	bne.n	1689c <work_queue_main+0xf0>
   16884:	4951      	ldr	r1, [pc, #324]	; (169cc <work_queue_main+0x220>)
   16886:	484d      	ldr	r0, [pc, #308]	; (169bc <work_queue_main+0x210>)
   16888:	4a51      	ldr	r2, [pc, #324]	; (169d0 <work_queue_main+0x224>)
   1688a:	f44f 7322 	mov.w	r3, #648	; 0x288
   1688e:	f004 f81d 	bl	1a8cc <printk>
   16892:	484f      	ldr	r0, [pc, #316]	; (169d0 <work_queue_main+0x224>)
   16894:	f44f 7122 	mov.w	r1, #648	; 0x288
   16898:	f004 f9b1 	bl	1abfe <assert_post_action>
		handler(work);
   1689c:	4628      	mov	r0, r5
   1689e:	47c8      	blx	r9
	__asm__ volatile(
   168a0:	f04f 0320 	mov.w	r3, #32
   168a4:	f3ef 8a11 	mrs	sl, BASEPRI
   168a8:	f383 8812 	msr	BASEPRI_MAX, r3
   168ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   168b0:	4630      	mov	r0, r6
   168b2:	f7ff fc99 	bl	161e8 <z_spin_lock_valid>
   168b6:	b968      	cbnz	r0, 168d4 <work_queue_main+0x128>
   168b8:	4a3e      	ldr	r2, [pc, #248]	; (169b4 <work_queue_main+0x208>)
   168ba:	493f      	ldr	r1, [pc, #252]	; (169b8 <work_queue_main+0x20c>)
   168bc:	483f      	ldr	r0, [pc, #252]	; (169bc <work_queue_main+0x210>)
   168be:	2381      	movs	r3, #129	; 0x81
   168c0:	f004 f804 	bl	1a8cc <printk>
   168c4:	483e      	ldr	r0, [pc, #248]	; (169c0 <work_queue_main+0x214>)
   168c6:	4631      	mov	r1, r6
   168c8:	f004 f800 	bl	1a8cc <printk>
   168cc:	4839      	ldr	r0, [pc, #228]	; (169b4 <work_queue_main+0x208>)
   168ce:	2181      	movs	r1, #129	; 0x81
   168d0:	f004 f995 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   168d4:	4630      	mov	r0, r6
   168d6:	f7ff fca5 	bl	16224 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   168da:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   168dc:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   168de:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   168e2:	d42e      	bmi.n	16942 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   168e4:	60ea      	str	r2, [r5, #12]
   168e6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   168ea:	f023 0302 	bic.w	r3, r3, #2
   168ee:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   168f2:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   168f4:	f3c3 2500 	ubfx	r5, r3, #8, #1
   168f8:	f7ff fc84 	bl	16204 <z_spin_unlock_valid>
   168fc:	b968      	cbnz	r0, 1691a <work_queue_main+0x16e>
   168fe:	4a2d      	ldr	r2, [pc, #180]	; (169b4 <work_queue_main+0x208>)
   16900:	4930      	ldr	r1, [pc, #192]	; (169c4 <work_queue_main+0x218>)
   16902:	482e      	ldr	r0, [pc, #184]	; (169bc <work_queue_main+0x210>)
   16904:	23ac      	movs	r3, #172	; 0xac
   16906:	f003 ffe1 	bl	1a8cc <printk>
   1690a:	482f      	ldr	r0, [pc, #188]	; (169c8 <work_queue_main+0x21c>)
   1690c:	4631      	mov	r1, r6
   1690e:	f003 ffdd 	bl	1a8cc <printk>
   16912:	4828      	ldr	r0, [pc, #160]	; (169b4 <work_queue_main+0x208>)
   16914:	21ac      	movs	r1, #172	; 0xac
   16916:	f004 f972 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   1691a:	f38a 8811 	msr	BASEPRI, sl
   1691e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   16922:	2d00      	cmp	r5, #0
   16924:	f47f af48 	bne.w	167b8 <work_queue_main+0xc>
	z_impl_k_yield();
   16928:	f001 faac 	bl	17e84 <z_impl_k_yield>
}
   1692c:	e744      	b.n	167b8 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1692e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   16932:	2200      	movs	r2, #0
   16934:	2101      	movs	r1, #1
   16936:	4628      	mov	r0, r5
   16938:	f001 fcf8 	bl	1832c <z_sched_wake>
   1693c:	2800      	cmp	r0, #0
   1693e:	d1f8      	bne.n	16932 <work_queue_main+0x186>
   16940:	e763      	b.n	1680a <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   16942:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   16944:	f023 0303 	bic.w	r3, r3, #3
   16948:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1694a:	2800      	cmp	r0, #0
   1694c:	d0cb      	beq.n	168e6 <work_queue_main+0x13a>
	return node->next;
   1694e:	6803      	ldr	r3, [r0, #0]
   16950:	2b00      	cmp	r3, #0
   16952:	bf38      	it	cc
   16954:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16956:	f04f 0900 	mov.w	r9, #0
   1695a:	4698      	mov	r8, r3
	parent->next = child;
   1695c:	46cb      	mov	fp, r9
		if (wc->work == work) {
   1695e:	6843      	ldr	r3, [r0, #4]
   16960:	429d      	cmp	r5, r3
   16962:	4602      	mov	r2, r0
   16964:	d10d      	bne.n	16982 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   16966:	6802      	ldr	r2, [r0, #0]
   16968:	f1b9 0f00 	cmp.w	r9, #0
   1696c:	d115      	bne.n	1699a <work_queue_main+0x1ee>
   1696e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   16970:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   16972:	4283      	cmp	r3, r0
   16974:	d100      	bne.n	16978 <work_queue_main+0x1cc>
	list->tail = node;
   16976:	607a      	str	r2, [r7, #4]
	parent->next = child;
   16978:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   1697c:	f7ff fe4e 	bl	1661c <z_impl_k_sem_give>
}
   16980:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   16982:	f1b8 0f00 	cmp.w	r8, #0
   16986:	d0ae      	beq.n	168e6 <work_queue_main+0x13a>
	return node->next;
   16988:	f8d8 3000 	ldr.w	r3, [r8]
   1698c:	2b00      	cmp	r3, #0
   1698e:	bf38      	it	cc
   16990:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16992:	4640      	mov	r0, r8
   16994:	4691      	mov	r9, r2
   16996:	4698      	mov	r8, r3
   16998:	e7e1      	b.n	1695e <work_queue_main+0x1b2>
	parent->next = child;
   1699a:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   1699e:	687b      	ldr	r3, [r7, #4]
   169a0:	4283      	cmp	r3, r0
	list->tail = node;
   169a2:	bf08      	it	eq
   169a4:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   169a8:	e7e6      	b.n	16978 <work_queue_main+0x1cc>
   169aa:	bf00      	nop
   169ac:	20001118 	.word	0x20001118
   169b0:	2000111c 	.word	0x2000111c
   169b4:	0001d83f 	.word	0x0001d83f
   169b8:	0001d891 	.word	0x0001d891
   169bc:	0001d2dc 	.word	0x0001d2dc
   169c0:	0001d8a6 	.word	0x0001d8a6
   169c4:	0001d865 	.word	0x0001d865
   169c8:	0001d87c 	.word	0x0001d87c
   169cc:	00020340 	.word	0x00020340
   169d0:	0002031f 	.word	0x0002031f

000169d4 <submit_to_queue_locked>:
{
   169d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   169d6:	68c3      	ldr	r3, [r0, #12]
   169d8:	079a      	lsls	r2, r3, #30
{
   169da:	4604      	mov	r4, r0
   169dc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   169de:	f3c3 0540 	ubfx	r5, r3, #1, #1
   169e2:	d42b      	bmi.n	16a3c <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   169e4:	075f      	lsls	r7, r3, #29
   169e6:	d42b      	bmi.n	16a40 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   169e8:	680a      	ldr	r2, [r1, #0]
   169ea:	b90a      	cbnz	r2, 169f0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   169ec:	6882      	ldr	r2, [r0, #8]
   169ee:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   169f0:	07d8      	lsls	r0, r3, #31
   169f2:	d528      	bpl.n	16a46 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   169f4:	68a3      	ldr	r3, [r4, #8]
   169f6:	b95b      	cbnz	r3, 16a10 <submit_to_queue_locked+0x3c>
   169f8:	4924      	ldr	r1, [pc, #144]	; (16a8c <submit_to_queue_locked+0xb8>)
   169fa:	4825      	ldr	r0, [pc, #148]	; (16a90 <submit_to_queue_locked+0xbc>)
   169fc:	4a25      	ldr	r2, [pc, #148]	; (16a94 <submit_to_queue_locked+0xc0>)
   169fe:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   16a02:	f003 ff63 	bl	1a8cc <printk>
   16a06:	4823      	ldr	r0, [pc, #140]	; (16a94 <submit_to_queue_locked+0xc0>)
   16a08:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   16a0c:	f004 f8f7 	bl	1abfe <assert_post_action>
			*queuep = work->queue;
   16a10:	68a3      	ldr	r3, [r4, #8]
   16a12:	6033      	str	r3, [r6, #0]
			ret = 2;
   16a14:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   16a16:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   16a18:	b38f      	cbz	r7, 16a7e <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   16a1a:	4b1f      	ldr	r3, [pc, #124]	; (16a98 <submit_to_queue_locked+0xc4>)
   16a1c:	689b      	ldr	r3, [r3, #8]
   16a1e:	42bb      	cmp	r3, r7
   16a20:	d113      	bne.n	16a4a <submit_to_queue_locked+0x76>
   16a22:	f004 ffa0 	bl	1b966 <k_is_in_isr>
   16a26:	f080 0001 	eor.w	r0, r0, #1
   16a2a:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   16a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   16a30:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   16a32:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   16a36:	d525      	bpl.n	16a84 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   16a38:	b14a      	cbz	r2, 16a4e <submit_to_queue_locked+0x7a>
   16a3a:	b950      	cbnz	r0, 16a52 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   16a3c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   16a40:	2300      	movs	r3, #0
   16a42:	6033      	str	r3, [r6, #0]
	return ret;
   16a44:	e015      	b.n	16a72 <submit_to_queue_locked+0x9e>
		ret = 1;
   16a46:	2501      	movs	r5, #1
   16a48:	e7e5      	b.n	16a16 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   16a4a:	2000      	movs	r0, #0
   16a4c:	e7ee      	b.n	16a2c <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   16a4e:	071b      	lsls	r3, r3, #28
   16a50:	d4f4      	bmi.n	16a3c <submit_to_queue_locked+0x68>
	parent->next = child;
   16a52:	2300      	movs	r3, #0
   16a54:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   16a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   16a5a:	b963      	cbnz	r3, 16a76 <submit_to_queue_locked+0xa2>
	list->head = node;
   16a5c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   16a60:	4638      	mov	r0, r7
   16a62:	f004 ffa7 	bl	1b9b4 <notify_queue_locked>
	*flagp |= BIT(bit);
   16a66:	68e3      	ldr	r3, [r4, #12]
   16a68:	f043 0304 	orr.w	r3, r3, #4
   16a6c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   16a6e:	6833      	ldr	r3, [r6, #0]
   16a70:	60a3      	str	r3, [r4, #8]
}
   16a72:	4628      	mov	r0, r5
   16a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   16a76:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16a78:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   16a7c:	e7f0      	b.n	16a60 <submit_to_queue_locked+0x8c>
		return -EINVAL;
   16a7e:	f06f 0515 	mvn.w	r5, #21
   16a82:	e7dd      	b.n	16a40 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   16a84:	f06f 0512 	mvn.w	r5, #18
   16a88:	e7da      	b.n	16a40 <submit_to_queue_locked+0x6c>
   16a8a:	bf00      	nop
   16a8c:	00020357 	.word	0x00020357
   16a90:	0001d2dc 	.word	0x0001d2dc
   16a94:	0002031f 	.word	0x0002031f
   16a98:	200010e8 	.word	0x200010e8

00016a9c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   16a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16a9e:	4604      	mov	r4, r0
	__asm__ volatile(
   16aa0:	f04f 0320 	mov.w	r3, #32
   16aa4:	f3ef 8511 	mrs	r5, BASEPRI
   16aa8:	f383 8812 	msr	BASEPRI_MAX, r3
   16aac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16ab0:	481e      	ldr	r0, [pc, #120]	; (16b2c <work_timeout+0x90>)
   16ab2:	f7ff fb99 	bl	161e8 <z_spin_lock_valid>
   16ab6:	b968      	cbnz	r0, 16ad4 <work_timeout+0x38>
   16ab8:	4a1d      	ldr	r2, [pc, #116]	; (16b30 <work_timeout+0x94>)
   16aba:	491e      	ldr	r1, [pc, #120]	; (16b34 <work_timeout+0x98>)
   16abc:	481e      	ldr	r0, [pc, #120]	; (16b38 <work_timeout+0x9c>)
   16abe:	2381      	movs	r3, #129	; 0x81
   16ac0:	f003 ff04 	bl	1a8cc <printk>
   16ac4:	4919      	ldr	r1, [pc, #100]	; (16b2c <work_timeout+0x90>)
   16ac6:	481d      	ldr	r0, [pc, #116]	; (16b3c <work_timeout+0xa0>)
   16ac8:	f003 ff00 	bl	1a8cc <printk>
   16acc:	4818      	ldr	r0, [pc, #96]	; (16b30 <work_timeout+0x94>)
   16ace:	2181      	movs	r1, #129	; 0x81
   16ad0:	f004 f895 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   16ad4:	4815      	ldr	r0, [pc, #84]	; (16b2c <work_timeout+0x90>)
   16ad6:	f7ff fba5 	bl	16224 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   16ada:	2300      	movs	r3, #0
   16adc:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   16ade:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   16ae2:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   16ae6:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   16ae8:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   16aec:	d506      	bpl.n	16afc <work_timeout+0x60>
		queue = dw->queue;
   16aee:	69a3      	ldr	r3, [r4, #24]
   16af0:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   16af2:	a901      	add	r1, sp, #4
   16af4:	f1a4 0010 	sub.w	r0, r4, #16
   16af8:	f7ff ff6c 	bl	169d4 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16afc:	480b      	ldr	r0, [pc, #44]	; (16b2c <work_timeout+0x90>)
   16afe:	f7ff fb81 	bl	16204 <z_spin_unlock_valid>
   16b02:	b968      	cbnz	r0, 16b20 <work_timeout+0x84>
   16b04:	4a0a      	ldr	r2, [pc, #40]	; (16b30 <work_timeout+0x94>)
   16b06:	490e      	ldr	r1, [pc, #56]	; (16b40 <work_timeout+0xa4>)
   16b08:	480b      	ldr	r0, [pc, #44]	; (16b38 <work_timeout+0x9c>)
   16b0a:	23ac      	movs	r3, #172	; 0xac
   16b0c:	f003 fede 	bl	1a8cc <printk>
   16b10:	4906      	ldr	r1, [pc, #24]	; (16b2c <work_timeout+0x90>)
   16b12:	480c      	ldr	r0, [pc, #48]	; (16b44 <work_timeout+0xa8>)
   16b14:	f003 feda 	bl	1a8cc <printk>
   16b18:	4805      	ldr	r0, [pc, #20]	; (16b30 <work_timeout+0x94>)
   16b1a:	21ac      	movs	r1, #172	; 0xac
   16b1c:	f004 f86f 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   16b20:	f385 8811 	msr	BASEPRI, r5
   16b24:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   16b28:	b003      	add	sp, #12
   16b2a:	bd30      	pop	{r4, r5, pc}
   16b2c:	20001118 	.word	0x20001118
   16b30:	0001d83f 	.word	0x0001d83f
   16b34:	0001d891 	.word	0x0001d891
   16b38:	0001d2dc 	.word	0x0001d2dc
   16b3c:	0001d8a6 	.word	0x0001d8a6
   16b40:	0001d865 	.word	0x0001d865
   16b44:	0001d87c 	.word	0x0001d87c

00016b48 <k_work_init>:
{
   16b48:	b538      	push	{r3, r4, r5, lr}
   16b4a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   16b4c:	4604      	mov	r4, r0
   16b4e:	b948      	cbnz	r0, 16b64 <k_work_init+0x1c>
   16b50:	490d      	ldr	r1, [pc, #52]	; (16b88 <k_work_init+0x40>)
   16b52:	480e      	ldr	r0, [pc, #56]	; (16b8c <k_work_init+0x44>)
   16b54:	4a0e      	ldr	r2, [pc, #56]	; (16b90 <k_work_init+0x48>)
   16b56:	2389      	movs	r3, #137	; 0x89
   16b58:	f003 feb8 	bl	1a8cc <printk>
   16b5c:	480c      	ldr	r0, [pc, #48]	; (16b90 <k_work_init+0x48>)
   16b5e:	2189      	movs	r1, #137	; 0x89
   16b60:	f004 f84d 	bl	1abfe <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   16b64:	b94d      	cbnz	r5, 16b7a <k_work_init+0x32>
   16b66:	490b      	ldr	r1, [pc, #44]	; (16b94 <k_work_init+0x4c>)
   16b68:	4808      	ldr	r0, [pc, #32]	; (16b8c <k_work_init+0x44>)
   16b6a:	4a09      	ldr	r2, [pc, #36]	; (16b90 <k_work_init+0x48>)
   16b6c:	238a      	movs	r3, #138	; 0x8a
   16b6e:	f003 fead 	bl	1a8cc <printk>
   16b72:	4807      	ldr	r0, [pc, #28]	; (16b90 <k_work_init+0x48>)
   16b74:	218a      	movs	r1, #138	; 0x8a
   16b76:	f004 f842 	bl	1abfe <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   16b7a:	2210      	movs	r2, #16
   16b7c:	2100      	movs	r1, #0
   16b7e:	4620      	mov	r0, r4
   16b80:	f004 fffc 	bl	1bb7c <memset>
   16b84:	6065      	str	r5, [r4, #4]
}
   16b86:	bd38      	pop	{r3, r4, r5, pc}
   16b88:	000203b3 	.word	0x000203b3
   16b8c:	0001d2dc 	.word	0x0001d2dc
   16b90:	0002031f 	.word	0x0002031f
   16b94:	00020340 	.word	0x00020340

00016b98 <k_work_submit_to_queue>:
{
   16b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   16b9a:	460c      	mov	r4, r1
{
   16b9c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   16b9e:	b959      	cbnz	r1, 16bb8 <k_work_submit_to_queue+0x20>
   16ba0:	4926      	ldr	r1, [pc, #152]	; (16c3c <k_work_submit_to_queue+0xa4>)
   16ba2:	4827      	ldr	r0, [pc, #156]	; (16c40 <k_work_submit_to_queue+0xa8>)
   16ba4:	4a27      	ldr	r2, [pc, #156]	; (16c44 <k_work_submit_to_queue+0xac>)
   16ba6:	f240 1369 	movw	r3, #361	; 0x169
   16baa:	f003 fe8f 	bl	1a8cc <printk>
   16bae:	4825      	ldr	r0, [pc, #148]	; (16c44 <k_work_submit_to_queue+0xac>)
   16bb0:	f240 1169 	movw	r1, #361	; 0x169
   16bb4:	f004 f823 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   16bb8:	f04f 0320 	mov.w	r3, #32
   16bbc:	f3ef 8511 	mrs	r5, BASEPRI
   16bc0:	f383 8812 	msr	BASEPRI_MAX, r3
   16bc4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16bc8:	481f      	ldr	r0, [pc, #124]	; (16c48 <k_work_submit_to_queue+0xb0>)
   16bca:	f7ff fb0d 	bl	161e8 <z_spin_lock_valid>
   16bce:	b968      	cbnz	r0, 16bec <k_work_submit_to_queue+0x54>
   16bd0:	4a1e      	ldr	r2, [pc, #120]	; (16c4c <k_work_submit_to_queue+0xb4>)
   16bd2:	491f      	ldr	r1, [pc, #124]	; (16c50 <k_work_submit_to_queue+0xb8>)
   16bd4:	481a      	ldr	r0, [pc, #104]	; (16c40 <k_work_submit_to_queue+0xa8>)
   16bd6:	2381      	movs	r3, #129	; 0x81
   16bd8:	f003 fe78 	bl	1a8cc <printk>
   16bdc:	491a      	ldr	r1, [pc, #104]	; (16c48 <k_work_submit_to_queue+0xb0>)
   16bde:	481d      	ldr	r0, [pc, #116]	; (16c54 <k_work_submit_to_queue+0xbc>)
   16be0:	f003 fe74 	bl	1a8cc <printk>
   16be4:	4819      	ldr	r0, [pc, #100]	; (16c4c <k_work_submit_to_queue+0xb4>)
   16be6:	2181      	movs	r1, #129	; 0x81
   16be8:	f004 f809 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   16bec:	4816      	ldr	r0, [pc, #88]	; (16c48 <k_work_submit_to_queue+0xb0>)
   16bee:	f7ff fb19 	bl	16224 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   16bf2:	4620      	mov	r0, r4
   16bf4:	a901      	add	r1, sp, #4
   16bf6:	f7ff feed 	bl	169d4 <submit_to_queue_locked>
   16bfa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16bfc:	4812      	ldr	r0, [pc, #72]	; (16c48 <k_work_submit_to_queue+0xb0>)
   16bfe:	f7ff fb01 	bl	16204 <z_spin_unlock_valid>
   16c02:	b968      	cbnz	r0, 16c20 <k_work_submit_to_queue+0x88>
   16c04:	4a11      	ldr	r2, [pc, #68]	; (16c4c <k_work_submit_to_queue+0xb4>)
   16c06:	4914      	ldr	r1, [pc, #80]	; (16c58 <k_work_submit_to_queue+0xc0>)
   16c08:	480d      	ldr	r0, [pc, #52]	; (16c40 <k_work_submit_to_queue+0xa8>)
   16c0a:	23ac      	movs	r3, #172	; 0xac
   16c0c:	f003 fe5e 	bl	1a8cc <printk>
   16c10:	490d      	ldr	r1, [pc, #52]	; (16c48 <k_work_submit_to_queue+0xb0>)
   16c12:	4812      	ldr	r0, [pc, #72]	; (16c5c <k_work_submit_to_queue+0xc4>)
   16c14:	f003 fe5a 	bl	1a8cc <printk>
   16c18:	480c      	ldr	r0, [pc, #48]	; (16c4c <k_work_submit_to_queue+0xb4>)
   16c1a:	21ac      	movs	r1, #172	; 0xac
   16c1c:	f003 ffef 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   16c20:	f385 8811 	msr	BASEPRI, r5
   16c24:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   16c28:	2c00      	cmp	r4, #0
   16c2a:	dd04      	ble.n	16c36 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   16c2c:	f001 faba 	bl	181a4 <z_impl_k_is_preempt_thread>
   16c30:	b108      	cbz	r0, 16c36 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   16c32:	f001 f927 	bl	17e84 <z_impl_k_yield>
}
   16c36:	4620      	mov	r0, r4
   16c38:	b003      	add	sp, #12
   16c3a:	bd30      	pop	{r4, r5, pc}
   16c3c:	000203b3 	.word	0x000203b3
   16c40:	0001d2dc 	.word	0x0001d2dc
   16c44:	0002031f 	.word	0x0002031f
   16c48:	20001118 	.word	0x20001118
   16c4c:	0001d83f 	.word	0x0001d83f
   16c50:	0001d891 	.word	0x0001d891
   16c54:	0001d8a6 	.word	0x0001d8a6
   16c58:	0001d865 	.word	0x0001d865
   16c5c:	0001d87c 	.word	0x0001d87c

00016c60 <k_work_submit>:
{
   16c60:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   16c62:	4801      	ldr	r0, [pc, #4]	; (16c68 <k_work_submit+0x8>)
   16c64:	f7ff bf98 	b.w	16b98 <k_work_submit_to_queue>
   16c68:	20000738 	.word	0x20000738

00016c6c <k_work_queue_start>:
{
   16c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c70:	b088      	sub	sp, #32
   16c72:	460e      	mov	r6, r1
   16c74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   16c76:	4617      	mov	r7, r2
   16c78:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   16c7a:	4604      	mov	r4, r0
   16c7c:	b958      	cbnz	r0, 16c96 <k_work_queue_start+0x2a>
   16c7e:	492e      	ldr	r1, [pc, #184]	; (16d38 <k_work_queue_start+0xcc>)
   16c80:	482e      	ldr	r0, [pc, #184]	; (16d3c <k_work_queue_start+0xd0>)
   16c82:	4a2f      	ldr	r2, [pc, #188]	; (16d40 <k_work_queue_start+0xd4>)
   16c84:	f240 23b5 	movw	r3, #693	; 0x2b5
   16c88:	f003 fe20 	bl	1a8cc <printk>
   16c8c:	482c      	ldr	r0, [pc, #176]	; (16d40 <k_work_queue_start+0xd4>)
   16c8e:	f240 21b5 	movw	r1, #693	; 0x2b5
   16c92:	f003 ffb4 	bl	1abfe <assert_post_action>
	__ASSERT_NO_MSG(stack);
   16c96:	b95e      	cbnz	r6, 16cb0 <k_work_queue_start+0x44>
   16c98:	492a      	ldr	r1, [pc, #168]	; (16d44 <k_work_queue_start+0xd8>)
   16c9a:	4828      	ldr	r0, [pc, #160]	; (16d3c <k_work_queue_start+0xd0>)
   16c9c:	4a28      	ldr	r2, [pc, #160]	; (16d40 <k_work_queue_start+0xd4>)
   16c9e:	f240 23b6 	movw	r3, #694	; 0x2b6
   16ca2:	f003 fe13 	bl	1a8cc <printk>
   16ca6:	4826      	ldr	r0, [pc, #152]	; (16d40 <k_work_queue_start+0xd4>)
   16ca8:	f240 21b6 	movw	r1, #694	; 0x2b6
   16cac:	f003 ffa7 	bl	1abfe <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   16cb0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   16cb4:	07db      	lsls	r3, r3, #31
   16cb6:	d50b      	bpl.n	16cd0 <k_work_queue_start+0x64>
   16cb8:	4923      	ldr	r1, [pc, #140]	; (16d48 <k_work_queue_start+0xdc>)
   16cba:	4820      	ldr	r0, [pc, #128]	; (16d3c <k_work_queue_start+0xd0>)
   16cbc:	4a20      	ldr	r2, [pc, #128]	; (16d40 <k_work_queue_start+0xd4>)
   16cbe:	f240 23b7 	movw	r3, #695	; 0x2b7
   16cc2:	f003 fe03 	bl	1a8cc <printk>
   16cc6:	481e      	ldr	r0, [pc, #120]	; (16d40 <k_work_queue_start+0xd4>)
   16cc8:	f240 21b7 	movw	r1, #695	; 0x2b7
   16ccc:	f003 ff97 	bl	1abfe <assert_post_action>
	list->head = NULL;
   16cd0:	2300      	movs	r3, #0
	list->tail = NULL;
   16cd2:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   16cd6:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   16cda:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   16cde:	f104 0390 	add.w	r3, r4, #144	; 0x90
   16ce2:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   16ce6:	b32d      	cbz	r5, 16d34 <k_work_queue_start+0xc8>
   16ce8:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   16cea:	2b00      	cmp	r3, #0
   16cec:	f240 1101 	movw	r1, #257	; 0x101
   16cf0:	bf08      	it	eq
   16cf2:	2101      	moveq	r1, #1
	*flagp = flags;
   16cf4:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16cf8:	f04f 32ff 	mov.w	r2, #4294967295
   16cfc:	f04f 33ff 	mov.w	r3, #4294967295
   16d00:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16d04:	2200      	movs	r2, #0
   16d06:	e9cd 8203 	strd	r8, r2, [sp, #12]
   16d0a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   16d0e:	4b0f      	ldr	r3, [pc, #60]	; (16d4c <k_work_queue_start+0xe0>)
   16d10:	9400      	str	r4, [sp, #0]
   16d12:	463a      	mov	r2, r7
   16d14:	4631      	mov	r1, r6
   16d16:	4620      	mov	r0, r4
   16d18:	f7ff f988 	bl	1602c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   16d1c:	b125      	cbz	r5, 16d28 <k_work_queue_start+0xbc>
   16d1e:	6829      	ldr	r1, [r5, #0]
   16d20:	b111      	cbz	r1, 16d28 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   16d22:	4620      	mov	r0, r4
   16d24:	f004 fe25 	bl	1b972 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   16d28:	4620      	mov	r0, r4
}
   16d2a:	b008      	add	sp, #32
   16d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16d30:	f004 be24 	b.w	1b97c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   16d34:	2101      	movs	r1, #1
   16d36:	e7dd      	b.n	16cf4 <k_work_queue_start+0x88>
   16d38:	00020372 	.word	0x00020372
   16d3c:	0001d2dc 	.word	0x0001d2dc
   16d40:	0002031f 	.word	0x0002031f
   16d44:	00020378 	.word	0x00020378
   16d48:	0002037e 	.word	0x0002037e
   16d4c:	000167ad 	.word	0x000167ad

00016d50 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   16d50:	b538      	push	{r3, r4, r5, lr}
   16d52:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   16d54:	4604      	mov	r4, r0
   16d56:	b958      	cbnz	r0, 16d70 <k_work_init_delayable+0x20>
   16d58:	4911      	ldr	r1, [pc, #68]	; (16da0 <k_work_init_delayable+0x50>)
   16d5a:	4812      	ldr	r0, [pc, #72]	; (16da4 <k_work_init_delayable+0x54>)
   16d5c:	4a12      	ldr	r2, [pc, #72]	; (16da8 <k_work_init_delayable+0x58>)
   16d5e:	f240 332d 	movw	r3, #813	; 0x32d
   16d62:	f003 fdb3 	bl	1a8cc <printk>
   16d66:	4810      	ldr	r0, [pc, #64]	; (16da8 <k_work_init_delayable+0x58>)
   16d68:	f240 312d 	movw	r1, #813	; 0x32d
   16d6c:	f003 ff47 	bl	1abfe <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   16d70:	b95d      	cbnz	r5, 16d8a <k_work_init_delayable+0x3a>
   16d72:	490e      	ldr	r1, [pc, #56]	; (16dac <k_work_init_delayable+0x5c>)
   16d74:	480b      	ldr	r0, [pc, #44]	; (16da4 <k_work_init_delayable+0x54>)
   16d76:	4a0c      	ldr	r2, [pc, #48]	; (16da8 <k_work_init_delayable+0x58>)
   16d78:	f240 332e 	movw	r3, #814	; 0x32e
   16d7c:	f003 fda6 	bl	1a8cc <printk>
   16d80:	4809      	ldr	r0, [pc, #36]	; (16da8 <k_work_init_delayable+0x58>)
   16d82:	f240 312e 	movw	r1, #814	; 0x32e
   16d86:	f003 ff3a 	bl	1abfe <assert_post_action>

	*dwork = (struct k_work_delayable){
   16d8a:	2230      	movs	r2, #48	; 0x30
   16d8c:	2100      	movs	r1, #0
   16d8e:	4620      	mov	r0, r4
   16d90:	f004 fef4 	bl	1bb7c <memset>
   16d94:	f44f 7380 	mov.w	r3, #256	; 0x100
   16d98:	6065      	str	r5, [r4, #4]
   16d9a:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   16d9c:	bd38      	pop	{r3, r4, r5, pc}
   16d9e:	bf00      	nop
   16da0:	000203b2 	.word	0x000203b2
   16da4:	0001d2dc 	.word	0x0001d2dc
   16da8:	0002031f 	.word	0x0002031f
   16dac:	00020340 	.word	0x00020340

00016db0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   16db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16db2:	4616      	mov	r6, r2
   16db4:	9001      	str	r0, [sp, #4]
   16db6:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   16db8:	460c      	mov	r4, r1
   16dba:	b959      	cbnz	r1, 16dd4 <k_work_schedule_for_queue+0x24>
   16dbc:	492e      	ldr	r1, [pc, #184]	; (16e78 <k_work_schedule_for_queue+0xc8>)
   16dbe:	482f      	ldr	r0, [pc, #188]	; (16e7c <k_work_schedule_for_queue+0xcc>)
   16dc0:	4a2f      	ldr	r2, [pc, #188]	; (16e80 <k_work_schedule_for_queue+0xd0>)
   16dc2:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   16dc6:	f003 fd81 	bl	1a8cc <printk>
   16dca:	482d      	ldr	r0, [pc, #180]	; (16e80 <k_work_schedule_for_queue+0xd0>)
   16dcc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   16dd0:	f003 ff15 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   16dd4:	f04f 0320 	mov.w	r3, #32
   16dd8:	f3ef 8511 	mrs	r5, BASEPRI
   16ddc:	f383 8812 	msr	BASEPRI_MAX, r3
   16de0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16de4:	4827      	ldr	r0, [pc, #156]	; (16e84 <k_work_schedule_for_queue+0xd4>)
   16de6:	f7ff f9ff 	bl	161e8 <z_spin_lock_valid>
   16dea:	b968      	cbnz	r0, 16e08 <k_work_schedule_for_queue+0x58>
   16dec:	4a26      	ldr	r2, [pc, #152]	; (16e88 <k_work_schedule_for_queue+0xd8>)
   16dee:	4927      	ldr	r1, [pc, #156]	; (16e8c <k_work_schedule_for_queue+0xdc>)
   16df0:	4822      	ldr	r0, [pc, #136]	; (16e7c <k_work_schedule_for_queue+0xcc>)
   16df2:	2381      	movs	r3, #129	; 0x81
   16df4:	f003 fd6a 	bl	1a8cc <printk>
   16df8:	4922      	ldr	r1, [pc, #136]	; (16e84 <k_work_schedule_for_queue+0xd4>)
   16dfa:	4825      	ldr	r0, [pc, #148]	; (16e90 <k_work_schedule_for_queue+0xe0>)
   16dfc:	f003 fd66 	bl	1a8cc <printk>
   16e00:	4821      	ldr	r0, [pc, #132]	; (16e88 <k_work_schedule_for_queue+0xd8>)
   16e02:	2181      	movs	r1, #129	; 0x81
   16e04:	f003 fefb 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   16e08:	481e      	ldr	r0, [pc, #120]	; (16e84 <k_work_schedule_for_queue+0xd4>)
   16e0a:	f7ff fa0b 	bl	16224 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   16e0e:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   16e10:	f013 0f0e 	tst.w	r3, #14
   16e14:	d12e      	bne.n	16e74 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16e16:	ea56 0207 	orrs.w	r2, r6, r7
   16e1a:	d11d      	bne.n	16e58 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   16e1c:	4620      	mov	r0, r4
   16e1e:	a901      	add	r1, sp, #4
   16e20:	f7ff fdd8 	bl	169d4 <submit_to_queue_locked>
   16e24:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16e26:	4817      	ldr	r0, [pc, #92]	; (16e84 <k_work_schedule_for_queue+0xd4>)
   16e28:	f7ff f9ec 	bl	16204 <z_spin_unlock_valid>
   16e2c:	b968      	cbnz	r0, 16e4a <k_work_schedule_for_queue+0x9a>
   16e2e:	4a16      	ldr	r2, [pc, #88]	; (16e88 <k_work_schedule_for_queue+0xd8>)
   16e30:	4918      	ldr	r1, [pc, #96]	; (16e94 <k_work_schedule_for_queue+0xe4>)
   16e32:	4812      	ldr	r0, [pc, #72]	; (16e7c <k_work_schedule_for_queue+0xcc>)
   16e34:	23ac      	movs	r3, #172	; 0xac
   16e36:	f003 fd49 	bl	1a8cc <printk>
   16e3a:	4912      	ldr	r1, [pc, #72]	; (16e84 <k_work_schedule_for_queue+0xd4>)
   16e3c:	4816      	ldr	r0, [pc, #88]	; (16e98 <k_work_schedule_for_queue+0xe8>)
   16e3e:	f003 fd45 	bl	1a8cc <printk>
   16e42:	4811      	ldr	r0, [pc, #68]	; (16e88 <k_work_schedule_for_queue+0xd8>)
   16e44:	21ac      	movs	r1, #172	; 0xac
   16e46:	f003 feda 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   16e4a:	f385 8811 	msr	BASEPRI, r5
   16e4e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   16e52:	4620      	mov	r0, r4
   16e54:	b003      	add	sp, #12
   16e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   16e58:	f043 0308 	orr.w	r3, r3, #8
   16e5c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   16e5e:	9b01      	ldr	r3, [sp, #4]
   16e60:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   16e62:	f104 0010 	add.w	r0, r4, #16
   16e66:	490d      	ldr	r1, [pc, #52]	; (16e9c <k_work_schedule_for_queue+0xec>)
   16e68:	4632      	mov	r2, r6
   16e6a:	463b      	mov	r3, r7
   16e6c:	f001 fb32 	bl	184d4 <z_add_timeout>
	return ret;
   16e70:	2401      	movs	r4, #1
   16e72:	e7d8      	b.n	16e26 <k_work_schedule_for_queue+0x76>
	int ret = 0;
   16e74:	2400      	movs	r4, #0
   16e76:	e7d6      	b.n	16e26 <k_work_schedule_for_queue+0x76>
   16e78:	000203b2 	.word	0x000203b2
   16e7c:	0001d2dc 	.word	0x0001d2dc
   16e80:	0002031f 	.word	0x0002031f
   16e84:	20001118 	.word	0x20001118
   16e88:	0001d83f 	.word	0x0001d83f
   16e8c:	0001d891 	.word	0x0001d891
   16e90:	0001d8a6 	.word	0x0001d8a6
   16e94:	0001d865 	.word	0x0001d865
   16e98:	0001d87c 	.word	0x0001d87c
   16e9c:	00016a9d 	.word	0x00016a9d

00016ea0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   16ea0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   16ea2:	4801      	ldr	r0, [pc, #4]	; (16ea8 <k_work_schedule+0x8>)
   16ea4:	f7ff bf84 	b.w	16db0 <k_work_schedule_for_queue>
   16ea8:	20000738 	.word	0x20000738

00016eac <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   16eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16eae:	4616      	mov	r6, r2
   16eb0:	9001      	str	r0, [sp, #4]
   16eb2:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   16eb4:	460c      	mov	r4, r1
   16eb6:	b959      	cbnz	r1, 16ed0 <k_work_reschedule_for_queue+0x24>
   16eb8:	492d      	ldr	r1, [pc, #180]	; (16f70 <k_work_reschedule_for_queue+0xc4>)
   16eba:	482e      	ldr	r0, [pc, #184]	; (16f74 <k_work_reschedule_for_queue+0xc8>)
   16ebc:	4a2e      	ldr	r2, [pc, #184]	; (16f78 <k_work_reschedule_for_queue+0xcc>)
   16ebe:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   16ec2:	f003 fd03 	bl	1a8cc <printk>
   16ec6:	482c      	ldr	r0, [pc, #176]	; (16f78 <k_work_reschedule_for_queue+0xcc>)
   16ec8:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   16ecc:	f003 fe97 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   16ed0:	f04f 0320 	mov.w	r3, #32
   16ed4:	f3ef 8511 	mrs	r5, BASEPRI
   16ed8:	f383 8812 	msr	BASEPRI_MAX, r3
   16edc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16ee0:	4826      	ldr	r0, [pc, #152]	; (16f7c <k_work_reschedule_for_queue+0xd0>)
   16ee2:	f7ff f981 	bl	161e8 <z_spin_lock_valid>
   16ee6:	b968      	cbnz	r0, 16f04 <k_work_reschedule_for_queue+0x58>
   16ee8:	4a25      	ldr	r2, [pc, #148]	; (16f80 <k_work_reschedule_for_queue+0xd4>)
   16eea:	4926      	ldr	r1, [pc, #152]	; (16f84 <k_work_reschedule_for_queue+0xd8>)
   16eec:	4821      	ldr	r0, [pc, #132]	; (16f74 <k_work_reschedule_for_queue+0xc8>)
   16eee:	2381      	movs	r3, #129	; 0x81
   16ef0:	f003 fcec 	bl	1a8cc <printk>
   16ef4:	4921      	ldr	r1, [pc, #132]	; (16f7c <k_work_reschedule_for_queue+0xd0>)
   16ef6:	4824      	ldr	r0, [pc, #144]	; (16f88 <k_work_reschedule_for_queue+0xdc>)
   16ef8:	f003 fce8 	bl	1a8cc <printk>
   16efc:	4820      	ldr	r0, [pc, #128]	; (16f80 <k_work_reschedule_for_queue+0xd4>)
   16efe:	2181      	movs	r1, #129	; 0x81
   16f00:	f003 fe7d 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   16f04:	481d      	ldr	r0, [pc, #116]	; (16f7c <k_work_reschedule_for_queue+0xd0>)
   16f06:	f7ff f98d 	bl	16224 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   16f0a:	4620      	mov	r0, r4
   16f0c:	f004 fd59 	bl	1b9c2 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16f10:	ea56 0307 	orrs.w	r3, r6, r7
   16f14:	d11d      	bne.n	16f52 <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   16f16:	4620      	mov	r0, r4
   16f18:	a901      	add	r1, sp, #4
   16f1a:	f7ff fd5b 	bl	169d4 <submit_to_queue_locked>
   16f1e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16f20:	4816      	ldr	r0, [pc, #88]	; (16f7c <k_work_reschedule_for_queue+0xd0>)
   16f22:	f7ff f96f 	bl	16204 <z_spin_unlock_valid>
   16f26:	b968      	cbnz	r0, 16f44 <k_work_reschedule_for_queue+0x98>
   16f28:	4a15      	ldr	r2, [pc, #84]	; (16f80 <k_work_reschedule_for_queue+0xd4>)
   16f2a:	4918      	ldr	r1, [pc, #96]	; (16f8c <k_work_reschedule_for_queue+0xe0>)
   16f2c:	4811      	ldr	r0, [pc, #68]	; (16f74 <k_work_reschedule_for_queue+0xc8>)
   16f2e:	23ac      	movs	r3, #172	; 0xac
   16f30:	f003 fccc 	bl	1a8cc <printk>
   16f34:	4911      	ldr	r1, [pc, #68]	; (16f7c <k_work_reschedule_for_queue+0xd0>)
   16f36:	4816      	ldr	r0, [pc, #88]	; (16f90 <k_work_reschedule_for_queue+0xe4>)
   16f38:	f003 fcc8 	bl	1a8cc <printk>
   16f3c:	4810      	ldr	r0, [pc, #64]	; (16f80 <k_work_reschedule_for_queue+0xd4>)
   16f3e:	21ac      	movs	r1, #172	; 0xac
   16f40:	f003 fe5d 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   16f44:	f385 8811 	msr	BASEPRI, r5
   16f48:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   16f4c:	4620      	mov	r0, r4
   16f4e:	b003      	add	sp, #12
   16f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   16f52:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   16f54:	490f      	ldr	r1, [pc, #60]	; (16f94 <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
   16f56:	f043 0308 	orr.w	r3, r3, #8
   16f5a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   16f5c:	9b01      	ldr	r3, [sp, #4]
   16f5e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   16f60:	f104 0010 	add.w	r0, r4, #16
   16f64:	4632      	mov	r2, r6
   16f66:	463b      	mov	r3, r7
   16f68:	f001 fab4 	bl	184d4 <z_add_timeout>
	return ret;
   16f6c:	2401      	movs	r4, #1
   16f6e:	e7d7      	b.n	16f20 <k_work_reschedule_for_queue+0x74>
   16f70:	000203b2 	.word	0x000203b2
   16f74:	0001d2dc 	.word	0x0001d2dc
   16f78:	0002031f 	.word	0x0002031f
   16f7c:	20001118 	.word	0x20001118
   16f80:	0001d83f 	.word	0x0001d83f
   16f84:	0001d891 	.word	0x0001d891
   16f88:	0001d8a6 	.word	0x0001d8a6
   16f8c:	0001d865 	.word	0x0001d865
   16f90:	0001d87c 	.word	0x0001d87c
   16f94:	00016a9d 	.word	0x00016a9d

00016f98 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   16f98:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   16f9a:	4801      	ldr	r0, [pc, #4]	; (16fa0 <k_work_reschedule+0x8>)
   16f9c:	f7ff bf86 	b.w	16eac <k_work_reschedule_for_queue>
   16fa0:	20000738 	.word	0x20000738

00016fa4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   16fa4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   16fa6:	4c08      	ldr	r4, [pc, #32]	; (16fc8 <z_reset_time_slice+0x24>)
   16fa8:	6823      	ldr	r3, [r4, #0]
   16faa:	b15b      	cbz	r3, 16fc4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   16fac:	f7fc fd02 	bl	139b4 <sys_clock_elapsed>
   16fb0:	4603      	mov	r3, r0
   16fb2:	6820      	ldr	r0, [r4, #0]
   16fb4:	4a05      	ldr	r2, [pc, #20]	; (16fcc <z_reset_time_slice+0x28>)
   16fb6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   16fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   16fbc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   16fbe:	2100      	movs	r1, #0
   16fc0:	f001 bbf2 	b.w	187a8 <z_set_timeout_expiry>
}
   16fc4:	bd10      	pop	{r4, pc}
   16fc6:	bf00      	nop
   16fc8:	20001130 	.word	0x20001130
   16fcc:	200010e8 	.word	0x200010e8

00016fd0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   16fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16fd2:	4604      	mov	r4, r0
   16fd4:	460d      	mov	r5, r1
	__asm__ volatile(
   16fd6:	f04f 0320 	mov.w	r3, #32
   16fda:	f3ef 8611 	mrs	r6, BASEPRI
   16fde:	f383 8812 	msr	BASEPRI_MAX, r3
   16fe2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16fe6:	4823      	ldr	r0, [pc, #140]	; (17074 <k_sched_time_slice_set+0xa4>)
   16fe8:	f7ff f8fe 	bl	161e8 <z_spin_lock_valid>
   16fec:	b968      	cbnz	r0, 1700a <k_sched_time_slice_set+0x3a>
   16fee:	4a22      	ldr	r2, [pc, #136]	; (17078 <k_sched_time_slice_set+0xa8>)
   16ff0:	4922      	ldr	r1, [pc, #136]	; (1707c <k_sched_time_slice_set+0xac>)
   16ff2:	4823      	ldr	r0, [pc, #140]	; (17080 <k_sched_time_slice_set+0xb0>)
   16ff4:	2381      	movs	r3, #129	; 0x81
   16ff6:	f003 fc69 	bl	1a8cc <printk>
   16ffa:	491e      	ldr	r1, [pc, #120]	; (17074 <k_sched_time_slice_set+0xa4>)
   16ffc:	4821      	ldr	r0, [pc, #132]	; (17084 <k_sched_time_slice_set+0xb4>)
   16ffe:	f003 fc65 	bl	1a8cc <printk>
   17002:	481d      	ldr	r0, [pc, #116]	; (17078 <k_sched_time_slice_set+0xa8>)
   17004:	2181      	movs	r1, #129	; 0x81
   17006:	f003 fdfa 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   1700a:	481a      	ldr	r0, [pc, #104]	; (17074 <k_sched_time_slice_set+0xa4>)
   1700c:	f7ff f90a 	bl	16224 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   17010:	4b1d      	ldr	r3, [pc, #116]	; (17088 <k_sched_time_slice_set+0xb8>)
   17012:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   17014:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   17018:	f240 30e7 	movw	r0, #999	; 0x3e7
   1701c:	2100      	movs	r1, #0
   1701e:	611a      	str	r2, [r3, #16]
   17020:	fbe7 0104 	umlal	r0, r1, r7, r4
   17024:	2300      	movs	r3, #0
   17026:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1702a:	f7f5 fd87 	bl	cb3c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1702e:	2c00      	cmp	r4, #0
   17030:	4b16      	ldr	r3, [pc, #88]	; (1708c <k_sched_time_slice_set+0xbc>)
   17032:	dc1b      	bgt.n	1706c <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   17034:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   17036:	4b16      	ldr	r3, [pc, #88]	; (17090 <k_sched_time_slice_set+0xc0>)
   17038:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1703a:	f7ff ffb3 	bl	16fa4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1703e:	480d      	ldr	r0, [pc, #52]	; (17074 <k_sched_time_slice_set+0xa4>)
   17040:	f7ff f8e0 	bl	16204 <z_spin_unlock_valid>
   17044:	b968      	cbnz	r0, 17062 <k_sched_time_slice_set+0x92>
   17046:	4a0c      	ldr	r2, [pc, #48]	; (17078 <k_sched_time_slice_set+0xa8>)
   17048:	4912      	ldr	r1, [pc, #72]	; (17094 <k_sched_time_slice_set+0xc4>)
   1704a:	480d      	ldr	r0, [pc, #52]	; (17080 <k_sched_time_slice_set+0xb0>)
   1704c:	23ac      	movs	r3, #172	; 0xac
   1704e:	f003 fc3d 	bl	1a8cc <printk>
   17052:	4908      	ldr	r1, [pc, #32]	; (17074 <k_sched_time_slice_set+0xa4>)
   17054:	4810      	ldr	r0, [pc, #64]	; (17098 <k_sched_time_slice_set+0xc8>)
   17056:	f003 fc39 	bl	1a8cc <printk>
   1705a:	4807      	ldr	r0, [pc, #28]	; (17078 <k_sched_time_slice_set+0xa8>)
   1705c:	21ac      	movs	r1, #172	; 0xac
   1705e:	f003 fdce 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17062:	f386 8811 	msr	BASEPRI, r6
   17066:	f3bf 8f6f 	isb	sy
	}
}
   1706a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1706c:	2802      	cmp	r0, #2
   1706e:	bfb8      	it	lt
   17070:	2002      	movlt	r0, #2
   17072:	e7df      	b.n	17034 <k_sched_time_slice_set+0x64>
   17074:	20001128 	.word	0x20001128
   17078:	0001d83f 	.word	0x0001d83f
   1707c:	0001d891 	.word	0x0001d891
   17080:	0001d2dc 	.word	0x0001d2dc
   17084:	0001d8a6 	.word	0x0001d8a6
   17088:	200010e8 	.word	0x200010e8
   1708c:	20001130 	.word	0x20001130
   17090:	2000112c 	.word	0x2000112c
   17094:	0001d865 	.word	0x0001d865
   17098:	0001d87c 	.word	0x0001d87c

0001709c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   1709c:	b538      	push	{r3, r4, r5, lr}
   1709e:	4604      	mov	r4, r0
	__asm__ volatile(
   170a0:	f04f 0320 	mov.w	r3, #32
   170a4:	f3ef 8511 	mrs	r5, BASEPRI
   170a8:	f383 8812 	msr	BASEPRI_MAX, r3
   170ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   170b0:	4817      	ldr	r0, [pc, #92]	; (17110 <z_unpend_thread_no_timeout+0x74>)
   170b2:	f7ff f899 	bl	161e8 <z_spin_lock_valid>
   170b6:	b968      	cbnz	r0, 170d4 <z_unpend_thread_no_timeout+0x38>
   170b8:	4a16      	ldr	r2, [pc, #88]	; (17114 <z_unpend_thread_no_timeout+0x78>)
   170ba:	4917      	ldr	r1, [pc, #92]	; (17118 <z_unpend_thread_no_timeout+0x7c>)
   170bc:	4817      	ldr	r0, [pc, #92]	; (1711c <z_unpend_thread_no_timeout+0x80>)
   170be:	2381      	movs	r3, #129	; 0x81
   170c0:	f003 fc04 	bl	1a8cc <printk>
   170c4:	4912      	ldr	r1, [pc, #72]	; (17110 <z_unpend_thread_no_timeout+0x74>)
   170c6:	4816      	ldr	r0, [pc, #88]	; (17120 <z_unpend_thread_no_timeout+0x84>)
   170c8:	f003 fc00 	bl	1a8cc <printk>
   170cc:	4811      	ldr	r0, [pc, #68]	; (17114 <z_unpend_thread_no_timeout+0x78>)
   170ce:	2181      	movs	r1, #129	; 0x81
   170d0:	f003 fd95 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   170d4:	480e      	ldr	r0, [pc, #56]	; (17110 <z_unpend_thread_no_timeout+0x74>)
   170d6:	f7ff f8a5 	bl	16224 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   170da:	4620      	mov	r0, r4
   170dc:	f000 f900 	bl	172e0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   170e0:	480b      	ldr	r0, [pc, #44]	; (17110 <z_unpend_thread_no_timeout+0x74>)
   170e2:	f7ff f88f 	bl	16204 <z_spin_unlock_valid>
   170e6:	b968      	cbnz	r0, 17104 <z_unpend_thread_no_timeout+0x68>
   170e8:	4a0a      	ldr	r2, [pc, #40]	; (17114 <z_unpend_thread_no_timeout+0x78>)
   170ea:	490e      	ldr	r1, [pc, #56]	; (17124 <z_unpend_thread_no_timeout+0x88>)
   170ec:	480b      	ldr	r0, [pc, #44]	; (1711c <z_unpend_thread_no_timeout+0x80>)
   170ee:	23ac      	movs	r3, #172	; 0xac
   170f0:	f003 fbec 	bl	1a8cc <printk>
   170f4:	4906      	ldr	r1, [pc, #24]	; (17110 <z_unpend_thread_no_timeout+0x74>)
   170f6:	480c      	ldr	r0, [pc, #48]	; (17128 <z_unpend_thread_no_timeout+0x8c>)
   170f8:	f003 fbe8 	bl	1a8cc <printk>
   170fc:	4805      	ldr	r0, [pc, #20]	; (17114 <z_unpend_thread_no_timeout+0x78>)
   170fe:	21ac      	movs	r1, #172	; 0xac
   17100:	f003 fd7d 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17104:	f385 8811 	msr	BASEPRI, r5
   17108:	f3bf 8f6f 	isb	sy
	}
}
   1710c:	bd38      	pop	{r3, r4, r5, pc}
   1710e:	bf00      	nop
   17110:	20001128 	.word	0x20001128
   17114:	0001d83f 	.word	0x0001d83f
   17118:	0001d891 	.word	0x0001d891
   1711c:	0001d2dc 	.word	0x0001d2dc
   17120:	0001d8a6 	.word	0x0001d8a6
   17124:	0001d865 	.word	0x0001d865
   17128:	0001d87c 	.word	0x0001d87c

0001712c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1712c:	b538      	push	{r3, r4, r5, lr}
   1712e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   17130:	460d      	mov	r5, r1
   17132:	b9e9      	cbnz	r1, 17170 <z_reschedule+0x44>
   17134:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   17138:	b9d3      	cbnz	r3, 17170 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   1713a:	4b19      	ldr	r3, [pc, #100]	; (171a0 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   1713c:	69da      	ldr	r2, [r3, #28]
   1713e:	689b      	ldr	r3, [r3, #8]
   17140:	429a      	cmp	r2, r3
   17142:	d015      	beq.n	17170 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17144:	f7ff f85e 	bl	16204 <z_spin_unlock_valid>
   17148:	b968      	cbnz	r0, 17166 <z_reschedule+0x3a>
   1714a:	4a16      	ldr	r2, [pc, #88]	; (171a4 <z_reschedule+0x78>)
   1714c:	4916      	ldr	r1, [pc, #88]	; (171a8 <z_reschedule+0x7c>)
   1714e:	4817      	ldr	r0, [pc, #92]	; (171ac <z_reschedule+0x80>)
   17150:	23c3      	movs	r3, #195	; 0xc3
   17152:	f003 fbbb 	bl	1a8cc <printk>
   17156:	4816      	ldr	r0, [pc, #88]	; (171b0 <z_reschedule+0x84>)
   17158:	4621      	mov	r1, r4
   1715a:	f003 fbb7 	bl	1a8cc <printk>
   1715e:	4811      	ldr	r0, [pc, #68]	; (171a4 <z_reschedule+0x78>)
   17160:	21c3      	movs	r1, #195	; 0xc3
   17162:	f003 fd4c 	bl	1abfe <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   17166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   1716a:	2000      	movs	r0, #0
   1716c:	f7fa b846 	b.w	111fc <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17170:	4620      	mov	r0, r4
   17172:	f7ff f847 	bl	16204 <z_spin_unlock_valid>
   17176:	b968      	cbnz	r0, 17194 <z_reschedule+0x68>
   17178:	4a0a      	ldr	r2, [pc, #40]	; (171a4 <z_reschedule+0x78>)
   1717a:	490b      	ldr	r1, [pc, #44]	; (171a8 <z_reschedule+0x7c>)
   1717c:	480b      	ldr	r0, [pc, #44]	; (171ac <z_reschedule+0x80>)
   1717e:	23ac      	movs	r3, #172	; 0xac
   17180:	f003 fba4 	bl	1a8cc <printk>
   17184:	480a      	ldr	r0, [pc, #40]	; (171b0 <z_reschedule+0x84>)
   17186:	4621      	mov	r1, r4
   17188:	f003 fba0 	bl	1a8cc <printk>
   1718c:	4805      	ldr	r0, [pc, #20]	; (171a4 <z_reschedule+0x78>)
   1718e:	21ac      	movs	r1, #172	; 0xac
   17190:	f003 fd35 	bl	1abfe <assert_post_action>
   17194:	f385 8811 	msr	BASEPRI, r5
   17198:	f3bf 8f6f 	isb	sy
   1719c:	bd38      	pop	{r3, r4, r5, pc}
   1719e:	bf00      	nop
   171a0:	200010e8 	.word	0x200010e8
   171a4:	0001d83f 	.word	0x0001d83f
   171a8:	0001d865 	.word	0x0001d865
   171ac:	0001d2dc 	.word	0x0001d2dc
   171b0:	0001d87c 	.word	0x0001d87c

000171b4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   171b4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   171b6:	f04f 0320 	mov.w	r3, #32
   171ba:	f3ef 8511 	mrs	r5, BASEPRI
   171be:	f383 8812 	msr	BASEPRI_MAX, r3
   171c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   171c6:	4829      	ldr	r0, [pc, #164]	; (1726c <k_sched_lock+0xb8>)
   171c8:	f7ff f80e 	bl	161e8 <z_spin_lock_valid>
   171cc:	b968      	cbnz	r0, 171ea <k_sched_lock+0x36>
   171ce:	4a28      	ldr	r2, [pc, #160]	; (17270 <k_sched_lock+0xbc>)
   171d0:	4928      	ldr	r1, [pc, #160]	; (17274 <k_sched_lock+0xc0>)
   171d2:	4829      	ldr	r0, [pc, #164]	; (17278 <k_sched_lock+0xc4>)
   171d4:	2381      	movs	r3, #129	; 0x81
   171d6:	f003 fb79 	bl	1a8cc <printk>
   171da:	4924      	ldr	r1, [pc, #144]	; (1726c <k_sched_lock+0xb8>)
   171dc:	4827      	ldr	r0, [pc, #156]	; (1727c <k_sched_lock+0xc8>)
   171de:	f003 fb75 	bl	1a8cc <printk>
   171e2:	4823      	ldr	r0, [pc, #140]	; (17270 <k_sched_lock+0xbc>)
   171e4:	2181      	movs	r1, #129	; 0x81
   171e6:	f003 fd0a 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   171ea:	4820      	ldr	r0, [pc, #128]	; (1726c <k_sched_lock+0xb8>)
   171ec:	f7ff f81a 	bl	16224 <z_spin_lock_set_owner>
   171f0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   171f4:	b163      	cbz	r3, 17210 <k_sched_lock+0x5c>
   171f6:	4922      	ldr	r1, [pc, #136]	; (17280 <k_sched_lock+0xcc>)
   171f8:	4a22      	ldr	r2, [pc, #136]	; (17284 <k_sched_lock+0xd0>)
   171fa:	481f      	ldr	r0, [pc, #124]	; (17278 <k_sched_lock+0xc4>)
   171fc:	23fd      	movs	r3, #253	; 0xfd
   171fe:	f003 fb65 	bl	1a8cc <printk>
   17202:	4821      	ldr	r0, [pc, #132]	; (17288 <k_sched_lock+0xd4>)
   17204:	f003 fb62 	bl	1a8cc <printk>
   17208:	481e      	ldr	r0, [pc, #120]	; (17284 <k_sched_lock+0xd0>)
   1720a:	21fd      	movs	r1, #253	; 0xfd
   1720c:	f003 fcf7 	bl	1abfe <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   17210:	4c1e      	ldr	r4, [pc, #120]	; (1728c <k_sched_lock+0xd8>)
   17212:	68a2      	ldr	r2, [r4, #8]
   17214:	7bd2      	ldrb	r2, [r2, #15]
   17216:	2a01      	cmp	r2, #1
   17218:	d10c      	bne.n	17234 <k_sched_lock+0x80>
   1721a:	491d      	ldr	r1, [pc, #116]	; (17290 <k_sched_lock+0xdc>)
   1721c:	4a19      	ldr	r2, [pc, #100]	; (17284 <k_sched_lock+0xd0>)
   1721e:	4816      	ldr	r0, [pc, #88]	; (17278 <k_sched_lock+0xc4>)
   17220:	23fe      	movs	r3, #254	; 0xfe
   17222:	f003 fb53 	bl	1a8cc <printk>
   17226:	4818      	ldr	r0, [pc, #96]	; (17288 <k_sched_lock+0xd4>)
   17228:	f003 fb50 	bl	1a8cc <printk>
   1722c:	4815      	ldr	r0, [pc, #84]	; (17284 <k_sched_lock+0xd0>)
   1722e:	21fe      	movs	r1, #254	; 0xfe
   17230:	f003 fce5 	bl	1abfe <assert_post_action>
	--_current->base.sched_locked;
   17234:	68a2      	ldr	r2, [r4, #8]
   17236:	7bd3      	ldrb	r3, [r2, #15]
   17238:	3b01      	subs	r3, #1
   1723a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1723c:	480b      	ldr	r0, [pc, #44]	; (1726c <k_sched_lock+0xb8>)
   1723e:	f7fe ffe1 	bl	16204 <z_spin_unlock_valid>
   17242:	b968      	cbnz	r0, 17260 <k_sched_lock+0xac>
   17244:	4a0a      	ldr	r2, [pc, #40]	; (17270 <k_sched_lock+0xbc>)
   17246:	4913      	ldr	r1, [pc, #76]	; (17294 <k_sched_lock+0xe0>)
   17248:	480b      	ldr	r0, [pc, #44]	; (17278 <k_sched_lock+0xc4>)
   1724a:	23ac      	movs	r3, #172	; 0xac
   1724c:	f003 fb3e 	bl	1a8cc <printk>
   17250:	4906      	ldr	r1, [pc, #24]	; (1726c <k_sched_lock+0xb8>)
   17252:	4811      	ldr	r0, [pc, #68]	; (17298 <k_sched_lock+0xe4>)
   17254:	f003 fb3a 	bl	1a8cc <printk>
   17258:	4805      	ldr	r0, [pc, #20]	; (17270 <k_sched_lock+0xbc>)
   1725a:	21ac      	movs	r1, #172	; 0xac
   1725c:	f003 fccf 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17260:	f385 8811 	msr	BASEPRI, r5
   17264:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   17268:	bd38      	pop	{r3, r4, r5, pc}
   1726a:	bf00      	nop
   1726c:	20001128 	.word	0x20001128
   17270:	0001d83f 	.word	0x0001d83f
   17274:	0001d891 	.word	0x0001d891
   17278:	0001d2dc 	.word	0x0001d2dc
   1727c:	0001d8a6 	.word	0x0001d8a6
   17280:	00020148 	.word	0x00020148
   17284:	00020253 	.word	0x00020253
   17288:	0002027e 	.word	0x0002027e
   1728c:	200010e8 	.word	0x200010e8
   17290:	00020281 	.word	0x00020281
   17294:	0001d865 	.word	0x0001d865
   17298:	0001d87c 	.word	0x0001d87c

0001729c <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1729c:	4b0c      	ldr	r3, [pc, #48]	; (172d0 <z_priq_dumb_remove+0x34>)
   1729e:	4299      	cmp	r1, r3
{
   172a0:	b510      	push	{r4, lr}
   172a2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   172a4:	d10b      	bne.n	172be <z_priq_dumb_remove+0x22>
   172a6:	490b      	ldr	r1, [pc, #44]	; (172d4 <z_priq_dumb_remove+0x38>)
   172a8:	480b      	ldr	r0, [pc, #44]	; (172d8 <z_priq_dumb_remove+0x3c>)
   172aa:	4a0c      	ldr	r2, [pc, #48]	; (172dc <z_priq_dumb_remove+0x40>)
   172ac:	f240 33e7 	movw	r3, #999	; 0x3e7
   172b0:	f003 fb0c 	bl	1a8cc <printk>
   172b4:	4809      	ldr	r0, [pc, #36]	; (172dc <z_priq_dumb_remove+0x40>)
   172b6:	f240 31e7 	movw	r1, #999	; 0x3e7
   172ba:	f003 fca0 	bl	1abfe <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   172be:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   172c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   172c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   172c6:	2300      	movs	r3, #0
	node->prev = NULL;
   172c8:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   172cc:	bd10      	pop	{r4, pc}
   172ce:	bf00      	nop
   172d0:	20000630 	.word	0x20000630
   172d4:	000203e9 	.word	0x000203e9
   172d8:	0001d2dc 	.word	0x0001d2dc
   172dc:	000203c7 	.word	0x000203c7

000172e0 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   172e0:	6883      	ldr	r3, [r0, #8]
{
   172e2:	b510      	push	{r4, lr}
   172e4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   172e6:	b95b      	cbnz	r3, 17300 <unpend_thread_no_timeout+0x20>
   172e8:	490b      	ldr	r1, [pc, #44]	; (17318 <unpend_thread_no_timeout+0x38>)
   172ea:	480c      	ldr	r0, [pc, #48]	; (1731c <unpend_thread_no_timeout+0x3c>)
   172ec:	4a0c      	ldr	r2, [pc, #48]	; (17320 <unpend_thread_no_timeout+0x40>)
   172ee:	f240 2383 	movw	r3, #643	; 0x283
   172f2:	f003 faeb 	bl	1a8cc <printk>
   172f6:	480a      	ldr	r0, [pc, #40]	; (17320 <unpend_thread_no_timeout+0x40>)
   172f8:	f240 2183 	movw	r1, #643	; 0x283
   172fc:	f003 fc7f 	bl	1abfe <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   17300:	68a0      	ldr	r0, [r4, #8]
   17302:	4621      	mov	r1, r4
   17304:	f7ff ffca 	bl	1729c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   17308:	7b63      	ldrb	r3, [r4, #13]
   1730a:	f023 0302 	bic.w	r3, r3, #2
   1730e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   17310:	2300      	movs	r3, #0
   17312:	60a3      	str	r3, [r4, #8]
}
   17314:	bd10      	pop	{r4, pc}
   17316:	bf00      	nop
   17318:	0002040a 	.word	0x0002040a
   1731c:	0001d2dc 	.word	0x0001d2dc
   17320:	000203c7 	.word	0x000203c7

00017324 <z_unpend_thread>:
{
   17324:	b538      	push	{r3, r4, r5, lr}
   17326:	4604      	mov	r4, r0
	__asm__ volatile(
   17328:	f04f 0320 	mov.w	r3, #32
   1732c:	f3ef 8511 	mrs	r5, BASEPRI
   17330:	f383 8812 	msr	BASEPRI_MAX, r3
   17334:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17338:	4819      	ldr	r0, [pc, #100]	; (173a0 <z_unpend_thread+0x7c>)
   1733a:	f7fe ff55 	bl	161e8 <z_spin_lock_valid>
   1733e:	b968      	cbnz	r0, 1735c <z_unpend_thread+0x38>
   17340:	4a18      	ldr	r2, [pc, #96]	; (173a4 <z_unpend_thread+0x80>)
   17342:	4919      	ldr	r1, [pc, #100]	; (173a8 <z_unpend_thread+0x84>)
   17344:	4819      	ldr	r0, [pc, #100]	; (173ac <z_unpend_thread+0x88>)
   17346:	2381      	movs	r3, #129	; 0x81
   17348:	f003 fac0 	bl	1a8cc <printk>
   1734c:	4914      	ldr	r1, [pc, #80]	; (173a0 <z_unpend_thread+0x7c>)
   1734e:	4818      	ldr	r0, [pc, #96]	; (173b0 <z_unpend_thread+0x8c>)
   17350:	f003 fabc 	bl	1a8cc <printk>
   17354:	4813      	ldr	r0, [pc, #76]	; (173a4 <z_unpend_thread+0x80>)
   17356:	2181      	movs	r1, #129	; 0x81
   17358:	f003 fc51 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   1735c:	4810      	ldr	r0, [pc, #64]	; (173a0 <z_unpend_thread+0x7c>)
   1735e:	f7fe ff61 	bl	16224 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   17362:	4620      	mov	r0, r4
   17364:	f7ff ffbc 	bl	172e0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17368:	480d      	ldr	r0, [pc, #52]	; (173a0 <z_unpend_thread+0x7c>)
   1736a:	f7fe ff4b 	bl	16204 <z_spin_unlock_valid>
   1736e:	b968      	cbnz	r0, 1738c <z_unpend_thread+0x68>
   17370:	4a0c      	ldr	r2, [pc, #48]	; (173a4 <z_unpend_thread+0x80>)
   17372:	4910      	ldr	r1, [pc, #64]	; (173b4 <z_unpend_thread+0x90>)
   17374:	480d      	ldr	r0, [pc, #52]	; (173ac <z_unpend_thread+0x88>)
   17376:	23ac      	movs	r3, #172	; 0xac
   17378:	f003 faa8 	bl	1a8cc <printk>
   1737c:	4908      	ldr	r1, [pc, #32]	; (173a0 <z_unpend_thread+0x7c>)
   1737e:	480e      	ldr	r0, [pc, #56]	; (173b8 <z_unpend_thread+0x94>)
   17380:	f003 faa4 	bl	1a8cc <printk>
   17384:	4807      	ldr	r0, [pc, #28]	; (173a4 <z_unpend_thread+0x80>)
   17386:	21ac      	movs	r1, #172	; 0xac
   17388:	f003 fc39 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   1738c:	f385 8811 	msr	BASEPRI, r5
   17390:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   17394:	f104 0018 	add.w	r0, r4, #24
}
   17398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1739c:	f001 b96e 	b.w	1867c <z_abort_timeout>
   173a0:	20001128 	.word	0x20001128
   173a4:	0001d83f 	.word	0x0001d83f
   173a8:	0001d891 	.word	0x0001d891
   173ac:	0001d2dc 	.word	0x0001d2dc
   173b0:	0001d8a6 	.word	0x0001d8a6
   173b4:	0001d865 	.word	0x0001d865
   173b8:	0001d87c 	.word	0x0001d87c

000173bc <update_cache>:
{
   173bc:	b538      	push	{r3, r4, r5, lr}
   173be:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   173c0:	4814      	ldr	r0, [pc, #80]	; (17414 <update_cache+0x58>)
   173c2:	4d15      	ldr	r5, [pc, #84]	; (17418 <update_cache+0x5c>)
   173c4:	f004 fb21 	bl	1ba0a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   173c8:	4604      	mov	r4, r0
   173ca:	b900      	cbnz	r0, 173ce <update_cache+0x12>
   173cc:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   173ce:	b9ca      	cbnz	r2, 17404 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   173d0:	68ab      	ldr	r3, [r5, #8]
   173d2:	b963      	cbnz	r3, 173ee <update_cache+0x32>
   173d4:	4911      	ldr	r1, [pc, #68]	; (1741c <update_cache+0x60>)
   173d6:	4a12      	ldr	r2, [pc, #72]	; (17420 <update_cache+0x64>)
   173d8:	4812      	ldr	r0, [pc, #72]	; (17424 <update_cache+0x68>)
   173da:	2389      	movs	r3, #137	; 0x89
   173dc:	f003 fa76 	bl	1a8cc <printk>
   173e0:	4811      	ldr	r0, [pc, #68]	; (17428 <update_cache+0x6c>)
   173e2:	f003 fa73 	bl	1a8cc <printk>
   173e6:	480e      	ldr	r0, [pc, #56]	; (17420 <update_cache+0x64>)
   173e8:	2189      	movs	r1, #137	; 0x89
   173ea:	f003 fc08 	bl	1abfe <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   173ee:	68ab      	ldr	r3, [r5, #8]
   173f0:	7b5a      	ldrb	r2, [r3, #13]
   173f2:	06d2      	lsls	r2, r2, #27
   173f4:	d106      	bne.n	17404 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   173f6:	69a2      	ldr	r2, [r4, #24]
   173f8:	b922      	cbnz	r2, 17404 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   173fa:	89da      	ldrh	r2, [r3, #14]
   173fc:	2a7f      	cmp	r2, #127	; 0x7f
   173fe:	d901      	bls.n	17404 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   17400:	61eb      	str	r3, [r5, #28]
}
   17402:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   17404:	68ab      	ldr	r3, [r5, #8]
   17406:	42a3      	cmp	r3, r4
   17408:	d001      	beq.n	1740e <update_cache+0x52>
			z_reset_time_slice();
   1740a:	f7ff fdcb 	bl	16fa4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1740e:	61ec      	str	r4, [r5, #28]
}
   17410:	e7f7      	b.n	17402 <update_cache+0x46>
   17412:	bf00      	nop
   17414:	20001108 	.word	0x20001108
   17418:	200010e8 	.word	0x200010e8
   1741c:	00020421 	.word	0x00020421
   17420:	000203c7 	.word	0x000203c7
   17424:	0001d2dc 	.word	0x0001d2dc
   17428:	0002027e 	.word	0x0002027e

0001742c <move_thread_to_end_of_prio_q>:
{
   1742c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1742e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   17432:	7b43      	ldrb	r3, [r0, #13]
   17434:	2a00      	cmp	r2, #0
{
   17436:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   17438:	da06      	bge.n	17448 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1743a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1743e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17440:	4601      	mov	r1, r0
   17442:	481f      	ldr	r0, [pc, #124]	; (174c0 <move_thread_to_end_of_prio_q+0x94>)
   17444:	f7ff ff2a 	bl	1729c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   17448:	7b63      	ldrb	r3, [r4, #13]
   1744a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1744e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17450:	4b1c      	ldr	r3, [pc, #112]	; (174c4 <move_thread_to_end_of_prio_q+0x98>)
   17452:	429c      	cmp	r4, r3
   17454:	d109      	bne.n	1746a <move_thread_to_end_of_prio_q+0x3e>
   17456:	491c      	ldr	r1, [pc, #112]	; (174c8 <move_thread_to_end_of_prio_q+0x9c>)
   17458:	481c      	ldr	r0, [pc, #112]	; (174cc <move_thread_to_end_of_prio_q+0xa0>)
   1745a:	4a1d      	ldr	r2, [pc, #116]	; (174d0 <move_thread_to_end_of_prio_q+0xa4>)
   1745c:	23ba      	movs	r3, #186	; 0xba
   1745e:	f003 fa35 	bl	1a8cc <printk>
   17462:	481b      	ldr	r0, [pc, #108]	; (174d0 <move_thread_to_end_of_prio_q+0xa4>)
   17464:	21ba      	movs	r1, #186	; 0xba
   17466:	f003 fbca 	bl	1abfe <assert_post_action>
	return list->head == list;
   1746a:	4a1a      	ldr	r2, [pc, #104]	; (174d4 <move_thread_to_end_of_prio_q+0xa8>)
   1746c:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1746e:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
   17470:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17474:	428b      	cmp	r3, r1
   17476:	bf08      	it	eq
   17478:	2300      	moveq	r3, #0
   1747a:	2b00      	cmp	r3, #0
   1747c:	bf38      	it	cc
   1747e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17480:	b1cb      	cbz	r3, 174b6 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
   17482:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   17486:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1748a:	4286      	cmp	r6, r0
   1748c:	d00f      	beq.n	174ae <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
   1748e:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   17490:	2800      	cmp	r0, #0
   17492:	dd0c      	ble.n	174ae <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   17494:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   17496:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1749a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1749c:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   1749e:	6890      	ldr	r0, [r2, #8]
   174a0:	1b03      	subs	r3, r0, r4
   174a2:	4258      	negs	r0, r3
}
   174a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   174a8:	4158      	adcs	r0, r3
   174aa:	f7ff bf87 	b.w	173bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   174ae:	42ab      	cmp	r3, r5
   174b0:	d001      	beq.n	174b6 <move_thread_to_end_of_prio_q+0x8a>
   174b2:	681b      	ldr	r3, [r3, #0]
   174b4:	e7e4      	b.n	17480 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
   174b6:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   174ba:	602c      	str	r4, [r5, #0]
	list->tail = node;
   174bc:	6254      	str	r4, [r2, #36]	; 0x24
}
   174be:	e7ee      	b.n	1749e <move_thread_to_end_of_prio_q+0x72>
   174c0:	20001108 	.word	0x20001108
   174c4:	20000630 	.word	0x20000630
   174c8:	000203e9 	.word	0x000203e9
   174cc:	0001d2dc 	.word	0x0001d2dc
   174d0:	000203c7 	.word	0x000203c7
   174d4:	200010e8 	.word	0x200010e8

000174d8 <z_time_slice>:
{
   174d8:	b570      	push	{r4, r5, r6, lr}
   174da:	4604      	mov	r4, r0
	__asm__ volatile(
   174dc:	f04f 0320 	mov.w	r3, #32
   174e0:	f3ef 8511 	mrs	r5, BASEPRI
   174e4:	f383 8812 	msr	BASEPRI_MAX, r3
   174e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   174ec:	482a      	ldr	r0, [pc, #168]	; (17598 <z_time_slice+0xc0>)
   174ee:	f7fe fe7b 	bl	161e8 <z_spin_lock_valid>
   174f2:	b968      	cbnz	r0, 17510 <z_time_slice+0x38>
   174f4:	4a29      	ldr	r2, [pc, #164]	; (1759c <z_time_slice+0xc4>)
   174f6:	492a      	ldr	r1, [pc, #168]	; (175a0 <z_time_slice+0xc8>)
   174f8:	482a      	ldr	r0, [pc, #168]	; (175a4 <z_time_slice+0xcc>)
   174fa:	2381      	movs	r3, #129	; 0x81
   174fc:	f003 f9e6 	bl	1a8cc <printk>
   17500:	4925      	ldr	r1, [pc, #148]	; (17598 <z_time_slice+0xc0>)
   17502:	4829      	ldr	r0, [pc, #164]	; (175a8 <z_time_slice+0xd0>)
   17504:	f003 f9e2 	bl	1a8cc <printk>
   17508:	4824      	ldr	r0, [pc, #144]	; (1759c <z_time_slice+0xc4>)
   1750a:	2181      	movs	r1, #129	; 0x81
   1750c:	f003 fb77 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   17510:	4821      	ldr	r0, [pc, #132]	; (17598 <z_time_slice+0xc0>)
   17512:	f7fe fe87 	bl	16224 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   17516:	4b25      	ldr	r3, [pc, #148]	; (175ac <z_time_slice+0xd4>)
   17518:	4a25      	ldr	r2, [pc, #148]	; (175b0 <z_time_slice+0xd8>)
   1751a:	6898      	ldr	r0, [r3, #8]
   1751c:	6811      	ldr	r1, [r2, #0]
   1751e:	4288      	cmp	r0, r1
   17520:	4619      	mov	r1, r3
   17522:	d118      	bne.n	17556 <z_time_slice+0x7e>
			z_reset_time_slice();
   17524:	f7ff fd3e 	bl	16fa4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17528:	481b      	ldr	r0, [pc, #108]	; (17598 <z_time_slice+0xc0>)
   1752a:	f7fe fe6b 	bl	16204 <z_spin_unlock_valid>
   1752e:	b968      	cbnz	r0, 1754c <z_time_slice+0x74>
   17530:	4a1a      	ldr	r2, [pc, #104]	; (1759c <z_time_slice+0xc4>)
   17532:	4920      	ldr	r1, [pc, #128]	; (175b4 <z_time_slice+0xdc>)
   17534:	481b      	ldr	r0, [pc, #108]	; (175a4 <z_time_slice+0xcc>)
   17536:	23ac      	movs	r3, #172	; 0xac
   17538:	f003 f9c8 	bl	1a8cc <printk>
   1753c:	4916      	ldr	r1, [pc, #88]	; (17598 <z_time_slice+0xc0>)
   1753e:	481e      	ldr	r0, [pc, #120]	; (175b8 <z_time_slice+0xe0>)
   17540:	f003 f9c4 	bl	1a8cc <printk>
   17544:	4815      	ldr	r0, [pc, #84]	; (1759c <z_time_slice+0xc4>)
   17546:	21ac      	movs	r1, #172	; 0xac
   17548:	f003 fb59 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   1754c:	f385 8811 	msr	BASEPRI, r5
   17550:	f3bf 8f6f 	isb	sy
}
   17554:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   17556:	2600      	movs	r6, #0
   17558:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1755a:	4a18      	ldr	r2, [pc, #96]	; (175bc <z_time_slice+0xe4>)
   1755c:	6812      	ldr	r2, [r2, #0]
   1755e:	b1ba      	cbz	r2, 17590 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   17560:	89c2      	ldrh	r2, [r0, #14]
   17562:	2a7f      	cmp	r2, #127	; 0x7f
   17564:	d814      	bhi.n	17590 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   17566:	7b42      	ldrb	r2, [r0, #13]
   17568:	06d2      	lsls	r2, r2, #27
   1756a:	d111      	bne.n	17590 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1756c:	4a14      	ldr	r2, [pc, #80]	; (175c0 <z_time_slice+0xe8>)
   1756e:	f990 600e 	ldrsb.w	r6, [r0, #14]
   17572:	6812      	ldr	r2, [r2, #0]
   17574:	4296      	cmp	r6, r2
   17576:	db0b      	blt.n	17590 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   17578:	4a12      	ldr	r2, [pc, #72]	; (175c4 <z_time_slice+0xec>)
   1757a:	4290      	cmp	r0, r2
   1757c:	d008      	beq.n	17590 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   1757e:	691a      	ldr	r2, [r3, #16]
   17580:	42a2      	cmp	r2, r4
   17582:	dc02      	bgt.n	1758a <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   17584:	f7ff ff52 	bl	1742c <move_thread_to_end_of_prio_q>
   17588:	e7cc      	b.n	17524 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   1758a:	1b12      	subs	r2, r2, r4
   1758c:	611a      	str	r2, [r3, #16]
   1758e:	e7cb      	b.n	17528 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   17590:	2300      	movs	r3, #0
   17592:	610b      	str	r3, [r1, #16]
   17594:	e7c8      	b.n	17528 <z_time_slice+0x50>
   17596:	bf00      	nop
   17598:	20001128 	.word	0x20001128
   1759c:	0001d83f 	.word	0x0001d83f
   175a0:	0001d891 	.word	0x0001d891
   175a4:	0001d2dc 	.word	0x0001d2dc
   175a8:	0001d8a6 	.word	0x0001d8a6
   175ac:	200010e8 	.word	0x200010e8
   175b0:	20001124 	.word	0x20001124
   175b4:	0001d865 	.word	0x0001d865
   175b8:	0001d87c 	.word	0x0001d87c
   175bc:	20001130 	.word	0x20001130
   175c0:	2000112c 	.word	0x2000112c
   175c4:	20000630 	.word	0x20000630

000175c8 <ready_thread>:
{
   175c8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   175ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
   175ce:	7b43      	ldrb	r3, [r0, #13]
   175d0:	2a00      	cmp	r2, #0
{
   175d2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   175d4:	db3e      	blt.n	17654 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   175d6:	06da      	lsls	r2, r3, #27
   175d8:	d13c      	bne.n	17654 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
   175da:	6985      	ldr	r5, [r0, #24]
   175dc:	2d00      	cmp	r5, #0
   175de:	d139      	bne.n	17654 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
   175e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   175e4:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   175e6:	4b1c      	ldr	r3, [pc, #112]	; (17658 <ready_thread+0x90>)
   175e8:	4298      	cmp	r0, r3
   175ea:	d109      	bne.n	17600 <ready_thread+0x38>
   175ec:	491b      	ldr	r1, [pc, #108]	; (1765c <ready_thread+0x94>)
   175ee:	481c      	ldr	r0, [pc, #112]	; (17660 <ready_thread+0x98>)
   175f0:	4a1c      	ldr	r2, [pc, #112]	; (17664 <ready_thread+0x9c>)
   175f2:	23ba      	movs	r3, #186	; 0xba
   175f4:	f003 f96a 	bl	1a8cc <printk>
   175f8:	481a      	ldr	r0, [pc, #104]	; (17664 <ready_thread+0x9c>)
   175fa:	21ba      	movs	r1, #186	; 0xba
   175fc:	f003 faff 	bl	1abfe <assert_post_action>
	return list->head == list;
   17600:	4919      	ldr	r1, [pc, #100]	; (17668 <ready_thread+0xa0>)
   17602:	460b      	mov	r3, r1
   17604:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17608:	4298      	cmp	r0, r3
   1760a:	bf18      	it	ne
   1760c:	4605      	movne	r5, r0
   1760e:	2d00      	cmp	r5, #0
   17610:	461a      	mov	r2, r3
   17612:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17614:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   17616:	bf38      	it	cc
   17618:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1761a:	b1b3      	cbz	r3, 1764a <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
   1761c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   17620:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   17624:	4286      	cmp	r6, r0
   17626:	d00c      	beq.n	17642 <ready_thread+0x7a>
		return b2 - b1;
   17628:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1762a:	2800      	cmp	r0, #0
   1762c:	dd09      	ble.n	17642 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
   1762e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17630:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   17634:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17636:	605c      	str	r4, [r3, #4]
}
   17638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1763c:	2000      	movs	r0, #0
   1763e:	f7ff bebd 	b.w	173bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17642:	42ab      	cmp	r3, r5
   17644:	d001      	beq.n	1764a <ready_thread+0x82>
   17646:	681b      	ldr	r3, [r3, #0]
   17648:	e7e7      	b.n	1761a <ready_thread+0x52>
	node->prev = tail;
   1764a:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   1764e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   17650:	624c      	str	r4, [r1, #36]	; 0x24
}
   17652:	e7f1      	b.n	17638 <ready_thread+0x70>
}
   17654:	bd70      	pop	{r4, r5, r6, pc}
   17656:	bf00      	nop
   17658:	20000630 	.word	0x20000630
   1765c:	000203e9 	.word	0x000203e9
   17660:	0001d2dc 	.word	0x0001d2dc
   17664:	000203c7 	.word	0x000203c7
   17668:	200010e8 	.word	0x200010e8

0001766c <z_ready_thread>:
{
   1766c:	b538      	push	{r3, r4, r5, lr}
   1766e:	4604      	mov	r4, r0
	__asm__ volatile(
   17670:	f04f 0320 	mov.w	r3, #32
   17674:	f3ef 8511 	mrs	r5, BASEPRI
   17678:	f383 8812 	msr	BASEPRI_MAX, r3
   1767c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17680:	4817      	ldr	r0, [pc, #92]	; (176e0 <z_ready_thread+0x74>)
   17682:	f7fe fdb1 	bl	161e8 <z_spin_lock_valid>
   17686:	b968      	cbnz	r0, 176a4 <z_ready_thread+0x38>
   17688:	4a16      	ldr	r2, [pc, #88]	; (176e4 <z_ready_thread+0x78>)
   1768a:	4917      	ldr	r1, [pc, #92]	; (176e8 <z_ready_thread+0x7c>)
   1768c:	4817      	ldr	r0, [pc, #92]	; (176ec <z_ready_thread+0x80>)
   1768e:	2381      	movs	r3, #129	; 0x81
   17690:	f003 f91c 	bl	1a8cc <printk>
   17694:	4912      	ldr	r1, [pc, #72]	; (176e0 <z_ready_thread+0x74>)
   17696:	4816      	ldr	r0, [pc, #88]	; (176f0 <z_ready_thread+0x84>)
   17698:	f003 f918 	bl	1a8cc <printk>
   1769c:	4811      	ldr	r0, [pc, #68]	; (176e4 <z_ready_thread+0x78>)
   1769e:	2181      	movs	r1, #129	; 0x81
   176a0:	f003 faad 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   176a4:	480e      	ldr	r0, [pc, #56]	; (176e0 <z_ready_thread+0x74>)
   176a6:	f7fe fdbd 	bl	16224 <z_spin_lock_set_owner>
			ready_thread(thread);
   176aa:	4620      	mov	r0, r4
   176ac:	f7ff ff8c 	bl	175c8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   176b0:	480b      	ldr	r0, [pc, #44]	; (176e0 <z_ready_thread+0x74>)
   176b2:	f7fe fda7 	bl	16204 <z_spin_unlock_valid>
   176b6:	b968      	cbnz	r0, 176d4 <z_ready_thread+0x68>
   176b8:	4a0a      	ldr	r2, [pc, #40]	; (176e4 <z_ready_thread+0x78>)
   176ba:	490e      	ldr	r1, [pc, #56]	; (176f4 <z_ready_thread+0x88>)
   176bc:	480b      	ldr	r0, [pc, #44]	; (176ec <z_ready_thread+0x80>)
   176be:	23ac      	movs	r3, #172	; 0xac
   176c0:	f003 f904 	bl	1a8cc <printk>
   176c4:	4906      	ldr	r1, [pc, #24]	; (176e0 <z_ready_thread+0x74>)
   176c6:	480c      	ldr	r0, [pc, #48]	; (176f8 <z_ready_thread+0x8c>)
   176c8:	f003 f900 	bl	1a8cc <printk>
   176cc:	4805      	ldr	r0, [pc, #20]	; (176e4 <z_ready_thread+0x78>)
   176ce:	21ac      	movs	r1, #172	; 0xac
   176d0:	f003 fa95 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   176d4:	f385 8811 	msr	BASEPRI, r5
   176d8:	f3bf 8f6f 	isb	sy
}
   176dc:	bd38      	pop	{r3, r4, r5, pc}
   176de:	bf00      	nop
   176e0:	20001128 	.word	0x20001128
   176e4:	0001d83f 	.word	0x0001d83f
   176e8:	0001d891 	.word	0x0001d891
   176ec:	0001d2dc 	.word	0x0001d2dc
   176f0:	0001d8a6 	.word	0x0001d8a6
   176f4:	0001d865 	.word	0x0001d865
   176f8:	0001d87c 	.word	0x0001d87c

000176fc <z_sched_start>:
{
   176fc:	b538      	push	{r3, r4, r5, lr}
   176fe:	4604      	mov	r4, r0
	__asm__ volatile(
   17700:	f04f 0320 	mov.w	r3, #32
   17704:	f3ef 8511 	mrs	r5, BASEPRI
   17708:	f383 8812 	msr	BASEPRI_MAX, r3
   1770c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17710:	481d      	ldr	r0, [pc, #116]	; (17788 <z_sched_start+0x8c>)
   17712:	f7fe fd69 	bl	161e8 <z_spin_lock_valid>
   17716:	b968      	cbnz	r0, 17734 <z_sched_start+0x38>
   17718:	4a1c      	ldr	r2, [pc, #112]	; (1778c <z_sched_start+0x90>)
   1771a:	491d      	ldr	r1, [pc, #116]	; (17790 <z_sched_start+0x94>)
   1771c:	481d      	ldr	r0, [pc, #116]	; (17794 <z_sched_start+0x98>)
   1771e:	2381      	movs	r3, #129	; 0x81
   17720:	f003 f8d4 	bl	1a8cc <printk>
   17724:	4918      	ldr	r1, [pc, #96]	; (17788 <z_sched_start+0x8c>)
   17726:	481c      	ldr	r0, [pc, #112]	; (17798 <z_sched_start+0x9c>)
   17728:	f003 f8d0 	bl	1a8cc <printk>
   1772c:	4817      	ldr	r0, [pc, #92]	; (1778c <z_sched_start+0x90>)
   1772e:	2181      	movs	r1, #129	; 0x81
   17730:	f003 fa65 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   17734:	4814      	ldr	r0, [pc, #80]	; (17788 <z_sched_start+0x8c>)
   17736:	f7fe fd75 	bl	16224 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   1773a:	7b63      	ldrb	r3, [r4, #13]
   1773c:	075a      	lsls	r2, r3, #29
   1773e:	d416      	bmi.n	1776e <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17740:	4811      	ldr	r0, [pc, #68]	; (17788 <z_sched_start+0x8c>)
   17742:	f7fe fd5f 	bl	16204 <z_spin_unlock_valid>
   17746:	b968      	cbnz	r0, 17764 <z_sched_start+0x68>
   17748:	4a10      	ldr	r2, [pc, #64]	; (1778c <z_sched_start+0x90>)
   1774a:	4914      	ldr	r1, [pc, #80]	; (1779c <z_sched_start+0xa0>)
   1774c:	4811      	ldr	r0, [pc, #68]	; (17794 <z_sched_start+0x98>)
   1774e:	23ac      	movs	r3, #172	; 0xac
   17750:	f003 f8bc 	bl	1a8cc <printk>
   17754:	490c      	ldr	r1, [pc, #48]	; (17788 <z_sched_start+0x8c>)
   17756:	4812      	ldr	r0, [pc, #72]	; (177a0 <z_sched_start+0xa4>)
   17758:	f003 f8b8 	bl	1a8cc <printk>
   1775c:	480b      	ldr	r0, [pc, #44]	; (1778c <z_sched_start+0x90>)
   1775e:	21ac      	movs	r1, #172	; 0xac
   17760:	f003 fa4d 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17764:	f385 8811 	msr	BASEPRI, r5
   17768:	f3bf 8f6f 	isb	sy
}
   1776c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1776e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   17772:	4620      	mov	r0, r4
   17774:	7363      	strb	r3, [r4, #13]
   17776:	f7ff ff27 	bl	175c8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1777a:	4629      	mov	r1, r5
   1777c:	4802      	ldr	r0, [pc, #8]	; (17788 <z_sched_start+0x8c>)
}
   1777e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   17782:	f7ff bcd3 	b.w	1712c <z_reschedule>
   17786:	bf00      	nop
   17788:	20001128 	.word	0x20001128
   1778c:	0001d83f 	.word	0x0001d83f
   17790:	0001d891 	.word	0x0001d891
   17794:	0001d2dc 	.word	0x0001d2dc
   17798:	0001d8a6 	.word	0x0001d8a6
   1779c:	0001d865 	.word	0x0001d865
   177a0:	0001d87c 	.word	0x0001d87c

000177a4 <z_thread_timeout>:
{
   177a4:	b570      	push	{r4, r5, r6, lr}
   177a6:	4604      	mov	r4, r0
	__asm__ volatile(
   177a8:	f04f 0320 	mov.w	r3, #32
   177ac:	f3ef 8611 	mrs	r6, BASEPRI
   177b0:	f383 8812 	msr	BASEPRI_MAX, r3
   177b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   177b8:	4820      	ldr	r0, [pc, #128]	; (1783c <z_thread_timeout+0x98>)
   177ba:	f7fe fd15 	bl	161e8 <z_spin_lock_valid>
   177be:	b968      	cbnz	r0, 177dc <z_thread_timeout+0x38>
   177c0:	4a1f      	ldr	r2, [pc, #124]	; (17840 <z_thread_timeout+0x9c>)
   177c2:	4920      	ldr	r1, [pc, #128]	; (17844 <z_thread_timeout+0xa0>)
   177c4:	4820      	ldr	r0, [pc, #128]	; (17848 <z_thread_timeout+0xa4>)
   177c6:	2381      	movs	r3, #129	; 0x81
   177c8:	f003 f880 	bl	1a8cc <printk>
   177cc:	491b      	ldr	r1, [pc, #108]	; (1783c <z_thread_timeout+0x98>)
   177ce:	481f      	ldr	r0, [pc, #124]	; (1784c <z_thread_timeout+0xa8>)
   177d0:	f003 f87c 	bl	1a8cc <printk>
   177d4:	481a      	ldr	r0, [pc, #104]	; (17840 <z_thread_timeout+0x9c>)
   177d6:	2181      	movs	r1, #129	; 0x81
   177d8:	f003 fa11 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   177dc:	4817      	ldr	r0, [pc, #92]	; (1783c <z_thread_timeout+0x98>)
   177de:	f7fe fd21 	bl	16224 <z_spin_lock_set_owner>
		if (!killed) {
   177e2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   177e6:	f013 0f28 	tst.w	r3, #40	; 0x28
   177ea:	d110      	bne.n	1780e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   177ec:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   177f0:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   177f4:	b113      	cbz	r3, 177fc <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   177f6:	4628      	mov	r0, r5
   177f8:	f7ff fd72 	bl	172e0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   177fc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   17800:	f023 0314 	bic.w	r3, r3, #20
   17804:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   17808:	4628      	mov	r0, r5
   1780a:	f7ff fedd 	bl	175c8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1780e:	480b      	ldr	r0, [pc, #44]	; (1783c <z_thread_timeout+0x98>)
   17810:	f7fe fcf8 	bl	16204 <z_spin_unlock_valid>
   17814:	b968      	cbnz	r0, 17832 <z_thread_timeout+0x8e>
   17816:	4a0a      	ldr	r2, [pc, #40]	; (17840 <z_thread_timeout+0x9c>)
   17818:	490d      	ldr	r1, [pc, #52]	; (17850 <z_thread_timeout+0xac>)
   1781a:	480b      	ldr	r0, [pc, #44]	; (17848 <z_thread_timeout+0xa4>)
   1781c:	23ac      	movs	r3, #172	; 0xac
   1781e:	f003 f855 	bl	1a8cc <printk>
   17822:	4906      	ldr	r1, [pc, #24]	; (1783c <z_thread_timeout+0x98>)
   17824:	480b      	ldr	r0, [pc, #44]	; (17854 <z_thread_timeout+0xb0>)
   17826:	f003 f851 	bl	1a8cc <printk>
   1782a:	4805      	ldr	r0, [pc, #20]	; (17840 <z_thread_timeout+0x9c>)
   1782c:	21ac      	movs	r1, #172	; 0xac
   1782e:	f003 f9e6 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17832:	f386 8811 	msr	BASEPRI, r6
   17836:	f3bf 8f6f 	isb	sy
}
   1783a:	bd70      	pop	{r4, r5, r6, pc}
   1783c:	20001128 	.word	0x20001128
   17840:	0001d83f 	.word	0x0001d83f
   17844:	0001d891 	.word	0x0001d891
   17848:	0001d2dc 	.word	0x0001d2dc
   1784c:	0001d8a6 	.word	0x0001d8a6
   17850:	0001d865 	.word	0x0001d865
   17854:	0001d87c 	.word	0x0001d87c

00017858 <unready_thread>:
{
   17858:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1785a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1785e:	7b43      	ldrb	r3, [r0, #13]
   17860:	2a00      	cmp	r2, #0
{
   17862:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   17864:	da06      	bge.n	17874 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1786a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1786c:	4601      	mov	r1, r0
   1786e:	4806      	ldr	r0, [pc, #24]	; (17888 <unready_thread+0x30>)
   17870:	f7ff fd14 	bl	1729c <z_priq_dumb_remove>
	update_cache(thread == _current);
   17874:	4b05      	ldr	r3, [pc, #20]	; (1788c <unready_thread+0x34>)
   17876:	6898      	ldr	r0, [r3, #8]
   17878:	1b03      	subs	r3, r0, r4
   1787a:	4258      	negs	r0, r3
}
   1787c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   17880:	4158      	adcs	r0, r3
   17882:	f7ff bd9b 	b.w	173bc <update_cache>
   17886:	bf00      	nop
   17888:	20001108 	.word	0x20001108
   1788c:	200010e8 	.word	0x200010e8

00017890 <add_to_waitq_locked>:
{
   17890:	b538      	push	{r3, r4, r5, lr}
   17892:	4604      	mov	r4, r0
   17894:	460d      	mov	r5, r1
	unready_thread(thread);
   17896:	f7ff ffdf 	bl	17858 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1789a:	7b63      	ldrb	r3, [r4, #13]
   1789c:	f043 0302 	orr.w	r3, r3, #2
   178a0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   178a2:	b31d      	cbz	r5, 178ec <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   178a4:	4b17      	ldr	r3, [pc, #92]	; (17904 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   178a6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   178a8:	429c      	cmp	r4, r3
   178aa:	d109      	bne.n	178c0 <add_to_waitq_locked+0x30>
   178ac:	4916      	ldr	r1, [pc, #88]	; (17908 <add_to_waitq_locked+0x78>)
   178ae:	4817      	ldr	r0, [pc, #92]	; (1790c <add_to_waitq_locked+0x7c>)
   178b0:	4a17      	ldr	r2, [pc, #92]	; (17910 <add_to_waitq_locked+0x80>)
   178b2:	23ba      	movs	r3, #186	; 0xba
   178b4:	f003 f80a 	bl	1a8cc <printk>
   178b8:	4815      	ldr	r0, [pc, #84]	; (17910 <add_to_waitq_locked+0x80>)
   178ba:	21ba      	movs	r1, #186	; 0xba
   178bc:	f003 f99f 	bl	1abfe <assert_post_action>
	return list->head == list;
   178c0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   178c2:	429d      	cmp	r5, r3
   178c4:	bf08      	it	eq
   178c6:	2300      	moveq	r3, #0
   178c8:	2b00      	cmp	r3, #0
   178ca:	bf38      	it	cc
   178cc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   178ce:	b19b      	cbz	r3, 178f8 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
   178d0:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   178d4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   178d8:	4291      	cmp	r1, r2
   178da:	d008      	beq.n	178ee <add_to_waitq_locked+0x5e>
		return b2 - b1;
   178dc:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   178de:	2a00      	cmp	r2, #0
   178e0:	dd05      	ble.n	178ee <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
   178e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   178e4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   178e8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   178ea:	605c      	str	r4, [r3, #4]
}
   178ec:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   178ee:	686a      	ldr	r2, [r5, #4]
   178f0:	4293      	cmp	r3, r2
   178f2:	d001      	beq.n	178f8 <add_to_waitq_locked+0x68>
   178f4:	681b      	ldr	r3, [r3, #0]
   178f6:	e7ea      	b.n	178ce <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
   178f8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   178fa:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   178fe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17900:	606c      	str	r4, [r5, #4]
   17902:	e7f3      	b.n	178ec <add_to_waitq_locked+0x5c>
   17904:	20000630 	.word	0x20000630
   17908:	000203e9 	.word	0x000203e9
   1790c:	0001d2dc 	.word	0x0001d2dc
   17910:	000203c7 	.word	0x000203c7

00017914 <pend>:
{
   17914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17918:	4604      	mov	r4, r0
   1791a:	460d      	mov	r5, r1
   1791c:	4616      	mov	r6, r2
   1791e:	461f      	mov	r7, r3
	__asm__ volatile(
   17920:	f04f 0320 	mov.w	r3, #32
   17924:	f3ef 8811 	mrs	r8, BASEPRI
   17928:	f383 8812 	msr	BASEPRI_MAX, r3
   1792c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17930:	481f      	ldr	r0, [pc, #124]	; (179b0 <pend+0x9c>)
   17932:	f7fe fc59 	bl	161e8 <z_spin_lock_valid>
   17936:	b968      	cbnz	r0, 17954 <pend+0x40>
   17938:	4a1e      	ldr	r2, [pc, #120]	; (179b4 <pend+0xa0>)
   1793a:	491f      	ldr	r1, [pc, #124]	; (179b8 <pend+0xa4>)
   1793c:	481f      	ldr	r0, [pc, #124]	; (179bc <pend+0xa8>)
   1793e:	2381      	movs	r3, #129	; 0x81
   17940:	f002 ffc4 	bl	1a8cc <printk>
   17944:	491a      	ldr	r1, [pc, #104]	; (179b0 <pend+0x9c>)
   17946:	481e      	ldr	r0, [pc, #120]	; (179c0 <pend+0xac>)
   17948:	f002 ffc0 	bl	1a8cc <printk>
   1794c:	4819      	ldr	r0, [pc, #100]	; (179b4 <pend+0xa0>)
   1794e:	2181      	movs	r1, #129	; 0x81
   17950:	f003 f955 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   17954:	4816      	ldr	r0, [pc, #88]	; (179b0 <pend+0x9c>)
   17956:	f7fe fc65 	bl	16224 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   1795a:	4620      	mov	r0, r4
   1795c:	4629      	mov	r1, r5
   1795e:	f7ff ff97 	bl	17890 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17962:	4813      	ldr	r0, [pc, #76]	; (179b0 <pend+0x9c>)
   17964:	f7fe fc4e 	bl	16204 <z_spin_unlock_valid>
   17968:	b968      	cbnz	r0, 17986 <pend+0x72>
   1796a:	4a12      	ldr	r2, [pc, #72]	; (179b4 <pend+0xa0>)
   1796c:	4915      	ldr	r1, [pc, #84]	; (179c4 <pend+0xb0>)
   1796e:	4813      	ldr	r0, [pc, #76]	; (179bc <pend+0xa8>)
   17970:	23ac      	movs	r3, #172	; 0xac
   17972:	f002 ffab 	bl	1a8cc <printk>
   17976:	490e      	ldr	r1, [pc, #56]	; (179b0 <pend+0x9c>)
   17978:	4813      	ldr	r0, [pc, #76]	; (179c8 <pend+0xb4>)
   1797a:	f002 ffa7 	bl	1a8cc <printk>
   1797e:	480d      	ldr	r0, [pc, #52]	; (179b4 <pend+0xa0>)
   17980:	21ac      	movs	r1, #172	; 0xac
   17982:	f003 f93c 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17986:	f388 8811 	msr	BASEPRI, r8
   1798a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1798e:	1c7b      	adds	r3, r7, #1
   17990:	bf08      	it	eq
   17992:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   17996:	d008      	beq.n	179aa <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   17998:	4632      	mov	r2, r6
   1799a:	463b      	mov	r3, r7
   1799c:	f104 0018 	add.w	r0, r4, #24
   179a0:	490a      	ldr	r1, [pc, #40]	; (179cc <pend+0xb8>)
}
   179a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   179a6:	f000 bd95 	b.w	184d4 <z_add_timeout>
   179aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179ae:	bf00      	nop
   179b0:	20001128 	.word	0x20001128
   179b4:	0001d83f 	.word	0x0001d83f
   179b8:	0001d891 	.word	0x0001d891
   179bc:	0001d2dc 	.word	0x0001d2dc
   179c0:	0001d8a6 	.word	0x0001d8a6
   179c4:	0001d865 	.word	0x0001d865
   179c8:	0001d87c 	.word	0x0001d87c
   179cc:	000177a5 	.word	0x000177a5

000179d0 <z_pend_curr>:
{
   179d0:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   179d2:	4b11      	ldr	r3, [pc, #68]	; (17a18 <z_pend_curr+0x48>)
{
   179d4:	4604      	mov	r4, r0
	pending_current = _current;
   179d6:	6898      	ldr	r0, [r3, #8]
   179d8:	4b10      	ldr	r3, [pc, #64]	; (17a1c <z_pend_curr+0x4c>)
{
   179da:	460d      	mov	r5, r1
	pending_current = _current;
   179dc:	6018      	str	r0, [r3, #0]
{
   179de:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   179e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   179e4:	f7ff ff96 	bl	17914 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   179e8:	4620      	mov	r0, r4
   179ea:	f7fe fc0b 	bl	16204 <z_spin_unlock_valid>
   179ee:	b968      	cbnz	r0, 17a0c <z_pend_curr+0x3c>
   179f0:	4a0b      	ldr	r2, [pc, #44]	; (17a20 <z_pend_curr+0x50>)
   179f2:	490c      	ldr	r1, [pc, #48]	; (17a24 <z_pend_curr+0x54>)
   179f4:	480c      	ldr	r0, [pc, #48]	; (17a28 <z_pend_curr+0x58>)
   179f6:	23c3      	movs	r3, #195	; 0xc3
   179f8:	f002 ff68 	bl	1a8cc <printk>
   179fc:	480b      	ldr	r0, [pc, #44]	; (17a2c <z_pend_curr+0x5c>)
   179fe:	4621      	mov	r1, r4
   17a00:	f002 ff64 	bl	1a8cc <printk>
   17a04:	4806      	ldr	r0, [pc, #24]	; (17a20 <z_pend_curr+0x50>)
   17a06:	21c3      	movs	r1, #195	; 0xc3
   17a08:	f003 f8f9 	bl	1abfe <assert_post_action>
   17a0c:	4628      	mov	r0, r5
}
   17a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17a12:	f7f9 bbf3 	b.w	111fc <arch_swap>
   17a16:	bf00      	nop
   17a18:	200010e8 	.word	0x200010e8
   17a1c:	20001124 	.word	0x20001124
   17a20:	0001d83f 	.word	0x0001d83f
   17a24:	0001d865 	.word	0x0001d865
   17a28:	0001d2dc 	.word	0x0001d2dc
   17a2c:	0001d87c 	.word	0x0001d87c

00017a30 <z_set_prio>:
{
   17a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a32:	4604      	mov	r4, r0
   17a34:	460e      	mov	r6, r1
	__asm__ volatile(
   17a36:	f04f 0320 	mov.w	r3, #32
   17a3a:	f3ef 8711 	mrs	r7, BASEPRI
   17a3e:	f383 8812 	msr	BASEPRI_MAX, r3
   17a42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17a46:	483c      	ldr	r0, [pc, #240]	; (17b38 <z_set_prio+0x108>)
   17a48:	f7fe fbce 	bl	161e8 <z_spin_lock_valid>
   17a4c:	b968      	cbnz	r0, 17a6a <z_set_prio+0x3a>
   17a4e:	4a3b      	ldr	r2, [pc, #236]	; (17b3c <z_set_prio+0x10c>)
   17a50:	493b      	ldr	r1, [pc, #236]	; (17b40 <z_set_prio+0x110>)
   17a52:	483c      	ldr	r0, [pc, #240]	; (17b44 <z_set_prio+0x114>)
   17a54:	2381      	movs	r3, #129	; 0x81
   17a56:	f002 ff39 	bl	1a8cc <printk>
   17a5a:	4937      	ldr	r1, [pc, #220]	; (17b38 <z_set_prio+0x108>)
   17a5c:	483a      	ldr	r0, [pc, #232]	; (17b48 <z_set_prio+0x118>)
   17a5e:	f002 ff35 	bl	1a8cc <printk>
   17a62:	4836      	ldr	r0, [pc, #216]	; (17b3c <z_set_prio+0x10c>)
   17a64:	2181      	movs	r1, #129	; 0x81
   17a66:	f003 f8ca 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   17a6a:	4833      	ldr	r0, [pc, #204]	; (17b38 <z_set_prio+0x108>)
   17a6c:	f7fe fbda 	bl	16224 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17a70:	7b63      	ldrb	r3, [r4, #13]
   17a72:	06da      	lsls	r2, r3, #27
   17a74:	b276      	sxtb	r6, r6
   17a76:	d15c      	bne.n	17b32 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
   17a78:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   17a7a:	2d00      	cmp	r5, #0
   17a7c:	d159      	bne.n	17b32 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17a82:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17a84:	4831      	ldr	r0, [pc, #196]	; (17b4c <z_set_prio+0x11c>)
   17a86:	4621      	mov	r1, r4
   17a88:	f7ff fc08 	bl	1729c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   17a8c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   17a8e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   17a90:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17a94:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17a96:	4b2e      	ldr	r3, [pc, #184]	; (17b50 <z_set_prio+0x120>)
   17a98:	429c      	cmp	r4, r3
   17a9a:	d109      	bne.n	17ab0 <z_set_prio+0x80>
   17a9c:	492d      	ldr	r1, [pc, #180]	; (17b54 <z_set_prio+0x124>)
   17a9e:	4829      	ldr	r0, [pc, #164]	; (17b44 <z_set_prio+0x114>)
   17aa0:	4a2d      	ldr	r2, [pc, #180]	; (17b58 <z_set_prio+0x128>)
   17aa2:	23ba      	movs	r3, #186	; 0xba
   17aa4:	f002 ff12 	bl	1a8cc <printk>
   17aa8:	482b      	ldr	r0, [pc, #172]	; (17b58 <z_set_prio+0x128>)
   17aaa:	21ba      	movs	r1, #186	; 0xba
   17aac:	f003 f8a7 	bl	1abfe <assert_post_action>
	return list->head == list;
   17ab0:	492a      	ldr	r1, [pc, #168]	; (17b5c <z_set_prio+0x12c>)
   17ab2:	460b      	mov	r3, r1
   17ab4:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17ab8:	4298      	cmp	r0, r3
   17aba:	bf18      	it	ne
   17abc:	4605      	movne	r5, r0
   17abe:	2d00      	cmp	r5, #0
   17ac0:	461a      	mov	r2, r3
   17ac2:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17ac4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   17ac6:	bf38      	it	cc
   17ac8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17aca:	b36b      	cbz	r3, 17b28 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
   17acc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   17ad0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   17ad4:	4286      	cmp	r6, r0
   17ad6:	d023      	beq.n	17b20 <z_set_prio+0xf0>
		return b2 - b1;
   17ad8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   17ada:	2800      	cmp	r0, #0
   17adc:	dd20      	ble.n	17b20 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
   17ade:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17ae0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   17ae4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17ae6:	605c      	str	r4, [r3, #4]
			update_cache(1);
   17ae8:	2001      	movs	r0, #1
   17aea:	f7ff fc67 	bl	173bc <update_cache>
   17aee:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17af0:	4811      	ldr	r0, [pc, #68]	; (17b38 <z_set_prio+0x108>)
   17af2:	f7fe fb87 	bl	16204 <z_spin_unlock_valid>
   17af6:	b968      	cbnz	r0, 17b14 <z_set_prio+0xe4>
   17af8:	4a10      	ldr	r2, [pc, #64]	; (17b3c <z_set_prio+0x10c>)
   17afa:	4919      	ldr	r1, [pc, #100]	; (17b60 <z_set_prio+0x130>)
   17afc:	4811      	ldr	r0, [pc, #68]	; (17b44 <z_set_prio+0x114>)
   17afe:	23ac      	movs	r3, #172	; 0xac
   17b00:	f002 fee4 	bl	1a8cc <printk>
   17b04:	490c      	ldr	r1, [pc, #48]	; (17b38 <z_set_prio+0x108>)
   17b06:	4817      	ldr	r0, [pc, #92]	; (17b64 <z_set_prio+0x134>)
   17b08:	f002 fee0 	bl	1a8cc <printk>
   17b0c:	480b      	ldr	r0, [pc, #44]	; (17b3c <z_set_prio+0x10c>)
   17b0e:	21ac      	movs	r1, #172	; 0xac
   17b10:	f003 f875 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17b14:	f387 8811 	msr	BASEPRI, r7
   17b18:	f3bf 8f6f 	isb	sy
}
   17b1c:	4620      	mov	r0, r4
   17b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   17b20:	42ab      	cmp	r3, r5
   17b22:	d001      	beq.n	17b28 <z_set_prio+0xf8>
   17b24:	681b      	ldr	r3, [r3, #0]
   17b26:	e7d0      	b.n	17aca <z_set_prio+0x9a>
	node->prev = tail;
   17b28:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   17b2c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   17b2e:	624c      	str	r4, [r1, #36]	; 0x24
}
   17b30:	e7da      	b.n	17ae8 <z_set_prio+0xb8>
			thread->base.prio = prio;
   17b32:	73a6      	strb	r6, [r4, #14]
   17b34:	2400      	movs	r4, #0
   17b36:	e7db      	b.n	17af0 <z_set_prio+0xc0>
   17b38:	20001128 	.word	0x20001128
   17b3c:	0001d83f 	.word	0x0001d83f
   17b40:	0001d891 	.word	0x0001d891
   17b44:	0001d2dc 	.word	0x0001d2dc
   17b48:	0001d8a6 	.word	0x0001d8a6
   17b4c:	20001108 	.word	0x20001108
   17b50:	20000630 	.word	0x20000630
   17b54:	000203e9 	.word	0x000203e9
   17b58:	000203c7 	.word	0x000203c7
   17b5c:	200010e8 	.word	0x200010e8
   17b60:	0001d865 	.word	0x0001d865
   17b64:	0001d87c 	.word	0x0001d87c

00017b68 <z_impl_k_thread_suspend>:
{
   17b68:	b570      	push	{r4, r5, r6, lr}
   17b6a:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   17b6c:	3018      	adds	r0, #24
   17b6e:	f000 fd85 	bl	1867c <z_abort_timeout>
	__asm__ volatile(
   17b72:	f04f 0320 	mov.w	r3, #32
   17b76:	f3ef 8611 	mrs	r6, BASEPRI
   17b7a:	f383 8812 	msr	BASEPRI_MAX, r3
   17b7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17b82:	4825      	ldr	r0, [pc, #148]	; (17c18 <z_impl_k_thread_suspend+0xb0>)
   17b84:	f7fe fb30 	bl	161e8 <z_spin_lock_valid>
   17b88:	b968      	cbnz	r0, 17ba6 <z_impl_k_thread_suspend+0x3e>
   17b8a:	4a24      	ldr	r2, [pc, #144]	; (17c1c <z_impl_k_thread_suspend+0xb4>)
   17b8c:	4924      	ldr	r1, [pc, #144]	; (17c20 <z_impl_k_thread_suspend+0xb8>)
   17b8e:	4825      	ldr	r0, [pc, #148]	; (17c24 <z_impl_k_thread_suspend+0xbc>)
   17b90:	2381      	movs	r3, #129	; 0x81
   17b92:	f002 fe9b 	bl	1a8cc <printk>
   17b96:	4920      	ldr	r1, [pc, #128]	; (17c18 <z_impl_k_thread_suspend+0xb0>)
   17b98:	4823      	ldr	r0, [pc, #140]	; (17c28 <z_impl_k_thread_suspend+0xc0>)
   17b9a:	f002 fe97 	bl	1a8cc <printk>
   17b9e:	481f      	ldr	r0, [pc, #124]	; (17c1c <z_impl_k_thread_suspend+0xb4>)
   17ba0:	2181      	movs	r1, #129	; 0x81
   17ba2:	f003 f82c 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   17ba6:	481c      	ldr	r0, [pc, #112]	; (17c18 <z_impl_k_thread_suspend+0xb0>)
   17ba8:	f7fe fb3c 	bl	16224 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   17bac:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   17bb0:	7b63      	ldrb	r3, [r4, #13]
   17bb2:	2a00      	cmp	r2, #0
   17bb4:	da06      	bge.n	17bc4 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   17bba:	481c      	ldr	r0, [pc, #112]	; (17c2c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17bbc:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17bbe:	4621      	mov	r1, r4
   17bc0:	f7ff fb6c 	bl	1729c <z_priq_dumb_remove>
		update_cache(thread == _current);
   17bc4:	4d1a      	ldr	r5, [pc, #104]	; (17c30 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17bc6:	7b63      	ldrb	r3, [r4, #13]
   17bc8:	68a8      	ldr	r0, [r5, #8]
   17bca:	f043 0310 	orr.w	r3, r3, #16
   17bce:	7363      	strb	r3, [r4, #13]
   17bd0:	1b03      	subs	r3, r0, r4
   17bd2:	4258      	negs	r0, r3
   17bd4:	4158      	adcs	r0, r3
   17bd6:	f7ff fbf1 	bl	173bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17bda:	480f      	ldr	r0, [pc, #60]	; (17c18 <z_impl_k_thread_suspend+0xb0>)
   17bdc:	f7fe fb12 	bl	16204 <z_spin_unlock_valid>
   17be0:	b968      	cbnz	r0, 17bfe <z_impl_k_thread_suspend+0x96>
   17be2:	4a0e      	ldr	r2, [pc, #56]	; (17c1c <z_impl_k_thread_suspend+0xb4>)
   17be4:	4913      	ldr	r1, [pc, #76]	; (17c34 <z_impl_k_thread_suspend+0xcc>)
   17be6:	480f      	ldr	r0, [pc, #60]	; (17c24 <z_impl_k_thread_suspend+0xbc>)
   17be8:	23ac      	movs	r3, #172	; 0xac
   17bea:	f002 fe6f 	bl	1a8cc <printk>
   17bee:	490a      	ldr	r1, [pc, #40]	; (17c18 <z_impl_k_thread_suspend+0xb0>)
   17bf0:	4811      	ldr	r0, [pc, #68]	; (17c38 <z_impl_k_thread_suspend+0xd0>)
   17bf2:	f002 fe6b 	bl	1a8cc <printk>
   17bf6:	4809      	ldr	r0, [pc, #36]	; (17c1c <z_impl_k_thread_suspend+0xb4>)
   17bf8:	21ac      	movs	r1, #172	; 0xac
   17bfa:	f003 f800 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17bfe:	f386 8811 	msr	BASEPRI, r6
   17c02:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   17c06:	68ab      	ldr	r3, [r5, #8]
   17c08:	42a3      	cmp	r3, r4
   17c0a:	d103      	bne.n	17c14 <z_impl_k_thread_suspend+0xac>
}
   17c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   17c10:	f003 bef1 	b.w	1b9f6 <z_reschedule_unlocked>
}
   17c14:	bd70      	pop	{r4, r5, r6, pc}
   17c16:	bf00      	nop
   17c18:	20001128 	.word	0x20001128
   17c1c:	0001d83f 	.word	0x0001d83f
   17c20:	0001d891 	.word	0x0001d891
   17c24:	0001d2dc 	.word	0x0001d2dc
   17c28:	0001d8a6 	.word	0x0001d8a6
   17c2c:	20001108 	.word	0x20001108
   17c30:	200010e8 	.word	0x200010e8
   17c34:	0001d865 	.word	0x0001d865
   17c38:	0001d87c 	.word	0x0001d87c

00017c3c <k_sched_unlock>:
{
   17c3c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   17c3e:	f04f 0320 	mov.w	r3, #32
   17c42:	f3ef 8511 	mrs	r5, BASEPRI
   17c46:	f383 8812 	msr	BASEPRI_MAX, r3
   17c4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17c4e:	482d      	ldr	r0, [pc, #180]	; (17d04 <k_sched_unlock+0xc8>)
   17c50:	f7fe faca 	bl	161e8 <z_spin_lock_valid>
   17c54:	b968      	cbnz	r0, 17c72 <k_sched_unlock+0x36>
   17c56:	4a2c      	ldr	r2, [pc, #176]	; (17d08 <k_sched_unlock+0xcc>)
   17c58:	492c      	ldr	r1, [pc, #176]	; (17d0c <k_sched_unlock+0xd0>)
   17c5a:	482d      	ldr	r0, [pc, #180]	; (17d10 <k_sched_unlock+0xd4>)
   17c5c:	2381      	movs	r3, #129	; 0x81
   17c5e:	f002 fe35 	bl	1a8cc <printk>
   17c62:	4928      	ldr	r1, [pc, #160]	; (17d04 <k_sched_unlock+0xc8>)
   17c64:	482b      	ldr	r0, [pc, #172]	; (17d14 <k_sched_unlock+0xd8>)
   17c66:	f002 fe31 	bl	1a8cc <printk>
   17c6a:	4827      	ldr	r0, [pc, #156]	; (17d08 <k_sched_unlock+0xcc>)
   17c6c:	2181      	movs	r1, #129	; 0x81
   17c6e:	f002 ffc6 	bl	1abfe <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   17c72:	4c29      	ldr	r4, [pc, #164]	; (17d18 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   17c74:	4823      	ldr	r0, [pc, #140]	; (17d04 <k_sched_unlock+0xc8>)
   17c76:	f7fe fad5 	bl	16224 <z_spin_lock_set_owner>
   17c7a:	68a2      	ldr	r2, [r4, #8]
   17c7c:	7bd2      	ldrb	r2, [r2, #15]
   17c7e:	b972      	cbnz	r2, 17c9e <k_sched_unlock+0x62>
   17c80:	4926      	ldr	r1, [pc, #152]	; (17d1c <k_sched_unlock+0xe0>)
   17c82:	4a27      	ldr	r2, [pc, #156]	; (17d20 <k_sched_unlock+0xe4>)
   17c84:	4822      	ldr	r0, [pc, #136]	; (17d10 <k_sched_unlock+0xd4>)
   17c86:	f240 3385 	movw	r3, #901	; 0x385
   17c8a:	f002 fe1f 	bl	1a8cc <printk>
   17c8e:	4825      	ldr	r0, [pc, #148]	; (17d24 <k_sched_unlock+0xe8>)
   17c90:	f002 fe1c 	bl	1a8cc <printk>
   17c94:	4822      	ldr	r0, [pc, #136]	; (17d20 <k_sched_unlock+0xe4>)
   17c96:	f240 3185 	movw	r1, #901	; 0x385
   17c9a:	f002 ffb0 	bl	1abfe <assert_post_action>
   17c9e:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   17ca2:	b173      	cbz	r3, 17cc2 <k_sched_unlock+0x86>
   17ca4:	4920      	ldr	r1, [pc, #128]	; (17d28 <k_sched_unlock+0xec>)
   17ca6:	4a1e      	ldr	r2, [pc, #120]	; (17d20 <k_sched_unlock+0xe4>)
   17ca8:	4819      	ldr	r0, [pc, #100]	; (17d10 <k_sched_unlock+0xd4>)
   17caa:	f240 3386 	movw	r3, #902	; 0x386
   17cae:	f002 fe0d 	bl	1a8cc <printk>
   17cb2:	481c      	ldr	r0, [pc, #112]	; (17d24 <k_sched_unlock+0xe8>)
   17cb4:	f002 fe0a 	bl	1a8cc <printk>
   17cb8:	4819      	ldr	r0, [pc, #100]	; (17d20 <k_sched_unlock+0xe4>)
   17cba:	f240 3186 	movw	r1, #902	; 0x386
   17cbe:	f002 ff9e 	bl	1abfe <assert_post_action>
		++_current->base.sched_locked;
   17cc2:	68a2      	ldr	r2, [r4, #8]
   17cc4:	7bd3      	ldrb	r3, [r2, #15]
   17cc6:	3301      	adds	r3, #1
		update_cache(0);
   17cc8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   17cca:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   17ccc:	f7ff fb76 	bl	173bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17cd0:	480c      	ldr	r0, [pc, #48]	; (17d04 <k_sched_unlock+0xc8>)
   17cd2:	f7fe fa97 	bl	16204 <z_spin_unlock_valid>
   17cd6:	b968      	cbnz	r0, 17cf4 <k_sched_unlock+0xb8>
   17cd8:	4a0b      	ldr	r2, [pc, #44]	; (17d08 <k_sched_unlock+0xcc>)
   17cda:	4914      	ldr	r1, [pc, #80]	; (17d2c <k_sched_unlock+0xf0>)
   17cdc:	480c      	ldr	r0, [pc, #48]	; (17d10 <k_sched_unlock+0xd4>)
   17cde:	23ac      	movs	r3, #172	; 0xac
   17ce0:	f002 fdf4 	bl	1a8cc <printk>
   17ce4:	4907      	ldr	r1, [pc, #28]	; (17d04 <k_sched_unlock+0xc8>)
   17ce6:	4812      	ldr	r0, [pc, #72]	; (17d30 <k_sched_unlock+0xf4>)
   17ce8:	f002 fdf0 	bl	1a8cc <printk>
   17cec:	4806      	ldr	r0, [pc, #24]	; (17d08 <k_sched_unlock+0xcc>)
   17cee:	21ac      	movs	r1, #172	; 0xac
   17cf0:	f002 ff85 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17cf4:	f385 8811 	msr	BASEPRI, r5
   17cf8:	f3bf 8f6f 	isb	sy
}
   17cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   17d00:	f003 be79 	b.w	1b9f6 <z_reschedule_unlocked>
   17d04:	20001128 	.word	0x20001128
   17d08:	0001d83f 	.word	0x0001d83f
   17d0c:	0001d891 	.word	0x0001d891
   17d10:	0001d2dc 	.word	0x0001d2dc
   17d14:	0001d8a6 	.word	0x0001d8a6
   17d18:	200010e8 	.word	0x200010e8
   17d1c:	00020448 	.word	0x00020448
   17d20:	000203c7 	.word	0x000203c7
   17d24:	0002027e 	.word	0x0002027e
   17d28:	00020148 	.word	0x00020148
   17d2c:	0001d865 	.word	0x0001d865
   17d30:	0001d87c 	.word	0x0001d87c

00017d34 <z_unpend1_no_timeout>:
{
   17d34:	b538      	push	{r3, r4, r5, lr}
   17d36:	4604      	mov	r4, r0
	__asm__ volatile(
   17d38:	f04f 0320 	mov.w	r3, #32
   17d3c:	f3ef 8511 	mrs	r5, BASEPRI
   17d40:	f383 8812 	msr	BASEPRI_MAX, r3
   17d44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17d48:	4819      	ldr	r0, [pc, #100]	; (17db0 <z_unpend1_no_timeout+0x7c>)
   17d4a:	f7fe fa4d 	bl	161e8 <z_spin_lock_valid>
   17d4e:	b968      	cbnz	r0, 17d6c <z_unpend1_no_timeout+0x38>
   17d50:	4a18      	ldr	r2, [pc, #96]	; (17db4 <z_unpend1_no_timeout+0x80>)
   17d52:	4919      	ldr	r1, [pc, #100]	; (17db8 <z_unpend1_no_timeout+0x84>)
   17d54:	4819      	ldr	r0, [pc, #100]	; (17dbc <z_unpend1_no_timeout+0x88>)
   17d56:	2381      	movs	r3, #129	; 0x81
   17d58:	f002 fdb8 	bl	1a8cc <printk>
   17d5c:	4914      	ldr	r1, [pc, #80]	; (17db0 <z_unpend1_no_timeout+0x7c>)
   17d5e:	4818      	ldr	r0, [pc, #96]	; (17dc0 <z_unpend1_no_timeout+0x8c>)
   17d60:	f002 fdb4 	bl	1a8cc <printk>
   17d64:	4813      	ldr	r0, [pc, #76]	; (17db4 <z_unpend1_no_timeout+0x80>)
   17d66:	2181      	movs	r1, #129	; 0x81
   17d68:	f002 ff49 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   17d6c:	4810      	ldr	r0, [pc, #64]	; (17db0 <z_unpend1_no_timeout+0x7c>)
   17d6e:	f7fe fa59 	bl	16224 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   17d72:	4620      	mov	r0, r4
   17d74:	f003 fe49 	bl	1ba0a <z_priq_dumb_best>
		if (thread != NULL) {
   17d78:	4604      	mov	r4, r0
   17d7a:	b108      	cbz	r0, 17d80 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   17d7c:	f7ff fab0 	bl	172e0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d80:	480b      	ldr	r0, [pc, #44]	; (17db0 <z_unpend1_no_timeout+0x7c>)
   17d82:	f7fe fa3f 	bl	16204 <z_spin_unlock_valid>
   17d86:	b968      	cbnz	r0, 17da4 <z_unpend1_no_timeout+0x70>
   17d88:	4a0a      	ldr	r2, [pc, #40]	; (17db4 <z_unpend1_no_timeout+0x80>)
   17d8a:	490e      	ldr	r1, [pc, #56]	; (17dc4 <z_unpend1_no_timeout+0x90>)
   17d8c:	480b      	ldr	r0, [pc, #44]	; (17dbc <z_unpend1_no_timeout+0x88>)
   17d8e:	23ac      	movs	r3, #172	; 0xac
   17d90:	f002 fd9c 	bl	1a8cc <printk>
   17d94:	4906      	ldr	r1, [pc, #24]	; (17db0 <z_unpend1_no_timeout+0x7c>)
   17d96:	480c      	ldr	r0, [pc, #48]	; (17dc8 <z_unpend1_no_timeout+0x94>)
   17d98:	f002 fd98 	bl	1a8cc <printk>
   17d9c:	4805      	ldr	r0, [pc, #20]	; (17db4 <z_unpend1_no_timeout+0x80>)
   17d9e:	21ac      	movs	r1, #172	; 0xac
   17da0:	f002 ff2d 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17da4:	f385 8811 	msr	BASEPRI, r5
   17da8:	f3bf 8f6f 	isb	sy
}
   17dac:	4620      	mov	r0, r4
   17dae:	bd38      	pop	{r3, r4, r5, pc}
   17db0:	20001128 	.word	0x20001128
   17db4:	0001d83f 	.word	0x0001d83f
   17db8:	0001d891 	.word	0x0001d891
   17dbc:	0001d2dc 	.word	0x0001d2dc
   17dc0:	0001d8a6 	.word	0x0001d8a6
   17dc4:	0001d865 	.word	0x0001d865
   17dc8:	0001d87c 	.word	0x0001d87c

00017dcc <z_unpend_first_thread>:
{
   17dcc:	b538      	push	{r3, r4, r5, lr}
   17dce:	4604      	mov	r4, r0
	__asm__ volatile(
   17dd0:	f04f 0320 	mov.w	r3, #32
   17dd4:	f3ef 8511 	mrs	r5, BASEPRI
   17dd8:	f383 8812 	msr	BASEPRI_MAX, r3
   17ddc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17de0:	481b      	ldr	r0, [pc, #108]	; (17e50 <z_unpend_first_thread+0x84>)
   17de2:	f7fe fa01 	bl	161e8 <z_spin_lock_valid>
   17de6:	b968      	cbnz	r0, 17e04 <z_unpend_first_thread+0x38>
   17de8:	4a1a      	ldr	r2, [pc, #104]	; (17e54 <z_unpend_first_thread+0x88>)
   17dea:	491b      	ldr	r1, [pc, #108]	; (17e58 <z_unpend_first_thread+0x8c>)
   17dec:	481b      	ldr	r0, [pc, #108]	; (17e5c <z_unpend_first_thread+0x90>)
   17dee:	2381      	movs	r3, #129	; 0x81
   17df0:	f002 fd6c 	bl	1a8cc <printk>
   17df4:	4916      	ldr	r1, [pc, #88]	; (17e50 <z_unpend_first_thread+0x84>)
   17df6:	481a      	ldr	r0, [pc, #104]	; (17e60 <z_unpend_first_thread+0x94>)
   17df8:	f002 fd68 	bl	1a8cc <printk>
   17dfc:	4815      	ldr	r0, [pc, #84]	; (17e54 <z_unpend_first_thread+0x88>)
   17dfe:	2181      	movs	r1, #129	; 0x81
   17e00:	f002 fefd 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   17e04:	4812      	ldr	r0, [pc, #72]	; (17e50 <z_unpend_first_thread+0x84>)
   17e06:	f7fe fa0d 	bl	16224 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   17e0a:	4620      	mov	r0, r4
   17e0c:	f003 fdfd 	bl	1ba0a <z_priq_dumb_best>
		if (thread != NULL) {
   17e10:	4604      	mov	r4, r0
   17e12:	b128      	cbz	r0, 17e20 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   17e14:	f7ff fa64 	bl	172e0 <unpend_thread_no_timeout>
   17e18:	f104 0018 	add.w	r0, r4, #24
   17e1c:	f000 fc2e 	bl	1867c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e20:	480b      	ldr	r0, [pc, #44]	; (17e50 <z_unpend_first_thread+0x84>)
   17e22:	f7fe f9ef 	bl	16204 <z_spin_unlock_valid>
   17e26:	b968      	cbnz	r0, 17e44 <z_unpend_first_thread+0x78>
   17e28:	4a0a      	ldr	r2, [pc, #40]	; (17e54 <z_unpend_first_thread+0x88>)
   17e2a:	490e      	ldr	r1, [pc, #56]	; (17e64 <z_unpend_first_thread+0x98>)
   17e2c:	480b      	ldr	r0, [pc, #44]	; (17e5c <z_unpend_first_thread+0x90>)
   17e2e:	23ac      	movs	r3, #172	; 0xac
   17e30:	f002 fd4c 	bl	1a8cc <printk>
   17e34:	4906      	ldr	r1, [pc, #24]	; (17e50 <z_unpend_first_thread+0x84>)
   17e36:	480c      	ldr	r0, [pc, #48]	; (17e68 <z_unpend_first_thread+0x9c>)
   17e38:	f002 fd48 	bl	1a8cc <printk>
   17e3c:	4805      	ldr	r0, [pc, #20]	; (17e54 <z_unpend_first_thread+0x88>)
   17e3e:	21ac      	movs	r1, #172	; 0xac
   17e40:	f002 fedd 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17e44:	f385 8811 	msr	BASEPRI, r5
   17e48:	f3bf 8f6f 	isb	sy
}
   17e4c:	4620      	mov	r0, r4
   17e4e:	bd38      	pop	{r3, r4, r5, pc}
   17e50:	20001128 	.word	0x20001128
   17e54:	0001d83f 	.word	0x0001d83f
   17e58:	0001d891 	.word	0x0001d891
   17e5c:	0001d2dc 	.word	0x0001d2dc
   17e60:	0001d8a6 	.word	0x0001d8a6
   17e64:	0001d865 	.word	0x0001d865
   17e68:	0001d87c 	.word	0x0001d87c

00017e6c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   17e6c:	4b04      	ldr	r3, [pc, #16]	; (17e80 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   17e6e:	2100      	movs	r1, #0
   17e70:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   17e74:	e9c3 2208 	strd	r2, r2, [r3, #32]
   17e78:	4608      	mov	r0, r1
   17e7a:	f7ff b8a9 	b.w	16fd0 <k_sched_time_slice_set>
   17e7e:	bf00      	nop
   17e80:	200010e8 	.word	0x200010e8

00017e84 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   17e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e86:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   17e8a:	b173      	cbz	r3, 17eaa <z_impl_k_yield+0x26>
   17e8c:	4941      	ldr	r1, [pc, #260]	; (17f94 <z_impl_k_yield+0x110>)
   17e8e:	4a42      	ldr	r2, [pc, #264]	; (17f98 <z_impl_k_yield+0x114>)
   17e90:	4842      	ldr	r0, [pc, #264]	; (17f9c <z_impl_k_yield+0x118>)
   17e92:	f240 43dc 	movw	r3, #1244	; 0x4dc
   17e96:	f002 fd19 	bl	1a8cc <printk>
   17e9a:	4841      	ldr	r0, [pc, #260]	; (17fa0 <z_impl_k_yield+0x11c>)
   17e9c:	f002 fd16 	bl	1a8cc <printk>
   17ea0:	483d      	ldr	r0, [pc, #244]	; (17f98 <z_impl_k_yield+0x114>)
   17ea2:	f240 41dc 	movw	r1, #1244	; 0x4dc
   17ea6:	f002 feaa 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   17eaa:	f04f 0320 	mov.w	r3, #32
   17eae:	f3ef 8611 	mrs	r6, BASEPRI
   17eb2:	f383 8812 	msr	BASEPRI_MAX, r3
   17eb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17eba:	483a      	ldr	r0, [pc, #232]	; (17fa4 <z_impl_k_yield+0x120>)
   17ebc:	f7fe f994 	bl	161e8 <z_spin_lock_valid>
   17ec0:	b968      	cbnz	r0, 17ede <z_impl_k_yield+0x5a>
   17ec2:	4a39      	ldr	r2, [pc, #228]	; (17fa8 <z_impl_k_yield+0x124>)
   17ec4:	4939      	ldr	r1, [pc, #228]	; (17fac <z_impl_k_yield+0x128>)
   17ec6:	4835      	ldr	r0, [pc, #212]	; (17f9c <z_impl_k_yield+0x118>)
   17ec8:	2381      	movs	r3, #129	; 0x81
   17eca:	f002 fcff 	bl	1a8cc <printk>
   17ece:	4935      	ldr	r1, [pc, #212]	; (17fa4 <z_impl_k_yield+0x120>)
   17ed0:	4837      	ldr	r0, [pc, #220]	; (17fb0 <z_impl_k_yield+0x12c>)
   17ed2:	f002 fcfb 	bl	1a8cc <printk>
   17ed6:	4834      	ldr	r0, [pc, #208]	; (17fa8 <z_impl_k_yield+0x124>)
   17ed8:	2181      	movs	r1, #129	; 0x81
   17eda:	f002 fe90 	bl	1abfe <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   17ede:	4d35      	ldr	r5, [pc, #212]	; (17fb4 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
   17ee0:	4830      	ldr	r0, [pc, #192]	; (17fa4 <z_impl_k_yield+0x120>)
   17ee2:	f7fe f99f 	bl	16224 <z_spin_lock_set_owner>
   17ee6:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17ee8:	7b4b      	ldrb	r3, [r1, #13]
   17eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17eee:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17ef0:	f105 0020 	add.w	r0, r5, #32
   17ef4:	f7ff f9d2 	bl	1729c <z_priq_dumb_remove>
	}
	queue_thread(_current);
   17ef8:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   17efa:	7b63      	ldrb	r3, [r4, #13]
   17efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17f00:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17f02:	4b2d      	ldr	r3, [pc, #180]	; (17fb8 <z_impl_k_yield+0x134>)
   17f04:	429c      	cmp	r4, r3
   17f06:	d109      	bne.n	17f1c <z_impl_k_yield+0x98>
   17f08:	492c      	ldr	r1, [pc, #176]	; (17fbc <z_impl_k_yield+0x138>)
   17f0a:	4824      	ldr	r0, [pc, #144]	; (17f9c <z_impl_k_yield+0x118>)
   17f0c:	4a22      	ldr	r2, [pc, #136]	; (17f98 <z_impl_k_yield+0x114>)
   17f0e:	23ba      	movs	r3, #186	; 0xba
   17f10:	f002 fcdc 	bl	1a8cc <printk>
   17f14:	4820      	ldr	r0, [pc, #128]	; (17f98 <z_impl_k_yield+0x114>)
   17f16:	21ba      	movs	r1, #186	; 0xba
   17f18:	f002 fe71 	bl	1abfe <assert_post_action>
	return list->head == list;
   17f1c:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17f1e:	4828      	ldr	r0, [pc, #160]	; (17fc0 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17f20:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17f22:	4283      	cmp	r3, r0
   17f24:	bf08      	it	eq
   17f26:	2300      	moveq	r3, #0
   17f28:	2b00      	cmp	r3, #0
   17f2a:	bf38      	it	cc
   17f2c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17f2e:	b35b      	cbz	r3, 17f88 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
   17f30:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   17f34:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   17f38:	4297      	cmp	r7, r2
   17f3a:	d021      	beq.n	17f80 <z_impl_k_yield+0xfc>
		return b2 - b1;
   17f3c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   17f3e:	2a00      	cmp	r2, #0
   17f40:	dd1e      	ble.n	17f80 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
   17f42:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17f44:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   17f48:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17f4a:	605c      	str	r4, [r3, #4]
	update_cache(1);
   17f4c:	2001      	movs	r0, #1
   17f4e:	f7ff fa35 	bl	173bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17f52:	4814      	ldr	r0, [pc, #80]	; (17fa4 <z_impl_k_yield+0x120>)
   17f54:	f7fe f956 	bl	16204 <z_spin_unlock_valid>
   17f58:	b968      	cbnz	r0, 17f76 <z_impl_k_yield+0xf2>
   17f5a:	4a13      	ldr	r2, [pc, #76]	; (17fa8 <z_impl_k_yield+0x124>)
   17f5c:	4919      	ldr	r1, [pc, #100]	; (17fc4 <z_impl_k_yield+0x140>)
   17f5e:	480f      	ldr	r0, [pc, #60]	; (17f9c <z_impl_k_yield+0x118>)
   17f60:	23c3      	movs	r3, #195	; 0xc3
   17f62:	f002 fcb3 	bl	1a8cc <printk>
   17f66:	490f      	ldr	r1, [pc, #60]	; (17fa4 <z_impl_k_yield+0x120>)
   17f68:	4817      	ldr	r0, [pc, #92]	; (17fc8 <z_impl_k_yield+0x144>)
   17f6a:	f002 fcaf 	bl	1a8cc <printk>
   17f6e:	480e      	ldr	r0, [pc, #56]	; (17fa8 <z_impl_k_yield+0x124>)
   17f70:	21c3      	movs	r1, #195	; 0xc3
   17f72:	f002 fe44 	bl	1abfe <assert_post_action>
   17f76:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   17f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   17f7c:	f7f9 b93e 	b.w	111fc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   17f80:	428b      	cmp	r3, r1
   17f82:	d001      	beq.n	17f88 <z_impl_k_yield+0x104>
   17f84:	681b      	ldr	r3, [r3, #0]
   17f86:	e7d2      	b.n	17f2e <z_impl_k_yield+0xaa>
	node->prev = tail;
   17f88:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   17f8c:	600c      	str	r4, [r1, #0]
	list->tail = node;
   17f8e:	626c      	str	r4, [r5, #36]	; 0x24
}
   17f90:	e7dc      	b.n	17f4c <z_impl_k_yield+0xc8>
   17f92:	bf00      	nop
   17f94:	00020148 	.word	0x00020148
   17f98:	000203c7 	.word	0x000203c7
   17f9c:	0001d2dc 	.word	0x0001d2dc
   17fa0:	0002027e 	.word	0x0002027e
   17fa4:	20001128 	.word	0x20001128
   17fa8:	0001d83f 	.word	0x0001d83f
   17fac:	0001d891 	.word	0x0001d891
   17fb0:	0001d8a6 	.word	0x0001d8a6
   17fb4:	200010e8 	.word	0x200010e8
   17fb8:	20000630 	.word	0x20000630
   17fbc:	000203e9 	.word	0x000203e9
   17fc0:	20001108 	.word	0x20001108
   17fc4:	0001d865 	.word	0x0001d865
   17fc8:	0001d87c 	.word	0x0001d87c

00017fcc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   17fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17fd0:	4604      	mov	r4, r0
   17fd2:	460d      	mov	r5, r1
   17fd4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   17fd8:	b173      	cbz	r3, 17ff8 <z_tick_sleep+0x2c>
   17fda:	4945      	ldr	r1, [pc, #276]	; (180f0 <z_tick_sleep+0x124>)
   17fdc:	4a45      	ldr	r2, [pc, #276]	; (180f4 <z_tick_sleep+0x128>)
   17fde:	4846      	ldr	r0, [pc, #280]	; (180f8 <z_tick_sleep+0x12c>)
   17fe0:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
   17fe4:	f002 fc72 	bl	1a8cc <printk>
   17fe8:	4844      	ldr	r0, [pc, #272]	; (180fc <z_tick_sleep+0x130>)
   17fea:	f002 fc6f 	bl	1a8cc <printk>
   17fee:	4841      	ldr	r0, [pc, #260]	; (180f4 <z_tick_sleep+0x128>)
   17ff0:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   17ff4:	f002 fe03 	bl	1abfe <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   17ff8:	ea54 0305 	orrs.w	r3, r4, r5
   17ffc:	d104      	bne.n	18008 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   17ffe:	f7ff ff41 	bl	17e84 <z_impl_k_yield>
		k_yield();
		return 0;
   18002:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   18004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   18008:	f06f 0301 	mvn.w	r3, #1
   1800c:	1b1e      	subs	r6, r3, r4
   1800e:	f04f 33ff 	mov.w	r3, #4294967295
   18012:	eb63 0705 	sbc.w	r7, r3, r5
   18016:	2e01      	cmp	r6, #1
   18018:	f177 0300 	sbcs.w	r3, r7, #0
   1801c:	da64      	bge.n	180e8 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1801e:	f003 fd0e 	bl	1ba3e <sys_clock_tick_get_32>
   18022:	1906      	adds	r6, r0, r4
   18024:	f04f 0320 	mov.w	r3, #32
   18028:	f3ef 8811 	mrs	r8, BASEPRI
   1802c:	f383 8812 	msr	BASEPRI_MAX, r3
   18030:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18034:	4832      	ldr	r0, [pc, #200]	; (18100 <z_tick_sleep+0x134>)
   18036:	f7fe f8d7 	bl	161e8 <z_spin_lock_valid>
   1803a:	b968      	cbnz	r0, 18058 <z_tick_sleep+0x8c>
   1803c:	4a31      	ldr	r2, [pc, #196]	; (18104 <z_tick_sleep+0x138>)
   1803e:	4932      	ldr	r1, [pc, #200]	; (18108 <z_tick_sleep+0x13c>)
   18040:	482d      	ldr	r0, [pc, #180]	; (180f8 <z_tick_sleep+0x12c>)
   18042:	2381      	movs	r3, #129	; 0x81
   18044:	f002 fc42 	bl	1a8cc <printk>
   18048:	492d      	ldr	r1, [pc, #180]	; (18100 <z_tick_sleep+0x134>)
   1804a:	4830      	ldr	r0, [pc, #192]	; (1810c <z_tick_sleep+0x140>)
   1804c:	f002 fc3e 	bl	1a8cc <printk>
   18050:	482c      	ldr	r0, [pc, #176]	; (18104 <z_tick_sleep+0x138>)
   18052:	2181      	movs	r1, #129	; 0x81
   18054:	f002 fdd3 	bl	1abfe <assert_post_action>
	pending_current = _current;
   18058:	4f2d      	ldr	r7, [pc, #180]	; (18110 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
   1805a:	4829      	ldr	r0, [pc, #164]	; (18100 <z_tick_sleep+0x134>)
   1805c:	f7fe f8e2 	bl	16224 <z_spin_lock_set_owner>
   18060:	4b2c      	ldr	r3, [pc, #176]	; (18114 <z_tick_sleep+0x148>)
   18062:	68b8      	ldr	r0, [r7, #8]
   18064:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   18066:	f7ff fbf7 	bl	17858 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1806a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1806c:	492a      	ldr	r1, [pc, #168]	; (18118 <z_tick_sleep+0x14c>)
   1806e:	4622      	mov	r2, r4
   18070:	462b      	mov	r3, r5
   18072:	3018      	adds	r0, #24
   18074:	f000 fa2e 	bl	184d4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   18078:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1807a:	4821      	ldr	r0, [pc, #132]	; (18100 <z_tick_sleep+0x134>)
   1807c:	7b53      	ldrb	r3, [r2, #13]
   1807e:	f043 0310 	orr.w	r3, r3, #16
   18082:	7353      	strb	r3, [r2, #13]
   18084:	f7fe f8be 	bl	16204 <z_spin_unlock_valid>
   18088:	b968      	cbnz	r0, 180a6 <z_tick_sleep+0xda>
   1808a:	4a1e      	ldr	r2, [pc, #120]	; (18104 <z_tick_sleep+0x138>)
   1808c:	4923      	ldr	r1, [pc, #140]	; (1811c <z_tick_sleep+0x150>)
   1808e:	481a      	ldr	r0, [pc, #104]	; (180f8 <z_tick_sleep+0x12c>)
   18090:	23c3      	movs	r3, #195	; 0xc3
   18092:	f002 fc1b 	bl	1a8cc <printk>
   18096:	491a      	ldr	r1, [pc, #104]	; (18100 <z_tick_sleep+0x134>)
   18098:	4821      	ldr	r0, [pc, #132]	; (18120 <z_tick_sleep+0x154>)
   1809a:	f002 fc17 	bl	1a8cc <printk>
   1809e:	4819      	ldr	r0, [pc, #100]	; (18104 <z_tick_sleep+0x138>)
   180a0:	21c3      	movs	r1, #195	; 0xc3
   180a2:	f002 fdac 	bl	1abfe <assert_post_action>
   180a6:	4640      	mov	r0, r8
   180a8:	f7f9 f8a8 	bl	111fc <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   180ac:	68bb      	ldr	r3, [r7, #8]
   180ae:	7b5b      	ldrb	r3, [r3, #13]
   180b0:	06db      	lsls	r3, r3, #27
   180b2:	d50e      	bpl.n	180d2 <z_tick_sleep+0x106>
   180b4:	491b      	ldr	r1, [pc, #108]	; (18124 <z_tick_sleep+0x158>)
   180b6:	4a0f      	ldr	r2, [pc, #60]	; (180f4 <z_tick_sleep+0x128>)
   180b8:	480f      	ldr	r0, [pc, #60]	; (180f8 <z_tick_sleep+0x12c>)
   180ba:	f240 5319 	movw	r3, #1305	; 0x519
   180be:	f002 fc05 	bl	1a8cc <printk>
   180c2:	480e      	ldr	r0, [pc, #56]	; (180fc <z_tick_sleep+0x130>)
   180c4:	f002 fc02 	bl	1a8cc <printk>
   180c8:	480a      	ldr	r0, [pc, #40]	; (180f4 <z_tick_sleep+0x128>)
   180ca:	f240 5119 	movw	r1, #1305	; 0x519
   180ce:	f002 fd96 	bl	1abfe <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   180d2:	f003 fcb4 	bl	1ba3e <sys_clock_tick_get_32>
   180d6:	1a30      	subs	r0, r6, r0
   180d8:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   180dc:	2801      	cmp	r0, #1
   180de:	f171 0300 	sbcs.w	r3, r1, #0
   180e2:	bfb8      	it	lt
   180e4:	2000      	movlt	r0, #0
   180e6:	e78d      	b.n	18004 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   180e8:	f06f 0601 	mvn.w	r6, #1
   180ec:	1b36      	subs	r6, r6, r4
   180ee:	e799      	b.n	18024 <z_tick_sleep+0x58>
   180f0:	00020148 	.word	0x00020148
   180f4:	000203c7 	.word	0x000203c7
   180f8:	0001d2dc 	.word	0x0001d2dc
   180fc:	0002027e 	.word	0x0002027e
   18100:	20001128 	.word	0x20001128
   18104:	0001d83f 	.word	0x0001d83f
   18108:	0001d891 	.word	0x0001d891
   1810c:	0001d8a6 	.word	0x0001d8a6
   18110:	200010e8 	.word	0x200010e8
   18114:	20001124 	.word	0x20001124
   18118:	000177a5 	.word	0x000177a5
   1811c:	0001d865 	.word	0x0001d865
   18120:	0001d87c 	.word	0x0001d87c
   18124:	00020479 	.word	0x00020479

00018128 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   18128:	b538      	push	{r3, r4, r5, lr}
   1812a:	4604      	mov	r4, r0
   1812c:	460d      	mov	r5, r1
   1812e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   18132:	b173      	cbz	r3, 18152 <z_impl_k_sleep+0x2a>
   18134:	4913      	ldr	r1, [pc, #76]	; (18184 <z_impl_k_sleep+0x5c>)
   18136:	4a14      	ldr	r2, [pc, #80]	; (18188 <z_impl_k_sleep+0x60>)
   18138:	4814      	ldr	r0, [pc, #80]	; (1818c <z_impl_k_sleep+0x64>)
   1813a:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   1813e:	f002 fbc5 	bl	1a8cc <printk>
   18142:	4813      	ldr	r0, [pc, #76]	; (18190 <z_impl_k_sleep+0x68>)
   18144:	f002 fbc2 	bl	1a8cc <printk>
   18148:	480f      	ldr	r0, [pc, #60]	; (18188 <z_impl_k_sleep+0x60>)
   1814a:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   1814e:	f002 fd56 	bl	1abfe <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18152:	1c6b      	adds	r3, r5, #1
   18154:	bf08      	it	eq
   18156:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1815a:	d106      	bne.n	1816a <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   1815c:	4b0d      	ldr	r3, [pc, #52]	; (18194 <z_impl_k_sleep+0x6c>)
   1815e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   18160:	f7ff fd02 	bl	17b68 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   18164:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   18168:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1816a:	4620      	mov	r0, r4
   1816c:	4629      	mov	r1, r5
   1816e:	f7ff ff2d 	bl	17fcc <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   18172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18176:	fb80 3403 	smull	r3, r4, r0, r3
   1817a:	0bd8      	lsrs	r0, r3, #15
   1817c:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   18180:	e7f2      	b.n	18168 <z_impl_k_sleep+0x40>
   18182:	bf00      	nop
   18184:	00020148 	.word	0x00020148
   18188:	000203c7 	.word	0x000203c7
   1818c:	0001d2dc 	.word	0x0001d2dc
   18190:	0002027e 	.word	0x0002027e
   18194:	200010e8 	.word	0x200010e8

00018198 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   18198:	4b01      	ldr	r3, [pc, #4]	; (181a0 <z_impl_z_current_get+0x8>)
   1819a:	6898      	ldr	r0, [r3, #8]
   1819c:	4770      	bx	lr
   1819e:	bf00      	nop
   181a0:	200010e8 	.word	0x200010e8

000181a4 <z_impl_k_is_preempt_thread>:
   181a4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   181a8:	b93b      	cbnz	r3, 181ba <z_impl_k_is_preempt_thread+0x16>
   181aa:	4b05      	ldr	r3, [pc, #20]	; (181c0 <z_impl_k_is_preempt_thread+0x1c>)
   181ac:	689b      	ldr	r3, [r3, #8]
   181ae:	89d8      	ldrh	r0, [r3, #14]
   181b0:	287f      	cmp	r0, #127	; 0x7f
   181b2:	bf8c      	ite	hi
   181b4:	2000      	movhi	r0, #0
   181b6:	2001      	movls	r0, #1
   181b8:	4770      	bx	lr
   181ba:	2000      	movs	r0, #0
}
   181bc:	4770      	bx	lr
   181be:	bf00      	nop
   181c0:	200010e8 	.word	0x200010e8

000181c4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   181c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181c8:	4604      	mov	r4, r0
   181ca:	f04f 0320 	mov.w	r3, #32
   181ce:	f3ef 8611 	mrs	r6, BASEPRI
   181d2:	f383 8812 	msr	BASEPRI_MAX, r3
   181d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   181da:	4848      	ldr	r0, [pc, #288]	; (182fc <z_thread_abort+0x138>)
   181dc:	f7fe f804 	bl	161e8 <z_spin_lock_valid>
   181e0:	b968      	cbnz	r0, 181fe <z_thread_abort+0x3a>
   181e2:	4a47      	ldr	r2, [pc, #284]	; (18300 <z_thread_abort+0x13c>)
   181e4:	4947      	ldr	r1, [pc, #284]	; (18304 <z_thread_abort+0x140>)
   181e6:	4848      	ldr	r0, [pc, #288]	; (18308 <z_thread_abort+0x144>)
   181e8:	2381      	movs	r3, #129	; 0x81
   181ea:	f002 fb6f 	bl	1a8cc <printk>
   181ee:	4943      	ldr	r1, [pc, #268]	; (182fc <z_thread_abort+0x138>)
   181f0:	4846      	ldr	r0, [pc, #280]	; (1830c <z_thread_abort+0x148>)
   181f2:	f002 fb6b 	bl	1a8cc <printk>
   181f6:	4842      	ldr	r0, [pc, #264]	; (18300 <z_thread_abort+0x13c>)
   181f8:	2181      	movs	r1, #129	; 0x81
   181fa:	f002 fd00 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   181fe:	483f      	ldr	r0, [pc, #252]	; (182fc <z_thread_abort+0x138>)
   18200:	f7fe f810 	bl	16224 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   18204:	7b63      	ldrb	r3, [r4, #13]
   18206:	071a      	lsls	r2, r3, #28
   18208:	d517      	bpl.n	1823a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1820a:	483c      	ldr	r0, [pc, #240]	; (182fc <z_thread_abort+0x138>)
   1820c:	f7fd fffa 	bl	16204 <z_spin_unlock_valid>
   18210:	b968      	cbnz	r0, 1822e <z_thread_abort+0x6a>
   18212:	4a3b      	ldr	r2, [pc, #236]	; (18300 <z_thread_abort+0x13c>)
   18214:	493e      	ldr	r1, [pc, #248]	; (18310 <z_thread_abort+0x14c>)
   18216:	483c      	ldr	r0, [pc, #240]	; (18308 <z_thread_abort+0x144>)
   18218:	23ac      	movs	r3, #172	; 0xac
   1821a:	f002 fb57 	bl	1a8cc <printk>
   1821e:	4937      	ldr	r1, [pc, #220]	; (182fc <z_thread_abort+0x138>)
   18220:	483c      	ldr	r0, [pc, #240]	; (18314 <z_thread_abort+0x150>)
   18222:	f002 fb53 	bl	1a8cc <printk>
   18226:	4836      	ldr	r0, [pc, #216]	; (18300 <z_thread_abort+0x13c>)
   18228:	21ac      	movs	r1, #172	; 0xac
   1822a:	f002 fce8 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   1822e:	f386 8811 	msr	BASEPRI, r6
   18232:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   18236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1823a:	f023 0220 	bic.w	r2, r3, #32
   1823e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   18242:	09d2      	lsrs	r2, r2, #7
   18244:	d142      	bne.n	182cc <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   18246:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   18248:	68a3      	ldr	r3, [r4, #8]
   1824a:	b113      	cbz	r3, 18252 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   1824c:	4620      	mov	r0, r4
   1824e:	f7ff f847 	bl	172e0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   18252:	f104 0018 	add.w	r0, r4, #24
   18256:	f000 fa11 	bl	1867c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1825a:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1825e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   18262:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18264:	42bd      	cmp	r5, r7
   18266:	d001      	beq.n	1826c <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   18268:	2d00      	cmp	r5, #0
   1826a:	d139      	bne.n	182e0 <z_thread_abort+0x11c>
		update_cache(1);
   1826c:	2001      	movs	r0, #1
   1826e:	f7ff f8a5 	bl	173bc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   18272:	4b29      	ldr	r3, [pc, #164]	; (18318 <z_thread_abort+0x154>)
   18274:	689b      	ldr	r3, [r3, #8]
   18276:	42a3      	cmp	r3, r4
   18278:	d1c7      	bne.n	1820a <z_thread_abort+0x46>
   1827a:	f3ef 8305 	mrs	r3, IPSR
   1827e:	2b00      	cmp	r3, #0
   18280:	d1c3      	bne.n	1820a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18282:	481e      	ldr	r0, [pc, #120]	; (182fc <z_thread_abort+0x138>)
   18284:	f7fd ffbe 	bl	16204 <z_spin_unlock_valid>
   18288:	b968      	cbnz	r0, 182a6 <z_thread_abort+0xe2>
   1828a:	4a1d      	ldr	r2, [pc, #116]	; (18300 <z_thread_abort+0x13c>)
   1828c:	4920      	ldr	r1, [pc, #128]	; (18310 <z_thread_abort+0x14c>)
   1828e:	481e      	ldr	r0, [pc, #120]	; (18308 <z_thread_abort+0x144>)
   18290:	23c3      	movs	r3, #195	; 0xc3
   18292:	f002 fb1b 	bl	1a8cc <printk>
   18296:	4919      	ldr	r1, [pc, #100]	; (182fc <z_thread_abort+0x138>)
   18298:	481e      	ldr	r0, [pc, #120]	; (18314 <z_thread_abort+0x150>)
   1829a:	f002 fb17 	bl	1a8cc <printk>
   1829e:	4818      	ldr	r0, [pc, #96]	; (18300 <z_thread_abort+0x13c>)
   182a0:	21c3      	movs	r1, #195	; 0xc3
   182a2:	f002 fcac 	bl	1abfe <assert_post_action>
   182a6:	4630      	mov	r0, r6
   182a8:	f7f8 ffa8 	bl	111fc <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   182ac:	4a1b      	ldr	r2, [pc, #108]	; (1831c <z_thread_abort+0x158>)
   182ae:	491c      	ldr	r1, [pc, #112]	; (18320 <z_thread_abort+0x15c>)
   182b0:	4815      	ldr	r0, [pc, #84]	; (18308 <z_thread_abort+0x144>)
   182b2:	f240 634b 	movw	r3, #1611	; 0x64b
   182b6:	f002 fb09 	bl	1a8cc <printk>
   182ba:	481a      	ldr	r0, [pc, #104]	; (18324 <z_thread_abort+0x160>)
   182bc:	f002 fb06 	bl	1a8cc <printk>
   182c0:	4816      	ldr	r0, [pc, #88]	; (1831c <z_thread_abort+0x158>)
   182c2:	f240 614b 	movw	r1, #1611	; 0x64b
   182c6:	f002 fc9a 	bl	1abfe <assert_post_action>
   182ca:	e79e      	b.n	1820a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   182cc:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   182d0:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   182d4:	4814      	ldr	r0, [pc, #80]	; (18328 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   182d6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   182d8:	4621      	mov	r1, r4
   182da:	f7fe ffdf 	bl	1729c <z_priq_dumb_remove>
}
   182de:	e7b3      	b.n	18248 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   182e0:	4628      	mov	r0, r5
   182e2:	f7fe fffd 	bl	172e0 <unpend_thread_no_timeout>
   182e6:	f105 0018 	add.w	r0, r5, #24
   182ea:	f000 f9c7 	bl	1867c <z_abort_timeout>
   182ee:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
   182f2:	4628      	mov	r0, r5
   182f4:	f7ff f968 	bl	175c8 <ready_thread>
   182f8:	e7b3      	b.n	18262 <z_thread_abort+0x9e>
   182fa:	bf00      	nop
   182fc:	20001128 	.word	0x20001128
   18300:	0001d83f 	.word	0x0001d83f
   18304:	0001d891 	.word	0x0001d891
   18308:	0001d2dc 	.word	0x0001d2dc
   1830c:	0001d8a6 	.word	0x0001d8a6
   18310:	0001d865 	.word	0x0001d865
   18314:	0001d87c 	.word	0x0001d87c
   18318:	200010e8 	.word	0x200010e8
   1831c:	000203c7 	.word	0x000203c7
   18320:	000205d8 	.word	0x000205d8
   18324:	000204b9 	.word	0x000204b9
   18328:	20001108 	.word	0x20001108

0001832c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   1832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1832e:	4604      	mov	r4, r0
   18330:	460e      	mov	r6, r1
   18332:	4615      	mov	r5, r2
	__asm__ volatile(
   18334:	f04f 0320 	mov.w	r3, #32
   18338:	f3ef 8711 	mrs	r7, BASEPRI
   1833c:	f383 8812 	msr	BASEPRI_MAX, r3
   18340:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18344:	481e      	ldr	r0, [pc, #120]	; (183c0 <z_sched_wake+0x94>)
   18346:	f7fd ff4f 	bl	161e8 <z_spin_lock_valid>
   1834a:	b968      	cbnz	r0, 18368 <z_sched_wake+0x3c>
   1834c:	4a1d      	ldr	r2, [pc, #116]	; (183c4 <z_sched_wake+0x98>)
   1834e:	491e      	ldr	r1, [pc, #120]	; (183c8 <z_sched_wake+0x9c>)
   18350:	481e      	ldr	r0, [pc, #120]	; (183cc <z_sched_wake+0xa0>)
   18352:	2381      	movs	r3, #129	; 0x81
   18354:	f002 faba 	bl	1a8cc <printk>
   18358:	4919      	ldr	r1, [pc, #100]	; (183c0 <z_sched_wake+0x94>)
   1835a:	481d      	ldr	r0, [pc, #116]	; (183d0 <z_sched_wake+0xa4>)
   1835c:	f002 fab6 	bl	1a8cc <printk>
   18360:	4818      	ldr	r0, [pc, #96]	; (183c4 <z_sched_wake+0x98>)
   18362:	2181      	movs	r1, #129	; 0x81
   18364:	f002 fc4b 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   18368:	4815      	ldr	r0, [pc, #84]	; (183c0 <z_sched_wake+0x94>)
   1836a:	f7fd ff5b 	bl	16224 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   1836e:	4620      	mov	r0, r4
   18370:	f003 fb4b 	bl	1ba0a <z_priq_dumb_best>

		if (thread != NULL) {
   18374:	4604      	mov	r4, r0
   18376:	b158      	cbz	r0, 18390 <z_sched_wake+0x64>
   18378:	6786      	str	r6, [r0, #120]	; 0x78
   1837a:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   1837c:	f7fe ffb0 	bl	172e0 <unpend_thread_no_timeout>
   18380:	f104 0018 	add.w	r0, r4, #24
   18384:	f000 f97a 	bl	1867c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   18388:	4620      	mov	r0, r4
   1838a:	f7ff f91d 	bl	175c8 <ready_thread>
			ret = true;
   1838e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18390:	480b      	ldr	r0, [pc, #44]	; (183c0 <z_sched_wake+0x94>)
   18392:	f7fd ff37 	bl	16204 <z_spin_unlock_valid>
   18396:	b968      	cbnz	r0, 183b4 <z_sched_wake+0x88>
   18398:	4a0a      	ldr	r2, [pc, #40]	; (183c4 <z_sched_wake+0x98>)
   1839a:	490e      	ldr	r1, [pc, #56]	; (183d4 <z_sched_wake+0xa8>)
   1839c:	480b      	ldr	r0, [pc, #44]	; (183cc <z_sched_wake+0xa0>)
   1839e:	23ac      	movs	r3, #172	; 0xac
   183a0:	f002 fa94 	bl	1a8cc <printk>
   183a4:	4906      	ldr	r1, [pc, #24]	; (183c0 <z_sched_wake+0x94>)
   183a6:	480c      	ldr	r0, [pc, #48]	; (183d8 <z_sched_wake+0xac>)
   183a8:	f002 fa90 	bl	1a8cc <printk>
   183ac:	4805      	ldr	r0, [pc, #20]	; (183c4 <z_sched_wake+0x98>)
   183ae:	21ac      	movs	r1, #172	; 0xac
   183b0:	f002 fc25 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   183b4:	f387 8811 	msr	BASEPRI, r7
   183b8:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   183bc:	4620      	mov	r0, r4
   183be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   183c0:	20001128 	.word	0x20001128
   183c4:	0001d83f 	.word	0x0001d83f
   183c8:	0001d891 	.word	0x0001d891
   183cc:	0001d2dc 	.word	0x0001d2dc
   183d0:	0001d8a6 	.word	0x0001d8a6
   183d4:	0001d865 	.word	0x0001d865
   183d8:	0001d87c 	.word	0x0001d87c

000183dc <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   183dc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   183de:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   183e2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   183e4:	e9cd 6700 	strd	r6, r7, [sp]
   183e8:	f7ff faf2 	bl	179d0 <z_pend_curr>

	if (data != NULL) {
   183ec:	b11c      	cbz	r4, 183f6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   183ee:	4b03      	ldr	r3, [pc, #12]	; (183fc <z_sched_wait+0x20>)
   183f0:	689b      	ldr	r3, [r3, #8]
   183f2:	695b      	ldr	r3, [r3, #20]
   183f4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   183f6:	b002      	add	sp, #8
   183f8:	bdd0      	pop	{r4, r6, r7, pc}
   183fa:	bf00      	nop
   183fc:	200010e8 	.word	0x200010e8

00018400 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   18400:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18402:	4806      	ldr	r0, [pc, #24]	; (1841c <z_data_copy+0x1c>)
   18404:	4a06      	ldr	r2, [pc, #24]	; (18420 <z_data_copy+0x20>)
   18406:	4907      	ldr	r1, [pc, #28]	; (18424 <z_data_copy+0x24>)
   18408:	1a12      	subs	r2, r2, r0
   1840a:	f003 fb96 	bl	1bb3a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1840e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   18412:	4a05      	ldr	r2, [pc, #20]	; (18428 <z_data_copy+0x28>)
   18414:	4905      	ldr	r1, [pc, #20]	; (1842c <z_data_copy+0x2c>)
   18416:	4806      	ldr	r0, [pc, #24]	; (18430 <z_data_copy+0x30>)
   18418:	f003 bb8f 	b.w	1bb3a <memcpy>
   1841c:	20000000 	.word	0x20000000
   18420:	20000508 	.word	0x20000508
   18424:	00020854 	.word	0x00020854
   18428:	00000000 	.word	0x00000000
   1842c:	00020854 	.word	0x00020854
   18430:	20000000 	.word	0x20000000

00018434 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   18434:	4b03      	ldr	r3, [pc, #12]	; (18444 <elapsed+0x10>)
   18436:	681b      	ldr	r3, [r3, #0]
   18438:	b90b      	cbnz	r3, 1843e <elapsed+0xa>
   1843a:	f7fb babb 	b.w	139b4 <sys_clock_elapsed>
}
   1843e:	2000      	movs	r0, #0
   18440:	4770      	bx	lr
   18442:	bf00      	nop
   18444:	20001134 	.word	0x20001134

00018448 <next_timeout>:

static int32_t next_timeout(void)
{
   18448:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1844a:	4b13      	ldr	r3, [pc, #76]	; (18498 <next_timeout+0x50>)
   1844c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1844e:	429c      	cmp	r4, r3
   18450:	bf08      	it	eq
   18452:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   18454:	f7ff ffee 	bl	18434 <elapsed>
   18458:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1845a:	b1bc      	cbz	r4, 1848c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1845c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   18460:	1b40      	subs	r0, r0, r5
   18462:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   18466:	2801      	cmp	r0, #1
   18468:	f171 0300 	sbcs.w	r3, r1, #0
   1846c:	db11      	blt.n	18492 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1846e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   18472:	2300      	movs	r3, #0
   18474:	4282      	cmp	r2, r0
   18476:	eb73 0401 	sbcs.w	r4, r3, r1
   1847a:	da00      	bge.n	1847e <next_timeout+0x36>
   1847c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1847e:	4b07      	ldr	r3, [pc, #28]	; (1849c <next_timeout+0x54>)
   18480:	691b      	ldr	r3, [r3, #16]
   18482:	b113      	cbz	r3, 1848a <next_timeout+0x42>
   18484:	4298      	cmp	r0, r3
   18486:	bfa8      	it	ge
   18488:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1848a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1848c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   18490:	e7f5      	b.n	1847e <next_timeout+0x36>
   18492:	2000      	movs	r0, #0
   18494:	e7f3      	b.n	1847e <next_timeout+0x36>
   18496:	bf00      	nop
   18498:	200001c4 	.word	0x200001c4
   1849c:	200010e8 	.word	0x200010e8

000184a0 <remove_timeout>:
{
   184a0:	b530      	push	{r4, r5, lr}
   184a2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   184a4:	b168      	cbz	r0, 184c2 <remove_timeout+0x22>
   184a6:	4a0a      	ldr	r2, [pc, #40]	; (184d0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   184a8:	6852      	ldr	r2, [r2, #4]
   184aa:	4290      	cmp	r0, r2
   184ac:	d009      	beq.n	184c2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   184ae:	b143      	cbz	r3, 184c2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   184b0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   184b4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   184b8:	1912      	adds	r2, r2, r4
   184ba:	eb45 0101 	adc.w	r1, r5, r1
   184be:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   184c2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   184c4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   184c6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   184c8:	2300      	movs	r3, #0
	node->prev = NULL;
   184ca:	e9c0 3300 	strd	r3, r3, [r0]
}
   184ce:	bd30      	pop	{r4, r5, pc}
   184d0:	200001c4 	.word	0x200001c4

000184d4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   184d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184d8:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   184da:	1c6b      	adds	r3, r5, #1
   184dc:	bf08      	it	eq
   184de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   184e2:	4682      	mov	sl, r0
   184e4:	468b      	mov	fp, r1
   184e6:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   184e8:	f000 80aa 	beq.w	18640 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   184ec:	6803      	ldr	r3, [r0, #0]
   184ee:	b163      	cbz	r3, 1850a <z_add_timeout+0x36>
   184f0:	4955      	ldr	r1, [pc, #340]	; (18648 <z_add_timeout+0x174>)
   184f2:	4a56      	ldr	r2, [pc, #344]	; (1864c <z_add_timeout+0x178>)
   184f4:	4856      	ldr	r0, [pc, #344]	; (18650 <z_add_timeout+0x17c>)
   184f6:	235d      	movs	r3, #93	; 0x5d
   184f8:	f002 f9e8 	bl	1a8cc <printk>
   184fc:	4855      	ldr	r0, [pc, #340]	; (18654 <z_add_timeout+0x180>)
   184fe:	f002 f9e5 	bl	1a8cc <printk>
   18502:	4852      	ldr	r0, [pc, #328]	; (1864c <z_add_timeout+0x178>)
   18504:	215d      	movs	r1, #93	; 0x5d
   18506:	f002 fb7a 	bl	1abfe <assert_post_action>
	to->fn = fn;
   1850a:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   1850e:	f04f 0320 	mov.w	r3, #32
   18512:	f3ef 8b11 	mrs	fp, BASEPRI
   18516:	f383 8812 	msr	BASEPRI_MAX, r3
   1851a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1851e:	484e      	ldr	r0, [pc, #312]	; (18658 <z_add_timeout+0x184>)
   18520:	f7fd fe62 	bl	161e8 <z_spin_lock_valid>
   18524:	b968      	cbnz	r0, 18542 <z_add_timeout+0x6e>
   18526:	4a4d      	ldr	r2, [pc, #308]	; (1865c <z_add_timeout+0x188>)
   18528:	494d      	ldr	r1, [pc, #308]	; (18660 <z_add_timeout+0x18c>)
   1852a:	4849      	ldr	r0, [pc, #292]	; (18650 <z_add_timeout+0x17c>)
   1852c:	2381      	movs	r3, #129	; 0x81
   1852e:	f002 f9cd 	bl	1a8cc <printk>
   18532:	4949      	ldr	r1, [pc, #292]	; (18658 <z_add_timeout+0x184>)
   18534:	484b      	ldr	r0, [pc, #300]	; (18664 <z_add_timeout+0x190>)
   18536:	f002 f9c9 	bl	1a8cc <printk>
   1853a:	4848      	ldr	r0, [pc, #288]	; (1865c <z_add_timeout+0x188>)
   1853c:	2181      	movs	r1, #129	; 0x81
   1853e:	f002 fb5e 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   18542:	4845      	ldr	r0, [pc, #276]	; (18658 <z_add_timeout+0x184>)
   18544:	f7fd fe6e 	bl	16224 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   18548:	f06f 0301 	mvn.w	r3, #1
   1854c:	ebb3 0804 	subs.w	r8, r3, r4
   18550:	f04f 32ff 	mov.w	r2, #4294967295
   18554:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   18558:	f1b8 0f00 	cmp.w	r8, #0
   1855c:	f179 0100 	sbcs.w	r1, r9, #0
   18560:	db1c      	blt.n	1859c <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   18562:	4841      	ldr	r0, [pc, #260]	; (18668 <z_add_timeout+0x194>)
   18564:	e9d0 1000 	ldrd	r1, r0, [r0]
   18568:	1a5b      	subs	r3, r3, r1
   1856a:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1856e:	1b1e      	subs	r6, r3, r4
   18570:	eb62 0705 	sbc.w	r7, r2, r5
   18574:	2e01      	cmp	r6, #1
   18576:	f177 0300 	sbcs.w	r3, r7, #0
   1857a:	bfbc      	itt	lt
   1857c:	2601      	movlt	r6, #1
   1857e:	2700      	movlt	r7, #0
   18580:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   18584:	4a39      	ldr	r2, [pc, #228]	; (1866c <z_add_timeout+0x198>)
   18586:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1858a:	4293      	cmp	r3, r2
   1858c:	d11d      	bne.n	185ca <z_add_timeout+0xf6>
	node->prev = tail;
   1858e:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   18592:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   18596:	f8c2 a004 	str.w	sl, [r2, #4]
}
   1859a:	e02c      	b.n	185f6 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1859c:	f7ff ff4a 	bl	18434 <elapsed>
   185a0:	1c63      	adds	r3, r4, #1
   185a2:	9300      	str	r3, [sp, #0]
   185a4:	f145 0300 	adc.w	r3, r5, #0
   185a8:	9301      	str	r3, [sp, #4]
   185aa:	e9dd 2300 	ldrd	r2, r3, [sp]
   185ae:	1812      	adds	r2, r2, r0
   185b0:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   185b4:	e9ca 2304 	strd	r2, r3, [sl, #16]
   185b8:	e7e4      	b.n	18584 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   185ba:	1be0      	subs	r0, r4, r7
   185bc:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   185c0:	42b3      	cmp	r3, r6
   185c2:	e9ca 0104 	strd	r0, r1, [sl, #16]
   185c6:	d0e2      	beq.n	1858e <z_add_timeout+0xba>
   185c8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   185ca:	2b00      	cmp	r3, #0
   185cc:	d0df      	beq.n	1858e <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   185ce:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   185d2:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   185d6:	42bc      	cmp	r4, r7
   185d8:	eb75 0108 	sbcs.w	r1, r5, r8
   185dc:	daed      	bge.n	185ba <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   185de:	1b38      	subs	r0, r7, r4
   185e0:	eb68 0105 	sbc.w	r1, r8, r5
   185e4:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   185e8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   185ea:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   185ee:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   185f2:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   185f6:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   185f8:	4293      	cmp	r3, r2
   185fa:	d00b      	beq.n	18614 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   185fc:	459a      	cmp	sl, r3
   185fe:	d109      	bne.n	18614 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   18600:	f7ff ff22 	bl	18448 <next_timeout>

			if (next_time == 0 ||
   18604:	b118      	cbz	r0, 1860e <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   18606:	4b1a      	ldr	r3, [pc, #104]	; (18670 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   18608:	691b      	ldr	r3, [r3, #16]
   1860a:	4283      	cmp	r3, r0
   1860c:	d002      	beq.n	18614 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   1860e:	2100      	movs	r1, #0
   18610:	f7fb f9a0 	bl	13954 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18614:	4810      	ldr	r0, [pc, #64]	; (18658 <z_add_timeout+0x184>)
   18616:	f7fd fdf5 	bl	16204 <z_spin_unlock_valid>
   1861a:	b968      	cbnz	r0, 18638 <z_add_timeout+0x164>
   1861c:	4a0f      	ldr	r2, [pc, #60]	; (1865c <z_add_timeout+0x188>)
   1861e:	4915      	ldr	r1, [pc, #84]	; (18674 <z_add_timeout+0x1a0>)
   18620:	480b      	ldr	r0, [pc, #44]	; (18650 <z_add_timeout+0x17c>)
   18622:	23ac      	movs	r3, #172	; 0xac
   18624:	f002 f952 	bl	1a8cc <printk>
   18628:	490b      	ldr	r1, [pc, #44]	; (18658 <z_add_timeout+0x184>)
   1862a:	4813      	ldr	r0, [pc, #76]	; (18678 <z_add_timeout+0x1a4>)
   1862c:	f002 f94e 	bl	1a8cc <printk>
   18630:	480a      	ldr	r0, [pc, #40]	; (1865c <z_add_timeout+0x188>)
   18632:	21ac      	movs	r1, #172	; 0xac
   18634:	f002 fae3 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   18638:	f38b 8811 	msr	BASEPRI, fp
   1863c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   18640:	b003      	add	sp, #12
   18642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18646:	bf00      	nop
   18648:	000204ff 	.word	0x000204ff
   1864c:	000204db 	.word	0x000204db
   18650:	0001d2dc 	.word	0x0001d2dc
   18654:	0002027e 	.word	0x0002027e
   18658:	20001138 	.word	0x20001138
   1865c:	0001d83f 	.word	0x0001d83f
   18660:	0001d891 	.word	0x0001d891
   18664:	0001d8a6 	.word	0x0001d8a6
   18668:	20000730 	.word	0x20000730
   1866c:	200001c4 	.word	0x200001c4
   18670:	200010e8 	.word	0x200010e8
   18674:	0001d865 	.word	0x0001d865
   18678:	0001d87c 	.word	0x0001d87c

0001867c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1867c:	b538      	push	{r3, r4, r5, lr}
   1867e:	4604      	mov	r4, r0
	__asm__ volatile(
   18680:	f04f 0320 	mov.w	r3, #32
   18684:	f3ef 8511 	mrs	r5, BASEPRI
   18688:	f383 8812 	msr	BASEPRI_MAX, r3
   1868c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18690:	481a      	ldr	r0, [pc, #104]	; (186fc <z_abort_timeout+0x80>)
   18692:	f7fd fda9 	bl	161e8 <z_spin_lock_valid>
   18696:	b968      	cbnz	r0, 186b4 <z_abort_timeout+0x38>
   18698:	4a19      	ldr	r2, [pc, #100]	; (18700 <z_abort_timeout+0x84>)
   1869a:	491a      	ldr	r1, [pc, #104]	; (18704 <z_abort_timeout+0x88>)
   1869c:	481a      	ldr	r0, [pc, #104]	; (18708 <z_abort_timeout+0x8c>)
   1869e:	2381      	movs	r3, #129	; 0x81
   186a0:	f002 f914 	bl	1a8cc <printk>
   186a4:	4915      	ldr	r1, [pc, #84]	; (186fc <z_abort_timeout+0x80>)
   186a6:	4819      	ldr	r0, [pc, #100]	; (1870c <z_abort_timeout+0x90>)
   186a8:	f002 f910 	bl	1a8cc <printk>
   186ac:	4814      	ldr	r0, [pc, #80]	; (18700 <z_abort_timeout+0x84>)
   186ae:	2181      	movs	r1, #129	; 0x81
   186b0:	f002 faa5 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   186b4:	4811      	ldr	r0, [pc, #68]	; (186fc <z_abort_timeout+0x80>)
   186b6:	f7fd fdb5 	bl	16224 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   186ba:	6823      	ldr	r3, [r4, #0]
   186bc:	b1db      	cbz	r3, 186f6 <z_abort_timeout+0x7a>
			remove_timeout(to);
   186be:	4620      	mov	r0, r4
   186c0:	f7ff feee 	bl	184a0 <remove_timeout>
			ret = 0;
   186c4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   186c6:	480d      	ldr	r0, [pc, #52]	; (186fc <z_abort_timeout+0x80>)
   186c8:	f7fd fd9c 	bl	16204 <z_spin_unlock_valid>
   186cc:	b968      	cbnz	r0, 186ea <z_abort_timeout+0x6e>
   186ce:	4a0c      	ldr	r2, [pc, #48]	; (18700 <z_abort_timeout+0x84>)
   186d0:	490f      	ldr	r1, [pc, #60]	; (18710 <z_abort_timeout+0x94>)
   186d2:	480d      	ldr	r0, [pc, #52]	; (18708 <z_abort_timeout+0x8c>)
   186d4:	23ac      	movs	r3, #172	; 0xac
   186d6:	f002 f8f9 	bl	1a8cc <printk>
   186da:	4908      	ldr	r1, [pc, #32]	; (186fc <z_abort_timeout+0x80>)
   186dc:	480d      	ldr	r0, [pc, #52]	; (18714 <z_abort_timeout+0x98>)
   186de:	f002 f8f5 	bl	1a8cc <printk>
   186e2:	4807      	ldr	r0, [pc, #28]	; (18700 <z_abort_timeout+0x84>)
   186e4:	21ac      	movs	r1, #172	; 0xac
   186e6:	f002 fa8a 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   186ea:	f385 8811 	msr	BASEPRI, r5
   186ee:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   186f2:	4620      	mov	r0, r4
   186f4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   186f6:	f06f 0415 	mvn.w	r4, #21
   186fa:	e7e4      	b.n	186c6 <z_abort_timeout+0x4a>
   186fc:	20001138 	.word	0x20001138
   18700:	0001d83f 	.word	0x0001d83f
   18704:	0001d891 	.word	0x0001d891
   18708:	0001d2dc 	.word	0x0001d2dc
   1870c:	0001d8a6 	.word	0x0001d8a6
   18710:	0001d865 	.word	0x0001d865
   18714:	0001d87c 	.word	0x0001d87c

00018718 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   18718:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1871a:	f04f 0320 	mov.w	r3, #32
   1871e:	f3ef 8511 	mrs	r5, BASEPRI
   18722:	f383 8812 	msr	BASEPRI_MAX, r3
   18726:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1872a:	4818      	ldr	r0, [pc, #96]	; (1878c <z_get_next_timeout_expiry+0x74>)
   1872c:	f7fd fd5c 	bl	161e8 <z_spin_lock_valid>
   18730:	b968      	cbnz	r0, 1874e <z_get_next_timeout_expiry+0x36>
   18732:	4a17      	ldr	r2, [pc, #92]	; (18790 <z_get_next_timeout_expiry+0x78>)
   18734:	4917      	ldr	r1, [pc, #92]	; (18794 <z_get_next_timeout_expiry+0x7c>)
   18736:	4818      	ldr	r0, [pc, #96]	; (18798 <z_get_next_timeout_expiry+0x80>)
   18738:	2381      	movs	r3, #129	; 0x81
   1873a:	f002 f8c7 	bl	1a8cc <printk>
   1873e:	4913      	ldr	r1, [pc, #76]	; (1878c <z_get_next_timeout_expiry+0x74>)
   18740:	4816      	ldr	r0, [pc, #88]	; (1879c <z_get_next_timeout_expiry+0x84>)
   18742:	f002 f8c3 	bl	1a8cc <printk>
   18746:	4812      	ldr	r0, [pc, #72]	; (18790 <z_get_next_timeout_expiry+0x78>)
   18748:	2181      	movs	r1, #129	; 0x81
   1874a:	f002 fa58 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   1874e:	480f      	ldr	r0, [pc, #60]	; (1878c <z_get_next_timeout_expiry+0x74>)
   18750:	f7fd fd68 	bl	16224 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   18754:	f7ff fe78 	bl	18448 <next_timeout>
   18758:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1875a:	480c      	ldr	r0, [pc, #48]	; (1878c <z_get_next_timeout_expiry+0x74>)
   1875c:	f7fd fd52 	bl	16204 <z_spin_unlock_valid>
   18760:	b968      	cbnz	r0, 1877e <z_get_next_timeout_expiry+0x66>
   18762:	4a0b      	ldr	r2, [pc, #44]	; (18790 <z_get_next_timeout_expiry+0x78>)
   18764:	490e      	ldr	r1, [pc, #56]	; (187a0 <z_get_next_timeout_expiry+0x88>)
   18766:	480c      	ldr	r0, [pc, #48]	; (18798 <z_get_next_timeout_expiry+0x80>)
   18768:	23ac      	movs	r3, #172	; 0xac
   1876a:	f002 f8af 	bl	1a8cc <printk>
   1876e:	4907      	ldr	r1, [pc, #28]	; (1878c <z_get_next_timeout_expiry+0x74>)
   18770:	480c      	ldr	r0, [pc, #48]	; (187a4 <z_get_next_timeout_expiry+0x8c>)
   18772:	f002 f8ab 	bl	1a8cc <printk>
   18776:	4806      	ldr	r0, [pc, #24]	; (18790 <z_get_next_timeout_expiry+0x78>)
   18778:	21ac      	movs	r1, #172	; 0xac
   1877a:	f002 fa40 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   1877e:	f385 8811 	msr	BASEPRI, r5
   18782:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   18786:	4620      	mov	r0, r4
   18788:	bd38      	pop	{r3, r4, r5, pc}
   1878a:	bf00      	nop
   1878c:	20001138 	.word	0x20001138
   18790:	0001d83f 	.word	0x0001d83f
   18794:	0001d891 	.word	0x0001d891
   18798:	0001d2dc 	.word	0x0001d2dc
   1879c:	0001d8a6 	.word	0x0001d8a6
   187a0:	0001d865 	.word	0x0001d865
   187a4:	0001d87c 	.word	0x0001d87c

000187a8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   187a8:	b570      	push	{r4, r5, r6, lr}
   187aa:	4604      	mov	r4, r0
   187ac:	460d      	mov	r5, r1
	__asm__ volatile(
   187ae:	f04f 0320 	mov.w	r3, #32
   187b2:	f3ef 8611 	mrs	r6, BASEPRI
   187b6:	f383 8812 	msr	BASEPRI_MAX, r3
   187ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   187be:	481b      	ldr	r0, [pc, #108]	; (1882c <z_set_timeout_expiry+0x84>)
   187c0:	f7fd fd12 	bl	161e8 <z_spin_lock_valid>
   187c4:	b968      	cbnz	r0, 187e2 <z_set_timeout_expiry+0x3a>
   187c6:	4a1a      	ldr	r2, [pc, #104]	; (18830 <z_set_timeout_expiry+0x88>)
   187c8:	491a      	ldr	r1, [pc, #104]	; (18834 <z_set_timeout_expiry+0x8c>)
   187ca:	481b      	ldr	r0, [pc, #108]	; (18838 <z_set_timeout_expiry+0x90>)
   187cc:	2381      	movs	r3, #129	; 0x81
   187ce:	f002 f87d 	bl	1a8cc <printk>
   187d2:	4916      	ldr	r1, [pc, #88]	; (1882c <z_set_timeout_expiry+0x84>)
   187d4:	4819      	ldr	r0, [pc, #100]	; (1883c <z_set_timeout_expiry+0x94>)
   187d6:	f002 f879 	bl	1a8cc <printk>
   187da:	4815      	ldr	r0, [pc, #84]	; (18830 <z_set_timeout_expiry+0x88>)
   187dc:	2181      	movs	r1, #129	; 0x81
   187de:	f002 fa0e 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   187e2:	4812      	ldr	r0, [pc, #72]	; (1882c <z_set_timeout_expiry+0x84>)
   187e4:	f7fd fd1e 	bl	16224 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   187e8:	f7ff fe2e 	bl	18448 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   187ec:	2801      	cmp	r0, #1
   187ee:	dd05      	ble.n	187fc <z_set_timeout_expiry+0x54>
   187f0:	42a0      	cmp	r0, r4
   187f2:	db03      	blt.n	187fc <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   187f4:	4629      	mov	r1, r5
   187f6:	4620      	mov	r0, r4
   187f8:	f7fb f8ac 	bl	13954 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   187fc:	480b      	ldr	r0, [pc, #44]	; (1882c <z_set_timeout_expiry+0x84>)
   187fe:	f7fd fd01 	bl	16204 <z_spin_unlock_valid>
   18802:	b968      	cbnz	r0, 18820 <z_set_timeout_expiry+0x78>
   18804:	4a0a      	ldr	r2, [pc, #40]	; (18830 <z_set_timeout_expiry+0x88>)
   18806:	490e      	ldr	r1, [pc, #56]	; (18840 <z_set_timeout_expiry+0x98>)
   18808:	480b      	ldr	r0, [pc, #44]	; (18838 <z_set_timeout_expiry+0x90>)
   1880a:	23ac      	movs	r3, #172	; 0xac
   1880c:	f002 f85e 	bl	1a8cc <printk>
   18810:	4906      	ldr	r1, [pc, #24]	; (1882c <z_set_timeout_expiry+0x84>)
   18812:	480c      	ldr	r0, [pc, #48]	; (18844 <z_set_timeout_expiry+0x9c>)
   18814:	f002 f85a 	bl	1a8cc <printk>
   18818:	4805      	ldr	r0, [pc, #20]	; (18830 <z_set_timeout_expiry+0x88>)
   1881a:	21ac      	movs	r1, #172	; 0xac
   1881c:	f002 f9ef 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   18820:	f386 8811 	msr	BASEPRI, r6
   18824:	f3bf 8f6f 	isb	sy
		}
	}
}
   18828:	bd70      	pop	{r4, r5, r6, pc}
   1882a:	bf00      	nop
   1882c:	20001138 	.word	0x20001138
   18830:	0001d83f 	.word	0x0001d83f
   18834:	0001d891 	.word	0x0001d891
   18838:	0001d2dc 	.word	0x0001d2dc
   1883c:	0001d8a6 	.word	0x0001d8a6
   18840:	0001d865 	.word	0x0001d865
   18844:	0001d87c 	.word	0x0001d87c

00018848 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   18848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1884c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1884e:	f7fe fe43 	bl	174d8 <z_time_slice>
	__asm__ volatile(
   18852:	f04f 0320 	mov.w	r3, #32
   18856:	f3ef 8711 	mrs	r7, BASEPRI
   1885a:	f383 8812 	msr	BASEPRI_MAX, r3
   1885e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18862:	4855      	ldr	r0, [pc, #340]	; (189b8 <sys_clock_announce+0x170>)
   18864:	f7fd fcc0 	bl	161e8 <z_spin_lock_valid>
   18868:	b968      	cbnz	r0, 18886 <sys_clock_announce+0x3e>
   1886a:	4a54      	ldr	r2, [pc, #336]	; (189bc <sys_clock_announce+0x174>)
   1886c:	4954      	ldr	r1, [pc, #336]	; (189c0 <sys_clock_announce+0x178>)
   1886e:	4855      	ldr	r0, [pc, #340]	; (189c4 <sys_clock_announce+0x17c>)
   18870:	2381      	movs	r3, #129	; 0x81
   18872:	f002 f82b 	bl	1a8cc <printk>
   18876:	4950      	ldr	r1, [pc, #320]	; (189b8 <sys_clock_announce+0x170>)
   18878:	4853      	ldr	r0, [pc, #332]	; (189c8 <sys_clock_announce+0x180>)
   1887a:	f002 f827 	bl	1a8cc <printk>
   1887e:	484f      	ldr	r0, [pc, #316]	; (189bc <sys_clock_announce+0x174>)
   18880:	2181      	movs	r1, #129	; 0x81
   18882:	f002 f9bc 	bl	1abfe <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   18886:	4d51      	ldr	r5, [pc, #324]	; (189cc <sys_clock_announce+0x184>)
   18888:	4e51      	ldr	r6, [pc, #324]	; (189d0 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
   1888a:	484b      	ldr	r0, [pc, #300]	; (189b8 <sys_clock_announce+0x170>)
	return list->head == list;
   1888c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 189dc <sys_clock_announce+0x194>
   18890:	f7fd fcc8 	bl	16224 <z_spin_lock_set_owner>
   18894:	46b3      	mov	fp, r6
   18896:	602c      	str	r4, [r5, #0]
   18898:	e9d6 2300 	ldrd	r2, r3, [r6]
   1889c:	f8d5 c000 	ldr.w	ip, [r5]
   188a0:	f8da 4000 	ldr.w	r4, [sl]
   188a4:	e9cd 2300 	strd	r2, r3, [sp]
   188a8:	4662      	mov	r2, ip
   188aa:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   188ac:	4554      	cmp	r4, sl
   188ae:	46e0      	mov	r8, ip
   188b0:	4699      	mov	r9, r3
   188b2:	d00c      	beq.n	188ce <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   188b4:	b15c      	cbz	r4, 188ce <sys_clock_announce+0x86>
   188b6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   188ba:	458c      	cmp	ip, r1
   188bc:	eb79 0302 	sbcs.w	r3, r9, r2
   188c0:	da2e      	bge.n	18920 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   188c2:	ebb1 000c 	subs.w	r0, r1, ip
   188c6:	eb62 0109 	sbc.w	r1, r2, r9
   188ca:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   188ce:	9a00      	ldr	r2, [sp, #0]
   188d0:	9901      	ldr	r1, [sp, #4]
   188d2:	eb18 0202 	adds.w	r2, r8, r2
   188d6:	464b      	mov	r3, r9
   188d8:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
   188dc:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   188de:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   188e2:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   188e4:	f7ff fdb0 	bl	18448 <next_timeout>
   188e8:	4621      	mov	r1, r4
   188ea:	f7fb f833 	bl	13954 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   188ee:	4832      	ldr	r0, [pc, #200]	; (189b8 <sys_clock_announce+0x170>)
   188f0:	f7fd fc88 	bl	16204 <z_spin_unlock_valid>
   188f4:	b968      	cbnz	r0, 18912 <sys_clock_announce+0xca>
   188f6:	4a31      	ldr	r2, [pc, #196]	; (189bc <sys_clock_announce+0x174>)
   188f8:	4936      	ldr	r1, [pc, #216]	; (189d4 <sys_clock_announce+0x18c>)
   188fa:	4832      	ldr	r0, [pc, #200]	; (189c4 <sys_clock_announce+0x17c>)
   188fc:	23ac      	movs	r3, #172	; 0xac
   188fe:	f001 ffe5 	bl	1a8cc <printk>
   18902:	492d      	ldr	r1, [pc, #180]	; (189b8 <sys_clock_announce+0x170>)
   18904:	4834      	ldr	r0, [pc, #208]	; (189d8 <sys_clock_announce+0x190>)
   18906:	f001 ffe1 	bl	1a8cc <printk>
   1890a:	482c      	ldr	r0, [pc, #176]	; (189bc <sys_clock_announce+0x174>)
   1890c:	21ac      	movs	r1, #172	; 0xac
   1890e:	f002 f976 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   18912:	f387 8811 	msr	BASEPRI, r7
   18916:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1891a:	b003      	add	sp, #12
   1891c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   18920:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
   18924:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   18928:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
   1892c:	f04f 0200 	mov.w	r2, #0
   18930:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   18934:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   18938:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   1893a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1893e:	4620      	mov	r0, r4
		curr_tick += dt;
   18940:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   18944:	f7ff fdac 	bl	184a0 <remove_timeout>
   18948:	481b      	ldr	r0, [pc, #108]	; (189b8 <sys_clock_announce+0x170>)
   1894a:	f7fd fc5b 	bl	16204 <z_spin_unlock_valid>
   1894e:	b968      	cbnz	r0, 1896c <sys_clock_announce+0x124>
   18950:	4a1a      	ldr	r2, [pc, #104]	; (189bc <sys_clock_announce+0x174>)
   18952:	4920      	ldr	r1, [pc, #128]	; (189d4 <sys_clock_announce+0x18c>)
   18954:	481b      	ldr	r0, [pc, #108]	; (189c4 <sys_clock_announce+0x17c>)
   18956:	23ac      	movs	r3, #172	; 0xac
   18958:	f001 ffb8 	bl	1a8cc <printk>
   1895c:	4916      	ldr	r1, [pc, #88]	; (189b8 <sys_clock_announce+0x170>)
   1895e:	481e      	ldr	r0, [pc, #120]	; (189d8 <sys_clock_announce+0x190>)
   18960:	f001 ffb4 	bl	1a8cc <printk>
   18964:	4815      	ldr	r0, [pc, #84]	; (189bc <sys_clock_announce+0x174>)
   18966:	21ac      	movs	r1, #172	; 0xac
   18968:	f002 f949 	bl	1abfe <assert_post_action>
   1896c:	f387 8811 	msr	BASEPRI, r7
   18970:	f3bf 8f6f 	isb	sy
		t->fn(t);
   18974:	68a3      	ldr	r3, [r4, #8]
   18976:	4620      	mov	r0, r4
   18978:	4798      	blx	r3
	__asm__ volatile(
   1897a:	f04f 0320 	mov.w	r3, #32
   1897e:	f3ef 8711 	mrs	r7, BASEPRI
   18982:	f383 8812 	msr	BASEPRI_MAX, r3
   18986:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1898a:	480b      	ldr	r0, [pc, #44]	; (189b8 <sys_clock_announce+0x170>)
   1898c:	f7fd fc2c 	bl	161e8 <z_spin_lock_valid>
   18990:	b968      	cbnz	r0, 189ae <sys_clock_announce+0x166>
   18992:	4a0a      	ldr	r2, [pc, #40]	; (189bc <sys_clock_announce+0x174>)
   18994:	490a      	ldr	r1, [pc, #40]	; (189c0 <sys_clock_announce+0x178>)
   18996:	480b      	ldr	r0, [pc, #44]	; (189c4 <sys_clock_announce+0x17c>)
   18998:	2381      	movs	r3, #129	; 0x81
   1899a:	f001 ff97 	bl	1a8cc <printk>
   1899e:	4906      	ldr	r1, [pc, #24]	; (189b8 <sys_clock_announce+0x170>)
   189a0:	4809      	ldr	r0, [pc, #36]	; (189c8 <sys_clock_announce+0x180>)
   189a2:	f001 ff93 	bl	1a8cc <printk>
   189a6:	4805      	ldr	r0, [pc, #20]	; (189bc <sys_clock_announce+0x174>)
   189a8:	2181      	movs	r1, #129	; 0x81
   189aa:	f002 f928 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   189ae:	4802      	ldr	r0, [pc, #8]	; (189b8 <sys_clock_announce+0x170>)
   189b0:	f7fd fc38 	bl	16224 <z_spin_lock_set_owner>
	return k;
   189b4:	e770      	b.n	18898 <sys_clock_announce+0x50>
   189b6:	bf00      	nop
   189b8:	20001138 	.word	0x20001138
   189bc:	0001d83f 	.word	0x0001d83f
   189c0:	0001d891 	.word	0x0001d891
   189c4:	0001d2dc 	.word	0x0001d2dc
   189c8:	0001d8a6 	.word	0x0001d8a6
   189cc:	20001134 	.word	0x20001134
   189d0:	20000730 	.word	0x20000730
   189d4:	0001d865 	.word	0x0001d865
   189d8:	0001d87c 	.word	0x0001d87c
   189dc:	200001c4 	.word	0x200001c4

000189e0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   189e0:	b570      	push	{r4, r5, r6, lr}
   189e2:	f04f 0320 	mov.w	r3, #32
   189e6:	f3ef 8611 	mrs	r6, BASEPRI
   189ea:	f383 8812 	msr	BASEPRI_MAX, r3
   189ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   189f2:	481b      	ldr	r0, [pc, #108]	; (18a60 <sys_clock_tick_get+0x80>)
   189f4:	f7fd fbf8 	bl	161e8 <z_spin_lock_valid>
   189f8:	b968      	cbnz	r0, 18a16 <sys_clock_tick_get+0x36>
   189fa:	4a1a      	ldr	r2, [pc, #104]	; (18a64 <sys_clock_tick_get+0x84>)
   189fc:	491a      	ldr	r1, [pc, #104]	; (18a68 <sys_clock_tick_get+0x88>)
   189fe:	481b      	ldr	r0, [pc, #108]	; (18a6c <sys_clock_tick_get+0x8c>)
   18a00:	2381      	movs	r3, #129	; 0x81
   18a02:	f001 ff63 	bl	1a8cc <printk>
   18a06:	4916      	ldr	r1, [pc, #88]	; (18a60 <sys_clock_tick_get+0x80>)
   18a08:	4819      	ldr	r0, [pc, #100]	; (18a70 <sys_clock_tick_get+0x90>)
   18a0a:	f001 ff5f 	bl	1a8cc <printk>
   18a0e:	4815      	ldr	r0, [pc, #84]	; (18a64 <sys_clock_tick_get+0x84>)
   18a10:	2181      	movs	r1, #129	; 0x81
   18a12:	f002 f8f4 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   18a16:	4812      	ldr	r0, [pc, #72]	; (18a60 <sys_clock_tick_get+0x80>)
   18a18:	f7fd fc04 	bl	16224 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   18a1c:	f7fa ffca 	bl	139b4 <sys_clock_elapsed>
   18a20:	4b14      	ldr	r3, [pc, #80]	; (18a74 <sys_clock_tick_get+0x94>)
   18a22:	e9d3 4500 	ldrd	r4, r5, [r3]
   18a26:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18a28:	480d      	ldr	r0, [pc, #52]	; (18a60 <sys_clock_tick_get+0x80>)
   18a2a:	f145 0500 	adc.w	r5, r5, #0
   18a2e:	f7fd fbe9 	bl	16204 <z_spin_unlock_valid>
   18a32:	b968      	cbnz	r0, 18a50 <sys_clock_tick_get+0x70>
   18a34:	4a0b      	ldr	r2, [pc, #44]	; (18a64 <sys_clock_tick_get+0x84>)
   18a36:	4910      	ldr	r1, [pc, #64]	; (18a78 <sys_clock_tick_get+0x98>)
   18a38:	480c      	ldr	r0, [pc, #48]	; (18a6c <sys_clock_tick_get+0x8c>)
   18a3a:	23ac      	movs	r3, #172	; 0xac
   18a3c:	f001 ff46 	bl	1a8cc <printk>
   18a40:	4907      	ldr	r1, [pc, #28]	; (18a60 <sys_clock_tick_get+0x80>)
   18a42:	480e      	ldr	r0, [pc, #56]	; (18a7c <sys_clock_tick_get+0x9c>)
   18a44:	f001 ff42 	bl	1a8cc <printk>
   18a48:	4806      	ldr	r0, [pc, #24]	; (18a64 <sys_clock_tick_get+0x84>)
   18a4a:	21ac      	movs	r1, #172	; 0xac
   18a4c:	f002 f8d7 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   18a50:	f386 8811 	msr	BASEPRI, r6
   18a54:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   18a58:	4620      	mov	r0, r4
   18a5a:	4629      	mov	r1, r5
   18a5c:	bd70      	pop	{r4, r5, r6, pc}
   18a5e:	bf00      	nop
   18a60:	20001138 	.word	0x20001138
   18a64:	0001d83f 	.word	0x0001d83f
   18a68:	0001d891 	.word	0x0001d891
   18a6c:	0001d2dc 	.word	0x0001d2dc
   18a70:	0001d8a6 	.word	0x0001d8a6
   18a74:	20000730 	.word	0x20000730
   18a78:	0001d865 	.word	0x0001d865
   18a7c:	0001d87c 	.word	0x0001d87c

00018a80 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   18a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a82:	4604      	mov	r4, r0
	__asm__ volatile(
   18a84:	f04f 0320 	mov.w	r3, #32
   18a88:	f3ef 8511 	mrs	r5, BASEPRI
   18a8c:	f383 8812 	msr	BASEPRI_MAX, r3
   18a90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18a94:	484c      	ldr	r0, [pc, #304]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18a96:	f7fd fba7 	bl	161e8 <z_spin_lock_valid>
   18a9a:	b968      	cbnz	r0, 18ab8 <z_timer_expiration_handler+0x38>
   18a9c:	4a4b      	ldr	r2, [pc, #300]	; (18bcc <z_timer_expiration_handler+0x14c>)
   18a9e:	494c      	ldr	r1, [pc, #304]	; (18bd0 <z_timer_expiration_handler+0x150>)
   18aa0:	484c      	ldr	r0, [pc, #304]	; (18bd4 <z_timer_expiration_handler+0x154>)
   18aa2:	2381      	movs	r3, #129	; 0x81
   18aa4:	f001 ff12 	bl	1a8cc <printk>
   18aa8:	4947      	ldr	r1, [pc, #284]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18aaa:	484b      	ldr	r0, [pc, #300]	; (18bd8 <z_timer_expiration_handler+0x158>)
   18aac:	f001 ff0e 	bl	1a8cc <printk>
   18ab0:	4846      	ldr	r0, [pc, #280]	; (18bcc <z_timer_expiration_handler+0x14c>)
   18ab2:	2181      	movs	r1, #129	; 0x81
   18ab4:	f002 f8a3 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   18ab8:	4843      	ldr	r0, [pc, #268]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18aba:	f7fd fbb3 	bl	16224 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   18abe:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   18ac2:	1c56      	adds	r6, r2, #1
   18ac4:	f143 0700 	adc.w	r7, r3, #0
   18ac8:	2f00      	cmp	r7, #0
   18aca:	bf08      	it	eq
   18acc:	2e02      	cmpeq	r6, #2
   18ace:	d303      	bcc.n	18ad8 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18ad0:	4942      	ldr	r1, [pc, #264]	; (18bdc <z_timer_expiration_handler+0x15c>)
   18ad2:	4620      	mov	r0, r4
   18ad4:	f7ff fcfe 	bl	184d4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   18ad8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18ada:	3301      	adds	r3, #1
   18adc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   18ade:	6a23      	ldr	r3, [r4, #32]
   18ae0:	2b00      	cmp	r3, #0
   18ae2:	d035      	beq.n	18b50 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ae4:	4838      	ldr	r0, [pc, #224]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18ae6:	f7fd fb8d 	bl	16204 <z_spin_unlock_valid>
   18aea:	b968      	cbnz	r0, 18b08 <z_timer_expiration_handler+0x88>
   18aec:	4a37      	ldr	r2, [pc, #220]	; (18bcc <z_timer_expiration_handler+0x14c>)
   18aee:	493c      	ldr	r1, [pc, #240]	; (18be0 <z_timer_expiration_handler+0x160>)
   18af0:	4838      	ldr	r0, [pc, #224]	; (18bd4 <z_timer_expiration_handler+0x154>)
   18af2:	23ac      	movs	r3, #172	; 0xac
   18af4:	f001 feea 	bl	1a8cc <printk>
   18af8:	4933      	ldr	r1, [pc, #204]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18afa:	483a      	ldr	r0, [pc, #232]	; (18be4 <z_timer_expiration_handler+0x164>)
   18afc:	f001 fee6 	bl	1a8cc <printk>
   18b00:	4832      	ldr	r0, [pc, #200]	; (18bcc <z_timer_expiration_handler+0x14c>)
   18b02:	21ac      	movs	r1, #172	; 0xac
   18b04:	f002 f87b 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   18b08:	f385 8811 	msr	BASEPRI, r5
   18b0c:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   18b10:	6a23      	ldr	r3, [r4, #32]
   18b12:	4620      	mov	r0, r4
   18b14:	4798      	blx	r3
	__asm__ volatile(
   18b16:	f04f 0320 	mov.w	r3, #32
   18b1a:	f3ef 8511 	mrs	r5, BASEPRI
   18b1e:	f383 8812 	msr	BASEPRI_MAX, r3
   18b22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b26:	4828      	ldr	r0, [pc, #160]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18b28:	f7fd fb5e 	bl	161e8 <z_spin_lock_valid>
   18b2c:	b968      	cbnz	r0, 18b4a <z_timer_expiration_handler+0xca>
   18b2e:	4a27      	ldr	r2, [pc, #156]	; (18bcc <z_timer_expiration_handler+0x14c>)
   18b30:	4927      	ldr	r1, [pc, #156]	; (18bd0 <z_timer_expiration_handler+0x150>)
   18b32:	4828      	ldr	r0, [pc, #160]	; (18bd4 <z_timer_expiration_handler+0x154>)
   18b34:	2381      	movs	r3, #129	; 0x81
   18b36:	f001 fec9 	bl	1a8cc <printk>
   18b3a:	4923      	ldr	r1, [pc, #140]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18b3c:	4826      	ldr	r0, [pc, #152]	; (18bd8 <z_timer_expiration_handler+0x158>)
   18b3e:	f001 fec5 	bl	1a8cc <printk>
   18b42:	4822      	ldr	r0, [pc, #136]	; (18bcc <z_timer_expiration_handler+0x14c>)
   18b44:	2181      	movs	r1, #129	; 0x81
   18b46:	f002 f85a 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   18b4a:	481f      	ldr	r0, [pc, #124]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18b4c:	f7fd fb6a 	bl	16224 <z_spin_lock_set_owner>
	return list->head == list;
   18b50:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b54:	42a6      	cmp	r6, r4
   18b56:	d000      	beq.n	18b5a <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   18b58:	b9b6      	cbnz	r6, 18b88 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18b5a:	481b      	ldr	r0, [pc, #108]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18b5c:	f7fd fb52 	bl	16204 <z_spin_unlock_valid>
   18b60:	b968      	cbnz	r0, 18b7e <z_timer_expiration_handler+0xfe>
   18b62:	4a1a      	ldr	r2, [pc, #104]	; (18bcc <z_timer_expiration_handler+0x14c>)
   18b64:	491e      	ldr	r1, [pc, #120]	; (18be0 <z_timer_expiration_handler+0x160>)
   18b66:	481b      	ldr	r0, [pc, #108]	; (18bd4 <z_timer_expiration_handler+0x154>)
   18b68:	23ac      	movs	r3, #172	; 0xac
   18b6a:	f001 feaf 	bl	1a8cc <printk>
   18b6e:	4916      	ldr	r1, [pc, #88]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18b70:	481c      	ldr	r0, [pc, #112]	; (18be4 <z_timer_expiration_handler+0x164>)
   18b72:	f001 feab 	bl	1a8cc <printk>
   18b76:	4815      	ldr	r0, [pc, #84]	; (18bcc <z_timer_expiration_handler+0x14c>)
   18b78:	21ac      	movs	r1, #172	; 0xac
   18b7a:	f002 f840 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   18b7e:	f385 8811 	msr	BASEPRI, r5
   18b82:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   18b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   18b88:	4630      	mov	r0, r6
   18b8a:	f7fe fa87 	bl	1709c <z_unpend_thread_no_timeout>
   18b8e:	2300      	movs	r3, #0
   18b90:	480d      	ldr	r0, [pc, #52]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18b92:	67b3      	str	r3, [r6, #120]	; 0x78
   18b94:	f7fd fb36 	bl	16204 <z_spin_unlock_valid>
   18b98:	b968      	cbnz	r0, 18bb6 <z_timer_expiration_handler+0x136>
   18b9a:	4a0c      	ldr	r2, [pc, #48]	; (18bcc <z_timer_expiration_handler+0x14c>)
   18b9c:	4910      	ldr	r1, [pc, #64]	; (18be0 <z_timer_expiration_handler+0x160>)
   18b9e:	480d      	ldr	r0, [pc, #52]	; (18bd4 <z_timer_expiration_handler+0x154>)
   18ba0:	23ac      	movs	r3, #172	; 0xac
   18ba2:	f001 fe93 	bl	1a8cc <printk>
   18ba6:	4908      	ldr	r1, [pc, #32]	; (18bc8 <z_timer_expiration_handler+0x148>)
   18ba8:	480e      	ldr	r0, [pc, #56]	; (18be4 <z_timer_expiration_handler+0x164>)
   18baa:	f001 fe8f 	bl	1a8cc <printk>
   18bae:	4807      	ldr	r0, [pc, #28]	; (18bcc <z_timer_expiration_handler+0x14c>)
   18bb0:	21ac      	movs	r1, #172	; 0xac
   18bb2:	f002 f824 	bl	1abfe <assert_post_action>
   18bb6:	f385 8811 	msr	BASEPRI, r5
   18bba:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   18bbe:	4630      	mov	r0, r6
}
   18bc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   18bc4:	f7fe bd52 	b.w	1766c <z_ready_thread>
   18bc8:	2000113c 	.word	0x2000113c
   18bcc:	0001d83f 	.word	0x0001d83f
   18bd0:	0001d891 	.word	0x0001d891
   18bd4:	0001d2dc 	.word	0x0001d2dc
   18bd8:	0001d8a6 	.word	0x0001d8a6
   18bdc:	00018a81 	.word	0x00018a81
   18be0:	0001d865 	.word	0x0001d865
   18be4:	0001d87c 	.word	0x0001d87c

00018be8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   18be8:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   18bec:	4619      	mov	r1, r3
   18bee:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   18bf0:	1c4c      	adds	r4, r1, #1
{
   18bf2:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   18bf4:	bf08      	it	eq
   18bf6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   18bfa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   18bfe:	4680      	mov	r8, r0
   18c00:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   18c02:	d04c      	beq.n	18c9e <z_impl_k_timer_start+0xb6>
   18c04:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   18c06:	1c6b      	adds	r3, r5, #1
   18c08:	bf08      	it	eq
   18c0a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   18c0e:	4614      	mov	r4, r2
   18c10:	d019      	beq.n	18c46 <z_impl_k_timer_start+0x5e>
   18c12:	ea54 0305 	orrs.w	r3, r4, r5
   18c16:	d016      	beq.n	18c46 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   18c18:	f06f 0301 	mvn.w	r3, #1
   18c1c:	ebb3 0a02 	subs.w	sl, r3, r2
   18c20:	f04f 33ff 	mov.w	r3, #4294967295
   18c24:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   18c28:	f1ba 0f00 	cmp.w	sl, #0
   18c2c:	f17b 0300 	sbcs.w	r3, fp, #0
   18c30:	da09      	bge.n	18c46 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   18c32:	f112 34ff 	adds.w	r4, r2, #4294967295
   18c36:	f145 35ff 	adc.w	r5, r5, #4294967295
   18c3a:	2c01      	cmp	r4, #1
   18c3c:	f175 0300 	sbcs.w	r3, r5, #0
   18c40:	bfbc      	itt	lt
   18c42:	2401      	movlt	r4, #1
   18c44:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   18c46:	f06f 0301 	mvn.w	r3, #1
   18c4a:	1a1b      	subs	r3, r3, r0
   18c4c:	9300      	str	r3, [sp, #0]
   18c4e:	f04f 33ff 	mov.w	r3, #4294967295
   18c52:	eb63 0301 	sbc.w	r3, r3, r1
   18c56:	9301      	str	r3, [sp, #4]
   18c58:	e9dd 2300 	ldrd	r2, r3, [sp]
   18c5c:	2a00      	cmp	r2, #0
   18c5e:	f173 0300 	sbcs.w	r3, r3, #0
   18c62:	da0c      	bge.n	18c7e <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   18c64:	f110 38ff 	adds.w	r8, r0, #4294967295
   18c68:	f141 39ff 	adc.w	r9, r1, #4294967295
   18c6c:	f1b8 0f00 	cmp.w	r8, #0
   18c70:	f179 0300 	sbcs.w	r3, r9, #0
   18c74:	bfbc      	itt	lt
   18c76:	f04f 0800 	movlt.w	r8, #0
   18c7a:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   18c7e:	4630      	mov	r0, r6
   18c80:	f7ff fcfc 	bl	1867c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   18c84:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18c86:	4907      	ldr	r1, [pc, #28]	; (18ca4 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   18c88:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18c8a:	4642      	mov	r2, r8
   18c8c:	464b      	mov	r3, r9
   18c8e:	4630      	mov	r0, r6
	timer->period = period;
   18c90:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   18c94:	b002      	add	sp, #8
   18c96:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18c9a:	f7ff bc1b 	b.w	184d4 <z_add_timeout>
}
   18c9e:	b002      	add	sp, #8
   18ca0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   18ca4:	00018a81 	.word	0x00018a81

00018ca8 <z_heap_aligned_alloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   18ca8:	2304      	movs	r3, #4
   18caa:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   18cac:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   18cb0:	4606      	mov	r6, r0
   18cb2:	460d      	mov	r5, r1
   18cb4:	d20a      	bcs.n	18ccc <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   18cb6:	f04f 0800 	mov.w	r8, #0
   18cba:	f04f 0900 	mov.w	r9, #0
   18cbe:	e9cd 8900 	strd	r8, r9, [sp]
   18cc2:	4319      	orrs	r1, r3
   18cc4:	f000 f898 	bl	18df8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   18cc8:	4604      	mov	r4, r0
   18cca:	b920      	cbnz	r0, 18cd6 <z_heap_aligned_alloc+0x2e>
		return NULL;
   18ccc:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   18cce:	4620      	mov	r0, r4
   18cd0:	b002      	add	sp, #8
   18cd2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   18cd6:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   18cda:	2d00      	cmp	r5, #0
   18cdc:	d0f7      	beq.n	18cce <z_heap_aligned_alloc+0x26>
   18cde:	1e6b      	subs	r3, r5, #1
   18ce0:	421c      	tst	r4, r3
   18ce2:	d0f4      	beq.n	18cce <z_heap_aligned_alloc+0x26>
   18ce4:	2325      	movs	r3, #37	; 0x25
   18ce6:	4a07      	ldr	r2, [pc, #28]	; (18d04 <z_heap_aligned_alloc+0x5c>)
   18ce8:	4907      	ldr	r1, [pc, #28]	; (18d08 <z_heap_aligned_alloc+0x60>)
   18cea:	4808      	ldr	r0, [pc, #32]	; (18d0c <z_heap_aligned_alloc+0x64>)
   18cec:	f001 fdee 	bl	1a8cc <printk>
   18cf0:	4621      	mov	r1, r4
   18cf2:	4807      	ldr	r0, [pc, #28]	; (18d10 <z_heap_aligned_alloc+0x68>)
   18cf4:	462a      	mov	r2, r5
   18cf6:	f001 fde9 	bl	1a8cc <printk>
   18cfa:	4802      	ldr	r0, [pc, #8]	; (18d04 <z_heap_aligned_alloc+0x5c>)
   18cfc:	2125      	movs	r1, #37	; 0x25
   18cfe:	f001 ff7e 	bl	1abfe <assert_post_action>
   18d02:	e7e4      	b.n	18cce <z_heap_aligned_alloc+0x26>
   18d04:	0002051f 	.word	0x0002051f
   18d08:	00020543 	.word	0x00020543
   18d0c:	0001d2dc 	.word	0x0001d2dc
   18d10:	00020575 	.word	0x00020575

00018d14 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   18d14:	2803      	cmp	r0, #3
{
   18d16:	b538      	push	{r3, r4, r5, lr}
   18d18:	4604      	mov	r4, r0
   18d1a:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   18d1c:	d901      	bls.n	18d22 <k_aligned_alloc+0xe>
   18d1e:	0783      	lsls	r3, r0, #30
   18d20:	d00c      	beq.n	18d3c <k_aligned_alloc+0x28>
   18d22:	4912      	ldr	r1, [pc, #72]	; (18d6c <k_aligned_alloc+0x58>)
   18d24:	4a12      	ldr	r2, [pc, #72]	; (18d70 <k_aligned_alloc+0x5c>)
   18d26:	4813      	ldr	r0, [pc, #76]	; (18d74 <k_aligned_alloc+0x60>)
   18d28:	2342      	movs	r3, #66	; 0x42
   18d2a:	f001 fdcf 	bl	1a8cc <printk>
   18d2e:	4812      	ldr	r0, [pc, #72]	; (18d78 <k_aligned_alloc+0x64>)
   18d30:	f001 fdcc 	bl	1a8cc <printk>
   18d34:	480e      	ldr	r0, [pc, #56]	; (18d70 <k_aligned_alloc+0x5c>)
   18d36:	2142      	movs	r1, #66	; 0x42
   18d38:	f001 ff61 	bl	1abfe <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   18d3c:	1e63      	subs	r3, r4, #1
   18d3e:	4223      	tst	r3, r4
   18d40:	d00c      	beq.n	18d5c <k_aligned_alloc+0x48>
   18d42:	490e      	ldr	r1, [pc, #56]	; (18d7c <k_aligned_alloc+0x68>)
   18d44:	4a0a      	ldr	r2, [pc, #40]	; (18d70 <k_aligned_alloc+0x5c>)
   18d46:	480b      	ldr	r0, [pc, #44]	; (18d74 <k_aligned_alloc+0x60>)
   18d48:	2346      	movs	r3, #70	; 0x46
   18d4a:	f001 fdbf 	bl	1a8cc <printk>
   18d4e:	480c      	ldr	r0, [pc, #48]	; (18d80 <k_aligned_alloc+0x6c>)
   18d50:	f001 fdbc 	bl	1a8cc <printk>
   18d54:	4806      	ldr	r0, [pc, #24]	; (18d70 <k_aligned_alloc+0x5c>)
   18d56:	2146      	movs	r1, #70	; 0x46
   18d58:	f001 ff51 	bl	1abfe <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   18d5c:	462a      	mov	r2, r5
   18d5e:	4621      	mov	r1, r4
   18d60:	4808      	ldr	r0, [pc, #32]	; (18d84 <k_aligned_alloc+0x70>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   18d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   18d66:	f7ff bf9f 	b.w	18ca8 <z_heap_aligned_alloc>
   18d6a:	bf00      	nop
   18d6c:	0002059d 	.word	0x0002059d
   18d70:	0002051f 	.word	0x0002051f
   18d74:	0001d2dc 	.word	0x0001d2dc
   18d78:	000205da 	.word	0x000205da
   18d7c:	0001d98a 	.word	0x0001d98a
   18d80:	0001d9a5 	.word	0x0001d9a5
   18d84:	20000450 	.word	0x20000450

00018d88 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   18d88:	4a02      	ldr	r2, [pc, #8]	; (18d94 <boot_banner+0xc>)
   18d8a:	4903      	ldr	r1, [pc, #12]	; (18d98 <boot_banner+0x10>)
   18d8c:	4803      	ldr	r0, [pc, #12]	; (18d9c <boot_banner+0x14>)
   18d8e:	f001 bd9d 	b.w	1a8cc <printk>
   18d92:	bf00      	nop
   18d94:	00020280 	.word	0x00020280
   18d98:	00020607 	.word	0x00020607
   18d9c:	00020616 	.word	0x00020616

00018da0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   18da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   18da2:	4d0f      	ldr	r5, [pc, #60]	; (18de0 <statics_init+0x40>)
   18da4:	4c0f      	ldr	r4, [pc, #60]	; (18de4 <statics_init+0x44>)
   18da6:	4e10      	ldr	r6, [pc, #64]	; (18de8 <statics_init+0x48>)
   18da8:	462f      	mov	r7, r5
   18daa:	42ac      	cmp	r4, r5
   18dac:	d90c      	bls.n	18dc8 <statics_init+0x28>
   18dae:	490f      	ldr	r1, [pc, #60]	; (18dec <statics_init+0x4c>)
   18db0:	480f      	ldr	r0, [pc, #60]	; (18df0 <statics_init+0x50>)
   18db2:	2318      	movs	r3, #24
   18db4:	4632      	mov	r2, r6
   18db6:	f001 fd89 	bl	1a8cc <printk>
   18dba:	480e      	ldr	r0, [pc, #56]	; (18df4 <statics_init+0x54>)
   18dbc:	f001 fd86 	bl	1a8cc <printk>
   18dc0:	2118      	movs	r1, #24
   18dc2:	4630      	mov	r0, r6
   18dc4:	f001 ff1b 	bl	1abfe <assert_post_action>
   18dc8:	42bc      	cmp	r4, r7
   18dca:	d301      	bcc.n	18dd0 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   18dcc:	2000      	movs	r0, #0
   18dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   18dd0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   18dd4:	4620      	mov	r0, r4
   18dd6:	f002 fe99 	bl	1bb0c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   18dda:	3418      	adds	r4, #24
   18ddc:	e7e5      	b.n	18daa <statics_init+0xa>
   18dde:	bf00      	nop
   18de0:	20000468 	.word	0x20000468
   18de4:	20000450 	.word	0x20000450
   18de8:	0002063d 	.word	0x0002063d
   18dec:	0002065f 	.word	0x0002065f
   18df0:	0001d2dc 	.word	0x0001d2dc
   18df4:	00020055 	.word	0x00020055

00018df8 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   18df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dfc:	b087      	sub	sp, #28
   18dfe:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   18e02:	4606      	mov	r6, r0
   18e04:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18e06:	4640      	mov	r0, r8
   18e08:	4649      	mov	r1, r9
{
   18e0a:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18e0c:	f002 fe21 	bl	1ba52 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18e10:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18e14:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   18e18:	f04f 0320 	mov.w	r3, #32
   18e1c:	f3ef 8511 	mrs	r5, BASEPRI
   18e20:	f383 8812 	msr	BASEPRI_MAX, r3
   18e24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e28:	4620      	mov	r0, r4
   18e2a:	f7fd f9dd 	bl	161e8 <z_spin_lock_valid>
   18e2e:	b968      	cbnz	r0, 18e4c <k_heap_aligned_alloc+0x54>
   18e30:	4a3f      	ldr	r2, [pc, #252]	; (18f30 <k_heap_aligned_alloc+0x138>)
   18e32:	4940      	ldr	r1, [pc, #256]	; (18f34 <k_heap_aligned_alloc+0x13c>)
   18e34:	4840      	ldr	r0, [pc, #256]	; (18f38 <k_heap_aligned_alloc+0x140>)
   18e36:	2381      	movs	r3, #129	; 0x81
   18e38:	f001 fd48 	bl	1a8cc <printk>
   18e3c:	483f      	ldr	r0, [pc, #252]	; (18f3c <k_heap_aligned_alloc+0x144>)
   18e3e:	4621      	mov	r1, r4
   18e40:	f001 fd44 	bl	1a8cc <printk>
   18e44:	483a      	ldr	r0, [pc, #232]	; (18f30 <k_heap_aligned_alloc+0x138>)
   18e46:	2181      	movs	r1, #129	; 0x81
   18e48:	f001 fed9 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   18e4c:	4620      	mov	r0, r4
   18e4e:	f7fd f9e9 	bl	16224 <z_spin_lock_set_owner>
   18e52:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   18e56:	b17b      	cbz	r3, 18e78 <k_heap_aligned_alloc+0x80>
   18e58:	ea58 0309 	orrs.w	r3, r8, r9
   18e5c:	d00c      	beq.n	18e78 <k_heap_aligned_alloc+0x80>
   18e5e:	4938      	ldr	r1, [pc, #224]	; (18f40 <k_heap_aligned_alloc+0x148>)
   18e60:	4a38      	ldr	r2, [pc, #224]	; (18f44 <k_heap_aligned_alloc+0x14c>)
   18e62:	4835      	ldr	r0, [pc, #212]	; (18f38 <k_heap_aligned_alloc+0x140>)
   18e64:	2349      	movs	r3, #73	; 0x49
   18e66:	f001 fd31 	bl	1a8cc <printk>
   18e6a:	4837      	ldr	r0, [pc, #220]	; (18f48 <k_heap_aligned_alloc+0x150>)
   18e6c:	f001 fd2e 	bl	1a8cc <printk>
   18e70:	4834      	ldr	r0, [pc, #208]	; (18f44 <k_heap_aligned_alloc+0x14c>)
   18e72:	2149      	movs	r1, #73	; 0x49
   18e74:	f001 fec3 	bl	1abfe <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e78:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 18f30 <k_heap_aligned_alloc+0x138>
   18e7c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 18f34 <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   18e80:	4652      	mov	r2, sl
   18e82:	4659      	mov	r1, fp
   18e84:	4630      	mov	r0, r6
   18e86:	f7f6 fcd3 	bl	f830 <sys_heap_aligned_alloc>
   18e8a:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   18e8c:	f7ff fda8 	bl	189e0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   18e90:	b1cf      	cbz	r7, 18ec6 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18e92:	4620      	mov	r0, r4
   18e94:	f7fd f9b6 	bl	16204 <z_spin_unlock_valid>
   18e98:	b968      	cbnz	r0, 18eb6 <k_heap_aligned_alloc+0xbe>
   18e9a:	4a25      	ldr	r2, [pc, #148]	; (18f30 <k_heap_aligned_alloc+0x138>)
   18e9c:	492b      	ldr	r1, [pc, #172]	; (18f4c <k_heap_aligned_alloc+0x154>)
   18e9e:	4826      	ldr	r0, [pc, #152]	; (18f38 <k_heap_aligned_alloc+0x140>)
   18ea0:	23ac      	movs	r3, #172	; 0xac
   18ea2:	f001 fd13 	bl	1a8cc <printk>
   18ea6:	482a      	ldr	r0, [pc, #168]	; (18f50 <k_heap_aligned_alloc+0x158>)
   18ea8:	4621      	mov	r1, r4
   18eaa:	f001 fd0f 	bl	1a8cc <printk>
   18eae:	4820      	ldr	r0, [pc, #128]	; (18f30 <k_heap_aligned_alloc+0x138>)
   18eb0:	21ac      	movs	r1, #172	; 0xac
   18eb2:	f001 fea4 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   18eb6:	f385 8811 	msr	BASEPRI, r5
   18eba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   18ebe:	4638      	mov	r0, r7
   18ec0:	b007      	add	sp, #28
   18ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   18ec6:	9b04      	ldr	r3, [sp, #16]
   18ec8:	1a1b      	subs	r3, r3, r0
   18eca:	9302      	str	r3, [sp, #8]
   18ecc:	9b05      	ldr	r3, [sp, #20]
   18ece:	eb63 0301 	sbc.w	r3, r3, r1
   18ed2:	9303      	str	r3, [sp, #12]
   18ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18ed8:	2a01      	cmp	r2, #1
   18eda:	f173 0300 	sbcs.w	r3, r3, #0
   18ede:	dbd8      	blt.n	18e92 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   18ee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18ee4:	4629      	mov	r1, r5
   18ee6:	e9cd 2300 	strd	r2, r3, [sp]
   18eea:	4620      	mov	r0, r4
   18eec:	f106 020c 	add.w	r2, r6, #12
   18ef0:	f7fe fd6e 	bl	179d0 <z_pend_curr>
	__asm__ volatile(
   18ef4:	f04f 0320 	mov.w	r3, #32
   18ef8:	f3ef 8511 	mrs	r5, BASEPRI
   18efc:	f383 8812 	msr	BASEPRI_MAX, r3
   18f00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f04:	4620      	mov	r0, r4
   18f06:	f7fd f96f 	bl	161e8 <z_spin_lock_valid>
   18f0a:	b968      	cbnz	r0, 18f28 <k_heap_aligned_alloc+0x130>
   18f0c:	480a      	ldr	r0, [pc, #40]	; (18f38 <k_heap_aligned_alloc+0x140>)
   18f0e:	2381      	movs	r3, #129	; 0x81
   18f10:	4642      	mov	r2, r8
   18f12:	4649      	mov	r1, r9
   18f14:	f001 fcda 	bl	1a8cc <printk>
   18f18:	4808      	ldr	r0, [pc, #32]	; (18f3c <k_heap_aligned_alloc+0x144>)
   18f1a:	4621      	mov	r1, r4
   18f1c:	f001 fcd6 	bl	1a8cc <printk>
   18f20:	2181      	movs	r1, #129	; 0x81
   18f22:	4640      	mov	r0, r8
   18f24:	f001 fe6b 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   18f28:	4620      	mov	r0, r4
   18f2a:	f7fd f97b 	bl	16224 <z_spin_lock_set_owner>
	return k;
   18f2e:	e7a7      	b.n	18e80 <k_heap_aligned_alloc+0x88>
   18f30:	0001d83f 	.word	0x0001d83f
   18f34:	0001d891 	.word	0x0001d891
   18f38:	0001d2dc 	.word	0x0001d2dc
   18f3c:	0001d8a6 	.word	0x0001d8a6
   18f40:	00020675 	.word	0x00020675
   18f44:	0002063d 	.word	0x0002063d
   18f48:	0002027e 	.word	0x0002027e
   18f4c:	0001d865 	.word	0x0001d865
   18f50:	0001d87c 	.word	0x0001d87c

00018f54 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   18f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f56:	4605      	mov	r5, r0
   18f58:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18f5a:	f100 0414 	add.w	r4, r0, #20
   18f5e:	f04f 0320 	mov.w	r3, #32
   18f62:	f3ef 8711 	mrs	r7, BASEPRI
   18f66:	f383 8812 	msr	BASEPRI_MAX, r3
   18f6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f6e:	4620      	mov	r0, r4
   18f70:	f7fd f93a 	bl	161e8 <z_spin_lock_valid>
   18f74:	b968      	cbnz	r0, 18f92 <k_heap_free+0x3e>
   18f76:	4a1b      	ldr	r2, [pc, #108]	; (18fe4 <k_heap_free+0x90>)
   18f78:	491b      	ldr	r1, [pc, #108]	; (18fe8 <k_heap_free+0x94>)
   18f7a:	481c      	ldr	r0, [pc, #112]	; (18fec <k_heap_free+0x98>)
   18f7c:	2381      	movs	r3, #129	; 0x81
   18f7e:	f001 fca5 	bl	1a8cc <printk>
   18f82:	481b      	ldr	r0, [pc, #108]	; (18ff0 <k_heap_free+0x9c>)
   18f84:	4621      	mov	r1, r4
   18f86:	f001 fca1 	bl	1a8cc <printk>
   18f8a:	4816      	ldr	r0, [pc, #88]	; (18fe4 <k_heap_free+0x90>)
   18f8c:	2181      	movs	r1, #129	; 0x81
   18f8e:	f001 fe36 	bl	1abfe <assert_post_action>
	z_spin_lock_set_owner(l);
   18f92:	4620      	mov	r0, r4
   18f94:	f7fd f946 	bl	16224 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   18f98:	4628      	mov	r0, r5
   18f9a:	4631      	mov	r1, r6
   18f9c:	f7f6 fbfc 	bl	f798 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   18fa0:	f105 000c 	add.w	r0, r5, #12
   18fa4:	f002 fd3b 	bl	1ba1e <z_unpend_all>
   18fa8:	b128      	cbz	r0, 18fb6 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   18faa:	4639      	mov	r1, r7
   18fac:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   18fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   18fb2:	f7fe b8bb 	b.w	1712c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18fb6:	4620      	mov	r0, r4
   18fb8:	f7fd f924 	bl	16204 <z_spin_unlock_valid>
   18fbc:	b968      	cbnz	r0, 18fda <k_heap_free+0x86>
   18fbe:	4a09      	ldr	r2, [pc, #36]	; (18fe4 <k_heap_free+0x90>)
   18fc0:	490c      	ldr	r1, [pc, #48]	; (18ff4 <k_heap_free+0xa0>)
   18fc2:	480a      	ldr	r0, [pc, #40]	; (18fec <k_heap_free+0x98>)
   18fc4:	23ac      	movs	r3, #172	; 0xac
   18fc6:	f001 fc81 	bl	1a8cc <printk>
   18fca:	480b      	ldr	r0, [pc, #44]	; (18ff8 <k_heap_free+0xa4>)
   18fcc:	4621      	mov	r1, r4
   18fce:	f001 fc7d 	bl	1a8cc <printk>
   18fd2:	4804      	ldr	r0, [pc, #16]	; (18fe4 <k_heap_free+0x90>)
   18fd4:	21ac      	movs	r1, #172	; 0xac
   18fd6:	f001 fe12 	bl	1abfe <assert_post_action>
	__asm__ volatile(
   18fda:	f387 8811 	msr	BASEPRI, r7
   18fde:	f3bf 8f6f 	isb	sy
}
   18fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18fe4:	0001d83f 	.word	0x0001d83f
   18fe8:	0001d891 	.word	0x0001d891
   18fec:	0001d2dc 	.word	0x0001d2dc
   18ff0:	0001d8a6 	.word	0x0001d8a6
   18ff4:	0001d865 	.word	0x0001d865
   18ff8:	0001d87c 	.word	0x0001d87c

00018ffc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   18ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   18ffe:	4b09      	ldr	r3, [pc, #36]	; (19024 <k_sys_work_q_init+0x28>)
   19000:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   19002:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   19004:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   19006:	9300      	str	r3, [sp, #0]
   19008:	4907      	ldr	r1, [pc, #28]	; (19028 <k_sys_work_q_init+0x2c>)
   1900a:	4808      	ldr	r0, [pc, #32]	; (1902c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1900c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   19010:	f04f 33ff 	mov.w	r3, #4294967295
   19014:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   19018:	f7fd fe28 	bl	16c6c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1901c:	4620      	mov	r0, r4
   1901e:	b004      	add	sp, #16
   19020:	bd10      	pop	{r4, pc}
   19022:	bf00      	nop
   19024:	000206ba 	.word	0x000206ba
   19028:	20005540 	.word	0x20005540
   1902c:	20000738 	.word	0x20000738

00019030 <nrf_cc3xx_platform_init_no_rng>:
   19030:	b510      	push	{r4, lr}
   19032:	4c0a      	ldr	r4, [pc, #40]	; (1905c <nrf_cc3xx_platform_init_no_rng+0x2c>)
   19034:	6823      	ldr	r3, [r4, #0]
   19036:	b11b      	cbz	r3, 19040 <nrf_cc3xx_platform_init_no_rng+0x10>
   19038:	2301      	movs	r3, #1
   1903a:	6023      	str	r3, [r4, #0]
   1903c:	2000      	movs	r0, #0
   1903e:	bd10      	pop	{r4, pc}
   19040:	f000 f8d6 	bl	191f0 <CC_LibInitNoRng>
   19044:	2800      	cmp	r0, #0
   19046:	d0f7      	beq.n	19038 <nrf_cc3xx_platform_init_no_rng+0x8>
   19048:	3801      	subs	r0, #1
   1904a:	2806      	cmp	r0, #6
   1904c:	d803      	bhi.n	19056 <nrf_cc3xx_platform_init_no_rng+0x26>
   1904e:	4b04      	ldr	r3, [pc, #16]	; (19060 <nrf_cc3xx_platform_init_no_rng+0x30>)
   19050:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19054:	bd10      	pop	{r4, pc}
   19056:	4803      	ldr	r0, [pc, #12]	; (19064 <nrf_cc3xx_platform_init_no_rng+0x34>)
   19058:	bd10      	pop	{r4, pc}
   1905a:	bf00      	nop
   1905c:	20001140 	.word	0x20001140
   19060:	0001ce10 	.word	0x0001ce10
   19064:	ffff8ffe 	.word	0xffff8ffe

00019068 <nrf_cc3xx_platform_abort>:
   19068:	f3bf 8f4f 	dsb	sy
   1906c:	4905      	ldr	r1, [pc, #20]	; (19084 <nrf_cc3xx_platform_abort+0x1c>)
   1906e:	4b06      	ldr	r3, [pc, #24]	; (19088 <nrf_cc3xx_platform_abort+0x20>)
   19070:	68ca      	ldr	r2, [r1, #12]
   19072:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   19076:	4313      	orrs	r3, r2
   19078:	60cb      	str	r3, [r1, #12]
   1907a:	f3bf 8f4f 	dsb	sy
   1907e:	bf00      	nop
   19080:	e7fd      	b.n	1907e <nrf_cc3xx_platform_abort+0x16>
   19082:	bf00      	nop
   19084:	e000ed00 	.word	0xe000ed00
   19088:	05fa0004 	.word	0x05fa0004

0001908c <CC_PalAbort>:
   1908c:	b4f0      	push	{r4, r5, r6, r7}
   1908e:	4f09      	ldr	r7, [pc, #36]	; (190b4 <CC_PalAbort+0x28>)
   19090:	4e09      	ldr	r6, [pc, #36]	; (190b8 <CC_PalAbort+0x2c>)
   19092:	4c0a      	ldr	r4, [pc, #40]	; (190bc <CC_PalAbort+0x30>)
   19094:	4a0a      	ldr	r2, [pc, #40]	; (190c0 <CC_PalAbort+0x34>)
   19096:	4d0b      	ldr	r5, [pc, #44]	; (190c4 <CC_PalAbort+0x38>)
   19098:	490b      	ldr	r1, [pc, #44]	; (190c8 <CC_PalAbort+0x3c>)
   1909a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1909e:	603b      	str	r3, [r7, #0]
   190a0:	6852      	ldr	r2, [r2, #4]
   190a2:	6033      	str	r3, [r6, #0]
   190a4:	6023      	str	r3, [r4, #0]
   190a6:	2400      	movs	r4, #0
   190a8:	602b      	str	r3, [r5, #0]
   190aa:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   190ae:	bcf0      	pop	{r4, r5, r6, r7}
   190b0:	4710      	bx	r2
   190b2:	bf00      	nop
   190b4:	5002b400 	.word	0x5002b400
   190b8:	5002b404 	.word	0x5002b404
   190bc:	5002b408 	.word	0x5002b408
   190c0:	200001cc 	.word	0x200001cc
   190c4:	5002b40c 	.word	0x5002b40c
   190c8:	5002a000 	.word	0x5002a000

000190cc <nrf_cc3xx_platform_set_abort>:
   190cc:	e9d0 1200 	ldrd	r1, r2, [r0]
   190d0:	4b01      	ldr	r3, [pc, #4]	; (190d8 <nrf_cc3xx_platform_set_abort+0xc>)
   190d2:	e9c3 1200 	strd	r1, r2, [r3]
   190d6:	4770      	bx	lr
   190d8:	200001cc 	.word	0x200001cc

000190dc <mutex_free>:
   190dc:	b510      	push	{r4, lr}
   190de:	4604      	mov	r4, r0
   190e0:	b130      	cbz	r0, 190f0 <mutex_free+0x14>
   190e2:	6863      	ldr	r3, [r4, #4]
   190e4:	06db      	lsls	r3, r3, #27
   190e6:	d502      	bpl.n	190ee <mutex_free+0x12>
   190e8:	2300      	movs	r3, #0
   190ea:	6023      	str	r3, [r4, #0]
   190ec:	6063      	str	r3, [r4, #4]
   190ee:	bd10      	pop	{r4, pc}
   190f0:	4b02      	ldr	r3, [pc, #8]	; (190fc <mutex_free+0x20>)
   190f2:	4803      	ldr	r0, [pc, #12]	; (19100 <mutex_free+0x24>)
   190f4:	685b      	ldr	r3, [r3, #4]
   190f6:	4798      	blx	r3
   190f8:	e7f3      	b.n	190e2 <mutex_free+0x6>
   190fa:	bf00      	nop
   190fc:	200001cc 	.word	0x200001cc
   19100:	0001ce2c 	.word	0x0001ce2c

00019104 <mutex_unlock>:
   19104:	b168      	cbz	r0, 19122 <mutex_unlock+0x1e>
   19106:	6843      	ldr	r3, [r0, #4]
   19108:	b13b      	cbz	r3, 1911a <mutex_unlock+0x16>
   1910a:	06db      	lsls	r3, r3, #27
   1910c:	d507      	bpl.n	1911e <mutex_unlock+0x1a>
   1910e:	f3bf 8f5f 	dmb	sy
   19112:	2300      	movs	r3, #0
   19114:	6003      	str	r3, [r0, #0]
   19116:	4618      	mov	r0, r3
   19118:	4770      	bx	lr
   1911a:	4803      	ldr	r0, [pc, #12]	; (19128 <mutex_unlock+0x24>)
   1911c:	4770      	bx	lr
   1911e:	4803      	ldr	r0, [pc, #12]	; (1912c <mutex_unlock+0x28>)
   19120:	4770      	bx	lr
   19122:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   19126:	4770      	bx	lr
   19128:	ffff8fea 	.word	0xffff8fea
   1912c:	ffff8fe9 	.word	0xffff8fe9

00019130 <mutex_init>:
   19130:	b510      	push	{r4, lr}
   19132:	4604      	mov	r4, r0
   19134:	b120      	cbz	r0, 19140 <mutex_init+0x10>
   19136:	2200      	movs	r2, #0
   19138:	2311      	movs	r3, #17
   1913a:	6022      	str	r2, [r4, #0]
   1913c:	6063      	str	r3, [r4, #4]
   1913e:	bd10      	pop	{r4, pc}
   19140:	4801      	ldr	r0, [pc, #4]	; (19148 <mutex_init+0x18>)
   19142:	f7ff ffa3 	bl	1908c <CC_PalAbort>
   19146:	e7f6      	b.n	19136 <mutex_init+0x6>
   19148:	0001ce54 	.word	0x0001ce54

0001914c <mutex_lock>:
   1914c:	b1c0      	cbz	r0, 19180 <mutex_lock+0x34>
   1914e:	6843      	ldr	r3, [r0, #4]
   19150:	b1a3      	cbz	r3, 1917c <mutex_lock+0x30>
   19152:	06db      	lsls	r3, r3, #27
   19154:	d510      	bpl.n	19178 <mutex_lock+0x2c>
   19156:	2201      	movs	r2, #1
   19158:	f3bf 8f5b 	dmb	ish
   1915c:	e850 3f00 	ldrex	r3, [r0]
   19160:	e840 2100 	strex	r1, r2, [r0]
   19164:	2900      	cmp	r1, #0
   19166:	d1f9      	bne.n	1915c <mutex_lock+0x10>
   19168:	f3bf 8f5b 	dmb	ish
   1916c:	2b01      	cmp	r3, #1
   1916e:	d0f3      	beq.n	19158 <mutex_lock+0xc>
   19170:	f3bf 8f5f 	dmb	sy
   19174:	2000      	movs	r0, #0
   19176:	4770      	bx	lr
   19178:	4803      	ldr	r0, [pc, #12]	; (19188 <mutex_lock+0x3c>)
   1917a:	4770      	bx	lr
   1917c:	4803      	ldr	r0, [pc, #12]	; (1918c <mutex_lock+0x40>)
   1917e:	4770      	bx	lr
   19180:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   19184:	4770      	bx	lr
   19186:	bf00      	nop
   19188:	ffff8fe9 	.word	0xffff8fe9
   1918c:	ffff8fea 	.word	0xffff8fea

00019190 <nrf_cc3xx_platform_set_mutexes>:
   19190:	b570      	push	{r4, r5, r6, lr}
   19192:	e9d0 2300 	ldrd	r2, r3, [r0]
   19196:	4c13      	ldr	r4, [pc, #76]	; (191e4 <nrf_cc3xx_platform_set_mutexes+0x54>)
   19198:	4d13      	ldr	r5, [pc, #76]	; (191e8 <nrf_cc3xx_platform_set_mutexes+0x58>)
   1919a:	e9c4 2300 	strd	r2, r3, [r4]
   1919e:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   191a2:	e9c4 6302 	strd	r6, r3, [r4, #8]
   191a6:	4b11      	ldr	r3, [pc, #68]	; (191ec <nrf_cc3xx_platform_set_mutexes+0x5c>)
   191a8:	6808      	ldr	r0, [r1, #0]
   191aa:	6018      	str	r0, [r3, #0]
   191ac:	6848      	ldr	r0, [r1, #4]
   191ae:	6058      	str	r0, [r3, #4]
   191b0:	6888      	ldr	r0, [r1, #8]
   191b2:	6098      	str	r0, [r3, #8]
   191b4:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   191b8:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   191bc:	60de      	str	r6, [r3, #12]
   191be:	6118      	str	r0, [r3, #16]
   191c0:	06cb      	lsls	r3, r1, #27
   191c2:	d50d      	bpl.n	191e0 <nrf_cc3xx_platform_set_mutexes+0x50>
   191c4:	2300      	movs	r3, #0
   191c6:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   191ca:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   191ce:	f505 7088 	add.w	r0, r5, #272	; 0x110
   191d2:	4790      	blx	r2
   191d4:	6823      	ldr	r3, [r4, #0]
   191d6:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   191da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   191de:	4718      	bx	r3
   191e0:	bd70      	pop	{r4, r5, r6, pc}
   191e2:	bf00      	nop
   191e4:	200001dc 	.word	0x200001dc
   191e8:	200029cc 	.word	0x200029cc
   191ec:	200001ec 	.word	0x200001ec

000191f0 <CC_LibInitNoRng>:
   191f0:	b510      	push	{r4, lr}
   191f2:	f000 f833 	bl	1925c <CC_HalInit>
   191f6:	b120      	cbz	r0, 19202 <CC_LibInitNoRng+0x12>
   191f8:	2403      	movs	r4, #3
   191fa:	f000 f867 	bl	192cc <CC_PalTerminate>
   191fe:	4620      	mov	r0, r4
   19200:	bd10      	pop	{r4, pc}
   19202:	f000 f835 	bl	19270 <CC_PalInit>
   19206:	b990      	cbnz	r0, 1922e <CC_LibInitNoRng+0x3e>
   19208:	f000 f8b0 	bl	1936c <CC_PalPowerSaveModeSelect>
   1920c:	b990      	cbnz	r0, 19234 <CC_LibInitNoRng+0x44>
   1920e:	4b0f      	ldr	r3, [pc, #60]	; (1924c <CC_LibInitNoRng+0x5c>)
   19210:	681b      	ldr	r3, [r3, #0]
   19212:	0e1b      	lsrs	r3, r3, #24
   19214:	2bf0      	cmp	r3, #240	; 0xf0
   19216:	d108      	bne.n	1922a <CC_LibInitNoRng+0x3a>
   19218:	4a0d      	ldr	r2, [pc, #52]	; (19250 <CC_LibInitNoRng+0x60>)
   1921a:	4b0e      	ldr	r3, [pc, #56]	; (19254 <CC_LibInitNoRng+0x64>)
   1921c:	6812      	ldr	r2, [r2, #0]
   1921e:	429a      	cmp	r2, r3
   19220:	d00a      	beq.n	19238 <CC_LibInitNoRng+0x48>
   19222:	2407      	movs	r4, #7
   19224:	f000 f81c 	bl	19260 <CC_HalTerminate>
   19228:	e7e7      	b.n	191fa <CC_LibInitNoRng+0xa>
   1922a:	2406      	movs	r4, #6
   1922c:	e7fa      	b.n	19224 <CC_LibInitNoRng+0x34>
   1922e:	2404      	movs	r4, #4
   19230:	4620      	mov	r0, r4
   19232:	bd10      	pop	{r4, pc}
   19234:	2400      	movs	r4, #0
   19236:	e7f5      	b.n	19224 <CC_LibInitNoRng+0x34>
   19238:	2001      	movs	r0, #1
   1923a:	f000 f897 	bl	1936c <CC_PalPowerSaveModeSelect>
   1923e:	4604      	mov	r4, r0
   19240:	2800      	cmp	r0, #0
   19242:	d1f7      	bne.n	19234 <CC_LibInitNoRng+0x44>
   19244:	4b04      	ldr	r3, [pc, #16]	; (19258 <CC_LibInitNoRng+0x68>)
   19246:	6018      	str	r0, [r3, #0]
   19248:	e7d9      	b.n	191fe <CC_LibInitNoRng+0xe>
   1924a:	bf00      	nop
   1924c:	5002b928 	.word	0x5002b928
   19250:	5002ba24 	.word	0x5002ba24
   19254:	20e00000 	.word	0x20e00000
   19258:	5002ba0c 	.word	0x5002ba0c

0001925c <CC_HalInit>:
   1925c:	2000      	movs	r0, #0
   1925e:	4770      	bx	lr

00019260 <CC_HalTerminate>:
   19260:	2000      	movs	r0, #0
   19262:	4770      	bx	lr

00019264 <CC_HalMaskInterrupt>:
   19264:	4b01      	ldr	r3, [pc, #4]	; (1926c <CC_HalMaskInterrupt+0x8>)
   19266:	6018      	str	r0, [r3, #0]
   19268:	4770      	bx	lr
   1926a:	bf00      	nop
   1926c:	5002ba04 	.word	0x5002ba04

00019270 <CC_PalInit>:
   19270:	b510      	push	{r4, lr}
   19272:	4811      	ldr	r0, [pc, #68]	; (192b8 <CC_PalInit+0x48>)
   19274:	f000 f848 	bl	19308 <CC_PalMutexCreate>
   19278:	b100      	cbz	r0, 1927c <CC_PalInit+0xc>
   1927a:	bd10      	pop	{r4, pc}
   1927c:	480f      	ldr	r0, [pc, #60]	; (192bc <CC_PalInit+0x4c>)
   1927e:	f000 f843 	bl	19308 <CC_PalMutexCreate>
   19282:	2800      	cmp	r0, #0
   19284:	d1f9      	bne.n	1927a <CC_PalInit+0xa>
   19286:	4c0e      	ldr	r4, [pc, #56]	; (192c0 <CC_PalInit+0x50>)
   19288:	4620      	mov	r0, r4
   1928a:	f000 f83d 	bl	19308 <CC_PalMutexCreate>
   1928e:	2800      	cmp	r0, #0
   19290:	d1f3      	bne.n	1927a <CC_PalInit+0xa>
   19292:	4b0c      	ldr	r3, [pc, #48]	; (192c4 <CC_PalInit+0x54>)
   19294:	480c      	ldr	r0, [pc, #48]	; (192c8 <CC_PalInit+0x58>)
   19296:	601c      	str	r4, [r3, #0]
   19298:	f000 f836 	bl	19308 <CC_PalMutexCreate>
   1929c:	4601      	mov	r1, r0
   1929e:	2800      	cmp	r0, #0
   192a0:	d1eb      	bne.n	1927a <CC_PalInit+0xa>
   192a2:	f000 f82d 	bl	19300 <CC_PalDmaInit>
   192a6:	4604      	mov	r4, r0
   192a8:	b108      	cbz	r0, 192ae <CC_PalInit+0x3e>
   192aa:	4620      	mov	r0, r4
   192ac:	bd10      	pop	{r4, pc}
   192ae:	f000 f83f 	bl	19330 <CC_PalPowerSaveModeInit>
   192b2:	4620      	mov	r0, r4
   192b4:	e7fa      	b.n	192ac <CC_PalInit+0x3c>
   192b6:	bf00      	nop
   192b8:	20000224 	.word	0x20000224
   192bc:	20000218 	.word	0x20000218
   192c0:	20000220 	.word	0x20000220
   192c4:	20000228 	.word	0x20000228
   192c8:	2000021c 	.word	0x2000021c

000192cc <CC_PalTerminate>:
   192cc:	b508      	push	{r3, lr}
   192ce:	4808      	ldr	r0, [pc, #32]	; (192f0 <CC_PalTerminate+0x24>)
   192d0:	f000 f824 	bl	1931c <CC_PalMutexDestroy>
   192d4:	4807      	ldr	r0, [pc, #28]	; (192f4 <CC_PalTerminate+0x28>)
   192d6:	f000 f821 	bl	1931c <CC_PalMutexDestroy>
   192da:	4807      	ldr	r0, [pc, #28]	; (192f8 <CC_PalTerminate+0x2c>)
   192dc:	f000 f81e 	bl	1931c <CC_PalMutexDestroy>
   192e0:	4806      	ldr	r0, [pc, #24]	; (192fc <CC_PalTerminate+0x30>)
   192e2:	f000 f81b 	bl	1931c <CC_PalMutexDestroy>
   192e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   192ea:	f000 b80b 	b.w	19304 <CC_PalDmaTerminate>
   192ee:	bf00      	nop
   192f0:	20000224 	.word	0x20000224
   192f4:	20000218 	.word	0x20000218
   192f8:	20000220 	.word	0x20000220
   192fc:	2000021c 	.word	0x2000021c

00019300 <CC_PalDmaInit>:
   19300:	2000      	movs	r0, #0
   19302:	4770      	bx	lr

00019304 <CC_PalDmaTerminate>:
   19304:	4770      	bx	lr
   19306:	bf00      	nop

00019308 <CC_PalMutexCreate>:
   19308:	b508      	push	{r3, lr}
   1930a:	4b03      	ldr	r3, [pc, #12]	; (19318 <CC_PalMutexCreate+0x10>)
   1930c:	6802      	ldr	r2, [r0, #0]
   1930e:	681b      	ldr	r3, [r3, #0]
   19310:	6810      	ldr	r0, [r2, #0]
   19312:	4798      	blx	r3
   19314:	2000      	movs	r0, #0
   19316:	bd08      	pop	{r3, pc}
   19318:	200001dc 	.word	0x200001dc

0001931c <CC_PalMutexDestroy>:
   1931c:	b508      	push	{r3, lr}
   1931e:	4b03      	ldr	r3, [pc, #12]	; (1932c <CC_PalMutexDestroy+0x10>)
   19320:	6802      	ldr	r2, [r0, #0]
   19322:	685b      	ldr	r3, [r3, #4]
   19324:	6810      	ldr	r0, [r2, #0]
   19326:	4798      	blx	r3
   19328:	2000      	movs	r0, #0
   1932a:	bd08      	pop	{r3, pc}
   1932c:	200001dc 	.word	0x200001dc

00019330 <CC_PalPowerSaveModeInit>:
   19330:	b570      	push	{r4, r5, r6, lr}
   19332:	4c09      	ldr	r4, [pc, #36]	; (19358 <CC_PalPowerSaveModeInit+0x28>)
   19334:	4d09      	ldr	r5, [pc, #36]	; (1935c <CC_PalPowerSaveModeInit+0x2c>)
   19336:	6920      	ldr	r0, [r4, #16]
   19338:	68ab      	ldr	r3, [r5, #8]
   1933a:	4798      	blx	r3
   1933c:	b118      	cbz	r0, 19346 <CC_PalPowerSaveModeInit+0x16>
   1933e:	4b08      	ldr	r3, [pc, #32]	; (19360 <CC_PalPowerSaveModeInit+0x30>)
   19340:	4808      	ldr	r0, [pc, #32]	; (19364 <CC_PalPowerSaveModeInit+0x34>)
   19342:	685b      	ldr	r3, [r3, #4]
   19344:	4798      	blx	r3
   19346:	4a08      	ldr	r2, [pc, #32]	; (19368 <CC_PalPowerSaveModeInit+0x38>)
   19348:	68eb      	ldr	r3, [r5, #12]
   1934a:	6920      	ldr	r0, [r4, #16]
   1934c:	2100      	movs	r1, #0
   1934e:	6011      	str	r1, [r2, #0]
   19350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19354:	4718      	bx	r3
   19356:	bf00      	nop
   19358:	200001ec 	.word	0x200001ec
   1935c:	200001dc 	.word	0x200001dc
   19360:	200001cc 	.word	0x200001cc
   19364:	0001ce78 	.word	0x0001ce78
   19368:	20001154 	.word	0x20001154

0001936c <CC_PalPowerSaveModeSelect>:
   1936c:	b570      	push	{r4, r5, r6, lr}
   1936e:	4d1a      	ldr	r5, [pc, #104]	; (193d8 <CC_PalPowerSaveModeSelect+0x6c>)
   19370:	4e1a      	ldr	r6, [pc, #104]	; (193dc <CC_PalPowerSaveModeSelect+0x70>)
   19372:	4604      	mov	r4, r0
   19374:	68b2      	ldr	r2, [r6, #8]
   19376:	6928      	ldr	r0, [r5, #16]
   19378:	4790      	blx	r2
   1937a:	b9f0      	cbnz	r0, 193ba <CC_PalPowerSaveModeSelect+0x4e>
   1937c:	b15c      	cbz	r4, 19396 <CC_PalPowerSaveModeSelect+0x2a>
   1937e:	4c18      	ldr	r4, [pc, #96]	; (193e0 <CC_PalPowerSaveModeSelect+0x74>)
   19380:	6823      	ldr	r3, [r4, #0]
   19382:	b1ab      	cbz	r3, 193b0 <CC_PalPowerSaveModeSelect+0x44>
   19384:	2b01      	cmp	r3, #1
   19386:	d01a      	beq.n	193be <CC_PalPowerSaveModeSelect+0x52>
   19388:	3b01      	subs	r3, #1
   1938a:	6023      	str	r3, [r4, #0]
   1938c:	6928      	ldr	r0, [r5, #16]
   1938e:	68f3      	ldr	r3, [r6, #12]
   19390:	4798      	blx	r3
   19392:	2000      	movs	r0, #0
   19394:	bd70      	pop	{r4, r5, r6, pc}
   19396:	4c12      	ldr	r4, [pc, #72]	; (193e0 <CC_PalPowerSaveModeSelect+0x74>)
   19398:	6821      	ldr	r1, [r4, #0]
   1939a:	b939      	cbnz	r1, 193ac <CC_PalPowerSaveModeSelect+0x40>
   1939c:	4b11      	ldr	r3, [pc, #68]	; (193e4 <CC_PalPowerSaveModeSelect+0x78>)
   1939e:	4a12      	ldr	r2, [pc, #72]	; (193e8 <CC_PalPowerSaveModeSelect+0x7c>)
   193a0:	2001      	movs	r0, #1
   193a2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   193a6:	6813      	ldr	r3, [r2, #0]
   193a8:	2b00      	cmp	r3, #0
   193aa:	d1fc      	bne.n	193a6 <CC_PalPowerSaveModeSelect+0x3a>
   193ac:	3101      	adds	r1, #1
   193ae:	6021      	str	r1, [r4, #0]
   193b0:	68f3      	ldr	r3, [r6, #12]
   193b2:	6928      	ldr	r0, [r5, #16]
   193b4:	4798      	blx	r3
   193b6:	2000      	movs	r0, #0
   193b8:	bd70      	pop	{r4, r5, r6, pc}
   193ba:	480c      	ldr	r0, [pc, #48]	; (193ec <CC_PalPowerSaveModeSelect+0x80>)
   193bc:	bd70      	pop	{r4, r5, r6, pc}
   193be:	4a0a      	ldr	r2, [pc, #40]	; (193e8 <CC_PalPowerSaveModeSelect+0x7c>)
   193c0:	6813      	ldr	r3, [r2, #0]
   193c2:	2b00      	cmp	r3, #0
   193c4:	d1fc      	bne.n	193c0 <CC_PalPowerSaveModeSelect+0x54>
   193c6:	4a07      	ldr	r2, [pc, #28]	; (193e4 <CC_PalPowerSaveModeSelect+0x78>)
   193c8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   193cc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   193d0:	f7ff ff48 	bl	19264 <CC_HalMaskInterrupt>
   193d4:	6823      	ldr	r3, [r4, #0]
   193d6:	e7d7      	b.n	19388 <CC_PalPowerSaveModeSelect+0x1c>
   193d8:	200001ec 	.word	0x200001ec
   193dc:	200001dc 	.word	0x200001dc
   193e0:	20001154 	.word	0x20001154
   193e4:	5002a000 	.word	0x5002a000
   193e8:	5002b910 	.word	0x5002b910
   193ec:	ffff8fe9 	.word	0xffff8fe9

000193f0 <__assert_func>:
   193f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   193f2:	4614      	mov	r4, r2
   193f4:	461a      	mov	r2, r3
   193f6:	4b09      	ldr	r3, [pc, #36]	; (1941c <__assert_func+0x2c>)
   193f8:	681b      	ldr	r3, [r3, #0]
   193fa:	4605      	mov	r5, r0
   193fc:	68d8      	ldr	r0, [r3, #12]
   193fe:	b14c      	cbz	r4, 19414 <__assert_func+0x24>
   19400:	4b07      	ldr	r3, [pc, #28]	; (19420 <__assert_func+0x30>)
   19402:	9100      	str	r1, [sp, #0]
   19404:	e9cd 3401 	strd	r3, r4, [sp, #4]
   19408:	4906      	ldr	r1, [pc, #24]	; (19424 <__assert_func+0x34>)
   1940a:	462b      	mov	r3, r5
   1940c:	f000 f80e 	bl	1942c <fiprintf>
   19410:	f002 fd03 	bl	1be1a <abort>
   19414:	4b04      	ldr	r3, [pc, #16]	; (19428 <__assert_func+0x38>)
   19416:	461c      	mov	r4, r3
   19418:	e7f3      	b.n	19402 <__assert_func+0x12>
   1941a:	bf00      	nop
   1941c:	2000022c 	.word	0x2000022c
   19420:	000206c3 	.word	0x000206c3
   19424:	000206d0 	.word	0x000206d0
   19428:	00020280 	.word	0x00020280

0001942c <fiprintf>:
   1942c:	b40e      	push	{r1, r2, r3}
   1942e:	b503      	push	{r0, r1, lr}
   19430:	4601      	mov	r1, r0
   19432:	ab03      	add	r3, sp, #12
   19434:	4805      	ldr	r0, [pc, #20]	; (1944c <fiprintf+0x20>)
   19436:	f853 2b04 	ldr.w	r2, [r3], #4
   1943a:	6800      	ldr	r0, [r0, #0]
   1943c:	9301      	str	r3, [sp, #4]
   1943e:	f000 f8b7 	bl	195b0 <_vfiprintf_r>
   19442:	b002      	add	sp, #8
   19444:	f85d eb04 	ldr.w	lr, [sp], #4
   19448:	b003      	add	sp, #12
   1944a:	4770      	bx	lr
   1944c:	2000022c 	.word	0x2000022c

00019450 <malloc>:
   19450:	4b02      	ldr	r3, [pc, #8]	; (1945c <malloc+0xc>)
   19452:	4601      	mov	r1, r0
   19454:	6818      	ldr	r0, [r3, #0]
   19456:	f000 b851 	b.w	194fc <_malloc_r>
   1945a:	bf00      	nop
   1945c:	2000022c 	.word	0x2000022c

00019460 <_free_r>:
   19460:	b538      	push	{r3, r4, r5, lr}
   19462:	4605      	mov	r5, r0
   19464:	2900      	cmp	r1, #0
   19466:	d045      	beq.n	194f4 <_free_r+0x94>
   19468:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1946c:	1f0c      	subs	r4, r1, #4
   1946e:	2b00      	cmp	r3, #0
   19470:	bfb8      	it	lt
   19472:	18e4      	addlt	r4, r4, r3
   19474:	f000 ffb2 	bl	1a3dc <__malloc_lock>
   19478:	4a1f      	ldr	r2, [pc, #124]	; (194f8 <_free_r+0x98>)
   1947a:	6813      	ldr	r3, [r2, #0]
   1947c:	4610      	mov	r0, r2
   1947e:	b933      	cbnz	r3, 1948e <_free_r+0x2e>
   19480:	6063      	str	r3, [r4, #4]
   19482:	6014      	str	r4, [r2, #0]
   19484:	4628      	mov	r0, r5
   19486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1948a:	f000 bfad 	b.w	1a3e8 <__malloc_unlock>
   1948e:	42a3      	cmp	r3, r4
   19490:	d90b      	bls.n	194aa <_free_r+0x4a>
   19492:	6821      	ldr	r1, [r4, #0]
   19494:	1862      	adds	r2, r4, r1
   19496:	4293      	cmp	r3, r2
   19498:	bf04      	itt	eq
   1949a:	681a      	ldreq	r2, [r3, #0]
   1949c:	685b      	ldreq	r3, [r3, #4]
   1949e:	6063      	str	r3, [r4, #4]
   194a0:	bf04      	itt	eq
   194a2:	1852      	addeq	r2, r2, r1
   194a4:	6022      	streq	r2, [r4, #0]
   194a6:	6004      	str	r4, [r0, #0]
   194a8:	e7ec      	b.n	19484 <_free_r+0x24>
   194aa:	461a      	mov	r2, r3
   194ac:	685b      	ldr	r3, [r3, #4]
   194ae:	b10b      	cbz	r3, 194b4 <_free_r+0x54>
   194b0:	42a3      	cmp	r3, r4
   194b2:	d9fa      	bls.n	194aa <_free_r+0x4a>
   194b4:	6811      	ldr	r1, [r2, #0]
   194b6:	1850      	adds	r0, r2, r1
   194b8:	42a0      	cmp	r0, r4
   194ba:	d10b      	bne.n	194d4 <_free_r+0x74>
   194bc:	6820      	ldr	r0, [r4, #0]
   194be:	4401      	add	r1, r0
   194c0:	1850      	adds	r0, r2, r1
   194c2:	4283      	cmp	r3, r0
   194c4:	6011      	str	r1, [r2, #0]
   194c6:	d1dd      	bne.n	19484 <_free_r+0x24>
   194c8:	6818      	ldr	r0, [r3, #0]
   194ca:	685b      	ldr	r3, [r3, #4]
   194cc:	6053      	str	r3, [r2, #4]
   194ce:	4401      	add	r1, r0
   194d0:	6011      	str	r1, [r2, #0]
   194d2:	e7d7      	b.n	19484 <_free_r+0x24>
   194d4:	d902      	bls.n	194dc <_free_r+0x7c>
   194d6:	230c      	movs	r3, #12
   194d8:	602b      	str	r3, [r5, #0]
   194da:	e7d3      	b.n	19484 <_free_r+0x24>
   194dc:	6820      	ldr	r0, [r4, #0]
   194de:	1821      	adds	r1, r4, r0
   194e0:	428b      	cmp	r3, r1
   194e2:	bf04      	itt	eq
   194e4:	6819      	ldreq	r1, [r3, #0]
   194e6:	685b      	ldreq	r3, [r3, #4]
   194e8:	6063      	str	r3, [r4, #4]
   194ea:	bf04      	itt	eq
   194ec:	1809      	addeq	r1, r1, r0
   194ee:	6021      	streq	r1, [r4, #0]
   194f0:	6054      	str	r4, [r2, #4]
   194f2:	e7c7      	b.n	19484 <_free_r+0x24>
   194f4:	bd38      	pop	{r3, r4, r5, pc}
   194f6:	bf00      	nop
   194f8:	20001158 	.word	0x20001158

000194fc <_malloc_r>:
   194fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   194fe:	1ccd      	adds	r5, r1, #3
   19500:	f025 0503 	bic.w	r5, r5, #3
   19504:	3508      	adds	r5, #8
   19506:	2d0c      	cmp	r5, #12
   19508:	bf38      	it	cc
   1950a:	250c      	movcc	r5, #12
   1950c:	2d00      	cmp	r5, #0
   1950e:	4606      	mov	r6, r0
   19510:	db01      	blt.n	19516 <_malloc_r+0x1a>
   19512:	42a9      	cmp	r1, r5
   19514:	d903      	bls.n	1951e <_malloc_r+0x22>
   19516:	230c      	movs	r3, #12
   19518:	6033      	str	r3, [r6, #0]
   1951a:	2000      	movs	r0, #0
   1951c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1951e:	f000 ff5d 	bl	1a3dc <__malloc_lock>
   19522:	4921      	ldr	r1, [pc, #132]	; (195a8 <_malloc_r+0xac>)
   19524:	680a      	ldr	r2, [r1, #0]
   19526:	4614      	mov	r4, r2
   19528:	b99c      	cbnz	r4, 19552 <_malloc_r+0x56>
   1952a:	4f20      	ldr	r7, [pc, #128]	; (195ac <_malloc_r+0xb0>)
   1952c:	683b      	ldr	r3, [r7, #0]
   1952e:	b923      	cbnz	r3, 1953a <_malloc_r+0x3e>
   19530:	4621      	mov	r1, r4
   19532:	4630      	mov	r0, r6
   19534:	f000 fcbc 	bl	19eb0 <_sbrk_r>
   19538:	6038      	str	r0, [r7, #0]
   1953a:	4629      	mov	r1, r5
   1953c:	4630      	mov	r0, r6
   1953e:	f000 fcb7 	bl	19eb0 <_sbrk_r>
   19542:	1c43      	adds	r3, r0, #1
   19544:	d123      	bne.n	1958e <_malloc_r+0x92>
   19546:	230c      	movs	r3, #12
   19548:	6033      	str	r3, [r6, #0]
   1954a:	4630      	mov	r0, r6
   1954c:	f000 ff4c 	bl	1a3e8 <__malloc_unlock>
   19550:	e7e3      	b.n	1951a <_malloc_r+0x1e>
   19552:	6823      	ldr	r3, [r4, #0]
   19554:	1b5b      	subs	r3, r3, r5
   19556:	d417      	bmi.n	19588 <_malloc_r+0x8c>
   19558:	2b0b      	cmp	r3, #11
   1955a:	d903      	bls.n	19564 <_malloc_r+0x68>
   1955c:	6023      	str	r3, [r4, #0]
   1955e:	441c      	add	r4, r3
   19560:	6025      	str	r5, [r4, #0]
   19562:	e004      	b.n	1956e <_malloc_r+0x72>
   19564:	6863      	ldr	r3, [r4, #4]
   19566:	42a2      	cmp	r2, r4
   19568:	bf0c      	ite	eq
   1956a:	600b      	streq	r3, [r1, #0]
   1956c:	6053      	strne	r3, [r2, #4]
   1956e:	4630      	mov	r0, r6
   19570:	f000 ff3a 	bl	1a3e8 <__malloc_unlock>
   19574:	f104 000b 	add.w	r0, r4, #11
   19578:	1d23      	adds	r3, r4, #4
   1957a:	f020 0007 	bic.w	r0, r0, #7
   1957e:	1ac2      	subs	r2, r0, r3
   19580:	d0cc      	beq.n	1951c <_malloc_r+0x20>
   19582:	1a1b      	subs	r3, r3, r0
   19584:	50a3      	str	r3, [r4, r2]
   19586:	e7c9      	b.n	1951c <_malloc_r+0x20>
   19588:	4622      	mov	r2, r4
   1958a:	6864      	ldr	r4, [r4, #4]
   1958c:	e7cc      	b.n	19528 <_malloc_r+0x2c>
   1958e:	1cc4      	adds	r4, r0, #3
   19590:	f024 0403 	bic.w	r4, r4, #3
   19594:	42a0      	cmp	r0, r4
   19596:	d0e3      	beq.n	19560 <_malloc_r+0x64>
   19598:	1a21      	subs	r1, r4, r0
   1959a:	4630      	mov	r0, r6
   1959c:	f000 fc88 	bl	19eb0 <_sbrk_r>
   195a0:	3001      	adds	r0, #1
   195a2:	d1dd      	bne.n	19560 <_malloc_r+0x64>
   195a4:	e7cf      	b.n	19546 <_malloc_r+0x4a>
   195a6:	bf00      	nop
   195a8:	20001158 	.word	0x20001158
   195ac:	2000115c 	.word	0x2000115c

000195b0 <_vfiprintf_r>:
   195b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195b4:	460d      	mov	r5, r1
   195b6:	b09d      	sub	sp, #116	; 0x74
   195b8:	4614      	mov	r4, r2
   195ba:	4698      	mov	r8, r3
   195bc:	4606      	mov	r6, r0
   195be:	b118      	cbz	r0, 195c8 <_vfiprintf_r+0x18>
   195c0:	6983      	ldr	r3, [r0, #24]
   195c2:	b90b      	cbnz	r3, 195c8 <_vfiprintf_r+0x18>
   195c4:	f000 fe48 	bl	1a258 <__sinit>
   195c8:	4b89      	ldr	r3, [pc, #548]	; (197f0 <_vfiprintf_r+0x240>)
   195ca:	429d      	cmp	r5, r3
   195cc:	d11b      	bne.n	19606 <_vfiprintf_r+0x56>
   195ce:	6875      	ldr	r5, [r6, #4]
   195d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   195d2:	07d9      	lsls	r1, r3, #31
   195d4:	d405      	bmi.n	195e2 <_vfiprintf_r+0x32>
   195d6:	89ab      	ldrh	r3, [r5, #12]
   195d8:	059a      	lsls	r2, r3, #22
   195da:	d402      	bmi.n	195e2 <_vfiprintf_r+0x32>
   195dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   195de:	f7f8 fbed 	bl	11dbc <__retarget_lock_acquire_recursive>
   195e2:	89ab      	ldrh	r3, [r5, #12]
   195e4:	071b      	lsls	r3, r3, #28
   195e6:	d501      	bpl.n	195ec <_vfiprintf_r+0x3c>
   195e8:	692b      	ldr	r3, [r5, #16]
   195ea:	b9eb      	cbnz	r3, 19628 <_vfiprintf_r+0x78>
   195ec:	4629      	mov	r1, r5
   195ee:	4630      	mov	r0, r6
   195f0:	f000 fcc0 	bl	19f74 <__swsetup_r>
   195f4:	b1c0      	cbz	r0, 19628 <_vfiprintf_r+0x78>
   195f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   195f8:	07dc      	lsls	r4, r3, #31
   195fa:	d50e      	bpl.n	1961a <_vfiprintf_r+0x6a>
   195fc:	f04f 30ff 	mov.w	r0, #4294967295
   19600:	b01d      	add	sp, #116	; 0x74
   19602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19606:	4b7b      	ldr	r3, [pc, #492]	; (197f4 <_vfiprintf_r+0x244>)
   19608:	429d      	cmp	r5, r3
   1960a:	d101      	bne.n	19610 <_vfiprintf_r+0x60>
   1960c:	68b5      	ldr	r5, [r6, #8]
   1960e:	e7df      	b.n	195d0 <_vfiprintf_r+0x20>
   19610:	4b79      	ldr	r3, [pc, #484]	; (197f8 <_vfiprintf_r+0x248>)
   19612:	429d      	cmp	r5, r3
   19614:	bf08      	it	eq
   19616:	68f5      	ldreq	r5, [r6, #12]
   19618:	e7da      	b.n	195d0 <_vfiprintf_r+0x20>
   1961a:	89ab      	ldrh	r3, [r5, #12]
   1961c:	0598      	lsls	r0, r3, #22
   1961e:	d4ed      	bmi.n	195fc <_vfiprintf_r+0x4c>
   19620:	6da8      	ldr	r0, [r5, #88]	; 0x58
   19622:	f7f8 fbe9 	bl	11df8 <__retarget_lock_release_recursive>
   19626:	e7e9      	b.n	195fc <_vfiprintf_r+0x4c>
   19628:	2300      	movs	r3, #0
   1962a:	9309      	str	r3, [sp, #36]	; 0x24
   1962c:	2320      	movs	r3, #32
   1962e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   19632:	f8cd 800c 	str.w	r8, [sp, #12]
   19636:	2330      	movs	r3, #48	; 0x30
   19638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 197fc <_vfiprintf_r+0x24c>
   1963c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   19640:	f04f 0901 	mov.w	r9, #1
   19644:	4623      	mov	r3, r4
   19646:	469a      	mov	sl, r3
   19648:	f813 2b01 	ldrb.w	r2, [r3], #1
   1964c:	b10a      	cbz	r2, 19652 <_vfiprintf_r+0xa2>
   1964e:	2a25      	cmp	r2, #37	; 0x25
   19650:	d1f9      	bne.n	19646 <_vfiprintf_r+0x96>
   19652:	ebba 0b04 	subs.w	fp, sl, r4
   19656:	d00b      	beq.n	19670 <_vfiprintf_r+0xc0>
   19658:	465b      	mov	r3, fp
   1965a:	4622      	mov	r2, r4
   1965c:	4629      	mov	r1, r5
   1965e:	4630      	mov	r0, r6
   19660:	f002 faa9 	bl	1bbb6 <__sfputs_r>
   19664:	3001      	adds	r0, #1
   19666:	f000 80aa 	beq.w	197be <_vfiprintf_r+0x20e>
   1966a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1966c:	445a      	add	r2, fp
   1966e:	9209      	str	r2, [sp, #36]	; 0x24
   19670:	f89a 3000 	ldrb.w	r3, [sl]
   19674:	2b00      	cmp	r3, #0
   19676:	f000 80a2 	beq.w	197be <_vfiprintf_r+0x20e>
   1967a:	2300      	movs	r3, #0
   1967c:	f04f 32ff 	mov.w	r2, #4294967295
   19680:	e9cd 2305 	strd	r2, r3, [sp, #20]
   19684:	f10a 0a01 	add.w	sl, sl, #1
   19688:	9304      	str	r3, [sp, #16]
   1968a:	9307      	str	r3, [sp, #28]
   1968c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   19690:	931a      	str	r3, [sp, #104]	; 0x68
   19692:	4654      	mov	r4, sl
   19694:	2205      	movs	r2, #5
   19696:	f814 1b01 	ldrb.w	r1, [r4], #1
   1969a:	4858      	ldr	r0, [pc, #352]	; (197fc <_vfiprintf_r+0x24c>)
   1969c:	f7f2 fe30 	bl	c300 <memchr>
   196a0:	9a04      	ldr	r2, [sp, #16]
   196a2:	b9d8      	cbnz	r0, 196dc <_vfiprintf_r+0x12c>
   196a4:	06d1      	lsls	r1, r2, #27
   196a6:	bf44      	itt	mi
   196a8:	2320      	movmi	r3, #32
   196aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   196ae:	0713      	lsls	r3, r2, #28
   196b0:	bf44      	itt	mi
   196b2:	232b      	movmi	r3, #43	; 0x2b
   196b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   196b8:	f89a 3000 	ldrb.w	r3, [sl]
   196bc:	2b2a      	cmp	r3, #42	; 0x2a
   196be:	d015      	beq.n	196ec <_vfiprintf_r+0x13c>
   196c0:	9a07      	ldr	r2, [sp, #28]
   196c2:	4654      	mov	r4, sl
   196c4:	2000      	movs	r0, #0
   196c6:	f04f 0c0a 	mov.w	ip, #10
   196ca:	4621      	mov	r1, r4
   196cc:	f811 3b01 	ldrb.w	r3, [r1], #1
   196d0:	3b30      	subs	r3, #48	; 0x30
   196d2:	2b09      	cmp	r3, #9
   196d4:	d94e      	bls.n	19774 <_vfiprintf_r+0x1c4>
   196d6:	b1b0      	cbz	r0, 19706 <_vfiprintf_r+0x156>
   196d8:	9207      	str	r2, [sp, #28]
   196da:	e014      	b.n	19706 <_vfiprintf_r+0x156>
   196dc:	eba0 0308 	sub.w	r3, r0, r8
   196e0:	fa09 f303 	lsl.w	r3, r9, r3
   196e4:	4313      	orrs	r3, r2
   196e6:	9304      	str	r3, [sp, #16]
   196e8:	46a2      	mov	sl, r4
   196ea:	e7d2      	b.n	19692 <_vfiprintf_r+0xe2>
   196ec:	9b03      	ldr	r3, [sp, #12]
   196ee:	1d19      	adds	r1, r3, #4
   196f0:	681b      	ldr	r3, [r3, #0]
   196f2:	9103      	str	r1, [sp, #12]
   196f4:	2b00      	cmp	r3, #0
   196f6:	bfbb      	ittet	lt
   196f8:	425b      	neglt	r3, r3
   196fa:	f042 0202 	orrlt.w	r2, r2, #2
   196fe:	9307      	strge	r3, [sp, #28]
   19700:	9307      	strlt	r3, [sp, #28]
   19702:	bfb8      	it	lt
   19704:	9204      	strlt	r2, [sp, #16]
   19706:	7823      	ldrb	r3, [r4, #0]
   19708:	2b2e      	cmp	r3, #46	; 0x2e
   1970a:	d10c      	bne.n	19726 <_vfiprintf_r+0x176>
   1970c:	7863      	ldrb	r3, [r4, #1]
   1970e:	2b2a      	cmp	r3, #42	; 0x2a
   19710:	d135      	bne.n	1977e <_vfiprintf_r+0x1ce>
   19712:	9b03      	ldr	r3, [sp, #12]
   19714:	1d1a      	adds	r2, r3, #4
   19716:	681b      	ldr	r3, [r3, #0]
   19718:	9203      	str	r2, [sp, #12]
   1971a:	2b00      	cmp	r3, #0
   1971c:	bfb8      	it	lt
   1971e:	f04f 33ff 	movlt.w	r3, #4294967295
   19722:	3402      	adds	r4, #2
   19724:	9305      	str	r3, [sp, #20]
   19726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1980c <_vfiprintf_r+0x25c>
   1972a:	7821      	ldrb	r1, [r4, #0]
   1972c:	2203      	movs	r2, #3
   1972e:	4650      	mov	r0, sl
   19730:	f7f2 fde6 	bl	c300 <memchr>
   19734:	b140      	cbz	r0, 19748 <_vfiprintf_r+0x198>
   19736:	2340      	movs	r3, #64	; 0x40
   19738:	eba0 000a 	sub.w	r0, r0, sl
   1973c:	fa03 f000 	lsl.w	r0, r3, r0
   19740:	9b04      	ldr	r3, [sp, #16]
   19742:	4303      	orrs	r3, r0
   19744:	3401      	adds	r4, #1
   19746:	9304      	str	r3, [sp, #16]
   19748:	f814 1b01 	ldrb.w	r1, [r4], #1
   1974c:	482c      	ldr	r0, [pc, #176]	; (19800 <_vfiprintf_r+0x250>)
   1974e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   19752:	2206      	movs	r2, #6
   19754:	f7f2 fdd4 	bl	c300 <memchr>
   19758:	2800      	cmp	r0, #0
   1975a:	d03f      	beq.n	197dc <_vfiprintf_r+0x22c>
   1975c:	4b29      	ldr	r3, [pc, #164]	; (19804 <_vfiprintf_r+0x254>)
   1975e:	bb1b      	cbnz	r3, 197a8 <_vfiprintf_r+0x1f8>
   19760:	9b03      	ldr	r3, [sp, #12]
   19762:	3307      	adds	r3, #7
   19764:	f023 0307 	bic.w	r3, r3, #7
   19768:	3308      	adds	r3, #8
   1976a:	9303      	str	r3, [sp, #12]
   1976c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1976e:	443b      	add	r3, r7
   19770:	9309      	str	r3, [sp, #36]	; 0x24
   19772:	e767      	b.n	19644 <_vfiprintf_r+0x94>
   19774:	fb0c 3202 	mla	r2, ip, r2, r3
   19778:	460c      	mov	r4, r1
   1977a:	2001      	movs	r0, #1
   1977c:	e7a5      	b.n	196ca <_vfiprintf_r+0x11a>
   1977e:	2300      	movs	r3, #0
   19780:	3401      	adds	r4, #1
   19782:	9305      	str	r3, [sp, #20]
   19784:	4619      	mov	r1, r3
   19786:	f04f 0c0a 	mov.w	ip, #10
   1978a:	4620      	mov	r0, r4
   1978c:	f810 2b01 	ldrb.w	r2, [r0], #1
   19790:	3a30      	subs	r2, #48	; 0x30
   19792:	2a09      	cmp	r2, #9
   19794:	d903      	bls.n	1979e <_vfiprintf_r+0x1ee>
   19796:	2b00      	cmp	r3, #0
   19798:	d0c5      	beq.n	19726 <_vfiprintf_r+0x176>
   1979a:	9105      	str	r1, [sp, #20]
   1979c:	e7c3      	b.n	19726 <_vfiprintf_r+0x176>
   1979e:	fb0c 2101 	mla	r1, ip, r1, r2
   197a2:	4604      	mov	r4, r0
   197a4:	2301      	movs	r3, #1
   197a6:	e7f0      	b.n	1978a <_vfiprintf_r+0x1da>
   197a8:	ab03      	add	r3, sp, #12
   197aa:	9300      	str	r3, [sp, #0]
   197ac:	462a      	mov	r2, r5
   197ae:	4b16      	ldr	r3, [pc, #88]	; (19808 <_vfiprintf_r+0x258>)
   197b0:	a904      	add	r1, sp, #16
   197b2:	4630      	mov	r0, r6
   197b4:	f000 f82c 	bl	19810 <_printf_float>
   197b8:	4607      	mov	r7, r0
   197ba:	1c78      	adds	r0, r7, #1
   197bc:	d1d6      	bne.n	1976c <_vfiprintf_r+0x1bc>
   197be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   197c0:	07d9      	lsls	r1, r3, #31
   197c2:	d405      	bmi.n	197d0 <_vfiprintf_r+0x220>
   197c4:	89ab      	ldrh	r3, [r5, #12]
   197c6:	059a      	lsls	r2, r3, #22
   197c8:	d402      	bmi.n	197d0 <_vfiprintf_r+0x220>
   197ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
   197cc:	f7f8 fb14 	bl	11df8 <__retarget_lock_release_recursive>
   197d0:	89ab      	ldrh	r3, [r5, #12]
   197d2:	065b      	lsls	r3, r3, #25
   197d4:	f53f af12 	bmi.w	195fc <_vfiprintf_r+0x4c>
   197d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   197da:	e711      	b.n	19600 <_vfiprintf_r+0x50>
   197dc:	ab03      	add	r3, sp, #12
   197de:	9300      	str	r3, [sp, #0]
   197e0:	462a      	mov	r2, r5
   197e2:	4b09      	ldr	r3, [pc, #36]	; (19808 <_vfiprintf_r+0x258>)
   197e4:	a904      	add	r1, sp, #16
   197e6:	4630      	mov	r0, r6
   197e8:	f000 fa3c 	bl	19c64 <_printf_i>
   197ec:	e7e4      	b.n	197b8 <_vfiprintf_r+0x208>
   197ee:	bf00      	nop
   197f0:	0001cebc 	.word	0x0001cebc
   197f4:	0001cedc 	.word	0x0001cedc
   197f8:	0001ce9c 	.word	0x0001ce9c
   197fc:	00020800 	.word	0x00020800
   19800:	0002080a 	.word	0x0002080a
   19804:	00019811 	.word	0x00019811
   19808:	0001bbb7 	.word	0x0001bbb7
   1980c:	00020806 	.word	0x00020806

00019810 <_printf_float>:
   19810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19814:	b091      	sub	sp, #68	; 0x44
   19816:	460c      	mov	r4, r1
   19818:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   1981c:	4616      	mov	r6, r2
   1981e:	461f      	mov	r7, r3
   19820:	4605      	mov	r5, r0
   19822:	f000 fd97 	bl	1a354 <_localeconv_r>
   19826:	6803      	ldr	r3, [r0, #0]
   19828:	9309      	str	r3, [sp, #36]	; 0x24
   1982a:	4618      	mov	r0, r3
   1982c:	f7f3 fbd0 	bl	cfd0 <strlen>
   19830:	2300      	movs	r3, #0
   19832:	930e      	str	r3, [sp, #56]	; 0x38
   19834:	f8d8 3000 	ldr.w	r3, [r8]
   19838:	900a      	str	r0, [sp, #40]	; 0x28
   1983a:	3307      	adds	r3, #7
   1983c:	f023 0307 	bic.w	r3, r3, #7
   19840:	f103 0208 	add.w	r2, r3, #8
   19844:	f894 9018 	ldrb.w	r9, [r4, #24]
   19848:	f8d4 b000 	ldr.w	fp, [r4]
   1984c:	f8c8 2000 	str.w	r2, [r8]
   19850:	e9d3 2300 	ldrd	r2, r3, [r3]
   19854:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   19858:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   1985c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   19860:	930b      	str	r3, [sp, #44]	; 0x2c
   19862:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19864:	4b9c      	ldr	r3, [pc, #624]	; (19ad8 <_printf_float+0x2c8>)
   19866:	f04f 32ff 	mov.w	r2, #4294967295
   1986a:	4640      	mov	r0, r8
   1986c:	f7f3 fb68 	bl	cf40 <__aeabi_dcmpun>
   19870:	bb70      	cbnz	r0, 198d0 <_printf_float+0xc0>
   19872:	4b99      	ldr	r3, [pc, #612]	; (19ad8 <_printf_float+0x2c8>)
   19874:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19876:	f04f 32ff 	mov.w	r2, #4294967295
   1987a:	4640      	mov	r0, r8
   1987c:	f7f3 fb42 	bl	cf04 <__aeabi_dcmple>
   19880:	bb30      	cbnz	r0, 198d0 <_printf_float+0xc0>
   19882:	2200      	movs	r2, #0
   19884:	2300      	movs	r3, #0
   19886:	4640      	mov	r0, r8
   19888:	4651      	mov	r1, sl
   1988a:	f7f3 fb31 	bl	cef0 <__aeabi_dcmplt>
   1988e:	b110      	cbz	r0, 19896 <_printf_float+0x86>
   19890:	232d      	movs	r3, #45	; 0x2d
   19892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   19896:	4b91      	ldr	r3, [pc, #580]	; (19adc <_printf_float+0x2cc>)
   19898:	4891      	ldr	r0, [pc, #580]	; (19ae0 <_printf_float+0x2d0>)
   1989a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   1989e:	bf94      	ite	ls
   198a0:	4698      	movls	r8, r3
   198a2:	4680      	movhi	r8, r0
   198a4:	2303      	movs	r3, #3
   198a6:	6123      	str	r3, [r4, #16]
   198a8:	f02b 0304 	bic.w	r3, fp, #4
   198ac:	6023      	str	r3, [r4, #0]
   198ae:	f04f 0a00 	mov.w	sl, #0
   198b2:	9700      	str	r7, [sp, #0]
   198b4:	4633      	mov	r3, r6
   198b6:	aa0f      	add	r2, sp, #60	; 0x3c
   198b8:	4621      	mov	r1, r4
   198ba:	4628      	mov	r0, r5
   198bc:	f002 fa2b 	bl	1bd16 <_printf_common>
   198c0:	3001      	adds	r0, #1
   198c2:	f040 808f 	bne.w	199e4 <_printf_float+0x1d4>
   198c6:	f04f 30ff 	mov.w	r0, #4294967295
   198ca:	b011      	add	sp, #68	; 0x44
   198cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198d0:	4642      	mov	r2, r8
   198d2:	4653      	mov	r3, sl
   198d4:	4640      	mov	r0, r8
   198d6:	4651      	mov	r1, sl
   198d8:	f7f3 fb32 	bl	cf40 <__aeabi_dcmpun>
   198dc:	b140      	cbz	r0, 198f0 <_printf_float+0xe0>
   198de:	f1ba 0f00 	cmp.w	sl, #0
   198e2:	bfbc      	itt	lt
   198e4:	232d      	movlt	r3, #45	; 0x2d
   198e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   198ea:	487e      	ldr	r0, [pc, #504]	; (19ae4 <_printf_float+0x2d4>)
   198ec:	4b7e      	ldr	r3, [pc, #504]	; (19ae8 <_printf_float+0x2d8>)
   198ee:	e7d4      	b.n	1989a <_printf_float+0x8a>
   198f0:	6863      	ldr	r3, [r4, #4]
   198f2:	1c5a      	adds	r2, r3, #1
   198f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   198f8:	d142      	bne.n	19980 <_printf_float+0x170>
   198fa:	2306      	movs	r3, #6
   198fc:	6063      	str	r3, [r4, #4]
   198fe:	2200      	movs	r2, #0
   19900:	9206      	str	r2, [sp, #24]
   19902:	aa0e      	add	r2, sp, #56	; 0x38
   19904:	e9cd 9204 	strd	r9, r2, [sp, #16]
   19908:	aa0d      	add	r2, sp, #52	; 0x34
   1990a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   1990e:	9203      	str	r2, [sp, #12]
   19910:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   19914:	e9cd 3201 	strd	r3, r2, [sp, #4]
   19918:	6023      	str	r3, [r4, #0]
   1991a:	6863      	ldr	r3, [r4, #4]
   1991c:	9300      	str	r3, [sp, #0]
   1991e:	4642      	mov	r2, r8
   19920:	4653      	mov	r3, sl
   19922:	4628      	mov	r0, r5
   19924:	910b      	str	r1, [sp, #44]	; 0x2c
   19926:	f002 f958 	bl	1bbda <__cvt>
   1992a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1992c:	2947      	cmp	r1, #71	; 0x47
   1992e:	4680      	mov	r8, r0
   19930:	990d      	ldr	r1, [sp, #52]	; 0x34
   19932:	d108      	bne.n	19946 <_printf_float+0x136>
   19934:	1cc8      	adds	r0, r1, #3
   19936:	db02      	blt.n	1993e <_printf_float+0x12e>
   19938:	6863      	ldr	r3, [r4, #4]
   1993a:	4299      	cmp	r1, r3
   1993c:	dd40      	ble.n	199c0 <_printf_float+0x1b0>
   1993e:	f1a9 0902 	sub.w	r9, r9, #2
   19942:	fa5f f989 	uxtb.w	r9, r9
   19946:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   1994a:	d81f      	bhi.n	1998c <_printf_float+0x17c>
   1994c:	3901      	subs	r1, #1
   1994e:	464a      	mov	r2, r9
   19950:	f104 0050 	add.w	r0, r4, #80	; 0x50
   19954:	910d      	str	r1, [sp, #52]	; 0x34
   19956:	f002 f9a0 	bl	1bc9a <__exponent>
   1995a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1995c:	1813      	adds	r3, r2, r0
   1995e:	2a01      	cmp	r2, #1
   19960:	4682      	mov	sl, r0
   19962:	6123      	str	r3, [r4, #16]
   19964:	dc02      	bgt.n	1996c <_printf_float+0x15c>
   19966:	6822      	ldr	r2, [r4, #0]
   19968:	07d2      	lsls	r2, r2, #31
   1996a:	d501      	bpl.n	19970 <_printf_float+0x160>
   1996c:	3301      	adds	r3, #1
   1996e:	6123      	str	r3, [r4, #16]
   19970:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   19974:	2b00      	cmp	r3, #0
   19976:	d09c      	beq.n	198b2 <_printf_float+0xa2>
   19978:	232d      	movs	r3, #45	; 0x2d
   1997a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1997e:	e798      	b.n	198b2 <_printf_float+0xa2>
   19980:	2947      	cmp	r1, #71	; 0x47
   19982:	d1bc      	bne.n	198fe <_printf_float+0xee>
   19984:	2b00      	cmp	r3, #0
   19986:	d1ba      	bne.n	198fe <_printf_float+0xee>
   19988:	2301      	movs	r3, #1
   1998a:	e7b7      	b.n	198fc <_printf_float+0xec>
   1998c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   19990:	d118      	bne.n	199c4 <_printf_float+0x1b4>
   19992:	2900      	cmp	r1, #0
   19994:	6863      	ldr	r3, [r4, #4]
   19996:	dd0b      	ble.n	199b0 <_printf_float+0x1a0>
   19998:	6121      	str	r1, [r4, #16]
   1999a:	b913      	cbnz	r3, 199a2 <_printf_float+0x192>
   1999c:	6822      	ldr	r2, [r4, #0]
   1999e:	07d0      	lsls	r0, r2, #31
   199a0:	d502      	bpl.n	199a8 <_printf_float+0x198>
   199a2:	3301      	adds	r3, #1
   199a4:	440b      	add	r3, r1
   199a6:	6123      	str	r3, [r4, #16]
   199a8:	65a1      	str	r1, [r4, #88]	; 0x58
   199aa:	f04f 0a00 	mov.w	sl, #0
   199ae:	e7df      	b.n	19970 <_printf_float+0x160>
   199b0:	b913      	cbnz	r3, 199b8 <_printf_float+0x1a8>
   199b2:	6822      	ldr	r2, [r4, #0]
   199b4:	07d2      	lsls	r2, r2, #31
   199b6:	d501      	bpl.n	199bc <_printf_float+0x1ac>
   199b8:	3302      	adds	r3, #2
   199ba:	e7f4      	b.n	199a6 <_printf_float+0x196>
   199bc:	2301      	movs	r3, #1
   199be:	e7f2      	b.n	199a6 <_printf_float+0x196>
   199c0:	f04f 0967 	mov.w	r9, #103	; 0x67
   199c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   199c6:	4299      	cmp	r1, r3
   199c8:	db05      	blt.n	199d6 <_printf_float+0x1c6>
   199ca:	6823      	ldr	r3, [r4, #0]
   199cc:	6121      	str	r1, [r4, #16]
   199ce:	07d8      	lsls	r0, r3, #31
   199d0:	d5ea      	bpl.n	199a8 <_printf_float+0x198>
   199d2:	1c4b      	adds	r3, r1, #1
   199d4:	e7e7      	b.n	199a6 <_printf_float+0x196>
   199d6:	2900      	cmp	r1, #0
   199d8:	bfd4      	ite	le
   199da:	f1c1 0202 	rsble	r2, r1, #2
   199de:	2201      	movgt	r2, #1
   199e0:	4413      	add	r3, r2
   199e2:	e7e0      	b.n	199a6 <_printf_float+0x196>
   199e4:	6823      	ldr	r3, [r4, #0]
   199e6:	055a      	lsls	r2, r3, #21
   199e8:	d407      	bmi.n	199fa <_printf_float+0x1ea>
   199ea:	6923      	ldr	r3, [r4, #16]
   199ec:	4642      	mov	r2, r8
   199ee:	4631      	mov	r1, r6
   199f0:	4628      	mov	r0, r5
   199f2:	47b8      	blx	r7
   199f4:	3001      	adds	r0, #1
   199f6:	d12b      	bne.n	19a50 <_printf_float+0x240>
   199f8:	e765      	b.n	198c6 <_printf_float+0xb6>
   199fa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   199fe:	f240 80dc 	bls.w	19bba <_printf_float+0x3aa>
   19a02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   19a06:	2200      	movs	r2, #0
   19a08:	2300      	movs	r3, #0
   19a0a:	f7f3 fa67 	bl	cedc <__aeabi_dcmpeq>
   19a0e:	2800      	cmp	r0, #0
   19a10:	d033      	beq.n	19a7a <_printf_float+0x26a>
   19a12:	4a36      	ldr	r2, [pc, #216]	; (19aec <_printf_float+0x2dc>)
   19a14:	2301      	movs	r3, #1
   19a16:	4631      	mov	r1, r6
   19a18:	4628      	mov	r0, r5
   19a1a:	47b8      	blx	r7
   19a1c:	3001      	adds	r0, #1
   19a1e:	f43f af52 	beq.w	198c6 <_printf_float+0xb6>
   19a22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   19a26:	429a      	cmp	r2, r3
   19a28:	db02      	blt.n	19a30 <_printf_float+0x220>
   19a2a:	6823      	ldr	r3, [r4, #0]
   19a2c:	07d8      	lsls	r0, r3, #31
   19a2e:	d50f      	bpl.n	19a50 <_printf_float+0x240>
   19a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   19a34:	4631      	mov	r1, r6
   19a36:	4628      	mov	r0, r5
   19a38:	47b8      	blx	r7
   19a3a:	3001      	adds	r0, #1
   19a3c:	f43f af43 	beq.w	198c6 <_printf_float+0xb6>
   19a40:	f04f 0800 	mov.w	r8, #0
   19a44:	f104 091a 	add.w	r9, r4, #26
   19a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19a4a:	3b01      	subs	r3, #1
   19a4c:	4543      	cmp	r3, r8
   19a4e:	dc09      	bgt.n	19a64 <_printf_float+0x254>
   19a50:	6823      	ldr	r3, [r4, #0]
   19a52:	079b      	lsls	r3, r3, #30
   19a54:	f100 8101 	bmi.w	19c5a <_printf_float+0x44a>
   19a58:	68e0      	ldr	r0, [r4, #12]
   19a5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19a5c:	4298      	cmp	r0, r3
   19a5e:	bfb8      	it	lt
   19a60:	4618      	movlt	r0, r3
   19a62:	e732      	b.n	198ca <_printf_float+0xba>
   19a64:	2301      	movs	r3, #1
   19a66:	464a      	mov	r2, r9
   19a68:	4631      	mov	r1, r6
   19a6a:	4628      	mov	r0, r5
   19a6c:	47b8      	blx	r7
   19a6e:	3001      	adds	r0, #1
   19a70:	f43f af29 	beq.w	198c6 <_printf_float+0xb6>
   19a74:	f108 0801 	add.w	r8, r8, #1
   19a78:	e7e6      	b.n	19a48 <_printf_float+0x238>
   19a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19a7c:	2b00      	cmp	r3, #0
   19a7e:	dc37      	bgt.n	19af0 <_printf_float+0x2e0>
   19a80:	4a1a      	ldr	r2, [pc, #104]	; (19aec <_printf_float+0x2dc>)
   19a82:	2301      	movs	r3, #1
   19a84:	4631      	mov	r1, r6
   19a86:	4628      	mov	r0, r5
   19a88:	47b8      	blx	r7
   19a8a:	3001      	adds	r0, #1
   19a8c:	f43f af1b 	beq.w	198c6 <_printf_float+0xb6>
   19a90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   19a94:	4313      	orrs	r3, r2
   19a96:	d102      	bne.n	19a9e <_printf_float+0x28e>
   19a98:	6823      	ldr	r3, [r4, #0]
   19a9a:	07d9      	lsls	r1, r3, #31
   19a9c:	d5d8      	bpl.n	19a50 <_printf_float+0x240>
   19a9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   19aa2:	4631      	mov	r1, r6
   19aa4:	4628      	mov	r0, r5
   19aa6:	47b8      	blx	r7
   19aa8:	3001      	adds	r0, #1
   19aaa:	f43f af0c 	beq.w	198c6 <_printf_float+0xb6>
   19aae:	f04f 0900 	mov.w	r9, #0
   19ab2:	f104 0a1a 	add.w	sl, r4, #26
   19ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19ab8:	425b      	negs	r3, r3
   19aba:	454b      	cmp	r3, r9
   19abc:	dc01      	bgt.n	19ac2 <_printf_float+0x2b2>
   19abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19ac0:	e794      	b.n	199ec <_printf_float+0x1dc>
   19ac2:	2301      	movs	r3, #1
   19ac4:	4652      	mov	r2, sl
   19ac6:	4631      	mov	r1, r6
   19ac8:	4628      	mov	r0, r5
   19aca:	47b8      	blx	r7
   19acc:	3001      	adds	r0, #1
   19ace:	f43f aefa 	beq.w	198c6 <_printf_float+0xb6>
   19ad2:	f109 0901 	add.w	r9, r9, #1
   19ad6:	e7ee      	b.n	19ab6 <_printf_float+0x2a6>
   19ad8:	7fefffff 	.word	0x7fefffff
   19adc:	00020811 	.word	0x00020811
   19ae0:	0001dc5b 	.word	0x0001dc5b
   19ae4:	00020819 	.word	0x00020819
   19ae8:	00020815 	.word	0x00020815
   19aec:	000205d8 	.word	0x000205d8
   19af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   19af4:	429a      	cmp	r2, r3
   19af6:	bfa8      	it	ge
   19af8:	461a      	movge	r2, r3
   19afa:	2a00      	cmp	r2, #0
   19afc:	4691      	mov	r9, r2
   19afe:	dc37      	bgt.n	19b70 <_printf_float+0x360>
   19b00:	f04f 0b00 	mov.w	fp, #0
   19b04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   19b08:	f104 021a 	add.w	r2, r4, #26
   19b0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   19b10:	ebaa 0309 	sub.w	r3, sl, r9
   19b14:	455b      	cmp	r3, fp
   19b16:	dc33      	bgt.n	19b80 <_printf_float+0x370>
   19b18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   19b1c:	429a      	cmp	r2, r3
   19b1e:	db3b      	blt.n	19b98 <_printf_float+0x388>
   19b20:	6823      	ldr	r3, [r4, #0]
   19b22:	07da      	lsls	r2, r3, #31
   19b24:	d438      	bmi.n	19b98 <_printf_float+0x388>
   19b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19b28:	990d      	ldr	r1, [sp, #52]	; 0x34
   19b2a:	eba2 030a 	sub.w	r3, r2, sl
   19b2e:	eba2 0901 	sub.w	r9, r2, r1
   19b32:	4599      	cmp	r9, r3
   19b34:	bfa8      	it	ge
   19b36:	4699      	movge	r9, r3
   19b38:	f1b9 0f00 	cmp.w	r9, #0
   19b3c:	dc34      	bgt.n	19ba8 <_printf_float+0x398>
   19b3e:	f04f 0800 	mov.w	r8, #0
   19b42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   19b46:	f104 0a1a 	add.w	sl, r4, #26
   19b4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   19b4e:	1a9b      	subs	r3, r3, r2
   19b50:	eba3 0309 	sub.w	r3, r3, r9
   19b54:	4543      	cmp	r3, r8
   19b56:	f77f af7b 	ble.w	19a50 <_printf_float+0x240>
   19b5a:	2301      	movs	r3, #1
   19b5c:	4652      	mov	r2, sl
   19b5e:	4631      	mov	r1, r6
   19b60:	4628      	mov	r0, r5
   19b62:	47b8      	blx	r7
   19b64:	3001      	adds	r0, #1
   19b66:	f43f aeae 	beq.w	198c6 <_printf_float+0xb6>
   19b6a:	f108 0801 	add.w	r8, r8, #1
   19b6e:	e7ec      	b.n	19b4a <_printf_float+0x33a>
   19b70:	4613      	mov	r3, r2
   19b72:	4631      	mov	r1, r6
   19b74:	4642      	mov	r2, r8
   19b76:	4628      	mov	r0, r5
   19b78:	47b8      	blx	r7
   19b7a:	3001      	adds	r0, #1
   19b7c:	d1c0      	bne.n	19b00 <_printf_float+0x2f0>
   19b7e:	e6a2      	b.n	198c6 <_printf_float+0xb6>
   19b80:	2301      	movs	r3, #1
   19b82:	4631      	mov	r1, r6
   19b84:	4628      	mov	r0, r5
   19b86:	920b      	str	r2, [sp, #44]	; 0x2c
   19b88:	47b8      	blx	r7
   19b8a:	3001      	adds	r0, #1
   19b8c:	f43f ae9b 	beq.w	198c6 <_printf_float+0xb6>
   19b90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19b92:	f10b 0b01 	add.w	fp, fp, #1
   19b96:	e7b9      	b.n	19b0c <_printf_float+0x2fc>
   19b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   19b9c:	4631      	mov	r1, r6
   19b9e:	4628      	mov	r0, r5
   19ba0:	47b8      	blx	r7
   19ba2:	3001      	adds	r0, #1
   19ba4:	d1bf      	bne.n	19b26 <_printf_float+0x316>
   19ba6:	e68e      	b.n	198c6 <_printf_float+0xb6>
   19ba8:	464b      	mov	r3, r9
   19baa:	eb08 020a 	add.w	r2, r8, sl
   19bae:	4631      	mov	r1, r6
   19bb0:	4628      	mov	r0, r5
   19bb2:	47b8      	blx	r7
   19bb4:	3001      	adds	r0, #1
   19bb6:	d1c2      	bne.n	19b3e <_printf_float+0x32e>
   19bb8:	e685      	b.n	198c6 <_printf_float+0xb6>
   19bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19bbc:	2a01      	cmp	r2, #1
   19bbe:	dc01      	bgt.n	19bc4 <_printf_float+0x3b4>
   19bc0:	07db      	lsls	r3, r3, #31
   19bc2:	d537      	bpl.n	19c34 <_printf_float+0x424>
   19bc4:	2301      	movs	r3, #1
   19bc6:	4642      	mov	r2, r8
   19bc8:	4631      	mov	r1, r6
   19bca:	4628      	mov	r0, r5
   19bcc:	47b8      	blx	r7
   19bce:	3001      	adds	r0, #1
   19bd0:	f43f ae79 	beq.w	198c6 <_printf_float+0xb6>
   19bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   19bd8:	4631      	mov	r1, r6
   19bda:	4628      	mov	r0, r5
   19bdc:	47b8      	blx	r7
   19bde:	3001      	adds	r0, #1
   19be0:	f43f ae71 	beq.w	198c6 <_printf_float+0xb6>
   19be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   19be8:	2200      	movs	r2, #0
   19bea:	2300      	movs	r3, #0
   19bec:	f7f3 f976 	bl	cedc <__aeabi_dcmpeq>
   19bf0:	b9d8      	cbnz	r0, 19c2a <_printf_float+0x41a>
   19bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19bf4:	f108 0201 	add.w	r2, r8, #1
   19bf8:	3b01      	subs	r3, #1
   19bfa:	4631      	mov	r1, r6
   19bfc:	4628      	mov	r0, r5
   19bfe:	47b8      	blx	r7
   19c00:	3001      	adds	r0, #1
   19c02:	d10e      	bne.n	19c22 <_printf_float+0x412>
   19c04:	e65f      	b.n	198c6 <_printf_float+0xb6>
   19c06:	2301      	movs	r3, #1
   19c08:	464a      	mov	r2, r9
   19c0a:	4631      	mov	r1, r6
   19c0c:	4628      	mov	r0, r5
   19c0e:	47b8      	blx	r7
   19c10:	3001      	adds	r0, #1
   19c12:	f43f ae58 	beq.w	198c6 <_printf_float+0xb6>
   19c16:	f108 0801 	add.w	r8, r8, #1
   19c1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19c1c:	3b01      	subs	r3, #1
   19c1e:	4543      	cmp	r3, r8
   19c20:	dcf1      	bgt.n	19c06 <_printf_float+0x3f6>
   19c22:	4653      	mov	r3, sl
   19c24:	f104 0250 	add.w	r2, r4, #80	; 0x50
   19c28:	e6e1      	b.n	199ee <_printf_float+0x1de>
   19c2a:	f04f 0800 	mov.w	r8, #0
   19c2e:	f104 091a 	add.w	r9, r4, #26
   19c32:	e7f2      	b.n	19c1a <_printf_float+0x40a>
   19c34:	2301      	movs	r3, #1
   19c36:	4642      	mov	r2, r8
   19c38:	e7df      	b.n	19bfa <_printf_float+0x3ea>
   19c3a:	2301      	movs	r3, #1
   19c3c:	464a      	mov	r2, r9
   19c3e:	4631      	mov	r1, r6
   19c40:	4628      	mov	r0, r5
   19c42:	47b8      	blx	r7
   19c44:	3001      	adds	r0, #1
   19c46:	f43f ae3e 	beq.w	198c6 <_printf_float+0xb6>
   19c4a:	f108 0801 	add.w	r8, r8, #1
   19c4e:	68e3      	ldr	r3, [r4, #12]
   19c50:	990f      	ldr	r1, [sp, #60]	; 0x3c
   19c52:	1a5b      	subs	r3, r3, r1
   19c54:	4543      	cmp	r3, r8
   19c56:	dcf0      	bgt.n	19c3a <_printf_float+0x42a>
   19c58:	e6fe      	b.n	19a58 <_printf_float+0x248>
   19c5a:	f04f 0800 	mov.w	r8, #0
   19c5e:	f104 0919 	add.w	r9, r4, #25
   19c62:	e7f4      	b.n	19c4e <_printf_float+0x43e>

00019c64 <_printf_i>:
   19c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   19c68:	460c      	mov	r4, r1
   19c6a:	4691      	mov	r9, r2
   19c6c:	7e27      	ldrb	r7, [r4, #24]
   19c6e:	990c      	ldr	r1, [sp, #48]	; 0x30
   19c70:	2f78      	cmp	r7, #120	; 0x78
   19c72:	4680      	mov	r8, r0
   19c74:	469a      	mov	sl, r3
   19c76:	f104 0243 	add.w	r2, r4, #67	; 0x43
   19c7a:	d807      	bhi.n	19c8c <_printf_i+0x28>
   19c7c:	2f62      	cmp	r7, #98	; 0x62
   19c7e:	d80a      	bhi.n	19c96 <_printf_i+0x32>
   19c80:	2f00      	cmp	r7, #0
   19c82:	f000 80d8 	beq.w	19e36 <_printf_i+0x1d2>
   19c86:	2f58      	cmp	r7, #88	; 0x58
   19c88:	f000 80a3 	beq.w	19dd2 <_printf_i+0x16e>
   19c8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   19c90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   19c94:	e03a      	b.n	19d0c <_printf_i+0xa8>
   19c96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   19c9a:	2b15      	cmp	r3, #21
   19c9c:	d8f6      	bhi.n	19c8c <_printf_i+0x28>
   19c9e:	a001      	add	r0, pc, #4	; (adr r0, 19ca4 <_printf_i+0x40>)
   19ca0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   19ca4:	00019cfd 	.word	0x00019cfd
   19ca8:	00019d11 	.word	0x00019d11
   19cac:	00019c8d 	.word	0x00019c8d
   19cb0:	00019c8d 	.word	0x00019c8d
   19cb4:	00019c8d 	.word	0x00019c8d
   19cb8:	00019c8d 	.word	0x00019c8d
   19cbc:	00019d11 	.word	0x00019d11
   19cc0:	00019c8d 	.word	0x00019c8d
   19cc4:	00019c8d 	.word	0x00019c8d
   19cc8:	00019c8d 	.word	0x00019c8d
   19ccc:	00019c8d 	.word	0x00019c8d
   19cd0:	00019e1d 	.word	0x00019e1d
   19cd4:	00019d41 	.word	0x00019d41
   19cd8:	00019dff 	.word	0x00019dff
   19cdc:	00019c8d 	.word	0x00019c8d
   19ce0:	00019c8d 	.word	0x00019c8d
   19ce4:	00019e3f 	.word	0x00019e3f
   19ce8:	00019c8d 	.word	0x00019c8d
   19cec:	00019d41 	.word	0x00019d41
   19cf0:	00019c8d 	.word	0x00019c8d
   19cf4:	00019c8d 	.word	0x00019c8d
   19cf8:	00019e07 	.word	0x00019e07
   19cfc:	680b      	ldr	r3, [r1, #0]
   19cfe:	1d1a      	adds	r2, r3, #4
   19d00:	681b      	ldr	r3, [r3, #0]
   19d02:	600a      	str	r2, [r1, #0]
   19d04:	f104 0642 	add.w	r6, r4, #66	; 0x42
   19d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   19d0c:	2301      	movs	r3, #1
   19d0e:	e0a3      	b.n	19e58 <_printf_i+0x1f4>
   19d10:	6825      	ldr	r5, [r4, #0]
   19d12:	6808      	ldr	r0, [r1, #0]
   19d14:	062e      	lsls	r6, r5, #24
   19d16:	f100 0304 	add.w	r3, r0, #4
   19d1a:	d50a      	bpl.n	19d32 <_printf_i+0xce>
   19d1c:	6805      	ldr	r5, [r0, #0]
   19d1e:	600b      	str	r3, [r1, #0]
   19d20:	2d00      	cmp	r5, #0
   19d22:	da03      	bge.n	19d2c <_printf_i+0xc8>
   19d24:	232d      	movs	r3, #45	; 0x2d
   19d26:	426d      	negs	r5, r5
   19d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   19d2c:	485e      	ldr	r0, [pc, #376]	; (19ea8 <_printf_i+0x244>)
   19d2e:	230a      	movs	r3, #10
   19d30:	e019      	b.n	19d66 <_printf_i+0x102>
   19d32:	f015 0f40 	tst.w	r5, #64	; 0x40
   19d36:	6805      	ldr	r5, [r0, #0]
   19d38:	600b      	str	r3, [r1, #0]
   19d3a:	bf18      	it	ne
   19d3c:	b22d      	sxthne	r5, r5
   19d3e:	e7ef      	b.n	19d20 <_printf_i+0xbc>
   19d40:	680b      	ldr	r3, [r1, #0]
   19d42:	6825      	ldr	r5, [r4, #0]
   19d44:	1d18      	adds	r0, r3, #4
   19d46:	6008      	str	r0, [r1, #0]
   19d48:	0628      	lsls	r0, r5, #24
   19d4a:	d501      	bpl.n	19d50 <_printf_i+0xec>
   19d4c:	681d      	ldr	r5, [r3, #0]
   19d4e:	e002      	b.n	19d56 <_printf_i+0xf2>
   19d50:	0669      	lsls	r1, r5, #25
   19d52:	d5fb      	bpl.n	19d4c <_printf_i+0xe8>
   19d54:	881d      	ldrh	r5, [r3, #0]
   19d56:	4854      	ldr	r0, [pc, #336]	; (19ea8 <_printf_i+0x244>)
   19d58:	2f6f      	cmp	r7, #111	; 0x6f
   19d5a:	bf0c      	ite	eq
   19d5c:	2308      	moveq	r3, #8
   19d5e:	230a      	movne	r3, #10
   19d60:	2100      	movs	r1, #0
   19d62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   19d66:	6866      	ldr	r6, [r4, #4]
   19d68:	60a6      	str	r6, [r4, #8]
   19d6a:	2e00      	cmp	r6, #0
   19d6c:	bfa2      	ittt	ge
   19d6e:	6821      	ldrge	r1, [r4, #0]
   19d70:	f021 0104 	bicge.w	r1, r1, #4
   19d74:	6021      	strge	r1, [r4, #0]
   19d76:	b90d      	cbnz	r5, 19d7c <_printf_i+0x118>
   19d78:	2e00      	cmp	r6, #0
   19d7a:	d04d      	beq.n	19e18 <_printf_i+0x1b4>
   19d7c:	4616      	mov	r6, r2
   19d7e:	fbb5 f1f3 	udiv	r1, r5, r3
   19d82:	fb03 5711 	mls	r7, r3, r1, r5
   19d86:	5dc7      	ldrb	r7, [r0, r7]
   19d88:	f806 7d01 	strb.w	r7, [r6, #-1]!
   19d8c:	462f      	mov	r7, r5
   19d8e:	42bb      	cmp	r3, r7
   19d90:	460d      	mov	r5, r1
   19d92:	d9f4      	bls.n	19d7e <_printf_i+0x11a>
   19d94:	2b08      	cmp	r3, #8
   19d96:	d10b      	bne.n	19db0 <_printf_i+0x14c>
   19d98:	6823      	ldr	r3, [r4, #0]
   19d9a:	07df      	lsls	r7, r3, #31
   19d9c:	d508      	bpl.n	19db0 <_printf_i+0x14c>
   19d9e:	6923      	ldr	r3, [r4, #16]
   19da0:	6861      	ldr	r1, [r4, #4]
   19da2:	4299      	cmp	r1, r3
   19da4:	bfde      	ittt	le
   19da6:	2330      	movle	r3, #48	; 0x30
   19da8:	f806 3c01 	strble.w	r3, [r6, #-1]
   19dac:	f106 36ff 	addle.w	r6, r6, #4294967295
   19db0:	1b92      	subs	r2, r2, r6
   19db2:	6122      	str	r2, [r4, #16]
   19db4:	f8cd a000 	str.w	sl, [sp]
   19db8:	464b      	mov	r3, r9
   19dba:	aa03      	add	r2, sp, #12
   19dbc:	4621      	mov	r1, r4
   19dbe:	4640      	mov	r0, r8
   19dc0:	f001 ffa9 	bl	1bd16 <_printf_common>
   19dc4:	3001      	adds	r0, #1
   19dc6:	d14c      	bne.n	19e62 <_printf_i+0x1fe>
   19dc8:	f04f 30ff 	mov.w	r0, #4294967295
   19dcc:	b004      	add	sp, #16
   19dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19dd2:	4835      	ldr	r0, [pc, #212]	; (19ea8 <_printf_i+0x244>)
   19dd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   19dd8:	6823      	ldr	r3, [r4, #0]
   19dda:	680e      	ldr	r6, [r1, #0]
   19ddc:	061f      	lsls	r7, r3, #24
   19dde:	f856 5b04 	ldr.w	r5, [r6], #4
   19de2:	600e      	str	r6, [r1, #0]
   19de4:	d514      	bpl.n	19e10 <_printf_i+0x1ac>
   19de6:	07d9      	lsls	r1, r3, #31
   19de8:	bf44      	itt	mi
   19dea:	f043 0320 	orrmi.w	r3, r3, #32
   19dee:	6023      	strmi	r3, [r4, #0]
   19df0:	b91d      	cbnz	r5, 19dfa <_printf_i+0x196>
   19df2:	6823      	ldr	r3, [r4, #0]
   19df4:	f023 0320 	bic.w	r3, r3, #32
   19df8:	6023      	str	r3, [r4, #0]
   19dfa:	2310      	movs	r3, #16
   19dfc:	e7b0      	b.n	19d60 <_printf_i+0xfc>
   19dfe:	6823      	ldr	r3, [r4, #0]
   19e00:	f043 0320 	orr.w	r3, r3, #32
   19e04:	6023      	str	r3, [r4, #0]
   19e06:	2378      	movs	r3, #120	; 0x78
   19e08:	4828      	ldr	r0, [pc, #160]	; (19eac <_printf_i+0x248>)
   19e0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   19e0e:	e7e3      	b.n	19dd8 <_printf_i+0x174>
   19e10:	065e      	lsls	r6, r3, #25
   19e12:	bf48      	it	mi
   19e14:	b2ad      	uxthmi	r5, r5
   19e16:	e7e6      	b.n	19de6 <_printf_i+0x182>
   19e18:	4616      	mov	r6, r2
   19e1a:	e7bb      	b.n	19d94 <_printf_i+0x130>
   19e1c:	680b      	ldr	r3, [r1, #0]
   19e1e:	6826      	ldr	r6, [r4, #0]
   19e20:	6960      	ldr	r0, [r4, #20]
   19e22:	1d1d      	adds	r5, r3, #4
   19e24:	600d      	str	r5, [r1, #0]
   19e26:	0635      	lsls	r5, r6, #24
   19e28:	681b      	ldr	r3, [r3, #0]
   19e2a:	d501      	bpl.n	19e30 <_printf_i+0x1cc>
   19e2c:	6018      	str	r0, [r3, #0]
   19e2e:	e002      	b.n	19e36 <_printf_i+0x1d2>
   19e30:	0671      	lsls	r1, r6, #25
   19e32:	d5fb      	bpl.n	19e2c <_printf_i+0x1c8>
   19e34:	8018      	strh	r0, [r3, #0]
   19e36:	2300      	movs	r3, #0
   19e38:	6123      	str	r3, [r4, #16]
   19e3a:	4616      	mov	r6, r2
   19e3c:	e7ba      	b.n	19db4 <_printf_i+0x150>
   19e3e:	680b      	ldr	r3, [r1, #0]
   19e40:	1d1a      	adds	r2, r3, #4
   19e42:	600a      	str	r2, [r1, #0]
   19e44:	681e      	ldr	r6, [r3, #0]
   19e46:	6862      	ldr	r2, [r4, #4]
   19e48:	2100      	movs	r1, #0
   19e4a:	4630      	mov	r0, r6
   19e4c:	f7f2 fa58 	bl	c300 <memchr>
   19e50:	b108      	cbz	r0, 19e56 <_printf_i+0x1f2>
   19e52:	1b80      	subs	r0, r0, r6
   19e54:	6060      	str	r0, [r4, #4]
   19e56:	6863      	ldr	r3, [r4, #4]
   19e58:	6123      	str	r3, [r4, #16]
   19e5a:	2300      	movs	r3, #0
   19e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   19e60:	e7a8      	b.n	19db4 <_printf_i+0x150>
   19e62:	6923      	ldr	r3, [r4, #16]
   19e64:	4632      	mov	r2, r6
   19e66:	4649      	mov	r1, r9
   19e68:	4640      	mov	r0, r8
   19e6a:	47d0      	blx	sl
   19e6c:	3001      	adds	r0, #1
   19e6e:	d0ab      	beq.n	19dc8 <_printf_i+0x164>
   19e70:	6823      	ldr	r3, [r4, #0]
   19e72:	079b      	lsls	r3, r3, #30
   19e74:	d413      	bmi.n	19e9e <_printf_i+0x23a>
   19e76:	68e0      	ldr	r0, [r4, #12]
   19e78:	9b03      	ldr	r3, [sp, #12]
   19e7a:	4298      	cmp	r0, r3
   19e7c:	bfb8      	it	lt
   19e7e:	4618      	movlt	r0, r3
   19e80:	e7a4      	b.n	19dcc <_printf_i+0x168>
   19e82:	2301      	movs	r3, #1
   19e84:	4632      	mov	r2, r6
   19e86:	4649      	mov	r1, r9
   19e88:	4640      	mov	r0, r8
   19e8a:	47d0      	blx	sl
   19e8c:	3001      	adds	r0, #1
   19e8e:	d09b      	beq.n	19dc8 <_printf_i+0x164>
   19e90:	3501      	adds	r5, #1
   19e92:	68e3      	ldr	r3, [r4, #12]
   19e94:	9903      	ldr	r1, [sp, #12]
   19e96:	1a5b      	subs	r3, r3, r1
   19e98:	42ab      	cmp	r3, r5
   19e9a:	dcf2      	bgt.n	19e82 <_printf_i+0x21e>
   19e9c:	e7eb      	b.n	19e76 <_printf_i+0x212>
   19e9e:	2500      	movs	r5, #0
   19ea0:	f104 0619 	add.w	r6, r4, #25
   19ea4:	e7f5      	b.n	19e92 <_printf_i+0x22e>
   19ea6:	bf00      	nop
   19ea8:	0002081d 	.word	0x0002081d
   19eac:	0002082e 	.word	0x0002082e

00019eb0 <_sbrk_r>:
   19eb0:	b538      	push	{r3, r4, r5, lr}
   19eb2:	4d06      	ldr	r5, [pc, #24]	; (19ecc <_sbrk_r+0x1c>)
   19eb4:	2300      	movs	r3, #0
   19eb6:	4604      	mov	r4, r0
   19eb8:	4608      	mov	r0, r1
   19eba:	602b      	str	r3, [r5, #0]
   19ebc:	f7f7 ff38 	bl	11d30 <_sbrk>
   19ec0:	1c43      	adds	r3, r0, #1
   19ec2:	d102      	bne.n	19eca <_sbrk_r+0x1a>
   19ec4:	682b      	ldr	r3, [r5, #0]
   19ec6:	b103      	cbz	r3, 19eca <_sbrk_r+0x1a>
   19ec8:	6023      	str	r3, [r4, #0]
   19eca:	bd38      	pop	{r3, r4, r5, pc}
   19ecc:	20002b88 	.word	0x20002b88

00019ed0 <__swbuf_r>:
   19ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ed2:	460e      	mov	r6, r1
   19ed4:	4614      	mov	r4, r2
   19ed6:	4605      	mov	r5, r0
   19ed8:	b118      	cbz	r0, 19ee2 <__swbuf_r+0x12>
   19eda:	6983      	ldr	r3, [r0, #24]
   19edc:	b90b      	cbnz	r3, 19ee2 <__swbuf_r+0x12>
   19ede:	f000 f9bb 	bl	1a258 <__sinit>
   19ee2:	4b21      	ldr	r3, [pc, #132]	; (19f68 <__swbuf_r+0x98>)
   19ee4:	429c      	cmp	r4, r3
   19ee6:	d12b      	bne.n	19f40 <__swbuf_r+0x70>
   19ee8:	686c      	ldr	r4, [r5, #4]
   19eea:	69a3      	ldr	r3, [r4, #24]
   19eec:	60a3      	str	r3, [r4, #8]
   19eee:	89a3      	ldrh	r3, [r4, #12]
   19ef0:	071a      	lsls	r2, r3, #28
   19ef2:	d52f      	bpl.n	19f54 <__swbuf_r+0x84>
   19ef4:	6923      	ldr	r3, [r4, #16]
   19ef6:	b36b      	cbz	r3, 19f54 <__swbuf_r+0x84>
   19ef8:	6923      	ldr	r3, [r4, #16]
   19efa:	6820      	ldr	r0, [r4, #0]
   19efc:	1ac0      	subs	r0, r0, r3
   19efe:	6963      	ldr	r3, [r4, #20]
   19f00:	b2f6      	uxtb	r6, r6
   19f02:	4283      	cmp	r3, r0
   19f04:	4637      	mov	r7, r6
   19f06:	dc04      	bgt.n	19f12 <__swbuf_r+0x42>
   19f08:	4621      	mov	r1, r4
   19f0a:	4628      	mov	r0, r5
   19f0c:	f000 f926 	bl	1a15c <_fflush_r>
   19f10:	bb30      	cbnz	r0, 19f60 <__swbuf_r+0x90>
   19f12:	68a3      	ldr	r3, [r4, #8]
   19f14:	3b01      	subs	r3, #1
   19f16:	60a3      	str	r3, [r4, #8]
   19f18:	6823      	ldr	r3, [r4, #0]
   19f1a:	1c5a      	adds	r2, r3, #1
   19f1c:	6022      	str	r2, [r4, #0]
   19f1e:	701e      	strb	r6, [r3, #0]
   19f20:	6963      	ldr	r3, [r4, #20]
   19f22:	3001      	adds	r0, #1
   19f24:	4283      	cmp	r3, r0
   19f26:	d004      	beq.n	19f32 <__swbuf_r+0x62>
   19f28:	89a3      	ldrh	r3, [r4, #12]
   19f2a:	07db      	lsls	r3, r3, #31
   19f2c:	d506      	bpl.n	19f3c <__swbuf_r+0x6c>
   19f2e:	2e0a      	cmp	r6, #10
   19f30:	d104      	bne.n	19f3c <__swbuf_r+0x6c>
   19f32:	4621      	mov	r1, r4
   19f34:	4628      	mov	r0, r5
   19f36:	f000 f911 	bl	1a15c <_fflush_r>
   19f3a:	b988      	cbnz	r0, 19f60 <__swbuf_r+0x90>
   19f3c:	4638      	mov	r0, r7
   19f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19f40:	4b0a      	ldr	r3, [pc, #40]	; (19f6c <__swbuf_r+0x9c>)
   19f42:	429c      	cmp	r4, r3
   19f44:	d101      	bne.n	19f4a <__swbuf_r+0x7a>
   19f46:	68ac      	ldr	r4, [r5, #8]
   19f48:	e7cf      	b.n	19eea <__swbuf_r+0x1a>
   19f4a:	4b09      	ldr	r3, [pc, #36]	; (19f70 <__swbuf_r+0xa0>)
   19f4c:	429c      	cmp	r4, r3
   19f4e:	bf08      	it	eq
   19f50:	68ec      	ldreq	r4, [r5, #12]
   19f52:	e7ca      	b.n	19eea <__swbuf_r+0x1a>
   19f54:	4621      	mov	r1, r4
   19f56:	4628      	mov	r0, r5
   19f58:	f000 f80c 	bl	19f74 <__swsetup_r>
   19f5c:	2800      	cmp	r0, #0
   19f5e:	d0cb      	beq.n	19ef8 <__swbuf_r+0x28>
   19f60:	f04f 37ff 	mov.w	r7, #4294967295
   19f64:	e7ea      	b.n	19f3c <__swbuf_r+0x6c>
   19f66:	bf00      	nop
   19f68:	0001cebc 	.word	0x0001cebc
   19f6c:	0001cedc 	.word	0x0001cedc
   19f70:	0001ce9c 	.word	0x0001ce9c

00019f74 <__swsetup_r>:
   19f74:	4b32      	ldr	r3, [pc, #200]	; (1a040 <__swsetup_r+0xcc>)
   19f76:	b570      	push	{r4, r5, r6, lr}
   19f78:	681d      	ldr	r5, [r3, #0]
   19f7a:	4606      	mov	r6, r0
   19f7c:	460c      	mov	r4, r1
   19f7e:	b125      	cbz	r5, 19f8a <__swsetup_r+0x16>
   19f80:	69ab      	ldr	r3, [r5, #24]
   19f82:	b913      	cbnz	r3, 19f8a <__swsetup_r+0x16>
   19f84:	4628      	mov	r0, r5
   19f86:	f000 f967 	bl	1a258 <__sinit>
   19f8a:	4b2e      	ldr	r3, [pc, #184]	; (1a044 <__swsetup_r+0xd0>)
   19f8c:	429c      	cmp	r4, r3
   19f8e:	d10f      	bne.n	19fb0 <__swsetup_r+0x3c>
   19f90:	686c      	ldr	r4, [r5, #4]
   19f92:	89a3      	ldrh	r3, [r4, #12]
   19f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   19f98:	0719      	lsls	r1, r3, #28
   19f9a:	d42c      	bmi.n	19ff6 <__swsetup_r+0x82>
   19f9c:	06dd      	lsls	r5, r3, #27
   19f9e:	d411      	bmi.n	19fc4 <__swsetup_r+0x50>
   19fa0:	2309      	movs	r3, #9
   19fa2:	6033      	str	r3, [r6, #0]
   19fa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   19fa8:	81a3      	strh	r3, [r4, #12]
   19faa:	f04f 30ff 	mov.w	r0, #4294967295
   19fae:	e03e      	b.n	1a02e <__swsetup_r+0xba>
   19fb0:	4b25      	ldr	r3, [pc, #148]	; (1a048 <__swsetup_r+0xd4>)
   19fb2:	429c      	cmp	r4, r3
   19fb4:	d101      	bne.n	19fba <__swsetup_r+0x46>
   19fb6:	68ac      	ldr	r4, [r5, #8]
   19fb8:	e7eb      	b.n	19f92 <__swsetup_r+0x1e>
   19fba:	4b24      	ldr	r3, [pc, #144]	; (1a04c <__swsetup_r+0xd8>)
   19fbc:	429c      	cmp	r4, r3
   19fbe:	bf08      	it	eq
   19fc0:	68ec      	ldreq	r4, [r5, #12]
   19fc2:	e7e6      	b.n	19f92 <__swsetup_r+0x1e>
   19fc4:	0758      	lsls	r0, r3, #29
   19fc6:	d512      	bpl.n	19fee <__swsetup_r+0x7a>
   19fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   19fca:	b141      	cbz	r1, 19fde <__swsetup_r+0x6a>
   19fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   19fd0:	4299      	cmp	r1, r3
   19fd2:	d002      	beq.n	19fda <__swsetup_r+0x66>
   19fd4:	4630      	mov	r0, r6
   19fd6:	f7ff fa43 	bl	19460 <_free_r>
   19fda:	2300      	movs	r3, #0
   19fdc:	6363      	str	r3, [r4, #52]	; 0x34
   19fde:	89a3      	ldrh	r3, [r4, #12]
   19fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   19fe4:	81a3      	strh	r3, [r4, #12]
   19fe6:	2300      	movs	r3, #0
   19fe8:	6063      	str	r3, [r4, #4]
   19fea:	6923      	ldr	r3, [r4, #16]
   19fec:	6023      	str	r3, [r4, #0]
   19fee:	89a3      	ldrh	r3, [r4, #12]
   19ff0:	f043 0308 	orr.w	r3, r3, #8
   19ff4:	81a3      	strh	r3, [r4, #12]
   19ff6:	6923      	ldr	r3, [r4, #16]
   19ff8:	b94b      	cbnz	r3, 1a00e <__swsetup_r+0x9a>
   19ffa:	89a3      	ldrh	r3, [r4, #12]
   19ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
   1a000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1a004:	d003      	beq.n	1a00e <__swsetup_r+0x9a>
   1a006:	4621      	mov	r1, r4
   1a008:	4630      	mov	r0, r6
   1a00a:	f000 f9a7 	bl	1a35c <__smakebuf_r>
   1a00e:	89a0      	ldrh	r0, [r4, #12]
   1a010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1a014:	f010 0301 	ands.w	r3, r0, #1
   1a018:	d00a      	beq.n	1a030 <__swsetup_r+0xbc>
   1a01a:	2300      	movs	r3, #0
   1a01c:	60a3      	str	r3, [r4, #8]
   1a01e:	6963      	ldr	r3, [r4, #20]
   1a020:	425b      	negs	r3, r3
   1a022:	61a3      	str	r3, [r4, #24]
   1a024:	6923      	ldr	r3, [r4, #16]
   1a026:	b943      	cbnz	r3, 1a03a <__swsetup_r+0xc6>
   1a028:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   1a02c:	d1ba      	bne.n	19fa4 <__swsetup_r+0x30>
   1a02e:	bd70      	pop	{r4, r5, r6, pc}
   1a030:	0781      	lsls	r1, r0, #30
   1a032:	bf58      	it	pl
   1a034:	6963      	ldrpl	r3, [r4, #20]
   1a036:	60a3      	str	r3, [r4, #8]
   1a038:	e7f4      	b.n	1a024 <__swsetup_r+0xb0>
   1a03a:	2000      	movs	r0, #0
   1a03c:	e7f7      	b.n	1a02e <__swsetup_r+0xba>
   1a03e:	bf00      	nop
   1a040:	2000022c 	.word	0x2000022c
   1a044:	0001cebc 	.word	0x0001cebc
   1a048:	0001cedc 	.word	0x0001cedc
   1a04c:	0001ce9c 	.word	0x0001ce9c

0001a050 <__sflush_r>:
   1a050:	898a      	ldrh	r2, [r1, #12]
   1a052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a056:	4605      	mov	r5, r0
   1a058:	0710      	lsls	r0, r2, #28
   1a05a:	460c      	mov	r4, r1
   1a05c:	d458      	bmi.n	1a110 <__sflush_r+0xc0>
   1a05e:	684b      	ldr	r3, [r1, #4]
   1a060:	2b00      	cmp	r3, #0
   1a062:	dc05      	bgt.n	1a070 <__sflush_r+0x20>
   1a064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1a066:	2b00      	cmp	r3, #0
   1a068:	dc02      	bgt.n	1a070 <__sflush_r+0x20>
   1a06a:	2000      	movs	r0, #0
   1a06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1a072:	2e00      	cmp	r6, #0
   1a074:	d0f9      	beq.n	1a06a <__sflush_r+0x1a>
   1a076:	2300      	movs	r3, #0
   1a078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1a07c:	682f      	ldr	r7, [r5, #0]
   1a07e:	602b      	str	r3, [r5, #0]
   1a080:	d032      	beq.n	1a0e8 <__sflush_r+0x98>
   1a082:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1a084:	89a3      	ldrh	r3, [r4, #12]
   1a086:	075a      	lsls	r2, r3, #29
   1a088:	d505      	bpl.n	1a096 <__sflush_r+0x46>
   1a08a:	6863      	ldr	r3, [r4, #4]
   1a08c:	1ac0      	subs	r0, r0, r3
   1a08e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a090:	b10b      	cbz	r3, 1a096 <__sflush_r+0x46>
   1a092:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1a094:	1ac0      	subs	r0, r0, r3
   1a096:	2300      	movs	r3, #0
   1a098:	4602      	mov	r2, r0
   1a09a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1a09c:	6a21      	ldr	r1, [r4, #32]
   1a09e:	4628      	mov	r0, r5
   1a0a0:	47b0      	blx	r6
   1a0a2:	1c43      	adds	r3, r0, #1
   1a0a4:	89a3      	ldrh	r3, [r4, #12]
   1a0a6:	d106      	bne.n	1a0b6 <__sflush_r+0x66>
   1a0a8:	6829      	ldr	r1, [r5, #0]
   1a0aa:	291d      	cmp	r1, #29
   1a0ac:	d82c      	bhi.n	1a108 <__sflush_r+0xb8>
   1a0ae:	4a2a      	ldr	r2, [pc, #168]	; (1a158 <__sflush_r+0x108>)
   1a0b0:	40ca      	lsrs	r2, r1
   1a0b2:	07d6      	lsls	r6, r2, #31
   1a0b4:	d528      	bpl.n	1a108 <__sflush_r+0xb8>
   1a0b6:	2200      	movs	r2, #0
   1a0b8:	6062      	str	r2, [r4, #4]
   1a0ba:	04d9      	lsls	r1, r3, #19
   1a0bc:	6922      	ldr	r2, [r4, #16]
   1a0be:	6022      	str	r2, [r4, #0]
   1a0c0:	d504      	bpl.n	1a0cc <__sflush_r+0x7c>
   1a0c2:	1c42      	adds	r2, r0, #1
   1a0c4:	d101      	bne.n	1a0ca <__sflush_r+0x7a>
   1a0c6:	682b      	ldr	r3, [r5, #0]
   1a0c8:	b903      	cbnz	r3, 1a0cc <__sflush_r+0x7c>
   1a0ca:	6560      	str	r0, [r4, #84]	; 0x54
   1a0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1a0ce:	602f      	str	r7, [r5, #0]
   1a0d0:	2900      	cmp	r1, #0
   1a0d2:	d0ca      	beq.n	1a06a <__sflush_r+0x1a>
   1a0d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1a0d8:	4299      	cmp	r1, r3
   1a0da:	d002      	beq.n	1a0e2 <__sflush_r+0x92>
   1a0dc:	4628      	mov	r0, r5
   1a0de:	f7ff f9bf 	bl	19460 <_free_r>
   1a0e2:	2000      	movs	r0, #0
   1a0e4:	6360      	str	r0, [r4, #52]	; 0x34
   1a0e6:	e7c1      	b.n	1a06c <__sflush_r+0x1c>
   1a0e8:	6a21      	ldr	r1, [r4, #32]
   1a0ea:	2301      	movs	r3, #1
   1a0ec:	4628      	mov	r0, r5
   1a0ee:	47b0      	blx	r6
   1a0f0:	1c41      	adds	r1, r0, #1
   1a0f2:	d1c7      	bne.n	1a084 <__sflush_r+0x34>
   1a0f4:	682b      	ldr	r3, [r5, #0]
   1a0f6:	2b00      	cmp	r3, #0
   1a0f8:	d0c4      	beq.n	1a084 <__sflush_r+0x34>
   1a0fa:	2b1d      	cmp	r3, #29
   1a0fc:	d001      	beq.n	1a102 <__sflush_r+0xb2>
   1a0fe:	2b16      	cmp	r3, #22
   1a100:	d101      	bne.n	1a106 <__sflush_r+0xb6>
   1a102:	602f      	str	r7, [r5, #0]
   1a104:	e7b1      	b.n	1a06a <__sflush_r+0x1a>
   1a106:	89a3      	ldrh	r3, [r4, #12]
   1a108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a10c:	81a3      	strh	r3, [r4, #12]
   1a10e:	e7ad      	b.n	1a06c <__sflush_r+0x1c>
   1a110:	690f      	ldr	r7, [r1, #16]
   1a112:	2f00      	cmp	r7, #0
   1a114:	d0a9      	beq.n	1a06a <__sflush_r+0x1a>
   1a116:	0793      	lsls	r3, r2, #30
   1a118:	680e      	ldr	r6, [r1, #0]
   1a11a:	bf08      	it	eq
   1a11c:	694b      	ldreq	r3, [r1, #20]
   1a11e:	600f      	str	r7, [r1, #0]
   1a120:	bf18      	it	ne
   1a122:	2300      	movne	r3, #0
   1a124:	eba6 0807 	sub.w	r8, r6, r7
   1a128:	608b      	str	r3, [r1, #8]
   1a12a:	f1b8 0f00 	cmp.w	r8, #0
   1a12e:	dd9c      	ble.n	1a06a <__sflush_r+0x1a>
   1a130:	6a21      	ldr	r1, [r4, #32]
   1a132:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1a134:	4643      	mov	r3, r8
   1a136:	463a      	mov	r2, r7
   1a138:	4628      	mov	r0, r5
   1a13a:	47b0      	blx	r6
   1a13c:	2800      	cmp	r0, #0
   1a13e:	dc06      	bgt.n	1a14e <__sflush_r+0xfe>
   1a140:	89a3      	ldrh	r3, [r4, #12]
   1a142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a146:	81a3      	strh	r3, [r4, #12]
   1a148:	f04f 30ff 	mov.w	r0, #4294967295
   1a14c:	e78e      	b.n	1a06c <__sflush_r+0x1c>
   1a14e:	4407      	add	r7, r0
   1a150:	eba8 0800 	sub.w	r8, r8, r0
   1a154:	e7e9      	b.n	1a12a <__sflush_r+0xda>
   1a156:	bf00      	nop
   1a158:	20400001 	.word	0x20400001

0001a15c <_fflush_r>:
   1a15c:	b538      	push	{r3, r4, r5, lr}
   1a15e:	690b      	ldr	r3, [r1, #16]
   1a160:	4605      	mov	r5, r0
   1a162:	460c      	mov	r4, r1
   1a164:	b913      	cbnz	r3, 1a16c <_fflush_r+0x10>
   1a166:	2500      	movs	r5, #0
   1a168:	4628      	mov	r0, r5
   1a16a:	bd38      	pop	{r3, r4, r5, pc}
   1a16c:	b118      	cbz	r0, 1a176 <_fflush_r+0x1a>
   1a16e:	6983      	ldr	r3, [r0, #24]
   1a170:	b90b      	cbnz	r3, 1a176 <_fflush_r+0x1a>
   1a172:	f000 f871 	bl	1a258 <__sinit>
   1a176:	4b14      	ldr	r3, [pc, #80]	; (1a1c8 <_fflush_r+0x6c>)
   1a178:	429c      	cmp	r4, r3
   1a17a:	d11b      	bne.n	1a1b4 <_fflush_r+0x58>
   1a17c:	686c      	ldr	r4, [r5, #4]
   1a17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a182:	2b00      	cmp	r3, #0
   1a184:	d0ef      	beq.n	1a166 <_fflush_r+0xa>
   1a186:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a188:	07d0      	lsls	r0, r2, #31
   1a18a:	d404      	bmi.n	1a196 <_fflush_r+0x3a>
   1a18c:	0599      	lsls	r1, r3, #22
   1a18e:	d402      	bmi.n	1a196 <_fflush_r+0x3a>
   1a190:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a192:	f7f7 fe13 	bl	11dbc <__retarget_lock_acquire_recursive>
   1a196:	4628      	mov	r0, r5
   1a198:	4621      	mov	r1, r4
   1a19a:	f7ff ff59 	bl	1a050 <__sflush_r>
   1a19e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1a1a0:	07da      	lsls	r2, r3, #31
   1a1a2:	4605      	mov	r5, r0
   1a1a4:	d4e0      	bmi.n	1a168 <_fflush_r+0xc>
   1a1a6:	89a3      	ldrh	r3, [r4, #12]
   1a1a8:	059b      	lsls	r3, r3, #22
   1a1aa:	d4dd      	bmi.n	1a168 <_fflush_r+0xc>
   1a1ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a1ae:	f7f7 fe23 	bl	11df8 <__retarget_lock_release_recursive>
   1a1b2:	e7d9      	b.n	1a168 <_fflush_r+0xc>
   1a1b4:	4b05      	ldr	r3, [pc, #20]	; (1a1cc <_fflush_r+0x70>)
   1a1b6:	429c      	cmp	r4, r3
   1a1b8:	d101      	bne.n	1a1be <_fflush_r+0x62>
   1a1ba:	68ac      	ldr	r4, [r5, #8]
   1a1bc:	e7df      	b.n	1a17e <_fflush_r+0x22>
   1a1be:	4b04      	ldr	r3, [pc, #16]	; (1a1d0 <_fflush_r+0x74>)
   1a1c0:	429c      	cmp	r4, r3
   1a1c2:	bf08      	it	eq
   1a1c4:	68ec      	ldreq	r4, [r5, #12]
   1a1c6:	e7da      	b.n	1a17e <_fflush_r+0x22>
   1a1c8:	0001cebc 	.word	0x0001cebc
   1a1cc:	0001cedc 	.word	0x0001cedc
   1a1d0:	0001ce9c 	.word	0x0001ce9c

0001a1d4 <std>:
   1a1d4:	2300      	movs	r3, #0
   1a1d6:	b510      	push	{r4, lr}
   1a1d8:	4604      	mov	r4, r0
   1a1da:	e9c0 3300 	strd	r3, r3, [r0]
   1a1de:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1a1e2:	6083      	str	r3, [r0, #8]
   1a1e4:	8181      	strh	r1, [r0, #12]
   1a1e6:	6643      	str	r3, [r0, #100]	; 0x64
   1a1e8:	81c2      	strh	r2, [r0, #14]
   1a1ea:	6183      	str	r3, [r0, #24]
   1a1ec:	4619      	mov	r1, r3
   1a1ee:	2208      	movs	r2, #8
   1a1f0:	305c      	adds	r0, #92	; 0x5c
   1a1f2:	f001 fcc3 	bl	1bb7c <memset>
   1a1f6:	4b05      	ldr	r3, [pc, #20]	; (1a20c <std+0x38>)
   1a1f8:	6263      	str	r3, [r4, #36]	; 0x24
   1a1fa:	4b05      	ldr	r3, [pc, #20]	; (1a210 <std+0x3c>)
   1a1fc:	62a3      	str	r3, [r4, #40]	; 0x28
   1a1fe:	4b05      	ldr	r3, [pc, #20]	; (1a214 <std+0x40>)
   1a200:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a202:	4b05      	ldr	r3, [pc, #20]	; (1a218 <std+0x44>)
   1a204:	6224      	str	r4, [r4, #32]
   1a206:	6323      	str	r3, [r4, #48]	; 0x30
   1a208:	bd10      	pop	{r4, pc}
   1a20a:	bf00      	nop
   1a20c:	0001c5d7 	.word	0x0001c5d7
   1a210:	0001c5f9 	.word	0x0001c5f9
   1a214:	0001c631 	.word	0x0001c631
   1a218:	0001c655 	.word	0x0001c655

0001a21c <_cleanup_r>:
   1a21c:	4901      	ldr	r1, [pc, #4]	; (1a224 <_cleanup_r+0x8>)
   1a21e:	f001 bea4 	b.w	1bf6a <_fwalk_reent>
   1a222:	bf00      	nop
   1a224:	0001a15d 	.word	0x0001a15d

0001a228 <__sfp_lock_acquire>:
   1a228:	4801      	ldr	r0, [pc, #4]	; (1a230 <__sfp_lock_acquire+0x8>)
   1a22a:	f7f7 bdc7 	b.w	11dbc <__retarget_lock_acquire_recursive>
   1a22e:	bf00      	nop
   1a230:	2000047c 	.word	0x2000047c

0001a234 <__sfp_lock_release>:
   1a234:	4801      	ldr	r0, [pc, #4]	; (1a23c <__sfp_lock_release+0x8>)
   1a236:	f7f7 bddf 	b.w	11df8 <__retarget_lock_release_recursive>
   1a23a:	bf00      	nop
   1a23c:	2000047c 	.word	0x2000047c

0001a240 <__sinit_lock_acquire>:
   1a240:	4801      	ldr	r0, [pc, #4]	; (1a248 <__sinit_lock_acquire+0x8>)
   1a242:	f7f7 bdbb 	b.w	11dbc <__retarget_lock_acquire_recursive>
   1a246:	bf00      	nop
   1a248:	20000490 	.word	0x20000490

0001a24c <__sinit_lock_release>:
   1a24c:	4801      	ldr	r0, [pc, #4]	; (1a254 <__sinit_lock_release+0x8>)
   1a24e:	f7f7 bdd3 	b.w	11df8 <__retarget_lock_release_recursive>
   1a252:	bf00      	nop
   1a254:	20000490 	.word	0x20000490

0001a258 <__sinit>:
   1a258:	b510      	push	{r4, lr}
   1a25a:	4604      	mov	r4, r0
   1a25c:	f7ff fff0 	bl	1a240 <__sinit_lock_acquire>
   1a260:	69a3      	ldr	r3, [r4, #24]
   1a262:	b11b      	cbz	r3, 1a26c <__sinit+0x14>
   1a264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a268:	f7ff bff0 	b.w	1a24c <__sinit_lock_release>
   1a26c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   1a270:	6523      	str	r3, [r4, #80]	; 0x50
   1a272:	4b13      	ldr	r3, [pc, #76]	; (1a2c0 <__sinit+0x68>)
   1a274:	4a13      	ldr	r2, [pc, #76]	; (1a2c4 <__sinit+0x6c>)
   1a276:	681b      	ldr	r3, [r3, #0]
   1a278:	62a2      	str	r2, [r4, #40]	; 0x28
   1a27a:	42a3      	cmp	r3, r4
   1a27c:	bf04      	itt	eq
   1a27e:	2301      	moveq	r3, #1
   1a280:	61a3      	streq	r3, [r4, #24]
   1a282:	4620      	mov	r0, r4
   1a284:	f000 f820 	bl	1a2c8 <__sfp>
   1a288:	6060      	str	r0, [r4, #4]
   1a28a:	4620      	mov	r0, r4
   1a28c:	f000 f81c 	bl	1a2c8 <__sfp>
   1a290:	60a0      	str	r0, [r4, #8]
   1a292:	4620      	mov	r0, r4
   1a294:	f000 f818 	bl	1a2c8 <__sfp>
   1a298:	2200      	movs	r2, #0
   1a29a:	60e0      	str	r0, [r4, #12]
   1a29c:	2104      	movs	r1, #4
   1a29e:	6860      	ldr	r0, [r4, #4]
   1a2a0:	f7ff ff98 	bl	1a1d4 <std>
   1a2a4:	68a0      	ldr	r0, [r4, #8]
   1a2a6:	2201      	movs	r2, #1
   1a2a8:	2109      	movs	r1, #9
   1a2aa:	f7ff ff93 	bl	1a1d4 <std>
   1a2ae:	68e0      	ldr	r0, [r4, #12]
   1a2b0:	2202      	movs	r2, #2
   1a2b2:	2112      	movs	r1, #18
   1a2b4:	f7ff ff8e 	bl	1a1d4 <std>
   1a2b8:	2301      	movs	r3, #1
   1a2ba:	61a3      	str	r3, [r4, #24]
   1a2bc:	e7d2      	b.n	1a264 <__sinit+0xc>
   1a2be:	bf00      	nop
   1a2c0:	0001ce98 	.word	0x0001ce98
   1a2c4:	0001a21d 	.word	0x0001a21d

0001a2c8 <__sfp>:
   1a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a2ca:	4607      	mov	r7, r0
   1a2cc:	f7ff ffac 	bl	1a228 <__sfp_lock_acquire>
   1a2d0:	4b1e      	ldr	r3, [pc, #120]	; (1a34c <__sfp+0x84>)
   1a2d2:	681e      	ldr	r6, [r3, #0]
   1a2d4:	69b3      	ldr	r3, [r6, #24]
   1a2d6:	b913      	cbnz	r3, 1a2de <__sfp+0x16>
   1a2d8:	4630      	mov	r0, r6
   1a2da:	f7ff ffbd 	bl	1a258 <__sinit>
   1a2de:	3648      	adds	r6, #72	; 0x48
   1a2e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   1a2e4:	3b01      	subs	r3, #1
   1a2e6:	d503      	bpl.n	1a2f0 <__sfp+0x28>
   1a2e8:	6833      	ldr	r3, [r6, #0]
   1a2ea:	b30b      	cbz	r3, 1a330 <__sfp+0x68>
   1a2ec:	6836      	ldr	r6, [r6, #0]
   1a2ee:	e7f7      	b.n	1a2e0 <__sfp+0x18>
   1a2f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   1a2f4:	b9d5      	cbnz	r5, 1a32c <__sfp+0x64>
   1a2f6:	4b16      	ldr	r3, [pc, #88]	; (1a350 <__sfp+0x88>)
   1a2f8:	60e3      	str	r3, [r4, #12]
   1a2fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1a2fe:	6665      	str	r5, [r4, #100]	; 0x64
   1a300:	f7f7 fd2a 	bl	11d58 <__retarget_lock_init_recursive>
   1a304:	f7ff ff96 	bl	1a234 <__sfp_lock_release>
   1a308:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1a30c:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1a310:	6025      	str	r5, [r4, #0]
   1a312:	61a5      	str	r5, [r4, #24]
   1a314:	2208      	movs	r2, #8
   1a316:	4629      	mov	r1, r5
   1a318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1a31c:	f001 fc2e 	bl	1bb7c <memset>
   1a320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   1a324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   1a328:	4620      	mov	r0, r4
   1a32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a32c:	3468      	adds	r4, #104	; 0x68
   1a32e:	e7d9      	b.n	1a2e4 <__sfp+0x1c>
   1a330:	2104      	movs	r1, #4
   1a332:	4638      	mov	r0, r7
   1a334:	f001 fe03 	bl	1bf3e <__sfmoreglue>
   1a338:	4604      	mov	r4, r0
   1a33a:	6030      	str	r0, [r6, #0]
   1a33c:	2800      	cmp	r0, #0
   1a33e:	d1d5      	bne.n	1a2ec <__sfp+0x24>
   1a340:	f7ff ff78 	bl	1a234 <__sfp_lock_release>
   1a344:	230c      	movs	r3, #12
   1a346:	603b      	str	r3, [r7, #0]
   1a348:	e7ee      	b.n	1a328 <__sfp+0x60>
   1a34a:	bf00      	nop
   1a34c:	0001ce98 	.word	0x0001ce98
   1a350:	ffff0001 	.word	0xffff0001

0001a354 <_localeconv_r>:
   1a354:	4800      	ldr	r0, [pc, #0]	; (1a358 <_localeconv_r+0x4>)
   1a356:	4770      	bx	lr
   1a358:	20000380 	.word	0x20000380

0001a35c <__smakebuf_r>:
   1a35c:	898b      	ldrh	r3, [r1, #12]
   1a35e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a360:	079d      	lsls	r5, r3, #30
   1a362:	4606      	mov	r6, r0
   1a364:	460c      	mov	r4, r1
   1a366:	d507      	bpl.n	1a378 <__smakebuf_r+0x1c>
   1a368:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1a36c:	6023      	str	r3, [r4, #0]
   1a36e:	6123      	str	r3, [r4, #16]
   1a370:	2301      	movs	r3, #1
   1a372:	6163      	str	r3, [r4, #20]
   1a374:	b002      	add	sp, #8
   1a376:	bd70      	pop	{r4, r5, r6, pc}
   1a378:	ab01      	add	r3, sp, #4
   1a37a:	466a      	mov	r2, sp
   1a37c:	f001 fe14 	bl	1bfa8 <__swhatbuf_r>
   1a380:	9900      	ldr	r1, [sp, #0]
   1a382:	4605      	mov	r5, r0
   1a384:	4630      	mov	r0, r6
   1a386:	f7ff f8b9 	bl	194fc <_malloc_r>
   1a38a:	b948      	cbnz	r0, 1a3a0 <__smakebuf_r+0x44>
   1a38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a390:	059a      	lsls	r2, r3, #22
   1a392:	d4ef      	bmi.n	1a374 <__smakebuf_r+0x18>
   1a394:	f023 0303 	bic.w	r3, r3, #3
   1a398:	f043 0302 	orr.w	r3, r3, #2
   1a39c:	81a3      	strh	r3, [r4, #12]
   1a39e:	e7e3      	b.n	1a368 <__smakebuf_r+0xc>
   1a3a0:	4b0d      	ldr	r3, [pc, #52]	; (1a3d8 <__smakebuf_r+0x7c>)
   1a3a2:	62b3      	str	r3, [r6, #40]	; 0x28
   1a3a4:	89a3      	ldrh	r3, [r4, #12]
   1a3a6:	6020      	str	r0, [r4, #0]
   1a3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a3ac:	81a3      	strh	r3, [r4, #12]
   1a3ae:	9b00      	ldr	r3, [sp, #0]
   1a3b0:	6163      	str	r3, [r4, #20]
   1a3b2:	9b01      	ldr	r3, [sp, #4]
   1a3b4:	6120      	str	r0, [r4, #16]
   1a3b6:	b15b      	cbz	r3, 1a3d0 <__smakebuf_r+0x74>
   1a3b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1a3bc:	4630      	mov	r0, r6
   1a3be:	f000 f8b5 	bl	1a52c <_isatty_r>
   1a3c2:	b128      	cbz	r0, 1a3d0 <__smakebuf_r+0x74>
   1a3c4:	89a3      	ldrh	r3, [r4, #12]
   1a3c6:	f023 0303 	bic.w	r3, r3, #3
   1a3ca:	f043 0301 	orr.w	r3, r3, #1
   1a3ce:	81a3      	strh	r3, [r4, #12]
   1a3d0:	89a0      	ldrh	r0, [r4, #12]
   1a3d2:	4305      	orrs	r5, r0
   1a3d4:	81a5      	strh	r5, [r4, #12]
   1a3d6:	e7cd      	b.n	1a374 <__smakebuf_r+0x18>
   1a3d8:	0001a21d 	.word	0x0001a21d

0001a3dc <__malloc_lock>:
   1a3dc:	4801      	ldr	r0, [pc, #4]	; (1a3e4 <__malloc_lock+0x8>)
   1a3de:	f7f7 bced 	b.w	11dbc <__retarget_lock_acquire_recursive>
   1a3e2:	bf00      	nop
   1a3e4:	20000468 	.word	0x20000468

0001a3e8 <__malloc_unlock>:
   1a3e8:	4801      	ldr	r0, [pc, #4]	; (1a3f0 <__malloc_unlock+0x8>)
   1a3ea:	f7f7 bd05 	b.w	11df8 <__retarget_lock_release_recursive>
   1a3ee:	bf00      	nop
   1a3f0:	20000468 	.word	0x20000468

0001a3f4 <__pow5mult>:
   1a3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a3f8:	4615      	mov	r5, r2
   1a3fa:	f012 0203 	ands.w	r2, r2, #3
   1a3fe:	4606      	mov	r6, r0
   1a400:	460f      	mov	r7, r1
   1a402:	d007      	beq.n	1a414 <__pow5mult+0x20>
   1a404:	4c21      	ldr	r4, [pc, #132]	; (1a48c <__pow5mult+0x98>)
   1a406:	3a01      	subs	r2, #1
   1a408:	2300      	movs	r3, #0
   1a40a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   1a40e:	f001 fe3a 	bl	1c086 <__multadd>
   1a412:	4607      	mov	r7, r0
   1a414:	10ad      	asrs	r5, r5, #2
   1a416:	d035      	beq.n	1a484 <__pow5mult+0x90>
   1a418:	6a74      	ldr	r4, [r6, #36]	; 0x24
   1a41a:	b93c      	cbnz	r4, 1a42c <__pow5mult+0x38>
   1a41c:	2010      	movs	r0, #16
   1a41e:	f7ff f817 	bl	19450 <malloc>
   1a422:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1a426:	6270      	str	r0, [r6, #36]	; 0x24
   1a428:	6004      	str	r4, [r0, #0]
   1a42a:	60c4      	str	r4, [r0, #12]
   1a42c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   1a430:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1a434:	b94c      	cbnz	r4, 1a44a <__pow5mult+0x56>
   1a436:	f240 2171 	movw	r1, #625	; 0x271
   1a43a:	4630      	mov	r0, r6
   1a43c:	f001 feaf 	bl	1c19e <__i2b>
   1a440:	2300      	movs	r3, #0
   1a442:	f8c8 0008 	str.w	r0, [r8, #8]
   1a446:	4604      	mov	r4, r0
   1a448:	6003      	str	r3, [r0, #0]
   1a44a:	f04f 0900 	mov.w	r9, #0
   1a44e:	07eb      	lsls	r3, r5, #31
   1a450:	d50a      	bpl.n	1a468 <__pow5mult+0x74>
   1a452:	4639      	mov	r1, r7
   1a454:	4622      	mov	r2, r4
   1a456:	4630      	mov	r0, r6
   1a458:	f001 feaa 	bl	1c1b0 <__multiply>
   1a45c:	4639      	mov	r1, r7
   1a45e:	4680      	mov	r8, r0
   1a460:	4630      	mov	r0, r6
   1a462:	f001 fdf9 	bl	1c058 <_Bfree>
   1a466:	4647      	mov	r7, r8
   1a468:	106d      	asrs	r5, r5, #1
   1a46a:	d00b      	beq.n	1a484 <__pow5mult+0x90>
   1a46c:	6820      	ldr	r0, [r4, #0]
   1a46e:	b938      	cbnz	r0, 1a480 <__pow5mult+0x8c>
   1a470:	4622      	mov	r2, r4
   1a472:	4621      	mov	r1, r4
   1a474:	4630      	mov	r0, r6
   1a476:	f001 fe9b 	bl	1c1b0 <__multiply>
   1a47a:	6020      	str	r0, [r4, #0]
   1a47c:	f8c0 9000 	str.w	r9, [r0]
   1a480:	4604      	mov	r4, r0
   1a482:	e7e4      	b.n	1a44e <__pow5mult+0x5a>
   1a484:	4638      	mov	r0, r7
   1a486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a48a:	bf00      	nop
   1a48c:	0001cefc 	.word	0x0001cefc

0001a490 <raise>:
   1a490:	4b02      	ldr	r3, [pc, #8]	; (1a49c <raise+0xc>)
   1a492:	4601      	mov	r1, r0
   1a494:	6818      	ldr	r0, [r3, #0]
   1a496:	f002 b874 	b.w	1c582 <_raise_r>
   1a49a:	bf00      	nop
   1a49c:	2000022c 	.word	0x2000022c

0001a4a0 <_kill_r>:
   1a4a0:	b538      	push	{r3, r4, r5, lr}
   1a4a2:	4d07      	ldr	r5, [pc, #28]	; (1a4c0 <_kill_r+0x20>)
   1a4a4:	2300      	movs	r3, #0
   1a4a6:	4604      	mov	r4, r0
   1a4a8:	4608      	mov	r0, r1
   1a4aa:	4611      	mov	r1, r2
   1a4ac:	602b      	str	r3, [r5, #0]
   1a4ae:	f000 fd03 	bl	1aeb8 <_kill>
   1a4b2:	1c43      	adds	r3, r0, #1
   1a4b4:	d102      	bne.n	1a4bc <_kill_r+0x1c>
   1a4b6:	682b      	ldr	r3, [r5, #0]
   1a4b8:	b103      	cbz	r3, 1a4bc <_kill_r+0x1c>
   1a4ba:	6023      	str	r3, [r4, #0]
   1a4bc:	bd38      	pop	{r3, r4, r5, pc}
   1a4be:	bf00      	nop
   1a4c0:	20002b88 	.word	0x20002b88

0001a4c4 <_write_r>:
   1a4c4:	b538      	push	{r3, r4, r5, lr}
   1a4c6:	4d07      	ldr	r5, [pc, #28]	; (1a4e4 <_write_r+0x20>)
   1a4c8:	4604      	mov	r4, r0
   1a4ca:	4608      	mov	r0, r1
   1a4cc:	4611      	mov	r1, r2
   1a4ce:	2200      	movs	r2, #0
   1a4d0:	602a      	str	r2, [r5, #0]
   1a4d2:	461a      	mov	r2, r3
   1a4d4:	f000 fce2 	bl	1ae9c <_write>
   1a4d8:	1c43      	adds	r3, r0, #1
   1a4da:	d102      	bne.n	1a4e2 <_write_r+0x1e>
   1a4dc:	682b      	ldr	r3, [r5, #0]
   1a4de:	b103      	cbz	r3, 1a4e2 <_write_r+0x1e>
   1a4e0:	6023      	str	r3, [r4, #0]
   1a4e2:	bd38      	pop	{r3, r4, r5, pc}
   1a4e4:	20002b88 	.word	0x20002b88

0001a4e8 <_close_r>:
   1a4e8:	b538      	push	{r3, r4, r5, lr}
   1a4ea:	4d06      	ldr	r5, [pc, #24]	; (1a504 <_close_r+0x1c>)
   1a4ec:	2300      	movs	r3, #0
   1a4ee:	4604      	mov	r4, r0
   1a4f0:	4608      	mov	r0, r1
   1a4f2:	602b      	str	r3, [r5, #0]
   1a4f4:	f000 fcd6 	bl	1aea4 <_close>
   1a4f8:	1c43      	adds	r3, r0, #1
   1a4fa:	d102      	bne.n	1a502 <_close_r+0x1a>
   1a4fc:	682b      	ldr	r3, [r5, #0]
   1a4fe:	b103      	cbz	r3, 1a502 <_close_r+0x1a>
   1a500:	6023      	str	r3, [r4, #0]
   1a502:	bd38      	pop	{r3, r4, r5, pc}
   1a504:	20002b88 	.word	0x20002b88

0001a508 <_fstat_r>:
   1a508:	b538      	push	{r3, r4, r5, lr}
   1a50a:	4d07      	ldr	r5, [pc, #28]	; (1a528 <_fstat_r+0x20>)
   1a50c:	2300      	movs	r3, #0
   1a50e:	4604      	mov	r4, r0
   1a510:	4608      	mov	r0, r1
   1a512:	4611      	mov	r1, r2
   1a514:	602b      	str	r3, [r5, #0]
   1a516:	f000 fcd3 	bl	1aec0 <_fstat>
   1a51a:	1c43      	adds	r3, r0, #1
   1a51c:	d102      	bne.n	1a524 <_fstat_r+0x1c>
   1a51e:	682b      	ldr	r3, [r5, #0]
   1a520:	b103      	cbz	r3, 1a524 <_fstat_r+0x1c>
   1a522:	6023      	str	r3, [r4, #0]
   1a524:	bd38      	pop	{r3, r4, r5, pc}
   1a526:	bf00      	nop
   1a528:	20002b88 	.word	0x20002b88

0001a52c <_isatty_r>:
   1a52c:	b538      	push	{r3, r4, r5, lr}
   1a52e:	4d06      	ldr	r5, [pc, #24]	; (1a548 <_isatty_r+0x1c>)
   1a530:	2300      	movs	r3, #0
   1a532:	4604      	mov	r4, r0
   1a534:	4608      	mov	r0, r1
   1a536:	602b      	str	r3, [r5, #0]
   1a538:	f000 fcb9 	bl	1aeae <_isatty>
   1a53c:	1c43      	adds	r3, r0, #1
   1a53e:	d102      	bne.n	1a546 <_isatty_r+0x1a>
   1a540:	682b      	ldr	r3, [r5, #0]
   1a542:	b103      	cbz	r3, 1a546 <_isatty_r+0x1a>
   1a544:	6023      	str	r3, [r4, #0]
   1a546:	bd38      	pop	{r3, r4, r5, pc}
   1a548:	20002b88 	.word	0x20002b88

0001a54c <_lseek_r>:
   1a54c:	b538      	push	{r3, r4, r5, lr}
   1a54e:	4d07      	ldr	r5, [pc, #28]	; (1a56c <_lseek_r+0x20>)
   1a550:	4604      	mov	r4, r0
   1a552:	4608      	mov	r0, r1
   1a554:	4611      	mov	r1, r2
   1a556:	2200      	movs	r2, #0
   1a558:	602a      	str	r2, [r5, #0]
   1a55a:	461a      	mov	r2, r3
   1a55c:	f000 fca5 	bl	1aeaa <_lseek>
   1a560:	1c43      	adds	r3, r0, #1
   1a562:	d102      	bne.n	1a56a <_lseek_r+0x1e>
   1a564:	682b      	ldr	r3, [r5, #0]
   1a566:	b103      	cbz	r3, 1a56a <_lseek_r+0x1e>
   1a568:	6023      	str	r3, [r4, #0]
   1a56a:	bd38      	pop	{r3, r4, r5, pc}
   1a56c:	20002b88 	.word	0x20002b88

0001a570 <_read_r>:
   1a570:	b538      	push	{r3, r4, r5, lr}
   1a572:	4d07      	ldr	r5, [pc, #28]	; (1a590 <_read_r+0x20>)
   1a574:	4604      	mov	r4, r0
   1a576:	4608      	mov	r0, r1
   1a578:	4611      	mov	r1, r2
   1a57a:	2200      	movs	r2, #0
   1a57c:	602a      	str	r2, [r5, #0]
   1a57e:	461a      	mov	r2, r3
   1a580:	f000 fc88 	bl	1ae94 <_read>
   1a584:	1c43      	adds	r3, r0, #1
   1a586:	d102      	bne.n	1a58e <_read_r+0x1e>
   1a588:	682b      	ldr	r3, [r5, #0]
   1a58a:	b103      	cbz	r3, 1a58e <_read_r+0x1e>
   1a58c:	6023      	str	r3, [r4, #0]
   1a58e:	bd38      	pop	{r3, r4, r5, pc}
   1a590:	20002b88 	.word	0x20002b88

0001a594 <error>:
{
   1a594:	b508      	push	{r3, lr}
	dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   1a596:	2100      	movs	r1, #0
   1a598:	200f      	movs	r0, #15
   1a59a:	f001 f80c 	bl	1b5b6 <dk_set_leds_state>
	return z_impl_k_sleep(timeout);
   1a59e:	2100      	movs	r1, #0
   1a5a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1a5a4:	f7fd fdc0 	bl	18128 <z_impl_k_sleep>
	while (true) {
   1a5a8:	e7f9      	b.n	1a59e <error+0xa>

0001a5aa <do_mcuboot_dfu>:
{
   1a5aa:	b508      	push	{r3, lr}
    sys_reboot(SYS_REBOOT_WARM);
   1a5ac:	2000      	movs	r0, #0
   1a5ae:	f7f5 fe55 	bl	1025c <sys_reboot>

0001a5b2 <button_handel>:
void button_handel(uint32_t button_state,uint32_t has_changed){
   1a5b2:	b508      	push	{r3, lr}
	if(DK_BTN2 & button_state){
   1a5b4:	07c3      	lsls	r3, r0, #31
   1a5b6:	d501      	bpl.n	1a5bc <button_handel+0xa>
		do_mcuboot_dfu();
   1a5b8:	f7ff fff7 	bl	1a5aa <do_mcuboot_dfu>
}
   1a5bc:	bd08      	pop	{r3, pc}

0001a5be <sys_put_le32>:
	dst[1] = val >> 8;
   1a5be:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1a5c2:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1a5c4:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   1a5c6:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1a5c8:	0a00      	lsrs	r0, r0, #8
   1a5ca:	704b      	strb	r3, [r1, #1]
   1a5cc:	70c8      	strb	r0, [r1, #3]
}
   1a5ce:	4770      	bx	lr

0001a5d0 <sys_get_le32>:
	return ((uint16_t)src[1] << 8) | src[0];
   1a5d0:	78c3      	ldrb	r3, [r0, #3]
   1a5d2:	7882      	ldrb	r2, [r0, #2]
   1a5d4:	7841      	ldrb	r1, [r0, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a5d6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1a5da:	7803      	ldrb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a5dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1a5e0:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   1a5e4:	4770      	bx	lr

0001a5e6 <dfu_target_cb_dummy>:
void dfu_target_cb_dummy(enum dfu_target_evt_id evt_id) {;}
   1a5e6:	4770      	bx	lr

0001a5e8 <event_cb_dummy>:
static void event_cb_dummy(cmd_event_t* p_event) {;}
   1a5e8:	4770      	bx	lr

0001a5ea <app_flash_si_slotinfo>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_si_slotinfo(uint8_t* p_data)
{
   1a5ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a5ee:	4604      	mov	r4, r0
	uint32_t first_blank;

	uint32_t p_read;
	bool  found;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   1a5f0:	a901      	add	r1, sp, #4
   1a5f2:	2005      	movs	r0, #5
   1a5f4:	f7f6 f988 	bl	10908 <flash_area_open>
	if (rc) {
   1a5f8:	4606      	mov	r6, r0
   1a5fa:	bbb0      	cbnz	r0, 1a66a <app_flash_si_slotinfo+0x80>
		return rc;
	}

	bank_addr = fa->fa_off;
   1a5fc:	9801      	ldr	r0, [sp, #4]
	page_count = fa->fa_size / 0x1000;
   1a5fe:	e9d0 5701 	ldrd	r5, r7, [r0, #4]

	flash_area_close(fa);
   1a602:	f000 fb4d 	bl	1aca0 <flash_area_close>

	found = false;
	p_read = bank_addr;
	while (p_read < fa->fa_size) {
   1a606:	9b01      	ldr	r3, [sp, #4]
	page_count = fa->fa_size / 0x1000;
   1a608:	ea4f 3817 	mov.w	r8, r7, lsr #12
	while (p_read < fa->fa_size) {
   1a60c:	6898      	ldr	r0, [r3, #8]
	found = false;
   1a60e:	4631      	mov	r1, r6
	p_read = bank_addr;
   1a610:	462b      	mov	r3, r5
	while (p_read < fa->fa_size) {
   1a612:	4298      	cmp	r0, r3
   1a614:	d90a      	bls.n	1a62c <app_flash_si_slotinfo+0x42>
		for (uint32_t i = 0; i < 4096; i++) {
   1a616:	2200      	movs	r2, #0
			if (((uint8_t*)p_read)[i] != 0xFF) {
   1a618:	f813 c002 	ldrb.w	ip, [r3, r2]
   1a61c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a620:	d127      	bne.n	1a672 <app_flash_si_slotinfo+0x88>
		for (uint32_t i = 0; i < 4096; i++) {
   1a622:	3201      	adds	r2, #1
   1a624:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1a628:	d1f6      	bne.n	1a618 <app_flash_si_slotinfo+0x2e>
				found = true;
				break;
			}
		}

		if (!found) {
   1a62a:	bb11      	cbnz	r1, 1a672 <app_flash_si_slotinfo+0x88>
		}

		p_read += 4096;
	}

	first_blank = MAX(bank_addr, (p_read - 4096));
   1a62c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1a630:	42ab      	cmp	r3, r5
	dst[1] = val >> 8;
   1a632:	f3c5 2207 	ubfx	r2, r5, #8, #8
   1a636:	bf38      	it	cc
   1a638:	462b      	movcc	r3, r5
   1a63a:	7062      	strb	r2, [r4, #1]
   1a63c:	2200      	movs	r2, #0
	dst[0] = val;
   1a63e:	7025      	strb	r5, [r4, #0]
	dst[1] = val >> 8;
   1a640:	71e2      	strb	r2, [r4, #7]
	sys_put_le16(val >> 16, &dst[2]);
   1a642:	0c2d      	lsrs	r5, r5, #16
	dst[1] = val >> 8;
   1a644:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   1a648:	7223      	strb	r3, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1a64a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1a64c:	70a5      	strb	r5, [r4, #2]
   1a64e:	f884 8004 	strb.w	r8, [r4, #4]
	dst[1] = val >> 8;
   1a652:	0a2d      	lsrs	r5, r5, #8
   1a654:	f3c8 2807 	ubfx	r8, r8, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1a658:	0f3f      	lsrs	r7, r7, #28
	dst[0] = val;
   1a65a:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
   1a65c:	0a1b      	lsrs	r3, r3, #8
   1a65e:	70e5      	strb	r5, [r4, #3]
   1a660:	f884 8005 	strb.w	r8, [r4, #5]
	dst[0] = val;
   1a664:	71a7      	strb	r7, [r4, #6]
	dst[1] = val >> 8;
   1a666:	7262      	strb	r2, [r4, #9]
   1a668:	72e3      	strb	r3, [r4, #11]
	sys_put_le32(bank_addr, &p_data[0]);
	sys_put_le32(page_count, &p_data[4]);
	sys_put_le32(first_blank, &p_data[8]);

	return rc;
}
   1a66a:	4630      	mov	r0, r6
   1a66c:	b002      	add	sp, #8
   1a66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_read += 4096;
   1a672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1a676:	2101      	movs	r1, #1
   1a678:	e7cb      	b.n	1a612 <app_flash_si_slotinfo+0x28>

0001a67a <app_flash_read>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_read(uint32_t offset, uint8_t* p_data, uint32_t length)
{
   1a67a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a67c:	4605      	mov	r5, r0
   1a67e:	460e      	mov	r6, r1
	int rc;
	const struct flash_area* fa;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   1a680:	2005      	movs	r0, #5
   1a682:	a901      	add	r1, sp, #4
{
   1a684:	4617      	mov	r7, r2
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   1a686:	f7f6 f93f 	bl	10908 <flash_area_open>
	if (rc) {
   1a68a:	4604      	mov	r4, r0
   1a68c:	b950      	cbnz	r0, 1a6a4 <app_flash_read+0x2a>
		return rc;
	}

    // TODO: here should check the boundary of flash

	rc = flash_area_read(fa, offset, p_data, length);
   1a68e:	9801      	ldr	r0, [sp, #4]
   1a690:	463b      	mov	r3, r7
   1a692:	4632      	mov	r2, r6
   1a694:	4629      	mov	r1, r5
   1a696:	f000 fb04 	bl	1aca2 <flash_area_read>
	if (rc) {
   1a69a:	4604      	mov	r4, r0
   1a69c:	b910      	cbnz	r0, 1a6a4 <app_flash_read+0x2a>
		return rc;
	}

	flash_area_close(fa);
   1a69e:	9801      	ldr	r0, [sp, #4]
   1a6a0:	f000 fafe 	bl	1aca0 <flash_area_close>

	return rc;
}
   1a6a4:	4620      	mov	r0, r4
   1a6a6:	b003      	add	sp, #12
   1a6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a6aa <app_flash_read_id>:
 * 
 * @return 0: success
 * @return neg: error
 */
int app_flash_read_id(uint32_t offset, uint8_t* p_data, uint32_t length,uint8_t FLASH_ID)
{
   1a6aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a6ac:	4605      	mov	r5, r0
   1a6ae:	460e      	mov	r6, r1
	int rc;
	const struct flash_area* fa;

	rc = flash_area_open(FLASH_ID, &fa);
   1a6b0:	4618      	mov	r0, r3
   1a6b2:	a901      	add	r1, sp, #4
{
   1a6b4:	4617      	mov	r7, r2
	rc = flash_area_open(FLASH_ID, &fa);
   1a6b6:	f7f6 f927 	bl	10908 <flash_area_open>
	if (rc) {
   1a6ba:	4604      	mov	r4, r0
   1a6bc:	b950      	cbnz	r0, 1a6d4 <app_flash_read_id+0x2a>
		return rc;
	}

    // TODO: here should check the boundary of flash

	rc = flash_area_read(fa, offset, p_data, length);
   1a6be:	9801      	ldr	r0, [sp, #4]
   1a6c0:	463b      	mov	r3, r7
   1a6c2:	4632      	mov	r2, r6
   1a6c4:	4629      	mov	r1, r5
   1a6c6:	f000 faec 	bl	1aca2 <flash_area_read>
	if (rc) {
   1a6ca:	4604      	mov	r4, r0
   1a6cc:	b910      	cbnz	r0, 1a6d4 <app_flash_read_id+0x2a>
		return rc;
	}

	flash_area_close(fa);
   1a6ce:	9801      	ldr	r0, [sp, #4]
   1a6d0:	f000 fae6 	bl	1aca0 <flash_area_close>

	return rc;
}
   1a6d4:	4620      	mov	r0, r4
   1a6d6:	b003      	add	sp, #12
   1a6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a6da <app_flash_get_DevInf>:
}

int app_flash_get_DevInf(uint8_t* buffer,uint16_t bufferlength){
	int rc = 0;
	
	if(bufferlength < 6){ //6 -> major minor version = 2 Byte + 4 byte for Available Space
   1a6da:	2905      	cmp	r1, #5
int app_flash_get_DevInf(uint8_t* buffer,uint16_t bufferlength){
   1a6dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a6de:	4605      	mov	r5, r0
	if(bufferlength < 6){ //6 -> major minor version = 2 Byte + 4 byte for Available Space
   1a6e0:	d921      	bls.n	1a726 <app_flash_get_DevInf+0x4c>
	rc = app_flash_read_id(20,Data_bata,2,FLASH_AREA_ID(image_0));//4+4+2+2+4+4 20 21
   1a6e2:	2302      	movs	r3, #2
   1a6e4:	461a      	mov	r2, r3
   1a6e6:	a901      	add	r1, sp, #4
   1a6e8:	2014      	movs	r0, #20
   1a6ea:	f7ff ffde 	bl	1a6aa <app_flash_read_id>
	*minor_fw=Data_bata[0];
   1a6ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1a6f2:	702b      	strb	r3, [r5, #0]
	*major_fw=Data_bata[1];
   1a6f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1a6f8:	706b      	strb	r3, [r5, #1]
	rc = app_flash_read_id(20,Data_bata,2,FLASH_AREA_ID(image_0));//4+4+2+2+4+4 20 21
   1a6fa:	4606      	mov	r6, r0
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   1a6fc:	a901      	add	r1, sp, #4
   1a6fe:	2005      	movs	r0, #5
   1a700:	f7f6 f902 	bl	10908 <flash_area_open>
	if (rc) {
   1a704:	4604      	mov	r4, r0
   1a706:	b918      	cbnz	r0, 1a710 <app_flash_get_DevInf+0x36>
	size = fa->fa_size;
   1a708:	9801      	ldr	r0, [sp, #4]
   1a70a:	6884      	ldr	r4, [r0, #8]
	flash_area_close(fa);
   1a70c:	f000 fac8 	bl	1aca0 <flash_area_close>
   1a710:	f3c4 2307 	ubfx	r3, r4, #8, #8
	dst[0] = val;
   1a714:	70ac      	strb	r4, [r5, #2]
	sys_put_le16(val >> 16, &dst[2]);
   1a716:	0c24      	lsrs	r4, r4, #16
	dst[0] = val;
   1a718:	712c      	strb	r4, [r5, #4]
	dst[1] = val >> 8;
   1a71a:	0a24      	lsrs	r4, r4, #8
   1a71c:	70eb      	strb	r3, [r5, #3]
   1a71e:	716c      	strb	r4, [r5, #5]
	//Retrieve FW Version
	rc = app_flash_fwnum(&buffer[0],&buffer[1]);
	sys_put_le32(app_flash_get_availablesize(),&buffer[2]);

	return rc;
}
   1a720:	4630      	mov	r0, r6
   1a722:	b002      	add	sp, #8
   1a724:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1a726:	f04f 36ff 	mov.w	r6, #4294967295
   1a72a:	e7f9      	b.n	1a720 <app_flash_get_DevInf+0x46>

0001a72c <app_flash_write>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_write(uint32_t offset, uint8_t* p_data, uint32_t length)
{
   1a72c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	const struct flash_area* fa;
	uint8_t  p_last_word[4] = {0xFF, 0xFF, 0xFF, 0xFF};
   1a730:	f04f 33ff 	mov.w	r3, #4294967295
{
   1a734:	4607      	mov	r7, r0
   1a736:	4688      	mov	r8, r1
	uint32_t word_align_len;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   1a738:	2005      	movs	r0, #5
   1a73a:	4669      	mov	r1, sp
{
   1a73c:	4615      	mov	r5, r2
	uint8_t  p_last_word[4] = {0xFF, 0xFF, 0xFF, 0xFF};
   1a73e:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   1a740:	f7f6 f8e2 	bl	10908 <flash_area_open>
	if (rc) {
   1a744:	4604      	mov	r4, r0
   1a746:	b988      	cbnz	r0, 1a76c <app_flash_write+0x40>
		return rc;
	}

	if (length % 4 != 0) {
   1a748:	07ab      	lsls	r3, r5, #30
		word_align_len = length / 4 * 4;
   1a74a:	bf14      	ite	ne
   1a74c:	f025 0603 	bicne.w	r6, r5, #3
   1a750:	462e      	moveq	r6, r5
	}
	else {
		word_align_len = length;
	}

	rc = flash_area_write(fa, offset, p_data, word_align_len);
   1a752:	9800      	ldr	r0, [sp, #0]
   1a754:	4633      	mov	r3, r6
   1a756:	4642      	mov	r2, r8
   1a758:	4639      	mov	r1, r7
   1a75a:	f000 fabe 	bl	1acda <flash_area_write>
	if (rc != 0) {
   1a75e:	4604      	mov	r4, r0
   1a760:	b920      	cbnz	r0, 1a76c <app_flash_write+0x40>
		return rc;
	}

	if (word_align_len < length) {
   1a762:	42ae      	cmp	r6, r5
   1a764:	d306      	bcc.n	1a774 <app_flash_write+0x48>
		if (rc) {
			return rc;
		}
	}

	flash_area_close(fa);
   1a766:	9800      	ldr	r0, [sp, #0]
   1a768:	f000 fa9a 	bl	1aca0 <flash_area_close>

	return rc;
}
   1a76c:	4620      	mov	r0, r4
   1a76e:	b003      	add	sp, #12
   1a770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(p_last_word, &p_data[word_align_len], (length - word_align_len));
   1a774:	2304      	movs	r3, #4
   1a776:	f8dd 9000 	ldr.w	r9, [sp]
   1a77a:	1baa      	subs	r2, r5, r6
   1a77c:	eb08 0106 	add.w	r1, r8, r6
   1a780:	eb0d 0003 	add.w	r0, sp, r3
   1a784:	f001 f9e7 	bl	1bb56 <__memcpy_chk>
		rc = flash_area_write(fa, offset + word_align_len, p_last_word, 4);
   1a788:	2304      	movs	r3, #4
   1a78a:	eb0d 0203 	add.w	r2, sp, r3
   1a78e:	19f1      	adds	r1, r6, r7
   1a790:	4648      	mov	r0, r9
   1a792:	f000 faa2 	bl	1acda <flash_area_write>
		if (rc) {
   1a796:	2800      	cmp	r0, #0
   1a798:	d0e5      	beq.n	1a766 <app_flash_write+0x3a>
   1a79a:	4604      	mov	r4, r0
   1a79c:	e7e6      	b.n	1a76c <app_flash_write+0x40>

0001a79e <app_flash_erase_page>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_erase_page(uint32_t offset, uint32_t count)
{
   1a79e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a7a0:	4606      	mov	r6, r0
   1a7a2:	460d      	mov	r5, r1
	int rc;
	const struct flash_area* fa;
	uint32_t byte_len;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   1a7a4:	2005      	movs	r0, #5
   1a7a6:	a901      	add	r1, sp, #4
   1a7a8:	f7f6 f8ae 	bl	10908 <flash_area_open>
	if (rc) {
   1a7ac:	4604      	mov	r4, r0
   1a7ae:	b960      	cbnz	r0, 1a7ca <app_flash_erase_page+0x2c>
		return rc;
	}

	byte_len = MIN(count * 0x1000, fa->fa_size);
   1a7b0:	9801      	ldr	r0, [sp, #4]
   1a7b2:	6882      	ldr	r2, [r0, #8]
   1a7b4:	032d      	lsls	r5, r5, #12

	rc = flash_area_erase(fa, offset, byte_len);
   1a7b6:	42aa      	cmp	r2, r5
   1a7b8:	bf28      	it	cs
   1a7ba:	462a      	movcs	r2, r5
   1a7bc:	4631      	mov	r1, r6
   1a7be:	f000 fabf 	bl	1ad40 <flash_area_erase>
   1a7c2:	4604      	mov	r4, r0

	flash_area_close(fa);
   1a7c4:	9801      	ldr	r0, [sp, #4]
   1a7c6:	f000 fa6b 	bl	1aca0 <flash_area_close>

	return rc;
}
   1a7ca:	4620      	mov	r0, r4
   1a7cc:	b002      	add	sp, #8
   1a7ce:	bd70      	pop	{r4, r5, r6, pc}

0001a7d0 <app_flash_crc>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_crc(uint32_t offset, uint32_t length, uint32_t* crc32)
{
   1a7d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a7d4:	460c      	mov	r4, r1
	uint8_t *bank_addr;
	uint32_t step = 1024;
	uint32_t crc_val = 0;
	uint32_t i;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   1a7d6:	2005      	movs	r0, #5
   1a7d8:	a901      	add	r1, sp, #4
{
   1a7da:	4617      	mov	r7, r2
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   1a7dc:	f7f6 f894 	bl	10908 <flash_area_open>
	if (rc) {
   1a7e0:	4606      	mov	r6, r0
   1a7e2:	b960      	cbnz	r0, 1a7fe <app_flash_crc+0x2e>
		return rc;
	}

	bank_addr = (uint8_t *)(fa->fa_off);
   1a7e4:	9b01      	ldr	r3, [sp, #4]

	if (length <= step) {
   1a7e6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
	bank_addr = (uint8_t *)(fa->fa_off);
   1a7ea:	6858      	ldr	r0, [r3, #4]
	if (length <= step) {
   1a7ec:	d80b      	bhi.n	1a806 <app_flash_crc+0x36>
		crc_val = crc32_ieee(bank_addr, length);
   1a7ee:	4621      	mov	r1, r4
   1a7f0:	f000 f840 	bl	1a874 <crc32_ieee>

		for (i = 0; i < length / step; i++) {
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, step);
		}
		if (length % step != 0) {
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, length % step);
   1a7f4:	4603      	mov	r3, r0
		}
	}
	*crc32 = crc_val;

	flash_area_close(fa);
   1a7f6:	9801      	ldr	r0, [sp, #4]
	*crc32 = crc_val;
   1a7f8:	603b      	str	r3, [r7, #0]
	flash_area_close(fa);
   1a7fa:	f000 fa51 	bl	1aca0 <flash_area_close>

	return rc;
}
   1a7fe:	4630      	mov	r0, r6
   1a800:	b002      	add	sp, #8
   1a802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a806:	f424 717f 	bic.w	r1, r4, #1020	; 0x3fc
   1a80a:	f021 0103 	bic.w	r1, r1, #3
   1a80e:	4605      	mov	r5, r0
   1a810:	eb00 0801 	add.w	r8, r0, r1
		crc_val = 0;
   1a814:	4633      	mov	r3, r6
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, step);
   1a816:	4629      	mov	r1, r5
   1a818:	4618      	mov	r0, r3
   1a81a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a81e:	f7f4 fcb3 	bl	f188 <crc32_ieee_update>
   1a822:	f505 6580 	add.w	r5, r5, #1024	; 0x400
		for (i = 0; i < length / step; i++) {
   1a826:	45a8      	cmp	r8, r5
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, step);
   1a828:	4603      	mov	r3, r0
		for (i = 0; i < length / step; i++) {
   1a82a:	d1f4      	bne.n	1a816 <app_flash_crc+0x46>
		if (length % step != 0) {
   1a82c:	f3c4 0209 	ubfx	r2, r4, #0, #10
   1a830:	2a00      	cmp	r2, #0
   1a832:	d0e0      	beq.n	1a7f6 <app_flash_crc+0x26>
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, length % step);
   1a834:	4641      	mov	r1, r8
   1a836:	f7f4 fca7 	bl	f188 <crc32_ieee_update>
   1a83a:	e7db      	b.n	1a7f4 <app_flash_crc+0x24>

0001a83c <sys_get_le32>:
	return ((uint16_t)src[1] << 8) | src[0];
   1a83c:	78c3      	ldrb	r3, [r0, #3]
   1a83e:	7882      	ldrb	r2, [r0, #2]
   1a840:	7841      	ldrb	r1, [r0, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a842:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1a846:	7803      	ldrb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a848:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1a84c:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   1a850:	4770      	bx	lr

0001a852 <req_cb_flash_info>:
{
   1a852:	b530      	push	{r4, r5, lr}
   1a854:	b085      	sub	sp, #20
    rc = app_flash_si_slotinfo(p_rsp);
   1a856:	a801      	add	r0, sp, #4
{
   1a858:	4615      	mov	r5, r2
    rc = app_flash_si_slotinfo(p_rsp);
   1a85a:	f7ff fec6 	bl	1a5ea <app_flash_si_slotinfo>
    if (rc == 0) {
   1a85e:	4604      	mov	r4, r0
   1a860:	b928      	cbnz	r0, 1a86e <req_cb_flash_info+0x1c>
        respond(p_rsp, rsp_len);
   1a862:	210c      	movs	r1, #12
   1a864:	a801      	add	r0, sp, #4
        respond(NULL, 0);
   1a866:	47a8      	blx	r5
}
   1a868:	4620      	mov	r0, r4
   1a86a:	b005      	add	sp, #20
   1a86c:	bd30      	pop	{r4, r5, pc}
        respond(NULL, 0);
   1a86e:	2100      	movs	r1, #0
   1a870:	4608      	mov	r0, r1
   1a872:	e7f8      	b.n	1a866 <req_cb_flash_info+0x14>

0001a874 <crc32_ieee>:
{
   1a874:	460a      	mov	r2, r1
	return crc32_ieee_update(0x0, data, len);
   1a876:	4601      	mov	r1, r0
   1a878:	2000      	movs	r0, #0
   1a87a:	f7f4 bc85 	b.w	f188 <crc32_ieee_update>

0001a87e <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
   1a87e:	440a      	add	r2, r1
   1a880:	428a      	cmp	r2, r1
   1a882:	d100      	bne.n	1a886 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
   1a884:	4770      	bx	lr
		seed ^= *src++;
   1a886:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a88a:	ba40      	rev16	r0, r0
   1a88c:	b280      	uxth	r0, r0
   1a88e:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
   1a890:	f3c0 1303 	ubfx	r3, r0, #4, #4
   1a894:	4058      	eors	r0, r3
		seed ^= seed << 12U;
   1a896:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
   1a89a:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
   1a89c:	0158      	lsls	r0, r3, #5
   1a89e:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
   1a8a2:	4058      	eors	r0, r3
	for (; len > 0; len--) {
   1a8a4:	e7ec      	b.n	1a880 <crc16_itu_t+0x2>

0001a8a6 <sys_notify_validate>:
	if (notify == NULL) {
   1a8a6:	4603      	mov	r3, r0
   1a8a8:	b158      	cbz	r0, 1a8c2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a8aa:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a8ac:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1a8b0:	2a01      	cmp	r2, #1
   1a8b2:	d003      	beq.n	1a8bc <sys_notify_validate+0x16>
   1a8b4:	2a03      	cmp	r2, #3
   1a8b6:	d104      	bne.n	1a8c2 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
   1a8b8:	6802      	ldr	r2, [r0, #0]
   1a8ba:	b112      	cbz	r2, 1a8c2 <sys_notify_validate+0x1c>
		notify->result = 0;
   1a8bc:	2000      	movs	r0, #0
   1a8be:	6098      	str	r0, [r3, #8]
   1a8c0:	4770      	bx	lr
		return -EINVAL;
   1a8c2:	f06f 0015 	mvn.w	r0, #21
}
   1a8c6:	4770      	bx	lr

0001a8c8 <arch_printk_char_out>:
}
   1a8c8:	2000      	movs	r0, #0
   1a8ca:	4770      	bx	lr

0001a8cc <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   1a8cc:	b40f      	push	{r0, r1, r2, r3}
   1a8ce:	b507      	push	{r0, r1, r2, lr}
   1a8d0:	a904      	add	r1, sp, #16
   1a8d2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1a8d6:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   1a8d8:	f000 f9a0 	bl	1ac1c <z_log_printk>
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
	}
	va_end(ap);
}
   1a8dc:	b003      	add	sp, #12
   1a8de:	f85d eb04 	ldr.w	lr, [sp], #4
   1a8e2:	b004      	add	sp, #16
   1a8e4:	4770      	bx	lr

0001a8e6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a8e6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1a8e8:	f013 0307 	ands.w	r3, r3, #7
   1a8ec:	d105      	bne.n	1a8fa <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1a8ee:	6803      	ldr	r3, [r0, #0]
   1a8f0:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1a8f2:	bf0c      	ite	eq
   1a8f4:	2000      	moveq	r0, #0
   1a8f6:	2003      	movne	r0, #3
   1a8f8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1a8fa:	2b02      	cmp	r3, #2
   1a8fc:	d105      	bne.n	1a90a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1a8fe:	8bc3      	ldrh	r3, [r0, #30]
   1a900:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1a902:	bf14      	ite	ne
   1a904:	2000      	movne	r0, #0
   1a906:	2004      	moveq	r0, #4
   1a908:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1a90a:	2b01      	cmp	r3, #1
   1a90c:	d105      	bne.n	1a91a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1a90e:	6803      	ldr	r3, [r0, #0]
   1a910:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1a912:	bf0c      	ite	eq
   1a914:	2000      	moveq	r0, #0
   1a916:	2005      	movne	r0, #5
   1a918:	4770      	bx	lr
	int evt = EVT_NOP;
   1a91a:	2000      	movs	r0, #0
}
   1a91c:	4770      	bx	lr

0001a91e <notify_one>:
{
   1a91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a922:	460d      	mov	r5, r1
   1a924:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a926:	4619      	mov	r1, r3
   1a928:	1d28      	adds	r0, r5, #4
{
   1a92a:	4690      	mov	r8, r2
   1a92c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a92e:	f7f4 fc49 	bl	f1c4 <sys_notify_finalize>
	if (cb) {
   1a932:	4604      	mov	r4, r0
   1a934:	b138      	cbz	r0, 1a946 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1a936:	4633      	mov	r3, r6
   1a938:	4642      	mov	r2, r8
   1a93a:	4629      	mov	r1, r5
   1a93c:	4638      	mov	r0, r7
   1a93e:	46a4      	mov	ip, r4
}
   1a940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1a944:	4760      	bx	ip
}
   1a946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a94a <validate_args>:
{
   1a94a:	b510      	push	{r4, lr}
   1a94c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1a94e:	b140      	cbz	r0, 1a962 <validate_args+0x18>
   1a950:	b139      	cbz	r1, 1a962 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1a952:	1d08      	adds	r0, r1, #4
   1a954:	f7ff ffa7 	bl	1a8a6 <sys_notify_validate>
	if ((rv == 0)
   1a958:	b928      	cbnz	r0, 1a966 <validate_args+0x1c>
	    && ((cli->notify.flags
   1a95a:	68a3      	ldr	r3, [r4, #8]
   1a95c:	f033 0303 	bics.w	r3, r3, #3
   1a960:	d001      	beq.n	1a966 <validate_args+0x1c>
		rv = -EINVAL;
   1a962:	f06f 0015 	mvn.w	r0, #21
}
   1a966:	bd10      	pop	{r4, pc}

0001a968 <onoff_manager_init>:
{
   1a968:	b538      	push	{r3, r4, r5, lr}
   1a96a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1a96c:	4605      	mov	r5, r0
   1a96e:	b158      	cbz	r0, 1a988 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1a970:	b151      	cbz	r1, 1a988 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1a972:	680b      	ldr	r3, [r1, #0]
   1a974:	b143      	cbz	r3, 1a988 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1a976:	684b      	ldr	r3, [r1, #4]
   1a978:	b133      	cbz	r3, 1a988 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a97a:	2220      	movs	r2, #32
   1a97c:	2100      	movs	r1, #0
   1a97e:	f001 f8fd 	bl	1bb7c <memset>
   1a982:	612c      	str	r4, [r5, #16]
	return 0;
   1a984:	2000      	movs	r0, #0
}
   1a986:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a988:	f06f 0015 	mvn.w	r0, #21
   1a98c:	e7fb      	b.n	1a986 <onoff_manager_init+0x1e>

0001a98e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1a98e:	4604      	mov	r4, r0
   1a990:	b508      	push	{r3, lr}
   1a992:	4608      	mov	r0, r1
   1a994:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1a996:	461a      	mov	r2, r3
   1a998:	47a0      	blx	r4
	return z_impl_z_current_get();
   1a99a:	f7fd fbfd 	bl	18198 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1a99e:	f7f7 f819 	bl	119d4 <z_impl_k_thread_abort>

0001a9a2 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   1a9a2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1a9a6:	8840      	ldrh	r0, [r0, #2]
}
   1a9a8:	0840      	lsrs	r0, r0, #1
   1a9aa:	4770      	bx	lr

0001a9ac <free_list_add>:
{
   1a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a9ae:	4603      	mov	r3, r0
   1a9b0:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a9b2:	f7ff fff6 	bl	1a9a2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1a9b6:	fab0 f080 	clz	r0, r0
   1a9ba:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1a9be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1a9c2:	00ca      	lsls	r2, r1, #3
   1a9c4:	f8dc 6010 	ldr.w	r6, [ip, #16]
   1a9c8:	1d17      	adds	r7, r2, #4
   1a9ca:	b28d      	uxth	r5, r1
   1a9cc:	3206      	adds	r2, #6
   1a9ce:	b956      	cbnz	r6, 1a9e6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1a9d0:	2101      	movs	r1, #1
   1a9d2:	fa01 f000 	lsl.w	r0, r1, r0
   1a9d6:	68d9      	ldr	r1, [r3, #12]
   1a9d8:	4301      	orrs	r1, r0
   1a9da:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1a9dc:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1a9e0:	53dd      	strh	r5, [r3, r7]
   1a9e2:	529d      	strh	r5, [r3, r2]
}
   1a9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1a9e6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1a9e8:	3104      	adds	r1, #4
   1a9ea:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1a9ec:	53d8      	strh	r0, [r3, r7]
   1a9ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a9f2:	529e      	strh	r6, [r3, r2]
   1a9f4:	80c5      	strh	r5, [r0, #6]
   1a9f6:	525d      	strh	r5, [r3, r1]
   1a9f8:	e7f4      	b.n	1a9e4 <free_list_add+0x38>

0001a9fa <free_list_remove_bidx>:
{
   1a9fa:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1a9fc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1aa00:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1aa02:	4299      	cmp	r1, r3
   1aa04:	f102 0104 	add.w	r1, r2, #4
   1aa08:	d10a      	bne.n	1aa20 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1aa0a:	2301      	movs	r3, #1
   1aa0c:	fa03 f202 	lsl.w	r2, r3, r2
   1aa10:	68c3      	ldr	r3, [r0, #12]
   1aa12:	ea23 0302 	bic.w	r3, r3, r2
   1aa16:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1aa18:	2300      	movs	r3, #0
   1aa1a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1aa1e:	bd10      	pop	{r4, pc}
   1aa20:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1aa22:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1aa26:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1aa2a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1aa2e:	80cb      	strh	r3, [r1, #6]
   1aa30:	8082      	strh	r2, [r0, #4]
}
   1aa32:	e7f4      	b.n	1aa1e <free_list_remove_bidx+0x24>

0001aa34 <free_list_remove>:
{
   1aa34:	b510      	push	{r4, lr}
   1aa36:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1aa38:	f7ff ffb3 	bl	1a9a2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1aa3c:	fab0 f280 	clz	r2, r0
}
   1aa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   1aa44:	f1c2 021f 	rsb	r2, r2, #31
   1aa48:	4618      	mov	r0, r3
   1aa4a:	f7ff bfd6 	b.w	1a9fa <free_list_remove_bidx>

0001aa4e <alloc_chunk>:
{
   1aa4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1aa52:	fab1 f581 	clz	r5, r1
   1aa56:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   1aa5a:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1aa5e:	4603      	mov	r3, r0
	if (b->next) {
   1aa60:	693a      	ldr	r2, [r7, #16]
{
   1aa62:	460e      	mov	r6, r1
	if (b->next) {
   1aa64:	b1ca      	cbz	r2, 1aa9a <alloc_chunk+0x4c>
   1aa66:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   1aa6a:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1aa6c:	4618      	mov	r0, r3
   1aa6e:	4621      	mov	r1, r4
   1aa70:	f7ff ff97 	bl	1a9a2 <chunk_size>
   1aa74:	42b0      	cmp	r0, r6
   1aa76:	d307      	bcc.n	1aa88 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1aa78:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   1aa7a:	4621      	mov	r1, r4
   1aa7c:	4618      	mov	r0, r3
   1aa7e:	f7ff ffbc 	bl	1a9fa <free_list_remove_bidx>
}
   1aa82:	4620      	mov	r0, r4
   1aa84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1aa88:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   1aa8c:	f1b8 0801 	subs.w	r8, r8, #1
   1aa90:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   1aa92:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   1aa94:	d001      	beq.n	1aa9a <alloc_chunk+0x4c>
   1aa96:	428a      	cmp	r2, r1
   1aa98:	d1e7      	bne.n	1aa6a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1aa9a:	68d9      	ldr	r1, [r3, #12]
   1aa9c:	f1c5 0520 	rsb	r5, r5, #32
   1aaa0:	f04f 34ff 	mov.w	r4, #4294967295
   1aaa4:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   1aaa6:	400c      	ands	r4, r1
   1aaa8:	d0eb      	beq.n	1aa82 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1aaaa:	fa94 f2a4 	rbit	r2, r4
   1aaae:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1aab2:	1d11      	adds	r1, r2, #4
   1aab4:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   1aab8:	e7df      	b.n	1aa7a <alloc_chunk+0x2c>

0001aaba <merge_chunks>:
{
   1aaba:	b538      	push	{r3, r4, r5, lr}
   1aabc:	4603      	mov	r3, r0
   1aabe:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1aac0:	f7ff ff6f 	bl	1a9a2 <chunk_size>
   1aac4:	4611      	mov	r1, r2
   1aac6:	4604      	mov	r4, r0
   1aac8:	4618      	mov	r0, r3
   1aaca:	f7ff ff6a 	bl	1a9a2 <chunk_size>
   1aace:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   1aad0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1aad4:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   1aad6:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   1aad8:	4618      	mov	r0, r3
   1aada:	4611      	mov	r1, r2
   1aadc:	f7ff ff61 	bl	1a9a2 <chunk_size>
	void *cmem = &buf[c];
   1aae0:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1aae2:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   1aae6:	bd38      	pop	{r3, r4, r5, pc}

0001aae8 <split_chunks>:
{
   1aae8:	b538      	push	{r3, r4, r5, lr}
   1aaea:	4603      	mov	r3, r0
   1aaec:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1aaee:	f7ff ff58 	bl	1a9a2 <chunk_size>
	chunksz_t lsz = rc - lc;
   1aaf2:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1aaf4:	1aa5      	subs	r5, r4, r2
   1aaf6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1aafa:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1aafc:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1aafe:	8060      	strh	r0, [r4, #2]
   1ab00:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ab04:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1ab06:	8044      	strh	r4, [r0, #2]
   1ab08:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1ab0c:	4618      	mov	r0, r3
   1ab0e:	4611      	mov	r1, r2
   1ab10:	f7ff ff47 	bl	1a9a2 <chunk_size>
	void *cmem = &buf[c];
   1ab14:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1ab16:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   1ab1a:	bd38      	pop	{r3, r4, r5, pc}

0001ab1c <free_chunk>:
{
   1ab1c:	b538      	push	{r3, r4, r5, lr}
   1ab1e:	4605      	mov	r5, r0
   1ab20:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   1ab22:	f7ff ff3e 	bl	1a9a2 <chunk_size>
   1ab26:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1ab28:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ab2c:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1ab2e:	07da      	lsls	r2, r3, #31
   1ab30:	d40a      	bmi.n	1ab48 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1ab32:	4628      	mov	r0, r5
   1ab34:	f7ff ff7e 	bl	1aa34 <free_list_remove>
	return c + chunk_size(h, c);
   1ab38:	4621      	mov	r1, r4
   1ab3a:	4628      	mov	r0, r5
   1ab3c:	f7ff ff31 	bl	1a9a2 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1ab40:	1822      	adds	r2, r4, r0
   1ab42:	4628      	mov	r0, r5
   1ab44:	f7ff ffb9 	bl	1aaba <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1ab48:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1ab4c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1ab4e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ab52:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1ab54:	07db      	lsls	r3, r3, #31
   1ab56:	d40c      	bmi.n	1ab72 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1ab58:	4628      	mov	r0, r5
   1ab5a:	f7ff ff6b 	bl	1aa34 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1ab5e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1ab62:	4622      	mov	r2, r4
   1ab64:	1a61      	subs	r1, r4, r1
   1ab66:	4628      	mov	r0, r5
   1ab68:	f7ff ffa7 	bl	1aaba <merge_chunks>
   1ab6c:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1ab70:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1ab72:	4621      	mov	r1, r4
   1ab74:	4628      	mov	r0, r5
}
   1ab76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1ab7a:	f7ff bf17 	b.w	1a9ac <free_list_add>

0001ab7e <sys_heap_alloc>:
{
   1ab7e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1ab80:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1ab82:	b909      	cbnz	r1, 1ab88 <sys_heap_alloc+0xa>
		return NULL;
   1ab84:	2000      	movs	r0, #0
}
   1ab86:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1ab88:	68ab      	ldr	r3, [r5, #8]
   1ab8a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1ab8e:	d9f9      	bls.n	1ab84 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ab90:	310b      	adds	r1, #11
   1ab92:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1ab94:	4621      	mov	r1, r4
   1ab96:	4628      	mov	r0, r5
   1ab98:	f7ff ff59 	bl	1aa4e <alloc_chunk>
	if (c == 0U) {
   1ab9c:	4606      	mov	r6, r0
   1ab9e:	2800      	cmp	r0, #0
   1aba0:	d0f0      	beq.n	1ab84 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1aba2:	4601      	mov	r1, r0
   1aba4:	4628      	mov	r0, r5
   1aba6:	f7ff fefc 	bl	1a9a2 <chunk_size>
   1abaa:	42a0      	cmp	r0, r4
   1abac:	d908      	bls.n	1abc0 <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   1abae:	4434      	add	r4, r6
   1abb0:	4628      	mov	r0, r5
   1abb2:	4622      	mov	r2, r4
   1abb4:	f7ff ff98 	bl	1aae8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1abb8:	4621      	mov	r1, r4
   1abba:	4628      	mov	r0, r5
   1abbc:	f7ff fef6 	bl	1a9ac <free_list_add>
	void *cmem = &buf[c];
   1abc0:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1abc4:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1abc6:	8853      	ldrh	r3, [r2, #2]
   1abc8:	f043 0301 	orr.w	r3, r3, #1
   1abcc:	8053      	strh	r3, [r2, #2]
   1abce:	3004      	adds	r0, #4
	return chunk_mem(h, c);
   1abd0:	e7d9      	b.n	1ab86 <sys_heap_alloc+0x8>

0001abd2 <outs>:
{
   1abd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abd6:	4607      	mov	r7, r0
   1abd8:	4688      	mov	r8, r1
   1abda:	4615      	mov	r5, r2
   1abdc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1abde:	4614      	mov	r4, r2
   1abe0:	42b4      	cmp	r4, r6
   1abe2:	eba4 0005 	sub.w	r0, r4, r5
   1abe6:	d302      	bcc.n	1abee <outs+0x1c>
   1abe8:	b93e      	cbnz	r6, 1abfa <outs+0x28>
   1abea:	7823      	ldrb	r3, [r4, #0]
   1abec:	b12b      	cbz	r3, 1abfa <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1abee:	f814 0b01 	ldrb.w	r0, [r4], #1
   1abf2:	4641      	mov	r1, r8
   1abf4:	47b8      	blx	r7
		if (rc < 0) {
   1abf6:	2800      	cmp	r0, #0
   1abf8:	daf2      	bge.n	1abe0 <outs+0xe>
}
   1abfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001abfe <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1abfe:	4040      	eors	r0, r0
   1ac00:	f380 8811 	msr	BASEPRI, r0
   1ac04:	f04f 0004 	mov.w	r0, #4
   1ac08:	df02      	svc	2
}
   1ac0a:	4770      	bx	lr

0001ac0c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1ac0c:	4770      	bx	lr

0001ac0e <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1ac0e:	6843      	ldr	r3, [r0, #4]
}
   1ac10:	7958      	ldrb	r0, [r3, #5]
   1ac12:	4770      	bx	lr

0001ac14 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1ac14:	f000 bccb 	b.w	1b5ae <sys_clock_cycle_get_32>

0001ac18 <dummy_timestamp>:
   1ac18:	2000      	movs	r0, #0
   1ac1a:	4770      	bx	lr

0001ac1c <z_log_printk>:
			log_generic(src_level_union.structure, fmt, ap,
   1ac1c:	2300      	movs	r3, #0
{
   1ac1e:	460a      	mov	r2, r1
			log_generic(src_level_union.structure, fmt, ap,
   1ac20:	4601      	mov	r1, r0
   1ac22:	4618      	mov	r0, r3
   1ac24:	f7f5 bb2e 	b.w	10284 <log_generic>

0001ac28 <log_string_sync>:
{
   1ac28:	b40e      	push	{r1, r2, r3}
   1ac2a:	b503      	push	{r0, r1, lr}
   1ac2c:	aa03      	add	r2, sp, #12
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   1ac2e:	2300      	movs	r3, #0
{
   1ac30:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   1ac34:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   1ac36:	f7f5 fb25 	bl	10284 <log_generic>
}
   1ac3a:	b002      	add	sp, #8
   1ac3c:	f85d eb04 	ldr.w	lr, [sp], #4
   1ac40:	b003      	add	sp, #12
   1ac42:	4770      	bx	lr

0001ac44 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1ac44:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   1ac46:	f7f5 fb91 	bl	1036c <log_init>
	}

	return 0;
}
   1ac4a:	2000      	movs	r0, #0
   1ac4c:	bd08      	pop	{r3, pc}

0001ac4e <z_log_strdup>:
}
   1ac4e:	4770      	bx	lr

0001ac50 <z_log_get_tag>:
}
   1ac50:	2000      	movs	r0, #0
   1ac52:	4770      	bx	lr

0001ac54 <out_func>:
{
   1ac54:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   1ac56:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   1ac5a:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   1ac5c:	6852      	ldr	r2, [r2, #4]
   1ac5e:	2101      	movs	r1, #1
   1ac60:	a801      	add	r0, sp, #4
   1ac62:	4798      	blx	r3
}
   1ac64:	2000      	movs	r0, #0
   1ac66:	b003      	add	sp, #12
   1ac68:	f85d fb04 	ldr.w	pc, [sp], #4

0001ac6c <buffer_write>:
{
   1ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac6e:	4606      	mov	r6, r0
   1ac70:	460d      	mov	r5, r1
   1ac72:	4614      	mov	r4, r2
   1ac74:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1ac76:	4621      	mov	r1, r4
   1ac78:	4628      	mov	r0, r5
   1ac7a:	463a      	mov	r2, r7
   1ac7c:	47b0      	blx	r6
	} while (len != 0);
   1ac7e:	1a24      	subs	r4, r4, r0
		buf += processed;
   1ac80:	4405      	add	r5, r0
	} while (len != 0);
   1ac82:	d1f8      	bne.n	1ac76 <buffer_write+0xa>
}
   1ac84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ac86 <log_output_flush>:
		     output->control_block->offset,
   1ac86:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1ac88:	6881      	ldr	r1, [r0, #8]
{
   1ac8a:	b510      	push	{r4, lr}
   1ac8c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1ac8e:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ac92:	6800      	ldr	r0, [r0, #0]
   1ac94:	f7ff ffea 	bl	1ac6c <buffer_write>
	output->control_block->offset = 0;
   1ac98:	6863      	ldr	r3, [r4, #4]
   1ac9a:	2200      	movs	r2, #0
   1ac9c:	601a      	str	r2, [r3, #0]
}
   1ac9e:	bd10      	pop	{r4, pc}

0001aca0 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   1aca0:	4770      	bx	lr

0001aca2 <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   1aca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   1aca6:	1e0c      	subs	r4, r1, #0
   1aca8:	4605      	mov	r5, r0
   1acaa:	4617      	mov	r7, r2
   1acac:	461e      	mov	r6, r3
   1acae:	db10      	blt.n	1acd2 <flash_area_read+0x30>
   1acb0:	6882      	ldr	r2, [r0, #8]
   1acb2:	18e3      	adds	r3, r4, r3
   1acb4:	4293      	cmp	r3, r2
   1acb6:	d80c      	bhi.n	1acd2 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   1acb8:	68c0      	ldr	r0, [r0, #12]
   1acba:	f7fa fee3 	bl	15a84 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   1acbe:	6869      	ldr	r1, [r5, #4]
   1acc0:	4421      	add	r1, r4
   1acc2:	6883      	ldr	r3, [r0, #8]
   1acc4:	681c      	ldr	r4, [r3, #0]
   1acc6:	463a      	mov	r2, r7
   1acc8:	4633      	mov	r3, r6
   1acca:	46a4      	mov	ip, r4
}
   1accc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1acd0:	4760      	bx	ip
   1acd2:	f06f 0015 	mvn.w	r0, #21
   1acd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001acda <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   1acda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1acde:	f1b1 0900 	subs.w	r9, r1, #0
   1ace2:	4680      	mov	r8, r0
   1ace4:	4617      	mov	r7, r2
   1ace6:	461e      	mov	r6, r3
   1ace8:	db27      	blt.n	1ad3a <flash_area_write+0x60>
   1acea:	6882      	ldr	r2, [r0, #8]
   1acec:	444b      	add	r3, r9
   1acee:	4293      	cmp	r3, r2
   1acf0:	d823      	bhi.n	1ad3a <flash_area_write+0x60>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   1acf2:	68c0      	ldr	r0, [r0, #12]
   1acf4:	f7fa fec6 	bl	15a84 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   1acf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1acfc:	4605      	mov	r5, r0
   1acfe:	4489      	add	r9, r1
	const struct flash_driver_api *api =
   1ad00:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (api->write_protection != NULL) {
   1ad04:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1ad08:	b96b      	cbnz	r3, 1ad26 <flash_area_write+0x4c>
	rc = api->write(dev, offset, data, len);
   1ad0a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   1ad0e:	4633      	mov	r3, r6
   1ad10:	463a      	mov	r2, r7
   1ad12:	4649      	mov	r1, r9
   1ad14:	4628      	mov	r0, r5
   1ad16:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   1ad18:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
   1ad1c:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   1ad1e:	b943      	cbnz	r3, 1ad32 <flash_area_write+0x58>

	return rc;
}
   1ad20:	4620      	mov	r0, r4
   1ad22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   1ad26:	2100      	movs	r1, #0
   1ad28:	4798      	blx	r3
		if (rc) {
   1ad2a:	4604      	mov	r4, r0
   1ad2c:	2800      	cmp	r0, #0
   1ad2e:	d0ec      	beq.n	1ad0a <flash_area_write+0x30>
   1ad30:	e7f6      	b.n	1ad20 <flash_area_write+0x46>
		(void) api->write_protection(dev, true);
   1ad32:	2101      	movs	r1, #1
   1ad34:	4628      	mov	r0, r5
   1ad36:	4798      	blx	r3
   1ad38:	e7f2      	b.n	1ad20 <flash_area_write+0x46>
		return -EINVAL;
   1ad3a:	f06f 0415 	mvn.w	r4, #21
   1ad3e:	e7ef      	b.n	1ad20 <flash_area_write+0x46>

0001ad40 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   1ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad44:	1e0c      	subs	r4, r1, #0
   1ad46:	4605      	mov	r5, r0
   1ad48:	4617      	mov	r7, r2
   1ad4a:	db25      	blt.n	1ad98 <flash_area_erase+0x58>
   1ad4c:	18a3      	adds	r3, r4, r2
   1ad4e:	6882      	ldr	r2, [r0, #8]
   1ad50:	4293      	cmp	r3, r2
   1ad52:	d821      	bhi.n	1ad98 <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   1ad54:	68c0      	ldr	r0, [r0, #12]
   1ad56:	f7fa fe95 	bl	15a84 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   1ad5a:	686d      	ldr	r5, [r5, #4]
   1ad5c:	4606      	mov	r6, r0
   1ad5e:	4425      	add	r5, r4
	const struct flash_driver_api *api =
   1ad60:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (api->write_protection != NULL) {
   1ad64:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1ad68:	b963      	cbnz	r3, 1ad84 <flash_area_erase+0x44>
	rc = api->erase(dev, offset, size);
   1ad6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1ad6e:	463a      	mov	r2, r7
   1ad70:	4629      	mov	r1, r5
   1ad72:	4630      	mov	r0, r6
   1ad74:	4798      	blx	r3
	if (api->write_protection != NULL) {
   1ad76:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
   1ad7a:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   1ad7c:	b943      	cbnz	r3, 1ad90 <flash_area_erase+0x50>

	return rc;
}
   1ad7e:	4620      	mov	r0, r4
   1ad80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
   1ad84:	2100      	movs	r1, #0
   1ad86:	4798      	blx	r3
		if (rc) {
   1ad88:	4604      	mov	r4, r0
   1ad8a:	2800      	cmp	r0, #0
   1ad8c:	d0ed      	beq.n	1ad6a <flash_area_erase+0x2a>
   1ad8e:	e7f6      	b.n	1ad7e <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
   1ad90:	2101      	movs	r1, #1
   1ad92:	4630      	mov	r0, r6
   1ad94:	4798      	blx	r3
   1ad96:	e7f2      	b.n	1ad7e <flash_area_erase+0x3e>
		return -EINVAL;
   1ad98:	f06f 0415 	mvn.w	r4, #21
   1ad9c:	e7ef      	b.n	1ad7e <flash_area_erase+0x3e>

0001ad9e <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   1ad9e:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   1ada0:	68c0      	ldr	r0, [r0, #12]
   1ada2:	f7fa fe6f 	bl	15a84 <z_impl_device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   1ada6:	6883      	ldr	r3, [r0, #8]
   1ada8:	691b      	ldr	r3, [r3, #16]
   1adaa:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   1adac:	6800      	ldr	r0, [r0, #0]
   1adae:	bd08      	pop	{r3, pc}

0001adb0 <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   1adb0:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   1adb2:	68c0      	ldr	r0, [r0, #12]
   1adb4:	f7fa fe66 	bl	15a84 <z_impl_device_get_binding>
	return api->get_parameters(dev);
   1adb8:	6883      	ldr	r3, [r0, #8]
   1adba:	691b      	ldr	r3, [r3, #16]
   1adbc:	4798      	blx	r3

	return param->erase_value;
}
   1adbe:	7900      	ldrb	r0, [r0, #4]
   1adc0:	bd08      	pop	{r3, pc}

0001adc2 <flash_get_write_block_size>:

extern size_t z_impl_flash_get_write_block_size(const struct device * dev);

__pinned_func
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   1adc2:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   1adc4:	6883      	ldr	r3, [r0, #8]
   1adc6:	691b      	ldr	r3, [r3, #16]
   1adc8:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   1adca:	6800      	ldr	r0, [r0, #0]
   1adcc:	bd08      	pop	{r3, pc}

0001adce <stream_flash_buffered_write>:
{
   1adce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1add2:	4689      	mov	r9, r1
   1add4:	4616      	mov	r6, r2
   1add6:	4698      	mov	r8, r3
	if (!ctx) {
   1add8:	4604      	mov	r4, r0
   1adda:	b398      	cbz	r0, 1ae44 <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   1addc:	6882      	ldr	r2, [r0, #8]
   1adde:	6903      	ldr	r3, [r0, #16]
   1ade0:	4413      	add	r3, r2
   1ade2:	6982      	ldr	r2, [r0, #24]
   1ade4:	4433      	add	r3, r6
   1ade6:	4293      	cmp	r3, r2
   1ade8:	d830      	bhi.n	1ae4c <stream_flash_buffered_write+0x7e>
	int processed = 0;
   1adea:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   1adec:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
   1adf0:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   1adf4:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
   1adf6:	45ba      	cmp	sl, r7
   1adf8:	d215      	bcs.n	1ae26 <stream_flash_buffered_write+0x58>
	if (processed < len) {
   1adfa:	42b5      	cmp	r5, r6
   1adfc:	d209      	bcs.n	1ae12 <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
   1adfe:	6823      	ldr	r3, [r4, #0]
   1ae00:	4652      	mov	r2, sl
   1ae02:	4418      	add	r0, r3
   1ae04:	eb09 0105 	add.w	r1, r9, r5
   1ae08:	f000 fe97 	bl	1bb3a <memcpy>
		ctx->buf_bytes += len - processed;
   1ae0c:	68a3      	ldr	r3, [r4, #8]
   1ae0e:	4453      	add	r3, sl
   1ae10:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   1ae12:	f1b8 0f00 	cmp.w	r8, #0
   1ae16:	d01c      	beq.n	1ae52 <stream_flash_buffered_write+0x84>
   1ae18:	68a0      	ldr	r0, [r4, #8]
   1ae1a:	b1a8      	cbz	r0, 1ae48 <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
   1ae1c:	4620      	mov	r0, r4
}
   1ae1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
   1ae22:	f7f5 bdf7 	b.w	10a14 <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   1ae26:	6823      	ldr	r3, [r4, #0]
   1ae28:	463a      	mov	r2, r7
   1ae2a:	4418      	add	r0, r3
   1ae2c:	eb09 0105 	add.w	r1, r9, r5
   1ae30:	f000 fe83 	bl	1bb3a <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   1ae34:	6863      	ldr	r3, [r4, #4]
   1ae36:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   1ae38:	4620      	mov	r0, r4
   1ae3a:	f7f5 fdeb 	bl	10a14 <flash_sync>
		if (rc != 0) {
   1ae3e:	b918      	cbnz	r0, 1ae48 <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
   1ae40:	443d      	add	r5, r7
   1ae42:	e7d3      	b.n	1adec <stream_flash_buffered_write+0x1e>
		return -EFAULT;
   1ae44:	f06f 000d 	mvn.w	r0, #13
}
   1ae48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   1ae4c:	f06f 000b 	mvn.w	r0, #11
   1ae50:	e7fa      	b.n	1ae48 <stream_flash_buffered_write+0x7a>
   1ae52:	4640      	mov	r0, r8
   1ae54:	e7f8      	b.n	1ae48 <stream_flash_buffered_write+0x7a>

0001ae56 <stream_flash_bytes_written>:
}
   1ae56:	6900      	ldr	r0, [r0, #16]
   1ae58:	4770      	bx	lr

0001ae5a <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1ae5a:	2200      	movs	r2, #0
   1ae5c:	e9c0 2200 	strd	r2, r2, [r0]
   1ae60:	6082      	str	r2, [r0, #8]
}
   1ae62:	4770      	bx	lr

0001ae64 <abort_function>:
{
   1ae64:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1ae66:	2000      	movs	r0, #0
   1ae68:	f7f5 f9f8 	bl	1025c <sys_reboot>

0001ae6c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1ae6c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1ae6e:	6800      	ldr	r0, [r0, #0]
   1ae70:	f7f6 b906 	b.w	11080 <z_arm_fatal_error>

0001ae74 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1ae74:	2100      	movs	r1, #0
   1ae76:	2001      	movs	r0, #1
   1ae78:	f7f6 b902 	b.w	11080 <z_arm_fatal_error>

0001ae7c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1ae7c:	b508      	push	{r3, lr}
	handler();
   1ae7e:	f7f6 f99d 	bl	111bc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1ae82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1ae86:	f7f6 ba79 	b.w	1137c <z_arm_exc_exit>

0001ae8a <_stdout_hook_default>:
}
   1ae8a:	f04f 30ff 	mov.w	r0, #4294967295
   1ae8e:	4770      	bx	lr

0001ae90 <_stdin_hook_default>:
}
   1ae90:	2000      	movs	r0, #0
   1ae92:	4770      	bx	lr

0001ae94 <_read>:
{
   1ae94:	4608      	mov	r0, r1
   1ae96:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   1ae98:	f7f6 bf16 	b.w	11cc8 <z_impl_zephyr_read_stdin>

0001ae9c <_write>:
{
   1ae9c:	4608      	mov	r0, r1
   1ae9e:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1aea0:	f7f6 bf26 	b.w	11cf0 <z_impl_zephyr_write_stdout>

0001aea4 <_close>:
   1aea4:	f04f 30ff 	mov.w	r0, #4294967295
   1aea8:	4770      	bx	lr

0001aeaa <_lseek>:
}
   1aeaa:	2000      	movs	r0, #0
   1aeac:	4770      	bx	lr

0001aeae <_isatty>:
}
   1aeae:	2802      	cmp	r0, #2
   1aeb0:	bfcc      	ite	gt
   1aeb2:	2000      	movgt	r0, #0
   1aeb4:	2001      	movle	r0, #1
   1aeb6:	4770      	bx	lr

0001aeb8 <_kill>:
}
   1aeb8:	2000      	movs	r0, #0
   1aeba:	4770      	bx	lr

0001aebc <_getpid>:
}
   1aebc:	2000      	movs	r0, #0
   1aebe:	4770      	bx	lr

0001aec0 <_fstat>:
	st->st_mode = S_IFCHR;
   1aec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1aec4:	604b      	str	r3, [r1, #4]
}
   1aec6:	2000      	movs	r0, #0
   1aec8:	4770      	bx	lr

0001aeca <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1aeca:	b084      	sub	sp, #16
   1aecc:	ab04      	add	r3, sp, #16
   1aece:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1aed2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1aed6:	2b06      	cmp	r3, #6
   1aed8:	d108      	bne.n	1aeec <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1aeda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1aede:	2201      	movs	r2, #1
   1aee0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1aee4:	f3bf 8f4f 	dsb	sy
        __WFE();
   1aee8:	bf20      	wfe
    while (true)
   1aeea:	e7fd      	b.n	1aee8 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1aeec:	b004      	add	sp, #16
   1aeee:	4770      	bx	lr

0001aef0 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1aef0:	b084      	sub	sp, #16
   1aef2:	ab04      	add	r3, sp, #16
   1aef4:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1aef8:	2300      	movs	r3, #0
   1aefa:	f383 8811 	msr	BASEPRI, r3
   1aefe:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1af02:	b004      	add	sp, #16
   1af04:	4770      	bx	lr

0001af06 <boot_request_upgrade>:
#endif

}

int boot_request_upgrade(int permanent)
{
   1af06:	b508      	push	{r3, lr}
#ifdef FLASH_AREA_IMAGE_SECONDARY
	int rc;

	rc = boot_set_pending(permanent);
   1af08:	f000 fbe4 	bl	1b6d4 <boot_set_pending>
	if (rc) {
   1af0c:	2800      	cmp	r0, #0
		return -EFAULT;
	}
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}
   1af0e:	bf18      	it	ne
   1af10:	f06f 000d 	mvnne.w	r0, #13
   1af14:	bd08      	pop	{r3, pc}

0001af16 <boot_write_img_confirmed>:

	return flag_val == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   1af16:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   1af18:	f000 fc06 	bl	1b728 <boot_set_confirmed>
	if (rc) {
   1af1c:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   1af1e:	bf18      	it	ne
   1af20:	f06f 0004 	mvnne.w	r0, #4
   1af24:	bd08      	pop	{r3, pc}

0001af26 <set_starting_state>:
{
   1af26:	b510      	push	{r4, lr}
	__asm__ volatile(
   1af28:	f04f 0320 	mov.w	r3, #32
   1af2c:	f3ef 8211 	mrs	r2, BASEPRI
   1af30:	f383 8812 	msr	BASEPRI_MAX, r3
   1af34:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1af38:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1af3a:	f003 0407 	and.w	r4, r3, #7
   1af3e:	2c01      	cmp	r4, #1
   1af40:	d106      	bne.n	1af50 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1af42:	6001      	str	r1, [r0, #0]
	int err = 0;
   1af44:	2000      	movs	r0, #0
	__asm__ volatile(
   1af46:	f382 8811 	msr	BASEPRI, r2
   1af4a:	f3bf 8f6f 	isb	sy
}
   1af4e:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1af50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1af54:	428b      	cmp	r3, r1
		err = -EALREADY;
   1af56:	bf14      	ite	ne
   1af58:	f04f 30ff 	movne.w	r0, #4294967295
   1af5c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1af60:	e7f1      	b.n	1af46 <set_starting_state+0x20>

0001af62 <set_on_state>:
	__asm__ volatile(
   1af62:	f04f 0320 	mov.w	r3, #32
   1af66:	f3ef 8211 	mrs	r2, BASEPRI
   1af6a:	f383 8812 	msr	BASEPRI_MAX, r3
   1af6e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1af72:	6803      	ldr	r3, [r0, #0]
   1af74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1af78:	f043 0302 	orr.w	r3, r3, #2
   1af7c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1af7e:	f382 8811 	msr	BASEPRI, r2
   1af82:	f3bf 8f6f 	isb	sy
}
   1af86:	4770      	bx	lr

0001af88 <onoff_started_callback>:
	return &data->mgr[type];
   1af88:	6900      	ldr	r0, [r0, #16]
   1af8a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1af8c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1af90:	2100      	movs	r1, #0
   1af92:	4710      	bx	r2

0001af94 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1af94:	2000      	movs	r0, #0
   1af96:	f7f9 bd89 	b.w	14aac <nrfx_clock_start>

0001af9a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1af9a:	2000      	movs	r0, #0
   1af9c:	f7f9 bdda 	b.w	14b54 <nrfx_clock_stop>

0001afa0 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1afa0:	2280      	movs	r2, #128	; 0x80
   1afa2:	f7f6 bfe7 	b.w	11f74 <stop>

0001afa6 <blocking_start_callback>:
{
   1afa6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1afa8:	f7fb bb38 	b.w	1661c <z_impl_k_sem_give>

0001afac <api_start>:
{
   1afac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afb0:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1afb2:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1afb4:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1afb6:	434c      	muls	r4, r1
{
   1afb8:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1afba:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1afbe:	2180      	movs	r1, #128	; 0x80
   1afc0:	4428      	add	r0, r5
{
   1afc2:	4690      	mov	r8, r2
   1afc4:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1afc6:	f7ff ffae 	bl	1af26 <set_starting_state>
	if (err < 0) {
   1afca:	2800      	cmp	r0, #0
   1afcc:	db06      	blt.n	1afdc <api_start+0x30>
	subdata->cb = cb;
   1afce:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1afd0:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   1afd4:	6873      	ldr	r3, [r6, #4]
   1afd6:	591b      	ldr	r3, [r3, r4]
   1afd8:	4798      	blx	r3
	return 0;
   1afda:	2000      	movs	r0, #0
}
   1afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001afe0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1afe0:	6843      	ldr	r3, [r0, #4]
   1afe2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1afe4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1afe8:	600b      	str	r3, [r1, #0]
}
   1afea:	2000      	movs	r0, #0
   1afec:	4770      	bx	lr

0001afee <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1afee:	6843      	ldr	r3, [r0, #4]
   1aff0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1aff2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1aff6:	4042      	eors	r2, r0
   1aff8:	400a      	ands	r2, r1
   1affa:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1affc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1b000:	2000      	movs	r0, #0
   1b002:	4770      	bx	lr

0001b004 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b004:	6843      	ldr	r3, [r0, #4]
   1b006:	685b      	ldr	r3, [r3, #4]
}
   1b008:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1b00a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1b00e:	4770      	bx	lr

0001b010 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b010:	6843      	ldr	r3, [r0, #4]
   1b012:	685b      	ldr	r3, [r3, #4]
}
   1b014:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1b016:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1b01a:	4770      	bx	lr

0001b01c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b01c:	6843      	ldr	r3, [r0, #4]
   1b01e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1b020:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1b024:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1b026:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1b02a:	2000      	movs	r0, #0
   1b02c:	4770      	bx	lr

0001b02e <is_regular_addr_valid>:
{
   1b02e:	b538      	push	{r3, r4, r5, lr}
   1b030:	4604      	mov	r4, r0
   1b032:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   1b034:	f000 fc07 	bl	1b846 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1b038:	4284      	cmp	r4, r0
   1b03a:	d209      	bcs.n	1b050 <is_regular_addr_valid+0x22>
   1b03c:	2c00      	cmp	r4, #0
   1b03e:	db07      	blt.n	1b050 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   1b040:	42a8      	cmp	r0, r5
   1b042:	d305      	bcc.n	1b050 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   1b044:	442c      	add	r4, r5
	    len > flash_size ||
   1b046:	4284      	cmp	r4, r0
   1b048:	bf8c      	ite	hi
   1b04a:	2000      	movhi	r0, #0
   1b04c:	2001      	movls	r0, #1
}
   1b04e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1b050:	2000      	movs	r0, #0
   1b052:	e7fc      	b.n	1b04e <is_regular_addr_valid+0x20>

0001b054 <nrf_power_pofcon_set.constprop.0>:
    uint32_t pofcon = p_reg->POFCON;
   1b054:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1b058:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1b05c:	f023 031f 	bic.w	r3, r3, #31
   1b060:	4303      	orrs	r3, r0
    pofcon |=
   1b062:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    p_reg->POFCON = pofcon;
   1b066:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   1b06a:	4770      	bx	lr

0001b06c <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   1b06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b070:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   1b072:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   1b074:	2500      	movs	r5, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   1b076:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
   1b078:	6025      	str	r5, [r4, #0]
{
   1b07a:	460e      	mov	r6, r1
   1b07c:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   1b07e:	4669      	mov	r1, sp
	info->index = 0U;
   1b080:	60a5      	str	r5, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   1b082:	aa01      	add	r2, sp, #4
   1b084:	4798      	blx	r3

	while (layout_size--) {
   1b086:	e9dd 1c00 	ldrd	r1, ip, [sp]
   1b08a:	4628      	mov	r0, r5
		info->size = layout->pages_size;
   1b08c:	f101 0e04 	add.w	lr, r1, #4
	while (layout_size--) {
   1b090:	4560      	cmp	r0, ip
   1b092:	d104      	bne.n	1b09e <flash_get_page_info+0x32>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   1b094:	f06f 0015 	mvn.w	r0, #21
}
   1b098:	b003      	add	sp, #12
   1b09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   1b09e:	f85e 5030 	ldr.w	r5, [lr, r0, lsl #3]
   1b0a2:	68a2      	ldr	r2, [r4, #8]
   1b0a4:	f8d4 9000 	ldr.w	r9, [r4]
   1b0a8:	6065      	str	r5, [r4, #4]
		if (offs == 0) {
   1b0aa:	b986      	cbnz	r6, 1b0ce <flash_get_page_info+0x62>
			index_jmp = index - info->index;
   1b0ac:	1abb      	subs	r3, r7, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   1b0ae:	f851 8030 	ldr.w	r8, [r1, r0, lsl #3]
   1b0b2:	4543      	cmp	r3, r8
   1b0b4:	bf28      	it	cs
   1b0b6:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   1b0b8:	fb03 9505 	mla	r5, r3, r5, r9
		info->index += index_jmp;
   1b0bc:	441a      	add	r2, r3
		if (index_jmp < layout->pages_count) {
   1b0be:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   1b0c0:	6025      	str	r5, [r4, #0]
		info->index += index_jmp;
   1b0c2:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   1b0c4:	f100 0001 	add.w	r0, r0, #1
   1b0c8:	d9e2      	bls.n	1b090 <flash_get_page_info+0x24>
			return 0;
   1b0ca:	2000      	movs	r0, #0
   1b0cc:	e7e4      	b.n	1b098 <flash_get_page_info+0x2c>
			index_jmp = (offs - info->start_offset) / info->size;
   1b0ce:	eba6 0309 	sub.w	r3, r6, r9
   1b0d2:	fbb3 f3f5 	udiv	r3, r3, r5
   1b0d6:	e7ea      	b.n	1b0ae <flash_get_page_info+0x42>

0001b0d8 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   1b0d8:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   1b0da:	2200      	movs	r2, #0
   1b0dc:	f7ff bfc6 	b.w	1b06c <flash_get_page_info>

0001b0e0 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   1b0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   1b0e4:	6883      	ldr	r3, [r0, #8]
{
   1b0e6:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   1b0e8:	695b      	ldr	r3, [r3, #20]
{
   1b0ea:	4688      	mov	r8, r1
   1b0ec:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   1b0ee:	a901      	add	r1, sp, #4
   1b0f0:	aa02      	add	r2, sp, #8
   1b0f2:	4798      	blx	r3
	off_t off = 0;
   1b0f4:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   1b0f6:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   1b0f8:	4625      	mov	r5, r4
   1b0fa:	9b02      	ldr	r3, [sp, #8]
   1b0fc:	42ab      	cmp	r3, r5
   1b0fe:	d802      	bhi.n	1b106 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   1b100:	b006      	add	sp, #24
   1b102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   1b106:	9f01      	ldr	r7, [sp, #4]
   1b108:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   1b10c:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   1b10e:	687b      	ldr	r3, [r7, #4]
   1b110:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   1b112:	683a      	ldr	r2, [r7, #0]
   1b114:	42b2      	cmp	r2, r6
   1b116:	eb0a 0306 	add.w	r3, sl, r6
   1b11a:	d802      	bhi.n	1b122 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   1b11c:	3501      	adds	r5, #1
   1b11e:	469a      	mov	sl, r3
   1b120:	e7eb      	b.n	1b0fa <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   1b122:	4649      	mov	r1, r9
   1b124:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   1b126:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   1b128:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   1b12a:	47c0      	blx	r8
   1b12c:	2800      	cmp	r0, #0
   1b12e:	d0e7      	beq.n	1b100 <flash_page_foreach+0x20>
			off += page_info.size;
   1b130:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   1b132:	3601      	adds	r6, #1
			off += page_info.size;
   1b134:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   1b136:	e7ec      	b.n	1b112 <flash_page_foreach+0x32>

0001b138 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1b138:	6902      	ldr	r2, [r0, #16]
{
   1b13a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1b13c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1b140:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1b144:	2000      	movs	r0, #0
   1b146:	4770      	bx	lr

0001b148 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1b148:	6843      	ldr	r3, [r0, #4]
   1b14a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b14c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1b150:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1b154:	4770      	bx	lr

0001b156 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1b156:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1b158:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b15a:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b15e:	b940      	cbnz	r0, 1b172 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1b160:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b162:	0792      	lsls	r2, r2, #30
   1b164:	d406      	bmi.n	1b174 <is_tx_ready+0x1e>
   1b166:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1b16a:	3800      	subs	r0, #0
   1b16c:	bf18      	it	ne
   1b16e:	2001      	movne	r0, #1
   1b170:	4770      	bx	lr
   1b172:	2001      	movs	r0, #1
}
   1b174:	4770      	bx	lr

0001b176 <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   1b176:	4770      	bx	lr

0001b178 <user_callback>:
	if (data->async->user_callback) {
   1b178:	6903      	ldr	r3, [r0, #16]
   1b17a:	68da      	ldr	r2, [r3, #12]
   1b17c:	6813      	ldr	r3, [r2, #0]
   1b17e:	b10b      	cbz	r3, 1b184 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   1b180:	6852      	ldr	r2, [r2, #4]
   1b182:	4718      	bx	r3
}
   1b184:	4770      	bx	lr

0001b186 <notify_uart_rx_rdy>:
{
   1b186:	b570      	push	{r4, r5, r6, lr}
   1b188:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b18a:	6906      	ldr	r6, [r0, #16]
{
   1b18c:	4604      	mov	r4, r0
   1b18e:	460d      	mov	r5, r1
	struct uart_event evt = {
   1b190:	2214      	movs	r2, #20
   1b192:	2100      	movs	r1, #0
   1b194:	a801      	add	r0, sp, #4
   1b196:	f000 fcf1 	bl	1bb7c <memset>
   1b19a:	2302      	movs	r3, #2
   1b19c:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   1b1a0:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   1b1a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1b1a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1b1a6:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   1b1a8:	a901      	add	r1, sp, #4
   1b1aa:	4620      	mov	r0, r4
	struct uart_event evt = {
   1b1ac:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   1b1b0:	f7ff ffe2 	bl	1b178 <user_callback>
}
   1b1b4:	b006      	add	sp, #24
   1b1b6:	bd70      	pop	{r4, r5, r6, pc}

0001b1b8 <notify_rx_buf_release>:
{
   1b1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
   1b1ba:	680f      	ldr	r7, [r1, #0]
{
   1b1bc:	b087      	sub	sp, #28
   1b1be:	4606      	mov	r6, r0
   1b1c0:	460c      	mov	r4, r1
   1b1c2:	4615      	mov	r5, r2
	if (*buf) {
   1b1c4:	b187      	cbz	r7, 1b1e8 <notify_rx_buf_release+0x30>
		struct uart_event evt = {
   1b1c6:	2100      	movs	r1, #0
   1b1c8:	2214      	movs	r2, #20
   1b1ca:	a801      	add	r0, sp, #4
   1b1cc:	f000 fcd6 	bl	1bb7c <memset>
   1b1d0:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   1b1d2:	eb0d 0103 	add.w	r1, sp, r3
   1b1d6:	4630      	mov	r0, r6
		struct uart_event evt = {
   1b1d8:	f88d 3004 	strb.w	r3, [sp, #4]
   1b1dc:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   1b1de:	f7ff ffcb 	bl	1b178 <user_callback>
		if (clear) {
   1b1e2:	b10d      	cbz	r5, 1b1e8 <notify_rx_buf_release+0x30>
			*buf = NULL;
   1b1e4:	2300      	movs	r3, #0
   1b1e6:	6023      	str	r3, [r4, #0]
}
   1b1e8:	b007      	add	sp, #28
   1b1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b1ec <notify_rx_disable>:
{
   1b1ec:	b510      	push	{r4, lr}
   1b1ee:	b086      	sub	sp, #24
   1b1f0:	4604      	mov	r4, r0
	struct uart_event evt = {
   1b1f2:	2214      	movs	r2, #20
   1b1f4:	2100      	movs	r1, #0
   1b1f6:	a801      	add	r0, sp, #4
   1b1f8:	f000 fcc0 	bl	1bb7c <memset>
   1b1fc:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   1b1fe:	a901      	add	r1, sp, #4
   1b200:	4620      	mov	r0, r4
	struct uart_event evt = {
   1b202:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   1b206:	f7ff ffb7 	bl	1b178 <user_callback>
}
   1b20a:	b006      	add	sp, #24
   1b20c:	bd10      	pop	{r4, pc}

0001b20e <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   1b20e:	6843      	ldr	r3, [r0, #4]
{
   1b210:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   1b212:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b214:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   1b216:	f04f 0020 	mov.w	r0, #32
   1b21a:	f3ef 8511 	mrs	r5, BASEPRI
   1b21e:	f380 8812 	msr	BASEPRI_MAX, r0
   1b222:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   1b226:	68e4      	ldr	r4, [r4, #12]
   1b228:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1b22a:	b190      	cbz	r0, 1b252 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   1b22c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   1b22e:	b998      	cbnz	r0, 1b258 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   1b230:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b234:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b238:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   1b23c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1b240:	f042 0220 	orr.w	r2, r2, #32
   1b244:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   1b248:	f385 8811 	msr	BASEPRI, r5
   1b24c:	f3bf 8f6f 	isb	sy
}
   1b250:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   1b252:	f06f 000c 	mvn.w	r0, #12
   1b256:	e7f7      	b.n	1b248 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   1b258:	f06f 000f 	mvn.w	r0, #15
   1b25c:	e7f4      	b.n	1b248 <uarte_nrfx_rx_buf_rsp+0x3a>

0001b25e <uarte_nrfx_callback_set>:
	if (!data->async) {
   1b25e:	6903      	ldr	r3, [r0, #16]
   1b260:	68db      	ldr	r3, [r3, #12]
   1b262:	b11b      	cbz	r3, 1b26c <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
   1b264:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   1b268:	2000      	movs	r0, #0
   1b26a:	4770      	bx	lr
		return -ENOTSUP;
   1b26c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1b270:	4770      	bx	lr

0001b272 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1b272:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1b274:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   1b276:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   1b278:	681b      	ldr	r3, [r3, #0]
{
   1b27a:	b510      	push	{r4, lr}
	if (data->async) {
   1b27c:	b958      	cbnz	r0, 1b296 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b27e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1b282:	b15c      	cbz	r4, 1b29c <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   1b284:	7d52      	ldrb	r2, [r2, #21]
   1b286:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b288:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1b28c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b290:	2201      	movs	r2, #1
   1b292:	601a      	str	r2, [r3, #0]
}
   1b294:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   1b296:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b29a:	e7fb      	b.n	1b294 <uarte_nrfx_poll_in+0x22>
		return -1;
   1b29c:	f04f 30ff 	mov.w	r0, #4294967295
   1b2a0:	e7f8      	b.n	1b294 <uarte_nrfx_poll_in+0x22>

0001b2a2 <uarte_enable>:
{
   1b2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b2a4:	6907      	ldr	r7, [r0, #16]
	if (data->async) {
   1b2a6:	68fb      	ldr	r3, [r7, #12]
{
   1b2a8:	4604      	mov	r4, r0
	if (data->async) {
   1b2aa:	b92b      	cbnz	r3, 1b2b8 <uarte_enable+0x16>
	return config->uarte_regs;
   1b2ac:	6863      	ldr	r3, [r4, #4]
   1b2ae:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b2b0:	2208      	movs	r2, #8
   1b2b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1b2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bool disabled = data->async->low_power_mask == 0;
   1b2b8:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
   1b2bc:	6846      	ldr	r6, [r0, #4]
		data->async->low_power_mask |= mask;
   1b2be:	4329      	orrs	r1, r5
   1b2c0:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
		if (hw_rx_counting_enabled(data) && disabled) {
   1b2c4:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
   1b2c8:	2b00      	cmp	r3, #0
   1b2ca:	d0ef      	beq.n	1b2ac <uarte_enable+0xa>
   1b2cc:	2d00      	cmp	r5, #0
   1b2ce:	d1ed      	bne.n	1b2ac <uarte_enable+0xa>
			const nrfx_timer_t *timer = &get_dev_config(dev)->timer;
   1b2d0:	3620      	adds	r6, #32
			nrfx_timer_enable(timer);
   1b2d2:	4630      	mov	r0, r6
   1b2d4:	f7fa fa0c 	bl	156f0 <nrfx_timer_enable>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   1b2d8:	68fb      	ldr	r3, [r7, #12]
   1b2da:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
   1b2de:	42ab      	cmp	r3, r5
   1b2e0:	dde4      	ble.n	1b2ac <uarte_enable+0xa>
				nrfx_timer_increment(timer);
   1b2e2:	4630      	mov	r0, r6
   1b2e4:	f7fa fa8c 	bl	15800 <nrfx_timer_increment>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   1b2e8:	3501      	adds	r5, #1
   1b2ea:	e7f5      	b.n	1b2d8 <uarte_enable+0x36>

0001b2ec <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1b2ec:	6843      	ldr	r3, [r0, #4]
{
   1b2ee:	b510      	push	{r4, lr}
	return config->uarte_regs;
   1b2f0:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b2f2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b2f6:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b2fa:	2200      	movs	r2, #0
   1b2fc:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   1b300:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   1b304:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b308:	685b      	ldr	r3, [r3, #4]
   1b30a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
   1b30e:	06db      	lsls	r3, r3, #27
   1b310:	d506      	bpl.n	1b320 <tx_start+0x34>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1b312:	2101      	movs	r1, #1
   1b314:	f7ff ffc5 	bl	1b2a2 <uarte_enable>
    p_reg->INTENSET = mask;
   1b318:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1b31c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b320:	2301      	movs	r3, #1
   1b322:	60a3      	str	r3, [r4, #8]
}
   1b324:	bd10      	pop	{r4, pc}

0001b326 <rx_timeout>:
{
   1b326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   1b328:	6b45      	ldr	r5, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   1b32a:	68eb      	ldr	r3, [r5, #12]
   1b32c:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
   1b330:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   1b334:	2a00      	cmp	r2, #0
   1b336:	d134      	bne.n	1b3a2 <rx_timeout+0x7c>
	const struct device *dev = data->dev;
   1b338:	682e      	ldr	r6, [r5, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   1b33a:	6870      	ldr	r0, [r6, #4]
	return config->uarte_regs;
   1b33c:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   1b33e:	2110      	movs	r1, #16
   1b340:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	if (hw_rx_counting_enabled(data)) {
   1b344:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
   1b348:	b302      	cbz	r2, 1b38c <rx_timeout+0x66>
		read = nrfx_timer_capture(&cfg->timer, 0);
   1b34a:	4639      	mov	r1, r7
   1b34c:	3020      	adds	r0, #32
   1b34e:	f7fa fa89 	bl	15864 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   1b352:	68eb      	ldr	r3, [r5, #12]
   1b354:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1b356:	4282      	cmp	r2, r0
		data->async->rx_total_byte_cnt = read;
   1b358:	bf1e      	ittt	ne
   1b35a:	6758      	strne	r0, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
   1b35c:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
   1b35e:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
   1b362:	e9d3 401d 	ldrd	r4, r0, [r3, #116]	; 0x74
	if (!hw_rx_counting_enabled(data) &&
   1b366:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
		    - data->async->rx_total_user_byte_cnt;
   1b36a:	1a24      	subs	r4, r4, r0
	if (!hw_rx_counting_enabled(data) &&
   1b36c:	b922      	cbnz	r2, 1b378 <rx_timeout+0x52>
   1b36e:	2c00      	cmp	r4, #0
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   1b370:	bfbc      	itt	lt
   1b372:	f8c3 00c0 	strlt.w	r0, [r3, #192]	; 0xc0
		len = 0;
   1b376:	4614      	movlt	r4, r2
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   1b378:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
   1b37c:	18a0      	adds	r0, r4, r2
   1b37e:	4288      	cmp	r0, r1
   1b380:	d910      	bls.n	1b3a4 <rx_timeout+0x7e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   1b382:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   1b384:	2c00      	cmp	r4, #0
   1b386:	dd07      	ble.n	1b398 <rx_timeout+0x72>
		clipped = true;
   1b388:	2701      	movs	r7, #1
   1b38a:	e011      	b.n	1b3b0 <rx_timeout+0x8a>
		read = data->async->rx_cnt.cnt;
   1b38c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
   1b390:	e7df      	b.n	1b352 <rx_timeout+0x2c>
			data->async->rx_timeout_left -=
   1b392:	1a52      	subs	r2, r2, r1
   1b394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
   1b398:	6873      	ldr	r3, [r6, #4]
   1b39a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1b39c:	2210      	movs	r2, #16
   1b39e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   1b3a4:	2c00      	cmp	r4, #0
   1b3a6:	ddf7      	ble.n	1b398 <rx_timeout+0x72>
				< data->async->rx_timeout_slab)) {
   1b3a8:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
   1b3ac:	428a      	cmp	r2, r1
   1b3ae:	daf0      	bge.n	1b392 <rx_timeout+0x6c>
			notify_uart_rx_rdy(dev, len);
   1b3b0:	4621      	mov	r1, r4
   1b3b2:	4630      	mov	r0, r6
   1b3b4:	f7ff fee7 	bl	1b186 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   1b3b8:	68e8      	ldr	r0, [r5, #12]
   1b3ba:	6e83      	ldr	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   1b3bc:	6f81      	ldr	r1, [r0, #120]	; 0x78
			data->async->rx_offset += len;
   1b3be:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   1b3c0:	4421      	add	r1, r4
			data->async->rx_offset += len;
   1b3c2:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   1b3c4:	6781      	str	r1, [r0, #120]	; 0x78
		if (clipped) {
   1b3c6:	2f00      	cmp	r7, #0
   1b3c8:	d0e6      	beq.n	1b398 <rx_timeout+0x72>
	z_impl_k_timer_stop(timer);
   1b3ca:	3088      	adds	r0, #136	; 0x88
   1b3cc:	f000 fb76 	bl	1babc <z_impl_k_timer_stop>
}
   1b3d0:	e7e2      	b.n	1b398 <rx_timeout+0x72>

0001b3d2 <start_tx_locked.isra.0>:
static void start_tx_locked(const struct device *dev, struct uarte_nrfx_data *data)
   1b3d2:	b510      	push	{r4, lr}
   1b3d4:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   1b3d6:	f7ff febe 	bl	1b156 <is_tx_ready>
   1b3da:	680b      	ldr	r3, [r1, #0]
   1b3dc:	b918      	cbnz	r0, 1b3e6 <start_tx_locked.isra.0+0x14>
		data->async->pending_tx = true;
   1b3de:	2201      	movs	r2, #1
   1b3e0:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
   1b3e4:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   1b3e6:	2200      	movs	r2, #0
   1b3e8:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
   1b3ec:	f04f 32ff 	mov.w	r2, #4294967295
   1b3f0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   1b3f4:	4620      	mov	r0, r4
   1b3f6:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
   1b3fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   1b3fe:	f7ff bf75 	b.w	1b2ec <tx_start>

0001b402 <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   1b402:	68c2      	ldr	r2, [r0, #12]
   1b404:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
   1b406:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
   1b408:	b508      	push	{r3, lr}
   1b40a:	4603      	mov	r3, r0
	if (!remaining) {
   1b40c:	d00b      	beq.n	1b426 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
   1b40e:	2a08      	cmp	r2, #8
   1b410:	bf28      	it	cs
   1b412:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   1b414:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
   1b416:	3018      	adds	r0, #24
   1b418:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   1b41a:	689b      	ldr	r3, [r3, #8]
   1b41c:	4419      	add	r1, r3
   1b41e:	f000 fb8c 	bl	1bb3a <memcpy>
	return true;
   1b422:	2001      	movs	r0, #1
}
   1b424:	bd08      	pop	{r3, pc}
		return false;
   1b426:	4610      	mov	r0, r2
   1b428:	e7fc      	b.n	1b424 <setup_tx_cache.isra.0+0x22>

0001b42a <rx_flush>:
	return config->uarte_regs;
   1b42a:	6843      	ldr	r3, [r0, #4]
{
   1b42c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   1b42e:	681c      	ldr	r4, [r3, #0]
{
   1b430:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
   1b432:	f8d4 653c 	ldr.w	r6, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   1b436:	460b      	mov	r3, r1
   1b438:	bb31      	cbnz	r1, 1b488 <rx_flush+0x5e>
   1b43a:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   1b43c:	466a      	mov	r2, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b43e:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b442:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   1b444:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b448:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   1b44c:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b450:	2101      	movs	r1, #1
   1b452:	62e1      	str	r1, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b454:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1b458:	2900      	cmp	r1, #0
   1b45a:	d0fb      	beq.n	1b454 <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b45c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   1b460:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   1b464:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (!buf) {
   1b468:	b913      	cbnz	r3, 1b470 <rx_flush+0x46>
			return rx_amount;
   1b46a:	b2c0      	uxtb	r0, r0
}
   1b46c:	b002      	add	sp, #8
   1b46e:	bd70      	pop	{r4, r5, r6, pc}
	if (rx_amount != prev_rx_amount) {
   1b470:	4286      	cmp	r6, r0
   1b472:	d1fa      	bne.n	1b46a <rx_flush+0x40>
   1b474:	441d      	add	r5, r3
	for (int i = 0; i < flush_len; i++) {
   1b476:	429d      	cmp	r5, r3
   1b478:	d101      	bne.n	1b47e <rx_flush+0x54>
	return 0;
   1b47a:	2000      	movs	r0, #0
   1b47c:	e7f6      	b.n	1b46c <rx_flush+0x42>
		if (buf[i] != dirty) {
   1b47e:	f813 2b01 	ldrb.w	r2, [r3], #1
   1b482:	2a00      	cmp	r2, #0
   1b484:	d0f7      	beq.n	1b476 <rx_flush+0x4c>
   1b486:	e7f0      	b.n	1b46a <rx_flush+0x40>
__ssp_bos_icheck3(memset, void *, int)
   1b488:	4618      	mov	r0, r3
   1b48a:	2100      	movs	r1, #0
   1b48c:	f000 fb76 	bl	1bb7c <memset>
   1b490:	4603      	mov	r3, r0
   1b492:	4602      	mov	r2, r0
   1b494:	e7d3      	b.n	1b43e <rx_flush+0x14>

0001b496 <async_uart_release>:
{
   1b496:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b498:	6903      	ldr	r3, [r0, #16]
{
   1b49a:	4604      	mov	r4, r0
	__asm__ volatile(
   1b49c:	f04f 0220 	mov.w	r2, #32
   1b4a0:	f3ef 8611 	mrs	r6, BASEPRI
   1b4a4:	f382 8812 	msr	BASEPRI_MAX, r2
   1b4a8:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   1b4ac:	68dd      	ldr	r5, [r3, #12]
   1b4ae:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   1b4b2:	ea23 0301 	bic.w	r3, r3, r1
   1b4b6:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
   1b4ba:	b9db      	cbnz	r3, 1b4f4 <async_uart_release+0x5e>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   1b4bc:	2902      	cmp	r1, #2
   1b4be:	d106      	bne.n	1b4ce <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
   1b4c0:	2205      	movs	r2, #5
   1b4c2:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
   1b4c6:	f7ff ffb0 	bl	1b42a <rx_flush>
			data->async->rx_flush_cnt =
   1b4ca:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b4ce:	6925      	ldr	r5, [r4, #16]
	if (data->async && hw_rx_counting_enabled(data)) {
   1b4d0:	68eb      	ldr	r3, [r5, #12]
   1b4d2:	b153      	cbz	r3, 1b4ea <async_uart_release+0x54>
   1b4d4:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
   1b4d8:	b13b      	cbz	r3, 1b4ea <async_uart_release+0x54>
		nrfx_timer_disable(&get_dev_config(dev)->timer);
   1b4da:	6860      	ldr	r0, [r4, #4]
   1b4dc:	3020      	adds	r0, #32
   1b4de:	f7fa f92d 	bl	1573c <nrfx_timer_disable>
		data->async->rx_total_byte_cnt = 0;
   1b4e2:	68eb      	ldr	r3, [r5, #12]
   1b4e4:	2200      	movs	r2, #0
		data->async->rx_total_user_byte_cnt = 0;
   1b4e6:	e9c3 221d 	strd	r2, r2, [r3, #116]	; 0x74
	return config->uarte_regs;
   1b4ea:	6863      	ldr	r3, [r4, #4]
   1b4ec:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b4ee:	2200      	movs	r2, #0
   1b4f0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1b4f4:	f386 8811 	msr	BASEPRI, r6
   1b4f8:	f3bf 8f6f 	isb	sy
}
   1b4fc:	bd70      	pop	{r4, r5, r6, pc}

0001b4fe <uarte_nrfx_tx_abort>:
{
   1b4fe:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1b500:	6843      	ldr	r3, [r0, #4]
   1b502:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
   1b504:	6903      	ldr	r3, [r0, #16]
   1b506:	68d8      	ldr	r0, [r3, #12]
   1b508:	6883      	ldr	r3, [r0, #8]
   1b50a:	b14b      	cbz	r3, 1b520 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
   1b50c:	2400      	movs	r4, #0
   1b50e:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
   1b512:	3028      	adds	r0, #40	; 0x28
   1b514:	f000 fad2 	bl	1babc <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b518:	2301      	movs	r3, #1
   1b51a:	60eb      	str	r3, [r5, #12]
	return 0;
   1b51c:	4620      	mov	r0, r4
}
   1b51e:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   1b520:	f06f 000d 	mvn.w	r0, #13
   1b524:	e7fb      	b.n	1b51e <uarte_nrfx_tx_abort+0x20>

0001b526 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   1b526:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1b528:	6818      	ldr	r0, [r3, #0]
   1b52a:	f7ff bfe8 	b.w	1b4fe <uarte_nrfx_tx_abort>

0001b52e <uarte_nrfx_rx_disable>:
{
   1b52e:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b530:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   1b532:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   1b534:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   1b536:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   1b538:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1b53a:	b1b3      	cbz	r3, 1b56a <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   1b53c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1b53e:	b153      	cbz	r3, 1b556 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   1b540:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   1b544:	f023 0320 	bic.w	r3, r3, #32
   1b548:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b54c:	2300      	movs	r3, #0
   1b54e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   1b552:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1b556:	3088      	adds	r0, #136	; 0x88
   1b558:	f000 fab0 	bl	1babc <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   1b55c:	68eb      	ldr	r3, [r5, #12]
   1b55e:	2000      	movs	r0, #0
   1b560:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b564:	2301      	movs	r3, #1
   1b566:	6063      	str	r3, [r4, #4]
}
   1b568:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   1b56a:	f06f 000d 	mvn.w	r0, #13
   1b56e:	e7fb      	b.n	1b568 <uarte_nrfx_rx_disable+0x3a>

0001b570 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1b570:	b510      	push	{r4, lr}
   1b572:	2200      	movs	r2, #0
   1b574:	4604      	mov	r4, r0
   1b576:	2101      	movs	r1, #1
   1b578:	2002      	movs	r0, #2
   1b57a:	f7f5 fdeb 	bl	11154 <z_arm_irq_priority_set>
   1b57e:	2002      	movs	r0, #2
   1b580:	f7f5 fdb6 	bl	110f0 <arch_irq_enable>
   1b584:	4620      	mov	r0, r4
   1b586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b58a:	f7f7 be47 	b.w	1321c <uarte_instance_init.isra.0>

0001b58e <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1b58e:	b510      	push	{r4, lr}
   1b590:	2200      	movs	r2, #0
   1b592:	4604      	mov	r4, r0
   1b594:	2101      	movs	r1, #1
   1b596:	2028      	movs	r0, #40	; 0x28
   1b598:	f7f5 fddc 	bl	11154 <z_arm_irq_priority_set>
   1b59c:	2028      	movs	r0, #40	; 0x28
   1b59e:	f7f5 fda7 	bl	110f0 <arch_irq_enable>
   1b5a2:	4620      	mov	r0, r4
   1b5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b5a8:	f7f7 be38 	b.w	1321c <uarte_instance_init.isra.0>

0001b5ac <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1b5ac:	4770      	bx	lr

0001b5ae <sys_clock_cycle_get_32>:
{
   1b5ae:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1b5b0:	f7f8 f84a 	bl	13648 <z_nrf_rtc_timer_read>
}
   1b5b4:	bd08      	pop	{r3, pc}

0001b5b6 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1b5b6:	ea41 0300 	orr.w	r3, r1, r0
   1b5ba:	f033 030f 	bics.w	r3, r3, #15
   1b5be:	d101      	bne.n	1b5c4 <dk_set_leds_state+0xe>
   1b5c0:	f7f8 bb30 	b.w	13c24 <dk_set_leds_state.part.0>
}
   1b5c4:	f06f 0015 	mvn.w	r0, #21
   1b5c8:	4770      	bx	lr

0001b5ca <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   1b5ca:	210f      	movs	r1, #15
   1b5cc:	f7ff bff3 	b.w	1b5b6 <dk_set_leds_state>

0001b5d0 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   1b5d0:	f7fd bd2e 	b.w	19030 <nrf_cc3xx_platform_init_no_rng>

0001b5d4 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1b5d4:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1b5d6:	f7f5 fc6b 	bl	10eb0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1b5da:	f7f5 fd1d 	bl	11018 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1b5de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   1b5e2:	f7fd bd25 	b.w	19030 <nrf_cc3xx_platform_init_no_rng>

0001b5e6 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
   1b5e6:	b538      	push	{r3, r4, r5, lr}
   1b5e8:	460c      	mov	r4, r1
   1b5ea:	4615      	mov	r5, r2
   1b5ec:	4425      	add	r5, r4
    erased_val = flash_area_erased_val(area);
   1b5ee:	f7ff fbdf 	bl	1adb0 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   1b5f2:	4621      	mov	r1, r4
   1b5f4:	42a9      	cmp	r1, r5
   1b5f6:	d101      	bne.n	1b5fc <bootutil_buffer_is_erased.part.0+0x16>
    return true;
   1b5f8:	2001      	movs	r0, #1
}
   1b5fa:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
   1b5fc:	f811 3b01 	ldrb.w	r3, [r1], #1
   1b600:	4298      	cmp	r0, r3
   1b602:	d0f7      	beq.n	1b5f4 <bootutil_buffer_is_erased.part.0+0xe>
            return false;
   1b604:	2000      	movs	r0, #0
   1b606:	e7f8      	b.n	1b5fa <bootutil_buffer_is_erased.part.0+0x14>

0001b608 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   1b608:	b111      	cbz	r1, 1b610 <bootutil_buffer_is_erased+0x8>
   1b60a:	b10a      	cbz	r2, 1b610 <bootutil_buffer_is_erased+0x8>
   1b60c:	f7ff bfeb 	b.w	1b5e6 <bootutil_buffer_is_erased.part.0>
}
   1b610:	2000      	movs	r0, #0
   1b612:	4770      	bx	lr

0001b614 <boot_read_flag>:
{
   1b614:	b538      	push	{r3, r4, r5, lr}
   1b616:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   1b618:	2301      	movs	r3, #1
{
   1b61a:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   1b61c:	4622      	mov	r2, r4
{
   1b61e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   1b620:	f7ff fb3f 	bl	1aca2 <flash_area_read>
    if (rc < 0) {
   1b624:	2800      	cmp	r0, #0
   1b626:	db10      	blt.n	1b64a <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   1b628:	2201      	movs	r2, #1
   1b62a:	4621      	mov	r1, r4
   1b62c:	4628      	mov	r0, r5
   1b62e:	f7ff ffeb 	bl	1b608 <bootutil_buffer_is_erased>
   1b632:	b118      	cbz	r0, 1b63c <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   1b634:	2303      	movs	r3, #3
   1b636:	7023      	strb	r3, [r4, #0]
    return 0;
   1b638:	2000      	movs	r0, #0
}
   1b63a:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
   1b63c:	7823      	ldrb	r3, [r4, #0]
   1b63e:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
   1b640:	bf0c      	ite	eq
   1b642:	2301      	moveq	r3, #1
   1b644:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
   1b646:	7023      	strb	r3, [r4, #0]
   1b648:	e7f7      	b.n	1b63a <boot_read_flag+0x26>
        return BOOT_EFLASH;
   1b64a:	2001      	movs	r0, #1
   1b64c:	e7f5      	b.n	1b63a <boot_read_flag+0x26>

0001b64e <boot_write_trailer>:
{
   1b64e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b652:	461d      	mov	r5, r3
   1b654:	4606      	mov	r6, r0
   1b656:	460f      	mov	r7, r1
   1b658:	4690      	mov	r8, r2
    align = flash_area_align(fap);
   1b65a:	f7ff fba0 	bl	1ad9e <flash_area_align>
   1b65e:	b2c3      	uxtb	r3, r0
    align = (inlen + align - 1) & ~(align - 1);
   1b660:	fa55 f480 	uxtab	r4, r5, r0
   1b664:	3c01      	subs	r4, #1
   1b666:	425b      	negs	r3, r3
   1b668:	401c      	ands	r4, r3
   1b66a:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
   1b66c:	2c08      	cmp	r4, #8
   1b66e:	d81b      	bhi.n	1b6a8 <boot_write_trailer+0x5a>
    erased_val = flash_area_erased_val(fap);
   1b670:	4630      	mov	r0, r6
   1b672:	f7ff fb9d 	bl	1adb0 <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
   1b676:	2308      	movs	r3, #8
    erased_val = flash_area_erased_val(fap);
   1b678:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   1b67a:	462a      	mov	r2, r5
   1b67c:	4641      	mov	r1, r8
   1b67e:	4668      	mov	r0, sp
   1b680:	f000 fa69 	bl	1bb56 <__memcpy_chk>
   1b684:	1b62      	subs	r2, r4, r5
   1b686:	4649      	mov	r1, r9
   1b688:	eb0d 0005 	add.w	r0, sp, r5
   1b68c:	f000 fa76 	bl	1bb7c <memset>
    rc = flash_area_write(fap, off, buf, align);
   1b690:	4623      	mov	r3, r4
   1b692:	466a      	mov	r2, sp
   1b694:	4639      	mov	r1, r7
   1b696:	4630      	mov	r0, r6
   1b698:	f7ff fb1f 	bl	1acda <flash_area_write>
    if (rc != 0) {
   1b69c:	3800      	subs	r0, #0
   1b69e:	bf18      	it	ne
   1b6a0:	2001      	movne	r0, #1
}
   1b6a2:	b003      	add	sp, #12
   1b6a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   1b6a8:	f04f 30ff 	mov.w	r0, #4294967295
   1b6ac:	e7f9      	b.n	1b6a2 <boot_write_trailer+0x54>

0001b6ae <boot_write_trailer_flag>:
{
   1b6ae:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
   1b6b0:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
   1b6b2:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   1b6b6:	aa01      	add	r2, sp, #4
   1b6b8:	f7ff ffc9 	bl	1b64e <boot_write_trailer>
}
   1b6bc:	b003      	add	sp, #12
   1b6be:	f85d fb04 	ldr.w	pc, [sp], #4

0001b6c2 <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
   1b6c2:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   1b6c4:	2201      	movs	r2, #1
   1b6c6:	3918      	subs	r1, #24
   1b6c8:	f7ff bff1 	b.w	1b6ae <boot_write_trailer_flag>

0001b6cc <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
   1b6cc:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   1b6ce:	3a18      	subs	r2, #24
   1b6d0:	f7ff bfa0 	b.w	1b614 <boot_read_flag>

0001b6d4 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   1b6d4:	4601      	mov	r1, r0
    return boot_set_pending_multi(0, permanent);
   1b6d6:	2000      	movs	r0, #0
   1b6d8:	f7f8 bfd4 	b.w	14684 <boot_set_pending_multi>

0001b6dc <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   1b6dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap = NULL;
   1b6de:	2300      	movs	r3, #0
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   1b6e0:	a901      	add	r1, sp, #4
   1b6e2:	2002      	movs	r0, #2
    const struct flash_area *fap = NULL;
   1b6e4:	9301      	str	r3, [sp, #4]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   1b6e6:	f7f5 f90f 	bl	10908 <flash_area_open>
    if (rc != 0) {
   1b6ea:	b9d8      	cbnz	r0, 1b724 <boot_set_confirmed_multi+0x48>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_primary_slot);
   1b6ec:	9801      	ldr	r0, [sp, #4]
   1b6ee:	a902      	add	r1, sp, #8
   1b6f0:	f7f8 ff54 	bl	1459c <boot_read_swap_state>
    if (rc != 0) {
   1b6f4:	4604      	mov	r4, r0
   1b6f6:	b968      	cbnz	r0, 1b714 <boot_set_confirmed_multi+0x38>
        goto done;
    }

    switch (state_primary_slot.magic) {
   1b6f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b6fc:	2b02      	cmp	r3, #2
   1b6fe:	d00f      	beq.n	1b720 <boot_set_confirmed_multi+0x44>
   1b700:	2b03      	cmp	r3, #3
   1b702:	d007      	beq.n	1b714 <boot_set_confirmed_multi+0x38>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   1b704:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1b708:	2b03      	cmp	r3, #3
   1b70a:	d103      	bne.n	1b714 <boot_set_confirmed_multi+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   1b70c:	9801      	ldr	r0, [sp, #4]
   1b70e:	f7ff ffd8 	bl	1b6c2 <boot_write_image_ok>
   1b712:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   1b714:	9801      	ldr	r0, [sp, #4]
   1b716:	f7ff fac3 	bl	1aca0 <flash_area_close>
    return rc;
}
   1b71a:	4620      	mov	r0, r4
   1b71c:	b004      	add	sp, #16
   1b71e:	bd10      	pop	{r4, pc}
    switch (state_primary_slot.magic) {
   1b720:	2404      	movs	r4, #4
   1b722:	e7f7      	b.n	1b714 <boot_set_confirmed_multi+0x38>
        return BOOT_EFLASH;
   1b724:	2401      	movs	r4, #1
   1b726:	e7f8      	b.n	1b71a <boot_set_confirmed_multi+0x3e>

0001b728 <boot_set_confirmed>:
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
    return boot_set_confirmed_multi(0);
   1b728:	2000      	movs	r0, #0
   1b72a:	f7ff bfd7 	b.w	1b6dc <boot_set_confirmed_multi>

0001b72e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1b72e:	4700      	bx	r0

0001b730 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1b730:	f000 b98b 	b.w	1ba4a <z_impl_k_busy_wait>

0001b734 <nrfx_flag32_is_allocated>:
    return (mask & NRFX_BIT(bitpos)) ? false : true;
   1b734:	40c8      	lsrs	r0, r1
   1b736:	43c0      	mvns	r0, r0
}
   1b738:	f000 0001 	and.w	r0, r0, #1
   1b73c:	4770      	bx	lr

0001b73e <nrf_gpio_pin_present_check>:
    switch (port)
   1b73e:	0943      	lsrs	r3, r0, #5
   1b740:	d00b      	beq.n	1b75a <nrf_gpio_pin_present_check+0x1c>
   1b742:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   1b744:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b748:	bf18      	it	ne
   1b74a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   1b74c:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b750:	fa23 f000 	lsr.w	r0, r3, r0
}
   1b754:	f000 0001 	and.w	r0, r0, #1
   1b758:	4770      	bx	lr
    switch (port)
   1b75a:	f04f 33ff 	mov.w	r3, #4294967295
   1b75e:	e7f5      	b.n	1b74c <nrf_gpio_pin_present_check+0xe>

0001b760 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1b760:	0080      	lsls	r0, r0, #2
}
   1b762:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1b766:	4770      	bx	lr

0001b768 <nrf_gpio_reconfigure>:
{
   1b768:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b76c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b76e:	a801      	add	r0, sp, #4
{
   1b770:	460e      	mov	r6, r1
   1b772:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   1b776:	4690      	mov	r8, r2
   1b778:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b77a:	f7f9 fb13 	bl	14da4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1b77e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1b780:	f1b8 0f00 	cmp.w	r8, #0
   1b784:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1b788:	bf14      	ite	ne
   1b78a:	2302      	movne	r3, #2
   1b78c:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1b78e:	2e00      	cmp	r6, #0
   1b790:	bf18      	it	ne
   1b792:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1b796:	2d00      	cmp	r5, #0
   1b798:	bf14      	ite	ne
   1b79a:	210c      	movne	r1, #12
   1b79c:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1b79e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1b7a0:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1b7a4:	bf14      	ite	ne
   1b7a6:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   1b7aa:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1b7ac:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1b7ae:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1b7b2:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1b7b6:	bf14      	ite	ne
   1b7b8:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   1b7bc:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1b7be:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   1b7c0:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1b7c4:	b106      	cbz	r6, 1b7c8 <nrf_gpio_reconfigure+0x60>
   1b7c6:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1b7c8:	f1b8 0f00 	cmp.w	r8, #0
   1b7cc:	d003      	beq.n	1b7d6 <nrf_gpio_reconfigure+0x6e>
   1b7ce:	f898 8000 	ldrb.w	r8, [r8]
   1b7d2:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1b7d6:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1b7d8:	b10d      	cbz	r5, 1b7de <nrf_gpio_reconfigure+0x76>
   1b7da:	782d      	ldrb	r5, [r5, #0]
   1b7dc:	00ad      	lsls	r5, r5, #2
   1b7de:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1b7e2:	b10c      	cbz	r4, 1b7e8 <nrf_gpio_reconfigure+0x80>
   1b7e4:	7822      	ldrb	r2, [r4, #0]
   1b7e6:	0214      	lsls	r4, r2, #8
   1b7e8:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1b7ea:	b10f      	cbz	r7, 1b7f0 <nrf_gpio_reconfigure+0x88>
   1b7ec:	783f      	ldrb	r7, [r7, #0]
   1b7ee:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1b7f0:	432c      	orrs	r4, r5
   1b7f2:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   1b7f4:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   1b7f8:	b002      	add	sp, #8
   1b7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b7fe <nrf_gpio_cfg_sense_set>:
{
   1b7fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1b800:	f10d 030f 	add.w	r3, sp, #15
   1b804:	9301      	str	r3, [sp, #4]
   1b806:	2300      	movs	r3, #0
{
   1b808:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1b80c:	9300      	str	r3, [sp, #0]
   1b80e:	461a      	mov	r2, r3
   1b810:	4619      	mov	r1, r3
   1b812:	f7ff ffa9 	bl	1b768 <nrf_gpio_reconfigure>
}
   1b816:	b005      	add	sp, #20
   1b818:	f85d fb04 	ldr.w	pc, [sp], #4

0001b81c <is_valid_address>:
{
   1b81c:	4603      	mov	r3, r0
   1b81e:	4608      	mov	r0, r1
   1b820:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1b824:	b510      	push	{r4, lr}
   1b826:	690c      	ldr	r4, [r1, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   1b828:	694a      	ldr	r2, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   1b82a:	4362      	muls	r2, r4
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1b82c:	4293      	cmp	r3, r2
   1b82e:	d308      	bcc.n	1b842 <is_valid_address+0x26>
    if (uicr_allowed &&
   1b830:	b130      	cbz	r0, 1b840 <is_valid_address+0x24>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   1b832:	f1a3 2010 	sub.w	r0, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   1b836:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
   1b83a:	bf2c      	ite	cs
   1b83c:	2000      	movcs	r0, #0
   1b83e:	2001      	movcc	r0, #1
}
   1b840:	bd10      	pop	{r4, pc}
        return true;
   1b842:	2001      	movs	r0, #1
   1b844:	e7fc      	b.n	1b840 <is_valid_address+0x24>

0001b846 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   1b846:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b84a:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   1b84c:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   1b84e:	4350      	muls	r0, r2
   1b850:	4770      	bx	lr

0001b852 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   1b852:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b856:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   1b858:	4770      	bx	lr

0001b85a <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   1b85a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b85e:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   1b860:	4770      	bx	lr

0001b862 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1b862:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1b864:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   1b866:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1b868:	bf9d      	ittte	ls
   1b86a:	6882      	ldrls	r2, [r0, #8]
   1b86c:	18d2      	addls	r2, r2, r3
   1b86e:	f102 32ff 	addls.w	r2, r2, #4294967295
    r = RdOff - WrOff - 1u;
   1b872:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1b876:	bf94      	ite	ls
   1b878:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   1b87a:	1a58      	subhi	r0, r3, r1
}
   1b87c:	4770      	bx	lr

0001b87e <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b87e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b882:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1b884:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
   1b888:	6867      	ldr	r7, [r4, #4]
   1b88a:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   1b88e:	4296      	cmp	r6, r2
   1b890:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b894:	4689      	mov	r9, r1
  if (Rem > NumBytes) {
   1b896:	4438      	add	r0, r7
   1b898:	d904      	bls.n	1b8a4 <_WriteNoCheck+0x26>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b89a:	f000 f94e 	bl	1bb3a <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1b89e:	60e5      	str	r5, [r4, #12]
}
   1b8a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b8a4:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   1b8a6:	eba5 0508 	sub.w	r5, r5, r8
   1b8aa:	f000 f946 	bl	1bb3a <memcpy>
   1b8ae:	6860      	ldr	r0, [r4, #4]
   1b8b0:	462a      	mov	r2, r5
   1b8b2:	eb09 0106 	add.w	r1, r9, r6
   1b8b6:	e7f0      	b.n	1b89a <_WriteNoCheck+0x1c>

0001b8b8 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1b8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1b8bc:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1b8be:	4606      	mov	r6, r0
   1b8c0:	4689      	mov	r9, r1
   1b8c2:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1b8c4:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1b8c8:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   1b8ca:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1b8cc:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1b8ce:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1b8d0:	bf28      	it	cs
   1b8d2:	18e4      	addcs	r4, r4, r3
   1b8d4:	3c01      	subs	r4, #1
   1b8d6:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1b8d8:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1b8da:	42bc      	cmp	r4, r7
   1b8dc:	bf28      	it	cs
   1b8de:	463c      	movcs	r4, r7
   1b8e0:	4294      	cmp	r4, r2
   1b8e2:	bf28      	it	cs
   1b8e4:	4614      	movcs	r4, r2
   1b8e6:	4649      	mov	r1, r9
   1b8e8:	4428      	add	r0, r5
   1b8ea:	4622      	mov	r2, r4
   1b8ec:	f000 f925 	bl	1bb3a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1b8f0:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1b8f2:	4425      	add	r5, r4
      WrOff = 0u;
   1b8f4:	42ab      	cmp	r3, r5
   1b8f6:	bf08      	it	eq
   1b8f8:	2500      	moveq	r5, #0
  } while (NumBytes);
   1b8fa:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1b8fc:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1b8fe:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1b900:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1b902:	d1e1      	bne.n	1b8c8 <_WriteBlocking+0x10>
}
   1b904:	4640      	mov	r0, r8
   1b906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b90a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1b90a:	f7f9 bfe1 	b.w	158d0 <_DoInit>

0001b90e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1b90e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1b910:	f7ff fffb 	bl	1b90a <SEGGER_RTT_Init>

	return 0;
}
   1b914:	2000      	movs	r0, #0
   1b916:	bd08      	pop	{r3, pc}

0001b918 <z_device_state_init>:
}
   1b918:	4770      	bx	lr

0001b91a <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1b91a:	b138      	cbz	r0, 1b92c <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1b91c:	68c3      	ldr	r3, [r0, #12]
   1b91e:	8818      	ldrh	r0, [r3, #0]
   1b920:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1b924:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1b928:	4258      	negs	r0, r3
   1b92a:	4158      	adcs	r0, r3
}
   1b92c:	4770      	bx	lr

0001b92e <k_mem_slab_init>:
{
   1b92e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1b930:	2400      	movs	r4, #0
   1b932:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   1b934:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b936:	ea41 0402 	orr.w	r4, r1, r2
   1b93a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1b93e:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   1b942:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b944:	d10c      	bne.n	1b960 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   1b946:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b948:	42a3      	cmp	r3, r4
   1b94a:	d103      	bne.n	1b954 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
   1b94c:	e9c0 0000 	strd	r0, r0, [r0]
}
   1b950:	2000      	movs	r0, #0
}
   1b952:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1b954:	6985      	ldr	r5, [r0, #24]
   1b956:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b958:	3401      	adds	r4, #1
		slab->free_list = p;
   1b95a:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   1b95c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1b95e:	e7f3      	b.n	1b948 <k_mem_slab_init+0x1a>
		return -EINVAL;
   1b960:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1b964:	e7f5      	b.n	1b952 <k_mem_slab_init+0x24>

0001b966 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b966:	f3ef 8005 	mrs	r0, IPSR
}
   1b96a:	3800      	subs	r0, #0
   1b96c:	bf18      	it	ne
   1b96e:	2001      	movne	r0, #1
   1b970:	4770      	bx	lr

0001b972 <z_impl_k_thread_name_set>:
}
   1b972:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1b976:	4770      	bx	lr

0001b978 <k_thread_name_get>:
}
   1b978:	2000      	movs	r0, #0
   1b97a:	4770      	bx	lr

0001b97c <z_impl_k_thread_start>:
	z_sched_start(thread);
   1b97c:	f7fb bebe 	b.w	176fc <z_sched_start>

0001b980 <z_pm_save_idle_exit>:
{
   1b980:	b508      	push	{r3, lr}
	pm_system_resume();
   1b982:	f7f5 f9d1 	bl	10d28 <pm_system_resume>
}
   1b986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1b98a:	f7ff be0f 	b.w	1b5ac <sys_clock_idle_exit>

0001b98e <z_impl_k_mutex_init>:
{
   1b98e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1b990:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   1b992:	e9c3 0002 	strd	r0, r0, [r3, #8]
   1b996:	e9c3 3300 	strd	r3, r3, [r3]
}
   1b99a:	4770      	bx	lr

0001b99c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1b99c:	b13a      	cbz	r2, 1b9ae <z_impl_k_sem_init+0x12>
   1b99e:	428a      	cmp	r2, r1
   1b9a0:	d305      	bcc.n	1b9ae <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   1b9a2:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1b9a6:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   1b9aa:	2000      	movs	r0, #0
   1b9ac:	4770      	bx	lr
		return -EINVAL;
   1b9ae:	f06f 0015 	mvn.w	r0, #21
}
   1b9b2:	4770      	bx	lr

0001b9b4 <notify_queue_locked>:
	if (queue != NULL) {
   1b9b4:	b120      	cbz	r0, 1b9c0 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1b9b6:	2200      	movs	r2, #0
   1b9b8:	4611      	mov	r1, r2
   1b9ba:	3088      	adds	r0, #136	; 0x88
   1b9bc:	f7fc bcb6 	b.w	1832c <z_sched_wake>
}
   1b9c0:	4770      	bx	lr

0001b9c2 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   1b9c2:	68c3      	ldr	r3, [r0, #12]
{
   1b9c4:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   1b9c6:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   1b9ca:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1b9ce:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1b9d0:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1b9d2:	d502      	bpl.n	1b9da <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1b9d4:	3010      	adds	r0, #16
   1b9d6:	f7fc fe51 	bl	1867c <z_abort_timeout>
}
   1b9da:	4620      	mov	r0, r4
   1b9dc:	bd10      	pop	{r4, pc}

0001b9de <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b9de:	4603      	mov	r3, r0
   1b9e0:	b920      	cbnz	r0, 1b9ec <z_reschedule_irqlock+0xe>
   1b9e2:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1b9e6:	b90a      	cbnz	r2, 1b9ec <z_reschedule_irqlock+0xe>
   1b9e8:	f7f5 bc08 	b.w	111fc <arch_swap>
   1b9ec:	f383 8811 	msr	BASEPRI, r3
   1b9f0:	f3bf 8f6f 	isb	sy
}
   1b9f4:	4770      	bx	lr

0001b9f6 <z_reschedule_unlocked>:
	__asm__ volatile(
   1b9f6:	f04f 0320 	mov.w	r3, #32
   1b9fa:	f3ef 8011 	mrs	r0, BASEPRI
   1b9fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba02:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ba06:	f7ff bfea 	b.w	1b9de <z_reschedule_irqlock>

0001ba0a <z_priq_dumb_best>:
{
   1ba0a:	4603      	mov	r3, r0
	return list->head == list;
   1ba0c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba0e:	4283      	cmp	r3, r0
   1ba10:	d003      	beq.n	1ba1a <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1ba12:	2800      	cmp	r0, #0
   1ba14:	bf38      	it	cc
   1ba16:	2000      	movcc	r0, #0
   1ba18:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1ba1a:	2000      	movs	r0, #0
}
   1ba1c:	4770      	bx	lr

0001ba1e <z_unpend_all>:
{
   1ba1e:	b538      	push	{r3, r4, r5, lr}
   1ba20:	4605      	mov	r5, r0
	int need_sched = 0;
   1ba22:	2000      	movs	r0, #0
	return list->head == list;
   1ba24:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba26:	42a5      	cmp	r5, r4
   1ba28:	d000      	beq.n	1ba2c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ba2a:	b904      	cbnz	r4, 1ba2e <z_unpend_all+0x10>
}
   1ba2c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1ba2e:	4620      	mov	r0, r4
   1ba30:	f7fb fc78 	bl	17324 <z_unpend_thread>
		z_ready_thread(thread);
   1ba34:	4620      	mov	r0, r4
   1ba36:	f7fb fe19 	bl	1766c <z_ready_thread>
		need_sched = 1;
   1ba3a:	2001      	movs	r0, #1
   1ba3c:	e7f2      	b.n	1ba24 <z_unpend_all+0x6>

0001ba3e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1ba3e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1ba40:	f7fc ffce 	bl	189e0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1ba44:	bd08      	pop	{r3, pc}

0001ba46 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1ba46:	f7fc bfcb 	b.w	189e0 <sys_clock_tick_get>

0001ba4a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1ba4a:	b108      	cbz	r0, 1ba50 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1ba4c:	f7f6 ba44 	b.w	11ed8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1ba50:	4770      	bx	lr

0001ba52 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   1ba52:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ba54:	1c4b      	adds	r3, r1, #1
   1ba56:	bf08      	it	eq
   1ba58:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1ba5c:	4604      	mov	r4, r0
   1ba5e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ba60:	d013      	beq.n	1ba8a <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ba62:	ea54 0105 	orrs.w	r1, r4, r5
   1ba66:	d103      	bne.n	1ba70 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1ba68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1ba6c:	f7fc bfb8 	b.w	189e0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1ba70:	f06f 0101 	mvn.w	r1, #1
   1ba74:	1a0a      	subs	r2, r1, r0
   1ba76:	f04f 31ff 	mov.w	r1, #4294967295
   1ba7a:	eb61 0305 	sbc.w	r3, r1, r5
   1ba7e:	2a00      	cmp	r2, #0
   1ba80:	f173 0100 	sbcs.w	r1, r3, #0
   1ba84:	db02      	blt.n	1ba8c <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   1ba86:	4610      	mov	r0, r2
   1ba88:	4619      	mov	r1, r3
}
   1ba8a:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   1ba8c:	f7fc ffa8 	bl	189e0 <sys_clock_tick_get>
   1ba90:	2c01      	cmp	r4, #1
   1ba92:	f175 0300 	sbcs.w	r3, r5, #0
   1ba96:	bfbc      	itt	lt
   1ba98:	2401      	movlt	r4, #1
   1ba9a:	2500      	movlt	r5, #0
   1ba9c:	1820      	adds	r0, r4, r0
   1ba9e:	eb45 0101 	adc.w	r1, r5, r1
   1baa2:	e7f2      	b.n	1ba8a <sys_clock_timeout_end_calc+0x38>

0001baa4 <k_timer_init>:
	timer->status = 0U;
   1baa4:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1baa6:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   1baaa:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1baae:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1bab2:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1bab6:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1bab8:	6343      	str	r3, [r0, #52]	; 0x34
}
   1baba:	4770      	bx	lr

0001babc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1babc:	b510      	push	{r4, lr}
   1babe:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1bac0:	f7fc fddc 	bl	1867c <z_abort_timeout>

	if (inactive) {
   1bac4:	b9b0      	cbnz	r0, 1baf4 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1bac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bac8:	b10b      	cbz	r3, 1bace <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1baca:	4620      	mov	r0, r4
   1bacc:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1bace:	f104 0018 	add.w	r0, r4, #24
   1bad2:	f7fc f92f 	bl	17d34 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1bad6:	b168      	cbz	r0, 1baf4 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1bad8:	f7fb fdc8 	bl	1766c <z_ready_thread>
   1badc:	f04f 0320 	mov.w	r3, #32
   1bae0:	f3ef 8011 	mrs	r0, BASEPRI
   1bae4:	f383 8812 	msr	BASEPRI_MAX, r3
   1bae8:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1baec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1baf0:	f7ff bf75 	b.w	1b9de <z_reschedule_irqlock>
   1baf4:	bd10      	pop	{r4, pc}

0001baf6 <k_free>:
	if (ptr != NULL) {
   1baf6:	b120      	cbz	r0, 1bb02 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1baf8:	1f01      	subs	r1, r0, #4
   1bafa:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1bafe:	f7fd ba29 	b.w	18f54 <k_heap_free>
}
   1bb02:	4770      	bx	lr

0001bb04 <k_malloc>:

void *k_malloc(size_t size)
{
   1bb04:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_malloc, _SYSTEM_HEAP);

	void *ret = k_aligned_alloc(sizeof(void *), size);
   1bb06:	2004      	movs	r0, #4
   1bb08:	f7fd b904 	b.w	18d14 <k_aligned_alloc>

0001bb0c <k_heap_init>:
{
   1bb0c:	b410      	push	{r4}
   1bb0e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1bb12:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1bb16:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1bb18:	f7f3 bf0e 	b.w	f938 <sys_heap_init>

0001bb1c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1bb1c:	4770      	bx	lr

0001bb1e <memcmp>:
   1bb1e:	b530      	push	{r4, r5, lr}
   1bb20:	3901      	subs	r1, #1
   1bb22:	2400      	movs	r4, #0
   1bb24:	42a2      	cmp	r2, r4
   1bb26:	d101      	bne.n	1bb2c <memcmp+0xe>
   1bb28:	2000      	movs	r0, #0
   1bb2a:	e005      	b.n	1bb38 <memcmp+0x1a>
   1bb2c:	5d03      	ldrb	r3, [r0, r4]
   1bb2e:	3401      	adds	r4, #1
   1bb30:	5d0d      	ldrb	r5, [r1, r4]
   1bb32:	42ab      	cmp	r3, r5
   1bb34:	d0f6      	beq.n	1bb24 <memcmp+0x6>
   1bb36:	1b58      	subs	r0, r3, r5
   1bb38:	bd30      	pop	{r4, r5, pc}

0001bb3a <memcpy>:
   1bb3a:	440a      	add	r2, r1
   1bb3c:	4291      	cmp	r1, r2
   1bb3e:	f100 33ff 	add.w	r3, r0, #4294967295
   1bb42:	d100      	bne.n	1bb46 <memcpy+0xc>
   1bb44:	4770      	bx	lr
   1bb46:	b510      	push	{r4, lr}
   1bb48:	f811 4b01 	ldrb.w	r4, [r1], #1
   1bb4c:	f803 4f01 	strb.w	r4, [r3, #1]!
   1bb50:	4291      	cmp	r1, r2
   1bb52:	d1f9      	bne.n	1bb48 <memcpy+0xe>
   1bb54:	bd10      	pop	{r4, pc}

0001bb56 <__memcpy_chk>:
   1bb56:	429a      	cmp	r2, r3
   1bb58:	b508      	push	{r3, lr}
   1bb5a:	d901      	bls.n	1bb60 <__memcpy_chk+0xa>
   1bb5c:	f7f6 f966 	bl	11e2c <__chk_fail>
   1bb60:	4281      	cmp	r1, r0
   1bb62:	d804      	bhi.n	1bb6e <__memcpy_chk+0x18>
   1bb64:	188b      	adds	r3, r1, r2
   1bb66:	4298      	cmp	r0, r3
   1bb68:	d3f8      	bcc.n	1bb5c <__memcpy_chk+0x6>
   1bb6a:	4281      	cmp	r1, r0
   1bb6c:	d102      	bne.n	1bb74 <__memcpy_chk+0x1e>
   1bb6e:	1883      	adds	r3, r0, r2
   1bb70:	4299      	cmp	r1, r3
   1bb72:	d3f3      	bcc.n	1bb5c <__memcpy_chk+0x6>
   1bb74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1bb78:	f7ff bfdf 	b.w	1bb3a <memcpy>

0001bb7c <memset>:
   1bb7c:	4402      	add	r2, r0
   1bb7e:	4603      	mov	r3, r0
   1bb80:	4293      	cmp	r3, r2
   1bb82:	d100      	bne.n	1bb86 <memset+0xa>
   1bb84:	4770      	bx	lr
   1bb86:	f803 1b01 	strb.w	r1, [r3], #1
   1bb8a:	e7f9      	b.n	1bb80 <memset+0x4>

0001bb8c <__sfputc_r>:
   1bb8c:	6893      	ldr	r3, [r2, #8]
   1bb8e:	3b01      	subs	r3, #1
   1bb90:	2b00      	cmp	r3, #0
   1bb92:	b410      	push	{r4}
   1bb94:	6093      	str	r3, [r2, #8]
   1bb96:	da07      	bge.n	1bba8 <__sfputc_r+0x1c>
   1bb98:	6994      	ldr	r4, [r2, #24]
   1bb9a:	42a3      	cmp	r3, r4
   1bb9c:	db01      	blt.n	1bba2 <__sfputc_r+0x16>
   1bb9e:	290a      	cmp	r1, #10
   1bba0:	d102      	bne.n	1bba8 <__sfputc_r+0x1c>
   1bba2:	bc10      	pop	{r4}
   1bba4:	f7fe b994 	b.w	19ed0 <__swbuf_r>
   1bba8:	6813      	ldr	r3, [r2, #0]
   1bbaa:	1c58      	adds	r0, r3, #1
   1bbac:	6010      	str	r0, [r2, #0]
   1bbae:	7019      	strb	r1, [r3, #0]
   1bbb0:	4608      	mov	r0, r1
   1bbb2:	bc10      	pop	{r4}
   1bbb4:	4770      	bx	lr

0001bbb6 <__sfputs_r>:
   1bbb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbb8:	4606      	mov	r6, r0
   1bbba:	460f      	mov	r7, r1
   1bbbc:	4614      	mov	r4, r2
   1bbbe:	18d5      	adds	r5, r2, r3
   1bbc0:	42ac      	cmp	r4, r5
   1bbc2:	d101      	bne.n	1bbc8 <__sfputs_r+0x12>
   1bbc4:	2000      	movs	r0, #0
   1bbc6:	e007      	b.n	1bbd8 <__sfputs_r+0x22>
   1bbc8:	f814 1b01 	ldrb.w	r1, [r4], #1
   1bbcc:	463a      	mov	r2, r7
   1bbce:	4630      	mov	r0, r6
   1bbd0:	f7ff ffdc 	bl	1bb8c <__sfputc_r>
   1bbd4:	1c43      	adds	r3, r0, #1
   1bbd6:	d1f3      	bne.n	1bbc0 <__sfputs_r+0xa>
   1bbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bbda <__cvt>:
   1bbda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bbde:	b088      	sub	sp, #32
   1bbe0:	2b00      	cmp	r3, #0
   1bbe2:	461f      	mov	r7, r3
   1bbe4:	4614      	mov	r4, r2
   1bbe6:	bfb8      	it	lt
   1bbe8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   1bbec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1bbee:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1bbf0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1bbf4:	bfb6      	itet	lt
   1bbf6:	461f      	movlt	r7, r3
   1bbf8:	2300      	movge	r3, #0
   1bbfa:	232d      	movlt	r3, #45	; 0x2d
   1bbfc:	7013      	strb	r3, [r2, #0]
   1bbfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1bc00:	f023 0820 	bic.w	r8, r3, #32
   1bc04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   1bc08:	d005      	beq.n	1bc16 <__cvt+0x3c>
   1bc0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   1bc0e:	d100      	bne.n	1bc12 <__cvt+0x38>
   1bc10:	3501      	adds	r5, #1
   1bc12:	2302      	movs	r3, #2
   1bc14:	e000      	b.n	1bc18 <__cvt+0x3e>
   1bc16:	2303      	movs	r3, #3
   1bc18:	aa07      	add	r2, sp, #28
   1bc1a:	9204      	str	r2, [sp, #16]
   1bc1c:	aa06      	add	r2, sp, #24
   1bc1e:	e9cd a202 	strd	sl, r2, [sp, #8]
   1bc22:	e9cd 3500 	strd	r3, r5, [sp]
   1bc26:	4622      	mov	r2, r4
   1bc28:	463b      	mov	r3, r7
   1bc2a:	f7f1 f9d9 	bl	cfe0 <_dtoa_r>
   1bc2e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   1bc32:	4606      	mov	r6, r0
   1bc34:	d102      	bne.n	1bc3c <__cvt+0x62>
   1bc36:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bc38:	07db      	lsls	r3, r3, #31
   1bc3a:	d522      	bpl.n	1bc82 <__cvt+0xa8>
   1bc3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   1bc40:	eb06 0905 	add.w	r9, r6, r5
   1bc44:	d110      	bne.n	1bc68 <__cvt+0x8e>
   1bc46:	7833      	ldrb	r3, [r6, #0]
   1bc48:	2b30      	cmp	r3, #48	; 0x30
   1bc4a:	d10a      	bne.n	1bc62 <__cvt+0x88>
   1bc4c:	2200      	movs	r2, #0
   1bc4e:	2300      	movs	r3, #0
   1bc50:	4620      	mov	r0, r4
   1bc52:	4639      	mov	r1, r7
   1bc54:	f7f1 f942 	bl	cedc <__aeabi_dcmpeq>
   1bc58:	b918      	cbnz	r0, 1bc62 <__cvt+0x88>
   1bc5a:	f1c5 0501 	rsb	r5, r5, #1
   1bc5e:	f8ca 5000 	str.w	r5, [sl]
   1bc62:	f8da 3000 	ldr.w	r3, [sl]
   1bc66:	4499      	add	r9, r3
   1bc68:	2200      	movs	r2, #0
   1bc6a:	2300      	movs	r3, #0
   1bc6c:	4620      	mov	r0, r4
   1bc6e:	4639      	mov	r1, r7
   1bc70:	f7f1 f934 	bl	cedc <__aeabi_dcmpeq>
   1bc74:	b108      	cbz	r0, 1bc7a <__cvt+0xa0>
   1bc76:	f8cd 901c 	str.w	r9, [sp, #28]
   1bc7a:	2230      	movs	r2, #48	; 0x30
   1bc7c:	9b07      	ldr	r3, [sp, #28]
   1bc7e:	454b      	cmp	r3, r9
   1bc80:	d307      	bcc.n	1bc92 <__cvt+0xb8>
   1bc82:	9b07      	ldr	r3, [sp, #28]
   1bc84:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1bc86:	1b9b      	subs	r3, r3, r6
   1bc88:	4630      	mov	r0, r6
   1bc8a:	6013      	str	r3, [r2, #0]
   1bc8c:	b008      	add	sp, #32
   1bc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bc92:	1c59      	adds	r1, r3, #1
   1bc94:	9107      	str	r1, [sp, #28]
   1bc96:	701a      	strb	r2, [r3, #0]
   1bc98:	e7f0      	b.n	1bc7c <__cvt+0xa2>

0001bc9a <__exponent>:
   1bc9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bc9c:	4603      	mov	r3, r0
   1bc9e:	2900      	cmp	r1, #0
   1bca0:	bfb8      	it	lt
   1bca2:	4249      	neglt	r1, r1
   1bca4:	f803 2b02 	strb.w	r2, [r3], #2
   1bca8:	bfb4      	ite	lt
   1bcaa:	222d      	movlt	r2, #45	; 0x2d
   1bcac:	222b      	movge	r2, #43	; 0x2b
   1bcae:	2909      	cmp	r1, #9
   1bcb0:	7042      	strb	r2, [r0, #1]
   1bcb2:	dd2a      	ble.n	1bd0a <__exponent+0x70>
   1bcb4:	f10d 0407 	add.w	r4, sp, #7
   1bcb8:	46a4      	mov	ip, r4
   1bcba:	270a      	movs	r7, #10
   1bcbc:	46a6      	mov	lr, r4
   1bcbe:	460a      	mov	r2, r1
   1bcc0:	fb91 f6f7 	sdiv	r6, r1, r7
   1bcc4:	fb07 1516 	mls	r5, r7, r6, r1
   1bcc8:	3530      	adds	r5, #48	; 0x30
   1bcca:	2a63      	cmp	r2, #99	; 0x63
   1bccc:	f104 34ff 	add.w	r4, r4, #4294967295
   1bcd0:	f80e 5c01 	strb.w	r5, [lr, #-1]
   1bcd4:	4631      	mov	r1, r6
   1bcd6:	dcf1      	bgt.n	1bcbc <__exponent+0x22>
   1bcd8:	3130      	adds	r1, #48	; 0x30
   1bcda:	f1ae 0502 	sub.w	r5, lr, #2
   1bcde:	f804 1c01 	strb.w	r1, [r4, #-1]
   1bce2:	1c44      	adds	r4, r0, #1
   1bce4:	4629      	mov	r1, r5
   1bce6:	4561      	cmp	r1, ip
   1bce8:	d30a      	bcc.n	1bd00 <__exponent+0x66>
   1bcea:	f10d 0209 	add.w	r2, sp, #9
   1bcee:	eba2 020e 	sub.w	r2, r2, lr
   1bcf2:	4565      	cmp	r5, ip
   1bcf4:	bf88      	it	hi
   1bcf6:	2200      	movhi	r2, #0
   1bcf8:	4413      	add	r3, r2
   1bcfa:	1a18      	subs	r0, r3, r0
   1bcfc:	b003      	add	sp, #12
   1bcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd00:	f811 2b01 	ldrb.w	r2, [r1], #1
   1bd04:	f804 2f01 	strb.w	r2, [r4, #1]!
   1bd08:	e7ed      	b.n	1bce6 <__exponent+0x4c>
   1bd0a:	2330      	movs	r3, #48	; 0x30
   1bd0c:	3130      	adds	r1, #48	; 0x30
   1bd0e:	7083      	strb	r3, [r0, #2]
   1bd10:	70c1      	strb	r1, [r0, #3]
   1bd12:	1d03      	adds	r3, r0, #4
   1bd14:	e7f1      	b.n	1bcfa <__exponent+0x60>

0001bd16 <_printf_common>:
   1bd16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bd1a:	4616      	mov	r6, r2
   1bd1c:	4699      	mov	r9, r3
   1bd1e:	688a      	ldr	r2, [r1, #8]
   1bd20:	690b      	ldr	r3, [r1, #16]
   1bd22:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1bd26:	4293      	cmp	r3, r2
   1bd28:	bfb8      	it	lt
   1bd2a:	4613      	movlt	r3, r2
   1bd2c:	6033      	str	r3, [r6, #0]
   1bd2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1bd32:	4607      	mov	r7, r0
   1bd34:	460c      	mov	r4, r1
   1bd36:	b10a      	cbz	r2, 1bd3c <_printf_common+0x26>
   1bd38:	3301      	adds	r3, #1
   1bd3a:	6033      	str	r3, [r6, #0]
   1bd3c:	6823      	ldr	r3, [r4, #0]
   1bd3e:	0699      	lsls	r1, r3, #26
   1bd40:	bf42      	ittt	mi
   1bd42:	6833      	ldrmi	r3, [r6, #0]
   1bd44:	3302      	addmi	r3, #2
   1bd46:	6033      	strmi	r3, [r6, #0]
   1bd48:	6825      	ldr	r5, [r4, #0]
   1bd4a:	f015 0506 	ands.w	r5, r5, #6
   1bd4e:	d106      	bne.n	1bd5e <_printf_common+0x48>
   1bd50:	f104 0a19 	add.w	sl, r4, #25
   1bd54:	68e3      	ldr	r3, [r4, #12]
   1bd56:	6832      	ldr	r2, [r6, #0]
   1bd58:	1a9b      	subs	r3, r3, r2
   1bd5a:	42ab      	cmp	r3, r5
   1bd5c:	dc26      	bgt.n	1bdac <_printf_common+0x96>
   1bd5e:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1bd62:	1e13      	subs	r3, r2, #0
   1bd64:	6822      	ldr	r2, [r4, #0]
   1bd66:	bf18      	it	ne
   1bd68:	2301      	movne	r3, #1
   1bd6a:	0692      	lsls	r2, r2, #26
   1bd6c:	d42b      	bmi.n	1bdc6 <_printf_common+0xb0>
   1bd6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1bd72:	4649      	mov	r1, r9
   1bd74:	4638      	mov	r0, r7
   1bd76:	47c0      	blx	r8
   1bd78:	3001      	adds	r0, #1
   1bd7a:	d01e      	beq.n	1bdba <_printf_common+0xa4>
   1bd7c:	6823      	ldr	r3, [r4, #0]
   1bd7e:	68e5      	ldr	r5, [r4, #12]
   1bd80:	6832      	ldr	r2, [r6, #0]
   1bd82:	f003 0306 	and.w	r3, r3, #6
   1bd86:	2b04      	cmp	r3, #4
   1bd88:	bf08      	it	eq
   1bd8a:	1aad      	subeq	r5, r5, r2
   1bd8c:	68a3      	ldr	r3, [r4, #8]
   1bd8e:	6922      	ldr	r2, [r4, #16]
   1bd90:	bf0c      	ite	eq
   1bd92:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1bd96:	2500      	movne	r5, #0
   1bd98:	4293      	cmp	r3, r2
   1bd9a:	bfc4      	itt	gt
   1bd9c:	1a9b      	subgt	r3, r3, r2
   1bd9e:	18ed      	addgt	r5, r5, r3
   1bda0:	2600      	movs	r6, #0
   1bda2:	341a      	adds	r4, #26
   1bda4:	42b5      	cmp	r5, r6
   1bda6:	d11a      	bne.n	1bdde <_printf_common+0xc8>
   1bda8:	2000      	movs	r0, #0
   1bdaa:	e008      	b.n	1bdbe <_printf_common+0xa8>
   1bdac:	2301      	movs	r3, #1
   1bdae:	4652      	mov	r2, sl
   1bdb0:	4649      	mov	r1, r9
   1bdb2:	4638      	mov	r0, r7
   1bdb4:	47c0      	blx	r8
   1bdb6:	3001      	adds	r0, #1
   1bdb8:	d103      	bne.n	1bdc2 <_printf_common+0xac>
   1bdba:	f04f 30ff 	mov.w	r0, #4294967295
   1bdbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bdc2:	3501      	adds	r5, #1
   1bdc4:	e7c6      	b.n	1bd54 <_printf_common+0x3e>
   1bdc6:	18e1      	adds	r1, r4, r3
   1bdc8:	1c5a      	adds	r2, r3, #1
   1bdca:	2030      	movs	r0, #48	; 0x30
   1bdcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1bdd0:	4422      	add	r2, r4
   1bdd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1bdd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1bdda:	3302      	adds	r3, #2
   1bddc:	e7c7      	b.n	1bd6e <_printf_common+0x58>
   1bdde:	2301      	movs	r3, #1
   1bde0:	4622      	mov	r2, r4
   1bde2:	4649      	mov	r1, r9
   1bde4:	4638      	mov	r0, r7
   1bde6:	47c0      	blx	r8
   1bde8:	3001      	adds	r0, #1
   1bdea:	d0e6      	beq.n	1bdba <_printf_common+0xa4>
   1bdec:	3601      	adds	r6, #1
   1bdee:	e7d9      	b.n	1bda4 <_printf_common+0x8e>

0001bdf0 <strcpy>:
   1bdf0:	4603      	mov	r3, r0
   1bdf2:	f811 2b01 	ldrb.w	r2, [r1], #1
   1bdf6:	f803 2b01 	strb.w	r2, [r3], #1
   1bdfa:	2a00      	cmp	r2, #0
   1bdfc:	d1f9      	bne.n	1bdf2 <strcpy+0x2>
   1bdfe:	4770      	bx	lr

0001be00 <strnlen>:
   1be00:	b510      	push	{r4, lr}
   1be02:	4602      	mov	r2, r0
   1be04:	4401      	add	r1, r0
   1be06:	428a      	cmp	r2, r1
   1be08:	4613      	mov	r3, r2
   1be0a:	d101      	bne.n	1be10 <strnlen+0x10>
   1be0c:	1a18      	subs	r0, r3, r0
   1be0e:	bd10      	pop	{r4, pc}
   1be10:	781c      	ldrb	r4, [r3, #0]
   1be12:	3201      	adds	r2, #1
   1be14:	2c00      	cmp	r4, #0
   1be16:	d1f6      	bne.n	1be06 <strnlen+0x6>
   1be18:	e7f8      	b.n	1be0c <strnlen+0xc>

0001be1a <abort>:
   1be1a:	b508      	push	{r3, lr}
   1be1c:	2006      	movs	r0, #6
   1be1e:	f7fe fb37 	bl	1a490 <raise>
   1be22:	2001      	movs	r0, #1
   1be24:	f7f5 ff7c 	bl	11d20 <_exit>

0001be28 <quorem>:
   1be28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be2c:	6903      	ldr	r3, [r0, #16]
   1be2e:	690c      	ldr	r4, [r1, #16]
   1be30:	42a3      	cmp	r3, r4
   1be32:	4607      	mov	r7, r0
   1be34:	f2c0 8081 	blt.w	1bf3a <quorem+0x112>
   1be38:	3c01      	subs	r4, #1
   1be3a:	f101 0814 	add.w	r8, r1, #20
   1be3e:	f100 0514 	add.w	r5, r0, #20
   1be42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1be46:	9301      	str	r3, [sp, #4]
   1be48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   1be4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1be50:	3301      	adds	r3, #1
   1be52:	429a      	cmp	r2, r3
   1be54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   1be58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   1be5c:	fbb2 f6f3 	udiv	r6, r2, r3
   1be60:	d331      	bcc.n	1bec6 <quorem+0x9e>
   1be62:	f04f 0e00 	mov.w	lr, #0
   1be66:	4640      	mov	r0, r8
   1be68:	46ac      	mov	ip, r5
   1be6a:	46f2      	mov	sl, lr
   1be6c:	f850 2b04 	ldr.w	r2, [r0], #4
   1be70:	b293      	uxth	r3, r2
   1be72:	fb06 e303 	mla	r3, r6, r3, lr
   1be76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   1be7a:	b29b      	uxth	r3, r3
   1be7c:	ebaa 0303 	sub.w	r3, sl, r3
   1be80:	0c12      	lsrs	r2, r2, #16
   1be82:	f8dc a000 	ldr.w	sl, [ip]
   1be86:	fb06 e202 	mla	r2, r6, r2, lr
   1be8a:	fa13 f38a 	uxtah	r3, r3, sl
   1be8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   1be92:	fa1f fa82 	uxth.w	sl, r2
   1be96:	f8dc 2000 	ldr.w	r2, [ip]
   1be9a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   1be9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
   1bea2:	b29b      	uxth	r3, r3
   1bea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1bea8:	4581      	cmp	r9, r0
   1beaa:	f84c 3b04 	str.w	r3, [ip], #4
   1beae:	ea4f 4a22 	mov.w	sl, r2, asr #16
   1beb2:	d2db      	bcs.n	1be6c <quorem+0x44>
   1beb4:	f855 300b 	ldr.w	r3, [r5, fp]
   1beb8:	b92b      	cbnz	r3, 1bec6 <quorem+0x9e>
   1beba:	9b01      	ldr	r3, [sp, #4]
   1bebc:	3b04      	subs	r3, #4
   1bebe:	429d      	cmp	r5, r3
   1bec0:	461a      	mov	r2, r3
   1bec2:	d32e      	bcc.n	1bf22 <quorem+0xfa>
   1bec4:	613c      	str	r4, [r7, #16]
   1bec6:	4638      	mov	r0, r7
   1bec8:	f000 fa6d 	bl	1c3a6 <__mcmp>
   1becc:	2800      	cmp	r0, #0
   1bece:	db24      	blt.n	1bf1a <quorem+0xf2>
   1bed0:	3601      	adds	r6, #1
   1bed2:	4628      	mov	r0, r5
   1bed4:	f04f 0c00 	mov.w	ip, #0
   1bed8:	f858 2b04 	ldr.w	r2, [r8], #4
   1bedc:	f8d0 e000 	ldr.w	lr, [r0]
   1bee0:	b293      	uxth	r3, r2
   1bee2:	ebac 0303 	sub.w	r3, ip, r3
   1bee6:	0c12      	lsrs	r2, r2, #16
   1bee8:	fa13 f38e 	uxtah	r3, r3, lr
   1beec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   1bef0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   1bef4:	b29b      	uxth	r3, r3
   1bef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1befa:	45c1      	cmp	r9, r8
   1befc:	f840 3b04 	str.w	r3, [r0], #4
   1bf00:	ea4f 4c22 	mov.w	ip, r2, asr #16
   1bf04:	d2e8      	bcs.n	1bed8 <quorem+0xb0>
   1bf06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1bf0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1bf0e:	b922      	cbnz	r2, 1bf1a <quorem+0xf2>
   1bf10:	3b04      	subs	r3, #4
   1bf12:	429d      	cmp	r5, r3
   1bf14:	461a      	mov	r2, r3
   1bf16:	d30a      	bcc.n	1bf2e <quorem+0x106>
   1bf18:	613c      	str	r4, [r7, #16]
   1bf1a:	4630      	mov	r0, r6
   1bf1c:	b003      	add	sp, #12
   1bf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf22:	6812      	ldr	r2, [r2, #0]
   1bf24:	3b04      	subs	r3, #4
   1bf26:	2a00      	cmp	r2, #0
   1bf28:	d1cc      	bne.n	1bec4 <quorem+0x9c>
   1bf2a:	3c01      	subs	r4, #1
   1bf2c:	e7c7      	b.n	1bebe <quorem+0x96>
   1bf2e:	6812      	ldr	r2, [r2, #0]
   1bf30:	3b04      	subs	r3, #4
   1bf32:	2a00      	cmp	r2, #0
   1bf34:	d1f0      	bne.n	1bf18 <quorem+0xf0>
   1bf36:	3c01      	subs	r4, #1
   1bf38:	e7eb      	b.n	1bf12 <quorem+0xea>
   1bf3a:	2000      	movs	r0, #0
   1bf3c:	e7ee      	b.n	1bf1c <quorem+0xf4>

0001bf3e <__sfmoreglue>:
   1bf3e:	b570      	push	{r4, r5, r6, lr}
   1bf40:	1e4a      	subs	r2, r1, #1
   1bf42:	2568      	movs	r5, #104	; 0x68
   1bf44:	4355      	muls	r5, r2
   1bf46:	460e      	mov	r6, r1
   1bf48:	f105 0174 	add.w	r1, r5, #116	; 0x74
   1bf4c:	f7fd fad6 	bl	194fc <_malloc_r>
   1bf50:	4604      	mov	r4, r0
   1bf52:	b140      	cbz	r0, 1bf66 <__sfmoreglue+0x28>
   1bf54:	2100      	movs	r1, #0
   1bf56:	e9c0 1600 	strd	r1, r6, [r0]
   1bf5a:	300c      	adds	r0, #12
   1bf5c:	60a0      	str	r0, [r4, #8]
   1bf5e:	f105 0268 	add.w	r2, r5, #104	; 0x68
   1bf62:	f7ff fe0b 	bl	1bb7c <memset>
   1bf66:	4620      	mov	r0, r4
   1bf68:	bd70      	pop	{r4, r5, r6, pc}

0001bf6a <_fwalk_reent>:
   1bf6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bf6e:	4606      	mov	r6, r0
   1bf70:	4688      	mov	r8, r1
   1bf72:	f100 0448 	add.w	r4, r0, #72	; 0x48
   1bf76:	2700      	movs	r7, #0
   1bf78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   1bf7c:	f1b9 0901 	subs.w	r9, r9, #1
   1bf80:	d505      	bpl.n	1bf8e <_fwalk_reent+0x24>
   1bf82:	6824      	ldr	r4, [r4, #0]
   1bf84:	2c00      	cmp	r4, #0
   1bf86:	d1f7      	bne.n	1bf78 <_fwalk_reent+0xe>
   1bf88:	4638      	mov	r0, r7
   1bf8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bf8e:	89ab      	ldrh	r3, [r5, #12]
   1bf90:	2b01      	cmp	r3, #1
   1bf92:	d907      	bls.n	1bfa4 <_fwalk_reent+0x3a>
   1bf94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   1bf98:	3301      	adds	r3, #1
   1bf9a:	d003      	beq.n	1bfa4 <_fwalk_reent+0x3a>
   1bf9c:	4629      	mov	r1, r5
   1bf9e:	4630      	mov	r0, r6
   1bfa0:	47c0      	blx	r8
   1bfa2:	4307      	orrs	r7, r0
   1bfa4:	3568      	adds	r5, #104	; 0x68
   1bfa6:	e7e9      	b.n	1bf7c <_fwalk_reent+0x12>

0001bfa8 <__swhatbuf_r>:
   1bfa8:	b570      	push	{r4, r5, r6, lr}
   1bfaa:	460e      	mov	r6, r1
   1bfac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1bfb0:	2900      	cmp	r1, #0
   1bfb2:	b096      	sub	sp, #88	; 0x58
   1bfb4:	4614      	mov	r4, r2
   1bfb6:	461d      	mov	r5, r3
   1bfb8:	da07      	bge.n	1bfca <__swhatbuf_r+0x22>
   1bfba:	2300      	movs	r3, #0
   1bfbc:	602b      	str	r3, [r5, #0]
   1bfbe:	89b3      	ldrh	r3, [r6, #12]
   1bfc0:	061a      	lsls	r2, r3, #24
   1bfc2:	d410      	bmi.n	1bfe6 <__swhatbuf_r+0x3e>
   1bfc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1bfc8:	e00e      	b.n	1bfe8 <__swhatbuf_r+0x40>
   1bfca:	466a      	mov	r2, sp
   1bfcc:	f7fe fa9c 	bl	1a508 <_fstat_r>
   1bfd0:	2800      	cmp	r0, #0
   1bfd2:	dbf2      	blt.n	1bfba <__swhatbuf_r+0x12>
   1bfd4:	9a01      	ldr	r2, [sp, #4]
   1bfd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1bfda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   1bfde:	425a      	negs	r2, r3
   1bfe0:	415a      	adcs	r2, r3
   1bfe2:	602a      	str	r2, [r5, #0]
   1bfe4:	e7ee      	b.n	1bfc4 <__swhatbuf_r+0x1c>
   1bfe6:	2340      	movs	r3, #64	; 0x40
   1bfe8:	2000      	movs	r0, #0
   1bfea:	6023      	str	r3, [r4, #0]
   1bfec:	b016      	add	sp, #88	; 0x58
   1bfee:	bd70      	pop	{r4, r5, r6, pc}

0001bff0 <_Balloc>:
   1bff0:	b570      	push	{r4, r5, r6, lr}
   1bff2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1bff4:	4604      	mov	r4, r0
   1bff6:	460d      	mov	r5, r1
   1bff8:	b93e      	cbnz	r6, 1c00a <_Balloc+0x1a>
   1bffa:	2010      	movs	r0, #16
   1bffc:	f7fd fa28 	bl	19450 <malloc>
   1c000:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1c004:	6260      	str	r0, [r4, #36]	; 0x24
   1c006:	6006      	str	r6, [r0, #0]
   1c008:	60c6      	str	r6, [r0, #12]
   1c00a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1c00c:	68f3      	ldr	r3, [r6, #12]
   1c00e:	b183      	cbz	r3, 1c032 <_Balloc+0x42>
   1c010:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c012:	68db      	ldr	r3, [r3, #12]
   1c014:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1c018:	b9b8      	cbnz	r0, 1c04a <_Balloc+0x5a>
   1c01a:	2101      	movs	r1, #1
   1c01c:	fa01 f605 	lsl.w	r6, r1, r5
   1c020:	1d72      	adds	r2, r6, #5
   1c022:	0092      	lsls	r2, r2, #2
   1c024:	4620      	mov	r0, r4
   1c026:	f000 fa9e 	bl	1c566 <_calloc_r>
   1c02a:	b160      	cbz	r0, 1c046 <_Balloc+0x56>
   1c02c:	e9c0 5601 	strd	r5, r6, [r0, #4]
   1c030:	e00e      	b.n	1c050 <_Balloc+0x60>
   1c032:	2221      	movs	r2, #33	; 0x21
   1c034:	2104      	movs	r1, #4
   1c036:	4620      	mov	r0, r4
   1c038:	f000 fa95 	bl	1c566 <_calloc_r>
   1c03c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c03e:	60f0      	str	r0, [r6, #12]
   1c040:	68db      	ldr	r3, [r3, #12]
   1c042:	2b00      	cmp	r3, #0
   1c044:	d1e4      	bne.n	1c010 <_Balloc+0x20>
   1c046:	2000      	movs	r0, #0
   1c048:	bd70      	pop	{r4, r5, r6, pc}
   1c04a:	6802      	ldr	r2, [r0, #0]
   1c04c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   1c050:	2300      	movs	r3, #0
   1c052:	e9c0 3303 	strd	r3, r3, [r0, #12]
   1c056:	e7f7      	b.n	1c048 <_Balloc+0x58>

0001c058 <_Bfree>:
   1c058:	b570      	push	{r4, r5, r6, lr}
   1c05a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1c05c:	4605      	mov	r5, r0
   1c05e:	460c      	mov	r4, r1
   1c060:	b93e      	cbnz	r6, 1c072 <_Bfree+0x1a>
   1c062:	2010      	movs	r0, #16
   1c064:	f7fd f9f4 	bl	19450 <malloc>
   1c068:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1c06c:	6268      	str	r0, [r5, #36]	; 0x24
   1c06e:	6006      	str	r6, [r0, #0]
   1c070:	60c6      	str	r6, [r0, #12]
   1c072:	b13c      	cbz	r4, 1c084 <_Bfree+0x2c>
   1c074:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1c076:	6862      	ldr	r2, [r4, #4]
   1c078:	68db      	ldr	r3, [r3, #12]
   1c07a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1c07e:	6021      	str	r1, [r4, #0]
   1c080:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   1c084:	bd70      	pop	{r4, r5, r6, pc}

0001c086 <__multadd>:
   1c086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c08a:	690e      	ldr	r6, [r1, #16]
   1c08c:	4607      	mov	r7, r0
   1c08e:	4698      	mov	r8, r3
   1c090:	460c      	mov	r4, r1
   1c092:	f101 0014 	add.w	r0, r1, #20
   1c096:	2300      	movs	r3, #0
   1c098:	6805      	ldr	r5, [r0, #0]
   1c09a:	b2a9      	uxth	r1, r5
   1c09c:	fb02 8101 	mla	r1, r2, r1, r8
   1c0a0:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   1c0a4:	0c2d      	lsrs	r5, r5, #16
   1c0a6:	fb02 c505 	mla	r5, r2, r5, ip
   1c0aa:	b289      	uxth	r1, r1
   1c0ac:	3301      	adds	r3, #1
   1c0ae:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   1c0b2:	429e      	cmp	r6, r3
   1c0b4:	f840 1b04 	str.w	r1, [r0], #4
   1c0b8:	ea4f 4815 	mov.w	r8, r5, lsr #16
   1c0bc:	dcec      	bgt.n	1c098 <__multadd+0x12>
   1c0be:	f1b8 0f00 	cmp.w	r8, #0
   1c0c2:	d01b      	beq.n	1c0fc <__multadd+0x76>
   1c0c4:	68a3      	ldr	r3, [r4, #8]
   1c0c6:	42b3      	cmp	r3, r6
   1c0c8:	dc12      	bgt.n	1c0f0 <__multadd+0x6a>
   1c0ca:	6861      	ldr	r1, [r4, #4]
   1c0cc:	4638      	mov	r0, r7
   1c0ce:	3101      	adds	r1, #1
   1c0d0:	f7ff ff8e 	bl	1bff0 <_Balloc>
   1c0d4:	6922      	ldr	r2, [r4, #16]
   1c0d6:	3202      	adds	r2, #2
   1c0d8:	f104 010c 	add.w	r1, r4, #12
   1c0dc:	4605      	mov	r5, r0
   1c0de:	0092      	lsls	r2, r2, #2
   1c0e0:	300c      	adds	r0, #12
   1c0e2:	f7ff fd2a 	bl	1bb3a <memcpy>
   1c0e6:	4621      	mov	r1, r4
   1c0e8:	4638      	mov	r0, r7
   1c0ea:	f7ff ffb5 	bl	1c058 <_Bfree>
   1c0ee:	462c      	mov	r4, r5
   1c0f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   1c0f4:	3601      	adds	r6, #1
   1c0f6:	f8c3 8014 	str.w	r8, [r3, #20]
   1c0fa:	6126      	str	r6, [r4, #16]
   1c0fc:	4620      	mov	r0, r4
   1c0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c102 <__hi0bits>:
   1c102:	0c02      	lsrs	r2, r0, #16
   1c104:	0412      	lsls	r2, r2, #16
   1c106:	4603      	mov	r3, r0
   1c108:	b9ca      	cbnz	r2, 1c13e <__hi0bits+0x3c>
   1c10a:	0403      	lsls	r3, r0, #16
   1c10c:	2010      	movs	r0, #16
   1c10e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   1c112:	bf04      	itt	eq
   1c114:	021b      	lsleq	r3, r3, #8
   1c116:	3008      	addeq	r0, #8
   1c118:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   1c11c:	bf04      	itt	eq
   1c11e:	011b      	lsleq	r3, r3, #4
   1c120:	3004      	addeq	r0, #4
   1c122:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   1c126:	bf04      	itt	eq
   1c128:	009b      	lsleq	r3, r3, #2
   1c12a:	3002      	addeq	r0, #2
   1c12c:	2b00      	cmp	r3, #0
   1c12e:	db05      	blt.n	1c13c <__hi0bits+0x3a>
   1c130:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1c134:	f100 0001 	add.w	r0, r0, #1
   1c138:	bf08      	it	eq
   1c13a:	2020      	moveq	r0, #32
   1c13c:	4770      	bx	lr
   1c13e:	2000      	movs	r0, #0
   1c140:	e7e5      	b.n	1c10e <__hi0bits+0xc>

0001c142 <__lo0bits>:
   1c142:	6803      	ldr	r3, [r0, #0]
   1c144:	4602      	mov	r2, r0
   1c146:	f013 0007 	ands.w	r0, r3, #7
   1c14a:	d00b      	beq.n	1c164 <__lo0bits+0x22>
   1c14c:	07d9      	lsls	r1, r3, #31
   1c14e:	d422      	bmi.n	1c196 <__lo0bits+0x54>
   1c150:	0798      	lsls	r0, r3, #30
   1c152:	bf49      	itett	mi
   1c154:	085b      	lsrmi	r3, r3, #1
   1c156:	089b      	lsrpl	r3, r3, #2
   1c158:	2001      	movmi	r0, #1
   1c15a:	6013      	strmi	r3, [r2, #0]
   1c15c:	bf5c      	itt	pl
   1c15e:	6013      	strpl	r3, [r2, #0]
   1c160:	2002      	movpl	r0, #2
   1c162:	4770      	bx	lr
   1c164:	b299      	uxth	r1, r3
   1c166:	b909      	cbnz	r1, 1c16c <__lo0bits+0x2a>
   1c168:	0c1b      	lsrs	r3, r3, #16
   1c16a:	2010      	movs	r0, #16
   1c16c:	f013 0fff 	tst.w	r3, #255	; 0xff
   1c170:	bf04      	itt	eq
   1c172:	0a1b      	lsreq	r3, r3, #8
   1c174:	3008      	addeq	r0, #8
   1c176:	0719      	lsls	r1, r3, #28
   1c178:	bf04      	itt	eq
   1c17a:	091b      	lsreq	r3, r3, #4
   1c17c:	3004      	addeq	r0, #4
   1c17e:	0799      	lsls	r1, r3, #30
   1c180:	bf04      	itt	eq
   1c182:	089b      	lsreq	r3, r3, #2
   1c184:	3002      	addeq	r0, #2
   1c186:	07d9      	lsls	r1, r3, #31
   1c188:	d403      	bmi.n	1c192 <__lo0bits+0x50>
   1c18a:	085b      	lsrs	r3, r3, #1
   1c18c:	f100 0001 	add.w	r0, r0, #1
   1c190:	d003      	beq.n	1c19a <__lo0bits+0x58>
   1c192:	6013      	str	r3, [r2, #0]
   1c194:	4770      	bx	lr
   1c196:	2000      	movs	r0, #0
   1c198:	4770      	bx	lr
   1c19a:	2020      	movs	r0, #32
   1c19c:	4770      	bx	lr

0001c19e <__i2b>:
   1c19e:	b510      	push	{r4, lr}
   1c1a0:	460c      	mov	r4, r1
   1c1a2:	2101      	movs	r1, #1
   1c1a4:	f7ff ff24 	bl	1bff0 <_Balloc>
   1c1a8:	2201      	movs	r2, #1
   1c1aa:	6144      	str	r4, [r0, #20]
   1c1ac:	6102      	str	r2, [r0, #16]
   1c1ae:	bd10      	pop	{r4, pc}

0001c1b0 <__multiply>:
   1c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1b4:	4615      	mov	r5, r2
   1c1b6:	690a      	ldr	r2, [r1, #16]
   1c1b8:	692b      	ldr	r3, [r5, #16]
   1c1ba:	429a      	cmp	r2, r3
   1c1bc:	bfb8      	it	lt
   1c1be:	460b      	movlt	r3, r1
   1c1c0:	460c      	mov	r4, r1
   1c1c2:	bfbc      	itt	lt
   1c1c4:	462c      	movlt	r4, r5
   1c1c6:	461d      	movlt	r5, r3
   1c1c8:	6927      	ldr	r7, [r4, #16]
   1c1ca:	f8d5 9010 	ldr.w	r9, [r5, #16]
   1c1ce:	68a3      	ldr	r3, [r4, #8]
   1c1d0:	6861      	ldr	r1, [r4, #4]
   1c1d2:	eb07 0609 	add.w	r6, r7, r9
   1c1d6:	42b3      	cmp	r3, r6
   1c1d8:	bfb8      	it	lt
   1c1da:	3101      	addlt	r1, #1
   1c1dc:	b085      	sub	sp, #20
   1c1de:	f7ff ff07 	bl	1bff0 <_Balloc>
   1c1e2:	f100 0114 	add.w	r1, r0, #20
   1c1e6:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   1c1ea:	460b      	mov	r3, r1
   1c1ec:	2200      	movs	r2, #0
   1c1ee:	4543      	cmp	r3, r8
   1c1f0:	d31d      	bcc.n	1c22e <__multiply+0x7e>
   1c1f2:	f104 0314 	add.w	r3, r4, #20
   1c1f6:	f105 0214 	add.w	r2, r5, #20
   1c1fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   1c1fe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   1c202:	9302      	str	r3, [sp, #8]
   1c204:	1b3b      	subs	r3, r7, r4
   1c206:	3b15      	subs	r3, #21
   1c208:	f023 0303 	bic.w	r3, r3, #3
   1c20c:	3304      	adds	r3, #4
   1c20e:	f104 0515 	add.w	r5, r4, #21
   1c212:	42af      	cmp	r7, r5
   1c214:	bf38      	it	cc
   1c216:	2304      	movcc	r3, #4
   1c218:	9301      	str	r3, [sp, #4]
   1c21a:	9b02      	ldr	r3, [sp, #8]
   1c21c:	9203      	str	r2, [sp, #12]
   1c21e:	4293      	cmp	r3, r2
   1c220:	d808      	bhi.n	1c234 <__multiply+0x84>
   1c222:	2e00      	cmp	r6, #0
   1c224:	dc5a      	bgt.n	1c2dc <__multiply+0x12c>
   1c226:	6106      	str	r6, [r0, #16]
   1c228:	b005      	add	sp, #20
   1c22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c22e:	f843 2b04 	str.w	r2, [r3], #4
   1c232:	e7dc      	b.n	1c1ee <__multiply+0x3e>
   1c234:	f8b2 a000 	ldrh.w	sl, [r2]
   1c238:	f1ba 0f00 	cmp.w	sl, #0
   1c23c:	d024      	beq.n	1c288 <__multiply+0xd8>
   1c23e:	f104 0e14 	add.w	lr, r4, #20
   1c242:	4689      	mov	r9, r1
   1c244:	f04f 0c00 	mov.w	ip, #0
   1c248:	f85e 5b04 	ldr.w	r5, [lr], #4
   1c24c:	f8d9 b000 	ldr.w	fp, [r9]
   1c250:	b2ab      	uxth	r3, r5
   1c252:	fa1f fb8b 	uxth.w	fp, fp
   1c256:	fb0a b303 	mla	r3, sl, r3, fp
   1c25a:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   1c25e:	f8d9 5000 	ldr.w	r5, [r9]
   1c262:	4463      	add	r3, ip
   1c264:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   1c268:	fb0a c50b 	mla	r5, sl, fp, ip
   1c26c:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   1c270:	b29b      	uxth	r3, r3
   1c272:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   1c276:	4577      	cmp	r7, lr
   1c278:	f849 3b04 	str.w	r3, [r9], #4
   1c27c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   1c280:	d8e2      	bhi.n	1c248 <__multiply+0x98>
   1c282:	9b01      	ldr	r3, [sp, #4]
   1c284:	f841 c003 	str.w	ip, [r1, r3]
   1c288:	9b03      	ldr	r3, [sp, #12]
   1c28a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   1c28e:	3204      	adds	r2, #4
   1c290:	f1b9 0f00 	cmp.w	r9, #0
   1c294:	d020      	beq.n	1c2d8 <__multiply+0x128>
   1c296:	680b      	ldr	r3, [r1, #0]
   1c298:	f104 0c14 	add.w	ip, r4, #20
   1c29c:	468e      	mov	lr, r1
   1c29e:	f04f 0a00 	mov.w	sl, #0
   1c2a2:	f8bc 5000 	ldrh.w	r5, [ip]
   1c2a6:	f8be b002 	ldrh.w	fp, [lr, #2]
   1c2aa:	fb09 b505 	mla	r5, r9, r5, fp
   1c2ae:	44aa      	add	sl, r5
   1c2b0:	b29b      	uxth	r3, r3
   1c2b2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   1c2b6:	f84e 3b04 	str.w	r3, [lr], #4
   1c2ba:	f85c 3b04 	ldr.w	r3, [ip], #4
   1c2be:	f8be 5000 	ldrh.w	r5, [lr]
   1c2c2:	0c1b      	lsrs	r3, r3, #16
   1c2c4:	fb09 5303 	mla	r3, r9, r3, r5
   1c2c8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   1c2cc:	4567      	cmp	r7, ip
   1c2ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1c2d2:	d8e6      	bhi.n	1c2a2 <__multiply+0xf2>
   1c2d4:	9d01      	ldr	r5, [sp, #4]
   1c2d6:	514b      	str	r3, [r1, r5]
   1c2d8:	3104      	adds	r1, #4
   1c2da:	e79e      	b.n	1c21a <__multiply+0x6a>
   1c2dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   1c2e0:	2b00      	cmp	r3, #0
   1c2e2:	d1a0      	bne.n	1c226 <__multiply+0x76>
   1c2e4:	3e01      	subs	r6, #1
   1c2e6:	e79c      	b.n	1c222 <__multiply+0x72>

0001c2e8 <__lshift>:
   1c2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c2ec:	460c      	mov	r4, r1
   1c2ee:	6849      	ldr	r1, [r1, #4]
   1c2f0:	6923      	ldr	r3, [r4, #16]
   1c2f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
   1c2f6:	68a3      	ldr	r3, [r4, #8]
   1c2f8:	4607      	mov	r7, r0
   1c2fa:	4691      	mov	r9, r2
   1c2fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
   1c300:	f108 0601 	add.w	r6, r8, #1
   1c304:	42b3      	cmp	r3, r6
   1c306:	db3f      	blt.n	1c388 <__lshift+0xa0>
   1c308:	4638      	mov	r0, r7
   1c30a:	f7ff fe71 	bl	1bff0 <_Balloc>
   1c30e:	2300      	movs	r3, #0
   1c310:	4605      	mov	r5, r0
   1c312:	f100 0114 	add.w	r1, r0, #20
   1c316:	f100 0210 	add.w	r2, r0, #16
   1c31a:	4618      	mov	r0, r3
   1c31c:	4553      	cmp	r3, sl
   1c31e:	db36      	blt.n	1c38e <__lshift+0xa6>
   1c320:	6920      	ldr	r0, [r4, #16]
   1c322:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   1c326:	f104 0314 	add.w	r3, r4, #20
   1c32a:	f019 091f 	ands.w	r9, r9, #31
   1c32e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1c332:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1c336:	d02e      	beq.n	1c396 <__lshift+0xae>
   1c338:	f1c9 0e20 	rsb	lr, r9, #32
   1c33c:	468a      	mov	sl, r1
   1c33e:	2200      	movs	r2, #0
   1c340:	6818      	ldr	r0, [r3, #0]
   1c342:	fa00 f009 	lsl.w	r0, r0, r9
   1c346:	4302      	orrs	r2, r0
   1c348:	f84a 2b04 	str.w	r2, [sl], #4
   1c34c:	f853 2b04 	ldr.w	r2, [r3], #4
   1c350:	459c      	cmp	ip, r3
   1c352:	fa22 f20e 	lsr.w	r2, r2, lr
   1c356:	d8f3      	bhi.n	1c340 <__lshift+0x58>
   1c358:	ebac 0304 	sub.w	r3, ip, r4
   1c35c:	3b15      	subs	r3, #21
   1c35e:	f023 0303 	bic.w	r3, r3, #3
   1c362:	3304      	adds	r3, #4
   1c364:	f104 0015 	add.w	r0, r4, #21
   1c368:	4560      	cmp	r0, ip
   1c36a:	bf88      	it	hi
   1c36c:	2304      	movhi	r3, #4
   1c36e:	50ca      	str	r2, [r1, r3]
   1c370:	b10a      	cbz	r2, 1c376 <__lshift+0x8e>
   1c372:	f108 0602 	add.w	r6, r8, #2
   1c376:	3e01      	subs	r6, #1
   1c378:	4638      	mov	r0, r7
   1c37a:	612e      	str	r6, [r5, #16]
   1c37c:	4621      	mov	r1, r4
   1c37e:	f7ff fe6b 	bl	1c058 <_Bfree>
   1c382:	4628      	mov	r0, r5
   1c384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c388:	3101      	adds	r1, #1
   1c38a:	005b      	lsls	r3, r3, #1
   1c38c:	e7ba      	b.n	1c304 <__lshift+0x1c>
   1c38e:	f842 0f04 	str.w	r0, [r2, #4]!
   1c392:	3301      	adds	r3, #1
   1c394:	e7c2      	b.n	1c31c <__lshift+0x34>
   1c396:	3904      	subs	r1, #4
   1c398:	f853 2b04 	ldr.w	r2, [r3], #4
   1c39c:	f841 2f04 	str.w	r2, [r1, #4]!
   1c3a0:	459c      	cmp	ip, r3
   1c3a2:	d8f9      	bhi.n	1c398 <__lshift+0xb0>
   1c3a4:	e7e7      	b.n	1c376 <__lshift+0x8e>

0001c3a6 <__mcmp>:
   1c3a6:	690a      	ldr	r2, [r1, #16]
   1c3a8:	4603      	mov	r3, r0
   1c3aa:	6900      	ldr	r0, [r0, #16]
   1c3ac:	1a80      	subs	r0, r0, r2
   1c3ae:	b530      	push	{r4, r5, lr}
   1c3b0:	d10d      	bne.n	1c3ce <__mcmp+0x28>
   1c3b2:	3314      	adds	r3, #20
   1c3b4:	3114      	adds	r1, #20
   1c3b6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   1c3ba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   1c3be:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1c3c2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   1c3c6:	4295      	cmp	r5, r2
   1c3c8:	d002      	beq.n	1c3d0 <__mcmp+0x2a>
   1c3ca:	d304      	bcc.n	1c3d6 <__mcmp+0x30>
   1c3cc:	2001      	movs	r0, #1
   1c3ce:	bd30      	pop	{r4, r5, pc}
   1c3d0:	42a3      	cmp	r3, r4
   1c3d2:	d3f4      	bcc.n	1c3be <__mcmp+0x18>
   1c3d4:	e7fb      	b.n	1c3ce <__mcmp+0x28>
   1c3d6:	f04f 30ff 	mov.w	r0, #4294967295
   1c3da:	e7f8      	b.n	1c3ce <__mcmp+0x28>

0001c3dc <__mdiff>:
   1c3dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3e0:	460c      	mov	r4, r1
   1c3e2:	4606      	mov	r6, r0
   1c3e4:	4611      	mov	r1, r2
   1c3e6:	4620      	mov	r0, r4
   1c3e8:	4617      	mov	r7, r2
   1c3ea:	f7ff ffdc 	bl	1c3a6 <__mcmp>
   1c3ee:	1e05      	subs	r5, r0, #0
   1c3f0:	d108      	bne.n	1c404 <__mdiff+0x28>
   1c3f2:	4629      	mov	r1, r5
   1c3f4:	4630      	mov	r0, r6
   1c3f6:	f7ff fdfb 	bl	1bff0 <_Balloc>
   1c3fa:	2301      	movs	r3, #1
   1c3fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1c400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c404:	bfa4      	itt	ge
   1c406:	463b      	movge	r3, r7
   1c408:	4627      	movge	r7, r4
   1c40a:	4630      	mov	r0, r6
   1c40c:	6879      	ldr	r1, [r7, #4]
   1c40e:	bfa6      	itte	ge
   1c410:	461c      	movge	r4, r3
   1c412:	2500      	movge	r5, #0
   1c414:	2501      	movlt	r5, #1
   1c416:	f7ff fdeb 	bl	1bff0 <_Balloc>
   1c41a:	693e      	ldr	r6, [r7, #16]
   1c41c:	60c5      	str	r5, [r0, #12]
   1c41e:	6925      	ldr	r5, [r4, #16]
   1c420:	f107 0114 	add.w	r1, r7, #20
   1c424:	f104 0914 	add.w	r9, r4, #20
   1c428:	f100 0e14 	add.w	lr, r0, #20
   1c42c:	f107 0210 	add.w	r2, r7, #16
   1c430:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   1c434:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   1c438:	46f2      	mov	sl, lr
   1c43a:	2700      	movs	r7, #0
   1c43c:	f859 3b04 	ldr.w	r3, [r9], #4
   1c440:	f852 bf04 	ldr.w	fp, [r2, #4]!
   1c444:	fa1f f883 	uxth.w	r8, r3
   1c448:	fa17 f78b 	uxtah	r7, r7, fp
   1c44c:	0c1b      	lsrs	r3, r3, #16
   1c44e:	eba7 0808 	sub.w	r8, r7, r8
   1c452:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   1c456:	eb03 4328 	add.w	r3, r3, r8, asr #16
   1c45a:	fa1f f888 	uxth.w	r8, r8
   1c45e:	141f      	asrs	r7, r3, #16
   1c460:	454d      	cmp	r5, r9
   1c462:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   1c466:	f84a 3b04 	str.w	r3, [sl], #4
   1c46a:	d8e7      	bhi.n	1c43c <__mdiff+0x60>
   1c46c:	1b2b      	subs	r3, r5, r4
   1c46e:	3b15      	subs	r3, #21
   1c470:	f023 0303 	bic.w	r3, r3, #3
   1c474:	3304      	adds	r3, #4
   1c476:	3415      	adds	r4, #21
   1c478:	42a5      	cmp	r5, r4
   1c47a:	bf38      	it	cc
   1c47c:	2304      	movcc	r3, #4
   1c47e:	4419      	add	r1, r3
   1c480:	4473      	add	r3, lr
   1c482:	469e      	mov	lr, r3
   1c484:	460d      	mov	r5, r1
   1c486:	4565      	cmp	r5, ip
   1c488:	d30e      	bcc.n	1c4a8 <__mdiff+0xcc>
   1c48a:	f10c 0203 	add.w	r2, ip, #3
   1c48e:	1a52      	subs	r2, r2, r1
   1c490:	f022 0203 	bic.w	r2, r2, #3
   1c494:	3903      	subs	r1, #3
   1c496:	458c      	cmp	ip, r1
   1c498:	bf38      	it	cc
   1c49a:	2200      	movcc	r2, #0
   1c49c:	441a      	add	r2, r3
   1c49e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1c4a2:	b17b      	cbz	r3, 1c4c4 <__mdiff+0xe8>
   1c4a4:	6106      	str	r6, [r0, #16]
   1c4a6:	e7ab      	b.n	1c400 <__mdiff+0x24>
   1c4a8:	f855 8b04 	ldr.w	r8, [r5], #4
   1c4ac:	fa17 f488 	uxtah	r4, r7, r8
   1c4b0:	1422      	asrs	r2, r4, #16
   1c4b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   1c4b6:	b2a4      	uxth	r4, r4
   1c4b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1c4bc:	f84e 4b04 	str.w	r4, [lr], #4
   1c4c0:	1417      	asrs	r7, r2, #16
   1c4c2:	e7e0      	b.n	1c486 <__mdiff+0xaa>
   1c4c4:	3e01      	subs	r6, #1
   1c4c6:	e7ea      	b.n	1c49e <__mdiff+0xc2>

0001c4c8 <__d2b>:
   1c4c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c4cc:	2101      	movs	r1, #1
   1c4ce:	461c      	mov	r4, r3
   1c4d0:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   1c4d4:	4690      	mov	r8, r2
   1c4d6:	f7ff fd8b 	bl	1bff0 <_Balloc>
   1c4da:	f3c4 0313 	ubfx	r3, r4, #0, #20
   1c4de:	f3c4 540a 	ubfx	r4, r4, #20, #11
   1c4e2:	4607      	mov	r7, r0
   1c4e4:	bb2c      	cbnz	r4, 1c532 <__d2b+0x6a>
   1c4e6:	9301      	str	r3, [sp, #4]
   1c4e8:	f1b8 0300 	subs.w	r3, r8, #0
   1c4ec:	d026      	beq.n	1c53c <__d2b+0x74>
   1c4ee:	4668      	mov	r0, sp
   1c4f0:	9300      	str	r3, [sp, #0]
   1c4f2:	f7ff fe26 	bl	1c142 <__lo0bits>
   1c4f6:	9900      	ldr	r1, [sp, #0]
   1c4f8:	b1f0      	cbz	r0, 1c538 <__d2b+0x70>
   1c4fa:	9a01      	ldr	r2, [sp, #4]
   1c4fc:	f1c0 0320 	rsb	r3, r0, #32
   1c500:	fa02 f303 	lsl.w	r3, r2, r3
   1c504:	430b      	orrs	r3, r1
   1c506:	40c2      	lsrs	r2, r0
   1c508:	617b      	str	r3, [r7, #20]
   1c50a:	9201      	str	r2, [sp, #4]
   1c50c:	9b01      	ldr	r3, [sp, #4]
   1c50e:	61bb      	str	r3, [r7, #24]
   1c510:	2b00      	cmp	r3, #0
   1c512:	bf14      	ite	ne
   1c514:	2102      	movne	r1, #2
   1c516:	2101      	moveq	r1, #1
   1c518:	6139      	str	r1, [r7, #16]
   1c51a:	b1c4      	cbz	r4, 1c54e <__d2b+0x86>
   1c51c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   1c520:	4404      	add	r4, r0
   1c522:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1c526:	6034      	str	r4, [r6, #0]
   1c528:	6028      	str	r0, [r5, #0]
   1c52a:	4638      	mov	r0, r7
   1c52c:	b002      	add	sp, #8
   1c52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c536:	e7d6      	b.n	1c4e6 <__d2b+0x1e>
   1c538:	6179      	str	r1, [r7, #20]
   1c53a:	e7e7      	b.n	1c50c <__d2b+0x44>
   1c53c:	a801      	add	r0, sp, #4
   1c53e:	f7ff fe00 	bl	1c142 <__lo0bits>
   1c542:	9b01      	ldr	r3, [sp, #4]
   1c544:	617b      	str	r3, [r7, #20]
   1c546:	2101      	movs	r1, #1
   1c548:	6139      	str	r1, [r7, #16]
   1c54a:	3020      	adds	r0, #32
   1c54c:	e7e5      	b.n	1c51a <__d2b+0x52>
   1c54e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   1c552:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   1c556:	6030      	str	r0, [r6, #0]
   1c558:	6918      	ldr	r0, [r3, #16]
   1c55a:	f7ff fdd2 	bl	1c102 <__hi0bits>
   1c55e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   1c562:	6029      	str	r1, [r5, #0]
   1c564:	e7e1      	b.n	1c52a <__d2b+0x62>

0001c566 <_calloc_r>:
   1c566:	b538      	push	{r3, r4, r5, lr}
   1c568:	fb02 f501 	mul.w	r5, r2, r1
   1c56c:	4629      	mov	r1, r5
   1c56e:	f7fc ffc5 	bl	194fc <_malloc_r>
   1c572:	4604      	mov	r4, r0
   1c574:	b118      	cbz	r0, 1c57e <_calloc_r+0x18>
   1c576:	462a      	mov	r2, r5
   1c578:	2100      	movs	r1, #0
   1c57a:	f7ff faff 	bl	1bb7c <memset>
   1c57e:	4620      	mov	r0, r4
   1c580:	bd38      	pop	{r3, r4, r5, pc}

0001c582 <_raise_r>:
   1c582:	291f      	cmp	r1, #31
   1c584:	b538      	push	{r3, r4, r5, lr}
   1c586:	4604      	mov	r4, r0
   1c588:	460d      	mov	r5, r1
   1c58a:	d904      	bls.n	1c596 <_raise_r+0x14>
   1c58c:	2316      	movs	r3, #22
   1c58e:	6003      	str	r3, [r0, #0]
   1c590:	f04f 30ff 	mov.w	r0, #4294967295
   1c594:	bd38      	pop	{r3, r4, r5, pc}
   1c596:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c598:	b112      	cbz	r2, 1c5a0 <_raise_r+0x1e>
   1c59a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1c59e:	b94b      	cbnz	r3, 1c5b4 <_raise_r+0x32>
   1c5a0:	4620      	mov	r0, r4
   1c5a2:	f000 f816 	bl	1c5d2 <_getpid_r>
   1c5a6:	462a      	mov	r2, r5
   1c5a8:	4601      	mov	r1, r0
   1c5aa:	4620      	mov	r0, r4
   1c5ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c5b0:	f7fd bf76 	b.w	1a4a0 <_kill_r>
   1c5b4:	2b01      	cmp	r3, #1
   1c5b6:	d00a      	beq.n	1c5ce <_raise_r+0x4c>
   1c5b8:	1c59      	adds	r1, r3, #1
   1c5ba:	d103      	bne.n	1c5c4 <_raise_r+0x42>
   1c5bc:	2316      	movs	r3, #22
   1c5be:	6003      	str	r3, [r0, #0]
   1c5c0:	2001      	movs	r0, #1
   1c5c2:	e7e7      	b.n	1c594 <_raise_r+0x12>
   1c5c4:	2400      	movs	r4, #0
   1c5c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1c5ca:	4628      	mov	r0, r5
   1c5cc:	4798      	blx	r3
   1c5ce:	2000      	movs	r0, #0
   1c5d0:	e7e0      	b.n	1c594 <_raise_r+0x12>

0001c5d2 <_getpid_r>:
   1c5d2:	f7fe bc73 	b.w	1aebc <_getpid>

0001c5d6 <__sread>:
   1c5d6:	b510      	push	{r4, lr}
   1c5d8:	460c      	mov	r4, r1
   1c5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1c5de:	f7fd ffc7 	bl	1a570 <_read_r>
   1c5e2:	2800      	cmp	r0, #0
   1c5e4:	bfab      	itete	ge
   1c5e6:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   1c5e8:	89a3      	ldrhlt	r3, [r4, #12]
   1c5ea:	181b      	addge	r3, r3, r0
   1c5ec:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   1c5f0:	bfac      	ite	ge
   1c5f2:	6563      	strge	r3, [r4, #84]	; 0x54
   1c5f4:	81a3      	strhlt	r3, [r4, #12]
   1c5f6:	bd10      	pop	{r4, pc}

0001c5f8 <__swrite>:
   1c5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5fc:	461f      	mov	r7, r3
   1c5fe:	898b      	ldrh	r3, [r1, #12]
   1c600:	05db      	lsls	r3, r3, #23
   1c602:	4605      	mov	r5, r0
   1c604:	460c      	mov	r4, r1
   1c606:	4616      	mov	r6, r2
   1c608:	d505      	bpl.n	1c616 <__swrite+0x1e>
   1c60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1c60e:	2302      	movs	r3, #2
   1c610:	2200      	movs	r2, #0
   1c612:	f7fd ff9b 	bl	1a54c <_lseek_r>
   1c616:	89a3      	ldrh	r3, [r4, #12]
   1c618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1c61c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1c620:	81a3      	strh	r3, [r4, #12]
   1c622:	4632      	mov	r2, r6
   1c624:	463b      	mov	r3, r7
   1c626:	4628      	mov	r0, r5
   1c628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c62c:	f7fd bf4a 	b.w	1a4c4 <_write_r>

0001c630 <__sseek>:
   1c630:	b510      	push	{r4, lr}
   1c632:	460c      	mov	r4, r1
   1c634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1c638:	f7fd ff88 	bl	1a54c <_lseek_r>
   1c63c:	1c43      	adds	r3, r0, #1
   1c63e:	89a3      	ldrh	r3, [r4, #12]
   1c640:	bf15      	itete	ne
   1c642:	6560      	strne	r0, [r4, #84]	; 0x54
   1c644:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1c648:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1c64c:	81a3      	strheq	r3, [r4, #12]
   1c64e:	bf18      	it	ne
   1c650:	81a3      	strhne	r3, [r4, #12]
   1c652:	bd10      	pop	{r4, pc}

0001c654 <__sclose>:
   1c654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1c658:	f7fd bf46 	b.w	1a4e8 <_close_r>

0001c65c <__ascii_mbtowc>:
   1c65c:	b082      	sub	sp, #8
   1c65e:	b901      	cbnz	r1, 1c662 <__ascii_mbtowc+0x6>
   1c660:	a901      	add	r1, sp, #4
   1c662:	b142      	cbz	r2, 1c676 <__ascii_mbtowc+0x1a>
   1c664:	b14b      	cbz	r3, 1c67a <__ascii_mbtowc+0x1e>
   1c666:	7813      	ldrb	r3, [r2, #0]
   1c668:	600b      	str	r3, [r1, #0]
   1c66a:	7812      	ldrb	r2, [r2, #0]
   1c66c:	1e10      	subs	r0, r2, #0
   1c66e:	bf18      	it	ne
   1c670:	2001      	movne	r0, #1
   1c672:	b002      	add	sp, #8
   1c674:	4770      	bx	lr
   1c676:	4610      	mov	r0, r2
   1c678:	e7fb      	b.n	1c672 <__ascii_mbtowc+0x16>
   1c67a:	f06f 0001 	mvn.w	r0, #1
   1c67e:	e7f8      	b.n	1c672 <__ascii_mbtowc+0x16>

0001c680 <__ascii_wctomb>:
   1c680:	4603      	mov	r3, r0
   1c682:	4608      	mov	r0, r1
   1c684:	b141      	cbz	r1, 1c698 <__ascii_wctomb+0x18>
   1c686:	2aff      	cmp	r2, #255	; 0xff
   1c688:	d904      	bls.n	1c694 <__ascii_wctomb+0x14>
   1c68a:	228a      	movs	r2, #138	; 0x8a
   1c68c:	601a      	str	r2, [r3, #0]
   1c68e:	f04f 30ff 	mov.w	r0, #4294967295
   1c692:	4770      	bx	lr
   1c694:	700a      	strb	r2, [r1, #0]
   1c696:	2001      	movs	r0, #1
   1c698:	4770      	bx	lr
	...

0001c69c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1c69c:	f7f8 b860 	b.w	14760 <SystemInit>
