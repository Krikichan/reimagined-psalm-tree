
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20002820 	.word	0x20002820
}
   4:	00003355 	.word	0x00003355
   8:	000097d1 	.word	0x000097d1
   c:	00003329 	.word	0x00003329
  10:	00003329 	.word	0x00003329
  14:	00003329 	.word	0x00003329
  18:	00003329 	.word	0x00003329
	...
  2c:	00002d29 	.word	0x00002d29
  30:	00003329 	.word	0x00003329
  34:	00000000 	.word	0x00000000
  38:	00002cd5 	.word	0x00002cd5
  3c:	00003329 	.word	0x00003329

00000040 <_irq_vector_table>:
  40:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..
  50:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..
  60:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..
  70:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..
  80:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..
  90:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..
  a0:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..
  b0:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..
  c0:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..
  d0:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..
  e0:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..
  f0:	00002de1 00002de1 00002de1 00002de1     .-...-...-...-..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_IDLE_STACK_SIZE+0x26e>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_IDLE_STACK_SIZE+0x29c>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_IDLE_STACK_SIZE+0x280>
     38c:	d016      	beq.n	3bc <CONFIG_IDLE_STACK_SIZE+0x27c>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_IDLE_STACK_SIZE+0x268>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <reset_memory_slab>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
     3f4:	4b15      	ldr	r3, [pc, #84]	; (44c <CONFIG_FLASH_SIZE+0x4c>)
     3f6:	4816      	ldr	r0, [pc, #88]	; (450 <CONFIG_FLASH_SIZE+0x50>)
    return 0;
}

static void reset_memory_slab(){

    LOG_DBG("Reseting Memory Slab, Block Count %d",block_count);
     3f8:	4a16      	ldr	r2, [pc, #88]	; (454 <CONFIG_FLASH_SIZE+0x54>)
     3fa:	4917      	ldr	r1, [pc, #92]	; (458 <CONFIG_FLASH_SIZE+0x58>)
     3fc:	1ac0      	subs	r0, r0, r3
static void reset_memory_slab(){
     3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     402:	08c0      	lsrs	r0, r0, #3
    LOG_DBG("Reseting Memory Slab, Block Count %d",block_count);
     404:	4e15      	ldr	r6, [pc, #84]	; (45c <CONFIG_FLASH_SIZE+0x5c>)
     406:	4c16      	ldr	r4, [pc, #88]	; (460 <CONFIG_FLASH_SIZE+0x60>)
     408:	7833      	ldrb	r3, [r6, #0]

            //Free Used Block
#if DBG_SHOW_BUFFER_LOGIK
            LOG_DBG("Free Slab , idx %d",i);
#endif
            k_mem_slab_free(&uart_slab, (void **)&(block_list[i].buffer_ptr));
     40a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 468 <CONFIG_FLASH_SIZE+0x68>
    LOG_DBG("Reseting Memory Slab, Block Count %d",block_count);
     40e:	0180      	lsls	r0, r0, #6
     410:	f040 0004 	orr.w	r0, r0, #4
     414:	f009 f98f 	bl	9736 <log_string_sync>
    for(uint16_t i = 0; i < UART_RX_BUF_NUM ; i++){
     418:	2700      	movs	r7, #0

            //Reset All entrys
            block_list[i].buffer_ptr=NULL;
     41a:	463d      	mov	r5, r7
        if(block_list[i].buffer_ptr != NULL){
     41c:	6823      	ldr	r3, [r4, #0]
     41e:	b143      	cbz	r3, 432 <CONFIG_FLASH_SIZE+0x32>
            k_mem_slab_free(&uart_slab, (void **)&(block_list[i].buffer_ptr));
     420:	4621      	mov	r1, r4
     422:	4640      	mov	r0, r8
     424:	f006 fb42 	bl	6aac <k_mem_slab_free>
            block_list[i].buffer_ptr=NULL;
     428:	6025      	str	r5, [r4, #0]
            block_list[i].in_use_app=0;
     42a:	7265      	strb	r5, [r4, #9]
            block_list[i].in_use_uart=0;
     42c:	7225      	strb	r5, [r4, #8]
            block_list[i].rec_len=0;
     42e:	80e5      	strh	r5, [r4, #6]
            block_list[i].rec_offset=0;
     430:	80a5      	strh	r5, [r4, #4]
    for(uint16_t i = 0; i < UART_RX_BUF_NUM ; i++){
     432:	3701      	adds	r7, #1
     434:	2f04      	cmp	r7, #4
     436:	f104 040c 	add.w	r4, r4, #12
     43a:	d1ef      	bne.n	41c <CONFIG_FLASH_SIZE+0x1c>
        }
    }
    block_count = 0;
     43c:	2300      	movs	r3, #0
     43e:	7033      	strb	r3, [r6, #0]
    free_entry = -1;
     440:	4b08      	ldr	r3, [pc, #32]	; (464 <CONFIG_FLASH_SIZE+0x64>)
     442:	22ff      	movs	r2, #255	; 0xff
     444:	701a      	strb	r2, [r3, #0]
}
     446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     44a:	bf00      	nop
     44c:	0000a33c 	.word	0x0000a33c
     450:	0000a38c 	.word	0x0000a38c
     454:	0000a762 	.word	0x0000a762
     458:	0000a62c 	.word	0x0000a62c
     45c:	2000122e 	.word	0x2000122e
     460:	20000930 	.word	0x20000930
     464:	20000208 	.word	0x20000208
     468:	200006b0 	.word	0x200006b0

0000046c <get_buffer>:
static uint8_t* get_buffer(){
     46c:	b570      	push	{r4, r5, r6, lr}
    if(free_entry != OOB_INDX){
     46e:	4b14      	ldr	r3, [pc, #80]	; (4c0 <get_buffer+0x54>)
     470:	4e14      	ldr	r6, [pc, #80]	; (4c4 <get_buffer+0x58>)
     472:	781d      	ldrb	r5, [r3, #0]
    err = k_mem_slab_alloc(&uart_slab, (void **)&(block_list[idx].buffer_ptr), K_NO_WAIT);
     474:	4c14      	ldr	r4, [pc, #80]	; (4c8 <get_buffer+0x5c>)
     476:	4815      	ldr	r0, [pc, #84]	; (4cc <get_buffer+0x60>)
    if(free_entry != OOB_INDX){
     478:	2d05      	cmp	r5, #5
        idx = block_count;
     47a:	bf0c      	ite	eq
     47c:	7835      	ldrbeq	r5, [r6, #0]
        free_entry = OOB_INDX;
     47e:	2205      	movne	r2, #5
    err = k_mem_slab_alloc(&uart_slab, (void **)&(block_list[idx].buffer_ptr), K_NO_WAIT);
     480:	eb05 0145 	add.w	r1, r5, r5, lsl #1
        free_entry = OOB_INDX;
     484:	bf18      	it	ne
     486:	701a      	strbne	r2, [r3, #0]
    err = k_mem_slab_alloc(&uart_slab, (void **)&(block_list[idx].buffer_ptr), K_NO_WAIT);
     488:	eb04 0181 	add.w	r1, r4, r1, lsl #2
     48c:	2200      	movs	r2, #0
     48e:	2300      	movs	r3, #0
     490:	f006 fab2 	bl	69f8 <k_mem_slab_alloc>
	__ASSERT(err == 0, "Failed to alloc slab");
     494:	b150      	cbz	r0, 4ac <get_buffer+0x40>
     496:	490e      	ldr	r1, [pc, #56]	; (4d0 <get_buffer+0x64>)
     498:	480e      	ldr	r0, [pc, #56]	; (4d4 <get_buffer+0x68>)
     49a:	f240 1211 	movw	r2, #273	; 0x111
     49e:	f009 f869 	bl	9574 <printk>
     4a2:	480b      	ldr	r0, [pc, #44]	; (4d0 <get_buffer+0x64>)
     4a4:	f240 1111 	movw	r1, #273	; 0x111
     4a8:	f009 f930 	bl	970c <assert_post_action>
    block_count++;
     4ac:	7833      	ldrb	r3, [r6, #0]
     4ae:	3301      	adds	r3, #1
     4b0:	7033      	strb	r3, [r6, #0]
    block_list[idx].in_use_uart = 1;
     4b2:	230c      	movs	r3, #12
     4b4:	436b      	muls	r3, r5
     4b6:	18e2      	adds	r2, r4, r3
     4b8:	2101      	movs	r1, #1
     4ba:	7211      	strb	r1, [r2, #8]
}
     4bc:	58e0      	ldr	r0, [r4, r3]
     4be:	bd70      	pop	{r4, r5, r6, pc}
     4c0:	20000208 	.word	0x20000208
     4c4:	2000122e 	.word	0x2000122e
     4c8:	20000930 	.word	0x20000930
     4cc:	200006b0 	.word	0x200006b0
     4d0:	0000a655 	.word	0x0000a655
     4d4:	0000a66d 	.word	0x0000a66d

000004d8 <uart_callback>:
{
     4d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     4dc:	4614      	mov	r4, r2
    switch (evt->type) {
     4de:	780a      	ldrb	r2, [r1, #0]
{
     4e0:	460b      	mov	r3, r1
     4e2:	2a06      	cmp	r2, #6
     4e4:	d80a      	bhi.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     4e6:	e8df f002 	tbb	[pc, r2]
     4ea:	0c04      	.short	0x0c04
     4ec:	613b261d 	.word	0x613b261d
     4f0:	6d          	.byte	0x6d
     4f1:	00          	.byte	0x00
        if(m_tx_cb)
     4f2:	4b47      	ldr	r3, [pc, #284]	; (610 <__data_size+0x6>)
     4f4:	681b      	ldr	r3, [r3, #0]
     4f6:	b10b      	cbz	r3, 4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
            m_tx_cb(evt->type);
     4f8:	2000      	movs	r0, #0
            m_tx_cb(-1);
     4fa:	4798      	blx	r3
}
     4fc:	b004      	add	sp, #16
     4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     502:	4b44      	ldr	r3, [pc, #272]	; (614 <__data_size+0xa>)
     504:	4844      	ldr	r0, [pc, #272]	; (618 <__data_size+0xe>)
        LOG_ERR("Tx aborted");
     506:	4945      	ldr	r1, [pc, #276]	; (61c <__data_size+0x12>)
     508:	1ac0      	subs	r0, r0, r3
     50a:	08c0      	lsrs	r0, r0, #3
     50c:	0180      	lsls	r0, r0, #6
     50e:	f040 0001 	orr.w	r0, r0, #1
     512:	f009 f910 	bl	9736 <log_string_sync>
        if (m_tx_cb) {
     516:	4b3e      	ldr	r3, [pc, #248]	; (610 <__data_size+0x6>)
     518:	681b      	ldr	r3, [r3, #0]
     51a:	2b00      	cmp	r3, #0
     51c:	d0ee      	beq.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
            m_tx_cb(-1);
     51e:	f04f 30ff 	mov.w	r0, #4294967295
     522:	e7ea      	b.n	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
        if (m_rx_cb)
     524:	4a3e      	ldr	r2, [pc, #248]	; (620 <__data_size+0x16>)
     526:	6814      	ldr	r4, [r2, #0]
     528:	2c00      	cmp	r4, #0
     52a:	d0e7      	beq.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
            m_rx_cb(evt->data.rx.buf, evt->data.rx.len,evt->data.rx.offset);
     52c:	891a      	ldrh	r2, [r3, #8]
     52e:	8999      	ldrh	r1, [r3, #12]
     530:	6858      	ldr	r0, [r3, #4]
     532:	47a0      	blx	r4
     534:	e7e2      	b.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
		err = uart_rx_buf_rsp(uart, get_buffer(), UART_RX_LEN);
     536:	f7ff ff99 	bl	46c <get_buffer>
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
     53a:	68a3      	ldr	r3, [r4, #8]
     53c:	4601      	mov	r1, r0
     53e:	691b      	ldr	r3, [r3, #16]
     540:	f44f 6282 	mov.w	r2, #1040	; 0x410
     544:	4620      	mov	r0, r4
     546:	4798      	blx	r3
		__ASSERT(err == 0, "Failed to provide new buffer");
     548:	2800      	cmp	r0, #0
     54a:	d0d7      	beq.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     54c:	4935      	ldr	r1, [pc, #212]	; (624 <__data_size+0x1a>)
     54e:	4836      	ldr	r0, [pc, #216]	; (628 <__data_size+0x1e>)
     550:	2262      	movs	r2, #98	; 0x62
     552:	f009 f80f 	bl	9574 <printk>
     556:	4833      	ldr	r0, [pc, #204]	; (624 <__data_size+0x1a>)
     558:	2162      	movs	r1, #98	; 0x62
     55a:	f009 f8d7 	bl	970c <assert_post_action>
     55e:	e7cd      	b.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
        release_buffer(evt->data.rx_buf.buf,0);
     560:	685a      	ldr	r2, [r3, #4]
        if(block_list[i].buffer_ptr == buff){
     562:	4f32      	ldr	r7, [pc, #200]	; (62c <__data_size+0x22>)
     564:	9203      	str	r2, [sp, #12]
        release_buffer(evt->data.rx_buf.buf,0);
     566:	2300      	movs	r3, #0
        if(block_list[i].buffer_ptr == buff){
     568:	210c      	movs	r1, #12
     56a:	fb01 f603 	mul.w	r6, r1, r3
     56e:	fa5f f883 	uxtb.w	r8, r3
     572:	59f0      	ldr	r0, [r6, r7]
     574:	4282      	cmp	r2, r0
     576:	d039      	beq.n	5ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x104>
    for(uint8_t i = 0; i < UART_RX_BUF_NUM ; i++){
     578:	3301      	adds	r3, #1
     57a:	2b04      	cmp	r3, #4
     57c:	d1f5      	bne.n	56a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x82>
     57e:	4826      	ldr	r0, [pc, #152]	; (618 <__data_size+0xe>)
     580:	4b24      	ldr	r3, [pc, #144]	; (614 <__data_size+0xa>)
        LOG_ERR("Buffer not in Registry");
     582:	492b      	ldr	r1, [pc, #172]	; (630 <__data_size+0x26>)
     584:	1ac0      	subs	r0, r0, r3
     586:	08c0      	lsrs	r0, r0, #3
     588:	0180      	lsls	r0, r0, #6
     58a:	f040 0001 	orr.w	r0, r0, #1
     58e:	e03b      	b.n	608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>
    k_mem_slab_free(&uart_slab, (void **)&buff);
     590:	4828      	ldr	r0, [pc, #160]	; (634 <__data_size+0x2a>)
     592:	a903      	add	r1, sp, #12
     594:	f006 fa8a 	bl	6aac <k_mem_slab_free>
    --block_count;
     598:	4a27      	ldr	r2, [pc, #156]	; (638 <__data_size+0x2e>)
    block_list[found_idx].buffer_ptr=NULL;
     59a:	51bc      	str	r4, [r7, r6]
    --block_count;
     59c:	7813      	ldrb	r3, [r2, #0]
    block_list[found_idx].rec_offset=0;
     59e:	606c      	str	r4, [r5, #4]
    --block_count;
     5a0:	3b01      	subs	r3, #1
     5a2:	7013      	strb	r3, [r2, #0]
    free_entry = found_idx;
     5a4:	4b25      	ldr	r3, [pc, #148]	; (63c <__data_size+0x32>)
     5a6:	f883 8000 	strb.w	r8, [r3]
        break;
     5aa:	e7a7      	b.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     5ac:	4b19      	ldr	r3, [pc, #100]	; (614 <__data_size+0xa>)
     5ae:	481a      	ldr	r0, [pc, #104]	; (618 <__data_size+0xe>)
        LOG_DBG("UART_RX_DISABLED");
     5b0:	4a23      	ldr	r2, [pc, #140]	; (640 <__data_size+0x36>)
     5b2:	4924      	ldr	r1, [pc, #144]	; (644 <__data_size+0x3a>)
     5b4:	1ac0      	subs	r0, r0, r3
     5b6:	08c0      	lsrs	r0, r0, #3
     5b8:	0180      	lsls	r0, r0, #6
     5ba:	f040 0004 	orr.w	r0, r0, #4
     5be:	f009 f8ba 	bl	9736 <log_string_sync>
     5c2:	e79b      	b.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     5c4:	4b13      	ldr	r3, [pc, #76]	; (614 <__data_size+0xa>)
     5c6:	4814      	ldr	r0, [pc, #80]	; (618 <__data_size+0xe>)
        LOG_DBG("UART_RX_STOPPED");
     5c8:	4a1d      	ldr	r2, [pc, #116]	; (640 <__data_size+0x36>)
     5ca:	491f      	ldr	r1, [pc, #124]	; (648 <__data_size+0x3e>)
     5cc:	1ac0      	subs	r0, r0, r3
     5ce:	08c0      	lsrs	r0, r0, #3
     5d0:	0180      	lsls	r0, r0, #6
     5d2:	f040 0004 	orr.w	r0, r0, #4
     5d6:	f009 f8ae 	bl	9736 <log_string_sync>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     5da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     5de:	2300      	movs	r3, #0
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
     5e0:	481a      	ldr	r0, [pc, #104]	; (64c <__data_size+0x42>)
     5e2:	e9cd 2300 	strd	r2, r3, [sp]
     5e6:	f008 fd37 	bl	9058 <z_impl_k_timer_start>
}
     5ea:	e787      	b.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
        block_list[found_idx].in_use_uart = 0;
     5ec:	19bd      	adds	r5, r7, r6
     5ee:	2300      	movs	r3, #0
    if(block_list[found_idx].in_use_app || block_list[found_idx].in_use_uart){ //If either is Activ
     5f0:	7a6c      	ldrb	r4, [r5, #9]
        block_list[found_idx].in_use_uart = 0;
     5f2:	722b      	strb	r3, [r5, #8]
    if(block_list[found_idx].in_use_app || block_list[found_idx].in_use_uart){ //If either is Activ
     5f4:	2c00      	cmp	r4, #0
     5f6:	d0cb      	beq.n	590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>
     5f8:	4807      	ldr	r0, [pc, #28]	; (618 <__data_size+0xe>)
     5fa:	4b06      	ldr	r3, [pc, #24]	; (614 <__data_size+0xa>)
        LOG_INF("Buffer Still in Use");
     5fc:	4914      	ldr	r1, [pc, #80]	; (650 <__data_size+0x46>)
     5fe:	1ac0      	subs	r0, r0, r3
     600:	08c0      	lsrs	r0, r0, #3
     602:	0180      	lsls	r0, r0, #6
     604:	f040 0003 	orr.w	r0, r0, #3
        LOG_ERR("Buffer not in Registry");
     608:	f009 f895 	bl	9736 <log_string_sync>
        return -1;
     60c:	e776      	b.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     60e:	bf00      	nop
     610:	20000968 	.word	0x20000968
     614:	0000a33c 	.word	0x0000a33c
     618:	0000a38c 	.word	0x0000a38c
     61c:	0000a685 	.word	0x0000a685
     620:	20000964 	.word	0x20000964
     624:	0000a655 	.word	0x0000a655
     628:	0000a66d 	.word	0x0000a66d
     62c:	20000930 	.word	0x20000930
     630:	0000a6cd 	.word	0x0000a6cd
     634:	200006b0 	.word	0x200006b0
     638:	2000122e 	.word	0x2000122e
     63c:	20000208 	.word	0x20000208
     640:	0000a73e 	.word	0x0000a73e
     644:	0000a6a4 	.word	0x0000a6a4
     648:	0000a6b9 	.word	0x0000a6b9
     64c:	20000658 	.word	0x20000658
     650:	0000a690 	.word	0x0000a690

00000654 <uart_send>:
{
     654:	b538      	push	{r3, r4, r5, lr}
    if (m_device == NULL) {
     656:	4b10      	ldr	r3, [pc, #64]	; (698 <uart_send+0x44>)
{
     658:	4604      	mov	r4, r0
    if (m_device == NULL) {
     65a:	6818      	ldr	r0, [r3, #0]
{
     65c:	460a      	mov	r2, r1
    if (m_device == NULL) {
     65e:	b1b8      	cbz	r0, 690 <uart_send+0x3c>
    if (p_data != NULL && length != 0) {
     660:	b1b4      	cbz	r4, 690 <uart_send+0x3c>
     662:	b1a9      	cbz	r1, 690 <uart_send+0x3c>
	return api->tx(dev, buf, len, timeout);
     664:	6883      	ldr	r3, [r0, #8]
     666:	4621      	mov	r1, r4
     668:	685d      	ldr	r5, [r3, #4]
     66a:	f242 7310 	movw	r3, #10000	; 0x2710
     66e:	47a8      	blx	r5
        if (err < 0) {
     670:	1e04      	subs	r4, r0, #0
     672:	da0b      	bge.n	68c <uart_send+0x38>
     674:	4b09      	ldr	r3, [pc, #36]	; (69c <uart_send+0x48>)
     676:	480a      	ldr	r0, [pc, #40]	; (6a0 <uart_send+0x4c>)
            LOG_ERR("%s, err:%d", __func__, err);
     678:	4a0a      	ldr	r2, [pc, #40]	; (6a4 <uart_send+0x50>)
     67a:	490b      	ldr	r1, [pc, #44]	; (6a8 <uart_send+0x54>)
     67c:	1ac0      	subs	r0, r0, r3
     67e:	08c0      	lsrs	r0, r0, #3
     680:	0180      	lsls	r0, r0, #6
     682:	4623      	mov	r3, r4
     684:	f040 0001 	orr.w	r0, r0, #1
     688:	f009 f855 	bl	9736 <log_string_sync>
}
     68c:	4620      	mov	r0, r4
     68e:	bd38      	pop	{r3, r4, r5, pc}
        return err;
     690:	f04f 34ff 	mov.w	r4, #4294967295
     694:	e7fa      	b.n	68c <uart_send+0x38>
     696:	bf00      	nop
     698:	20000960 	.word	0x20000960
     69c:	0000a33c 	.word	0x0000a33c
     6a0:	0000a38c 	.word	0x0000a38c
     6a4:	0000a74c 	.word	0x0000a74c
     6a8:	0000a6e4 	.word	0x0000a6e4

000006ac <uart_init>:
{
     6ac:	b538      	push	{r3, r4, r5, lr}
     6ae:	4602      	mov	r2, r0
    if (p_device == NULL) {
     6b0:	2800      	cmp	r0, #0
     6b2:	d03c      	beq.n	72e <uart_init+0x82>
    m_rx_cb = NULL;
     6b4:	4c1f      	ldr	r4, [pc, #124]	; (734 <uart_init+0x88>)
    m_device = p_device;
     6b6:	4b20      	ldr	r3, [pc, #128]	; (738 <uart_init+0x8c>)
    m_rx_cb = NULL;
     6b8:	2100      	movs	r1, #0
     6ba:	6021      	str	r1, [r4, #0]
    m_tx_cb = NULL;
     6bc:	4c1f      	ldr	r4, [pc, #124]	; (73c <uart_init+0x90>)
    m_device = p_device;
     6be:	6018      	str	r0, [r3, #0]
    m_tx_cb = NULL;
     6c0:	6021      	str	r1, [r4, #0]
	if (api->callback_set == NULL) {
     6c2:	6881      	ldr	r1, [r0, #8]
     6c4:	680d      	ldr	r5, [r1, #0]
     6c6:	461c      	mov	r4, r3
     6c8:	bb65      	cbnz	r5, 724 <uart_init+0x78>
    __ASSERT(err == 0, "Failed to set callback");
     6ca:	491d      	ldr	r1, [pc, #116]	; (740 <uart_init+0x94>)
     6cc:	481d      	ldr	r0, [pc, #116]	; (744 <uart_init+0x98>)
     6ce:	22b2      	movs	r2, #178	; 0xb2
     6d0:	f008 ff50 	bl	9574 <printk>
     6d4:	481a      	ldr	r0, [pc, #104]	; (740 <uart_init+0x94>)
     6d6:	21b2      	movs	r1, #178	; 0xb2
     6d8:	f009 f818 	bl	970c <assert_post_action>
{
     6dc:	2100      	movs	r1, #0
     6de:	4b1a      	ldr	r3, [pc, #104]	; (748 <uart_init+0x9c>)
        block_list[i].buffer_ptr=NULL;
     6e0:	460a      	mov	r2, r1
    for(size_t i = 0; i < UART_RX_BUF_NUM ; i++){
     6e2:	3101      	adds	r1, #1
     6e4:	2904      	cmp	r1, #4
        block_list[i].buffer_ptr=NULL;
     6e6:	601a      	str	r2, [r3, #0]
        block_list[i].in_use_app=0;
     6e8:	725a      	strb	r2, [r3, #9]
        block_list[i].in_use_uart=0;
     6ea:	721a      	strb	r2, [r3, #8]
        block_list[i].rec_len=0;
     6ec:	80da      	strh	r2, [r3, #6]
        block_list[i].rec_offset=0;
     6ee:	809a      	strh	r2, [r3, #4]
    for(size_t i = 0; i < UART_RX_BUF_NUM ; i++){
     6f0:	f103 030c 	add.w	r3, r3, #12
     6f4:	d1f5      	bne.n	6e2 <uart_init+0x36>
    err = uart_rx_enable(m_device,get_buffer(),UART_RX_LEN, UART_RX_TIMEOUT_MS);
     6f6:	6824      	ldr	r4, [r4, #0]
     6f8:	f7ff feb8 	bl	46c <get_buffer>
     6fc:	4601      	mov	r1, r0
	return api->rx_enable(dev, buf, len, timeout);
     6fe:	68a3      	ldr	r3, [r4, #8]
     700:	f44f 6282 	mov.w	r2, #1040	; 0x410
     704:	68dd      	ldr	r5, [r3, #12]
     706:	4620      	mov	r0, r4
     708:	2314      	movs	r3, #20
     70a:	47a8      	blx	r5
    __ASSERT(err == 0, "Failed to enable RX");
     70c:	b148      	cbz	r0, 722 <uart_init+0x76>
     70e:	490c      	ldr	r1, [pc, #48]	; (740 <uart_init+0x94>)
     710:	480c      	ldr	r0, [pc, #48]	; (744 <uart_init+0x98>)
     712:	22c2      	movs	r2, #194	; 0xc2
     714:	f008 ff2e 	bl	9574 <printk>
     718:	4809      	ldr	r0, [pc, #36]	; (740 <uart_init+0x94>)
     71a:	21c2      	movs	r1, #194	; 0xc2
     71c:	f008 fff6 	bl	970c <assert_post_action>
    return 0;
     720:	2000      	movs	r0, #0
}
     722:	bd38      	pop	{r3, r4, r5, pc}
	return api->callback_set(dev, callback, user_data);
     724:	4909      	ldr	r1, [pc, #36]	; (74c <uart_init+0xa0>)
     726:	47a8      	blx	r5
    __ASSERT(err == 0, "Failed to set callback");
     728:	2800      	cmp	r0, #0
     72a:	d0d7      	beq.n	6dc <uart_init+0x30>
     72c:	e7cd      	b.n	6ca <uart_init+0x1e>
        return -ENXIO;
     72e:	f06f 0005 	mvn.w	r0, #5
     732:	e7f6      	b.n	722 <uart_init+0x76>
     734:	20000964 	.word	0x20000964
     738:	20000960 	.word	0x20000960
     73c:	20000968 	.word	0x20000968
     740:	0000a655 	.word	0x0000a655
     744:	0000a66d 	.word	0x0000a66d
     748:	20000930 	.word	0x20000930
     74c:	000004d9 	.word	0x000004d9

00000750 <uart_renable>:
int uart_renable(const struct device* p_device){
     750:	b538      	push	{r3, r4, r5, lr}
    if (p_device == NULL) {
     752:	4604      	mov	r4, r0
     754:	b960      	cbnz	r0, 770 <uart_renable+0x20>
     756:	4b1e      	ldr	r3, [pc, #120]	; (7d0 <uart_renable+0x80>)
     758:	481e      	ldr	r0, [pc, #120]	; (7d4 <uart_renable+0x84>)
        LOG_ERR("UART must be Device");
     75a:	491f      	ldr	r1, [pc, #124]	; (7d8 <uart_renable+0x88>)
     75c:	1ac0      	subs	r0, r0, r3
     75e:	08c0      	lsrs	r0, r0, #3
     760:	0180      	lsls	r0, r0, #6
     762:	f040 0001 	orr.w	r0, r0, #1
     766:	f008 ffe6 	bl	9736 <log_string_sync>
        return -ENXIO;
     76a:	f06f 0005 	mvn.w	r0, #5
}
     76e:	bd38      	pop	{r3, r4, r5, pc}
    m_device = p_device;
     770:	4d1a      	ldr	r5, [pc, #104]	; (7dc <uart_renable+0x8c>)
     772:	6028      	str	r0, [r5, #0]
    reset_memory_slab();
     774:	f7ff fe3e 	bl	3f4 <reset_memory_slab>
	if (api->callback_set == NULL) {
     778:	68a3      	ldr	r3, [r4, #8]
     77a:	681b      	ldr	r3, [r3, #0]
     77c:	bb03      	cbnz	r3, 7c0 <uart_renable+0x70>
    __ASSERT(err == 0, "Failed to set callback");
     77e:	4918      	ldr	r1, [pc, #96]	; (7e0 <uart_renable+0x90>)
     780:	4818      	ldr	r0, [pc, #96]	; (7e4 <uart_renable+0x94>)
     782:	22d5      	movs	r2, #213	; 0xd5
     784:	f008 fef6 	bl	9574 <printk>
     788:	4815      	ldr	r0, [pc, #84]	; (7e0 <uart_renable+0x90>)
     78a:	21d5      	movs	r1, #213	; 0xd5
     78c:	f008 ffbe 	bl	970c <assert_post_action>
        err = uart_rx_enable(m_device,get_buffer(),UART_RX_LEN, UART_RX_TIMEOUT_MS);
     790:	682c      	ldr	r4, [r5, #0]
     792:	f7ff fe6b 	bl	46c <get_buffer>
     796:	4601      	mov	r1, r0
	return api->rx_enable(dev, buf, len, timeout);
     798:	68a3      	ldr	r3, [r4, #8]
     79a:	f44f 6282 	mov.w	r2, #1040	; 0x410
     79e:	68dd      	ldr	r5, [r3, #12]
     7a0:	4620      	mov	r0, r4
     7a2:	2314      	movs	r3, #20
     7a4:	47a8      	blx	r5
    __ASSERT(err == 0, "Failed to enable RX");
     7a6:	2800      	cmp	r0, #0
     7a8:	d0e1      	beq.n	76e <uart_renable+0x1e>
     7aa:	490d      	ldr	r1, [pc, #52]	; (7e0 <uart_renable+0x90>)
     7ac:	480d      	ldr	r0, [pc, #52]	; (7e4 <uart_renable+0x94>)
     7ae:	22d8      	movs	r2, #216	; 0xd8
     7b0:	f008 fee0 	bl	9574 <printk>
     7b4:	480a      	ldr	r0, [pc, #40]	; (7e0 <uart_renable+0x90>)
     7b6:	21d8      	movs	r1, #216	; 0xd8
     7b8:	f008 ffa8 	bl	970c <assert_post_action>
    return 0;
     7bc:	2000      	movs	r0, #0
     7be:	e7d6      	b.n	76e <uart_renable+0x1e>
	return api->callback_set(dev, callback, user_data);
     7c0:	4909      	ldr	r1, [pc, #36]	; (7e8 <uart_renable+0x98>)
     7c2:	4622      	mov	r2, r4
     7c4:	4620      	mov	r0, r4
     7c6:	4798      	blx	r3
    __ASSERT(err == 0, "Failed to set callback");
     7c8:	2800      	cmp	r0, #0
     7ca:	d0e1      	beq.n	790 <uart_renable+0x40>
     7cc:	e7d7      	b.n	77e <uart_renable+0x2e>
     7ce:	bf00      	nop
     7d0:	0000a33c 	.word	0x0000a33c
     7d4:	0000a38c 	.word	0x0000a38c
     7d8:	0000a6ef 	.word	0x0000a6ef
     7dc:	20000960 	.word	0x20000960
     7e0:	0000a655 	.word	0x0000a655
     7e4:	0000a66d 	.word	0x0000a66d
     7e8:	000004d9 	.word	0x000004d9

000007ec <update_expiry_function>:
void update_expiry_function(struct k_timer *timer_id){
     7ec:	b510      	push	{r4, lr}
     7ee:	4b0d      	ldr	r3, [pc, #52]	; (824 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>)
     7f0:	4c0d      	ldr	r4, [pc, #52]	; (828 <CONFIG_HEAP_MEM_POOL_SIZE+0x28>)
	LOG_INF("Reset Uart");
     7f2:	490e      	ldr	r1, [pc, #56]	; (82c <CONFIG_HEAP_MEM_POOL_SIZE+0x2c>)
     7f4:	1ae4      	subs	r4, r4, r3
     7f6:	08e4      	lsrs	r4, r4, #3
     7f8:	01a4      	lsls	r4, r4, #6
     7fa:	f044 0003 	orr.w	r0, r4, #3
     7fe:	f008 ff9a 	bl	9736 <log_string_sync>
    err = uart_renable(m_device);
     802:	4b0b      	ldr	r3, [pc, #44]	; (830 <CONFIG_HEAP_MEM_POOL_SIZE+0x30>)
     804:	6818      	ldr	r0, [r3, #0]
     806:	f7ff ffa3 	bl	750 <uart_renable>
    if(err != 0){
     80a:	b130      	cbz	r0, 81a <CONFIG_HEAP_MEM_POOL_SIZE+0x1a>
        LOG_ERR("Hard Problem Enabling Uart");
     80c:	f044 0001 	orr.w	r0, r4, #1
     810:	4908      	ldr	r1, [pc, #32]	; (834 <CONFIG_HEAP_MEM_POOL_SIZE+0x34>)
}
     812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_ERR("Hard Problem Enabling Uart");
     816:	f008 bf8e 	b.w	9736 <log_string_sync>
		arch_syscall_invoke1(*(uintptr_t *)&timer, K_SYSCALL_K_TIMER_STOP);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_stop(timer);
     81a:	4807      	ldr	r0, [pc, #28]	; (838 <CONFIG_HEAP_MEM_POOL_SIZE+0x38>)
}
     81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     820:	f009 bc43 	b.w	a0aa <z_impl_k_timer_stop>
     824:	0000a33c 	.word	0x0000a33c
     828:	0000a38c 	.word	0x0000a38c
     82c:	0000a703 	.word	0x0000a703
     830:	20000960 	.word	0x20000960
     834:	0000a70e 	.word	0x0000a70e
     838:	20000658 	.word	0x20000658

0000083c <uart_uninit>:
    if (m_device == NULL) {
     83c:	4b0e      	ldr	r3, [pc, #56]	; (878 <uart_uninit+0x3c>)
     83e:	6818      	ldr	r0, [r3, #0]
{
     840:	b510      	push	{r4, lr}
    if (m_device == NULL) {
     842:	b1b8      	cbz	r0, 874 <uart_uninit+0x38>
    m_rx_cb = cb;
     844:	4a0d      	ldr	r2, [pc, #52]	; (87c <uart_uninit+0x40>)
     846:	2300      	movs	r3, #0
     848:	6013      	str	r3, [r2, #0]
    m_tx_cb = cb;
     84a:	4a0d      	ldr	r2, [pc, #52]	; (880 <uart_uninit+0x44>)
     84c:	6013      	str	r3, [r2, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
     84e:	6883      	ldr	r3, [r0, #8]
     850:	695b      	ldr	r3, [r3, #20]
     852:	4798      	blx	r3
    reset_memory_slab();
     854:	f7ff fdce 	bl	3f4 <reset_memory_slab>
     858:	4b0a      	ldr	r3, [pc, #40]	; (884 <uart_uninit+0x48>)
     85a:	480b      	ldr	r0, [pc, #44]	; (888 <uart_uninit+0x4c>)
    LOG_DBG("%s done", __func__);
     85c:	490b      	ldr	r1, [pc, #44]	; (88c <uart_uninit+0x50>)
     85e:	1ac0      	subs	r0, r0, r3
     860:	08c0      	lsrs	r0, r0, #3
     862:	4b0b      	ldr	r3, [pc, #44]	; (890 <uart_uninit+0x54>)
     864:	0180      	lsls	r0, r0, #6
}
     866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LOG_DBG("%s done", __func__);
     86a:	461a      	mov	r2, r3
     86c:	f040 0004 	orr.w	r0, r0, #4
     870:	f008 bf61 	b.w	9736 <log_string_sync>
}
     874:	bd10      	pop	{r4, pc}
     876:	bf00      	nop
     878:	20000960 	.word	0x20000960
     87c:	20000964 	.word	0x20000964
     880:	20000968 	.word	0x20000968
     884:	0000a33c 	.word	0x0000a33c
     888:	0000a38c 	.word	0x0000a38c
     88c:	0000a729 	.word	0x0000a729
     890:	0000a756 	.word	0x0000a756

00000894 <uart_rx_cb_set>:
    m_rx_cb = cb;
     894:	4b01      	ldr	r3, [pc, #4]	; (89c <uart_rx_cb_set+0x8>)
     896:	6018      	str	r0, [r3, #0]
}
     898:	4770      	bx	lr
     89a:	bf00      	nop
     89c:	20000964 	.word	0x20000964

000008a0 <uart_tx_cb_set>:
    m_tx_cb = cb;
     8a0:	4b01      	ldr	r3, [pc, #4]	; (8a8 <uart_tx_cb_set+0x8>)
     8a2:	6018      	str	r0, [r3, #0]
}
     8a4:	4770      	bx	lr
     8a6:	bf00      	nop
     8a8:	20000968 	.word	0x20000968

000008ac <rsp_cb_ping>:
     8ac:	4805      	ldr	r0, [pc, #20]	; (8c4 <rsp_cb_ping+0x18>)
     8ae:	4b06      	ldr	r3, [pc, #24]	; (8c8 <rsp_cb_ping+0x1c>)
}

/**@brief Callback function for ping response. */
static void rsp_cb_ping(uint8_t* p_rsp, uint16_t rsp_len)
{
    LOG_INF("%s", __func__);
     8b0:	4a06      	ldr	r2, [pc, #24]	; (8cc <rsp_cb_ping+0x20>)
     8b2:	4907      	ldr	r1, [pc, #28]	; (8d0 <rsp_cb_ping+0x24>)
     8b4:	1ac0      	subs	r0, r0, r3
     8b6:	08c0      	lsrs	r0, r0, #3
     8b8:	0180      	lsls	r0, r0, #6
     8ba:	f040 0003 	orr.w	r0, r0, #3
     8be:	f008 bf3a 	b.w	9736 <log_string_sync>
     8c2:	bf00      	nop
     8c4:	0000a344 	.word	0x0000a344
     8c8:	0000a33c 	.word	0x0000a33c
     8cc:	0000a9e8 	.word	0x0000a9e8
     8d0:	0000a778 	.word	0x0000a778

000008d4 <req_cb_raw_data>:
}

/**@brief Callback function for raw_data request. */
static int req_cb_raw_data(uint8_t* p_req, uint16_t req_len, cmd_respond_t respond)
{
     8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8d6:	4b11      	ldr	r3, [pc, #68]	; (91c <req_cb_raw_data+0x48>)
     8d8:	4c11      	ldr	r4, [pc, #68]	; (920 <req_cb_raw_data+0x4c>)
     8da:	1ae4      	subs	r4, r4, r3
     8dc:	08e4      	lsrs	r4, r4, #3
    LOG_DBG("%s", __func__);
     8de:	4b11      	ldr	r3, [pc, #68]	; (924 <req_cb_raw_data+0x50>)
     8e0:	01a4      	lsls	r4, r4, #6
{
     8e2:	460d      	mov	r5, r1
     8e4:	4607      	mov	r7, r0
     8e6:	4616      	mov	r6, r2
    LOG_DBG("%s", __func__);
     8e8:	490f      	ldr	r1, [pc, #60]	; (928 <req_cb_raw_data+0x54>)
     8ea:	461a      	mov	r2, r3
     8ec:	f044 0004 	orr.w	r0, r4, #4
     8f0:	f008 ff21 	bl	9736 <log_string_sync>
    char* rsp = "ok";

    // TODO: fill user function to handle raw data
    if (req_len > 0) {
     8f4:	b14d      	cbz	r5, 90a <req_cb_raw_data+0x36>
        LOG_HEXDUMP_INF(p_req, MIN(req_len, 8), "raw data:");
     8f6:	2d08      	cmp	r5, #8
     8f8:	462b      	mov	r3, r5
     8fa:	490c      	ldr	r1, [pc, #48]	; (92c <req_cb_raw_data+0x58>)
     8fc:	bf28      	it	cs
     8fe:	2308      	movcs	r3, #8
     900:	463a      	mov	r2, r7
     902:	f044 0003 	orr.w	r0, r4, #3
     906:	f001 fbf3 	bl	20f0 <log_hexdump_sync>
    }

    respond(rsp, strlen(rsp));
     90a:	4809      	ldr	r0, [pc, #36]	; (930 <req_cb_raw_data+0x5c>)
     90c:	f008 ff71 	bl	97f2 <strlen>
     910:	b281      	uxth	r1, r0
     912:	4807      	ldr	r0, [pc, #28]	; (930 <req_cb_raw_data+0x5c>)
     914:	47b0      	blx	r6

    return 0;
}
     916:	2000      	movs	r0, #0
     918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     91a:	bf00      	nop
     91c:	0000a33c 	.word	0x0000a33c
     920:	0000a344 	.word	0x0000a344
     924:	0000a9f4 	.word	0x0000a9f4
     928:	0000a774 	.word	0x0000a774
     92c:	0000a77b 	.word	0x0000a77b
     930:	0000a785 	.word	0x0000a785

00000934 <req_cb_ping>:
{
     934:	b538      	push	{r3, r4, r5, lr}
     936:	480a      	ldr	r0, [pc, #40]	; (960 <req_cb_ping+0x2c>)
     938:	4b0a      	ldr	r3, [pc, #40]	; (964 <req_cb_ping+0x30>)
    respond(rsp, strlen(rsp));
     93a:	4d0b      	ldr	r5, [pc, #44]	; (968 <req_cb_ping+0x34>)
    LOG_INF("%s", __func__);
     93c:	490b      	ldr	r1, [pc, #44]	; (96c <req_cb_ping+0x38>)
     93e:	1ac0      	subs	r0, r0, r3
     940:	08c0      	lsrs	r0, r0, #3
     942:	0180      	lsls	r0, r0, #6
{
     944:	4614      	mov	r4, r2
    LOG_INF("%s", __func__);
     946:	f040 0003 	orr.w	r0, r0, #3
     94a:	4a09      	ldr	r2, [pc, #36]	; (970 <req_cb_ping+0x3c>)
     94c:	f008 fef3 	bl	9736 <log_string_sync>
    respond(rsp, strlen(rsp));
     950:	4628      	mov	r0, r5
     952:	f008 ff4e 	bl	97f2 <strlen>
     956:	b281      	uxth	r1, r0
     958:	4628      	mov	r0, r5
     95a:	47a0      	blx	r4
}
     95c:	2000      	movs	r0, #0
     95e:	bd38      	pop	{r3, r4, r5, pc}
     960:	0000a344 	.word	0x0000a344
     964:	0000a33c 	.word	0x0000a33c
     968:	0000a785 	.word	0x0000a785
     96c:	0000a778 	.word	0x0000a778
     970:	0000a9dc 	.word	0x0000a9dc

00000974 <rsp_cb_raw_data>:

/**@brief Callback function for mtu_get response. */
static void rsp_cb_raw_data(uint8_t* p_rsp, uint16_t rsp_len)
{
     974:	b570      	push	{r4, r5, r6, lr}
     976:	4b0e      	ldr	r3, [pc, #56]	; (9b0 <rsp_cb_raw_data+0x3c>)
     978:	4c0e      	ldr	r4, [pc, #56]	; (9b4 <rsp_cb_raw_data+0x40>)
     97a:	1ae4      	subs	r4, r4, r3
     97c:	08e4      	lsrs	r4, r4, #3
    LOG_DBG("%s", __func__);
     97e:	4b0e      	ldr	r3, [pc, #56]	; (9b8 <rsp_cb_raw_data+0x44>)
     980:	01a4      	lsls	r4, r4, #6
{
     982:	460d      	mov	r5, r1
     984:	4606      	mov	r6, r0
    LOG_DBG("%s", __func__);
     986:	490d      	ldr	r1, [pc, #52]	; (9bc <rsp_cb_raw_data+0x48>)
     988:	461a      	mov	r2, r3
     98a:	f044 0004 	orr.w	r0, r4, #4
     98e:	f008 fed2 	bl	9736 <log_string_sync>

    if (rsp_len > 0) {
     992:	b15d      	cbz	r5, 9ac <rsp_cb_raw_data+0x38>
        LOG_HEXDUMP_INF(p_rsp, MIN(rsp_len, 8), "raw data:");
     994:	2d08      	cmp	r5, #8
     996:	462b      	mov	r3, r5
     998:	4632      	mov	r2, r6
     99a:	f044 0003 	orr.w	r0, r4, #3
     99e:	4908      	ldr	r1, [pc, #32]	; (9c0 <rsp_cb_raw_data+0x4c>)
    }
}
     9a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        LOG_HEXDUMP_INF(p_rsp, MIN(rsp_len, 8), "raw data:");
     9a4:	bf28      	it	cs
     9a6:	2308      	movcs	r3, #8
     9a8:	f001 bba2 	b.w	20f0 <log_hexdump_sync>
}
     9ac:	bd70      	pop	{r4, r5, r6, pc}
     9ae:	bf00      	nop
     9b0:	0000a33c 	.word	0x0000a33c
     9b4:	0000a344 	.word	0x0000a344
     9b8:	0000aa04 	.word	0x0000aa04
     9bc:	0000a774 	.word	0x0000a774
     9c0:	0000a77b 	.word	0x0000a77b

000009c4 <state_set.constprop.0>:
static void state_set(cmd_context_t* p_cmd_ctx, cmd_state_t new_state)
     9c4:	b513      	push	{r0, r1, r4, lr}
     9c6:	4b2f      	ldr	r3, [pc, #188]	; (a84 <state_set.constprop.0+0xc0>)
     9c8:	785c      	ldrb	r4, [r3, #1]
        if (mode_get(&m_cmd_ctx) != CMD_MODE_HOST) {
     9ca:	781a      	ldrb	r2, [r3, #0]
     9cc:	2100      	movs	r1, #0
    if (old_state != new_state) {
     9ce:	42a0      	cmp	r0, r4
     9d0:	d107      	bne.n	9e2 <state_set.constprop.0+0x1e>
     9d2:	b101      	cbz	r1, 9d6 <state_set.constprop.0+0x12>
     9d4:	7058      	strb	r0, [r3, #1]
}
     9d6:	b002      	add	sp, #8
     9d8:	bd10      	pop	{r4, pc}
static void state_set(cmd_context_t* p_cmd_ctx, cmd_state_t new_state)
     9da:	4604      	mov	r4, r0
     9dc:	2101      	movs	r1, #1
     9de:	2000      	movs	r0, #0
     9e0:	e7f5      	b.n	9ce <state_set.constprop.0+0xa>
    switch (state) {
     9e2:	280b      	cmp	r0, #11
     9e4:	d8f6      	bhi.n	9d4 <state_set.constprop.0+0x10>
     9e6:	a101      	add	r1, pc, #4	; (adr r1, 9ec <state_set.constprop.0+0x28>)
     9e8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     9ec:	00000a1d 	.word	0x00000a1d
     9f0:	00000a29 	.word	0x00000a29
     9f4:	00000a33 	.word	0x00000a33
     9f8:	00000a63 	.word	0x00000a63
     9fc:	00000a71 	.word	0x00000a71
     a00:	000009d5 	.word	0x000009d5
     a04:	000009db 	.word	0x000009db
     a08:	000009d5 	.word	0x000009d5
     a0c:	00000a4d 	.word	0x00000a4d
     a10:	000009db 	.word	0x000009db
     a14:	000009db 	.word	0x000009db
     a18:	00000a79 	.word	0x00000a79
     a1c:	2100      	movs	r1, #0
     a1e:	7059      	strb	r1, [r3, #1]
    if (old_mode != new_mode) {
     a20:	2a00      	cmp	r2, #0
     a22:	d0d8      	beq.n	9d6 <state_set.constprop.0+0x12>
        p_cmd_ctx->mode = new_mode;
     a24:	7019      	strb	r1, [r3, #0]
     a26:	e7d6      	b.n	9d6 <state_set.constprop.0+0x12>
     a28:	2101      	movs	r1, #1
    if (old_mode != new_mode) {
     a2a:	428a      	cmp	r2, r1
     a2c:	7059      	strb	r1, [r3, #1]
     a2e:	d1f9      	bne.n	a24 <state_set.constprop.0+0x60>
     a30:	e7d1      	b.n	9d6 <state_set.constprop.0+0x12>
     a32:	2202      	movs	r2, #2
     a34:	705a      	strb	r2, [r3, #1]
	z_impl_k_timer_start(timer, duration, period);
     a36:	2200      	movs	r2, #0
     a38:	2300      	movs	r3, #0
     a3a:	e9cd 2300 	strd	r2, r3, [sp]
     a3e:	4812      	ldr	r0, [pc, #72]	; (a88 <state_set.constprop.0+0xc4>)
     a40:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
     a44:	2300      	movs	r3, #0
     a46:	f008 fb07 	bl	9058 <z_impl_k_timer_start>
        break;
     a4a:	e7c4      	b.n	9d6 <state_set.constprop.0+0x12>
     a4c:	2208      	movs	r2, #8
     a4e:	705a      	strb	r2, [r3, #1]
	z_impl_k_timer_stop(timer);
     a50:	480d      	ldr	r0, [pc, #52]	; (a88 <state_set.constprop.0+0xc4>)
     a52:	f009 fb2a 	bl	a0aa <z_impl_k_timer_stop>
        k_work_submit(&wk_proc_rsp);
     a56:	480d      	ldr	r0, [pc, #52]	; (a8c <state_set.constprop.0+0xc8>)
}
     a58:	b002      	add	sp, #8
     a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        k_work_submit(&wk_proc_req);
     a5e:	f006 be01 	b.w	7664 <k_work_submit>
     a62:	2103      	movs	r1, #3
    if (old_mode != new_mode) {
     a64:	2a02      	cmp	r2, #2
     a66:	7059      	strb	r1, [r3, #1]
     a68:	d0b5      	beq.n	9d6 <state_set.constprop.0+0x12>
        p_cmd_ctx->mode = new_mode;
     a6a:	2202      	movs	r2, #2
     a6c:	701a      	strb	r2, [r3, #0]
     a6e:	e7b2      	b.n	9d6 <state_set.constprop.0+0x12>
     a70:	2204      	movs	r2, #4
        k_work_submit(&wk_proc_req);
     a72:	4807      	ldr	r0, [pc, #28]	; (a90 <state_set.constprop.0+0xcc>)
     a74:	705a      	strb	r2, [r3, #1]
     a76:	e7ef      	b.n	a58 <state_set.constprop.0+0x94>
        if (mode_get(&m_cmd_ctx) != CMD_MODE_HOST) {
     a78:	2a01      	cmp	r2, #1
     a7a:	d1ae      	bne.n	9da <state_set.constprop.0+0x16>
     a7c:	220b      	movs	r2, #11
     a7e:	705a      	strb	r2, [r3, #1]
}
     a80:	e7a9      	b.n	9d6 <state_set.constprop.0+0x12>
     a82:	bf00      	nop
     a84:	20000a5c 	.word	0x20000a5c
     a88:	20000620 	.word	0x20000620
     a8c:	20000a90 	.word	0x20000a90
     a90:	20000a80 	.word	0x20000a80

00000a94 <on_uart_tx_empty>:
    if (event == 0) {
     a94:	b9a0      	cbnz	r0, ac0 <on_uart_tx_empty+0x2c>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
     a96:	4b0b      	ldr	r3, [pc, #44]	; (ac4 <on_uart_tx_empty+0x30>)
     a98:	781b      	ldrb	r3, [r3, #0]
     a9a:	2b01      	cmp	r3, #1
     a9c:	d102      	bne.n	aa4 <on_uart_tx_empty+0x10>
        state_set(&m_cmd_ctx, CMD_STATE_REQ_SENT);
     a9e:	2002      	movs	r0, #2
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
     aa0:	f7ff bf90 	b.w	9c4 <state_set.constprop.0>
    else if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
     aa4:	2b02      	cmp	r3, #2
     aa6:	d101      	bne.n	aac <on_uart_tx_empty+0x18>
        state_set(&m_cmd_ctx, CMD_STATE_RSP_SENT);
     aa8:	2006      	movs	r0, #6
     aaa:	e7f9      	b.n	aa0 <on_uart_tx_empty+0xc>
     aac:	4806      	ldr	r0, [pc, #24]	; (ac8 <on_uart_tx_empty+0x34>)
     aae:	4b07      	ldr	r3, [pc, #28]	; (acc <on_uart_tx_empty+0x38>)
        LOG_ERR("Should not come here");
     ab0:	4907      	ldr	r1, [pc, #28]	; (ad0 <on_uart_tx_empty+0x3c>)
     ab2:	1ac0      	subs	r0, r0, r3
     ab4:	08c0      	lsrs	r0, r0, #3
     ab6:	0180      	lsls	r0, r0, #6
     ab8:	f040 0001 	orr.w	r0, r0, #1
     abc:	f008 be3b 	b.w	9736 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
     ac0:	200a      	movs	r0, #10
     ac2:	e7ed      	b.n	aa0 <on_uart_tx_empty+0xc>
     ac4:	20000a5c 	.word	0x20000a5c
     ac8:	0000a344 	.word	0x0000a344
     acc:	0000a33c 	.word	0x0000a33c
     ad0:	0000a788 	.word	0x0000a788

00000ad4 <cmd_send>:
{
     ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
     ad8:	4b1e      	ldr	r3, [pc, #120]	; (b54 <cmd_send+0x80>)
     ada:	781b      	ldrb	r3, [r3, #0]
     adc:	2b02      	cmp	r3, #2
{
     ade:	4607      	mov	r7, r0
        state_set(&m_cmd_ctx, CMD_STATE_RSP_SENDING);
     ae0:	bf0c      	ite	eq
     ae2:	2005      	moveq	r0, #5
        state_set(&m_cmd_ctx, CMD_STATE_REQ_SENDING);
     ae4:	2001      	movne	r0, #1
     ae6:	f7ff ff6d 	bl	9c4 <state_set.constprop.0>
    p_buff->length = 0;
     aea:	4b1b      	ldr	r3, [pc, #108]	; (b58 <cmd_send+0x84>)
    pdu_len = p_cmd->length;
     aec:	893d      	ldrh	r5, [r7, #8]
    p_packet = p_buff->p_data;
     aee:	681e      	ldr	r6, [r3, #0]
    p_buff->length = 0;
     af0:	2200      	movs	r2, #0
     af2:	605a      	str	r2, [r3, #4]
    p_packet[CMD_FMT_OFFSET_START] =
     af4:	783b      	ldrb	r3, [r7, #0]
     af6:	46b0      	mov	r8, r6
     af8:	2b01      	cmp	r3, #1
     afa:	bf0c      	ite	eq
     afc:	2369      	moveq	r3, #105	; 0x69
     afe:	2342      	movne	r3, #66	; 0x42
    uint16_encode(CMD_FMT_SIZE_OPCODE + pdu_len,
     b00:	b22c      	sxth	r4, r5
    p_packet[CMD_FMT_OFFSET_START] =
     b02:	f808 3b01 	strb.w	r3, [r8], #1
    uint16_encode(CMD_FMT_SIZE_OPCODE + pdu_len,
     b06:	1c63      	adds	r3, r4, #1
     b08:	b21b      	sxth	r3, r3
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
     b0a:	7073      	strb	r3, [r6, #1]
	dst[1] = val >> 8;
     b0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
     b10:	70b3      	strb	r3, [r6, #2]
    p_packet[CMD_FMT_OFFSET_OPCODE] = p_cmd->op_code;
     b12:	787b      	ldrb	r3, [r7, #1]
     b14:	70f3      	strb	r3, [r6, #3]
    if (pdu_len > 0 && p_cmd->p_data != NULL) {
     b16:	b12d      	cbz	r5, b24 <cmd_send+0x50>
     b18:	6879      	ldr	r1, [r7, #4]
     b1a:	b119      	cbz	r1, b24 <cmd_send+0x50>
        memcpy(&p_packet[CMD_FMT_OFFSET_PDU], p_cmd->p_data, pdu_len);
     b1c:	462a      	mov	r2, r5
     b1e:	1d30      	adds	r0, r6, #4
     b20:	f008 fe83 	bl	982a <memcpy>
    crc16 = crc16_compute(&p_packet[CMD_FMT_OFFSET_LEN],
     b24:	4641      	mov	r1, r8
     b26:	1cea      	adds	r2, r5, #3
     b28:	2000      	movs	r0, #0
     b2a:	f008 fcfc 	bl	9526 <crc16_itu_t>
    uint16_encode(crc16, &p_packet[CMD_FMT_OFFSET_PDU + pdu_len]);
     b2e:	3504      	adds	r5, #4
     b30:	1973      	adds	r3, r6, r5
	dst[0] = val;
     b32:	5570      	strb	r0, [r6, r5]
    pkt_len = CMD_FMT_OFFSET_PDU + pdu_len + CMD_FMT_SIZE_CRC;
     b34:	1da1      	adds	r1, r4, #6
	dst[1] = val >> 8;
     b36:	0a00      	lsrs	r0, r0, #8
     b38:	7058      	strb	r0, [r3, #1]
     b3a:	b289      	uxth	r1, r1
    p_buff->length = pkt_len;
     b3c:	4b06      	ldr	r3, [pc, #24]	; (b58 <cmd_send+0x84>)
    pkt_len = MIN(pkt_len, CMD_MAX_PACKET_LENGTH);
     b3e:	f5b1 6f82 	cmp.w	r1, #1040	; 0x410
     b42:	bf28      	it	cs
     b44:	f44f 6182 	movcs.w	r1, #1040	; 0x410
}
     b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return uart_send(m_tx_buff.p_data, m_tx_buff.length);
     b4c:	6818      	ldr	r0, [r3, #0]
    p_buff->length = pkt_len;
     b4e:	8099      	strh	r1, [r3, #4]
    return uart_send(m_tx_buff.p_data, m_tx_buff.length);
     b50:	f7ff bd80 	b.w	654 <uart_send>
     b54:	20000a5c 	.word	0x20000a5c
     b58:	20000a78 	.word	0x20000a78

00000b5c <app_cmd_respond>:
{
     b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (state_get(&m_cmd_ctx) != CMD_STATE_REQ_RECEIVED &&
     b5e:	4b19      	ldr	r3, [pc, #100]	; (bc4 <app_cmd_respond+0x68>)
     b60:	785a      	ldrb	r2, [r3, #1]
     b62:	2a04      	cmp	r2, #4
     b64:	d00e      	beq.n	b84 <app_cmd_respond+0x28>
     b66:	2a02      	cmp	r2, #2
     b68:	d00c      	beq.n	b84 <app_cmd_respond+0x28>
     b6a:	4817      	ldr	r0, [pc, #92]	; (bc8 <app_cmd_respond+0x6c>)
     b6c:	4b17      	ldr	r3, [pc, #92]	; (bcc <app_cmd_respond+0x70>)
        LOG_ERR("Invalid state for response:%d", state_get(&m_cmd_ctx));
     b6e:	4918      	ldr	r1, [pc, #96]	; (bd0 <app_cmd_respond+0x74>)
     b70:	1ac0      	subs	r0, r0, r3
     b72:	08c0      	lsrs	r0, r0, #3
     b74:	0180      	lsls	r0, r0, #6
     b76:	f040 0001 	orr.w	r0, r0, #1
     b7a:	f008 fddc 	bl	9736 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
     b7e:	f04f 30ff 	mov.w	r0, #4294967295
     b82:	e00e      	b.n	ba2 <app_cmd_respond+0x46>
    if (p_buff == NULL || p_buff->p_data == NULL) {
     b84:	4b13      	ldr	r3, [pc, #76]	; (bd4 <app_cmd_respond+0x78>)
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	b173      	cbz	r3, ba8 <app_cmd_respond+0x4c>
    *op_code = p_buff->p_data[CMD_FMT_OFFSET_OPCODE];
     b8a:	78db      	ldrb	r3, [r3, #3]
    cmd.p_data = p_data;
     b8c:	9002      	str	r0, [sp, #8]
    cmd.type = X_CMD_TYPE_RESPONSE;
     b8e:	2201      	movs	r2, #1
    return cmd_send(&cmd);
     b90:	a801      	add	r0, sp, #4
    cmd.type = X_CMD_TYPE_RESPONSE;
     b92:	f88d 2004 	strb.w	r2, [sp, #4]
    cmd.op_code = op_code;
     b96:	f88d 3005 	strb.w	r3, [sp, #5]
    cmd.length = length;
     b9a:	f8ad 100c 	strh.w	r1, [sp, #12]
    return cmd_send(&cmd);
     b9e:	f7ff ff99 	bl	ad4 <cmd_send>
}
     ba2:	b005      	add	sp, #20
     ba4:	f85d fb04 	ldr.w	pc, [sp], #4
     ba8:	4b08      	ldr	r3, [pc, #32]	; (bcc <app_cmd_respond+0x70>)
     baa:	4807      	ldr	r0, [pc, #28]	; (bc8 <app_cmd_respond+0x6c>)
        LOG_ERR("rx buffer is reset too early");
     bac:	490a      	ldr	r1, [pc, #40]	; (bd8 <app_cmd_respond+0x7c>)
     bae:	1ac0      	subs	r0, r0, r3
     bb0:	08c0      	lsrs	r0, r0, #3
     bb2:	0180      	lsls	r0, r0, #6
     bb4:	f040 0001 	orr.w	r0, r0, #1
     bb8:	f008 fdbd 	bl	9736 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
     bbc:	200a      	movs	r0, #10
     bbe:	f7ff ff01 	bl	9c4 <state_set.constprop.0>
     bc2:	e7dc      	b.n	b7e <app_cmd_respond+0x22>
     bc4:	20000a5c 	.word	0x20000a5c
     bc8:	0000a344 	.word	0x0000a344
     bcc:	0000a33c 	.word	0x0000a33c
     bd0:	0000a79d 	.word	0x0000a79d
     bd4:	20000a70 	.word	0x20000a70
     bd8:	0000a7bb 	.word	0x0000a7bb

00000bdc <on_uart_rx_ready>:
{
     bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
     be0:	4c75      	ldr	r4, [pc, #468]	; (db8 <on_uart_rx_ready+0x1dc>)
{
     be2:	4688      	mov	r8, r1
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
     be4:	7821      	ldrb	r1, [r4, #0]
     be6:	2901      	cmp	r1, #1
{
     be8:	4603      	mov	r3, r0
     bea:	4626      	mov	r6, r4
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
     bec:	d110      	bne.n	c10 <on_uart_rx_ready+0x34>
        if (m_cmd_ctx.state != CMD_STATE_REQ_SENT &&
     bee:	7861      	ldrb	r1, [r4, #1]
     bf0:	2902      	cmp	r1, #2
     bf2:	d019      	beq.n	c28 <on_uart_rx_ready+0x4c>
     bf4:	2907      	cmp	r1, #7
     bf6:	d017      	beq.n	c28 <on_uart_rx_ready+0x4c>
     bf8:	4870      	ldr	r0, [pc, #448]	; (dbc <on_uart_rx_ready+0x1e0>)
     bfa:	4b71      	ldr	r3, [pc, #452]	; (dc0 <on_uart_rx_ready+0x1e4>)
            LOG_WRN("Invalid state for rx(host)");
     bfc:	4971      	ldr	r1, [pc, #452]	; (dc4 <on_uart_rx_ready+0x1e8>)
     bfe:	1ac0      	subs	r0, r0, r3
     c00:	08c0      	lsrs	r0, r0, #3
     c02:	0180      	lsls	r0, r0, #6
}
     c04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            LOG_WRN("Invalid state for rx(slave)");
     c08:	f040 0002 	orr.w	r0, r0, #2
     c0c:	f008 bd93 	b.w	9736 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
     c10:	2902      	cmp	r1, #2
     c12:	d109      	bne.n	c28 <on_uart_rx_ready+0x4c>
        if (m_cmd_ctx.state != CMD_STATE_REQ_RECEIVING) {
     c14:	7861      	ldrb	r1, [r4, #1]
     c16:	2903      	cmp	r1, #3
     c18:	d006      	beq.n	c28 <on_uart_rx_ready+0x4c>
     c1a:	4868      	ldr	r0, [pc, #416]	; (dbc <on_uart_rx_ready+0x1e0>)
     c1c:	4b68      	ldr	r3, [pc, #416]	; (dc0 <on_uart_rx_ready+0x1e4>)
            LOG_WRN("Invalid state for rx(slave)");
     c1e:	496a      	ldr	r1, [pc, #424]	; (dc8 <on_uart_rx_ready+0x1ec>)
     c20:	1ac0      	subs	r0, r0, r3
     c22:	08c0      	lsrs	r0, r0, #3
     c24:	0180      	lsls	r0, r0, #6
     c26:	e7ed      	b.n	c04 <on_uart_rx_ready+0x28>
    if (!rx_started) {
     c28:	4d68      	ldr	r5, [pc, #416]	; (dcc <on_uart_rx_ready+0x1f0>)
     c2a:	4c69      	ldr	r4, [pc, #420]	; (dd0 <on_uart_rx_ready+0x1f4>)
     c2c:	f895 9000 	ldrb.w	r9, [r5]
     c30:	6820      	ldr	r0, [r4, #0]
     c32:	4f68      	ldr	r7, [pc, #416]	; (dd4 <on_uart_rx_ready+0x1f8>)
     c34:	1899      	adds	r1, r3, r2
     c36:	f1b9 0f00 	cmp.w	r9, #0
     c3a:	d11a      	bne.n	c72 <on_uart_rx_ready+0x96>
        rx_started = true;
     c3c:	2301      	movs	r3, #1
    p_buff->length = 0;
     c3e:	f8c4 9004 	str.w	r9, [r4, #4]
        memcpy(&(m_rx_buff.p_data[m_rx_buff.length]), &(b_memory_block[offset]), length);//Copy First Received Bytes of data
     c42:	4642      	mov	r2, r8
        rx_started = true;
     c44:	702b      	strb	r3, [r5, #0]
        memcpy(&(m_rx_buff.p_data[m_rx_buff.length]), &(b_memory_block[offset]), length);//Copy First Received Bytes of data
     c46:	f008 fdf0 	bl	982a <memcpy>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
     c4a:	7833      	ldrb	r3, [r6, #0]
        m_rx_buff.length = length;
     c4c:	f8a4 8004 	strh.w	r8, [r4, #4]
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
     c50:	2b01      	cmp	r3, #1
        state_set(&m_cmd_ctx, CMD_STATE_RSP_RECEIVING);
     c52:	bf0c      	ite	eq
     c54:	2007      	moveq	r0, #7
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVING);
     c56:	2003      	movne	r0, #3
        cmd_len = 0;
     c58:	f8a7 9000 	strh.w	r9, [r7]
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVING);
     c5c:	f7ff feb2 	bl	9c4 <state_set.constprop.0>
    if (cmd_len == 0) {
     c60:	883b      	ldrh	r3, [r7, #0]
     c62:	b17b      	cbz	r3, c84 <on_uart_rx_ready+0xa8>
    if (m_rx_buff.length < cmd_len) {
     c64:	f8b4 c004 	ldrh.w	ip, [r4, #4]
     c68:	883b      	ldrh	r3, [r7, #0]
     c6a:	4563      	cmp	r3, ip
     c6c:	d929      	bls.n	cc2 <on_uart_rx_ready+0xe6>
}
     c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy(&(m_rx_buff.p_data[m_rx_buff.length]), &(b_memory_block[offset]), length);//Copy Incoming Bytes
     c72:	88a3      	ldrh	r3, [r4, #4]
     c74:	4642      	mov	r2, r8
     c76:	4418      	add	r0, r3
     c78:	f008 fdd7 	bl	982a <memcpy>
        m_rx_buff.length += length;
     c7c:	88a1      	ldrh	r1, [r4, #4]
     c7e:	4441      	add	r1, r8
     c80:	80a1      	strh	r1, [r4, #4]
     c82:	e7ed      	b.n	c60 <on_uart_rx_ready+0x84>
    if (p_buff->length > CMD_FMT_SIZE_START + CMD_FMT_SIZE_LEN) {
     c84:	88a3      	ldrh	r3, [r4, #4]
     c86:	2b03      	cmp	r3, #3
     c88:	d9f1      	bls.n	c6e <on_uart_rx_ready+0x92>
    p_data = p_buff->p_data;
     c8a:	6823      	ldr	r3, [r4, #0]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
     c8c:	7899      	ldrb	r1, [r3, #2]
     c8e:	785a      	ldrb	r2, [r3, #1]
     c90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
        cmd_len = CMD_FMT_OFFSET_OPCODE + CMD_FMT_SIZE_CRC + len;
     c94:	3205      	adds	r2, #5
     c96:	b292      	uxth	r2, r2
        if (cmd_len > CMD_MAX_PACKET_LENGTH) {
     c98:	f5b2 6f82 	cmp.w	r2, #1040	; 0x410
        cmd_len = cmd_len_get(&m_rx_buff);
     c9c:	803a      	strh	r2, [r7, #0]
        if (cmd_len > CMD_MAX_PACKET_LENGTH) {
     c9e:	d90c      	bls.n	cba <on_uart_rx_ready+0xde>
     ca0:	4b47      	ldr	r3, [pc, #284]	; (dc0 <on_uart_rx_ready+0x1e4>)
     ca2:	4846      	ldr	r0, [pc, #280]	; (dbc <on_uart_rx_ready+0x1e0>)
            LOG_ERR("CMD_Len Larger than Packet Length %d",cmd_len);
     ca4:	494c      	ldr	r1, [pc, #304]	; (dd8 <on_uart_rx_ready+0x1fc>)
     ca6:	1ac0      	subs	r0, r0, r3
     ca8:	08c0      	lsrs	r0, r0, #3
     caa:	0180      	lsls	r0, r0, #6
     cac:	f040 0001 	orr.w	r0, r0, #1
     cb0:	f008 fd41 	bl	9736 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_RECEIVE);
     cb4:	200b      	movs	r0, #11
     cb6:	f7ff fe85 	bl	9c4 <state_set.constprop.0>
        if (cmd_len == 0) {
     cba:	883b      	ldrh	r3, [r7, #0]
     cbc:	2b00      	cmp	r3, #0
     cbe:	d1d1      	bne.n	c64 <on_uart_rx_ready+0x88>
     cc0:	e7d5      	b.n	c6e <on_uart_rx_ready+0x92>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
     cc2:	7837      	ldrb	r7, [r6, #0]
     cc4:	2f01      	cmp	r7, #1
     cc6:	d123      	bne.n	d10 <on_uart_rx_ready+0x134>
    if (p_buff == NULL || p_buff->p_data == NULL) {
     cc8:	4b44      	ldr	r3, [pc, #272]	; (ddc <on_uart_rx_ready+0x200>)
     cca:	6818      	ldr	r0, [r3, #0]
     ccc:	b100      	cbz	r0, cd0 <on_uart_rx_ready+0xf4>
    *op_code = p_buff->p_data[CMD_FMT_OFFSET_OPCODE];
     cce:	78c0      	ldrb	r0, [r0, #3]
    uint8_t* p_data = p_buff->p_data;
     cd0:	6821      	ldr	r1, [r4, #0]
    if (mode == CMD_MODE_HOST &&
     cd2:	2f01      	cmp	r7, #1
     cd4:	d11e      	bne.n	d14 <on_uart_rx_ready+0x138>
     cd6:	780b      	ldrb	r3, [r1, #0]
     cd8:	2b69      	cmp	r3, #105	; 0x69
     cda:	d027      	beq.n	d2c <on_uart_rx_ready+0x150>
     cdc:	4837      	ldr	r0, [pc, #220]	; (dbc <on_uart_rx_ready+0x1e0>)
     cde:	4b38      	ldr	r3, [pc, #224]	; (dc0 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: start(host)");
     ce0:	493f      	ldr	r1, [pc, #252]	; (de0 <on_uart_rx_ready+0x204>)
     ce2:	1ac0      	subs	r0, r0, r3
     ce4:	08c0      	lsrs	r0, r0, #3
     ce6:	0180      	lsls	r0, r0, #6
        LOG_ERR("Invalid cmd format: start(slave)");
     ce8:	f040 0001 	orr.w	r0, r0, #1
     cec:	f008 fd23 	bl	9736 <log_string_sync>
     cf0:	4b33      	ldr	r3, [pc, #204]	; (dc0 <on_uart_rx_ready+0x1e4>)
     cf2:	4832      	ldr	r0, [pc, #200]	; (dbc <on_uart_rx_ready+0x1e0>)
        LOG_ERR("Command has Invald Format");
     cf4:	493b      	ldr	r1, [pc, #236]	; (de4 <on_uart_rx_ready+0x208>)
     cf6:	1ac0      	subs	r0, r0, r3
     cf8:	08c0      	lsrs	r0, r0, #3
     cfa:	0180      	lsls	r0, r0, #6
     cfc:	f040 0001 	orr.w	r0, r0, #1
     d00:	f008 fd19 	bl	9736 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_RECEIVE);
     d04:	200b      	movs	r0, #11
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVED);
     d06:	f7ff fe5d 	bl	9c4 <state_set.constprop.0>
    rx_started = false;
     d0a:	2300      	movs	r3, #0
     d0c:	702b      	strb	r3, [r5, #0]
     d0e:	e7ae      	b.n	c6e <on_uart_rx_ready+0x92>
    req_op_code = 0;
     d10:	2000      	movs	r0, #0
     d12:	e7dd      	b.n	cd0 <on_uart_rx_ready+0xf4>
    else if (mode == CMD_MODE_SLAVE &&
     d14:	2f02      	cmp	r7, #2
     d16:	d109      	bne.n	d2c <on_uart_rx_ready+0x150>
     d18:	780b      	ldrb	r3, [r1, #0]
     d1a:	2b42      	cmp	r3, #66	; 0x42
     d1c:	d006      	beq.n	d2c <on_uart_rx_ready+0x150>
     d1e:	4827      	ldr	r0, [pc, #156]	; (dbc <on_uart_rx_ready+0x1e0>)
     d20:	4b27      	ldr	r3, [pc, #156]	; (dc0 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: start(slave)");
     d22:	4931      	ldr	r1, [pc, #196]	; (de8 <on_uart_rx_ready+0x20c>)
     d24:	1ac0      	subs	r0, r0, r3
     d26:	08c0      	lsrs	r0, r0, #3
     d28:	0180      	lsls	r0, r0, #6
     d2a:	e7dd      	b.n	ce8 <on_uart_rx_ready+0x10c>
     d2c:	788b      	ldrb	r3, [r1, #2]
     d2e:	784a      	ldrb	r2, [r1, #1]
     d30:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
     d34:	b212      	sxth	r2, r2
        CMD_FMT_OFFSET_OPCODE + CMD_FMT_SIZE_CRC;
     d36:	1d53      	adds	r3, r2, #5
    cmd_len = uint16_decode(&p_data[CMD_FMT_OFFSET_LEN]) +
     d38:	b29b      	uxth	r3, r3
    if (length != cmd_len) {
     d3a:	459c      	cmp	ip, r3
     d3c:	d006      	beq.n	d4c <on_uart_rx_ready+0x170>
     d3e:	481f      	ldr	r0, [pc, #124]	; (dbc <on_uart_rx_ready+0x1e0>)
     d40:	4b1f      	ldr	r3, [pc, #124]	; (dc0 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: length");
     d42:	492a      	ldr	r1, [pc, #168]	; (dec <on_uart_rx_ready+0x210>)
     d44:	1ac0      	subs	r0, r0, r3
     d46:	08c0      	lsrs	r0, r0, #3
     d48:	0180      	lsls	r0, r0, #6
     d4a:	e7cd      	b.n	ce8 <on_uart_rx_ready+0x10c>
    if (mode == CMD_MODE_HOST &&
     d4c:	2f01      	cmp	r7, #1
     d4e:	d109      	bne.n	d64 <on_uart_rx_ready+0x188>
     d50:	78cc      	ldrb	r4, [r1, #3]
     d52:	4284      	cmp	r4, r0
     d54:	d006      	beq.n	d64 <on_uart_rx_ready+0x188>
     d56:	4819      	ldr	r0, [pc, #100]	; (dbc <on_uart_rx_ready+0x1e0>)
     d58:	4b19      	ldr	r3, [pc, #100]	; (dc0 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: op code");
     d5a:	4925      	ldr	r1, [pc, #148]	; (df0 <on_uart_rx_ready+0x214>)
     d5c:	1ac0      	subs	r0, r0, r3
     d5e:	08c0      	lsrs	r0, r0, #3
     d60:	0180      	lsls	r0, r0, #6
     d62:	e7c1      	b.n	ce8 <on_uart_rx_ready+0x10c>
    cmd_crc = uint16_decode(&p_data[cmd_len - CMD_FMT_SIZE_CRC]);
     d64:	3b02      	subs	r3, #2
     d66:	18c8      	adds	r0, r1, r3
     d68:	5ccc      	ldrb	r4, [r1, r3]
     d6a:	7840      	ldrb	r0, [r0, #1]
        cmd_len - CMD_FMT_SIZE_START - CMD_FMT_SIZE_CRC,
     d6c:	3202      	adds	r2, #2
     d6e:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    return crc16_compute(p_data, length) == crc_target;
     d72:	b292      	uxth	r2, r2
     d74:	3101      	adds	r1, #1
     d76:	2000      	movs	r0, #0
     d78:	f008 fbd5 	bl	9526 <crc16_itu_t>
    if (!crc_ok) {
     d7c:	4284      	cmp	r4, r0
     d7e:	d006      	beq.n	d8e <on_uart_rx_ready+0x1b2>
     d80:	480e      	ldr	r0, [pc, #56]	; (dbc <on_uart_rx_ready+0x1e0>)
     d82:	4b0f      	ldr	r3, [pc, #60]	; (dc0 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: crc");
     d84:	491b      	ldr	r1, [pc, #108]	; (df4 <on_uart_rx_ready+0x218>)
     d86:	1ac0      	subs	r0, r0, r3
     d88:	08c0      	lsrs	r0, r0, #3
     d8a:	0180      	lsls	r0, r0, #6
     d8c:	e7ac      	b.n	ce8 <on_uart_rx_ready+0x10c>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
     d8e:	7833      	ldrb	r3, [r6, #0]
     d90:	2b01      	cmp	r3, #1
     d92:	d101      	bne.n	d98 <on_uart_rx_ready+0x1bc>
        state_set(&m_cmd_ctx, CMD_STATE_RSP_RECEIVED);
     d94:	2008      	movs	r0, #8
     d96:	e7b6      	b.n	d06 <on_uart_rx_ready+0x12a>
    else if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
     d98:	2b02      	cmp	r3, #2
     d9a:	d101      	bne.n	da0 <on_uart_rx_ready+0x1c4>
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVED);
     d9c:	2004      	movs	r0, #4
     d9e:	e7b2      	b.n	d06 <on_uart_rx_ready+0x12a>
     da0:	4b07      	ldr	r3, [pc, #28]	; (dc0 <on_uart_rx_ready+0x1e4>)
     da2:	4806      	ldr	r0, [pc, #24]	; (dbc <on_uart_rx_ready+0x1e0>)
        LOG_WRN("Should not come here");
     da4:	4914      	ldr	r1, [pc, #80]	; (df8 <on_uart_rx_ready+0x21c>)
     da6:	1ac0      	subs	r0, r0, r3
     da8:	08c0      	lsrs	r0, r0, #3
     daa:	0180      	lsls	r0, r0, #6
     dac:	f040 0002 	orr.w	r0, r0, #2
     db0:	f008 fcc1 	bl	9736 <log_string_sync>
     db4:	e7a9      	b.n	d0a <on_uart_rx_ready+0x12e>
     db6:	bf00      	nop
     db8:	20000a5c 	.word	0x20000a5c
     dbc:	0000a344 	.word	0x0000a344
     dc0:	0000a33c 	.word	0x0000a33c
     dc4:	0000a7d8 	.word	0x0000a7d8
     dc8:	0000a7f3 	.word	0x0000a7f3
     dcc:	2000122f 	.word	0x2000122f
     dd0:	20000a70 	.word	0x20000a70
     dd4:	2000122c 	.word	0x2000122c
     dd8:	0000a80f 	.word	0x0000a80f
     ddc:	20000a78 	.word	0x20000a78
     de0:	0000a834 	.word	0x0000a834
     de4:	0000a8c4 	.word	0x0000a8c4
     de8:	0000a854 	.word	0x0000a854
     dec:	0000a875 	.word	0x0000a875
     df0:	0000a890 	.word	0x0000a890
     df4:	0000a8ac 	.word	0x0000a8ac
     df8:	0000a788 	.word	0x0000a788

00000dfc <cmd_cb_cnt>:
        if (m_cb_list[i].op_code == 0) {
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <cmd_cb_cnt+0x18>)
    for (int i = 0; i < CMD_CB_LIST_LEN; i++) {
     dfe:	2000      	movs	r0, #0
        if (m_cb_list[i].op_code == 0) {
     e00:	220c      	movs	r2, #12
     e02:	fb02 f100 	mul.w	r1, r2, r0
     e06:	5cc9      	ldrb	r1, [r1, r3]
     e08:	b111      	cbz	r1, e10 <cmd_cb_cnt+0x14>
    for (int i = 0; i < CMD_CB_LIST_LEN; i++) {
     e0a:	3001      	adds	r0, #1
     e0c:	2814      	cmp	r0, #20
     e0e:	d1f8      	bne.n	e02 <cmd_cb_cnt+0x6>
}
     e10:	4770      	bx	lr
     e12:	bf00      	nop
     e14:	2000096c 	.word	0x2000096c

00000e18 <cmd_cb_get>:
{
     e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e1a:	4605      	mov	r5, r0
     e1c:	460c      	mov	r4, r1
    count = cmd_cb_cnt();
     e1e:	f7ff ffed 	bl	dfc <cmd_cb_cnt>
        if (m_cb_list[i].op_code == op_code) {
     e22:	4b0c      	ldr	r3, [pc, #48]	; (e54 <cmd_cb_get+0x3c>)
    for (int i = 0; i < count; i++) {
     e24:	2200      	movs	r2, #0
        if (m_cb_list[i].op_code == op_code) {
     e26:	260c      	movs	r6, #12
    for (int i = 0; i < count; i++) {
     e28:	4282      	cmp	r2, r0
     e2a:	db02      	blt.n	e32 <cmd_cb_get+0x1a>
    rc = -1;
     e2c:	f04f 30ff 	mov.w	r0, #4294967295
     e30:	e00b      	b.n	e4a <cmd_cb_get+0x32>
        if (m_cb_list[i].op_code == op_code) {
     e32:	fb06 f102 	mul.w	r1, r6, r2
     e36:	5ccf      	ldrb	r7, [r1, r3]
     e38:	42af      	cmp	r7, r5
     e3a:	d107      	bne.n	e4c <cmd_cb_get+0x34>
            if (p_cmd_cb != NULL) {
     e3c:	b144      	cbz	r4, e50 <cmd_cb_get+0x38>
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
     e3e:	440b      	add	r3, r1
            rc = 0;
     e40:	2000      	movs	r0, #0
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
     e42:	685a      	ldr	r2, [r3, #4]
                p_cmd_cb->proc_rsp = m_cb_list[i].proc_rsp;
     e44:	689b      	ldr	r3, [r3, #8]
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
     e46:	6062      	str	r2, [r4, #4]
                p_cmd_cb->proc_rsp = m_cb_list[i].proc_rsp;
     e48:	60a3      	str	r3, [r4, #8]
}
     e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (int i = 0; i < count; i++) {
     e4c:	3201      	adds	r2, #1
     e4e:	e7eb      	b.n	e28 <cmd_cb_get+0x10>
            rc = 0;
     e50:	4620      	mov	r0, r4
    return rc;
     e52:	e7fa      	b.n	e4a <cmd_cb_get+0x32>
     e54:	2000096c 	.word	0x2000096c

00000e58 <tmr_rsp_timeout_handler>:
{
     e58:	b530      	push	{r4, r5, lr}
    err_code = buff_to_cmd(&m_tx_buff, &cmd);
     e5a:	4b1e      	ldr	r3, [pc, #120]	; (ed4 <tmr_rsp_timeout_handler+0x7c>)
     e5c:	681b      	ldr	r3, [r3, #0]
{
     e5e:	b089      	sub	sp, #36	; 0x24
    if (p_buff->p_data == NULL || p_cmd == NULL) {
     e60:	b95b      	cbnz	r3, e7a <tmr_rsp_timeout_handler+0x22>
     e62:	481d      	ldr	r0, [pc, #116]	; (ed8 <tmr_rsp_timeout_handler+0x80>)
     e64:	4b1d      	ldr	r3, [pc, #116]	; (edc <tmr_rsp_timeout_handler+0x84>)
        LOG_ERR("Buffer error");
     e66:	491e      	ldr	r1, [pc, #120]	; (ee0 <tmr_rsp_timeout_handler+0x88>)
     e68:	1ac0      	subs	r0, r0, r3
     e6a:	08c0      	lsrs	r0, r0, #3
     e6c:	0180      	lsls	r0, r0, #6
     e6e:	f040 0001 	orr.w	r0, r0, #1
     e72:	f008 fc60 	bl	9736 <log_string_sync>
}
     e76:	b009      	add	sp, #36	; 0x24
     e78:	bd30      	pop	{r4, r5, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
     e7a:	78dd      	ldrb	r5, [r3, #3]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
     e7c:	a902      	add	r1, sp, #8
     e7e:	4628      	mov	r0, r5
     e80:	f7ff ffca 	bl	e18 <cmd_cb_get>
    if (err_code == 0) {
     e84:	b9d0      	cbnz	r0, ebc <tmr_rsp_timeout_handler+0x64>
        uint8_t p_rsp[] = CMD_RSP_TIMEOUT;
     e86:	f646 7374 	movw	r3, #28532	; 0x6f74
     e8a:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (cmd_cb.proc_rsp) {
     e8e:	9b04      	ldr	r3, [sp, #16]
     e90:	ac01      	add	r4, sp, #4
     e92:	b113      	cbz	r3, e9a <tmr_rsp_timeout_handler+0x42>
            cmd_cb.proc_rsp(p_rsp, sizeof(p_rsp));
     e94:	2102      	movs	r1, #2
     e96:	4620      	mov	r0, r4
     e98:	4798      	blx	r3
        event.length = sizeof(p_rsp);
     e9a:	2302      	movs	r3, #2
     e9c:	f8ad 301c 	strh.w	r3, [sp, #28]
        event.timeout = true;
     ea0:	2301      	movs	r3, #1
     ea2:	f88d 301e 	strb.w	r3, [sp, #30]
        m_event_cb(&event);
     ea6:	4b0f      	ldr	r3, [pc, #60]	; (ee4 <tmr_rsp_timeout_handler+0x8c>)
        event.op_code = cmd.op_code;
     ea8:	f88d 5014 	strb.w	r5, [sp, #20]
        m_event_cb(&event);
     eac:	681b      	ldr	r3, [r3, #0]
        event.p_data = p_rsp;
     eae:	9406      	str	r4, [sp, #24]
        m_event_cb(&event);
     eb0:	a805      	add	r0, sp, #20
     eb2:	4798      	blx	r3
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
     eb4:	2000      	movs	r0, #0
     eb6:	f7ff fd85 	bl	9c4 <state_set.constprop.0>
     eba:	e7dc      	b.n	e76 <tmr_rsp_timeout_handler+0x1e>
     ebc:	4b07      	ldr	r3, [pc, #28]	; (edc <tmr_rsp_timeout_handler+0x84>)
     ebe:	4806      	ldr	r0, [pc, #24]	; (ed8 <tmr_rsp_timeout_handler+0x80>)
        LOG_ERR("op is unregisterd(wait rsp)");
     ec0:	4909      	ldr	r1, [pc, #36]	; (ee8 <tmr_rsp_timeout_handler+0x90>)
     ec2:	1ac0      	subs	r0, r0, r3
     ec4:	08c0      	lsrs	r0, r0, #3
     ec6:	0180      	lsls	r0, r0, #6
     ec8:	f040 0001 	orr.w	r0, r0, #1
     ecc:	f008 fc33 	bl	9736 <log_string_sync>
     ed0:	e7f0      	b.n	eb4 <tmr_rsp_timeout_handler+0x5c>
     ed2:	bf00      	nop
     ed4:	20000a78 	.word	0x20000a78
     ed8:	0000a344 	.word	0x0000a344
     edc:	0000a33c 	.word	0x0000a33c
     ee0:	0000a8de 	.word	0x0000a8de
     ee4:	20000a6c 	.word	0x20000a6c
     ee8:	0000a8eb 	.word	0x0000a8eb

00000eec <wk_proc_rsp_handler>:
{
     eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
     eee:	2000      	movs	r0, #0
{
     ef0:	b087      	sub	sp, #28
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
     ef2:	f7ff fd67 	bl	9c4 <state_set.constprop.0>
    err_code = buff_to_cmd(&m_rx_buff, &cmd);
     ef6:	4b1d      	ldr	r3, [pc, #116]	; (f6c <wk_proc_rsp_handler+0x80>)
     ef8:	681d      	ldr	r5, [r3, #0]
    if (p_buff->p_data == NULL || p_cmd == NULL) {
     efa:	b95d      	cbnz	r5, f14 <wk_proc_rsp_handler+0x28>
     efc:	481c      	ldr	r0, [pc, #112]	; (f70 <wk_proc_rsp_handler+0x84>)
     efe:	4b1d      	ldr	r3, [pc, #116]	; (f74 <wk_proc_rsp_handler+0x88>)
        LOG_ERR("Buffer error");
     f00:	491d      	ldr	r1, [pc, #116]	; (f78 <wk_proc_rsp_handler+0x8c>)
     f02:	1ac0      	subs	r0, r0, r3
     f04:	08c0      	lsrs	r0, r0, #3
     f06:	0180      	lsls	r0, r0, #6
     f08:	f040 0001 	orr.w	r0, r0, #1
     f0c:	f008 fc13 	bl	9736 <log_string_sync>
}
     f10:	b007      	add	sp, #28
     f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
     f14:	78ee      	ldrb	r6, [r5, #3]
     f16:	78af      	ldrb	r7, [r5, #2]
     f18:	786c      	ldrb	r4, [r5, #1]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
     f1a:	4669      	mov	r1, sp
     f1c:	4630      	mov	r0, r6
     f1e:	f7ff ff7b 	bl	e18 <cmd_cb_get>
    if (err_code == 0) {
     f22:	b9b0      	cbnz	r0, f52 <wk_proc_rsp_handler+0x66>
     f24:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
        if (cmd_cb.proc_rsp) {
     f28:	9b02      	ldr	r3, [sp, #8]
    p_cmd->length = op_pdu_len - CMD_FMT_SIZE_OPCODE;
     f2a:	3c01      	subs	r4, #1
     f2c:	b2a4      	uxth	r4, r4
    p_cmd->p_data = &p_data[CMD_FMT_OFFSET_PDU];
     f2e:	3504      	adds	r5, #4
        if (cmd_cb.proc_rsp) {
     f30:	b113      	cbz	r3, f38 <wk_proc_rsp_handler+0x4c>
            cmd_cb.proc_rsp(cmd.p_data, cmd.length);
     f32:	4621      	mov	r1, r4
     f34:	4628      	mov	r0, r5
     f36:	4798      	blx	r3
        event.timeout = false;
     f38:	2300      	movs	r3, #0
     f3a:	f88d 3016 	strb.w	r3, [sp, #22]
        m_event_cb(&event);
     f3e:	4b0f      	ldr	r3, [pc, #60]	; (f7c <wk_proc_rsp_handler+0x90>)
        event.op_code = cmd.op_code;
     f40:	f88d 600c 	strb.w	r6, [sp, #12]
        m_event_cb(&event);
     f44:	681b      	ldr	r3, [r3, #0]
        event.p_data = cmd.p_data;
     f46:	9504      	str	r5, [sp, #16]
        event.length = cmd.length;
     f48:	f8ad 4014 	strh.w	r4, [sp, #20]
        m_event_cb(&event);
     f4c:	a803      	add	r0, sp, #12
     f4e:	4798      	blx	r3
     f50:	e7de      	b.n	f10 <wk_proc_rsp_handler+0x24>
     f52:	4b08      	ldr	r3, [pc, #32]	; (f74 <wk_proc_rsp_handler+0x88>)
     f54:	4806      	ldr	r0, [pc, #24]	; (f70 <wk_proc_rsp_handler+0x84>)
        LOG_ERR("op is unregisterd(proc rsp): %d", cmd.op_code);
     f56:	490a      	ldr	r1, [pc, #40]	; (f80 <wk_proc_rsp_handler+0x94>)
     f58:	1ac0      	subs	r0, r0, r3
     f5a:	08c0      	lsrs	r0, r0, #3
     f5c:	0180      	lsls	r0, r0, #6
     f5e:	4632      	mov	r2, r6
     f60:	f040 0001 	orr.w	r0, r0, #1
     f64:	f008 fbe7 	bl	9736 <log_string_sync>
     f68:	e7d2      	b.n	f10 <wk_proc_rsp_handler+0x24>
     f6a:	bf00      	nop
     f6c:	20000a70 	.word	0x20000a70
     f70:	0000a344 	.word	0x0000a344
     f74:	0000a33c 	.word	0x0000a33c
     f78:	0000a8de 	.word	0x0000a8de
     f7c:	20000a6c 	.word	0x20000a6c
     f80:	0000a907 	.word	0x0000a907

00000f84 <wk_proc_req_handler>:
{
     f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    err_code = buff_to_cmd(&m_rx_buff, &cmd);
     f86:	4b23      	ldr	r3, [pc, #140]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     f88:	681d      	ldr	r5, [r3, #0]
{
     f8a:	b087      	sub	sp, #28
    if (p_buff->p_data == NULL || p_cmd == NULL) {
     f8c:	b95d      	cbnz	r5, fa6 <wk_proc_req_handler+0x22>
     f8e:	4822      	ldr	r0, [pc, #136]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     f90:	4b22      	ldr	r3, [pc, #136]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
        LOG_ERR("Buffer error");
     f92:	4923      	ldr	r1, [pc, #140]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     f94:	1ac0      	subs	r0, r0, r3
     f96:	08c0      	lsrs	r0, r0, #3
     f98:	0180      	lsls	r0, r0, #6
     f9a:	f040 0001 	orr.w	r0, r0, #1
     f9e:	f008 fbca 	bl	9736 <log_string_sync>
}
     fa2:	b007      	add	sp, #28
     fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
     fa6:	78ee      	ldrb	r6, [r5, #3]
     fa8:	78af      	ldrb	r7, [r5, #2]
     faa:	786c      	ldrb	r4, [r5, #1]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
     fac:	4669      	mov	r1, sp
     fae:	4630      	mov	r0, r6
     fb0:	f7ff ff32 	bl	e18 <cmd_cb_get>
    if (err_code == 0) {
     fb4:	b9d8      	cbnz	r0, fee <wk_proc_req_handler+0x6a>
     fb6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
        if (cmd_cb.proc_req) {
     fba:	9b01      	ldr	r3, [sp, #4]
    p_cmd->length = op_pdu_len - CMD_FMT_SIZE_OPCODE;
     fbc:	3c01      	subs	r4, #1
     fbe:	b2a4      	uxth	r4, r4
    p_cmd->p_data = &p_data[CMD_FMT_OFFSET_PDU];
     fc0:	3504      	adds	r5, #4
        if (cmd_cb.proc_req) {
     fc2:	b183      	cbz	r3, fe6 <wk_proc_req_handler+0x62>
            cmd_cb.proc_req(cmd.p_data, cmd.length, app_cmd_respond);
     fc4:	4a17      	ldr	r2, [pc, #92]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     fc6:	4621      	mov	r1, r4
     fc8:	4628      	mov	r0, r5
     fca:	4798      	blx	r3
        event.timeout = false;
     fcc:	2300      	movs	r3, #0
     fce:	f88d 3016 	strb.w	r3, [sp, #22]
        m_event_cb(&event);
     fd2:	4b15      	ldr	r3, [pc, #84]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
        event.op_code = cmd.op_code;
     fd4:	f88d 600c 	strb.w	r6, [sp, #12]
        m_event_cb(&event);
     fd8:	681b      	ldr	r3, [r3, #0]
        event.p_data = cmd.p_data;
     fda:	9504      	str	r5, [sp, #16]
        event.length = cmd.length;
     fdc:	f8ad 4014 	strh.w	r4, [sp, #20]
        m_event_cb(&event);
     fe0:	a803      	add	r0, sp, #12
     fe2:	4798      	blx	r3
     fe4:	e7dd      	b.n	fa2 <wk_proc_req_handler+0x1e>
            app_cmd_respond(NULL, 0);
     fe6:	4619      	mov	r1, r3
     fe8:	f7ff fdb8 	bl	b5c <app_cmd_respond>
     fec:	e7ee      	b.n	fcc <wk_proc_req_handler+0x48>
     fee:	4b0b      	ldr	r3, [pc, #44]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     ff0:	4809      	ldr	r0, [pc, #36]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
        LOG_ERR("op is unregisterd(proc req)");
     ff2:	490e      	ldr	r1, [pc, #56]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
     ff4:	1ac0      	subs	r0, r0, r3
     ff6:	08c0      	lsrs	r0, r0, #3
     ff8:	0180      	lsls	r0, r0, #6
     ffa:	f040 0001 	orr.w	r0, r0, #1
     ffe:	f008 fb9a 	bl	9736 <log_string_sync>
        uint8_t p_rsp[] = CMD_RSP_UNREG;
    1002:	f247 2375 	movw	r3, #29301	; 0x7275
        app_cmd_respond(p_rsp, sizeof(p_rsp));
    1006:	2102      	movs	r1, #2
    1008:	a803      	add	r0, sp, #12
        uint8_t p_rsp[] = CMD_RSP_UNREG;
    100a:	f8ad 300c 	strh.w	r3, [sp, #12]
        app_cmd_respond(p_rsp, sizeof(p_rsp));
    100e:	f7ff fda5 	bl	b5c <app_cmd_respond>
    1012:	e7c6      	b.n	fa2 <wk_proc_req_handler+0x1e>
    1014:	20000a70 	.word	0x20000a70
    1018:	0000a344 	.word	0x0000a344
    101c:	0000a33c 	.word	0x0000a33c
    1020:	0000a8de 	.word	0x0000a8de
    1024:	00000b5d 	.word	0x00000b5d
    1028:	20000a6c 	.word	0x20000a6c
    102c:	0000a927 	.word	0x0000a927

00001030 <app_cmd_add>:
{
    1030:	b5f0      	push	{r4, r5, r6, r7, lr}
    1032:	b085      	sub	sp, #20
    1034:	4604      	mov	r4, r0
    1036:	460f      	mov	r7, r1
    1038:	4616      	mov	r6, r2
    count = cmd_cb_cnt();
    103a:	f7ff fedf 	bl	dfc <cmd_cb_cnt>
    if (count == CMD_CB_LIST_LEN) {
    103e:	2814      	cmp	r0, #20
    count = cmd_cb_cnt();
    1040:	4605      	mov	r5, r0
    if (count == CMD_CB_LIST_LEN) {
    1042:	d10d      	bne.n	1060 <app_cmd_add+0x30>
    1044:	4b19      	ldr	r3, [pc, #100]	; (10ac <app_cmd_add+0x7c>)
    1046:	481a      	ldr	r0, [pc, #104]	; (10b0 <app_cmd_add+0x80>)
        LOG_ERR("Cmd list is full");
    1048:	491a      	ldr	r1, [pc, #104]	; (10b4 <app_cmd_add+0x84>)
    104a:	1ac0      	subs	r0, r0, r3
    104c:	08c0      	lsrs	r0, r0, #3
    104e:	0180      	lsls	r0, r0, #6
    1050:	f040 0001 	orr.w	r0, r0, #1
    1054:	f008 fb6f 	bl	9736 <log_string_sync>
        return -1;
    1058:	f04f 30ff 	mov.w	r0, #4294967295
}
    105c:	b005      	add	sp, #20
    105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (cmd_cb_get(op_code, NULL) == 0) {
    1060:	2100      	movs	r1, #0
    1062:	4620      	mov	r0, r4
    1064:	f7ff fed8 	bl	e18 <cmd_cb_get>
    1068:	b968      	cbnz	r0, 1086 <app_cmd_add+0x56>
    106a:	4810      	ldr	r0, [pc, #64]	; (10ac <app_cmd_add+0x7c>)
    106c:	4b10      	ldr	r3, [pc, #64]	; (10b0 <app_cmd_add+0x80>)
        LOG_WRN("This op code already exists %x",op_code);
    106e:	4912      	ldr	r1, [pc, #72]	; (10b8 <app_cmd_add+0x88>)
    1070:	1a1b      	subs	r3, r3, r0
    1072:	08db      	lsrs	r3, r3, #3
    1074:	019b      	lsls	r3, r3, #6
    1076:	f043 0002 	orr.w	r0, r3, #2
    107a:	4622      	mov	r2, r4
    107c:	f008 fb5b 	bl	9736 <log_string_sync>
        return -2;
    1080:	f06f 0001 	mvn.w	r0, #1
    1084:	e7ea      	b.n	105c <app_cmd_add+0x2c>
    memset(&callback, 0, sizeof(cmd_cb_t));
    1086:	220c      	movs	r2, #12
    1088:	2100      	movs	r1, #0
    108a:	a801      	add	r0, sp, #4
    108c:	f008 fbd8 	bl	9840 <memset>
    memcpy(&m_cb_list[count], &callback, sizeof(cmd_cb_t));
    1090:	480a      	ldr	r0, [pc, #40]	; (10bc <app_cmd_add+0x8c>)
    callback.op_code = op_code;
    1092:	f88d 4004 	strb.w	r4, [sp, #4]
    memcpy(&m_cb_list[count], &callback, sizeof(cmd_cb_t));
    1096:	220c      	movs	r2, #12
    1098:	a901      	add	r1, sp, #4
    109a:	fb02 0005 	mla	r0, r2, r5, r0
    callback.proc_rsp = rsp_cb;
    109e:	e9cd 7602 	strd	r7, r6, [sp, #8]
    memcpy(&m_cb_list[count], &callback, sizeof(cmd_cb_t));
    10a2:	f008 fbc2 	bl	982a <memcpy>
    return 0;
    10a6:	2000      	movs	r0, #0
    10a8:	e7d8      	b.n	105c <app_cmd_add+0x2c>
    10aa:	bf00      	nop
    10ac:	0000a33c 	.word	0x0000a33c
    10b0:	0000a344 	.word	0x0000a344
    10b4:	0000a943 	.word	0x0000a943
    10b8:	0000a954 	.word	0x0000a954
    10bc:	2000096c 	.word	0x2000096c

000010c0 <app_cmd_request>:
{
    10c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (mode_get(&m_cmd_ctx) != CMD_MODE_IDLE) {
    10c2:	4c0f      	ldr	r4, [pc, #60]	; (1100 <app_cmd_request+0x40>)
    10c4:	7823      	ldrb	r3, [r4, #0]
    10c6:	b173      	cbz	r3, 10e6 <app_cmd_request+0x26>
    10c8:	4a0e      	ldr	r2, [pc, #56]	; (1104 <app_cmd_request+0x44>)
    10ca:	480f      	ldr	r0, [pc, #60]	; (1108 <app_cmd_request+0x48>)
        LOG_ERR("%s, exit with %d", __func__, m_cmd_ctx.mode);
    10cc:	490f      	ldr	r1, [pc, #60]	; (110c <app_cmd_request+0x4c>)
    10ce:	1a80      	subs	r0, r0, r2
    10d0:	08c0      	lsrs	r0, r0, #3
    10d2:	0180      	lsls	r0, r0, #6
    10d4:	f040 0001 	orr.w	r0, r0, #1
    10d8:	4a0d      	ldr	r2, [pc, #52]	; (1110 <app_cmd_request+0x50>)
    10da:	f008 fb2c 	bl	9736 <log_string_sync>
        return -1;
    10de:	f04f 30ff 	mov.w	r0, #4294967295
}
    10e2:	b004      	add	sp, #16
    10e4:	bd10      	pop	{r4, pc}
    app_cmd_t cmd =
    10e6:	f88d 3004 	strb.w	r3, [sp, #4]
    10ea:	f88d 0005 	strb.w	r0, [sp, #5]
        p_cmd_ctx->mode = new_mode;
    10ee:	2301      	movs	r3, #1
    return cmd_send(&cmd);
    10f0:	a801      	add	r0, sp, #4
    app_cmd_t cmd =
    10f2:	9102      	str	r1, [sp, #8]
    10f4:	f8ad 200c 	strh.w	r2, [sp, #12]
        p_cmd_ctx->mode = new_mode;
    10f8:	7023      	strb	r3, [r4, #0]
    return cmd_send(&cmd);
    10fa:	f7ff fceb 	bl	ad4 <cmd_send>
    10fe:	e7f0      	b.n	10e2 <app_cmd_request+0x22>
    1100:	20000a5c 	.word	0x20000a5c
    1104:	0000a33c 	.word	0x0000a33c
    1108:	0000a344 	.word	0x0000a344
    110c:	0000a973 	.word	0x0000a973
    1110:	0000a9cc 	.word	0x0000a9cc

00001114 <app_cmd_init>:
{
    1114:	b538      	push	{r3, r4, r5, lr}
    err = uart_init(p_device);
    1116:	f7ff fac9 	bl	6ac <uart_init>
    if (err != 0) {
    111a:	4c30      	ldr	r4, [pc, #192]	; (11dc <app_cmd_init+0xc8>)
    111c:	4b30      	ldr	r3, [pc, #192]	; (11e0 <app_cmd_init+0xcc>)
    111e:	1ae4      	subs	r4, r4, r3
    1120:	08e4      	lsrs	r4, r4, #3
    1122:	4605      	mov	r5, r0
    1124:	01a4      	lsls	r4, r4, #6
    1126:	b140      	cbz	r0, 113a <app_cmd_init+0x26>
        LOG_ERR("UART device init failed");
    1128:	492e      	ldr	r1, [pc, #184]	; (11e4 <app_cmd_init+0xd0>)
    112a:	f044 0001 	orr.w	r0, r4, #1
    112e:	f008 fb02 	bl	9736 <log_string_sync>
        return -ENXIO;
    1132:	f06f 0505 	mvn.w	r5, #5
}
    1136:	4628      	mov	r0, r5
    1138:	bd38      	pop	{r3, r4, r5, pc}
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
    113a:	f7ff fc43 	bl	9c4 <state_set.constprop.0>
    memset(&m_cb_list, 0, sizeof(m_cb_list));
    113e:	22f0      	movs	r2, #240	; 0xf0
    1140:	4629      	mov	r1, r5
    1142:	4829      	ldr	r0, [pc, #164]	; (11e8 <app_cmd_init+0xd4>)
    1144:	f008 fb7c 	bl	9840 <memset>
    memset(&m_cmd_ctx.cmd, 0, sizeof(app_cmd_t));
    1148:	220c      	movs	r2, #12
    114a:	4629      	mov	r1, r5
    114c:	4827      	ldr	r0, [pc, #156]	; (11ec <app_cmd_init+0xd8>)
    114e:	f008 fb77 	bl	9840 <memset>
    uart_rx_cb_set(on_uart_rx_ready);
    1152:	4827      	ldr	r0, [pc, #156]	; (11f0 <app_cmd_init+0xdc>)
    1154:	f7ff fb9e 	bl	894 <uart_rx_cb_set>
    uart_tx_cb_set(on_uart_tx_empty);
    1158:	4826      	ldr	r0, [pc, #152]	; (11f4 <app_cmd_init+0xe0>)
    115a:	f7ff fba1 	bl	8a0 <uart_tx_cb_set>
    m_event_cb = event_cb_dummy;
    115e:	4b26      	ldr	r3, [pc, #152]	; (11f8 <app_cmd_init+0xe4>)
    1160:	4a26      	ldr	r2, [pc, #152]	; (11fc <app_cmd_init+0xe8>)
    1162:	601a      	str	r2, [r3, #0]
    err = k_mem_slab_alloc(&cmd_rx_tx_pool, (void **)&(m_rx_buff.p_data), K_NO_WAIT);
    1164:	4926      	ldr	r1, [pc, #152]	; (1200 <app_cmd_init+0xec>)
    1166:	4827      	ldr	r0, [pc, #156]	; (1204 <app_cmd_init+0xf0>)
    1168:	2200      	movs	r2, #0
    116a:	2300      	movs	r3, #0
    116c:	f005 fc44 	bl	69f8 <k_mem_slab_alloc>
	__ASSERT(err == 0, "Failed to alloc slab");
    1170:	b150      	cbz	r0, 1188 <app_cmd_init+0x74>
    1172:	4925      	ldr	r1, [pc, #148]	; (1208 <app_cmd_init+0xf4>)
    1174:	4825      	ldr	r0, [pc, #148]	; (120c <app_cmd_init+0xf8>)
    1176:	f44f 7269 	mov.w	r2, #932	; 0x3a4
    117a:	f008 f9fb 	bl	9574 <printk>
    117e:	4822      	ldr	r0, [pc, #136]	; (1208 <app_cmd_init+0xf4>)
    1180:	f44f 7169 	mov.w	r1, #932	; 0x3a4
    1184:	f008 fac2 	bl	970c <assert_post_action>
    err = k_mem_slab_alloc(&cmd_rx_tx_pool, (void **)&(m_tx_buff.p_data), K_NO_WAIT);
    1188:	4921      	ldr	r1, [pc, #132]	; (1210 <app_cmd_init+0xfc>)
    118a:	481e      	ldr	r0, [pc, #120]	; (1204 <app_cmd_init+0xf0>)
    118c:	2200      	movs	r2, #0
    118e:	2300      	movs	r3, #0
    1190:	f005 fc32 	bl	69f8 <k_mem_slab_alloc>
	__ASSERT(err == 0, "Failed to alloc slab");
    1194:	b150      	cbz	r0, 11ac <app_cmd_init+0x98>
    1196:	491c      	ldr	r1, [pc, #112]	; (1208 <app_cmd_init+0xf4>)
    1198:	481c      	ldr	r0, [pc, #112]	; (120c <app_cmd_init+0xf8>)
    119a:	f240 32a7 	movw	r2, #935	; 0x3a7
    119e:	f008 f9e9 	bl	9574 <printk>
    11a2:	4819      	ldr	r0, [pc, #100]	; (1208 <app_cmd_init+0xf4>)
    11a4:	f240 31a7 	movw	r1, #935	; 0x3a7
    11a8:	f008 fab0 	bl	970c <assert_post_action>
    k_work_init(&wk_proc_req, wk_proc_req_handler);
    11ac:	4919      	ldr	r1, [pc, #100]	; (1214 <app_cmd_init+0x100>)
    11ae:	481a      	ldr	r0, [pc, #104]	; (1218 <app_cmd_init+0x104>)
    11b0:	f006 f9e6 	bl	7580 <k_work_init>
    k_work_init(&wk_proc_rsp, wk_proc_rsp_handler);
    11b4:	4919      	ldr	r1, [pc, #100]	; (121c <app_cmd_init+0x108>)
    11b6:	481a      	ldr	r0, [pc, #104]	; (1220 <app_cmd_init+0x10c>)
    11b8:	f006 f9e2 	bl	7580 <k_work_init>
    app_cmd_add(CMD_OP_PING, req_cb_ping, rsp_cb_ping);
    11bc:	4a19      	ldr	r2, [pc, #100]	; (1224 <app_cmd_init+0x110>)
    11be:	491a      	ldr	r1, [pc, #104]	; (1228 <app_cmd_init+0x114>)
    11c0:	2011      	movs	r0, #17
    11c2:	f7ff ff35 	bl	1030 <app_cmd_add>
    app_cmd_add(CMD_OP_RAW_DATA, req_cb_raw_data, rsp_cb_raw_data);
    11c6:	4a19      	ldr	r2, [pc, #100]	; (122c <app_cmd_init+0x118>)
    11c8:	4919      	ldr	r1, [pc, #100]	; (1230 <app_cmd_init+0x11c>)
    11ca:	2012      	movs	r0, #18
    11cc:	f7ff ff30 	bl	1030 <app_cmd_add>
    LOG_INF("Initialized SIMP Module");
    11d0:	4918      	ldr	r1, [pc, #96]	; (1234 <app_cmd_init+0x120>)
    11d2:	f044 0003 	orr.w	r0, r4, #3
    11d6:	f008 faae 	bl	9736 <log_string_sync>
    return 0;
    11da:	e7ac      	b.n	1136 <app_cmd_init+0x22>
    11dc:	0000a344 	.word	0x0000a344
    11e0:	0000a33c 	.word	0x0000a33c
    11e4:	0000a984 	.word	0x0000a984
    11e8:	2000096c 	.word	0x2000096c
    11ec:	20000a60 	.word	0x20000a60
    11f0:	00000bdd 	.word	0x00000bdd
    11f4:	00000a95 	.word	0x00000a95
    11f8:	20000a6c 	.word	0x20000a6c
    11fc:	00009525 	.word	0x00009525
    1200:	20000a70 	.word	0x20000a70
    1204:	20000690 	.word	0x20000690
    1208:	0000a99c 	.word	0x0000a99c
    120c:	0000a66d 	.word	0x0000a66d
    1210:	20000a78 	.word	0x20000a78
    1214:	00000f85 	.word	0x00000f85
    1218:	20000a80 	.word	0x20000a80
    121c:	00000eed 	.word	0x00000eed
    1220:	20000a90 	.word	0x20000a90
    1224:	000008ad 	.word	0x000008ad
    1228:	00000935 	.word	0x00000935
    122c:	00000975 	.word	0x00000975
    1230:	000008d5 	.word	0x000008d5
    1234:	0000a9b0 	.word	0x0000a9b0

00001238 <app_cmd_disable>:
{
    1238:	b510      	push	{r4, lr}
    k_mem_slab_free(&cmd_rx_tx_pool, (void **)&(m_rx_buff.p_data));
    123a:	4c09      	ldr	r4, [pc, #36]	; (1260 <app_cmd_disable+0x28>)
    uart_uninit();
    123c:	f7ff fafe 	bl	83c <uart_uninit>
    k_mem_slab_free(&cmd_rx_tx_pool, (void **)&(m_rx_buff.p_data));
    1240:	4620      	mov	r0, r4
    1242:	4908      	ldr	r1, [pc, #32]	; (1264 <app_cmd_disable+0x2c>)
    1244:	f005 fc32 	bl	6aac <k_mem_slab_free>
    k_mem_slab_free(&cmd_rx_tx_pool, (void **)&(m_tx_buff.p_data));
    1248:	4907      	ldr	r1, [pc, #28]	; (1268 <app_cmd_disable+0x30>)
    124a:	4620      	mov	r0, r4
    124c:	f005 fc2e 	bl	6aac <k_mem_slab_free>
    m_event_cb = NULL;
    1250:	4b06      	ldr	r3, [pc, #24]	; (126c <app_cmd_disable+0x34>)
    1252:	2200      	movs	r2, #0
    1254:	601a      	str	r2, [r3, #0]
    1256:	4806      	ldr	r0, [pc, #24]	; (1270 <app_cmd_disable+0x38>)
}
    1258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    125c:	f008 bf25 	b.w	a0aa <z_impl_k_timer_stop>
    1260:	20000690 	.word	0x20000690
    1264:	20000a70 	.word	0x20000a70
    1268:	20000a78 	.word	0x20000a78
    126c:	20000a6c 	.word	0x20000a6c
    1270:	20000620 	.word	0x20000620

00001274 <req_send_data>:
		}
	}
}
//size 4 8 die bytes 0 minor fw 1 major fw num
int req_send_data(uint8_t* p_req, uint16_t req_len, cmd_respond_t respond)
{
    1274:	b570      	push	{r4, r5, r6, lr}
    1276:	4b0c      	ldr	r3, [pc, #48]	; (12a8 <req_send_data+0x34>)
    1278:	4c0c      	ldr	r4, [pc, #48]	; (12ac <req_send_data+0x38>)
    127a:	1ae4      	subs	r4, r4, r3
    127c:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Request Received Length %hu",req_len);
    127e:	01a4      	lsls	r4, r4, #6
{
    1280:	4605      	mov	r5, r0
	LOG_INF("Request Received Length %hu",req_len);
    1282:	f044 0403 	orr.w	r4, r4, #3
{
    1286:	4616      	mov	r6, r2
	LOG_INF("Request Received Length %hu",req_len);
    1288:	4620      	mov	r0, r4
    128a:	460a      	mov	r2, r1
    128c:	4908      	ldr	r1, [pc, #32]	; (12b0 <req_send_data+0x3c>)
    128e:	f008 fa52 	bl	9736 <log_string_sync>

	LOG_INF("First Byte of Request %x Second Byte %x",p_req[0],p_req[1]);
    1292:	786b      	ldrb	r3, [r5, #1]
    1294:	782a      	ldrb	r2, [r5, #0]
    1296:	4907      	ldr	r1, [pc, #28]	; (12b4 <req_send_data+0x40>)
    1298:	4620      	mov	r0, r4
    129a:	f008 fa4c 	bl	9736 <log_string_sync>

    respond(helper_rx,10);
    129e:	210a      	movs	r1, #10
    12a0:	4805      	ldr	r0, [pc, #20]	; (12b8 <req_send_data+0x44>)
    12a2:	47b0      	blx	r6

    return 0;
}
    12a4:	2000      	movs	r0, #0
    12a6:	bd70      	pop	{r4, r5, r6, pc}
    12a8:	0000a33c 	.word	0x0000a33c
    12ac:	0000a364 	.word	0x0000a364
    12b0:	0000aa14 	.word	0x0000aa14
    12b4:	0000aa30 	.word	0x0000aa30
    12b8:	20000209 	.word	0x20000209

000012bc <rsp_send_data>:

//size 4 8 die bytes 0 minor fw 1 major fw num
void rsp_send_data(uint8_t* p_rsp, uint16_t rsp_len)
{
    12bc:	b570      	push	{r4, r5, r6, lr}
    12be:	4b0e      	ldr	r3, [pc, #56]	; (12f8 <rsp_send_data+0x3c>)
	LOG_INF("Response Received Length %hu",rsp_len);
	
	for(uint16_t i = 0 ; i < rsp_len ; ++i){
		printk("%x",p_rsp[i]);
    12c0:	4e0e      	ldr	r6, [pc, #56]	; (12fc <rsp_send_data+0x40>)
{
    12c2:	4604      	mov	r4, r0
    12c4:	480e      	ldr	r0, [pc, #56]	; (1300 <rsp_send_data+0x44>)
    12c6:	1ac0      	subs	r0, r0, r3
    12c8:	08c0      	lsrs	r0, r0, #3
	LOG_INF("Response Received Length %hu",rsp_len);
    12ca:	0180      	lsls	r0, r0, #6
{
    12cc:	460d      	mov	r5, r1
	LOG_INF("Response Received Length %hu",rsp_len);
    12ce:	460a      	mov	r2, r1
    12d0:	f040 0003 	orr.w	r0, r0, #3
    12d4:	490b      	ldr	r1, [pc, #44]	; (1304 <rsp_send_data+0x48>)
    12d6:	f008 fa2e 	bl	9736 <log_string_sync>
	for(uint16_t i = 0 ; i < rsp_len ; ++i){
    12da:	4425      	add	r5, r4
    12dc:	42ac      	cmp	r4, r5
    12de:	d104      	bne.n	12ea <rsp_send_data+0x2e>
	}
	printk("\n");
}
    12e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("\n");
    12e4:	4808      	ldr	r0, [pc, #32]	; (1308 <rsp_send_data+0x4c>)
    12e6:	f008 b945 	b.w	9574 <printk>
		printk("%x",p_rsp[i]);
    12ea:	f814 1b01 	ldrb.w	r1, [r4], #1
    12ee:	4630      	mov	r0, r6
    12f0:	f008 f940 	bl	9574 <printk>
	for(uint16_t i = 0 ; i < rsp_len ; ++i){
    12f4:	e7f2      	b.n	12dc <rsp_send_data+0x20>
    12f6:	bf00      	nop
    12f8:	0000a33c 	.word	0x0000a33c
    12fc:	0000aa55 	.word	0x0000aa55
    1300:	0000a364 	.word	0x0000a364
    1304:	0000aa58 	.word	0x0000aa58
    1308:	0000ac3f 	.word	0x0000ac3f

0000130c <button_handler>:
	if(DK_BTN1_MSK & button_state){
    130c:	07c2      	lsls	r2, r0, #31
{
    130e:	b510      	push	{r4, lr}
    1310:	4604      	mov	r4, r0
	if(DK_BTN1_MSK & button_state){
    1312:	d505      	bpl.n	1320 <button_handler+0x14>
		app_cmd_request(CMD_OP_SEND_DATA,helper_rx,1030);
    1314:	490a      	ldr	r1, [pc, #40]	; (1340 <button_handler+0x34>)
    1316:	f240 4206 	movw	r2, #1030	; 0x406
    131a:	2066      	movs	r0, #102	; 0x66
    131c:	f7ff fed0 	bl	10c0 <app_cmd_request>
	if(DK_BTN2_MSK & button_state){
    1320:	07a3      	lsls	r3, r4, #30
    1322:	d506      	bpl.n	1332 <button_handler+0x26>
		if(i == 0){
    1324:	4c07      	ldr	r4, [pc, #28]	; (1344 <button_handler+0x38>)
    1326:	7823      	ldrb	r3, [r4, #0]
    1328:	b923      	cbnz	r3, 1334 <button_handler+0x28>
			app_cmd_disable();
    132a:	f7ff ff85 	bl	1238 <app_cmd_disable>
			i =1;
    132e:	2301      	movs	r3, #1
			i=0;
    1330:	7023      	strb	r3, [r4, #0]
}
    1332:	bd10      	pop	{r4, pc}
			app_cmd_init(m_uart_dev);
    1334:	4b04      	ldr	r3, [pc, #16]	; (1348 <button_handler+0x3c>)
    1336:	6818      	ldr	r0, [r3, #0]
    1338:	f7ff feec 	bl	1114 <app_cmd_init>
			i=0;
    133c:	2300      	movs	r3, #0
    133e:	e7f7      	b.n	1330 <button_handler+0x24>
    1340:	20000209 	.word	0x20000209
    1344:	20001230 	.word	0x20001230
    1348:	20000aa0 	.word	0x20000aa0

0000134c <main>:

void main(void)
{
    134c:	b538      	push	{r3, r4, r5, lr}
    134e:	4b16      	ldr	r3, [pc, #88]	; (13a8 <main+0x5c>)
    1350:	4c16      	ldr	r4, [pc, #88]	; (13ac <main+0x60>)
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
    1352:	4a17      	ldr	r2, [pc, #92]	; (13b0 <main+0x64>)
    1354:	4917      	ldr	r1, [pc, #92]	; (13b4 <main+0x68>)
    1356:	1ae4      	subs	r4, r4, r3
    1358:	08e4      	lsrs	r4, r4, #3
    135a:	01a4      	lsls	r4, r4, #6
    135c:	f044 0003 	orr.w	r0, r4, #3
    1360:	f008 f9e9 	bl	9736 <log_string_sync>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1364:	4814      	ldr	r0, [pc, #80]	; (13b8 <main+0x6c>)
	int err;

	m_uart_dev = device_get_binding("UART_1");
    1366:	4d15      	ldr	r5, [pc, #84]	; (13bc <main+0x70>)
    1368:	f005 f9b6 	bl	66d8 <z_impl_device_get_binding>
    136c:	6028      	str	r0, [r5, #0]

	if (m_uart_dev == NULL) {
    136e:	b930      	cbnz	r0, 137e <main+0x32>
		LOG_ERR("Can't init UART component");
    1370:	f044 0001 	orr.w	r0, r4, #1
    1374:	4912      	ldr	r1, [pc, #72]	; (13c0 <main+0x74>)
    app_cmd_add(CMD_OP_SEND_DATA,req_send_data,rsp_send_data);

	for(;;){
		k_cpu_idle();
	}
}
    1376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Can't init UART component");
    137a:	f008 b9dc 	b.w	9736 <log_string_sync>
	err = dk_buttons_init(button_handler);
    137e:	4811      	ldr	r0, [pc, #68]	; (13c4 <main+0x78>)
    1380:	f003 ffe0 	bl	5344 <dk_buttons_init>
	if (err) {
    1384:	b120      	cbz	r0, 1390 <main+0x44>
		LOG_ERR("Cant init LED Component");
    1386:	4910      	ldr	r1, [pc, #64]	; (13c8 <main+0x7c>)
    1388:	f044 0001 	orr.w	r0, r4, #1
    138c:	f008 f9d3 	bl	9736 <log_string_sync>
	app_cmd_init(m_uart_dev);
    1390:	6828      	ldr	r0, [r5, #0]
    1392:	f7ff febf 	bl	1114 <app_cmd_init>
    app_cmd_add(CMD_OP_SEND_DATA,req_send_data,rsp_send_data);
    1396:	4a0d      	ldr	r2, [pc, #52]	; (13cc <main+0x80>)
    1398:	490d      	ldr	r1, [pc, #52]	; (13d0 <main+0x84>)
    139a:	2066      	movs	r0, #102	; 0x66
    139c:	f7ff fe48 	bl	1030 <app_cmd_add>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    13a0:	f001 fbb4 	bl	2b0c <arch_cpu_idle>
    13a4:	e7fc      	b.n	13a0 <main+0x54>
    13a6:	bf00      	nop
    13a8:	0000a33c 	.word	0x0000a33c
    13ac:	0000a364 	.word	0x0000a364
    13b0:	0000aa75 	.word	0x0000aa75
    13b4:	0000aa89 	.word	0x0000aa89
    13b8:	0000aa9a 	.word	0x0000aa9a
    13bc:	20000aa0 	.word	0x20000aa0
    13c0:	0000aaa1 	.word	0x0000aaa1
    13c4:	0000130d 	.word	0x0000130d
    13c8:	0000aabb 	.word	0x0000aabb
    13cc:	000012bd 	.word	0x000012bd
    13d0:	00001275 	.word	0x00001275

000013d4 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    13d4:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    13d6:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    13d8:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    13da:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    13de:	2c03      	cmp	r4, #3
{
    13e0:	4605      	mov	r5, r0
	switch (method) {
    13e2:	d002      	beq.n	13ea <sys_notify_finalize+0x16>
    13e4:	b12c      	cbz	r4, 13f2 <sys_notify_finalize+0x1e>
    13e6:	2000      	movs	r0, #0
    13e8:	e000      	b.n	13ec <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    13ea:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    13ec:	2300      	movs	r3, #0
    13ee:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    13f0:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    13f2:	4905      	ldr	r1, [pc, #20]	; (1408 <sys_notify_finalize+0x34>)
    13f4:	4805      	ldr	r0, [pc, #20]	; (140c <sys_notify_finalize+0x38>)
    13f6:	2245      	movs	r2, #69	; 0x45
    13f8:	f008 f8bc 	bl	9574 <printk>
    13fc:	4802      	ldr	r0, [pc, #8]	; (1408 <sys_notify_finalize+0x34>)
    13fe:	2145      	movs	r1, #69	; 0x45
    1400:	f008 f984 	bl	970c <assert_post_action>
    1404:	e7ef      	b.n	13e6 <sys_notify_finalize+0x12>
    1406:	bf00      	nop
    1408:	0000aad8 	.word	0x0000aad8
    140c:	0000a66d 	.word	0x0000a66d

00001410 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1410:	4b01      	ldr	r3, [pc, #4]	; (1418 <__printk_hook_install+0x8>)
    1412:	6018      	str	r0, [r3, #0]
}
    1414:	4770      	bx	lr
    1416:	bf00      	nop
    1418:	200000d8 	.word	0x200000d8

0000141c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    141c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1420:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1424:	f01a 0f08 	tst.w	sl, #8
{
    1428:	4604      	mov	r4, r0
    142a:	4693      	mov	fp, r2
	if (processing) {
    142c:	d01c      	beq.n	1468 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    142e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1430:	bf0c      	ite	eq
    1432:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1436:	f04a 0a20 	orrne.w	sl, sl, #32
    143a:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    143e:	f104 0014 	add.w	r0, r4, #20
    1442:	f005 fcb1 	bl	6da8 <z_spin_unlock_valid>
    1446:	b940      	cbnz	r0, 145a <process_event+0x3e>
    1448:	49ba      	ldr	r1, [pc, #744]	; (1734 <process_event+0x318>)
    144a:	48bb      	ldr	r0, [pc, #748]	; (1738 <process_event+0x31c>)
    144c:	22ac      	movs	r2, #172	; 0xac
    144e:	f008 f891 	bl	9574 <printk>
    1452:	48b8      	ldr	r0, [pc, #736]	; (1734 <process_event+0x318>)
    1454:	21ac      	movs	r1, #172	; 0xac
    1456:	f008 f959 	bl	970c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    145a:	f38b 8811 	msr	BASEPRI, fp
    145e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1462:	b003      	add	sp, #12
    1464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    1468:	4fb4      	ldr	r7, [pc, #720]	; (173c <process_event+0x320>)
    146a:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 1738 <process_event+0x31c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    146e:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    1472:	2902      	cmp	r1, #2
    1474:	d106      	bne.n	1484 <process_event+0x68>
			evt = process_recheck(mgr);
    1476:	4620      	mov	r0, r4
    1478:	f008 f889 	bl	958e <process_recheck>
		if (evt == EVT_NOP) {
    147c:	2800      	cmp	r0, #0
    147e:	d0de      	beq.n	143e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1480:	2801      	cmp	r0, #1
    1482:	d165      	bne.n	1550 <process_event+0x134>
			res = mgr->last_res;
    1484:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1488:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    148a:	f1b9 0f00 	cmp.w	r9, #0
    148e:	da19      	bge.n	14c4 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1490:	2600      	movs	r6, #0
		*clients = mgr->clients;
    1492:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1494:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    1498:	e9c4 6600 	strd	r6, r6, [r4]
    149c:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    14a0:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14a2:	8ba3      	ldrh	r3, [r4, #28]
    14a4:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    14a8:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14aa:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    14ac:	d003      	beq.n	14b6 <process_event+0x9a>
		if (do_monitors
    14ae:	68a2      	ldr	r2, [r4, #8]
    14b0:	2a00      	cmp	r2, #0
    14b2:	f040 80f1 	bne.w	1698 <process_event+0x27c>
		    || !sys_slist_is_empty(&clients)
    14b6:	b915      	cbnz	r5, 14be <process_event+0xa2>
		    || (transit != NULL)) {
    14b8:	2e00      	cmp	r6, #0
    14ba:	f000 812b 	beq.w	1714 <process_event+0x2f8>
    14be:	f04f 0a00 	mov.w	sl, #0
    14c2:	e0eb      	b.n	169c <process_event+0x280>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    14c4:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    14c8:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    14ca:	2901      	cmp	r1, #1
    14cc:	d822      	bhi.n	1514 <process_event+0xf8>
	list->head = NULL;
    14ce:	2100      	movs	r1, #0
    14d0:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    14d4:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    14d6:	6825      	ldr	r5, [r4, #0]
    14d8:	b29b      	uxth	r3, r3
	list->tail = NULL;
    14da:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    14de:	d10c      	bne.n	14fa <process_event+0xde>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    14e0:	428d      	cmp	r5, r1
    14e2:	462a      	mov	r2, r5
    14e4:	bf38      	it	cc
    14e6:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    14e8:	b12a      	cbz	r2, 14f6 <process_event+0xda>
				mgr->refs += 1U;
    14ea:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    14ec:	6812      	ldr	r2, [r2, #0]
    14ee:	3101      	adds	r1, #1
    14f0:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    14f2:	2a00      	cmp	r2, #0
    14f4:	d1f8      	bne.n	14e8 <process_event+0xcc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14f6:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    14fa:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    14fc:	4620      	mov	r0, r4
    14fe:	f008 f846 	bl	958e <process_recheck>
    1502:	4606      	mov	r6, r0
    1504:	2800      	cmp	r0, #0
    1506:	d0cc      	beq.n	14a2 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1508:	8ba3      	ldrh	r3, [r4, #28]
    150a:	f043 0320 	orr.w	r3, r3, #32
    150e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1510:	2600      	movs	r6, #0
    1512:	e7c6      	b.n	14a2 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1514:	2a04      	cmp	r2, #4
    1516:	d10d      	bne.n	1534 <process_event+0x118>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1518:	f023 0307 	bic.w	r3, r3, #7
    151c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    151e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1520:	4620      	mov	r0, r4
    1522:	f008 f834 	bl	958e <process_recheck>
    1526:	4605      	mov	r5, r0
    1528:	b180      	cbz	r0, 154c <process_event+0x130>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    152a:	f042 0220 	orr.w	r2, r2, #32
    152e:	83a2      	strh	r2, [r4, #28]
    1530:	2500      	movs	r5, #0
    1532:	e7ed      	b.n	1510 <process_event+0xf4>
		__ASSERT_NO_MSG(false);
    1534:	f240 121b 	movw	r2, #283	; 0x11b
    1538:	4639      	mov	r1, r7
    153a:	4640      	mov	r0, r8
    153c:	f008 f81a 	bl	9574 <printk>
    1540:	f240 111b 	movw	r1, #283	; 0x11b
    1544:	4638      	mov	r0, r7
    1546:	f008 f8e1 	bl	970c <assert_post_action>
    154a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    154c:	462e      	mov	r6, r5
    154e:	e7a8      	b.n	14a2 <process_event+0x86>
		} else if (evt == EVT_START) {
    1550:	2803      	cmp	r0, #3
    1552:	d131      	bne.n	15b8 <process_event+0x19c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1554:	f1ba 0f00 	cmp.w	sl, #0
    1558:	d00a      	beq.n	1570 <process_event+0x154>
    155a:	4639      	mov	r1, r7
    155c:	4640      	mov	r0, r8
    155e:	f44f 72ab 	mov.w	r2, #342	; 0x156
    1562:	f008 f807 	bl	9574 <printk>
    1566:	f44f 71ab 	mov.w	r1, #342	; 0x156
    156a:	4638      	mov	r0, r7
    156c:	f008 f8ce 	bl	970c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1570:	6823      	ldr	r3, [r4, #0]
    1572:	b953      	cbnz	r3, 158a <process_event+0x16e>
    1574:	4639      	mov	r1, r7
    1576:	4640      	mov	r0, r8
    1578:	f240 1257 	movw	r2, #343	; 0x157
    157c:	f007 fffa 	bl	9574 <printk>
    1580:	f240 1157 	movw	r1, #343	; 0x157
    1584:	4638      	mov	r0, r7
    1586:	f008 f8c1 	bl	970c <assert_post_action>
			transit = mgr->transitions->start;
    158a:	6923      	ldr	r3, [r4, #16]
    158c:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    158e:	b956      	cbnz	r6, 15a6 <process_event+0x18a>
    1590:	4639      	mov	r1, r7
    1592:	4640      	mov	r0, r8
    1594:	f44f 72ad 	mov.w	r2, #346	; 0x15a
    1598:	f007 ffec 	bl	9574 <printk>
    159c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    15a0:	4638      	mov	r0, r7
    15a2:	f008 f8b3 	bl	970c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15a6:	8ba3      	ldrh	r3, [r4, #28]
    15a8:	f023 0307 	bic.w	r3, r3, #7
    15ac:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    15b0:	83a3      	strh	r3, [r4, #28]
}
    15b2:	2500      	movs	r5, #0
		res = 0;
    15b4:	46a9      	mov	r9, r5
}
    15b6:	e774      	b.n	14a2 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    15b8:	2804      	cmp	r0, #4
    15ba:	d12e      	bne.n	161a <process_event+0x1fe>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    15bc:	f1ba 0f02 	cmp.w	sl, #2
    15c0:	d00a      	beq.n	15d8 <process_event+0x1bc>
    15c2:	4639      	mov	r1, r7
    15c4:	4640      	mov	r0, r8
    15c6:	f240 125d 	movw	r2, #349	; 0x15d
    15ca:	f007 ffd3 	bl	9574 <printk>
    15ce:	f240 115d 	movw	r1, #349	; 0x15d
    15d2:	4638      	mov	r0, r7
    15d4:	f008 f89a 	bl	970c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    15d8:	8be3      	ldrh	r3, [r4, #30]
    15da:	b153      	cbz	r3, 15f2 <process_event+0x1d6>
    15dc:	4639      	mov	r1, r7
    15de:	4640      	mov	r0, r8
    15e0:	f44f 72af 	mov.w	r2, #350	; 0x15e
    15e4:	f007 ffc6 	bl	9574 <printk>
    15e8:	f44f 71af 	mov.w	r1, #350	; 0x15e
    15ec:	4638      	mov	r0, r7
    15ee:	f008 f88d 	bl	970c <assert_post_action>
			transit = mgr->transitions->stop;
    15f2:	6923      	ldr	r3, [r4, #16]
    15f4:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    15f6:	b956      	cbnz	r6, 160e <process_event+0x1f2>
    15f8:	4639      	mov	r1, r7
    15fa:	4640      	mov	r0, r8
    15fc:	f240 1261 	movw	r2, #353	; 0x161
    1600:	f007 ffb8 	bl	9574 <printk>
    1604:	f240 1161 	movw	r1, #353	; 0x161
    1608:	4638      	mov	r0, r7
    160a:	f008 f87f 	bl	970c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    160e:	8ba3      	ldrh	r3, [r4, #28]
    1610:	f023 0307 	bic.w	r3, r3, #7
    1614:	f043 0304 	orr.w	r3, r3, #4
    1618:	e7ca      	b.n	15b0 <process_event+0x194>
		} else if (evt == EVT_RESET) {
    161a:	2805      	cmp	r0, #5
    161c:	d12e      	bne.n	167c <process_event+0x260>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    161e:	f1ba 0f01 	cmp.w	sl, #1
    1622:	d00a      	beq.n	163a <process_event+0x21e>
    1624:	4639      	mov	r1, r7
    1626:	4640      	mov	r0, r8
    1628:	f44f 72b2 	mov.w	r2, #356	; 0x164
    162c:	f007 ffa2 	bl	9574 <printk>
    1630:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1634:	4638      	mov	r0, r7
    1636:	f008 f869 	bl	970c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    163a:	6823      	ldr	r3, [r4, #0]
    163c:	b953      	cbnz	r3, 1654 <process_event+0x238>
    163e:	4639      	mov	r1, r7
    1640:	4640      	mov	r0, r8
    1642:	f240 1265 	movw	r2, #357	; 0x165
    1646:	f007 ff95 	bl	9574 <printk>
    164a:	f240 1165 	movw	r1, #357	; 0x165
    164e:	4638      	mov	r0, r7
    1650:	f008 f85c 	bl	970c <assert_post_action>
			transit = mgr->transitions->reset;
    1654:	6923      	ldr	r3, [r4, #16]
    1656:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    1658:	b956      	cbnz	r6, 1670 <process_event+0x254>
    165a:	4639      	mov	r1, r7
    165c:	4640      	mov	r0, r8
    165e:	f44f 72b4 	mov.w	r2, #360	; 0x168
    1662:	f007 ff87 	bl	9574 <printk>
    1666:	f44f 71b4 	mov.w	r1, #360	; 0x168
    166a:	4638      	mov	r0, r7
    166c:	f008 f84e 	bl	970c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1670:	8ba3      	ldrh	r3, [r4, #28]
    1672:	f023 0307 	bic.w	r3, r3, #7
    1676:	f043 0305 	orr.w	r3, r3, #5
    167a:	e799      	b.n	15b0 <process_event+0x194>
			__ASSERT_NO_MSG(false);
    167c:	f240 126b 	movw	r2, #363	; 0x16b
    1680:	4639      	mov	r1, r7
    1682:	4640      	mov	r0, r8
    1684:	f007 ff76 	bl	9574 <printk>
    1688:	2500      	movs	r5, #0
    168a:	f240 116b 	movw	r1, #363	; 0x16b
    168e:	4638      	mov	r0, r7
    1690:	f008 f83c 	bl	970c <assert_post_action>
		onoff_transition_fn transit = NULL;
    1694:	462e      	mov	r6, r5
    1696:	e78d      	b.n	15b4 <process_event+0x198>
				   && !sys_slist_is_empty(&mgr->monitors);
    1698:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    169c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    16a0:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    16a2:	f104 0314 	add.w	r3, r4, #20
    16a6:	4618      	mov	r0, r3
    16a8:	9301      	str	r3, [sp, #4]
    16aa:	f005 fb7d 	bl	6da8 <z_spin_unlock_valid>
    16ae:	b940      	cbnz	r0, 16c2 <process_event+0x2a6>
    16b0:	4920      	ldr	r1, [pc, #128]	; (1734 <process_event+0x318>)
    16b2:	4640      	mov	r0, r8
    16b4:	22ac      	movs	r2, #172	; 0xac
    16b6:	f007 ff5d 	bl	9574 <printk>
    16ba:	481e      	ldr	r0, [pc, #120]	; (1734 <process_event+0x318>)
    16bc:	21ac      	movs	r1, #172	; 0xac
    16be:	f008 f825 	bl	970c <assert_post_action>
    16c2:	f38b 8811 	msr	BASEPRI, fp
    16c6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    16ca:	f1ba 0f00 	cmp.w	sl, #0
    16ce:	d139      	bne.n	1744 <process_event+0x328>
	while (!sys_slist_is_empty(list)) {
    16d0:	2d00      	cmp	r5, #0
    16d2:	d14c      	bne.n	176e <process_event+0x352>
			if (transit != NULL) {
    16d4:	b116      	cbz	r6, 16dc <process_event+0x2c0>
				transit(mgr, transition_complete);
    16d6:	491a      	ldr	r1, [pc, #104]	; (1740 <process_event+0x324>)
    16d8:	4620      	mov	r0, r4
    16da:	47b0      	blx	r6
	__asm__ volatile(
    16dc:	f04f 0320 	mov.w	r3, #32
    16e0:	f3ef 8b11 	mrs	fp, BASEPRI
    16e4:	f383 8812 	msr	BASEPRI_MAX, r3
    16e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    16ec:	9801      	ldr	r0, [sp, #4]
    16ee:	f005 fb4d 	bl	6d8c <z_spin_lock_valid>
    16f2:	b940      	cbnz	r0, 1706 <process_event+0x2ea>
    16f4:	490f      	ldr	r1, [pc, #60]	; (1734 <process_event+0x318>)
    16f6:	4640      	mov	r0, r8
    16f8:	2281      	movs	r2, #129	; 0x81
    16fa:	f007 ff3b 	bl	9574 <printk>
    16fe:	480d      	ldr	r0, [pc, #52]	; (1734 <process_event+0x318>)
    1700:	2181      	movs	r1, #129	; 0x81
    1702:	f008 f803 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    1706:	9801      	ldr	r0, [sp, #4]
    1708:	f005 fb5e 	bl	6dc8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    170c:	8ba3      	ldrh	r3, [r4, #28]
    170e:	f023 0308 	bic.w	r3, r3, #8
    1712:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1714:	8ba3      	ldrh	r3, [r4, #28]
    1716:	06da      	lsls	r2, r3, #27
    1718:	d531      	bpl.n	177e <process_event+0x362>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    171a:	f023 0310 	bic.w	r3, r3, #16
    171e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    1720:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1722:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    1726:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    172a:	2900      	cmp	r1, #0
    172c:	f47f aea1 	bne.w	1472 <process_event+0x56>
out:
    1730:	e685      	b.n	143e <process_event+0x22>
    1732:	bf00      	nop
    1734:	0000ab1d 	.word	0x0000ab1d
    1738:	0000a66d 	.word	0x0000a66d
    173c:	0000aafb 	.word	0x0000aafb
    1740:	00001791 	.word	0x00001791
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1744:	68a1      	ldr	r1, [r4, #8]
    1746:	2900      	cmp	r1, #0
    1748:	d0c2      	beq.n	16d0 <process_event+0x2b4>
	return node->next;
    174a:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    174c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1750:	9a00      	ldr	r2, [sp, #0]
    1752:	2b00      	cmp	r3, #0
    1754:	bf38      	it	cc
    1756:	2300      	movcc	r3, #0
    1758:	469a      	mov	sl, r3
    175a:	4620      	mov	r0, r4
    175c:	464b      	mov	r3, r9
    175e:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1760:	f1ba 0f00 	cmp.w	sl, #0
    1764:	d0b4      	beq.n	16d0 <process_event+0x2b4>
    1766:	f8da 3000 	ldr.w	r3, [sl]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    176a:	4651      	mov	r1, sl
    176c:	e7ee      	b.n	174c <process_event+0x330>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    176e:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1770:	9a00      	ldr	r2, [sp, #0]
    1772:	682d      	ldr	r5, [r5, #0]
    1774:	464b      	mov	r3, r9
    1776:	4620      	mov	r0, r4
    1778:	f007 ff25 	bl	95c6 <notify_one>
    177c:	e7a8      	b.n	16d0 <process_event+0x2b4>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    177e:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1782:	bf1e      	ittt	ne
    1784:	f023 0320 	bicne.w	r3, r3, #32
    1788:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    178a:	2102      	movne	r1, #2
    178c:	e7c9      	b.n	1722 <process_event+0x306>
    178e:	bf00      	nop

00001790 <transition_complete>:
{
    1790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1792:	4604      	mov	r4, r0
    1794:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1796:	f100 0614 	add.w	r6, r0, #20
    179a:	f04f 0320 	mov.w	r3, #32
    179e:	f3ef 8711 	mrs	r7, BASEPRI
    17a2:	f383 8812 	msr	BASEPRI_MAX, r3
    17a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    17aa:	4630      	mov	r0, r6
    17ac:	f005 faee 	bl	6d8c <z_spin_lock_valid>
    17b0:	b940      	cbnz	r0, 17c4 <transition_complete+0x34>
    17b2:	490a      	ldr	r1, [pc, #40]	; (17dc <transition_complete+0x4c>)
    17b4:	480a      	ldr	r0, [pc, #40]	; (17e0 <transition_complete+0x50>)
    17b6:	2281      	movs	r2, #129	; 0x81
    17b8:	f007 fedc 	bl	9574 <printk>
    17bc:	4807      	ldr	r0, [pc, #28]	; (17dc <transition_complete+0x4c>)
    17be:	2181      	movs	r1, #129	; 0x81
    17c0:	f007 ffa4 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    17c4:	4630      	mov	r0, r6
    17c6:	f005 faff 	bl	6dc8 <z_spin_lock_set_owner>
	mgr->last_res = res;
    17ca:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    17cc:	463a      	mov	r2, r7
    17ce:	4620      	mov	r0, r4
    17d0:	2101      	movs	r1, #1
}
    17d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    17d6:	f7ff be21 	b.w	141c <process_event>
    17da:	bf00      	nop
    17dc:	0000ab1d 	.word	0x0000ab1d
    17e0:	0000a66d 	.word	0x0000a66d

000017e4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    17e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    17e8:	4604      	mov	r4, r0
    17ea:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    17ec:	f007 ff01 	bl	95f2 <validate_args>

	if (rv < 0) {
    17f0:	1e05      	subs	r5, r0, #0
    17f2:	db54      	blt.n	189e <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    17f4:	f104 0914 	add.w	r9, r4, #20
    17f8:	f04f 0320 	mov.w	r3, #32
    17fc:	f3ef 8a11 	mrs	sl, BASEPRI
    1800:	f383 8812 	msr	BASEPRI_MAX, r3
    1804:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1808:	4648      	mov	r0, r9
    180a:	f005 fabf 	bl	6d8c <z_spin_lock_valid>
    180e:	b940      	cbnz	r0, 1822 <onoff_request+0x3e>
    1810:	4933      	ldr	r1, [pc, #204]	; (18e0 <onoff_request+0xfc>)
    1812:	4834      	ldr	r0, [pc, #208]	; (18e4 <onoff_request+0x100>)
    1814:	2281      	movs	r2, #129	; 0x81
    1816:	f007 fead 	bl	9574 <printk>
    181a:	4831      	ldr	r0, [pc, #196]	; (18e0 <onoff_request+0xfc>)
    181c:	2181      	movs	r1, #129	; 0x81
    181e:	f007 ff75 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    1822:	4648      	mov	r0, r9
    1824:	f005 fad0 	bl	6dc8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1828:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    182a:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    182c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1830:	428b      	cmp	r3, r1
    1832:	f002 0607 	and.w	r6, r2, #7
    1836:	d04a      	beq.n	18ce <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1838:	2e02      	cmp	r6, #2
    183a:	d11f      	bne.n	187c <onoff_request+0x98>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    183c:	3301      	adds	r3, #1
    183e:	83e3      	strh	r3, [r4, #30]
	rv = state;
    1840:	4635      	mov	r5, r6
		notify = true;
    1842:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1846:	4648      	mov	r0, r9
    1848:	f005 faae 	bl	6da8 <z_spin_unlock_valid>
    184c:	b940      	cbnz	r0, 1860 <onoff_request+0x7c>
    184e:	4924      	ldr	r1, [pc, #144]	; (18e0 <onoff_request+0xfc>)
    1850:	4824      	ldr	r0, [pc, #144]	; (18e4 <onoff_request+0x100>)
    1852:	22ac      	movs	r2, #172	; 0xac
    1854:	f007 fe8e 	bl	9574 <printk>
    1858:	4821      	ldr	r0, [pc, #132]	; (18e0 <onoff_request+0xfc>)
    185a:	21ac      	movs	r1, #172	; 0xac
    185c:	f007 ff56 	bl	970c <assert_post_action>
	__asm__ volatile(
    1860:	f38a 8811 	msr	BASEPRI, sl
    1864:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1868:	f1b8 0f00 	cmp.w	r8, #0
    186c:	d017      	beq.n	189e <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    186e:	2300      	movs	r3, #0
    1870:	4632      	mov	r2, r6
    1872:	4639      	mov	r1, r7
    1874:	4620      	mov	r0, r4
    1876:	f007 fea6 	bl	95c6 <notify_one>
    187a:	e010      	b.n	189e <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    187c:	0793      	lsls	r3, r2, #30
    187e:	d001      	beq.n	1884 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    1880:	2e06      	cmp	r6, #6
    1882:	d10f      	bne.n	18a4 <onoff_request+0xc0>
	parent->next = child;
    1884:	2300      	movs	r3, #0
    1886:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    1888:	6863      	ldr	r3, [r4, #4]
    188a:	b9eb      	cbnz	r3, 18c8 <onoff_request+0xe4>
	list->head = node;
    188c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1890:	4635      	mov	r5, r6
    1892:	b9f6      	cbnz	r6, 18d2 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    1894:	4652      	mov	r2, sl
    1896:	2102      	movs	r1, #2
    1898:	4620      	mov	r0, r4
    189a:	f7ff fdbf 	bl	141c <process_event>
		}
	}

	return rv;
}
    189e:	4628      	mov	r0, r5
    18a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    18a4:	2e05      	cmp	r6, #5
    18a6:	d017      	beq.n	18d8 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    18a8:	2e01      	cmp	r6, #1
    18aa:	d00a      	beq.n	18c2 <onoff_request+0xde>
    18ac:	490e      	ldr	r1, [pc, #56]	; (18e8 <onoff_request+0x104>)
    18ae:	480d      	ldr	r0, [pc, #52]	; (18e4 <onoff_request+0x100>)
    18b0:	f240 12c9 	movw	r2, #457	; 0x1c9
    18b4:	f007 fe5e 	bl	9574 <printk>
    18b8:	480b      	ldr	r0, [pc, #44]	; (18e8 <onoff_request+0x104>)
    18ba:	f240 11c9 	movw	r1, #457	; 0x1c9
    18be:	f007 ff25 	bl	970c <assert_post_action>
		rv = -EIO;
    18c2:	f06f 0504 	mvn.w	r5, #4
    18c6:	e004      	b.n	18d2 <onoff_request+0xee>
	parent->next = child;
    18c8:	601f      	str	r7, [r3, #0]
	list->tail = node;
    18ca:	6067      	str	r7, [r4, #4]
}
    18cc:	e7e0      	b.n	1890 <onoff_request+0xac>
		rv = -EAGAIN;
    18ce:	f06f 050a 	mvn.w	r5, #10
    18d2:	f04f 0800 	mov.w	r8, #0
    18d6:	e7b6      	b.n	1846 <onoff_request+0x62>
		rv = -ENOTSUP;
    18d8:	f06f 0585 	mvn.w	r5, #133	; 0x85
    18dc:	e7f9      	b.n	18d2 <onoff_request+0xee>
    18de:	bf00      	nop
    18e0:	0000ab1d 	.word	0x0000ab1d
    18e4:	0000a66d 	.word	0x0000a66d
    18e8:	0000aafb 	.word	0x0000aafb

000018ec <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    18ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18f0:	b091      	sub	sp, #68	; 0x44
    18f2:	468b      	mov	fp, r1
    18f4:	9002      	str	r0, [sp, #8]
    18f6:	4692      	mov	sl, r2
    18f8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    18fa:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    18fc:	f89a 0000 	ldrb.w	r0, [sl]
    1900:	b908      	cbnz	r0, 1906 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1902:	4628      	mov	r0, r5
    1904:	e35e      	b.n	1fc4 <cbvprintf+0x6d8>
		if (*fp != '%') {
    1906:	2825      	cmp	r0, #37	; 0x25
    1908:	f10a 0701 	add.w	r7, sl, #1
    190c:	d007      	beq.n	191e <cbvprintf+0x32>
			OUTC('%');
    190e:	9b02      	ldr	r3, [sp, #8]
    1910:	4659      	mov	r1, fp
    1912:	4798      	blx	r3
    1914:	2800      	cmp	r0, #0
    1916:	f2c0 8355 	blt.w	1fc4 <cbvprintf+0x6d8>
    191a:	3501      	adds	r5, #1
			break;
    191c:	e210      	b.n	1d40 <cbvprintf+0x454>
		} state = {
    191e:	2218      	movs	r2, #24
    1920:	2100      	movs	r1, #0
    1922:	a80a      	add	r0, sp, #40	; 0x28
    1924:	f007 ff8c 	bl	9840 <memset>
	if (*sp == '%') {
    1928:	f89a 3001 	ldrb.w	r3, [sl, #1]
    192c:	2b25      	cmp	r3, #37	; 0x25
    192e:	d078      	beq.n	1a22 <cbvprintf+0x136>
    1930:	2200      	movs	r2, #0
    1932:	4694      	mov	ip, r2
    1934:	4616      	mov	r6, r2
    1936:	4696      	mov	lr, r2
    1938:	4610      	mov	r0, r2
    193a:	4639      	mov	r1, r7
		switch (*sp) {
    193c:	f817 3b01 	ldrb.w	r3, [r7], #1
    1940:	2b2b      	cmp	r3, #43	; 0x2b
    1942:	f000 809d 	beq.w	1a80 <cbvprintf+0x194>
    1946:	f200 8094 	bhi.w	1a72 <cbvprintf+0x186>
    194a:	2b20      	cmp	r3, #32
    194c:	f000 809b 	beq.w	1a86 <cbvprintf+0x19a>
    1950:	2b23      	cmp	r3, #35	; 0x23
    1952:	f000 809a 	beq.w	1a8a <cbvprintf+0x19e>
    1956:	b128      	cbz	r0, 1964 <cbvprintf+0x78>
    1958:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    195c:	f040 0004 	orr.w	r0, r0, #4
    1960:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1964:	f1be 0f00 	cmp.w	lr, #0
    1968:	d005      	beq.n	1976 <cbvprintf+0x8a>
    196a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    196e:	f040 0008 	orr.w	r0, r0, #8
    1972:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1976:	b12e      	cbz	r6, 1984 <cbvprintf+0x98>
    1978:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    197c:	f040 0010 	orr.w	r0, r0, #16
    1980:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1984:	f1bc 0f00 	cmp.w	ip, #0
    1988:	d005      	beq.n	1996 <cbvprintf+0xaa>
    198a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    198e:	f040 0020 	orr.w	r0, r0, #32
    1992:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1996:	b12a      	cbz	r2, 19a4 <cbvprintf+0xb8>
    1998:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    199c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    19a0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    19a4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    19a8:	f002 0044 	and.w	r0, r2, #68	; 0x44
    19ac:	2844      	cmp	r0, #68	; 0x44
    19ae:	d103      	bne.n	19b8 <cbvprintf+0xcc>
		conv->flag_zero = false;
    19b0:	f36f 1286 	bfc	r2, #6, #1
    19b4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    19b8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    19bc:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    19be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    19c2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    19c6:	d17b      	bne.n	1ac0 <cbvprintf+0x1d4>
		conv->width_star = true;
    19c8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    19cc:	f042 0201 	orr.w	r2, r2, #1
    19d0:	1c4b      	adds	r3, r1, #1
    19d2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    19d6:	781a      	ldrb	r2, [r3, #0]
    19d8:	2a2e      	cmp	r2, #46	; 0x2e
    19da:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    19de:	bf0c      	ite	eq
    19e0:	2101      	moveq	r1, #1
    19e2:	2100      	movne	r1, #0
    19e4:	f361 0241 	bfi	r2, r1, #1, #1
    19e8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    19ec:	d174      	bne.n	1ad8 <cbvprintf+0x1ec>
	if (*sp == '*') {
    19ee:	785a      	ldrb	r2, [r3, #1]
    19f0:	2a2a      	cmp	r2, #42	; 0x2a
    19f2:	d06a      	beq.n	1aca <cbvprintf+0x1de>
    19f4:	3301      	adds	r3, #1
	size_t val = 0;
    19f6:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    19f8:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    19fa:	4618      	mov	r0, r3
    19fc:	f810 2b01 	ldrb.w	r2, [r0], #1
    1a00:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1a04:	2f09      	cmp	r7, #9
    1a06:	f240 808e 	bls.w	1b26 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    1a0a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1a0e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1a10:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1a14:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1a18:	f361 0241 	bfi	r2, r1, #1, #1
    1a1c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1a20:	e05a      	b.n	1ad8 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1a22:	f10a 0702 	add.w	r7, sl, #2
    1a26:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1a2a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1a2e:	07d9      	lsls	r1, r3, #31
    1a30:	f140 8149 	bpl.w	1cc6 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1a34:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1a38:	f1b9 0f00 	cmp.w	r9, #0
    1a3c:	da07      	bge.n	1a4e <cbvprintf+0x162>
				conv->flag_dash = true;
    1a3e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1a42:	f042 0204 	orr.w	r2, r2, #4
    1a46:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1a4a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1a4e:	075a      	lsls	r2, r3, #29
    1a50:	f140 8142 	bpl.w	1cd8 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1a54:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1a58:	f1b8 0f00 	cmp.w	r8, #0
    1a5c:	f280 8141 	bge.w	1ce2 <cbvprintf+0x3f6>
				conv->prec_present = false;
    1a60:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1a64:	f36f 0341 	bfc	r3, #1, #1
    1a68:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1a6c:	f04f 38ff 	mov.w	r8, #4294967295
    1a70:	e137      	b.n	1ce2 <cbvprintf+0x3f6>
		switch (*sp) {
    1a72:	2b2d      	cmp	r3, #45	; 0x2d
    1a74:	d00c      	beq.n	1a90 <cbvprintf+0x1a4>
    1a76:	2b30      	cmp	r3, #48	; 0x30
    1a78:	f47f af6d 	bne.w	1956 <cbvprintf+0x6a>
			conv->flag_zero = true;
    1a7c:	2201      	movs	r2, #1
	} while (loop);
    1a7e:	e75c      	b.n	193a <cbvprintf+0x4e>
			conv->flag_plus = true;
    1a80:	f04f 0e01 	mov.w	lr, #1
    1a84:	e759      	b.n	193a <cbvprintf+0x4e>
			conv->flag_space = true;
    1a86:	2601      	movs	r6, #1
    1a88:	e757      	b.n	193a <cbvprintf+0x4e>
			conv->flag_hash = true;
    1a8a:	f04f 0c01 	mov.w	ip, #1
    1a8e:	e754      	b.n	193a <cbvprintf+0x4e>
		switch (*sp) {
    1a90:	2001      	movs	r0, #1
    1a92:	e752      	b.n	193a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1a94:	fb0c 0202 	mla	r2, ip, r2, r0
    1a98:	3a30      	subs	r2, #48	; 0x30
    1a9a:	4633      	mov	r3, r6
    1a9c:	461e      	mov	r6, r3
    1a9e:	f816 0b01 	ldrb.w	r0, [r6], #1
    1aa2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1aa6:	2f09      	cmp	r7, #9
    1aa8:	d9f4      	bls.n	1a94 <cbvprintf+0x1a8>
	if (sp != wp) {
    1aaa:	4299      	cmp	r1, r3
    1aac:	d093      	beq.n	19d6 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1aae:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1ab2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1ab4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1ab6:	f362 0141 	bfi	r1, r2, #1, #1
    1aba:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1abe:	e78a      	b.n	19d6 <cbvprintf+0xea>
    1ac0:	460b      	mov	r3, r1
	size_t val = 0;
    1ac2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1ac4:	f04f 0c0a 	mov.w	ip, #10
    1ac8:	e7e8      	b.n	1a9c <cbvprintf+0x1b0>
		conv->prec_star = true;
    1aca:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1ace:	f042 0204 	orr.w	r2, r2, #4
    1ad2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1ad6:	3302      	adds	r3, #2
	switch (*sp) {
    1ad8:	461f      	mov	r7, r3
    1ada:	f817 2b01 	ldrb.w	r2, [r7], #1
    1ade:	2a6c      	cmp	r2, #108	; 0x6c
    1ae0:	d041      	beq.n	1b66 <cbvprintf+0x27a>
    1ae2:	d825      	bhi.n	1b30 <cbvprintf+0x244>
    1ae4:	2a68      	cmp	r2, #104	; 0x68
    1ae6:	d02b      	beq.n	1b40 <cbvprintf+0x254>
    1ae8:	2a6a      	cmp	r2, #106	; 0x6a
    1aea:	d046      	beq.n	1b7a <cbvprintf+0x28e>
    1aec:	2a4c      	cmp	r2, #76	; 0x4c
    1aee:	d04c      	beq.n	1b8a <cbvprintf+0x29e>
    1af0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1af2:	f817 2b01 	ldrb.w	r2, [r7], #1
    1af6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1afa:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1afe:	2a78      	cmp	r2, #120	; 0x78
    1b00:	f200 80d9 	bhi.w	1cb6 <cbvprintf+0x3ca>
    1b04:	2a57      	cmp	r2, #87	; 0x57
    1b06:	d84d      	bhi.n	1ba4 <cbvprintf+0x2b8>
    1b08:	2a41      	cmp	r2, #65	; 0x41
    1b0a:	d003      	beq.n	1b14 <cbvprintf+0x228>
    1b0c:	3a45      	subs	r2, #69	; 0x45
    1b0e:	2a02      	cmp	r2, #2
    1b10:	f200 80d1 	bhi.w	1cb6 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1b14:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1b18:	2204      	movs	r2, #4
    1b1a:	f362 0302 	bfi	r3, r2, #0, #3
    1b1e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1b22:	2301      	movs	r3, #1
			break;
    1b24:	e09e      	b.n	1c64 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    1b26:	fb06 2101 	mla	r1, r6, r1, r2
    1b2a:	3930      	subs	r1, #48	; 0x30
    1b2c:	4603      	mov	r3, r0
    1b2e:	e764      	b.n	19fa <cbvprintf+0x10e>
	switch (*sp) {
    1b30:	2a74      	cmp	r2, #116	; 0x74
    1b32:	d026      	beq.n	1b82 <cbvprintf+0x296>
    1b34:	2a7a      	cmp	r2, #122	; 0x7a
    1b36:	d1db      	bne.n	1af0 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1b38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1b3c:	2206      	movs	r2, #6
    1b3e:	e00d      	b.n	1b5c <cbvprintf+0x270>
		if (*++sp == 'h') {
    1b40:	785a      	ldrb	r2, [r3, #1]
    1b42:	2a68      	cmp	r2, #104	; 0x68
    1b44:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1b48:	d106      	bne.n	1b58 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    1b4a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1b4c:	f361 02c6 	bfi	r2, r1, #3, #4
    1b50:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1b54:	1c9f      	adds	r7, r3, #2
    1b56:	e7cc      	b.n	1af2 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1b58:	4613      	mov	r3, r2
    1b5a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1b5c:	f362 03c6 	bfi	r3, r2, #3, #4
    1b60:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1b64:	e7c5      	b.n	1af2 <cbvprintf+0x206>
		if (*++sp == 'l') {
    1b66:	785a      	ldrb	r2, [r3, #1]
    1b68:	2a6c      	cmp	r2, #108	; 0x6c
    1b6a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1b6e:	d101      	bne.n	1b74 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1b70:	2104      	movs	r1, #4
    1b72:	e7eb      	b.n	1b4c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1b74:	4613      	mov	r3, r2
    1b76:	2203      	movs	r2, #3
    1b78:	e7f0      	b.n	1b5c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1b7a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1b7e:	2205      	movs	r2, #5
    1b80:	e7ec      	b.n	1b5c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1b82:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1b86:	2207      	movs	r2, #7
    1b88:	e7e8      	b.n	1b5c <cbvprintf+0x270>
		conv->unsupported = true;
    1b8a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1b8e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1b92:	f023 0302 	bic.w	r3, r3, #2
    1b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b9a:	f043 0302 	orr.w	r3, r3, #2
    1b9e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1ba2:	e7a6      	b.n	1af2 <cbvprintf+0x206>
    1ba4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1ba8:	2920      	cmp	r1, #32
    1baa:	f200 8084 	bhi.w	1cb6 <cbvprintf+0x3ca>
    1bae:	a001      	add	r0, pc, #4	; (adr r0, 1bb4 <cbvprintf+0x2c8>)
    1bb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1bb4:	00001c79 	.word	0x00001c79
    1bb8:	00001cb7 	.word	0x00001cb7
    1bbc:	00001cb7 	.word	0x00001cb7
    1bc0:	00001cb7 	.word	0x00001cb7
    1bc4:	00001cb7 	.word	0x00001cb7
    1bc8:	00001cb7 	.word	0x00001cb7
    1bcc:	00001cb7 	.word	0x00001cb7
    1bd0:	00001cb7 	.word	0x00001cb7
    1bd4:	00001cb7 	.word	0x00001cb7
    1bd8:	00001b15 	.word	0x00001b15
    1bdc:	00001cb7 	.word	0x00001cb7
    1be0:	00001c79 	.word	0x00001c79
    1be4:	00001c39 	.word	0x00001c39
    1be8:	00001b15 	.word	0x00001b15
    1bec:	00001b15 	.word	0x00001b15
    1bf0:	00001b15 	.word	0x00001b15
    1bf4:	00001cb7 	.word	0x00001cb7
    1bf8:	00001c39 	.word	0x00001c39
    1bfc:	00001cb7 	.word	0x00001cb7
    1c00:	00001cb7 	.word	0x00001cb7
    1c04:	00001cb7 	.word	0x00001cb7
    1c08:	00001cb7 	.word	0x00001cb7
    1c0c:	00001c81 	.word	0x00001c81
    1c10:	00001c79 	.word	0x00001c79
    1c14:	00001c9d 	.word	0x00001c9d
    1c18:	00001cb7 	.word	0x00001cb7
    1c1c:	00001cb7 	.word	0x00001cb7
    1c20:	00001c9d 	.word	0x00001c9d
    1c24:	00001cb7 	.word	0x00001cb7
    1c28:	00001c79 	.word	0x00001c79
    1c2c:	00001cb7 	.word	0x00001cb7
    1c30:	00001cb7 	.word	0x00001cb7
    1c34:	00001c79 	.word	0x00001c79
		conv->specifier_cat = SPECIFIER_SINT;
    1c38:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1c3c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1c3e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1c42:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1c46:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1c48:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1c4c:	bf02      	ittt	eq
    1c4e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1c52:	f041 0101 	orreq.w	r1, r1, #1
    1c56:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1c5a:	2a63      	cmp	r2, #99	; 0x63
    1c5c:	d131      	bne.n	1cc2 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1c5e:	3b00      	subs	r3, #0
    1c60:	bf18      	it	ne
    1c62:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1c64:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1c68:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1c6c:	430b      	orrs	r3, r1
    1c6e:	f363 0241 	bfi	r2, r3, #1, #1
    1c72:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1c76:	e6d8      	b.n	1a2a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1c78:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1c7c:	2002      	movs	r0, #2
    1c7e:	e7de      	b.n	1c3e <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1c80:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1c84:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1c88:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1c8c:	2103      	movs	r1, #3
    1c8e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1c92:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1c94:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1c98:	4143      	adcs	r3, r0
    1c9a:	e7e3      	b.n	1c64 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1c9c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1ca0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1ca2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1ca6:	f361 0202 	bfi	r2, r1, #0, #3
    1caa:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1cae:	bf14      	ite	ne
    1cb0:	2301      	movne	r3, #1
    1cb2:	2300      	moveq	r3, #0
    1cb4:	e7d6      	b.n	1c64 <cbvprintf+0x378>
		conv->invalid = true;
    1cb6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1cba:	f043 0301 	orr.w	r3, r3, #1
    1cbe:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1cc2:	2300      	movs	r3, #0
    1cc4:	e7ce      	b.n	1c64 <cbvprintf+0x378>
		} else if (conv->width_present) {
    1cc6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1cca:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1ccc:	bfb4      	ite	lt
    1cce:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1cd2:	f04f 39ff 	movge.w	r9, #4294967295
    1cd6:	e6ba      	b.n	1a4e <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1cd8:	079b      	lsls	r3, r3, #30
    1cda:	f57f aec7 	bpl.w	1a6c <cbvprintf+0x180>
			precision = conv->prec_value;
    1cde:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1ce2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1ce6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1ce8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1cec:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1cf0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1cf4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1cf6:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1cfa:	d136      	bne.n	1d6a <cbvprintf+0x47e>
			switch (length_mod) {
    1cfc:	1ed3      	subs	r3, r2, #3
    1cfe:	2b04      	cmp	r3, #4
    1d00:	d820      	bhi.n	1d44 <cbvprintf+0x458>
    1d02:	e8df f003 	tbb	[pc, r3]
    1d06:	0703      	.short	0x0703
    1d08:	1f07      	.short	0x1f07
    1d0a:	1f          	.byte	0x1f
    1d0b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1d0c:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    1d10:	17c1      	asrs	r1, r0, #31
    1d12:	e004      	b.n	1d1e <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    1d14:	3407      	adds	r4, #7
    1d16:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1d1a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    1d1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1d22:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1d26:	f013 0603 	ands.w	r6, r3, #3
    1d2a:	d054      	beq.n	1dd6 <cbvprintf+0x4ea>
			OUTS(sp, fp);
    1d2c:	9802      	ldr	r0, [sp, #8]
    1d2e:	463b      	mov	r3, r7
    1d30:	4652      	mov	r2, sl
    1d32:	4659      	mov	r1, fp
    1d34:	f007 fcd4 	bl	96e0 <outs>
    1d38:	2800      	cmp	r0, #0
    1d3a:	f2c0 8143 	blt.w	1fc4 <cbvprintf+0x6d8>
    1d3e:	4405      	add	r5, r0
			continue;
    1d40:	46ba      	mov	sl, r7
    1d42:	e5db      	b.n	18fc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1d44:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    1d48:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1d4a:	ea4f 71e0 	mov.w	r1, r0, asr #31
    1d4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1d52:	d105      	bne.n	1d60 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    1d54:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1d58:	930a      	str	r3, [sp, #40]	; 0x28
    1d5a:	2300      	movs	r3, #0
    1d5c:	930b      	str	r3, [sp, #44]	; 0x2c
    1d5e:	e7e0      	b.n	1d22 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    1d60:	2a02      	cmp	r2, #2
    1d62:	d1de      	bne.n	1d22 <cbvprintf+0x436>
				value->sint = (short)value->sint;
    1d64:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    1d68:	e7d2      	b.n	1d10 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1d6a:	2b02      	cmp	r3, #2
    1d6c:	d123      	bne.n	1db6 <cbvprintf+0x4ca>
			switch (length_mod) {
    1d6e:	1ed3      	subs	r3, r2, #3
    1d70:	2b04      	cmp	r3, #4
    1d72:	d813      	bhi.n	1d9c <cbvprintf+0x4b0>
    1d74:	e8df f003 	tbb	[pc, r3]
    1d78:	120a0a03 	.word	0x120a0a03
    1d7c:	12          	.byte	0x12
    1d7d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1d7e:	6820      	ldr	r0, [r4, #0]
    1d80:	900a      	str	r0, [sp, #40]	; 0x28
    1d82:	2100      	movs	r1, #0
    1d84:	1d23      	adds	r3, r4, #4
    1d86:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1d88:	461c      	mov	r4, r3
    1d8a:	e7ca      	b.n	1d22 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    1d8c:	3407      	adds	r4, #7
    1d8e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    1d92:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    1d96:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    1d9a:	e7f5      	b.n	1d88 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    1d9c:	f854 3b04 	ldr.w	r3, [r4], #4
    1da0:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1da2:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    1da4:	f04f 0300 	mov.w	r3, #0
    1da8:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1daa:	d0d3      	beq.n	1d54 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    1dac:	2a02      	cmp	r2, #2
    1dae:	d1b8      	bne.n	1d22 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    1db0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1db4:	e7d0      	b.n	1d58 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    1db6:	2b04      	cmp	r3, #4
    1db8:	d107      	bne.n	1dca <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    1dba:	3407      	adds	r4, #7
    1dbc:	f024 0407 	bic.w	r4, r4, #7
    1dc0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1dc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    1dc8:	e7ab      	b.n	1d22 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1dca:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1dcc:	bf04      	itt	eq
    1dce:	f854 3b04 	ldreq.w	r3, [r4], #4
    1dd2:	930a      	streq	r3, [sp, #40]	; 0x28
    1dd4:	e7a5      	b.n	1d22 <cbvprintf+0x436>
		switch (conv->specifier) {
    1dd6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1dda:	2878      	cmp	r0, #120	; 0x78
    1ddc:	d8b0      	bhi.n	1d40 <cbvprintf+0x454>
    1dde:	2862      	cmp	r0, #98	; 0x62
    1de0:	d822      	bhi.n	1e28 <cbvprintf+0x53c>
    1de2:	2825      	cmp	r0, #37	; 0x25
    1de4:	f43f ad93 	beq.w	190e <cbvprintf+0x22>
    1de8:	2858      	cmp	r0, #88	; 0x58
    1dea:	d1a9      	bne.n	1d40 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1dec:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1df0:	9300      	str	r3, [sp, #0]
    1df2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1df6:	ab04      	add	r3, sp, #16
    1df8:	aa0c      	add	r2, sp, #48	; 0x30
    1dfa:	f007 fc26 	bl	964a <encode_uint>
    1dfe:	4682      	mov	sl, r0
			if (precision >= 0) {
    1e00:	f1b8 0f00 	cmp.w	r8, #0
    1e04:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1e08:	db0c      	blt.n	1e24 <cbvprintf+0x538>
				conv->flag_zero = false;
    1e0a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1e0e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1e12:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1e16:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1e18:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1e1c:	d902      	bls.n	1e24 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    1e1e:	eba8 0303 	sub.w	r3, r8, r3
    1e22:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1e24:	4680      	mov	r8, r0
    1e26:	e03d      	b.n	1ea4 <cbvprintf+0x5b8>
    1e28:	3863      	subs	r0, #99	; 0x63
    1e2a:	2815      	cmp	r0, #21
    1e2c:	d888      	bhi.n	1d40 <cbvprintf+0x454>
    1e2e:	a101      	add	r1, pc, #4	; (adr r1, 1e34 <cbvprintf+0x548>)
    1e30:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    1e34:	00001eb5 	.word	0x00001eb5
    1e38:	00001f19 	.word	0x00001f19
    1e3c:	00001d41 	.word	0x00001d41
    1e40:	00001d41 	.word	0x00001d41
    1e44:	00001d41 	.word	0x00001d41
    1e48:	00001d41 	.word	0x00001d41
    1e4c:	00001f19 	.word	0x00001f19
    1e50:	00001d41 	.word	0x00001d41
    1e54:	00001d41 	.word	0x00001d41
    1e58:	00001d41 	.word	0x00001d41
    1e5c:	00001d41 	.word	0x00001d41
    1e60:	00001f77 	.word	0x00001f77
    1e64:	00001f45 	.word	0x00001f45
    1e68:	00001f49 	.word	0x00001f49
    1e6c:	00001d41 	.word	0x00001d41
    1e70:	00001d41 	.word	0x00001d41
    1e74:	00001e8d 	.word	0x00001e8d
    1e78:	00001d41 	.word	0x00001d41
    1e7c:	00001f45 	.word	0x00001f45
    1e80:	00001d41 	.word	0x00001d41
    1e84:	00001d41 	.word	0x00001d41
    1e88:	00001f45 	.word	0x00001f45
			if (precision >= 0) {
    1e8c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1e90:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1e94:	db0a      	blt.n	1eac <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    1e96:	4641      	mov	r1, r8
    1e98:	4650      	mov	r0, sl
    1e9a:	f007 fcb1 	bl	9800 <strnlen>
			bpe = bps + len;
    1e9e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1ea2:	2600      	movs	r6, #0
		if (bps == NULL) {
    1ea4:	f1ba 0f00 	cmp.w	sl, #0
    1ea8:	d10c      	bne.n	1ec4 <cbvprintf+0x5d8>
    1eaa:	e749      	b.n	1d40 <cbvprintf+0x454>
				len = strlen(bps);
    1eac:	4650      	mov	r0, sl
    1eae:	f007 fca0 	bl	97f2 <strlen>
    1eb2:	e7f4      	b.n	1e9e <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1eb6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1eba:	2600      	movs	r6, #0
			bpe = buf + 1;
    1ebc:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    1ec0:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1ec4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1ec8:	b106      	cbz	r6, 1ecc <cbvprintf+0x5e0>
			nj_len += 1U;
    1eca:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1ecc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1ed0:	06d0      	lsls	r0, r2, #27
    1ed2:	d56b      	bpl.n	1fac <cbvprintf+0x6c0>
			nj_len += 2U;
    1ed4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1ed6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1ed8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1eda:	bf48      	it	mi
    1edc:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1ede:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1ee0:	bf48      	it	mi
    1ee2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1ee4:	f1b9 0f00 	cmp.w	r9, #0
    1ee8:	dd79      	ble.n	1fde <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    1eea:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1eee:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1ef2:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1ef6:	9303      	str	r3, [sp, #12]
    1ef8:	0753      	lsls	r3, r2, #29
    1efa:	d470      	bmi.n	1fde <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    1efc:	0650      	lsls	r0, r2, #25
    1efe:	d564      	bpl.n	1fca <cbvprintf+0x6de>
					if (sign != 0) {
    1f00:	b146      	cbz	r6, 1f14 <cbvprintf+0x628>
						OUTC(sign);
    1f02:	9b02      	ldr	r3, [sp, #8]
    1f04:	4659      	mov	r1, fp
    1f06:	4630      	mov	r0, r6
    1f08:	4798      	blx	r3
    1f0a:	2800      	cmp	r0, #0
    1f0c:	db5a      	blt.n	1fc4 <cbvprintf+0x6d8>
						sign = 0;
    1f0e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1f10:	3501      	adds	r5, #1
						sign = 0;
    1f12:	461e      	mov	r6, r3
					pad = '0';
    1f14:	2330      	movs	r3, #48	; 0x30
    1f16:	e059      	b.n	1fcc <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    1f18:	071e      	lsls	r6, r3, #28
    1f1a:	d411      	bmi.n	1f40 <cbvprintf+0x654>
				sign = ' ';
    1f1c:	f013 0610 	ands.w	r6, r3, #16
    1f20:	bf18      	it	ne
    1f22:	2620      	movne	r6, #32
			sint = value->sint;
    1f24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1f28:	2a00      	cmp	r2, #0
    1f2a:	f173 0100 	sbcs.w	r1, r3, #0
    1f2e:	f6bf af5d 	bge.w	1dec <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    1f32:	4252      	negs	r2, r2
    1f34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1f38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1f3c:	262d      	movs	r6, #45	; 0x2d
    1f3e:	e755      	b.n	1dec <cbvprintf+0x500>
				sign = '+';
    1f40:	262b      	movs	r6, #43	; 0x2b
    1f42:	e7ef      	b.n	1f24 <cbvprintf+0x638>
		switch (conv->specifier) {
    1f44:	2600      	movs	r6, #0
    1f46:	e751      	b.n	1dec <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1f48:	980a      	ldr	r0, [sp, #40]	; 0x28
    1f4a:	b348      	cbz	r0, 1fa0 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1f4c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1f50:	9300      	str	r3, [sp, #0]
    1f52:	aa0c      	add	r2, sp, #48	; 0x30
    1f54:	ab04      	add	r3, sp, #16
    1f56:	2100      	movs	r1, #0
    1f58:	f007 fb77 	bl	964a <encode_uint>
				conv->altform_0c = true;
    1f5c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1f60:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1f64:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1f68:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1f6c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1f6e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1f72:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1f74:	e744      	b.n	1e00 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    1f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1f78:	2a07      	cmp	r2, #7
    1f7a:	f63f aee1 	bhi.w	1d40 <cbvprintf+0x454>
    1f7e:	e8df f002 	tbb	[pc, r2]
    1f82:	040d      	.short	0x040d
    1f84:	08080d06 	.word	0x08080d06
    1f88:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1f8a:	701d      	strb	r5, [r3, #0]
		break;
    1f8c:	e6d8      	b.n	1d40 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    1f8e:	801d      	strh	r5, [r3, #0]
		break;
    1f90:	e6d6      	b.n	1d40 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    1f92:	4628      	mov	r0, r5
    1f94:	17e9      	asrs	r1, r5, #31
    1f96:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1f9a:	e6d1      	b.n	1d40 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1f9c:	601d      	str	r5, [r3, #0]
		break;
    1f9e:	e6cf      	b.n	1d40 <cbvprintf+0x454>
			bpe = bps + 5;
    1fa0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2068 <cbvprintf+0x77c>
    1fa4:	4606      	mov	r6, r0
			bps = "(nil)";
    1fa6:	f1a8 0a05 	sub.w	sl, r8, #5
    1faa:	e78b      	b.n	1ec4 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    1fac:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1fae:	bf48      	it	mi
    1fb0:	3301      	addmi	r3, #1
    1fb2:	e790      	b.n	1ed6 <cbvprintf+0x5ea>
					OUTC(pad);
    1fb4:	4618      	mov	r0, r3
    1fb6:	9303      	str	r3, [sp, #12]
    1fb8:	4659      	mov	r1, fp
    1fba:	9b02      	ldr	r3, [sp, #8]
    1fbc:	4798      	blx	r3
    1fbe:	2800      	cmp	r0, #0
    1fc0:	9b03      	ldr	r3, [sp, #12]
    1fc2:	da04      	bge.n	1fce <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    1fc4:	b011      	add	sp, #68	; 0x44
    1fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1fca:	2320      	movs	r3, #32
    1fcc:	444d      	add	r5, r9
    1fce:	464a      	mov	r2, r9
				while (width-- > 0) {
    1fd0:	2a00      	cmp	r2, #0
    1fd2:	eba5 0109 	sub.w	r1, r5, r9
    1fd6:	f109 39ff 	add.w	r9, r9, #4294967295
    1fda:	dceb      	bgt.n	1fb4 <cbvprintf+0x6c8>
    1fdc:	460d      	mov	r5, r1
		if (sign != 0) {
    1fde:	b136      	cbz	r6, 1fee <cbvprintf+0x702>
			OUTC(sign);
    1fe0:	9b02      	ldr	r3, [sp, #8]
    1fe2:	4659      	mov	r1, fp
    1fe4:	4630      	mov	r0, r6
    1fe6:	4798      	blx	r3
    1fe8:	2800      	cmp	r0, #0
    1fea:	dbeb      	blt.n	1fc4 <cbvprintf+0x6d8>
    1fec:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1fee:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1ff2:	06d9      	lsls	r1, r3, #27
    1ff4:	d401      	bmi.n	1ffa <cbvprintf+0x70e>
    1ff6:	071a      	lsls	r2, r3, #28
    1ff8:	d506      	bpl.n	2008 <cbvprintf+0x71c>
				OUTC('0');
    1ffa:	9b02      	ldr	r3, [sp, #8]
    1ffc:	4659      	mov	r1, fp
    1ffe:	2030      	movs	r0, #48	; 0x30
    2000:	4798      	blx	r3
    2002:	2800      	cmp	r0, #0
    2004:	dbde      	blt.n	1fc4 <cbvprintf+0x6d8>
    2006:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2008:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    200c:	06db      	lsls	r3, r3, #27
    200e:	d507      	bpl.n	2020 <cbvprintf+0x734>
				OUTC(conv->specifier);
    2010:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    2014:	9b02      	ldr	r3, [sp, #8]
    2016:	4659      	mov	r1, fp
    2018:	4798      	blx	r3
    201a:	2800      	cmp	r0, #0
    201c:	dbd2      	blt.n	1fc4 <cbvprintf+0x6d8>
    201e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2020:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    2022:	442e      	add	r6, r5
    2024:	1b73      	subs	r3, r6, r5
    2026:	2b00      	cmp	r3, #0
    2028:	dc16      	bgt.n	2058 <cbvprintf+0x76c>
			OUTS(bps, bpe);
    202a:	9802      	ldr	r0, [sp, #8]
    202c:	4643      	mov	r3, r8
    202e:	4652      	mov	r2, sl
    2030:	4659      	mov	r1, fp
    2032:	f007 fb55 	bl	96e0 <outs>
    2036:	2800      	cmp	r0, #0
    2038:	dbc4      	blt.n	1fc4 <cbvprintf+0x6d8>
    203a:	4405      	add	r5, r0
		while (width > 0) {
    203c:	44a9      	add	r9, r5
    203e:	eba9 0305 	sub.w	r3, r9, r5
    2042:	2b00      	cmp	r3, #0
    2044:	f77f ae7c 	ble.w	1d40 <cbvprintf+0x454>
			OUTC(' ');
    2048:	9b02      	ldr	r3, [sp, #8]
    204a:	4659      	mov	r1, fp
    204c:	2020      	movs	r0, #32
    204e:	4798      	blx	r3
    2050:	2800      	cmp	r0, #0
    2052:	dbb7      	blt.n	1fc4 <cbvprintf+0x6d8>
    2054:	3501      	adds	r5, #1
			--width;
    2056:	e7f2      	b.n	203e <cbvprintf+0x752>
				OUTC('0');
    2058:	9b02      	ldr	r3, [sp, #8]
    205a:	4659      	mov	r1, fp
    205c:	2030      	movs	r0, #48	; 0x30
    205e:	4798      	blx	r3
    2060:	2800      	cmp	r0, #0
    2062:	dbaf      	blt.n	1fc4 <cbvprintf+0x6d8>
    2064:	3501      	adds	r5, #1
    2066:	e7dd      	b.n	2024 <cbvprintf+0x738>
    2068:	0000ab48 	.word	0x0000ab48

0000206c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    206c:	b508      	push	{r3, lr}
	__asm__ volatile(
    206e:	f04f 0220 	mov.w	r2, #32
    2072:	f3ef 8311 	mrs	r3, BASEPRI
    2076:	f382 8812 	msr	BASEPRI_MAX, r2
    207a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    207e:	f001 fb39 	bl	36f4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2082:	4803      	ldr	r0, [pc, #12]	; (2090 <sys_reboot+0x24>)
    2084:	f007 fa76 	bl	9574 <printk>
    2088:	f000 fd40 	bl	2b0c <arch_cpu_idle>
    208c:	e7fc      	b.n	2088 <sys_reboot+0x1c>
    208e:	bf00      	nop
    2090:	0000ab49 	.word	0x0000ab49

00002094 <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
    2094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (k_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
    2098:	4b12      	ldr	r3, [pc, #72]	; (20e4 <log_generic+0x50>)
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    209a:	4c13      	ldr	r4, [pc, #76]	; (20e8 <log_generic+0x54>)
    209c:	681b      	ldr	r3, [r3, #0]
    209e:	4d13      	ldr	r5, [pc, #76]	; (20ec <log_generic+0x58>)
{
    20a0:	b085      	sub	sp, #20
    20a2:	4681      	mov	r9, r0
    20a4:	468a      	mov	sl, r1
    20a6:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
    20a8:	4798      	blx	r3
    20aa:	1b2d      	subs	r5, r5, r4
    20ac:	4680      	mov	r8, r0
    20ae:	112d      	asrs	r5, r5, #4

		for (int i = 0; i < log_backend_count_get(); i++) {
    20b0:	2600      	movs	r6, #0
    20b2:	42b5      	cmp	r5, r6
    20b4:	dc02      	bgt.n	20bc <log_generic+0x28>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
    20b6:	b005      	add	sp, #20
    20b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend) && runtime_ok) {
    20bc:	4620      	mov	r0, r4
    20be:	f007 fb2d 	bl	971c <log_backend_is_active>
    20c2:	b160      	cbz	r0, 20de <log_generic+0x4a>
	if (backend->api->put_sync_string) {
    20c4:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
    20c6:	9703      	str	r7, [sp, #12]
    20c8:	f8d3 b008 	ldr.w	fp, [r3, #8]
    20cc:	f1bb 0f00 	cmp.w	fp, #0
    20d0:	d005      	beq.n	20de <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
    20d2:	9700      	str	r7, [sp, #0]
    20d4:	4653      	mov	r3, sl
    20d6:	4642      	mov	r2, r8
    20d8:	4649      	mov	r1, r9
    20da:	4620      	mov	r0, r4
    20dc:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
    20de:	3601      	adds	r6, #1
    20e0:	3410      	adds	r4, #16
    20e2:	e7e6      	b.n	20b2 <log_generic+0x1e>
    20e4:	200000dc 	.word	0x200000dc
    20e8:	0000a39c 	.word	0x0000a39c
    20ec:	0000a3ac 	.word	0x0000a3ac

000020f0 <log_hexdump_sync>:
	va_end(ap);
}

void log_hexdump_sync(struct log_msg_ids src_level, const char *metadata,
		      const void *data, uint32_t len)
{
    20f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20f4:	469a      	mov	sl, r3
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_hexdump(metadata, (const uint8_t *)data, len,
				     src_level);
	} else {
		struct log_backend const *backend;
		log_timestamp_t timestamp = timestamp_func();
    20f6:	4b14      	ldr	r3, [pc, #80]	; (2148 <log_hexdump_sync+0x58>)
	return __log_backends_end - __log_backends_start;
    20f8:	4c14      	ldr	r4, [pc, #80]	; (214c <log_hexdump_sync+0x5c>)
    20fa:	681b      	ldr	r3, [r3, #0]
{
    20fc:	b085      	sub	sp, #20
    20fe:	4607      	mov	r7, r0
    2100:	4688      	mov	r8, r1
    2102:	9203      	str	r2, [sp, #12]
		log_timestamp_t timestamp = timestamp_func();
    2104:	4798      	blx	r3
    2106:	4b12      	ldr	r3, [pc, #72]	; (2150 <log_hexdump_sync+0x60>)
    2108:	1b1b      	subs	r3, r3, r4
    210a:	4606      	mov	r6, r0
    210c:	ea4f 1923 	mov.w	r9, r3, asr #4

		for (int i = 0; i < log_backend_count_get(); i++) {
    2110:	2500      	movs	r5, #0
    2112:	454d      	cmp	r5, r9
    2114:	db02      	blt.n	211c <log_hexdump_sync+0x2c>
					backend, src_level, timestamp, metadata,
					(const uint8_t *)data, len);
			}
		}
	}
}
    2116:	b005      	add	sp, #20
    2118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend) && runtime_ok) {
    211c:	4620      	mov	r0, r4
    211e:	f007 fafd 	bl	971c <log_backend_is_active>
    2122:	b170      	cbz	r0, 2142 <log_hexdump_sync+0x52>
	if (backend->api->put_sync_hexdump) {
    2124:	6823      	ldr	r3, [r4, #0]
    2126:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    212a:	f1bb 0f00 	cmp.w	fp, #0
    212e:	d008      	beq.n	2142 <log_hexdump_sync+0x52>
		backend->api->put_sync_hexdump(backend, src_level, timestamp,
    2130:	9b03      	ldr	r3, [sp, #12]
    2132:	9300      	str	r3, [sp, #0]
    2134:	f8cd a004 	str.w	sl, [sp, #4]
    2138:	4643      	mov	r3, r8
    213a:	4632      	mov	r2, r6
    213c:	4639      	mov	r1, r7
    213e:	4620      	mov	r0, r4
    2140:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
    2142:	3501      	adds	r5, #1
    2144:	3410      	adds	r4, #16
    2146:	e7e4      	b.n	2112 <log_hexdump_sync+0x22>
    2148:	200000dc 	.word	0x200000dc
    214c:	0000a39c 	.word	0x0000a39c
    2150:	0000a3ac 	.word	0x0000a3ac

00002154 <log_core_init>:
void log_core_init(void)
{
	uint32_t freq;
	log_timestamp_get_t _timestamp_func;

	panic_mode = false;
    2154:	4a05      	ldr	r2, [pc, #20]	; (216c <log_core_init+0x18>)
    2156:	2300      	movs	r3, #0
    2158:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    215a:	4a05      	ldr	r2, [pc, #20]	; (2170 <log_core_init+0x1c>)
    215c:	6013      	str	r3, [r2, #0]
{
	if (timestamp_getter == NULL) {
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    215e:	4b05      	ldr	r3, [pc, #20]	; (2174 <log_core_init+0x20>)
    2160:	4a05      	ldr	r2, [pc, #20]	; (2178 <log_core_init+0x24>)
    2162:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2164:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2168:	f000 ba4e 	b.w	2608 <log_output_timestamp_freq_set>
    216c:	20001232 	.word	0x20001232
    2170:	20000aa4 	.word	0x20000aa4
    2174:	200000dc 	.word	0x200000dc
    2178:	00009723 	.word	0x00009723

0000217c <log_init>:
	return __log_backends_end - __log_backends_start;
    217c:	4b19      	ldr	r3, [pc, #100]	; (21e4 <log_init+0x68>)
    217e:	4a1a      	ldr	r2, [pc, #104]	; (21e8 <log_init+0x6c>)
    2180:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2182:	2b9f      	cmp	r3, #159	; 0x9f
{
    2184:	b570      	push	{r4, r5, r6, lr}
    2186:	ea4f 1623 	mov.w	r6, r3, asr #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    218a:	d90a      	bls.n	21a2 <log_init+0x26>
    218c:	4917      	ldr	r1, [pc, #92]	; (21ec <log_init+0x70>)
    218e:	4818      	ldr	r0, [pc, #96]	; (21f0 <log_init+0x74>)
    2190:	f240 224a 	movw	r2, #586	; 0x24a
    2194:	f007 f9ee 	bl	9574 <printk>
    2198:	4814      	ldr	r0, [pc, #80]	; (21ec <log_init+0x70>)
    219a:	f240 214a 	movw	r1, #586	; 0x24a
    219e:	f007 fab5 	bl	970c <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    21a2:	f3bf 8f5b 	dmb	ish
    21a6:	4b13      	ldr	r3, [pc, #76]	; (21f4 <log_init+0x78>)
    21a8:	e853 5f00 	ldrex	r5, [r3]
    21ac:	1c6a      	adds	r2, r5, #1
    21ae:	e843 2100 	strex	r1, r2, [r3]
    21b2:	2900      	cmp	r1, #0
    21b4:	d1f8      	bne.n	21a8 <log_init+0x2c>
    21b6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    21ba:	b915      	cbnz	r5, 21c2 <log_init+0x46>
    21bc:	4c0a      	ldr	r4, [pc, #40]	; (21e8 <log_init+0x6c>)
	for (i = 0; i < log_backend_count_get(); i++) {
    21be:	42b5      	cmp	r5, r6
    21c0:	db00      	blt.n	21c4 <log_init+0x48>
}
    21c2:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    21c4:	7b23      	ldrb	r3, [r4, #12]
    21c6:	b153      	cbz	r3, 21de <log_init+0x62>
			if (backend->api->init != NULL) {
    21c8:	6823      	ldr	r3, [r4, #0]
    21ca:	699b      	ldr	r3, [r3, #24]
    21cc:	b10b      	cbz	r3, 21d2 <log_init+0x56>
				backend->api->init(backend);
    21ce:	4620      	mov	r0, r4
    21d0:	4798      	blx	r3
			log_backend_enable(backend,
    21d2:	6863      	ldr	r3, [r4, #4]
    21d4:	2204      	movs	r2, #4
    21d6:	6819      	ldr	r1, [r3, #0]
    21d8:	4620      	mov	r0, r4
    21da:	f000 f841 	bl	2260 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    21de:	3501      	adds	r5, #1
    21e0:	3410      	adds	r4, #16
    21e2:	e7ec      	b.n	21be <log_init+0x42>
    21e4:	0000a3ac 	.word	0x0000a3ac
    21e8:	0000a39c 	.word	0x0000a39c
    21ec:	0000ab72 	.word	0x0000ab72
    21f0:	0000a66d 	.word	0x0000a66d
    21f4:	20000aa8 	.word	0x20000aa8

000021f8 <z_impl_log_panic>:

	return 0;
}

void z_impl_log_panic(void)
{
    21f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct log_backend const *backend;

	if (panic_mode) {
    21fa:	4f0c      	ldr	r7, [pc, #48]	; (222c <z_impl_log_panic+0x34>)
    21fc:	783d      	ldrb	r5, [r7, #0]
    21fe:	b94d      	cbnz	r5, 2214 <z_impl_log_panic+0x1c>
    2200:	4c0b      	ldr	r4, [pc, #44]	; (2230 <z_impl_log_panic+0x38>)
    2202:	4e0c      	ldr	r6, [pc, #48]	; (2234 <z_impl_log_panic+0x3c>)
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	log_init();
    2204:	f7ff ffba 	bl	217c <log_init>
    2208:	1b36      	subs	r6, r6, r4
    220a:	1136      	asrs	r6, r6, #4

	for (int i = 0; i < log_backend_count_get(); i++) {
    220c:	42b5      	cmp	r5, r6
    220e:	db02      	blt.n	2216 <z_impl_log_panic+0x1e>
		/* Flush */
		while (log_process(false) == true) {
		}
	}

	panic_mode = true;
    2210:	2301      	movs	r3, #1
    2212:	703b      	strb	r3, [r7, #0]
}
    2214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    2216:	4620      	mov	r0, r4
    2218:	f007 fa80 	bl	971c <log_backend_is_active>
    221c:	b118      	cbz	r0, 2226 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
    221e:	6823      	ldr	r3, [r4, #0]
    2220:	4620      	mov	r0, r4
    2222:	695b      	ldr	r3, [r3, #20]
    2224:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2226:	3501      	adds	r5, #1
    2228:	3410      	adds	r4, #16
    222a:	e7ef      	b.n	220c <z_impl_log_panic+0x14>
    222c:	20001232 	.word	0x20001232
    2230:	0000a39c 	.word	0x0000a39c
    2234:	0000a3ac 	.word	0x0000a3ac

00002238 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    2238:	4b01      	ldr	r3, [pc, #4]	; (2240 <z_log_notify_backend_enabled+0x8>)
    223a:	2201      	movs	r2, #1
    223c:	701a      	strb	r2, [r3, #0]
}
    223e:	4770      	bx	lr
    2240:	20001231 	.word	0x20001231

00002244 <log_source_name_get>:
    2244:	4a04      	ldr	r2, [pc, #16]	; (2258 <log_source_name_get+0x14>)
    2246:	4b05      	ldr	r3, [pc, #20]	; (225c <log_source_name_get+0x18>)
    2248:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    224a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    224e:	bf34      	ite	cc
    2250:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2254:	2000      	movcs	r0, #0
}
    2256:	4770      	bx	lr
    2258:	0000a33c 	.word	0x0000a33c
    225c:	0000a39c 	.word	0x0000a39c

00002260 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    2260:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2262:	4c0d      	ldr	r4, [pc, #52]	; (2298 <log_backend_enable+0x38>)
    2264:	1b04      	subs	r4, r0, r4
    2266:	1124      	asrs	r4, r4, #4
    2268:	3401      	adds	r4, #1
{
    226a:	4605      	mov	r5, r0
    226c:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
    226e:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
    2270:	b940      	cbnz	r0, 2284 <log_backend_enable+0x24>
    2272:	490a      	ldr	r1, [pc, #40]	; (229c <log_backend_enable+0x3c>)
    2274:	480a      	ldr	r0, [pc, #40]	; (22a0 <log_backend_enable+0x40>)
    2276:	22d1      	movs	r2, #209	; 0xd1
    2278:	f007 f97c 	bl	9574 <printk>
    227c:	4807      	ldr	r0, [pc, #28]	; (229c <log_backend_enable+0x3c>)
    227e:	21d1      	movs	r1, #209	; 0xd1
    2280:	f007 fa44 	bl	970c <assert_post_action>
	backend->cb->id = id;
    2284:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
    2286:	2201      	movs	r2, #1
	backend->cb->id = id;
    2288:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    228a:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    228c:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    228e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    2292:	f7ff bfd1 	b.w	2238 <z_log_notify_backend_enabled>
    2296:	bf00      	nop
    2298:	0000a39c 	.word	0x0000a39c
    229c:	0000abd0 	.word	0x0000abd0
    22a0:	0000a66d 	.word	0x0000a66d

000022a4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    22a4:	b40e      	push	{r1, r2, r3}
    22a6:	b503      	push	{r0, r1, lr}
    22a8:	ab03      	add	r3, sp, #12
    22aa:	4601      	mov	r1, r0
    22ac:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    22b0:	4804      	ldr	r0, [pc, #16]	; (22c4 <print_formatted+0x20>)
	va_start(args, fmt);
    22b2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    22b4:	f7ff fb1a 	bl	18ec <cbvprintf>
	va_end(args);

	return length;
}
    22b8:	b002      	add	sp, #8
    22ba:	f85d eb04 	ldr.w	lr, [sp], #4
    22be:	b003      	add	sp, #12
    22c0:	4770      	bx	lr
    22c2:	bf00      	nop
    22c4:	00009763 	.word	0x00009763

000022c8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    22c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22cc:	b087      	sub	sp, #28
    22ce:	461f      	mov	r7, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    22d0:	f001 0301 	and.w	r3, r1, #1
{
    22d4:	9205      	str	r2, [sp, #20]
    22d6:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    22da:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    22de:	9304      	str	r3, [sp, #16]
{
    22e0:	4606      	mov	r6, r0
    22e2:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    22e4:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    22e8:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
    22ec:	f007 fa37 	bl	975e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    22f0:	4602      	mov	r2, r0
    22f2:	2800      	cmp	r0, #0
    22f4:	d044      	beq.n	2380 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    22f6:	4939      	ldr	r1, [pc, #228]	; (23dc <prefix_print+0x114>)
    22f8:	4630      	mov	r0, r6
    22fa:	f7ff ffd3 	bl	22a4 <print_formatted>
    22fe:	4604      	mov	r4, r0
	}

	if (stamp) {
    2300:	f1bb 0f00 	cmp.w	fp, #0
    2304:	d008      	beq.n	2318 <prefix_print+0x50>
	if (!format) {
    2306:	f018 0f44 	tst.w	r8, #68	; 0x44
    230a:	d13b      	bne.n	2384 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    230c:	4934      	ldr	r1, [pc, #208]	; (23e0 <prefix_print+0x118>)
    230e:	463a      	mov	r2, r7
    2310:	4630      	mov	r0, r6
    2312:	f7ff ffc7 	bl	22a4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2316:	4404      	add	r4, r0
	if (color) {
    2318:	9b04      	ldr	r3, [sp, #16]
    231a:	b153      	cbz	r3, 2332 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    231c:	4b31      	ldr	r3, [pc, #196]	; (23e4 <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
    231e:	4932      	ldr	r1, [pc, #200]	; (23e8 <prefix_print+0x120>)
		const char *log_color = start && (colors[level] != NULL) ?
    2320:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    2324:	4b31      	ldr	r3, [pc, #196]	; (23ec <prefix_print+0x124>)
    2326:	4630      	mov	r0, r6
    2328:	2a00      	cmp	r2, #0
    232a:	bf08      	it	eq
    232c:	461a      	moveq	r2, r3
    232e:	f7ff ffb9 	bl	22a4 <print_formatted>
	if (level_on) {
    2332:	b13d      	cbz	r5, 2344 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    2334:	4b2e      	ldr	r3, [pc, #184]	; (23f0 <prefix_print+0x128>)
    2336:	492f      	ldr	r1, [pc, #188]	; (23f4 <prefix_print+0x12c>)
    2338:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    233c:	4630      	mov	r0, r6
    233e:	f7ff ffb1 	bl	22a4 <print_formatted>
    2342:	4605      	mov	r5, r0
	if (source_id >= 0) {
    2344:	f1ba 0f00 	cmp.w	sl, #0
    2348:	db16      	blt.n	2378 <prefix_print+0xb0>
		total += print_formatted(output,
    234a:	9b05      	ldr	r3, [sp, #20]
    234c:	2b00      	cmp	r3, #0
    234e:	d043      	beq.n	23d8 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2350:	2301      	movs	r3, #1
    2352:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    2356:	4b28      	ldr	r3, [pc, #160]	; (23f8 <prefix_print+0x130>)
    2358:	4f28      	ldr	r7, [pc, #160]	; (23fc <prefix_print+0x134>)
    235a:	f019 0f10 	tst.w	r9, #16
    235e:	bf18      	it	ne
    2360:	461f      	movne	r7, r3
    2362:	4651      	mov	r1, sl
    2364:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    2368:	f7ff ff6c 	bl	2244 <log_source_name_get>
    236c:	4639      	mov	r1, r7
    236e:	4602      	mov	r2, r0
    2370:	4630      	mov	r0, r6
    2372:	f7ff ff97 	bl	22a4 <print_formatted>
    2376:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    2378:	1928      	adds	r0, r5, r4
    237a:	b007      	add	sp, #28
    237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2380:	4604      	mov	r4, r0
    2382:	e7bd      	b.n	2300 <prefix_print+0x38>
	} else if (freq != 0U) {
    2384:	4b1e      	ldr	r3, [pc, #120]	; (2400 <prefix_print+0x138>)
    2386:	6818      	ldr	r0, [r3, #0]
    2388:	2800      	cmp	r0, #0
    238a:	d0c4      	beq.n	2316 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    238c:	4b1d      	ldr	r3, [pc, #116]	; (2404 <prefix_print+0x13c>)
    238e:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    2392:	6819      	ldr	r1, [r3, #0]
    2394:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
    2398:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
    239c:	fb00 7711 	mls	r7, r0, r1, r7
    23a0:	fbb1 f2fc 	udiv	r2, r1, ip
    23a4:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
    23a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    23ac:	434f      	muls	r7, r1
		mins = seconds / 60U;
    23ae:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    23b2:	fbb7 f8f0 	udiv	r8, r7, r0
    23b6:	fb00 7718 	mls	r7, r0, r8, r7
    23ba:	434f      	muls	r7, r1
		mins = seconds / 60U;
    23bc:	fbbc f3fe 	udiv	r3, ip, lr
			length = print_formatted(output,
    23c0:	fb0e c113 	mls	r1, lr, r3, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    23c4:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
    23c8:	9100      	str	r1, [sp, #0]
    23ca:	e9cd 8001 	strd	r8, r0, [sp, #4]
    23ce:	490e      	ldr	r1, [pc, #56]	; (2408 <prefix_print+0x140>)
    23d0:	4630      	mov	r0, r6
    23d2:	f7ff ff67 	bl	22a4 <print_formatted>
    23d6:	e79e      	b.n	2316 <prefix_print+0x4e>
		total += print_formatted(output,
    23d8:	4f08      	ldr	r7, [pc, #32]	; (23fc <prefix_print+0x134>)
    23da:	e7c2      	b.n	2362 <prefix_print+0x9a>
    23dc:	0000ac0f 	.word	0x0000ac0f
    23e0:	0000ac13 	.word	0x0000ac13
    23e4:	0000a3d8 	.word	0x0000a3d8
    23e8:	0000a778 	.word	0x0000a778
    23ec:	0000ac01 	.word	0x0000ac01
    23f0:	0000a3ec 	.word	0x0000a3ec
    23f4:	0000ac38 	.word	0x0000ac38
    23f8:	0000ac0b 	.word	0x0000ac0b
    23fc:	0000ac06 	.word	0x0000ac06
    2400:	20000aac 	.word	0x20000aac
    2404:	20000ab0 	.word	0x20000ab0
    2408:	0000ac1c 	.word	0x0000ac1c

0000240c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    240c:	b538      	push	{r3, r4, r5, lr}
    240e:	460c      	mov	r4, r1
	if (color) {
    2410:	07e1      	lsls	r1, r4, #31
{
    2412:	4605      	mov	r5, r0
	if (color) {
    2414:	d503      	bpl.n	241e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    2416:	4a08      	ldr	r2, [pc, #32]	; (2438 <postfix_print+0x2c>)
    2418:	4908      	ldr	r1, [pc, #32]	; (243c <postfix_print+0x30>)
    241a:	f7ff ff43 	bl	22a4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    241e:	06e2      	lsls	r2, r4, #27
    2420:	d408      	bmi.n	2434 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2422:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    2424:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    2426:	bf4c      	ite	mi
    2428:	4905      	ldrmi	r1, [pc, #20]	; (2440 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    242a:	4906      	ldrpl	r1, [pc, #24]	; (2444 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    242c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    2430:	f7ff bf38 	b.w	22a4 <print_formatted>
}
    2434:	bd38      	pop	{r3, r4, r5, pc}
    2436:	bf00      	nop
    2438:	0000ac01 	.word	0x0000ac01
    243c:	0000a778 	.word	0x0000a778
    2440:	0000ac3f 	.word	0x0000ac3f
    2444:	0000ac3e 	.word	0x0000ac3e

00002448 <hexdump_line_print>:
{
    2448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    244c:	461d      	mov	r5, r3
    244e:	9b08      	ldr	r3, [sp, #32]
    2450:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2452:	06da      	lsls	r2, r3, #27
{
    2454:	4604      	mov	r4, r0
    2456:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2458:	d405      	bmi.n	2466 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    245a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    245c:	bf4c      	ite	mi
    245e:	492a      	ldrmi	r1, [pc, #168]	; (2508 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    2460:	492a      	ldrpl	r1, [pc, #168]	; (250c <hexdump_line_print+0xc4>)
    2462:	f7ff ff1f 	bl	22a4 <print_formatted>
		print_formatted(output, " ");
    2466:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 2514 <hexdump_line_print+0xcc>
{
    246a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    246e:	45a8      	cmp	r8, r5
    2470:	db2a      	blt.n	24c8 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
    2472:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2518 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
    2476:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 251c <hexdump_line_print+0xd4>
			print_formatted(output, " ");
    247a:	f8df a098 	ldr.w	sl, [pc, #152]	; 2514 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    247e:	2500      	movs	r5, #0
		if (i < length) {
    2480:	42bd      	cmp	r5, r7
    2482:	d22f      	bcs.n	24e4 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    2484:	5d72      	ldrb	r2, [r6, r5]
    2486:	4649      	mov	r1, r9
    2488:	4620      	mov	r0, r4
    248a:	f7ff ff0b 	bl	22a4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    248e:	3501      	adds	r5, #1
    2490:	2d10      	cmp	r5, #16
    2492:	d120      	bne.n	24d6 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
    2494:	491e      	ldr	r1, [pc, #120]	; (2510 <hexdump_line_print+0xc8>)
			print_formatted(output, " ");
    2496:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2514 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
    249a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2520 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    249e:	4620      	mov	r0, r4
    24a0:	f7ff ff00 	bl	22a4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    24a4:	2500      	movs	r5, #0
		if (i < length) {
    24a6:	42af      	cmp	r7, r5
    24a8:	d928      	bls.n	24fc <hexdump_line_print+0xb4>
			char c = (char)data[i];
    24aa:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    24ac:	f1a2 0320 	sub.w	r3, r2, #32
    24b0:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    24b2:	bf28      	it	cs
    24b4:	222e      	movcs	r2, #46	; 0x2e
    24b6:	4649      	mov	r1, r9
    24b8:	4620      	mov	r0, r4
    24ba:	f7ff fef3 	bl	22a4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    24be:	3501      	adds	r5, #1
    24c0:	2d10      	cmp	r5, #16
    24c2:	d114      	bne.n	24ee <hexdump_line_print+0xa6>
}
    24c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    24c8:	4649      	mov	r1, r9
    24ca:	4620      	mov	r0, r4
    24cc:	f7ff feea 	bl	22a4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    24d0:	f108 0801 	add.w	r8, r8, #1
    24d4:	e7cb      	b.n	246e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    24d6:	076a      	lsls	r2, r5, #29
    24d8:	d1d2      	bne.n	2480 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    24da:	4651      	mov	r1, sl
    24dc:	4620      	mov	r0, r4
    24de:	f7ff fee1 	bl	22a4 <print_formatted>
    24e2:	e7cd      	b.n	2480 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    24e4:	4641      	mov	r1, r8
    24e6:	4620      	mov	r0, r4
    24e8:	f7ff fedc 	bl	22a4 <print_formatted>
    24ec:	e7cf      	b.n	248e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    24ee:	076b      	lsls	r3, r5, #29
    24f0:	d1d9      	bne.n	24a6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    24f2:	4641      	mov	r1, r8
    24f4:	4620      	mov	r0, r4
    24f6:	f7ff fed5 	bl	22a4 <print_formatted>
    24fa:	e7d4      	b.n	24a6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    24fc:	4641      	mov	r1, r8
    24fe:	4620      	mov	r0, r4
    2500:	f7ff fed0 	bl	22a4 <print_formatted>
    2504:	e7db      	b.n	24be <hexdump_line_print+0x76>
    2506:	bf00      	nop
    2508:	0000ac3f 	.word	0x0000ac3f
    250c:	0000ac3e 	.word	0x0000ac3e
    2510:	0000ac4b 	.word	0x0000ac4b
    2514:	0000ac49 	.word	0x0000ac49
    2518:	0000ac47 	.word	0x0000ac47
    251c:	0000ac41 	.word	0x0000ac41
    2520:	0000ac4d 	.word	0x0000ac4d

00002524 <log_output_string>:
}

void log_output_string(const struct log_output *output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
    2524:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
    2528:	f011 0607 	ands.w	r6, r1, #7
{
    252c:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
    2530:	4605      	mov	r5, r0
    2532:	461c      	mov	r4, r3
	if (!raw_string) {
    2534:	d00b      	beq.n	254e <log_output_string+0x2a>
		prefix_print(output, flags, true, timestamp,
    2536:	f3c1 1389 	ubfx	r3, r1, #6, #10
    253a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
    253e:	e9cd 6100 	strd	r6, r1, [sp]
    2542:	9302      	str	r3, [sp, #8]
    2544:	4639      	mov	r1, r7
    2546:	4613      	mov	r3, r2
    2548:	2201      	movs	r2, #1
    254a:	f7ff febd 	bl	22c8 <prefix_print>
				level, domain_id, source_id);
	}

	length = cbvprintf(out_func, (void *)output, fmt, ap);
    254e:	480f      	ldr	r0, [pc, #60]	; (258c <log_output_string+0x68>)
    2550:	4643      	mov	r3, r8
    2552:	4622      	mov	r2, r4
    2554:	4629      	mov	r1, r5
    2556:	f7ff f9c9 	bl	18ec <cbvprintf>

	(void)length;

	if (raw_string) {
    255a:	b98e      	cbnz	r6, 2580 <log_output_string+0x5c>
    255c:	3c01      	subs	r4, #1
	while (*fmt != '\0') {
    255e:	4633      	mov	r3, r6
    2560:	f814 6f01 	ldrb.w	r6, [r4, #1]!
    2564:	2e00      	cmp	r6, #0
    2566:	d1fa      	bne.n	255e <log_output_string+0x3a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
    2568:	2b0a      	cmp	r3, #10
    256a:	d103      	bne.n	2574 <log_output_string+0x50>
			print_formatted(output, "\r");
    256c:	4908      	ldr	r1, [pc, #32]	; (2590 <log_output_string+0x6c>)
    256e:	4628      	mov	r0, r5
    2570:	f7ff fe98 	bl	22a4 <print_formatted>
		}
	} else {
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2574:	4628      	mov	r0, r5
}
    2576:	b004      	add	sp, #16
    2578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(output);
    257c:	f007 b90a 	b.w	9794 <log_output_flush>
		postfix_print(output, flags, level);
    2580:	4632      	mov	r2, r6
    2582:	4639      	mov	r1, r7
    2584:	4628      	mov	r0, r5
    2586:	f7ff ff41 	bl	240c <postfix_print>
    258a:	e7f3      	b.n	2574 <log_output_string+0x50>
    258c:	00009763 	.word	0x00009763
    2590:	0000ac7f 	.word	0x0000ac7f

00002594 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
    2594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2598:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    259a:	4698      	mov	r8, r3
	uint32_t prefix_offset;
	uint8_t level = (uint8_t)src_level.level;
    259c:	f001 0907 	and.w	r9, r1, #7
		log_output_hexdump_syst_process(output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(output, flags, true, timestamp,
    25a0:	f3c1 1389 	ubfx	r3, r1, #6, #10
    25a4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
    25a8:	e9cd 9100 	strd	r9, r1, [sp]
    25ac:	9302      	str	r3, [sp, #8]
    25ae:	4631      	mov	r1, r6
    25b0:	4613      	mov	r3, r2
    25b2:	2201      	movs	r2, #1
{
    25b4:	4604      	mov	r4, r0
    25b6:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
	prefix_offset = prefix_print(output, flags, true, timestamp,
    25ba:	f7ff fe85 	bl	22c8 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(output, "%s", metadata);
    25be:	4911      	ldr	r1, [pc, #68]	; (2604 <log_output_hexdump+0x70>)
	prefix_offset = prefix_print(output, flags, true, timestamp,
    25c0:	4682      	mov	sl, r0
	print_formatted(output, "%s", metadata);
    25c2:	4642      	mov	r2, r8
    25c4:	4620      	mov	r0, r4
    25c6:	f7ff fe6d 	bl	22a4 <print_formatted>

	while (length != 0U) {
    25ca:	b955      	cbnz	r5, 25e2 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	}

	postfix_print(output, flags, level);
    25cc:	4620      	mov	r0, r4
    25ce:	464a      	mov	r2, r9
    25d0:	4631      	mov	r1, r6
    25d2:	f7ff ff1b 	bl	240c <postfix_print>
	log_output_flush(output);
    25d6:	4620      	mov	r0, r4
}
    25d8:	b004      	add	sp, #16
    25da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    25de:	f007 b8d9 	b.w	9794 <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
    25e2:	2d10      	cmp	r5, #16
    25e4:	46a8      	mov	r8, r5
    25e6:	bf28      	it	cs
    25e8:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(output, data, part_len,
    25ec:	4639      	mov	r1, r7
    25ee:	9600      	str	r6, [sp, #0]
    25f0:	4653      	mov	r3, sl
    25f2:	4642      	mov	r2, r8
    25f4:	4620      	mov	r0, r4
    25f6:	f7ff ff27 	bl	2448 <hexdump_line_print>
		data += part_len;
    25fa:	4447      	add	r7, r8
		length -= part_len;
    25fc:	eba5 0508 	sub.w	r5, r5, r8
    2600:	e7e3      	b.n	25ca <log_output_hexdump+0x36>
    2602:	bf00      	nop
    2604:	0000a778 	.word	0x0000a778

00002608 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2608:	4a08      	ldr	r2, [pc, #32]	; (262c <log_output_timestamp_freq_set+0x24>)
{
    260a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    260c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    260e:	4c08      	ldr	r4, [pc, #32]	; (2630 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2610:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2612:	2100      	movs	r1, #0
    2614:	42a0      	cmp	r0, r4
    2616:	d804      	bhi.n	2622 <log_output_timestamp_freq_set+0x1a>
    2618:	b101      	cbz	r1, 261c <log_output_timestamp_freq_set+0x14>
    261a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    261c:	4b05      	ldr	r3, [pc, #20]	; (2634 <log_output_timestamp_freq_set+0x2c>)
    261e:	6018      	str	r0, [r3, #0]
}
    2620:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2622:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2624:	005b      	lsls	r3, r3, #1
    2626:	2101      	movs	r1, #1
    2628:	e7f4      	b.n	2614 <log_output_timestamp_freq_set+0xc>
    262a:	bf00      	nop
    262c:	20000ab0 	.word	0x20000ab0
    2630:	000f4240 	.word	0x000f4240
    2634:	20000aac 	.word	0x20000aac

00002638 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2638:	4b01      	ldr	r3, [pc, #4]	; (2640 <log_backend_rtt_init+0x8>)
    263a:	2201      	movs	r2, #1
    263c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    263e:	4770      	bx	lr
    2640:	20001234 	.word	0x20001234

00002644 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    2644:	4b02      	ldr	r3, [pc, #8]	; (2650 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2646:	4803      	ldr	r0, [pc, #12]	; (2654 <panic+0x10>)
    2648:	2201      	movs	r2, #1
    264a:	701a      	strb	r2, [r3, #0]
    264c:	f007 b8a2 	b.w	9794 <log_output_flush>
    2650:	20001235 	.word	0x20001235
    2654:	0000a41c 	.word	0x0000a41c

00002658 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
    2658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(output, src_level, timestamp,
    265a:	200f      	movs	r0, #15
    265c:	9002      	str	r0, [sp, #8]
    265e:	9807      	ldr	r0, [sp, #28]
    2660:	9001      	str	r0, [sp, #4]
    2662:	9806      	ldr	r0, [sp, #24]
    2664:	9000      	str	r0, [sp, #0]
    2666:	4803      	ldr	r0, [pc, #12]	; (2674 <sync_hexdump+0x1c>)
    2668:	f7ff ff94 	bl	2594 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_rtt, flag, src_level,
				     timestamp, metadata, data, length);
}
    266c:	b005      	add	sp, #20
    266e:	f85d fb04 	ldr.w	pc, [sp], #4
    2672:	bf00      	nop
    2674:	0000a41c 	.word	0x0000a41c

00002678 <sync_string>:
{
    2678:	b507      	push	{r0, r1, r2, lr}
	log_output_string(output, src_level, timestamp, fmt, ap, flags);
    267a:	200f      	movs	r0, #15
    267c:	9001      	str	r0, [sp, #4]
    267e:	9804      	ldr	r0, [sp, #16]
    2680:	9000      	str	r0, [sp, #0]
    2682:	4803      	ldr	r0, [pc, #12]	; (2690 <sync_string+0x18>)
    2684:	f7ff ff4e 	bl	2524 <log_output_string>
}
    2688:	b003      	add	sp, #12
    268a:	f85d fb04 	ldr.w	pc, [sp], #4
    268e:	bf00      	nop
    2690:	0000a41c 	.word	0x0000a41c

00002694 <data_out_block_mode>:
{
    2694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2696:	4d19      	ldr	r5, [pc, #100]	; (26fc <data_out_block_mode+0x68>)
    2698:	4607      	mov	r7, r0
    269a:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    269c:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    269e:	4632      	mov	r2, r6
    26a0:	4639      	mov	r1, r7
    26a2:	2000      	movs	r0, #0
    26a4:	f003 ff6e 	bl	6584 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    26a8:	b1c8      	cbz	r0, 26de <data_out_block_mode+0x4a>
	host_present = true;
    26aa:	2301      	movs	r3, #1
    26ac:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    26ae:	4b14      	ldr	r3, [pc, #80]	; (2700 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    26b0:	781b      	ldrb	r3, [r3, #0]
    26b2:	b92b      	cbnz	r3, 26c0 <data_out_block_mode+0x2c>
}
    26b4:	4630      	mov	r0, r6
    26b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    26b8:	b95c      	cbnz	r4, 26d2 <data_out_block_mode+0x3e>
		host_present = false;
    26ba:	702c      	strb	r4, [r5, #0]
    26bc:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    26c0:	2000      	movs	r0, #0
    26c2:	f003 ffdf 	bl	6684 <SEGGER_RTT_HasDataUp>
    26c6:	2800      	cmp	r0, #0
    26c8:	d0f4      	beq.n	26b4 <data_out_block_mode+0x20>
    26ca:	782b      	ldrb	r3, [r5, #0]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d1f3      	bne.n	26b8 <data_out_block_mode+0x24>
    26d0:	e7f0      	b.n	26b4 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    26d2:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    26d4:	f241 3088 	movw	r0, #5000	; 0x1388
    26d8:	f007 fcd7 	bl	a08a <z_impl_k_busy_wait>
}
    26dc:	e7f0      	b.n	26c0 <data_out_block_mode+0x2c>
		} else if (host_present) {
    26de:	782b      	ldrb	r3, [r5, #0]
    26e0:	b113      	cbz	r3, 26e8 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    26e2:	3c01      	subs	r4, #1
    26e4:	d104      	bne.n	26f0 <data_out_block_mode+0x5c>
		host_present = false;
    26e6:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    26e8:	782b      	ldrb	r3, [r5, #0]
    26ea:	2b00      	cmp	r3, #0
    26ec:	d1d7      	bne.n	269e <data_out_block_mode+0xa>
    26ee:	e7e1      	b.n	26b4 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    26f0:	f241 3088 	movw	r0, #5000	; 0x1388
    26f4:	f007 fcc9 	bl	a08a <z_impl_k_busy_wait>
}
    26f8:	e7f6      	b.n	26e8 <data_out_block_mode+0x54>
    26fa:	bf00      	nop
    26fc:	20001234 	.word	0x20001234
    2700:	20001235 	.word	0x20001235

00002704 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2708:	4605      	mov	r5, r0
    270a:	f04f 0320 	mov.w	r3, #32
    270e:	f3ef 8611 	mrs	r6, BASEPRI
    2712:	f383 8812 	msr	BASEPRI_MAX, r3
    2716:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    271a:	481e      	ldr	r0, [pc, #120]	; (2794 <pm_state_notify+0x90>)
    271c:	f004 fb36 	bl	6d8c <z_spin_lock_valid>
    2720:	b940      	cbnz	r0, 2734 <pm_state_notify+0x30>
    2722:	491d      	ldr	r1, [pc, #116]	; (2798 <pm_state_notify+0x94>)
    2724:	481d      	ldr	r0, [pc, #116]	; (279c <pm_state_notify+0x98>)
    2726:	2281      	movs	r2, #129	; 0x81
    2728:	f006 ff24 	bl	9574 <printk>
    272c:	481a      	ldr	r0, [pc, #104]	; (2798 <pm_state_notify+0x94>)
    272e:	2181      	movs	r1, #129	; 0x81
    2730:	f006 ffec 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    2734:	4817      	ldr	r0, [pc, #92]	; (2794 <pm_state_notify+0x90>)
    2736:	f004 fb47 	bl	6dc8 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    273a:	4b19      	ldr	r3, [pc, #100]	; (27a0 <pm_state_notify+0x9c>)
    273c:	681c      	ldr	r4, [r3, #0]
    273e:	2c00      	cmp	r4, #0
    2740:	bf38      	it	cc
    2742:	2400      	movcc	r4, #0
    2744:	b19c      	cbz	r4, 276e <pm_state_notify+0x6a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    2746:	4f17      	ldr	r7, [pc, #92]	; (27a4 <pm_state_notify+0xa0>)
    2748:	f8df 805c 	ldr.w	r8, [pc, #92]	; 27a8 <pm_state_notify+0xa4>
    274c:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2750:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2754:	2d00      	cmp	r5, #0
    2756:	bf08      	it	eq
    2758:	4613      	moveq	r3, r2
		if (callback) {
    275a:	b12b      	cbz	r3, 2768 <pm_state_notify+0x64>
			callback(z_power_states[_current_cpu->id].state);
    275c:	f898 2014 	ldrb.w	r2, [r8, #20]
    2760:	fb09 f202 	mul.w	r2, r9, r2
    2764:	5cb8      	ldrb	r0, [r7, r2]
    2766:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2768:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    276a:	2c00      	cmp	r4, #0
    276c:	d1f0      	bne.n	2750 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    276e:	4809      	ldr	r0, [pc, #36]	; (2794 <pm_state_notify+0x90>)
    2770:	f004 fb1a 	bl	6da8 <z_spin_unlock_valid>
    2774:	b940      	cbnz	r0, 2788 <pm_state_notify+0x84>
    2776:	4908      	ldr	r1, [pc, #32]	; (2798 <pm_state_notify+0x94>)
    2778:	4808      	ldr	r0, [pc, #32]	; (279c <pm_state_notify+0x98>)
    277a:	22ac      	movs	r2, #172	; 0xac
    277c:	f006 fefa 	bl	9574 <printk>
    2780:	4805      	ldr	r0, [pc, #20]	; (2798 <pm_state_notify+0x94>)
    2782:	21ac      	movs	r1, #172	; 0xac
    2784:	f006 ffc2 	bl	970c <assert_post_action>
	__asm__ volatile(
    2788:	f386 8811 	msr	BASEPRI, r6
    278c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2794:	20000ac8 	.word	0x20000ac8
    2798:	0000ab1d 	.word	0x0000ab1d
    279c:	0000a66d 	.word	0x0000a66d
    27a0:	20000acc 	.word	0x20000acc
    27a4:	20000ad8 	.word	0x20000ad8
    27a8:	200011bc 	.word	0x200011bc

000027ac <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    27ac:	f000 031f 	and.w	r3, r0, #31
    27b0:	2201      	movs	r2, #1
    27b2:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    27b4:	4b0a      	ldr	r3, [pc, #40]	; (27e0 <atomic_test_and_set_bit.constprop.0+0x34>)
    27b6:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    27ba:	0940      	lsrs	r0, r0, #5
    27bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    27c0:	e850 3f00 	ldrex	r3, [r0]
    27c4:	ea43 0102 	orr.w	r1, r3, r2
    27c8:	e840 1c00 	strex	ip, r1, [r0]
    27cc:	f1bc 0f00 	cmp.w	ip, #0
    27d0:	d1f6      	bne.n	27c0 <atomic_test_and_set_bit.constprop.0+0x14>
    27d2:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    27d6:	421a      	tst	r2, r3
}
    27d8:	bf14      	ite	ne
    27da:	2001      	movne	r0, #1
    27dc:	2000      	moveq	r0, #0
    27de:	4770      	bx	lr
    27e0:	20000ae4 	.word	0x20000ae4

000027e4 <pm_system_resume>:

void pm_system_resume(void)
{
    27e4:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    27e6:	4b1d      	ldr	r3, [pc, #116]	; (285c <pm_system_resume+0x78>)
    27e8:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27ea:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    27ee:	f005 031f 	and.w	r3, r5, #31
    27f2:	2201      	movs	r2, #1
    27f4:	409a      	lsls	r2, r3
    27f6:	4b1a      	ldr	r3, [pc, #104]	; (2860 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    27f8:	0969      	lsrs	r1, r5, #5
{
    27fa:	b085      	sub	sp, #20
    27fc:	43d0      	mvns	r0, r2
    27fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2802:	e853 1f00 	ldrex	r1, [r3]
    2806:	ea01 0400 	and.w	r4, r1, r0
    280a:	e843 4c00 	strex	ip, r4, [r3]
    280e:	f1bc 0f00 	cmp.w	ip, #0
    2812:	d1f6      	bne.n	2802 <pm_system_resume+0x1e>
    2814:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2818:	4211      	tst	r1, r2
    281a:	d017      	beq.n	284c <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    281c:	4c11      	ldr	r4, [pc, #68]	; (2864 <pm_system_resume+0x80>)
    281e:	220c      	movs	r2, #12
    2820:	fb02 4205 	mla	r2, r2, r5, r4
    2824:	ca07      	ldmia	r2, {r0, r1, r2}
    2826:	ab01      	add	r3, sp, #4
    2828:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    282c:	4a0e      	ldr	r2, [pc, #56]	; (2868 <pm_system_resume+0x84>)
    282e:	b17a      	cbz	r2, 2850 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    2830:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2834:	f007 f823 	bl	987e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    2838:	2000      	movs	r0, #0
    283a:	f7ff ff63 	bl	2704 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    283e:	230c      	movs	r3, #12
    2840:	436b      	muls	r3, r5
    2842:	2200      	movs	r2, #0
    2844:	18e1      	adds	r1, r4, r3
    2846:	50e2      	str	r2, [r4, r3]
    2848:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    284c:	b005      	add	sp, #20
    284e:	bd30      	pop	{r4, r5, pc}
    2850:	f382 8811 	msr	BASEPRI, r2
    2854:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2858:	e7ee      	b.n	2838 <pm_system_resume+0x54>
    285a:	bf00      	nop
    285c:	200011bc 	.word	0x200011bc
    2860:	20000ad4 	.word	0x20000ad4
    2864:	20000ad8 	.word	0x20000ad8
    2868:	0000987f 	.word	0x0000987f

0000286c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    286c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2870:	4b37      	ldr	r3, [pc, #220]	; (2950 <pm_system_suspend+0xe4>)
    2872:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2968 <pm_system_suspend+0xfc>
    2876:	7d1c      	ldrb	r4, [r3, #20]
{
    2878:	b088      	sub	sp, #32
    287a:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    287c:	4620      	mov	r0, r4
    287e:	f7ff ff95 	bl	27ac <atomic_test_and_set_bit.constprop.0>
    2882:	b960      	cbnz	r0, 289e <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2884:	466e      	mov	r6, sp
    2886:	463a      	mov	r2, r7
    2888:	4621      	mov	r1, r4
    288a:	4630      	mov	r0, r6
    288c:	f006 ff8f 	bl	97ae <pm_policy_next_state>
    2890:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2894:	250c      	movs	r5, #12
    2896:	fb05 8504 	mla	r5, r5, r4, r8
    289a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    289e:	230c      	movs	r3, #12
    28a0:	4363      	muls	r3, r4
    28a2:	eb08 0203 	add.w	r2, r8, r3
    28a6:	f818 0003 	ldrb.w	r0, [r8, r3]
    28aa:	0965      	lsrs	r5, r4, #5
    28ac:	f004 061f 	and.w	r6, r4, #31
    28b0:	b3c8      	cbz	r0, 2926 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    28b2:	1c7b      	adds	r3, r7, #1
    28b4:	d00f      	beq.n	28d6 <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    28b6:	f8d2 e008 	ldr.w	lr, [r2, #8]
    28ba:	4826      	ldr	r0, [pc, #152]	; (2954 <pm_system_suspend+0xe8>)
    28bc:	4a26      	ldr	r2, [pc, #152]	; (2958 <pm_system_suspend+0xec>)
    28be:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    28c2:	2100      	movs	r1, #0
    28c4:	2300      	movs	r3, #0
    28c6:	fbec 010e 	umlal	r0, r1, ip, lr
    28ca:	f7fd fc19 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    28ce:	2101      	movs	r1, #1
    28d0:	1a38      	subs	r0, r7, r0
    28d2:	f006 f9fb 	bl	8ccc <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    28d6:	f005 f907 	bl	7ae8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    28da:	2001      	movs	r0, #1
    28dc:	f7ff ff12 	bl	2704 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    28e0:	f3bf 8f5b 	dmb	ish
    28e4:	4b1d      	ldr	r3, [pc, #116]	; (295c <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    28e6:	2201      	movs	r2, #1
    28e8:	40b2      	lsls	r2, r6
    28ea:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    28ee:	e853 1f00 	ldrex	r1, [r3]
    28f2:	4311      	orrs	r1, r2
    28f4:	e843 1000 	strex	r0, r1, [r3]
    28f8:	2800      	cmp	r0, #0
    28fa:	d1f8      	bne.n	28ee <pm_system_suspend+0x82>
    28fc:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    2900:	230c      	movs	r3, #12
    2902:	fb03 8404 	mla	r4, r3, r4, r8
    2906:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    290a:	ab05      	add	r3, sp, #20
    290c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    2910:	4a13      	ldr	r2, [pc, #76]	; (2960 <pm_system_suspend+0xf4>)
    2912:	b11a      	cbz	r2, 291c <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    2914:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2918:	f006 ff9e 	bl	9858 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    291c:	f7ff ff62 	bl	27e4 <pm_system_resume>
	k_sched_unlock();
    2920:	f005 fd18 	bl	8354 <k_sched_unlock>
	bool ret = true;
    2924:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2926:	4a0f      	ldr	r2, [pc, #60]	; (2964 <pm_system_suspend+0xf8>)
    2928:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    292c:	2301      	movs	r3, #1
    292e:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2930:	43db      	mvns	r3, r3
    2932:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2936:	e855 2f00 	ldrex	r2, [r5]
    293a:	401a      	ands	r2, r3
    293c:	e845 2100 	strex	r1, r2, [r5]
    2940:	2900      	cmp	r1, #0
    2942:	d1f8      	bne.n	2936 <pm_system_suspend+0xca>
    2944:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    2948:	b008      	add	sp, #32
    294a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    294e:	bf00      	nop
    2950:	200011bc 	.word	0x200011bc
    2954:	000f423f 	.word	0x000f423f
    2958:	000f4240 	.word	0x000f4240
    295c:	20000ad4 	.word	0x20000ad4
    2960:	00009859 	.word	0x00009859
    2964:	20000ae4 	.word	0x20000ae4
    2968:	20000ad8 	.word	0x20000ad8

0000296c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    296c:	4801      	ldr	r0, [pc, #4]	; (2974 <nrf_cc3xx_platform_abort_init+0x8>)
    296e:	f006 bc47 	b.w	9200 <nrf_cc3xx_platform_set_abort>
    2972:	bf00      	nop
    2974:	0000a42c 	.word	0x0000a42c

00002978 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2978:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    297a:	b1d0      	cbz	r0, 29b2 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    297c:	6843      	ldr	r3, [r0, #4]
    297e:	2b04      	cmp	r3, #4
    2980:	d111      	bne.n	29a6 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2982:	2200      	movs	r2, #0
    2984:	6803      	ldr	r3, [r0, #0]
    2986:	f3bf 8f5b 	dmb	ish
    298a:	e853 1f00 	ldrex	r1, [r3]
    298e:	2901      	cmp	r1, #1
    2990:	d103      	bne.n	299a <mutex_unlock_platform+0x22>
    2992:	e843 2000 	strex	r0, r2, [r3]
    2996:	2800      	cmp	r0, #0
    2998:	d1f7      	bne.n	298a <mutex_unlock_platform+0x12>
    299a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    299e:	4807      	ldr	r0, [pc, #28]	; (29bc <mutex_unlock_platform+0x44>)
    29a0:	bf08      	it	eq
    29a2:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    29a4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    29a6:	b13b      	cbz	r3, 29b8 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    29a8:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    29aa:	f004 fb15 	bl	6fd8 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    29ae:	2000      	movs	r0, #0
    29b0:	e7f8      	b.n	29a4 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    29b2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    29b6:	e7f5      	b.n	29a4 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    29b8:	4801      	ldr	r0, [pc, #4]	; (29c0 <mutex_unlock_platform+0x48>)
    29ba:	e7f3      	b.n	29a4 <mutex_unlock_platform+0x2c>
    29bc:	ffff8fe9 	.word	0xffff8fe9
    29c0:	ffff8fea 	.word	0xffff8fea

000029c4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    29c4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    29c6:	4604      	mov	r4, r0
    29c8:	b918      	cbnz	r0, 29d2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    29ca:	4b0d      	ldr	r3, [pc, #52]	; (2a00 <mutex_free_platform+0x3c>)
    29cc:	480d      	ldr	r0, [pc, #52]	; (2a04 <mutex_free_platform+0x40>)
    29ce:	685b      	ldr	r3, [r3, #4]
    29d0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    29d2:	6861      	ldr	r1, [r4, #4]
    29d4:	2908      	cmp	r1, #8
    29d6:	d00d      	beq.n	29f4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    29d8:	f031 0304 	bics.w	r3, r1, #4
    29dc:	d00a      	beq.n	29f4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    29de:	f011 0102 	ands.w	r1, r1, #2
    29e2:	d008      	beq.n	29f6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    29e4:	4808      	ldr	r0, [pc, #32]	; (2a08 <mutex_free_platform+0x44>)
    29e6:	4621      	mov	r1, r4
    29e8:	f004 f860 	bl	6aac <k_mem_slab_free>
        mutex->mutex = NULL;
    29ec:	2300      	movs	r3, #0
    29ee:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    29f0:	2300      	movs	r3, #0
    29f2:	6063      	str	r3, [r4, #4]
}
    29f4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    29f6:	6820      	ldr	r0, [r4, #0]
    29f8:	2214      	movs	r2, #20
    29fa:	f006 ff21 	bl	9840 <memset>
    29fe:	e7f7      	b.n	29f0 <mutex_free_platform+0x2c>
    2a00:	200001a8 	.word	0x200001a8
    2a04:	0000acb4 	.word	0x0000acb4
    2a08:	20000ae8 	.word	0x20000ae8

00002a0c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2a0c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2a0e:	4604      	mov	r4, r0
    2a10:	b918      	cbnz	r0, 2a1a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2a12:	4b16      	ldr	r3, [pc, #88]	; (2a6c <mutex_init_platform+0x60>)
    2a14:	4816      	ldr	r0, [pc, #88]	; (2a70 <mutex_init_platform+0x64>)
    2a16:	685b      	ldr	r3, [r3, #4]
    2a18:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2a1a:	6863      	ldr	r3, [r4, #4]
    2a1c:	2b04      	cmp	r3, #4
    2a1e:	d023      	beq.n	2a68 <mutex_init_platform+0x5c>
    2a20:	2b08      	cmp	r3, #8
    2a22:	d021      	beq.n	2a68 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2a24:	b9cb      	cbnz	r3, 2a5a <mutex_init_platform+0x4e>
    2a26:	6823      	ldr	r3, [r4, #0]
    2a28:	b9bb      	cbnz	r3, 2a5a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2a2a:	4812      	ldr	r0, [pc, #72]	; (2a74 <mutex_init_platform+0x68>)
    2a2c:	f04f 32ff 	mov.w	r2, #4294967295
    2a30:	f04f 33ff 	mov.w	r3, #4294967295
    2a34:	4621      	mov	r1, r4
    2a36:	f003 ffdf 	bl	69f8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2a3a:	b908      	cbnz	r0, 2a40 <mutex_init_platform+0x34>
    2a3c:	6823      	ldr	r3, [r4, #0]
    2a3e:	b91b      	cbnz	r3, 2a48 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2a40:	4b0a      	ldr	r3, [pc, #40]	; (2a6c <mutex_init_platform+0x60>)
    2a42:	480d      	ldr	r0, [pc, #52]	; (2a78 <mutex_init_platform+0x6c>)
    2a44:	685b      	ldr	r3, [r3, #4]
    2a46:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2a48:	6820      	ldr	r0, [r4, #0]
    2a4a:	2214      	movs	r2, #20
    2a4c:	2100      	movs	r1, #0
    2a4e:	f006 fef7 	bl	9840 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2a52:	6863      	ldr	r3, [r4, #4]
    2a54:	f043 0302 	orr.w	r3, r3, #2
    2a58:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2a5a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2a5c:	f007 fad5 	bl	a00a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2a60:	6863      	ldr	r3, [r4, #4]
    2a62:	f043 0301 	orr.w	r3, r3, #1
    2a66:	6063      	str	r3, [r4, #4]
}
    2a68:	bd10      	pop	{r4, pc}
    2a6a:	bf00      	nop
    2a6c:	200001a8 	.word	0x200001a8
    2a70:	0000acb4 	.word	0x0000acb4
    2a74:	20000ae8 	.word	0x20000ae8
    2a78:	0000acda 	.word	0x0000acda

00002a7c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2a7c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    2a7e:	b308      	cbz	r0, 2ac4 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    2a80:	6843      	ldr	r3, [r0, #4]
    2a82:	2b04      	cmp	r3, #4
    2a84:	d110      	bne.n	2aa8 <mutex_lock_platform+0x2c>
    2a86:	2201      	movs	r2, #1
    2a88:	6803      	ldr	r3, [r0, #0]
    2a8a:	f3bf 8f5b 	dmb	ish
    2a8e:	e853 1f00 	ldrex	r1, [r3]
    2a92:	2900      	cmp	r1, #0
    2a94:	d103      	bne.n	2a9e <mutex_lock_platform+0x22>
    2a96:	e843 2000 	strex	r0, r2, [r3]
    2a9a:	2800      	cmp	r0, #0
    2a9c:	d1f7      	bne.n	2a8e <mutex_lock_platform+0x12>
    2a9e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2aa2:	d10b      	bne.n	2abc <mutex_lock_platform+0x40>
    2aa4:	2000      	movs	r0, #0
}
    2aa6:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2aa8:	b153      	cbz	r3, 2ac0 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2aaa:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2aac:	f04f 32ff 	mov.w	r2, #4294967295
    2ab0:	f04f 33ff 	mov.w	r3, #4294967295
    2ab4:	f004 f9b8 	bl	6e28 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2ab8:	2800      	cmp	r0, #0
    2aba:	d0f3      	beq.n	2aa4 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2abc:	4803      	ldr	r0, [pc, #12]	; (2acc <mutex_lock_platform+0x50>)
    2abe:	e7f2      	b.n	2aa6 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2ac0:	4803      	ldr	r0, [pc, #12]	; (2ad0 <mutex_lock_platform+0x54>)
    2ac2:	e7f0      	b.n	2aa6 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2ac4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2ac8:	e7ed      	b.n	2aa6 <mutex_lock_platform+0x2a>
    2aca:	bf00      	nop
    2acc:	ffff8fe9 	.word	0xffff8fe9
    2ad0:	ffff8fea 	.word	0xffff8fea

00002ad4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2ad4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2ad6:	4906      	ldr	r1, [pc, #24]	; (2af0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2ad8:	4806      	ldr	r0, [pc, #24]	; (2af4 <nrf_cc3xx_platform_mutex_init+0x20>)
    2ada:	2340      	movs	r3, #64	; 0x40
    2adc:	2214      	movs	r2, #20
    2ade:	f007 fa64 	bl	9faa <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2ae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2ae6:	4904      	ldr	r1, [pc, #16]	; (2af8 <nrf_cc3xx_platform_mutex_init+0x24>)
    2ae8:	4804      	ldr	r0, [pc, #16]	; (2afc <nrf_cc3xx_platform_mutex_init+0x28>)
    2aea:	f006 bbeb 	b.w	92c4 <nrf_cc3xx_platform_set_mutexes>
    2aee:	bf00      	nop
    2af0:	20000b08 	.word	0x20000b08
    2af4:	20000ae8 	.word	0x20000ae8
    2af8:	0000a444 	.word	0x0000a444
    2afc:	0000a434 	.word	0x0000a434

00002b00 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2b00:	4901      	ldr	r1, [pc, #4]	; (2b08 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2b02:	2210      	movs	r2, #16
	str	r2, [r1]
    2b04:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2b06:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2b08:	e000ed10 	.word	0xe000ed10

00002b0c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2b0c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2b0e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2b10:	f380 8811 	msr	BASEPRI, r0
	isb
    2b14:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2b18:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2b1c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2b1e:	b662      	cpsie	i
	isb
    2b20:	f3bf 8f6f 	isb	sy

	bx	lr
    2b24:	4770      	bx	lr
    2b26:	bf00      	nop

00002b28 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2b28:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2b2a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2b2c:	f381 8811 	msr	BASEPRI, r1

	wfe
    2b30:	bf20      	wfe

	msr	BASEPRI, r0
    2b32:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2b36:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2b38:	4770      	bx	lr
    2b3a:	bf00      	nop

00002b3c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2b3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2b3e:	4606      	mov	r6, r0

	if (esf != NULL) {
    2b40:	460c      	mov	r4, r1
    2b42:	b301      	cbz	r1, 2b86 <z_arm_fatal_error+0x4a>
    2b44:	4b13      	ldr	r3, [pc, #76]	; (2b94 <z_arm_fatal_error+0x58>)
    2b46:	4d14      	ldr	r5, [pc, #80]	; (2b98 <z_arm_fatal_error+0x5c>)
    2b48:	1aed      	subs	r5, r5, r3
    2b4a:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2b4c:	688b      	ldr	r3, [r1, #8]
    2b4e:	9300      	str	r3, [sp, #0]
    2b50:	01ad      	lsls	r5, r5, #6
    2b52:	f045 0501 	orr.w	r5, r5, #1
    2b56:	e9d1 2300 	ldrd	r2, r3, [r1]
    2b5a:	4628      	mov	r0, r5
    2b5c:	490f      	ldr	r1, [pc, #60]	; (2b9c <z_arm_fatal_error+0x60>)
    2b5e:	f006 fdea 	bl	9736 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2b62:	6963      	ldr	r3, [r4, #20]
    2b64:	9300      	str	r3, [sp, #0]
    2b66:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    2b6a:	490d      	ldr	r1, [pc, #52]	; (2ba0 <z_arm_fatal_error+0x64>)
    2b6c:	4628      	mov	r0, r5
    2b6e:	f006 fde2 	bl	9736 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2b72:	69e2      	ldr	r2, [r4, #28]
    2b74:	490b      	ldr	r1, [pc, #44]	; (2ba4 <z_arm_fatal_error+0x68>)
    2b76:	4628      	mov	r0, r5
    2b78:	f006 fddd 	bl	9736 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2b7c:	69a2      	ldr	r2, [r4, #24]
    2b7e:	490a      	ldr	r1, [pc, #40]	; (2ba8 <z_arm_fatal_error+0x6c>)
    2b80:	4628      	mov	r0, r5
    2b82:	f006 fdd8 	bl	9736 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2b86:	4621      	mov	r1, r4
    2b88:	4630      	mov	r0, r6
}
    2b8a:	b002      	add	sp, #8
    2b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    2b90:	f003 bdce 	b.w	6730 <z_fatal_error>
    2b94:	0000a33c 	.word	0x0000a33c
    2b98:	0000a374 	.word	0x0000a374
    2b9c:	0000ad07 	.word	0x0000ad07
    2ba0:	0000ad36 	.word	0x0000ad36
    2ba4:	0000ad65 	.word	0x0000ad65
    2ba8:	0000ad74 	.word	0x0000ad74

00002bac <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2bac:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2bae:	2b00      	cmp	r3, #0
    2bb0:	db08      	blt.n	2bc4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bb2:	2201      	movs	r2, #1
    2bb4:	f000 001f 	and.w	r0, r0, #31
    2bb8:	fa02 f000 	lsl.w	r0, r2, r0
    2bbc:	095b      	lsrs	r3, r3, #5
    2bbe:	4a02      	ldr	r2, [pc, #8]	; (2bc8 <arch_irq_enable+0x1c>)
    2bc0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2bc4:	4770      	bx	lr
    2bc6:	bf00      	nop
    2bc8:	e000e100 	.word	0xe000e100

00002bcc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2bcc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2bce:	2b00      	cmp	r3, #0
    2bd0:	db0d      	blt.n	2bee <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bd2:	2201      	movs	r2, #1
    2bd4:	095b      	lsrs	r3, r3, #5
    2bd6:	f000 001f 	and.w	r0, r0, #31
    2bda:	fa02 f000 	lsl.w	r0, r2, r0
    2bde:	3320      	adds	r3, #32
    2be0:	4a03      	ldr	r2, [pc, #12]	; (2bf0 <arch_irq_disable+0x24>)
    2be2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2be6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2bea:	f3bf 8f6f 	isb	sy
}
    2bee:	4770      	bx	lr
    2bf0:	e000e100 	.word	0xe000e100

00002bf4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2bf4:	4b05      	ldr	r3, [pc, #20]	; (2c0c <arch_irq_is_enabled+0x18>)
    2bf6:	0942      	lsrs	r2, r0, #5
    2bf8:	f000 001f 	and.w	r0, r0, #31
    2bfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2c00:	2301      	movs	r3, #1
    2c02:	fa03 f000 	lsl.w	r0, r3, r0
}
    2c06:	4010      	ands	r0, r2
    2c08:	4770      	bx	lr
    2c0a:	bf00      	nop
    2c0c:	e000e100 	.word	0xe000e100

00002c10 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2c10:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2c12:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2c14:	2c07      	cmp	r4, #7
{
    2c16:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2c18:	d908      	bls.n	2c2c <z_arm_irq_priority_set+0x1c>
    2c1a:	490e      	ldr	r1, [pc, #56]	; (2c54 <z_arm_irq_priority_set+0x44>)
    2c1c:	480e      	ldr	r0, [pc, #56]	; (2c58 <z_arm_irq_priority_set+0x48>)
    2c1e:	2259      	movs	r2, #89	; 0x59
    2c20:	f006 fca8 	bl	9574 <printk>
    2c24:	480b      	ldr	r0, [pc, #44]	; (2c54 <z_arm_irq_priority_set+0x44>)
    2c26:	2159      	movs	r1, #89	; 0x59
    2c28:	f006 fd70 	bl	970c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2c2c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2c2e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c30:	bfac      	ite	ge
    2c32:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c36:	4b09      	ldrlt	r3, [pc, #36]	; (2c5c <z_arm_irq_priority_set+0x4c>)
    2c38:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2c3c:	bfb8      	it	lt
    2c3e:	f005 050f 	andlt.w	r5, r5, #15
    2c42:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c44:	bfaa      	itet	ge
    2c46:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c4a:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c4c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    2c50:	bd38      	pop	{r3, r4, r5, pc}
    2c52:	bf00      	nop
    2c54:	0000ada2 	.word	0x0000ada2
    2c58:	0000a66d 	.word	0x0000a66d
    2c5c:	e000ed14 	.word	0xe000ed14

00002c60 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2c60:	bf30      	wfi
    b z_SysNmiOnReset
    2c62:	f7ff bffd 	b.w	2c60 <z_SysNmiOnReset>
    2c66:	bf00      	nop

00002c68 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2c68:	4a0b      	ldr	r2, [pc, #44]	; (2c98 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2c6a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2c6c:	4b0b      	ldr	r3, [pc, #44]	; (2c9c <z_arm_prep_c+0x34>)
    2c6e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2c72:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2c74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c78:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2c7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2c80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2c88:	f003 fe04 	bl	6894 <z_bss_zero>
	z_data_copy();
    2c8c:	f005 fe88 	bl	89a0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2c90:	f000 fb54 	bl	333c <z_arm_interrupt_init>
	z_cstart();
    2c94:	f003 fe08 	bl	68a8 <z_cstart>
    2c98:	00000000 	.word	0x00000000
    2c9c:	e000ed00 	.word	0xe000ed00

00002ca0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2ca0:	4a09      	ldr	r2, [pc, #36]	; (2cc8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2ca2:	490a      	ldr	r1, [pc, #40]	; (2ccc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2ca4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2ca6:	6809      	ldr	r1, [r1, #0]
    2ca8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2caa:	4909      	ldr	r1, [pc, #36]	; (2cd0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2cac:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2cae:	684b      	ldr	r3, [r1, #4]
    2cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2cb4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2cb6:	2300      	movs	r3, #0
    2cb8:	f383 8811 	msr	BASEPRI, r3
    2cbc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2cc0:	6893      	ldr	r3, [r2, #8]
}
    2cc2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2cc4:	4770      	bx	lr
    2cc6:	bf00      	nop
    2cc8:	200011bc 	.word	0x200011bc
    2ccc:	0000a58c 	.word	0x0000a58c
    2cd0:	e000ed00 	.word	0xe000ed00

00002cd4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2cd4:	4912      	ldr	r1, [pc, #72]	; (2d20 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2cd6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2cd8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2cdc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2cde:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2ce2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ce6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2ce8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2cec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2cf0:	4f0c      	ldr	r7, [pc, #48]	; (2d24 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2cf2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2cf6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2cf8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2cfa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2cfc:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2cfe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2d00:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2d02:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2d06:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2d08:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2d0a:	f000 fbad 	bl	3468 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2d0e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2d12:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2d16:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2d1a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2d1e:	4770      	bx	lr
    ldr r1, =_kernel
    2d20:	200011bc 	.word	0x200011bc
    ldr v4, =_SCS_ICSR
    2d24:	e000ed04 	.word	0xe000ed04

00002d28 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2d28:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2d2c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2d2e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2d32:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2d36:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2d38:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2d3c:	2902      	cmp	r1, #2
    beq _oops
    2d3e:	d0ff      	beq.n	2d40 <_oops>

00002d40 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2d40:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2d42:	f006 fd3d 	bl	97c0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2d46:	bd01      	pop	{r0, pc}

00002d48 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2d48:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2d4c:	9b00      	ldr	r3, [sp, #0]
    2d4e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2d52:	490a      	ldr	r1, [pc, #40]	; (2d7c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2d54:	9b01      	ldr	r3, [sp, #4]
    2d56:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2d5a:	9b02      	ldr	r3, [sp, #8]
    2d5c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2d60:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2d64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2d68:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2d6c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2d70:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2d72:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2d74:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2d76:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2d78:	4770      	bx	lr
    2d7a:	bf00      	nop
    2d7c:	00009637 	.word	0x00009637

00002d80 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2d80:	4a0b      	ldr	r2, [pc, #44]	; (2db0 <z_check_thread_stack_fail+0x30>)
{
    2d82:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2d84:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2d86:	b190      	cbz	r0, 2dae <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2d88:	f113 0f16 	cmn.w	r3, #22
    2d8c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2d8e:	d005      	beq.n	2d9c <z_check_thread_stack_fail+0x1c>
    2d90:	f1a0 0220 	sub.w	r2, r0, #32
    2d94:	429a      	cmp	r2, r3
    2d96:	d806      	bhi.n	2da6 <z_check_thread_stack_fail+0x26>
    2d98:	4283      	cmp	r3, r0
    2d9a:	d204      	bcs.n	2da6 <z_check_thread_stack_fail+0x26>
    2d9c:	4281      	cmp	r1, r0
    2d9e:	bf2c      	ite	cs
    2da0:	2100      	movcs	r1, #0
    2da2:	2101      	movcc	r1, #1
    2da4:	e000      	b.n	2da8 <z_check_thread_stack_fail+0x28>
    2da6:	2100      	movs	r1, #0
    2da8:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2daa:	bf08      	it	eq
    2dac:	2000      	moveq	r0, #0
}
    2dae:	4770      	bx	lr
    2db0:	200011bc 	.word	0x200011bc

00002db4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2db4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2db6:	4b09      	ldr	r3, [pc, #36]	; (2ddc <arch_switch_to_main_thread+0x28>)
    2db8:	6098      	str	r0, [r3, #8]
{
    2dba:	460d      	mov	r5, r1
    2dbc:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2dbe:	f000 fb53 	bl	3468 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2dc2:	4620      	mov	r0, r4
    2dc4:	f385 8809 	msr	PSP, r5
    2dc8:	2100      	movs	r1, #0
    2dca:	b663      	cpsie	if
    2dcc:	f381 8811 	msr	BASEPRI, r1
    2dd0:	f3bf 8f6f 	isb	sy
    2dd4:	2200      	movs	r2, #0
    2dd6:	2300      	movs	r3, #0
    2dd8:	f006 fc2d 	bl	9636 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2ddc:	200011bc 	.word	0x200011bc

00002de0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2de0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2de2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2de4:	4a0b      	ldr	r2, [pc, #44]	; (2e14 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2de6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2de8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2dea:	bf1e      	ittt	ne
	movne	r1, #0
    2dec:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2dee:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2df0:	f007 f904 	blne	9ffc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2df4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2df6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2dfa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2dfe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2e02:	4905      	ldr	r1, [pc, #20]	; (2e18 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2e04:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2e06:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2e08:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2e0a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2e0e:	4903      	ldr	r1, [pc, #12]	; (2e1c <_isr_wrapper+0x3c>)
	bx r1
    2e10:	4708      	bx	r1
    2e12:	0000      	.short	0x0000
	ldr r2, =_kernel
    2e14:	200011bc 	.word	0x200011bc
	ldr r1, =_sw_isr_table
    2e18:	0000a1bc 	.word	0x0000a1bc
	ldr r1, =z_arm_int_exit
    2e1c:	00002e21 	.word	0x00002e21

00002e20 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2e20:	4b04      	ldr	r3, [pc, #16]	; (2e34 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2e22:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2e24:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2e26:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2e28:	d003      	beq.n	2e32 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2e2a:	4903      	ldr	r1, [pc, #12]	; (2e38 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2e30:	600a      	str	r2, [r1, #0]

00002e32 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2e32:	4770      	bx	lr
	ldr r3, =_kernel
    2e34:	200011bc 	.word	0x200011bc
	ldr r1, =_SCS_ICSR
    2e38:	e000ed04 	.word	0xe000ed04

00002e3c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e40:	4b3d      	ldr	r3, [pc, #244]	; (2f38 <mem_manage_fault+0xfc>)
    2e42:	4c3e      	ldr	r4, [pc, #248]	; (2f3c <mem_manage_fault+0x100>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2e44:	4d3e      	ldr	r5, [pc, #248]	; (2f40 <mem_manage_fault+0x104>)
    2e46:	1ae4      	subs	r4, r4, r3
    2e48:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    2e4a:	01a4      	lsls	r4, r4, #6
    2e4c:	f044 0901 	orr.w	r9, r4, #1
{
    2e50:	4607      	mov	r7, r0
    2e52:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2e54:	4648      	mov	r0, r9
    2e56:	493b      	ldr	r1, [pc, #236]	; (2f44 <mem_manage_fault+0x108>)
{
    2e58:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2e5a:	f006 fc6c 	bl	9736 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2e5e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2e60:	06d3      	lsls	r3, r2, #27
    2e62:	d503      	bpl.n	2e6c <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2e64:	4938      	ldr	r1, [pc, #224]	; (2f48 <mem_manage_fault+0x10c>)
    2e66:	4648      	mov	r0, r9
    2e68:	f006 fc65 	bl	9736 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2e6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e6e:	0718      	lsls	r0, r3, #28
    2e70:	d504      	bpl.n	2e7c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    2e72:	4936      	ldr	r1, [pc, #216]	; (2f4c <mem_manage_fault+0x110>)
    2e74:	f044 0001 	orr.w	r0, r4, #1
    2e78:	f006 fc5d 	bl	9736 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2e7c:	4d30      	ldr	r5, [pc, #192]	; (2f40 <mem_manage_fault+0x104>)
    2e7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e80:	0799      	lsls	r1, r3, #30
    2e82:	d424      	bmi.n	2ece <mem_manage_fault+0x92>
	uint32_t mmfar = -EINVAL;
    2e84:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2e88:	4d2d      	ldr	r5, [pc, #180]	; (2f40 <mem_manage_fault+0x104>)
    2e8a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2e8c:	07d3      	lsls	r3, r2, #31
    2e8e:	d504      	bpl.n	2e9a <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    2e90:	492f      	ldr	r1, [pc, #188]	; (2f50 <mem_manage_fault+0x114>)
    2e92:	f044 0001 	orr.w	r0, r4, #1
    2e96:	f006 fc4e 	bl	9736 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2e9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e9c:	069d      	lsls	r5, r3, #26
    2e9e:	d504      	bpl.n	2eaa <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    2ea0:	492c      	ldr	r1, [pc, #176]	; (2f54 <mem_manage_fault+0x118>)
    2ea2:	f044 0001 	orr.w	r0, r4, #1
    2ea6:	f006 fc46 	bl	9736 <log_string_sync>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2eaa:	4d25      	ldr	r5, [pc, #148]	; (2f40 <mem_manage_fault+0x104>)
    2eac:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2eae:	06d8      	lsls	r0, r3, #27
    2eb0:	d425      	bmi.n	2efe <mem_manage_fault+0xc2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2eb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2eb4:	0799      	lsls	r1, r3, #30
    2eb6:	d422      	bmi.n	2efe <mem_manage_fault+0xc2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2eb8:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2eba:	4a21      	ldr	r2, [pc, #132]	; (2f40 <mem_manage_fault+0x104>)
    2ebc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2ebe:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2ec2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2ec4:	2300      	movs	r3, #0
    2ec6:	7033      	strb	r3, [r6, #0]

	return reason;
}
    2ec8:	4620      	mov	r0, r4
    2eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2ece:	f044 0a01 	orr.w	sl, r4, #1
    2ed2:	4921      	ldr	r1, [pc, #132]	; (2f58 <mem_manage_fault+0x11c>)
    2ed4:	4650      	mov	r0, sl
    2ed6:	f006 fc2e 	bl	9736 <log_string_sync>
		uint32_t temp = SCB->MMFAR;
    2eda:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2ede:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2ee0:	061a      	lsls	r2, r3, #24
    2ee2:	d5cf      	bpl.n	2e84 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2ee4:	491d      	ldr	r1, [pc, #116]	; (2f5c <mem_manage_fault+0x120>)
    2ee6:	464a      	mov	r2, r9
    2ee8:	4650      	mov	r0, sl
    2eea:	f006 fc24 	bl	9736 <log_string_sync>
			if (from_hard_fault != 0) {
    2eee:	f1b8 0f00 	cmp.w	r8, #0
    2ef2:	d0c9      	beq.n	2e88 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2ef4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2efa:	62ab      	str	r3, [r5, #40]	; 0x28
    2efc:	e7c4      	b.n	2e88 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2efe:	686b      	ldr	r3, [r5, #4]
    2f00:	051a      	lsls	r2, r3, #20
    2f02:	d5d9      	bpl.n	2eb8 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2f04:	4639      	mov	r1, r7
    2f06:	4648      	mov	r0, r9
    2f08:	f7ff ff3a 	bl	2d80 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2f0c:	4604      	mov	r4, r0
    2f0e:	b118      	cbz	r0, 2f18 <mem_manage_fault+0xdc>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2f10:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2f14:	2402      	movs	r4, #2
    2f16:	e7d0      	b.n	2eba <mem_manage_fault+0x7e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    2f18:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f1a:	06db      	lsls	r3, r3, #27
    2f1c:	d5cc      	bpl.n	2eb8 <mem_manage_fault+0x7c>
    2f1e:	4910      	ldr	r1, [pc, #64]	; (2f60 <mem_manage_fault+0x124>)
    2f20:	4810      	ldr	r0, [pc, #64]	; (2f64 <mem_manage_fault+0x128>)
    2f22:	f240 1249 	movw	r2, #329	; 0x149
    2f26:	f006 fb25 	bl	9574 <printk>
    2f2a:	480d      	ldr	r0, [pc, #52]	; (2f60 <mem_manage_fault+0x124>)
    2f2c:	f240 1149 	movw	r1, #329	; 0x149
    2f30:	f006 fbec 	bl	970c <assert_post_action>
    2f34:	e7c1      	b.n	2eba <mem_manage_fault+0x7e>
    2f36:	bf00      	nop
    2f38:	0000a33c 	.word	0x0000a33c
    2f3c:	0000a374 	.word	0x0000a374
    2f40:	e000ed00 	.word	0xe000ed00
    2f44:	0000add8 	.word	0x0000add8
    2f48:	0000adee 	.word	0x0000adee
    2f4c:	0000ae21 	.word	0x0000ae21
    2f50:	0000ae62 	.word	0x0000ae62
    2f54:	0000ae81 	.word	0x0000ae81
    2f58:	0000ae34 	.word	0x0000ae34
    2f5c:	0000ae4c 	.word	0x0000ae4c
    2f60:	0000aeb0 	.word	0x0000aeb0
    2f64:	0000a66d 	.word	0x0000a66d

00002f68 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f6c:	4b29      	ldr	r3, [pc, #164]	; (3014 <bus_fault.isra.0+0xac>)
    2f6e:	4c2a      	ldr	r4, [pc, #168]	; (3018 <bus_fault.isra.0+0xb0>)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2f70:	4d2a      	ldr	r5, [pc, #168]	; (301c <bus_fault.isra.0+0xb4>)
    2f72:	1ae4      	subs	r4, r4, r3
    2f74:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    2f76:	01a4      	lsls	r4, r4, #6
    2f78:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2f7c:	4607      	mov	r7, r0
    2f7e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2f80:	4640      	mov	r0, r8
    2f82:	4927      	ldr	r1, [pc, #156]	; (3020 <bus_fault.isra.0+0xb8>)
    2f84:	f006 fbd7 	bl	9736 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2f88:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2f8a:	04d1      	lsls	r1, r2, #19
    2f8c:	d503      	bpl.n	2f96 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    2f8e:	4925      	ldr	r1, [pc, #148]	; (3024 <bus_fault.isra.0+0xbc>)
    2f90:	4640      	mov	r0, r8
    2f92:	f006 fbd0 	bl	9736 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2f96:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f98:	051a      	lsls	r2, r3, #20
    2f9a:	d504      	bpl.n	2fa6 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    2f9c:	4922      	ldr	r1, [pc, #136]	; (3028 <bus_fault.isra.0+0xc0>)
    2f9e:	f044 0001 	orr.w	r0, r4, #1
    2fa2:	f006 fbc8 	bl	9736 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2fa6:	4d1d      	ldr	r5, [pc, #116]	; (301c <bus_fault.isra.0+0xb4>)
    2fa8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2faa:	059b      	lsls	r3, r3, #22
    2fac:	d512      	bpl.n	2fd4 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    2fae:	f044 0801 	orr.w	r8, r4, #1
    2fb2:	4640      	mov	r0, r8
    2fb4:	491d      	ldr	r1, [pc, #116]	; (302c <bus_fault.isra.0+0xc4>)
    2fb6:	f006 fbbe 	bl	9736 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2fba:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2fbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fbe:	0418      	lsls	r0, r3, #16
    2fc0:	d508      	bpl.n	2fd4 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2fc2:	491b      	ldr	r1, [pc, #108]	; (3030 <bus_fault.isra.0+0xc8>)
    2fc4:	4640      	mov	r0, r8
    2fc6:	f006 fbb6 	bl	9736 <log_string_sync>
			if (from_hard_fault != 0) {
    2fca:	b11f      	cbz	r7, 2fd4 <bus_fault.isra.0+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2fcc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2fd2:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2fd4:	4d11      	ldr	r5, [pc, #68]	; (301c <bus_fault.isra.0+0xb4>)
    2fd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fd8:	0559      	lsls	r1, r3, #21
    2fda:	d504      	bpl.n	2fe6 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    2fdc:	4915      	ldr	r1, [pc, #84]	; (3034 <bus_fault.isra.0+0xcc>)
    2fde:	f044 0001 	orr.w	r0, r4, #1
    2fe2:	f006 fba8 	bl	9736 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2fe6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fe8:	05da      	lsls	r2, r3, #23
    2fea:	d50d      	bpl.n	3008 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    2fec:	4912      	ldr	r1, [pc, #72]	; (3038 <bus_fault.isra.0+0xd0>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2fee:	f044 0001 	orr.w	r0, r4, #1
    2ff2:	f006 fba0 	bl	9736 <log_string_sync>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2ff6:	4a09      	ldr	r2, [pc, #36]	; (301c <bus_fault.isra.0+0xb4>)
    2ff8:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2ffa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2ffc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3000:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3002:	7030      	strb	r0, [r6, #0]

	return reason;
}
    3004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3008:	6aab      	ldr	r3, [r5, #40]	; 0x28
    300a:	049b      	lsls	r3, r3, #18
    300c:	d5f3      	bpl.n	2ff6 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    300e:	490b      	ldr	r1, [pc, #44]	; (303c <bus_fault.isra.0+0xd4>)
    3010:	e7ed      	b.n	2fee <bus_fault.isra.0+0x86>
    3012:	bf00      	nop
    3014:	0000a33c 	.word	0x0000a33c
    3018:	0000a374 	.word	0x0000a374
    301c:	e000ed00 	.word	0xe000ed00
    3020:	0000aeea 	.word	0x0000aeea
    3024:	0000af00 	.word	0x0000af00
    3028:	0000ae21 	.word	0x0000ae21
    302c:	0000af11 	.word	0x0000af11
    3030:	0000af2a 	.word	0x0000af2a
    3034:	0000af3f 	.word	0x0000af3f
    3038:	0000af5a 	.word	0x0000af5a
    303c:	0000ae81 	.word	0x0000ae81

00003040 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3040:	b570      	push	{r4, r5, r6, lr}
    3042:	4b23      	ldr	r3, [pc, #140]	; (30d0 <usage_fault.isra.0+0x90>)
    3044:	4c23      	ldr	r4, [pc, #140]	; (30d4 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3046:	4d24      	ldr	r5, [pc, #144]	; (30d8 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    3048:	4924      	ldr	r1, [pc, #144]	; (30dc <usage_fault.isra.0+0x9c>)
    304a:	1ae4      	subs	r4, r4, r3
    304c:	08e4      	lsrs	r4, r4, #3
    304e:	01a4      	lsls	r4, r4, #6
    3050:	f044 0601 	orr.w	r6, r4, #1
    3054:	4630      	mov	r0, r6
    3056:	f006 fb6e 	bl	9736 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    305a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    305c:	0193      	lsls	r3, r2, #6
    305e:	d503      	bpl.n	3068 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    3060:	491f      	ldr	r1, [pc, #124]	; (30e0 <usage_fault.isra.0+0xa0>)
    3062:	4630      	mov	r0, r6
    3064:	f006 fb67 	bl	9736 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3068:	6aab      	ldr	r3, [r5, #40]	; 0x28
    306a:	01dd      	lsls	r5, r3, #7
    306c:	d504      	bpl.n	3078 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    306e:	491d      	ldr	r1, [pc, #116]	; (30e4 <usage_fault.isra.0+0xa4>)
    3070:	f044 0001 	orr.w	r0, r4, #1
    3074:	f006 fb5f 	bl	9736 <log_string_sync>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3078:	4d17      	ldr	r5, [pc, #92]	; (30d8 <usage_fault.isra.0+0x98>)
    307a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    307c:	0310      	lsls	r0, r2, #12
    307e:	d504      	bpl.n	308a <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    3080:	4919      	ldr	r1, [pc, #100]	; (30e8 <usage_fault.isra.0+0xa8>)
    3082:	f044 0001 	orr.w	r0, r4, #1
    3086:	f006 fb56 	bl	9736 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    308a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    308c:	0359      	lsls	r1, r3, #13
    308e:	d504      	bpl.n	309a <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3090:	4916      	ldr	r1, [pc, #88]	; (30ec <usage_fault.isra.0+0xac>)
    3092:	f044 0001 	orr.w	r0, r4, #1
    3096:	f006 fb4e 	bl	9736 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    309a:	4d0f      	ldr	r5, [pc, #60]	; (30d8 <usage_fault.isra.0+0x98>)
    309c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    309e:	0392      	lsls	r2, r2, #14
    30a0:	d504      	bpl.n	30ac <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    30a2:	4913      	ldr	r1, [pc, #76]	; (30f0 <usage_fault.isra.0+0xb0>)
    30a4:	f044 0001 	orr.w	r0, r4, #1
    30a8:	f006 fb45 	bl	9736 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    30ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
    30ae:	03db      	lsls	r3, r3, #15
    30b0:	d504      	bpl.n	30bc <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    30b2:	4910      	ldr	r1, [pc, #64]	; (30f4 <usage_fault.isra.0+0xb4>)
    30b4:	f044 0001 	orr.w	r0, r4, #1
    30b8:	f006 fb3d 	bl	9736 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    30bc:	4a06      	ldr	r2, [pc, #24]	; (30d8 <usage_fault.isra.0+0x98>)
    30be:	6a93      	ldr	r3, [r2, #40]	; 0x28
    30c0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    30c4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    30c8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    30ca:	2000      	movs	r0, #0
    30cc:	bd70      	pop	{r4, r5, r6, pc}
    30ce:	bf00      	nop
    30d0:	0000a33c 	.word	0x0000a33c
    30d4:	0000a374 	.word	0x0000a374
    30d8:	e000ed00 	.word	0xe000ed00
    30dc:	0000af72 	.word	0x0000af72
    30e0:	0000af8a 	.word	0x0000af8a
    30e4:	0000af9d 	.word	0x0000af9d
    30e8:	0000afb7 	.word	0x0000afb7
    30ec:	0000afd5 	.word	0x0000afd5
    30f0:	0000affa 	.word	0x0000affa
    30f4:	0000b014 	.word	0x0000b014

000030f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    30f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    30fc:	4b75      	ldr	r3, [pc, #468]	; (32d4 <z_arm_fault+0x1dc>)
    30fe:	685e      	ldr	r6, [r3, #4]
{
    3100:	b08a      	sub	sp, #40	; 0x28
    3102:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3104:	f3c6 0408 	ubfx	r4, r6, #0, #9
    3108:	2700      	movs	r7, #0
    310a:	f387 8811 	msr	BASEPRI, r7
    310e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3112:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3116:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    311a:	d10d      	bne.n	3138 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    311c:	f002 030c 	and.w	r3, r2, #12
    3120:	2b08      	cmp	r3, #8
    3122:	d116      	bne.n	3152 <z_arm_fault+0x5a>
    3124:	486c      	ldr	r0, [pc, #432]	; (32d8 <z_arm_fault+0x1e0>)
    3126:	4b6d      	ldr	r3, [pc, #436]	; (32dc <z_arm_fault+0x1e4>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3128:	496d      	ldr	r1, [pc, #436]	; (32e0 <z_arm_fault+0x1e8>)
    312a:	1ac0      	subs	r0, r0, r3
    312c:	08c0      	lsrs	r0, r0, #3
    312e:	0180      	lsls	r0, r0, #6
    3130:	f040 0001 	orr.w	r0, r0, #1
    3134:	f006 faff 	bl	9736 <log_string_sync>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    3138:	496a      	ldr	r1, [pc, #424]	; (32e4 <z_arm_fault+0x1ec>)
    313a:	486b      	ldr	r0, [pc, #428]	; (32e8 <z_arm_fault+0x1f0>)
    313c:	f240 32f2 	movw	r2, #1010	; 0x3f2
    3140:	f006 fa18 	bl	9574 <printk>
    3144:	4867      	ldr	r0, [pc, #412]	; (32e4 <z_arm_fault+0x1ec>)
    3146:	f240 31f2 	movw	r1, #1010	; 0x3f2
    314a:	f006 fadf 	bl	970c <assert_post_action>
    314e:	2500      	movs	r5, #0
    3150:	e005      	b.n	315e <z_arm_fault+0x66>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3152:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    3154:	bf5c      	itt	pl
    3156:	4605      	movpl	r5, r0
			*nested_exc = true;
    3158:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
    315a:	2d00      	cmp	r5, #0
    315c:	d0ec      	beq.n	3138 <z_arm_fault+0x40>
	*recoverable = false;
    315e:	2300      	movs	r3, #0
    3160:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    3164:	1ee3      	subs	r3, r4, #3
    3166:	2b09      	cmp	r3, #9
    3168:	f200 809b 	bhi.w	32a2 <z_arm_fault+0x1aa>
    316c:	e8df f003 	tbb	[pc, r3]
    3170:	708c8805 	.word	0x708c8805
    3174:	99999999 	.word	0x99999999
    3178:	9099      	.short	0x9099
    317a:	4b58      	ldr	r3, [pc, #352]	; (32dc <z_arm_fault+0x1e4>)
    317c:	4e56      	ldr	r6, [pc, #344]	; (32d8 <z_arm_fault+0x1e0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    317e:	495b      	ldr	r1, [pc, #364]	; (32ec <z_arm_fault+0x1f4>)
    3180:	1af6      	subs	r6, r6, r3
    3182:	08f6      	lsrs	r6, r6, #3
    3184:	01b6      	lsls	r6, r6, #6
    3186:	f046 0601 	orr.w	r6, r6, #1
    318a:	4630      	mov	r0, r6
    318c:	f006 fad3 	bl	9736 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3190:	4b50      	ldr	r3, [pc, #320]	; (32d4 <z_arm_fault+0x1dc>)
    3192:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    3194:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3198:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    319c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    31a0:	d005      	beq.n	31ae <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    31a2:	4953      	ldr	r1, [pc, #332]	; (32f0 <z_arm_fault+0x1f8>)
    31a4:	4630      	mov	r0, r6
	PR_FAULT_INFO(
    31a6:	f006 fac6 	bl	9736 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    31aa:	2400      	movs	r4, #0
}
    31ac:	e006      	b.n	31bc <z_arm_fault+0xc4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    31ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    31b0:	2a00      	cmp	r2, #0
    31b2:	da1d      	bge.n	31f0 <z_arm_fault+0xf8>
		PR_EXC("  Debug event");
    31b4:	494f      	ldr	r1, [pc, #316]	; (32f4 <z_arm_fault+0x1fc>)
    31b6:	4630      	mov	r0, r6
    31b8:	f006 fabd 	bl	9736 <log_string_sync>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    31bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    31c0:	b99b      	cbnz	r3, 31ea <z_arm_fault+0xf2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    31c2:	2220      	movs	r2, #32
    31c4:	4629      	mov	r1, r5
    31c6:	a802      	add	r0, sp, #8
    31c8:	f006 fb2f 	bl	982a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    31cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    31ce:	2f00      	cmp	r7, #0
    31d0:	d07b      	beq.n	32ca <z_arm_fault+0x1d2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    31d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    31d6:	b922      	cbnz	r2, 31e2 <z_arm_fault+0xea>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    31d8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    31dc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    31e0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    31e2:	a902      	add	r1, sp, #8
    31e4:	4620      	mov	r0, r4
    31e6:	f7ff fca9 	bl	2b3c <z_arm_fatal_error>
}
    31ea:	b00a      	add	sp, #40	; 0x28
    31ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    31f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    31f2:	005b      	lsls	r3, r3, #1
    31f4:	d53b      	bpl.n	326e <z_arm_fault+0x176>
		PR_EXC("  Fault escalation (see below)");
    31f6:	4940      	ldr	r1, [pc, #256]	; (32f8 <z_arm_fault+0x200>)
    31f8:	4630      	mov	r0, r6
    31fa:	f006 fa9c 	bl	9736 <log_string_sync>
	uint16_t fault_insn = *(ret_addr - 1);
    31fe:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3200:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    3204:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3208:	429a      	cmp	r2, r3
    320a:	d00d      	beq.n	3228 <z_arm_fault+0x130>
		} else if (SCB_MMFSR != 0) {
    320c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3210:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    3214:	781b      	ldrb	r3, [r3, #0]
    3216:	b173      	cbz	r3, 3236 <z_arm_fault+0x13e>
			reason = mem_manage_fault(esf, 1, recoverable);
    3218:	f10d 0207 	add.w	r2, sp, #7
    321c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    321e:	4628      	mov	r0, r5
    3220:	f7ff fe0c 	bl	2e3c <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    3224:	4604      	mov	r4, r0
		break;
    3226:	e7c9      	b.n	31bc <z_arm_fault+0xc4>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3228:	682a      	ldr	r2, [r5, #0]
    322a:	4934      	ldr	r1, [pc, #208]	; (32fc <z_arm_fault+0x204>)
    322c:	4630      	mov	r0, r6
    322e:	f006 fa82 	bl	9736 <log_string_sync>
			reason = esf->basic.r0;
    3232:	682c      	ldr	r4, [r5, #0]
    3234:	e7c2      	b.n	31bc <z_arm_fault+0xc4>
		} else if (SCB_BFSR != 0) {
    3236:	4b32      	ldr	r3, [pc, #200]	; (3300 <z_arm_fault+0x208>)
    3238:	781b      	ldrb	r3, [r3, #0]
    323a:	b12b      	cbz	r3, 3248 <z_arm_fault+0x150>
			reason = bus_fault(esf, 1, recoverable);
    323c:	f10d 0107 	add.w	r1, sp, #7
    3240:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3242:	f7ff fe91 	bl	2f68 <bus_fault.isra.0>
    3246:	e7ed      	b.n	3224 <z_arm_fault+0x12c>
		} else if (SCB_UFSR != 0) {
    3248:	4b2e      	ldr	r3, [pc, #184]	; (3304 <z_arm_fault+0x20c>)
    324a:	881b      	ldrh	r3, [r3, #0]
    324c:	b29b      	uxth	r3, r3
    324e:	b113      	cbz	r3, 3256 <z_arm_fault+0x15e>
		reason = usage_fault(esf);
    3250:	f7ff fef6 	bl	3040 <usage_fault.isra.0>
    3254:	e7e6      	b.n	3224 <z_arm_fault+0x12c>
			__ASSERT(0,
    3256:	4923      	ldr	r1, [pc, #140]	; (32e4 <z_arm_fault+0x1ec>)
    3258:	4823      	ldr	r0, [pc, #140]	; (32e8 <z_arm_fault+0x1f0>)
    325a:	f240 22c3 	movw	r2, #707	; 0x2c3
    325e:	f006 f989 	bl	9574 <printk>
    3262:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    3266:	481f      	ldr	r0, [pc, #124]	; (32e4 <z_arm_fault+0x1ec>)
    3268:	f006 fa50 	bl	970c <assert_post_action>
    326c:	e7a6      	b.n	31bc <z_arm_fault+0xc4>
    326e:	491d      	ldr	r1, [pc, #116]	; (32e4 <z_arm_fault+0x1ec>)
    3270:	481d      	ldr	r0, [pc, #116]	; (32e8 <z_arm_fault+0x1f0>)
    3272:	f240 22c7 	movw	r2, #711	; 0x2c7
    3276:	f006 f97d 	bl	9574 <printk>
    327a:	f240 21c7 	movw	r1, #711	; 0x2c7
    327e:	e7f2      	b.n	3266 <z_arm_fault+0x16e>
		reason = mem_manage_fault(esf, 0, recoverable);
    3280:	f10d 0207 	add.w	r2, sp, #7
    3284:	2100      	movs	r1, #0
    3286:	e7ca      	b.n	321e <z_arm_fault+0x126>
		reason = bus_fault(esf, 0, recoverable);
    3288:	f10d 0107 	add.w	r1, sp, #7
    328c:	2000      	movs	r0, #0
    328e:	e7d8      	b.n	3242 <z_arm_fault+0x14a>
    3290:	4811      	ldr	r0, [pc, #68]	; (32d8 <z_arm_fault+0x1e0>)
    3292:	4b12      	ldr	r3, [pc, #72]	; (32dc <z_arm_fault+0x1e4>)
	PR_FAULT_INFO(
    3294:	491c      	ldr	r1, [pc, #112]	; (3308 <z_arm_fault+0x210>)
    3296:	1ac0      	subs	r0, r0, r3
    3298:	08c0      	lsrs	r0, r0, #3
    329a:	0180      	lsls	r0, r0, #6
    329c:	f040 0001 	orr.w	r0, r0, #1
    32a0:	e781      	b.n	31a6 <z_arm_fault+0xae>
    32a2:	4b0e      	ldr	r3, [pc, #56]	; (32dc <z_arm_fault+0x1e4>)
    32a4:	480c      	ldr	r0, [pc, #48]	; (32d8 <z_arm_fault+0x1e0>)
	PR_FAULT_INFO("***** %s %d) *****",
    32a6:	4919      	ldr	r1, [pc, #100]	; (330c <z_arm_fault+0x214>)
    32a8:	4a19      	ldr	r2, [pc, #100]	; (3310 <z_arm_fault+0x218>)
    32aa:	1ac0      	subs	r0, r0, r3
    32ac:	08c0      	lsrs	r0, r0, #3
    32ae:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    32b2:	ea4f 1080 	mov.w	r0, r0, lsl #6
    32b6:	bf08      	it	eq
    32b8:	460a      	moveq	r2, r1
    32ba:	f1a4 0310 	sub.w	r3, r4, #16
    32be:	4915      	ldr	r1, [pc, #84]	; (3314 <z_arm_fault+0x21c>)
    32c0:	f040 0001 	orr.w	r0, r0, #1
    32c4:	f006 fa37 	bl	9736 <log_string_sync>
    32c8:	e76f      	b.n	31aa <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    32ca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    32ce:	f023 0301 	bic.w	r3, r3, #1
    32d2:	e785      	b.n	31e0 <z_arm_fault+0xe8>
    32d4:	e000ed00 	.word	0xe000ed00
    32d8:	0000a374 	.word	0x0000a374
    32dc:	0000a33c 	.word	0x0000a33c
    32e0:	0000b06d 	.word	0x0000b06d
    32e4:	0000aeb0 	.word	0x0000aeb0
    32e8:	0000a66d 	.word	0x0000a66d
    32ec:	0000b098 	.word	0x0000b098
    32f0:	0000b0af 	.word	0x0000b0af
    32f4:	0000b0d0 	.word	0x0000b0d0
    32f8:	0000b0de 	.word	0x0000b0de
    32fc:	0000b0fd 	.word	0x0000b0fd
    3300:	e000ed29 	.word	0xe000ed29
    3304:	e000ed2a 	.word	0xe000ed2a
    3308:	0000b119 	.word	0x0000b119
    330c:	0000b03f 	.word	0x0000b03f
    3310:	0000b054 	.word	0x0000b054
    3314:	0000b13d 	.word	0x0000b13d

00003318 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3318:	4a02      	ldr	r2, [pc, #8]	; (3324 <z_arm_fault_init+0xc>)
    331a:	6953      	ldr	r3, [r2, #20]
    331c:	f043 0310 	orr.w	r3, r3, #16
    3320:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3322:	4770      	bx	lr
    3324:	e000ed00 	.word	0xe000ed00

00003328 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3328:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    332c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3330:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3332:	4672      	mov	r2, lr
	bl z_arm_fault
    3334:	f7ff fee0 	bl	30f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3338:	bd01      	pop	{r0, pc}
    333a:	bf00      	nop

0000333c <z_arm_interrupt_init>:
    333c:	4804      	ldr	r0, [pc, #16]	; (3350 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    333e:	2300      	movs	r3, #0
    3340:	2120      	movs	r1, #32
    3342:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3344:	3301      	adds	r3, #1
    3346:	2b30      	cmp	r3, #48	; 0x30
    3348:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    334c:	d1f9      	bne.n	3342 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    334e:	4770      	bx	lr
    3350:	e000e100 	.word	0xe000e100

00003354 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3354:	2000      	movs	r0, #0
    msr CONTROL, r0
    3356:	f380 8814 	msr	CONTROL, r0
    isb
    335a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    335e:	f006 fec3 	bl	a0e8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3362:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3364:	490d      	ldr	r1, [pc, #52]	; (339c <__start+0x48>)
    str r0, [r1]
    3366:	6008      	str	r0, [r1, #0]
    dsb
    3368:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    336c:	480c      	ldr	r0, [pc, #48]	; (33a0 <__start+0x4c>)
    msr msp, r0
    336e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3372:	f000 f829 	bl	33c8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3376:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3378:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    337c:	4809      	ldr	r0, [pc, #36]	; (33a4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    337e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3382:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3384:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3388:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    338c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    338e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3390:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3394:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3398:	f7ff fc66 	bl	2c68 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    339c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    33a0:	20002820 	.word	0x20002820
    ldr r0, =z_interrupt_stacks
    33a4:	200029a0 	.word	0x200029a0

000033a8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    33a8:	4a06      	ldr	r2, [pc, #24]	; (33c4 <z_arm_clear_arm_mpu_config+0x1c>)
    33aa:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    33ac:	2300      	movs	r3, #0
	int num_regions =
    33ae:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    33b2:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    33b4:	428b      	cmp	r3, r1
    33b6:	d100      	bne.n	33ba <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    33b8:	4770      	bx	lr
  MPU->RNR = rnr;
    33ba:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    33bc:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    33be:	3301      	adds	r3, #1
    33c0:	e7f8      	b.n	33b4 <z_arm_clear_arm_mpu_config+0xc>
    33c2:	bf00      	nop
    33c4:	e000ed90 	.word	0xe000ed90

000033c8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    33c8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    33ca:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    33cc:	2300      	movs	r3, #0
    33ce:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    33d2:	f7ff ffe9 	bl	33a8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    33d6:	4b14      	ldr	r3, [pc, #80]	; (3428 <z_arm_init_arch_hw_at_boot+0x60>)
    33d8:	f04f 32ff 	mov.w	r2, #4294967295
    33dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    33e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    33e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    33e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    33ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    33f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    33f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    33f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    33fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3400:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3404:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3408:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    340c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3410:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3414:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3418:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    341c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    341e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3422:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3426:	bd08      	pop	{r3, pc}
    3428:	e000e100 	.word	0xe000e100

0000342c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    342c:	4b06      	ldr	r3, [pc, #24]	; (3448 <z_impl_k_thread_abort+0x1c>)
    342e:	689b      	ldr	r3, [r3, #8]
    3430:	4283      	cmp	r3, r0
    3432:	d107      	bne.n	3444 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3434:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3438:	b123      	cbz	r3, 3444 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    343a:	4a04      	ldr	r2, [pc, #16]	; (344c <z_impl_k_thread_abort+0x20>)
    343c:	6853      	ldr	r3, [r2, #4]
    343e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3442:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3444:	f005 b9c0 	b.w	87c8 <z_thread_abort>
    3448:	200011bc 	.word	0x200011bc
    344c:	e000ed00 	.word	0xe000ed00

00003450 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3450:	4b02      	ldr	r3, [pc, #8]	; (345c <z_arm_configure_static_mpu_regions+0xc>)
    3452:	4a03      	ldr	r2, [pc, #12]	; (3460 <z_arm_configure_static_mpu_regions+0x10>)
    3454:	4803      	ldr	r0, [pc, #12]	; (3464 <z_arm_configure_static_mpu_regions+0x14>)
    3456:	2101      	movs	r1, #1
    3458:	f000 b882 	b.w	3560 <arm_core_mpu_configure_static_mpu_regions>
    345c:	20040000 	.word	0x20040000
    3460:	20000000 	.word	0x20000000
    3464:	0000a458 	.word	0x0000a458

00003468 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3468:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    346a:	4b05      	ldr	r3, [pc, #20]	; (3480 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    346c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    346e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3470:	4a04      	ldr	r2, [pc, #16]	; (3484 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3472:	2120      	movs	r1, #32
    3474:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3478:	4618      	mov	r0, r3
    347a:	2101      	movs	r1, #1
    347c:	f000 b88e 	b.w	359c <arm_core_mpu_configure_dynamic_mpu_regions>
    3480:	20001008 	.word	0x20001008
    3484:	150b0000 	.word	0x150b0000

00003488 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    348a:	4f27      	ldr	r7, [pc, #156]	; (3528 <mpu_configure_regions+0xa0>)
	int i;
	int reg_index = start_reg_index;
    348c:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    348e:	2200      	movs	r2, #0
    3490:	428a      	cmp	r2, r1
    3492:	da14      	bge.n	34be <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    3494:	6844      	ldr	r4, [r0, #4]
    3496:	2c00      	cmp	r4, #0
    3498:	d043      	beq.n	3522 <mpu_configure_regions+0x9a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    349a:	b1c3      	cbz	r3, 34ce <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    349c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    34a0:	ea14 0f0c 	tst.w	r4, ip
    34a4:	d00d      	beq.n	34c2 <mpu_configure_regions+0x3a>
    34a6:	4821      	ldr	r0, [pc, #132]	; (352c <mpu_configure_regions+0xa4>)
    34a8:	4b21      	ldr	r3, [pc, #132]	; (3530 <mpu_configure_regions+0xa8>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    34aa:	4922      	ldr	r1, [pc, #136]	; (3534 <mpu_configure_regions+0xac>)
    34ac:	1ac0      	subs	r0, r0, r3
    34ae:	08c0      	lsrs	r0, r0, #3
    34b0:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    34b2:	f040 0001 	orr.w	r0, r0, #1
    34b6:	f006 f93e 	bl	9736 <log_string_sync>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    34ba:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    34be:	4628      	mov	r0, r5
    34c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    34c2:	2c1f      	cmp	r4, #31
    34c4:	d9ef      	bls.n	34a6 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    34c6:	6806      	ldr	r6, [r0, #0]
		&&
    34c8:	ea1c 0f06 	tst.w	ip, r6
    34cc:	d1eb      	bne.n	34a6 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    34ce:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    34d0:	6806      	ldr	r6, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    34d2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    34d6:	b2ed      	uxtb	r5, r5
    34d8:	d914      	bls.n	3504 <mpu_configure_regions+0x7c>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    34da:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    34de:	d813      	bhi.n	3508 <mpu_configure_regions+0x80>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    34e0:	3c01      	subs	r4, #1
    34e2:	fab4 f484 	clz	r4, r4
    34e6:	f1c4 041f 	rsb	r4, r4, #31
    34ea:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    34ec:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    34ee:	ea4c 0404 	orr.w	r4, ip, r4
    34f2:	d90b      	bls.n	350c <mpu_configure_regions+0x84>
    34f4:	480d      	ldr	r0, [pc, #52]	; (352c <mpu_configure_regions+0xa4>)
    34f6:	4b0e      	ldr	r3, [pc, #56]	; (3530 <mpu_configure_regions+0xa8>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    34f8:	490f      	ldr	r1, [pc, #60]	; (3538 <mpu_configure_regions+0xb0>)
    34fa:	1ac0      	subs	r0, r0, r3
    34fc:	08c0      	lsrs	r0, r0, #3
    34fe:	0180      	lsls	r0, r0, #6
    3500:	462a      	mov	r2, r5
    3502:	e7d6      	b.n	34b2 <mpu_configure_regions+0x2a>
		return REGION_32B;
    3504:	2408      	movs	r4, #8
    3506:	e7f1      	b.n	34ec <mpu_configure_regions+0x64>
		return REGION_4G;
    3508:	243e      	movs	r4, #62	; 0x3e
    350a:	e7ef      	b.n	34ec <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    350c:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    3510:	432e      	orrs	r6, r5
    3512:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3516:	f044 0401 	orr.w	r4, r4, #1
    351a:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    351c:	60fe      	str	r6, [r7, #12]
		reg_index++;
    351e:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3520:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    3522:	3201      	adds	r2, #1
    3524:	300c      	adds	r0, #12
    3526:	e7b3      	b.n	3490 <mpu_configure_regions+0x8>
    3528:	e000ed90 	.word	0xe000ed90
    352c:	0000a36c 	.word	0x0000a36c
    3530:	0000a33c 	.word	0x0000a33c
    3534:	0000b154 	.word	0x0000b154
    3538:	0000b177 	.word	0x0000b177

0000353c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    353c:	4b03      	ldr	r3, [pc, #12]	; (354c <arm_core_mpu_enable+0x10>)
    353e:	2205      	movs	r2, #5
    3540:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    3542:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3546:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    354a:	4770      	bx	lr
    354c:	e000ed90 	.word	0xe000ed90

00003550 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3550:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3554:	4b01      	ldr	r3, [pc, #4]	; (355c <arm_core_mpu_disable+0xc>)
    3556:	2200      	movs	r2, #0
    3558:	605a      	str	r2, [r3, #4]
}
    355a:	4770      	bx	lr
    355c:	e000ed90 	.word	0xe000ed90

00003560 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3560:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3562:	4c0b      	ldr	r4, [pc, #44]	; (3590 <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3564:	2301      	movs	r3, #1
    3566:	7822      	ldrb	r2, [r4, #0]
    3568:	f7ff ff8e 	bl	3488 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    356c:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    356e:	3016      	adds	r0, #22
    3570:	d10c      	bne.n	358c <arm_core_mpu_configure_static_mpu_regions+0x2c>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3572:	4908      	ldr	r1, [pc, #32]	; (3594 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    3574:	4808      	ldr	r0, [pc, #32]	; (3598 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    3576:	f240 1211 	movw	r2, #273	; 0x111
    357a:	f005 fffb 	bl	9574 <printk>
			regions_num);
	}
}
    357e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3582:	4804      	ldr	r0, [pc, #16]	; (3594 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    3584:	f240 1111 	movw	r1, #273	; 0x111
    3588:	f006 b8c0 	b.w	970c <assert_post_action>
}
    358c:	bd10      	pop	{r4, pc}
    358e:	bf00      	nop
    3590:	20001236 	.word	0x20001236
    3594:	0000b19d 	.word	0x0000b19d
    3598:	0000a66d 	.word	0x0000a66d

0000359c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    359c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    359e:	4a0f      	ldr	r2, [pc, #60]	; (35dc <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    35a0:	2300      	movs	r3, #0
    35a2:	7812      	ldrb	r2, [r2, #0]
    35a4:	f7ff ff70 	bl	3488 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    35a8:	f110 0f16 	cmn.w	r0, #22
    35ac:	d008      	beq.n	35c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    35ae:	4b0c      	ldr	r3, [pc, #48]	; (35e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
    35b0:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    35b2:	2807      	cmp	r0, #7
    35b4:	dd00      	ble.n	35b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    35b6:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    35b8:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    35ba:	611a      	str	r2, [r3, #16]
    35bc:	3001      	adds	r0, #1
    35be:	e7f8      	b.n	35b2 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    35c0:	4908      	ldr	r1, [pc, #32]	; (35e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
    35c2:	4809      	ldr	r0, [pc, #36]	; (35e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    35c4:	f44f 7298 	mov.w	r2, #304	; 0x130
    35c8:	f005 ffd4 	bl	9574 <printk>
}
    35cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    35d0:	4804      	ldr	r0, [pc, #16]	; (35e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
    35d2:	f44f 7198 	mov.w	r1, #304	; 0x130
    35d6:	f006 b899 	b.w	970c <assert_post_action>
    35da:	bf00      	nop
    35dc:	20001236 	.word	0x20001236
    35e0:	e000ed90 	.word	0xe000ed90
    35e4:	0000b19d 	.word	0x0000b19d
    35e8:	0000a66d 	.word	0x0000a66d

000035ec <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    35ec:	4920      	ldr	r1, [pc, #128]	; (3670 <z_arm_mpu_init+0x84>)
{
    35ee:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    35f0:	680c      	ldr	r4, [r1, #0]
    35f2:	2c08      	cmp	r4, #8
    35f4:	d90d      	bls.n	3612 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    35f6:	491f      	ldr	r1, [pc, #124]	; (3674 <z_arm_mpu_init+0x88>)
    35f8:	481f      	ldr	r0, [pc, #124]	; (3678 <z_arm_mpu_init+0x8c>)
    35fa:	f44f 72a4 	mov.w	r2, #328	; 0x148
    35fe:	f005 ffb9 	bl	9574 <printk>
    3602:	481c      	ldr	r0, [pc, #112]	; (3674 <z_arm_mpu_init+0x88>)
    3604:	f44f 71a4 	mov.w	r1, #328	; 0x148
    3608:	f006 f880 	bl	970c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    360c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    3610:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    3612:	f7ff ff9d 	bl	3550 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3616:	6848      	ldr	r0, [r1, #4]
    3618:	4918      	ldr	r1, [pc, #96]	; (367c <z_arm_mpu_init+0x90>)
    361a:	2200      	movs	r2, #0
    361c:	4294      	cmp	r4, r2
    361e:	f100 000c 	add.w	r0, r0, #12
    3622:	d115      	bne.n	3650 <z_arm_mpu_init+0x64>
	static_regions_num = mpu_config.num_regions;
    3624:	4b16      	ldr	r3, [pc, #88]	; (3680 <z_arm_mpu_init+0x94>)
    3626:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    3628:	f7ff ff88 	bl	353c <arm_core_mpu_enable>
	__ASSERT(
    362c:	680b      	ldr	r3, [r1, #0]
    362e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3632:	2b08      	cmp	r3, #8
    3634:	d00a      	beq.n	364c <z_arm_mpu_init+0x60>
    3636:	490f      	ldr	r1, [pc, #60]	; (3674 <z_arm_mpu_init+0x88>)
    3638:	480f      	ldr	r0, [pc, #60]	; (3678 <z_arm_mpu_init+0x8c>)
    363a:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
    363e:	f005 ff99 	bl	9574 <printk>
    3642:	480c      	ldr	r0, [pc, #48]	; (3674 <z_arm_mpu_init+0x88>)
    3644:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    3648:	f006 f860 	bl	970c <assert_post_action>
	return 0;
    364c:	2000      	movs	r0, #0
    364e:	e7df      	b.n	3610 <z_arm_mpu_init+0x24>
    3650:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3652:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    3656:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    365a:	4313      	orrs	r3, r2
    365c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3660:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3662:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3666:	f043 0301 	orr.w	r3, r3, #1
    366a:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    366c:	3201      	adds	r2, #1
    366e:	e7d5      	b.n	361c <z_arm_mpu_init+0x30>
    3670:	0000a464 	.word	0x0000a464
    3674:	0000b19d 	.word	0x0000b19d
    3678:	0000a66d 	.word	0x0000a66d
    367c:	e000ed90 	.word	0xe000ed90
    3680:	20001236 	.word	0x20001236

00003684 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3684:	4b01      	ldr	r3, [pc, #4]	; (368c <__stdout_hook_install+0x8>)
    3686:	6018      	str	r0, [r3, #0]
}
    3688:	4770      	bx	lr
    368a:	bf00      	nop
    368c:	20000100 	.word	0x20000100

00003690 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3690:	f04f 0320 	mov.w	r3, #32
    3694:	f3ef 8111 	mrs	r1, BASEPRI
    3698:	f383 8812 	msr	BASEPRI_MAX, r3
    369c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    36a0:	4a0f      	ldr	r2, [pc, #60]	; (36e0 <nordicsemi_nrf52_init+0x50>)
    36a2:	2301      	movs	r3, #1
    36a4:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    36a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    36ac:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    36b0:	4a0c      	ldr	r2, [pc, #48]	; (36e4 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    36b2:	6812      	ldr	r2, [r2, #0]
    36b4:	2a08      	cmp	r2, #8
    36b6:	d108      	bne.n	36ca <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    36b8:	4a0b      	ldr	r2, [pc, #44]	; (36e8 <nordicsemi_nrf52_init+0x58>)
    36ba:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    36bc:	2a05      	cmp	r2, #5
    36be:	d804      	bhi.n	36ca <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    36c0:	480a      	ldr	r0, [pc, #40]	; (36ec <nordicsemi_nrf52_init+0x5c>)
    36c2:	5c82      	ldrb	r2, [r0, r2]
    36c4:	b10a      	cbz	r2, 36ca <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    36c6:	4a0a      	ldr	r2, [pc, #40]	; (36f0 <nordicsemi_nrf52_init+0x60>)
    36c8:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    36ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36ce:	2201      	movs	r2, #1
    36d0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    36d4:	f381 8811 	msr	BASEPRI, r1
    36d8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    36dc:	2000      	movs	r0, #0
    36de:	4770      	bx	lr
    36e0:	4001e000 	.word	0x4001e000
    36e4:	10000130 	.word	0x10000130
    36e8:	10000134 	.word	0x10000134
    36ec:	0000b1e7 	.word	0x0000b1e7
    36f0:	40000638 	.word	0x40000638

000036f4 <sys_arch_reboot>:
    *p_gpregret = val;
    36f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36f8:	b2c0      	uxtb	r0, r0
    36fa:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    36fe:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3702:	4905      	ldr	r1, [pc, #20]	; (3718 <sys_arch_reboot+0x24>)
    3704:	4b05      	ldr	r3, [pc, #20]	; (371c <sys_arch_reboot+0x28>)
    3706:	68ca      	ldr	r2, [r1, #12]
    3708:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    370c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    370e:	60cb      	str	r3, [r1, #12]
    3710:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3714:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3716:	e7fd      	b.n	3714 <sys_arch_reboot+0x20>
    3718:	e000ed00 	.word	0xe000ed00
    371c:	05fa0004 	.word	0x05fa0004

00003720 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3720:	b120      	cbz	r0, 372c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    3722:	4b03      	ldr	r3, [pc, #12]	; (3730 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3724:	0180      	lsls	r0, r0, #6
    3726:	f043 0301 	orr.w	r3, r3, #1
    372a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    372c:	4770      	bx	lr
    372e:	bf00      	nop
    3730:	0000a3d0 	.word	0x0000a3d0

00003734 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3738:	4c0e      	ldr	r4, [pc, #56]	; (3774 <onoff_start+0x40>)
    373a:	1b05      	subs	r5, r0, r4
    373c:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    3740:	250c      	movs	r5, #12
    3742:	435d      	muls	r5, r3
{
    3744:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    3746:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    374a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    374c:	4420      	add	r0, r4
    374e:	2140      	movs	r1, #64	; 0x40
    3750:	f006 f8a0 	bl	9894 <set_starting_state>
	if (err < 0) {
    3754:	1e01      	subs	r1, r0, #0
    3756:	db08      	blt.n	376a <onoff_start+0x36>
	subdata->cb = cb;
    3758:	4b07      	ldr	r3, [pc, #28]	; (3778 <onoff_start+0x44>)
    375a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    375c:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    3760:	4b06      	ldr	r3, [pc, #24]	; (377c <onoff_start+0x48>)
    3762:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    3764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    3768:	4718      	bx	r3
		notify(mgr, err);
    376a:	4638      	mov	r0, r7
    376c:	4633      	mov	r3, r6
}
    376e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    3772:	4718      	bx	r3
    3774:	20001024 	.word	0x20001024
    3778:	000098f7 	.word	0x000098f7
    377c:	0000a49c 	.word	0x0000a49c

00003780 <get_status>:
{
    3780:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3782:	b2cc      	uxtb	r4, r1
    3784:	2c01      	cmp	r4, #1
{
    3786:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3788:	d908      	bls.n	379c <get_status+0x1c>
    378a:	4908      	ldr	r1, [pc, #32]	; (37ac <get_status+0x2c>)
    378c:	4808      	ldr	r0, [pc, #32]	; (37b0 <get_status+0x30>)
    378e:	2279      	movs	r2, #121	; 0x79
    3790:	f005 fef0 	bl	9574 <printk>
    3794:	4805      	ldr	r0, [pc, #20]	; (37ac <get_status+0x2c>)
    3796:	2179      	movs	r1, #121	; 0x79
    3798:	f005 ffb8 	bl	970c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    379c:	692b      	ldr	r3, [r5, #16]
    379e:	210c      	movs	r1, #12
    37a0:	fb04 3401 	mla	r4, r4, r1, r3
    37a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    37a6:	f000 0007 	and.w	r0, r0, #7
    37aa:	bd38      	pop	{r3, r4, r5, pc}
    37ac:	0000b1ed 	.word	0x0000b1ed
    37b0:	0000a66d 	.word	0x0000a66d

000037b4 <stop>:
{
    37b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37b6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    37b8:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    37ba:	6907      	ldr	r7, [r0, #16]
{
    37bc:	4605      	mov	r5, r0
    37be:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    37c0:	d90a      	bls.n	37d8 <stop+0x24>
    37c2:	4918      	ldr	r1, [pc, #96]	; (3824 <stop+0x70>)
    37c4:	4818      	ldr	r0, [pc, #96]	; (3828 <stop+0x74>)
    37c6:	f240 124d 	movw	r2, #333	; 0x14d
    37ca:	f005 fed3 	bl	9574 <printk>
    37ce:	4815      	ldr	r0, [pc, #84]	; (3824 <stop+0x70>)
    37d0:	f240 114d 	movw	r1, #333	; 0x14d
    37d4:	f005 ff9a 	bl	970c <assert_post_action>
	__asm__ volatile(
    37d8:	f04f 0320 	mov.w	r3, #32
    37dc:	f3ef 8211 	mrs	r2, BASEPRI
    37e0:	f383 8812 	msr	BASEPRI_MAX, r3
    37e4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    37e8:	230c      	movs	r3, #12
    37ea:	fb03 7104 	mla	r1, r3, r4, r7
    37ee:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    37f0:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    37f4:	d001      	beq.n	37fa <stop+0x46>
    37f6:	428e      	cmp	r6, r1
    37f8:	d111      	bne.n	381e <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    37fa:	fb03 7304 	mla	r3, r3, r4, r7
    37fe:	2101      	movs	r1, #1
    3800:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    3802:	2000      	movs	r0, #0
	__asm__ volatile(
    3804:	f382 8811 	msr	BASEPRI, r2
    3808:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    380c:	b930      	cbnz	r0, 381c <stop+0x68>
	get_sub_config(dev, type)->stop();
    380e:	6869      	ldr	r1, [r5, #4]
    3810:	230c      	movs	r3, #12
    3812:	fb03 1404 	mla	r4, r3, r4, r1
    3816:	6863      	ldr	r3, [r4, #4]
    3818:	4798      	blx	r3
	return 0;
    381a:	2000      	movs	r0, #0
}
    381c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    381e:	f04f 30ff 	mov.w	r0, #4294967295
    3822:	e7ef      	b.n	3804 <stop+0x50>
    3824:	0000b1ed 	.word	0x0000b1ed
    3828:	0000a66d 	.word	0x0000a66d

0000382c <onoff_stop>:
{
    382c:	b570      	push	{r4, r5, r6, lr}
    382e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3830:	4906      	ldr	r1, [pc, #24]	; (384c <onoff_stop+0x20>)
    3832:	1a41      	subs	r1, r0, r1
{
    3834:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3836:	1149      	asrs	r1, r1, #5
    3838:	4805      	ldr	r0, [pc, #20]	; (3850 <onoff_stop+0x24>)
    383a:	2240      	movs	r2, #64	; 0x40
    383c:	f7ff ffba 	bl	37b4 <stop>
	notify(mgr, res);
    3840:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3842:	4601      	mov	r1, r0
	notify(mgr, res);
    3844:	4620      	mov	r0, r4
}
    3846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    384a:	4718      	bx	r3
    384c:	20001024 	.word	0x20001024
    3850:	0000a15c 	.word	0x0000a15c

00003854 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3854:	2200      	movs	r2, #0
{
    3856:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3858:	2101      	movs	r1, #1
{
    385a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    385c:	4610      	mov	r0, r2
    385e:	f7ff f9d7 	bl	2c10 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    3862:	2000      	movs	r0, #0
    3864:	f7ff f9a2 	bl	2bac <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3868:	480f      	ldr	r0, [pc, #60]	; (38a8 <clk_init+0x54>)
    386a:	f001 ffbb 	bl	57e4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    386e:	4b0f      	ldr	r3, [pc, #60]	; (38ac <clk_init+0x58>)
    3870:	4298      	cmp	r0, r3
    3872:	d115      	bne.n	38a0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3874:	f001 ffd6 	bl	5824 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3878:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    387a:	490d      	ldr	r1, [pc, #52]	; (38b0 <clk_init+0x5c>)
    387c:	4630      	mov	r0, r6
    387e:	f005 fec7 	bl	9610 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3882:	2800      	cmp	r0, #0
    3884:	db0b      	blt.n	389e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3886:	2501      	movs	r5, #1
    3888:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    388a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    388c:	4908      	ldr	r1, [pc, #32]	; (38b0 <clk_init+0x5c>)
    388e:	f104 0020 	add.w	r0, r4, #32
    3892:	f005 febd 	bl	9610 <onoff_manager_init>
		if (err < 0) {
    3896:	2800      	cmp	r0, #0
    3898:	db01      	blt.n	389e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    389a:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    389c:	2000      	movs	r0, #0
}
    389e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    38a0:	f06f 0004 	mvn.w	r0, #4
    38a4:	e7fb      	b.n	389e <clk_init+0x4a>
    38a6:	bf00      	nop
    38a8:	000038e9 	.word	0x000038e9
    38ac:	0bad0000 	.word	0x0bad0000
    38b0:	0000a4b4 	.word	0x0000a4b4

000038b4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    38b4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    38b6:	230c      	movs	r3, #12
    38b8:	4809      	ldr	r0, [pc, #36]	; (38e0 <clkstarted_handle.constprop.0+0x2c>)
    38ba:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    38bc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    38be:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    38c0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    38c4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    38c6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    38c8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    38ca:	4418      	add	r0, r3
    38cc:	f006 f800 	bl	98d0 <set_on_state>
	if (callback) {
    38d0:	b12d      	cbz	r5, 38de <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    38d2:	4632      	mov	r2, r6
    38d4:	462b      	mov	r3, r5
    38d6:	4803      	ldr	r0, [pc, #12]	; (38e4 <clkstarted_handle.constprop.0+0x30>)
}
    38d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    38dc:	4718      	bx	r3
}
    38de:	bd70      	pop	{r4, r5, r6, pc}
    38e0:	20001024 	.word	0x20001024
    38e4:	0000a15c 	.word	0x0000a15c

000038e8 <clock_event_handler>:
	switch (event) {
    38e8:	2801      	cmp	r0, #1
{
    38ea:	b508      	push	{r3, lr}
	switch (event) {
    38ec:	d006      	beq.n	38fc <clock_event_handler+0x14>
    38ee:	2803      	cmp	r0, #3
    38f0:	d008      	beq.n	3904 <clock_event_handler+0x1c>
    38f2:	b9a0      	cbnz	r0, 391e <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    38f4:	4b0f      	ldr	r3, [pc, #60]	; (3934 <clock_event_handler+0x4c>)
    38f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    38f8:	075b      	lsls	r3, r3, #29
    38fa:	d119      	bne.n	3930 <clock_event_handler+0x48>
}
    38fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3900:	f7ff bfd8 	b.w	38b4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    3904:	490c      	ldr	r1, [pc, #48]	; (3938 <clock_event_handler+0x50>)
    3906:	480d      	ldr	r0, [pc, #52]	; (393c <clock_event_handler+0x54>)
    3908:	f240 225e 	movw	r2, #606	; 0x25e
    390c:	f005 fe32 	bl	9574 <printk>
    3910:	f240 215e 	movw	r1, #606	; 0x25e
}
    3914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    3918:	4807      	ldr	r0, [pc, #28]	; (3938 <clock_event_handler+0x50>)
    391a:	f005 bef7 	b.w	970c <assert_post_action>
    391e:	4906      	ldr	r1, [pc, #24]	; (3938 <clock_event_handler+0x50>)
    3920:	4806      	ldr	r0, [pc, #24]	; (393c <clock_event_handler+0x54>)
    3922:	f240 2262 	movw	r2, #610	; 0x262
    3926:	f005 fe25 	bl	9574 <printk>
    392a:	f240 2162 	movw	r1, #610	; 0x262
    392e:	e7f1      	b.n	3914 <clock_event_handler+0x2c>
}
    3930:	bd08      	pop	{r3, pc}
    3932:	bf00      	nop
    3934:	20001024 	.word	0x20001024
    3938:	0000b1ed 	.word	0x0000b1ed
    393c:	0000a66d 	.word	0x0000a66d

00003940 <generic_hfclk_start>:
{
    3940:	b508      	push	{r3, lr}
	__asm__ volatile(
    3942:	f04f 0320 	mov.w	r3, #32
    3946:	f3ef 8111 	mrs	r1, BASEPRI
    394a:	f383 8812 	msr	BASEPRI_MAX, r3
    394e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3952:	4a12      	ldr	r2, [pc, #72]	; (399c <generic_hfclk_start+0x5c>)
    3954:	6813      	ldr	r3, [r2, #0]
    3956:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    395a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    395e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3960:	d00c      	beq.n	397c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3966:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    396a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    396e:	f013 0301 	ands.w	r3, r3, #1
    3972:	d003      	beq.n	397c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3974:	480a      	ldr	r0, [pc, #40]	; (39a0 <generic_hfclk_start+0x60>)
    3976:	f005 ffab 	bl	98d0 <set_on_state>
			already_started = true;
    397a:	2301      	movs	r3, #1
	__asm__ volatile(
    397c:	f381 8811 	msr	BASEPRI, r1
    3980:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3984:	b123      	cbz	r3, 3990 <generic_hfclk_start+0x50>
}
    3986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    398a:	2000      	movs	r0, #0
    398c:	f7ff bf92 	b.w	38b4 <clkstarted_handle.constprop.0>
}
    3990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3994:	2001      	movs	r0, #1
    3996:	f001 bf61 	b.w	585c <nrfx_clock_start>
    399a:	bf00      	nop
    399c:	2000107c 	.word	0x2000107c
    39a0:	2000106c 	.word	0x2000106c

000039a4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    39a4:	4b09      	ldr	r3, [pc, #36]	; (39cc <generic_hfclk_stop+0x28>)
    39a6:	f3bf 8f5b 	dmb	ish
    39aa:	e853 2f00 	ldrex	r2, [r3]
    39ae:	f022 0102 	bic.w	r1, r2, #2
    39b2:	e843 1000 	strex	r0, r1, [r3]
    39b6:	2800      	cmp	r0, #0
    39b8:	d1f7      	bne.n	39aa <generic_hfclk_stop+0x6>
    39ba:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    39be:	07d3      	lsls	r3, r2, #31
    39c0:	d402      	bmi.n	39c8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    39c2:	2001      	movs	r0, #1
    39c4:	f001 bf98 	b.w	58f8 <nrfx_clock_stop>
}
    39c8:	4770      	bx	lr
    39ca:	bf00      	nop
    39cc:	2000107c 	.word	0x2000107c

000039d0 <api_blocking_start>:
{
    39d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    39d2:	2200      	movs	r2, #0
    39d4:	2301      	movs	r3, #1
    39d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    39da:	4a09      	ldr	r2, [pc, #36]	; (3a00 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    39dc:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    39e0:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    39e2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    39e6:	f005 ff98 	bl	991a <api_start>
	if (err < 0) {
    39ea:	2800      	cmp	r0, #0
    39ec:	db05      	blt.n	39fa <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    39ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    39f2:	2300      	movs	r3, #0
    39f4:	4668      	mov	r0, sp
    39f6:	f003 fbc1 	bl	717c <z_impl_k_sem_take>
}
    39fa:	b005      	add	sp, #20
    39fc:	f85d fb04 	ldr.w	pc, [sp], #4
    3a00:	00009915 	.word	0x00009915

00003a04 <z_nrf_clock_control_lf_on>:
{
    3a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3a08:	4948      	ldr	r1, [pc, #288]	; (3b2c <z_nrf_clock_control_lf_on+0x128>)
    3a0a:	f3bf 8f5b 	dmb	ish
    3a0e:	4605      	mov	r5, r0
    3a10:	2201      	movs	r2, #1
    3a12:	e851 3f00 	ldrex	r3, [r1]
    3a16:	e841 2000 	strex	r0, r2, [r1]
    3a1a:	2800      	cmp	r0, #0
    3a1c:	d1f9      	bne.n	3a12 <z_nrf_clock_control_lf_on+0xe>
    3a1e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3a22:	b99b      	cbnz	r3, 3a4c <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3a24:	4942      	ldr	r1, [pc, #264]	; (3b30 <z_nrf_clock_control_lf_on+0x12c>)
		err = onoff_request(mgr, &cli);
    3a26:	4843      	ldr	r0, [pc, #268]	; (3b34 <z_nrf_clock_control_lf_on+0x130>)
    3a28:	604b      	str	r3, [r1, #4]
    3a2a:	60cb      	str	r3, [r1, #12]
    3a2c:	608a      	str	r2, [r1, #8]
    3a2e:	f7fd fed9 	bl	17e4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    3a32:	2800      	cmp	r0, #0
    3a34:	da0a      	bge.n	3a4c <z_nrf_clock_control_lf_on+0x48>
    3a36:	4940      	ldr	r1, [pc, #256]	; (3b38 <z_nrf_clock_control_lf_on+0x134>)
    3a38:	4840      	ldr	r0, [pc, #256]	; (3b3c <z_nrf_clock_control_lf_on+0x138>)
    3a3a:	f44f 7208 	mov.w	r2, #544	; 0x220
    3a3e:	f005 fd99 	bl	9574 <printk>
    3a42:	483d      	ldr	r0, [pc, #244]	; (3b38 <z_nrf_clock_control_lf_on+0x134>)
    3a44:	f44f 7108 	mov.w	r1, #544	; 0x220
    3a48:	f005 fe60 	bl	970c <assert_post_action>
	switch (start_mode) {
    3a4c:	b3ad      	cbz	r5, 3aba <z_nrf_clock_control_lf_on+0xb6>
    3a4e:	1e6b      	subs	r3, r5, #1
    3a50:	2b01      	cmp	r3, #1
    3a52:	d856      	bhi.n	3b02 <z_nrf_clock_control_lf_on+0xfe>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3a54:	2d01      	cmp	r5, #1
    3a56:	d107      	bne.n	3a68 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a5c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3a60:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3a64:	2b01      	cmp	r3, #1
    3a66:	d028      	beq.n	3aba <z_nrf_clock_control_lf_on+0xb6>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3a68:	f006 fabb 	bl	9fe2 <k_is_in_isr>
    3a6c:	4604      	mov	r4, r0
    3a6e:	b918      	cbnz	r0, 3a78 <z_nrf_clock_control_lf_on+0x74>
	return !z_sys_post_kernel;
    3a70:	4b33      	ldr	r3, [pc, #204]	; (3b40 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
    3a72:	781b      	ldrb	r3, [r3, #0]
    3a74:	2b00      	cmp	r3, #0
    3a76:	d151      	bne.n	3b1c <z_nrf_clock_control_lf_on+0x118>
	__asm__ volatile(
    3a78:	f04f 0320 	mov.w	r3, #32
    3a7c:	f3ef 8611 	mrs	r6, BASEPRI
    3a80:	f383 8812 	msr	BASEPRI_MAX, r3
    3a84:	f3bf 8f6f 	isb	sy
    3a88:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a8a:	4f2e      	ldr	r7, [pc, #184]	; (3b44 <z_nrf_clock_control_lf_on+0x140>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 3b48 <z_nrf_clock_control_lf_on+0x144>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a90:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3b4c <z_nrf_clock_control_lf_on+0x148>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3a98:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3a9c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3aa0:	03d2      	lsls	r2, r2, #15
    3aa2:	d50c      	bpl.n	3abe <z_nrf_clock_control_lf_on+0xba>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3aa4:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3aa8:	2b01      	cmp	r3, #1
    3aaa:	d001      	beq.n	3ab0 <z_nrf_clock_control_lf_on+0xac>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3aac:	2d01      	cmp	r5, #1
    3aae:	d106      	bne.n	3abe <z_nrf_clock_control_lf_on+0xba>
	if (isr_mode) {
    3ab0:	b30c      	cbz	r4, 3af6 <z_nrf_clock_control_lf_on+0xf2>
	__asm__ volatile(
    3ab2:	f386 8811 	msr	BASEPRI, r6
    3ab6:	f3bf 8f6f 	isb	sy
}
    3aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3abe:	b1ac      	cbz	r4, 3aec <z_nrf_clock_control_lf_on+0xe8>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3ac0:	4630      	mov	r0, r6
    3ac2:	f7ff f831 	bl	2b28 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3aca:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d1e0      	bne.n	3a94 <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3ad2:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    3ad4:	2900      	cmp	r1, #0
    3ad6:	d0dd      	beq.n	3a94 <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ad8:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3ada:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    3adc:	2301      	movs	r3, #1
    3ade:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    3ae2:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ae6:	f8c9 3000 	str.w	r3, [r9]
}
    3aea:	e7d3      	b.n	3a94 <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
    3aec:	2100      	movs	r1, #0
    3aee:	2021      	movs	r0, #33	; 0x21
    3af0:	f004 fe24 	bl	873c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3af4:	e7e7      	b.n	3ac6 <z_nrf_clock_control_lf_on+0xc2>
    p_reg->INTENSET = mask;
    3af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3afa:	2202      	movs	r2, #2
    3afc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3b00:	e7db      	b.n	3aba <z_nrf_clock_control_lf_on+0xb6>
		__ASSERT_NO_MSG(false);
    3b02:	490d      	ldr	r1, [pc, #52]	; (3b38 <z_nrf_clock_control_lf_on+0x134>)
    3b04:	480d      	ldr	r0, [pc, #52]	; (3b3c <z_nrf_clock_control_lf_on+0x138>)
    3b06:	f240 2232 	movw	r2, #562	; 0x232
    3b0a:	f005 fd33 	bl	9574 <printk>
}
    3b0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    3b12:	4809      	ldr	r0, [pc, #36]	; (3b38 <z_nrf_clock_control_lf_on+0x134>)
    3b14:	f240 2132 	movw	r1, #562	; 0x232
    3b18:	f005 bdf8 	b.w	970c <assert_post_action>
    p_reg->INTENCLR = mask;
    3b1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b20:	2202      	movs	r2, #2
    3b22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3b26:	4606      	mov	r6, r0
}
    3b28:	e7af      	b.n	3a8a <z_nrf_clock_control_lf_on+0x86>
    3b2a:	bf00      	nop
    3b2c:	20001080 	.word	0x20001080
    3b30:	20001014 	.word	0x20001014
    3b34:	20001044 	.word	0x20001044
    3b38:	0000b1ed 	.word	0x0000b1ed
    3b3c:	0000a66d 	.word	0x0000a66d
    3b40:	20001649 	.word	0x20001649
    3b44:	40000104 	.word	0x40000104
    3b48:	e000e100 	.word	0xe000e100
    3b4c:	40000008 	.word	0x40000008

00003b50 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    3b50:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    3b52:	4c04      	ldr	r4, [pc, #16]	; (3b64 <rtt_console_init+0x14>)
    3b54:	4620      	mov	r0, r4
    3b56:	f7fd fc5b 	bl	1410 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    3b5a:	4620      	mov	r0, r4
    3b5c:	f7ff fd92 	bl	3684 <__stdout_hook_install>

	return 0;
}
    3b60:	2000      	movs	r0, #0
    3b62:	bd10      	pop	{r4, pc}
    3b64:	00003b69 	.word	0x00003b69

00003b68 <rtt_console_out>:
{
    3b68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    3b6c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3bd0 <rtt_console_out+0x68>
    3b70:	4e16      	ldr	r6, [pc, #88]	; (3bcc <rtt_console_out+0x64>)
	char c = (char)character;
    3b72:	f88d 0007 	strb.w	r0, [sp, #7]
{
    3b76:	4604      	mov	r4, r0
	char c = (char)character;
    3b78:	2503      	movs	r5, #3
    3b7a:	f04f 33ff 	mov.w	r3, #4294967295
    3b7e:	f04f 32ff 	mov.w	r2, #4294967295
    3b82:	4640      	mov	r0, r8
    3b84:	f003 f950 	bl	6e28 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    3b88:	2201      	movs	r2, #1
    3b8a:	f10d 0107 	add.w	r1, sp, #7
    3b8e:	2000      	movs	r0, #0
    3b90:	f002 fd44 	bl	661c <SEGGER_RTT_WriteNoLock>
    3b94:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    3b96:	4640      	mov	r0, r8
    3b98:	f003 fa1e 	bl	6fd8 <z_impl_k_mutex_unlock>
		if (cnt) {
    3b9c:	b12f      	cbz	r7, 3baa <rtt_console_out+0x42>
			host_present = true;
    3b9e:	2301      	movs	r3, #1
    3ba0:	7033      	strb	r3, [r6, #0]
}
    3ba2:	4620      	mov	r0, r4
    3ba4:	b002      	add	sp, #8
    3ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    3baa:	7833      	ldrb	r3, [r6, #0]
    3bac:	2b00      	cmp	r3, #0
    3bae:	d0f8      	beq.n	3ba2 <rtt_console_out+0x3a>
			if (max_cnt) {
    3bb0:	3d01      	subs	r5, #1
    3bb2:	d008      	beq.n	3bc6 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    3bb4:	f006 fa15 	bl	9fe2 <k_is_in_isr>
    3bb8:	2800      	cmp	r0, #0
    3bba:	d1de      	bne.n	3b7a <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    3bbc:	2100      	movs	r1, #0
    3bbe:	2042      	movs	r0, #66	; 0x42
    3bc0:	f004 fdbc 	bl	873c <z_impl_k_sleep>
    3bc4:	e7d9      	b.n	3b7a <rtt_console_out+0x12>
				host_present = false;
    3bc6:	7035      	strb	r5, [r6, #0]
    3bc8:	e7eb      	b.n	3ba2 <rtt_console_out+0x3a>
    3bca:	bf00      	nop
    3bcc:	20001237 	.word	0x20001237
    3bd0:	2000070c 	.word	0x2000070c

00003bd4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    3bd4:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3bd6:	6905      	ldr	r5, [r0, #16]
{
    3bd8:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    3bda:	460c      	mov	r4, r1
    3bdc:	b941      	cbnz	r1, 3bf0 <gpio_nrfx_manage_callback+0x1c>
    3bde:	491e      	ldr	r1, [pc, #120]	; (3c58 <gpio_nrfx_manage_callback+0x84>)
    3be0:	481e      	ldr	r0, [pc, #120]	; (3c5c <gpio_nrfx_manage_callback+0x88>)
    3be2:	2224      	movs	r2, #36	; 0x24
    3be4:	f005 fcc6 	bl	9574 <printk>
    3be8:	481b      	ldr	r0, [pc, #108]	; (3c58 <gpio_nrfx_manage_callback+0x84>)
    3bea:	2124      	movs	r1, #36	; 0x24
    3bec:	f005 fd8e 	bl	970c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    3bf0:	6863      	ldr	r3, [r4, #4]
    3bf2:	b943      	cbnz	r3, 3c06 <gpio_nrfx_manage_callback+0x32>
    3bf4:	4918      	ldr	r1, [pc, #96]	; (3c58 <gpio_nrfx_manage_callback+0x84>)
    3bf6:	4819      	ldr	r0, [pc, #100]	; (3c5c <gpio_nrfx_manage_callback+0x88>)
    3bf8:	2225      	movs	r2, #37	; 0x25
    3bfa:	f005 fcbb 	bl	9574 <printk>
    3bfe:	4816      	ldr	r0, [pc, #88]	; (3c58 <gpio_nrfx_manage_callback+0x84>)
    3c00:	2125      	movs	r1, #37	; 0x25
    3c02:	f005 fd83 	bl	970c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    3c06:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    3c08:	b15b      	cbz	r3, 3c22 <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3c0a:	2200      	movs	r2, #0
    3c0c:	429c      	cmp	r4, r3
    3c0e:	d113      	bne.n	3c38 <gpio_nrfx_manage_callback+0x64>
Z_GENLIST_REMOVE(slist, snode)
    3c10:	6823      	ldr	r3, [r4, #0]
    3c12:	b95a      	cbnz	r2, 3c2c <gpio_nrfx_manage_callback+0x58>
    3c14:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    3c16:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    3c18:	4294      	cmp	r4, r2
    3c1a:	d100      	bne.n	3c1e <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
    3c1c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    3c1e:	2300      	movs	r3, #0
    3c20:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    3c22:	b976      	cbnz	r6, 3c42 <gpio_nrfx_manage_callback+0x6e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    3c24:	2000      	movs	r0, #0
				     callback, set);
}
    3c26:	bd70      	pop	{r4, r5, r6, pc}
    3c28:	460b      	mov	r3, r1
    3c2a:	e7ef      	b.n	3c0c <gpio_nrfx_manage_callback+0x38>
    3c2c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    3c2e:	68ab      	ldr	r3, [r5, #8]
    3c30:	429c      	cmp	r4, r3
	list->tail = node;
    3c32:	bf08      	it	eq
    3c34:	60aa      	streq	r2, [r5, #8]
}
    3c36:	e7f2      	b.n	3c1e <gpio_nrfx_manage_callback+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3c38:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3c3a:	461a      	mov	r2, r3
    3c3c:	2900      	cmp	r1, #0
    3c3e:	d1f3      	bne.n	3c28 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
    3c40:	b13e      	cbz	r6, 3c52 <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_PREPEND(slist, snode)
    3c42:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    3c44:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    3c46:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    3c48:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    3c4a:	2800      	cmp	r0, #0
    3c4c:	d1ea      	bne.n	3c24 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
    3c4e:	60ac      	str	r4, [r5, #8]
}
    3c50:	e7e9      	b.n	3c26 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
    3c52:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3c56:	e7e6      	b.n	3c26 <gpio_nrfx_manage_callback+0x52>
    3c58:	0000b24a 	.word	0x0000b24a
    3c5c:	0000a66d 	.word	0x0000a66d

00003c60 <nrfx_gpio_handler>:
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    3c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3c64:	0943      	lsrs	r3, r0, #5
    3c66:	d003      	beq.n	3c70 <nrfx_gpio_handler+0x10>
    3c68:	2b01      	cmp	r3, #1
    3c6a:	d030      	beq.n	3cce <nrfx_gpio_handler+0x6e>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    3c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3c70:	4f18      	ldr	r7, [pc, #96]	; (3cd4 <nrfx_gpio_handler+0x74>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3c72:	693b      	ldr	r3, [r7, #16]
    3c74:	685c      	ldr	r4, [r3, #4]
    3c76:	2c00      	cmp	r4, #0
    3c78:	d0f8      	beq.n	3c6c <nrfx_gpio_handler+0xc>
    3c7a:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    3c7c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3cdc <nrfx_gpio_handler+0x7c>
    3c80:	f8df 905c 	ldr.w	r9, [pc, #92]	; 3ce0 <nrfx_gpio_handler+0x80>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3c84:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    3c88:	2601      	movs	r6, #1
    3c8a:	2d00      	cmp	r5, #0
    3c8c:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    3c90:	bf38      	it	cc
    3c92:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    3c94:	68a3      	ldr	r3, [r4, #8]
    3c96:	421e      	tst	r6, r3
    3c98:	d010      	beq.n	3cbc <nrfx_gpio_handler+0x5c>
			__ASSERT(cb->handler, "No callback handler!");
    3c9a:	6863      	ldr	r3, [r4, #4]
    3c9c:	b943      	cbnz	r3, 3cb0 <nrfx_gpio_handler+0x50>
    3c9e:	4641      	mov	r1, r8
    3ca0:	4648      	mov	r0, r9
    3ca2:	2245      	movs	r2, #69	; 0x45
    3ca4:	f005 fc66 	bl	9574 <printk>
    3ca8:	2145      	movs	r1, #69	; 0x45
    3caa:	4640      	mov	r0, r8
    3cac:	f005 fd2e 	bl	970c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    3cb0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3cb4:	4621      	mov	r1, r4
    3cb6:	4032      	ands	r2, r6
    3cb8:	4638      	mov	r0, r7
    3cba:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3cbc:	2d00      	cmp	r5, #0
    3cbe:	d0d5      	beq.n	3c6c <nrfx_gpio_handler+0xc>
    3cc0:	682b      	ldr	r3, [r5, #0]
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	bf38      	it	cc
    3cc6:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3cc8:	462c      	mov	r4, r5
    3cca:	461d      	mov	r5, r3
    3ccc:	e7e2      	b.n	3c94 <nrfx_gpio_handler+0x34>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3cce:	4f02      	ldr	r7, [pc, #8]	; (3cd8 <nrfx_gpio_handler+0x78>)
    3cd0:	e7cf      	b.n	3c72 <nrfx_gpio_handler+0x12>
    3cd2:	bf00      	nop
    3cd4:	0000a174 	.word	0x0000a174
    3cd8:	0000a18c 	.word	0x0000a18c
    3cdc:	0000b24a 	.word	0x0000b24a
    3ce0:	0000a66d 	.word	0x0000a66d

00003ce4 <gpio_nrfx_pin_interrupt_configure>:
{
    3ce4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3ce6:	6840      	ldr	r0, [r0, #4]
    3ce8:	7b05      	ldrb	r5, [r0, #12]
    3cea:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    3cee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3cf2:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3cf6:	f04f 0500 	mov.w	r5, #0
    3cfa:	d104      	bne.n	3d06 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    3cfc:	4620      	mov	r0, r4
    3cfe:	f002 f935 	bl	5f6c <nrfx_gpiote_trigger_disable>
	return 0;
    3d02:	2000      	movs	r0, #0
    3d04:	e052      	b.n	3dac <gpio_nrfx_pin_interrupt_configure+0xc8>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3d06:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3d0a:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3d0e:	d14f      	bne.n	3db0 <gpio_nrfx_pin_interrupt_configure+0xcc>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3d14:	bf0c      	ite	eq
    3d16:	2304      	moveq	r3, #4
    3d18:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3d1a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3d1e:	6883      	ldr	r3, [r0, #8]
    3d20:	fa23 f101 	lsr.w	r1, r3, r1
    3d24:	f011 0101 	ands.w	r1, r1, #1
    3d28:	d153      	bne.n	3dd2 <gpio_nrfx_pin_interrupt_configure+0xee>
    3d2a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3d2e:	d150      	bne.n	3dd2 <gpio_nrfx_pin_interrupt_configure+0xee>
    switch (port)
    3d30:	0966      	lsrs	r6, r4, #5
    3d32:	d048      	beq.n	3dc6 <gpio_nrfx_pin_interrupt_configure+0xe2>
            mask = P1_FEATURE_PINS_PRESENT;
    3d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3d38:	2e01      	cmp	r6, #1
    3d3a:	bf08      	it	eq
    3d3c:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    3d3e:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3d42:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3d44:	07ca      	lsls	r2, r1, #31
    3d46:	d40a      	bmi.n	3d5e <gpio_nrfx_pin_interrupt_configure+0x7a>
    3d48:	492a      	ldr	r1, [pc, #168]	; (3df4 <gpio_nrfx_pin_interrupt_configure+0x110>)
    3d4a:	482b      	ldr	r0, [pc, #172]	; (3df8 <gpio_nrfx_pin_interrupt_configure+0x114>)
    3d4c:	f240 2229 	movw	r2, #553	; 0x229
    3d50:	f005 fc10 	bl	9574 <printk>
    3d54:	4827      	ldr	r0, [pc, #156]	; (3df4 <gpio_nrfx_pin_interrupt_configure+0x110>)
    3d56:	f240 2129 	movw	r1, #553	; 0x229
    3d5a:	f005 fcd7 	bl	970c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3d5e:	b166      	cbz	r6, 3d7a <gpio_nrfx_pin_interrupt_configure+0x96>
    3d60:	2e01      	cmp	r6, #1
    3d62:	d033      	beq.n	3dcc <gpio_nrfx_pin_interrupt_configure+0xe8>
            NRFX_ASSERT(0);
    3d64:	4923      	ldr	r1, [pc, #140]	; (3df4 <gpio_nrfx_pin_interrupt_configure+0x110>)
    3d66:	4824      	ldr	r0, [pc, #144]	; (3df8 <gpio_nrfx_pin_interrupt_configure+0x114>)
    3d68:	f240 222e 	movw	r2, #558	; 0x22e
    3d6c:	f005 fc02 	bl	9574 <printk>
    3d70:	4820      	ldr	r0, [pc, #128]	; (3df4 <gpio_nrfx_pin_interrupt_configure+0x110>)
    3d72:	f240 212e 	movw	r1, #558	; 0x22e
    3d76:	f005 fcc9 	bl	970c <assert_post_action>
        case 0: return NRF_P0;
    3d7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3d7e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    3d82:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3d86:	07db      	lsls	r3, r3, #31
    3d88:	d423      	bmi.n	3dd2 <gpio_nrfx_pin_interrupt_configure+0xee>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3d8a:	f10d 0507 	add.w	r5, sp, #7
    3d8e:	4629      	mov	r1, r5
    3d90:	4620      	mov	r0, r4
    3d92:	f002 f81f 	bl	5dd4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3d96:	4b19      	ldr	r3, [pc, #100]	; (3dfc <gpio_nrfx_pin_interrupt_configure+0x118>)
    3d98:	4298      	cmp	r0, r3
    3d9a:	d119      	bne.n	3dd0 <gpio_nrfx_pin_interrupt_configure+0xec>
			err = nrfx_gpiote_channel_alloc(&ch);
    3d9c:	4628      	mov	r0, r5
    3d9e:	f002 f875 	bl	5e8c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3da2:	4b17      	ldr	r3, [pc, #92]	; (3e00 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3da4:	4298      	cmp	r0, r3
    3da6:	d013      	beq.n	3dd0 <gpio_nrfx_pin_interrupt_configure+0xec>
				return -ENOMEM;
    3da8:	f06f 000b 	mvn.w	r0, #11
}
    3dac:	b004      	add	sp, #16
    3dae:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3db0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3db4:	d005      	beq.n	3dc2 <gpio_nrfx_pin_interrupt_configure+0xde>
    3db6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3dba:	bf0c      	ite	eq
    3dbc:	2302      	moveq	r3, #2
    3dbe:	2301      	movne	r3, #1
    3dc0:	e7ab      	b.n	3d1a <gpio_nrfx_pin_interrupt_configure+0x36>
    3dc2:	2303      	movs	r3, #3
    3dc4:	e7a9      	b.n	3d1a <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    3dc6:	f04f 31ff 	mov.w	r1, #4294967295
    3dca:	e7b8      	b.n	3d3e <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3dcc:	4b0d      	ldr	r3, [pc, #52]	; (3e04 <gpio_nrfx_pin_interrupt_configure+0x120>)
    3dce:	e7d6      	b.n	3d7e <gpio_nrfx_pin_interrupt_configure+0x9a>
		trigger_config.p_in_channel = &ch;
    3dd0:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3dd2:	2300      	movs	r3, #0
    3dd4:	4619      	mov	r1, r3
    3dd6:	aa02      	add	r2, sp, #8
    3dd8:	4620      	mov	r0, r4
    3dda:	f001 fedd 	bl	5b98 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3dde:	4b08      	ldr	r3, [pc, #32]	; (3e00 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3de0:	4298      	cmp	r0, r3
    3de2:	d104      	bne.n	3dee <gpio_nrfx_pin_interrupt_configure+0x10a>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3de4:	2101      	movs	r1, #1
    3de6:	4620      	mov	r0, r4
    3de8:	f002 f856 	bl	5e98 <nrfx_gpiote_trigger_enable>
    3dec:	e789      	b.n	3d02 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    3dee:	f06f 0004 	mvn.w	r0, #4
    3df2:	e7db      	b.n	3dac <gpio_nrfx_pin_interrupt_configure+0xc8>
    3df4:	0000b277 	.word	0x0000b277
    3df8:	0000a66d 	.word	0x0000a66d
    3dfc:	0bad0004 	.word	0x0bad0004
    3e00:	0bad0000 	.word	0x0bad0000
    3e04:	50000300 	.word	0x50000300

00003e08 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3e08:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3e0a:	f002 f82f 	bl	5e6c <nrfx_gpiote_is_init>
    3e0e:	4604      	mov	r4, r0
    3e10:	b968      	cbnz	r0, 3e2e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3e12:	f002 f803 	bl	5e1c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3e16:	4b08      	ldr	r3, [pc, #32]	; (3e38 <gpio_nrfx_init+0x30>)
    3e18:	4298      	cmp	r0, r3
    3e1a:	d10a      	bne.n	3e32 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3e1c:	4807      	ldr	r0, [pc, #28]	; (3e3c <gpio_nrfx_init+0x34>)
    3e1e:	4621      	mov	r1, r4
    3e20:	f001 ffd2 	bl	5dc8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3e24:	4622      	mov	r2, r4
    3e26:	2101      	movs	r1, #1
    3e28:	2006      	movs	r0, #6
    3e2a:	f7fe fef1 	bl	2c10 <z_arm_irq_priority_set>
		return 0;
    3e2e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3e30:	bd10      	pop	{r4, pc}
		return -EIO;
    3e32:	f06f 0004 	mvn.w	r0, #4
    3e36:	e7fb      	b.n	3e30 <gpio_nrfx_init+0x28>
    3e38:	0bad0000 	.word	0x0bad0000
    3e3c:	00003c61 	.word	0x00003c61

00003e40 <gpio_nrfx_pin_configure>:
{
    3e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    3e44:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3e46:	7b3b      	ldrb	r3, [r7, #12]
    3e48:	f001 051f 	and.w	r5, r1, #31
{
    3e4c:	b085      	sub	sp, #20
    3e4e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3e50:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3e54:	4614      	mov	r4, r2
    3e56:	b9ca      	cbnz	r2, 3e8c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3e58:	a902      	add	r1, sp, #8
    3e5a:	4628      	mov	r0, r5
    3e5c:	f001 ffba 	bl	5dd4 <nrfx_gpiote_channel_get>
    3e60:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    3e62:	4628      	mov	r0, r5
    3e64:	f002 f8a4 	bl	5fb0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3e68:	4b48      	ldr	r3, [pc, #288]	; (3f8c <gpio_nrfx_pin_configure+0x14c>)
    3e6a:	4298      	cmp	r0, r3
    3e6c:	d004      	beq.n	3e78 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    3e6e:	f06f 0004 	mvn.w	r0, #4
}
    3e72:	b005      	add	sp, #20
    3e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3e78:	4284      	cmp	r4, r0
    3e7a:	d105      	bne.n	3e88 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3e7c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3e80:	f001 fffe 	bl	5e80 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3e84:	42a0      	cmp	r0, r4
    3e86:	d1f2      	bne.n	3e6e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3e88:	2000      	movs	r0, #0
    3e8a:	e7f2      	b.n	3e72 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3e8c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    3e90:	f10d 0103 	add.w	r1, sp, #3
    3e94:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    3e96:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3e9a:	f001 ff9b 	bl	5dd4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3e9e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3ea0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3ea2:	aa02      	add	r2, sp, #8
    3ea4:	4649      	mov	r1, r9
    3ea6:	4628      	mov	r0, r5
    3ea8:	f001 fe76 	bl	5b98 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3eac:	4b37      	ldr	r3, [pc, #220]	; (3f8c <gpio_nrfx_pin_configure+0x14c>)
    3eae:	4298      	cmp	r0, r3
    3eb0:	d002      	beq.n	3eb8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3eb2:	f06f 0015 	mvn.w	r0, #21
    3eb6:	e7dc      	b.n	3e72 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3eb8:	4580      	cmp	r8, r0
    3eba:	d103      	bne.n	3ec4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3ebc:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3ec0:	f001 ffde 	bl	5e80 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3ec4:	05a3      	lsls	r3, r4, #22
    3ec6:	d54e      	bpl.n	3f66 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3ec8:	4b31      	ldr	r3, [pc, #196]	; (3f90 <gpio_nrfx_pin_configure+0x150>)
    3eca:	4a32      	ldr	r2, [pc, #200]	; (3f94 <gpio_nrfx_pin_configure+0x154>)
    3ecc:	4023      	ands	r3, r4
    3ece:	4293      	cmp	r3, r2
    3ed0:	d03a      	beq.n	3f48 <gpio_nrfx_pin_configure+0x108>
    3ed2:	d80c      	bhi.n	3eee <gpio_nrfx_pin_configure+0xae>
    3ed4:	2b06      	cmp	r3, #6
    3ed6:	d014      	beq.n	3f02 <gpio_nrfx_pin_configure+0xc2>
    3ed8:	d804      	bhi.n	3ee4 <gpio_nrfx_pin_configure+0xa4>
    3eda:	b193      	cbz	r3, 3f02 <gpio_nrfx_pin_configure+0xc2>
    3edc:	2b02      	cmp	r3, #2
    3ede:	d1e8      	bne.n	3eb2 <gpio_nrfx_pin_configure+0x72>
    3ee0:	2304      	movs	r3, #4
    3ee2:	e00e      	b.n	3f02 <gpio_nrfx_pin_configure+0xc2>
    3ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3ee8:	d1e3      	bne.n	3eb2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3eea:	2301      	movs	r3, #1
    3eec:	e009      	b.n	3f02 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3eee:	4a2a      	ldr	r2, [pc, #168]	; (3f98 <gpio_nrfx_pin_configure+0x158>)
    3ef0:	4293      	cmp	r3, r2
    3ef2:	d02b      	beq.n	3f4c <gpio_nrfx_pin_configure+0x10c>
    3ef4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3ef8:	d02a      	beq.n	3f50 <gpio_nrfx_pin_configure+0x110>
    3efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3efe:	d1d8      	bne.n	3eb2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    3f00:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3f02:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3f06:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    3f0a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    3f0e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3f10:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3f14:	bf54      	ite	pl
    3f16:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3f1a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3f1c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    3f1e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3f22:	d517      	bpl.n	3f54 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	2101      	movs	r1, #1
    3f28:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3f2c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3f30:	2200      	movs	r2, #0
    3f32:	a901      	add	r1, sp, #4
    3f34:	4628      	mov	r0, r5
    3f36:	f001 fed7 	bl	5ce8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3f3a:	4b14      	ldr	r3, [pc, #80]	; (3f8c <gpio_nrfx_pin_configure+0x14c>)
    3f3c:	4298      	cmp	r0, r3
    3f3e:	bf14      	ite	ne
    3f40:	f06f 0015 	mvnne.w	r0, #21
    3f44:	2000      	moveq	r0, #0
    3f46:	e794      	b.n	3e72 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3f48:	2307      	movs	r3, #7
    3f4a:	e7da      	b.n	3f02 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    3f4c:	2305      	movs	r3, #5
    3f4e:	e7d8      	b.n	3f02 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    3f50:	2303      	movs	r3, #3
    3f52:	e7d6      	b.n	3f02 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3f54:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3f56:	bf41      	itttt	mi
    3f58:	687b      	ldrmi	r3, [r7, #4]
    3f5a:	2101      	movmi	r1, #1
    3f5c:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    3f60:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3f64:	e7e4      	b.n	3f30 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    3f66:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3f68:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3f6c:	bf54      	ite	pl
    3f6e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    3f72:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3f74:	461a      	mov	r2, r3
    3f76:	a901      	add	r1, sp, #4
    3f78:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3f7a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3f7e:	f001 fe0b 	bl	5b98 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3f82:	4b02      	ldr	r3, [pc, #8]	; (3f8c <gpio_nrfx_pin_configure+0x14c>)
    3f84:	4298      	cmp	r0, r3
    3f86:	f43f af7f 	beq.w	3e88 <gpio_nrfx_pin_configure+0x48>
    3f8a:	e792      	b.n	3eb2 <gpio_nrfx_pin_configure+0x72>
    3f8c:	0bad0000 	.word	0x0bad0000
    3f90:	00f00006 	.word	0x00f00006
    3f94:	00100006 	.word	0x00100006
    3f98:	00400002 	.word	0x00400002

00003f9c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3f9e:	794b      	ldrb	r3, [r1, #5]
    3fa0:	2b01      	cmp	r3, #1
    3fa2:	d026      	beq.n	3ff2 <uarte_nrfx_configure+0x56>
    3fa4:	2b03      	cmp	r3, #3
    3fa6:	d121      	bne.n	3fec <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3fa8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3faa:	798b      	ldrb	r3, [r1, #6]
    3fac:	2b03      	cmp	r3, #3
    3fae:	d11d      	bne.n	3fec <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3fb0:	79cc      	ldrb	r4, [r1, #7]
    3fb2:	b10c      	cbz	r4, 3fb8 <uarte_nrfx_configure+0x1c>
    3fb4:	2c01      	cmp	r4, #1
    3fb6:	d119      	bne.n	3fec <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3fb8:	790a      	ldrb	r2, [r1, #4]
    3fba:	b112      	cbz	r2, 3fc2 <uarte_nrfx_configure+0x26>
    3fbc:	2a02      	cmp	r2, #2
    3fbe:	d115      	bne.n	3fec <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3fc0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3fc2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3fc4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3fc6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3fca:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3fcc:	d065      	beq.n	409a <uarte_nrfx_configure+0xfe>
    3fce:	d82d      	bhi.n	402c <uarte_nrfx_configure+0x90>
    3fd0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3fd4:	d064      	beq.n	40a0 <uarte_nrfx_configure+0x104>
    3fd6:	d816      	bhi.n	4006 <uarte_nrfx_configure+0x6a>
    3fd8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3fdc:	d062      	beq.n	40a4 <uarte_nrfx_configure+0x108>
    3fde:	d80a      	bhi.n	3ff6 <uarte_nrfx_configure+0x5a>
    3fe0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3fe4:	d061      	beq.n	40aa <uarte_nrfx_configure+0x10e>
    3fe6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3fea:	d061      	beq.n	40b0 <uarte_nrfx_configure+0x114>
    3fec:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3ff0:	e052      	b.n	4098 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3ff2:	2600      	movs	r6, #0
    3ff4:	e7d9      	b.n	3faa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3ff6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3ffa:	d05c      	beq.n	40b6 <uarte_nrfx_configure+0x11a>
    3ffc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    4000:	d1f4      	bne.n	3fec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4002:	4b37      	ldr	r3, [pc, #220]	; (40e0 <uarte_nrfx_configure+0x144>)
    4004:	e03c      	b.n	4080 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4006:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    400a:	d057      	beq.n	40bc <uarte_nrfx_configure+0x120>
    400c:	d807      	bhi.n	401e <uarte_nrfx_configure+0x82>
    400e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    4012:	d055      	beq.n	40c0 <uarte_nrfx_configure+0x124>
    4014:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    4018:	d1e8      	bne.n	3fec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    401a:	4b32      	ldr	r3, [pc, #200]	; (40e4 <uarte_nrfx_configure+0x148>)
    401c:	e030      	b.n	4080 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    401e:	f647 2712 	movw	r7, #31250	; 0x7a12
    4022:	42bb      	cmp	r3, r7
    4024:	d1e2      	bne.n	3fec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4026:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    402a:	e029      	b.n	4080 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    402c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    4030:	d048      	beq.n	40c4 <uarte_nrfx_configure+0x128>
    4032:	d813      	bhi.n	405c <uarte_nrfx_configure+0xc0>
    4034:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    4038:	d047      	beq.n	40ca <uarte_nrfx_configure+0x12e>
    403a:	d809      	bhi.n	4050 <uarte_nrfx_configure+0xb4>
    403c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    4040:	42bb      	cmp	r3, r7
    4042:	d044      	beq.n	40ce <uarte_nrfx_configure+0x132>
    4044:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    4048:	d1d0      	bne.n	3fec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    404a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    404e:	e017      	b.n	4080 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4050:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    4054:	d1ca      	bne.n	3fec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4056:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    405a:	e011      	b.n	4080 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    405c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    4060:	d038      	beq.n	40d4 <uarte_nrfx_configure+0x138>
    4062:	d808      	bhi.n	4076 <uarte_nrfx_configure+0xda>
    4064:	4f20      	ldr	r7, [pc, #128]	; (40e8 <uarte_nrfx_configure+0x14c>)
    4066:	42bb      	cmp	r3, r7
    4068:	d037      	beq.n	40da <uarte_nrfx_configure+0x13e>
    406a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    406e:	d1bd      	bne.n	3fec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4070:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4074:	e004      	b.n	4080 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4076:	4f1d      	ldr	r7, [pc, #116]	; (40ec <uarte_nrfx_configure+0x150>)
    4078:	42bb      	cmp	r3, r7
    407a:	d1b7      	bne.n	3fec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    407c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4080:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    4084:	6903      	ldr	r3, [r0, #16]
    4086:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    4088:	4334      	orrs	r4, r6
    408a:	4322      	orrs	r2, r4
    408c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    408e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    4092:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    4096:	2000      	movs	r0, #0
}
    4098:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    409a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    409e:	e7ef      	b.n	4080 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    40a0:	4b13      	ldr	r3, [pc, #76]	; (40f0 <uarte_nrfx_configure+0x154>)
    40a2:	e7ed      	b.n	4080 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    40a4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    40a8:	e7ea      	b.n	4080 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    40aa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    40ae:	e7e7      	b.n	4080 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    40b0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    40b4:	e7e4      	b.n	4080 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    40b6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    40ba:	e7e1      	b.n	4080 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    40bc:	4b0d      	ldr	r3, [pc, #52]	; (40f4 <uarte_nrfx_configure+0x158>)
    40be:	e7df      	b.n	4080 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    40c0:	4b0d      	ldr	r3, [pc, #52]	; (40f8 <uarte_nrfx_configure+0x15c>)
    40c2:	e7dd      	b.n	4080 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    40c4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    40c8:	e7da      	b.n	4080 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    40ca:	4b0c      	ldr	r3, [pc, #48]	; (40fc <uarte_nrfx_configure+0x160>)
    40cc:	e7d8      	b.n	4080 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    40ce:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    40d2:	e7d5      	b.n	4080 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    40d4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    40d8:	e7d2      	b.n	4080 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    40da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    40de:	e7cf      	b.n	4080 <uarte_nrfx_configure+0xe4>
    40e0:	0013b000 	.word	0x0013b000
    40e4:	004ea000 	.word	0x004ea000
    40e8:	0003d090 	.word	0x0003d090
    40ec:	000f4240 	.word	0x000f4240
    40f0:	00275000 	.word	0x00275000
    40f4:	0075c000 	.word	0x0075c000
    40f8:	003af000 	.word	0x003af000
    40fc:	013a9000 	.word	0x013a9000

00004100 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
    4100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4104:	4614      	mov	r4, r2
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    4106:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4108:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
    410c:	6817      	ldr	r7, [r2, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
    410e:	7a12      	ldrb	r2, [r2, #8]
{
    4110:	4605      	mov	r5, r0
    4112:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
    4114:	b172      	cbz	r2, 4134 <uarte_nrfx_rx_enable+0x34>
		__ASSERT(false, "TX only UARTE instance");
    4116:	493d      	ldr	r1, [pc, #244]	; (420c <uarte_nrfx_rx_enable+0x10c>)
    4118:	483d      	ldr	r0, [pc, #244]	; (4210 <uarte_nrfx_rx_enable+0x110>)
    411a:	f240 327f 	movw	r2, #895	; 0x37f
    411e:	f005 fa29 	bl	9574 <printk>
    4122:	483a      	ldr	r0, [pc, #232]	; (420c <uarte_nrfx_rx_enable+0x10c>)
    4124:	f240 317f 	movw	r1, #895	; 0x37f
    4128:	f005 faf0 	bl	970c <assert_post_action>
		return -ENOTSUP;
    412c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
    4130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (data->async->rx_enabled) {
    4134:	f8d9 100c 	ldr.w	r1, [r9, #12]
    4138:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    413c:	2a00      	cmp	r2, #0
    413e:	d161      	bne.n	4204 <uarte_nrfx_rx_enable+0x104>
		MAX(timeout / RX_TIMEOUT_DIV,
    4140:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    4144:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    4146:	bfd2      	itee	le
    4148:	235c      	movle	r3, #92	; 0x5c
    414a:	2205      	movgt	r2, #5
    414c:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    4150:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    4154:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
    4156:	e9c1 8418 	strd	r8, r4, [r1, #96]	; 0x60
	data->async->rx_next_buf = NULL;
    415a:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    415e:	670b      	str	r3, [r1, #112]	; 0x70
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4160:	6843      	ldr	r3, [r0, #4]
    4162:	685b      	ldr	r3, [r3, #4]
    4164:	06da      	lsls	r2, r3, #27
    4166:	d524      	bpl.n	41b2 <uarte_nrfx_rx_enable+0xb2>
		if (data->async->rx_flush_cnt) {
    4168:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
    416c:	b30e      	cbz	r6, 41b2 <uarte_nrfx_rx_enable+0xb2>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    416e:	42a6      	cmp	r6, r4
    4170:	bf28      	it	cs
    4172:	4626      	movcs	r6, r4
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
    4174:	4640      	mov	r0, r8
    4176:	4632      	mov	r2, r6
    4178:	31cc      	adds	r1, #204	; 0xcc
    417a:	f005 fb56 	bl	982a <memcpy>
			if (!len) {
    417e:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
    4180:	44b0      	add	r8, r6
			if (!len) {
    4182:	d116      	bne.n	41b2 <uarte_nrfx_rx_enable+0xb2>
				data->async->rx_flush_cnt -= cpy_len;
    4184:	f8d9 200c 	ldr.w	r2, [r9, #12]
    4188:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    418c:	1b9b      	subs	r3, r3, r6
    418e:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    4192:	4631      	mov	r1, r6
    4194:	4628      	mov	r0, r5
    4196:	f005 fc28 	bl	99ea <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
    419a:	f8d9 100c 	ldr.w	r1, [r9, #12]
    419e:	4628      	mov	r0, r5
    41a0:	2201      	movs	r2, #1
    41a2:	3160      	adds	r1, #96	; 0x60
    41a4:	f005 fc3a 	bl	9a1c <notify_rx_buf_release>
				notify_rx_disable(dev);
    41a8:	4628      	mov	r0, r5
    41aa:	f005 fc51 	bl	9a50 <notify_rx_disable>
	return 0;
    41ae:	2000      	movs	r0, #0
    41b0:	e7be      	b.n	4130 <uarte_nrfx_rx_enable+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41b2:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    41b4:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    41b8:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    41c0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    41c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    41c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
    41cc:	f8d9 300c 	ldr.w	r3, [r9, #12]
    41d0:	2201      	movs	r2, #1
    41d2:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    41d6:	686b      	ldr	r3, [r5, #4]
    41d8:	685b      	ldr	r3, [r3, #4]
    41da:	06db      	lsls	r3, r3, #27
    41dc:	d50f      	bpl.n	41fe <uarte_nrfx_rx_enable+0xfe>
	__asm__ volatile(
    41de:	f04f 0320 	mov.w	r3, #32
    41e2:	f3ef 8411 	mrs	r4, BASEPRI
    41e6:	f383 8812 	msr	BASEPRI_MAX, r3
    41ea:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
    41ee:	2102      	movs	r1, #2
    41f0:	4628      	mov	r0, r5
    41f2:	f005 fc88 	bl	9b06 <uarte_enable>
	__asm__ volatile(
    41f6:	f384 8811 	msr	BASEPRI, r4
    41fa:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41fe:	2301      	movs	r3, #1
    4200:	603b      	str	r3, [r7, #0]
    4202:	e7d4      	b.n	41ae <uarte_nrfx_rx_enable+0xae>
		return -EBUSY;
    4204:	f06f 000f 	mvn.w	r0, #15
    4208:	e792      	b.n	4130 <uarte_nrfx_rx_enable+0x30>
    420a:	bf00      	nop
    420c:	0000b2b8 	.word	0x0000b2b8
    4210:	0000a66d 	.word	0x0000a66d

00004214 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4214:	6802      	ldr	r2, [r0, #0]
    switch (port)
    4216:	0953      	lsrs	r3, r2, #5
{
    4218:	b510      	push	{r4, lr}
    421a:	4604      	mov	r4, r0
    switch (port)
    421c:	d02a      	beq.n	4274 <nrf_gpio_pin_port_decode+0x60>
    421e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    4220:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4224:	bf18      	it	ne
    4226:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    4228:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    422c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    422e:	07db      	lsls	r3, r3, #31
    4230:	d40a      	bmi.n	4248 <nrf_gpio_pin_port_decode+0x34>
    4232:	4913      	ldr	r1, [pc, #76]	; (4280 <nrf_gpio_pin_port_decode+0x6c>)
    4234:	4813      	ldr	r0, [pc, #76]	; (4284 <nrf_gpio_pin_port_decode+0x70>)
    4236:	f240 2229 	movw	r2, #553	; 0x229
    423a:	f005 f99b 	bl	9574 <printk>
    423e:	4810      	ldr	r0, [pc, #64]	; (4280 <nrf_gpio_pin_port_decode+0x6c>)
    4240:	f240 2129 	movw	r1, #553	; 0x229
    4244:	f005 fa62 	bl	970c <assert_post_action>
    uint32_t pin_number = *p_pin;
    4248:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    424a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    424e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4250:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4252:	d00c      	beq.n	426e <nrf_gpio_pin_port_decode+0x5a>
    4254:	2b01      	cmp	r3, #1
    4256:	d010      	beq.n	427a <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
    4258:	4909      	ldr	r1, [pc, #36]	; (4280 <nrf_gpio_pin_port_decode+0x6c>)
    425a:	480a      	ldr	r0, [pc, #40]	; (4284 <nrf_gpio_pin_port_decode+0x70>)
    425c:	f240 222e 	movw	r2, #558	; 0x22e
    4260:	f005 f988 	bl	9574 <printk>
    4264:	4806      	ldr	r0, [pc, #24]	; (4280 <nrf_gpio_pin_port_decode+0x6c>)
    4266:	f240 212e 	movw	r1, #558	; 0x22e
    426a:	f005 fa4f 	bl	970c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    426e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4272:	bd10      	pop	{r4, pc}
    switch (port)
    4274:	f04f 33ff 	mov.w	r3, #4294967295
    4278:	e7d6      	b.n	4228 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    427a:	4803      	ldr	r0, [pc, #12]	; (4288 <nrf_gpio_pin_port_decode+0x74>)
    427c:	e7f9      	b.n	4272 <nrf_gpio_pin_port_decode+0x5e>
    427e:	bf00      	nop
    4280:	0000b277 	.word	0x0000b277
    4284:	0000a66d 	.word	0x0000a66d
    4288:	50000300 	.word	0x50000300

0000428c <uarte_nrfx_tx>:
{
    428c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    428e:	461c      	mov	r4, r3
	return config->uarte_regs;
    4290:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4292:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    4294:	f8d3 c000 	ldr.w	ip, [r3]
{
    4298:	4605      	mov	r5, r0
	__asm__ volatile(
    429a:	f04f 0320 	mov.w	r3, #32
    429e:	f3ef 8711 	mrs	r7, BASEPRI
    42a2:	f383 8812 	msr	BASEPRI_MAX, r3
    42a6:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
    42aa:	68f0      	ldr	r0, [r6, #12]
    42ac:	68c3      	ldr	r3, [r0, #12]
    42ae:	b13b      	cbz	r3, 42c0 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
    42b0:	f387 8811 	msr	BASEPRI, r7
    42b4:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    42b8:	f06f 000f 	mvn.w	r0, #15
}
    42bc:	b003      	add	sp, #12
    42be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENSET = mask;
    42c0:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
	data->async->tx_size = len;
    42c4:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    42c6:	6081      	str	r1, [r0, #8]
    42c8:	f8cc e304 	str.w	lr, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    42cc:	f001 4c60 	and.w	ip, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    42d0:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
    42d4:	d128      	bne.n	4328 <uarte_nrfx_tx+0x9c>
		data->async->xfer_len = len;
    42d6:	e9c0 1204 	strd	r1, r2, [r0, #16]
	start_tx_locked(dev, data);
    42da:	f106 010c 	add.w	r1, r6, #12
    42de:	4628      	mov	r0, r5
    42e0:	f005 fd12 	bl	9d08 <start_tx_locked.isra.0>
    42e4:	f387 8811 	msr	BASEPRI, r7
    42e8:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    42ec:	7af3      	ldrb	r3, [r6, #11]
    42ee:	2b01      	cmp	r3, #1
    42f0:	d118      	bne.n	4324 <uarte_nrfx_tx+0x98>
	    && timeout != SYS_FOREVER_US) {
    42f2:	1c63      	adds	r3, r4, #1
    42f4:	d016      	beq.n	4324 <uarte_nrfx_tx+0x98>
			return (t * to_hz + off) / from_hz;
    42f6:	480e      	ldr	r0, [pc, #56]	; (4330 <uarte_nrfx_tx+0xa4>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    42f8:	68f5      	ldr	r5, [r6, #12]
    42fa:	4a0e      	ldr	r2, [pc, #56]	; (4334 <uarte_nrfx_tx+0xa8>)
    42fc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    4300:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4304:	2100      	movs	r1, #0
    4306:	2300      	movs	r3, #0
    4308:	fbc6 0104 	smlal	r0, r1, r6, r4
    430c:	f7fb fef8 	bl	100 <__aeabi_uldivmod>
    4310:	3528      	adds	r5, #40	; 0x28
    4312:	4602      	mov	r2, r0
    4314:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    4316:	2000      	movs	r0, #0
    4318:	2100      	movs	r1, #0
    431a:	e9cd 0100 	strd	r0, r1, [sp]
    431e:	4628      	mov	r0, r5
    4320:	f004 fe9a 	bl	9058 <z_impl_k_timer_start>
	return 0;
    4324:	2000      	movs	r0, #0
    4326:	e7c9      	b.n	42bc <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
    4328:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    432a:	f005 fd05 	bl	9d38 <setup_tx_cache.isra.0>
    432e:	e7d4      	b.n	42da <uarte_nrfx_tx+0x4e>
    4330:	000f423f 	.word	0x000f423f
    4334:	000f4240 	.word	0x000f4240

00004338 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    4338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    433a:	6906      	ldr	r6, [r0, #16]
{
    433c:	4604      	mov	r4, r0
    433e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4340:	f005 fe4f 	bl	9fe2 <k_is_in_isr>
    4344:	b910      	cbnz	r0, 434c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    4346:	4b28      	ldr	r3, [pc, #160]	; (43e8 <uarte_nrfx_poll_out+0xb0>)
	int key;

	if (isr_mode) {
    4348:	781b      	ldrb	r3, [r3, #0]
    434a:	bb5b      	cbnz	r3, 43a4 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    434c:	f04f 0320 	mov.w	r3, #32
    4350:	f3ef 8111 	mrs	r1, BASEPRI
    4354:	f383 8812 	msr	BASEPRI_MAX, r3
    4358:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    435c:	4620      	mov	r0, r4
			key = irq_lock();
    435e:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
    4360:	f005 fb2b 	bl	99ba <is_tx_ready>
    4364:	b1c8      	cbz	r0, 439a <uarte_nrfx_poll_out+0x62>
#if CONFIG_UART_ASYNC_API
				if (data->async && data->async->tx_size &&
    4366:	68f3      	ldr	r3, [r6, #12]
    4368:	b15b      	cbz	r3, 4382 <uarte_nrfx_poll_out+0x4a>
    436a:	68da      	ldr	r2, [r3, #12]
    436c:	b14a      	cbz	r2, 4382 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
    436e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    4372:	2a00      	cmp	r2, #0
    4374:	da05      	bge.n	4382 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
    4376:	6862      	ldr	r2, [r4, #4]
    4378:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
    437a:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    437e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    4382:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    4384:	2201      	movs	r2, #1
	data->char_out = c;
    4386:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    438a:	4620      	mov	r0, r4
    438c:	f005 fbe0 	bl	9b50 <tx_start>
	__asm__ volatile(
    4390:	f385 8811 	msr	BASEPRI, r5
    4394:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    4398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    439a:	f381 8811 	msr	BASEPRI, r1
    439e:	f3bf 8f6f 	isb	sy
}
    43a2:	e7d3      	b.n	434c <uarte_nrfx_poll_out+0x14>
{
    43a4:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    43a6:	4620      	mov	r0, r4
    43a8:	f005 fb07 	bl	99ba <is_tx_ready>
    43ac:	b948      	cbnz	r0, 43c2 <uarte_nrfx_poll_out+0x8a>
    43ae:	2001      	movs	r0, #1
    43b0:	f005 fd20 	bl	9df4 <nrfx_busy_wait>
    43b4:	3d01      	subs	r5, #1
    43b6:	d1f6      	bne.n	43a6 <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
    43b8:	2100      	movs	r1, #0
    43ba:	2021      	movs	r0, #33	; 0x21
    43bc:	f004 f9be 	bl	873c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    43c0:	e7f0      	b.n	43a4 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    43c2:	f04f 0320 	mov.w	r3, #32
    43c6:	f3ef 8511 	mrs	r5, BASEPRI
    43ca:	f383 8812 	msr	BASEPRI_MAX, r3
    43ce:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    43d2:	4620      	mov	r0, r4
    43d4:	f005 faf1 	bl	99ba <is_tx_ready>
    43d8:	2800      	cmp	r0, #0
    43da:	d1d2      	bne.n	4382 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    43dc:	f385 8811 	msr	BASEPRI, r5
    43e0:	f3bf 8f6f 	isb	sy
}
    43e4:	e7e8      	b.n	43b8 <uarte_nrfx_poll_out+0x80>
    43e6:	bf00      	nop
    43e8:	20001649 	.word	0x20001649

000043ec <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    43ec:	6843      	ldr	r3, [r0, #4]
{
    43ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
    43f2:	681d      	ldr	r5, [r3, #0]
	if (!hw_rx_counting_enabled(data)
    43f4:	6903      	ldr	r3, [r0, #16]
    43f6:	68db      	ldr	r3, [r3, #12]
    43f8:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
{
    43fc:	b089      	sub	sp, #36	; 0x24
    43fe:	4604      	mov	r4, r0
	if (!hw_rx_counting_enabled(data)
    4400:	b972      	cbnz	r2, 4420 <uarte_nrfx_isr_async+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4402:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
    4406:	b159      	cbz	r1, 4420 <uarte_nrfx_isr_async+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4408:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    440c:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    4410:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    4414:	3201      	adds	r2, #1
    4416:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
    441a:	b009      	add	sp, #36	; 0x24
    441c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4420:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    4424:	b31b      	cbz	r3, 446e <uarte_nrfx_isr_async+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4426:	2100      	movs	r1, #0
    4428:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    442c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4430:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4434:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    4438:	2214      	movs	r2, #20
    443a:	a803      	add	r0, sp, #12
    443c:	f005 fa00 	bl	9840 <memset>
    4440:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    4442:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
    4444:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    4448:	f100 8104 	bmi.w	4654 <uarte_nrfx_isr_async+0x268>
    444c:	07b1      	lsls	r1, r6, #30
    444e:	f100 8103 	bmi.w	4658 <uarte_nrfx_isr_async+0x26c>
    4452:	0772      	lsls	r2, r6, #29
    4454:	f100 8102 	bmi.w	465c <uarte_nrfx_isr_async+0x270>
    4458:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    445c:	4620      	mov	r0, r4
    445e:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    4460:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    4464:	f005 faba 	bl	99dc <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    4468:	4620      	mov	r0, r4
    446a:	f005 fc91 	bl	9d90 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    446e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    4472:	b37b      	cbz	r3, 44d4 <uarte_nrfx_isr_async+0xe8>
    return p_reg->INTENSET & mask;
    4474:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    4478:	06db      	lsls	r3, r3, #27
    447a:	d52b      	bpl.n	44d4 <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    447c:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4480:	6927      	ldr	r7, [r4, #16]
    4482:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    4486:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    448a:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    448c:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    448e:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    4490:	2301      	movs	r3, #1
    4492:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    4496:	3088      	adds	r0, #136	; 0x88
    4498:	f005 fe07 	bl	a0aa <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    449c:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    449e:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    44a2:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    44a6:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    44a8:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    44ac:	1a1b      	subs	r3, r3, r0
    44ae:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    44b0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    44b2:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    44b6:	4408      	add	r0, r1
	if (rx_len > 0) {
    44b8:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    44ba:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    44bc:	dd02      	ble.n	44c4 <uarte_nrfx_isr_async+0xd8>
		notify_uart_rx_rdy(dev, rx_len);
    44be:	4620      	mov	r0, r4
    44c0:	f005 fa93 	bl	99ea <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    44c4:	68f9      	ldr	r1, [r7, #12]
    44c6:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    44ca:	2b00      	cmp	r3, #0
    44cc:	f040 80c8 	bne.w	4660 <uarte_nrfx_isr_async+0x274>
		data->async->is_in_irq = false;
    44d0:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    44d4:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    44d8:	b393      	cbz	r3, 4540 <uarte_nrfx_isr_async+0x154>
    44da:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
    44de:	bb79      	cbnz	r1, 4540 <uarte_nrfx_isr_async+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44e0:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
    44e4:	6926      	ldr	r6, [r4, #16]
    44e6:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
    44ea:	2214      	movs	r2, #20
    44ec:	a803      	add	r0, sp, #12
    44ee:	f005 f9a7 	bl	9840 <memset>
    44f2:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    44f4:	a903      	add	r1, sp, #12
    44f6:	4620      	mov	r0, r4
	struct uart_event evt = {
    44f8:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    44fc:	f005 fa6e 	bl	99dc <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    4500:	68f6      	ldr	r6, [r6, #12]
    4502:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    4504:	1c5f      	adds	r7, r3, #1
    4506:	d01b      	beq.n	4540 <uarte_nrfx_isr_async+0x154>
		data->async->rx_timeout_left = data->async->rx_timeout;
    4508:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    450c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    4510:	f8df 8234 	ldr.w	r8, [pc, #564]	; 4748 <uarte_nrfx_isr_async+0x35c>
    4514:	4a8b      	ldr	r2, [pc, #556]	; (4744 <uarte_nrfx_isr_async+0x358>)
    4516:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    451a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    451e:	f04f 0900 	mov.w	r9, #0
    4522:	fbc0 8901 	smlal	r8, r9, r0, r1
    4526:	2300      	movs	r3, #0
    4528:	4640      	mov	r0, r8
    452a:	4649      	mov	r1, r9
    452c:	f7fb fde8 	bl	100 <__aeabi_uldivmod>
    4530:	4602      	mov	r2, r0
    4532:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    4534:	e9cd 0100 	strd	r0, r1, [sp]
    4538:	f106 0088 	add.w	r0, r6, #136	; 0x88
    453c:	f004 fd8c 	bl	9058 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4540:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    4544:	b333      	cbz	r3, 4594 <uarte_nrfx_isr_async+0x1a8>
    4546:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    454a:	bb1e      	cbnz	r6, 4594 <uarte_nrfx_isr_async+0x1a8>
	struct uarte_nrfx_data *data = get_dev_data(dev);
    454c:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    454e:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
    4552:	68f9      	ldr	r1, [r7, #12]
    4554:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
    4558:	2201      	movs	r2, #1
    455a:	3160      	adds	r1, #96	; 0x60
    455c:	4620      	mov	r0, r4
    455e:	f005 fa5d 	bl	9a1c <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
    4562:	68f9      	ldr	r1, [r7, #12]
    4564:	2201      	movs	r2, #1
    4566:	316c      	adds	r1, #108	; 0x6c
    4568:	4620      	mov	r0, r4
    456a:	f005 fa57 	bl	9a1c <notify_rx_buf_release>
	if (data->async->rx_enabled) {
    456e:	68fb      	ldr	r3, [r7, #12]
    4570:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    4574:	2a00      	cmp	r2, #0
    4576:	f000 80a1 	beq.w	46bc <uarte_nrfx_isr_async+0x2d0>
		data->async->rx_enabled = false;
    457a:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    457e:	6863      	ldr	r3, [r4, #4]
    4580:	685b      	ldr	r3, [r3, #4]
    4582:	06d8      	lsls	r0, r3, #27
    4584:	d503      	bpl.n	458e <uarte_nrfx_isr_async+0x1a2>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    4586:	2102      	movs	r1, #2
    4588:	4620      	mov	r0, r4
    458a:	f005 fb89 	bl	9ca0 <async_uart_release>
	notify_rx_disable(dev);
    458e:	4620      	mov	r0, r4
    4590:	f005 fa5e 	bl	9a50 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4594:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    4598:	b1db      	cbz	r3, 45d2 <uarte_nrfx_isr_async+0x1e6>
    return p_reg->INTENSET & mask;
    459a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    459e:	05d9      	lsls	r1, r3, #23
    45a0:	d517      	bpl.n	45d2 <uarte_nrfx_isr_async+0x1e6>
	return config->uarte_regs;
    45a2:	6863      	ldr	r3, [r4, #4]
    45a4:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    45a6:	f04f 0120 	mov.w	r1, #32
    45aa:	f3ef 8211 	mrs	r2, BASEPRI
    45ae:	f381 8812 	msr	BASEPRI_MAX, r1
    45b2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45b6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    45ba:	b131      	cbz	r1, 45ca <uarte_nrfx_isr_async+0x1de>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45bc:	2100      	movs	r1, #0
    45be:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    45c2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45c6:	2101      	movs	r1, #1
    45c8:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    45ca:	f382 8811 	msr	BASEPRI, r2
    45ce:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45d2:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    45d6:	2b00      	cmp	r3, #0
    45d8:	f43f af1f 	beq.w	441a <uarte_nrfx_isr_async+0x2e>
    return p_reg->INTENSET & mask;
    45dc:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    45e0:	025a      	lsls	r2, r3, #9
    45e2:	f57f af1a 	bpl.w	441a <uarte_nrfx_isr_async+0x2e>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    45e6:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    45e8:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    45ea:	e9d3 7300 	ldrd	r7, r3, [r3]
    45ee:	06db      	lsls	r3, r3, #27
    45f0:	d469      	bmi.n	46c6 <uarte_nrfx_isr_async+0x2da>
	if (!data->async->tx_buf) {
    45f2:	68f3      	ldr	r3, [r6, #12]
    45f4:	689b      	ldr	r3, [r3, #8]
    45f6:	2b00      	cmp	r3, #0
    45f8:	f43f af0f 	beq.w	441a <uarte_nrfx_isr_async+0x2e>
	__asm__ volatile(
    45fc:	f04f 0320 	mov.w	r3, #32
    4600:	f3ef 8211 	mrs	r2, BASEPRI
    4604:	f383 8812 	msr	BASEPRI_MAX, r3
    4608:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    460c:	68f3      	ldr	r3, [r6, #12]
    460e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    4612:	2900      	cmp	r1, #0
    4614:	bfac      	ite	ge
    4616:	f8d3 50c4 	ldrge.w	r5, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    461a:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
    461e:	f382 8811 	msr	BASEPRI, r2
    4622:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    4626:	68f0      	ldr	r0, [r6, #12]
    4628:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    462c:	2b00      	cmp	r3, #0
    462e:	d057      	beq.n	46e0 <uarte_nrfx_isr_async+0x2f4>
	__asm__ volatile(
    4630:	f04f 0320 	mov.w	r3, #32
    4634:	f3ef 8511 	mrs	r5, BASEPRI
    4638:	f383 8812 	msr	BASEPRI_MAX, r3
    463c:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    4640:	f106 010c 	add.w	r1, r6, #12
    4644:	4620      	mov	r0, r4
    4646:	f005 fb5f 	bl	9d08 <start_tx_locked.isra.0>
	__asm__ volatile(
    464a:	f385 8811 	msr	BASEPRI, r5
    464e:	f3bf 8f6f 	isb	sy
				return;
    4652:	e6e2      	b.n	441a <uarte_nrfx_isr_async+0x2e>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    4654:	2601      	movs	r6, #1
    4656:	e701      	b.n	445c <uarte_nrfx_isr_async+0x70>
    4658:	2602      	movs	r6, #2
    465a:	e6ff      	b.n	445c <uarte_nrfx_isr_async+0x70>
    465c:	2604      	movs	r6, #4
    465e:	e6fd      	b.n	445c <uarte_nrfx_isr_async+0x70>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
    4660:	2200      	movs	r2, #0
    4662:	3160      	adds	r1, #96	; 0x60
    4664:	4620      	mov	r0, r4
    4666:	f005 f9d9 	bl	9a1c <notify_rx_buf_release>
	__asm__ volatile(
    466a:	f04f 0320 	mov.w	r3, #32
    466e:	f3ef 8111 	mrs	r1, BASEPRI
    4672:	f383 8812 	msr	BASEPRI_MAX, r3
    4676:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    467a:	68fb      	ldr	r3, [r7, #12]
    467c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    467e:	b1d2      	cbz	r2, 46b6 <uarte_nrfx_isr_async+0x2ca>
		data->async->rx_buf = data->async->rx_next_buf;
    4680:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    4682:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4684:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    4686:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    4688:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    468c:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    468e:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    4692:	b90b      	cbnz	r3, 4698 <uarte_nrfx_isr_async+0x2ac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4694:	2301      	movs	r3, #1
    4696:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    4698:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    469c:	f023 0320 	bic.w	r3, r3, #32
    46a0:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    46a4:	f381 8811 	msr	BASEPRI, r1
    46a8:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    46ac:	68fb      	ldr	r3, [r7, #12]
    46ae:	2200      	movs	r2, #0
    46b0:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    46b4:	e70e      	b.n	44d4 <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46b6:	2301      	movs	r3, #1
    46b8:	6073      	str	r3, [r6, #4]
}
    46ba:	e7f3      	b.n	46a4 <uarte_nrfx_isr_async+0x2b8>
		(void)rx_flush(dev, NULL, 0);
    46bc:	4611      	mov	r1, r2
    46be:	4620      	mov	r0, r4
    46c0:	f005 fab9 	bl	9c36 <rx_flush>
    46c4:	e75b      	b.n	457e <uarte_nrfx_isr_async+0x192>
    p_reg->INTENCLR = mask;
    46c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    46ca:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    46ce:	2101      	movs	r1, #1
    46d0:	4620      	mov	r0, r4
    46d2:	f005 fae5 	bl	9ca0 <async_uart_release>
		if (!data->async->tx_size) {
    46d6:	68f3      	ldr	r3, [r6, #12]
    46d8:	68db      	ldr	r3, [r3, #12]
    46da:	2b00      	cmp	r3, #0
    46dc:	d189      	bne.n	45f2 <uarte_nrfx_isr_async+0x206>
    46de:	e69c      	b.n	441a <uarte_nrfx_isr_async+0x2e>
	if (data->async->tx_buf != data->async->xfer_buf) {
    46e0:	6882      	ldr	r2, [r0, #8]
    46e2:	6903      	ldr	r3, [r0, #16]
    46e4:	429a      	cmp	r2, r3
    46e6:	d00b      	beq.n	4700 <uarte_nrfx_isr_async+0x314>
		if (amount == data->async->xfer_len) {
    46e8:	6942      	ldr	r2, [r0, #20]
    46ea:	6a03      	ldr	r3, [r0, #32]
    46ec:	42aa      	cmp	r2, r5
    46ee:	442b      	add	r3, r5
    46f0:	d125      	bne.n	473e <uarte_nrfx_isr_async+0x352>
			data->async->tx_cache_offset += amount;
    46f2:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    46f4:	f005 fb20 	bl	9d38 <setup_tx_cache.isra.0>
    46f8:	2800      	cmp	r0, #0
    46fa:	d199      	bne.n	4630 <uarte_nrfx_isr_async+0x244>
			amount = data->async->tx_cache_offset;
    46fc:	68f3      	ldr	r3, [r6, #12]
    46fe:	6a1d      	ldr	r5, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    4700:	68f0      	ldr	r0, [r6, #12]
    4702:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    4704:	f005 fcd1 	bl	a0aa <z_impl_k_timer_stop>
	struct uart_event evt = {
    4708:	2214      	movs	r2, #20
    470a:	2100      	movs	r1, #0
    470c:	a803      	add	r0, sp, #12
    470e:	f005 f897 	bl	9840 <memset>
		.data.tx.buf = data->async->tx_buf,
    4712:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    4714:	689a      	ldr	r2, [r3, #8]
    4716:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
    471a:	68da      	ldr	r2, [r3, #12]
    471c:	1aad      	subs	r5, r5, r2
    471e:	bf18      	it	ne
    4720:	2501      	movne	r5, #1
    4722:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    4726:	f88d 500c 	strb.w	r5, [sp, #12]
    472a:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    472e:	2200      	movs	r2, #0
    4730:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    4732:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    4734:	a903      	add	r1, sp, #12
    4736:	4620      	mov	r0, r4
    4738:	f005 f950 	bl	99dc <user_callback>
    473c:	e66d      	b.n	441a <uarte_nrfx_isr_async+0x2e>
			amount += data->async->tx_cache_offset;
    473e:	461d      	mov	r5, r3
    4740:	e7de      	b.n	4700 <uarte_nrfx_isr_async+0x314>
    4742:	bf00      	nop
    4744:	000f4240 	.word	0x000f4240
    4748:	000f423f 	.word	0x000f423f

0000474c <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    474c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4750:	4607      	mov	r7, r0
    4752:	2200      	movs	r2, #0
    4754:	2101      	movs	r1, #1
    4756:	2028      	movs	r0, #40	; 0x28
    4758:	f7fe fa5a 	bl	2c10 <z_arm_irq_priority_set>
    475c:	2028      	movs	r0, #40	; 0x28
    475e:	f7fe fa25 	bl	2bac <arch_irq_enable>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    4762:	f8d7 a004 	ldr.w	sl, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4766:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
    476a:	f8da 4000 	ldr.w	r4, [sl]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    476e:	2300      	movs	r3, #0
    4770:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    4774:	f8c8 7000 	str.w	r7, [r8]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    4778:	687d      	ldr	r5, [r7, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    477a:	68eb      	ldr	r3, [r5, #12]
    477c:	1c5a      	adds	r2, r3, #1
    477e:	d013      	beq.n	47a8 <uarte_1_init+0x5c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4780:	4668      	mov	r0, sp
    4782:	9300      	str	r3, [sp, #0]
    4784:	f7ff fd46 	bl	4214 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4788:	9a00      	ldr	r2, [sp, #0]
    478a:	2301      	movs	r3, #1
    478c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    478e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    4792:	68eb      	ldr	r3, [r5, #12]
    4794:	9300      	str	r3, [sp, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4796:	4668      	mov	r0, sp
    4798:	f7ff fd3c 	bl	4214 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    479c:	9b00      	ldr	r3, [sp, #0]
    479e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    47a2:	2203      	movs	r2, #3
    47a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    47a8:	692b      	ldr	r3, [r5, #16]
    47aa:	1c58      	adds	r0, r3, #1
    47ac:	d00e      	beq.n	47cc <uarte_1_init+0x80>
			nrf_gpio_cfg_input(cfg->rx_pin,
    47ae:	7f2a      	ldrb	r2, [r5, #28]
    47b0:	9300      	str	r3, [sp, #0]
    47b2:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    47b4:	4668      	mov	r0, sp
    47b6:	bf14      	ite	ne
    47b8:	2603      	movne	r6, #3
    47ba:	2600      	moveq	r6, #0
    47bc:	f7ff fd2a 	bl	4214 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    47c0:	9b00      	ldr	r3, [sp, #0]
    47c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    47c6:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
    47c8:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    47cc:	696b      	ldr	r3, [r5, #20]
    47ce:	1c59      	adds	r1, r3, #1
    47d0:	d013      	beq.n	47fa <uarte_1_init+0xae>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    47d2:	4668      	mov	r0, sp
    47d4:	9300      	str	r3, [sp, #0]
    47d6:	f7ff fd1d 	bl	4214 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    47da:	9a00      	ldr	r2, [sp, #0]
    47dc:	2301      	movs	r3, #1
    47de:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    47e0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    47e4:	696b      	ldr	r3, [r5, #20]
    47e6:	9300      	str	r3, [sp, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    47e8:	4668      	mov	r0, sp
    47ea:	f7ff fd13 	bl	4214 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    47ee:	9b00      	ldr	r3, [sp, #0]
    47f0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    47f4:	2203      	movs	r2, #3
    47f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    47fa:	69ab      	ldr	r3, [r5, #24]
    47fc:	1c5a      	adds	r2, r3, #1
    47fe:	d00e      	beq.n	481e <uarte_1_init+0xd2>
			nrf_gpio_cfg_input(cfg->cts_pin,
    4800:	7f6a      	ldrb	r2, [r5, #29]
    4802:	9300      	str	r3, [sp, #0]
    4804:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4806:	4668      	mov	r0, sp
    4808:	bf14      	ite	ne
    480a:	2603      	movne	r6, #3
    480c:	2600      	moveq	r6, #0
    480e:	f7ff fd01 	bl	4214 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4812:	9b00      	ldr	r3, [sp, #0]
    4814:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4818:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
    481a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    481e:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    4822:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    4824:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    4828:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    482c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    4830:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    4834:	6939      	ldr	r1, [r7, #16]
    p_reg->PSEL.CTS = pselcts;
    4836:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    483a:	3104      	adds	r1, #4
    483c:	4638      	mov	r0, r7
    483e:	f7ff fbad 	bl	3f9c <uarte_nrfx_configure>
	if (err) {
    4842:	4681      	mov	r9, r0
    4844:	b9b0      	cbnz	r0, 4874 <uarte_1_init+0x128>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    4846:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    484a:	0798      	lsls	r0, r3, #30
    484c:	d52a      	bpl.n	48a4 <uarte_1_init+0x158>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    484e:	f108 0016 	add.w	r0, r8, #22
    4852:	f001 fcab 	bl	61ac <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4856:	4b77      	ldr	r3, [pc, #476]	; (4a34 <uarte_1_init+0x2e8>)
    4858:	4298      	cmp	r0, r3
    485a:	d00f      	beq.n	487c <uarte_1_init+0x130>
    485c:	4876      	ldr	r0, [pc, #472]	; (4a38 <uarte_1_init+0x2ec>)
    485e:	4b77      	ldr	r3, [pc, #476]	; (4a3c <uarte_1_init+0x2f0>)
		LOG_ERR("Failed to allocate PPI Channel");
    4860:	4977      	ldr	r1, [pc, #476]	; (4a40 <uarte_1_init+0x2f4>)
    4862:	1ac0      	subs	r0, r0, r3
    4864:	08c0      	lsrs	r0, r0, #3
    4866:	0180      	lsls	r0, r0, #6
    4868:	f040 0001 	orr.w	r0, r0, #1
    486c:	f004 ff63 	bl	9736 <log_string_sync>
		return -EIO;
    4870:	f06f 0904 	mvn.w	r9, #4
UART_NRF_UARTE_DEVICE(1);
    4874:	4648      	mov	r0, r9
    4876:	b003      	add	sp, #12
    4878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    487c:	f898 0016 	ldrb.w	r0, [r8, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4880:	00c3      	lsls	r3, r0, #3
    4882:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4886:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    488a:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    488e:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4892:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4896:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    489a:	4a6a      	ldr	r2, [pc, #424]	; (4a44 <uarte_1_init+0x2f8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    489c:	2301      	movs	r3, #1
    489e:	4083      	lsls	r3, r0
    48a0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
    48a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
    48a8:	2b00      	cmp	r3, #0
    48aa:	f000 80af 	beq.w	4a0c <uarte_1_init+0x2c0>
	struct uarte_nrfx_data *data = get_dev_data(dev);
    48ae:	693e      	ldr	r6, [r7, #16]
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    48b0:	687f      	ldr	r7, [r7, #4]
		return data->async->hw_rx_counting;
    48b2:	68f3      	ldr	r3, [r6, #12]
	return config->uarte_regs;
    48b4:	683d      	ldr	r5, [r7, #0]
	if (hw_rx_counting_enabled(data)) {
    48b6:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
    48ba:	b1eb      	cbz	r3, 48f8 <uarte_1_init+0x1ac>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
    48bc:	4962      	ldr	r1, [pc, #392]	; (4a48 <uarte_1_init+0x2fc>)
		ret = nrfx_timer_init(&cfg->timer,
    48be:	4a63      	ldr	r2, [pc, #396]	; (4a4c <uarte_1_init+0x300>)
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
    48c0:	2300      	movs	r3, #0
		ret = nrfx_timer_init(&cfg->timer,
    48c2:	f107 0b20 	add.w	fp, r7, #32
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
    48c6:	e9cd 1300 	strd	r1, r3, [sp]
		ret = nrfx_timer_init(&cfg->timer,
    48ca:	4658      	mov	r0, fp
    48cc:	4669      	mov	r1, sp
    48ce:	f001 fcbb 	bl	6248 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
    48d2:	4a58      	ldr	r2, [pc, #352]	; (4a34 <uarte_1_init+0x2e8>)
    48d4:	4290      	cmp	r0, r2
    48d6:	f000 808e 	beq.w	49f6 <uarte_1_init+0x2aa>
    48da:	4b58      	ldr	r3, [pc, #352]	; (4a3c <uarte_1_init+0x2f0>)
    48dc:	4856      	ldr	r0, [pc, #344]	; (4a38 <uarte_1_init+0x2ec>)
			LOG_ERR("Timer already initialized, "
    48de:	495c      	ldr	r1, [pc, #368]	; (4a50 <uarte_1_init+0x304>)
    48e0:	1ac0      	subs	r0, r0, r3
    48e2:	08c0      	lsrs	r0, r0, #3
    48e4:	0180      	lsls	r0, r0, #6
    48e6:	f040 0001 	orr.w	r0, r0, #1
    48ea:	f004 ff24 	bl	9736 <log_string_sync>
			data->async->hw_rx_counting = false;
    48ee:	68f3      	ldr	r3, [r6, #12]
    48f0:	f04f 0200 	mov.w	r2, #0
    48f4:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	if (hw_rx_counting_enabled(data)) {
    48f8:	68f0      	ldr	r0, [r6, #12]
    48fa:	f890 30d3 	ldrb.w	r3, [r0, #211]	; 0xd3
    48fe:	b1bb      	cbz	r3, 4930 <uarte_1_init+0x1e4>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
    4900:	30c0      	adds	r0, #192	; 0xc0
    4902:	f001 fc53 	bl	61ac <nrfx_ppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
    4906:	4b4b      	ldr	r3, [pc, #300]	; (4a34 <uarte_1_init+0x2e8>)
    4908:	4298      	cmp	r0, r3
    490a:	d011      	beq.n	4930 <uarte_1_init+0x1e4>
    490c:	4b4b      	ldr	r3, [pc, #300]	; (4a3c <uarte_1_init+0x2f0>)
    490e:	484a      	ldr	r0, [pc, #296]	; (4a38 <uarte_1_init+0x2ec>)
			LOG_ERR("Failed to allocate PPI Channel, "
    4910:	4950      	ldr	r1, [pc, #320]	; (4a54 <uarte_1_init+0x308>)
    4912:	1ac0      	subs	r0, r0, r3
    4914:	08c0      	lsrs	r0, r0, #3
    4916:	0180      	lsls	r0, r0, #6
    4918:	f040 0001 	orr.w	r0, r0, #1
    491c:	f004 ff0b 	bl	9736 <log_string_sync>
			data->async->hw_rx_counting = false;
    4920:	68f3      	ldr	r3, [r6, #12]
    4922:	2200      	movs	r2, #0
    4924:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
			nrfx_timer_uninit(&cfg->timer);
    4928:	f107 0020 	add.w	r0, r7, #32
    492c:	f001 fd64 	bl	63f8 <nrfx_timer_uninit>
	if (hw_rx_counting_enabled(data)) {
    4930:	68f3      	ldr	r3, [r6, #12]
    4932:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
    4936:	2a00      	cmp	r2, #0
    4938:	d064      	beq.n	4a04 <uarte_1_init+0x2b8>
}

NRF_STATIC_INLINE uint32_t nrf_timer_task_address_get(NRF_TIMER_Type const * p_reg,
                                                      nrf_timer_task_t       task)
{
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
    493a:	6a3a      	ldr	r2, [r7, #32]
		ret = nrfx_ppi_channel_assign(
    493c:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
    4940:	3208      	adds	r2, #8
    4942:	f505 7184 	add.w	r1, r5, #264	; 0x108
    4946:	f001 fc37 	bl	61b8 <nrfx_ppi_channel_assign>
		if (ret != NRFX_SUCCESS) {
    494a:	4b3a      	ldr	r3, [pc, #232]	; (4a34 <uarte_1_init+0x2e8>)
    494c:	4298      	cmp	r0, r3
		ret = nrfx_ppi_channel_assign(
    494e:	4607      	mov	r7, r0
		if (ret != NRFX_SUCCESS) {
    4950:	d18e      	bne.n	4870 <uarte_1_init+0x124>
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
    4952:	68f3      	ldr	r3, [r6, #12]
    4954:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
    4958:	f001 fc5a 	bl	6210 <nrfx_ppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
    495c:	42b8      	cmp	r0, r7
    495e:	d187      	bne.n	4870 <uarte_1_init+0x124>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    4960:	68f0      	ldr	r0, [r6, #12]
    p_reg->INTENSET = mask;
    4962:	4a3d      	ldr	r2, [pc, #244]	; (4a58 <uarte_1_init+0x30c>)
    4964:	2301      	movs	r3, #1
    4966:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
    496a:	f8c5 2304 	str.w	r2, [r5, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    496e:	2208      	movs	r2, #8
    4970:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4974:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    4978:	b1a2      	cbz	r2, 49a4 <uarte_1_init+0x258>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    497a:	606b      	str	r3, [r5, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    497c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    4980:	b91b      	cbnz	r3, 498a <uarte_1_init+0x23e>
    4982:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    4986:	2b00      	cmp	r3, #0
    4988:	d0f8      	beq.n	497c <uarte_1_init+0x230>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    498a:	2300      	movs	r3, #0
    498c:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
    4990:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
    4994:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    4998:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    499c:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
    49a0:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    49a4:	492d      	ldr	r1, [pc, #180]	; (4a5c <uarte_1_init+0x310>)
    49a6:	2200      	movs	r2, #0
    49a8:	3088      	adds	r0, #136	; 0x88
    49aa:	f005 fb72 	bl	a092 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    49ae:	68f3      	ldr	r3, [r6, #12]
	timer->user_data = user_data;
    49b0:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    49b4:	68f0      	ldr	r0, [r6, #12]
    49b6:	492a      	ldr	r1, [pc, #168]	; (4a60 <uarte_1_init+0x314>)
    49b8:	2200      	movs	r2, #0
    49ba:	3028      	adds	r0, #40	; 0x28
    49bc:	f005 fb69 	bl	a092 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    49c0:	68f3      	ldr	r3, [r6, #12]
    49c2:	65de      	str	r6, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    49c4:	f8da 3004 	ldr.w	r3, [sl, #4]
    49c8:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    49ca:	bf5c      	itt	pl
    49cc:	f44f 7280 	movpl.w	r2, #256	; 0x100
    49d0:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    49d4:	06db      	lsls	r3, r3, #27
    49d6:	bf44      	itt	mi
    49d8:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    49dc:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    49e0:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    49e4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    49e8:	2300      	movs	r3, #0
    49ea:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49ee:	2301      	movs	r3, #1
    49f0:	60a3      	str	r3, [r4, #8]
    49f2:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(1);
    49f4:	e73e      	b.n	4874 <uarte_1_init+0x128>
			nrfx_timer_enable(&cfg->timer);
    49f6:	4658      	mov	r0, fp
    49f8:	f001 fcb8 	bl	636c <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
    49fc:	4658      	mov	r0, fp
    49fe:	f001 fd19 	bl	6434 <nrfx_timer_clear>
    4a02:	e779      	b.n	48f8 <uarte_1_init+0x1ac>
    p_reg->INTENSET = mask;
    4a04:	2304      	movs	r3, #4
    4a06:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	if (ret != 0) {
    4a0a:	e7a9      	b.n	4960 <uarte_1_init+0x214>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4a0c:	2308      	movs	r3, #8
    4a0e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    4a12:	f89a 3008 	ldrb.w	r3, [sl, #8]
    4a16:	2b00      	cmp	r3, #0
    4a18:	d1d4      	bne.n	49c4 <uarte_1_init+0x278>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a1a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4a1e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    4a22:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4a26:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4a2a:	2301      	movs	r3, #1
    4a2c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a30:	6023      	str	r3, [r4, #0]
}
    4a32:	e7c7      	b.n	49c4 <uarte_1_init+0x278>
    4a34:	0bad0000 	.word	0x0bad0000
    4a38:	0000a394 	.word	0x0000a394
    4a3c:	0000a33c 	.word	0x0000a33c
    4a40:	0000b2ec 	.word	0x0000b2ec
    4a44:	4001f000 	.word	0x4001f000
    4a48:	07030100 	.word	0x07030100
    4a4c:	000099db 	.word	0x000099db
    4a50:	0000b30b 	.word	0x0000b30b
    4a54:	0000b34b 	.word	0x0000b34b
    4a58:	000a0210 	.word	0x000a0210
    4a5c:	00009b8b 	.word	0x00009b8b
    4a60:	00009d89 	.word	0x00009d89

00004a64 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4a64:	4919      	ldr	r1, [pc, #100]	; (4acc <sys_clock_timeout_handler+0x68>)
{
    4a66:	b570      	push	{r4, r5, r6, lr}
    4a68:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4a6a:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4a6e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    4a70:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4a74:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4a78:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4a7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4a7e:	f04f 0500 	mov.w	r5, #0
    4a82:	d20a      	bcs.n	4a9a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4a84:	4b12      	ldr	r3, [pc, #72]	; (4ad0 <sys_clock_timeout_handler+0x6c>)
    4a86:	6819      	ldr	r1, [r3, #0]
    4a88:	060a      	lsls	r2, r1, #24
    4a8a:	0a0b      	lsrs	r3, r1, #8
    4a8c:	1992      	adds	r2, r2, r6
    4a8e:	4911      	ldr	r1, [pc, #68]	; (4ad4 <sys_clock_timeout_handler+0x70>)
    4a90:	f143 0300 	adc.w	r3, r3, #0
    4a94:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    4a98:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4a9a:	f004 f955 	bl	8d48 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    4a9e:	00a3      	lsls	r3, r4, #2
    4aa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4aa4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4aa8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    4aac:	42b2      	cmp	r2, r6
    4aae:	d10b      	bne.n	4ac8 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    4ab0:	b91d      	cbnz	r5, 4aba <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    4ab2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4ab6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4aba:	4b07      	ldr	r3, [pc, #28]	; (4ad8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4abc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    4ac0:	fa00 f404 	lsl.w	r4, r0, r4
    4ac4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    4ac8:	bd70      	pop	{r4, r5, r6, pc}
    4aca:	bf00      	nop
    4acc:	20000750 	.word	0x20000750
    4ad0:	200010a4 	.word	0x200010a4
    4ad4:	20000738 	.word	0x20000738
    4ad8:	40011000 	.word	0x40011000

00004adc <compare_int_lock>:
{
    4adc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4ade:	2301      	movs	r3, #1
    4ae0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4ae2:	4a11      	ldr	r2, [pc, #68]	; (4b28 <compare_int_lock+0x4c>)
    4ae4:	f3bf 8f5b 	dmb	ish
    4ae8:	43dc      	mvns	r4, r3
    4aea:	e852 1f00 	ldrex	r1, [r2]
    4aee:	ea01 0c04 	and.w	ip, r1, r4
    4af2:	e842 ce00 	strex	lr, ip, [r2]
    4af6:	f1be 0f00 	cmp.w	lr, #0
    4afa:	d1f6      	bne.n	4aea <compare_int_lock+0xe>
    4afc:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4b04:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    4b08:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4b0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4b10:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4b14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4b18:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    4b1c:	420b      	tst	r3, r1
}
    4b1e:	bf14      	ite	ne
    4b20:	2001      	movne	r0, #1
    4b22:	2000      	moveq	r0, #0
    4b24:	bd10      	pop	{r4, pc}
    4b26:	bf00      	nop
    4b28:	200010a0 	.word	0x200010a0

00004b2c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    4b2c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4b2e:	4a12      	ldr	r2, [pc, #72]	; (4b78 <compare_int_unlock.part.0+0x4c>)
    4b30:	f3bf 8f5b 	dmb	ish
    4b34:	4083      	lsls	r3, r0
    4b36:	e852 1f00 	ldrex	r1, [r2]
    4b3a:	4319      	orrs	r1, r3
    4b3c:	e842 1c00 	strex	ip, r1, [r2]
    4b40:	f1bc 0f00 	cmp.w	ip, #0
    4b44:	d1f7      	bne.n	4b36 <compare_int_unlock.part.0+0xa>
    4b46:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    4b4a:	4a0c      	ldr	r2, [pc, #48]	; (4b7c <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b50:	4083      	lsls	r3, r0
    4b52:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4b56:	4b0a      	ldr	r3, [pc, #40]	; (4b80 <compare_int_unlock.part.0+0x54>)
    4b58:	f3bf 8f5b 	dmb	ish
    4b5c:	681b      	ldr	r3, [r3, #0]
    4b5e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4b62:	fa23 f000 	lsr.w	r0, r3, r0
    4b66:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b68:	bf42      	ittt	mi
    4b6a:	4b06      	ldrmi	r3, [pc, #24]	; (4b84 <compare_int_unlock.part.0+0x58>)
    4b6c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4b70:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    4b74:	4770      	bx	lr
    4b76:	bf00      	nop
    4b78:	200010a0 	.word	0x200010a0
    4b7c:	40011000 	.word	0x40011000
    4b80:	2000109c 	.word	0x2000109c
    4b84:	e000e100 	.word	0xe000e100

00004b88 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4b88:	4b0d      	ldr	r3, [pc, #52]	; (4bc0 <z_nrf_rtc_timer_read+0x38>)
    4b8a:	681b      	ldr	r3, [r3, #0]
    4b8c:	0a19      	lsrs	r1, r3, #8
    4b8e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4b90:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    4b94:	4b0b      	ldr	r3, [pc, #44]	; (4bc4 <z_nrf_rtc_timer_read+0x3c>)
    4b96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4b9a:	18c0      	adds	r0, r0, r3
    4b9c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4ba4:	d20a      	bcs.n	4bbc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    4ba6:	4b08      	ldr	r3, [pc, #32]	; (4bc8 <z_nrf_rtc_timer_read+0x40>)
    4ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
    4bac:	4299      	cmp	r1, r3
    4bae:	bf08      	it	eq
    4bb0:	4290      	cmpeq	r0, r2
    4bb2:	d203      	bcs.n	4bbc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4bb4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4bb8:	f141 0100 	adc.w	r1, r1, #0
}
    4bbc:	4770      	bx	lr
    4bbe:	bf00      	nop
    4bc0:	200010a4 	.word	0x200010a4
    4bc4:	40011000 	.word	0x40011000
    4bc8:	20000738 	.word	0x20000738

00004bcc <compare_set>:
{
    4bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bd0:	b085      	sub	sp, #20
    4bd2:	4616      	mov	r6, r2
    4bd4:	461f      	mov	r7, r3
    4bd6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4bd8:	f7ff ff80 	bl	4adc <compare_int_lock>
    4bdc:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4bde:	f7ff ffd3 	bl	4b88 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4be2:	42b9      	cmp	r1, r7
    4be4:	bf08      	it	eq
    4be6:	42b0      	cmpeq	r0, r6
    4be8:	d27f      	bcs.n	4cea <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    4bea:	ebb6 0800 	subs.w	r8, r6, r0
    4bee:	eb67 0901 	sbc.w	r9, r7, r1
    4bf2:	2300      	movs	r3, #0
    4bf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4bf8:	454b      	cmp	r3, r9
    4bfa:	bf08      	it	eq
    4bfc:	4542      	cmpeq	r2, r8
    4bfe:	f0c0 8085 	bcc.w	4d0c <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    4c02:	4b44      	ldr	r3, [pc, #272]	; (4d14 <compare_set+0x148>)
    4c04:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    4c08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4c0c:	429f      	cmp	r7, r3
    4c0e:	bf08      	it	eq
    4c10:	4296      	cmpeq	r6, r2
    4c12:	d054      	beq.n	4cbe <compare_set+0xf2>
    4c14:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4c18:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    4c1c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4c20:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4c24:	fa0b f205 	lsl.w	r2, fp, r5
    4c28:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4c2c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4c30:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4c34:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    4c36:	4a38      	ldr	r2, [pc, #224]	; (4d18 <compare_set+0x14c>)
    return p_reg->CC[ch];
    4c38:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    4c3c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4c40:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    4c44:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4c48:	461c      	mov	r4, r3
    4c4a:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    4c4c:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4c50:	eba0 000a 	sub.w	r0, r0, sl
    4c54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4c58:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    4c5c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    4c5e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    4c62:	d105      	bne.n	4c70 <compare_set+0xa4>
    4c64:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    4c66:	2013      	movs	r0, #19
    4c68:	f005 fa0f 	bl	a08a <z_impl_k_busy_wait>
    4c6c:	4a2a      	ldr	r2, [pc, #168]	; (4d18 <compare_set+0x14c>)
    4c6e:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    4c70:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    4c72:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    4c76:	eba4 000c 	sub.w	r0, r4, ip
    4c7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    4c7e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4c82:	bf88      	it	hi
    4c84:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4c86:	2000      	movs	r0, #0
    4c88:	f8c8 0000 	str.w	r0, [r8]
    4c8c:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    4c90:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4c94:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4c98:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4c9c:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    4ca0:	4582      	cmp	sl, r0
    4ca2:	d006      	beq.n	4cb2 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    4ca4:	1a20      	subs	r0, r4, r0
    4ca6:	3802      	subs	r0, #2
    4ca8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    4cac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4cb0:	d819      	bhi.n	4ce6 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    4cb2:	1ae4      	subs	r4, r4, r3
    4cb4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    4cb8:	1932      	adds	r2, r6, r4
    4cba:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    4cbe:	4c15      	ldr	r4, [pc, #84]	; (4d14 <compare_set+0x148>)
    4cc0:	0129      	lsls	r1, r5, #4
    4cc2:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    4cc6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    4cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    4ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    4cce:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    4cd0:	6043      	str	r3, [r0, #4]
	return ret;
    4cd2:	2400      	movs	r4, #0
	if (key) {
    4cd4:	9b01      	ldr	r3, [sp, #4]
    4cd6:	b113      	cbz	r3, 4cde <compare_set+0x112>
    4cd8:	4628      	mov	r0, r5
    4cda:	f7ff ff27 	bl	4b2c <compare_int_unlock.part.0>
}
    4cde:	4620      	mov	r0, r4
    4ce0:	b005      	add	sp, #20
    4ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ce6:	4620      	mov	r0, r4
    4ce8:	e7b0      	b.n	4c4c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    4cea:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4cec:	4a0b      	ldr	r2, [pc, #44]	; (4d1c <compare_set+0x150>)
    4cee:	f3bf 8f5b 	dmb	ish
    4cf2:	40ab      	lsls	r3, r5
    4cf4:	e852 1f00 	ldrex	r1, [r2]
    4cf8:	4319      	orrs	r1, r3
    4cfa:	e842 1000 	strex	r0, r1, [r2]
    4cfe:	2800      	cmp	r0, #0
    4d00:	d1f8      	bne.n	4cf4 <compare_set+0x128>
    4d02:	f3bf 8f5b 	dmb	ish
    4d06:	4632      	mov	r2, r6
    4d08:	463b      	mov	r3, r7
    4d0a:	e7d8      	b.n	4cbe <compare_set+0xf2>
			return -EINVAL;
    4d0c:	f06f 0415 	mvn.w	r4, #21
    4d10:	e7e0      	b.n	4cd4 <compare_set+0x108>
    4d12:	bf00      	nop
    4d14:	20000740 	.word	0x20000740
    4d18:	40011000 	.word	0x40011000
    4d1c:	2000109c 	.word	0x2000109c

00004d20 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4d20:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4d22:	4b19      	ldr	r3, [pc, #100]	; (4d88 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    4d24:	4d19      	ldr	r5, [pc, #100]	; (4d8c <sys_clock_driver_init+0x6c>)
    4d26:	2400      	movs	r4, #0
    4d28:	f04f 30ff 	mov.w	r0, #4294967295
    4d2c:	f04f 31ff 	mov.w	r1, #4294967295
    4d30:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    4d34:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    4d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4d3c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d40:	4b13      	ldr	r3, [pc, #76]	; (4d90 <sys_clock_driver_init+0x70>)
    4d42:	2602      	movs	r6, #2
    4d44:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4d48:	2101      	movs	r1, #1
    4d4a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    4d4e:	2011      	movs	r0, #17
    4d50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4d54:	4622      	mov	r2, r4
    4d56:	f7fd ff5b 	bl	2c10 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4d5a:	2011      	movs	r0, #17
    4d5c:	f7fd ff26 	bl	2bac <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4d60:	4a0c      	ldr	r2, [pc, #48]	; (4d94 <sys_clock_driver_init+0x74>)
    4d62:	2301      	movs	r3, #1
    4d64:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4d66:	4a0c      	ldr	r2, [pc, #48]	; (4d98 <sys_clock_driver_init+0x78>)
    4d68:	602b      	str	r3, [r5, #0]
    4d6a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4d6c:	4b0b      	ldr	r3, [pc, #44]	; (4d9c <sys_clock_driver_init+0x7c>)
    4d6e:	4a0c      	ldr	r2, [pc, #48]	; (4da0 <sys_clock_driver_init+0x80>)
    4d70:	9300      	str	r3, [sp, #0]
    4d72:	9401      	str	r4, [sp, #4]
    4d74:	2300      	movs	r3, #0
    4d76:	4620      	mov	r0, r4
    4d78:	f7ff ff28 	bl	4bcc <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4d7c:	4630      	mov	r0, r6
    4d7e:	f7fe fe41 	bl	3a04 <z_nrf_clock_control_lf_on>

	return 0;
}
    4d82:	4620      	mov	r0, r4
    4d84:	b002      	add	sp, #8
    4d86:	bd70      	pop	{r4, r5, r6, pc}
    4d88:	20000740 	.word	0x20000740
    4d8c:	40011000 	.word	0x40011000
    4d90:	e000e100 	.word	0xe000e100
    4d94:	40011008 	.word	0x40011008
    4d98:	200010a0 	.word	0x200010a0
    4d9c:	00004a65 	.word	0x00004a65
    4da0:	007fffff 	.word	0x007fffff

00004da4 <rtc_nrf_isr>:
{
    4da4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4da8:	4c34      	ldr	r4, [pc, #208]	; (4e7c <rtc_nrf_isr+0xd8>)
    4daa:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4dae:	079a      	lsls	r2, r3, #30
    4db0:	d509      	bpl.n	4dc6 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4db2:	4b33      	ldr	r3, [pc, #204]	; (4e80 <rtc_nrf_isr+0xdc>)
    4db4:	681a      	ldr	r2, [r3, #0]
    4db6:	b132      	cbz	r2, 4dc6 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4db8:	2200      	movs	r2, #0
    4dba:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    4dbc:	4a31      	ldr	r2, [pc, #196]	; (4e84 <rtc_nrf_isr+0xe0>)
    4dbe:	681b      	ldr	r3, [r3, #0]
    4dc0:	6813      	ldr	r3, [r2, #0]
    4dc2:	3301      	adds	r3, #1
    4dc4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4dc6:	f04f 0320 	mov.w	r3, #32
    4dca:	f3ef 8211 	mrs	r2, BASEPRI
    4dce:	f383 8812 	msr	BASEPRI_MAX, r3
    4dd2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    4dd6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4dda:	03db      	lsls	r3, r3, #15
    4ddc:	d512      	bpl.n	4e04 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4dde:	f3bf 8f5b 	dmb	ish
    4de2:	4b29      	ldr	r3, [pc, #164]	; (4e88 <rtc_nrf_isr+0xe4>)
    4de4:	e853 1f00 	ldrex	r1, [r3]
    4de8:	f021 0001 	bic.w	r0, r1, #1
    4dec:	e843 0600 	strex	r6, r0, [r3]
    4df0:	2e00      	cmp	r6, #0
    4df2:	d1f7      	bne.n	4de4 <rtc_nrf_isr+0x40>
    4df4:	f3bf 8f5b 	dmb	ish
    4df8:	4b24      	ldr	r3, [pc, #144]	; (4e8c <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4dfa:	2900      	cmp	r1, #0
    4dfc:	d136      	bne.n	4e6c <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dfe:	6819      	ldr	r1, [r3, #0]
		if (result) {
    4e00:	2900      	cmp	r1, #0
    4e02:	d133      	bne.n	4e6c <rtc_nrf_isr+0xc8>
{
    4e04:	2300      	movs	r3, #0
	__asm__ volatile(
    4e06:	f382 8811 	msr	BASEPRI, r2
    4e0a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    4e0e:	b353      	cbz	r3, 4e66 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    4e10:	f7ff feba 	bl	4b88 <z_nrf_rtc_timer_read>
    4e14:	4606      	mov	r6, r0
	__asm__ volatile(
    4e16:	f04f 0320 	mov.w	r3, #32
    4e1a:	f3ef 8011 	mrs	r0, BASEPRI
    4e1e:	f383 8812 	msr	BASEPRI_MAX, r3
    4e22:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    4e26:	4b1a      	ldr	r3, [pc, #104]	; (4e90 <rtc_nrf_isr+0xec>)
    4e28:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    4e2c:	4549      	cmp	r1, r9
    4e2e:	bf08      	it	eq
    4e30:	4546      	cmpeq	r6, r8
    4e32:	f04f 0200 	mov.w	r2, #0
    4e36:	d31e      	bcc.n	4e76 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4e38:	f04f 36ff 	mov.w	r6, #4294967295
    4e3c:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    4e40:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4e44:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    4e48:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4e4e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    4e52:	f380 8811 	msr	BASEPRI, r0
    4e56:	f3bf 8f6f 	isb	sy
		if (handler) {
    4e5a:	b121      	cbz	r1, 4e66 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    4e5c:	9500      	str	r5, [sp, #0]
    4e5e:	4642      	mov	r2, r8
    4e60:	464b      	mov	r3, r9
    4e62:	2000      	movs	r0, #0
    4e64:	4788      	blx	r1
}
    4e66:	b003      	add	sp, #12
    4e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4e6c:	2100      	movs	r1, #0
    4e6e:	6019      	str	r1, [r3, #0]
    4e70:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4e72:	2301      	movs	r3, #1
}
    4e74:	e7c7      	b.n	4e06 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4e76:	4611      	mov	r1, r2
    4e78:	e7eb      	b.n	4e52 <rtc_nrf_isr+0xae>
    4e7a:	bf00      	nop
    4e7c:	40011000 	.word	0x40011000
    4e80:	40011104 	.word	0x40011104
    4e84:	200010a4 	.word	0x200010a4
    4e88:	2000109c 	.word	0x2000109c
    4e8c:	40011140 	.word	0x40011140
    4e90:	20000740 	.word	0x20000740

00004e94 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4e94:	4b14      	ldr	r3, [pc, #80]	; (4ee8 <sys_clock_set_timeout+0x54>)
{
    4e96:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4e98:	f1b0 3fff 	cmp.w	r0, #4294967295
    4e9c:	bf08      	it	eq
    4e9e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4ea0:	1e44      	subs	r4, r0, #1
    4ea2:	2c00      	cmp	r4, #0
    4ea4:	dd1e      	ble.n	4ee4 <sys_clock_set_timeout+0x50>
    4ea6:	429c      	cmp	r4, r3
    4ea8:	bfa8      	it	ge
    4eaa:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4eac:	f7ff fe6c 	bl	4b88 <z_nrf_rtc_timer_read>
    4eb0:	4b0e      	ldr	r3, [pc, #56]	; (4eec <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4eb2:	490f      	ldr	r1, [pc, #60]	; (4ef0 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4eb8:	1a80      	subs	r0, r0, r2
		ticks = 0;
    4eba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4ebe:	bf28      	it	cs
    4ec0:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4ec2:	3001      	adds	r0, #1
    4ec4:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    4ec6:	4808      	ldr	r0, [pc, #32]	; (4ee8 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4ec8:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    4eca:	4284      	cmp	r4, r0
    4ecc:	bf28      	it	cs
    4ece:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4ed0:	1912      	adds	r2, r2, r4
    4ed2:	f04f 0000 	mov.w	r0, #0
    4ed6:	9001      	str	r0, [sp, #4]
    4ed8:	f143 0300 	adc.w	r3, r3, #0
    4edc:	f7ff fe76 	bl	4bcc <compare_set>
}
    4ee0:	b002      	add	sp, #8
    4ee2:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4ee4:	2400      	movs	r4, #0
    4ee6:	e7e1      	b.n	4eac <sys_clock_set_timeout+0x18>
    4ee8:	007fffff 	.word	0x007fffff
    4eec:	20000750 	.word	0x20000750
    4ef0:	00004a65 	.word	0x00004a65

00004ef4 <sys_clock_elapsed>:
{
    4ef4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4ef6:	f7ff fe47 	bl	4b88 <z_nrf_rtc_timer_read>
    4efa:	4b02      	ldr	r3, [pc, #8]	; (4f04 <sys_clock_elapsed+0x10>)
    4efc:	681b      	ldr	r3, [r3, #0]
}
    4efe:	1ac0      	subs	r0, r0, r3
    4f00:	bd08      	pop	{r3, pc}
    4f02:	bf00      	nop
    4f04:	20000750 	.word	0x20000750

00004f08 <z_impl_gpio_pin_configure>:
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    4f08:	6843      	ldr	r3, [r0, #4]
{
    4f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    4f0e:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
    4f10:	f8d0 9008 	ldr.w	r9, [r0, #8]
	struct gpio_driver_data *data =
    4f14:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    4f18:	2601      	movs	r6, #1
    4f1a:	408e      	lsls	r6, r1
    4f1c:	421e      	tst	r6, r3
{
    4f1e:	4604      	mov	r4, r0
    4f20:	460d      	mov	r5, r1
    4f22:	4617      	mov	r7, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    4f24:	d10a      	bne.n	4f3c <z_impl_gpio_pin_configure+0x34>
    4f26:	490c      	ldr	r1, [pc, #48]	; (4f58 <z_impl_gpio_pin_configure+0x50>)
    4f28:	480c      	ldr	r0, [pc, #48]	; (4f5c <z_impl_gpio_pin_configure+0x54>)
    4f2a:	f240 22fd 	movw	r2, #765	; 0x2fd
    4f2e:	f004 fb21 	bl	9574 <printk>
    4f32:	4809      	ldr	r0, [pc, #36]	; (4f58 <z_impl_gpio_pin_configure+0x50>)
    4f34:	f240 21fd 	movw	r1, #765	; 0x2fd
    4f38:	f004 fbe8 	bl	970c <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4f3c:	f8d8 3000 	ldr.w	r3, [r8]
    4f40:	ea23 0606 	bic.w	r6, r3, r6
    4f44:	f8c8 6000 	str.w	r6, [r8]
	}

	return api->pin_configure(port, pin, flags);
    4f48:	f8d9 3000 	ldr.w	r3, [r9]
    4f4c:	463a      	mov	r2, r7
    4f4e:	4629      	mov	r1, r5
    4f50:	4620      	mov	r0, r4
}
    4f52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_configure(port, pin, flags);
    4f56:	4718      	bx	r3
    4f58:	0000b3a0 	.word	0x0000b3a0
    4f5c:	0000a66d 	.word	0x0000a66d

00004f60 <z_impl_gpio_pin_interrupt_configure>:
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    4f60:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
    4f64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
    4f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_driver_config *const cfg =
    4f6c:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
{
    4f70:	4605      	mov	r5, r0
    4f72:	460e      	mov	r6, r1
    4f74:	4614      	mov	r4, r2
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    4f76:	d136      	bne.n	4fe6 <z_impl_gpio_pin_interrupt_configure+0x86>
    4f78:	4920      	ldr	r1, [pc, #128]	; (4ffc <z_impl_gpio_pin_interrupt_configure+0x9c>)
    4f7a:	4821      	ldr	r0, [pc, #132]	; (5000 <z_impl_gpio_pin_interrupt_configure+0xa0>)
    4f7c:	f240 2289 	movw	r2, #649	; 0x289
    4f80:	f004 faf8 	bl	9574 <printk>
    4f84:	f240 2189 	movw	r1, #649	; 0x289
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
    4f88:	481c      	ldr	r0, [pc, #112]	; (4ffc <z_impl_gpio_pin_interrupt_configure+0x9c>)
    4f8a:	f004 fbbf 	bl	970c <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    4f8e:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
    4f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    4f96:	d10a      	bne.n	4fae <z_impl_gpio_pin_interrupt_configure+0x4e>
    4f98:	4918      	ldr	r1, [pc, #96]	; (4ffc <z_impl_gpio_pin_interrupt_configure+0x9c>)
    4f9a:	4819      	ldr	r0, [pc, #100]	; (5000 <z_impl_gpio_pin_interrupt_configure+0xa0>)
    4f9c:	f240 2297 	movw	r2, #663	; 0x297
    4fa0:	f004 fae8 	bl	9574 <printk>
    4fa4:	4815      	ldr	r0, [pc, #84]	; (4ffc <z_impl_gpio_pin_interrupt_configure+0x9c>)
    4fa6:	f240 2197 	movw	r1, #663	; 0x297
    4faa:	f004 fbaf 	bl	970c <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    4fae:	f8d8 2000 	ldr.w	r2, [r8]
    4fb2:	2301      	movs	r3, #1
    4fb4:	40b3      	lsls	r3, r6
    4fb6:	4213      	tst	r3, r2
    4fb8:	d10a      	bne.n	4fd0 <z_impl_gpio_pin_interrupt_configure+0x70>
    4fba:	4910      	ldr	r1, [pc, #64]	; (4ffc <z_impl_gpio_pin_interrupt_configure+0x9c>)
    4fbc:	4810      	ldr	r0, [pc, #64]	; (5000 <z_impl_gpio_pin_interrupt_configure+0xa0>)
    4fbe:	f240 229d 	movw	r2, #669	; 0x29d
    4fc2:	f004 fad7 	bl	9574 <printk>
    4fc6:	480d      	ldr	r0, [pc, #52]	; (4ffc <z_impl_gpio_pin_interrupt_configure+0x9c>)
    4fc8:	f240 219d 	movw	r1, #669	; 0x29d
    4fcc:	f004 fb9e 	bl	970c <assert_post_action>
	return api->pin_interrupt_configure(port, pin, mode, trig);
    4fd0:	69bf      	ldr	r7, [r7, #24]
    4fd2:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
    4fd6:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
    4fda:	4631      	mov	r1, r6
    4fdc:	4628      	mov	r0, r5
    4fde:	46bc      	mov	ip, r7
}
    4fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    4fe4:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	d1d1      	bne.n	4f8e <z_impl_gpio_pin_interrupt_configure+0x2e>
    4fea:	4904      	ldr	r1, [pc, #16]	; (4ffc <z_impl_gpio_pin_interrupt_configure+0x9c>)
    4fec:	4804      	ldr	r0, [pc, #16]	; (5000 <z_impl_gpio_pin_interrupt_configure+0xa0>)
    4fee:	f240 228d 	movw	r2, #653	; 0x28d
    4ff2:	f004 fabf 	bl	9574 <printk>
    4ff6:	f240 218d 	movw	r1, #653	; 0x28d
    4ffa:	e7c5      	b.n	4f88 <z_impl_gpio_pin_interrupt_configure+0x28>
    4ffc:	0000b3a0 	.word	0x0000b3a0
    5000:	0000a66d 	.word	0x0000a66d

00005004 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
    5004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
    5008:	2400      	movs	r4, #0
    500a:	4f21      	ldr	r7, [pc, #132]	; (5090 <get_buttons+0x8c>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
		int val;

		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
    500c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 50a0 <get_buttons+0x9c>
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    5010:	f8df 8090 	ldr.w	r8, [pc, #144]	; 50a4 <get_buttons+0xa0>
    5014:	f8df a090 	ldr.w	sl, [pc, #144]	; 50a8 <get_buttons+0xa4>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    5018:	4625      	mov	r5, r4
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
    501a:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    501e:	f857 bb04 	ldr.w	fp, [r7], #4
    5022:	791b      	ldrb	r3, [r3, #4]
    5024:	2601      	movs	r6, #1
    5026:	409e      	lsls	r6, r3
    5028:	f8db 3004 	ldr.w	r3, [fp, #4]
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	421e      	tst	r6, r3
    5030:	d10a      	bne.n	5048 <get_buttons+0x44>
    5032:	4641      	mov	r1, r8
    5034:	4650      	mov	r0, sl
    5036:	f240 423a 	movw	r2, #1082	; 0x43a
    503a:	f004 fa9b 	bl	9574 <printk>
    503e:	f240 413a 	movw	r1, #1082	; 0x43a
    5042:	4640      	mov	r0, r8
    5044:	f004 fb62 	bl	970c <assert_post_action>
	return api->port_get_raw(port, value);
    5048:	f8db 3008 	ldr.w	r3, [fp, #8]
    504c:	a901      	add	r1, sp, #4
    504e:	685b      	ldr	r3, [r3, #4]
    5050:	4658      	mov	r0, fp
    5052:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
    5054:	2800      	cmp	r0, #0
    5056:	d10a      	bne.n	506e <get_buttons+0x6a>
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
    5058:	9b01      	ldr	r3, [sp, #4]
    505a:	421e      	tst	r6, r3
    505c:	d003      	beq.n	5066 <get_buttons+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    505e:	3501      	adds	r5, #1
    5060:	2d04      	cmp	r5, #4
    5062:	d1da      	bne.n	501a <get_buttons+0x16>
    5064:	e00f      	b.n	5086 <get_buttons+0x82>
		    (!val && IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS))) {
			ret |= 1U << i;
    5066:	2301      	movs	r3, #1
    5068:	40ab      	lsls	r3, r5
    506a:	431c      	orrs	r4, r3
    506c:	e7f7      	b.n	505e <get_buttons+0x5a>
		if (val < 0) {
    506e:	daf6      	bge.n	505e <get_buttons+0x5a>
    5070:	4b08      	ldr	r3, [pc, #32]	; (5094 <get_buttons+0x90>)
    5072:	4809      	ldr	r0, [pc, #36]	; (5098 <get_buttons+0x94>)
			LOG_ERR("Cannot read gpio pin");
    5074:	4909      	ldr	r1, [pc, #36]	; (509c <get_buttons+0x98>)
    5076:	1ac0      	subs	r0, r0, r3
    5078:	08c0      	lsrs	r0, r0, #3
    507a:	0180      	lsls	r0, r0, #6
    507c:	f040 0001 	orr.w	r0, r0, #1
    5080:	f004 fb59 	bl	9736 <log_string_sync>
			return 0;
    5084:	2400      	movs	r4, #0
		}
	}

	return ret;
}
    5086:	4620      	mov	r0, r4
    5088:	b003      	add	sp, #12
    508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    508e:	bf00      	nop
    5090:	200010a8 	.word	0x200010a8
    5094:	0000a33c 	.word	0x0000a33c
    5098:	0000a34c 	.word	0x0000a34c
    509c:	0000b3ca 	.word	0x0000b3ca
    50a0:	0000a558 	.word	0x0000a558
    50a4:	0000b3a0 	.word	0x0000b3a0
    50a8:	0000a66d 	.word	0x0000a66d

000050ac <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
    50ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    50ae:	f04f 0320 	mov.w	r3, #32
    50b2:	f3ef 8511 	mrs	r5, BASEPRI
    50b6:	f383 8812 	msr	BASEPRI_MAX, r3
    50ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    50be:	482a      	ldr	r0, [pc, #168]	; (5168 <button_pressed+0xbc>)
    50c0:	f001 fe64 	bl	6d8c <z_spin_lock_valid>
    50c4:	b940      	cbnz	r0, 50d8 <button_pressed+0x2c>
    50c6:	4929      	ldr	r1, [pc, #164]	; (516c <button_pressed+0xc0>)
    50c8:	4829      	ldr	r0, [pc, #164]	; (5170 <button_pressed+0xc4>)
    50ca:	2281      	movs	r2, #129	; 0x81
    50cc:	f004 fa52 	bl	9574 <printk>
    50d0:	4826      	ldr	r0, [pc, #152]	; (516c <button_pressed+0xc0>)
    50d2:	2181      	movs	r1, #129	; 0x81
    50d4:	f004 fb1a 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    50d8:	4823      	ldr	r0, [pc, #140]	; (5168 <button_pressed+0xbc>)
    50da:	4e26      	ldr	r6, [pc, #152]	; (5174 <button_pressed+0xc8>)
			err = gpio_pin_interrupt_configure(button_devs[i],
    50dc:	4f26      	ldr	r7, [pc, #152]	; (5178 <button_pressed+0xcc>)
    50de:	f001 fe73 	bl	6dc8 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    50e2:	2400      	movs	r4, #0
			err = gpio_pin_interrupt_configure(button_devs[i],
    50e4:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
    50e8:	f856 0b04 	ldr.w	r0, [r6], #4
    50ec:	7919      	ldrb	r1, [r3, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    50ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    50f2:	3401      	adds	r4, #1
    50f4:	f7ff ff34 	bl	4f60 <z_impl_gpio_pin_interrupt_configure>
    50f8:	2c04      	cmp	r4, #4
    50fa:	d00c      	beq.n	5116 <button_pressed+0x6a>
    50fc:	2800      	cmp	r0, #0
    50fe:	d0f1      	beq.n	50e4 <button_pressed+0x38>
    5100:	4b1e      	ldr	r3, [pc, #120]	; (517c <button_pressed+0xd0>)
    5102:	481f      	ldr	r0, [pc, #124]	; (5180 <button_pressed+0xd4>)

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);

	if (err) {
		LOG_ERR("Cannot disable callbacks");
    5104:	491f      	ldr	r1, [pc, #124]	; (5184 <button_pressed+0xd8>)
    5106:	1ac0      	subs	r0, r0, r3
    5108:	08c0      	lsrs	r0, r0, #3
    510a:	0180      	lsls	r0, r0, #6
    510c:	f040 0001 	orr.w	r0, r0, #1
    5110:	f004 fb11 	bl	9736 <log_string_sync>
    5114:	e001      	b.n	511a <button_pressed+0x6e>
	if (err) {
    5116:	2800      	cmp	r0, #0
    5118:	d1f2      	bne.n	5100 <button_pressed+0x54>
	}

	switch (state) {
    511a:	4b1b      	ldr	r3, [pc, #108]	; (5188 <button_pressed+0xdc>)
    511c:	781a      	ldrb	r2, [r3, #0]
    511e:	b9c2      	cbnz	r2, 5152 <button_pressed+0xa6>
	case STATE_WAITING:
		state = STATE_SCANNING;
    5120:	2201      	movs	r2, #1
    5122:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
    5124:	4819      	ldr	r0, [pc, #100]	; (518c <button_pressed+0xe0>)
    5126:	2221      	movs	r2, #33	; 0x21
    5128:	2300      	movs	r3, #0
    512a:	f002 fc01 	bl	7930 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    512e:	480e      	ldr	r0, [pc, #56]	; (5168 <button_pressed+0xbc>)
    5130:	f001 fe3a 	bl	6da8 <z_spin_unlock_valid>
    5134:	b940      	cbnz	r0, 5148 <button_pressed+0x9c>
    5136:	490d      	ldr	r1, [pc, #52]	; (516c <button_pressed+0xc0>)
    5138:	480d      	ldr	r0, [pc, #52]	; (5170 <button_pressed+0xc4>)
    513a:	22ac      	movs	r2, #172	; 0xac
    513c:	f004 fa1a 	bl	9574 <printk>
    5140:	480a      	ldr	r0, [pc, #40]	; (516c <button_pressed+0xc0>)
    5142:	21ac      	movs	r1, #172	; 0xac
    5144:	f004 fae2 	bl	970c <assert_post_action>
	__asm__ volatile(
    5148:	f385 8811 	msr	BASEPRI, r5
    514c:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
    5150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
    5152:	490f      	ldr	r1, [pc, #60]	; (5190 <button_pressed+0xe4>)
    5154:	4806      	ldr	r0, [pc, #24]	; (5170 <button_pressed+0xc4>)
    5156:	22e8      	movs	r2, #232	; 0xe8
    5158:	f004 fa0c 	bl	9574 <printk>
    515c:	480c      	ldr	r0, [pc, #48]	; (5190 <button_pressed+0xe4>)
    515e:	21e8      	movs	r1, #232	; 0xe8
    5160:	f004 fad4 	bl	970c <assert_post_action>
		break;
    5164:	e7e3      	b.n	512e <button_pressed+0x82>
    5166:	bf00      	nop
    5168:	200010ec 	.word	0x200010ec
    516c:	0000ab1d 	.word	0x0000ab1d
    5170:	0000a66d 	.word	0x0000a66d
    5174:	200010a8 	.word	0x200010a8
    5178:	0000a558 	.word	0x0000a558
    517c:	0000a33c 	.word	0x0000a33c
    5180:	0000a34c 	.word	0x0000a34c
    5184:	0000b3df 	.word	0x0000b3df
    5188:	20001238 	.word	0x20001238
    518c:	20000758 	.word	0x20000758
    5190:	0000b3f8 	.word	0x0000b3f8

00005194 <buttons_scan_fn>:
{
    5194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	button_scan = get_buttons();
    5198:	f7ff ff34 	bl	5004 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    519c:	f3bf 8f5b 	dmb	ish
    51a0:	4b4d      	ldr	r3, [pc, #308]	; (52d8 <buttons_scan_fn+0x144>)
    51a2:	4604      	mov	r4, r0
    51a4:	e853 2f00 	ldrex	r2, [r3]
    51a8:	e843 4100 	strex	r1, r4, [r3]
    51ac:	2900      	cmp	r1, #0
    51ae:	d1f9      	bne.n	51a4 <buttons_scan_fn+0x10>
    51b0:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
    51b4:	4b49      	ldr	r3, [pc, #292]	; (52dc <buttons_scan_fn+0x148>)
    51b6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 5314 <buttons_scan_fn+0x180>
    51ba:	781a      	ldrb	r2, [r3, #0]
    51bc:	bb72      	cbnz	r2, 521c <buttons_scan_fn+0x88>
		if (button_scan != last_button_scan) {
    51be:	f8d8 6000 	ldr.w	r6, [r8]
    51c2:	42a6      	cmp	r6, r4
    51c4:	d012      	beq.n	51ec <buttons_scan_fn+0x58>
	if (button_handler_cb != NULL) {
    51c6:	4b46      	ldr	r3, [pc, #280]	; (52e0 <buttons_scan_fn+0x14c>)
    51c8:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
    51ca:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
    51cc:	b10b      	cbz	r3, 51d2 <buttons_scan_fn+0x3e>
		button_handler_cb(button_state, has_changed);
    51ce:	4631      	mov	r1, r6
    51d0:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
    51d2:	f04f 33ff 	mov.w	r3, #4294967295
    51d6:	4843      	ldr	r0, [pc, #268]	; (52e4 <buttons_scan_fn+0x150>)
    51d8:	f04f 32ff 	mov.w	r2, #4294967295
    51dc:	f001 fe24 	bl	6e28 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    51e0:	4b41      	ldr	r3, [pc, #260]	; (52e8 <buttons_scan_fn+0x154>)
    51e2:	681d      	ldr	r5, [r3, #0]
    51e4:	b96d      	cbnz	r5, 5202 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
    51e6:	483f      	ldr	r0, [pc, #252]	; (52e4 <buttons_scan_fn+0x150>)
    51e8:	f001 fef6 	bl	6fd8 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
    51ec:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
    51f0:	b1bc      	cbz	r4, 5222 <buttons_scan_fn+0x8e>
}
    51f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
    51f6:	483d      	ldr	r0, [pc, #244]	; (52ec <buttons_scan_fn+0x158>)
    51f8:	f44f 72a4 	mov.w	r2, #328	; 0x148
    51fc:	2300      	movs	r3, #0
    51fe:	f002 bb97 	b.w	7930 <k_work_reschedule>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    5202:	3d04      	subs	r5, #4
    5204:	2d00      	cmp	r5, #0
    5206:	d0ee      	beq.n	51e6 <buttons_scan_fn+0x52>
			handler->cb(button_state, has_changed);
    5208:	462f      	mov	r7, r5
    520a:	4631      	mov	r1, r6
    520c:	f857 3b04 	ldr.w	r3, [r7], #4
    5210:	4620      	mov	r0, r4
    5212:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    5214:	2f00      	cmp	r7, #0
    5216:	d0e6      	beq.n	51e6 <buttons_scan_fn+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5218:	686d      	ldr	r5, [r5, #4]
	return node->next;
    521a:	e7e3      	b.n	51e4 <buttons_scan_fn+0x50>
		initial_run = false;
    521c:	2200      	movs	r2, #0
    521e:	701a      	strb	r2, [r3, #0]
    5220:	e7e4      	b.n	51ec <buttons_scan_fn+0x58>
	__asm__ volatile(
    5222:	f04f 0320 	mov.w	r3, #32
    5226:	f3ef 8711 	mrs	r7, BASEPRI
    522a:	f383 8812 	msr	BASEPRI_MAX, r3
    522e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5232:	482f      	ldr	r0, [pc, #188]	; (52f0 <buttons_scan_fn+0x15c>)
    5234:	f001 fdaa 	bl	6d8c <z_spin_lock_valid>
    5238:	b940      	cbnz	r0, 524c <buttons_scan_fn+0xb8>
    523a:	492e      	ldr	r1, [pc, #184]	; (52f4 <buttons_scan_fn+0x160>)
    523c:	482e      	ldr	r0, [pc, #184]	; (52f8 <buttons_scan_fn+0x164>)
    523e:	2281      	movs	r2, #129	; 0x81
    5240:	f004 f998 	bl	9574 <printk>
    5244:	482b      	ldr	r0, [pc, #172]	; (52f4 <buttons_scan_fn+0x160>)
    5246:	2181      	movs	r1, #129	; 0x81
    5248:	f004 fa60 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    524c:	4828      	ldr	r0, [pc, #160]	; (52f0 <buttons_scan_fn+0x15c>)
    524e:	f001 fdbb 	bl	6dc8 <z_spin_lock_set_owner>
		switch (state) {
    5252:	4b2a      	ldr	r3, [pc, #168]	; (52fc <buttons_scan_fn+0x168>)
    5254:	781a      	ldrb	r2, [r3, #0]
    5256:	2a01      	cmp	r2, #1
    5258:	d131      	bne.n	52be <buttons_scan_fn+0x12a>
			state = STATE_WAITING;
    525a:	2200      	movs	r2, #0
    525c:	4e28      	ldr	r6, [pc, #160]	; (5300 <buttons_scan_fn+0x16c>)
			err = gpio_pin_interrupt_configure(button_devs[i],
    525e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 5318 <buttons_scan_fn+0x184>
			state = STATE_WAITING;
    5262:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
    5264:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
    5268:	f856 0b04 	ldr.w	r0, [r6], #4
    526c:	7919      	ldrb	r1, [r3, #4]
    526e:	f44f 3210 	mov.w	r2, #147456	; 0x24000
    5272:	f7ff fe75 	bl	4f60 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    5276:	3401      	adds	r4, #1
    5278:	2c04      	cmp	r4, #4
    527a:	4605      	mov	r5, r0
    527c:	d001      	beq.n	5282 <buttons_scan_fn+0xee>
    527e:	2800      	cmp	r0, #0
    5280:	d0f0      	beq.n	5264 <buttons_scan_fn+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5282:	481b      	ldr	r0, [pc, #108]	; (52f0 <buttons_scan_fn+0x15c>)
    5284:	f001 fd90 	bl	6da8 <z_spin_unlock_valid>
    5288:	b940      	cbnz	r0, 529c <buttons_scan_fn+0x108>
    528a:	491a      	ldr	r1, [pc, #104]	; (52f4 <buttons_scan_fn+0x160>)
    528c:	481a      	ldr	r0, [pc, #104]	; (52f8 <buttons_scan_fn+0x164>)
    528e:	22ac      	movs	r2, #172	; 0xac
    5290:	f004 f970 	bl	9574 <printk>
    5294:	4817      	ldr	r0, [pc, #92]	; (52f4 <buttons_scan_fn+0x160>)
    5296:	21ac      	movs	r1, #172	; 0xac
    5298:	f004 fa38 	bl	970c <assert_post_action>
	__asm__ volatile(
    529c:	f387 8811 	msr	BASEPRI, r7
    52a0:	f3bf 8f6f 	isb	sy
		if (err) {
    52a4:	b1b5      	cbz	r5, 52d4 <buttons_scan_fn+0x140>
    52a6:	4817      	ldr	r0, [pc, #92]	; (5304 <buttons_scan_fn+0x170>)
    52a8:	4b17      	ldr	r3, [pc, #92]	; (5308 <buttons_scan_fn+0x174>)
			LOG_ERR("Cannot enable callbacks");
    52aa:	4918      	ldr	r1, [pc, #96]	; (530c <buttons_scan_fn+0x178>)
    52ac:	1ac0      	subs	r0, r0, r3
    52ae:	08c0      	lsrs	r0, r0, #3
    52b0:	0180      	lsls	r0, r0, #6
}
    52b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Cannot enable callbacks");
    52b6:	f040 0001 	orr.w	r0, r0, #1
    52ba:	f004 ba3c 	b.w	9736 <log_string_sync>
			__ASSERT_NO_MSG(false);
    52be:	4914      	ldr	r1, [pc, #80]	; (5310 <buttons_scan_fn+0x17c>)
    52c0:	480d      	ldr	r0, [pc, #52]	; (52f8 <buttons_scan_fn+0x164>)
    52c2:	22b1      	movs	r2, #177	; 0xb1
    52c4:	f004 f956 	bl	9574 <printk>
    52c8:	4811      	ldr	r0, [pc, #68]	; (5310 <buttons_scan_fn+0x17c>)
    52ca:	21b1      	movs	r1, #177	; 0xb1
    52cc:	f004 fa1e 	bl	970c <assert_post_action>
		int err = 0;
    52d0:	2500      	movs	r5, #0
			break;
    52d2:	e7d6      	b.n	5282 <buttons_scan_fn+0xee>
}
    52d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52d8:	200010f0 	.word	0x200010f0
    52dc:	20000609 	.word	0x20000609
    52e0:	200010b8 	.word	0x200010b8
    52e4:	200010bc 	.word	0x200010bc
    52e8:	200010d0 	.word	0x200010d0
    52ec:	20000758 	.word	0x20000758
    52f0:	200010ec 	.word	0x200010ec
    52f4:	0000ab1d 	.word	0x0000ab1d
    52f8:	0000a66d 	.word	0x0000a66d
    52fc:	20001238 	.word	0x20001238
    5300:	200010a8 	.word	0x200010a8
    5304:	0000a34c 	.word	0x0000a34c
    5308:	0000a33c 	.word	0x0000a33c
    530c:	0000b436 	.word	0x0000b436
    5310:	0000b3f8 	.word	0x0000b3f8
    5314:	200010e4 	.word	0x200010e4
    5318:	0000a558 	.word	0x0000a558

0000531c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    531c:	4b07      	ldr	r3, [pc, #28]	; (533c <dk_read_buttons+0x20>)
    531e:	f3bf 8f5b 	dmb	ish
    5322:	681b      	ldr	r3, [r3, #0]
    5324:	f3bf 8f5b 	dmb	ish
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
    5328:	b100      	cbz	r0, 532c <dk_read_buttons+0x10>
		*button_state = current_state;
    532a:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
    532c:	4804      	ldr	r0, [pc, #16]	; (5340 <dk_read_buttons+0x24>)
    532e:	b111      	cbz	r1, 5336 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
    5330:	6802      	ldr	r2, [r0, #0]
    5332:	405a      	eors	r2, r3
    5334:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
    5336:	6003      	str	r3, [r0, #0]
}
    5338:	4770      	bx	lr
    533a:	bf00      	nop
    533c:	200010f0 	.word	0x200010f0
    5340:	200010e8 	.word	0x200010e8

00005344 <dk_buttons_init>:
{
    5344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
    5348:	4b48      	ldr	r3, [pc, #288]	; (546c <dk_buttons_init+0x128>)
    534a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
    534c:	4848      	ldr	r0, [pc, #288]	; (5470 <dk_buttons_init+0x12c>)
    534e:	4d49      	ldr	r5, [pc, #292]	; (5474 <dk_buttons_init+0x130>)
    5350:	f8df 8154 	ldr.w	r8, [pc, #340]	; 54a8 <dk_buttons_init+0x164>
    5354:	f004 fe59 	bl	a00a <z_impl_k_mutex_init>
    5358:	4647      	mov	r7, r8
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    535a:	2600      	movs	r6, #0
    535c:	46a9      	mov	r9, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
    535e:	6828      	ldr	r0, [r5, #0]
    5360:	f001 f9ba 	bl	66d8 <z_impl_device_get_binding>
    5364:	f847 0b04 	str.w	r0, [r7], #4
		if (!button_devs[i]) {
    5368:	b970      	cbnz	r0, 5388 <dk_buttons_init+0x44>
    536a:	4b43      	ldr	r3, [pc, #268]	; (5478 <dk_buttons_init+0x134>)
    536c:	4843      	ldr	r0, [pc, #268]	; (547c <dk_buttons_init+0x138>)
			LOG_ERR("Cannot bind gpio device");
    536e:	4944      	ldr	r1, [pc, #272]	; (5480 <dk_buttons_init+0x13c>)
    5370:	1ac0      	subs	r0, r0, r3
    5372:	08c0      	lsrs	r0, r0, #3
    5374:	0180      	lsls	r0, r0, #6
    5376:	f040 0001 	orr.w	r0, r0, #1
    537a:	f004 f9dc 	bl	9736 <log_string_sync>
			return -ENODEV;
    537e:	f06f 0412 	mvn.w	r4, #18
}
    5382:	4620      	mov	r0, r4
    5384:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
    5388:	7929      	ldrb	r1, [r5, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    538a:	f44f 7288 	mov.w	r2, #272	; 0x110
    538e:	f7ff fdbb 	bl	4f08 <z_impl_gpio_pin_configure>
		if (err) {
    5392:	4604      	mov	r4, r0
    5394:	b150      	cbz	r0, 53ac <dk_buttons_init+0x68>
    5396:	4839      	ldr	r0, [pc, #228]	; (547c <dk_buttons_init+0x138>)
    5398:	4b37      	ldr	r3, [pc, #220]	; (5478 <dk_buttons_init+0x134>)
			LOG_ERR("Cannot configure button gpio");
    539a:	493a      	ldr	r1, [pc, #232]	; (5484 <dk_buttons_init+0x140>)
    539c:	1ac0      	subs	r0, r0, r3
    539e:	08c0      	lsrs	r0, r0, #3
    53a0:	0180      	lsls	r0, r0, #6
			LOG_ERR("Cannot disable callbacks()");
    53a2:	f040 0001 	orr.w	r0, r0, #1
    53a6:	f004 f9c6 	bl	9736 <log_string_sync>
			return err;
    53aa:	e7ea      	b.n	5382 <dk_buttons_init+0x3e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    53ac:	3601      	adds	r6, #1
    53ae:	2e04      	cmp	r6, #4
    53b0:	f105 0508 	add.w	r5, r5, #8
    53b4:	d1d3      	bne.n	535e <dk_buttons_init+0x1a>
    53b6:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 54a8 <dk_buttons_init+0x164>
	uint32_t pin_mask = 0;
    53ba:	4605      	mov	r5, r0
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    53bc:	4606      	mov	r6, r0
		pin_mask |= BIT(button_pins[i].number);
    53be:	f04f 0b01 	mov.w	fp, #1
		err = gpio_pin_interrupt_configure(button_devs[i],
    53c2:	eb09 03c6 	add.w	r3, r9, r6, lsl #3
    53c6:	f85a 0b04 	ldr.w	r0, [sl], #4
    53ca:	791f      	ldrb	r7, [r3, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    53cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    53d0:	4639      	mov	r1, r7
    53d2:	f7ff fdc5 	bl	4f60 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
    53d6:	4604      	mov	r4, r0
    53d8:	b130      	cbz	r0, 53e8 <dk_buttons_init+0xa4>
    53da:	4828      	ldr	r0, [pc, #160]	; (547c <dk_buttons_init+0x138>)
    53dc:	4b26      	ldr	r3, [pc, #152]	; (5478 <dk_buttons_init+0x134>)
			LOG_ERR("Cannot disable callbacks()");
    53de:	492a      	ldr	r1, [pc, #168]	; (5488 <dk_buttons_init+0x144>)
    53e0:	1ac0      	subs	r0, r0, r3
    53e2:	08c0      	lsrs	r0, r0, #3
    53e4:	0180      	lsls	r0, r0, #6
    53e6:	e7dc      	b.n	53a2 <dk_buttons_init+0x5e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    53e8:	3601      	adds	r6, #1
		pin_mask |= BIT(button_pins[i].number);
    53ea:	fa0b f707 	lsl.w	r7, fp, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    53ee:	2e04      	cmp	r6, #4
		pin_mask |= BIT(button_pins[i].number);
    53f0:	ea45 0507 	orr.w	r5, r5, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    53f4:	d1e5      	bne.n	53c2 <dk_buttons_init+0x7e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    53f6:	4925      	ldr	r1, [pc, #148]	; (548c <dk_buttons_init+0x148>)
    53f8:	4b25      	ldr	r3, [pc, #148]	; (5490 <dk_buttons_init+0x14c>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    53fa:	4606      	mov	r6, r0
	callback->pin_mask = pin_mask;
    53fc:	e9c1 3501 	strd	r3, r5, [r1, #4]

	if (api->manage_callback == NULL) {
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    5400:	460d      	mov	r5, r1
		err = gpio_add_callback(button_devs[i], &gpio_cb);
    5402:	f858 0b04 	ldr.w	r0, [r8], #4
	if (api->manage_callback == NULL) {
    5406:	6883      	ldr	r3, [r0, #8]
    5408:	69db      	ldr	r3, [r3, #28]
    540a:	b15b      	cbz	r3, 5424 <dk_buttons_init+0xe0>
	return api->manage_callback(port, callback, true);
    540c:	2201      	movs	r2, #1
    540e:	4629      	mov	r1, r5
    5410:	4798      	blx	r3
		if (err) {
    5412:	4604      	mov	r4, r0
    5414:	b148      	cbz	r0, 542a <dk_buttons_init+0xe6>
    5416:	4819      	ldr	r0, [pc, #100]	; (547c <dk_buttons_init+0x138>)
    5418:	4b17      	ldr	r3, [pc, #92]	; (5478 <dk_buttons_init+0x134>)
			LOG_ERR("Cannot add callback");
    541a:	491e      	ldr	r1, [pc, #120]	; (5494 <dk_buttons_init+0x150>)
    541c:	1ac0      	subs	r0, r0, r3
    541e:	08c0      	lsrs	r0, r0, #3
    5420:	0180      	lsls	r0, r0, #6
    5422:	e7be      	b.n	53a2 <dk_buttons_init+0x5e>
		return -ENOTSUP;
    5424:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5428:	e7f5      	b.n	5416 <dk_buttons_init+0xd2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    542a:	3601      	adds	r6, #1
    542c:	2e04      	cmp	r6, #4
    542e:	d1e8      	bne.n	5402 <dk_buttons_init+0xbe>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
    5430:	4919      	ldr	r1, [pc, #100]	; (5498 <dk_buttons_init+0x154>)
    5432:	481a      	ldr	r0, [pc, #104]	; (549c <dk_buttons_init+0x158>)
    5434:	f002 f986 	bl	7744 <k_work_init_delayable>
	state = STATE_SCANNING;
    5438:	4b19      	ldr	r3, [pc, #100]	; (54a0 <dk_buttons_init+0x15c>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
    543a:	4818      	ldr	r0, [pc, #96]	; (549c <dk_buttons_init+0x158>)
	state = STATE_SCANNING;
    543c:	2201      	movs	r2, #1
    543e:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
    5440:	2300      	movs	r3, #0
    5442:	2200      	movs	r2, #0
    5444:	f002 fa0c 	bl	7860 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
    5448:	4621      	mov	r1, r4
    544a:	4620      	mov	r0, r4
    544c:	f7ff ff66 	bl	531c <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
    5450:	f7ff fdd8 	bl	5004 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5454:	f3bf 8f5b 	dmb	ish
    5458:	4b12      	ldr	r3, [pc, #72]	; (54a4 <dk_buttons_init+0x160>)
    545a:	e853 2f00 	ldrex	r2, [r3]
    545e:	e843 0100 	strex	r1, r0, [r3]
    5462:	2900      	cmp	r1, #0
    5464:	d1f9      	bne.n	545a <dk_buttons_init+0x116>
    5466:	f3bf 8f5b 	dmb	ish
    546a:	e78a      	b.n	5382 <dk_buttons_init+0x3e>
    546c:	200010b8 	.word	0x200010b8
    5470:	200010bc 	.word	0x200010bc
    5474:	0000a558 	.word	0x0000a558
    5478:	0000a33c 	.word	0x0000a33c
    547c:	0000a34c 	.word	0x0000a34c
    5480:	0000b44e 	.word	0x0000b44e
    5484:	0000b480 	.word	0x0000b480
    5488:	0000b49d 	.word	0x0000b49d
    548c:	200010d8 	.word	0x200010d8
    5490:	000050ad 	.word	0x000050ad
    5494:	0000b4b8 	.word	0x0000b4b8
    5498:	00005195 	.word	0x00005195
    549c:	20000758 	.word	0x20000758
    54a0:	20001238 	.word	0x20001238
    54a4:	200010f0 	.word	0x200010f0
    54a8:	200010a8 	.word	0x200010a8

000054ac <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    54ac:	b508      	push	{r3, lr}
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    54ae:	f7fc fea3 	bl	21f8 <z_impl_log_panic>
    54b2:	4b06      	ldr	r3, [pc, #24]	; (54cc <k_sys_fatal_error_handler+0x20>)
    54b4:	4806      	ldr	r0, [pc, #24]	; (54d0 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    54b6:	4907      	ldr	r1, [pc, #28]	; (54d4 <k_sys_fatal_error_handler+0x28>)
    54b8:	1ac0      	subs	r0, r0, r3
    54ba:	08c0      	lsrs	r0, r0, #3
    54bc:	0180      	lsls	r0, r0, #6
    54be:	f040 0001 	orr.w	r0, r0, #1
    54c2:	f004 f938 	bl	9736 <log_string_sync>
		sys_arch_reboot(0);
    54c6:	2000      	movs	r0, #0
    54c8:	f7fe f914 	bl	36f4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    54cc:	0000a33c 	.word	0x0000a33c
    54d0:	0000a354 	.word	0x0000a354
    54d4:	0000b4e0 	.word	0x0000b4e0

000054d8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    54d8:	4b03      	ldr	r3, [pc, #12]	; (54e8 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    54da:	6818      	ldr	r0, [r3, #0]
}
    54dc:	f1a0 0308 	sub.w	r3, r0, #8
    54e0:	4258      	negs	r0, r3
    54e2:	4158      	adcs	r0, r3
    54e4:	4770      	bx	lr
    54e6:	bf00      	nop
    54e8:	10000130 	.word	0x10000130

000054ec <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    54ec:	4b06      	ldr	r3, [pc, #24]	; (5508 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    54ee:	681b      	ldr	r3, [r3, #0]
    54f0:	2b08      	cmp	r3, #8
    54f2:	d106      	bne.n	5502 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    54f4:	4b05      	ldr	r3, [pc, #20]	; (550c <nrf52_errata_103+0x20>)
    54f6:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    54f8:	2b05      	cmp	r3, #5
    54fa:	d802      	bhi.n	5502 <nrf52_errata_103+0x16>
    54fc:	4a04      	ldr	r2, [pc, #16]	; (5510 <nrf52_errata_103+0x24>)
    54fe:	5cd0      	ldrb	r0, [r2, r3]
    5500:	4770      	bx	lr
        return false;
    5502:	2000      	movs	r0, #0
}
    5504:	4770      	bx	lr
    5506:	bf00      	nop
    5508:	10000130 	.word	0x10000130
    550c:	10000134 	.word	0x10000134
    5510:	0000b503 	.word	0x0000b503

00005514 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5514:	4a02      	ldr	r2, [pc, #8]	; (5520 <nvmc_wait+0xc>)
    5516:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    551a:	2b00      	cmp	r3, #0
    551c:	d0fb      	beq.n	5516 <nvmc_wait+0x2>
}
    551e:	4770      	bx	lr
    5520:	4001e000 	.word	0x4001e000

00005524 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    5524:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    5526:	f7ff ffd7 	bl	54d8 <nrf52_errata_136>
    552a:	b140      	cbz	r0, 553e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    552c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5530:	2200      	movs	r2, #0
    5532:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5536:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    553a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    553e:	f7ff ffcb 	bl	54d8 <nrf52_errata_136>
    5542:	2800      	cmp	r0, #0
    5544:	d046      	beq.n	55d4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    554a:	4b5b      	ldr	r3, [pc, #364]	; (56b8 <SystemInit+0x194>)
    554c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    5550:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5554:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5558:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    555c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    5560:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5564:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5568:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    556c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    5570:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5574:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5578:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    557c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5580:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5584:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5588:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    558c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5590:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5594:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5598:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    559c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    55a0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    55a4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    55a8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    55ac:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    55b0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    55b4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    55b8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    55bc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    55c0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    55c4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    55c8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    55cc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    55d0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    55d4:	f7ff ff8a 	bl	54ec <nrf52_errata_103>
    55d8:	b110      	cbz	r0, 55e0 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    55da:	4b38      	ldr	r3, [pc, #224]	; (56bc <SystemInit+0x198>)
    55dc:	4a38      	ldr	r2, [pc, #224]	; (56c0 <SystemInit+0x19c>)
    55de:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    55e0:	f7ff ff84 	bl	54ec <nrf52_errata_103>
    55e4:	b118      	cbz	r0, 55ee <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    55e6:	4b37      	ldr	r3, [pc, #220]	; (56c4 <SystemInit+0x1a0>)
    55e8:	22fb      	movs	r2, #251	; 0xfb
    55ea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    55ee:	f7ff ff7d 	bl	54ec <nrf52_errata_103>
    55f2:	b148      	cbz	r0, 5608 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    55f4:	4934      	ldr	r1, [pc, #208]	; (56c8 <SystemInit+0x1a4>)
    55f6:	4b35      	ldr	r3, [pc, #212]	; (56cc <SystemInit+0x1a8>)
    55f8:	680a      	ldr	r2, [r1, #0]
    55fa:	681b      	ldr	r3, [r3, #0]
    55fc:	f022 020f 	bic.w	r2, r2, #15
    5600:	f003 030f 	and.w	r3, r3, #15
    5604:	4313      	orrs	r3, r2
    5606:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5608:	f7ff ff70 	bl	54ec <nrf52_errata_103>
    560c:	b118      	cbz	r0, 5616 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    560e:	4b30      	ldr	r3, [pc, #192]	; (56d0 <SystemInit+0x1ac>)
    5610:	f44f 7200 	mov.w	r2, #512	; 0x200
    5614:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5616:	f7ff ff5f 	bl	54d8 <nrf52_errata_136>
    561a:	b148      	cbz	r0, 5630 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    561c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5620:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5624:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5626:	bf44      	itt	mi
    5628:	f06f 0201 	mvnmi.w	r2, #1
    562c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5630:	4b28      	ldr	r3, [pc, #160]	; (56d4 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5632:	681b      	ldr	r3, [r3, #0]
    5634:	2b08      	cmp	r3, #8
    5636:	d10e      	bne.n	5656 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5638:	4b27      	ldr	r3, [pc, #156]	; (56d8 <SystemInit+0x1b4>)
    563a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    563c:	2b05      	cmp	r3, #5
    563e:	d802      	bhi.n	5646 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5640:	4a26      	ldr	r2, [pc, #152]	; (56dc <SystemInit+0x1b8>)
    5642:	5cd3      	ldrb	r3, [r2, r3]
    5644:	b13b      	cbz	r3, 5656 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5646:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    564a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    564e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5652:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5656:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    565a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    565e:	2a00      	cmp	r2, #0
    5660:	db03      	blt.n	566a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5662:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5666:	2b00      	cmp	r3, #0
    5668:	da22      	bge.n	56b0 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    566a:	491d      	ldr	r1, [pc, #116]	; (56e0 <SystemInit+0x1bc>)
    566c:	2301      	movs	r3, #1
    566e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5672:	f7ff ff4f 	bl	5514 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5676:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    567a:	2412      	movs	r4, #18
    567c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    5680:	f7ff ff48 	bl	5514 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5684:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5688:	f7ff ff44 	bl	5514 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    568c:	2300      	movs	r3, #0
    568e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5692:	f7ff ff3f 	bl	5514 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5696:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    569a:	4912      	ldr	r1, [pc, #72]	; (56e4 <SystemInit+0x1c0>)
    569c:	4b12      	ldr	r3, [pc, #72]	; (56e8 <SystemInit+0x1c4>)
    569e:	68ca      	ldr	r2, [r1, #12]
    56a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    56a4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    56a6:	60cb      	str	r3, [r1, #12]
    56a8:	f3bf 8f4f 	dsb	sy
    __NOP();
    56ac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    56ae:	e7fd      	b.n	56ac <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    56b0:	4b0e      	ldr	r3, [pc, #56]	; (56ec <SystemInit+0x1c8>)
    56b2:	4a0f      	ldr	r2, [pc, #60]	; (56f0 <SystemInit+0x1cc>)
    56b4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    56b6:	bd10      	pop	{r4, pc}
    56b8:	4000c000 	.word	0x4000c000
    56bc:	4000568c 	.word	0x4000568c
    56c0:	00038148 	.word	0x00038148
    56c4:	4000f000 	.word	0x4000f000
    56c8:	40000ee4 	.word	0x40000ee4
    56cc:	10000258 	.word	0x10000258
    56d0:	40029640 	.word	0x40029640
    56d4:	10000130 	.word	0x10000130
    56d8:	10000134 	.word	0x10000134
    56dc:	0000b4fd 	.word	0x0000b4fd
    56e0:	4001e000 	.word	0x4001e000
    56e4:	e000ed00 	.word	0xe000ed00
    56e8:	05fa0004 	.word	0x05fa0004
    56ec:	2000011c 	.word	0x2000011c
    56f0:	03d09000 	.word	0x03d09000

000056f4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    56f4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    56f6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    56f8:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    56fa:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    56fe:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    5700:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    5704:	d014      	beq.n	5730 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5706:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    570a:	fa05 f204 	lsl.w	r2, r5, r4
    570e:	ea23 0202 	bic.w	r2, r3, r2
    5712:	e850 6f00 	ldrex	r6, [r0]
    5716:	429e      	cmp	r6, r3
    5718:	d104      	bne.n	5724 <nrfx_flag32_alloc+0x30>
    571a:	e840 2c00 	strex	ip, r2, [r0]
    571e:	f1bc 0f00 	cmp.w	ip, #0
    5722:	d1f6      	bne.n	5712 <nrfx_flag32_alloc+0x1e>
    5724:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5728:	d1e6      	bne.n	56f8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    572a:	4802      	ldr	r0, [pc, #8]	; (5734 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    572c:	700c      	strb	r4, [r1, #0]
}
    572e:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    5730:	4801      	ldr	r0, [pc, #4]	; (5738 <nrfx_flag32_alloc+0x44>)
    5732:	e7fc      	b.n	572e <nrfx_flag32_alloc+0x3a>
    5734:	0bad0000 	.word	0x0bad0000
    5738:	0bad0002 	.word	0x0bad0002

0000573c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    573c:	6803      	ldr	r3, [r0, #0]
    573e:	40cb      	lsrs	r3, r1
    5740:	07db      	lsls	r3, r3, #31
{
    5742:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    5744:	d415      	bmi.n	5772 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    5746:	2301      	movs	r3, #1
    5748:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    574c:	6803      	ldr	r3, [r0, #0]
    574e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    5752:	ea41 0203 	orr.w	r2, r1, r3
    5756:	e850 4f00 	ldrex	r4, [r0]
    575a:	429c      	cmp	r4, r3
    575c:	d104      	bne.n	5768 <nrfx_flag32_free+0x2c>
    575e:	e840 2c00 	strex	ip, r2, [r0]
    5762:	f1bc 0f00 	cmp.w	ip, #0
    5766:	d1f6      	bne.n	5756 <nrfx_flag32_free+0x1a>
    5768:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    576c:	d1ee      	bne.n	574c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    576e:	4802      	ldr	r0, [pc, #8]	; (5778 <nrfx_flag32_free+0x3c>)
}
    5770:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5772:	4802      	ldr	r0, [pc, #8]	; (577c <nrfx_flag32_free+0x40>)
    5774:	e7fc      	b.n	5770 <nrfx_flag32_free+0x34>
    5776:	bf00      	nop
    5778:	0bad0000 	.word	0x0bad0000
    577c:	0bad0004 	.word	0x0bad0004

00005780 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    5780:	b508      	push	{r3, lr}
    switch (domain)
    5782:	b170      	cbz	r0, 57a2 <nrf_clock_is_running.constprop.0+0x22>
    5784:	2801      	cmp	r0, #1
    5786:	d01b      	beq.n	57c0 <nrf_clock_is_running.constprop.0+0x40>
            NRFX_ASSERT(0);
    5788:	4914      	ldr	r1, [pc, #80]	; (57dc <nrf_clock_is_running.constprop.0+0x5c>)
    578a:	4815      	ldr	r0, [pc, #84]	; (57e0 <nrf_clock_is_running.constprop.0+0x60>)
    578c:	f44f 724f 	mov.w	r2, #828	; 0x33c
    5790:	f003 fef0 	bl	9574 <printk>
    5794:	4811      	ldr	r0, [pc, #68]	; (57dc <nrf_clock_is_running.constprop.0+0x5c>)
    5796:	f44f 714f 	mov.w	r1, #828	; 0x33c
    579a:	f003 ffb7 	bl	970c <assert_post_action>
            return false;
    579e:	2000      	movs	r0, #0
    57a0:	e00d      	b.n	57be <nrf_clock_is_running.constprop.0+0x3e>
            if (p_clk_src != NULL)
    57a2:	b131      	cbz	r1, 57b2 <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    57a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57a8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    57ac:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    57b0:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    57b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57b6:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    57ba:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    57be:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    57c0:	b131      	cbz	r1, 57d0 <nrf_clock_is_running.constprop.0+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    57c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    57ca:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    57ce:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    57d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57d4:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    57d8:	e7ef      	b.n	57ba <nrf_clock_is_running.constprop.0+0x3a>
    57da:	bf00      	nop
    57dc:	0000b509 	.word	0x0000b509
    57e0:	0000a66d 	.word	0x0000a66d

000057e4 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    57e4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    57e6:	4604      	mov	r4, r0
    57e8:	b940      	cbnz	r0, 57fc <nrfx_clock_init+0x18>
    57ea:	4909      	ldr	r1, [pc, #36]	; (5810 <nrfx_clock_init+0x2c>)
    57ec:	4809      	ldr	r0, [pc, #36]	; (5814 <nrfx_clock_init+0x30>)
    57ee:	22bd      	movs	r2, #189	; 0xbd
    57f0:	f003 fec0 	bl	9574 <printk>
    57f4:	4806      	ldr	r0, [pc, #24]	; (5810 <nrfx_clock_init+0x2c>)
    57f6:	21bd      	movs	r1, #189	; 0xbd
    57f8:	f003 ff88 	bl	970c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    57fc:	4b06      	ldr	r3, [pc, #24]	; (5818 <nrfx_clock_init+0x34>)
    57fe:	791a      	ldrb	r2, [r3, #4]
    5800:	b922      	cbnz	r2, 580c <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    5802:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    5804:	4805      	ldr	r0, [pc, #20]	; (581c <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    5806:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    5808:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    580a:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    580c:	4804      	ldr	r0, [pc, #16]	; (5820 <nrfx_clock_init+0x3c>)
    return err_code;
    580e:	e7fc      	b.n	580a <nrfx_clock_init+0x26>
    5810:	0000b53d 	.word	0x0000b53d
    5814:	0000a66d 	.word	0x0000a66d
    5818:	200010f4 	.word	0x200010f4
    581c:	0bad0000 	.word	0x0bad0000
    5820:	0bad000c 	.word	0x0bad000c

00005824 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5824:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5826:	4b0a      	ldr	r3, [pc, #40]	; (5850 <nrfx_clock_enable+0x2c>)
    5828:	791b      	ldrb	r3, [r3, #4]
    582a:	b943      	cbnz	r3, 583e <nrfx_clock_enable+0x1a>
    582c:	4909      	ldr	r1, [pc, #36]	; (5854 <nrfx_clock_enable+0x30>)
    582e:	480a      	ldr	r0, [pc, #40]	; (5858 <nrfx_clock_enable+0x34>)
    5830:	22d6      	movs	r2, #214	; 0xd6
    5832:	f003 fe9f 	bl	9574 <printk>
    5836:	4807      	ldr	r0, [pc, #28]	; (5854 <nrfx_clock_enable+0x30>)
    5838:	21d6      	movs	r1, #214	; 0xd6
    583a:	f003 ff67 	bl	970c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    583e:	2000      	movs	r0, #0
    5840:	f7fd f9d8 	bl	2bf4 <arch_irq_is_enabled>
    5844:	b918      	cbnz	r0, 584e <nrfx_clock_enable+0x2a>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    584a:	f7fd b9af 	b.w	2bac <arch_irq_enable>
    584e:	bd08      	pop	{r3, pc}
    5850:	200010f4 	.word	0x200010f4
    5854:	0000b53d 	.word	0x0000b53d
    5858:	0000a66d 	.word	0x0000a66d

0000585c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    585c:	4b21      	ldr	r3, [pc, #132]	; (58e4 <nrfx_clock_start+0x88>)
    585e:	791b      	ldrb	r3, [r3, #4]
{
    5860:	b513      	push	{r0, r1, r4, lr}
    5862:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5864:	b953      	cbnz	r3, 587c <nrfx_clock_start+0x20>
    5866:	4920      	ldr	r1, [pc, #128]	; (58e8 <nrfx_clock_start+0x8c>)
    5868:	4820      	ldr	r0, [pc, #128]	; (58ec <nrfx_clock_start+0x90>)
    586a:	f44f 7289 	mov.w	r2, #274	; 0x112
    586e:	f003 fe81 	bl	9574 <printk>
    5872:	481d      	ldr	r0, [pc, #116]	; (58e8 <nrfx_clock_start+0x8c>)
    5874:	f44f 7189 	mov.w	r1, #274	; 0x112
    5878:	f003 ff48 	bl	970c <assert_post_action>
    switch (domain)
    587c:	b16c      	cbz	r4, 589a <nrfx_clock_start+0x3e>
    587e:	2c01      	cmp	r4, #1
    5880:	d026      	beq.n	58d0 <nrfx_clock_start+0x74>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5882:	4919      	ldr	r1, [pc, #100]	; (58e8 <nrfx_clock_start+0x8c>)
    5884:	4819      	ldr	r0, [pc, #100]	; (58ec <nrfx_clock_start+0x90>)
    5886:	f44f 72a2 	mov.w	r2, #324	; 0x144
    588a:	f003 fe73 	bl	9574 <printk>
    588e:	4816      	ldr	r0, [pc, #88]	; (58e8 <nrfx_clock_start+0x8c>)
    5890:	f44f 71a2 	mov.w	r1, #324	; 0x144
    5894:	f003 ff3a 	bl	970c <assert_post_action>
            break;
    }
}
    5898:	e016      	b.n	58c8 <nrfx_clock_start+0x6c>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    589a:	a901      	add	r1, sp, #4
    589c:	4620      	mov	r0, r4
    589e:	f7ff ff6f 	bl	5780 <nrf_clock_is_running.constprop.0>
    58a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58a6:	b188      	cbz	r0, 58cc <nrfx_clock_start+0x70>
    58a8:	9a01      	ldr	r2, [sp, #4]
    58aa:	2a01      	cmp	r2, #1
    58ac:	d10e      	bne.n	58cc <nrfx_clock_start+0x70>
    p_reg->LFCLKSRC = (uint32_t)(source);
    58ae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58b2:	4b0f      	ldr	r3, [pc, #60]	; (58f0 <nrfx_clock_start+0x94>)
    58b4:	2200      	movs	r2, #0
    58b6:	601a      	str	r2, [r3, #0]
    58b8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    58ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58be:	2202      	movs	r2, #2
    58c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58c4:	2201      	movs	r2, #1
    58c6:	609a      	str	r2, [r3, #8]
}
    58c8:	b002      	add	sp, #8
    58ca:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    58cc:	2200      	movs	r2, #0
    58ce:	e7ee      	b.n	58ae <nrfx_clock_start+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58d0:	4b08      	ldr	r3, [pc, #32]	; (58f4 <nrfx_clock_start+0x98>)
    58d2:	2200      	movs	r2, #0
    58d4:	601a      	str	r2, [r3, #0]
    58d6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    58d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58dc:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58e0:	601c      	str	r4, [r3, #0]
}
    58e2:	e7f1      	b.n	58c8 <nrfx_clock_start+0x6c>
    58e4:	200010f4 	.word	0x200010f4
    58e8:	0000b53d 	.word	0x0000b53d
    58ec:	0000a66d 	.word	0x0000a66d
    58f0:	40000104 	.word	0x40000104
    58f4:	40000100 	.word	0x40000100

000058f8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    58f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    58fa:	4d2e      	ldr	r5, [pc, #184]	; (59b4 <nrfx_clock_stop+0xbc>)
    58fc:	792a      	ldrb	r2, [r5, #4]
{
    58fe:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5900:	b952      	cbnz	r2, 5918 <nrfx_clock_stop+0x20>
    5902:	492d      	ldr	r1, [pc, #180]	; (59b8 <nrfx_clock_stop+0xc0>)
    5904:	482d      	ldr	r0, [pc, #180]	; (59bc <nrfx_clock_stop+0xc4>)
    5906:	f240 124b 	movw	r2, #331	; 0x14b
    590a:	f003 fe33 	bl	9574 <printk>
    590e:	482a      	ldr	r0, [pc, #168]	; (59b8 <nrfx_clock_stop+0xc0>)
    5910:	f240 114b 	movw	r1, #331	; 0x14b
    5914:	f003 fefa 	bl	970c <assert_post_action>
    switch (domain)
    5918:	b174      	cbz	r4, 5938 <nrfx_clock_stop+0x40>
    591a:	2c01      	cmp	r4, #1
    591c:	d027      	beq.n	596e <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    591e:	4926      	ldr	r1, [pc, #152]	; (59b8 <nrfx_clock_stop+0xc0>)
    5920:	4826      	ldr	r0, [pc, #152]	; (59bc <nrfx_clock_stop+0xc4>)
    5922:	f240 1267 	movw	r2, #359	; 0x167
    5926:	f003 fe25 	bl	9574 <printk>
    592a:	4823      	ldr	r0, [pc, #140]	; (59b8 <nrfx_clock_stop+0xc0>)
    592c:	f240 1167 	movw	r1, #359	; 0x167
    5930:	f003 feec 	bl	970c <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5934:	b003      	add	sp, #12
    5936:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    5938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    593c:	2202      	movs	r2, #2
    593e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5942:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    5946:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    594a:	2201      	movs	r2, #1
    594c:	681b      	ldr	r3, [r3, #0]
    594e:	4b1c      	ldr	r3, [pc, #112]	; (59c0 <nrfx_clock_stop+0xc8>)
    5950:	f242 7410 	movw	r4, #10000	; 0x2710
    5954:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    5956:	2100      	movs	r1, #0
    5958:	4608      	mov	r0, r1
    595a:	f7ff ff11 	bl	5780 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    595e:	2800      	cmp	r0, #0
    5960:	d0e8      	beq.n	5934 <nrfx_clock_stop+0x3c>
    5962:	2001      	movs	r0, #1
    5964:	f004 fa46 	bl	9df4 <nrfx_busy_wait>
    5968:	3c01      	subs	r4, #1
    596a:	d1f4      	bne.n	5956 <nrfx_clock_stop+0x5e>
    596c:	e7e2      	b.n	5934 <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
    596e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5972:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    5974:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5978:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    597c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    5980:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5982:	4b10      	ldr	r3, [pc, #64]	; (59c4 <nrfx_clock_stop+0xcc>)
    5984:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5986:	f88d 4007 	strb.w	r4, [sp, #7]
    598a:	f242 7410 	movw	r4, #10000	; 0x2710
    598e:	f10d 0107 	add.w	r1, sp, #7
    5992:	2001      	movs	r0, #1
    5994:	f7ff fef4 	bl	5780 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5998:	b910      	cbnz	r0, 59a0 <nrfx_clock_stop+0xa8>
            m_clock_cb.hfclk_started = false;
    599a:	2300      	movs	r3, #0
    599c:	716b      	strb	r3, [r5, #5]
    599e:	e7c9      	b.n	5934 <nrfx_clock_stop+0x3c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    59a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    59a4:	2801      	cmp	r0, #1
    59a6:	d1f8      	bne.n	599a <nrfx_clock_stop+0xa2>
    59a8:	f004 fa24 	bl	9df4 <nrfx_busy_wait>
    59ac:	3c01      	subs	r4, #1
    59ae:	d1ee      	bne.n	598e <nrfx_clock_stop+0x96>
    59b0:	e7f3      	b.n	599a <nrfx_clock_stop+0xa2>
    59b2:	bf00      	nop
    59b4:	200010f4 	.word	0x200010f4
    59b8:	0000b53d 	.word	0x0000b53d
    59bc:	0000a66d 	.word	0x0000a66d
    59c0:	4000000c 	.word	0x4000000c
    59c4:	40000004 	.word	0x40000004

000059c8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    59c8:	4b16      	ldr	r3, [pc, #88]	; (5a24 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    59ca:	b507      	push	{r0, r1, r2, lr}
    59cc:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    59ce:	b16a      	cbz	r2, 59ec <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59d0:	2200      	movs	r2, #0
    59d2:	601a      	str	r2, [r3, #0]
    59d4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    59d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59da:	2201      	movs	r2, #1
    59dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    59e0:	4b11      	ldr	r3, [pc, #68]	; (5a28 <nrfx_power_clock_irq_handler+0x60>)
    59e2:	7958      	ldrb	r0, [r3, #5]
    59e4:	b910      	cbnz	r0, 59ec <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    59e6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    59ec:	4b0f      	ldr	r3, [pc, #60]	; (5a2c <nrfx_power_clock_irq_handler+0x64>)
    59ee:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    59f0:	b16a      	cbz	r2, 5a0e <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59f2:	2000      	movs	r0, #0
    59f4:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    59f6:	a901      	add	r1, sp, #4
    59f8:	681b      	ldr	r3, [r3, #0]
    59fa:	f7ff fec1 	bl	5780 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    59fe:	9a01      	ldr	r2, [sp, #4]
    5a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a04:	b932      	cbnz	r2, 5a14 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5a06:	2201      	movs	r2, #1
    5a08:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a0c:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5a0e:	b003      	add	sp, #12
    5a10:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    5a14:	2202      	movs	r2, #2
    5a16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5a1a:	4b03      	ldr	r3, [pc, #12]	; (5a28 <nrfx_power_clock_irq_handler+0x60>)
    5a1c:	2001      	movs	r0, #1
    5a1e:	681b      	ldr	r3, [r3, #0]
    5a20:	4798      	blx	r3
}
    5a22:	e7f4      	b.n	5a0e <nrfx_power_clock_irq_handler+0x46>
    5a24:	40000100 	.word	0x40000100
    5a28:	200010f4 	.word	0x200010f4
    5a2c:	40000104 	.word	0x40000104

00005a30 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5a30:	4b05      	ldr	r3, [pc, #20]	; (5a48 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5a32:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5a34:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    5a38:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    5a3c:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    5a40:	4258      	negs	r0, r3
    5a42:	4158      	adcs	r0, r3
    5a44:	4770      	bx	lr
    5a46:	bf00      	nop
    5a48:	20000120 	.word	0x20000120

00005a4c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5a4c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5a4e:	f100 0308 	add.w	r3, r0, #8
    5a52:	4c0c      	ldr	r4, [pc, #48]	; (5a84 <call_handler+0x38>)
    5a54:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    5a58:	05da      	lsls	r2, r3, #23
{
    5a5a:	4605      	mov	r5, r0
    5a5c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5a5e:	d507      	bpl.n	5a70 <call_handler+0x24>
    5a60:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    5a64:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    5a68:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    5a6c:	6852      	ldr	r2, [r2, #4]
    5a6e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    5a70:	68a3      	ldr	r3, [r4, #8]
    5a72:	b12b      	cbz	r3, 5a80 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5a74:	68e2      	ldr	r2, [r4, #12]
    5a76:	4631      	mov	r1, r6
    5a78:	4628      	mov	r0, r5
    }
}
    5a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5a7e:	4718      	bx	r3
}
    5a80:	bd70      	pop	{r4, r5, r6, pc}
    5a82:	bf00      	nop
    5a84:	20000120 	.word	0x20000120

00005a88 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5a88:	4b19      	ldr	r3, [pc, #100]	; (5af0 <release_handler+0x68>)
    5a8a:	3008      	adds	r0, #8
{
    5a8c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5a8e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    5a92:	05d1      	lsls	r1, r2, #23
    5a94:	d51d      	bpl.n	5ad2 <release_handler+0x4a>
    5a96:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5a9a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    5a9e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5aa2:	f103 0410 	add.w	r4, r3, #16
    5aa6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5aa8:	f834 2b02 	ldrh.w	r2, [r4], #2
    5aac:	f412 7f80 	tst.w	r2, #256	; 0x100
    5ab0:	d003      	beq.n	5aba <release_handler+0x32>
    5ab2:	f3c2 2243 	ubfx	r2, r2, #9, #4
    5ab6:	4291      	cmp	r1, r2
    5ab8:	d00b      	beq.n	5ad2 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5aba:	3001      	adds	r0, #1
    5abc:	2830      	cmp	r0, #48	; 0x30
    5abe:	d1f3      	bne.n	5aa8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    5ac0:	2200      	movs	r2, #0
    5ac2:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5ac6:	480b      	ldr	r0, [pc, #44]	; (5af4 <release_handler+0x6c>)
    5ac8:	f7ff fe38 	bl	573c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5acc:	4b0a      	ldr	r3, [pc, #40]	; (5af8 <release_handler+0x70>)
    5ace:	4298      	cmp	r0, r3
    5ad0:	d100      	bne.n	5ad4 <release_handler+0x4c>
}
    5ad2:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5ad4:	4909      	ldr	r1, [pc, #36]	; (5afc <release_handler+0x74>)
    5ad6:	480a      	ldr	r0, [pc, #40]	; (5b00 <release_handler+0x78>)
    5ad8:	f44f 7299 	mov.w	r2, #306	; 0x132
    5adc:	f003 fd4a 	bl	9574 <printk>
}
    5ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5ae4:	4805      	ldr	r0, [pc, #20]	; (5afc <release_handler+0x74>)
    5ae6:	f44f 7199 	mov.w	r1, #306	; 0x132
    5aea:	f003 be0f 	b.w	970c <assert_post_action>
    5aee:	bf00      	nop
    5af0:	20000120 	.word	0x20000120
    5af4:	20000194 	.word	0x20000194
    5af8:	0bad0000 	.word	0x0bad0000
    5afc:	0000b57a 	.word	0x0000b57a
    5b00:	0000a66d 	.word	0x0000a66d

00005b04 <pin_handler_trigger_uninit>:
{
    5b04:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5b06:	4c0a      	ldr	r4, [pc, #40]	; (5b30 <pin_handler_trigger_uninit+0x2c>)
    5b08:	f100 0508 	add.w	r5, r0, #8
    5b0c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    5b10:	069a      	lsls	r2, r3, #26
    5b12:	d506      	bpl.n	5b22 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5b14:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5b16:	4a07      	ldr	r2, [pc, #28]	; (5b34 <pin_handler_trigger_uninit+0x30>)
    5b18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5b1c:	2100      	movs	r1, #0
    5b1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    5b22:	f7ff ffb1 	bl	5a88 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5b26:	2300      	movs	r3, #0
    5b28:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    5b2c:	bd38      	pop	{r3, r4, r5, pc}
    5b2e:	bf00      	nop
    5b30:	20000120 	.word	0x20000120
    5b34:	40006000 	.word	0x40006000

00005b38 <nrf_gpio_pin_port_decode>:
{
    5b38:	b510      	push	{r4, lr}
    5b3a:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5b3c:	6800      	ldr	r0, [r0, #0]
    5b3e:	f004 f960 	bl	9e02 <nrf_gpio_pin_present_check>
    5b42:	b950      	cbnz	r0, 5b5a <nrf_gpio_pin_port_decode+0x22>
    5b44:	4911      	ldr	r1, [pc, #68]	; (5b8c <nrf_gpio_pin_port_decode+0x54>)
    5b46:	4812      	ldr	r0, [pc, #72]	; (5b90 <nrf_gpio_pin_port_decode+0x58>)
    5b48:	f240 2229 	movw	r2, #553	; 0x229
    5b4c:	f003 fd12 	bl	9574 <printk>
    5b50:	480e      	ldr	r0, [pc, #56]	; (5b8c <nrf_gpio_pin_port_decode+0x54>)
    5b52:	f240 2129 	movw	r1, #553	; 0x229
    5b56:	f003 fdd9 	bl	970c <assert_post_action>
    uint32_t pin_number = *p_pin;
    5b5a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    5b5c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5b60:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    5b62:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5b64:	d00c      	beq.n	5b80 <nrf_gpio_pin_port_decode+0x48>
    5b66:	2b01      	cmp	r3, #1
    5b68:	d00d      	beq.n	5b86 <nrf_gpio_pin_port_decode+0x4e>
            NRFX_ASSERT(0);
    5b6a:	4908      	ldr	r1, [pc, #32]	; (5b8c <nrf_gpio_pin_port_decode+0x54>)
    5b6c:	4808      	ldr	r0, [pc, #32]	; (5b90 <nrf_gpio_pin_port_decode+0x58>)
    5b6e:	f240 222e 	movw	r2, #558	; 0x22e
    5b72:	f003 fcff 	bl	9574 <printk>
    5b76:	4805      	ldr	r0, [pc, #20]	; (5b8c <nrf_gpio_pin_port_decode+0x54>)
    5b78:	f240 212e 	movw	r1, #558	; 0x22e
    5b7c:	f003 fdc6 	bl	970c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5b80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    5b84:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    5b86:	4803      	ldr	r0, [pc, #12]	; (5b94 <nrf_gpio_pin_port_decode+0x5c>)
    5b88:	e7fc      	b.n	5b84 <nrf_gpio_pin_port_decode+0x4c>
    5b8a:	bf00      	nop
    5b8c:	0000b277 	.word	0x0000b277
    5b90:	0000a66d 	.word	0x0000a66d
    5b94:	50000300 	.word	0x50000300

00005b98 <nrfx_gpiote_input_configure>:
{
    5b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b9a:	4604      	mov	r4, r0
    5b9c:	b085      	sub	sp, #20
    5b9e:	4617      	mov	r7, r2
    5ba0:	461d      	mov	r5, r3
    if (p_input_config)
    5ba2:	b1f1      	cbz	r1, 5be2 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    5ba4:	f7ff ff44 	bl	5a30 <pin_is_task_output>
    5ba8:	b110      	cbz	r0, 5bb0 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    5baa:	484a      	ldr	r0, [pc, #296]	; (5cd4 <nrfx_gpiote_input_configure+0x13c>)
}
    5bac:	b005      	add	sp, #20
    5bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5bb0:	460b      	mov	r3, r1
    5bb2:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5bb6:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5bba:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5bbe:	f10d 020f 	add.w	r2, sp, #15
    5bc2:	f10d 010e 	add.w	r1, sp, #14
    5bc6:	4620      	mov	r0, r4
    5bc8:	f004 f930 	bl	9e2c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5bcc:	4a42      	ldr	r2, [pc, #264]	; (5cd8 <nrfx_gpiote_input_configure+0x140>)
    5bce:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5bd2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5bd6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5bda:	f043 0301 	orr.w	r3, r3, #1
    5bde:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    5be2:	b197      	cbz	r7, 5c0a <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5be4:	4b3c      	ldr	r3, [pc, #240]	; (5cd8 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5be6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5be8:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5bea:	f104 0008 	add.w	r0, r4, #8
    5bee:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    5bf2:	078f      	lsls	r7, r1, #30
    5bf4:	d50c      	bpl.n	5c10 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    5bf6:	2a00      	cmp	r2, #0
    5bf8:	d1d7      	bne.n	5baa <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5bfa:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    5bfe:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5c02:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    5c06:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    5c0a:	bbcd      	cbnz	r5, 5c80 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    5c0c:	4833      	ldr	r0, [pc, #204]	; (5cdc <nrfx_gpiote_input_configure+0x144>)
    5c0e:	e7cd      	b.n	5bac <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5c10:	f021 0120 	bic.w	r1, r1, #32
    5c14:	04c9      	lsls	r1, r1, #19
    5c16:	0cc9      	lsrs	r1, r1, #19
    5c18:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    5c1c:	2a00      	cmp	r2, #0
    5c1e:	d0ec      	beq.n	5bfa <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    5c20:	2e03      	cmp	r6, #3
    5c22:	d8c2      	bhi.n	5baa <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5c24:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5c26:	b92e      	cbnz	r6, 5c34 <nrfx_gpiote_input_configure+0x9c>
    5c28:	4a2d      	ldr	r2, [pc, #180]	; (5ce0 <nrfx_gpiote_input_configure+0x148>)
    5c2a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    5c2e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    5c32:	e7e2      	b.n	5bfa <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5c34:	00ba      	lsls	r2, r7, #2
    5c36:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5c3a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5c3e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    5c42:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    5c46:	f02c 0c03 	bic.w	ip, ip, #3
    5c4a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5c4e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    5c52:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    5c56:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    5c5a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c5e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    5c62:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    5c66:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    5c6a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    5c6e:	ea4c 0c0e 	orr.w	ip, ip, lr
    5c72:	f041 0120 	orr.w	r1, r1, #32
    5c76:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    5c7a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    5c7e:	e7bc      	b.n	5bfa <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5c80:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5c84:	4620      	mov	r0, r4
    5c86:	f7ff feff 	bl	5a88 <release_handler>
    if (!handler)
    5c8a:	2e00      	cmp	r6, #0
    5c8c:	d0be      	beq.n	5c0c <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5c8e:	4d12      	ldr	r5, [pc, #72]	; (5cd8 <nrfx_gpiote_input_configure+0x140>)
    5c90:	682b      	ldr	r3, [r5, #0]
    5c92:	429e      	cmp	r6, r3
    5c94:	d104      	bne.n	5ca0 <nrfx_gpiote_input_configure+0x108>
    5c96:	686b      	ldr	r3, [r5, #4]
    5c98:	429f      	cmp	r7, r3
    5c9a:	d101      	bne.n	5ca0 <nrfx_gpiote_input_configure+0x108>
    5c9c:	2200      	movs	r2, #0
    5c9e:	e00a      	b.n	5cb6 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5ca0:	4810      	ldr	r0, [pc, #64]	; (5ce4 <nrfx_gpiote_input_configure+0x14c>)
    5ca2:	f10d 010f 	add.w	r1, sp, #15
    5ca6:	f7ff fd25 	bl	56f4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5caa:	4b0c      	ldr	r3, [pc, #48]	; (5cdc <nrfx_gpiote_input_configure+0x144>)
    5cac:	4298      	cmp	r0, r3
    5cae:	f47f af7d 	bne.w	5bac <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    5cb2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5cb6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5cba:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5cbe:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5cc0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5cc2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5cc6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5cce:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    5cd2:	e79b      	b.n	5c0c <nrfx_gpiote_input_configure+0x74>
    5cd4:	0bad0004 	.word	0x0bad0004
    5cd8:	20000120 	.word	0x20000120
    5cdc:	0bad0000 	.word	0x0bad0000
    5ce0:	40006000 	.word	0x40006000
    5ce4:	20000194 	.word	0x20000194

00005ce8 <nrfx_gpiote_output_configure>:
{
    5ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cea:	4604      	mov	r4, r0
    5cec:	b085      	sub	sp, #20
    5cee:	4615      	mov	r5, r2
    if (p_config)
    5cf0:	b309      	cbz	r1, 5d36 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5cf2:	f100 0708 	add.w	r7, r0, #8
    5cf6:	4e31      	ldr	r6, [pc, #196]	; (5dbc <nrfx_gpiote_output_configure+0xd4>)
    5cf8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5cfc:	0798      	lsls	r0, r3, #30
    5cfe:	d401      	bmi.n	5d04 <nrfx_gpiote_output_configure+0x1c>
    5d00:	069a      	lsls	r2, r3, #26
    5d02:	d458      	bmi.n	5db6 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5d04:	f013 0f1c 	tst.w	r3, #28
    5d08:	d002      	beq.n	5d10 <nrfx_gpiote_output_configure+0x28>
    5d0a:	784b      	ldrb	r3, [r1, #1]
    5d0c:	2b01      	cmp	r3, #1
    5d0e:	d052      	beq.n	5db6 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5d10:	2301      	movs	r3, #1
    5d12:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5d16:	2300      	movs	r3, #0
    5d18:	e9cd 1300 	strd	r1, r3, [sp]
    5d1c:	1c4a      	adds	r2, r1, #1
    5d1e:	1c8b      	adds	r3, r1, #2
    5d20:	4620      	mov	r0, r4
    5d22:	f10d 010f 	add.w	r1, sp, #15
    5d26:	f004 f881 	bl	9e2c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5d2a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5d2e:	f043 0303 	orr.w	r3, r3, #3
    5d32:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    5d36:	b915      	cbnz	r5, 5d3e <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    5d38:	4821      	ldr	r0, [pc, #132]	; (5dc0 <nrfx_gpiote_output_configure+0xd8>)
}
    5d3a:	b005      	add	sp, #20
    5d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5d3e:	4e1f      	ldr	r6, [pc, #124]	; (5dbc <nrfx_gpiote_output_configure+0xd4>)
    5d40:	f104 0708 	add.w	r7, r4, #8
    5d44:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    5d48:	0783      	lsls	r3, r0, #30
    5d4a:	d534      	bpl.n	5db6 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    5d4c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    5d50:	4661      	mov	r1, ip
    5d52:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5d54:	f020 0020 	bic.w	r0, r0, #32
    5d58:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5d5c:	04c0      	lsls	r0, r0, #19
    5d5e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5d62:	0cc0      	lsrs	r0, r0, #19
    5d64:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5d68:	2300      	movs	r3, #0
    5d6a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5d6e:	786a      	ldrb	r2, [r5, #1]
    5d70:	2a00      	cmp	r2, #0
    5d72:	d0e1      	beq.n	5d38 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5d74:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    5d78:	78ad      	ldrb	r5, [r5, #2]
    5d7a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    5d7e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5d82:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5d86:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5d8a:	0223      	lsls	r3, r4, #8
    5d8c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5d90:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5d92:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5d96:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5d9a:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5d9c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5d9e:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5da2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5da6:	432b      	orrs	r3, r5
    5da8:	f040 0020 	orr.w	r0, r0, #32
    5dac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5db0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5db4:	e7c0      	b.n	5d38 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    5db6:	4803      	ldr	r0, [pc, #12]	; (5dc4 <nrfx_gpiote_output_configure+0xdc>)
    5db8:	e7bf      	b.n	5d3a <nrfx_gpiote_output_configure+0x52>
    5dba:	bf00      	nop
    5dbc:	20000120 	.word	0x20000120
    5dc0:	0bad0000 	.word	0x0bad0000
    5dc4:	0bad0004 	.word	0x0bad0004

00005dc8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5dc8:	4b01      	ldr	r3, [pc, #4]	; (5dd0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5dca:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5dce:	4770      	bx	lr
    5dd0:	20000120 	.word	0x20000120

00005dd4 <nrfx_gpiote_channel_get>:
{
    5dd4:	b538      	push	{r3, r4, r5, lr}
    5dd6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    5dd8:	460d      	mov	r5, r1
    5dda:	b951      	cbnz	r1, 5df2 <nrfx_gpiote_channel_get+0x1e>
    5ddc:	490a      	ldr	r1, [pc, #40]	; (5e08 <nrfx_gpiote_channel_get+0x34>)
    5dde:	480b      	ldr	r0, [pc, #44]	; (5e0c <nrfx_gpiote_channel_get+0x38>)
    5de0:	f240 2235 	movw	r2, #565	; 0x235
    5de4:	f003 fbc6 	bl	9574 <printk>
    5de8:	4807      	ldr	r0, [pc, #28]	; (5e08 <nrfx_gpiote_channel_get+0x34>)
    5dea:	f240 2135 	movw	r1, #565	; 0x235
    5dee:	f003 fc8d 	bl	970c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5df2:	3408      	adds	r4, #8
    5df4:	4b06      	ldr	r3, [pc, #24]	; (5e10 <nrfx_gpiote_channel_get+0x3c>)
    5df6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    5dfa:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5dfc:	bf43      	ittte	mi
    5dfe:	0b5b      	lsrmi	r3, r3, #13
    5e00:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    5e02:	4804      	ldrmi	r0, [pc, #16]	; (5e14 <nrfx_gpiote_channel_get+0x40>)
        return NRFX_ERROR_INVALID_PARAM;
    5e04:	4804      	ldrpl	r0, [pc, #16]	; (5e18 <nrfx_gpiote_channel_get+0x44>)
}
    5e06:	bd38      	pop	{r3, r4, r5, pc}
    5e08:	0000b57a 	.word	0x0000b57a
    5e0c:	0000a66d 	.word	0x0000a66d
    5e10:	20000120 	.word	0x20000120
    5e14:	0bad0000 	.word	0x0bad0000
    5e18:	0bad0004 	.word	0x0bad0004

00005e1c <nrfx_gpiote_init>:
{
    5e1c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5e1e:	4c0e      	ldr	r4, [pc, #56]	; (5e58 <nrfx_gpiote_init+0x3c>)
    5e20:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5e24:	b9b5      	cbnz	r5, 5e54 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5e26:	2260      	movs	r2, #96	; 0x60
    5e28:	4629      	mov	r1, r5
    5e2a:	f104 0010 	add.w	r0, r4, #16
    5e2e:	f003 fd07 	bl	9840 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5e32:	2006      	movs	r0, #6
    5e34:	f7fc feba 	bl	2bac <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5e38:	4b08      	ldr	r3, [pc, #32]	; (5e5c <nrfx_gpiote_init+0x40>)
    return err_code;
    5e3a:	4809      	ldr	r0, [pc, #36]	; (5e60 <nrfx_gpiote_init+0x44>)
    5e3c:	601d      	str	r5, [r3, #0]
    5e3e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5e40:	4b08      	ldr	r3, [pc, #32]	; (5e64 <nrfx_gpiote_init+0x48>)
    5e42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5e46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5e4a:	2301      	movs	r3, #1
    5e4c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5e50:	6763      	str	r3, [r4, #116]	; 0x74
}
    5e52:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5e54:	4804      	ldr	r0, [pc, #16]	; (5e68 <nrfx_gpiote_init+0x4c>)
    5e56:	e7fc      	b.n	5e52 <nrfx_gpiote_init+0x36>
    5e58:	20000120 	.word	0x20000120
    5e5c:	4000617c 	.word	0x4000617c
    5e60:	0bad0000 	.word	0x0bad0000
    5e64:	40006000 	.word	0x40006000
    5e68:	0bad0005 	.word	0x0bad0005

00005e6c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5e6c:	4b03      	ldr	r3, [pc, #12]	; (5e7c <nrfx_gpiote_is_init+0x10>)
    5e6e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5e72:	3800      	subs	r0, #0
    5e74:	bf18      	it	ne
    5e76:	2001      	movne	r0, #1
    5e78:	4770      	bx	lr
    5e7a:	bf00      	nop
    5e7c:	20000120 	.word	0x20000120

00005e80 <nrfx_gpiote_channel_free>:
{
    5e80:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5e82:	4801      	ldr	r0, [pc, #4]	; (5e88 <nrfx_gpiote_channel_free+0x8>)
    5e84:	f7ff bc5a 	b.w	573c <nrfx_flag32_free>
    5e88:	20000190 	.word	0x20000190

00005e8c <nrfx_gpiote_channel_alloc>:
{
    5e8c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5e8e:	4801      	ldr	r0, [pc, #4]	; (5e94 <nrfx_gpiote_channel_alloc+0x8>)
    5e90:	f7ff bc30 	b.w	56f4 <nrfx_flag32_alloc>
    5e94:	20000190 	.word	0x20000190

00005e98 <nrfx_gpiote_trigger_enable>:
{
    5e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5e9a:	4d30      	ldr	r5, [pc, #192]	; (5f5c <nrfx_gpiote_trigger_enable+0xc4>)
    5e9c:	f100 0708 	add.w	r7, r0, #8
{
    5ea0:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5ea2:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    5ea6:	f013 0f1c 	tst.w	r3, #28
{
    5eaa:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    5eac:	d10a      	bne.n	5ec4 <nrfx_gpiote_trigger_enable+0x2c>
    5eae:	492c      	ldr	r1, [pc, #176]	; (5f60 <nrfx_gpiote_trigger_enable+0xc8>)
    5eb0:	482c      	ldr	r0, [pc, #176]	; (5f64 <nrfx_gpiote_trigger_enable+0xcc>)
    5eb2:	f240 32df 	movw	r2, #991	; 0x3df
    5eb6:	f003 fb5d 	bl	9574 <printk>
    5eba:	4829      	ldr	r0, [pc, #164]	; (5f60 <nrfx_gpiote_trigger_enable+0xc8>)
    5ebc:	f240 31df 	movw	r1, #991	; 0x3df
    5ec0:	f003 fc24 	bl	970c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5ec4:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5ec8:	0683      	lsls	r3, r0, #26
    5eca:	d51f      	bpl.n	5f0c <nrfx_gpiote_trigger_enable+0x74>
    5ecc:	f010 0302 	ands.w	r3, r0, #2
    5ed0:	d11c      	bne.n	5f0c <nrfx_gpiote_trigger_enable+0x74>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5ed2:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    5ed4:	4608      	mov	r0, r1
    5ed6:	f003 ffa5 	bl	9e24 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    5eda:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    5ede:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5ee2:	6003      	str	r3, [r0, #0]
    5ee4:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5ee6:	008b      	lsls	r3, r1, #2
    5ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5eec:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5ef0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5ef4:	f042 0201 	orr.w	r2, r2, #1
    5ef8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    5efc:	b126      	cbz	r6, 5f08 <nrfx_gpiote_trigger_enable+0x70>
    p_reg->INTENSET = mask;
    5efe:	4a1a      	ldr	r2, [pc, #104]	; (5f68 <nrfx_gpiote_trigger_enable+0xd0>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5f00:	2301      	movs	r3, #1
    5f02:	408b      	lsls	r3, r1
    5f04:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5f08:	b003      	add	sp, #12
    5f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    5f0c:	b956      	cbnz	r6, 5f24 <nrfx_gpiote_trigger_enable+0x8c>
    5f0e:	4914      	ldr	r1, [pc, #80]	; (5f60 <nrfx_gpiote_trigger_enable+0xc8>)
    5f10:	4814      	ldr	r0, [pc, #80]	; (5f64 <nrfx_gpiote_trigger_enable+0xcc>)
    5f12:	f240 32ee 	movw	r2, #1006	; 0x3ee
    5f16:	f003 fb2d 	bl	9574 <printk>
    5f1a:	4811      	ldr	r0, [pc, #68]	; (5f60 <nrfx_gpiote_trigger_enable+0xc8>)
    5f1c:	f240 31ee 	movw	r1, #1006	; 0x3ee
    5f20:	f003 fbf4 	bl	970c <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5f24:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    5f28:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5f2c:	2b04      	cmp	r3, #4
    5f2e:	d010      	beq.n	5f52 <nrfx_gpiote_trigger_enable+0xba>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5f30:	2b05      	cmp	r3, #5
    5f32:	d010      	beq.n	5f56 <nrfx_gpiote_trigger_enable+0xbe>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5f34:	a801      	add	r0, sp, #4
    5f36:	9401      	str	r4, [sp, #4]
    5f38:	f7ff fdfe 	bl	5b38 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5f3c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    5f3e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5f42:	40d9      	lsrs	r1, r3
    5f44:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5f48:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5f4a:	4620      	mov	r0, r4
    5f4c:	f003 ffb9 	bl	9ec2 <nrf_gpio_cfg_sense_set>
}
    5f50:	e7da      	b.n	5f08 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5f52:	2103      	movs	r1, #3
    5f54:	e7f9      	b.n	5f4a <nrfx_gpiote_trigger_enable+0xb2>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5f56:	2102      	movs	r1, #2
    5f58:	e7f7      	b.n	5f4a <nrfx_gpiote_trigger_enable+0xb2>
    5f5a:	bf00      	nop
    5f5c:	20000120 	.word	0x20000120
    5f60:	0000b57a 	.word	0x0000b57a
    5f64:	0000a66d 	.word	0x0000a66d
    5f68:	40006000 	.word	0x40006000

00005f6c <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5f6c:	4b0e      	ldr	r3, [pc, #56]	; (5fa8 <nrfx_gpiote_trigger_disable+0x3c>)
    5f6e:	f100 0208 	add.w	r2, r0, #8
    5f72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5f76:	0699      	lsls	r1, r3, #26
    5f78:	d513      	bpl.n	5fa2 <nrfx_gpiote_trigger_disable+0x36>
    5f7a:	079a      	lsls	r2, r3, #30
    5f7c:	d411      	bmi.n	5fa2 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5f7e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5f80:	2201      	movs	r2, #1
    5f82:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    5f84:	009b      	lsls	r3, r3, #2
    5f86:	4909      	ldr	r1, [pc, #36]	; (5fac <nrfx_gpiote_trigger_disable+0x40>)
    5f88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5f8c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5f90:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5f94:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5f98:	f022 0203 	bic.w	r2, r2, #3
    5f9c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5fa0:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5fa2:	2100      	movs	r1, #0
    5fa4:	f003 bf8d 	b.w	9ec2 <nrf_gpio_cfg_sense_set>
    5fa8:	20000120 	.word	0x20000120
    5fac:	40006000 	.word	0x40006000

00005fb0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5fb0:	4b0e      	ldr	r3, [pc, #56]	; (5fec <nrfx_gpiote_pin_uninit+0x3c>)
    5fb2:	f100 0208 	add.w	r2, r0, #8
{
    5fb6:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5fb8:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    5fbc:	07db      	lsls	r3, r3, #31
{
    5fbe:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5fc0:	d511      	bpl.n	5fe6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    5fc2:	f7ff ffd3 	bl	5f6c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5fc6:	4620      	mov	r0, r4
    5fc8:	f7ff fd9c 	bl	5b04 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5fcc:	a801      	add	r0, sp, #4
    5fce:	9401      	str	r4, [sp, #4]
    5fd0:	f7ff fdb2 	bl	5b38 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5fd4:	9b01      	ldr	r3, [sp, #4]
    5fd6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5fda:	2202      	movs	r2, #2
    5fdc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    5fe0:	4803      	ldr	r0, [pc, #12]	; (5ff0 <nrfx_gpiote_pin_uninit+0x40>)
}
    5fe2:	b002      	add	sp, #8
    5fe4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5fe6:	4803      	ldr	r0, [pc, #12]	; (5ff4 <nrfx_gpiote_pin_uninit+0x44>)
    5fe8:	e7fb      	b.n	5fe2 <nrfx_gpiote_pin_uninit+0x32>
    5fea:	bf00      	nop
    5fec:	20000120 	.word	0x20000120
    5ff0:	0bad0000 	.word	0x0bad0000
    5ff4:	0bad0004 	.word	0x0bad0004

00005ff8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ffc:	4b65      	ldr	r3, [pc, #404]	; (6194 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    5ffe:	4866      	ldr	r0, [pc, #408]	; (6198 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6000:	4966      	ldr	r1, [pc, #408]	; (619c <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    6002:	2500      	movs	r5, #0
{
    6004:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6006:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6008:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    600a:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    600c:	b136      	cbz	r6, 601c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    600e:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    6012:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6014:	bf1e      	ittt	ne
    6016:	601c      	strne	r4, [r3, #0]
    6018:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    601a:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    601c:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    601e:	428b      	cmp	r3, r1
        mask <<= 1;
    6020:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6024:	d1f1      	bne.n	600a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6026:	4f5e      	ldr	r7, [pc, #376]	; (61a0 <nrfx_gpiote_irq_handler+0x1a8>)
    6028:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    602a:	b37b      	cbz	r3, 608c <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    602c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6030:	4e5c      	ldr	r6, [pc, #368]	; (61a4 <nrfx_gpiote_irq_handler+0x1ac>)
    6032:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6036:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    6038:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    603c:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    6040:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    6042:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6046:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6048:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    604c:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    6050:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    6054:	f8d9 3000 	ldr.w	r3, [r9]
    6058:	b9f3      	cbnz	r3, 6098 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    605a:	f108 0820 	add.w	r8, r8, #32
    605e:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    6062:	f109 0904 	add.w	r9, r9, #4
    6066:	d1f5      	bne.n	6054 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6068:	603b      	str	r3, [r7, #0]
    606a:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    606c:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    606e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6072:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6076:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    6078:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    607c:	9b01      	ldr	r3, [sp, #4]
    607e:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    6082:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    6084:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    6088:	4313      	orrs	r3, r2
    608a:	d1dd      	bne.n	6048 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    608c:	2401      	movs	r4, #1
    while (mask)
    608e:	2d00      	cmp	r5, #0
    6090:	d168      	bne.n	6164 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    6092:	b009      	add	sp, #36	; 0x24
    6094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    6098:	fa93 f3a3 	rbit	r3, r3
    609c:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    60a0:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    60a4:	f106 0208 	add.w	r2, r6, #8
    60a8:	4b3f      	ldr	r3, [pc, #252]	; (61a8 <nrfx_gpiote_irq_handler+0x1b0>)
    60aa:	9605      	str	r6, [sp, #20]
    60ac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    60b0:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    60b4:	08f4      	lsrs	r4, r6, #3
    60b6:	9302      	str	r3, [sp, #8]
    60b8:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    60ba:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    60bc:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    60c0:	fa0b fc00 	lsl.w	ip, fp, r0
    60c4:	5d18      	ldrb	r0, [r3, r4]
    60c6:	ea20 000c 	bic.w	r0, r0, ip
    60ca:	5518      	strb	r0, [r3, r4]
    60cc:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    60ce:	a805      	add	r0, sp, #20
    60d0:	9103      	str	r1, [sp, #12]
    60d2:	f7ff fd31 	bl	5b38 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    60d6:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    60d8:	9903      	ldr	r1, [sp, #12]
    60da:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    60de:	074b      	lsls	r3, r1, #29
    60e0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    60e4:	f3c4 4401 	ubfx	r4, r4, #16, #2
    60e8:	d523      	bpl.n	6132 <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    60ea:	4651      	mov	r1, sl
    60ec:	4630      	mov	r0, r6
    60ee:	f7ff fcad 	bl	5a4c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    60f2:	a805      	add	r0, sp, #20
    60f4:	9605      	str	r6, [sp, #20]
    60f6:	f7ff fd1f 	bl	5b38 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    60fa:	9a05      	ldr	r2, [sp, #20]
    60fc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    6100:	b2e4      	uxtb	r4, r4
    6102:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6106:	f3c2 4201 	ubfx	r2, r2, #16, #2
    610a:	4294      	cmp	r4, r2
    610c:	d107      	bne.n	611e <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    610e:	2100      	movs	r1, #0
    6110:	4630      	mov	r0, r6
    6112:	f003 fed6 	bl	9ec2 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6116:	4621      	mov	r1, r4
    6118:	4630      	mov	r0, r6
    611a:	f003 fed2 	bl	9ec2 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    611e:	a805      	add	r0, sp, #20
    6120:	9605      	str	r6, [sp, #20]
    6122:	f7ff fd09 	bl	5b38 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    6126:	9b05      	ldr	r3, [sp, #20]
    6128:	fa0b f303 	lsl.w	r3, fp, r3
    612c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    6130:	e790      	b.n	6054 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6132:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6134:	bf0c      	ite	eq
    6136:	2103      	moveq	r1, #3
    6138:	2102      	movne	r1, #2
    613a:	4630      	mov	r0, r6
    613c:	f003 fec1 	bl	9ec2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6140:	9b02      	ldr	r3, [sp, #8]
    6142:	2b03      	cmp	r3, #3
    6144:	d004      	beq.n	6150 <nrfx_gpiote_irq_handler+0x158>
    6146:	2c02      	cmp	r4, #2
    6148:	d107      	bne.n	615a <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    614a:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    614e:	d1e6      	bne.n	611e <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    6150:	4651      	mov	r1, sl
    6152:	4630      	mov	r0, r6
    6154:	f7ff fc7a 	bl	5a4c <call_handler>
    6158:	e7e1      	b.n	611e <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    615a:	2c03      	cmp	r4, #3
    615c:	d1df      	bne.n	611e <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    615e:	f1ba 0f02 	cmp.w	sl, #2
    6162:	e7f4      	b.n	614e <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    6164:	fa95 f3a5 	rbit	r3, r5
    6168:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    616c:	fa04 f203 	lsl.w	r2, r4, r3
    6170:	009b      	lsls	r3, r3, #2
    6172:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6176:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    617a:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    617e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6182:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6186:	f3c0 2005 	ubfx	r0, r0, #8, #6
    618a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    618e:	f7ff fc5d 	bl	5a4c <call_handler>
    6192:	e77c      	b.n	608e <nrfx_gpiote_irq_handler+0x96>
    6194:	40006100 	.word	0x40006100
    6198:	40006000 	.word	0x40006000
    619c:	40006120 	.word	0x40006120
    61a0:	4000617c 	.word	0x4000617c
    61a4:	50000300 	.word	0x50000300
    61a8:	20000120 	.word	0x20000120

000061ac <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    61ac:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    61ae:	4801      	ldr	r0, [pc, #4]	; (61b4 <nrfx_ppi_channel_alloc+0x8>)
    61b0:	f7ff baa0 	b.w	56f4 <nrfx_flag32_alloc>
    61b4:	2000019c 	.word	0x2000019c

000061b8 <nrfx_ppi_channel_assign>:
    return nrfx_flag32_free(&m_channels_allocated, channel);
}


nrfx_err_t nrfx_ppi_channel_assign(nrf_ppi_channel_t channel, uint32_t eep, uint32_t tep)
{
    61b8:	b570      	push	{r4, r5, r6, lr}
    61ba:	4604      	mov	r4, r0
    61bc:	4615      	mov	r5, r2
    if ((uint32_t *)eep == NULL || (uint32_t *)tep == NULL)
    61be:	460e      	mov	r6, r1
    61c0:	b1b1      	cbz	r1, 61f0 <nrfx_ppi_channel_assign+0x38>
    61c2:	b1aa      	cbz	r2, 61f0 <nrfx_ppi_channel_assign+0x38>
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    61c4:	2301      	movs	r3, #1
    61c6:	4083      	lsls	r3, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
    61c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
        return NRFX_ERROR_NULL;
    }

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_programmable_app_channel(channel))
    61cc:	b193      	cbz	r3, 61f4 <nrfx_ppi_channel_assign+0x3c>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (!nrfx_flag32_is_allocated(m_channels_allocated, channel))
    61ce:	4b0b      	ldr	r3, [pc, #44]	; (61fc <nrfx_ppi_channel_assign+0x44>)
    61d0:	4601      	mov	r1, r0
    61d2:	6818      	ldr	r0, [r3, #0]
    61d4:	f003 fe10 	bl	9df8 <nrfx_flag32_is_allocated>
    61d8:	b170      	cbz	r0, 61f8 <nrfx_ppi_channel_assign+0x40>
    p_reg->CH[(uint32_t) channel].EEP = eep;
    61da:	00e0      	lsls	r0, r4, #3
    61dc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    61e0:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    61e4:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    61e8:	f8c0 5514 	str.w	r5, [r0, #1300]	; 0x514
    nrfx_err_t err_code = NRFX_SUCCESS;
    61ec:	4804      	ldr	r0, [pc, #16]	; (6200 <nrfx_ppi_channel_assign+0x48>)
                      eep,
                      tep);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    61ee:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_NULL;
    61f0:	4804      	ldr	r0, [pc, #16]	; (6204 <nrfx_ppi_channel_assign+0x4c>)
    61f2:	e7fc      	b.n	61ee <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_PARAM;
    61f4:	4804      	ldr	r0, [pc, #16]	; (6208 <nrfx_ppi_channel_assign+0x50>)
    61f6:	e7fa      	b.n	61ee <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_STATE;
    61f8:	4804      	ldr	r0, [pc, #16]	; (620c <nrfx_ppi_channel_assign+0x54>)
    61fa:	e7f8      	b.n	61ee <nrfx_ppi_channel_assign+0x36>
    61fc:	2000019c 	.word	0x2000019c
    6200:	0bad0000 	.word	0x0bad0000
    6204:	0bad0009 	.word	0x0bad0009
    6208:	0bad0004 	.word	0x0bad0004
    620c:	0bad0005 	.word	0x0bad0005

00006210 <nrfx_ppi_channel_enable>:
    return err_code;
#endif
}

nrfx_err_t nrfx_ppi_channel_enable(nrf_ppi_channel_t channel)
{
    6210:	b510      	push	{r4, lr}
    6212:	2401      	movs	r4, #1
    6214:	4084      	lsls	r4, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
    6216:	f3c4 0313 	ubfx	r3, r4, #0, #20
{
    621a:	4601      	mov	r1, r0

    if (!is_app_channel(channel))
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (is_programmable_app_channel(channel) &&
    621c:	b923      	cbnz	r3, 6228 <nrfx_ppi_channel_enable+0x18>
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
    621e:	4b06      	ldr	r3, [pc, #24]	; (6238 <nrfx_ppi_channel_enable+0x28>)
    nrfx_err_t err_code = NRFX_SUCCESS;
    6220:	4806      	ldr	r0, [pc, #24]	; (623c <nrfx_ppi_channel_enable+0x2c>)
    6222:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    {
        nrf_ppi_channel_enable(NRF_PPI, channel);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6226:	bd10      	pop	{r4, pc}
             !nrfx_flag32_is_allocated(m_channels_allocated, channel))
    6228:	4b05      	ldr	r3, [pc, #20]	; (6240 <nrfx_ppi_channel_enable+0x30>)
    622a:	6818      	ldr	r0, [r3, #0]
    622c:	f003 fde4 	bl	9df8 <nrfx_flag32_is_allocated>
    else if (is_programmable_app_channel(channel) &&
    6230:	2800      	cmp	r0, #0
    6232:	d1f4      	bne.n	621e <nrfx_ppi_channel_enable+0xe>
        err_code = NRFX_ERROR_INVALID_STATE;
    6234:	4803      	ldr	r0, [pc, #12]	; (6244 <nrfx_ppi_channel_enable+0x34>)
    return err_code;
    6236:	e7f6      	b.n	6226 <nrfx_ppi_channel_enable+0x16>
    6238:	4001f000 	.word	0x4001f000
    623c:	0bad0000 	.word	0x0bad0000
    6240:	2000019c 	.word	0x2000019c
    6244:	0bad0005 	.word	0x0bad0005

00006248 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
    6248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    624c:	4605      	mov	r5, r0
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
    624e:	7907      	ldrb	r7, [r0, #4]
{
    6250:	4690      	mov	r8, r2
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
    6252:	460c      	mov	r4, r1
    6254:	b941      	cbnz	r1, 6268 <nrfx_timer_init+0x20>
    6256:	493f      	ldr	r1, [pc, #252]	; (6354 <nrfx_timer_init+0x10c>)
    6258:	483f      	ldr	r0, [pc, #252]	; (6358 <nrfx_timer_init+0x110>)
    625a:	2253      	movs	r2, #83	; 0x53
    625c:	f003 f98a 	bl	9574 <printk>
    6260:	483c      	ldr	r0, [pc, #240]	; (6354 <nrfx_timer_init+0x10c>)
    6262:	2153      	movs	r1, #83	; 0x53
    6264:	f003 fa52 	bl	970c <assert_post_action>
    NRFX_ASSERT(timer_event_handler);
    6268:	f1b8 0f00 	cmp.w	r8, #0
    626c:	d108      	bne.n	6280 <nrfx_timer_init+0x38>
    626e:	4939      	ldr	r1, [pc, #228]	; (6354 <nrfx_timer_init+0x10c>)
    6270:	4839      	ldr	r0, [pc, #228]	; (6358 <nrfx_timer_init+0x110>)
    6272:	2254      	movs	r2, #84	; 0x54
    6274:	f003 f97e 	bl	9574 <printk>
    6278:	4836      	ldr	r0, [pc, #216]	; (6354 <nrfx_timer_init+0x10c>)
    627a:	2154      	movs	r1, #84	; 0x54
    627c:	f003 fa46 	bl	970c <assert_post_action>

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    6280:	4e36      	ldr	r6, [pc, #216]	; (635c <nrfx_timer_init+0x114>)
    6282:	230c      	movs	r3, #12
    6284:	fb03 6307 	mla	r3, r3, r7, r6
    6288:	7a1b      	ldrb	r3, [r3, #8]
    628a:	2b00      	cmp	r3, #0
    628c:	d160      	bne.n	6350 <nrfx_timer_init+0x108>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
    628e:	682b      	ldr	r3, [r5, #0]
    6290:	4a33      	ldr	r2, [pc, #204]	; (6360 <nrfx_timer_init+0x118>)
    6292:	4293      	cmp	r3, r2
    6294:	d00f      	beq.n	62b6 <nrfx_timer_init+0x6e>
    6296:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    629a:	4293      	cmp	r3, r2
    629c:	d00b      	beq.n	62b6 <nrfx_timer_init+0x6e>
    629e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    62a2:	4293      	cmp	r3, r2
    62a4:	d007      	beq.n	62b6 <nrfx_timer_init+0x6e>
    62a6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
    62aa:	4293      	cmp	r3, r2
    62ac:	d003      	beq.n	62b6 <nrfx_timer_init+0x6e>
    62ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    62b2:	4293      	cmp	r3, r2
    62b4:	d102      	bne.n	62bc <nrfx_timer_init+0x74>
    62b6:	78a3      	ldrb	r3, [r4, #2]
    62b8:	2b03      	cmp	r3, #3
    62ba:	d908      	bls.n	62ce <nrfx_timer_init+0x86>
    62bc:	4925      	ldr	r1, [pc, #148]	; (6354 <nrfx_timer_init+0x10c>)
    62be:	4826      	ldr	r0, [pc, #152]	; (6358 <nrfx_timer_init+0x110>)
    62c0:	2261      	movs	r2, #97	; 0x61
    62c2:	f003 f957 	bl	9574 <printk>
    62c6:	4823      	ldr	r0, [pc, #140]	; (6354 <nrfx_timer_init+0x10c>)
    62c8:	2161      	movs	r1, #97	; 0x61
    62ca:	f003 fa1f 	bl	970c <assert_post_action>

    p_cb->handler = timer_event_handler;
    62ce:	230c      	movs	r3, #12
    62d0:	437b      	muls	r3, r7
    62d2:	18f2      	adds	r2, r6, r3
    62d4:	f846 8003 	str.w	r8, [r6, r3]
    p_cb->context = p_config->p_context;
    62d8:	6863      	ldr	r3, [r4, #4]
    62da:	6053      	str	r3, [r2, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    62dc:	7969      	ldrb	r1, [r5, #5]
    62de:	6828      	ldr	r0, [r5, #0]
    62e0:	2300      	movs	r3, #0
}

NRF_STATIC_INLINE void nrf_timer_event_clear(NRF_TIMER_Type *  p_reg,
                                             nrf_timer_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62e2:	469c      	mov	ip, r3
    62e4:	b2da      	uxtb	r2, r3
    62e6:	4291      	cmp	r1, r2
    62e8:	d82a      	bhi.n	6340 <nrfx_timer_init+0xf8>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    62ea:	f340 3007 	sbfx	r0, r0, #12, #8
    62ee:	f7fc fc5d 	bl	2bac <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
    62f2:	682b      	ldr	r3, [r5, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
    62f4:	7862      	ldrb	r2, [r4, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
    62f6:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    62fa:	481a      	ldr	r0, [pc, #104]	; (6364 <nrfx_timer_init+0x11c>)
    62fc:	f021 0103 	bic.w	r1, r1, #3
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
    6300:	f002 0203 	and.w	r2, r2, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
    6304:	430a      	orrs	r2, r1
    6306:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
    630a:	f8d3 1508 	ldr.w	r1, [r3, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
    630e:	78a2      	ldrb	r2, [r4, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
    6310:	f021 0103 	bic.w	r1, r1, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
    6314:	f002 0203 	and.w	r2, r2, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
    6318:	430a      	orrs	r2, r1
    631a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_frequency_t frequency)
{
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
    631e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
    6322:	7822      	ldrb	r2, [r4, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
    6324:	f021 010f 	bic.w	r1, r1, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
    6328:	f002 020f 	and.w	r2, r2, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
    632c:	430a      	orrs	r2, r1
    632e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6332:	230c      	movs	r3, #12
    6334:	fb03 6607 	mla	r6, r3, r7, r6
    6338:	2301      	movs	r3, #1
    633a:	7233      	strb	r3, [r6, #8]
}
    633c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6340:	009a      	lsls	r2, r3, #2
    6342:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    6346:	3301      	adds	r3, #1
    6348:	f840 c002 	str.w	ip, [r0, r2]
    634c:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    634e:	e7c9      	b.n	62e4 <nrfx_timer_init+0x9c>
        return err_code;
    6350:	4805      	ldr	r0, [pc, #20]	; (6368 <nrfx_timer_init+0x120>)
    6352:	e7f3      	b.n	633c <nrfx_timer_init+0xf4>
    6354:	0000b5b8 	.word	0x0000b5b8
    6358:	0000a66d 	.word	0x0000a66d
    635c:	200010fc 	.word	0x200010fc
    6360:	40008000 	.word	0x40008000
    6364:	0bad0000 	.word	0x0bad0000
    6368:	0bad0005 	.word	0x0bad0005

0000636c <nrfx_timer_enable>:
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
}

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    636c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
    636e:	4d0e      	ldr	r5, [pc, #56]	; (63a8 <nrfx_timer_enable+0x3c>)
    6370:	7902      	ldrb	r2, [r0, #4]
    6372:	210c      	movs	r1, #12
    6374:	fb01 5202 	mla	r2, r1, r2, r5
{
    6378:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
    637a:	7a12      	ldrb	r2, [r2, #8]
    637c:	2a01      	cmp	r2, #1
    637e:	d008      	beq.n	6392 <nrfx_timer_enable+0x26>
    6380:	490a      	ldr	r1, [pc, #40]	; (63ac <nrfx_timer_enable+0x40>)
    6382:	480b      	ldr	r0, [pc, #44]	; (63b0 <nrfx_timer_enable+0x44>)
    6384:	228f      	movs	r2, #143	; 0x8f
    6386:	f003 f8f5 	bl	9574 <printk>
    638a:	4808      	ldr	r0, [pc, #32]	; (63ac <nrfx_timer_enable+0x40>)
    638c:	218f      	movs	r1, #143	; 0x8f
    638e:	f003 f9bd 	bl	970c <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
    6392:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6394:	2201      	movs	r2, #1
    6396:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
    6398:	7923      	ldrb	r3, [r4, #4]
    639a:	220c      	movs	r2, #12
    639c:	fb02 5303 	mla	r3, r2, r3, r5
    63a0:	2202      	movs	r2, #2
    63a2:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
    63a4:	bd38      	pop	{r3, r4, r5, pc}
    63a6:	bf00      	nop
    63a8:	200010fc 	.word	0x200010fc
    63ac:	0000b5b8 	.word	0x0000b5b8
    63b0:	0000a66d 	.word	0x0000a66d

000063b4 <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    63b4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    63b6:	4d0d      	ldr	r5, [pc, #52]	; (63ec <nrfx_timer_disable+0x38>)
    63b8:	7902      	ldrb	r2, [r0, #4]
    63ba:	210c      	movs	r1, #12
    63bc:	fb01 5202 	mla	r2, r1, r2, r5
{
    63c0:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    63c2:	7a12      	ldrb	r2, [r2, #8]
    63c4:	b942      	cbnz	r2, 63d8 <nrfx_timer_disable+0x24>
    63c6:	490a      	ldr	r1, [pc, #40]	; (63f0 <nrfx_timer_disable+0x3c>)
    63c8:	480a      	ldr	r0, [pc, #40]	; (63f4 <nrfx_timer_disable+0x40>)
    63ca:	2297      	movs	r2, #151	; 0x97
    63cc:	f003 f8d2 	bl	9574 <printk>
    63d0:	4807      	ldr	r0, [pc, #28]	; (63f0 <nrfx_timer_disable+0x3c>)
    63d2:	2197      	movs	r1, #151	; 0x97
    63d4:	f003 f99a 	bl	970c <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
    63d8:	6823      	ldr	r3, [r4, #0]
    63da:	2201      	movs	r2, #1
    63dc:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
    63de:	7923      	ldrb	r3, [r4, #4]
    63e0:	210c      	movs	r1, #12
    63e2:	fb01 5303 	mla	r3, r1, r3, r5
    63e6:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
    63e8:	bd38      	pop	{r3, r4, r5, pc}
    63ea:	bf00      	nop
    63ec:	200010fc 	.word	0x200010fc
    63f0:	0000b5b8 	.word	0x0000b5b8
    63f4:	0000a66d 	.word	0x0000a66d

000063f8 <nrfx_timer_uninit>:
{
    63f8:	b538      	push	{r3, r4, r5, lr}
    63fa:	4604      	mov	r4, r0
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    63fc:	6800      	ldr	r0, [r0, #0]
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    63fe:	f340 3007 	sbfx	r0, r0, #12, #8
    6402:	f7fc fbe3 	bl	2bcc <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
    6406:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS &= ~(mask);
    6408:	2500      	movs	r5, #0
    640a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    640e:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
    6412:	f04f 32ff 	mov.w	r2, #4294967295
    6416:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    nrfx_timer_disable(p_instance);
    641a:	4620      	mov	r0, r4
    641c:	f7ff ffca 	bl	63b4 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
    6420:	7923      	ldrb	r3, [r4, #4]
    6422:	4a03      	ldr	r2, [pc, #12]	; (6430 <nrfx_timer_uninit+0x38>)
    6424:	210c      	movs	r1, #12
    6426:	fb01 2303 	mla	r3, r1, r3, r2
    642a:	721d      	strb	r5, [r3, #8]
}
    642c:	bd38      	pop	{r3, r4, r5, pc}
    642e:	bf00      	nop
    6430:	200010fc 	.word	0x200010fc

00006434 <nrfx_timer_clear>:
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_STOP);
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    6434:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    6436:	4a0a      	ldr	r2, [pc, #40]	; (6460 <nrfx_timer_clear+0x2c>)
    6438:	7903      	ldrb	r3, [r0, #4]
    643a:	210c      	movs	r1, #12
    643c:	fb01 2303 	mla	r3, r1, r3, r2
{
    6440:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    6442:	7a1b      	ldrb	r3, [r3, #8]
    6444:	b943      	cbnz	r3, 6458 <nrfx_timer_clear+0x24>
    6446:	4907      	ldr	r1, [pc, #28]	; (6464 <nrfx_timer_clear+0x30>)
    6448:	4807      	ldr	r0, [pc, #28]	; (6468 <nrfx_timer_clear+0x34>)
    644a:	22b3      	movs	r2, #179	; 0xb3
    644c:	f003 f892 	bl	9574 <printk>
    6450:	4804      	ldr	r0, [pc, #16]	; (6464 <nrfx_timer_clear+0x30>)
    6452:	21b3      	movs	r1, #179	; 0xb3
    6454:	f003 f95a 	bl	970c <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
    6458:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    645a:	2201      	movs	r2, #1
    645c:	60da      	str	r2, [r3, #12]
}
    645e:	bd10      	pop	{r4, pc}
    6460:	200010fc 	.word	0x200010fc
    6464:	0000b5b8 	.word	0x0000b5b8
    6468:	0000a66d 	.word	0x0000a66d

0000646c <nrfx_timer_increment>:

void nrfx_timer_increment(nrfx_timer_t const * p_instance)
{
    646c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    646e:	4a12      	ldr	r2, [pc, #72]	; (64b8 <nrfx_timer_increment+0x4c>)
    6470:	7903      	ldrb	r3, [r0, #4]
    6472:	210c      	movs	r1, #12
    6474:	fb01 2303 	mla	r3, r1, r3, r2
{
    6478:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    647a:	7a1b      	ldrb	r3, [r3, #8]
    647c:	b943      	cbnz	r3, 6490 <nrfx_timer_increment+0x24>
    647e:	490f      	ldr	r1, [pc, #60]	; (64bc <nrfx_timer_increment+0x50>)
    6480:	480f      	ldr	r0, [pc, #60]	; (64c0 <nrfx_timer_increment+0x54>)
    6482:	22b9      	movs	r2, #185	; 0xb9
    6484:	f003 f876 	bl	9574 <printk>
    6488:	480c      	ldr	r0, [pc, #48]	; (64bc <nrfx_timer_increment+0x50>)
    648a:	21b9      	movs	r1, #185	; 0xb9
    648c:	f003 f93e 	bl	970c <assert_post_action>
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
    6490:	6823      	ldr	r3, [r4, #0]
    return (nrf_timer_mode_t)(p_reg->MODE);
    6492:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    6496:	f013 0fff 	tst.w	r3, #255	; 0xff
    649a:	d108      	bne.n	64ae <nrfx_timer_increment+0x42>
    649c:	4907      	ldr	r1, [pc, #28]	; (64bc <nrfx_timer_increment+0x50>)
    649e:	4808      	ldr	r0, [pc, #32]	; (64c0 <nrfx_timer_increment+0x54>)
    64a0:	22ba      	movs	r2, #186	; 0xba
    64a2:	f003 f867 	bl	9574 <printk>
    64a6:	4805      	ldr	r0, [pc, #20]	; (64bc <nrfx_timer_increment+0x50>)
    64a8:	21ba      	movs	r1, #186	; 0xba
    64aa:	f003 f92f 	bl	970c <assert_post_action>

    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_COUNT);
    64ae:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    64b0:	2201      	movs	r2, #1
    64b2:	609a      	str	r2, [r3, #8]
}
    64b4:	bd10      	pop	{r4, pc}
    64b6:	bf00      	nop
    64b8:	200010fc 	.word	0x200010fc
    64bc:	0000b5b8 	.word	0x0000b5b8
    64c0:	0000a66d 	.word	0x0000a66d

000064c4 <nrfx_timer_capture>:

uint32_t nrfx_timer_capture(nrfx_timer_t const *   p_instance,
                            nrf_timer_cc_channel_t cc_channel)
{
    64c4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    64c6:	4a14      	ldr	r2, [pc, #80]	; (6518 <nrfx_timer_capture+0x54>)
    64c8:	7903      	ldrb	r3, [r0, #4]
{
    64ca:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    64cc:	210c      	movs	r1, #12
    64ce:	fb01 2303 	mla	r3, r1, r3, r2
{
    64d2:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    64d4:	7a1b      	ldrb	r3, [r3, #8]
    64d6:	b943      	cbnz	r3, 64ea <nrfx_timer_capture+0x26>
    64d8:	4910      	ldr	r1, [pc, #64]	; (651c <nrfx_timer_capture+0x58>)
    64da:	4811      	ldr	r0, [pc, #68]	; (6520 <nrfx_timer_capture+0x5c>)
    64dc:	22c2      	movs	r2, #194	; 0xc2
    64de:	f003 f849 	bl	9574 <printk>
    64e2:	480e      	ldr	r0, [pc, #56]	; (651c <nrfx_timer_capture+0x58>)
    64e4:	21c2      	movs	r1, #194	; 0xc2
    64e6:	f003 f911 	bl	970c <assert_post_action>
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
    64ea:	796b      	ldrb	r3, [r5, #5]
    64ec:	42a3      	cmp	r3, r4
    64ee:	d808      	bhi.n	6502 <nrfx_timer_capture+0x3e>
    64f0:	490a      	ldr	r1, [pc, #40]	; (651c <nrfx_timer_capture+0x58>)
    64f2:	480b      	ldr	r0, [pc, #44]	; (6520 <nrfx_timer_capture+0x5c>)
    64f4:	22c3      	movs	r2, #195	; 0xc3
    64f6:	f003 f83d 	bl	9574 <printk>
    64fa:	4808      	ldr	r0, [pc, #32]	; (651c <nrfx_timer_capture+0x58>)
    64fc:	21c3      	movs	r1, #195	; 0xc3
    64fe:	f003 f905 	bl	970c <assert_post_action>
    return (uint32_t)p_reg->CC[cc_channel];
}

NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get(uint32_t channel)
{
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
    6502:	00a3      	lsls	r3, r4, #2
    6504:	3340      	adds	r3, #64	; 0x40

    nrf_timer_task_trigger(p_instance->p_reg,
    6506:	682a      	ldr	r2, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6508:	b2db      	uxtb	r3, r3
    650a:	2101      	movs	r1, #1
    650c:	50d1      	str	r1, [r2, r3]
    return (uint32_t)p_reg->CC[cc_channel];
    650e:	f504 74a8 	add.w	r4, r4, #336	; 0x150
    6512:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
}
    6516:	bd38      	pop	{r3, r4, r5, pc}
    6518:	200010fc 	.word	0x200010fc
    651c:	0000b5b8 	.word	0x0000b5b8
    6520:	0000a66d 	.word	0x0000a66d

00006524 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    6524:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6526:	4c11      	ldr	r4, [pc, #68]	; (656c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6528:	4a11      	ldr	r2, [pc, #68]	; (6570 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    652a:	4912      	ldr	r1, [pc, #72]	; (6574 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    652c:	2303      	movs	r3, #3
    652e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6530:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6532:	4b11      	ldr	r3, [pc, #68]	; (6578 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    6534:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6536:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    6538:	f44f 6380 	mov.w	r3, #1024	; 0x400
    653c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    653e:	2300      	movs	r3, #0
    6540:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6542:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6544:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    6546:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    6548:	4a0c      	ldr	r2, [pc, #48]	; (657c <_DoInit+0x58>)
    654a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    654c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    654e:	2210      	movs	r2, #16
    6550:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    6552:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6554:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6556:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    6558:	f003 f941 	bl	97de <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    655c:	4908      	ldr	r1, [pc, #32]	; (6580 <_DoInit+0x5c>)
    655e:	4620      	mov	r0, r4
    6560:	f003 f93d 	bl	97de <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    6564:	2320      	movs	r3, #32
    6566:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    6568:	bd10      	pop	{r4, pc}
    656a:	bf00      	nop
    656c:	20001114 	.word	0x20001114
    6570:	0000b5f5 	.word	0x0000b5f5
    6574:	0000b5fe 	.word	0x0000b5fe
    6578:	20001249 	.word	0x20001249
    657c:	20001239 	.word	0x20001239
    6580:	0000b602 	.word	0x0000b602

00006584 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    6588:	4f23      	ldr	r7, [pc, #140]	; (6618 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    658a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    658e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    6590:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6594:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    6596:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6598:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    659a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    659c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    659e:	d834      	bhi.n	660a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    65a0:	f8d2 a020 	ldr.w	sl, [r2, #32]
    65a4:	ebaa 0905 	sub.w	r9, sl, r5
    65a8:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    65ac:	4294      	cmp	r4, r2
    65ae:	d811      	bhi.n	65d4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    65b0:	f04f 0918 	mov.w	r9, #24
    65b4:	fb06 9309 	mla	r3, r6, r9, r9
    65b8:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    65ba:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    65bc:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    65be:	4641      	mov	r1, r8
    65c0:	4428      	add	r0, r5
    65c2:	f003 f932 	bl	982a <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    65c6:	fb09 7606 	mla	r6, r9, r6, r7
    65ca:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    65cc:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    65ce:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    65d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    65d4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    65d6:	429c      	cmp	r4, r3
    65d8:	d81b      	bhi.n	6612 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    65da:	fb00 bb0b 	mla	fp, r0, fp, fp
    65de:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    65e0:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    65e2:	f8db 0004 	ldr.w	r0, [fp, #4]
    65e6:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    65e8:	4428      	add	r0, r5
    65ea:	f003 f91e 	bl	982a <memcpy>
      if (NumBytes) {
    65ee:	ebb4 040a 	subs.w	r4, r4, sl
    65f2:	d006      	beq.n	6602 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    65f4:	f8db 0004 	ldr.w	r0, [fp, #4]
    65f8:	4622      	mov	r2, r4
    65fa:	eb08 0109 	add.w	r1, r8, r9
    65fe:	f003 f914 	bl	982a <memcpy>
      pRing->WrOff = NumBytes;
    6602:	2018      	movs	r0, #24
    6604:	fb00 7606 	mla	r6, r0, r6, r7
    6608:	e7e0      	b.n	65cc <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    660a:	3b01      	subs	r3, #1
    660c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    660e:	42a3      	cmp	r3, r4
    6610:	d2ce      	bcs.n	65b0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    6612:	2000      	movs	r0, #0
    6614:	e7dc      	b.n	65d0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    6616:	bf00      	nop
    6618:	20001114 	.word	0x20001114

0000661c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    661e:	4c18      	ldr	r4, [pc, #96]	; (6680 <SEGGER_RTT_WriteNoLock+0x64>)
    6620:	2318      	movs	r3, #24
    6622:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    6626:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    662a:	4425      	add	r5, r4
  switch (pRing->Flags) {
    662c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    662e:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6630:	460f      	mov	r7, r1
    6632:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    6634:	d00f      	beq.n	6656 <SEGGER_RTT_WriteNoLock+0x3a>
    6636:	2c02      	cmp	r4, #2
    6638:	d01a      	beq.n	6670 <SEGGER_RTT_WriteNoLock+0x54>
    663a:	b9f4      	cbnz	r4, 667a <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    663c:	4628      	mov	r0, r5
    663e:	f003 fc4f 	bl	9ee0 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    6642:	4286      	cmp	r6, r0
    6644:	d805      	bhi.n	6652 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    6646:	4632      	mov	r2, r6
    6648:	4639      	mov	r1, r7
    664a:	4628      	mov	r0, r5
    664c:	f003 fc56 	bl	9efc <_WriteNoCheck>
    6650:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    6652:	4620      	mov	r0, r4
    6654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    6656:	4628      	mov	r0, r5
    6658:	f003 fc42 	bl	9ee0 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    665c:	4286      	cmp	r6, r0
    665e:	4634      	mov	r4, r6
    6660:	bf28      	it	cs
    6662:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    6664:	4622      	mov	r2, r4
    6666:	4639      	mov	r1, r7
    6668:	4628      	mov	r0, r5
    666a:	f003 fc47 	bl	9efc <_WriteNoCheck>
    break;
    666e:	e7f0      	b.n	6652 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    6670:	4628      	mov	r0, r5
}
    6672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    6676:	f003 bc5d 	b.w	9f34 <_WriteBlocking>
  switch (pRing->Flags) {
    667a:	2400      	movs	r4, #0
  return Status;
    667c:	e7e9      	b.n	6652 <SEGGER_RTT_WriteNoLock+0x36>
    667e:	bf00      	nop
    6680:	20001114 	.word	0x20001114

00006684 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    6684:	4b03      	ldr	r3, [pc, #12]	; (6694 <SEGGER_RTT_HasDataUp+0x10>)
    6686:	2218      	movs	r2, #24
    6688:	fb02 3300 	mla	r3, r2, r0, r3
    668c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    668e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    6690:	1a80      	subs	r0, r0, r2
    6692:	4770      	bx	lr
    6694:	20001114 	.word	0x20001114

00006698 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6698:	4b0e      	ldr	r3, [pc, #56]	; (66d4 <z_sys_init_run_level+0x3c>)
{
    669a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    669c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    66a0:	3001      	adds	r0, #1
    66a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    66a6:	42a6      	cmp	r6, r4
    66a8:	d800      	bhi.n	66ac <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    66aa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    66ac:	e9d4 3500 	ldrd	r3, r5, [r4]
    66b0:	4628      	mov	r0, r5
    66b2:	4798      	blx	r3
		if (dev != NULL) {
    66b4:	b165      	cbz	r5, 66d0 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    66b6:	68eb      	ldr	r3, [r5, #12]
    66b8:	b130      	cbz	r0, 66c8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    66ba:	2800      	cmp	r0, #0
    66bc:	bfb8      	it	lt
    66be:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    66c0:	28ff      	cmp	r0, #255	; 0xff
    66c2:	bfa8      	it	ge
    66c4:	20ff      	movge	r0, #255	; 0xff
    66c6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    66c8:	785a      	ldrb	r2, [r3, #1]
    66ca:	f042 0201 	orr.w	r2, r2, #1
    66ce:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    66d0:	3408      	adds	r4, #8
    66d2:	e7e8      	b.n	66a6 <z_sys_init_run_level+0xe>
    66d4:	0000a578 	.word	0x0000a578

000066d8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    66d8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    66da:	4605      	mov	r5, r0
    66dc:	b910      	cbnz	r0, 66e4 <z_impl_device_get_binding+0xc>
		return NULL;
    66de:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    66e0:	4620      	mov	r0, r4
    66e2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    66e4:	7803      	ldrb	r3, [r0, #0]
    66e6:	2b00      	cmp	r3, #0
    66e8:	d0f9      	beq.n	66de <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    66ea:	4a0f      	ldr	r2, [pc, #60]	; (6728 <z_impl_device_get_binding+0x50>)
    66ec:	4c0f      	ldr	r4, [pc, #60]	; (672c <z_impl_device_get_binding+0x54>)
    66ee:	4616      	mov	r6, r2
    66f0:	4294      	cmp	r4, r2
    66f2:	d108      	bne.n	6706 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    66f4:	4c0d      	ldr	r4, [pc, #52]	; (672c <z_impl_device_get_binding+0x54>)
    66f6:	42b4      	cmp	r4, r6
    66f8:	d0f1      	beq.n	66de <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    66fa:	4620      	mov	r0, r4
    66fc:	f003 fc4b 	bl	9f96 <z_device_ready>
    6700:	b950      	cbnz	r0, 6718 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    6702:	3418      	adds	r4, #24
    6704:	e7f7      	b.n	66f6 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    6706:	4620      	mov	r0, r4
    6708:	f003 fc45 	bl	9f96 <z_device_ready>
    670c:	b110      	cbz	r0, 6714 <z_impl_device_get_binding+0x3c>
    670e:	6823      	ldr	r3, [r4, #0]
    6710:	42ab      	cmp	r3, r5
    6712:	d0e5      	beq.n	66e0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    6714:	3418      	adds	r4, #24
    6716:	e7eb      	b.n	66f0 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    6718:	6821      	ldr	r1, [r4, #0]
    671a:	4628      	mov	r0, r5
    671c:	f003 f879 	bl	9812 <strcmp>
    6720:	2800      	cmp	r0, #0
    6722:	d1ee      	bne.n	6702 <z_impl_device_get_binding+0x2a>
    6724:	e7dc      	b.n	66e0 <z_impl_device_get_binding+0x8>
    6726:	bf00      	nop
    6728:	0000a1bc 	.word	0x0000a1bc
    672c:	0000a15c 	.word	0x0000a15c

00006730 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6730:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6734:	4605      	mov	r5, r0
    6736:	460f      	mov	r7, r1
	__asm__ volatile(
    6738:	f04f 0320 	mov.w	r3, #32
    673c:	f3ef 8811 	mrs	r8, BASEPRI
    6740:	f383 8812 	msr	BASEPRI_MAX, r3
    6744:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6748:	f002 f828 	bl	879c <z_impl_z_current_get>
    674c:	4c24      	ldr	r4, [pc, #144]	; (67e0 <z_fatal_error+0xb0>)
    674e:	4b25      	ldr	r3, [pc, #148]	; (67e4 <z_fatal_error+0xb4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    6750:	4925      	ldr	r1, [pc, #148]	; (67e8 <z_fatal_error+0xb8>)
    6752:	1ae4      	subs	r4, r4, r3
    6754:	2d04      	cmp	r5, #4
    6756:	bf96      	itet	ls
    6758:	4b24      	ldrls	r3, [pc, #144]	; (67ec <z_fatal_error+0xbc>)
    675a:	4b25      	ldrhi	r3, [pc, #148]	; (67f0 <z_fatal_error+0xc0>)
    675c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    6760:	08e4      	lsrs	r4, r4, #3
    6762:	2200      	movs	r2, #0
    6764:	01a4      	lsls	r4, r4, #6
    6766:	4606      	mov	r6, r0
    6768:	9200      	str	r2, [sp, #0]
    676a:	f044 0001 	orr.w	r0, r4, #1
    676e:	462a      	mov	r2, r5
    6770:	f002 ffe1 	bl	9736 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    6774:	b147      	cbz	r7, 6788 <z_fatal_error+0x58>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    6776:	69fb      	ldr	r3, [r7, #28]
    6778:	f3c3 0308 	ubfx	r3, r3, #0, #9
    677c:	b123      	cbz	r3, 6788 <z_fatal_error+0x58>
		LOG_ERR("Fault during interrupt handling\n");
    677e:	491d      	ldr	r1, [pc, #116]	; (67f4 <z_fatal_error+0xc4>)
    6780:	f044 0001 	orr.w	r0, r4, #1
    6784:	f002 ffd7 	bl	9736 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    6788:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    678c:	b12e      	cbz	r6, 679a <z_fatal_error+0x6a>
    678e:	4630      	mov	r0, r6
    6790:	f003 fc30 	bl	9ff4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    6794:	b108      	cbz	r0, 679a <z_fatal_error+0x6a>
    6796:	7803      	ldrb	r3, [r0, #0]
    6798:	b903      	cbnz	r3, 679c <z_fatal_error+0x6c>
		thread_name = "unknown";
    679a:	4817      	ldr	r0, [pc, #92]	; (67f8 <z_fatal_error+0xc8>)
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    679c:	f002 ffde 	bl	975c <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
    67a0:	4916      	ldr	r1, [pc, #88]	; (67fc <z_fatal_error+0xcc>)
    67a2:	4603      	mov	r3, r0
    67a4:	4632      	mov	r2, r6
    67a6:	4620      	mov	r0, r4
    67a8:	f002 ffc5 	bl	9736 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    67ac:	4639      	mov	r1, r7
    67ae:	4628      	mov	r0, r5
    67b0:	f7fe fe7c 	bl	54ac <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    67b4:	2d04      	cmp	r5, #4
    67b6:	d108      	bne.n	67ca <z_fatal_error+0x9a>
    67b8:	4911      	ldr	r1, [pc, #68]	; (6800 <z_fatal_error+0xd0>)
    67ba:	4812      	ldr	r0, [pc, #72]	; (6804 <z_fatal_error+0xd4>)
    67bc:	228f      	movs	r2, #143	; 0x8f
    67be:	f002 fed9 	bl	9574 <printk>
    67c2:	480f      	ldr	r0, [pc, #60]	; (6800 <z_fatal_error+0xd0>)
    67c4:	218f      	movs	r1, #143	; 0x8f
    67c6:	f002 ffa1 	bl	970c <assert_post_action>
	__asm__ volatile(
    67ca:	f388 8811 	msr	BASEPRI, r8
    67ce:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    67d2:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    67d4:	b002      	add	sp, #8
    67d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67da:	f7fc be27 	b.w	342c <z_impl_k_thread_abort>
    67de:	bf00      	nop
    67e0:	0000a374 	.word	0x0000a374
    67e4:	0000a33c 	.word	0x0000a33c
    67e8:	0000b61f 	.word	0x0000b61f
    67ec:	0000a590 	.word	0x0000a590
    67f0:	0000b609 	.word	0x0000b609
    67f4:	0000b647 	.word	0x0000b647
    67f8:	0000b617 	.word	0x0000b617
    67fc:	0000b668 	.word	0x0000b668
    6800:	0000b680 	.word	0x0000b680
    6804:	0000a66d 	.word	0x0000a66d

00006808 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    6808:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    680a:	2300      	movs	r3, #0
{
    680c:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    680e:	2201      	movs	r2, #1
    6810:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6814:	220f      	movs	r2, #15
    6816:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    681a:	4c0d      	ldr	r4, [pc, #52]	; (6850 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    681c:	4a0d      	ldr	r2, [pc, #52]	; (6854 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    681e:	9301      	str	r3, [sp, #4]
    6820:	490d      	ldr	r1, [pc, #52]	; (6858 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6822:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    6824:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6828:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    682c:	f44f 75b0 	mov.w	r5, #352	; 0x160
    6830:	9300      	str	r3, [sp, #0]
    6832:	fb05 1100 	mla	r1, r5, r0, r1
    6836:	4b09      	ldr	r3, [pc, #36]	; (685c <init_idle_thread+0x54>)
    6838:	f44f 72a0 	mov.w	r2, #320	; 0x140
    683c:	4620      	mov	r0, r4
    683e:	f000 f987 	bl	6b50 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6842:	7b63      	ldrb	r3, [r4, #13]
    6844:	f023 0304 	bic.w	r3, r3, #4
    6848:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    684a:	b007      	add	sp, #28
    684c:	bd30      	pop	{r4, r5, pc}
    684e:	bf00      	nop
    6850:	20000788 	.word	0x20000788
    6854:	200011bc 	.word	0x200011bc
    6858:	20002840 	.word	0x20002840
    685c:	00006dd9 	.word	0x00006dd9

00006860 <bg_thread_main>:
{
    6860:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    6862:	4b0a      	ldr	r3, [pc, #40]	; (688c <bg_thread_main+0x2c>)
    6864:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6866:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    6868:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    686a:	f7ff ff15 	bl	6698 <z_sys_init_run_level>
	boot_banner();
    686e:	f002 fc53 	bl	9118 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    6872:	2003      	movs	r0, #3
    6874:	f7ff ff10 	bl	6698 <z_sys_init_run_level>
	z_init_static_threads();
    6878:	f000 fa08 	bl	6c8c <z_init_static_threads>
	main();
    687c:	f7fa fd66 	bl	134c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6880:	4a03      	ldr	r2, [pc, #12]	; (6890 <bg_thread_main+0x30>)
    6882:	7b13      	ldrb	r3, [r2, #12]
    6884:	f023 0301 	bic.w	r3, r3, #1
    6888:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    688a:	bd08      	pop	{r3, pc}
    688c:	20001649 	.word	0x20001649
    6890:	20000808 	.word	0x20000808

00006894 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    6894:	4802      	ldr	r0, [pc, #8]	; (68a0 <z_bss_zero+0xc>)
    6896:	4a03      	ldr	r2, [pc, #12]	; (68a4 <z_bss_zero+0x10>)
    6898:	2100      	movs	r1, #0
    689a:	1a12      	subs	r2, r2, r0
    689c:	f002 bfd0 	b.w	9840 <memset>
    68a0:	20000738 	.word	0x20000738
    68a4:	20001808 	.word	0x20001808

000068a8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    68a8:	b580      	push	{r7, lr}
    68aa:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    68ac:	f7fb fc52 	bl	2154 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    68b0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 6988 <z_cstart+0xe0>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    68b4:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    68b8:	4d2d      	ldr	r5, [pc, #180]	; (6970 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    68ba:	4e2e      	ldr	r6, [pc, #184]	; (6974 <z_cstart+0xcc>)
    68bc:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    68be:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 698c <z_cstart+0xe4>
    68c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68c6:	2400      	movs	r4, #0
    68c8:	616b      	str	r3, [r5, #20]
    68ca:	23e0      	movs	r3, #224	; 0xe0
    68cc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    68d0:	77ec      	strb	r4, [r5, #31]
    68d2:	762c      	strb	r4, [r5, #24]
    68d4:	766c      	strb	r4, [r5, #25]
    68d6:	76ac      	strb	r4, [r5, #26]
    68d8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    68dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    68de:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    68e2:	626b      	str	r3, [r5, #36]	; 0x24
    68e4:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    68e8:	f7fc fd16 	bl	3318 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    68ec:	f7fc f908 	bl	2b00 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    68f0:	f04f 33ff 	mov.w	r3, #4294967295
    68f4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    68f6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    68f8:	f7fc fe78 	bl	35ec <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    68fc:	f7fc fda8 	bl	3450 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    6900:	f240 1301 	movw	r3, #257	; 0x101
    6904:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    6908:	ab06      	add	r3, sp, #24
    690a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    690c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6910:	f003 fb40 	bl	9f94 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6914:	4620      	mov	r0, r4
    6916:	f7ff febf 	bl	6698 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    691a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    691c:	4d16      	ldr	r5, [pc, #88]	; (6978 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    691e:	f7ff febb 	bl	6698 <z_sys_init_run_level>
	z_sched_init();
    6922:	f001 fdeb 	bl	84fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6926:	4b15      	ldr	r3, [pc, #84]	; (697c <z_cstart+0xd4>)
    6928:	9305      	str	r3, [sp, #20]
    692a:	2301      	movs	r3, #1
    692c:	4914      	ldr	r1, [pc, #80]	; (6980 <z_cstart+0xd8>)
    692e:	9400      	str	r4, [sp, #0]
    6930:	e9cd 4303 	strd	r4, r3, [sp, #12]
    6934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    6938:	464b      	mov	r3, r9
    693a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    693e:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    6940:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6942:	f000 f905 	bl	6b50 <z_setup_new_thread>
    6946:	7b6a      	ldrb	r2, [r5, #13]
    6948:	f022 0204 	bic.w	r2, r2, #4
    694c:	736a      	strb	r2, [r5, #13]
    694e:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    6950:	4628      	mov	r0, r5
    6952:	f001 fa91 	bl	7e78 <z_ready_thread>
		init_idle_thread(i);
    6956:	4620      	mov	r0, r4
    6958:	f7ff ff56 	bl	6808 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    695c:	4b09      	ldr	r3, [pc, #36]	; (6984 <z_cstart+0xdc>)
    695e:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    6960:	464a      	mov	r2, r9
    6962:	4639      	mov	r1, r7
    6964:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    6966:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    6968:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    696c:	f7fc fa22 	bl	2db4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6970:	e000ed00 	.word	0xe000ed00
    6974:	200011bc 	.word	0x200011bc
    6978:	20000808 	.word	0x20000808
    697c:	0000aad3 	.word	0x0000aad3
    6980:	20001820 	.word	0x20001820
    6984:	20000788 	.word	0x20000788
    6988:	200031c0 	.word	0x200031c0
    698c:	00006861 	.word	0x00006861

00006990 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    6990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6994:	4d14      	ldr	r5, [pc, #80]	; (69e8 <init_mem_slab_module+0x58>)
    6996:	4c15      	ldr	r4, [pc, #84]	; (69ec <init_mem_slab_module+0x5c>)
    6998:	4e15      	ldr	r6, [pc, #84]	; (69f0 <init_mem_slab_module+0x60>)
    699a:	46a8      	mov	r8, r5
    699c:	42ac      	cmp	r4, r5
    699e:	d908      	bls.n	69b2 <init_mem_slab_module+0x22>
    69a0:	4814      	ldr	r0, [pc, #80]	; (69f4 <init_mem_slab_module+0x64>)
    69a2:	4631      	mov	r1, r6
    69a4:	223c      	movs	r2, #60	; 0x3c
    69a6:	f002 fde5 	bl	9574 <printk>
    69aa:	213c      	movs	r1, #60	; 0x3c
    69ac:	4630      	mov	r0, r6
    69ae:	f002 fead 	bl	970c <assert_post_action>
    69b2:	4544      	cmp	r4, r8
    69b4:	d302      	bcc.n	69bc <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
    69b6:	2000      	movs	r0, #0
	return rc;
}
    69b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    69bc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    69c0:	ea42 0301 	orr.w	r3, r2, r1
    69c4:	f013 0303 	ands.w	r3, r3, #3
    69c8:	d10b      	bne.n	69e2 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
    69ca:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    69cc:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    69ce:	4283      	cmp	r3, r0
    69d0:	d101      	bne.n	69d6 <init_mem_slab_module+0x46>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    69d2:	3420      	adds	r4, #32
    69d4:	e7e2      	b.n	699c <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    69d6:	69a7      	ldr	r7, [r4, #24]
    69d8:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    69da:	3301      	adds	r3, #1
		slab->free_list = p;
    69dc:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    69de:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    69e0:	e7f5      	b.n	69ce <init_mem_slab_module+0x3e>
		return -EINVAL;
    69e2:	f06f 0015 	mvn.w	r0, #21
	return rc;
    69e6:	e7e7      	b.n	69b8 <init_mem_slab_module+0x28>
    69e8:	200006d0 	.word	0x200006d0
    69ec:	20000690 	.word	0x20000690
    69f0:	0000b6ef 	.word	0x0000b6ef
    69f4:	0000a66d 	.word	0x0000a66d

000069f8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    69f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    69fc:	4604      	mov	r4, r0
    69fe:	460d      	mov	r5, r1
    6a00:	4690      	mov	r8, r2
    6a02:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6a04:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    6a08:	f04f 0320 	mov.w	r3, #32
    6a0c:	f3ef 8711 	mrs	r7, BASEPRI
    6a10:	f383 8812 	msr	BASEPRI_MAX, r3
    6a14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a18:	4630      	mov	r0, r6
    6a1a:	f000 f9b7 	bl	6d8c <z_spin_lock_valid>
    6a1e:	b940      	cbnz	r0, 6a32 <k_mem_slab_alloc+0x3a>
    6a20:	491f      	ldr	r1, [pc, #124]	; (6aa0 <k_mem_slab_alloc+0xa8>)
    6a22:	4820      	ldr	r0, [pc, #128]	; (6aa4 <k_mem_slab_alloc+0xac>)
    6a24:	2281      	movs	r2, #129	; 0x81
    6a26:	f002 fda5 	bl	9574 <printk>
    6a2a:	481d      	ldr	r0, [pc, #116]	; (6aa0 <k_mem_slab_alloc+0xa8>)
    6a2c:	2181      	movs	r1, #129	; 0x81
    6a2e:	f002 fe6d 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    6a32:	4630      	mov	r0, r6
    6a34:	f000 f9c8 	bl	6dc8 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    6a38:	69a3      	ldr	r3, [r4, #24]
    6a3a:	b1c3      	cbz	r3, 6a6e <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
    6a3c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    6a3e:	681b      	ldr	r3, [r3, #0]
    6a40:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    6a42:	69e3      	ldr	r3, [r4, #28]
    6a44:	3301      	adds	r3, #1
    6a46:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6a48:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a4a:	4630      	mov	r0, r6
    6a4c:	f000 f9ac 	bl	6da8 <z_spin_unlock_valid>
    6a50:	b940      	cbnz	r0, 6a64 <k_mem_slab_alloc+0x6c>
    6a52:	4913      	ldr	r1, [pc, #76]	; (6aa0 <k_mem_slab_alloc+0xa8>)
    6a54:	4813      	ldr	r0, [pc, #76]	; (6aa4 <k_mem_slab_alloc+0xac>)
    6a56:	22ac      	movs	r2, #172	; 0xac
    6a58:	f002 fd8c 	bl	9574 <printk>
    6a5c:	4810      	ldr	r0, [pc, #64]	; (6aa0 <k_mem_slab_alloc+0xa8>)
    6a5e:	21ac      	movs	r1, #172	; 0xac
    6a60:	f002 fe54 	bl	970c <assert_post_action>
	__asm__ volatile(
    6a64:	f387 8811 	msr	BASEPRI, r7
    6a68:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    6a6c:	e013      	b.n	6a96 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    6a6e:	ea58 0209 	orrs.w	r2, r8, r9
    6a72:	d103      	bne.n	6a7c <k_mem_slab_alloc+0x84>
		*mem = NULL;
    6a74:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    6a76:	f06f 040b 	mvn.w	r4, #11
    6a7a:	e7e6      	b.n	6a4a <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    6a7c:	4622      	mov	r2, r4
    6a7e:	e9cd 8900 	strd	r8, r9, [sp]
    6a82:	4639      	mov	r1, r7
    6a84:	4630      	mov	r0, r6
    6a86:	f001 fb5f 	bl	8148 <z_pend_curr>
		if (result == 0) {
    6a8a:	4604      	mov	r4, r0
    6a8c:	b918      	cbnz	r0, 6a96 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
    6a8e:	4b06      	ldr	r3, [pc, #24]	; (6aa8 <k_mem_slab_alloc+0xb0>)
    6a90:	689b      	ldr	r3, [r3, #8]
    6a92:	695b      	ldr	r3, [r3, #20]
    6a94:	602b      	str	r3, [r5, #0]
}
    6a96:	4620      	mov	r0, r4
    6a98:	b003      	add	sp, #12
    6a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6a9e:	bf00      	nop
    6aa0:	0000ab1d 	.word	0x0000ab1d
    6aa4:	0000a66d 	.word	0x0000a66d
    6aa8:	200011bc 	.word	0x200011bc

00006aac <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ab0:	4604      	mov	r4, r0
    6ab2:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6ab4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    6ab8:	f04f 0320 	mov.w	r3, #32
    6abc:	f3ef 8711 	mrs	r7, BASEPRI
    6ac0:	f383 8812 	msr	BASEPRI_MAX, r3
    6ac4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6ac8:	4630      	mov	r0, r6
    6aca:	f000 f95f 	bl	6d8c <z_spin_lock_valid>
    6ace:	b940      	cbnz	r0, 6ae2 <k_mem_slab_free+0x36>
    6ad0:	491d      	ldr	r1, [pc, #116]	; (6b48 <k_mem_slab_free+0x9c>)
    6ad2:	481e      	ldr	r0, [pc, #120]	; (6b4c <k_mem_slab_free+0xa0>)
    6ad4:	2281      	movs	r2, #129	; 0x81
    6ad6:	f002 fd4d 	bl	9574 <printk>
    6ada:	481b      	ldr	r0, [pc, #108]	; (6b48 <k_mem_slab_free+0x9c>)
    6adc:	2181      	movs	r1, #129	; 0x81
    6ade:	f002 fe15 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    6ae2:	4630      	mov	r0, r6
    6ae4:	f000 f970 	bl	6dc8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6ae8:	f8d4 8018 	ldr.w	r8, [r4, #24]
    6aec:	f1b8 0f00 	cmp.w	r8, #0
    6af0:	d10f      	bne.n	6b12 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6af2:	4620      	mov	r0, r4
    6af4:	f001 fcc4 	bl	8480 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6af8:	b158      	cbz	r0, 6b12 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6afa:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6afc:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    6afe:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6b02:	f001 f9b9 	bl	7e78 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6b06:	4639      	mov	r1, r7
    6b08:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    6b0e:	f000 bfb5 	b.w	7a7c <z_reschedule>
	**(char ***) mem = slab->free_list;
    6b12:	682b      	ldr	r3, [r5, #0]
    6b14:	69a2      	ldr	r2, [r4, #24]
    6b16:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6b18:	682b      	ldr	r3, [r5, #0]
    6b1a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    6b1c:	69e3      	ldr	r3, [r4, #28]
    6b1e:	3b01      	subs	r3, #1
    6b20:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b22:	4630      	mov	r0, r6
    6b24:	f000 f940 	bl	6da8 <z_spin_unlock_valid>
    6b28:	b940      	cbnz	r0, 6b3c <k_mem_slab_free+0x90>
    6b2a:	4907      	ldr	r1, [pc, #28]	; (6b48 <k_mem_slab_free+0x9c>)
    6b2c:	4807      	ldr	r0, [pc, #28]	; (6b4c <k_mem_slab_free+0xa0>)
    6b2e:	22ac      	movs	r2, #172	; 0xac
    6b30:	f002 fd20 	bl	9574 <printk>
    6b34:	4804      	ldr	r0, [pc, #16]	; (6b48 <k_mem_slab_free+0x9c>)
    6b36:	21ac      	movs	r1, #172	; 0xac
    6b38:	f002 fde8 	bl	970c <assert_post_action>
	__asm__ volatile(
    6b3c:	f387 8811 	msr	BASEPRI, r7
    6b40:	f3bf 8f6f 	isb	sy
}
    6b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b48:	0000ab1d 	.word	0x0000ab1d
    6b4c:	0000a66d 	.word	0x0000a66d

00006b50 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6b54:	b085      	sub	sp, #20
    6b56:	4604      	mov	r4, r0
    6b58:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    6b5c:	f1b8 0f0f 	cmp.w	r8, #15
{
    6b60:	460f      	mov	r7, r1
    6b62:	4615      	mov	r5, r2
    6b64:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    6b66:	d132      	bne.n	6bce <z_setup_new_thread+0x7e>
    6b68:	4b21      	ldr	r3, [pc, #132]	; (6bf0 <z_setup_new_thread+0xa0>)
    6b6a:	4599      	cmp	r9, r3
    6b6c:	d133      	bne.n	6bd6 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    6b6e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    6b72:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6b76:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6b78:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6b7a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    6b7c:	2304      	movs	r3, #4
    6b7e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6b80:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6b84:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6b88:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6b8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    6b8e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6b92:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6b94:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6b98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6b9a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    6b9c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ba0:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    6ba2:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6ba4:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    6ba6:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    6baa:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    6bac:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    6bae:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6bb0:	4642      	mov	r2, r8
    6bb2:	4639      	mov	r1, r7
    6bb4:	4620      	mov	r0, r4
    6bb6:	f7fc f8c7 	bl	2d48 <arch_new_thread>
	if (!_current) {
    6bba:	4b0e      	ldr	r3, [pc, #56]	; (6bf4 <z_setup_new_thread+0xa4>)
	new_thread->init_data = NULL;
    6bbc:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    6bbe:	689b      	ldr	r3, [r3, #8]
    6bc0:	b103      	cbz	r3, 6bc4 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    6bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    6bc4:	6723      	str	r3, [r4, #112]	; 0x70
}
    6bc6:	4640      	mov	r0, r8
    6bc8:	b005      	add	sp, #20
    6bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6bce:	f108 0310 	add.w	r3, r8, #16
    6bd2:	2b1e      	cmp	r3, #30
    6bd4:	d9cb      	bls.n	6b6e <z_setup_new_thread+0x1e>
    6bd6:	4908      	ldr	r1, [pc, #32]	; (6bf8 <z_setup_new_thread+0xa8>)
    6bd8:	4808      	ldr	r0, [pc, #32]	; (6bfc <z_setup_new_thread+0xac>)
    6bda:	f240 12ff 	movw	r2, #511	; 0x1ff
    6bde:	f002 fcc9 	bl	9574 <printk>
    6be2:	4805      	ldr	r0, [pc, #20]	; (6bf8 <z_setup_new_thread+0xa8>)
    6be4:	f240 11ff 	movw	r1, #511	; 0x1ff
    6be8:	f002 fd90 	bl	970c <assert_post_action>
    6bec:	e7bf      	b.n	6b6e <z_setup_new_thread+0x1e>
    6bee:	bf00      	nop
    6bf0:	00006dd9 	.word	0x00006dd9
    6bf4:	200011bc 	.word	0x200011bc
    6bf8:	0000b714 	.word	0x0000b714
    6bfc:	0000a66d 	.word	0x0000a66d

00006c00 <z_impl_k_thread_create>:
{
    6c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6c04:	b087      	sub	sp, #28
    6c06:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    6c0a:	4604      	mov	r4, r0
    6c0c:	460d      	mov	r5, r1
    6c0e:	4690      	mov	r8, r2
    6c10:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6c12:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    6c16:	b153      	cbz	r3, 6c2e <z_impl_k_thread_create+0x2e>
    6c18:	4919      	ldr	r1, [pc, #100]	; (6c80 <z_impl_k_thread_create+0x80>)
    6c1a:	481a      	ldr	r0, [pc, #104]	; (6c84 <z_impl_k_thread_create+0x84>)
    6c1c:	f44f 721a 	mov.w	r2, #616	; 0x268
    6c20:	f002 fca8 	bl	9574 <printk>
    6c24:	4816      	ldr	r0, [pc, #88]	; (6c80 <z_impl_k_thread_create+0x80>)
    6c26:	f44f 711a 	mov.w	r1, #616	; 0x268
    6c2a:	f002 fd6f 	bl	970c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6c2e:	2300      	movs	r3, #0
    6c30:	9305      	str	r3, [sp, #20]
    6c32:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6c34:	9304      	str	r3, [sp, #16]
    6c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6c38:	9303      	str	r3, [sp, #12]
    6c3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6c3c:	9302      	str	r3, [sp, #8]
    6c3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6c40:	9301      	str	r3, [sp, #4]
    6c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6c44:	9300      	str	r3, [sp, #0]
    6c46:	4642      	mov	r2, r8
    6c48:	464b      	mov	r3, r9
    6c4a:	4629      	mov	r1, r5
    6c4c:	4620      	mov	r0, r4
    6c4e:	f7ff ff7f 	bl	6b50 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6c52:	1c7b      	adds	r3, r7, #1
    6c54:	bf08      	it	eq
    6c56:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    6c5a:	d005      	beq.n	6c68 <z_impl_k_thread_create+0x68>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6c5c:	ea56 0307 	orrs.w	r3, r6, r7
    6c60:	d106      	bne.n	6c70 <z_impl_k_thread_create+0x70>
	z_sched_start(thread);
    6c62:	4620      	mov	r0, r4
    6c64:	f001 f93e 	bl	7ee4 <z_sched_start>
}
    6c68:	4620      	mov	r0, r4
    6c6a:	b007      	add	sp, #28
    6c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6c70:	4905      	ldr	r1, [pc, #20]	; (6c88 <z_impl_k_thread_create+0x88>)
    6c72:	4632      	mov	r2, r6
    6c74:	463b      	mov	r3, r7
    6c76:	f104 0018 	add.w	r0, r4, #24
    6c7a:	f001 fefb 	bl	8a74 <z_add_timeout>
    6c7e:	e7f3      	b.n	6c68 <z_impl_k_thread_create+0x68>
    6c80:	0000b714 	.word	0x0000b714
    6c84:	0000a66d 	.word	0x0000a66d
    6c88:	00007f69 	.word	0x00007f69

00006c8c <z_init_static_threads>:
{
    6c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    6c90:	4f39      	ldr	r7, [pc, #228]	; (6d78 <z_init_static_threads+0xec>)
    6c92:	4d3a      	ldr	r5, [pc, #232]	; (6d7c <z_init_static_threads+0xf0>)
    6c94:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 6d84 <z_init_static_threads+0xf8>
{
    6c98:	b086      	sub	sp, #24
    6c9a:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    6c9c:	42bd      	cmp	r5, r7
    6c9e:	d90a      	bls.n	6cb6 <z_init_static_threads+0x2a>
    6ca0:	4837      	ldr	r0, [pc, #220]	; (6d80 <z_init_static_threads+0xf4>)
    6ca2:	4641      	mov	r1, r8
    6ca4:	f240 22cf 	movw	r2, #719	; 0x2cf
    6ca8:	f002 fc64 	bl	9574 <printk>
    6cac:	f240 21cf 	movw	r1, #719	; 0x2cf
    6cb0:	4640      	mov	r0, r8
    6cb2:	f002 fd2b 	bl	970c <assert_post_action>
    6cb6:	42b5      	cmp	r5, r6
    6cb8:	f105 0430 	add.w	r4, r5, #48	; 0x30
    6cbc:	d31d      	bcc.n	6cfa <z_init_static_threads+0x6e>
	k_sched_lock();
    6cbe:	f000 ff13 	bl	7ae8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    6cc2:	4c2e      	ldr	r4, [pc, #184]	; (6d7c <z_init_static_threads+0xf0>)
    6cc4:	4d2f      	ldr	r5, [pc, #188]	; (6d84 <z_init_static_threads+0xf8>)
    6cc6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 6d80 <z_init_static_threads+0xf4>
    6cca:	f240 38e7 	movw	r8, #999	; 0x3e7
    6cce:	f04f 0900 	mov.w	r9, #0
    6cd2:	42b4      	cmp	r4, r6
    6cd4:	d90a      	bls.n	6cec <z_init_static_threads+0x60>
    6cd6:	4629      	mov	r1, r5
    6cd8:	4650      	mov	r0, sl
    6cda:	f240 22ee 	movw	r2, #750	; 0x2ee
    6cde:	f002 fc49 	bl	9574 <printk>
    6ce2:	f240 21ee 	movw	r1, #750	; 0x2ee
    6ce6:	4628      	mov	r0, r5
    6ce8:	f002 fd10 	bl	970c <assert_post_action>
    6cec:	42b4      	cmp	r4, r6
    6cee:	d321      	bcc.n	6d34 <z_init_static_threads+0xa8>
}
    6cf0:	b006      	add	sp, #24
    6cf2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    6cf6:	f001 bb2d 	b.w	8354 <k_sched_unlock>
		z_setup_new_thread(
    6cfa:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6cfe:	9305      	str	r3, [sp, #20]
    6d00:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6d04:	9304      	str	r3, [sp, #16]
    6d06:	f854 3c14 	ldr.w	r3, [r4, #-20]
    6d0a:	9303      	str	r3, [sp, #12]
    6d0c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    6d10:	9302      	str	r3, [sp, #8]
    6d12:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    6d16:	9301      	str	r3, [sp, #4]
    6d18:	f854 3c20 	ldr.w	r3, [r4, #-32]
    6d1c:	9300      	str	r3, [sp, #0]
    6d1e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    6d22:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    6d26:	f7ff ff13 	bl	6b50 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6d2a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    6d2e:	655d      	str	r5, [r3, #84]	; 0x54
    6d30:	4625      	mov	r5, r4
    6d32:	e7b3      	b.n	6c9c <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6d36:	1c5a      	adds	r2, r3, #1
    6d38:	d00f      	beq.n	6d5a <z_init_static_threads+0xce>
					    K_MSEC(thread_data->init_delay));
    6d3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6d3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6d42:	4640      	mov	r0, r8
    6d44:	4649      	mov	r1, r9
    6d46:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6d4a:	4549      	cmp	r1, r9
    6d4c:	bf08      	it	eq
    6d4e:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
    6d50:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6d52:	d104      	bne.n	6d5e <z_init_static_threads+0xd2>
	z_sched_start(thread);
    6d54:	4638      	mov	r0, r7
    6d56:	f001 f8c5 	bl	7ee4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6d5a:	3430      	adds	r4, #48	; 0x30
    6d5c:	e7b9      	b.n	6cd2 <z_init_static_threads+0x46>
    6d5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6d62:	2300      	movs	r3, #0
    6d64:	f7f9 f9cc 	bl	100 <__aeabi_uldivmod>
    6d68:	4602      	mov	r2, r0
    6d6a:	460b      	mov	r3, r1
    6d6c:	f107 0018 	add.w	r0, r7, #24
    6d70:	4905      	ldr	r1, [pc, #20]	; (6d88 <z_init_static_threads+0xfc>)
    6d72:	f001 fe7f 	bl	8a74 <z_add_timeout>
    6d76:	e7f0      	b.n	6d5a <z_init_static_threads+0xce>
    6d78:	2000061c 	.word	0x2000061c
    6d7c:	2000061c 	.word	0x2000061c
    6d80:	0000a66d 	.word	0x0000a66d
    6d84:	0000b714 	.word	0x0000b714
    6d88:	00007f69 	.word	0x00007f69

00006d8c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    6d8c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    6d8e:	b138      	cbz	r0, 6da0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    6d90:	4b04      	ldr	r3, [pc, #16]	; (6da4 <z_spin_lock_valid+0x18>)
    6d92:	7d1b      	ldrb	r3, [r3, #20]
    6d94:	f000 0003 	and.w	r0, r0, #3
    6d98:	1ac0      	subs	r0, r0, r3
    6d9a:	bf18      	it	ne
    6d9c:	2001      	movne	r0, #1
    6d9e:	4770      	bx	lr
			return false;
		}
	}
	return true;
    6da0:	2001      	movs	r0, #1
}
    6da2:	4770      	bx	lr
    6da4:	200011bc 	.word	0x200011bc

00006da8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6da8:	4906      	ldr	r1, [pc, #24]	; (6dc4 <z_spin_unlock_valid+0x1c>)
{
    6daa:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6dac:	688a      	ldr	r2, [r1, #8]
    6dae:	7d08      	ldrb	r0, [r1, #20]
    6db0:	6819      	ldr	r1, [r3, #0]
    6db2:	4302      	orrs	r2, r0
    6db4:	4291      	cmp	r1, r2
    6db6:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    6dba:	bf04      	itt	eq
    6dbc:	6018      	streq	r0, [r3, #0]
	return true;
    6dbe:	2001      	moveq	r0, #1
}
    6dc0:	4770      	bx	lr
    6dc2:	bf00      	nop
    6dc4:	200011bc 	.word	0x200011bc

00006dc8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    6dc8:	4a02      	ldr	r2, [pc, #8]	; (6dd4 <z_spin_lock_set_owner+0xc>)
    6dca:	7d11      	ldrb	r1, [r2, #20]
    6dcc:	6893      	ldr	r3, [r2, #8]
    6dce:	430b      	orrs	r3, r1
    6dd0:	6003      	str	r3, [r0, #0]
}
    6dd2:	4770      	bx	lr
    6dd4:	200011bc 	.word	0x200011bc

00006dd8 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    6dd8:	4c10      	ldr	r4, [pc, #64]	; (6e1c <idle+0x44>)
    6dda:	68a2      	ldr	r2, [r4, #8]
    6ddc:	f992 200e 	ldrsb.w	r2, [r2, #14]
    6de0:	2a00      	cmp	r2, #0
{
    6de2:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    6de4:	da08      	bge.n	6df8 <idle+0x20>
    6de6:	490e      	ldr	r1, [pc, #56]	; (6e20 <idle+0x48>)
    6de8:	480e      	ldr	r0, [pc, #56]	; (6e24 <idle+0x4c>)
    6dea:	2227      	movs	r2, #39	; 0x27
    6dec:	f002 fbc2 	bl	9574 <printk>
    6df0:	480b      	ldr	r0, [pc, #44]	; (6e20 <idle+0x48>)
    6df2:	2127      	movs	r1, #39	; 0x27
    6df4:	f002 fc8a 	bl	970c <assert_post_action>
	__asm__ volatile(
    6df8:	f04f 0220 	mov.w	r2, #32
    6dfc:	f3ef 8311 	mrs	r3, BASEPRI
    6e00:	f382 8812 	msr	BASEPRI_MAX, r2
    6e04:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    6e08:	f001 ff2a 	bl	8c60 <z_get_next_timeout_expiry>
    6e0c:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    6e0e:	f7fb fd2d 	bl	286c <pm_system_suspend>
    6e12:	2800      	cmp	r0, #0
    6e14:	d1f0      	bne.n	6df8 <idle+0x20>
	arch_cpu_idle();
    6e16:	f7fb fe79 	bl	2b0c <arch_cpu_idle>
}
    6e1a:	e7ed      	b.n	6df8 <idle+0x20>
    6e1c:	200011bc 	.word	0x200011bc
    6e20:	0000b737 	.word	0x0000b737
    6e24:	0000a66d 	.word	0x0000a66d

00006e28 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    6e28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6e2c:	4604      	mov	r4, r0
    6e2e:	4616      	mov	r6, r2
    6e30:	461f      	mov	r7, r3
    6e32:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6e36:	b143      	cbz	r3, 6e4a <z_impl_k_mutex_lock+0x22>
    6e38:	4962      	ldr	r1, [pc, #392]	; (6fc4 <z_impl_k_mutex_lock+0x19c>)
    6e3a:	4863      	ldr	r0, [pc, #396]	; (6fc8 <z_impl_k_mutex_lock+0x1a0>)
    6e3c:	2265      	movs	r2, #101	; 0x65
    6e3e:	f002 fb99 	bl	9574 <printk>
    6e42:	4860      	ldr	r0, [pc, #384]	; (6fc4 <z_impl_k_mutex_lock+0x19c>)
    6e44:	2165      	movs	r1, #101	; 0x65
    6e46:	f002 fc61 	bl	970c <assert_post_action>
    6e4a:	f04f 0320 	mov.w	r3, #32
    6e4e:	f3ef 8811 	mrs	r8, BASEPRI
    6e52:	f383 8812 	msr	BASEPRI_MAX, r3
    6e56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e5a:	485c      	ldr	r0, [pc, #368]	; (6fcc <z_impl_k_mutex_lock+0x1a4>)
    6e5c:	f7ff ff96 	bl	6d8c <z_spin_lock_valid>
    6e60:	b940      	cbnz	r0, 6e74 <z_impl_k_mutex_lock+0x4c>
    6e62:	495b      	ldr	r1, [pc, #364]	; (6fd0 <z_impl_k_mutex_lock+0x1a8>)
    6e64:	4858      	ldr	r0, [pc, #352]	; (6fc8 <z_impl_k_mutex_lock+0x1a0>)
    6e66:	2281      	movs	r2, #129	; 0x81
    6e68:	f002 fb84 	bl	9574 <printk>
    6e6c:	4858      	ldr	r0, [pc, #352]	; (6fd0 <z_impl_k_mutex_lock+0x1a8>)
    6e6e:	2181      	movs	r1, #129	; 0x81
    6e70:	f002 fc4c 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    6e74:	4855      	ldr	r0, [pc, #340]	; (6fcc <z_impl_k_mutex_lock+0x1a4>)
    6e76:	f7ff ffa7 	bl	6dc8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6e7a:	68e3      	ldr	r3, [r4, #12]
    6e7c:	4a55      	ldr	r2, [pc, #340]	; (6fd4 <z_impl_k_mutex_lock+0x1ac>)
    6e7e:	b1d3      	cbz	r3, 6eb6 <z_impl_k_mutex_lock+0x8e>
    6e80:	68a0      	ldr	r0, [r4, #8]
    6e82:	6891      	ldr	r1, [r2, #8]
    6e84:	4288      	cmp	r0, r1
    6e86:	d033      	beq.n	6ef0 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6e88:	ea56 0307 	orrs.w	r3, r6, r7
    6e8c:	d132      	bne.n	6ef4 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e8e:	484f      	ldr	r0, [pc, #316]	; (6fcc <z_impl_k_mutex_lock+0x1a4>)
    6e90:	f7ff ff8a 	bl	6da8 <z_spin_unlock_valid>
    6e94:	b940      	cbnz	r0, 6ea8 <z_impl_k_mutex_lock+0x80>
    6e96:	494e      	ldr	r1, [pc, #312]	; (6fd0 <z_impl_k_mutex_lock+0x1a8>)
    6e98:	484b      	ldr	r0, [pc, #300]	; (6fc8 <z_impl_k_mutex_lock+0x1a0>)
    6e9a:	22ac      	movs	r2, #172	; 0xac
    6e9c:	f002 fb6a 	bl	9574 <printk>
    6ea0:	484b      	ldr	r0, [pc, #300]	; (6fd0 <z_impl_k_mutex_lock+0x1a8>)
    6ea2:	21ac      	movs	r1, #172	; 0xac
    6ea4:	f002 fc32 	bl	970c <assert_post_action>
	__asm__ volatile(
    6ea8:	f388 8811 	msr	BASEPRI, r8
    6eac:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    6eb0:	f06f 000f 	mvn.w	r0, #15
    6eb4:	e019      	b.n	6eea <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
    6eb6:	6891      	ldr	r1, [r2, #8]
    6eb8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6ebc:	4843      	ldr	r0, [pc, #268]	; (6fcc <z_impl_k_mutex_lock+0x1a4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    6ebe:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    6ec0:	3301      	adds	r3, #1
    6ec2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    6ec4:	6893      	ldr	r3, [r2, #8]
    6ec6:	60a3      	str	r3, [r4, #8]
    6ec8:	f7ff ff6e 	bl	6da8 <z_spin_unlock_valid>
    6ecc:	b940      	cbnz	r0, 6ee0 <z_impl_k_mutex_lock+0xb8>
    6ece:	4940      	ldr	r1, [pc, #256]	; (6fd0 <z_impl_k_mutex_lock+0x1a8>)
    6ed0:	483d      	ldr	r0, [pc, #244]	; (6fc8 <z_impl_k_mutex_lock+0x1a0>)
    6ed2:	22ac      	movs	r2, #172	; 0xac
    6ed4:	f002 fb4e 	bl	9574 <printk>
    6ed8:	483d      	ldr	r0, [pc, #244]	; (6fd0 <z_impl_k_mutex_lock+0x1a8>)
    6eda:	21ac      	movs	r1, #172	; 0xac
    6edc:	f002 fc16 	bl	970c <assert_post_action>
    6ee0:	f388 8811 	msr	BASEPRI, r8
    6ee4:	f3bf 8f6f 	isb	sy
		return 0;
    6ee8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    6eea:	b002      	add	sp, #8
    6eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    6ef0:	6921      	ldr	r1, [r4, #16]
    6ef2:	e7e3      	b.n	6ebc <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6ef4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6ef8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    6efc:	4299      	cmp	r1, r3
    6efe:	bfa8      	it	ge
    6f00:	4619      	movge	r1, r3
    6f02:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    6f06:	4291      	cmp	r1, r2
    6f08:	bfb8      	it	lt
    6f0a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6f0c:	428b      	cmp	r3, r1
    6f0e:	dd3f      	ble.n	6f90 <z_impl_k_mutex_lock+0x168>
		return z_set_prio(mutex->owner, new_prio);
    6f10:	f001 f940 	bl	8194 <z_set_prio>
    6f14:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6f16:	e9cd 6700 	strd	r6, r7, [sp]
    6f1a:	482c      	ldr	r0, [pc, #176]	; (6fcc <z_impl_k_mutex_lock+0x1a4>)
    6f1c:	4622      	mov	r2, r4
    6f1e:	4641      	mov	r1, r8
    6f20:	f001 f912 	bl	8148 <z_pend_curr>
	if (got_mutex == 0) {
    6f24:	2800      	cmp	r0, #0
    6f26:	d0e0      	beq.n	6eea <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
    6f28:	f04f 0320 	mov.w	r3, #32
    6f2c:	f3ef 8611 	mrs	r6, BASEPRI
    6f30:	f383 8812 	msr	BASEPRI_MAX, r3
    6f34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f38:	4824      	ldr	r0, [pc, #144]	; (6fcc <z_impl_k_mutex_lock+0x1a4>)
    6f3a:	f7ff ff27 	bl	6d8c <z_spin_lock_valid>
    6f3e:	b940      	cbnz	r0, 6f52 <z_impl_k_mutex_lock+0x12a>
    6f40:	4923      	ldr	r1, [pc, #140]	; (6fd0 <z_impl_k_mutex_lock+0x1a8>)
    6f42:	4821      	ldr	r0, [pc, #132]	; (6fc8 <z_impl_k_mutex_lock+0x1a0>)
    6f44:	2281      	movs	r2, #129	; 0x81
    6f46:	f002 fb15 	bl	9574 <printk>
    6f4a:	4821      	ldr	r0, [pc, #132]	; (6fd0 <z_impl_k_mutex_lock+0x1a8>)
    6f4c:	2181      	movs	r1, #129	; 0x81
    6f4e:	f002 fbdd 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    6f52:	481e      	ldr	r0, [pc, #120]	; (6fcc <z_impl_k_mutex_lock+0x1a4>)
    6f54:	f7ff ff38 	bl	6dc8 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6f58:	6823      	ldr	r3, [r4, #0]
    6f5a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f5c:	429c      	cmp	r4, r3
    6f5e:	d00a      	beq.n	6f76 <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6f60:	b14b      	cbz	r3, 6f76 <z_impl_k_mutex_lock+0x14e>
    6f62:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6f66:	4299      	cmp	r1, r3
    6f68:	bfa8      	it	ge
    6f6a:	4619      	movge	r1, r3
    6f6c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    6f70:	4299      	cmp	r1, r3
    6f72:	bfb8      	it	lt
    6f74:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6f76:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    6f78:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6f7c:	4299      	cmp	r1, r3
    6f7e:	d109      	bne.n	6f94 <z_impl_k_mutex_lock+0x16c>
	if (resched) {
    6f80:	b16d      	cbz	r5, 6f9e <z_impl_k_mutex_lock+0x176>
		z_reschedule(&lock, key);
    6f82:	4812      	ldr	r0, [pc, #72]	; (6fcc <z_impl_k_mutex_lock+0x1a4>)
    6f84:	4631      	mov	r1, r6
    6f86:	f000 fd79 	bl	7a7c <z_reschedule>
	return -EAGAIN;
    6f8a:	f06f 000a 	mvn.w	r0, #10
    6f8e:	e7ac      	b.n	6eea <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
    6f90:	2500      	movs	r5, #0
    6f92:	e7c0      	b.n	6f16 <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
    6f94:	f001 f8fe 	bl	8194 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6f98:	2800      	cmp	r0, #0
    6f9a:	d1f2      	bne.n	6f82 <z_impl_k_mutex_lock+0x15a>
    6f9c:	e7f0      	b.n	6f80 <z_impl_k_mutex_lock+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f9e:	480b      	ldr	r0, [pc, #44]	; (6fcc <z_impl_k_mutex_lock+0x1a4>)
    6fa0:	f7ff ff02 	bl	6da8 <z_spin_unlock_valid>
    6fa4:	b940      	cbnz	r0, 6fb8 <z_impl_k_mutex_lock+0x190>
    6fa6:	490a      	ldr	r1, [pc, #40]	; (6fd0 <z_impl_k_mutex_lock+0x1a8>)
    6fa8:	4807      	ldr	r0, [pc, #28]	; (6fc8 <z_impl_k_mutex_lock+0x1a0>)
    6faa:	22ac      	movs	r2, #172	; 0xac
    6fac:	f002 fae2 	bl	9574 <printk>
    6fb0:	4807      	ldr	r0, [pc, #28]	; (6fd0 <z_impl_k_mutex_lock+0x1a8>)
    6fb2:	21ac      	movs	r1, #172	; 0xac
    6fb4:	f002 fbaa 	bl	970c <assert_post_action>
	__asm__ volatile(
    6fb8:	f386 8811 	msr	BASEPRI, r6
    6fbc:	f3bf 8f6f 	isb	sy
    6fc0:	e7e3      	b.n	6f8a <z_impl_k_mutex_lock+0x162>
    6fc2:	bf00      	nop
    6fc4:	0000b758 	.word	0x0000b758
    6fc8:	0000a66d 	.word	0x0000a66d
    6fcc:	200011e4 	.word	0x200011e4
    6fd0:	0000ab1d 	.word	0x0000ab1d
    6fd4:	200011bc 	.word	0x200011bc

00006fd8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    6fd8:	b538      	push	{r3, r4, r5, lr}
    6fda:	4604      	mov	r4, r0
    6fdc:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6fe0:	b143      	cbz	r3, 6ff4 <z_impl_k_mutex_unlock+0x1c>
    6fe2:	4945      	ldr	r1, [pc, #276]	; (70f8 <z_impl_k_mutex_unlock+0x120>)
    6fe4:	4845      	ldr	r0, [pc, #276]	; (70fc <z_impl_k_mutex_unlock+0x124>)
    6fe6:	22c7      	movs	r2, #199	; 0xc7
    6fe8:	f002 fac4 	bl	9574 <printk>
    6fec:	4842      	ldr	r0, [pc, #264]	; (70f8 <z_impl_k_mutex_unlock+0x120>)
    6fee:	21c7      	movs	r1, #199	; 0xc7
    6ff0:	f002 fb8c 	bl	970c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6ff4:	68a3      	ldr	r3, [r4, #8]
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d078      	beq.n	70ec <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6ffa:	4d41      	ldr	r5, [pc, #260]	; (7100 <z_impl_k_mutex_unlock+0x128>)
    6ffc:	68aa      	ldr	r2, [r5, #8]
    6ffe:	4293      	cmp	r3, r2
    7000:	d177      	bne.n	70f2 <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7002:	68e3      	ldr	r3, [r4, #12]
    7004:	b943      	cbnz	r3, 7018 <z_impl_k_mutex_unlock+0x40>
    7006:	493c      	ldr	r1, [pc, #240]	; (70f8 <z_impl_k_mutex_unlock+0x120>)
    7008:	483c      	ldr	r0, [pc, #240]	; (70fc <z_impl_k_mutex_unlock+0x124>)
    700a:	22df      	movs	r2, #223	; 0xdf
    700c:	f002 fab2 	bl	9574 <printk>
    7010:	4839      	ldr	r0, [pc, #228]	; (70f8 <z_impl_k_mutex_unlock+0x120>)
    7012:	21df      	movs	r1, #223	; 0xdf
    7014:	f002 fb7a 	bl	970c <assert_post_action>
    7018:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    701c:	b143      	cbz	r3, 7030 <z_impl_k_mutex_unlock+0x58>
    701e:	4939      	ldr	r1, [pc, #228]	; (7104 <z_impl_k_mutex_unlock+0x12c>)
    7020:	4836      	ldr	r0, [pc, #216]	; (70fc <z_impl_k_mutex_unlock+0x124>)
    7022:	22fd      	movs	r2, #253	; 0xfd
    7024:	f002 faa6 	bl	9574 <printk>
    7028:	4836      	ldr	r0, [pc, #216]	; (7104 <z_impl_k_mutex_unlock+0x12c>)
    702a:	21fd      	movs	r1, #253	; 0xfd
    702c:	f002 fb6e 	bl	970c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7030:	68ab      	ldr	r3, [r5, #8]
    7032:	7bdb      	ldrb	r3, [r3, #15]
    7034:	2b01      	cmp	r3, #1
    7036:	d108      	bne.n	704a <z_impl_k_mutex_unlock+0x72>
    7038:	4932      	ldr	r1, [pc, #200]	; (7104 <z_impl_k_mutex_unlock+0x12c>)
    703a:	4830      	ldr	r0, [pc, #192]	; (70fc <z_impl_k_mutex_unlock+0x124>)
    703c:	22fe      	movs	r2, #254	; 0xfe
    703e:	f002 fa99 	bl	9574 <printk>
    7042:	4830      	ldr	r0, [pc, #192]	; (7104 <z_impl_k_mutex_unlock+0x12c>)
    7044:	21fe      	movs	r1, #254	; 0xfe
    7046:	f002 fb61 	bl	970c <assert_post_action>

	--_current->base.sched_locked;
    704a:	68aa      	ldr	r2, [r5, #8]
    704c:	7bd3      	ldrb	r3, [r2, #15]
    704e:	3b01      	subs	r3, #1
    7050:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7052:	68e3      	ldr	r3, [r4, #12]
    7054:	2b01      	cmp	r3, #1
    7056:	d905      	bls.n	7064 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
    7058:	3b01      	subs	r3, #1
    705a:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    705c:	f001 f97a 	bl	8354 <k_sched_unlock>

	return 0;
    7060:	2000      	movs	r0, #0
}
    7062:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7064:	f04f 0320 	mov.w	r3, #32
    7068:	f3ef 8511 	mrs	r5, BASEPRI
    706c:	f383 8812 	msr	BASEPRI_MAX, r3
    7070:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7074:	4824      	ldr	r0, [pc, #144]	; (7108 <z_impl_k_mutex_unlock+0x130>)
    7076:	f7ff fe89 	bl	6d8c <z_spin_lock_valid>
    707a:	b940      	cbnz	r0, 708e <z_impl_k_mutex_unlock+0xb6>
    707c:	4923      	ldr	r1, [pc, #140]	; (710c <z_impl_k_mutex_unlock+0x134>)
    707e:	481f      	ldr	r0, [pc, #124]	; (70fc <z_impl_k_mutex_unlock+0x124>)
    7080:	2281      	movs	r2, #129	; 0x81
    7082:	f002 fa77 	bl	9574 <printk>
    7086:	4821      	ldr	r0, [pc, #132]	; (710c <z_impl_k_mutex_unlock+0x134>)
    7088:	2181      	movs	r1, #129	; 0x81
    708a:	f002 fb3f 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    708e:	481e      	ldr	r0, [pc, #120]	; (7108 <z_impl_k_mutex_unlock+0x130>)
    7090:	f7ff fe9a 	bl	6dc8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7094:	68a0      	ldr	r0, [r4, #8]
    7096:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    7098:	f990 300e 	ldrsb.w	r3, [r0, #14]
    709c:	4299      	cmp	r1, r3
    709e:	d001      	beq.n	70a4 <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
    70a0:	f001 f878 	bl	8194 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    70a4:	4620      	mov	r0, r4
    70a6:	f001 f9eb 	bl	8480 <z_unpend_first_thread>
	mutex->owner = new_owner;
    70aa:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    70ac:	b158      	cbz	r0, 70c6 <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
    70ae:	f990 200e 	ldrsb.w	r2, [r0, #14]
    70b2:	6122      	str	r2, [r4, #16]
    70b4:	2200      	movs	r2, #0
    70b6:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    70b8:	f000 fede 	bl	7e78 <z_ready_thread>
		z_reschedule(&lock, key);
    70bc:	4812      	ldr	r0, [pc, #72]	; (7108 <z_impl_k_mutex_unlock+0x130>)
    70be:	4629      	mov	r1, r5
    70c0:	f000 fcdc 	bl	7a7c <z_reschedule>
    70c4:	e7ca      	b.n	705c <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
    70c6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    70c8:	480f      	ldr	r0, [pc, #60]	; (7108 <z_impl_k_mutex_unlock+0x130>)
    70ca:	f7ff fe6d 	bl	6da8 <z_spin_unlock_valid>
    70ce:	b940      	cbnz	r0, 70e2 <z_impl_k_mutex_unlock+0x10a>
    70d0:	490e      	ldr	r1, [pc, #56]	; (710c <z_impl_k_mutex_unlock+0x134>)
    70d2:	480a      	ldr	r0, [pc, #40]	; (70fc <z_impl_k_mutex_unlock+0x124>)
    70d4:	22ac      	movs	r2, #172	; 0xac
    70d6:	f002 fa4d 	bl	9574 <printk>
    70da:	480c      	ldr	r0, [pc, #48]	; (710c <z_impl_k_mutex_unlock+0x134>)
    70dc:	21ac      	movs	r1, #172	; 0xac
    70de:	f002 fb15 	bl	970c <assert_post_action>
	__asm__ volatile(
    70e2:	f385 8811 	msr	BASEPRI, r5
    70e6:	f3bf 8f6f 	isb	sy
    70ea:	e7b7      	b.n	705c <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
    70ec:	f06f 0015 	mvn.w	r0, #21
    70f0:	e7b7      	b.n	7062 <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
    70f2:	f04f 30ff 	mov.w	r0, #4294967295
    70f6:	e7b4      	b.n	7062 <z_impl_k_mutex_unlock+0x8a>
    70f8:	0000b758 	.word	0x0000b758
    70fc:	0000a66d 	.word	0x0000a66d
    7100:	200011bc 	.word	0x200011bc
    7104:	0000b77a 	.word	0x0000b77a
    7108:	200011e4 	.word	0x200011e4
    710c:	0000ab1d 	.word	0x0000ab1d

00007110 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7110:	b538      	push	{r3, r4, r5, lr}
    7112:	4604      	mov	r4, r0
	__asm__ volatile(
    7114:	f04f 0320 	mov.w	r3, #32
    7118:	f3ef 8511 	mrs	r5, BASEPRI
    711c:	f383 8812 	msr	BASEPRI_MAX, r3
    7120:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7124:	4812      	ldr	r0, [pc, #72]	; (7170 <z_impl_k_sem_give+0x60>)
    7126:	f7ff fe31 	bl	6d8c <z_spin_lock_valid>
    712a:	b940      	cbnz	r0, 713e <z_impl_k_sem_give+0x2e>
    712c:	4911      	ldr	r1, [pc, #68]	; (7174 <z_impl_k_sem_give+0x64>)
    712e:	4812      	ldr	r0, [pc, #72]	; (7178 <z_impl_k_sem_give+0x68>)
    7130:	2281      	movs	r2, #129	; 0x81
    7132:	f002 fa1f 	bl	9574 <printk>
    7136:	480f      	ldr	r0, [pc, #60]	; (7174 <z_impl_k_sem_give+0x64>)
    7138:	2181      	movs	r1, #129	; 0x81
    713a:	f002 fae7 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    713e:	480c      	ldr	r0, [pc, #48]	; (7170 <z_impl_k_sem_give+0x60>)
    7140:	f7ff fe42 	bl	6dc8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7144:	4620      	mov	r0, r4
    7146:	f001 f99b 	bl	8480 <z_unpend_first_thread>

	if (thread != NULL) {
    714a:	b148      	cbz	r0, 7160 <z_impl_k_sem_give+0x50>
    714c:	2200      	movs	r2, #0
    714e:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7150:	f000 fe92 	bl	7e78 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7154:	4629      	mov	r1, r5
    7156:	4806      	ldr	r0, [pc, #24]	; (7170 <z_impl_k_sem_give+0x60>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    715c:	f000 bc8e 	b.w	7a7c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7160:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7164:	429a      	cmp	r2, r3
    7166:	bf18      	it	ne
    7168:	3301      	addne	r3, #1
    716a:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    716c:	e7f2      	b.n	7154 <z_impl_k_sem_give+0x44>
    716e:	bf00      	nop
    7170:	200011e8 	.word	0x200011e8
    7174:	0000ab1d 	.word	0x0000ab1d
    7178:	0000a66d 	.word	0x0000a66d

0000717c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    717c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    717e:	4604      	mov	r4, r0
    7180:	4616      	mov	r6, r2
    7182:	461f      	mov	r7, r3
    7184:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7188:	b15b      	cbz	r3, 71a2 <z_impl_k_sem_take+0x26>
    718a:	ea56 0307 	orrs.w	r3, r6, r7
    718e:	d008      	beq.n	71a2 <z_impl_k_sem_take+0x26>
    7190:	492b      	ldr	r1, [pc, #172]	; (7240 <z_impl_k_sem_take+0xc4>)
    7192:	482c      	ldr	r0, [pc, #176]	; (7244 <z_impl_k_sem_take+0xc8>)
    7194:	2279      	movs	r2, #121	; 0x79
    7196:	f002 f9ed 	bl	9574 <printk>
    719a:	4829      	ldr	r0, [pc, #164]	; (7240 <z_impl_k_sem_take+0xc4>)
    719c:	2179      	movs	r1, #121	; 0x79
    719e:	f002 fab5 	bl	970c <assert_post_action>
    71a2:	f04f 0320 	mov.w	r3, #32
    71a6:	f3ef 8511 	mrs	r5, BASEPRI
    71aa:	f383 8812 	msr	BASEPRI_MAX, r3
    71ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    71b2:	4825      	ldr	r0, [pc, #148]	; (7248 <z_impl_k_sem_take+0xcc>)
    71b4:	f7ff fdea 	bl	6d8c <z_spin_lock_valid>
    71b8:	b940      	cbnz	r0, 71cc <z_impl_k_sem_take+0x50>
    71ba:	4924      	ldr	r1, [pc, #144]	; (724c <z_impl_k_sem_take+0xd0>)
    71bc:	4821      	ldr	r0, [pc, #132]	; (7244 <z_impl_k_sem_take+0xc8>)
    71be:	2281      	movs	r2, #129	; 0x81
    71c0:	f002 f9d8 	bl	9574 <printk>
    71c4:	4821      	ldr	r0, [pc, #132]	; (724c <z_impl_k_sem_take+0xd0>)
    71c6:	2181      	movs	r1, #129	; 0x81
    71c8:	f002 faa0 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    71cc:	481e      	ldr	r0, [pc, #120]	; (7248 <z_impl_k_sem_take+0xcc>)
    71ce:	f7ff fdfb 	bl	6dc8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    71d2:	68a3      	ldr	r3, [r4, #8]
    71d4:	b1ab      	cbz	r3, 7202 <z_impl_k_sem_take+0x86>
		sem->count--;
    71d6:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71d8:	481b      	ldr	r0, [pc, #108]	; (7248 <z_impl_k_sem_take+0xcc>)
    71da:	60a3      	str	r3, [r4, #8]
    71dc:	f7ff fde4 	bl	6da8 <z_spin_unlock_valid>
    71e0:	b940      	cbnz	r0, 71f4 <z_impl_k_sem_take+0x78>
    71e2:	491a      	ldr	r1, [pc, #104]	; (724c <z_impl_k_sem_take+0xd0>)
    71e4:	4817      	ldr	r0, [pc, #92]	; (7244 <z_impl_k_sem_take+0xc8>)
    71e6:	22ac      	movs	r2, #172	; 0xac
    71e8:	f002 f9c4 	bl	9574 <printk>
    71ec:	4817      	ldr	r0, [pc, #92]	; (724c <z_impl_k_sem_take+0xd0>)
    71ee:	21ac      	movs	r1, #172	; 0xac
    71f0:	f002 fa8c 	bl	970c <assert_post_action>
	__asm__ volatile(
    71f4:	f385 8811 	msr	BASEPRI, r5
    71f8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    71fc:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    71fe:	b003      	add	sp, #12
    7200:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7202:	ea56 0307 	orrs.w	r3, r6, r7
    7206:	d113      	bne.n	7230 <z_impl_k_sem_take+0xb4>
    7208:	480f      	ldr	r0, [pc, #60]	; (7248 <z_impl_k_sem_take+0xcc>)
    720a:	f7ff fdcd 	bl	6da8 <z_spin_unlock_valid>
    720e:	b940      	cbnz	r0, 7222 <z_impl_k_sem_take+0xa6>
    7210:	490e      	ldr	r1, [pc, #56]	; (724c <z_impl_k_sem_take+0xd0>)
    7212:	480c      	ldr	r0, [pc, #48]	; (7244 <z_impl_k_sem_take+0xc8>)
    7214:	22ac      	movs	r2, #172	; 0xac
    7216:	f002 f9ad 	bl	9574 <printk>
    721a:	480c      	ldr	r0, [pc, #48]	; (724c <z_impl_k_sem_take+0xd0>)
    721c:	21ac      	movs	r1, #172	; 0xac
    721e:	f002 fa75 	bl	970c <assert_post_action>
    7222:	f385 8811 	msr	BASEPRI, r5
    7226:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    722a:	f06f 000f 	mvn.w	r0, #15
    722e:	e7e6      	b.n	71fe <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7230:	e9cd 6700 	strd	r6, r7, [sp]
    7234:	4622      	mov	r2, r4
    7236:	4629      	mov	r1, r5
    7238:	4803      	ldr	r0, [pc, #12]	; (7248 <z_impl_k_sem_take+0xcc>)
    723a:	f000 ff85 	bl	8148 <z_pend_curr>
	return ret;
    723e:	e7de      	b.n	71fe <z_impl_k_sem_take+0x82>
    7240:	0000b7a5 	.word	0x0000b7a5
    7244:	0000a66d 	.word	0x0000a66d
    7248:	200011e8 	.word	0x200011e8
    724c:	0000ab1d 	.word	0x0000ab1d

00007250 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    7250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7254:	4e73      	ldr	r6, [pc, #460]	; (7424 <work_queue_main+0x1d4>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7256:	4f74      	ldr	r7, [pc, #464]	; (7428 <work_queue_main+0x1d8>)
{
    7258:	b085      	sub	sp, #20
    725a:	4604      	mov	r4, r0
	__asm__ volatile(
    725c:	f04f 0320 	mov.w	r3, #32
    7260:	f3ef 8811 	mrs	r8, BASEPRI
    7264:	f383 8812 	msr	BASEPRI_MAX, r3
    7268:	f3bf 8f6f 	isb	sy
    726c:	4630      	mov	r0, r6
    726e:	f7ff fd8d 	bl	6d8c <z_spin_lock_valid>
    7272:	b940      	cbnz	r0, 7286 <work_queue_main+0x36>
    7274:	496d      	ldr	r1, [pc, #436]	; (742c <work_queue_main+0x1dc>)
    7276:	486e      	ldr	r0, [pc, #440]	; (7430 <work_queue_main+0x1e0>)
    7278:	2281      	movs	r2, #129	; 0x81
    727a:	f002 f97b 	bl	9574 <printk>
    727e:	486b      	ldr	r0, [pc, #428]	; (742c <work_queue_main+0x1dc>)
    7280:	2181      	movs	r1, #129	; 0x81
    7282:	f002 fa43 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    7286:	4630      	mov	r0, r6
    7288:	f7ff fd9e 	bl	6dc8 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
    728c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    7290:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    7294:	b9ad      	cbnz	r5, 72c2 <work_queue_main+0x72>
	*flagp &= ~BIT(bit);
    7296:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    729a:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
    729c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    72a0:	f100 8082 	bmi.w	73a8 <work_queue_main+0x158>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    72a4:	2300      	movs	r3, #0
    72a6:	9302      	str	r3, [sp, #8]
    72a8:	f04f 32ff 	mov.w	r2, #4294967295
    72ac:	f04f 33ff 	mov.w	r3, #4294967295
    72b0:	e9cd 2300 	strd	r2, r3, [sp]
    72b4:	4641      	mov	r1, r8
    72b6:	f104 0288 	add.w	r2, r4, #136	; 0x88
    72ba:	4630      	mov	r0, r6
    72bc:	f001 fb5e 	bl	897c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    72c0:	e7cc      	b.n	725c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    72c2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    72c6:	682a      	ldr	r2, [r5, #0]
	list->head = node;
    72c8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    72cc:	428d      	cmp	r5, r1
    72ce:	d101      	bne.n	72d4 <work_queue_main+0x84>
	list->tail = node;
    72d0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    72d4:	f043 0302 	orr.w	r3, r3, #2
    72d8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    72dc:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
    72de:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
    72e2:	f023 0304 	bic.w	r3, r3, #4
    72e6:	f043 0301 	orr.w	r3, r3, #1
    72ea:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    72ec:	4630      	mov	r0, r6
    72ee:	f7ff fd5b 	bl	6da8 <z_spin_unlock_valid>
    72f2:	b940      	cbnz	r0, 7306 <work_queue_main+0xb6>
    72f4:	494d      	ldr	r1, [pc, #308]	; (742c <work_queue_main+0x1dc>)
    72f6:	484e      	ldr	r0, [pc, #312]	; (7430 <work_queue_main+0x1e0>)
    72f8:	22ac      	movs	r2, #172	; 0xac
    72fa:	f002 f93b 	bl	9574 <printk>
    72fe:	484b      	ldr	r0, [pc, #300]	; (742c <work_queue_main+0x1dc>)
    7300:	21ac      	movs	r1, #172	; 0xac
    7302:	f002 fa03 	bl	970c <assert_post_action>
	__asm__ volatile(
    7306:	f388 8811 	msr	BASEPRI, r8
    730a:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    730e:	f1b9 0f00 	cmp.w	r9, #0
    7312:	d10a      	bne.n	732a <work_queue_main+0xda>
    7314:	4947      	ldr	r1, [pc, #284]	; (7434 <work_queue_main+0x1e4>)
    7316:	4846      	ldr	r0, [pc, #280]	; (7430 <work_queue_main+0x1e0>)
    7318:	f44f 7222 	mov.w	r2, #648	; 0x288
    731c:	f002 f92a 	bl	9574 <printk>
    7320:	4844      	ldr	r0, [pc, #272]	; (7434 <work_queue_main+0x1e4>)
    7322:	f44f 7122 	mov.w	r1, #648	; 0x288
    7326:	f002 f9f1 	bl	970c <assert_post_action>
		handler(work);
    732a:	4628      	mov	r0, r5
    732c:	47c8      	blx	r9
	__asm__ volatile(
    732e:	f04f 0320 	mov.w	r3, #32
    7332:	f3ef 8a11 	mrs	sl, BASEPRI
    7336:	f383 8812 	msr	BASEPRI_MAX, r3
    733a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    733e:	4630      	mov	r0, r6
    7340:	f7ff fd24 	bl	6d8c <z_spin_lock_valid>
    7344:	b940      	cbnz	r0, 7358 <work_queue_main+0x108>
    7346:	4939      	ldr	r1, [pc, #228]	; (742c <work_queue_main+0x1dc>)
    7348:	4839      	ldr	r0, [pc, #228]	; (7430 <work_queue_main+0x1e0>)
    734a:	2281      	movs	r2, #129	; 0x81
    734c:	f002 f912 	bl	9574 <printk>
    7350:	4836      	ldr	r0, [pc, #216]	; (742c <work_queue_main+0x1dc>)
    7352:	2181      	movs	r1, #129	; 0x81
    7354:	f002 f9da 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    7358:	4630      	mov	r0, r6
    735a:	f7ff fd35 	bl	6dc8 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    735e:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7360:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    7362:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7366:	d429      	bmi.n	73bc <work_queue_main+0x16c>
	*flagp &= ~BIT(bit);
    7368:	60ea      	str	r2, [r5, #12]
    736a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    736e:	f023 0302 	bic.w	r3, r3, #2
    7372:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7376:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
    7378:	f3c3 2500 	ubfx	r5, r3, #8, #1
    737c:	f7ff fd14 	bl	6da8 <z_spin_unlock_valid>
    7380:	b940      	cbnz	r0, 7394 <work_queue_main+0x144>
    7382:	492a      	ldr	r1, [pc, #168]	; (742c <work_queue_main+0x1dc>)
    7384:	482a      	ldr	r0, [pc, #168]	; (7430 <work_queue_main+0x1e0>)
    7386:	22ac      	movs	r2, #172	; 0xac
    7388:	f002 f8f4 	bl	9574 <printk>
    738c:	4827      	ldr	r0, [pc, #156]	; (742c <work_queue_main+0x1dc>)
    738e:	21ac      	movs	r1, #172	; 0xac
    7390:	f002 f9bc 	bl	970c <assert_post_action>
	__asm__ volatile(
    7394:	f38a 8811 	msr	BASEPRI, sl
    7398:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    739c:	2d00      	cmp	r5, #0
    739e:	f47f af5d 	bne.w	725c <work_queue_main+0xc>
	z_impl_k_yield();
    73a2:	f001 f8b7 	bl	8514 <z_impl_k_yield>
}
    73a6:	e759      	b.n	725c <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    73a8:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    73ac:	2200      	movs	r2, #0
    73ae:	2101      	movs	r1, #1
    73b0:	4628      	mov	r0, r5
    73b2:	f001 fa9d 	bl	88f0 <z_sched_wake>
    73b6:	2800      	cmp	r0, #0
    73b8:	d1f8      	bne.n	73ac <work_queue_main+0x15c>
    73ba:	e773      	b.n	72a4 <work_queue_main+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    73bc:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    73be:	f023 0303 	bic.w	r3, r3, #3
    73c2:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    73c4:	2800      	cmp	r0, #0
    73c6:	d0d0      	beq.n	736a <work_queue_main+0x11a>
	return node->next;
    73c8:	6803      	ldr	r3, [r0, #0]
    73ca:	2b00      	cmp	r3, #0
    73cc:	bf38      	it	cc
    73ce:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    73d0:	f04f 0900 	mov.w	r9, #0
    73d4:	4698      	mov	r8, r3
	parent->next = child;
    73d6:	46cb      	mov	fp, r9
		if (wc->work == work) {
    73d8:	6843      	ldr	r3, [r0, #4]
    73da:	429d      	cmp	r5, r3
    73dc:	4602      	mov	r2, r0
    73de:	d10d      	bne.n	73fc <work_queue_main+0x1ac>
Z_GENLIST_REMOVE(slist, snode)
    73e0:	6802      	ldr	r2, [r0, #0]
    73e2:	f1b9 0f00 	cmp.w	r9, #0
    73e6:	d115      	bne.n	7414 <work_queue_main+0x1c4>
    73e8:	687b      	ldr	r3, [r7, #4]
	list->head = node;
    73ea:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    73ec:	4283      	cmp	r3, r0
    73ee:	d100      	bne.n	73f2 <work_queue_main+0x1a2>
	list->tail = node;
    73f0:	607a      	str	r2, [r7, #4]
	parent->next = child;
    73f2:	f840 bb08 	str.w	fp, [r0], #8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    73f6:	f7ff fe8b 	bl	7110 <z_impl_k_sem_give>
}
    73fa:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    73fc:	f1b8 0f00 	cmp.w	r8, #0
    7400:	d0b3      	beq.n	736a <work_queue_main+0x11a>
	return node->next;
    7402:	f8d8 3000 	ldr.w	r3, [r8]
    7406:	2b00      	cmp	r3, #0
    7408:	bf38      	it	cc
    740a:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    740c:	4640      	mov	r0, r8
    740e:	4691      	mov	r9, r2
    7410:	4698      	mov	r8, r3
    7412:	e7e1      	b.n	73d8 <work_queue_main+0x188>
	parent->next = child;
    7414:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
    7418:	687b      	ldr	r3, [r7, #4]
    741a:	4283      	cmp	r3, r0
	list->tail = node;
    741c:	bf08      	it	eq
    741e:	f8c7 9004 	streq.w	r9, [r7, #4]
}
    7422:	e7e6      	b.n	73f2 <work_queue_main+0x1a2>
    7424:	200011ec 	.word	0x200011ec
    7428:	200011f0 	.word	0x200011f0
    742c:	0000ab1d 	.word	0x0000ab1d
    7430:	0000a66d 	.word	0x0000a66d
    7434:	0000b7c5 	.word	0x0000b7c5

00007438 <submit_to_queue_locked>:
{
    7438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    743a:	68c3      	ldr	r3, [r0, #12]
    743c:	079a      	lsls	r2, r3, #30
{
    743e:	4604      	mov	r4, r0
    7440:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7442:	f3c3 0540 	ubfx	r5, r3, #1, #1
    7446:	d42a      	bmi.n	749e <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    7448:	075f      	lsls	r7, r3, #29
    744a:	d42a      	bmi.n	74a2 <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
    744c:	680a      	ldr	r2, [r1, #0]
    744e:	b90a      	cbnz	r2, 7454 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    7450:	6882      	ldr	r2, [r0, #8]
    7452:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    7454:	07d8      	lsls	r0, r3, #31
    7456:	d527      	bpl.n	74a8 <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
    7458:	68a3      	ldr	r3, [r4, #8]
    745a:	b953      	cbnz	r3, 7472 <submit_to_queue_locked+0x3a>
    745c:	4923      	ldr	r1, [pc, #140]	; (74ec <submit_to_queue_locked+0xb4>)
    745e:	4824      	ldr	r0, [pc, #144]	; (74f0 <submit_to_queue_locked+0xb8>)
    7460:	f44f 72a7 	mov.w	r2, #334	; 0x14e
    7464:	f002 f886 	bl	9574 <printk>
    7468:	4820      	ldr	r0, [pc, #128]	; (74ec <submit_to_queue_locked+0xb4>)
    746a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    746e:	f002 f94d 	bl	970c <assert_post_action>
			*queuep = work->queue;
    7472:	68a3      	ldr	r3, [r4, #8]
    7474:	6033      	str	r3, [r6, #0]
			ret = 2;
    7476:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
    7478:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
    747a:	b38f      	cbz	r7, 74e0 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    747c:	4b1d      	ldr	r3, [pc, #116]	; (74f4 <submit_to_queue_locked+0xbc>)
    747e:	689b      	ldr	r3, [r3, #8]
    7480:	42bb      	cmp	r3, r7
    7482:	d113      	bne.n	74ac <submit_to_queue_locked+0x74>
    7484:	f002 fdad 	bl	9fe2 <k_is_in_isr>
    7488:	f080 0001 	eor.w	r0, r0, #1
    748c:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    748e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7492:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    7494:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7498:	d525      	bpl.n	74e6 <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
    749a:	b14a      	cbz	r2, 74b0 <submit_to_queue_locked+0x78>
    749c:	b950      	cbnz	r0, 74b4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    749e:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    74a2:	2300      	movs	r3, #0
    74a4:	6033      	str	r3, [r6, #0]
	return ret;
    74a6:	e015      	b.n	74d4 <submit_to_queue_locked+0x9c>
		ret = 1;
    74a8:	2501      	movs	r5, #1
    74aa:	e7e5      	b.n	7478 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    74ac:	2000      	movs	r0, #0
    74ae:	e7ee      	b.n	748e <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
    74b0:	071b      	lsls	r3, r3, #28
    74b2:	d4f4      	bmi.n	749e <submit_to_queue_locked+0x66>
	parent->next = child;
    74b4:	2300      	movs	r3, #0
    74b6:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    74b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    74bc:	b963      	cbnz	r3, 74d8 <submit_to_queue_locked+0xa0>
	list->head = node;
    74be:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    74c2:	4638      	mov	r0, r7
    74c4:	f002 fda8 	bl	a018 <notify_queue_locked>
	*flagp |= BIT(bit);
    74c8:	68e3      	ldr	r3, [r4, #12]
    74ca:	f043 0304 	orr.w	r3, r3, #4
    74ce:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    74d0:	6833      	ldr	r3, [r6, #0]
    74d2:	60a3      	str	r3, [r4, #8]
}
    74d4:	4628      	mov	r0, r5
    74d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    74d8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    74da:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    74de:	e7f0      	b.n	74c2 <submit_to_queue_locked+0x8a>
		return -EINVAL;
    74e0:	f06f 0515 	mvn.w	r5, #21
    74e4:	e7dd      	b.n	74a2 <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
    74e6:	f06f 0512 	mvn.w	r5, #18
    74ea:	e7da      	b.n	74a2 <submit_to_queue_locked+0x6a>
    74ec:	0000b7c5 	.word	0x0000b7c5
    74f0:	0000a66d 	.word	0x0000a66d
    74f4:	200011bc 	.word	0x200011bc

000074f8 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
    74f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    74fa:	4604      	mov	r4, r0
	__asm__ volatile(
    74fc:	f04f 0320 	mov.w	r3, #32
    7500:	f3ef 8511 	mrs	r5, BASEPRI
    7504:	f383 8812 	msr	BASEPRI_MAX, r3
    7508:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    750c:	4819      	ldr	r0, [pc, #100]	; (7574 <work_timeout+0x7c>)
    750e:	f7ff fc3d 	bl	6d8c <z_spin_lock_valid>
    7512:	b940      	cbnz	r0, 7526 <work_timeout+0x2e>
    7514:	4918      	ldr	r1, [pc, #96]	; (7578 <work_timeout+0x80>)
    7516:	4819      	ldr	r0, [pc, #100]	; (757c <work_timeout+0x84>)
    7518:	2281      	movs	r2, #129	; 0x81
    751a:	f002 f82b 	bl	9574 <printk>
    751e:	4816      	ldr	r0, [pc, #88]	; (7578 <work_timeout+0x80>)
    7520:	2181      	movs	r1, #129	; 0x81
    7522:	f002 f8f3 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    7526:	4813      	ldr	r0, [pc, #76]	; (7574 <work_timeout+0x7c>)
    7528:	f7ff fc4e 	bl	6dc8 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
    752c:	2300      	movs	r3, #0
    752e:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
    7530:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
    7534:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    7538:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
    753a:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    753e:	d506      	bpl.n	754e <work_timeout+0x56>
		queue = dw->queue;
    7540:	69a3      	ldr	r3, [r4, #24]
    7542:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    7544:	a901      	add	r1, sp, #4
    7546:	f1a4 0010 	sub.w	r0, r4, #16
    754a:	f7ff ff75 	bl	7438 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    754e:	4809      	ldr	r0, [pc, #36]	; (7574 <work_timeout+0x7c>)
    7550:	f7ff fc2a 	bl	6da8 <z_spin_unlock_valid>
    7554:	b940      	cbnz	r0, 7568 <work_timeout+0x70>
    7556:	4908      	ldr	r1, [pc, #32]	; (7578 <work_timeout+0x80>)
    7558:	4808      	ldr	r0, [pc, #32]	; (757c <work_timeout+0x84>)
    755a:	22ac      	movs	r2, #172	; 0xac
    755c:	f002 f80a 	bl	9574 <printk>
    7560:	4805      	ldr	r0, [pc, #20]	; (7578 <work_timeout+0x80>)
    7562:	21ac      	movs	r1, #172	; 0xac
    7564:	f002 f8d2 	bl	970c <assert_post_action>
	__asm__ volatile(
    7568:	f385 8811 	msr	BASEPRI, r5
    756c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
    7570:	b003      	add	sp, #12
    7572:	bd30      	pop	{r4, r5, pc}
    7574:	200011ec 	.word	0x200011ec
    7578:	0000ab1d 	.word	0x0000ab1d
    757c:	0000a66d 	.word	0x0000a66d

00007580 <k_work_init>:
{
    7580:	b538      	push	{r3, r4, r5, lr}
    7582:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
    7584:	4604      	mov	r4, r0
    7586:	b940      	cbnz	r0, 759a <k_work_init+0x1a>
    7588:	490c      	ldr	r1, [pc, #48]	; (75bc <k_work_init+0x3c>)
    758a:	480d      	ldr	r0, [pc, #52]	; (75c0 <k_work_init+0x40>)
    758c:	2289      	movs	r2, #137	; 0x89
    758e:	f001 fff1 	bl	9574 <printk>
    7592:	480a      	ldr	r0, [pc, #40]	; (75bc <k_work_init+0x3c>)
    7594:	2189      	movs	r1, #137	; 0x89
    7596:	f002 f8b9 	bl	970c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
    759a:	b945      	cbnz	r5, 75ae <k_work_init+0x2e>
    759c:	4907      	ldr	r1, [pc, #28]	; (75bc <k_work_init+0x3c>)
    759e:	4808      	ldr	r0, [pc, #32]	; (75c0 <k_work_init+0x40>)
    75a0:	228a      	movs	r2, #138	; 0x8a
    75a2:	f001 ffe7 	bl	9574 <printk>
    75a6:	4805      	ldr	r0, [pc, #20]	; (75bc <k_work_init+0x3c>)
    75a8:	218a      	movs	r1, #138	; 0x8a
    75aa:	f002 f8af 	bl	970c <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    75ae:	2210      	movs	r2, #16
    75b0:	2100      	movs	r1, #0
    75b2:	4620      	mov	r0, r4
    75b4:	f002 f944 	bl	9840 <memset>
    75b8:	6065      	str	r5, [r4, #4]
}
    75ba:	bd38      	pop	{r3, r4, r5, pc}
    75bc:	0000b7c5 	.word	0x0000b7c5
    75c0:	0000a66d 	.word	0x0000a66d

000075c4 <k_work_submit_to_queue>:
{
    75c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    75c6:	460c      	mov	r4, r1
{
    75c8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    75ca:	b951      	cbnz	r1, 75e2 <k_work_submit_to_queue+0x1e>
    75cc:	4921      	ldr	r1, [pc, #132]	; (7654 <k_work_submit_to_queue+0x90>)
    75ce:	4822      	ldr	r0, [pc, #136]	; (7658 <k_work_submit_to_queue+0x94>)
    75d0:	f240 1269 	movw	r2, #361	; 0x169
    75d4:	f001 ffce 	bl	9574 <printk>
    75d8:	481e      	ldr	r0, [pc, #120]	; (7654 <k_work_submit_to_queue+0x90>)
    75da:	f240 1169 	movw	r1, #361	; 0x169
    75de:	f002 f895 	bl	970c <assert_post_action>
	__asm__ volatile(
    75e2:	f04f 0320 	mov.w	r3, #32
    75e6:	f3ef 8511 	mrs	r5, BASEPRI
    75ea:	f383 8812 	msr	BASEPRI_MAX, r3
    75ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75f2:	481a      	ldr	r0, [pc, #104]	; (765c <k_work_submit_to_queue+0x98>)
    75f4:	f7ff fbca 	bl	6d8c <z_spin_lock_valid>
    75f8:	b940      	cbnz	r0, 760c <k_work_submit_to_queue+0x48>
    75fa:	4919      	ldr	r1, [pc, #100]	; (7660 <k_work_submit_to_queue+0x9c>)
    75fc:	4816      	ldr	r0, [pc, #88]	; (7658 <k_work_submit_to_queue+0x94>)
    75fe:	2281      	movs	r2, #129	; 0x81
    7600:	f001 ffb8 	bl	9574 <printk>
    7604:	4816      	ldr	r0, [pc, #88]	; (7660 <k_work_submit_to_queue+0x9c>)
    7606:	2181      	movs	r1, #129	; 0x81
    7608:	f002 f880 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    760c:	4813      	ldr	r0, [pc, #76]	; (765c <k_work_submit_to_queue+0x98>)
    760e:	f7ff fbdb 	bl	6dc8 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    7612:	4620      	mov	r0, r4
    7614:	a901      	add	r1, sp, #4
    7616:	f7ff ff0f 	bl	7438 <submit_to_queue_locked>
    761a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    761c:	480f      	ldr	r0, [pc, #60]	; (765c <k_work_submit_to_queue+0x98>)
    761e:	f7ff fbc3 	bl	6da8 <z_spin_unlock_valid>
    7622:	b940      	cbnz	r0, 7636 <k_work_submit_to_queue+0x72>
    7624:	490e      	ldr	r1, [pc, #56]	; (7660 <k_work_submit_to_queue+0x9c>)
    7626:	480c      	ldr	r0, [pc, #48]	; (7658 <k_work_submit_to_queue+0x94>)
    7628:	22ac      	movs	r2, #172	; 0xac
    762a:	f001 ffa3 	bl	9574 <printk>
    762e:	480c      	ldr	r0, [pc, #48]	; (7660 <k_work_submit_to_queue+0x9c>)
    7630:	21ac      	movs	r1, #172	; 0xac
    7632:	f002 f86b 	bl	970c <assert_post_action>
	__asm__ volatile(
    7636:	f385 8811 	msr	BASEPRI, r5
    763a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    763e:	2c00      	cmp	r4, #0
    7640:	dd04      	ble.n	764c <k_work_submit_to_queue+0x88>
	return z_impl_k_is_preempt_thread();
    7642:	f001 f8b1 	bl	87a8 <z_impl_k_is_preempt_thread>
    7646:	b108      	cbz	r0, 764c <k_work_submit_to_queue+0x88>
	z_impl_k_yield();
    7648:	f000 ff64 	bl	8514 <z_impl_k_yield>
}
    764c:	4620      	mov	r0, r4
    764e:	b003      	add	sp, #12
    7650:	bd30      	pop	{r4, r5, pc}
    7652:	bf00      	nop
    7654:	0000b7c5 	.word	0x0000b7c5
    7658:	0000a66d 	.word	0x0000a66d
    765c:	200011ec 	.word	0x200011ec
    7660:	0000ab1d 	.word	0x0000ab1d

00007664 <k_work_submit>:
{
    7664:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    7666:	4801      	ldr	r0, [pc, #4]	; (766c <k_work_submit+0x8>)
    7668:	f7ff bfac 	b.w	75c4 <k_work_submit_to_queue>
    766c:	20000890 	.word	0x20000890

00007670 <k_work_queue_start>:
{
    7670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7674:	b088      	sub	sp, #32
    7676:	460e      	mov	r6, r1
    7678:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    767a:	4617      	mov	r7, r2
    767c:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    767e:	4604      	mov	r4, r0
    7680:	b950      	cbnz	r0, 7698 <k_work_queue_start+0x28>
    7682:	492d      	ldr	r1, [pc, #180]	; (7738 <k_work_queue_start+0xc8>)
    7684:	482d      	ldr	r0, [pc, #180]	; (773c <k_work_queue_start+0xcc>)
    7686:	f240 22b5 	movw	r2, #693	; 0x2b5
    768a:	f001 ff73 	bl	9574 <printk>
    768e:	482a      	ldr	r0, [pc, #168]	; (7738 <k_work_queue_start+0xc8>)
    7690:	f240 21b5 	movw	r1, #693	; 0x2b5
    7694:	f002 f83a 	bl	970c <assert_post_action>
	__ASSERT_NO_MSG(stack);
    7698:	b956      	cbnz	r6, 76b0 <k_work_queue_start+0x40>
    769a:	4927      	ldr	r1, [pc, #156]	; (7738 <k_work_queue_start+0xc8>)
    769c:	4827      	ldr	r0, [pc, #156]	; (773c <k_work_queue_start+0xcc>)
    769e:	f240 22b6 	movw	r2, #694	; 0x2b6
    76a2:	f001 ff67 	bl	9574 <printk>
    76a6:	4824      	ldr	r0, [pc, #144]	; (7738 <k_work_queue_start+0xc8>)
    76a8:	f240 21b6 	movw	r1, #694	; 0x2b6
    76ac:	f002 f82e 	bl	970c <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    76b0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    76b4:	07db      	lsls	r3, r3, #31
    76b6:	d50a      	bpl.n	76ce <k_work_queue_start+0x5e>
    76b8:	491f      	ldr	r1, [pc, #124]	; (7738 <k_work_queue_start+0xc8>)
    76ba:	4820      	ldr	r0, [pc, #128]	; (773c <k_work_queue_start+0xcc>)
    76bc:	f240 22b7 	movw	r2, #695	; 0x2b7
    76c0:	f001 ff58 	bl	9574 <printk>
    76c4:	481c      	ldr	r0, [pc, #112]	; (7738 <k_work_queue_start+0xc8>)
    76c6:	f240 21b7 	movw	r1, #695	; 0x2b7
    76ca:	f002 f81f 	bl	970c <assert_post_action>
	list->head = NULL;
    76ce:	2300      	movs	r3, #0
	list->tail = NULL;
    76d0:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
    76d4:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    76d8:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    76dc:	f104 0390 	add.w	r3, r4, #144	; 0x90
    76e0:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
    76e4:	b32d      	cbz	r5, 7732 <k_work_queue_start+0xc2>
    76e6:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    76e8:	2b00      	cmp	r3, #0
    76ea:	f240 1101 	movw	r1, #257	; 0x101
    76ee:	bf08      	it	eq
    76f0:	2101      	moveq	r1, #1
	*flagp = flags;
    76f2:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    76f6:	f04f 32ff 	mov.w	r2, #4294967295
    76fa:	f04f 33ff 	mov.w	r3, #4294967295
    76fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7702:	2200      	movs	r2, #0
    7704:	e9cd 8203 	strd	r8, r2, [sp, #12]
    7708:	e9cd 2201 	strd	r2, r2, [sp, #4]
    770c:	4b0c      	ldr	r3, [pc, #48]	; (7740 <k_work_queue_start+0xd0>)
    770e:	9400      	str	r4, [sp, #0]
    7710:	463a      	mov	r2, r7
    7712:	4631      	mov	r1, r6
    7714:	4620      	mov	r0, r4
    7716:	f7ff fa73 	bl	6c00 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
    771a:	b125      	cbz	r5, 7726 <k_work_queue_start+0xb6>
    771c:	6829      	ldr	r1, [r5, #0]
    771e:	b111      	cbz	r1, 7726 <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
    7720:	4620      	mov	r0, r4
    7722:	f002 fc64 	bl	9fee <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    7726:	4620      	mov	r0, r4
}
    7728:	b008      	add	sp, #32
    772a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    772e:	f002 bc63 	b.w	9ff8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    7732:	2101      	movs	r1, #1
    7734:	e7dd      	b.n	76f2 <k_work_queue_start+0x82>
    7736:	bf00      	nop
    7738:	0000b7c5 	.word	0x0000b7c5
    773c:	0000a66d 	.word	0x0000a66d
    7740:	00007251 	.word	0x00007251

00007744 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
    7744:	b538      	push	{r3, r4, r5, lr}
    7746:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
    7748:	4604      	mov	r4, r0
    774a:	b950      	cbnz	r0, 7762 <k_work_init_delayable+0x1e>
    774c:	4910      	ldr	r1, [pc, #64]	; (7790 <k_work_init_delayable+0x4c>)
    774e:	4811      	ldr	r0, [pc, #68]	; (7794 <k_work_init_delayable+0x50>)
    7750:	f240 322d 	movw	r2, #813	; 0x32d
    7754:	f001 ff0e 	bl	9574 <printk>
    7758:	480d      	ldr	r0, [pc, #52]	; (7790 <k_work_init_delayable+0x4c>)
    775a:	f240 312d 	movw	r1, #813	; 0x32d
    775e:	f001 ffd5 	bl	970c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
    7762:	b955      	cbnz	r5, 777a <k_work_init_delayable+0x36>
    7764:	490a      	ldr	r1, [pc, #40]	; (7790 <k_work_init_delayable+0x4c>)
    7766:	480b      	ldr	r0, [pc, #44]	; (7794 <k_work_init_delayable+0x50>)
    7768:	f240 322e 	movw	r2, #814	; 0x32e
    776c:	f001 ff02 	bl	9574 <printk>
    7770:	4807      	ldr	r0, [pc, #28]	; (7790 <k_work_init_delayable+0x4c>)
    7772:	f240 312e 	movw	r1, #814	; 0x32e
    7776:	f001 ffc9 	bl	970c <assert_post_action>

	*dwork = (struct k_work_delayable){
    777a:	2230      	movs	r2, #48	; 0x30
    777c:	2100      	movs	r1, #0
    777e:	4620      	mov	r0, r4
    7780:	f002 f85e 	bl	9840 <memset>
    7784:	f44f 7380 	mov.w	r3, #256	; 0x100
    7788:	6065      	str	r5, [r4, #4]
    778a:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
    778c:	bd38      	pop	{r3, r4, r5, pc}
    778e:	bf00      	nop
    7790:	0000b7c5 	.word	0x0000b7c5
    7794:	0000a66d 	.word	0x0000a66d

00007798 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    7798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    779a:	4616      	mov	r6, r2
    779c:	9001      	str	r0, [sp, #4]
    779e:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
    77a0:	460c      	mov	r4, r1
    77a2:	b951      	cbnz	r1, 77ba <k_work_schedule_for_queue+0x22>
    77a4:	4929      	ldr	r1, [pc, #164]	; (784c <k_work_schedule_for_queue+0xb4>)
    77a6:	482a      	ldr	r0, [pc, #168]	; (7850 <k_work_schedule_for_queue+0xb8>)
    77a8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
    77ac:	f001 fee2 	bl	9574 <printk>
    77b0:	4826      	ldr	r0, [pc, #152]	; (784c <k_work_schedule_for_queue+0xb4>)
    77b2:	f44f 7169 	mov.w	r1, #932	; 0x3a4
    77b6:	f001 ffa9 	bl	970c <assert_post_action>
	__asm__ volatile(
    77ba:	f04f 0320 	mov.w	r3, #32
    77be:	f3ef 8511 	mrs	r5, BASEPRI
    77c2:	f383 8812 	msr	BASEPRI_MAX, r3
    77c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77ca:	4822      	ldr	r0, [pc, #136]	; (7854 <k_work_schedule_for_queue+0xbc>)
    77cc:	f7ff fade 	bl	6d8c <z_spin_lock_valid>
    77d0:	b940      	cbnz	r0, 77e4 <k_work_schedule_for_queue+0x4c>
    77d2:	4921      	ldr	r1, [pc, #132]	; (7858 <k_work_schedule_for_queue+0xc0>)
    77d4:	481e      	ldr	r0, [pc, #120]	; (7850 <k_work_schedule_for_queue+0xb8>)
    77d6:	2281      	movs	r2, #129	; 0x81
    77d8:	f001 fecc 	bl	9574 <printk>
    77dc:	481e      	ldr	r0, [pc, #120]	; (7858 <k_work_schedule_for_queue+0xc0>)
    77de:	2181      	movs	r1, #129	; 0x81
    77e0:	f001 ff94 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    77e4:	481b      	ldr	r0, [pc, #108]	; (7854 <k_work_schedule_for_queue+0xbc>)
    77e6:	f7ff faef 	bl	6dc8 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
    77ea:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    77ec:	f013 0f0e 	tst.w	r3, #14
    77f0:	d129      	bne.n	7846 <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    77f2:	ea56 0207 	orrs.w	r2, r6, r7
    77f6:	d118      	bne.n	782a <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
    77f8:	4620      	mov	r0, r4
    77fa:	a901      	add	r1, sp, #4
    77fc:	f7ff fe1c 	bl	7438 <submit_to_queue_locked>
    7800:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7802:	4814      	ldr	r0, [pc, #80]	; (7854 <k_work_schedule_for_queue+0xbc>)
    7804:	f7ff fad0 	bl	6da8 <z_spin_unlock_valid>
    7808:	b940      	cbnz	r0, 781c <k_work_schedule_for_queue+0x84>
    780a:	4913      	ldr	r1, [pc, #76]	; (7858 <k_work_schedule_for_queue+0xc0>)
    780c:	4810      	ldr	r0, [pc, #64]	; (7850 <k_work_schedule_for_queue+0xb8>)
    780e:	22ac      	movs	r2, #172	; 0xac
    7810:	f001 feb0 	bl	9574 <printk>
    7814:	4810      	ldr	r0, [pc, #64]	; (7858 <k_work_schedule_for_queue+0xc0>)
    7816:	21ac      	movs	r1, #172	; 0xac
    7818:	f001 ff78 	bl	970c <assert_post_action>
	__asm__ volatile(
    781c:	f385 8811 	msr	BASEPRI, r5
    7820:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    7824:	4620      	mov	r0, r4
    7826:	b003      	add	sp, #12
    7828:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
    782a:	f043 0308 	orr.w	r3, r3, #8
    782e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
    7830:	9b01      	ldr	r3, [sp, #4]
    7832:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    7834:	f104 0010 	add.w	r0, r4, #16
    7838:	4908      	ldr	r1, [pc, #32]	; (785c <k_work_schedule_for_queue+0xc4>)
    783a:	4632      	mov	r2, r6
    783c:	463b      	mov	r3, r7
    783e:	f001 f919 	bl	8a74 <z_add_timeout>
	return ret;
    7842:	2401      	movs	r4, #1
    7844:	e7dd      	b.n	7802 <k_work_schedule_for_queue+0x6a>
	int ret = 0;
    7846:	2400      	movs	r4, #0
    7848:	e7db      	b.n	7802 <k_work_schedule_for_queue+0x6a>
    784a:	bf00      	nop
    784c:	0000b7c5 	.word	0x0000b7c5
    7850:	0000a66d 	.word	0x0000a66d
    7854:	200011ec 	.word	0x200011ec
    7858:	0000ab1d 	.word	0x0000ab1d
    785c:	000074f9 	.word	0x000074f9

00007860 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    7860:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    7862:	4801      	ldr	r0, [pc, #4]	; (7868 <k_work_schedule+0x8>)
    7864:	f7ff bf98 	b.w	7798 <k_work_schedule_for_queue>
    7868:	20000890 	.word	0x20000890

0000786c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
    786c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    786e:	4616      	mov	r6, r2
    7870:	9001      	str	r0, [sp, #4]
    7872:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
    7874:	460c      	mov	r4, r1
    7876:	b951      	cbnz	r1, 788e <k_work_reschedule_for_queue+0x22>
    7878:	4928      	ldr	r1, [pc, #160]	; (791c <k_work_reschedule_for_queue+0xb0>)
    787a:	4829      	ldr	r0, [pc, #164]	; (7920 <k_work_reschedule_for_queue+0xb4>)
    787c:	f44f 7272 	mov.w	r2, #968	; 0x3c8
    7880:	f001 fe78 	bl	9574 <printk>
    7884:	4825      	ldr	r0, [pc, #148]	; (791c <k_work_reschedule_for_queue+0xb0>)
    7886:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    788a:	f001 ff3f 	bl	970c <assert_post_action>
	__asm__ volatile(
    788e:	f04f 0320 	mov.w	r3, #32
    7892:	f3ef 8511 	mrs	r5, BASEPRI
    7896:	f383 8812 	msr	BASEPRI_MAX, r3
    789a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    789e:	4821      	ldr	r0, [pc, #132]	; (7924 <k_work_reschedule_for_queue+0xb8>)
    78a0:	f7ff fa74 	bl	6d8c <z_spin_lock_valid>
    78a4:	b940      	cbnz	r0, 78b8 <k_work_reschedule_for_queue+0x4c>
    78a6:	4920      	ldr	r1, [pc, #128]	; (7928 <k_work_reschedule_for_queue+0xbc>)
    78a8:	481d      	ldr	r0, [pc, #116]	; (7920 <k_work_reschedule_for_queue+0xb4>)
    78aa:	2281      	movs	r2, #129	; 0x81
    78ac:	f001 fe62 	bl	9574 <printk>
    78b0:	481d      	ldr	r0, [pc, #116]	; (7928 <k_work_reschedule_for_queue+0xbc>)
    78b2:	2181      	movs	r1, #129	; 0x81
    78b4:	f001 ff2a 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    78b8:	481a      	ldr	r0, [pc, #104]	; (7924 <k_work_reschedule_for_queue+0xb8>)
    78ba:	f7ff fa85 	bl	6dc8 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
    78be:	4620      	mov	r0, r4
    78c0:	f002 fbb1 	bl	a026 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    78c4:	ea56 0307 	orrs.w	r3, r6, r7
    78c8:	d118      	bne.n	78fc <k_work_reschedule_for_queue+0x90>
		return submit_to_queue_locked(work, queuep);
    78ca:	4620      	mov	r0, r4
    78cc:	a901      	add	r1, sp, #4
    78ce:	f7ff fdb3 	bl	7438 <submit_to_queue_locked>
    78d2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78d4:	4813      	ldr	r0, [pc, #76]	; (7924 <k_work_reschedule_for_queue+0xb8>)
    78d6:	f7ff fa67 	bl	6da8 <z_spin_unlock_valid>
    78da:	b940      	cbnz	r0, 78ee <k_work_reschedule_for_queue+0x82>
    78dc:	4912      	ldr	r1, [pc, #72]	; (7928 <k_work_reschedule_for_queue+0xbc>)
    78de:	4810      	ldr	r0, [pc, #64]	; (7920 <k_work_reschedule_for_queue+0xb4>)
    78e0:	22ac      	movs	r2, #172	; 0xac
    78e2:	f001 fe47 	bl	9574 <printk>
    78e6:	4810      	ldr	r0, [pc, #64]	; (7928 <k_work_reschedule_for_queue+0xbc>)
    78e8:	21ac      	movs	r1, #172	; 0xac
    78ea:	f001 ff0f 	bl	970c <assert_post_action>
	__asm__ volatile(
    78ee:	f385 8811 	msr	BASEPRI, r5
    78f2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    78f6:	4620      	mov	r0, r4
    78f8:	b003      	add	sp, #12
    78fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
    78fc:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    78fe:	490b      	ldr	r1, [pc, #44]	; (792c <k_work_reschedule_for_queue+0xc0>)
	*flagp |= BIT(bit);
    7900:	f043 0308 	orr.w	r3, r3, #8
    7904:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
    7906:	9b01      	ldr	r3, [sp, #4]
    7908:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    790a:	f104 0010 	add.w	r0, r4, #16
    790e:	4632      	mov	r2, r6
    7910:	463b      	mov	r3, r7
    7912:	f001 f8af 	bl	8a74 <z_add_timeout>
	return ret;
    7916:	2401      	movs	r4, #1
    7918:	e7dc      	b.n	78d4 <k_work_reschedule_for_queue+0x68>
    791a:	bf00      	nop
    791c:	0000b7c5 	.word	0x0000b7c5
    7920:	0000a66d 	.word	0x0000a66d
    7924:	200011ec 	.word	0x200011ec
    7928:	0000ab1d 	.word	0x0000ab1d
    792c:	000074f9 	.word	0x000074f9

00007930 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
    7930:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    7932:	4801      	ldr	r0, [pc, #4]	; (7938 <k_work_reschedule+0x8>)
    7934:	f7ff bf9a 	b.w	786c <k_work_reschedule_for_queue>
    7938:	20000890 	.word	0x20000890

0000793c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    793c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    793e:	4c08      	ldr	r4, [pc, #32]	; (7960 <z_reset_time_slice+0x24>)
    7940:	6823      	ldr	r3, [r4, #0]
    7942:	b15b      	cbz	r3, 795c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7944:	f7fd fad6 	bl	4ef4 <sys_clock_elapsed>
    7948:	4603      	mov	r3, r0
    794a:	6820      	ldr	r0, [r4, #0]
    794c:	4a05      	ldr	r2, [pc, #20]	; (7964 <z_reset_time_slice+0x28>)
    794e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    7950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7954:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    7956:	2100      	movs	r1, #0
    7958:	f001 b9b8 	b.w	8ccc <z_set_timeout_expiry>
}
    795c:	bd10      	pop	{r4, pc}
    795e:	bf00      	nop
    7960:	20001204 	.word	0x20001204
    7964:	200011bc 	.word	0x200011bc

00007968 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    7968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    796a:	4604      	mov	r4, r0
    796c:	460d      	mov	r5, r1
	__asm__ volatile(
    796e:	f04f 0320 	mov.w	r3, #32
    7972:	f3ef 8611 	mrs	r6, BASEPRI
    7976:	f383 8812 	msr	BASEPRI_MAX, r3
    797a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    797e:	481e      	ldr	r0, [pc, #120]	; (79f8 <k_sched_time_slice_set+0x90>)
    7980:	f7ff fa04 	bl	6d8c <z_spin_lock_valid>
    7984:	b940      	cbnz	r0, 7998 <k_sched_time_slice_set+0x30>
    7986:	491d      	ldr	r1, [pc, #116]	; (79fc <k_sched_time_slice_set+0x94>)
    7988:	481d      	ldr	r0, [pc, #116]	; (7a00 <k_sched_time_slice_set+0x98>)
    798a:	2281      	movs	r2, #129	; 0x81
    798c:	f001 fdf2 	bl	9574 <printk>
    7990:	481a      	ldr	r0, [pc, #104]	; (79fc <k_sched_time_slice_set+0x94>)
    7992:	2181      	movs	r1, #129	; 0x81
    7994:	f001 feba 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    7998:	4817      	ldr	r0, [pc, #92]	; (79f8 <k_sched_time_slice_set+0x90>)
    799a:	f7ff fa15 	bl	6dc8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    799e:	4b19      	ldr	r3, [pc, #100]	; (7a04 <k_sched_time_slice_set+0x9c>)
    79a0:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    79a2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    79a6:	f240 30e7 	movw	r0, #999	; 0x3e7
    79aa:	2100      	movs	r1, #0
    79ac:	611a      	str	r2, [r3, #16]
    79ae:	fbe7 0104 	umlal	r0, r1, r7, r4
    79b2:	2300      	movs	r3, #0
    79b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    79b8:	f7f8 fba2 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    79bc:	2c00      	cmp	r4, #0
    79be:	4b12      	ldr	r3, [pc, #72]	; (7a08 <k_sched_time_slice_set+0xa0>)
    79c0:	dc16      	bgt.n	79f0 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    79c2:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    79c4:	4b11      	ldr	r3, [pc, #68]	; (7a0c <k_sched_time_slice_set+0xa4>)
    79c6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    79c8:	f7ff ffb8 	bl	793c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    79cc:	480a      	ldr	r0, [pc, #40]	; (79f8 <k_sched_time_slice_set+0x90>)
    79ce:	f7ff f9eb 	bl	6da8 <z_spin_unlock_valid>
    79d2:	b940      	cbnz	r0, 79e6 <k_sched_time_slice_set+0x7e>
    79d4:	4909      	ldr	r1, [pc, #36]	; (79fc <k_sched_time_slice_set+0x94>)
    79d6:	480a      	ldr	r0, [pc, #40]	; (7a00 <k_sched_time_slice_set+0x98>)
    79d8:	22ac      	movs	r2, #172	; 0xac
    79da:	f001 fdcb 	bl	9574 <printk>
    79de:	4807      	ldr	r0, [pc, #28]	; (79fc <k_sched_time_slice_set+0x94>)
    79e0:	21ac      	movs	r1, #172	; 0xac
    79e2:	f001 fe93 	bl	970c <assert_post_action>
	__asm__ volatile(
    79e6:	f386 8811 	msr	BASEPRI, r6
    79ea:	f3bf 8f6f 	isb	sy
	}
}
    79ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    79f0:	2802      	cmp	r0, #2
    79f2:	bfb8      	it	lt
    79f4:	2002      	movlt	r0, #2
    79f6:	e7e4      	b.n	79c2 <k_sched_time_slice_set+0x5a>
    79f8:	200011fc 	.word	0x200011fc
    79fc:	0000ab1d 	.word	0x0000ab1d
    7a00:	0000a66d 	.word	0x0000a66d
    7a04:	200011bc 	.word	0x200011bc
    7a08:	20001204 	.word	0x20001204
    7a0c:	20001200 	.word	0x20001200

00007a10 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    7a10:	b538      	push	{r3, r4, r5, lr}
    7a12:	4604      	mov	r4, r0
	__asm__ volatile(
    7a14:	f04f 0320 	mov.w	r3, #32
    7a18:	f3ef 8511 	mrs	r5, BASEPRI
    7a1c:	f383 8812 	msr	BASEPRI_MAX, r3
    7a20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a24:	4812      	ldr	r0, [pc, #72]	; (7a70 <z_unpend_thread_no_timeout+0x60>)
    7a26:	f7ff f9b1 	bl	6d8c <z_spin_lock_valid>
    7a2a:	b940      	cbnz	r0, 7a3e <z_unpend_thread_no_timeout+0x2e>
    7a2c:	4911      	ldr	r1, [pc, #68]	; (7a74 <z_unpend_thread_no_timeout+0x64>)
    7a2e:	4812      	ldr	r0, [pc, #72]	; (7a78 <z_unpend_thread_no_timeout+0x68>)
    7a30:	2281      	movs	r2, #129	; 0x81
    7a32:	f001 fd9f 	bl	9574 <printk>
    7a36:	480f      	ldr	r0, [pc, #60]	; (7a74 <z_unpend_thread_no_timeout+0x64>)
    7a38:	2181      	movs	r1, #129	; 0x81
    7a3a:	f001 fe67 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    7a3e:	480c      	ldr	r0, [pc, #48]	; (7a70 <z_unpend_thread_no_timeout+0x60>)
    7a40:	f7ff f9c2 	bl	6dc8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    7a44:	4620      	mov	r0, r4
    7a46:	f000 f8c1 	bl	7bcc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a4a:	4809      	ldr	r0, [pc, #36]	; (7a70 <z_unpend_thread_no_timeout+0x60>)
    7a4c:	f7ff f9ac 	bl	6da8 <z_spin_unlock_valid>
    7a50:	b940      	cbnz	r0, 7a64 <z_unpend_thread_no_timeout+0x54>
    7a52:	4908      	ldr	r1, [pc, #32]	; (7a74 <z_unpend_thread_no_timeout+0x64>)
    7a54:	4808      	ldr	r0, [pc, #32]	; (7a78 <z_unpend_thread_no_timeout+0x68>)
    7a56:	22ac      	movs	r2, #172	; 0xac
    7a58:	f001 fd8c 	bl	9574 <printk>
    7a5c:	4805      	ldr	r0, [pc, #20]	; (7a74 <z_unpend_thread_no_timeout+0x64>)
    7a5e:	21ac      	movs	r1, #172	; 0xac
    7a60:	f001 fe54 	bl	970c <assert_post_action>
	__asm__ volatile(
    7a64:	f385 8811 	msr	BASEPRI, r5
    7a68:	f3bf 8f6f 	isb	sy
	}
}
    7a6c:	bd38      	pop	{r3, r4, r5, pc}
    7a6e:	bf00      	nop
    7a70:	200011fc 	.word	0x200011fc
    7a74:	0000ab1d 	.word	0x0000ab1d
    7a78:	0000a66d 	.word	0x0000a66d

00007a7c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    7a7c:	b510      	push	{r4, lr}
    7a7e:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7a80:	460c      	mov	r4, r1
    7a82:	b9c1      	cbnz	r1, 7ab6 <z_reschedule+0x3a>
    7a84:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
    7a88:	b9aa      	cbnz	r2, 7ab6 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
    7a8a:	4a14      	ldr	r2, [pc, #80]	; (7adc <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
    7a8c:	69d1      	ldr	r1, [r2, #28]
    7a8e:	6892      	ldr	r2, [r2, #8]
    7a90:	4291      	cmp	r1, r2
    7a92:	d010      	beq.n	7ab6 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a94:	f7ff f988 	bl	6da8 <z_spin_unlock_valid>
    7a98:	b940      	cbnz	r0, 7aac <z_reschedule+0x30>
    7a9a:	4911      	ldr	r1, [pc, #68]	; (7ae0 <z_reschedule+0x64>)
    7a9c:	4811      	ldr	r0, [pc, #68]	; (7ae4 <z_reschedule+0x68>)
    7a9e:	22c3      	movs	r2, #195	; 0xc3
    7aa0:	f001 fd68 	bl	9574 <printk>
    7aa4:	480e      	ldr	r0, [pc, #56]	; (7ae0 <z_reschedule+0x64>)
    7aa6:	21c3      	movs	r1, #195	; 0xc3
    7aa8:	f001 fe30 	bl	970c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    7aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    7ab0:	2000      	movs	r0, #0
    7ab2:	f7fb b8f5 	b.w	2ca0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ab6:	4618      	mov	r0, r3
    7ab8:	f7ff f976 	bl	6da8 <z_spin_unlock_valid>
    7abc:	b940      	cbnz	r0, 7ad0 <z_reschedule+0x54>
    7abe:	4908      	ldr	r1, [pc, #32]	; (7ae0 <z_reschedule+0x64>)
    7ac0:	4808      	ldr	r0, [pc, #32]	; (7ae4 <z_reschedule+0x68>)
    7ac2:	22ac      	movs	r2, #172	; 0xac
    7ac4:	f001 fd56 	bl	9574 <printk>
    7ac8:	4805      	ldr	r0, [pc, #20]	; (7ae0 <z_reschedule+0x64>)
    7aca:	21ac      	movs	r1, #172	; 0xac
    7acc:	f001 fe1e 	bl	970c <assert_post_action>
    7ad0:	f384 8811 	msr	BASEPRI, r4
    7ad4:	f3bf 8f6f 	isb	sy
    7ad8:	bd10      	pop	{r4, pc}
    7ada:	bf00      	nop
    7adc:	200011bc 	.word	0x200011bc
    7ae0:	0000ab1d 	.word	0x0000ab1d
    7ae4:	0000a66d 	.word	0x0000a66d

00007ae8 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    7ae8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7aea:	f04f 0320 	mov.w	r3, #32
    7aee:	f3ef 8511 	mrs	r5, BASEPRI
    7af2:	f383 8812 	msr	BASEPRI_MAX, r3
    7af6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7afa:	4820      	ldr	r0, [pc, #128]	; (7b7c <k_sched_lock+0x94>)
    7afc:	f7ff f946 	bl	6d8c <z_spin_lock_valid>
    7b00:	b940      	cbnz	r0, 7b14 <k_sched_lock+0x2c>
    7b02:	491f      	ldr	r1, [pc, #124]	; (7b80 <k_sched_lock+0x98>)
    7b04:	481f      	ldr	r0, [pc, #124]	; (7b84 <k_sched_lock+0x9c>)
    7b06:	2281      	movs	r2, #129	; 0x81
    7b08:	f001 fd34 	bl	9574 <printk>
    7b0c:	481c      	ldr	r0, [pc, #112]	; (7b80 <k_sched_lock+0x98>)
    7b0e:	2181      	movs	r1, #129	; 0x81
    7b10:	f001 fdfc 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    7b14:	4819      	ldr	r0, [pc, #100]	; (7b7c <k_sched_lock+0x94>)
    7b16:	f7ff f957 	bl	6dc8 <z_spin_lock_set_owner>
    7b1a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7b1e:	b143      	cbz	r3, 7b32 <k_sched_lock+0x4a>
    7b20:	4919      	ldr	r1, [pc, #100]	; (7b88 <k_sched_lock+0xa0>)
    7b22:	4818      	ldr	r0, [pc, #96]	; (7b84 <k_sched_lock+0x9c>)
    7b24:	22fd      	movs	r2, #253	; 0xfd
    7b26:	f001 fd25 	bl	9574 <printk>
    7b2a:	4817      	ldr	r0, [pc, #92]	; (7b88 <k_sched_lock+0xa0>)
    7b2c:	21fd      	movs	r1, #253	; 0xfd
    7b2e:	f001 fded 	bl	970c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7b32:	4c16      	ldr	r4, [pc, #88]	; (7b8c <k_sched_lock+0xa4>)
    7b34:	68a2      	ldr	r2, [r4, #8]
    7b36:	7bd2      	ldrb	r2, [r2, #15]
    7b38:	2a01      	cmp	r2, #1
    7b3a:	d108      	bne.n	7b4e <k_sched_lock+0x66>
    7b3c:	4912      	ldr	r1, [pc, #72]	; (7b88 <k_sched_lock+0xa0>)
    7b3e:	4811      	ldr	r0, [pc, #68]	; (7b84 <k_sched_lock+0x9c>)
    7b40:	22fe      	movs	r2, #254	; 0xfe
    7b42:	f001 fd17 	bl	9574 <printk>
    7b46:	4810      	ldr	r0, [pc, #64]	; (7b88 <k_sched_lock+0xa0>)
    7b48:	21fe      	movs	r1, #254	; 0xfe
    7b4a:	f001 fddf 	bl	970c <assert_post_action>
	--_current->base.sched_locked;
    7b4e:	68a2      	ldr	r2, [r4, #8]
    7b50:	7bd3      	ldrb	r3, [r2, #15]
    7b52:	3b01      	subs	r3, #1
    7b54:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b56:	4809      	ldr	r0, [pc, #36]	; (7b7c <k_sched_lock+0x94>)
    7b58:	f7ff f926 	bl	6da8 <z_spin_unlock_valid>
    7b5c:	b940      	cbnz	r0, 7b70 <k_sched_lock+0x88>
    7b5e:	4908      	ldr	r1, [pc, #32]	; (7b80 <k_sched_lock+0x98>)
    7b60:	4808      	ldr	r0, [pc, #32]	; (7b84 <k_sched_lock+0x9c>)
    7b62:	22ac      	movs	r2, #172	; 0xac
    7b64:	f001 fd06 	bl	9574 <printk>
    7b68:	4805      	ldr	r0, [pc, #20]	; (7b80 <k_sched_lock+0x98>)
    7b6a:	21ac      	movs	r1, #172	; 0xac
    7b6c:	f001 fdce 	bl	970c <assert_post_action>
	__asm__ volatile(
    7b70:	f385 8811 	msr	BASEPRI, r5
    7b74:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    7b78:	bd38      	pop	{r3, r4, r5, pc}
    7b7a:	bf00      	nop
    7b7c:	200011fc 	.word	0x200011fc
    7b80:	0000ab1d 	.word	0x0000ab1d
    7b84:	0000a66d 	.word	0x0000a66d
    7b88:	0000b77a 	.word	0x0000b77a
    7b8c:	200011bc 	.word	0x200011bc

00007b90 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7b90:	4b0b      	ldr	r3, [pc, #44]	; (7bc0 <z_priq_dumb_remove+0x30>)
    7b92:	4299      	cmp	r1, r3
{
    7b94:	b510      	push	{r4, lr}
    7b96:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7b98:	d10a      	bne.n	7bb0 <z_priq_dumb_remove+0x20>
    7b9a:	490a      	ldr	r1, [pc, #40]	; (7bc4 <z_priq_dumb_remove+0x34>)
    7b9c:	480a      	ldr	r0, [pc, #40]	; (7bc8 <z_priq_dumb_remove+0x38>)
    7b9e:	f240 32e7 	movw	r2, #999	; 0x3e7
    7ba2:	f001 fce7 	bl	9574 <printk>
    7ba6:	4807      	ldr	r0, [pc, #28]	; (7bc4 <z_priq_dumb_remove+0x34>)
    7ba8:	f240 31e7 	movw	r1, #999	; 0x3e7
    7bac:	f001 fdae 	bl	970c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    7bb0:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    7bb4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7bb6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7bb8:	2300      	movs	r3, #0
	node->prev = NULL;
    7bba:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    7bbe:	bd10      	pop	{r4, pc}
    7bc0:	20000788 	.word	0x20000788
    7bc4:	0000b7e6 	.word	0x0000b7e6
    7bc8:	0000a66d 	.word	0x0000a66d

00007bcc <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    7bcc:	6883      	ldr	r3, [r0, #8]
{
    7bce:	b510      	push	{r4, lr}
    7bd0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    7bd2:	b953      	cbnz	r3, 7bea <unpend_thread_no_timeout+0x1e>
    7bd4:	490a      	ldr	r1, [pc, #40]	; (7c00 <unpend_thread_no_timeout+0x34>)
    7bd6:	480b      	ldr	r0, [pc, #44]	; (7c04 <unpend_thread_no_timeout+0x38>)
    7bd8:	f240 2283 	movw	r2, #643	; 0x283
    7bdc:	f001 fcca 	bl	9574 <printk>
    7be0:	4807      	ldr	r0, [pc, #28]	; (7c00 <unpend_thread_no_timeout+0x34>)
    7be2:	f240 2183 	movw	r1, #643	; 0x283
    7be6:	f001 fd91 	bl	970c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7bea:	68a0      	ldr	r0, [r4, #8]
    7bec:	4621      	mov	r1, r4
    7bee:	f7ff ffcf 	bl	7b90 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7bf2:	7b63      	ldrb	r3, [r4, #13]
    7bf4:	f023 0302 	bic.w	r3, r3, #2
    7bf8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7bfa:	2300      	movs	r3, #0
    7bfc:	60a3      	str	r3, [r4, #8]
}
    7bfe:	bd10      	pop	{r4, pc}
    7c00:	0000b7e6 	.word	0x0000b7e6
    7c04:	0000a66d 	.word	0x0000a66d

00007c08 <update_cache>:
{
    7c08:	b538      	push	{r3, r4, r5, lr}
    7c0a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    7c0c:	4812      	ldr	r0, [pc, #72]	; (7c58 <update_cache+0x50>)
    7c0e:	4d13      	ldr	r5, [pc, #76]	; (7c5c <update_cache+0x54>)
    7c10:	f002 fa2d 	bl	a06e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7c14:	4604      	mov	r4, r0
    7c16:	b900      	cbnz	r0, 7c1a <update_cache+0x12>
    7c18:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    7c1a:	b9aa      	cbnz	r2, 7c48 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
    7c1c:	68ab      	ldr	r3, [r5, #8]
    7c1e:	b943      	cbnz	r3, 7c32 <update_cache+0x2a>
    7c20:	490f      	ldr	r1, [pc, #60]	; (7c60 <update_cache+0x58>)
    7c22:	4810      	ldr	r0, [pc, #64]	; (7c64 <update_cache+0x5c>)
    7c24:	2289      	movs	r2, #137	; 0x89
    7c26:	f001 fca5 	bl	9574 <printk>
    7c2a:	480d      	ldr	r0, [pc, #52]	; (7c60 <update_cache+0x58>)
    7c2c:	2189      	movs	r1, #137	; 0x89
    7c2e:	f001 fd6d 	bl	970c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    7c32:	68ab      	ldr	r3, [r5, #8]
    7c34:	7b5a      	ldrb	r2, [r3, #13]
    7c36:	06d2      	lsls	r2, r2, #27
    7c38:	d106      	bne.n	7c48 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7c3a:	69a2      	ldr	r2, [r4, #24]
    7c3c:	b922      	cbnz	r2, 7c48 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    7c3e:	89da      	ldrh	r2, [r3, #14]
    7c40:	2a7f      	cmp	r2, #127	; 0x7f
    7c42:	d901      	bls.n	7c48 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    7c44:	61eb      	str	r3, [r5, #28]
}
    7c46:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    7c48:	68ab      	ldr	r3, [r5, #8]
    7c4a:	42a3      	cmp	r3, r4
    7c4c:	d001      	beq.n	7c52 <update_cache+0x4a>
			z_reset_time_slice();
    7c4e:	f7ff fe75 	bl	793c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    7c52:	61ec      	str	r4, [r5, #28]
}
    7c54:	e7f7      	b.n	7c46 <update_cache+0x3e>
    7c56:	bf00      	nop
    7c58:	200011dc 	.word	0x200011dc
    7c5c:	200011bc 	.word	0x200011bc
    7c60:	0000b7e6 	.word	0x0000b7e6
    7c64:	0000a66d 	.word	0x0000a66d

00007c68 <move_thread_to_end_of_prio_q>:
{
    7c68:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    7c6a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7c6e:	7b43      	ldrb	r3, [r0, #13]
    7c70:	2a00      	cmp	r2, #0
{
    7c72:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    7c74:	da06      	bge.n	7c84 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7c7a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7c7c:	4601      	mov	r1, r0
    7c7e:	481f      	ldr	r0, [pc, #124]	; (7cfc <move_thread_to_end_of_prio_q+0x94>)
    7c80:	f7ff ff86 	bl	7b90 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7c84:	7b63      	ldrb	r3, [r4, #13]
    7c86:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7c8a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7c8c:	4b1c      	ldr	r3, [pc, #112]	; (7d00 <move_thread_to_end_of_prio_q+0x98>)
    7c8e:	429c      	cmp	r4, r3
    7c90:	d108      	bne.n	7ca4 <move_thread_to_end_of_prio_q+0x3c>
    7c92:	491c      	ldr	r1, [pc, #112]	; (7d04 <move_thread_to_end_of_prio_q+0x9c>)
    7c94:	481c      	ldr	r0, [pc, #112]	; (7d08 <move_thread_to_end_of_prio_q+0xa0>)
    7c96:	22ba      	movs	r2, #186	; 0xba
    7c98:	f001 fc6c 	bl	9574 <printk>
    7c9c:	4819      	ldr	r0, [pc, #100]	; (7d04 <move_thread_to_end_of_prio_q+0x9c>)
    7c9e:	21ba      	movs	r1, #186	; 0xba
    7ca0:	f001 fd34 	bl	970c <assert_post_action>
	return list->head == list;
    7ca4:	4a19      	ldr	r2, [pc, #100]	; (7d0c <move_thread_to_end_of_prio_q+0xa4>)
    7ca6:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7ca8:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    7caa:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7cae:	428b      	cmp	r3, r1
    7cb0:	bf08      	it	eq
    7cb2:	2300      	moveq	r3, #0
    7cb4:	2b00      	cmp	r3, #0
    7cb6:	bf38      	it	cc
    7cb8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7cba:	b1cb      	cbz	r3, 7cf0 <move_thread_to_end_of_prio_q+0x88>
	int32_t b1 = thread_1->base.prio;
    7cbc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7cc0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    7cc4:	4286      	cmp	r6, r0
    7cc6:	d00f      	beq.n	7ce8 <move_thread_to_end_of_prio_q+0x80>
		return b2 - b1;
    7cc8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7cca:	2800      	cmp	r0, #0
    7ccc:	dd0c      	ble.n	7ce8 <move_thread_to_end_of_prio_q+0x80>
	sys_dnode_t *const prev = successor->prev;
    7cce:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    7cd0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    7cd4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    7cd6:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    7cd8:	6890      	ldr	r0, [r2, #8]
    7cda:	1b03      	subs	r3, r0, r4
    7cdc:	4258      	negs	r0, r3
}
    7cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    7ce2:	4158      	adcs	r0, r3
    7ce4:	f7ff bf90 	b.w	7c08 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7ce8:	42ab      	cmp	r3, r5
    7cea:	d001      	beq.n	7cf0 <move_thread_to_end_of_prio_q+0x88>
    7cec:	681b      	ldr	r3, [r3, #0]
    7cee:	e7e4      	b.n	7cba <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    7cf0:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    7cf4:	602c      	str	r4, [r5, #0]
	list->tail = node;
    7cf6:	6254      	str	r4, [r2, #36]	; 0x24
}
    7cf8:	e7ee      	b.n	7cd8 <move_thread_to_end_of_prio_q+0x70>
    7cfa:	bf00      	nop
    7cfc:	200011dc 	.word	0x200011dc
    7d00:	20000788 	.word	0x20000788
    7d04:	0000b7e6 	.word	0x0000b7e6
    7d08:	0000a66d 	.word	0x0000a66d
    7d0c:	200011bc 	.word	0x200011bc

00007d10 <z_time_slice>:
{
    7d10:	b570      	push	{r4, r5, r6, lr}
    7d12:	4604      	mov	r4, r0
	__asm__ volatile(
    7d14:	f04f 0320 	mov.w	r3, #32
    7d18:	f3ef 8511 	mrs	r5, BASEPRI
    7d1c:	f383 8812 	msr	BASEPRI_MAX, r3
    7d20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d24:	4825      	ldr	r0, [pc, #148]	; (7dbc <z_time_slice+0xac>)
    7d26:	f7ff f831 	bl	6d8c <z_spin_lock_valid>
    7d2a:	b940      	cbnz	r0, 7d3e <z_time_slice+0x2e>
    7d2c:	4924      	ldr	r1, [pc, #144]	; (7dc0 <z_time_slice+0xb0>)
    7d2e:	4825      	ldr	r0, [pc, #148]	; (7dc4 <z_time_slice+0xb4>)
    7d30:	2281      	movs	r2, #129	; 0x81
    7d32:	f001 fc1f 	bl	9574 <printk>
    7d36:	4822      	ldr	r0, [pc, #136]	; (7dc0 <z_time_slice+0xb0>)
    7d38:	2181      	movs	r1, #129	; 0x81
    7d3a:	f001 fce7 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    7d3e:	481f      	ldr	r0, [pc, #124]	; (7dbc <z_time_slice+0xac>)
    7d40:	f7ff f842 	bl	6dc8 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    7d44:	4b20      	ldr	r3, [pc, #128]	; (7dc8 <z_time_slice+0xb8>)
    7d46:	4a21      	ldr	r2, [pc, #132]	; (7dcc <z_time_slice+0xbc>)
    7d48:	6898      	ldr	r0, [r3, #8]
    7d4a:	6811      	ldr	r1, [r2, #0]
    7d4c:	4288      	cmp	r0, r1
    7d4e:	4619      	mov	r1, r3
    7d50:	d113      	bne.n	7d7a <z_time_slice+0x6a>
			z_reset_time_slice();
    7d52:	f7ff fdf3 	bl	793c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d56:	4819      	ldr	r0, [pc, #100]	; (7dbc <z_time_slice+0xac>)
    7d58:	f7ff f826 	bl	6da8 <z_spin_unlock_valid>
    7d5c:	b940      	cbnz	r0, 7d70 <z_time_slice+0x60>
    7d5e:	4918      	ldr	r1, [pc, #96]	; (7dc0 <z_time_slice+0xb0>)
    7d60:	4818      	ldr	r0, [pc, #96]	; (7dc4 <z_time_slice+0xb4>)
    7d62:	22ac      	movs	r2, #172	; 0xac
    7d64:	f001 fc06 	bl	9574 <printk>
    7d68:	4815      	ldr	r0, [pc, #84]	; (7dc0 <z_time_slice+0xb0>)
    7d6a:	21ac      	movs	r1, #172	; 0xac
    7d6c:	f001 fcce 	bl	970c <assert_post_action>
	__asm__ volatile(
    7d70:	f385 8811 	msr	BASEPRI, r5
    7d74:	f3bf 8f6f 	isb	sy
}
    7d78:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    7d7a:	2600      	movs	r6, #0
    7d7c:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    7d7e:	4a14      	ldr	r2, [pc, #80]	; (7dd0 <z_time_slice+0xc0>)
    7d80:	6812      	ldr	r2, [r2, #0]
    7d82:	b1ba      	cbz	r2, 7db4 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    7d84:	89c2      	ldrh	r2, [r0, #14]
    7d86:	2a7f      	cmp	r2, #127	; 0x7f
    7d88:	d814      	bhi.n	7db4 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
    7d8a:	7b42      	ldrb	r2, [r0, #13]
    7d8c:	06d2      	lsls	r2, r2, #27
    7d8e:	d111      	bne.n	7db4 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    7d90:	4a10      	ldr	r2, [pc, #64]	; (7dd4 <z_time_slice+0xc4>)
    7d92:	f990 600e 	ldrsb.w	r6, [r0, #14]
    7d96:	6812      	ldr	r2, [r2, #0]
    7d98:	4296      	cmp	r6, r2
    7d9a:	db0b      	blt.n	7db4 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    7d9c:	4a0e      	ldr	r2, [pc, #56]	; (7dd8 <z_time_slice+0xc8>)
    7d9e:	4290      	cmp	r0, r2
    7da0:	d008      	beq.n	7db4 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
    7da2:	691a      	ldr	r2, [r3, #16]
    7da4:	42a2      	cmp	r2, r4
    7da6:	dc02      	bgt.n	7dae <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
    7da8:	f7ff ff5e 	bl	7c68 <move_thread_to_end_of_prio_q>
    7dac:	e7d1      	b.n	7d52 <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
    7dae:	1b12      	subs	r2, r2, r4
    7db0:	611a      	str	r2, [r3, #16]
    7db2:	e7d0      	b.n	7d56 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
    7db4:	2300      	movs	r3, #0
    7db6:	610b      	str	r3, [r1, #16]
    7db8:	e7cd      	b.n	7d56 <z_time_slice+0x46>
    7dba:	bf00      	nop
    7dbc:	200011fc 	.word	0x200011fc
    7dc0:	0000ab1d 	.word	0x0000ab1d
    7dc4:	0000a66d 	.word	0x0000a66d
    7dc8:	200011bc 	.word	0x200011bc
    7dcc:	200011f8 	.word	0x200011f8
    7dd0:	20001204 	.word	0x20001204
    7dd4:	20001200 	.word	0x20001200
    7dd8:	20000788 	.word	0x20000788

00007ddc <ready_thread>:
{
    7ddc:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7dde:	f990 200d 	ldrsb.w	r2, [r0, #13]
    7de2:	7b43      	ldrb	r3, [r0, #13]
    7de4:	2a00      	cmp	r2, #0
{
    7de6:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7de8:	db3d      	blt.n	7e66 <ready_thread+0x8a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7dea:	06da      	lsls	r2, r3, #27
    7dec:	d13b      	bne.n	7e66 <ready_thread+0x8a>
	return !sys_dnode_is_linked(&to->node);
    7dee:	6985      	ldr	r5, [r0, #24]
    7df0:	2d00      	cmp	r5, #0
    7df2:	d138      	bne.n	7e66 <ready_thread+0x8a>
	thread->base.thread_state |= _THREAD_QUEUED;
    7df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7df8:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7dfa:	4b1b      	ldr	r3, [pc, #108]	; (7e68 <ready_thread+0x8c>)
    7dfc:	4298      	cmp	r0, r3
    7dfe:	d108      	bne.n	7e12 <ready_thread+0x36>
    7e00:	491a      	ldr	r1, [pc, #104]	; (7e6c <ready_thread+0x90>)
    7e02:	481b      	ldr	r0, [pc, #108]	; (7e70 <ready_thread+0x94>)
    7e04:	22ba      	movs	r2, #186	; 0xba
    7e06:	f001 fbb5 	bl	9574 <printk>
    7e0a:	4818      	ldr	r0, [pc, #96]	; (7e6c <ready_thread+0x90>)
    7e0c:	21ba      	movs	r1, #186	; 0xba
    7e0e:	f001 fc7d 	bl	970c <assert_post_action>
	return list->head == list;
    7e12:	4918      	ldr	r1, [pc, #96]	; (7e74 <ready_thread+0x98>)
    7e14:	460b      	mov	r3, r1
    7e16:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7e1a:	4298      	cmp	r0, r3
    7e1c:	bf18      	it	ne
    7e1e:	4605      	movne	r5, r0
    7e20:	2d00      	cmp	r5, #0
    7e22:	461a      	mov	r2, r3
    7e24:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7e26:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    7e28:	bf38      	it	cc
    7e2a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7e2c:	b1b3      	cbz	r3, 7e5c <ready_thread+0x80>
	int32_t b1 = thread_1->base.prio;
    7e2e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7e32:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    7e36:	4286      	cmp	r6, r0
    7e38:	d00c      	beq.n	7e54 <ready_thread+0x78>
		return b2 - b1;
    7e3a:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7e3c:	2800      	cmp	r0, #0
    7e3e:	dd09      	ble.n	7e54 <ready_thread+0x78>
	sys_dnode_t *const prev = successor->prev;
    7e40:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7e42:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7e46:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7e48:	605c      	str	r4, [r3, #4]
}
    7e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    7e4e:	2000      	movs	r0, #0
    7e50:	f7ff beda 	b.w	7c08 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7e54:	42ab      	cmp	r3, r5
    7e56:	d001      	beq.n	7e5c <ready_thread+0x80>
    7e58:	681b      	ldr	r3, [r3, #0]
    7e5a:	e7e7      	b.n	7e2c <ready_thread+0x50>
	node->prev = tail;
    7e5c:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    7e60:	602c      	str	r4, [r5, #0]
	list->tail = node;
    7e62:	624c      	str	r4, [r1, #36]	; 0x24
}
    7e64:	e7f1      	b.n	7e4a <ready_thread+0x6e>
}
    7e66:	bd70      	pop	{r4, r5, r6, pc}
    7e68:	20000788 	.word	0x20000788
    7e6c:	0000b7e6 	.word	0x0000b7e6
    7e70:	0000a66d 	.word	0x0000a66d
    7e74:	200011bc 	.word	0x200011bc

00007e78 <z_ready_thread>:
{
    7e78:	b538      	push	{r3, r4, r5, lr}
    7e7a:	4604      	mov	r4, r0
	__asm__ volatile(
    7e7c:	f04f 0320 	mov.w	r3, #32
    7e80:	f3ef 8511 	mrs	r5, BASEPRI
    7e84:	f383 8812 	msr	BASEPRI_MAX, r3
    7e88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e8c:	4812      	ldr	r0, [pc, #72]	; (7ed8 <z_ready_thread+0x60>)
    7e8e:	f7fe ff7d 	bl	6d8c <z_spin_lock_valid>
    7e92:	b940      	cbnz	r0, 7ea6 <z_ready_thread+0x2e>
    7e94:	4911      	ldr	r1, [pc, #68]	; (7edc <z_ready_thread+0x64>)
    7e96:	4812      	ldr	r0, [pc, #72]	; (7ee0 <z_ready_thread+0x68>)
    7e98:	2281      	movs	r2, #129	; 0x81
    7e9a:	f001 fb6b 	bl	9574 <printk>
    7e9e:	480f      	ldr	r0, [pc, #60]	; (7edc <z_ready_thread+0x64>)
    7ea0:	2181      	movs	r1, #129	; 0x81
    7ea2:	f001 fc33 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    7ea6:	480c      	ldr	r0, [pc, #48]	; (7ed8 <z_ready_thread+0x60>)
    7ea8:	f7fe ff8e 	bl	6dc8 <z_spin_lock_set_owner>
			ready_thread(thread);
    7eac:	4620      	mov	r0, r4
    7eae:	f7ff ff95 	bl	7ddc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7eb2:	4809      	ldr	r0, [pc, #36]	; (7ed8 <z_ready_thread+0x60>)
    7eb4:	f7fe ff78 	bl	6da8 <z_spin_unlock_valid>
    7eb8:	b940      	cbnz	r0, 7ecc <z_ready_thread+0x54>
    7eba:	4908      	ldr	r1, [pc, #32]	; (7edc <z_ready_thread+0x64>)
    7ebc:	4808      	ldr	r0, [pc, #32]	; (7ee0 <z_ready_thread+0x68>)
    7ebe:	22ac      	movs	r2, #172	; 0xac
    7ec0:	f001 fb58 	bl	9574 <printk>
    7ec4:	4805      	ldr	r0, [pc, #20]	; (7edc <z_ready_thread+0x64>)
    7ec6:	21ac      	movs	r1, #172	; 0xac
    7ec8:	f001 fc20 	bl	970c <assert_post_action>
	__asm__ volatile(
    7ecc:	f385 8811 	msr	BASEPRI, r5
    7ed0:	f3bf 8f6f 	isb	sy
}
    7ed4:	bd38      	pop	{r3, r4, r5, pc}
    7ed6:	bf00      	nop
    7ed8:	200011fc 	.word	0x200011fc
    7edc:	0000ab1d 	.word	0x0000ab1d
    7ee0:	0000a66d 	.word	0x0000a66d

00007ee4 <z_sched_start>:
{
    7ee4:	b538      	push	{r3, r4, r5, lr}
    7ee6:	4604      	mov	r4, r0
	__asm__ volatile(
    7ee8:	f04f 0320 	mov.w	r3, #32
    7eec:	f3ef 8511 	mrs	r5, BASEPRI
    7ef0:	f383 8812 	msr	BASEPRI_MAX, r3
    7ef4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ef8:	4818      	ldr	r0, [pc, #96]	; (7f5c <z_sched_start+0x78>)
    7efa:	f7fe ff47 	bl	6d8c <z_spin_lock_valid>
    7efe:	b940      	cbnz	r0, 7f12 <z_sched_start+0x2e>
    7f00:	4917      	ldr	r1, [pc, #92]	; (7f60 <z_sched_start+0x7c>)
    7f02:	4818      	ldr	r0, [pc, #96]	; (7f64 <z_sched_start+0x80>)
    7f04:	2281      	movs	r2, #129	; 0x81
    7f06:	f001 fb35 	bl	9574 <printk>
    7f0a:	4815      	ldr	r0, [pc, #84]	; (7f60 <z_sched_start+0x7c>)
    7f0c:	2181      	movs	r1, #129	; 0x81
    7f0e:	f001 fbfd 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    7f12:	4812      	ldr	r0, [pc, #72]	; (7f5c <z_sched_start+0x78>)
    7f14:	f7fe ff58 	bl	6dc8 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    7f18:	7b63      	ldrb	r3, [r4, #13]
    7f1a:	075a      	lsls	r2, r3, #29
    7f1c:	d411      	bmi.n	7f42 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f1e:	480f      	ldr	r0, [pc, #60]	; (7f5c <z_sched_start+0x78>)
    7f20:	f7fe ff42 	bl	6da8 <z_spin_unlock_valid>
    7f24:	b940      	cbnz	r0, 7f38 <z_sched_start+0x54>
    7f26:	490e      	ldr	r1, [pc, #56]	; (7f60 <z_sched_start+0x7c>)
    7f28:	480e      	ldr	r0, [pc, #56]	; (7f64 <z_sched_start+0x80>)
    7f2a:	22ac      	movs	r2, #172	; 0xac
    7f2c:	f001 fb22 	bl	9574 <printk>
    7f30:	480b      	ldr	r0, [pc, #44]	; (7f60 <z_sched_start+0x7c>)
    7f32:	21ac      	movs	r1, #172	; 0xac
    7f34:	f001 fbea 	bl	970c <assert_post_action>
	__asm__ volatile(
    7f38:	f385 8811 	msr	BASEPRI, r5
    7f3c:	f3bf 8f6f 	isb	sy
}
    7f40:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7f42:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    7f46:	4620      	mov	r0, r4
    7f48:	7363      	strb	r3, [r4, #13]
    7f4a:	f7ff ff47 	bl	7ddc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7f4e:	4629      	mov	r1, r5
    7f50:	4802      	ldr	r0, [pc, #8]	; (7f5c <z_sched_start+0x78>)
}
    7f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    7f56:	f7ff bd91 	b.w	7a7c <z_reschedule>
    7f5a:	bf00      	nop
    7f5c:	200011fc 	.word	0x200011fc
    7f60:	0000ab1d 	.word	0x0000ab1d
    7f64:	0000a66d 	.word	0x0000a66d

00007f68 <z_thread_timeout>:
{
    7f68:	b570      	push	{r4, r5, r6, lr}
    7f6a:	4604      	mov	r4, r0
	__asm__ volatile(
    7f6c:	f04f 0320 	mov.w	r3, #32
    7f70:	f3ef 8611 	mrs	r6, BASEPRI
    7f74:	f383 8812 	msr	BASEPRI_MAX, r3
    7f78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f7c:	481b      	ldr	r0, [pc, #108]	; (7fec <z_thread_timeout+0x84>)
    7f7e:	f7fe ff05 	bl	6d8c <z_spin_lock_valid>
    7f82:	b940      	cbnz	r0, 7f96 <z_thread_timeout+0x2e>
    7f84:	491a      	ldr	r1, [pc, #104]	; (7ff0 <z_thread_timeout+0x88>)
    7f86:	481b      	ldr	r0, [pc, #108]	; (7ff4 <z_thread_timeout+0x8c>)
    7f88:	2281      	movs	r2, #129	; 0x81
    7f8a:	f001 faf3 	bl	9574 <printk>
    7f8e:	4818      	ldr	r0, [pc, #96]	; (7ff0 <z_thread_timeout+0x88>)
    7f90:	2181      	movs	r1, #129	; 0x81
    7f92:	f001 fbbb 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    7f96:	4815      	ldr	r0, [pc, #84]	; (7fec <z_thread_timeout+0x84>)
    7f98:	f7fe ff16 	bl	6dc8 <z_spin_lock_set_owner>
		if (!killed) {
    7f9c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    7fa0:	f013 0f28 	tst.w	r3, #40	; 0x28
    7fa4:	d110      	bne.n	7fc8 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
    7fa6:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    7faa:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    7fae:	b113      	cbz	r3, 7fb6 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
    7fb0:	4628      	mov	r0, r5
    7fb2:	f7ff fe0b 	bl	7bcc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7fb6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    7fba:	f023 0314 	bic.w	r3, r3, #20
    7fbe:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    7fc2:	4628      	mov	r0, r5
    7fc4:	f7ff ff0a 	bl	7ddc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7fc8:	4808      	ldr	r0, [pc, #32]	; (7fec <z_thread_timeout+0x84>)
    7fca:	f7fe feed 	bl	6da8 <z_spin_unlock_valid>
    7fce:	b940      	cbnz	r0, 7fe2 <z_thread_timeout+0x7a>
    7fd0:	4907      	ldr	r1, [pc, #28]	; (7ff0 <z_thread_timeout+0x88>)
    7fd2:	4808      	ldr	r0, [pc, #32]	; (7ff4 <z_thread_timeout+0x8c>)
    7fd4:	22ac      	movs	r2, #172	; 0xac
    7fd6:	f001 facd 	bl	9574 <printk>
    7fda:	4805      	ldr	r0, [pc, #20]	; (7ff0 <z_thread_timeout+0x88>)
    7fdc:	21ac      	movs	r1, #172	; 0xac
    7fde:	f001 fb95 	bl	970c <assert_post_action>
	__asm__ volatile(
    7fe2:	f386 8811 	msr	BASEPRI, r6
    7fe6:	f3bf 8f6f 	isb	sy
}
    7fea:	bd70      	pop	{r4, r5, r6, pc}
    7fec:	200011fc 	.word	0x200011fc
    7ff0:	0000ab1d 	.word	0x0000ab1d
    7ff4:	0000a66d 	.word	0x0000a66d

00007ff8 <unready_thread>:
{
    7ff8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    7ffa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7ffe:	7b43      	ldrb	r3, [r0, #13]
    8000:	2a00      	cmp	r2, #0
{
    8002:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    8004:	da06      	bge.n	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    800a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    800c:	4601      	mov	r1, r0
    800e:	4806      	ldr	r0, [pc, #24]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    8010:	f7ff fdbe 	bl	7b90 <z_priq_dumb_remove>
	update_cache(thread == _current);
    8014:	4b05      	ldr	r3, [pc, #20]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    8016:	6898      	ldr	r0, [r3, #8]
    8018:	1b03      	subs	r3, r0, r4
    801a:	4258      	negs	r0, r3
}
    801c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    8020:	4158      	adcs	r0, r3
    8022:	f7ff bdf1 	b.w	7c08 <update_cache>
    8026:	bf00      	nop
    8028:	200011dc 	.word	0x200011dc
    802c:	200011bc 	.word	0x200011bc

00008030 <add_to_waitq_locked>:
{
    8030:	b538      	push	{r3, r4, r5, lr}
    8032:	4604      	mov	r4, r0
    8034:	460d      	mov	r5, r1
	unready_thread(thread);
    8036:	f7ff ffdf 	bl	7ff8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    803a:	7b63      	ldrb	r3, [r4, #13]
    803c:	f043 0302 	orr.w	r3, r3, #2
    8040:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    8042:	b315      	cbz	r5, 808a <add_to_waitq_locked+0x5a>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8044:	4b17      	ldr	r3, [pc, #92]	; (80a4 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    8046:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8048:	429c      	cmp	r4, r3
    804a:	d108      	bne.n	805e <add_to_waitq_locked+0x2e>
    804c:	4916      	ldr	r1, [pc, #88]	; (80a8 <add_to_waitq_locked+0x78>)
    804e:	4817      	ldr	r0, [pc, #92]	; (80ac <add_to_waitq_locked+0x7c>)
    8050:	22ba      	movs	r2, #186	; 0xba
    8052:	f001 fa8f 	bl	9574 <printk>
    8056:	4814      	ldr	r0, [pc, #80]	; (80a8 <add_to_waitq_locked+0x78>)
    8058:	21ba      	movs	r1, #186	; 0xba
    805a:	f001 fb57 	bl	970c <assert_post_action>
	return list->head == list;
    805e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8060:	429d      	cmp	r5, r3
    8062:	bf08      	it	eq
    8064:	2300      	moveq	r3, #0
    8066:	2b00      	cmp	r3, #0
    8068:	bf38      	it	cc
    806a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    806c:	b19b      	cbz	r3, 8096 <add_to_waitq_locked+0x66>
	int32_t b1 = thread_1->base.prio;
    806e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8072:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    8076:	4291      	cmp	r1, r2
    8078:	d008      	beq.n	808c <add_to_waitq_locked+0x5c>
		return b2 - b1;
    807a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    807c:	2a00      	cmp	r2, #0
    807e:	dd05      	ble.n	808c <add_to_waitq_locked+0x5c>
	sys_dnode_t *const prev = successor->prev;
    8080:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8082:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8086:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8088:	605c      	str	r4, [r3, #4]
}
    808a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    808c:	686a      	ldr	r2, [r5, #4]
    808e:	4293      	cmp	r3, r2
    8090:	d001      	beq.n	8096 <add_to_waitq_locked+0x66>
    8092:	681b      	ldr	r3, [r3, #0]
    8094:	e7ea      	b.n	806c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    8096:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    8098:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    809c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    809e:	606c      	str	r4, [r5, #4]
    80a0:	e7f3      	b.n	808a <add_to_waitq_locked+0x5a>
    80a2:	bf00      	nop
    80a4:	20000788 	.word	0x20000788
    80a8:	0000b7e6 	.word	0x0000b7e6
    80ac:	0000a66d 	.word	0x0000a66d

000080b0 <pend>:
{
    80b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80b4:	4604      	mov	r4, r0
    80b6:	460d      	mov	r5, r1
    80b8:	4616      	mov	r6, r2
    80ba:	461f      	mov	r7, r3
	__asm__ volatile(
    80bc:	f04f 0320 	mov.w	r3, #32
    80c0:	f3ef 8811 	mrs	r8, BASEPRI
    80c4:	f383 8812 	msr	BASEPRI_MAX, r3
    80c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    80cc:	481a      	ldr	r0, [pc, #104]	; (8138 <pend+0x88>)
    80ce:	f7fe fe5d 	bl	6d8c <z_spin_lock_valid>
    80d2:	b940      	cbnz	r0, 80e6 <pend+0x36>
    80d4:	4919      	ldr	r1, [pc, #100]	; (813c <pend+0x8c>)
    80d6:	481a      	ldr	r0, [pc, #104]	; (8140 <pend+0x90>)
    80d8:	2281      	movs	r2, #129	; 0x81
    80da:	f001 fa4b 	bl	9574 <printk>
    80de:	4817      	ldr	r0, [pc, #92]	; (813c <pend+0x8c>)
    80e0:	2181      	movs	r1, #129	; 0x81
    80e2:	f001 fb13 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    80e6:	4814      	ldr	r0, [pc, #80]	; (8138 <pend+0x88>)
    80e8:	f7fe fe6e 	bl	6dc8 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    80ec:	4620      	mov	r0, r4
    80ee:	4629      	mov	r1, r5
    80f0:	f7ff ff9e 	bl	8030 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    80f4:	4810      	ldr	r0, [pc, #64]	; (8138 <pend+0x88>)
    80f6:	f7fe fe57 	bl	6da8 <z_spin_unlock_valid>
    80fa:	b940      	cbnz	r0, 810e <pend+0x5e>
    80fc:	490f      	ldr	r1, [pc, #60]	; (813c <pend+0x8c>)
    80fe:	4810      	ldr	r0, [pc, #64]	; (8140 <pend+0x90>)
    8100:	22ac      	movs	r2, #172	; 0xac
    8102:	f001 fa37 	bl	9574 <printk>
    8106:	480d      	ldr	r0, [pc, #52]	; (813c <pend+0x8c>)
    8108:	21ac      	movs	r1, #172	; 0xac
    810a:	f001 faff 	bl	970c <assert_post_action>
	__asm__ volatile(
    810e:	f388 8811 	msr	BASEPRI, r8
    8112:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8116:	1c7b      	adds	r3, r7, #1
    8118:	bf08      	it	eq
    811a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    811e:	d008      	beq.n	8132 <pend+0x82>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8120:	4632      	mov	r2, r6
    8122:	463b      	mov	r3, r7
    8124:	f104 0018 	add.w	r0, r4, #24
    8128:	4906      	ldr	r1, [pc, #24]	; (8144 <pend+0x94>)
}
    812a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    812e:	f000 bca1 	b.w	8a74 <z_add_timeout>
    8132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8136:	bf00      	nop
    8138:	200011fc 	.word	0x200011fc
    813c:	0000ab1d 	.word	0x0000ab1d
    8140:	0000a66d 	.word	0x0000a66d
    8144:	00007f69 	.word	0x00007f69

00008148 <z_pend_curr>:
{
    8148:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    814a:	4b0e      	ldr	r3, [pc, #56]	; (8184 <z_pend_curr+0x3c>)
{
    814c:	4605      	mov	r5, r0
	pending_current = _current;
    814e:	6898      	ldr	r0, [r3, #8]
    8150:	4b0d      	ldr	r3, [pc, #52]	; (8188 <z_pend_curr+0x40>)
{
    8152:	460c      	mov	r4, r1
	pending_current = _current;
    8154:	6018      	str	r0, [r3, #0]
{
    8156:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    8158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    815c:	f7ff ffa8 	bl	80b0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8160:	4628      	mov	r0, r5
    8162:	f7fe fe21 	bl	6da8 <z_spin_unlock_valid>
    8166:	b940      	cbnz	r0, 817a <z_pend_curr+0x32>
    8168:	4908      	ldr	r1, [pc, #32]	; (818c <z_pend_curr+0x44>)
    816a:	4809      	ldr	r0, [pc, #36]	; (8190 <z_pend_curr+0x48>)
    816c:	22c3      	movs	r2, #195	; 0xc3
    816e:	f001 fa01 	bl	9574 <printk>
    8172:	4806      	ldr	r0, [pc, #24]	; (818c <z_pend_curr+0x44>)
    8174:	21c3      	movs	r1, #195	; 0xc3
    8176:	f001 fac9 	bl	970c <assert_post_action>
    817a:	4620      	mov	r0, r4
}
    817c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8180:	f7fa bd8e 	b.w	2ca0 <arch_swap>
    8184:	200011bc 	.word	0x200011bc
    8188:	200011f8 	.word	0x200011f8
    818c:	0000ab1d 	.word	0x0000ab1d
    8190:	0000a66d 	.word	0x0000a66d

00008194 <z_set_prio>:
{
    8194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8196:	4604      	mov	r4, r0
    8198:	460e      	mov	r6, r1
	__asm__ volatile(
    819a:	f04f 0320 	mov.w	r3, #32
    819e:	f3ef 8711 	mrs	r7, BASEPRI
    81a2:	f383 8812 	msr	BASEPRI_MAX, r3
    81a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81aa:	4837      	ldr	r0, [pc, #220]	; (8288 <z_set_prio+0xf4>)
    81ac:	f7fe fdee 	bl	6d8c <z_spin_lock_valid>
    81b0:	b940      	cbnz	r0, 81c4 <z_set_prio+0x30>
    81b2:	4936      	ldr	r1, [pc, #216]	; (828c <z_set_prio+0xf8>)
    81b4:	4836      	ldr	r0, [pc, #216]	; (8290 <z_set_prio+0xfc>)
    81b6:	2281      	movs	r2, #129	; 0x81
    81b8:	f001 f9dc 	bl	9574 <printk>
    81bc:	4833      	ldr	r0, [pc, #204]	; (828c <z_set_prio+0xf8>)
    81be:	2181      	movs	r1, #129	; 0x81
    81c0:	f001 faa4 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    81c4:	4830      	ldr	r0, [pc, #192]	; (8288 <z_set_prio+0xf4>)
    81c6:	f7fe fdff 	bl	6dc8 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    81ca:	7b63      	ldrb	r3, [r4, #13]
    81cc:	06da      	lsls	r2, r3, #27
    81ce:	b276      	sxtb	r6, r6
    81d0:	d156      	bne.n	8280 <z_set_prio+0xec>
	return !sys_dnode_is_linked(&to->node);
    81d2:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    81d4:	2d00      	cmp	r5, #0
    81d6:	d153      	bne.n	8280 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    81d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    81dc:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    81de:	482d      	ldr	r0, [pc, #180]	; (8294 <z_set_prio+0x100>)
    81e0:	4621      	mov	r1, r4
    81e2:	f7ff fcd5 	bl	7b90 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    81e6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    81e8:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    81ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    81ee:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    81f0:	4b29      	ldr	r3, [pc, #164]	; (8298 <z_set_prio+0x104>)
    81f2:	429c      	cmp	r4, r3
    81f4:	d108      	bne.n	8208 <z_set_prio+0x74>
    81f6:	4929      	ldr	r1, [pc, #164]	; (829c <z_set_prio+0x108>)
    81f8:	4825      	ldr	r0, [pc, #148]	; (8290 <z_set_prio+0xfc>)
    81fa:	22ba      	movs	r2, #186	; 0xba
    81fc:	f001 f9ba 	bl	9574 <printk>
    8200:	4826      	ldr	r0, [pc, #152]	; (829c <z_set_prio+0x108>)
    8202:	21ba      	movs	r1, #186	; 0xba
    8204:	f001 fa82 	bl	970c <assert_post_action>
	return list->head == list;
    8208:	4925      	ldr	r1, [pc, #148]	; (82a0 <z_set_prio+0x10c>)
    820a:	460b      	mov	r3, r1
    820c:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8210:	4298      	cmp	r0, r3
    8212:	bf18      	it	ne
    8214:	4605      	movne	r5, r0
    8216:	2d00      	cmp	r5, #0
    8218:	461a      	mov	r2, r3
    821a:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    821c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    821e:	bf38      	it	cc
    8220:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8222:	b343      	cbz	r3, 8276 <z_set_prio+0xe2>
	int32_t b1 = thread_1->base.prio;
    8224:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8228:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    822c:	4286      	cmp	r6, r0
    822e:	d01e      	beq.n	826e <z_set_prio+0xda>
		return b2 - b1;
    8230:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    8232:	2800      	cmp	r0, #0
    8234:	dd1b      	ble.n	826e <z_set_prio+0xda>
	sys_dnode_t *const prev = successor->prev;
    8236:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8238:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    823c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    823e:	605c      	str	r4, [r3, #4]
			update_cache(1);
    8240:	2001      	movs	r0, #1
    8242:	f7ff fce1 	bl	7c08 <update_cache>
    8246:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8248:	480f      	ldr	r0, [pc, #60]	; (8288 <z_set_prio+0xf4>)
    824a:	f7fe fdad 	bl	6da8 <z_spin_unlock_valid>
    824e:	b940      	cbnz	r0, 8262 <z_set_prio+0xce>
    8250:	490e      	ldr	r1, [pc, #56]	; (828c <z_set_prio+0xf8>)
    8252:	480f      	ldr	r0, [pc, #60]	; (8290 <z_set_prio+0xfc>)
    8254:	22ac      	movs	r2, #172	; 0xac
    8256:	f001 f98d 	bl	9574 <printk>
    825a:	480c      	ldr	r0, [pc, #48]	; (828c <z_set_prio+0xf8>)
    825c:	21ac      	movs	r1, #172	; 0xac
    825e:	f001 fa55 	bl	970c <assert_post_action>
	__asm__ volatile(
    8262:	f387 8811 	msr	BASEPRI, r7
    8266:	f3bf 8f6f 	isb	sy
}
    826a:	4620      	mov	r0, r4
    826c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    826e:	42ab      	cmp	r3, r5
    8270:	d001      	beq.n	8276 <z_set_prio+0xe2>
    8272:	681b      	ldr	r3, [r3, #0]
    8274:	e7d5      	b.n	8222 <z_set_prio+0x8e>
	node->prev = tail;
    8276:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    827a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    827c:	624c      	str	r4, [r1, #36]	; 0x24
}
    827e:	e7df      	b.n	8240 <z_set_prio+0xac>
			thread->base.prio = prio;
    8280:	73a6      	strb	r6, [r4, #14]
    8282:	2400      	movs	r4, #0
    8284:	e7e0      	b.n	8248 <z_set_prio+0xb4>
    8286:	bf00      	nop
    8288:	200011fc 	.word	0x200011fc
    828c:	0000ab1d 	.word	0x0000ab1d
    8290:	0000a66d 	.word	0x0000a66d
    8294:	200011dc 	.word	0x200011dc
    8298:	20000788 	.word	0x20000788
    829c:	0000b7e6 	.word	0x0000b7e6
    82a0:	200011bc 	.word	0x200011bc

000082a4 <z_impl_k_thread_suspend>:
{
    82a4:	b570      	push	{r4, r5, r6, lr}
    82a6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    82a8:	3018      	adds	r0, #24
    82aa:	f000 fc9d 	bl	8be8 <z_abort_timeout>
	__asm__ volatile(
    82ae:	f04f 0320 	mov.w	r3, #32
    82b2:	f3ef 8611 	mrs	r6, BASEPRI
    82b6:	f383 8812 	msr	BASEPRI_MAX, r3
    82ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    82be:	4820      	ldr	r0, [pc, #128]	; (8340 <z_impl_k_thread_suspend+0x9c>)
    82c0:	f7fe fd64 	bl	6d8c <z_spin_lock_valid>
    82c4:	b940      	cbnz	r0, 82d8 <z_impl_k_thread_suspend+0x34>
    82c6:	491f      	ldr	r1, [pc, #124]	; (8344 <z_impl_k_thread_suspend+0xa0>)
    82c8:	481f      	ldr	r0, [pc, #124]	; (8348 <z_impl_k_thread_suspend+0xa4>)
    82ca:	2281      	movs	r2, #129	; 0x81
    82cc:	f001 f952 	bl	9574 <printk>
    82d0:	481c      	ldr	r0, [pc, #112]	; (8344 <z_impl_k_thread_suspend+0xa0>)
    82d2:	2181      	movs	r1, #129	; 0x81
    82d4:	f001 fa1a 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    82d8:	4819      	ldr	r0, [pc, #100]	; (8340 <z_impl_k_thread_suspend+0x9c>)
    82da:	f7fe fd75 	bl	6dc8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    82de:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    82e2:	7b63      	ldrb	r3, [r4, #13]
    82e4:	2a00      	cmp	r2, #0
    82e6:	da06      	bge.n	82f6 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    82e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    82ec:	4817      	ldr	r0, [pc, #92]	; (834c <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    82ee:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    82f0:	4621      	mov	r1, r4
    82f2:	f7ff fc4d 	bl	7b90 <z_priq_dumb_remove>
		update_cache(thread == _current);
    82f6:	4d16      	ldr	r5, [pc, #88]	; (8350 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    82f8:	7b63      	ldrb	r3, [r4, #13]
    82fa:	68a8      	ldr	r0, [r5, #8]
    82fc:	f043 0310 	orr.w	r3, r3, #16
    8300:	7363      	strb	r3, [r4, #13]
    8302:	1b03      	subs	r3, r0, r4
    8304:	4258      	negs	r0, r3
    8306:	4158      	adcs	r0, r3
    8308:	f7ff fc7e 	bl	7c08 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    830c:	480c      	ldr	r0, [pc, #48]	; (8340 <z_impl_k_thread_suspend+0x9c>)
    830e:	f7fe fd4b 	bl	6da8 <z_spin_unlock_valid>
    8312:	b940      	cbnz	r0, 8326 <z_impl_k_thread_suspend+0x82>
    8314:	490b      	ldr	r1, [pc, #44]	; (8344 <z_impl_k_thread_suspend+0xa0>)
    8316:	480c      	ldr	r0, [pc, #48]	; (8348 <z_impl_k_thread_suspend+0xa4>)
    8318:	22ac      	movs	r2, #172	; 0xac
    831a:	f001 f92b 	bl	9574 <printk>
    831e:	4809      	ldr	r0, [pc, #36]	; (8344 <z_impl_k_thread_suspend+0xa0>)
    8320:	21ac      	movs	r1, #172	; 0xac
    8322:	f001 f9f3 	bl	970c <assert_post_action>
	__asm__ volatile(
    8326:	f386 8811 	msr	BASEPRI, r6
    832a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    832e:	68ab      	ldr	r3, [r5, #8]
    8330:	42a3      	cmp	r3, r4
    8332:	d103      	bne.n	833c <z_impl_k_thread_suspend+0x98>
}
    8334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8338:	f001 be8f 	b.w	a05a <z_reschedule_unlocked>
}
    833c:	bd70      	pop	{r4, r5, r6, pc}
    833e:	bf00      	nop
    8340:	200011fc 	.word	0x200011fc
    8344:	0000ab1d 	.word	0x0000ab1d
    8348:	0000a66d 	.word	0x0000a66d
    834c:	200011dc 	.word	0x200011dc
    8350:	200011bc 	.word	0x200011bc

00008354 <k_sched_unlock>:
{
    8354:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8356:	f04f 0320 	mov.w	r3, #32
    835a:	f3ef 8511 	mrs	r5, BASEPRI
    835e:	f383 8812 	msr	BASEPRI_MAX, r3
    8362:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8366:	4824      	ldr	r0, [pc, #144]	; (83f8 <k_sched_unlock+0xa4>)
    8368:	f7fe fd10 	bl	6d8c <z_spin_lock_valid>
    836c:	b940      	cbnz	r0, 8380 <k_sched_unlock+0x2c>
    836e:	4923      	ldr	r1, [pc, #140]	; (83fc <k_sched_unlock+0xa8>)
    8370:	4823      	ldr	r0, [pc, #140]	; (8400 <k_sched_unlock+0xac>)
    8372:	2281      	movs	r2, #129	; 0x81
    8374:	f001 f8fe 	bl	9574 <printk>
    8378:	4820      	ldr	r0, [pc, #128]	; (83fc <k_sched_unlock+0xa8>)
    837a:	2181      	movs	r1, #129	; 0x81
    837c:	f001 f9c6 	bl	970c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    8380:	4c20      	ldr	r4, [pc, #128]	; (8404 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
    8382:	481d      	ldr	r0, [pc, #116]	; (83f8 <k_sched_unlock+0xa4>)
    8384:	f7fe fd20 	bl	6dc8 <z_spin_lock_set_owner>
    8388:	68a2      	ldr	r2, [r4, #8]
    838a:	7bd2      	ldrb	r2, [r2, #15]
    838c:	b952      	cbnz	r2, 83a4 <k_sched_unlock+0x50>
    838e:	491e      	ldr	r1, [pc, #120]	; (8408 <k_sched_unlock+0xb4>)
    8390:	481b      	ldr	r0, [pc, #108]	; (8400 <k_sched_unlock+0xac>)
    8392:	f240 3285 	movw	r2, #901	; 0x385
    8396:	f001 f8ed 	bl	9574 <printk>
    839a:	481b      	ldr	r0, [pc, #108]	; (8408 <k_sched_unlock+0xb4>)
    839c:	f240 3185 	movw	r1, #901	; 0x385
    83a0:	f001 f9b4 	bl	970c <assert_post_action>
    83a4:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    83a8:	b153      	cbz	r3, 83c0 <k_sched_unlock+0x6c>
    83aa:	4917      	ldr	r1, [pc, #92]	; (8408 <k_sched_unlock+0xb4>)
    83ac:	4814      	ldr	r0, [pc, #80]	; (8400 <k_sched_unlock+0xac>)
    83ae:	f240 3286 	movw	r2, #902	; 0x386
    83b2:	f001 f8df 	bl	9574 <printk>
    83b6:	4814      	ldr	r0, [pc, #80]	; (8408 <k_sched_unlock+0xb4>)
    83b8:	f240 3186 	movw	r1, #902	; 0x386
    83bc:	f001 f9a6 	bl	970c <assert_post_action>
		++_current->base.sched_locked;
    83c0:	68a2      	ldr	r2, [r4, #8]
    83c2:	7bd3      	ldrb	r3, [r2, #15]
    83c4:	3301      	adds	r3, #1
		update_cache(0);
    83c6:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    83c8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    83ca:	f7ff fc1d 	bl	7c08 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    83ce:	480a      	ldr	r0, [pc, #40]	; (83f8 <k_sched_unlock+0xa4>)
    83d0:	f7fe fcea 	bl	6da8 <z_spin_unlock_valid>
    83d4:	b940      	cbnz	r0, 83e8 <k_sched_unlock+0x94>
    83d6:	4909      	ldr	r1, [pc, #36]	; (83fc <k_sched_unlock+0xa8>)
    83d8:	4809      	ldr	r0, [pc, #36]	; (8400 <k_sched_unlock+0xac>)
    83da:	22ac      	movs	r2, #172	; 0xac
    83dc:	f001 f8ca 	bl	9574 <printk>
    83e0:	4806      	ldr	r0, [pc, #24]	; (83fc <k_sched_unlock+0xa8>)
    83e2:	21ac      	movs	r1, #172	; 0xac
    83e4:	f001 f992 	bl	970c <assert_post_action>
	__asm__ volatile(
    83e8:	f385 8811 	msr	BASEPRI, r5
    83ec:	f3bf 8f6f 	isb	sy
}
    83f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    83f4:	f001 be31 	b.w	a05a <z_reschedule_unlocked>
    83f8:	200011fc 	.word	0x200011fc
    83fc:	0000ab1d 	.word	0x0000ab1d
    8400:	0000a66d 	.word	0x0000a66d
    8404:	200011bc 	.word	0x200011bc
    8408:	0000b7e6 	.word	0x0000b7e6

0000840c <z_unpend1_no_timeout>:
{
    840c:	b538      	push	{r3, r4, r5, lr}
    840e:	4604      	mov	r4, r0
	__asm__ volatile(
    8410:	f04f 0320 	mov.w	r3, #32
    8414:	f3ef 8511 	mrs	r5, BASEPRI
    8418:	f383 8812 	msr	BASEPRI_MAX, r3
    841c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8420:	4814      	ldr	r0, [pc, #80]	; (8474 <z_unpend1_no_timeout+0x68>)
    8422:	f7fe fcb3 	bl	6d8c <z_spin_lock_valid>
    8426:	b940      	cbnz	r0, 843a <z_unpend1_no_timeout+0x2e>
    8428:	4913      	ldr	r1, [pc, #76]	; (8478 <z_unpend1_no_timeout+0x6c>)
    842a:	4814      	ldr	r0, [pc, #80]	; (847c <z_unpend1_no_timeout+0x70>)
    842c:	2281      	movs	r2, #129	; 0x81
    842e:	f001 f8a1 	bl	9574 <printk>
    8432:	4811      	ldr	r0, [pc, #68]	; (8478 <z_unpend1_no_timeout+0x6c>)
    8434:	2181      	movs	r1, #129	; 0x81
    8436:	f001 f969 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    843a:	480e      	ldr	r0, [pc, #56]	; (8474 <z_unpend1_no_timeout+0x68>)
    843c:	f7fe fcc4 	bl	6dc8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    8440:	4620      	mov	r0, r4
    8442:	f001 fe14 	bl	a06e <z_priq_dumb_best>
		if (thread != NULL) {
    8446:	4604      	mov	r4, r0
    8448:	b108      	cbz	r0, 844e <z_unpend1_no_timeout+0x42>
			unpend_thread_no_timeout(thread);
    844a:	f7ff fbbf 	bl	7bcc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    844e:	4809      	ldr	r0, [pc, #36]	; (8474 <z_unpend1_no_timeout+0x68>)
    8450:	f7fe fcaa 	bl	6da8 <z_spin_unlock_valid>
    8454:	b940      	cbnz	r0, 8468 <z_unpend1_no_timeout+0x5c>
    8456:	4908      	ldr	r1, [pc, #32]	; (8478 <z_unpend1_no_timeout+0x6c>)
    8458:	4808      	ldr	r0, [pc, #32]	; (847c <z_unpend1_no_timeout+0x70>)
    845a:	22ac      	movs	r2, #172	; 0xac
    845c:	f001 f88a 	bl	9574 <printk>
    8460:	4805      	ldr	r0, [pc, #20]	; (8478 <z_unpend1_no_timeout+0x6c>)
    8462:	21ac      	movs	r1, #172	; 0xac
    8464:	f001 f952 	bl	970c <assert_post_action>
	__asm__ volatile(
    8468:	f385 8811 	msr	BASEPRI, r5
    846c:	f3bf 8f6f 	isb	sy
}
    8470:	4620      	mov	r0, r4
    8472:	bd38      	pop	{r3, r4, r5, pc}
    8474:	200011fc 	.word	0x200011fc
    8478:	0000ab1d 	.word	0x0000ab1d
    847c:	0000a66d 	.word	0x0000a66d

00008480 <z_unpend_first_thread>:
{
    8480:	b538      	push	{r3, r4, r5, lr}
    8482:	4604      	mov	r4, r0
	__asm__ volatile(
    8484:	f04f 0320 	mov.w	r3, #32
    8488:	f3ef 8511 	mrs	r5, BASEPRI
    848c:	f383 8812 	msr	BASEPRI_MAX, r3
    8490:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8494:	4816      	ldr	r0, [pc, #88]	; (84f0 <z_unpend_first_thread+0x70>)
    8496:	f7fe fc79 	bl	6d8c <z_spin_lock_valid>
    849a:	b940      	cbnz	r0, 84ae <z_unpend_first_thread+0x2e>
    849c:	4915      	ldr	r1, [pc, #84]	; (84f4 <z_unpend_first_thread+0x74>)
    849e:	4816      	ldr	r0, [pc, #88]	; (84f8 <z_unpend_first_thread+0x78>)
    84a0:	2281      	movs	r2, #129	; 0x81
    84a2:	f001 f867 	bl	9574 <printk>
    84a6:	4813      	ldr	r0, [pc, #76]	; (84f4 <z_unpend_first_thread+0x74>)
    84a8:	2181      	movs	r1, #129	; 0x81
    84aa:	f001 f92f 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    84ae:	4810      	ldr	r0, [pc, #64]	; (84f0 <z_unpend_first_thread+0x70>)
    84b0:	f7fe fc8a 	bl	6dc8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    84b4:	4620      	mov	r0, r4
    84b6:	f001 fdda 	bl	a06e <z_priq_dumb_best>
		if (thread != NULL) {
    84ba:	4604      	mov	r4, r0
    84bc:	b128      	cbz	r0, 84ca <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
    84be:	f7ff fb85 	bl	7bcc <unpend_thread_no_timeout>
    84c2:	f104 0018 	add.w	r0, r4, #24
    84c6:	f000 fb8f 	bl	8be8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    84ca:	4809      	ldr	r0, [pc, #36]	; (84f0 <z_unpend_first_thread+0x70>)
    84cc:	f7fe fc6c 	bl	6da8 <z_spin_unlock_valid>
    84d0:	b940      	cbnz	r0, 84e4 <z_unpend_first_thread+0x64>
    84d2:	4908      	ldr	r1, [pc, #32]	; (84f4 <z_unpend_first_thread+0x74>)
    84d4:	4808      	ldr	r0, [pc, #32]	; (84f8 <z_unpend_first_thread+0x78>)
    84d6:	22ac      	movs	r2, #172	; 0xac
    84d8:	f001 f84c 	bl	9574 <printk>
    84dc:	4805      	ldr	r0, [pc, #20]	; (84f4 <z_unpend_first_thread+0x74>)
    84de:	21ac      	movs	r1, #172	; 0xac
    84e0:	f001 f914 	bl	970c <assert_post_action>
	__asm__ volatile(
    84e4:	f385 8811 	msr	BASEPRI, r5
    84e8:	f3bf 8f6f 	isb	sy
}
    84ec:	4620      	mov	r0, r4
    84ee:	bd38      	pop	{r3, r4, r5, pc}
    84f0:	200011fc 	.word	0x200011fc
    84f4:	0000ab1d 	.word	0x0000ab1d
    84f8:	0000a66d 	.word	0x0000a66d

000084fc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    84fc:	4b04      	ldr	r3, [pc, #16]	; (8510 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    84fe:	2100      	movs	r1, #0
    8500:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    8504:	e9c3 2208 	strd	r2, r2, [r3, #32]
    8508:	4608      	mov	r0, r1
    850a:	f7ff ba2d 	b.w	7968 <k_sched_time_slice_set>
    850e:	bf00      	nop
    8510:	200011bc 	.word	0x200011bc

00008514 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    8514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8516:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    851a:	b153      	cbz	r3, 8532 <z_impl_k_yield+0x1e>
    851c:	4939      	ldr	r1, [pc, #228]	; (8604 <z_impl_k_yield+0xf0>)
    851e:	483a      	ldr	r0, [pc, #232]	; (8608 <z_impl_k_yield+0xf4>)
    8520:	f240 42dc 	movw	r2, #1244	; 0x4dc
    8524:	f001 f826 	bl	9574 <printk>
    8528:	4836      	ldr	r0, [pc, #216]	; (8604 <z_impl_k_yield+0xf0>)
    852a:	f240 41dc 	movw	r1, #1244	; 0x4dc
    852e:	f001 f8ed 	bl	970c <assert_post_action>
	__asm__ volatile(
    8532:	f04f 0320 	mov.w	r3, #32
    8536:	f3ef 8611 	mrs	r6, BASEPRI
    853a:	f383 8812 	msr	BASEPRI_MAX, r3
    853e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8542:	4832      	ldr	r0, [pc, #200]	; (860c <z_impl_k_yield+0xf8>)
    8544:	f7fe fc22 	bl	6d8c <z_spin_lock_valid>
    8548:	b940      	cbnz	r0, 855c <z_impl_k_yield+0x48>
    854a:	4931      	ldr	r1, [pc, #196]	; (8610 <z_impl_k_yield+0xfc>)
    854c:	482e      	ldr	r0, [pc, #184]	; (8608 <z_impl_k_yield+0xf4>)
    854e:	2281      	movs	r2, #129	; 0x81
    8550:	f001 f810 	bl	9574 <printk>
    8554:	482e      	ldr	r0, [pc, #184]	; (8610 <z_impl_k_yield+0xfc>)
    8556:	2181      	movs	r1, #129	; 0x81
    8558:	f001 f8d8 	bl	970c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    855c:	4d2d      	ldr	r5, [pc, #180]	; (8614 <z_impl_k_yield+0x100>)
	z_spin_lock_set_owner(l);
    855e:	482b      	ldr	r0, [pc, #172]	; (860c <z_impl_k_yield+0xf8>)
    8560:	f7fe fc32 	bl	6dc8 <z_spin_lock_set_owner>
    8564:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8566:	7b4b      	ldrb	r3, [r1, #13]
    8568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    856c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    856e:	f105 0020 	add.w	r0, r5, #32
    8572:	f7ff fb0d 	bl	7b90 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    8576:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8578:	7b63      	ldrb	r3, [r4, #13]
    857a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    857e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8580:	4b25      	ldr	r3, [pc, #148]	; (8618 <z_impl_k_yield+0x104>)
    8582:	429c      	cmp	r4, r3
    8584:	d108      	bne.n	8598 <z_impl_k_yield+0x84>
    8586:	491f      	ldr	r1, [pc, #124]	; (8604 <z_impl_k_yield+0xf0>)
    8588:	481f      	ldr	r0, [pc, #124]	; (8608 <z_impl_k_yield+0xf4>)
    858a:	22ba      	movs	r2, #186	; 0xba
    858c:	f000 fff2 	bl	9574 <printk>
    8590:	481c      	ldr	r0, [pc, #112]	; (8604 <z_impl_k_yield+0xf0>)
    8592:	21ba      	movs	r1, #186	; 0xba
    8594:	f001 f8ba 	bl	970c <assert_post_action>
	return list->head == list;
    8598:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    859a:	4820      	ldr	r0, [pc, #128]	; (861c <z_impl_k_yield+0x108>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    859c:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    859e:	4283      	cmp	r3, r0
    85a0:	bf08      	it	eq
    85a2:	2300      	moveq	r3, #0
    85a4:	2b00      	cmp	r3, #0
    85a6:	bf38      	it	cc
    85a8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    85aa:	b333      	cbz	r3, 85fa <z_impl_k_yield+0xe6>
	int32_t b1 = thread_1->base.prio;
    85ac:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    85b0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    85b4:	4297      	cmp	r7, r2
    85b6:	d01c      	beq.n	85f2 <z_impl_k_yield+0xde>
		return b2 - b1;
    85b8:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    85ba:	2a00      	cmp	r2, #0
    85bc:	dd19      	ble.n	85f2 <z_impl_k_yield+0xde>
	sys_dnode_t *const prev = successor->prev;
    85be:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    85c0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    85c4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    85c6:	605c      	str	r4, [r3, #4]
	update_cache(1);
    85c8:	2001      	movs	r0, #1
    85ca:	f7ff fb1d 	bl	7c08 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85ce:	480f      	ldr	r0, [pc, #60]	; (860c <z_impl_k_yield+0xf8>)
    85d0:	f7fe fbea 	bl	6da8 <z_spin_unlock_valid>
    85d4:	b940      	cbnz	r0, 85e8 <z_impl_k_yield+0xd4>
    85d6:	490e      	ldr	r1, [pc, #56]	; (8610 <z_impl_k_yield+0xfc>)
    85d8:	480b      	ldr	r0, [pc, #44]	; (8608 <z_impl_k_yield+0xf4>)
    85da:	22c3      	movs	r2, #195	; 0xc3
    85dc:	f000 ffca 	bl	9574 <printk>
    85e0:	480b      	ldr	r0, [pc, #44]	; (8610 <z_impl_k_yield+0xfc>)
    85e2:	21c3      	movs	r1, #195	; 0xc3
    85e4:	f001 f892 	bl	970c <assert_post_action>
    85e8:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    85ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    85ee:	f7fa bb57 	b.w	2ca0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    85f2:	428b      	cmp	r3, r1
    85f4:	d001      	beq.n	85fa <z_impl_k_yield+0xe6>
    85f6:	681b      	ldr	r3, [r3, #0]
    85f8:	e7d7      	b.n	85aa <z_impl_k_yield+0x96>
	node->prev = tail;
    85fa:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    85fe:	600c      	str	r4, [r1, #0]
	list->tail = node;
    8600:	626c      	str	r4, [r5, #36]	; 0x24
}
    8602:	e7e1      	b.n	85c8 <z_impl_k_yield+0xb4>
    8604:	0000b7e6 	.word	0x0000b7e6
    8608:	0000a66d 	.word	0x0000a66d
    860c:	200011fc 	.word	0x200011fc
    8610:	0000ab1d 	.word	0x0000ab1d
    8614:	200011bc 	.word	0x200011bc
    8618:	20000788 	.word	0x20000788
    861c:	200011dc 	.word	0x200011dc

00008620 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    8620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8624:	4604      	mov	r4, r0
    8626:	460d      	mov	r5, r1
    8628:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    862c:	b153      	cbz	r3, 8644 <z_tick_sleep+0x24>
    862e:	493c      	ldr	r1, [pc, #240]	; (8720 <z_tick_sleep+0x100>)
    8630:	483c      	ldr	r0, [pc, #240]	; (8724 <z_tick_sleep+0x104>)
    8632:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
    8636:	f000 ff9d 	bl	9574 <printk>
    863a:	4839      	ldr	r0, [pc, #228]	; (8720 <z_tick_sleep+0x100>)
    863c:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    8640:	f001 f864 	bl	970c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8644:	ea54 0305 	orrs.w	r3, r4, r5
    8648:	d104      	bne.n	8654 <z_tick_sleep+0x34>
	z_impl_k_yield();
    864a:	f7ff ff63 	bl	8514 <z_impl_k_yield>
		k_yield();
		return 0;
    864e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    8650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    8654:	f06f 0301 	mvn.w	r3, #1
    8658:	1b1e      	subs	r6, r3, r4
    865a:	f04f 33ff 	mov.w	r3, #4294967295
    865e:	eb63 0705 	sbc.w	r7, r3, r5
    8662:	2e01      	cmp	r6, #1
    8664:	f177 0300 	sbcs.w	r3, r7, #0
    8668:	da56      	bge.n	8718 <z_tick_sleep+0xf8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    866a:	f001 fd0a 	bl	a082 <sys_clock_tick_get_32>
    866e:	1906      	adds	r6, r0, r4
    8670:	f04f 0320 	mov.w	r3, #32
    8674:	f3ef 8811 	mrs	r8, BASEPRI
    8678:	f383 8812 	msr	BASEPRI_MAX, r3
    867c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8680:	4829      	ldr	r0, [pc, #164]	; (8728 <z_tick_sleep+0x108>)
    8682:	f7fe fb83 	bl	6d8c <z_spin_lock_valid>
    8686:	b940      	cbnz	r0, 869a <z_tick_sleep+0x7a>
    8688:	4928      	ldr	r1, [pc, #160]	; (872c <z_tick_sleep+0x10c>)
    868a:	4826      	ldr	r0, [pc, #152]	; (8724 <z_tick_sleep+0x104>)
    868c:	2281      	movs	r2, #129	; 0x81
    868e:	f000 ff71 	bl	9574 <printk>
    8692:	4826      	ldr	r0, [pc, #152]	; (872c <z_tick_sleep+0x10c>)
    8694:	2181      	movs	r1, #129	; 0x81
    8696:	f001 f839 	bl	970c <assert_post_action>
	pending_current = _current;
    869a:	4f25      	ldr	r7, [pc, #148]	; (8730 <z_tick_sleep+0x110>)
	z_spin_lock_set_owner(l);
    869c:	4822      	ldr	r0, [pc, #136]	; (8728 <z_tick_sleep+0x108>)
    869e:	f7fe fb93 	bl	6dc8 <z_spin_lock_set_owner>
    86a2:	4b24      	ldr	r3, [pc, #144]	; (8734 <z_tick_sleep+0x114>)
    86a4:	68b8      	ldr	r0, [r7, #8]
    86a6:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    86a8:	f7ff fca6 	bl	7ff8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    86ac:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    86ae:	4922      	ldr	r1, [pc, #136]	; (8738 <z_tick_sleep+0x118>)
    86b0:	4622      	mov	r2, r4
    86b2:	462b      	mov	r3, r5
    86b4:	3018      	adds	r0, #24
    86b6:	f000 f9dd 	bl	8a74 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    86ba:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    86bc:	481a      	ldr	r0, [pc, #104]	; (8728 <z_tick_sleep+0x108>)
    86be:	7b53      	ldrb	r3, [r2, #13]
    86c0:	f043 0310 	orr.w	r3, r3, #16
    86c4:	7353      	strb	r3, [r2, #13]
    86c6:	f7fe fb6f 	bl	6da8 <z_spin_unlock_valid>
    86ca:	b940      	cbnz	r0, 86de <z_tick_sleep+0xbe>
    86cc:	4917      	ldr	r1, [pc, #92]	; (872c <z_tick_sleep+0x10c>)
    86ce:	4815      	ldr	r0, [pc, #84]	; (8724 <z_tick_sleep+0x104>)
    86d0:	22c3      	movs	r2, #195	; 0xc3
    86d2:	f000 ff4f 	bl	9574 <printk>
    86d6:	4815      	ldr	r0, [pc, #84]	; (872c <z_tick_sleep+0x10c>)
    86d8:	21c3      	movs	r1, #195	; 0xc3
    86da:	f001 f817 	bl	970c <assert_post_action>
    86de:	4640      	mov	r0, r8
    86e0:	f7fa fade 	bl	2ca0 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    86e4:	68bb      	ldr	r3, [r7, #8]
    86e6:	7b5b      	ldrb	r3, [r3, #13]
    86e8:	06db      	lsls	r3, r3, #27
    86ea:	d50a      	bpl.n	8702 <z_tick_sleep+0xe2>
    86ec:	490c      	ldr	r1, [pc, #48]	; (8720 <z_tick_sleep+0x100>)
    86ee:	480d      	ldr	r0, [pc, #52]	; (8724 <z_tick_sleep+0x104>)
    86f0:	f240 5219 	movw	r2, #1305	; 0x519
    86f4:	f000 ff3e 	bl	9574 <printk>
    86f8:	4809      	ldr	r0, [pc, #36]	; (8720 <z_tick_sleep+0x100>)
    86fa:	f240 5119 	movw	r1, #1305	; 0x519
    86fe:	f001 f805 	bl	970c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8702:	f001 fcbe 	bl	a082 <sys_clock_tick_get_32>
    8706:	1a30      	subs	r0, r6, r0
    8708:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    870c:	2801      	cmp	r0, #1
    870e:	f171 0300 	sbcs.w	r3, r1, #0
    8712:	bfb8      	it	lt
    8714:	2000      	movlt	r0, #0
    8716:	e79b      	b.n	8650 <z_tick_sleep+0x30>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8718:	f06f 0601 	mvn.w	r6, #1
    871c:	1b36      	subs	r6, r6, r4
    871e:	e7a7      	b.n	8670 <z_tick_sleep+0x50>
    8720:	0000b7e6 	.word	0x0000b7e6
    8724:	0000a66d 	.word	0x0000a66d
    8728:	200011fc 	.word	0x200011fc
    872c:	0000ab1d 	.word	0x0000ab1d
    8730:	200011bc 	.word	0x200011bc
    8734:	200011f8 	.word	0x200011f8
    8738:	00007f69 	.word	0x00007f69

0000873c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    873c:	b538      	push	{r3, r4, r5, lr}
    873e:	4604      	mov	r4, r0
    8740:	460d      	mov	r5, r1
    8742:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    8746:	b153      	cbz	r3, 875e <z_impl_k_sleep+0x22>
    8748:	4911      	ldr	r1, [pc, #68]	; (8790 <z_impl_k_sleep+0x54>)
    874a:	4812      	ldr	r0, [pc, #72]	; (8794 <z_impl_k_sleep+0x58>)
    874c:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    8750:	f000 ff10 	bl	9574 <printk>
    8754:	480e      	ldr	r0, [pc, #56]	; (8790 <z_impl_k_sleep+0x54>)
    8756:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    875a:	f000 ffd7 	bl	970c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    875e:	1c6b      	adds	r3, r5, #1
    8760:	bf08      	it	eq
    8762:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    8766:	d106      	bne.n	8776 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
    8768:	4b0b      	ldr	r3, [pc, #44]	; (8798 <z_impl_k_sleep+0x5c>)
    876a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    876c:	f7ff fd9a 	bl	82a4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8770:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8774:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    8776:	4620      	mov	r0, r4
    8778:	4629      	mov	r1, r5
    877a:	f7ff ff51 	bl	8620 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    877e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8782:	fb80 3403 	smull	r3, r4, r0, r3
    8786:	0bd8      	lsrs	r0, r3, #15
    8788:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    878c:	e7f2      	b.n	8774 <z_impl_k_sleep+0x38>
    878e:	bf00      	nop
    8790:	0000b7e6 	.word	0x0000b7e6
    8794:	0000a66d 	.word	0x0000a66d
    8798:	200011bc 	.word	0x200011bc

0000879c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    879c:	4b01      	ldr	r3, [pc, #4]	; (87a4 <z_impl_z_current_get+0x8>)
    879e:	6898      	ldr	r0, [r3, #8]
    87a0:	4770      	bx	lr
    87a2:	bf00      	nop
    87a4:	200011bc 	.word	0x200011bc

000087a8 <z_impl_k_is_preempt_thread>:
    87a8:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    87ac:	b93b      	cbnz	r3, 87be <z_impl_k_is_preempt_thread+0x16>
    87ae:	4b05      	ldr	r3, [pc, #20]	; (87c4 <z_impl_k_is_preempt_thread+0x1c>)
    87b0:	689b      	ldr	r3, [r3, #8]
    87b2:	89d8      	ldrh	r0, [r3, #14]
    87b4:	287f      	cmp	r0, #127	; 0x7f
    87b6:	bf8c      	ite	hi
    87b8:	2000      	movhi	r0, #0
    87ba:	2001      	movls	r0, #1
    87bc:	4770      	bx	lr
    87be:	2000      	movs	r0, #0
}
    87c0:	4770      	bx	lr
    87c2:	bf00      	nop
    87c4:	200011bc 	.word	0x200011bc

000087c8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    87c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87cc:	4604      	mov	r4, r0
    87ce:	f04f 0320 	mov.w	r3, #32
    87d2:	f3ef 8611 	mrs	r6, BASEPRI
    87d6:	f383 8812 	msr	BASEPRI_MAX, r3
    87da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    87de:	483e      	ldr	r0, [pc, #248]	; (88d8 <z_thread_abort+0x110>)
    87e0:	f7fe fad4 	bl	6d8c <z_spin_lock_valid>
    87e4:	b940      	cbnz	r0, 87f8 <z_thread_abort+0x30>
    87e6:	493d      	ldr	r1, [pc, #244]	; (88dc <z_thread_abort+0x114>)
    87e8:	483d      	ldr	r0, [pc, #244]	; (88e0 <z_thread_abort+0x118>)
    87ea:	2281      	movs	r2, #129	; 0x81
    87ec:	f000 fec2 	bl	9574 <printk>
    87f0:	483a      	ldr	r0, [pc, #232]	; (88dc <z_thread_abort+0x114>)
    87f2:	2181      	movs	r1, #129	; 0x81
    87f4:	f000 ff8a 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    87f8:	4837      	ldr	r0, [pc, #220]	; (88d8 <z_thread_abort+0x110>)
    87fa:	f7fe fae5 	bl	6dc8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    87fe:	7b63      	ldrb	r3, [r4, #13]
    8800:	071a      	lsls	r2, r3, #28
    8802:	d512      	bpl.n	882a <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8804:	4834      	ldr	r0, [pc, #208]	; (88d8 <z_thread_abort+0x110>)
    8806:	f7fe facf 	bl	6da8 <z_spin_unlock_valid>
    880a:	b940      	cbnz	r0, 881e <z_thread_abort+0x56>
    880c:	4933      	ldr	r1, [pc, #204]	; (88dc <z_thread_abort+0x114>)
    880e:	4834      	ldr	r0, [pc, #208]	; (88e0 <z_thread_abort+0x118>)
    8810:	22ac      	movs	r2, #172	; 0xac
    8812:	f000 feaf 	bl	9574 <printk>
    8816:	4831      	ldr	r0, [pc, #196]	; (88dc <z_thread_abort+0x114>)
    8818:	21ac      	movs	r1, #172	; 0xac
    881a:	f000 ff77 	bl	970c <assert_post_action>
	__asm__ volatile(
    881e:	f386 8811 	msr	BASEPRI, r6
    8822:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    882a:	f023 0220 	bic.w	r2, r3, #32
    882e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8832:	09d2      	lsrs	r2, r2, #7
    8834:	d138      	bne.n	88a8 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8836:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    8838:	68a3      	ldr	r3, [r4, #8]
    883a:	b113      	cbz	r3, 8842 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
    883c:	4620      	mov	r0, r4
    883e:	f7ff f9c5 	bl	7bcc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8842:	f104 0018 	add.w	r0, r4, #24
    8846:	f000 f9cf 	bl	8be8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    884a:	f104 0758 	add.w	r7, r4, #88	; 0x58
    884e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    8852:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8854:	42bd      	cmp	r5, r7
    8856:	d000      	beq.n	885a <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8858:	bb85      	cbnz	r5, 88bc <z_thread_abort+0xf4>
		update_cache(1);
    885a:	2001      	movs	r0, #1
    885c:	f7ff f9d4 	bl	7c08 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    8860:	4b20      	ldr	r3, [pc, #128]	; (88e4 <z_thread_abort+0x11c>)
    8862:	689b      	ldr	r3, [r3, #8]
    8864:	42a3      	cmp	r3, r4
    8866:	d1cd      	bne.n	8804 <z_thread_abort+0x3c>
    8868:	f3ef 8305 	mrs	r3, IPSR
    886c:	2b00      	cmp	r3, #0
    886e:	d1c9      	bne.n	8804 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8870:	4819      	ldr	r0, [pc, #100]	; (88d8 <z_thread_abort+0x110>)
    8872:	f7fe fa99 	bl	6da8 <z_spin_unlock_valid>
    8876:	b940      	cbnz	r0, 888a <z_thread_abort+0xc2>
    8878:	4918      	ldr	r1, [pc, #96]	; (88dc <z_thread_abort+0x114>)
    887a:	4819      	ldr	r0, [pc, #100]	; (88e0 <z_thread_abort+0x118>)
    887c:	22c3      	movs	r2, #195	; 0xc3
    887e:	f000 fe79 	bl	9574 <printk>
    8882:	4816      	ldr	r0, [pc, #88]	; (88dc <z_thread_abort+0x114>)
    8884:	21c3      	movs	r1, #195	; 0xc3
    8886:	f000 ff41 	bl	970c <assert_post_action>
    888a:	4630      	mov	r0, r6
    888c:	f7fa fa08 	bl	2ca0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    8890:	4915      	ldr	r1, [pc, #84]	; (88e8 <z_thread_abort+0x120>)
    8892:	4813      	ldr	r0, [pc, #76]	; (88e0 <z_thread_abort+0x118>)
    8894:	f240 624b 	movw	r2, #1611	; 0x64b
    8898:	f000 fe6c 	bl	9574 <printk>
    889c:	4812      	ldr	r0, [pc, #72]	; (88e8 <z_thread_abort+0x120>)
    889e:	f240 614b 	movw	r1, #1611	; 0x64b
    88a2:	f000 ff33 	bl	970c <assert_post_action>
    88a6:	e7ad      	b.n	8804 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    88a8:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    88ac:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    88b0:	480e      	ldr	r0, [pc, #56]	; (88ec <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    88b2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    88b4:	4621      	mov	r1, r4
    88b6:	f7ff f96b 	bl	7b90 <z_priq_dumb_remove>
}
    88ba:	e7bd      	b.n	8838 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
    88bc:	4628      	mov	r0, r5
    88be:	f7ff f985 	bl	7bcc <unpend_thread_no_timeout>
    88c2:	f105 0018 	add.w	r0, r5, #24
    88c6:	f000 f98f 	bl	8be8 <z_abort_timeout>
    88ca:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    88ce:	4628      	mov	r0, r5
    88d0:	f7ff fa84 	bl	7ddc <ready_thread>
    88d4:	e7bd      	b.n	8852 <z_thread_abort+0x8a>
    88d6:	bf00      	nop
    88d8:	200011fc 	.word	0x200011fc
    88dc:	0000ab1d 	.word	0x0000ab1d
    88e0:	0000a66d 	.word	0x0000a66d
    88e4:	200011bc 	.word	0x200011bc
    88e8:	0000b7e6 	.word	0x0000b7e6
    88ec:	200011dc 	.word	0x200011dc

000088f0 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    88f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88f2:	4604      	mov	r4, r0
    88f4:	460e      	mov	r6, r1
    88f6:	4615      	mov	r5, r2
	__asm__ volatile(
    88f8:	f04f 0320 	mov.w	r3, #32
    88fc:	f3ef 8711 	mrs	r7, BASEPRI
    8900:	f383 8812 	msr	BASEPRI_MAX, r3
    8904:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8908:	4819      	ldr	r0, [pc, #100]	; (8970 <z_sched_wake+0x80>)
    890a:	f7fe fa3f 	bl	6d8c <z_spin_lock_valid>
    890e:	b940      	cbnz	r0, 8922 <z_sched_wake+0x32>
    8910:	4918      	ldr	r1, [pc, #96]	; (8974 <z_sched_wake+0x84>)
    8912:	4819      	ldr	r0, [pc, #100]	; (8978 <z_sched_wake+0x88>)
    8914:	2281      	movs	r2, #129	; 0x81
    8916:	f000 fe2d 	bl	9574 <printk>
    891a:	4816      	ldr	r0, [pc, #88]	; (8974 <z_sched_wake+0x84>)
    891c:	2181      	movs	r1, #129	; 0x81
    891e:	f000 fef5 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    8922:	4813      	ldr	r0, [pc, #76]	; (8970 <z_sched_wake+0x80>)
    8924:	f7fe fa50 	bl	6dc8 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
    8928:	4620      	mov	r0, r4
    892a:	f001 fba0 	bl	a06e <z_priq_dumb_best>

		if (thread != NULL) {
    892e:	4604      	mov	r4, r0
    8930:	b158      	cbz	r0, 894a <z_sched_wake+0x5a>
    8932:	6786      	str	r6, [r0, #120]	; 0x78
    8934:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    8936:	f7ff f949 	bl	7bcc <unpend_thread_no_timeout>
    893a:	f104 0018 	add.w	r0, r4, #24
    893e:	f000 f953 	bl	8be8 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    8942:	4620      	mov	r0, r4
    8944:	f7ff fa4a 	bl	7ddc <ready_thread>
			ret = true;
    8948:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    894a:	4809      	ldr	r0, [pc, #36]	; (8970 <z_sched_wake+0x80>)
    894c:	f7fe fa2c 	bl	6da8 <z_spin_unlock_valid>
    8950:	b940      	cbnz	r0, 8964 <z_sched_wake+0x74>
    8952:	4908      	ldr	r1, [pc, #32]	; (8974 <z_sched_wake+0x84>)
    8954:	4808      	ldr	r0, [pc, #32]	; (8978 <z_sched_wake+0x88>)
    8956:	22ac      	movs	r2, #172	; 0xac
    8958:	f000 fe0c 	bl	9574 <printk>
    895c:	4805      	ldr	r0, [pc, #20]	; (8974 <z_sched_wake+0x84>)
    895e:	21ac      	movs	r1, #172	; 0xac
    8960:	f000 fed4 	bl	970c <assert_post_action>
	__asm__ volatile(
    8964:	f387 8811 	msr	BASEPRI, r7
    8968:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    896c:	4620      	mov	r0, r4
    896e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8970:	200011fc 	.word	0x200011fc
    8974:	0000ab1d 	.word	0x0000ab1d
    8978:	0000a66d 	.word	0x0000a66d

0000897c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    897c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    897e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    8982:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8984:	e9cd 6700 	strd	r6, r7, [sp]
    8988:	f7ff fbde 	bl	8148 <z_pend_curr>

	if (data != NULL) {
    898c:	b11c      	cbz	r4, 8996 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    898e:	4b03      	ldr	r3, [pc, #12]	; (899c <z_sched_wait+0x20>)
    8990:	689b      	ldr	r3, [r3, #8]
    8992:	695b      	ldr	r3, [r3, #20]
    8994:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    8996:	b002      	add	sp, #8
    8998:	bdd0      	pop	{r4, r6, r7, pc}
    899a:	bf00      	nop
    899c:	200011bc 	.word	0x200011bc

000089a0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    89a0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    89a2:	4806      	ldr	r0, [pc, #24]	; (89bc <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    89a4:	4a06      	ldr	r2, [pc, #24]	; (89c0 <z_data_copy+0x20>)
    89a6:	4907      	ldr	r1, [pc, #28]	; (89c4 <z_data_copy+0x24>)
    89a8:	1a12      	subs	r2, r2, r0
    89aa:	f000 ff3e 	bl	982a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    89ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    89b2:	4a05      	ldr	r2, [pc, #20]	; (89c8 <z_data_copy+0x28>)
    89b4:	4905      	ldr	r1, [pc, #20]	; (89cc <z_data_copy+0x2c>)
    89b6:	4806      	ldr	r0, [pc, #24]	; (89d0 <z_data_copy+0x30>)
    89b8:	f000 bf37 	b.w	982a <memcpy>
    89bc:	20000000 	.word	0x20000000
    89c0:	20000734 	.word	0x20000734
    89c4:	0000b86c 	.word	0x0000b86c
    89c8:	00000000 	.word	0x00000000
    89cc:	0000b86c 	.word	0x0000b86c
    89d0:	20000000 	.word	0x20000000

000089d4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    89d4:	4b03      	ldr	r3, [pc, #12]	; (89e4 <elapsed+0x10>)
    89d6:	681b      	ldr	r3, [r3, #0]
    89d8:	b90b      	cbnz	r3, 89de <elapsed+0xa>
    89da:	f7fc ba8b 	b.w	4ef4 <sys_clock_elapsed>
}
    89de:	2000      	movs	r0, #0
    89e0:	4770      	bx	lr
    89e2:	bf00      	nop
    89e4:	20001208 	.word	0x20001208

000089e8 <remove_timeout>:
{
    89e8:	b530      	push	{r4, r5, lr}
    89ea:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    89ec:	b168      	cbz	r0, 8a0a <remove_timeout+0x22>
    89ee:	4a0a      	ldr	r2, [pc, #40]	; (8a18 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    89f0:	6852      	ldr	r2, [r2, #4]
    89f2:	4290      	cmp	r0, r2
    89f4:	d009      	beq.n	8a0a <remove_timeout+0x22>
	if (next(t) != NULL) {
    89f6:	b143      	cbz	r3, 8a0a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    89f8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    89fc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    8a00:	1912      	adds	r2, r2, r4
    8a02:	eb45 0101 	adc.w	r1, r5, r1
    8a06:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    8a0a:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    8a0c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8a0e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8a10:	2300      	movs	r3, #0
	node->prev = NULL;
    8a12:	e9c0 3300 	strd	r3, r3, [r0]
}
    8a16:	bd30      	pop	{r4, r5, pc}
    8a18:	200001a0 	.word	0x200001a0

00008a1c <next_timeout>:

static int32_t next_timeout(void)
{
    8a1c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    8a1e:	4b13      	ldr	r3, [pc, #76]	; (8a6c <next_timeout+0x50>)
    8a20:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a22:	429c      	cmp	r4, r3
    8a24:	bf08      	it	eq
    8a26:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8a28:	f7ff ffd4 	bl	89d4 <elapsed>
    8a2c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    8a2e:	b1bc      	cbz	r4, 8a60 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8a30:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    8a34:	1b40      	subs	r0, r0, r5
    8a36:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    8a3a:	2801      	cmp	r0, #1
    8a3c:	f171 0300 	sbcs.w	r3, r1, #0
    8a40:	db11      	blt.n	8a66 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8a42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    8a46:	2300      	movs	r3, #0
    8a48:	4282      	cmp	r2, r0
    8a4a:	eb73 0401 	sbcs.w	r4, r3, r1
    8a4e:	da00      	bge.n	8a52 <next_timeout+0x36>
    8a50:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8a52:	4b07      	ldr	r3, [pc, #28]	; (8a70 <next_timeout+0x54>)
    8a54:	691b      	ldr	r3, [r3, #16]
    8a56:	b113      	cbz	r3, 8a5e <next_timeout+0x42>
    8a58:	4298      	cmp	r0, r3
    8a5a:	bfa8      	it	ge
    8a5c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    8a5e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    8a60:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8a64:	e7f5      	b.n	8a52 <next_timeout+0x36>
    8a66:	2000      	movs	r0, #0
    8a68:	e7f3      	b.n	8a52 <next_timeout+0x36>
    8a6a:	bf00      	nop
    8a6c:	200001a0 	.word	0x200001a0
    8a70:	200011bc 	.word	0x200011bc

00008a74 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    8a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a78:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8a7a:	1c6b      	adds	r3, r5, #1
    8a7c:	bf08      	it	eq
    8a7e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    8a82:	4682      	mov	sl, r0
    8a84:	468b      	mov	fp, r1
    8a86:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8a88:	f000 809c 	beq.w	8bc4 <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    8a8c:	6803      	ldr	r3, [r0, #0]
    8a8e:	b143      	cbz	r3, 8aa2 <z_add_timeout+0x2e>
    8a90:	494e      	ldr	r1, [pc, #312]	; (8bcc <z_add_timeout+0x158>)
    8a92:	484f      	ldr	r0, [pc, #316]	; (8bd0 <z_add_timeout+0x15c>)
    8a94:	225d      	movs	r2, #93	; 0x5d
    8a96:	f000 fd6d 	bl	9574 <printk>
    8a9a:	484c      	ldr	r0, [pc, #304]	; (8bcc <z_add_timeout+0x158>)
    8a9c:	215d      	movs	r1, #93	; 0x5d
    8a9e:	f000 fe35 	bl	970c <assert_post_action>
	to->fn = fn;
    8aa2:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    8aa6:	f04f 0320 	mov.w	r3, #32
    8aaa:	f3ef 8b11 	mrs	fp, BASEPRI
    8aae:	f383 8812 	msr	BASEPRI_MAX, r3
    8ab2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ab6:	4847      	ldr	r0, [pc, #284]	; (8bd4 <z_add_timeout+0x160>)
    8ab8:	f7fe f968 	bl	6d8c <z_spin_lock_valid>
    8abc:	b940      	cbnz	r0, 8ad0 <z_add_timeout+0x5c>
    8abe:	4946      	ldr	r1, [pc, #280]	; (8bd8 <z_add_timeout+0x164>)
    8ac0:	4843      	ldr	r0, [pc, #268]	; (8bd0 <z_add_timeout+0x15c>)
    8ac2:	2281      	movs	r2, #129	; 0x81
    8ac4:	f000 fd56 	bl	9574 <printk>
    8ac8:	4843      	ldr	r0, [pc, #268]	; (8bd8 <z_add_timeout+0x164>)
    8aca:	2181      	movs	r1, #129	; 0x81
    8acc:	f000 fe1e 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    8ad0:	4840      	ldr	r0, [pc, #256]	; (8bd4 <z_add_timeout+0x160>)
    8ad2:	f7fe f979 	bl	6dc8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    8ad6:	f06f 0301 	mvn.w	r3, #1
    8ada:	ebb3 0804 	subs.w	r8, r3, r4
    8ade:	f04f 32ff 	mov.w	r2, #4294967295
    8ae2:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8ae6:	f1b8 0f00 	cmp.w	r8, #0
    8aea:	f179 0100 	sbcs.w	r1, r9, #0
    8aee:	db1c      	blt.n	8b2a <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8af0:	483a      	ldr	r0, [pc, #232]	; (8bdc <z_add_timeout+0x168>)
    8af2:	e9d0 1000 	ldrd	r1, r0, [r0]
    8af6:	1a5b      	subs	r3, r3, r1
    8af8:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    8afc:	1b1e      	subs	r6, r3, r4
    8afe:	eb62 0705 	sbc.w	r7, r2, r5
    8b02:	2e01      	cmp	r6, #1
    8b04:	f177 0300 	sbcs.w	r3, r7, #0
    8b08:	bfbc      	itt	lt
    8b0a:	2601      	movlt	r6, #1
    8b0c:	2700      	movlt	r7, #0
    8b0e:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    8b12:	4a33      	ldr	r2, [pc, #204]	; (8be0 <z_add_timeout+0x16c>)
    8b14:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b18:	4293      	cmp	r3, r2
    8b1a:	d11d      	bne.n	8b58 <z_add_timeout+0xe4>
	node->prev = tail;
    8b1c:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    8b20:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    8b24:	f8c2 a004 	str.w	sl, [r2, #4]
}
    8b28:	e02c      	b.n	8b84 <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    8b2a:	f7ff ff53 	bl	89d4 <elapsed>
    8b2e:	1c63      	adds	r3, r4, #1
    8b30:	9300      	str	r3, [sp, #0]
    8b32:	f145 0300 	adc.w	r3, r5, #0
    8b36:	9301      	str	r3, [sp, #4]
    8b38:	e9dd 2300 	ldrd	r2, r3, [sp]
    8b3c:	1812      	adds	r2, r2, r0
    8b3e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    8b42:	e9ca 2304 	strd	r2, r3, [sl, #16]
    8b46:	e7e4      	b.n	8b12 <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    8b48:	1be0      	subs	r0, r4, r7
    8b4a:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    8b4e:	42b3      	cmp	r3, r6
    8b50:	e9ca 0104 	strd	r0, r1, [sl, #16]
    8b54:	d0e2      	beq.n	8b1c <z_add_timeout+0xa8>
    8b56:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    8b58:	2b00      	cmp	r3, #0
    8b5a:	d0df      	beq.n	8b1c <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    8b5c:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    8b60:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    8b64:	42bc      	cmp	r4, r7
    8b66:	eb75 0108 	sbcs.w	r1, r5, r8
    8b6a:	daed      	bge.n	8b48 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    8b6c:	1b38      	subs	r0, r7, r4
    8b6e:	eb68 0105 	sbc.w	r1, r8, r5
    8b72:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    8b76:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    8b78:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    8b7c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    8b80:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    8b84:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b86:	4293      	cmp	r3, r2
    8b88:	d00b      	beq.n	8ba2 <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8b8a:	459a      	cmp	sl, r3
    8b8c:	d109      	bne.n	8ba2 <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8b8e:	f7ff ff45 	bl	8a1c <next_timeout>

			if (next_time == 0 ||
    8b92:	b118      	cbz	r0, 8b9c <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
    8b94:	4b13      	ldr	r3, [pc, #76]	; (8be4 <z_add_timeout+0x170>)
			if (next_time == 0 ||
    8b96:	691b      	ldr	r3, [r3, #16]
    8b98:	4283      	cmp	r3, r0
    8b9a:	d002      	beq.n	8ba2 <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
    8b9c:	2100      	movs	r1, #0
    8b9e:	f7fc f979 	bl	4e94 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ba2:	480c      	ldr	r0, [pc, #48]	; (8bd4 <z_add_timeout+0x160>)
    8ba4:	f7fe f900 	bl	6da8 <z_spin_unlock_valid>
    8ba8:	b940      	cbnz	r0, 8bbc <z_add_timeout+0x148>
    8baa:	490b      	ldr	r1, [pc, #44]	; (8bd8 <z_add_timeout+0x164>)
    8bac:	4808      	ldr	r0, [pc, #32]	; (8bd0 <z_add_timeout+0x15c>)
    8bae:	22ac      	movs	r2, #172	; 0xac
    8bb0:	f000 fce0 	bl	9574 <printk>
    8bb4:	4808      	ldr	r0, [pc, #32]	; (8bd8 <z_add_timeout+0x164>)
    8bb6:	21ac      	movs	r1, #172	; 0xac
    8bb8:	f000 fda8 	bl	970c <assert_post_action>
	__asm__ volatile(
    8bbc:	f38b 8811 	msr	BASEPRI, fp
    8bc0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8bc4:	b003      	add	sp, #12
    8bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bca:	bf00      	nop
    8bcc:	0000b808 	.word	0x0000b808
    8bd0:	0000a66d 	.word	0x0000a66d
    8bd4:	2000120c 	.word	0x2000120c
    8bd8:	0000ab1d 	.word	0x0000ab1d
    8bdc:	20000888 	.word	0x20000888
    8be0:	200001a0 	.word	0x200001a0
    8be4:	200011bc 	.word	0x200011bc

00008be8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    8be8:	b538      	push	{r3, r4, r5, lr}
    8bea:	4604      	mov	r4, r0
	__asm__ volatile(
    8bec:	f04f 0320 	mov.w	r3, #32
    8bf0:	f3ef 8511 	mrs	r5, BASEPRI
    8bf4:	f383 8812 	msr	BASEPRI_MAX, r3
    8bf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8bfc:	4815      	ldr	r0, [pc, #84]	; (8c54 <z_abort_timeout+0x6c>)
    8bfe:	f7fe f8c5 	bl	6d8c <z_spin_lock_valid>
    8c02:	b940      	cbnz	r0, 8c16 <z_abort_timeout+0x2e>
    8c04:	4914      	ldr	r1, [pc, #80]	; (8c58 <z_abort_timeout+0x70>)
    8c06:	4815      	ldr	r0, [pc, #84]	; (8c5c <z_abort_timeout+0x74>)
    8c08:	2281      	movs	r2, #129	; 0x81
    8c0a:	f000 fcb3 	bl	9574 <printk>
    8c0e:	4812      	ldr	r0, [pc, #72]	; (8c58 <z_abort_timeout+0x70>)
    8c10:	2181      	movs	r1, #129	; 0x81
    8c12:	f000 fd7b 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    8c16:	480f      	ldr	r0, [pc, #60]	; (8c54 <z_abort_timeout+0x6c>)
    8c18:	f7fe f8d6 	bl	6dc8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    8c1c:	6823      	ldr	r3, [r4, #0]
    8c1e:	b1b3      	cbz	r3, 8c4e <z_abort_timeout+0x66>
			remove_timeout(to);
    8c20:	4620      	mov	r0, r4
    8c22:	f7ff fee1 	bl	89e8 <remove_timeout>
			ret = 0;
    8c26:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c28:	480a      	ldr	r0, [pc, #40]	; (8c54 <z_abort_timeout+0x6c>)
    8c2a:	f7fe f8bd 	bl	6da8 <z_spin_unlock_valid>
    8c2e:	b940      	cbnz	r0, 8c42 <z_abort_timeout+0x5a>
    8c30:	4909      	ldr	r1, [pc, #36]	; (8c58 <z_abort_timeout+0x70>)
    8c32:	480a      	ldr	r0, [pc, #40]	; (8c5c <z_abort_timeout+0x74>)
    8c34:	22ac      	movs	r2, #172	; 0xac
    8c36:	f000 fc9d 	bl	9574 <printk>
    8c3a:	4807      	ldr	r0, [pc, #28]	; (8c58 <z_abort_timeout+0x70>)
    8c3c:	21ac      	movs	r1, #172	; 0xac
    8c3e:	f000 fd65 	bl	970c <assert_post_action>
	__asm__ volatile(
    8c42:	f385 8811 	msr	BASEPRI, r5
    8c46:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    8c4a:	4620      	mov	r0, r4
    8c4c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    8c4e:	f06f 0415 	mvn.w	r4, #21
    8c52:	e7e9      	b.n	8c28 <z_abort_timeout+0x40>
    8c54:	2000120c 	.word	0x2000120c
    8c58:	0000ab1d 	.word	0x0000ab1d
    8c5c:	0000a66d 	.word	0x0000a66d

00008c60 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    8c60:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8c62:	f04f 0320 	mov.w	r3, #32
    8c66:	f3ef 8511 	mrs	r5, BASEPRI
    8c6a:	f383 8812 	msr	BASEPRI_MAX, r3
    8c6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c72:	4813      	ldr	r0, [pc, #76]	; (8cc0 <z_get_next_timeout_expiry+0x60>)
    8c74:	f7fe f88a 	bl	6d8c <z_spin_lock_valid>
    8c78:	b940      	cbnz	r0, 8c8c <z_get_next_timeout_expiry+0x2c>
    8c7a:	4912      	ldr	r1, [pc, #72]	; (8cc4 <z_get_next_timeout_expiry+0x64>)
    8c7c:	4812      	ldr	r0, [pc, #72]	; (8cc8 <z_get_next_timeout_expiry+0x68>)
    8c7e:	2281      	movs	r2, #129	; 0x81
    8c80:	f000 fc78 	bl	9574 <printk>
    8c84:	480f      	ldr	r0, [pc, #60]	; (8cc4 <z_get_next_timeout_expiry+0x64>)
    8c86:	2181      	movs	r1, #129	; 0x81
    8c88:	f000 fd40 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    8c8c:	480c      	ldr	r0, [pc, #48]	; (8cc0 <z_get_next_timeout_expiry+0x60>)
    8c8e:	f7fe f89b 	bl	6dc8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    8c92:	f7ff fec3 	bl	8a1c <next_timeout>
    8c96:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c98:	4809      	ldr	r0, [pc, #36]	; (8cc0 <z_get_next_timeout_expiry+0x60>)
    8c9a:	f7fe f885 	bl	6da8 <z_spin_unlock_valid>
    8c9e:	b940      	cbnz	r0, 8cb2 <z_get_next_timeout_expiry+0x52>
    8ca0:	4908      	ldr	r1, [pc, #32]	; (8cc4 <z_get_next_timeout_expiry+0x64>)
    8ca2:	4809      	ldr	r0, [pc, #36]	; (8cc8 <z_get_next_timeout_expiry+0x68>)
    8ca4:	22ac      	movs	r2, #172	; 0xac
    8ca6:	f000 fc65 	bl	9574 <printk>
    8caa:	4806      	ldr	r0, [pc, #24]	; (8cc4 <z_get_next_timeout_expiry+0x64>)
    8cac:	21ac      	movs	r1, #172	; 0xac
    8cae:	f000 fd2d 	bl	970c <assert_post_action>
	__asm__ volatile(
    8cb2:	f385 8811 	msr	BASEPRI, r5
    8cb6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    8cba:	4620      	mov	r0, r4
    8cbc:	bd38      	pop	{r3, r4, r5, pc}
    8cbe:	bf00      	nop
    8cc0:	2000120c 	.word	0x2000120c
    8cc4:	0000ab1d 	.word	0x0000ab1d
    8cc8:	0000a66d 	.word	0x0000a66d

00008ccc <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    8ccc:	b570      	push	{r4, r5, r6, lr}
    8cce:	4604      	mov	r4, r0
    8cd0:	460d      	mov	r5, r1
	__asm__ volatile(
    8cd2:	f04f 0320 	mov.w	r3, #32
    8cd6:	f3ef 8611 	mrs	r6, BASEPRI
    8cda:	f383 8812 	msr	BASEPRI_MAX, r3
    8cde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ce2:	4816      	ldr	r0, [pc, #88]	; (8d3c <z_set_timeout_expiry+0x70>)
    8ce4:	f7fe f852 	bl	6d8c <z_spin_lock_valid>
    8ce8:	b940      	cbnz	r0, 8cfc <z_set_timeout_expiry+0x30>
    8cea:	4915      	ldr	r1, [pc, #84]	; (8d40 <z_set_timeout_expiry+0x74>)
    8cec:	4815      	ldr	r0, [pc, #84]	; (8d44 <z_set_timeout_expiry+0x78>)
    8cee:	2281      	movs	r2, #129	; 0x81
    8cf0:	f000 fc40 	bl	9574 <printk>
    8cf4:	4812      	ldr	r0, [pc, #72]	; (8d40 <z_set_timeout_expiry+0x74>)
    8cf6:	2181      	movs	r1, #129	; 0x81
    8cf8:	f000 fd08 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    8cfc:	480f      	ldr	r0, [pc, #60]	; (8d3c <z_set_timeout_expiry+0x70>)
    8cfe:	f7fe f863 	bl	6dc8 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    8d02:	f7ff fe8b 	bl	8a1c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8d06:	2801      	cmp	r0, #1
    8d08:	dd05      	ble.n	8d16 <z_set_timeout_expiry+0x4a>
    8d0a:	42a0      	cmp	r0, r4
    8d0c:	db03      	blt.n	8d16 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8d0e:	4629      	mov	r1, r5
    8d10:	4620      	mov	r0, r4
    8d12:	f7fc f8bf 	bl	4e94 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8d16:	4809      	ldr	r0, [pc, #36]	; (8d3c <z_set_timeout_expiry+0x70>)
    8d18:	f7fe f846 	bl	6da8 <z_spin_unlock_valid>
    8d1c:	b940      	cbnz	r0, 8d30 <z_set_timeout_expiry+0x64>
    8d1e:	4908      	ldr	r1, [pc, #32]	; (8d40 <z_set_timeout_expiry+0x74>)
    8d20:	4808      	ldr	r0, [pc, #32]	; (8d44 <z_set_timeout_expiry+0x78>)
    8d22:	22ac      	movs	r2, #172	; 0xac
    8d24:	f000 fc26 	bl	9574 <printk>
    8d28:	4805      	ldr	r0, [pc, #20]	; (8d40 <z_set_timeout_expiry+0x74>)
    8d2a:	21ac      	movs	r1, #172	; 0xac
    8d2c:	f000 fcee 	bl	970c <assert_post_action>
	__asm__ volatile(
    8d30:	f386 8811 	msr	BASEPRI, r6
    8d34:	f3bf 8f6f 	isb	sy
		}
	}
}
    8d38:	bd70      	pop	{r4, r5, r6, pc}
    8d3a:	bf00      	nop
    8d3c:	2000120c 	.word	0x2000120c
    8d40:	0000ab1d 	.word	0x0000ab1d
    8d44:	0000a66d 	.word	0x0000a66d

00008d48 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    8d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d4c:	b085      	sub	sp, #20
    8d4e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8d50:	f7fe ffde 	bl	7d10 <z_time_slice>
	__asm__ volatile(
    8d54:	f04f 0320 	mov.w	r3, #32
    8d58:	f3ef 8911 	mrs	r9, BASEPRI
    8d5c:	f383 8812 	msr	BASEPRI_MAX, r3
    8d60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d64:	484e      	ldr	r0, [pc, #312]	; (8ea0 <sys_clock_announce+0x158>)
    8d66:	f7fe f811 	bl	6d8c <z_spin_lock_valid>
    8d6a:	b940      	cbnz	r0, 8d7e <sys_clock_announce+0x36>
    8d6c:	494d      	ldr	r1, [pc, #308]	; (8ea4 <sys_clock_announce+0x15c>)
    8d6e:	484e      	ldr	r0, [pc, #312]	; (8ea8 <sys_clock_announce+0x160>)
    8d70:	2281      	movs	r2, #129	; 0x81
    8d72:	f000 fbff 	bl	9574 <printk>
    8d76:	484b      	ldr	r0, [pc, #300]	; (8ea4 <sys_clock_announce+0x15c>)
    8d78:	2181      	movs	r1, #129	; 0x81
    8d7a:	f000 fcc7 	bl	970c <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    8d7e:	4e4b      	ldr	r6, [pc, #300]	; (8eac <sys_clock_announce+0x164>)
    8d80:	4f4b      	ldr	r7, [pc, #300]	; (8eb0 <sys_clock_announce+0x168>)
	z_spin_lock_set_owner(l);
    8d82:	4847      	ldr	r0, [pc, #284]	; (8ea0 <sys_clock_announce+0x158>)
	return list->head == list;
    8d84:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8eb4 <sys_clock_announce+0x16c>
    8d88:	f7fe f81e 	bl	6dc8 <z_spin_lock_set_owner>
    8d8c:	46bb      	mov	fp, r7
    8d8e:	6034      	str	r4, [r6, #0]
    8d90:	e9d7 3400 	ldrd	r3, r4, [r7]
    8d94:	f8d6 c000 	ldr.w	ip, [r6]
    8d98:	f8da 8000 	ldr.w	r8, [sl]
    8d9c:	4662      	mov	r2, ip
    8d9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8da2:	45d0      	cmp	r8, sl
    8da4:	ea4f 73e2 	mov.w	r3, r2, asr #31
    8da8:	e9cd 2300 	strd	r2, r3, [sp]
    8dac:	d011      	beq.n	8dd2 <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    8dae:	f1b8 0f00 	cmp.w	r8, #0
    8db2:	d00e      	beq.n	8dd2 <sys_clock_announce+0x8a>
    8db4:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
    8db8:	e9dd 3400 	ldrd	r3, r4, [sp]
    8dbc:	428b      	cmp	r3, r1
    8dbe:	eb74 0302 	sbcs.w	r3, r4, r2
    8dc2:	da2b      	bge.n	8e1c <sys_clock_announce+0xd4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8dc4:	9b00      	ldr	r3, [sp, #0]
    8dc6:	1ac8      	subs	r0, r1, r3
    8dc8:	9b01      	ldr	r3, [sp, #4]
    8dca:	eb62 0103 	sbc.w	r1, r2, r3
    8dce:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
    8dd2:	9b00      	ldr	r3, [sp, #0]
    8dd4:	9a02      	ldr	r2, [sp, #8]
    8dd6:	9903      	ldr	r1, [sp, #12]
    8dd8:	189a      	adds	r2, r3, r2
    8dda:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    8ddc:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
    8de0:	eb41 0303 	adc.w	r3, r1, r3
    8de4:	e9cb 2300 	strd	r2, r3, [fp]
	announce_remaining = 0;
    8de8:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8dea:	f7ff fe17 	bl	8a1c <next_timeout>
    8dee:	4621      	mov	r1, r4
    8df0:	f7fc f850 	bl	4e94 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8df4:	482a      	ldr	r0, [pc, #168]	; (8ea0 <sys_clock_announce+0x158>)
    8df6:	f7fd ffd7 	bl	6da8 <z_spin_unlock_valid>
    8dfa:	b940      	cbnz	r0, 8e0e <sys_clock_announce+0xc6>
    8dfc:	4929      	ldr	r1, [pc, #164]	; (8ea4 <sys_clock_announce+0x15c>)
    8dfe:	482a      	ldr	r0, [pc, #168]	; (8ea8 <sys_clock_announce+0x160>)
    8e00:	22ac      	movs	r2, #172	; 0xac
    8e02:	f000 fbb7 	bl	9574 <printk>
    8e06:	4827      	ldr	r0, [pc, #156]	; (8ea4 <sys_clock_announce+0x15c>)
    8e08:	21ac      	movs	r1, #172	; 0xac
    8e0a:	f000 fc7f 	bl	970c <assert_post_action>
	__asm__ volatile(
    8e0e:	f389 8811 	msr	BASEPRI, r9
    8e12:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8e16:	b005      	add	sp, #20
    8e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    8e1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		announce_remaining -= dt;
    8e20:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    8e24:	1864      	adds	r4, r4, r1
		t->dticks = 0;
    8e26:	f04f 0200 	mov.w	r2, #0
    8e2a:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    8e2e:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
    8e32:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
    8e34:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
    8e38:	4640      	mov	r0, r8
		curr_tick += dt;
    8e3a:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
    8e3e:	f7ff fdd3 	bl	89e8 <remove_timeout>
    8e42:	4817      	ldr	r0, [pc, #92]	; (8ea0 <sys_clock_announce+0x158>)
    8e44:	f7fd ffb0 	bl	6da8 <z_spin_unlock_valid>
    8e48:	b940      	cbnz	r0, 8e5c <sys_clock_announce+0x114>
    8e4a:	4916      	ldr	r1, [pc, #88]	; (8ea4 <sys_clock_announce+0x15c>)
    8e4c:	4816      	ldr	r0, [pc, #88]	; (8ea8 <sys_clock_announce+0x160>)
    8e4e:	22ac      	movs	r2, #172	; 0xac
    8e50:	f000 fb90 	bl	9574 <printk>
    8e54:	4813      	ldr	r0, [pc, #76]	; (8ea4 <sys_clock_announce+0x15c>)
    8e56:	21ac      	movs	r1, #172	; 0xac
    8e58:	f000 fc58 	bl	970c <assert_post_action>
    8e5c:	f389 8811 	msr	BASEPRI, r9
    8e60:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8e64:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8e68:	4640      	mov	r0, r8
    8e6a:	4798      	blx	r3
	__asm__ volatile(
    8e6c:	f04f 0320 	mov.w	r3, #32
    8e70:	f3ef 8911 	mrs	r9, BASEPRI
    8e74:	f383 8812 	msr	BASEPRI_MAX, r3
    8e78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e7c:	4808      	ldr	r0, [pc, #32]	; (8ea0 <sys_clock_announce+0x158>)
    8e7e:	f7fd ff85 	bl	6d8c <z_spin_lock_valid>
    8e82:	b940      	cbnz	r0, 8e96 <sys_clock_announce+0x14e>
    8e84:	4907      	ldr	r1, [pc, #28]	; (8ea4 <sys_clock_announce+0x15c>)
    8e86:	4808      	ldr	r0, [pc, #32]	; (8ea8 <sys_clock_announce+0x160>)
    8e88:	2281      	movs	r2, #129	; 0x81
    8e8a:	f000 fb73 	bl	9574 <printk>
    8e8e:	4805      	ldr	r0, [pc, #20]	; (8ea4 <sys_clock_announce+0x15c>)
    8e90:	2181      	movs	r1, #129	; 0x81
    8e92:	f000 fc3b 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    8e96:	4802      	ldr	r0, [pc, #8]	; (8ea0 <sys_clock_announce+0x158>)
    8e98:	f7fd ff96 	bl	6dc8 <z_spin_lock_set_owner>
	return k;
    8e9c:	e778      	b.n	8d90 <sys_clock_announce+0x48>
    8e9e:	bf00      	nop
    8ea0:	2000120c 	.word	0x2000120c
    8ea4:	0000ab1d 	.word	0x0000ab1d
    8ea8:	0000a66d 	.word	0x0000a66d
    8eac:	20001208 	.word	0x20001208
    8eb0:	20000888 	.word	0x20000888
    8eb4:	200001a0 	.word	0x200001a0

00008eb8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8eb8:	b570      	push	{r4, r5, r6, lr}
    8eba:	f04f 0320 	mov.w	r3, #32
    8ebe:	f3ef 8611 	mrs	r6, BASEPRI
    8ec2:	f383 8812 	msr	BASEPRI_MAX, r3
    8ec6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8eca:	4816      	ldr	r0, [pc, #88]	; (8f24 <sys_clock_tick_get+0x6c>)
    8ecc:	f7fd ff5e 	bl	6d8c <z_spin_lock_valid>
    8ed0:	b940      	cbnz	r0, 8ee4 <sys_clock_tick_get+0x2c>
    8ed2:	4915      	ldr	r1, [pc, #84]	; (8f28 <sys_clock_tick_get+0x70>)
    8ed4:	4815      	ldr	r0, [pc, #84]	; (8f2c <sys_clock_tick_get+0x74>)
    8ed6:	2281      	movs	r2, #129	; 0x81
    8ed8:	f000 fb4c 	bl	9574 <printk>
    8edc:	4812      	ldr	r0, [pc, #72]	; (8f28 <sys_clock_tick_get+0x70>)
    8ede:	2181      	movs	r1, #129	; 0x81
    8ee0:	f000 fc14 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    8ee4:	480f      	ldr	r0, [pc, #60]	; (8f24 <sys_clock_tick_get+0x6c>)
    8ee6:	f7fd ff6f 	bl	6dc8 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8eea:	f7fc f803 	bl	4ef4 <sys_clock_elapsed>
    8eee:	4b10      	ldr	r3, [pc, #64]	; (8f30 <sys_clock_tick_get+0x78>)
    8ef0:	e9d3 4500 	ldrd	r4, r5, [r3]
    8ef4:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ef6:	480b      	ldr	r0, [pc, #44]	; (8f24 <sys_clock_tick_get+0x6c>)
    8ef8:	f145 0500 	adc.w	r5, r5, #0
    8efc:	f7fd ff54 	bl	6da8 <z_spin_unlock_valid>
    8f00:	b940      	cbnz	r0, 8f14 <sys_clock_tick_get+0x5c>
    8f02:	4909      	ldr	r1, [pc, #36]	; (8f28 <sys_clock_tick_get+0x70>)
    8f04:	4809      	ldr	r0, [pc, #36]	; (8f2c <sys_clock_tick_get+0x74>)
    8f06:	22ac      	movs	r2, #172	; 0xac
    8f08:	f000 fb34 	bl	9574 <printk>
    8f0c:	4806      	ldr	r0, [pc, #24]	; (8f28 <sys_clock_tick_get+0x70>)
    8f0e:	21ac      	movs	r1, #172	; 0xac
    8f10:	f000 fbfc 	bl	970c <assert_post_action>
	__asm__ volatile(
    8f14:	f386 8811 	msr	BASEPRI, r6
    8f18:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8f1c:	4620      	mov	r0, r4
    8f1e:	4629      	mov	r1, r5
    8f20:	bd70      	pop	{r4, r5, r6, pc}
    8f22:	bf00      	nop
    8f24:	2000120c 	.word	0x2000120c
    8f28:	0000ab1d 	.word	0x0000ab1d
    8f2c:	0000a66d 	.word	0x0000a66d
    8f30:	20000888 	.word	0x20000888

00008f34 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    8f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f36:	4604      	mov	r4, r0
	__asm__ volatile(
    8f38:	f04f 0320 	mov.w	r3, #32
    8f3c:	f3ef 8511 	mrs	r5, BASEPRI
    8f40:	f383 8812 	msr	BASEPRI_MAX, r3
    8f44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8f48:	483f      	ldr	r0, [pc, #252]	; (9048 <z_timer_expiration_handler+0x114>)
    8f4a:	f7fd ff1f 	bl	6d8c <z_spin_lock_valid>
    8f4e:	b940      	cbnz	r0, 8f62 <z_timer_expiration_handler+0x2e>
    8f50:	493e      	ldr	r1, [pc, #248]	; (904c <z_timer_expiration_handler+0x118>)
    8f52:	483f      	ldr	r0, [pc, #252]	; (9050 <z_timer_expiration_handler+0x11c>)
    8f54:	2281      	movs	r2, #129	; 0x81
    8f56:	f000 fb0d 	bl	9574 <printk>
    8f5a:	483c      	ldr	r0, [pc, #240]	; (904c <z_timer_expiration_handler+0x118>)
    8f5c:	2181      	movs	r1, #129	; 0x81
    8f5e:	f000 fbd5 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    8f62:	4839      	ldr	r0, [pc, #228]	; (9048 <z_timer_expiration_handler+0x114>)
    8f64:	f7fd ff30 	bl	6dc8 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    8f68:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    8f6c:	1c56      	adds	r6, r2, #1
    8f6e:	f143 0700 	adc.w	r7, r3, #0
    8f72:	2f00      	cmp	r7, #0
    8f74:	bf08      	it	eq
    8f76:	2e02      	cmpeq	r6, #2
    8f78:	d303      	bcc.n	8f82 <z_timer_expiration_handler+0x4e>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8f7a:	4936      	ldr	r1, [pc, #216]	; (9054 <z_timer_expiration_handler+0x120>)
    8f7c:	4620      	mov	r0, r4
    8f7e:	f7ff fd79 	bl	8a74 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    8f82:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8f84:	3301      	adds	r3, #1
    8f86:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    8f88:	6a23      	ldr	r3, [r4, #32]
    8f8a:	b35b      	cbz	r3, 8fe4 <z_timer_expiration_handler+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f8c:	482e      	ldr	r0, [pc, #184]	; (9048 <z_timer_expiration_handler+0x114>)
    8f8e:	f7fd ff0b 	bl	6da8 <z_spin_unlock_valid>
    8f92:	b940      	cbnz	r0, 8fa6 <z_timer_expiration_handler+0x72>
    8f94:	492d      	ldr	r1, [pc, #180]	; (904c <z_timer_expiration_handler+0x118>)
    8f96:	482e      	ldr	r0, [pc, #184]	; (9050 <z_timer_expiration_handler+0x11c>)
    8f98:	22ac      	movs	r2, #172	; 0xac
    8f9a:	f000 faeb 	bl	9574 <printk>
    8f9e:	482b      	ldr	r0, [pc, #172]	; (904c <z_timer_expiration_handler+0x118>)
    8fa0:	21ac      	movs	r1, #172	; 0xac
    8fa2:	f000 fbb3 	bl	970c <assert_post_action>
	__asm__ volatile(
    8fa6:	f385 8811 	msr	BASEPRI, r5
    8faa:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    8fae:	6a23      	ldr	r3, [r4, #32]
    8fb0:	4620      	mov	r0, r4
    8fb2:	4798      	blx	r3
	__asm__ volatile(
    8fb4:	f04f 0320 	mov.w	r3, #32
    8fb8:	f3ef 8511 	mrs	r5, BASEPRI
    8fbc:	f383 8812 	msr	BASEPRI_MAX, r3
    8fc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8fc4:	4820      	ldr	r0, [pc, #128]	; (9048 <z_timer_expiration_handler+0x114>)
    8fc6:	f7fd fee1 	bl	6d8c <z_spin_lock_valid>
    8fca:	b940      	cbnz	r0, 8fde <z_timer_expiration_handler+0xaa>
    8fcc:	491f      	ldr	r1, [pc, #124]	; (904c <z_timer_expiration_handler+0x118>)
    8fce:	4820      	ldr	r0, [pc, #128]	; (9050 <z_timer_expiration_handler+0x11c>)
    8fd0:	2281      	movs	r2, #129	; 0x81
    8fd2:	f000 facf 	bl	9574 <printk>
    8fd6:	481d      	ldr	r0, [pc, #116]	; (904c <z_timer_expiration_handler+0x118>)
    8fd8:	2181      	movs	r1, #129	; 0x81
    8fda:	f000 fb97 	bl	970c <assert_post_action>
	z_spin_lock_set_owner(l);
    8fde:	481a      	ldr	r0, [pc, #104]	; (9048 <z_timer_expiration_handler+0x114>)
    8fe0:	f7fd fef2 	bl	6dc8 <z_spin_lock_set_owner>
	return list->head == list;
    8fe4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8fe8:	42a6      	cmp	r6, r4
    8fea:	d000      	beq.n	8fee <z_timer_expiration_handler+0xba>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    8fec:	b98e      	cbnz	r6, 9012 <z_timer_expiration_handler+0xde>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8fee:	4816      	ldr	r0, [pc, #88]	; (9048 <z_timer_expiration_handler+0x114>)
    8ff0:	f7fd feda 	bl	6da8 <z_spin_unlock_valid>
    8ff4:	b940      	cbnz	r0, 9008 <z_timer_expiration_handler+0xd4>
    8ff6:	4915      	ldr	r1, [pc, #84]	; (904c <z_timer_expiration_handler+0x118>)
    8ff8:	4815      	ldr	r0, [pc, #84]	; (9050 <z_timer_expiration_handler+0x11c>)
    8ffa:	22ac      	movs	r2, #172	; 0xac
    8ffc:	f000 faba 	bl	9574 <printk>
    9000:	4812      	ldr	r0, [pc, #72]	; (904c <z_timer_expiration_handler+0x118>)
    9002:	21ac      	movs	r1, #172	; 0xac
    9004:	f000 fb82 	bl	970c <assert_post_action>
	__asm__ volatile(
    9008:	f385 8811 	msr	BASEPRI, r5
    900c:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    9010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    9012:	4630      	mov	r0, r6
    9014:	f7fe fcfc 	bl	7a10 <z_unpend_thread_no_timeout>
    9018:	2300      	movs	r3, #0
    901a:	480b      	ldr	r0, [pc, #44]	; (9048 <z_timer_expiration_handler+0x114>)
    901c:	67b3      	str	r3, [r6, #120]	; 0x78
    901e:	f7fd fec3 	bl	6da8 <z_spin_unlock_valid>
    9022:	b940      	cbnz	r0, 9036 <z_timer_expiration_handler+0x102>
    9024:	4909      	ldr	r1, [pc, #36]	; (904c <z_timer_expiration_handler+0x118>)
    9026:	480a      	ldr	r0, [pc, #40]	; (9050 <z_timer_expiration_handler+0x11c>)
    9028:	22ac      	movs	r2, #172	; 0xac
    902a:	f000 faa3 	bl	9574 <printk>
    902e:	4807      	ldr	r0, [pc, #28]	; (904c <z_timer_expiration_handler+0x118>)
    9030:	21ac      	movs	r1, #172	; 0xac
    9032:	f000 fb6b 	bl	970c <assert_post_action>
    9036:	f385 8811 	msr	BASEPRI, r5
    903a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    903e:	4630      	mov	r0, r6
}
    9040:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    9044:	f7fe bf18 	b.w	7e78 <z_ready_thread>
    9048:	20001210 	.word	0x20001210
    904c:	0000ab1d 	.word	0x0000ab1d
    9050:	0000a66d 	.word	0x0000a66d
    9054:	00008f35 	.word	0x00008f35

00009058 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    9058:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    905c:	4619      	mov	r1, r3
    905e:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9060:	1c4c      	adds	r4, r1, #1
{
    9062:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9064:	bf08      	it	eq
    9066:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    906a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    906e:	4680      	mov	r8, r0
    9070:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9072:	d04c      	beq.n	910e <z_impl_k_timer_start+0xb6>
    9074:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9076:	1c6b      	adds	r3, r5, #1
    9078:	bf08      	it	eq
    907a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    907e:	4614      	mov	r4, r2
    9080:	d019      	beq.n	90b6 <z_impl_k_timer_start+0x5e>
    9082:	ea54 0305 	orrs.w	r3, r4, r5
    9086:	d016      	beq.n	90b6 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    9088:	f06f 0301 	mvn.w	r3, #1
    908c:	ebb3 0a02 	subs.w	sl, r3, r2
    9090:	f04f 33ff 	mov.w	r3, #4294967295
    9094:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9098:	f1ba 0f00 	cmp.w	sl, #0
    909c:	f17b 0300 	sbcs.w	r3, fp, #0
    90a0:	da09      	bge.n	90b6 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    90a2:	f112 34ff 	adds.w	r4, r2, #4294967295
    90a6:	f145 35ff 	adc.w	r5, r5, #4294967295
    90aa:	2c01      	cmp	r4, #1
    90ac:	f175 0300 	sbcs.w	r3, r5, #0
    90b0:	bfbc      	itt	lt
    90b2:	2401      	movlt	r4, #1
    90b4:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    90b6:	f06f 0301 	mvn.w	r3, #1
    90ba:	1a1b      	subs	r3, r3, r0
    90bc:	9300      	str	r3, [sp, #0]
    90be:	f04f 33ff 	mov.w	r3, #4294967295
    90c2:	eb63 0301 	sbc.w	r3, r3, r1
    90c6:	9301      	str	r3, [sp, #4]
    90c8:	e9dd 2300 	ldrd	r2, r3, [sp]
    90cc:	2a00      	cmp	r2, #0
    90ce:	f173 0300 	sbcs.w	r3, r3, #0
    90d2:	da0c      	bge.n	90ee <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    90d4:	f110 38ff 	adds.w	r8, r0, #4294967295
    90d8:	f141 39ff 	adc.w	r9, r1, #4294967295
    90dc:	f1b8 0f00 	cmp.w	r8, #0
    90e0:	f179 0300 	sbcs.w	r3, r9, #0
    90e4:	bfbc      	itt	lt
    90e6:	f04f 0800 	movlt.w	r8, #0
    90ea:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    90ee:	4630      	mov	r0, r6
    90f0:	f7ff fd7a 	bl	8be8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    90f4:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    90f6:	4907      	ldr	r1, [pc, #28]	; (9114 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    90f8:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    90fa:	4642      	mov	r2, r8
    90fc:	464b      	mov	r3, r9
    90fe:	4630      	mov	r0, r6
	timer->period = period;
    9100:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    9104:	b002      	add	sp, #8
    9106:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    910a:	f7ff bcb3 	b.w	8a74 <z_add_timeout>
}
    910e:	b002      	add	sp, #8
    9110:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    9114:	00008f35 	.word	0x00008f35

00009118 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    9118:	4a02      	ldr	r2, [pc, #8]	; (9124 <boot_banner+0xc>)
    911a:	4903      	ldr	r1, [pc, #12]	; (9128 <boot_banner+0x10>)
    911c:	4803      	ldr	r0, [pc, #12]	; (912c <boot_banner+0x14>)
    911e:	f000 ba29 	b.w	9574 <printk>
    9122:	bf00      	nop
    9124:	0000ac40 	.word	0x0000ac40
    9128:	0000b82c 	.word	0x0000b82c
    912c:	0000b83b 	.word	0x0000b83b

00009130 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    9130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    9132:	4b09      	ldr	r3, [pc, #36]	; (9158 <k_sys_work_q_init+0x28>)
    9134:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    9136:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    9138:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    913a:	9300      	str	r3, [sp, #0]
    913c:	4907      	ldr	r1, [pc, #28]	; (915c <k_sys_work_q_init+0x2c>)
    913e:	4808      	ldr	r0, [pc, #32]	; (9160 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    9140:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    9144:	f04f 33ff 	mov.w	r3, #4294967295
    9148:	f44f 6280 	mov.w	r2, #1024	; 0x400
    914c:	f7fe fa90 	bl	7670 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    9150:	4620      	mov	r0, r4
    9152:	b004      	add	sp, #16
    9154:	bd10      	pop	{r4, pc}
    9156:	bf00      	nop
    9158:	0000b862 	.word	0x0000b862
    915c:	200031c0 	.word	0x200031c0
    9160:	20000890 	.word	0x20000890

00009164 <nrf_cc3xx_platform_init_no_rng>:
    9164:	b510      	push	{r4, lr}
    9166:	4c0a      	ldr	r4, [pc, #40]	; (9190 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    9168:	6823      	ldr	r3, [r4, #0]
    916a:	b11b      	cbz	r3, 9174 <nrf_cc3xx_platform_init_no_rng+0x10>
    916c:	2301      	movs	r3, #1
    916e:	6023      	str	r3, [r4, #0]
    9170:	2000      	movs	r0, #0
    9172:	bd10      	pop	{r4, pc}
    9174:	f000 f8d6 	bl	9324 <CC_LibInitNoRng>
    9178:	2800      	cmp	r0, #0
    917a:	d0f7      	beq.n	916c <nrf_cc3xx_platform_init_no_rng+0x8>
    917c:	3801      	subs	r0, #1
    917e:	2806      	cmp	r0, #6
    9180:	d803      	bhi.n	918a <nrf_cc3xx_platform_init_no_rng+0x26>
    9182:	4b04      	ldr	r3, [pc, #16]	; (9194 <nrf_cc3xx_platform_init_no_rng+0x30>)
    9184:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9188:	bd10      	pop	{r4, pc}
    918a:	4803      	ldr	r0, [pc, #12]	; (9198 <nrf_cc3xx_platform_init_no_rng+0x34>)
    918c:	bd10      	pop	{r4, pc}
    918e:	bf00      	nop
    9190:	20001214 	.word	0x20001214
    9194:	0000a5a4 	.word	0x0000a5a4
    9198:	ffff8ffe 	.word	0xffff8ffe

0000919c <nrf_cc3xx_platform_abort>:
    919c:	f3bf 8f4f 	dsb	sy
    91a0:	4905      	ldr	r1, [pc, #20]	; (91b8 <nrf_cc3xx_platform_abort+0x1c>)
    91a2:	4b06      	ldr	r3, [pc, #24]	; (91bc <nrf_cc3xx_platform_abort+0x20>)
    91a4:	68ca      	ldr	r2, [r1, #12]
    91a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    91aa:	4313      	orrs	r3, r2
    91ac:	60cb      	str	r3, [r1, #12]
    91ae:	f3bf 8f4f 	dsb	sy
    91b2:	bf00      	nop
    91b4:	e7fd      	b.n	91b2 <nrf_cc3xx_platform_abort+0x16>
    91b6:	bf00      	nop
    91b8:	e000ed00 	.word	0xe000ed00
    91bc:	05fa0004 	.word	0x05fa0004

000091c0 <CC_PalAbort>:
    91c0:	b4f0      	push	{r4, r5, r6, r7}
    91c2:	4f09      	ldr	r7, [pc, #36]	; (91e8 <CC_PalAbort+0x28>)
    91c4:	4e09      	ldr	r6, [pc, #36]	; (91ec <CC_PalAbort+0x2c>)
    91c6:	4c0a      	ldr	r4, [pc, #40]	; (91f0 <CC_PalAbort+0x30>)
    91c8:	4a0a      	ldr	r2, [pc, #40]	; (91f4 <CC_PalAbort+0x34>)
    91ca:	4d0b      	ldr	r5, [pc, #44]	; (91f8 <CC_PalAbort+0x38>)
    91cc:	490b      	ldr	r1, [pc, #44]	; (91fc <CC_PalAbort+0x3c>)
    91ce:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    91d2:	603b      	str	r3, [r7, #0]
    91d4:	6852      	ldr	r2, [r2, #4]
    91d6:	6033      	str	r3, [r6, #0]
    91d8:	6023      	str	r3, [r4, #0]
    91da:	2400      	movs	r4, #0
    91dc:	602b      	str	r3, [r5, #0]
    91de:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    91e2:	bcf0      	pop	{r4, r5, r6, r7}
    91e4:	4710      	bx	r2
    91e6:	bf00      	nop
    91e8:	5002b400 	.word	0x5002b400
    91ec:	5002b404 	.word	0x5002b404
    91f0:	5002b408 	.word	0x5002b408
    91f4:	200001a8 	.word	0x200001a8
    91f8:	5002b40c 	.word	0x5002b40c
    91fc:	5002a000 	.word	0x5002a000

00009200 <nrf_cc3xx_platform_set_abort>:
    9200:	e9d0 1200 	ldrd	r1, r2, [r0]
    9204:	4b01      	ldr	r3, [pc, #4]	; (920c <nrf_cc3xx_platform_set_abort+0xc>)
    9206:	e9c3 1200 	strd	r1, r2, [r3]
    920a:	4770      	bx	lr
    920c:	200001a8 	.word	0x200001a8

00009210 <mutex_free>:
    9210:	b510      	push	{r4, lr}
    9212:	4604      	mov	r4, r0
    9214:	b130      	cbz	r0, 9224 <mutex_free+0x14>
    9216:	6863      	ldr	r3, [r4, #4]
    9218:	06db      	lsls	r3, r3, #27
    921a:	d502      	bpl.n	9222 <mutex_free+0x12>
    921c:	2300      	movs	r3, #0
    921e:	6023      	str	r3, [r4, #0]
    9220:	6063      	str	r3, [r4, #4]
    9222:	bd10      	pop	{r4, pc}
    9224:	4b02      	ldr	r3, [pc, #8]	; (9230 <mutex_free+0x20>)
    9226:	4803      	ldr	r0, [pc, #12]	; (9234 <mutex_free+0x24>)
    9228:	685b      	ldr	r3, [r3, #4]
    922a:	4798      	blx	r3
    922c:	e7f3      	b.n	9216 <mutex_free+0x6>
    922e:	bf00      	nop
    9230:	200001a8 	.word	0x200001a8
    9234:	0000a5c0 	.word	0x0000a5c0

00009238 <mutex_unlock>:
    9238:	b168      	cbz	r0, 9256 <mutex_unlock+0x1e>
    923a:	6843      	ldr	r3, [r0, #4]
    923c:	b13b      	cbz	r3, 924e <mutex_unlock+0x16>
    923e:	06db      	lsls	r3, r3, #27
    9240:	d507      	bpl.n	9252 <mutex_unlock+0x1a>
    9242:	f3bf 8f5f 	dmb	sy
    9246:	2300      	movs	r3, #0
    9248:	6003      	str	r3, [r0, #0]
    924a:	4618      	mov	r0, r3
    924c:	4770      	bx	lr
    924e:	4803      	ldr	r0, [pc, #12]	; (925c <mutex_unlock+0x24>)
    9250:	4770      	bx	lr
    9252:	4803      	ldr	r0, [pc, #12]	; (9260 <mutex_unlock+0x28>)
    9254:	4770      	bx	lr
    9256:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    925a:	4770      	bx	lr
    925c:	ffff8fea 	.word	0xffff8fea
    9260:	ffff8fe9 	.word	0xffff8fe9

00009264 <mutex_init>:
    9264:	b510      	push	{r4, lr}
    9266:	4604      	mov	r4, r0
    9268:	b120      	cbz	r0, 9274 <mutex_init+0x10>
    926a:	2200      	movs	r2, #0
    926c:	2311      	movs	r3, #17
    926e:	6022      	str	r2, [r4, #0]
    9270:	6063      	str	r3, [r4, #4]
    9272:	bd10      	pop	{r4, pc}
    9274:	4801      	ldr	r0, [pc, #4]	; (927c <mutex_init+0x18>)
    9276:	f7ff ffa3 	bl	91c0 <CC_PalAbort>
    927a:	e7f6      	b.n	926a <mutex_init+0x6>
    927c:	0000a5e8 	.word	0x0000a5e8

00009280 <mutex_lock>:
    9280:	b1c0      	cbz	r0, 92b4 <mutex_lock+0x34>
    9282:	6843      	ldr	r3, [r0, #4]
    9284:	b1a3      	cbz	r3, 92b0 <mutex_lock+0x30>
    9286:	06db      	lsls	r3, r3, #27
    9288:	d510      	bpl.n	92ac <mutex_lock+0x2c>
    928a:	2201      	movs	r2, #1
    928c:	f3bf 8f5b 	dmb	ish
    9290:	e850 3f00 	ldrex	r3, [r0]
    9294:	e840 2100 	strex	r1, r2, [r0]
    9298:	2900      	cmp	r1, #0
    929a:	d1f9      	bne.n	9290 <mutex_lock+0x10>
    929c:	f3bf 8f5b 	dmb	ish
    92a0:	2b01      	cmp	r3, #1
    92a2:	d0f3      	beq.n	928c <mutex_lock+0xc>
    92a4:	f3bf 8f5f 	dmb	sy
    92a8:	2000      	movs	r0, #0
    92aa:	4770      	bx	lr
    92ac:	4803      	ldr	r0, [pc, #12]	; (92bc <mutex_lock+0x3c>)
    92ae:	4770      	bx	lr
    92b0:	4803      	ldr	r0, [pc, #12]	; (92c0 <mutex_lock+0x40>)
    92b2:	4770      	bx	lr
    92b4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    92b8:	4770      	bx	lr
    92ba:	bf00      	nop
    92bc:	ffff8fe9 	.word	0xffff8fe9
    92c0:	ffff8fea 	.word	0xffff8fea

000092c4 <nrf_cc3xx_platform_set_mutexes>:
    92c4:	b570      	push	{r4, r5, r6, lr}
    92c6:	e9d0 2300 	ldrd	r2, r3, [r0]
    92ca:	4c13      	ldr	r4, [pc, #76]	; (9318 <nrf_cc3xx_platform_set_mutexes+0x54>)
    92cc:	4d13      	ldr	r5, [pc, #76]	; (931c <nrf_cc3xx_platform_set_mutexes+0x58>)
    92ce:	e9c4 2300 	strd	r2, r3, [r4]
    92d2:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    92d6:	e9c4 6302 	strd	r6, r3, [r4, #8]
    92da:	4b11      	ldr	r3, [pc, #68]	; (9320 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    92dc:	6808      	ldr	r0, [r1, #0]
    92de:	6018      	str	r0, [r3, #0]
    92e0:	6848      	ldr	r0, [r1, #4]
    92e2:	6058      	str	r0, [r3, #4]
    92e4:	6888      	ldr	r0, [r1, #8]
    92e6:	6098      	str	r0, [r3, #8]
    92e8:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    92ec:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    92f0:	60de      	str	r6, [r3, #12]
    92f2:	6118      	str	r0, [r3, #16]
    92f4:	06cb      	lsls	r3, r1, #27
    92f6:	d50d      	bpl.n	9314 <nrf_cc3xx_platform_set_mutexes+0x50>
    92f8:	2300      	movs	r3, #0
    92fa:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    92fe:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    9302:	f505 7088 	add.w	r0, r5, #272	; 0x110
    9306:	4790      	blx	r2
    9308:	6823      	ldr	r3, [r4, #0]
    930a:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    930e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9312:	4718      	bx	r3
    9314:	bd70      	pop	{r4, r5, r6, pc}
    9316:	bf00      	nop
    9318:	200001b8 	.word	0x200001b8
    931c:	2000164c 	.word	0x2000164c
    9320:	200001c8 	.word	0x200001c8

00009324 <CC_LibInitNoRng>:
    9324:	b510      	push	{r4, lr}
    9326:	f000 f833 	bl	9390 <CC_HalInit>
    932a:	b120      	cbz	r0, 9336 <CC_LibInitNoRng+0x12>
    932c:	2403      	movs	r4, #3
    932e:	f000 f867 	bl	9400 <CC_PalTerminate>
    9332:	4620      	mov	r0, r4
    9334:	bd10      	pop	{r4, pc}
    9336:	f000 f835 	bl	93a4 <CC_PalInit>
    933a:	b990      	cbnz	r0, 9362 <CC_LibInitNoRng+0x3e>
    933c:	f000 f8b0 	bl	94a0 <CC_PalPowerSaveModeSelect>
    9340:	b990      	cbnz	r0, 9368 <CC_LibInitNoRng+0x44>
    9342:	4b0f      	ldr	r3, [pc, #60]	; (9380 <CC_LibInitNoRng+0x5c>)
    9344:	681b      	ldr	r3, [r3, #0]
    9346:	0e1b      	lsrs	r3, r3, #24
    9348:	2bf0      	cmp	r3, #240	; 0xf0
    934a:	d108      	bne.n	935e <CC_LibInitNoRng+0x3a>
    934c:	4a0d      	ldr	r2, [pc, #52]	; (9384 <CC_LibInitNoRng+0x60>)
    934e:	4b0e      	ldr	r3, [pc, #56]	; (9388 <CC_LibInitNoRng+0x64>)
    9350:	6812      	ldr	r2, [r2, #0]
    9352:	429a      	cmp	r2, r3
    9354:	d00a      	beq.n	936c <CC_LibInitNoRng+0x48>
    9356:	2407      	movs	r4, #7
    9358:	f000 f81c 	bl	9394 <CC_HalTerminate>
    935c:	e7e7      	b.n	932e <CC_LibInitNoRng+0xa>
    935e:	2406      	movs	r4, #6
    9360:	e7fa      	b.n	9358 <CC_LibInitNoRng+0x34>
    9362:	2404      	movs	r4, #4
    9364:	4620      	mov	r0, r4
    9366:	bd10      	pop	{r4, pc}
    9368:	2400      	movs	r4, #0
    936a:	e7f5      	b.n	9358 <CC_LibInitNoRng+0x34>
    936c:	2001      	movs	r0, #1
    936e:	f000 f897 	bl	94a0 <CC_PalPowerSaveModeSelect>
    9372:	4604      	mov	r4, r0
    9374:	2800      	cmp	r0, #0
    9376:	d1f7      	bne.n	9368 <CC_LibInitNoRng+0x44>
    9378:	4b04      	ldr	r3, [pc, #16]	; (938c <CC_LibInitNoRng+0x68>)
    937a:	6018      	str	r0, [r3, #0]
    937c:	e7d9      	b.n	9332 <CC_LibInitNoRng+0xe>
    937e:	bf00      	nop
    9380:	5002b928 	.word	0x5002b928
    9384:	5002ba24 	.word	0x5002ba24
    9388:	20e00000 	.word	0x20e00000
    938c:	5002ba0c 	.word	0x5002ba0c

00009390 <CC_HalInit>:
    9390:	2000      	movs	r0, #0
    9392:	4770      	bx	lr

00009394 <CC_HalTerminate>:
    9394:	2000      	movs	r0, #0
    9396:	4770      	bx	lr

00009398 <CC_HalMaskInterrupt>:
    9398:	4b01      	ldr	r3, [pc, #4]	; (93a0 <CC_HalMaskInterrupt+0x8>)
    939a:	6018      	str	r0, [r3, #0]
    939c:	4770      	bx	lr
    939e:	bf00      	nop
    93a0:	5002ba04 	.word	0x5002ba04

000093a4 <CC_PalInit>:
    93a4:	b510      	push	{r4, lr}
    93a6:	4811      	ldr	r0, [pc, #68]	; (93ec <CC_PalInit+0x48>)
    93a8:	f000 f848 	bl	943c <CC_PalMutexCreate>
    93ac:	b100      	cbz	r0, 93b0 <CC_PalInit+0xc>
    93ae:	bd10      	pop	{r4, pc}
    93b0:	480f      	ldr	r0, [pc, #60]	; (93f0 <CC_PalInit+0x4c>)
    93b2:	f000 f843 	bl	943c <CC_PalMutexCreate>
    93b6:	2800      	cmp	r0, #0
    93b8:	d1f9      	bne.n	93ae <CC_PalInit+0xa>
    93ba:	4c0e      	ldr	r4, [pc, #56]	; (93f4 <CC_PalInit+0x50>)
    93bc:	4620      	mov	r0, r4
    93be:	f000 f83d 	bl	943c <CC_PalMutexCreate>
    93c2:	2800      	cmp	r0, #0
    93c4:	d1f3      	bne.n	93ae <CC_PalInit+0xa>
    93c6:	4b0c      	ldr	r3, [pc, #48]	; (93f8 <CC_PalInit+0x54>)
    93c8:	480c      	ldr	r0, [pc, #48]	; (93fc <CC_PalInit+0x58>)
    93ca:	601c      	str	r4, [r3, #0]
    93cc:	f000 f836 	bl	943c <CC_PalMutexCreate>
    93d0:	4601      	mov	r1, r0
    93d2:	2800      	cmp	r0, #0
    93d4:	d1eb      	bne.n	93ae <CC_PalInit+0xa>
    93d6:	f000 f82d 	bl	9434 <CC_PalDmaInit>
    93da:	4604      	mov	r4, r0
    93dc:	b108      	cbz	r0, 93e2 <CC_PalInit+0x3e>
    93de:	4620      	mov	r0, r4
    93e0:	bd10      	pop	{r4, pc}
    93e2:	f000 f83f 	bl	9464 <CC_PalPowerSaveModeInit>
    93e6:	4620      	mov	r0, r4
    93e8:	e7fa      	b.n	93e0 <CC_PalInit+0x3c>
    93ea:	bf00      	nop
    93ec:	20000200 	.word	0x20000200
    93f0:	200001f4 	.word	0x200001f4
    93f4:	200001fc 	.word	0x200001fc
    93f8:	20000204 	.word	0x20000204
    93fc:	200001f8 	.word	0x200001f8

00009400 <CC_PalTerminate>:
    9400:	b508      	push	{r3, lr}
    9402:	4808      	ldr	r0, [pc, #32]	; (9424 <CC_PalTerminate+0x24>)
    9404:	f000 f824 	bl	9450 <CC_PalMutexDestroy>
    9408:	4807      	ldr	r0, [pc, #28]	; (9428 <CC_PalTerminate+0x28>)
    940a:	f000 f821 	bl	9450 <CC_PalMutexDestroy>
    940e:	4807      	ldr	r0, [pc, #28]	; (942c <CC_PalTerminate+0x2c>)
    9410:	f000 f81e 	bl	9450 <CC_PalMutexDestroy>
    9414:	4806      	ldr	r0, [pc, #24]	; (9430 <CC_PalTerminate+0x30>)
    9416:	f000 f81b 	bl	9450 <CC_PalMutexDestroy>
    941a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    941e:	f000 b80b 	b.w	9438 <CC_PalDmaTerminate>
    9422:	bf00      	nop
    9424:	20000200 	.word	0x20000200
    9428:	200001f4 	.word	0x200001f4
    942c:	200001fc 	.word	0x200001fc
    9430:	200001f8 	.word	0x200001f8

00009434 <CC_PalDmaInit>:
    9434:	2000      	movs	r0, #0
    9436:	4770      	bx	lr

00009438 <CC_PalDmaTerminate>:
    9438:	4770      	bx	lr
    943a:	bf00      	nop

0000943c <CC_PalMutexCreate>:
    943c:	b508      	push	{r3, lr}
    943e:	4b03      	ldr	r3, [pc, #12]	; (944c <CC_PalMutexCreate+0x10>)
    9440:	6802      	ldr	r2, [r0, #0]
    9442:	681b      	ldr	r3, [r3, #0]
    9444:	6810      	ldr	r0, [r2, #0]
    9446:	4798      	blx	r3
    9448:	2000      	movs	r0, #0
    944a:	bd08      	pop	{r3, pc}
    944c:	200001b8 	.word	0x200001b8

00009450 <CC_PalMutexDestroy>:
    9450:	b508      	push	{r3, lr}
    9452:	4b03      	ldr	r3, [pc, #12]	; (9460 <CC_PalMutexDestroy+0x10>)
    9454:	6802      	ldr	r2, [r0, #0]
    9456:	685b      	ldr	r3, [r3, #4]
    9458:	6810      	ldr	r0, [r2, #0]
    945a:	4798      	blx	r3
    945c:	2000      	movs	r0, #0
    945e:	bd08      	pop	{r3, pc}
    9460:	200001b8 	.word	0x200001b8

00009464 <CC_PalPowerSaveModeInit>:
    9464:	b570      	push	{r4, r5, r6, lr}
    9466:	4c09      	ldr	r4, [pc, #36]	; (948c <CC_PalPowerSaveModeInit+0x28>)
    9468:	4d09      	ldr	r5, [pc, #36]	; (9490 <CC_PalPowerSaveModeInit+0x2c>)
    946a:	6920      	ldr	r0, [r4, #16]
    946c:	68ab      	ldr	r3, [r5, #8]
    946e:	4798      	blx	r3
    9470:	b118      	cbz	r0, 947a <CC_PalPowerSaveModeInit+0x16>
    9472:	4b08      	ldr	r3, [pc, #32]	; (9494 <CC_PalPowerSaveModeInit+0x30>)
    9474:	4808      	ldr	r0, [pc, #32]	; (9498 <CC_PalPowerSaveModeInit+0x34>)
    9476:	685b      	ldr	r3, [r3, #4]
    9478:	4798      	blx	r3
    947a:	4a08      	ldr	r2, [pc, #32]	; (949c <CC_PalPowerSaveModeInit+0x38>)
    947c:	68eb      	ldr	r3, [r5, #12]
    947e:	6920      	ldr	r0, [r4, #16]
    9480:	2100      	movs	r1, #0
    9482:	6011      	str	r1, [r2, #0]
    9484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9488:	4718      	bx	r3
    948a:	bf00      	nop
    948c:	200001c8 	.word	0x200001c8
    9490:	200001b8 	.word	0x200001b8
    9494:	200001a8 	.word	0x200001a8
    9498:	0000a60c 	.word	0x0000a60c
    949c:	20001228 	.word	0x20001228

000094a0 <CC_PalPowerSaveModeSelect>:
    94a0:	b570      	push	{r4, r5, r6, lr}
    94a2:	4d1a      	ldr	r5, [pc, #104]	; (950c <CC_PalPowerSaveModeSelect+0x6c>)
    94a4:	4e1a      	ldr	r6, [pc, #104]	; (9510 <CC_PalPowerSaveModeSelect+0x70>)
    94a6:	4604      	mov	r4, r0
    94a8:	68b2      	ldr	r2, [r6, #8]
    94aa:	6928      	ldr	r0, [r5, #16]
    94ac:	4790      	blx	r2
    94ae:	b9f0      	cbnz	r0, 94ee <CC_PalPowerSaveModeSelect+0x4e>
    94b0:	b15c      	cbz	r4, 94ca <CC_PalPowerSaveModeSelect+0x2a>
    94b2:	4c18      	ldr	r4, [pc, #96]	; (9514 <CC_PalPowerSaveModeSelect+0x74>)
    94b4:	6823      	ldr	r3, [r4, #0]
    94b6:	b1ab      	cbz	r3, 94e4 <CC_PalPowerSaveModeSelect+0x44>
    94b8:	2b01      	cmp	r3, #1
    94ba:	d01a      	beq.n	94f2 <CC_PalPowerSaveModeSelect+0x52>
    94bc:	3b01      	subs	r3, #1
    94be:	6023      	str	r3, [r4, #0]
    94c0:	6928      	ldr	r0, [r5, #16]
    94c2:	68f3      	ldr	r3, [r6, #12]
    94c4:	4798      	blx	r3
    94c6:	2000      	movs	r0, #0
    94c8:	bd70      	pop	{r4, r5, r6, pc}
    94ca:	4c12      	ldr	r4, [pc, #72]	; (9514 <CC_PalPowerSaveModeSelect+0x74>)
    94cc:	6821      	ldr	r1, [r4, #0]
    94ce:	b939      	cbnz	r1, 94e0 <CC_PalPowerSaveModeSelect+0x40>
    94d0:	4b11      	ldr	r3, [pc, #68]	; (9518 <CC_PalPowerSaveModeSelect+0x78>)
    94d2:	4a12      	ldr	r2, [pc, #72]	; (951c <CC_PalPowerSaveModeSelect+0x7c>)
    94d4:	2001      	movs	r0, #1
    94d6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    94da:	6813      	ldr	r3, [r2, #0]
    94dc:	2b00      	cmp	r3, #0
    94de:	d1fc      	bne.n	94da <CC_PalPowerSaveModeSelect+0x3a>
    94e0:	3101      	adds	r1, #1
    94e2:	6021      	str	r1, [r4, #0]
    94e4:	68f3      	ldr	r3, [r6, #12]
    94e6:	6928      	ldr	r0, [r5, #16]
    94e8:	4798      	blx	r3
    94ea:	2000      	movs	r0, #0
    94ec:	bd70      	pop	{r4, r5, r6, pc}
    94ee:	480c      	ldr	r0, [pc, #48]	; (9520 <CC_PalPowerSaveModeSelect+0x80>)
    94f0:	bd70      	pop	{r4, r5, r6, pc}
    94f2:	4a0a      	ldr	r2, [pc, #40]	; (951c <CC_PalPowerSaveModeSelect+0x7c>)
    94f4:	6813      	ldr	r3, [r2, #0]
    94f6:	2b00      	cmp	r3, #0
    94f8:	d1fc      	bne.n	94f4 <CC_PalPowerSaveModeSelect+0x54>
    94fa:	4a07      	ldr	r2, [pc, #28]	; (9518 <CC_PalPowerSaveModeSelect+0x78>)
    94fc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    9500:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    9504:	f7ff ff48 	bl	9398 <CC_HalMaskInterrupt>
    9508:	6823      	ldr	r3, [r4, #0]
    950a:	e7d7      	b.n	94bc <CC_PalPowerSaveModeSelect+0x1c>
    950c:	200001c8 	.word	0x200001c8
    9510:	200001b8 	.word	0x200001b8
    9514:	20001228 	.word	0x20001228
    9518:	5002a000 	.word	0x5002a000
    951c:	5002b910 	.word	0x5002b910
    9520:	ffff8fe9 	.word	0xffff8fe9

00009524 <event_cb_dummy>:
static void event_cb_dummy(cmd_event_t* p_event) {;}
    9524:	4770      	bx	lr

00009526 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    9526:	440a      	add	r2, r1
    9528:	428a      	cmp	r2, r1
    952a:	d100      	bne.n	952e <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    952c:	4770      	bx	lr
		seed ^= *src++;
    952e:	f811 3b01 	ldrb.w	r3, [r1], #1
    9532:	ba40      	rev16	r0, r0
    9534:	b280      	uxth	r0, r0
    9536:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    9538:	f3c0 1303 	ubfx	r3, r0, #4, #4
    953c:	4058      	eors	r0, r3
		seed ^= seed << 12U;
    953e:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
    9542:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    9544:	0158      	lsls	r0, r3, #5
    9546:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    954a:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    954c:	e7ec      	b.n	9528 <crc16_itu_t+0x2>

0000954e <sys_notify_validate>:
	if (notify == NULL) {
    954e:	4603      	mov	r3, r0
    9550:	b158      	cbz	r0, 956a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9552:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9554:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    9558:	2a01      	cmp	r2, #1
    955a:	d003      	beq.n	9564 <sys_notify_validate+0x16>
    955c:	2a03      	cmp	r2, #3
    955e:	d104      	bne.n	956a <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    9560:	6802      	ldr	r2, [r0, #0]
    9562:	b112      	cbz	r2, 956a <sys_notify_validate+0x1c>
		notify->result = 0;
    9564:	2000      	movs	r0, #0
    9566:	6098      	str	r0, [r3, #8]
    9568:	4770      	bx	lr
		return -EINVAL;
    956a:	f06f 0015 	mvn.w	r0, #21
}
    956e:	4770      	bx	lr

00009570 <arch_printk_char_out>:
}
    9570:	2000      	movs	r0, #0
    9572:	4770      	bx	lr

00009574 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    9574:	b40f      	push	{r0, r1, r2, r3}
    9576:	b507      	push	{r0, r1, r2, lr}
    9578:	a904      	add	r1, sp, #16
    957a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    957e:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
    9580:	f000 f8d3 	bl	972a <z_log_printk>
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
	}
	va_end(ap);
}
    9584:	b003      	add	sp, #12
    9586:	f85d eb04 	ldr.w	lr, [sp], #4
    958a:	b004      	add	sp, #16
    958c:	4770      	bx	lr

0000958e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    958e:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    9590:	f013 0307 	ands.w	r3, r3, #7
    9594:	d105      	bne.n	95a2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    9596:	6803      	ldr	r3, [r0, #0]
    9598:	2b00      	cmp	r3, #0
		evt = EVT_START;
    959a:	bf0c      	ite	eq
    959c:	2000      	moveq	r0, #0
    959e:	2003      	movne	r0, #3
    95a0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    95a2:	2b02      	cmp	r3, #2
    95a4:	d105      	bne.n	95b2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    95a6:	8bc3      	ldrh	r3, [r0, #30]
    95a8:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    95aa:	bf14      	ite	ne
    95ac:	2000      	movne	r0, #0
    95ae:	2004      	moveq	r0, #4
    95b0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    95b2:	2b01      	cmp	r3, #1
    95b4:	d105      	bne.n	95c2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    95b6:	6803      	ldr	r3, [r0, #0]
    95b8:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    95ba:	bf0c      	ite	eq
    95bc:	2000      	moveq	r0, #0
    95be:	2005      	movne	r0, #5
    95c0:	4770      	bx	lr
	int evt = EVT_NOP;
    95c2:	2000      	movs	r0, #0
}
    95c4:	4770      	bx	lr

000095c6 <notify_one>:
{
    95c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95ca:	460d      	mov	r5, r1
    95cc:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    95ce:	4619      	mov	r1, r3
    95d0:	1d28      	adds	r0, r5, #4
{
    95d2:	4690      	mov	r8, r2
    95d4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    95d6:	f7f7 fefd 	bl	13d4 <sys_notify_finalize>
	if (cb) {
    95da:	4604      	mov	r4, r0
    95dc:	b138      	cbz	r0, 95ee <notify_one+0x28>
		cb(mgr, cli, state, res);
    95de:	4633      	mov	r3, r6
    95e0:	4642      	mov	r2, r8
    95e2:	4629      	mov	r1, r5
    95e4:	4638      	mov	r0, r7
    95e6:	46a4      	mov	ip, r4
}
    95e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    95ec:	4760      	bx	ip
}
    95ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000095f2 <validate_args>:
{
    95f2:	b510      	push	{r4, lr}
    95f4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    95f6:	b140      	cbz	r0, 960a <validate_args+0x18>
    95f8:	b139      	cbz	r1, 960a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    95fa:	1d08      	adds	r0, r1, #4
    95fc:	f7ff ffa7 	bl	954e <sys_notify_validate>
	if ((rv == 0)
    9600:	b928      	cbnz	r0, 960e <validate_args+0x1c>
	    && ((cli->notify.flags
    9602:	68a3      	ldr	r3, [r4, #8]
    9604:	f033 0303 	bics.w	r3, r3, #3
    9608:	d001      	beq.n	960e <validate_args+0x1c>
		rv = -EINVAL;
    960a:	f06f 0015 	mvn.w	r0, #21
}
    960e:	bd10      	pop	{r4, pc}

00009610 <onoff_manager_init>:
{
    9610:	b538      	push	{r3, r4, r5, lr}
    9612:	460c      	mov	r4, r1
	if ((mgr == NULL)
    9614:	4605      	mov	r5, r0
    9616:	b158      	cbz	r0, 9630 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9618:	b151      	cbz	r1, 9630 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    961a:	680b      	ldr	r3, [r1, #0]
    961c:	b143      	cbz	r3, 9630 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    961e:	684b      	ldr	r3, [r1, #4]
    9620:	b133      	cbz	r3, 9630 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9622:	2220      	movs	r2, #32
    9624:	2100      	movs	r1, #0
    9626:	f000 f90b 	bl	9840 <memset>
    962a:	612c      	str	r4, [r5, #16]
	return 0;
    962c:	2000      	movs	r0, #0
}
    962e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9630:	f06f 0015 	mvn.w	r0, #21
    9634:	e7fb      	b.n	962e <onoff_manager_init+0x1e>

00009636 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9636:	4604      	mov	r4, r0
    9638:	b508      	push	{r3, lr}
    963a:	4608      	mov	r0, r1
    963c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    963e:	461a      	mov	r2, r3
    9640:	47a0      	blx	r4
	return z_impl_z_current_get();
    9642:	f7ff f8ab 	bl	879c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9646:	f7f9 fef1 	bl	342c <z_impl_k_thread_abort>

0000964a <encode_uint>:
{
    964a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    964e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    9650:	78d3      	ldrb	r3, [r2, #3]
{
    9652:	4614      	mov	r4, r2
	switch (specifier) {
    9654:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    9656:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    965a:	4606      	mov	r6, r0
    965c:	460f      	mov	r7, r1
    965e:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    9660:	d02d      	beq.n	96be <encode_uint+0x74>
    9662:	d828      	bhi.n	96b6 <encode_uint+0x6c>
		return 16;
    9664:	2b58      	cmp	r3, #88	; 0x58
    9666:	bf14      	ite	ne
    9668:	250a      	movne	r5, #10
    966a:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    966c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    9670:	46aa      	mov	sl, r5
    9672:	f04f 0b00 	mov.w	fp, #0
    9676:	4652      	mov	r2, sl
    9678:	465b      	mov	r3, fp
    967a:	4630      	mov	r0, r6
    967c:	4639      	mov	r1, r7
    967e:	f7f6 fd3f 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9682:	2a09      	cmp	r2, #9
    9684:	b2d3      	uxtb	r3, r2
    9686:	d81f      	bhi.n	96c8 <encode_uint+0x7e>
    9688:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    968a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    968c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    968e:	bf08      	it	eq
    9690:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9692:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    9696:	d301      	bcc.n	969c <encode_uint+0x52>
    9698:	45c8      	cmp	r8, r9
    969a:	d812      	bhi.n	96c2 <encode_uint+0x78>
	if (conv->flag_hash) {
    969c:	7823      	ldrb	r3, [r4, #0]
    969e:	069b      	lsls	r3, r3, #26
    96a0:	d505      	bpl.n	96ae <encode_uint+0x64>
		if (radix == 8) {
    96a2:	2d08      	cmp	r5, #8
    96a4:	d116      	bne.n	96d4 <encode_uint+0x8a>
			conv->altform_0 = true;
    96a6:	78a3      	ldrb	r3, [r4, #2]
    96a8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    96ac:	70a3      	strb	r3, [r4, #2]
}
    96ae:	4640      	mov	r0, r8
    96b0:	b003      	add	sp, #12
    96b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    96b6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    96ba:	2b70      	cmp	r3, #112	; 0x70
    96bc:	e7d3      	b.n	9666 <encode_uint+0x1c>
	switch (specifier) {
    96be:	2508      	movs	r5, #8
    96c0:	e7d4      	b.n	966c <encode_uint+0x22>
		value /= radix;
    96c2:	4606      	mov	r6, r0
    96c4:	460f      	mov	r7, r1
    96c6:	e7d6      	b.n	9676 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    96c8:	9a01      	ldr	r2, [sp, #4]
    96ca:	2a19      	cmp	r2, #25
    96cc:	bf94      	ite	ls
    96ce:	3337      	addls	r3, #55	; 0x37
    96d0:	3357      	addhi	r3, #87	; 0x57
    96d2:	e7da      	b.n	968a <encode_uint+0x40>
		} else if (radix == 16) {
    96d4:	2d10      	cmp	r5, #16
    96d6:	d1ea      	bne.n	96ae <encode_uint+0x64>
			conv->altform_0c = true;
    96d8:	78a3      	ldrb	r3, [r4, #2]
    96da:	f043 0310 	orr.w	r3, r3, #16
    96de:	e7e5      	b.n	96ac <encode_uint+0x62>

000096e0 <outs>:
{
    96e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96e4:	4607      	mov	r7, r0
    96e6:	4688      	mov	r8, r1
    96e8:	4615      	mov	r5, r2
    96ea:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    96ec:	4614      	mov	r4, r2
    96ee:	42b4      	cmp	r4, r6
    96f0:	eba4 0005 	sub.w	r0, r4, r5
    96f4:	d302      	bcc.n	96fc <outs+0x1c>
    96f6:	b93e      	cbnz	r6, 9708 <outs+0x28>
    96f8:	7823      	ldrb	r3, [r4, #0]
    96fa:	b12b      	cbz	r3, 9708 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    96fc:	f814 0b01 	ldrb.w	r0, [r4], #1
    9700:	4641      	mov	r1, r8
    9702:	47b8      	blx	r7
		if (rc < 0) {
    9704:	2800      	cmp	r0, #0
    9706:	daf2      	bge.n	96ee <outs+0xe>
}
    9708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000970c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    970c:	4040      	eors	r0, r0
    970e:	f380 8811 	msr	BASEPRI, r0
    9712:	f04f 0004 	mov.w	r0, #4
    9716:	df02      	svc	2
}
    9718:	4770      	bx	lr

0000971a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    971a:	4770      	bx	lr

0000971c <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    971c:	6843      	ldr	r3, [r0, #4]
}
    971e:	7958      	ldrb	r0, [r3, #5]
    9720:	4770      	bx	lr

00009722 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9722:	f000 bb57 	b.w	9dd4 <sys_clock_cycle_get_32>

00009726 <dummy_timestamp>:
    9726:	2000      	movs	r0, #0
    9728:	4770      	bx	lr

0000972a <z_log_printk>:
			log_generic(src_level_union.structure, fmt, ap,
    972a:	2300      	movs	r3, #0
{
    972c:	460a      	mov	r2, r1
			log_generic(src_level_union.structure, fmt, ap,
    972e:	4601      	mov	r1, r0
    9730:	4618      	mov	r0, r3
    9732:	f7f8 bcaf 	b.w	2094 <log_generic>

00009736 <log_string_sync>:
{
    9736:	b40e      	push	{r1, r2, r3}
    9738:	b503      	push	{r0, r1, lr}
    973a:	aa03      	add	r2, sp, #12
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
    973c:	2300      	movs	r3, #0
{
    973e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
    9742:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
    9744:	f7f8 fca6 	bl	2094 <log_generic>
}
    9748:	b002      	add	sp, #8
    974a:	f85d eb04 	ldr.w	lr, [sp], #4
    974e:	b003      	add	sp, #12
    9750:	4770      	bx	lr

00009752 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    9752:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    9754:	f7f8 fd12 	bl	217c <log_init>
	}

	return 0;
}
    9758:	2000      	movs	r0, #0
    975a:	bd08      	pop	{r3, pc}

0000975c <z_log_strdup>:
}
    975c:	4770      	bx	lr

0000975e <z_log_get_tag>:
}
    975e:	2000      	movs	r0, #0
    9760:	4770      	bx	lr

00009762 <out_func>:
{
    9762:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
    9764:	e9d1 3200 	ldrd	r3, r2, [r1]
{
    9768:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
    976a:	6852      	ldr	r2, [r2, #4]
    976c:	2101      	movs	r1, #1
    976e:	a801      	add	r0, sp, #4
    9770:	4798      	blx	r3
}
    9772:	2000      	movs	r0, #0
    9774:	b003      	add	sp, #12
    9776:	f85d fb04 	ldr.w	pc, [sp], #4

0000977a <buffer_write>:
{
    977a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    977c:	4606      	mov	r6, r0
    977e:	460d      	mov	r5, r1
    9780:	4614      	mov	r4, r2
    9782:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    9784:	4621      	mov	r1, r4
    9786:	4628      	mov	r0, r5
    9788:	463a      	mov	r2, r7
    978a:	47b0      	blx	r6
	} while (len != 0);
    978c:	1a24      	subs	r4, r4, r0
		buf += processed;
    978e:	4405      	add	r5, r0
	} while (len != 0);
    9790:	d1f8      	bne.n	9784 <buffer_write+0xa>
}
    9792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009794 <log_output_flush>:
		     output->control_block->offset,
    9794:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    9796:	6881      	ldr	r1, [r0, #8]
{
    9798:	b510      	push	{r4, lr}
    979a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    979c:	e9d2 2300 	ldrd	r2, r3, [r2]
    97a0:	6800      	ldr	r0, [r0, #0]
    97a2:	f7ff ffea 	bl	977a <buffer_write>
	output->control_block->offset = 0;
    97a6:	6863      	ldr	r3, [r4, #4]
    97a8:	2200      	movs	r2, #0
    97aa:	601a      	str	r2, [r3, #0]
}
    97ac:	bd10      	pop	{r4, pc}

000097ae <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    97ae:	2200      	movs	r2, #0
    97b0:	e9c0 2200 	strd	r2, r2, [r0]
    97b4:	6082      	str	r2, [r0, #8]
}
    97b6:	4770      	bx	lr

000097b8 <abort_function>:
{
    97b8:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    97ba:	2000      	movs	r0, #0
    97bc:	f7f8 fc56 	bl	206c <sys_reboot>

000097c0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    97c0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    97c2:	6800      	ldr	r0, [r0, #0]
    97c4:	f7f9 b9ba 	b.w	2b3c <z_arm_fatal_error>

000097c8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    97c8:	2100      	movs	r1, #0
    97ca:	2001      	movs	r0, #1
    97cc:	f7f9 b9b6 	b.w	2b3c <z_arm_fatal_error>

000097d0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    97d0:	b508      	push	{r3, lr}
	handler();
    97d2:	f7f9 fa45 	bl	2c60 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    97d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    97da:	f7f9 bb21 	b.w	2e20 <z_arm_exc_exit>

000097de <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    97de:	3901      	subs	r1, #1
    97e0:	4603      	mov	r3, r0
    97e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    97e6:	b90a      	cbnz	r2, 97ec <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    97e8:	701a      	strb	r2, [r3, #0]

	return dest;
}
    97ea:	4770      	bx	lr
		*d = *s;
    97ec:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    97f0:	e7f7      	b.n	97e2 <strcpy+0x4>

000097f2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    97f2:	4603      	mov	r3, r0
	size_t n = 0;
    97f4:	2000      	movs	r0, #0

	while (*s != '\0') {
    97f6:	5c1a      	ldrb	r2, [r3, r0]
    97f8:	b902      	cbnz	r2, 97fc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    97fa:	4770      	bx	lr
		n++;
    97fc:	3001      	adds	r0, #1
    97fe:	e7fa      	b.n	97f6 <strlen+0x4>

00009800 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    9800:	4603      	mov	r3, r0
	size_t n = 0;
    9802:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    9804:	5c1a      	ldrb	r2, [r3, r0]
    9806:	b10a      	cbz	r2, 980c <strnlen+0xc>
    9808:	4288      	cmp	r0, r1
    980a:	d100      	bne.n	980e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    980c:	4770      	bx	lr
		n++;
    980e:	3001      	adds	r0, #1
    9810:	e7f8      	b.n	9804 <strnlen+0x4>

00009812 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    9812:	1e43      	subs	r3, r0, #1
    9814:	3901      	subs	r1, #1
    9816:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    981a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    981e:	4282      	cmp	r2, r0
    9820:	d101      	bne.n	9826 <strcmp+0x14>
    9822:	2a00      	cmp	r2, #0
    9824:	d1f7      	bne.n	9816 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    9826:	1a10      	subs	r0, r2, r0
    9828:	4770      	bx	lr

0000982a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    982a:	b510      	push	{r4, lr}
    982c:	1e43      	subs	r3, r0, #1
    982e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    9830:	4291      	cmp	r1, r2
    9832:	d100      	bne.n	9836 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    9834:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    9836:	f811 4b01 	ldrb.w	r4, [r1], #1
    983a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    983e:	e7f7      	b.n	9830 <memcpy+0x6>

00009840 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    9840:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    9842:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    9844:	4603      	mov	r3, r0
	while (n > 0) {
    9846:	4293      	cmp	r3, r2
    9848:	d100      	bne.n	984c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    984a:	4770      	bx	lr
		*(d_byte++) = c_byte;
    984c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9850:	e7f9      	b.n	9846 <memset+0x6>

00009852 <_stdout_hook_default>:
}
    9852:	f04f 30ff 	mov.w	r0, #4294967295
    9856:	4770      	bx	lr

00009858 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    9858:	b084      	sub	sp, #16
    985a:	ab04      	add	r3, sp, #16
    985c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    9860:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9864:	2b06      	cmp	r3, #6
    9866:	d108      	bne.n	987a <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    986c:	2201      	movs	r2, #1
    986e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9872:	f3bf 8f4f 	dsb	sy
        __WFE();
    9876:	bf20      	wfe
    while (true)
    9878:	e7fd      	b.n	9876 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    987a:	b004      	add	sp, #16
    987c:	4770      	bx	lr

0000987e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    987e:	b084      	sub	sp, #16
    9880:	ab04      	add	r3, sp, #16
    9882:	e903 0007 	stmdb	r3, {r0, r1, r2}
    9886:	2300      	movs	r3, #0
    9888:	f383 8811 	msr	BASEPRI, r3
    988c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9890:	b004      	add	sp, #16
    9892:	4770      	bx	lr

00009894 <set_starting_state>:
{
    9894:	b510      	push	{r4, lr}
	__asm__ volatile(
    9896:	f04f 0320 	mov.w	r3, #32
    989a:	f3ef 8211 	mrs	r2, BASEPRI
    989e:	f383 8812 	msr	BASEPRI_MAX, r3
    98a2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    98a6:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    98a8:	f003 0407 	and.w	r4, r3, #7
    98ac:	2c01      	cmp	r4, #1
    98ae:	d106      	bne.n	98be <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    98b0:	6001      	str	r1, [r0, #0]
	int err = 0;
    98b2:	2000      	movs	r0, #0
	__asm__ volatile(
    98b4:	f382 8811 	msr	BASEPRI, r2
    98b8:	f3bf 8f6f 	isb	sy
}
    98bc:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    98be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    98c2:	428b      	cmp	r3, r1
		err = -EALREADY;
    98c4:	bf14      	ite	ne
    98c6:	f04f 30ff 	movne.w	r0, #4294967295
    98ca:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    98ce:	e7f1      	b.n	98b4 <set_starting_state+0x20>

000098d0 <set_on_state>:
	__asm__ volatile(
    98d0:	f04f 0320 	mov.w	r3, #32
    98d4:	f3ef 8211 	mrs	r2, BASEPRI
    98d8:	f383 8812 	msr	BASEPRI_MAX, r3
    98dc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    98e0:	6803      	ldr	r3, [r0, #0]
    98e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    98e6:	f043 0302 	orr.w	r3, r3, #2
    98ea:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    98ec:	f382 8811 	msr	BASEPRI, r2
    98f0:	f3bf 8f6f 	isb	sy
}
    98f4:	4770      	bx	lr

000098f6 <onoff_started_callback>:
	return &data->mgr[type];
    98f6:	6900      	ldr	r0, [r0, #16]
    98f8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    98fa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    98fe:	2100      	movs	r1, #0
    9900:	4710      	bx	r2

00009902 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9902:	2000      	movs	r0, #0
    9904:	f7fb bfaa 	b.w	585c <nrfx_clock_start>

00009908 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9908:	2000      	movs	r0, #0
    990a:	f7fb bff5 	b.w	58f8 <nrfx_clock_stop>

0000990e <api_stop>:
	return stop(dev, subsys, CTX_API);
    990e:	2280      	movs	r2, #128	; 0x80
    9910:	f7f9 bf50 	b.w	37b4 <stop>

00009914 <blocking_start_callback>:
{
    9914:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9916:	f7fd bbfb 	b.w	7110 <z_impl_k_sem_give>

0000991a <api_start>:
{
    991a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    991e:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
    9920:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    9922:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    9924:	434c      	muls	r4, r1
{
    9926:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    9928:	f104 0048 	add.w	r0, r4, #72	; 0x48
    992c:	2180      	movs	r1, #128	; 0x80
    992e:	4428      	add	r0, r5
{
    9930:	4690      	mov	r8, r2
    9932:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    9934:	f7ff ffae 	bl	9894 <set_starting_state>
	if (err < 0) {
    9938:	2800      	cmp	r0, #0
    993a:	db06      	blt.n	994a <api_start+0x30>
	subdata->cb = cb;
    993c:	4425      	add	r5, r4
	subdata->user_data = user_data;
    993e:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    9942:	6873      	ldr	r3, [r6, #4]
    9944:	591b      	ldr	r3, [r3, r4]
    9946:	4798      	blx	r3
	return 0;
    9948:	2000      	movs	r0, #0
}
    994a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000994e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    994e:	6843      	ldr	r3, [r0, #4]
    9950:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9952:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9956:	600b      	str	r3, [r1, #0]
}
    9958:	2000      	movs	r0, #0
    995a:	4770      	bx	lr

0000995c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    995c:	6843      	ldr	r3, [r0, #4]
    995e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    9960:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    9964:	4042      	eors	r2, r0
    9966:	400a      	ands	r2, r1
    9968:	4042      	eors	r2, r0
    p_reg->OUT = value;
    996a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    996e:	2000      	movs	r0, #0
    9970:	4770      	bx	lr

00009972 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9972:	6843      	ldr	r3, [r0, #4]
    9974:	685b      	ldr	r3, [r3, #4]
}
    9976:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9978:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    997c:	4770      	bx	lr

0000997e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    997e:	6843      	ldr	r3, [r0, #4]
    9980:	685b      	ldr	r3, [r3, #4]
}
    9982:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    9984:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9988:	4770      	bx	lr

0000998a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    998a:	6843      	ldr	r3, [r0, #4]
    998c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    998e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    9992:	404b      	eors	r3, r1
    p_reg->OUT = value;
    9994:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    9998:	2000      	movs	r0, #0
    999a:	4770      	bx	lr

0000999c <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    999c:	6902      	ldr	r2, [r0, #16]
{
    999e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    99a0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    99a4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    99a8:	2000      	movs	r0, #0
    99aa:	4770      	bx	lr

000099ac <uarte_nrfx_err_check>:
	return config->uarte_regs;
    99ac:	6843      	ldr	r3, [r0, #4]
    99ae:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    99b0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    99b4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    99b8:	4770      	bx	lr

000099ba <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    99ba:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    99bc:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    99be:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    99c2:	b940      	cbnz	r0, 99d6 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    99c4:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    99c6:	0792      	lsls	r2, r2, #30
    99c8:	d406      	bmi.n	99d8 <is_tx_ready+0x1e>
    99ca:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    99ce:	3800      	subs	r0, #0
    99d0:	bf18      	it	ne
    99d2:	2001      	movne	r0, #1
    99d4:	4770      	bx	lr
    99d6:	2001      	movs	r0, #1
}
    99d8:	4770      	bx	lr

000099da <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
    99da:	4770      	bx	lr

000099dc <user_callback>:
	if (data->async->user_callback) {
    99dc:	6903      	ldr	r3, [r0, #16]
    99de:	68da      	ldr	r2, [r3, #12]
    99e0:	6813      	ldr	r3, [r2, #0]
    99e2:	b10b      	cbz	r3, 99e8 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    99e4:	6852      	ldr	r2, [r2, #4]
    99e6:	4718      	bx	r3
}
    99e8:	4770      	bx	lr

000099ea <notify_uart_rx_rdy>:
{
    99ea:	b570      	push	{r4, r5, r6, lr}
    99ec:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
    99ee:	6906      	ldr	r6, [r0, #16]
{
    99f0:	4604      	mov	r4, r0
    99f2:	460d      	mov	r5, r1
	struct uart_event evt = {
    99f4:	2214      	movs	r2, #20
    99f6:	2100      	movs	r1, #0
    99f8:	a801      	add	r0, sp, #4
    99fa:	f7ff ff21 	bl	9840 <memset>
    99fe:	2302      	movs	r3, #2
    9a00:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    9a04:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    9a06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    9a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    9a0a:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    9a0c:	a901      	add	r1, sp, #4
    9a0e:	4620      	mov	r0, r4
	struct uart_event evt = {
    9a10:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    9a14:	f7ff ffe2 	bl	99dc <user_callback>
}
    9a18:	b006      	add	sp, #24
    9a1a:	bd70      	pop	{r4, r5, r6, pc}

00009a1c <notify_rx_buf_release>:
{
    9a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
    9a1e:	680f      	ldr	r7, [r1, #0]
{
    9a20:	b087      	sub	sp, #28
    9a22:	4606      	mov	r6, r0
    9a24:	460c      	mov	r4, r1
    9a26:	4615      	mov	r5, r2
	if (*buf) {
    9a28:	b187      	cbz	r7, 9a4c <notify_rx_buf_release+0x30>
		struct uart_event evt = {
    9a2a:	2100      	movs	r1, #0
    9a2c:	2214      	movs	r2, #20
    9a2e:	a801      	add	r0, sp, #4
    9a30:	f7ff ff06 	bl	9840 <memset>
    9a34:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    9a36:	eb0d 0103 	add.w	r1, sp, r3
    9a3a:	4630      	mov	r0, r6
		struct uart_event evt = {
    9a3c:	f88d 3004 	strb.w	r3, [sp, #4]
    9a40:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
    9a42:	f7ff ffcb 	bl	99dc <user_callback>
		if (clear) {
    9a46:	b10d      	cbz	r5, 9a4c <notify_rx_buf_release+0x30>
			*buf = NULL;
    9a48:	2300      	movs	r3, #0
    9a4a:	6023      	str	r3, [r4, #0]
}
    9a4c:	b007      	add	sp, #28
    9a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009a50 <notify_rx_disable>:
{
    9a50:	b510      	push	{r4, lr}
    9a52:	b086      	sub	sp, #24
    9a54:	4604      	mov	r4, r0
	struct uart_event evt = {
    9a56:	2214      	movs	r2, #20
    9a58:	2100      	movs	r1, #0
    9a5a:	a801      	add	r0, sp, #4
    9a5c:	f7ff fef0 	bl	9840 <memset>
    9a60:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    9a62:	a901      	add	r1, sp, #4
    9a64:	4620      	mov	r0, r4
	struct uart_event evt = {
    9a66:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    9a6a:	f7ff ffb7 	bl	99dc <user_callback>
}
    9a6e:	b006      	add	sp, #24
    9a70:	bd10      	pop	{r4, pc}

00009a72 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    9a72:	6843      	ldr	r3, [r0, #4]
{
    9a74:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    9a76:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9a78:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    9a7a:	f04f 0020 	mov.w	r0, #32
    9a7e:	f3ef 8511 	mrs	r5, BASEPRI
    9a82:	f380 8812 	msr	BASEPRI_MAX, r0
    9a86:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    9a8a:	68e4      	ldr	r4, [r4, #12]
    9a8c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    9a8e:	b190      	cbz	r0, 9ab6 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    9a90:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    9a92:	b998      	cbnz	r0, 9abc <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    9a94:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9a98:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    9a9c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    9aa0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    9aa4:	f042 0220 	orr.w	r2, r2, #32
    9aa8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    9aac:	f385 8811 	msr	BASEPRI, r5
    9ab0:	f3bf 8f6f 	isb	sy
}
    9ab4:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    9ab6:	f06f 000c 	mvn.w	r0, #12
    9aba:	e7f7      	b.n	9aac <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    9abc:	f06f 000f 	mvn.w	r0, #15
    9ac0:	e7f4      	b.n	9aac <uarte_nrfx_rx_buf_rsp+0x3a>

00009ac2 <uarte_nrfx_callback_set>:
	if (!data->async) {
    9ac2:	6903      	ldr	r3, [r0, #16]
    9ac4:	68db      	ldr	r3, [r3, #12]
    9ac6:	b11b      	cbz	r3, 9ad0 <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    9ac8:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    9acc:	2000      	movs	r0, #0
    9ace:	4770      	bx	lr
		return -ENOTSUP;
    9ad0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    9ad4:	4770      	bx	lr

00009ad6 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    9ad6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    9ad8:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    9ada:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    9adc:	681b      	ldr	r3, [r3, #0]
{
    9ade:	b510      	push	{r4, lr}
	if (data->async) {
    9ae0:	b958      	cbnz	r0, 9afa <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ae2:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9ae6:	b15c      	cbz	r4, 9b00 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    9ae8:	7d52      	ldrb	r2, [r2, #21]
    9aea:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9aec:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9af0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9af4:	2201      	movs	r2, #1
    9af6:	601a      	str	r2, [r3, #0]
}
    9af8:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    9afa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9afe:	e7fb      	b.n	9af8 <uarte_nrfx_poll_in+0x22>
		return -1;
    9b00:	f04f 30ff 	mov.w	r0, #4294967295
    9b04:	e7f8      	b.n	9af8 <uarte_nrfx_poll_in+0x22>

00009b06 <uarte_enable>:
{
    9b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9b08:	6907      	ldr	r7, [r0, #16]
	if (data->async) {
    9b0a:	68fb      	ldr	r3, [r7, #12]
{
    9b0c:	4604      	mov	r4, r0
	if (data->async) {
    9b0e:	b92b      	cbnz	r3, 9b1c <uarte_enable+0x16>
	return config->uarte_regs;
    9b10:	6863      	ldr	r3, [r4, #4]
    9b12:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    9b14:	2208      	movs	r2, #8
    9b16:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    9b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bool disabled = data->async->low_power_mask == 0;
    9b1c:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
    9b20:	6846      	ldr	r6, [r0, #4]
		data->async->low_power_mask |= mask;
    9b22:	4329      	orrs	r1, r5
    9b24:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
		if (hw_rx_counting_enabled(data) && disabled) {
    9b28:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
    9b2c:	2b00      	cmp	r3, #0
    9b2e:	d0ef      	beq.n	9b10 <uarte_enable+0xa>
    9b30:	2d00      	cmp	r5, #0
    9b32:	d1ed      	bne.n	9b10 <uarte_enable+0xa>
			const nrfx_timer_t *timer = &get_dev_config(dev)->timer;
    9b34:	3620      	adds	r6, #32
			nrfx_timer_enable(timer);
    9b36:	4630      	mov	r0, r6
    9b38:	f7fc fc18 	bl	636c <nrfx_timer_enable>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
    9b3c:	68fb      	ldr	r3, [r7, #12]
    9b3e:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
    9b42:	42ab      	cmp	r3, r5
    9b44:	dde4      	ble.n	9b10 <uarte_enable+0xa>
				nrfx_timer_increment(timer);
    9b46:	4630      	mov	r0, r6
    9b48:	f7fc fc90 	bl	646c <nrfx_timer_increment>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
    9b4c:	3501      	adds	r5, #1
    9b4e:	e7f5      	b.n	9b3c <uarte_enable+0x36>

00009b50 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    9b50:	6843      	ldr	r3, [r0, #4]
{
    9b52:	b510      	push	{r4, lr}
	return config->uarte_regs;
    9b54:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9b56:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9b5a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9b5e:	2200      	movs	r2, #0
    9b60:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    9b64:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    9b68:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9b6c:	685b      	ldr	r3, [r3, #4]
    9b6e:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
    9b72:	06db      	lsls	r3, r3, #27
    9b74:	d506      	bpl.n	9b84 <tx_start+0x34>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    9b76:	2101      	movs	r1, #1
    9b78:	f7ff ffc5 	bl	9b06 <uarte_enable>
    p_reg->INTENSET = mask;
    9b7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    9b80:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9b84:	2301      	movs	r3, #1
    9b86:	60a3      	str	r3, [r4, #8]
}
    9b88:	bd10      	pop	{r4, pc}

00009b8a <rx_timeout>:
{
    9b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
    9b8c:	6b45      	ldr	r5, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    9b8e:	68eb      	ldr	r3, [r5, #12]
    9b90:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    9b94:	f002 07ff 	and.w	r7, r2, #255	; 0xff
    9b98:	2a00      	cmp	r2, #0
    9b9a:	d134      	bne.n	9c06 <rx_timeout+0x7c>
	const struct device *dev = data->dev;
    9b9c:	682e      	ldr	r6, [r5, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    9b9e:	6870      	ldr	r0, [r6, #4]
	return config->uarte_regs;
    9ba0:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
    9ba2:	2110      	movs	r1, #16
    9ba4:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	if (hw_rx_counting_enabled(data)) {
    9ba8:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
    9bac:	b302      	cbz	r2, 9bf0 <rx_timeout+0x66>
		read = nrfx_timer_capture(&cfg->timer, 0);
    9bae:	4639      	mov	r1, r7
    9bb0:	3020      	adds	r0, #32
    9bb2:	f7fc fc87 	bl	64c4 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
    9bb6:	68eb      	ldr	r3, [r5, #12]
    9bb8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    9bba:	4282      	cmp	r2, r0
		data->async->rx_total_byte_cnt = read;
    9bbc:	bf1e      	ittt	ne
    9bbe:	6758      	strne	r0, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    9bc0:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    9bc2:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    9bc6:	e9d3 401d 	ldrd	r4, r0, [r3, #116]	; 0x74
	if (!hw_rx_counting_enabled(data) &&
    9bca:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
		    - data->async->rx_total_user_byte_cnt;
    9bce:	1a24      	subs	r4, r4, r0
	if (!hw_rx_counting_enabled(data) &&
    9bd0:	b922      	cbnz	r2, 9bdc <rx_timeout+0x52>
    9bd2:	2c00      	cmp	r4, #0
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    9bd4:	bfbc      	itt	lt
    9bd6:	f8c3 00c0 	strlt.w	r0, [r3, #192]	; 0xc0
		len = 0;
    9bda:	4614      	movlt	r4, r2
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    9bdc:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
    9be0:	18a0      	adds	r0, r4, r2
    9be2:	4288      	cmp	r0, r1
    9be4:	d910      	bls.n	9c08 <rx_timeout+0x7e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    9be6:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
    9be8:	2c00      	cmp	r4, #0
    9bea:	dd07      	ble.n	9bfc <rx_timeout+0x72>
		clipped = true;
    9bec:	2701      	movs	r7, #1
    9bee:	e011      	b.n	9c14 <rx_timeout+0x8a>
		read = data->async->rx_cnt.cnt;
    9bf0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
    9bf4:	e7df      	b.n	9bb6 <rx_timeout+0x2c>
			data->async->rx_timeout_left -=
    9bf6:	1a52      	subs	r2, r2, r1
    9bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
    9bfc:	6873      	ldr	r3, [r6, #4]
    9bfe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    9c00:	2210      	movs	r2, #16
    9c02:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
    9c08:	2c00      	cmp	r4, #0
    9c0a:	ddf7      	ble.n	9bfc <rx_timeout+0x72>
				< data->async->rx_timeout_slab)) {
    9c0c:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    9c10:	428a      	cmp	r2, r1
    9c12:	daf0      	bge.n	9bf6 <rx_timeout+0x6c>
			notify_uart_rx_rdy(dev, len);
    9c14:	4621      	mov	r1, r4
    9c16:	4630      	mov	r0, r6
    9c18:	f7ff fee7 	bl	99ea <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    9c1c:	68e8      	ldr	r0, [r5, #12]
    9c1e:	6e83      	ldr	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    9c20:	6f81      	ldr	r1, [r0, #120]	; 0x78
			data->async->rx_offset += len;
    9c22:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
    9c24:	4421      	add	r1, r4
			data->async->rx_offset += len;
    9c26:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    9c28:	6781      	str	r1, [r0, #120]	; 0x78
		if (clipped) {
    9c2a:	2f00      	cmp	r7, #0
    9c2c:	d0e6      	beq.n	9bfc <rx_timeout+0x72>
	z_impl_k_timer_stop(timer);
    9c2e:	3088      	adds	r0, #136	; 0x88
    9c30:	f000 fa3b 	bl	a0aa <z_impl_k_timer_stop>
}
    9c34:	e7e2      	b.n	9bfc <rx_timeout+0x72>

00009c36 <rx_flush>:
	return config->uarte_regs;
    9c36:	6843      	ldr	r3, [r0, #4]
{
    9c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    9c3a:	681d      	ldr	r5, [r3, #0]
{
    9c3c:	4616      	mov	r6, r2
    return p_reg->RXD.AMOUNT;
    9c3e:	f8d5 753c 	ldr.w	r7, [r5, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    9c42:	460c      	mov	r4, r1
    9c44:	bb31      	cbnz	r1, 9c94 <rx_flush+0x5e>
    9c46:	2605      	movs	r6, #5
		flush_buf = tmp_buf;
    9c48:	466b      	mov	r3, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9c4a:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9c4e:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
    9c50:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9c54:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    9c58:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9c5c:	2201      	movs	r2, #1
    9c5e:	62ea      	str	r2, [r5, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9c60:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9c64:	2a00      	cmp	r2, #0
    9c66:	d0fb      	beq.n	9c60 <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9c68:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    9c6c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    9c70:	f8d5 053c 	ldr.w	r0, [r5, #1340]	; 0x53c
	if (!buf) {
    9c74:	b914      	cbnz	r4, 9c7c <rx_flush+0x46>
			return rx_amount;
    9c76:	b2c0      	uxtb	r0, r0
}
    9c78:	b003      	add	sp, #12
    9c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rx_amount != prev_rx_amount) {
    9c7c:	4287      	cmp	r7, r0
    9c7e:	d1fa      	bne.n	9c76 <rx_flush+0x40>
    9c80:	4426      	add	r6, r4
	for (int i = 0; i < flush_len; i++) {
    9c82:	42b4      	cmp	r4, r6
    9c84:	d101      	bne.n	9c8a <rx_flush+0x54>
	return 0;
    9c86:	2000      	movs	r0, #0
    9c88:	e7f6      	b.n	9c78 <rx_flush+0x42>
		if (buf[i] != dirty) {
    9c8a:	f814 3b01 	ldrb.w	r3, [r4], #1
    9c8e:	2b00      	cmp	r3, #0
    9c90:	d0f7      	beq.n	9c82 <rx_flush+0x4c>
    9c92:	e7f0      	b.n	9c76 <rx_flush+0x40>
		memset(buf, dirty, len);
    9c94:	2100      	movs	r1, #0
    9c96:	4620      	mov	r0, r4
    9c98:	f7ff fdd2 	bl	9840 <memset>
		flush_len = len;
    9c9c:	4623      	mov	r3, r4
    9c9e:	e7d4      	b.n	9c4a <rx_flush+0x14>

00009ca0 <async_uart_release>:
{
    9ca0:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9ca2:	6903      	ldr	r3, [r0, #16]
{
    9ca4:	4604      	mov	r4, r0
	__asm__ volatile(
    9ca6:	f04f 0220 	mov.w	r2, #32
    9caa:	f3ef 8611 	mrs	r6, BASEPRI
    9cae:	f382 8812 	msr	BASEPRI_MAX, r2
    9cb2:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    9cb6:	68dd      	ldr	r5, [r3, #12]
    9cb8:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    9cbc:	ea23 0301 	bic.w	r3, r3, r1
    9cc0:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    9cc4:	b9db      	cbnz	r3, 9cfe <async_uart_release+0x5e>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    9cc6:	2902      	cmp	r1, #2
    9cc8:	d106      	bne.n	9cd8 <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
    9cca:	2205      	movs	r2, #5
    9ccc:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    9cd0:	f7ff ffb1 	bl	9c36 <rx_flush>
			data->async->rx_flush_cnt =
    9cd4:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9cd8:	6925      	ldr	r5, [r4, #16]
	if (data->async && hw_rx_counting_enabled(data)) {
    9cda:	68eb      	ldr	r3, [r5, #12]
    9cdc:	b153      	cbz	r3, 9cf4 <async_uart_release+0x54>
    9cde:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
    9ce2:	b13b      	cbz	r3, 9cf4 <async_uart_release+0x54>
		nrfx_timer_disable(&get_dev_config(dev)->timer);
    9ce4:	6860      	ldr	r0, [r4, #4]
    9ce6:	3020      	adds	r0, #32
    9ce8:	f7fc fb64 	bl	63b4 <nrfx_timer_disable>
		data->async->rx_total_byte_cnt = 0;
    9cec:	68eb      	ldr	r3, [r5, #12]
    9cee:	2200      	movs	r2, #0
		data->async->rx_total_user_byte_cnt = 0;
    9cf0:	e9c3 221d 	strd	r2, r2, [r3, #116]	; 0x74
	return config->uarte_regs;
    9cf4:	6863      	ldr	r3, [r4, #4]
    9cf6:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9cf8:	2200      	movs	r2, #0
    9cfa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    9cfe:	f386 8811 	msr	BASEPRI, r6
    9d02:	f3bf 8f6f 	isb	sy
}
    9d06:	bd70      	pop	{r4, r5, r6, pc}

00009d08 <start_tx_locked.isra.0>:
static void start_tx_locked(const struct device *dev, struct uarte_nrfx_data *data)
    9d08:	b510      	push	{r4, lr}
    9d0a:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    9d0c:	f7ff fe55 	bl	99ba <is_tx_ready>
    9d10:	680b      	ldr	r3, [r1, #0]
    9d12:	b918      	cbnz	r0, 9d1c <start_tx_locked.isra.0+0x14>
		data->async->pending_tx = true;
    9d14:	2201      	movs	r2, #1
    9d16:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    9d1a:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    9d1c:	2200      	movs	r2, #0
    9d1e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    9d22:	f04f 32ff 	mov.w	r2, #4294967295
    9d26:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    9d2a:	4620      	mov	r0, r4
    9d2c:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    9d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    9d34:	f7ff bf0c 	b.w	9b50 <tx_start>

00009d38 <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    9d38:	68c2      	ldr	r2, [r0, #12]
    9d3a:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    9d3c:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    9d3e:	b508      	push	{r3, lr}
    9d40:	4603      	mov	r3, r0
	if (!remaining) {
    9d42:	d00b      	beq.n	9d5c <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    9d44:	2a08      	cmp	r2, #8
    9d46:	bf28      	it	cs
    9d48:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    9d4a:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    9d4c:	3018      	adds	r0, #24
    9d4e:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    9d50:	689b      	ldr	r3, [r3, #8]
    9d52:	4419      	add	r1, r3
    9d54:	f7ff fd69 	bl	982a <memcpy>
	return true;
    9d58:	2001      	movs	r0, #1
}
    9d5a:	bd08      	pop	{r3, pc}
		return false;
    9d5c:	4610      	mov	r0, r2
    9d5e:	e7fc      	b.n	9d5a <setup_tx_cache.isra.0+0x22>

00009d60 <uarte_nrfx_tx_abort>:
{
    9d60:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    9d62:	6843      	ldr	r3, [r0, #4]
    9d64:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    9d66:	6903      	ldr	r3, [r0, #16]
    9d68:	68d8      	ldr	r0, [r3, #12]
    9d6a:	6883      	ldr	r3, [r0, #8]
    9d6c:	b14b      	cbz	r3, 9d82 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    9d6e:	2400      	movs	r4, #0
    9d70:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    9d74:	3028      	adds	r0, #40	; 0x28
    9d76:	f000 f998 	bl	a0aa <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9d7a:	2301      	movs	r3, #1
    9d7c:	60eb      	str	r3, [r5, #12]
	return 0;
    9d7e:	4620      	mov	r0, r4
}
    9d80:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    9d82:	f06f 000d 	mvn.w	r0, #13
    9d86:	e7fb      	b.n	9d80 <uarte_nrfx_tx_abort+0x20>

00009d88 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    9d88:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9d8a:	6818      	ldr	r0, [r3, #0]
    9d8c:	f7ff bfe8 	b.w	9d60 <uarte_nrfx_tx_abort>

00009d90 <uarte_nrfx_rx_disable>:
{
    9d90:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9d92:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    9d94:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    9d96:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    9d98:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    9d9a:	6e03      	ldr	r3, [r0, #96]	; 0x60
    9d9c:	b1b3      	cbz	r3, 9dcc <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    9d9e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    9da0:	b153      	cbz	r3, 9db8 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    9da2:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    9da6:	f023 0320 	bic.w	r3, r3, #32
    9daa:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9dae:	2300      	movs	r3, #0
    9db0:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    9db4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    9db8:	3088      	adds	r0, #136	; 0x88
    9dba:	f000 f976 	bl	a0aa <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    9dbe:	68eb      	ldr	r3, [r5, #12]
    9dc0:	2000      	movs	r0, #0
    9dc2:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9dc6:	2301      	movs	r3, #1
    9dc8:	6063      	str	r3, [r4, #4]
}
    9dca:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    9dcc:	f06f 000d 	mvn.w	r0, #13
    9dd0:	e7fb      	b.n	9dca <uarte_nrfx_rx_disable+0x3a>

00009dd2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    9dd2:	4770      	bx	lr

00009dd4 <sys_clock_cycle_get_32>:
{
    9dd4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    9dd6:	f7fa fed7 	bl	4b88 <z_nrf_rtc_timer_read>
}
    9dda:	bd08      	pop	{r3, pc}

00009ddc <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    9ddc:	f7ff b9c2 	b.w	9164 <nrf_cc3xx_platform_init_no_rng>

00009de0 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    9de0:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    9de2:	f7f8 fdc3 	bl	296c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    9de6:	f7f8 fe75 	bl	2ad4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    9dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    9dee:	f7ff b9b9 	b.w	9164 <nrf_cc3xx_platform_init_no_rng>

00009df2 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    9df2:	4700      	bx	r0

00009df4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    9df4:	f000 b949 	b.w	a08a <z_impl_k_busy_wait>

00009df8 <nrfx_flag32_is_allocated>:
    return (mask & NRFX_BIT(bitpos)) ? false : true;
    9df8:	40c8      	lsrs	r0, r1
    9dfa:	43c0      	mvns	r0, r0
}
    9dfc:	f000 0001 	and.w	r0, r0, #1
    9e00:	4770      	bx	lr

00009e02 <nrf_gpio_pin_present_check>:
    switch (port)
    9e02:	0943      	lsrs	r3, r0, #5
    9e04:	d00b      	beq.n	9e1e <nrf_gpio_pin_present_check+0x1c>
    9e06:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    9e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9e0c:	bf18      	it	ne
    9e0e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    9e10:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9e14:	fa23 f000 	lsr.w	r0, r3, r0
}
    9e18:	f000 0001 	and.w	r0, r0, #1
    9e1c:	4770      	bx	lr
    switch (port)
    9e1e:	f04f 33ff 	mov.w	r3, #4294967295
    9e22:	e7f5      	b.n	9e10 <nrf_gpio_pin_present_check+0xe>

00009e24 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    9e24:	0080      	lsls	r0, r0, #2
}
    9e26:	f500 7080 	add.w	r0, r0, #256	; 0x100
    9e2a:	4770      	bx	lr

00009e2c <nrf_gpio_reconfigure>:
{
    9e2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9e30:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9e32:	a801      	add	r0, sp, #4
{
    9e34:	460e      	mov	r6, r1
    9e36:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    9e3a:	4690      	mov	r8, r2
    9e3c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9e3e:	f7fb fe7b 	bl	5b38 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9e42:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9e44:	f1b8 0f00 	cmp.w	r8, #0
    9e48:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9e4c:	bf14      	ite	ne
    9e4e:	2302      	movne	r3, #2
    9e50:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9e52:	2e00      	cmp	r6, #0
    9e54:	bf18      	it	ne
    9e56:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9e5a:	2d00      	cmp	r5, #0
    9e5c:	bf14      	ite	ne
    9e5e:	210c      	movne	r1, #12
    9e60:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9e62:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9e64:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9e68:	bf14      	ite	ne
    9e6a:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    9e6e:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9e70:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9e72:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9e76:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9e7a:	bf14      	ite	ne
    9e7c:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    9e80:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9e82:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    9e84:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9e88:	b106      	cbz	r6, 9e8c <nrf_gpio_reconfigure+0x60>
    9e8a:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9e8c:	f1b8 0f00 	cmp.w	r8, #0
    9e90:	d003      	beq.n	9e9a <nrf_gpio_reconfigure+0x6e>
    9e92:	f898 8000 	ldrb.w	r8, [r8]
    9e96:	ea4f 0848 	mov.w	r8, r8, lsl #1
    9e9a:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9e9c:	b10d      	cbz	r5, 9ea2 <nrf_gpio_reconfigure+0x76>
    9e9e:	782d      	ldrb	r5, [r5, #0]
    9ea0:	00ad      	lsls	r5, r5, #2
    9ea2:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9ea6:	b10c      	cbz	r4, 9eac <nrf_gpio_reconfigure+0x80>
    9ea8:	7822      	ldrb	r2, [r4, #0]
    9eaa:	0214      	lsls	r4, r2, #8
    9eac:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    9eae:	b10f      	cbz	r7, 9eb4 <nrf_gpio_reconfigure+0x88>
    9eb0:	783f      	ldrb	r7, [r7, #0]
    9eb2:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9eb4:	432c      	orrs	r4, r5
    9eb6:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    9eb8:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    9ebc:	b002      	add	sp, #8
    9ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009ec2 <nrf_gpio_cfg_sense_set>:
{
    9ec2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9ec4:	f10d 030f 	add.w	r3, sp, #15
    9ec8:	9301      	str	r3, [sp, #4]
    9eca:	2300      	movs	r3, #0
{
    9ecc:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9ed0:	9300      	str	r3, [sp, #0]
    9ed2:	461a      	mov	r2, r3
    9ed4:	4619      	mov	r1, r3
    9ed6:	f7ff ffa9 	bl	9e2c <nrf_gpio_reconfigure>
}
    9eda:	b005      	add	sp, #20
    9edc:	f85d fb04 	ldr.w	pc, [sp], #4

00009ee0 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    9ee0:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    9ee2:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
    9ee4:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    9ee6:	bf9d      	ittte	ls
    9ee8:	6882      	ldrls	r2, [r0, #8]
    9eea:	18d2      	addls	r2, r2, r3
    9eec:	f102 32ff 	addls.w	r2, r2, #4294967295
    r = RdOff - WrOff - 1u;
    9ef0:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    9ef4:	bf94      	ite	ls
    9ef6:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
    9ef8:	1a58      	subhi	r0, r3, r1
}
    9efa:	4770      	bx	lr

00009efc <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    9efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    9f00:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    9f04:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    9f06:	eba9 0804 	sub.w	r8, r9, r4
  if (Rem > NumBytes) {
    9f0a:	6840      	ldr	r0, [r0, #4]
    9f0c:	4590      	cmp	r8, r2
    9f0e:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    9f10:	460f      	mov	r7, r1
    9f12:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    9f14:	d904      	bls.n	9f20 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    9f16:	f7ff fc88 	bl	982a <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    9f1a:	60ec      	str	r4, [r5, #12]
}
    9f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    9f20:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    9f22:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    9f26:	f7ff fc80 	bl	982a <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    9f2a:	6868      	ldr	r0, [r5, #4]
    9f2c:	4622      	mov	r2, r4
    9f2e:	eb07 0108 	add.w	r1, r7, r8
    9f32:	e7f0      	b.n	9f16 <_WriteNoCheck+0x1a>

00009f34 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    9f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    9f38:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    9f3a:	4606      	mov	r6, r0
    9f3c:	4689      	mov	r9, r1
    9f3e:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    9f40:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    9f44:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
    9f46:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9f48:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    9f4a:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    9f4c:	bf28      	it	cs
    9f4e:	18e4      	addcs	r4, r4, r3
    9f50:	3c01      	subs	r4, #1
    9f52:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    9f54:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    9f56:	42bc      	cmp	r4, r7
    9f58:	bf28      	it	cs
    9f5a:	463c      	movcs	r4, r7
    9f5c:	4294      	cmp	r4, r2
    9f5e:	bf28      	it	cs
    9f60:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    9f62:	4649      	mov	r1, r9
    9f64:	4428      	add	r0, r5
    9f66:	4622      	mov	r2, r4
    9f68:	f7ff fc5f 	bl	982a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    9f6c:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    9f6e:	4425      	add	r5, r4
      WrOff = 0u;
    9f70:	42ab      	cmp	r3, r5
    9f72:	bf08      	it	eq
    9f74:	2500      	moveq	r5, #0
  } while (NumBytes);
    9f76:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    9f78:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    9f7a:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    9f7c:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    9f7e:	d1e1      	bne.n	9f44 <_WriteBlocking+0x10>
}
    9f80:	4640      	mov	r0, r8
    9f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009f86 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    9f86:	f7fc bacd 	b.w	6524 <_DoInit>

00009f8a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    9f8a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    9f8c:	f7ff fffb 	bl	9f86 <SEGGER_RTT_Init>

	return 0;
}
    9f90:	2000      	movs	r0, #0
    9f92:	bd08      	pop	{r3, pc}

00009f94 <z_device_state_init>:
}
    9f94:	4770      	bx	lr

00009f96 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    9f96:	b138      	cbz	r0, 9fa8 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    9f98:	68c3      	ldr	r3, [r0, #12]
    9f9a:	8818      	ldrh	r0, [r3, #0]
    9f9c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9fa0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    9fa4:	4258      	negs	r0, r3
    9fa6:	4158      	adcs	r0, r3
}
    9fa8:	4770      	bx	lr

00009faa <k_mem_slab_init>:
{
    9faa:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    9fac:	2400      	movs	r4, #0
    9fae:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    9fb0:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9fb2:	ea41 0402 	orr.w	r4, r1, r2
    9fb6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    9fba:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    9fbe:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9fc0:	d10c      	bne.n	9fdc <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    9fc2:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    9fc4:	42a3      	cmp	r3, r4
    9fc6:	d103      	bne.n	9fd0 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    9fc8:	e9c0 0000 	strd	r0, r0, [r0]
}
    9fcc:	2000      	movs	r0, #0
}
    9fce:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    9fd0:	6985      	ldr	r5, [r0, #24]
    9fd2:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    9fd4:	3401      	adds	r4, #1
		slab->free_list = p;
    9fd6:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    9fd8:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    9fda:	e7f3      	b.n	9fc4 <k_mem_slab_init+0x1a>
		return -EINVAL;
    9fdc:	f06f 0015 	mvn.w	r0, #21
	return rc;
    9fe0:	e7f5      	b.n	9fce <k_mem_slab_init+0x24>

00009fe2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9fe2:	f3ef 8005 	mrs	r0, IPSR
}
    9fe6:	3800      	subs	r0, #0
    9fe8:	bf18      	it	ne
    9fea:	2001      	movne	r0, #1
    9fec:	4770      	bx	lr

00009fee <z_impl_k_thread_name_set>:
}
    9fee:	f06f 0057 	mvn.w	r0, #87	; 0x57
    9ff2:	4770      	bx	lr

00009ff4 <k_thread_name_get>:
}
    9ff4:	2000      	movs	r0, #0
    9ff6:	4770      	bx	lr

00009ff8 <z_impl_k_thread_start>:
	z_sched_start(thread);
    9ff8:	f7fd bf74 	b.w	7ee4 <z_sched_start>

00009ffc <z_pm_save_idle_exit>:
{
    9ffc:	b508      	push	{r3, lr}
	pm_system_resume();
    9ffe:	f7f8 fbf1 	bl	27e4 <pm_system_resume>
}
    a002:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    a006:	f7ff bee4 	b.w	9dd2 <sys_clock_idle_exit>

0000a00a <z_impl_k_mutex_init>:
{
    a00a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    a00c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    a00e:	e9c3 0002 	strd	r0, r0, [r3, #8]
    a012:	e9c3 3300 	strd	r3, r3, [r3]
}
    a016:	4770      	bx	lr

0000a018 <notify_queue_locked>:
	if (queue != NULL) {
    a018:	b120      	cbz	r0, a024 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    a01a:	2200      	movs	r2, #0
    a01c:	4611      	mov	r1, r2
    a01e:	3088      	adds	r0, #136	; 0x88
    a020:	f7fe bc66 	b.w	88f0 <z_sched_wake>
}
    a024:	4770      	bx	lr

0000a026 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
    a026:	68c3      	ldr	r3, [r0, #12]
{
    a028:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
    a02a:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
    a02e:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
    a032:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
    a034:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
    a036:	d502      	bpl.n	a03e <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
    a038:	3010      	adds	r0, #16
    a03a:	f7fe fdd5 	bl	8be8 <z_abort_timeout>
}
    a03e:	4620      	mov	r0, r4
    a040:	bd10      	pop	{r4, pc}

0000a042 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a042:	4603      	mov	r3, r0
    a044:	b920      	cbnz	r0, a050 <z_reschedule_irqlock+0xe>
    a046:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    a04a:	b90a      	cbnz	r2, a050 <z_reschedule_irqlock+0xe>
    a04c:	f7f8 be28 	b.w	2ca0 <arch_swap>
    a050:	f383 8811 	msr	BASEPRI, r3
    a054:	f3bf 8f6f 	isb	sy
}
    a058:	4770      	bx	lr

0000a05a <z_reschedule_unlocked>:
	__asm__ volatile(
    a05a:	f04f 0320 	mov.w	r3, #32
    a05e:	f3ef 8011 	mrs	r0, BASEPRI
    a062:	f383 8812 	msr	BASEPRI_MAX, r3
    a066:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a06a:	f7ff bfea 	b.w	a042 <z_reschedule_irqlock>

0000a06e <z_priq_dumb_best>:
{
    a06e:	4603      	mov	r3, r0
	return list->head == list;
    a070:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a072:	4283      	cmp	r3, r0
    a074:	d003      	beq.n	a07e <z_priq_dumb_best+0x10>
	if (n != NULL) {
    a076:	2800      	cmp	r0, #0
    a078:	bf38      	it	cc
    a07a:	2000      	movcc	r0, #0
    a07c:	4770      	bx	lr
	struct k_thread *thread = NULL;
    a07e:	2000      	movs	r0, #0
}
    a080:	4770      	bx	lr

0000a082 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    a082:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    a084:	f7fe ff18 	bl	8eb8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    a088:	bd08      	pop	{r3, pc}

0000a08a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    a08a:	b108      	cbz	r0, a090 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    a08c:	f7f9 bb48 	b.w	3720 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    a090:	4770      	bx	lr

0000a092 <k_timer_init>:
	timer->status = 0U;
    a092:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    a094:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    a098:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    a09c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    a0a0:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    a0a4:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    a0a6:	6343      	str	r3, [r0, #52]	; 0x34
}
    a0a8:	4770      	bx	lr

0000a0aa <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    a0aa:	b510      	push	{r4, lr}
    a0ac:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    a0ae:	f7fe fd9b 	bl	8be8 <z_abort_timeout>

	if (inactive) {
    a0b2:	b9b0      	cbnz	r0, a0e2 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    a0b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a0b6:	b10b      	cbz	r3, a0bc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    a0b8:	4620      	mov	r0, r4
    a0ba:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    a0bc:	f104 0018 	add.w	r0, r4, #24
    a0c0:	f7fe f9a4 	bl	840c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    a0c4:	b168      	cbz	r0, a0e2 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    a0c6:	f7fd fed7 	bl	7e78 <z_ready_thread>
    a0ca:	f04f 0320 	mov.w	r3, #32
    a0ce:	f3ef 8011 	mrs	r0, BASEPRI
    a0d2:	f383 8812 	msr	BASEPRI_MAX, r3
    a0d6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    a0da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a0de:	f7ff bfb0 	b.w	a042 <z_reschedule_irqlock>
    a0e2:	bd10      	pop	{r4, pc}

0000a0e4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a0e4:	4770      	bx	lr
	...

0000a0e8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    a0e8:	f7fb ba1c 	b.w	5524 <SystemInit>
