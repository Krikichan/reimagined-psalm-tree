
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_start>:
   10000:	2000ef28 	.word	0x2000ef28
   10004:	00013561 	.word	0x00013561
   10008:	0001b42d 	.word	0x0001b42d
   1000c:	00013535 	.word	0x00013535
   10010:	00013535 	.word	0x00013535
   10014:	00013535 	.word	0x00013535
   10018:	00013535 	.word	0x00013535
   1001c:	00013535 	.word	0x00013535
	...
   1002c:	00012f71 	.word	0x00012f71
   10030:	00013535 	.word	0x00013535
   10034:	00000000 	.word	0x00000000
   10038:	00012f19 	.word	0x00012f19
   1003c:	00013535 	.word	0x00013535

00010040 <_irq_vector_table>:
   10040:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   10050:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   10060:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   10070:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   10080:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   10090:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   100a0:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   100b0:	00015249 00012ff1 00012ff1 00012ff1     IR.../.../.../..
   100c0:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   100d0:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   100e0:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   100f0:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   10100:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   10110:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   10120:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   10130:	00012ff1 00012ff1 00012ff1 00012ff1     ./.../.../.../..
   10140:	00012ff1                                ./..

00010144 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10210:	0000e098 00000001 00010000 00010000     ................
   10220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001023c <__aeabi_uldivmod>:
   1023c:	b953      	cbnz	r3, 10254 <__aeabi_uldivmod+0x18>
   1023e:	b94a      	cbnz	r2, 10254 <__aeabi_uldivmod+0x18>
   10240:	2900      	cmp	r1, #0
   10242:	bf08      	it	eq
   10244:	2800      	cmpeq	r0, #0
   10246:	bf1c      	itt	ne
   10248:	f04f 31ff 	movne.w	r1, #4294967295
   1024c:	f04f 30ff 	movne.w	r0, #4294967295
   10250:	f000 b970 	b.w	10534 <__aeabi_idiv0>
   10254:	f1ad 0c08 	sub.w	ip, sp, #8
   10258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1025c:	f000 f806 	bl	1026c <__udivmoddi4>
   10260:	f8dd e004 	ldr.w	lr, [sp, #4]
   10264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10268:	b004      	add	sp, #16
   1026a:	4770      	bx	lr

0001026c <__udivmoddi4>:
   1026c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10270:	9e08      	ldr	r6, [sp, #32]
   10272:	460d      	mov	r5, r1
   10274:	4604      	mov	r4, r0
   10276:	468a      	mov	sl, r1
   10278:	2b00      	cmp	r3, #0
   1027a:	d17f      	bne.n	1037c <__udivmoddi4+0x110>
   1027c:	428a      	cmp	r2, r1
   1027e:	4617      	mov	r7, r2
   10280:	d941      	bls.n	10306 <__udivmoddi4+0x9a>
   10282:	fab2 f282 	clz	r2, r2
   10286:	b14a      	cbz	r2, 1029c <__udivmoddi4+0x30>
   10288:	f1c2 0120 	rsb	r1, r2, #32
   1028c:	fa05 f302 	lsl.w	r3, r5, r2
   10290:	4097      	lsls	r7, r2
   10292:	4094      	lsls	r4, r2
   10294:	fa20 f101 	lsr.w	r1, r0, r1
   10298:	ea41 0a03 	orr.w	sl, r1, r3
   1029c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   102a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   102a4:	fa1f f987 	uxth.w	r9, r7
   102a8:	fbba fef8 	udiv	lr, sl, r8
   102ac:	fb08 a31e 	mls	r3, r8, lr, sl
   102b0:	fb0e f109 	mul.w	r1, lr, r9
   102b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   102b8:	4299      	cmp	r1, r3
   102ba:	d906      	bls.n	102ca <__udivmoddi4+0x5e>
   102bc:	18fb      	adds	r3, r7, r3
   102be:	d202      	bcs.n	102c6 <__udivmoddi4+0x5a>
   102c0:	4299      	cmp	r1, r3
   102c2:	f200 8124 	bhi.w	1050e <__udivmoddi4+0x2a2>
   102c6:	f10e 3eff 	add.w	lr, lr, #4294967295
   102ca:	1a59      	subs	r1, r3, r1
   102cc:	b2a3      	uxth	r3, r4
   102ce:	fbb1 f0f8 	udiv	r0, r1, r8
   102d2:	fb08 1110 	mls	r1, r8, r0, r1
   102d6:	fb00 f909 	mul.w	r9, r0, r9
   102da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   102de:	45a1      	cmp	r9, r4
   102e0:	d905      	bls.n	102ee <__udivmoddi4+0x82>
   102e2:	193c      	adds	r4, r7, r4
   102e4:	d202      	bcs.n	102ec <__udivmoddi4+0x80>
   102e6:	45a1      	cmp	r9, r4
   102e8:	f200 810e 	bhi.w	10508 <__udivmoddi4+0x29c>
   102ec:	3801      	subs	r0, #1
   102ee:	eba4 0409 	sub.w	r4, r4, r9
   102f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   102f6:	2100      	movs	r1, #0
   102f8:	b11e      	cbz	r6, 10302 <__udivmoddi4+0x96>
   102fa:	40d4      	lsrs	r4, r2
   102fc:	2300      	movs	r3, #0
   102fe:	e9c6 4300 	strd	r4, r3, [r6]
   10302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10306:	b902      	cbnz	r2, 1030a <__udivmoddi4+0x9e>
   10308:	deff      	udf	#255	; 0xff
   1030a:	fab2 f282 	clz	r2, r2
   1030e:	2a00      	cmp	r2, #0
   10310:	d14f      	bne.n	103b2 <__udivmoddi4+0x146>
   10312:	1bcb      	subs	r3, r1, r7
   10314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10318:	fa1f f887 	uxth.w	r8, r7
   1031c:	2101      	movs	r1, #1
   1031e:	0c25      	lsrs	r5, r4, #16
   10320:	fbb3 fcfe 	udiv	ip, r3, lr
   10324:	fb0e 301c 	mls	r0, lr, ip, r3
   10328:	462b      	mov	r3, r5
   1032a:	fb08 f90c 	mul.w	r9, r8, ip
   1032e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   10332:	45a9      	cmp	r9, r5
   10334:	d90a      	bls.n	1034c <__udivmoddi4+0xe0>
   10336:	197d      	adds	r5, r7, r5
   10338:	bf2c      	ite	cs
   1033a:	2301      	movcs	r3, #1
   1033c:	2300      	movcc	r3, #0
   1033e:	45a9      	cmp	r9, r5
   10340:	d902      	bls.n	10348 <__udivmoddi4+0xdc>
   10342:	2b00      	cmp	r3, #0
   10344:	f000 80d9 	beq.w	104fa <__udivmoddi4+0x28e>
   10348:	f10c 3cff 	add.w	ip, ip, #4294967295
   1034c:	eba5 0509 	sub.w	r5, r5, r9
   10350:	b2a3      	uxth	r3, r4
   10352:	fbb5 f0fe 	udiv	r0, r5, lr
   10356:	fb0e 5510 	mls	r5, lr, r0, r5
   1035a:	fb08 f800 	mul.w	r8, r8, r0
   1035e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   10362:	45a0      	cmp	r8, r4
   10364:	d905      	bls.n	10372 <__udivmoddi4+0x106>
   10366:	193c      	adds	r4, r7, r4
   10368:	d202      	bcs.n	10370 <__udivmoddi4+0x104>
   1036a:	45a0      	cmp	r8, r4
   1036c:	f200 80c9 	bhi.w	10502 <__udivmoddi4+0x296>
   10370:	3801      	subs	r0, #1
   10372:	eba4 0408 	sub.w	r4, r4, r8
   10376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1037a:	e7bd      	b.n	102f8 <__udivmoddi4+0x8c>
   1037c:	428b      	cmp	r3, r1
   1037e:	d908      	bls.n	10392 <__udivmoddi4+0x126>
   10380:	2e00      	cmp	r6, #0
   10382:	f000 80b1 	beq.w	104e8 <__udivmoddi4+0x27c>
   10386:	2100      	movs	r1, #0
   10388:	e9c6 0500 	strd	r0, r5, [r6]
   1038c:	4608      	mov	r0, r1
   1038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10392:	fab3 f183 	clz	r1, r3
   10396:	2900      	cmp	r1, #0
   10398:	d146      	bne.n	10428 <__udivmoddi4+0x1bc>
   1039a:	42ab      	cmp	r3, r5
   1039c:	f0c0 80a7 	bcc.w	104ee <__udivmoddi4+0x282>
   103a0:	4282      	cmp	r2, r0
   103a2:	f240 80a4 	bls.w	104ee <__udivmoddi4+0x282>
   103a6:	4608      	mov	r0, r1
   103a8:	2e00      	cmp	r6, #0
   103aa:	d0aa      	beq.n	10302 <__udivmoddi4+0x96>
   103ac:	e9c6 4a00 	strd	r4, sl, [r6]
   103b0:	e7a7      	b.n	10302 <__udivmoddi4+0x96>
   103b2:	f1c2 0020 	rsb	r0, r2, #32
   103b6:	4097      	lsls	r7, r2
   103b8:	fa01 f302 	lsl.w	r3, r1, r2
   103bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   103c0:	40c1      	lsrs	r1, r0
   103c2:	fa24 f500 	lsr.w	r5, r4, r0
   103c6:	fa1f f887 	uxth.w	r8, r7
   103ca:	4094      	lsls	r4, r2
   103cc:	431d      	orrs	r5, r3
   103ce:	fbb1 f0fe 	udiv	r0, r1, lr
   103d2:	0c2b      	lsrs	r3, r5, #16
   103d4:	fb0e 1110 	mls	r1, lr, r0, r1
   103d8:	fb00 fc08 	mul.w	ip, r0, r8
   103dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   103e0:	459c      	cmp	ip, r3
   103e2:	d909      	bls.n	103f8 <__udivmoddi4+0x18c>
   103e4:	18fb      	adds	r3, r7, r3
   103e6:	bf2c      	ite	cs
   103e8:	2101      	movcs	r1, #1
   103ea:	2100      	movcc	r1, #0
   103ec:	459c      	cmp	ip, r3
   103ee:	d902      	bls.n	103f6 <__udivmoddi4+0x18a>
   103f0:	2900      	cmp	r1, #0
   103f2:	f000 8095 	beq.w	10520 <__udivmoddi4+0x2b4>
   103f6:	3801      	subs	r0, #1
   103f8:	eba3 030c 	sub.w	r3, r3, ip
   103fc:	b2ad      	uxth	r5, r5
   103fe:	fbb3 f1fe 	udiv	r1, r3, lr
   10402:	fb0e 3311 	mls	r3, lr, r1, r3
   10406:	fb01 fc08 	mul.w	ip, r1, r8
   1040a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1040e:	45ac      	cmp	ip, r5
   10410:	d905      	bls.n	1041e <__udivmoddi4+0x1b2>
   10412:	197d      	adds	r5, r7, r5
   10414:	d202      	bcs.n	1041c <__udivmoddi4+0x1b0>
   10416:	45ac      	cmp	ip, r5
   10418:	f200 8089 	bhi.w	1052e <__udivmoddi4+0x2c2>
   1041c:	3901      	subs	r1, #1
   1041e:	eba5 030c 	sub.w	r3, r5, ip
   10422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10426:	e77a      	b.n	1031e <__udivmoddi4+0xb2>
   10428:	f1c1 0420 	rsb	r4, r1, #32
   1042c:	408b      	lsls	r3, r1
   1042e:	fa02 f701 	lsl.w	r7, r2, r1
   10432:	fa05 fc01 	lsl.w	ip, r5, r1
   10436:	40e2      	lsrs	r2, r4
   10438:	fa20 f804 	lsr.w	r8, r0, r4
   1043c:	40e5      	lsrs	r5, r4
   1043e:	fa00 fe01 	lsl.w	lr, r0, r1
   10442:	4313      	orrs	r3, r2
   10444:	ea48 020c 	orr.w	r2, r8, ip
   10448:	ea4f 4813 	mov.w	r8, r3, lsr #16
   1044c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   10450:	fa1f f983 	uxth.w	r9, r3
   10454:	fbb5 faf8 	udiv	sl, r5, r8
   10458:	fb08 551a 	mls	r5, r8, sl, r5
   1045c:	fb0a f009 	mul.w	r0, sl, r9
   10460:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
   10464:	4560      	cmp	r0, ip
   10466:	d90a      	bls.n	1047e <__udivmoddi4+0x212>
   10468:	eb13 0c0c 	adds.w	ip, r3, ip
   1046c:	bf2c      	ite	cs
   1046e:	2501      	movcs	r5, #1
   10470:	2500      	movcc	r5, #0
   10472:	4560      	cmp	r0, ip
   10474:	d901      	bls.n	1047a <__udivmoddi4+0x20e>
   10476:	2d00      	cmp	r5, #0
   10478:	d055      	beq.n	10526 <__udivmoddi4+0x2ba>
   1047a:	f10a 3aff 	add.w	sl, sl, #4294967295
   1047e:	ebac 0c00 	sub.w	ip, ip, r0
   10482:	b292      	uxth	r2, r2
   10484:	fbbc f0f8 	udiv	r0, ip, r8
   10488:	fb08 cc10 	mls	ip, r8, r0, ip
   1048c:	fb00 f909 	mul.w	r9, r0, r9
   10490:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   10494:	45e1      	cmp	r9, ip
   10496:	d905      	bls.n	104a4 <__udivmoddi4+0x238>
   10498:	eb13 0c0c 	adds.w	ip, r3, ip
   1049c:	d201      	bcs.n	104a2 <__udivmoddi4+0x236>
   1049e:	45e1      	cmp	r9, ip
   104a0:	d83b      	bhi.n	1051a <__udivmoddi4+0x2ae>
   104a2:	3801      	subs	r0, #1
   104a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   104a8:	ebac 0c09 	sub.w	ip, ip, r9
   104ac:	fba0 8907 	umull	r8, r9, r0, r7
   104b0:	45cc      	cmp	ip, r9
   104b2:	4645      	mov	r5, r8
   104b4:	464a      	mov	r2, r9
   104b6:	d302      	bcc.n	104be <__udivmoddi4+0x252>
   104b8:	d106      	bne.n	104c8 <__udivmoddi4+0x25c>
   104ba:	45c6      	cmp	lr, r8
   104bc:	d204      	bcs.n	104c8 <__udivmoddi4+0x25c>
   104be:	3801      	subs	r0, #1
   104c0:	ebb8 0507 	subs.w	r5, r8, r7
   104c4:	eb69 0203 	sbc.w	r2, r9, r3
   104c8:	b32e      	cbz	r6, 10516 <__udivmoddi4+0x2aa>
   104ca:	ebbe 0305 	subs.w	r3, lr, r5
   104ce:	eb6c 0c02 	sbc.w	ip, ip, r2
   104d2:	fa23 f201 	lsr.w	r2, r3, r1
   104d6:	fa0c f404 	lsl.w	r4, ip, r4
   104da:	fa2c f301 	lsr.w	r3, ip, r1
   104de:	2100      	movs	r1, #0
   104e0:	4314      	orrs	r4, r2
   104e2:	e9c6 4300 	strd	r4, r3, [r6]
   104e6:	e70c      	b.n	10302 <__udivmoddi4+0x96>
   104e8:	4631      	mov	r1, r6
   104ea:	4630      	mov	r0, r6
   104ec:	e709      	b.n	10302 <__udivmoddi4+0x96>
   104ee:	1a84      	subs	r4, r0, r2
   104f0:	eb65 0303 	sbc.w	r3, r5, r3
   104f4:	2001      	movs	r0, #1
   104f6:	469a      	mov	sl, r3
   104f8:	e756      	b.n	103a8 <__udivmoddi4+0x13c>
   104fa:	f1ac 0c02 	sub.w	ip, ip, #2
   104fe:	443d      	add	r5, r7
   10500:	e724      	b.n	1034c <__udivmoddi4+0xe0>
   10502:	3802      	subs	r0, #2
   10504:	443c      	add	r4, r7
   10506:	e734      	b.n	10372 <__udivmoddi4+0x106>
   10508:	3802      	subs	r0, #2
   1050a:	443c      	add	r4, r7
   1050c:	e6ef      	b.n	102ee <__udivmoddi4+0x82>
   1050e:	f1ae 0e02 	sub.w	lr, lr, #2
   10512:	443b      	add	r3, r7
   10514:	e6d9      	b.n	102ca <__udivmoddi4+0x5e>
   10516:	4631      	mov	r1, r6
   10518:	e6f3      	b.n	10302 <__udivmoddi4+0x96>
   1051a:	3802      	subs	r0, #2
   1051c:	449c      	add	ip, r3
   1051e:	e7c1      	b.n	104a4 <__udivmoddi4+0x238>
   10520:	3802      	subs	r0, #2
   10522:	443b      	add	r3, r7
   10524:	e768      	b.n	103f8 <__udivmoddi4+0x18c>
   10526:	f1aa 0a02 	sub.w	sl, sl, #2
   1052a:	449c      	add	ip, r3
   1052c:	e7a7      	b.n	1047e <__udivmoddi4+0x212>
   1052e:	3902      	subs	r1, #2
   10530:	443d      	add	r5, r7
   10532:	e774      	b.n	1041e <__udivmoddi4+0x1b2>

00010534 <__aeabi_idiv0>:
   10534:	4770      	bx	lr
   10536:	bf00      	nop

00010538 <reset_memory_slab>:
    block_list[found_idx].rec_offset=0;

    return 0;
}

static void reset_memory_slab(){
   10538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1053c:	2700      	movs	r7, #0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1053e:	4b14      	ldr	r3, [pc, #80]	; (10590 <reset_memory_slab+0x58>)
   10540:	4814      	ldr	r0, [pc, #80]	; (10594 <reset_memory_slab+0x5c>)

    LOG_DBG("Reseting Memory Slab, Block Count %d",block_count);
   10542:	4e15      	ldr	r6, [pc, #84]	; (10598 <reset_memory_slab+0x60>)
   10544:	1ac0      	subs	r0, r0, r3
   10546:	08c0      	lsrs	r0, r0, #3
   10548:	0180      	lsls	r0, r0, #6
   1054a:	7833      	ldrb	r3, [r6, #0]
   1054c:	4a13      	ldr	r2, [pc, #76]	; (1059c <reset_memory_slab+0x64>)
   1054e:	4914      	ldr	r1, [pc, #80]	; (105a0 <reset_memory_slab+0x68>)
   10550:	f040 0004 	orr.w	r0, r0, #4
   10554:	f00a ff15 	bl	1b382 <log_string_sync>
            LOG_DBG("Free Slab , idx %d",i);
#endif
            k_mem_slab_free(&uart_slab, (void **)&(block_list[i].buffer_ptr));

            //Reset All entrys
            block_list[i].buffer_ptr=NULL;
   10558:	463d      	mov	r5, r7
   1055a:	4c12      	ldr	r4, [pc, #72]	; (105a4 <reset_memory_slab+0x6c>)
            k_mem_slab_free(&uart_slab, (void **)&(block_list[i].buffer_ptr));
   1055c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 105ac <reset_memory_slab+0x74>
        if(block_list[i].buffer_ptr != NULL){
   10560:	6823      	ldr	r3, [r4, #0]
   10562:	b143      	cbz	r3, 10576 <reset_memory_slab+0x3e>
            k_mem_slab_free(&uart_slab, (void **)&(block_list[i].buffer_ptr));
   10564:	4621      	mov	r1, r4
   10566:	4640      	mov	r0, r8
   10568:	f008 f940 	bl	187ec <k_mem_slab_free>
            block_list[i].buffer_ptr=NULL;
   1056c:	6025      	str	r5, [r4, #0]
            block_list[i].in_use_app=0;
   1056e:	7265      	strb	r5, [r4, #9]
            block_list[i].in_use_uart=0;
   10570:	7225      	strb	r5, [r4, #8]
            block_list[i].rec_len=0;
   10572:	80e5      	strh	r5, [r4, #6]
            block_list[i].rec_offset=0;
   10574:	80a5      	strh	r5, [r4, #4]
    for(uint16_t i = 0; i < UART_RX_BUF_NUM ; i++){
   10576:	3701      	adds	r7, #1
   10578:	2f04      	cmp	r7, #4
   1057a:	f104 040c 	add.w	r4, r4, #12
   1057e:	d1ef      	bne.n	10560 <reset_memory_slab+0x28>
        }
    }
    block_count = 0;
   10580:	2300      	movs	r3, #0
    free_entry = -1;
   10582:	22ff      	movs	r2, #255	; 0xff
    block_count = 0;
   10584:	7033      	strb	r3, [r6, #0]
    free_entry = -1;
   10586:	4b08      	ldr	r3, [pc, #32]	; (105a8 <reset_memory_slab+0x70>)
   10588:	701a      	strb	r2, [r3, #0]
}
   1058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1058e:	bf00      	nop
   10590:	0001c308 	.word	0x0001c308
   10594:	0001c360 	.word	0x0001c360
   10598:	2000d5d4 	.word	0x2000d5d4
   1059c:	0001c71a 	.word	0x0001c71a
   105a0:	0001c5e4 	.word	0x0001c5e4
   105a4:	2000ce60 	.word	0x2000ce60
   105a8:	2000c680 	.word	0x2000c680
   105ac:	2000cb28 	.word	0x2000cb28

000105b0 <get_buffer>:
static uint8_t* get_buffer(){
   105b0:	b570      	push	{r4, r5, r6, lr}
    if(free_entry != OOB_INDX){
   105b2:	4b14      	ldr	r3, [pc, #80]	; (10604 <get_buffer+0x54>)
   105b4:	4e14      	ldr	r6, [pc, #80]	; (10608 <get_buffer+0x58>)
   105b6:	781d      	ldrb	r5, [r3, #0]
    err = k_mem_slab_alloc(&uart_slab, (void **)&(block_list[idx].buffer_ptr), K_NO_WAIT);
   105b8:	4c14      	ldr	r4, [pc, #80]	; (1060c <get_buffer+0x5c>)
    if(free_entry != OOB_INDX){
   105ba:	2d05      	cmp	r5, #5
        free_entry = OOB_INDX;
   105bc:	bf16      	itet	ne
   105be:	2205      	movne	r2, #5
        idx = block_count;
   105c0:	7835      	ldrbeq	r5, [r6, #0]
        free_entry = OOB_INDX;
   105c2:	701a      	strbne	r2, [r3, #0]
    err = k_mem_slab_alloc(&uart_slab, (void **)&(block_list[idx].buffer_ptr), K_NO_WAIT);
   105c4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   105c8:	2200      	movs	r2, #0
   105ca:	2300      	movs	r3, #0
   105cc:	4810      	ldr	r0, [pc, #64]	; (10610 <get_buffer+0x60>)
   105ce:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   105d2:	f008 f8b1 	bl	18738 <k_mem_slab_alloc>
	__ASSERT(err == 0, "Failed to alloc slab");
   105d6:	b150      	cbz	r0, 105ee <get_buffer+0x3e>
   105d8:	490e      	ldr	r1, [pc, #56]	; (10614 <get_buffer+0x64>)
   105da:	480f      	ldr	r0, [pc, #60]	; (10618 <get_buffer+0x68>)
   105dc:	f240 1211 	movw	r2, #273	; 0x111
   105e0:	f00a fcb8 	bl	1af54 <printk>
   105e4:	f240 1111 	movw	r1, #273	; 0x111
   105e8:	480a      	ldr	r0, [pc, #40]	; (10614 <get_buffer+0x64>)
   105ea:	f00a fe97 	bl	1b31c <assert_post_action>
    block_count++;
   105ee:	7833      	ldrb	r3, [r6, #0]
    block_list[idx].in_use_uart = 1;
   105f0:	2101      	movs	r1, #1
    block_count++;
   105f2:	3301      	adds	r3, #1
   105f4:	7033      	strb	r3, [r6, #0]
    block_list[idx].in_use_uart = 1;
   105f6:	230c      	movs	r3, #12
   105f8:	436b      	muls	r3, r5
   105fa:	18e2      	adds	r2, r4, r3
   105fc:	7211      	strb	r1, [r2, #8]
}
   105fe:	58e0      	ldr	r0, [r4, r3]
   10600:	bd70      	pop	{r4, r5, r6, pc}
   10602:	bf00      	nop
   10604:	2000c680 	.word	0x2000c680
   10608:	2000d5d4 	.word	0x2000d5d4
   1060c:	2000ce60 	.word	0x2000ce60
   10610:	2000cb28 	.word	0x2000cb28
   10614:	0001c60d 	.word	0x0001c60d
   10618:	0001c625 	.word	0x0001c625

0001061c <uart_callback>:
{
   1061c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   10620:	4614      	mov	r4, r2
    switch (evt->type) {
   10622:	780a      	ldrb	r2, [r1, #0]
{
   10624:	460b      	mov	r3, r1
   10626:	2a06      	cmp	r2, #6
   10628:	d80a      	bhi.n	10640 <uart_callback+0x24>
   1062a:	e8df f002 	tbb	[pc, r2]
   1062e:	0c04      	.short	0x0c04
   10630:	613b261d 	.word	0x613b261d
   10634:	6d          	.byte	0x6d
   10635:	00          	.byte	0x00
        if(m_tx_cb)
   10636:	4b47      	ldr	r3, [pc, #284]	; (10754 <uart_callback+0x138>)
   10638:	681b      	ldr	r3, [r3, #0]
   1063a:	b10b      	cbz	r3, 10640 <uart_callback+0x24>
            m_tx_cb(evt->type);
   1063c:	2000      	movs	r0, #0
            m_tx_cb(-1);
   1063e:	4798      	blx	r3
}
   10640:	b004      	add	sp, #16
   10642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10646:	4b44      	ldr	r3, [pc, #272]	; (10758 <uart_callback+0x13c>)
   10648:	4844      	ldr	r0, [pc, #272]	; (1075c <uart_callback+0x140>)
        LOG_ERR("Tx aborted");
   1064a:	4945      	ldr	r1, [pc, #276]	; (10760 <uart_callback+0x144>)
   1064c:	1ac0      	subs	r0, r0, r3
   1064e:	08c0      	lsrs	r0, r0, #3
   10650:	0180      	lsls	r0, r0, #6
   10652:	f040 0001 	orr.w	r0, r0, #1
   10656:	f00a fe94 	bl	1b382 <log_string_sync>
        if (m_tx_cb) {
   1065a:	4b3e      	ldr	r3, [pc, #248]	; (10754 <uart_callback+0x138>)
   1065c:	681b      	ldr	r3, [r3, #0]
   1065e:	2b00      	cmp	r3, #0
   10660:	d0ee      	beq.n	10640 <uart_callback+0x24>
            m_tx_cb(-1);
   10662:	f04f 30ff 	mov.w	r0, #4294967295
   10666:	e7ea      	b.n	1063e <uart_callback+0x22>
        if (m_rx_cb)
   10668:	4a3e      	ldr	r2, [pc, #248]	; (10764 <uart_callback+0x148>)
   1066a:	6814      	ldr	r4, [r2, #0]
   1066c:	2c00      	cmp	r4, #0
   1066e:	d0e7      	beq.n	10640 <uart_callback+0x24>
            m_rx_cb(evt->data.rx.buf, evt->data.rx.len,evt->data.rx.offset);
   10670:	891a      	ldrh	r2, [r3, #8]
   10672:	8999      	ldrh	r1, [r3, #12]
   10674:	6858      	ldr	r0, [r3, #4]
   10676:	47a0      	blx	r4
   10678:	e7e2      	b.n	10640 <uart_callback+0x24>
		err = uart_rx_buf_rsp(uart, get_buffer(), UART_RX_LEN);
   1067a:	f7ff ff99 	bl	105b0 <get_buffer>
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
   1067e:	68a3      	ldr	r3, [r4, #8]
   10680:	4601      	mov	r1, r0
   10682:	f44f 6282 	mov.w	r2, #1040	; 0x410
   10686:	4620      	mov	r0, r4
   10688:	691b      	ldr	r3, [r3, #16]
   1068a:	4798      	blx	r3
		__ASSERT(err == 0, "Failed to provide new buffer");
   1068c:	2800      	cmp	r0, #0
   1068e:	d0d7      	beq.n	10640 <uart_callback+0x24>
   10690:	2262      	movs	r2, #98	; 0x62
   10692:	4935      	ldr	r1, [pc, #212]	; (10768 <uart_callback+0x14c>)
   10694:	4835      	ldr	r0, [pc, #212]	; (1076c <uart_callback+0x150>)
   10696:	f00a fc5d 	bl	1af54 <printk>
   1069a:	2162      	movs	r1, #98	; 0x62
   1069c:	4832      	ldr	r0, [pc, #200]	; (10768 <uart_callback+0x14c>)
   1069e:	f00a fe3d 	bl	1b31c <assert_post_action>
   106a2:	e7cd      	b.n	10640 <uart_callback+0x24>
        release_buffer(evt->data.rx_buf.buf,0);
   106a4:	685a      	ldr	r2, [r3, #4]
        if(block_list[i].buffer_ptr == buff){
   106a6:	210c      	movs	r1, #12
        release_buffer(evt->data.rx_buf.buf,0);
   106a8:	2300      	movs	r3, #0
        if(block_list[i].buffer_ptr == buff){
   106aa:	4f31      	ldr	r7, [pc, #196]	; (10770 <uart_callback+0x154>)
   106ac:	9203      	str	r2, [sp, #12]
   106ae:	fb01 f603 	mul.w	r6, r1, r3
   106b2:	59f0      	ldr	r0, [r6, r7]
   106b4:	fa5f f883 	uxtb.w	r8, r3
   106b8:	4282      	cmp	r2, r0
   106ba:	d039      	beq.n	10730 <uart_callback+0x114>
    for(uint8_t i = 0; i < UART_RX_BUF_NUM ; i++){
   106bc:	3301      	adds	r3, #1
   106be:	2b04      	cmp	r3, #4
   106c0:	d1f5      	bne.n	106ae <uart_callback+0x92>
   106c2:	4826      	ldr	r0, [pc, #152]	; (1075c <uart_callback+0x140>)
   106c4:	4b24      	ldr	r3, [pc, #144]	; (10758 <uart_callback+0x13c>)
        LOG_ERR("Buffer not in Registry");
   106c6:	492b      	ldr	r1, [pc, #172]	; (10774 <uart_callback+0x158>)
   106c8:	1ac0      	subs	r0, r0, r3
   106ca:	08c0      	lsrs	r0, r0, #3
   106cc:	0180      	lsls	r0, r0, #6
   106ce:	f040 0001 	orr.w	r0, r0, #1
   106d2:	e03b      	b.n	1074c <uart_callback+0x130>
    k_mem_slab_free(&uart_slab, (void **)&buff);
   106d4:	4828      	ldr	r0, [pc, #160]	; (10778 <uart_callback+0x15c>)
   106d6:	a903      	add	r1, sp, #12
   106d8:	f008 f888 	bl	187ec <k_mem_slab_free>
    --block_count;
   106dc:	4a27      	ldr	r2, [pc, #156]	; (1077c <uart_callback+0x160>)
    block_list[found_idx].buffer_ptr=NULL;
   106de:	51bc      	str	r4, [r7, r6]
    --block_count;
   106e0:	7813      	ldrb	r3, [r2, #0]
    block_list[found_idx].rec_offset=0;
   106e2:	606c      	str	r4, [r5, #4]
    --block_count;
   106e4:	3b01      	subs	r3, #1
   106e6:	7013      	strb	r3, [r2, #0]
    free_entry = found_idx;
   106e8:	4b25      	ldr	r3, [pc, #148]	; (10780 <uart_callback+0x164>)
   106ea:	f883 8000 	strb.w	r8, [r3]
        break;
   106ee:	e7a7      	b.n	10640 <uart_callback+0x24>
   106f0:	4b19      	ldr	r3, [pc, #100]	; (10758 <uart_callback+0x13c>)
   106f2:	481a      	ldr	r0, [pc, #104]	; (1075c <uart_callback+0x140>)
        LOG_DBG("UART_RX_DISABLED");
   106f4:	4a23      	ldr	r2, [pc, #140]	; (10784 <uart_callback+0x168>)
   106f6:	1ac0      	subs	r0, r0, r3
   106f8:	08c0      	lsrs	r0, r0, #3
   106fa:	0180      	lsls	r0, r0, #6
   106fc:	4922      	ldr	r1, [pc, #136]	; (10788 <uart_callback+0x16c>)
   106fe:	f040 0004 	orr.w	r0, r0, #4
   10702:	f00a fe3e 	bl	1b382 <log_string_sync>
   10706:	e79b      	b.n	10640 <uart_callback+0x24>
   10708:	4b13      	ldr	r3, [pc, #76]	; (10758 <uart_callback+0x13c>)
   1070a:	4814      	ldr	r0, [pc, #80]	; (1075c <uart_callback+0x140>)
        LOG_DBG("UART_RX_STOPPED");
   1070c:	4a1d      	ldr	r2, [pc, #116]	; (10784 <uart_callback+0x168>)
   1070e:	1ac0      	subs	r0, r0, r3
   10710:	08c0      	lsrs	r0, r0, #3
   10712:	0180      	lsls	r0, r0, #6
   10714:	491d      	ldr	r1, [pc, #116]	; (1078c <uart_callback+0x170>)
   10716:	f040 0004 	orr.w	r0, r0, #4
   1071a:	f00a fe32 	bl	1b382 <log_string_sync>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1071e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10722:	2300      	movs	r3, #0
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
   10724:	481a      	ldr	r0, [pc, #104]	; (10790 <uart_callback+0x174>)
   10726:	e9cd 2300 	strd	r2, r3, [sp]
   1072a:	f00a fb65 	bl	1adf8 <z_impl_k_timer_start>
}
   1072e:	e787      	b.n	10640 <uart_callback+0x24>
        block_list[found_idx].in_use_uart = 0;
   10730:	2300      	movs	r3, #0
   10732:	19bd      	adds	r5, r7, r6
    if(block_list[found_idx].in_use_app || block_list[found_idx].in_use_uart){ //If either is Activ
   10734:	7a6c      	ldrb	r4, [r5, #9]
        block_list[found_idx].in_use_uart = 0;
   10736:	722b      	strb	r3, [r5, #8]
    if(block_list[found_idx].in_use_app || block_list[found_idx].in_use_uart){ //If either is Activ
   10738:	2c00      	cmp	r4, #0
   1073a:	d0cb      	beq.n	106d4 <uart_callback+0xb8>
   1073c:	4807      	ldr	r0, [pc, #28]	; (1075c <uart_callback+0x140>)
   1073e:	4b06      	ldr	r3, [pc, #24]	; (10758 <uart_callback+0x13c>)
        LOG_INF("Buffer Still in Use");
   10740:	4914      	ldr	r1, [pc, #80]	; (10794 <uart_callback+0x178>)
   10742:	1ac0      	subs	r0, r0, r3
   10744:	08c0      	lsrs	r0, r0, #3
   10746:	0180      	lsls	r0, r0, #6
   10748:	f040 0003 	orr.w	r0, r0, #3
        LOG_ERR("Buffer not in Registry");
   1074c:	f00a fe19 	bl	1b382 <log_string_sync>
        return -1;
   10750:	e776      	b.n	10640 <uart_callback+0x24>
   10752:	bf00      	nop
   10754:	2000ce98 	.word	0x2000ce98
   10758:	0001c308 	.word	0x0001c308
   1075c:	0001c360 	.word	0x0001c360
   10760:	0001c63d 	.word	0x0001c63d
   10764:	2000ce94 	.word	0x2000ce94
   10768:	0001c60d 	.word	0x0001c60d
   1076c:	0001c625 	.word	0x0001c625
   10770:	2000ce60 	.word	0x2000ce60
   10774:	0001c685 	.word	0x0001c685
   10778:	2000cb28 	.word	0x2000cb28
   1077c:	2000d5d4 	.word	0x2000d5d4
   10780:	2000c680 	.word	0x2000c680
   10784:	0001c6f6 	.word	0x0001c6f6
   10788:	0001c65c 	.word	0x0001c65c
   1078c:	0001c671 	.word	0x0001c671
   10790:	2000cad0 	.word	0x2000cad0
   10794:	0001c648 	.word	0x0001c648

00010798 <uart_send>:
{
   10798:	b538      	push	{r3, r4, r5, lr}
    if (m_device == NULL) {
   1079a:	4b10      	ldr	r3, [pc, #64]	; (107dc <uart_send+0x44>)
{
   1079c:	4604      	mov	r4, r0
    if (m_device == NULL) {
   1079e:	6818      	ldr	r0, [r3, #0]
{
   107a0:	460a      	mov	r2, r1
    if (m_device == NULL) {
   107a2:	b1b8      	cbz	r0, 107d4 <uart_send+0x3c>
    if (p_data != NULL && length != 0) {
   107a4:	b1b4      	cbz	r4, 107d4 <uart_send+0x3c>
   107a6:	b1a9      	cbz	r1, 107d4 <uart_send+0x3c>
	return api->tx(dev, buf, len, timeout);
   107a8:	6883      	ldr	r3, [r0, #8]
   107aa:	4621      	mov	r1, r4
   107ac:	685d      	ldr	r5, [r3, #4]
   107ae:	f242 7310 	movw	r3, #10000	; 0x2710
   107b2:	47a8      	blx	r5
        if (err < 0) {
   107b4:	1e04      	subs	r4, r0, #0
   107b6:	da0b      	bge.n	107d0 <uart_send+0x38>
   107b8:	4b09      	ldr	r3, [pc, #36]	; (107e0 <uart_send+0x48>)
   107ba:	480a      	ldr	r0, [pc, #40]	; (107e4 <uart_send+0x4c>)
            LOG_ERR("%s, err:%d", __func__, err);
   107bc:	4a0a      	ldr	r2, [pc, #40]	; (107e8 <uart_send+0x50>)
   107be:	1ac0      	subs	r0, r0, r3
   107c0:	08c0      	lsrs	r0, r0, #3
   107c2:	0180      	lsls	r0, r0, #6
   107c4:	4623      	mov	r3, r4
   107c6:	4909      	ldr	r1, [pc, #36]	; (107ec <uart_send+0x54>)
   107c8:	f040 0001 	orr.w	r0, r0, #1
   107cc:	f00a fdd9 	bl	1b382 <log_string_sync>
}
   107d0:	4620      	mov	r0, r4
   107d2:	bd38      	pop	{r3, r4, r5, pc}
        return err;
   107d4:	f04f 34ff 	mov.w	r4, #4294967295
   107d8:	e7fa      	b.n	107d0 <uart_send+0x38>
   107da:	bf00      	nop
   107dc:	2000ce90 	.word	0x2000ce90
   107e0:	0001c308 	.word	0x0001c308
   107e4:	0001c360 	.word	0x0001c360
   107e8:	0001c704 	.word	0x0001c704
   107ec:	0001c69c 	.word	0x0001c69c

000107f0 <uart_init>:
{
   107f0:	4602      	mov	r2, r0
   107f2:	b538      	push	{r3, r4, r5, lr}
    if (p_device == NULL) {
   107f4:	2800      	cmp	r0, #0
   107f6:	d03c      	beq.n	10872 <uart_init+0x82>
    m_rx_cb = NULL;
   107f8:	2100      	movs	r1, #0
   107fa:	4c1f      	ldr	r4, [pc, #124]	; (10878 <uart_init+0x88>)
    m_device = p_device;
   107fc:	4b1f      	ldr	r3, [pc, #124]	; (1087c <uart_init+0x8c>)
    m_rx_cb = NULL;
   107fe:	6021      	str	r1, [r4, #0]
    m_tx_cb = NULL;
   10800:	4c1f      	ldr	r4, [pc, #124]	; (10880 <uart_init+0x90>)
    m_device = p_device;
   10802:	6018      	str	r0, [r3, #0]
    m_tx_cb = NULL;
   10804:	6021      	str	r1, [r4, #0]
	if (api->callback_set == NULL) {
   10806:	6881      	ldr	r1, [r0, #8]
   10808:	461c      	mov	r4, r3
   1080a:	680d      	ldr	r5, [r1, #0]
   1080c:	bb65      	cbnz	r5, 10868 <uart_init+0x78>
    __ASSERT(err == 0, "Failed to set callback");
   1080e:	491d      	ldr	r1, [pc, #116]	; (10884 <uart_init+0x94>)
   10810:	481d      	ldr	r0, [pc, #116]	; (10888 <uart_init+0x98>)
   10812:	22b2      	movs	r2, #178	; 0xb2
   10814:	f00a fb9e 	bl	1af54 <printk>
   10818:	21b2      	movs	r1, #178	; 0xb2
   1081a:	481a      	ldr	r0, [pc, #104]	; (10884 <uart_init+0x94>)
   1081c:	f00a fd7e 	bl	1b31c <assert_post_action>
{
   10820:	2100      	movs	r1, #0
        block_list[i].buffer_ptr=NULL;
   10822:	460a      	mov	r2, r1
   10824:	4b19      	ldr	r3, [pc, #100]	; (1088c <uart_init+0x9c>)
    for(size_t i = 0; i < UART_RX_BUF_NUM ; i++){
   10826:	3101      	adds	r1, #1
   10828:	2904      	cmp	r1, #4
        block_list[i].buffer_ptr=NULL;
   1082a:	601a      	str	r2, [r3, #0]
        block_list[i].in_use_app=0;
   1082c:	725a      	strb	r2, [r3, #9]
        block_list[i].in_use_uart=0;
   1082e:	721a      	strb	r2, [r3, #8]
        block_list[i].rec_len=0;
   10830:	80da      	strh	r2, [r3, #6]
        block_list[i].rec_offset=0;
   10832:	809a      	strh	r2, [r3, #4]
    for(size_t i = 0; i < UART_RX_BUF_NUM ; i++){
   10834:	f103 030c 	add.w	r3, r3, #12
   10838:	d1f5      	bne.n	10826 <uart_init+0x36>
    err = uart_rx_enable(m_device,get_buffer(),UART_RX_LEN, UART_RX_TIMEOUT_MS);
   1083a:	6824      	ldr	r4, [r4, #0]
   1083c:	f7ff feb8 	bl	105b0 <get_buffer>
   10840:	4601      	mov	r1, r0
	return api->rx_enable(dev, buf, len, timeout);
   10842:	68a3      	ldr	r3, [r4, #8]
   10844:	f44f 6282 	mov.w	r2, #1040	; 0x410
   10848:	68dd      	ldr	r5, [r3, #12]
   1084a:	4620      	mov	r0, r4
   1084c:	2314      	movs	r3, #20
   1084e:	47a8      	blx	r5
    __ASSERT(err == 0, "Failed to enable RX");
   10850:	b148      	cbz	r0, 10866 <uart_init+0x76>
   10852:	22c2      	movs	r2, #194	; 0xc2
   10854:	490b      	ldr	r1, [pc, #44]	; (10884 <uart_init+0x94>)
   10856:	480c      	ldr	r0, [pc, #48]	; (10888 <uart_init+0x98>)
   10858:	f00a fb7c 	bl	1af54 <printk>
   1085c:	4809      	ldr	r0, [pc, #36]	; (10884 <uart_init+0x94>)
   1085e:	21c2      	movs	r1, #194	; 0xc2
   10860:	f00a fd5c 	bl	1b31c <assert_post_action>
    return 0;
   10864:	2000      	movs	r0, #0
}
   10866:	bd38      	pop	{r3, r4, r5, pc}
	return api->callback_set(dev, callback, user_data);
   10868:	4909      	ldr	r1, [pc, #36]	; (10890 <uart_init+0xa0>)
   1086a:	47a8      	blx	r5
    __ASSERT(err == 0, "Failed to set callback");
   1086c:	2800      	cmp	r0, #0
   1086e:	d0d7      	beq.n	10820 <uart_init+0x30>
   10870:	e7cd      	b.n	1080e <uart_init+0x1e>
        return -ENXIO;
   10872:	f06f 0005 	mvn.w	r0, #5
   10876:	e7f6      	b.n	10866 <uart_init+0x76>
   10878:	2000ce94 	.word	0x2000ce94
   1087c:	2000ce90 	.word	0x2000ce90
   10880:	2000ce98 	.word	0x2000ce98
   10884:	0001c60d 	.word	0x0001c60d
   10888:	0001c625 	.word	0x0001c625
   1088c:	2000ce60 	.word	0x2000ce60
   10890:	0001061d 	.word	0x0001061d

00010894 <uart_renable>:
int uart_renable(const struct device* p_device){
   10894:	b538      	push	{r3, r4, r5, lr}
    if (p_device == NULL) {
   10896:	4604      	mov	r4, r0
   10898:	b960      	cbnz	r0, 108b4 <uart_renable+0x20>
   1089a:	4b1e      	ldr	r3, [pc, #120]	; (10914 <uart_renable+0x80>)
   1089c:	481e      	ldr	r0, [pc, #120]	; (10918 <uart_renable+0x84>)
        LOG_ERR("UART must be Device");
   1089e:	491f      	ldr	r1, [pc, #124]	; (1091c <uart_renable+0x88>)
   108a0:	1ac0      	subs	r0, r0, r3
   108a2:	08c0      	lsrs	r0, r0, #3
   108a4:	0180      	lsls	r0, r0, #6
   108a6:	f040 0001 	orr.w	r0, r0, #1
   108aa:	f00a fd6a 	bl	1b382 <log_string_sync>
        return -ENXIO;
   108ae:	f06f 0005 	mvn.w	r0, #5
}
   108b2:	bd38      	pop	{r3, r4, r5, pc}
    m_device = p_device;
   108b4:	4d1a      	ldr	r5, [pc, #104]	; (10920 <uart_renable+0x8c>)
   108b6:	6028      	str	r0, [r5, #0]
    reset_memory_slab();
   108b8:	f7ff fe3e 	bl	10538 <reset_memory_slab>
	if (api->callback_set == NULL) {
   108bc:	68a3      	ldr	r3, [r4, #8]
   108be:	681b      	ldr	r3, [r3, #0]
   108c0:	bb03      	cbnz	r3, 10904 <uart_renable+0x70>
    __ASSERT(err == 0, "Failed to set callback");
   108c2:	4918      	ldr	r1, [pc, #96]	; (10924 <uart_renable+0x90>)
   108c4:	4818      	ldr	r0, [pc, #96]	; (10928 <uart_renable+0x94>)
   108c6:	22d5      	movs	r2, #213	; 0xd5
   108c8:	f00a fb44 	bl	1af54 <printk>
   108cc:	21d5      	movs	r1, #213	; 0xd5
   108ce:	4815      	ldr	r0, [pc, #84]	; (10924 <uart_renable+0x90>)
   108d0:	f00a fd24 	bl	1b31c <assert_post_action>
        err = uart_rx_enable(m_device,get_buffer(),UART_RX_LEN, UART_RX_TIMEOUT_MS);
   108d4:	682c      	ldr	r4, [r5, #0]
   108d6:	f7ff fe6b 	bl	105b0 <get_buffer>
   108da:	4601      	mov	r1, r0
	return api->rx_enable(dev, buf, len, timeout);
   108dc:	68a3      	ldr	r3, [r4, #8]
   108de:	f44f 6282 	mov.w	r2, #1040	; 0x410
   108e2:	68dd      	ldr	r5, [r3, #12]
   108e4:	4620      	mov	r0, r4
   108e6:	2314      	movs	r3, #20
   108e8:	47a8      	blx	r5
    __ASSERT(err == 0, "Failed to enable RX");
   108ea:	2800      	cmp	r0, #0
   108ec:	d0e1      	beq.n	108b2 <uart_renable+0x1e>
   108ee:	22d8      	movs	r2, #216	; 0xd8
   108f0:	490c      	ldr	r1, [pc, #48]	; (10924 <uart_renable+0x90>)
   108f2:	480d      	ldr	r0, [pc, #52]	; (10928 <uart_renable+0x94>)
   108f4:	f00a fb2e 	bl	1af54 <printk>
   108f8:	480a      	ldr	r0, [pc, #40]	; (10924 <uart_renable+0x90>)
   108fa:	21d8      	movs	r1, #216	; 0xd8
   108fc:	f00a fd0e 	bl	1b31c <assert_post_action>
    return 0;
   10900:	2000      	movs	r0, #0
   10902:	e7d6      	b.n	108b2 <uart_renable+0x1e>
	return api->callback_set(dev, callback, user_data);
   10904:	4622      	mov	r2, r4
   10906:	4620      	mov	r0, r4
   10908:	4908      	ldr	r1, [pc, #32]	; (1092c <uart_renable+0x98>)
   1090a:	4798      	blx	r3
    __ASSERT(err == 0, "Failed to set callback");
   1090c:	2800      	cmp	r0, #0
   1090e:	d0e1      	beq.n	108d4 <uart_renable+0x40>
   10910:	e7d7      	b.n	108c2 <uart_renable+0x2e>
   10912:	bf00      	nop
   10914:	0001c308 	.word	0x0001c308
   10918:	0001c360 	.word	0x0001c360
   1091c:	0001c6a7 	.word	0x0001c6a7
   10920:	2000ce90 	.word	0x2000ce90
   10924:	0001c60d 	.word	0x0001c60d
   10928:	0001c625 	.word	0x0001c625
   1092c:	0001061d 	.word	0x0001061d

00010930 <update_expiry_function>:
void update_expiry_function(struct k_timer *timer_id){
   10930:	b510      	push	{r4, lr}
   10932:	4b0d      	ldr	r3, [pc, #52]	; (10968 <update_expiry_function+0x38>)
   10934:	4c0d      	ldr	r4, [pc, #52]	; (1096c <update_expiry_function+0x3c>)
	LOG_INF("Reset Uart");
   10936:	490e      	ldr	r1, [pc, #56]	; (10970 <update_expiry_function+0x40>)
   10938:	1ae4      	subs	r4, r4, r3
   1093a:	08e4      	lsrs	r4, r4, #3
   1093c:	01a4      	lsls	r4, r4, #6
   1093e:	f044 0003 	orr.w	r0, r4, #3
   10942:	f00a fd1e 	bl	1b382 <log_string_sync>
    err = uart_renable(m_device);
   10946:	4b0b      	ldr	r3, [pc, #44]	; (10974 <update_expiry_function+0x44>)
   10948:	6818      	ldr	r0, [r3, #0]
   1094a:	f7ff ffa3 	bl	10894 <uart_renable>
    if(err != 0){
   1094e:	b130      	cbz	r0, 1095e <update_expiry_function+0x2e>
        LOG_ERR("Hard Problem Enabling Uart");
   10950:	f044 0001 	orr.w	r0, r4, #1
   10954:	4908      	ldr	r1, [pc, #32]	; (10978 <update_expiry_function+0x48>)
}
   10956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_ERR("Hard Problem Enabling Uart");
   1095a:	f00a bd12 	b.w	1b382 <log_string_sync>
		arch_syscall_invoke1(*(uintptr_t *)&timer, K_SYSCALL_K_TIMER_STOP);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_stop(timer);
   1095e:	4807      	ldr	r0, [pc, #28]	; (1097c <update_expiry_function+0x4c>)
}
   10960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10964:	f00b bb2f 	b.w	1bfc6 <z_impl_k_timer_stop>
   10968:	0001c308 	.word	0x0001c308
   1096c:	0001c360 	.word	0x0001c360
   10970:	0001c6bb 	.word	0x0001c6bb
   10974:	2000ce90 	.word	0x2000ce90
   10978:	0001c6c6 	.word	0x0001c6c6
   1097c:	2000cad0 	.word	0x2000cad0

00010980 <uart_uninit>:
    if (m_device == NULL) {
   10980:	4b0e      	ldr	r3, [pc, #56]	; (109bc <uart_uninit+0x3c>)
{
   10982:	b510      	push	{r4, lr}
    if (m_device == NULL) {
   10984:	6818      	ldr	r0, [r3, #0]
   10986:	b1b8      	cbz	r0, 109b8 <uart_uninit+0x38>
    m_rx_cb = cb;
   10988:	2300      	movs	r3, #0
   1098a:	4a0d      	ldr	r2, [pc, #52]	; (109c0 <uart_uninit+0x40>)
   1098c:	6013      	str	r3, [r2, #0]
    m_tx_cb = cb;
   1098e:	4a0d      	ldr	r2, [pc, #52]	; (109c4 <uart_uninit+0x44>)
   10990:	6013      	str	r3, [r2, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   10992:	6883      	ldr	r3, [r0, #8]
   10994:	695b      	ldr	r3, [r3, #20]
   10996:	4798      	blx	r3
    reset_memory_slab();
   10998:	f7ff fdce 	bl	10538 <reset_memory_slab>
}
   1099c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   109a0:	4b09      	ldr	r3, [pc, #36]	; (109c8 <uart_uninit+0x48>)
   109a2:	480a      	ldr	r0, [pc, #40]	; (109cc <uart_uninit+0x4c>)
    LOG_DBG("%s done", __func__);
   109a4:	490a      	ldr	r1, [pc, #40]	; (109d0 <uart_uninit+0x50>)
   109a6:	1ac0      	subs	r0, r0, r3
   109a8:	08c0      	lsrs	r0, r0, #3
   109aa:	4b0a      	ldr	r3, [pc, #40]	; (109d4 <uart_uninit+0x54>)
   109ac:	0180      	lsls	r0, r0, #6
   109ae:	461a      	mov	r2, r3
   109b0:	f040 0004 	orr.w	r0, r0, #4
   109b4:	f00a bce5 	b.w	1b382 <log_string_sync>
}
   109b8:	bd10      	pop	{r4, pc}
   109ba:	bf00      	nop
   109bc:	2000ce90 	.word	0x2000ce90
   109c0:	2000ce94 	.word	0x2000ce94
   109c4:	2000ce98 	.word	0x2000ce98
   109c8:	0001c308 	.word	0x0001c308
   109cc:	0001c360 	.word	0x0001c360
   109d0:	0001c6e1 	.word	0x0001c6e1
   109d4:	0001c70e 	.word	0x0001c70e

000109d8 <uart_rx_cb_set>:
    m_rx_cb = cb;
   109d8:	4b01      	ldr	r3, [pc, #4]	; (109e0 <uart_rx_cb_set+0x8>)
   109da:	6018      	str	r0, [r3, #0]
}
   109dc:	4770      	bx	lr
   109de:	bf00      	nop
   109e0:	2000ce94 	.word	0x2000ce94

000109e4 <uart_tx_cb_set>:
    m_tx_cb = cb;
   109e4:	4b01      	ldr	r3, [pc, #4]	; (109ec <uart_tx_cb_set+0x8>)
   109e6:	6018      	str	r0, [r3, #0]
}
   109e8:	4770      	bx	lr
   109ea:	bf00      	nop
   109ec:	2000ce98 	.word	0x2000ce98

000109f0 <rsp_cb_ping>:
   109f0:	4805      	ldr	r0, [pc, #20]	; (10a08 <rsp_cb_ping+0x18>)
   109f2:	4b06      	ldr	r3, [pc, #24]	; (10a0c <rsp_cb_ping+0x1c>)
}

/**@brief Callback function for ping response. */
static void rsp_cb_ping(uint8_t* p_rsp, uint16_t rsp_len)
{
    LOG_INF("%s", __func__);
   109f4:	4a06      	ldr	r2, [pc, #24]	; (10a10 <rsp_cb_ping+0x20>)
   109f6:	1ac0      	subs	r0, r0, r3
   109f8:	08c0      	lsrs	r0, r0, #3
   109fa:	0180      	lsls	r0, r0, #6
   109fc:	4905      	ldr	r1, [pc, #20]	; (10a14 <rsp_cb_ping+0x24>)
   109fe:	f040 0003 	orr.w	r0, r0, #3
   10a02:	f00a bcbe 	b.w	1b382 <log_string_sync>
   10a06:	bf00      	nop
   10a08:	0001c310 	.word	0x0001c310
   10a0c:	0001c308 	.word	0x0001c308
   10a10:	0001c9a0 	.word	0x0001c9a0
   10a14:	0001c730 	.word	0x0001c730

00010a18 <req_cb_raw_data>:
}

/**@brief Callback function for raw_data request. */
static int req_cb_raw_data(uint8_t* p_req, uint16_t req_len, cmd_respond_t respond)
{
   10a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a1a:	460d      	mov	r5, r1
   10a1c:	4b10      	ldr	r3, [pc, #64]	; (10a60 <req_cb_raw_data+0x48>)
   10a1e:	4c11      	ldr	r4, [pc, #68]	; (10a64 <req_cb_raw_data+0x4c>)
   10a20:	4607      	mov	r7, r0
   10a22:	1ae4      	subs	r4, r4, r3
   10a24:	08e4      	lsrs	r4, r4, #3
    LOG_DBG("%s", __func__);
   10a26:	4b10      	ldr	r3, [pc, #64]	; (10a68 <req_cb_raw_data+0x50>)
   10a28:	01a4      	lsls	r4, r4, #6
{
   10a2a:	4616      	mov	r6, r2
    LOG_DBG("%s", __func__);
   10a2c:	490f      	ldr	r1, [pc, #60]	; (10a6c <req_cb_raw_data+0x54>)
   10a2e:	461a      	mov	r2, r3
   10a30:	f044 0004 	orr.w	r0, r4, #4
   10a34:	f00a fca5 	bl	1b382 <log_string_sync>
    char* rsp = "ok";

    // TODO: fill user function to handle raw data
    if (req_len > 0) {
   10a38:	b14d      	cbz	r5, 10a4e <req_cb_raw_data+0x36>
        LOG_HEXDUMP_INF(p_req, MIN(req_len, 8), "raw data:");
   10a3a:	2d08      	cmp	r5, #8
   10a3c:	462b      	mov	r3, r5
   10a3e:	463a      	mov	r2, r7
   10a40:	bf28      	it	cs
   10a42:	2308      	movcs	r3, #8
   10a44:	490a      	ldr	r1, [pc, #40]	; (10a70 <req_cb_raw_data+0x58>)
   10a46:	f044 0003 	orr.w	r0, r4, #3
   10a4a:	f001 fd29 	bl	124a0 <log_hexdump_sync>
    }

    respond(rsp, strlen(rsp));
   10a4e:	4809      	ldr	r0, [pc, #36]	; (10a74 <req_cb_raw_data+0x5c>)
   10a50:	f00a fd29 	bl	1b4a6 <strlen>
   10a54:	b281      	uxth	r1, r0
   10a56:	4807      	ldr	r0, [pc, #28]	; (10a74 <req_cb_raw_data+0x5c>)
   10a58:	47b0      	blx	r6

    return 0;
}
   10a5a:	2000      	movs	r0, #0
   10a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a5e:	bf00      	nop
   10a60:	0001c308 	.word	0x0001c308
   10a64:	0001c310 	.word	0x0001c310
   10a68:	0001c9ac 	.word	0x0001c9ac
   10a6c:	0001c72c 	.word	0x0001c72c
   10a70:	0001c733 	.word	0x0001c733
   10a74:	0001c73d 	.word	0x0001c73d

00010a78 <req_cb_ping>:
{
   10a78:	b538      	push	{r3, r4, r5, lr}
   10a7a:	480a      	ldr	r0, [pc, #40]	; (10aa4 <req_cb_ping+0x2c>)
   10a7c:	4b0a      	ldr	r3, [pc, #40]	; (10aa8 <req_cb_ping+0x30>)
    respond(rsp, strlen(rsp));
   10a7e:	4d0b      	ldr	r5, [pc, #44]	; (10aac <req_cb_ping+0x34>)
   10a80:	1ac0      	subs	r0, r0, r3
   10a82:	08c0      	lsrs	r0, r0, #3
    LOG_INF("%s", __func__);
   10a84:	0180      	lsls	r0, r0, #6
{
   10a86:	4614      	mov	r4, r2
    LOG_INF("%s", __func__);
   10a88:	4909      	ldr	r1, [pc, #36]	; (10ab0 <req_cb_ping+0x38>)
   10a8a:	4a0a      	ldr	r2, [pc, #40]	; (10ab4 <req_cb_ping+0x3c>)
   10a8c:	f040 0003 	orr.w	r0, r0, #3
   10a90:	f00a fc77 	bl	1b382 <log_string_sync>
    respond(rsp, strlen(rsp));
   10a94:	4628      	mov	r0, r5
   10a96:	f00a fd06 	bl	1b4a6 <strlen>
   10a9a:	b281      	uxth	r1, r0
   10a9c:	4628      	mov	r0, r5
   10a9e:	47a0      	blx	r4
}
   10aa0:	2000      	movs	r0, #0
   10aa2:	bd38      	pop	{r3, r4, r5, pc}
   10aa4:	0001c310 	.word	0x0001c310
   10aa8:	0001c308 	.word	0x0001c308
   10aac:	0001c73d 	.word	0x0001c73d
   10ab0:	0001c730 	.word	0x0001c730
   10ab4:	0001c994 	.word	0x0001c994

00010ab8 <rsp_cb_raw_data>:

/**@brief Callback function for mtu_get response. */
static void rsp_cb_raw_data(uint8_t* p_rsp, uint16_t rsp_len)
{
   10ab8:	b570      	push	{r4, r5, r6, lr}
   10aba:	460d      	mov	r5, r1
   10abc:	4b0d      	ldr	r3, [pc, #52]	; (10af4 <rsp_cb_raw_data+0x3c>)
   10abe:	4c0e      	ldr	r4, [pc, #56]	; (10af8 <rsp_cb_raw_data+0x40>)
   10ac0:	4606      	mov	r6, r0
   10ac2:	1ae4      	subs	r4, r4, r3
   10ac4:	08e4      	lsrs	r4, r4, #3
    LOG_DBG("%s", __func__);
   10ac6:	4b0d      	ldr	r3, [pc, #52]	; (10afc <rsp_cb_raw_data+0x44>)
   10ac8:	01a4      	lsls	r4, r4, #6
   10aca:	461a      	mov	r2, r3
   10acc:	490c      	ldr	r1, [pc, #48]	; (10b00 <rsp_cb_raw_data+0x48>)
   10ace:	f044 0004 	orr.w	r0, r4, #4
   10ad2:	f00a fc56 	bl	1b382 <log_string_sync>

    if (rsp_len > 0) {
   10ad6:	b15d      	cbz	r5, 10af0 <rsp_cb_raw_data+0x38>
        LOG_HEXDUMP_INF(p_rsp, MIN(rsp_len, 8), "raw data:");
   10ad8:	2d08      	cmp	r5, #8
   10ada:	462b      	mov	r3, r5
   10adc:	4632      	mov	r2, r6
   10ade:	f044 0003 	orr.w	r0, r4, #3
   10ae2:	bf28      	it	cs
   10ae4:	2308      	movcs	r3, #8
    }
}
   10ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        LOG_HEXDUMP_INF(p_rsp, MIN(rsp_len, 8), "raw data:");
   10aea:	4906      	ldr	r1, [pc, #24]	; (10b04 <rsp_cb_raw_data+0x4c>)
   10aec:	f001 bcd8 	b.w	124a0 <log_hexdump_sync>
}
   10af0:	bd70      	pop	{r4, r5, r6, pc}
   10af2:	bf00      	nop
   10af4:	0001c308 	.word	0x0001c308
   10af8:	0001c310 	.word	0x0001c310
   10afc:	0001c9bc 	.word	0x0001c9bc
   10b00:	0001c72c 	.word	0x0001c72c
   10b04:	0001c733 	.word	0x0001c733

00010b08 <state_set.constprop.0>:
static void state_set(cmd_context_t* p_cmd_ctx, cmd_state_t new_state)
   10b08:	b513      	push	{r0, r1, r4, lr}
        if (mode_get(&m_cmd_ctx) != CMD_MODE_HOST) {
   10b0a:	2100      	movs	r1, #0
   10b0c:	4b2e      	ldr	r3, [pc, #184]	; (10bc8 <state_set.constprop.0+0xc0>)
   10b0e:	785c      	ldrb	r4, [r3, #1]
   10b10:	781a      	ldrb	r2, [r3, #0]
    if (old_state != new_state) {
   10b12:	42a0      	cmp	r0, r4
   10b14:	d107      	bne.n	10b26 <state_set.constprop.0+0x1e>
   10b16:	b101      	cbz	r1, 10b1a <state_set.constprop.0+0x12>
   10b18:	7058      	strb	r0, [r3, #1]
}
   10b1a:	b002      	add	sp, #8
   10b1c:	bd10      	pop	{r4, pc}
static void state_set(cmd_context_t* p_cmd_ctx, cmd_state_t new_state)
   10b1e:	4604      	mov	r4, r0
   10b20:	2101      	movs	r1, #1
   10b22:	2000      	movs	r0, #0
   10b24:	e7f5      	b.n	10b12 <state_set.constprop.0+0xa>
    switch (state) {
   10b26:	280b      	cmp	r0, #11
   10b28:	d8f6      	bhi.n	10b18 <state_set.constprop.0+0x10>
   10b2a:	a101      	add	r1, pc, #4	; (adr r1, 10b30 <state_set.constprop.0+0x28>)
   10b2c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   10b30:	00010b61 	.word	0x00010b61
   10b34:	00010b6d 	.word	0x00010b6d
   10b38:	00010b77 	.word	0x00010b77
   10b3c:	00010ba7 	.word	0x00010ba7
   10b40:	00010bb5 	.word	0x00010bb5
   10b44:	00010b19 	.word	0x00010b19
   10b48:	00010b1f 	.word	0x00010b1f
   10b4c:	00010b19 	.word	0x00010b19
   10b50:	00010b91 	.word	0x00010b91
   10b54:	00010b1f 	.word	0x00010b1f
   10b58:	00010b1f 	.word	0x00010b1f
   10b5c:	00010bbd 	.word	0x00010bbd
   10b60:	2100      	movs	r1, #0
   10b62:	7059      	strb	r1, [r3, #1]
    if (old_mode != new_mode) {
   10b64:	2a00      	cmp	r2, #0
   10b66:	d0d8      	beq.n	10b1a <state_set.constprop.0+0x12>
        p_cmd_ctx->mode = new_mode;
   10b68:	7019      	strb	r1, [r3, #0]
   10b6a:	e7d6      	b.n	10b1a <state_set.constprop.0+0x12>
   10b6c:	2101      	movs	r1, #1
    if (old_mode != new_mode) {
   10b6e:	428a      	cmp	r2, r1
   10b70:	7059      	strb	r1, [r3, #1]
   10b72:	d1f9      	bne.n	10b68 <state_set.constprop.0+0x60>
   10b74:	e7d1      	b.n	10b1a <state_set.constprop.0+0x12>
   10b76:	2202      	movs	r2, #2
   10b78:	705a      	strb	r2, [r3, #1]
	z_impl_k_timer_start(timer, duration, period);
   10b7a:	2200      	movs	r2, #0
   10b7c:	2300      	movs	r3, #0
   10b7e:	4813      	ldr	r0, [pc, #76]	; (10bcc <state_set.constprop.0+0xc4>)
   10b80:	e9cd 2300 	strd	r2, r3, [sp]
   10b84:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   10b88:	2300      	movs	r3, #0
   10b8a:	f00a f935 	bl	1adf8 <z_impl_k_timer_start>
        break;
   10b8e:	e7c4      	b.n	10b1a <state_set.constprop.0+0x12>
   10b90:	2208      	movs	r2, #8
   10b92:	705a      	strb	r2, [r3, #1]
	z_impl_k_timer_stop(timer);
   10b94:	480d      	ldr	r0, [pc, #52]	; (10bcc <state_set.constprop.0+0xc4>)
   10b96:	f00b fa16 	bl	1bfc6 <z_impl_k_timer_stop>
        k_work_submit(&wk_proc_rsp);
   10b9a:	480d      	ldr	r0, [pc, #52]	; (10bd0 <state_set.constprop.0+0xc8>)
}
   10b9c:	b002      	add	sp, #8
   10b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        k_work_submit(&wk_proc_req);
   10ba2:	f008 bbf9 	b.w	19398 <k_work_submit>
   10ba6:	2103      	movs	r1, #3
    if (old_mode != new_mode) {
   10ba8:	2a02      	cmp	r2, #2
   10baa:	7059      	strb	r1, [r3, #1]
   10bac:	d0b5      	beq.n	10b1a <state_set.constprop.0+0x12>
        p_cmd_ctx->mode = new_mode;
   10bae:	2202      	movs	r2, #2
   10bb0:	701a      	strb	r2, [r3, #0]
   10bb2:	e7b2      	b.n	10b1a <state_set.constprop.0+0x12>
   10bb4:	2204      	movs	r2, #4
        k_work_submit(&wk_proc_req);
   10bb6:	4807      	ldr	r0, [pc, #28]	; (10bd4 <state_set.constprop.0+0xcc>)
   10bb8:	705a      	strb	r2, [r3, #1]
   10bba:	e7ef      	b.n	10b9c <state_set.constprop.0+0x94>
        if (mode_get(&m_cmd_ctx) != CMD_MODE_HOST) {
   10bbc:	2a01      	cmp	r2, #1
   10bbe:	d1ae      	bne.n	10b1e <state_set.constprop.0+0x16>
   10bc0:	220b      	movs	r2, #11
   10bc2:	705a      	strb	r2, [r3, #1]
}
   10bc4:	e7a9      	b.n	10b1a <state_set.constprop.0+0x12>
   10bc6:	bf00      	nop
   10bc8:	2000cf8c 	.word	0x2000cf8c
   10bcc:	2000ca98 	.word	0x2000ca98
   10bd0:	2000cfc0 	.word	0x2000cfc0
   10bd4:	2000cfb0 	.word	0x2000cfb0

00010bd8 <on_uart_tx_empty>:
    if (event == 0) {
   10bd8:	b9a0      	cbnz	r0, 10c04 <on_uart_tx_empty+0x2c>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   10bda:	4b0b      	ldr	r3, [pc, #44]	; (10c08 <on_uart_tx_empty+0x30>)
   10bdc:	781b      	ldrb	r3, [r3, #0]
   10bde:	2b01      	cmp	r3, #1
   10be0:	d102      	bne.n	10be8 <on_uart_tx_empty+0x10>
        state_set(&m_cmd_ctx, CMD_STATE_REQ_SENT);
   10be2:	2002      	movs	r0, #2
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
   10be4:	f7ff bf90 	b.w	10b08 <state_set.constprop.0>
    else if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   10be8:	2b02      	cmp	r3, #2
   10bea:	d101      	bne.n	10bf0 <on_uart_tx_empty+0x18>
        state_set(&m_cmd_ctx, CMD_STATE_RSP_SENT);
   10bec:	2006      	movs	r0, #6
   10bee:	e7f9      	b.n	10be4 <on_uart_tx_empty+0xc>
   10bf0:	4806      	ldr	r0, [pc, #24]	; (10c0c <on_uart_tx_empty+0x34>)
   10bf2:	4b07      	ldr	r3, [pc, #28]	; (10c10 <on_uart_tx_empty+0x38>)
        LOG_ERR("Should not come here");
   10bf4:	4907      	ldr	r1, [pc, #28]	; (10c14 <on_uart_tx_empty+0x3c>)
   10bf6:	1ac0      	subs	r0, r0, r3
   10bf8:	08c0      	lsrs	r0, r0, #3
   10bfa:	0180      	lsls	r0, r0, #6
   10bfc:	f040 0001 	orr.w	r0, r0, #1
   10c00:	f00a bbbf 	b.w	1b382 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
   10c04:	200a      	movs	r0, #10
   10c06:	e7ed      	b.n	10be4 <on_uart_tx_empty+0xc>
   10c08:	2000cf8c 	.word	0x2000cf8c
   10c0c:	0001c310 	.word	0x0001c310
   10c10:	0001c308 	.word	0x0001c308
   10c14:	0001c740 	.word	0x0001c740

00010c18 <cmd_send>:
{
   10c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   10c1c:	4b1e      	ldr	r3, [pc, #120]	; (10c98 <cmd_send+0x80>)
{
   10c1e:	4607      	mov	r7, r0
    if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   10c20:	781b      	ldrb	r3, [r3, #0]
   10c22:	2b02      	cmp	r3, #2
        state_set(&m_cmd_ctx, CMD_STATE_RSP_SENDING);
   10c24:	bf0c      	ite	eq
   10c26:	2005      	moveq	r0, #5
        state_set(&m_cmd_ctx, CMD_STATE_REQ_SENDING);
   10c28:	2001      	movne	r0, #1
   10c2a:	f7ff ff6d 	bl	10b08 <state_set.constprop.0>
    p_buff->length = 0;
   10c2e:	2200      	movs	r2, #0
   10c30:	4b1a      	ldr	r3, [pc, #104]	; (10c9c <cmd_send+0x84>)
    pdu_len = p_cmd->length;
   10c32:	893d      	ldrh	r5, [r7, #8]
    p_buff->length = 0;
   10c34:	605a      	str	r2, [r3, #4]
    p_packet = p_buff->p_data;
   10c36:	681e      	ldr	r6, [r3, #0]
    p_packet[CMD_FMT_OFFSET_START] =
   10c38:	783b      	ldrb	r3, [r7, #0]
   10c3a:	46b0      	mov	r8, r6
   10c3c:	2b01      	cmp	r3, #1
   10c3e:	bf0c      	ite	eq
   10c40:	2369      	moveq	r3, #105	; 0x69
   10c42:	2342      	movne	r3, #66	; 0x42
    uint16_encode(CMD_FMT_SIZE_OPCODE + pdu_len,
   10c44:	b22c      	sxth	r4, r5
    p_packet[CMD_FMT_OFFSET_START] =
   10c46:	f808 3b01 	strb.w	r3, [r8], #1
    uint16_encode(CMD_FMT_SIZE_OPCODE + pdu_len,
   10c4a:	1c63      	adds	r3, r4, #1
   10c4c:	b21b      	sxth	r3, r3
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   10c4e:	7073      	strb	r3, [r6, #1]
	dst[1] = val >> 8;
   10c50:	f3c3 2307 	ubfx	r3, r3, #8, #8
   10c54:	70b3      	strb	r3, [r6, #2]
    p_packet[CMD_FMT_OFFSET_OPCODE] = p_cmd->op_code;
   10c56:	787b      	ldrb	r3, [r7, #1]
   10c58:	70f3      	strb	r3, [r6, #3]
    if (pdu_len > 0 && p_cmd->p_data != NULL) {
   10c5a:	b12d      	cbz	r5, 10c68 <cmd_send+0x50>
   10c5c:	6879      	ldr	r1, [r7, #4]
   10c5e:	b119      	cbz	r1, 10c68 <cmd_send+0x50>
        memcpy(&p_packet[CMD_FMT_OFFSET_PDU], p_cmd->p_data, pdu_len);
   10c60:	462a      	mov	r2, r5
   10c62:	1d30      	adds	r0, r6, #4
   10c64:	f00a fc4b 	bl	1b4fe <memcpy>
    crc16 = crc16_compute(&p_packet[CMD_FMT_OFFSET_LEN],
   10c68:	4641      	mov	r1, r8
   10c6a:	1cea      	adds	r2, r5, #3
   10c6c:	2000      	movs	r0, #0
   10c6e:	f00a f94a 	bl	1af06 <crc16_itu_t>
    pkt_len = CMD_FMT_OFFSET_PDU + pdu_len + CMD_FMT_SIZE_CRC;
   10c72:	1da1      	adds	r1, r4, #6
   10c74:	b289      	uxth	r1, r1
    pkt_len = MIN(pkt_len, CMD_MAX_PACKET_LENGTH);
   10c76:	f5b1 6f82 	cmp.w	r1, #1040	; 0x410
   10c7a:	bf28      	it	cs
   10c7c:	f44f 6182 	movcs.w	r1, #1040	; 0x410
    uint16_encode(crc16, &p_packet[CMD_FMT_OFFSET_PDU + pdu_len]);
   10c80:	3504      	adds	r5, #4
	dst[0] = val;
   10c82:	5570      	strb	r0, [r6, r5]
   10c84:	1973      	adds	r3, r6, r5
	dst[1] = val >> 8;
   10c86:	0a00      	lsrs	r0, r0, #8
   10c88:	7058      	strb	r0, [r3, #1]
    p_buff->length = pkt_len;
   10c8a:	4b04      	ldr	r3, [pc, #16]	; (10c9c <cmd_send+0x84>)
}
   10c8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return uart_send(m_tx_buff.p_data, m_tx_buff.length);
   10c90:	6818      	ldr	r0, [r3, #0]
    p_buff->length = pkt_len;
   10c92:	8099      	strh	r1, [r3, #4]
    return uart_send(m_tx_buff.p_data, m_tx_buff.length);
   10c94:	f7ff bd80 	b.w	10798 <uart_send>
   10c98:	2000cf8c 	.word	0x2000cf8c
   10c9c:	2000cfa8 	.word	0x2000cfa8

00010ca0 <app_cmd_respond>:
{
   10ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (state_get(&m_cmd_ctx) != CMD_STATE_REQ_RECEIVED &&
   10ca2:	4b19      	ldr	r3, [pc, #100]	; (10d08 <app_cmd_respond+0x68>)
   10ca4:	785a      	ldrb	r2, [r3, #1]
   10ca6:	2a04      	cmp	r2, #4
   10ca8:	d00e      	beq.n	10cc8 <app_cmd_respond+0x28>
   10caa:	2a02      	cmp	r2, #2
   10cac:	d00c      	beq.n	10cc8 <app_cmd_respond+0x28>
   10cae:	4817      	ldr	r0, [pc, #92]	; (10d0c <app_cmd_respond+0x6c>)
   10cb0:	4b17      	ldr	r3, [pc, #92]	; (10d10 <app_cmd_respond+0x70>)
        LOG_ERR("Invalid state for response:%d", state_get(&m_cmd_ctx));
   10cb2:	4918      	ldr	r1, [pc, #96]	; (10d14 <app_cmd_respond+0x74>)
   10cb4:	1ac0      	subs	r0, r0, r3
   10cb6:	08c0      	lsrs	r0, r0, #3
   10cb8:	0180      	lsls	r0, r0, #6
   10cba:	f040 0001 	orr.w	r0, r0, #1
   10cbe:	f00a fb60 	bl	1b382 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
   10cc2:	f04f 30ff 	mov.w	r0, #4294967295
   10cc6:	e00e      	b.n	10ce6 <app_cmd_respond+0x46>
    if (p_buff == NULL || p_buff->p_data == NULL) {
   10cc8:	4b13      	ldr	r3, [pc, #76]	; (10d18 <app_cmd_respond+0x78>)
   10cca:	681b      	ldr	r3, [r3, #0]
   10ccc:	b173      	cbz	r3, 10cec <app_cmd_respond+0x4c>
    cmd.type = X_CMD_TYPE_RESPONSE;
   10cce:	2201      	movs	r2, #1
    *op_code = p_buff->p_data[CMD_FMT_OFFSET_OPCODE];
   10cd0:	78db      	ldrb	r3, [r3, #3]
    cmd.p_data = p_data;
   10cd2:	9002      	str	r0, [sp, #8]
    return cmd_send(&cmd);
   10cd4:	a801      	add	r0, sp, #4
    cmd.type = X_CMD_TYPE_RESPONSE;
   10cd6:	f88d 2004 	strb.w	r2, [sp, #4]
    cmd.op_code = op_code;
   10cda:	f88d 3005 	strb.w	r3, [sp, #5]
    cmd.length = length;
   10cde:	f8ad 100c 	strh.w	r1, [sp, #12]
    return cmd_send(&cmd);
   10ce2:	f7ff ff99 	bl	10c18 <cmd_send>
}
   10ce6:	b005      	add	sp, #20
   10ce8:	f85d fb04 	ldr.w	pc, [sp], #4
   10cec:	4b08      	ldr	r3, [pc, #32]	; (10d10 <app_cmd_respond+0x70>)
   10cee:	4807      	ldr	r0, [pc, #28]	; (10d0c <app_cmd_respond+0x6c>)
        LOG_ERR("rx buffer is reset too early");
   10cf0:	490a      	ldr	r1, [pc, #40]	; (10d1c <app_cmd_respond+0x7c>)
   10cf2:	1ac0      	subs	r0, r0, r3
   10cf4:	08c0      	lsrs	r0, r0, #3
   10cf6:	0180      	lsls	r0, r0, #6
   10cf8:	f040 0001 	orr.w	r0, r0, #1
   10cfc:	f00a fb41 	bl	1b382 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
   10d00:	200a      	movs	r0, #10
   10d02:	f7ff ff01 	bl	10b08 <state_set.constprop.0>
   10d06:	e7dc      	b.n	10cc2 <app_cmd_respond+0x22>
   10d08:	2000cf8c 	.word	0x2000cf8c
   10d0c:	0001c310 	.word	0x0001c310
   10d10:	0001c308 	.word	0x0001c308
   10d14:	0001c755 	.word	0x0001c755
   10d18:	2000cfa0 	.word	0x2000cfa0
   10d1c:	0001c773 	.word	0x0001c773

00010d20 <on_uart_rx_ready>:
{
   10d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   10d24:	4c75      	ldr	r4, [pc, #468]	; (10efc <on_uart_rx_ready+0x1dc>)
{
   10d26:	4688      	mov	r8, r1
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   10d28:	7821      	ldrb	r1, [r4, #0]
{
   10d2a:	4603      	mov	r3, r0
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   10d2c:	2901      	cmp	r1, #1
   10d2e:	4626      	mov	r6, r4
   10d30:	d110      	bne.n	10d54 <on_uart_rx_ready+0x34>
        if (m_cmd_ctx.state != CMD_STATE_REQ_SENT &&
   10d32:	7861      	ldrb	r1, [r4, #1]
   10d34:	2902      	cmp	r1, #2
   10d36:	d019      	beq.n	10d6c <on_uart_rx_ready+0x4c>
   10d38:	2907      	cmp	r1, #7
   10d3a:	d017      	beq.n	10d6c <on_uart_rx_ready+0x4c>
   10d3c:	4870      	ldr	r0, [pc, #448]	; (10f00 <on_uart_rx_ready+0x1e0>)
   10d3e:	4b71      	ldr	r3, [pc, #452]	; (10f04 <on_uart_rx_ready+0x1e4>)
            LOG_WRN("Invalid state for rx(host)");
   10d40:	4971      	ldr	r1, [pc, #452]	; (10f08 <on_uart_rx_ready+0x1e8>)
   10d42:	1ac0      	subs	r0, r0, r3
   10d44:	08c0      	lsrs	r0, r0, #3
   10d46:	0180      	lsls	r0, r0, #6
            LOG_WRN("Invalid state for rx(slave)");
   10d48:	f040 0002 	orr.w	r0, r0, #2
}
   10d4c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            LOG_WRN("Invalid state for rx(slave)");
   10d50:	f00a bb17 	b.w	1b382 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   10d54:	2902      	cmp	r1, #2
   10d56:	d109      	bne.n	10d6c <on_uart_rx_ready+0x4c>
        if (m_cmd_ctx.state != CMD_STATE_REQ_RECEIVING) {
   10d58:	7861      	ldrb	r1, [r4, #1]
   10d5a:	2903      	cmp	r1, #3
   10d5c:	d006      	beq.n	10d6c <on_uart_rx_ready+0x4c>
   10d5e:	4868      	ldr	r0, [pc, #416]	; (10f00 <on_uart_rx_ready+0x1e0>)
   10d60:	4b68      	ldr	r3, [pc, #416]	; (10f04 <on_uart_rx_ready+0x1e4>)
            LOG_WRN("Invalid state for rx(slave)");
   10d62:	496a      	ldr	r1, [pc, #424]	; (10f0c <on_uart_rx_ready+0x1ec>)
   10d64:	1ac0      	subs	r0, r0, r3
   10d66:	08c0      	lsrs	r0, r0, #3
   10d68:	0180      	lsls	r0, r0, #6
   10d6a:	e7ed      	b.n	10d48 <on_uart_rx_ready+0x28>
    if (!rx_started) {
   10d6c:	4d68      	ldr	r5, [pc, #416]	; (10f10 <on_uart_rx_ready+0x1f0>)
   10d6e:	4c69      	ldr	r4, [pc, #420]	; (10f14 <on_uart_rx_ready+0x1f4>)
   10d70:	f895 9000 	ldrb.w	r9, [r5]
   10d74:	6820      	ldr	r0, [r4, #0]
   10d76:	4f68      	ldr	r7, [pc, #416]	; (10f18 <on_uart_rx_ready+0x1f8>)
   10d78:	1899      	adds	r1, r3, r2
   10d7a:	f1b9 0f00 	cmp.w	r9, #0
   10d7e:	d11a      	bne.n	10db6 <on_uart_rx_ready+0x96>
        rx_started = true;
   10d80:	2301      	movs	r3, #1
        memcpy(&(m_rx_buff.p_data[m_rx_buff.length]), &(b_memory_block[offset]), length);//Copy First Received Bytes of data
   10d82:	4642      	mov	r2, r8
    p_buff->length = 0;
   10d84:	f8c4 9004 	str.w	r9, [r4, #4]
        rx_started = true;
   10d88:	702b      	strb	r3, [r5, #0]
        memcpy(&(m_rx_buff.p_data[m_rx_buff.length]), &(b_memory_block[offset]), length);//Copy First Received Bytes of data
   10d8a:	f00a fbb8 	bl	1b4fe <memcpy>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   10d8e:	7833      	ldrb	r3, [r6, #0]
        m_rx_buff.length = length;
   10d90:	f8a4 8004 	strh.w	r8, [r4, #4]
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   10d94:	2b01      	cmp	r3, #1
        state_set(&m_cmd_ctx, CMD_STATE_RSP_RECEIVING);
   10d96:	bf0c      	ite	eq
   10d98:	2007      	moveq	r0, #7
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVING);
   10d9a:	2003      	movne	r0, #3
        cmd_len = 0;
   10d9c:	f8a7 9000 	strh.w	r9, [r7]
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVING);
   10da0:	f7ff feb2 	bl	10b08 <state_set.constprop.0>
    if (cmd_len == 0) {
   10da4:	883b      	ldrh	r3, [r7, #0]
   10da6:	b17b      	cbz	r3, 10dc8 <on_uart_rx_ready+0xa8>
    if (m_rx_buff.length < cmd_len) {
   10da8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
   10dac:	883b      	ldrh	r3, [r7, #0]
   10dae:	4563      	cmp	r3, ip
   10db0:	d929      	bls.n	10e06 <on_uart_rx_ready+0xe6>
}
   10db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy(&(m_rx_buff.p_data[m_rx_buff.length]), &(b_memory_block[offset]), length);//Copy Incoming Bytes
   10db6:	88a3      	ldrh	r3, [r4, #4]
   10db8:	4642      	mov	r2, r8
   10dba:	4418      	add	r0, r3
   10dbc:	f00a fb9f 	bl	1b4fe <memcpy>
        m_rx_buff.length += length;
   10dc0:	88a1      	ldrh	r1, [r4, #4]
   10dc2:	4441      	add	r1, r8
   10dc4:	80a1      	strh	r1, [r4, #4]
   10dc6:	e7ed      	b.n	10da4 <on_uart_rx_ready+0x84>
    if (p_buff->length > CMD_FMT_SIZE_START + CMD_FMT_SIZE_LEN) {
   10dc8:	88a3      	ldrh	r3, [r4, #4]
   10dca:	2b03      	cmp	r3, #3
   10dcc:	d9f1      	bls.n	10db2 <on_uart_rx_ready+0x92>
    p_data = p_buff->p_data;
   10dce:	6823      	ldr	r3, [r4, #0]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   10dd0:	7899      	ldrb	r1, [r3, #2]
   10dd2:	785a      	ldrb	r2, [r3, #1]
   10dd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
        cmd_len = CMD_FMT_OFFSET_OPCODE + CMD_FMT_SIZE_CRC + len;
   10dd8:	3205      	adds	r2, #5
   10dda:	b292      	uxth	r2, r2
        if (cmd_len > CMD_MAX_PACKET_LENGTH) {
   10ddc:	f5b2 6f82 	cmp.w	r2, #1040	; 0x410
        cmd_len = cmd_len_get(&m_rx_buff);
   10de0:	803a      	strh	r2, [r7, #0]
        if (cmd_len > CMD_MAX_PACKET_LENGTH) {
   10de2:	d90c      	bls.n	10dfe <on_uart_rx_ready+0xde>
   10de4:	4b47      	ldr	r3, [pc, #284]	; (10f04 <on_uart_rx_ready+0x1e4>)
   10de6:	4846      	ldr	r0, [pc, #280]	; (10f00 <on_uart_rx_ready+0x1e0>)
            LOG_ERR("CMD_Len Larger than Packet Length %d",cmd_len);
   10de8:	494c      	ldr	r1, [pc, #304]	; (10f1c <on_uart_rx_ready+0x1fc>)
   10dea:	1ac0      	subs	r0, r0, r3
   10dec:	08c0      	lsrs	r0, r0, #3
   10dee:	0180      	lsls	r0, r0, #6
   10df0:	f040 0001 	orr.w	r0, r0, #1
   10df4:	f00a fac5 	bl	1b382 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_RECEIVE);
   10df8:	200b      	movs	r0, #11
   10dfa:	f7ff fe85 	bl	10b08 <state_set.constprop.0>
        if (cmd_len == 0) {
   10dfe:	883b      	ldrh	r3, [r7, #0]
   10e00:	2b00      	cmp	r3, #0
   10e02:	d1d1      	bne.n	10da8 <on_uart_rx_ready+0x88>
   10e04:	e7d5      	b.n	10db2 <on_uart_rx_ready+0x92>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   10e06:	7837      	ldrb	r7, [r6, #0]
   10e08:	2f01      	cmp	r7, #1
   10e0a:	d123      	bne.n	10e54 <on_uart_rx_ready+0x134>
    if (p_buff == NULL || p_buff->p_data == NULL) {
   10e0c:	4b44      	ldr	r3, [pc, #272]	; (10f20 <on_uart_rx_ready+0x200>)
   10e0e:	6818      	ldr	r0, [r3, #0]
   10e10:	b100      	cbz	r0, 10e14 <on_uart_rx_ready+0xf4>
    *op_code = p_buff->p_data[CMD_FMT_OFFSET_OPCODE];
   10e12:	78c0      	ldrb	r0, [r0, #3]
    if (mode == CMD_MODE_HOST &&
   10e14:	2f01      	cmp	r7, #1
    uint8_t* p_data = p_buff->p_data;
   10e16:	6821      	ldr	r1, [r4, #0]
    if (mode == CMD_MODE_HOST &&
   10e18:	d11e      	bne.n	10e58 <on_uart_rx_ready+0x138>
   10e1a:	780b      	ldrb	r3, [r1, #0]
   10e1c:	2b69      	cmp	r3, #105	; 0x69
   10e1e:	d027      	beq.n	10e70 <on_uart_rx_ready+0x150>
   10e20:	4837      	ldr	r0, [pc, #220]	; (10f00 <on_uart_rx_ready+0x1e0>)
   10e22:	4b38      	ldr	r3, [pc, #224]	; (10f04 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: start(host)");
   10e24:	493f      	ldr	r1, [pc, #252]	; (10f24 <on_uart_rx_ready+0x204>)
   10e26:	1ac0      	subs	r0, r0, r3
   10e28:	08c0      	lsrs	r0, r0, #3
   10e2a:	0180      	lsls	r0, r0, #6
        LOG_ERR("Invalid cmd format: start(slave)");
   10e2c:	f040 0001 	orr.w	r0, r0, #1
   10e30:	f00a faa7 	bl	1b382 <log_string_sync>
   10e34:	4b33      	ldr	r3, [pc, #204]	; (10f04 <on_uart_rx_ready+0x1e4>)
   10e36:	4832      	ldr	r0, [pc, #200]	; (10f00 <on_uart_rx_ready+0x1e0>)
        LOG_ERR("Command has Invald Format");
   10e38:	493b      	ldr	r1, [pc, #236]	; (10f28 <on_uart_rx_ready+0x208>)
   10e3a:	1ac0      	subs	r0, r0, r3
   10e3c:	08c0      	lsrs	r0, r0, #3
   10e3e:	0180      	lsls	r0, r0, #6
   10e40:	f040 0001 	orr.w	r0, r0, #1
   10e44:	f00a fa9d 	bl	1b382 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_RECEIVE);
   10e48:	200b      	movs	r0, #11
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVED);
   10e4a:	f7ff fe5d 	bl	10b08 <state_set.constprop.0>
    rx_started = false;
   10e4e:	2300      	movs	r3, #0
   10e50:	702b      	strb	r3, [r5, #0]
   10e52:	e7ae      	b.n	10db2 <on_uart_rx_ready+0x92>
    req_op_code = 0;
   10e54:	2000      	movs	r0, #0
   10e56:	e7dd      	b.n	10e14 <on_uart_rx_ready+0xf4>
    else if (mode == CMD_MODE_SLAVE &&
   10e58:	2f02      	cmp	r7, #2
   10e5a:	d109      	bne.n	10e70 <on_uart_rx_ready+0x150>
   10e5c:	780b      	ldrb	r3, [r1, #0]
   10e5e:	2b42      	cmp	r3, #66	; 0x42
   10e60:	d006      	beq.n	10e70 <on_uart_rx_ready+0x150>
   10e62:	4827      	ldr	r0, [pc, #156]	; (10f00 <on_uart_rx_ready+0x1e0>)
   10e64:	4b27      	ldr	r3, [pc, #156]	; (10f04 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: start(slave)");
   10e66:	4931      	ldr	r1, [pc, #196]	; (10f2c <on_uart_rx_ready+0x20c>)
   10e68:	1ac0      	subs	r0, r0, r3
   10e6a:	08c0      	lsrs	r0, r0, #3
   10e6c:	0180      	lsls	r0, r0, #6
   10e6e:	e7dd      	b.n	10e2c <on_uart_rx_ready+0x10c>
   10e70:	788b      	ldrb	r3, [r1, #2]
   10e72:	784a      	ldrb	r2, [r1, #1]
   10e74:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   10e78:	b212      	sxth	r2, r2
        CMD_FMT_OFFSET_OPCODE + CMD_FMT_SIZE_CRC;
   10e7a:	1d53      	adds	r3, r2, #5
    cmd_len = uint16_decode(&p_data[CMD_FMT_OFFSET_LEN]) +
   10e7c:	b29b      	uxth	r3, r3
    if (length != cmd_len) {
   10e7e:	459c      	cmp	ip, r3
   10e80:	d006      	beq.n	10e90 <on_uart_rx_ready+0x170>
   10e82:	481f      	ldr	r0, [pc, #124]	; (10f00 <on_uart_rx_ready+0x1e0>)
   10e84:	4b1f      	ldr	r3, [pc, #124]	; (10f04 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: length");
   10e86:	492a      	ldr	r1, [pc, #168]	; (10f30 <on_uart_rx_ready+0x210>)
   10e88:	1ac0      	subs	r0, r0, r3
   10e8a:	08c0      	lsrs	r0, r0, #3
   10e8c:	0180      	lsls	r0, r0, #6
   10e8e:	e7cd      	b.n	10e2c <on_uart_rx_ready+0x10c>
    if (mode == CMD_MODE_HOST &&
   10e90:	2f01      	cmp	r7, #1
   10e92:	d109      	bne.n	10ea8 <on_uart_rx_ready+0x188>
   10e94:	78cc      	ldrb	r4, [r1, #3]
   10e96:	4284      	cmp	r4, r0
   10e98:	d006      	beq.n	10ea8 <on_uart_rx_ready+0x188>
   10e9a:	4819      	ldr	r0, [pc, #100]	; (10f00 <on_uart_rx_ready+0x1e0>)
   10e9c:	4b19      	ldr	r3, [pc, #100]	; (10f04 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: op code");
   10e9e:	4925      	ldr	r1, [pc, #148]	; (10f34 <on_uart_rx_ready+0x214>)
   10ea0:	1ac0      	subs	r0, r0, r3
   10ea2:	08c0      	lsrs	r0, r0, #3
   10ea4:	0180      	lsls	r0, r0, #6
   10ea6:	e7c1      	b.n	10e2c <on_uart_rx_ready+0x10c>
    cmd_crc = uint16_decode(&p_data[cmd_len - CMD_FMT_SIZE_CRC]);
   10ea8:	3b02      	subs	r3, #2
   10eaa:	18c8      	adds	r0, r1, r3
   10eac:	7840      	ldrb	r0, [r0, #1]
   10eae:	5ccc      	ldrb	r4, [r1, r3]
        cmd_len - CMD_FMT_SIZE_START - CMD_FMT_SIZE_CRC,
   10eb0:	3202      	adds	r2, #2
   10eb2:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    return crc16_compute(p_data, length) == crc_target;
   10eb6:	b292      	uxth	r2, r2
   10eb8:	2000      	movs	r0, #0
   10eba:	3101      	adds	r1, #1
   10ebc:	f00a f823 	bl	1af06 <crc16_itu_t>
    if (!crc_ok) {
   10ec0:	4284      	cmp	r4, r0
   10ec2:	d006      	beq.n	10ed2 <on_uart_rx_ready+0x1b2>
   10ec4:	480e      	ldr	r0, [pc, #56]	; (10f00 <on_uart_rx_ready+0x1e0>)
   10ec6:	4b0f      	ldr	r3, [pc, #60]	; (10f04 <on_uart_rx_ready+0x1e4>)
        LOG_ERR("Invalid cmd format: crc");
   10ec8:	491b      	ldr	r1, [pc, #108]	; (10f38 <on_uart_rx_ready+0x218>)
   10eca:	1ac0      	subs	r0, r0, r3
   10ecc:	08c0      	lsrs	r0, r0, #3
   10ece:	0180      	lsls	r0, r0, #6
   10ed0:	e7ac      	b.n	10e2c <on_uart_rx_ready+0x10c>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   10ed2:	7833      	ldrb	r3, [r6, #0]
   10ed4:	2b01      	cmp	r3, #1
   10ed6:	d101      	bne.n	10edc <on_uart_rx_ready+0x1bc>
        state_set(&m_cmd_ctx, CMD_STATE_RSP_RECEIVED);
   10ed8:	2008      	movs	r0, #8
   10eda:	e7b6      	b.n	10e4a <on_uart_rx_ready+0x12a>
    else if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   10edc:	2b02      	cmp	r3, #2
   10ede:	d101      	bne.n	10ee4 <on_uart_rx_ready+0x1c4>
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVED);
   10ee0:	2004      	movs	r0, #4
   10ee2:	e7b2      	b.n	10e4a <on_uart_rx_ready+0x12a>
   10ee4:	4b07      	ldr	r3, [pc, #28]	; (10f04 <on_uart_rx_ready+0x1e4>)
   10ee6:	4806      	ldr	r0, [pc, #24]	; (10f00 <on_uart_rx_ready+0x1e0>)
        LOG_WRN("Should not come here");
   10ee8:	4914      	ldr	r1, [pc, #80]	; (10f3c <on_uart_rx_ready+0x21c>)
   10eea:	1ac0      	subs	r0, r0, r3
   10eec:	08c0      	lsrs	r0, r0, #3
   10eee:	0180      	lsls	r0, r0, #6
   10ef0:	f040 0002 	orr.w	r0, r0, #2
   10ef4:	f00a fa45 	bl	1b382 <log_string_sync>
   10ef8:	e7a9      	b.n	10e4e <on_uart_rx_ready+0x12e>
   10efa:	bf00      	nop
   10efc:	2000cf8c 	.word	0x2000cf8c
   10f00:	0001c310 	.word	0x0001c310
   10f04:	0001c308 	.word	0x0001c308
   10f08:	0001c790 	.word	0x0001c790
   10f0c:	0001c7ab 	.word	0x0001c7ab
   10f10:	2000d5d5 	.word	0x2000d5d5
   10f14:	2000cfa0 	.word	0x2000cfa0
   10f18:	2000d5c4 	.word	0x2000d5c4
   10f1c:	0001c7c7 	.word	0x0001c7c7
   10f20:	2000cfa8 	.word	0x2000cfa8
   10f24:	0001c7ec 	.word	0x0001c7ec
   10f28:	0001c87c 	.word	0x0001c87c
   10f2c:	0001c80c 	.word	0x0001c80c
   10f30:	0001c82d 	.word	0x0001c82d
   10f34:	0001c848 	.word	0x0001c848
   10f38:	0001c864 	.word	0x0001c864
   10f3c:	0001c740 	.word	0x0001c740

00010f40 <cmd_cb_cnt>:
    for (int i = 0; i < CMD_CB_LIST_LEN; i++) {
   10f40:	2000      	movs	r0, #0
        if (m_cb_list[i].op_code == 0) {
   10f42:	220c      	movs	r2, #12
   10f44:	4b04      	ldr	r3, [pc, #16]	; (10f58 <cmd_cb_cnt+0x18>)
   10f46:	fb02 f100 	mul.w	r1, r2, r0
   10f4a:	5cc9      	ldrb	r1, [r1, r3]
   10f4c:	b111      	cbz	r1, 10f54 <cmd_cb_cnt+0x14>
    for (int i = 0; i < CMD_CB_LIST_LEN; i++) {
   10f4e:	3001      	adds	r0, #1
   10f50:	2814      	cmp	r0, #20
   10f52:	d1f8      	bne.n	10f46 <cmd_cb_cnt+0x6>
}
   10f54:	4770      	bx	lr
   10f56:	bf00      	nop
   10f58:	2000ce9c 	.word	0x2000ce9c

00010f5c <cmd_cb_get>:
{
   10f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f5e:	4605      	mov	r5, r0
   10f60:	460c      	mov	r4, r1
        if (m_cb_list[i].op_code == op_code) {
   10f62:	260c      	movs	r6, #12
    count = cmd_cb_cnt();
   10f64:	f7ff ffec 	bl	10f40 <cmd_cb_cnt>
    for (int i = 0; i < count; i++) {
   10f68:	2200      	movs	r2, #0
        if (m_cb_list[i].op_code == op_code) {
   10f6a:	4b0b      	ldr	r3, [pc, #44]	; (10f98 <cmd_cb_get+0x3c>)
    for (int i = 0; i < count; i++) {
   10f6c:	4282      	cmp	r2, r0
   10f6e:	db02      	blt.n	10f76 <cmd_cb_get+0x1a>
    rc = -1;
   10f70:	f04f 30ff 	mov.w	r0, #4294967295
   10f74:	e00b      	b.n	10f8e <cmd_cb_get+0x32>
        if (m_cb_list[i].op_code == op_code) {
   10f76:	fb06 f102 	mul.w	r1, r6, r2
   10f7a:	5ccf      	ldrb	r7, [r1, r3]
   10f7c:	42af      	cmp	r7, r5
   10f7e:	d107      	bne.n	10f90 <cmd_cb_get+0x34>
            if (p_cmd_cb != NULL) {
   10f80:	b144      	cbz	r4, 10f94 <cmd_cb_get+0x38>
            rc = 0;
   10f82:	2000      	movs	r0, #0
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
   10f84:	440b      	add	r3, r1
   10f86:	685a      	ldr	r2, [r3, #4]
                p_cmd_cb->proc_rsp = m_cb_list[i].proc_rsp;
   10f88:	689b      	ldr	r3, [r3, #8]
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
   10f8a:	6062      	str	r2, [r4, #4]
                p_cmd_cb->proc_rsp = m_cb_list[i].proc_rsp;
   10f8c:	60a3      	str	r3, [r4, #8]
}
   10f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (int i = 0; i < count; i++) {
   10f90:	3201      	adds	r2, #1
   10f92:	e7eb      	b.n	10f6c <cmd_cb_get+0x10>
            rc = 0;
   10f94:	4620      	mov	r0, r4
    return rc;
   10f96:	e7fa      	b.n	10f8e <cmd_cb_get+0x32>
   10f98:	2000ce9c 	.word	0x2000ce9c

00010f9c <tmr_rsp_timeout_handler>:
{
   10f9c:	b530      	push	{r4, r5, lr}
    err_code = buff_to_cmd(&m_tx_buff, &cmd);
   10f9e:	4b1e      	ldr	r3, [pc, #120]	; (11018 <tmr_rsp_timeout_handler+0x7c>)
{
   10fa0:	b089      	sub	sp, #36	; 0x24
    err_code = buff_to_cmd(&m_tx_buff, &cmd);
   10fa2:	681b      	ldr	r3, [r3, #0]
    if (p_buff->p_data == NULL || p_cmd == NULL) {
   10fa4:	b95b      	cbnz	r3, 10fbe <tmr_rsp_timeout_handler+0x22>
   10fa6:	481d      	ldr	r0, [pc, #116]	; (1101c <tmr_rsp_timeout_handler+0x80>)
   10fa8:	4b1d      	ldr	r3, [pc, #116]	; (11020 <tmr_rsp_timeout_handler+0x84>)
        LOG_ERR("Buffer error");
   10faa:	491e      	ldr	r1, [pc, #120]	; (11024 <tmr_rsp_timeout_handler+0x88>)
   10fac:	1ac0      	subs	r0, r0, r3
   10fae:	08c0      	lsrs	r0, r0, #3
   10fb0:	0180      	lsls	r0, r0, #6
   10fb2:	f040 0001 	orr.w	r0, r0, #1
   10fb6:	f00a f9e4 	bl	1b382 <log_string_sync>
}
   10fba:	b009      	add	sp, #36	; 0x24
   10fbc:	bd30      	pop	{r4, r5, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
   10fbe:	78dd      	ldrb	r5, [r3, #3]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
   10fc0:	a902      	add	r1, sp, #8
   10fc2:	4628      	mov	r0, r5
   10fc4:	f7ff ffca 	bl	10f5c <cmd_cb_get>
    if (err_code == 0) {
   10fc8:	b9d0      	cbnz	r0, 11000 <tmr_rsp_timeout_handler+0x64>
        uint8_t p_rsp[] = CMD_RSP_TIMEOUT;
   10fca:	f646 7374 	movw	r3, #28532	; 0x6f74
   10fce:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (cmd_cb.proc_rsp) {
   10fd2:	9b04      	ldr	r3, [sp, #16]
   10fd4:	ac01      	add	r4, sp, #4
   10fd6:	b113      	cbz	r3, 10fde <tmr_rsp_timeout_handler+0x42>
            cmd_cb.proc_rsp(p_rsp, sizeof(p_rsp));
   10fd8:	2102      	movs	r1, #2
   10fda:	4620      	mov	r0, r4
   10fdc:	4798      	blx	r3
        event.length = sizeof(p_rsp);
   10fde:	2302      	movs	r3, #2
   10fe0:	f8ad 301c 	strh.w	r3, [sp, #28]
        event.timeout = true;
   10fe4:	2301      	movs	r3, #1
   10fe6:	f88d 301e 	strb.w	r3, [sp, #30]
        m_event_cb(&event);
   10fea:	4b0f      	ldr	r3, [pc, #60]	; (11028 <tmr_rsp_timeout_handler+0x8c>)
        event.op_code = cmd.op_code;
   10fec:	f88d 5014 	strb.w	r5, [sp, #20]
        m_event_cb(&event);
   10ff0:	681b      	ldr	r3, [r3, #0]
        event.p_data = p_rsp;
   10ff2:	9406      	str	r4, [sp, #24]
        m_event_cb(&event);
   10ff4:	a805      	add	r0, sp, #20
   10ff6:	4798      	blx	r3
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
   10ff8:	2000      	movs	r0, #0
   10ffa:	f7ff fd85 	bl	10b08 <state_set.constprop.0>
   10ffe:	e7dc      	b.n	10fba <tmr_rsp_timeout_handler+0x1e>
   11000:	4b07      	ldr	r3, [pc, #28]	; (11020 <tmr_rsp_timeout_handler+0x84>)
   11002:	4806      	ldr	r0, [pc, #24]	; (1101c <tmr_rsp_timeout_handler+0x80>)
        LOG_ERR("op is unregisterd(wait rsp)");
   11004:	4909      	ldr	r1, [pc, #36]	; (1102c <tmr_rsp_timeout_handler+0x90>)
   11006:	1ac0      	subs	r0, r0, r3
   11008:	08c0      	lsrs	r0, r0, #3
   1100a:	0180      	lsls	r0, r0, #6
   1100c:	f040 0001 	orr.w	r0, r0, #1
   11010:	f00a f9b7 	bl	1b382 <log_string_sync>
   11014:	e7f0      	b.n	10ff8 <tmr_rsp_timeout_handler+0x5c>
   11016:	bf00      	nop
   11018:	2000cfa8 	.word	0x2000cfa8
   1101c:	0001c310 	.word	0x0001c310
   11020:	0001c308 	.word	0x0001c308
   11024:	0001c896 	.word	0x0001c896
   11028:	2000cf9c 	.word	0x2000cf9c
   1102c:	0001c8a3 	.word	0x0001c8a3

00011030 <wk_proc_rsp_handler>:
{
   11030:	b5f0      	push	{r4, r5, r6, r7, lr}
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
   11032:	2000      	movs	r0, #0
{
   11034:	b087      	sub	sp, #28
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
   11036:	f7ff fd67 	bl	10b08 <state_set.constprop.0>
    err_code = buff_to_cmd(&m_rx_buff, &cmd);
   1103a:	4b1d      	ldr	r3, [pc, #116]	; (110b0 <wk_proc_rsp_handler+0x80>)
   1103c:	681d      	ldr	r5, [r3, #0]
    if (p_buff->p_data == NULL || p_cmd == NULL) {
   1103e:	b95d      	cbnz	r5, 11058 <wk_proc_rsp_handler+0x28>
   11040:	481c      	ldr	r0, [pc, #112]	; (110b4 <wk_proc_rsp_handler+0x84>)
   11042:	4b1d      	ldr	r3, [pc, #116]	; (110b8 <wk_proc_rsp_handler+0x88>)
        LOG_ERR("Buffer error");
   11044:	491d      	ldr	r1, [pc, #116]	; (110bc <wk_proc_rsp_handler+0x8c>)
   11046:	1ac0      	subs	r0, r0, r3
   11048:	08c0      	lsrs	r0, r0, #3
   1104a:	0180      	lsls	r0, r0, #6
   1104c:	f040 0001 	orr.w	r0, r0, #1
   11050:	f00a f997 	bl	1b382 <log_string_sync>
}
   11054:	b007      	add	sp, #28
   11056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
   11058:	78ee      	ldrb	r6, [r5, #3]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
   1105a:	4669      	mov	r1, sp
   1105c:	4630      	mov	r0, r6
   1105e:	78af      	ldrb	r7, [r5, #2]
   11060:	786c      	ldrb	r4, [r5, #1]
   11062:	f7ff ff7b 	bl	10f5c <cmd_cb_get>
    if (err_code == 0) {
   11066:	b9b0      	cbnz	r0, 11096 <wk_proc_rsp_handler+0x66>
   11068:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
        if (cmd_cb.proc_rsp) {
   1106c:	9b02      	ldr	r3, [sp, #8]
    p_cmd->length = op_pdu_len - CMD_FMT_SIZE_OPCODE;
   1106e:	3c01      	subs	r4, #1
   11070:	b2a4      	uxth	r4, r4
    p_cmd->p_data = &p_data[CMD_FMT_OFFSET_PDU];
   11072:	3504      	adds	r5, #4
        if (cmd_cb.proc_rsp) {
   11074:	b113      	cbz	r3, 1107c <wk_proc_rsp_handler+0x4c>
            cmd_cb.proc_rsp(cmd.p_data, cmd.length);
   11076:	4621      	mov	r1, r4
   11078:	4628      	mov	r0, r5
   1107a:	4798      	blx	r3
        event.timeout = false;
   1107c:	2300      	movs	r3, #0
   1107e:	f88d 3016 	strb.w	r3, [sp, #22]
        m_event_cb(&event);
   11082:	4b0f      	ldr	r3, [pc, #60]	; (110c0 <wk_proc_rsp_handler+0x90>)
        event.op_code = cmd.op_code;
   11084:	f88d 600c 	strb.w	r6, [sp, #12]
        m_event_cb(&event);
   11088:	681b      	ldr	r3, [r3, #0]
        event.p_data = cmd.p_data;
   1108a:	9504      	str	r5, [sp, #16]
        event.length = cmd.length;
   1108c:	f8ad 4014 	strh.w	r4, [sp, #20]
        m_event_cb(&event);
   11090:	a803      	add	r0, sp, #12
   11092:	4798      	blx	r3
   11094:	e7de      	b.n	11054 <wk_proc_rsp_handler+0x24>
   11096:	4b08      	ldr	r3, [pc, #32]	; (110b8 <wk_proc_rsp_handler+0x88>)
   11098:	4806      	ldr	r0, [pc, #24]	; (110b4 <wk_proc_rsp_handler+0x84>)
        LOG_ERR("op is unregisterd(proc rsp): %d", cmd.op_code);
   1109a:	4632      	mov	r2, r6
   1109c:	1ac0      	subs	r0, r0, r3
   1109e:	08c0      	lsrs	r0, r0, #3
   110a0:	0180      	lsls	r0, r0, #6
   110a2:	4908      	ldr	r1, [pc, #32]	; (110c4 <wk_proc_rsp_handler+0x94>)
   110a4:	f040 0001 	orr.w	r0, r0, #1
   110a8:	f00a f96b 	bl	1b382 <log_string_sync>
   110ac:	e7d2      	b.n	11054 <wk_proc_rsp_handler+0x24>
   110ae:	bf00      	nop
   110b0:	2000cfa0 	.word	0x2000cfa0
   110b4:	0001c310 	.word	0x0001c310
   110b8:	0001c308 	.word	0x0001c308
   110bc:	0001c896 	.word	0x0001c896
   110c0:	2000cf9c 	.word	0x2000cf9c
   110c4:	0001c8bf 	.word	0x0001c8bf

000110c8 <wk_proc_req_handler>:
{
   110c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    err_code = buff_to_cmd(&m_rx_buff, &cmd);
   110ca:	4b23      	ldr	r3, [pc, #140]	; (11158 <wk_proc_req_handler+0x90>)
{
   110cc:	b087      	sub	sp, #28
    err_code = buff_to_cmd(&m_rx_buff, &cmd);
   110ce:	681d      	ldr	r5, [r3, #0]
    if (p_buff->p_data == NULL || p_cmd == NULL) {
   110d0:	b95d      	cbnz	r5, 110ea <wk_proc_req_handler+0x22>
   110d2:	4822      	ldr	r0, [pc, #136]	; (1115c <wk_proc_req_handler+0x94>)
   110d4:	4b22      	ldr	r3, [pc, #136]	; (11160 <wk_proc_req_handler+0x98>)
        LOG_ERR("Buffer error");
   110d6:	4923      	ldr	r1, [pc, #140]	; (11164 <wk_proc_req_handler+0x9c>)
   110d8:	1ac0      	subs	r0, r0, r3
   110da:	08c0      	lsrs	r0, r0, #3
   110dc:	0180      	lsls	r0, r0, #6
   110de:	f040 0001 	orr.w	r0, r0, #1
   110e2:	f00a f94e 	bl	1b382 <log_string_sync>
}
   110e6:	b007      	add	sp, #28
   110e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
   110ea:	78ee      	ldrb	r6, [r5, #3]
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
   110ec:	4669      	mov	r1, sp
   110ee:	4630      	mov	r0, r6
   110f0:	78af      	ldrb	r7, [r5, #2]
   110f2:	786c      	ldrb	r4, [r5, #1]
   110f4:	f7ff ff32 	bl	10f5c <cmd_cb_get>
    if (err_code == 0) {
   110f8:	b9d8      	cbnz	r0, 11132 <wk_proc_req_handler+0x6a>
   110fa:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
        if (cmd_cb.proc_req) {
   110fe:	9b01      	ldr	r3, [sp, #4]
    p_cmd->length = op_pdu_len - CMD_FMT_SIZE_OPCODE;
   11100:	3c01      	subs	r4, #1
   11102:	b2a4      	uxth	r4, r4
    p_cmd->p_data = &p_data[CMD_FMT_OFFSET_PDU];
   11104:	3504      	adds	r5, #4
        if (cmd_cb.proc_req) {
   11106:	b183      	cbz	r3, 1112a <wk_proc_req_handler+0x62>
            cmd_cb.proc_req(cmd.p_data, cmd.length, app_cmd_respond);
   11108:	4621      	mov	r1, r4
   1110a:	4628      	mov	r0, r5
   1110c:	4a16      	ldr	r2, [pc, #88]	; (11168 <wk_proc_req_handler+0xa0>)
   1110e:	4798      	blx	r3
        event.timeout = false;
   11110:	2300      	movs	r3, #0
   11112:	f88d 3016 	strb.w	r3, [sp, #22]
        m_event_cb(&event);
   11116:	4b15      	ldr	r3, [pc, #84]	; (1116c <wk_proc_req_handler+0xa4>)
        event.op_code = cmd.op_code;
   11118:	f88d 600c 	strb.w	r6, [sp, #12]
        m_event_cb(&event);
   1111c:	681b      	ldr	r3, [r3, #0]
        event.p_data = cmd.p_data;
   1111e:	9504      	str	r5, [sp, #16]
        event.length = cmd.length;
   11120:	f8ad 4014 	strh.w	r4, [sp, #20]
        m_event_cb(&event);
   11124:	a803      	add	r0, sp, #12
   11126:	4798      	blx	r3
   11128:	e7dd      	b.n	110e6 <wk_proc_req_handler+0x1e>
            app_cmd_respond(NULL, 0);
   1112a:	4619      	mov	r1, r3
   1112c:	f7ff fdb8 	bl	10ca0 <app_cmd_respond>
   11130:	e7ee      	b.n	11110 <wk_proc_req_handler+0x48>
   11132:	4b0b      	ldr	r3, [pc, #44]	; (11160 <wk_proc_req_handler+0x98>)
   11134:	4809      	ldr	r0, [pc, #36]	; (1115c <wk_proc_req_handler+0x94>)
        LOG_ERR("op is unregisterd(proc req)");
   11136:	490e      	ldr	r1, [pc, #56]	; (11170 <wk_proc_req_handler+0xa8>)
   11138:	1ac0      	subs	r0, r0, r3
   1113a:	08c0      	lsrs	r0, r0, #3
   1113c:	0180      	lsls	r0, r0, #6
   1113e:	f040 0001 	orr.w	r0, r0, #1
   11142:	f00a f91e 	bl	1b382 <log_string_sync>
        uint8_t p_rsp[] = CMD_RSP_UNREG;
   11146:	f247 2375 	movw	r3, #29301	; 0x7275
        app_cmd_respond(p_rsp, sizeof(p_rsp));
   1114a:	2102      	movs	r1, #2
   1114c:	a803      	add	r0, sp, #12
        uint8_t p_rsp[] = CMD_RSP_UNREG;
   1114e:	f8ad 300c 	strh.w	r3, [sp, #12]
        app_cmd_respond(p_rsp, sizeof(p_rsp));
   11152:	f7ff fda5 	bl	10ca0 <app_cmd_respond>
   11156:	e7c6      	b.n	110e6 <wk_proc_req_handler+0x1e>
   11158:	2000cfa0 	.word	0x2000cfa0
   1115c:	0001c310 	.word	0x0001c310
   11160:	0001c308 	.word	0x0001c308
   11164:	0001c896 	.word	0x0001c896
   11168:	00010ca1 	.word	0x00010ca1
   1116c:	2000cf9c 	.word	0x2000cf9c
   11170:	0001c8df 	.word	0x0001c8df

00011174 <app_cmd_add>:
{
   11174:	b5f0      	push	{r4, r5, r6, r7, lr}
   11176:	b085      	sub	sp, #20
   11178:	4604      	mov	r4, r0
   1117a:	460f      	mov	r7, r1
   1117c:	4616      	mov	r6, r2
    count = cmd_cb_cnt();
   1117e:	f7ff fedf 	bl	10f40 <cmd_cb_cnt>
    if (count == CMD_CB_LIST_LEN) {
   11182:	2814      	cmp	r0, #20
    count = cmd_cb_cnt();
   11184:	4605      	mov	r5, r0
    if (count == CMD_CB_LIST_LEN) {
   11186:	d10d      	bne.n	111a4 <app_cmd_add+0x30>
   11188:	4b19      	ldr	r3, [pc, #100]	; (111f0 <app_cmd_add+0x7c>)
   1118a:	481a      	ldr	r0, [pc, #104]	; (111f4 <app_cmd_add+0x80>)
        LOG_ERR("Cmd list is full");
   1118c:	491a      	ldr	r1, [pc, #104]	; (111f8 <app_cmd_add+0x84>)
   1118e:	1ac0      	subs	r0, r0, r3
   11190:	08c0      	lsrs	r0, r0, #3
   11192:	0180      	lsls	r0, r0, #6
   11194:	f040 0001 	orr.w	r0, r0, #1
   11198:	f00a f8f3 	bl	1b382 <log_string_sync>
        return -1;
   1119c:	f04f 30ff 	mov.w	r0, #4294967295
}
   111a0:	b005      	add	sp, #20
   111a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (cmd_cb_get(op_code, NULL) == 0) {
   111a4:	2100      	movs	r1, #0
   111a6:	4620      	mov	r0, r4
   111a8:	f7ff fed8 	bl	10f5c <cmd_cb_get>
   111ac:	b968      	cbnz	r0, 111ca <app_cmd_add+0x56>
   111ae:	4810      	ldr	r0, [pc, #64]	; (111f0 <app_cmd_add+0x7c>)
   111b0:	4b10      	ldr	r3, [pc, #64]	; (111f4 <app_cmd_add+0x80>)
        LOG_WRN("This op code already exists %x",op_code);
   111b2:	4622      	mov	r2, r4
   111b4:	1a1b      	subs	r3, r3, r0
   111b6:	08db      	lsrs	r3, r3, #3
   111b8:	019b      	lsls	r3, r3, #6
   111ba:	f043 0002 	orr.w	r0, r3, #2
   111be:	490f      	ldr	r1, [pc, #60]	; (111fc <app_cmd_add+0x88>)
   111c0:	f00a f8df 	bl	1b382 <log_string_sync>
        return -2;
   111c4:	f06f 0001 	mvn.w	r0, #1
   111c8:	e7ea      	b.n	111a0 <app_cmd_add+0x2c>
    memset(&callback, 0, sizeof(cmd_cb_t));
   111ca:	220c      	movs	r2, #12
   111cc:	2100      	movs	r1, #0
   111ce:	a801      	add	r0, sp, #4
   111d0:	f00a f9a0 	bl	1b514 <memset>
    memcpy(&m_cb_list[count], &callback, sizeof(cmd_cb_t));
   111d4:	220c      	movs	r2, #12
   111d6:	480a      	ldr	r0, [pc, #40]	; (11200 <app_cmd_add+0x8c>)
   111d8:	a901      	add	r1, sp, #4
   111da:	fb02 0005 	mla	r0, r2, r5, r0
    callback.proc_rsp = rsp_cb;
   111de:	e9cd 7602 	strd	r7, r6, [sp, #8]
    callback.op_code = op_code;
   111e2:	f88d 4004 	strb.w	r4, [sp, #4]
    memcpy(&m_cb_list[count], &callback, sizeof(cmd_cb_t));
   111e6:	f00a f98a 	bl	1b4fe <memcpy>
    return 0;
   111ea:	2000      	movs	r0, #0
   111ec:	e7d8      	b.n	111a0 <app_cmd_add+0x2c>
   111ee:	bf00      	nop
   111f0:	0001c308 	.word	0x0001c308
   111f4:	0001c310 	.word	0x0001c310
   111f8:	0001c8fb 	.word	0x0001c8fb
   111fc:	0001c90c 	.word	0x0001c90c
   11200:	2000ce9c 	.word	0x2000ce9c

00011204 <app_cmd_request>:
{
   11204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (mode_get(&m_cmd_ctx) != CMD_MODE_IDLE) {
   11206:	4c0f      	ldr	r4, [pc, #60]	; (11244 <app_cmd_request+0x40>)
   11208:	7823      	ldrb	r3, [r4, #0]
   1120a:	b173      	cbz	r3, 1122a <app_cmd_request+0x26>
   1120c:	4a0e      	ldr	r2, [pc, #56]	; (11248 <app_cmd_request+0x44>)
   1120e:	480f      	ldr	r0, [pc, #60]	; (1124c <app_cmd_request+0x48>)
        LOG_ERR("%s, exit with %d", __func__, m_cmd_ctx.mode);
   11210:	490f      	ldr	r1, [pc, #60]	; (11250 <app_cmd_request+0x4c>)
   11212:	1a80      	subs	r0, r0, r2
   11214:	08c0      	lsrs	r0, r0, #3
   11216:	0180      	lsls	r0, r0, #6
   11218:	f040 0001 	orr.w	r0, r0, #1
   1121c:	4a0d      	ldr	r2, [pc, #52]	; (11254 <app_cmd_request+0x50>)
   1121e:	f00a f8b0 	bl	1b382 <log_string_sync>
        return -1;
   11222:	f04f 30ff 	mov.w	r0, #4294967295
}
   11226:	b004      	add	sp, #16
   11228:	bd10      	pop	{r4, pc}
    app_cmd_t cmd =
   1122a:	f88d 3004 	strb.w	r3, [sp, #4]
        p_cmd_ctx->mode = new_mode;
   1122e:	2301      	movs	r3, #1
    app_cmd_t cmd =
   11230:	f88d 0005 	strb.w	r0, [sp, #5]
    return cmd_send(&cmd);
   11234:	a801      	add	r0, sp, #4
    app_cmd_t cmd =
   11236:	9102      	str	r1, [sp, #8]
   11238:	f8ad 200c 	strh.w	r2, [sp, #12]
        p_cmd_ctx->mode = new_mode;
   1123c:	7023      	strb	r3, [r4, #0]
    return cmd_send(&cmd);
   1123e:	f7ff fceb 	bl	10c18 <cmd_send>
   11242:	e7f0      	b.n	11226 <app_cmd_request+0x22>
   11244:	2000cf8c 	.word	0x2000cf8c
   11248:	0001c308 	.word	0x0001c308
   1124c:	0001c310 	.word	0x0001c310
   11250:	0001c92b 	.word	0x0001c92b
   11254:	0001c984 	.word	0x0001c984

00011258 <app_cmd_init>:
{
   11258:	b538      	push	{r3, r4, r5, lr}
    err = uart_init(p_device);
   1125a:	f7ff fac9 	bl	107f0 <uart_init>
    if (err != 0) {
   1125e:	4c30      	ldr	r4, [pc, #192]	; (11320 <app_cmd_init+0xc8>)
   11260:	4b30      	ldr	r3, [pc, #192]	; (11324 <app_cmd_init+0xcc>)
   11262:	4605      	mov	r5, r0
   11264:	1ae4      	subs	r4, r4, r3
   11266:	08e4      	lsrs	r4, r4, #3
   11268:	01a4      	lsls	r4, r4, #6
   1126a:	b140      	cbz	r0, 1127e <app_cmd_init+0x26>
        LOG_ERR("UART device init failed");
   1126c:	492e      	ldr	r1, [pc, #184]	; (11328 <app_cmd_init+0xd0>)
   1126e:	f044 0001 	orr.w	r0, r4, #1
   11272:	f00a f886 	bl	1b382 <log_string_sync>
        return -ENXIO;
   11276:	f06f 0505 	mvn.w	r5, #5
}
   1127a:	4628      	mov	r0, r5
   1127c:	bd38      	pop	{r3, r4, r5, pc}
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
   1127e:	f7ff fc43 	bl	10b08 <state_set.constprop.0>
    memset(&m_cb_list, 0, sizeof(m_cb_list));
   11282:	22f0      	movs	r2, #240	; 0xf0
   11284:	4629      	mov	r1, r5
   11286:	4829      	ldr	r0, [pc, #164]	; (1132c <app_cmd_init+0xd4>)
   11288:	f00a f944 	bl	1b514 <memset>
    memset(&m_cmd_ctx.cmd, 0, sizeof(app_cmd_t));
   1128c:	220c      	movs	r2, #12
   1128e:	4629      	mov	r1, r5
   11290:	4827      	ldr	r0, [pc, #156]	; (11330 <app_cmd_init+0xd8>)
   11292:	f00a f93f 	bl	1b514 <memset>
    uart_rx_cb_set(on_uart_rx_ready);
   11296:	4827      	ldr	r0, [pc, #156]	; (11334 <app_cmd_init+0xdc>)
   11298:	f7ff fb9e 	bl	109d8 <uart_rx_cb_set>
    uart_tx_cb_set(on_uart_tx_empty);
   1129c:	4826      	ldr	r0, [pc, #152]	; (11338 <app_cmd_init+0xe0>)
   1129e:	f7ff fba1 	bl	109e4 <uart_tx_cb_set>
    m_event_cb = event_cb_dummy;
   112a2:	4b26      	ldr	r3, [pc, #152]	; (1133c <app_cmd_init+0xe4>)
   112a4:	4a26      	ldr	r2, [pc, #152]	; (11340 <app_cmd_init+0xe8>)
    err = k_mem_slab_alloc(&cmd_rx_tx_pool, (void **)&(m_rx_buff.p_data), K_NO_WAIT);
   112a6:	4927      	ldr	r1, [pc, #156]	; (11344 <app_cmd_init+0xec>)
    m_event_cb = event_cb_dummy;
   112a8:	601a      	str	r2, [r3, #0]
    err = k_mem_slab_alloc(&cmd_rx_tx_pool, (void **)&(m_rx_buff.p_data), K_NO_WAIT);
   112aa:	4827      	ldr	r0, [pc, #156]	; (11348 <app_cmd_init+0xf0>)
   112ac:	2200      	movs	r2, #0
   112ae:	2300      	movs	r3, #0
   112b0:	f007 fa42 	bl	18738 <k_mem_slab_alloc>
	__ASSERT(err == 0, "Failed to alloc slab");
   112b4:	b150      	cbz	r0, 112cc <app_cmd_init+0x74>
   112b6:	4925      	ldr	r1, [pc, #148]	; (1134c <app_cmd_init+0xf4>)
   112b8:	4825      	ldr	r0, [pc, #148]	; (11350 <app_cmd_init+0xf8>)
   112ba:	f44f 7269 	mov.w	r2, #932	; 0x3a4
   112be:	f009 fe49 	bl	1af54 <printk>
   112c2:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   112c6:	4821      	ldr	r0, [pc, #132]	; (1134c <app_cmd_init+0xf4>)
   112c8:	f00a f828 	bl	1b31c <assert_post_action>
    err = k_mem_slab_alloc(&cmd_rx_tx_pool, (void **)&(m_tx_buff.p_data), K_NO_WAIT);
   112cc:	2200      	movs	r2, #0
   112ce:	2300      	movs	r3, #0
   112d0:	4920      	ldr	r1, [pc, #128]	; (11354 <app_cmd_init+0xfc>)
   112d2:	481d      	ldr	r0, [pc, #116]	; (11348 <app_cmd_init+0xf0>)
   112d4:	f007 fa30 	bl	18738 <k_mem_slab_alloc>
	__ASSERT(err == 0, "Failed to alloc slab");
   112d8:	b150      	cbz	r0, 112f0 <app_cmd_init+0x98>
   112da:	491c      	ldr	r1, [pc, #112]	; (1134c <app_cmd_init+0xf4>)
   112dc:	481c      	ldr	r0, [pc, #112]	; (11350 <app_cmd_init+0xf8>)
   112de:	f240 32a7 	movw	r2, #935	; 0x3a7
   112e2:	f009 fe37 	bl	1af54 <printk>
   112e6:	f240 31a7 	movw	r1, #935	; 0x3a7
   112ea:	4818      	ldr	r0, [pc, #96]	; (1134c <app_cmd_init+0xf4>)
   112ec:	f00a f816 	bl	1b31c <assert_post_action>
    k_work_init(&wk_proc_req, wk_proc_req_handler);
   112f0:	4919      	ldr	r1, [pc, #100]	; (11358 <app_cmd_init+0x100>)
   112f2:	481a      	ldr	r0, [pc, #104]	; (1135c <app_cmd_init+0x104>)
   112f4:	f007 ffde 	bl	192b4 <k_work_init>
    k_work_init(&wk_proc_rsp, wk_proc_rsp_handler);
   112f8:	4919      	ldr	r1, [pc, #100]	; (11360 <app_cmd_init+0x108>)
   112fa:	481a      	ldr	r0, [pc, #104]	; (11364 <app_cmd_init+0x10c>)
   112fc:	f007 ffda 	bl	192b4 <k_work_init>
    app_cmd_add(CMD_OP_PING, req_cb_ping, rsp_cb_ping);
   11300:	4a19      	ldr	r2, [pc, #100]	; (11368 <app_cmd_init+0x110>)
   11302:	491a      	ldr	r1, [pc, #104]	; (1136c <app_cmd_init+0x114>)
   11304:	2011      	movs	r0, #17
   11306:	f7ff ff35 	bl	11174 <app_cmd_add>
    app_cmd_add(CMD_OP_RAW_DATA, req_cb_raw_data, rsp_cb_raw_data);
   1130a:	4a19      	ldr	r2, [pc, #100]	; (11370 <app_cmd_init+0x118>)
   1130c:	4919      	ldr	r1, [pc, #100]	; (11374 <app_cmd_init+0x11c>)
   1130e:	2012      	movs	r0, #18
   11310:	f7ff ff30 	bl	11174 <app_cmd_add>
    LOG_INF("Initialized SIMP Module");
   11314:	4918      	ldr	r1, [pc, #96]	; (11378 <app_cmd_init+0x120>)
   11316:	f044 0003 	orr.w	r0, r4, #3
   1131a:	f00a f832 	bl	1b382 <log_string_sync>
    return 0;
   1131e:	e7ac      	b.n	1127a <app_cmd_init+0x22>
   11320:	0001c310 	.word	0x0001c310
   11324:	0001c308 	.word	0x0001c308
   11328:	0001c93c 	.word	0x0001c93c
   1132c:	2000ce9c 	.word	0x2000ce9c
   11330:	2000cf90 	.word	0x2000cf90
   11334:	00010d21 	.word	0x00010d21
   11338:	00010bd9 	.word	0x00010bd9
   1133c:	2000cf9c 	.word	0x2000cf9c
   11340:	0001af05 	.word	0x0001af05
   11344:	2000cfa0 	.word	0x2000cfa0
   11348:	2000cb08 	.word	0x2000cb08
   1134c:	0001c954 	.word	0x0001c954
   11350:	0001c625 	.word	0x0001c625
   11354:	2000cfa8 	.word	0x2000cfa8
   11358:	000110c9 	.word	0x000110c9
   1135c:	2000cfb0 	.word	0x2000cfb0
   11360:	00011031 	.word	0x00011031
   11364:	2000cfc0 	.word	0x2000cfc0
   11368:	000109f1 	.word	0x000109f1
   1136c:	00010a79 	.word	0x00010a79
   11370:	00010ab9 	.word	0x00010ab9
   11374:	00010a19 	.word	0x00010a19
   11378:	0001c968 	.word	0x0001c968

0001137c <app_cmd_disable>:
{
   1137c:	b510      	push	{r4, lr}
    k_mem_slab_free(&cmd_rx_tx_pool, (void **)&(m_rx_buff.p_data));
   1137e:	4c09      	ldr	r4, [pc, #36]	; (113a4 <app_cmd_disable+0x28>)
    uart_uninit();
   11380:	f7ff fafe 	bl	10980 <uart_uninit>
    k_mem_slab_free(&cmd_rx_tx_pool, (void **)&(m_rx_buff.p_data));
   11384:	4620      	mov	r0, r4
   11386:	4908      	ldr	r1, [pc, #32]	; (113a8 <app_cmd_disable+0x2c>)
   11388:	f007 fa30 	bl	187ec <k_mem_slab_free>
    k_mem_slab_free(&cmd_rx_tx_pool, (void **)&(m_tx_buff.p_data));
   1138c:	4620      	mov	r0, r4
   1138e:	4907      	ldr	r1, [pc, #28]	; (113ac <app_cmd_disable+0x30>)
   11390:	f007 fa2c 	bl	187ec <k_mem_slab_free>
    m_event_cb = NULL;
   11394:	2200      	movs	r2, #0
   11396:	4b06      	ldr	r3, [pc, #24]	; (113b0 <app_cmd_disable+0x34>)
   11398:	601a      	str	r2, [r3, #0]
   1139a:	4806      	ldr	r0, [pc, #24]	; (113b4 <app_cmd_disable+0x38>)
}
   1139c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   113a0:	f00a be11 	b.w	1bfc6 <z_impl_k_timer_stop>
   113a4:	2000cb08 	.word	0x2000cb08
   113a8:	2000cfa0 	.word	0x2000cfa0
   113ac:	2000cfa8 	.word	0x2000cfa8
   113b0:	2000cf9c 	.word	0x2000cf9c
   113b4:	2000ca98 	.word	0x2000ca98

000113b8 <req_send_data>:
		}
	}
}
//size 4 8 die bytes 0 minor fw 1 major fw num
int req_send_data(uint8_t* p_req, uint16_t req_len, cmd_respond_t respond)
{
   113b8:	b570      	push	{r4, r5, r6, lr}
   113ba:	4605      	mov	r5, r0
   113bc:	4b0b      	ldr	r3, [pc, #44]	; (113ec <req_send_data+0x34>)
   113be:	4c0c      	ldr	r4, [pc, #48]	; (113f0 <req_send_data+0x38>)
   113c0:	4616      	mov	r6, r2
   113c2:	1ae4      	subs	r4, r4, r3
   113c4:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Request Received Length %hu",req_len);
   113c6:	01a4      	lsls	r4, r4, #6
   113c8:	f044 0403 	orr.w	r4, r4, #3
   113cc:	460a      	mov	r2, r1
   113ce:	4620      	mov	r0, r4
   113d0:	4908      	ldr	r1, [pc, #32]	; (113f4 <req_send_data+0x3c>)
   113d2:	f009 ffd6 	bl	1b382 <log_string_sync>

	LOG_INF("First Byte of Request %x Second Byte %x",p_req[0],p_req[1]);
   113d6:	4620      	mov	r0, r4
   113d8:	786b      	ldrb	r3, [r5, #1]
   113da:	782a      	ldrb	r2, [r5, #0]
   113dc:	4906      	ldr	r1, [pc, #24]	; (113f8 <req_send_data+0x40>)
   113de:	f009 ffd0 	bl	1b382 <log_string_sync>

    respond(helper_rx,10);
   113e2:	210a      	movs	r1, #10
   113e4:	4805      	ldr	r0, [pc, #20]	; (113fc <req_send_data+0x44>)
   113e6:	47b0      	blx	r6

    return 0;
}
   113e8:	2000      	movs	r0, #0
   113ea:	bd70      	pop	{r4, r5, r6, pc}
   113ec:	0001c308 	.word	0x0001c308
   113f0:	0001c330 	.word	0x0001c330
   113f4:	0001c9cc 	.word	0x0001c9cc
   113f8:	0001c9e8 	.word	0x0001c9e8
   113fc:	2000c681 	.word	0x2000c681

00011400 <rsp_send_data>:

//size 4 8 die bytes 0 minor fw 1 major fw num
void rsp_send_data(uint8_t* p_rsp, uint16_t rsp_len)
{
   11400:	b570      	push	{r4, r5, r6, lr}
   11402:	4b0e      	ldr	r3, [pc, #56]	; (1143c <rsp_send_data+0x3c>)
   11404:	4604      	mov	r4, r0
   11406:	480e      	ldr	r0, [pc, #56]	; (11440 <rsp_send_data+0x40>)
   11408:	460d      	mov	r5, r1
   1140a:	1ac0      	subs	r0, r0, r3
   1140c:	08c0      	lsrs	r0, r0, #3
	LOG_INF("Response Received Length %hu",rsp_len);
   1140e:	0180      	lsls	r0, r0, #6
   11410:	460a      	mov	r2, r1
   11412:	f040 0003 	orr.w	r0, r0, #3
   11416:	490b      	ldr	r1, [pc, #44]	; (11444 <rsp_send_data+0x44>)
   11418:	f009 ffb3 	bl	1b382 <log_string_sync>
	
	for(uint16_t i = 0 ; i < rsp_len ; ++i){
		printk("%x",p_rsp[i]);
   1141c:	4e0a      	ldr	r6, [pc, #40]	; (11448 <rsp_send_data+0x48>)
   1141e:	4425      	add	r5, r4
	for(uint16_t i = 0 ; i < rsp_len ; ++i){
   11420:	42ac      	cmp	r4, r5
   11422:	d104      	bne.n	1142e <rsp_send_data+0x2e>
	}
	printk("\n");
}
   11424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("\n");
   11428:	4808      	ldr	r0, [pc, #32]	; (1144c <rsp_send_data+0x4c>)
   1142a:	f009 bd93 	b.w	1af54 <printk>
		printk("%x",p_rsp[i]);
   1142e:	4630      	mov	r0, r6
   11430:	f814 1b01 	ldrb.w	r1, [r4], #1
   11434:	f009 fd8e 	bl	1af54 <printk>
	for(uint16_t i = 0 ; i < rsp_len ; ++i){
   11438:	e7f2      	b.n	11420 <rsp_send_data+0x20>
   1143a:	bf00      	nop
   1143c:	0001c308 	.word	0x0001c308
   11440:	0001c330 	.word	0x0001c330
   11444:	0001ca10 	.word	0x0001ca10
   11448:	0001ca0d 	.word	0x0001ca0d
   1144c:	0001d5a3 	.word	0x0001d5a3

00011450 <button_handler>:
	if(DK_BTN1_MSK & button_state){
   11450:	07c2      	lsls	r2, r0, #31
{
   11452:	b510      	push	{r4, lr}
   11454:	4604      	mov	r4, r0
	if(DK_BTN1_MSK & button_state){
   11456:	d505      	bpl.n	11464 <button_handler+0x14>
		app_cmd_request(CMD_OP_SEND_DATA,helper_rx,1030);
   11458:	f240 4206 	movw	r2, #1030	; 0x406
   1145c:	2066      	movs	r0, #102	; 0x66
   1145e:	4909      	ldr	r1, [pc, #36]	; (11484 <button_handler+0x34>)
   11460:	f7ff fed0 	bl	11204 <app_cmd_request>
	if(DK_BTN2_MSK & button_state){
   11464:	07a3      	lsls	r3, r4, #30
   11466:	d506      	bpl.n	11476 <button_handler+0x26>
		if(i == 0){
   11468:	4c07      	ldr	r4, [pc, #28]	; (11488 <button_handler+0x38>)
   1146a:	7823      	ldrb	r3, [r4, #0]
   1146c:	b923      	cbnz	r3, 11478 <button_handler+0x28>
			app_cmd_disable();
   1146e:	f7ff ff85 	bl	1137c <app_cmd_disable>
			i =1;
   11472:	2301      	movs	r3, #1
			i=0;
   11474:	7023      	strb	r3, [r4, #0]
}
   11476:	bd10      	pop	{r4, pc}
			app_cmd_init(m_uart_dev);
   11478:	4b04      	ldr	r3, [pc, #16]	; (1148c <button_handler+0x3c>)
   1147a:	6818      	ldr	r0, [r3, #0]
   1147c:	f7ff feec 	bl	11258 <app_cmd_init>
			i=0;
   11480:	2300      	movs	r3, #0
   11482:	e7f7      	b.n	11474 <button_handler+0x24>
   11484:	2000c681 	.word	0x2000c681
   11488:	2000d5d6 	.word	0x2000d5d6
   1148c:	2000cfd0 	.word	0x2000cfd0

00011490 <main>:

void main(void)
{
   11490:	b538      	push	{r3, r4, r5, lr}
   11492:	4b16      	ldr	r3, [pc, #88]	; (114ec <main+0x5c>)
   11494:	4c16      	ldr	r4, [pc, #88]	; (114f0 <main+0x60>)
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
   11496:	4a17      	ldr	r2, [pc, #92]	; (114f4 <main+0x64>)
   11498:	1ae4      	subs	r4, r4, r3
   1149a:	08e4      	lsrs	r4, r4, #3
   1149c:	01a4      	lsls	r4, r4, #6
   1149e:	4916      	ldr	r1, [pc, #88]	; (114f8 <main+0x68>)
   114a0:	f044 0003 	orr.w	r0, r4, #3
   114a4:	f009 ff6d 	bl	1b382 <log_string_sync>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   114a8:	4814      	ldr	r0, [pc, #80]	; (114fc <main+0x6c>)
   114aa:	f006 febf 	bl	1822c <z_impl_device_get_binding>
	int err;

	m_uart_dev = device_get_binding("UART_1");
   114ae:	4d14      	ldr	r5, [pc, #80]	; (11500 <main+0x70>)
   114b0:	6028      	str	r0, [r5, #0]

	if (m_uart_dev == NULL) {
   114b2:	b930      	cbnz	r0, 114c2 <main+0x32>
		LOG_ERR("Can't init UART component");
   114b4:	f044 0001 	orr.w	r0, r4, #1
   114b8:	4912      	ldr	r1, [pc, #72]	; (11504 <main+0x74>)
    app_cmd_add(CMD_OP_SEND_DATA,req_send_data,rsp_send_data);

	for(;;){
		k_cpu_idle();
	}
}
   114ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Can't init UART component");
   114be:	f009 bf60 	b.w	1b382 <log_string_sync>
	err = dk_buttons_init(button_handler);
   114c2:	4811      	ldr	r0, [pc, #68]	; (11508 <main+0x78>)
   114c4:	f004 faa6 	bl	15a14 <dk_buttons_init>
	if (err) {
   114c8:	b120      	cbz	r0, 114d4 <main+0x44>
		LOG_ERR("Cant init LED Component");
   114ca:	4910      	ldr	r1, [pc, #64]	; (1150c <main+0x7c>)
   114cc:	f044 0001 	orr.w	r0, r4, #1
   114d0:	f009 ff57 	bl	1b382 <log_string_sync>
	app_cmd_init(m_uart_dev);
   114d4:	6828      	ldr	r0, [r5, #0]
   114d6:	f7ff febf 	bl	11258 <app_cmd_init>
    app_cmd_add(CMD_OP_SEND_DATA,req_send_data,rsp_send_data);
   114da:	2066      	movs	r0, #102	; 0x66
   114dc:	4a0c      	ldr	r2, [pc, #48]	; (11510 <main+0x80>)
   114de:	490d      	ldr	r1, [pc, #52]	; (11514 <main+0x84>)
   114e0:	f7ff fe48 	bl	11174 <app_cmd_add>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   114e4:	f001 fc20 	bl	12d28 <arch_cpu_idle>
   114e8:	e7fc      	b.n	114e4 <main+0x54>
   114ea:	bf00      	nop
   114ec:	0001c308 	.word	0x0001c308
   114f0:	0001c330 	.word	0x0001c330
   114f4:	0001ca2d 	.word	0x0001ca2d
   114f8:	0001ca3f 	.word	0x0001ca3f
   114fc:	0001ca50 	.word	0x0001ca50
   11500:	2000cfd0 	.word	0x2000cfd0
   11504:	0001ca57 	.word	0x0001ca57
   11508:	00011451 	.word	0x00011451
   1150c:	0001ca71 	.word	0x0001ca71
   11510:	00011401 	.word	0x00011401
   11514:	000113b9 	.word	0x000113b9

00011518 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   11518:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1151a:	6844      	ldr	r4, [r0, #4]
   1151c:	4605      	mov	r5, r0

	return method & SYS_NOTIFY_METHOD_MASK;
   1151e:	f004 0403 	and.w	r4, r4, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   11522:	2c03      	cmp	r4, #3
	notify->result = res;
   11524:	6081      	str	r1, [r0, #8]
	switch (method) {
   11526:	d002      	beq.n	1152e <sys_notify_finalize+0x16>
   11528:	b12c      	cbz	r4, 11536 <sys_notify_finalize+0x1e>
   1152a:	2000      	movs	r0, #0
   1152c:	e000      	b.n	11530 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1152e:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11530:	2300      	movs	r3, #0
   11532:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11534:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
   11536:	2245      	movs	r2, #69	; 0x45
   11538:	4904      	ldr	r1, [pc, #16]	; (1154c <sys_notify_finalize+0x34>)
   1153a:	4805      	ldr	r0, [pc, #20]	; (11550 <sys_notify_finalize+0x38>)
   1153c:	f009 fd0a 	bl	1af54 <printk>
   11540:	2145      	movs	r1, #69	; 0x45
   11542:	4802      	ldr	r0, [pc, #8]	; (1154c <sys_notify_finalize+0x34>)
   11544:	f009 feea 	bl	1b31c <assert_post_action>
   11548:	e7ef      	b.n	1152a <sys_notify_finalize+0x12>
   1154a:	bf00      	nop
   1154c:	0001ca8e 	.word	0x0001ca8e
   11550:	0001c625 	.word	0x0001c625

00011554 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
   11554:	4b01      	ldr	r3, [pc, #4]	; (1155c <__printk_hook_install+0x8>)
   11556:	6018      	str	r0, [r3, #0]
}
   11558:	4770      	bx	lr
   1155a:	bf00      	nop
   1155c:	2000c5d8 	.word	0x2000c5d8

00011560 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11564:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
   11568:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1156a:	f01a 0f08 	tst.w	sl, #8
{
   1156e:	4693      	mov	fp, r2
	if (processing) {
   11570:	d01c      	beq.n	115ac <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
   11572:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11574:	bf0c      	ite	eq
   11576:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1157a:	f04a 0a20 	orrne.w	sl, sl, #32
   1157e:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11582:	f104 0014 	add.w	r0, r4, #20
   11586:	f007 faab 	bl	18ae0 <z_spin_unlock_valid>
   1158a:	b940      	cbnz	r0, 1159e <process_event+0x3e>
   1158c:	49ba      	ldr	r1, [pc, #744]	; (11878 <process_event+0x318>)
   1158e:	48bb      	ldr	r0, [pc, #748]	; (1187c <process_event+0x31c>)
   11590:	22ac      	movs	r2, #172	; 0xac
   11592:	f009 fcdf 	bl	1af54 <printk>
   11596:	21ac      	movs	r1, #172	; 0xac
   11598:	48b7      	ldr	r0, [pc, #732]	; (11878 <process_event+0x318>)
   1159a:	f009 febf 	bl	1b31c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1159e:	f38b 8811 	msr	BASEPRI, fp
   115a2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   115a6:	b003      	add	sp, #12
   115a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   115ac:	4fb4      	ldr	r7, [pc, #720]	; (11880 <process_event+0x320>)
   115ae:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 1187c <process_event+0x31c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   115b2:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   115b6:	2902      	cmp	r1, #2
   115b8:	d106      	bne.n	115c8 <process_event+0x68>
			evt = process_recheck(mgr);
   115ba:	4620      	mov	r0, r4
   115bc:	f009 fcd7 	bl	1af6e <process_recheck>
		if (evt == EVT_NOP) {
   115c0:	2800      	cmp	r0, #0
   115c2:	d0de      	beq.n	11582 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   115c4:	2801      	cmp	r0, #1
   115c6:	d165      	bne.n	11694 <process_event+0x134>
			res = mgr->last_res;
   115c8:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   115cc:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   115ce:	f1b9 0f00 	cmp.w	r9, #0
   115d2:	da19      	bge.n	11608 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   115d4:	2600      	movs	r6, #0
		*clients = mgr->clients;
   115d6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   115d8:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   115dc:	e9c4 6600 	strd	r6, r6, [r4]
   115e0:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   115e4:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   115e6:	8ba3      	ldrh	r3, [r4, #28]
   115e8:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   115ec:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   115ee:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
   115f0:	d003      	beq.n	115fa <process_event+0x9a>
		if (do_monitors
   115f2:	68a2      	ldr	r2, [r4, #8]
   115f4:	2a00      	cmp	r2, #0
   115f6:	f040 80f1 	bne.w	117dc <process_event+0x27c>
		    || !sys_slist_is_empty(&clients)
   115fa:	b915      	cbnz	r5, 11602 <process_event+0xa2>
		    || (transit != NULL)) {
   115fc:	2e00      	cmp	r6, #0
   115fe:	f000 812b 	beq.w	11858 <process_event+0x2f8>
   11602:	f04f 0a00 	mov.w	sl, #0
   11606:	e0eb      	b.n	117e0 <process_event+0x280>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11608:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1160c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1160e:	2901      	cmp	r1, #1
   11610:	d822      	bhi.n	11658 <process_event+0xf8>
	list->head = NULL;
   11612:	2100      	movs	r1, #0
   11614:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   11618:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   1161a:	6825      	ldr	r5, [r4, #0]
   1161c:	b29b      	uxth	r3, r3
	list->tail = NULL;
   1161e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11622:	d10c      	bne.n	1163e <process_event+0xde>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11624:	428d      	cmp	r5, r1
   11626:	462a      	mov	r2, r5
   11628:	bf38      	it	cc
   1162a:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1162c:	b12a      	cbz	r2, 1163a <process_event+0xda>
				mgr->refs += 1U;
   1162e:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11630:	6812      	ldr	r2, [r2, #0]
   11632:	3101      	adds	r1, #1
   11634:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11636:	2a00      	cmp	r2, #0
   11638:	d1f8      	bne.n	1162c <process_event+0xcc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1163a:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   1163e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   11640:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11642:	f009 fc94 	bl	1af6e <process_recheck>
   11646:	4606      	mov	r6, r0
   11648:	2800      	cmp	r0, #0
   1164a:	d0cc      	beq.n	115e6 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1164c:	8ba3      	ldrh	r3, [r4, #28]
   1164e:	f043 0320 	orr.w	r3, r3, #32
   11652:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   11654:	2600      	movs	r6, #0
   11656:	e7c6      	b.n	115e6 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11658:	2a04      	cmp	r2, #4
   1165a:	d10d      	bne.n	11678 <process_event+0x118>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1165c:	f023 0307 	bic.w	r3, r3, #7
   11660:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   11662:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   11664:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11666:	f009 fc82 	bl	1af6e <process_recheck>
   1166a:	4605      	mov	r5, r0
   1166c:	b180      	cbz	r0, 11690 <process_event+0x130>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1166e:	f042 0220 	orr.w	r2, r2, #32
   11672:	2500      	movs	r5, #0
   11674:	83a2      	strh	r2, [r4, #28]
   11676:	e7ed      	b.n	11654 <process_event+0xf4>
		__ASSERT_NO_MSG(false);
   11678:	f240 121b 	movw	r2, #283	; 0x11b
   1167c:	4639      	mov	r1, r7
   1167e:	4640      	mov	r0, r8
   11680:	f009 fc68 	bl	1af54 <printk>
   11684:	f240 111b 	movw	r1, #283	; 0x11b
   11688:	4638      	mov	r0, r7
   1168a:	f009 fe47 	bl	1b31c <assert_post_action>
   1168e:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   11690:	462e      	mov	r6, r5
   11692:	e7a8      	b.n	115e6 <process_event+0x86>
		} else if (evt == EVT_START) {
   11694:	2803      	cmp	r0, #3
   11696:	d131      	bne.n	116fc <process_event+0x19c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   11698:	f1ba 0f00 	cmp.w	sl, #0
   1169c:	d00a      	beq.n	116b4 <process_event+0x154>
   1169e:	4639      	mov	r1, r7
   116a0:	4640      	mov	r0, r8
   116a2:	f44f 72ab 	mov.w	r2, #342	; 0x156
   116a6:	f009 fc55 	bl	1af54 <printk>
   116aa:	f44f 71ab 	mov.w	r1, #342	; 0x156
   116ae:	4638      	mov	r0, r7
   116b0:	f009 fe34 	bl	1b31c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   116b4:	6823      	ldr	r3, [r4, #0]
   116b6:	b953      	cbnz	r3, 116ce <process_event+0x16e>
   116b8:	4639      	mov	r1, r7
   116ba:	4640      	mov	r0, r8
   116bc:	f240 1257 	movw	r2, #343	; 0x157
   116c0:	f009 fc48 	bl	1af54 <printk>
   116c4:	f240 1157 	movw	r1, #343	; 0x157
   116c8:	4638      	mov	r0, r7
   116ca:	f009 fe27 	bl	1b31c <assert_post_action>
			transit = mgr->transitions->start;
   116ce:	6923      	ldr	r3, [r4, #16]
   116d0:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   116d2:	b956      	cbnz	r6, 116ea <process_event+0x18a>
   116d4:	4639      	mov	r1, r7
   116d6:	4640      	mov	r0, r8
   116d8:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   116dc:	f009 fc3a 	bl	1af54 <printk>
   116e0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   116e4:	4638      	mov	r0, r7
   116e6:	f009 fe19 	bl	1b31c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   116ea:	8ba3      	ldrh	r3, [r4, #28]
   116ec:	f023 0307 	bic.w	r3, r3, #7
   116f0:	f043 0306 	orr.w	r3, r3, #6
}
   116f4:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   116f6:	83a3      	strh	r3, [r4, #28]
		res = 0;
   116f8:	46a9      	mov	r9, r5
}
   116fa:	e774      	b.n	115e6 <process_event+0x86>
		} else if (evt == EVT_STOP) {
   116fc:	2804      	cmp	r0, #4
   116fe:	d12e      	bne.n	1175e <process_event+0x1fe>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   11700:	f1ba 0f02 	cmp.w	sl, #2
   11704:	d00a      	beq.n	1171c <process_event+0x1bc>
   11706:	4639      	mov	r1, r7
   11708:	4640      	mov	r0, r8
   1170a:	f240 125d 	movw	r2, #349	; 0x15d
   1170e:	f009 fc21 	bl	1af54 <printk>
   11712:	f240 115d 	movw	r1, #349	; 0x15d
   11716:	4638      	mov	r0, r7
   11718:	f009 fe00 	bl	1b31c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1171c:	8be3      	ldrh	r3, [r4, #30]
   1171e:	b153      	cbz	r3, 11736 <process_event+0x1d6>
   11720:	4639      	mov	r1, r7
   11722:	4640      	mov	r0, r8
   11724:	f44f 72af 	mov.w	r2, #350	; 0x15e
   11728:	f009 fc14 	bl	1af54 <printk>
   1172c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   11730:	4638      	mov	r0, r7
   11732:	f009 fdf3 	bl	1b31c <assert_post_action>
			transit = mgr->transitions->stop;
   11736:	6923      	ldr	r3, [r4, #16]
   11738:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1173a:	b956      	cbnz	r6, 11752 <process_event+0x1f2>
   1173c:	4639      	mov	r1, r7
   1173e:	4640      	mov	r0, r8
   11740:	f240 1261 	movw	r2, #353	; 0x161
   11744:	f009 fc06 	bl	1af54 <printk>
   11748:	f240 1161 	movw	r1, #353	; 0x161
   1174c:	4638      	mov	r0, r7
   1174e:	f009 fde5 	bl	1b31c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11752:	8ba3      	ldrh	r3, [r4, #28]
   11754:	f023 0307 	bic.w	r3, r3, #7
   11758:	f043 0304 	orr.w	r3, r3, #4
   1175c:	e7ca      	b.n	116f4 <process_event+0x194>
		} else if (evt == EVT_RESET) {
   1175e:	2805      	cmp	r0, #5
   11760:	d12e      	bne.n	117c0 <process_event+0x260>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11762:	f1ba 0f01 	cmp.w	sl, #1
   11766:	d00a      	beq.n	1177e <process_event+0x21e>
   11768:	4639      	mov	r1, r7
   1176a:	4640      	mov	r0, r8
   1176c:	f44f 72b2 	mov.w	r2, #356	; 0x164
   11770:	f009 fbf0 	bl	1af54 <printk>
   11774:	f44f 71b2 	mov.w	r1, #356	; 0x164
   11778:	4638      	mov	r0, r7
   1177a:	f009 fdcf 	bl	1b31c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1177e:	6823      	ldr	r3, [r4, #0]
   11780:	b953      	cbnz	r3, 11798 <process_event+0x238>
   11782:	4639      	mov	r1, r7
   11784:	4640      	mov	r0, r8
   11786:	f240 1265 	movw	r2, #357	; 0x165
   1178a:	f009 fbe3 	bl	1af54 <printk>
   1178e:	f240 1165 	movw	r1, #357	; 0x165
   11792:	4638      	mov	r0, r7
   11794:	f009 fdc2 	bl	1b31c <assert_post_action>
			transit = mgr->transitions->reset;
   11798:	6923      	ldr	r3, [r4, #16]
   1179a:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   1179c:	b956      	cbnz	r6, 117b4 <process_event+0x254>
   1179e:	4639      	mov	r1, r7
   117a0:	4640      	mov	r0, r8
   117a2:	f44f 72b4 	mov.w	r2, #360	; 0x168
   117a6:	f009 fbd5 	bl	1af54 <printk>
   117aa:	f44f 71b4 	mov.w	r1, #360	; 0x168
   117ae:	4638      	mov	r0, r7
   117b0:	f009 fdb4 	bl	1b31c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   117b4:	8ba3      	ldrh	r3, [r4, #28]
   117b6:	f023 0307 	bic.w	r3, r3, #7
   117ba:	f043 0305 	orr.w	r3, r3, #5
   117be:	e799      	b.n	116f4 <process_event+0x194>
			__ASSERT_NO_MSG(false);
   117c0:	2500      	movs	r5, #0
   117c2:	f240 126b 	movw	r2, #363	; 0x16b
   117c6:	4639      	mov	r1, r7
   117c8:	4640      	mov	r0, r8
   117ca:	f009 fbc3 	bl	1af54 <printk>
   117ce:	f240 116b 	movw	r1, #363	; 0x16b
   117d2:	4638      	mov	r0, r7
   117d4:	f009 fda2 	bl	1b31c <assert_post_action>
		onoff_transition_fn transit = NULL;
   117d8:	462e      	mov	r6, r5
   117da:	e78d      	b.n	116f8 <process_event+0x198>
				   && !sys_slist_is_empty(&mgr->monitors);
   117dc:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   117e0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   117e4:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   117e6:	f104 0314 	add.w	r3, r4, #20
   117ea:	4618      	mov	r0, r3
   117ec:	9301      	str	r3, [sp, #4]
   117ee:	f007 f977 	bl	18ae0 <z_spin_unlock_valid>
   117f2:	b940      	cbnz	r0, 11806 <process_event+0x2a6>
   117f4:	4640      	mov	r0, r8
   117f6:	4920      	ldr	r1, [pc, #128]	; (11878 <process_event+0x318>)
   117f8:	22ac      	movs	r2, #172	; 0xac
   117fa:	f009 fbab 	bl	1af54 <printk>
   117fe:	21ac      	movs	r1, #172	; 0xac
   11800:	481d      	ldr	r0, [pc, #116]	; (11878 <process_event+0x318>)
   11802:	f009 fd8b 	bl	1b31c <assert_post_action>
   11806:	f38b 8811 	msr	BASEPRI, fp
   1180a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1180e:	f1ba 0f00 	cmp.w	sl, #0
   11812:	d139      	bne.n	11888 <process_event+0x328>
	while (!sys_slist_is_empty(list)) {
   11814:	2d00      	cmp	r5, #0
   11816:	d14c      	bne.n	118b2 <process_event+0x352>
			if (transit != NULL) {
   11818:	b116      	cbz	r6, 11820 <process_event+0x2c0>
				transit(mgr, transition_complete);
   1181a:	4620      	mov	r0, r4
   1181c:	4919      	ldr	r1, [pc, #100]	; (11884 <process_event+0x324>)
   1181e:	47b0      	blx	r6
	__asm__ volatile(
   11820:	f04f 0320 	mov.w	r3, #32
   11824:	f3ef 8b11 	mrs	fp, BASEPRI
   11828:	f383 8812 	msr	BASEPRI_MAX, r3
   1182c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11830:	9801      	ldr	r0, [sp, #4]
   11832:	f007 f947 	bl	18ac4 <z_spin_lock_valid>
   11836:	b940      	cbnz	r0, 1184a <process_event+0x2ea>
   11838:	4640      	mov	r0, r8
   1183a:	490f      	ldr	r1, [pc, #60]	; (11878 <process_event+0x318>)
   1183c:	2281      	movs	r2, #129	; 0x81
   1183e:	f009 fb89 	bl	1af54 <printk>
   11842:	2181      	movs	r1, #129	; 0x81
   11844:	480c      	ldr	r0, [pc, #48]	; (11878 <process_event+0x318>)
   11846:	f009 fd69 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1184a:	9801      	ldr	r0, [sp, #4]
   1184c:	f007 f956 	bl	18afc <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11850:	8ba3      	ldrh	r3, [r4, #28]
   11852:	f023 0308 	bic.w	r3, r3, #8
   11856:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11858:	8ba3      	ldrh	r3, [r4, #28]
   1185a:	06da      	lsls	r2, r3, #27
   1185c:	d531      	bpl.n	118c2 <process_event+0x362>
			evt = EVT_COMPLETE;
   1185e:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11860:	f023 0310 	bic.w	r3, r3, #16
   11864:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   11866:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   1186a:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
   1186e:	2900      	cmp	r1, #0
   11870:	f47f aea1 	bne.w	115b6 <process_event+0x56>
out:
   11874:	e685      	b.n	11582 <process_event+0x22>
   11876:	bf00      	nop
   11878:	0001cad3 	.word	0x0001cad3
   1187c:	0001c625 	.word	0x0001c625
   11880:	0001cab1 	.word	0x0001cab1
   11884:	000118d5 	.word	0x000118d5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11888:	68a1      	ldr	r1, [r4, #8]
   1188a:	2900      	cmp	r1, #0
   1188c:	d0c2      	beq.n	11814 <process_event+0x2b4>
	return node->next;
   1188e:	680b      	ldr	r3, [r1, #0]
   11890:	2b00      	cmp	r3, #0
   11892:	bf38      	it	cc
   11894:	2300      	movcc	r3, #0
   11896:	469a      	mov	sl, r3
		mon->callback(mgr, mon, state, res);
   11898:	4620      	mov	r0, r4
   1189a:	464b      	mov	r3, r9
   1189c:	f8d1 b004 	ldr.w	fp, [r1, #4]
   118a0:	9a00      	ldr	r2, [sp, #0]
   118a2:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   118a4:	f1ba 0f00 	cmp.w	sl, #0
   118a8:	d0b4      	beq.n	11814 <process_event+0x2b4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   118aa:	4651      	mov	r1, sl
   118ac:	f8da 3000 	ldr.w	r3, [sl]
   118b0:	e7ee      	b.n	11890 <process_event+0x330>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   118b2:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   118b4:	464b      	mov	r3, r9
   118b6:	4620      	mov	r0, r4
   118b8:	9a00      	ldr	r2, [sp, #0]
   118ba:	682d      	ldr	r5, [r5, #0]
   118bc:	f009 fb73 	bl	1afa6 <notify_one>
   118c0:	e7a8      	b.n	11814 <process_event+0x2b4>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   118c2:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   118c6:	bf1e      	ittt	ne
   118c8:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   118cc:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   118ce:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   118d0:	e7c9      	b.n	11866 <process_event+0x306>
   118d2:	bf00      	nop

000118d4 <transition_complete>:
{
   118d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118d6:	4604      	mov	r4, r0
   118d8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   118da:	f100 0614 	add.w	r6, r0, #20
   118de:	f04f 0320 	mov.w	r3, #32
   118e2:	f3ef 8711 	mrs	r7, BASEPRI
   118e6:	f383 8812 	msr	BASEPRI_MAX, r3
   118ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   118ee:	4630      	mov	r0, r6
   118f0:	f007 f8e8 	bl	18ac4 <z_spin_lock_valid>
   118f4:	b940      	cbnz	r0, 11908 <transition_complete+0x34>
   118f6:	490a      	ldr	r1, [pc, #40]	; (11920 <transition_complete+0x4c>)
   118f8:	480a      	ldr	r0, [pc, #40]	; (11924 <transition_complete+0x50>)
   118fa:	2281      	movs	r2, #129	; 0x81
   118fc:	f009 fb2a 	bl	1af54 <printk>
   11900:	2181      	movs	r1, #129	; 0x81
   11902:	4807      	ldr	r0, [pc, #28]	; (11920 <transition_complete+0x4c>)
   11904:	f009 fd0a 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   11908:	4630      	mov	r0, r6
   1190a:	f007 f8f7 	bl	18afc <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   1190e:	463a      	mov	r2, r7
   11910:	4620      	mov	r0, r4
	mgr->last_res = res;
   11912:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   11914:	2101      	movs	r1, #1
}
   11916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1191a:	f7ff be21 	b.w	11560 <process_event>
   1191e:	bf00      	nop
   11920:	0001cad3 	.word	0x0001cad3
   11924:	0001c625 	.word	0x0001c625

00011928 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1192c:	4604      	mov	r4, r0
   1192e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11930:	f009 fb4f 	bl	1afd2 <validate_args>

	if (rv < 0) {
   11934:	1e05      	subs	r5, r0, #0
   11936:	db54      	blt.n	119e2 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11938:	f104 0914 	add.w	r9, r4, #20
   1193c:	f04f 0320 	mov.w	r3, #32
   11940:	f3ef 8a11 	mrs	sl, BASEPRI
   11944:	f383 8812 	msr	BASEPRI_MAX, r3
   11948:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1194c:	4648      	mov	r0, r9
   1194e:	f007 f8b9 	bl	18ac4 <z_spin_lock_valid>
   11952:	b940      	cbnz	r0, 11966 <onoff_request+0x3e>
   11954:	4933      	ldr	r1, [pc, #204]	; (11a24 <onoff_request+0xfc>)
   11956:	4834      	ldr	r0, [pc, #208]	; (11a28 <onoff_request+0x100>)
   11958:	2281      	movs	r2, #129	; 0x81
   1195a:	f009 fafb 	bl	1af54 <printk>
   1195e:	2181      	movs	r1, #129	; 0x81
   11960:	4830      	ldr	r0, [pc, #192]	; (11a24 <onoff_request+0xfc>)
   11962:	f009 fcdb 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   11966:	4648      	mov	r0, r9
   11968:	f007 f8c8 	bl	18afc <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1196c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11970:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11972:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   11974:	428b      	cmp	r3, r1
   11976:	f002 0607 	and.w	r6, r2, #7
   1197a:	d04a      	beq.n	11a12 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1197c:	2e02      	cmp	r6, #2
   1197e:	d11f      	bne.n	119c0 <onoff_request+0x98>
	rv = state;
   11980:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   11982:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   11986:	3301      	adds	r3, #1
   11988:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1198a:	4648      	mov	r0, r9
   1198c:	f007 f8a8 	bl	18ae0 <z_spin_unlock_valid>
   11990:	b940      	cbnz	r0, 119a4 <onoff_request+0x7c>
   11992:	4924      	ldr	r1, [pc, #144]	; (11a24 <onoff_request+0xfc>)
   11994:	4824      	ldr	r0, [pc, #144]	; (11a28 <onoff_request+0x100>)
   11996:	22ac      	movs	r2, #172	; 0xac
   11998:	f009 fadc 	bl	1af54 <printk>
   1199c:	21ac      	movs	r1, #172	; 0xac
   1199e:	4821      	ldr	r0, [pc, #132]	; (11a24 <onoff_request+0xfc>)
   119a0:	f009 fcbc 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   119a4:	f38a 8811 	msr	BASEPRI, sl
   119a8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   119ac:	f1b8 0f00 	cmp.w	r8, #0
   119b0:	d017      	beq.n	119e2 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   119b2:	2300      	movs	r3, #0
   119b4:	4632      	mov	r2, r6
   119b6:	4639      	mov	r1, r7
   119b8:	4620      	mov	r0, r4
   119ba:	f009 faf4 	bl	1afa6 <notify_one>
   119be:	e010      	b.n	119e2 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   119c0:	0793      	lsls	r3, r2, #30
   119c2:	d001      	beq.n	119c8 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   119c4:	2e06      	cmp	r6, #6
   119c6:	d10f      	bne.n	119e8 <onoff_request+0xc0>
	parent->next = child;
   119c8:	2300      	movs	r3, #0
   119ca:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   119cc:	6863      	ldr	r3, [r4, #4]
   119ce:	b9eb      	cbnz	r3, 11a0c <onoff_request+0xe4>
	list->head = node;
   119d0:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   119d4:	4635      	mov	r5, r6
   119d6:	b9f6      	cbnz	r6, 11a16 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   119d8:	4652      	mov	r2, sl
   119da:	2102      	movs	r1, #2
   119dc:	4620      	mov	r0, r4
   119de:	f7ff fdbf 	bl	11560 <process_event>
		}
	}

	return rv;
}
   119e2:	4628      	mov	r0, r5
   119e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   119e8:	2e05      	cmp	r6, #5
   119ea:	d017      	beq.n	11a1c <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   119ec:	2e01      	cmp	r6, #1
   119ee:	d00a      	beq.n	11a06 <onoff_request+0xde>
   119f0:	490e      	ldr	r1, [pc, #56]	; (11a2c <onoff_request+0x104>)
   119f2:	480d      	ldr	r0, [pc, #52]	; (11a28 <onoff_request+0x100>)
   119f4:	f240 12c9 	movw	r2, #457	; 0x1c9
   119f8:	f009 faac 	bl	1af54 <printk>
   119fc:	f240 11c9 	movw	r1, #457	; 0x1c9
   11a00:	480a      	ldr	r0, [pc, #40]	; (11a2c <onoff_request+0x104>)
   11a02:	f009 fc8b 	bl	1b31c <assert_post_action>
		rv = -EIO;
   11a06:	f06f 0504 	mvn.w	r5, #4
   11a0a:	e004      	b.n	11a16 <onoff_request+0xee>
	parent->next = child;
   11a0c:	601f      	str	r7, [r3, #0]
	list->tail = node;
   11a0e:	6067      	str	r7, [r4, #4]
}
   11a10:	e7e0      	b.n	119d4 <onoff_request+0xac>
		rv = -EAGAIN;
   11a12:	f06f 050a 	mvn.w	r5, #10
   11a16:	f04f 0800 	mov.w	r8, #0
   11a1a:	e7b6      	b.n	1198a <onoff_request+0x62>
		rv = -ENOTSUP;
   11a1c:	f06f 0585 	mvn.w	r5, #133	; 0x85
   11a20:	e7f9      	b.n	11a16 <onoff_request+0xee>
   11a22:	bf00      	nop
   11a24:	0001cad3 	.word	0x0001cad3
   11a28:	0001c625 	.word	0x0001c625
   11a2c:	0001cab1 	.word	0x0001cab1

00011a30 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   11a30:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   11a32:	b379      	cbz	r1, 11a94 <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   11a34:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11a36:	1f0c      	subs	r4, r1, #4
   11a38:	1b64      	subs	r4, r4, r5
   11a3a:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   11a3c:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   11a40:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   11a42:	78a3      	ldrb	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   11a44:	07db      	lsls	r3, r3, #31
   11a46:	d408      	bmi.n	11a5a <sys_heap_free+0x2a>
   11a48:	4913      	ldr	r1, [pc, #76]	; (11a98 <sys_heap_free+0x68>)
   11a4a:	4814      	ldr	r0, [pc, #80]	; (11a9c <sys_heap_free+0x6c>)
   11a4c:	22a3      	movs	r2, #163	; 0xa3
   11a4e:	f009 fa81 	bl	1af54 <printk>
   11a52:	21a3      	movs	r1, #163	; 0xa3
   11a54:	4810      	ldr	r0, [pc, #64]	; (11a98 <sys_heap_free+0x68>)
   11a56:	f009 fc61 	bl	1b31c <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   11a5a:	4631      	mov	r1, r6
   11a5c:	4628      	mov	r0, r5
   11a5e:	f009 fae4 	bl	1b02a <chunk_size>
   11a62:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   11a64:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   11a68:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   11a6a:	4286      	cmp	r6, r0
   11a6c:	d008      	beq.n	11a80 <sys_heap_free+0x50>
   11a6e:	490a      	ldr	r1, [pc, #40]	; (11a98 <sys_heap_free+0x68>)
   11a70:	480a      	ldr	r0, [pc, #40]	; (11a9c <sys_heap_free+0x6c>)
   11a72:	22ab      	movs	r2, #171	; 0xab
   11a74:	f009 fa6e 	bl	1af54 <printk>
   11a78:	21ab      	movs	r1, #171	; 0xab
   11a7a:	4807      	ldr	r0, [pc, #28]	; (11a98 <sys_heap_free+0x68>)
   11a7c:	f009 fc4e 	bl	1b31c <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   11a80:	8863      	ldrh	r3, [r4, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
   11a82:	4631      	mov	r1, r6
   11a84:	f023 0301 	bic.w	r3, r3, #1
   11a88:	4628      	mov	r0, r5
   11a8a:	8063      	strh	r3, [r4, #2]
}
   11a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   11a90:	f009 bb88 	b.w	1b1a4 <free_chunk>
}
   11a94:	bd70      	pop	{r4, r5, r6, pc}
   11a96:	bf00      	nop
   11a98:	0001caf9 	.word	0x0001caf9
   11a9c:	0001c625 	.word	0x0001c625

00011aa0 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   11aa0:	424b      	negs	r3, r1
{
   11aa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   11aa6:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   11aaa:	ea31 0303 	bics.w	r3, r1, r3
{
   11aae:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   11ab0:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   11ab2:	d01b      	beq.n	11aec <sys_heap_aligned_alloc+0x4c>
		return false;
   11ab4:	2f04      	cmp	r7, #4
   11ab6:	463d      	mov	r5, r7
   11ab8:	bf28      	it	cs
   11aba:	2504      	movcs	r5, #4
   11abc:	46b9      	mov	r9, r7
		align -= rew;
   11abe:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11ac0:	f107 3aff 	add.w	sl, r7, #4294967295
   11ac4:	ea1a 0f07 	tst.w	sl, r7
   11ac8:	d00a      	beq.n	11ae0 <sys_heap_aligned_alloc+0x40>
   11aca:	4931      	ldr	r1, [pc, #196]	; (11b90 <sys_heap_aligned_alloc+0xf0>)
   11acc:	4831      	ldr	r0, [pc, #196]	; (11b94 <sys_heap_aligned_alloc+0xf4>)
   11ace:	f240 1227 	movw	r2, #295	; 0x127
   11ad2:	f009 fa3f 	bl	1af54 <printk>
   11ad6:	f240 1127 	movw	r1, #295	; 0x127
   11ada:	482d      	ldr	r0, [pc, #180]	; (11b90 <sys_heap_aligned_alloc+0xf0>)
   11adc:	f009 fc1e 	bl	1b31c <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   11ae0:	b97c      	cbnz	r4, 11b02 <sys_heap_aligned_alloc+0x62>
		return NULL;
   11ae2:	f04f 0900 	mov.w	r9, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   11ae6:	4648      	mov	r0, r9
   11ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   11aec:	2904      	cmp	r1, #4
   11aee:	d804      	bhi.n	11afa <sys_heap_aligned_alloc+0x5a>
}
   11af0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   11af4:	4611      	mov	r1, r2
   11af6:	f009 bb86 	b.w	1b206 <sys_heap_alloc>
		rew = 0;
   11afa:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   11afe:	2504      	movs	r5, #4
   11b00:	e7de      	b.n	11ac0 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   11b02:	68b3      	ldr	r3, [r6, #8]
   11b04:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   11b08:	d9eb      	bls.n	11ae2 <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11b0a:	f104 010b 	add.w	r1, r4, #11
   11b0e:	4439      	add	r1, r7
   11b10:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   11b12:	4630      	mov	r0, r6
   11b14:	08c9      	lsrs	r1, r1, #3
   11b16:	f009 fade 	bl	1b0d6 <alloc_chunk>
	if (c0 == 0) {
   11b1a:	4680      	mov	r8, r0
   11b1c:	2800      	cmp	r0, #0
   11b1e:	d0e0      	beq.n	11ae2 <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   11b20:	f109 0504 	add.w	r5, r9, #4
   11b24:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   11b28:	4435      	add	r5, r6
   11b2a:	4455      	add	r5, sl
   11b2c:	427f      	negs	r7, r7
   11b2e:	402f      	ands	r7, r5
   11b30:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11b34:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11b36:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11b3a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11b3c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11b3e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   11b42:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   11b44:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11b48:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   11b4c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   11b50:	d208      	bcs.n	11b64 <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   11b52:	4601      	mov	r1, r0
   11b54:	463a      	mov	r2, r7
   11b56:	4630      	mov	r0, r6
   11b58:	f009 fb0a 	bl	1b170 <split_chunks>
		free_list_add(h, c0);
   11b5c:	4641      	mov	r1, r8
   11b5e:	4630      	mov	r0, r6
   11b60:	f009 fa68 	bl	1b034 <free_list_add>
	return c + chunk_size(h, c);
   11b64:	4639      	mov	r1, r7
   11b66:	4630      	mov	r0, r6
   11b68:	f009 fa5f 	bl	1b02a <chunk_size>
   11b6c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   11b6e:	4284      	cmp	r4, r0
   11b70:	d207      	bcs.n	11b82 <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c, c_end);
   11b72:	4630      	mov	r0, r6
   11b74:	4622      	mov	r2, r4
   11b76:	f009 fafb 	bl	1b170 <split_chunks>
		free_list_add(h, c_end);
   11b7a:	4621      	mov	r1, r4
   11b7c:	4630      	mov	r0, r6
   11b7e:	f009 fa59 	bl	1b034 <free_list_add>
	void *cmem = &buf[c];
   11b82:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11b86:	8873      	ldrh	r3, [r6, #2]
   11b88:	f043 0301 	orr.w	r3, r3, #1
   11b8c:	8073      	strh	r3, [r6, #2]
   11b8e:	e7aa      	b.n	11ae6 <sys_heap_aligned_alloc+0x46>
   11b90:	0001caf9 	.word	0x0001caf9
   11b94:	0001c625 	.word	0x0001c625

00011b98 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   11b98:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   11b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ba0:	4606      	mov	r6, r0
   11ba2:	460d      	mov	r5, r1
   11ba4:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   11ba6:	d35d      	bcc.n	11c64 <sys_heap_init+0xcc>
   11ba8:	4935      	ldr	r1, [pc, #212]	; (11c80 <sys_heap_init+0xe8>)
   11baa:	f240 12a5 	movw	r2, #421	; 0x1a5
   11bae:	4835      	ldr	r0, [pc, #212]	; (11c84 <sys_heap_init+0xec>)
   11bb0:	f009 f9d0 	bl	1af54 <printk>
   11bb4:	f240 11a5 	movw	r1, #421	; 0x1a5
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11bb8:	4831      	ldr	r0, [pc, #196]	; (11c80 <sys_heap_init+0xe8>)
   11bba:	f009 fbaf 	bl	1b31c <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   11bbe:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11bc0:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11bc2:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11bc4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11bc8:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11bcc:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11bce:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11bd0:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11bd4:	d80a      	bhi.n	11bec <sys_heap_init+0x54>
   11bd6:	492a      	ldr	r1, [pc, #168]	; (11c80 <sys_heap_init+0xe8>)
   11bd8:	482a      	ldr	r0, [pc, #168]	; (11c84 <sys_heap_init+0xec>)
   11bda:	f240 12b5 	movw	r2, #437	; 0x1b5
   11bde:	f009 f9b9 	bl	1af54 <printk>
   11be2:	f240 11b5 	movw	r1, #437	; 0x1b5
   11be6:	4826      	ldr	r0, [pc, #152]	; (11c80 <sys_heap_init+0xe8>)
   11be8:	f009 fb98 	bl	1b31c <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   11bec:	fab7 f887 	clz	r8, r7

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   11bf0:	2300      	movs	r3, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11bf2:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
   11bf6:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
   11bfa:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11bfc:	f108 0607 	add.w	r6, r8, #7
   11c00:	08f6      	lsrs	r6, r6, #3
	h->avail_buckets = 0;
   11c02:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11c04:	1c73      	adds	r3, r6, #1
   11c06:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   11c08:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11c0a:	d90a      	bls.n	11c22 <sys_heap_init+0x8a>
   11c0c:	491c      	ldr	r1, [pc, #112]	; (11c80 <sys_heap_init+0xe8>)
   11c0e:	481d      	ldr	r0, [pc, #116]	; (11c84 <sys_heap_init+0xec>)
   11c10:	f240 12c5 	movw	r2, #453	; 0x1c5
   11c14:	f009 f99e 	bl	1af54 <printk>
   11c18:	f240 11c5 	movw	r1, #453	; 0x1c5
   11c1c:	4818      	ldr	r0, [pc, #96]	; (11c80 <sys_heap_init+0xe8>)
   11c1e:	f009 fb7d 	bl	1b31c <assert_post_action>
   11c22:	2300      	movs	r3, #0
   11c24:	f104 0210 	add.w	r2, r4, #16
   11c28:	44a0      	add	r8, r4

	for (int i = 0; i < nb_buckets; i++) {
   11c2a:	4590      	cmp	r8, r2
   11c2c:	d125      	bne.n	11c7a <sys_heap_init+0xe2>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11c2e:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11c30:	f042 0201 	orr.w	r2, r2, #1
   11c34:	8062      	strh	r2, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11c36:	1bba      	subs	r2, r7, r6
		((uint16_t *)cmem)[f] = val;
   11c38:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11c3c:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
   11c3e:	8023      	strh	r3, [r4, #0]
   11c40:	8048      	strh	r0, [r1, #2]
   11c42:	1961      	adds	r1, r4, r5
   11c44:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
   11c48:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
   11c4c:	804b      	strh	r3, [r1, #2]
   11c4e:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11c50:	887b      	ldrh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   11c52:	4631      	mov	r1, r6
   11c54:	f043 0301 	orr.w	r3, r3, #1
   11c58:	4620      	mov	r0, r4
   11c5a:	807b      	strh	r3, [r7, #2]
}
   11c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   11c60:	f009 b9e8 	b.w	1b034 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11c64:	2a04      	cmp	r2, #4
   11c66:	d8aa      	bhi.n	11bbe <sys_heap_init+0x26>
   11c68:	4905      	ldr	r1, [pc, #20]	; (11c80 <sys_heap_init+0xe8>)
   11c6a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   11c6e:	4805      	ldr	r0, [pc, #20]	; (11c84 <sys_heap_init+0xec>)
   11c70:	f009 f970 	bl	1af54 <printk>
   11c74:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   11c78:	e79e      	b.n	11bb8 <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   11c7a:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   11c7e:	e7d4      	b.n	11c2a <sys_heap_init+0x92>
   11c80:	0001caf9 	.word	0x0001caf9
   11c84:	0001c625 	.word	0x0001c625

00011c88 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   11c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c8c:	468b      	mov	fp, r1
   11c8e:	4692      	mov	sl, r2
   11c90:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11c92:	2500      	movs	r5, #0
{
   11c94:	b091      	sub	sp, #68	; 0x44
   11c96:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11c98:	f89a 0000 	ldrb.w	r0, [sl]
   11c9c:	b908      	cbnz	r0, 11ca2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   11c9e:	4628      	mov	r0, r5
   11ca0:	e35e      	b.n	12360 <cbvprintf+0x6d8>
		if (*fp != '%') {
   11ca2:	2825      	cmp	r0, #37	; 0x25
   11ca4:	f10a 0701 	add.w	r7, sl, #1
   11ca8:	d007      	beq.n	11cba <cbvprintf+0x32>
			OUTC('%');
   11caa:	4659      	mov	r1, fp
   11cac:	9b02      	ldr	r3, [sp, #8]
   11cae:	4798      	blx	r3
   11cb0:	2800      	cmp	r0, #0
   11cb2:	f2c0 8355 	blt.w	12360 <cbvprintf+0x6d8>
   11cb6:	3501      	adds	r5, #1
			break;
   11cb8:	e210      	b.n	120dc <cbvprintf+0x454>
		} state = {
   11cba:	2218      	movs	r2, #24
   11cbc:	2100      	movs	r1, #0
   11cbe:	a80a      	add	r0, sp, #40	; 0x28
   11cc0:	f009 fc28 	bl	1b514 <memset>
	if (*sp == '%') {
   11cc4:	f89a 3001 	ldrb.w	r3, [sl, #1]
   11cc8:	2b25      	cmp	r3, #37	; 0x25
   11cca:	d078      	beq.n	11dbe <cbvprintf+0x136>
   11ccc:	2200      	movs	r2, #0
   11cce:	4694      	mov	ip, r2
   11cd0:	4616      	mov	r6, r2
   11cd2:	4696      	mov	lr, r2
   11cd4:	4610      	mov	r0, r2
   11cd6:	4639      	mov	r1, r7
		switch (*sp) {
   11cd8:	f817 3b01 	ldrb.w	r3, [r7], #1
   11cdc:	2b2b      	cmp	r3, #43	; 0x2b
   11cde:	f000 809d 	beq.w	11e1c <cbvprintf+0x194>
   11ce2:	f200 8094 	bhi.w	11e0e <cbvprintf+0x186>
   11ce6:	2b20      	cmp	r3, #32
   11ce8:	f000 809b 	beq.w	11e22 <cbvprintf+0x19a>
   11cec:	2b23      	cmp	r3, #35	; 0x23
   11cee:	f000 809a 	beq.w	11e26 <cbvprintf+0x19e>
   11cf2:	b128      	cbz	r0, 11d00 <cbvprintf+0x78>
   11cf4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11cf8:	f040 0004 	orr.w	r0, r0, #4
   11cfc:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11d00:	f1be 0f00 	cmp.w	lr, #0
   11d04:	d005      	beq.n	11d12 <cbvprintf+0x8a>
   11d06:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11d0a:	f040 0008 	orr.w	r0, r0, #8
   11d0e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11d12:	b12e      	cbz	r6, 11d20 <cbvprintf+0x98>
   11d14:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11d18:	f040 0010 	orr.w	r0, r0, #16
   11d1c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11d20:	f1bc 0f00 	cmp.w	ip, #0
   11d24:	d005      	beq.n	11d32 <cbvprintf+0xaa>
   11d26:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11d2a:	f040 0020 	orr.w	r0, r0, #32
   11d2e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11d32:	b12a      	cbz	r2, 11d40 <cbvprintf+0xb8>
   11d34:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11d3c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   11d40:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11d44:	f002 0044 	and.w	r0, r2, #68	; 0x44
   11d48:	2844      	cmp	r0, #68	; 0x44
   11d4a:	d103      	bne.n	11d54 <cbvprintf+0xcc>
		conv->flag_zero = false;
   11d4c:	f36f 1286 	bfc	r2, #6, #1
   11d50:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   11d54:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11d58:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   11d5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11d5e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11d62:	d17b      	bne.n	11e5c <cbvprintf+0x1d4>
		conv->width_star = true;
   11d64:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11d68:	1c4b      	adds	r3, r1, #1
   11d6a:	f042 0201 	orr.w	r2, r2, #1
   11d6e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   11d72:	781a      	ldrb	r2, [r3, #0]
   11d74:	2a2e      	cmp	r2, #46	; 0x2e
   11d76:	bf0c      	ite	eq
   11d78:	2101      	moveq	r1, #1
   11d7a:	2100      	movne	r1, #0
   11d7c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11d80:	f361 0241 	bfi	r2, r1, #1, #1
   11d84:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   11d88:	d174      	bne.n	11e74 <cbvprintf+0x1ec>
	if (*sp == '*') {
   11d8a:	785a      	ldrb	r2, [r3, #1]
   11d8c:	2a2a      	cmp	r2, #42	; 0x2a
   11d8e:	d06a      	beq.n	11e66 <cbvprintf+0x1de>
	size_t val = 0;
   11d90:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   11d92:	260a      	movs	r6, #10
   11d94:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11d96:	4618      	mov	r0, r3
   11d98:	f810 2b01 	ldrb.w	r2, [r0], #1
   11d9c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11da0:	2f09      	cmp	r7, #9
   11da2:	f240 808e 	bls.w	11ec2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   11da6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   11daa:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   11dac:	f3c2 0040 	ubfx	r0, r2, #1, #1
   11db0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   11db4:	f361 0241 	bfi	r2, r1, #1, #1
   11db8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11dbc:	e05a      	b.n	11e74 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   11dbe:	f10a 0702 	add.w	r7, sl, #2
   11dc2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   11dc6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11dca:	07d9      	lsls	r1, r3, #31
   11dcc:	f140 8149 	bpl.w	12062 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   11dd0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   11dd4:	f1b9 0f00 	cmp.w	r9, #0
   11dd8:	da07      	bge.n	11dea <cbvprintf+0x162>
				conv->flag_dash = true;
   11dda:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
   11dde:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   11de2:	f042 0204 	orr.w	r2, r2, #4
   11de6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
   11dea:	075a      	lsls	r2, r3, #29
   11dec:	f140 8142 	bpl.w	12074 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   11df0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   11df4:	f1b8 0f00 	cmp.w	r8, #0
   11df8:	f280 8141 	bge.w	1207e <cbvprintf+0x3f6>
				conv->prec_present = false;
   11dfc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11e00:	f36f 0341 	bfc	r3, #1, #1
   11e04:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   11e08:	f04f 38ff 	mov.w	r8, #4294967295
   11e0c:	e137      	b.n	1207e <cbvprintf+0x3f6>
		switch (*sp) {
   11e0e:	2b2d      	cmp	r3, #45	; 0x2d
   11e10:	d00c      	beq.n	11e2c <cbvprintf+0x1a4>
   11e12:	2b30      	cmp	r3, #48	; 0x30
   11e14:	f47f af6d 	bne.w	11cf2 <cbvprintf+0x6a>
			conv->flag_zero = true;
   11e18:	2201      	movs	r2, #1
	} while (loop);
   11e1a:	e75c      	b.n	11cd6 <cbvprintf+0x4e>
			conv->flag_plus = true;
   11e1c:	f04f 0e01 	mov.w	lr, #1
   11e20:	e759      	b.n	11cd6 <cbvprintf+0x4e>
			conv->flag_space = true;
   11e22:	2601      	movs	r6, #1
   11e24:	e757      	b.n	11cd6 <cbvprintf+0x4e>
			conv->flag_hash = true;
   11e26:	f04f 0c01 	mov.w	ip, #1
   11e2a:	e754      	b.n	11cd6 <cbvprintf+0x4e>
		switch (*sp) {
   11e2c:	2001      	movs	r0, #1
   11e2e:	e752      	b.n	11cd6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   11e30:	4633      	mov	r3, r6
   11e32:	fb0c 0202 	mla	r2, ip, r2, r0
   11e36:	3a30      	subs	r2, #48	; 0x30
   11e38:	461e      	mov	r6, r3
   11e3a:	f816 0b01 	ldrb.w	r0, [r6], #1
   11e3e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11e42:	2f09      	cmp	r7, #9
   11e44:	d9f4      	bls.n	11e30 <cbvprintf+0x1a8>
	if (sp != wp) {
   11e46:	4299      	cmp	r1, r3
   11e48:	d093      	beq.n	11d72 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   11e4a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   11e4e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   11e50:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   11e52:	f362 0141 	bfi	r1, r2, #1, #1
   11e56:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   11e5a:	e78a      	b.n	11d72 <cbvprintf+0xea>
   11e5c:	460b      	mov	r3, r1
	size_t val = 0;
   11e5e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11e60:	f04f 0c0a 	mov.w	ip, #10
   11e64:	e7e8      	b.n	11e38 <cbvprintf+0x1b0>
		conv->prec_star = true;
   11e66:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   11e6a:	3302      	adds	r3, #2
		conv->prec_star = true;
   11e6c:	f042 0204 	orr.w	r2, r2, #4
   11e70:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
   11e74:	461f      	mov	r7, r3
   11e76:	f817 2b01 	ldrb.w	r2, [r7], #1
   11e7a:	2a6c      	cmp	r2, #108	; 0x6c
   11e7c:	d041      	beq.n	11f02 <cbvprintf+0x27a>
   11e7e:	d825      	bhi.n	11ecc <cbvprintf+0x244>
   11e80:	2a68      	cmp	r2, #104	; 0x68
   11e82:	d02b      	beq.n	11edc <cbvprintf+0x254>
   11e84:	2a6a      	cmp	r2, #106	; 0x6a
   11e86:	d046      	beq.n	11f16 <cbvprintf+0x28e>
   11e88:	2a4c      	cmp	r2, #76	; 0x4c
   11e8a:	d04c      	beq.n	11f26 <cbvprintf+0x29e>
   11e8c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   11e8e:	f817 2b01 	ldrb.w	r2, [r7], #1
   11e92:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
   11e96:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   11e98:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   11e9c:	f200 80d9 	bhi.w	12052 <cbvprintf+0x3ca>
   11ea0:	2a57      	cmp	r2, #87	; 0x57
   11ea2:	d84d      	bhi.n	11f40 <cbvprintf+0x2b8>
   11ea4:	2a41      	cmp	r2, #65	; 0x41
   11ea6:	d003      	beq.n	11eb0 <cbvprintf+0x228>
   11ea8:	3a45      	subs	r2, #69	; 0x45
   11eaa:	2a02      	cmp	r2, #2
   11eac:	f200 80d1 	bhi.w	12052 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   11eb0:	2204      	movs	r2, #4
   11eb2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11eb6:	f362 0302 	bfi	r3, r2, #0, #3
   11eba:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   11ebe:	2301      	movs	r3, #1
			break;
   11ec0:	e09e      	b.n	12000 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   11ec2:	fb06 2101 	mla	r1, r6, r1, r2
   11ec6:	4603      	mov	r3, r0
   11ec8:	3930      	subs	r1, #48	; 0x30
   11eca:	e764      	b.n	11d96 <cbvprintf+0x10e>
	switch (*sp) {
   11ecc:	2a74      	cmp	r2, #116	; 0x74
   11ece:	d026      	beq.n	11f1e <cbvprintf+0x296>
   11ed0:	2a7a      	cmp	r2, #122	; 0x7a
   11ed2:	d1db      	bne.n	11e8c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   11ed4:	2206      	movs	r2, #6
   11ed6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11eda:	e00d      	b.n	11ef8 <cbvprintf+0x270>
		if (*++sp == 'h') {
   11edc:	785a      	ldrb	r2, [r3, #1]
   11ede:	2a68      	cmp	r2, #104	; 0x68
   11ee0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11ee4:	d106      	bne.n	11ef4 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   11ee6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   11ee8:	f361 02c6 	bfi	r2, r1, #3, #4
   11eec:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   11ef0:	1c9f      	adds	r7, r3, #2
   11ef2:	e7cc      	b.n	11e8e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   11ef4:	4613      	mov	r3, r2
   11ef6:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   11ef8:	f362 03c6 	bfi	r3, r2, #3, #4
   11efc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   11f00:	e7c5      	b.n	11e8e <cbvprintf+0x206>
		if (*++sp == 'l') {
   11f02:	785a      	ldrb	r2, [r3, #1]
   11f04:	2a6c      	cmp	r2, #108	; 0x6c
   11f06:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11f0a:	d101      	bne.n	11f10 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   11f0c:	2104      	movs	r1, #4
   11f0e:	e7eb      	b.n	11ee8 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   11f10:	4613      	mov	r3, r2
   11f12:	2203      	movs	r2, #3
   11f14:	e7f0      	b.n	11ef8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   11f16:	2205      	movs	r2, #5
   11f18:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11f1c:	e7ec      	b.n	11ef8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   11f1e:	2207      	movs	r2, #7
   11f20:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11f24:	e7e8      	b.n	11ef8 <cbvprintf+0x270>
		conv->unsupported = true;
   11f26:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   11f2a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   11f2e:	f023 0302 	bic.w	r3, r3, #2
   11f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   11f36:	f043 0302 	orr.w	r3, r3, #2
   11f3a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   11f3e:	e7a6      	b.n	11e8e <cbvprintf+0x206>
   11f40:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   11f44:	2920      	cmp	r1, #32
   11f46:	f200 8084 	bhi.w	12052 <cbvprintf+0x3ca>
   11f4a:	a001      	add	r0, pc, #4	; (adr r0, 11f50 <cbvprintf+0x2c8>)
   11f4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   11f50:	00012015 	.word	0x00012015
   11f54:	00012053 	.word	0x00012053
   11f58:	00012053 	.word	0x00012053
   11f5c:	00012053 	.word	0x00012053
   11f60:	00012053 	.word	0x00012053
   11f64:	00012053 	.word	0x00012053
   11f68:	00012053 	.word	0x00012053
   11f6c:	00012053 	.word	0x00012053
   11f70:	00012053 	.word	0x00012053
   11f74:	00011eb1 	.word	0x00011eb1
   11f78:	00012053 	.word	0x00012053
   11f7c:	00012015 	.word	0x00012015
   11f80:	00011fd5 	.word	0x00011fd5
   11f84:	00011eb1 	.word	0x00011eb1
   11f88:	00011eb1 	.word	0x00011eb1
   11f8c:	00011eb1 	.word	0x00011eb1
   11f90:	00012053 	.word	0x00012053
   11f94:	00011fd5 	.word	0x00011fd5
   11f98:	00012053 	.word	0x00012053
   11f9c:	00012053 	.word	0x00012053
   11fa0:	00012053 	.word	0x00012053
   11fa4:	00012053 	.word	0x00012053
   11fa8:	0001201d 	.word	0x0001201d
   11fac:	00012015 	.word	0x00012015
   11fb0:	00012039 	.word	0x00012039
   11fb4:	00012053 	.word	0x00012053
   11fb8:	00012053 	.word	0x00012053
   11fbc:	00012039 	.word	0x00012039
   11fc0:	00012053 	.word	0x00012053
   11fc4:	00012015 	.word	0x00012015
   11fc8:	00012053 	.word	0x00012053
   11fcc:	00012053 	.word	0x00012053
   11fd0:	00012015 	.word	0x00012015
		conv->specifier_cat = SPECIFIER_SINT;
   11fd4:	2001      	movs	r0, #1
   11fd6:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11fda:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11fde:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11fe2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11fe4:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   11fe8:	bf02      	ittt	eq
   11fea:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   11fee:	f041 0101 	orreq.w	r1, r1, #1
   11ff2:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   11ff6:	2a63      	cmp	r2, #99	; 0x63
   11ff8:	d131      	bne.n	1205e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11ffa:	3b00      	subs	r3, #0
   11ffc:	bf18      	it	ne
   11ffe:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   12000:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12004:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12008:	430b      	orrs	r3, r1
   1200a:	f363 0241 	bfi	r2, r3, #1, #1
   1200e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   12012:	e6d8      	b.n	11dc6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   12014:	2002      	movs	r0, #2
   12016:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1201a:	e7de      	b.n	11fda <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   1201c:	2103      	movs	r1, #3
   1201e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12022:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12026:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1202a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1202e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   12030:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12034:	4143      	adcs	r3, r0
   12036:	e7e3      	b.n	12000 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   12038:	2103      	movs	r1, #3
   1203a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1203e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12042:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   12046:	bf14      	ite	ne
   12048:	2301      	movne	r3, #1
   1204a:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   1204c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   12050:	e7d6      	b.n	12000 <cbvprintf+0x378>
		conv->invalid = true;
   12052:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12056:	f043 0301 	orr.w	r3, r3, #1
   1205a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   1205e:	2300      	movs	r3, #0
   12060:	e7ce      	b.n	12000 <cbvprintf+0x378>
		} else if (conv->width_present) {
   12062:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   12066:	2a00      	cmp	r2, #0
		int width = -1;
   12068:	bfac      	ite	ge
   1206a:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   1206e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
   12072:	e6ba      	b.n	11dea <cbvprintf+0x162>
		} else if (conv->prec_present) {
   12074:	079b      	lsls	r3, r3, #30
   12076:	f57f aec7 	bpl.w	11e08 <cbvprintf+0x180>
			precision = conv->prec_value;
   1207a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
   1207e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12080:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   12084:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
   12088:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
   1208c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12090:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12092:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12096:	d136      	bne.n	12106 <cbvprintf+0x47e>
			switch (length_mod) {
   12098:	1ed3      	subs	r3, r2, #3
   1209a:	2b04      	cmp	r3, #4
   1209c:	d820      	bhi.n	120e0 <cbvprintf+0x458>
   1209e:	e8df f003 	tbb	[pc, r3]
   120a2:	0703      	.short	0x0703
   120a4:	1f07      	.short	0x1f07
   120a6:	1f          	.byte	0x1f
   120a7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   120a8:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   120ac:	17c1      	asrs	r1, r0, #31
   120ae:	e004      	b.n	120ba <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   120b0:	3407      	adds	r4, #7
   120b2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   120b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   120ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   120be:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   120c2:	f013 0603 	ands.w	r6, r3, #3
   120c6:	d054      	beq.n	12172 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   120c8:	463b      	mov	r3, r7
   120ca:	4652      	mov	r2, sl
   120cc:	4659      	mov	r1, fp
   120ce:	9802      	ldr	r0, [sp, #8]
   120d0:	f009 f90e 	bl	1b2f0 <outs>
   120d4:	2800      	cmp	r0, #0
   120d6:	f2c0 8143 	blt.w	12360 <cbvprintf+0x6d8>
   120da:	4405      	add	r5, r0
			continue;
   120dc:	46ba      	mov	sl, r7
   120de:	e5db      	b.n	11c98 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   120e0:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   120e4:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   120e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
   120ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   120ee:	d105      	bne.n	120fc <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   120f0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   120f4:	930a      	str	r3, [sp, #40]	; 0x28
   120f6:	2300      	movs	r3, #0
   120f8:	930b      	str	r3, [sp, #44]	; 0x2c
   120fa:	e7e0      	b.n	120be <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   120fc:	2a02      	cmp	r2, #2
   120fe:	d1de      	bne.n	120be <cbvprintf+0x436>
				value->sint = (short)value->sint;
   12100:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   12104:	e7d2      	b.n	120ac <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12106:	2b02      	cmp	r3, #2
   12108:	d123      	bne.n	12152 <cbvprintf+0x4ca>
			switch (length_mod) {
   1210a:	1ed3      	subs	r3, r2, #3
   1210c:	2b04      	cmp	r3, #4
   1210e:	d813      	bhi.n	12138 <cbvprintf+0x4b0>
   12110:	e8df f003 	tbb	[pc, r3]
   12114:	120a0a03 	.word	0x120a0a03
   12118:	12          	.byte	0x12
   12119:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   1211a:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
   1211c:	6820      	ldr	r0, [r4, #0]
   1211e:	1d23      	adds	r3, r4, #4
   12120:	900a      	str	r0, [sp, #40]	; 0x28
   12122:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   12124:	461c      	mov	r4, r3
   12126:	e7ca      	b.n	120be <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   12128:	3407      	adds	r4, #7
   1212a:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   1212e:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   12132:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   12136:	e7f5      	b.n	12124 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   12138:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1213c:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   1213e:	930a      	str	r3, [sp, #40]	; 0x28
   12140:	f04f 0300 	mov.w	r3, #0
   12144:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   12146:	d0d3      	beq.n	120f0 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   12148:	2a02      	cmp	r2, #2
   1214a:	d1b8      	bne.n	120be <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   1214c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12150:	e7d0      	b.n	120f4 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   12152:	2b04      	cmp	r3, #4
   12154:	d107      	bne.n	12166 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   12156:	3407      	adds	r4, #7
   12158:	f024 0407 	bic.w	r4, r4, #7
   1215c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   12160:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   12164:	e7ab      	b.n	120be <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12166:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   12168:	bf04      	itt	eq
   1216a:	f854 3b04 	ldreq.w	r3, [r4], #4
   1216e:	930a      	streq	r3, [sp, #40]	; 0x28
   12170:	e7a5      	b.n	120be <cbvprintf+0x436>
		switch (conv->specifier) {
   12172:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12176:	2878      	cmp	r0, #120	; 0x78
   12178:	d8b0      	bhi.n	120dc <cbvprintf+0x454>
   1217a:	2862      	cmp	r0, #98	; 0x62
   1217c:	d822      	bhi.n	121c4 <cbvprintf+0x53c>
   1217e:	2825      	cmp	r0, #37	; 0x25
   12180:	f43f ad93 	beq.w	11caa <cbvprintf+0x22>
   12184:	2858      	cmp	r0, #88	; 0x58
   12186:	d1a9      	bne.n	120dc <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12188:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1218c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   12190:	9300      	str	r3, [sp, #0]
   12192:	aa0c      	add	r2, sp, #48	; 0x30
   12194:	ab04      	add	r3, sp, #16
   12196:	f009 f860 	bl	1b25a <encode_uint>
   1219a:	4682      	mov	sl, r0
			if (precision >= 0) {
   1219c:	f1b8 0f00 	cmp.w	r8, #0
   121a0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   121a4:	db0c      	blt.n	121c0 <cbvprintf+0x538>
				conv->flag_zero = false;
   121a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   121aa:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   121ae:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   121b2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   121b4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   121b8:	d902      	bls.n	121c0 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   121ba:	eba8 0303 	sub.w	r3, r8, r3
   121be:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   121c0:	4680      	mov	r8, r0
   121c2:	e03d      	b.n	12240 <cbvprintf+0x5b8>
   121c4:	3863      	subs	r0, #99	; 0x63
   121c6:	2815      	cmp	r0, #21
   121c8:	d888      	bhi.n	120dc <cbvprintf+0x454>
   121ca:	a101      	add	r1, pc, #4	; (adr r1, 121d0 <cbvprintf+0x548>)
   121cc:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   121d0:	00012251 	.word	0x00012251
   121d4:	000122b5 	.word	0x000122b5
   121d8:	000120dd 	.word	0x000120dd
   121dc:	000120dd 	.word	0x000120dd
   121e0:	000120dd 	.word	0x000120dd
   121e4:	000120dd 	.word	0x000120dd
   121e8:	000122b5 	.word	0x000122b5
   121ec:	000120dd 	.word	0x000120dd
   121f0:	000120dd 	.word	0x000120dd
   121f4:	000120dd 	.word	0x000120dd
   121f8:	000120dd 	.word	0x000120dd
   121fc:	00012313 	.word	0x00012313
   12200:	000122e1 	.word	0x000122e1
   12204:	000122e5 	.word	0x000122e5
   12208:	000120dd 	.word	0x000120dd
   1220c:	000120dd 	.word	0x000120dd
   12210:	00012229 	.word	0x00012229
   12214:	000120dd 	.word	0x000120dd
   12218:	000122e1 	.word	0x000122e1
   1221c:	000120dd 	.word	0x000120dd
   12220:	000120dd 	.word	0x000120dd
   12224:	000122e1 	.word	0x000122e1
			if (precision >= 0) {
   12228:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1222c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   12230:	db0a      	blt.n	12248 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   12232:	4641      	mov	r1, r8
   12234:	4650      	mov	r0, sl
   12236:	f009 f93d 	bl	1b4b4 <strnlen>
		char sign = 0;
   1223a:	2600      	movs	r6, #0
			bpe = bps + len;
   1223c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
   12240:	f1ba 0f00 	cmp.w	sl, #0
   12244:	d10c      	bne.n	12260 <cbvprintf+0x5d8>
   12246:	e749      	b.n	120dc <cbvprintf+0x454>
				len = strlen(bps);
   12248:	4650      	mov	r0, sl
   1224a:	f009 f92c 	bl	1b4a6 <strlen>
   1224e:	e7f4      	b.n	1223a <cbvprintf+0x5b2>
			break;
   12250:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
   12254:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12258:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
   1225c:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   12260:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   12264:	b106      	cbz	r6, 12268 <cbvprintf+0x5e0>
			nj_len += 1U;
   12266:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12268:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1226c:	06d0      	lsls	r0, r2, #27
   1226e:	d56b      	bpl.n	12348 <cbvprintf+0x6c0>
			nj_len += 2U;
   12270:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   12272:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   12274:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   12276:	bf48      	it	mi
   12278:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   1227a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1227c:	bf48      	it	mi
   1227e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   12280:	f1b9 0f00 	cmp.w	r9, #0
   12284:	dd79      	ble.n	1237a <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   12286:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   1228a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   1228e:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12292:	9303      	str	r3, [sp, #12]
   12294:	0753      	lsls	r3, r2, #29
   12296:	d470      	bmi.n	1237a <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   12298:	0650      	lsls	r0, r2, #25
   1229a:	d564      	bpl.n	12366 <cbvprintf+0x6de>
					if (sign != 0) {
   1229c:	b146      	cbz	r6, 122b0 <cbvprintf+0x628>
						OUTC(sign);
   1229e:	4659      	mov	r1, fp
   122a0:	4630      	mov	r0, r6
   122a2:	9b02      	ldr	r3, [sp, #8]
   122a4:	4798      	blx	r3
   122a6:	2800      	cmp	r0, #0
   122a8:	db5a      	blt.n	12360 <cbvprintf+0x6d8>
						sign = 0;
   122aa:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   122ac:	3501      	adds	r5, #1
						sign = 0;
   122ae:	461e      	mov	r6, r3
					pad = '0';
   122b0:	2330      	movs	r3, #48	; 0x30
   122b2:	e059      	b.n	12368 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   122b4:	071e      	lsls	r6, r3, #28
   122b6:	d411      	bmi.n	122dc <cbvprintf+0x654>
				sign = ' ';
   122b8:	f013 0610 	ands.w	r6, r3, #16
   122bc:	bf18      	it	ne
   122be:	2620      	movne	r6, #32
			sint = value->sint;
   122c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   122c4:	2a00      	cmp	r2, #0
   122c6:	f173 0100 	sbcs.w	r1, r3, #0
   122ca:	f6bf af5d 	bge.w	12188 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   122ce:	4252      	negs	r2, r2
   122d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   122d4:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   122d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   122da:	e755      	b.n	12188 <cbvprintf+0x500>
				sign = '+';
   122dc:	262b      	movs	r6, #43	; 0x2b
   122de:	e7ef      	b.n	122c0 <cbvprintf+0x638>
		switch (conv->specifier) {
   122e0:	2600      	movs	r6, #0
   122e2:	e751      	b.n	12188 <cbvprintf+0x500>
			if (value->ptr != NULL) {
   122e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   122e6:	b348      	cbz	r0, 1233c <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   122e8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   122ec:	9300      	str	r3, [sp, #0]
   122ee:	2100      	movs	r1, #0
   122f0:	ab04      	add	r3, sp, #16
   122f2:	aa0c      	add	r2, sp, #48	; 0x30
   122f4:	f008 ffb1 	bl	1b25a <encode_uint>
				conv->altform_0c = true;
   122f8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
   122fc:	4682      	mov	sl, r0
				conv->altform_0c = true;
   122fe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12302:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12306:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1230a:	2600      	movs	r6, #0
				conv->altform_0c = true;
   1230c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
   12310:	e744      	b.n	1219c <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   12312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   12314:	2a07      	cmp	r2, #7
   12316:	f63f aee1 	bhi.w	120dc <cbvprintf+0x454>
   1231a:	e8df f002 	tbb	[pc, r2]
   1231e:	040d      	.short	0x040d
   12320:	08080d06 	.word	0x08080d06
   12324:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   12326:	701d      	strb	r5, [r3, #0]
		break;
   12328:	e6d8      	b.n	120dc <cbvprintf+0x454>
		*(short *)dp = (short)count;
   1232a:	801d      	strh	r5, [r3, #0]
		break;
   1232c:	e6d6      	b.n	120dc <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   1232e:	4628      	mov	r0, r5
   12330:	17e9      	asrs	r1, r5, #31
   12332:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   12336:	e6d1      	b.n	120dc <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12338:	601d      	str	r5, [r3, #0]
		break;
   1233a:	e6cf      	b.n	120dc <cbvprintf+0x454>
			bpe = bps + 5;
   1233c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 12404 <cbvprintf+0x77c>
   12340:	4606      	mov	r6, r0
			bps = "(nil)";
   12342:	f1a8 0a05 	sub.w	sl, r8, #5
   12346:	e78b      	b.n	12260 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   12348:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1234a:	bf48      	it	mi
   1234c:	3301      	addmi	r3, #1
   1234e:	e790      	b.n	12272 <cbvprintf+0x5ea>
					OUTC(pad);
   12350:	4618      	mov	r0, r3
   12352:	9303      	str	r3, [sp, #12]
   12354:	4659      	mov	r1, fp
   12356:	9b02      	ldr	r3, [sp, #8]
   12358:	4798      	blx	r3
   1235a:	2800      	cmp	r0, #0
   1235c:	9b03      	ldr	r3, [sp, #12]
   1235e:	da04      	bge.n	1236a <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   12360:	b011      	add	sp, #68	; 0x44
   12362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12366:	2320      	movs	r3, #32
   12368:	444d      	add	r5, r9
   1236a:	464a      	mov	r2, r9
				while (width-- > 0) {
   1236c:	2a00      	cmp	r2, #0
   1236e:	eba5 0109 	sub.w	r1, r5, r9
   12372:	f109 39ff 	add.w	r9, r9, #4294967295
   12376:	dceb      	bgt.n	12350 <cbvprintf+0x6c8>
   12378:	460d      	mov	r5, r1
		if (sign != 0) {
   1237a:	b136      	cbz	r6, 1238a <cbvprintf+0x702>
			OUTC(sign);
   1237c:	4659      	mov	r1, fp
   1237e:	4630      	mov	r0, r6
   12380:	9b02      	ldr	r3, [sp, #8]
   12382:	4798      	blx	r3
   12384:	2800      	cmp	r0, #0
   12386:	dbeb      	blt.n	12360 <cbvprintf+0x6d8>
   12388:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1238a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1238e:	06d9      	lsls	r1, r3, #27
   12390:	d401      	bmi.n	12396 <cbvprintf+0x70e>
   12392:	071a      	lsls	r2, r3, #28
   12394:	d506      	bpl.n	123a4 <cbvprintf+0x71c>
				OUTC('0');
   12396:	4659      	mov	r1, fp
   12398:	2030      	movs	r0, #48	; 0x30
   1239a:	9b02      	ldr	r3, [sp, #8]
   1239c:	4798      	blx	r3
   1239e:	2800      	cmp	r0, #0
   123a0:	dbde      	blt.n	12360 <cbvprintf+0x6d8>
   123a2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   123a4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   123a8:	06db      	lsls	r3, r3, #27
   123aa:	d507      	bpl.n	123bc <cbvprintf+0x734>
				OUTC(conv->specifier);
   123ac:	4659      	mov	r1, fp
   123ae:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   123b2:	9b02      	ldr	r3, [sp, #8]
   123b4:	4798      	blx	r3
   123b6:	2800      	cmp	r0, #0
   123b8:	dbd2      	blt.n	12360 <cbvprintf+0x6d8>
   123ba:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   123bc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   123be:	442e      	add	r6, r5
   123c0:	1b73      	subs	r3, r6, r5
   123c2:	2b00      	cmp	r3, #0
   123c4:	dc16      	bgt.n	123f4 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   123c6:	4643      	mov	r3, r8
   123c8:	4652      	mov	r2, sl
   123ca:	4659      	mov	r1, fp
   123cc:	9802      	ldr	r0, [sp, #8]
   123ce:	f008 ff8f 	bl	1b2f0 <outs>
   123d2:	2800      	cmp	r0, #0
   123d4:	dbc4      	blt.n	12360 <cbvprintf+0x6d8>
   123d6:	4405      	add	r5, r0
		while (width > 0) {
   123d8:	44a9      	add	r9, r5
   123da:	eba9 0305 	sub.w	r3, r9, r5
   123de:	2b00      	cmp	r3, #0
   123e0:	f77f ae7c 	ble.w	120dc <cbvprintf+0x454>
			OUTC(' ');
   123e4:	4659      	mov	r1, fp
   123e6:	2020      	movs	r0, #32
   123e8:	9b02      	ldr	r3, [sp, #8]
   123ea:	4798      	blx	r3
   123ec:	2800      	cmp	r0, #0
   123ee:	dbb7      	blt.n	12360 <cbvprintf+0x6d8>
   123f0:	3501      	adds	r5, #1
			--width;
   123f2:	e7f2      	b.n	123da <cbvprintf+0x752>
				OUTC('0');
   123f4:	4659      	mov	r1, fp
   123f6:	2030      	movs	r0, #48	; 0x30
   123f8:	9b02      	ldr	r3, [sp, #8]
   123fa:	4798      	blx	r3
   123fc:	2800      	cmp	r0, #0
   123fe:	dbaf      	blt.n	12360 <cbvprintf+0x6d8>
   12400:	3501      	adds	r5, #1
   12402:	e7dd      	b.n	123c0 <cbvprintf+0x738>
   12404:	0001cb1f 	.word	0x0001cb1f

00012408 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   12408:	f04f 0220 	mov.w	r2, #32
   1240c:	f3ef 8311 	mrs	r3, BASEPRI
   12410:	f382 8812 	msr	BASEPRI_MAX, r2
   12414:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12418:	2101      	movs	r1, #1
   1241a:	4a04      	ldr	r2, [pc, #16]	; (1242c <nordicsemi_nrf91_init+0x24>)
   1241c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   12420:	f383 8811 	msr	BASEPRI, r3
   12424:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12428:	2000      	movs	r0, #0
   1242a:	4770      	bx	lr
   1242c:	40039000 	.word	0x40039000

00012430 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12430:	b120      	cbz	r0, 1243c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12432:	4b03      	ldr	r3, [pc, #12]	; (12440 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12434:	0180      	lsls	r0, r0, #6
   12436:	f043 0301 	orr.w	r3, r3, #1
   1243a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1243c:	4770      	bx	lr
   1243e:	bf00      	nop
   12440:	0001c3c0 	.word	0x0001c3c0

00012444 <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
   12444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (k_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
   12448:	4b12      	ldr	r3, [pc, #72]	; (12494 <log_generic+0x50>)
{
   1244a:	b085      	sub	sp, #20
		uint32_t timestamp = timestamp_func();
   1244c:	681b      	ldr	r3, [r3, #0]
{
   1244e:	4681      	mov	r9, r0
   12450:	468a      	mov	sl, r1
   12452:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
   12454:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   12456:	2600      	movs	r6, #0
		uint32_t timestamp = timestamp_func();
   12458:	4680      	mov	r8, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1245a:	4c0f      	ldr	r4, [pc, #60]	; (12498 <log_generic+0x54>)
   1245c:	4d0f      	ldr	r5, [pc, #60]	; (1249c <log_generic+0x58>)
   1245e:	1b2d      	subs	r5, r5, r4
   12460:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   12462:	42b5      	cmp	r5, r6
   12464:	dc02      	bgt.n	1246c <log_generic+0x28>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
   12466:	b005      	add	sp, #20
   12468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend) && runtime_ok) {
   1246c:	4620      	mov	r0, r4
   1246e:	f008 ff7b 	bl	1b368 <log_backend_is_active>
   12472:	b160      	cbz	r0, 1248e <log_generic+0x4a>
	if (backend->api->put_sync_string) {
   12474:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
   12476:	9703      	str	r7, [sp, #12]
   12478:	f8d3 b008 	ldr.w	fp, [r3, #8]
   1247c:	f1bb 0f00 	cmp.w	fp, #0
   12480:	d005      	beq.n	1248e <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
   12482:	4653      	mov	r3, sl
   12484:	4642      	mov	r2, r8
   12486:	4649      	mov	r1, r9
   12488:	4620      	mov	r0, r4
   1248a:	9700      	str	r7, [sp, #0]
   1248c:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   1248e:	3601      	adds	r6, #1
   12490:	3410      	adds	r4, #16
   12492:	e7e6      	b.n	12462 <log_generic+0x1e>
   12494:	2000c5dc 	.word	0x2000c5dc
   12498:	0001c370 	.word	0x0001c370
   1249c:	0001c380 	.word	0x0001c380

000124a0 <log_hexdump_sync>:
	va_end(ap);
}

void log_hexdump_sync(struct log_msg_ids src_level, const char *metadata,
		      const void *data, uint32_t len)
{
   124a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124a4:	469a      	mov	sl, r3
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_hexdump(metadata, (const uint8_t *)data, len,
				     src_level);
	} else {
		struct log_backend const *backend;
		log_timestamp_t timestamp = timestamp_func();
   124a6:	4b14      	ldr	r3, [pc, #80]	; (124f8 <log_hexdump_sync+0x58>)
{
   124a8:	b085      	sub	sp, #20
		log_timestamp_t timestamp = timestamp_func();
   124aa:	681b      	ldr	r3, [r3, #0]
{
   124ac:	4607      	mov	r7, r0
   124ae:	4688      	mov	r8, r1
   124b0:	9203      	str	r2, [sp, #12]
		log_timestamp_t timestamp = timestamp_func();
   124b2:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   124b4:	2500      	movs	r5, #0
		log_timestamp_t timestamp = timestamp_func();
   124b6:	4606      	mov	r6, r0
	return __log_backends_end - __log_backends_start;
   124b8:	4c10      	ldr	r4, [pc, #64]	; (124fc <log_hexdump_sync+0x5c>)
   124ba:	4b11      	ldr	r3, [pc, #68]	; (12500 <log_hexdump_sync+0x60>)
   124bc:	1b1b      	subs	r3, r3, r4
   124be:	ea4f 1923 	mov.w	r9, r3, asr #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   124c2:	454d      	cmp	r5, r9
   124c4:	db02      	blt.n	124cc <log_hexdump_sync+0x2c>
					backend, src_level, timestamp, metadata,
					(const uint8_t *)data, len);
			}
		}
	}
}
   124c6:	b005      	add	sp, #20
   124c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend) && runtime_ok) {
   124cc:	4620      	mov	r0, r4
   124ce:	f008 ff4b 	bl	1b368 <log_backend_is_active>
   124d2:	b170      	cbz	r0, 124f2 <log_hexdump_sync+0x52>
	if (backend->api->put_sync_hexdump) {
   124d4:	6823      	ldr	r3, [r4, #0]
   124d6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
   124da:	f1bb 0f00 	cmp.w	fp, #0
   124de:	d008      	beq.n	124f2 <log_hexdump_sync+0x52>
		backend->api->put_sync_hexdump(backend, src_level, timestamp,
   124e0:	9b03      	ldr	r3, [sp, #12]
   124e2:	4632      	mov	r2, r6
   124e4:	9300      	str	r3, [sp, #0]
   124e6:	4639      	mov	r1, r7
   124e8:	4643      	mov	r3, r8
   124ea:	4620      	mov	r0, r4
   124ec:	f8cd a004 	str.w	sl, [sp, #4]
   124f0:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   124f2:	3501      	adds	r5, #1
   124f4:	3410      	adds	r4, #16
   124f6:	e7e4      	b.n	124c2 <log_hexdump_sync+0x22>
   124f8:	2000c5dc 	.word	0x2000c5dc
   124fc:	0001c370 	.word	0x0001c370
   12500:	0001c380 	.word	0x0001c380

00012504 <log_core_init>:
void log_core_init(void)
{
	uint32_t freq;
	log_timestamp_get_t _timestamp_func;

	panic_mode = false;
   12504:	2300      	movs	r3, #0
   12506:	4a05      	ldr	r2, [pc, #20]	; (1251c <log_core_init+0x18>)
	if (timestamp_getter == NULL) {
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
	log_output_timestamp_freq_set(freq);
   12508:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	panic_mode = false;
   1250c:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1250e:	4a04      	ldr	r2, [pc, #16]	; (12520 <log_core_init+0x1c>)
   12510:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   12512:	4b04      	ldr	r3, [pc, #16]	; (12524 <log_core_init+0x20>)
   12514:	4a04      	ldr	r2, [pc, #16]	; (12528 <log_core_init+0x24>)
   12516:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   12518:	f000 ba4a 	b.w	129b0 <log_output_timestamp_freq_set>
   1251c:	2000d5d8 	.word	0x2000d5d8
   12520:	2000cfd4 	.word	0x2000cfd4
   12524:	2000c5dc 	.word	0x2000c5dc
   12528:	0001b36f 	.word	0x0001b36f

0001252c <log_init>:
	return __log_backends_end - __log_backends_start;
   1252c:	4b17      	ldr	r3, [pc, #92]	; (1258c <log_init+0x60>)
   1252e:	4a18      	ldr	r2, [pc, #96]	; (12590 <log_init+0x64>)
{
   12530:	b570      	push	{r4, r5, r6, lr}
   12532:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   12534:	2b9f      	cmp	r3, #159	; 0x9f
   12536:	ea4f 1623 	mov.w	r6, r3, asr #4
   1253a:	d90a      	bls.n	12552 <log_init+0x26>
   1253c:	4915      	ldr	r1, [pc, #84]	; (12594 <log_init+0x68>)
   1253e:	4816      	ldr	r0, [pc, #88]	; (12598 <log_init+0x6c>)
   12540:	f240 224a 	movw	r2, #586	; 0x24a
   12544:	f008 fd06 	bl	1af54 <printk>
   12548:	f240 214a 	movw	r1, #586	; 0x24a
   1254c:	4811      	ldr	r0, [pc, #68]	; (12594 <log_init+0x68>)
   1254e:	f008 fee5 	bl	1b31c <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12552:	4b12      	ldr	r3, [pc, #72]	; (1259c <log_init+0x70>)
   12554:	e8d3 5fef 	ldaex	r5, [r3]
   12558:	1c6a      	adds	r2, r5, #1
   1255a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1255e:	2900      	cmp	r1, #0
   12560:	d1f8      	bne.n	12554 <log_init+0x28>
	if (atomic_inc(&initialized) != 0) {
   12562:	b915      	cbnz	r5, 1256a <log_init+0x3e>
   12564:	4c0a      	ldr	r4, [pc, #40]	; (12590 <log_init+0x64>)
	for (i = 0; i < log_backend_count_get(); i++) {
   12566:	42b5      	cmp	r5, r6
   12568:	db00      	blt.n	1256c <log_init+0x40>
}
   1256a:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1256c:	7b23      	ldrb	r3, [r4, #12]
   1256e:	b153      	cbz	r3, 12586 <log_init+0x5a>
			if (backend->api->init != NULL) {
   12570:	6823      	ldr	r3, [r4, #0]
   12572:	699b      	ldr	r3, [r3, #24]
   12574:	b10b      	cbz	r3, 1257a <log_init+0x4e>
				backend->api->init(backend);
   12576:	4620      	mov	r0, r4
   12578:	4798      	blx	r3
			log_backend_enable(backend,
   1257a:	6863      	ldr	r3, [r4, #4]
   1257c:	2204      	movs	r2, #4
   1257e:	4620      	mov	r0, r4
   12580:	6819      	ldr	r1, [r3, #0]
   12582:	f000 f841 	bl	12608 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12586:	3501      	adds	r5, #1
   12588:	3410      	adds	r4, #16
   1258a:	e7ec      	b.n	12566 <log_init+0x3a>
   1258c:	0001c380 	.word	0x0001c380
   12590:	0001c370 	.word	0x0001c370
   12594:	0001cb24 	.word	0x0001cb24
   12598:	0001c625 	.word	0x0001c625
   1259c:	2000cfd8 	.word	0x2000cfd8

000125a0 <z_impl_log_panic>:

	return 0;
}

void z_impl_log_panic(void)
{
   125a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct log_backend const *backend;

	if (panic_mode) {
   125a2:	4f0c      	ldr	r7, [pc, #48]	; (125d4 <z_impl_log_panic+0x34>)
   125a4:	783d      	ldrb	r5, [r7, #0]
   125a6:	b94d      	cbnz	r5, 125bc <z_impl_log_panic+0x1c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	log_init();
   125a8:	f7ff ffc0 	bl	1252c <log_init>
   125ac:	4c0a      	ldr	r4, [pc, #40]	; (125d8 <z_impl_log_panic+0x38>)
   125ae:	4e0b      	ldr	r6, [pc, #44]	; (125dc <z_impl_log_panic+0x3c>)
   125b0:	1b36      	subs	r6, r6, r4
   125b2:	1136      	asrs	r6, r6, #4

	for (int i = 0; i < log_backend_count_get(); i++) {
   125b4:	42b5      	cmp	r5, r6
   125b6:	db02      	blt.n	125be <z_impl_log_panic+0x1e>
		/* Flush */
		while (log_process(false) == true) {
		}
	}

	panic_mode = true;
   125b8:	2301      	movs	r3, #1
   125ba:	703b      	strb	r3, [r7, #0]
}
   125bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   125be:	4620      	mov	r0, r4
   125c0:	f008 fed2 	bl	1b368 <log_backend_is_active>
   125c4:	b118      	cbz	r0, 125ce <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   125c6:	6823      	ldr	r3, [r4, #0]
   125c8:	4620      	mov	r0, r4
   125ca:	695b      	ldr	r3, [r3, #20]
   125cc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   125ce:	3501      	adds	r5, #1
   125d0:	3410      	adds	r4, #16
   125d2:	e7ef      	b.n	125b4 <z_impl_log_panic+0x14>
   125d4:	2000d5d8 	.word	0x2000d5d8
   125d8:	0001c370 	.word	0x0001c370
   125dc:	0001c380 	.word	0x0001c380

000125e0 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   125e0:	2201      	movs	r2, #1
   125e2:	4b01      	ldr	r3, [pc, #4]	; (125e8 <z_log_notify_backend_enabled+0x8>)
   125e4:	701a      	strb	r2, [r3, #0]
}
   125e6:	4770      	bx	lr
   125e8:	2000d5d7 	.word	0x2000d5d7

000125ec <log_source_name_get>:
   125ec:	4a04      	ldr	r2, [pc, #16]	; (12600 <log_source_name_get+0x14>)
   125ee:	4b05      	ldr	r3, [pc, #20]	; (12604 <log_source_name_get+0x18>)
   125f0:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   125f2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   125f6:	bf34      	ite	cc
   125f8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   125fc:	2000      	movcs	r0, #0
}
   125fe:	4770      	bx	lr
   12600:	0001c308 	.word	0x0001c308
   12604:	0001c370 	.word	0x0001c370

00012608 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   12608:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1260a:	4c0d      	ldr	r4, [pc, #52]	; (12640 <log_backend_enable+0x38>)
{
   1260c:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   1260e:	1b04      	subs	r4, r0, r4
   12610:	1124      	asrs	r4, r4, #4
   12612:	3401      	adds	r4, #1
{
   12614:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   12616:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   12618:	b940      	cbnz	r0, 1262c <log_backend_enable+0x24>
   1261a:	490a      	ldr	r1, [pc, #40]	; (12644 <log_backend_enable+0x3c>)
   1261c:	480a      	ldr	r0, [pc, #40]	; (12648 <log_backend_enable+0x40>)
   1261e:	22d1      	movs	r2, #209	; 0xd1
   12620:	f008 fc98 	bl	1af54 <printk>
   12624:	21d1      	movs	r1, #209	; 0xd1
   12626:	4807      	ldr	r0, [pc, #28]	; (12644 <log_backend_enable+0x3c>)
   12628:	f008 fe78 	bl	1b31c <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   1262c:	2201      	movs	r2, #1
	backend->cb->id = id;
   1262e:	686b      	ldr	r3, [r5, #4]
   12630:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
   12632:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   12634:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   12636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
   1263a:	f7ff bfd1 	b.w	125e0 <z_log_notify_backend_enabled>
   1263e:	bf00      	nop
   12640:	0001c370 	.word	0x0001c370
   12644:	0001cb82 	.word	0x0001cb82
   12648:	0001c625 	.word	0x0001c625

0001264c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1264c:	b40e      	push	{r1, r2, r3}
   1264e:	b503      	push	{r0, r1, lr}
   12650:	ab03      	add	r3, sp, #12
   12652:	f853 2b04 	ldr.w	r2, [r3], #4
   12656:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12658:	4804      	ldr	r0, [pc, #16]	; (1266c <print_formatted+0x20>)
	va_start(args, fmt);
   1265a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1265c:	f7ff fb14 	bl	11c88 <cbvprintf>
	va_end(args);

	return length;
}
   12660:	b002      	add	sp, #8
   12662:	f85d eb04 	ldr.w	lr, [sp], #4
   12666:	b003      	add	sp, #12
   12668:	4770      	bx	lr
   1266a:	bf00      	nop
   1266c:	0001b3af 	.word	0x0001b3af

00012670 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   12670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12674:	461f      	mov	r7, r3
   12676:	b087      	sub	sp, #28
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   12678:	f001 0301 	and.w	r3, r1, #1
{
   1267c:	9205      	str	r2, [sp, #20]
   1267e:	4606      	mov	r6, r0
   12680:	4688      	mov	r8, r1
   12682:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   12686:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1268a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1268e:	9304      	str	r3, [sp, #16]
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   12690:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   12694:	f008 fe89 	bl	1b3aa <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   12698:	4602      	mov	r2, r0
   1269a:	2800      	cmp	r0, #0
   1269c:	d044      	beq.n	12728 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   1269e:	4630      	mov	r0, r6
   126a0:	4938      	ldr	r1, [pc, #224]	; (12784 <prefix_print+0x114>)
   126a2:	f7ff ffd3 	bl	1264c <print_formatted>
   126a6:	4604      	mov	r4, r0
	}

	if (stamp) {
   126a8:	f1bb 0f00 	cmp.w	fp, #0
   126ac:	d008      	beq.n	126c0 <prefix_print+0x50>
	if (!format) {
   126ae:	f018 0f44 	tst.w	r8, #68	; 0x44
   126b2:	d13b      	bne.n	1272c <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   126b4:	463a      	mov	r2, r7
   126b6:	4630      	mov	r0, r6
   126b8:	4933      	ldr	r1, [pc, #204]	; (12788 <prefix_print+0x118>)
   126ba:	f7ff ffc7 	bl	1264c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   126be:	4404      	add	r4, r0
	if (color) {
   126c0:	9b04      	ldr	r3, [sp, #16]
   126c2:	b153      	cbz	r3, 126da <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   126c4:	4b31      	ldr	r3, [pc, #196]	; (1278c <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   126c6:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   126c8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   126cc:	4b30      	ldr	r3, [pc, #192]	; (12790 <prefix_print+0x120>)
   126ce:	4931      	ldr	r1, [pc, #196]	; (12794 <prefix_print+0x124>)
   126d0:	2a00      	cmp	r2, #0
   126d2:	bf08      	it	eq
   126d4:	461a      	moveq	r2, r3
   126d6:	f7ff ffb9 	bl	1264c <print_formatted>
	if (level_on) {
   126da:	b13d      	cbz	r5, 126ec <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   126dc:	4b2e      	ldr	r3, [pc, #184]	; (12798 <prefix_print+0x128>)
   126de:	4630      	mov	r0, r6
   126e0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   126e4:	492d      	ldr	r1, [pc, #180]	; (1279c <prefix_print+0x12c>)
   126e6:	f7ff ffb1 	bl	1264c <print_formatted>
   126ea:	4605      	mov	r5, r0
	if (source_id >= 0) {
   126ec:	f1ba 0f00 	cmp.w	sl, #0
   126f0:	db16      	blt.n	12720 <prefix_print+0xb0>
		total += print_formatted(output,
   126f2:	9b05      	ldr	r3, [sp, #20]
   126f4:	2b00      	cmp	r3, #0
   126f6:	d043      	beq.n	12780 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   126f8:	2301      	movs	r3, #1
   126fa:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   126fe:	4b28      	ldr	r3, [pc, #160]	; (127a0 <prefix_print+0x130>)
   12700:	f019 0f10 	tst.w	r9, #16
   12704:	4f27      	ldr	r7, [pc, #156]	; (127a4 <prefix_print+0x134>)
   12706:	bf18      	it	ne
   12708:	461f      	movne	r7, r3
   1270a:	4651      	mov	r1, sl
   1270c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   12710:	f7ff ff6c 	bl	125ec <log_source_name_get>
   12714:	4639      	mov	r1, r7
   12716:	4602      	mov	r2, r0
   12718:	4630      	mov	r0, r6
   1271a:	f7ff ff97 	bl	1264c <print_formatted>
   1271e:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   12720:	1928      	adds	r0, r5, r4
   12722:	b007      	add	sp, #28
   12724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   12728:	4604      	mov	r4, r0
   1272a:	e7bd      	b.n	126a8 <prefix_print+0x38>
	} else if (freq != 0U) {
   1272c:	4b1e      	ldr	r3, [pc, #120]	; (127a8 <prefix_print+0x138>)
   1272e:	6818      	ldr	r0, [r3, #0]
   12730:	2800      	cmp	r0, #0
   12732:	d0c4      	beq.n	126be <prefix_print+0x4e>
		timestamp /= timestamp_div;
   12734:	4b1d      	ldr	r3, [pc, #116]	; (127ac <prefix_print+0x13c>)
   12736:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   1273a:	6819      	ldr	r1, [r3, #0]
		mins = seconds / 60U;
   1273c:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		timestamp /= timestamp_div;
   12740:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   12744:	fbb7 f1f0 	udiv	r1, r7, r0
		seconds -= hours * 3600U;
   12748:	fbb1 f2fc 	udiv	r2, r1, ip
		remainder = timestamp % freq;
   1274c:	fb00 7711 	mls	r7, r0, r1, r7
   12750:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   12754:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12758:	434f      	muls	r7, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1275a:	fbb7 f8f0 	udiv	r8, r7, r0
   1275e:	fb00 7718 	mls	r7, r0, r8, r7
		mins = seconds / 60U;
   12762:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12766:	434f      	muls	r7, r1
   12768:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   1276c:	fb0e c113 	mls	r1, lr, r3, ip
   12770:	e9cd 8001 	strd	r8, r0, [sp, #4]
   12774:	9100      	str	r1, [sp, #0]
   12776:	4630      	mov	r0, r6
   12778:	490d      	ldr	r1, [pc, #52]	; (127b0 <prefix_print+0x140>)
   1277a:	f7ff ff67 	bl	1264c <print_formatted>
   1277e:	e79e      	b.n	126be <prefix_print+0x4e>
		total += print_formatted(output,
   12780:	4f08      	ldr	r7, [pc, #32]	; (127a4 <prefix_print+0x134>)
   12782:	e7c2      	b.n	1270a <prefix_print+0x9a>
   12784:	0001cbc1 	.word	0x0001cbc1
   12788:	0001cbc5 	.word	0x0001cbc5
   1278c:	0001c3c8 	.word	0x0001c3c8
   12790:	0001cbb3 	.word	0x0001cbb3
   12794:	0001c730 	.word	0x0001c730
   12798:	0001c3dc 	.word	0x0001c3dc
   1279c:	0001cbea 	.word	0x0001cbea
   127a0:	0001cbbd 	.word	0x0001cbbd
   127a4:	0001cbb8 	.word	0x0001cbb8
   127a8:	2000cfdc 	.word	0x2000cfdc
   127ac:	2000cfe0 	.word	0x2000cfe0
   127b0:	0001cbce 	.word	0x0001cbce

000127b4 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   127b4:	b538      	push	{r3, r4, r5, lr}
   127b6:	460c      	mov	r4, r1
	if (color) {
   127b8:	07e1      	lsls	r1, r4, #31
{
   127ba:	4605      	mov	r5, r0
	if (color) {
   127bc:	d503      	bpl.n	127c6 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   127be:	4a08      	ldr	r2, [pc, #32]	; (127e0 <postfix_print+0x2c>)
   127c0:	4908      	ldr	r1, [pc, #32]	; (127e4 <postfix_print+0x30>)
   127c2:	f7ff ff43 	bl	1264c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   127c6:	06e2      	lsls	r2, r4, #27
   127c8:	d408      	bmi.n	127dc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   127ca:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   127cc:	4628      	mov	r0, r5
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   127ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   127d2:	bf4c      	ite	mi
   127d4:	4904      	ldrmi	r1, [pc, #16]	; (127e8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   127d6:	4905      	ldrpl	r1, [pc, #20]	; (127ec <postfix_print+0x38>)
   127d8:	f7ff bf38 	b.w	1264c <print_formatted>
}
   127dc:	bd38      	pop	{r3, r4, r5, pc}
   127de:	bf00      	nop
   127e0:	0001cbb3 	.word	0x0001cbb3
   127e4:	0001c730 	.word	0x0001c730
   127e8:	0001d5a3 	.word	0x0001d5a3
   127ec:	0001d5a2 	.word	0x0001d5a2

000127f0 <hexdump_line_print>:
{
   127f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127f4:	461d      	mov	r5, r3
   127f6:	9b08      	ldr	r3, [sp, #32]
   127f8:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   127fa:	06da      	lsls	r2, r3, #27
{
   127fc:	4604      	mov	r4, r0
   127fe:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12800:	d405      	bmi.n	1280e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12802:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   12804:	bf4c      	ite	mi
   12806:	492a      	ldrmi	r1, [pc, #168]	; (128b0 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   12808:	492a      	ldrpl	r1, [pc, #168]	; (128b4 <hexdump_line_print+0xc4>)
   1280a:	f7ff ff1f 	bl	1264c <print_formatted>
{
   1280e:	f04f 0800 	mov.w	r8, #0
		print_formatted(output, " ");
   12812:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 128bc <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   12816:	45a8      	cmp	r8, r5
   12818:	db2a      	blt.n	12870 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1281a:	2500      	movs	r5, #0
			print_formatted(output, "   ");
   1281c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 128c0 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
   12820:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 128c4 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
   12824:	f8df a094 	ldr.w	sl, [pc, #148]	; 128bc <hexdump_line_print+0xcc>
		if (i < length) {
   12828:	42bd      	cmp	r5, r7
   1282a:	d22f      	bcs.n	1288c <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   1282c:	4649      	mov	r1, r9
   1282e:	4620      	mov	r0, r4
   12830:	5d72      	ldrb	r2, [r6, r5]
   12832:	f7ff ff0b 	bl	1264c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12836:	3501      	adds	r5, #1
   12838:	2d10      	cmp	r5, #16
   1283a:	d120      	bne.n	1287e <hexdump_line_print+0x8e>
	print_formatted(output, "|");
   1283c:	4620      	mov	r0, r4
   1283e:	491e      	ldr	r1, [pc, #120]	; (128b8 <hexdump_line_print+0xc8>)
   12840:	f7ff ff04 	bl	1264c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12844:	2500      	movs	r5, #0
			print_formatted(output, " ");
   12846:	f8df 8074 	ldr.w	r8, [pc, #116]	; 128bc <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
   1284a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 128c8 <hexdump_line_print+0xd8>
		if (i < length) {
   1284e:	42af      	cmp	r7, r5
   12850:	d928      	bls.n	128a4 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   12852:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   12854:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
   12856:	f1a2 0320 	sub.w	r3, r2, #32
   1285a:	2b5f      	cmp	r3, #95	; 0x5f
   1285c:	bf28      	it	cs
   1285e:	222e      	movcs	r2, #46	; 0x2e
   12860:	4620      	mov	r0, r4
   12862:	f7ff fef3 	bl	1264c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12866:	3501      	adds	r5, #1
   12868:	2d10      	cmp	r5, #16
   1286a:	d114      	bne.n	12896 <hexdump_line_print+0xa6>
}
   1286c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   12870:	4649      	mov	r1, r9
   12872:	4620      	mov	r0, r4
   12874:	f7ff feea 	bl	1264c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   12878:	f108 0801 	add.w	r8, r8, #1
   1287c:	e7cb      	b.n	12816 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   1287e:	076a      	lsls	r2, r5, #29
   12880:	d1d2      	bne.n	12828 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   12882:	4651      	mov	r1, sl
   12884:	4620      	mov	r0, r4
   12886:	f7ff fee1 	bl	1264c <print_formatted>
   1288a:	e7cd      	b.n	12828 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   1288c:	4641      	mov	r1, r8
   1288e:	4620      	mov	r0, r4
   12890:	f7ff fedc 	bl	1264c <print_formatted>
   12894:	e7cf      	b.n	12836 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   12896:	076b      	lsls	r3, r5, #29
   12898:	d1d9      	bne.n	1284e <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   1289a:	4641      	mov	r1, r8
   1289c:	4620      	mov	r0, r4
   1289e:	f7ff fed5 	bl	1264c <print_formatted>
   128a2:	e7d4      	b.n	1284e <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   128a4:	4641      	mov	r1, r8
   128a6:	4620      	mov	r0, r4
   128a8:	f7ff fed0 	bl	1264c <print_formatted>
   128ac:	e7db      	b.n	12866 <hexdump_line_print+0x76>
   128ae:	bf00      	nop
   128b0:	0001d5a3 	.word	0x0001d5a3
   128b4:	0001d5a2 	.word	0x0001d5a2
   128b8:	0001cbfa 	.word	0x0001cbfa
   128bc:	0001cbf8 	.word	0x0001cbf8
   128c0:	0001cbf6 	.word	0x0001cbf6
   128c4:	0001cbf0 	.word	0x0001cbf0
   128c8:	0001cbfc 	.word	0x0001cbfc

000128cc <log_output_string>:
}

void log_output_string(const struct log_output *output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
   128cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   128d0:	f011 0607 	ands.w	r6, r1, #7
{
   128d4:	4605      	mov	r5, r0
   128d6:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   128da:	461c      	mov	r4, r3
	if (!raw_string) {
   128dc:	d00b      	beq.n	128f6 <log_output_string+0x2a>
		prefix_print(output, flags, true, timestamp,
   128de:	f3c1 1389 	ubfx	r3, r1, #6, #10
   128e2:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   128e6:	e9cd 6100 	strd	r6, r1, [sp]
   128ea:	9302      	str	r3, [sp, #8]
   128ec:	4639      	mov	r1, r7
   128ee:	4613      	mov	r3, r2
   128f0:	2201      	movs	r2, #1
   128f2:	f7ff febd 	bl	12670 <prefix_print>
				level, domain_id, source_id);
	}

	length = cbvprintf(out_func, (void *)output, fmt, ap);
   128f6:	4643      	mov	r3, r8
   128f8:	4622      	mov	r2, r4
   128fa:	4629      	mov	r1, r5
   128fc:	480d      	ldr	r0, [pc, #52]	; (12934 <log_output_string+0x68>)
   128fe:	f7ff f9c3 	bl	11c88 <cbvprintf>

	(void)length;

	if (raw_string) {
   12902:	b98e      	cbnz	r6, 12928 <log_output_string+0x5c>
   12904:	3c01      	subs	r4, #1
	while (*fmt != '\0') {
   12906:	4633      	mov	r3, r6
   12908:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   1290c:	2e00      	cmp	r6, #0
   1290e:	d1fa      	bne.n	12906 <log_output_string+0x3a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   12910:	2b0a      	cmp	r3, #10
   12912:	d103      	bne.n	1291c <log_output_string+0x50>
			print_formatted(output, "\r");
   12914:	4628      	mov	r0, r5
   12916:	4908      	ldr	r1, [pc, #32]	; (12938 <log_output_string+0x6c>)
   12918:	f7ff fe98 	bl	1264c <print_formatted>
		}
	} else {
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   1291c:	4628      	mov	r0, r5
}
   1291e:	b004      	add	sp, #16
   12920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(output);
   12924:	f008 bd5c 	b.w	1b3e0 <log_output_flush>
		postfix_print(output, flags, level);
   12928:	4632      	mov	r2, r6
   1292a:	4639      	mov	r1, r7
   1292c:	4628      	mov	r0, r5
   1292e:	f7ff ff41 	bl	127b4 <postfix_print>
   12932:	e7f3      	b.n	1291c <log_output_string+0x50>
   12934:	0001b3af 	.word	0x0001b3af
   12938:	0001cc2e 	.word	0x0001cc2e

0001293c <log_output_hexdump>:

void log_output_hexdump(const struct log_output *output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
   1293c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   12940:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   12942:	4698      	mov	r8, r3
   12944:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(output, flags, true, timestamp,
   12948:	f3c1 1389 	ubfx	r3, r1, #6, #10
	uint8_t level = (uint8_t)src_level.level;
   1294c:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(output, flags, true, timestamp,
   12950:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   12954:	e9cd 9100 	strd	r9, r1, [sp]
   12958:	9302      	str	r3, [sp, #8]
   1295a:	4631      	mov	r1, r6
   1295c:	4613      	mov	r3, r2
   1295e:	2201      	movs	r2, #1
{
   12960:	4604      	mov	r4, r0
	prefix_offset = prefix_print(output, flags, true, timestamp,
   12962:	f7ff fe85 	bl	12670 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(output, "%s", metadata);
   12966:	4642      	mov	r2, r8
	prefix_offset = prefix_print(output, flags, true, timestamp,
   12968:	4682      	mov	sl, r0
	print_formatted(output, "%s", metadata);
   1296a:	4910      	ldr	r1, [pc, #64]	; (129ac <log_output_hexdump+0x70>)
   1296c:	4620      	mov	r0, r4
   1296e:	f7ff fe6d 	bl	1264c <print_formatted>

	while (length != 0U) {
   12972:	b955      	cbnz	r5, 1298a <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	}

	postfix_print(output, flags, level);
   12974:	4620      	mov	r0, r4
   12976:	464a      	mov	r2, r9
   12978:	4631      	mov	r1, r6
   1297a:	f7ff ff1b 	bl	127b4 <postfix_print>
	log_output_flush(output);
   1297e:	4620      	mov	r0, r4
}
   12980:	b004      	add	sp, #16
   12982:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
   12986:	f008 bd2b 	b.w	1b3e0 <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   1298a:	2d10      	cmp	r5, #16
   1298c:	46a8      	mov	r8, r5
   1298e:	bf28      	it	cs
   12990:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(output, data, part_len,
   12994:	4639      	mov	r1, r7
   12996:	4653      	mov	r3, sl
   12998:	4642      	mov	r2, r8
   1299a:	4620      	mov	r0, r4
   1299c:	9600      	str	r6, [sp, #0]
   1299e:	f7ff ff27 	bl	127f0 <hexdump_line_print>
		data += part_len;
   129a2:	4447      	add	r7, r8
		length -= part_len;
   129a4:	eba5 0508 	sub.w	r5, r5, r8
   129a8:	e7e3      	b.n	12972 <log_output_hexdump+0x36>
   129aa:	bf00      	nop
   129ac:	0001c730 	.word	0x0001c730

000129b0 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   129b0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   129b2:	2100      	movs	r1, #0
	timestamp_div = 1U;
   129b4:	4a07      	ldr	r2, [pc, #28]	; (129d4 <log_output_timestamp_freq_set+0x24>)
{
   129b6:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   129b8:	4c07      	ldr	r4, [pc, #28]	; (129d8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   129ba:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   129bc:	42a0      	cmp	r0, r4
   129be:	d804      	bhi.n	129ca <log_output_timestamp_freq_set+0x1a>
   129c0:	b101      	cbz	r1, 129c4 <log_output_timestamp_freq_set+0x14>
   129c2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   129c4:	4b05      	ldr	r3, [pc, #20]	; (129dc <log_output_timestamp_freq_set+0x2c>)
   129c6:	6018      	str	r0, [r3, #0]
}
   129c8:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   129ca:	2101      	movs	r1, #1
		frequency /= 2U;
   129cc:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   129ce:	005b      	lsls	r3, r3, #1
   129d0:	e7f4      	b.n	129bc <log_output_timestamp_freq_set+0xc>
   129d2:	bf00      	nop
   129d4:	2000cfe0 	.word	0x2000cfe0
   129d8:	000f4240 	.word	0x000f4240
   129dc:	2000cfdc 	.word	0x2000cfdc

000129e0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   129e0:	2201      	movs	r2, #1
   129e2:	4b01      	ldr	r3, [pc, #4]	; (129e8 <log_backend_rtt_init+0x8>)
   129e4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   129e6:	4770      	bx	lr
   129e8:	2000d5da 	.word	0x2000d5da

000129ec <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   129ec:	2201      	movs	r2, #1
   129ee:	4b02      	ldr	r3, [pc, #8]	; (129f8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   129f0:	4802      	ldr	r0, [pc, #8]	; (129fc <panic+0x10>)
   129f2:	701a      	strb	r2, [r3, #0]
   129f4:	f008 bcf4 	b.w	1b3e0 <log_output_flush>
   129f8:	2000d5db 	.word	0x2000d5db
   129fc:	0001c40c 	.word	0x0001c40c

00012a00 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
   12a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(output, src_level, timestamp,
   12a02:	200f      	movs	r0, #15
   12a04:	9002      	str	r0, [sp, #8]
   12a06:	9807      	ldr	r0, [sp, #28]
   12a08:	9001      	str	r0, [sp, #4]
   12a0a:	9806      	ldr	r0, [sp, #24]
   12a0c:	9000      	str	r0, [sp, #0]
   12a0e:	4803      	ldr	r0, [pc, #12]	; (12a1c <sync_hexdump+0x1c>)
   12a10:	f7ff ff94 	bl	1293c <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_rtt, flag, src_level,
				     timestamp, metadata, data, length);
}
   12a14:	b005      	add	sp, #20
   12a16:	f85d fb04 	ldr.w	pc, [sp], #4
   12a1a:	bf00      	nop
   12a1c:	0001c40c 	.word	0x0001c40c

00012a20 <sync_string>:
{
   12a20:	b507      	push	{r0, r1, r2, lr}
	log_output_string(output, src_level, timestamp, fmt, ap, flags);
   12a22:	200f      	movs	r0, #15
   12a24:	9001      	str	r0, [sp, #4]
   12a26:	9804      	ldr	r0, [sp, #16]
   12a28:	9000      	str	r0, [sp, #0]
   12a2a:	4803      	ldr	r0, [pc, #12]	; (12a38 <sync_string+0x18>)
   12a2c:	f7ff ff4e 	bl	128cc <log_output_string>
}
   12a30:	b003      	add	sp, #12
   12a32:	f85d fb04 	ldr.w	pc, [sp], #4
   12a36:	bf00      	nop
   12a38:	0001c40c 	.word	0x0001c40c

00012a3c <data_out_block_mode>:
{
   12a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a3e:	4607      	mov	r7, r0
   12a40:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   12a42:	2404      	movs	r4, #4
   12a44:	4d17      	ldr	r5, [pc, #92]	; (12aa4 <data_out_block_mode+0x68>)
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12a46:	4632      	mov	r2, r6
   12a48:	4639      	mov	r1, r7
   12a4a:	2000      	movs	r0, #0
   12a4c:	f004 f8b8 	bl	16bc0 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
   12a50:	b1c8      	cbz	r0, 12a86 <data_out_block_mode+0x4a>
	host_present = true;
   12a52:	2301      	movs	r3, #1
   12a54:	702b      	strb	r3, [r5, #0]
	return panic_mode;
   12a56:	4b14      	ldr	r3, [pc, #80]	; (12aa8 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
   12a58:	781b      	ldrb	r3, [r3, #0]
   12a5a:	b92b      	cbnz	r3, 12a68 <data_out_block_mode+0x2c>
}
   12a5c:	4630      	mov	r0, r6
   12a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
   12a60:	b95c      	cbnz	r4, 12a7a <data_out_block_mode+0x3e>
		host_present = false;
   12a62:	702c      	strb	r4, [r5, #0]
   12a64:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   12a68:	2000      	movs	r0, #0
   12a6a:	f004 f929 	bl	16cc0 <SEGGER_RTT_HasDataUp>
   12a6e:	2800      	cmp	r0, #0
   12a70:	d0f4      	beq.n	12a5c <data_out_block_mode+0x20>
   12a72:	782b      	ldrb	r3, [r5, #0]
   12a74:	2b00      	cmp	r3, #0
   12a76:	d1f3      	bne.n	12a60 <data_out_block_mode+0x24>
   12a78:	e7f0      	b.n	12a5c <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
   12a7a:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
   12a7c:	f241 3088 	movw	r0, #5000	; 0x1388
   12a80:	f009 fa68 	bl	1bf54 <z_impl_k_busy_wait>
}
   12a84:	e7f0      	b.n	12a68 <data_out_block_mode+0x2c>
		} else if (host_present) {
   12a86:	782b      	ldrb	r3, [r5, #0]
   12a88:	b113      	cbz	r3, 12a90 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
   12a8a:	3c01      	subs	r4, #1
   12a8c:	d104      	bne.n	12a98 <data_out_block_mode+0x5c>
		host_present = false;
   12a8e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   12a90:	782b      	ldrb	r3, [r5, #0]
   12a92:	2b00      	cmp	r3, #0
   12a94:	d1d7      	bne.n	12a46 <data_out_block_mode+0xa>
   12a96:	e7e1      	b.n	12a5c <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
   12a98:	f241 3088 	movw	r0, #5000	; 0x1388
   12a9c:	f009 fa5a 	bl	1bf54 <z_impl_k_busy_wait>
}
   12aa0:	e7f6      	b.n	12a90 <data_out_block_mode+0x54>
   12aa2:	bf00      	nop
   12aa4:	2000d5da 	.word	0x2000d5da
   12aa8:	2000d5db 	.word	0x2000d5db

00012aac <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12ab0:	4605      	mov	r5, r0
	__asm__ volatile(
   12ab2:	f04f 0320 	mov.w	r3, #32
   12ab6:	f3ef 8611 	mrs	r6, BASEPRI
   12aba:	f383 8812 	msr	BASEPRI_MAX, r3
   12abe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12ac2:	481e      	ldr	r0, [pc, #120]	; (12b3c <pm_state_notify+0x90>)
   12ac4:	f005 fffe 	bl	18ac4 <z_spin_lock_valid>
   12ac8:	b940      	cbnz	r0, 12adc <pm_state_notify+0x30>
   12aca:	491d      	ldr	r1, [pc, #116]	; (12b40 <pm_state_notify+0x94>)
   12acc:	481d      	ldr	r0, [pc, #116]	; (12b44 <pm_state_notify+0x98>)
   12ace:	2281      	movs	r2, #129	; 0x81
   12ad0:	f008 fa40 	bl	1af54 <printk>
   12ad4:	2181      	movs	r1, #129	; 0x81
   12ad6:	481a      	ldr	r0, [pc, #104]	; (12b40 <pm_state_notify+0x94>)
   12ad8:	f008 fc20 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   12adc:	4817      	ldr	r0, [pc, #92]	; (12b3c <pm_state_notify+0x90>)
   12ade:	f006 f80d 	bl	18afc <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12ae2:	4b19      	ldr	r3, [pc, #100]	; (12b48 <pm_state_notify+0x9c>)
   12ae4:	681c      	ldr	r4, [r3, #0]
   12ae6:	2c00      	cmp	r4, #0
   12ae8:	bf38      	it	cc
   12aea:	2400      	movcc	r4, #0
   12aec:	b19c      	cbz	r4, 12b16 <pm_state_notify+0x6a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   12aee:	f04f 090c 	mov.w	r9, #12
   12af2:	4f16      	ldr	r7, [pc, #88]	; (12b4c <pm_state_notify+0xa0>)
   12af4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 12b50 <pm_state_notify+0xa4>
			callback = notifier->state_exit;
   12af8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   12afc:	2d00      	cmp	r5, #0
   12afe:	bf08      	it	eq
   12b00:	4613      	moveq	r3, r2
		if (callback) {
   12b02:	b12b      	cbz	r3, 12b10 <pm_state_notify+0x64>
			callback(z_power_states[_current_cpu->id].state);
   12b04:	f898 2014 	ldrb.w	r2, [r8, #20]
   12b08:	fb09 f202 	mul.w	r2, r9, r2
   12b0c:	5cb8      	ldrb	r0, [r7, r2]
   12b0e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12b10:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12b12:	2c00      	cmp	r4, #0
   12b14:	d1f0      	bne.n	12af8 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12b16:	4809      	ldr	r0, [pc, #36]	; (12b3c <pm_state_notify+0x90>)
   12b18:	f005 ffe2 	bl	18ae0 <z_spin_unlock_valid>
   12b1c:	b940      	cbnz	r0, 12b30 <pm_state_notify+0x84>
   12b1e:	4908      	ldr	r1, [pc, #32]	; (12b40 <pm_state_notify+0x94>)
   12b20:	4808      	ldr	r0, [pc, #32]	; (12b44 <pm_state_notify+0x98>)
   12b22:	22ac      	movs	r2, #172	; 0xac
   12b24:	f008 fa16 	bl	1af54 <printk>
   12b28:	21ac      	movs	r1, #172	; 0xac
   12b2a:	4805      	ldr	r0, [pc, #20]	; (12b40 <pm_state_notify+0x94>)
   12b2c:	f008 fbf6 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   12b30:	f386 8811 	msr	BASEPRI, r6
   12b34:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12b3c:	2000cff8 	.word	0x2000cff8
   12b40:	0001cad3 	.word	0x0001cad3
   12b44:	0001c625 	.word	0x0001c625
   12b48:	2000cffc 	.word	0x2000cffc
   12b4c:	2000d008 	.word	0x2000d008
   12b50:	2000d56c 	.word	0x2000d56c

00012b54 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12b54:	2201      	movs	r2, #1
   12b56:	f000 031f 	and.w	r3, r0, #31
   12b5a:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12b5c:	4b08      	ldr	r3, [pc, #32]	; (12b80 <atomic_test_and_set_bit.constprop.0+0x2c>)
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12b5e:	0940      	lsrs	r0, r0, #5
   12b60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   12b64:	e8d0 3fef 	ldaex	r3, [r0]
   12b68:	ea43 0102 	orr.w	r1, r3, r2
   12b6c:	e8c0 1fec 	stlex	ip, r1, [r0]
   12b70:	f1bc 0f00 	cmp.w	ip, #0
   12b74:	d1f6      	bne.n	12b64 <atomic_test_and_set_bit.constprop.0+0x10>

	return (old & mask) != 0;
   12b76:	421a      	tst	r2, r3
}
   12b78:	bf14      	ite	ne
   12b7a:	2001      	movne	r0, #1
   12b7c:	2000      	moveq	r0, #0
   12b7e:	4770      	bx	lr
   12b80:	2000d014 	.word	0x2000d014

00012b84 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   12b84:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   12b86:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   12b88:	4b1a      	ldr	r3, [pc, #104]	; (12bf4 <pm_system_resume+0x70>)
{
   12b8a:	b085      	sub	sp, #20
	uint8_t id = _current_cpu->id;
   12b8c:	7d1d      	ldrb	r5, [r3, #20]
   12b8e:	f005 031f 	and.w	r3, r5, #31
   12b92:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12b94:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12b96:	4b18      	ldr	r3, [pc, #96]	; (12bf8 <pm_system_resume+0x74>)
   12b98:	0969      	lsrs	r1, r5, #5
   12b9a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12b9e:	e8d3 1fef 	ldaex	r1, [r3]
   12ba2:	ea01 0400 	and.w	r4, r1, r0
   12ba6:	e8c3 4fec 	stlex	ip, r4, [r3]
   12baa:	f1bc 0f00 	cmp.w	ip, #0
   12bae:	d1f6      	bne.n	12b9e <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12bb0:	4211      	tst	r1, r2
   12bb2:	d017      	beq.n	12be4 <pm_system_resume+0x60>
		exit_pos_ops(z_power_states[id]);
   12bb4:	220c      	movs	r2, #12
   12bb6:	4c11      	ldr	r4, [pc, #68]	; (12bfc <pm_system_resume+0x78>)
   12bb8:	ab01      	add	r3, sp, #4
   12bba:	fb02 4205 	mla	r2, r2, r5, r4
   12bbe:	ca07      	ldmia	r2, {r0, r1, r2}
   12bc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   12bc4:	4a0e      	ldr	r2, [pc, #56]	; (12c00 <pm_system_resume+0x7c>)
   12bc6:	b17a      	cbz	r2, 12be8 <pm_system_resume+0x64>
		pm_power_state_exit_post_ops(info);
   12bc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12bcc:	f008 fbc1 	bl	1b352 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   12bd0:	2000      	movs	r0, #0
   12bd2:	f7ff ff6b 	bl	12aac <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   12bd6:	230c      	movs	r3, #12
   12bd8:	2200      	movs	r2, #0
   12bda:	436b      	muls	r3, r5
   12bdc:	18e1      	adds	r1, r4, r3
   12bde:	50e2      	str	r2, [r4, r3]
   12be0:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   12be4:	b005      	add	sp, #20
   12be6:	bd30      	pop	{r4, r5, pc}
   12be8:	f382 8811 	msr	BASEPRI, r2
   12bec:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12bf0:	e7ee      	b.n	12bd0 <pm_system_resume+0x4c>
   12bf2:	bf00      	nop
   12bf4:	2000d56c 	.word	0x2000d56c
   12bf8:	2000d004 	.word	0x2000d004
   12bfc:	2000d008 	.word	0x2000d008
   12c00:	0001b353 	.word	0x0001b353

00012c04 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   12c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   12c08:	4b33      	ldr	r3, [pc, #204]	; (12cd8 <pm_system_suspend+0xd4>)
{
   12c0a:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
   12c0c:	7d1c      	ldrb	r4, [r3, #20]
{
   12c0e:	b088      	sub	sp, #32

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   12c10:	4620      	mov	r0, r4
   12c12:	f7ff ff9f 	bl	12b54 <atomic_test_and_set_bit.constprop.0>
   12c16:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 12cf0 <pm_system_suspend+0xec>
   12c1a:	b960      	cbnz	r0, 12c36 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   12c1c:	250c      	movs	r5, #12
   12c1e:	466e      	mov	r6, sp
   12c20:	fb05 8504 	mla	r5, r5, r4, r8
   12c24:	463a      	mov	r2, r7
   12c26:	4621      	mov	r1, r4
   12c28:	4630      	mov	r0, r6
   12c2a:	f008 fbe6 	bl	1b3fa <pm_policy_next_state>
   12c2e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12c32:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   12c36:	230c      	movs	r3, #12
   12c38:	4363      	muls	r3, r4
   12c3a:	f818 0003 	ldrb.w	r0, [r8, r3]
   12c3e:	eb08 0203 	add.w	r2, r8, r3
   12c42:	0965      	lsrs	r5, r4, #5
   12c44:	f004 061f 	and.w	r6, r4, #31
   12c48:	b3a8      	cbz	r0, 12cb6 <pm_system_suspend+0xb2>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   12c4a:	1c7b      	adds	r3, r7, #1
   12c4c:	d00f      	beq.n	12c6e <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
   12c4e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   12c52:	2100      	movs	r1, #0
   12c54:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12c58:	4820      	ldr	r0, [pc, #128]	; (12cdc <pm_system_suspend+0xd8>)
   12c5a:	2300      	movs	r3, #0
   12c5c:	fbec 010e 	umlal	r0, r1, ip, lr
   12c60:	4a1f      	ldr	r2, [pc, #124]	; (12ce0 <pm_system_suspend+0xdc>)
   12c62:	f7fd faeb 	bl	1023c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   12c66:	2101      	movs	r1, #1
   12c68:	1a38      	subs	r0, r7, r0
   12c6a:	f007 ff03 	bl	1aa74 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12c6e:	f006 fdd5 	bl	1981c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   12c72:	2001      	movs	r0, #1
   12c74:	f7ff ff1a 	bl	12aac <pm_state_notify>
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12c78:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12c7a:	4b1a      	ldr	r3, [pc, #104]	; (12ce4 <pm_system_suspend+0xe0>)
   12c7c:	40b2      	lsls	r2, r6
   12c7e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   12c82:	e8d3 1fef 	ldaex	r1, [r3]
   12c86:	4311      	orrs	r1, r2
   12c88:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12c8c:	2800      	cmp	r0, #0
   12c8e:	d1f8      	bne.n	12c82 <pm_system_suspend+0x7e>
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   12c90:	230c      	movs	r3, #12
   12c92:	fb03 8404 	mla	r4, r3, r4, r8
   12c96:	ab05      	add	r3, sp, #20
   12c98:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   12c9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   12ca0:	4a11      	ldr	r2, [pc, #68]	; (12ce8 <pm_system_suspend+0xe4>)
   12ca2:	b11a      	cbz	r2, 12cac <pm_system_suspend+0xa8>
		pm_power_state_set(info);
   12ca4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12ca8:	f008 fb40 	bl	1b32c <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   12cac:	f7ff ff6a 	bl	12b84 <pm_system_resume>
	k_sched_unlock();
   12cb0:	f007 fa24 	bl	1a0fc <k_sched_unlock>
	bool ret = true;
   12cb4:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   12cb6:	2301      	movs	r3, #1
   12cb8:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12cba:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12cbc:	4a0b      	ldr	r2, [pc, #44]	; (12cec <pm_system_suspend+0xe8>)
   12cbe:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   12cc2:	e8d5 2fef 	ldaex	r2, [r5]
   12cc6:	401a      	ands	r2, r3
   12cc8:	e8c5 2fe1 	stlex	r1, r2, [r5]
   12ccc:	2900      	cmp	r1, #0
   12cce:	d1f8      	bne.n	12cc2 <pm_system_suspend+0xbe>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   12cd0:	b008      	add	sp, #32
   12cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12cd6:	bf00      	nop
   12cd8:	2000d56c 	.word	0x2000d56c
   12cdc:	000f423f 	.word	0x000f423f
   12ce0:	000f4240 	.word	0x000f4240
   12ce4:	2000d004 	.word	0x2000d004
   12ce8:	0001b32d 	.word	0x0001b32d
   12cec:	2000d014 	.word	0x2000d014
   12cf0:	2000d008 	.word	0x2000d008

00012cf4 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   12cf4:	b508      	push	{r3, lr}
	k_sched_lock();
   12cf6:	f006 fd91 	bl	1981c <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   12cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   12cfe:	4801      	ldr	r0, [pc, #4]	; (12d04 <before_nse+0x10>)
   12d00:	f008 bb9f 	b.w	1b442 <z_arm_save_fp_context>
   12d04:	2000d018 	.word	0x2000d018

00012d08 <after_nse>:

void after_nse(void)
{
   12d08:	b508      	push	{r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   12d0a:	4803      	ldr	r0, [pc, #12]	; (12d18 <after_nse+0x10>)
   12d0c:	f008 fb9a 	bl	1b444 <z_arm_restore_fp_context>
	k_sched_unlock();
}
   12d10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_sched_unlock();
   12d14:	f007 b9f2 	b.w	1a0fc <k_sched_unlock>
   12d18:	2000d018 	.word	0x2000d018

00012d1c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12d1c:	4901      	ldr	r1, [pc, #4]	; (12d24 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12d1e:	2210      	movs	r2, #16
	str	r2, [r1]
   12d20:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12d22:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12d24:	e000ed10 	.word	0xe000ed10

00012d28 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12d28:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12d2a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12d2c:	f380 8811 	msr	BASEPRI, r0
	isb
   12d30:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12d34:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12d38:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12d3a:	b662      	cpsie	i
	isb
   12d3c:	f3bf 8f6f 	isb	sy

	bx	lr
   12d40:	4770      	bx	lr
   12d42:	bf00      	nop

00012d44 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12d44:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12d46:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12d48:	f381 8811 	msr	BASEPRI, r1

	wfe
   12d4c:	bf20      	wfe

	msr	BASEPRI, r0
   12d4e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12d52:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12d54:	4770      	bx	lr
   12d56:	bf00      	nop

00012d58 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12d58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12d5a:	4606      	mov	r6, r0

	if (esf != NULL) {
   12d5c:	460c      	mov	r4, r1
   12d5e:	b301      	cbz	r1, 12da2 <z_arm_fatal_error+0x4a>
   12d60:	4b13      	ldr	r3, [pc, #76]	; (12db0 <z_arm_fatal_error+0x58>)
   12d62:	4d14      	ldr	r5, [pc, #80]	; (12db4 <z_arm_fatal_error+0x5c>)
   12d64:	1aed      	subs	r5, r5, r3
   12d66:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   12d68:	688b      	ldr	r3, [r1, #8]
   12d6a:	01ad      	lsls	r5, r5, #6
   12d6c:	f045 0501 	orr.w	r5, r5, #1
   12d70:	9300      	str	r3, [sp, #0]
   12d72:	e9d1 2300 	ldrd	r2, r3, [r1]
   12d76:	4628      	mov	r0, r5
   12d78:	490f      	ldr	r1, [pc, #60]	; (12db8 <z_arm_fatal_error+0x60>)
   12d7a:	f008 fb02 	bl	1b382 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   12d7e:	6963      	ldr	r3, [r4, #20]
   12d80:	4628      	mov	r0, r5
   12d82:	9300      	str	r3, [sp, #0]
   12d84:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   12d88:	490c      	ldr	r1, [pc, #48]	; (12dbc <z_arm_fatal_error+0x64>)
   12d8a:	f008 fafa 	bl	1b382 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   12d8e:	4628      	mov	r0, r5
   12d90:	69e2      	ldr	r2, [r4, #28]
   12d92:	490b      	ldr	r1, [pc, #44]	; (12dc0 <z_arm_fatal_error+0x68>)
   12d94:	f008 faf5 	bl	1b382 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   12d98:	4628      	mov	r0, r5
   12d9a:	69a2      	ldr	r2, [r4, #24]
   12d9c:	4909      	ldr	r1, [pc, #36]	; (12dc4 <z_arm_fatal_error+0x6c>)
   12d9e:	f008 faf0 	bl	1b382 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   12da2:	4621      	mov	r1, r4
   12da4:	4630      	mov	r0, r6
}
   12da6:	b002      	add	sp, #8
   12da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   12dac:	f005 ba6a 	b.w	18284 <z_fatal_error>
   12db0:	0001c308 	.word	0x0001c308
   12db4:	0001c348 	.word	0x0001c348
   12db8:	0001cc63 	.word	0x0001cc63
   12dbc:	0001cc92 	.word	0x0001cc92
   12dc0:	0001ccc1 	.word	0x0001ccc1
   12dc4:	0001ccd0 	.word	0x0001ccd0

00012dc8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12dc8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12dca:	2b00      	cmp	r3, #0
   12dcc:	db08      	blt.n	12de0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12dce:	2201      	movs	r2, #1
   12dd0:	f000 001f 	and.w	r0, r0, #31
   12dd4:	fa02 f000 	lsl.w	r0, r2, r0
   12dd8:	4a02      	ldr	r2, [pc, #8]	; (12de4 <arch_irq_enable+0x1c>)
   12dda:	095b      	lsrs	r3, r3, #5
   12ddc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   12de0:	4770      	bx	lr
   12de2:	bf00      	nop
   12de4:	e000e100 	.word	0xe000e100

00012de8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   12de8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12dea:	2b00      	cmp	r3, #0
   12dec:	db0d      	blt.n	12e0a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12dee:	2201      	movs	r2, #1
   12df0:	f000 001f 	and.w	r0, r0, #31
   12df4:	fa02 f000 	lsl.w	r0, r2, r0
   12df8:	095b      	lsrs	r3, r3, #5
   12dfa:	4a04      	ldr	r2, [pc, #16]	; (12e0c <arch_irq_disable+0x24>)
   12dfc:	3320      	adds	r3, #32
   12dfe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12e02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12e06:	f3bf 8f6f 	isb	sy
}
   12e0a:	4770      	bx	lr
   12e0c:	e000e100 	.word	0xe000e100

00012e10 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12e10:	4b05      	ldr	r3, [pc, #20]	; (12e28 <arch_irq_is_enabled+0x18>)
   12e12:	0942      	lsrs	r2, r0, #5
   12e14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12e18:	2301      	movs	r3, #1
   12e1a:	f000 001f 	and.w	r0, r0, #31
   12e1e:	fa03 f000 	lsl.w	r0, r3, r0
}
   12e22:	4010      	ands	r0, r2
   12e24:	4770      	bx	lr
   12e26:	bf00      	nop
   12e28:	e000e100 	.word	0xe000e100

00012e2c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   12e2c:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   12e2e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   12e30:	2c07      	cmp	r4, #7
{
   12e32:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   12e34:	d908      	bls.n	12e48 <z_arm_irq_priority_set+0x1c>
   12e36:	490d      	ldr	r1, [pc, #52]	; (12e6c <z_arm_irq_priority_set+0x40>)
   12e38:	480d      	ldr	r0, [pc, #52]	; (12e70 <z_arm_irq_priority_set+0x44>)
   12e3a:	2259      	movs	r2, #89	; 0x59
   12e3c:	f008 f88a 	bl	1af54 <printk>
   12e40:	2159      	movs	r1, #89	; 0x59
   12e42:	480a      	ldr	r0, [pc, #40]	; (12e6c <z_arm_irq_priority_set+0x40>)
   12e44:	f008 fa6a 	bl	1b31c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12e48:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   12e4a:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e4c:	bfac      	ite	ge
   12e4e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e52:	4b08      	ldrlt	r3, [pc, #32]	; (12e74 <z_arm_irq_priority_set+0x48>)
   12e54:	ea4f 1444 	mov.w	r4, r4, lsl #5
   12e58:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e5a:	bfab      	itete	ge
   12e5c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e60:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e64:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e68:	555c      	strblt	r4, [r3, r5]
}
   12e6a:	bd38      	pop	{r3, r4, r5, pc}
   12e6c:	0001ccfe 	.word	0x0001ccfe
   12e70:	0001c625 	.word	0x0001c625
   12e74:	e000ed14 	.word	0xe000ed14

00012e78 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   12e78:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   12e7a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   12e7c:	4b04      	ldr	r3, [pc, #16]	; (12e90 <_arch_isr_direct_pm+0x18>)
   12e7e:	699a      	ldr	r2, [r3, #24]
   12e80:	b11a      	cbz	r2, 12e8a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   12e82:	2200      	movs	r2, #0
   12e84:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   12e86:	f009 f800 	bl	1be8a <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   12e8a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   12e8c:	bd08      	pop	{r3, pc}
   12e8e:	bf00      	nop
   12e90:	2000d56c 	.word	0x2000d56c

00012e94 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12e94:	bf30      	wfi
    b z_SysNmiOnReset
   12e96:	f7ff bffd 	b.w	12e94 <z_SysNmiOnReset>
   12e9a:	bf00      	nop

00012e9c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12e9c:	4a0f      	ldr	r2, [pc, #60]	; (12edc <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   12e9e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12ea0:	4b0f      	ldr	r3, [pc, #60]	; (12ee0 <z_arm_prep_c+0x44>)
   12ea2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12ea6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12ea8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12eac:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12eb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12eb4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   12ebc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   12ec0:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   12ec4:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   12ec8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12ecc:	f005 fa8e 	bl	183ec <z_bss_zero>
	z_data_copy();
   12ed0:	f007 fc3a 	bl	1a748 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12ed4:	f000 fb38 	bl	13548 <z_arm_interrupt_init>
	z_cstart();
   12ed8:	f005 fa92 	bl	18400 <z_cstart>
   12edc:	00010000 	.word	0x00010000
   12ee0:	e000ed00 	.word	0xe000ed00

00012ee4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12ee4:	4a09      	ldr	r2, [pc, #36]	; (12f0c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   12ee6:	490a      	ldr	r1, [pc, #40]	; (12f10 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   12ee8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   12eea:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   12eec:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
   12eee:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12ef0:	4908      	ldr	r1, [pc, #32]	; (12f14 <arch_swap+0x30>)
   12ef2:	684b      	ldr	r3, [r1, #4]
   12ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12ef8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   12efa:	2300      	movs	r3, #0
   12efc:	f383 8811 	msr	BASEPRI, r3
   12f00:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12f04:	6893      	ldr	r3, [r2, #8]
}
   12f06:	6f98      	ldr	r0, [r3, #120]	; 0x78
   12f08:	4770      	bx	lr
   12f0a:	bf00      	nop
   12f0c:	2000d56c 	.word	0x2000d56c
   12f10:	0001c5cc 	.word	0x0001c5cc
   12f14:	e000ed00 	.word	0xe000ed00

00012f18 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12f18:	4913      	ldr	r1, [pc, #76]	; (12f68 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   12f1a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12f1c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12f20:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12f22:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12f26:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12f2a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   12f2c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12f30:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12f34:	4f0d      	ldr	r7, [pc, #52]	; (12f6c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12f36:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   12f3a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   12f3c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12f3e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12f40:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   12f42:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12f44:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   12f46:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   12f4a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   12f4e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   12f52:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   12f56:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   12f5a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   12f5c:	f008 fa6d 	bl	1b43a <configure_builtin_stack_guard>
    pop {r2, lr}
   12f60:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   12f64:	4770      	bx	lr
   12f66:	0000      	.short	0x0000
    ldr r1, =_kernel
   12f68:	2000d56c 	.word	0x2000d56c
    ldr v4, =_SCS_ICSR
   12f6c:	e000ed04 	.word	0xe000ed04

00012f70 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   12f70:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12f74:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   12f76:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   12f7a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   12f7e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   12f80:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   12f84:	2902      	cmp	r1, #2
    beq _oops
   12f86:	d0ff      	beq.n	12f88 <_oops>

00012f88 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   12f88:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   12f8a:	f008 fa47 	bl	1b41c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   12f8e:	bd01      	pop	{r0, pc}

00012f90 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12f90:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12f94:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   12f96:	490b      	ldr	r1, [pc, #44]	; (12fc4 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   12f98:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   12f9c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   12f9e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   12fa2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12fa6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   12fa8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   12fac:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12fb4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12fb8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12fba:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12fbc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12fbe:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12fc0:	4770      	bx	lr
   12fc2:	bf00      	nop
   12fc4:	0001b017 	.word	0x0001b017

00012fc8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12fc8:	4b08      	ldr	r3, [pc, #32]	; (12fec <arch_switch_to_main_thread+0x24>)
   12fca:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   12fcc:	6e43      	ldr	r3, [r0, #100]	; 0x64
   12fce:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   12fd2:	4610      	mov	r0, r2
   12fd4:	f381 8809 	msr	PSP, r1
   12fd8:	2100      	movs	r1, #0
   12fda:	b663      	cpsie	if
   12fdc:	f381 8811 	msr	BASEPRI, r1
   12fe0:	f3bf 8f6f 	isb	sy
   12fe4:	2200      	movs	r2, #0
   12fe6:	2300      	movs	r3, #0
   12fe8:	f008 f815 	bl	1b016 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12fec:	2000d56c 	.word	0x2000d56c

00012ff0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12ff0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   12ff2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12ff4:	4a0b      	ldr	r2, [pc, #44]	; (13024 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12ff6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   12ff8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12ffa:	bf1e      	ittt	ne
	movne	r1, #0
   12ffc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12ffe:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13000:	f008 ff43 	blne	1be8a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13004:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13006:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1300a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1300e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13012:	4905      	ldr	r1, [pc, #20]	; (13028 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13014:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13016:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13018:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1301a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1301e:	4903      	ldr	r1, [pc, #12]	; (1302c <_isr_wrapper+0x3c>)
	bx r1
   13020:	4708      	bx	r1
   13022:	0000      	.short	0x0000
	ldr r2, =_kernel
   13024:	2000d56c 	.word	0x2000d56c
	ldr r1, =_sw_isr_table
   13028:	0001c100 	.word	0x0001c100
	ldr r1, =z_arm_int_exit
   1302c:	00013031 	.word	0x00013031

00013030 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13030:	4b04      	ldr	r3, [pc, #16]	; (13044 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13032:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13034:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13036:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13038:	d003      	beq.n	13042 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1303a:	4903      	ldr	r1, [pc, #12]	; (13048 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1303c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13040:	600a      	str	r2, [r1, #0]

00013042 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13042:	4770      	bx	lr
	ldr r3, =_kernel
   13044:	2000d56c 	.word	0x2000d56c
	ldr r1, =_SCS_ICSR
   13048:	e000ed04 	.word	0xe000ed04

0001304c <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1304c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13050:	4b31      	ldr	r3, [pc, #196]	; (13118 <mem_manage_fault.isra.0+0xcc>)
   13052:	4c32      	ldr	r4, [pc, #200]	; (1311c <mem_manage_fault.isra.0+0xd0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13054:	4d32      	ldr	r5, [pc, #200]	; (13120 <mem_manage_fault.isra.0+0xd4>)
   13056:	1ae4      	subs	r4, r4, r3
   13058:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   1305a:	01a4      	lsls	r4, r4, #6
   1305c:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13060:	4607      	mov	r7, r0
   13062:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   13064:	4640      	mov	r0, r8
   13066:	492f      	ldr	r1, [pc, #188]	; (13124 <mem_manage_fault.isra.0+0xd8>)
   13068:	f008 f98b 	bl	1b382 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1306c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1306e:	06d0      	lsls	r0, r2, #27
   13070:	d503      	bpl.n	1307a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   13072:	4640      	mov	r0, r8
   13074:	492c      	ldr	r1, [pc, #176]	; (13128 <mem_manage_fault.isra.0+0xdc>)
   13076:	f008 f984 	bl	1b382 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1307a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1307c:	0719      	lsls	r1, r3, #28
   1307e:	d504      	bpl.n	1308a <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   13080:	492a      	ldr	r1, [pc, #168]	; (1312c <mem_manage_fault.isra.0+0xe0>)
   13082:	f044 0001 	orr.w	r0, r4, #1
   13086:	f008 f97c 	bl	1b382 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1308a:	4d25      	ldr	r5, [pc, #148]	; (13120 <mem_manage_fault.isra.0+0xd4>)
   1308c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1308e:	079a      	lsls	r2, r3, #30
   13090:	d512      	bpl.n	130b8 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   13092:	f044 0801 	orr.w	r8, r4, #1
   13096:	4640      	mov	r0, r8
   13098:	4925      	ldr	r1, [pc, #148]	; (13130 <mem_manage_fault.isra.0+0xe4>)
   1309a:	f008 f972 	bl	1b382 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   1309e:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   130a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   130a2:	061b      	lsls	r3, r3, #24
   130a4:	d508      	bpl.n	130b8 <mem_manage_fault.isra.0+0x6c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   130a6:	4640      	mov	r0, r8
   130a8:	4922      	ldr	r1, [pc, #136]	; (13134 <mem_manage_fault.isra.0+0xe8>)
   130aa:	f008 f96a 	bl	1b382 <log_string_sync>
			if (from_hard_fault != 0) {
   130ae:	b11f      	cbz	r7, 130b8 <mem_manage_fault.isra.0+0x6c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   130b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   130b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   130b6:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   130b8:	4d19      	ldr	r5, [pc, #100]	; (13120 <mem_manage_fault.isra.0+0xd4>)
   130ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   130bc:	07d7      	lsls	r7, r2, #31
   130be:	d504      	bpl.n	130ca <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   130c0:	491d      	ldr	r1, [pc, #116]	; (13138 <mem_manage_fault.isra.0+0xec>)
   130c2:	f044 0001 	orr.w	r0, r4, #1
   130c6:	f008 f95c 	bl	1b382 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   130ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   130cc:	0698      	lsls	r0, r3, #26
   130ce:	d504      	bpl.n	130da <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   130d0:	491a      	ldr	r1, [pc, #104]	; (1313c <mem_manage_fault.isra.0+0xf0>)
   130d2:	f044 0001 	orr.w	r0, r4, #1
   130d6:	f008 f954 	bl	1b382 <log_string_sync>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   130da:	4b11      	ldr	r3, [pc, #68]	; (13120 <mem_manage_fault.isra.0+0xd4>)
   130dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   130de:	06d1      	lsls	r1, r2, #27
   130e0:	d402      	bmi.n	130e8 <mem_manage_fault.isra.0+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   130e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   130e4:	0792      	lsls	r2, r2, #30
   130e6:	d50d      	bpl.n	13104 <mem_manage_fault.isra.0+0xb8>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   130e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   130ea:	06db      	lsls	r3, r3, #27
   130ec:	d50a      	bpl.n	13104 <mem_manage_fault.isra.0+0xb8>
   130ee:	4914      	ldr	r1, [pc, #80]	; (13140 <mem_manage_fault.isra.0+0xf4>)
   130f0:	4814      	ldr	r0, [pc, #80]	; (13144 <mem_manage_fault.isra.0+0xf8>)
   130f2:	f240 124f 	movw	r2, #335	; 0x14f
   130f6:	f007 ff2d 	bl	1af54 <printk>
   130fa:	f240 114f 	movw	r1, #335	; 0x14f
   130fe:	4810      	ldr	r0, [pc, #64]	; (13140 <mem_manage_fault.isra.0+0xf4>)
   13100:	f008 f90c 	bl	1b31c <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   13104:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13106:	4a06      	ldr	r2, [pc, #24]	; (13120 <mem_manage_fault.isra.0+0xd4>)
   13108:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1310a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1310e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13110:	7030      	strb	r0, [r6, #0]

	return reason;
}
   13112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13116:	bf00      	nop
   13118:	0001c308 	.word	0x0001c308
   1311c:	0001c348 	.word	0x0001c348
   13120:	e000ed00 	.word	0xe000ed00
   13124:	0001cd34 	.word	0x0001cd34
   13128:	0001cd4a 	.word	0x0001cd4a
   1312c:	0001cd7d 	.word	0x0001cd7d
   13130:	0001cd90 	.word	0x0001cd90
   13134:	0001cda8 	.word	0x0001cda8
   13138:	0001cdbe 	.word	0x0001cdbe
   1313c:	0001cddd 	.word	0x0001cddd
   13140:	0001ce0c 	.word	0x0001ce0c
   13144:	0001c625 	.word	0x0001c625

00013148 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1314c:	4b29      	ldr	r3, [pc, #164]	; (131f4 <bus_fault.isra.0+0xac>)
   1314e:	4c2a      	ldr	r4, [pc, #168]	; (131f8 <bus_fault.isra.0+0xb0>)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13150:	4d2a      	ldr	r5, [pc, #168]	; (131fc <bus_fault.isra.0+0xb4>)
   13152:	1ae4      	subs	r4, r4, r3
   13154:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   13156:	01a4      	lsls	r4, r4, #6
   13158:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1315c:	4607      	mov	r7, r0
   1315e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   13160:	4640      	mov	r0, r8
   13162:	4927      	ldr	r1, [pc, #156]	; (13200 <bus_fault.isra.0+0xb8>)
   13164:	f008 f90d 	bl	1b382 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13168:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1316a:	04d1      	lsls	r1, r2, #19
   1316c:	d503      	bpl.n	13176 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   1316e:	4640      	mov	r0, r8
   13170:	4924      	ldr	r1, [pc, #144]	; (13204 <bus_fault.isra.0+0xbc>)
   13172:	f008 f906 	bl	1b382 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13176:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13178:	051a      	lsls	r2, r3, #20
   1317a:	d504      	bpl.n	13186 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   1317c:	4922      	ldr	r1, [pc, #136]	; (13208 <bus_fault.isra.0+0xc0>)
   1317e:	f044 0001 	orr.w	r0, r4, #1
   13182:	f008 f8fe 	bl	1b382 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13186:	4d1d      	ldr	r5, [pc, #116]	; (131fc <bus_fault.isra.0+0xb4>)
   13188:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1318a:	059b      	lsls	r3, r3, #22
   1318c:	d512      	bpl.n	131b4 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   1318e:	f044 0801 	orr.w	r8, r4, #1
   13192:	4640      	mov	r0, r8
   13194:	491d      	ldr	r1, [pc, #116]	; (1320c <bus_fault.isra.0+0xc4>)
   13196:	f008 f8f4 	bl	1b382 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1319a:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1319c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1319e:	0418      	lsls	r0, r3, #16
   131a0:	d508      	bpl.n	131b4 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   131a2:	4640      	mov	r0, r8
   131a4:	491a      	ldr	r1, [pc, #104]	; (13210 <bus_fault.isra.0+0xc8>)
   131a6:	f008 f8ec 	bl	1b382 <log_string_sync>
			if (from_hard_fault != 0) {
   131aa:	b11f      	cbz	r7, 131b4 <bus_fault.isra.0+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   131ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
   131ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   131b2:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   131b4:	4d11      	ldr	r5, [pc, #68]	; (131fc <bus_fault.isra.0+0xb4>)
   131b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   131b8:	0559      	lsls	r1, r3, #21
   131ba:	d504      	bpl.n	131c6 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   131bc:	4915      	ldr	r1, [pc, #84]	; (13214 <bus_fault.isra.0+0xcc>)
   131be:	f044 0001 	orr.w	r0, r4, #1
   131c2:	f008 f8de 	bl	1b382 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   131c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   131c8:	05da      	lsls	r2, r3, #23
   131ca:	d50d      	bpl.n	131e8 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   131cc:	4912      	ldr	r1, [pc, #72]	; (13218 <bus_fault.isra.0+0xd0>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   131ce:	f044 0001 	orr.w	r0, r4, #1
   131d2:	f008 f8d6 	bl	1b382 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   131d6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   131d8:	4a08      	ldr	r2, [pc, #32]	; (131fc <bus_fault.isra.0+0xb4>)
   131da:	6a93      	ldr	r3, [r2, #40]	; 0x28
   131dc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   131e0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   131e2:	7030      	strb	r0, [r6, #0]

	return reason;
}
   131e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   131e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   131ea:	049b      	lsls	r3, r3, #18
   131ec:	d5f3      	bpl.n	131d6 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   131ee:	490b      	ldr	r1, [pc, #44]	; (1321c <bus_fault.isra.0+0xd4>)
   131f0:	e7ed      	b.n	131ce <bus_fault.isra.0+0x86>
   131f2:	bf00      	nop
   131f4:	0001c308 	.word	0x0001c308
   131f8:	0001c348 	.word	0x0001c348
   131fc:	e000ed00 	.word	0xe000ed00
   13200:	0001ce46 	.word	0x0001ce46
   13204:	0001ce5c 	.word	0x0001ce5c
   13208:	0001cd7d 	.word	0x0001cd7d
   1320c:	0001ce6d 	.word	0x0001ce6d
   13210:	0001ce86 	.word	0x0001ce86
   13214:	0001ce9b 	.word	0x0001ce9b
   13218:	0001ceb6 	.word	0x0001ceb6
   1321c:	0001cddd 	.word	0x0001cddd

00013220 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   13220:	b570      	push	{r4, r5, r6, lr}
   13222:	4b28      	ldr	r3, [pc, #160]	; (132c4 <usage_fault.isra.0+0xa4>)
   13224:	4c28      	ldr	r4, [pc, #160]	; (132c8 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13226:	4d29      	ldr	r5, [pc, #164]	; (132cc <usage_fault.isra.0+0xac>)
   13228:	1ae4      	subs	r4, r4, r3
   1322a:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1322c:	01a4      	lsls	r4, r4, #6
   1322e:	f044 0601 	orr.w	r6, r4, #1
   13232:	4630      	mov	r0, r6
   13234:	4926      	ldr	r1, [pc, #152]	; (132d0 <usage_fault.isra.0+0xb0>)
   13236:	f008 f8a4 	bl	1b382 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1323a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1323c:	0193      	lsls	r3, r2, #6
   1323e:	d503      	bpl.n	13248 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   13240:	4630      	mov	r0, r6
   13242:	4924      	ldr	r1, [pc, #144]	; (132d4 <usage_fault.isra.0+0xb4>)
   13244:	f008 f89d 	bl	1b382 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13248:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1324a:	01dd      	lsls	r5, r3, #7
   1324c:	d504      	bpl.n	13258 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   1324e:	4922      	ldr	r1, [pc, #136]	; (132d8 <usage_fault.isra.0+0xb8>)
   13250:	f044 0001 	orr.w	r0, r4, #1
   13254:	f008 f895 	bl	1b382 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   13258:	4d1c      	ldr	r5, [pc, #112]	; (132cc <usage_fault.isra.0+0xac>)
   1325a:	6aae      	ldr	r6, [r5, #40]	; 0x28
   1325c:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   13260:	d005      	beq.n	1326e <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   13262:	491e      	ldr	r1, [pc, #120]	; (132dc <usage_fault.isra.0+0xbc>)
   13264:	f044 0001 	orr.w	r0, r4, #1
   13268:	f008 f88b 	bl	1b382 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   1326c:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1326e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13270:	0318      	lsls	r0, r3, #12
   13272:	d504      	bpl.n	1327e <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   13274:	491a      	ldr	r1, [pc, #104]	; (132e0 <usage_fault.isra.0+0xc0>)
   13276:	f044 0001 	orr.w	r0, r4, #1
   1327a:	f008 f882 	bl	1b382 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1327e:	4d13      	ldr	r5, [pc, #76]	; (132cc <usage_fault.isra.0+0xac>)
   13280:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13282:	0351      	lsls	r1, r2, #13
   13284:	d504      	bpl.n	13290 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   13286:	4917      	ldr	r1, [pc, #92]	; (132e4 <usage_fault.isra.0+0xc4>)
   13288:	f044 0001 	orr.w	r0, r4, #1
   1328c:	f008 f879 	bl	1b382 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13290:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13292:	039a      	lsls	r2, r3, #14
   13294:	d504      	bpl.n	132a0 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13296:	4914      	ldr	r1, [pc, #80]	; (132e8 <usage_fault.isra.0+0xc8>)
   13298:	f044 0001 	orr.w	r0, r4, #1
   1329c:	f008 f871 	bl	1b382 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   132a0:	4d0a      	ldr	r5, [pc, #40]	; (132cc <usage_fault.isra.0+0xac>)
   132a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   132a4:	03db      	lsls	r3, r3, #15
   132a6:	d504      	bpl.n	132b2 <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   132a8:	4910      	ldr	r1, [pc, #64]	; (132ec <usage_fault.isra.0+0xcc>)
   132aa:	f044 0001 	orr.w	r0, r4, #1
   132ae:	f008 f868 	bl	1b382 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   132b2:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   132b4:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   132b6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   132ba:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   132be:	62ab      	str	r3, [r5, #40]	; 0x28
}
   132c0:	bd70      	pop	{r4, r5, r6, pc}
   132c2:	bf00      	nop
   132c4:	0001c308 	.word	0x0001c308
   132c8:	0001c348 	.word	0x0001c348
   132cc:	e000ed00 	.word	0xe000ed00
   132d0:	0001cece 	.word	0x0001cece
   132d4:	0001cee6 	.word	0x0001cee6
   132d8:	0001cef9 	.word	0x0001cef9
   132dc:	0001cf13 	.word	0x0001cf13
   132e0:	0001cf3d 	.word	0x0001cf3d
   132e4:	0001cf5b 	.word	0x0001cf5b
   132e8:	0001cf80 	.word	0x0001cf80
   132ec:	0001cf9a 	.word	0x0001cf9a

000132f0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   132f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   132f4:	4b78      	ldr	r3, [pc, #480]	; (134d8 <z_arm_fault+0x1e8>)
{
   132f6:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   132f8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   132fc:	4689      	mov	r9, r1
   132fe:	4614      	mov	r4, r2
   13300:	2700      	movs	r7, #0
   13302:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13304:	f3c8 0608 	ubfx	r6, r8, #0, #9
   13308:	f387 8811 	msr	BASEPRI, r7
   1330c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13310:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13314:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13318:	d117      	bne.n	1334a <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1331a:	07d0      	lsls	r0, r2, #31
   1331c:	d415      	bmi.n	1334a <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1331e:	0651      	lsls	r1, r2, #25
   13320:	d403      	bmi.n	1332a <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13322:	0722      	lsls	r2, r4, #28
   13324:	d40e      	bmi.n	13344 <z_arm_fault+0x54>
			*nested_exc = true;
   13326:	2701      	movs	r7, #1
   13328:	e00e      	b.n	13348 <z_arm_fault+0x58>
   1332a:	486c      	ldr	r0, [pc, #432]	; (134dc <z_arm_fault+0x1ec>)
   1332c:	4b6c      	ldr	r3, [pc, #432]	; (134e0 <z_arm_fault+0x1f0>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   1332e:	496d      	ldr	r1, [pc, #436]	; (134e4 <z_arm_fault+0x1f4>)
   13330:	1a1b      	subs	r3, r3, r0
   13332:	08db      	lsrs	r3, r3, #3
   13334:	019b      	lsls	r3, r3, #6
   13336:	f043 0001 	orr.w	r0, r3, #1
   1333a:	f008 f822 	bl	1b382 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1333e:	f014 0404 	ands.w	r4, r4, #4
   13342:	d000      	beq.n	13346 <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)psp;
   13344:	464d      	mov	r5, r9
	*nested_exc = false;
   13346:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   13348:	b95d      	cbnz	r5, 13362 <z_arm_fault+0x72>
   1334a:	f240 32f2 	movw	r2, #1010	; 0x3f2
   1334e:	4966      	ldr	r1, [pc, #408]	; (134e8 <z_arm_fault+0x1f8>)
   13350:	4866      	ldr	r0, [pc, #408]	; (134ec <z_arm_fault+0x1fc>)
   13352:	f007 fdff 	bl	1af54 <printk>
   13356:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1335a:	4863      	ldr	r0, [pc, #396]	; (134e8 <z_arm_fault+0x1f8>)
   1335c:	f007 ffde 	bl	1b31c <assert_post_action>
   13360:	2500      	movs	r5, #0
	*recoverable = false;
   13362:	2300      	movs	r3, #0
   13364:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   13368:	1ef3      	subs	r3, r6, #3
   1336a:	2b09      	cmp	r3, #9
   1336c:	f200 809a 	bhi.w	134a4 <z_arm_fault+0x1b4>
   13370:	e8df f003 	tbb	[pc, r3]
   13374:	6f8b8705 	.word	0x6f8b8705
   13378:	98989898 	.word	0x98989898
   1337c:	8f98      	.short	0x8f98
	*recoverable = false;
   1337e:	f04f 0800 	mov.w	r8, #0
   13382:	4b56      	ldr	r3, [pc, #344]	; (134dc <z_arm_fault+0x1ec>)
   13384:	4e56      	ldr	r6, [pc, #344]	; (134e0 <z_arm_fault+0x1f0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   13386:	495a      	ldr	r1, [pc, #360]	; (134f0 <z_arm_fault+0x200>)
   13388:	1af6      	subs	r6, r6, r3
   1338a:	08f6      	lsrs	r6, r6, #3
   1338c:	01b6      	lsls	r6, r6, #6
   1338e:	f046 0601 	orr.w	r6, r6, #1
   13392:	4630      	mov	r0, r6
   13394:	f007 fff5 	bl	1b382 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13398:	4b4f      	ldr	r3, [pc, #316]	; (134d8 <z_arm_fault+0x1e8>)
	*recoverable = false;
   1339a:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1339e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   133a0:	f014 0402 	ands.w	r4, r4, #2
   133a4:	d005      	beq.n	133b2 <z_arm_fault+0xc2>
		PR_EXC("  Bus fault on vector table read");
   133a6:	4630      	mov	r0, r6
   133a8:	4952      	ldr	r1, [pc, #328]	; (134f4 <z_arm_fault+0x204>)
	PR_FAULT_INFO(
   133aa:	f007 ffea 	bl	1b382 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   133ae:	2400      	movs	r4, #0
}
   133b0:	e006      	b.n	133c0 <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   133b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   133b4:	2a00      	cmp	r2, #0
   133b6:	da1d      	bge.n	133f4 <z_arm_fault+0x104>
		PR_EXC("  Debug event");
   133b8:	4630      	mov	r0, r6
   133ba:	494f      	ldr	r1, [pc, #316]	; (134f8 <z_arm_fault+0x208>)
   133bc:	f007 ffe1 	bl	1b382 <log_string_sync>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   133c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   133c4:	b99b      	cbnz	r3, 133ee <z_arm_fault+0xfe>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   133c6:	2220      	movs	r2, #32
   133c8:	4629      	mov	r1, r5
   133ca:	a802      	add	r0, sp, #8
   133cc:	f008 f897 	bl	1b4fe <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   133d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   133d2:	2f00      	cmp	r7, #0
   133d4:	d07a      	beq.n	134cc <z_arm_fault+0x1dc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   133d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   133da:	b922      	cbnz	r2, 133e6 <z_arm_fault+0xf6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   133dc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   133e0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   133e4:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   133e6:	4620      	mov	r0, r4
   133e8:	a902      	add	r1, sp, #8
   133ea:	f7ff fcb5 	bl	12d58 <z_arm_fatal_error>
}
   133ee:	b00b      	add	sp, #44	; 0x2c
   133f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   133f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   133f6:	005b      	lsls	r3, r3, #1
   133f8:	d53a      	bpl.n	13470 <z_arm_fault+0x180>
		PR_EXC("  Fault escalation (see below)");
   133fa:	4630      	mov	r0, r6
   133fc:	493f      	ldr	r1, [pc, #252]	; (134fc <z_arm_fault+0x20c>)
   133fe:	f007 ffc0 	bl	1b382 <log_string_sync>
	uint16_t fault_insn = *(ret_addr - 1);
   13402:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13404:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   13408:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1340c:	429a      	cmp	r2, r3
   1340e:	d00c      	beq.n	1342a <z_arm_fault+0x13a>
		} else if (SCB_MMFSR != 0) {
   13410:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13414:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   13418:	781b      	ldrb	r3, [r3, #0]
   1341a:	b16b      	cbz	r3, 13438 <z_arm_fault+0x148>
			reason = mem_manage_fault(esf, 1, recoverable);
   1341c:	2001      	movs	r0, #1
   1341e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   13422:	f7ff fe13 	bl	1304c <mem_manage_fault.isra.0>
		reason = bus_fault(esf, 0, recoverable);
   13426:	4604      	mov	r4, r0
		break;
   13428:	e7ca      	b.n	133c0 <z_arm_fault+0xd0>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1342a:	4630      	mov	r0, r6
   1342c:	682a      	ldr	r2, [r5, #0]
   1342e:	4934      	ldr	r1, [pc, #208]	; (13500 <z_arm_fault+0x210>)
   13430:	f007 ffa7 	bl	1b382 <log_string_sync>
			reason = esf->basic.r0;
   13434:	682c      	ldr	r4, [r5, #0]
   13436:	e7c3      	b.n	133c0 <z_arm_fault+0xd0>
		} else if (SCB_BFSR != 0) {
   13438:	4b32      	ldr	r3, [pc, #200]	; (13504 <z_arm_fault+0x214>)
   1343a:	781b      	ldrb	r3, [r3, #0]
   1343c:	b12b      	cbz	r3, 1344a <z_arm_fault+0x15a>
			reason = bus_fault(esf, 1, recoverable);
   1343e:	2001      	movs	r0, #1
   13440:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   13444:	f7ff fe80 	bl	13148 <bus_fault.isra.0>
   13448:	e7ed      	b.n	13426 <z_arm_fault+0x136>
		} else if (SCB_UFSR != 0) {
   1344a:	4b2f      	ldr	r3, [pc, #188]	; (13508 <z_arm_fault+0x218>)
   1344c:	881b      	ldrh	r3, [r3, #0]
   1344e:	b29b      	uxth	r3, r3
   13450:	b113      	cbz	r3, 13458 <z_arm_fault+0x168>
		reason = usage_fault(esf);
   13452:	f7ff fee5 	bl	13220 <usage_fault.isra.0>
   13456:	e7e6      	b.n	13426 <z_arm_fault+0x136>
			__ASSERT(0,
   13458:	4923      	ldr	r1, [pc, #140]	; (134e8 <z_arm_fault+0x1f8>)
   1345a:	f240 22c3 	movw	r2, #707	; 0x2c3
   1345e:	4823      	ldr	r0, [pc, #140]	; (134ec <z_arm_fault+0x1fc>)
   13460:	f007 fd78 	bl	1af54 <printk>
   13464:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   13468:	481f      	ldr	r0, [pc, #124]	; (134e8 <z_arm_fault+0x1f8>)
   1346a:	f007 ff57 	bl	1b31c <assert_post_action>
   1346e:	e7a7      	b.n	133c0 <z_arm_fault+0xd0>
   13470:	491d      	ldr	r1, [pc, #116]	; (134e8 <z_arm_fault+0x1f8>)
   13472:	f240 22c7 	movw	r2, #711	; 0x2c7
   13476:	481d      	ldr	r0, [pc, #116]	; (134ec <z_arm_fault+0x1fc>)
   13478:	f007 fd6c 	bl	1af54 <printk>
   1347c:	f240 21c7 	movw	r1, #711	; 0x2c7
   13480:	e7f2      	b.n	13468 <z_arm_fault+0x178>
		reason = mem_manage_fault(esf, 0, recoverable);
   13482:	2000      	movs	r0, #0
   13484:	f10d 0107 	add.w	r1, sp, #7
   13488:	e7cb      	b.n	13422 <z_arm_fault+0x132>
		reason = bus_fault(esf, 0, recoverable);
   1348a:	2000      	movs	r0, #0
   1348c:	f10d 0107 	add.w	r1, sp, #7
   13490:	e7d8      	b.n	13444 <z_arm_fault+0x154>
   13492:	4813      	ldr	r0, [pc, #76]	; (134e0 <z_arm_fault+0x1f0>)
   13494:	4b11      	ldr	r3, [pc, #68]	; (134dc <z_arm_fault+0x1ec>)
	PR_FAULT_INFO(
   13496:	491d      	ldr	r1, [pc, #116]	; (1350c <z_arm_fault+0x21c>)
   13498:	1ac0      	subs	r0, r0, r3
   1349a:	08c0      	lsrs	r0, r0, #3
   1349c:	0180      	lsls	r0, r0, #6
   1349e:	f040 0001 	orr.w	r0, r0, #1
   134a2:	e782      	b.n	133aa <z_arm_fault+0xba>
   134a4:	4b0d      	ldr	r3, [pc, #52]	; (134dc <z_arm_fault+0x1ec>)
   134a6:	480e      	ldr	r0, [pc, #56]	; (134e0 <z_arm_fault+0x1f0>)
	PR_FAULT_INFO("***** %s %d) *****",
   134a8:	4919      	ldr	r1, [pc, #100]	; (13510 <z_arm_fault+0x220>)
   134aa:	1ac0      	subs	r0, r0, r3
   134ac:	08c0      	lsrs	r0, r0, #3
   134ae:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   134b2:	ea4f 1080 	mov.w	r0, r0, lsl #6
   134b6:	4a17      	ldr	r2, [pc, #92]	; (13514 <z_arm_fault+0x224>)
   134b8:	f1a6 0310 	sub.w	r3, r6, #16
   134bc:	bf08      	it	eq
   134be:	460a      	moveq	r2, r1
   134c0:	f040 0001 	orr.w	r0, r0, #1
   134c4:	4914      	ldr	r1, [pc, #80]	; (13518 <z_arm_fault+0x228>)
   134c6:	f007 ff5c 	bl	1b382 <log_string_sync>
   134ca:	e770      	b.n	133ae <z_arm_fault+0xbe>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   134cc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   134d0:	f023 0301 	bic.w	r3, r3, #1
   134d4:	e786      	b.n	133e4 <z_arm_fault+0xf4>
   134d6:	bf00      	nop
   134d8:	e000ed00 	.word	0xe000ed00
   134dc:	0001c308 	.word	0x0001c308
   134e0:	0001c348 	.word	0x0001c348
   134e4:	0001cff3 	.word	0x0001cff3
   134e8:	0001ce0c 	.word	0x0001ce0c
   134ec:	0001c625 	.word	0x0001c625
   134f0:	0001d016 	.word	0x0001d016
   134f4:	0001d02d 	.word	0x0001d02d
   134f8:	0001d04e 	.word	0x0001d04e
   134fc:	0001d05c 	.word	0x0001d05c
   13500:	0001d07b 	.word	0x0001d07b
   13504:	e000ed29 	.word	0xe000ed29
   13508:	e000ed2a 	.word	0xe000ed2a
   1350c:	0001d097 	.word	0x0001d097
   13510:	0001cfc5 	.word	0x0001cfc5
   13514:	0001cfda 	.word	0x0001cfda
   13518:	0001d0bb 	.word	0x0001d0bb

0001351c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1351c:	4b04      	ldr	r3, [pc, #16]	; (13530 <z_arm_fault_init+0x14>)
   1351e:	695a      	ldr	r2, [r3, #20]
   13520:	f042 0210 	orr.w	r2, r2, #16
   13524:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   13526:	695a      	ldr	r2, [r3, #20]
   13528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1352c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1352e:	4770      	bx	lr
   13530:	e000ed00 	.word	0xe000ed00

00013534 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13534:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13538:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1353c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1353e:	4672      	mov	r2, lr
	bl z_arm_fault
   13540:	f7ff fed6 	bl	132f0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13544:	bd01      	pop	{r0, pc}
   13546:	bf00      	nop

00013548 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13548:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1354a:	2120      	movs	r1, #32
   1354c:	4803      	ldr	r0, [pc, #12]	; (1355c <z_arm_interrupt_init+0x14>)
   1354e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13550:	3301      	adds	r3, #1
   13552:	2b41      	cmp	r3, #65	; 0x41
   13554:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13558:	d1f9      	bne.n	1354e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1355a:	4770      	bx	lr
   1355c:	e000e100 	.word	0xe000e100

00013560 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13560:	f008 fd50 	bl	1c004 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13564:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13566:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1356a:	4808      	ldr	r0, [pc, #32]	; (1358c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1356c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   13570:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13572:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13576:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1357a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1357c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1357e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13582:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13586:	f7ff fc89 	bl	12e9c <z_arm_prep_c>
   1358a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   1358c:	2000f068 	.word	0x2000f068

00013590 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   13590:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13594:	4905      	ldr	r1, [pc, #20]	; (135ac <sys_arch_reboot+0x1c>)
   13596:	4b06      	ldr	r3, [pc, #24]	; (135b0 <sys_arch_reboot+0x20>)
   13598:	68ca      	ldr	r2, [r1, #12]
   1359a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1359e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   135a0:	60cb      	str	r3, [r1, #12]
   135a2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   135a6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   135a8:	e7fd      	b.n	135a6 <sys_arch_reboot+0x16>
   135aa:	bf00      	nop
   135ac:	e000ed00 	.word	0xe000ed00
   135b0:	05fa0004 	.word	0x05fa0004

000135b4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   135b4:	4b06      	ldr	r3, [pc, #24]	; (135d0 <z_impl_k_thread_abort+0x1c>)
   135b6:	689b      	ldr	r3, [r3, #8]
   135b8:	4283      	cmp	r3, r0
   135ba:	d107      	bne.n	135cc <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   135bc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   135c0:	b123      	cbz	r3, 135cc <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   135c2:	4a04      	ldr	r2, [pc, #16]	; (135d4 <z_impl_k_thread_abort+0x20>)
   135c4:	6853      	ldr	r3, [r2, #4]
   135c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   135ca:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   135cc:	f006 bfd0 	b.w	1a570 <z_thread_abort>
   135d0:	2000d56c 	.word	0x2000d56c
   135d4:	e000ed00 	.word	0xe000ed00

000135d8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   135d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   135da:	4c09      	ldr	r4, [pc, #36]	; (13600 <z_arm_configure_static_mpu_regions+0x28>)
   135dc:	4a09      	ldr	r2, [pc, #36]	; (13604 <z_arm_configure_static_mpu_regions+0x2c>)
   135de:	4623      	mov	r3, r4
   135e0:	2101      	movs	r1, #1
   135e2:	4809      	ldr	r0, [pc, #36]	; (13608 <z_arm_configure_static_mpu_regions+0x30>)
   135e4:	f000 f916 	bl	13814 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   135e8:	2300      	movs	r3, #0
   135ea:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   135ec:	4b07      	ldr	r3, [pc, #28]	; (1360c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   135ee:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   135f0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   135f2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   135f4:	9301      	str	r3, [sp, #4]
   135f6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   135f8:	f000 f928 	bl	1384c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   135fc:	b004      	add	sp, #16
   135fe:	bd10      	pop	{r4, pc}
   13600:	20040000 	.word	0x20040000
   13604:	2000c500 	.word	0x2000c500
   13608:	0001c41c 	.word	0x0001c41c
   1360c:	2000cb78 	.word	0x2000cb78

00013610 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   13610:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   13612:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   13614:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   13616:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1361a:	f004 031f 	and.w	r3, r4, #31
   1361e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   13620:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   13622:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   13624:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   13628:	4904      	ldr	r1, [pc, #16]	; (1363c <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1362a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1362e:	f043 0301 	orr.w	r3, r3, #1
   13632:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   13634:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   13636:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   13638:	bd10      	pop	{r4, pc}
   1363a:	bf00      	nop
   1363c:	e000ed90 	.word	0xe000ed90

00013640 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   13640:	4602      	mov	r2, r0
   13642:	b508      	push	{r3, lr}
   13644:	4806      	ldr	r0, [pc, #24]	; (13660 <region_allocate_and_init.part.0+0x20>)
   13646:	4b07      	ldr	r3, [pc, #28]	; (13664 <region_allocate_and_init.part.0+0x24>)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13648:	4907      	ldr	r1, [pc, #28]	; (13668 <region_allocate_and_init.part.0+0x28>)
   1364a:	1a1b      	subs	r3, r3, r0
   1364c:	08db      	lsrs	r3, r3, #3
   1364e:	019b      	lsls	r3, r3, #6
   13650:	f043 0001 	orr.w	r0, r3, #1
   13654:	f007 fe95 	bl	1b382 <log_string_sync>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   13658:	f06f 0015 	mvn.w	r0, #21
   1365c:	bd08      	pop	{r3, pc}
   1365e:	bf00      	nop
   13660:	0001c308 	.word	0x0001c308
   13664:	0001c338 	.word	0x0001c338
   13668:	0001d0d2 	.word	0x0001d0d2

0001366c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13670:	4688      	mov	r8, r1
   13672:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13674:	4606      	mov	r6, r0
   13676:	2700      	movs	r7, #0
	MPU->RNR = index;
   13678:	4d58      	ldr	r5, [pc, #352]	; (137dc <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1367a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1367c:	4547      	cmp	r7, r8
   1367e:	da31      	bge.n	136e4 <mpu_configure_regions_and_partition.constprop.0+0x78>
		if (regions[i].size == 0U) {
   13680:	f8d6 9004 	ldr.w	r9, [r6, #4]
   13684:	f1b9 0f00 	cmp.w	r9, #0
   13688:	d04e      	beq.n	13728 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   1368a:	f1b9 0f1f 	cmp.w	r9, #31
   1368e:	d91c      	bls.n	136ca <mpu_configure_regions_and_partition.constprop.0+0x5e>
		&&
   13690:	f019 0f1f 	tst.w	r9, #31
   13694:	d119      	bne.n	136ca <mpu_configure_regions_and_partition.constprop.0+0x5e>
		((part->start &
   13696:	f8d6 a000 	ldr.w	sl, [r6]
		&&
   1369a:	f01a 0f1f 	tst.w	sl, #31
   1369e:	d114      	bne.n	136ca <mpu_configure_regions_and_partition.constprop.0+0x5e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   136a0:	4650      	mov	r0, sl
   136a2:	f007 fed0 	bl	1b446 <arm_cmse_mpu_region_get>
   136a6:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   136a8:	eb09 000a 	add.w	r0, r9, sl
   136ac:	3801      	subs	r0, #1
   136ae:	f007 feca 	bl	1b446 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   136b2:	4583      	cmp	fp, r0
   136b4:	d01a      	beq.n	136ec <mpu_configure_regions_and_partition.constprop.0+0x80>
	return -EINVAL;
   136b6:	f06f 0b15 	mvn.w	fp, #21
   136ba:	4849      	ldr	r0, [pc, #292]	; (137e0 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   136bc:	4b49      	ldr	r3, [pc, #292]	; (137e4 <mpu_configure_regions_and_partition.constprop.0+0x178>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   136be:	465a      	mov	r2, fp
   136c0:	1ac0      	subs	r0, r0, r3
   136c2:	08c0      	lsrs	r0, r0, #3
   136c4:	4948      	ldr	r1, [pc, #288]	; (137e8 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   136c6:	0180      	lsls	r0, r0, #6
   136c8:	e006      	b.n	136d8 <mpu_configure_regions_and_partition.constprop.0+0x6c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   136ca:	463a      	mov	r2, r7
   136cc:	4844      	ldr	r0, [pc, #272]	; (137e0 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   136ce:	4b45      	ldr	r3, [pc, #276]	; (137e4 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   136d0:	4946      	ldr	r1, [pc, #280]	; (137ec <mpu_configure_regions_and_partition.constprop.0+0x180>)
   136d2:	1ac0      	subs	r0, r0, r3
   136d4:	08c0      	lsrs	r0, r0, #3
   136d6:	0180      	lsls	r0, r0, #6
			LOG_ERR("Invalid underlying region index %u",
   136d8:	f040 0001 	orr.w	r0, r0, #1
   136dc:	f007 fe51 	bl	1b382 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   136e0:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   136e4:	4620      	mov	r0, r4
   136e6:	b005      	add	sp, #20
   136e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   136ec:	f11b 0f16 	cmn.w	fp, #22
   136f0:	d0e3      	beq.n	136ba <mpu_configure_regions_and_partition.constprop.0+0x4e>
			(u_reg_index > (reg_index - 1))) {
   136f2:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   136f4:	455b      	cmp	r3, fp
   136f6:	dbe0      	blt.n	136ba <mpu_configure_regions_and_partition.constprop.0+0x4e>
	MPU->RNR = index;
   136f8:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   136fc:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   136fe:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   13702:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   13704:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   13708:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1370c:	e9d6 3200 	ldrd	r3, r2, [r6]
   13710:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   13712:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   13714:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   13718:	d11b      	bne.n	13752 <mpu_configure_regions_and_partition.constprop.0+0xe6>
   1371a:	45ca      	cmp	sl, r9
   1371c:	d107      	bne.n	1372e <mpu_configure_regions_and_partition.constprop.0+0xc2>
			mpu_configure_region(u_reg_index, &regions[i]);
   1371e:	4631      	mov	r1, r6
   13720:	fa5f f08b 	uxtb.w	r0, fp
   13724:	f007 fe98 	bl	1b458 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   13728:	3701      	adds	r7, #1
   1372a:	360c      	adds	r6, #12
   1372c:	e7a6      	b.n	1367c <mpu_configure_regions_and_partition.constprop.0+0x10>
				mpu_configure_region(reg_index, &regions[i]);
   1372e:	4631      	mov	r1, r6
	MPU->RNR = index;
   13730:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13734:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   13736:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1373a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1373e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13740:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   13742:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   13744:	f007 fe88 	bl	1b458 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   13748:	f110 0f16 	cmn.w	r0, #22
   1374c:	d0c8      	beq.n	136e0 <mpu_configure_regions_and_partition.constprop.0+0x74>
			reg_index++;
   1374e:	1c44      	adds	r4, r0, #1
   13750:	e7ea      	b.n	13728 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
   13752:	3b01      	subs	r3, #1
   13754:	45ca      	cmp	sl, r9
   13756:	b2e0      	uxtb	r0, r4
   13758:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   1375c:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
   13760:	d106      	bne.n	13770 <mpu_configure_regions_and_partition.constprop.0+0x104>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13762:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   13764:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13766:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1376a:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1376c:	612b      	str	r3, [r5, #16]
			reg_index =
   1376e:	e7e9      	b.n	13744 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13770:	6929      	ldr	r1, [r5, #16]
   13772:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   13776:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13778:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   1377a:	4631      	mov	r1, r6
   1377c:	f007 fe6c 	bl	1b458 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   13780:	f110 0f16 	cmn.w	r0, #22
   13784:	d0ac      	beq.n	136e0 <mpu_configure_regions_and_partition.constprop.0+0x74>
	MPU->RNR = index;
   13786:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   1378a:	68ea      	ldr	r2, [r5, #12]
   1378c:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   13790:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   13794:	f362 0304 	bfi	r3, r2, #0, #5
   13798:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1379c:	692b      	ldr	r3, [r5, #16]
   1379e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   137a2:	085b      	lsrs	r3, r3, #1
   137a4:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
   137a8:	e9d6 1300 	ldrd	r1, r3, [r6]
   137ac:	440b      	add	r3, r1
   137ae:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   137b0:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   137b4:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   137b6:	4453      	add	r3, sl
   137b8:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   137bc:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   137be:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   137c2:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   137c4:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
   137c8:	9303      	str	r3, [sp, #12]
   137ca:	d902      	bls.n	137d2 <mpu_configure_regions_and_partition.constprop.0+0x166>
   137cc:	f7ff ff38 	bl	13640 <region_allocate_and_init.part.0>
   137d0:	e7ba      	b.n	13748 <mpu_configure_regions_and_partition.constprop.0+0xdc>
	region_init(index, region_conf);
   137d2:	4669      	mov	r1, sp
   137d4:	f7ff ff1c 	bl	13610 <region_init>
			if (reg_index == -EINVAL) {
   137d8:	e7b9      	b.n	1374e <mpu_configure_regions_and_partition.constprop.0+0xe2>
   137da:	bf00      	nop
   137dc:	e000ed90 	.word	0xe000ed90
   137e0:	0001c338 	.word	0x0001c338
   137e4:	0001c308 	.word	0x0001c308
   137e8:	0001d11b 	.word	0x0001d11b
   137ec:	0001d0f8 	.word	0x0001d0f8

000137f0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   137f0:	2205      	movs	r2, #5
   137f2:	4b03      	ldr	r3, [pc, #12]	; (13800 <arm_core_mpu_enable+0x10>)
   137f4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   137f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   137fa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   137fe:	4770      	bx	lr
   13800:	e000ed90 	.word	0xe000ed90

00013804 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13804:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13808:	2200      	movs	r2, #0
   1380a:	4b01      	ldr	r3, [pc, #4]	; (13810 <arm_core_mpu_disable+0xc>)
   1380c:	605a      	str	r2, [r3, #4]
}
   1380e:	4770      	bx	lr
   13810:	e000ed90 	.word	0xe000ed90

00013814 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13814:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13816:	4c0a      	ldr	r4, [pc, #40]	; (13840 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   13818:	7822      	ldrb	r2, [r4, #0]
   1381a:	f7ff ff27 	bl	1366c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1381e:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   13820:	3016      	adds	r0, #22
   13822:	d10c      	bne.n	1383e <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   13824:	4907      	ldr	r1, [pc, #28]	; (13844 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   13826:	4808      	ldr	r0, [pc, #32]	; (13848 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   13828:	f240 1211 	movw	r2, #273	; 0x111
   1382c:	f007 fb92 	bl	1af54 <printk>
			regions_num);
	}
}
   13830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   13834:	f240 1111 	movw	r1, #273	; 0x111
   13838:	4802      	ldr	r0, [pc, #8]	; (13844 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   1383a:	f007 bd6f 	b.w	1b31c <assert_post_action>
}
   1383e:	bd10      	pop	{r4, pc}
   13840:	2000d5dc 	.word	0x2000d5dc
   13844:	0001d13e 	.word	0x0001d13e
   13848:	0001c625 	.word	0x0001c625

0001384c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   1384c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13850:	4d2d      	ldr	r5, [pc, #180]	; (13908 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
   13852:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   13854:	4606      	mov	r6, r0
   13856:	f04f 0800 	mov.w	r8, #0
   1385a:	46ab      	mov	fp, r5
	MPU->RNR = index;
   1385c:	4f2b      	ldr	r7, [pc, #172]	; (1390c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1385e:	45d0      	cmp	r8, sl
   13860:	db02      	blt.n	13868 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   13862:	b003      	add	sp, #12
   13864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   13868:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1386c:	f1b9 0f00 	cmp.w	r9, #0
   13870:	d044      	beq.n	138fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   13872:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   13874:	4608      	mov	r0, r1
   13876:	9101      	str	r1, [sp, #4]
   13878:	f007 fde5 	bl	1b446 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1387c:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1387e:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   13880:	eb09 0001 	add.w	r0, r9, r1
   13884:	3801      	subs	r0, #1
   13886:	f007 fdde 	bl	1b446 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1388a:	4284      	cmp	r4, r0
   1388c:	f04f 0214 	mov.w	r2, #20
   13890:	4b1f      	ldr	r3, [pc, #124]	; (13910 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   13892:	d013      	beq.n	138bc <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
   13894:	f06f 0315 	mvn.w	r3, #21
   13898:	fb02 f808 	mul.w	r8, r2, r8
   1389c:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   138a0:	f240 1221 	movw	r2, #289	; 0x121
   138a4:	491b      	ldr	r1, [pc, #108]	; (13914 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   138a6:	481c      	ldr	r0, [pc, #112]	; (13918 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   138a8:	f007 fb54 	bl	1af54 <printk>
   138ac:	f240 1121 	movw	r1, #289	; 0x121
   138b0:	4818      	ldr	r0, [pc, #96]	; (13914 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
   138b2:	b003      	add	sp, #12
   138b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   138b8:	f007 bd30 	b.w	1b31c <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   138bc:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   138c0:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   138c2:	d0ed      	beq.n	138a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   138c4:	7819      	ldrb	r1, [r3, #0]
   138c6:	42a1      	cmp	r1, r4
   138c8:	ddea      	ble.n	138a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   138ca:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   138ce:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   138d0:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   138d2:	68fc      	ldr	r4, [r7, #12]
   138d4:	f100 0108 	add.w	r1, r0, #8
   138d8:	7b00      	ldrb	r0, [r0, #12]
   138da:	f364 0004 	bfi	r0, r4, #0, #5
   138de:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   138e0:	6938      	ldr	r0, [r7, #16]
   138e2:	790c      	ldrb	r4, [r1, #4]
   138e4:	0840      	lsrs	r0, r0, #1
   138e6:	f360 1447 	bfi	r4, r0, #5, #3
   138ea:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   138ec:	68f9      	ldr	r1, [r7, #12]
   138ee:	f021 011f 	bic.w	r1, r1, #31
   138f2:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   138f4:	6939      	ldr	r1, [r7, #16]
   138f6:	f021 011f 	bic.w	r1, r1, #31
   138fa:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   138fc:	f108 0801 	add.w	r8, r8, #1
   13900:	3514      	adds	r5, #20
   13902:	360c      	adds	r6, #12
   13904:	e7ab      	b.n	1385e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   13906:	bf00      	nop
   13908:	2000d0a0 	.word	0x2000d0a0
   1390c:	e000ed90 	.word	0xe000ed90
   13910:	2000d5dc 	.word	0x2000d5dc
   13914:	0001d13e 	.word	0x0001d13e
   13918:	0001c625 	.word	0x0001c625

0001391c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1391c:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1391e:	4d1b      	ldr	r5, [pc, #108]	; (1398c <z_arm_mpu_init+0x70>)
   13920:	682e      	ldr	r6, [r5, #0]
   13922:	2e10      	cmp	r6, #16
   13924:	d90d      	bls.n	13942 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   13926:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1392a:	4919      	ldr	r1, [pc, #100]	; (13990 <z_arm_mpu_init+0x74>)
   1392c:	4819      	ldr	r0, [pc, #100]	; (13994 <z_arm_mpu_init+0x78>)
   1392e:	f007 fb11 	bl	1af54 <printk>
   13932:	4817      	ldr	r0, [pc, #92]	; (13990 <z_arm_mpu_init+0x74>)
   13934:	f44f 71a4 	mov.w	r1, #328	; 0x148
   13938:	f007 fcf0 	bl	1b31c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   1393c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   13940:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   13942:	f7ff ff5f 	bl	13804 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13946:	2000      	movs	r0, #0
	MPU->MAIR0 =
   13948:	4c13      	ldr	r4, [pc, #76]	; (13998 <z_arm_mpu_init+0x7c>)
   1394a:	4a14      	ldr	r2, [pc, #80]	; (1399c <z_arm_mpu_init+0x80>)
   1394c:	6322      	str	r2, [r4, #48]	; 0x30
   1394e:	4286      	cmp	r6, r0
   13950:	d115      	bne.n	1397e <z_arm_mpu_init+0x62>
	static_regions_num = mpu_config.num_regions;
   13952:	4b13      	ldr	r3, [pc, #76]	; (139a0 <z_arm_mpu_init+0x84>)
   13954:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   13956:	f7ff ff4b 	bl	137f0 <arm_core_mpu_enable>
	__ASSERT(
   1395a:	6823      	ldr	r3, [r4, #0]
   1395c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   13960:	2b10      	cmp	r3, #16
   13962:	d00a      	beq.n	1397a <z_arm_mpu_init+0x5e>
   13964:	490a      	ldr	r1, [pc, #40]	; (13990 <z_arm_mpu_init+0x74>)
   13966:	480b      	ldr	r0, [pc, #44]	; (13994 <z_arm_mpu_init+0x78>)
   13968:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   1396c:	f007 faf2 	bl	1af54 <printk>
   13970:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   13974:	4806      	ldr	r0, [pc, #24]	; (13990 <z_arm_mpu_init+0x74>)
   13976:	f007 fcd1 	bl	1b31c <assert_post_action>
	return 0;
   1397a:	2000      	movs	r0, #0
   1397c:	e7e0      	b.n	13940 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1397e:	6869      	ldr	r1, [r5, #4]
   13980:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   13984:	f7ff fe44 	bl	13610 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13988:	3001      	adds	r0, #1
   1398a:	e7e0      	b.n	1394e <z_arm_mpu_init+0x32>
   1398c:	0001c428 	.word	0x0001c428
   13990:	0001d13e 	.word	0x0001d13e
   13994:	0001c625 	.word	0x0001c625
   13998:	e000ed90 	.word	0xe000ed90
   1399c:	0044ffaa 	.word	0x0044ffaa
   139a0:	2000d5dc 	.word	0x2000d5dc

000139a4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   139a4:	4b01      	ldr	r3, [pc, #4]	; (139ac <__stdout_hook_install+0x8>)
   139a6:	6018      	str	r0, [r3, #0]
}
   139a8:	4770      	bx	lr
   139aa:	bf00      	nop
   139ac:	2000c5e0 	.word	0x2000c5e0

000139b0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   139b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   139b4:	4c0e      	ldr	r4, [pc, #56]	; (139f0 <onoff_start+0x40>)
{
   139b6:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   139b8:	1b05      	subs	r5, r0, r4
   139ba:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   139be:	250c      	movs	r5, #12
   139c0:	435d      	muls	r5, r3
   139c2:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   139c6:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   139c8:	4420      	add	r0, r4
   139ca:	2140      	movs	r1, #64	; 0x40
   139cc:	f007 fdae 	bl	1b52c <set_starting_state>
	if (err < 0) {
   139d0:	1e01      	subs	r1, r0, #0
   139d2:	db08      	blt.n	139e6 <onoff_start+0x36>
	subdata->cb = cb;
   139d4:	4b07      	ldr	r3, [pc, #28]	; (139f4 <onoff_start+0x44>)
   139d6:	442c      	add	r4, r5
	subdata->user_data = user_data;
   139d8:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   139dc:	4b06      	ldr	r3, [pc, #24]	; (139f8 <onoff_start+0x48>)
   139de:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   139e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   139e4:	4718      	bx	r3
		notify(mgr, err);
   139e6:	4638      	mov	r0, r7
   139e8:	4633      	mov	r3, r6
}
   139ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   139ee:	4718      	bx	r3
   139f0:	2000d0c4 	.word	0x2000d0c4
   139f4:	0001b58f 	.word	0x0001b58f
   139f8:	0001c468 	.word	0x0001c468

000139fc <get_status>:
{
   139fc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   139fe:	b2cc      	uxtb	r4, r1
   13a00:	2c01      	cmp	r4, #1
{
   13a02:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13a04:	d908      	bls.n	13a18 <get_status+0x1c>
   13a06:	4908      	ldr	r1, [pc, #32]	; (13a28 <get_status+0x2c>)
   13a08:	4808      	ldr	r0, [pc, #32]	; (13a2c <get_status+0x30>)
   13a0a:	2279      	movs	r2, #121	; 0x79
   13a0c:	f007 faa2 	bl	1af54 <printk>
   13a10:	2179      	movs	r1, #121	; 0x79
   13a12:	4805      	ldr	r0, [pc, #20]	; (13a28 <get_status+0x2c>)
   13a14:	f007 fc82 	bl	1b31c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   13a18:	210c      	movs	r1, #12
   13a1a:	692b      	ldr	r3, [r5, #16]
   13a1c:	fb04 3401 	mla	r4, r4, r1, r3
   13a20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   13a22:	f000 0007 	and.w	r0, r0, #7
   13a26:	bd38      	pop	{r3, r4, r5, pc}
   13a28:	0001d184 	.word	0x0001d184
   13a2c:	0001c625 	.word	0x0001c625

00013a30 <stop>:
{
   13a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a32:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13a34:	2c01      	cmp	r4, #1
{
   13a36:	4605      	mov	r5, r0
   13a38:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   13a3a:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13a3c:	d90a      	bls.n	13a54 <stop+0x24>
   13a3e:	4918      	ldr	r1, [pc, #96]	; (13aa0 <stop+0x70>)
   13a40:	4818      	ldr	r0, [pc, #96]	; (13aa4 <stop+0x74>)
   13a42:	f240 124d 	movw	r2, #333	; 0x14d
   13a46:	f007 fa85 	bl	1af54 <printk>
   13a4a:	f240 114d 	movw	r1, #333	; 0x14d
   13a4e:	4814      	ldr	r0, [pc, #80]	; (13aa0 <stop+0x70>)
   13a50:	f007 fc64 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   13a54:	f04f 0320 	mov.w	r3, #32
   13a58:	f3ef 8211 	mrs	r2, BASEPRI
   13a5c:	f383 8812 	msr	BASEPRI_MAX, r3
   13a60:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13a64:	230c      	movs	r3, #12
   13a66:	fb03 7104 	mla	r1, r3, r4, r7
   13a6a:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   13a6c:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   13a70:	d001      	beq.n	13a76 <stop+0x46>
   13a72:	428e      	cmp	r6, r1
   13a74:	d111      	bne.n	13a9a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13a76:	2101      	movs	r1, #1
	int err = 0;
   13a78:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13a7a:	fb03 7304 	mla	r3, r3, r4, r7
   13a7e:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
   13a80:	f382 8811 	msr	BASEPRI, r2
   13a84:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   13a88:	b930      	cbnz	r0, 13a98 <stop+0x68>
	get_sub_config(dev, type)->stop();
   13a8a:	230c      	movs	r3, #12
   13a8c:	6869      	ldr	r1, [r5, #4]
   13a8e:	fb03 1404 	mla	r4, r3, r4, r1
   13a92:	6863      	ldr	r3, [r4, #4]
   13a94:	4798      	blx	r3
	return 0;
   13a96:	2000      	movs	r0, #0
}
   13a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   13a9a:	f04f 30ff 	mov.w	r0, #4294967295
   13a9e:	e7ef      	b.n	13a80 <stop+0x50>
   13aa0:	0001d184 	.word	0x0001d184
   13aa4:	0001c625 	.word	0x0001c625

00013aa8 <onoff_stop>:
{
   13aa8:	b570      	push	{r4, r5, r6, lr}
   13aaa:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   13aac:	4906      	ldr	r1, [pc, #24]	; (13ac8 <onoff_stop+0x20>)
{
   13aae:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   13ab0:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13ab2:	1149      	asrs	r1, r1, #5
   13ab4:	2240      	movs	r2, #64	; 0x40
   13ab6:	4805      	ldr	r0, [pc, #20]	; (13acc <onoff_stop+0x24>)
   13ab8:	f7ff ffba 	bl	13a30 <stop>
	notify(mgr, res);
   13abc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13abe:	4601      	mov	r1, r0
	notify(mgr, res);
   13ac0:	4620      	mov	r0, r4
}
   13ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   13ac6:	4718      	bx	r3
   13ac8:	2000d0c4 	.word	0x2000d0c4
   13acc:	0001c088 	.word	0x0001c088

00013ad0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   13ad0:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13ad2:	2200      	movs	r2, #0
   13ad4:	2101      	movs	r1, #1
{
   13ad6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13ad8:	2005      	movs	r0, #5
   13ada:	f7ff f9a7 	bl	12e2c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   13ade:	2005      	movs	r0, #5
   13ae0:	f7ff f972 	bl	12dc8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   13ae4:	480f      	ldr	r0, [pc, #60]	; (13b24 <clk_init+0x54>)
   13ae6:	f002 f91d 	bl	15d24 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   13aea:	4b0f      	ldr	r3, [pc, #60]	; (13b28 <clk_init+0x58>)
   13aec:	4298      	cmp	r0, r3
   13aee:	d115      	bne.n	13b1c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13af0:	f002 f938 	bl	15d64 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   13af4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   13af6:	490d      	ldr	r1, [pc, #52]	; (13b2c <clk_init+0x5c>)
   13af8:	4630      	mov	r0, r6
   13afa:	f007 fa79 	bl	1aff0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   13afe:	2800      	cmp	r0, #0
   13b00:	db0b      	blt.n	13b1a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13b02:	2501      	movs	r5, #1
   13b04:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   13b06:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13b08:	4908      	ldr	r1, [pc, #32]	; (13b2c <clk_init+0x5c>)
   13b0a:	f104 0020 	add.w	r0, r4, #32
   13b0e:	f007 fa6f 	bl	1aff0 <onoff_manager_init>
		if (err < 0) {
   13b12:	2800      	cmp	r0, #0
   13b14:	db01      	blt.n	13b1a <clk_init+0x4a>
	}

	return 0;
   13b16:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13b18:	6565      	str	r5, [r4, #84]	; 0x54
}
   13b1a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   13b1c:	f06f 0004 	mvn.w	r0, #4
   13b20:	e7fb      	b.n	13b1a <clk_init+0x4a>
   13b22:	bf00      	nop
   13b24:	00013b65 	.word	0x00013b65
   13b28:	0bad0000 	.word	0x0bad0000
   13b2c:	0001c480 	.word	0x0001c480

00013b30 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   13b30:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   13b32:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   13b34:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   13b36:	434b      	muls	r3, r1
   13b38:	4808      	ldr	r0, [pc, #32]	; (13b5c <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   13b3a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   13b3c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   13b3e:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   13b40:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   13b44:	4418      	add	r0, r3
	sub_data->cb = NULL;
   13b46:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   13b48:	f007 fd0e 	bl	1b568 <set_on_state>
	if (callback) {
   13b4c:	b12d      	cbz	r5, 13b5a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   13b4e:	4632      	mov	r2, r6
   13b50:	462b      	mov	r3, r5
}
   13b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   13b56:	4802      	ldr	r0, [pc, #8]	; (13b60 <clkstarted_handle.constprop.0+0x30>)
   13b58:	4718      	bx	r3
}
   13b5a:	bd70      	pop	{r4, r5, r6, pc}
   13b5c:	2000d0c4 	.word	0x2000d0c4
   13b60:	0001c088 	.word	0x0001c088

00013b64 <clock_event_handler>:
	switch (event) {
   13b64:	2801      	cmp	r0, #1
{
   13b66:	b508      	push	{r3, lr}
	switch (event) {
   13b68:	d006      	beq.n	13b78 <clock_event_handler+0x14>
   13b6a:	2803      	cmp	r0, #3
   13b6c:	d008      	beq.n	13b80 <clock_event_handler+0x1c>
   13b6e:	b9a0      	cbnz	r0, 13b9a <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   13b70:	4b0f      	ldr	r3, [pc, #60]	; (13bb0 <clock_event_handler+0x4c>)
   13b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13b74:	075b      	lsls	r3, r3, #29
   13b76:	d119      	bne.n	13bac <clock_event_handler+0x48>
}
   13b78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13b7c:	f7ff bfd8 	b.w	13b30 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   13b80:	490c      	ldr	r1, [pc, #48]	; (13bb4 <clock_event_handler+0x50>)
   13b82:	f240 225e 	movw	r2, #606	; 0x25e
   13b86:	480c      	ldr	r0, [pc, #48]	; (13bb8 <clock_event_handler+0x54>)
   13b88:	f007 f9e4 	bl	1af54 <printk>
   13b8c:	f240 215e 	movw	r1, #606	; 0x25e
}
   13b90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   13b94:	4807      	ldr	r0, [pc, #28]	; (13bb4 <clock_event_handler+0x50>)
   13b96:	f007 bbc1 	b.w	1b31c <assert_post_action>
   13b9a:	4906      	ldr	r1, [pc, #24]	; (13bb4 <clock_event_handler+0x50>)
   13b9c:	f240 2262 	movw	r2, #610	; 0x262
   13ba0:	4805      	ldr	r0, [pc, #20]	; (13bb8 <clock_event_handler+0x54>)
   13ba2:	f007 f9d7 	bl	1af54 <printk>
   13ba6:	f240 2162 	movw	r1, #610	; 0x262
   13baa:	e7f1      	b.n	13b90 <clock_event_handler+0x2c>
}
   13bac:	bd08      	pop	{r3, pc}
   13bae:	bf00      	nop
   13bb0:	2000d0c4 	.word	0x2000d0c4
   13bb4:	0001d184 	.word	0x0001d184
   13bb8:	0001c625 	.word	0x0001c625

00013bbc <generic_hfclk_start>:
{
   13bbc:	b508      	push	{r3, lr}
	__asm__ volatile(
   13bbe:	f04f 0320 	mov.w	r3, #32
   13bc2:	f3ef 8111 	mrs	r1, BASEPRI
   13bc6:	f383 8812 	msr	BASEPRI_MAX, r3
   13bca:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   13bce:	4a11      	ldr	r2, [pc, #68]	; (13c14 <generic_hfclk_start+0x58>)
   13bd0:	6813      	ldr	r3, [r2, #0]
   13bd2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   13bd6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   13bda:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   13bdc:	d00b      	beq.n	13bf6 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13bde:	4a0e      	ldr	r2, [pc, #56]	; (13c18 <generic_hfclk_start+0x5c>)
   13be0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13be4:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   13be8:	f013 0301 	ands.w	r3, r3, #1
   13bec:	d003      	beq.n	13bf6 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   13bee:	480b      	ldr	r0, [pc, #44]	; (13c1c <generic_hfclk_start+0x60>)
   13bf0:	f007 fcba 	bl	1b568 <set_on_state>
			already_started = true;
   13bf4:	2301      	movs	r3, #1
	__asm__ volatile(
   13bf6:	f381 8811 	msr	BASEPRI, r1
   13bfa:	f3bf 8f6f 	isb	sy
	if (already_started) {
   13bfe:	b123      	cbz	r3, 13c0a <generic_hfclk_start+0x4e>
}
   13c00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   13c04:	2000      	movs	r0, #0
   13c06:	f7ff bf93 	b.w	13b30 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   13c0a:	2001      	movs	r0, #1
}
   13c0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13c10:	f002 b8c6 	b.w	15da0 <nrfx_clock_start>
   13c14:	2000d11c 	.word	0x2000d11c
   13c18:	40005000 	.word	0x40005000
   13c1c:	2000d10c 	.word	0x2000d10c

00013c20 <generic_hfclk_stop>:
   13c20:	4b07      	ldr	r3, [pc, #28]	; (13c40 <generic_hfclk_stop+0x20>)
   13c22:	e8d3 2fef 	ldaex	r2, [r3]
   13c26:	f022 0102 	bic.w	r1, r2, #2
   13c2a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13c2e:	2800      	cmp	r0, #0
   13c30:	d1f7      	bne.n	13c22 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   13c32:	07d3      	lsls	r3, r2, #31
   13c34:	d402      	bmi.n	13c3c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   13c36:	2001      	movs	r0, #1
   13c38:	f002 b902 	b.w	15e40 <nrfx_clock_stop>
}
   13c3c:	4770      	bx	lr
   13c3e:	bf00      	nop
   13c40:	2000d11c 	.word	0x2000d11c

00013c44 <api_blocking_start>:
{
   13c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13c46:	2200      	movs	r2, #0
   13c48:	2301      	movs	r3, #1
   13c4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13c4e:	466b      	mov	r3, sp
   13c50:	4a08      	ldr	r2, [pc, #32]	; (13c74 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13c52:	f8cd d000 	str.w	sp, [sp]
   13c56:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13c5a:	f007 fcaa 	bl	1b5b2 <api_start>
	if (err < 0) {
   13c5e:	2800      	cmp	r0, #0
   13c60:	db05      	blt.n	13c6e <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   13c62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13c66:	2300      	movs	r3, #0
   13c68:	4668      	mov	r0, sp
   13c6a:	f005 f921 	bl	18eb0 <z_impl_k_sem_take>
}
   13c6e:	b005      	add	sp, #20
   13c70:	f85d fb04 	ldr.w	pc, [sp], #4
   13c74:	0001b5ad 	.word	0x0001b5ad

00013c78 <z_nrf_clock_control_lf_on>:
{
   13c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13c7c:	2201      	movs	r2, #1
   13c7e:	4606      	mov	r6, r0
   13c80:	4944      	ldr	r1, [pc, #272]	; (13d94 <z_nrf_clock_control_lf_on+0x11c>)
   13c82:	e8d1 3fef 	ldaex	r3, [r1]
   13c86:	e8c1 2fe0 	stlex	r0, r2, [r1]
   13c8a:	2800      	cmp	r0, #0
   13c8c:	d1f9      	bne.n	13c82 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   13c8e:	b99b      	cbnz	r3, 13cb8 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   13c90:	4941      	ldr	r1, [pc, #260]	; (13d98 <z_nrf_clock_control_lf_on+0x120>)
		err = onoff_request(mgr, &cli);
   13c92:	4842      	ldr	r0, [pc, #264]	; (13d9c <z_nrf_clock_control_lf_on+0x124>)
   13c94:	604b      	str	r3, [r1, #4]
   13c96:	60cb      	str	r3, [r1, #12]
   13c98:	608a      	str	r2, [r1, #8]
   13c9a:	f7fd fe45 	bl	11928 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   13c9e:	2800      	cmp	r0, #0
   13ca0:	da0a      	bge.n	13cb8 <z_nrf_clock_control_lf_on+0x40>
   13ca2:	493f      	ldr	r1, [pc, #252]	; (13da0 <z_nrf_clock_control_lf_on+0x128>)
   13ca4:	483f      	ldr	r0, [pc, #252]	; (13da4 <z_nrf_clock_control_lf_on+0x12c>)
   13ca6:	f44f 7208 	mov.w	r2, #544	; 0x220
   13caa:	f007 f953 	bl	1af54 <printk>
   13cae:	f44f 7108 	mov.w	r1, #544	; 0x220
   13cb2:	483b      	ldr	r0, [pc, #236]	; (13da0 <z_nrf_clock_control_lf_on+0x128>)
   13cb4:	f007 fb32 	bl	1b31c <assert_post_action>
	switch (start_mode) {
   13cb8:	b38e      	cbz	r6, 13d1e <z_nrf_clock_control_lf_on+0xa6>
   13cba:	1e73      	subs	r3, r6, #1
   13cbc:	2b01      	cmp	r3, #1
   13cbe:	d855      	bhi.n	13d6c <z_nrf_clock_control_lf_on+0xf4>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   13cc0:	2e01      	cmp	r6, #1
   13cc2:	d106      	bne.n	13cd2 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13cc4:	4b38      	ldr	r3, [pc, #224]	; (13da8 <z_nrf_clock_control_lf_on+0x130>)
   13cc6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   13cca:	f003 0303 	and.w	r3, r3, #3
   13cce:	2b02      	cmp	r3, #2
   13cd0:	d025      	beq.n	13d1e <z_nrf_clock_control_lf_on+0xa6>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13cd2:	f008 f8cd 	bl	1be70 <k_is_in_isr>
   13cd6:	4604      	mov	r4, r0
   13cd8:	b918      	cbnz	r0, 13ce2 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
   13cda:	4b34      	ldr	r3, [pc, #208]	; (13dac <z_nrf_clock_control_lf_on+0x134>)
	int key = isr_mode ? irq_lock() : 0;
   13cdc:	781b      	ldrb	r3, [r3, #0]
   13cde:	2b00      	cmp	r3, #0
   13ce0:	d151      	bne.n	13d86 <z_nrf_clock_control_lf_on+0x10e>
	__asm__ volatile(
   13ce2:	f04f 0320 	mov.w	r3, #32
   13ce6:	f3ef 8711 	mrs	r7, BASEPRI
   13cea:	f383 8812 	msr	BASEPRI_MAX, r3
   13cee:	f3bf 8f6f 	isb	sy
   13cf2:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13cf4:	4d2c      	ldr	r5, [pc, #176]	; (13da8 <z_nrf_clock_control_lf_on+0x130>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13cf6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 13db8 <z_nrf_clock_control_lf_on+0x140>
   13cfa:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13cfc:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13d00:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   13d04:	03d2      	lsls	r2, r2, #15
   13d06:	d50c      	bpl.n	13d22 <z_nrf_clock_control_lf_on+0xaa>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   13d08:	f003 0303 	and.w	r3, r3, #3
   13d0c:	2b02      	cmp	r3, #2
   13d0e:	d001      	beq.n	13d14 <z_nrf_clock_control_lf_on+0x9c>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   13d10:	2e01      	cmp	r6, #1
   13d12:	d106      	bne.n	13d22 <z_nrf_clock_control_lf_on+0xaa>
	if (isr_mode) {
   13d14:	b334      	cbz	r4, 13d64 <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
   13d16:	f387 8811 	msr	BASEPRI, r7
   13d1a:	f3bf 8f6f 	isb	sy
}
   13d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   13d22:	b1d4      	cbz	r4, 13d5a <z_nrf_clock_control_lf_on+0xe2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   13d24:	4638      	mov	r0, r7
   13d26:	f7ff f80d 	bl	12d44 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   13d2a:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   13d2e:	b2db      	uxtb	r3, r3
   13d30:	2b01      	cmp	r3, #1
   13d32:	d1e3      	bne.n	13cfc <z_nrf_clock_control_lf_on+0x84>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13d34:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   13d38:	2a00      	cmp	r2, #0
   13d3a:	d0df      	beq.n	13cfc <z_nrf_clock_control_lf_on+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d3c:	2200      	movs	r2, #0
   13d3e:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   13d42:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   13d46:	2202      	movs	r2, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13d48:	2120      	movs	r1, #32
   13d4a:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   13d4e:	4a18      	ldr	r2, [pc, #96]	; (13db0 <z_nrf_clock_control_lf_on+0x138>)
   13d50:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13d54:	4a17      	ldr	r2, [pc, #92]	; (13db4 <z_nrf_clock_control_lf_on+0x13c>)
   13d56:	6013      	str	r3, [r2, #0]
}
   13d58:	e7d0      	b.n	13cfc <z_nrf_clock_control_lf_on+0x84>
	return z_impl_k_sleep(timeout);
   13d5a:	2100      	movs	r1, #0
   13d5c:	2021      	movs	r0, #33	; 0x21
   13d5e:	f006 fbc1 	bl	1a4e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   13d62:	e7e2      	b.n	13d2a <z_nrf_clock_control_lf_on+0xb2>
    p_reg->INTENSET = mask;
   13d64:	2302      	movs	r3, #2
   13d66:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   13d6a:	e7d8      	b.n	13d1e <z_nrf_clock_control_lf_on+0xa6>
		__ASSERT_NO_MSG(false);
   13d6c:	490c      	ldr	r1, [pc, #48]	; (13da0 <z_nrf_clock_control_lf_on+0x128>)
   13d6e:	480d      	ldr	r0, [pc, #52]	; (13da4 <z_nrf_clock_control_lf_on+0x12c>)
   13d70:	f240 2232 	movw	r2, #562	; 0x232
   13d74:	f007 f8ee 	bl	1af54 <printk>
}
   13d78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   13d7c:	f240 2132 	movw	r1, #562	; 0x232
   13d80:	4807      	ldr	r0, [pc, #28]	; (13da0 <z_nrf_clock_control_lf_on+0x128>)
   13d82:	f007 bacb 	b.w	1b31c <assert_post_action>
    p_reg->INTENCLR = mask;
   13d86:	2202      	movs	r2, #2
   13d88:	4b07      	ldr	r3, [pc, #28]	; (13da8 <z_nrf_clock_control_lf_on+0x130>)
	int key = isr_mode ? irq_lock() : 0;
   13d8a:	4607      	mov	r7, r0
   13d8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   13d90:	e7b0      	b.n	13cf4 <z_nrf_clock_control_lf_on+0x7c>
   13d92:	bf00      	nop
   13d94:	2000d120 	.word	0x2000d120
   13d98:	2000d0b4 	.word	0x2000d0b4
   13d9c:	2000d0e4 	.word	0x2000d0e4
   13da0:	0001d184 	.word	0x0001d184
   13da4:	0001c625 	.word	0x0001c625
   13da8:	40005000 	.word	0x40005000
   13dac:	2000db20 	.word	0x2000db20
   13db0:	e000e100 	.word	0xe000e100
   13db4:	40005008 	.word	0x40005008
   13db8:	40005104 	.word	0x40005104

00013dbc <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   13dbc:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   13dbe:	4c04      	ldr	r4, [pc, #16]	; (13dd0 <rtt_console_init+0x14>)
   13dc0:	4620      	mov	r0, r4
   13dc2:	f7fd fbc7 	bl	11554 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   13dc6:	4620      	mov	r0, r4
   13dc8:	f7ff fdec 	bl	139a4 <__stdout_hook_install>

	return 0;
}
   13dcc:	2000      	movs	r0, #0
   13dce:	bd10      	pop	{r4, pc}
   13dd0:	00013dd5 	.word	0x00013dd5

00013dd4 <rtt_console_out>:
{
   13dd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13dd8:	4604      	mov	r4, r0
	char c = (char)character;
   13dda:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
   13ddc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 13e3c <rtt_console_out+0x68>
   13de0:	4e15      	ldr	r6, [pc, #84]	; (13e38 <rtt_console_out+0x64>)
   13de2:	f88d 0007 	strb.w	r0, [sp, #7]
   13de6:	f04f 33ff 	mov.w	r3, #4294967295
   13dea:	f04f 32ff 	mov.w	r2, #4294967295
   13dee:	4640      	mov	r0, r8
   13df0:	f004 feb4 	bl	18b5c <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   13df4:	2201      	movs	r2, #1
   13df6:	f10d 0107 	add.w	r1, sp, #7
   13dfa:	2000      	movs	r0, #0
   13dfc:	f002 ff2c 	bl	16c58 <SEGGER_RTT_WriteNoLock>
   13e00:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   13e02:	4640      	mov	r0, r8
   13e04:	f004 ff82 	bl	18d0c <z_impl_k_mutex_unlock>
		if (cnt) {
   13e08:	b12f      	cbz	r7, 13e16 <rtt_console_out+0x42>
			host_present = true;
   13e0a:	2301      	movs	r3, #1
   13e0c:	7033      	strb	r3, [r6, #0]
}
   13e0e:	4620      	mov	r0, r4
   13e10:	b002      	add	sp, #8
   13e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   13e16:	7833      	ldrb	r3, [r6, #0]
   13e18:	2b00      	cmp	r3, #0
   13e1a:	d0f8      	beq.n	13e0e <rtt_console_out+0x3a>
			if (max_cnt) {
   13e1c:	3d01      	subs	r5, #1
   13e1e:	d008      	beq.n	13e32 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   13e20:	f008 f826 	bl	1be70 <k_is_in_isr>
   13e24:	2800      	cmp	r0, #0
   13e26:	d1de      	bne.n	13de6 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   13e28:	2100      	movs	r1, #0
   13e2a:	2042      	movs	r0, #66	; 0x42
   13e2c:	f006 fb5a 	bl	1a4e4 <z_impl_k_sleep>
   13e30:	e7d9      	b.n	13de6 <rtt_console_out+0x12>
				host_present = false;
   13e32:	7035      	strb	r5, [r6, #0]
   13e34:	e7eb      	b.n	13e0e <rtt_console_out+0x3a>
   13e36:	bf00      	nop
   13e38:	2000d5dd 	.word	0x2000d5dd
   13e3c:	2000cb60 	.word	0x2000cb60

00013e40 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   13e40:	b570      	push	{r4, r5, r6, lr}
   13e42:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   13e44:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   13e46:	6905      	ldr	r5, [r0, #16]
   13e48:	b941      	cbnz	r1, 13e5c <gpio_nrfx_manage_callback+0x1c>
   13e4a:	491e      	ldr	r1, [pc, #120]	; (13ec4 <gpio_nrfx_manage_callback+0x84>)
   13e4c:	481e      	ldr	r0, [pc, #120]	; (13ec8 <gpio_nrfx_manage_callback+0x88>)
   13e4e:	2224      	movs	r2, #36	; 0x24
   13e50:	f007 f880 	bl	1af54 <printk>
   13e54:	2124      	movs	r1, #36	; 0x24
   13e56:	481b      	ldr	r0, [pc, #108]	; (13ec4 <gpio_nrfx_manage_callback+0x84>)
   13e58:	f007 fa60 	bl	1b31c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   13e5c:	6863      	ldr	r3, [r4, #4]
   13e5e:	b943      	cbnz	r3, 13e72 <gpio_nrfx_manage_callback+0x32>
   13e60:	4918      	ldr	r1, [pc, #96]	; (13ec4 <gpio_nrfx_manage_callback+0x84>)
   13e62:	4819      	ldr	r0, [pc, #100]	; (13ec8 <gpio_nrfx_manage_callback+0x88>)
   13e64:	2225      	movs	r2, #37	; 0x25
   13e66:	f007 f875 	bl	1af54 <printk>
   13e6a:	2125      	movs	r1, #37	; 0x25
   13e6c:	4815      	ldr	r0, [pc, #84]	; (13ec4 <gpio_nrfx_manage_callback+0x84>)
   13e6e:	f007 fa55 	bl	1b31c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   13e72:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   13e74:	b15b      	cbz	r3, 13e8e <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13e76:	2200      	movs	r2, #0
   13e78:	429c      	cmp	r4, r3
   13e7a:	d113      	bne.n	13ea4 <gpio_nrfx_manage_callback+0x64>
Z_GENLIST_REMOVE(slist, snode)
   13e7c:	6823      	ldr	r3, [r4, #0]
   13e7e:	b95a      	cbnz	r2, 13e98 <gpio_nrfx_manage_callback+0x58>
   13e80:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   13e82:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   13e84:	4294      	cmp	r4, r2
   13e86:	d100      	bne.n	13e8a <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   13e88:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   13e8a:	2300      	movs	r3, #0
   13e8c:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   13e8e:	b976      	cbnz	r6, 13eae <gpio_nrfx_manage_callback+0x6e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   13e90:	2000      	movs	r0, #0
				     callback, set);
}
   13e92:	bd70      	pop	{r4, r5, r6, pc}
   13e94:	460b      	mov	r3, r1
   13e96:	e7ef      	b.n	13e78 <gpio_nrfx_manage_callback+0x38>
   13e98:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   13e9a:	68ab      	ldr	r3, [r5, #8]
   13e9c:	429c      	cmp	r4, r3
	list->tail = node;
   13e9e:	bf08      	it	eq
   13ea0:	60aa      	streq	r2, [r5, #8]
}
   13ea2:	e7f2      	b.n	13e8a <gpio_nrfx_manage_callback+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13ea4:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13ea6:	461a      	mov	r2, r3
   13ea8:	2900      	cmp	r1, #0
   13eaa:	d1f3      	bne.n	13e94 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   13eac:	b13e      	cbz	r6, 13ebe <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_PREPEND(slist, snode)
   13eae:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   13eb0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   13eb2:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   13eb4:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   13eb6:	2800      	cmp	r0, #0
   13eb8:	d1ea      	bne.n	13e90 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   13eba:	60ac      	str	r4, [r5, #8]
}
   13ebc:	e7e9      	b.n	13e92 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   13ebe:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   13ec2:	e7e6      	b.n	13e92 <gpio_nrfx_manage_callback+0x52>
   13ec4:	0001d1e1 	.word	0x0001d1e1
   13ec8:	0001c625 	.word	0x0001c625

00013ecc <gpio_nrfx_pin_interrupt_configure>:
{
   13ecc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   13ece:	6840      	ldr	r0, [r0, #4]
   13ed0:	f001 041f 	and.w	r4, r1, #31
   13ed4:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   13ed6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   13eda:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   13ede:	f04f 0500 	mov.w	r5, #0
   13ee2:	d104      	bne.n	13eee <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   13ee4:	4620      	mov	r0, r4
   13ee6:	f002 fafd 	bl	164e4 <nrfx_gpiote_trigger_disable>
	return 0;
   13eea:	2000      	movs	r0, #0
   13eec:	e04b      	b.n	13f86 <gpio_nrfx_pin_interrupt_configure+0xba>
	if (mode == GPIO_INT_MODE_LEVEL) {
   13eee:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   13ef2:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   13ef6:	d148      	bne.n	13f8a <gpio_nrfx_pin_interrupt_configure+0xbe>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   13ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   13efc:	bf0c      	ite	eq
   13efe:	2304      	moveq	r3, #4
   13f00:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   13f02:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   13f06:	6883      	ldr	r3, [r0, #8]
   13f08:	fa23 f101 	lsr.w	r1, r3, r1
   13f0c:	07c9      	lsls	r1, r1, #31
   13f0e:	d448      	bmi.n	13fa2 <gpio_nrfx_pin_interrupt_configure+0xd6>
   13f10:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   13f14:	d145      	bne.n	13fa2 <gpio_nrfx_pin_interrupt_configure+0xd6>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   13f16:	0966      	lsrs	r6, r4, #5
   13f18:	bf0c      	ite	eq
   13f1a:	f04f 33ff 	moveq.w	r3, #4294967295
   13f1e:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   13f20:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   13f24:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   13f26:	07da      	lsls	r2, r3, #31
   13f28:	d40a      	bmi.n	13f40 <gpio_nrfx_pin_interrupt_configure+0x74>
   13f2a:	4926      	ldr	r1, [pc, #152]	; (13fc4 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   13f2c:	4826      	ldr	r0, [pc, #152]	; (13fc8 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   13f2e:	f240 2229 	movw	r2, #553	; 0x229
   13f32:	f007 f80f 	bl	1af54 <printk>
   13f36:	f240 2129 	movw	r1, #553	; 0x229
   13f3a:	4822      	ldr	r0, [pc, #136]	; (13fc4 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   13f3c:	f007 f9ee 	bl	1b31c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13f40:	b156      	cbz	r6, 13f58 <gpio_nrfx_pin_interrupt_configure+0x8c>
            NRFX_ASSERT(0);
   13f42:	4920      	ldr	r1, [pc, #128]	; (13fc4 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   13f44:	4820      	ldr	r0, [pc, #128]	; (13fc8 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   13f46:	f240 222e 	movw	r2, #558	; 0x22e
   13f4a:	f007 f803 	bl	1af54 <printk>
   13f4e:	f240 212e 	movw	r1, #558	; 0x22e
   13f52:	481c      	ldr	r0, [pc, #112]	; (13fc4 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   13f54:	f007 f9e2 	bl	1b31c <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   13f58:	4b1c      	ldr	r3, [pc, #112]	; (13fcc <gpio_nrfx_pin_interrupt_configure+0x100>)
   13f5a:	3580      	adds	r5, #128	; 0x80
   13f5c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   13f60:	07db      	lsls	r3, r3, #31
   13f62:	d41e      	bmi.n	13fa2 <gpio_nrfx_pin_interrupt_configure+0xd6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   13f64:	f10d 0507 	add.w	r5, sp, #7
   13f68:	4629      	mov	r1, r5
   13f6a:	4620      	mov	r0, r4
   13f6c:	f002 f9f0 	bl	16350 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   13f70:	4b17      	ldr	r3, [pc, #92]	; (13fd0 <gpio_nrfx_pin_interrupt_configure+0x104>)
   13f72:	4298      	cmp	r0, r3
   13f74:	d114      	bne.n	13fa0 <gpio_nrfx_pin_interrupt_configure+0xd4>
			err = nrfx_gpiote_channel_alloc(&ch);
   13f76:	4628      	mov	r0, r5
   13f78:	f002 fa46 	bl	16408 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   13f7c:	4b15      	ldr	r3, [pc, #84]	; (13fd4 <gpio_nrfx_pin_interrupt_configure+0x108>)
   13f7e:	4298      	cmp	r0, r3
   13f80:	d00e      	beq.n	13fa0 <gpio_nrfx_pin_interrupt_configure+0xd4>
				return -ENOMEM;
   13f82:	f06f 000b 	mvn.w	r0, #11
}
   13f86:	b004      	add	sp, #16
   13f88:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13f8a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   13f8e:	d005      	beq.n	13f9c <gpio_nrfx_pin_interrupt_configure+0xd0>
   13f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   13f94:	bf0c      	ite	eq
   13f96:	2302      	moveq	r3, #2
   13f98:	2301      	movne	r3, #1
   13f9a:	e7b2      	b.n	13f02 <gpio_nrfx_pin_interrupt_configure+0x36>
   13f9c:	2303      	movs	r3, #3
   13f9e:	e7b0      	b.n	13f02 <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
   13fa0:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13fa2:	2300      	movs	r3, #0
   13fa4:	4620      	mov	r0, r4
   13fa6:	4619      	mov	r1, r3
   13fa8:	aa02      	add	r2, sp, #8
   13faa:	f002 f8b3 	bl	16114 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   13fae:	4b09      	ldr	r3, [pc, #36]	; (13fd4 <gpio_nrfx_pin_interrupt_configure+0x108>)
   13fb0:	4298      	cmp	r0, r3
   13fb2:	d104      	bne.n	13fbe <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   13fb4:	2101      	movs	r1, #1
   13fb6:	4620      	mov	r0, r4
   13fb8:	f002 fa2c 	bl	16414 <nrfx_gpiote_trigger_enable>
   13fbc:	e795      	b.n	13eea <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   13fbe:	f06f 0004 	mvn.w	r0, #4
   13fc2:	e7e0      	b.n	13f86 <gpio_nrfx_pin_interrupt_configure+0xba>
   13fc4:	0001d20e 	.word	0x0001d20e
   13fc8:	0001c625 	.word	0x0001c625
   13fcc:	40842500 	.word	0x40842500
   13fd0:	0bad0004 	.word	0x0bad0004
   13fd4:	0bad0000 	.word	0x0bad0000

00013fd8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   13fd8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   13fda:	f002 fa05 	bl	163e8 <nrfx_gpiote_is_init>
   13fde:	4604      	mov	r4, r0
   13fe0:	b968      	cbnz	r0, 13ffe <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   13fe2:	f002 f9d9 	bl	16398 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   13fe6:	4b08      	ldr	r3, [pc, #32]	; (14008 <gpio_nrfx_init+0x30>)
   13fe8:	4298      	cmp	r0, r3
   13fea:	d10a      	bne.n	14002 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   13fec:	4621      	mov	r1, r4
   13fee:	4807      	ldr	r0, [pc, #28]	; (1400c <gpio_nrfx_init+0x34>)
   13ff0:	f002 f9a8 	bl	16344 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   13ff4:	4622      	mov	r2, r4
   13ff6:	2101      	movs	r1, #1
   13ff8:	2031      	movs	r0, #49	; 0x31
   13ffa:	f7fe ff17 	bl	12e2c <z_arm_irq_priority_set>
		return 0;
   13ffe:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   14000:	bd10      	pop	{r4, pc}
		return -EIO;
   14002:	f06f 0004 	mvn.w	r0, #4
   14006:	e7fb      	b.n	14000 <gpio_nrfx_init+0x28>
   14008:	0bad0000 	.word	0x0bad0000
   1400c:	00014011 	.word	0x00014011

00014010 <nrfx_gpio_handler>:
{
   14010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   14014:	0943      	lsrs	r3, r0, #5
   14016:	d129      	bne.n	1406c <nrfx_gpio_handler+0x5c>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14018:	4b15      	ldr	r3, [pc, #84]	; (14070 <nrfx_gpio_handler+0x60>)
   1401a:	685c      	ldr	r4, [r3, #4]
   1401c:	b334      	cbz	r4, 1406c <nrfx_gpio_handler+0x5c>
   1401e:	6825      	ldr	r5, [r4, #0]
	gpio_fire_callbacks(list, port, BIT(pin));
   14020:	2601      	movs	r6, #1
   14022:	2d00      	cmp	r5, #0
   14024:	bf38      	it	cc
   14026:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   14028:	f8df 804c 	ldr.w	r8, [pc, #76]	; 14078 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
   1402c:	4f11      	ldr	r7, [pc, #68]	; (14074 <nrfx_gpio_handler+0x64>)
   1402e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1407c <nrfx_gpio_handler+0x6c>
   14032:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   14034:	68a3      	ldr	r3, [r4, #8]
   14036:	421e      	tst	r6, r3
   14038:	d010      	beq.n	1405c <nrfx_gpio_handler+0x4c>
			__ASSERT(cb->handler, "No callback handler!");
   1403a:	6863      	ldr	r3, [r4, #4]
   1403c:	b943      	cbnz	r3, 14050 <nrfx_gpio_handler+0x40>
   1403e:	4639      	mov	r1, r7
   14040:	4648      	mov	r0, r9
   14042:	2245      	movs	r2, #69	; 0x45
   14044:	f006 ff86 	bl	1af54 <printk>
   14048:	2145      	movs	r1, #69	; 0x45
   1404a:	4638      	mov	r0, r7
   1404c:	f007 f966 	bl	1b31c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   14050:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   14054:	4621      	mov	r1, r4
   14056:	4640      	mov	r0, r8
   14058:	4032      	ands	r2, r6
   1405a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1405c:	b135      	cbz	r5, 1406c <nrfx_gpio_handler+0x5c>
	return node->next;
   1405e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14060:	462c      	mov	r4, r5
   14062:	2b00      	cmp	r3, #0
   14064:	bf38      	it	cc
   14066:	2300      	movcc	r3, #0
   14068:	461d      	mov	r5, r3
   1406a:	e7e3      	b.n	14034 <nrfx_gpio_handler+0x24>
}
   1406c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14070:	2000d124 	.word	0x2000d124
   14074:	0001d1e1 	.word	0x0001d1e1
   14078:	0001c0a0 	.word	0x0001c0a0
   1407c:	0001c625 	.word	0x0001c625

00014080 <gpio_nrfx_pin_configure>:
{
   14080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   14084:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14086:	f001 051f 	and.w	r5, r1, #31
   1408a:	7b3b      	ldrb	r3, [r7, #12]
{
   1408c:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
   1408e:	4614      	mov	r4, r2
{
   14090:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14092:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   14096:	b9ca      	cbnz	r2, 140cc <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   14098:	a902      	add	r1, sp, #8
   1409a:	4628      	mov	r0, r5
   1409c:	f002 f958 	bl	16350 <nrfx_gpiote_channel_get>
   140a0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   140a2:	4628      	mov	r0, r5
   140a4:	f002 fa40 	bl	16528 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   140a8:	4b47      	ldr	r3, [pc, #284]	; (141c8 <gpio_nrfx_pin_configure+0x148>)
   140aa:	4298      	cmp	r0, r3
   140ac:	d004      	beq.n	140b8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   140ae:	f06f 0004 	mvn.w	r0, #4
}
   140b2:	b005      	add	sp, #20
   140b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   140b8:	4284      	cmp	r4, r0
   140ba:	d105      	bne.n	140c8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   140bc:	f89d 0008 	ldrb.w	r0, [sp, #8]
   140c0:	f002 f99c 	bl	163fc <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   140c4:	42a0      	cmp	r0, r4
   140c6:	d1f2      	bne.n	140ae <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   140c8:	2000      	movs	r0, #0
   140ca:	e7f2      	b.n	140b2 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   140cc:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   140d0:	f10d 0103 	add.w	r1, sp, #3
   140d4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   140d6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   140da:	f002 f939 	bl	16350 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   140de:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   140e0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   140e2:	4649      	mov	r1, r9
   140e4:	4628      	mov	r0, r5
   140e6:	aa02      	add	r2, sp, #8
   140e8:	f002 f814 	bl	16114 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   140ec:	4b36      	ldr	r3, [pc, #216]	; (141c8 <gpio_nrfx_pin_configure+0x148>)
   140ee:	4298      	cmp	r0, r3
   140f0:	d002      	beq.n	140f8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   140f2:	f06f 0015 	mvn.w	r0, #21
   140f6:	e7dc      	b.n	140b2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   140f8:	4580      	cmp	r8, r0
   140fa:	d103      	bne.n	14104 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   140fc:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14100:	f002 f97c 	bl	163fc <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   14104:	05a3      	lsls	r3, r4, #22
   14106:	d54c      	bpl.n	141a2 <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14108:	4b30      	ldr	r3, [pc, #192]	; (141cc <gpio_nrfx_pin_configure+0x14c>)
   1410a:	4a31      	ldr	r2, [pc, #196]	; (141d0 <gpio_nrfx_pin_configure+0x150>)
   1410c:	4023      	ands	r3, r4
   1410e:	4293      	cmp	r3, r2
   14110:	d039      	beq.n	14186 <gpio_nrfx_pin_configure+0x106>
   14112:	d80c      	bhi.n	1412e <gpio_nrfx_pin_configure+0xae>
   14114:	2b06      	cmp	r3, #6
   14116:	d014      	beq.n	14142 <gpio_nrfx_pin_configure+0xc2>
   14118:	d804      	bhi.n	14124 <gpio_nrfx_pin_configure+0xa4>
   1411a:	b193      	cbz	r3, 14142 <gpio_nrfx_pin_configure+0xc2>
   1411c:	2b02      	cmp	r3, #2
   1411e:	d1e8      	bne.n	140f2 <gpio_nrfx_pin_configure+0x72>
   14120:	2304      	movs	r3, #4
   14122:	e00e      	b.n	14142 <gpio_nrfx_pin_configure+0xc2>
   14124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14128:	d1e3      	bne.n	140f2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1412a:	2301      	movs	r3, #1
   1412c:	e009      	b.n	14142 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1412e:	4a29      	ldr	r2, [pc, #164]	; (141d4 <gpio_nrfx_pin_configure+0x154>)
   14130:	4293      	cmp	r3, r2
   14132:	d02a      	beq.n	1418a <gpio_nrfx_pin_configure+0x10a>
   14134:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   14138:	d029      	beq.n	1418e <gpio_nrfx_pin_configure+0x10e>
   1413a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1413e:	d1d8      	bne.n	140f2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   14140:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   14142:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   14146:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   1414a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   1414e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   14150:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   14154:	bf4c      	ite	mi
   14156:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
   14158:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1415c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   1415e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   14162:	d516      	bpl.n	14192 <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   14164:	2101      	movs	r1, #1
   14166:	687b      	ldr	r3, [r7, #4]
   14168:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1416c:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1416e:	2200      	movs	r2, #0
   14170:	4628      	mov	r0, r5
   14172:	a901      	add	r1, sp, #4
   14174:	f002 f874 	bl	16260 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   14178:	4b13      	ldr	r3, [pc, #76]	; (141c8 <gpio_nrfx_pin_configure+0x148>)
   1417a:	4298      	cmp	r0, r3
   1417c:	bf14      	ite	ne
   1417e:	f06f 0015 	mvnne.w	r0, #21
   14182:	2000      	moveq	r0, #0
   14184:	e795      	b.n	140b2 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   14186:	2307      	movs	r3, #7
   14188:	e7db      	b.n	14142 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   1418a:	2305      	movs	r3, #5
   1418c:	e7d9      	b.n	14142 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1418e:	2303      	movs	r3, #3
   14190:	e7d7      	b.n	14142 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   14192:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   14194:	bf41      	itttt	mi
   14196:	2101      	movmi	r1, #1
   14198:	687b      	ldrmi	r3, [r7, #4]
   1419a:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1419e:	60de      	strmi	r6, [r3, #12]
}
   141a0:	e7e5      	b.n	1416e <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
   141a2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   141a4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   141a8:	bf4c      	ite	mi
   141aa:	2403      	movmi	r4, #3
   141ac:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   141b0:	461a      	mov	r2, r3
   141b2:	4628      	mov	r0, r5
   141b4:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   141b6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   141ba:	f001 ffab 	bl	16114 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   141be:	4b02      	ldr	r3, [pc, #8]	; (141c8 <gpio_nrfx_pin_configure+0x148>)
   141c0:	4298      	cmp	r0, r3
   141c2:	d081      	beq.n	140c8 <gpio_nrfx_pin_configure+0x48>
   141c4:	e795      	b.n	140f2 <gpio_nrfx_pin_configure+0x72>
   141c6:	bf00      	nop
   141c8:	0bad0000 	.word	0x0bad0000
   141cc:	00f00006 	.word	0x00f00006
   141d0:	00100006 	.word	0x00100006
   141d4:	00400002 	.word	0x00400002

000141d8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   141d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   141da:	794b      	ldrb	r3, [r1, #5]
   141dc:	2b01      	cmp	r3, #1
   141de:	d026      	beq.n	1422e <uarte_nrfx_configure+0x56>
   141e0:	2b03      	cmp	r3, #3
   141e2:	d121      	bne.n	14228 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   141e4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   141e6:	798b      	ldrb	r3, [r1, #6]
   141e8:	2b03      	cmp	r3, #3
   141ea:	d11d      	bne.n	14228 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   141ec:	79cc      	ldrb	r4, [r1, #7]
   141ee:	b10c      	cbz	r4, 141f4 <uarte_nrfx_configure+0x1c>
   141f0:	2c01      	cmp	r4, #1
   141f2:	d119      	bne.n	14228 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   141f4:	790a      	ldrb	r2, [r1, #4]
   141f6:	b112      	cbz	r2, 141fe <uarte_nrfx_configure+0x26>
   141f8:	2a02      	cmp	r2, #2
   141fa:	d115      	bne.n	14228 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   141fc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   141fe:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   14200:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   14202:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   14206:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   14208:	d065      	beq.n	142d6 <uarte_nrfx_configure+0xfe>
   1420a:	d82d      	bhi.n	14268 <uarte_nrfx_configure+0x90>
   1420c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14210:	d064      	beq.n	142dc <uarte_nrfx_configure+0x104>
   14212:	d816      	bhi.n	14242 <uarte_nrfx_configure+0x6a>
   14214:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   14218:	d062      	beq.n	142e0 <uarte_nrfx_configure+0x108>
   1421a:	d80a      	bhi.n	14232 <uarte_nrfx_configure+0x5a>
   1421c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14220:	d061      	beq.n	142e6 <uarte_nrfx_configure+0x10e>
   14222:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   14226:	d061      	beq.n	142ec <uarte_nrfx_configure+0x114>
   14228:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1422c:	e052      	b.n	142d4 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   1422e:	2600      	movs	r6, #0
   14230:	e7d9      	b.n	141e6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   14232:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   14236:	d05c      	beq.n	142f2 <uarte_nrfx_configure+0x11a>
   14238:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1423c:	d1f4      	bne.n	14228 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1423e:	4b37      	ldr	r3, [pc, #220]	; (1431c <uarte_nrfx_configure+0x144>)
   14240:	e03c      	b.n	142bc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   14242:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   14246:	d057      	beq.n	142f8 <uarte_nrfx_configure+0x120>
   14248:	d807      	bhi.n	1425a <uarte_nrfx_configure+0x82>
   1424a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1424e:	d055      	beq.n	142fc <uarte_nrfx_configure+0x124>
   14250:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   14254:	d1e8      	bne.n	14228 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   14256:	4b32      	ldr	r3, [pc, #200]	; (14320 <uarte_nrfx_configure+0x148>)
   14258:	e030      	b.n	142bc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1425a:	f647 2712 	movw	r7, #31250	; 0x7a12
   1425e:	42bb      	cmp	r3, r7
   14260:	d1e2      	bne.n	14228 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   14262:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14266:	e029      	b.n	142bc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   14268:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1426c:	d048      	beq.n	14300 <uarte_nrfx_configure+0x128>
   1426e:	d813      	bhi.n	14298 <uarte_nrfx_configure+0xc0>
   14270:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   14274:	d047      	beq.n	14306 <uarte_nrfx_configure+0x12e>
   14276:	d809      	bhi.n	1428c <uarte_nrfx_configure+0xb4>
   14278:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1427c:	42bb      	cmp	r3, r7
   1427e:	d044      	beq.n	1430a <uarte_nrfx_configure+0x132>
   14280:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   14284:	d1d0      	bne.n	14228 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   14286:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1428a:	e017      	b.n	142bc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1428c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   14290:	d1ca      	bne.n	14228 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   14292:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   14296:	e011      	b.n	142bc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   14298:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1429c:	d038      	beq.n	14310 <uarte_nrfx_configure+0x138>
   1429e:	d808      	bhi.n	142b2 <uarte_nrfx_configure+0xda>
   142a0:	4f20      	ldr	r7, [pc, #128]	; (14324 <uarte_nrfx_configure+0x14c>)
   142a2:	42bb      	cmp	r3, r7
   142a4:	d037      	beq.n	14316 <uarte_nrfx_configure+0x13e>
   142a6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   142aa:	d1bd      	bne.n	14228 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   142ac:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   142b0:	e004      	b.n	142bc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   142b2:	4f1d      	ldr	r7, [pc, #116]	; (14328 <uarte_nrfx_configure+0x150>)
   142b4:	42bb      	cmp	r3, r7
   142b6:	d1b7      	bne.n	14228 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   142b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   142bc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   142c0:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   142c2:	4334      	orrs	r4, r6
   142c4:	4322      	orrs	r2, r4
   142c6:	3304      	adds	r3, #4
   142c8:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   142ca:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   142ce:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   142d2:	2000      	movs	r0, #0
}
   142d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   142d6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   142da:	e7ef      	b.n	142bc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   142dc:	4b13      	ldr	r3, [pc, #76]	; (1432c <uarte_nrfx_configure+0x154>)
   142de:	e7ed      	b.n	142bc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   142e0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   142e4:	e7ea      	b.n	142bc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   142e6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   142ea:	e7e7      	b.n	142bc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   142ec:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   142f0:	e7e4      	b.n	142bc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   142f2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   142f6:	e7e1      	b.n	142bc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   142f8:	4b0d      	ldr	r3, [pc, #52]	; (14330 <uarte_nrfx_configure+0x158>)
   142fa:	e7df      	b.n	142bc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   142fc:	4b0d      	ldr	r3, [pc, #52]	; (14334 <uarte_nrfx_configure+0x15c>)
   142fe:	e7dd      	b.n	142bc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   14300:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   14304:	e7da      	b.n	142bc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   14306:	4b0c      	ldr	r3, [pc, #48]	; (14338 <uarte_nrfx_configure+0x160>)
   14308:	e7d8      	b.n	142bc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1430a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1430e:	e7d5      	b.n	142bc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   14310:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   14314:	e7d2      	b.n	142bc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   14316:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1431a:	e7cf      	b.n	142bc <uarte_nrfx_configure+0xe4>
   1431c:	0013b000 	.word	0x0013b000
   14320:	004ea000 	.word	0x004ea000
   14324:	0003d090 	.word	0x0003d090
   14328:	000f4240 	.word	0x000f4240
   1432c:	00275000 	.word	0x00275000
   14330:	0075c000 	.word	0x0075c000
   14334:	003af000 	.word	0x003af000
   14338:	013a9000 	.word	0x013a9000

0001433c <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   1433c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14340:	4614      	mov	r4, r2
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   14342:	6842      	ldr	r2, [r0, #4]
{
   14344:	4605      	mov	r5, r0
	return config->uarte_regs;
   14346:	6817      	ldr	r7, [r2, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
   14348:	7a12      	ldrb	r2, [r2, #8]
{
   1434a:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1434c:	f8d0 9010 	ldr.w	r9, [r0, #16]
	if (cfg->disable_rx) {
   14350:	b172      	cbz	r2, 14370 <uarte_nrfx_rx_enable+0x34>
		__ASSERT(false, "TX only UARTE instance");
   14352:	f240 327f 	movw	r2, #895	; 0x37f
   14356:	493c      	ldr	r1, [pc, #240]	; (14448 <uarte_nrfx_rx_enable+0x10c>)
   14358:	483c      	ldr	r0, [pc, #240]	; (1444c <uarte_nrfx_rx_enable+0x110>)
   1435a:	f006 fdfb 	bl	1af54 <printk>
   1435e:	483a      	ldr	r0, [pc, #232]	; (14448 <uarte_nrfx_rx_enable+0x10c>)
   14360:	f240 317f 	movw	r1, #895	; 0x37f
   14364:	f006 ffda 	bl	1b31c <assert_post_action>
		return -ENOTSUP;
   14368:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   1436c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (data->async->rx_enabled) {
   14370:	f8d9 100c 	ldr.w	r1, [r9, #12]
   14374:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
   14378:	2a00      	cmp	r2, #0
   1437a:	d162      	bne.n	14442 <uarte_nrfx_rx_enable+0x106>
		MAX(timeout / RX_TIMEOUT_DIV,
   1437c:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
   14380:	bfc8      	it	gt
   14382:	2205      	movgt	r2, #5
	data->async->rx_timeout = timeout;
   14384:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
   14386:	bfcc      	ite	gt
   14388:	fb93 f3f2 	sdivgt	r3, r3, r2
   1438c:	235c      	movle	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
   1438e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
   14392:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   14394:	e9c1 8418 	strd	r8, r4, [r1, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   14398:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
   1439c:	670b      	str	r3, [r1, #112]	; 0x70
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1439e:	6843      	ldr	r3, [r0, #4]
   143a0:	685b      	ldr	r3, [r3, #4]
   143a2:	06da      	lsls	r2, r3, #27
   143a4:	d524      	bpl.n	143f0 <uarte_nrfx_rx_enable+0xb4>
		if (data->async->rx_flush_cnt) {
   143a6:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
   143aa:	b30e      	cbz	r6, 143f0 <uarte_nrfx_rx_enable+0xb4>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   143ac:	42a6      	cmp	r6, r4
   143ae:	bf28      	it	cs
   143b0:	4626      	movcs	r6, r4
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   143b2:	4640      	mov	r0, r8
   143b4:	4632      	mov	r2, r6
   143b6:	31cc      	adds	r1, #204	; 0xcc
   143b8:	f007 f8a1 	bl	1b4fe <memcpy>
			if (!len) {
   143bc:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
   143be:	44b0      	add	r8, r6
			if (!len) {
   143c0:	d116      	bne.n	143f0 <uarte_nrfx_rx_enable+0xb4>
				data->async->rx_flush_cnt -= cpy_len;
   143c2:	f8d9 200c 	ldr.w	r2, [r9, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   143c6:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   143c8:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
   143cc:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   143ce:	1b9b      	subs	r3, r3, r6
   143d0:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
   143d4:	f007 f94e 	bl	1b674 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   143d8:	f8d9 100c 	ldr.w	r1, [r9, #12]
   143dc:	4628      	mov	r0, r5
   143de:	2201      	movs	r2, #1
   143e0:	3160      	adds	r1, #96	; 0x60
   143e2:	f007 f960 	bl	1b6a6 <notify_rx_buf_release>
				notify_rx_disable(dev);
   143e6:	4628      	mov	r0, r5
   143e8:	f007 f977 	bl	1b6da <notify_rx_disable>
	return 0;
   143ec:	2000      	movs	r0, #0
   143ee:	e7bd      	b.n	1436c <uarte_nrfx_rx_enable+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   143f0:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   143f2:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   143f6:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   143fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   143fe:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
	data->async->rx_enabled = true;
   14402:	2201      	movs	r2, #1
   14404:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   14408:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1440c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   14410:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14414:	686b      	ldr	r3, [r5, #4]
   14416:	685b      	ldr	r3, [r3, #4]
   14418:	06db      	lsls	r3, r3, #27
   1441a:	d50f      	bpl.n	1443c <uarte_nrfx_rx_enable+0x100>
	__asm__ volatile(
   1441c:	f04f 0320 	mov.w	r3, #32
   14420:	f3ef 8411 	mrs	r4, BASEPRI
   14424:	f383 8812 	msr	BASEPRI_MAX, r3
   14428:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
   1442c:	2102      	movs	r1, #2
   1442e:	4628      	mov	r0, r5
   14430:	f007 f9ae 	bl	1b790 <uarte_enable>
	__asm__ volatile(
   14434:	f384 8811 	msr	BASEPRI, r4
   14438:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1443c:	2301      	movs	r3, #1
   1443e:	603b      	str	r3, [r7, #0]
   14440:	e7d4      	b.n	143ec <uarte_nrfx_rx_enable+0xb0>
		return -EBUSY;
   14442:	f06f 000f 	mvn.w	r0, #15
   14446:	e791      	b.n	1436c <uarte_nrfx_rx_enable+0x30>
   14448:	0001d248 	.word	0x0001d248
   1444c:	0001c625 	.word	0x0001c625

00014450 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14450:	6803      	ldr	r3, [r0, #0]
{
   14452:	b510      	push	{r4, lr}
    switch (port)
   14454:	095a      	lsrs	r2, r3, #5
   14456:	bf0c      	ite	eq
   14458:	f04f 32ff 	moveq.w	r2, #4294967295
   1445c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1445e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   14462:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14466:	07db      	lsls	r3, r3, #31
{
   14468:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1446a:	d40a      	bmi.n	14482 <nrf_gpio_pin_port_decode+0x32>
   1446c:	490e      	ldr	r1, [pc, #56]	; (144a8 <nrf_gpio_pin_port_decode+0x58>)
   1446e:	480f      	ldr	r0, [pc, #60]	; (144ac <nrf_gpio_pin_port_decode+0x5c>)
   14470:	f240 2229 	movw	r2, #553	; 0x229
   14474:	f006 fd6e 	bl	1af54 <printk>
   14478:	f240 2129 	movw	r1, #553	; 0x229
   1447c:	480a      	ldr	r0, [pc, #40]	; (144a8 <nrf_gpio_pin_port_decode+0x58>)
   1447e:	f006 ff4d 	bl	1b31c <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   14482:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   14484:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14488:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1448a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1448c:	d00a      	beq.n	144a4 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   1448e:	4906      	ldr	r1, [pc, #24]	; (144a8 <nrf_gpio_pin_port_decode+0x58>)
   14490:	4806      	ldr	r0, [pc, #24]	; (144ac <nrf_gpio_pin_port_decode+0x5c>)
   14492:	f240 222e 	movw	r2, #558	; 0x22e
   14496:	f006 fd5d 	bl	1af54 <printk>
   1449a:	f240 212e 	movw	r1, #558	; 0x22e
   1449e:	4802      	ldr	r0, [pc, #8]	; (144a8 <nrf_gpio_pin_port_decode+0x58>)
   144a0:	f006 ff3c 	bl	1b31c <assert_post_action>
}
   144a4:	4802      	ldr	r0, [pc, #8]	; (144b0 <nrf_gpio_pin_port_decode+0x60>)
   144a6:	bd10      	pop	{r4, pc}
   144a8:	0001d20e 	.word	0x0001d20e
   144ac:	0001c625 	.word	0x0001c625
   144b0:	40842500 	.word	0x40842500

000144b4 <uarte_nrfx_tx>:
{
   144b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   144b6:	461c      	mov	r4, r3
	return config->uarte_regs;
   144b8:	6843      	ldr	r3, [r0, #4]
{
   144ba:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   144bc:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   144be:	f8d3 c000 	ldr.w	ip, [r3]
	__asm__ volatile(
   144c2:	f04f 0320 	mov.w	r3, #32
   144c6:	f3ef 8711 	mrs	r7, BASEPRI
   144ca:	f383 8812 	msr	BASEPRI_MAX, r3
   144ce:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   144d2:	68f0      	ldr	r0, [r6, #12]
   144d4:	68c3      	ldr	r3, [r0, #12]
   144d6:	b13b      	cbz	r3, 144e8 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   144d8:	f387 8811 	msr	BASEPRI, r7
   144dc:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   144e0:	f06f 000f 	mvn.w	r0, #15
}
   144e4:	b003      	add	sp, #12
   144e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENSET = mask;
   144e8:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
	data->async->tx_size = len;
   144ec:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
   144ee:	6081      	str	r1, [r0, #8]
   144f0:	f8cc e304 	str.w	lr, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   144f4:	f001 4c60 	and.w	ip, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   144f8:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
   144fc:	d128      	bne.n	14550 <uarte_nrfx_tx+0x9c>
		data->async->xfer_len = len;
   144fe:	e9c0 1204 	strd	r1, r2, [r0, #16]
	start_tx_locked(dev, data);
   14502:	4628      	mov	r0, r5
   14504:	f106 010c 	add.w	r1, r6, #12
   14508:	f007 fa43 	bl	1b992 <start_tx_locked.isra.0>
   1450c:	f387 8811 	msr	BASEPRI, r7
   14510:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   14514:	7af3      	ldrb	r3, [r6, #11]
   14516:	2b01      	cmp	r3, #1
   14518:	d118      	bne.n	1454c <uarte_nrfx_tx+0x98>
	    && timeout != SYS_FOREVER_US) {
   1451a:	1c63      	adds	r3, r4, #1
   1451c:	d016      	beq.n	1454c <uarte_nrfx_tx+0x98>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1451e:	68f5      	ldr	r5, [r6, #12]
			return (t * to_hz + off) / from_hz;
   14520:	2100      	movs	r1, #0
   14522:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   14526:	480c      	ldr	r0, [pc, #48]	; (14558 <uarte_nrfx_tx+0xa4>)
   14528:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1452c:	2300      	movs	r3, #0
   1452e:	fbc6 0104 	smlal	r0, r1, r6, r4
   14532:	4a0a      	ldr	r2, [pc, #40]	; (1455c <uarte_nrfx_tx+0xa8>)
   14534:	f7fb fe82 	bl	1023c <__aeabi_uldivmod>
   14538:	3528      	adds	r5, #40	; 0x28
   1453a:	4602      	mov	r2, r0
   1453c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1453e:	2000      	movs	r0, #0
   14540:	2100      	movs	r1, #0
   14542:	e9cd 0100 	strd	r0, r1, [sp]
   14546:	4628      	mov	r0, r5
   14548:	f006 fc56 	bl	1adf8 <z_impl_k_timer_start>
	return 0;
   1454c:	2000      	movs	r0, #0
   1454e:	e7c9      	b.n	144e4 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   14550:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
   14552:	f007 fa36 	bl	1b9c2 <setup_tx_cache.isra.0>
   14556:	e7d4      	b.n	14502 <uarte_nrfx_tx+0x4e>
   14558:	000f423f 	.word	0x000f423f
   1455c:	000f4240 	.word	0x000f4240

00014560 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   14560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14562:	4604      	mov	r4, r0
   14564:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14566:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14568:	f007 fc82 	bl	1be70 <k_is_in_isr>
   1456c:	b910      	cbnz	r0, 14574 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1456e:	4b28      	ldr	r3, [pc, #160]	; (14610 <uarte_nrfx_poll_out+0xb0>)
	int key;

	if (isr_mode) {
   14570:	781b      	ldrb	r3, [r3, #0]
   14572:	bb5b      	cbnz	r3, 145cc <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   14574:	f04f 0320 	mov.w	r3, #32
   14578:	f3ef 8111 	mrs	r1, BASEPRI
   1457c:	f383 8812 	msr	BASEPRI_MAX, r3
   14580:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   14584:	4620      	mov	r0, r4
			key = irq_lock();
   14586:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   14588:	f007 f85c 	bl	1b644 <is_tx_ready>
   1458c:	b1c8      	cbz	r0, 145c2 <uarte_nrfx_poll_out+0x62>
#if CONFIG_UART_ASYNC_API
				if (data->async && data->async->tx_size &&
   1458e:	68f3      	ldr	r3, [r6, #12]
   14590:	b15b      	cbz	r3, 145aa <uarte_nrfx_poll_out+0x4a>
   14592:	68da      	ldr	r2, [r3, #12]
   14594:	b14a      	cbz	r2, 145aa <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   14596:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
   1459a:	2a00      	cmp	r2, #0
   1459c:	da05      	bge.n	145aa <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   1459e:	6862      	ldr	r2, [r4, #4]
   145a0:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   145a2:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   145a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   145aa:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   145ac:	2201      	movs	r2, #1
   145ae:	4620      	mov	r0, r4
	data->char_out = c;
   145b0:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   145b4:	f007 f911 	bl	1b7da <tx_start>
	__asm__ volatile(
   145b8:	f385 8811 	msr	BASEPRI, r5
   145bc:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   145c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145c2:	f381 8811 	msr	BASEPRI, r1
   145c6:	f3bf 8f6f 	isb	sy
}
   145ca:	e7d3      	b.n	14574 <uarte_nrfx_poll_out+0x14>
{
   145cc:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   145ce:	4620      	mov	r0, r4
   145d0:	f007 f838 	bl	1b644 <is_tx_ready>
   145d4:	b948      	cbnz	r0, 145ea <uarte_nrfx_poll_out+0x8a>
   145d6:	2001      	movs	r0, #1
   145d8:	f007 fa78 	bl	1bacc <nrfx_busy_wait>
   145dc:	3d01      	subs	r5, #1
   145de:	d1f6      	bne.n	145ce <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
   145e0:	2100      	movs	r1, #0
   145e2:	2021      	movs	r0, #33	; 0x21
   145e4:	f005 ff7e 	bl	1a4e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   145e8:	e7f0      	b.n	145cc <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   145ea:	f04f 0320 	mov.w	r3, #32
   145ee:	f3ef 8511 	mrs	r5, BASEPRI
   145f2:	f383 8812 	msr	BASEPRI_MAX, r3
   145f6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   145fa:	4620      	mov	r0, r4
   145fc:	f007 f822 	bl	1b644 <is_tx_ready>
   14600:	2800      	cmp	r0, #0
   14602:	d1d2      	bne.n	145aa <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   14604:	f385 8811 	msr	BASEPRI, r5
   14608:	f3bf 8f6f 	isb	sy
}
   1460c:	e7e8      	b.n	145e0 <uarte_nrfx_poll_out+0x80>
   1460e:	bf00      	nop
   14610:	2000db20 	.word	0x2000db20

00014614 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   14614:	6843      	ldr	r3, [r0, #4]
{
   14616:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
   1461a:	681d      	ldr	r5, [r3, #0]
	if (!hw_rx_counting_enabled(data)
   1461c:	6903      	ldr	r3, [r0, #16]
{
   1461e:	4604      	mov	r4, r0
	if (!hw_rx_counting_enabled(data)
   14620:	68db      	ldr	r3, [r3, #12]
{
   14622:	b089      	sub	sp, #36	; 0x24
	if (!hw_rx_counting_enabled(data)
   14624:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
   14628:	b972      	cbnz	r2, 14648 <uarte_nrfx_isr_async+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1462a:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   1462e:	b159      	cbz	r1, 14648 <uarte_nrfx_isr_async+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14630:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   14634:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   14638:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1463c:	3201      	adds	r2, #1
   1463e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
   14642:	b009      	add	sp, #36	; 0x24
   14644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14648:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1464c:	b31b      	cbz	r3, 14696 <uarte_nrfx_isr_async+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1464e:	2100      	movs	r1, #0
   14650:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   14654:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   14658:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   1465c:	2214      	movs	r2, #20
    p_reg->ERRORSRC = errsrc_mask;
   1465e:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
   14662:	a803      	add	r0, sp, #12
   14664:	f006 ff56 	bl	1b514 <memset>
   14668:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1466a:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
   1466c:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   14670:	f100 8104 	bmi.w	1487c <uarte_nrfx_isr_async+0x268>
   14674:	07b1      	lsls	r1, r6, #30
   14676:	f100 8103 	bmi.w	14880 <uarte_nrfx_isr_async+0x26c>
   1467a:	0772      	lsls	r2, r6, #29
   1467c:	f100 8102 	bmi.w	14884 <uarte_nrfx_isr_async+0x270>
   14680:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   14684:	4620      	mov	r0, r4
   14686:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   14688:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1468c:	f006 ffeb 	bl	1b666 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   14690:	4620      	mov	r0, r4
   14692:	f007 f9c3 	bl	1ba1c <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14696:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1469a:	b37b      	cbz	r3, 146fc <uarte_nrfx_isr_async+0xe8>
    return p_reg->INTENSET & mask;
   1469c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   146a0:	06db      	lsls	r3, r3, #27
   146a2:	d52b      	bpl.n	146fc <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   146a4:	f04f 0800 	mov.w	r8, #0
   146a8:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   146ac:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   146b0:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   146b2:	6927      	ldr	r7, [r4, #16]
	return config->uarte_regs;
   146b4:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   146b6:	2301      	movs	r3, #1
   146b8:	68f8      	ldr	r0, [r7, #12]
   146ba:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
   146be:	3088      	adds	r0, #136	; 0x88
   146c0:	f007 fc81 	bl	1bfc6 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   146c4:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   146c6:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
   146ca:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   146ce:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
   146d0:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   146d4:	1a1b      	subs	r3, r3, r0
   146d6:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   146d8:	6f90      	ldr	r0, [r2, #120]	; 0x78
   146da:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   146de:	4408      	add	r0, r1
	if (rx_len > 0) {
   146e0:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   146e2:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
   146e4:	dd02      	ble.n	146ec <uarte_nrfx_isr_async+0xd8>
		notify_uart_rx_rdy(dev, rx_len);
   146e6:	4620      	mov	r0, r4
   146e8:	f006 ffc4 	bl	1b674 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   146ec:	68f9      	ldr	r1, [r7, #12]
   146ee:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
   146f2:	2b00      	cmp	r3, #0
   146f4:	f040 80c8 	bne.w	14888 <uarte_nrfx_isr_async+0x274>
		data->async->is_in_irq = false;
   146f8:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   146fc:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   14700:	b393      	cbz	r3, 14768 <uarte_nrfx_isr_async+0x154>
   14702:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
   14706:	bb79      	cbnz	r1, 14768 <uarte_nrfx_isr_async+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14708:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1470c:	2214      	movs	r2, #20
   1470e:	a803      	add	r0, sp, #12
   14710:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14714:	6926      	ldr	r6, [r4, #16]
	struct uart_event evt = {
   14716:	f006 fefd 	bl	1b514 <memset>
   1471a:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1471c:	4620      	mov	r0, r4
   1471e:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   14720:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   14724:	f006 ff9f 	bl	1b666 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   14728:	68f6      	ldr	r6, [r6, #12]
   1472a:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
   1472c:	1c5f      	adds	r7, r3, #1
   1472e:	d01b      	beq.n	14768 <uarte_nrfx_isr_async+0x154>
   14730:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   14734:	f04f 0900 	mov.w	r9, #0
		data->async->rx_timeout_left = data->async->rx_timeout;
   14738:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
   1473c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
   14740:	f8df 822c 	ldr.w	r8, [pc, #556]	; 14970 <uarte_nrfx_isr_async+0x35c>
   14744:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   14748:	fbc0 8901 	smlal	r8, r9, r0, r1
   1474c:	2300      	movs	r3, #0
   1474e:	4640      	mov	r0, r8
   14750:	4649      	mov	r1, r9
   14752:	4a86      	ldr	r2, [pc, #536]	; (1496c <uarte_nrfx_isr_async+0x358>)
   14754:	f7fb fd72 	bl	1023c <__aeabi_uldivmod>
   14758:	4602      	mov	r2, r0
   1475a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1475c:	e9cd 0100 	strd	r0, r1, [sp]
   14760:	f106 0088 	add.w	r0, r6, #136	; 0x88
   14764:	f006 fb48 	bl	1adf8 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14768:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1476c:	b333      	cbz	r3, 147bc <uarte_nrfx_isr_async+0x1a8>
   1476e:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   14772:	bb1e      	cbnz	r6, 147bc <uarte_nrfx_isr_async+0x1a8>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14774:	6927      	ldr	r7, [r4, #16]
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   14776:	2201      	movs	r2, #1
   14778:	68f9      	ldr	r1, [r7, #12]
   1477a:	4620      	mov	r0, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1477c:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
   14780:	3160      	adds	r1, #96	; 0x60
   14782:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   14786:	f006 ff8e 	bl	1b6a6 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   1478a:	68f9      	ldr	r1, [r7, #12]
   1478c:	2201      	movs	r2, #1
   1478e:	4620      	mov	r0, r4
   14790:	316c      	adds	r1, #108	; 0x6c
   14792:	f006 ff88 	bl	1b6a6 <notify_rx_buf_release>
	if (data->async->rx_enabled) {
   14796:	68fb      	ldr	r3, [r7, #12]
   14798:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
   1479c:	2a00      	cmp	r2, #0
   1479e:	f000 80a1 	beq.w	148e4 <uarte_nrfx_isr_async+0x2d0>
		data->async->rx_enabled = false;
   147a2:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   147a6:	6863      	ldr	r3, [r4, #4]
   147a8:	685b      	ldr	r3, [r3, #4]
   147aa:	06d8      	lsls	r0, r3, #27
   147ac:	d503      	bpl.n	147b6 <uarte_nrfx_isr_async+0x1a2>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   147ae:	2102      	movs	r1, #2
   147b0:	4620      	mov	r0, r4
   147b2:	f007 f8ba 	bl	1b92a <async_uart_release>
	notify_rx_disable(dev);
   147b6:	4620      	mov	r0, r4
   147b8:	f006 ff8f 	bl	1b6da <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   147bc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   147c0:	b1db      	cbz	r3, 147fa <uarte_nrfx_isr_async+0x1e6>
    return p_reg->INTENSET & mask;
   147c2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   147c6:	05d9      	lsls	r1, r3, #23
   147c8:	d517      	bpl.n	147fa <uarte_nrfx_isr_async+0x1e6>
	return config->uarte_regs;
   147ca:	6863      	ldr	r3, [r4, #4]
   147cc:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   147ce:	f04f 0120 	mov.w	r1, #32
   147d2:	f3ef 8211 	mrs	r2, BASEPRI
   147d6:	f381 8812 	msr	BASEPRI_MAX, r1
   147da:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   147de:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   147e2:	b131      	cbz	r1, 147f2 <uarte_nrfx_isr_async+0x1de>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   147e4:	2100      	movs	r1, #0
   147e6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   147ea:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   147ee:	2101      	movs	r1, #1
   147f0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   147f2:	f382 8811 	msr	BASEPRI, r2
   147f6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   147fa:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   147fe:	2b00      	cmp	r3, #0
   14800:	f43f af1f 	beq.w	14642 <uarte_nrfx_isr_async+0x2e>
    return p_reg->INTENSET & mask;
   14804:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   14808:	025a      	lsls	r2, r3, #9
   1480a:	f57f af1a 	bpl.w	14642 <uarte_nrfx_isr_async+0x2e>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1480e:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14810:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14812:	e9d3 7300 	ldrd	r7, r3, [r3]
   14816:	06db      	lsls	r3, r3, #27
   14818:	d469      	bmi.n	148ee <uarte_nrfx_isr_async+0x2da>
	if (!data->async->tx_buf) {
   1481a:	68f3      	ldr	r3, [r6, #12]
   1481c:	689b      	ldr	r3, [r3, #8]
   1481e:	2b00      	cmp	r3, #0
   14820:	f43f af0f 	beq.w	14642 <uarte_nrfx_isr_async+0x2e>
	__asm__ volatile(
   14824:	f04f 0320 	mov.w	r3, #32
   14828:	f3ef 8211 	mrs	r2, BASEPRI
   1482c:	f383 8812 	msr	BASEPRI_MAX, r3
   14830:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   14834:	68f3      	ldr	r3, [r6, #12]
   14836:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1483a:	2900      	cmp	r1, #0
   1483c:	bfac      	ite	ge
   1483e:	f8d3 50c4 	ldrge.w	r5, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
   14842:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
   14846:	f382 8811 	msr	BASEPRI, r2
   1484a:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1484e:	68f0      	ldr	r0, [r6, #12]
   14850:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
   14854:	2b00      	cmp	r3, #0
   14856:	d057      	beq.n	14908 <uarte_nrfx_isr_async+0x2f4>
	__asm__ volatile(
   14858:	f04f 0320 	mov.w	r3, #32
   1485c:	f3ef 8511 	mrs	r5, BASEPRI
   14860:	f383 8812 	msr	BASEPRI_MAX, r3
   14864:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   14868:	4620      	mov	r0, r4
   1486a:	f106 010c 	add.w	r1, r6, #12
   1486e:	f007 f890 	bl	1b992 <start_tx_locked.isra.0>
	__asm__ volatile(
   14872:	f385 8811 	msr	BASEPRI, r5
   14876:	f3bf 8f6f 	isb	sy
				return;
   1487a:	e6e2      	b.n	14642 <uarte_nrfx_isr_async+0x2e>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1487c:	2601      	movs	r6, #1
   1487e:	e701      	b.n	14684 <uarte_nrfx_isr_async+0x70>
   14880:	2602      	movs	r6, #2
   14882:	e6ff      	b.n	14684 <uarte_nrfx_isr_async+0x70>
   14884:	2604      	movs	r6, #4
   14886:	e6fd      	b.n	14684 <uarte_nrfx_isr_async+0x70>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   14888:	2200      	movs	r2, #0
   1488a:	4620      	mov	r0, r4
   1488c:	3160      	adds	r1, #96	; 0x60
   1488e:	f006 ff0a 	bl	1b6a6 <notify_rx_buf_release>
	__asm__ volatile(
   14892:	f04f 0320 	mov.w	r3, #32
   14896:	f3ef 8111 	mrs	r1, BASEPRI
   1489a:	f383 8812 	msr	BASEPRI_MAX, r3
   1489e:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   148a2:	68fb      	ldr	r3, [r7, #12]
   148a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   148a6:	b1d2      	cbz	r2, 148de <uarte_nrfx_isr_async+0x2ca>
		data->async->rx_buf = data->async->rx_next_buf;
   148a8:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   148aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   148ac:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
   148ae:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   148b0:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
   148b4:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   148b6:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   148ba:	b90b      	cbnz	r3, 148c0 <uarte_nrfx_isr_async+0x2ac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   148bc:	2301      	movs	r3, #1
   148be:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   148c0:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   148c4:	f023 0320 	bic.w	r3, r3, #32
   148c8:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   148cc:	f381 8811 	msr	BASEPRI, r1
   148d0:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   148d4:	2200      	movs	r2, #0
   148d6:	68fb      	ldr	r3, [r7, #12]
   148d8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
   148dc:	e70e      	b.n	146fc <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   148de:	2301      	movs	r3, #1
   148e0:	6073      	str	r3, [r6, #4]
}
   148e2:	e7f3      	b.n	148cc <uarte_nrfx_isr_async+0x2b8>
		(void)rx_flush(dev, NULL, 0);
   148e4:	4611      	mov	r1, r2
   148e6:	4620      	mov	r0, r4
   148e8:	f006 ffea 	bl	1b8c0 <rx_flush>
   148ec:	e75b      	b.n	147a6 <uarte_nrfx_isr_async+0x192>
    p_reg->INTENCLR = mask;
   148ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   148f2:	2101      	movs	r1, #1
   148f4:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   148f8:	4620      	mov	r0, r4
   148fa:	f007 f816 	bl	1b92a <async_uart_release>
		if (!data->async->tx_size) {
   148fe:	68f3      	ldr	r3, [r6, #12]
   14900:	68db      	ldr	r3, [r3, #12]
   14902:	2b00      	cmp	r3, #0
   14904:	d189      	bne.n	1481a <uarte_nrfx_isr_async+0x206>
   14906:	e69c      	b.n	14642 <uarte_nrfx_isr_async+0x2e>
	if (data->async->tx_buf != data->async->xfer_buf) {
   14908:	6882      	ldr	r2, [r0, #8]
   1490a:	6903      	ldr	r3, [r0, #16]
   1490c:	429a      	cmp	r2, r3
   1490e:	d00b      	beq.n	14928 <uarte_nrfx_isr_async+0x314>
		if (amount == data->async->xfer_len) {
   14910:	6942      	ldr	r2, [r0, #20]
   14912:	6a03      	ldr	r3, [r0, #32]
   14914:	42aa      	cmp	r2, r5
   14916:	442b      	add	r3, r5
   14918:	d125      	bne.n	14966 <uarte_nrfx_isr_async+0x352>
			data->async->tx_cache_offset += amount;
   1491a:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
   1491c:	f007 f851 	bl	1b9c2 <setup_tx_cache.isra.0>
   14920:	2800      	cmp	r0, #0
   14922:	d199      	bne.n	14858 <uarte_nrfx_isr_async+0x244>
			amount = data->async->tx_cache_offset;
   14924:	68f3      	ldr	r3, [r6, #12]
   14926:	6a1d      	ldr	r5, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
   14928:	68f0      	ldr	r0, [r6, #12]
   1492a:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
   1492c:	f007 fb4b 	bl	1bfc6 <z_impl_k_timer_stop>
	struct uart_event evt = {
   14930:	2214      	movs	r2, #20
   14932:	2100      	movs	r1, #0
   14934:	a803      	add	r0, sp, #12
   14936:	f006 fded 	bl	1b514 <memset>
		.data.tx.buf = data->async->tx_buf,
   1493a:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   1493c:	4620      	mov	r0, r4
	struct uart_event evt = {
   1493e:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   14940:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   14942:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
   14946:	68da      	ldr	r2, [r3, #12]
   14948:	1aad      	subs	r5, r5, r2
   1494a:	bf18      	it	ne
   1494c:	2501      	movne	r5, #1
   1494e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   14952:	f88d 500c 	strb.w	r5, [sp, #12]
   14956:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1495a:	2200      	movs	r2, #0
   1495c:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   1495e:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   14960:	f006 fe81 	bl	1b666 <user_callback>
   14964:	e66d      	b.n	14642 <uarte_nrfx_isr_async+0x2e>
			amount += data->async->tx_cache_offset;
   14966:	461d      	mov	r5, r3
   14968:	e7de      	b.n	14928 <uarte_nrfx_isr_async+0x314>
   1496a:	bf00      	nop
   1496c:	000f4240 	.word	0x000f4240
   14970:	000f423f 	.word	0x000f423f

00014974 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   14974:	2300      	movs	r3, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   14976:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1497a:	f8d0 a004 	ldr.w	sl, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1497e:	f8d0 8010 	ldr.w	r8, [r0, #16]
	return config->uarte_regs;
   14982:	f8da 4000 	ldr.w	r4, [sl]
static int uarte_instance_init(const struct device *dev,
   14986:	4607      	mov	r7, r0
   14988:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1498c:	f8c8 0000 	str.w	r0, [r8]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   14990:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   14992:	68eb      	ldr	r3, [r5, #12]
   14994:	1c5a      	adds	r2, r3, #1
   14996:	d011      	beq.n	149bc <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14998:	4668      	mov	r0, sp
   1499a:	9300      	str	r3, [sp, #0]
   1499c:	f7ff fd58 	bl	14450 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   149a0:	2301      	movs	r3, #1
   149a2:	9a00      	ldr	r2, [sp, #0]
   149a4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   149a6:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   149a8:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   149aa:	4668      	mov	r0, sp
   149ac:	9300      	str	r3, [sp, #0]
   149ae:	f7ff fd4f 	bl	14450 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   149b2:	2203      	movs	r2, #3
   149b4:	9b00      	ldr	r3, [sp, #0]
   149b6:	3380      	adds	r3, #128	; 0x80
   149b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   149bc:	692b      	ldr	r3, [r5, #16]
   149be:	1c58      	adds	r0, r3, #1
   149c0:	d00d      	beq.n	149de <uarte_instance_init.isra.0+0x6a>
			nrf_gpio_cfg_input(cfg->rx_pin,
   149c2:	7f2a      	ldrb	r2, [r5, #28]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   149c4:	4668      	mov	r0, sp
   149c6:	2a00      	cmp	r2, #0
   149c8:	bf14      	ite	ne
   149ca:	2603      	movne	r6, #3
   149cc:	2600      	moveq	r6, #0
    nrf_gpio_cfg(
   149ce:	9300      	str	r3, [sp, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   149d0:	f7ff fd3e 	bl	14450 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   149d4:	9b00      	ldr	r3, [sp, #0]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   149d6:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
   149d8:	3380      	adds	r3, #128	; 0x80
   149da:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   149de:	696b      	ldr	r3, [r5, #20]
   149e0:	1c59      	adds	r1, r3, #1
   149e2:	d011      	beq.n	14a08 <uarte_instance_init.isra.0+0x94>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   149e4:	4668      	mov	r0, sp
   149e6:	9300      	str	r3, [sp, #0]
   149e8:	f7ff fd32 	bl	14450 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   149ec:	2301      	movs	r3, #1
   149ee:	9a00      	ldr	r2, [sp, #0]
   149f0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   149f2:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   149f4:	696b      	ldr	r3, [r5, #20]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   149f6:	4668      	mov	r0, sp
   149f8:	9300      	str	r3, [sp, #0]
   149fa:	f7ff fd29 	bl	14450 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   149fe:	2203      	movs	r2, #3
   14a00:	9b00      	ldr	r3, [sp, #0]
   14a02:	3380      	adds	r3, #128	; 0x80
   14a04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   14a08:	69ab      	ldr	r3, [r5, #24]
   14a0a:	1c5a      	adds	r2, r3, #1
   14a0c:	d00d      	beq.n	14a2a <uarte_instance_init.isra.0+0xb6>
			nrf_gpio_cfg_input(cfg->cts_pin,
   14a0e:	7f6a      	ldrb	r2, [r5, #29]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14a10:	4668      	mov	r0, sp
   14a12:	2a00      	cmp	r2, #0
   14a14:	bf14      	ite	ne
   14a16:	2603      	movne	r6, #3
   14a18:	2600      	moveq	r6, #0
    nrf_gpio_cfg(
   14a1a:	9300      	str	r3, [sp, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14a1c:	f7ff fd18 	bl	14450 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   14a20:	9b00      	ldr	r3, [sp, #0]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   14a22:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
   14a24:	3380      	adds	r3, #128	; 0x80
   14a26:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   14a2a:	682b      	ldr	r3, [r5, #0]
   14a2c:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    p_reg->PSEL.TXD = pseltxd;
   14a30:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   14a34:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   14a38:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
   14a3c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   14a40:	6939      	ldr	r1, [r7, #16]
   14a42:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
   14a44:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   14a48:	3104      	adds	r1, #4
   14a4a:	f7ff fbc5 	bl	141d8 <uarte_nrfx_configure>
	if (err) {
   14a4e:	4681      	mov	r9, r0
   14a50:	2800      	cmp	r0, #0
   14a52:	f040 80ed 	bne.w	14c30 <uarte_instance_init.isra.0+0x2bc>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   14a56:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   14a5a:	0798      	lsls	r0, r3, #30
   14a5c:	d53e      	bpl.n	14adc <uarte_instance_init.isra.0+0x168>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   14a5e:	f108 0016 	add.w	r0, r8, #22
   14a62:	f001 fa87 	bl	15f74 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   14a66:	4b84      	ldr	r3, [pc, #528]	; (14c78 <uarte_instance_init.isra.0+0x304>)
   14a68:	4298      	cmp	r0, r3
   14a6a:	d00c      	beq.n	14a86 <uarte_instance_init.isra.0+0x112>
   14a6c:	4883      	ldr	r0, [pc, #524]	; (14c7c <uarte_instance_init.isra.0+0x308>)
   14a6e:	4b84      	ldr	r3, [pc, #528]	; (14c80 <uarte_instance_init.isra.0+0x30c>)
		LOG_ERR("Failed to allocate PPI Channel");
   14a70:	4984      	ldr	r1, [pc, #528]	; (14c84 <uarte_instance_init.isra.0+0x310>)
   14a72:	1ac0      	subs	r0, r0, r3
   14a74:	08c0      	lsrs	r0, r0, #3
   14a76:	0180      	lsls	r0, r0, #6
   14a78:	f040 0001 	orr.w	r0, r0, #1
   14a7c:	f006 fc81 	bl	1b382 <log_string_sync>
		err = endtx_stoptx_ppi_init(uarte, data);
		if (err < 0) {
   14a80:	f06f 0904 	mvn.w	r9, #4
   14a84:	e0d4      	b.n	14c30 <uarte_instance_init.isra.0+0x2bc>
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   14a86:	f514 7690 	adds.w	r6, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   14a8a:	f898 5016 	ldrb.w	r5, [r8, #22]
   14a8e:	d10a      	bne.n	14aa6 <uarte_instance_init.isra.0+0x132>
   14a90:	497d      	ldr	r1, [pc, #500]	; (14c88 <uarte_instance_init.isra.0+0x314>)
   14a92:	487e      	ldr	r0, [pc, #504]	; (14c8c <uarte_instance_init.isra.0+0x318>)
   14a94:	f44f 7212 	mov.w	r2, #584	; 0x248
   14a98:	f006 fa5c 	bl	1af54 <printk>
   14a9c:	f44f 7112 	mov.w	r1, #584	; 0x248
   14aa0:	4879      	ldr	r0, [pc, #484]	; (14c88 <uarte_instance_init.isra.0+0x314>)
   14aa2:	f006 fc3b 	bl	1b31c <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   14aa6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   14aaa:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   14aae:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
    NRFX_ASSERT(tep);
   14ab2:	d10a      	bne.n	14aca <uarte_instance_init.isra.0+0x156>
   14ab4:	4974      	ldr	r1, [pc, #464]	; (14c88 <uarte_instance_init.isra.0+0x314>)
   14ab6:	4875      	ldr	r0, [pc, #468]	; (14c8c <uarte_instance_init.isra.0+0x318>)
   14ab8:	f240 224e 	movw	r2, #590	; 0x24e
   14abc:	f006 fa4a 	bl	1af54 <printk>
   14ac0:	f240 214e 	movw	r1, #590	; 0x24e
   14ac4:	4870      	ldr	r0, [pc, #448]	; (14c88 <uarte_instance_init.isra.0+0x314>)
   14ac6:	f006 fc29 	bl	1b31c <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   14aca:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   14acc:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
   14ad0:	f898 2016 	ldrb.w	r2, [r8, #22]
   14ad4:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   14ad6:	4a6e      	ldr	r2, [pc, #440]	; (14c90 <uarte_instance_init.isra.0+0x31c>)
   14ad8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
   14adc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   14ae0:	2b00      	cmp	r3, #0
   14ae2:	f000 80b4 	beq.w	14c4e <uarte_instance_init.isra.0+0x2da>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14ae6:	693e      	ldr	r6, [r7, #16]
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   14ae8:	687f      	ldr	r7, [r7, #4]
		return data->async->hw_rx_counting;
   14aea:	68f3      	ldr	r3, [r6, #12]
	return config->uarte_regs;
   14aec:	683d      	ldr	r5, [r7, #0]
	if (hw_rx_counting_enabled(data)) {
   14aee:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
   14af2:	b1eb      	cbz	r3, 14b30 <uarte_instance_init.isra.0+0x1bc>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   14af4:	2300      	movs	r3, #0
   14af6:	4967      	ldr	r1, [pc, #412]	; (14c94 <uarte_instance_init.isra.0+0x320>)
		ret = nrfx_timer_init(&cfg->timer,
   14af8:	f107 0b20 	add.w	fp, r7, #32
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   14afc:	e9cd 1300 	strd	r1, r3, [sp]
		ret = nrfx_timer_init(&cfg->timer,
   14b00:	4a65      	ldr	r2, [pc, #404]	; (14c98 <uarte_instance_init.isra.0+0x324>)
   14b02:	4669      	mov	r1, sp
   14b04:	4658      	mov	r0, fp
   14b06:	f001 fec5 	bl	16894 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   14b0a:	4a5b      	ldr	r2, [pc, #364]	; (14c78 <uarte_instance_init.isra.0+0x304>)
   14b0c:	4290      	cmp	r0, r2
   14b0e:	f000 8093 	beq.w	14c38 <uarte_instance_init.isra.0+0x2c4>
   14b12:	4b5b      	ldr	r3, [pc, #364]	; (14c80 <uarte_instance_init.isra.0+0x30c>)
   14b14:	4859      	ldr	r0, [pc, #356]	; (14c7c <uarte_instance_init.isra.0+0x308>)
			LOG_ERR("Timer already initialized, "
   14b16:	4961      	ldr	r1, [pc, #388]	; (14c9c <uarte_instance_init.isra.0+0x328>)
   14b18:	1ac0      	subs	r0, r0, r3
   14b1a:	08c0      	lsrs	r0, r0, #3
   14b1c:	0180      	lsls	r0, r0, #6
   14b1e:	f040 0001 	orr.w	r0, r0, #1
   14b22:	f006 fc2e 	bl	1b382 <log_string_sync>
			data->async->hw_rx_counting = false;
   14b26:	f04f 0200 	mov.w	r2, #0
   14b2a:	68f3      	ldr	r3, [r6, #12]
   14b2c:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	if (hw_rx_counting_enabled(data)) {
   14b30:	68f0      	ldr	r0, [r6, #12]
   14b32:	f890 30d3 	ldrb.w	r3, [r0, #211]	; 0xd3
   14b36:	b1bb      	cbz	r3, 14b68 <uarte_instance_init.isra.0+0x1f4>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   14b38:	30c0      	adds	r0, #192	; 0xc0
   14b3a:	f001 fa1b 	bl	15f74 <nrfx_dppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   14b3e:	4b4e      	ldr	r3, [pc, #312]	; (14c78 <uarte_instance_init.isra.0+0x304>)
   14b40:	4298      	cmp	r0, r3
   14b42:	d011      	beq.n	14b68 <uarte_instance_init.isra.0+0x1f4>
   14b44:	4b4e      	ldr	r3, [pc, #312]	; (14c80 <uarte_instance_init.isra.0+0x30c>)
   14b46:	484d      	ldr	r0, [pc, #308]	; (14c7c <uarte_instance_init.isra.0+0x308>)
			LOG_ERR("Failed to allocate PPI Channel, "
   14b48:	4955      	ldr	r1, [pc, #340]	; (14ca0 <uarte_instance_init.isra.0+0x32c>)
   14b4a:	1ac0      	subs	r0, r0, r3
   14b4c:	08c0      	lsrs	r0, r0, #3
   14b4e:	0180      	lsls	r0, r0, #6
   14b50:	f040 0001 	orr.w	r0, r0, #1
   14b54:	f006 fc15 	bl	1b382 <log_string_sync>
			data->async->hw_rx_counting = false;
   14b58:	2200      	movs	r2, #0
   14b5a:	68f3      	ldr	r3, [r6, #12]
			nrfx_timer_uninit(&cfg->timer);
   14b5c:	f107 0020 	add.w	r0, r7, #32
			data->async->hw_rx_counting = false;
   14b60:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
			nrfx_timer_uninit(&cfg->timer);
   14b64:	f001 ff66 	bl	16a34 <nrfx_timer_uninit>
	if (hw_rx_counting_enabled(data)) {
   14b68:	68f3      	ldr	r3, [r6, #12]
   14b6a:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
   14b6e:	2a00      	cmp	r2, #0
   14b70:	d069      	beq.n	14c46 <uarte_instance_init.isra.0+0x2d2>
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   14b72:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   14b76:	6a39      	ldr	r1, [r7, #32]
   14b78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   14b7c:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   14b80:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
   14b84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   14b88:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   14b8c:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   14b90:	f001 f9f6 	bl	15f80 <nrfx_dppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   14b94:	4b38      	ldr	r3, [pc, #224]	; (14c78 <uarte_instance_init.isra.0+0x304>)
   14b96:	4298      	cmp	r0, r3
   14b98:	f47f af72 	bne.w	14a80 <uarte_instance_init.isra.0+0x10c>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   14b9c:	2301      	movs	r3, #1
   14b9e:	68f0      	ldr	r0, [r6, #12]
    p_reg->INTENSET = mask;
   14ba0:	4a40      	ldr	r2, [pc, #256]	; (14ca4 <uarte_instance_init.isra.0+0x330>)
   14ba2:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   14ba6:	f8c5 2304 	str.w	r2, [r5, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14baa:	2208      	movs	r2, #8
   14bac:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14bb0:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   14bb4:	b1a2      	cbz	r2, 14be0 <uarte_instance_init.isra.0+0x26c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14bb6:	606b      	str	r3, [r5, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14bb8:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   14bbc:	b91b      	cbnz	r3, 14bc6 <uarte_instance_init.isra.0+0x252>
   14bbe:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   14bc2:	2b00      	cmp	r3, #0
   14bc4:	d0f8      	beq.n	14bb8 <uarte_instance_init.isra.0+0x244>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14bc6:	2300      	movs	r3, #0
   14bc8:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
   14bcc:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
   14bd0:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   14bd4:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   14bd8:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   14bdc:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   14be0:	2200      	movs	r2, #0
   14be2:	4931      	ldr	r1, [pc, #196]	; (14ca8 <uarte_instance_init.isra.0+0x334>)
   14be4:	3088      	adds	r0, #136	; 0x88
   14be6:	f007 f9e2 	bl	1bfae <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   14bea:	68f3      	ldr	r3, [r6, #12]
	timer->user_data = user_data;
   14bec:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   14bf0:	68f0      	ldr	r0, [r6, #12]
   14bf2:	2200      	movs	r2, #0
   14bf4:	492d      	ldr	r1, [pc, #180]	; (14cac <uarte_instance_init.isra.0+0x338>)
   14bf6:	3028      	adds	r0, #40	; 0x28
   14bf8:	f007 f9d9 	bl	1bfae <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   14bfc:	68f3      	ldr	r3, [r6, #12]
   14bfe:	65de      	str	r6, [r3, #92]	; 0x5c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   14c00:	f8da 3004 	ldr.w	r3, [sl, #4]
   14c04:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   14c06:	bf5c      	itt	pl
   14c08:	f44f 7280 	movpl.w	r2, #256	; 0x100
   14c0c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14c10:	06db      	lsls	r3, r3, #27
   14c12:	bf44      	itt	mi
   14c14:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   14c18:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   14c1c:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14c20:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14c24:	2300      	movs	r3, #0
   14c26:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c2a:	2301      	movs	r3, #1
   14c2c:	60a3      	str	r3, [r4, #8]
   14c2e:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   14c30:	4648      	mov	r0, r9
   14c32:	b003      	add	sp, #12
   14c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nrfx_timer_enable(&cfg->timer);
   14c38:	4658      	mov	r0, fp
   14c3a:	f001 feb5 	bl	169a8 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   14c3e:	4658      	mov	r0, fp
   14c40:	f001 ff16 	bl	16a70 <nrfx_timer_clear>
   14c44:	e774      	b.n	14b30 <uarte_instance_init.isra.0+0x1bc>
    p_reg->INTENSET = mask;
   14c46:	2304      	movs	r3, #4
   14c48:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	if (ret != 0) {
   14c4c:	e7a6      	b.n	14b9c <uarte_instance_init.isra.0+0x228>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14c4e:	2308      	movs	r3, #8
   14c50:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   14c54:	f89a 3008 	ldrb.w	r3, [sl, #8]
   14c58:	2b00      	cmp	r3, #0
   14c5a:	d1d1      	bne.n	14c00 <uarte_instance_init.isra.0+0x28c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c5c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   14c60:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   14c64:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   14c68:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   14c6c:	2301      	movs	r3, #1
   14c6e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c72:	6023      	str	r3, [r4, #0]
}
   14c74:	e7c4      	b.n	14c00 <uarte_instance_init.isra.0+0x28c>
   14c76:	bf00      	nop
   14c78:	0bad0000 	.word	0x0bad0000
   14c7c:	0001c368 	.word	0x0001c368
   14c80:	0001c308 	.word	0x0001c308
   14c84:	0001d27c 	.word	0x0001d27c
   14c88:	0001d29b 	.word	0x0001d29b
   14c8c:	0001c625 	.word	0x0001c625
   14c90:	40017000 	.word	0x40017000
   14c94:	07030100 	.word	0x07030100
   14c98:	0001b665 	.word	0x0001b665
   14c9c:	0001d2d3 	.word	0x0001d2d3
   14ca0:	0001d313 	.word	0x0001d313
   14ca4:	000a0210 	.word	0x000a0210
   14ca8:	0001b815 	.word	0x0001b815
   14cac:	0001ba15 	.word	0x0001ba15

00014cb0 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   14cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14cb2:	460f      	mov	r7, r1
   14cb4:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   14cb6:	b940      	cbnz	r0, 14cca <entropy_cc3xx_rng_get_entropy+0x1a>
   14cb8:	4917      	ldr	r1, [pc, #92]	; (14d18 <entropy_cc3xx_rng_get_entropy+0x68>)
   14cba:	4818      	ldr	r0, [pc, #96]	; (14d1c <entropy_cc3xx_rng_get_entropy+0x6c>)
   14cbc:	2224      	movs	r2, #36	; 0x24
   14cbe:	f006 f949 	bl	1af54 <printk>
   14cc2:	2124      	movs	r1, #36	; 0x24
   14cc4:	4814      	ldr	r0, [pc, #80]	; (14d18 <entropy_cc3xx_rng_get_entropy+0x68>)
   14cc6:	f006 fb29 	bl	1b31c <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   14cca:	b947      	cbnz	r7, 14cde <entropy_cc3xx_rng_get_entropy+0x2e>
   14ccc:	4912      	ldr	r1, [pc, #72]	; (14d18 <entropy_cc3xx_rng_get_entropy+0x68>)
   14cce:	4813      	ldr	r0, [pc, #76]	; (14d1c <entropy_cc3xx_rng_get_entropy+0x6c>)
   14cd0:	2225      	movs	r2, #37	; 0x25
   14cd2:	f006 f93f 	bl	1af54 <printk>
   14cd6:	2125      	movs	r1, #37	; 0x25
   14cd8:	480f      	ldr	r0, [pc, #60]	; (14d18 <entropy_cc3xx_rng_get_entropy+0x68>)
   14cda:	f006 fb1f 	bl	1b31c <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   14cde:	f44f 6580 	mov.w	r5, #1024	; 0x400
   14ce2:	2400      	movs	r4, #0
   14ce4:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   14ce8:	42a6      	cmp	r6, r4
   14cea:	d801      	bhi.n	14cf0 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
	}
#endif

	return res;
}
   14cec:	b003      	add	sp, #12
   14cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   14cf0:	1b33      	subs	r3, r6, r4
   14cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   14cf6:	bf38      	it	cc
   14cf8:	461d      	movcc	r5, r3
			res = spm_request_random_number(buffer + offset,
   14cfa:	aa01      	add	r2, sp, #4
   14cfc:	4629      	mov	r1, r5
   14cfe:	1938      	adds	r0, r7, r4
   14d00:	f006 fb80 	bl	1b404 <spm_request_random_number>
		if (olen != chunk_size) {
   14d04:	9b01      	ldr	r3, [sp, #4]
   14d06:	42ab      	cmp	r3, r5
   14d08:	d103      	bne.n	14d12 <entropy_cc3xx_rng_get_entropy+0x62>
		if (res != 0) {
   14d0a:	2800      	cmp	r0, #0
   14d0c:	d1ee      	bne.n	14cec <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
   14d0e:	442c      	add	r4, r5
   14d10:	e7ea      	b.n	14ce8 <entropy_cc3xx_rng_get_entropy+0x38>
			return -EINVAL;
   14d12:	f06f 0015 	mvn.w	r0, #21
   14d16:	e7e9      	b.n	14cec <entropy_cc3xx_rng_get_entropy+0x3c>
   14d18:	0001d36f 	.word	0x0001d36f
   14d1c:	0001c625 	.word	0x0001c625

00014d20 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14d20:	4919      	ldr	r1, [pc, #100]	; (14d88 <sys_clock_timeout_handler+0x68>)
{
   14d22:	b570      	push	{r4, r5, r6, lr}
   14d24:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   14d26:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14d2a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   14d2c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   14d30:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14d34:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   14d36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   14d3a:	f04f 0500 	mov.w	r5, #0
   14d3e:	d20a      	bcs.n	14d56 <sys_clock_timeout_handler+0x36>
		return true;
   14d40:	2501      	movs	r5, #1
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   14d42:	4b12      	ldr	r3, [pc, #72]	; (14d8c <sys_clock_timeout_handler+0x6c>)
   14d44:	6819      	ldr	r1, [r3, #0]
   14d46:	060a      	lsls	r2, r1, #24
   14d48:	0a0b      	lsrs	r3, r1, #8
   14d4a:	1992      	adds	r2, r2, r6
   14d4c:	4910      	ldr	r1, [pc, #64]	; (14d90 <sys_clock_timeout_handler+0x70>)
   14d4e:	f143 0300 	adc.w	r3, r3, #0
   14d52:	e9c1 2300 	strd	r2, r3, [r1]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   14d56:	f005 fecb 	bl	1aaf0 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   14d5a:	00a3      	lsls	r3, r4, #2
   14d5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14d60:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   14d64:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   14d68:	42b2      	cmp	r2, r6
   14d6a:	d10b      	bne.n	14d84 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   14d6c:	b91d      	cbnz	r5, 14d76 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   14d6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   14d72:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14d76:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   14d7a:	4b06      	ldr	r3, [pc, #24]	; (14d94 <sys_clock_timeout_handler+0x74>)
   14d7c:	fa00 f404 	lsl.w	r4, r0, r4
   14d80:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   14d84:	bd70      	pop	{r4, r5, r6, pc}
   14d86:	bf00      	nop
   14d88:	2000cc68 	.word	0x2000cc68
   14d8c:	2000d138 	.word	0x2000d138
   14d90:	2000cc50 	.word	0x2000cc50
   14d94:	40015000 	.word	0x40015000

00014d98 <compare_int_lock>:
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   14d98:	2301      	movs	r3, #1
   14d9a:	4083      	lsls	r3, r0
{
   14d9c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   14d9e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14da0:	4a0c      	ldr	r2, [pc, #48]	; (14dd4 <compare_int_lock+0x3c>)
   14da2:	e8d2 1fef 	ldaex	r1, [r2]
   14da6:	ea01 0c04 	and.w	ip, r1, r4
   14daa:	e8c2 cfee 	stlex	lr, ip, [r2]
   14dae:	f1be 0f00 	cmp.w	lr, #0
   14db2:	d1f6      	bne.n	14da2 <compare_int_lock+0xa>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14db4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14db8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   14dbc:	4a06      	ldr	r2, [pc, #24]	; (14dd8 <compare_int_lock+0x40>)
   14dbe:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   14dc2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14dc6:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   14dca:	420b      	tst	r3, r1
}
   14dcc:	bf14      	ite	ne
   14dce:	2001      	movne	r0, #1
   14dd0:	2000      	moveq	r0, #0
   14dd2:	bd10      	pop	{r4, pc}
   14dd4:	2000d134 	.word	0x2000d134
   14dd8:	40015000 	.word	0x40015000

00014ddc <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   14ddc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14dde:	4a0e      	ldr	r2, [pc, #56]	; (14e18 <compare_int_unlock.part.0+0x3c>)
   14de0:	4083      	lsls	r3, r0
   14de2:	e8d2 1fef 	ldaex	r1, [r2]
   14de6:	4319      	orrs	r1, r3
   14de8:	e8c2 1fec 	stlex	ip, r1, [r2]
   14dec:	f1bc 0f00 	cmp.w	ip, #0
   14df0:	d1f7      	bne.n	14de2 <compare_int_unlock.part.0+0x6>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   14df6:	4a09      	ldr	r2, [pc, #36]	; (14e1c <compare_int_unlock.part.0+0x40>)
   14df8:	4083      	lsls	r3, r0
   14dfa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14dfe:	4b08      	ldr	r3, [pc, #32]	; (14e20 <compare_int_unlock.part.0+0x44>)
   14e00:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   14e04:	fa23 f000 	lsr.w	r0, r3, r0
   14e08:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14e0a:	bf42      	ittt	mi
   14e0c:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   14e10:	4b04      	ldrmi	r3, [pc, #16]	; (14e24 <compare_int_unlock.part.0+0x48>)
   14e12:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   14e16:	4770      	bx	lr
   14e18:	2000d134 	.word	0x2000d134
   14e1c:	40015000 	.word	0x40015000
   14e20:	2000d130 	.word	0x2000d130
   14e24:	e000e100 	.word	0xe000e100

00014e28 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   14e28:	4b0d      	ldr	r3, [pc, #52]	; (14e60 <z_nrf_rtc_timer_read+0x38>)
   14e2a:	681b      	ldr	r3, [r3, #0]
   14e2c:	0a19      	lsrs	r1, r3, #8
   14e2e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   14e30:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   14e34:	4b0b      	ldr	r3, [pc, #44]	; (14e64 <z_nrf_rtc_timer_read+0x3c>)
   14e36:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   14e3a:	18c0      	adds	r0, r0, r3
   14e3c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   14e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14e44:	d20a      	bcs.n	14e5c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   14e46:	4b08      	ldr	r3, [pc, #32]	; (14e68 <z_nrf_rtc_timer_read+0x40>)
   14e48:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e4c:	4299      	cmp	r1, r3
   14e4e:	bf08      	it	eq
   14e50:	4290      	cmpeq	r0, r2
   14e52:	d203      	bcs.n	14e5c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   14e54:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   14e58:	f141 0100 	adc.w	r1, r1, #0
}
   14e5c:	4770      	bx	lr
   14e5e:	bf00      	nop
   14e60:	2000d138 	.word	0x2000d138
   14e64:	40015000 	.word	0x40015000
   14e68:	2000cc50 	.word	0x2000cc50

00014e6c <compare_set>:
{
   14e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e70:	4616      	mov	r6, r2
   14e72:	461f      	mov	r7, r3
   14e74:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   14e76:	f7ff ff8f 	bl	14d98 <compare_int_lock>
   14e7a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   14e7c:	f7ff ffd4 	bl	14e28 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   14e80:	42b9      	cmp	r1, r7
   14e82:	bf08      	it	eq
   14e84:	42b0      	cmpeq	r0, r6
   14e86:	d27b      	bcs.n	14f80 <compare_set+0x114>
		if (target_time - curr_time > COUNTER_SPAN) {
   14e88:	2300      	movs	r3, #0
   14e8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   14e8e:	ebb6 0800 	subs.w	r8, r6, r0
   14e92:	eb67 0901 	sbc.w	r9, r7, r1
   14e96:	454b      	cmp	r3, r9
   14e98:	bf08      	it	eq
   14e9a:	4542      	cmpeq	r2, r8
   14e9c:	d37d      	bcc.n	14f9a <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
   14e9e:	4b40      	ldr	r3, [pc, #256]	; (14fa0 <compare_set+0x134>)
   14ea0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   14ea4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   14ea8:	429f      	cmp	r7, r3
   14eaa:	bf08      	it	eq
   14eac:	4296      	cmpeq	r6, r2
   14eae:	d051      	beq.n	14f54 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14eb0:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   14eb4:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   14eb8:	4614      	mov	r4, r2
   14eba:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14ebe:	f105 0850 	add.w	r8, r5, #80	; 0x50
   14ec2:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   14ec6:	ea4f 0888 	mov.w	r8, r8, lsl #2
   14eca:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14ece:	fa1f f888 	uxth.w	r8, r8
   14ed2:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   14ed6:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   14eda:	4b32      	ldr	r3, [pc, #200]	; (14fa4 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14edc:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14ee0:	fa0b fb05 	lsl.w	fp, fp, r5
     return p_reg->COUNTER;
   14ee4:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   14ee8:	eba0 000a 	sub.w	r0, r0, sl
   14eec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14ef0:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   14ef4:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   14ef6:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   14efa:	d105      	bne.n	14f08 <compare_set+0x9c>
   14efc:	9201      	str	r2, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   14efe:	2013      	movs	r0, #19
   14f00:	f007 f828 	bl	1bf54 <z_impl_k_busy_wait>
   14f04:	4b27      	ldr	r3, [pc, #156]	; (14fa4 <compare_set+0x138>)
   14f06:	9a01      	ldr	r2, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   14f08:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   14f0c:	eba4 000c 	sub.w	r0, r4, ip
   14f10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14f14:	2100      	movs	r1, #0
			cc_val = now + 2;
   14f16:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   14f1a:	bf88      	it	hi
   14f1c:	4664      	movhi	r4, ip
   14f1e:	f8c8 1000 	str.w	r1, [r8]
   14f22:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14f26:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
   14f2a:	f8c3 b344 	str.w	fp, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   14f2e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   14f32:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   14f36:	4582      	cmp	sl, r0
   14f38:	d006      	beq.n	14f48 <compare_set+0xdc>
	return (a - b) & COUNTER_MAX;
   14f3a:	1a20      	subs	r0, r4, r0
   14f3c:	3802      	subs	r0, #2
   14f3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   14f42:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   14f46:	d819      	bhi.n	14f7c <compare_set+0x110>
	return (a - b) & COUNTER_MAX;
   14f48:	1aa4      	subs	r4, r4, r2
   14f4a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   14f4e:	1932      	adds	r2, r6, r4
   14f50:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   14f54:	4c12      	ldr	r4, [pc, #72]	; (14fa0 <compare_set+0x134>)
   14f56:	0129      	lsls	r1, r5, #4
   14f58:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   14f5c:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   14f60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	cc_data[chan].user_context = user_data;
   14f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc_data[chan].callback = handler;
   14f64:	5062      	str	r2, [r4, r1]
	return ret;
   14f66:	2400      	movs	r4, #0
	cc_data[chan].user_context = user_data;
   14f68:	6043      	str	r3, [r0, #4]
	if (key) {
   14f6a:	9b00      	ldr	r3, [sp, #0]
   14f6c:	b113      	cbz	r3, 14f74 <compare_set+0x108>
   14f6e:	4628      	mov	r0, r5
   14f70:	f7ff ff34 	bl	14ddc <compare_int_unlock.part.0>
}
   14f74:	4620      	mov	r0, r4
   14f76:	b003      	add	sp, #12
   14f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f7c:	4620      	mov	r0, r4
   14f7e:	e7b1      	b.n	14ee4 <compare_set+0x78>
		atomic_or(&force_isr_mask, BIT(chan));
   14f80:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14f82:	4a09      	ldr	r2, [pc, #36]	; (14fa8 <compare_set+0x13c>)
   14f84:	40ab      	lsls	r3, r5
   14f86:	e8d2 1fef 	ldaex	r1, [r2]
   14f8a:	4319      	orrs	r1, r3
   14f8c:	e8c2 1fe0 	stlex	r0, r1, [r2]
   14f90:	2800      	cmp	r0, #0
   14f92:	d1f8      	bne.n	14f86 <compare_set+0x11a>
   14f94:	4632      	mov	r2, r6
   14f96:	463b      	mov	r3, r7
   14f98:	e7dc      	b.n	14f54 <compare_set+0xe8>
			return -EINVAL;
   14f9a:	f06f 0415 	mvn.w	r4, #21
   14f9e:	e7e4      	b.n	14f6a <compare_set+0xfe>
   14fa0:	2000cc58 	.word	0x2000cc58
   14fa4:	40015000 	.word	0x40015000
   14fa8:	2000d130 	.word	0x2000d130

00014fac <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   14fac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   14fae:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   14fb0:	f04f 30ff 	mov.w	r0, #4294967295
   14fb4:	f04f 31ff 	mov.w	r1, #4294967295
   14fb8:	4d16      	ldr	r5, [pc, #88]	; (15014 <sys_clock_driver_init+0x68>)
   14fba:	4b17      	ldr	r3, [pc, #92]	; (15018 <sys_clock_driver_init+0x6c>)
   14fbc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   14fc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   14fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14fc8:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14fca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   14fce:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   14fd2:	4b12      	ldr	r3, [pc, #72]	; (1501c <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   14fd4:	2101      	movs	r1, #1
   14fd6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   14fda:	2015      	movs	r0, #21
   14fdc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14fe0:	4622      	mov	r2, r4
   14fe2:	f7fd ff23 	bl	12e2c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   14fe6:	2015      	movs	r0, #21
   14fe8:	f7fd feee 	bl	12dc8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   14fec:	2301      	movs	r3, #1
   14fee:	4a0c      	ldr	r2, [pc, #48]	; (15020 <sys_clock_driver_init+0x74>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   14ff0:	4620      	mov	r0, r4
   14ff2:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   14ff4:	4a0b      	ldr	r2, [pc, #44]	; (15024 <sys_clock_driver_init+0x78>)
   14ff6:	602b      	str	r3, [r5, #0]
   14ff8:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   14ffa:	4b0b      	ldr	r3, [pc, #44]	; (15028 <sys_clock_driver_init+0x7c>)
   14ffc:	4a0b      	ldr	r2, [pc, #44]	; (1502c <sys_clock_driver_init+0x80>)
   14ffe:	9300      	str	r3, [sp, #0]
   15000:	9401      	str	r4, [sp, #4]
   15002:	2300      	movs	r3, #0
   15004:	f7ff ff32 	bl	14e6c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   15008:	4630      	mov	r0, r6
   1500a:	f7fe fe35 	bl	13c78 <z_nrf_clock_control_lf_on>

	return 0;
}
   1500e:	4620      	mov	r0, r4
   15010:	b002      	add	sp, #8
   15012:	bd70      	pop	{r4, r5, r6, pc}
   15014:	40015000 	.word	0x40015000
   15018:	2000cc58 	.word	0x2000cc58
   1501c:	e000e100 	.word	0xe000e100
   15020:	40015008 	.word	0x40015008
   15024:	2000d134 	.word	0x2000d134
   15028:	00014d21 	.word	0x00014d21
   1502c:	007fffff 	.word	0x007fffff

00015030 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   15030:	4b33      	ldr	r3, [pc, #204]	; (15100 <rtc_nrf_isr+0xd0>)
{
   15032:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   15036:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1503a:	079a      	lsls	r2, r3, #30
   1503c:	d509      	bpl.n	15052 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1503e:	4b31      	ldr	r3, [pc, #196]	; (15104 <rtc_nrf_isr+0xd4>)
   15040:	681a      	ldr	r2, [r3, #0]
   15042:	b132      	cbz	r2, 15052 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15044:	2200      	movs	r2, #0
   15046:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   15048:	4a2f      	ldr	r2, [pc, #188]	; (15108 <rtc_nrf_isr+0xd8>)
   1504a:	681b      	ldr	r3, [r3, #0]
   1504c:	6813      	ldr	r3, [r2, #0]
   1504e:	3301      	adds	r3, #1
   15050:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   15052:	f04f 0320 	mov.w	r3, #32
   15056:	f3ef 8211 	mrs	r2, BASEPRI
   1505a:	f383 8812 	msr	BASEPRI_MAX, r3
   1505e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   15062:	4b27      	ldr	r3, [pc, #156]	; (15100 <rtc_nrf_isr+0xd0>)
   15064:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   15068:	03db      	lsls	r3, r3, #15
   1506a:	d50e      	bpl.n	1508a <rtc_nrf_isr+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1506c:	4b27      	ldr	r3, [pc, #156]	; (1510c <rtc_nrf_isr+0xdc>)
   1506e:	e8d3 1fef 	ldaex	r1, [r3]
   15072:	f021 0001 	bic.w	r0, r1, #1
   15076:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1507a:	2c00      	cmp	r4, #0
   1507c:	d1f7      	bne.n	1506e <rtc_nrf_isr+0x3e>
   1507e:	4b24      	ldr	r3, [pc, #144]	; (15110 <rtc_nrf_isr+0xe0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   15080:	2900      	cmp	r1, #0
   15082:	d136      	bne.n	150f2 <rtc_nrf_isr+0xc2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15084:	6819      	ldr	r1, [r3, #0]
		if (result) {
   15086:	2900      	cmp	r1, #0
   15088:	d133      	bne.n	150f2 <rtc_nrf_isr+0xc2>
{
   1508a:	2300      	movs	r3, #0
	__asm__ volatile(
   1508c:	f382 8811 	msr	BASEPRI, r2
   15090:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   15094:	b353      	cbz	r3, 150ec <rtc_nrf_isr+0xbc>
		curr_time = z_nrf_rtc_timer_read();
   15096:	f7ff fec7 	bl	14e28 <z_nrf_rtc_timer_read>
   1509a:	4604      	mov	r4, r0
	__asm__ volatile(
   1509c:	f04f 0320 	mov.w	r3, #32
   150a0:	f3ef 8011 	mrs	r0, BASEPRI
   150a4:	f383 8812 	msr	BASEPRI_MAX, r3
   150a8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   150ac:	4b19      	ldr	r3, [pc, #100]	; (15114 <rtc_nrf_isr+0xe4>)
   150ae:	2200      	movs	r2, #0
   150b0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   150b4:	4549      	cmp	r1, r9
   150b6:	bf08      	it	eq
   150b8:	4544      	cmpeq	r4, r8
   150ba:	d31f      	bcc.n	150fc <rtc_nrf_isr+0xcc>
			user_context = cc_data[chan].user_context;
   150bc:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   150c0:	f04f 34ff 	mov.w	r4, #4294967295
   150c4:	f04f 35ff 	mov.w	r5, #4294967295
			cc_data[chan].callback = NULL;
   150c8:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   150ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   150ce:	e9c3 4502 	strd	r4, r5, [r3, #8]
   150d2:	4b0b      	ldr	r3, [pc, #44]	; (15100 <rtc_nrf_isr+0xd0>)
   150d4:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   150d8:	f380 8811 	msr	BASEPRI, r0
   150dc:	f3bf 8f6f 	isb	sy
		if (handler) {
   150e0:	b121      	cbz	r1, 150ec <rtc_nrf_isr+0xbc>
			handler(chan, expire_time, user_context);
   150e2:	4642      	mov	r2, r8
   150e4:	464b      	mov	r3, r9
   150e6:	2000      	movs	r0, #0
   150e8:	9600      	str	r6, [sp, #0]
   150ea:	4788      	blx	r1
}
   150ec:	b002      	add	sp, #8
   150ee:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   150f2:	2100      	movs	r1, #0
   150f4:	6019      	str	r1, [r3, #0]
   150f6:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   150f8:	2301      	movs	r3, #1
}
   150fa:	e7c7      	b.n	1508c <rtc_nrf_isr+0x5c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   150fc:	4611      	mov	r1, r2
   150fe:	e7eb      	b.n	150d8 <rtc_nrf_isr+0xa8>
   15100:	40015000 	.word	0x40015000
   15104:	40015104 	.word	0x40015104
   15108:	2000d138 	.word	0x2000d138
   1510c:	2000d130 	.word	0x2000d130
   15110:	40015140 	.word	0x40015140
   15114:	2000cc58 	.word	0x2000cc58

00015118 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15118:	4b14      	ldr	r3, [pc, #80]	; (1516c <sys_clock_set_timeout+0x54>)
{
   1511a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1511c:	f1b0 3fff 	cmp.w	r0, #4294967295
   15120:	bf08      	it	eq
   15122:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15124:	1e44      	subs	r4, r0, #1
   15126:	2c00      	cmp	r4, #0
   15128:	dd1d      	ble.n	15166 <sys_clock_set_timeout+0x4e>
   1512a:	429c      	cmp	r4, r3
   1512c:	bfa8      	it	ge
   1512e:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   15130:	f7ff fe7a 	bl	14e28 <z_nrf_rtc_timer_read>
   15134:	4b0e      	ldr	r3, [pc, #56]	; (15170 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   15136:	490f      	ldr	r1, [pc, #60]	; (15174 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   15138:	e9d3 2300 	ldrd	r2, r3, [r3]
   1513c:	1a80      	subs	r0, r0, r2
		ticks = 0;
   1513e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15142:	bf28      	it	cs
   15144:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   15146:	3001      	adds	r0, #1
   15148:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   1514a:	4808      	ldr	r0, [pc, #32]	; (1516c <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1514c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1514e:	4284      	cmp	r4, r0
   15150:	bf28      	it	cs
   15152:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   15154:	2000      	movs	r0, #0
   15156:	1912      	adds	r2, r2, r4
   15158:	9001      	str	r0, [sp, #4]
   1515a:	f143 0300 	adc.w	r3, r3, #0
   1515e:	f7ff fe85 	bl	14e6c <compare_set>
}
   15162:	b002      	add	sp, #8
   15164:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15166:	2400      	movs	r4, #0
   15168:	e7e2      	b.n	15130 <sys_clock_set_timeout+0x18>
   1516a:	bf00      	nop
   1516c:	007fffff 	.word	0x007fffff
   15170:	2000cc68 	.word	0x2000cc68
   15174:	00014d21 	.word	0x00014d21

00015178 <sys_clock_elapsed>:
{
   15178:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1517a:	f7ff fe55 	bl	14e28 <z_nrf_rtc_timer_read>
   1517e:	4b02      	ldr	r3, [pc, #8]	; (15188 <sys_clock_elapsed+0x10>)
   15180:	681b      	ldr	r3, [r3, #0]
}
   15182:	1ac0      	subs	r0, r0, r3
   15184:	bd08      	pop	{r3, pc}
   15186:	bf00      	nop
   15188:	2000cc68 	.word	0x2000cc68

0001518c <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   1518c:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   1518e:	4d19      	ldr	r5, [pc, #100]	; (151f4 <_nrf_modem_lib_init+0x68>)
   15190:	4c19      	ldr	r4, [pc, #100]	; (151f8 <_nrf_modem_lib_init+0x6c>)
   15192:	782b      	ldrb	r3, [r5, #0]
   15194:	b933      	cbnz	r3, 151a4 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   15196:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   1519a:	4818      	ldr	r0, [pc, #96]	; (151fc <_nrf_modem_lib_init+0x70>)
   1519c:	f006 fe7c 	bl	1be98 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   151a0:	2301      	movs	r3, #1
   151a2:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   151a4:	2200      	movs	r2, #0
   151a6:	202a      	movs	r0, #42	; 0x2a
   151a8:	4611      	mov	r1, r2
   151aa:	f7fd fe3f 	bl	12e2c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   151ae:	2100      	movs	r1, #0
   151b0:	4813      	ldr	r0, [pc, #76]	; (15200 <_nrf_modem_lib_init+0x74>)
   151b2:	f002 ffe9 	bl	18188 <nrf_modem_init>
   151b6:	4b13      	ldr	r3, [pc, #76]	; (15204 <_nrf_modem_lib_init+0x78>)
   151b8:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   151ba:	f04f 32ff 	mov.w	r2, #4294967295
   151be:	f04f 33ff 	mov.w	r3, #4294967295
   151c2:	480e      	ldr	r0, [pc, #56]	; (151fc <_nrf_modem_lib_init+0x70>)
   151c4:	f003 fcca 	bl	18b5c <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   151c8:	6820      	ldr	r0, [r4, #0]
   151ca:	b170      	cbz	r0, 151ea <_nrf_modem_lib_init+0x5e>
	return node->next;
   151cc:	6804      	ldr	r4, [r0, #0]
   151ce:	2c00      	cmp	r4, #0
   151d0:	bf38      	it	cc
   151d2:	2400      	movcc	r4, #0
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   151d4:	3004      	adds	r0, #4
   151d6:	f003 fe35 	bl	18e44 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   151da:	b134      	cbz	r4, 151ea <_nrf_modem_lib_init+0x5e>
   151dc:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   151de:	4620      	mov	r0, r4
   151e0:	2b00      	cmp	r3, #0
   151e2:	bf38      	it	cc
   151e4:	2300      	movcc	r3, #0
   151e6:	461c      	mov	r4, r3
   151e8:	e7f4      	b.n	151d4 <_nrf_modem_lib_init+0x48>
	return z_impl_k_mutex_unlock(mutex);
   151ea:	4804      	ldr	r0, [pc, #16]	; (151fc <_nrf_modem_lib_init+0x70>)
   151ec:	f003 fd8e 	bl	18d0c <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   151f0:	2000      	movs	r0, #0
   151f2:	bd38      	pop	{r3, r4, r5, pc}
   151f4:	2000d5de 	.word	0x2000d5de
   151f8:	2000d140 	.word	0x2000d140
   151fc:	2000d148 	.word	0x2000d148
   15200:	0001c544 	.word	0x0001c544
   15204:	2000d13c 	.word	0x2000d13c

00015208 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   15208:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1520a:	4c0d      	ldr	r4, [pc, #52]	; (15240 <thread_monitor_entry_get+0x38>)
{
   1520c:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1520e:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   15210:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   15212:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   15214:	4b0b      	ldr	r3, [pc, #44]	; (15244 <thread_monitor_entry_get+0x3c>)
   15216:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   15218:	6801      	ldr	r1, [r0, #0]
   1521a:	4291      	cmp	r1, r2
   1521c:	d00e      	beq.n	1523c <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   1521e:	b151      	cbz	r1, 15236 <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   15220:	6841      	ldr	r1, [r0, #4]
   15222:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   15224:	42b1      	cmp	r1, r6
   15226:	bfc4      	itt	gt
   15228:	4604      	movgt	r4, r0
   1522a:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1522c:	3d01      	subs	r5, #1
   1522e:	f100 0008 	add.w	r0, r0, #8
   15232:	d1f1      	bne.n	15218 <thread_monitor_entry_get+0x10>
   15234:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   15236:	3b01      	subs	r3, #1
	new_entry->id = id;
   15238:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1523a:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   1523c:	bd70      	pop	{r4, r5, r6, pc}
   1523e:	bf00      	nop
   15240:	2000d1b8 	.word	0x2000d1b8
   15244:	2000d190 	.word	0x2000d190

00015248 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   15248:	4668      	mov	r0, sp
   1524a:	f020 0107 	bic.w	r1, r0, #7
   1524e:	468d      	mov	sp, r1
   15250:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15252:	4b0f      	ldr	r3, [pc, #60]	; (15290 <rpc_proxy_irq_handler+0x48>)
   15254:	e8d3 2fef 	ldaex	r2, [r3]
   15258:	3201      	adds	r2, #1
   1525a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1525e:	2900      	cmp	r1, #0
   15260:	d1f8      	bne.n	15254 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_application_irq_handler();
   15262:	f001 ffd5 	bl	17210 <nrf_modem_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   15266:	4b0b      	ldr	r3, [pc, #44]	; (15294 <rpc_proxy_irq_handler+0x4c>)
   15268:	681c      	ldr	r4, [r3, #0]
   1526a:	2c00      	cmp	r4, #0
   1526c:	bf38      	it	cc
   1526e:	2400      	movcc	r4, #0
   15270:	b12c      	cbz	r4, 1527e <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   15272:	1d20      	adds	r0, r4, #4
   15274:	f003 fde6 	bl	18e44 <z_impl_k_sem_give>
   15278:	6824      	ldr	r4, [r4, #0]
   1527a:	2c00      	cmp	r4, #0
   1527c:	d1f8      	bne.n	15270 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1527e:	f7fd fdfb 	bl	12e78 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   15282:	f7fd fed5 	bl	13030 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   15286:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1528a:	4685      	mov	sp, r0
   1528c:	4770      	bx	lr
   1528e:	bf00      	nop
   15290:	2000d190 	.word	0x2000d190
   15294:	2000d1b0 	.word	0x2000d1b0

00015298 <nrf_modem_os_timedwait>:
{
   15298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1529c:	460c      	mov	r4, r1
   1529e:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   152a0:	f006 fe56 	bl	1bf50 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   152a4:	6823      	ldr	r3, [r4, #0]
   152a6:	4680      	mov	r8, r0
   152a8:	2b00      	cmp	r3, #0
   152aa:	468a      	mov	sl, r1
   152ac:	d103      	bne.n	152b6 <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   152ae:	f005 f805 	bl	1a2bc <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   152b2:	2074      	movs	r0, #116	; 0x74
   152b4:	e091      	b.n	153da <nrf_modem_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   152b6:	bfbc      	itt	lt
   152b8:	f04f 33ff 	movlt.w	r3, #4294967295
   152bc:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   152be:	2201      	movs	r2, #1
   152c0:	2100      	movs	r1, #0
   152c2:	a802      	add	r0, sp, #8
   152c4:	f006 fdef 	bl	1bea6 <z_impl_k_sem_init>
   152c8:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   152ca:	f04f 0320 	mov.w	r3, #32
   152ce:	f3ef 8b11 	mrs	fp, BASEPRI
   152d2:	f383 8812 	msr	BASEPRI_MAX, r3
   152d6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   152da:	f005 f933 	bl	1a544 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   152de:	f7ff ff93 	bl	15208 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   152e2:	4947      	ldr	r1, [pc, #284]	; (15400 <nrf_modem_os_timedwait+0x168>)
   152e4:	6843      	ldr	r3, [r0, #4]
   152e6:	680a      	ldr	r2, [r1, #0]
   152e8:	4689      	mov	r9, r1
   152ea:	4293      	cmp	r3, r2
   152ec:	f04f 0300 	mov.w	r3, #0
   152f0:	d108      	bne.n	15304 <nrf_modem_os_timedwait+0x6c>
	parent->next = child;
   152f2:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   152f4:	4b43      	ldr	r3, [pc, #268]	; (15404 <nrf_modem_os_timedwait+0x16c>)
   152f6:	685a      	ldr	r2, [r3, #4]
   152f8:	2a00      	cmp	r2, #0
   152fa:	d171      	bne.n	153e0 <nrf_modem_os_timedwait+0x148>
	list->head = node;
   152fc:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   15300:	2301      	movs	r3, #1
}
   15302:	e000      	b.n	15306 <nrf_modem_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   15304:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   15306:	f38b 8811 	msr	BASEPRI, fp
   1530a:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   1530e:	2b00      	cmp	r3, #0
   15310:	d062      	beq.n	153d8 <nrf_modem_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   15312:	6823      	ldr	r3, [r4, #0]
   15314:	1c5a      	adds	r2, r3, #1
   15316:	d066      	beq.n	153e6 <nrf_modem_os_timedwait+0x14e>
   15318:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1531c:	f240 30e7 	movw	r0, #999	; 0x3e7
   15320:	2100      	movs	r1, #0
   15322:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   15326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1532a:	2300      	movs	r3, #0
   1532c:	fbce 010c 	smlal	r0, r1, lr, ip
   15330:	f7fa ff84 	bl	1023c <__aeabi_uldivmod>
   15334:	4602      	mov	r2, r0
   15336:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   15338:	a802      	add	r0, sp, #8
   1533a:	f003 fdb9 	bl	18eb0 <z_impl_k_sem_take>
	__asm__ volatile(
   1533e:	f04f 0320 	mov.w	r3, #32
   15342:	f3ef 8b11 	mrs	fp, BASEPRI
   15346:	f383 8812 	msr	BASEPRI_MAX, r3
   1534a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1534e:	2000      	movs	r0, #0
   15350:	4b2c      	ldr	r3, [pc, #176]	; (15404 <nrf_modem_os_timedwait+0x16c>)
   15352:	681a      	ldr	r2, [r3, #0]
   15354:	b15a      	cbz	r2, 1536e <nrf_modem_os_timedwait+0xd6>
   15356:	42aa      	cmp	r2, r5
   15358:	d14f      	bne.n	153fa <nrf_modem_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   1535a:	9d01      	ldr	r5, [sp, #4]
   1535c:	2800      	cmp	r0, #0
   1535e:	d146      	bne.n	153ee <nrf_modem_os_timedwait+0x156>
   15360:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   15362:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   15364:	4291      	cmp	r1, r2
   15366:	d100      	bne.n	1536a <nrf_modem_os_timedwait+0xd2>
	list->tail = node;
   15368:	605d      	str	r5, [r3, #4]
	parent->next = child;
   1536a:	2300      	movs	r3, #0
   1536c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1536e:	f005 f8e9 	bl	1a544 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   15372:	f7ff ff49 	bl	15208 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   15376:	f8d9 3000 	ldr.w	r3, [r9]
   1537a:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1537c:	f38b 8811 	msr	BASEPRI, fp
   15380:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   15384:	6825      	ldr	r5, [r4, #0]
   15386:	1c6b      	adds	r3, r5, #1
   15388:	d026      	beq.n	153d8 <nrf_modem_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   1538a:	f006 fde1 	bl	1bf50 <z_impl_k_uptime_ticks>
   1538e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   15392:	468e      	mov	lr, r1
   15394:	fba8 890c 	umull	r8, r9, r8, ip
   15398:	fba0 010c 	umull	r0, r1, r0, ip
   1539c:	fb0c 990a 	mla	r9, ip, sl, r9
   153a0:	fb0c 110e 	mla	r1, ip, lr, r1
   153a4:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   153a8:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   153ac:	1952      	adds	r2, r2, r5
   153ae:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   153b2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   153b6:	0bc5      	lsrs	r5, r0, #15
   153b8:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   153bc:	1b56      	subs	r6, r2, r5
   153be:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   153c2:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   153c6:	2e00      	cmp	r6, #0
   153c8:	f177 0300 	sbcs.w	r3, r7, #0
   153cc:	bfb8      	it	lt
   153ce:	2600      	movlt	r6, #0
   153d0:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   153d2:	2e00      	cmp	r6, #0
   153d4:	f43f af6d 	beq.w	152b2 <nrf_modem_os_timedwait+0x1a>
	return 0;
   153d8:	2000      	movs	r0, #0
}
   153da:	b007      	add	sp, #28
   153dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153e0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   153e2:	605d      	str	r5, [r3, #4]
   153e4:	e78c      	b.n	15300 <nrf_modem_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   153e6:	f04f 32ff 	mov.w	r2, #4294967295
   153ea:	4613      	mov	r3, r2
   153ec:	e7a4      	b.n	15338 <nrf_modem_os_timedwait+0xa0>
	parent->next = child;
   153ee:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   153f0:	6859      	ldr	r1, [r3, #4]
   153f2:	4291      	cmp	r1, r2
	list->tail = node;
   153f4:	bf08      	it	eq
   153f6:	6058      	streq	r0, [r3, #4]
}
   153f8:	e7b7      	b.n	1536a <nrf_modem_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   153fa:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   153fc:	6812      	ldr	r2, [r2, #0]
   153fe:	e7a9      	b.n	15354 <nrf_modem_os_timedwait+0xbc>
   15400:	2000d190 	.word	0x2000d190
   15404:	2000d1b0 	.word	0x2000d1b0

00015408 <nrf_modem_os_sem_init>:
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   15408:	6803      	ldr	r3, [r0, #0]
{
   1540a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1540e:	4604      	mov	r4, r0
   15410:	460f      	mov	r7, r1
   15412:	4690      	mov	r8, r2
   15414:	4d10      	ldr	r5, [pc, #64]	; (15458 <nrf_modem_os_sem_init+0x50>)
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   15416:	b12b      	cbz	r3, 15424 <nrf_modem_os_sem_init+0x1c>
   15418:	42ab      	cmp	r3, r5
   1541a:	d303      	bcc.n	15424 <nrf_modem_os_sem_init+0x1c>
   1541c:	f105 0230 	add.w	r2, r5, #48	; 0x30
   15420:	4293      	cmp	r3, r2
   15422:	d312      	bcc.n	1544a <nrf_modem_os_sem_init+0x42>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   15424:	4e0d      	ldr	r6, [pc, #52]	; (1545c <nrf_modem_os_sem_init+0x54>)
   15426:	7833      	ldrb	r3, [r6, #0]
   15428:	2b02      	cmp	r3, #2
   1542a:	d908      	bls.n	1543e <nrf_modem_os_sem_init+0x36>
   1542c:	490c      	ldr	r1, [pc, #48]	; (15460 <nrf_modem_os_sem_init+0x58>)
   1542e:	480d      	ldr	r0, [pc, #52]	; (15464 <nrf_modem_os_sem_init+0x5c>)
   15430:	22f4      	movs	r2, #244	; 0xf4
   15432:	f005 fd8f 	bl	1af54 <printk>
   15436:	21f4      	movs	r1, #244	; 0xf4
   15438:	4809      	ldr	r0, [pc, #36]	; (15460 <nrf_modem_os_sem_init+0x58>)
   1543a:	f005 ff6f 	bl	1b31c <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
   1543e:	7833      	ldrb	r3, [r6, #0]
   15440:	1c5a      	adds	r2, r3, #1
   15442:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   15446:	7032      	strb	r2, [r6, #0]
   15448:	6025      	str	r5, [r4, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1544a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1544c:	4642      	mov	r2, r8
   1544e:	4639      	mov	r1, r7
}
   15450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15454:	f006 bd27 	b.w	1bea6 <z_impl_k_sem_init>
   15458:	2000d160 	.word	0x2000d160
   1545c:	2000d5df 	.word	0x2000d5df
   15460:	0001d3ad 	.word	0x0001d3ad
   15464:	0001c625 	.word	0x0001c625

00015468 <nrf_modem_os_sem_give>:
{
   15468:	b510      	push	{r4, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   1546a:	4604      	mov	r4, r0
   1546c:	b128      	cbz	r0, 1547a <nrf_modem_os_sem_give+0x12>
   1546e:	4b0a      	ldr	r3, [pc, #40]	; (15498 <nrf_modem_os_sem_give+0x30>)
   15470:	4298      	cmp	r0, r3
   15472:	d302      	bcc.n	1547a <nrf_modem_os_sem_give+0x12>
   15474:	3330      	adds	r3, #48	; 0x30
   15476:	4298      	cmp	r0, r3
   15478:	d308      	bcc.n	1548c <nrf_modem_os_sem_give+0x24>
   1547a:	4908      	ldr	r1, [pc, #32]	; (1549c <nrf_modem_os_sem_give+0x34>)
   1547c:	4808      	ldr	r0, [pc, #32]	; (154a0 <nrf_modem_os_sem_give+0x38>)
   1547e:	22ff      	movs	r2, #255	; 0xff
   15480:	f005 fd68 	bl	1af54 <printk>
   15484:	21ff      	movs	r1, #255	; 0xff
   15486:	4805      	ldr	r0, [pc, #20]	; (1549c <nrf_modem_os_sem_give+0x34>)
   15488:	f005 ff48 	bl	1b31c <assert_post_action>
	z_impl_k_sem_give(sem);
   1548c:	4620      	mov	r0, r4
}
   1548e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15492:	f003 bcd7 	b.w	18e44 <z_impl_k_sem_give>
   15496:	bf00      	nop
   15498:	2000d160 	.word	0x2000d160
   1549c:	0001d3ad 	.word	0x0001d3ad
   154a0:	0001c625 	.word	0x0001c625

000154a4 <nrf_modem_os_sem_take>:
{
   154a4:	b570      	push	{r4, r5, r6, lr}
   154a6:	460d      	mov	r5, r1
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   154a8:	4604      	mov	r4, r0
   154aa:	b128      	cbz	r0, 154b8 <nrf_modem_os_sem_take+0x14>
   154ac:	4b17      	ldr	r3, [pc, #92]	; (1550c <nrf_modem_os_sem_take+0x68>)
   154ae:	4298      	cmp	r0, r3
   154b0:	d302      	bcc.n	154b8 <nrf_modem_os_sem_take+0x14>
   154b2:	3330      	adds	r3, #48	; 0x30
   154b4:	4298      	cmp	r0, r3
   154b6:	d30a      	bcc.n	154ce <nrf_modem_os_sem_take+0x2a>
   154b8:	4915      	ldr	r1, [pc, #84]	; (15510 <nrf_modem_os_sem_take+0x6c>)
   154ba:	4816      	ldr	r0, [pc, #88]	; (15514 <nrf_modem_os_sem_take+0x70>)
   154bc:	f240 1209 	movw	r2, #265	; 0x109
   154c0:	f005 fd48 	bl	1af54 <printk>
   154c4:	f240 1109 	movw	r1, #265	; 0x109
   154c8:	4811      	ldr	r0, [pc, #68]	; (15510 <nrf_modem_os_sem_take+0x6c>)
   154ca:	f005 ff27 	bl	1b31c <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   154ce:	1c6b      	adds	r3, r5, #1
   154d0:	d018      	beq.n	15504 <nrf_modem_os_sem_take+0x60>
   154d2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   154d6:	f240 30e7 	movw	r0, #999	; 0x3e7
   154da:	2100      	movs	r1, #0
   154dc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   154e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   154e4:	2300      	movs	r3, #0
   154e6:	fbc6 0105 	smlal	r0, r1, r6, r5
   154ea:	f7fa fea7 	bl	1023c <__aeabi_uldivmod>
   154ee:	4602      	mov	r2, r0
   154f0:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   154f2:	4620      	mov	r0, r4
   154f4:	f003 fcdc 	bl	18eb0 <z_impl_k_sem_take>
		return NRF_ETIMEDOUT;
   154f8:	f110 0f0b 	cmn.w	r0, #11
}
   154fc:	bf0c      	ite	eq
   154fe:	2074      	moveq	r0, #116	; 0x74
   15500:	2000      	movne	r0, #0
   15502:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   15504:	f04f 32ff 	mov.w	r2, #4294967295
   15508:	4613      	mov	r3, r2
   1550a:	e7f2      	b.n	154f2 <nrf_modem_os_sem_take+0x4e>
   1550c:	2000d160 	.word	0x2000d160
   15510:	0001d3ad 	.word	0x0001d3ad
   15514:	0001c625 	.word	0x0001c625

00015518 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1551c:	4b01      	ldr	r3, [pc, #4]	; (15524 <nrf_modem_os_application_irq_set+0xc>)
   1551e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15522:	4770      	bx	lr
   15524:	e000e100 	.word	0xe000e100

00015528 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1552c:	4b01      	ldr	r3, [pc, #4]	; (15534 <nrf_modem_os_application_irq_clear+0xc>)
   1552e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15532:	4770      	bx	lr
   15534:	e000e100 	.word	0xe000e100

00015538 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15538:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1553c:	4b01      	ldr	r3, [pc, #4]	; (15544 <nrf_modem_os_trace_irq_set+0xc>)
   1553e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15542:	4770      	bx	lr
   15544:	e000e100 	.word	0xe000e100

00015548 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15548:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1554c:	4b01      	ldr	r3, [pc, #4]	; (15554 <nrf_modem_os_trace_irq_clear+0xc>)
   1554e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15552:	4770      	bx	lr
   15554:	e000e100 	.word	0xe000e100

00015558 <nrf_modem_os_alloc>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
}

void *nrf_modem_os_alloc(size_t bytes)
{
   15558:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   1555a:	2200      	movs	r2, #0
   1555c:	2300      	movs	r3, #0
   1555e:	4801      	ldr	r0, [pc, #4]	; (15564 <nrf_modem_os_alloc+0xc>)
   15560:	f006 bc7c 	b.w	1be5c <k_heap_alloc>
   15564:	2000cb48 	.word	0x2000cb48

00015568 <nrf_modem_os_free>:
#endif
	return addr;
}

void nrf_modem_os_free(void *mem)
{
   15568:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   1556a:	4801      	ldr	r0, [pc, #4]	; (15570 <nrf_modem_os_free+0x8>)
   1556c:	f003 b86e 	b.w	1864c <k_heap_free>
   15570:	2000cb48 	.word	0x2000cb48

00015574 <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   15574:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   15576:	2200      	movs	r2, #0
   15578:	2300      	movs	r3, #0
   1557a:	4801      	ldr	r0, [pc, #4]	; (15580 <nrf_modem_os_shm_tx_alloc+0xc>)
   1557c:	f006 bc6e 	b.w	1be5c <k_heap_alloc>
   15580:	2000d198 	.word	0x2000d198

00015584 <nrf_modem_os_shm_tx_free>:
#endif
	return addr;
}

void nrf_modem_os_shm_tx_free(void *mem)
{
   15584:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   15586:	4801      	ldr	r0, [pc, #4]	; (1558c <nrf_modem_os_shm_tx_free+0x8>)
   15588:	f003 b860 	b.w	1864c <k_heap_free>
   1558c:	2000d198 	.word	0x2000d198

00015590 <nrf_modem_os_init>:
	}
}

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   15590:	b510      	push	{r4, lr}
	list->head = NULL;
   15592:	2400      	movs	r4, #0
   15594:	4b0e      	ldr	r3, [pc, #56]	; (155d0 <nrf_modem_os_init+0x40>)
	list->tail = NULL;
   15596:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1559a:	4b0e      	ldr	r3, [pc, #56]	; (155d4 <nrf_modem_os_init+0x44>)
   1559c:	e8d3 2fef 	ldaex	r2, [r3]
   155a0:	e8c3 4fe1 	stlex	r1, r4, [r3]
   155a4:	2900      	cmp	r1, #0
   155a6:	d1f9      	bne.n	1559c <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   155a8:	f006 fa82 	bl	1bab0 <read_task_create>
		trace_irq_init();
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   155ac:	4621      	mov	r1, r4
   155ae:	2204      	movs	r2, #4
   155b0:	4809      	ldr	r0, [pc, #36]	; (155d8 <nrf_modem_os_init+0x48>)
   155b2:	f005 ffaf 	bl	1b514 <memset>
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   155b6:	4621      	mov	r1, r4
   155b8:	2204      	movs	r2, #4
   155ba:	4808      	ldr	r0, [pc, #32]	; (155dc <nrf_modem_os_init+0x4c>)
   155bc:	f005 ffaa 	bl	1b514 <memset>
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   155c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   155c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   155c8:	4905      	ldr	r1, [pc, #20]	; (155e0 <nrf_modem_os_init+0x50>)
   155ca:	4806      	ldr	r0, [pc, #24]	; (155e4 <nrf_modem_os_init+0x54>)
   155cc:	f006 bc3e 	b.w	1be4c <k_heap_init>
   155d0:	2000d1b0 	.word	0x2000d1b0
   155d4:	2000d190 	.word	0x2000d190
   155d8:	2000d15c 	.word	0x2000d15c
   155dc:	2000d194 	.word	0x2000d194
   155e0:	200084e8 	.word	0x200084e8
   155e4:	2000d198 	.word	0x2000d198

000155e8 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   155e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   155ec:	2601      	movs	r6, #1
   155ee:	6843      	ldr	r3, [r0, #4]
   155f0:	408e      	lsls	r6, r1
   155f2:	681b      	ldr	r3, [r3, #0]
{
   155f4:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   155f6:	421e      	tst	r6, r3
{
   155f8:	460d      	mov	r5, r1
   155fa:	4617      	mov	r7, r2
	const struct gpio_driver_api *api =
   155fc:	f8d0 9008 	ldr.w	r9, [r0, #8]
	struct gpio_driver_data *data =
   15600:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15604:	d10a      	bne.n	1561c <z_impl_gpio_pin_configure+0x34>
   15606:	490c      	ldr	r1, [pc, #48]	; (15638 <z_impl_gpio_pin_configure+0x50>)
   15608:	480c      	ldr	r0, [pc, #48]	; (1563c <z_impl_gpio_pin_configure+0x54>)
   1560a:	f240 22fd 	movw	r2, #765	; 0x2fd
   1560e:	f005 fca1 	bl	1af54 <printk>
   15612:	f240 21fd 	movw	r1, #765	; 0x2fd
   15616:	4808      	ldr	r0, [pc, #32]	; (15638 <z_impl_gpio_pin_configure+0x50>)
   15618:	f005 fe80 	bl	1b31c <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1561c:	f8d8 3000 	ldr.w	r3, [r8]
	}

	return api->pin_configure(port, pin, flags);
   15620:	463a      	mov	r2, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   15622:	ea23 0606 	bic.w	r6, r3, r6
	return api->pin_configure(port, pin, flags);
   15626:	4629      	mov	r1, r5
   15628:	4620      	mov	r0, r4
   1562a:	f8d9 3000 	ldr.w	r3, [r9]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1562e:	f8c8 6000 	str.w	r6, [r8]
}
   15632:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_configure(port, pin, flags);
   15636:	4718      	bx	r3
   15638:	0001d3ec 	.word	0x0001d3ec
   1563c:	0001c625 	.word	0x0001c625

00015640 <z_impl_gpio_pin_interrupt_configure>:
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   15640:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   15644:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   15648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_driver_config *const cfg =
   1564c:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
{
   15650:	4605      	mov	r5, r0
   15652:	460e      	mov	r6, r1
   15654:	4614      	mov	r4, r2
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   15656:	d136      	bne.n	156c6 <z_impl_gpio_pin_interrupt_configure+0x86>
   15658:	4920      	ldr	r1, [pc, #128]	; (156dc <z_impl_gpio_pin_interrupt_configure+0x9c>)
   1565a:	f240 2289 	movw	r2, #649	; 0x289
   1565e:	4820      	ldr	r0, [pc, #128]	; (156e0 <z_impl_gpio_pin_interrupt_configure+0xa0>)
   15660:	f005 fc78 	bl	1af54 <printk>
   15664:	f240 2189 	movw	r1, #649	; 0x289
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   15668:	481c      	ldr	r0, [pc, #112]	; (156dc <z_impl_gpio_pin_interrupt_configure+0x9c>)
   1566a:	f005 fe57 	bl	1b31c <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1566e:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   15672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   15676:	d10a      	bne.n	1568e <z_impl_gpio_pin_interrupt_configure+0x4e>
   15678:	4918      	ldr	r1, [pc, #96]	; (156dc <z_impl_gpio_pin_interrupt_configure+0x9c>)
   1567a:	4819      	ldr	r0, [pc, #100]	; (156e0 <z_impl_gpio_pin_interrupt_configure+0xa0>)
   1567c:	f240 2297 	movw	r2, #663	; 0x297
   15680:	f005 fc68 	bl	1af54 <printk>
   15684:	f240 2197 	movw	r1, #663	; 0x297
   15688:	4814      	ldr	r0, [pc, #80]	; (156dc <z_impl_gpio_pin_interrupt_configure+0x9c>)
   1568a:	f005 fe47 	bl	1b31c <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1568e:	2301      	movs	r3, #1
   15690:	f8d8 2000 	ldr.w	r2, [r8]
   15694:	40b3      	lsls	r3, r6
   15696:	4213      	tst	r3, r2
   15698:	d10a      	bne.n	156b0 <z_impl_gpio_pin_interrupt_configure+0x70>
   1569a:	4910      	ldr	r1, [pc, #64]	; (156dc <z_impl_gpio_pin_interrupt_configure+0x9c>)
   1569c:	4810      	ldr	r0, [pc, #64]	; (156e0 <z_impl_gpio_pin_interrupt_configure+0xa0>)
   1569e:	f240 229d 	movw	r2, #669	; 0x29d
   156a2:	f005 fc57 	bl	1af54 <printk>
   156a6:	f240 219d 	movw	r1, #669	; 0x29d
   156aa:	480c      	ldr	r0, [pc, #48]	; (156dc <z_impl_gpio_pin_interrupt_configure+0x9c>)
   156ac:	f005 fe36 	bl	1b31c <assert_post_action>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   156b0:	69bf      	ldr	r7, [r7, #24]
   156b2:	4631      	mov	r1, r6
   156b4:	4628      	mov	r0, r5
   156b6:	46bc      	mov	ip, r7
   156b8:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   156bc:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   156c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   156c4:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   156c6:	2b00      	cmp	r3, #0
   156c8:	d1d1      	bne.n	1566e <z_impl_gpio_pin_interrupt_configure+0x2e>
   156ca:	4904      	ldr	r1, [pc, #16]	; (156dc <z_impl_gpio_pin_interrupt_configure+0x9c>)
   156cc:	f240 228d 	movw	r2, #653	; 0x28d
   156d0:	4803      	ldr	r0, [pc, #12]	; (156e0 <z_impl_gpio_pin_interrupt_configure+0xa0>)
   156d2:	f005 fc3f 	bl	1af54 <printk>
   156d6:	f240 218d 	movw	r1, #653	; 0x28d
   156da:	e7c5      	b.n	15668 <z_impl_gpio_pin_interrupt_configure+0x28>
   156dc:	0001d3ec 	.word	0x0001d3ec
   156e0:	0001c625 	.word	0x0001c625

000156e4 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   156e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   156e8:	2400      	movs	r4, #0
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   156ea:	4625      	mov	r5, r4
   156ec:	4f20      	ldr	r7, [pc, #128]	; (15770 <get_buttons+0x8c>)
		int val;

		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   156ee:	f8df 9090 	ldr.w	r9, [pc, #144]	; 15780 <get_buttons+0x9c>
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   156f2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 15784 <get_buttons+0xa0>
   156f6:	f8df a090 	ldr.w	sl, [pc, #144]	; 15788 <get_buttons+0xa4>
   156fa:	2601      	movs	r6, #1
   156fc:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   15700:	791b      	ldrb	r3, [r3, #4]
   15702:	f857 bb04 	ldr.w	fp, [r7], #4
   15706:	409e      	lsls	r6, r3
   15708:	f8db 3004 	ldr.w	r3, [fp, #4]
   1570c:	681b      	ldr	r3, [r3, #0]
   1570e:	421e      	tst	r6, r3
   15710:	d10a      	bne.n	15728 <get_buttons+0x44>
   15712:	4641      	mov	r1, r8
   15714:	4650      	mov	r0, sl
   15716:	f240 423a 	movw	r2, #1082	; 0x43a
   1571a:	f005 fc1b 	bl	1af54 <printk>
   1571e:	f240 413a 	movw	r1, #1082	; 0x43a
   15722:	4640      	mov	r0, r8
   15724:	f005 fdfa 	bl	1b31c <assert_post_action>
	return api->port_get_raw(port, value);
   15728:	f8db 3008 	ldr.w	r3, [fp, #8]
   1572c:	4658      	mov	r0, fp
   1572e:	685b      	ldr	r3, [r3, #4]
   15730:	a901      	add	r1, sp, #4
   15732:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
   15734:	2800      	cmp	r0, #0
   15736:	d10a      	bne.n	1574e <get_buttons+0x6a>
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   15738:	9b01      	ldr	r3, [sp, #4]
   1573a:	421e      	tst	r6, r3
   1573c:	d003      	beq.n	15746 <get_buttons+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1573e:	3501      	adds	r5, #1
   15740:	2d04      	cmp	r5, #4
   15742:	d1da      	bne.n	156fa <get_buttons+0x16>
   15744:	e00f      	b.n	15766 <get_buttons+0x82>
		    (!val && IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS))) {
			ret |= 1U << i;
   15746:	2301      	movs	r3, #1
   15748:	40ab      	lsls	r3, r5
   1574a:	431c      	orrs	r4, r3
   1574c:	e7f7      	b.n	1573e <get_buttons+0x5a>
		if (val < 0) {
   1574e:	daf6      	bge.n	1573e <get_buttons+0x5a>
   15750:	4b08      	ldr	r3, [pc, #32]	; (15774 <get_buttons+0x90>)
   15752:	4809      	ldr	r0, [pc, #36]	; (15778 <get_buttons+0x94>)
			LOG_ERR("Cannot read gpio pin");
   15754:	4909      	ldr	r1, [pc, #36]	; (1577c <get_buttons+0x98>)
   15756:	1ac0      	subs	r0, r0, r3
   15758:	08c0      	lsrs	r0, r0, #3
   1575a:	0180      	lsls	r0, r0, #6
   1575c:	f040 0001 	orr.w	r0, r0, #1
   15760:	f005 fe0f 	bl	1b382 <log_string_sync>
			return 0;
   15764:	2400      	movs	r4, #0
		}
	}

	return ret;
}
   15766:	4620      	mov	r0, r4
   15768:	b003      	add	sp, #12
   1576a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1576e:	bf00      	nop
   15770:	2000d208 	.word	0x2000d208
   15774:	0001c308 	.word	0x0001c308
   15778:	0001c318 	.word	0x0001c318
   1577c:	0001d416 	.word	0x0001d416
   15780:	0001c568 	.word	0x0001c568
   15784:	0001d3ec 	.word	0x0001d3ec
   15788:	0001c625 	.word	0x0001c625

0001578c <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   1578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1578e:	f04f 0320 	mov.w	r3, #32
   15792:	f3ef 8511 	mrs	r5, BASEPRI
   15796:	f383 8812 	msr	BASEPRI_MAX, r3
   1579a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1579e:	482a      	ldr	r0, [pc, #168]	; (15848 <button_pressed+0xbc>)
   157a0:	f003 f990 	bl	18ac4 <z_spin_lock_valid>
   157a4:	b940      	cbnz	r0, 157b8 <button_pressed+0x2c>
   157a6:	4929      	ldr	r1, [pc, #164]	; (1584c <button_pressed+0xc0>)
   157a8:	4829      	ldr	r0, [pc, #164]	; (15850 <button_pressed+0xc4>)
   157aa:	2281      	movs	r2, #129	; 0x81
   157ac:	f005 fbd2 	bl	1af54 <printk>
   157b0:	2181      	movs	r1, #129	; 0x81
   157b2:	4826      	ldr	r0, [pc, #152]	; (1584c <button_pressed+0xc0>)
   157b4:	f005 fdb2 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   157b8:	4823      	ldr	r0, [pc, #140]	; (15848 <button_pressed+0xbc>)
   157ba:	f003 f99f 	bl	18afc <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   157be:	2400      	movs	r4, #0
   157c0:	4e24      	ldr	r6, [pc, #144]	; (15854 <button_pressed+0xc8>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   157c2:	4f25      	ldr	r7, [pc, #148]	; (15858 <button_pressed+0xcc>)
   157c4:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   157c8:	f856 0b04 	ldr.w	r0, [r6], #4
   157cc:	7919      	ldrb	r1, [r3, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   157ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   157d2:	3401      	adds	r4, #1
   157d4:	f7ff ff34 	bl	15640 <z_impl_gpio_pin_interrupt_configure>
   157d8:	2c04      	cmp	r4, #4
   157da:	d00c      	beq.n	157f6 <button_pressed+0x6a>
   157dc:	2800      	cmp	r0, #0
   157de:	d0f1      	beq.n	157c4 <button_pressed+0x38>
   157e0:	4b1e      	ldr	r3, [pc, #120]	; (1585c <button_pressed+0xd0>)
   157e2:	481f      	ldr	r0, [pc, #124]	; (15860 <button_pressed+0xd4>)

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);

	if (err) {
		LOG_ERR("Cannot disable callbacks");
   157e4:	491f      	ldr	r1, [pc, #124]	; (15864 <button_pressed+0xd8>)
   157e6:	1ac0      	subs	r0, r0, r3
   157e8:	08c0      	lsrs	r0, r0, #3
   157ea:	0180      	lsls	r0, r0, #6
   157ec:	f040 0001 	orr.w	r0, r0, #1
   157f0:	f005 fdc7 	bl	1b382 <log_string_sync>
   157f4:	e001      	b.n	157fa <button_pressed+0x6e>
	if (err) {
   157f6:	2800      	cmp	r0, #0
   157f8:	d1f2      	bne.n	157e0 <button_pressed+0x54>
	}

	switch (state) {
   157fa:	4b1b      	ldr	r3, [pc, #108]	; (15868 <button_pressed+0xdc>)
   157fc:	781a      	ldrb	r2, [r3, #0]
   157fe:	b9c2      	cbnz	r2, 15832 <button_pressed+0xa6>
	case STATE_WAITING:
		state = STATE_SCANNING;
   15800:	2201      	movs	r2, #1
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   15802:	481a      	ldr	r0, [pc, #104]	; (1586c <button_pressed+0xe0>)
		state = STATE_SCANNING;
   15804:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   15806:	2221      	movs	r2, #33	; 0x21
   15808:	2300      	movs	r3, #0
   1580a:	f003 ff2b 	bl	19664 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1580e:	480e      	ldr	r0, [pc, #56]	; (15848 <button_pressed+0xbc>)
   15810:	f003 f966 	bl	18ae0 <z_spin_unlock_valid>
   15814:	b940      	cbnz	r0, 15828 <button_pressed+0x9c>
   15816:	490d      	ldr	r1, [pc, #52]	; (1584c <button_pressed+0xc0>)
   15818:	480d      	ldr	r0, [pc, #52]	; (15850 <button_pressed+0xc4>)
   1581a:	22ac      	movs	r2, #172	; 0xac
   1581c:	f005 fb9a 	bl	1af54 <printk>
   15820:	21ac      	movs	r1, #172	; 0xac
   15822:	480a      	ldr	r0, [pc, #40]	; (1584c <button_pressed+0xc0>)
   15824:	f005 fd7a 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   15828:	f385 8811 	msr	BASEPRI, r5
   1582c:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   15830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   15832:	22e8      	movs	r2, #232	; 0xe8
   15834:	490e      	ldr	r1, [pc, #56]	; (15870 <button_pressed+0xe4>)
   15836:	4806      	ldr	r0, [pc, #24]	; (15850 <button_pressed+0xc4>)
   15838:	f005 fb8c 	bl	1af54 <printk>
   1583c:	21e8      	movs	r1, #232	; 0xe8
   1583e:	480c      	ldr	r0, [pc, #48]	; (15870 <button_pressed+0xe4>)
   15840:	f005 fd6c 	bl	1b31c <assert_post_action>
		break;
   15844:	e7e3      	b.n	1580e <button_pressed+0x82>
   15846:	bf00      	nop
   15848:	2000d24c 	.word	0x2000d24c
   1584c:	0001cad3 	.word	0x0001cad3
   15850:	0001c625 	.word	0x0001c625
   15854:	2000d208 	.word	0x2000d208
   15858:	0001c568 	.word	0x0001c568
   1585c:	0001c308 	.word	0x0001c308
   15860:	0001c318 	.word	0x0001c318
   15864:	0001d42b 	.word	0x0001d42b
   15868:	2000d5e0 	.word	0x2000d5e0
   1586c:	2000cc70 	.word	0x2000cc70
   15870:	0001d444 	.word	0x0001d444

00015874 <buttons_scan_fn>:
{
   15874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	button_scan = get_buttons();
   15878:	f7ff ff34 	bl	156e4 <get_buttons>
   1587c:	4604      	mov	r4, r0
   1587e:	4b4c      	ldr	r3, [pc, #304]	; (159b0 <buttons_scan_fn+0x13c>)
   15880:	e8d3 2fef 	ldaex	r2, [r3]
   15884:	e8c3 4fe1 	stlex	r1, r4, [r3]
   15888:	2900      	cmp	r1, #0
   1588a:	d1f9      	bne.n	15880 <buttons_scan_fn+0xc>
	if (!initial_run) {
   1588c:	4b49      	ldr	r3, [pc, #292]	; (159b4 <buttons_scan_fn+0x140>)
   1588e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 159ec <buttons_scan_fn+0x178>
   15892:	781a      	ldrb	r2, [r3, #0]
   15894:	bb72      	cbnz	r2, 158f4 <buttons_scan_fn+0x80>
		if (button_scan != last_button_scan) {
   15896:	f8d8 6000 	ldr.w	r6, [r8]
   1589a:	42a6      	cmp	r6, r4
   1589c:	d012      	beq.n	158c4 <buttons_scan_fn+0x50>
	if (button_handler_cb != NULL) {
   1589e:	4b46      	ldr	r3, [pc, #280]	; (159b8 <buttons_scan_fn+0x144>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   158a0:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   158a2:	681b      	ldr	r3, [r3, #0]
   158a4:	b10b      	cbz	r3, 158aa <buttons_scan_fn+0x36>
		button_handler_cb(button_state, has_changed);
   158a6:	4631      	mov	r1, r6
   158a8:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   158aa:	f04f 33ff 	mov.w	r3, #4294967295
   158ae:	f04f 32ff 	mov.w	r2, #4294967295
   158b2:	4842      	ldr	r0, [pc, #264]	; (159bc <buttons_scan_fn+0x148>)
   158b4:	f003 f952 	bl	18b5c <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   158b8:	4b41      	ldr	r3, [pc, #260]	; (159c0 <buttons_scan_fn+0x14c>)
   158ba:	681d      	ldr	r5, [r3, #0]
   158bc:	b96d      	cbnz	r5, 158da <buttons_scan_fn+0x66>
	return z_impl_k_mutex_unlock(mutex);
   158be:	483f      	ldr	r0, [pc, #252]	; (159bc <buttons_scan_fn+0x148>)
   158c0:	f003 fa24 	bl	18d0c <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   158c4:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   158c8:	b1bc      	cbz	r4, 158fa <buttons_scan_fn+0x86>
}
   158ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   158ce:	f44f 72a4 	mov.w	r2, #328	; 0x148
   158d2:	2300      	movs	r3, #0
   158d4:	483b      	ldr	r0, [pc, #236]	; (159c4 <buttons_scan_fn+0x150>)
   158d6:	f003 bec5 	b.w	19664 <k_work_reschedule>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   158da:	3d04      	subs	r5, #4
   158dc:	2d00      	cmp	r5, #0
   158de:	d0ee      	beq.n	158be <buttons_scan_fn+0x4a>
			handler->cb(button_state, has_changed);
   158e0:	462f      	mov	r7, r5
   158e2:	f857 3b04 	ldr.w	r3, [r7], #4
   158e6:	4631      	mov	r1, r6
   158e8:	4620      	mov	r0, r4
   158ea:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   158ec:	2f00      	cmp	r7, #0
   158ee:	d0e6      	beq.n	158be <buttons_scan_fn+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   158f0:	686d      	ldr	r5, [r5, #4]
	return node->next;
   158f2:	e7e3      	b.n	158bc <buttons_scan_fn+0x48>
		initial_run = false;
   158f4:	2200      	movs	r2, #0
   158f6:	701a      	strb	r2, [r3, #0]
   158f8:	e7e4      	b.n	158c4 <buttons_scan_fn+0x50>
	__asm__ volatile(
   158fa:	f04f 0320 	mov.w	r3, #32
   158fe:	f3ef 8711 	mrs	r7, BASEPRI
   15902:	f383 8812 	msr	BASEPRI_MAX, r3
   15906:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1590a:	482f      	ldr	r0, [pc, #188]	; (159c8 <buttons_scan_fn+0x154>)
   1590c:	f003 f8da 	bl	18ac4 <z_spin_lock_valid>
   15910:	b940      	cbnz	r0, 15924 <buttons_scan_fn+0xb0>
   15912:	492e      	ldr	r1, [pc, #184]	; (159cc <buttons_scan_fn+0x158>)
   15914:	482e      	ldr	r0, [pc, #184]	; (159d0 <buttons_scan_fn+0x15c>)
   15916:	2281      	movs	r2, #129	; 0x81
   15918:	f005 fb1c 	bl	1af54 <printk>
   1591c:	2181      	movs	r1, #129	; 0x81
   1591e:	482b      	ldr	r0, [pc, #172]	; (159cc <buttons_scan_fn+0x158>)
   15920:	f005 fcfc 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   15924:	4828      	ldr	r0, [pc, #160]	; (159c8 <buttons_scan_fn+0x154>)
   15926:	f003 f8e9 	bl	18afc <z_spin_lock_set_owner>
		switch (state) {
   1592a:	4b2a      	ldr	r3, [pc, #168]	; (159d4 <buttons_scan_fn+0x160>)
   1592c:	781a      	ldrb	r2, [r3, #0]
   1592e:	2a01      	cmp	r2, #1
   15930:	d131      	bne.n	15996 <buttons_scan_fn+0x122>
			state = STATE_WAITING;
   15932:	2200      	movs	r2, #0
   15934:	4e28      	ldr	r6, [pc, #160]	; (159d8 <buttons_scan_fn+0x164>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   15936:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 159f0 <buttons_scan_fn+0x17c>
			state = STATE_WAITING;
   1593a:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   1593c:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   15940:	f856 0b04 	ldr.w	r0, [r6], #4
   15944:	7919      	ldrb	r1, [r3, #4]
   15946:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   1594a:	f7ff fe79 	bl	15640 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1594e:	3401      	adds	r4, #1
   15950:	2c04      	cmp	r4, #4
   15952:	4605      	mov	r5, r0
   15954:	d001      	beq.n	1595a <buttons_scan_fn+0xe6>
   15956:	2800      	cmp	r0, #0
   15958:	d0f0      	beq.n	1593c <buttons_scan_fn+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1595a:	481b      	ldr	r0, [pc, #108]	; (159c8 <buttons_scan_fn+0x154>)
   1595c:	f003 f8c0 	bl	18ae0 <z_spin_unlock_valid>
   15960:	b940      	cbnz	r0, 15974 <buttons_scan_fn+0x100>
   15962:	491a      	ldr	r1, [pc, #104]	; (159cc <buttons_scan_fn+0x158>)
   15964:	481a      	ldr	r0, [pc, #104]	; (159d0 <buttons_scan_fn+0x15c>)
   15966:	22ac      	movs	r2, #172	; 0xac
   15968:	f005 faf4 	bl	1af54 <printk>
   1596c:	21ac      	movs	r1, #172	; 0xac
   1596e:	4817      	ldr	r0, [pc, #92]	; (159cc <buttons_scan_fn+0x158>)
   15970:	f005 fcd4 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   15974:	f387 8811 	msr	BASEPRI, r7
   15978:	f3bf 8f6f 	isb	sy
		if (err) {
   1597c:	b1b5      	cbz	r5, 159ac <buttons_scan_fn+0x138>
}
   1597e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15982:	4816      	ldr	r0, [pc, #88]	; (159dc <buttons_scan_fn+0x168>)
   15984:	4b16      	ldr	r3, [pc, #88]	; (159e0 <buttons_scan_fn+0x16c>)
			LOG_ERR("Cannot enable callbacks");
   15986:	4917      	ldr	r1, [pc, #92]	; (159e4 <buttons_scan_fn+0x170>)
   15988:	1ac0      	subs	r0, r0, r3
   1598a:	08c0      	lsrs	r0, r0, #3
   1598c:	0180      	lsls	r0, r0, #6
   1598e:	f040 0001 	orr.w	r0, r0, #1
   15992:	f005 bcf6 	b.w	1b382 <log_string_sync>
			__ASSERT_NO_MSG(false);
   15996:	22b1      	movs	r2, #177	; 0xb1
   15998:	4913      	ldr	r1, [pc, #76]	; (159e8 <buttons_scan_fn+0x174>)
   1599a:	480d      	ldr	r0, [pc, #52]	; (159d0 <buttons_scan_fn+0x15c>)
   1599c:	f005 fada 	bl	1af54 <printk>
   159a0:	21b1      	movs	r1, #177	; 0xb1
   159a2:	4811      	ldr	r0, [pc, #68]	; (159e8 <buttons_scan_fn+0x174>)
   159a4:	f005 fcba 	bl	1b31c <assert_post_action>
		int err = 0;
   159a8:	2500      	movs	r5, #0
			break;
   159aa:	e7d6      	b.n	1595a <buttons_scan_fn+0xe6>
}
   159ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   159b0:	2000d250 	.word	0x2000d250
   159b4:	2000ca81 	.word	0x2000ca81
   159b8:	2000d218 	.word	0x2000d218
   159bc:	2000d21c 	.word	0x2000d21c
   159c0:	2000d230 	.word	0x2000d230
   159c4:	2000cc70 	.word	0x2000cc70
   159c8:	2000d24c 	.word	0x2000d24c
   159cc:	0001cad3 	.word	0x0001cad3
   159d0:	0001c625 	.word	0x0001c625
   159d4:	2000d5e0 	.word	0x2000d5e0
   159d8:	2000d208 	.word	0x2000d208
   159dc:	0001c318 	.word	0x0001c318
   159e0:	0001c308 	.word	0x0001c308
   159e4:	0001d482 	.word	0x0001d482
   159e8:	0001d444 	.word	0x0001d444
   159ec:	2000d244 	.word	0x2000d244
   159f0:	0001c568 	.word	0x0001c568

000159f4 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   159f4:	4b05      	ldr	r3, [pc, #20]	; (15a0c <dk_read_buttons+0x18>)
   159f6:	e8d3 3faf 	lda	r3, [r3]
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   159fa:	b100      	cbz	r0, 159fe <dk_read_buttons+0xa>
		*button_state = current_state;
   159fc:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   159fe:	4804      	ldr	r0, [pc, #16]	; (15a10 <dk_read_buttons+0x1c>)
   15a00:	b111      	cbz	r1, 15a08 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   15a02:	6802      	ldr	r2, [r0, #0]
   15a04:	405a      	eors	r2, r3
   15a06:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   15a08:	6003      	str	r3, [r0, #0]
}
   15a0a:	4770      	bx	lr
   15a0c:	2000d250 	.word	0x2000d250
   15a10:	2000d248 	.word	0x2000d248

00015a14 <dk_buttons_init>:
{
   15a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   15a18:	4b46      	ldr	r3, [pc, #280]	; (15b34 <dk_buttons_init+0x120>)
   15a1a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   15a1c:	4d46      	ldr	r5, [pc, #280]	; (15b38 <dk_buttons_init+0x124>)
   15a1e:	f8df 8150 	ldr.w	r8, [pc, #336]	; 15b70 <dk_buttons_init+0x15c>
   15a22:	4846      	ldr	r0, [pc, #280]	; (15b3c <dk_buttons_init+0x128>)
   15a24:	f006 fa38 	bl	1be98 <z_impl_k_mutex_init>
   15a28:	4647      	mov	r7, r8
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15a2a:	2600      	movs	r6, #0
   15a2c:	46a9      	mov	r9, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   15a2e:	6828      	ldr	r0, [r5, #0]
   15a30:	f002 fbfc 	bl	1822c <z_impl_device_get_binding>
   15a34:	f847 0b04 	str.w	r0, [r7], #4
		if (!button_devs[i]) {
   15a38:	b970      	cbnz	r0, 15a58 <dk_buttons_init+0x44>
   15a3a:	4b41      	ldr	r3, [pc, #260]	; (15b40 <dk_buttons_init+0x12c>)
   15a3c:	4841      	ldr	r0, [pc, #260]	; (15b44 <dk_buttons_init+0x130>)
			LOG_ERR("Cannot bind gpio device");
   15a3e:	4942      	ldr	r1, [pc, #264]	; (15b48 <dk_buttons_init+0x134>)
   15a40:	1ac0      	subs	r0, r0, r3
   15a42:	08c0      	lsrs	r0, r0, #3
   15a44:	0180      	lsls	r0, r0, #6
   15a46:	f040 0001 	orr.w	r0, r0, #1
   15a4a:	f005 fc9a 	bl	1b382 <log_string_sync>
			return -ENODEV;
   15a4e:	f06f 0412 	mvn.w	r4, #18
}
   15a52:	4620      	mov	r0, r4
   15a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   15a58:	7929      	ldrb	r1, [r5, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   15a5a:	f44f 7288 	mov.w	r2, #272	; 0x110
   15a5e:	f7ff fdc3 	bl	155e8 <z_impl_gpio_pin_configure>
		if (err) {
   15a62:	4604      	mov	r4, r0
   15a64:	b150      	cbz	r0, 15a7c <dk_buttons_init+0x68>
   15a66:	4837      	ldr	r0, [pc, #220]	; (15b44 <dk_buttons_init+0x130>)
   15a68:	4b35      	ldr	r3, [pc, #212]	; (15b40 <dk_buttons_init+0x12c>)
			LOG_ERR("Cannot configure button gpio");
   15a6a:	4938      	ldr	r1, [pc, #224]	; (15b4c <dk_buttons_init+0x138>)
   15a6c:	1ac0      	subs	r0, r0, r3
   15a6e:	08c0      	lsrs	r0, r0, #3
   15a70:	0180      	lsls	r0, r0, #6
			LOG_ERR("Cannot disable callbacks()");
   15a72:	f040 0001 	orr.w	r0, r0, #1
   15a76:	f005 fc84 	bl	1b382 <log_string_sync>
			return err;
   15a7a:	e7ea      	b.n	15a52 <dk_buttons_init+0x3e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15a7c:	3601      	adds	r6, #1
   15a7e:	2e04      	cmp	r6, #4
   15a80:	f105 0508 	add.w	r5, r5, #8
   15a84:	d1d3      	bne.n	15a2e <dk_buttons_init+0x1a>
	uint32_t pin_mask = 0;
   15a86:	4605      	mov	r5, r0
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15a88:	4606      	mov	r6, r0
		pin_mask |= BIT(button_pins[i].number);
   15a8a:	f04f 0b01 	mov.w	fp, #1
   15a8e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 15b70 <dk_buttons_init+0x15c>
		err = gpio_pin_interrupt_configure(button_devs[i],
   15a92:	eb09 03c6 	add.w	r3, r9, r6, lsl #3
   15a96:	f85a 0b04 	ldr.w	r0, [sl], #4
   15a9a:	791f      	ldrb	r7, [r3, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   15a9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15aa0:	4639      	mov	r1, r7
   15aa2:	f7ff fdcd 	bl	15640 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   15aa6:	4604      	mov	r4, r0
   15aa8:	b130      	cbz	r0, 15ab8 <dk_buttons_init+0xa4>
   15aaa:	4826      	ldr	r0, [pc, #152]	; (15b44 <dk_buttons_init+0x130>)
   15aac:	4b24      	ldr	r3, [pc, #144]	; (15b40 <dk_buttons_init+0x12c>)
			LOG_ERR("Cannot disable callbacks()");
   15aae:	4928      	ldr	r1, [pc, #160]	; (15b50 <dk_buttons_init+0x13c>)
   15ab0:	1ac0      	subs	r0, r0, r3
   15ab2:	08c0      	lsrs	r0, r0, #3
   15ab4:	0180      	lsls	r0, r0, #6
   15ab6:	e7dc      	b.n	15a72 <dk_buttons_init+0x5e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15ab8:	3601      	adds	r6, #1
		pin_mask |= BIT(button_pins[i].number);
   15aba:	fa0b f707 	lsl.w	r7, fp, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15abe:	2e04      	cmp	r6, #4
		pin_mask |= BIT(button_pins[i].number);
   15ac0:	ea45 0507 	orr.w	r5, r5, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15ac4:	d1e5      	bne.n	15a92 <dk_buttons_init+0x7e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   15ac6:	4923      	ldr	r1, [pc, #140]	; (15b54 <dk_buttons_init+0x140>)
   15ac8:	4b23      	ldr	r3, [pc, #140]	; (15b58 <dk_buttons_init+0x144>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15aca:	4606      	mov	r6, r0
	callback->pin_mask = pin_mask;
   15acc:	e9c1 3501 	strd	r3, r5, [r1, #4]

	if (api->manage_callback == NULL) {
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   15ad0:	460d      	mov	r5, r1
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   15ad2:	f858 0b04 	ldr.w	r0, [r8], #4
	if (api->manage_callback == NULL) {
   15ad6:	6883      	ldr	r3, [r0, #8]
   15ad8:	69db      	ldr	r3, [r3, #28]
   15ada:	b15b      	cbz	r3, 15af4 <dk_buttons_init+0xe0>
	return api->manage_callback(port, callback, true);
   15adc:	2201      	movs	r2, #1
   15ade:	4629      	mov	r1, r5
   15ae0:	4798      	blx	r3
		if (err) {
   15ae2:	4604      	mov	r4, r0
   15ae4:	b148      	cbz	r0, 15afa <dk_buttons_init+0xe6>
   15ae6:	4817      	ldr	r0, [pc, #92]	; (15b44 <dk_buttons_init+0x130>)
   15ae8:	4b15      	ldr	r3, [pc, #84]	; (15b40 <dk_buttons_init+0x12c>)
			LOG_ERR("Cannot add callback");
   15aea:	491c      	ldr	r1, [pc, #112]	; (15b5c <dk_buttons_init+0x148>)
   15aec:	1ac0      	subs	r0, r0, r3
   15aee:	08c0      	lsrs	r0, r0, #3
   15af0:	0180      	lsls	r0, r0, #6
   15af2:	e7be      	b.n	15a72 <dk_buttons_init+0x5e>
		return -ENOTSUP;
   15af4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   15af8:	e7f5      	b.n	15ae6 <dk_buttons_init+0xd2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15afa:	3601      	adds	r6, #1
   15afc:	2e04      	cmp	r6, #4
   15afe:	d1e8      	bne.n	15ad2 <dk_buttons_init+0xbe>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   15b00:	4917      	ldr	r1, [pc, #92]	; (15b60 <dk_buttons_init+0x14c>)
   15b02:	4818      	ldr	r0, [pc, #96]	; (15b64 <dk_buttons_init+0x150>)
   15b04:	f003 fcb8 	bl	19478 <k_work_init_delayable>
	state = STATE_SCANNING;
   15b08:	2201      	movs	r2, #1
   15b0a:	4b17      	ldr	r3, [pc, #92]	; (15b68 <dk_buttons_init+0x154>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   15b0c:	4815      	ldr	r0, [pc, #84]	; (15b64 <dk_buttons_init+0x150>)
	state = STATE_SCANNING;
   15b0e:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   15b10:	2300      	movs	r3, #0
   15b12:	2200      	movs	r2, #0
   15b14:	f003 fd3e 	bl	19594 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   15b18:	4621      	mov	r1, r4
   15b1a:	4620      	mov	r0, r4
   15b1c:	f7ff ff6a 	bl	159f4 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   15b20:	f7ff fde0 	bl	156e4 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15b24:	4b11      	ldr	r3, [pc, #68]	; (15b6c <dk_buttons_init+0x158>)
   15b26:	e8d3 2fef 	ldaex	r2, [r3]
   15b2a:	e8c3 0fe1 	stlex	r1, r0, [r3]
   15b2e:	2900      	cmp	r1, #0
   15b30:	d08f      	beq.n	15a52 <dk_buttons_init+0x3e>
   15b32:	e7f8      	b.n	15b26 <dk_buttons_init+0x112>
   15b34:	2000d218 	.word	0x2000d218
   15b38:	0001c568 	.word	0x0001c568
   15b3c:	2000d21c 	.word	0x2000d21c
   15b40:	0001c308 	.word	0x0001c308
   15b44:	0001c318 	.word	0x0001c318
   15b48:	0001d49a 	.word	0x0001d49a
   15b4c:	0001d4cc 	.word	0x0001d4cc
   15b50:	0001d4e9 	.word	0x0001d4e9
   15b54:	2000d238 	.word	0x2000d238
   15b58:	0001578d 	.word	0x0001578d
   15b5c:	0001d504 	.word	0x0001d504
   15b60:	00015875 	.word	0x00015875
   15b64:	2000cc70 	.word	0x2000cc70
   15b68:	2000d5e0 	.word	0x2000d5e0
   15b6c:	2000d250 	.word	0x2000d250
   15b70:	2000d208 	.word	0x2000d208

00015b74 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   15b74:	b508      	push	{r3, lr}
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   15b76:	f7fc fd13 	bl	125a0 <z_impl_log_panic>
   15b7a:	4b06      	ldr	r3, [pc, #24]	; (15b94 <k_sys_fatal_error_handler+0x20>)
   15b7c:	4806      	ldr	r0, [pc, #24]	; (15b98 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   15b7e:	4907      	ldr	r1, [pc, #28]	; (15b9c <k_sys_fatal_error_handler+0x28>)
   15b80:	1ac0      	subs	r0, r0, r3
   15b82:	08c0      	lsrs	r0, r0, #3
   15b84:	0180      	lsls	r0, r0, #6
   15b86:	f040 0001 	orr.w	r0, r0, #1
   15b8a:	f005 fbfa 	bl	1b382 <log_string_sync>
		sys_arch_reboot(0);
   15b8e:	2000      	movs	r0, #0
   15b90:	f7fd fcfe 	bl	13590 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   15b94:	0001c308 	.word	0x0001c308
   15b98:	0001c320 	.word	0x0001c320
   15b9c:	0001d52c 	.word	0x0001d52c

00015ba0 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   15ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15ba4:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   15ba6:	4c21      	ldr	r4, [pc, #132]	; (15c2c <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   15ba8:	4e21      	ldr	r6, [pc, #132]	; (15c30 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15baa:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   15bae:	f8df 9088 	ldr.w	r9, [pc, #136]	; 15c38 <check_ext_api_requests+0x98>
{
   15bb2:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15bb4:	45a8      	cmp	r8, r5
   15bb6:	d803      	bhi.n	15bc0 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   15bb8:	2000      	movs	r0, #0
   15bba:	b005      	add	sp, #20
   15bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   15bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15bc2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   15bc6:	681f      	ldr	r7, [r3, #0]
   15bc8:	ab01      	add	r3, sp, #4
   15bca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   15bce:	220c      	movs	r2, #12
   15bd0:	4619      	mov	r1, r3
   15bd2:	4638      	mov	r0, r7
   15bd4:	f005 fc83 	bl	1b4de <memcmp>
   15bd8:	b990      	cbnz	r0, 15c00 <check_ext_api_requests+0x60>
   15bda:	b18f      	cbz	r7, 15c00 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   15bde:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15be0:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   15be2:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   15be4:	4291      	cmp	r1, r2
   15be6:	d10b      	bne.n	15c00 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   15be8:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   15bea:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   15bec:	4291      	cmp	r1, r2
   15bee:	d807      	bhi.n	15c00 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   15bf0:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   15bf2:	4291      	cmp	r1, r2
   15bf4:	d904      	bls.n	15c00 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   15bf6:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   15bf8:	695b      	ldr	r3, [r3, #20]
   15bfa:	ea32 0303 	bics.w	r3, r2, r3
   15bfe:	d00a      	beq.n	15c16 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   15c00:	6a27      	ldr	r7, [r4, #32]
   15c02:	b167      	cbz	r7, 15c1e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   15c04:	480b      	ldr	r0, [pc, #44]	; (15c34 <check_ext_api_requests+0x94>)
   15c06:	f005 f9a5 	bl	1af54 <printk>
			k_panic();
   15c0a:	4040      	eors	r0, r0
   15c0c:	f380 8811 	msr	BASEPRI, r0
   15c10:	f04f 0004 	mov.w	r0, #4
   15c14:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   15c16:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15c18:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   15c1a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15c1c:	e7ca      	b.n	15bb4 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   15c1e:	4648      	mov	r0, r9
   15c20:	f005 f998 	bl	1af54 <printk>
			*ext_api_req->ext_api = NULL;
   15c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15c26:	601f      	str	r7, [r3, #0]
   15c28:	e7f5      	b.n	15c16 <check_ext_api_requests+0x76>
   15c2a:	bf00      	nop
   15c2c:	0001023c 	.word	0x0001023c
   15c30:	0001c3a0 	.word	0x0001c3a0
   15c34:	0001d549 	.word	0x0001d549
   15c38:	0001d572 	.word	0x0001d572

00015c3c <SystemInit>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   15c3c:	4b01      	ldr	r3, [pc, #4]	; (15c44 <SystemInit+0x8>)
   15c3e:	4a02      	ldr	r2, [pc, #8]	; (15c48 <SystemInit+0xc>)
   15c40:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   15c42:	4770      	bx	lr
   15c44:	2000c614 	.word	0x2000c614
   15c48:	03d09000 	.word	0x03d09000

00015c4c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   15c4c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   15c4e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   15c50:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   15c52:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   15c56:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   15c58:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   15c5c:	d010      	beq.n	15c80 <nrfx_flag32_alloc+0x34>
        new_mask = prev_mask & ~NRFX_BIT(idx);
   15c5e:	fa05 f204 	lsl.w	r2, r5, r4
   15c62:	ea23 0202 	bic.w	r2, r3, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15c66:	e8d0 6fef 	ldaex	r6, [r0]
   15c6a:	429e      	cmp	r6, r3
   15c6c:	d104      	bne.n	15c78 <nrfx_flag32_alloc+0x2c>
   15c6e:	e8c0 2fec 	stlex	ip, r2, [r0]
   15c72:	f1bc 0f00 	cmp.w	ip, #0
   15c76:	d1f6      	bne.n	15c66 <nrfx_flag32_alloc+0x1a>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15c78:	d1ea      	bne.n	15c50 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   15c7a:	4802      	ldr	r0, [pc, #8]	; (15c84 <nrfx_flag32_alloc+0x38>)
    *p_flag = idx;
   15c7c:	700c      	strb	r4, [r1, #0]
}
   15c7e:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   15c80:	4801      	ldr	r0, [pc, #4]	; (15c88 <nrfx_flag32_alloc+0x3c>)
   15c82:	e7fc      	b.n	15c7e <nrfx_flag32_alloc+0x32>
   15c84:	0bad0000 	.word	0x0bad0000
   15c88:	0bad0002 	.word	0x0bad0002

00015c8c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   15c8c:	6803      	ldr	r3, [r0, #0]
{
   15c8e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   15c90:	40cb      	lsrs	r3, r1
   15c92:	07db      	lsls	r3, r3, #31
   15c94:	d411      	bmi.n	15cba <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   15c96:	2301      	movs	r3, #1
   15c98:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   15c9c:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   15c9e:	ea41 0203 	orr.w	r2, r1, r3
   15ca2:	e8d0 4fef 	ldaex	r4, [r0]
   15ca6:	429c      	cmp	r4, r3
   15ca8:	d104      	bne.n	15cb4 <nrfx_flag32_free+0x28>
   15caa:	e8c0 2fec 	stlex	ip, r2, [r0]
   15cae:	f1bc 0f00 	cmp.w	ip, #0
   15cb2:	d1f6      	bne.n	15ca2 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15cb4:	d1f2      	bne.n	15c9c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   15cb6:	4802      	ldr	r0, [pc, #8]	; (15cc0 <nrfx_flag32_free+0x34>)
}
   15cb8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   15cba:	4802      	ldr	r0, [pc, #8]	; (15cc4 <nrfx_flag32_free+0x38>)
   15cbc:	e7fc      	b.n	15cb8 <nrfx_flag32_free+0x2c>
   15cbe:	bf00      	nop
   15cc0:	0bad0000 	.word	0x0bad0000
   15cc4:	0bad0004 	.word	0x0bad0004

00015cc8 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   15cc8:	b508      	push	{r3, lr}
    switch (domain)
   15cca:	b170      	cbz	r0, 15cea <nrf_clock_is_running.constprop.0+0x22>
   15ccc:	2801      	cmp	r0, #1
   15cce:	d018      	beq.n	15d02 <nrf_clock_is_running.constprop.0+0x3a>
            NRFX_ASSERT(0);
   15cd0:	f44f 724f 	mov.w	r2, #828	; 0x33c
   15cd4:	4910      	ldr	r1, [pc, #64]	; (15d18 <nrf_clock_is_running.constprop.0+0x50>)
   15cd6:	4811      	ldr	r0, [pc, #68]	; (15d1c <nrf_clock_is_running.constprop.0+0x54>)
   15cd8:	f005 f93c 	bl	1af54 <printk>
   15cdc:	480e      	ldr	r0, [pc, #56]	; (15d18 <nrf_clock_is_running.constprop.0+0x50>)
   15cde:	f44f 714f 	mov.w	r1, #828	; 0x33c
   15ce2:	f005 fb1b 	bl	1b31c <assert_post_action>
            return false;
   15ce6:	2000      	movs	r0, #0
   15ce8:	e00a      	b.n	15d00 <nrf_clock_is_running.constprop.0+0x38>
            if (p_clk_src != NULL)
   15cea:	4a0d      	ldr	r2, [pc, #52]	; (15d20 <nrf_clock_is_running.constprop.0+0x58>)
   15cec:	b121      	cbz	r1, 15cf8 <nrf_clock_is_running.constprop.0+0x30>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15cee:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   15cf2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   15cf6:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15cf8:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15cfc:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   15d00:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   15d02:	4a07      	ldr	r2, [pc, #28]	; (15d20 <nrf_clock_is_running.constprop.0+0x58>)
   15d04:	b121      	cbz	r1, 15d10 <nrf_clock_is_running.constprop.0+0x48>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15d06:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   15d0a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   15d0e:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15d10:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   15d14:	e7f2      	b.n	15cfc <nrf_clock_is_running.constprop.0+0x34>
   15d16:	bf00      	nop
   15d18:	0001d5a5 	.word	0x0001d5a5
   15d1c:	0001c625 	.word	0x0001c625
   15d20:	40005000 	.word	0x40005000

00015d24 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   15d24:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   15d26:	4604      	mov	r4, r0
   15d28:	b940      	cbnz	r0, 15d3c <nrfx_clock_init+0x18>
   15d2a:	4909      	ldr	r1, [pc, #36]	; (15d50 <nrfx_clock_init+0x2c>)
   15d2c:	4809      	ldr	r0, [pc, #36]	; (15d54 <nrfx_clock_init+0x30>)
   15d2e:	22bd      	movs	r2, #189	; 0xbd
   15d30:	f005 f910 	bl	1af54 <printk>
   15d34:	21bd      	movs	r1, #189	; 0xbd
   15d36:	4806      	ldr	r0, [pc, #24]	; (15d50 <nrfx_clock_init+0x2c>)
   15d38:	f005 faf0 	bl	1b31c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15d3c:	4b06      	ldr	r3, [pc, #24]	; (15d58 <nrfx_clock_init+0x34>)
   15d3e:	791a      	ldrb	r2, [r3, #4]
   15d40:	b922      	cbnz	r2, 15d4c <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   15d42:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   15d44:	4805      	ldr	r0, [pc, #20]	; (15d5c <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   15d46:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   15d48:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15d4a:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   15d4c:	4804      	ldr	r0, [pc, #16]	; (15d60 <nrfx_clock_init+0x3c>)
    return err_code;
   15d4e:	e7fc      	b.n	15d4a <nrfx_clock_init+0x26>
   15d50:	0001d5d9 	.word	0x0001d5d9
   15d54:	0001c625 	.word	0x0001c625
   15d58:	2000d254 	.word	0x2000d254
   15d5c:	0bad0000 	.word	0x0bad0000
   15d60:	0bad000c 	.word	0x0bad000c

00015d64 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   15d64:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15d66:	4b0b      	ldr	r3, [pc, #44]	; (15d94 <nrfx_clock_enable+0x30>)
   15d68:	791b      	ldrb	r3, [r3, #4]
   15d6a:	b943      	cbnz	r3, 15d7e <nrfx_clock_enable+0x1a>
   15d6c:	490a      	ldr	r1, [pc, #40]	; (15d98 <nrfx_clock_enable+0x34>)
   15d6e:	480b      	ldr	r0, [pc, #44]	; (15d9c <nrfx_clock_enable+0x38>)
   15d70:	22d6      	movs	r2, #214	; 0xd6
   15d72:	f005 f8ef 	bl	1af54 <printk>
   15d76:	21d6      	movs	r1, #214	; 0xd6
   15d78:	4807      	ldr	r0, [pc, #28]	; (15d98 <nrfx_clock_enable+0x34>)
   15d7a:	f005 facf 	bl	1b31c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15d7e:	2005      	movs	r0, #5
   15d80:	f7fd f846 	bl	12e10 <arch_irq_is_enabled>
   15d84:	b920      	cbnz	r0, 15d90 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   15d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15d8a:	2005      	movs	r0, #5
   15d8c:	f7fd b81c 	b.w	12dc8 <arch_irq_enable>
   15d90:	bd08      	pop	{r3, pc}
   15d92:	bf00      	nop
   15d94:	2000d254 	.word	0x2000d254
   15d98:	0001d5d9 	.word	0x0001d5d9
   15d9c:	0001c625 	.word	0x0001c625

00015da0 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15da0:	4b21      	ldr	r3, [pc, #132]	; (15e28 <nrfx_clock_start+0x88>)
{
   15da2:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15da4:	791b      	ldrb	r3, [r3, #4]
{
   15da6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15da8:	b953      	cbnz	r3, 15dc0 <nrfx_clock_start+0x20>
   15daa:	4920      	ldr	r1, [pc, #128]	; (15e2c <nrfx_clock_start+0x8c>)
   15dac:	4820      	ldr	r0, [pc, #128]	; (15e30 <nrfx_clock_start+0x90>)
   15dae:	f44f 7289 	mov.w	r2, #274	; 0x112
   15db2:	f005 f8cf 	bl	1af54 <printk>
   15db6:	f44f 7189 	mov.w	r1, #274	; 0x112
   15dba:	481c      	ldr	r0, [pc, #112]	; (15e2c <nrfx_clock_start+0x8c>)
   15dbc:	f005 faae 	bl	1b31c <assert_post_action>
    switch (domain)
   15dc0:	b16c      	cbz	r4, 15dde <nrfx_clock_start+0x3e>
   15dc2:	2c01      	cmp	r4, #1
   15dc4:	d026      	beq.n	15e14 <nrfx_clock_start+0x74>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   15dc6:	f44f 72a2 	mov.w	r2, #324	; 0x144
   15dca:	4918      	ldr	r1, [pc, #96]	; (15e2c <nrfx_clock_start+0x8c>)
   15dcc:	4818      	ldr	r0, [pc, #96]	; (15e30 <nrfx_clock_start+0x90>)
   15dce:	f005 f8c1 	bl	1af54 <printk>
   15dd2:	f44f 71a2 	mov.w	r1, #324	; 0x144
   15dd6:	4815      	ldr	r0, [pc, #84]	; (15e2c <nrfx_clock_start+0x8c>)
   15dd8:	f005 faa0 	bl	1b31c <assert_post_action>
            break;
    }
}
   15ddc:	e016      	b.n	15e0c <nrfx_clock_start+0x6c>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   15dde:	4620      	mov	r0, r4
   15de0:	f10d 0107 	add.w	r1, sp, #7
   15de4:	f7ff ff70 	bl	15cc8 <nrf_clock_is_running.constprop.0>
   15de8:	4b12      	ldr	r3, [pc, #72]	; (15e34 <nrfx_clock_start+0x94>)
   15dea:	b188      	cbz	r0, 15e10 <nrfx_clock_start+0x70>
   15dec:	f89d 2007 	ldrb.w	r2, [sp, #7]
   15df0:	2a02      	cmp	r2, #2
   15df2:	d10d      	bne.n	15e10 <nrfx_clock_start+0x70>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15df4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15df8:	2200      	movs	r2, #0
   15dfa:	4b0f      	ldr	r3, [pc, #60]	; (15e38 <nrfx_clock_start+0x98>)
   15dfc:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   15dfe:	2202      	movs	r2, #2
   15e00:	681b      	ldr	r3, [r3, #0]
   15e02:	4b0c      	ldr	r3, [pc, #48]	; (15e34 <nrfx_clock_start+0x94>)
   15e04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e08:	2201      	movs	r2, #1
   15e0a:	609a      	str	r2, [r3, #8]
}
   15e0c:	b002      	add	sp, #8
   15e0e:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   15e10:	2201      	movs	r2, #1
   15e12:	e7ef      	b.n	15df4 <nrfx_clock_start+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e14:	2200      	movs	r2, #0
   15e16:	4b09      	ldr	r3, [pc, #36]	; (15e3c <nrfx_clock_start+0x9c>)
   15e18:	601a      	str	r2, [r3, #0]
   15e1a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   15e1c:	4b05      	ldr	r3, [pc, #20]	; (15e34 <nrfx_clock_start+0x94>)
   15e1e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e22:	601c      	str	r4, [r3, #0]
}
   15e24:	e7f2      	b.n	15e0c <nrfx_clock_start+0x6c>
   15e26:	bf00      	nop
   15e28:	2000d254 	.word	0x2000d254
   15e2c:	0001d5d9 	.word	0x0001d5d9
   15e30:	0001c625 	.word	0x0001c625
   15e34:	40005000 	.word	0x40005000
   15e38:	40005104 	.word	0x40005104
   15e3c:	40005100 	.word	0x40005100

00015e40 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15e40:	4b2c      	ldr	r3, [pc, #176]	; (15ef4 <nrfx_clock_stop+0xb4>)
{
   15e42:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15e44:	791b      	ldrb	r3, [r3, #4]
{
   15e46:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15e48:	b953      	cbnz	r3, 15e60 <nrfx_clock_stop+0x20>
   15e4a:	492b      	ldr	r1, [pc, #172]	; (15ef8 <nrfx_clock_stop+0xb8>)
   15e4c:	482b      	ldr	r0, [pc, #172]	; (15efc <nrfx_clock_stop+0xbc>)
   15e4e:	f240 124b 	movw	r2, #331	; 0x14b
   15e52:	f005 f87f 	bl	1af54 <printk>
   15e56:	f240 114b 	movw	r1, #331	; 0x14b
   15e5a:	4827      	ldr	r0, [pc, #156]	; (15ef8 <nrfx_clock_stop+0xb8>)
   15e5c:	f005 fa5e 	bl	1b31c <assert_post_action>
    switch (domain)
   15e60:	b174      	cbz	r4, 15e80 <nrfx_clock_stop+0x40>
   15e62:	2c01      	cmp	r4, #1
   15e64:	d026      	beq.n	15eb4 <nrfx_clock_stop+0x74>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   15e66:	4924      	ldr	r1, [pc, #144]	; (15ef8 <nrfx_clock_stop+0xb8>)
   15e68:	4824      	ldr	r0, [pc, #144]	; (15efc <nrfx_clock_stop+0xbc>)
   15e6a:	f240 1267 	movw	r2, #359	; 0x167
   15e6e:	f005 f871 	bl	1af54 <printk>
   15e72:	f240 1167 	movw	r1, #359	; 0x167
   15e76:	4820      	ldr	r0, [pc, #128]	; (15ef8 <nrfx_clock_stop+0xb8>)
   15e78:	f005 fa50 	bl	1b31c <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   15e7c:	b002      	add	sp, #8
   15e7e:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   15e80:	2202      	movs	r2, #2
   15e82:	4b1f      	ldr	r3, [pc, #124]	; (15f00 <nrfx_clock_stop+0xc0>)
   15e84:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e88:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e8a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e8e:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e92:	f503 7382 	add.w	r3, r3, #260	; 0x104
   15e96:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e98:	4b1a      	ldr	r3, [pc, #104]	; (15f04 <nrfx_clock_stop+0xc4>)
   15e9a:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   15e9c:	2100      	movs	r1, #0
   15e9e:	4608      	mov	r0, r1
   15ea0:	f7ff ff12 	bl	15cc8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   15ea4:	2800      	cmp	r0, #0
   15ea6:	d0e9      	beq.n	15e7c <nrfx_clock_stop+0x3c>
   15ea8:	2001      	movs	r0, #1
   15eaa:	f005 fe0f 	bl	1bacc <nrfx_busy_wait>
   15eae:	3c01      	subs	r4, #1
   15eb0:	d1f4      	bne.n	15e9c <nrfx_clock_stop+0x5c>
   15eb2:	e7e3      	b.n	15e7c <nrfx_clock_stop+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15eb4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   15eb6:	4b12      	ldr	r3, [pc, #72]	; (15f00 <nrfx_clock_stop+0xc0>)
   15eb8:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ebc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15ec0:	f503 7380 	add.w	r3, r3, #256	; 0x100
   15ec4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15ec6:	4b10      	ldr	r3, [pc, #64]	; (15f08 <nrfx_clock_stop+0xc8>)
   15ec8:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   15eca:	f88d 4007 	strb.w	r4, [sp, #7]
   15ece:	f242 7410 	movw	r4, #10000	; 0x2710
   15ed2:	2001      	movs	r0, #1
   15ed4:	f10d 0107 	add.w	r1, sp, #7
   15ed8:	f7ff fef6 	bl	15cc8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   15edc:	2800      	cmp	r0, #0
   15ede:	d0cd      	beq.n	15e7c <nrfx_clock_stop+0x3c>
   15ee0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15ee4:	2801      	cmp	r0, #1
   15ee6:	d1c9      	bne.n	15e7c <nrfx_clock_stop+0x3c>
   15ee8:	f005 fdf0 	bl	1bacc <nrfx_busy_wait>
   15eec:	3c01      	subs	r4, #1
   15eee:	d1f0      	bne.n	15ed2 <nrfx_clock_stop+0x92>
   15ef0:	e7c4      	b.n	15e7c <nrfx_clock_stop+0x3c>
   15ef2:	bf00      	nop
   15ef4:	2000d254 	.word	0x2000d254
   15ef8:	0001d5d9 	.word	0x0001d5d9
   15efc:	0001c625 	.word	0x0001c625
   15f00:	40005000 	.word	0x40005000
   15f04:	4000500c 	.word	0x4000500c
   15f08:	40005004 	.word	0x40005004

00015f0c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15f0c:	4b15      	ldr	r3, [pc, #84]	; (15f64 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   15f0e:	b507      	push	{r0, r1, r2, lr}
   15f10:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   15f12:	b14a      	cbz	r2, 15f28 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f14:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   15f16:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f18:	6018      	str	r0, [r3, #0]
   15f1a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   15f1c:	4b12      	ldr	r3, [pc, #72]	; (15f68 <nrfx_power_clock_irq_handler+0x5c>)
   15f1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   15f22:	4b12      	ldr	r3, [pc, #72]	; (15f6c <nrfx_power_clock_irq_handler+0x60>)
   15f24:	681b      	ldr	r3, [r3, #0]
   15f26:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15f28:	4b11      	ldr	r3, [pc, #68]	; (15f70 <nrfx_power_clock_irq_handler+0x64>)
   15f2a:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   15f2c:	b17a      	cbz	r2, 15f4e <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f2e:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   15f30:	f10d 0107 	add.w	r1, sp, #7
   15f34:	6018      	str	r0, [r3, #0]
   15f36:	681b      	ldr	r3, [r3, #0]
   15f38:	f7ff fec6 	bl	15cc8 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   15f3c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   15f40:	2202      	movs	r2, #2
   15f42:	2901      	cmp	r1, #1
   15f44:	4b08      	ldr	r3, [pc, #32]	; (15f68 <nrfx_power_clock_irq_handler+0x5c>)
   15f46:	d105      	bne.n	15f54 <nrfx_power_clock_irq_handler+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15f48:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f4c:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   15f4e:	b003      	add	sp, #12
   15f50:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   15f54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   15f58:	4b04      	ldr	r3, [pc, #16]	; (15f6c <nrfx_power_clock_irq_handler+0x60>)
   15f5a:	2001      	movs	r0, #1
   15f5c:	681b      	ldr	r3, [r3, #0]
   15f5e:	4798      	blx	r3
}
   15f60:	e7f5      	b.n	15f4e <nrfx_power_clock_irq_handler+0x42>
   15f62:	bf00      	nop
   15f64:	40005100 	.word	0x40005100
   15f68:	40005000 	.word	0x40005000
   15f6c:	2000d254 	.word	0x2000d254
   15f70:	40005104 	.word	0x40005104

00015f74 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   15f74:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   15f76:	4801      	ldr	r0, [pc, #4]	; (15f7c <nrfx_dppi_channel_alloc+0x8>)
   15f78:	f7ff be68 	b.w	15c4c <nrfx_flag32_alloc>
   15f7c:	2000c618 	.word	0x2000c618

00015f80 <nrfx_dppi_channel_enable>:

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!nrfx_flag32_is_allocated(m_allocated_channels, channel))
   15f80:	4b08      	ldr	r3, [pc, #32]	; (15fa4 <nrfx_dppi_channel_enable+0x24>)
{
   15f82:	b510      	push	{r4, lr}
    if (!nrfx_flag32_is_allocated(m_allocated_channels, channel))
   15f84:	4601      	mov	r1, r0
{
   15f86:	4604      	mov	r4, r0
    if (!nrfx_flag32_is_allocated(m_allocated_channels, channel))
   15f88:	6818      	ldr	r0, [r3, #0]
   15f8a:	f005 fda1 	bl	1bad0 <nrfx_flag32_is_allocated>
   15f8e:	b130      	cbz	r0, 15f9e <nrfx_dppi_channel_enable+0x1e>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
   15f90:	2001      	movs	r0, #1
   15f92:	4b05      	ldr	r3, [pc, #20]	; (15fa8 <nrfx_dppi_channel_enable+0x28>)
   15f94:	40a0      	lsls	r0, r4
   15f96:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nrfx_err_t err_code = NRFX_SUCCESS;
   15f9a:	4804      	ldr	r0, [pc, #16]	; (15fac <nrfx_dppi_channel_enable+0x2c>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15f9c:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_INVALID_PARAM;
   15f9e:	4804      	ldr	r0, [pc, #16]	; (15fb0 <nrfx_dppi_channel_enable+0x30>)
    return err_code;
   15fa0:	e7fc      	b.n	15f9c <nrfx_dppi_channel_enable+0x1c>
   15fa2:	bf00      	nop
   15fa4:	2000c618 	.word	0x2000c618
   15fa8:	40017000 	.word	0x40017000
   15fac:	0bad0000 	.word	0x0bad0000
   15fb0:	0bad0004 	.word	0x0bad0004

00015fb4 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   15fb4:	4b05      	ldr	r3, [pc, #20]	; (15fcc <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   15fb6:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   15fb8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   15fbc:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
   15fc0:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   15fc4:	4258      	negs	r0, r3
   15fc6:	4158      	adcs	r0, r3
   15fc8:	4770      	bx	lr
   15fca:	bf00      	nop
   15fcc:	2000c61c 	.word	0x2000c61c

00015fd0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   15fd0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   15fd2:	4c0d      	ldr	r4, [pc, #52]	; (16008 <call_handler+0x38>)
   15fd4:	f100 0308 	add.w	r3, r0, #8
   15fd8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   15fdc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   15fde:	05da      	lsls	r2, r3, #23
{
   15fe0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   15fe2:	d507      	bpl.n	15ff4 <call_handler+0x24>
   15fe4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   15fe8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   15fec:	6852      	ldr	r2, [r2, #4]
   15fee:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   15ff2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   15ff4:	68a3      	ldr	r3, [r4, #8]
   15ff6:	b12b      	cbz	r3, 16004 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   15ff8:	4631      	mov	r1, r6
   15ffa:	4628      	mov	r0, r5
   15ffc:	68e2      	ldr	r2, [r4, #12]
    }
}
   15ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   16002:	4718      	bx	r3
}
   16004:	bd70      	pop	{r4, r5, r6, pc}
   16006:	bf00      	nop
   16008:	2000c61c 	.word	0x2000c61c

0001600c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1600c:	4b19      	ldr	r3, [pc, #100]	; (16074 <release_handler+0x68>)
   1600e:	3008      	adds	r0, #8
   16010:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
{
   16014:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   16016:	05d1      	lsls	r1, r2, #23
   16018:	d51d      	bpl.n	16056 <release_handler+0x4a>
   1601a:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1601e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   16022:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   16026:	2000      	movs	r0, #0
   16028:	f103 0410 	add.w	r4, r3, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1602c:	f834 2b02 	ldrh.w	r2, [r4], #2
   16030:	f412 7f80 	tst.w	r2, #256	; 0x100
   16034:	d003      	beq.n	1603e <release_handler+0x32>
   16036:	f3c2 2243 	ubfx	r2, r2, #9, #4
   1603a:	4291      	cmp	r1, r2
   1603c:	d00b      	beq.n	16056 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1603e:	3001      	adds	r0, #1
   16040:	2820      	cmp	r0, #32
   16042:	d1f3      	bne.n	1602c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   16044:	2200      	movs	r2, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   16046:	480c      	ldr	r0, [pc, #48]	; (16078 <release_handler+0x6c>)
        m_cb.handlers[handler_id].handler = NULL;
   16048:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1604c:	f7ff fe1e 	bl	15c8c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   16050:	4b0a      	ldr	r3, [pc, #40]	; (1607c <release_handler+0x70>)
   16052:	4298      	cmp	r0, r3
   16054:	d100      	bne.n	16058 <release_handler+0x4c>
}
   16056:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   16058:	4909      	ldr	r1, [pc, #36]	; (16080 <release_handler+0x74>)
   1605a:	480a      	ldr	r0, [pc, #40]	; (16084 <release_handler+0x78>)
   1605c:	f44f 7299 	mov.w	r2, #306	; 0x132
   16060:	f004 ff78 	bl	1af54 <printk>
}
   16064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   16068:	f44f 7199 	mov.w	r1, #306	; 0x132
   1606c:	4804      	ldr	r0, [pc, #16]	; (16080 <release_handler+0x74>)
   1606e:	f005 b955 	b.w	1b31c <assert_post_action>
   16072:	bf00      	nop
   16074:	2000c61c 	.word	0x2000c61c
   16078:	2000c670 	.word	0x2000c670
   1607c:	0bad0000 	.word	0x0bad0000
   16080:	0001d616 	.word	0x0001d616
   16084:	0001c625 	.word	0x0001c625

00016088 <pin_handler_trigger_uninit>:
{
   16088:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1608a:	4c0c      	ldr	r4, [pc, #48]	; (160bc <pin_handler_trigger_uninit+0x34>)
   1608c:	f100 0508 	add.w	r5, r0, #8
   16090:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   16094:	069a      	lsls	r2, r3, #26
   16096:	d50a      	bpl.n	160ae <pin_handler_trigger_uninit+0x26>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   16098:	2200      	movs	r2, #0
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1609a:	0b5b      	lsrs	r3, r3, #13
   1609c:	009b      	lsls	r3, r3, #2
   1609e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   160a2:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   160a6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   160aa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    release_handler(pin);
   160ae:	f7ff ffad 	bl	1600c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   160b2:	2300      	movs	r3, #0
   160b4:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   160b8:	bd38      	pop	{r3, r4, r5, pc}
   160ba:	bf00      	nop
   160bc:	2000c61c 	.word	0x2000c61c

000160c0 <nrf_gpio_pin_port_decode>:
{
   160c0:	b510      	push	{r4, lr}
   160c2:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   160c4:	6800      	ldr	r0, [r0, #0]
   160c6:	f005 fd08 	bl	1bada <nrf_gpio_pin_present_check>
   160ca:	b950      	cbnz	r0, 160e2 <nrf_gpio_pin_port_decode+0x22>
   160cc:	490e      	ldr	r1, [pc, #56]	; (16108 <nrf_gpio_pin_port_decode+0x48>)
   160ce:	480f      	ldr	r0, [pc, #60]	; (1610c <nrf_gpio_pin_port_decode+0x4c>)
   160d0:	f240 2229 	movw	r2, #553	; 0x229
   160d4:	f004 ff3e 	bl	1af54 <printk>
   160d8:	f240 2129 	movw	r1, #553	; 0x229
   160dc:	480a      	ldr	r0, [pc, #40]	; (16108 <nrf_gpio_pin_port_decode+0x48>)
   160de:	f005 f91d 	bl	1b31c <assert_post_action>
    uint32_t pin_number = *p_pin;
   160e2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   160e4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   160e8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   160ea:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   160ec:	d00a      	beq.n	16104 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   160ee:	4906      	ldr	r1, [pc, #24]	; (16108 <nrf_gpio_pin_port_decode+0x48>)
   160f0:	4806      	ldr	r0, [pc, #24]	; (1610c <nrf_gpio_pin_port_decode+0x4c>)
   160f2:	f240 222e 	movw	r2, #558	; 0x22e
   160f6:	f004 ff2d 	bl	1af54 <printk>
   160fa:	f240 212e 	movw	r1, #558	; 0x22e
   160fe:	4802      	ldr	r0, [pc, #8]	; (16108 <nrf_gpio_pin_port_decode+0x48>)
   16100:	f005 f90c 	bl	1b31c <assert_post_action>
}
   16104:	4802      	ldr	r0, [pc, #8]	; (16110 <nrf_gpio_pin_port_decode+0x50>)
   16106:	bd10      	pop	{r4, pc}
   16108:	0001d20e 	.word	0x0001d20e
   1610c:	0001c625 	.word	0x0001c625
   16110:	40842500 	.word	0x40842500

00016114 <nrfx_gpiote_input_configure>:
{
   16114:	b5f0      	push	{r4, r5, r6, r7, lr}
   16116:	4604      	mov	r4, r0
   16118:	4616      	mov	r6, r2
   1611a:	461d      	mov	r5, r3
   1611c:	b085      	sub	sp, #20
    if (p_input_config)
   1611e:	b1f1      	cbz	r1, 1615e <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   16120:	f7ff ff48 	bl	15fb4 <pin_is_task_output>
   16124:	b110      	cbz	r0, 1612c <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   16126:	484a      	ldr	r0, [pc, #296]	; (16250 <nrfx_gpiote_input_configure+0x13c>)
}
   16128:	b005      	add	sp, #20
   1612a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1612c:	460b      	mov	r3, r1
   1612e:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   16132:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   16136:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1613a:	f10d 020f 	add.w	r2, sp, #15
   1613e:	f10d 010e 	add.w	r1, sp, #14
   16142:	4620      	mov	r0, r4
   16144:	f005 fcd9 	bl	1bafa <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   16148:	4a42      	ldr	r2, [pc, #264]	; (16254 <nrfx_gpiote_input_configure+0x140>)
   1614a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1614e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   16152:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   16156:	f043 0301 	orr.w	r3, r3, #1
   1615a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1615e:	b196      	cbz	r6, 16186 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   16160:	4b3c      	ldr	r3, [pc, #240]	; (16254 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   16162:	7830      	ldrb	r0, [r6, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   16164:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   16166:	f104 0608 	add.w	r6, r4, #8
   1616a:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
   1616e:	078f      	lsls	r7, r1, #30
   16170:	d50c      	bpl.n	1618c <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
   16172:	2a00      	cmp	r2, #0
   16174:	d1d7      	bne.n	16126 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   16176:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
   1617a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1617e:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
   16182:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (p_handler_config)
   16186:	bbcd      	cbnz	r5, 161fc <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
   16188:	4833      	ldr	r0, [pc, #204]	; (16258 <nrfx_gpiote_input_configure+0x144>)
   1618a:	e7cd      	b.n	16128 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1618c:	f021 0120 	bic.w	r1, r1, #32
   16190:	04c9      	lsls	r1, r1, #19
   16192:	0cc9      	lsrs	r1, r1, #19
   16194:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
   16198:	2a00      	cmp	r2, #0
   1619a:	d0ec      	beq.n	16176 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
   1619c:	2803      	cmp	r0, #3
   1619e:	d8c2      	bhi.n	16126 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   161a0:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   161a4:	4662      	mov	r2, ip
   161a6:	0092      	lsls	r2, r2, #2
   161a8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   161ac:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   161b0:	b920      	cbnz	r0, 161bc <nrfx_gpiote_input_configure+0xa8>
    p_reg->CONFIG[idx] = 0;
   161b2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   161b6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#endif
}
   161ba:	e7dc      	b.n	16176 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   161bc:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   161c0:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   161c4:	f027 0703 	bic.w	r7, r7, #3
   161c8:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   161cc:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
   161d0:	f041 0120 	orr.w	r1, r1, #32
   161d4:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
   161d8:	f427 7740 	bic.w	r7, r7, #768	; 0x300
   161dc:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   161e0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   161e4:	0227      	lsls	r7, r4, #8
   161e6:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   161ea:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
   161ee:	ea47 070e 	orr.w	r7, r7, lr
   161f2:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
   161f6:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
   161fa:	e7bc      	b.n	16176 <nrfx_gpiote_input_configure+0x62>
    release_handler(pin);
   161fc:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   161fe:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   16202:	f7ff ff03 	bl	1600c <release_handler>
    if (!handler)
   16206:	2e00      	cmp	r6, #0
   16208:	d0be      	beq.n	16188 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1620a:	4d12      	ldr	r5, [pc, #72]	; (16254 <nrfx_gpiote_input_configure+0x140>)
   1620c:	682b      	ldr	r3, [r5, #0]
   1620e:	429e      	cmp	r6, r3
   16210:	d104      	bne.n	1621c <nrfx_gpiote_input_configure+0x108>
   16212:	686b      	ldr	r3, [r5, #4]
   16214:	429f      	cmp	r7, r3
   16216:	d101      	bne.n	1621c <nrfx_gpiote_input_configure+0x108>
   16218:	2200      	movs	r2, #0
   1621a:	e00a      	b.n	16232 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1621c:	480f      	ldr	r0, [pc, #60]	; (1625c <nrfx_gpiote_input_configure+0x148>)
   1621e:	f10d 010f 	add.w	r1, sp, #15
   16222:	f7ff fd13 	bl	15c4c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   16226:	4b0c      	ldr	r3, [pc, #48]	; (16258 <nrfx_gpiote_input_configure+0x144>)
   16228:	4298      	cmp	r0, r3
   1622a:	f47f af7d 	bne.w	16128 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   1622e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   16232:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   16236:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   16238:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1623a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1623e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   16242:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   16246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1624a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1624e:	e79b      	b.n	16188 <nrfx_gpiote_input_configure+0x74>
   16250:	0bad0004 	.word	0x0bad0004
   16254:	2000c61c 	.word	0x2000c61c
   16258:	0bad0000 	.word	0x0bad0000
   1625c:	2000c670 	.word	0x2000c670

00016260 <nrfx_gpiote_output_configure>:
{
   16260:	b5f0      	push	{r4, r5, r6, r7, lr}
   16262:	4604      	mov	r4, r0
   16264:	4615      	mov	r5, r2
   16266:	b085      	sub	sp, #20
    if (p_config)
   16268:	b309      	cbz	r1, 162ae <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1626a:	4e33      	ldr	r6, [pc, #204]	; (16338 <nrfx_gpiote_output_configure+0xd8>)
   1626c:	f100 0708 	add.w	r7, r0, #8
   16270:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   16274:	0798      	lsls	r0, r3, #30
   16276:	d401      	bmi.n	1627c <nrfx_gpiote_output_configure+0x1c>
   16278:	069a      	lsls	r2, r3, #26
   1627a:	d45a      	bmi.n	16332 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1627c:	f013 0f1c 	tst.w	r3, #28
   16280:	d002      	beq.n	16288 <nrfx_gpiote_output_configure+0x28>
   16282:	784b      	ldrb	r3, [r1, #1]
   16284:	2b01      	cmp	r3, #1
   16286:	d054      	beq.n	16332 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   16288:	2301      	movs	r3, #1
   1628a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1628e:	2300      	movs	r3, #0
   16290:	1c4a      	adds	r2, r1, #1
   16292:	e9cd 1300 	strd	r1, r3, [sp]
   16296:	4620      	mov	r0, r4
   16298:	1c8b      	adds	r3, r1, #2
   1629a:	f10d 010f 	add.w	r1, sp, #15
   1629e:	f005 fc2c 	bl	1bafa <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   162a2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   162a6:	f043 0303 	orr.w	r3, r3, #3
   162aa:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   162ae:	b915      	cbnz	r5, 162b6 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   162b0:	4822      	ldr	r0, [pc, #136]	; (1633c <nrfx_gpiote_output_configure+0xdc>)
}
   162b2:	b005      	add	sp, #20
   162b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   162b6:	4e20      	ldr	r6, [pc, #128]	; (16338 <nrfx_gpiote_output_configure+0xd8>)
   162b8:	f104 0708 	add.w	r7, r4, #8
   162bc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   162c0:	0783      	lsls	r3, r0, #30
   162c2:	d536      	bpl.n	16332 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   162c4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   162c8:	2300      	movs	r3, #0
   162ca:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   162cc:	f020 0020 	bic.w	r0, r0, #32
   162d0:	0089      	lsls	r1, r1, #2
   162d2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   162d6:	04c0      	lsls	r0, r0, #19
   162d8:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   162dc:	0cc0      	lsrs	r0, r0, #19
   162de:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   162e2:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   162e6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   162ea:	786a      	ldrb	r2, [r5, #1]
   162ec:	2a00      	cmp	r2, #0
   162ee:	d0df      	beq.n	162b0 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   162f0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   162f4:	78ad      	ldrb	r5, [r5, #2]
   162f6:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   162fa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   162fe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16302:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   16306:	0223      	lsls	r3, r4, #8
   16308:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1630c:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1630e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   16312:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   16316:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16318:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1631a:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1631e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16322:	432b      	orrs	r3, r5
   16324:	f040 0020 	orr.w	r0, r0, #32
   16328:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1632c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   16330:	e7be      	b.n	162b0 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   16332:	4803      	ldr	r0, [pc, #12]	; (16340 <nrfx_gpiote_output_configure+0xe0>)
   16334:	e7bd      	b.n	162b2 <nrfx_gpiote_output_configure+0x52>
   16336:	bf00      	nop
   16338:	2000c61c 	.word	0x2000c61c
   1633c:	0bad0000 	.word	0x0bad0000
   16340:	0bad0004 	.word	0x0bad0004

00016344 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   16344:	4b01      	ldr	r3, [pc, #4]	; (1634c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   16346:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1634a:	4770      	bx	lr
   1634c:	2000c61c 	.word	0x2000c61c

00016350 <nrfx_gpiote_channel_get>:
{
   16350:	b538      	push	{r3, r4, r5, lr}
   16352:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   16354:	460d      	mov	r5, r1
   16356:	b951      	cbnz	r1, 1636e <nrfx_gpiote_channel_get+0x1e>
   16358:	490a      	ldr	r1, [pc, #40]	; (16384 <nrfx_gpiote_channel_get+0x34>)
   1635a:	480b      	ldr	r0, [pc, #44]	; (16388 <nrfx_gpiote_channel_get+0x38>)
   1635c:	f240 2235 	movw	r2, #565	; 0x235
   16360:	f004 fdf8 	bl	1af54 <printk>
   16364:	f240 2135 	movw	r1, #565	; 0x235
   16368:	4806      	ldr	r0, [pc, #24]	; (16384 <nrfx_gpiote_channel_get+0x34>)
   1636a:	f004 ffd7 	bl	1b31c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1636e:	4b07      	ldr	r3, [pc, #28]	; (1638c <nrfx_gpiote_channel_get+0x3c>)
   16370:	3408      	adds	r4, #8
   16372:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
   16376:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16378:	bf43      	ittte	mi
   1637a:	0b5b      	lsrmi	r3, r3, #13
   1637c:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
   1637e:	4804      	ldrmi	r0, [pc, #16]	; (16390 <nrfx_gpiote_channel_get+0x40>)
        return NRFX_ERROR_INVALID_PARAM;
   16380:	4804      	ldrpl	r0, [pc, #16]	; (16394 <nrfx_gpiote_channel_get+0x44>)
}
   16382:	bd38      	pop	{r3, r4, r5, pc}
   16384:	0001d616 	.word	0x0001d616
   16388:	0001c625 	.word	0x0001c625
   1638c:	2000c61c 	.word	0x2000c61c
   16390:	0bad0000 	.word	0x0bad0000
   16394:	0bad0004 	.word	0x0bad0004

00016398 <nrfx_gpiote_init>:
{
   16398:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1639a:	4c0e      	ldr	r4, [pc, #56]	; (163d4 <nrfx_gpiote_init+0x3c>)
   1639c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   163a0:	b9b5      	cbnz	r5, 163d0 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   163a2:	2240      	movs	r2, #64	; 0x40
   163a4:	4629      	mov	r1, r5
   163a6:	f104 0010 	add.w	r0, r4, #16
   163aa:	f005 f8b3 	bl	1b514 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   163ae:	2031      	movs	r0, #49	; 0x31
   163b0:	f7fc fd0a 	bl	12dc8 <arch_irq_enable>
    p_reg->INTENSET = mask;
   163b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   163b8:	4b07      	ldr	r3, [pc, #28]	; (163d8 <nrfx_gpiote_init+0x40>)
    return err_code;
   163ba:	4808      	ldr	r0, [pc, #32]	; (163dc <nrfx_gpiote_init+0x44>)
   163bc:	601d      	str	r5, [r3, #0]
   163be:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   163c0:	4b07      	ldr	r3, [pc, #28]	; (163e0 <nrfx_gpiote_init+0x48>)
   163c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   163c6:	2301      	movs	r3, #1
   163c8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   163cc:	6563      	str	r3, [r4, #84]	; 0x54
}
   163ce:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   163d0:	4804      	ldr	r0, [pc, #16]	; (163e4 <nrfx_gpiote_init+0x4c>)
   163d2:	e7fc      	b.n	163ce <nrfx_gpiote_init+0x36>
   163d4:	2000c61c 	.word	0x2000c61c
   163d8:	4003117c 	.word	0x4003117c
   163dc:	0bad0000 	.word	0x0bad0000
   163e0:	40031000 	.word	0x40031000
   163e4:	0bad0005 	.word	0x0bad0005

000163e8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   163e8:	4b03      	ldr	r3, [pc, #12]	; (163f8 <nrfx_gpiote_is_init+0x10>)
   163ea:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   163ee:	3800      	subs	r0, #0
   163f0:	bf18      	it	ne
   163f2:	2001      	movne	r0, #1
   163f4:	4770      	bx	lr
   163f6:	bf00      	nop
   163f8:	2000c61c 	.word	0x2000c61c

000163fc <nrfx_gpiote_channel_free>:
{
   163fc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   163fe:	4801      	ldr	r0, [pc, #4]	; (16404 <nrfx_gpiote_channel_free+0x8>)
   16400:	f7ff bc44 	b.w	15c8c <nrfx_flag32_free>
   16404:	2000c66c 	.word	0x2000c66c

00016408 <nrfx_gpiote_channel_alloc>:
{
   16408:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1640a:	4801      	ldr	r0, [pc, #4]	; (16410 <nrfx_gpiote_channel_alloc+0x8>)
   1640c:	f7ff bc1e 	b.w	15c4c <nrfx_flag32_alloc>
   16410:	2000c66c 	.word	0x2000c66c

00016414 <nrfx_gpiote_trigger_enable>:
{
   16414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   16416:	4d2f      	ldr	r5, [pc, #188]	; (164d4 <nrfx_gpiote_trigger_enable+0xc0>)
   16418:	f100 0708 	add.w	r7, r0, #8
   1641c:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
{
   16420:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   16422:	f013 0f1c 	tst.w	r3, #28
{
   16426:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   16428:	d10a      	bne.n	16440 <nrfx_gpiote_trigger_enable+0x2c>
   1642a:	492b      	ldr	r1, [pc, #172]	; (164d8 <nrfx_gpiote_trigger_enable+0xc4>)
   1642c:	482b      	ldr	r0, [pc, #172]	; (164dc <nrfx_gpiote_trigger_enable+0xc8>)
   1642e:	f240 32df 	movw	r2, #991	; 0x3df
   16432:	f004 fd8f 	bl	1af54 <printk>
   16436:	f240 31df 	movw	r1, #991	; 0x3df
   1643a:	4827      	ldr	r0, [pc, #156]	; (164d8 <nrfx_gpiote_trigger_enable+0xc4>)
   1643c:	f004 ff6e 	bl	1b31c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   16440:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16444:	0683      	lsls	r3, r0, #26
   16446:	d51f      	bpl.n	16488 <nrfx_gpiote_trigger_enable+0x74>
   16448:	f010 0302 	ands.w	r3, r0, #2
   1644c:	d11c      	bne.n	16488 <nrfx_gpiote_trigger_enable+0x74>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1644e:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   16450:	4608      	mov	r0, r1
   16452:	f005 fb4e 	bl	1baf2 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   16456:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1645a:	f500 3044 	add.w	r0, r0, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1645e:	6003      	str	r3, [r0, #0]
   16460:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   16462:	008b      	lsls	r3, r1, #2
   16464:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16468:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1646c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16470:	f042 0201 	orr.w	r2, r2, #1
   16474:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   16478:	b126      	cbz	r6, 16484 <nrfx_gpiote_trigger_enable+0x70>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1647a:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   1647c:	4a18      	ldr	r2, [pc, #96]	; (164e0 <nrfx_gpiote_trigger_enable+0xcc>)
   1647e:	408b      	lsls	r3, r1
   16480:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16484:	b003      	add	sp, #12
   16486:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   16488:	b956      	cbnz	r6, 164a0 <nrfx_gpiote_trigger_enable+0x8c>
   1648a:	4913      	ldr	r1, [pc, #76]	; (164d8 <nrfx_gpiote_trigger_enable+0xc4>)
   1648c:	4813      	ldr	r0, [pc, #76]	; (164dc <nrfx_gpiote_trigger_enable+0xc8>)
   1648e:	f240 32ee 	movw	r2, #1006	; 0x3ee
   16492:	f004 fd5f 	bl	1af54 <printk>
   16496:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1649a:	480f      	ldr	r0, [pc, #60]	; (164d8 <nrfx_gpiote_trigger_enable+0xc4>)
   1649c:	f004 ff3e 	bl	1b31c <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   164a0:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
   164a4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   164a8:	2b04      	cmp	r3, #4
   164aa:	d00f      	beq.n	164cc <nrfx_gpiote_trigger_enable+0xb8>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   164ac:	2b05      	cmp	r3, #5
   164ae:	d00f      	beq.n	164d0 <nrfx_gpiote_trigger_enable+0xbc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   164b0:	a801      	add	r0, sp, #4
   164b2:	9401      	str	r4, [sp, #4]
   164b4:	f7ff fe04 	bl	160c0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   164b8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   164ba:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   164bc:	40d9      	lsrs	r1, r3
   164be:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   164c2:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   164c4:	4620      	mov	r0, r4
   164c6:	f005 fb63 	bl	1bb90 <nrf_gpio_cfg_sense_set>
}
   164ca:	e7db      	b.n	16484 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   164cc:	2103      	movs	r1, #3
   164ce:	e7f9      	b.n	164c4 <nrfx_gpiote_trigger_enable+0xb0>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   164d0:	2102      	movs	r1, #2
   164d2:	e7f7      	b.n	164c4 <nrfx_gpiote_trigger_enable+0xb0>
   164d4:	2000c61c 	.word	0x2000c61c
   164d8:	0001d616 	.word	0x0001d616
   164dc:	0001c625 	.word	0x0001c625
   164e0:	40031000 	.word	0x40031000

000164e4 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   164e4:	4b0e      	ldr	r3, [pc, #56]	; (16520 <nrfx_gpiote_trigger_disable+0x3c>)
   164e6:	f100 0208 	add.w	r2, r0, #8
   164ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   164ee:	0699      	lsls	r1, r3, #26
   164f0:	d513      	bpl.n	1651a <nrfx_gpiote_trigger_disable+0x36>
   164f2:	079a      	lsls	r2, r3, #30
   164f4:	d411      	bmi.n	1651a <nrfx_gpiote_trigger_disable+0x36>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   164f6:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   164f8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   164fa:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   164fc:	4909      	ldr	r1, [pc, #36]	; (16524 <nrfx_gpiote_trigger_disable+0x40>)
   164fe:	009b      	lsls	r3, r3, #2
   16500:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16504:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   16508:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1650c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16510:	f022 0203 	bic.w	r2, r2, #3
   16514:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   16518:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1651a:	2100      	movs	r1, #0
   1651c:	f005 bb38 	b.w	1bb90 <nrf_gpio_cfg_sense_set>
   16520:	2000c61c 	.word	0x2000c61c
   16524:	40031000 	.word	0x40031000

00016528 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   16528:	4b0d      	ldr	r3, [pc, #52]	; (16560 <nrfx_gpiote_pin_uninit+0x38>)
   1652a:	f100 0208 	add.w	r2, r0, #8
   1652e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
{
   16532:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
   16534:	07db      	lsls	r3, r3, #31
{
   16536:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   16538:	d510      	bpl.n	1655c <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
   1653a:	f7ff ffd3 	bl	164e4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1653e:	4620      	mov	r0, r4
   16540:	f7ff fda2 	bl	16088 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16544:	a801      	add	r0, sp, #4
   16546:	9401      	str	r4, [sp, #4]
   16548:	f7ff fdba 	bl	160c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1654c:	2202      	movs	r2, #2
   1654e:	9b01      	ldr	r3, [sp, #4]
   16550:	3380      	adds	r3, #128	; 0x80
   16552:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   16556:	4803      	ldr	r0, [pc, #12]	; (16564 <nrfx_gpiote_pin_uninit+0x3c>)
}
   16558:	b002      	add	sp, #8
   1655a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1655c:	4802      	ldr	r0, [pc, #8]	; (16568 <nrfx_gpiote_pin_uninit+0x40>)
   1655e:	e7fb      	b.n	16558 <nrfx_gpiote_pin_uninit+0x30>
   16560:	2000c61c 	.word	0x2000c61c
   16564:	0bad0000 	.word	0x0bad0000
   16568:	0bad0004 	.word	0x0bad0004

0001656c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1656c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   16570:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   16572:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16574:	4634      	mov	r4, r6
{
   16576:	4b52      	ldr	r3, [pc, #328]	; (166c0 <nrfx_gpiote_irq_handler+0x154>)
    return p_reg->INTENSET & mask;
   16578:	4852      	ldr	r0, [pc, #328]	; (166c4 <nrfx_gpiote_irq_handler+0x158>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1657a:	4953      	ldr	r1, [pc, #332]	; (166c8 <nrfx_gpiote_irq_handler+0x15c>)
{
   1657c:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1657e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   16580:	b135      	cbz	r5, 16590 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   16582:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   16586:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16588:	bf1e      	ittt	ne
   1658a:	601c      	strne	r4, [r3, #0]
   1658c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1658e:	4316      	orrne	r6, r2
        }
        mask <<= 1;
   16590:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16592:	428b      	cmp	r3, r1
        mask <<= 1;
   16594:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16598:	d1f1      	bne.n	1657e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1659a:	4b4c      	ldr	r3, [pc, #304]	; (166cc <nrfx_gpiote_irq_handler+0x160>)
   1659c:	681a      	ldr	r2, [r3, #0]
   1659e:	4698      	mov	r8, r3
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   165a0:	b182      	cbz	r2, 165c4 <nrfx_gpiote_irq_handler+0x58>
        *p_masks = gpio_regs[i]->LATCH;
   165a2:	4f4b      	ldr	r7, [pc, #300]	; (166d0 <nrfx_gpiote_irq_handler+0x164>)
   165a4:	6a3b      	ldr	r3, [r7, #32]
   165a6:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   165a8:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   165aa:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   165ae:	9c02      	ldr	r4, [sp, #8]
   165b0:	b954      	cbnz	r4, 165c8 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   165b2:	f8c8 4000 	str.w	r4, [r8]
   165b6:	f8d8 3000 	ldr.w	r3, [r8]
        *p_masks = gpio_regs[i]->LATCH;
   165ba:	6a3b      	ldr	r3, [r7, #32]
   165bc:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   165be:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
   165c0:	2b00      	cmp	r3, #0
   165c2:	d1f2      	bne.n	165aa <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
   165c4:	2401      	movs	r4, #1
   165c6:	e076      	b.n	166b6 <nrfx_gpiote_irq_handler+0x14a>
                uint32_t pin = NRF_CTZ(latch[i]);
   165c8:	fa94 f4a4 	rbit	r4, r4
   165cc:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   165d0:	4a40      	ldr	r2, [pc, #256]	; (166d4 <nrfx_gpiote_irq_handler+0x168>)
   165d2:	f104 0308 	add.w	r3, r4, #8
   165d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   165da:	08e5      	lsrs	r5, r4, #3
   165dc:	089a      	lsrs	r2, r3, #2
   165de:	f3c3 0b82 	ubfx	fp, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
   165e2:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   165e6:	ab02      	add	r3, sp, #8
   165e8:	fa09 f001 	lsl.w	r0, r9, r1
   165ec:	5d59      	ldrb	r1, [r3, r5]
   165ee:	9201      	str	r2, [sp, #4]
   165f0:	ea21 0100 	bic.w	r1, r1, r0
   165f4:	5559      	strb	r1, [r3, r5]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   165f6:	a803      	add	r0, sp, #12
   165f8:	9403      	str	r4, [sp, #12]
   165fa:	f7ff fd61 	bl	160c0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   165fe:	9903      	ldr	r1, [sp, #12]
    if (is_level(trigger))
   16600:	9a01      	ldr	r2, [sp, #4]
   16602:	3180      	adds	r1, #128	; 0x80
   16604:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   16608:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1660a:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1660c:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   16610:	d521      	bpl.n	16656 <nrfx_gpiote_irq_handler+0xea>
        call_handler(pin, trigger);
   16612:	4659      	mov	r1, fp
   16614:	4620      	mov	r0, r4
   16616:	f7ff fcdb 	bl	15fd0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1661a:	a803      	add	r0, sp, #12
   1661c:	9403      	str	r4, [sp, #12]
   1661e:	f7ff fd4f 	bl	160c0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16622:	9b03      	ldr	r3, [sp, #12]
   16624:	b2ed      	uxtb	r5, r5
   16626:	3380      	adds	r3, #128	; 0x80
   16628:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1662c:	f3c3 4301 	ubfx	r3, r3, #16, #2
   16630:	429d      	cmp	r5, r3
   16632:	d107      	bne.n	16644 <nrfx_gpiote_irq_handler+0xd8>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   16634:	2100      	movs	r1, #0
   16636:	4620      	mov	r0, r4
   16638:	f005 faaa 	bl	1bb90 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1663c:	4629      	mov	r1, r5
   1663e:	4620      	mov	r0, r4
   16640:	f005 faa6 	bl	1bb90 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16644:	a803      	add	r0, sp, #12
   16646:	9403      	str	r4, [sp, #12]
   16648:	f7ff fd3a 	bl	160c0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1664c:	9b03      	ldr	r3, [sp, #12]
   1664e:	fa09 f303 	lsl.w	r3, r9, r3
   16652:	6203      	str	r3, [r0, #32]
   16654:	e7ab      	b.n	165ae <nrfx_gpiote_irq_handler+0x42>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   16656:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   16658:	bf0c      	ite	eq
   1665a:	2103      	moveq	r1, #3
   1665c:	2102      	movne	r1, #2
   1665e:	4620      	mov	r0, r4
   16660:	f005 fa96 	bl	1bb90 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   16664:	f1bb 0f03 	cmp.w	fp, #3
   16668:	d004      	beq.n	16674 <nrfx_gpiote_irq_handler+0x108>
   1666a:	2d02      	cmp	r5, #2
   1666c:	d107      	bne.n	1667e <nrfx_gpiote_irq_handler+0x112>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1666e:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   16672:	d1e7      	bne.n	16644 <nrfx_gpiote_irq_handler+0xd8>
            call_handler(pin, trigger);
   16674:	4651      	mov	r1, sl
   16676:	4620      	mov	r0, r4
   16678:	f7ff fcaa 	bl	15fd0 <call_handler>
   1667c:	e7e2      	b.n	16644 <nrfx_gpiote_irq_handler+0xd8>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1667e:	2d03      	cmp	r5, #3
   16680:	d1e0      	bne.n	16644 <nrfx_gpiote_irq_handler+0xd8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   16682:	f1bb 0f02 	cmp.w	fp, #2
   16686:	e7f4      	b.n	16672 <nrfx_gpiote_irq_handler+0x106>
        uint32_t ch = NRF_CTZ(mask);
   16688:	fa96 f3a6 	rbit	r3, r6
   1668c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   16690:	fa04 f203 	lsl.w	r2, r4, r3
   16694:	009b      	lsls	r3, r3, #2
   16696:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1669a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1669e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   166a2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   166a6:	f3c0 2004 	ubfx	r0, r0, #8, #5
   166aa:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   166ae:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   166b2:	f7ff fc8d 	bl	15fd0 <call_handler>
    while (mask)
   166b6:	2e00      	cmp	r6, #0
   166b8:	d1e6      	bne.n	16688 <nrfx_gpiote_irq_handler+0x11c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   166ba:	b005      	add	sp, #20
   166bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166c0:	40031100 	.word	0x40031100
   166c4:	40031000 	.word	0x40031000
   166c8:	40031120 	.word	0x40031120
   166cc:	4003117c 	.word	0x4003117c
   166d0:	40842500 	.word	0x40842500
   166d4:	2000c61c 	.word	0x2000c61c

000166d8 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   166d8:	b570      	push	{r4, r5, r6, lr}
   166da:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   166dc:	460d      	mov	r5, r1
   166de:	b941      	cbnz	r1, 166f2 <nrfx_ipc_init+0x1a>
   166e0:	490b      	ldr	r1, [pc, #44]	; (16710 <nrfx_ipc_init+0x38>)
   166e2:	480c      	ldr	r0, [pc, #48]	; (16714 <nrfx_ipc_init+0x3c>)
   166e4:	2234      	movs	r2, #52	; 0x34
   166e6:	f004 fc35 	bl	1af54 <printk>
   166ea:	2134      	movs	r1, #52	; 0x34
   166ec:	4808      	ldr	r0, [pc, #32]	; (16710 <nrfx_ipc_init+0x38>)
   166ee:	f004 fe15 	bl	1b31c <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   166f2:	4c09      	ldr	r4, [pc, #36]	; (16718 <nrfx_ipc_init+0x40>)
   166f4:	7923      	ldrb	r3, [r4, #4]
   166f6:	b943      	cbnz	r3, 1670a <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   166f8:	202a      	movs	r0, #42	; 0x2a
   166fa:	f7fc fb65 	bl	12dc8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   166fe:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   16700:	4806      	ldr	r0, [pc, #24]	; (1671c <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16702:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   16704:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   16706:	60a6      	str	r6, [r4, #8]
}
   16708:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1670a:	4805      	ldr	r0, [pc, #20]	; (16720 <nrfx_ipc_init+0x48>)
   1670c:	e7fc      	b.n	16708 <nrfx_ipc_init+0x30>
   1670e:	bf00      	nop
   16710:	0001d654 	.word	0x0001d654
   16714:	0001c625 	.word	0x0001c625
   16718:	2000d25c 	.word	0x2000d25c
   1671c:	0bad0000 	.word	0x0bad0000
   16720:	0bad000c 	.word	0x0bad000c

00016724 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   16724:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   16726:	4604      	mov	r4, r0
   16728:	b940      	cbnz	r0, 1673c <nrfx_ipc_config_load+0x18>
   1672a:	4919      	ldr	r1, [pc, #100]	; (16790 <nrfx_ipc_config_load+0x6c>)
   1672c:	4819      	ldr	r0, [pc, #100]	; (16794 <nrfx_ipc_config_load+0x70>)
   1672e:	2246      	movs	r2, #70	; 0x46
   16730:	f004 fc10 	bl	1af54 <printk>
   16734:	2146      	movs	r1, #70	; 0x46
   16736:	4816      	ldr	r0, [pc, #88]	; (16790 <nrfx_ipc_config_load+0x6c>)
   16738:	f004 fdf0 	bl	1b31c <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1673c:	4b16      	ldr	r3, [pc, #88]	; (16798 <nrfx_ipc_config_load+0x74>)
   1673e:	791b      	ldrb	r3, [r3, #4]
   16740:	2b01      	cmp	r3, #1
   16742:	d008      	beq.n	16756 <nrfx_ipc_config_load+0x32>
   16744:	4912      	ldr	r1, [pc, #72]	; (16790 <nrfx_ipc_config_load+0x6c>)
   16746:	4813      	ldr	r0, [pc, #76]	; (16794 <nrfx_ipc_config_load+0x70>)
   16748:	2247      	movs	r2, #71	; 0x47
   1674a:	f004 fc03 	bl	1af54 <printk>
   1674e:	2147      	movs	r1, #71	; 0x47
   16750:	480f      	ldr	r0, [pc, #60]	; (16790 <nrfx_ipc_config_load+0x6c>)
   16752:	f004 fde3 	bl	1b31c <assert_post_action>
{
   16756:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   16758:	4a10      	ldr	r2, [pc, #64]	; (1679c <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1675a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1675e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16762:	3301      	adds	r3, #1
   16764:	2b08      	cmp	r3, #8
   16766:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   1676a:	d1f6      	bne.n	1675a <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1676c:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1676e:	4a0b      	ldr	r2, [pc, #44]	; (1679c <nrfx_ipc_config_load+0x78>)
   16770:	f104 0120 	add.w	r1, r4, #32
   16774:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   16778:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1677c:	3301      	adds	r3, #1
   1677e:	2b08      	cmp	r3, #8
   16780:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   16784:	d1f6      	bne.n	16774 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   16786:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   16788:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1678c:	bd38      	pop	{r3, r4, r5, pc}
   1678e:	bf00      	nop
   16790:	0001d654 	.word	0x0001d654
   16794:	0001c625 	.word	0x0001c625
   16798:	2000d25c 	.word	0x2000d25c
   1679c:	4002a000 	.word	0x4002a000

000167a0 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   167a0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   167a2:	4c1b      	ldr	r4, [pc, #108]	; (16810 <nrfx_ipc_uninit+0x70>)
   167a4:	7922      	ldrb	r2, [r4, #4]
   167a6:	2a01      	cmp	r2, #1
   167a8:	d008      	beq.n	167bc <nrfx_ipc_uninit+0x1c>
   167aa:	491a      	ldr	r1, [pc, #104]	; (16814 <nrfx_ipc_uninit+0x74>)
   167ac:	481a      	ldr	r0, [pc, #104]	; (16818 <nrfx_ipc_uninit+0x78>)
   167ae:	2259      	movs	r2, #89	; 0x59
   167b0:	f004 fbd0 	bl	1af54 <printk>
   167b4:	2159      	movs	r1, #89	; 0x59
   167b6:	4817      	ldr	r0, [pc, #92]	; (16814 <nrfx_ipc_uninit+0x74>)
   167b8:	f004 fdb0 	bl	1b31c <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   167bc:	2300      	movs	r3, #0
   167be:	4a17      	ldr	r2, [pc, #92]	; (1681c <nrfx_ipc_uninit+0x7c>)
   167c0:	4917      	ldr	r1, [pc, #92]	; (16820 <nrfx_ipc_uninit+0x80>)
   167c2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   167c6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   167ca:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   167ce:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   167d2:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   167d6:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   167da:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   167de:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    p_reg->RECEIVE_CNF[index] = channels_mask;
   167e2:	f8c1 3590 	str.w	r3, [r1, #1424]	; 0x590
   167e6:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   167ea:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   167ee:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   167f2:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   167f6:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   167fa:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   167fe:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    p_reg->INTENCLR = mask;
   16802:	f04f 32ff 	mov.w	r2, #4294967295
   16806:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   1680a:	7123      	strb	r3, [r4, #4]
}
   1680c:	bd10      	pop	{r4, pc}
   1680e:	bf00      	nop
   16810:	2000d25c 	.word	0x2000d25c
   16814:	0001d654 	.word	0x0001d654
   16818:	0001c625 	.word	0x0001c625
   1681c:	4002a004 	.word	0x4002a004
   16820:	4002a000 	.word	0x4002a000

00016824 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   16824:	4b16      	ldr	r3, [pc, #88]	; (16880 <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   16826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1682a:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1682e:	f04f 0801 	mov.w	r8, #1
    uint32_t bitmask = events_map;
   16832:	4635      	mov	r5, r6
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   16834:	4f13      	ldr	r7, [pc, #76]	; (16884 <nrfx_ipc_irq_handler+0x60>)
   16836:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16890 <nrfx_ipc_irq_handler+0x6c>
    while (bitmask)
   1683a:	b935      	cbnz	r5, 1684a <nrfx_ipc_irq_handler+0x26>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   1683c:	4b12      	ldr	r3, [pc, #72]	; (16888 <nrfx_ipc_irq_handler+0x64>)
   1683e:	4630      	mov	r0, r6
}
   16840:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16844:	681a      	ldr	r2, [r3, #0]
   16846:	6899      	ldr	r1, [r3, #8]
   16848:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
   1684a:	fa95 f4a5 	rbit	r4, r5
   1684e:	fab4 f484 	clz	r4, r4
        bitmask &= ~(1UL << event_idx);
   16852:	fa08 f304 	lsl.w	r3, r8, r4
   16856:	2c07      	cmp	r4, #7
   16858:	ea25 0503 	bic.w	r5, r5, r3
   1685c:	dd0a      	ble.n	16874 <nrfx_ipc_irq_handler+0x50>
   1685e:	4639      	mov	r1, r7
   16860:	4648      	mov	r0, r9
   16862:	f240 12e7 	movw	r2, #487	; 0x1e7
   16866:	f004 fb75 	bl	1af54 <printk>
   1686a:	f240 11e7 	movw	r1, #487	; 0x1e7
   1686e:	4638      	mov	r0, r7
   16870:	f004 fd54 	bl	1b31c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16874:	2200      	movs	r2, #0
   16876:	4b05      	ldr	r3, [pc, #20]	; (1688c <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   16878:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1687a:	511a      	str	r2, [r3, r4]
}
   1687c:	e7dd      	b.n	1683a <nrfx_ipc_irq_handler+0x16>
   1687e:	bf00      	nop
   16880:	4002a000 	.word	0x4002a000
   16884:	0001d68f 	.word	0x0001d68f
   16888:	2000d25c 	.word	0x2000d25c
   1688c:	4002a100 	.word	0x4002a100
   16890:	0001c625 	.word	0x0001c625

00016894 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   16894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16898:	4605      	mov	r5, r0
   1689a:	4690      	mov	r8, r2
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
   1689c:	460c      	mov	r4, r1
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   1689e:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_config);
   168a0:	b941      	cbnz	r1, 168b4 <nrfx_timer_init+0x20>
   168a2:	493b      	ldr	r1, [pc, #236]	; (16990 <nrfx_timer_init+0xfc>)
   168a4:	483b      	ldr	r0, [pc, #236]	; (16994 <nrfx_timer_init+0x100>)
   168a6:	2253      	movs	r2, #83	; 0x53
   168a8:	f004 fb54 	bl	1af54 <printk>
   168ac:	2153      	movs	r1, #83	; 0x53
   168ae:	4838      	ldr	r0, [pc, #224]	; (16990 <nrfx_timer_init+0xfc>)
   168b0:	f004 fd34 	bl	1b31c <assert_post_action>
    NRFX_ASSERT(timer_event_handler);
   168b4:	f1b8 0f00 	cmp.w	r8, #0
   168b8:	d108      	bne.n	168cc <nrfx_timer_init+0x38>
   168ba:	4935      	ldr	r1, [pc, #212]	; (16990 <nrfx_timer_init+0xfc>)
   168bc:	4835      	ldr	r0, [pc, #212]	; (16994 <nrfx_timer_init+0x100>)
   168be:	2254      	movs	r2, #84	; 0x54
   168c0:	f004 fb48 	bl	1af54 <printk>
   168c4:	2154      	movs	r1, #84	; 0x54
   168c6:	4832      	ldr	r0, [pc, #200]	; (16990 <nrfx_timer_init+0xfc>)
   168c8:	f004 fd28 	bl	1b31c <assert_post_action>

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   168cc:	230c      	movs	r3, #12
   168ce:	4e32      	ldr	r6, [pc, #200]	; (16998 <nrfx_timer_init+0x104>)
   168d0:	fb03 6307 	mla	r3, r3, r7, r6
   168d4:	7a1b      	ldrb	r3, [r3, #8]
   168d6:	2b00      	cmp	r3, #0
   168d8:	d158      	bne.n	1698c <nrfx_timer_init+0xf8>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   168da:	682b      	ldr	r3, [r5, #0]
   168dc:	4a2f      	ldr	r2, [pc, #188]	; (1699c <nrfx_timer_init+0x108>)
   168de:	4293      	cmp	r3, r2
   168e0:	d007      	beq.n	168f2 <nrfx_timer_init+0x5e>
   168e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   168e6:	4293      	cmp	r3, r2
   168e8:	d003      	beq.n	168f2 <nrfx_timer_init+0x5e>
   168ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   168ee:	4293      	cmp	r3, r2
   168f0:	d102      	bne.n	168f8 <nrfx_timer_init+0x64>
   168f2:	78a3      	ldrb	r3, [r4, #2]
   168f4:	2b03      	cmp	r3, #3
   168f6:	d908      	bls.n	1690a <nrfx_timer_init+0x76>
   168f8:	4925      	ldr	r1, [pc, #148]	; (16990 <nrfx_timer_init+0xfc>)
   168fa:	4826      	ldr	r0, [pc, #152]	; (16994 <nrfx_timer_init+0x100>)
   168fc:	2261      	movs	r2, #97	; 0x61
   168fe:	f004 fb29 	bl	1af54 <printk>
   16902:	2161      	movs	r1, #97	; 0x61
   16904:	4822      	ldr	r0, [pc, #136]	; (16990 <nrfx_timer_init+0xfc>)
   16906:	f004 fd09 	bl	1b31c <assert_post_action>

    p_cb->handler = timer_event_handler;
   1690a:	230c      	movs	r3, #12
   1690c:	437b      	muls	r3, r7
   1690e:	18f2      	adds	r2, r6, r3
   16910:	f846 8003 	str.w	r8, [r6, r3]
    p_cb->context = p_config->p_context;
   16914:	6863      	ldr	r3, [r4, #4]
   16916:	6828      	ldr	r0, [r5, #0]
   16918:	6053      	str	r3, [r2, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   1691a:	2300      	movs	r3, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1691c:	469c      	mov	ip, r3
   1691e:	7969      	ldrb	r1, [r5, #5]
   16920:	b2da      	uxtb	r2, r3
   16922:	4291      	cmp	r1, r2
   16924:	d82a      	bhi.n	1697c <nrfx_timer_init+0xe8>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   16926:	f340 3007 	sbfx	r0, r0, #12, #8
   1692a:	f7fc fa4d 	bl	12dc8 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   1692e:	682b      	ldr	r3, [r5, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   16930:	7862      	ldrb	r2, [r4, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   16932:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   16936:	f002 0203 	and.w	r2, r2, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   1693a:	f021 0103 	bic.w	r1, r1, #3
   1693e:	430a      	orrs	r2, r1
   16940:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   16944:	f8d3 1508 	ldr.w	r1, [r3, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   16948:	78a2      	ldrb	r2, [r4, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   1694a:	f021 0103 	bic.w	r1, r1, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   1694e:	f002 0203 	and.w	r2, r2, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   16952:	430a      	orrs	r2, r1
   16954:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_frequency_t frequency)
{
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   16958:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   1695c:	7822      	ldrb	r2, [r4, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   1695e:	f021 010f 	bic.w	r1, r1, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   16962:	f002 020f 	and.w	r2, r2, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   16966:	430a      	orrs	r2, r1
   16968:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1696c:	230c      	movs	r3, #12
   1696e:	fb03 6607 	mla	r6, r3, r7, r6
   16972:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   16974:	480a      	ldr	r0, [pc, #40]	; (169a0 <nrfx_timer_init+0x10c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   16976:	7233      	strb	r3, [r6, #8]
}
   16978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1697c:	009a      	lsls	r2, r3, #2
   1697e:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   16982:	f840 c002 	str.w	ip, [r0, r2]
   16986:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   16988:	3301      	adds	r3, #1
   1698a:	e7c9      	b.n	16920 <nrfx_timer_init+0x8c>
        return err_code;
   1698c:	4805      	ldr	r0, [pc, #20]	; (169a4 <nrfx_timer_init+0x110>)
   1698e:	e7f3      	b.n	16978 <nrfx_timer_init+0xe4>
   16990:	0001d6c1 	.word	0x0001d6c1
   16994:	0001c625 	.word	0x0001c625
   16998:	2000d268 	.word	0x2000d268
   1699c:	4000f000 	.word	0x4000f000
   169a0:	0bad0000 	.word	0x0bad0000
   169a4:	0bad0005 	.word	0x0bad0005

000169a8 <nrfx_timer_enable>:
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
}

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   169a8:	210c      	movs	r1, #12
{
   169aa:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   169ac:	4d0d      	ldr	r5, [pc, #52]	; (169e4 <nrfx_timer_enable+0x3c>)
   169ae:	7902      	ldrb	r2, [r0, #4]
{
   169b0:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   169b2:	fb01 5202 	mla	r2, r1, r2, r5
   169b6:	7a12      	ldrb	r2, [r2, #8]
   169b8:	2a01      	cmp	r2, #1
   169ba:	d008      	beq.n	169ce <nrfx_timer_enable+0x26>
   169bc:	490a      	ldr	r1, [pc, #40]	; (169e8 <nrfx_timer_enable+0x40>)
   169be:	480b      	ldr	r0, [pc, #44]	; (169ec <nrfx_timer_enable+0x44>)
   169c0:	228f      	movs	r2, #143	; 0x8f
   169c2:	f004 fac7 	bl	1af54 <printk>
   169c6:	218f      	movs	r1, #143	; 0x8f
   169c8:	4807      	ldr	r0, [pc, #28]	; (169e8 <nrfx_timer_enable+0x40>)
   169ca:	f004 fca7 	bl	1b31c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   169ce:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   169d0:	6823      	ldr	r3, [r4, #0]
   169d2:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   169d4:	220c      	movs	r2, #12
   169d6:	7923      	ldrb	r3, [r4, #4]
   169d8:	fb02 5303 	mla	r3, r2, r3, r5
   169dc:	2202      	movs	r2, #2
   169de:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   169e0:	bd38      	pop	{r3, r4, r5, pc}
   169e2:	bf00      	nop
   169e4:	2000d268 	.word	0x2000d268
   169e8:	0001d6c1 	.word	0x0001d6c1
   169ec:	0001c625 	.word	0x0001c625

000169f0 <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   169f0:	210c      	movs	r1, #12
{
   169f2:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   169f4:	4d0c      	ldr	r5, [pc, #48]	; (16a28 <nrfx_timer_disable+0x38>)
   169f6:	7902      	ldrb	r2, [r0, #4]
{
   169f8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   169fa:	fb01 5202 	mla	r2, r1, r2, r5
   169fe:	7a12      	ldrb	r2, [r2, #8]
   16a00:	b942      	cbnz	r2, 16a14 <nrfx_timer_disable+0x24>
   16a02:	490a      	ldr	r1, [pc, #40]	; (16a2c <nrfx_timer_disable+0x3c>)
   16a04:	480a      	ldr	r0, [pc, #40]	; (16a30 <nrfx_timer_disable+0x40>)
   16a06:	2297      	movs	r2, #151	; 0x97
   16a08:	f004 faa4 	bl	1af54 <printk>
   16a0c:	2197      	movs	r1, #151	; 0x97
   16a0e:	4807      	ldr	r0, [pc, #28]	; (16a2c <nrfx_timer_disable+0x3c>)
   16a10:	f004 fc84 	bl	1b31c <assert_post_action>
   16a14:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   16a16:	210c      	movs	r1, #12
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   16a18:	6823      	ldr	r3, [r4, #0]
   16a1a:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   16a1c:	7923      	ldrb	r3, [r4, #4]
   16a1e:	fb01 5303 	mla	r3, r1, r3, r5
   16a22:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   16a24:	bd38      	pop	{r3, r4, r5, pc}
   16a26:	bf00      	nop
   16a28:	2000d268 	.word	0x2000d268
   16a2c:	0001d6c1 	.word	0x0001d6c1
   16a30:	0001c625 	.word	0x0001c625

00016a34 <nrfx_timer_uninit>:
{
   16a34:	b538      	push	{r3, r4, r5, lr}
   16a36:	4604      	mov	r4, r0
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   16a38:	6800      	ldr	r0, [r0, #0]
    p_reg->SHORTS &= ~(mask);
   16a3a:	2500      	movs	r5, #0
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   16a3c:	f340 3007 	sbfx	r0, r0, #12, #8
   16a40:	f7fc f9d2 	bl	12de8 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   16a44:	6823      	ldr	r3, [r4, #0]
    nrfx_timer_disable(p_instance);
   16a46:	4620      	mov	r0, r4
   16a48:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   16a4c:	f04f 32ff 	mov.w	r2, #4294967295
    p_reg->SHORTS &= ~(mask);
   16a50:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   16a54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   16a58:	f7ff ffca 	bl	169f0 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   16a5c:	210c      	movs	r1, #12
   16a5e:	7923      	ldrb	r3, [r4, #4]
   16a60:	4a02      	ldr	r2, [pc, #8]	; (16a6c <nrfx_timer_uninit+0x38>)
   16a62:	fb01 2303 	mla	r3, r1, r3, r2
   16a66:	721d      	strb	r5, [r3, #8]
}
   16a68:	bd38      	pop	{r3, r4, r5, pc}
   16a6a:	bf00      	nop
   16a6c:	2000d268 	.word	0x2000d268

00016a70 <nrfx_timer_clear>:
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   16a70:	210c      	movs	r1, #12
{
   16a72:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   16a74:	4a09      	ldr	r2, [pc, #36]	; (16a9c <nrfx_timer_clear+0x2c>)
   16a76:	7903      	ldrb	r3, [r0, #4]
{
   16a78:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   16a7a:	fb01 2303 	mla	r3, r1, r3, r2
   16a7e:	7a1b      	ldrb	r3, [r3, #8]
   16a80:	b943      	cbnz	r3, 16a94 <nrfx_timer_clear+0x24>
   16a82:	4907      	ldr	r1, [pc, #28]	; (16aa0 <nrfx_timer_clear+0x30>)
   16a84:	4807      	ldr	r0, [pc, #28]	; (16aa4 <nrfx_timer_clear+0x34>)
   16a86:	22b3      	movs	r2, #179	; 0xb3
   16a88:	f004 fa64 	bl	1af54 <printk>
   16a8c:	21b3      	movs	r1, #179	; 0xb3
   16a8e:	4804      	ldr	r0, [pc, #16]	; (16aa0 <nrfx_timer_clear+0x30>)
   16a90:	f004 fc44 	bl	1b31c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16a94:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   16a96:	6823      	ldr	r3, [r4, #0]
   16a98:	60da      	str	r2, [r3, #12]
}
   16a9a:	bd10      	pop	{r4, pc}
   16a9c:	2000d268 	.word	0x2000d268
   16aa0:	0001d6c1 	.word	0x0001d6c1
   16aa4:	0001c625 	.word	0x0001c625

00016aa8 <nrfx_timer_increment>:

void nrfx_timer_increment(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   16aa8:	210c      	movs	r1, #12
{
   16aaa:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   16aac:	4a11      	ldr	r2, [pc, #68]	; (16af4 <nrfx_timer_increment+0x4c>)
   16aae:	7903      	ldrb	r3, [r0, #4]
{
   16ab0:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   16ab2:	fb01 2303 	mla	r3, r1, r3, r2
   16ab6:	7a1b      	ldrb	r3, [r3, #8]
   16ab8:	b943      	cbnz	r3, 16acc <nrfx_timer_increment+0x24>
   16aba:	490f      	ldr	r1, [pc, #60]	; (16af8 <nrfx_timer_increment+0x50>)
   16abc:	480f      	ldr	r0, [pc, #60]	; (16afc <nrfx_timer_increment+0x54>)
   16abe:	22b9      	movs	r2, #185	; 0xb9
   16ac0:	f004 fa48 	bl	1af54 <printk>
   16ac4:	21b9      	movs	r1, #185	; 0xb9
   16ac6:	480c      	ldr	r0, [pc, #48]	; (16af8 <nrfx_timer_increment+0x50>)
   16ac8:	f004 fc28 	bl	1b31c <assert_post_action>
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
   16acc:	6823      	ldr	r3, [r4, #0]
    return (nrf_timer_mode_t)(p_reg->MODE);
   16ace:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   16ad2:	f013 0fff 	tst.w	r3, #255	; 0xff
   16ad6:	d108      	bne.n	16aea <nrfx_timer_increment+0x42>
   16ad8:	4907      	ldr	r1, [pc, #28]	; (16af8 <nrfx_timer_increment+0x50>)
   16ada:	4808      	ldr	r0, [pc, #32]	; (16afc <nrfx_timer_increment+0x54>)
   16adc:	22ba      	movs	r2, #186	; 0xba
   16ade:	f004 fa39 	bl	1af54 <printk>
   16ae2:	21ba      	movs	r1, #186	; 0xba
   16ae4:	4804      	ldr	r0, [pc, #16]	; (16af8 <nrfx_timer_increment+0x50>)
   16ae6:	f004 fc19 	bl	1b31c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16aea:	2201      	movs	r2, #1

    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_COUNT);
   16aec:	6823      	ldr	r3, [r4, #0]
   16aee:	609a      	str	r2, [r3, #8]
}
   16af0:	bd10      	pop	{r4, pc}
   16af2:	bf00      	nop
   16af4:	2000d268 	.word	0x2000d268
   16af8:	0001d6c1 	.word	0x0001d6c1
   16afc:	0001c625 	.word	0x0001c625

00016b00 <nrfx_timer_capture>:

uint32_t nrfx_timer_capture(nrfx_timer_t const *   p_instance,
                            nrf_timer_cc_channel_t cc_channel)
{
   16b00:	b538      	push	{r3, r4, r5, lr}
   16b02:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   16b04:	210c      	movs	r1, #12
   16b06:	7903      	ldrb	r3, [r0, #4]
   16b08:	4a12      	ldr	r2, [pc, #72]	; (16b54 <nrfx_timer_capture+0x54>)
{
   16b0a:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   16b0c:	fb01 2303 	mla	r3, r1, r3, r2
   16b10:	7a1b      	ldrb	r3, [r3, #8]
   16b12:	b943      	cbnz	r3, 16b26 <nrfx_timer_capture+0x26>
   16b14:	4910      	ldr	r1, [pc, #64]	; (16b58 <nrfx_timer_capture+0x58>)
   16b16:	4811      	ldr	r0, [pc, #68]	; (16b5c <nrfx_timer_capture+0x5c>)
   16b18:	22c2      	movs	r2, #194	; 0xc2
   16b1a:	f004 fa1b 	bl	1af54 <printk>
   16b1e:	21c2      	movs	r1, #194	; 0xc2
   16b20:	480d      	ldr	r0, [pc, #52]	; (16b58 <nrfx_timer_capture+0x58>)
   16b22:	f004 fbfb 	bl	1b31c <assert_post_action>
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
   16b26:	796b      	ldrb	r3, [r5, #5]
   16b28:	42a3      	cmp	r3, r4
   16b2a:	d808      	bhi.n	16b3e <nrfx_timer_capture+0x3e>
   16b2c:	490a      	ldr	r1, [pc, #40]	; (16b58 <nrfx_timer_capture+0x58>)
   16b2e:	480b      	ldr	r0, [pc, #44]	; (16b5c <nrfx_timer_capture+0x5c>)
   16b30:	22c3      	movs	r2, #195	; 0xc3
   16b32:	f004 fa0f 	bl	1af54 <printk>
   16b36:	21c3      	movs	r1, #195	; 0xc3
   16b38:	4807      	ldr	r0, [pc, #28]	; (16b58 <nrfx_timer_capture+0x58>)
   16b3a:	f004 fbef 	bl	1b31c <assert_post_action>
   16b3e:	2101      	movs	r1, #1
    return (uint32_t)p_reg->CC[cc_channel];
}

NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get(uint32_t channel)
{
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   16b40:	00a3      	lsls	r3, r4, #2

    nrf_timer_task_trigger(p_instance->p_reg,
   16b42:	682a      	ldr	r2, [r5, #0]
   16b44:	3340      	adds	r3, #64	; 0x40
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16b46:	b2db      	uxtb	r3, r3
   16b48:	50d1      	str	r1, [r2, r3]
    return (uint32_t)p_reg->CC[cc_channel];
   16b4a:	f504 74a8 	add.w	r4, r4, #336	; 0x150
   16b4e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
}
   16b52:	bd38      	pop	{r3, r4, r5, pc}
   16b54:	2000d268 	.word	0x2000d268
   16b58:	0001d6c1 	.word	0x0001d6c1
   16b5c:	0001c625 	.word	0x0001c625

00016b60 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   16b60:	2303      	movs	r3, #3
static void _DoInit(void) {
   16b62:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   16b64:	4c10      	ldr	r4, [pc, #64]	; (16ba8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   16b66:	4a11      	ldr	r2, [pc, #68]	; (16bac <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   16b68:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   16b6a:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   16b6c:	4b10      	ldr	r3, [pc, #64]	; (16bb0 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   16b6e:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   16b70:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   16b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
   16b76:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   16b78:	2300      	movs	r3, #0
   16b7a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   16b7c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   16b7e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   16b80:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   16b82:	4a0c      	ldr	r2, [pc, #48]	; (16bb4 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   16b84:	490c      	ldr	r1, [pc, #48]	; (16bb8 <_DoInit+0x58>)
  p->aDown[0].pBuffer       = _acDownBuffer;
   16b86:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   16b88:	2210      	movs	r2, #16
  STRCPY((char*)&p->acID[7], "RTT");
   16b8a:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   16b8c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   16b8e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   16b90:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   16b92:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   16b94:	f004 fc7d 	bl	1b492 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   16b98:	4620      	mov	r0, r4
   16b9a:	4908      	ldr	r1, [pc, #32]	; (16bbc <_DoInit+0x5c>)
   16b9c:	f004 fc79 	bl	1b492 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   16ba0:	2320      	movs	r3, #32
   16ba2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   16ba4:	bd10      	pop	{r4, pc}
   16ba6:	bf00      	nop
   16ba8:	2000d280 	.word	0x2000d280
   16bac:	0001d6fe 	.word	0x0001d6fe
   16bb0:	2000d5f1 	.word	0x2000d5f1
   16bb4:	2000d5e1 	.word	0x2000d5e1
   16bb8:	0001d707 	.word	0x0001d707
   16bbc:	0001d70b 	.word	0x0001d70b

00016bc0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   16bc4:	f04f 0b18 	mov.w	fp, #24
   16bc8:	4f22      	ldr	r7, [pc, #136]	; (16c54 <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16bca:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   16bcc:	fb0b 7200 	mla	r2, fp, r0, r7
   16bd0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   16bd2:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16bd4:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   16bd6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16bd8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   16bda:	d834      	bhi.n	16c46 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   16bdc:	f8d2 a020 	ldr.w	sl, [r2, #32]
   16be0:	ebaa 0905 	sub.w	r9, sl, r5
   16be4:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   16be8:	4294      	cmp	r4, r2
   16bea:	d811      	bhi.n	16c10 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   16bec:	f04f 0918 	mov.w	r9, #24
   16bf0:	fb06 9309 	mla	r3, r6, r9, r9
   16bf4:	443b      	add	r3, r7
   16bf6:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   16bf8:	4622      	mov	r2, r4
   16bfa:	4641      	mov	r1, r8
   16bfc:	4428      	add	r0, r5
   16bfe:	f004 fc7e 	bl	1b4fe <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   16c02:	fb09 7606 	mla	r6, r9, r6, r7
   16c06:	442c      	add	r4, r5
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
      return 1;
   16c08:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   16c0a:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   16c0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   16c10:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   16c12:	429c      	cmp	r4, r3
   16c14:	d81b      	bhi.n	16c4e <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   16c16:	fb00 bb0b 	mla	fp, r0, fp, fp
   16c1a:	44bb      	add	fp, r7
   16c1c:	f8db 0004 	ldr.w	r0, [fp, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   16c20:	464a      	mov	r2, r9
   16c22:	4428      	add	r0, r5
   16c24:	442c      	add	r4, r5
   16c26:	f004 fc6a 	bl	1b4fe <memcpy>
      if (NumBytes) {
   16c2a:	ebb4 040a 	subs.w	r4, r4, sl
   16c2e:	d006      	beq.n	16c3e <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   16c30:	4622      	mov	r2, r4
   16c32:	f8db 0004 	ldr.w	r0, [fp, #4]
   16c36:	eb08 0109 	add.w	r1, r8, r9
   16c3a:	f004 fc60 	bl	1b4fe <memcpy>
      pRing->WrOff = NumBytes;
   16c3e:	2018      	movs	r0, #24
   16c40:	fb00 7606 	mla	r6, r0, r6, r7
   16c44:	e7e0      	b.n	16c08 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   16c46:	3b01      	subs	r3, #1
   16c48:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   16c4a:	42a3      	cmp	r3, r4
   16c4c:	d2ce      	bcs.n	16bec <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   16c4e:	2000      	movs	r0, #0
   16c50:	e7dc      	b.n	16c0c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   16c52:	bf00      	nop
   16c54:	2000d280 	.word	0x2000d280

00016c58 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   16c5a:	2318      	movs	r3, #24
   16c5c:	4c17      	ldr	r4, [pc, #92]	; (16cbc <SEGGER_RTT_WriteNoLock+0x64>)
   16c5e:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   16c62:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   16c66:	4425      	add	r5, r4
  switch (pRing->Flags) {
   16c68:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16c6a:	460f      	mov	r7, r1
  switch (pRing->Flags) {
   16c6c:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16c6e:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   16c70:	d00f      	beq.n	16c92 <SEGGER_RTT_WriteNoLock+0x3a>
   16c72:	2c02      	cmp	r4, #2
   16c74:	d01a      	beq.n	16cac <SEGGER_RTT_WriteNoLock+0x54>
   16c76:	b9f4      	cbnz	r4, 16cb6 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   16c78:	4628      	mov	r0, r5
   16c7a:	f004 ff98 	bl	1bbae <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   16c7e:	4286      	cmp	r6, r0
   16c80:	d805      	bhi.n	16c8e <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   16c82:	4632      	mov	r2, r6
   16c84:	4639      	mov	r1, r7
   16c86:	4628      	mov	r0, r5
   16c88:	f004 ff9f 	bl	1bbca <_WriteNoCheck>
   16c8c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   16c8e:	4620      	mov	r0, r4
   16c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   16c92:	4628      	mov	r0, r5
   16c94:	f004 ff8b 	bl	1bbae <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   16c98:	4286      	cmp	r6, r0
   16c9a:	4634      	mov	r4, r6
   16c9c:	bf28      	it	cs
   16c9e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   16ca0:	4639      	mov	r1, r7
   16ca2:	4622      	mov	r2, r4
   16ca4:	4628      	mov	r0, r5
   16ca6:	f004 ff90 	bl	1bbca <_WriteNoCheck>
    break;
   16caa:	e7f0      	b.n	16c8e <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   16cac:	4628      	mov	r0, r5
}
   16cae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   16cb2:	f004 bfa6 	b.w	1bc02 <_WriteBlocking>
  switch (pRing->Flags) {
   16cb6:	2400      	movs	r4, #0
  return Status;
   16cb8:	e7e9      	b.n	16c8e <SEGGER_RTT_WriteNoLock+0x36>
   16cba:	bf00      	nop
   16cbc:	2000d280 	.word	0x2000d280

00016cc0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   16cc0:	2218      	movs	r2, #24
   16cc2:	4b03      	ldr	r3, [pc, #12]	; (16cd0 <SEGGER_RTT_HasDataUp+0x10>)
   16cc4:	fb02 3300 	mla	r3, r2, r0, r3
   16cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   16cca:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   16ccc:	1a80      	subs	r0, r0, r2
   16cce:	4770      	bx	lr
   16cd0:	2000d280 	.word	0x2000d280

00016cd4 <rpc_handle_data_message>:
   16cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16cd8:	4680      	mov	r8, r0
   16cda:	4604      	mov	r4, r0
   16cdc:	2700      	movs	r7, #0
   16cde:	f858 6b08 	ldr.w	r6, [r8], #8
   16ce2:	4d0c      	ldr	r5, [pc, #48]	; (16d14 <rpc_handle_data_message+0x40>)
   16ce4:	b2f6      	uxtb	r6, r6
   16ce6:	782b      	ldrb	r3, [r5, #0]
   16ce8:	42b3      	cmp	r3, r6
   16cea:	d00a      	beq.n	16d02 <rpc_handle_data_message+0x2e>
   16cec:	3701      	adds	r7, #1
   16cee:	2f04      	cmp	r7, #4
   16cf0:	f105 050c 	add.w	r5, r5, #12
   16cf4:	d1f7      	bne.n	16ce6 <rpc_handle_data_message+0x12>
   16cf6:	68a0      	ldr	r0, [r4, #8]
   16cf8:	b150      	cbz	r0, 16d10 <rpc_handle_data_message+0x3c>
   16cfa:	f004 fff4 	bl	1bce6 <rpc_transport_peer_data_free>
   16cfe:	2000      	movs	r0, #0
   16d00:	e006      	b.n	16d10 <rpc_handle_data_message+0x3c>
   16d02:	6821      	ldr	r1, [r4, #0]
   16d04:	4640      	mov	r0, r8
   16d06:	686b      	ldr	r3, [r5, #4]
   16d08:	0c09      	lsrs	r1, r1, #16
   16d0a:	4798      	blx	r3
   16d0c:	2802      	cmp	r0, #2
   16d0e:	d0ed      	beq.n	16cec <rpc_handle_data_message+0x18>
   16d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d14:	0001c588 	.word	0x0001c588

00016d18 <trace_write>:
   16d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d1c:	4f53      	ldr	r7, [pc, #332]	; (16e6c <trace_write+0x154>)
   16d1e:	4605      	mov	r5, r0
   16d20:	2100      	movs	r1, #0
   16d22:	6838      	ldr	r0, [r7, #0]
   16d24:	f7fe fbbe 	bl	154a4 <nrf_modem_os_sem_take>
   16d28:	4604      	mov	r4, r0
   16d2a:	2800      	cmp	r0, #0
   16d2c:	d14c      	bne.n	16dc8 <trace_write+0xb0>
   16d2e:	782b      	ldrb	r3, [r5, #0]
   16d30:	f8d5 8008 	ldr.w	r8, [r5, #8]
   16d34:	2b62      	cmp	r3, #98	; 0x62
   16d36:	d043      	beq.n	16dc0 <trace_write+0xa8>
   16d38:	2b63      	cmp	r3, #99	; 0x63
   16d3a:	d043      	beq.n	16dc4 <trace_write+0xac>
   16d3c:	2b61      	cmp	r3, #97	; 0x61
   16d3e:	d102      	bne.n	16d46 <trace_write+0x2e>
   16d40:	4b4b      	ldr	r3, [pc, #300]	; (16e70 <trace_write+0x158>)
   16d42:	881c      	ldrh	r4, [r3, #0]
   16d44:	b2a4      	uxth	r4, r4
   16d46:	6838      	ldr	r0, [r7, #0]
   16d48:	f7fe fb8e 	bl	15468 <nrf_modem_os_sem_give>
   16d4c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   16d50:	6929      	ldr	r1, [r5, #16]
   16d52:	eba8 080a 	sub.w	r8, r8, sl
   16d56:	eba1 030a 	sub.w	r3, r1, sl
   16d5a:	b29b      	uxth	r3, r3
   16d5c:	fa14 f488 	uxtah	r4, r4, r8
   16d60:	fbb4 f2f3 	udiv	r2, r4, r3
   16d64:	fb03 4412 	mls	r4, r3, r2, r4
   16d68:	686a      	ldr	r2, [r5, #4]
   16d6a:	eba2 020a 	sub.w	r2, r2, sl
   16d6e:	fa13 f282 	uxtah	r2, r3, r2
   16d72:	1b12      	subs	r2, r2, r4
   16d74:	fb92 f0f3 	sdiv	r0, r2, r3
   16d78:	fb03 2210 	mls	r2, r3, r0, r2
   16d7c:	fa1f f982 	uxth.w	r9, r2
   16d80:	fa14 f282 	uxtah	r2, r4, r2
   16d84:	4293      	cmp	r3, r2
   16d86:	44a2      	add	sl, r4
   16d88:	da22      	bge.n	16dd0 <trace_write+0xb8>
   16d8a:	eba1 030a 	sub.w	r3, r1, sl
   16d8e:	b29b      	uxth	r3, r3
   16d90:	eba9 0403 	sub.w	r4, r9, r3
   16d94:	4699      	mov	r9, r3
   16d96:	b2a4      	uxth	r4, r4
   16d98:	f1b9 0f00 	cmp.w	r9, #0
   16d9c:	d064      	beq.n	16e68 <trace_write+0x150>
   16d9e:	2005      	movs	r0, #5
   16da0:	f7fe fbda 	bl	15558 <nrf_modem_os_alloc>
   16da4:	4680      	mov	r8, r0
   16da6:	2800      	cmp	r0, #0
   16da8:	d05e      	beq.n	16e68 <trace_write+0x150>
   16daa:	b19c      	cbz	r4, 16dd4 <trace_write+0xbc>
   16dac:	2005      	movs	r0, #5
   16dae:	f7fe fbd3 	bl	15558 <nrf_modem_os_alloc>
   16db2:	4606      	mov	r6, r0
   16db4:	b970      	cbnz	r0, 16dd4 <trace_write+0xbc>
   16db6:	4640      	mov	r0, r8
   16db8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dbc:	f7fe bbd4 	b.w	15568 <nrf_modem_os_free>
   16dc0:	4b2c      	ldr	r3, [pc, #176]	; (16e74 <trace_write+0x15c>)
   16dc2:	e7be      	b.n	16d42 <trace_write+0x2a>
   16dc4:	4b2c      	ldr	r3, [pc, #176]	; (16e78 <trace_write+0x160>)
   16dc6:	e7bc      	b.n	16d42 <trace_write+0x2a>
   16dc8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dcc:	f7fe bbb4 	b.w	15538 <nrf_modem_os_trace_irq_set>
   16dd0:	2400      	movs	r4, #0
   16dd2:	e7e1      	b.n	16d98 <trace_write+0x80>
   16dd4:	2100      	movs	r1, #0
   16dd6:	6838      	ldr	r0, [r7, #0]
   16dd8:	f7fe fb64 	bl	154a4 <nrf_modem_os_sem_take>
   16ddc:	b140      	cbz	r0, 16df0 <trace_write+0xd8>
   16dde:	f7fe fbab 	bl	15538 <nrf_modem_os_trace_irq_set>
   16de2:	4640      	mov	r0, r8
   16de4:	f7fe fbc0 	bl	15568 <nrf_modem_os_free>
   16de8:	2c00      	cmp	r4, #0
   16dea:	d03d      	beq.n	16e68 <trace_write+0x150>
   16dec:	4630      	mov	r0, r6
   16dee:	e7e3      	b.n	16db8 <trace_write+0xa0>
   16df0:	782b      	ldrb	r3, [r5, #0]
   16df2:	2b62      	cmp	r3, #98	; 0x62
   16df4:	d034      	beq.n	16e60 <trace_write+0x148>
   16df6:	2b63      	cmp	r3, #99	; 0x63
   16df8:	d034      	beq.n	16e64 <trace_write+0x14c>
   16dfa:	2b61      	cmp	r3, #97	; 0x61
   16dfc:	d107      	bne.n	16e0e <trace_write+0xf6>
   16dfe:	4a1c      	ldr	r2, [pc, #112]	; (16e70 <trace_write+0x158>)
   16e00:	8813      	ldrh	r3, [r2, #0]
   16e02:	eb04 0109 	add.w	r1, r4, r9
   16e06:	fa11 f383 	uxtah	r3, r1, r3
   16e0a:	b29b      	uxth	r3, r3
   16e0c:	8013      	strh	r3, [r2, #0]
   16e0e:	6838      	ldr	r0, [r7, #0]
   16e10:	f06f 0b10 	mvn.w	fp, #16
   16e14:	f06f 0741 	mvn.w	r7, #65	; 0x41
   16e18:	f7fe fb26 	bl	15468 <nrf_modem_os_sem_give>
   16e1c:	f888 b000 	strb.w	fp, [r8]
   16e20:	f888 7001 	strb.w	r7, [r8, #1]
   16e24:	782b      	ldrb	r3, [r5, #0]
   16e26:	2105      	movs	r1, #5
   16e28:	4640      	mov	r0, r8
   16e2a:	f888 3004 	strb.w	r3, [r8, #4]
   16e2e:	f8a8 9002 	strh.w	r9, [r8, #2]
   16e32:	f004 fe48 	bl	1bac6 <nrf_modem_os_trace_put>
   16e36:	4649      	mov	r1, r9
   16e38:	4650      	mov	r0, sl
   16e3a:	f004 fe44 	bl	1bac6 <nrf_modem_os_trace_put>
   16e3e:	b19c      	cbz	r4, 16e68 <trace_write+0x150>
   16e40:	f886 b000 	strb.w	fp, [r6]
   16e44:	7077      	strb	r7, [r6, #1]
   16e46:	782b      	ldrb	r3, [r5, #0]
   16e48:	2105      	movs	r1, #5
   16e4a:	4630      	mov	r0, r6
   16e4c:	7133      	strb	r3, [r6, #4]
   16e4e:	8074      	strh	r4, [r6, #2]
   16e50:	f004 fe39 	bl	1bac6 <nrf_modem_os_trace_put>
   16e54:	4621      	mov	r1, r4
   16e56:	68e8      	ldr	r0, [r5, #12]
   16e58:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e5c:	f004 be33 	b.w	1bac6 <nrf_modem_os_trace_put>
   16e60:	4a04      	ldr	r2, [pc, #16]	; (16e74 <trace_write+0x15c>)
   16e62:	e7cd      	b.n	16e00 <trace_write+0xe8>
   16e64:	4a04      	ldr	r2, [pc, #16]	; (16e78 <trace_write+0x160>)
   16e66:	e7cb      	b.n	16e00 <trace_write+0xe8>
   16e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e6c:	2000d338 	.word	0x2000d338
   16e70:	2000d5ca 	.word	0x2000d5ca
   16e74:	2000d5c6 	.word	0x2000d5c6
   16e78:	2000d5c8 	.word	0x2000d5c8

00016e7c <ipc_trace_init>:
   16e7c:	2300      	movs	r3, #0
   16e7e:	4a08      	ldr	r2, [pc, #32]	; (16ea0 <ipc_trace_init+0x24>)
   16e80:	b510      	push	{r4, lr}
   16e82:	8013      	strh	r3, [r2, #0]
   16e84:	4a07      	ldr	r2, [pc, #28]	; (16ea4 <ipc_trace_init+0x28>)
   16e86:	4604      	mov	r4, r0
   16e88:	8013      	strh	r3, [r2, #0]
   16e8a:	4a07      	ldr	r2, [pc, #28]	; (16ea8 <ipc_trace_init+0x2c>)
   16e8c:	4807      	ldr	r0, [pc, #28]	; (16eac <ipc_trace_init+0x30>)
   16e8e:	8013      	strh	r3, [r2, #0]
   16e90:	2201      	movs	r2, #1
   16e92:	4611      	mov	r1, r2
   16e94:	f7fe fab8 	bl	15408 <nrf_modem_os_sem_init>
   16e98:	4b05      	ldr	r3, [pc, #20]	; (16eb0 <ipc_trace_init+0x34>)
   16e9a:	601c      	str	r4, [r3, #0]
   16e9c:	bd10      	pop	{r4, pc}
   16e9e:	bf00      	nop
   16ea0:	2000d5ca 	.word	0x2000d5ca
   16ea4:	2000d5c6 	.word	0x2000d5c6
   16ea8:	2000d5c8 	.word	0x2000d5c8
   16eac:	2000d338 	.word	0x2000d338
   16eb0:	2000d334 	.word	0x2000d334

00016eb4 <nrf_modem_trace_irq_handler>:
   16eb4:	b508      	push	{r3, lr}
   16eb6:	4b10      	ldr	r3, [pc, #64]	; (16ef8 <nrf_modem_trace_irq_handler+0x44>)
   16eb8:	781b      	ldrb	r3, [r3, #0]
   16eba:	b90b      	cbnz	r3, 16ec0 <nrf_modem_trace_irq_handler+0xc>
   16ebc:	f7fe fb44 	bl	15548 <nrf_modem_os_trace_irq_clear>
   16ec0:	4b0e      	ldr	r3, [pc, #56]	; (16efc <nrf_modem_trace_irq_handler+0x48>)
   16ec2:	6818      	ldr	r0, [r3, #0]
   16ec4:	6842      	ldr	r2, [r0, #4]
   16ec6:	6883      	ldr	r3, [r0, #8]
   16ec8:	429a      	cmp	r2, r3
   16eca:	d001      	beq.n	16ed0 <nrf_modem_trace_irq_handler+0x1c>
   16ecc:	f7ff ff24 	bl	16d18 <trace_write>
   16ed0:	4b0b      	ldr	r3, [pc, #44]	; (16f00 <nrf_modem_trace_irq_handler+0x4c>)
   16ed2:	6818      	ldr	r0, [r3, #0]
   16ed4:	6882      	ldr	r2, [r0, #8]
   16ed6:	6843      	ldr	r3, [r0, #4]
   16ed8:	429a      	cmp	r2, r3
   16eda:	d001      	beq.n	16ee0 <nrf_modem_trace_irq_handler+0x2c>
   16edc:	f7ff ff1c 	bl	16d18 <trace_write>
   16ee0:	4b08      	ldr	r3, [pc, #32]	; (16f04 <nrf_modem_trace_irq_handler+0x50>)
   16ee2:	6818      	ldr	r0, [r3, #0]
   16ee4:	6882      	ldr	r2, [r0, #8]
   16ee6:	6843      	ldr	r3, [r0, #4]
   16ee8:	429a      	cmp	r2, r3
   16eea:	d003      	beq.n	16ef4 <nrf_modem_trace_irq_handler+0x40>
   16eec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16ef0:	f7ff bf12 	b.w	16d18 <trace_write>
   16ef4:	bd08      	pop	{r3, pc}
   16ef6:	bf00      	nop
   16ef8:	2000d9f1 	.word	0x2000d9f1
   16efc:	2000d330 	.word	0x2000d330
   16f00:	2000d328 	.word	0x2000d328
   16f04:	2000d32c 	.word	0x2000d32c

00016f08 <ipc_trace_handle>:
   16f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f0c:	4b43      	ldr	r3, [pc, #268]	; (1701c <ipc_trace_handle+0x114>)
   16f0e:	681b      	ldr	r3, [r3, #0]
   16f10:	6919      	ldr	r1, [r3, #16]
   16f12:	f8d3 a014 	ldr.w	sl, [r3, #20]
   16f16:	7c1a      	ldrb	r2, [r3, #16]
   16f18:	2200      	movs	r2, #0
   16f1a:	741a      	strb	r2, [r3, #16]
   16f1c:	7c58      	ldrb	r0, [r3, #17]
   16f1e:	745a      	strb	r2, [r3, #17]
   16f20:	7c98      	ldrb	r0, [r3, #18]
   16f22:	749a      	strb	r2, [r3, #18]
   16f24:	7cd8      	ldrb	r0, [r3, #19]
   16f26:	74da      	strb	r2, [r3, #19]
   16f28:	7d18      	ldrb	r0, [r3, #20]
   16f2a:	751a      	strb	r2, [r3, #20]
   16f2c:	7d58      	ldrb	r0, [r3, #21]
   16f2e:	755a      	strb	r2, [r3, #21]
   16f30:	7d98      	ldrb	r0, [r3, #22]
   16f32:	759a      	strb	r2, [r3, #22]
   16f34:	7dd8      	ldrb	r0, [r3, #23]
   16f36:	75da      	strb	r2, [r3, #23]
   16f38:	2900      	cmp	r1, #0
   16f3a:	d033      	beq.n	16fa4 <ipc_trace_handle+0x9c>
   16f3c:	3901      	subs	r1, #1
   16f3e:	2903      	cmp	r1, #3
   16f40:	d830      	bhi.n	16fa4 <ipc_trace_handle+0x9c>
   16f42:	e8df f001 	tbb	[pc, r1]
   16f46:	6502      	.short	0x6502
   16f48:	534c      	.short	0x534c
   16f4a:	4a35      	ldr	r2, [pc, #212]	; (17020 <ipc_trace_handle+0x118>)
   16f4c:	7811      	ldrb	r1, [r2, #0]
   16f4e:	b109      	cbz	r1, 16f54 <ipc_trace_handle+0x4c>
   16f50:	2100      	movs	r1, #0
   16f52:	7011      	strb	r1, [r2, #0]
   16f54:	2200      	movs	r2, #0
   16f56:	4691      	mov	r9, r2
   16f58:	4617      	mov	r7, r2
   16f5a:	4614      	mov	r4, r2
   16f5c:	4d31      	ldr	r5, [pc, #196]	; (17024 <ipc_trace_handle+0x11c>)
   16f5e:	4932      	ldr	r1, [pc, #200]	; (17028 <ipc_trace_handle+0x120>)
   16f60:	4832      	ldr	r0, [pc, #200]	; (1702c <ipc_trace_handle+0x124>)
   16f62:	f8d5 e000 	ldr.w	lr, [r5]
   16f66:	f8d1 8000 	ldr.w	r8, [r1]
   16f6a:	6806      	ldr	r6, [r0, #0]
   16f6c:	f8da b008 	ldr.w	fp, [sl, #8]
   16f70:	9501      	str	r5, [sp, #4]
   16f72:	45a3      	cmp	fp, r4
   16f74:	d119      	bne.n	16faa <ipc_trace_handle+0xa2>
   16f76:	b107      	cbz	r7, 16f7a <ipc_trace_handle+0x72>
   16f78:	6006      	str	r6, [r0, #0]
   16f7a:	f1b9 0f00 	cmp.w	r9, #0
   16f7e:	d001      	beq.n	16f84 <ipc_trace_handle+0x7c>
   16f80:	f8c1 8000 	str.w	r8, [r1]
   16f84:	b112      	cbz	r2, 16f8c <ipc_trace_handle+0x84>
   16f86:	9a01      	ldr	r2, [sp, #4]
   16f88:	f8c2 e000 	str.w	lr, [r2]
   16f8c:	7a1a      	ldrb	r2, [r3, #8]
   16f8e:	2101      	movs	r1, #1
   16f90:	2200      	movs	r2, #0
   16f92:	7219      	strb	r1, [r3, #8]
   16f94:	7a59      	ldrb	r1, [r3, #9]
   16f96:	725a      	strb	r2, [r3, #9]
   16f98:	7a99      	ldrb	r1, [r3, #10]
   16f9a:	729a      	strb	r2, [r3, #10]
   16f9c:	7ada      	ldrb	r2, [r3, #11]
   16f9e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   16fa2:	72da      	strb	r2, [r3, #11]
   16fa4:	b003      	add	sp, #12
   16fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16faa:	1ca5      	adds	r5, r4, #2
   16fac:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   16fb0:	686d      	ldr	r5, [r5, #4]
   16fb2:	f895 c000 	ldrb.w	ip, [r5]
   16fb6:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   16fba:	d009      	beq.n	16fd0 <ipc_trace_handle+0xc8>
   16fbc:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   16fc0:	d00a      	beq.n	16fd8 <ipc_trace_handle+0xd0>
   16fc2:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   16fc6:	bf04      	itt	eq
   16fc8:	462e      	moveq	r6, r5
   16fca:	2701      	moveq	r7, #1
   16fcc:	3401      	adds	r4, #1
   16fce:	e7d0      	b.n	16f72 <ipc_trace_handle+0x6a>
   16fd0:	46a8      	mov	r8, r5
   16fd2:	f04f 0901 	mov.w	r9, #1
   16fd6:	e7f9      	b.n	16fcc <ipc_trace_handle+0xc4>
   16fd8:	46ae      	mov	lr, r5
   16fda:	2201      	movs	r2, #1
   16fdc:	e7f6      	b.n	16fcc <ipc_trace_handle+0xc4>
   16fde:	2101      	movs	r1, #1
   16fe0:	4a0f      	ldr	r2, [pc, #60]	; (17020 <ipc_trace_handle+0x118>)
   16fe2:	7011      	strb	r1, [r2, #0]
   16fe4:	7a1a      	ldrb	r2, [r3, #8]
   16fe6:	2103      	movs	r1, #3
   16fe8:	2200      	movs	r2, #0
   16fea:	e7d2      	b.n	16f92 <ipc_trace_handle+0x8a>
   16fec:	7a19      	ldrb	r1, [r3, #8]
   16fee:	2104      	movs	r1, #4
   16ff0:	7219      	strb	r1, [r3, #8]
   16ff2:	7a59      	ldrb	r1, [r3, #9]
   16ff4:	725a      	strb	r2, [r3, #9]
   16ff6:	7a99      	ldrb	r1, [r3, #10]
   16ff8:	729a      	strb	r2, [r3, #10]
   16ffa:	7ad9      	ldrb	r1, [r3, #11]
   16ffc:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   17000:	72d9      	strb	r1, [r3, #11]
   17002:	4b07      	ldr	r3, [pc, #28]	; (17020 <ipc_trace_handle+0x118>)
   17004:	701a      	strb	r2, [r3, #0]
   17006:	b003      	add	sp, #12
   17008:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1700c:	f7ff bf52 	b.w	16eb4 <nrf_modem_trace_irq_handler>
   17010:	b003      	add	sp, #12
   17012:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17016:	f7fe ba8f 	b.w	15538 <nrf_modem_os_trace_irq_set>
   1701a:	bf00      	nop
   1701c:	2000d334 	.word	0x2000d334
   17020:	2000d9f1 	.word	0x2000d9f1
   17024:	2000d32c 	.word	0x2000d32c
   17028:	2000d328 	.word	0x2000d328
   1702c:	2000d330 	.word	0x2000d330

00017030 <rpc_trace_coredump_in_progress>:
   17030:	4b01      	ldr	r3, [pc, #4]	; (17038 <rpc_trace_coredump_in_progress+0x8>)
   17032:	7818      	ldrb	r0, [r3, #0]
   17034:	4770      	bx	lr
   17036:	bf00      	nop
   17038:	2000d9f1 	.word	0x2000d9f1

0001703c <handle_modem_rpc_msg>:
   1703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17040:	4606      	mov	r6, r0
   17042:	460f      	mov	r7, r1
   17044:	2500      	movs	r5, #0
   17046:	f8df 8074 	ldr.w	r8, [pc, #116]	; 170bc <handle_modem_rpc_msg+0x80>
   1704a:	6833      	ldr	r3, [r6, #0]
   1704c:	42ab      	cmp	r3, r5
   1704e:	d801      	bhi.n	17054 <handle_modem_rpc_msg+0x18>
   17050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17054:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   17058:	68a3      	ldr	r3, [r4, #8]
   1705a:	b1fb      	cbz	r3, 1709c <handle_modem_rpc_msg+0x60>
   1705c:	6863      	ldr	r3, [r4, #4]
   1705e:	b2db      	uxtb	r3, r3
   17060:	2b01      	cmp	r3, #1
   17062:	d11b      	bne.n	1709c <handle_modem_rpc_msg+0x60>
   17064:	6862      	ldr	r2, [r4, #4]
   17066:	f8b8 3000 	ldrh.w	r3, [r8]
   1706a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1706e:	d115      	bne.n	1709c <handle_modem_rpc_msg+0x60>
   17070:	2f02      	cmp	r7, #2
   17072:	68a0      	ldr	r0, [r4, #8]
   17074:	d114      	bne.n	170a0 <handle_modem_rpc_msg+0x64>
   17076:	f7ff fe2d 	bl	16cd4 <rpc_handle_data_message>
   1707a:	2802      	cmp	r0, #2
   1707c:	d00e      	beq.n	1709c <handle_modem_rpc_msg+0x60>
   1707e:	2801      	cmp	r0, #1
   17080:	d113      	bne.n	170aa <handle_modem_rpc_msg+0x6e>
   17082:	6863      	ldr	r3, [r4, #4]
   17084:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17088:	f043 0302 	orr.w	r3, r3, #2
   1708c:	6063      	str	r3, [r4, #4]
   1708e:	f8b8 3000 	ldrh.w	r3, [r8]
   17092:	3301      	adds	r3, #1
   17094:	f8a8 3000 	strh.w	r3, [r8]
   17098:	f7fe fa3e 	bl	15518 <nrf_modem_os_application_irq_set>
   1709c:	3501      	adds	r5, #1
   1709e:	e7d4      	b.n	1704a <handle_modem_rpc_msg+0xe>
   170a0:	6801      	ldr	r1, [r0, #0]
   170a2:	0c09      	lsrs	r1, r1, #16
   170a4:	f004 fddd 	bl	1bc62 <rpc_handle_ctrl_message>
   170a8:	e7e7      	b.n	1707a <handle_modem_rpc_msg+0x3e>
   170aa:	2800      	cmp	r0, #0
   170ac:	d1ef      	bne.n	1708e <handle_modem_rpc_msg+0x52>
   170ae:	6863      	ldr	r3, [r4, #4]
   170b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   170b4:	f043 0303 	orr.w	r3, r3, #3
   170b8:	e7e8      	b.n	1708c <handle_modem_rpc_msg+0x50>
   170ba:	bf00      	nop
   170bc:	2000d5cc 	.word	0x2000d5cc

000170c0 <rpc_transport_ipc_msg_alloc>:
   170c0:	b570      	push	{r4, r5, r6, lr}
   170c2:	4616      	mov	r6, r2
   170c4:	2400      	movs	r4, #0
   170c6:	6803      	ldr	r3, [r0, #0]
   170c8:	42a3      	cmp	r3, r4
   170ca:	d101      	bne.n	170d0 <rpc_transport_ipc_msg_alloc+0x10>
   170cc:	2300      	movs	r3, #0
   170ce:	e01c      	b.n	1710a <rpc_transport_ipc_msg_alloc+0x4a>
   170d0:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   170d4:	6855      	ldr	r5, [r2, #4]
   170d6:	b2ed      	uxtb	r5, r5
   170d8:	2d03      	cmp	r5, #3
   170da:	d118      	bne.n	1710e <rpc_transport_ipc_msg_alloc+0x4e>
   170dc:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   170e0:	6093      	str	r3, [r2, #8]
   170e2:	6851      	ldr	r1, [r2, #4]
   170e4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   170e8:	6051      	str	r1, [r2, #4]
   170ea:	490c      	ldr	r1, [pc, #48]	; (1711c <rpc_transport_ipc_msg_alloc+0x5c>)
   170ec:	8808      	ldrh	r0, [r1, #0]
   170ee:	1c44      	adds	r4, r0, #1
   170f0:	800c      	strh	r4, [r1, #0]
   170f2:	6851      	ldr	r1, [r2, #4]
   170f4:	b289      	uxth	r1, r1
   170f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   170fa:	6051      	str	r1, [r2, #4]
   170fc:	4618      	mov	r0, r3
   170fe:	2240      	movs	r2, #64	; 0x40
   17100:	2100      	movs	r1, #0
   17102:	f004 fa07 	bl	1b514 <memset>
   17106:	4603      	mov	r3, r0
   17108:	6046      	str	r6, [r0, #4]
   1710a:	4618      	mov	r0, r3
   1710c:	bd70      	pop	{r4, r5, r6, pc}
   1710e:	b915      	cbnz	r5, 17116 <rpc_transport_ipc_msg_alloc+0x56>
   17110:	6895      	ldr	r5, [r2, #8]
   17112:	2d00      	cmp	r5, #0
   17114:	d0e2      	beq.n	170dc <rpc_transport_ipc_msg_alloc+0x1c>
   17116:	3401      	adds	r4, #1
   17118:	e7d6      	b.n	170c8 <rpc_transport_ipc_msg_alloc+0x8>
   1711a:	bf00      	nop
   1711c:	2000d5ce 	.word	0x2000d5ce

00017120 <rpc_transport_ipc_data_msg_send>:
   17120:	b508      	push	{r3, lr}
   17122:	4b0b      	ldr	r3, [pc, #44]	; (17150 <rpc_transport_ipc_data_msg_send+0x30>)
   17124:	681b      	ldr	r3, [r3, #0]
   17126:	1ac0      	subs	r0, r0, r3
   17128:	4b0a      	ldr	r3, [pc, #40]	; (17154 <rpc_transport_ipc_data_msg_send+0x34>)
   1712a:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1712e:	681b      	ldr	r3, [r3, #0]
   17130:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   17134:	6843      	ldr	r3, [r0, #4]
   17136:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1713a:	f043 0301 	orr.w	r3, r3, #1
   1713e:	6043      	str	r3, [r0, #4]
   17140:	2003      	movs	r0, #3
   17142:	f004 fcb1 	bl	1baa8 <nrf_modem_os_busywait>
   17146:	2201      	movs	r2, #1
   17148:	4b03      	ldr	r3, [pc, #12]	; (17158 <rpc_transport_ipc_data_msg_send+0x38>)
   1714a:	601a      	str	r2, [r3, #0]
   1714c:	bd08      	pop	{r3, pc}
   1714e:	bf00      	nop
   17150:	2000d354 	.word	0x2000d354
   17154:	2000d358 	.word	0x2000d358
   17158:	4002a00c 	.word	0x4002a00c

0001715c <rpc_transport_ipc_ctrl_msg_send>:
   1715c:	b508      	push	{r3, lr}
   1715e:	4b0b      	ldr	r3, [pc, #44]	; (1718c <rpc_transport_ipc_ctrl_msg_send+0x30>)
   17160:	681b      	ldr	r3, [r3, #0]
   17162:	1ac0      	subs	r0, r0, r3
   17164:	4b0a      	ldr	r3, [pc, #40]	; (17190 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   17166:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1716a:	681b      	ldr	r3, [r3, #0]
   1716c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   17170:	6843      	ldr	r3, [r0, #4]
   17172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17176:	f043 0301 	orr.w	r3, r3, #1
   1717a:	6043      	str	r3, [r0, #4]
   1717c:	2003      	movs	r0, #3
   1717e:	f004 fc93 	bl	1baa8 <nrf_modem_os_busywait>
   17182:	2201      	movs	r2, #1
   17184:	4b03      	ldr	r3, [pc, #12]	; (17194 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   17186:	601a      	str	r2, [r3, #0]
   17188:	bd08      	pop	{r3, pc}
   1718a:	bf00      	nop
   1718c:	2000d34c 	.word	0x2000d34c
   17190:	2000d350 	.word	0x2000d350
   17194:	4002a004 	.word	0x4002a004

00017198 <rpc_transport_ipc_data_msg_alloc>:
   17198:	4b05      	ldr	r3, [pc, #20]	; (171b0 <rpc_transport_ipc_data_msg_alloc+0x18>)
   1719a:	781b      	ldrb	r3, [r3, #0]
   1719c:	b933      	cbnz	r3, 171ac <rpc_transport_ipc_data_msg_alloc+0x14>
   1719e:	4b05      	ldr	r3, [pc, #20]	; (171b4 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   171a0:	2202      	movs	r2, #2
   171a2:	6819      	ldr	r1, [r3, #0]
   171a4:	4b04      	ldr	r3, [pc, #16]	; (171b8 <rpc_transport_ipc_data_msg_alloc+0x20>)
   171a6:	6818      	ldr	r0, [r3, #0]
   171a8:	f7ff bf8a 	b.w	170c0 <rpc_transport_ipc_msg_alloc>
   171ac:	2000      	movs	r0, #0
   171ae:	4770      	bx	lr
   171b0:	2000d9f3 	.word	0x2000d9f3
   171b4:	2000d354 	.word	0x2000d354
   171b8:	2000d358 	.word	0x2000d358

000171bc <rpc_transport_ipc_ctrl_msg_alloc>:
   171bc:	230a      	movs	r3, #10
   171be:	b537      	push	{r0, r1, r2, r4, r5, lr}
   171c0:	4c0c      	ldr	r4, [pc, #48]	; (171f4 <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   171c2:	4d0d      	ldr	r5, [pc, #52]	; (171f8 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   171c4:	9301      	str	r3, [sp, #4]
   171c6:	2201      	movs	r2, #1
   171c8:	6821      	ldr	r1, [r4, #0]
   171ca:	6828      	ldr	r0, [r5, #0]
   171cc:	f7ff ff78 	bl	170c0 <rpc_transport_ipc_msg_alloc>
   171d0:	b968      	cbnz	r0, 171ee <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   171d2:	f004 fc6b 	bl	1baac <nrf_modem_os_is_in_isr>
   171d6:	b918      	cbnz	r0, 171e0 <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   171d8:	a901      	add	r1, sp, #4
   171da:	f7fe f85d 	bl	15298 <nrf_modem_os_timedwait>
   171de:	e7f2      	b.n	171c6 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   171e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   171e4:	9b01      	ldr	r3, [sp, #4]
   171e6:	4358      	muls	r0, r3
   171e8:	f004 fc5e 	bl	1baa8 <nrf_modem_os_busywait>
   171ec:	e7eb      	b.n	171c6 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   171ee:	b003      	add	sp, #12
   171f0:	bd30      	pop	{r4, r5, pc}
   171f2:	bf00      	nop
   171f4:	2000d34c 	.word	0x2000d34c
   171f8:	2000d350 	.word	0x2000d350

000171fc <rpc_transport_ipc_data_alloc>:
   171fc:	4b03      	ldr	r3, [pc, #12]	; (1720c <rpc_transport_ipc_data_alloc+0x10>)
   171fe:	781b      	ldrb	r3, [r3, #0]
   17200:	b90b      	cbnz	r3, 17206 <rpc_transport_ipc_data_alloc+0xa>
   17202:	f7fe b9b7 	b.w	15574 <nrf_modem_os_shm_tx_alloc>
   17206:	2000      	movs	r0, #0
   17208:	4770      	bx	lr
   1720a:	bf00      	nop
   1720c:	2000d9f3 	.word	0x2000d9f3

00017210 <nrf_modem_application_irq_handler>:
   17210:	b510      	push	{r4, lr}
   17212:	4c06      	ldr	r4, [pc, #24]	; (1722c <nrf_modem_application_irq_handler+0x1c>)
   17214:	f7fe f988 	bl	15528 <nrf_modem_os_application_irq_clear>
   17218:	6820      	ldr	r0, [r4, #0]
   1721a:	2101      	movs	r1, #1
   1721c:	f7ff ff0e 	bl	1703c <handle_modem_rpc_msg>
   17220:	6860      	ldr	r0, [r4, #4]
   17222:	2102      	movs	r1, #2
   17224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17228:	f7ff bf08 	b.w	1703c <handle_modem_rpc_msg>
   1722c:	2000d340 	.word	0x2000d340

00017230 <rpc_transport_ipc_msg_free>:
   17230:	2300      	movs	r3, #0
   17232:	4911      	ldr	r1, [pc, #68]	; (17278 <rpc_transport_ipc_msg_free+0x48>)
   17234:	b530      	push	{r4, r5, lr}
   17236:	680a      	ldr	r2, [r1, #0]
   17238:	6814      	ldr	r4, [r2, #0]
   1723a:	42a3      	cmp	r3, r4
   1723c:	d10b      	bne.n	17256 <rpc_transport_ipc_msg_free+0x26>
   1723e:	2300      	movs	r3, #0
   17240:	684a      	ldr	r2, [r1, #4]
   17242:	6811      	ldr	r1, [r2, #0]
   17244:	428b      	cmp	r3, r1
   17246:	d015      	beq.n	17274 <rpc_transport_ipc_msg_free+0x44>
   17248:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   1724c:	68a4      	ldr	r4, [r4, #8]
   1724e:	42a0      	cmp	r0, r4
   17250:	d008      	beq.n	17264 <rpc_transport_ipc_msg_free+0x34>
   17252:	3301      	adds	r3, #1
   17254:	e7f6      	b.n	17244 <rpc_transport_ipc_msg_free+0x14>
   17256:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   1725a:	68ad      	ldr	r5, [r5, #8]
   1725c:	42a8      	cmp	r0, r5
   1725e:	d001      	beq.n	17264 <rpc_transport_ipc_msg_free+0x34>
   17260:	3301      	adds	r3, #1
   17262:	e7ea      	b.n	1723a <rpc_transport_ipc_msg_free+0xa>
   17264:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   17268:	685a      	ldr	r2, [r3, #4]
   1726a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1726e:	f042 0203 	orr.w	r2, r2, #3
   17272:	605a      	str	r2, [r3, #4]
   17274:	bd30      	pop	{r4, r5, pc}
   17276:	bf00      	nop
   17278:	2000d340 	.word	0x2000d340

0001727c <rpc_transport_ipc_init>:
   1727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17280:	2200      	movs	r2, #0
   17282:	b095      	sub	sp, #84	; 0x54
   17284:	4605      	mov	r5, r0
   17286:	494d      	ldr	r1, [pc, #308]	; (173bc <rpc_transport_ipc_init+0x140>)
   17288:	7900      	ldrb	r0, [r0, #4]
   1728a:	f7ff fa25 	bl	166d8 <nrfx_ipc_init>
   1728e:	2238      	movs	r2, #56	; 0x38
   17290:	2100      	movs	r1, #0
   17292:	a803      	add	r0, sp, #12
   17294:	f004 f93e 	bl	1b514 <memset>
   17298:	2302      	movs	r3, #2
   1729a:	9304      	str	r3, [sp, #16]
   1729c:	2308      	movs	r3, #8
   1729e:	9306      	str	r3, [sp, #24]
   172a0:	2320      	movs	r3, #32
   172a2:	9308      	str	r3, [sp, #32]
   172a4:	2301      	movs	r3, #1
   172a6:	930b      	str	r3, [sp, #44]	; 0x2c
   172a8:	2304      	movs	r3, #4
   172aa:	930d      	str	r3, [sp, #52]	; 0x34
   172ac:	2310      	movs	r3, #16
   172ae:	f04f 0c40 	mov.w	ip, #64	; 0x40
   172b2:	930f      	str	r3, [sp, #60]	; 0x3c
   172b4:	2380      	movs	r3, #128	; 0x80
   172b6:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   172ba:	23d5      	movs	r3, #213	; 0xd5
   172bc:	a803      	add	r0, sp, #12
   172be:	9313      	str	r3, [sp, #76]	; 0x4c
   172c0:	f7ff fa30 	bl	16724 <nrfx_ipc_config_load>
   172c4:	682b      	ldr	r3, [r5, #0]
   172c6:	2100      	movs	r1, #0
   172c8:	685a      	ldr	r2, [r3, #4]
   172ca:	6818      	ldr	r0, [r3, #0]
   172cc:	f004 f922 	bl	1b514 <memset>
   172d0:	682a      	ldr	r2, [r5, #0]
   172d2:	6814      	ldr	r4, [r2, #0]
   172d4:	69d3      	ldr	r3, [r2, #28]
   172d6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   172da:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   172de:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   172e2:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   172e6:	f104 0920 	add.w	r9, r4, #32
   172ea:	2b00      	cmp	r3, #0
   172ec:	d060      	beq.n	173b0 <rpc_transport_ipc_init+0x134>
   172ee:	f104 0840 	add.w	r8, r4, #64	; 0x40
   172f2:	4933      	ldr	r1, [pc, #204]	; (173c0 <rpc_transport_ipc_init+0x144>)
   172f4:	f8c1 9000 	str.w	r9, [r1]
   172f8:	b13b      	cbz	r3, 1730a <rpc_transport_ipc_init+0x8e>
   172fa:	6992      	ldr	r2, [r2, #24]
   172fc:	4640      	mov	r0, r8
   172fe:	f8c8 2004 	str.w	r2, [r8, #4]
   17302:	f8c8 3000 	str.w	r3, [r8]
   17306:	f7ff fdb9 	bl	16e7c <ipc_trace_init>
   1730a:	6828      	ldr	r0, [r5, #0]
   1730c:	2300      	movs	r3, #0
   1730e:	6902      	ldr	r2, [r0, #16]
   17310:	2101      	movs	r1, #1
   17312:	6062      	str	r2, [r4, #4]
   17314:	6942      	ldr	r2, [r0, #20]
   17316:	70a1      	strb	r1, [r4, #2]
   17318:	60a2      	str	r2, [r4, #8]
   1731a:	4a2a      	ldr	r2, [pc, #168]	; (173c4 <rpc_transport_ipc_init+0x148>)
   1731c:	7023      	strb	r3, [r4, #0]
   1731e:	6017      	str	r7, [r2, #0]
   17320:	4a29      	ldr	r2, [pc, #164]	; (173c8 <rpc_transport_ipc_init+0x14c>)
   17322:	7063      	strb	r3, [r4, #1]
   17324:	6016      	str	r6, [r2, #0]
   17326:	2208      	movs	r2, #8
   17328:	70e3      	strb	r3, [r4, #3]
   1732a:	60e6      	str	r6, [r4, #12]
   1732c:	6127      	str	r7, [r4, #16]
   1732e:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   17332:	f8c4 9014 	str.w	r9, [r4, #20]
   17336:	f8c4 8018 	str.w	r8, [r4, #24]
   1733a:	707b      	strb	r3, [r7, #1]
   1733c:	70bb      	strb	r3, [r7, #2]
   1733e:	70fb      	strb	r3, [r7, #3]
   17340:	2714      	movs	r7, #20
   17342:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   17346:	4a21      	ldr	r2, [pc, #132]	; (173cc <rpc_transport_ipc_init+0x150>)
   17348:	4d21      	ldr	r5, [pc, #132]	; (173d0 <rpc_transport_ipc_init+0x154>)
   1734a:	f8c2 b000 	str.w	fp, [r2]
   1734e:	4a21      	ldr	r2, [pc, #132]	; (173d4 <rpc_transport_ipc_init+0x158>)
   17350:	7073      	strb	r3, [r6, #1]
   17352:	f8c2 a000 	str.w	sl, [r2]
   17356:	4a20      	ldr	r2, [pc, #128]	; (173d8 <rpc_transport_ipc_init+0x15c>)
   17358:	70b3      	strb	r3, [r6, #2]
   1735a:	70f3      	strb	r3, [r6, #3]
   1735c:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   17360:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   17364:	4c1d      	ldr	r4, [pc, #116]	; (173dc <rpc_transport_ipc_init+0x160>)
   17366:	7029      	strb	r1, [r5, #0]
   17368:	491d      	ldr	r1, [pc, #116]	; (173e0 <rpc_transport_ipc_init+0x164>)
   1736a:	6023      	str	r3, [r4, #0]
   1736c:	9302      	str	r3, [sp, #8]
   1736e:	600b      	str	r3, [r1, #0]
   17370:	680b      	ldr	r3, [r1, #0]
   17372:	4e1c      	ldr	r6, [pc, #112]	; (173e4 <rpc_transport_ipc_init+0x168>)
   17374:	9302      	str	r3, [sp, #8]
   17376:	9b02      	ldr	r3, [sp, #8]
   17378:	2000      	movs	r0, #0
   1737a:	a901      	add	r1, sp, #4
   1737c:	9701      	str	r7, [sp, #4]
   1737e:	f7fd ff8b 	bl	15298 <nrf_modem_os_timedwait>
   17382:	9b01      	ldr	r3, [sp, #4]
   17384:	3b14      	subs	r3, #20
   17386:	441e      	add	r6, r3
   17388:	782b      	ldrb	r3, [r5, #0]
   1738a:	2b01      	cmp	r3, #1
   1738c:	d104      	bne.n	17398 <rpc_transport_ipc_init+0x11c>
   1738e:	2e00      	cmp	r6, #0
   17390:	d1f2      	bne.n	17378 <rpc_transport_ipc_init+0xfc>
   17392:	f06f 0373 	mvn.w	r3, #115	; 0x73
   17396:	6023      	str	r3, [r4, #0]
   17398:	6824      	ldr	r4, [r4, #0]
   1739a:	b95c      	cbnz	r4, 173b4 <rpc_transport_ipc_init+0x138>
   1739c:	4b12      	ldr	r3, [pc, #72]	; (173e8 <rpc_transport_ipc_init+0x16c>)
   1739e:	701c      	strb	r4, [r3, #0]
   173a0:	4b12      	ldr	r3, [pc, #72]	; (173ec <rpc_transport_ipc_init+0x170>)
   173a2:	801c      	strh	r4, [r3, #0]
   173a4:	4b12      	ldr	r3, [pc, #72]	; (173f0 <rpc_transport_ipc_init+0x174>)
   173a6:	801c      	strh	r4, [r3, #0]
   173a8:	4620      	mov	r0, r4
   173aa:	b015      	add	sp, #84	; 0x54
   173ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173b0:	4698      	mov	r8, r3
   173b2:	e79e      	b.n	172f2 <rpc_transport_ipc_init+0x76>
   173b4:	f7ff f9f4 	bl	167a0 <nrfx_ipc_uninit>
   173b8:	e7f6      	b.n	173a8 <rpc_transport_ipc_init+0x12c>
   173ba:	bf00      	nop
   173bc:	000173f5 	.word	0x000173f5
   173c0:	2000d348 	.word	0x2000d348
   173c4:	2000d358 	.word	0x2000d358
   173c8:	2000d350 	.word	0x2000d350
   173cc:	2000d354 	.word	0x2000d354
   173d0:	2000d9f2 	.word	0x2000d9f2
   173d4:	2000d34c 	.word	0x2000d34c
   173d8:	4002a000 	.word	0x4002a000
   173dc:	2000d33c 	.word	0x2000d33c
   173e0:	40005610 	.word	0x40005610
   173e4:	000249f0 	.word	0x000249f0
   173e8:	2000d9f3 	.word	0x2000d9f3
   173ec:	2000d5ce 	.word	0x2000d5ce
   173f0:	2000d5cc 	.word	0x2000d5cc

000173f4 <ipc_irq_handler>:
   173f4:	b570      	push	{r4, r5, r6, lr}
   173f6:	4604      	mov	r4, r0
   173f8:	0620      	lsls	r0, r4, #24
   173fa:	d50c      	bpl.n	17416 <ipc_irq_handler+0x22>
   173fc:	f7ff fd84 	bl	16f08 <ipc_trace_handle>
   17400:	f7ff fe16 	bl	17030 <rpc_trace_coredump_in_progress>
   17404:	b138      	cbz	r0, 17416 <ipc_irq_handler+0x22>
   17406:	22e0      	movs	r2, #224	; 0xe0
   17408:	4b3e      	ldr	r3, [pc, #248]	; (17504 <ipc_irq_handler+0x110>)
   1740a:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   1740e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17412:	605a      	str	r2, [r3, #4]
   17414:	bd70      	pop	{r4, r5, r6, pc}
   17416:	07e1      	lsls	r1, r4, #31
   17418:	d548      	bpl.n	174ac <ipc_irq_handler+0xb8>
   1741a:	f248 0202 	movw	r2, #32770	; 0x8002
   1741e:	4b3a      	ldr	r3, [pc, #232]	; (17508 <ipc_irq_handler+0x114>)
   17420:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   17424:	4293      	cmp	r3, r2
   17426:	d035      	beq.n	17494 <ipc_irq_handler+0xa0>
   17428:	d81b      	bhi.n	17462 <ipc_irq_handler+0x6e>
   1742a:	f243 0232 	movw	r2, #12338	; 0x3032
   1742e:	4293      	cmp	r3, r2
   17430:	d036      	beq.n	174a0 <ipc_irq_handler+0xac>
   17432:	d80b      	bhi.n	1744c <ipc_irq_handler+0x58>
   17434:	3b01      	subs	r3, #1
   17436:	2b01      	cmp	r3, #1
   17438:	d8ec      	bhi.n	17414 <ipc_irq_handler+0x20>
   1743a:	2203      	movs	r2, #3
   1743c:	200e      	movs	r0, #14
   1743e:	4b33      	ldr	r3, [pc, #204]	; (1750c <ipc_irq_handler+0x118>)
   17440:	701a      	strb	r2, [r3, #0]
   17442:	4b33      	ldr	r3, [pc, #204]	; (17510 <ipc_irq_handler+0x11c>)
   17444:	6018      	str	r0, [r3, #0]
   17446:	f004 fcda 	bl	1bdfe <rpc_transport_ipc_fault_handler>
   1744a:	e7e3      	b.n	17414 <ipc_irq_handler+0x20>
   1744c:	f248 0201 	movw	r2, #32769	; 0x8001
   17450:	4293      	cmp	r3, r2
   17452:	d1df      	bne.n	17414 <ipc_irq_handler+0x20>
   17454:	2203      	movs	r2, #3
   17456:	4b2d      	ldr	r3, [pc, #180]	; (1750c <ipc_irq_handler+0x118>)
   17458:	701a      	strb	r2, [r3, #0]
   1745a:	2216      	movs	r2, #22
   1745c:	4b2c      	ldr	r3, [pc, #176]	; (17510 <ipc_irq_handler+0x11c>)
   1745e:	601a      	str	r2, [r3, #0]
   17460:	e7d8      	b.n	17414 <ipc_irq_handler+0x20>
   17462:	4a2c      	ldr	r2, [pc, #176]	; (17514 <ipc_irq_handler+0x120>)
   17464:	4293      	cmp	r3, r2
   17466:	d80c      	bhi.n	17482 <ipc_irq_handler+0x8e>
   17468:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1746c:	d80c      	bhi.n	17488 <ipc_irq_handler+0x94>
   1746e:	f248 0203 	movw	r2, #32771	; 0x8003
   17472:	4293      	cmp	r3, r2
   17474:	d1ce      	bne.n	17414 <ipc_irq_handler+0x20>
   17476:	2203      	movs	r2, #3
   17478:	4b24      	ldr	r3, [pc, #144]	; (1750c <ipc_irq_handler+0x118>)
   1747a:	701a      	strb	r2, [r3, #0]
   1747c:	220c      	movs	r2, #12
   1747e:	4b24      	ldr	r3, [pc, #144]	; (17510 <ipc_irq_handler+0x11c>)
   17480:	e7ed      	b.n	1745e <ipc_irq_handler+0x6a>
   17482:	4a25      	ldr	r2, [pc, #148]	; (17518 <ipc_irq_handler+0x124>)
   17484:	4293      	cmp	r3, r2
   17486:	d1c5      	bne.n	17414 <ipc_irq_handler+0x20>
   17488:	2103      	movs	r1, #3
   1748a:	4a20      	ldr	r2, [pc, #128]	; (1750c <ipc_irq_handler+0x118>)
   1748c:	7011      	strb	r1, [r2, #0]
   1748e:	4a20      	ldr	r2, [pc, #128]	; (17510 <ipc_irq_handler+0x11c>)
   17490:	6013      	str	r3, [r2, #0]
   17492:	e7bf      	b.n	17414 <ipc_irq_handler+0x20>
   17494:	2203      	movs	r2, #3
   17496:	4b1d      	ldr	r3, [pc, #116]	; (1750c <ipc_irq_handler+0x118>)
   17498:	701a      	strb	r2, [r3, #0]
   1749a:	225f      	movs	r2, #95	; 0x5f
   1749c:	4b1c      	ldr	r3, [pc, #112]	; (17510 <ipc_irq_handler+0x11c>)
   1749e:	e7de      	b.n	1745e <ipc_irq_handler+0x6a>
   174a0:	2203      	movs	r2, #3
   174a2:	4b1a      	ldr	r3, [pc, #104]	; (1750c <ipc_irq_handler+0x118>)
   174a4:	701a      	strb	r2, [r3, #0]
   174a6:	2205      	movs	r2, #5
   174a8:	4b19      	ldr	r3, [pc, #100]	; (17510 <ipc_irq_handler+0x11c>)
   174aa:	e7d8      	b.n	1745e <ipc_irq_handler+0x6a>
   174ac:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   174b0:	d003      	beq.n	174ba <ipc_irq_handler+0xc6>
   174b2:	2202      	movs	r2, #2
   174b4:	4b15      	ldr	r3, [pc, #84]	; (1750c <ipc_irq_handler+0x118>)
   174b6:	701a      	strb	r2, [r3, #0]
   174b8:	e7ac      	b.n	17414 <ipc_irq_handler+0x20>
   174ba:	0762      	lsls	r2, r4, #29
   174bc:	d505      	bpl.n	174ca <ipc_irq_handler+0xd6>
   174be:	4b13      	ldr	r3, [pc, #76]	; (1750c <ipc_irq_handler+0x118>)
   174c0:	781a      	ldrb	r2, [r3, #0]
   174c2:	461e      	mov	r6, r3
   174c4:	b93a      	cbnz	r2, 174d6 <ipc_irq_handler+0xe2>
   174c6:	f7fe f827 	bl	15518 <nrf_modem_os_application_irq_set>
   174ca:	06e3      	lsls	r3, r4, #27
   174cc:	d5a2      	bpl.n	17414 <ipc_irq_handler+0x20>
   174ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   174d2:	f7fe b821 	b.w	15518 <nrf_modem_os_application_irq_set>
   174d6:	2a01      	cmp	r2, #1
   174d8:	d1f7      	bne.n	174ca <ipc_irq_handler+0xd6>
   174da:	4a10      	ldr	r2, [pc, #64]	; (1751c <ipc_irq_handler+0x128>)
   174dc:	4810      	ldr	r0, [pc, #64]	; (17520 <ipc_irq_handler+0x12c>)
   174de:	6812      	ldr	r2, [r2, #0]
   174e0:	6891      	ldr	r1, [r2, #8]
   174e2:	6041      	str	r1, [r0, #4]
   174e4:	6852      	ldr	r2, [r2, #4]
   174e6:	6002      	str	r2, [r0, #0]
   174e8:	b121      	cbz	r1, 174f4 <ipc_irq_handler+0x100>
   174ea:	b11a      	cbz	r2, 174f4 <ipc_irq_handler+0x100>
   174ec:	6809      	ldr	r1, [r1, #0]
   174ee:	b109      	cbz	r1, 174f4 <ipc_irq_handler+0x100>
   174f0:	6812      	ldr	r2, [r2, #0]
   174f2:	b92a      	cbnz	r2, 17500 <ipc_irq_handler+0x10c>
   174f4:	2303      	movs	r3, #3
   174f6:	2205      	movs	r2, #5
   174f8:	7033      	strb	r3, [r6, #0]
   174fa:	4b05      	ldr	r3, [pc, #20]	; (17510 <ipc_irq_handler+0x11c>)
   174fc:	601a      	str	r2, [r3, #0]
   174fe:	e7e4      	b.n	174ca <ipc_irq_handler+0xd6>
   17500:	701d      	strb	r5, [r3, #0]
   17502:	e7e2      	b.n	174ca <ipc_irq_handler+0xd6>
   17504:	e000e100 	.word	0xe000e100
   17508:	4002a000 	.word	0x4002a000
   1750c:	2000d9f2 	.word	0x2000d9f2
   17510:	2000d33c 	.word	0x2000d33c
   17514:	04400004 	.word	0x04400004
   17518:	05500001 	.word	0x05500001
   1751c:	2000d348 	.word	0x2000d348
   17520:	2000d340 	.word	0x2000d340

00017524 <interface_init>:
   17524:	b508      	push	{r3, lr}
   17526:	f44f 72b0 	mov.w	r2, #352	; 0x160
   1752a:	2100      	movs	r1, #0
   1752c:	4802      	ldr	r0, [pc, #8]	; (17538 <interface_init+0x14>)
   1752e:	f003 fff1 	bl	1b514 <memset>
   17532:	2000      	movs	r0, #0
   17534:	bd08      	pop	{r3, pc}
   17536:	bf00      	nop
   17538:	2000d35c 	.word	0x2000d35c

0001753c <interface_socket_wait>:
   1753c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17540:	4615      	mov	r5, r2
   17542:	222c      	movs	r2, #44	; 0x2c
   17544:	4350      	muls	r0, r2
   17546:	461e      	mov	r6, r3
   17548:	4b0e      	ldr	r3, [pc, #56]	; (17584 <interface_socket_wait+0x48>)
   1754a:	460c      	mov	r4, r1
   1754c:	181f      	adds	r7, r3, r0
   1754e:	581b      	ldr	r3, [r3, r0]
   17550:	402b      	ands	r3, r5
   17552:	428b      	cmp	r3, r1
   17554:	d102      	bne.n	1755c <interface_socket_wait+0x20>
   17556:	2000      	movs	r0, #0
   17558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1755c:	687b      	ldr	r3, [r7, #4]
   1755e:	2b00      	cmp	r3, #0
   17560:	d1f9      	bne.n	17556 <interface_socket_wait+0x1a>
   17562:	46b8      	mov	r8, r7
   17564:	f8d8 3000 	ldr.w	r3, [r8]
   17568:	402b      	ands	r3, r5
   1756a:	42a3      	cmp	r3, r4
   1756c:	d0f3      	beq.n	17556 <interface_socket_wait+0x1a>
   1756e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   17572:	2b00      	cmp	r3, #0
   17574:	d1ef      	bne.n	17556 <interface_socket_wait+0x1a>
   17576:	4631      	mov	r1, r6
   17578:	4638      	mov	r0, r7
   1757a:	f7fd fe8d 	bl	15298 <nrf_modem_os_timedwait>
   1757e:	2800      	cmp	r0, #0
   17580:	d0f0      	beq.n	17564 <interface_socket_wait+0x28>
   17582:	e7e9      	b.n	17558 <interface_socket_wait+0x1c>
   17584:	2000d35c 	.word	0x2000d35c

00017588 <interface_sockets_aux_state_set>:
   17588:	4a0d      	ldr	r2, [pc, #52]	; (175c0 <interface_sockets_aux_state_set+0x38>)
   1758a:	b570      	push	{r4, r5, r6, lr}
   1758c:	2300      	movs	r3, #0
   1758e:	4611      	mov	r1, r2
   17590:	252c      	movs	r5, #44	; 0x2c
   17592:	fb05 f403 	mul.w	r4, r5, r3
   17596:	590c      	ldr	r4, [r1, r4]
   17598:	b15c      	cbz	r4, 175b2 <interface_sockets_aux_state_set+0x2a>
   1759a:	68d4      	ldr	r4, [r2, #12]
   1759c:	f024 0608 	bic.w	r6, r4, #8
   175a0:	2e02      	cmp	r6, #2
   175a2:	d001      	beq.n	175a8 <interface_sockets_aux_state_set+0x20>
   175a4:	2c05      	cmp	r4, #5
   175a6:	d104      	bne.n	175b2 <interface_sockets_aux_state_set+0x2a>
   175a8:	fb05 f603 	mul.w	r6, r5, r3
   175ac:	598c      	ldr	r4, [r1, r6]
   175ae:	4304      	orrs	r4, r0
   175b0:	518c      	str	r4, [r1, r6]
   175b2:	3301      	adds	r3, #1
   175b4:	2b08      	cmp	r3, #8
   175b6:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   175ba:	d1ea      	bne.n	17592 <interface_sockets_aux_state_set+0xa>
   175bc:	bd70      	pop	{r4, r5, r6, pc}
   175be:	bf00      	nop
   175c0:	2000d35c 	.word	0x2000d35c

000175c4 <interface_sockets_aux_state_clear>:
   175c4:	4a0d      	ldr	r2, [pc, #52]	; (175fc <interface_sockets_aux_state_clear+0x38>)
   175c6:	b570      	push	{r4, r5, r6, lr}
   175c8:	2300      	movs	r3, #0
   175ca:	4611      	mov	r1, r2
   175cc:	252c      	movs	r5, #44	; 0x2c
   175ce:	43c0      	mvns	r0, r0
   175d0:	fb05 f403 	mul.w	r4, r5, r3
   175d4:	590c      	ldr	r4, [r1, r4]
   175d6:	b15c      	cbz	r4, 175f0 <interface_sockets_aux_state_clear+0x2c>
   175d8:	68d4      	ldr	r4, [r2, #12]
   175da:	f024 0608 	bic.w	r6, r4, #8
   175de:	2e02      	cmp	r6, #2
   175e0:	d001      	beq.n	175e6 <interface_sockets_aux_state_clear+0x22>
   175e2:	2c05      	cmp	r4, #5
   175e4:	d104      	bne.n	175f0 <interface_sockets_aux_state_clear+0x2c>
   175e6:	fb05 f603 	mul.w	r6, r5, r3
   175ea:	598c      	ldr	r4, [r1, r6]
   175ec:	4004      	ands	r4, r0
   175ee:	518c      	str	r4, [r1, r6]
   175f0:	3301      	adds	r3, #1
   175f2:	2b08      	cmp	r3, #8
   175f4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   175f8:	d1ea      	bne.n	175d0 <interface_sockets_aux_state_clear+0xc>
   175fa:	bd70      	pop	{r4, r5, r6, pc}
   175fc:	2000d35c 	.word	0x2000d35c

00017600 <interface_from_internal_id_search>:
   17600:	4b0a      	ldr	r3, [pc, #40]	; (1762c <interface_from_internal_id_search+0x2c>)
   17602:	4602      	mov	r2, r0
   17604:	b530      	push	{r4, r5, lr}
   17606:	2000      	movs	r0, #0
   17608:	461c      	mov	r4, r3
   1760a:	212c      	movs	r1, #44	; 0x2c
   1760c:	fb01 f500 	mul.w	r5, r1, r0
   17610:	5965      	ldr	r5, [r4, r5]
   17612:	b115      	cbz	r5, 1761a <interface_from_internal_id_search+0x1a>
   17614:	699d      	ldr	r5, [r3, #24]
   17616:	4295      	cmp	r5, r2
   17618:	d006      	beq.n	17628 <interface_from_internal_id_search+0x28>
   1761a:	3001      	adds	r0, #1
   1761c:	2808      	cmp	r0, #8
   1761e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   17622:	d1f3      	bne.n	1760c <interface_from_internal_id_search+0xc>
   17624:	f04f 30ff 	mov.w	r0, #4294967295
   17628:	bd30      	pop	{r4, r5, pc}
   1762a:	bf00      	nop
   1762c:	2000d35c 	.word	0x2000d35c

00017630 <interface_socket_from_handle_get>:
   17630:	2807      	cmp	r0, #7
   17632:	d808      	bhi.n	17646 <interface_socket_from_handle_get+0x16>
   17634:	232c      	movs	r3, #44	; 0x2c
   17636:	4343      	muls	r3, r0
   17638:	4a04      	ldr	r2, [pc, #16]	; (1764c <interface_socket_from_handle_get+0x1c>)
   1763a:	18d0      	adds	r0, r2, r3
   1763c:	58d3      	ldr	r3, [r2, r3]
   1763e:	2b00      	cmp	r3, #0
   17640:	bf08      	it	eq
   17642:	2000      	moveq	r0, #0
   17644:	4770      	bx	lr
   17646:	2000      	movs	r0, #0
   17648:	4770      	bx	lr
   1764a:	bf00      	nop
   1764c:	2000d35c 	.word	0x2000d35c

00017650 <rpc_error_to_nrf_errno>:
   17650:	286a      	cmp	r0, #106	; 0x6a
   17652:	bf9a      	itte	ls
   17654:	4b01      	ldrls	r3, [pc, #4]	; (1765c <rpc_error_to_nrf_errno+0xc>)
   17656:	5c18      	ldrbls	r0, [r3, r0]
   17658:	205f      	movhi	r0, #95	; 0x5f
   1765a:	4770      	bx	lr
   1765c:	0001d717 	.word	0x0001d717

00017660 <rpc_error_to_nrf_gai_errno>:
   17660:	2805      	cmp	r0, #5
   17662:	d013      	beq.n	1768c <rpc_error_to_nrf_gai_errno+0x2c>
   17664:	d807      	bhi.n	17676 <rpc_error_to_nrf_gai_errno+0x16>
   17666:	b170      	cbz	r0, 17686 <rpc_error_to_nrf_gai_errno+0x26>
   17668:	4b0b      	ldr	r3, [pc, #44]	; (17698 <rpc_error_to_nrf_gai_errno+0x38>)
   1766a:	5c1b      	ldrb	r3, [r3, r0]
   1766c:	4a0b      	ldr	r2, [pc, #44]	; (1769c <rpc_error_to_nrf_gai_errno+0x3c>)
   1766e:	f240 1015 	movw	r0, #277	; 0x115
   17672:	6013      	str	r3, [r2, #0]
   17674:	4770      	bx	lr
   17676:	2806      	cmp	r0, #6
   17678:	d00b      	beq.n	17692 <rpc_error_to_nrf_gai_errno+0x32>
   1767a:	280d      	cmp	r0, #13
   1767c:	d009      	beq.n	17692 <rpc_error_to_nrf_gai_errno+0x32>
   1767e:	286a      	cmp	r0, #106	; 0x6a
   17680:	d9f2      	bls.n	17668 <rpc_error_to_nrf_gai_errno+0x8>
   17682:	235f      	movs	r3, #95	; 0x5f
   17684:	e7f2      	b.n	1766c <rpc_error_to_nrf_gai_errno+0xc>
   17686:	4b05      	ldr	r3, [pc, #20]	; (1769c <rpc_error_to_nrf_gai_errno+0x3c>)
   17688:	6018      	str	r0, [r3, #0]
   1768a:	4770      	bx	lr
   1768c:	f44f 708a 	mov.w	r0, #276	; 0x114
   17690:	4770      	bx	lr
   17692:	f240 1011 	movw	r0, #273	; 0x111
   17696:	4770      	bx	lr
   17698:	0001d717 	.word	0x0001d717
   1769c:	2000d4c4 	.word	0x2000d4c4

000176a0 <ip_interface_init>:
   176a0:	b510      	push	{r4, lr}
   176a2:	2400      	movs	r4, #0
   176a4:	4b06      	ldr	r3, [pc, #24]	; (176c0 <ip_interface_init+0x20>)
   176a6:	2220      	movs	r2, #32
   176a8:	601c      	str	r4, [r3, #0]
   176aa:	4b06      	ldr	r3, [pc, #24]	; (176c4 <ip_interface_init+0x24>)
   176ac:	4621      	mov	r1, r4
   176ae:	4806      	ldr	r0, [pc, #24]	; (176c8 <ip_interface_init+0x28>)
   176b0:	601c      	str	r4, [r3, #0]
   176b2:	f003 ff2f 	bl	1b514 <memset>
   176b6:	2201      	movs	r2, #1
   176b8:	4b04      	ldr	r3, [pc, #16]	; (176cc <ip_interface_init+0x2c>)
   176ba:	4620      	mov	r0, r4
   176bc:	701a      	strb	r2, [r3, #0]
   176be:	bd10      	pop	{r4, pc}
   176c0:	2000d4d0 	.word	0x2000d4d0
   176c4:	2000d4cc 	.word	0x2000d4cc
   176c8:	2000d4d4 	.word	0x2000d4d4
   176cc:	2000d9f5 	.word	0x2000d9f5

000176d0 <rpc_ip_event_handler>:
   176d0:	f248 030f 	movw	r3, #32783	; 0x800f
   176d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176d8:	4299      	cmp	r1, r3
   176da:	4604      	mov	r4, r0
   176dc:	460e      	mov	r6, r1
   176de:	b089      	sub	sp, #36	; 0x24
   176e0:	f000 80a4 	beq.w	1782c <rpc_ip_event_handler+0x15c>
   176e4:	f249 0304 	movw	r3, #36868	; 0x9004
   176e8:	4299      	cmp	r1, r3
   176ea:	f000 80ab 	beq.w	17844 <rpc_ip_event_handler+0x174>
   176ee:	f248 030d 	movw	r3, #32781	; 0x800d
   176f2:	4299      	cmp	r1, r3
   176f4:	f040 80b8 	bne.w	17868 <rpc_ip_event_handler+0x198>
   176f8:	4bbc      	ldr	r3, [pc, #752]	; (179ec <rpc_ip_event_handler+0x31c>)
   176fa:	681a      	ldr	r2, [r3, #0]
   176fc:	9303      	str	r3, [sp, #12]
   176fe:	2a01      	cmp	r2, #1
   17700:	d12d      	bne.n	1775e <rpc_ip_event_handler+0x8e>
   17702:	6940      	ldr	r0, [r0, #20]
   17704:	2800      	cmp	r0, #0
   17706:	f040 808c 	bne.w	17822 <rpc_ip_event_handler+0x152>
   1770a:	f8d4 a018 	ldr.w	sl, [r4, #24]
   1770e:	f8d4 8000 	ldr.w	r8, [r4]
   17712:	ea4f 134a 	mov.w	r3, sl, lsl #5
   17716:	4618      	mov	r0, r3
   17718:	9301      	str	r3, [sp, #4]
   1771a:	f7fd ff1d 	bl	15558 <nrf_modem_os_alloc>
   1771e:	4607      	mov	r7, r0
   17720:	b310      	cbz	r0, 17768 <rpc_ip_event_handler+0x98>
   17722:	2024      	movs	r0, #36	; 0x24
   17724:	fb00 f00a 	mul.w	r0, r0, sl
   17728:	f7fd ff16 	bl	15558 <nrf_modem_os_alloc>
   1772c:	4605      	mov	r5, r0
   1772e:	b1e8      	cbz	r0, 1776c <rpc_ip_event_handler+0x9c>
   17730:	2604      	movs	r6, #4
   17732:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   17736:	f107 0920 	add.w	r9, r7, #32
   1773a:	9302      	str	r3, [sp, #8]
   1773c:	9b02      	ldr	r3, [sp, #8]
   1773e:	42ab      	cmp	r3, r5
   17740:	d118      	bne.n	17774 <rpc_ip_event_handler+0xa4>
   17742:	f1ba 0f00 	cmp.w	sl, #0
   17746:	d005      	beq.n	17754 <rpc_ip_event_handler+0x84>
   17748:	9b01      	ldr	r3, [sp, #4]
   1774a:	443b      	add	r3, r7
   1774c:	4699      	mov	r9, r3
   1774e:	2300      	movs	r3, #0
   17750:	f849 3c04 	str.w	r3, [r9, #-4]
   17754:	4ba6      	ldr	r3, [pc, #664]	; (179f0 <rpc_ip_event_handler+0x320>)
   17756:	601f      	str	r7, [r3, #0]
   17758:	2302      	movs	r3, #2
   1775a:	9a03      	ldr	r2, [sp, #12]
   1775c:	6013      	str	r3, [r2, #0]
   1775e:	6820      	ldr	r0, [r4, #0]
   17760:	2800      	cmp	r0, #0
   17762:	f040 81c7 	bne.w	17af4 <rpc_ip_event_handler+0x424>
   17766:	e1c7      	b.n	17af8 <rpc_ip_event_handler+0x428>
   17768:	f7fd fefe 	bl	15568 <nrf_modem_os_free>
   1776c:	220c      	movs	r2, #12
   1776e:	4ba1      	ldr	r3, [pc, #644]	; (179f4 <rpc_ip_event_handler+0x324>)
   17770:	601a      	str	r2, [r3, #0]
   17772:	e7ef      	b.n	17754 <rpc_ip_event_handler+0x84>
   17774:	f858 2006 	ldr.w	r2, [r8, r6]
   17778:	eb08 0106 	add.w	r1, r8, r6
   1777c:	f849 2c20 	str.w	r2, [r9, #-32]
   17780:	eb08 0206 	add.w	r2, r8, r6
   17784:	6852      	ldr	r2, [r2, #4]
   17786:	f8b1 b012 	ldrh.w	fp, [r1, #18]
   1778a:	3a01      	subs	r2, #1
   1778c:	2a04      	cmp	r2, #4
   1778e:	bf8c      	ite	hi
   17790:	2200      	movhi	r2, #0
   17792:	4b99      	ldrls	r3, [pc, #612]	; (179f8 <rpc_ip_event_handler+0x328>)
   17794:	f106 0614 	add.w	r6, r6, #20
   17798:	bf98      	it	ls
   1779a:	569a      	ldrsbls	r2, [r3, r2]
   1779c:	4b97      	ldr	r3, [pc, #604]	; (179fc <rpc_ip_event_handler+0x32c>)
   1779e:	f849 2c1c 	str.w	r2, [r9, #-28]
   177a2:	681a      	ldr	r2, [r3, #0]
   177a4:	4b96      	ldr	r3, [pc, #600]	; (17a00 <rpc_ip_event_handler+0x330>)
   177a6:	f849 2c18 	str.w	r2, [r9, #-24]
   177aa:	681a      	ldr	r2, [r3, #0]
   177ac:	f849 2c14 	str.w	r2, [r9, #-20]
   177b0:	8a0a      	ldrh	r2, [r1, #16]
   177b2:	4994      	ldr	r1, [pc, #592]	; (17a04 <rpc_ip_event_handler+0x334>)
   177b4:	2a04      	cmp	r2, #4
   177b6:	8808      	ldrh	r0, [r1, #0]
   177b8:	f849 2c10 	str.w	r2, [r9, #-16]
   177bc:	f849 5c0c 	str.w	r5, [r9, #-12]
   177c0:	eb08 0106 	add.w	r1, r8, r6
   177c4:	d121      	bne.n	1780a <rpc_ip_event_handler+0x13a>
   177c6:	2202      	movs	r2, #2
   177c8:	606a      	str	r2, [r5, #4]
   177ca:	2210      	movs	r2, #16
   177cc:	8128      	strh	r0, [r5, #8]
   177ce:	702a      	strb	r2, [r5, #0]
   177d0:	680a      	ldr	r2, [r1, #0]
   177d2:	60ea      	str	r2, [r5, #12]
   177d4:	f859 2c10 	ldr.w	r2, [r9, #-16]
   177d8:	f10b 0001 	add.w	r0, fp, #1
   177dc:	4416      	add	r6, r2
   177de:	f7fd febb 	bl	15558 <nrf_modem_os_alloc>
   177e2:	f849 0c08 	str.w	r0, [r9, #-8]
   177e6:	b148      	cbz	r0, 177fc <rpc_ip_event_handler+0x12c>
   177e8:	465a      	mov	r2, fp
   177ea:	eb08 0106 	add.w	r1, r8, r6
   177ee:	f003 fe86 	bl	1b4fe <memcpy>
   177f2:	2100      	movs	r1, #0
   177f4:	f859 2c08 	ldr.w	r2, [r9, #-8]
   177f8:	f802 100b 	strb.w	r1, [r2, fp]
   177fc:	f849 9c04 	str.w	r9, [r9, #-4]
   17800:	445e      	add	r6, fp
   17802:	f109 0920 	add.w	r9, r9, #32
   17806:	3508      	adds	r5, #8
   17808:	e798      	b.n	1773c <rpc_ip_event_handler+0x6c>
   1780a:	230a      	movs	r3, #10
   1780c:	f04f 0c24 	mov.w	ip, #36	; 0x24
   17810:	8128      	strh	r0, [r5, #8]
   17812:	606b      	str	r3, [r5, #4]
   17814:	f885 c000 	strb.w	ip, [r5]
   17818:	f105 0010 	add.w	r0, r5, #16
   1781c:	f003 fe6f 	bl	1b4fe <memcpy>
   17820:	e7d8      	b.n	177d4 <rpc_ip_event_handler+0x104>
   17822:	f7ff ff1d 	bl	17660 <rpc_error_to_nrf_gai_errno>
   17826:	4b73      	ldr	r3, [pc, #460]	; (179f4 <rpc_ip_event_handler+0x324>)
   17828:	6018      	str	r0, [r3, #0]
   1782a:	e795      	b.n	17758 <rpc_ip_event_handler+0x88>
   1782c:	6943      	ldr	r3, [r0, #20]
   1782e:	2b6a      	cmp	r3, #106	; 0x6a
   17830:	bf8e      	itee	hi
   17832:	235f      	movhi	r3, #95	; 0x5f
   17834:	4a74      	ldrls	r2, [pc, #464]	; (17a08 <rpc_ip_event_handler+0x338>)
   17836:	5cd3      	ldrbls	r3, [r2, r3]
   17838:	4a74      	ldr	r2, [pc, #464]	; (17a0c <rpc_ip_event_handler+0x33c>)
   1783a:	6013      	str	r3, [r2, #0]
   1783c:	4b74      	ldr	r3, [pc, #464]	; (17a10 <rpc_ip_event_handler+0x340>)
   1783e:	2201      	movs	r2, #1
   17840:	701a      	strb	r2, [r3, #0]
   17842:	e159      	b.n	17af8 <rpc_ip_event_handler+0x428>
   17844:	6903      	ldr	r3, [r0, #16]
   17846:	2b03      	cmp	r3, #3
   17848:	d807      	bhi.n	1785a <rpc_ip_event_handler+0x18a>
   1784a:	e8df f003 	tbb	[pc, r3]
   1784e:	0802      	.short	0x0802
   17850:	0802      	.short	0x0802
   17852:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17856:	f7ff fe97 	bl	17588 <interface_sockets_aux_state_set>
   1785a:	4b6e      	ldr	r3, [pc, #440]	; (17a14 <rpc_ip_event_handler+0x344>)
   1785c:	e7ef      	b.n	1783e <rpc_ip_event_handler+0x16e>
   1785e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17862:	f7ff feaf 	bl	175c4 <interface_sockets_aux_state_clear>
   17866:	e7f8      	b.n	1785a <rpc_ip_event_handler+0x18a>
   17868:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1786c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   17870:	68c0      	ldr	r0, [r0, #12]
   17872:	d13b      	bne.n	178ec <rpc_ip_event_handler+0x21c>
   17874:	f7ff fec4 	bl	17600 <interface_from_internal_id_search>
   17878:	4607      	mov	r7, r0
   1787a:	4638      	mov	r0, r7
   1787c:	f7ff fed8 	bl	17630 <interface_socket_from_handle_get>
   17880:	4605      	mov	r5, r0
   17882:	2800      	cmp	r0, #0
   17884:	f43f af6b 	beq.w	1775e <rpc_ip_event_handler+0x8e>
   17888:	4601      	mov	r1, r0
   1788a:	4633      	mov	r3, r6
   1788c:	4622      	mov	r2, r4
   1788e:	4638      	mov	r0, r7
   17890:	f000 f9f4 	bl	17c7c <tls_rpc_ip_event_handler>
   17894:	2800      	cmp	r0, #0
   17896:	f000 812f 	beq.w	17af8 <rpc_ip_event_handler+0x428>
   1789a:	f248 030c 	movw	r3, #32780	; 0x800c
   1789e:	429e      	cmp	r6, r3
   178a0:	d826      	bhi.n	178f0 <rpc_ip_event_handler+0x220>
   178a2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   178a6:	f67f af5a 	bls.w	1775e <rpc_ip_event_handler+0x8e>
   178aa:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   178ae:	3e01      	subs	r6, #1
   178b0:	2e0b      	cmp	r6, #11
   178b2:	f63f af54 	bhi.w	1775e <rpc_ip_event_handler+0x8e>
   178b6:	a301      	add	r3, pc, #4	; (adr r3, 178bc <rpc_ip_event_handler+0x1ec>)
   178b8:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   178bc:	00017981 	.word	0x00017981
   178c0:	00017a35 	.word	0x00017a35
   178c4:	00017b51 	.word	0x00017b51
   178c8:	00017b6f 	.word	0x00017b6f
   178cc:	00017a19 	.word	0x00017a19
   178d0:	00017b01 	.word	0x00017b01
   178d4:	00017b01 	.word	0x00017b01
   178d8:	00017a79 	.word	0x00017a79
   178dc:	0001799b 	.word	0x0001799b
   178e0:	0001775f 	.word	0x0001775f
   178e4:	0001775f 	.word	0x0001775f
   178e8:	00017aa3 	.word	0x00017aa3
   178ec:	0c07      	lsrs	r7, r0, #16
   178ee:	e7c4      	b.n	1787a <rpc_ip_event_handler+0x1aa>
   178f0:	f249 0302 	movw	r3, #36866	; 0x9002
   178f4:	429e      	cmp	r6, r3
   178f6:	f000 80cc 	beq.w	17a92 <rpc_ip_event_handler+0x3c2>
   178fa:	f249 0303 	movw	r3, #36867	; 0x9003
   178fe:	429e      	cmp	r6, r3
   17900:	d05b      	beq.n	179ba <rpc_ip_event_handler+0x2ea>
   17902:	f249 0301 	movw	r3, #36865	; 0x9001
   17906:	429e      	cmp	r6, r3
   17908:	f47f af29 	bne.w	1775e <rpc_ip_event_handler+0x8e>
   1790c:	682e      	ldr	r6, [r5, #0]
   1790e:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   17912:	f000 80ee 	beq.w	17af2 <rpc_ip_event_handler+0x422>
   17916:	68a3      	ldr	r3, [r4, #8]
   17918:	2b04      	cmp	r3, #4
   1791a:	f240 80e7 	bls.w	17aec <rpc_ip_event_handler+0x41c>
   1791e:	8a63      	ldrh	r3, [r4, #18]
   17920:	2b00      	cmp	r3, #0
   17922:	f000 80e4 	beq.w	17aee <rpc_ip_event_handler+0x41e>
   17926:	2b10      	cmp	r3, #16
   17928:	f040 80cc 	bne.w	17ac4 <rpc_ip_event_handler+0x3f4>
   1792c:	2024      	movs	r0, #36	; 0x24
   1792e:	f7fd fe13 	bl	15558 <nrf_modem_os_alloc>
   17932:	b318      	cbz	r0, 1797c <rpc_ip_event_handler+0x2ac>
   17934:	230a      	movs	r3, #10
   17936:	6043      	str	r3, [r0, #4]
   17938:	2324      	movs	r3, #36	; 0x24
   1793a:	7003      	strb	r3, [r0, #0]
   1793c:	7c62      	ldrb	r2, [r4, #17]
   1793e:	7c23      	ldrb	r3, [r4, #16]
   17940:	f104 0124 	add.w	r1, r4, #36	; 0x24
   17944:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17948:	8103      	strh	r3, [r0, #8]
   1794a:	f100 0210 	add.w	r2, r0, #16
   1794e:	f104 0314 	add.w	r3, r4, #20
   17952:	f853 6b04 	ldr.w	r6, [r3], #4
   17956:	428b      	cmp	r3, r1
   17958:	f842 6b04 	str.w	r6, [r2], #4
   1795c:	d1f9      	bne.n	17952 <rpc_ip_event_handler+0x282>
   1795e:	2324      	movs	r3, #36	; 0x24
   17960:	6822      	ldr	r2, [r4, #0]
   17962:	9307      	str	r3, [sp, #28]
   17964:	9204      	str	r2, [sp, #16]
   17966:	6862      	ldr	r2, [r4, #4]
   17968:	a904      	add	r1, sp, #16
   1796a:	e9cd 2005 	strd	r2, r0, [sp, #20]
   1796e:	69e8      	ldr	r0, [r5, #28]
   17970:	6803      	ldr	r3, [r0, #0]
   17972:	685b      	ldr	r3, [r3, #4]
   17974:	4798      	blx	r3
   17976:	3001      	adds	r0, #1
   17978:	f040 808f 	bne.w	17a9a <rpc_ip_event_handler+0x3ca>
   1797c:	2002      	movs	r0, #2
   1797e:	e0bc      	b.n	17afa <rpc_ip_event_handler+0x42a>
   17980:	682b      	ldr	r3, [r5, #0]
   17982:	2b01      	cmp	r3, #1
   17984:	f040 80b8 	bne.w	17af8 <rpc_ip_event_handler+0x428>
   17988:	6960      	ldr	r0, [r4, #20]
   1798a:	2800      	cmp	r0, #0
   1798c:	f040 80e9 	bne.w	17b62 <rpc_ip_event_handler+0x492>
   17990:	2302      	movs	r3, #2
   17992:	602b      	str	r3, [r5, #0]
   17994:	69a3      	ldr	r3, [r4, #24]
   17996:	61ab      	str	r3, [r5, #24]
   17998:	e0af      	b.n	17afa <rpc_ip_event_handler+0x42a>
   1799a:	682b      	ldr	r3, [r5, #0]
   1799c:	b29b      	uxth	r3, r3
   1799e:	2b0d      	cmp	r3, #13
   179a0:	f040 80aa 	bne.w	17af8 <rpc_ip_event_handler+0x428>
   179a4:	6960      	ldr	r0, [r4, #20]
   179a6:	2800      	cmp	r0, #0
   179a8:	f040 80db 	bne.w	17b62 <rpc_ip_event_handler+0x492>
   179ac:	682b      	ldr	r3, [r5, #0]
   179ae:	0c1b      	lsrs	r3, r3, #16
   179b0:	041b      	lsls	r3, r3, #16
   179b2:	f043 030e 	orr.w	r3, r3, #14
   179b6:	602b      	str	r3, [r5, #0]
   179b8:	e09f      	b.n	17afa <rpc_ip_event_handler+0x42a>
   179ba:	682b      	ldr	r3, [r5, #0]
   179bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   179c0:	602b      	str	r3, [r5, #0]
   179c2:	682b      	ldr	r3, [r5, #0]
   179c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   179c8:	602b      	str	r3, [r5, #0]
   179ca:	6923      	ldr	r3, [r4, #16]
   179cc:	2b6c      	cmp	r3, #108	; 0x6c
   179ce:	d107      	bne.n	179e0 <rpc_ip_event_handler+0x310>
   179d0:	682b      	ldr	r3, [r5, #0]
   179d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   179d6:	602b      	str	r3, [r5, #0]
   179d8:	2380      	movs	r3, #128	; 0x80
   179da:	606b      	str	r3, [r5, #4]
   179dc:	60ab      	str	r3, [r5, #8]
   179de:	e08b      	b.n	17af8 <rpc_ip_event_handler+0x428>
   179e0:	2b6a      	cmp	r3, #106	; 0x6a
   179e2:	bf96      	itet	ls
   179e4:	4a08      	ldrls	r2, [pc, #32]	; (17a08 <rpc_ip_event_handler+0x338>)
   179e6:	235f      	movhi	r3, #95	; 0x5f
   179e8:	5cd3      	ldrbls	r3, [r2, r3]
   179ea:	e7f6      	b.n	179da <rpc_ip_event_handler+0x30a>
   179ec:	2000d4cc 	.word	0x2000d4cc
   179f0:	2000d4d0 	.word	0x2000d4d0
   179f4:	2000d4c8 	.word	0x2000d4c8
   179f8:	0001d712 	.word	0x0001d712
   179fc:	2000d4c0 	.word	0x2000d4c0
   17a00:	2000d4bc 	.word	0x2000d4bc
   17a04:	2000d5d0 	.word	0x2000d5d0
   17a08:	0001d717 	.word	0x0001d717
   17a0c:	2000d4f4 	.word	0x2000d4f4
   17a10:	2000d9f6 	.word	0x2000d9f6
   17a14:	2000d9f4 	.word	0x2000d9f4
   17a18:	682b      	ldr	r3, [r5, #0]
   17a1a:	b29b      	uxth	r3, r3
   17a1c:	2b03      	cmp	r3, #3
   17a1e:	d16b      	bne.n	17af8 <rpc_ip_event_handler+0x428>
   17a20:	6960      	ldr	r0, [r4, #20]
   17a22:	2800      	cmp	r0, #0
   17a24:	f040 809d 	bne.w	17b62 <rpc_ip_event_handler+0x492>
   17a28:	682b      	ldr	r3, [r5, #0]
   17a2a:	0c1b      	lsrs	r3, r3, #16
   17a2c:	041b      	lsls	r3, r3, #16
   17a2e:	f043 0304 	orr.w	r3, r3, #4
   17a32:	e7c0      	b.n	179b6 <rpc_ip_event_handler+0x2e6>
   17a34:	682b      	ldr	r3, [r5, #0]
   17a36:	0099      	lsls	r1, r3, #2
   17a38:	d55e      	bpl.n	17af8 <rpc_ip_event_handler+0x428>
   17a3a:	682b      	ldr	r3, [r5, #0]
   17a3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   17a40:	602b      	str	r3, [r5, #0]
   17a42:	6960      	ldr	r0, [r4, #20]
   17a44:	b968      	cbnz	r0, 17a62 <rpc_ip_event_handler+0x392>
   17a46:	682b      	ldr	r3, [r5, #0]
   17a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17a4c:	602b      	str	r3, [r5, #0]
   17a4e:	682b      	ldr	r3, [r5, #0]
   17a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17a54:	602b      	str	r3, [r5, #0]
   17a56:	682b      	ldr	r3, [r5, #0]
   17a58:	0c1b      	lsrs	r3, r3, #16
   17a5a:	041b      	lsls	r3, r3, #16
   17a5c:	f043 0305 	orr.w	r3, r3, #5
   17a60:	e7a9      	b.n	179b6 <rpc_ip_event_handler+0x2e6>
   17a62:	286a      	cmp	r0, #106	; 0x6a
   17a64:	bf8e      	itee	hi
   17a66:	235f      	movhi	r3, #95	; 0x5f
   17a68:	4b4c      	ldrls	r3, [pc, #304]	; (17b9c <rpc_ip_event_handler+0x4cc>)
   17a6a:	5c1b      	ldrbls	r3, [r3, r0]
   17a6c:	606b      	str	r3, [r5, #4]
   17a6e:	682b      	ldr	r3, [r5, #0]
   17a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   17a74:	602b      	str	r3, [r5, #0]
   17a76:	e03f      	b.n	17af8 <rpc_ip_event_handler+0x428>
   17a78:	682b      	ldr	r3, [r5, #0]
   17a7a:	b29b      	uxth	r3, r3
   17a7c:	2b06      	cmp	r3, #6
   17a7e:	d13b      	bne.n	17af8 <rpc_ip_event_handler+0x428>
   17a80:	6960      	ldr	r0, [r4, #20]
   17a82:	2800      	cmp	r0, #0
   17a84:	d16d      	bne.n	17b62 <rpc_ip_event_handler+0x492>
   17a86:	682b      	ldr	r3, [r5, #0]
   17a88:	0c1b      	lsrs	r3, r3, #16
   17a8a:	041b      	lsls	r3, r3, #16
   17a8c:	f043 0307 	orr.w	r3, r3, #7
   17a90:	e791      	b.n	179b6 <rpc_ip_event_handler+0x2e6>
   17a92:	682b      	ldr	r3, [r5, #0]
   17a94:	b29b      	uxth	r3, r3
   17a96:	2b07      	cmp	r3, #7
   17a98:	d12e      	bne.n	17af8 <rpc_ip_event_handler+0x428>
   17a9a:	682b      	ldr	r3, [r5, #0]
   17a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17aa0:	e7e8      	b.n	17a74 <rpc_ip_event_handler+0x3a4>
   17aa2:	682b      	ldr	r3, [r5, #0]
   17aa4:	b29b      	uxth	r3, r3
   17aa6:	2b08      	cmp	r3, #8
   17aa8:	d126      	bne.n	17af8 <rpc_ip_event_handler+0x428>
   17aaa:	6963      	ldr	r3, [r4, #20]
   17aac:	2b00      	cmp	r3, #0
   17aae:	d16d      	bne.n	17b8c <rpc_ip_event_handler+0x4bc>
   17ab0:	4b3b      	ldr	r3, [pc, #236]	; (17ba0 <rpc_ip_event_handler+0x4d0>)
   17ab2:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   17ab6:	682b      	ldr	r3, [r5, #0]
   17ab8:	0c1b      	lsrs	r3, r3, #16
   17aba:	041b      	lsls	r3, r3, #16
   17abc:	f043 0309 	orr.w	r3, r3, #9
   17ac0:	602b      	str	r3, [r5, #0]
   17ac2:	e032      	b.n	17b2a <rpc_ip_event_handler+0x45a>
   17ac4:	2b04      	cmp	r3, #4
   17ac6:	d114      	bne.n	17af2 <rpc_ip_event_handler+0x422>
   17ac8:	2010      	movs	r0, #16
   17aca:	f7fd fd45 	bl	15558 <nrf_modem_os_alloc>
   17ace:	2800      	cmp	r0, #0
   17ad0:	f43f af54 	beq.w	1797c <rpc_ip_event_handler+0x2ac>
   17ad4:	2302      	movs	r3, #2
   17ad6:	6043      	str	r3, [r0, #4]
   17ad8:	2310      	movs	r3, #16
   17ada:	7003      	strb	r3, [r0, #0]
   17adc:	7c22      	ldrb	r2, [r4, #16]
   17ade:	7c61      	ldrb	r1, [r4, #17]
   17ae0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17ae4:	8102      	strh	r2, [r0, #8]
   17ae6:	6962      	ldr	r2, [r4, #20]
   17ae8:	60c2      	str	r2, [r0, #12]
   17aea:	e739      	b.n	17960 <rpc_ip_event_handler+0x290>
   17aec:	2300      	movs	r3, #0
   17aee:	4618      	mov	r0, r3
   17af0:	e736      	b.n	17960 <rpc_ip_event_handler+0x290>
   17af2:	6820      	ldr	r0, [r4, #0]
   17af4:	f004 f921 	bl	1bd3a <rpc_client_data_free>
   17af8:	2000      	movs	r0, #0
   17afa:	b009      	add	sp, #36	; 0x24
   17afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b00:	4b27      	ldr	r3, [pc, #156]	; (17ba0 <rpc_ip_event_handler+0x4d0>)
   17b02:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   17b06:	6963      	ldr	r3, [r4, #20]
   17b08:	b17b      	cbz	r3, 17b2a <rpc_ip_event_handler+0x45a>
   17b0a:	2b6b      	cmp	r3, #107	; 0x6b
   17b0c:	d10f      	bne.n	17b2e <rpc_ip_event_handler+0x45e>
   17b0e:	6928      	ldr	r0, [r5, #16]
   17b10:	220c      	movs	r2, #12
   17b12:	2801      	cmp	r0, #1
   17b14:	682b      	ldr	r3, [r5, #0]
   17b16:	d104      	bne.n	17b22 <rpc_ip_event_handler+0x452>
   17b18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   17b1c:	602b      	str	r3, [r5, #0]
   17b1e:	606a      	str	r2, [r5, #4]
   17b20:	e7eb      	b.n	17afa <rpc_ip_event_handler+0x42a>
   17b22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   17b26:	602b      	str	r3, [r5, #0]
   17b28:	606a      	str	r2, [r5, #4]
   17b2a:	2001      	movs	r0, #1
   17b2c:	e7e5      	b.n	17afa <rpc_ip_event_handler+0x42a>
   17b2e:	f023 0002 	bic.w	r0, r3, #2
   17b32:	2801      	cmp	r0, #1
   17b34:	d102      	bne.n	17b3c <rpc_ip_event_handler+0x46c>
   17b36:	230c      	movs	r3, #12
   17b38:	606b      	str	r3, [r5, #4]
   17b3a:	e7de      	b.n	17afa <rpc_ip_event_handler+0x42a>
   17b3c:	2b6a      	cmp	r3, #106	; 0x6a
   17b3e:	bf8e      	itee	hi
   17b40:	235f      	movhi	r3, #95	; 0x5f
   17b42:	4a16      	ldrls	r2, [pc, #88]	; (17b9c <rpc_ip_event_handler+0x4cc>)
   17b44:	5cd3      	ldrbls	r3, [r2, r3]
   17b46:	606b      	str	r3, [r5, #4]
   17b48:	682b      	ldr	r3, [r5, #0]
   17b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   17b4e:	e7b7      	b.n	17ac0 <rpc_ip_event_handler+0x3f0>
   17b50:	682b      	ldr	r3, [r5, #0]
   17b52:	025a      	lsls	r2, r3, #9
   17b54:	d5d0      	bpl.n	17af8 <rpc_ip_event_handler+0x428>
   17b56:	6960      	ldr	r0, [r4, #20]
   17b58:	b918      	cbnz	r0, 17b62 <rpc_ip_event_handler+0x492>
   17b5a:	682b      	ldr	r3, [r5, #0]
   17b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   17b60:	e729      	b.n	179b6 <rpc_ip_event_handler+0x2e6>
   17b62:	286a      	cmp	r0, #106	; 0x6a
   17b64:	d817      	bhi.n	17b96 <rpc_ip_event_handler+0x4c6>
   17b66:	4b0d      	ldr	r3, [pc, #52]	; (17b9c <rpc_ip_event_handler+0x4cc>)
   17b68:	5c1b      	ldrb	r3, [r3, r0]
   17b6a:	606b      	str	r3, [r5, #4]
   17b6c:	e7c4      	b.n	17af8 <rpc_ip_event_handler+0x428>
   17b6e:	682b      	ldr	r3, [r5, #0]
   17b70:	01db      	lsls	r3, r3, #7
   17b72:	d5c1      	bpl.n	17af8 <rpc_ip_event_handler+0x428>
   17b74:	6963      	ldr	r3, [r4, #20]
   17b76:	b94b      	cbnz	r3, 17b8c <rpc_ip_event_handler+0x4bc>
   17b78:	6820      	ldr	r0, [r4, #0]
   17b7a:	b118      	cbz	r0, 17b84 <rpc_ip_event_handler+0x4b4>
   17b7c:	2001      	movs	r0, #1
   17b7e:	4b08      	ldr	r3, [pc, #32]	; (17ba0 <rpc_ip_event_handler+0x4d0>)
   17b80:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   17b84:	682b      	ldr	r3, [r5, #0]
   17b86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   17b8a:	e714      	b.n	179b6 <rpc_ip_event_handler+0x2e6>
   17b8c:	2b6a      	cmp	r3, #106	; 0x6a
   17b8e:	d802      	bhi.n	17b96 <rpc_ip_event_handler+0x4c6>
   17b90:	4a02      	ldr	r2, [pc, #8]	; (17b9c <rpc_ip_event_handler+0x4cc>)
   17b92:	5cd3      	ldrb	r3, [r2, r3]
   17b94:	e7e9      	b.n	17b6a <rpc_ip_event_handler+0x49a>
   17b96:	235f      	movs	r3, #95	; 0x5f
   17b98:	e7e7      	b.n	17b6a <rpc_ip_event_handler+0x49a>
   17b9a:	bf00      	nop
   17b9c:	0001d717 	.word	0x0001d717
   17ba0:	2000d4d4 	.word	0x2000d4d4

00017ba4 <hostname_free>:
   17ba4:	b538      	push	{r3, r4, r5, lr}
   17ba6:	4c07      	ldr	r4, [pc, #28]	; (17bc4 <hostname_free+0x20>)
   17ba8:	4605      	mov	r5, r0
   17baa:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   17bae:	b138      	cbz	r0, 17bc0 <hostname_free+0x1c>
   17bb0:	f7fd fcda 	bl	15568 <nrf_modem_os_free>
   17bb4:	2300      	movs	r3, #0
   17bb6:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   17bba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   17bbe:	6063      	str	r3, [r4, #4]
   17bc0:	bd38      	pop	{r3, r4, r5, pc}
   17bc2:	bf00      	nop
   17bc4:	2000d4f8 	.word	0x2000d4f8

00017bc8 <secure_socket_attach_initiate>:
   17bc8:	f04f 33ff 	mov.w	r3, #4294967295
   17bcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17bd0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 17c68 <secure_socket_attach_initiate+0xa0>
   17bd4:	9301      	str	r3, [sp, #4]
   17bd6:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   17bda:	460d      	mov	r5, r1
   17bdc:	4616      	mov	r6, r2
   17bde:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17be2:	f247 0281 	movw	r2, #28801	; 0x7081
   17be6:	6989      	ldr	r1, [r1, #24]
   17be8:	4607      	mov	r7, r0
   17bea:	f004 f8a8 	bl	1bd3e <ip_interface_request_create>
   17bee:	4604      	mov	r4, r0
   17bf0:	b398      	cbz	r0, 17c5a <secure_socket_attach_initiate+0x92>
   17bf2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   17bf6:	b122      	cbz	r2, 17c02 <secure_socket_attach_initiate+0x3a>
   17bf8:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   17bfc:	6800      	ldr	r0, [r0, #0]
   17bfe:	f003 fc7e 	bl	1b4fe <memcpy>
   17c02:	2324      	movs	r3, #36	; 0x24
   17c04:	4a17      	ldr	r2, [pc, #92]	; (17c64 <secure_socket_attach_initiate+0x9c>)
   17c06:	fb03 2307 	mla	r3, r3, r7, r2
   17c0a:	f104 0214 	add.w	r2, r4, #20
   17c0e:	f103 0124 	add.w	r1, r3, #36	; 0x24
   17c12:	f853 0b04 	ldr.w	r0, [r3], #4
   17c16:	428b      	cmp	r3, r1
   17c18:	f842 0b04 	str.w	r0, [r2], #4
   17c1c:	d1f9      	bne.n	17c12 <secure_socket_attach_initiate+0x4a>
   17c1e:	68a3      	ldr	r3, [r4, #8]
   17c20:	4622      	mov	r2, r4
   17c22:	3324      	adds	r3, #36	; 0x24
   17c24:	60a3      	str	r3, [r4, #8]
   17c26:	682b      	ldr	r3, [r5, #0]
   17c28:	f247 0181 	movw	r1, #28801	; 0x7081
   17c2c:	0c1b      	lsrs	r3, r3, #16
   17c2e:	041b      	lsls	r3, r3, #16
   17c30:	f043 030a 	orr.w	r3, r3, #10
   17c34:	602b      	str	r3, [r5, #0]
   17c36:	2004      	movs	r0, #4
   17c38:	f004 f878 	bl	1bd2c <rpc_client_request_send>
   17c3c:	682b      	ldr	r3, [r5, #0]
   17c3e:	00db      	lsls	r3, r3, #3
   17c40:	d40d      	bmi.n	17c5e <secure_socket_attach_initiate+0x96>
   17c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17c46:	210b      	movs	r1, #11
   17c48:	4638      	mov	r0, r7
   17c4a:	ab01      	add	r3, sp, #4
   17c4c:	f004 f88a 	bl	1bd64 <ip_interface_wait>
   17c50:	b100      	cbz	r0, 17c54 <secure_socket_attach_initiate+0x8c>
   17c52:	602e      	str	r6, [r5, #0]
   17c54:	b003      	add	sp, #12
   17c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17c5a:	200c      	movs	r0, #12
   17c5c:	e7fa      	b.n	17c54 <secure_socket_attach_initiate+0x8c>
   17c5e:	2077      	movs	r0, #119	; 0x77
   17c60:	e7f8      	b.n	17c54 <secure_socket_attach_initiate+0x8c>
   17c62:	bf00      	nop
   17c64:	2000d9f8 	.word	0x2000d9f8
   17c68:	2000d4f8 	.word	0x2000d4f8

00017c6c <tls_interface_init>:
   17c6c:	2201      	movs	r2, #1
   17c6e:	4b02      	ldr	r3, [pc, #8]	; (17c78 <tls_interface_init+0xc>)
   17c70:	2000      	movs	r0, #0
   17c72:	701a      	strb	r2, [r3, #0]
   17c74:	4770      	bx	lr
   17c76:	bf00      	nop
   17c78:	2000d9f7 	.word	0x2000d9f7

00017c7c <tls_rpc_ip_event_handler>:
   17c7c:	b570      	push	{r4, r5, r6, lr}
   17c7e:	460c      	mov	r4, r1
   17c80:	f248 0181 	movw	r1, #32897	; 0x8081
   17c84:	428b      	cmp	r3, r1
   17c86:	4606      	mov	r6, r0
   17c88:	d035      	beq.n	17cf6 <tls_rpc_ip_event_handler+0x7a>
   17c8a:	f249 0182 	movw	r1, #36994	; 0x9082
   17c8e:	428b      	cmp	r3, r1
   17c90:	d040      	beq.n	17d14 <tls_rpc_ip_event_handler+0x98>
   17c92:	f248 0102 	movw	r1, #32770	; 0x8002
   17c96:	428b      	cmp	r3, r1
   17c98:	d161      	bne.n	17d5e <tls_rpc_ip_event_handler+0xe2>
   17c9a:	2c00      	cmp	r4, #0
   17c9c:	d05f      	beq.n	17d5e <tls_rpc_ip_event_handler+0xe2>
   17c9e:	6963      	ldr	r3, [r4, #20]
   17ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   17ca4:	d002      	beq.n	17cac <tls_rpc_ip_event_handler+0x30>
   17ca6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   17caa:	d158      	bne.n	17d5e <tls_rpc_ip_event_handler+0xe2>
   17cac:	6823      	ldr	r3, [r4, #0]
   17cae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   17cb2:	6023      	str	r3, [r4, #0]
   17cb4:	6955      	ldr	r5, [r2, #20]
   17cb6:	2d00      	cmp	r5, #0
   17cb8:	d14d      	bne.n	17d56 <tls_rpc_ip_event_handler+0xda>
   17cba:	6823      	ldr	r3, [r4, #0]
   17cbc:	0c1b      	lsrs	r3, r3, #16
   17cbe:	041b      	lsls	r3, r3, #16
   17cc0:	f043 0305 	orr.w	r3, r3, #5
   17cc4:	6023      	str	r3, [r4, #0]
   17cc6:	6823      	ldr	r3, [r4, #0]
   17cc8:	00db      	lsls	r3, r3, #3
   17cca:	d401      	bmi.n	17cd0 <tls_rpc_ip_event_handler+0x54>
   17ccc:	2000      	movs	r0, #0
   17cce:	e020      	b.n	17d12 <tls_rpc_ip_event_handler+0x96>
   17cd0:	2324      	movs	r3, #36	; 0x24
   17cd2:	4373      	muls	r3, r6
   17cd4:	4a23      	ldr	r2, [pc, #140]	; (17d64 <tls_rpc_ip_event_handler+0xe8>)
   17cd6:	5cd3      	ldrb	r3, [r2, r3]
   17cd8:	2b02      	cmp	r3, #2
   17cda:	d1f7      	bne.n	17ccc <tls_rpc_ip_event_handler+0x50>
   17cdc:	4621      	mov	r1, r4
   17cde:	4630      	mov	r0, r6
   17ce0:	f004 f850 	bl	1bd84 <secure_client_socket>
   17ce4:	2800      	cmp	r0, #0
   17ce6:	d0f1      	beq.n	17ccc <tls_rpc_ip_event_handler+0x50>
   17ce8:	2877      	cmp	r0, #119	; 0x77
   17cea:	d0ef      	beq.n	17ccc <tls_rpc_ip_event_handler+0x50>
   17cec:	6060      	str	r0, [r4, #4]
   17cee:	6823      	ldr	r3, [r4, #0]
   17cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   17cf4:	e02d      	b.n	17d52 <tls_rpc_ip_event_handler+0xd6>
   17cf6:	2c00      	cmp	r4, #0
   17cf8:	d0e8      	beq.n	17ccc <tls_rpc_ip_event_handler+0x50>
   17cfa:	6823      	ldr	r3, [r4, #0]
   17cfc:	b29b      	uxth	r3, r3
   17cfe:	2b0a      	cmp	r3, #10
   17d00:	d1e4      	bne.n	17ccc <tls_rpc_ip_event_handler+0x50>
   17d02:	6950      	ldr	r0, [r2, #20]
   17d04:	bb40      	cbnz	r0, 17d58 <tls_rpc_ip_event_handler+0xdc>
   17d06:	6823      	ldr	r3, [r4, #0]
   17d08:	0c1b      	lsrs	r3, r3, #16
   17d0a:	041b      	lsls	r3, r3, #16
   17d0c:	f043 030b 	orr.w	r3, r3, #11
   17d10:	6023      	str	r3, [r4, #0]
   17d12:	bd70      	pop	{r4, r5, r6, pc}
   17d14:	2c00      	cmp	r4, #0
   17d16:	d0d9      	beq.n	17ccc <tls_rpc_ip_event_handler+0x50>
   17d18:	6823      	ldr	r3, [r4, #0]
   17d1a:	b29b      	uxth	r3, r3
   17d1c:	2b0b      	cmp	r3, #11
   17d1e:	d1d5      	bne.n	17ccc <tls_rpc_ip_event_handler+0x50>
   17d20:	6915      	ldr	r5, [r2, #16]
   17d22:	b9c5      	cbnz	r5, 17d56 <tls_rpc_ip_event_handler+0xda>
   17d24:	6823      	ldr	r3, [r4, #0]
   17d26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   17d2a:	6023      	str	r3, [r4, #0]
   17d2c:	f7ff ff3a 	bl	17ba4 <hostname_free>
   17d30:	6823      	ldr	r3, [r4, #0]
   17d32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   17d36:	6023      	str	r3, [r4, #0]
   17d38:	6823      	ldr	r3, [r4, #0]
   17d3a:	0c1b      	lsrs	r3, r3, #16
   17d3c:	041b      	lsls	r3, r3, #16
   17d3e:	f043 030c 	orr.w	r3, r3, #12
   17d42:	6023      	str	r3, [r4, #0]
   17d44:	6823      	ldr	r3, [r4, #0]
   17d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17d4a:	6023      	str	r3, [r4, #0]
   17d4c:	6823      	ldr	r3, [r4, #0]
   17d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17d52:	6023      	str	r3, [r4, #0]
   17d54:	e7ba      	b.n	17ccc <tls_rpc_ip_event_handler+0x50>
   17d56:	4628      	mov	r0, r5
   17d58:	f7ff fc7a 	bl	17650 <rpc_error_to_nrf_errno>
   17d5c:	e7c6      	b.n	17cec <tls_rpc_ip_event_handler+0x70>
   17d5e:	2001      	movs	r0, #1
   17d60:	e7d7      	b.n	17d12 <tls_rpc_ip_event_handler+0x96>
   17d62:	bf00      	nop
   17d64:	2000d9f8 	.word	0x2000d9f8

00017d68 <at_cmd_send>:
   17d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17d6a:	4615      	mov	r5, r2
   17d6c:	f06f 0258 	mvn.w	r2, #88	; 0x58
   17d70:	2300      	movs	r3, #0
   17d72:	7302      	strb	r2, [r0, #12]
   17d74:	2204      	movs	r2, #4
   17d76:	4c0d      	ldr	r4, [pc, #52]	; (17dac <at_cmd_send+0x44>)
   17d78:	7343      	strb	r3, [r0, #13]
   17d7a:	7383      	strb	r3, [r0, #14]
   17d7c:	73c3      	strb	r3, [r0, #15]
   17d7e:	7202      	strb	r2, [r0, #8]
   17d80:	7243      	strb	r3, [r0, #9]
   17d82:	7283      	strb	r3, [r0, #10]
   17d84:	72c3      	strb	r3, [r0, #11]
   17d86:	4602      	mov	r2, r0
   17d88:	b289      	uxth	r1, r1
   17d8a:	2003      	movs	r0, #3
   17d8c:	7023      	strb	r3, [r4, #0]
   17d8e:	f003 ffcd 	bl	1bd2c <rpc_client_request_send>
   17d92:	f04f 33ff 	mov.w	r3, #4294967295
   17d96:	9301      	str	r3, [sp, #4]
   17d98:	7823      	ldrb	r3, [r4, #0]
   17d9a:	42ab      	cmp	r3, r5
   17d9c:	d101      	bne.n	17da2 <at_cmd_send+0x3a>
   17d9e:	b003      	add	sp, #12
   17da0:	bd30      	pop	{r4, r5, pc}
   17da2:	a901      	add	r1, sp, #4
   17da4:	2000      	movs	r0, #0
   17da6:	f7fd fa77 	bl	15298 <nrf_modem_os_timedwait>
   17daa:	e7f5      	b.n	17d98 <at_cmd_send+0x30>
   17dac:	2000db18 	.word	0x2000db18

00017db0 <nrf_modem_at_init>:
   17db0:	2201      	movs	r2, #1
   17db2:	b508      	push	{r3, lr}
   17db4:	4611      	mov	r1, r2
   17db6:	4808      	ldr	r0, [pc, #32]	; (17dd8 <nrf_modem_at_init+0x28>)
   17db8:	f7fd fb26 	bl	15408 <nrf_modem_os_sem_init>
   17dbc:	2000      	movs	r0, #0
   17dbe:	f003 ffaf 	bl	1bd20 <rpc_client_request_alloc>
   17dc2:	b128      	cbz	r0, 17dd0 <nrf_modem_at_init+0x20>
   17dc4:	2201      	movs	r2, #1
   17dc6:	2105      	movs	r1, #5
   17dc8:	f7ff ffce 	bl	17d68 <at_cmd_send>
   17dcc:	2000      	movs	r0, #0
   17dce:	bd08      	pop	{r3, pc}
   17dd0:	f06f 000b 	mvn.w	r0, #11
   17dd4:	e7fb      	b.n	17dce <nrf_modem_at_init+0x1e>
   17dd6:	bf00      	nop
   17dd8:	2000d538 	.word	0x2000d538

00017ddc <rpc_at_event_handler>:
   17ddc:	b570      	push	{r4, r5, r6, lr}
   17dde:	68c3      	ldr	r3, [r0, #12]
   17de0:	4605      	mov	r5, r0
   17de2:	2ba7      	cmp	r3, #167	; 0xa7
   17de4:	d003      	beq.n	17dee <rpc_at_event_handler+0x12>
   17de6:	6828      	ldr	r0, [r5, #0]
   17de8:	f003 ffa7 	bl	1bd3a <rpc_client_data_free>
   17dec:	e008      	b.n	17e00 <rpc_at_event_handler+0x24>
   17dee:	2903      	cmp	r1, #3
   17df0:	d008      	beq.n	17e04 <rpc_at_event_handler+0x28>
   17df2:	2904      	cmp	r1, #4
   17df4:	d019      	beq.n	17e2a <rpc_at_event_handler+0x4e>
   17df6:	2902      	cmp	r1, #2
   17df8:	d102      	bne.n	17e00 <rpc_at_event_handler+0x24>
   17dfa:	2201      	movs	r2, #1
   17dfc:	4b0e      	ldr	r3, [pc, #56]	; (17e38 <rpc_at_event_handler+0x5c>)
   17dfe:	701a      	strb	r2, [r3, #0]
   17e00:	2000      	movs	r0, #0
   17e02:	e00a      	b.n	17e1a <rpc_at_event_handler+0x3e>
   17e04:	4e0d      	ldr	r6, [pc, #52]	; (17e3c <rpc_at_event_handler+0x60>)
   17e06:	6833      	ldr	r3, [r6, #0]
   17e08:	b143      	cbz	r3, 17e1c <rpc_at_event_handler+0x40>
   17e0a:	2400      	movs	r4, #0
   17e0c:	6800      	ldr	r0, [r0, #0]
   17e0e:	4798      	blx	r3
   17e10:	6828      	ldr	r0, [r5, #0]
   17e12:	6034      	str	r4, [r6, #0]
   17e14:	f003 ff91 	bl	1bd3a <rpc_client_data_free>
   17e18:	b2e0      	uxtb	r0, r4
   17e1a:	bd70      	pop	{r4, r5, r6, pc}
   17e1c:	2202      	movs	r2, #2
   17e1e:	4b08      	ldr	r3, [pc, #32]	; (17e40 <rpc_at_event_handler+0x64>)
   17e20:	2401      	movs	r4, #1
   17e22:	6018      	str	r0, [r3, #0]
   17e24:	4b04      	ldr	r3, [pc, #16]	; (17e38 <rpc_at_event_handler+0x5c>)
   17e26:	701a      	strb	r2, [r3, #0]
   17e28:	e7f6      	b.n	17e18 <rpc_at_event_handler+0x3c>
   17e2a:	4b06      	ldr	r3, [pc, #24]	; (17e44 <rpc_at_event_handler+0x68>)
   17e2c:	681b      	ldr	r3, [r3, #0]
   17e2e:	2b00      	cmp	r3, #0
   17e30:	d0d9      	beq.n	17de6 <rpc_at_event_handler+0xa>
   17e32:	6800      	ldr	r0, [r0, #0]
   17e34:	4798      	blx	r3
   17e36:	e7d6      	b.n	17de6 <rpc_at_event_handler+0xa>
   17e38:	2000db18 	.word	0x2000db18
   17e3c:	2000d544 	.word	0x2000d544
   17e40:	2000d540 	.word	0x2000d540
   17e44:	2000d53c 	.word	0x2000d53c

00017e48 <rpc_dfu_event_handler>:
   17e48:	b510      	push	{r4, lr}
   17e4a:	4604      	mov	r4, r0
   17e4c:	6800      	ldr	r0, [r0, #0]
   17e4e:	b108      	cbz	r0, 17e54 <rpc_dfu_event_handler+0xc>
   17e50:	f003 ff73 	bl	1bd3a <rpc_client_data_free>
   17e54:	4b05      	ldr	r3, [pc, #20]	; (17e6c <rpc_dfu_event_handler+0x24>)
   17e56:	68e2      	ldr	r2, [r4, #12]
   17e58:	429a      	cmp	r2, r3
   17e5a:	bf05      	ittet	eq
   17e5c:	2001      	moveq	r0, #1
   17e5e:	4b04      	ldreq	r3, [pc, #16]	; (17e70 <rpc_dfu_event_handler+0x28>)
   17e60:	2000      	movne	r0, #0
   17e62:	7018      	strbeq	r0, [r3, #0]
   17e64:	bf04      	itt	eq
   17e66:	4b03      	ldreq	r3, [pc, #12]	; (17e74 <rpc_dfu_event_handler+0x2c>)
   17e68:	601c      	streq	r4, [r3, #0]
   17e6a:	bd10      	pop	{r4, pc}
   17e6c:	15abe11a 	.word	0x15abe11a
   17e70:	2000db19 	.word	0x2000db19
   17e74:	2000d548 	.word	0x2000d548

00017e78 <rpc_gnss_event_handler>:
   17e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e7c:	6804      	ldr	r4, [r0, #0]
   17e7e:	4607      	mov	r7, r0
   17e80:	460d      	mov	r5, r1
   17e82:	2c00      	cmp	r4, #0
   17e84:	f000 8086 	beq.w	17f94 <rpc_gnss_event_handler+0x11c>
   17e88:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   17e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   17e90:	d142      	bne.n	17f18 <rpc_gnss_event_handler+0xa0>
   17e92:	4b5f      	ldr	r3, [pc, #380]	; (18010 <rpc_gnss_event_handler+0x198>)
   17e94:	781a      	ldrb	r2, [r3, #0]
   17e96:	4698      	mov	r8, r3
   17e98:	2a01      	cmp	r2, #1
   17e9a:	d131      	bne.n	17f00 <rpc_gnss_event_handler+0x88>
   17e9c:	4a5d      	ldr	r2, [pc, #372]	; (18014 <rpc_gnss_event_handler+0x19c>)
   17e9e:	6821      	ldr	r1, [r4, #0]
   17ea0:	8812      	ldrh	r2, [r2, #0]
   17ea2:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   17ea6:	d12b      	bne.n	17f00 <rpc_gnss_event_handler+0x88>
   17ea8:	6862      	ldr	r2, [r4, #4]
   17eaa:	bb6a      	cbnz	r2, 17f08 <rpc_gnss_event_handler+0x90>
   17eac:	4b5a      	ldr	r3, [pc, #360]	; (18018 <rpc_gnss_event_handler+0x1a0>)
   17eae:	681e      	ldr	r6, [r3, #0]
   17eb0:	b31e      	cbz	r6, 17efa <rpc_gnss_event_handler+0x82>
   17eb2:	f242 0309 	movw	r3, #8201	; 0x2009
   17eb6:	429d      	cmp	r5, r3
   17eb8:	d11f      	bne.n	17efa <rpc_gnss_event_handler+0x82>
   17eba:	4630      	mov	r0, r6
   17ebc:	8923      	ldrh	r3, [r4, #8]
   17ebe:	2280      	movs	r2, #128	; 0x80
   17ec0:	f840 3b04 	str.w	r3, [r0], #4
   17ec4:	f104 010a 	add.w	r1, r4, #10
   17ec8:	f003 fb19 	bl	1b4fe <memcpy>
   17ecc:	2280      	movs	r2, #128	; 0x80
   17ece:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   17ed2:	f106 0084 	add.w	r0, r6, #132	; 0x84
   17ed6:	f003 fb12 	bl	1b4fe <memcpy>
   17eda:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   17ede:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   17ee2:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   17ee6:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   17eea:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   17eee:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   17ef2:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   17ef6:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   17efa:	2300      	movs	r3, #0
   17efc:	f888 3000 	strb.w	r3, [r8]
   17f00:	6838      	ldr	r0, [r7, #0]
   17f02:	f003 ff1a 	bl	1bd3a <rpc_client_data_free>
   17f06:	e045      	b.n	17f94 <rpc_gnss_event_handler+0x11c>
   17f08:	f647 71ff 	movw	r1, #32767	; 0x7fff
   17f0c:	428a      	cmp	r2, r1
   17f0e:	bf0c      	ite	eq
   17f10:	2203      	moveq	r2, #3
   17f12:	2202      	movne	r2, #2
   17f14:	701a      	strb	r2, [r3, #0]
   17f16:	e7f3      	b.n	17f00 <rpc_gnss_event_handler+0x88>
   17f18:	4e40      	ldr	r6, [pc, #256]	; (1801c <rpc_gnss_event_handler+0x1a4>)
   17f1a:	6833      	ldr	r3, [r6, #0]
   17f1c:	2b00      	cmp	r3, #0
   17f1e:	d0ef      	beq.n	17f00 <rpc_gnss_event_handler+0x88>
   17f20:	f244 0204 	movw	r2, #16388	; 0x4004
   17f24:	4291      	cmp	r1, r2
   17f26:	d80b      	bhi.n	17f40 <rpc_gnss_event_handler+0xc8>
   17f28:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   17f2c:	d9e8      	bls.n	17f00 <rpc_gnss_event_handler+0x88>
   17f2e:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   17f32:	3a02      	subs	r2, #2
   17f34:	2a02      	cmp	r2, #2
   17f36:	d80b      	bhi.n	17f50 <rpc_gnss_event_handler+0xd8>
   17f38:	e8df f002 	tbb	[pc, r2]
   17f3c:	4f45      	.short	0x4f45
   17f3e:	59          	.byte	0x59
   17f3f:	00          	.byte	0x00
   17f40:	f244 1301 	movw	r3, #16641	; 0x4101
   17f44:	4299      	cmp	r1, r3
   17f46:	d003      	beq.n	17f50 <rpc_gnss_event_handler+0xd8>
   17f48:	f244 2301 	movw	r3, #16897	; 0x4201
   17f4c:	4299      	cmp	r1, r3
   17f4e:	d1d7      	bne.n	17f00 <rpc_gnss_event_handler+0x88>
   17f50:	4f33      	ldr	r7, [pc, #204]	; (18020 <rpc_gnss_event_handler+0x1a8>)
   17f52:	6838      	ldr	r0, [r7, #0]
   17f54:	b108      	cbz	r0, 17f5a <rpc_gnss_event_handler+0xe2>
   17f56:	f003 fef0 	bl	1bd3a <rpc_client_data_free>
   17f5a:	f244 2301 	movw	r3, #16897	; 0x4201
   17f5e:	429d      	cmp	r5, r3
   17f60:	4b30      	ldr	r3, [pc, #192]	; (18024 <rpc_gnss_event_handler+0x1ac>)
   17f62:	d11a      	bne.n	17f9a <rpc_gnss_event_handler+0x122>
   17f64:	2202      	movs	r2, #2
   17f66:	603c      	str	r4, [r7, #0]
   17f68:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   17f6c:	701a      	strb	r2, [r3, #0]
   17f6e:	07e3      	lsls	r3, r4, #31
   17f70:	d502      	bpl.n	17f78 <rpc_gnss_event_handler+0x100>
   17f72:	2002      	movs	r0, #2
   17f74:	6833      	ldr	r3, [r6, #0]
   17f76:	4798      	blx	r3
   17f78:	4d2b      	ldr	r5, [pc, #172]	; (18028 <rpc_gnss_event_handler+0x1b0>)
   17f7a:	f014 0418 	ands.w	r4, r4, #24
   17f7e:	6833      	ldr	r3, [r6, #0]
   17f80:	782a      	ldrb	r2, [r5, #0]
   17f82:	d01a      	beq.n	17fba <rpc_gnss_event_handler+0x142>
   17f84:	b91a      	cbnz	r2, 17f8e <rpc_gnss_event_handler+0x116>
   17f86:	2005      	movs	r0, #5
   17f88:	4798      	blx	r3
   17f8a:	2301      	movs	r3, #1
   17f8c:	702b      	strb	r3, [r5, #0]
   17f8e:	2001      	movs	r0, #1
   17f90:	6833      	ldr	r3, [r6, #0]
   17f92:	4798      	blx	r3
   17f94:	2000      	movs	r0, #0
   17f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17f9a:	f244 1201 	movw	r2, #16641	; 0x4101
   17f9e:	4295      	cmp	r5, r2
   17fa0:	bf0b      	itete	eq
   17fa2:	2201      	moveq	r2, #1
   17fa4:	2200      	movne	r2, #0
   17fa6:	603c      	streq	r4, [r7, #0]
   17fa8:	603c      	strne	r4, [r7, #0]
   17faa:	bf0b      	itete	eq
   17fac:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   17fb0:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   17fb4:	701a      	strbeq	r2, [r3, #0]
   17fb6:	701a      	strbne	r2, [r3, #0]
   17fb8:	e7d9      	b.n	17f6e <rpc_gnss_event_handler+0xf6>
   17fba:	2a00      	cmp	r2, #0
   17fbc:	d0e7      	beq.n	17f8e <rpc_gnss_event_handler+0x116>
   17fbe:	2006      	movs	r0, #6
   17fc0:	4798      	blx	r3
   17fc2:	702c      	strb	r4, [r5, #0]
   17fc4:	e7e3      	b.n	17f8e <rpc_gnss_event_handler+0x116>
   17fc6:	4c19      	ldr	r4, [pc, #100]	; (1802c <rpc_gnss_event_handler+0x1b4>)
   17fc8:	6820      	ldr	r0, [r4, #0]
   17fca:	b108      	cbz	r0, 17fd0 <rpc_gnss_event_handler+0x158>
   17fcc:	f003 feb5 	bl	1bd3a <rpc_client_data_free>
   17fd0:	683b      	ldr	r3, [r7, #0]
   17fd2:	2003      	movs	r0, #3
   17fd4:	6023      	str	r3, [r4, #0]
   17fd6:	6833      	ldr	r3, [r6, #0]
   17fd8:	e7db      	b.n	17f92 <rpc_gnss_event_handler+0x11a>
   17fda:	4c15      	ldr	r4, [pc, #84]	; (18030 <rpc_gnss_event_handler+0x1b8>)
   17fdc:	6820      	ldr	r0, [r4, #0]
   17fde:	b108      	cbz	r0, 17fe4 <rpc_gnss_event_handler+0x16c>
   17fe0:	f003 feab 	bl	1bd3a <rpc_client_data_free>
   17fe4:	683b      	ldr	r3, [r7, #0]
   17fe6:	2004      	movs	r0, #4
   17fe8:	6023      	str	r3, [r4, #0]
   17fea:	6833      	ldr	r3, [r6, #0]
   17fec:	e7d1      	b.n	17f92 <rpc_gnss_event_handler+0x11a>
   17fee:	7822      	ldrb	r2, [r4, #0]
   17ff0:	2a03      	cmp	r2, #3
   17ff2:	d885      	bhi.n	17f00 <rpc_gnss_event_handler+0x88>
   17ff4:	e8df f002 	tbb	[pc, r2]
   17ff8:	09070502 	.word	0x09070502
   17ffc:	2007      	movs	r0, #7
   17ffe:	4798      	blx	r3
   18000:	e77e      	b.n	17f00 <rpc_gnss_event_handler+0x88>
   18002:	2008      	movs	r0, #8
   18004:	e7fb      	b.n	17ffe <rpc_gnss_event_handler+0x186>
   18006:	2009      	movs	r0, #9
   18008:	e7f9      	b.n	17ffe <rpc_gnss_event_handler+0x186>
   1800a:	200a      	movs	r0, #10
   1800c:	e7f7      	b.n	17ffe <rpc_gnss_event_handler+0x186>
   1800e:	bf00      	nop
   18010:	2000db1c 	.word	0x2000db1c
   18014:	2000d5d2 	.word	0x2000d5d2
   18018:	2000d55c 	.word	0x2000d55c
   1801c:	2000d54c 	.word	0x2000d54c
   18020:	2000d550 	.word	0x2000d550
   18024:	2000db1b 	.word	0x2000db1b
   18028:	2000db1a 	.word	0x2000db1a
   1802c:	2000d558 	.word	0x2000d558
   18030:	2000d554 	.word	0x2000d554

00018034 <full_dfu_ipc_irq_handler>:
   18034:	2301      	movs	r3, #1
   18036:	4a03      	ldr	r2, [pc, #12]	; (18044 <full_dfu_ipc_irq_handler+0x10>)
   18038:	6013      	str	r3, [r2, #0]
   1803a:	07c2      	lsls	r2, r0, #31
   1803c:	bf44      	itt	mi
   1803e:	4a02      	ldrmi	r2, [pc, #8]	; (18048 <full_dfu_ipc_irq_handler+0x14>)
   18040:	7013      	strbmi	r3, [r2, #0]
   18042:	4770      	bx	lr
   18044:	2000d560 	.word	0x2000d560
   18048:	2000db1d 	.word	0x2000db1d

0001804c <modem_ipc_wait_for_event>:
   1804c:	b538      	push	{r3, r4, r5, lr}
   1804e:	2300      	movs	r3, #0
   18050:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   18054:	4c0b      	ldr	r4, [pc, #44]	; (18084 <modem_ipc_wait_for_event+0x38>)
   18056:	6023      	str	r3, [r4, #0]
   18058:	6823      	ldr	r3, [r4, #0]
   1805a:	b92b      	cbnz	r3, 18068 <modem_ipc_wait_for_event+0x1c>
   1805c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18060:	f003 fd22 	bl	1baa8 <nrf_modem_os_busywait>
   18064:	3d01      	subs	r5, #1
   18066:	d1f7      	bne.n	18058 <modem_ipc_wait_for_event+0xc>
   18068:	6823      	ldr	r3, [r4, #0]
   1806a:	b913      	cbnz	r3, 18072 <modem_ipc_wait_for_event+0x26>
   1806c:	f06f 0073 	mvn.w	r0, #115	; 0x73
   18070:	e006      	b.n	18080 <modem_ipc_wait_for_event+0x34>
   18072:	4b05      	ldr	r3, [pc, #20]	; (18088 <modem_ipc_wait_for_event+0x3c>)
   18074:	781b      	ldrb	r3, [r3, #0]
   18076:	2b01      	cmp	r3, #1
   18078:	bf14      	ite	ne
   1807a:	2000      	movne	r0, #0
   1807c:	f06f 0004 	mvneq.w	r0, #4
   18080:	bd38      	pop	{r3, r4, r5, pc}
   18082:	bf00      	nop
   18084:	2000d560 	.word	0x2000d560
   18088:	2000db1d 	.word	0x2000db1d

0001808c <nrf_modem_full_dfu_setup>:
   1808c:	2200      	movs	r2, #0
   1808e:	2300      	movs	r3, #0
   18090:	b5f0      	push	{r4, r5, r6, r7, lr}
   18092:	4d2b      	ldr	r5, [pc, #172]	; (18140 <nrf_modem_full_dfu_setup+0xb4>)
   18094:	4e2b      	ldr	r6, [pc, #172]	; (18144 <nrf_modem_full_dfu_setup+0xb8>)
   18096:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1809a:	e9c5 2304 	strd	r2, r3, [r5, #16]
   1809e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   180a2:	4b29      	ldr	r3, [pc, #164]	; (18148 <nrf_modem_full_dfu_setup+0xbc>)
   180a4:	2400      	movs	r4, #0
   180a6:	601a      	str	r2, [r3, #0]
   180a8:	f100 031c 	add.w	r3, r0, #28
   180ac:	6033      	str	r3, [r6, #0]
   180ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   180b2:	6043      	str	r3, [r0, #4]
   180b4:	231c      	movs	r3, #28
   180b6:	7203      	strb	r3, [r0, #8]
   180b8:	2320      	movs	r3, #32
   180ba:	2701      	movs	r7, #1
   180bc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   180c0:	7243      	strb	r3, [r0, #9]
   180c2:	4b22      	ldr	r3, [pc, #136]	; (1814c <nrf_modem_full_dfu_setup+0xc0>)
   180c4:	7004      	strb	r4, [r0, #0]
   180c6:	7044      	strb	r4, [r0, #1]
   180c8:	70c2      	strb	r2, [r0, #3]
   180ca:	7284      	strb	r4, [r0, #10]
   180cc:	72c4      	strb	r4, [r0, #11]
   180ce:	7087      	strb	r7, [r0, #2]
   180d0:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   180d4:	702c      	strb	r4, [r5, #0]
   180d6:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   180da:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   180de:	4b1c      	ldr	r3, [pc, #112]	; (18150 <nrf_modem_full_dfu_setup+0xc4>)
   180e0:	b093      	sub	sp, #76	; 0x4c
   180e2:	4622      	mov	r2, r4
   180e4:	4620      	mov	r0, r4
   180e6:	491b      	ldr	r1, [pc, #108]	; (18154 <nrf_modem_full_dfu_setup+0xc8>)
   180e8:	701c      	strb	r4, [r3, #0]
   180ea:	f7fe faf5 	bl	166d8 <nrfx_ipc_init>
   180ee:	4621      	mov	r1, r4
   180f0:	2240      	movs	r2, #64	; 0x40
   180f2:	a801      	add	r0, sp, #4
   180f4:	f003 fa0e 	bl	1b514 <memset>
   180f8:	2302      	movs	r3, #2
   180fa:	9302      	str	r3, [sp, #8]
   180fc:	2304      	movs	r3, #4
   180fe:	930b      	str	r3, [sp, #44]	; 0x2c
   18100:	2305      	movs	r3, #5
   18102:	a801      	add	r0, sp, #4
   18104:	9311      	str	r3, [sp, #68]	; 0x44
   18106:	9709      	str	r7, [sp, #36]	; 0x24
   18108:	f7fe fb0c 	bl	16724 <nrfx_ipc_config_load>
   1810c:	4b12      	ldr	r3, [pc, #72]	; (18158 <nrf_modem_full_dfu_setup+0xcc>)
   1810e:	9400      	str	r4, [sp, #0]
   18110:	6836      	ldr	r6, [r6, #0]
   18112:	601c      	str	r4, [r3, #0]
   18114:	681b      	ldr	r3, [r3, #0]
   18116:	9300      	str	r3, [sp, #0]
   18118:	9b00      	ldr	r3, [sp, #0]
   1811a:	f7ff ff97 	bl	1804c <modem_ipc_wait_for_event>
   1811e:	4604      	mov	r4, r0
   18120:	b130      	cbz	r0, 18130 <nrf_modem_full_dfu_setup+0xa4>
   18122:	2303      	movs	r3, #3
   18124:	702b      	strb	r3, [r5, #0]
   18126:	f7fe fb3b 	bl	167a0 <nrfx_ipc_uninit>
   1812a:	4620      	mov	r0, r4
   1812c:	b013      	add	sp, #76	; 0x4c
   1812e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18130:	6832      	ldr	r2, [r6, #0]
   18132:	4b0a      	ldr	r3, [pc, #40]	; (1815c <nrf_modem_full_dfu_setup+0xd0>)
   18134:	429a      	cmp	r2, r3
   18136:	d0f8      	beq.n	1812a <nrf_modem_full_dfu_setup+0x9e>
   18138:	f06f 0404 	mvn.w	r4, #4
   1813c:	e7f3      	b.n	18126 <nrf_modem_full_dfu_setup+0x9a>
   1813e:	bf00      	nop
   18140:	2000cca0 	.word	0x2000cca0
   18144:	2000d564 	.word	0x2000d564
   18148:	2000d568 	.word	0x2000d568
   1814c:	4002a000 	.word	0x4002a000
   18150:	2000db1d 	.word	0x2000db1d
   18154:	00018035 	.word	0x00018035
   18158:	40005610 	.word	0x40005610
   1815c:	a5000001 	.word	0xa5000001

00018160 <modem_off>:
   18160:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18162:	2501      	movs	r5, #1
   18164:	4c07      	ldr	r4, [pc, #28]	; (18184 <modem_off+0x24>)
   18166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1816a:	6065      	str	r5, [r4, #4]
   1816c:	f003 fc9c 	bl	1baa8 <nrf_modem_os_busywait>
   18170:	2300      	movs	r3, #0
   18172:	6063      	str	r3, [r4, #4]
   18174:	9301      	str	r3, [sp, #4]
   18176:	6025      	str	r5, [r4, #0]
   18178:	6823      	ldr	r3, [r4, #0]
   1817a:	9301      	str	r3, [sp, #4]
   1817c:	9b01      	ldr	r3, [sp, #4]
   1817e:	b003      	add	sp, #12
   18180:	bd30      	pop	{r4, r5, pc}
   18182:	bf00      	nop
   18184:	40005610 	.word	0x40005610

00018188 <nrf_modem_init>:
   18188:	b570      	push	{r4, r5, r6, lr}
   1818a:	460d      	mov	r5, r1
   1818c:	b300      	cbz	r0, 181d0 <nrf_modem_init+0x48>
   1818e:	4e15      	ldr	r6, [pc, #84]	; (181e4 <nrf_modem_init+0x5c>)
   18190:	7832      	ldrb	r2, [r6, #0]
   18192:	bb02      	cbnz	r2, 181d6 <nrf_modem_init+0x4e>
   18194:	2901      	cmp	r1, #1
   18196:	d113      	bne.n	181c0 <nrf_modem_init+0x38>
   18198:	68c1      	ldr	r1, [r0, #12]
   1819a:	6842      	ldr	r2, [r0, #4]
   1819c:	440a      	add	r2, r1
   1819e:	6941      	ldr	r1, [r0, #20]
   181a0:	440a      	add	r2, r1
   181a2:	69c1      	ldr	r1, [r0, #28]
   181a4:	440a      	add	r2, r1
   181a6:	f242 011b 	movw	r1, #8219	; 0x201b
   181aa:	428a      	cmp	r2, r1
   181ac:	d916      	bls.n	181dc <nrf_modem_init+0x54>
   181ae:	6800      	ldr	r0, [r0, #0]
   181b0:	f7ff ff6c 	bl	1808c <nrf_modem_full_dfu_setup>
   181b4:	4604      	mov	r4, r0
   181b6:	b130      	cbz	r0, 181c6 <nrf_modem_init+0x3e>
   181b8:	f7ff ffd2 	bl	18160 <modem_off>
   181bc:	4620      	mov	r0, r4
   181be:	bd70      	pop	{r4, r5, r6, pc}
   181c0:	f003 fe1f 	bl	1be02 <nrf_modem_platform_init>
   181c4:	e7f6      	b.n	181b4 <nrf_modem_init+0x2c>
   181c6:	4b08      	ldr	r3, [pc, #32]	; (181e8 <nrf_modem_init+0x60>)
   181c8:	701d      	strb	r5, [r3, #0]
   181ca:	2301      	movs	r3, #1
   181cc:	7033      	strb	r3, [r6, #0]
   181ce:	e7f5      	b.n	181bc <nrf_modem_init+0x34>
   181d0:	f06f 040d 	mvn.w	r4, #13
   181d4:	e7f2      	b.n	181bc <nrf_modem_init+0x34>
   181d6:	f04f 34ff 	mov.w	r4, #4294967295
   181da:	e7ef      	b.n	181bc <nrf_modem_init+0x34>
   181dc:	f06f 040b 	mvn.w	r4, #11
   181e0:	e7ec      	b.n	181bc <nrf_modem_init+0x34>
   181e2:	bf00      	nop
   181e4:	2000db1e 	.word	0x2000db1e
   181e8:	2000db1f 	.word	0x2000db1f

000181ec <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   181ec:	4b0e      	ldr	r3, [pc, #56]	; (18228 <z_sys_init_run_level+0x3c>)
{
   181ee:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   181f0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   181f4:	3001      	adds	r0, #1
   181f6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   181fa:	42a6      	cmp	r6, r4
   181fc:	d800      	bhi.n	18200 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   181fe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   18200:	e9d4 3500 	ldrd	r3, r5, [r4]
   18204:	4628      	mov	r0, r5
   18206:	4798      	blx	r3
		if (dev != NULL) {
   18208:	b165      	cbz	r5, 18224 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1820a:	68eb      	ldr	r3, [r5, #12]
   1820c:	b130      	cbz	r0, 1821c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1820e:	2800      	cmp	r0, #0
   18210:	bfb8      	it	lt
   18212:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   18214:	28ff      	cmp	r0, #255	; 0xff
   18216:	bfa8      	it	ge
   18218:	20ff      	movge	r0, #255	; 0xff
   1821a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1821c:	785a      	ldrb	r2, [r3, #1]
   1821e:	f042 0201 	orr.w	r2, r2, #1
   18222:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18224:	3408      	adds	r4, #8
   18226:	e7e8      	b.n	181fa <z_sys_init_run_level+0xe>
   18228:	0001c5b8 	.word	0x0001c5b8

0001822c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1822c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1822e:	4605      	mov	r5, r0
   18230:	b910      	cbnz	r0, 18238 <z_impl_device_get_binding+0xc>
		return NULL;
   18232:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   18234:	4620      	mov	r0, r4
   18236:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   18238:	7803      	ldrb	r3, [r0, #0]
   1823a:	2b00      	cmp	r3, #0
   1823c:	d0f9      	beq.n	18232 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1823e:	4a0f      	ldr	r2, [pc, #60]	; (1827c <z_impl_device_get_binding+0x50>)
   18240:	4c0f      	ldr	r4, [pc, #60]	; (18280 <z_impl_device_get_binding+0x54>)
   18242:	4616      	mov	r6, r2
   18244:	4294      	cmp	r4, r2
   18246:	d108      	bne.n	1825a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   18248:	4c0d      	ldr	r4, [pc, #52]	; (18280 <z_impl_device_get_binding+0x54>)
   1824a:	42b4      	cmp	r4, r6
   1824c:	d0f1      	beq.n	18232 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1824e:	4620      	mov	r0, r4
   18250:	f003 fdf2 	bl	1be38 <z_device_ready>
   18254:	b950      	cbnz	r0, 1826c <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   18256:	3418      	adds	r4, #24
   18258:	e7f7      	b.n	1824a <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1825a:	4620      	mov	r0, r4
   1825c:	f003 fdec 	bl	1be38 <z_device_ready>
   18260:	b110      	cbz	r0, 18268 <z_impl_device_get_binding+0x3c>
   18262:	6823      	ldr	r3, [r4, #0]
   18264:	42ab      	cmp	r3, r5
   18266:	d0e5      	beq.n	18234 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   18268:	3418      	adds	r4, #24
   1826a:	e7eb      	b.n	18244 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1826c:	4628      	mov	r0, r5
   1826e:	6821      	ldr	r1, [r4, #0]
   18270:	f003 f929 	bl	1b4c6 <strcmp>
   18274:	2800      	cmp	r0, #0
   18276:	d1ee      	bne.n	18256 <z_impl_device_get_binding+0x2a>
   18278:	e7dc      	b.n	18234 <z_impl_device_get_binding+0x8>
   1827a:	bf00      	nop
   1827c:	0001c100 	.word	0x0001c100
   18280:	0001c088 	.word	0x0001c088

00018284 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   18284:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18288:	4605      	mov	r5, r0
   1828a:	460f      	mov	r7, r1
	__asm__ volatile(
   1828c:	f04f 0320 	mov.w	r3, #32
   18290:	f3ef 8811 	mrs	r8, BASEPRI
   18294:	f383 8812 	msr	BASEPRI_MAX, r3
   18298:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1829c:	f002 f952 	bl	1a544 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   182a0:	2200      	movs	r2, #0
   182a2:	4b26      	ldr	r3, [pc, #152]	; (1833c <z_fatal_error+0xb8>)
   182a4:	4c26      	ldr	r4, [pc, #152]	; (18340 <z_fatal_error+0xbc>)
   182a6:	2d04      	cmp	r5, #4
   182a8:	eba4 0403 	sub.w	r4, r4, r3
   182ac:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   182b0:	bf98      	it	ls
   182b2:	4b24      	ldrls	r3, [pc, #144]	; (18344 <z_fatal_error+0xc0>)
   182b4:	ea4f 1484 	mov.w	r4, r4, lsl #6
   182b8:	4606      	mov	r6, r0
   182ba:	bf94      	ite	ls
   182bc:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   182c0:	4b21      	ldrhi	r3, [pc, #132]	; (18348 <z_fatal_error+0xc4>)
   182c2:	9200      	str	r2, [sp, #0]
   182c4:	4921      	ldr	r1, [pc, #132]	; (1834c <z_fatal_error+0xc8>)
   182c6:	462a      	mov	r2, r5
   182c8:	f044 0001 	orr.w	r0, r4, #1
   182cc:	f003 f859 	bl	1b382 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   182d0:	b147      	cbz	r7, 182e4 <z_fatal_error+0x60>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   182d2:	69fb      	ldr	r3, [r7, #28]
   182d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   182d8:	b123      	cbz	r3, 182e4 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   182da:	491d      	ldr	r1, [pc, #116]	; (18350 <z_fatal_error+0xcc>)
   182dc:	f044 0001 	orr.w	r0, r4, #1
   182e0:	f003 f84f 	bl	1b382 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   182e4:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   182e8:	b12e      	cbz	r6, 182f6 <z_fatal_error+0x72>
   182ea:	4630      	mov	r0, r6
   182ec:	f003 fdc9 	bl	1be82 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   182f0:	b108      	cbz	r0, 182f6 <z_fatal_error+0x72>
   182f2:	7803      	ldrb	r3, [r0, #0]
   182f4:	b903      	cbnz	r3, 182f8 <z_fatal_error+0x74>
		thread_name = "unknown";
   182f6:	4817      	ldr	r0, [pc, #92]	; (18354 <z_fatal_error+0xd0>)
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   182f8:	f003 f856 	bl	1b3a8 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   182fc:	4632      	mov	r2, r6
   182fe:	4603      	mov	r3, r0
   18300:	4915      	ldr	r1, [pc, #84]	; (18358 <z_fatal_error+0xd4>)
   18302:	4620      	mov	r0, r4
   18304:	f003 f83d 	bl	1b382 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   18308:	4639      	mov	r1, r7
   1830a:	4628      	mov	r0, r5
   1830c:	f7fd fc32 	bl	15b74 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   18310:	2d04      	cmp	r5, #4
   18312:	d108      	bne.n	18326 <z_fatal_error+0xa2>
   18314:	4911      	ldr	r1, [pc, #68]	; (1835c <z_fatal_error+0xd8>)
   18316:	4812      	ldr	r0, [pc, #72]	; (18360 <z_fatal_error+0xdc>)
   18318:	228f      	movs	r2, #143	; 0x8f
   1831a:	f002 fe1b 	bl	1af54 <printk>
   1831e:	218f      	movs	r1, #143	; 0x8f
   18320:	480e      	ldr	r0, [pc, #56]	; (1835c <z_fatal_error+0xd8>)
   18322:	f002 fffb 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   18326:	f388 8811 	msr	BASEPRI, r8
   1832a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1832e:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   18330:	b002      	add	sp, #8
   18332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18336:	f7fb b93d 	b.w	135b4 <z_impl_k_thread_abort>
   1833a:	bf00      	nop
   1833c:	0001c308 	.word	0x0001c308
   18340:	0001c348 	.word	0x0001c348
   18344:	0001c5d0 	.word	0x0001c5d0
   18348:	0001d782 	.word	0x0001d782
   1834c:	0001d798 	.word	0x0001d798
   18350:	0001d7c0 	.word	0x0001d7c0
   18354:	0001d790 	.word	0x0001d790
   18358:	0001d7e1 	.word	0x0001d7e1
   1835c:	0001d7f9 	.word	0x0001d7f9
   18360:	0001c625 	.word	0x0001c625

00018364 <init_idle_thread>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   18364:	2300      	movs	r3, #0
   18366:	2201      	movs	r2, #1
{
   18368:	b510      	push	{r4, lr}
   1836a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1836c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   18370:	220f      	movs	r2, #15
   18372:	9301      	str	r3, [sp, #4]
   18374:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   18378:	2318      	movs	r3, #24
   1837a:	4a0b      	ldr	r2, [pc, #44]	; (183a8 <init_idle_thread+0x44>)
	struct k_thread *thread = &z_idle_threads[i];
   1837c:	4c0b      	ldr	r4, [pc, #44]	; (183ac <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1837e:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   18382:	f44f 72a0 	mov.w	r2, #320	; 0x140
   18386:	490a      	ldr	r1, [pc, #40]	; (183b0 <init_idle_thread+0x4c>)
	struct k_thread *thread = &z_idle_threads[i];
   18388:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	z_setup_new_thread(thread, stack,
   1838c:	fb02 1100 	mla	r1, r2, r0, r1
   18390:	9300      	str	r3, [sp, #0]
   18392:	4620      	mov	r0, r4
   18394:	4b07      	ldr	r3, [pc, #28]	; (183b4 <init_idle_thread+0x50>)
   18396:	f000 fa7b 	bl	18890 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1839a:	7b63      	ldrb	r3, [r4, #13]
   1839c:	f023 0304 	bic.w	r3, r3, #4
   183a0:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   183a2:	b006      	add	sp, #24
   183a4:	bd10      	pop	{r4, pc}
   183a6:	bf00      	nop
   183a8:	2000d56c 	.word	0x2000d56c
   183ac:	2000ccb8 	.word	0x2000ccb8
   183b0:	2000ef28 	.word	0x2000ef28
   183b4:	00018b0d 	.word	0x00018b0d

000183b8 <bg_thread_main>:
	z_sys_post_kernel = true;
   183b8:	2201      	movs	r2, #1
{
   183ba:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   183bc:	4b09      	ldr	r3, [pc, #36]	; (183e4 <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   183be:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   183c0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   183c2:	f7ff ff13 	bl	181ec <z_sys_init_run_level>
	boot_banner();
   183c6:	f002 fd77 	bl	1aeb8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   183ca:	2003      	movs	r0, #3
   183cc:	f7ff ff0e 	bl	181ec <z_sys_init_run_level>
	z_init_static_threads();
   183d0:	f000 faf8 	bl	189c4 <z_init_static_threads>
	main();
   183d4:	f7f9 f85c 	bl	11490 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   183d8:	4a03      	ldr	r2, [pc, #12]	; (183e8 <bg_thread_main+0x30>)
   183da:	7b13      	ldrb	r3, [r2, #12]
   183dc:	f023 0301 	bic.w	r3, r3, #1
   183e0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   183e2:	bd08      	pop	{r3, pc}
   183e4:	2000db20 	.word	0x2000db20
   183e8:	2000cd38 	.word	0x2000cd38

000183ec <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   183ec:	4802      	ldr	r0, [pc, #8]	; (183f8 <z_bss_zero+0xc>)
   183ee:	4a03      	ldr	r2, [pc, #12]	; (183fc <z_bss_zero+0x10>)
   183f0:	2100      	movs	r1, #0
   183f2:	1a12      	subs	r2, r2, r0
   183f4:	f003 b88e 	b.w	1b514 <memset>
   183f8:	2000cb78 	.word	0x2000cb78
   183fc:	2000db24 	.word	0x2000db24

00018400 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   18400:	b580      	push	{r7, lr}
   18402:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   18404:	f7fa f87e 	bl	12504 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   18408:	4b2f      	ldr	r3, [pc, #188]	; (184c8 <z_cstart+0xc8>)
	uint32_t msp =
   1840a:	f503 6800 	add.w	r8, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1840e:	f388 8808 	msr	MSP, r8
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   18412:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18416:	2400      	movs	r4, #0
   18418:	23e0      	movs	r3, #224	; 0xe0
   1841a:	4d2c      	ldr	r5, [pc, #176]	; (184cc <z_cstart+0xcc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1841c:	4e2c      	ldr	r6, [pc, #176]	; (184d0 <z_cstart+0xd0>)
   1841e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   18422:	77ec      	strb	r4, [r5, #31]
   18424:	762c      	strb	r4, [r5, #24]
   18426:	766c      	strb	r4, [r5, #25]
   18428:	76ac      	strb	r4, [r5, #26]
   1842a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1842e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18430:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 184e4 <z_cstart+0xe4>
   18434:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   18438:	626b      	str	r3, [r5, #36]	; 0x24
   1843a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1843e:	f7fb f86d 	bl	1351c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   18442:	f7fa fc6b 	bl	12d1c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   18446:	f04f 33ff 	mov.w	r3, #4294967295
   1844a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1844c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1844e:	f7fb fa65 	bl	1391c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   18452:	f7fb f8c1 	bl	135d8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   18456:	f240 1301 	movw	r3, #257	; 0x101
   1845a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1845e:	ab06      	add	r3, sp, #24
   18460:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   18462:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   18466:	f003 fce6 	bl	1be36 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1846a:	4620      	mov	r0, r4
   1846c:	f7ff febe 	bl	181ec <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   18470:	2001      	movs	r0, #1
   18472:	f7ff febb 	bl	181ec <z_sys_init_run_level>
	z_sched_init();
   18476:	f001 ff15 	bl	1a2a4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1847a:	4b16      	ldr	r3, [pc, #88]	; (184d4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   1847c:	4d16      	ldr	r5, [pc, #88]	; (184d8 <z_cstart+0xd8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1847e:	9305      	str	r3, [sp, #20]
   18480:	2301      	movs	r3, #1
   18482:	4916      	ldr	r1, [pc, #88]	; (184dc <z_cstart+0xdc>)
   18484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   18488:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1848c:	4628      	mov	r0, r5
   1848e:	464b      	mov	r3, r9
   18490:	e9cd 4401 	strd	r4, r4, [sp, #4]
   18494:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
   18496:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18498:	f000 f9fa 	bl	18890 <z_setup_new_thread>
   1849c:	4607      	mov	r7, r0
   1849e:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   184a0:	4628      	mov	r0, r5
   184a2:	f022 0204 	bic.w	r2, r2, #4
   184a6:	736a      	strb	r2, [r5, #13]
   184a8:	f001 fbba 	bl	19c20 <z_ready_thread>
		init_idle_thread(i);
   184ac:	4620      	mov	r0, r4
   184ae:	f7ff ff59 	bl	18364 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   184b2:	4b0b      	ldr	r3, [pc, #44]	; (184e0 <z_cstart+0xe0>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   184b4:	464a      	mov	r2, r9
   184b6:	4639      	mov	r1, r7
   184b8:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   184ba:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
   184bc:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   184be:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   184c2:	f7fa fd81 	bl	12fc8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   184c6:	bf00      	nop
   184c8:	2000f068 	.word	0x2000f068
   184cc:	e000ed00 	.word	0xe000ed00
   184d0:	2000d56c 	.word	0x2000d56c
   184d4:	0001ca89 	.word	0x0001ca89
   184d8:	2000cd38 	.word	0x2000cd38
   184dc:	2000df28 	.word	0x2000df28
   184e0:	2000ccb8 	.word	0x2000ccb8
   184e4:	000183b9 	.word	0x000183b9

000184e8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   184e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   184ea:	4d0d      	ldr	r5, [pc, #52]	; (18520 <statics_init+0x38>)
   184ec:	4c0d      	ldr	r4, [pc, #52]	; (18524 <statics_init+0x3c>)
   184ee:	462f      	mov	r7, r5
   184f0:	4e0d      	ldr	r6, [pc, #52]	; (18528 <statics_init+0x40>)
   184f2:	42ac      	cmp	r4, r5
   184f4:	d908      	bls.n	18508 <statics_init+0x20>
   184f6:	4631      	mov	r1, r6
   184f8:	480c      	ldr	r0, [pc, #48]	; (1852c <statics_init+0x44>)
   184fa:	2218      	movs	r2, #24
   184fc:	f002 fd2a 	bl	1af54 <printk>
   18500:	2118      	movs	r1, #24
   18502:	4630      	mov	r0, r6
   18504:	f002 ff0a 	bl	1b31c <assert_post_action>
   18508:	42bc      	cmp	r4, r7
   1850a:	d301      	bcc.n	18510 <statics_init+0x28>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1850c:	2000      	movs	r0, #0
   1850e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   18510:	4620      	mov	r0, r4
   18512:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   18516:	f003 fc99 	bl	1be4c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1851a:	3418      	adds	r4, #24
   1851c:	e7e9      	b.n	184f2 <statics_init+0xa>
   1851e:	bf00      	nop
   18520:	2000cb60 	.word	0x2000cb60
   18524:	2000cb48 	.word	0x2000cb48
   18528:	0001d868 	.word	0x0001d868
   1852c:	0001c625 	.word	0x0001c625

00018530 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   18530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18534:	b087      	sub	sp, #28
   18536:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   1853a:	4606      	mov	r6, r0
   1853c:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1853e:	4640      	mov	r0, r8
   18540:	4649      	mov	r1, r9
{
   18542:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18544:	f003 fd0a 	bl	1bf5c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18548:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1854c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   18550:	f04f 0320 	mov.w	r3, #32
   18554:	f3ef 8411 	mrs	r4, BASEPRI
   18558:	f383 8812 	msr	BASEPRI_MAX, r3
   1855c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18560:	4628      	mov	r0, r5
   18562:	f000 faaf 	bl	18ac4 <z_spin_lock_valid>
   18566:	b940      	cbnz	r0, 1857a <k_heap_aligned_alloc+0x4a>
   18568:	4935      	ldr	r1, [pc, #212]	; (18640 <k_heap_aligned_alloc+0x110>)
   1856a:	4836      	ldr	r0, [pc, #216]	; (18644 <k_heap_aligned_alloc+0x114>)
   1856c:	2281      	movs	r2, #129	; 0x81
   1856e:	f002 fcf1 	bl	1af54 <printk>
   18572:	2181      	movs	r1, #129	; 0x81
   18574:	4832      	ldr	r0, [pc, #200]	; (18640 <k_heap_aligned_alloc+0x110>)
   18576:	f002 fed1 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1857a:	4628      	mov	r0, r5
   1857c:	f000 fabe 	bl	18afc <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18580:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   18584:	b15b      	cbz	r3, 1859e <k_heap_aligned_alloc+0x6e>
   18586:	ea58 0309 	orrs.w	r3, r8, r9
   1858a:	d008      	beq.n	1859e <k_heap_aligned_alloc+0x6e>
   1858c:	492e      	ldr	r1, [pc, #184]	; (18648 <k_heap_aligned_alloc+0x118>)
   1858e:	482d      	ldr	r0, [pc, #180]	; (18644 <k_heap_aligned_alloc+0x114>)
   18590:	2249      	movs	r2, #73	; 0x49
   18592:	f002 fcdf 	bl	1af54 <printk>
   18596:	2149      	movs	r1, #73	; 0x49
   18598:	482b      	ldr	r0, [pc, #172]	; (18648 <k_heap_aligned_alloc+0x118>)
   1859a:	f002 febf 	bl	1b31c <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1859e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 18640 <k_heap_aligned_alloc+0x110>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   185a2:	f106 090c 	add.w	r9, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   185a6:	4652      	mov	r2, sl
   185a8:	4659      	mov	r1, fp
   185aa:	4630      	mov	r0, r6
   185ac:	f7f9 fa78 	bl	11aa0 <sys_heap_aligned_alloc>
   185b0:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   185b2:	f002 fb51 	bl	1ac58 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   185b6:	b1a7      	cbz	r7, 185e2 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   185b8:	4628      	mov	r0, r5
   185ba:	f000 fa91 	bl	18ae0 <z_spin_unlock_valid>
   185be:	b940      	cbnz	r0, 185d2 <k_heap_aligned_alloc+0xa2>
   185c0:	491f      	ldr	r1, [pc, #124]	; (18640 <k_heap_aligned_alloc+0x110>)
   185c2:	4820      	ldr	r0, [pc, #128]	; (18644 <k_heap_aligned_alloc+0x114>)
   185c4:	22ac      	movs	r2, #172	; 0xac
   185c6:	f002 fcc5 	bl	1af54 <printk>
   185ca:	21ac      	movs	r1, #172	; 0xac
   185cc:	481c      	ldr	r0, [pc, #112]	; (18640 <k_heap_aligned_alloc+0x110>)
   185ce:	f002 fea5 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   185d2:	f384 8811 	msr	BASEPRI, r4
   185d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   185da:	4638      	mov	r0, r7
   185dc:	b007      	add	sp, #28
   185de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   185e2:	9b04      	ldr	r3, [sp, #16]
   185e4:	1a1b      	subs	r3, r3, r0
   185e6:	9302      	str	r3, [sp, #8]
   185e8:	9b05      	ldr	r3, [sp, #20]
   185ea:	eb63 0301 	sbc.w	r3, r3, r1
   185ee:	9303      	str	r3, [sp, #12]
   185f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   185f4:	2a01      	cmp	r2, #1
   185f6:	f173 0300 	sbcs.w	r3, r3, #0
   185fa:	dbdd      	blt.n	185b8 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   185fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18600:	4621      	mov	r1, r4
   18602:	e9cd 2300 	strd	r2, r3, [sp]
   18606:	4628      	mov	r0, r5
   18608:	464a      	mov	r2, r9
   1860a:	f001 fc71 	bl	19ef0 <z_pend_curr>
	__asm__ volatile(
   1860e:	f04f 0320 	mov.w	r3, #32
   18612:	f3ef 8411 	mrs	r4, BASEPRI
   18616:	f383 8812 	msr	BASEPRI_MAX, r3
   1861a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1861e:	4628      	mov	r0, r5
   18620:	f000 fa50 	bl	18ac4 <z_spin_lock_valid>
   18624:	b940      	cbnz	r0, 18638 <k_heap_aligned_alloc+0x108>
   18626:	4641      	mov	r1, r8
   18628:	4806      	ldr	r0, [pc, #24]	; (18644 <k_heap_aligned_alloc+0x114>)
   1862a:	2281      	movs	r2, #129	; 0x81
   1862c:	f002 fc92 	bl	1af54 <printk>
   18630:	2181      	movs	r1, #129	; 0x81
   18632:	4640      	mov	r0, r8
   18634:	f002 fe72 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   18638:	4628      	mov	r0, r5
   1863a:	f000 fa5f 	bl	18afc <z_spin_lock_set_owner>
	return k;
   1863e:	e7b2      	b.n	185a6 <k_heap_aligned_alloc+0x76>
   18640:	0001cad3 	.word	0x0001cad3
   18644:	0001c625 	.word	0x0001c625
   18648:	0001d868 	.word	0x0001d868

0001864c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1864e:	4604      	mov	r4, r0
   18650:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18652:	f100 0514 	add.w	r5, r0, #20
   18656:	f04f 0320 	mov.w	r3, #32
   1865a:	f3ef 8711 	mrs	r7, BASEPRI
   1865e:	f383 8812 	msr	BASEPRI_MAX, r3
   18662:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18666:	4628      	mov	r0, r5
   18668:	f000 fa2c 	bl	18ac4 <z_spin_lock_valid>
   1866c:	b940      	cbnz	r0, 18680 <k_heap_free+0x34>
   1866e:	4916      	ldr	r1, [pc, #88]	; (186c8 <k_heap_free+0x7c>)
   18670:	4816      	ldr	r0, [pc, #88]	; (186cc <k_heap_free+0x80>)
   18672:	2281      	movs	r2, #129	; 0x81
   18674:	f002 fc6e 	bl	1af54 <printk>
   18678:	2181      	movs	r1, #129	; 0x81
   1867a:	4813      	ldr	r0, [pc, #76]	; (186c8 <k_heap_free+0x7c>)
   1867c:	f002 fe4e 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   18680:	4628      	mov	r0, r5
   18682:	f000 fa3b 	bl	18afc <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   18686:	4620      	mov	r0, r4
   18688:	4631      	mov	r1, r6
   1868a:	f7f9 f9d1 	bl	11a30 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1868e:	f104 000c 	add.w	r0, r4, #12
   18692:	f003 fc49 	bl	1bf28 <z_unpend_all>
   18696:	b128      	cbz	r0, 186a4 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   18698:	4639      	mov	r1, r7
   1869a:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1869c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   186a0:	f001 b886 	b.w	197b0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   186a4:	4628      	mov	r0, r5
   186a6:	f000 fa1b 	bl	18ae0 <z_spin_unlock_valid>
   186aa:	b940      	cbnz	r0, 186be <k_heap_free+0x72>
   186ac:	4906      	ldr	r1, [pc, #24]	; (186c8 <k_heap_free+0x7c>)
   186ae:	4807      	ldr	r0, [pc, #28]	; (186cc <k_heap_free+0x80>)
   186b0:	22ac      	movs	r2, #172	; 0xac
   186b2:	f002 fc4f 	bl	1af54 <printk>
   186b6:	21ac      	movs	r1, #172	; 0xac
   186b8:	4803      	ldr	r0, [pc, #12]	; (186c8 <k_heap_free+0x7c>)
   186ba:	f002 fe2f 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   186be:	f387 8811 	msr	BASEPRI, r7
   186c2:	f3bf 8f6f 	isb	sy
}
   186c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   186c8:	0001cad3 	.word	0x0001cad3
   186cc:	0001c625 	.word	0x0001c625

000186d0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   186d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   186d4:	4d14      	ldr	r5, [pc, #80]	; (18728 <init_mem_slab_module+0x58>)
   186d6:	4c15      	ldr	r4, [pc, #84]	; (1872c <init_mem_slab_module+0x5c>)
   186d8:	46a8      	mov	r8, r5
   186da:	4e15      	ldr	r6, [pc, #84]	; (18730 <init_mem_slab_module+0x60>)
   186dc:	42ac      	cmp	r4, r5
   186de:	d908      	bls.n	186f2 <init_mem_slab_module+0x22>
   186e0:	4631      	mov	r1, r6
   186e2:	4814      	ldr	r0, [pc, #80]	; (18734 <init_mem_slab_module+0x64>)
   186e4:	223c      	movs	r2, #60	; 0x3c
   186e6:	f002 fc35 	bl	1af54 <printk>
   186ea:	213c      	movs	r1, #60	; 0x3c
   186ec:	4630      	mov	r0, r6
   186ee:	f002 fe15 	bl	1b31c <assert_post_action>
   186f2:	4544      	cmp	r4, r8
   186f4:	d302      	bcc.n	186fc <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
   186f6:	2000      	movs	r0, #0
	return rc;
}
   186f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   186fc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   18700:	ea42 0301 	orr.w	r3, r2, r1
   18704:	f013 0303 	ands.w	r3, r3, #3
   18708:	d10b      	bne.n	18722 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
   1870a:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   1870c:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1870e:	4283      	cmp	r3, r0
   18710:	d101      	bne.n	18716 <init_mem_slab_module+0x46>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18712:	3420      	adds	r4, #32
   18714:	e7e2      	b.n	186dc <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   18716:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   18718:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1871a:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   1871c:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   1871e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   18720:	e7f5      	b.n	1870e <init_mem_slab_module+0x3e>
		return -EINVAL;
   18722:	f06f 0015 	mvn.w	r0, #21
	return rc;
   18726:	e7e7      	b.n	186f8 <init_mem_slab_module+0x28>
   18728:	2000cb48 	.word	0x2000cb48
   1872c:	2000cb08 	.word	0x2000cb08
   18730:	0001d88a 	.word	0x0001d88a
   18734:	0001c625 	.word	0x0001c625

00018738 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   18738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1873c:	4604      	mov	r4, r0
   1873e:	460d      	mov	r5, r1
   18740:	4690      	mov	r8, r2
   18742:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   18744:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   18748:	f04f 0320 	mov.w	r3, #32
   1874c:	f3ef 8711 	mrs	r7, BASEPRI
   18750:	f383 8812 	msr	BASEPRI_MAX, r3
   18754:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18758:	4630      	mov	r0, r6
   1875a:	f000 f9b3 	bl	18ac4 <z_spin_lock_valid>
   1875e:	b940      	cbnz	r0, 18772 <k_mem_slab_alloc+0x3a>
   18760:	491f      	ldr	r1, [pc, #124]	; (187e0 <k_mem_slab_alloc+0xa8>)
   18762:	4820      	ldr	r0, [pc, #128]	; (187e4 <k_mem_slab_alloc+0xac>)
   18764:	2281      	movs	r2, #129	; 0x81
   18766:	f002 fbf5 	bl	1af54 <printk>
   1876a:	2181      	movs	r1, #129	; 0x81
   1876c:	481c      	ldr	r0, [pc, #112]	; (187e0 <k_mem_slab_alloc+0xa8>)
   1876e:	f002 fdd5 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   18772:	4630      	mov	r0, r6
   18774:	f000 f9c2 	bl	18afc <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   18778:	69a3      	ldr	r3, [r4, #24]
   1877a:	b1c3      	cbz	r3, 187ae <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   1877c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1877e:	681b      	ldr	r3, [r3, #0]
   18780:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   18782:	69e3      	ldr	r3, [r4, #28]
   18784:	3301      	adds	r3, #1
   18786:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   18788:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1878a:	4630      	mov	r0, r6
   1878c:	f000 f9a8 	bl	18ae0 <z_spin_unlock_valid>
   18790:	b940      	cbnz	r0, 187a4 <k_mem_slab_alloc+0x6c>
   18792:	4913      	ldr	r1, [pc, #76]	; (187e0 <k_mem_slab_alloc+0xa8>)
   18794:	4813      	ldr	r0, [pc, #76]	; (187e4 <k_mem_slab_alloc+0xac>)
   18796:	22ac      	movs	r2, #172	; 0xac
   18798:	f002 fbdc 	bl	1af54 <printk>
   1879c:	21ac      	movs	r1, #172	; 0xac
   1879e:	4810      	ldr	r0, [pc, #64]	; (187e0 <k_mem_slab_alloc+0xa8>)
   187a0:	f002 fdbc 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   187a4:	f387 8811 	msr	BASEPRI, r7
   187a8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   187ac:	e013      	b.n	187d6 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   187ae:	ea58 0209 	orrs.w	r2, r8, r9
   187b2:	d103      	bne.n	187bc <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
   187b4:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   187b8:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   187ba:	e7e6      	b.n	1878a <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   187bc:	4622      	mov	r2, r4
   187be:	4639      	mov	r1, r7
   187c0:	4630      	mov	r0, r6
   187c2:	e9cd 8900 	strd	r8, r9, [sp]
   187c6:	f001 fb93 	bl	19ef0 <z_pend_curr>
		if (result == 0) {
   187ca:	4604      	mov	r4, r0
   187cc:	b918      	cbnz	r0, 187d6 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   187ce:	4b06      	ldr	r3, [pc, #24]	; (187e8 <k_mem_slab_alloc+0xb0>)
   187d0:	689b      	ldr	r3, [r3, #8]
   187d2:	695b      	ldr	r3, [r3, #20]
   187d4:	602b      	str	r3, [r5, #0]
}
   187d6:	4620      	mov	r0, r4
   187d8:	b003      	add	sp, #12
   187da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   187de:	bf00      	nop
   187e0:	0001cad3 	.word	0x0001cad3
   187e4:	0001c625 	.word	0x0001c625
   187e8:	2000d56c 	.word	0x2000d56c

000187ec <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   187ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187f0:	4604      	mov	r4, r0
   187f2:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   187f4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   187f8:	f04f 0320 	mov.w	r3, #32
   187fc:	f3ef 8711 	mrs	r7, BASEPRI
   18800:	f383 8812 	msr	BASEPRI_MAX, r3
   18804:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18808:	4630      	mov	r0, r6
   1880a:	f000 f95b 	bl	18ac4 <z_spin_lock_valid>
   1880e:	b940      	cbnz	r0, 18822 <k_mem_slab_free+0x36>
   18810:	491d      	ldr	r1, [pc, #116]	; (18888 <k_mem_slab_free+0x9c>)
   18812:	481e      	ldr	r0, [pc, #120]	; (1888c <k_mem_slab_free+0xa0>)
   18814:	2281      	movs	r2, #129	; 0x81
   18816:	f002 fb9d 	bl	1af54 <printk>
   1881a:	2181      	movs	r1, #129	; 0x81
   1881c:	481a      	ldr	r0, [pc, #104]	; (18888 <k_mem_slab_free+0x9c>)
   1881e:	f002 fd7d 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   18822:	4630      	mov	r0, r6
   18824:	f000 f96a 	bl	18afc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   18828:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1882c:	f1b8 0f00 	cmp.w	r8, #0
   18830:	d10f      	bne.n	18852 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   18832:	4620      	mov	r0, r4
   18834:	f001 fcf8 	bl	1a228 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   18838:	b158      	cbz	r0, 18852 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1883a:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1883c:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   18840:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   18842:	f001 f9ed 	bl	19c20 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   18846:	4639      	mov	r1, r7
   18848:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1884a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1884e:	f000 bfaf 	b.w	197b0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   18852:	682b      	ldr	r3, [r5, #0]
   18854:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18856:	4630      	mov	r0, r6
   18858:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1885a:	682b      	ldr	r3, [r5, #0]
   1885c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1885e:	69e3      	ldr	r3, [r4, #28]
   18860:	3b01      	subs	r3, #1
   18862:	61e3      	str	r3, [r4, #28]
   18864:	f000 f93c 	bl	18ae0 <z_spin_unlock_valid>
   18868:	b940      	cbnz	r0, 1887c <k_mem_slab_free+0x90>
   1886a:	4907      	ldr	r1, [pc, #28]	; (18888 <k_mem_slab_free+0x9c>)
   1886c:	4807      	ldr	r0, [pc, #28]	; (1888c <k_mem_slab_free+0xa0>)
   1886e:	22ac      	movs	r2, #172	; 0xac
   18870:	f002 fb70 	bl	1af54 <printk>
   18874:	21ac      	movs	r1, #172	; 0xac
   18876:	4804      	ldr	r0, [pc, #16]	; (18888 <k_mem_slab_free+0x9c>)
   18878:	f002 fd50 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1887c:	f387 8811 	msr	BASEPRI, r7
   18880:	f3bf 8f6f 	isb	sy
}
   18884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18888:	0001cad3 	.word	0x0001cad3
   1888c:	0001c625 	.word	0x0001c625

00018890 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   18890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18894:	b085      	sub	sp, #20
   18896:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1889a:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   1889c:	f1b9 0f0f 	cmp.w	r9, #15
{
   188a0:	460f      	mov	r7, r1
   188a2:	4615      	mov	r5, r2
   188a4:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   188a6:	d12e      	bne.n	18906 <z_setup_new_thread+0x76>
   188a8:	4b1f      	ldr	r3, [pc, #124]	; (18928 <z_setup_new_thread+0x98>)
   188aa:	4598      	cmp	r8, r3
   188ac:	d12f      	bne.n	1890e <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   188ae:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   188b2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   188b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   188b8:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   188ba:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   188bc:	2304      	movs	r3, #4
   188be:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   188c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   188c2:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   188c4:	9302      	str	r3, [sp, #8]
   188c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   188c8:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   188cc:	9301      	str	r3, [sp, #4]
   188ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   188d0:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   188d2:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   188d6:	9300      	str	r3, [sp, #0]
   188d8:	462a      	mov	r2, r5
   188da:	4643      	mov	r3, r8
   188dc:	4639      	mov	r1, r7
   188de:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   188e0:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   188e4:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   188e6:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   188ea:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   188ec:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   188ee:	f7fa fb4f 	bl	12f90 <arch_new_thread>
	if (!_current) {
   188f2:	4b0e      	ldr	r3, [pc, #56]	; (1892c <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   188f4:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   188f6:	689b      	ldr	r3, [r3, #8]
   188f8:	b103      	cbz	r3, 188fc <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   188fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
   188fc:	4628      	mov	r0, r5
   188fe:	6723      	str	r3, [r4, #112]	; 0x70
   18900:	b005      	add	sp, #20
   18902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   18906:	f109 0310 	add.w	r3, r9, #16
   1890a:	2b1e      	cmp	r3, #30
   1890c:	d9cf      	bls.n	188ae <z_setup_new_thread+0x1e>
   1890e:	f240 12ff 	movw	r2, #511	; 0x1ff
   18912:	4907      	ldr	r1, [pc, #28]	; (18930 <z_setup_new_thread+0xa0>)
   18914:	4807      	ldr	r0, [pc, #28]	; (18934 <z_setup_new_thread+0xa4>)
   18916:	f002 fb1d 	bl	1af54 <printk>
   1891a:	f240 11ff 	movw	r1, #511	; 0x1ff
   1891e:	4804      	ldr	r0, [pc, #16]	; (18930 <z_setup_new_thread+0xa0>)
   18920:	f002 fcfc 	bl	1b31c <assert_post_action>
   18924:	e7c3      	b.n	188ae <z_setup_new_thread+0x1e>
   18926:	bf00      	nop
   18928:	00018b0d 	.word	0x00018b0d
   1892c:	2000d56c 	.word	0x2000d56c
   18930:	0001d8af 	.word	0x0001d8af
   18934:	0001c625 	.word	0x0001c625

00018938 <z_impl_k_thread_create>:
{
   18938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1893c:	b087      	sub	sp, #28
   1893e:	4604      	mov	r4, r0
   18940:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   18944:	460d      	mov	r5, r1
   18946:	4690      	mov	r8, r2
   18948:	4699      	mov	r9, r3
   1894a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1894e:	b153      	cbz	r3, 18966 <z_impl_k_thread_create+0x2e>
   18950:	4919      	ldr	r1, [pc, #100]	; (189b8 <z_impl_k_thread_create+0x80>)
   18952:	481a      	ldr	r0, [pc, #104]	; (189bc <z_impl_k_thread_create+0x84>)
   18954:	f44f 721a 	mov.w	r2, #616	; 0x268
   18958:	f002 fafc 	bl	1af54 <printk>
   1895c:	f44f 711a 	mov.w	r1, #616	; 0x268
   18960:	4815      	ldr	r0, [pc, #84]	; (189b8 <z_impl_k_thread_create+0x80>)
   18962:	f002 fcdb 	bl	1b31c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18966:	2300      	movs	r3, #0
   18968:	9305      	str	r3, [sp, #20]
   1896a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1896c:	4642      	mov	r2, r8
   1896e:	9304      	str	r3, [sp, #16]
   18970:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18972:	4629      	mov	r1, r5
   18974:	9303      	str	r3, [sp, #12]
   18976:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18978:	4620      	mov	r0, r4
   1897a:	9302      	str	r3, [sp, #8]
   1897c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1897e:	9301      	str	r3, [sp, #4]
   18980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18982:	9300      	str	r3, [sp, #0]
   18984:	464b      	mov	r3, r9
   18986:	f7ff ff83 	bl	18890 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1898a:	1c7b      	adds	r3, r7, #1
   1898c:	bf08      	it	eq
   1898e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18992:	d005      	beq.n	189a0 <z_impl_k_thread_create+0x68>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18994:	ea56 0307 	orrs.w	r3, r6, r7
   18998:	d106      	bne.n	189a8 <z_impl_k_thread_create+0x70>
	z_sched_start(thread);
   1899a:	4620      	mov	r0, r4
   1899c:	f001 f976 	bl	19c8c <z_sched_start>
}
   189a0:	4620      	mov	r0, r4
   189a2:	b007      	add	sp, #28
   189a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   189a8:	4632      	mov	r2, r6
   189aa:	463b      	mov	r3, r7
   189ac:	4904      	ldr	r1, [pc, #16]	; (189c0 <z_impl_k_thread_create+0x88>)
   189ae:	f104 0018 	add.w	r0, r4, #24
   189b2:	f001 ff33 	bl	1a81c <z_add_timeout>
   189b6:	e7f3      	b.n	189a0 <z_impl_k_thread_create+0x68>
   189b8:	0001d8af 	.word	0x0001d8af
   189bc:	0001c625 	.word	0x0001c625
   189c0:	00019d11 	.word	0x00019d11

000189c4 <z_init_static_threads>:
{
   189c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   189c8:	4f39      	ldr	r7, [pc, #228]	; (18ab0 <z_init_static_threads+0xec>)
   189ca:	4d3a      	ldr	r5, [pc, #232]	; (18ab4 <z_init_static_threads+0xf0>)
   189cc:	463e      	mov	r6, r7
   189ce:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 18abc <z_init_static_threads+0xf8>
{
   189d2:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   189d4:	42bd      	cmp	r5, r7
   189d6:	d90a      	bls.n	189ee <z_init_static_threads+0x2a>
   189d8:	4641      	mov	r1, r8
   189da:	4837      	ldr	r0, [pc, #220]	; (18ab8 <z_init_static_threads+0xf4>)
   189dc:	f240 22cf 	movw	r2, #719	; 0x2cf
   189e0:	f002 fab8 	bl	1af54 <printk>
   189e4:	f240 21cf 	movw	r1, #719	; 0x2cf
   189e8:	4640      	mov	r0, r8
   189ea:	f002 fc97 	bl	1b31c <assert_post_action>
   189ee:	42b5      	cmp	r5, r6
   189f0:	f105 0430 	add.w	r4, r5, #48	; 0x30
   189f4:	d31d      	bcc.n	18a32 <z_init_static_threads+0x6e>
	k_sched_lock();
   189f6:	f000 ff11 	bl	1981c <k_sched_lock>
   189fa:	f240 38e7 	movw	r8, #999	; 0x3e7
   189fe:	f04f 0900 	mov.w	r9, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   18a02:	4c2c      	ldr	r4, [pc, #176]	; (18ab4 <z_init_static_threads+0xf0>)
   18a04:	4d2d      	ldr	r5, [pc, #180]	; (18abc <z_init_static_threads+0xf8>)
   18a06:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 18ab8 <z_init_static_threads+0xf4>
   18a0a:	42b4      	cmp	r4, r6
   18a0c:	d90a      	bls.n	18a24 <z_init_static_threads+0x60>
   18a0e:	4629      	mov	r1, r5
   18a10:	4650      	mov	r0, sl
   18a12:	f240 22ee 	movw	r2, #750	; 0x2ee
   18a16:	f002 fa9d 	bl	1af54 <printk>
   18a1a:	f240 21ee 	movw	r1, #750	; 0x2ee
   18a1e:	4628      	mov	r0, r5
   18a20:	f002 fc7c 	bl	1b31c <assert_post_action>
   18a24:	42b4      	cmp	r4, r6
   18a26:	d321      	bcc.n	18a6c <z_init_static_threads+0xa8>
}
   18a28:	b006      	add	sp, #24
   18a2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   18a2e:	f001 bb65 	b.w	1a0fc <k_sched_unlock>
		z_setup_new_thread(
   18a32:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18a36:	9305      	str	r3, [sp, #20]
   18a38:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18a3c:	9304      	str	r3, [sp, #16]
   18a3e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   18a42:	9303      	str	r3, [sp, #12]
   18a44:	f854 3c18 	ldr.w	r3, [r4, #-24]
   18a48:	9302      	str	r3, [sp, #8]
   18a4a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   18a4e:	9301      	str	r3, [sp, #4]
   18a50:	f854 3c20 	ldr.w	r3, [r4, #-32]
   18a54:	9300      	str	r3, [sp, #0]
   18a56:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   18a5a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   18a5e:	f7ff ff17 	bl	18890 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   18a62:	f854 3c30 	ldr.w	r3, [r4, #-48]
   18a66:	655d      	str	r5, [r3, #84]	; 0x54
   18a68:	4625      	mov	r5, r4
   18a6a:	e7b3      	b.n	189d4 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   18a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18a6e:	1c5a      	adds	r2, r3, #1
   18a70:	d00f      	beq.n	18a92 <z_init_static_threads+0xce>
   18a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   18a76:	4640      	mov	r0, r8
   18a78:	4649      	mov	r1, r9
					    K_MSEC(thread_data->init_delay));
   18a7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18a7e:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18a82:	4549      	cmp	r1, r9
   18a84:	bf08      	it	eq
   18a86:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
   18a88:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18a8a:	d104      	bne.n	18a96 <z_init_static_threads+0xd2>
	z_sched_start(thread);
   18a8c:	4638      	mov	r0, r7
   18a8e:	f001 f8fd 	bl	19c8c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   18a92:	3430      	adds	r4, #48	; 0x30
   18a94:	e7b9      	b.n	18a0a <z_init_static_threads+0x46>
   18a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18a9a:	2300      	movs	r3, #0
   18a9c:	f7f7 fbce 	bl	1023c <__aeabi_uldivmod>
   18aa0:	4602      	mov	r2, r0
   18aa2:	460b      	mov	r3, r1
   18aa4:	f107 0018 	add.w	r0, r7, #24
   18aa8:	4905      	ldr	r1, [pc, #20]	; (18ac0 <z_init_static_threads+0xfc>)
   18aaa:	f001 feb7 	bl	1a81c <z_add_timeout>
   18aae:	e7f0      	b.n	18a92 <z_init_static_threads+0xce>
   18ab0:	2000ca98 	.word	0x2000ca98
   18ab4:	2000ca98 	.word	0x2000ca98
   18ab8:	0001c625 	.word	0x0001c625
   18abc:	0001d8af 	.word	0x0001d8af
   18ac0:	00019d11 	.word	0x00019d11

00018ac4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   18ac4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   18ac6:	b138      	cbz	r0, 18ad8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   18ac8:	4b04      	ldr	r3, [pc, #16]	; (18adc <z_spin_lock_valid+0x18>)
   18aca:	f000 0003 	and.w	r0, r0, #3
   18ace:	7d1b      	ldrb	r3, [r3, #20]
   18ad0:	1ac0      	subs	r0, r0, r3
   18ad2:	bf18      	it	ne
   18ad4:	2001      	movne	r0, #1
   18ad6:	4770      	bx	lr
			return false;
		}
	}
	return true;
   18ad8:	2001      	movs	r0, #1
}
   18ada:	4770      	bx	lr
   18adc:	2000d56c 	.word	0x2000d56c

00018ae0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   18ae0:	4905      	ldr	r1, [pc, #20]	; (18af8 <z_spin_unlock_valid+0x18>)
{
   18ae2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   18ae4:	688a      	ldr	r2, [r1, #8]
   18ae6:	7d08      	ldrb	r0, [r1, #20]
   18ae8:	6819      	ldr	r1, [r3, #0]
   18aea:	4302      	orrs	r2, r0
   18aec:	2000      	movs	r0, #0
   18aee:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   18af0:	bf04      	itt	eq
   18af2:	6018      	streq	r0, [r3, #0]
	return true;
   18af4:	2001      	moveq	r0, #1
}
   18af6:	4770      	bx	lr
   18af8:	2000d56c 	.word	0x2000d56c

00018afc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   18afc:	4a02      	ldr	r2, [pc, #8]	; (18b08 <z_spin_lock_set_owner+0xc>)
   18afe:	7d11      	ldrb	r1, [r2, #20]
   18b00:	6893      	ldr	r3, [r2, #8]
   18b02:	430b      	orrs	r3, r1
   18b04:	6003      	str	r3, [r0, #0]
}
   18b06:	4770      	bx	lr
   18b08:	2000d56c 	.word	0x2000d56c

00018b0c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   18b0c:	4c10      	ldr	r4, [pc, #64]	; (18b50 <idle+0x44>)
{
   18b0e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   18b10:	68a2      	ldr	r2, [r4, #8]
   18b12:	f992 200e 	ldrsb.w	r2, [r2, #14]
   18b16:	2a00      	cmp	r2, #0
   18b18:	da08      	bge.n	18b2c <idle+0x20>
   18b1a:	490e      	ldr	r1, [pc, #56]	; (18b54 <idle+0x48>)
   18b1c:	480e      	ldr	r0, [pc, #56]	; (18b58 <idle+0x4c>)
   18b1e:	2227      	movs	r2, #39	; 0x27
   18b20:	f002 fa18 	bl	1af54 <printk>
   18b24:	2127      	movs	r1, #39	; 0x27
   18b26:	480b      	ldr	r0, [pc, #44]	; (18b54 <idle+0x48>)
   18b28:	f002 fbf8 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   18b2c:	f04f 0220 	mov.w	r2, #32
   18b30:	f3ef 8311 	mrs	r3, BASEPRI
   18b34:	f382 8812 	msr	BASEPRI_MAX, r2
   18b38:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   18b3c:	f001 ff64 	bl	1aa08 <z_get_next_timeout_expiry>
   18b40:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   18b42:	f7fa f85f 	bl	12c04 <pm_system_suspend>
   18b46:	2800      	cmp	r0, #0
   18b48:	d1f0      	bne.n	18b2c <idle+0x20>
	arch_cpu_idle();
   18b4a:	f7fa f8ed 	bl	12d28 <arch_cpu_idle>
}
   18b4e:	e7ed      	b.n	18b2c <idle+0x20>
   18b50:	2000d56c 	.word	0x2000d56c
   18b54:	0001d8d2 	.word	0x0001d8d2
   18b58:	0001c625 	.word	0x0001c625

00018b5c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   18b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18b60:	4604      	mov	r4, r0
   18b62:	4616      	mov	r6, r2
   18b64:	461f      	mov	r7, r3
   18b66:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   18b6a:	b143      	cbz	r3, 18b7e <z_impl_k_mutex_lock+0x22>
   18b6c:	4962      	ldr	r1, [pc, #392]	; (18cf8 <z_impl_k_mutex_lock+0x19c>)
   18b6e:	4863      	ldr	r0, [pc, #396]	; (18cfc <z_impl_k_mutex_lock+0x1a0>)
   18b70:	2265      	movs	r2, #101	; 0x65
   18b72:	f002 f9ef 	bl	1af54 <printk>
   18b76:	2165      	movs	r1, #101	; 0x65
   18b78:	485f      	ldr	r0, [pc, #380]	; (18cf8 <z_impl_k_mutex_lock+0x19c>)
   18b7a:	f002 fbcf 	bl	1b31c <assert_post_action>
   18b7e:	f04f 0320 	mov.w	r3, #32
   18b82:	f3ef 8811 	mrs	r8, BASEPRI
   18b86:	f383 8812 	msr	BASEPRI_MAX, r3
   18b8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b8e:	485c      	ldr	r0, [pc, #368]	; (18d00 <z_impl_k_mutex_lock+0x1a4>)
   18b90:	f7ff ff98 	bl	18ac4 <z_spin_lock_valid>
   18b94:	b940      	cbnz	r0, 18ba8 <z_impl_k_mutex_lock+0x4c>
   18b96:	495b      	ldr	r1, [pc, #364]	; (18d04 <z_impl_k_mutex_lock+0x1a8>)
   18b98:	4858      	ldr	r0, [pc, #352]	; (18cfc <z_impl_k_mutex_lock+0x1a0>)
   18b9a:	2281      	movs	r2, #129	; 0x81
   18b9c:	f002 f9da 	bl	1af54 <printk>
   18ba0:	2181      	movs	r1, #129	; 0x81
   18ba2:	4858      	ldr	r0, [pc, #352]	; (18d04 <z_impl_k_mutex_lock+0x1a8>)
   18ba4:	f002 fbba 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   18ba8:	4855      	ldr	r0, [pc, #340]	; (18d00 <z_impl_k_mutex_lock+0x1a4>)
   18baa:	f7ff ffa7 	bl	18afc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   18bae:	68e3      	ldr	r3, [r4, #12]
   18bb0:	4a55      	ldr	r2, [pc, #340]	; (18d08 <z_impl_k_mutex_lock+0x1ac>)
   18bb2:	b1d3      	cbz	r3, 18bea <z_impl_k_mutex_lock+0x8e>
   18bb4:	68a0      	ldr	r0, [r4, #8]
   18bb6:	6891      	ldr	r1, [r2, #8]
   18bb8:	4288      	cmp	r0, r1
   18bba:	d033      	beq.n	18c24 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   18bbc:	ea56 0307 	orrs.w	r3, r6, r7
   18bc0:	d132      	bne.n	18c28 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18bc2:	484f      	ldr	r0, [pc, #316]	; (18d00 <z_impl_k_mutex_lock+0x1a4>)
   18bc4:	f7ff ff8c 	bl	18ae0 <z_spin_unlock_valid>
   18bc8:	b940      	cbnz	r0, 18bdc <z_impl_k_mutex_lock+0x80>
   18bca:	494e      	ldr	r1, [pc, #312]	; (18d04 <z_impl_k_mutex_lock+0x1a8>)
   18bcc:	484b      	ldr	r0, [pc, #300]	; (18cfc <z_impl_k_mutex_lock+0x1a0>)
   18bce:	22ac      	movs	r2, #172	; 0xac
   18bd0:	f002 f9c0 	bl	1af54 <printk>
   18bd4:	21ac      	movs	r1, #172	; 0xac
   18bd6:	484b      	ldr	r0, [pc, #300]	; (18d04 <z_impl_k_mutex_lock+0x1a8>)
   18bd8:	f002 fba0 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   18bdc:	f388 8811 	msr	BASEPRI, r8
   18be0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   18be4:	f06f 000f 	mvn.w	r0, #15
   18be8:	e019      	b.n	18c1e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   18bea:	6891      	ldr	r1, [r2, #8]
   18bec:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   18bf0:	3301      	adds	r3, #1
   18bf2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   18bf4:	6893      	ldr	r3, [r2, #8]
   18bf6:	4842      	ldr	r0, [pc, #264]	; (18d00 <z_impl_k_mutex_lock+0x1a4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   18bf8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   18bfa:	60a3      	str	r3, [r4, #8]
   18bfc:	f7ff ff70 	bl	18ae0 <z_spin_unlock_valid>
   18c00:	b940      	cbnz	r0, 18c14 <z_impl_k_mutex_lock+0xb8>
   18c02:	4940      	ldr	r1, [pc, #256]	; (18d04 <z_impl_k_mutex_lock+0x1a8>)
   18c04:	483d      	ldr	r0, [pc, #244]	; (18cfc <z_impl_k_mutex_lock+0x1a0>)
   18c06:	22ac      	movs	r2, #172	; 0xac
   18c08:	f002 f9a4 	bl	1af54 <printk>
   18c0c:	21ac      	movs	r1, #172	; 0xac
   18c0e:	483d      	ldr	r0, [pc, #244]	; (18d04 <z_impl_k_mutex_lock+0x1a8>)
   18c10:	f002 fb84 	bl	1b31c <assert_post_action>
   18c14:	f388 8811 	msr	BASEPRI, r8
   18c18:	f3bf 8f6f 	isb	sy
		return 0;
   18c1c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   18c1e:	b002      	add	sp, #8
   18c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   18c24:	6921      	ldr	r1, [r4, #16]
   18c26:	e7e3      	b.n	18bf0 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18c28:	f991 100e 	ldrsb.w	r1, [r1, #14]
   18c2c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   18c30:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   18c34:	4299      	cmp	r1, r3
   18c36:	bfa8      	it	ge
   18c38:	4619      	movge	r1, r3
   18c3a:	4291      	cmp	r1, r2
   18c3c:	bfb8      	it	lt
   18c3e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   18c40:	428b      	cmp	r3, r1
   18c42:	dd3f      	ble.n	18cc4 <z_impl_k_mutex_lock+0x168>
		return z_set_prio(mutex->owner, new_prio);
   18c44:	f001 f97a 	bl	19f3c <z_set_prio>
   18c48:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   18c4a:	4622      	mov	r2, r4
   18c4c:	4641      	mov	r1, r8
   18c4e:	e9cd 6700 	strd	r6, r7, [sp]
   18c52:	482b      	ldr	r0, [pc, #172]	; (18d00 <z_impl_k_mutex_lock+0x1a4>)
   18c54:	f001 f94c 	bl	19ef0 <z_pend_curr>
	if (got_mutex == 0) {
   18c58:	2800      	cmp	r0, #0
   18c5a:	d0e0      	beq.n	18c1e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   18c5c:	f04f 0320 	mov.w	r3, #32
   18c60:	f3ef 8611 	mrs	r6, BASEPRI
   18c64:	f383 8812 	msr	BASEPRI_MAX, r3
   18c68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c6c:	4824      	ldr	r0, [pc, #144]	; (18d00 <z_impl_k_mutex_lock+0x1a4>)
   18c6e:	f7ff ff29 	bl	18ac4 <z_spin_lock_valid>
   18c72:	b940      	cbnz	r0, 18c86 <z_impl_k_mutex_lock+0x12a>
   18c74:	4923      	ldr	r1, [pc, #140]	; (18d04 <z_impl_k_mutex_lock+0x1a8>)
   18c76:	4821      	ldr	r0, [pc, #132]	; (18cfc <z_impl_k_mutex_lock+0x1a0>)
   18c78:	2281      	movs	r2, #129	; 0x81
   18c7a:	f002 f96b 	bl	1af54 <printk>
   18c7e:	2181      	movs	r1, #129	; 0x81
   18c80:	4820      	ldr	r0, [pc, #128]	; (18d04 <z_impl_k_mutex_lock+0x1a8>)
   18c82:	f002 fb4b 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   18c86:	481e      	ldr	r0, [pc, #120]	; (18d00 <z_impl_k_mutex_lock+0x1a4>)
   18c88:	f7ff ff38 	bl	18afc <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   18c8c:	6823      	ldr	r3, [r4, #0]
   18c8e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18c90:	429c      	cmp	r4, r3
   18c92:	d00a      	beq.n	18caa <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   18c94:	b14b      	cbz	r3, 18caa <z_impl_k_mutex_lock+0x14e>
   18c96:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18c9a:	4299      	cmp	r1, r3
   18c9c:	bfa8      	it	ge
   18c9e:	4619      	movge	r1, r3
   18ca0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   18ca4:	4299      	cmp	r1, r3
   18ca6:	bfb8      	it	lt
   18ca8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   18caa:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   18cac:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18cb0:	4299      	cmp	r1, r3
   18cb2:	d109      	bne.n	18cc8 <z_impl_k_mutex_lock+0x16c>
	if (resched) {
   18cb4:	b16d      	cbz	r5, 18cd2 <z_impl_k_mutex_lock+0x176>
		z_reschedule(&lock, key);
   18cb6:	4631      	mov	r1, r6
   18cb8:	4811      	ldr	r0, [pc, #68]	; (18d00 <z_impl_k_mutex_lock+0x1a4>)
   18cba:	f000 fd79 	bl	197b0 <z_reschedule>
	return -EAGAIN;
   18cbe:	f06f 000a 	mvn.w	r0, #10
   18cc2:	e7ac      	b.n	18c1e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   18cc4:	2500      	movs	r5, #0
   18cc6:	e7c0      	b.n	18c4a <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
   18cc8:	f001 f938 	bl	19f3c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   18ccc:	2800      	cmp	r0, #0
   18cce:	d1f2      	bne.n	18cb6 <z_impl_k_mutex_lock+0x15a>
   18cd0:	e7f0      	b.n	18cb4 <z_impl_k_mutex_lock+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18cd2:	480b      	ldr	r0, [pc, #44]	; (18d00 <z_impl_k_mutex_lock+0x1a4>)
   18cd4:	f7ff ff04 	bl	18ae0 <z_spin_unlock_valid>
   18cd8:	b940      	cbnz	r0, 18cec <z_impl_k_mutex_lock+0x190>
   18cda:	490a      	ldr	r1, [pc, #40]	; (18d04 <z_impl_k_mutex_lock+0x1a8>)
   18cdc:	4807      	ldr	r0, [pc, #28]	; (18cfc <z_impl_k_mutex_lock+0x1a0>)
   18cde:	22ac      	movs	r2, #172	; 0xac
   18ce0:	f002 f938 	bl	1af54 <printk>
   18ce4:	21ac      	movs	r1, #172	; 0xac
   18ce6:	4807      	ldr	r0, [pc, #28]	; (18d04 <z_impl_k_mutex_lock+0x1a8>)
   18ce8:	f002 fb18 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   18cec:	f386 8811 	msr	BASEPRI, r6
   18cf0:	f3bf 8f6f 	isb	sy
   18cf4:	e7e3      	b.n	18cbe <z_impl_k_mutex_lock+0x162>
   18cf6:	bf00      	nop
   18cf8:	0001d8f3 	.word	0x0001d8f3
   18cfc:	0001c625 	.word	0x0001c625
   18d00:	2000d594 	.word	0x2000d594
   18d04:	0001cad3 	.word	0x0001cad3
   18d08:	2000d56c 	.word	0x2000d56c

00018d0c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   18d0c:	b538      	push	{r3, r4, r5, lr}
   18d0e:	4604      	mov	r4, r0
   18d10:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   18d14:	b143      	cbz	r3, 18d28 <z_impl_k_mutex_unlock+0x1c>
   18d16:	4945      	ldr	r1, [pc, #276]	; (18e2c <z_impl_k_mutex_unlock+0x120>)
   18d18:	4845      	ldr	r0, [pc, #276]	; (18e30 <z_impl_k_mutex_unlock+0x124>)
   18d1a:	22c7      	movs	r2, #199	; 0xc7
   18d1c:	f002 f91a 	bl	1af54 <printk>
   18d20:	21c7      	movs	r1, #199	; 0xc7
   18d22:	4842      	ldr	r0, [pc, #264]	; (18e2c <z_impl_k_mutex_unlock+0x120>)
   18d24:	f002 fafa 	bl	1b31c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   18d28:	68a3      	ldr	r3, [r4, #8]
   18d2a:	2b00      	cmp	r3, #0
   18d2c:	d078      	beq.n	18e20 <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   18d2e:	4d41      	ldr	r5, [pc, #260]	; (18e34 <z_impl_k_mutex_unlock+0x128>)
   18d30:	68aa      	ldr	r2, [r5, #8]
   18d32:	4293      	cmp	r3, r2
   18d34:	d177      	bne.n	18e26 <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   18d36:	68e3      	ldr	r3, [r4, #12]
   18d38:	b943      	cbnz	r3, 18d4c <z_impl_k_mutex_unlock+0x40>
   18d3a:	493c      	ldr	r1, [pc, #240]	; (18e2c <z_impl_k_mutex_unlock+0x120>)
   18d3c:	483c      	ldr	r0, [pc, #240]	; (18e30 <z_impl_k_mutex_unlock+0x124>)
   18d3e:	22df      	movs	r2, #223	; 0xdf
   18d40:	f002 f908 	bl	1af54 <printk>
   18d44:	21df      	movs	r1, #223	; 0xdf
   18d46:	4839      	ldr	r0, [pc, #228]	; (18e2c <z_impl_k_mutex_unlock+0x120>)
   18d48:	f002 fae8 	bl	1b31c <assert_post_action>
   18d4c:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   18d50:	b143      	cbz	r3, 18d64 <z_impl_k_mutex_unlock+0x58>
   18d52:	4939      	ldr	r1, [pc, #228]	; (18e38 <z_impl_k_mutex_unlock+0x12c>)
   18d54:	4836      	ldr	r0, [pc, #216]	; (18e30 <z_impl_k_mutex_unlock+0x124>)
   18d56:	22fd      	movs	r2, #253	; 0xfd
   18d58:	f002 f8fc 	bl	1af54 <printk>
   18d5c:	21fd      	movs	r1, #253	; 0xfd
   18d5e:	4836      	ldr	r0, [pc, #216]	; (18e38 <z_impl_k_mutex_unlock+0x12c>)
   18d60:	f002 fadc 	bl	1b31c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   18d64:	68ab      	ldr	r3, [r5, #8]
   18d66:	7bdb      	ldrb	r3, [r3, #15]
   18d68:	2b01      	cmp	r3, #1
   18d6a:	d108      	bne.n	18d7e <z_impl_k_mutex_unlock+0x72>
   18d6c:	4932      	ldr	r1, [pc, #200]	; (18e38 <z_impl_k_mutex_unlock+0x12c>)
   18d6e:	4830      	ldr	r0, [pc, #192]	; (18e30 <z_impl_k_mutex_unlock+0x124>)
   18d70:	22fe      	movs	r2, #254	; 0xfe
   18d72:	f002 f8ef 	bl	1af54 <printk>
   18d76:	21fe      	movs	r1, #254	; 0xfe
   18d78:	482f      	ldr	r0, [pc, #188]	; (18e38 <z_impl_k_mutex_unlock+0x12c>)
   18d7a:	f002 facf 	bl	1b31c <assert_post_action>

	--_current->base.sched_locked;
   18d7e:	68aa      	ldr	r2, [r5, #8]
   18d80:	7bd3      	ldrb	r3, [r2, #15]
   18d82:	3b01      	subs	r3, #1
   18d84:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   18d86:	68e3      	ldr	r3, [r4, #12]
   18d88:	2b01      	cmp	r3, #1
   18d8a:	d905      	bls.n	18d98 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   18d8c:	3b01      	subs	r3, #1
   18d8e:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   18d90:	f001 f9b4 	bl	1a0fc <k_sched_unlock>

	return 0;
   18d94:	2000      	movs	r0, #0
}
   18d96:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   18d98:	f04f 0320 	mov.w	r3, #32
   18d9c:	f3ef 8511 	mrs	r5, BASEPRI
   18da0:	f383 8812 	msr	BASEPRI_MAX, r3
   18da4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18da8:	4824      	ldr	r0, [pc, #144]	; (18e3c <z_impl_k_mutex_unlock+0x130>)
   18daa:	f7ff fe8b 	bl	18ac4 <z_spin_lock_valid>
   18dae:	b940      	cbnz	r0, 18dc2 <z_impl_k_mutex_unlock+0xb6>
   18db0:	4923      	ldr	r1, [pc, #140]	; (18e40 <z_impl_k_mutex_unlock+0x134>)
   18db2:	481f      	ldr	r0, [pc, #124]	; (18e30 <z_impl_k_mutex_unlock+0x124>)
   18db4:	2281      	movs	r2, #129	; 0x81
   18db6:	f002 f8cd 	bl	1af54 <printk>
   18dba:	2181      	movs	r1, #129	; 0x81
   18dbc:	4820      	ldr	r0, [pc, #128]	; (18e40 <z_impl_k_mutex_unlock+0x134>)
   18dbe:	f002 faad 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   18dc2:	481e      	ldr	r0, [pc, #120]	; (18e3c <z_impl_k_mutex_unlock+0x130>)
   18dc4:	f7ff fe9a 	bl	18afc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   18dc8:	68a0      	ldr	r0, [r4, #8]
   18dca:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   18dcc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18dd0:	4299      	cmp	r1, r3
   18dd2:	d001      	beq.n	18dd8 <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
   18dd4:	f001 f8b2 	bl	19f3c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   18dd8:	4620      	mov	r0, r4
   18dda:	f001 fa25 	bl	1a228 <z_unpend_first_thread>
	mutex->owner = new_owner;
   18dde:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   18de0:	b158      	cbz	r0, 18dfa <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
   18de2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   18de6:	6122      	str	r2, [r4, #16]
   18de8:	2200      	movs	r2, #0
   18dea:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   18dec:	f000 ff18 	bl	19c20 <z_ready_thread>
		z_reschedule(&lock, key);
   18df0:	4629      	mov	r1, r5
   18df2:	4812      	ldr	r0, [pc, #72]	; (18e3c <z_impl_k_mutex_unlock+0x130>)
   18df4:	f000 fcdc 	bl	197b0 <z_reschedule>
   18df8:	e7ca      	b.n	18d90 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   18dfa:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18dfc:	480f      	ldr	r0, [pc, #60]	; (18e3c <z_impl_k_mutex_unlock+0x130>)
   18dfe:	f7ff fe6f 	bl	18ae0 <z_spin_unlock_valid>
   18e02:	b940      	cbnz	r0, 18e16 <z_impl_k_mutex_unlock+0x10a>
   18e04:	490e      	ldr	r1, [pc, #56]	; (18e40 <z_impl_k_mutex_unlock+0x134>)
   18e06:	480a      	ldr	r0, [pc, #40]	; (18e30 <z_impl_k_mutex_unlock+0x124>)
   18e08:	22ac      	movs	r2, #172	; 0xac
   18e0a:	f002 f8a3 	bl	1af54 <printk>
   18e0e:	21ac      	movs	r1, #172	; 0xac
   18e10:	480b      	ldr	r0, [pc, #44]	; (18e40 <z_impl_k_mutex_unlock+0x134>)
   18e12:	f002 fa83 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   18e16:	f385 8811 	msr	BASEPRI, r5
   18e1a:	f3bf 8f6f 	isb	sy
   18e1e:	e7b7      	b.n	18d90 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   18e20:	f06f 0015 	mvn.w	r0, #21
   18e24:	e7b7      	b.n	18d96 <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   18e26:	f04f 30ff 	mov.w	r0, #4294967295
   18e2a:	e7b4      	b.n	18d96 <z_impl_k_mutex_unlock+0x8a>
   18e2c:	0001d8f3 	.word	0x0001d8f3
   18e30:	0001c625 	.word	0x0001c625
   18e34:	2000d56c 	.word	0x2000d56c
   18e38:	0001d915 	.word	0x0001d915
   18e3c:	2000d594 	.word	0x2000d594
   18e40:	0001cad3 	.word	0x0001cad3

00018e44 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18e44:	b538      	push	{r3, r4, r5, lr}
   18e46:	4604      	mov	r4, r0
	__asm__ volatile(
   18e48:	f04f 0320 	mov.w	r3, #32
   18e4c:	f3ef 8511 	mrs	r5, BASEPRI
   18e50:	f383 8812 	msr	BASEPRI_MAX, r3
   18e54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e58:	4812      	ldr	r0, [pc, #72]	; (18ea4 <z_impl_k_sem_give+0x60>)
   18e5a:	f7ff fe33 	bl	18ac4 <z_spin_lock_valid>
   18e5e:	b940      	cbnz	r0, 18e72 <z_impl_k_sem_give+0x2e>
   18e60:	4911      	ldr	r1, [pc, #68]	; (18ea8 <z_impl_k_sem_give+0x64>)
   18e62:	4812      	ldr	r0, [pc, #72]	; (18eac <z_impl_k_sem_give+0x68>)
   18e64:	2281      	movs	r2, #129	; 0x81
   18e66:	f002 f875 	bl	1af54 <printk>
   18e6a:	2181      	movs	r1, #129	; 0x81
   18e6c:	480e      	ldr	r0, [pc, #56]	; (18ea8 <z_impl_k_sem_give+0x64>)
   18e6e:	f002 fa55 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   18e72:	480c      	ldr	r0, [pc, #48]	; (18ea4 <z_impl_k_sem_give+0x60>)
   18e74:	f7ff fe42 	bl	18afc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   18e78:	4620      	mov	r0, r4
   18e7a:	f001 f9d5 	bl	1a228 <z_unpend_first_thread>

	if (thread != NULL) {
   18e7e:	b148      	cbz	r0, 18e94 <z_impl_k_sem_give+0x50>
   18e80:	2200      	movs	r2, #0
   18e82:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   18e84:	f000 fecc 	bl	19c20 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   18e88:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   18e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   18e8e:	4805      	ldr	r0, [pc, #20]	; (18ea4 <z_impl_k_sem_give+0x60>)
   18e90:	f000 bc8e 	b.w	197b0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18e94:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   18e98:	429a      	cmp	r2, r3
   18e9a:	bf18      	it	ne
   18e9c:	3301      	addne	r3, #1
   18e9e:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   18ea0:	e7f2      	b.n	18e88 <z_impl_k_sem_give+0x44>
   18ea2:	bf00      	nop
   18ea4:	2000d598 	.word	0x2000d598
   18ea8:	0001cad3 	.word	0x0001cad3
   18eac:	0001c625 	.word	0x0001c625

00018eb0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   18eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18eb2:	4604      	mov	r4, r0
   18eb4:	4616      	mov	r6, r2
   18eb6:	461f      	mov	r7, r3
   18eb8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   18ebc:	b15b      	cbz	r3, 18ed6 <z_impl_k_sem_take+0x26>
   18ebe:	ea56 0307 	orrs.w	r3, r6, r7
   18ec2:	d008      	beq.n	18ed6 <z_impl_k_sem_take+0x26>
   18ec4:	492b      	ldr	r1, [pc, #172]	; (18f74 <z_impl_k_sem_take+0xc4>)
   18ec6:	482c      	ldr	r0, [pc, #176]	; (18f78 <z_impl_k_sem_take+0xc8>)
   18ec8:	2279      	movs	r2, #121	; 0x79
   18eca:	f002 f843 	bl	1af54 <printk>
   18ece:	2179      	movs	r1, #121	; 0x79
   18ed0:	4828      	ldr	r0, [pc, #160]	; (18f74 <z_impl_k_sem_take+0xc4>)
   18ed2:	f002 fa23 	bl	1b31c <assert_post_action>
   18ed6:	f04f 0320 	mov.w	r3, #32
   18eda:	f3ef 8511 	mrs	r5, BASEPRI
   18ede:	f383 8812 	msr	BASEPRI_MAX, r3
   18ee2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18ee6:	4825      	ldr	r0, [pc, #148]	; (18f7c <z_impl_k_sem_take+0xcc>)
   18ee8:	f7ff fdec 	bl	18ac4 <z_spin_lock_valid>
   18eec:	b940      	cbnz	r0, 18f00 <z_impl_k_sem_take+0x50>
   18eee:	4924      	ldr	r1, [pc, #144]	; (18f80 <z_impl_k_sem_take+0xd0>)
   18ef0:	4821      	ldr	r0, [pc, #132]	; (18f78 <z_impl_k_sem_take+0xc8>)
   18ef2:	2281      	movs	r2, #129	; 0x81
   18ef4:	f002 f82e 	bl	1af54 <printk>
   18ef8:	2181      	movs	r1, #129	; 0x81
   18efa:	4821      	ldr	r0, [pc, #132]	; (18f80 <z_impl_k_sem_take+0xd0>)
   18efc:	f002 fa0e 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   18f00:	481e      	ldr	r0, [pc, #120]	; (18f7c <z_impl_k_sem_take+0xcc>)
   18f02:	f7ff fdfb 	bl	18afc <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   18f06:	68a3      	ldr	r3, [r4, #8]
   18f08:	b1ab      	cbz	r3, 18f36 <z_impl_k_sem_take+0x86>
		sem->count--;
   18f0a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f0c:	481b      	ldr	r0, [pc, #108]	; (18f7c <z_impl_k_sem_take+0xcc>)
   18f0e:	60a3      	str	r3, [r4, #8]
   18f10:	f7ff fde6 	bl	18ae0 <z_spin_unlock_valid>
   18f14:	b940      	cbnz	r0, 18f28 <z_impl_k_sem_take+0x78>
   18f16:	491a      	ldr	r1, [pc, #104]	; (18f80 <z_impl_k_sem_take+0xd0>)
   18f18:	4817      	ldr	r0, [pc, #92]	; (18f78 <z_impl_k_sem_take+0xc8>)
   18f1a:	22ac      	movs	r2, #172	; 0xac
   18f1c:	f002 f81a 	bl	1af54 <printk>
   18f20:	21ac      	movs	r1, #172	; 0xac
   18f22:	4817      	ldr	r0, [pc, #92]	; (18f80 <z_impl_k_sem_take+0xd0>)
   18f24:	f002 f9fa 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   18f28:	f385 8811 	msr	BASEPRI, r5
   18f2c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   18f30:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   18f32:	b003      	add	sp, #12
   18f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18f36:	ea56 0307 	orrs.w	r3, r6, r7
   18f3a:	d113      	bne.n	18f64 <z_impl_k_sem_take+0xb4>
   18f3c:	480f      	ldr	r0, [pc, #60]	; (18f7c <z_impl_k_sem_take+0xcc>)
   18f3e:	f7ff fdcf 	bl	18ae0 <z_spin_unlock_valid>
   18f42:	b940      	cbnz	r0, 18f56 <z_impl_k_sem_take+0xa6>
   18f44:	490e      	ldr	r1, [pc, #56]	; (18f80 <z_impl_k_sem_take+0xd0>)
   18f46:	480c      	ldr	r0, [pc, #48]	; (18f78 <z_impl_k_sem_take+0xc8>)
   18f48:	22ac      	movs	r2, #172	; 0xac
   18f4a:	f002 f803 	bl	1af54 <printk>
   18f4e:	21ac      	movs	r1, #172	; 0xac
   18f50:	480b      	ldr	r0, [pc, #44]	; (18f80 <z_impl_k_sem_take+0xd0>)
   18f52:	f002 f9e3 	bl	1b31c <assert_post_action>
   18f56:	f385 8811 	msr	BASEPRI, r5
   18f5a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   18f5e:	f06f 000f 	mvn.w	r0, #15
   18f62:	e7e6      	b.n	18f32 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18f64:	4622      	mov	r2, r4
   18f66:	4629      	mov	r1, r5
   18f68:	e9cd 6700 	strd	r6, r7, [sp]
   18f6c:	4803      	ldr	r0, [pc, #12]	; (18f7c <z_impl_k_sem_take+0xcc>)
   18f6e:	f000 ffbf 	bl	19ef0 <z_pend_curr>
	return ret;
   18f72:	e7de      	b.n	18f32 <z_impl_k_sem_take+0x82>
   18f74:	0001d940 	.word	0x0001d940
   18f78:	0001c625 	.word	0x0001c625
   18f7c:	2000d598 	.word	0x2000d598
   18f80:	0001cad3 	.word	0x0001cad3

00018f84 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   18f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f88:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f8a:	4e73      	ldr	r6, [pc, #460]	; (19158 <work_queue_main+0x1d4>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18f8c:	4f73      	ldr	r7, [pc, #460]	; (1915c <work_queue_main+0x1d8>)
{
   18f8e:	b085      	sub	sp, #20
	__asm__ volatile(
   18f90:	f04f 0320 	mov.w	r3, #32
   18f94:	f3ef 8811 	mrs	r8, BASEPRI
   18f98:	f383 8812 	msr	BASEPRI_MAX, r3
   18f9c:	f3bf 8f6f 	isb	sy
   18fa0:	4630      	mov	r0, r6
   18fa2:	f7ff fd8f 	bl	18ac4 <z_spin_lock_valid>
   18fa6:	b940      	cbnz	r0, 18fba <work_queue_main+0x36>
   18fa8:	496d      	ldr	r1, [pc, #436]	; (19160 <work_queue_main+0x1dc>)
   18faa:	486e      	ldr	r0, [pc, #440]	; (19164 <work_queue_main+0x1e0>)
   18fac:	2281      	movs	r2, #129	; 0x81
   18fae:	f001 ffd1 	bl	1af54 <printk>
   18fb2:	2181      	movs	r1, #129	; 0x81
   18fb4:	486a      	ldr	r0, [pc, #424]	; (19160 <work_queue_main+0x1dc>)
   18fb6:	f002 f9b1 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   18fba:	4630      	mov	r0, r6
   18fbc:	f7ff fd9e 	bl	18afc <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   18fc0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   18fc4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   18fc8:	b9ad      	cbnz	r5, 18ff6 <work_queue_main+0x72>
	*flagp &= ~BIT(bit);
   18fca:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   18fce:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   18fd0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   18fd4:	f100 8082 	bmi.w	190dc <work_queue_main+0x158>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   18fd8:	2300      	movs	r3, #0
   18fda:	f04f 32ff 	mov.w	r2, #4294967295
   18fde:	9302      	str	r3, [sp, #8]
   18fe0:	f04f 33ff 	mov.w	r3, #4294967295
   18fe4:	4641      	mov	r1, r8
   18fe6:	e9cd 2300 	strd	r2, r3, [sp]
   18fea:	4630      	mov	r0, r6
   18fec:	f104 0288 	add.w	r2, r4, #136	; 0x88
   18ff0:	f001 fb98 	bl	1a724 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   18ff4:	e7cc      	b.n	18f90 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18ff6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   18ffa:	682a      	ldr	r2, [r5, #0]
   18ffc:	428d      	cmp	r5, r1
	list->head = node;
   18ffe:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19002:	d101      	bne.n	19008 <work_queue_main+0x84>
	list->tail = node;
   19004:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   19008:	f043 0302 	orr.w	r3, r3, #2
   1900c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   19010:	68eb      	ldr	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19012:	4630      	mov	r0, r6
   19014:	f023 0304 	bic.w	r3, r3, #4
   19018:	f043 0301 	orr.w	r3, r3, #1
   1901c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1901e:	f8d5 9004 	ldr.w	r9, [r5, #4]
   19022:	f7ff fd5d 	bl	18ae0 <z_spin_unlock_valid>
   19026:	b940      	cbnz	r0, 1903a <work_queue_main+0xb6>
   19028:	494d      	ldr	r1, [pc, #308]	; (19160 <work_queue_main+0x1dc>)
   1902a:	484e      	ldr	r0, [pc, #312]	; (19164 <work_queue_main+0x1e0>)
   1902c:	22ac      	movs	r2, #172	; 0xac
   1902e:	f001 ff91 	bl	1af54 <printk>
   19032:	21ac      	movs	r1, #172	; 0xac
   19034:	484a      	ldr	r0, [pc, #296]	; (19160 <work_queue_main+0x1dc>)
   19036:	f002 f971 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1903a:	f388 8811 	msr	BASEPRI, r8
   1903e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   19042:	f1b9 0f00 	cmp.w	r9, #0
   19046:	d10a      	bne.n	1905e <work_queue_main+0xda>
   19048:	4947      	ldr	r1, [pc, #284]	; (19168 <work_queue_main+0x1e4>)
   1904a:	4846      	ldr	r0, [pc, #280]	; (19164 <work_queue_main+0x1e0>)
   1904c:	f44f 7222 	mov.w	r2, #648	; 0x288
   19050:	f001 ff80 	bl	1af54 <printk>
   19054:	f44f 7122 	mov.w	r1, #648	; 0x288
   19058:	4843      	ldr	r0, [pc, #268]	; (19168 <work_queue_main+0x1e4>)
   1905a:	f002 f95f 	bl	1b31c <assert_post_action>
		handler(work);
   1905e:	4628      	mov	r0, r5
   19060:	47c8      	blx	r9
	__asm__ volatile(
   19062:	f04f 0320 	mov.w	r3, #32
   19066:	f3ef 8a11 	mrs	sl, BASEPRI
   1906a:	f383 8812 	msr	BASEPRI_MAX, r3
   1906e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19072:	4630      	mov	r0, r6
   19074:	f7ff fd26 	bl	18ac4 <z_spin_lock_valid>
   19078:	b940      	cbnz	r0, 1908c <work_queue_main+0x108>
   1907a:	4939      	ldr	r1, [pc, #228]	; (19160 <work_queue_main+0x1dc>)
   1907c:	4839      	ldr	r0, [pc, #228]	; (19164 <work_queue_main+0x1e0>)
   1907e:	2281      	movs	r2, #129	; 0x81
   19080:	f001 ff68 	bl	1af54 <printk>
   19084:	2181      	movs	r1, #129	; 0x81
   19086:	4836      	ldr	r0, [pc, #216]	; (19160 <work_queue_main+0x1dc>)
   19088:	f002 f948 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1908c:	4630      	mov	r0, r6
   1908e:	f7ff fd35 	bl	18afc <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   19092:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19094:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   19096:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1909a:	d429      	bmi.n	190f0 <work_queue_main+0x16c>
	*flagp &= ~BIT(bit);
   1909c:	60ea      	str	r2, [r5, #12]
   1909e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   190a2:	4630      	mov	r0, r6
   190a4:	f023 0302 	bic.w	r3, r3, #2
   190a8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
   190ac:	f3c3 2500 	ubfx	r5, r3, #8, #1
   190b0:	f7ff fd16 	bl	18ae0 <z_spin_unlock_valid>
   190b4:	b940      	cbnz	r0, 190c8 <work_queue_main+0x144>
   190b6:	492a      	ldr	r1, [pc, #168]	; (19160 <work_queue_main+0x1dc>)
   190b8:	482a      	ldr	r0, [pc, #168]	; (19164 <work_queue_main+0x1e0>)
   190ba:	22ac      	movs	r2, #172	; 0xac
   190bc:	f001 ff4a 	bl	1af54 <printk>
   190c0:	21ac      	movs	r1, #172	; 0xac
   190c2:	4827      	ldr	r0, [pc, #156]	; (19160 <work_queue_main+0x1dc>)
   190c4:	f002 f92a 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   190c8:	f38a 8811 	msr	BASEPRI, sl
   190cc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   190d0:	2d00      	cmp	r5, #0
   190d2:	f47f af5d 	bne.w	18f90 <work_queue_main+0xc>
	z_impl_k_yield();
   190d6:	f001 f8f1 	bl	1a2bc <z_impl_k_yield>
}
   190da:	e759      	b.n	18f90 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   190dc:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   190e0:	2200      	movs	r2, #0
   190e2:	2101      	movs	r1, #1
   190e4:	4628      	mov	r0, r5
   190e6:	f001 fad7 	bl	1a698 <z_sched_wake>
   190ea:	2800      	cmp	r0, #0
   190ec:	d1f8      	bne.n	190e0 <work_queue_main+0x15c>
   190ee:	e773      	b.n	18fd8 <work_queue_main+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   190f0:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   190f2:	f023 0303 	bic.w	r3, r3, #3
   190f6:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   190f8:	2800      	cmp	r0, #0
   190fa:	d0d0      	beq.n	1909e <work_queue_main+0x11a>
	return node->next;
   190fc:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   190fe:	f04f 0900 	mov.w	r9, #0
   19102:	2b00      	cmp	r3, #0
   19104:	bf38      	it	cc
   19106:	2300      	movcc	r3, #0
	parent->next = child;
   19108:	46cb      	mov	fp, r9
   1910a:	4698      	mov	r8, r3
		if (wc->work == work) {
   1910c:	6843      	ldr	r3, [r0, #4]
   1910e:	4602      	mov	r2, r0
   19110:	429d      	cmp	r5, r3
   19112:	d10d      	bne.n	19130 <work_queue_main+0x1ac>
Z_GENLIST_REMOVE(slist, snode)
   19114:	6802      	ldr	r2, [r0, #0]
   19116:	f1b9 0f00 	cmp.w	r9, #0
   1911a:	d115      	bne.n	19148 <work_queue_main+0x1c4>
   1911c:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   1911e:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   19120:	4283      	cmp	r3, r0
   19122:	d100      	bne.n	19126 <work_queue_main+0x1a2>
	list->tail = node;
   19124:	607a      	str	r2, [r7, #4]
	parent->next = child;
   19126:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   1912a:	f7ff fe8b 	bl	18e44 <z_impl_k_sem_give>
}
   1912e:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19130:	f1b8 0f00 	cmp.w	r8, #0
   19134:	d0b3      	beq.n	1909e <work_queue_main+0x11a>
	return node->next;
   19136:	f8d8 3000 	ldr.w	r3, [r8]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1913a:	4640      	mov	r0, r8
   1913c:	2b00      	cmp	r3, #0
   1913e:	bf38      	it	cc
   19140:	2300      	movcc	r3, #0
   19142:	4691      	mov	r9, r2
   19144:	4698      	mov	r8, r3
   19146:	e7e1      	b.n	1910c <work_queue_main+0x188>
	parent->next = child;
   19148:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   1914c:	687b      	ldr	r3, [r7, #4]
   1914e:	4283      	cmp	r3, r0
	list->tail = node;
   19150:	bf08      	it	eq
   19152:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   19156:	e7e6      	b.n	19126 <work_queue_main+0x1a2>
   19158:	2000d59c 	.word	0x2000d59c
   1915c:	2000d5a0 	.word	0x2000d5a0
   19160:	0001cad3 	.word	0x0001cad3
   19164:	0001c625 	.word	0x0001c625
   19168:	0001d960 	.word	0x0001d960

0001916c <submit_to_queue_locked>:
{
   1916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1916e:	68c3      	ldr	r3, [r0, #12]
{
   19170:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19172:	079a      	lsls	r2, r3, #30
{
   19174:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19176:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1917a:	d42a      	bmi.n	191d2 <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1917c:	075f      	lsls	r7, r3, #29
   1917e:	d42a      	bmi.n	191d6 <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   19180:	680a      	ldr	r2, [r1, #0]
   19182:	b90a      	cbnz	r2, 19188 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   19184:	6882      	ldr	r2, [r0, #8]
   19186:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   19188:	07d8      	lsls	r0, r3, #31
   1918a:	d527      	bpl.n	191dc <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   1918c:	68a3      	ldr	r3, [r4, #8]
   1918e:	b953      	cbnz	r3, 191a6 <submit_to_queue_locked+0x3a>
   19190:	4923      	ldr	r1, [pc, #140]	; (19220 <submit_to_queue_locked+0xb4>)
   19192:	4824      	ldr	r0, [pc, #144]	; (19224 <submit_to_queue_locked+0xb8>)
   19194:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   19198:	f001 fedc 	bl	1af54 <printk>
   1919c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   191a0:	481f      	ldr	r0, [pc, #124]	; (19220 <submit_to_queue_locked+0xb4>)
   191a2:	f002 f8bb 	bl	1b31c <assert_post_action>
			ret = 2;
   191a6:	2502      	movs	r5, #2
			*queuep = work->queue;
   191a8:	68a3      	ldr	r3, [r4, #8]
   191aa:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   191ac:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   191ae:	b38f      	cbz	r7, 19214 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   191b0:	4b1d      	ldr	r3, [pc, #116]	; (19228 <submit_to_queue_locked+0xbc>)
   191b2:	689b      	ldr	r3, [r3, #8]
   191b4:	42bb      	cmp	r3, r7
   191b6:	d113      	bne.n	191e0 <submit_to_queue_locked+0x74>
   191b8:	f002 fe5a 	bl	1be70 <k_is_in_isr>
   191bc:	f080 0001 	eor.w	r0, r0, #1
   191c0:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   191c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   191c6:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   191c8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   191cc:	d525      	bpl.n	1921a <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   191ce:	b14a      	cbz	r2, 191e4 <submit_to_queue_locked+0x78>
   191d0:	b950      	cbnz	r0, 191e8 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   191d2:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   191d6:	2300      	movs	r3, #0
   191d8:	6033      	str	r3, [r6, #0]
	return ret;
   191da:	e015      	b.n	19208 <submit_to_queue_locked+0x9c>
		ret = 1;
   191dc:	2501      	movs	r5, #1
   191de:	e7e5      	b.n	191ac <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   191e0:	2000      	movs	r0, #0
   191e2:	e7ee      	b.n	191c2 <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   191e4:	071b      	lsls	r3, r3, #28
   191e6:	d4f4      	bmi.n	191d2 <submit_to_queue_locked+0x66>
	parent->next = child;
   191e8:	2300      	movs	r3, #0
   191ea:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   191ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   191f0:	b963      	cbnz	r3, 1920c <submit_to_queue_locked+0xa0>
	list->head = node;
   191f2:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   191f6:	4638      	mov	r0, r7
   191f8:	f002 fe61 	bl	1bebe <notify_queue_locked>
	*flagp |= BIT(bit);
   191fc:	68e3      	ldr	r3, [r4, #12]
   191fe:	f043 0304 	orr.w	r3, r3, #4
   19202:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   19204:	6833      	ldr	r3, [r6, #0]
   19206:	60a3      	str	r3, [r4, #8]
}
   19208:	4628      	mov	r0, r5
   1920a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1920c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1920e:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   19212:	e7f0      	b.n	191f6 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   19214:	f06f 0515 	mvn.w	r5, #21
   19218:	e7dd      	b.n	191d6 <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   1921a:	f06f 0512 	mvn.w	r5, #18
   1921e:	e7da      	b.n	191d6 <submit_to_queue_locked+0x6a>
   19220:	0001d960 	.word	0x0001d960
   19224:	0001c625 	.word	0x0001c625
   19228:	2000d56c 	.word	0x2000d56c

0001922c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   1922c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1922e:	4604      	mov	r4, r0
	__asm__ volatile(
   19230:	f04f 0320 	mov.w	r3, #32
   19234:	f3ef 8511 	mrs	r5, BASEPRI
   19238:	f383 8812 	msr	BASEPRI_MAX, r3
   1923c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19240:	4819      	ldr	r0, [pc, #100]	; (192a8 <work_timeout+0x7c>)
   19242:	f7ff fc3f 	bl	18ac4 <z_spin_lock_valid>
   19246:	b940      	cbnz	r0, 1925a <work_timeout+0x2e>
   19248:	4918      	ldr	r1, [pc, #96]	; (192ac <work_timeout+0x80>)
   1924a:	4819      	ldr	r0, [pc, #100]	; (192b0 <work_timeout+0x84>)
   1924c:	2281      	movs	r2, #129	; 0x81
   1924e:	f001 fe81 	bl	1af54 <printk>
   19252:	2181      	movs	r1, #129	; 0x81
   19254:	4815      	ldr	r0, [pc, #84]	; (192ac <work_timeout+0x80>)
   19256:	f002 f861 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1925a:	4813      	ldr	r0, [pc, #76]	; (192a8 <work_timeout+0x7c>)
   1925c:	f7ff fc4e 	bl	18afc <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   19260:	2300      	movs	r3, #0
   19262:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   19264:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   19268:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1926c:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1926e:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   19272:	d506      	bpl.n	19282 <work_timeout+0x56>
		queue = dw->queue;
   19274:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   19276:	a901      	add	r1, sp, #4
   19278:	f1a4 0010 	sub.w	r0, r4, #16
		queue = dw->queue;
   1927c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1927e:	f7ff ff75 	bl	1916c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19282:	4809      	ldr	r0, [pc, #36]	; (192a8 <work_timeout+0x7c>)
   19284:	f7ff fc2c 	bl	18ae0 <z_spin_unlock_valid>
   19288:	b940      	cbnz	r0, 1929c <work_timeout+0x70>
   1928a:	4908      	ldr	r1, [pc, #32]	; (192ac <work_timeout+0x80>)
   1928c:	4808      	ldr	r0, [pc, #32]	; (192b0 <work_timeout+0x84>)
   1928e:	22ac      	movs	r2, #172	; 0xac
   19290:	f001 fe60 	bl	1af54 <printk>
   19294:	21ac      	movs	r1, #172	; 0xac
   19296:	4805      	ldr	r0, [pc, #20]	; (192ac <work_timeout+0x80>)
   19298:	f002 f840 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1929c:	f385 8811 	msr	BASEPRI, r5
   192a0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   192a4:	b003      	add	sp, #12
   192a6:	bd30      	pop	{r4, r5, pc}
   192a8:	2000d59c 	.word	0x2000d59c
   192ac:	0001cad3 	.word	0x0001cad3
   192b0:	0001c625 	.word	0x0001c625

000192b4 <k_work_init>:
{
   192b4:	b538      	push	{r3, r4, r5, lr}
   192b6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   192b8:	4604      	mov	r4, r0
   192ba:	b940      	cbnz	r0, 192ce <k_work_init+0x1a>
   192bc:	490c      	ldr	r1, [pc, #48]	; (192f0 <k_work_init+0x3c>)
   192be:	480d      	ldr	r0, [pc, #52]	; (192f4 <k_work_init+0x40>)
   192c0:	2289      	movs	r2, #137	; 0x89
   192c2:	f001 fe47 	bl	1af54 <printk>
   192c6:	2189      	movs	r1, #137	; 0x89
   192c8:	4809      	ldr	r0, [pc, #36]	; (192f0 <k_work_init+0x3c>)
   192ca:	f002 f827 	bl	1b31c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   192ce:	b945      	cbnz	r5, 192e2 <k_work_init+0x2e>
   192d0:	4907      	ldr	r1, [pc, #28]	; (192f0 <k_work_init+0x3c>)
   192d2:	4808      	ldr	r0, [pc, #32]	; (192f4 <k_work_init+0x40>)
   192d4:	228a      	movs	r2, #138	; 0x8a
   192d6:	f001 fe3d 	bl	1af54 <printk>
   192da:	218a      	movs	r1, #138	; 0x8a
   192dc:	4804      	ldr	r0, [pc, #16]	; (192f0 <k_work_init+0x3c>)
   192de:	f002 f81d 	bl	1b31c <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   192e2:	2210      	movs	r2, #16
   192e4:	2100      	movs	r1, #0
   192e6:	4620      	mov	r0, r4
   192e8:	f002 f914 	bl	1b514 <memset>
   192ec:	6065      	str	r5, [r4, #4]
}
   192ee:	bd38      	pop	{r3, r4, r5, pc}
   192f0:	0001d960 	.word	0x0001d960
   192f4:	0001c625 	.word	0x0001c625

000192f8 <k_work_submit_to_queue>:
{
   192f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   192fa:	460c      	mov	r4, r1
{
   192fc:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   192fe:	b951      	cbnz	r1, 19316 <k_work_submit_to_queue+0x1e>
   19300:	4921      	ldr	r1, [pc, #132]	; (19388 <k_work_submit_to_queue+0x90>)
   19302:	4822      	ldr	r0, [pc, #136]	; (1938c <k_work_submit_to_queue+0x94>)
   19304:	f240 1269 	movw	r2, #361	; 0x169
   19308:	f001 fe24 	bl	1af54 <printk>
   1930c:	f240 1169 	movw	r1, #361	; 0x169
   19310:	481d      	ldr	r0, [pc, #116]	; (19388 <k_work_submit_to_queue+0x90>)
   19312:	f002 f803 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   19316:	f04f 0320 	mov.w	r3, #32
   1931a:	f3ef 8511 	mrs	r5, BASEPRI
   1931e:	f383 8812 	msr	BASEPRI_MAX, r3
   19322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19326:	481a      	ldr	r0, [pc, #104]	; (19390 <k_work_submit_to_queue+0x98>)
   19328:	f7ff fbcc 	bl	18ac4 <z_spin_lock_valid>
   1932c:	b940      	cbnz	r0, 19340 <k_work_submit_to_queue+0x48>
   1932e:	4919      	ldr	r1, [pc, #100]	; (19394 <k_work_submit_to_queue+0x9c>)
   19330:	4816      	ldr	r0, [pc, #88]	; (1938c <k_work_submit_to_queue+0x94>)
   19332:	2281      	movs	r2, #129	; 0x81
   19334:	f001 fe0e 	bl	1af54 <printk>
   19338:	2181      	movs	r1, #129	; 0x81
   1933a:	4816      	ldr	r0, [pc, #88]	; (19394 <k_work_submit_to_queue+0x9c>)
   1933c:	f001 ffee 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   19340:	4813      	ldr	r0, [pc, #76]	; (19390 <k_work_submit_to_queue+0x98>)
   19342:	f7ff fbdb 	bl	18afc <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   19346:	4620      	mov	r0, r4
   19348:	a901      	add	r1, sp, #4
   1934a:	f7ff ff0f 	bl	1916c <submit_to_queue_locked>
   1934e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19350:	480f      	ldr	r0, [pc, #60]	; (19390 <k_work_submit_to_queue+0x98>)
   19352:	f7ff fbc5 	bl	18ae0 <z_spin_unlock_valid>
   19356:	b940      	cbnz	r0, 1936a <k_work_submit_to_queue+0x72>
   19358:	490e      	ldr	r1, [pc, #56]	; (19394 <k_work_submit_to_queue+0x9c>)
   1935a:	480c      	ldr	r0, [pc, #48]	; (1938c <k_work_submit_to_queue+0x94>)
   1935c:	22ac      	movs	r2, #172	; 0xac
   1935e:	f001 fdf9 	bl	1af54 <printk>
   19362:	21ac      	movs	r1, #172	; 0xac
   19364:	480b      	ldr	r0, [pc, #44]	; (19394 <k_work_submit_to_queue+0x9c>)
   19366:	f001 ffd9 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1936a:	f385 8811 	msr	BASEPRI, r5
   1936e:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   19372:	2c00      	cmp	r4, #0
   19374:	dd04      	ble.n	19380 <k_work_submit_to_queue+0x88>
	return z_impl_k_is_preempt_thread();
   19376:	f001 f8eb 	bl	1a550 <z_impl_k_is_preempt_thread>
   1937a:	b108      	cbz	r0, 19380 <k_work_submit_to_queue+0x88>
	z_impl_k_yield();
   1937c:	f000 ff9e 	bl	1a2bc <z_impl_k_yield>
}
   19380:	4620      	mov	r0, r4
   19382:	b003      	add	sp, #12
   19384:	bd30      	pop	{r4, r5, pc}
   19386:	bf00      	nop
   19388:	0001d960 	.word	0x0001d960
   1938c:	0001c625 	.word	0x0001c625
   19390:	2000d59c 	.word	0x2000d59c
   19394:	0001cad3 	.word	0x0001cad3

00019398 <k_work_submit>:
{
   19398:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1939a:	4801      	ldr	r0, [pc, #4]	; (193a0 <k_work_submit+0x8>)
   1939c:	f7ff bfac 	b.w	192f8 <k_work_submit_to_queue>
   193a0:	2000cdc0 	.word	0x2000cdc0

000193a4 <k_work_queue_start>:
{
   193a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193a8:	b088      	sub	sp, #32
   193aa:	460e      	mov	r6, r1
   193ac:	4617      	mov	r7, r2
   193ae:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   193b0:	4604      	mov	r4, r0
{
   193b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   193b4:	b950      	cbnz	r0, 193cc <k_work_queue_start+0x28>
   193b6:	492d      	ldr	r1, [pc, #180]	; (1946c <k_work_queue_start+0xc8>)
   193b8:	482d      	ldr	r0, [pc, #180]	; (19470 <k_work_queue_start+0xcc>)
   193ba:	f240 22b5 	movw	r2, #693	; 0x2b5
   193be:	f001 fdc9 	bl	1af54 <printk>
   193c2:	f240 21b5 	movw	r1, #693	; 0x2b5
   193c6:	4829      	ldr	r0, [pc, #164]	; (1946c <k_work_queue_start+0xc8>)
   193c8:	f001 ffa8 	bl	1b31c <assert_post_action>
	__ASSERT_NO_MSG(stack);
   193cc:	b956      	cbnz	r6, 193e4 <k_work_queue_start+0x40>
   193ce:	4927      	ldr	r1, [pc, #156]	; (1946c <k_work_queue_start+0xc8>)
   193d0:	4827      	ldr	r0, [pc, #156]	; (19470 <k_work_queue_start+0xcc>)
   193d2:	f240 22b6 	movw	r2, #694	; 0x2b6
   193d6:	f001 fdbd 	bl	1af54 <printk>
   193da:	f240 21b6 	movw	r1, #694	; 0x2b6
   193de:	4823      	ldr	r0, [pc, #140]	; (1946c <k_work_queue_start+0xc8>)
   193e0:	f001 ff9c 	bl	1b31c <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   193e4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   193e8:	07db      	lsls	r3, r3, #31
   193ea:	d50a      	bpl.n	19402 <k_work_queue_start+0x5e>
   193ec:	491f      	ldr	r1, [pc, #124]	; (1946c <k_work_queue_start+0xc8>)
   193ee:	4820      	ldr	r0, [pc, #128]	; (19470 <k_work_queue_start+0xcc>)
   193f0:	f240 22b7 	movw	r2, #695	; 0x2b7
   193f4:	f001 fdae 	bl	1af54 <printk>
   193f8:	f240 21b7 	movw	r1, #695	; 0x2b7
   193fc:	481b      	ldr	r0, [pc, #108]	; (1946c <k_work_queue_start+0xc8>)
   193fe:	f001 ff8d 	bl	1b31c <assert_post_action>
	list->head = NULL;
   19402:	2300      	movs	r3, #0
	list->tail = NULL;
   19404:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   19408:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1940c:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   19410:	f104 0390 	add.w	r3, r4, #144	; 0x90
   19414:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   19418:	b32d      	cbz	r5, 19466 <k_work_queue_start+0xc2>
   1941a:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1941c:	f240 1101 	movw	r1, #257	; 0x101
   19420:	2b00      	cmp	r3, #0
   19422:	bf08      	it	eq
   19424:	2101      	moveq	r1, #1
	*flagp = flags;
   19426:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1942a:	f04f 32ff 	mov.w	r2, #4294967295
   1942e:	f04f 33ff 	mov.w	r3, #4294967295
   19432:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19436:	2200      	movs	r2, #0
   19438:	4631      	mov	r1, r6
   1943a:	e9cd 8203 	strd	r8, r2, [sp, #12]
   1943e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   19442:	4620      	mov	r0, r4
   19444:	463a      	mov	r2, r7
   19446:	4b0b      	ldr	r3, [pc, #44]	; (19474 <k_work_queue_start+0xd0>)
   19448:	9400      	str	r4, [sp, #0]
   1944a:	f7ff fa75 	bl	18938 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1944e:	b125      	cbz	r5, 1945a <k_work_queue_start+0xb6>
   19450:	6829      	ldr	r1, [r5, #0]
   19452:	b111      	cbz	r1, 1945a <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   19454:	4620      	mov	r0, r4
   19456:	f002 fd11 	bl	1be7c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1945a:	4620      	mov	r0, r4
}
   1945c:	b008      	add	sp, #32
   1945e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19462:	f002 bd10 	b.w	1be86 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   19466:	2101      	movs	r1, #1
   19468:	e7dd      	b.n	19426 <k_work_queue_start+0x82>
   1946a:	bf00      	nop
   1946c:	0001d960 	.word	0x0001d960
   19470:	0001c625 	.word	0x0001c625
   19474:	00018f85 	.word	0x00018f85

00019478 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   19478:	b538      	push	{r3, r4, r5, lr}
   1947a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1947c:	4604      	mov	r4, r0
   1947e:	b950      	cbnz	r0, 19496 <k_work_init_delayable+0x1e>
   19480:	4910      	ldr	r1, [pc, #64]	; (194c4 <k_work_init_delayable+0x4c>)
   19482:	4811      	ldr	r0, [pc, #68]	; (194c8 <k_work_init_delayable+0x50>)
   19484:	f240 322d 	movw	r2, #813	; 0x32d
   19488:	f001 fd64 	bl	1af54 <printk>
   1948c:	f240 312d 	movw	r1, #813	; 0x32d
   19490:	480c      	ldr	r0, [pc, #48]	; (194c4 <k_work_init_delayable+0x4c>)
   19492:	f001 ff43 	bl	1b31c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   19496:	b955      	cbnz	r5, 194ae <k_work_init_delayable+0x36>
   19498:	490a      	ldr	r1, [pc, #40]	; (194c4 <k_work_init_delayable+0x4c>)
   1949a:	480b      	ldr	r0, [pc, #44]	; (194c8 <k_work_init_delayable+0x50>)
   1949c:	f240 322e 	movw	r2, #814	; 0x32e
   194a0:	f001 fd58 	bl	1af54 <printk>
   194a4:	f240 312e 	movw	r1, #814	; 0x32e
   194a8:	4806      	ldr	r0, [pc, #24]	; (194c4 <k_work_init_delayable+0x4c>)
   194aa:	f001 ff37 	bl	1b31c <assert_post_action>

	*dwork = (struct k_work_delayable){
   194ae:	2230      	movs	r2, #48	; 0x30
   194b0:	2100      	movs	r1, #0
   194b2:	4620      	mov	r0, r4
   194b4:	f002 f82e 	bl	1b514 <memset>
   194b8:	f44f 7380 	mov.w	r3, #256	; 0x100
   194bc:	6065      	str	r5, [r4, #4]
   194be:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   194c0:	bd38      	pop	{r3, r4, r5, pc}
   194c2:	bf00      	nop
   194c4:	0001d960 	.word	0x0001d960
   194c8:	0001c625 	.word	0x0001c625

000194cc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   194cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   194ce:	4616      	mov	r6, r2
   194d0:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   194d2:	460c      	mov	r4, r1
{
   194d4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   194d6:	b951      	cbnz	r1, 194ee <k_work_schedule_for_queue+0x22>
   194d8:	4929      	ldr	r1, [pc, #164]	; (19580 <k_work_schedule_for_queue+0xb4>)
   194da:	482a      	ldr	r0, [pc, #168]	; (19584 <k_work_schedule_for_queue+0xb8>)
   194dc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
   194e0:	f001 fd38 	bl	1af54 <printk>
   194e4:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   194e8:	4825      	ldr	r0, [pc, #148]	; (19580 <k_work_schedule_for_queue+0xb4>)
   194ea:	f001 ff17 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   194ee:	f04f 0320 	mov.w	r3, #32
   194f2:	f3ef 8511 	mrs	r5, BASEPRI
   194f6:	f383 8812 	msr	BASEPRI_MAX, r3
   194fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   194fe:	4822      	ldr	r0, [pc, #136]	; (19588 <k_work_schedule_for_queue+0xbc>)
   19500:	f7ff fae0 	bl	18ac4 <z_spin_lock_valid>
   19504:	b940      	cbnz	r0, 19518 <k_work_schedule_for_queue+0x4c>
   19506:	4921      	ldr	r1, [pc, #132]	; (1958c <k_work_schedule_for_queue+0xc0>)
   19508:	481e      	ldr	r0, [pc, #120]	; (19584 <k_work_schedule_for_queue+0xb8>)
   1950a:	2281      	movs	r2, #129	; 0x81
   1950c:	f001 fd22 	bl	1af54 <printk>
   19510:	2181      	movs	r1, #129	; 0x81
   19512:	481e      	ldr	r0, [pc, #120]	; (1958c <k_work_schedule_for_queue+0xc0>)
   19514:	f001 ff02 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   19518:	481b      	ldr	r0, [pc, #108]	; (19588 <k_work_schedule_for_queue+0xbc>)
   1951a:	f7ff faef 	bl	18afc <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   1951e:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   19520:	f013 0f0e 	tst.w	r3, #14
   19524:	d129      	bne.n	1957a <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19526:	ea56 0207 	orrs.w	r2, r6, r7
   1952a:	d118      	bne.n	1955e <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   1952c:	4620      	mov	r0, r4
   1952e:	a901      	add	r1, sp, #4
   19530:	f7ff fe1c 	bl	1916c <submit_to_queue_locked>
   19534:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19536:	4814      	ldr	r0, [pc, #80]	; (19588 <k_work_schedule_for_queue+0xbc>)
   19538:	f7ff fad2 	bl	18ae0 <z_spin_unlock_valid>
   1953c:	b940      	cbnz	r0, 19550 <k_work_schedule_for_queue+0x84>
   1953e:	4913      	ldr	r1, [pc, #76]	; (1958c <k_work_schedule_for_queue+0xc0>)
   19540:	4810      	ldr	r0, [pc, #64]	; (19584 <k_work_schedule_for_queue+0xb8>)
   19542:	22ac      	movs	r2, #172	; 0xac
   19544:	f001 fd06 	bl	1af54 <printk>
   19548:	21ac      	movs	r1, #172	; 0xac
   1954a:	4810      	ldr	r0, [pc, #64]	; (1958c <k_work_schedule_for_queue+0xc0>)
   1954c:	f001 fee6 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   19550:	f385 8811 	msr	BASEPRI, r5
   19554:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   19558:	4620      	mov	r0, r4
   1955a:	b003      	add	sp, #12
   1955c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1955e:	f043 0308 	orr.w	r3, r3, #8
   19562:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   19564:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19566:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   1956a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1956c:	4632      	mov	r2, r6
   1956e:	463b      	mov	r3, r7
   19570:	4907      	ldr	r1, [pc, #28]	; (19590 <k_work_schedule_for_queue+0xc4>)
   19572:	f001 f953 	bl	1a81c <z_add_timeout>
	return ret;
   19576:	2401      	movs	r4, #1
   19578:	e7dd      	b.n	19536 <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   1957a:	2400      	movs	r4, #0
   1957c:	e7db      	b.n	19536 <k_work_schedule_for_queue+0x6a>
   1957e:	bf00      	nop
   19580:	0001d960 	.word	0x0001d960
   19584:	0001c625 	.word	0x0001c625
   19588:	2000d59c 	.word	0x2000d59c
   1958c:	0001cad3 	.word	0x0001cad3
   19590:	0001922d 	.word	0x0001922d

00019594 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   19594:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   19596:	4801      	ldr	r0, [pc, #4]	; (1959c <k_work_schedule+0x8>)
   19598:	f7ff bf98 	b.w	194cc <k_work_schedule_for_queue>
   1959c:	2000cdc0 	.word	0x2000cdc0

000195a0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   195a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   195a2:	4616      	mov	r6, r2
   195a4:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   195a6:	460c      	mov	r4, r1
{
   195a8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   195aa:	b951      	cbnz	r1, 195c2 <k_work_reschedule_for_queue+0x22>
   195ac:	4928      	ldr	r1, [pc, #160]	; (19650 <k_work_reschedule_for_queue+0xb0>)
   195ae:	4829      	ldr	r0, [pc, #164]	; (19654 <k_work_reschedule_for_queue+0xb4>)
   195b0:	f44f 7272 	mov.w	r2, #968	; 0x3c8
   195b4:	f001 fcce 	bl	1af54 <printk>
   195b8:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   195bc:	4824      	ldr	r0, [pc, #144]	; (19650 <k_work_reschedule_for_queue+0xb0>)
   195be:	f001 fead 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   195c2:	f04f 0320 	mov.w	r3, #32
   195c6:	f3ef 8511 	mrs	r5, BASEPRI
   195ca:	f383 8812 	msr	BASEPRI_MAX, r3
   195ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   195d2:	4821      	ldr	r0, [pc, #132]	; (19658 <k_work_reschedule_for_queue+0xb8>)
   195d4:	f7ff fa76 	bl	18ac4 <z_spin_lock_valid>
   195d8:	b940      	cbnz	r0, 195ec <k_work_reschedule_for_queue+0x4c>
   195da:	4920      	ldr	r1, [pc, #128]	; (1965c <k_work_reschedule_for_queue+0xbc>)
   195dc:	481d      	ldr	r0, [pc, #116]	; (19654 <k_work_reschedule_for_queue+0xb4>)
   195de:	2281      	movs	r2, #129	; 0x81
   195e0:	f001 fcb8 	bl	1af54 <printk>
   195e4:	2181      	movs	r1, #129	; 0x81
   195e6:	481d      	ldr	r0, [pc, #116]	; (1965c <k_work_reschedule_for_queue+0xbc>)
   195e8:	f001 fe98 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   195ec:	481a      	ldr	r0, [pc, #104]	; (19658 <k_work_reschedule_for_queue+0xb8>)
   195ee:	f7ff fa85 	bl	18afc <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   195f2:	4620      	mov	r0, r4
   195f4:	f002 fc6a 	bl	1becc <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   195f8:	ea56 0307 	orrs.w	r3, r6, r7
   195fc:	d118      	bne.n	19630 <k_work_reschedule_for_queue+0x90>
		return submit_to_queue_locked(work, queuep);
   195fe:	4620      	mov	r0, r4
   19600:	a901      	add	r1, sp, #4
   19602:	f7ff fdb3 	bl	1916c <submit_to_queue_locked>
   19606:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19608:	4813      	ldr	r0, [pc, #76]	; (19658 <k_work_reschedule_for_queue+0xb8>)
   1960a:	f7ff fa69 	bl	18ae0 <z_spin_unlock_valid>
   1960e:	b940      	cbnz	r0, 19622 <k_work_reschedule_for_queue+0x82>
   19610:	4912      	ldr	r1, [pc, #72]	; (1965c <k_work_reschedule_for_queue+0xbc>)
   19612:	4810      	ldr	r0, [pc, #64]	; (19654 <k_work_reschedule_for_queue+0xb4>)
   19614:	22ac      	movs	r2, #172	; 0xac
   19616:	f001 fc9d 	bl	1af54 <printk>
   1961a:	21ac      	movs	r1, #172	; 0xac
   1961c:	480f      	ldr	r0, [pc, #60]	; (1965c <k_work_reschedule_for_queue+0xbc>)
   1961e:	f001 fe7d 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   19622:	f385 8811 	msr	BASEPRI, r5
   19626:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1962a:	4620      	mov	r0, r4
   1962c:	b003      	add	sp, #12
   1962e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   19630:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19632:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   19636:	f043 0308 	orr.w	r3, r3, #8
   1963a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1963c:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1963e:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   19640:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19642:	4907      	ldr	r1, [pc, #28]	; (19660 <k_work_reschedule_for_queue+0xc0>)
   19644:	463b      	mov	r3, r7
   19646:	f001 f8e9 	bl	1a81c <z_add_timeout>
	return ret;
   1964a:	2401      	movs	r4, #1
   1964c:	e7dc      	b.n	19608 <k_work_reschedule_for_queue+0x68>
   1964e:	bf00      	nop
   19650:	0001d960 	.word	0x0001d960
   19654:	0001c625 	.word	0x0001c625
   19658:	2000d59c 	.word	0x2000d59c
   1965c:	0001cad3 	.word	0x0001cad3
   19660:	0001922d 	.word	0x0001922d

00019664 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   19664:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   19666:	4801      	ldr	r0, [pc, #4]	; (1966c <k_work_reschedule+0x8>)
   19668:	f7ff bf9a 	b.w	195a0 <k_work_reschedule_for_queue>
   1966c:	2000cdc0 	.word	0x2000cdc0

00019670 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   19670:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   19672:	4c08      	ldr	r4, [pc, #32]	; (19694 <z_reset_time_slice+0x24>)
   19674:	6823      	ldr	r3, [r4, #0]
   19676:	b15b      	cbz	r3, 19690 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   19678:	f7fb fd7e 	bl	15178 <sys_clock_elapsed>
   1967c:	4603      	mov	r3, r0
   1967e:	6820      	ldr	r0, [r4, #0]
   19680:	4a05      	ldr	r2, [pc, #20]	; (19698 <z_reset_time_slice+0x28>)
   19682:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   19684:	2100      	movs	r1, #0
	}
}
   19686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1968a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1968c:	f001 b9f2 	b.w	1aa74 <z_set_timeout_expiry>
}
   19690:	bd10      	pop	{r4, pc}
   19692:	bf00      	nop
   19694:	2000d5b4 	.word	0x2000d5b4
   19698:	2000d56c 	.word	0x2000d56c

0001969c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1969e:	4604      	mov	r4, r0
   196a0:	460d      	mov	r5, r1
	__asm__ volatile(
   196a2:	f04f 0320 	mov.w	r3, #32
   196a6:	f3ef 8611 	mrs	r6, BASEPRI
   196aa:	f383 8812 	msr	BASEPRI_MAX, r3
   196ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   196b2:	481e      	ldr	r0, [pc, #120]	; (1972c <k_sched_time_slice_set+0x90>)
   196b4:	f7ff fa06 	bl	18ac4 <z_spin_lock_valid>
   196b8:	b940      	cbnz	r0, 196cc <k_sched_time_slice_set+0x30>
   196ba:	491d      	ldr	r1, [pc, #116]	; (19730 <k_sched_time_slice_set+0x94>)
   196bc:	481d      	ldr	r0, [pc, #116]	; (19734 <k_sched_time_slice_set+0x98>)
   196be:	2281      	movs	r2, #129	; 0x81
   196c0:	f001 fc48 	bl	1af54 <printk>
   196c4:	2181      	movs	r1, #129	; 0x81
   196c6:	481a      	ldr	r0, [pc, #104]	; (19730 <k_sched_time_slice_set+0x94>)
   196c8:	f001 fe28 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   196cc:	4817      	ldr	r0, [pc, #92]	; (1972c <k_sched_time_slice_set+0x90>)
   196ce:	f7ff fa15 	bl	18afc <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   196d2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   196d6:	2200      	movs	r2, #0
   196d8:	f240 30e7 	movw	r0, #999	; 0x3e7
   196dc:	2100      	movs	r1, #0
   196de:	4b16      	ldr	r3, [pc, #88]	; (19738 <k_sched_time_slice_set+0x9c>)
   196e0:	fbe7 0104 	umlal	r0, r1, r7, r4
   196e4:	611a      	str	r2, [r3, #16]
   196e6:	2300      	movs	r3, #0
   196e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   196ec:	f7f6 fda6 	bl	1023c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   196f0:	2c00      	cmp	r4, #0
   196f2:	4b12      	ldr	r3, [pc, #72]	; (1973c <k_sched_time_slice_set+0xa0>)
   196f4:	dc16      	bgt.n	19724 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   196f6:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   196f8:	4b11      	ldr	r3, [pc, #68]	; (19740 <k_sched_time_slice_set+0xa4>)
   196fa:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   196fc:	f7ff ffb8 	bl	19670 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19700:	480a      	ldr	r0, [pc, #40]	; (1972c <k_sched_time_slice_set+0x90>)
   19702:	f7ff f9ed 	bl	18ae0 <z_spin_unlock_valid>
   19706:	b940      	cbnz	r0, 1971a <k_sched_time_slice_set+0x7e>
   19708:	4909      	ldr	r1, [pc, #36]	; (19730 <k_sched_time_slice_set+0x94>)
   1970a:	480a      	ldr	r0, [pc, #40]	; (19734 <k_sched_time_slice_set+0x98>)
   1970c:	22ac      	movs	r2, #172	; 0xac
   1970e:	f001 fc21 	bl	1af54 <printk>
   19712:	21ac      	movs	r1, #172	; 0xac
   19714:	4806      	ldr	r0, [pc, #24]	; (19730 <k_sched_time_slice_set+0x94>)
   19716:	f001 fe01 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1971a:	f386 8811 	msr	BASEPRI, r6
   1971e:	f3bf 8f6f 	isb	sy
	}
}
   19722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   19724:	2802      	cmp	r0, #2
   19726:	bfb8      	it	lt
   19728:	2002      	movlt	r0, #2
   1972a:	e7e4      	b.n	196f6 <k_sched_time_slice_set+0x5a>
   1972c:	2000d5ac 	.word	0x2000d5ac
   19730:	0001cad3 	.word	0x0001cad3
   19734:	0001c625 	.word	0x0001c625
   19738:	2000d56c 	.word	0x2000d56c
   1973c:	2000d5b4 	.word	0x2000d5b4
   19740:	2000d5b0 	.word	0x2000d5b0

00019744 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   19744:	b538      	push	{r3, r4, r5, lr}
   19746:	4604      	mov	r4, r0
	__asm__ volatile(
   19748:	f04f 0320 	mov.w	r3, #32
   1974c:	f3ef 8511 	mrs	r5, BASEPRI
   19750:	f383 8812 	msr	BASEPRI_MAX, r3
   19754:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19758:	4812      	ldr	r0, [pc, #72]	; (197a4 <z_unpend_thread_no_timeout+0x60>)
   1975a:	f7ff f9b3 	bl	18ac4 <z_spin_lock_valid>
   1975e:	b940      	cbnz	r0, 19772 <z_unpend_thread_no_timeout+0x2e>
   19760:	4911      	ldr	r1, [pc, #68]	; (197a8 <z_unpend_thread_no_timeout+0x64>)
   19762:	4812      	ldr	r0, [pc, #72]	; (197ac <z_unpend_thread_no_timeout+0x68>)
   19764:	2281      	movs	r2, #129	; 0x81
   19766:	f001 fbf5 	bl	1af54 <printk>
   1976a:	2181      	movs	r1, #129	; 0x81
   1976c:	480e      	ldr	r0, [pc, #56]	; (197a8 <z_unpend_thread_no_timeout+0x64>)
   1976e:	f001 fdd5 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   19772:	480c      	ldr	r0, [pc, #48]	; (197a4 <z_unpend_thread_no_timeout+0x60>)
   19774:	f7ff f9c2 	bl	18afc <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   19778:	4620      	mov	r0, r4
   1977a:	f000 f8c1 	bl	19900 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1977e:	4809      	ldr	r0, [pc, #36]	; (197a4 <z_unpend_thread_no_timeout+0x60>)
   19780:	f7ff f9ae 	bl	18ae0 <z_spin_unlock_valid>
   19784:	b940      	cbnz	r0, 19798 <z_unpend_thread_no_timeout+0x54>
   19786:	4908      	ldr	r1, [pc, #32]	; (197a8 <z_unpend_thread_no_timeout+0x64>)
   19788:	4808      	ldr	r0, [pc, #32]	; (197ac <z_unpend_thread_no_timeout+0x68>)
   1978a:	22ac      	movs	r2, #172	; 0xac
   1978c:	f001 fbe2 	bl	1af54 <printk>
   19790:	21ac      	movs	r1, #172	; 0xac
   19792:	4805      	ldr	r0, [pc, #20]	; (197a8 <z_unpend_thread_no_timeout+0x64>)
   19794:	f001 fdc2 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   19798:	f385 8811 	msr	BASEPRI, r5
   1979c:	f3bf 8f6f 	isb	sy
	}
}
   197a0:	bd38      	pop	{r3, r4, r5, pc}
   197a2:	bf00      	nop
   197a4:	2000d5ac 	.word	0x2000d5ac
   197a8:	0001cad3 	.word	0x0001cad3
   197ac:	0001c625 	.word	0x0001c625

000197b0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   197b0:	b510      	push	{r4, lr}
   197b2:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   197b4:	460c      	mov	r4, r1
   197b6:	b9c1      	cbnz	r1, 197ea <z_reschedule+0x3a>
   197b8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   197bc:	b9aa      	cbnz	r2, 197ea <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   197be:	4a14      	ldr	r2, [pc, #80]	; (19810 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   197c0:	69d1      	ldr	r1, [r2, #28]
   197c2:	6892      	ldr	r2, [r2, #8]
   197c4:	4291      	cmp	r1, r2
   197c6:	d010      	beq.n	197ea <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   197c8:	f7ff f98a 	bl	18ae0 <z_spin_unlock_valid>
   197cc:	b940      	cbnz	r0, 197e0 <z_reschedule+0x30>
   197ce:	4911      	ldr	r1, [pc, #68]	; (19814 <z_reschedule+0x64>)
   197d0:	4811      	ldr	r0, [pc, #68]	; (19818 <z_reschedule+0x68>)
   197d2:	22c3      	movs	r2, #195	; 0xc3
   197d4:	f001 fbbe 	bl	1af54 <printk>
   197d8:	21c3      	movs	r1, #195	; 0xc3
   197da:	480e      	ldr	r0, [pc, #56]	; (19814 <z_reschedule+0x64>)
   197dc:	f001 fd9e 	bl	1b31c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   197e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   197e4:	2000      	movs	r0, #0
   197e6:	f7f9 bb7d 	b.w	12ee4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   197ea:	4618      	mov	r0, r3
   197ec:	f7ff f978 	bl	18ae0 <z_spin_unlock_valid>
   197f0:	b940      	cbnz	r0, 19804 <z_reschedule+0x54>
   197f2:	4908      	ldr	r1, [pc, #32]	; (19814 <z_reschedule+0x64>)
   197f4:	4808      	ldr	r0, [pc, #32]	; (19818 <z_reschedule+0x68>)
   197f6:	22ac      	movs	r2, #172	; 0xac
   197f8:	f001 fbac 	bl	1af54 <printk>
   197fc:	21ac      	movs	r1, #172	; 0xac
   197fe:	4805      	ldr	r0, [pc, #20]	; (19814 <z_reschedule+0x64>)
   19800:	f001 fd8c 	bl	1b31c <assert_post_action>
   19804:	f384 8811 	msr	BASEPRI, r4
   19808:	f3bf 8f6f 	isb	sy
   1980c:	bd10      	pop	{r4, pc}
   1980e:	bf00      	nop
   19810:	2000d56c 	.word	0x2000d56c
   19814:	0001cad3 	.word	0x0001cad3
   19818:	0001c625 	.word	0x0001c625

0001981c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1981c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1981e:	f04f 0320 	mov.w	r3, #32
   19822:	f3ef 8511 	mrs	r5, BASEPRI
   19826:	f383 8812 	msr	BASEPRI_MAX, r3
   1982a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1982e:	4820      	ldr	r0, [pc, #128]	; (198b0 <k_sched_lock+0x94>)
   19830:	f7ff f948 	bl	18ac4 <z_spin_lock_valid>
   19834:	b940      	cbnz	r0, 19848 <k_sched_lock+0x2c>
   19836:	491f      	ldr	r1, [pc, #124]	; (198b4 <k_sched_lock+0x98>)
   19838:	481f      	ldr	r0, [pc, #124]	; (198b8 <k_sched_lock+0x9c>)
   1983a:	2281      	movs	r2, #129	; 0x81
   1983c:	f001 fb8a 	bl	1af54 <printk>
   19840:	2181      	movs	r1, #129	; 0x81
   19842:	481c      	ldr	r0, [pc, #112]	; (198b4 <k_sched_lock+0x98>)
   19844:	f001 fd6a 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   19848:	4819      	ldr	r0, [pc, #100]	; (198b0 <k_sched_lock+0x94>)
   1984a:	f7ff f957 	bl	18afc <z_spin_lock_set_owner>
   1984e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   19852:	b143      	cbz	r3, 19866 <k_sched_lock+0x4a>
   19854:	4919      	ldr	r1, [pc, #100]	; (198bc <k_sched_lock+0xa0>)
   19856:	4818      	ldr	r0, [pc, #96]	; (198b8 <k_sched_lock+0x9c>)
   19858:	22fd      	movs	r2, #253	; 0xfd
   1985a:	f001 fb7b 	bl	1af54 <printk>
   1985e:	21fd      	movs	r1, #253	; 0xfd
   19860:	4816      	ldr	r0, [pc, #88]	; (198bc <k_sched_lock+0xa0>)
   19862:	f001 fd5b 	bl	1b31c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   19866:	4c16      	ldr	r4, [pc, #88]	; (198c0 <k_sched_lock+0xa4>)
   19868:	68a2      	ldr	r2, [r4, #8]
   1986a:	7bd2      	ldrb	r2, [r2, #15]
   1986c:	2a01      	cmp	r2, #1
   1986e:	d108      	bne.n	19882 <k_sched_lock+0x66>
   19870:	4912      	ldr	r1, [pc, #72]	; (198bc <k_sched_lock+0xa0>)
   19872:	4811      	ldr	r0, [pc, #68]	; (198b8 <k_sched_lock+0x9c>)
   19874:	22fe      	movs	r2, #254	; 0xfe
   19876:	f001 fb6d 	bl	1af54 <printk>
   1987a:	21fe      	movs	r1, #254	; 0xfe
   1987c:	480f      	ldr	r0, [pc, #60]	; (198bc <k_sched_lock+0xa0>)
   1987e:	f001 fd4d 	bl	1b31c <assert_post_action>
	--_current->base.sched_locked;
   19882:	68a2      	ldr	r2, [r4, #8]
   19884:	7bd3      	ldrb	r3, [r2, #15]
   19886:	3b01      	subs	r3, #1
   19888:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1988a:	4809      	ldr	r0, [pc, #36]	; (198b0 <k_sched_lock+0x94>)
   1988c:	f7ff f928 	bl	18ae0 <z_spin_unlock_valid>
   19890:	b940      	cbnz	r0, 198a4 <k_sched_lock+0x88>
   19892:	4908      	ldr	r1, [pc, #32]	; (198b4 <k_sched_lock+0x98>)
   19894:	4808      	ldr	r0, [pc, #32]	; (198b8 <k_sched_lock+0x9c>)
   19896:	22ac      	movs	r2, #172	; 0xac
   19898:	f001 fb5c 	bl	1af54 <printk>
   1989c:	21ac      	movs	r1, #172	; 0xac
   1989e:	4805      	ldr	r0, [pc, #20]	; (198b4 <k_sched_lock+0x98>)
   198a0:	f001 fd3c 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   198a4:	f385 8811 	msr	BASEPRI, r5
   198a8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   198ac:	bd38      	pop	{r3, r4, r5, pc}
   198ae:	bf00      	nop
   198b0:	2000d5ac 	.word	0x2000d5ac
   198b4:	0001cad3 	.word	0x0001cad3
   198b8:	0001c625 	.word	0x0001c625
   198bc:	0001d915 	.word	0x0001d915
   198c0:	2000d56c 	.word	0x2000d56c

000198c4 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   198c4:	4b0b      	ldr	r3, [pc, #44]	; (198f4 <z_priq_dumb_remove+0x30>)
{
   198c6:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   198c8:	4299      	cmp	r1, r3
{
   198ca:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   198cc:	d10a      	bne.n	198e4 <z_priq_dumb_remove+0x20>
   198ce:	490a      	ldr	r1, [pc, #40]	; (198f8 <z_priq_dumb_remove+0x34>)
   198d0:	480a      	ldr	r0, [pc, #40]	; (198fc <z_priq_dumb_remove+0x38>)
   198d2:	f240 32e7 	movw	r2, #999	; 0x3e7
   198d6:	f001 fb3d 	bl	1af54 <printk>
   198da:	f240 31e7 	movw	r1, #999	; 0x3e7
   198de:	4806      	ldr	r0, [pc, #24]	; (198f8 <z_priq_dumb_remove+0x34>)
   198e0:	f001 fd1c 	bl	1b31c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   198e4:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   198e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   198ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   198ec:	2300      	movs	r3, #0
	node->prev = NULL;
   198ee:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   198f2:	bd10      	pop	{r4, pc}
   198f4:	2000ccb8 	.word	0x2000ccb8
   198f8:	0001d981 	.word	0x0001d981
   198fc:	0001c625 	.word	0x0001c625

00019900 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   19900:	6883      	ldr	r3, [r0, #8]
{
   19902:	b510      	push	{r4, lr}
   19904:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   19906:	b953      	cbnz	r3, 1991e <unpend_thread_no_timeout+0x1e>
   19908:	490a      	ldr	r1, [pc, #40]	; (19934 <unpend_thread_no_timeout+0x34>)
   1990a:	480b      	ldr	r0, [pc, #44]	; (19938 <unpend_thread_no_timeout+0x38>)
   1990c:	f240 2283 	movw	r2, #643	; 0x283
   19910:	f001 fb20 	bl	1af54 <printk>
   19914:	f240 2183 	movw	r1, #643	; 0x283
   19918:	4806      	ldr	r0, [pc, #24]	; (19934 <unpend_thread_no_timeout+0x34>)
   1991a:	f001 fcff 	bl	1b31c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1991e:	4621      	mov	r1, r4
   19920:	68a0      	ldr	r0, [r4, #8]
   19922:	f7ff ffcf 	bl	198c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   19926:	7b63      	ldrb	r3, [r4, #13]
   19928:	f023 0302 	bic.w	r3, r3, #2
   1992c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1992e:	2300      	movs	r3, #0
   19930:	60a3      	str	r3, [r4, #8]
}
   19932:	bd10      	pop	{r4, pc}
   19934:	0001d981 	.word	0x0001d981
   19938:	0001c625 	.word	0x0001c625

0001993c <z_unpend_thread>:
{
   1993c:	b538      	push	{r3, r4, r5, lr}
   1993e:	4604      	mov	r4, r0
	__asm__ volatile(
   19940:	f04f 0320 	mov.w	r3, #32
   19944:	f3ef 8511 	mrs	r5, BASEPRI
   19948:	f383 8812 	msr	BASEPRI_MAX, r3
   1994c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19950:	4814      	ldr	r0, [pc, #80]	; (199a4 <z_unpend_thread+0x68>)
   19952:	f7ff f8b7 	bl	18ac4 <z_spin_lock_valid>
   19956:	b940      	cbnz	r0, 1996a <z_unpend_thread+0x2e>
   19958:	4913      	ldr	r1, [pc, #76]	; (199a8 <z_unpend_thread+0x6c>)
   1995a:	4814      	ldr	r0, [pc, #80]	; (199ac <z_unpend_thread+0x70>)
   1995c:	2281      	movs	r2, #129	; 0x81
   1995e:	f001 faf9 	bl	1af54 <printk>
   19962:	2181      	movs	r1, #129	; 0x81
   19964:	4810      	ldr	r0, [pc, #64]	; (199a8 <z_unpend_thread+0x6c>)
   19966:	f001 fcd9 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1996a:	480e      	ldr	r0, [pc, #56]	; (199a4 <z_unpend_thread+0x68>)
   1996c:	f7ff f8c6 	bl	18afc <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   19970:	4620      	mov	r0, r4
   19972:	f7ff ffc5 	bl	19900 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19976:	480b      	ldr	r0, [pc, #44]	; (199a4 <z_unpend_thread+0x68>)
   19978:	f7ff f8b2 	bl	18ae0 <z_spin_unlock_valid>
   1997c:	b940      	cbnz	r0, 19990 <z_unpend_thread+0x54>
   1997e:	490a      	ldr	r1, [pc, #40]	; (199a8 <z_unpend_thread+0x6c>)
   19980:	480a      	ldr	r0, [pc, #40]	; (199ac <z_unpend_thread+0x70>)
   19982:	22ac      	movs	r2, #172	; 0xac
   19984:	f001 fae6 	bl	1af54 <printk>
   19988:	21ac      	movs	r1, #172	; 0xac
   1998a:	4807      	ldr	r0, [pc, #28]	; (199a8 <z_unpend_thread+0x6c>)
   1998c:	f001 fcc6 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   19990:	f385 8811 	msr	BASEPRI, r5
   19994:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   19998:	f104 0018 	add.w	r0, r4, #24
}
   1999c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   199a0:	f000 bff6 	b.w	1a990 <z_abort_timeout>
   199a4:	2000d5ac 	.word	0x2000d5ac
   199a8:	0001cad3 	.word	0x0001cad3
   199ac:	0001c625 	.word	0x0001c625

000199b0 <update_cache>:
{
   199b0:	b538      	push	{r3, r4, r5, lr}
   199b2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   199b4:	4812      	ldr	r0, [pc, #72]	; (19a00 <update_cache+0x50>)
   199b6:	f002 faad 	bl	1bf14 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   199ba:	4d12      	ldr	r5, [pc, #72]	; (19a04 <update_cache+0x54>)
   199bc:	4604      	mov	r4, r0
   199be:	b900      	cbnz	r0, 199c2 <update_cache+0x12>
   199c0:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   199c2:	b9aa      	cbnz	r2, 199f0 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   199c4:	68ab      	ldr	r3, [r5, #8]
   199c6:	b943      	cbnz	r3, 199da <update_cache+0x2a>
   199c8:	490f      	ldr	r1, [pc, #60]	; (19a08 <update_cache+0x58>)
   199ca:	4810      	ldr	r0, [pc, #64]	; (19a0c <update_cache+0x5c>)
   199cc:	2289      	movs	r2, #137	; 0x89
   199ce:	f001 fac1 	bl	1af54 <printk>
   199d2:	2189      	movs	r1, #137	; 0x89
   199d4:	480c      	ldr	r0, [pc, #48]	; (19a08 <update_cache+0x58>)
   199d6:	f001 fca1 	bl	1b31c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   199da:	68ab      	ldr	r3, [r5, #8]
   199dc:	7b5a      	ldrb	r2, [r3, #13]
   199de:	06d2      	lsls	r2, r2, #27
   199e0:	d106      	bne.n	199f0 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   199e2:	69a2      	ldr	r2, [r4, #24]
   199e4:	b922      	cbnz	r2, 199f0 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   199e6:	89da      	ldrh	r2, [r3, #14]
   199e8:	2a7f      	cmp	r2, #127	; 0x7f
   199ea:	d901      	bls.n	199f0 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   199ec:	61eb      	str	r3, [r5, #28]
}
   199ee:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   199f0:	68ab      	ldr	r3, [r5, #8]
   199f2:	42a3      	cmp	r3, r4
   199f4:	d001      	beq.n	199fa <update_cache+0x4a>
			z_reset_time_slice();
   199f6:	f7ff fe3b 	bl	19670 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   199fa:	61ec      	str	r4, [r5, #28]
}
   199fc:	e7f7      	b.n	199ee <update_cache+0x3e>
   199fe:	bf00      	nop
   19a00:	2000d58c 	.word	0x2000d58c
   19a04:	2000d56c 	.word	0x2000d56c
   19a08:	0001d981 	.word	0x0001d981
   19a0c:	0001c625 	.word	0x0001c625

00019a10 <move_thread_to_end_of_prio_q>:
{
   19a10:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   19a12:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   19a16:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   19a18:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   19a1a:	7b43      	ldrb	r3, [r0, #13]
   19a1c:	da06      	bge.n	19a2c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   19a22:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19a24:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19a26:	481f      	ldr	r0, [pc, #124]	; (19aa4 <move_thread_to_end_of_prio_q+0x94>)
   19a28:	f7ff ff4c 	bl	198c4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   19a2c:	7b63      	ldrb	r3, [r4, #13]
   19a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19a32:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19a34:	4b1c      	ldr	r3, [pc, #112]	; (19aa8 <move_thread_to_end_of_prio_q+0x98>)
   19a36:	429c      	cmp	r4, r3
   19a38:	d108      	bne.n	19a4c <move_thread_to_end_of_prio_q+0x3c>
   19a3a:	491c      	ldr	r1, [pc, #112]	; (19aac <move_thread_to_end_of_prio_q+0x9c>)
   19a3c:	481c      	ldr	r0, [pc, #112]	; (19ab0 <move_thread_to_end_of_prio_q+0xa0>)
   19a3e:	22ba      	movs	r2, #186	; 0xba
   19a40:	f001 fa88 	bl	1af54 <printk>
   19a44:	21ba      	movs	r1, #186	; 0xba
   19a46:	4819      	ldr	r0, [pc, #100]	; (19aac <move_thread_to_end_of_prio_q+0x9c>)
   19a48:	f001 fc68 	bl	1b31c <assert_post_action>
	return list->head == list;
   19a4c:	4a19      	ldr	r2, [pc, #100]	; (19ab4 <move_thread_to_end_of_prio_q+0xa4>)
   19a4e:	4611      	mov	r1, r2
   19a50:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19a54:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19a56:	428b      	cmp	r3, r1
   19a58:	bf08      	it	eq
   19a5a:	2300      	moveq	r3, #0
   19a5c:	2b00      	cmp	r3, #0
   19a5e:	bf38      	it	cc
   19a60:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19a62:	b1cb      	cbz	r3, 19a98 <move_thread_to_end_of_prio_q+0x88>
	int32_t b1 = thread_1->base.prio;
   19a64:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   19a68:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   19a6c:	4286      	cmp	r6, r0
   19a6e:	d00f      	beq.n	19a90 <move_thread_to_end_of_prio_q+0x80>
		return b2 - b1;
   19a70:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   19a72:	2800      	cmp	r0, #0
   19a74:	dd0c      	ble.n	19a90 <move_thread_to_end_of_prio_q+0x80>
	sys_dnode_t *const prev = successor->prev;
   19a76:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19a78:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   19a7c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19a7e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   19a80:	6890      	ldr	r0, [r2, #8]
   19a82:	1b03      	subs	r3, r0, r4
   19a84:	4258      	negs	r0, r3
   19a86:	4158      	adcs	r0, r3
}
   19a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   19a8c:	f7ff bf90 	b.w	199b0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   19a90:	42ab      	cmp	r3, r5
   19a92:	d001      	beq.n	19a98 <move_thread_to_end_of_prio_q+0x88>
   19a94:	681b      	ldr	r3, [r3, #0]
   19a96:	e7e4      	b.n	19a62 <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
   19a98:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   19a9c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   19a9e:	6254      	str	r4, [r2, #36]	; 0x24
}
   19aa0:	e7ee      	b.n	19a80 <move_thread_to_end_of_prio_q+0x70>
   19aa2:	bf00      	nop
   19aa4:	2000d58c 	.word	0x2000d58c
   19aa8:	2000ccb8 	.word	0x2000ccb8
   19aac:	0001d981 	.word	0x0001d981
   19ab0:	0001c625 	.word	0x0001c625
   19ab4:	2000d56c 	.word	0x2000d56c

00019ab8 <z_time_slice>:
{
   19ab8:	b570      	push	{r4, r5, r6, lr}
   19aba:	4604      	mov	r4, r0
	__asm__ volatile(
   19abc:	f04f 0320 	mov.w	r3, #32
   19ac0:	f3ef 8511 	mrs	r5, BASEPRI
   19ac4:	f383 8812 	msr	BASEPRI_MAX, r3
   19ac8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19acc:	4825      	ldr	r0, [pc, #148]	; (19b64 <z_time_slice+0xac>)
   19ace:	f7fe fff9 	bl	18ac4 <z_spin_lock_valid>
   19ad2:	b940      	cbnz	r0, 19ae6 <z_time_slice+0x2e>
   19ad4:	4924      	ldr	r1, [pc, #144]	; (19b68 <z_time_slice+0xb0>)
   19ad6:	4825      	ldr	r0, [pc, #148]	; (19b6c <z_time_slice+0xb4>)
   19ad8:	2281      	movs	r2, #129	; 0x81
   19ada:	f001 fa3b 	bl	1af54 <printk>
   19ade:	2181      	movs	r1, #129	; 0x81
   19ae0:	4821      	ldr	r0, [pc, #132]	; (19b68 <z_time_slice+0xb0>)
   19ae2:	f001 fc1b 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   19ae6:	481f      	ldr	r0, [pc, #124]	; (19b64 <z_time_slice+0xac>)
   19ae8:	f7ff f808 	bl	18afc <z_spin_lock_set_owner>
	if (pending_current == _current) {
   19aec:	4b20      	ldr	r3, [pc, #128]	; (19b70 <z_time_slice+0xb8>)
   19aee:	4a21      	ldr	r2, [pc, #132]	; (19b74 <z_time_slice+0xbc>)
   19af0:	6898      	ldr	r0, [r3, #8]
   19af2:	6811      	ldr	r1, [r2, #0]
   19af4:	4288      	cmp	r0, r1
   19af6:	4619      	mov	r1, r3
   19af8:	d113      	bne.n	19b22 <z_time_slice+0x6a>
			z_reset_time_slice();
   19afa:	f7ff fdb9 	bl	19670 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19afe:	4819      	ldr	r0, [pc, #100]	; (19b64 <z_time_slice+0xac>)
   19b00:	f7fe ffee 	bl	18ae0 <z_spin_unlock_valid>
   19b04:	b940      	cbnz	r0, 19b18 <z_time_slice+0x60>
   19b06:	4918      	ldr	r1, [pc, #96]	; (19b68 <z_time_slice+0xb0>)
   19b08:	4818      	ldr	r0, [pc, #96]	; (19b6c <z_time_slice+0xb4>)
   19b0a:	22ac      	movs	r2, #172	; 0xac
   19b0c:	f001 fa22 	bl	1af54 <printk>
   19b10:	21ac      	movs	r1, #172	; 0xac
   19b12:	4815      	ldr	r0, [pc, #84]	; (19b68 <z_time_slice+0xb0>)
   19b14:	f001 fc02 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   19b18:	f385 8811 	msr	BASEPRI, r5
   19b1c:	f3bf 8f6f 	isb	sy
}
   19b20:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   19b22:	2600      	movs	r6, #0
   19b24:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   19b26:	4a14      	ldr	r2, [pc, #80]	; (19b78 <z_time_slice+0xc0>)
   19b28:	6812      	ldr	r2, [r2, #0]
   19b2a:	b1ba      	cbz	r2, 19b5c <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   19b2c:	89c2      	ldrh	r2, [r0, #14]
   19b2e:	2a7f      	cmp	r2, #127	; 0x7f
   19b30:	d814      	bhi.n	19b5c <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
   19b32:	7b42      	ldrb	r2, [r0, #13]
   19b34:	06d2      	lsls	r2, r2, #27
   19b36:	d111      	bne.n	19b5c <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   19b38:	4a10      	ldr	r2, [pc, #64]	; (19b7c <z_time_slice+0xc4>)
   19b3a:	f990 600e 	ldrsb.w	r6, [r0, #14]
   19b3e:	6812      	ldr	r2, [r2, #0]
   19b40:	4296      	cmp	r6, r2
   19b42:	db0b      	blt.n	19b5c <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   19b44:	4a0e      	ldr	r2, [pc, #56]	; (19b80 <z_time_slice+0xc8>)
   19b46:	4290      	cmp	r0, r2
   19b48:	d008      	beq.n	19b5c <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
   19b4a:	691a      	ldr	r2, [r3, #16]
   19b4c:	42a2      	cmp	r2, r4
   19b4e:	dc02      	bgt.n	19b56 <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
   19b50:	f7ff ff5e 	bl	19a10 <move_thread_to_end_of_prio_q>
   19b54:	e7d1      	b.n	19afa <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
   19b56:	1b12      	subs	r2, r2, r4
   19b58:	611a      	str	r2, [r3, #16]
   19b5a:	e7d0      	b.n	19afe <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
   19b5c:	2300      	movs	r3, #0
   19b5e:	610b      	str	r3, [r1, #16]
   19b60:	e7cd      	b.n	19afe <z_time_slice+0x46>
   19b62:	bf00      	nop
   19b64:	2000d5ac 	.word	0x2000d5ac
   19b68:	0001cad3 	.word	0x0001cad3
   19b6c:	0001c625 	.word	0x0001c625
   19b70:	2000d56c 	.word	0x2000d56c
   19b74:	2000d5a8 	.word	0x2000d5a8
   19b78:	2000d5b4 	.word	0x2000d5b4
   19b7c:	2000d5b0 	.word	0x2000d5b0
   19b80:	2000ccb8 	.word	0x2000ccb8

00019b84 <ready_thread>:
{
   19b84:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   19b86:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   19b8a:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   19b8c:	2a00      	cmp	r2, #0
   19b8e:	7b43      	ldrb	r3, [r0, #13]
   19b90:	db3d      	blt.n	19c0e <ready_thread+0x8a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19b92:	06da      	lsls	r2, r3, #27
   19b94:	d13b      	bne.n	19c0e <ready_thread+0x8a>
	return !sys_dnode_is_linked(&to->node);
   19b96:	6985      	ldr	r5, [r0, #24]
   19b98:	2d00      	cmp	r5, #0
   19b9a:	d138      	bne.n	19c0e <ready_thread+0x8a>
	thread->base.thread_state |= _THREAD_QUEUED;
   19b9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19ba0:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19ba2:	4b1b      	ldr	r3, [pc, #108]	; (19c10 <ready_thread+0x8c>)
   19ba4:	4298      	cmp	r0, r3
   19ba6:	d108      	bne.n	19bba <ready_thread+0x36>
   19ba8:	491a      	ldr	r1, [pc, #104]	; (19c14 <ready_thread+0x90>)
   19baa:	481b      	ldr	r0, [pc, #108]	; (19c18 <ready_thread+0x94>)
   19bac:	22ba      	movs	r2, #186	; 0xba
   19bae:	f001 f9d1 	bl	1af54 <printk>
   19bb2:	21ba      	movs	r1, #186	; 0xba
   19bb4:	4817      	ldr	r0, [pc, #92]	; (19c14 <ready_thread+0x90>)
   19bb6:	f001 fbb1 	bl	1b31c <assert_post_action>
	return list->head == list;
   19bba:	4918      	ldr	r1, [pc, #96]	; (19c1c <ready_thread+0x98>)
   19bbc:	460b      	mov	r3, r1
   19bbe:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19bc2:	4298      	cmp	r0, r3
   19bc4:	bf18      	it	ne
   19bc6:	4605      	movne	r5, r0
   19bc8:	2d00      	cmp	r5, #0
   19bca:	461a      	mov	r2, r3
   19bcc:	462b      	mov	r3, r5
   19bce:	bf38      	it	cc
   19bd0:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19bd2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19bd4:	b1b3      	cbz	r3, 19c04 <ready_thread+0x80>
	int32_t b1 = thread_1->base.prio;
   19bd6:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   19bda:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   19bde:	4286      	cmp	r6, r0
   19be0:	d00c      	beq.n	19bfc <ready_thread+0x78>
		return b2 - b1;
   19be2:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   19be4:	2800      	cmp	r0, #0
   19be6:	dd09      	ble.n	19bfc <ready_thread+0x78>
	sys_dnode_t *const prev = successor->prev;
   19be8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19bea:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   19bee:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19bf0:	605c      	str	r4, [r3, #4]
		update_cache(0);
   19bf2:	2000      	movs	r0, #0
}
   19bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   19bf8:	f7ff beda 	b.w	199b0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   19bfc:	42ab      	cmp	r3, r5
   19bfe:	d001      	beq.n	19c04 <ready_thread+0x80>
   19c00:	681b      	ldr	r3, [r3, #0]
   19c02:	e7e7      	b.n	19bd4 <ready_thread+0x50>
	node->prev = tail;
   19c04:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   19c08:	602c      	str	r4, [r5, #0]
	list->tail = node;
   19c0a:	624c      	str	r4, [r1, #36]	; 0x24
}
   19c0c:	e7f1      	b.n	19bf2 <ready_thread+0x6e>
}
   19c0e:	bd70      	pop	{r4, r5, r6, pc}
   19c10:	2000ccb8 	.word	0x2000ccb8
   19c14:	0001d981 	.word	0x0001d981
   19c18:	0001c625 	.word	0x0001c625
   19c1c:	2000d56c 	.word	0x2000d56c

00019c20 <z_ready_thread>:
{
   19c20:	b538      	push	{r3, r4, r5, lr}
   19c22:	4604      	mov	r4, r0
	__asm__ volatile(
   19c24:	f04f 0320 	mov.w	r3, #32
   19c28:	f3ef 8511 	mrs	r5, BASEPRI
   19c2c:	f383 8812 	msr	BASEPRI_MAX, r3
   19c30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19c34:	4812      	ldr	r0, [pc, #72]	; (19c80 <z_ready_thread+0x60>)
   19c36:	f7fe ff45 	bl	18ac4 <z_spin_lock_valid>
   19c3a:	b940      	cbnz	r0, 19c4e <z_ready_thread+0x2e>
   19c3c:	4911      	ldr	r1, [pc, #68]	; (19c84 <z_ready_thread+0x64>)
   19c3e:	4812      	ldr	r0, [pc, #72]	; (19c88 <z_ready_thread+0x68>)
   19c40:	2281      	movs	r2, #129	; 0x81
   19c42:	f001 f987 	bl	1af54 <printk>
   19c46:	2181      	movs	r1, #129	; 0x81
   19c48:	480e      	ldr	r0, [pc, #56]	; (19c84 <z_ready_thread+0x64>)
   19c4a:	f001 fb67 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   19c4e:	480c      	ldr	r0, [pc, #48]	; (19c80 <z_ready_thread+0x60>)
   19c50:	f7fe ff54 	bl	18afc <z_spin_lock_set_owner>
			ready_thread(thread);
   19c54:	4620      	mov	r0, r4
   19c56:	f7ff ff95 	bl	19b84 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19c5a:	4809      	ldr	r0, [pc, #36]	; (19c80 <z_ready_thread+0x60>)
   19c5c:	f7fe ff40 	bl	18ae0 <z_spin_unlock_valid>
   19c60:	b940      	cbnz	r0, 19c74 <z_ready_thread+0x54>
   19c62:	4908      	ldr	r1, [pc, #32]	; (19c84 <z_ready_thread+0x64>)
   19c64:	4808      	ldr	r0, [pc, #32]	; (19c88 <z_ready_thread+0x68>)
   19c66:	22ac      	movs	r2, #172	; 0xac
   19c68:	f001 f974 	bl	1af54 <printk>
   19c6c:	21ac      	movs	r1, #172	; 0xac
   19c6e:	4805      	ldr	r0, [pc, #20]	; (19c84 <z_ready_thread+0x64>)
   19c70:	f001 fb54 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   19c74:	f385 8811 	msr	BASEPRI, r5
   19c78:	f3bf 8f6f 	isb	sy
}
   19c7c:	bd38      	pop	{r3, r4, r5, pc}
   19c7e:	bf00      	nop
   19c80:	2000d5ac 	.word	0x2000d5ac
   19c84:	0001cad3 	.word	0x0001cad3
   19c88:	0001c625 	.word	0x0001c625

00019c8c <z_sched_start>:
{
   19c8c:	b538      	push	{r3, r4, r5, lr}
   19c8e:	4604      	mov	r4, r0
	__asm__ volatile(
   19c90:	f04f 0320 	mov.w	r3, #32
   19c94:	f3ef 8511 	mrs	r5, BASEPRI
   19c98:	f383 8812 	msr	BASEPRI_MAX, r3
   19c9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19ca0:	4818      	ldr	r0, [pc, #96]	; (19d04 <z_sched_start+0x78>)
   19ca2:	f7fe ff0f 	bl	18ac4 <z_spin_lock_valid>
   19ca6:	b940      	cbnz	r0, 19cba <z_sched_start+0x2e>
   19ca8:	4917      	ldr	r1, [pc, #92]	; (19d08 <z_sched_start+0x7c>)
   19caa:	4818      	ldr	r0, [pc, #96]	; (19d0c <z_sched_start+0x80>)
   19cac:	2281      	movs	r2, #129	; 0x81
   19cae:	f001 f951 	bl	1af54 <printk>
   19cb2:	2181      	movs	r1, #129	; 0x81
   19cb4:	4814      	ldr	r0, [pc, #80]	; (19d08 <z_sched_start+0x7c>)
   19cb6:	f001 fb31 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   19cba:	4812      	ldr	r0, [pc, #72]	; (19d04 <z_sched_start+0x78>)
   19cbc:	f7fe ff1e 	bl	18afc <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   19cc0:	7b63      	ldrb	r3, [r4, #13]
   19cc2:	075a      	lsls	r2, r3, #29
   19cc4:	d411      	bmi.n	19cea <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19cc6:	480f      	ldr	r0, [pc, #60]	; (19d04 <z_sched_start+0x78>)
   19cc8:	f7fe ff0a 	bl	18ae0 <z_spin_unlock_valid>
   19ccc:	b940      	cbnz	r0, 19ce0 <z_sched_start+0x54>
   19cce:	490e      	ldr	r1, [pc, #56]	; (19d08 <z_sched_start+0x7c>)
   19cd0:	480e      	ldr	r0, [pc, #56]	; (19d0c <z_sched_start+0x80>)
   19cd2:	22ac      	movs	r2, #172	; 0xac
   19cd4:	f001 f93e 	bl	1af54 <printk>
   19cd8:	21ac      	movs	r1, #172	; 0xac
   19cda:	480b      	ldr	r0, [pc, #44]	; (19d08 <z_sched_start+0x7c>)
   19cdc:	f001 fb1e 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   19ce0:	f385 8811 	msr	BASEPRI, r5
   19ce4:	f3bf 8f6f 	isb	sy
}
   19ce8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19cea:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   19cee:	4620      	mov	r0, r4
   19cf0:	7363      	strb	r3, [r4, #13]
   19cf2:	f7ff ff47 	bl	19b84 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   19cf6:	4629      	mov	r1, r5
}
   19cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   19cfc:	4801      	ldr	r0, [pc, #4]	; (19d04 <z_sched_start+0x78>)
   19cfe:	f7ff bd57 	b.w	197b0 <z_reschedule>
   19d02:	bf00      	nop
   19d04:	2000d5ac 	.word	0x2000d5ac
   19d08:	0001cad3 	.word	0x0001cad3
   19d0c:	0001c625 	.word	0x0001c625

00019d10 <z_thread_timeout>:
{
   19d10:	b570      	push	{r4, r5, r6, lr}
   19d12:	4604      	mov	r4, r0
	__asm__ volatile(
   19d14:	f04f 0320 	mov.w	r3, #32
   19d18:	f3ef 8611 	mrs	r6, BASEPRI
   19d1c:	f383 8812 	msr	BASEPRI_MAX, r3
   19d20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19d24:	481b      	ldr	r0, [pc, #108]	; (19d94 <z_thread_timeout+0x84>)
   19d26:	f7fe fecd 	bl	18ac4 <z_spin_lock_valid>
   19d2a:	b940      	cbnz	r0, 19d3e <z_thread_timeout+0x2e>
   19d2c:	491a      	ldr	r1, [pc, #104]	; (19d98 <z_thread_timeout+0x88>)
   19d2e:	481b      	ldr	r0, [pc, #108]	; (19d9c <z_thread_timeout+0x8c>)
   19d30:	2281      	movs	r2, #129	; 0x81
   19d32:	f001 f90f 	bl	1af54 <printk>
   19d36:	2181      	movs	r1, #129	; 0x81
   19d38:	4817      	ldr	r0, [pc, #92]	; (19d98 <z_thread_timeout+0x88>)
   19d3a:	f001 faef 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   19d3e:	4815      	ldr	r0, [pc, #84]	; (19d94 <z_thread_timeout+0x84>)
   19d40:	f7fe fedc 	bl	18afc <z_spin_lock_set_owner>
		if (!killed) {
   19d44:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   19d48:	f013 0f28 	tst.w	r3, #40	; 0x28
   19d4c:	d110      	bne.n	19d70 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   19d4e:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   19d52:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   19d56:	b113      	cbz	r3, 19d5e <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   19d58:	4628      	mov	r0, r5
   19d5a:	f7ff fdd1 	bl	19900 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   19d5e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   19d62:	4628      	mov	r0, r5
   19d64:	f023 0314 	bic.w	r3, r3, #20
   19d68:	f804 3c0b 	strb.w	r3, [r4, #-11]
   19d6c:	f7ff ff0a 	bl	19b84 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19d70:	4808      	ldr	r0, [pc, #32]	; (19d94 <z_thread_timeout+0x84>)
   19d72:	f7fe feb5 	bl	18ae0 <z_spin_unlock_valid>
   19d76:	b940      	cbnz	r0, 19d8a <z_thread_timeout+0x7a>
   19d78:	4907      	ldr	r1, [pc, #28]	; (19d98 <z_thread_timeout+0x88>)
   19d7a:	4808      	ldr	r0, [pc, #32]	; (19d9c <z_thread_timeout+0x8c>)
   19d7c:	22ac      	movs	r2, #172	; 0xac
   19d7e:	f001 f8e9 	bl	1af54 <printk>
   19d82:	21ac      	movs	r1, #172	; 0xac
   19d84:	4804      	ldr	r0, [pc, #16]	; (19d98 <z_thread_timeout+0x88>)
   19d86:	f001 fac9 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   19d8a:	f386 8811 	msr	BASEPRI, r6
   19d8e:	f3bf 8f6f 	isb	sy
}
   19d92:	bd70      	pop	{r4, r5, r6, pc}
   19d94:	2000d5ac 	.word	0x2000d5ac
   19d98:	0001cad3 	.word	0x0001cad3
   19d9c:	0001c625 	.word	0x0001c625

00019da0 <unready_thread>:
{
   19da0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   19da2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   19da6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   19da8:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   19daa:	7b43      	ldrb	r3, [r0, #13]
   19dac:	da06      	bge.n	19dbc <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   19db2:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19db4:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19db6:	4806      	ldr	r0, [pc, #24]	; (19dd0 <unready_thread+0x30>)
   19db8:	f7ff fd84 	bl	198c4 <z_priq_dumb_remove>
	update_cache(thread == _current);
   19dbc:	4b05      	ldr	r3, [pc, #20]	; (19dd4 <unready_thread+0x34>)
   19dbe:	6898      	ldr	r0, [r3, #8]
   19dc0:	1b03      	subs	r3, r0, r4
   19dc2:	4258      	negs	r0, r3
   19dc4:	4158      	adcs	r0, r3
}
   19dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   19dca:	f7ff bdf1 	b.w	199b0 <update_cache>
   19dce:	bf00      	nop
   19dd0:	2000d58c 	.word	0x2000d58c
   19dd4:	2000d56c 	.word	0x2000d56c

00019dd8 <add_to_waitq_locked>:
{
   19dd8:	b538      	push	{r3, r4, r5, lr}
   19dda:	4604      	mov	r4, r0
   19ddc:	460d      	mov	r5, r1
	unready_thread(thread);
   19dde:	f7ff ffdf 	bl	19da0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   19de2:	7b63      	ldrb	r3, [r4, #13]
   19de4:	f043 0302 	orr.w	r3, r3, #2
   19de8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   19dea:	b315      	cbz	r5, 19e32 <add_to_waitq_locked+0x5a>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19dec:	4b17      	ldr	r3, [pc, #92]	; (19e4c <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   19dee:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19df0:	429c      	cmp	r4, r3
   19df2:	d108      	bne.n	19e06 <add_to_waitq_locked+0x2e>
   19df4:	4916      	ldr	r1, [pc, #88]	; (19e50 <add_to_waitq_locked+0x78>)
   19df6:	4817      	ldr	r0, [pc, #92]	; (19e54 <add_to_waitq_locked+0x7c>)
   19df8:	22ba      	movs	r2, #186	; 0xba
   19dfa:	f001 f8ab 	bl	1af54 <printk>
   19dfe:	21ba      	movs	r1, #186	; 0xba
   19e00:	4813      	ldr	r0, [pc, #76]	; (19e50 <add_to_waitq_locked+0x78>)
   19e02:	f001 fa8b 	bl	1b31c <assert_post_action>
	return list->head == list;
   19e06:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19e08:	429d      	cmp	r5, r3
   19e0a:	bf08      	it	eq
   19e0c:	2300      	moveq	r3, #0
   19e0e:	2b00      	cmp	r3, #0
   19e10:	bf38      	it	cc
   19e12:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19e14:	b19b      	cbz	r3, 19e3e <add_to_waitq_locked+0x66>
	int32_t b1 = thread_1->base.prio;
   19e16:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   19e1a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   19e1e:	4291      	cmp	r1, r2
   19e20:	d008      	beq.n	19e34 <add_to_waitq_locked+0x5c>
		return b2 - b1;
   19e22:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   19e24:	2a00      	cmp	r2, #0
   19e26:	dd05      	ble.n	19e34 <add_to_waitq_locked+0x5c>
	sys_dnode_t *const prev = successor->prev;
   19e28:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19e2a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   19e2e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19e30:	605c      	str	r4, [r3, #4]
}
   19e32:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   19e34:	686a      	ldr	r2, [r5, #4]
   19e36:	4293      	cmp	r3, r2
   19e38:	d001      	beq.n	19e3e <add_to_waitq_locked+0x66>
   19e3a:	681b      	ldr	r3, [r3, #0]
   19e3c:	e7ea      	b.n	19e14 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
   19e3e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   19e40:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   19e44:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19e46:	606c      	str	r4, [r5, #4]
   19e48:	e7f3      	b.n	19e32 <add_to_waitq_locked+0x5a>
   19e4a:	bf00      	nop
   19e4c:	2000ccb8 	.word	0x2000ccb8
   19e50:	0001d981 	.word	0x0001d981
   19e54:	0001c625 	.word	0x0001c625

00019e58 <pend>:
{
   19e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e5c:	4604      	mov	r4, r0
   19e5e:	460d      	mov	r5, r1
   19e60:	4616      	mov	r6, r2
   19e62:	461f      	mov	r7, r3
	__asm__ volatile(
   19e64:	f04f 0320 	mov.w	r3, #32
   19e68:	f3ef 8811 	mrs	r8, BASEPRI
   19e6c:	f383 8812 	msr	BASEPRI_MAX, r3
   19e70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e74:	481a      	ldr	r0, [pc, #104]	; (19ee0 <pend+0x88>)
   19e76:	f7fe fe25 	bl	18ac4 <z_spin_lock_valid>
   19e7a:	b940      	cbnz	r0, 19e8e <pend+0x36>
   19e7c:	4919      	ldr	r1, [pc, #100]	; (19ee4 <pend+0x8c>)
   19e7e:	481a      	ldr	r0, [pc, #104]	; (19ee8 <pend+0x90>)
   19e80:	2281      	movs	r2, #129	; 0x81
   19e82:	f001 f867 	bl	1af54 <printk>
   19e86:	2181      	movs	r1, #129	; 0x81
   19e88:	4816      	ldr	r0, [pc, #88]	; (19ee4 <pend+0x8c>)
   19e8a:	f001 fa47 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   19e8e:	4814      	ldr	r0, [pc, #80]	; (19ee0 <pend+0x88>)
   19e90:	f7fe fe34 	bl	18afc <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   19e94:	4620      	mov	r0, r4
   19e96:	4629      	mov	r1, r5
   19e98:	f7ff ff9e 	bl	19dd8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19e9c:	4810      	ldr	r0, [pc, #64]	; (19ee0 <pend+0x88>)
   19e9e:	f7fe fe1f 	bl	18ae0 <z_spin_unlock_valid>
   19ea2:	b940      	cbnz	r0, 19eb6 <pend+0x5e>
   19ea4:	490f      	ldr	r1, [pc, #60]	; (19ee4 <pend+0x8c>)
   19ea6:	4810      	ldr	r0, [pc, #64]	; (19ee8 <pend+0x90>)
   19ea8:	22ac      	movs	r2, #172	; 0xac
   19eaa:	f001 f853 	bl	1af54 <printk>
   19eae:	21ac      	movs	r1, #172	; 0xac
   19eb0:	480c      	ldr	r0, [pc, #48]	; (19ee4 <pend+0x8c>)
   19eb2:	f001 fa33 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   19eb6:	f388 8811 	msr	BASEPRI, r8
   19eba:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19ebe:	1c7b      	adds	r3, r7, #1
   19ec0:	bf08      	it	eq
   19ec2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19ec6:	d008      	beq.n	19eda <pend+0x82>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   19ec8:	4632      	mov	r2, r6
   19eca:	463b      	mov	r3, r7
   19ecc:	f104 0018 	add.w	r0, r4, #24
   19ed0:	4906      	ldr	r1, [pc, #24]	; (19eec <pend+0x94>)
}
   19ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19ed6:	f000 bca1 	b.w	1a81c <z_add_timeout>
   19eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ede:	bf00      	nop
   19ee0:	2000d5ac 	.word	0x2000d5ac
   19ee4:	0001cad3 	.word	0x0001cad3
   19ee8:	0001c625 	.word	0x0001c625
   19eec:	00019d11 	.word	0x00019d11

00019ef0 <z_pend_curr>:
{
   19ef0:	b538      	push	{r3, r4, r5, lr}
   19ef2:	4605      	mov	r5, r0
	pending_current = _current;
   19ef4:	4b0d      	ldr	r3, [pc, #52]	; (19f2c <z_pend_curr+0x3c>)
{
   19ef6:	460c      	mov	r4, r1
	pending_current = _current;
   19ef8:	6898      	ldr	r0, [r3, #8]
   19efa:	4b0d      	ldr	r3, [pc, #52]	; (19f30 <z_pend_curr+0x40>)
{
   19efc:	4611      	mov	r1, r2
	pending_current = _current;
   19efe:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   19f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19f04:	f7ff ffa8 	bl	19e58 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f08:	4628      	mov	r0, r5
   19f0a:	f7fe fde9 	bl	18ae0 <z_spin_unlock_valid>
   19f0e:	b940      	cbnz	r0, 19f22 <z_pend_curr+0x32>
   19f10:	4908      	ldr	r1, [pc, #32]	; (19f34 <z_pend_curr+0x44>)
   19f12:	4809      	ldr	r0, [pc, #36]	; (19f38 <z_pend_curr+0x48>)
   19f14:	22c3      	movs	r2, #195	; 0xc3
   19f16:	f001 f81d 	bl	1af54 <printk>
   19f1a:	21c3      	movs	r1, #195	; 0xc3
   19f1c:	4805      	ldr	r0, [pc, #20]	; (19f34 <z_pend_curr+0x44>)
   19f1e:	f001 f9fd 	bl	1b31c <assert_post_action>
   19f22:	4620      	mov	r0, r4
}
   19f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19f28:	f7f8 bfdc 	b.w	12ee4 <arch_swap>
   19f2c:	2000d56c 	.word	0x2000d56c
   19f30:	2000d5a8 	.word	0x2000d5a8
   19f34:	0001cad3 	.word	0x0001cad3
   19f38:	0001c625 	.word	0x0001c625

00019f3c <z_set_prio>:
{
   19f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19f3e:	4604      	mov	r4, r0
   19f40:	460e      	mov	r6, r1
	__asm__ volatile(
   19f42:	f04f 0320 	mov.w	r3, #32
   19f46:	f3ef 8711 	mrs	r7, BASEPRI
   19f4a:	f383 8812 	msr	BASEPRI_MAX, r3
   19f4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f52:	4837      	ldr	r0, [pc, #220]	; (1a030 <z_set_prio+0xf4>)
   19f54:	f7fe fdb6 	bl	18ac4 <z_spin_lock_valid>
   19f58:	b940      	cbnz	r0, 19f6c <z_set_prio+0x30>
   19f5a:	4936      	ldr	r1, [pc, #216]	; (1a034 <z_set_prio+0xf8>)
   19f5c:	4836      	ldr	r0, [pc, #216]	; (1a038 <z_set_prio+0xfc>)
   19f5e:	2281      	movs	r2, #129	; 0x81
   19f60:	f000 fff8 	bl	1af54 <printk>
   19f64:	2181      	movs	r1, #129	; 0x81
   19f66:	4833      	ldr	r0, [pc, #204]	; (1a034 <z_set_prio+0xf8>)
   19f68:	f001 f9d8 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   19f6c:	4830      	ldr	r0, [pc, #192]	; (1a030 <z_set_prio+0xf4>)
   19f6e:	f7fe fdc5 	bl	18afc <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19f72:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   19f74:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19f76:	06da      	lsls	r2, r3, #27
   19f78:	d156      	bne.n	1a028 <z_set_prio+0xec>
	return !sys_dnode_is_linked(&to->node);
   19f7a:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   19f7c:	2d00      	cmp	r5, #0
   19f7e:	d153      	bne.n	1a028 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19f84:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19f86:	4621      	mov	r1, r4
   19f88:	482c      	ldr	r0, [pc, #176]	; (1a03c <z_set_prio+0x100>)
   19f8a:	f7ff fc9b 	bl	198c4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   19f8e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   19f90:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   19f92:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19f96:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19f98:	4b29      	ldr	r3, [pc, #164]	; (1a040 <z_set_prio+0x104>)
   19f9a:	429c      	cmp	r4, r3
   19f9c:	d108      	bne.n	19fb0 <z_set_prio+0x74>
   19f9e:	4929      	ldr	r1, [pc, #164]	; (1a044 <z_set_prio+0x108>)
   19fa0:	4825      	ldr	r0, [pc, #148]	; (1a038 <z_set_prio+0xfc>)
   19fa2:	22ba      	movs	r2, #186	; 0xba
   19fa4:	f000 ffd6 	bl	1af54 <printk>
   19fa8:	21ba      	movs	r1, #186	; 0xba
   19faa:	4826      	ldr	r0, [pc, #152]	; (1a044 <z_set_prio+0x108>)
   19fac:	f001 f9b6 	bl	1b31c <assert_post_action>
	return list->head == list;
   19fb0:	4925      	ldr	r1, [pc, #148]	; (1a048 <z_set_prio+0x10c>)
   19fb2:	460b      	mov	r3, r1
   19fb4:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19fb8:	4298      	cmp	r0, r3
   19fba:	bf18      	it	ne
   19fbc:	4605      	movne	r5, r0
   19fbe:	2d00      	cmp	r5, #0
   19fc0:	461a      	mov	r2, r3
   19fc2:	462b      	mov	r3, r5
   19fc4:	bf38      	it	cc
   19fc6:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19fc8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19fca:	b343      	cbz	r3, 1a01e <z_set_prio+0xe2>
	int32_t b1 = thread_1->base.prio;
   19fcc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   19fd0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   19fd4:	4286      	cmp	r6, r0
   19fd6:	d01e      	beq.n	1a016 <z_set_prio+0xda>
		return b2 - b1;
   19fd8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   19fda:	2800      	cmp	r0, #0
   19fdc:	dd1b      	ble.n	1a016 <z_set_prio+0xda>
	sys_dnode_t *const prev = successor->prev;
   19fde:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19fe0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   19fe4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19fe6:	605c      	str	r4, [r3, #4]
			update_cache(1);
   19fe8:	2001      	movs	r0, #1
   19fea:	f7ff fce1 	bl	199b0 <update_cache>
   19fee:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ff0:	480f      	ldr	r0, [pc, #60]	; (1a030 <z_set_prio+0xf4>)
   19ff2:	f7fe fd75 	bl	18ae0 <z_spin_unlock_valid>
   19ff6:	b940      	cbnz	r0, 1a00a <z_set_prio+0xce>
   19ff8:	490e      	ldr	r1, [pc, #56]	; (1a034 <z_set_prio+0xf8>)
   19ffa:	480f      	ldr	r0, [pc, #60]	; (1a038 <z_set_prio+0xfc>)
   19ffc:	22ac      	movs	r2, #172	; 0xac
   19ffe:	f000 ffa9 	bl	1af54 <printk>
   1a002:	21ac      	movs	r1, #172	; 0xac
   1a004:	480b      	ldr	r0, [pc, #44]	; (1a034 <z_set_prio+0xf8>)
   1a006:	f001 f989 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1a00a:	f387 8811 	msr	BASEPRI, r7
   1a00e:	f3bf 8f6f 	isb	sy
}
   1a012:	4620      	mov	r0, r4
   1a014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1a016:	42ab      	cmp	r3, r5
   1a018:	d001      	beq.n	1a01e <z_set_prio+0xe2>
   1a01a:	681b      	ldr	r3, [r3, #0]
   1a01c:	e7d5      	b.n	19fca <z_set_prio+0x8e>
	node->prev = tail;
   1a01e:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   1a022:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1a024:	624c      	str	r4, [r1, #36]	; 0x24
}
   1a026:	e7df      	b.n	19fe8 <z_set_prio+0xac>
			thread->base.prio = prio;
   1a028:	73a6      	strb	r6, [r4, #14]
   1a02a:	2400      	movs	r4, #0
   1a02c:	e7e0      	b.n	19ff0 <z_set_prio+0xb4>
   1a02e:	bf00      	nop
   1a030:	2000d5ac 	.word	0x2000d5ac
   1a034:	0001cad3 	.word	0x0001cad3
   1a038:	0001c625 	.word	0x0001c625
   1a03c:	2000d58c 	.word	0x2000d58c
   1a040:	2000ccb8 	.word	0x2000ccb8
   1a044:	0001d981 	.word	0x0001d981
   1a048:	2000d56c 	.word	0x2000d56c

0001a04c <z_impl_k_thread_suspend>:
{
   1a04c:	b570      	push	{r4, r5, r6, lr}
   1a04e:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   1a050:	3018      	adds	r0, #24
   1a052:	f000 fc9d 	bl	1a990 <z_abort_timeout>
	__asm__ volatile(
   1a056:	f04f 0320 	mov.w	r3, #32
   1a05a:	f3ef 8611 	mrs	r6, BASEPRI
   1a05e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a062:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a066:	4820      	ldr	r0, [pc, #128]	; (1a0e8 <z_impl_k_thread_suspend+0x9c>)
   1a068:	f7fe fd2c 	bl	18ac4 <z_spin_lock_valid>
   1a06c:	b940      	cbnz	r0, 1a080 <z_impl_k_thread_suspend+0x34>
   1a06e:	491f      	ldr	r1, [pc, #124]	; (1a0ec <z_impl_k_thread_suspend+0xa0>)
   1a070:	481f      	ldr	r0, [pc, #124]	; (1a0f0 <z_impl_k_thread_suspend+0xa4>)
   1a072:	2281      	movs	r2, #129	; 0x81
   1a074:	f000 ff6e 	bl	1af54 <printk>
   1a078:	2181      	movs	r1, #129	; 0x81
   1a07a:	481c      	ldr	r0, [pc, #112]	; (1a0ec <z_impl_k_thread_suspend+0xa0>)
   1a07c:	f001 f94e 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a080:	4819      	ldr	r0, [pc, #100]	; (1a0e8 <z_impl_k_thread_suspend+0x9c>)
   1a082:	f7fe fd3b 	bl	18afc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1a086:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1a08a:	7b63      	ldrb	r3, [r4, #13]
   1a08c:	2a00      	cmp	r2, #0
   1a08e:	da06      	bge.n	1a09e <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   1a094:	4621      	mov	r1, r4
   1a096:	4817      	ldr	r0, [pc, #92]	; (1a0f4 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a098:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1a09a:	f7ff fc13 	bl	198c4 <z_priq_dumb_remove>
		update_cache(thread == _current);
   1a09e:	4d16      	ldr	r5, [pc, #88]	; (1a0f8 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a0a0:	7b63      	ldrb	r3, [r4, #13]
   1a0a2:	68a8      	ldr	r0, [r5, #8]
   1a0a4:	f043 0310 	orr.w	r3, r3, #16
   1a0a8:	7363      	strb	r3, [r4, #13]
   1a0aa:	1b03      	subs	r3, r0, r4
   1a0ac:	4258      	negs	r0, r3
   1a0ae:	4158      	adcs	r0, r3
   1a0b0:	f7ff fc7e 	bl	199b0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a0b4:	480c      	ldr	r0, [pc, #48]	; (1a0e8 <z_impl_k_thread_suspend+0x9c>)
   1a0b6:	f7fe fd13 	bl	18ae0 <z_spin_unlock_valid>
   1a0ba:	b940      	cbnz	r0, 1a0ce <z_impl_k_thread_suspend+0x82>
   1a0bc:	490b      	ldr	r1, [pc, #44]	; (1a0ec <z_impl_k_thread_suspend+0xa0>)
   1a0be:	480c      	ldr	r0, [pc, #48]	; (1a0f0 <z_impl_k_thread_suspend+0xa4>)
   1a0c0:	22ac      	movs	r2, #172	; 0xac
   1a0c2:	f000 ff47 	bl	1af54 <printk>
   1a0c6:	21ac      	movs	r1, #172	; 0xac
   1a0c8:	4808      	ldr	r0, [pc, #32]	; (1a0ec <z_impl_k_thread_suspend+0xa0>)
   1a0ca:	f001 f927 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1a0ce:	f386 8811 	msr	BASEPRI, r6
   1a0d2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1a0d6:	68ab      	ldr	r3, [r5, #8]
   1a0d8:	42a3      	cmp	r3, r4
   1a0da:	d103      	bne.n	1a0e4 <z_impl_k_thread_suspend+0x98>
}
   1a0dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1a0e0:	f001 bf0e 	b.w	1bf00 <z_reschedule_unlocked>
}
   1a0e4:	bd70      	pop	{r4, r5, r6, pc}
   1a0e6:	bf00      	nop
   1a0e8:	2000d5ac 	.word	0x2000d5ac
   1a0ec:	0001cad3 	.word	0x0001cad3
   1a0f0:	0001c625 	.word	0x0001c625
   1a0f4:	2000d58c 	.word	0x2000d58c
   1a0f8:	2000d56c 	.word	0x2000d56c

0001a0fc <k_sched_unlock>:
{
   1a0fc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a0fe:	f04f 0320 	mov.w	r3, #32
   1a102:	f3ef 8511 	mrs	r5, BASEPRI
   1a106:	f383 8812 	msr	BASEPRI_MAX, r3
   1a10a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a10e:	4824      	ldr	r0, [pc, #144]	; (1a1a0 <k_sched_unlock+0xa4>)
   1a110:	f7fe fcd8 	bl	18ac4 <z_spin_lock_valid>
   1a114:	b940      	cbnz	r0, 1a128 <k_sched_unlock+0x2c>
   1a116:	4923      	ldr	r1, [pc, #140]	; (1a1a4 <k_sched_unlock+0xa8>)
   1a118:	4823      	ldr	r0, [pc, #140]	; (1a1a8 <k_sched_unlock+0xac>)
   1a11a:	2281      	movs	r2, #129	; 0x81
   1a11c:	f000 ff1a 	bl	1af54 <printk>
   1a120:	2181      	movs	r1, #129	; 0x81
   1a122:	4820      	ldr	r0, [pc, #128]	; (1a1a4 <k_sched_unlock+0xa8>)
   1a124:	f001 f8fa 	bl	1b31c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   1a128:	4c20      	ldr	r4, [pc, #128]	; (1a1ac <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   1a12a:	481d      	ldr	r0, [pc, #116]	; (1a1a0 <k_sched_unlock+0xa4>)
   1a12c:	f7fe fce6 	bl	18afc <z_spin_lock_set_owner>
   1a130:	68a2      	ldr	r2, [r4, #8]
   1a132:	7bd2      	ldrb	r2, [r2, #15]
   1a134:	b952      	cbnz	r2, 1a14c <k_sched_unlock+0x50>
   1a136:	491e      	ldr	r1, [pc, #120]	; (1a1b0 <k_sched_unlock+0xb4>)
   1a138:	481b      	ldr	r0, [pc, #108]	; (1a1a8 <k_sched_unlock+0xac>)
   1a13a:	f240 3285 	movw	r2, #901	; 0x385
   1a13e:	f000 ff09 	bl	1af54 <printk>
   1a142:	f240 3185 	movw	r1, #901	; 0x385
   1a146:	481a      	ldr	r0, [pc, #104]	; (1a1b0 <k_sched_unlock+0xb4>)
   1a148:	f001 f8e8 	bl	1b31c <assert_post_action>
   1a14c:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1a150:	b153      	cbz	r3, 1a168 <k_sched_unlock+0x6c>
   1a152:	4917      	ldr	r1, [pc, #92]	; (1a1b0 <k_sched_unlock+0xb4>)
   1a154:	4814      	ldr	r0, [pc, #80]	; (1a1a8 <k_sched_unlock+0xac>)
   1a156:	f240 3286 	movw	r2, #902	; 0x386
   1a15a:	f000 fefb 	bl	1af54 <printk>
   1a15e:	f240 3186 	movw	r1, #902	; 0x386
   1a162:	4813      	ldr	r0, [pc, #76]	; (1a1b0 <k_sched_unlock+0xb4>)
   1a164:	f001 f8da 	bl	1b31c <assert_post_action>
		++_current->base.sched_locked;
   1a168:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   1a16a:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1a16c:	7bd3      	ldrb	r3, [r2, #15]
   1a16e:	3301      	adds	r3, #1
   1a170:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1a172:	f7ff fc1d 	bl	199b0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a176:	480a      	ldr	r0, [pc, #40]	; (1a1a0 <k_sched_unlock+0xa4>)
   1a178:	f7fe fcb2 	bl	18ae0 <z_spin_unlock_valid>
   1a17c:	b940      	cbnz	r0, 1a190 <k_sched_unlock+0x94>
   1a17e:	4909      	ldr	r1, [pc, #36]	; (1a1a4 <k_sched_unlock+0xa8>)
   1a180:	4809      	ldr	r0, [pc, #36]	; (1a1a8 <k_sched_unlock+0xac>)
   1a182:	22ac      	movs	r2, #172	; 0xac
   1a184:	f000 fee6 	bl	1af54 <printk>
   1a188:	21ac      	movs	r1, #172	; 0xac
   1a18a:	4806      	ldr	r0, [pc, #24]	; (1a1a4 <k_sched_unlock+0xa8>)
   1a18c:	f001 f8c6 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1a190:	f385 8811 	msr	BASEPRI, r5
   1a194:	f3bf 8f6f 	isb	sy
}
   1a198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1a19c:	f001 beb0 	b.w	1bf00 <z_reschedule_unlocked>
   1a1a0:	2000d5ac 	.word	0x2000d5ac
   1a1a4:	0001cad3 	.word	0x0001cad3
   1a1a8:	0001c625 	.word	0x0001c625
   1a1ac:	2000d56c 	.word	0x2000d56c
   1a1b0:	0001d981 	.word	0x0001d981

0001a1b4 <z_unpend1_no_timeout>:
{
   1a1b4:	b538      	push	{r3, r4, r5, lr}
   1a1b6:	4604      	mov	r4, r0
	__asm__ volatile(
   1a1b8:	f04f 0320 	mov.w	r3, #32
   1a1bc:	f3ef 8511 	mrs	r5, BASEPRI
   1a1c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1a1c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a1c8:	4814      	ldr	r0, [pc, #80]	; (1a21c <z_unpend1_no_timeout+0x68>)
   1a1ca:	f7fe fc7b 	bl	18ac4 <z_spin_lock_valid>
   1a1ce:	b940      	cbnz	r0, 1a1e2 <z_unpend1_no_timeout+0x2e>
   1a1d0:	4913      	ldr	r1, [pc, #76]	; (1a220 <z_unpend1_no_timeout+0x6c>)
   1a1d2:	4814      	ldr	r0, [pc, #80]	; (1a224 <z_unpend1_no_timeout+0x70>)
   1a1d4:	2281      	movs	r2, #129	; 0x81
   1a1d6:	f000 febd 	bl	1af54 <printk>
   1a1da:	2181      	movs	r1, #129	; 0x81
   1a1dc:	4810      	ldr	r0, [pc, #64]	; (1a220 <z_unpend1_no_timeout+0x6c>)
   1a1de:	f001 f89d 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a1e2:	480e      	ldr	r0, [pc, #56]	; (1a21c <z_unpend1_no_timeout+0x68>)
   1a1e4:	f7fe fc8a 	bl	18afc <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   1a1e8:	4620      	mov	r0, r4
   1a1ea:	f001 fe93 	bl	1bf14 <z_priq_dumb_best>
		if (thread != NULL) {
   1a1ee:	4604      	mov	r4, r0
   1a1f0:	b108      	cbz	r0, 1a1f6 <z_unpend1_no_timeout+0x42>
			unpend_thread_no_timeout(thread);
   1a1f2:	f7ff fb85 	bl	19900 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a1f6:	4809      	ldr	r0, [pc, #36]	; (1a21c <z_unpend1_no_timeout+0x68>)
   1a1f8:	f7fe fc72 	bl	18ae0 <z_spin_unlock_valid>
   1a1fc:	b940      	cbnz	r0, 1a210 <z_unpend1_no_timeout+0x5c>
   1a1fe:	4908      	ldr	r1, [pc, #32]	; (1a220 <z_unpend1_no_timeout+0x6c>)
   1a200:	4808      	ldr	r0, [pc, #32]	; (1a224 <z_unpend1_no_timeout+0x70>)
   1a202:	22ac      	movs	r2, #172	; 0xac
   1a204:	f000 fea6 	bl	1af54 <printk>
   1a208:	21ac      	movs	r1, #172	; 0xac
   1a20a:	4805      	ldr	r0, [pc, #20]	; (1a220 <z_unpend1_no_timeout+0x6c>)
   1a20c:	f001 f886 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1a210:	f385 8811 	msr	BASEPRI, r5
   1a214:	f3bf 8f6f 	isb	sy
}
   1a218:	4620      	mov	r0, r4
   1a21a:	bd38      	pop	{r3, r4, r5, pc}
   1a21c:	2000d5ac 	.word	0x2000d5ac
   1a220:	0001cad3 	.word	0x0001cad3
   1a224:	0001c625 	.word	0x0001c625

0001a228 <z_unpend_first_thread>:
{
   1a228:	b538      	push	{r3, r4, r5, lr}
   1a22a:	4604      	mov	r4, r0
	__asm__ volatile(
   1a22c:	f04f 0320 	mov.w	r3, #32
   1a230:	f3ef 8511 	mrs	r5, BASEPRI
   1a234:	f383 8812 	msr	BASEPRI_MAX, r3
   1a238:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a23c:	4816      	ldr	r0, [pc, #88]	; (1a298 <z_unpend_first_thread+0x70>)
   1a23e:	f7fe fc41 	bl	18ac4 <z_spin_lock_valid>
   1a242:	b940      	cbnz	r0, 1a256 <z_unpend_first_thread+0x2e>
   1a244:	4915      	ldr	r1, [pc, #84]	; (1a29c <z_unpend_first_thread+0x74>)
   1a246:	4816      	ldr	r0, [pc, #88]	; (1a2a0 <z_unpend_first_thread+0x78>)
   1a248:	2281      	movs	r2, #129	; 0x81
   1a24a:	f000 fe83 	bl	1af54 <printk>
   1a24e:	2181      	movs	r1, #129	; 0x81
   1a250:	4812      	ldr	r0, [pc, #72]	; (1a29c <z_unpend_first_thread+0x74>)
   1a252:	f001 f863 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a256:	4810      	ldr	r0, [pc, #64]	; (1a298 <z_unpend_first_thread+0x70>)
   1a258:	f7fe fc50 	bl	18afc <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   1a25c:	4620      	mov	r0, r4
   1a25e:	f001 fe59 	bl	1bf14 <z_priq_dumb_best>
		if (thread != NULL) {
   1a262:	4604      	mov	r4, r0
   1a264:	b128      	cbz	r0, 1a272 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   1a266:	f7ff fb4b 	bl	19900 <unpend_thread_no_timeout>
   1a26a:	f104 0018 	add.w	r0, r4, #24
   1a26e:	f000 fb8f 	bl	1a990 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a272:	4809      	ldr	r0, [pc, #36]	; (1a298 <z_unpend_first_thread+0x70>)
   1a274:	f7fe fc34 	bl	18ae0 <z_spin_unlock_valid>
   1a278:	b940      	cbnz	r0, 1a28c <z_unpend_first_thread+0x64>
   1a27a:	4908      	ldr	r1, [pc, #32]	; (1a29c <z_unpend_first_thread+0x74>)
   1a27c:	4808      	ldr	r0, [pc, #32]	; (1a2a0 <z_unpend_first_thread+0x78>)
   1a27e:	22ac      	movs	r2, #172	; 0xac
   1a280:	f000 fe68 	bl	1af54 <printk>
   1a284:	21ac      	movs	r1, #172	; 0xac
   1a286:	4805      	ldr	r0, [pc, #20]	; (1a29c <z_unpend_first_thread+0x74>)
   1a288:	f001 f848 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1a28c:	f385 8811 	msr	BASEPRI, r5
   1a290:	f3bf 8f6f 	isb	sy
}
   1a294:	4620      	mov	r0, r4
   1a296:	bd38      	pop	{r3, r4, r5, pc}
   1a298:	2000d5ac 	.word	0x2000d5ac
   1a29c:	0001cad3 	.word	0x0001cad3
   1a2a0:	0001c625 	.word	0x0001c625

0001a2a4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1a2a4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1a2a6:	4b04      	ldr	r3, [pc, #16]	; (1a2b8 <z_sched_init+0x14>)
   1a2a8:	4608      	mov	r0, r1
   1a2aa:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1a2ae:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1a2b2:	f7ff b9f3 	b.w	1969c <k_sched_time_slice_set>
   1a2b6:	bf00      	nop
   1a2b8:	2000d56c 	.word	0x2000d56c

0001a2bc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a2be:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a2c2:	b153      	cbz	r3, 1a2da <z_impl_k_yield+0x1e>
   1a2c4:	4939      	ldr	r1, [pc, #228]	; (1a3ac <z_impl_k_yield+0xf0>)
   1a2c6:	483a      	ldr	r0, [pc, #232]	; (1a3b0 <z_impl_k_yield+0xf4>)
   1a2c8:	f240 42dc 	movw	r2, #1244	; 0x4dc
   1a2cc:	f000 fe42 	bl	1af54 <printk>
   1a2d0:	f240 41dc 	movw	r1, #1244	; 0x4dc
   1a2d4:	4835      	ldr	r0, [pc, #212]	; (1a3ac <z_impl_k_yield+0xf0>)
   1a2d6:	f001 f821 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1a2da:	f04f 0320 	mov.w	r3, #32
   1a2de:	f3ef 8611 	mrs	r6, BASEPRI
   1a2e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a2ea:	4832      	ldr	r0, [pc, #200]	; (1a3b4 <z_impl_k_yield+0xf8>)
   1a2ec:	f7fe fbea 	bl	18ac4 <z_spin_lock_valid>
   1a2f0:	b940      	cbnz	r0, 1a304 <z_impl_k_yield+0x48>
   1a2f2:	4931      	ldr	r1, [pc, #196]	; (1a3b8 <z_impl_k_yield+0xfc>)
   1a2f4:	482e      	ldr	r0, [pc, #184]	; (1a3b0 <z_impl_k_yield+0xf4>)
   1a2f6:	2281      	movs	r2, #129	; 0x81
   1a2f8:	f000 fe2c 	bl	1af54 <printk>
   1a2fc:	2181      	movs	r1, #129	; 0x81
   1a2fe:	482e      	ldr	r0, [pc, #184]	; (1a3b8 <z_impl_k_yield+0xfc>)
   1a300:	f001 f80c 	bl	1b31c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1a304:	4d2d      	ldr	r5, [pc, #180]	; (1a3bc <z_impl_k_yield+0x100>)
	z_spin_lock_set_owner(l);
   1a306:	482b      	ldr	r0, [pc, #172]	; (1a3b4 <z_impl_k_yield+0xf8>)
   1a308:	f7fe fbf8 	bl	18afc <z_spin_lock_set_owner>
   1a30c:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
   1a30e:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a312:	7b4b      	ldrb	r3, [r1, #13]
   1a314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a318:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1a31a:	f7ff fad3 	bl	198c4 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   1a31e:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1a320:	7b63      	ldrb	r3, [r4, #13]
   1a322:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a326:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a328:	4b25      	ldr	r3, [pc, #148]	; (1a3c0 <z_impl_k_yield+0x104>)
   1a32a:	429c      	cmp	r4, r3
   1a32c:	d108      	bne.n	1a340 <z_impl_k_yield+0x84>
   1a32e:	491f      	ldr	r1, [pc, #124]	; (1a3ac <z_impl_k_yield+0xf0>)
   1a330:	481f      	ldr	r0, [pc, #124]	; (1a3b0 <z_impl_k_yield+0xf4>)
   1a332:	22ba      	movs	r2, #186	; 0xba
   1a334:	f000 fe0e 	bl	1af54 <printk>
   1a338:	21ba      	movs	r1, #186	; 0xba
   1a33a:	481c      	ldr	r0, [pc, #112]	; (1a3ac <z_impl_k_yield+0xf0>)
   1a33c:	f000 ffee 	bl	1b31c <assert_post_action>
	return list->head == list;
   1a340:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a342:	4820      	ldr	r0, [pc, #128]	; (1a3c4 <z_impl_k_yield+0x108>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a344:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a346:	4283      	cmp	r3, r0
   1a348:	bf08      	it	eq
   1a34a:	2300      	moveq	r3, #0
   1a34c:	2b00      	cmp	r3, #0
   1a34e:	bf38      	it	cc
   1a350:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a352:	b333      	cbz	r3, 1a3a2 <z_impl_k_yield+0xe6>
	int32_t b1 = thread_1->base.prio;
   1a354:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1a358:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1a35c:	4297      	cmp	r7, r2
   1a35e:	d01c      	beq.n	1a39a <z_impl_k_yield+0xde>
		return b2 - b1;
   1a360:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a362:	2a00      	cmp	r2, #0
   1a364:	dd19      	ble.n	1a39a <z_impl_k_yield+0xde>
	sys_dnode_t *const prev = successor->prev;
   1a366:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a368:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1a36c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1a36e:	605c      	str	r4, [r3, #4]
	update_cache(1);
   1a370:	2001      	movs	r0, #1
   1a372:	f7ff fb1d 	bl	199b0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a376:	480f      	ldr	r0, [pc, #60]	; (1a3b4 <z_impl_k_yield+0xf8>)
   1a378:	f7fe fbb2 	bl	18ae0 <z_spin_unlock_valid>
   1a37c:	b940      	cbnz	r0, 1a390 <z_impl_k_yield+0xd4>
   1a37e:	490e      	ldr	r1, [pc, #56]	; (1a3b8 <z_impl_k_yield+0xfc>)
   1a380:	480b      	ldr	r0, [pc, #44]	; (1a3b0 <z_impl_k_yield+0xf4>)
   1a382:	22c3      	movs	r2, #195	; 0xc3
   1a384:	f000 fde6 	bl	1af54 <printk>
   1a388:	21c3      	movs	r1, #195	; 0xc3
   1a38a:	480b      	ldr	r0, [pc, #44]	; (1a3b8 <z_impl_k_yield+0xfc>)
   1a38c:	f000 ffc6 	bl	1b31c <assert_post_action>
   1a390:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   1a392:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a396:	f7f8 bda5 	b.w	12ee4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1a39a:	428b      	cmp	r3, r1
   1a39c:	d001      	beq.n	1a3a2 <z_impl_k_yield+0xe6>
   1a39e:	681b      	ldr	r3, [r3, #0]
   1a3a0:	e7d7      	b.n	1a352 <z_impl_k_yield+0x96>
	node->prev = tail;
   1a3a2:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   1a3a6:	600c      	str	r4, [r1, #0]
	list->tail = node;
   1a3a8:	626c      	str	r4, [r5, #36]	; 0x24
}
   1a3aa:	e7e1      	b.n	1a370 <z_impl_k_yield+0xb4>
   1a3ac:	0001d981 	.word	0x0001d981
   1a3b0:	0001c625 	.word	0x0001c625
   1a3b4:	2000d5ac 	.word	0x2000d5ac
   1a3b8:	0001cad3 	.word	0x0001cad3
   1a3bc:	2000d56c 	.word	0x2000d56c
   1a3c0:	2000ccb8 	.word	0x2000ccb8
   1a3c4:	2000d58c 	.word	0x2000d58c

0001a3c8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1a3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3cc:	4604      	mov	r4, r0
   1a3ce:	460d      	mov	r5, r1
   1a3d0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1a3d4:	b153      	cbz	r3, 1a3ec <z_tick_sleep+0x24>
   1a3d6:	493c      	ldr	r1, [pc, #240]	; (1a4c8 <z_tick_sleep+0x100>)
   1a3d8:	483c      	ldr	r0, [pc, #240]	; (1a4cc <z_tick_sleep+0x104>)
   1a3da:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
   1a3de:	f000 fdb9 	bl	1af54 <printk>
   1a3e2:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   1a3e6:	4838      	ldr	r0, [pc, #224]	; (1a4c8 <z_tick_sleep+0x100>)
   1a3e8:	f000 ff98 	bl	1b31c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1a3ec:	ea54 0305 	orrs.w	r3, r4, r5
   1a3f0:	d104      	bne.n	1a3fc <z_tick_sleep+0x34>
	z_impl_k_yield();
   1a3f2:	f7ff ff63 	bl	1a2bc <z_impl_k_yield>
		k_yield();
		return 0;
   1a3f6:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1a3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   1a3fc:	f06f 0301 	mvn.w	r3, #1
   1a400:	1b1e      	subs	r6, r3, r4
   1a402:	f04f 33ff 	mov.w	r3, #4294967295
   1a406:	eb63 0705 	sbc.w	r7, r3, r5
   1a40a:	2e01      	cmp	r6, #1
   1a40c:	f177 0300 	sbcs.w	r3, r7, #0
   1a410:	da56      	bge.n	1a4c0 <z_tick_sleep+0xf8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1a412:	f001 fd99 	bl	1bf48 <sys_clock_tick_get_32>
   1a416:	1906      	adds	r6, r0, r4
   1a418:	f04f 0320 	mov.w	r3, #32
   1a41c:	f3ef 8811 	mrs	r8, BASEPRI
   1a420:	f383 8812 	msr	BASEPRI_MAX, r3
   1a424:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a428:	4829      	ldr	r0, [pc, #164]	; (1a4d0 <z_tick_sleep+0x108>)
   1a42a:	f7fe fb4b 	bl	18ac4 <z_spin_lock_valid>
   1a42e:	b940      	cbnz	r0, 1a442 <z_tick_sleep+0x7a>
   1a430:	4928      	ldr	r1, [pc, #160]	; (1a4d4 <z_tick_sleep+0x10c>)
   1a432:	4826      	ldr	r0, [pc, #152]	; (1a4cc <z_tick_sleep+0x104>)
   1a434:	2281      	movs	r2, #129	; 0x81
   1a436:	f000 fd8d 	bl	1af54 <printk>
   1a43a:	2181      	movs	r1, #129	; 0x81
   1a43c:	4825      	ldr	r0, [pc, #148]	; (1a4d4 <z_tick_sleep+0x10c>)
   1a43e:	f000 ff6d 	bl	1b31c <assert_post_action>
	pending_current = _current;
   1a442:	4f25      	ldr	r7, [pc, #148]	; (1a4d8 <z_tick_sleep+0x110>)
	z_spin_lock_set_owner(l);
   1a444:	4822      	ldr	r0, [pc, #136]	; (1a4d0 <z_tick_sleep+0x108>)
   1a446:	f7fe fb59 	bl	18afc <z_spin_lock_set_owner>
   1a44a:	68b8      	ldr	r0, [r7, #8]
   1a44c:	4b23      	ldr	r3, [pc, #140]	; (1a4dc <z_tick_sleep+0x114>)
   1a44e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1a450:	f7ff fca6 	bl	19da0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1a454:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1a456:	4622      	mov	r2, r4
   1a458:	462b      	mov	r3, r5
   1a45a:	3018      	adds	r0, #24
   1a45c:	4920      	ldr	r1, [pc, #128]	; (1a4e0 <z_tick_sleep+0x118>)
   1a45e:	f000 f9dd 	bl	1a81c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1a462:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a464:	481a      	ldr	r0, [pc, #104]	; (1a4d0 <z_tick_sleep+0x108>)
   1a466:	7b53      	ldrb	r3, [r2, #13]
   1a468:	f043 0310 	orr.w	r3, r3, #16
   1a46c:	7353      	strb	r3, [r2, #13]
   1a46e:	f7fe fb37 	bl	18ae0 <z_spin_unlock_valid>
   1a472:	b940      	cbnz	r0, 1a486 <z_tick_sleep+0xbe>
   1a474:	4917      	ldr	r1, [pc, #92]	; (1a4d4 <z_tick_sleep+0x10c>)
   1a476:	4815      	ldr	r0, [pc, #84]	; (1a4cc <z_tick_sleep+0x104>)
   1a478:	22c3      	movs	r2, #195	; 0xc3
   1a47a:	f000 fd6b 	bl	1af54 <printk>
   1a47e:	21c3      	movs	r1, #195	; 0xc3
   1a480:	4814      	ldr	r0, [pc, #80]	; (1a4d4 <z_tick_sleep+0x10c>)
   1a482:	f000 ff4b 	bl	1b31c <assert_post_action>
   1a486:	4640      	mov	r0, r8
   1a488:	f7f8 fd2c 	bl	12ee4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1a48c:	68bb      	ldr	r3, [r7, #8]
   1a48e:	7b5b      	ldrb	r3, [r3, #13]
   1a490:	06db      	lsls	r3, r3, #27
   1a492:	d50a      	bpl.n	1a4aa <z_tick_sleep+0xe2>
   1a494:	490c      	ldr	r1, [pc, #48]	; (1a4c8 <z_tick_sleep+0x100>)
   1a496:	480d      	ldr	r0, [pc, #52]	; (1a4cc <z_tick_sleep+0x104>)
   1a498:	f240 5219 	movw	r2, #1305	; 0x519
   1a49c:	f000 fd5a 	bl	1af54 <printk>
   1a4a0:	f240 5119 	movw	r1, #1305	; 0x519
   1a4a4:	4808      	ldr	r0, [pc, #32]	; (1a4c8 <z_tick_sleep+0x100>)
   1a4a6:	f000 ff39 	bl	1b31c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1a4aa:	f001 fd4d 	bl	1bf48 <sys_clock_tick_get_32>
   1a4ae:	1a30      	subs	r0, r6, r0
   1a4b0:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   1a4b4:	2801      	cmp	r0, #1
   1a4b6:	f171 0300 	sbcs.w	r3, r1, #0
   1a4ba:	bfb8      	it	lt
   1a4bc:	2000      	movlt	r0, #0
   1a4be:	e79b      	b.n	1a3f8 <z_tick_sleep+0x30>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1a4c0:	f06f 0601 	mvn.w	r6, #1
   1a4c4:	1b36      	subs	r6, r6, r4
   1a4c6:	e7a7      	b.n	1a418 <z_tick_sleep+0x50>
   1a4c8:	0001d981 	.word	0x0001d981
   1a4cc:	0001c625 	.word	0x0001c625
   1a4d0:	2000d5ac 	.word	0x2000d5ac
   1a4d4:	0001cad3 	.word	0x0001cad3
   1a4d8:	2000d56c 	.word	0x2000d56c
   1a4dc:	2000d5a8 	.word	0x2000d5a8
   1a4e0:	00019d11 	.word	0x00019d11

0001a4e4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1a4e4:	b538      	push	{r3, r4, r5, lr}
   1a4e6:	4604      	mov	r4, r0
   1a4e8:	460d      	mov	r5, r1
   1a4ea:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1a4ee:	b153      	cbz	r3, 1a506 <z_impl_k_sleep+0x22>
   1a4f0:	4911      	ldr	r1, [pc, #68]	; (1a538 <z_impl_k_sleep+0x54>)
   1a4f2:	4812      	ldr	r0, [pc, #72]	; (1a53c <z_impl_k_sleep+0x58>)
   1a4f4:	f44f 62a5 	mov.w	r2, #1320	; 0x528
   1a4f8:	f000 fd2c 	bl	1af54 <printk>
   1a4fc:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   1a500:	480d      	ldr	r0, [pc, #52]	; (1a538 <z_impl_k_sleep+0x54>)
   1a502:	f000 ff0b 	bl	1b31c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a506:	1c6b      	adds	r3, r5, #1
   1a508:	bf08      	it	eq
   1a50a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1a50e:	d106      	bne.n	1a51e <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
   1a510:	4b0b      	ldr	r3, [pc, #44]	; (1a540 <z_impl_k_sleep+0x5c>)
   1a512:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1a514:	f7ff fd9a 	bl	1a04c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1a518:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1a51c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1a51e:	4620      	mov	r0, r4
   1a520:	4629      	mov	r1, r5
   1a522:	f7ff ff51 	bl	1a3c8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1a526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a52a:	fb80 3403 	smull	r3, r4, r0, r3
   1a52e:	0bd8      	lsrs	r0, r3, #15
   1a530:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   1a534:	e7f2      	b.n	1a51c <z_impl_k_sleep+0x38>
   1a536:	bf00      	nop
   1a538:	0001d981 	.word	0x0001d981
   1a53c:	0001c625 	.word	0x0001c625
   1a540:	2000d56c 	.word	0x2000d56c

0001a544 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1a544:	4b01      	ldr	r3, [pc, #4]	; (1a54c <z_impl_z_current_get+0x8>)
   1a546:	6898      	ldr	r0, [r3, #8]
   1a548:	4770      	bx	lr
   1a54a:	bf00      	nop
   1a54c:	2000d56c 	.word	0x2000d56c

0001a550 <z_impl_k_is_preempt_thread>:
   1a550:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1a554:	b93b      	cbnz	r3, 1a566 <z_impl_k_is_preempt_thread+0x16>
   1a556:	4b05      	ldr	r3, [pc, #20]	; (1a56c <z_impl_k_is_preempt_thread+0x1c>)
   1a558:	689b      	ldr	r3, [r3, #8]
   1a55a:	89d8      	ldrh	r0, [r3, #14]
   1a55c:	287f      	cmp	r0, #127	; 0x7f
   1a55e:	bf8c      	ite	hi
   1a560:	2000      	movhi	r0, #0
   1a562:	2001      	movls	r0, #1
   1a564:	4770      	bx	lr
   1a566:	2000      	movs	r0, #0
}
   1a568:	4770      	bx	lr
   1a56a:	bf00      	nop
   1a56c:	2000d56c 	.word	0x2000d56c

0001a570 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1a570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a574:	4604      	mov	r4, r0
   1a576:	f04f 0320 	mov.w	r3, #32
   1a57a:	f3ef 8611 	mrs	r6, BASEPRI
   1a57e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a582:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a586:	483e      	ldr	r0, [pc, #248]	; (1a680 <z_thread_abort+0x110>)
   1a588:	f7fe fa9c 	bl	18ac4 <z_spin_lock_valid>
   1a58c:	b940      	cbnz	r0, 1a5a0 <z_thread_abort+0x30>
   1a58e:	493d      	ldr	r1, [pc, #244]	; (1a684 <z_thread_abort+0x114>)
   1a590:	483d      	ldr	r0, [pc, #244]	; (1a688 <z_thread_abort+0x118>)
   1a592:	2281      	movs	r2, #129	; 0x81
   1a594:	f000 fcde 	bl	1af54 <printk>
   1a598:	2181      	movs	r1, #129	; 0x81
   1a59a:	483a      	ldr	r0, [pc, #232]	; (1a684 <z_thread_abort+0x114>)
   1a59c:	f000 febe 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a5a0:	4837      	ldr	r0, [pc, #220]	; (1a680 <z_thread_abort+0x110>)
   1a5a2:	f7fe faab 	bl	18afc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1a5a6:	7b63      	ldrb	r3, [r4, #13]
   1a5a8:	071a      	lsls	r2, r3, #28
   1a5aa:	d512      	bpl.n	1a5d2 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a5ac:	4834      	ldr	r0, [pc, #208]	; (1a680 <z_thread_abort+0x110>)
   1a5ae:	f7fe fa97 	bl	18ae0 <z_spin_unlock_valid>
   1a5b2:	b940      	cbnz	r0, 1a5c6 <z_thread_abort+0x56>
   1a5b4:	4933      	ldr	r1, [pc, #204]	; (1a684 <z_thread_abort+0x114>)
   1a5b6:	4834      	ldr	r0, [pc, #208]	; (1a688 <z_thread_abort+0x118>)
   1a5b8:	22ac      	movs	r2, #172	; 0xac
   1a5ba:	f000 fccb 	bl	1af54 <printk>
   1a5be:	21ac      	movs	r1, #172	; 0xac
   1a5c0:	4830      	ldr	r0, [pc, #192]	; (1a684 <z_thread_abort+0x114>)
   1a5c2:	f000 feab 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1a5c6:	f386 8811 	msr	BASEPRI, r6
   1a5ca:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1a5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1a5d2:	f023 0220 	bic.w	r2, r3, #32
   1a5d6:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1a5da:	09d2      	lsrs	r2, r2, #7
   1a5dc:	d138      	bne.n	1a650 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1a5de:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   1a5e0:	68a3      	ldr	r3, [r4, #8]
   1a5e2:	b113      	cbz	r3, 1a5ea <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   1a5e4:	4620      	mov	r0, r4
   1a5e6:	f7ff f98b 	bl	19900 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1a5ea:	f104 0018 	add.w	r0, r4, #24
   1a5ee:	f000 f9cf 	bl	1a990 <z_abort_timeout>
   1a5f2:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1a5f6:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   1a5fa:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a5fc:	42bd      	cmp	r5, r7
   1a5fe:	d000      	beq.n	1a602 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1a600:	bb85      	cbnz	r5, 1a664 <z_thread_abort+0xf4>
		update_cache(1);
   1a602:	2001      	movs	r0, #1
   1a604:	f7ff f9d4 	bl	199b0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1a608:	4b20      	ldr	r3, [pc, #128]	; (1a68c <z_thread_abort+0x11c>)
   1a60a:	689b      	ldr	r3, [r3, #8]
   1a60c:	42a3      	cmp	r3, r4
   1a60e:	d1cd      	bne.n	1a5ac <z_thread_abort+0x3c>
   1a610:	f3ef 8305 	mrs	r3, IPSR
   1a614:	2b00      	cmp	r3, #0
   1a616:	d1c9      	bne.n	1a5ac <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a618:	4819      	ldr	r0, [pc, #100]	; (1a680 <z_thread_abort+0x110>)
   1a61a:	f7fe fa61 	bl	18ae0 <z_spin_unlock_valid>
   1a61e:	b940      	cbnz	r0, 1a632 <z_thread_abort+0xc2>
   1a620:	4918      	ldr	r1, [pc, #96]	; (1a684 <z_thread_abort+0x114>)
   1a622:	4819      	ldr	r0, [pc, #100]	; (1a688 <z_thread_abort+0x118>)
   1a624:	22c3      	movs	r2, #195	; 0xc3
   1a626:	f000 fc95 	bl	1af54 <printk>
   1a62a:	21c3      	movs	r1, #195	; 0xc3
   1a62c:	4815      	ldr	r0, [pc, #84]	; (1a684 <z_thread_abort+0x114>)
   1a62e:	f000 fe75 	bl	1b31c <assert_post_action>
   1a632:	4630      	mov	r0, r6
   1a634:	f7f8 fc56 	bl	12ee4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   1a638:	f240 624b 	movw	r2, #1611	; 0x64b
   1a63c:	4914      	ldr	r1, [pc, #80]	; (1a690 <z_thread_abort+0x120>)
   1a63e:	4812      	ldr	r0, [pc, #72]	; (1a688 <z_thread_abort+0x118>)
   1a640:	f000 fc88 	bl	1af54 <printk>
   1a644:	f240 614b 	movw	r1, #1611	; 0x64b
   1a648:	4811      	ldr	r0, [pc, #68]	; (1a690 <z_thread_abort+0x120>)
   1a64a:	f000 fe67 	bl	1b31c <assert_post_action>
   1a64e:	e7ad      	b.n	1a5ac <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a650:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1a654:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   1a658:	4621      	mov	r1, r4
   1a65a:	480e      	ldr	r0, [pc, #56]	; (1a694 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a65c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1a65e:	f7ff f931 	bl	198c4 <z_priq_dumb_remove>
}
   1a662:	e7bd      	b.n	1a5e0 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   1a664:	4628      	mov	r0, r5
   1a666:	f7ff f94b 	bl	19900 <unpend_thread_no_timeout>
   1a66a:	f105 0018 	add.w	r0, r5, #24
   1a66e:	f000 f98f 	bl	1a990 <z_abort_timeout>
		ready_thread(thread);
   1a672:	4628      	mov	r0, r5
   1a674:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
   1a678:	f7ff fa84 	bl	19b84 <ready_thread>
   1a67c:	e7bd      	b.n	1a5fa <z_thread_abort+0x8a>
   1a67e:	bf00      	nop
   1a680:	2000d5ac 	.word	0x2000d5ac
   1a684:	0001cad3 	.word	0x0001cad3
   1a688:	0001c625 	.word	0x0001c625
   1a68c:	2000d56c 	.word	0x2000d56c
   1a690:	0001d981 	.word	0x0001d981
   1a694:	2000d58c 	.word	0x2000d58c

0001a698 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   1a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a69a:	4604      	mov	r4, r0
   1a69c:	460e      	mov	r6, r1
   1a69e:	4615      	mov	r5, r2
	__asm__ volatile(
   1a6a0:	f04f 0320 	mov.w	r3, #32
   1a6a4:	f3ef 8711 	mrs	r7, BASEPRI
   1a6a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a6ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a6b0:	4819      	ldr	r0, [pc, #100]	; (1a718 <z_sched_wake+0x80>)
   1a6b2:	f7fe fa07 	bl	18ac4 <z_spin_lock_valid>
   1a6b6:	b940      	cbnz	r0, 1a6ca <z_sched_wake+0x32>
   1a6b8:	4918      	ldr	r1, [pc, #96]	; (1a71c <z_sched_wake+0x84>)
   1a6ba:	4819      	ldr	r0, [pc, #100]	; (1a720 <z_sched_wake+0x88>)
   1a6bc:	2281      	movs	r2, #129	; 0x81
   1a6be:	f000 fc49 	bl	1af54 <printk>
   1a6c2:	2181      	movs	r1, #129	; 0x81
   1a6c4:	4815      	ldr	r0, [pc, #84]	; (1a71c <z_sched_wake+0x84>)
   1a6c6:	f000 fe29 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a6ca:	4813      	ldr	r0, [pc, #76]	; (1a718 <z_sched_wake+0x80>)
   1a6cc:	f7fe fa16 	bl	18afc <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   1a6d0:	4620      	mov	r0, r4
   1a6d2:	f001 fc1f 	bl	1bf14 <z_priq_dumb_best>

		if (thread != NULL) {
   1a6d6:	4604      	mov	r4, r0
   1a6d8:	b158      	cbz	r0, 1a6f2 <z_sched_wake+0x5a>
   1a6da:	6786      	str	r6, [r0, #120]	; 0x78
   1a6dc:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   1a6de:	f7ff f90f 	bl	19900 <unpend_thread_no_timeout>
   1a6e2:	f104 0018 	add.w	r0, r4, #24
   1a6e6:	f000 f953 	bl	1a990 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   1a6ea:	4620      	mov	r0, r4
   1a6ec:	f7ff fa4a 	bl	19b84 <ready_thread>
			ret = true;
   1a6f0:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a6f2:	4809      	ldr	r0, [pc, #36]	; (1a718 <z_sched_wake+0x80>)
   1a6f4:	f7fe f9f4 	bl	18ae0 <z_spin_unlock_valid>
   1a6f8:	b940      	cbnz	r0, 1a70c <z_sched_wake+0x74>
   1a6fa:	4908      	ldr	r1, [pc, #32]	; (1a71c <z_sched_wake+0x84>)
   1a6fc:	4808      	ldr	r0, [pc, #32]	; (1a720 <z_sched_wake+0x88>)
   1a6fe:	22ac      	movs	r2, #172	; 0xac
   1a700:	f000 fc28 	bl	1af54 <printk>
   1a704:	21ac      	movs	r1, #172	; 0xac
   1a706:	4805      	ldr	r0, [pc, #20]	; (1a71c <z_sched_wake+0x84>)
   1a708:	f000 fe08 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1a70c:	f387 8811 	msr	BASEPRI, r7
   1a710:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1a714:	4620      	mov	r0, r4
   1a716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a718:	2000d5ac 	.word	0x2000d5ac
   1a71c:	0001cad3 	.word	0x0001cad3
   1a720:	0001c625 	.word	0x0001c625

0001a724 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1a724:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1a726:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1a72a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1a72c:	e9cd 6700 	strd	r6, r7, [sp]
   1a730:	f7ff fbde 	bl	19ef0 <z_pend_curr>

	if (data != NULL) {
   1a734:	b11c      	cbz	r4, 1a73e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1a736:	4b03      	ldr	r3, [pc, #12]	; (1a744 <z_sched_wait+0x20>)
   1a738:	689b      	ldr	r3, [r3, #8]
   1a73a:	695b      	ldr	r3, [r3, #20]
   1a73c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1a73e:	b002      	add	sp, #8
   1a740:	bdd0      	pop	{r4, r6, r7, pc}
   1a742:	bf00      	nop
   1a744:	2000d56c 	.word	0x2000d56c

0001a748 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1a748:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1a74a:	4806      	ldr	r0, [pc, #24]	; (1a764 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1a74c:	4a06      	ldr	r2, [pc, #24]	; (1a768 <z_data_copy+0x20>)
   1a74e:	4907      	ldr	r1, [pc, #28]	; (1a76c <z_data_copy+0x24>)
   1a750:	1a12      	subs	r2, r2, r0
   1a752:	f000 fed4 	bl	1b4fe <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1a756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1a75a:	4a05      	ldr	r2, [pc, #20]	; (1a770 <z_data_copy+0x28>)
   1a75c:	4905      	ldr	r1, [pc, #20]	; (1a774 <z_data_copy+0x2c>)
   1a75e:	4806      	ldr	r0, [pc, #24]	; (1a778 <z_data_copy+0x30>)
   1a760:	f000 becd 	b.w	1b4fe <memcpy>
   1a764:	2000c500 	.word	0x2000c500
   1a768:	2000cb74 	.word	0x2000cb74
   1a76c:	0001da24 	.word	0x0001da24
   1a770:	00000000 	.word	0x00000000
   1a774:	0001da0c 	.word	0x0001da0c
   1a778:	2000c500 	.word	0x2000c500

0001a77c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1a77c:	4b03      	ldr	r3, [pc, #12]	; (1a78c <elapsed+0x10>)
   1a77e:	681b      	ldr	r3, [r3, #0]
   1a780:	b90b      	cbnz	r3, 1a786 <elapsed+0xa>
   1a782:	f7fa bcf9 	b.w	15178 <sys_clock_elapsed>
}
   1a786:	2000      	movs	r0, #0
   1a788:	4770      	bx	lr
   1a78a:	bf00      	nop
   1a78c:	2000d5b8 	.word	0x2000d5b8

0001a790 <remove_timeout>:
{
   1a790:	b530      	push	{r4, r5, lr}
   1a792:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a794:	b168      	cbz	r0, 1a7b2 <remove_timeout+0x22>
   1a796:	4a0a      	ldr	r2, [pc, #40]	; (1a7c0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1a798:	6852      	ldr	r2, [r2, #4]
   1a79a:	4290      	cmp	r0, r2
   1a79c:	d009      	beq.n	1a7b2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1a79e:	b143      	cbz	r3, 1a7b2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1a7a0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1a7a4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1a7a8:	1912      	adds	r2, r2, r4
   1a7aa:	eb45 0101 	adc.w	r1, r5, r1
   1a7ae:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   1a7b2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   1a7b4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a7b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a7b8:	2300      	movs	r3, #0
	node->prev = NULL;
   1a7ba:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a7be:	bd30      	pop	{r4, r5, pc}
   1a7c0:	2000c678 	.word	0x2000c678

0001a7c4 <next_timeout>:

static int32_t next_timeout(void)
{
   1a7c4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1a7c6:	4b13      	ldr	r3, [pc, #76]	; (1a814 <next_timeout+0x50>)
   1a7c8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a7ca:	429c      	cmp	r4, r3
   1a7cc:	bf08      	it	eq
   1a7ce:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1a7d0:	f7ff ffd4 	bl	1a77c <elapsed>
   1a7d4:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1a7d6:	b1bc      	cbz	r4, 1a808 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1a7d8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1a7dc:	1b40      	subs	r0, r0, r5
   1a7de:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1a7e2:	2801      	cmp	r0, #1
   1a7e4:	f171 0300 	sbcs.w	r3, r1, #0
   1a7e8:	db11      	blt.n	1a80e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1a7ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1a7ee:	2300      	movs	r3, #0
   1a7f0:	4282      	cmp	r2, r0
   1a7f2:	eb73 0401 	sbcs.w	r4, r3, r1
   1a7f6:	da00      	bge.n	1a7fa <next_timeout+0x36>
   1a7f8:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1a7fa:	4b07      	ldr	r3, [pc, #28]	; (1a818 <next_timeout+0x54>)
   1a7fc:	691b      	ldr	r3, [r3, #16]
   1a7fe:	b113      	cbz	r3, 1a806 <next_timeout+0x42>
   1a800:	4298      	cmp	r0, r3
   1a802:	bfa8      	it	ge
   1a804:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1a806:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1a808:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1a80c:	e7f5      	b.n	1a7fa <next_timeout+0x36>
   1a80e:	2000      	movs	r0, #0
   1a810:	e7f3      	b.n	1a7fa <next_timeout+0x36>
   1a812:	bf00      	nop
   1a814:	2000c678 	.word	0x2000c678
   1a818:	2000d56c 	.word	0x2000d56c

0001a81c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1a81c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a820:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a822:	1c6b      	adds	r3, r5, #1
   1a824:	bf08      	it	eq
   1a826:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1a82a:	4682      	mov	sl, r0
   1a82c:	468b      	mov	fp, r1
   1a82e:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a830:	f000 809c 	beq.w	1a96c <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1a834:	6803      	ldr	r3, [r0, #0]
   1a836:	b143      	cbz	r3, 1a84a <z_add_timeout+0x2e>
   1a838:	494e      	ldr	r1, [pc, #312]	; (1a974 <z_add_timeout+0x158>)
   1a83a:	484f      	ldr	r0, [pc, #316]	; (1a978 <z_add_timeout+0x15c>)
   1a83c:	225d      	movs	r2, #93	; 0x5d
   1a83e:	f000 fb89 	bl	1af54 <printk>
   1a842:	215d      	movs	r1, #93	; 0x5d
   1a844:	484b      	ldr	r0, [pc, #300]	; (1a974 <z_add_timeout+0x158>)
   1a846:	f000 fd69 	bl	1b31c <assert_post_action>
	to->fn = fn;
   1a84a:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   1a84e:	f04f 0320 	mov.w	r3, #32
   1a852:	f3ef 8b11 	mrs	fp, BASEPRI
   1a856:	f383 8812 	msr	BASEPRI_MAX, r3
   1a85a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a85e:	4847      	ldr	r0, [pc, #284]	; (1a97c <z_add_timeout+0x160>)
   1a860:	f7fe f930 	bl	18ac4 <z_spin_lock_valid>
   1a864:	b940      	cbnz	r0, 1a878 <z_add_timeout+0x5c>
   1a866:	4946      	ldr	r1, [pc, #280]	; (1a980 <z_add_timeout+0x164>)
   1a868:	4843      	ldr	r0, [pc, #268]	; (1a978 <z_add_timeout+0x15c>)
   1a86a:	2281      	movs	r2, #129	; 0x81
   1a86c:	f000 fb72 	bl	1af54 <printk>
   1a870:	2181      	movs	r1, #129	; 0x81
   1a872:	4843      	ldr	r0, [pc, #268]	; (1a980 <z_add_timeout+0x164>)
   1a874:	f000 fd52 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a878:	4840      	ldr	r0, [pc, #256]	; (1a97c <z_add_timeout+0x160>)
   1a87a:	f7fe f93f 	bl	18afc <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1a87e:	f06f 0301 	mvn.w	r3, #1
   1a882:	f04f 32ff 	mov.w	r2, #4294967295
   1a886:	ebb3 0804 	subs.w	r8, r3, r4
   1a88a:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1a88e:	f1b8 0f00 	cmp.w	r8, #0
   1a892:	f179 0100 	sbcs.w	r1, r9, #0
   1a896:	db1c      	blt.n	1a8d2 <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1a898:	483a      	ldr	r0, [pc, #232]	; (1a984 <z_add_timeout+0x168>)
   1a89a:	e9d0 1000 	ldrd	r1, r0, [r0]
   1a89e:	1a5b      	subs	r3, r3, r1
   1a8a0:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1a8a4:	1b1e      	subs	r6, r3, r4
   1a8a6:	eb62 0705 	sbc.w	r7, r2, r5
   1a8aa:	2e01      	cmp	r6, #1
   1a8ac:	f177 0300 	sbcs.w	r3, r7, #0
   1a8b0:	bfbc      	itt	lt
   1a8b2:	2601      	movlt	r6, #1
   1a8b4:	2700      	movlt	r7, #0
   1a8b6:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   1a8ba:	4a33      	ldr	r2, [pc, #204]	; (1a988 <z_add_timeout+0x16c>)
   1a8bc:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a8c0:	4293      	cmp	r3, r2
   1a8c2:	d11d      	bne.n	1a900 <z_add_timeout+0xe4>
	node->prev = tail;
   1a8c4:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   1a8c8:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   1a8cc:	f8c2 a004 	str.w	sl, [r2, #4]
}
   1a8d0:	e02c      	b.n	1a92c <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1a8d2:	f7ff ff53 	bl	1a77c <elapsed>
   1a8d6:	1c63      	adds	r3, r4, #1
   1a8d8:	9300      	str	r3, [sp, #0]
   1a8da:	f145 0300 	adc.w	r3, r5, #0
   1a8de:	9301      	str	r3, [sp, #4]
   1a8e0:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a8e4:	1812      	adds	r2, r2, r0
   1a8e6:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1a8ea:	e9ca 2304 	strd	r2, r3, [sl, #16]
   1a8ee:	e7e4      	b.n	1a8ba <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1a8f0:	1be0      	subs	r0, r4, r7
   1a8f2:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   1a8f6:	42b3      	cmp	r3, r6
   1a8f8:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1a8fc:	d0e2      	beq.n	1a8c4 <z_add_timeout+0xa8>
   1a8fe:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1a900:	2b00      	cmp	r3, #0
   1a902:	d0df      	beq.n	1a8c4 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
   1a904:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   1a908:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1a90c:	42bc      	cmp	r4, r7
   1a90e:	eb75 0108 	sbcs.w	r1, r5, r8
   1a912:	daed      	bge.n	1a8f0 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
   1a914:	1b38      	subs	r0, r7, r4
   1a916:	eb68 0105 	sbc.w	r1, r8, r5
   1a91a:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1a91e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1a920:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   1a924:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1a928:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   1a92c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a92e:	4293      	cmp	r3, r2
   1a930:	d00b      	beq.n	1a94a <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1a932:	459a      	cmp	sl, r3
   1a934:	d109      	bne.n	1a94a <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1a936:	f7ff ff45 	bl	1a7c4 <next_timeout>

			if (next_time == 0 ||
   1a93a:	b118      	cbz	r0, 1a944 <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
   1a93c:	4b13      	ldr	r3, [pc, #76]	; (1a98c <z_add_timeout+0x170>)
			if (next_time == 0 ||
   1a93e:	691b      	ldr	r3, [r3, #16]
   1a940:	4283      	cmp	r3, r0
   1a942:	d002      	beq.n	1a94a <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
   1a944:	2100      	movs	r1, #0
   1a946:	f7fa fbe7 	bl	15118 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a94a:	480c      	ldr	r0, [pc, #48]	; (1a97c <z_add_timeout+0x160>)
   1a94c:	f7fe f8c8 	bl	18ae0 <z_spin_unlock_valid>
   1a950:	b940      	cbnz	r0, 1a964 <z_add_timeout+0x148>
   1a952:	490b      	ldr	r1, [pc, #44]	; (1a980 <z_add_timeout+0x164>)
   1a954:	4808      	ldr	r0, [pc, #32]	; (1a978 <z_add_timeout+0x15c>)
   1a956:	22ac      	movs	r2, #172	; 0xac
   1a958:	f000 fafc 	bl	1af54 <printk>
   1a95c:	21ac      	movs	r1, #172	; 0xac
   1a95e:	4808      	ldr	r0, [pc, #32]	; (1a980 <z_add_timeout+0x164>)
   1a960:	f000 fcdc 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1a964:	f38b 8811 	msr	BASEPRI, fp
   1a968:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1a96c:	b003      	add	sp, #12
   1a96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a972:	bf00      	nop
   1a974:	0001d9a3 	.word	0x0001d9a3
   1a978:	0001c625 	.word	0x0001c625
   1a97c:	2000d5bc 	.word	0x2000d5bc
   1a980:	0001cad3 	.word	0x0001cad3
   1a984:	2000cdb8 	.word	0x2000cdb8
   1a988:	2000c678 	.word	0x2000c678
   1a98c:	2000d56c 	.word	0x2000d56c

0001a990 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1a990:	b538      	push	{r3, r4, r5, lr}
   1a992:	4604      	mov	r4, r0
	__asm__ volatile(
   1a994:	f04f 0320 	mov.w	r3, #32
   1a998:	f3ef 8511 	mrs	r5, BASEPRI
   1a99c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a9a4:	4815      	ldr	r0, [pc, #84]	; (1a9fc <z_abort_timeout+0x6c>)
   1a9a6:	f7fe f88d 	bl	18ac4 <z_spin_lock_valid>
   1a9aa:	b940      	cbnz	r0, 1a9be <z_abort_timeout+0x2e>
   1a9ac:	4914      	ldr	r1, [pc, #80]	; (1aa00 <z_abort_timeout+0x70>)
   1a9ae:	4815      	ldr	r0, [pc, #84]	; (1aa04 <z_abort_timeout+0x74>)
   1a9b0:	2281      	movs	r2, #129	; 0x81
   1a9b2:	f000 facf 	bl	1af54 <printk>
   1a9b6:	2181      	movs	r1, #129	; 0x81
   1a9b8:	4811      	ldr	r0, [pc, #68]	; (1aa00 <z_abort_timeout+0x70>)
   1a9ba:	f000 fcaf 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a9be:	480f      	ldr	r0, [pc, #60]	; (1a9fc <z_abort_timeout+0x6c>)
   1a9c0:	f7fe f89c 	bl	18afc <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1a9c4:	6823      	ldr	r3, [r4, #0]
   1a9c6:	b1b3      	cbz	r3, 1a9f6 <z_abort_timeout+0x66>
			remove_timeout(to);
   1a9c8:	4620      	mov	r0, r4
   1a9ca:	f7ff fee1 	bl	1a790 <remove_timeout>
			ret = 0;
   1a9ce:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a9d0:	480a      	ldr	r0, [pc, #40]	; (1a9fc <z_abort_timeout+0x6c>)
   1a9d2:	f7fe f885 	bl	18ae0 <z_spin_unlock_valid>
   1a9d6:	b940      	cbnz	r0, 1a9ea <z_abort_timeout+0x5a>
   1a9d8:	4909      	ldr	r1, [pc, #36]	; (1aa00 <z_abort_timeout+0x70>)
   1a9da:	480a      	ldr	r0, [pc, #40]	; (1aa04 <z_abort_timeout+0x74>)
   1a9dc:	22ac      	movs	r2, #172	; 0xac
   1a9de:	f000 fab9 	bl	1af54 <printk>
   1a9e2:	21ac      	movs	r1, #172	; 0xac
   1a9e4:	4806      	ldr	r0, [pc, #24]	; (1aa00 <z_abort_timeout+0x70>)
   1a9e6:	f000 fc99 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1a9ea:	f385 8811 	msr	BASEPRI, r5
   1a9ee:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1a9f2:	4620      	mov	r0, r4
   1a9f4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1a9f6:	f06f 0415 	mvn.w	r4, #21
   1a9fa:	e7e9      	b.n	1a9d0 <z_abort_timeout+0x40>
   1a9fc:	2000d5bc 	.word	0x2000d5bc
   1aa00:	0001cad3 	.word	0x0001cad3
   1aa04:	0001c625 	.word	0x0001c625

0001aa08 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1aa08:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1aa0a:	f04f 0320 	mov.w	r3, #32
   1aa0e:	f3ef 8511 	mrs	r5, BASEPRI
   1aa12:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aa1a:	4813      	ldr	r0, [pc, #76]	; (1aa68 <z_get_next_timeout_expiry+0x60>)
   1aa1c:	f7fe f852 	bl	18ac4 <z_spin_lock_valid>
   1aa20:	b940      	cbnz	r0, 1aa34 <z_get_next_timeout_expiry+0x2c>
   1aa22:	4912      	ldr	r1, [pc, #72]	; (1aa6c <z_get_next_timeout_expiry+0x64>)
   1aa24:	4812      	ldr	r0, [pc, #72]	; (1aa70 <z_get_next_timeout_expiry+0x68>)
   1aa26:	2281      	movs	r2, #129	; 0x81
   1aa28:	f000 fa94 	bl	1af54 <printk>
   1aa2c:	2181      	movs	r1, #129	; 0x81
   1aa2e:	480f      	ldr	r0, [pc, #60]	; (1aa6c <z_get_next_timeout_expiry+0x64>)
   1aa30:	f000 fc74 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1aa34:	480c      	ldr	r0, [pc, #48]	; (1aa68 <z_get_next_timeout_expiry+0x60>)
   1aa36:	f7fe f861 	bl	18afc <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1aa3a:	f7ff fec3 	bl	1a7c4 <next_timeout>
   1aa3e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aa40:	4809      	ldr	r0, [pc, #36]	; (1aa68 <z_get_next_timeout_expiry+0x60>)
   1aa42:	f7fe f84d 	bl	18ae0 <z_spin_unlock_valid>
   1aa46:	b940      	cbnz	r0, 1aa5a <z_get_next_timeout_expiry+0x52>
   1aa48:	4908      	ldr	r1, [pc, #32]	; (1aa6c <z_get_next_timeout_expiry+0x64>)
   1aa4a:	4809      	ldr	r0, [pc, #36]	; (1aa70 <z_get_next_timeout_expiry+0x68>)
   1aa4c:	22ac      	movs	r2, #172	; 0xac
   1aa4e:	f000 fa81 	bl	1af54 <printk>
   1aa52:	21ac      	movs	r1, #172	; 0xac
   1aa54:	4805      	ldr	r0, [pc, #20]	; (1aa6c <z_get_next_timeout_expiry+0x64>)
   1aa56:	f000 fc61 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1aa5a:	f385 8811 	msr	BASEPRI, r5
   1aa5e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1aa62:	4620      	mov	r0, r4
   1aa64:	bd38      	pop	{r3, r4, r5, pc}
   1aa66:	bf00      	nop
   1aa68:	2000d5bc 	.word	0x2000d5bc
   1aa6c:	0001cad3 	.word	0x0001cad3
   1aa70:	0001c625 	.word	0x0001c625

0001aa74 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1aa74:	b570      	push	{r4, r5, r6, lr}
   1aa76:	4604      	mov	r4, r0
   1aa78:	460d      	mov	r5, r1
	__asm__ volatile(
   1aa7a:	f04f 0320 	mov.w	r3, #32
   1aa7e:	f3ef 8611 	mrs	r6, BASEPRI
   1aa82:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aa8a:	4816      	ldr	r0, [pc, #88]	; (1aae4 <z_set_timeout_expiry+0x70>)
   1aa8c:	f7fe f81a 	bl	18ac4 <z_spin_lock_valid>
   1aa90:	b940      	cbnz	r0, 1aaa4 <z_set_timeout_expiry+0x30>
   1aa92:	4915      	ldr	r1, [pc, #84]	; (1aae8 <z_set_timeout_expiry+0x74>)
   1aa94:	4815      	ldr	r0, [pc, #84]	; (1aaec <z_set_timeout_expiry+0x78>)
   1aa96:	2281      	movs	r2, #129	; 0x81
   1aa98:	f000 fa5c 	bl	1af54 <printk>
   1aa9c:	2181      	movs	r1, #129	; 0x81
   1aa9e:	4812      	ldr	r0, [pc, #72]	; (1aae8 <z_set_timeout_expiry+0x74>)
   1aaa0:	f000 fc3c 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1aaa4:	480f      	ldr	r0, [pc, #60]	; (1aae4 <z_set_timeout_expiry+0x70>)
   1aaa6:	f7fe f829 	bl	18afc <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1aaaa:	f7ff fe8b 	bl	1a7c4 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1aaae:	2801      	cmp	r0, #1
   1aab0:	dd05      	ble.n	1aabe <z_set_timeout_expiry+0x4a>
   1aab2:	42a0      	cmp	r0, r4
   1aab4:	db03      	blt.n	1aabe <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1aab6:	4629      	mov	r1, r5
   1aab8:	4620      	mov	r0, r4
   1aaba:	f7fa fb2d 	bl	15118 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aabe:	4809      	ldr	r0, [pc, #36]	; (1aae4 <z_set_timeout_expiry+0x70>)
   1aac0:	f7fe f80e 	bl	18ae0 <z_spin_unlock_valid>
   1aac4:	b940      	cbnz	r0, 1aad8 <z_set_timeout_expiry+0x64>
   1aac6:	4908      	ldr	r1, [pc, #32]	; (1aae8 <z_set_timeout_expiry+0x74>)
   1aac8:	4808      	ldr	r0, [pc, #32]	; (1aaec <z_set_timeout_expiry+0x78>)
   1aaca:	22ac      	movs	r2, #172	; 0xac
   1aacc:	f000 fa42 	bl	1af54 <printk>
   1aad0:	21ac      	movs	r1, #172	; 0xac
   1aad2:	4805      	ldr	r0, [pc, #20]	; (1aae8 <z_set_timeout_expiry+0x74>)
   1aad4:	f000 fc22 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1aad8:	f386 8811 	msr	BASEPRI, r6
   1aadc:	f3bf 8f6f 	isb	sy
		}
	}
}
   1aae0:	bd70      	pop	{r4, r5, r6, pc}
   1aae2:	bf00      	nop
   1aae4:	2000d5bc 	.word	0x2000d5bc
   1aae8:	0001cad3 	.word	0x0001cad3
   1aaec:	0001c625 	.word	0x0001c625

0001aaf0 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   1aaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aaf4:	b085      	sub	sp, #20
   1aaf6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1aaf8:	f7fe ffde 	bl	19ab8 <z_time_slice>
	__asm__ volatile(
   1aafc:	f04f 0320 	mov.w	r3, #32
   1ab00:	f3ef 8911 	mrs	r9, BASEPRI
   1ab04:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ab0c:	484c      	ldr	r0, [pc, #304]	; (1ac40 <sys_clock_announce+0x150>)
   1ab0e:	f7fd ffd9 	bl	18ac4 <z_spin_lock_valid>
   1ab12:	b940      	cbnz	r0, 1ab26 <sys_clock_announce+0x36>
   1ab14:	494b      	ldr	r1, [pc, #300]	; (1ac44 <sys_clock_announce+0x154>)
   1ab16:	484c      	ldr	r0, [pc, #304]	; (1ac48 <sys_clock_announce+0x158>)
   1ab18:	2281      	movs	r2, #129	; 0x81
   1ab1a:	f000 fa1b 	bl	1af54 <printk>
   1ab1e:	2181      	movs	r1, #129	; 0x81
   1ab20:	4848      	ldr	r0, [pc, #288]	; (1ac44 <sys_clock_announce+0x154>)
   1ab22:	f000 fbfb 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ab26:	4f49      	ldr	r7, [pc, #292]	; (1ac4c <sys_clock_announce+0x15c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1ab28:	4e49      	ldr	r6, [pc, #292]	; (1ac50 <sys_clock_announce+0x160>)
   1ab2a:	46bb      	mov	fp, r7
   1ab2c:	4844      	ldr	r0, [pc, #272]	; (1ac40 <sys_clock_announce+0x150>)
	return list->head == list;
   1ab2e:	f8df a124 	ldr.w	sl, [pc, #292]	; 1ac54 <sys_clock_announce+0x164>
   1ab32:	f7fd ffe3 	bl	18afc <z_spin_lock_set_owner>
   1ab36:	6034      	str	r4, [r6, #0]
   1ab38:	f8d6 c000 	ldr.w	ip, [r6]
   1ab3c:	f8da 8000 	ldr.w	r8, [sl]
   1ab40:	4662      	mov	r2, ip
   1ab42:	e9d7 3400 	ldrd	r3, r4, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab46:	45d0      	cmp	r8, sl
   1ab48:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1ab4c:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1ab50:	e9cd 2300 	strd	r2, r3, [sp]
   1ab54:	d011      	beq.n	1ab7a <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1ab56:	f1b8 0f00 	cmp.w	r8, #0
   1ab5a:	d00e      	beq.n	1ab7a <sys_clock_announce+0x8a>
   1ab5c:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
   1ab60:	e9dd 3400 	ldrd	r3, r4, [sp]
   1ab64:	428b      	cmp	r3, r1
   1ab66:	eb74 0302 	sbcs.w	r3, r4, r2
   1ab6a:	da2a      	bge.n	1abc2 <sys_clock_announce+0xd2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1ab6c:	9b00      	ldr	r3, [sp, #0]
   1ab6e:	1ac8      	subs	r0, r1, r3
   1ab70:	9b01      	ldr	r3, [sp, #4]
   1ab72:	eb62 0103 	sbc.w	r1, r2, r3
   1ab76:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1ab7a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1ab7c:	9b00      	ldr	r3, [sp, #0]
   1ab7e:	9a02      	ldr	r2, [sp, #8]
   1ab80:	9903      	ldr	r1, [sp, #12]
   1ab82:	189a      	adds	r2, r3, r2
   1ab84:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1ab86:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
   1ab88:	eb41 0303 	adc.w	r3, r1, r3
   1ab8c:	e9cb 2300 	strd	r2, r3, [fp]

	sys_clock_set_timeout(next_timeout(), false);
   1ab90:	f7ff fe18 	bl	1a7c4 <next_timeout>
   1ab94:	4621      	mov	r1, r4
   1ab96:	f7fa fabf 	bl	15118 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ab9a:	4829      	ldr	r0, [pc, #164]	; (1ac40 <sys_clock_announce+0x150>)
   1ab9c:	f7fd ffa0 	bl	18ae0 <z_spin_unlock_valid>
   1aba0:	b940      	cbnz	r0, 1abb4 <sys_clock_announce+0xc4>
   1aba2:	4928      	ldr	r1, [pc, #160]	; (1ac44 <sys_clock_announce+0x154>)
   1aba4:	4828      	ldr	r0, [pc, #160]	; (1ac48 <sys_clock_announce+0x158>)
   1aba6:	22ac      	movs	r2, #172	; 0xac
   1aba8:	f000 f9d4 	bl	1af54 <printk>
   1abac:	21ac      	movs	r1, #172	; 0xac
   1abae:	4825      	ldr	r0, [pc, #148]	; (1ac44 <sys_clock_announce+0x154>)
   1abb0:	f000 fbb4 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1abb4:	f389 8811 	msr	BASEPRI, r9
   1abb8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1abbc:	b005      	add	sp, #20
   1abbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   1abc2:	2200      	movs	r2, #0
		curr_tick += dt;
   1abc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		t->dticks = 0;
   1abc8:	2300      	movs	r3, #0
		curr_tick += dt;
   1abca:	1864      	adds	r4, r4, r1
		announce_remaining -= dt;
   1abcc:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   1abd0:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
   1abd4:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
   1abd6:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
   1abda:	4640      	mov	r0, r8
		curr_tick += dt;
   1abdc:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
   1abe0:	f7ff fdd6 	bl	1a790 <remove_timeout>
   1abe4:	4816      	ldr	r0, [pc, #88]	; (1ac40 <sys_clock_announce+0x150>)
   1abe6:	f7fd ff7b 	bl	18ae0 <z_spin_unlock_valid>
   1abea:	b940      	cbnz	r0, 1abfe <sys_clock_announce+0x10e>
   1abec:	4915      	ldr	r1, [pc, #84]	; (1ac44 <sys_clock_announce+0x154>)
   1abee:	4816      	ldr	r0, [pc, #88]	; (1ac48 <sys_clock_announce+0x158>)
   1abf0:	22ac      	movs	r2, #172	; 0xac
   1abf2:	f000 f9af 	bl	1af54 <printk>
   1abf6:	21ac      	movs	r1, #172	; 0xac
   1abf8:	4812      	ldr	r0, [pc, #72]	; (1ac44 <sys_clock_announce+0x154>)
   1abfa:	f000 fb8f 	bl	1b31c <assert_post_action>
   1abfe:	f389 8811 	msr	BASEPRI, r9
   1ac02:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1ac06:	4640      	mov	r0, r8
   1ac08:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1ac0c:	4798      	blx	r3
	__asm__ volatile(
   1ac0e:	f04f 0320 	mov.w	r3, #32
   1ac12:	f3ef 8911 	mrs	r9, BASEPRI
   1ac16:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac1e:	4808      	ldr	r0, [pc, #32]	; (1ac40 <sys_clock_announce+0x150>)
   1ac20:	f7fd ff50 	bl	18ac4 <z_spin_lock_valid>
   1ac24:	b940      	cbnz	r0, 1ac38 <sys_clock_announce+0x148>
   1ac26:	4907      	ldr	r1, [pc, #28]	; (1ac44 <sys_clock_announce+0x154>)
   1ac28:	4807      	ldr	r0, [pc, #28]	; (1ac48 <sys_clock_announce+0x158>)
   1ac2a:	2281      	movs	r2, #129	; 0x81
   1ac2c:	f000 f992 	bl	1af54 <printk>
   1ac30:	2181      	movs	r1, #129	; 0x81
   1ac32:	4804      	ldr	r0, [pc, #16]	; (1ac44 <sys_clock_announce+0x154>)
   1ac34:	f000 fb72 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ac38:	4801      	ldr	r0, [pc, #4]	; (1ac40 <sys_clock_announce+0x150>)
   1ac3a:	f7fd ff5f 	bl	18afc <z_spin_lock_set_owner>
	return k;
   1ac3e:	e77b      	b.n	1ab38 <sys_clock_announce+0x48>
   1ac40:	2000d5bc 	.word	0x2000d5bc
   1ac44:	0001cad3 	.word	0x0001cad3
   1ac48:	0001c625 	.word	0x0001c625
   1ac4c:	2000cdb8 	.word	0x2000cdb8
   1ac50:	2000d5b8 	.word	0x2000d5b8
   1ac54:	2000c678 	.word	0x2000c678

0001ac58 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1ac58:	b570      	push	{r4, r5, r6, lr}
   1ac5a:	f04f 0320 	mov.w	r3, #32
   1ac5e:	f3ef 8611 	mrs	r6, BASEPRI
   1ac62:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac6a:	4816      	ldr	r0, [pc, #88]	; (1acc4 <sys_clock_tick_get+0x6c>)
   1ac6c:	f7fd ff2a 	bl	18ac4 <z_spin_lock_valid>
   1ac70:	b940      	cbnz	r0, 1ac84 <sys_clock_tick_get+0x2c>
   1ac72:	4915      	ldr	r1, [pc, #84]	; (1acc8 <sys_clock_tick_get+0x70>)
   1ac74:	4815      	ldr	r0, [pc, #84]	; (1accc <sys_clock_tick_get+0x74>)
   1ac76:	2281      	movs	r2, #129	; 0x81
   1ac78:	f000 f96c 	bl	1af54 <printk>
   1ac7c:	2181      	movs	r1, #129	; 0x81
   1ac7e:	4812      	ldr	r0, [pc, #72]	; (1acc8 <sys_clock_tick_get+0x70>)
   1ac80:	f000 fb4c 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ac84:	480f      	ldr	r0, [pc, #60]	; (1acc4 <sys_clock_tick_get+0x6c>)
   1ac86:	f7fd ff39 	bl	18afc <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1ac8a:	f7fa fa75 	bl	15178 <sys_clock_elapsed>
   1ac8e:	4b10      	ldr	r3, [pc, #64]	; (1acd0 <sys_clock_tick_get+0x78>)
   1ac90:	e9d3 4500 	ldrd	r4, r5, [r3]
   1ac94:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ac96:	480b      	ldr	r0, [pc, #44]	; (1acc4 <sys_clock_tick_get+0x6c>)
   1ac98:	f145 0500 	adc.w	r5, r5, #0
   1ac9c:	f7fd ff20 	bl	18ae0 <z_spin_unlock_valid>
   1aca0:	b940      	cbnz	r0, 1acb4 <sys_clock_tick_get+0x5c>
   1aca2:	4909      	ldr	r1, [pc, #36]	; (1acc8 <sys_clock_tick_get+0x70>)
   1aca4:	4809      	ldr	r0, [pc, #36]	; (1accc <sys_clock_tick_get+0x74>)
   1aca6:	22ac      	movs	r2, #172	; 0xac
   1aca8:	f000 f954 	bl	1af54 <printk>
   1acac:	21ac      	movs	r1, #172	; 0xac
   1acae:	4806      	ldr	r0, [pc, #24]	; (1acc8 <sys_clock_tick_get+0x70>)
   1acb0:	f000 fb34 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1acb4:	f386 8811 	msr	BASEPRI, r6
   1acb8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1acbc:	4620      	mov	r0, r4
   1acbe:	4629      	mov	r1, r5
   1acc0:	bd70      	pop	{r4, r5, r6, pc}
   1acc2:	bf00      	nop
   1acc4:	2000d5bc 	.word	0x2000d5bc
   1acc8:	0001cad3 	.word	0x0001cad3
   1accc:	0001c625 	.word	0x0001c625
   1acd0:	2000cdb8 	.word	0x2000cdb8

0001acd4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1acd6:	4604      	mov	r4, r0
	__asm__ volatile(
   1acd8:	f04f 0320 	mov.w	r3, #32
   1acdc:	f3ef 8511 	mrs	r5, BASEPRI
   1ace0:	f383 8812 	msr	BASEPRI_MAX, r3
   1ace4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ace8:	483f      	ldr	r0, [pc, #252]	; (1ade8 <z_timer_expiration_handler+0x114>)
   1acea:	f7fd feeb 	bl	18ac4 <z_spin_lock_valid>
   1acee:	b940      	cbnz	r0, 1ad02 <z_timer_expiration_handler+0x2e>
   1acf0:	493e      	ldr	r1, [pc, #248]	; (1adec <z_timer_expiration_handler+0x118>)
   1acf2:	483f      	ldr	r0, [pc, #252]	; (1adf0 <z_timer_expiration_handler+0x11c>)
   1acf4:	2281      	movs	r2, #129	; 0x81
   1acf6:	f000 f92d 	bl	1af54 <printk>
   1acfa:	2181      	movs	r1, #129	; 0x81
   1acfc:	483b      	ldr	r0, [pc, #236]	; (1adec <z_timer_expiration_handler+0x118>)
   1acfe:	f000 fb0d 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ad02:	4839      	ldr	r0, [pc, #228]	; (1ade8 <z_timer_expiration_handler+0x114>)
   1ad04:	f7fd fefa 	bl	18afc <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1ad08:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   1ad0c:	1c56      	adds	r6, r2, #1
   1ad0e:	f143 0700 	adc.w	r7, r3, #0
   1ad12:	2f00      	cmp	r7, #0
   1ad14:	bf08      	it	eq
   1ad16:	2e02      	cmpeq	r6, #2
   1ad18:	d303      	bcc.n	1ad22 <z_timer_expiration_handler+0x4e>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ad1a:	4620      	mov	r0, r4
   1ad1c:	4935      	ldr	r1, [pc, #212]	; (1adf4 <z_timer_expiration_handler+0x120>)
   1ad1e:	f7ff fd7d 	bl	1a81c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1ad22:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ad24:	3301      	adds	r3, #1
   1ad26:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1ad28:	6a23      	ldr	r3, [r4, #32]
   1ad2a:	b35b      	cbz	r3, 1ad84 <z_timer_expiration_handler+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ad2c:	482e      	ldr	r0, [pc, #184]	; (1ade8 <z_timer_expiration_handler+0x114>)
   1ad2e:	f7fd fed7 	bl	18ae0 <z_spin_unlock_valid>
   1ad32:	b940      	cbnz	r0, 1ad46 <z_timer_expiration_handler+0x72>
   1ad34:	492d      	ldr	r1, [pc, #180]	; (1adec <z_timer_expiration_handler+0x118>)
   1ad36:	482e      	ldr	r0, [pc, #184]	; (1adf0 <z_timer_expiration_handler+0x11c>)
   1ad38:	22ac      	movs	r2, #172	; 0xac
   1ad3a:	f000 f90b 	bl	1af54 <printk>
   1ad3e:	21ac      	movs	r1, #172	; 0xac
   1ad40:	482a      	ldr	r0, [pc, #168]	; (1adec <z_timer_expiration_handler+0x118>)
   1ad42:	f000 faeb 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1ad46:	f385 8811 	msr	BASEPRI, r5
   1ad4a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1ad4e:	4620      	mov	r0, r4
   1ad50:	6a23      	ldr	r3, [r4, #32]
   1ad52:	4798      	blx	r3
	__asm__ volatile(
   1ad54:	f04f 0320 	mov.w	r3, #32
   1ad58:	f3ef 8511 	mrs	r5, BASEPRI
   1ad5c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ad64:	4820      	ldr	r0, [pc, #128]	; (1ade8 <z_timer_expiration_handler+0x114>)
   1ad66:	f7fd fead 	bl	18ac4 <z_spin_lock_valid>
   1ad6a:	b940      	cbnz	r0, 1ad7e <z_timer_expiration_handler+0xaa>
   1ad6c:	491f      	ldr	r1, [pc, #124]	; (1adec <z_timer_expiration_handler+0x118>)
   1ad6e:	4820      	ldr	r0, [pc, #128]	; (1adf0 <z_timer_expiration_handler+0x11c>)
   1ad70:	2281      	movs	r2, #129	; 0x81
   1ad72:	f000 f8ef 	bl	1af54 <printk>
   1ad76:	2181      	movs	r1, #129	; 0x81
   1ad78:	481c      	ldr	r0, [pc, #112]	; (1adec <z_timer_expiration_handler+0x118>)
   1ad7a:	f000 facf 	bl	1b31c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ad7e:	481a      	ldr	r0, [pc, #104]	; (1ade8 <z_timer_expiration_handler+0x114>)
   1ad80:	f7fd febc 	bl	18afc <z_spin_lock_set_owner>
	return list->head == list;
   1ad84:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ad88:	42a6      	cmp	r6, r4
   1ad8a:	d000      	beq.n	1ad8e <z_timer_expiration_handler+0xba>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1ad8c:	b98e      	cbnz	r6, 1adb2 <z_timer_expiration_handler+0xde>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ad8e:	4816      	ldr	r0, [pc, #88]	; (1ade8 <z_timer_expiration_handler+0x114>)
   1ad90:	f7fd fea6 	bl	18ae0 <z_spin_unlock_valid>
   1ad94:	b940      	cbnz	r0, 1ada8 <z_timer_expiration_handler+0xd4>
   1ad96:	4915      	ldr	r1, [pc, #84]	; (1adec <z_timer_expiration_handler+0x118>)
   1ad98:	4815      	ldr	r0, [pc, #84]	; (1adf0 <z_timer_expiration_handler+0x11c>)
   1ad9a:	22ac      	movs	r2, #172	; 0xac
   1ad9c:	f000 f8da 	bl	1af54 <printk>
   1ada0:	21ac      	movs	r1, #172	; 0xac
   1ada2:	4812      	ldr	r0, [pc, #72]	; (1adec <z_timer_expiration_handler+0x118>)
   1ada4:	f000 faba 	bl	1b31c <assert_post_action>
	__asm__ volatile(
   1ada8:	f385 8811 	msr	BASEPRI, r5
   1adac:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1adb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   1adb2:	4630      	mov	r0, r6
   1adb4:	f7fe fcc6 	bl	19744 <z_unpend_thread_no_timeout>
   1adb8:	2300      	movs	r3, #0
   1adba:	480b      	ldr	r0, [pc, #44]	; (1ade8 <z_timer_expiration_handler+0x114>)
   1adbc:	67b3      	str	r3, [r6, #120]	; 0x78
   1adbe:	f7fd fe8f 	bl	18ae0 <z_spin_unlock_valid>
   1adc2:	b940      	cbnz	r0, 1add6 <z_timer_expiration_handler+0x102>
   1adc4:	4909      	ldr	r1, [pc, #36]	; (1adec <z_timer_expiration_handler+0x118>)
   1adc6:	480a      	ldr	r0, [pc, #40]	; (1adf0 <z_timer_expiration_handler+0x11c>)
   1adc8:	22ac      	movs	r2, #172	; 0xac
   1adca:	f000 f8c3 	bl	1af54 <printk>
   1adce:	21ac      	movs	r1, #172	; 0xac
   1add0:	4806      	ldr	r0, [pc, #24]	; (1adec <z_timer_expiration_handler+0x118>)
   1add2:	f000 faa3 	bl	1b31c <assert_post_action>
   1add6:	f385 8811 	msr	BASEPRI, r5
   1adda:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1adde:	4630      	mov	r0, r6
}
   1ade0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   1ade4:	f7fe bf1c 	b.w	19c20 <z_ready_thread>
   1ade8:	2000d5c0 	.word	0x2000d5c0
   1adec:	0001cad3 	.word	0x0001cad3
   1adf0:	0001c625 	.word	0x0001c625
   1adf4:	0001acd5 	.word	0x0001acd5

0001adf8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1adf8:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1adfc:	4619      	mov	r1, r3
   1adfe:	4606      	mov	r6, r0
   1ae00:	4610      	mov	r0, r2
   1ae02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1ae06:	1c4c      	adds	r4, r1, #1
   1ae08:	bf08      	it	eq
   1ae0a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1ae0e:	4680      	mov	r8, r0
   1ae10:	4689      	mov	r9, r1
   1ae12:	d04c      	beq.n	1aeae <z_impl_k_timer_start+0xb6>
   1ae14:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1ae16:	1c6b      	adds	r3, r5, #1
   1ae18:	bf08      	it	eq
   1ae1a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1ae1e:	4614      	mov	r4, r2
   1ae20:	d019      	beq.n	1ae56 <z_impl_k_timer_start+0x5e>
   1ae22:	ea54 0305 	orrs.w	r3, r4, r5
   1ae26:	d016      	beq.n	1ae56 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1ae28:	f06f 0301 	mvn.w	r3, #1
   1ae2c:	ebb3 0a02 	subs.w	sl, r3, r2
   1ae30:	f04f 33ff 	mov.w	r3, #4294967295
   1ae34:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1ae38:	f1ba 0f00 	cmp.w	sl, #0
   1ae3c:	f17b 0300 	sbcs.w	r3, fp, #0
   1ae40:	da09      	bge.n	1ae56 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1ae42:	f112 34ff 	adds.w	r4, r2, #4294967295
   1ae46:	f145 35ff 	adc.w	r5, r5, #4294967295
   1ae4a:	2c01      	cmp	r4, #1
   1ae4c:	f175 0300 	sbcs.w	r3, r5, #0
   1ae50:	bfbc      	itt	lt
   1ae52:	2401      	movlt	r4, #1
   1ae54:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1ae56:	f06f 0301 	mvn.w	r3, #1
   1ae5a:	1a1b      	subs	r3, r3, r0
   1ae5c:	9300      	str	r3, [sp, #0]
   1ae5e:	f04f 33ff 	mov.w	r3, #4294967295
   1ae62:	eb63 0301 	sbc.w	r3, r3, r1
   1ae66:	9301      	str	r3, [sp, #4]
   1ae68:	e9dd 2300 	ldrd	r2, r3, [sp]
   1ae6c:	2a00      	cmp	r2, #0
   1ae6e:	f173 0300 	sbcs.w	r3, r3, #0
   1ae72:	da0c      	bge.n	1ae8e <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1ae74:	f110 38ff 	adds.w	r8, r0, #4294967295
   1ae78:	f141 39ff 	adc.w	r9, r1, #4294967295
   1ae7c:	f1b8 0f00 	cmp.w	r8, #0
   1ae80:	f179 0300 	sbcs.w	r3, r9, #0
   1ae84:	bfbc      	itt	lt
   1ae86:	f04f 0800 	movlt.w	r8, #0
   1ae8a:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1ae8e:	4630      	mov	r0, r6
   1ae90:	f7ff fd7e 	bl	1a990 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1ae94:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ae96:	4642      	mov	r2, r8
	timer->status = 0U;
   1ae98:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ae9a:	4630      	mov	r0, r6
   1ae9c:	464b      	mov	r3, r9
   1ae9e:	4905      	ldr	r1, [pc, #20]	; (1aeb4 <z_impl_k_timer_start+0xbc>)
	timer->period = period;
   1aea0:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1aea4:	b002      	add	sp, #8
   1aea6:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1aeaa:	f7ff bcb7 	b.w	1a81c <z_add_timeout>
}
   1aeae:	b002      	add	sp, #8
   1aeb0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1aeb4:	0001acd5 	.word	0x0001acd5

0001aeb8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1aeb8:	4a02      	ldr	r2, [pc, #8]	; (1aec4 <boot_banner+0xc>)
   1aeba:	4903      	ldr	r1, [pc, #12]	; (1aec8 <boot_banner+0x10>)
   1aebc:	4803      	ldr	r0, [pc, #12]	; (1aecc <boot_banner+0x14>)
   1aebe:	f000 b849 	b.w	1af54 <printk>
   1aec2:	bf00      	nop
   1aec4:	0001d5a4 	.word	0x0001d5a4
   1aec8:	0001d9c7 	.word	0x0001d9c7
   1aecc:	0001d9d6 	.word	0x0001d9d6

0001aed0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1aed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1aed2:	2400      	movs	r4, #0
   1aed4:	4b08      	ldr	r3, [pc, #32]	; (1aef8 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1aed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
   1aeda:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   1aedc:	ab02      	add	r3, sp, #8
   1aede:	9300      	str	r3, [sp, #0]
   1aee0:	4906      	ldr	r1, [pc, #24]	; (1aefc <k_sys_work_q_init+0x2c>)
   1aee2:	f04f 33ff 	mov.w	r3, #4294967295
   1aee6:	4806      	ldr	r0, [pc, #24]	; (1af00 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1aee8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1aeec:	f7fe fa5a 	bl	193a4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1aef0:	4620      	mov	r0, r4
   1aef2:	b004      	add	sp, #16
   1aef4:	bd10      	pop	{r4, pc}
   1aef6:	bf00      	nop
   1aef8:	0001d9fd 	.word	0x0001d9fd
   1aefc:	2000f868 	.word	0x2000f868
   1af00:	2000cdc0 	.word	0x2000cdc0

0001af04 <event_cb_dummy>:
static void event_cb_dummy(cmd_event_t* p_event) {;}
   1af04:	4770      	bx	lr

0001af06 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
   1af06:	440a      	add	r2, r1
   1af08:	428a      	cmp	r2, r1
   1af0a:	d100      	bne.n	1af0e <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
   1af0c:	4770      	bx	lr
		seed ^= *src++;
   1af0e:	f811 3b01 	ldrb.w	r3, [r1], #1
   1af12:	ba40      	rev16	r0, r0
   1af14:	b280      	uxth	r0, r0
   1af16:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
   1af18:	f3c0 1303 	ubfx	r3, r0, #4, #4
   1af1c:	4058      	eors	r0, r3
		seed ^= seed << 12U;
   1af1e:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
   1af22:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
   1af24:	0158      	lsls	r0, r3, #5
   1af26:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
   1af2a:	4058      	eors	r0, r3
	for (; len > 0; len--) {
   1af2c:	e7ec      	b.n	1af08 <crc16_itu_t+0x2>

0001af2e <sys_notify_validate>:
	if (notify == NULL) {
   1af2e:	4603      	mov	r3, r0
   1af30:	b158      	cbz	r0, 1af4a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1af32:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1af34:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1af38:	2a01      	cmp	r2, #1
   1af3a:	d003      	beq.n	1af44 <sys_notify_validate+0x16>
   1af3c:	2a03      	cmp	r2, #3
   1af3e:	d104      	bne.n	1af4a <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
   1af40:	6802      	ldr	r2, [r0, #0]
   1af42:	b112      	cbz	r2, 1af4a <sys_notify_validate+0x1c>
		notify->result = 0;
   1af44:	2000      	movs	r0, #0
   1af46:	6098      	str	r0, [r3, #8]
   1af48:	4770      	bx	lr
		return -EINVAL;
   1af4a:	f06f 0015 	mvn.w	r0, #21
}
   1af4e:	4770      	bx	lr

0001af50 <arch_printk_char_out>:
}
   1af50:	2000      	movs	r0, #0
   1af52:	4770      	bx	lr

0001af54 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   1af54:	b40f      	push	{r0, r1, r2, r3}
   1af56:	b507      	push	{r0, r1, r2, lr}
   1af58:	a904      	add	r1, sp, #16
   1af5a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1af5e:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   1af60:	f000 fa09 	bl	1b376 <z_log_printk>
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
	}
	va_end(ap);
}
   1af64:	b003      	add	sp, #12
   1af66:	f85d eb04 	ldr.w	lr, [sp], #4
   1af6a:	b004      	add	sp, #16
   1af6c:	4770      	bx	lr

0001af6e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1af6e:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1af70:	f013 0307 	ands.w	r3, r3, #7
   1af74:	d105      	bne.n	1af82 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1af76:	6803      	ldr	r3, [r0, #0]
   1af78:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1af7a:	bf0c      	ite	eq
   1af7c:	2000      	moveq	r0, #0
   1af7e:	2003      	movne	r0, #3
   1af80:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1af82:	2b02      	cmp	r3, #2
   1af84:	d105      	bne.n	1af92 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1af86:	8bc3      	ldrh	r3, [r0, #30]
   1af88:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1af8a:	bf14      	ite	ne
   1af8c:	2000      	movne	r0, #0
   1af8e:	2004      	moveq	r0, #4
   1af90:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1af92:	2b01      	cmp	r3, #1
   1af94:	d105      	bne.n	1afa2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1af96:	6803      	ldr	r3, [r0, #0]
   1af98:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1af9a:	bf0c      	ite	eq
   1af9c:	2000      	moveq	r0, #0
   1af9e:	2005      	movne	r0, #5
   1afa0:	4770      	bx	lr
	int evt = EVT_NOP;
   1afa2:	2000      	movs	r0, #0
}
   1afa4:	4770      	bx	lr

0001afa6 <notify_one>:
{
   1afa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afaa:	460d      	mov	r5, r1
   1afac:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1afae:	4619      	mov	r1, r3
   1afb0:	1d28      	adds	r0, r5, #4
{
   1afb2:	4690      	mov	r8, r2
   1afb4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1afb6:	f7f6 faaf 	bl	11518 <sys_notify_finalize>
	if (cb) {
   1afba:	4604      	mov	r4, r0
   1afbc:	b138      	cbz	r0, 1afce <notify_one+0x28>
		cb(mgr, cli, state, res);
   1afbe:	4633      	mov	r3, r6
   1afc0:	4642      	mov	r2, r8
   1afc2:	4629      	mov	r1, r5
   1afc4:	4638      	mov	r0, r7
   1afc6:	46a4      	mov	ip, r4
}
   1afc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1afcc:	4760      	bx	ip
}
   1afce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001afd2 <validate_args>:
{
   1afd2:	b510      	push	{r4, lr}
   1afd4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1afd6:	b140      	cbz	r0, 1afea <validate_args+0x18>
   1afd8:	b139      	cbz	r1, 1afea <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1afda:	1d08      	adds	r0, r1, #4
   1afdc:	f7ff ffa7 	bl	1af2e <sys_notify_validate>
	if ((rv == 0)
   1afe0:	b928      	cbnz	r0, 1afee <validate_args+0x1c>
	    && ((cli->notify.flags
   1afe2:	68a3      	ldr	r3, [r4, #8]
   1afe4:	f033 0303 	bics.w	r3, r3, #3
   1afe8:	d001      	beq.n	1afee <validate_args+0x1c>
		rv = -EINVAL;
   1afea:	f06f 0015 	mvn.w	r0, #21
}
   1afee:	bd10      	pop	{r4, pc}

0001aff0 <onoff_manager_init>:
{
   1aff0:	b538      	push	{r3, r4, r5, lr}
   1aff2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1aff4:	4605      	mov	r5, r0
   1aff6:	b158      	cbz	r0, 1b010 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1aff8:	b151      	cbz	r1, 1b010 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1affa:	680b      	ldr	r3, [r1, #0]
   1affc:	b143      	cbz	r3, 1b010 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1affe:	684b      	ldr	r3, [r1, #4]
   1b000:	b133      	cbz	r3, 1b010 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1b002:	2220      	movs	r2, #32
   1b004:	2100      	movs	r1, #0
   1b006:	f000 fa85 	bl	1b514 <memset>
	return 0;
   1b00a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1b00c:	612c      	str	r4, [r5, #16]
}
   1b00e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b010:	f06f 0015 	mvn.w	r0, #21
   1b014:	e7fb      	b.n	1b00e <onoff_manager_init+0x1e>

0001b016 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1b016:	4604      	mov	r4, r0
   1b018:	b508      	push	{r3, lr}
   1b01a:	4608      	mov	r0, r1
   1b01c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1b01e:	461a      	mov	r2, r3
   1b020:	47a0      	blx	r4
	return z_impl_z_current_get();
   1b022:	f7ff fa8f 	bl	1a544 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1b026:	f7f8 fac5 	bl	135b4 <z_impl_k_thread_abort>

0001b02a <chunk_size>:
		return ((uint16_t *)cmem)[f];
   1b02a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1b02e:	8840      	ldrh	r0, [r0, #2]
}
   1b030:	0840      	lsrs	r0, r0, #1
   1b032:	4770      	bx	lr

0001b034 <free_list_add>:
{
   1b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b036:	4603      	mov	r3, r0
   1b038:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   1b03a:	f7ff fff6 	bl	1b02a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1b03e:	fab0 f080 	clz	r0, r0
   1b042:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1b046:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1b04a:	f8dc 6010 	ldr.w	r6, [ip, #16]
   1b04e:	00ca      	lsls	r2, r1, #3
   1b050:	1d17      	adds	r7, r2, #4
   1b052:	b28d      	uxth	r5, r1
   1b054:	3206      	adds	r2, #6
   1b056:	b956      	cbnz	r6, 1b06e <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1b058:	2101      	movs	r1, #1
   1b05a:	fa01 f000 	lsl.w	r0, r1, r0
   1b05e:	68d9      	ldr	r1, [r3, #12]
   1b060:	4301      	orrs	r1, r0
   1b062:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1b064:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1b068:	53dd      	strh	r5, [r3, r7]
   1b06a:	529d      	strh	r5, [r3, r2]
}
   1b06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1b06e:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1b070:	3104      	adds	r1, #4
   1b072:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1b074:	53d8      	strh	r0, [r3, r7]
   1b076:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1b07a:	529e      	strh	r6, [r3, r2]
   1b07c:	80c5      	strh	r5, [r0, #6]
   1b07e:	525d      	strh	r5, [r3, r1]
   1b080:	e7f4      	b.n	1b06c <free_list_add+0x38>

0001b082 <free_list_remove_bidx>:
{
   1b082:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1b084:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1b088:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1b08a:	4299      	cmp	r1, r3
   1b08c:	f102 0104 	add.w	r1, r2, #4
   1b090:	d10a      	bne.n	1b0a8 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1b092:	2301      	movs	r3, #1
   1b094:	fa03 f202 	lsl.w	r2, r3, r2
   1b098:	68c3      	ldr	r3, [r0, #12]
   1b09a:	ea23 0302 	bic.w	r3, r3, r2
   1b09e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1b0a0:	2300      	movs	r3, #0
   1b0a2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1b0a6:	bd10      	pop	{r4, pc}
   1b0a8:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1b0aa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1b0ae:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1b0b2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1b0b6:	80cb      	strh	r3, [r1, #6]
   1b0b8:	8082      	strh	r2, [r0, #4]
}
   1b0ba:	e7f4      	b.n	1b0a6 <free_list_remove_bidx+0x24>

0001b0bc <free_list_remove>:
{
   1b0bc:	b510      	push	{r4, lr}
   1b0be:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1b0c0:	f7ff ffb3 	bl	1b02a <chunk_size>
}
   1b0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return 31 - __builtin_clz(usable_sz);
   1b0c8:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1b0cc:	4618      	mov	r0, r3
   1b0ce:	f1c2 021f 	rsb	r2, r2, #31
   1b0d2:	f7ff bfd6 	b.w	1b082 <free_list_remove_bidx>

0001b0d6 <alloc_chunk>:
{
   1b0d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b0da:	fab1 f581 	clz	r5, r1
   1b0de:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   1b0e2:	eb00 0789 	add.w	r7, r0, r9, lsl #2
   1b0e6:	693a      	ldr	r2, [r7, #16]
{
   1b0e8:	4603      	mov	r3, r0
   1b0ea:	460e      	mov	r6, r1
	if (b->next) {
   1b0ec:	b1ca      	cbz	r2, 1b122 <alloc_chunk+0x4c>
   1b0ee:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   1b0f2:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1b0f4:	4618      	mov	r0, r3
   1b0f6:	4621      	mov	r1, r4
   1b0f8:	f7ff ff97 	bl	1b02a <chunk_size>
   1b0fc:	42b0      	cmp	r0, r6
   1b0fe:	d307      	bcc.n	1b110 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1b100:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   1b102:	4621      	mov	r1, r4
   1b104:	4618      	mov	r0, r3
   1b106:	f7ff ffbc 	bl	1b082 <free_list_remove_bidx>
}
   1b10a:	4620      	mov	r0, r4
   1b10c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1b110:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1b114:	88e1      	ldrh	r1, [r4, #6]
		} while (--i && b->next != first);
   1b116:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   1b11a:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   1b11c:	d001      	beq.n	1b122 <alloc_chunk+0x4c>
   1b11e:	428a      	cmp	r2, r1
   1b120:	d1e7      	bne.n	1b0f2 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1b122:	f04f 34ff 	mov.w	r4, #4294967295
   1b126:	68d9      	ldr	r1, [r3, #12]
   1b128:	f1c5 0520 	rsb	r5, r5, #32
   1b12c:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   1b12e:	400c      	ands	r4, r1
   1b130:	d0eb      	beq.n	1b10a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1b132:	fa94 f2a4 	rbit	r2, r4
   1b136:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1b13a:	1d11      	adds	r1, r2, #4
   1b13c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   1b140:	e7df      	b.n	1b102 <alloc_chunk+0x2c>

0001b142 <merge_chunks>:
{
   1b142:	b538      	push	{r3, r4, r5, lr}
   1b144:	4603      	mov	r3, r0
   1b146:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1b148:	f7ff ff6f 	bl	1b02a <chunk_size>
   1b14c:	4611      	mov	r1, r2
   1b14e:	4604      	mov	r4, r0
   1b150:	4618      	mov	r0, r3
   1b152:	f7ff ff6a 	bl	1b02a <chunk_size>
   1b156:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   1b158:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b15c:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   1b15e:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   1b160:	4618      	mov	r0, r3
   1b162:	4611      	mov	r1, r2
   1b164:	f7ff ff61 	bl	1b02a <chunk_size>
	void *cmem = &buf[c];
   1b168:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1b16a:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   1b16e:	bd38      	pop	{r3, r4, r5, pc}

0001b170 <split_chunks>:
{
   1b170:	b538      	push	{r3, r4, r5, lr}
   1b172:	4603      	mov	r3, r0
   1b174:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1b176:	f7ff ff58 	bl	1b02a <chunk_size>
	chunksz_t lsz = rc - lc;
   1b17a:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1b17c:	1aa5      	subs	r5, r4, r2
   1b17e:	4405      	add	r5, r0
   1b180:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b184:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1b186:	8060      	strh	r0, [r4, #2]
   1b188:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b18c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1b18e:	8044      	strh	r4, [r0, #2]
   1b190:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1b194:	4618      	mov	r0, r3
   1b196:	4611      	mov	r1, r2
   1b198:	f7ff ff47 	bl	1b02a <chunk_size>
	void *cmem = &buf[c];
   1b19c:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1b19e:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   1b1a2:	bd38      	pop	{r3, r4, r5, pc}

0001b1a4 <free_chunk>:
{
   1b1a4:	b538      	push	{r3, r4, r5, lr}
   1b1a6:	4605      	mov	r5, r0
   1b1a8:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   1b1aa:	f7ff ff3e 	bl	1b02a <chunk_size>
   1b1ae:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1b1b0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1b1b4:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1b1b6:	07da      	lsls	r2, r3, #31
   1b1b8:	d40a      	bmi.n	1b1d0 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1b1ba:	4628      	mov	r0, r5
   1b1bc:	f7ff ff7e 	bl	1b0bc <free_list_remove>
	return c + chunk_size(h, c);
   1b1c0:	4621      	mov	r1, r4
   1b1c2:	4628      	mov	r0, r5
   1b1c4:	f7ff ff31 	bl	1b02a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1b1c8:	1822      	adds	r2, r4, r0
   1b1ca:	4628      	mov	r0, r5
   1b1cc:	f7ff ffb9 	bl	1b142 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1b1d0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1b1d4:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1b1d6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1b1da:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1b1dc:	07db      	lsls	r3, r3, #31
   1b1de:	d40c      	bmi.n	1b1fa <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1b1e0:	4628      	mov	r0, r5
   1b1e2:	f7ff ff6b 	bl	1b0bc <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1b1e6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1b1ea:	4622      	mov	r2, r4
   1b1ec:	1a61      	subs	r1, r4, r1
   1b1ee:	4628      	mov	r0, r5
   1b1f0:	f7ff ffa7 	bl	1b142 <merge_chunks>
   1b1f4:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1b1f8:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1b1fa:	4621      	mov	r1, r4
   1b1fc:	4628      	mov	r0, r5
}
   1b1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1b202:	f7ff bf17 	b.w	1b034 <free_list_add>

0001b206 <sys_heap_alloc>:
{
   1b206:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1b208:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1b20a:	b909      	cbnz	r1, 1b210 <sys_heap_alloc+0xa>
		return NULL;
   1b20c:	2000      	movs	r0, #0
}
   1b20e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1b210:	68ab      	ldr	r3, [r5, #8]
   1b212:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1b216:	d9f9      	bls.n	1b20c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b218:	310b      	adds	r1, #11
   1b21a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1b21c:	4621      	mov	r1, r4
   1b21e:	4628      	mov	r0, r5
   1b220:	f7ff ff59 	bl	1b0d6 <alloc_chunk>
	if (c == 0U) {
   1b224:	4606      	mov	r6, r0
   1b226:	2800      	cmp	r0, #0
   1b228:	d0f0      	beq.n	1b20c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1b22a:	4601      	mov	r1, r0
   1b22c:	4628      	mov	r0, r5
   1b22e:	f7ff fefc 	bl	1b02a <chunk_size>
   1b232:	42a0      	cmp	r0, r4
   1b234:	d908      	bls.n	1b248 <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   1b236:	4434      	add	r4, r6
   1b238:	4628      	mov	r0, r5
   1b23a:	4622      	mov	r2, r4
   1b23c:	f7ff ff98 	bl	1b170 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1b240:	4621      	mov	r1, r4
   1b242:	4628      	mov	r0, r5
   1b244:	f7ff fef6 	bl	1b034 <free_list_add>
	void *cmem = &buf[c];
   1b248:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1b24c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b24e:	8853      	ldrh	r3, [r2, #2]
   1b250:	3004      	adds	r0, #4
   1b252:	f043 0301 	orr.w	r3, r3, #1
   1b256:	8053      	strh	r3, [r2, #2]
	return chunk_mem(h, c);
   1b258:	e7d9      	b.n	1b20e <sys_heap_alloc+0x8>

0001b25a <encode_uint>:
{
   1b25a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b25e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1b260:	78d3      	ldrb	r3, [r2, #3]
{
   1b262:	4614      	mov	r4, r2
	switch (specifier) {
   1b264:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1b266:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1b26a:	4606      	mov	r6, r0
   1b26c:	460f      	mov	r7, r1
   1b26e:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1b270:	d02d      	beq.n	1b2ce <encode_uint+0x74>
   1b272:	d828      	bhi.n	1b2c6 <encode_uint+0x6c>
		return 16;
   1b274:	2b58      	cmp	r3, #88	; 0x58
   1b276:	bf14      	ite	ne
   1b278:	250a      	movne	r5, #10
   1b27a:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   1b27c:	46aa      	mov	sl, r5
   1b27e:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   1b282:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1b286:	4652      	mov	r2, sl
   1b288:	465b      	mov	r3, fp
   1b28a:	4630      	mov	r0, r6
   1b28c:	4639      	mov	r1, r7
   1b28e:	f7f4 ffd5 	bl	1023c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b292:	2a09      	cmp	r2, #9
   1b294:	b2d3      	uxtb	r3, r2
   1b296:	d81f      	bhi.n	1b2d8 <encode_uint+0x7e>
   1b298:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1b29a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b29c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1b29e:	bf08      	it	eq
   1b2a0:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b2a2:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1b2a6:	d301      	bcc.n	1b2ac <encode_uint+0x52>
   1b2a8:	45c8      	cmp	r8, r9
   1b2aa:	d812      	bhi.n	1b2d2 <encode_uint+0x78>
	if (conv->flag_hash) {
   1b2ac:	7823      	ldrb	r3, [r4, #0]
   1b2ae:	069b      	lsls	r3, r3, #26
   1b2b0:	d505      	bpl.n	1b2be <encode_uint+0x64>
		if (radix == 8) {
   1b2b2:	2d08      	cmp	r5, #8
   1b2b4:	d116      	bne.n	1b2e4 <encode_uint+0x8a>
			conv->altform_0 = true;
   1b2b6:	78a3      	ldrb	r3, [r4, #2]
   1b2b8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1b2bc:	70a3      	strb	r3, [r4, #2]
}
   1b2be:	4640      	mov	r0, r8
   1b2c0:	b003      	add	sp, #12
   1b2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1b2c6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1b2ca:	2b70      	cmp	r3, #112	; 0x70
   1b2cc:	e7d3      	b.n	1b276 <encode_uint+0x1c>
	switch (specifier) {
   1b2ce:	2508      	movs	r5, #8
   1b2d0:	e7d4      	b.n	1b27c <encode_uint+0x22>
		value /= radix;
   1b2d2:	4606      	mov	r6, r0
   1b2d4:	460f      	mov	r7, r1
   1b2d6:	e7d6      	b.n	1b286 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b2d8:	9a01      	ldr	r2, [sp, #4]
   1b2da:	2a19      	cmp	r2, #25
   1b2dc:	bf94      	ite	ls
   1b2de:	3337      	addls	r3, #55	; 0x37
   1b2e0:	3357      	addhi	r3, #87	; 0x57
   1b2e2:	e7da      	b.n	1b29a <encode_uint+0x40>
		} else if (radix == 16) {
   1b2e4:	2d10      	cmp	r5, #16
   1b2e6:	d1ea      	bne.n	1b2be <encode_uint+0x64>
			conv->altform_0c = true;
   1b2e8:	78a3      	ldrb	r3, [r4, #2]
   1b2ea:	f043 0310 	orr.w	r3, r3, #16
   1b2ee:	e7e5      	b.n	1b2bc <encode_uint+0x62>

0001b2f0 <outs>:
{
   1b2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b2f4:	4607      	mov	r7, r0
   1b2f6:	4688      	mov	r8, r1
   1b2f8:	4615      	mov	r5, r2
   1b2fa:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1b2fc:	4614      	mov	r4, r2
   1b2fe:	42b4      	cmp	r4, r6
   1b300:	eba4 0005 	sub.w	r0, r4, r5
   1b304:	d302      	bcc.n	1b30c <outs+0x1c>
   1b306:	b93e      	cbnz	r6, 1b318 <outs+0x28>
   1b308:	7823      	ldrb	r3, [r4, #0]
   1b30a:	b12b      	cbz	r3, 1b318 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1b30c:	4641      	mov	r1, r8
   1b30e:	f814 0b01 	ldrb.w	r0, [r4], #1
   1b312:	47b8      	blx	r7
		if (rc < 0) {
   1b314:	2800      	cmp	r0, #0
   1b316:	daf2      	bge.n	1b2fe <outs+0xe>
}
   1b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b31c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1b31c:	4040      	eors	r0, r0
   1b31e:	f380 8811 	msr	BASEPRI, r0
   1b322:	f04f 0004 	mov.w	r0, #4
   1b326:	df02      	svc	2
}
   1b328:	4770      	bx	lr

0001b32a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1b32a:	4770      	bx	lr

0001b32c <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1b32c:	b084      	sub	sp, #16
   1b32e:	ab04      	add	r3, sp, #16
   1b330:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1b334:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1b338:	2b06      	cmp	r3, #6
   1b33a:	d108      	bne.n	1b34e <pm_power_state_set+0x22>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1b33c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1b340:	2201      	movs	r2, #1
   1b342:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1b346:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   1b34a:	bf20      	wfe
    while (true)
   1b34c:	e7fd      	b.n	1b34a <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1b34e:	b004      	add	sp, #16
   1b350:	4770      	bx	lr

0001b352 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1b352:	b084      	sub	sp, #16
   1b354:	ab04      	add	r3, sp, #16
   1b356:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1b35a:	2300      	movs	r3, #0
   1b35c:	f383 8811 	msr	BASEPRI, r3
   1b360:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1b364:	b004      	add	sp, #16
   1b366:	4770      	bx	lr

0001b368 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1b368:	6843      	ldr	r3, [r0, #4]
}
   1b36a:	7958      	ldrb	r0, [r3, #5]
   1b36c:	4770      	bx	lr

0001b36e <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1b36e:	f000 bb97 	b.w	1baa0 <sys_clock_cycle_get_32>

0001b372 <dummy_timestamp>:
   1b372:	2000      	movs	r0, #0
   1b374:	4770      	bx	lr

0001b376 <z_log_printk>:
			log_generic(src_level_union.structure, fmt, ap,
   1b376:	2300      	movs	r3, #0
{
   1b378:	460a      	mov	r2, r1
			log_generic(src_level_union.structure, fmt, ap,
   1b37a:	4601      	mov	r1, r0
   1b37c:	4618      	mov	r0, r3
   1b37e:	f7f7 b861 	b.w	12444 <log_generic>

0001b382 <log_string_sync>:
{
   1b382:	b40e      	push	{r1, r2, r3}
   1b384:	b503      	push	{r0, r1, lr}
   1b386:	aa03      	add	r2, sp, #12
   1b388:	f852 1b04 	ldr.w	r1, [r2], #4
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   1b38c:	2300      	movs	r3, #0
	va_start(ap, fmt);
   1b38e:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   1b390:	f7f7 f858 	bl	12444 <log_generic>
}
   1b394:	b002      	add	sp, #8
   1b396:	f85d eb04 	ldr.w	lr, [sp], #4
   1b39a:	b003      	add	sp, #12
   1b39c:	4770      	bx	lr

0001b39e <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1b39e:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   1b3a0:	f7f7 f8c4 	bl	1252c <log_init>
	}

	return 0;
}
   1b3a4:	2000      	movs	r0, #0
   1b3a6:	bd08      	pop	{r3, pc}

0001b3a8 <z_log_strdup>:
}
   1b3a8:	4770      	bx	lr

0001b3aa <z_log_get_tag>:
}
   1b3aa:	2000      	movs	r0, #0
   1b3ac:	4770      	bx	lr

0001b3ae <out_func>:
{
   1b3ae:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   1b3b0:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   1b3b4:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   1b3b6:	2101      	movs	r1, #1
   1b3b8:	6852      	ldr	r2, [r2, #4]
   1b3ba:	a801      	add	r0, sp, #4
   1b3bc:	4798      	blx	r3
}
   1b3be:	2000      	movs	r0, #0
   1b3c0:	b003      	add	sp, #12
   1b3c2:	f85d fb04 	ldr.w	pc, [sp], #4

0001b3c6 <buffer_write>:
{
   1b3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3c8:	4606      	mov	r6, r0
   1b3ca:	460d      	mov	r5, r1
   1b3cc:	4614      	mov	r4, r2
   1b3ce:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1b3d0:	4621      	mov	r1, r4
   1b3d2:	4628      	mov	r0, r5
   1b3d4:	463a      	mov	r2, r7
   1b3d6:	47b0      	blx	r6
	} while (len != 0);
   1b3d8:	1a24      	subs	r4, r4, r0
		buf += processed;
   1b3da:	4405      	add	r5, r0
	} while (len != 0);
   1b3dc:	d1f8      	bne.n	1b3d0 <buffer_write+0xa>
}
   1b3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b3e0 <log_output_flush>:
		     output->control_block->offset,
   1b3e0:	6842      	ldr	r2, [r0, #4]
{
   1b3e2:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   1b3e4:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1b3e8:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1b3ea:	6881      	ldr	r1, [r0, #8]
   1b3ec:	6800      	ldr	r0, [r0, #0]
   1b3ee:	f7ff ffea 	bl	1b3c6 <buffer_write>
	output->control_block->offset = 0;
   1b3f2:	2200      	movs	r2, #0
   1b3f4:	6863      	ldr	r3, [r4, #4]
   1b3f6:	601a      	str	r2, [r3, #0]
}
   1b3f8:	bd10      	pop	{r4, pc}

0001b3fa <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1b3fa:	2200      	movs	r2, #0
   1b3fc:	e9c0 2200 	strd	r2, r2, [r0]
   1b400:	6082      	str	r2, [r0, #8]
}
   1b402:	4770      	bx	lr

0001b404 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   1b404:	b510      	push	{r4, lr}
   1b406:	b40f      	push	{r0, r1, r2, r3}
   1b408:	f7f7 fc74 	bl	12cf4 <before_nse>
   1b40c:	bc0f      	pop	{r0, r1, r2, r3}
   1b40e:	f7f4 fdeb 	bl	ffe8 <spm_request_random_number_nse>
   1b412:	b40f      	push	{r0, r1, r2, r3}
   1b414:	f7f7 fc78 	bl	12d08 <after_nse>
   1b418:	bc0f      	pop	{r0, r1, r2, r3}
   1b41a:	bd10      	pop	{r4, pc}

0001b41c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1b41c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1b41e:	6800      	ldr	r0, [r0, #0]
   1b420:	f7f7 bc9a 	b.w	12d58 <z_arm_fatal_error>

0001b424 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1b424:	2100      	movs	r1, #0
   1b426:	2001      	movs	r0, #1
   1b428:	f7f7 bc96 	b.w	12d58 <z_arm_fatal_error>

0001b42c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1b42c:	b508      	push	{r3, lr}
	handler();
   1b42e:	f7f7 fd31 	bl	12e94 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1b432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1b436:	f7f7 bdfb 	b.w	13030 <z_arm_exc_exit>

0001b43a <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1b43a:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1b43c:	f383 880b 	msr	PSPLIM, r3
}
   1b440:	4770      	bx	lr

0001b442 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1b442:	4770      	bx	lr

0001b444 <z_arm_restore_fp_context>:
   1b444:	4770      	bx	lr

0001b446 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1b446:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1b44a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1b44e:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1b450:	bf08      	it	eq
   1b452:	f06f 0015 	mvneq.w	r0, #21
   1b456:	4770      	bx	lr

0001b458 <mpu_configure_region>:
{
   1b458:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   1b45a:	890a      	ldrh	r2, [r1, #8]
   1b45c:	7a8e      	ldrb	r6, [r1, #10]
	region_conf.base = new_region->start;
   1b45e:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1b460:	684d      	ldr	r5, [r1, #4]
   1b462:	f002 021f 	and.w	r2, r2, #31
   1b466:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   1b46a:	9300      	str	r3, [sp, #0]
   1b46c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b470:	f023 031f 	bic.w	r3, r3, #31
   1b474:	1e6a      	subs	r2, r5, #1
   1b476:	4413      	add	r3, r2
   1b478:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1b47c:	280f      	cmp	r0, #15
   1b47e:	9303      	str	r3, [sp, #12]
   1b480:	d903      	bls.n	1b48a <mpu_configure_region+0x32>
   1b482:	f7f8 f8dd 	bl	13640 <region_allocate_and_init.part.0>
}
   1b486:	b004      	add	sp, #16
   1b488:	bd70      	pop	{r4, r5, r6, pc}
	region_init(index, region_conf);
   1b48a:	4669      	mov	r1, sp
   1b48c:	f7f8 f8c0 	bl	13610 <region_init>
	return region_allocate_and_init(index,
   1b490:	e7f9      	b.n	1b486 <mpu_configure_region+0x2e>

0001b492 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1b492:	4603      	mov	r3, r0
   1b494:	3901      	subs	r1, #1
   1b496:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1b49a:	b90a      	cbnz	r2, 1b4a0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1b49c:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1b49e:	4770      	bx	lr
		*d = *s;
   1b4a0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1b4a4:	e7f7      	b.n	1b496 <strcpy+0x4>

0001b4a6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1b4a6:	4603      	mov	r3, r0
	size_t n = 0;
   1b4a8:	2000      	movs	r0, #0

	while (*s != '\0') {
   1b4aa:	5c1a      	ldrb	r2, [r3, r0]
   1b4ac:	b902      	cbnz	r2, 1b4b0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1b4ae:	4770      	bx	lr
		n++;
   1b4b0:	3001      	adds	r0, #1
   1b4b2:	e7fa      	b.n	1b4aa <strlen+0x4>

0001b4b4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1b4b4:	4603      	mov	r3, r0
	size_t n = 0;
   1b4b6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1b4b8:	5c1a      	ldrb	r2, [r3, r0]
   1b4ba:	b10a      	cbz	r2, 1b4c0 <strnlen+0xc>
   1b4bc:	4288      	cmp	r0, r1
   1b4be:	d100      	bne.n	1b4c2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1b4c0:	4770      	bx	lr
		n++;
   1b4c2:	3001      	adds	r0, #1
   1b4c4:	e7f8      	b.n	1b4b8 <strnlen+0x4>

0001b4c6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1b4c6:	1e43      	subs	r3, r0, #1
   1b4c8:	3901      	subs	r1, #1
   1b4ca:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b4ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1b4d2:	4282      	cmp	r2, r0
   1b4d4:	d101      	bne.n	1b4da <strcmp+0x14>
   1b4d6:	2a00      	cmp	r2, #0
   1b4d8:	d1f7      	bne.n	1b4ca <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1b4da:	1a10      	subs	r0, r2, r0
   1b4dc:	4770      	bx	lr

0001b4de <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1b4de:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1b4e0:	b15a      	cbz	r2, 1b4fa <memcmp+0x1c>
   1b4e2:	3901      	subs	r1, #1
   1b4e4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1b4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
   1b4ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1b4ee:	42a0      	cmp	r0, r4
   1b4f0:	d001      	beq.n	1b4f6 <memcmp+0x18>
   1b4f2:	429a      	cmp	r2, r3
   1b4f4:	d0f7      	beq.n	1b4e6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1b4f6:	1ad0      	subs	r0, r2, r3
}
   1b4f8:	bd10      	pop	{r4, pc}
		return 0;
   1b4fa:	4610      	mov	r0, r2
   1b4fc:	e7fc      	b.n	1b4f8 <memcmp+0x1a>

0001b4fe <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1b4fe:	b510      	push	{r4, lr}
   1b500:	1e43      	subs	r3, r0, #1
   1b502:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1b504:	4291      	cmp	r1, r2
   1b506:	d100      	bne.n	1b50a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1b508:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1b50a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b50e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1b512:	e7f7      	b.n	1b504 <memcpy+0x6>

0001b514 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1b514:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   1b516:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1b518:	4402      	add	r2, r0
   1b51a:	4293      	cmp	r3, r2
   1b51c:	d100      	bne.n	1b520 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1b51e:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1b520:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1b524:	e7f9      	b.n	1b51a <memset+0x6>

0001b526 <_stdout_hook_default>:
}
   1b526:	f04f 30ff 	mov.w	r0, #4294967295
   1b52a:	4770      	bx	lr

0001b52c <set_starting_state>:
{
   1b52c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b52e:	f04f 0320 	mov.w	r3, #32
   1b532:	f3ef 8211 	mrs	r2, BASEPRI
   1b536:	f383 8812 	msr	BASEPRI_MAX, r3
   1b53a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b53e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1b540:	f003 0407 	and.w	r4, r3, #7
   1b544:	2c01      	cmp	r4, #1
   1b546:	d106      	bne.n	1b556 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1b548:	6001      	str	r1, [r0, #0]
	int err = 0;
   1b54a:	2000      	movs	r0, #0
	__asm__ volatile(
   1b54c:	f382 8811 	msr	BASEPRI, r2
   1b550:	f3bf 8f6f 	isb	sy
}
   1b554:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1b556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1b55a:	428b      	cmp	r3, r1
		err = -EALREADY;
   1b55c:	bf14      	ite	ne
   1b55e:	f04f 30ff 	movne.w	r0, #4294967295
   1b562:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1b566:	e7f1      	b.n	1b54c <set_starting_state+0x20>

0001b568 <set_on_state>:
	__asm__ volatile(
   1b568:	f04f 0320 	mov.w	r3, #32
   1b56c:	f3ef 8211 	mrs	r2, BASEPRI
   1b570:	f383 8812 	msr	BASEPRI_MAX, r3
   1b574:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1b578:	6803      	ldr	r3, [r0, #0]
   1b57a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b57e:	f043 0302 	orr.w	r3, r3, #2
   1b582:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1b584:	f382 8811 	msr	BASEPRI, r2
   1b588:	f3bf 8f6f 	isb	sy
}
   1b58c:	4770      	bx	lr

0001b58e <onoff_started_callback>:
	return &data->mgr[type];
   1b58e:	6900      	ldr	r0, [r0, #16]
   1b590:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1b592:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1b596:	2100      	movs	r1, #0
   1b598:	4710      	bx	r2

0001b59a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1b59a:	2000      	movs	r0, #0
   1b59c:	f7fa bc00 	b.w	15da0 <nrfx_clock_start>

0001b5a0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1b5a0:	2000      	movs	r0, #0
   1b5a2:	f7fa bc4d 	b.w	15e40 <nrfx_clock_stop>

0001b5a6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1b5a6:	2280      	movs	r2, #128	; 0x80
   1b5a8:	f7f8 ba42 	b.w	13a30 <stop>

0001b5ac <blocking_start_callback>:
{
   1b5ac:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1b5ae:	f7fd bc49 	b.w	18e44 <z_impl_k_sem_give>

0001b5b2 <api_start>:
{
   1b5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   1b5b6:	240c      	movs	r4, #12
   1b5b8:	b2c9      	uxtb	r1, r1
   1b5ba:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1b5bc:	6905      	ldr	r5, [r0, #16]
{
   1b5be:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1b5c0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1b5c4:	2180      	movs	r1, #128	; 0x80
   1b5c6:	4428      	add	r0, r5
{
   1b5c8:	4690      	mov	r8, r2
   1b5ca:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1b5cc:	f7ff ffae 	bl	1b52c <set_starting_state>
	if (err < 0) {
   1b5d0:	2800      	cmp	r0, #0
   1b5d2:	db06      	blt.n	1b5e2 <api_start+0x30>
	subdata->cb = cb;
   1b5d4:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1b5d6:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   1b5da:	6873      	ldr	r3, [r6, #4]
   1b5dc:	591b      	ldr	r3, [r3, r4]
   1b5de:	4798      	blx	r3
	return 0;
   1b5e0:	2000      	movs	r0, #0
}
   1b5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b5e6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b5e6:	6843      	ldr	r3, [r0, #4]
}
   1b5e8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b5ea:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1b5ec:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1b5ee:	600b      	str	r3, [r1, #0]
}
   1b5f0:	4770      	bx	lr

0001b5f2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b5f2:	6843      	ldr	r3, [r0, #4]
   1b5f4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1b5f6:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1b5f8:	4042      	eors	r2, r0
   1b5fa:	400a      	ands	r2, r1
   1b5fc:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1b5fe:	605a      	str	r2, [r3, #4]
}
   1b600:	2000      	movs	r0, #0
   1b602:	4770      	bx	lr

0001b604 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b604:	6843      	ldr	r3, [r0, #4]
}
   1b606:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b608:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1b60a:	6099      	str	r1, [r3, #8]
}
   1b60c:	4770      	bx	lr

0001b60e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b60e:	6843      	ldr	r3, [r0, #4]
}
   1b610:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b612:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1b614:	60d9      	str	r1, [r3, #12]
}
   1b616:	4770      	bx	lr

0001b618 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b618:	6843      	ldr	r3, [r0, #4]
}
   1b61a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b61c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1b61e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1b620:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1b622:	6053      	str	r3, [r2, #4]
}
   1b624:	4770      	bx	lr

0001b626 <uarte_nrfx_config_get>:
{
   1b626:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1b628:	6902      	ldr	r2, [r0, #16]
   1b62a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1b62e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1b632:	2000      	movs	r0, #0
   1b634:	4770      	bx	lr

0001b636 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1b636:	6843      	ldr	r3, [r0, #4]
   1b638:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b63a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1b63e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1b642:	4770      	bx	lr

0001b644 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1b644:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1b646:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b648:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b64c:	b940      	cbnz	r0, 1b660 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1b64e:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b650:	0792      	lsls	r2, r2, #30
   1b652:	d406      	bmi.n	1b662 <is_tx_ready+0x1e>
   1b654:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1b658:	3800      	subs	r0, #0
   1b65a:	bf18      	it	ne
   1b65c:	2001      	movne	r0, #1
   1b65e:	4770      	bx	lr
   1b660:	2001      	movs	r0, #1
}
   1b662:	4770      	bx	lr

0001b664 <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   1b664:	4770      	bx	lr

0001b666 <user_callback>:
	if (data->async->user_callback) {
   1b666:	6903      	ldr	r3, [r0, #16]
   1b668:	68da      	ldr	r2, [r3, #12]
   1b66a:	6813      	ldr	r3, [r2, #0]
   1b66c:	b10b      	cbz	r3, 1b672 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   1b66e:	6852      	ldr	r2, [r2, #4]
   1b670:	4718      	bx	r3
}
   1b672:	4770      	bx	lr

0001b674 <notify_uart_rx_rdy>:
{
   1b674:	b570      	push	{r4, r5, r6, lr}
   1b676:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b678:	6906      	ldr	r6, [r0, #16]
{
   1b67a:	4604      	mov	r4, r0
   1b67c:	460d      	mov	r5, r1
	struct uart_event evt = {
   1b67e:	2214      	movs	r2, #20
   1b680:	2100      	movs	r1, #0
   1b682:	a801      	add	r0, sp, #4
   1b684:	f7ff ff46 	bl	1b514 <memset>
   1b688:	2302      	movs	r3, #2
   1b68a:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   1b68e:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   1b690:	4620      	mov	r0, r4
	struct uart_event evt = {
   1b692:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1b694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	user_callback(dev, &evt);
   1b696:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   1b698:	e9cd 3503 	strd	r3, r5, [sp, #12]
   1b69c:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   1b69e:	f7ff ffe2 	bl	1b666 <user_callback>
}
   1b6a2:	b006      	add	sp, #24
   1b6a4:	bd70      	pop	{r4, r5, r6, pc}

0001b6a6 <notify_rx_buf_release>:
{
   1b6a6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
   1b6a8:	680f      	ldr	r7, [r1, #0]
{
   1b6aa:	4606      	mov	r6, r0
   1b6ac:	460c      	mov	r4, r1
   1b6ae:	4615      	mov	r5, r2
   1b6b0:	b087      	sub	sp, #28
	if (*buf) {
   1b6b2:	b187      	cbz	r7, 1b6d6 <notify_rx_buf_release+0x30>
		struct uart_event evt = {
   1b6b4:	2100      	movs	r1, #0
   1b6b6:	2214      	movs	r2, #20
   1b6b8:	a801      	add	r0, sp, #4
   1b6ba:	f7ff ff2b 	bl	1b514 <memset>
   1b6be:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   1b6c0:	4630      	mov	r0, r6
   1b6c2:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   1b6c6:	f88d 3004 	strb.w	r3, [sp, #4]
   1b6ca:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   1b6cc:	f7ff ffcb 	bl	1b666 <user_callback>
		if (clear) {
   1b6d0:	b10d      	cbz	r5, 1b6d6 <notify_rx_buf_release+0x30>
			*buf = NULL;
   1b6d2:	2300      	movs	r3, #0
   1b6d4:	6023      	str	r3, [r4, #0]
}
   1b6d6:	b007      	add	sp, #28
   1b6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b6da <notify_rx_disable>:
{
   1b6da:	b510      	push	{r4, lr}
   1b6dc:	b086      	sub	sp, #24
   1b6de:	4604      	mov	r4, r0
	struct uart_event evt = {
   1b6e0:	2214      	movs	r2, #20
   1b6e2:	2100      	movs	r1, #0
   1b6e4:	a801      	add	r0, sp, #4
   1b6e6:	f7ff ff15 	bl	1b514 <memset>
   1b6ea:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   1b6ec:	4620      	mov	r0, r4
   1b6ee:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   1b6f0:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   1b6f4:	f7ff ffb7 	bl	1b666 <user_callback>
}
   1b6f8:	b006      	add	sp, #24
   1b6fa:	bd10      	pop	{r4, pc}

0001b6fc <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   1b6fc:	6843      	ldr	r3, [r0, #4]
{
   1b6fe:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   1b700:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b702:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   1b704:	f04f 0020 	mov.w	r0, #32
   1b708:	f3ef 8511 	mrs	r5, BASEPRI
   1b70c:	f380 8812 	msr	BASEPRI_MAX, r0
   1b710:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   1b714:	68e4      	ldr	r4, [r4, #12]
   1b716:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1b718:	b190      	cbz	r0, 1b740 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   1b71a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   1b71c:	b998      	cbnz	r0, 1b746 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   1b71e:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b722:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b726:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   1b72a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1b72e:	f042 0220 	orr.w	r2, r2, #32
   1b732:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   1b736:	f385 8811 	msr	BASEPRI, r5
   1b73a:	f3bf 8f6f 	isb	sy
}
   1b73e:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   1b740:	f06f 000c 	mvn.w	r0, #12
   1b744:	e7f7      	b.n	1b736 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   1b746:	f06f 000f 	mvn.w	r0, #15
   1b74a:	e7f4      	b.n	1b736 <uarte_nrfx_rx_buf_rsp+0x3a>

0001b74c <uarte_nrfx_callback_set>:
	if (!data->async) {
   1b74c:	6903      	ldr	r3, [r0, #16]
   1b74e:	68db      	ldr	r3, [r3, #12]
   1b750:	b11b      	cbz	r3, 1b75a <uarte_nrfx_callback_set+0xe>
	return 0;
   1b752:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   1b754:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   1b758:	4770      	bx	lr
		return -ENOTSUP;
   1b75a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1b75e:	4770      	bx	lr

0001b760 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1b760:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1b762:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   1b764:	68d0      	ldr	r0, [r2, #12]
{
   1b766:	b510      	push	{r4, lr}
	return config->uarte_regs;
   1b768:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   1b76a:	b958      	cbnz	r0, 1b784 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b76c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1b770:	b15c      	cbz	r4, 1b78a <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   1b772:	7d52      	ldrb	r2, [r2, #21]
   1b774:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b776:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1b77a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b77e:	2201      	movs	r2, #1
   1b780:	601a      	str	r2, [r3, #0]
}
   1b782:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   1b784:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b788:	e7fb      	b.n	1b782 <uarte_nrfx_poll_in+0x22>
		return -1;
   1b78a:	f04f 30ff 	mov.w	r0, #4294967295
   1b78e:	e7f8      	b.n	1b782 <uarte_nrfx_poll_in+0x22>

0001b790 <uarte_enable>:
{
   1b790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b792:	6907      	ldr	r7, [r0, #16]
{
   1b794:	4604      	mov	r4, r0
	if (data->async) {
   1b796:	68fb      	ldr	r3, [r7, #12]
   1b798:	b92b      	cbnz	r3, 1b7a6 <uarte_enable+0x16>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b79a:	2208      	movs	r2, #8
	return config->uarte_regs;
   1b79c:	6863      	ldr	r3, [r4, #4]
   1b79e:	681b      	ldr	r3, [r3, #0]
   1b7a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1b7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bool disabled = data->async->low_power_mask == 0;
   1b7a6:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
   1b7aa:	6846      	ldr	r6, [r0, #4]
		data->async->low_power_mask |= mask;
   1b7ac:	4329      	orrs	r1, r5
   1b7ae:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
		if (hw_rx_counting_enabled(data) && disabled) {
   1b7b2:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
   1b7b6:	2b00      	cmp	r3, #0
   1b7b8:	d0ef      	beq.n	1b79a <uarte_enable+0xa>
   1b7ba:	2d00      	cmp	r5, #0
   1b7bc:	d1ed      	bne.n	1b79a <uarte_enable+0xa>
			const nrfx_timer_t *timer = &get_dev_config(dev)->timer;
   1b7be:	3620      	adds	r6, #32
			nrfx_timer_enable(timer);
   1b7c0:	4630      	mov	r0, r6
   1b7c2:	f7fb f8f1 	bl	169a8 <nrfx_timer_enable>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   1b7c6:	68fb      	ldr	r3, [r7, #12]
   1b7c8:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
   1b7cc:	42ab      	cmp	r3, r5
   1b7ce:	dde4      	ble.n	1b79a <uarte_enable+0xa>
				nrfx_timer_increment(timer);
   1b7d0:	4630      	mov	r0, r6
   1b7d2:	f7fb f969 	bl	16aa8 <nrfx_timer_increment>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   1b7d6:	3501      	adds	r5, #1
   1b7d8:	e7f5      	b.n	1b7c6 <uarte_enable+0x36>

0001b7da <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1b7da:	6843      	ldr	r3, [r0, #4]
{
   1b7dc:	b510      	push	{r4, lr}
	return config->uarte_regs;
   1b7de:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b7e0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b7e4:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b7e8:	2200      	movs	r2, #0
   1b7ea:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   1b7ee:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   1b7f2:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b7f6:	685b      	ldr	r3, [r3, #4]
   1b7f8:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
   1b7fc:	06db      	lsls	r3, r3, #27
   1b7fe:	d506      	bpl.n	1b80e <tx_start+0x34>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1b800:	2101      	movs	r1, #1
   1b802:	f7ff ffc5 	bl	1b790 <uarte_enable>
    p_reg->INTENSET = mask;
   1b806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1b80a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b80e:	2301      	movs	r3, #1
   1b810:	60a3      	str	r3, [r4, #8]
}
   1b812:	bd10      	pop	{r4, pc}

0001b814 <rx_timeout>:
{
   1b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   1b816:	6b45      	ldr	r5, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   1b818:	68eb      	ldr	r3, [r5, #12]
   1b81a:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
   1b81e:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   1b822:	2a00      	cmp	r2, #0
   1b824:	d134      	bne.n	1b890 <rx_timeout+0x7c>
    p_reg->INTENCLR = mask;
   1b826:	2110      	movs	r1, #16
	const struct device *dev = data->dev;
   1b828:	682e      	ldr	r6, [r5, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   1b82a:	6870      	ldr	r0, [r6, #4]
	return config->uarte_regs;
   1b82c:	6802      	ldr	r2, [r0, #0]
   1b82e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	if (hw_rx_counting_enabled(data)) {
   1b832:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
   1b836:	b302      	cbz	r2, 1b87a <rx_timeout+0x66>
		read = nrfx_timer_capture(&cfg->timer, 0);
   1b838:	4639      	mov	r1, r7
   1b83a:	3020      	adds	r0, #32
   1b83c:	f7fb f960 	bl	16b00 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   1b840:	68eb      	ldr	r3, [r5, #12]
   1b842:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1b844:	4282      	cmp	r2, r0
		data->async->rx_timeout_left = data->async->rx_timeout;
   1b846:	bf1e      	ittt	ne
   1b848:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
		data->async->rx_total_byte_cnt = read;
   1b84a:	6758      	strne	r0, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
   1b84c:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
	if (!hw_rx_counting_enabled(data) &&
   1b850:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
		    - data->async->rx_total_user_byte_cnt;
   1b854:	e9d3 401d 	ldrd	r4, r0, [r3, #116]	; 0x74
   1b858:	1a24      	subs	r4, r4, r0
	if (!hw_rx_counting_enabled(data) &&
   1b85a:	b922      	cbnz	r2, 1b866 <rx_timeout+0x52>
   1b85c:	2c00      	cmp	r4, #0
		len = 0;
   1b85e:	bfbc      	itt	lt
   1b860:	4614      	movlt	r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   1b862:	f8c3 00c0 	strlt.w	r0, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   1b866:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
   1b86a:	18a0      	adds	r0, r4, r2
   1b86c:	4288      	cmp	r0, r1
   1b86e:	d910      	bls.n	1b892 <rx_timeout+0x7e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   1b870:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   1b872:	2c00      	cmp	r4, #0
   1b874:	dd07      	ble.n	1b886 <rx_timeout+0x72>
		clipped = true;
   1b876:	2701      	movs	r7, #1
   1b878:	e011      	b.n	1b89e <rx_timeout+0x8a>
		read = data->async->rx_cnt.cnt;
   1b87a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
   1b87e:	e7df      	b.n	1b840 <rx_timeout+0x2c>
			data->async->rx_timeout_left -=
   1b880:	1a52      	subs	r2, r2, r1
   1b882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    p_reg->INTENSET = mask;
   1b886:	2210      	movs	r2, #16
	return config->uarte_regs;
   1b888:	6873      	ldr	r3, [r6, #4]
   1b88a:	681b      	ldr	r3, [r3, #0]
   1b88c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   1b892:	2c00      	cmp	r4, #0
   1b894:	ddf7      	ble.n	1b886 <rx_timeout+0x72>
				< data->async->rx_timeout_slab)) {
   1b896:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
   1b89a:	428a      	cmp	r2, r1
   1b89c:	daf0      	bge.n	1b880 <rx_timeout+0x6c>
			notify_uart_rx_rdy(dev, len);
   1b89e:	4621      	mov	r1, r4
   1b8a0:	4630      	mov	r0, r6
   1b8a2:	f7ff fee7 	bl	1b674 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   1b8a6:	68e8      	ldr	r0, [r5, #12]
   1b8a8:	6e83      	ldr	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   1b8aa:	6f81      	ldr	r1, [r0, #120]	; 0x78
			data->async->rx_offset += len;
   1b8ac:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   1b8ae:	4421      	add	r1, r4
			data->async->rx_offset += len;
   1b8b0:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   1b8b2:	6781      	str	r1, [r0, #120]	; 0x78
		if (clipped) {
   1b8b4:	2f00      	cmp	r7, #0
   1b8b6:	d0e6      	beq.n	1b886 <rx_timeout+0x72>
	z_impl_k_timer_stop(timer);
   1b8b8:	3088      	adds	r0, #136	; 0x88
   1b8ba:	f000 fb84 	bl	1bfc6 <z_impl_k_timer_stop>
}
   1b8be:	e7e2      	b.n	1b886 <rx_timeout+0x72>

0001b8c0 <rx_flush>:
	return config->uarte_regs;
   1b8c0:	6843      	ldr	r3, [r0, #4]
{
   1b8c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   1b8c4:	681d      	ldr	r5, [r3, #0]
{
   1b8c6:	4616      	mov	r6, r2
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   1b8c8:	460c      	mov	r4, r1
    return p_reg->RXD.AMOUNT;
   1b8ca:	f8d5 753c 	ldr.w	r7, [r5, #1340]	; 0x53c
   1b8ce:	bb31      	cbnz	r1, 1b91e <rx_flush+0x5e>
   1b8d0:	2605      	movs	r6, #5
		flush_buf = tmp_buf;
   1b8d2:	466b      	mov	r3, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b8d4:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b8d8:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   1b8da:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b8de:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1b8e2:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b8e6:	2201      	movs	r2, #1
   1b8e8:	62ea      	str	r2, [r5, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b8ea:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1b8ee:	2a00      	cmp	r2, #0
   1b8f0:	d0fb      	beq.n	1b8ea <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b8f2:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1b8f6:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   1b8fa:	f8d5 053c 	ldr.w	r0, [r5, #1340]	; 0x53c
	if (!buf) {
   1b8fe:	b914      	cbnz	r4, 1b906 <rx_flush+0x46>
			return rx_amount;
   1b900:	b2c0      	uxtb	r0, r0
}
   1b902:	b003      	add	sp, #12
   1b904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rx_amount != prev_rx_amount) {
   1b906:	4287      	cmp	r7, r0
   1b908:	d1fa      	bne.n	1b900 <rx_flush+0x40>
   1b90a:	4426      	add	r6, r4
	for (int i = 0; i < flush_len; i++) {
   1b90c:	42b4      	cmp	r4, r6
   1b90e:	d101      	bne.n	1b914 <rx_flush+0x54>
	return 0;
   1b910:	2000      	movs	r0, #0
   1b912:	e7f6      	b.n	1b902 <rx_flush+0x42>
		if (buf[i] != dirty) {
   1b914:	f814 3b01 	ldrb.w	r3, [r4], #1
   1b918:	2b00      	cmp	r3, #0
   1b91a:	d0f7      	beq.n	1b90c <rx_flush+0x4c>
   1b91c:	e7f0      	b.n	1b900 <rx_flush+0x40>
		memset(buf, dirty, len);
   1b91e:	2100      	movs	r1, #0
   1b920:	4620      	mov	r0, r4
   1b922:	f7ff fdf7 	bl	1b514 <memset>
		flush_len = len;
   1b926:	4623      	mov	r3, r4
   1b928:	e7d4      	b.n	1b8d4 <rx_flush+0x14>

0001b92a <async_uart_release>:
{
   1b92a:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b92c:	6903      	ldr	r3, [r0, #16]
{
   1b92e:	4604      	mov	r4, r0
	__asm__ volatile(
   1b930:	f04f 0220 	mov.w	r2, #32
   1b934:	f3ef 8611 	mrs	r6, BASEPRI
   1b938:	f382 8812 	msr	BASEPRI_MAX, r2
   1b93c:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   1b940:	68dd      	ldr	r5, [r3, #12]
   1b942:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   1b946:	ea23 0301 	bic.w	r3, r3, r1
   1b94a:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
   1b94e:	b9db      	cbnz	r3, 1b988 <async_uart_release+0x5e>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   1b950:	2902      	cmp	r1, #2
   1b952:	d106      	bne.n	1b962 <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
   1b954:	2205      	movs	r2, #5
   1b956:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
   1b95a:	f7ff ffb1 	bl	1b8c0 <rx_flush>
			data->async->rx_flush_cnt =
   1b95e:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b962:	6925      	ldr	r5, [r4, #16]
	if (data->async && hw_rx_counting_enabled(data)) {
   1b964:	68eb      	ldr	r3, [r5, #12]
   1b966:	b153      	cbz	r3, 1b97e <async_uart_release+0x54>
   1b968:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
   1b96c:	b13b      	cbz	r3, 1b97e <async_uart_release+0x54>
		nrfx_timer_disable(&get_dev_config(dev)->timer);
   1b96e:	6860      	ldr	r0, [r4, #4]
   1b970:	3020      	adds	r0, #32
   1b972:	f7fb f83d 	bl	169f0 <nrfx_timer_disable>
		data->async->rx_total_byte_cnt = 0;
   1b976:	2200      	movs	r2, #0
   1b978:	68eb      	ldr	r3, [r5, #12]
		data->async->rx_total_user_byte_cnt = 0;
   1b97a:	e9c3 221d 	strd	r2, r2, [r3, #116]	; 0x74
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b97e:	2200      	movs	r2, #0
	return config->uarte_regs;
   1b980:	6863      	ldr	r3, [r4, #4]
   1b982:	681b      	ldr	r3, [r3, #0]
   1b984:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1b988:	f386 8811 	msr	BASEPRI, r6
   1b98c:	f3bf 8f6f 	isb	sy
}
   1b990:	bd70      	pop	{r4, r5, r6, pc}

0001b992 <start_tx_locked.isra.0>:
static void start_tx_locked(const struct device *dev, struct uarte_nrfx_data *data)
   1b992:	b510      	push	{r4, lr}
   1b994:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   1b996:	f7ff fe55 	bl	1b644 <is_tx_ready>
   1b99a:	680b      	ldr	r3, [r1, #0]
   1b99c:	b918      	cbnz	r0, 1b9a6 <start_tx_locked.isra.0+0x14>
		data->async->pending_tx = true;
   1b99e:	2201      	movs	r2, #1
   1b9a0:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
   1b9a4:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   1b9a6:	2200      	movs	r2, #0
   1b9a8:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
   1b9ac:	f04f 32ff 	mov.w	r2, #4294967295
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   1b9b0:	4620      	mov	r0, r4
}
   1b9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		data->async->tx_amount = -1;
   1b9b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   1b9ba:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   1b9be:	f7ff bf0c 	b.w	1b7da <tx_start>

0001b9c2 <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   1b9c2:	68c2      	ldr	r2, [r0, #12]
   1b9c4:	6a01      	ldr	r1, [r0, #32]
static bool setup_tx_cache(struct uarte_nrfx_data *data)
   1b9c6:	b508      	push	{r3, lr}
	if (!remaining) {
   1b9c8:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
   1b9ca:	4603      	mov	r3, r0
	if (!remaining) {
   1b9cc:	d00c      	beq.n	1b9e8 <setup_tx_cache.isra.0+0x26>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
   1b9ce:	2a08      	cmp	r2, #8
   1b9d0:	bf28      	it	cs
   1b9d2:	2208      	movcs	r2, #8
	data->async->xfer_buf = data->async->tx_cache;
   1b9d4:	3018      	adds	r0, #24
	data->async->xfer_len = len;
   1b9d6:	f840 2c04 	str.w	r2, [r0, #-4]
	data->async->xfer_buf = data->async->tx_cache;
   1b9da:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   1b9dc:	689b      	ldr	r3, [r3, #8]
   1b9de:	4419      	add	r1, r3
   1b9e0:	f7ff fd8d 	bl	1b4fe <memcpy>
	return true;
   1b9e4:	2001      	movs	r0, #1
}
   1b9e6:	bd08      	pop	{r3, pc}
		return false;
   1b9e8:	4610      	mov	r0, r2
   1b9ea:	e7fc      	b.n	1b9e6 <setup_tx_cache.isra.0+0x24>

0001b9ec <uarte_nrfx_tx_abort>:
{
   1b9ec:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1b9ee:	6843      	ldr	r3, [r0, #4]
   1b9f0:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
   1b9f2:	6903      	ldr	r3, [r0, #16]
   1b9f4:	68d8      	ldr	r0, [r3, #12]
   1b9f6:	6883      	ldr	r3, [r0, #8]
   1b9f8:	b14b      	cbz	r3, 1ba0e <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
   1b9fa:	2400      	movs	r4, #0
   1b9fc:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
   1ba00:	3028      	adds	r0, #40	; 0x28
   1ba02:	f000 fae0 	bl	1bfc6 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ba06:	2301      	movs	r3, #1
	return 0;
   1ba08:	4620      	mov	r0, r4
   1ba0a:	60eb      	str	r3, [r5, #12]
}
   1ba0c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   1ba0e:	f06f 000d 	mvn.w	r0, #13
   1ba12:	e7fb      	b.n	1ba0c <uarte_nrfx_tx_abort+0x20>

0001ba14 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   1ba14:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1ba16:	6818      	ldr	r0, [r3, #0]
   1ba18:	f7ff bfe8 	b.w	1b9ec <uarte_nrfx_tx_abort>

0001ba1c <uarte_nrfx_rx_disable>:
{
   1ba1c:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1ba1e:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   1ba20:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   1ba22:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   1ba24:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   1ba26:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1ba28:	b1b3      	cbz	r3, 1ba58 <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   1ba2a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1ba2c:	b153      	cbz	r3, 1ba44 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   1ba2e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   1ba32:	f023 0320 	bic.w	r3, r3, #32
   1ba36:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ba3a:	2300      	movs	r3, #0
   1ba3c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   1ba40:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1ba44:	3088      	adds	r0, #136	; 0x88
   1ba46:	f000 fabe 	bl	1bfc6 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   1ba4a:	2000      	movs	r0, #0
   1ba4c:	68eb      	ldr	r3, [r5, #12]
   1ba4e:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ba52:	2301      	movs	r3, #1
   1ba54:	6063      	str	r3, [r4, #4]
}
   1ba56:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   1ba58:	f06f 000d 	mvn.w	r0, #13
   1ba5c:	e7fb      	b.n	1ba56 <uarte_nrfx_rx_disable+0x3a>

0001ba5e <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1ba5e:	b510      	push	{r4, lr}
   1ba60:	4604      	mov	r4, r0
   1ba62:	2200      	movs	r2, #0
   1ba64:	2101      	movs	r1, #1
   1ba66:	2008      	movs	r0, #8
   1ba68:	f7f7 f9e0 	bl	12e2c <z_arm_irq_priority_set>
   1ba6c:	2008      	movs	r0, #8
   1ba6e:	f7f7 f9ab 	bl	12dc8 <arch_irq_enable>
   1ba72:	4620      	mov	r0, r4
   1ba74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ba78:	f7f8 bf7c 	b.w	14974 <uarte_instance_init.isra.0>

0001ba7c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1ba7c:	b510      	push	{r4, lr}
   1ba7e:	4604      	mov	r4, r0
   1ba80:	2200      	movs	r2, #0
   1ba82:	2101      	movs	r1, #1
   1ba84:	2009      	movs	r0, #9
   1ba86:	f7f7 f9d1 	bl	12e2c <z_arm_irq_priority_set>
   1ba8a:	2009      	movs	r0, #9
   1ba8c:	f7f7 f99c 	bl	12dc8 <arch_irq_enable>
   1ba90:	4620      	mov	r0, r4
   1ba92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ba96:	f7f8 bf6d 	b.w	14974 <uarte_instance_init.isra.0>

0001ba9a <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   1ba9a:	2000      	movs	r0, #0
   1ba9c:	4770      	bx	lr

0001ba9e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1ba9e:	4770      	bx	lr

0001baa0 <sys_clock_cycle_get_32>:
{
   1baa0:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1baa2:	f7f9 f9c1 	bl	14e28 <z_nrf_rtc_timer_read>
}
   1baa6:	bd08      	pop	{r3, pc}

0001baa8 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   1baa8:	f000 ba54 	b.w	1bf54 <z_impl_k_busy_wait>

0001baac <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   1baac:	f000 b9e0 	b.w	1be70 <k_is_in_isr>

0001bab0 <read_task_create>:
{
   1bab0:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   1bab2:	201c      	movs	r0, #28
   1bab4:	2200      	movs	r2, #0
   1bab6:	2106      	movs	r1, #6
   1bab8:	f7f7 f9b8 	bl	12e2c <z_arm_irq_priority_set>
}
   1babc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   1bac0:	201c      	movs	r0, #28
   1bac2:	f7f7 b981 	b.w	12dc8 <arch_irq_enable>

0001bac6 <nrf_modem_os_trace_put>:
	if (err) {
		LOG_ERR("nrf_modem_trace_processed_callback failed, err %d", err);
	}
#endif
	return 0;
}
   1bac6:	2000      	movs	r0, #0
   1bac8:	4770      	bx	lr

0001baca <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1baca:	4700      	bx	r0

0001bacc <nrfx_busy_wait>:
   1bacc:	f000 ba42 	b.w	1bf54 <z_impl_k_busy_wait>

0001bad0 <nrfx_flag32_is_allocated>:
    return (mask & NRFX_BIT(bitpos)) ? false : true;
   1bad0:	40c8      	lsrs	r0, r1
   1bad2:	43c0      	mvns	r0, r0
}
   1bad4:	f000 0001 	and.w	r0, r0, #1
   1bad8:	4770      	bx	lr

0001bada <nrf_gpio_pin_present_check>:
    switch (port)
   1bada:	0943      	lsrs	r3, r0, #5
   1badc:	bf0c      	ite	eq
   1bade:	f04f 33ff 	moveq.w	r3, #4294967295
   1bae2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   1bae4:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1bae8:	fa23 f000 	lsr.w	r0, r3, r0
}
   1baec:	f000 0001 	and.w	r0, r0, #1
   1baf0:	4770      	bx	lr

0001baf2 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1baf2:	0080      	lsls	r0, r0, #2
}
   1baf4:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1baf8:	4770      	bx	lr

0001bafa <nrf_gpio_reconfigure>:
{
   1bafa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1bafe:	4690      	mov	r8, r2
   1bb00:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   1bb04:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1bb06:	a801      	add	r0, sp, #4
{
   1bb08:	460e      	mov	r6, r1
   1bb0a:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1bb0c:	f7fa fad8 	bl	160c0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1bb10:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1bb12:	f1b8 0f00 	cmp.w	r8, #0
   1bb16:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1bb1a:	bf14      	ite	ne
   1bb1c:	2302      	movne	r3, #2
   1bb1e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1bb20:	2e00      	cmp	r6, #0
   1bb22:	bf18      	it	ne
   1bb24:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1bb28:	2d00      	cmp	r5, #0
   1bb2a:	bf14      	ite	ne
   1bb2c:	210c      	movne	r1, #12
   1bb2e:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1bb30:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1bb32:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1bb36:	bf14      	ite	ne
   1bb38:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   1bb3c:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1bb3e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1bb40:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1bb44:	bf14      	ite	ne
   1bb46:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   1bb4a:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1bb4c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1bb50:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   1bb52:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1bb56:	b106      	cbz	r6, 1bb5a <nrf_gpio_reconfigure+0x60>
   1bb58:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1bb5a:	f1b8 0f00 	cmp.w	r8, #0
   1bb5e:	d003      	beq.n	1bb68 <nrf_gpio_reconfigure+0x6e>
   1bb60:	f898 8000 	ldrb.w	r8, [r8]
   1bb64:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1bb68:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1bb6a:	b10d      	cbz	r5, 1bb70 <nrf_gpio_reconfigure+0x76>
   1bb6c:	782d      	ldrb	r5, [r5, #0]
   1bb6e:	00ad      	lsls	r5, r5, #2
   1bb70:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1bb74:	b10c      	cbz	r4, 1bb7a <nrf_gpio_reconfigure+0x80>
   1bb76:	7822      	ldrb	r2, [r4, #0]
   1bb78:	0214      	lsls	r4, r2, #8
   1bb7a:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1bb7c:	b10f      	cbz	r7, 1bb82 <nrf_gpio_reconfigure+0x88>
   1bb7e:	783f      	ldrb	r7, [r7, #0]
   1bb80:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1bb82:	432c      	orrs	r4, r5
   1bb84:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   1bb86:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   1bb8a:	b002      	add	sp, #8
   1bb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bb90 <nrf_gpio_cfg_sense_set>:
{
   1bb90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1bb92:	f10d 030f 	add.w	r3, sp, #15
   1bb96:	9301      	str	r3, [sp, #4]
   1bb98:	2300      	movs	r3, #0
{
   1bb9a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1bb9e:	461a      	mov	r2, r3
   1bba0:	4619      	mov	r1, r3
   1bba2:	9300      	str	r3, [sp, #0]
   1bba4:	f7ff ffa9 	bl	1bafa <nrf_gpio_reconfigure>
}
   1bba8:	b005      	add	sp, #20
   1bbaa:	f85d fb04 	ldr.w	pc, [sp], #4

0001bbae <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1bbae:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1bbb0:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   1bbb2:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1bbb4:	bf97      	itett	ls
   1bbb6:	6882      	ldrls	r2, [r0, #8]
    r = RdOff - WrOff - 1u;
   1bbb8:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1bbbc:	18d2      	addls	r2, r2, r3
   1bbbe:	f102 32ff 	addls.w	r2, r2, #4294967295
   1bbc2:	bf94      	ite	ls
   1bbc4:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   1bbc6:	1a58      	subhi	r0, r3, r1
}
   1bbc8:	4770      	bx	lr

0001bbca <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1bbca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1bbce:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1bbd2:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1bbd4:	eba9 0804 	sub.w	r8, r9, r4
  if (Rem > NumBytes) {
   1bbd8:	6840      	ldr	r0, [r0, #4]
   1bbda:	4590      	cmp	r8, r2
   1bbdc:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1bbde:	460f      	mov	r7, r1
   1bbe0:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1bbe2:	d904      	bls.n	1bbee <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1bbe4:	f7ff fc8b 	bl	1b4fe <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1bbe8:	60ec      	str	r4, [r5, #12]
}
   1bbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1bbee:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1bbf0:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1bbf4:	f7ff fc83 	bl	1b4fe <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1bbf8:	4622      	mov	r2, r4
   1bbfa:	6868      	ldr	r0, [r5, #4]
   1bbfc:	eb07 0108 	add.w	r1, r7, r8
   1bc00:	e7f0      	b.n	1bbe4 <_WriteNoCheck+0x1a>

0001bc02 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1bc02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bc06:	4606      	mov	r6, r0
   1bc08:	4689      	mov	r9, r1
   1bc0a:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1bc0c:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1bc10:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1bc12:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   1bc14:	68b3      	ldr	r3, [r6, #8]
   1bc16:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1bc18:	bf28      	it	cs
   1bc1a:	18e4      	addcs	r4, r4, r3
   1bc1c:	3c01      	subs	r4, #1
   1bc1e:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1bc20:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1bc22:	42bc      	cmp	r4, r7
   1bc24:	bf28      	it	cs
   1bc26:	463c      	movcs	r4, r7
   1bc28:	4294      	cmp	r4, r2
   1bc2a:	bf28      	it	cs
   1bc2c:	4614      	movcs	r4, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1bc2e:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   1bc30:	4649      	mov	r1, r9
   1bc32:	4428      	add	r0, r5
   1bc34:	4622      	mov	r2, r4
   1bc36:	f7ff fc62 	bl	1b4fe <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1bc3a:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1bc3c:	4425      	add	r5, r4
      WrOff = 0u;
   1bc3e:	42ab      	cmp	r3, r5
   1bc40:	bf08      	it	eq
   1bc42:	2500      	moveq	r5, #0
  } while (NumBytes);
   1bc44:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1bc46:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1bc48:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1bc4a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1bc4c:	d1e1      	bne.n	1bc12 <_WriteBlocking+0x10>
}
   1bc4e:	4640      	mov	r0, r8
   1bc50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001bc54 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1bc54:	f7fa bf84 	b.w	16b60 <_DoInit>

0001bc58 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1bc58:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1bc5a:	f7ff fffb 	bl	1bc54 <SEGGER_RTT_Init>

	return 0;
}
   1bc5e:	2000      	movs	r0, #0
   1bc60:	bd08      	pop	{r3, pc}

0001bc62 <rpc_handle_ctrl_message>:
   1bc62:	2902      	cmp	r1, #2
   1bc64:	b510      	push	{r4, lr}
   1bc66:	4604      	mov	r4, r0
   1bc68:	d005      	beq.n	1bc76 <rpc_handle_ctrl_message+0x14>
   1bc6a:	2904      	cmp	r1, #4
   1bc6c:	d001      	beq.n	1bc72 <rpc_handle_ctrl_message+0x10>
   1bc6e:	2901      	cmp	r1, #1
   1bc70:	d107      	bne.n	1bc82 <rpc_handle_ctrl_message+0x20>
   1bc72:	2000      	movs	r0, #0
   1bc74:	bd10      	pop	{r4, pc}
   1bc76:	6880      	ldr	r0, [r0, #8]
   1bc78:	2800      	cmp	r0, #0
   1bc7a:	d0fa      	beq.n	1bc72 <rpc_handle_ctrl_message+0x10>
   1bc7c:	f000 f831 	bl	1bce2 <rpc_transport_local_data_free>
   1bc80:	e7f7      	b.n	1bc72 <rpc_handle_ctrl_message+0x10>
   1bc82:	6880      	ldr	r0, [r0, #8]
   1bc84:	b108      	cbz	r0, 1bc8a <rpc_handle_ctrl_message+0x28>
   1bc86:	f000 f82c 	bl	1bce2 <rpc_transport_local_data_free>
   1bc8a:	4620      	mov	r0, r4
   1bc8c:	f000 f825 	bl	1bcda <rpc_transport_msg_free>
   1bc90:	e7ef      	b.n	1bc72 <rpc_handle_ctrl_message+0x10>

0001bc92 <rpc_message_send>:
   1bc92:	6843      	ldr	r3, [r0, #4]
   1bc94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1bc98:	f043 0302 	orr.w	r3, r3, #2
   1bc9c:	6043      	str	r3, [r0, #4]
   1bc9e:	f000 b824 	b.w	1bcea <rpc_transport_data_msg_send>

0001bca2 <rpc_message_alloc>:
   1bca2:	b570      	push	{r4, r5, r6, lr}
   1bca4:	4606      	mov	r6, r0
   1bca6:	b130      	cbz	r0, 1bcb6 <rpc_message_alloc+0x14>
   1bca8:	f000 f819 	bl	1bcde <rpc_transport_data_alloc>
   1bcac:	4605      	mov	r5, r0
   1bcae:	b918      	cbnz	r0, 1bcb8 <rpc_message_alloc+0x16>
   1bcb0:	2400      	movs	r4, #0
   1bcb2:	4620      	mov	r0, r4
   1bcb4:	bd70      	pop	{r4, r5, r6, pc}
   1bcb6:	4605      	mov	r5, r0
   1bcb8:	f000 f80d 	bl	1bcd6 <rpc_transport_data_msg_alloc>
   1bcbc:	4604      	mov	r4, r0
   1bcbe:	b110      	cbz	r0, 1bcc6 <rpc_message_alloc+0x24>
   1bcc0:	60c6      	str	r6, [r0, #12]
   1bcc2:	6085      	str	r5, [r0, #8]
   1bcc4:	e7f5      	b.n	1bcb2 <rpc_message_alloc+0x10>
   1bcc6:	2d00      	cmp	r5, #0
   1bcc8:	d0f2      	beq.n	1bcb0 <rpc_message_alloc+0xe>
   1bcca:	4628      	mov	r0, r5
   1bccc:	f000 f809 	bl	1bce2 <rpc_transport_local_data_free>
   1bcd0:	e7ef      	b.n	1bcb2 <rpc_message_alloc+0x10>

0001bcd2 <rpc_message_data_free>:
   1bcd2:	f000 b808 	b.w	1bce6 <rpc_transport_peer_data_free>

0001bcd6 <rpc_transport_data_msg_alloc>:
   1bcd6:	f7fb ba5f 	b.w	17198 <rpc_transport_ipc_data_msg_alloc>

0001bcda <rpc_transport_msg_free>:
   1bcda:	f7fb baa9 	b.w	17230 <rpc_transport_ipc_msg_free>

0001bcde <rpc_transport_data_alloc>:
   1bcde:	f7fb ba8d 	b.w	171fc <rpc_transport_ipc_data_alloc>

0001bce2 <rpc_transport_local_data_free>:
   1bce2:	f000 b804 	b.w	1bcee <rpc_transport_ipc_local_data_free>

0001bce6 <rpc_transport_peer_data_free>:
   1bce6:	f000 b809 	b.w	1bcfc <rpc_transport_ipc_peer_data_free>

0001bcea <rpc_transport_data_msg_send>:
   1bcea:	f7fb ba19 	b.w	17120 <rpc_transport_ipc_data_msg_send>

0001bcee <rpc_transport_ipc_local_data_free>:
   1bcee:	b508      	push	{r3, lr}
   1bcf0:	f7f9 fc48 	bl	15584 <nrf_modem_os_shm_tx_free>
   1bcf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1bcf8:	f7f9 bc0e 	b.w	15518 <nrf_modem_os_application_irq_set>

0001bcfc <rpc_transport_ipc_peer_data_free>:
   1bcfc:	b510      	push	{r4, lr}
   1bcfe:	4604      	mov	r4, r0
   1bd00:	f7fb fa5c 	bl	171bc <rpc_transport_ipc_ctrl_msg_alloc>
   1bd04:	2101      	movs	r1, #1
   1bd06:	2200      	movs	r2, #0
   1bd08:	7001      	strb	r1, [r0, #0]
   1bd0a:	2102      	movs	r1, #2
   1bd0c:	6084      	str	r4, [r0, #8]
   1bd0e:	7042      	strb	r2, [r0, #1]
   1bd10:	7081      	strb	r1, [r0, #2]
   1bd12:	70c2      	strb	r2, [r0, #3]
   1bd14:	f7fb fa22 	bl	1715c <rpc_transport_ipc_ctrl_msg_send>
   1bd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bd1c:	f7f9 bbfc 	b.w	15518 <nrf_modem_os_application_irq_set>

0001bd20 <rpc_client_request_alloc>:
   1bd20:	b508      	push	{r3, lr}
   1bd22:	f7ff ffbe 	bl	1bca2 <rpc_message_alloc>
   1bd26:	b100      	cbz	r0, 1bd2a <rpc_client_request_alloc+0xa>
   1bd28:	3008      	adds	r0, #8
   1bd2a:	bd08      	pop	{r3, pc}

0001bd2c <rpc_client_request_send>:
   1bd2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1bd30:	4610      	mov	r0, r2
   1bd32:	f840 1d08 	str.w	r1, [r0, #-8]!
   1bd36:	f7ff bfac 	b.w	1bc92 <rpc_message_send>

0001bd3a <rpc_client_data_free>:
   1bd3a:	f7ff bfca 	b.w	1bcd2 <rpc_message_data_free>

0001bd3e <ip_interface_request_create>:
   1bd3e:	b570      	push	{r4, r5, r6, lr}
   1bd40:	4606      	mov	r6, r0
   1bd42:	4618      	mov	r0, r3
   1bd44:	460d      	mov	r5, r1
   1bd46:	4614      	mov	r4, r2
   1bd48:	f7ff ffea 	bl	1bd20 <rpc_client_request_alloc>
   1bd4c:	b148      	cbz	r0, 1bd62 <ip_interface_request_create+0x24>
   1bd4e:	2300      	movs	r3, #0
   1bd50:	2208      	movs	r2, #8
   1bd52:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   1bd56:	60c4      	str	r4, [r0, #12]
   1bd58:	6105      	str	r5, [r0, #16]
   1bd5a:	7202      	strb	r2, [r0, #8]
   1bd5c:	7243      	strb	r3, [r0, #9]
   1bd5e:	7283      	strb	r3, [r0, #10]
   1bd60:	72c3      	strb	r3, [r0, #11]
   1bd62:	bd70      	pop	{r4, r5, r6, pc}

0001bd64 <ip_interface_wait>:
   1bd64:	b538      	push	{r3, r4, r5, lr}
   1bd66:	4605      	mov	r5, r0
   1bd68:	f7fb fbe8 	bl	1753c <interface_socket_wait>
   1bd6c:	4604      	mov	r4, r0
   1bd6e:	b938      	cbnz	r0, 1bd80 <ip_interface_wait+0x1c>
   1bd70:	4628      	mov	r0, r5
   1bd72:	f7fb fc5d 	bl	17630 <interface_socket_from_handle_get>
   1bd76:	b118      	cbz	r0, 1bd80 <ip_interface_wait+0x1c>
   1bd78:	6844      	ldr	r4, [r0, #4]
   1bd7a:	b10c      	cbz	r4, 1bd80 <ip_interface_wait+0x1c>
   1bd7c:	2300      	movs	r3, #0
   1bd7e:	6043      	str	r3, [r0, #4]
   1bd80:	4620      	mov	r0, r4
   1bd82:	bd38      	pop	{r3, r4, r5, pc}

0001bd84 <secure_client_socket>:
   1bd84:	f04f 33ff 	mov.w	r3, #4294967295
   1bd88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bd8a:	9301      	str	r3, [sp, #4]
   1bd8c:	680b      	ldr	r3, [r1, #0]
   1bd8e:	4606      	mov	r6, r0
   1bd90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1bd94:	600b      	str	r3, [r1, #0]
   1bd96:	680b      	ldr	r3, [r1, #0]
   1bd98:	460c      	mov	r4, r1
   1bd9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1bd9e:	600b      	str	r3, [r1, #0]
   1bda0:	680f      	ldr	r7, [r1, #0]
   1bda2:	463a      	mov	r2, r7
   1bda4:	f7fb ff10 	bl	17bc8 <secure_socket_attach_initiate>
   1bda8:	4605      	mov	r5, r0
   1bdaa:	b950      	cbnz	r0, 1bdc2 <secure_client_socket+0x3e>
   1bdac:	220c      	movs	r2, #12
   1bdae:	4630      	mov	r0, r6
   1bdb0:	4611      	mov	r1, r2
   1bdb2:	ab01      	add	r3, sp, #4
   1bdb4:	f7ff ffd6 	bl	1bd64 <ip_interface_wait>
   1bdb8:	4605      	mov	r5, r0
   1bdba:	b128      	cbz	r0, 1bdc8 <secure_client_socket+0x44>
   1bdbc:	2877      	cmp	r0, #119	; 0x77
   1bdbe:	d000      	beq.n	1bdc2 <secure_client_socket+0x3e>
   1bdc0:	6027      	str	r7, [r4, #0]
   1bdc2:	4628      	mov	r0, r5
   1bdc4:	b003      	add	sp, #12
   1bdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bdc8:	4630      	mov	r0, r6
   1bdca:	f7fb feeb 	bl	17ba4 <hostname_free>
   1bdce:	6823      	ldr	r3, [r4, #0]
   1bdd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1bdd4:	6023      	str	r3, [r4, #0]
   1bdd6:	6823      	ldr	r3, [r4, #0]
   1bdd8:	0c1b      	lsrs	r3, r3, #16
   1bdda:	041b      	lsls	r3, r3, #16
   1bddc:	f043 030c 	orr.w	r3, r3, #12
   1bde0:	6023      	str	r3, [r4, #0]
   1bde2:	6823      	ldr	r3, [r4, #0]
   1bde4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1bde8:	6023      	str	r3, [r4, #0]
   1bdea:	6823      	ldr	r3, [r4, #0]
   1bdec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1bdf0:	6023      	str	r3, [r4, #0]
   1bdf2:	e7e6      	b.n	1bdc2 <secure_client_socket+0x3e>

0001bdf4 <nrf_modem_recoverable_error_handler>:
   1bdf4:	4770      	bx	lr

0001bdf6 <nrf_modem_platform_error_handler>:
   1bdf6:	b508      	push	{r3, lr}
   1bdf8:	f7ff fffc 	bl	1bdf4 <nrf_modem_recoverable_error_handler>
   1bdfc:	bd08      	pop	{r3, pc}

0001bdfe <rpc_transport_ipc_fault_handler>:
   1bdfe:	f7ff bffa 	b.w	1bdf6 <nrf_modem_platform_error_handler>

0001be02 <nrf_modem_platform_init>:
   1be02:	b513      	push	{r0, r1, r4, lr}
   1be04:	4604      	mov	r4, r0
   1be06:	f7f9 fbc3 	bl	15590 <nrf_modem_os_init>
   1be0a:	6a23      	ldr	r3, [r4, #32]
   1be0c:	4668      	mov	r0, sp
   1be0e:	9400      	str	r4, [sp, #0]
   1be10:	f88d 3004 	strb.w	r3, [sp, #4]
   1be14:	f7fb fa32 	bl	1727c <rpc_transport_ipc_init>
   1be18:	4604      	mov	r4, r0
   1be1a:	b948      	cbnz	r0, 1be30 <nrf_modem_platform_init+0x2e>
   1be1c:	f7fb fb82 	bl	17524 <interface_init>
   1be20:	f7fb ffc6 	bl	17db0 <nrf_modem_at_init>
   1be24:	4604      	mov	r4, r0
   1be26:	b918      	cbnz	r0, 1be30 <nrf_modem_platform_init+0x2e>
   1be28:	f7fb fc3a 	bl	176a0 <ip_interface_init>
   1be2c:	f7fb ff1e 	bl	17c6c <tls_interface_init>
   1be30:	4620      	mov	r0, r4
   1be32:	b002      	add	sp, #8
   1be34:	bd10      	pop	{r4, pc}

0001be36 <z_device_state_init>:
}
   1be36:	4770      	bx	lr

0001be38 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1be38:	b138      	cbz	r0, 1be4a <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1be3a:	68c3      	ldr	r3, [r0, #12]
   1be3c:	8818      	ldrh	r0, [r3, #0]
   1be3e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1be42:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1be46:	4258      	negs	r0, r3
   1be48:	4158      	adcs	r0, r3
}
   1be4a:	4770      	bx	lr

0001be4c <k_heap_init>:
{
   1be4c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1be4e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1be52:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1be56:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1be58:	f7f5 be9e 	b.w	11b98 <sys_heap_init>

0001be5c <k_heap_alloc>:
{
   1be5c:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   1be5e:	e9cd 2300 	strd	r2, r3, [sp]
   1be62:	460a      	mov	r2, r1
   1be64:	2104      	movs	r1, #4
   1be66:	f7fc fb63 	bl	18530 <k_heap_aligned_alloc>
}
   1be6a:	b003      	add	sp, #12
   1be6c:	f85d fb04 	ldr.w	pc, [sp], #4

0001be70 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1be70:	f3ef 8005 	mrs	r0, IPSR
}
   1be74:	3800      	subs	r0, #0
   1be76:	bf18      	it	ne
   1be78:	2001      	movne	r0, #1
   1be7a:	4770      	bx	lr

0001be7c <z_impl_k_thread_name_set>:
}
   1be7c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1be80:	4770      	bx	lr

0001be82 <k_thread_name_get>:
}
   1be82:	2000      	movs	r0, #0
   1be84:	4770      	bx	lr

0001be86 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1be86:	f7fd bf01 	b.w	19c8c <z_sched_start>

0001be8a <z_pm_save_idle_exit>:
{
   1be8a:	b508      	push	{r3, lr}
	pm_system_resume();
   1be8c:	f7f6 fe7a 	bl	12b84 <pm_system_resume>
}
   1be90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1be94:	f7ff be03 	b.w	1ba9e <sys_clock_idle_exit>

0001be98 <z_impl_k_mutex_init>:
{
   1be98:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1be9a:	2000      	movs	r0, #0
   1be9c:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1bea0:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1bea4:	4770      	bx	lr

0001bea6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1bea6:	b13a      	cbz	r2, 1beb8 <z_impl_k_sem_init+0x12>
   1bea8:	428a      	cmp	r2, r1
   1beaa:	d305      	bcc.n	1beb8 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   1beac:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1beb0:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   1beb4:	2000      	movs	r0, #0
   1beb6:	4770      	bx	lr
		return -EINVAL;
   1beb8:	f06f 0015 	mvn.w	r0, #21
}
   1bebc:	4770      	bx	lr

0001bebe <notify_queue_locked>:
	if (queue != NULL) {
   1bebe:	b120      	cbz	r0, 1beca <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1bec0:	2200      	movs	r2, #0
   1bec2:	3088      	adds	r0, #136	; 0x88
   1bec4:	4611      	mov	r1, r2
   1bec6:	f7fe bbe7 	b.w	1a698 <z_sched_wake>
}
   1beca:	4770      	bx	lr

0001becc <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   1becc:	68c3      	ldr	r3, [r0, #12]
{
   1bece:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   1bed0:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   1bed4:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1bed8:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1beda:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1bedc:	d502      	bpl.n	1bee4 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1bede:	3010      	adds	r0, #16
   1bee0:	f7fe fd56 	bl	1a990 <z_abort_timeout>
}
   1bee4:	4620      	mov	r0, r4
   1bee6:	bd10      	pop	{r4, pc}

0001bee8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1bee8:	4603      	mov	r3, r0
   1beea:	b920      	cbnz	r0, 1bef6 <z_reschedule_irqlock+0xe>
   1beec:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1bef0:	b90a      	cbnz	r2, 1bef6 <z_reschedule_irqlock+0xe>
   1bef2:	f7f6 bff7 	b.w	12ee4 <arch_swap>
   1bef6:	f383 8811 	msr	BASEPRI, r3
   1befa:	f3bf 8f6f 	isb	sy
}
   1befe:	4770      	bx	lr

0001bf00 <z_reschedule_unlocked>:
	__asm__ volatile(
   1bf00:	f04f 0320 	mov.w	r3, #32
   1bf04:	f3ef 8011 	mrs	r0, BASEPRI
   1bf08:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf0c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1bf10:	f7ff bfea 	b.w	1bee8 <z_reschedule_irqlock>

0001bf14 <z_priq_dumb_best>:
{
   1bf14:	4603      	mov	r3, r0
	return list->head == list;
   1bf16:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf18:	4283      	cmp	r3, r0
   1bf1a:	d003      	beq.n	1bf24 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1bf1c:	2800      	cmp	r0, #0
   1bf1e:	bf38      	it	cc
   1bf20:	2000      	movcc	r0, #0
   1bf22:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1bf24:	2000      	movs	r0, #0
}
   1bf26:	4770      	bx	lr

0001bf28 <z_unpend_all>:
{
   1bf28:	b538      	push	{r3, r4, r5, lr}
   1bf2a:	4605      	mov	r5, r0
	int need_sched = 0;
   1bf2c:	2000      	movs	r0, #0
	return list->head == list;
   1bf2e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf30:	42a5      	cmp	r5, r4
   1bf32:	d000      	beq.n	1bf36 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1bf34:	b904      	cbnz	r4, 1bf38 <z_unpend_all+0x10>
}
   1bf36:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1bf38:	4620      	mov	r0, r4
   1bf3a:	f7fd fcff 	bl	1993c <z_unpend_thread>
		z_ready_thread(thread);
   1bf3e:	4620      	mov	r0, r4
   1bf40:	f7fd fe6e 	bl	19c20 <z_ready_thread>
		need_sched = 1;
   1bf44:	2001      	movs	r0, #1
   1bf46:	e7f2      	b.n	1bf2e <z_unpend_all+0x6>

0001bf48 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1bf48:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1bf4a:	f7fe fe85 	bl	1ac58 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1bf4e:	bd08      	pop	{r3, pc}

0001bf50 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1bf50:	f7fe be82 	b.w	1ac58 <sys_clock_tick_get>

0001bf54 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1bf54:	b108      	cbz	r0, 1bf5a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1bf56:	f7f6 ba6b 	b.w	12430 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1bf5a:	4770      	bx	lr

0001bf5c <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   1bf5c:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bf5e:	1c4b      	adds	r3, r1, #1
   1bf60:	bf08      	it	eq
   1bf62:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1bf66:	4604      	mov	r4, r0
   1bf68:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bf6a:	d013      	beq.n	1bf94 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bf6c:	ea54 0105 	orrs.w	r1, r4, r5
   1bf70:	d103      	bne.n	1bf7a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1bf72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1bf76:	f7fe be6f 	b.w	1ac58 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1bf7a:	f06f 0101 	mvn.w	r1, #1
   1bf7e:	1a0a      	subs	r2, r1, r0
   1bf80:	f04f 31ff 	mov.w	r1, #4294967295
   1bf84:	eb61 0305 	sbc.w	r3, r1, r5
   1bf88:	2a00      	cmp	r2, #0
   1bf8a:	f173 0100 	sbcs.w	r1, r3, #0
   1bf8e:	db02      	blt.n	1bf96 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   1bf90:	4610      	mov	r0, r2
   1bf92:	4619      	mov	r1, r3
}
   1bf94:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   1bf96:	f7fe fe5f 	bl	1ac58 <sys_clock_tick_get>
   1bf9a:	2c01      	cmp	r4, #1
   1bf9c:	f175 0300 	sbcs.w	r3, r5, #0
   1bfa0:	bfbc      	itt	lt
   1bfa2:	2401      	movlt	r4, #1
   1bfa4:	2500      	movlt	r5, #0
   1bfa6:	1820      	adds	r0, r4, r0
   1bfa8:	eb45 0101 	adc.w	r1, r5, r1
   1bfac:	e7f2      	b.n	1bf94 <sys_clock_timeout_end_calc+0x38>

0001bfae <k_timer_init>:
	timer->status = 0U;
   1bfae:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1bfb0:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1bfb4:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1bfb8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1bfbc:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1bfc0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1bfc2:	6343      	str	r3, [r0, #52]	; 0x34
}
   1bfc4:	4770      	bx	lr

0001bfc6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1bfc6:	b510      	push	{r4, lr}
   1bfc8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1bfca:	f7fe fce1 	bl	1a990 <z_abort_timeout>

	if (inactive) {
   1bfce:	b9b0      	cbnz	r0, 1bffe <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1bfd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bfd2:	b10b      	cbz	r3, 1bfd8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1bfd4:	4620      	mov	r0, r4
   1bfd6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1bfd8:	f104 0018 	add.w	r0, r4, #24
   1bfdc:	f7fe f8ea 	bl	1a1b4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1bfe0:	b168      	cbz	r0, 1bffe <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1bfe2:	f7fd fe1d 	bl	19c20 <z_ready_thread>
   1bfe6:	f04f 0320 	mov.w	r3, #32
   1bfea:	f3ef 8011 	mrs	r0, BASEPRI
   1bfee:	f383 8812 	msr	BASEPRI_MAX, r3
   1bff2:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1bff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bffa:	f7ff bf75 	b.w	1bee8 <z_reschedule_irqlock>
   1bffe:	bd10      	pop	{r4, pc}

0001c000 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1c000:	4770      	bx	lr
	...

0001c004 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1c004:	f7f9 be1a 	b.w	15c3c <SystemInit>
